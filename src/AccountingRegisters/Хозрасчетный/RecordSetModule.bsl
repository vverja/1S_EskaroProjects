Процедура ПроверитьПроводку(Проводка)

	СчетДт = Проводка.СчетДт;
	СчетКт = Проводка.СчетКт;
	
	// Проверим и почистим небалансовые реквизиты
	Если НЕ СчетДт.Количественный И Проводка.КоличествоДт <> 0 Тогда
	    Проводка.КоличествоДт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетДт.Валютный И Проводка.ВалютаДт <> Неопределено Тогда
	    Проводка.ВалютаДт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетДт.Валютный И Проводка.ВалютнаяСуммаДт <> 0 Тогда
	    Проводка.ВалютнаяСуммаДт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетКт.Количественный И Проводка.КоличествоКт <> 0 Тогда
	    Проводка.КоличествоКт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетКт.Валютный И Проводка.ВалютаКт <> Неопределено Тогда
	    Проводка.ВалютаКт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетКт.Валютный И Проводка.ВалютнаяСуммаКт <> 0 Тогда
	    Проводка.ВалютнаяСуммаКт = Неопределено;
	КонецЕсли; 

	// Проверим сочетание баланса и забаланса
	Если СчетДт.Забалансовый И НЕ СчетКт.Забалансовый Тогда
		Проводка.СчетКт          = Неопределено;
		Проводка.ВалютаКт        = Неопределено;
		Проводка.КоличествоКт    = 0;
		Проводка.ВалютнаяСуммаКт = 0;
		Проводка.СубконтоКт.Очистить();
		Проводка.НалоговоеНазначениеКт = Неопределено;
		Проводка.СуммаНУКт = 0;
	КонецЕсли; 

	Если СчетКт.Забалансовый И НЕ СчетДт.Забалансовый Тогда
		Проводка.СчетДт          = Неопределено;
		Проводка.ВалютаДт        = Неопределено;
		Проводка.КоличествоДт    = 0;
		Проводка.ВалютнаяСуммаДт = 0;
		Проводка.СубконтоДт.Очистить();
		Проводка.НалоговоеНазначениеДт = Неопределено;
		Проводка.СуммаНУДт = 0;
	КонецЕсли; 
	
	Если НЕ СчетКт.НалоговыйУчет И Проводка.НалоговоеНазначениеКт <> Неопределено Тогда
	    Проводка.НалоговоеНазначениеКт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетКт.НалоговыйУчет И Проводка.СуммаНУКт <> 0 Тогда
	    Проводка.СуммаНУКт = 0;
	КонецЕсли; 

	Если НЕ СчетДт.НалоговыйУчет И Проводка.НалоговоеНазначениеДт <> Неопределено Тогда
	    Проводка.НалоговоеНазначениеДт = Неопределено;
	КонецЕсли; 

	Если НЕ СчетДт.НалоговыйУчет И Проводка.СуммаНУДт <> 0 Тогда
	    Проводка.СуммаНУДт = 0;
	КонецЕсли; 
	
	

КонецПроцедуры
 
Функция ПровестиПоЗатратам(Проводка, Индекс, ХешСоответствие)
	
	Организация = Проводка.Организация;
	
	ИспользуемыеКлассыСчетовРасходов = ХешСоответствие[Организация];
	Если ИспользуемыеКлассыСчетовРасходов = Неопределено Тогда
		ИспользуемыеКлассыСчетовРасходов = БухгалтерскийУчет.ПолучитьИспользуемыеКлассыСчетовРасходов(Проводка.Период, Организация);
		ХешСоответствие.Вставить(Организация, ИспользуемыеКлассыСчетовРасходов);
	КонецЕсли;

	Если ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс9 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СчетДт         = Проводка.СчетДт;
	ВидыСубконтоДт = СчетДт.ВидыСубконто;
	
	СчетКт         = Проводка.СчетКт;
	ВидыСубконтоКт = СчетКт.ВидыСубконто;
	
	Если    // Счет дебета не указан
		    СчетДт.Пустая()
			// Счет кредита не указан
		ИЛИ СчетКт.Пустая()
		    // Списание на затраты будущих периодов
		ИЛИ СчетДт = ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов
		ИЛИ СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов)
			// Списание полуфабриката на затраты
		ИЛИ СчетКт = ПланыСчетов.Хозрасчетный.Полуфабрикаты
		ИЛИ СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Полуфабрикаты)
		    // Списание продукции на затраты
		ИЛИ СчетКт = ПланыСчетов.Хозрасчетный.ГотоваяПродукция
		ИЛИ СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ГотоваяПродукция)       
		    // Списание продукции с/х производства на затраты
		ИЛИ СчетКт = ПланыСчетов.Хозрасчетный.ПродукцияСельскохозяйственногоПроизводства
		ИЛИ СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПродукцияСельскохозяйственногоПроизводства)       
		    // Списание затрат из производства в производство или на брак (перераспределение затрат)
		ИЛИ СчетКт = ПланыСчетов.Хозрасчетный.Производство
		ИЛИ СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Производство) 
		    // Списание затрат на брак в производство или на брак (перераспределение затрат)
		ИЛИ СчетКт = ПланыСчетов.Хозрасчетный.БракВПроизводстве
		ИЛИ СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.БракВПроизводстве) 
		    // Списание со счета 8 класса
		ИЛИ СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ЗатратыПоЭлементам)
		    // Списание со счета 9 класса
		ИЛИ СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ЗатратыДеятельности) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	ИзменятьПроводку = Ложь;
	ДелитьПроводку   = Ложь;
	
	Если  СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ЗатратыДеятельности)
		И     (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9
		  ИЛИ  ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8)  Тогда
		// Списание на счета 9 класса
		ИзменятьПроводку = Истина;
		ДелитьПроводку   = (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9);
	КонецЕсли;
	
	Если      (СчетДт = ПланыСчетов.Хозрасчетный.Производство
		  ИЛИ  СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Производство)
		  ИЛИ  СчетДт = ПланыСчетов.Хозрасчетный.БракВПроизводстве
		  ИЛИ  СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.БракВПроизводстве))
		И     (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9
		  ИЛИ  ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8)  Тогда
		// Списание на счета 23 или 24 и используется 8 класс или 8 и 9 классы одновременно
		ИзменятьПроводку = Истина;
		ДелитьПроводку   = Истина;
	КонецЕсли;
	
	Если НЕ ИзменятьПроводку Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипСтатьиЗатрат = Тип("СправочникСсылка.СтатьиЗатрат");
	ЕстьСчет8Класса = Ложь;
	
	Для К = 1 По ВидыСубконтоДт.Количество() Цикл
		
		ЗначениеСубконто = Проводка.СубконтоДт[ВидыСубконтоДт[К-1].ВидСубконто];
		Если ТипЗнч(ЗначениеСубконто) = ТипСтатьиЗатрат Тогда
			
			Счет8Класса = ЗначениеСубконто.Счет8Класса;
			Если    Счет8Класса.Пустая()
				ИЛИ   Счет8Класса = ПланыСчетов.Хозрасчетный.ДругиеЗатратыПоЭлементам
				ИЛИ   Счет8Класса.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДругиеЗатратыПоЭлементам)
				    И ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9 Тогда
				// Счет неопределен или это 85 счет и используются 8 и 9 классы одновременно
				ЕстьСчет8Класса = Ложь;
			Иначе
				ЕстьСчет8Класса = Истина;
				ВидыСубконтоСчет8Класса = Счет8Класса.ВидыСубконто;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
		
	Если НЕ ЕстьСчет8Класса Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДелитьПроводку Тогда
		
		// новая проводка
		НоваяПроводка = ЭтотОбъект.Вставить(Индекс);
		
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Проводка);
		
		Для К = 1 По ВидыСубконтоКт.Количество() Цикл
			НоваяПроводка.СубконтоКт[ВидыСубконтоКт[К-1].ВидСубконто] = Проводка.СубконтоКт[ВидыСубконтоКт[К-1].ВидСубконто];
		КонецЦикла;
		
		НоваяПроводка.СчетДт = Счет8Класса;
		
		Для К = 1 По ВидыСубконтоСчет8Класса.Количество() Цикл
			НоваяПроводка.СубконтоДт[ВидыСубконтоСчет8Класса[К-1].ВидСубконто] = Проводка.СубконтоДт[ВидыСубконтоСчет8Класса[К-1].ВидСубконто];
		КонецЦикла;
		
		// исправим кредитовую сторону проводки
		Проводка.СчетКт             = Счет8Класса;
		Проводка.СубконтоКт.Очистить();
		Для К = 1 По ВидыСубконтоСчет8Класса.Количество() Цикл
			Проводка.СубконтоКт[ВидыСубконтоСчет8Класса[К-1].ВидСубконто] = Проводка.СубконтоДт[ВидыСубконтоСчет8Класса[К-1].ВидСубконто];
		КонецЦикла; 		
		Проводка.ВалютаКт        = Проводка.ВалютаДт;
		Проводка.ВалютнаяСуммаКт = Проводка.ВалютнаяСуммаДт;
		Проводка.КоличествоКт    = Проводка.КоличествоДт;
		
		Проводка.НалоговоеНазначениеКт = Проводка.НалоговоеНазначениеДт;
		Проводка.СуммаНУКт = Проводка.СуммаНУДт;
		
		// сохраним значение счета дебета в реквизите проводки
		Проводка.СчетДополнительный = СчетКт;
		
		ПроверитьПроводку(НоваяПроводка);
		ПроверитьПроводку(Проводка);
		
		Возврат Истина;
		
	Иначе
		// исправим дебетовый счет проводки
		Проводка.СчетДт = Счет8Класса;
		СоответсвиеСубконто = Новый Соответствие;
		Для К = 1 По ВидыСубконтоДт.Количество() Цикл
			СоответсвиеСубконто.Вставить(ВидыСубконтоДт[К-1].ВидСубконто, Проводка.СубконтоДт[ВидыСубконтоДт[К-1].ВидСубконто]);
		КонецЦикла; 		
		Проводка.СубконтоДт.Очистить();
		Для К = 1 По ВидыСубконтоСчет8Класса.Количество() Цикл
			Проводка.СубконтоДт[ВидыСубконтоСчет8Класса[К-1].ВидСубконто] = СоответсвиеСубконто.Получить(ВидыСубконтоСчет8Класса[К-1].ВидСубконто);
		КонецЦикла; 		
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ПровестиПоЗатратам()

//////////////////////////////////////////////////////////////////////////////// 
// ОБРАБОТЧИКИ СОБЫТИЙ
// 
 
// Обработчик события "ПередЗаписью".
// Проверяет возможность изменения записей регистра.
// Проверяет заполнение корреспонденции.
// Замещает пустые значения субконто составного типа значением Неопределено.
// Замещает субконто не составного типа со значением Неопределено пустым значением своего типа.
// Делает транзитную проводку через 8-й класс счетов
Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	БухгалтерскийУчет.СвернутьНаборЗаписейРегистраБухгалтерии(ЭтотОбъект);
	
	КвоПроводок    = ЭтотОбъект.Количество();
	КвоДобавленных = 0;
	
	Если КвоПроводок > 0 Тогда
	    Заголовок = СокрЛП(ЭтотОбъект.Отбор.Регистратор.Значение);
	Иначе
		Возврат;
	КонецЕсли; 
	
	ХешСоответствие = Новый Соответствие;
	
	Для К = 1 По КвоПроводок Цикл
		
		Индекс = К - 1 + КвоДобавленных;
		Проводка = ЭтотОбъект[Индекс];
		
		Если НЕ ЗначениеЗаполнено(Проводка.СчетДт) И НЕ Проводка.СчетКт.Забалансовый Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Проводка № "+(Проводка.НомерСтроки+1) +" <"+Проводка.Содержание+">: не заполнен счет дебета.",Отказ,Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Проводка.СчетКт) И НЕ Проводка.СчетДт.Забалансовый Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Проводка № "+(Проводка.НомерСтроки+1) +" <"+Проводка.Содержание+">: не заполнен счет кредита.",Отказ,Заголовок);
		КонецЕсли;
		
		Если ПровестиПоЗатратам(Проводка, Индекс, ХешСоответствие) Тогда
			КвоДобавленных = КвоДобавленных + 1;
		Иначе
			ПроверитьПроводку(Проводка);
		КонецЕсли;
	КонецЦикла;
	
	// Приведение пустых значений субконто составного типа в Неопределено
	// Приведение субконто не составного типа со значением Неопределено в пустое значение своего типа
	Для К = 1 По КвоПроводок + КвоДобавленных Цикл
		
		Индекс = К - 1;
		Проводка = ЭтотОбъект[Индекс];
		
		Для Каждого Субконто Из Проводка.СубконтоДт Цикл
			ТипыСубконто = Субконто.Ключ.ТипЗначения.Типы();
			Если ТипыСубконто.Количество() > 1
			   И НЕ ЗначениеЗаполнено(Субконто.Значение) 
			   И НЕ (Субконто.Значение = Неопределено) Тогда
				Проводка.СубконтоДт.Вставить(Субконто.Ключ, Неопределено);
			ИначеЕсли ТипыСубконто.Количество() = 1	И Субконто.Значение = Неопределено Тогда
				Проводка.СубконтоДт.Вставить(Субконто.Ключ, ОбщегоНазначения.ПустоеЗначениеТипа(ТипыСубконто[0]));
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			ТипыСубконто = Субконто.Ключ.ТипЗначения.Типы();
			Если ТипыСубконто.Количество() > 1
			   И НЕ ЗначениеЗаполнено(Субконто.Значение) 
			   И НЕ (Субконто.Значение = Неопределено) Тогда
				Проводка.СубконтоКт.Вставить(Субконто.Ключ, Неопределено);
			ИначеЕсли ТипыСубконто.Количество() = 1	И Субконто.Значение = Неопределено Тогда	
				Проводка.СубконтоКт.Вставить(Субконто.Ключ, ОбщегоНазначения.ПустоеЗначениеТипа(ТипыСубконто[0]));
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры