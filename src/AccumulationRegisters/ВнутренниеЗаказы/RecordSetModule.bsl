Перем мПериод          Экспорт; // Период движений
Перем мТаблицаДвижений Экспорт; // Таблица движений

// Выполняет приход по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьПриход() Экспорт

	ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(ЭтотОбъект, ВидДвиженияНакопления.Приход);

КонецПроцедуры // ВыполнитьПриход()

// Выполняет расход по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьРасход() Экспорт

	ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(ЭтотОбъект, ВидДвиженияНакопления.Расход);

КонецПроцедуры // ВыполнитьРасход()

// Выполняет движения по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьДвижения() Экспорт

	Загрузить(мТаблицаДвижений);

КонецПроцедуры // ВыполнитьДвижения()

// Процедура контролирует остаток по данному регистру по переданному документу
// и его табличной части. В случае недостатка товаров выставляется флаг отказа и 
// выдается сообщение.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа, 
//  Параметры      - структура, содержащая значения параметров необходимых для контроля остатков
//		Обязательные параметры:
//			ИмяТабЧасти       - имя таб.части документа
//			ИмяРеквизитаЗаказ - имя реквизита, в котором содержится внутренний заказ
//			ЗаказВШапке       - реквизит, который содержит внутренний заказ, находится в шапке
//		Необязательные параметры:
//			КачествоТолькоНовый           - Если Истина, то контроль остатков производится только для строк с качеством "Новый"
//			ТолькоОтрицательноеКоличество - Если Истина, то контроль остатков производится только для строк с отрицательным количеством.
//  Отказ          - флаг отказа в проведении,
//  Заголовок      - строка, заголовок сообщения об ошибке проведения.
//
Процедура КонтрольОстатков(ДокументОбъект, Параметры, Отказ, Заголовок, РежимПроведения) Экспорт

	Если РежимПроведения <> РежимПроведенияДокумента.Оперативный Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяДокумента        = МетаданныеДокумента.Имя;
	ИмяТабличнойЧасти   = Параметры["ИмяТабЧасти"];
	//проверка наличия строк в табличной части
	Если  ДокументОбъект[ИмяТабличнойЧасти].Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	МетаданныеТабЧастиДокумента = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
	
	ЕстьХарактеристика  = МетаданныеТабЧастиДокумента.Реквизиты.Найти("ХарактеристикаНоменклатуры") <> Неопределено;
	текСтатусПартии = ?( ИмяТабличнойЧасти = "ВозвратнаяТара",
		Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,
		Перечисления.СтатусыПартийТоваров.Купленный);

	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    СтруктураПараметров = новый Структура("МетаданныеДокумента,ИмяДокумента,ИмяТабличнойЧасти,МетаданныеТабЧастиДокумента,Ссылка, ЕстьХарактеристика,Параметры",
		МетаданныеДокумента,ИмяДокумента,ИмяТабличнойЧасти,МетаданныеТабЧастиДокумента,ДокументОбъект.Ссылка,ЕстьХарактеристика,Параметры);
		
	СформироватьВременнуюТаблицуДокумента(МенеджерВременныхТаблиц,СтруктураПараметров);
	Если глЗначениеПеременной("ИспользоватьБлокировкуДанных")  Тогда
		
		СтруктураПараметровБлокировки = Новый Структура(
			"ТипТаблицы,ИмяТаблицы,ИсточникДанных,ИмяВременнойТаблицы"
			,"РегистрНакопления"
			,"ВнутренниеЗаказы"
			,МенеджерВременныхТаблиц
			,"ВременнаяТаблицаДокумента");
			
		СтруктураИсточникаДанных = Новый Структура(
			"Заказчик,ВнутреннийЗаказ,Номенклатура"
			,"Заказчик"
			,"Заказ"
			,"Номенклатура");
		Если ЕстьХарактеристика  Тогда
			СтруктураИсточникаДанных.Вставить("ХарактеристикаНоменклатуры","ХарактеристикаНоменклатуры");
		КонецЕсли;
	
		СтруктураЗначенийБлокировки = новый Структура("СтатусПартии",текСтатусПартии);
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки,СтруктураЗначенийБлокировки,СтруктураИсточникаДанных, Отказ, Заголовок);

	КонецЕсли; 
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	// Установим параметры запроса
	Запрос.УстановитьПараметр("СтатусПартии", текСтатусПартии);

	ТекстЗапроса = "
	|ВЫБРАТЬ // Запрос, контролирующий остатки на складах
	|	Док.Номенклатура                             КАК Номенклатура,
	|	Док.Номенклатура.Представление               КАК НоменклатураПредставление,
	|	Док.ЕдИзм				                     КАК ЕдиницаИзмерения,
	|	Док.Заказ									 КАК Заказ,
	|	Док.Заказчик								 КАК Заказчик,
	|	Док.ЕдИзм.Представление        				 КАК ЕдиницаПредставление,"
	+ ?(ЕстьХарактеристика, "
	|	Док.ХарактеристикаНоменклатуры				 КАК ХарактеристикаНоменклатуры,"
	,"") + "
	|	СУММА(Док.ДокументКоличество)             	 КАК ДокументКоличество, 
	|	ЕСТЬNULL(МАКСИМУМ(Остатки.КоличествоОстаток), 0) КАК ОстатокКоличество
	|ИЗ ВременнаяТаблицаДокумента КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(,
	|		(Номенклатура, ВнутреннийЗаказ"+?(ЕстьХарактеристика,",ХарактеристикаНоменклатуры","")+") В (ВЫБРАТЬ Номенклатура,Заказ"+?(ЕстьХарактеристика,",ХарактеристикаНоменклатуры","")+" ИЗ ВременнаяТаблицаДокумента)
	|   И СтатусПартии    = &СтатусПартии) КАК Остатки
	|ПО 
	|	Док.Номенклатура  = Остатки.Номенклатура
	|	И Док.Заказ = Остатки.ВнутреннийЗаказ "
	+ ?(ЕстьХарактеристика, "
	| И Док.ХарактеристикаНоменклатуры  = Остатки.ХарактеристикаНоменклатуры"
	,"")+"
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	Док.Номенклатура,
	|   Док.ЕдИзм,
	|	Док.Заказ,
	|	Док.Заказчик"
	+ ?(ЕстьХарактеристика, "
	|	, Док.ХарактеристикаНоменклатуры "
	,"") + "
	|	
	|ИМЕЮЩИЕ ЕСТЬNULL(МАКСИМУМ(Остатки.КоличествоОстаток), 0) < СУММА(Док.ДокументКоличество)
	|ДЛЯ ИЗМЕНЕНИЯ РегистрНакопления.ВнутренниеЗаказы.Остатки // Блокирующие чтение таблицы остатков регистра для разрешения коллизий многопользовательской работы	
	|";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл			

		СтрокаСообщения = "Остатка " + 
		УправлениеЗапасами.ПредставлениеНоменклатуры(Выборка.НоменклатураПредставление,
								  ?(ЕстьХарактеристика, Выборка.ХарактеристикаНоменклатуры, "")) +
		", заказанного по документу " + (Выборка.Заказ) + " недостаточно.";

		УправлениеЗапасами.ОшибкаНетОстатка(СтрокаСообщения, Выборка.ОстатокКоличество, Выборка.ДокументКоличество,
		Выборка.ЕдиницаПредставление, Отказ, Заголовок);		
		
	КонецЦикла;

КонецПроцедуры // КонтрольОстатков()

Процедура СформироватьВременнуюТаблицуДокумента(МенеджерВременныхТаблиц, СтруктураПараметров)
	Перем Параметры;
	
	//параметры для построения запроса
	Параметры 			= СтруктураПараметров.Параметры; //параметры, переданные в процедуру контроля остатков из модуля документа
    МетаданныеТабЧастиДокумента = СтруктураПараметров.МетаданныеТабЧастиДокумента;
	ЕстьЕдИзм           = МетаданныеТабЧастиДокумента.Реквизиты.Найти("ЕдиницаИзмерения") <> Неопределено;
	ИмяРеквизитаЗаказ   = Параметры["ИмяРеквизитаЗаказ"];
	ПутьКЗаказу         = ?(Параметры["ЗаказВШапке"], "Ссылка.", "") + ИмяРеквизитаЗаказ;
	ИмяТаблицы          = СтруктураПараметров.ИмяДокумента + "." + СокрЛП(СтруктураПараметров.ИмяТабличнойЧасти);
	// Определение необязательных параметров
	ЕстьКачество        = Ложь;
	ТолькоОтрицательные = Ложь; // Из документа выбирать только строки с отрицательным количеством,
								// соответственно контроль остатков выполняется только для них.
								// Имеет смысл, например, для документа КорректировкаВнутреннегоЗаказа.
	КолЗнак             = "";   // Означает что знак "+", т.е. знак количества не меняем
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если Параметры.Свойство("КачествоТолькоНовый") Тогда
			ЕстьКачество = Параметры.Свойство("КачествоТолькоНовый") И МетаданныеТабЧастиДокумента.Реквизиты.Найти("Качество") <> Неопределено;
		КонецЕсли;
		Если Параметры.Свойство("ТолькоОтрицательноеКоличество") Тогда
			ТолькоОтрицательные = Параметры["ТолькоОтрицательноеКоличество"];
		КонецЕсли;
	КонецЕсли;

	Если ЕстьЕдИзм Тогда
		ТекстКоличество = "Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент";
	Иначе
		ТекстКоличество = "Док.Количество";
	КонецЕсли;
	
	Если ТолькоОтрицательные Тогда
		КолЗнак = "-";
	КонецЕсли;

	Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    Запрос.Текст = "ВЫБРАТЬ
	|Ссылка,Номенклатура, "+
	?(СтруктураПараметров.ЕстьХарактеристика, "
	|	ХарактеристикаНоменклатуры,","")+"
	|	%Заказ% КАК Заказ,
	|	%Заказ%.Заказчик КАК Заказчик,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдИзм,
	|	Сумма( %КолЗнак% Количество) КАК Количество,
	|	СУММА( %КолЗнак% " + ТекстКоличество + " )    КАК ДокументКоличество
	|ПОМЕСТИТЬ ВременнаяТаблицаДокумента
	|	ИЗ
	|		Документ." + ИмяТаблицы + " КАК Док
	|	ГДЕ
	|		Док.Ссылка = &ДокументСсылка 
	| 		И %Заказ% ССЫЛКА Документ.ВнутреннийЗаказ
	| 		И %Заказ% <> &ПустВнутрЗаказ "
			+ ?(ЕстьКачество,        " И Док.Качество = &КачествоНовый ", "")
			+ ?(ТолькоОтрицательные, " И Док.Количество < 0 ", "") + "
	|	СГРУППИРОВАТЬ ПО Ссылка, Номенклатура, %Заказ%"+?(СтруктураПараметров.ЕстьХарактеристика, ",ХарактеристикаНоменклатуры","")+"
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%КолЗнак%", КолЗнак);
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Заказ%", ПутьКЗаказу);

	Запрос.УстановитьПараметр( "ДокументСсылка",  СтруктураПараметров.Ссылка);
    Запрос.УстановитьПараметр( "ПустВнутрЗаказ",  Документы.ВнутреннийЗаказ.ПустаяСсылка());
	Запрос.УстановитьПараметр( "КачествоНовый",   Справочники.Качество.Новый);

	Запрос.Выполнить();

КонецПроцедуры
