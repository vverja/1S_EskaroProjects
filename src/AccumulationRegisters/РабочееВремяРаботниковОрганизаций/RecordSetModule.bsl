Процедура ПередЗаписью(Отказ, Замещение)
	НастройкаПравДоступа.ПроверкаПериодаЗаписейРегистров(ЭтотОбъект, Отказ);
    ЗарегистрироватьПерерасчеты();
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
    ЗарегистрироватьПерерасчеты();
КонецПроцедуры

Процедура ЗарегистрироватьПерерасчеты()
    Запрос = Новый Запрос(
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    |   Основные.Сотрудник,
    |   Основные.Регистратор КАК Регистратор
    |ИЗ
    |   РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремя
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основные
    |       ПО РабочееВремя.Период >= Основные.ПериодДействияНачало
    |           И РабочееВремя.Период <= Основные.ПериодДействияКонец
    |           И РабочееВремя.Сотрудник = Основные.Сотрудник
    |           И РабочееВремя.Организация = Основные.Организация
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчеты
    |       ПО (Перерасчеты.ОбъектПерерасчета = Основные.Регистратор)
    |           И (Перерасчеты.Сотрудник = Основные.Сотрудник)
    |           И (Перерасчеты.ВидРасчета = &ПустойВидРасчета)
    |ГДЕ
    |   РабочееВремя.Регистратор = &Регистратор
    |   И Перерасчеты.Сотрудник ЕСТЬ NULL
    |   И Основные.Регистратор ЕСТЬ НЕ NULL 
    |
    |УПОРЯДОЧИТЬ ПО
    |   Регистратор");
    
    Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
    Запрос.УстановитьПараметр("ПустойВидРасчета", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка());
    
    Выборка = Запрос.Выполнить().Выбрать();
    
КонецПроцедуры

