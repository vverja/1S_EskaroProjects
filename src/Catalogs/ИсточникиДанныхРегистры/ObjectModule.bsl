Перем пПостроительОтчета Экспорт, мСтруктураПредставлениеПолей Экспорт;
Перем ТабИсточников Экспорт;

Процедура УстановитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета) Экспорт


	СтруктураКоллекцийПостроителяОтчета = Новый Структура("ДоступныеПоля, ВыбранныеПоля, ИзмеренияКолонки, ИзмеренияСтроки, Отбор, Порядок");
	
	Для каждого ЭлементСтруктуры Из СтруктураКоллекцийПостроителяОтчета Цикл
		
		Для Индекс = 0 По ПостроительОтчета[ЭлементСтруктуры.Ключ].Количество() - 1 Цикл
			
			Представление = Неопределено;
			
			Если Найти(ПостроительОтчета[ЭлементСтруктуры.Ключ][Индекс].ПутьКДанным, ".") = 0 Тогда
				
				Попытка
					
					СтруктураПредставлениеПолей.Свойство(ПостроительОтчета[ЭлементСтруктуры.Ключ][Индекс].ПутьКДанным, Представление);
					
				Исключение
					
				КонецПопытки;
				
			КонецЕсли;
				
			Если Представление = Неопределено Тогда
					
				Продолжить;
				
			Иначе
				
				ПостроительОтчета[ЭлементСтруктуры.Ключ][Индекс].Представление = Представление;
					
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры // УстановитьПредставленияПолей()

Процедура УстановитьДоступныеПоляОтбора(СтруктураПредставлениеПолей, ПостроительОтчета) Экспорт

	//ДоступныеПоляОтбора = пПостроительОтчета.Отбор.ПолучитьДоступныеПоля();
	//
	//Пока Истина Цикл
	//	Нашли = Ложь;
	//	Для каждого ЭлементСтруктуры Из ДоступныеПоляОтбора Цикл
	//		Если НЕ СтруктураПредставлениеПолей.Свойство(ЭлементСтруктуры.Имя) Тогда
	//			ДоступныеПоляОтбора.Удалить(ЭлементСтруктуры);
	//			Нашли = Истина;
	//		КонецЕсли;
	//	КонецЦикла;
	//	Если Не Нашли Тогда
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла; 
	//
	//пПостроительОтчета.Отбор.УстановитьДоступныеПоля(ДоступныеПоляОтбора);
	
КонецПроцедуры // УстановитьДоступныеПоляОтбора()

Функция ПостфиксРесурса()

	Если ВидДанных  = 1 Тогда
		Возврат "НачальныйОстаток";
	ИначеЕсли ВидДанных  = 2 Тогда
		Возврат "Приход";
	ИначеЕсли ВидДанных  = 3 Тогда
		Возврат "Расход";
	ИначеЕсли ВидДанных  = 4 Тогда
		Возврат "КонечныйОстаток";
	ИначеЕсли ВидДанных  = 5 Тогда
		Возврат "Оборот";
	КонецЕсли;

КонецФункции // ПостфиксРесурса()
 
Процедура Инициализация() Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
	Если МетаданныеРегистра = Неопределено Тогда
		ИмяРегистра = "";
		Возврат;
	КонецЕсли;
	
	ТолькоОбороты = (МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты);

	ОписаниеПолейВыборки = "";
	ОписаниеИсточниковЗапроса = "";
	//ОписаниеИтогиЗапроса =  "";
		
	мСтруктураПредставлениеПолей = Новый Структура;
	
	Для каждого Измерение из МетаданныеРегистра.Измерения Цикл
		
		ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
		|	" + Измерение.Имя + ".* КАК " + Измерение.Имя;
		
		мСтруктураПредставлениеПолей.Вставить(Измерение.Имя, Измерение.Представление());
		
	КонецЦикла;

	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		
		Если ТолькоОбороты Тогда
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + "Оборот КАК " + Ресурс.Имя + "Оборот";
			
			//ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
			//|	СУММА(" + Ресурс.Имя + "Оборот)";
			
		Иначе
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + "Приход КАК " + Ресурс.Имя + "Приход,
			|	ИсточникДанных." + Ресурс.Имя + "Расход КАК " + Ресурс.Имя + "Расход,
			|	ИсточникДанных." + Ресурс.Имя + "НачальныйОстаток КАК " + Ресурс.Имя + "НачальныйОстаток,
			|	ИсточникДанных." + Ресурс.Имя + "КонечныйОстаток КАК " + Ресурс.Имя + "КонечныйОстаток";
			
			//ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
			//|	СУММА(" + Ресурс.Имя + "Приход),
			//|	СУММА(" + Ресурс.Имя + "Расход),
			//|	МАКСИМУМ(" + Ресурс.Имя + "НачальныйОстаток),
			//|	МАКСИМУМ(" + Ресурс.Имя + "КонечныйОстаток)";
			
		КонецЕсли;
		
	КонецЦикла;

	ОписаниеПолейВыборки = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ" + 
			ОписаниеПолейВыборки;

	Если ТолькоОбороты Тогда
		
		ОписаниеИсточниковЗапроса =	"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".Обороты(&ДатаНач, &ДатаКон, , {" +
		ОписаниеИсточниковЗапроса + "}) КАК ИсточникДанных";
		
	Иначе
		
		ОписаниеИсточниковЗапроса =	"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, ,, {" +
		ОписаниеИсточниковЗапроса + "}) КАК ИсточникДанных";
		
	КонецЕсли;
	
	//ОписаниеИтогиЗапроса = "
	//|ИТОГИ" + ОписаниеИтогиЗапроса + "
	//|ПО
	//|	ОБЩИЕ";
	
	ТекстЗапроса =
		ОписаниеПолейВыборки +
		ОписаниеИсточниковЗапроса;
		//+ОписаниеИтогиЗапроса;
		
	пПостроительОтчета.Текст = ТекстЗапроса;
	пПостроительОтчета.ЗаполнитьНастройки();
	
	УстановитьПредставленияПолей(мСтруктураПредставлениеПолей, пПостроительОтчета);
	УстановитьДоступныеПоляОтбора(мСтруктураПредставлениеПолей, пПостроительОтчета);

КонецПроцедуры

Функция ВыполнитьРасчет(ДатаНач, ДатаКон, ПоТекущимНастройкам = Ложь, Организация = Неопределено) Экспорт

	//Состояние("Выполняется расчет показателя "+ПодробноеНаименование+"...");
	
	Если Не ПоТекущимНастройкам Тогда
	
		Инициализация();
	
		Настройки = НастройкиПостроителя.Получить();
		Если Настройки <> Неопределено Тогда
			пПостроительОтчета.УстановитьНастройки(Настройки); 
		КонецЕсли;
	
		Если ЗначениеЗаполнено(Организация) Тогда
			Попытка
				ЭлементНовогоОтбора = пПостроительОтчета.Отбор.Найти("Организация");
				Если ЭлементНовогоОтбора = Неопределено Тогда
					ЭлементНовогоОтбора = пПостроительОтчета.Отбор.Добавить("Организация");
				КонецЕсли;
				ЭлементНовогоОтбора.Использование = Истина;
				ЭлементНовогоОтбора.ВидСравнения=ВидСравнения.Равно;
				ЭлементНовогоОтбора.Значение = Организация;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	пПостроительОтчета.Параметры.Вставить("ДатаНач", ДатаНач);
	пПостроительОтчета.Параметры.Вставить("ДатаКон", БухгалтерскийУчет.КонецПериодаОтчета(ДатаКон));

	пПостроительОтчета.Выполнить();
	РезультатЗапроса = пПостроительОтчета.Результат;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Результат = 0;
	
	//Пока Выборка.Следующий() Цикл
	//	Если ПостфиксРесурса() = "НачальныйОстаток" Тогда
	//		//остаток берем из строки итогов, и, если надо, перемножаем на курс
	//		Результат = Выборка[ИмяРесурса+"НачальныйОстаток"];
	//	ИначеЕсли ПостфиксРесурса() = "КонечныйОстаток" Тогда
	//		//остаток берем из строки итогов, и, если надо, перемножаем на курс
	//		Результат = Выборка[ИмяРесурса+"КонечныйОстаток"];
	//	Иначе
	//		Результат = Выборка[ИмяРесурса+ПостфиксРесурса()];
	//	КонецЕсли;
	//КонецЦикла;
	
	ТабРезультат = пПостроительОтчета.Результат.Выгрузить();
	Результат = 0;
	Если ТабРезультат.Количество()>0 Тогда
		Результат = ТабРезультат[0][ИмяРесурса+ПостфиксРесурса()];
	КонецЕсли;
	
	//Состояние();
	
	Возврат Окр(Результат,2);

КонецФункции // ВыполнитьРасчет()

Функция ТолькоОбороты() Экспорт

	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
	Возврат (МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты);

КонецФункции // ТолькоОбороты()

Процедура ИнициализацияВнешняя(ПоПериодам = Ложь, ПоОрганизациям = Ложь) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
	Если МетаданныеРегистра = Неопределено Тогда
		ИмяРегистра = "";
		Возврат;
	КонецЕсли;
	
	ТолькоОбороты = ТолькоОбороты();
	Если НЕ ТолькоОбороты Тогда
	    ПоПериодам = Ложь;
	КонецЕсли;

	ОписаниеПолейВыборки = "";
	ОписаниеИсточниковЗапроса = "";
	ОписаниеИтогиЗапроса =  "";
		
	мСтруктураПредставлениеПолей = Новый Структура;
	
	Для каждого Измерение из МетаданныеРегистра.Измерения Цикл
		
		ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
		|	" + Измерение.Имя + ".* КАК " + Измерение.Имя;
		
		мСтруктураПредставлениеПолей.Вставить(Измерение.Имя, Измерение.Представление());
		
	КонецЦикла;

	//Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
	//	
	//	Если ТолькоОбороты Тогда
	//		
	//		ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
	//		|	ИсточникДанных." + Ресурс.Имя + "Оборот КАК " + Ресурс.Имя + "Оборот";
	//		
	//		//ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
	//		//|	СУММА(" + Ресурс.Имя + "Оборот)";
	//		
	//	Иначе
	//		
	//		ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
	//		|	ИсточникДанных." + Ресурс.Имя + "Приход КАК " + Ресурс.Имя + "Приход,
	//		|	ИсточникДанных." + Ресурс.Имя + "Расход КАК " + Ресурс.Имя + "Расход,
	//		|	ИсточникДанных." + Ресурс.Имя + "НачальныйОстаток КАК " + Ресурс.Имя + "НачальныйОстаток,
	//		|	ИсточникДанных." + Ресурс.Имя + "КонечныйОстаток КАК " + Ресурс.Имя + "КонечныйОстаток";
	//		
	//		//ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
	//		//|	СУММА(" + Ресурс.Имя + "Приход),
	//		//|	СУММА(" + Ресурс.Имя + "Расход),
	//		//|	МАКСИМУМ(" + Ресурс.Имя + "НачальныйОстаток),
	//		//|	МАКСИМУМ(" + Ресурс.Имя + "КонечныйОстаток)";
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;

	//ОписаниеПолейВыборки = 
	//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ" + 
	//		ОписаниеПолейВыборки;
	
	ОписаниеПолейВыборки = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ИмяРесурса + ПостфиксРесурса();
			
	Если ПоПериодам Тогда
		ОписаниеПолейВыборки = ОписаниеПолейВыборки + ", Период";
	КонецЕсли;
			
	Если ПоОрганизациям Тогда
		ОписаниеПолейВыборки = ОписаниеПолейВыборки + ", Организация";
	КонецЕсли;
	
	ОписаниеПолейВыборки = ОписаниеПолейВыборки + ", ИСТИНА КАК МеткаЗаписи";
	
	//Если ТолькоОбороты Тогда
		ОписаниеИтогиЗапроса = "
		|	СУММА(" + ИмяРесурса + ПостфиксРесурса()+")";
	//Иначе
	//	ОписаниеИтогиЗапроса = "
	//	|	МАКСИМУМ(" + ИмяРесурса + ПостфиксРесурса()+")";
	//КонецЕсли;
	
	Если ТолькоОбороты Тогда
		ОписаниеИсточниковЗапроса =	"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".Обороты(&ДатаНач, &ДатаКон, "+?(ПоПериодам,"Месяц","")+", {" +ОписаниеИсточниковЗапроса + "})";
	Иначе
		ОписаниеИсточниковЗапроса =	"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, ,, {" +ОписаниеИсточниковЗапроса + "})";
	КонецЕсли;
	
	ОписаниеИтогиЗапроса = "
	|ИТОГИ" + ОписаниеИтогиЗапроса + "
	|ПО
	|	ОБЩИЕ";
	
	Если ПоПериодам Тогда
		ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ", Период";
	КонецЕсли;
	Если ПоОрганизациям Тогда
		ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ", Организация";
	КонецЕсли;
	
	ТекстЗапроса =
		ОписаниеПолейВыборки +
		ОписаниеИсточниковЗапроса + 
		ОписаниеИтогиЗапроса;
		
	пПостроительОтчета.Текст = ТекстЗапроса;
	пПостроительОтчета.ЗаполнитьНастройки();

КонецПроцедуры

Функция ВыполнитьДетализованныйРасчет(ДатаНач, ДатаКон, Организация=Неопределено, ПоПериодам = Ложь, ПоОрганизациям = Ложь) Экспорт

	ИнициализацияВнешняя(ПоПериодам, ПоОрганизациям);

	Настройки = НастройкиПостроителя.Получить();
	Если Настройки <> Неопределено Тогда
		пПостроительОтчета.УстановитьНастройки(Настройки,Истина,Ложь,Ложь,Ложь,Ложь); 
	КонецЕсли;

	Если ЗначениеЗаполнено(Организация) Тогда
		Попытка
			ЭлементНовогоОтбора = пПостроительОтчета.Отбор.Найти("Организация");
			Если ЭлементНовогоОтбора = Неопределено Тогда
				ЭлементНовогоОтбора = пПостроительОтчета.Отбор.Добавить("Организация");
			КонецЕсли;
			ЭлементНовогоОтбора.Использование = Истина;
			ЭлементНовогоОтбора.ВидСравнения=ВидСравнения.Равно;
			ЭлементНовогоОтбора.Значение = Организация;
		Исключение
		КонецПопытки;
	КонецЕсли;

	пПостроительОтчета.Параметры.Вставить("ДатаНач", ДатаНач);
	пПостроительОтчета.Параметры.Вставить("ДатаКон", БухгалтерскийУчет.КонецПериодаОтчета(ДатаКон));

	ТабОтвет = пПостроительОтчета.Результат.Выгрузить();
	ТабОтвет.Колонки[ИмяРесурса + ПостфиксРесурса()].Имя = "Сумма";
	Возврат ТабОтвет;

КонецФункции // ВыполнитьРасчет()

пПостроительОтчета 	= Новый ПостроительОтчета;
мСтруктураПредставлениеПолей = Новый Структура;