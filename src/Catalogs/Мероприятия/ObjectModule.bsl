Перем СоответствиеФИО;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// 

#Если Клиент Тогда
	
// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка       - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров - структура параметров, необходимых для вывода строки
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиСтроку(Выборка, СтруктураПараметров, Номер)

	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировки   = СтруктураПараметров.ЗначениеГруппировки;
	ОбластьЗначенияПоказателя    = СтруктураПараметров.ЗначенияПоказателя;

	СтруктураВыводГруппировок = СтруктураПараметров.СтруктураВыводГруппировок;
	УровеньОкрашиваемойЗаписи = СтруктураПараметров.УровеньОкрашиваемойЗаписи;
	
	УровеньЗаписи   = Выборка.Уровень();

	ИмяГруппировки  = Выборка.Группировка();

	Если НЕ ЗначениеЗаполнено(Выборка[ИмяГруппировки]) Тогда
        Если (ИмяГруппировки = "Подразделение") Тогда
			Если Выборка.Физлицо = 0 Тогда
				// эта выборка содержит те составные части мероприятия, в которых никто не участвует
				Возврат
			КонецЕсли;
		Иначе
			// эта выборка содержит те составные части мероприятия, в которых никто не участвует
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	ТабДок = СтруктураПараметров.ТабДок;

	ЗначениеГруппировки = "";

	ЗначениеРасшифровки = Неопределено;

	ТипЗаписиВыборки = Выборка.ТипЗаписи();

	МассивВыводГруппировок = Новый Массив;

	Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда

		ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки + "Представление"];
		Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда

			ЗначениеТекущейГруппировки = "<...>";
		КонецЕсли;
		
		ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;

	ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

		Если ИмяГруппировки = "Физлицо" Тогда
			ЗначениеГруппировки = СоответствиеФИО[Выборка.Физлицо];
			Если НЕ ЗначениеЗаполнено(ЗначениеГруппировки) Тогда
				ЗначениеГруппировки = "<...>";
			КонецЕсли;
		Иначе
			Если СтруктураВыводГруппировок.Свойство(ИмяГруппировки, МассивВыводГруппировок) Тогда
				
				КоличествоДопПолей=МассивВыводГруппировок.Количество();
				ВыведеноГруппировок=0;
				
				Для Каждого ВыводимаяГруппировка Из МассивВыводГруппировок Цикл
					
					ВыведеноГруппировок=ВыведеноГруппировок+1;
					
					ЗначениеТекущейГруппировки = "" + Выборка[ВыводимаяГруппировка + "Представление"];
					Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
						ЗначениеТекущейГруппировки = "<...>";
					КонецЕсли;
					
					ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки + ", ";
					
					Если (КоличествоДопПолей>0) и (ВыведеноГруппировок=1) Тогда
						ЗначениеГруппировки=Лев(ЗначениеГруппировки, СтрДлина(ЗначениеГруппировки)-2)+" (";
					КонецЕсли;
					
					Если ЗначениеРасшифровки = Неопределено Тогда 
						ЗначениеРасшифровки = Выборка[ВыводимаяГруппировка];
					КонецЕсли;
					
				КонецЦикла;
				
				// Если группировки нет в списке, то не выводим, нам нужна только выборка, 
				// т.о. искусственно получаем группировку по набору полей, указанных в одной строке
				// таблицы группировок
			Иначе
				Возврат;
			КонецЕсли;
			
			ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки + "Представление"];
			Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
				ЗначениеТекущейГруппировки = "<...>";
			КонецЕсли;
			
			ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;
			
			Если КоличествоДопПолей> 0 Тогда
				ЗначениеГруппировки=ЗначениеГруппировки+" )";
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеРасшифровки = Неопределено Тогда 
			ЗначениеРасшифровки = Выборка[ИмяГруппировки];
		КонецЕсли;

	ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ОбщийИтог Тогда
		ЗначениеГруппировки = "ИТОГО: ";
		
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьОбщийОтступ, УровеньЗаписи);

	ОбластьЗначениеГруппировки.Параметры.ЗначениеГруппировки = СокрЛП(ЗначениеГруппировки);
	ОбластьЗначениеГруппировки.Параметры.Расшифровка = ЗначениеРасшифровки;

	ОбластьЗначениеГруппировки.Область().Отступ = УровеньЗаписи;
	ТабДок.Присоединить(ОбластьЗначениеГруппировки);

	Если ИмяГруппировки = "Физлицо" Тогда
		Для Каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказатели Цикл
			Если ЗначениеЗаполнено(ИмяПоказателя) Тогда
				ВложеннаяВыборка = Выборка.Выбрать();
				ЗначениеПоказателя = "";
				Участие = "";
				Если ВложеннаяВыборка.НайтиСледующий(ИмяПоказателя,"СоставМероприятия") Тогда
					Участие = ВложеннаяВыборка.ХарактерУчастия;
					Если Участие = Перечисления.ХарактерУчастияВМероприятиях.Слушатель Тогда
						ЗначениеПоказателя = ""
					ИначеЕсли Участие = Перечисления.ХарактерУчастияВМероприятиях.Участник Тогда
						ЗначениеПоказателя = "Х"
					ИначеЕсли Участие = Перечисления.ХарактерУчастияВМероприятиях.Ответственный Тогда
						ЗначениеПоказателя = "Отв"
					КонецЕсли;
				КонецЕсли;
				ОбластьЗначенияПоказателя.Параметры.Значение = ЗначениеПоказателя;
				ВыведеннаяОбласть = ТабДок.Присоединить(ОбластьЗначенияПоказателя);
				Если Участие = Перечисления.ХарактерУчастияВМероприятиях.Ответственный Тогда
					ВыведеннаяОбласть.ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
				ИначеЕсли Участие = Перечисления.ХарактерУчастияВМероприятиях.Слушатель Тогда
					ВыведеннаяОбласть.ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ТабДок.Область(ТабДок.ВысотаТаблицы, 2, ТабДок.ВысотаТаблицы, 2).РазмещениеТекста =  ТипРазмещенияТекстаТабличногоДокумента.Переносить;

	Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
		ТабДок.Область(ТабДок.ВысотаТаблицы, 2, ТабДок.ВысотаТаблицы, 2).Шрифт = СтруктураПараметров.ШрифтГрупп;
	КонецЕсли;

	Если Номер <> 1 Тогда
		Если УровеньЗаписи = УровеньОкрашиваемойЗаписи Тогда
			ТабДок.Область(ТабДок.ВысотаТаблицы, 2, ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы - 1).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
		Иначе
			ТабДок.Область(ТабДок.ВысотаТаблицы, 2, ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы - 1).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВывестиСтроку()

// Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета,
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиВыборку(Выборка, СтруктураПараметров, Номер)

	ОбработкаПрерыванияПользователя();

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;

	// Берутся группировки все подряд, 
	Пока Выборка.Следующий() Цикл

		ВывестиСтроку(Выборка, СтруктураПараметров, Номер);

		// Обход детальных записей здесь не нужен - это делается непосредственно при выводе строки по работнику 
		// для последней группировки после итогов по группировке идут детальные записи
		Если Номер = ВсегоГруппировок - 1
			И Выборка.ТипЗаписи() =  ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
			Продолжить;
		КонецЕсли;

		ВывестиВыборку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, Номер + 1);
	КонецЦикла;

КонецПроцедуры // ВывестиВыборку()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выводит на экран печатную форму мероприятия
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет.
//
Функция Печать(Регистратор = "") Экспорт

	Запрос = Новый Запрос;
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("Ссылка"	,	Ссылка);
	Запрос.УстановитьПараметр("ДатаС"	,	ДатаНачала);
	Запрос.УстановитьПараметр("Документ",	Регистратор);

	Если ЗначениеЗаполнено(Регистратор) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчастиеВМероприятияхРаботники.ФизЛицо КАК Физлицо,
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, УчастиеВМероприятияхРаботники.ФизЛицо.Наименование) КАК ФизлицоПредставление
		|ИЗ
		|	Документ.УчастиеВМероприятиях.Работники КАК УчастиеВМероприятияхРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&ДатаС,
		|		ФизЛицо В
		|		    (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		        УчастиеВМероприятияхРаботники.Ссылка
		|		    ИЗ
		|		        Документ.УчастиеВМероприятиях.Работники КАК УчастиеВМероприятияхРаботники
		|		    ГДЕ
		|		        УчастиеВМероприятияхРаботники.Ссылка = &Документ)) КАК ФИОФизЛиц
		|		ПО УчастиеВМероприятияхРаботники.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|ГДЕ
		|	УчастиеВМероприятияхРаботники.Ссылка = &Документ";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланируемаяЗанятостьФизлиц.ФизЛицо КАК Физлицо,
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ПланируемаяЗанятостьФизлиц.ФизЛицо.Наименование) КАК ФизлицоПредставление
		|ИЗ
		|	РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК ПланируемаяЗанятостьФизлиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаС, ) КАК ФИОФизЛиц
		|		ПО ПланируемаяЗанятостьФизлиц.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|ГДЕ
		|	ПланируемаяЗанятостьФизлиц.ЧастьМероприятия В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				СоставМероприятия.Ссылка
		|			ИЗ
		|				Справочник.СоставМероприятия КАК СоставМероприятия
		|			ГДЕ
		|				СоставМероприятия.Владелец = &Ссылка)";
		
	КонецЕсли;
	СоответствиеФИО = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеФИО.Вставить(Выборка.ФизЛицо, Выборка.ФизлицоПредставление)
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиСрезПоследних.Подразделение КАК Подразделение,
	|	РаботникиСрезПоследних.Подразделение.Представление КАК ПодразделениеПредставление,
	|	ПланируемаяЗанятостьФизлиц.ФизЛицо КАК Физлицо,
	|	ПланируемаяЗанятостьФизлиц.ФизЛицо.Наименование КАК ФизлицоПредставление,
	|	ПланируемаяЗанятостьФизлиц.ХарактерУчастия,
	|	СоставМероприятия.ДатаНачала КАК НачалоМероприятия,
	|	СоставМероприятия.ДатаОкончания КАК ОкончаниеМероприятия,
	|	СоставМероприятия.Ссылка КАК СоставМероприятия,
	|	СоставМероприятия.Представление КАК СоставМероприятияПредставление
	|ИЗ
	|	Справочник.СоставМероприятия КАК СоставМероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК ПланируемаяЗанятостьФизлиц
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(&ДатаС, ) КАК РаботникиСрезПоследних
	|			ПО ПланируемаяЗанятостьФизлиц.Физлицо = РаботникиСрезПоследних.ФизЛицо" +
	?(НЕ ЗначениеЗаполнено(Регистратор),"","
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УчастиеВМероприятиях.Работники КАК УчастиеВМероприятияхРаботники
	|			ПО ПланируемаяЗанятостьФизлиц.Физлицо = УчастиеВМероприятияхРаботники.ФизЛицо И (УчастиеВМероприятияхРаботники.Ссылка = &Документ)") + "
	|		ПО СоставМероприятия.Ссылка = ПланируемаяЗанятостьФизлиц.ЧастьМероприятия
	|ГДЕ
	|	СоставМероприятия.Владелец = &Ссылка
	|ИТОГИ
	|ПО
	|	Подразделение ИЕРАРХИЯ,
	|	Физлицо";
	
	// Выполнение сформированного запроса
	Результат = Запрос.Выполнить();

	Макет = ПолучитьМакет("Макет");
	ДокументРезультат	=	Новый	ТабличныйДокумент;

    ТаблицаСоставаМероприятия = Результат.Выгрузить();
	ТаблицаСоставаМероприятия.Свернуть("СоставМероприятия,СоставМероприятияПредставление,НачалоМероприятия,ОкончаниеМероприятия",);
	ТаблицаСоставаМероприятия.Сортировать("НачалоМероприятия");
	
	// Структура вывода группировок: ключи определяют "основные" группировки,
    ИмяГруппировки = "Подразделение";
	СтруктураВыводГруппировок = Новый Структура;
	СтруктураВыводГруппировок.Вставить(ИмяГруппировки,Новый  Массив);
	СтруктураВыводГруппировок.Вставить("Физлицо",Новый  Массив);

	МассивГруппировки    = Новый Массив;
	МассивГруппировки.Добавить(ИмяГруппировки);
	МассивГруппировки.Добавить("Физлицо");

	СтруктураПараметров = Новый Структура;

	// Области строки отчета - табличные документы из макета отчета
	СтруктураПараметров.Вставить("ОбщийОтступ", Макет.ПолучитьОбласть("ОбщийОтступ|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировки",   Макет.ПолучитьОбласть("Значение|Строка"));
	СтруктураПараметров.Вставить("ЗначенияПоказателя",    Макет.ПолучитьОбласть("Показатель|Строка"));

	// Табличный документ - результат отчета
	СтруктураПараметров.Вставить("ТабДок",    ДокументРезультат);

	// Массив выводимых показателей отчета
	СтруктураПараметров.Вставить("МассивПоказатели", ТаблицаСоставаМероприятия.ВыгрузитьКолонку("СоставМероприятия"));
	
	// Общее количество группировок запроса, т.е. как выводимых, так и пропускаемых
	СтруктураПараметров.Вставить("ВсегоГруппировок", 			2);

	// Заполненная структура вывода группировок
	СтруктураПараметров.Вставить("СтруктураВыводГруппировок", 	СтруктураВыводГруппировок);

	// Массив всех группировок запроса, т.е. как выводимых, так и пропускаемых
	СтруктураПараметров.Вставить("МассивГруппировки", 	МассивГруппировки);
	
	// Заполненная структура "поправки" сдвига группировок вправо
	//	СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок", СтруктураСдвигУровняГруппировок);

	// Наклонный шрифт для групп
	СтруктураПараметров.Вставить("ШрифтГрупп", Новый Шрифт(Макет.Область("Строка|Показатель").Шрифт,,,,Истина));
	
    // Форматная строка для вывода показателей
	СтруктураПараметров.Вставить("ФорматПоказателей", 			Новый Структура);

	// передадим уровень записей, которые выделять другим фоном
	СтруктураПараметров.Вставить("УровеньОкрашиваемойЗаписи", 0);

	Для Сч = 1 По 2 Цикл
		Если Сч = 1 Тогда
			Префикс = "Верх";
		Иначе
			Префикс = "Низ";
		КонецЕсли;

		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Шапка" + Префикс));

		// Вывод шапки отчета
		ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Шапка" + Префикс);
		ОбластьПоказатель = Макет.ПолучитьОбласть("Показатель|Шапка" + Префикс);

		Если Префикс = "Верх" Тогда
			ОбластьЗначение.Параметры.ИмяМероприятия = Наименование;
		КонецЕсли;

		ДокументРезультат.Присоединить(ОбластьЗначение);

		Если Префикс = "Верх" Тогда

			Для СчПоказателей = 1 По ТаблицаСоставаМероприятия.Количество() Цикл
				ДокументРезультат.Присоединить(ОбластьПоказатель);
			КонецЦикла;
			
			ДокументРезультат.Область(1, 2, 1, ДокументРезультат.ШиринаТаблицы).Объединить();
		Иначе
			ПредшествующаяДата = Дата("00000000000000");
			КолонкаНачалаОбъединения = 3;
			КолонкаОкончанияОбъединения = КолонкаНачалаОбъединения - 1;
			Для Каждого СоставнаяЧастьМероприятия Из ТаблицаСоставаМероприятия Цикл
                Если НЕ ЗначениеЗаполнено(СоставнаяЧастьМероприятия.СоставМероприятия) Тогда
					КолонкаНачалаОбъединения = 3;
					КолонкаОкончанияОбъединения = КолонкаНачалаОбъединения - 1;
				Иначе
                    Представление = СокрЛП(СоставнаяЧастьМероприятия.СоставМероприятияПредставление);
                    Если СтрДлина(Представление) > 30 Тогда
						ИмяПоказателя = "";
						Пока СтрДлина(Представление) > 0 Цикл
							ПозицияПробела = Найти(Представление," ");
							Если ПозицияПробела > 0 Тогда
								Слово = Лев(Представление,ПозицияПробела-1);
								Представление = Сред(Представление,ПозицияПробела + 1);
							Иначе
								Слово = Представление;
								Представление = "";
							КонецЕсли;
                            ИмяПоказателя = ИмяПоказателя + ?(ИмяПоказателя="","",?(СтрДлина(СтрПолучитьСтроку(ИмяПоказателя,СтрЧислоСтрок(ИмяПоказателя))+Слово)>29,Символы.ПС," ")) + Слово;
						КонецЦикла;
					Иначе
						ИмяПоказателя = Представление
					КонецЕсли;
					ОбластьПоказатель.Параметры.ИмяПоказателя = ИмяПоказателя;

					//Формируем строку - предтавление времени
					СтрДатаНач = Формат(СоставнаяЧастьМероприятия.НачалоМероприятия,"ДФ='dd.MM'"); 
                    СтрЧасМинутыНач = ""+ Час(СоставнаяЧастьМероприятия.НачалоМероприятия) + ":" + Формат(Минута(СоставнаяЧастьМероприятия.НачалоМероприятия),"ЧЦ=2; ЧН=00; ЧВН=");
                    СтрЧасМинутыКон = ""+ Час(СоставнаяЧастьМероприятия.ОкончаниеМероприятия) + ":" + Формат(Минута(СоставнаяЧастьМероприятия.ОкончаниеМероприятия),"ЧЦ=2; ЧН=00; ЧВН=");
					
					Если НачалоДня(СоставнаяЧастьМероприятия.НачалоМероприятия) = НачалоДня(СоставнаяЧастьМероприятия.ОкончаниеМероприятия)  тогда
						ОбластьПоказатель.Параметры.Время = СтрДатаНач + Символы.ПС + СтрЧасМинутыНач + " - " +СтрЧасМинутыКон;
					Иначе	
						СтрДатаКон = Формат(СоставнаяЧастьМероприятия.ОкончаниеМероприятия,"ДФ='dd.MM'"); 
						ОбластьПоказатель.Параметры.Время = СтрДатаНач +" ("+СтрЧасМинутыНач+")" + " - " + Символы.ПС + СтрДатаКон +" ("+СтрЧасМинутыКон+")";
					КонецЕсли;	 
					
					ДокументРезультат.Присоединить(ОбластьПоказатель);
					КолонкаОкончанияОбъединения = КолонкаОкончанияОбъединения +1;
                    Если ПредшествующаяДата < НачалоДня(СоставнаяЧастьМероприятия.НачалоМероприятия) Тогда
                        Если ЗначениеЗаполнено(ПредшествующаяДата) Тогда
							//ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,КолонкаНачалаОбъединения,ДокументРезультат.ВысотаТаблицы,КолонкаОкончанияОбъединения - 1).Объединить();
							КолонкаНачалаОбъединения = КолонкаОкончанияОбъединения;
						КонецЕсли;
						ПредшествующаяДата = НачалоДня(СоставнаяЧастьМероприятия.НачалоМероприятия);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ДокументРезультат.Область(3,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы-1).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;

    // Вывод строк отчета
	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	ВывестиВыборку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0);

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	ДокументРезультат.ФиксацияСверху = 5;
	ДокументРезультат.ФиксацияСлева = 2;

	УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат,,,?(ЗначениеЗаполнено(Регистратор),Регистратор,""));


КонецФункции // Печать

#КонецЕсли

// Проверяет корректность заполнения составной части мероприятия 
Функция ПроверитьДатыНачалаИОконачнияСоставнойЧасти(ЧастьМероприятия) Экспорт
	СтрОшибка = "";
	Если НЕ ЗначениеЗаполнено(ЧастьМероприятия.ДатаНачала) тогда
		СтрОшибка = СтрОшибка + "Не указана дата начала составной части мероприятия!";
	ИначеЕсли НЕ ЗначениеЗаполнено(ЧастьМероприятия.ДатаОкончания) тогда
		СтрОшибка = СтрОшибка + "Не указана дата окончания составной части мероприятия!";
	ИначеЕсли (ЧастьМероприятия.ДатаОкончания > КонецДня(ДатаОкончания)) или (ЧастьМероприятия.ДатаНачала < ДатаНачала) тогда	
		СтрОшибка = СтрОшибка + "Даты начала и окончания составной части не соответствуют периоду проведения мероприятия!";
	ИначеЕсли ЧастьМероприятия.ДатаОкончания <= ЧастьМероприятия.ДатаНачала тогда
		СтрОшибка = СтрОшибка + "Дата окончания должна быть больше даты начала!";
	КонецЕсли;
	Возврат СтрОшибка;
КонецФункции

