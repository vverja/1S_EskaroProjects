&НаКлиенте
Перем НужноУдалитьРегламентноеЗадание Экспорт; // Ответ пользователя на вопрос о необходимости удалять регл. задание (булево или неопределено)
&НаКлиенте
Перем РазрешеноРедактированиеДатыНачала; //Булево - спрашивали ли в сеансе работы с формой о разрешении редактирования даты начала обработки данных

// Устанавливает доступность элементов формы
//
&НаКлиенте
Процедура УправлениеДоступностью()
	
	Если ТолькоПросмотр Тогда
		// Доступность регулируется настройками в диалоге
		Элементы.ПредставлениеРасписания.Доступность 				= Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ПредставлениеРасписания.Доступность = Объект.ФормироватьДокументыАвтоматически;
	Элементы.НастройкаРасчетаСебестоимости.Доступность = ПредварительноРасчитыватьСебестоимость;
	
	Элементы.СтраницаРасписание.Заголовок = Нстр("ru = 'Расписание '") + ?(Расписание = Неопределено, Нстр("ru = '(не задано)'"),"");
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура НастроитьПостроительОтчета(КомпоновщикНастроекКомпоновкиДанных, ВидОтраженияВУчете, МакетСКД = Неопределено)
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		МакетСКД = Справочники.НастройкиРасчетаЦеныНоменклатуры.ПолучитьМакет("НастройкаРасчетаУпрУчет");
		
	Иначе
		МакетСКД = Справочники.НастройкиРасчетаЦеныНоменклатуры.ПолучитьМакет("НастройкаРасчетаРеглУчет");
	КонецЕсли;	
	
	//Схему компоновки данных надо помещать во временное хранилище, иначе при выходе с сервера настройки компоновки данных пропадут
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(МакетСКД, Новый УникальныйИдентификатор);
	
	
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных)); 
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправлениеДоступностью();
	Элементы.ПредставлениеРасписания.Заголовок = ПредставлениеРасписания;
	ФормироватьДокументыАвтоматически = Объект.ФормироватьДокументыАвтоматически;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ЭтаФорма.Параметры.ЗначениеКопирования) Тогда
		НастройкиКомпоновщика = ЭтаФорма.Параметры.ЗначениеКопирования.НастройкиКомпоновщика.Получить()
	Иначе	
		НастройкиКомпоновщика = Объект.Ссылка.НастройкиКомпоновщика.Получить(); 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкиКомпоновщика) Тогда
		МакетСКД = Неопределено;
		НастроитьПостроительОтчета(КомпоновщикНастроекКомпоновкиДанных, Объект.ВидОтраженияВУчете, МакетСКД);
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
	Иначе
		НастроитьПостроительОтчета(КомпоновщикНастроекКомпоновкиДанных, Объект.ВидОтраженияВУчете);
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновщика);
	КонецЕсли;	
	
	Расписание = РегламентныеПроцедуры.ПолучитьРасписаниеРегламентногоЗадания(Объект.РегламентноеЗадание);
	ПредварительноРасчитыватьСебестоимость = ЗначениеЗаполнено(Объект.НастройкаРасчетаСебестоимости);
	РегламентныеПроцедуры.НастроитьПредставлениеРасписания(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьДокументыАвтоматическиПриИзменении(Элемент)
	ФормироватьДокументыАвтоматически = Объект.ФормироватьДокументыАвтоматически;
	НужноУдалитьРегламентноеЗадание = РегламентныеПроцедуры.ПриИзмененииФлагаФормироватьДокументыАвтоматически(ЭтаФорма);
	Элементы.ПредставлениеРасписания.Заголовок = ПредставлениеРасписания;
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРасписанияНажатие(Элемент)
	РегламентныеПроцедуры.РедактироватьРасписаниеРегламентногоЗадания(ЭтаФорма);
	Элементы.ПредставлениеРасписания.Заголовок = ПредставлениеРасписания;
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПараметрыЗаписи.Вставить("КомпоновщикНастроекКомпоновкиДанных", КомпоновщикНастроекКомпоновкиДанных);
	ПараметрыЗаписи.Вставить("НужноУдалитьРегламентноеЗадание", НужноУдалитьРегламентноеЗадание);
	ПараметрыЗаписи.Вставить("Расписание", Расписание);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ПараметрыЗаписи.НужноУдалитьРегламентноеЗадание = Истина Тогда
		ЗаголовокСообщения = ТекущийОбъект.ЗаголовокПриЗаписи();
		РегламентныеПроцедуры.УдалитьРегламентноеЗаданиеПриЗаписиНастройки(ТекущийОбъект,ЗаголовокСообщения,Отказ);
	КонецЕсли;	
	ТекКомпоновщикНастроекКомпоновкиДанных = ПараметрыЗаписи.КомпоновщикНастроекКомпоновкиДанных;
	ТекущийОбъект.НастройкиКомпоновщика = Новый ХранилищеЗначения(ТекКомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки());
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Обрабатываем расписание регл. задания
	Если НЕ ТекущийОбъект.ФормироватьДокументыАвтоматически Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаголовокСообщения = ТекущийОбъект.ЗаголовокПриЗаписи();
	РегламентныеПроцедуры.ИзменитьРегламентноеЗаданиеПриЗаписиНастройки(ТекущийОбъект,ПараметрыЗаписи.Расписание,ЗаголовокСообщения,Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ПредварительноРасчитыватьСебестоимостьПриИзменении(Элемент)
	Если НЕ ПредварительноРасчитыватьСебестоимость Тогда
		Объект.НастройкаРасчетаСебестоимости = "";
	КонецЕсли;
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПолучитьФорму("Справочник.ТипыЦенНоменклатуры.ФормаВыбора",,Элемент);
	//ФормаВыбора.СправочникСписок.Отбор.Рассчитывается.Установить(Ложь);
	//ФормаВыбора.НачальноеЗначениеВыбора = Объект.ТипЦен;
	ФормаВыбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ВидОтраженияВУчетеПриИзменении(Элемент)
	НастроитьПостроительОтчета(КомпоновщикНастроекКомпоновкиДанных, Объект.ВидОтраженияВУчете);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьБезРегламентногоЗадания(Команда)
	
	Если ЭтаФорма.Модифицированность //Настройка изменена
	  ИЛИ (НЕ ЗначениеЗаполнено(Объект.Ссылка)) Тогда //Новая настройка
		Если НЕ ЭтаФорма.Записать() Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Вопрос("Рассчитать цены номенклатуры? Результат будет записан в документ ""Установка цен номенклатуры""",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние("Выполняется расчет цены номенклатуры");
		
		ВыполнитьБезРегламентногоЗаданияНаСервере();
		
		Состояние("Расчет цены номенклатуры завершен");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьБезРегламентногоЗаданияНаСервере()
	
	УправлениеЗапасамиРасширеннаяАналитика.РасчетЦеныНоменклатурыНаСервере(Объект.Ссылка, Истина);
	
КонецПроцедуры	
