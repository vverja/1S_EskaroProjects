&НаКлиенте
Перем НужноУдалитьРегламентноеЗадание Экспорт; // Ответ пользователя на вопрос о необходимости удалять регл. задание (булево или неопределено)
&НаКлиенте
Перем РазрешеноРедактированиеДатыНачала; //Булево - спрашивали ли в сеансе работы с формой о разрешении редактирования даты начала обработки данных

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РазрешеноРедактированиеДатыНачала = Ложь;
	УстановитьДоступность();
	НастроитьНадписьЗадержка();
	Элементы.ПредставлениеРасписания.Заголовок = ПредставлениеРасписания;
	ФормироватьДокументыАвтоматически = Объект.ФормироватьДокументыАвтоматически;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПараметрыЗаписи.Вставить("КомпоновщикНастроекКомпоновкиДанных", КомпоновщикНастроекКомпоновкиДанных);
	ПараметрыЗаписи.Вставить("НужноУдалитьРегламентноеЗадание", НужноУдалитьРегламентноеЗадание);
	ПараметрыЗаписи.Вставить("Расписание", Расписание);
	ПараметрыЗаписи.Вставить("НачалоОбработки", НачалоОбработки);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ПараметрыЗаписи.НужноУдалитьРегламентноеЗадание = Истина Тогда
		ЗаголовокСообщения = ТекущийОбъект.ЗаголовокПриЗаписи();
		РегламентныеПроцедуры.УдалитьРегламентноеЗаданиеПриЗаписиНастройки(ТекущийОбъект,ЗаголовокСообщения,Отказ);
	КонецЕсли;	
	ТекКомпоновщикНастроекКомпоновкиДанных = ПараметрыЗаписи.КомпоновщикНастроекКомпоновкиДанных;
	ТекущийОбъект.НастройкиКомпоновщика = Новый ХранилищеЗначения(ТекКомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки());
	ТекущийОбъект.ГраницаОбработки = ?(ЗначениеЗаполнено(ПараметрыЗаписи.НачалоОбработки), НачалоДня(ПараметрыЗаписи.НачалоОбработки) - 1,'0001-01-01');
	ПараметрыЗаписи.Вставить("НастройкиОтбораСогласованы", ТекущийОбъект.ПроверитьНастройкиОтбора());
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если НЕ ПараметрыЗаписи.НастройкиОтбораСогласованы Тогда
		Предупреждение(Нстр("ru='Возможно, в отборе указаны некорректные значения.
							|Тип значения отбора ""Вид операции"" не соответствует значению отбора ""Направление""'"));
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура УстановитьДоступность()
	Если ТолькоПросмотр Тогда
		Элементы.ПредставлениеРасписания.Доступность 				= Ложь;
		Возврат;
	КонецЕсли;

	Элементы.ПредставлениеРасписания.Доступность 				= Объект.ФормироватьДокументыАвтоматически;
	Элементы.НадписьПояснениеЗадержка.Видимость 				= Объект.ФормироватьДокументыАвтоматически;
	Элементы.Задержка.Доступность 								= Объект.ФормироватьДокументыАвтоматически И Объект.НеОбрабатыватьВсеДокументы;
	Элементы.ШаблонРегулярногоДокумента.Доступность 			= ЗначениеЗаполнено(Объект.ВидРегулярногоДокумента);
	Элементы.НеОбрабатыватьВсеДокументы.Доступность				= Объект.ФормироватьДокументыАвтоматически;
	Элементы.СтраницаРасписание.Заголовок = Нстр("ru = 'Расписание '") + ?(Расписание = Неопределено, Нстр("ru = '(не задано)'"),"");
КонецПроцедуры

// Устанавливает подпись к полю Задержка с учетом формы множественного числа
&НаКлиенте
Процедура НастроитьНадписьЗадержка()
	
	Если Объект.НеОбрабатыватьВсеДокументы Тогда
	
		Если Объект.Задержка = 0 Тогда 
			ПояснениеЗадержка = Нстр("ru = 'Не обрабатывать документы за сегодня'");
		Иначе
			ПояснениеЗадержка = "";
		КонецЕсли;
		
	Иначе
		
		ПояснениеЗадержка = Нстр("ru = 'Обрабатывать все введенные документы'");
		
	КонецЕсли;
	Элементы.НадписьПояснениеЗадержка.Заголовок = ПояснениеЗадержка;
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьДокументыАвтоматическиПриИзменении(Элемент)
	ФормироватьДокументыАвтоматически = Объект.ФормироватьДокументыАвтоматически;
	НужноУдалитьРегламентноеЗадание = РегламентныеПроцедуры.ПриИзмененииФлагаФормироватьДокументыАвтоматически(ЭтаФорма);
	Элементы.ПредставлениеРасписания.Заголовок = ПредставлениеРасписания;
	Если НЕ Объект.ФормироватьДокументыАвтоматически И Объект.НеОбрабатыватьВсеДокументы Тогда
		Объект.НеОбрабатыватьВсеДокументы = Ложь;
		Объект.Задержка = 0;
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРасписанияНажатие(Элемент)
	РегламентныеПроцедуры.РедактироватьРасписаниеРегламентногоЗадания(ЭтаФорма);
	Элементы.ПредставлениеРасписания.Заголовок = ПредставлениеРасписания;
	УстановитьДоступность();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Расписание = РегламентныеПроцедуры.ПолучитьРасписаниеРегламентногоЗадания(Объект.РегламентноеЗадание);
	РегламентныеПроцедуры.НастроитьПредставлениеРасписания(ЭтаФорма);
	НачалоОбработки = ?(ЗначениеЗаполнено(Объект.ГраницаОбработки), КонецДня(Объект.ГраницаОбработки) + 1,'0001-01-01');
	
	Если ЗначениеЗаполнено(ЭтаФорма.Параметры.ЗначениеКопирования) Тогда
		НастройкиКомпоновщика = ЭтаФорма.Параметры.ЗначениеКопирования.НастройкиКомпоновщика.Получить()
	Иначе	
		НастройкиКомпоновщика = Объект.Ссылка.НастройкиКомпоновщика.Получить(); 
	КонецЕсли;
	МакетСКД = Справочники.НастройкиФормированияДокументовПоОрдерам.ПолучитьМакет("Настройка");

	//Схему компоновки данных надо помещать во временное хранилище, иначе при выходе с сервера настройки компоновки данных пропадут
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(МакетСКД, Новый УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных)); 
	Если ЗначениеЗаполнено(НастройкиКомпоновщика) Тогда
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновщика);
	Иначе	
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Обрабатываем расписание регл. задания
	Если НЕ ТекущийОбъект.ФормироватьДокументыАвтоматически Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаголовокСообщения = ТекущийОбъект.ЗаголовокПриЗаписи();
	РегламентныеПроцедуры.ИзменитьРегламентноеЗаданиеПриЗаписиНастройки(ТекущийОбъект,ПараметрыЗаписи.Расписание,ЗаголовокСообщения,Отказ);

КонецПроцедуры

&НаКлиенте
Процедура НеОбрабатыватьВсеДокументыПриИзменении(Элемент)
	УстановитьДоступность();
	
	Если Объект.НеОбрабатыватьВсеДокументы Тогда
		ТекущийЭлемент = Элементы.Задержка;
	КонецЕсли;

	НастроитьНадписьЗадержка();
КонецПроцедуры

&НаКлиенте
Процедура ВидРегулярногоДокументаПриИзменении(Элемент)
	ВидДокументаСтрокой = "ДокументСсылка."+СокрЛП(Объект.ВидРегулярногоДокумента);
	Если ЗначениеЗаполнено(Объект.ВидРегулярногоДокумента) 
		И ТипЗнч(Объект.ШаблонРегулярногоДокумента) <> Тип(ВидДокументаСтрокой) Тогда
		ОписаниеТиповШаблон = Новый ОписаниеТипов(ВидДокументаСтрокой);
		Объект.ШаблонРегулярногоДокумента = ОписаниеТиповШаблон.ПривестиЗначение(Объект.ШаблонРегулярногоДокумента);
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ВидРегулярногоДокументаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПериодДетализацииОчистка(Элемент, СтандартнаяОбработка)
	
	// Очищать это поле нельзя
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
    УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ЗадержкаПриИзменении(Элемент)
	НастроитьНадписьЗадержка();
КонецПроцедуры

&НаКлиенте
Процедура НачалоОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если РазрешеноРедактированиеДатыНачала Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = Нстр("ru = 'Дата, начиная с которой обрабатываются данные, изменяется автоматически.
	|Изменение этой даты вручную может привести к ошибкам при формировании документов.
	|Вы действительно хотите изменить дату вручную?'");
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, Нстр("ru = 'Изменить дату вручную'"));
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		СтандартнаяОбработка = Ложь;
		//Сместим фокус на другой элемент формы. Восстановление старого значения произойдет в "НачалоОбработкиОкончаниеВводаТекста"
		ТекущийЭлемент = Элементы.ТабличноеПолеОтбор;
		Возврат;
	КонецЕсли;
	РазрешеноРедактированиеДатыНачала = Истина;
	Модифицированность = Истина;
КонецПроцедуры
