////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет проверку заполненности реквизитов.
//
// Параметры
//	Заголовок - заголовок сообщения об ошибке
//
// Возвращаемое значение
//	Истина  - все проверяемые реквизиты заполнены
//	Ложь	- не все проверяемые реквизиты заполнены
Функция РеквизитыЗаполнены(Знач Заголовок) Экспорт
	Если ЭтотОбъект.ЭтоГруппа Тогда
		Возврат Истина;
	КонецЕсли;
	
	Отказ = Ложь;
	
	// Должны быть заполнены обязательные реквизиты
	СтруктураОбязательныхПолей = Новый Структура();
	СтруктураОбязательныхПолей.Вставить("ПериодДетализации",	"Не указан период детализации формируемых документов");
	СтруктураОбязательныхПолей.Вставить("ВидРегулярногоДокумента",	"Не указан вид формируемых документов");
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский)
	СтруктураШапкиДокумента = Новый Структура("ОтражатьВУправленческомУчете,ОтражатьВБухгалтерскомУчете");
	ЗаполнитьЗначенияСвойств(СтруктураШапкиДокумента, ЭтотОбъект);
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Возврат НЕ Отказ;
		
КонецФункции

// Подготавливает заголовок сообщений об ошибках при записи
//
// Возвращаемое значение
//  Строка, заголовок сообщений
Функция ЗаголовокПриЗаписи() Экспорт
	
	Возврат "Запись настройки формирования документов по ордерам """ + Наименование + """";
	
КонецФункции

// Возвращает имя объекта метаданных для создания регл. задания
//
// Возвращаемое значение
//	Строка  - имя объекта метаданных
Функция ИмяРегламентногоЗадания() Экспорт
	Возврат "РегламентноеФормированиеДокументов";
КонецФункции	

Процедура ПередЗаписью(Отказ)
	// Проверим заполнение реквизитов
	Заголовок = ЗаголовокПриЗаписи();
	Отказ = НЕ РеквизитыЗаполнены(Заголовок);
КонецПроцедуры

//Функция проверяет корректность отборов:
//	отбор по виду операции должен соответствовать отбору по направлению
//Возвращаемое значение - булево (истина - отбор корректен, ложь - обнаружены несоответствия)
Функция ПроверитьНастройкиОтбора() Экспорт
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	ТекНастройкиКомпоновщика = НастройкиКомпоновщика.Получить();
	КомпоновщикНастроек.ЗагрузитьНастройки(ТекНастройкиКомпоновщика);
	ОтборКомпоновщикНастроек = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	ОтборНаправление = Неопределено;		//значение отбора по полю Направление
	МассивОтборВидОперации = Новый Массив;	//массив значений отбора по полю ВидОперации
	Для каждого ЭлементОтбора ИЗ ОтборКомпоновщикНастроек Цикл
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ОбработатьГруппуЭлементовОтбора(ЭлементОтбора, ОтборНаправление, МассивОтборВидОперации);
		Иначе
			ОбработатьЭлементОтбора(ЭлементОтбора, ОтборНаправление, МассивОтборВидОперации);
		КонецЕсли;
	КонецЦикла;
	Если ОтборНаправление = Неопределено ИЛИ МассивОтборВидОперации.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	ЗначениеОтборНаправление = НРег(СокрЛП(ОтборНаправление.ПравоеЗначение));
	Если ЗначениеОтборНаправление = "приход" Тогда
		ТипЗначенияВидОперации = Тип("ПеречислениеСсылка.ВидыОперацийПриходныйОрдер");
	ИначеЕсли ЗначениеОтборНаправление = "расход" Тогда
		ТипЗначенияВидОперации = Тип("ПеречислениеСсылка.ВидыОперацийРасходныйОрдер");
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ЭлементОтбора ИЗ МассивОтборВидОперации Цикл
		ТипЗначенияОтбора = ТипЗнч(ЭлементОтбора.ПравоеЗначение);
		Если ТипЗначенияОтбора <> ТипЗначенияВидОперации Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Процедура ОбработатьГруппуЭлементовОтбора(ГруппаЭлементовОтбора, ОтборНаправление, МассивОтборВидОперации)
	Для Каждого ЭлементОтбора ИЗ ГруппаЭлементовОтбора.Элементы Цикл
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ОбработатьГруппуЭлементовОтбора(ЭлементОтбора, ОтборНаправление, МассивОтборВидОперации);
		Иначе
			ОбработатьЭлементОтбора(ЭлементОтбора, ОтборНаправление, МассивОтборВидОперации);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьЭлементОтбора(ЭлементОтбора, ОтборНаправление, МассивОтборВидОперации)
	Если НЕ ЭлементОтбора.Использование Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(СокрЛП(ЭлементОтбора.ЛевоеЗначение)) = "направление" Тогда
		ОтборНаправление = ЭлементОтбора;
	ИначеЕсли НРег(СокрЛП(ЭлементОтбора.ЛевоеЗначение)) = "видоперации" Тогда
		МассивОтборВидОперации.Добавить(ЭлементОтбора);
	КонецЕсли;
КонецПроцедуры


