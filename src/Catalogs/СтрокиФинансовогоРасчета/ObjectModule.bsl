
// Процедура генерирует код перемещаемого элемента (группы) справочника,
// а также код расположенного рядом элемента при интерактивном перемещении
// элемента в форме списка справочника.
// Записывает переставляемые элементы с измененными кодами.
// В случае сдвига группы элементов также изменяет коды вложенных в группу
// элементов.
//
// Параметры
//  Направление  – число – направление сдвига элемента,
//                 принимает значения:
//                      1 - при сдвиге вниз;
//                     -1 - при сдвиге вверх.
//
Процедура ИзменитьКод(Направление) Экспорт

	#Если Клиент Тогда
	
	ТекущийКод    = Код;

	СписокКодов   = Новый СписокЗначений;

	СтрокиРасчета  = Справочники.СтрокиФинансовогоРасчета;
	ВыборкаСтроки = СтрокиРасчета.Выбрать(Родитель, Владелец, , "Код Убыв");

	Пока ВыборкаСтроки.Следующий() Цикл
		СписокКодов.Добавить(ВыборкаСтроки.Код);
	КонецЦикла;

	Если СписокКодов.Количество() < 2  Тогда
		// На данном уровне имеется только один элемент или группа справочника.
		// Игнорируем действие пользователя.

		Возврат;
	КонецЕсли; 

	ПорядковыйНомер = СписокКодов.Индекс(СписокКодов.НайтиПоЗначению(ТекущийКод));

	Если (ПорядковыйНомер = 0) И (Направление < 0) Тогда

		// Попытка перемещения первого по порядку элемента вверх.
		ИндексЭлементаЗамены = СписокКодов.Количество() - 1;
	
	ИначеЕсли (ПорядковыйНомер = СписокКодов.Количество() - 1) И (Направление > 0) Тогда

		// Попытка перемещения последнего по порядку элемента вниз.
		ИндексЭлементаЗамены = 0;

	Иначе

		// в иных случаях
		ИндексЭлементаЗамены = ПорядковыйНомер + Направление;

	КонецЕсли;

	КодЭлементаЗамены     = СписокКодов.Получить(ИндексЭлементаЗамены).Значение;
	
	ЭлементЗаменыСсылка   = СтрокиРасчета.НайтиПоКоду(КодЭлементаЗамены,,Родитель, Владелец);
	Если ЭлементЗаменыСсылка <> СтрокиРасчета.ПустаяСсылка() Тогда
		
		Попытка
			
			// Открываем транзакцию
			НачатьТранзакцию();
			
			// Промежуточная запись текущего элемента с уникальным кодом
			ЭтотОбъект.Код="&&$##";
			ЭтотОбъект.Записать();
						
			// записываем соседний элемент с кодом текущего
			ЭлементЗамены= ЭлементЗаменыСсылка.ПолучитьОбъект();
			ПредыдущийКод=ЭлементЗамены.Код;
			ЭлементЗамены.Код = ТекущийКод;
			ЭлементЗамены.Записать();
			
			// записываем текущий элемент с кодом соседнего
			ЭтотОбъект.Код = ПредыдущийКод;
			ЭтотОбъект.Записать();
			
			// Завершаем транзакцию
			ЗафиксироватьТранзакцию();
			
		Исключение
			Предупреждение("Не удалось записать элемент справочника:
			|" + ОписаниеОшибки());
			
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	// Необходимо поменять формулы, использующие строки с измененными кодами
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиРасчетаСтрокиРасчетаДляФормулы.Ссылка КАК СтрокаРасчета
	|ИЗ
	|	Справочник.СтрокиФинансовогоРасчета.СтрокиРасчетаДляФормулы КАК СтрокиРасчетаСтрокиРасчетаДляФормулы
	|
	|ГДЕ
	|	СтрокиРасчетаСтрокиРасчетаДляФормулы.Ссылка.Владелец = &Владелец И
	|	СтрокиРасчетаСтрокиРасчетаДляФормулы.Ссылка.ВидСтроки = &ВидСтроки И
	|	(СтрокиРасчетаСтрокиРасчетаДляФормулы.СтрокаРасчета = &ЭлементЗамены 
	|	ИЛИ СтрокиРасчетаСтрокиРасчетаДляФормулы.СтрокаРасчета = &ТекущийОбъект)";
	
	Запрос.УстановитьПараметр("ЭлементЗамены",ЭлементЗаменыСсылка);
	Запрос.УстановитьПараметр("ТекущийОбъект",Ссылка);
	Запрос.УстановитьПараметр("Владелец",Владелец);
	Запрос.УстановитьПараметр("ВидСтроки",Перечисления.ВидыСтрокФинансовогоРасчета.РасчетПоДругимСтрокамОтчета);

	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	НачатьТранзакцию();
	Пока РезультатЗапроса.Следующий() Цикл
		ОбъектРасчет=РезультатЗапроса.СтрокаРасчета.ПолучитьОбъект();
		СтараяФормула=ОбъектРасчет.Формула;
		СтараяФормула=СтрЗаменить(СтараяФормула,"["+ТекущийКод+"]","#");
		СтараяФормула=СтрЗаменить(СтараяФормула,"["+ПредыдущийКод+"]","["+ТекущийКод+"]");
		СтараяФормула=СтрЗаменить(СтараяФормула,"#","["+ПредыдущийКод+"]");
		ОбъектРасчет.Формула=СтараяФормула;
		ОбъектРасчет.Записать();
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	#КонецЕсли
	
КонецПроцедуры // ИзменитьКод()

Процедура ПередЗаписью(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения="";
	
	Если ВидСтроки=Перечисления.ВидыСтрокФинансовогоРасчета.ПустаяСсылка() Тогда
		ТекстСообщения="Не указан вид строки финансового расчета.";
	ИначеЕсли ВидСтроки=Перечисления.ВидыСтрокФинансовогоРасчета.ОборотыПоСтатьеОборотов
		И НЕ ЗначениеЗаполнено(Измерение) Тогда
		ТекстСообщения="Не указана статья оборотов.";
	ИначеЕсли ВидСтроки=Перечисления.ВидыСтрокФинансовогоРасчета.ОстаткиОборотыПоПлануСчетов Тогда
		Если НЕ ЗначениеЗаполнено(Измерение) Тогда
			ТекстСообщения="Не указан счет.";
		ИначеЕсли НЕ ЗначениеЗаполнено(Формула) Тогда
			ТекстСообщения="Не указан вид остатка/оборота";
		КонецЕсли;
	ИначеЕсли ВидСтроки=Перечисления.ВидыСтрокФинансовогоРасчета.ИсточникиДанныхДляРасчетов Тогда
		Если НЕ ЗначениеЗаполнено(Измерение) Тогда
			ТекстСообщения="Не указан источник данных для расчетов.";
		ИначеЕсли НЕ ЗначениеЗаполнено(Формула) Тогда
			ТекстСообщения="Не указан показатель источника";
		КонецЕсли;
	ИначеЕсли ВидСтроки=Перечисления.ВидыСтрокФинансовогоРасчета.РасчетПоДругимСтрокамОтчета И НЕ ЗначениеЗаполнено(Формула)  Тогда
	    ТекстСообщения="Не указана формула для расчета";
	КонецЕсли;
	
	Если Не ТекстСообщения="" Тогда
		Сообщить(ТекстСообщения);
		Отказ=Истина;
	КонецЕсли;
		
КонецПроцедуры

