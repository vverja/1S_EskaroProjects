////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура проверяет правильно ли выбан счет передачи БУ.
// В случае неправильного заполнения меняет на значение
// по умолчанию.
Процедура ПроверитьПравильностьЗаполненияСчетаПередачиБУ(Сообщать, Заголовок = "") Экспорт
	
	Если ВидМатериала = Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет Тогда
		
		// МБП
		СчетПередачиБУ = ПланыСчетов.Хозрасчетный.Вспомогательный;
		Возврат;	
		
	КонецЕсли;
	
	// Определение счетов для проверки
	СчетМалоценныхНА            = ПланыСчетов.Хозрасчетный.МалоценныеНеоборотныеМатериальныеАктивы;
	СчетМалоценныхНАПоУмолчанию = ПланыСчетов.Хозрасчетный.МалоценныеНеоборотныеМатериальныеАктивыКоличественно;
	
	СчетБиблиотечныхФондов            = ПланыСчетов.Хозрасчетный.БиблиотечныеФонды;
	СчетБиблиотечныхФондовПоУмолчанию = ПланыСчетов.Хозрасчетный.БиблиотечныеФондыКоличественно;
	
	Если Сообщать Тогда
		
		ЗаготовкаСообщения1 = "" + Символы.Таб + "Исходя из вида материала: """ + ВидМатериала 
		                      + Символы.ПС + Символы.Таб + """ ""Счет передачи"" должен быть субсчетом счета """;
		ЗаготовкаСообщения2 = "" + Символы.ПС + Символы.Таб + "Счет был изменен с """ + СчетПередачиБУ 
		                      + """ на """;
		
	КонецЕсли;
	
	БылаЗамена = Ложь;
	
	Если ВидМатериала = Перечисления.ВидыМатериалов.МалоценныйНеоборотныйАктив Тогда
		// Малоценные необоротные активы
		
		Если НЕ ЗначениеЗаполнено(СчетПередачиБУ) ИЛИ (НЕ СчетПередачиБУ.ПринадлежитЭлементу(СчетМалоценныхНА)) Тогда
			
			Если Сообщать Тогда
				
				Сообщение = ЗаготовкаСообщения1 + СчетМалоценныхНА + """."
				            + ЗаготовкаСообщения2 + СчетМалоценныхНАПоУмолчанию + """.";
								 
			КонецЕсли;
			
			СчетПередачиБУ = СчетМалоценныхНАПоУмолчанию;
			БылаЗамена     = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ВидМатериала = Перечисления.ВидыМатериалов.БиблиотечныеФонды Тогда
		// Библиотечные фонды
	   
		Если НЕ ЗначениеЗаполнено(СчетПередачиБУ) ИЛИ (НЕ СчетПередачиБУ.ПринадлежитЭлементу(СчетБиблиотечныхФондов)) Тогда
			
			Если Сообщать Тогда
				
				Сообщение = ЗаготовкаСообщения1 + СчетБиблиотечныхФондов + """."
				            + ЗаготовкаСообщения2 + СчетБиблиотечныхФондовПоУмолчанию + """.";
								 
			КонецЕсли;
			
			СчетПередачиБУ = СчетБиблиотечныхФондовПоУмолчанию;
			БылаЗамена     = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Сообщать И БылаЗамена Тогда
	
		ОбщегоНазначения.СообщитьИнформацию(Сообщение, Заголовок, СтатусСообщения.Важное); 
		
	КонецЕсли; 

КонецПроцедуры // ПроверитьПравильностьЗаполненияСчетаПередачиБУ()

// Процедура проверяет правильно ли выбан счет амортизации БУ.
// В случае неправильного заполнения меняет на значение
// по умолчанию.
Процедура ПроверитьПравильностьЗаполненияСчетаАмортизацииБУ(Сообщать, Заголовок = "") Экспорт
	
	// Определение счетов для проверки
	СчетАмортизацииНА                      = ПланыСчетов.Хозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивов;
	СчетАмортизацииМалоценныхНАПоУмолчанию = ПланыСчетов.Хозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовКоличественно;
	
	Если Сообщать Тогда
		
		ЗаготовкаСообщения1 = "" + Символы.Таб + "Исходя из вида материала: """ + ВидМатериала 
		                      + """ ""Счет амортизации"" должен быть субсчетом счета """
							  + СчетАмортизацииНА + """.";
		ЗаготовкаСообщения2 = "" + Символы.Таб + "Счет был изменен с """ + СчетАмортизацииБУ 
		                      + """ на """;
		
	КонецЕсли;
	
	БылаЗамена = Ложь;
	
	Если ВидМатериала = Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет Тогда
	    // МБП
		
		// Для МБП счет амортизации должен быть равным счету передачи
		СчетАмортизацииБУ = СчетПередачиБУ;
		
	Иначе
		// Малоценные необоротные активы и Библиотечные фонды
		
		Если НЕ ЗначениеЗаполнено(СчетАмортизацииБУ) ИЛИ (НЕ СчетАмортизацииБУ.ПринадлежитЭлементу(СчетАмортизацииНА)) Тогда
			
			Если Сообщать Тогда
				
				Сообщение = ЗаготовкаСообщения1 + ЗаготовкаСообщения2
				            + СчетАмортизацииМалоценныхНАПоУмолчанию + """.";
								 
			КонецЕсли;
			
			СчетАмортизацииБУ = СчетАмортизацииМалоценныхНАПоУмолчанию;
			БылаЗамена        = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Сообщать И БылаЗамена Тогда
		
		ОбщегоНазначения.СообщитьИнформацию(Сообщение, Заголовок, СтатусСообщения.Важное); 
		
	КонецЕсли; 

КонецПроцедуры // ПроверитьПравильностьЗаполненияСчетаАмортизацииБУ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция проверяет, были ли движения по регистру 
// с текущим направлением использования
Функция БылиДвиженияПоРегистру(ИмяРегистра)

	Запрос       = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Рег.СхемаНазначенияИспользования
	|ИЗ
	|	РегистрНакопления." + ИмяРегистра + " КАК Рег
	|ГДЕ
	|	Рег.СхемаНазначенияИспользования = &СхемаНазначенияИспользования";
	
	Запрос.УстановитьПараметр("СхемаНазначенияИспользования", Ссылка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции // БылиДвиженияПоРегистру()

// Процедура проверяет, существуют ли движения в регистрах по данному
// элементу справочника. Если существуют и изменялись определенные реквизиты,
// то запрещает запись.
Процедура ПроверитьВозможностьЗаписиЭлемента(Отказ, Заголовок)

	Если ЭтоНовый() Тогда
		
		// Проверять нечего
		Возврат
		
	КонецЕсли;
	
	// По умолчанию считается, что движений не было
	БылиДвиженияУпр = Ложь;
	БылиДвиженияБух = Ложь;
	БылиДвиженияНал = Ложь;
	
	// Получение старых значений
	ВидМатериалаСтарый            = Ссылка.ВидМатериала;
	СчетПередачиБУСтарый          = Ссылка.СчетПередачиБУ;
	СчетАмортизацииБУСтарый       = Ссылка.СчетАмортизацииБУ;
	
	// Проверка изменений
	ИзмененВидМатериала            = (ВидМатериала <>  ВидМатериалаСтарый);
	ИзмененСчетПередачиБУ          = (СчетПередачиБУ <> СчетПередачиБУСтарый);
	ИзмененСчетАмортизацииБУ       = (СчетАмортизацииБУ <> СчетАмортизацииБУСтарый);
	
	
	Если ИзмененВидМатериала
	 ИЛИ ИзмененСчетПередачиБУ ИЛИ ИзмененСчетАмортизацииБУ Тогда
		// Нужно проверить движения по бухгалтерскому учету
		
		БылиДвиженияБух = БылиДвиженияПоРегистру("ПартииМатериаловВЭксплуатацииБухгалтерскийУчет");
		
	КонецЕсли;
	
	Если (ИзмененВидМатериала 
	   И  БылиДвиженияБух) Тогда
	   
		Сообщение = "" + Символы.Таб + "Нельзя изменять ""Вид материала"","
	                + "потому что были движения по регистру ""Партии материалов в эксплуатации (бухгалтерский учет)""."
		    	    + Символы.ПС + Символы.Таб + "Текущее значение <" + ВидМатериала + "> изменяется на старое <"
				    + ВидМатериалаСтарый + ">.";
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение, Отказ, Заголовок);
		ВидМатериала = ВидМатериалаСтарый;
		
	КонецЕсли;
	
	
	Если (ИзмененСчетПередачиБУ 
	   И  БылиДвиженияБух) Тогда
	   
		Сообщение = "" + Символы.Таб + "Нельзя изменять ""Счет передачи"","
	                + "потому что были движения по регистру ""Партии материалов в эксплуатации (бухгалтерский учет)""."
		    	    + Символы.ПС + Символы.Таб + "Текущее значение <" + СчетПередачиБУ + "> изменяется на старое <"
				    + СчетПередачиБУСтарый + ">.";
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение, Отказ, Заголовок);
		СчетПередачиБУ = СчетПередачиБУСтарый;
		
	КонецЕсли;
	
	Если (ИзмененСчетАмортизацииБУ 
	   И  БылиДвиженияБух) Тогда
	   
	   Если ВидМатериала <> Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет Тогда
		   // Если это МБП, то счет амортизации невидим, а значит не нужно сообщать
		   
		   Сообщение = "" + Символы.Таб + "Нельзя изменять ""Счет амортизации"","
		               + "потому что были движения по регистру ""Партии материалов в эксплуатации (бухгалтерский учет)""."
		               + Символы.ПС + Символы.Таб + "Текущее значение <" + СчетАмортизацииБУ + "> изменяется на старое <"
		               + СчетАмортизацииБУСтарый + ">.";
		   ОбщегоНазначения.СообщитьОбОшибке(Сообщение, Отказ, Заголовок);
			
		КонецЕсли;
		СчетАмортизацииБУ = СчетАмортизацииБУСтарый;
		
	КонецЕсли;
	

КонецПроцедуры // ПроверитьВозможностьЗаписиЭлемента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ)
	
	Если НЕ ОбменДанными.Загрузка И НЕ ЭтоГруппа Тогда
		
		Заголовок = "Запись элемента справочника """ + Метаданные().Представление() 
		            + """ Наим: <" + Наименование + "> код: <" + Код + ">, подчиненного <" + Владелец + ">:";
					
		ПроверитьПравильностьЗаполненияСчетаПередачиБУ(Истина, Заголовок);
	    ПроверитьПравильностьЗаполненияСчетаАмортизацииБУ(Истина, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры
