
Перем мДлинаСуток;

Перем ПрошлыйИзмененныйРодительОбъектаДоступа;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Процедура выводит на экран печатную форму 
	//
	// Параметры: 
	//  Нет
	//
	// Возвращаемое значение:
	//  Нет.
	//
Функция Печать(ИмяМакета="", КоличествоЭкземпляров = 1, НаПринтер = Ложь,ТабДокумент = Неопределено, ДатаАктуальности = Неопределено) Экспорт

	СтруктураДанных = Новый Структура; 
	СтруктураДанныхОрганизации = Новый Структура; 
		
	//Если ТабДокумент = Неопределено Тогда
		Подробно = Истина;
    //Иначе
    //	Подробно = Ложь
    //КонецЕсли;
		
	Запрос = Новый Запрос;

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ФизЛицо" ,	Ссылка);
	Если ДатаАктуальности = Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаАктуальности" ,	КонецДня(ОбщегоНазначения.ПолучитьРабочуюДату()));
	Иначе
		Запрос.УстановитьПараметр("ДатаАктуальности" ,	КонецДня(ДатаАктуальности));
	КонецЕсли;
	Запрос.УстановитьПараметр("Изображение" ,Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение);
	Запрос.УстановитьПараметр("ПустаяСтрока" ,"");
	Запрос.УстановитьПараметр("Командировка" ,Перечисления.ПричиныОтсутствияНаРаботе.Командировка);
	Запрос.УстановитьПараметр("Болезнь" ,Перечисления.ПричиныОтсутствияНаРаботе.Заболевание);
	Запрос.УстановитьПараметр("ПустойОтвет" ,Справочники.ВариантыОтветовОпросов.ПустаяСсылка());
	
	Если Подробно Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.ДатаРождения,
		|	ФизическиеЛица.МестоРождения,
		|	ФизическиеЛица.ИНН,
		|	ФизическиеЛица.Код,
		|	ФизическиеЛица.КодПоДРФО,
		|	ФизическиеЛица.Пол,
		|	ФизическиеЛица.ОсновноеИзображение.Хранилище КАК Данные,
		|	ФизическиеЛица.ОсновноеИзображение.Наименование КАК ОписаниеИзображения,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Представление КАК ДокументВид,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
		|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = ФизическиеЛица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
		|		ПО ФизическиеЛица.Ссылка = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
		|
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &ФизЛицо";
		
		Результат = Запрос.Выполнить(); 
		ВыборкаДляПроверок = Результат.Выбрать();
		ВыборкаДляПроверок.Следующий();
		СтруктураДанных.Вставить("ФизическиеЛица", Результат.Выбрать());
		Если ВыборкаДляПроверок.ДокументВид <> Null Тогда
			СтруктураДанных.Вставить("ПаспортныеДанныеФизЛиц", Результат.Выбрать());
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	ВЫБОР КОГДА КонтактнаяИнформация.Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации ТОГДА
		|		КонтактнаяИнформация.Вид.Представление
		|	ИНАЧЕ
		|		КонтактнаяИнформация.Вид
		|	КОНЕЦ КАК ВидКИ,
		|	КонтактнаяИнформация.Представление КАК ПредставлениеКИ
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &ФизЛицо
		|УПОРЯДОЧИТЬ ПО
		|	Тип
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		СтруктураДанных.Вставить("КонтактнаяИнформация", Запрос.Выполнить().Выбрать());
		
		// разделы информации о физлице из табличных частей справочника
		Для каждого ТЧ Из Метаданные.Справочники.ФизическиеЛица.ТабличныеЧасти Цикл
			ИмяРегистра = "ФизическиеЛица_" + СтрЗаменить(ТЧ.Имя,"_","");
			Если ТЧ.Имя = "СоставСемьи" Тогда
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ФизическиеЛица_СоставСемьи.СтепеньРодства.Представление КАК СтепеньРодства,
				|	ФизическиеЛица_СоставСемьи.ФизЛицо.Наименование КАК Имя,
				|	ФизическиеЛица_СоставСемьи.ГодРождения КАК ГодРождения,
				|	СемейноеПоложениеФизЛицСрезПоследних.СемейноеПоложение.Представление КАК СемейноеПоложение
				|ИЗ
				|	Справочник.ФизическиеЛица.СоставСемьи КАК ФизическиеЛица_СоставСемьи
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СемейноеПоложениеФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК СемейноеПоложениеФизЛицСрезПоследних
				|		ПО ФизическиеЛица_СоставСемьи.Ссылка = СемейноеПоложениеФизЛицСрезПоследних.ФизЛицо
				|ГДЕ
				|	ФизическиеЛица_СоставСемьи.Ссылка = &ФизЛицо
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	NULL,
				|	NULL,
				|	ЕСТЬNULL(КОЛИЧЕСТВО(ФизическиеЛица_СоставСемьи.ГодРождения), 0),
				|	СемейноеПоложениеФизЛицСрезПоследних.СемейноеПоложение.Представление
				|ИЗ
				|	РегистрСведений.СемейноеПоложениеФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК СемейноеПоложениеФизЛицСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.СоставСемьи КАК ФизическиеЛица_СоставСемьи
				|		ПО ФизическиеЛица_СоставСемьи.Ссылка = СемейноеПоложениеФизЛицСрезПоследних.ФизЛицо
				|
				|СГРУППИРОВАТЬ ПО
				|	СемейноеПоложениеФизЛицСрезПоследних.СемейноеПоложение
				|
				|ИМЕЮЩИЕ
				|	ЕСТЬNULL(КОЛИЧЕСТВО(ФизическиеЛица_СоставСемьи.ГодРождения), 0) = 0";
				
			Иначе
				
				ТекстПолей = "";
				Для каждого Реквизит Из ТЧ.Реквизиты Цикл
					ЕстьПолеПредставление = Ложь;
					// Определим принадлежность к ссылочным типам (т.е. возможность использования поля Представление)
					Для Каждого ЭлементТипа Из Реквизит.Тип.Типы() Цикл
						// Нет у примитивных
						Если ЭлементТипа = Тип("Число")
							ИЛИ ЭлементТипа = Тип("Строка")
							ИЛИ ЭлементТипа = Тип("Дата")
							ИЛИ ЭлементТипа = Тип("Булево") Тогда
							
							ЕстьПолеПредставление = Ложь;
							Прервать;
						Иначе
							
							// Нет у перечисления
							ПустоеЗначениеТипа = Новый(ЭлементТипа);
							
							Если Метаданные.Перечисления.Найти(ПустоеЗначениеТипа.Метаданные().Имя) <> Неопределено Тогда
								ЕстьПолеПредставление = Ложь;
								Прервать;
							Иначе
								ЕстьПолеПредставление = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					ТекстПолей = ТекстПолей + "," + Символы.ПС + Символы.Таб + ИмяРегистра + "." + Реквизит.Имя + ?(ЕстьПолеПредставление,".Представление","") + " КАК " + Реквизит.Имя
				КонецЦикла;
				
				Запрос.Текст = "ВЫБРАТЬ" + Сред(ТекстПолей,2) 
				+ ?(ТЧ.Имя = "СоставСемьи",",
				|	СемейноеПоложениеФизЛицСрезПоследних.СемейноеПоложение.Представление КАК СемейноеПоложение" , "") + Символы.ПС
				+ "ИЗ" + Символы.ПС + Символы.Таб + "Справочник." + СтрЗаменить(ИмяРегистра,"_",".") + " КАК " + ИмяРегистра 
				+ ?(ТЧ.Имя = "СоставСемьи","
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СемейноеПоложениеФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК СемейноеПоложениеФизЛицСрезПоследних
				|		ПО "+ ИмяРегистра +".Ссылка = СемейноеПоложениеФизЛицСрезПоследних.ФизЛицо","") + Символы.ПС 
				+ "ГДЕ" + Символы.ПС + Символы.Таб + ИмяРегистра + ".Ссылка = &ФизЛицо";
				
			КонецЕсли;
			
			СтруктураДанных.Вставить(ИмяРегистра, Запрос.Выполнить().Выбрать());
		КонецЦикла;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Значение,
		|	ЗначенияСвойствОбъектов.Свойство
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &ФизЛицо";
		
		СтруктураДанных.Вставить("ДополнительныеДанные", Запрос.Выполнить().Выбрать());
    КонецЕсли;
	Если НастройкаПравДоступа.ДоступнаРольМенеджераПоНабору() Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатыАнкетирования.Ссылка.ТиповаяАнкета.Представление КАК Анкета,
		|	РезультатыАнкетирования.Вопрос.ПолнаяФормулировка КАК Вопрос,
		|	РезультатыАнкетирования.ТиповойОтвет КАК Ответ,
		|	РезультатыАнкетирования.Ссылка.Представление КАК РегистраторПредставление,
		|	ВариантыОтветовОпросов.ОценкаОтвета
		|ИЗ
		|	Документ.Опрос.Вопросы КАК РезультатыАнкетирования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтветовОпросов КАК ВариантыОтветовОпросов
		|		ПО РезультатыАнкетирования.ТиповойОтвет = ВариантыОтветовОпросов.Ссылка
		|
		|ГДЕ
		|	РезультатыАнкетирования.Ссылка.ОпрашиваемоеЛицо = &ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	РезультатыАнкетирования.Ссылка.Дата";
		
		СтруктураДанных.Вставить("Опросы", Запрос.Выполнить().Выбрать());
		
	КонецЕсли;

	Если НастройкаПравДоступа.ДоступнаРольКадровикаУпр() Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиСрезПоследних.ЗанимаемыхСтавок,
		|	РаботникиСрезПоследних.Должность.Представление КАК Должность,
		|	РаботникиСрезПоследних.Подразделение.Представление КАК Подразделение,
		|	ВЫБОР
		|		КОГДА РаботникиСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|			ТОГДА ""Не работает (уволен)""
		|		ИНАЧЕ ""Работает""
		|	КОНЕЦ КАК Состояние
		|ИЗ
		|	РегистрСведений.Работники.СрезПоследних(&ДатаАктуальности, ФизЛицо = &ФизЛицо) КАК РаботникиСрезПоследних";
		
		Запрос.УстановитьПараметр("Уволен",Перечисления.ПричиныИзмененияСостояния.Увольнение);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Выборка.Состояние <> Null Тогда
			СтруктураДанных.Вставить("Работники", РезультатЗапроса.Выбрать());
		КонецЕсли;
			
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПриемНаРаботуРаботники.Ссылка КАК Документ,
			|	ПриемНаРаботуРаботники.Ссылка.Представление,
			|	ПриемНаРаботуРаботники.Ссылка.Дата КАК Дата,
			|	ПриемНаРаботуРаботники.ДатаПриема КАК ДатаС,
			|	ПриемНаРаботуРаботники.ДатаУвольнения КАК ДатаПо,
			|	ПриемНаРаботуРаботники.Подразделение КАК Подразделение,
			|	ПриемНаРаботуРаботники.Должность,
			|	ПриемНаРаботуРаботники.ЗанимаемыхСтавок,
			|	ПриемНаРаботуРаботники.ИспытательныйСрок КАК Примечание
			|ИЗ
			|	Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
			|
			|ГДЕ
			|	ПриемНаРаботуРаботники.Сотрудник.ФизЛицо = &ФизЛицо И
			|	ПриемНаРаботуРаботники.Ссылка.Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КадровоеПеремещениеРаботники.Ссылка,
			|	КадровоеПеремещениеРаботники.Ссылка.Представление,
			|	КадровоеПеремещениеРаботники.Ссылка.Дата,
			|	КадровоеПеремещениеРаботники.ДатаНачала,
			|	КадровоеПеремещениеРаботники.ДатаОкончания,
			|	КадровоеПеремещениеРаботники.НовоеПодразделение,
			|	КадровоеПеремещениеРаботники.НоваяДолжность,
			|	КадровоеПеремещениеРаботники.ЗанимаемыхСтавок,
			|	NULL
			|ИЗ
			|	Документ.КадровоеПеремещение.Работники КАК КадровоеПеремещениеРаботники
			|
			|ГДЕ
			|	КадровоеПеремещениеРаботники.Сотрудник.ФизЛицо = &ФизЛицо И
			|	КадровоеПеремещениеРаботники.Ссылка.Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	УвольнениеРаботники.Ссылка,
			|	УвольнениеРаботники.Ссылка.Представление,
			|	УвольнениеРаботники.Ссылка.Дата,
			|	УвольнениеРаботники.ДатаУвольнения,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	УвольнениеРаботники.ПричинаУвольнения
			|ИЗ
			|	Документ.Увольнение.Работники КАК УвольнениеРаботники
			|
			|ГДЕ
			|	УвольнениеРаботники.Сотрудник.ФизЛицо = &ФизЛицо И
			|	УвольнениеРаботники.Ссылка.Проведен
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата";
			СтруктураДанных.Вставить("ПеремещенияВКомпании", Запрос.Выполнить().Выбрать());
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтсутствиеНаРаботеРаботники.ДатаНачала КАК ДатаС,
			|	ОтсутствиеНаРаботеРаботники.ДатаОкончания КАК ДатаПо,
			|	ОтсутствиеНаРаботеРаботники.Ссылка.Дата КАК Дата,
			|	ОтсутствиеНаРаботеРаботники.Ссылка.Представление,
			|	ОтсутствиеНаРаботеРаботники.ПричинаОтсутствия,
			|	ВЫБОР  КОГДА ОтсутствиеНаРаботеРаботники.ПричинаОтсутствия = &Командировка ТОГДА ""Командировка"" КОГДА ОтсутствиеНаРаботеРаботники.ПричинаОтсутствия = &Болезнь ТОГДА ""Болезнь"" ИНАЧЕ ""Отпуск"" КОНЕЦ КАК ВидОтсутствия
			|ИЗ
			|	Документ.ОтсутствиеНаРаботе.Работники КАК ОтсутствиеНаРаботеРаботники
			|
			|ГДЕ
			|	ОтсутствиеНаРаботеРаботники.Сотрудник.ФизЛицо = &ФизЛицо И
			|	ОтсутствиеНаРаботеРаботники.Ссылка.Проведен
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидОтсутствия, Дата";
			СтруктураДанных.Вставить("Отклонения", Запрос.Выполнить().Выбрать());
			
		КонецЕсли; 
		
	КонецЕсли;

	Если НастройкаПравДоступа.ДоступнаРольКадровикаРегл() Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|	РаботникиОрганизацииСрезПоследних.Должность.Представление КАК Должность,
		|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Представление КАК Подразделение,
		|	РаботникиОрганизацииСрезПоследних.Организация.Представление КАК Организация,
		|	РаботникиОрганизацииСрезПоследних.Организация КАК ОрганизацияСсылка,
		|	ВЫБОР
		|				КОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					ТОГДА ""Не работает (уволен)""
		|				ИНАЧЕ ""Работает""
		|	КОНЕЦ КАК Состояние,
		|	РаботникиОрганизацииСрезПоследних.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник.ФизЛицо = &ФизЛицо) КАК РаботникиОрганизацииСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	РаботникиОрганизацииСрезПоследних.Период УБЫВ";
		
		РезультатПоОрганизациям = Запрос.Выполнить(); 
		
		Если Не РезультатПоОрганизациям.Пустой() Тогда
			
			СтруктураДанных.Вставить("Организация", РезультатПоОрганизациям.Выбрать());
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПриемНаРаботуВОрганизациюРаботники.Ссылка КАК Документ,
			|	ПриемНаРаботуВОрганизациюРаботники.Ссылка.Представление,
			|	ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации.Владелец КАК Организация,
			|	ПриемНаРаботуВОрганизациюРаботники.Ссылка.Дата КАК Дата,
			|	ПриемНаРаботуВОрганизациюРаботники.ДатаПриема КАК ДатаС,
			|	ВЫБОР
			|		КОГДА НЕ ПриемНаРаботуВОрганизациюРаботники.НапомнитьПоЗавершении
			|			ТОГДА ПриемНаРаботуВОрганизациюРаботники.ДатаУвольнения
			|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|	КОНЕЦ КАК ДатаПо,
			|	ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации.Представление КАК Подразделение,
			|	ПриемНаРаботуВОрганизациюРаботники.Должность.Представление КАК Должность,
			|	ПриемНаРаботуВОрганизациюРаботники.ЗанимаемыхСтавок,
			|	ПриемНаРаботуВОрганизациюРаботники.ИспытательныйСрок КАК Примечание
			|ИЗ
			|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботники
			|ГДЕ
			|	ПриемНаРаботуВОрганизациюРаботники.Сотрудник.ФизЛицо = &ФизЛицо
			|	И ПриемНаРаботуВОрганизациюРаботники.Ссылка.Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КадровоеПеремещениеОрганизацииРаботники.Ссылка,
			|	КадровоеПеремещениеОрганизацииРаботники.Ссылка.Представление,
			|	КадровоеПеремещениеОрганизацииРаботники.ПодразделениеОрганизации.Владелец,
			|	КадровоеПеремещениеОрганизацииРаботники.Ссылка.Дата,
			|	КадровоеПеремещениеОрганизацииРаботники.ДатаНачала,
			|	ВЫБОР
			|		КОГДА НЕ КадровоеПеремещениеОрганизацииРаботники.НапомнитьПоЗавершении
			|			ТОГДА КадровоеПеремещениеОрганизацииРаботники.ДатаОкончания
			|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|	КОНЕЦ,
			|	КадровоеПеремещениеОрганизацииРаботники.ПодразделениеОрганизации.Представление,
			|	КадровоеПеремещениеОрганизацииРаботники.Должность.Представление,
			|	КадровоеПеремещениеОрганизацииРаботники.ЗанимаемыхСтавок,
			|	NULL
			|ИЗ
			|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацииРаботники
			|ГДЕ
			|	КадровоеПеремещениеОрганизацииРаботники.Сотрудник.ФизЛицо = &ФизЛицо
			|	И КадровоеПеремещениеОрганизацииРаботники.Ссылка.Проведен 
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	УвольнениеИзОрганизацииРаботники.Ссылка,
			|	УвольнениеИзОрганизацииРаботники.Ссылка.Представление,
			|	УвольнениеИзОрганизацииРаботники.Ссылка.Организация,
			|	УвольнениеИзОрганизацииРаботники.Ссылка.Дата,
			|	УвольнениеИзОрганизацииРаботники.ДатаУвольнения,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	УвольнениеИзОрганизацииРаботники.СтатьяКЗОТ.Наименование
			|ИЗ
			|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацииРаботники
			|ГДЕ
			|	УвольнениеИзОрганизацииРаботники.Сотрудник.Физлицо = &ФизЛицо
			|	И УвольнениеИзОрганизацииРаботники.Ссылка.Проведен 
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата
			|ИТОГИ ПО
			|	Организация";
			
			СтруктураДанныхОрганизации.Вставить("ПеремещенияВОрганизации", Запрос.Выполнить());
			
		КонецЕсли;
		
	КонецЕсли; 
	Если Подробно Тогда	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХранилищеДополнительнойИнформации.Наименование КАК ОписаниеДанных,
		|	ХранилищеДополнительнойИнформации.Хранилище КАК Данные
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|
		|ГДЕ
		|	((ВЫРАЗИТЬ(ХранилищеДополнительнойИнформации.Объект КАК Справочник.ФизическиеЛица)) = &ФизЛицо) И
		|	ХранилищеДополнительнойИнформации.ВидДанных = &Изображение";
		
		ВыборкаИзображений = Запрос.Выполнить().Выбрать();
    КонецЕсли;
    
    ВыводитьНаПечать = Ложь;
	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
        ВыводитьНаПечать = Истина;
    КонецЕсли;
    
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ФизическиеЛица_ДанныеПоФизлицу";
	Макет = ПолучитьМакет("ДанныеПоФизлицу");
	Если Подробно Тогда
		ВыборкаОсновноеФото = Результат.Выбрать();
		Если ВыборкаОсновноеФото.Следующий() Тогда
			ДанныеДляФото = ВыборкаОсновноеФото.Данные;
			Если ДанныеДляФото <> Null Тогда
				ФотоНаПропуск = ДанныеДляФото.Получить();
				Если ФотоНаПропуск <> Неопределено Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("ОсновноеФото_Заголовок");
					ТабДокумент.Вывести(ОбластьМакета);
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
					ТабДокумент.НачатьГруппуСтрок("", Не Подробно);
					ОбластьМакета = Макет.ПолучитьОбласть("ОсновноеФото");
					ОбластьМакета.Рисунки.ФотоНаПропуск.Картинка = ФотоНаПропуск;
					ОбластьМакета.Рисунки.ФотоНаПропуск.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии,);
					ОбластьМакета.Параметры.ОписаниеДанных = ВыборкаОсновноеФото.ОписаниеИзображения;
					ТабДокумент.Вывести(ОбластьМакета);
					ТабДокумент.ЗакончитьГруппуСтрок();
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Для Каждого СекцияДанных Из СтруктураДанных Цикл

		ИмяСекции = СекцияДанных.Ключ;
		Если Не Подробно Тогда
			УсловиеВыводаРаскрытойГруппы = Истина
		Иначе
			УсловиеВыводаРаскрытойГруппы = ИмяСекции = "ФизическиеЛица";
		КонецЕсли;
		Выборка = СекцияДанных.Значение;
		Если ИмяСекции = "Отклонения" Тогда

			Пока Выборка.СледующийПоЗначениюПоля("ВидОтсутствия") Цикл
				ИмяСекции = СокрЛП(Выборка.ВидОтсутствия);
				Отбивка = ?(Макет.Области.Найти(ИмяСекции + "_Отбивка") <> Неопределено,Макет.ПолучитьОбласть(ИмяСекции + "_Отбивка"),Макет.ПолучитьОбласть("Отбивка"));
				Если Макет.Области.Найти(ИмяСекции + "_Заголовок") <> Неопределено Тогда
					ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок_ПерваяСтрока");
					ТабДокумент.Вывести(ОбластьМакета);
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
					ТабДокумент.НачатьГруппуСтрок("", Не Подробно);
					ТабДокумент.Вывести(Отбивка);
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
					ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок_Остальное");
					ТабДокумент.Вывести(ОбластьМакета);
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы - ОбластьМакета.ВысотаТаблицы + 1, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
					ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Данные");
					Пока Выборка.Следующий() Цикл
						ОбластьМакета.Параметры.Заполнить(Выборка);
						ТабДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
					ТабДокумент.Вывести(Отбивка);
					ТабДокумент.ЗакончитьГруппуСтрок();
				КонецЕсли;
			КонецЦикла;

		ИначеЕсли ИмяСекции = "КонтактнаяИнформация" и НЕ Выборка.Количество() = 0 Тогда

			СекцияЗаголовка = Макет.ПолучитьОбласть("КонтактнаяИнформация_Заголовок");
			ТабДокумент.Вывести(СекцияЗаголовка);
			ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
			ТабДокумент.НачатьГруппуСтрок("",Не Подробно);
			Отбивка = Макет.ПолучитьОбласть("Отбивка");
			
			СекцияТипаКИ = Макет.ПолучитьОбласть("КонтактнаяИнформация_Тип");
			Пока Выборка.СледующийПоЗначениюПоля("Тип") цикл

				ТабДокумент.Вывести(Отбивка);
				СекцияТипаКИ.Параметры.ТипКИ = Строка(Выборка.Тип) + ":";
				ТабДокумент.Вывести(СекцияТипаКИ);

				СекцияКИ = Макет.ПолучитьОбласть("КонтактнаяИнформация_Данные");
				Пока Выборка.СледующийПоЗначениюПоля("ВидКИ") цикл
					СекцияКИ.Параметры.Заполнить(Выборка);
					ТабДокумент.Вывести(СекцияКИ);
				КонецЦикла;

			КонецЦикла; 

			ТабДокумент.Вывести(Отбивка);
			ТабДокумент.ЗакончитьГруппуСтрок();
			
		ИначеЕсли ИмяСекции = "Организация"  Тогда

			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл

				Отбивка = Макет.ПолучитьОбласть("Отбивка");
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок");
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
				ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
				ТабДокумент.Вывести(Отбивка);
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Данные");
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Вывести(Отбивка);

				Для Каждого СекцияДанныхОрганизации Из СтруктураДанныхОрганизации Цикл
					ИмяСекцииОрганизации = СекцияДанныхОрганизации.Ключ;

					Если ИмяСекцииОрганизации = "Отклонения" Тогда

						ВыборкаОрганизации = СекцияДанныхОрганизации.Значение;
						Пока ВыборкаОрганизации.СледующийПоЗначениюПоля("ВидОтсутствия") Цикл
							ИмяСекцииОрганизации = СокрЛП(ВыборкаОрганизации.ВидОтсутствия);
							Отбивка = ?(Макет.Области.Найти(ИмяСекцииОрганизации + "_Отбивка") <> Неопределено,Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Отбивка"),Макет.ПолучитьОбласть("Отбивка"));
							Если Макет.Области.Найти(ИмяСекцииОрганизации + "_Заголовок") <> Неопределено Тогда
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок_ПерваяСтрока");
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
								ТабДокумент.НачатьГруппуСтрок("", Не Подробно);
								ТабДокумент.Вывести(Отбивка);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок_Остальное");
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы - ОбластьМакета.ВысотаТаблицы + 1, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Данные");
								Пока ВыборкаОрганизации.Следующий() Цикл
									ОбластьМакета.Параметры.Заполнить(ВыборкаОрганизации);
									ТабДокумент.Вывести(ОбластьМакета);
								КонецЦикла;
								ТабДокумент.Вывести(Отбивка);
								ТабДокумент.ЗакончитьГруппуСтрок();
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли Макет.Области.Найти(ИмяСекцииОрганизации + "_Заголовок") <> Неопределено Тогда

                        // Спозиционируемся в выборке "ПеремещенияВОрганизации" на нужной организации
						ВыборкаПеремещенийПоВсемОрганизациям = СекцияДанныхОрганизации.Значение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						ВыборкаПеремещенийПоВсемОрганизациям.Сбросить();
						СтруктураПоиска = Новый Структура("Организация");
						СтруктураПоиска.Организация = Выборка.ОрганизацияСсылка;
						Если ВыборкаПеремещенийПоВсемОрганизациям.НайтиСледующий(СтруктураПоиска) Тогда

							// Выберем кадровые перемещения в рамках организации
							ВыборкаОрганизации = ВыборкаПеремещенийПоВсемОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							Отбивка = ?(Макет.Области.Найти(ИмяСекцииОрганизации + "_Отбивка") <> Неопределено,Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Отбивка"),Макет.ПолучитьОбласть("Отбивка"));
							ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок");
							Если ОбластьМакета.Области.Количество() = 1 Тогда
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
								ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
								ТабДокумент.Вывести(Отбивка);
							Иначе
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок_ПерваяСтрока");
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
								ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
								ТабДокумент.Вывести(Отбивка);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок_Остальное");
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы - ОбластьМакета.ВысотаТаблицы + 1, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
							КонецЕсли;
							ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Данные");
							Пока ВыборкаОрганизации.Следующий() Цикл
								ОбластьМакета.Параметры.Заполнить(ВыборкаОрганизации);
								ТабДокумент.Вывести(ОбластьМакета);
							КонецЦикла;
							ТабДокумент.Вывести(Отбивка);
							ТабДокумент.ЗакончитьГруппуСтрок();
						
						КонецЕсли; 

					КонецЕсли;
					
				КонецЦикла;
				
				ТабДокумент.ЗакончитьГруппуСтрок();

			КонецЦикла;

		ИначеЕсли Макет.Области.Найти(ИмяСекции + "_Заголовок") <> Неопределено и Выборка.Следующий() Тогда

			Отбивка = ?(Макет.Области.Найти(ИмяСекции + "_Отбивка") <> Неопределено,Макет.ПолучитьОбласть(ИмяСекции + "_Отбивка"),Макет.ПолучитьОбласть("Отбивка"));
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок");
			Если ОбластьМакета.Области.Количество() = 1 Тогда
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
				ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
				ТабДокумент.Вывести(Отбивка);
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок_ПерваяСтрока");
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
				ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
				ТабДокумент.Вывести(Отбивка);
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок_Остальное");
				Если ОбластьМакета.Параметры.Количество() = 0 Тогда // раскрашиваем заголовок без выведенных данных
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
				Иначе	
					ОбластьМакета.Параметры.Заполнить(Выборка);
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьМакета);
				Если ОбластьМакета.Параметры.Количество() = 0 Тогда // раскрашиваем заголовок без выведенных данных
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы - ОбластьМакета.ВысотаТаблицы + 1, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
				КонецЕсли;
			КонецЕсли;
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Данные");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			Если ИмяСекции = "ФизическиеЛица" Тогда
				ОбластьМакета.Параметры.МестоРожденияРаботника = РегламентированнаяОтчетность.ПредставлениеМестаРождения(Выборка.МестоРождения);
				Если НЕ ЗначениеЗаполнено(Выборка.Фамилия) Тогда
					Фамилия = " "; Имя = " "; Отчество = " ";
					ОбщегоНазначения.ФамилияИнициалыФизЛица(ЭтотОбъект, Фамилия, Имя, Отчество);
					ОбластьМакета.Параметры.Фамилия = Фамилия;
					ОбластьМакета.Параметры.Имя = Имя;
					ОбластьМакета.Параметры.Отчество = Отчество;
				КонецЕсли;
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			Пока Выборка.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ТабДокумент.Вывести(Отбивка);
			ТабДокумент.ЗакончитьГруппуСтрок();

		КонецЕсли;	
	КонецЦикла;

	Если Подробно Тогда	
		Если ВыборкаИзображений.Следующий() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Фотогалерея_Заголовок");
			ТабДокумент.Вывести(ОбластьМакета);
			ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
			ТабДокумент.НачатьГруппуСтрок("", Не Подробно);
			ОбластьМакета = Макет.ПолучитьОбласть("Фотогалерея");
			ОбластьМакета.Параметры.ОписаниеДанных = ВыборкаИзображений.ОписаниеДанных;
			Фото = ВыборкаИзображений.Данные.Получить();
			Если Фото <> Неопределено Тогда
				ОбластьМакета.Рисунки.Фото.Картинка = Фото;
				ОбластьМакета.Рисунки.Фото.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии,);
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			Пока ВыборкаИзображений.Следующий() Цикл
				ОбластьМакета.Параметры.ОписаниеДанных = ВыборкаИзображений.ОписаниеДанных;
				Фото = ВыборкаИзображений.Данные.Получить();
				ОбластьМакета.Рисунки.Фото.Картинка = ?(Фото <> Неопределено,Фото,Новый Картинка());
				ОбластьМакета.Рисунки.Фото.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии,);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ТабДокумент.ЗакончитьГруппуСтрок();
		КонецЕсли;
    КонецЕсли;
    Если ВыводитьНаПечать Тогда
	    УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент,КоличествоЭкземпляров,НаПринтер, "Данные по: " + Наименование);
    КонецЕсли;

КонецФункции // Печать


#КонецЕсли

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриКопировании(ОбъектКопирования)
	
	Если Не ЭтоГруппа Тогда
		
		ОсновноеИзображение = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Если Клиент Тогда

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ДанныеПоФизлицу","Данные по физлицу");

КонецФункции // ПолучитьТаблицуПечатныхФорм()

Процедура ПриЗаписи(Отказ)
	
	НастройкаПравДоступа.ОбновитьПраваДоступаКИерархическимОбъектамПриНеобходимости(Ссылка, ПрошлыйИзмененныйРодительОбъектаДоступа, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПрошлыйИзмененныйРодительОбъектаДоступа = ?(Не ЭтоНовый() и Не Ссылка.Родитель = Родитель, Ссылка.Родитель, Неопределено);
	НастройкаПравДоступа.ПередЗаписьюНовогоОбъектаСПравамиДоступаПользователей(ЭтотОбъект, Отказ, Родитель);
	
КонецПроцедуры

#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;
