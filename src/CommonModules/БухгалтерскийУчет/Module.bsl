
// Формирует структуру с вложенной таблицой на основании таблицы(дерева) значений
Функция ПреобразоватьТаблицуЗначенийВСтруктуру(ТаблицаЗначений,СтруктураОбщихРеквизитов,ФормироватьВложеннуюТаблицу,СтруктураКолонок = Неопределено,КоллекцияКолонокДереваЗначений=Неопределено)Экспорт
	НоваяСтруктура = новый структура();
	
	Для каждого ОбщийРеквизит из СтруктураОбщихРеквизитов цикл
		НоваяСтруктура.Вставить(?(НЕ ЗначениеЗаполнено(ОбщийРеквизит.Значение),ОбщийРеквизит.Ключ,ОбщийРеквизит.Значение),
			?(ТаблицаЗначений.Количество()>0,ТаблицаЗначений[0][ОбщийРеквизит.Ключ],Неопределено));
	КонецЦикла;
	Если ФормироватьВложеннуюТаблицу тогда
		Если НЕ ЗначениеЗаполнено(СтруктураКолонок) тогда
			СтруктураКолонок = новый Структура();
			Для каждого СтараяКолонка из ТаблицаЗначений.Колонки Цикл
				Если СтруктураОбщихРеквизитов.Свойство(СтараяКолонка.Имя) тогда
					Продолжить;
				Иначе
					СтруктураКолонок.Вставить(СтараяКолонка.Имя);
				Конецесли;
			КонецЦикла;
		КонецЕсли;
		Если СтруктураКолонок.Количество()=0 тогда
			НоваяТаблица =новый ТаблицаЗначений();
		Иначе
			НоваяТаблица = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаЗначений, СтруктураКолонок,,Истина,КоллекцияКолонокДереваЗначений);
		КонецеслИ;
		НоваяСтруктура.Вставить("Таблица",НоваяТаблица);
	Конецесли;
	Возврат НоваяСтруктура;
КонецФункции

// Функция возвращает остаток по счету бухгалтерского учета
// Возвращаемое значение - таблица значений в развороте по аналитике с учетом фильтра
Функция ПолучитьОстатокПоСчету(Организация,Период,Счет,Валюта=Неопределено ,Субконто1=Неопределено, Субконто2=Неопределено,Субконто3=Неопределено,ЗнакФильтрПоОстаткам=0) Экспорт

	СчетМетаданные = Счет.Метаданные();
	ВидПланаСчетов = СчетМетаданные.Имя;

	Субконто    = Новый Массив(3);
	Субконто[0] = Субконто1;
	Субконто[1] = Субконто2;
	Субконто[2] = Субконто3;

	ФильтрПоСубконто = "";

	Для Каждого ТекВидСубконто Из Счет.ВидыСубконто Цикл
		Если НЕ ТекВидСубконто.ТолькоОбороты И НЕ Субконто[ТекВидСубконто.НомерСтроки-1] = Неопределено Тогда
			ФильтрПоСубконто = ФильтрПоСубконто + " И Субконто" + ТекВидСубконто.НомерСтроки + " = &Субконто" + ТекВидСубконто.НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ВыбиратьВалюту			= (не СчетМетаданные.ПризнакиУчета.Найти("Валютный")= Неопределено);
	ВыбиратьВалютнуюСумму	= БухгалтерскийУчетПовтИсп.ВыбиратьВалютнуюСуммуПланаСчетов(ВидПланаСчетов);
	ОтборПоОрганизации		= БухгалтерскийУчетПовтИсп.ОтборПоОрганизацииПланаСчетов(ВидПланаСчетов);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"      , Период);
	Запрос.УстановитьПараметр("Счет"        , Счет);
	Запрос.УстановитьПараметр("Организация" , Организация);
	Запрос.УстановитьПараметр("Субконто1"   , Субконто[0]);
	Запрос.УстановитьПараметр("Субконто2"   , Субконто[1]);
	Запрос.УстановитьПараметр("Субконто3"   , Субконто[2]);
	Запрос.УстановитьПараметр("Валюта"      , Валюта);
	ВидыСубконто = Счет.ВидыСубконто.ВыгрузитьКолонку("ВидСубконто");
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	ЗнакОстатков = ?(ТипЗнч(ЗнакФильтрПоОстаткам) = Тип("Число"), ЗнакФильтрПоОстаткам, 0);
	Запрос.УстановитьПараметр("Множитель", ?(ЗнакОстатков < 0, -1, 1));
	
	КоличествоСубконто = ВидыСубконто.Количество();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Счет,"
	+ ?(КоличествоСубконто > 0, " 
	|	Субконто1,", "НЕОПРЕДЕЛЕНО КАК Субконто1,")
	+ ?(КоличествоСубконто > 1, " 
	|	Субконто2,", "НЕОПРЕДЕЛЕНО КАК Субконто2,")
	+ ?(КоличествоСубконто > 2, " 
	|	Субконто3,", "НЕОПРЕДЕЛЕНО КАК Субконто3,")
	+ "
	|	ЕСТЬNULL(СуммаОстаток, 0) * &Множитель КАК СуммаОстаток"
	+ ?(ВыбиратьВалюту, ", 
	|	ЕСТЬNULL(Валюта, НЕОПРЕДЕЛЕНО) КАК Валюта", "")
	+ ?(ВыбиратьВалютнуюСумму, ", 
	|	ЕСТЬNULL(ВалютнаяСуммаОстаток, 0)  * &Множитель КАК ВалютнаяСуммаОстаток", ",
	|	ЕСТЬNULL(СуммаОстаток, 0)  * &Множитель КАК ВалютнаяСуммаОстаток")
	+ "
	|ИЗ
	|	РегистрБухгалтерии." + ВидПланаСчетов + ".Остатки(&Период, Счет = &Счет, &ВидыСубконто, #Фильтр#) КАК Остатки"
	+ ?(ЗнакОстатков <> 0, "
	|
	|ГДЕ
	|	"
	+ ?(НЕ ЗначениеЗаполнено(Валюта), 
	"ЕСТЬNULL(Остатки.СуммаОстаток, 0) * &Множитель > 0", "ЕСТЬNULL(Остатки.ВалютнаяСуммаОстаток, 0) * &Множитель > 0"), "")
	+ "
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3"
	+ ?(ВыбиратьВалюту,",
	|	Валюта","");
		
	Фильтр = "";
	Если ОтборПоОрганизации Тогда
		Фильтр = Фильтр + " И Организация = &Организация";
	КонецЕсли;
	Если ЗначениеЗаполнено(Валюта) И Счет.Валютный Тогда
		Фильтр = Фильтр + " И Валюта = &Валюта";
	ИначеЕсли ВыбиратьВалюту Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕСТЬNULL(Валюта, НЕОПРЕДЕЛЕНО)", "НЕОПРЕДЕЛЕНО");
	КонецЕсли;
	Фильтр = Фильтр + ФильтрПоСубконто;
	Если Не ПустаяСтрока(Фильтр) Тогда // Убираем первое "И"
		Фильтр = Сред(Фильтр, 3);
	КонецЕсли;
	
	Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
				
		СтруктураПараметровБлокировки = Новый Структура(
			"ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		СтруктураЗначенийБлокировки   = Новый Структура;
		
		Если ТипЗнч(Период) = Тип("МоментВремени") Тогда
			СтруктураЗначенийБлокировки.Вставить("Период", Период.Дата); 
		ИначеЕсли ТипЗнч(Период) = Тип("Дата") Тогда
			СтруктураЗначенийБлокировки.Вставить("Период", Период); 
		КонецЕсли; 
		СтруктураЗначенийБлокировки.Вставить("Счет", Счет); 
		Если ОтборПоОрганизации Тогда
			СтруктураЗначенийБлокировки.Вставить("Организация", Организация); 
		КонецЕсли;
		Если ЗначениеЗаполнено(Валюта) И Счет.Валютный Тогда
			СтруктураЗначенийБлокировки.Вставить("Валюта", Валюта); 
		КонецЕсли;
		Для Каждого ТекВидСубконто Из Счет.ВидыСубконто Цикл
			Если НЕ ТекВидСубконто.ТолькоОбороты И НЕ Субконто[ТекВидСубконто.НомерСтроки-1] = Неопределено Тогда
				СтруктураЗначенийБлокировки.Вставить("Субконто"+ ТекВидСубконто.НомерСтроки, Субконто[ТекВидСубконто.НомерСтроки-1]); 
			КонецЕсли;
		КонецЦикла;
		
		Отказ     = Ложь;
		Заголовок = "";
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, , Отказ, Заголовок);
				
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Фильтр#", Фильтр);	
	
	Остатки = Запрос.Выполнить().Выгрузить();

	Возврат Остатки;

КонецФункции // ПолучитьОстатокПоСчету()

// Процедура удаляет из набора записи в зависимости от вида регламентной операции
//
Процедура ЗачиститьНаборЗаписейОтРегламентныхОпераций(НаборЗаписей, МассивРегОпераций, ИмяРеквизита = "ВидРегламентнойОперации") Экспорт
	
	Если НаборЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВсегоЗаписей = (НаборЗаписей.Количество());

	Для Индекс = 1 по ВсегоЗаписей Цикл
		
		ЗначениеРеквизита = НаборЗаписей[ВсегоЗаписей - Индекс][ИмяРеквизита];
		Если МассивРегОпераций.Найти(ЗначениеРеквизита) <> Неопределено Тогда
			НаборЗаписей.Удалить(ВсегоЗаписей - Индекс);
		КонецЕсли;

	КонецЦикла;

Конецпроцедуры // ЗачиститьНаборЗаписейОтРегламентныхОпераций()

// Функция формирует конец периода формирования отчета.
//
Функция КонецПериодаОтчета(КонДата) Экспорт
	
	Возврат ?(КонДата = Дата('00010101000000'), КонДата, КонецДня(КонДата));
	
КонецФункции // КонецПериодаОтчета()

// Если в переданном поле ввода предполагается вводить элемент спр-ка
//  ПодразделенияОрганизаций или БанковскиеСчета, то в качестве владельца
//  будущего значения указывается Организация документа
//
// Параметры
//  Элемент - поле ввода значения субконто
//
// Возвращаемое значение:
//   нет
//
Процедура УказатьВладельцаПолюВвода(Элемент, Владелец) Экспорт

	ОписаниеТипа = Элемент.ОграничениеТипа;
	Если ОписаниеТипа.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) или
		ОписаниеТипа.СодержитТип(Тип("СправочникСсылка.БанковскиеСчета")) Тогда
		Элемент.ВыборПоВладельцу = Владелец
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает субконто на счете. Если такое субконто не счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - вид субконто
//		Номер или имя установливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто, Сообщать = Ложь, Заголовок = "", ВидыСубконтоСчета = Неопределено) Экспорт

	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если ВидыСубконтоСчета = Неопределено Тогда
	     ВидыСубконтоСчета = Счет.ВидыСубконто;
	КонецЕсли; 

	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда
		Если ИмяСубконто > ВидыСубконтоСчета.Количество() Тогда
			Возврат;
		КонецЕсли;
		ВидСубк = ВидыСубконтоСчета[ИмяСубконто - 1].ВидСубконто;
	Иначе
		Если ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Международный") Тогда	
			ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоМеждународные[ИмяСубконто];
		Иначе
			ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто];
		КонецЕсли;
		Если ВидыСубконтоСчета.Найти(ВидСубк) = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубк, ЗначениеСубконто);
	ИначеЕсли Сообщать Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Неверное значение """ + ЗначениеСубконто + """ для вида субконто <" + ВидСубк + ">",, Заголовок);
	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

Функция ОпределитьВидСубконтоПоСчету(Счет, КэшВидовСубконтоПоСчетам) Экспорт
	Если Счет = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если КэшВидовСубконтоПоСчетам = Неопределено Тогда
		КэшВидовСубконтоПоСчетам = Новый Соответствие;
	КонецЕсли; 
	
	ВидыСубконтоПоСчету = КэшВидовСубконтоПоСчетам[Счет];
	Если ВидыСубконтоПоСчету = Неопределено Тогда
		ВидыСубконтоПоСчету = Счет.ВидыСубконто;
		КэшВидовСубконтоПоСчетам.Вставить(Счет, ВидыСубконтоПоСчету);
	КонецЕсли; 
	
	Возврат ВидыСубконтоПоСчету;
	
КонецФункции

// Функция предназначена для определения названия объекта
// учета по его счету учета. Название объекта выдается в родительном падеже
Функция ПолучитьНазваниеОбъекта(СчетУчета) Экспорт
	
	Если Лев(СчетУчета.Код, 1) = "0" Тогда
		СчетУчетаКод = СокрЛП(Лев(СчетУчета.Код, 3));
		Если Лев(СчетУчетаКод, 2) = "01" ИЛИ Лев(СчетУчетаКод, 2) = "08" Тогда
			СчетУчетаКод = Лев(СчетУчетаКод, 2);
		КонецЕсли;
	Иначе
		СчетУчетаКод = Лев(СчетУчета.Код, 2);
	КонецЕсли; 
	
	Если СчетУчетаКод = "20" Тогда	
	
		Возврат "материалов";	

	ИначеЕсли СчетУчетаКод = "23" Тогда	
			Возврат "продукции для давальца";
		
	ИначеЕсли СчетУчетаКод = "25" Тогда
		
			Возврат "полуфабрикатов";
			
	ИначеЕсли СчетУчетаКод = "28" Тогда		
		
		Если Лев(СчетУчета.Код, 3) = "284" Тогда
			Возврат "возвратной тары";
		Иначе	
			Возврат "товаров";
		КонецЕсли;	
			
	ИначеЕсли СчетУчетаКод = "26" Тогда
		
			Возврат "продукции";
			
		
	ИначеЕсли СчетУчетаКод = "01" Тогда
		
			Возврат "арендованных основных средств";
		
	ИначеЕсли СчетУчетаКод = "023" Тогда
		
			Возврат "товаров на ответственное хранение";
			
	ИначеЕсли СчетУчетаКод = "022" Тогда
		
			Возврат "материалов в переработку";
			
	ИначеЕсли СчетУчетаКод = "024" Тогда
		
			Возврат "товаров комитента";
			
	ИначеЕсли СчетУчетаКод = "021" Тогда
		
			Возврат "оборудования для монтажа";
			
	ИначеЕсли СчетУчетаКод = "08" Тогда
		
			Возврат "БСУ";
	
			
	Иначе
			Возврат "";
			
	КонецЕсли;
	
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ИНТЕРФЕЙСОМ ПОЛЬЗОВАТЕЛЯ (ОТСУТСТВУЮТ НА СЕРВЕРЕ И ВО ВНЕШНЕМ СОЕДИНЕНИИ)

#Если Клиент Тогда

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫЗЫВАЕМЫЕ ИЗ ПУНКТОВ МЕНЮ

// Обработка выбора первого субконто и открытие справочника владельца Организации
// него, если он существует.
//
Процедура ОбработатьВыборПервогоСубконто(Элемент, СтандартнаяОбработка, Организация) Экспорт

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);

	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(,Элемент,);

	КонецЕсли;

	Если Не СтандартнаяОбработка Тогда 

		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
		ФормаВыбора.Открыть();

	КонецЕсли;

КонецПроцедуры

// Обработка изменения первого субконто в документах.
//
// Параметры:
//  Элемент  - измененный элемент управления.
//  ДокОбъект - документ, в котором произошло изменение.
//  СписокСубконто - список имен реквизитов субконто, связанных с измененным значением.
//  
Процедура ОбработатьИзменениеСубконто(Элемент, ДокОбъект, СписокСубконто) Экспорт

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда

		Для каждого ТекСубконто из СписокСубконто Цикл
			
			ЗначениеСубконто = ДокОбъект[ТекСубконто.Значение];
			Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
					Если НЕ (ЗначениеСубконто.Владелец = Элемент.Значение) Тогда
						ДокОбъект[ТекСубконто.Значение] = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры


// Функция проверяет возможность использования счета в проводках.
//
// Параметры:
//  Счет     - Проверяемый счет.
//  Сообщать - признак вывода сообщений.
//
// Возвращаемое значение:
//  Булево - возможность использования счета в проводках
//  
//
Функция СчетМожноИспользоватьВПроводках(Счет, Сообщать = Истина) Экспорт

	Если ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Хозрасчетный")
	   И ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Налоговый") Тогда
		Возврат Ложь; // Неправильный тип
	КонецЕсли;

	Если Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
		Возврат Истина; // Пустая ссылка может использоваться
	КонецЕсли;

	Если Счет.ЗапретитьИспользоватьВПроводках Тогда

		Если Сообщать Тогда
			Предупреждение("Счет " + СокрЛП(Счет)+" """ + Счет.Наименование + """ нельзя использовать в проводках.");
		КонецЕсли;

		Возврат Ложь; // Счет использовать в проводках нельзя

	КонецЕсли;

	Возврат Истина; // Счет можно использовать в проводках 

КонецФункции // СчетМожноИспользоватьВПроводках()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ

Процедура ОткрытьЖурналПроводок(Ссылка, Регистр = "БУ") Экспорт

	Если Регистр = "БУ" Тогда

		ФормаСписка = РегистрыБухгалтерии.Хозрасчетный.ПолучитьФормуСписка();
		
		Если ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ТипЗначения.СодержитТип(ТипЗнч(Ссылка)) Тогда
			
			// Сбрасываем предыдущие отборы
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Сбросить();
			
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ВидСравнения  = ВидСравнения.Равно;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Значение      = Ссылка;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Использование = Истина;
			
			ФормаСписка.ЭлементыФормы.Список.НастройкаОтбора["Регистратор"].Доступность = Ложь;
			
			ФормаСписка.Открыть();
			
		КонецЕсли;

	Иначе

		//Организация = Ссылка.Организация;

		ФормаСписка = РегистрыБухгалтерии.Налоговый.ПолучитьФормуСписка();

		Если ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ТипЗначения.СодержитТип(ТипЗнч(Ссылка)) Тогда
			
			// Сбрасываем предыдущие отборы
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Сбросить();
			
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ВидСравнения  = ВидСравнения.Равно;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Значение      = Ссылка;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Использование = Истина;
			
			ФормаСписка.ЭлементыФормы.Список.НастройкаОтбора["Регистратор"].Доступность = Ложь;
			
			ФормаСписка.Открыть();
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецЕсли

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УНИВЕРСАЛИЗАЦИИ ПРОМЖУТОЧНЫХ ДАННЫХ

#Если Клиент тогда

// Процедура отрабатывает установку отбора по владельцу-организации 
// для первого субконто.
//
//  Также процедура устанавливает отборы в формах выбора партий номенклатуры, 
// документов расчетов с контрагентами и партий материалов в эксплуатации.
//
// Параметры:
//  Элемент      - элемент управления, для которого устанавливается отбор
//  СтандартнаяОбработка - Булево, признак стандартной обработки выбора
//                 в элементе формы
//  СписокПараметров -СписокЗначений, в котором передаются параметры
//                 отбора для форм выбора партий, документов расчетов
//                 с контрагентами
//  ОграничениеТипаЭлемента - ОписаниеТипов, содержащее список допустимых
//                 типов элемента управления
//
Процедура ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров = Неопределено, ОграничениеТипаЭлемента = Неопределено) Экспорт
	
	Если не ТипЗнч(ОграничениеТипаЭлемента) = Тип("ОписаниеТипов") тогда
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если ТипЭлемента =Неопределено Тогда
			Возврат;
		КонецЕсли; 
		ОграничениеТипаЭлемента = Элемент.ОграничениеТипа;
		
	ИначеЕсли ОграничениеТипаЭлемента.Типы().Количество() >0 тогда
		ТипЭлемента = ОграничениеТипаЭлемента.Типы()[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);

		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение      = Организация;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
		
		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			Если СписокПараметров.Свойство("Контрагент") Тогда
				Если ТипЗнч(СписокПараметров.Контрагент) =  Тип("СправочникСсылка.Контрагенты") Тогда
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение      = СписокПараметров.Контрагент;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 

	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда

		Если не Элемент.ОграничениеТипа.Типы().Количество()=0 Тогда
			ОграничениеТипаЭлемента = Элемент.ОграничениеТипа;
		Иначе
			ОграничениеТипаЭлемента = Элемент.ТипЗначения;
		КонецЕсли; 
		
 		СтандартнаяОбработка = Ложь;

		СтруктураПараметров  = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода,СчетДляОпределенияОстатков, СторонаСчета");

		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда

			ЗаполнитьЗначенияСвойств(СтруктураПараметров,СписокПараметров); 
			СтруктураПараметров.Вставить("Организация", Организация);

			Если СписокПараметров.Свойство("Дата") Тогда
				Если ТипЗнч(СписокПараметров.Дата) = Тип("Дата") Тогда
					СтруктураПараметров.Вставить("КонецПериода", СписокПараметров.Дата - 1);
				КонецЕсли;
			КонецЕсли;

			Если СписокПараметров.Свойство("СчетУчета") Тогда
				СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СписокПараметров.СчетУчета);
			КонецЕсли;

			Если СписокПараметров.Свойство("СторонаПроводки") Тогда
				СтруктураПараметров.Вставить("СторонаСчета", ?(СписокПараметров.СторонаПроводки = "Дт", 1, 0));
			КонецЕсли;
			
			Если СписокПараметров.Свойство("НачалоПериода") Тогда
				СтруктураПараметров.Вставить("НачалоПериода", СписокПараметров.НачалоПериода);
			КонецЕсли;

		КонецЕсли;

		УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, ОграничениеТипаЭлемента);

		Возврат;

	КонецЕсли;

	Если Не СтандартнаяОбработка Тогда 
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры // ОбработатьВыборСубконто()

// Выполняет в табличном поле приведение значений субконто к типу, соответствующему счету
// сведения о счете передаются через параметр СведенияОСчете
// используется для табличных полей, содержащих колонки типа Счет и соответствующие ему субконто
//
// Параметры:
//	ТабличноеПоле 	- табличное поле 
//  ДтКт 			- строка "Дт", "Кт" или "" - часть имени колонки табличного поля
// 					для колонок табличного поля поддерживаются имена 
//					типа СубконтоДт1, СубконтоКт1, Субконто1...
//  СведенияОСчете 	- структура
//					  КоличествоСубконто - число
//                    ТипСубконто1 - описание типа
//                    ТипСубконто2 - описание типа
//                    ТипСубконто3 - описание типа
//					  ВидСубконто1Представление - представление вида субконто - в данной процедуре не используется
//					  ВидСубконто2Представление - представление вида субконто - в данной процедуре не используется
//					  ВидСубконто3Представление - представление вида субконто - в данной процедуре не используется
//
Процедура ПривестиЗначениеСубконто(ТабличноеПоле, ДтКт, СведенияОСчете) Экспорт
	Для СчетчикСубконто = 1 По 3 Цикл
		Если СведенияОСчете.КоличествоСубконто >= СчетчикСубконто Тогда
			ТабличноеПоле.ТекущиеДанные["Субконто"+ДтКт+СчетчикСубконто] = СведенияОСчете["ТипСубконто"+СчетчикСубконто].ПривестиЗначение(ТабличноеПоле.ТекущиеДанные["Субконто"+ДтКт+СчетчикСубконто]);
		Иначе
			ТабличноеПоле.ТекущиеДанные["Субконто"+ДтКт+СчетчикСубконто] = Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры   // ПривестиЗначениеСубконто

// Назначает видимость ячейкам строки табличного поля, соответствующим субконто
// в зависимлсти от счета. Сведения о счете передаются через параметр СведенияОСчете
// Используется для табличных полей, содержащих колонки типа Счет и соответствующие ему субконто
// при выводе строки
//
// Параметры:
//	ОформлениеСтроки 	- оформление строки
//  ДтКт 				- строка "Дт", "Кт" или "" - часть имени колонки табличного поля
// 						для колонок табличного поля поддерживаются имена 
//						типа СубконтоДт1, СубконтоКт1, Субконто1...
//  СведенияОСчете 		- структура
//					  	КоличествоСубконто - число
//                    	ТипСубконто1 - описание типа
//                    	ТипСубконто2 - описание типа
//                    	ТипСубконто3 - описание типа
//					    ВидСубконто1Представление - представление вида субконто - в данной процедуре не используется
//					    ВидСубконто2Представление - представление вида субконто - в данной процедуре не используется
//					    ВидСубконто3Представление - представление вида субконто - в данной процедуре не используется
//
Процедура НазначитьВидимостьСубконто(ОформлениеСтроки, ДтКт, СведенияОСчете, СведенияОСтатьеЗатрат = Неопределено) Экспорт
	Для СчетчикСубконто = 1 По 3 Цикл
		ОформлениеСтроки.Ячейки["Субконто"+ДтКт+СчетчикСубконто].Видимость = СведенияОСчете.КоличествоСубконто >= СчетчикСубконто;
	КонецЦикла;
	Если СведенияОСтатьеЗатрат <> Неопределено И ОформлениеСтроки.Ячейки.Найти("СпособРаспределенияЗатрат") <> Неопределено Тогда
		ОформлениеСтроки.Ячейки.СпособРаспределенияЗатрат.Видимость = СведенияОСтатьеЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
	КонецЕсли;
КонецПроцедуры

#КонецЕсли

// Функция формирует список счетов (список значений), включая субсчета, входящие в иерархию.
//
// Параметры
//  ПланСчетов      - имя плана счетов
//  СчетаСтрокой    - строка, содержащая список кодов счетов, разделенных запятыми
//  ИсключитьГруппы - булево, исключать из массива счетов счета-группы или нет
//
// Возвращаемое значение
//  Список значений, содержащий счета выбранного плана счетов
Функция ПолучитьМассивСчетов(ИмяПланаСчетов, Знач СчетаСтрокой = "", ИсключитьГруппы = Ложь) Экспорт

	МассивСчетов = Новый Массив;
	
	// Преобразуем переданную строку в массив ссылок на план счетов
	СчетаСтрокой = СтрЗаменить(СчетаСтрокой, " ", "");
	Пока Не ПустаяСтрока(СчетаСтрокой) Цикл

		// Определим код очередного счета
		Поз = Найти(СчетаСтрокой, ",");
		Если Поз = 0 Тогда
			Код = СчетаСтрокой;
			СчетаСтрокой = "";
		Иначе
			Код = Лев(СчетаСтрокой, Поз - 1);
			СчетаСтрокой = Сред(СчетаСтрокой, Поз + 1);
		КонецЕсли;

		// Определим ссылку на счет по коду
		Счет = ПланыСчетов[ИмяПланаСчетов].НайтиПоКоду(Код);
		Если НЕ ЗначениеЗаполнено(Счет) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не найден счет с кодом """ + Код + """ (план счетов - " + ИмяПланаСчетов + ")");
			Продолжить;
		КонецЕсли;

		МассивСчетов.Добавить(Счет);

	КонецЦикла;

	// Подготовим текст запроса
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.%ПланСчетов% КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка В ИЕРАРХИИ (&МассивСчетов) И %ВключатьГруппы%
	|";
	
	Если ИсключитьГруппы Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВключатьГруппы%", 
		"ПланСчетов.Ссылка НЕ В (
		| 	ВЫБРАТЬ
		|		ПланСчетов.Родитель
		|	ИЗ
		|		ПланСчетов.%ПланСчетов% КАК ПланСчетов
		|	ГДЕ
		|		ПланСчетов.Ссылка В ИЕРАРХИИ (&МассивСчетов)
		|)");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВключатьГруппы%", "Истина");
		
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПланСчетов%", ИмяПланаСчетов);
	
	Запрос = Новый Запрос(ТекстЗапроса);

	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);

	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));

	Возврат СписокСчетов;

КонецФункции //ПолучитьМассивСчетов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПЕЧАТИ ОТЧЕТОВ ПО РЕГЛАМЕНТНЫМ ОПЕРАЦИЯМ

Процедура ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента, ТаблицаДвижений, ВспомогательныйРегистр, СтрокаГруппировки,СтрокаСуммирования) Экспорт
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ПериодРасчета");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "Регистратор");
	ТаблицаДвижений.Свернуть(СтрокаГруппировки,СтрокаСуммирования);
	ВспомогательныйРасчет = ВспомогательныйРегистр.СоздатьНаборЗаписей();
	ВспомогательныйРасчет.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	ВспомогательныйРасчет.Прочитать();
	ВспомогательныйРасчет.Загрузить(ТаблицаДвижений);
	ВспомогательныйРасчет.Записать();
КонецПроцедуры

Процедура ПечатьСправкиРасчета(Объект, СтруктураШапкиДокумента, ВариантОтчета = 1) Экспорт
	
	СправкаРасчет = Объект.Создать();
	ФормаОбъекта = СправкаРасчет.ПолучитьФорму();
	СправкаРасчет.ИспользоватьИнуюНастройку = Истина;
	СправкаРасчет.Организация = СтруктураШапкиДокумента.Организация;
	СправкаРасчет.ПериодРегистрации = КонецМесяца(СтруктураШапкиДокумента.Дата);
	СправкаРасчет.ВариантОтчета = ВариантОтчета;
	ФормаОбъекта.Открыть();
КонецПроцедуры

Процедура УстановитьСубконтоПоВидуСубконто(Счет, Субконто, ВидСубконто, ЗначениеСубконто) Экспорт

	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если Счет.ВидыСубконто.Найти(ВидСубконто) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Неверное значение """ + ЗначениеСубконто + """ для вида субконто <" + ВидСубконто + ">");
	КонецЕсли;

КонецПроцедуры // УстановитьСубконтоПоВидуСубконто()

// Функция возвращает количество для записи в проводку
// Если на счете не ведется количественный учет, то возвращается 0
//
// Параметры:
// 		Счет - счет проводки
//      Количество - количество для проводки
//		
// Возврат:
//		Количество для записи в проводку
//
Функция КоличествоВПроводку(Счет, Количество) Экспорт
	
	Если Не Счет.Пустая() 
	   И Счет.Количественный Тогда
		Возврат Количество;
		
	Иначе
		Возврат 0;
		
	КонецЕсли;

КонецФункции // КоличествоВПроводку()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Эта функция возвращает информацию о статье затрат как субконто счета по данным строки табличного поля
// Если в соответствии не найдена информация о статье - она подготавливается и 
// помещается в соответсвие
// Применяется для работы с формами в которых активно требуется получать 
// информацию о статьях, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОСтатьяхЗатрат - соответсвие у котрого в качестве ключа - СправочникСсылка, а 
//  				  	в качестве значения - структура из одного элемента 
//						ХарактерЗатрат типа ПеречислениеСсылка.ХарактерЗатрат
//
//	ДанныеСтроки - данные строки
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОСтатьеЗатратПоСтроке(СведенияОСтатьяхЗатрат, ДтКт, ДанныеСтроки) Экспорт
	ТипСтатьяЗатратСсылка = Тип("СправочникСсылка.СтатьиЗатрат");
	Для СчетчикСубконто = 1 По 3 Цикл
		Если ТипЗнч(ДанныеСтроки["Субконто"+ДтКт+СчетчикСубконто]) = ТипСтатьяЗатратСсылка Тогда
			Возврат ПолучитьСведенияОСтатьеЗатрат(СведенияОСтатьяхЗатрат, ДанныеСтроки["Субконто"+ДтКт+СчетчикСубконто]);
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// локальная функция для использования в ПолучитьСведенияОСтатьеЗатратПоСтроке
Функция ПолучитьСведенияОСтатьеЗатрат(СведенияОСтатьяхЗатрат, СтатьяЗатрат) Экспорт
	СведенияОСтатьеЗатрат = СведенияОСтатьяхЗатрат[СтатьяЗатрат];
	Если СведенияОСтатьеЗатрат = Неопределено Тогда
		СведенияОСтатьеЗатрат = Новый Структура("ХарактерЗатрат");
		СведенияОСтатьеЗатрат.ХарактерЗатрат = СтатьяЗатрат.ХарактерЗатрат;
		СведенияОСтатьяхЗатрат[СтатьяЗатрат] = СведенияОСтатьеЗатрат;
	КонецЕсли;
	Возврат СведенияОСтатьеЗатрат;
КонецФункции

//Процедура предназначена для сворачивания набора записей регистра бухгалтерии "Хозрасчетный":
//1) Формирует исходные данные для сворачивания:  
//  	список колонок для группировки и для суммирования
//2) Вызывает универсальную процедуру сворачивания набора записей
//Параметры: НаборЗаписейРегистраБухгалтерии, тип - набор записей регистров бухгалтерии Хозрасчетный
Процедура СвернутьНаборЗаписейРегистраБухгалтерии(НаборЗаписейРегистраБухгалтерии) Экспорт
	//колонки таблицы значений, которые будут суммироваться
	СтрокаСуммирование = "Сумма, СуммаНУДт, СуммаНУКт, КоличествоДт, КоличествоКт, ВалютнаяСуммаДт, ВалютнаяСуммаКт";
    //колонки таблицы значений, по которым будет выполняться группировка
	СтрокаГруппировка = "Период, Регистратор, Активность, Организация, "+
		"СчетДт, СчетКт, ВидРегламентнойОперации, МоментВремени, "+
		"Содержание, НомерЖурнала, СписаниеПартий, ДатаЗаписи, СчетДополнительный, "+
		"ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, "+
		"СубконтоДт1, СубконтоДт2, СубконтоДт3, "+
		"ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, "+
		"СубконтоКт1, СубконтоКт2, СубконтоКт3,"+
		"НалоговоеНазначениеДт, НалоговоеНазначениеКт,"+
		"ВалютаДт, ВалютаКт";
	
	ОбщегоНазначения.СвернутьНаборЗаписейРегистраБухгалтерии(НаборЗаписейРегистраБухгалтерии,СтрокаГруппировка,СтрокаСуммирование);
КонецПроцедуры 

// Проверяет используются счета-классы в качестве групп и возвращает признак.
//
Функция ПолучитьИспользоватьКлассыСчетовВКачествеГрупп() Экспорт
	
	ЗапросКлассыСчетов = Новый Запрос;
	ЗапросКлассыСчетов.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                           |	Хозрасчетный.Ссылка
	                           |ИЗ
	                           |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	                           |ГДЕ
	                           |	Хозрасчетный.Родитель = &Родитель";
	ЗапросКлассыСчетов.УстановитьПараметр("Родитель",ПланыСчетов.Хозрасчетный.НеоборотныеАктивы);
	Возврат ЗапросКлассыСчетов.Выполнить().Выбрать().Количество()>0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Эта функция возвращает информацию о счете из переданного соответсвия
// Если в соответствии не найдена информация о счете - она подготавливается и 
// помещается в соответсвие
// Применяется для работы с формами в которых активно требуется получать 
// информащцию о счетах, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОСчетах - соответсвие у котрого в качестве ключа - ПланСчетовСсылка, а 
//  				  в качестве значения - структура из элементов
//					  КоличествоСубконто - число
//                    ТипСубконто1 - описание типа
//                    ТипСубконто2 - описание типа
//                    ТипСубконто3 - описание типа
//					  ВидСубконто1Представление - представление вида субконто
//					  ВидСубконто2Представление - представление вида субконто
//					  ВидСубконто3Представление - представление вида субконто
//
//	Счет - ПланСчетовСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОСчете(СведенияОСчетах, Счет) Экспорт

	СведенияОСчете = СведенияОСчетах[Счет];

	Если СведенияОСчете = Неопределено Тогда

		СведенияОСчете = Новый Структура("КоличествоСубконто, ВидСубконто1, ВидСубконто2, ВидСубконто3, ТипСубконто1, ТипСубконто2, ТипСубконто3, ВидСубконто1Представление, ВидСубконто2Представление, ВидСубконто3Представление");

		СведенияОСчете.КоличествоСубконто = Счет.ВидыСубконто.Количество();

		Если СведенияОСчете.КоличествоСубконто > 0 Тогда

			ВидСубконто = Счет.ВидыСубконто[0].ВидСубконто;

			СведенияОСчете.ВидСубконто1              = ВидСубконто;
			СведенияОСчете.ТипСубконто1              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто1Представление = ВидСубконто.Наименование;

		КонецЕсли;

		Если СведенияОСчете.КоличествоСубконто > 1 Тогда

			ВидСубконто = Счет.ВидыСубконто[1].ВидСубконто;

			СведенияОСчете.ВидСубконто2              = ВидСубконто;
			СведенияОСчете.ТипСубконто2              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто2Представление = ВидСубконто.Наименование;

		КонецЕсли;

		Если СведенияОСчете.КоличествоСубконто > 2 Тогда

			ВидСубконто = Счет.ВидыСубконто[2].ВидСубконто;

			СведенияОСчете.ВидСубконто3              = ВидСубконто;
			СведенияОСчете.ТипСубконто3              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто3Представление = ВидСубконто.Наименование;

		КонецЕсли;

		СведенияОСчетах[Счет] = СведенияОСчете;

	КонецЕсли;

	Возврат СведенияОСчете;

КонецФункции  // ПолучитьСведенияОСчете

// Функция получает значение субконто счета по имени субконто.
//
Функция ПолучитьЗначениеСубконтоБух(Счет, ИмяСубк, Субк1, Субк2, Субк3) Экспорт 
	
	СубконтоСчета = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубк]);
	Если СубконтоСчета = Неопределено Тогда
		Возврат Неопределено; // Нет такого субконто на данном счете
	КонецЕсли;
	
	Если СубконтоСчета.НомерСтроки = 1 Тогда
		Возврат Субк1;
	ИначеЕсли СубконтоСчета.НомерСтроки = 2 Тогда
		Возврат Субк2;
	ИначеЕсли СубконтоСчета.НомерСтроки = 3 Тогда
		Возврат Субк3;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьЗначениеСубконтоБух()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СПОСОБАМИ ОТРАЖЕНИЯ В УЧЕТЕ


// Функция получает данные способа отраженния
//
// Параметры
//  <СпособОтражения>  – <СправочникСсылка.Способы отраженияЗарплатыВРеглУчете> – способ отражения по которому
//						необходимо получить данные
// Возвращаемое значение:
//   Результат запроса
//
Функция ПолучитьХарактеристикуСпособаОтражения(СпособОтражения) Экспорт

	Если СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СпособыОтражения.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА СпособыОтражения.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СчетВыбран,
	|	ВЫБОР
	|		КОГДА СпособыОтражения.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеОтражатьВБухучете,
	|	ВЫБОР
	|		КОГДА СпособыОтражения.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтражениеНачисленийПоУмолчанию
	|ИЗ
	|	Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтражения
	|ГДЕ
	|	СпособыОтражения.Ссылка = &парамСпособОтражения";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСпособОтражения", СпособОтражения);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();


КонецФункции // ПолучитьХарактеристикуСпособаОтражения()


Функция ПолучитьИспользуемыеКлассыСчетовРасходов(Дата, Организация) Экспорт
	
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(Дата, Новый Структура("Организация",Организация));

	Если ПараметрыУчетнойПолитики.Количество()=0 тогда
		
		Возврат Перечисления.КлассыСчетовРасходов.ПустаяСсылка();
		
	Иначе
		
		Возврат ПараметрыУчетнойПолитики[0].ИспользуемыеКлассыСчетовРасходов;
		
	Конецесли;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕОЦЕНКИ ВАЛЮТНЫХ СЧЕТОВ

// Проверяет, является ли курсовая разница по данным счету и субконто операционной
// (есть ли соответствующая запись в регистре НеоперационнаяКурсоваяРазница) 
//
Функция ОперационнаяКурсоваяРазница(СтрокаТаблицы, КвоСубконто)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", СтрокаТаблицы.Счет);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокСчетов.Счет
	|ИЗ
	|	РегистрСведений.НеоперационнаяКурсоваяРазница КАК СписокСчетов
	|ГДЕ
	|	СписокСчетов.Счет = &Счет
	|";
	
	ТекстФильтры = "";
	
	
	Если КвоСубконто >= 0 Тогда
		Запрос.УстановитьПараметр("Субконто1", СтрокаТаблицы.Субконто1);
		Запрос.УстановитьПараметр("Субконто1Пустое", Новый(СтрокаТаблицы.Счет.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]));
		ТекстФильтры = ТекстФильтры+" И (СписокСчетов.Субконто1 = &Субконто1 ИЛИ СписокСчетов.Субконто1 = &Субконто1Пустое)
		|";
	КонецЕсли;
	Если КвоСубконто >= 1 Тогда
		Запрос.УстановитьПараметр("Субконто2", СтрокаТаблицы.Субконто2);
		Запрос.УстановитьПараметр("Субконто2Пустое", Новый(СтрокаТаблицы.Счет.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]));
		ТекстФильтры = ТекстФильтры+" И (СписокСчетов.Субконто2 = &Субконто2 ИЛИ СписокСчетов.Субконто2 = &Субконто2Пустое)
		|";
	КонецЕсли;
	Если КвоСубконто >= 2 Тогда
		Запрос.УстановитьПараметр("Субконто3", СтрокаТаблицы.Субконто3);
		Запрос.УстановитьПараметр("Субконто3Пустое", Новый(СтрокаТаблицы.Счет.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]));
		ТекстФильтры = ТекстФильтры+" И (СписокСчетов.Субконто3 = &Субконто3 ИЛИ СписокСчетов.Субконто3 = &Субконто3Пустое)
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстФильтры;

	СписокСчетов = Запрос.Выполнить().Выбрать();
	
	Операционная = СписокСчетов.Следующий();
	Возврат НЕ Операционная;
	
КонецФункции

// Возвращает структуру счетов для проведния курсовых разниц
//
Функция ПараметрыУчетаКурсовыхРазниц(КлассСчетовРасходов) Экспорт
	
	Запрос = Новый Запрос;
	Если КлассСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9 Тогда
		//Если используются оба класса - берем для 9-го
		КлассСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс9;
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("КлассСчетовРасходов", КлассСчетовРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Параметры.СчетДоходов.НалоговыйУчет КАК СчетДоходов_НалоговыйУчет,
	|	Параметры.СчетЗатрат.НалоговыйУчет КАК СчетЗатрат_НалоговыйУчет,
	|	Параметры.*
	|ИЗ
	|	РегистрСведений.ПараметрыУчетаКурсовыхРазниц КАК Параметры
	|ГДЕ
	|	Параметры.КлассСчетовРасходов = &КлассСчетовРасходов";

	Параметры = Запрос.Выполнить().Выбрать();
	
	СтруктураПараметров = Новый Структура();
	
	Пока Параметры.Следующий() Цикл
		Если Параметры.Операционная Тогда
			СтруктураПараметров.Вставить("СчетДоходовОпер", Параметры.СчетДоходов);
			СтруктураПараметров.Вставить("СчетДоходовОпер_НалоговыйУчет", Параметры.СчетДоходов_НалоговыйУчет);
			СтруктураПараметров.Вставить("Субконто1ДоходовОпер", Параметры.Субконто1Доходов);
			СтруктураПараметров.Вставить("Субконто2ДоходовОпер", Параметры.Субконто2Доходов);
			СтруктураПараметров.Вставить("Субконто3ДоходовОпер", Параметры.Субконто3Доходов);
			СтруктураПараметров.Вставить("СчетЗатратОпер", Параметры.СчетЗатрат);
			СтруктураПараметров.Вставить("СчетЗатратОпер_НалоговыйУчет", Параметры.СчетЗатрат_НалоговыйУчет);
			СтруктураПараметров.Вставить("Субконто1ЗатратОпер", Параметры.Субконто1Затрат);
			СтруктураПараметров.Вставить("Субконто2ЗатратОпер", Параметры.Субконто2Затрат);
			СтруктураПараметров.Вставить("Субконто3ЗатратОпер", Параметры.Субконто3Затрат);
		Иначе
			СтруктураПараметров.Вставить("СчетДоходовНеОпер", Параметры.СчетДоходов);
			СтруктураПараметров.Вставить("СчетДоходовНеОпер_НалоговыйУчет", Параметры.СчетДоходов_НалоговыйУчет);
			СтруктураПараметров.Вставить("Субконто1ДоходовНеОпер", Параметры.Субконто1Доходов);
			СтруктураПараметров.Вставить("Субконто2ДоходовНеОпер", Параметры.Субконто2Доходов);
			СтруктураПараметров.Вставить("Субконто3ДоходовНеОпер", Параметры.Субконто3Доходов);
			СтруктураПараметров.Вставить("СчетЗатратНеОпер", Параметры.СчетЗатрат);
			СтруктураПараметров.Вставить("СчетЗатратНеОпер_НалоговыйУчет", Параметры.СчетЗатрат_НалоговыйУчет);
			СтруктураПараметров.Вставить("Субконто1ЗатратНеОпер", Параметры.Субконто1Затрат);
			СтруктураПараметров.Вставить("Субконто2ЗатратНеОпер", Параметры.Субконто2Затрат);
			СтруктураПараметров.Вставить("Субконто3ЗатратНеОпер", Параметры.Субконто3Затрат);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции	

Функция ПодготовкаСтруктурыПараметровДляПереоценкиСчета(Ссылка,Заголовок = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура("Организация,ВалютаДокумента,КурсДокумента,КратностьДокумента,ДатаОплаты");
	РеквизитыДокумента = Ссылка.Метаданные().Реквизиты;
	Для Каждого Реквизит из СтруктураПараметров Цикл
		СтруктураПараметров.Вставить(Реквизит.Ключ,?(РеквизитыДокумента.найти(Реквизит.Ключ)=Неопределено,Неопределено,Ссылка[Реквизит.Ключ]));
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", глЗначениеПеременной("ВалютаРегламентированногоУчета"));
    СтруктураПараметров.Вставить("Ссылка", Ссылка);
	
	Если Не(БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(Ссылка.Метаданные().Имя).НаправлениеДвижения = Неопределено) тогда
		//Это документы движения денежных средств
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров["ДатаОплаты"]) тогда
			СтруктураПараметров.Вставить("Период",Ссылка.Дата);	
		Иначе
			СтруктураПараметров.Вставить("Период",?(Ссылка.Оплачено,УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Ссылка.Дата,СтруктураПараметров["ДатаОплаты"]),Ссылка.Дата));	
		Конецесли;
	Иначе
		СтруктураПараметров.Вставить("Период",Ссылка.Дата);	
	КонецЕсли;
	СтруктураПараметров.Удалить("ДатаОплаты");	
	
	Если НЕ ЗначениеЗаполнено(Заголовок) тогда
		 Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	КонецЕсли;
	СтруктураПараметров.Вставить("Заголовок",Заголовок);
	//Используем курс из справочника
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ВалютаДокумента) тогда
		СтруктураПараметров.Вставить("ИспользоватьКурсИзСправочника",Истина);
	Иначе
		СтруктураПараметров.Вставить("ИспользоватьКурсИзСправочника",Ложь);
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.КурсДокумента) или НЕ ЗначениеЗаполнено(СтруктураПараметров.КратностьДокумента) тогда
			ДанныеОВалютеДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураПараметров.ВалютаДокумента, СтруктураПараметров.Период);
			СтруктураПараметров.Вставить("КурсДокумента",ДанныеОВалютеДокумента.Курс);	
			СтруктураПараметров.Вставить("КратностьДокумента",ДанныеОВалютеДокумента.Кратность);
		КонецЕсли;
	КонецЕсли;
	
	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураПараметров.Период, СтруктураПараметров.Организация);	
	СтруктураПараметров.Вставить("СчетаУчетаКР", ПараметрыУчетаКурсовыхРазниц(УчетнаяПолитикаРегл.ИспользуемыеКлассыСчетовРасходов));
	СтруктураПараметров.Вставить("ЕстьНалогНаПрибыль", УчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
	
	Возврат СтруктураПараметров;
	
КонецФункции //ПодготовкаСтруктурыПараметровДляПереоценкиСчета 

Функция ПодготовкаСтруктурыПараметровДляПереоценкиСчетаИзРегистраСведений(СтрокаДанных) Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Период",СтрокаДанных["Период"]);
	СтруктураПараметров.Вставить("Регистратор",СтрокаДанных["Регистратор"]);
	СтруктураПараметров.Вставить("Организация",СтрокаДанных["Организация"]);
	СтруктураПараметров.Вставить("ВалютаДокумента",СтрокаДанных["ВалютаДокумента"]);
	СтруктураПараметров.Вставить("КурсДокумента",СтрокаДанных["КурсДокумента"]);
	СтруктураПараметров.Вставить("КратностьДокумента",СтрокаДанных["КратностьДокумента"]);
	СтруктураПараметров.Вставить("Заголовок", СтрокаДанных["Регистратор"]);
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	
	//По умолчанию используем курс из документа, но если валюта не указана - тогда курс из справочника!
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ВалютаДокумента) или
		НЕ ЗначениеЗаполнено(СтруктураПараметров.КурсДокумента) или
		НЕ ЗначениеЗаполнено(СтруктураПараметров.КратностьДокумента) тогда
		СтруктураПараметров.Вставить("ИспользоватьКурсИзСправочника",Истина);
	Иначе
		СтруктураПараметров.Вставить("ИспользоватьКурсИзСправочника",Ложь);
	КонецЕсли;

	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураПараметров.Период, СтруктураПараметров.Организация);
	СтруктураПараметров.Вставить("СчетаУчетаКР", ПараметрыУчетаКурсовыхРазниц(УчетнаяПолитикаРегл.ИспользуемыеКлассыСчетовРасходов));
	СтруктураПараметров.Вставить("ЕстьНалогНаПрибыль", УчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
	
	Возврат СтруктураПараметров;
КонецФункции

// Процедура рассчитывает курсовые разницы и формирует проводки в БУ и НУ
//
Процедура ПереоценкаСчетаРегл(СтруктураПараметров,ПроводкиБУ,СчетПереоценки, ВалютаРегламентированногоУчета,ВставитьПервой=Истина,РассчитыватьОстатки=Истина,ЧастичнаяПереоценка=Ложь) экспорт
	
	//Получение списка и аналитики счетов для переоценки
	ТекСчет="";
	СчетПереоценки.Свойство("Счет",ТекСчет);
	Если НЕ ЗначениеЗаполнено(ТекСчет) Тогда
		Возврат;
	КонецЕсли;
	Если Не(ТекСчет.Валютный) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСчета = РегистрыСведений.НемонетарныеСчета.Выбрать(новый структура("Счет",ТекСчет));
	Если ПараметрыСчета.Следующий() И НЕ ЧастичнаяПереоценка Тогда
		Если НЕ (ПараметрыСчета.ТолькоДебет или ПараметрыСчета.ТолькоКредит) Тогда
			Возврат;
		КонецЕсли;
		НемонетарныйДебет  = ПараметрыСчета.ТолькоДебет;
		НемонетарныйКредит = ПараметрыСчета.ТолькоКредит;
	Иначе
		НемонетарныйДебет  = ложь;
		НемонетарныйКредит = ложь;
	КонецЕсли;	
	
	//Если РегистрыСведений.НемонетарныеСчета.Выбрать(новый структура("Счет",ТекСчет)).Следующий() тогда
	//	Возврат;
	//КонецЕсли;
	
	Организация			= СтруктураПараметров.Организация;
	ВалютаДокумента		= СтруктураПараметров.ВалютаДокумента;
	КурсДокумента		= СтруктураПараметров.КурсДокумента;
	КратностьДокумента	= СтруктураПараметров.КратностьДокумента;
	ДатаДока			= СтруктураПараметров.Период;
	Заголовок			= СтруктураПараметров.Заголовок;
	ИспользоватьКурсИзСправочника = СтруктураПараметров.ИспользоватьКурсИзСправочника;
	
	ДанныеОВалютеРег	= МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ДатаДока);
	
	СчетаУчетаКР        = СтруктураПараметров.СчетаУчетаКР;
	
	ЕстьНалогНаПрибыль = Ложь;
	Если НЕ СтруктураПараметров.Свойство("ЕстьНалогНаПрибыль", ЕстьНалогНаПрибыль) Тогда
		ЕстьНалогНаПрибыль = Ложь;
	КонецЕсли;

	//получение остатков, переоценка валютных счетов
	ОстатокВалРегУчета=0;
	ОстатокИнаяВал=0;
	Если РассчитыватьОстатки тогда
		РеестрОстатков=РегистрыБухгалтерии.Хозрасчетный;
		СтруктураОтбора=новый Структура("Счет",ТекСчет);
		СтруктураОтбора.Вставить("Организация", Организация);
		Если Не (НЕ ЗначениеЗаполнено(ВалютаДокумента)) тогда
			СтруктураОтбора.Вставить("Валюта", ВалютаДокумента);
		КонецЕсли;
	
		Реквизиты="Счет,Валюта";
		ВидыСубконто=Новый массив();
		Для Каждого ТекВидСубконто из ТекСчет.ВидыСубконто цикл
			Если Не(ТекВидСубконто.ТолькоОбороты) тогда
				ВидыСубконто.Добавить(ТекВидСубконто.ВидСубконто);
				Реквизиты=Реквизиты+",Субконто"+(ВидыСубконто.ВГраница()+1);
				ТекЗначениеФильтра="";
				Если СчетПереоценки.Свойство("Субконто"+ТекВидСубконто.НомерСтроки,ТекЗначениеФильтра) тогда
					СтруктураОтбора.Вставить("Субконто"+(ВидыСубконто.ВГраница()+1),ТекЗначениеФильтра);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не(ИспользоватьКурсИзСправочника) тогда
			ДанныеОВалютеОстатка = Новый Структура("Курс,Кратность",КурсДокумента,КратностьДокумента);
		КонецЕсли;
		
		Если ТипЗнч(ПроводкиБУ.Отбор.Регистратор.Значение) = Тип("ДокументСсылка.ПереоценкаВалютныхСредств") Тогда
			МоментДокумента = Новый Граница(ДатаДока, ВидГраницы.Включая);	
		Иначе
			МоментДокумента = Новый МоментВремени(ДатаДока,ПроводкиБУ.Отбор.Регистратор.Значение);
			МоментДокумента = Новый Граница(МоментДокумента, ВидГраницы.Включая);
		КонецЕсли;

		Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
			СтруктураПараметровБлокировка = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
			
			СтруктураЗначенийБлокировки = Новый Структура;
			СтруктураЗначенийБлокировки.Вставить("Организация", 	Организация);
			СтруктураЗначенийБлокировки.Вставить("Период",      	Новый Диапазон(, ДатаДока)); 
			СтруктураЗначенийБлокировки.Вставить("Счет", 		ТекСчет);			
			Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
				СтруктураЗначенийБлокировки.Вставить("Валюта", 	ВалютаДокумента);			
			КонецЕсли;	
				
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировка, СтруктураЗначенийБлокировки, , Ложь, Заголовок);
		КонецЕсли;
		
		РеестрОстатков=РеестрОстатков.Остатки(МоментДокумента,ВидыСубконто,СтруктураОтбора,Реквизиты,"Сумма,ВалютнаяСумма");
		Для каждого Стр из РеестрОстатков цикл
			Если ИспользоватьКурсИзСправочника тогда
				 ДанныеОВалютеОстатка = МодульВалютногоУчета.ПолучитьКурсВалюты(Стр.Валюта,ДатаДока);
			КонецЕсли;
				 
			ОстатокВалРегУчета=Стр.СуммаОстатокДт-Стр.СуммаОстатокКт;
			ОстатокИнаяВал=Стр.ВалютнаяСуммаОстатокДт-Стр.ВалютнаяСуммаОстатокКт;
			РасчетныйОстатокВалРегУчета=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОстатокИнаяВал, Стр.Валюта, ВалютаРегламентированногоУчета,
			ДанныеОВалютеОстатка.Курс, ДанныеОВалютеРег.Курс,ДанныеОВалютеОстатка.Кратность,ДанныеОВалютеРег.Кратность);
				
			Если ОстатокВалРегУчета=РасчетныйОстатокВалРегУчета тогда
				Продолжить;
			КонецЕсли;
			
			Если НемонетарныйДебет И (ОстатокИнаяВал > 0) Тогда
				//Дебет немонетарный, остаток дебетовый - не переоцениваем
				Продолжить;
			ИначеЕсли НемонетарныйКредит И (ОстатокИнаяВал < 0) Тогда
				//Кредит немонетарный, остаток кредитовый - не переоцениваем
				Продолжить;	
			КонецЕсли;	
			
			КурсоваяРазница = РасчетныйОстатокВалРегУчета - ОстатокВалРегУчета;
			
			Если ЧастичнаяПереоценка Тогда
				Если ОстатокИнаяВал <>0 Тогда
					КурсоваяРазница = СчетПереоценки.ВалютныйОстаток/ОстатокИнаяВал*КурсоваяРазница;
				Иначе	
				    КурсоваяРазница = 0
				КонецЕсли;	
			КонецЕсли;	
				
			Операционная = ОперационнаяКурсоваяРазница(Стр, ВидыСубконто.ВГраница());
			
			Если КурсоваяРазница = 0 тогда
				Продолжить;
			КонецЕсли;
			Если (ВставитьПервой) тогда
				Проводка   = ПроводкиБУ.Вставить(0);
			Иначе
				Проводка   = ПроводкиБУ.Добавить();
			КонецЕсли;
			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Переоценка валютных средств";
			Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСчетов;
			Если КурсоваяРазница<0 тогда
				Если Операционная Тогда
					Проводка.СчетДт = СтруктураПараметров.СчетаУчетаКР.СчетЗатратОпер;
					СчетДт_НалоговыйУчет = СчетаУчетаКР.СчетЗатратОпер_НалоговыйУчет;					
					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураПараметров.СчетаУчетаКР.Субконто1ЗатратОпер);
					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураПараметров.СчетаУчетаКР.Субконто2ЗатратОпер);
					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураПараметров.СчетаУчетаКР.Субконто3ЗатратОпер);
				Иначе
					Проводка.СчетДт = СтруктураПараметров.СчетаУчетаКР.СчетЗатратНеОпер;
					СчетДт_НалоговыйУчет = СчетаУчетаКР.СчетЗатратНеОпер_НалоговыйУчет;
					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураПараметров.СчетаУчетаКР.Субконто1ЗатратНеОпер);
					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураПараметров.СчетаУчетаКР.Субконто2ЗатратНеОпер);
					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураПараметров.СчетаУчетаКР.Субконто3ЗатратНеОпер);
				КонецЕсли;	
				Проводка.СчетКт = ТекСчет;
				Для А=0 по ВидыСубконто.ВГраница() Цикл
					Проводка.СубконтоКт.Вставить(ВидыСубконто[А],Стр.получить(РеестрОстатков.Колонки.Индекс(РеестрОстатков.Колонки.Найти("Субконто"+(А+1)))));
				КонецЦикла;
				Проводка.ВалютаКт = Стр.Валюта;
				Проводка.Сумма = -КурсоваяРазница;
				
				Если ЕстьНалогНаПрибыль И СчетДт_НалоговыйУчет Тогда
					Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
					Проводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, Проводка.Сумма);
				КонецЕсли;
				
			Иначе
				Если Операционная Тогда
					Проводка.СчетКт = СтруктураПараметров.СчетаУчетаКР.СчетДоходовОпер;
					СчетКт_НалоговыйУчет = СчетаУчетаКР.СчетДоходовОпер_НалоговыйУчет;					
					УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураПараметров.СчетаУчетаКР.Субконто1ДоходовОпер);
					УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураПараметров.СчетаУчетаКР.Субконто2ДоходовОпер);
					УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураПараметров.СчетаУчетаКР.Субконто3ДоходовОпер);
				Иначе
					Проводка.СчетКт = СтруктураПараметров.СчетаУчетаКР.СчетДоходовНеОпер;
					СчетКт_НалоговыйУчет = СчетаУчетаКР.СчетДоходовНеОпер_НалоговыйУчет;
					УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураПараметров.СчетаУчетаКР.Субконто1ДоходовНеОпер);
					УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураПараметров.СчетаУчетаКР.Субконто2ДоходовНеОпер);
					УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураПараметров.СчетаУчетаКР.Субконто3ДоходовНеОпер);
				КонецЕсли;	
				Проводка.СчетДт = ТекСчет;
				Для А=0 по ВидыСубконто.ВГраница() Цикл
					Проводка.СубконтоДт.Вставить(ВидыСубконто[А],Стр.получить(РеестрОстатков.Колонки.Индекс(РеестрОстатков.Колонки.Найти("Субконто"+(А+1)))));
				КонецЦикла;
				Проводка.ВалютаДт        = Стр.Валюта;
				Проводка.Сумма = КурсоваяРазница;
				
				Если ЕстьНалогНаПрибыль И СчетКт_НалоговыйУчет Тогда
					Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
					Проводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, Проводка.Сумма);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		Возврат;
	Иначе
		СчетПереоценки.Свойство("ГривневыйОстаток",ОстатокВалРегУчета);
		СчетПереоценки.Свойство("ВалютныйОстаток",ОстатокИнаяВал);
	КонецЕсли;	
	
	РасчетныйОстатокВалРегУчета=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОстатокИнаяВал, ВалютаДокумента, ВалютаРегламентированногоУчета,
															КурсДокумента, ДанныеОВалютеРег.Курс,КратностьДокумента, ДанныеОВалютеРег.Кратность);
	Если ОстатокВалРегУчета=РасчетныйОстатокВалРегУчета тогда
		Возврат;
	КонецЕсли;
	
	КурсоваяРазница = РасчетныйОстатокВалРегУчета - ОстатокВалРегУчета;
	ФильтрСубконто = Неопределено;
	
	Если (ВставитьПервой) тогда
		Проводка   = ПроводкиБУ.Вставить(0);
	Иначе
		Проводка   = ПроводкиБУ.Добавить();
	КонецЕсли;
	Проводка.Период      = ДатаДока;
	Проводка.Активность  = Истина;
	Проводка.Организация = Организация;
	Проводка.Содержание  = "Переоценка валюты";
	Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСчетов;
	
	Если КурсоваяРазница<0 тогда
		Если Операционная Тогда
			Проводка.СчетДт = СтруктураПараметров.СчетаУчетаКР.СчетЗатратОпер;
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураПараметров.СчетаУчетаКР.Субконто1ЗатратОпер);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураПараметров.СчетаУчетаКР.Субконто2ЗатратОпер);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураПараметров.СчетаУчетаКР.Субконто3ЗатратОпер);
		Иначе
			Проводка.СчетДт = СтруктураПараметров.СчетаУчетаКР.СчетЗатратНеОпер;
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураПараметров.СчетаУчетаКР.Субконто1ЗатратНеОпер);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураПараметров.СчетаУчетаКР.Субконто2ЗатратНеОпер);
			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураПараметров.СчетаУчетаКР.Субконто3ЗатратНеОпер);
		КонецЕсли;	
		Проводка.СчетКт = ТекСчет;
		ТекВидСубконто = ТекСчет.ВидыСубконто;
		Для Каждого ТекВидСубконто из ТекСчет.ВидыСубконто цикл
			НомерСубконто=ТекВидСубконто.НомерСтроки;
			Если СчетПереоценки.Свойство("Субконто"+НомерСубконто,ФильтрСубконто) тогда
				Проводка.СубконтоКт.Вставить(ТекВидСубконто.ВидСубконто,ФильтрСубконто);
			КонецЕсли;
		КонецЦикла;
		
		Проводка.ВалютаКт        = ВалютаДокумента;
		Проводка.ВалютнаяСуммаКт = 0;
		Проводка.Сумма = -КурсоваяРазница;
		
	ИначеЕсли КурсоваяРазница > 0 тогда
		Если Операционная Тогда
			Проводка.СчетКт = СтруктураПараметров.СчетаУчетаКР.СчетДоходовОпер;
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураПараметров.СчетаУчетаКР.Субконто1ДоходовОпер);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураПараметров.СчетаУчетаКР.Субконто2ДоходовОпер);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураПараметров.СчетаУчетаКР.Субконто3ДоходовОпер);
		Иначе
			Проводка.СчетКт = СтруктураПараметров.СчетаУчетаКР.СчетДоходовНеОпер;
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураПараметров.СчетаУчетаКР.Субконто1ДоходовНеОпер);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураПараметров.СчетаУчетаКР.Субконто2ДоходовНеОпер);
			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураПараметров.СчетаУчетаКР.Субконто3ДоходовНеОпер);
		КонецЕсли;	
		Проводка.СчетДт = ТекСчет;
		ТекВидСубконто = ТекСчет.ВидыСубконто;
		Для Каждого ТекВидСубконто из ТекСчет.ВидыСубконто цикл
			НомерСубконто=ТекВидСубконто.НомерСтроки;
			Если СчетПереоценки.Свойство("Субконто"+НомерСубконто,ФильтрСубконто) тогда
				Проводка.СубконтоДт.Вставить(ТекВидСубконто.ВидСубконто,ФильтрСубконто);
			КонецЕсли;
		КонецЦикла;
		
		Проводка.ВалютаДт        = ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = 0;
		Проводка.Сумма = КурсоваяРазница;
	КонецЕсли;
	
КонецПроцедуры // ПереоценкаСчетаРегл

// Формирует по проводкам документа список валютных счетов для переоценки, запускает переоценку.
//
// Параметры
// 	Объект          		- ДокументОбъект        	- Документ для которого выполняется процедура.
// 	ВалютаИКурсДокумента	- Структура					- Содержит информацию о валюте, курсе и кратности документа.
//													  	 	Получается с помощью сервисной функции СтруктурироватьВалютаКурсКратность
//		Валюта				- СправочникСсылка.Валюты	- ссылка на валюту документа
//		Курс				- Число
//		Кратность			- Число
//
//  ИспользоватьКурсИзСправочника - Булево				- Для передачи в процедуру переоценки,
//													 	 определяет режим выбора курса при переоценке.
//															Ложь - курс берется из документа.
//															Истина - курс берется из справочника "Валюты".
//															Значение по умолчанию: Ложь.
//
//  ОтражатьНУ 			- Булево						- Отражать движения в налоговом учете
//														 	Значение по умолчанию: Истина.
//
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Функция ПереоценкаСчетовДокументаРегл(СтруктураПараметров,ПроводкиБУ, ВалютаРегламентированногоУчета, ДвиженияБылиЗаписаны = Ложь) экспорт

	ВалютаДокумента      = СтруктураПараметров.ВалютаДокумента;
	Если (ВалютаДокумента = ВалютаРегламентированногоУчета)
		Или ПроводкиБУ.Количество()=0 и не ДвиженияБылиЗаписаны Тогда
		Возврат истина;
	КонецЕсли;

	//Подготовка таблицы значений для формирования списка счетов для переоценки
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("Счет");
	ТаблицаСчетов.Колонки.Добавить("Субконто1");
	ТаблицаСчетов.Колонки.Добавить("Субконто2");
	ТаблицаСчетов.Колонки.Добавить("Субконто3");
	ТаблицаСчетов.Колонки.Добавить("ИспользованиеС1", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетов.Колонки.Добавить("ИспользованиеС2", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетов.Колонки.Добавить("ИспользованиеС3", Новый ОписаниеТипов("Булево"));
	
	Если ДвиженияБылиЗаписаны тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|		ВалютныеСчетаПроводок.Счет КАК Счет,
		|		ВалютныеСчетаПроводок.Субконто1 КАК Субконто1,
		|		ВалютныеСчетаПроводок.Субконто2 КАК Субконто2,
		|		ВалютныеСчетаПроводок.Субконто3 КАК Субконто3,
		|		ВалютныеСчетаПроводок.Валюта КАК Валюта
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ХозрасчетныйДвиженияССубконто.СчетДт КАК Счет,
		|			ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК Субконто1,
		|			ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК Субконто2,
		|			ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК Субконто3,
		|			ХозрасчетныйДвиженияССубконто.ВалютаДт КАК Валюта
		|		ИЗ
		|			РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|				,
		|				,
		|				Регистратор = &Регистратор
		|				    И СчетДт.Валютный) КАК ХозрасчетныйДвиженияССубконто
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ХозрасчетныйДвиженияССубконто.СчетКт,
		|			ХозрасчетныйДвиженияССубконто.СубконтоКт1,
		|			ХозрасчетныйДвиженияССубконто.СубконтоКт2,
		|			ХозрасчетныйДвиженияССубконто.СубконтоКт3,
		|			ХозрасчетныйДвиженияССубконто.ВалютаКт
		|		ИЗ
		|			РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|				,
		|				,
		|				Регистратор = &Регистратор
		|				    И Счеткт.Валютный) КАК ХозрасчетныйДвиженияССубконто) КАК ВалютныеСчетаПроводок
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВалютныеСчетаПроводок.Субконто1,
		|		ВалютныеСчетаПроводок.Валюта,
		|		ВалютныеСчетаПроводок.Субконто3,
		|		ВалютныеСчетаПроводок.Субконто2,
		|		ВалютныеСчетаПроводок.Счет";

		Запрос.УстановитьПараметр("Регистратор",СтруктураПараметров.Ссылка);

		Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
					
			СтруктураПараметровБлокировки = Новый Структура(
				"ТипТаблицы, ИмяТаблицы", 
				"РегистрБухгалтерии", "Хозрасчетный.НаборЗаписей");
			
			СтруктураЗначенийБлокировки = Новый Структура("Регистратор", СтруктураПараметров.Ссылка);
			
			Отказ     = Ложь;
			Заголовок = "";
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, , Отказ, Заголовок);
					
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();

		Пока Выборка.Следующий() Цикл
			
			ТекЗаписьТаблицы = ТаблицаСчетов.Добавить();
			ТекЗаписьТаблицы.Счет = Выборка.Счет;
			Для Каждого ТекСубконто из Выборка.Счет.ВидыСубконто цикл
				ТекЗаписьТаблицы["Субконто"+ТекСубконто.НомерСтроки] = Выборка["Субконто"+ТекСубконто.НомерСтроки];
				ТекЗаписьТаблицы["ИспользованиеС"+ТекСубконто.НомерСтроки] = Истина;
			КонецЦикла;
		КонецЦикла;
	Иначе
		
		СтруктураПоиска = Новый Структура("Счет, Субконто1, Субконто2, Субконто3");
		
		//Формирование списка счетов для переоценки
		Для каждого ТекПроводка из ПроводкиБУ Цикл
			Если ТекПроводка.СчетКт.Валютный тогда
				ТекСчет=ТекПроводка.СчетКт;
				СтруктураПоиска.Вставить("Счет", ТекСчет);
				СтруктураПоиска.Вставить("Субконто1", Неопределено);
				СтруктураПоиска.Вставить("Субконто2", Неопределено);
				СтруктураПоиска.Вставить("Субконто3", Неопределено);
				СтруктураПоиска.Вставить("ИспользованиеС1", Ложь);
				СтруктураПоиска.Вставить("ИспользованиеС2", Ложь);
				СтруктураПоиска.Вставить("ИспользованиеС3", Ложь);
				Для Каждого ТекСубконто из ТекСчет.ВидыСубконто Цикл
					СтруктураПоиска.Вставить("Субконто" + Строка(ТекСубконто.НомерСтроки), ТекПроводка.СубконтоКт.Получить(ТекСубконто.ВидСубконто));
					СтруктураПоиска.Вставить("ИспользованиеС" + Строка(ТекСубконто.НомерСтроки), Истина);
				КонецЦикла;
				НайденныеСтроки = ТаблицаСчетов.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ТекЗаписьТаблицы = ТаблицаСчетов.Добавить();
					ТекЗаписьТаблицы.Счет = ТекСчет;
					ТекЗаписьТаблицы.Субконто1 = Неопределено;
					ТекЗаписьТаблицы.Субконто2 = Неопределено;
					ТекЗаписьТаблицы.Субконто3 = Неопределено;
					Для Каждого ТекСубконто из ТекСчет.ВидыСубконто цикл
						ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки,ТекПроводка.СубконтоКт.Получить(ТекСубконто.ВидСубконто));
						ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки+3,Истина);
					КонецЦикла;
				КонецЕсли;
  			КонецЕсли;
			Если ТекПроводка.СчетДт.Валютный тогда
				ТекСчет=ТекПроводка.СчетДт;
				СтруктураПоиска.Вставить("Счет", ТекСчет);
				СтруктураПоиска.Вставить("Субконто1", Неопределено);
				СтруктураПоиска.Вставить("Субконто2", Неопределено);
				СтруктураПоиска.Вставить("Субконто3", Неопределено);
				СтруктураПоиска.Вставить("ИспользованиеС1", Ложь);
				СтруктураПоиска.Вставить("ИспользованиеС2", Ложь);
				СтруктураПоиска.Вставить("ИспользованиеС3", Ложь);
				Для Каждого ТекСубконто из ТекСчет.ВидыСубконто Цикл
					СтруктураПоиска.Вставить("Субконто" + Строка(ТекСубконто.НомерСтроки), ТекПроводка.СубконтоДт.Получить(ТекСубконто.ВидСубконто));
					СтруктураПоиска.Вставить("ИспользованиеС" + Строка(ТекСубконто.НомерСтроки), Истина);
				КонецЦикла;
				НайденныеСтроки = ТаблицаСчетов.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ТекЗаписьТаблицы = ТаблицаСчетов.Добавить();
					ТекЗаписьТаблицы.Счет = ТекСчет;
					ТекЗаписьТаблицы.Субконто1 = Неопределено;
					ТекЗаписьТаблицы.Субконто2 = Неопределено;
					ТекЗаписьТаблицы.Субконто3 = Неопределено;
					Для Каждого ТекСубконто из ТекСчет.ВидыСубконто цикл
						ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки,ТекПроводка.СубконтоДт.Получить(ТекСубконто.ВидСубконто));
						ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки+3,Истина);
					КонецЦикла;
	  			КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаСчетов.Свернуть("Счет,Субконто1,Субконто2,Субконто3,ИспользованиеС1,ИспользованиеС2,ИспользованиеС3");

	//Запуск процедуры переоценки для каждого счета
	Для каждого ТекСчет из ТаблицаСчетов цикл

		СчетДляПереоценки = новый структура("Счет",ТекСчет.Счет);

		Для А = 1 по 3 Цикл
			Если ТекСчет.Получить(А+3) тогда
				СчетДляПереоценки.Вставить("Субконто"+А,ТекСчет.Получить(А));
			КонецЕсли;
		КонецЦикла;

		ПереоценкаСчетаРегл(СтруктураПараметров,ПроводкиБУ,СчетДляПереоценки,ВалютаРегламентированногоУчета,Истина);

	КонецЦикла;

	Возврат Истина;

КонецФункции // ПереоценкаСчетовДокументаРегл()

// Получает сумму списания активов для заполнения печатных форм документов
Функция ПолучитьСуммуСписанияАктивов(ТекДокумент) Экспорт
	
	ПроводкиДокумента = Новый ТаблицаЗначений;
	ПроводкиДокумента.Колонки.Добавить("Номенклатура");
	ПроводкиДокумента.Колонки.Добавить("Количество");
	ПроводкиДокумента.Колонки.Добавить("Сумма");
	ТаблицаСуммСписания = Новый ТаблицаЗначений;
	ТаблицаСуммСписания.Колонки.Добавить("Номенклатура");
	ТаблицаСуммСписания.Колонки.Добавить("Количество");
	ТаблицаСуммСписания.Колонки.Добавить("Сумма");
	Если ТекДокумент.Проведен Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|	СУММА(ХозрасчетныйДвиженияССубконто.КоличествоКт) КАК КоличествоКт,
		|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, &ДатаКон, Регистратор = &Регистратор) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаНач", ТекДокумент.Дата);
		Запрос.УстановитьПараметр("ДатаКон", ТекДокумент.Дата);
		Запрос.УстановитьПараметр("Регистратор", ТекДокумент.Ссылка);
		
		
		ПроводкиДокумента = Запрос.Выполнить().Выгрузить();
		Для Каждого ПроводкаДокумента Из ПроводкиДокумента Цикл
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт1) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка = ТаблицаСуммСписания.Добавить();
				Строка.Номенклатура = ПроводкаДокумента.СубконтоКт1;
				Строка.Количество   = ПроводкаДокумента.КоличествоКт;
				Строка.Сумма        = ПроводкаДокумента.Сумма;
			КонецЕсли;
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт2) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка = ТаблицаСуммСписания.Добавить();
				Строка.Номенклатура = ПроводкаДокумента.СубконтоКт2;
				Строка.Количество   = ПроводкаДокумента.КоличествоКт;
				Строка.Сумма        = ПроводкаДокумента.Сумма;
			КонецЕсли;
		КонецЦикла;
		ТаблицаСуммСписания.Свернуть("Номенклатура","Количество,Сумма");
	КонецЕсли;
	
  Возврат  ТаблицаСуммСписания;
  
КонецФункции


///////////////////////////////////////////////////////////////////////////////  
// ПРОЦЕДУРЫ ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ

// Процедура вызывается из ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость()
// и проверяет заполненость группы реквизитов схемы реализации.
//
// Параметры
//   СуфиксГруппыТЗ                – Тип: Строка – суфикс группы проверяемых реквизитов
//                                                 табличной части;
//                 
//   СуфиксГруппы                  – Тип: Строка – Суфикс группы реквизитов справочника 
//                                                 схемы реализации;
//                 
//   СтрокаТЗ                      – Тип: Строка таблицы значений - проверяемая строка;  
//                 
//   СхемаРеализацииМетаданные     – Тип: Метаданные – Метаданные схемы реализации, чтобы получать
//                                                     представление реквизитов;
//                 
//   СтрокаНачалаСообщенияОбОшибке – Тип: Строка – строка начала сообщения об ошибке;
//                 
//   Отказ                        - флаг отказа в проведении;
//
//   Заголовок                    - строка, заголовок сообщения об ошибке проведения;
//
Процедура ПроверитьЗаполненостьГруппыРеквизитовСхемыРеализации(СуфиксГруппыТЗ, СуфиксГруппы,
	                                                           СтрокаТЗ,
	                                                           СхемаРеализацииМетаданные, 
	                                                           СтрокаНачалаСообщенияОбОшибке,
	                                                           Отказ, Заголовок)
															   
    ПроверяемыйРеквизитТЗ = СтрокаТЗ["Счет" + СуфиксГруппыТЗ];
    ПредставлениеСчета    = СхемаРеализацииМетаданные.Реквизиты["Счет" + СуфиксГруппы].Представление();
	
	Если НЕ ЗначениеЗаполнено(ПроверяемыйРеквизитТЗ) Тогда

		Если СтрокаНачалаСообщенияОбОшибке <> "" Тогда
			ОбщегоНазначения.Сообщение(СтрокаНачалаСообщенияОбОшибке, Перечисления.ВидыСообщений.Ошибка, Заголовок);			
			СтрокаНачалаСообщенияОбОшибке = "";
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьОбОшибке(Символы.Таб + "Не заполнено значение """ 
		                 + ПредставлениеСчета
						 + """.", Отказ);
		Возврат
		
	КонецЕсли;
	
	ВидыСубконто = ПроверяемыйРеквизитТЗ.ВидыСубконто;
	КвоСубконто  = ВидыСубконто.Количество();
	
	Для Н = 1 По КвоСубконто Цикл
		
		ВидСубконто = ВидыСубконто[Н-1].ВидСубконто;
		
		Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
			// этот вид субконто и не должен быть заполнен в схеме	
		    Продолжить;
		КонецЕсли; 
		
		ПроверяемыйРеквизитТЗ = СтрокаТЗ["Субконто" + СуфиксГруппыТЗ + Н];
		
		Если НЕ ЗначениеЗаполнено(ПроверяемыйРеквизитТЗ) Тогда
			
			ИмяПроверяемогоРеквизита   = "Субконто" + СуфиксГруппы + Н;
			
			Если СтрокаНачалаСообщенияОбОшибке <> "" Тогда
				ОбщегоНазначения.Сообщение(СтрокаНачалаСообщенияОбОшибке, Перечисления.ВидыСообщений.Ошибка, Заголовок);
				СтрокаНачалаСообщенияОбОшибке = "";
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьОбОшибке(Символы.Таб + "Не заполнено значение субконто """ + 
		                       ВидыСубконто[Н - 1].ВидСубконто.Наименование
							   + """ счета """ + ПредставлениеСчета + """.", Отказ);
							   
		Иначе 
			Если    ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов
				ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат
				ИЛИ ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов
				
				Тогда
				
				Если НЕ ЗначениеЗаполнено(ПроверяемыйРеквизитТЗ.СтатьяДекларацииПоНалогуНаПрибыль) Тогда
					
					Если СтрокаНачалаСообщенияОбОшибке <> "" Тогда
						ОбщегоНазначения.Сообщение(СтрокаНачалаСообщенияОбОшибке, Перечисления.ВидыСообщений.Ошибка, Заголовок);
						СтрокаНачалаСообщенияОбОшибке = "";
					КонецЕсли;
					
					ОбщегоНазначения.СообщитьОбОшибке(Символы.Таб + "В субконто """ + 
				                       ВидыСубконто[Н - 1].ВидСубконто.Наименование + ""
									   + """ счета """ + ПредставлениеСчета + """" + " не заполнена статья декларации по налогу на прибыль.", Отказ);
					
					
				КонецЕсли; 		
			КонецЕсли; 
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполненостьГруппыРеквизитовСхемыРеализации()

// Проверяет элементы справочника "СхемыРеализации" из реквизита табличной части
// документа на правильность заполнения (при проведении)
//
// Параметры
//  ДокументОбъект               - объект проводимого документа; 
//  ИмяТабличнойЧасти            - имя табличной части документа;
//  ИмяРеквизитаСхемаРеализации  - имя проверяемого реквизита (предполагается, что он совпадает и с именем
//                                 колонки в таблице значений);
//  СтруктураШапкиДокумента      - Структура с параметрами шапки документа;
//  СтруктураПараметровПроверки  - Структура, ключи которой указывают на колонки таблицы значений,
//                                 в которых находится проверяемый счет, а значение - наименование этого счета
//                                 в схеме реализации (Например: СчетДоходовБУ - имя колонки таблицы значений (ключ).
//                                 СчетДоходов - имя реквизита справочника "СхемыРеализации" (значение));
//                                 Предполагается, что субконто образованы от этих названий например: 
//                                 Счет<ДоходовБУ> - Субконто<ДоходовБУ>1;
//  Отказ                        - флаг отказа в проведении;
//  Заголовок                    - строка, заголовок сообщения об ошибке проведения;
//
Процедура ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ДокументОбъект, ИмяТабличнойЧасти,
	                                        ИмяРеквизитаСхемаРеализации = "СхемаРеализации", ТаблицаЗначений, 
							                СтруктураПараметровПроверки, СтруктураШапкиДокумента,
							                Отказ, Заголовок) Экспорт
							
											
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		// Проверка реквизитов не требуется
		Возврат;
	КонецЕсли;
	
	СтруктураСуфиксов = Новый Структура;
	
	// Выделение ключевых суфиксов наименований параметров
	Для каждого КлючИЗначение Из СтруктураПараметровПроверки Цикл
	
		СтруктураСуфиксов.Вставить(СтрЗаменить(НРег(КлючИЗначение.Ключ),     "счет", ""),
		                           СтрЗаменить(НРег(КлючИЗначение.Значение), "счет", ""));
	
	КонецЦикла;
	
	ДокументМетаданные = ДокументОбъект.Метаданные();
	ИмяДокумента       = ДокументМетаданные.Имя;      
	ТабличнаяЧастьМетаданные     = ДокументМетаданные.ТабличныеЧасти[ИмяТабличнойЧасти];
	ПредставлениеТабличнойЧасти  = ТабличнаяЧастьМетаданные.Представление();
	ПредставлениеСхемыРеализации = ТабличнаяЧастьМетаданные.Реквизиты[ИмяРеквизитаСхемаРеализации].Представление();
	ТЗ = ТаблицаЗначений.Скопировать();
	СтруктураОтбора = Новый Структура(ИмяРеквизитаСхемаРеализации);
	
	Пока ТЗ.Количество() > 0 Цикл
		
		СтрокаТЗ = ТЗ[0];
		СхемаРеализации = СтрокаТЗ[ИмяРеквизитаСхемаРеализации];
		
		Если НЕ ЗначениеЗаполнено(СхемаРеализации) Тогда
			// Проверка на пустые значение СхемыРеализации
			// в этой процедуре не выполняется
			
			ТЗ.Удалить(0);
			Продолжить;
			
		КонецЕсли;
		
	    СтруктураОтбора[ИмяРеквизитаСхемаРеализации] = СхемаРеализации;
		МассивСтрок = ТЗ.НайтиСтроки(СтруктураОтбора);
		НомераСтрок = "";
		Разделитель = "";
		
		Для каждого СтрокаОтбора Из МассивСтрок Цикл
		
			НомераСтрок = НомераСтрок + Разделитель + СтрокаОтбора.НомерСтроки;
			Разделитель = ", ";
			
			Если СтрокаОтбора <> СтрокаТЗ Тогда
				// оставляется одна строка для анализа
				// остальные, как аналогичные удаляются
				
				ТЗ.Удалить(СтрокаОтбора);
				
			КонецЕсли;
		
		КонецЦикла;
		
		СтрокаНачалаСообщенияОбОшибке = "Бухг. учет: Табличная часть """ + ПредставлениеТабличнойЧасти + """. "
		                                + "Строка номер """ + НомераСтрок + """. " + ПредставлениеСхемыРеализации
										+ " """ + СхемаРеализации + """.";
		СхемаРеализацииМетаданные = СхемаРеализации.Метаданные();								
		
		Для каждого КлючИЗначение Из СтруктураСуфиксов Цикл
		
			ПроверитьЗаполненостьГруппыРеквизитовСхемыРеализации(КлючИЗначение.Ключ,
			                                                     КлючИЗначение.Значение,
			                                                     СтрокаТЗ,
			                                                     СхемаРеализацииМетаданные, 
			                                                     СтрокаНачалаСообщенияОбОшибке,
			                                                     Отказ, Заголовок)			
		
		КонецЦикла;
		
		ТЗ.Удалить(СтрокаТЗ);
		
	КонецЦикла;

КонецПроцедуры // ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость()

Процедура ПроверитьСхемыРеализацииШапкиНаЗаполненость(ДокументОбъект,
	                                        ИмяРеквизитаСхемаРеализации = "СхемаРеализации", 
							                СтруктураПараметровПроверки, СтруктураШапкиДокумента,
							                Отказ, Заголовок) Экспорт
							
											
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		// Проверка реквизитов не требуется
		Возврат;
	КонецЕсли;
	
	СтруктураСуфиксов = Новый Структура;
	
	// Выделение ключевых суфиксов наименований параметров
	Для каждого КлючИЗначение Из СтруктураПараметровПроверки Цикл
	
		СтруктураСуфиксов.Вставить(СтрЗаменить(НРег(КлючИЗначение.Ключ),     "счет", ""),
		                           СтрЗаменить(НРег(КлючИЗначение.Значение), "счет", ""));
	
	КонецЦикла;
	
	ДокументМетаданные = ДокументОбъект.Метаданные();
	ИмяДокумента       = ДокументМетаданные.Имя;      
	ПредставлениеСхемыРеализации = ДокументМетаданные.Реквизиты[ИмяРеквизитаСхемаРеализации].Представление();
	
	СхемаРеализации = СтруктураШапкиДокумента[ИмяРеквизитаСхемаРеализации];
	
	Если НЕ ЗначениеЗаполнено(СхемаРеализации) Тогда
		// Проверка на пустые значение СхемыРеализации
		// в этой процедуре не выполняется
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаНачалаСообщенияОбОшибке = "Бухг. учет: " + ПредставлениеСхемыРеализации
									+ " """ + СхемаРеализации + """.";
	СхемаРеализацииМетаданные = СхемаРеализации.Метаданные();								
	
	Для каждого КлючИЗначение Из СтруктураСуфиксов Цикл
	
		ПроверитьЗаполненостьГруппыРеквизитовСхемыРеализации(КлючИЗначение.Ключ,
		                                                     КлючИЗначение.Значение,
		                                                     СтруктураШапкиДокумента,
		                                                     СхемаРеализацииМетаданные, 
		                                                     СтрокаНачалаСообщенияОбОшибке,
		                                                     Отказ, Заголовок)			
	
	КонецЦикла;
	
КонецПроцедуры // ПроверитьСхемыРеализацииШапкиНаЗаполненость()

// Записывает наборы записей регистров Хозрасчетный и Налоговый коллекции Движения, если они модифицированы.
// Движения записываются без режима замещения.
// Необходимо вызывать, если движения по этим регистрам могут формироваться
// - с использованием коллекции Движения ("из модуля документа")
// - с использованием наборов записей (из подписок на событие ПриПроведении, из процедур серверных модулей)
// Вызывать нужно перед тем, как вызываются процедуры серверных модулей или обработчик подписки на событие
Процедура ЗаписатьДвижения(Движения) Экспорт
	
	Регистры = Новый Массив();
	Регистры.Добавить("Хозрасчетный");
	Регистры.Добавить("Налоговый");
	
	Для Каждого ИмяРегистра Из Регистры Цикл
		
		// Получим набор записей
		НаборЗаписей = Движения.Найти(ИмяРегистра);
		Если НаборЗаписей = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Убедимся, что не модифицирован
		Если НаборЗаписей.Модифицированность() Тогда
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет принадлежность субсчета счету.
Функция ЭтоСубсчет(Субсчет, Счет) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Субсчет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (Субсчет.ПринадлежитЭлементу(Счет) ИЛИ Субсчет = Счет);
	
КонецФункции // ЭтоСубсчет()

Функция СформироватьСодержаниеПроводкиПоВходящемуДокументу(Структура, ВидОперации) Экспорт

	Для Каждого Строка Из Структура Цикл
		Если  НЕ Строка.Содержание = Неопределено Тогда
			ВидОперацииТекст = Строка.Содержание;
			
		ИначеЕсли Найти(ВидОперации, "Поступление") > 0 Тогда
			ВидОперацииТекст = ВидОперации +" "+ ПолучитьНазваниеОбъекта(Строка.СчетУчетаБУ);
		Иначе 
			ВидОперацииТекст = ВидОперации;
		КонецЕсли;
		
		Строка.Содержание = ВидОперацииТекст + " по " + Строка.ВидДокВходящий + " " + Строка.НомерВходящегоДокумента + " от " + Формат(Строка.ДатаВходящегоДокумента, "ДЛФ=Д");
	КонецЦикла
КонецФункции	

Функция СформироватьКолонкиДляСодержанияПроводкиПоВходящемуДокументу(ТаблицаТоваров, ВидДокВходящий, НомерВходящегоДокумента, ДатаВходящегоДокумента) Экспорт

	ТаблицаТоваров.Колонки.Добавить("ВидДокВходящий");
	ТаблицаТоваров.ЗаполнитьЗначения(ВидДокВходящий, "ВидДокВходящий");
	ТаблицаТоваров.Колонки.Добавить("НомерВходящегоДокумента");
	ТаблицаТоваров.ЗаполнитьЗначения(НомерВходящегоДокумента, "НомерВходящегоДокумента");
	ТаблицаТоваров.Колонки.Добавить("ДатаВходящегоДокумента");
	ТаблицаТоваров.ЗаполнитьЗначения(ДатаВходящегоДокумента, "ДатаВходящегоДокумента");
	
	Если ТаблицаТоваров.Колонки.найти("Содержание") = Неопределено Тогда
		
		ТаблицаТоваров.Колонки.Добавить("Содержание");
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьНаборЗаписейРегистраЗаписямиТаблицы(НаборЗаписей,ТаблицаДополнений) Экспорт
	
	ОтрабатыватьСубконто = Метаданные.РегистрыБухгалтерии.Содержит(НаборЗаписей.Метаданные());
	
	Для каждого Строка из ТаблицаДополнений Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		Для каждого Колонка из ТаблицаДополнений.Колонки Цикл
			Если Колонка.Имя = "МоментВремени" или Колонка.Имя = "НомерСтроки" тогда
				Продолжить;
			КонецЕсли;
			Если ОтрабатыватьСубконто и Найти(Колонка.Имя,"Субконто")>0 тогда
				Если Найти(Колонка.Имя,"ВидСубконто")>0 тогда
					Если НЕ ЗначениеЗаполнено(Строка[Колонка.Имя]) тогда
						Продолжить;
					КонецЕсли;
					НомерСубконто  = Прав(Колонка.Имя,1);
					Если Найти(Колонка.Имя,"Дт")+Найти(Колонка.Имя,"Кт")>0 тогда
						СторонаСчета   = Лев(Прав(Колонка.Имя,3),2);
					Иначе
						СторонаСчета   = "";
					Конецесли;
					УстановитьСубконтоПоВидуСубконто(Строка["Счет"+СторонаСчета],НоваяЗапись["Субконто"+СторонаСчета],Строка[Колонка.Имя],Строка["Субконто"+СторонаСчета+НомерСубконто]);
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Попытка 
					НоваяЗапись[Колонка.Имя] =  Строка[Колонка.Имя];
				Исключение
					//Не смогли заполнить реквизит... Видно его нет.
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры



