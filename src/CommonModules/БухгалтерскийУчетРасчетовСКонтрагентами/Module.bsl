//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОПЛАТЫ, РЕГИСТРАЦИИ ДОКУМЕНТОВ ОПЛАТЫ В РЕГИСТРЕ СВЕДЕНИЙ (РАСЧЕТЫ [ПРИОБРЕТЕНИЕ|РЕАЛИЗАЦИЯ]ОРГАНИЗАЦИЙ)
//

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ (УНИВЕРСАЛЬНЫЕ)

// Универсальная процедура определения необходимости сдвига границы последовательности назад исходя из 
// текущей границы и переданного момента времени.
// В случае, если граница последовательности больше, чем указанный момент времени, производится изменение
// границы последовательности на указанный момент времени.
// Параметры:
//		ИмяПоследовательности - строка - имя обрабатываемой последовательности;
//		МоментВремени - МоментВремени - момент времени, с которым производится сравнение текущей границы последовательности,
//										на этот момент устанавливается граница последовательности;
//		Измерения - структура - Структура измерений последовательности,
//								если в последовательности нет измерений - Неопределено 
//				Ключ - имя измерения, 
//				Значение - значение отбора
//		БлокироватьГраницу - булево - Признак блокировки границы последовательности.
//									  Если передано "Истина" - граница будет заблокирована при чтении.
//
Процедура СдвигГраницыПоследовательностиНазад(ИмяПоследовательности, МоментВремени , Измерения = Неопределено, БлокироватьГраницу = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоследовательностьГраницы.МоментВремени
	|ИЗ
	|	Последовательность."+ИмяПоследовательности+".Границы КАК ПоследовательностьГраницы
	| ";
	
	Если не Измерения = неопределено и не Измерения.Количество() = 0 тогда
		Запрос.Текст = Запрос.Текст+"
		|ГДЕ
		| Истина "; 
		
		Для каждого Измерение Из Измерения Цикл
			Запрос.Текст = Запрос.Текст+"
			|	И ПоследовательностьГраницы."+Измерение.Ключ+" = &"+Измерение.Ключ+"
			|";
			Запрос.УстановитьПараметр(Измерение.Ключ, Измерение.Значение);
		КонецЦикла; 
		
	КонецЕсли;
	
	Если БлокироватьГраницу Тогда
		Запрос.Текст = Запрос.Текст+"
		|ДЛЯ ИЗМЕНЕНИЯ";
	КонецЕсли; 
	
	Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
				
		СтруктураПараметровБлокировки = Новый Структура(
			"ТипТаблицы, ИмяТаблицы", 
			"Последовательность", ИмяПоследовательности);
		Если НЕ БлокироватьГраницу Тогда
			СтруктураПараметровБлокировки.Вставить("РежимБлокировки", РежимБлокировкиДанных.Разделяемый);
		КонецЕсли;
		
		СтруктураЗначенийБлокировки = Новый Структура;
		Если НЕ Измерения = Неопределено Тогда
			Для каждого Измерение Из Измерения Цикл
				СтруктураЗначенийБлокировки.Вставить(Измерение.Ключ, Измерение.Значение);
			КонецЦикла; 
		КонецЕсли;
		
		Отказ     = Ложь;
		Заголовок = "";
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, , Отказ, Заголовок);
				
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		// Граница переносится назад, если документ проводится задним числом
		Если МоментВремени.Сравнить(Выборка.МоментВремени) = -1 Тогда
			Последовательности[ИмяПоследовательности].УстановитьГраницу(МоментВремени,Измерения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура "сворачивает" проводки корректировки долга с видом операции "Проведение взаимозачета",
// сформированные первоначально в корреспонденции со вспомогательным счетом 000.
// Вызывается из модуля документа "Корректировка долга" и из обработки восстановления последовательностей по взаиморасчетам.
// Параметры:
// ПроводкиБУ - <РегистрыБухгалтерии.Хозрасчетный.НаборЗаписей> - набор записей по счетам взаиморасчетов
//               в корреспонденции со счетом 000
//
Процедура СопоставитьПроводкиКорректировкиДолгаСВспомогательнымСчетом(ПроводкиБУ) Экспорт
	
	ПроводкиКУдалению   = Новый массив();
	ДвиженияДебет       = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей().Выгрузить();
	ДвиженияКредит      = ДвиженияДебет.Скопировать();
	ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	СформированныеДвижения = ПроводкиБУ.Выгрузить();
	Для каждого СтрокаДвижений Из СформированныеДвижения Цикл
		Если СтрокаДвижений.СчетДт = ВспомогательныйСчет Тогда
			ДвижениеКредит = ДвиженияКредит.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеКредит, СтрокаДвижений);
			ПроводкиКУдалению.Добавить(ПроводкиБУ[СтрокаДвижений.НомерСтроки -1]);
		ИначеЕсли СтрокаДвижений.СчетКт = ВспомогательныйСчет Тогда
			ДвижениеДебет = ДвиженияДебет.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеДебет, СтрокаДвижений);
			ПроводкиКУдалению.Добавить(ПроводкиБУ[СтрокаДвижений.НомерСтроки -1]);
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого ПроводкаКУдалению Из ПроводкиКУдалению Цикл
		ПроводкиБУ.Удалить(ПроводкаКУдалению);
	КонецЦикла; 
	
	Для каждого СтрокаСчетаКредита Из ДвиженияКредит Цикл
		
		Для каждого СтрокаСчетаДебета Из ДвиженияДебет Цикл
			Если СтрокаСчетаКредита.Сумма = 0 Тогда
				Прервать;
			КонецЕсли;
			Если СтрокаСчетаДебета.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаСоответствия = мин(СтрокаСчетаКредита.Сумма,СтрокаСчетаДебета.Сумма);
			Если СтрокаСчетаКредита.ВалютнаяСуммаКт < СтрокаСчетаДебета.ВалютнаяСуммаДт Тогда
				СуммаСоответствияВал = СтрокаСчетаКредита.ВалютнаяСуммаКт;
				КурсСоответствия	 = СтрокаСчетаКредита.Сумма / ?(СуммаСоответствияВал=0,1,СуммаСоответствияВал);
			Иначе
				СуммаСоответствияВал = СтрокаСчетаДебета.ВалютнаяСуммаДт;
				КурсСоответствия	 = СтрокаСчетаДебета.Сумма /?(СуммаСоответствияВал=0,1,СуммаСоответствияВал);
			КонецЕсли;
			Если СуммаСоответствияВал <> 0 Тогда
				СуммаСоответствия = Окр(СуммаСоответствияВал * КурсСоответствия,2);
			КонецЕсли;
			
			Если СуммаСоответствия = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			// Проводка взаимозачета
			Проводка                = ПроводкиБУ.Добавить();
			
			Проводка.Период			= СтрокаСчетаКредита.Период;
			Проводка.Организация	= СтрокаСчетаКредита.Организация;
			Проводка.НомерЖурнала	= СтрокаСчетаКредита.НомерЖурнала;
			Проводка.Содержание		= "Взаимозачет";
			Проводка.Сумма			= СуммаСоответствия;
			
			Проводка.СчетДт			= СтрокаСчетаДебета.СчетДт;
			Для НомерСубконто = 1 По 3 Цикл
				БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаСчетаДебета["ВидСубконтоДт" + НомерСубконто], СтрокаСчетаДебета["СубконтоДт" + НомерСубконто]);
			КонецЦикла; 
			
			Проводка.ВалютаДт		= СтрокаСчетаДебета.ВалютаДт;
			Проводка.ВалютнаяСуммаДт= СуммаСоответствияВал;
			
			Проводка.СчетКт			= СтрокаСчетаКредита.СчетКт;
			Для НомерСубконто = 1 По 3 Цикл
				БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаСчетаКредита["ВидСубконтоКт" + НомерСубконто], СтрокаСчетаКредита["СубконтоКт" + НомерСубконто]);
			КонецЦикла; 
			
			Проводка.ВалютаКт		= СтрокаСчетаКредита.ВалютаКт;
			Проводка.ВалютнаяСуммаКт= СуммаСоответствияВал;
			
			СтрокаСчетаКредита.Сумма			= СтрокаСчетаКредита.Сумма - СуммаСоответствия;
			СтрокаСчетаКредита.ВалютнаяСуммаКт = СтрокаСчетаКредита.ВалютнаяСуммаКт - Проводка.ВалютнаяСуммаКт;
			
			СтрокаСчетаДебета.Сумма			= СтрокаСчетаДебета.Сумма - СуммаСоответствия;
			СтрокаСчетаДебета.ВалютнаяСуммаДт = СтрокаСчетаДебета.ВалютнаяСуммаДт - Проводка.ВалютнаяСуммаДт;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАЧЕТА АВАНСА, РЕГИСТРАЦИИ ДОКУМЕНТОВ ПРИОБРЕТЕНИЯ/РЕАЛИЗАЦИИ В РЕГИСТРЕ СВЕДЕНИЙ (РАСЧЕТЫ [ПРИОБРЕТЕНИЕ|РЕАЛИЗАЦИЯ]ОРГАНИЗАЦИЙ)

//////////////////////////////////////////////////////////////////////////////////////
// Подготовка данных по оплате для обработки

//Определяет направление движения денежных средств в зависимости от вида документа и вида операции документа
Функция ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента,ВидОперации = Неопределено)Экспорт

	ВидДействийДокумента = Новый Структура("НаправлениеДвижения,РасчетыВозврат");
	ВидыДокументовДДС    = Новый Соответствие();

	ВидДвиженияПоступление = Перечисления.НаправленияДвижений.Поступление;
	ВидДвиженияВыбытие     = Перечисления.НаправленияДвижений.Выбытие;
	
	ВидыДокументовДДС.Вставить("АккредитивПереданный"                    , ВидДвиженияВыбытие);
	ВидыДокументовДДС.Вставить("ПлатежноеПоручениеИсходящее"             , ВидДвиженияВыбытие);
	ВидыДокументовДДС.Вставить("ПлатежноеТребованиеПолученное"           , ВидДвиженияВыбытие);
	ВидыДокументовДДС.Вставить("ПлатежноеТребованиеПоручениеПолученное"  , ВидДвиженияВыбытие);
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерСписаниеДенежныхСредств"   , ВидДвиженияВыбытие);
	ВидыДокументовДДС.Вставить("РасходныйКассовыйОрдер"                  , ВидДвиженияВыбытие);
	ВидыДокументовДДС.Вставить("АвансовыйОтчет"                          , ВидДвиженияВыбытие);
	
	ВидыДокументовДДС.Вставить("АккредитивПолученный"                    , ВидДвиженияПоступление);
	ВидыДокументовДДС.Вставить("ПлатежноеПоручениеВходящее"              , ВидДвиженияПоступление);
	ВидыДокументовДДС.Вставить("ПлатежноеТребованиеВыставленное"         , ВидДвиженияПоступление);
	ВидыДокументовДДС.Вставить("ПлатежноеТребованиеПоручениеВыставленное", ВидДвиженияПоступление);
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерПоступлениеДенежныхСредств", ВидДвиженияПоступление);
	ВидыДокументовДДС.Вставить("ПриходныйКассовыйОрдер"                  , ВидДвиженияПоступление);
	
	ВидыДокументовДДС.Вставить("ОплатаОтПокупателяПлатежнойКартой"		 , ВидДвиженияПоступление);
	ВидыДокументовДДС.Вставить("КорректировкаДолга"		 				 , ВидДвиженияПоступление);

	ВидДействийДокумента.Вставить("НаправлениеДвижения",ВидыДокументовДДС[ВидДокумента]);

	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	
	Если ВидДокумента = "ВозвратТоваровПоставщику" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииВозврат);
	ИначеЕсли ВидДокумента="КорректировкаДолга" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
	ИначеЕсли ЗначениеЗаполнено(ВидОперации) Тогда

		//Определение вида операции

		РасчетВозвратПоВидуОпераций = Новый Соответствие();

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику                                                   , ВидОперацииРасчет);
		//Смартис Лиманчук начало 03.10.2012
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщикуНал                                                , ВидОперацииРасчет);
		//Смартис Лиманчук окончание 03.10.2012
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю                                   , ВидОперацииВозврат);
		//Смартис Лиманчук начало 04.10.2012
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателюНал                                , ВидОперацииВозврат);
		//Смартис Лиманчук окончание 04.10.2012
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя                                                   , ВидОперацииРасчет);
		//Смартис Лиманчук начало 03.10.2012
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателяНал                                                , ВидОперацииРасчет);
		//Смартис Лиманчук окончание 03.10.2012
        РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком                                  , ВидОперацииВозврат);
		//Смартис Лиманчук начало 05.11.2012
        РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщикомНал                               , ВидОперацииВозврат);
		//Смартис Лиманчук окончание 05.11.2012
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику                    , ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю    , ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя                 , ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком, ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПлатежныйОрдерСписание.ОплатаПоставщику                                , ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПлатежныйОрдерСписание.ВозвратДенежныхСредствПокупателю                , ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПлатежныйОрдерПоступление.ОплатаПокупателя                             , ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПлатежныйОрдерПоступление.ВозвратДенежныхСредствПоставщиком            , ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику                                           , ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю                           , ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППВходящее.ОплатаПокупателя                                            , ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППВходящее.ВозвратДенежныхСредствПоставщиком                           , ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю,ВидОперацииВозврат);
		
		Если ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю Тогда
			ВидДействийДокумента.Вставить("НаправлениеДвижения",ВидДвиженияВыбытие);
		КонецЕсли; 
		
		ВидДействийДокумента.Вставить("РасчетыВозврат", РасчетВозвратПоВидуОпераций[ВидОперации]);
		
	ИначеЕсли ВидДокумента="АвансовыйОтчет" Тогда
		
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
		
	Конецесли;

	Возврат ВидДействийДокумента;

КонецФункции

//Формирует структуру параметров для передачи в процедуры движения денежных средств по ссылке на документ
Функция ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, ВалютаРегламентированногоУчета, Заголовок = Неопределено,КоррСчет=Неопределено, ТаблицаДокумента = Неопределено, СтруктураШапкиДокумента = Неопределено) Экспорт

	Если СтруктураШапкиДокумента = Неопределено Тогда
		ВидДокумента = Ссылка.Метаданные().Имя;
	Иначе
		ВидДокумента = СтруктураШапкиДокумента.ВидДокумента;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Заголовок) тогда
		Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	КонецЕсли;
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("Организация,ВалютаДокумента,
	                                      |"+?(ВидДокумента="АвансовыйОтчет","ФизЛицо","Контрагент")+",СчетОрганизации,ДатаОплаты, ВидОперации");

	Если СтруктураШапкиДокумента = Неопределено Тогда
		РеквизитыДокумента = Ссылка.Метаданные().Реквизиты;
		Для Каждого Реквизит из СтруктураПараметров Цикл
			СтруктураПараметров.Вставить(Реквизит.Ключ,?(РеквизитыДокумента.найти(Реквизит.Ключ)=Неопределено,Неопределено,Ссылка[Реквизит.Ключ]));
		КонецЦикла;
	Иначе
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШапкиДокумента);
	КонецЕсли;
	
	//ИЗМЕНЕНО Верескул Игорь(Начало 14.12.2020
	Если Ссылка.Дата >= Дата("20210101") Тогда
		НаличнаяОрганизация = Константы.НПТ.Получить();
	Иначе
		НаличнаяОрганизация = Константы.КрафтКолор.Получить();
	КонецЕсли; 
	//Смартис Лиманчук начало 05.11.2012
	Если ВидДокумента="АвансовыйОтчет" Тогда
		Если Ссылка.НаличныйРасчет Тогда
			СтруктураПараметров.Организация = НаличнаяОрганизация;		
		КонецЕсли;
	ИначеЕсли Ссылка.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщикомНал Тогда 
		СтруктураПараметров.Организация = НаличнаяОрганизация;		
	ИначеЕсли Ссылка.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентамиНал Тогда 
		СтруктураПараметров.Организация = НаличнаяОрганизация;		
	ИначеЕсли Ссылка.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентамиНал Тогда 
		СтруктураПараметров.Организация = НаличнаяОрганизация;
	КонецЕсли;
	//Смартис Лиманчук окончание 05.11.2012
	//Окончание)Верескул Игорь 
	НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента, СтруктураПараметров.ВидОперации).НаправлениеДвижения;

	Если НаправлениеДвижения = Неопределено тогда
		//Другие документы не обрабатываются
		Возврат Ложь;
	Конецесли;

	СтруктураПараметров.Вставить("НаправлениеДвижения", НаправлениеДвижения);

	СтруктураПараметров.Вставить("Дата", ?(СтруктураШапкиДокумента = Неопределено,Ссылка.Дата,СтруктураШапкиДокумента.Дата));
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров["ДатаОплаты"]) тогда
		СтруктураПараметров.Вставить("Период",СтруктураПараметров.Дата);
	Иначе
		СтруктураПараметров.Вставить("Период",?(?(СтруктураШапкиДокумента = Неопределено, Ссылка.Оплачено,СтруктураШапкиДокумента.Оплачено),УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(СтруктураПараметров.Дата,СтруктураПараметров.ДатаОплаты),СтруктураПараметров.Дата));
	Конецесли;
	
	СтруктураПараметров.Вставить("ОпределятьАвансыПриПроведенииДокумента", ОпределятьАвансыПриПроведении(СтруктураПараметров.Период, СтруктураПараметров.Организация));
	
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	СтруктураПараметров.Вставить("ВидДокумента",ВидДокумента);
	СтруктураПараметров.Вставить("Регистратор",Ссылка);
	СтруктураПараметров.Вставить("Ссылка", Ссылка);
	СтруктураПараметров.Вставить("Заголовок",Заголовок);
	СтруктураПараметров.Вставить("ВидДвиженияПоРасчетам","Оплата");
	
	ЭтоПереносЗадолженности = Ложь;
	Если ВидДокумента = "КорректировкаДолга" Тогда
		Если СтруктураПараметров.ВидОперации  = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			ЭтоПереносЗадолженности = Истина;
			Если НЕ СтруктураШапкиДокумента = Неопределено Тогда
				СтруктураПараметров.Вставить("ВалютаДокумента", СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
				КурсДокумента      = СтруктураШапкиДокумента.КурсВзаиморасчетов;
				КратностьДокумента = СтруктураШапкиДокумента.КратностьВзаиморасчетов;
			Иначе
				ВалютаДокумента = Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				СтруктураКурса  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, СтруктураПараметров.Дата);
				СтруктураПараметров.Вставить("ВалютаДокумента", ВалютаДокумента);
				КурсДокумента      = СтруктураКурса.Курс;
				КратностьДокумента = СтруктураКурса.Кратность;
			КонецЕсли;
		Иначе
			СтруктураПараметров.Вставить("ВалютаДокумента", ВалютаРегламентированногоУчета);
			КурсДокумента = 1;
			КратностьДокумента = 1;
		КонецЕсли;
	ИначеЕсли НЕ СтруктураШапкиДокумента = Неопределено 
		       И СтруктураШапкиДокумента.Свойство("КурсВалютыДокумента") Тогда
		КурсДокумента = СтруктураШапкиДокумента.КурсВалютыДокумента;
		КратностьДокумента = СтруктураШапкиДокумента.КратностьВалютыДокумента;
	Иначе
		Если не СтруктураШапкиДокумента = Неопределено и СтруктураШапкиДокумента.Свойство("КурсДокумента") Тогда
			КурсДокумента = СтруктураШапкиДокумента.КурсДокумента;
		Иначе
			КурсДокумента = ЗаполнениеДокументов.КурсДокумента(Ссылка,ВалютаРегламентированногоУчета);
		КонецЕсли; 
		Если не СтруктураШапкиДокумента = Неопределено и СтруктураШапкиДокумента.Свойство("КратностьДокумента") Тогда
			КратностьДокумента = СтруктураШапкиДокумента.КратностьДокумента;
		Иначе
			КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(Ссылка,ВалютаРегламентированногоУчета);
		КонецЕсли; 
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("КурсДокумента", КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента", КратностьДокумента);
	
	ВидОперацииРасчет = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	
	СтруктураПараметров.Вставить("РасчетыВозврат",ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента,СтруктураПараметров.ВидОперации).РасчетыВозврат);
	Если СтруктураПараметров.РасчетыВозврат=Неопределено тогда
		//Другие операции не обрабатываются
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидДокумента = "АвансовыйОтчет" Или
		 ВидДокумента = "Взаимозачет" Или
		 ВидДокумента = "КорректировкаДолга" Тогда
		СтруктураПараметров.Вставить("ПлатежныйДокумент"	, Ложь);
	Иначе
		СтруктураПараметров.Вставить("ПлатежныйДокумент"	, Истина);
	КонецЕсли;
	
	ДобавитьПараметрыЗависимыеОтНаправленияИРасчетыВозврат(СтруктураПараметров);
	
	ВидСчетаОрганизации=?(СтруктураПараметров["СчетОрганизации"]=Неопределено,Неопределено,СтруктураПараметров["СчетОрганизации"].ВидСчета);
	ВВалюте = (Не(СтруктураПараметров["ВалютаДокумента"]=ВалютаРегламентированногоУчета));
	
	Если НЕ ЗначениеЗаполнено(КоррСчет) Тогда
		Если ВидДокумента = "ПриходныйКассовыйОрдер" Или ВидДокумента = "РасходныйКассовыйОрдер" Тогда
			КоррСчет = ПланыСчетов.Хозрасчетный[?(ВВалюте,"КассаВИностраннойВалюте","КассаВНациональнойВалюте")].Ссылка;
		Иначе
			Если ВидСчетаОрганизации = "Расчетный" Тогда
				КоррСчет = ПланыСчетов.Хозрасчетный[?(ВВалюте,"ТекущиеСчетаВИностраннойВалюте"     , "ТекущиеСчетаВНациональнойВалюте")].Ссылка;
			Иначе
				КоррСчет = ПланыСчетов.Хозрасчетный[?(ВВалюте,"ДругиеСчетаВБанкеВИностраннойВалюте", "ДругиеСчетаВБанкеВНациональнойВалюте")].Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕслИ;
	СтруктураПараметров.Вставить("КоррСчет",КоррСчет);
	
	//Получение данных таблицы расшифровки платежа
	// Выгрузка нужных колонок табличной части в таблицу значений с переименованием названий счетов
	СтруктураТаблицы = Новый Структура(""+?(ВидДокумента="АвансовыйОтчет","Сумма,Контрагент,","СтатьяДвиженияДенежныхСредств,СуммаПлатежа,")+"
	|Сделка, 
	|ДоговорКонтрагента, СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,
	|КурсВзаиморасчетов,КратностьВзаиморасчетов, СуммаВзаиморасчетов");
	
	СтруктураТаблицы.Вставить("СчетУчетаРасчетовСКонтрагентом", "СчетОплаты");
	СтруктураТаблицы.Вставить("СчетУчетаРасчетовПоАвансам"    , "СчетАванса");
	СтруктураТаблицы.Вставить("ЗаТару", "ВозвратнаяТара");
	СтруктураТаблицы.Вставить(?(ВидДокумента="АвансовыйОтчет", "Сумма", "СуммаПлатежа"), "СуммаСНДСВал");
	
	ТабличнаяЧасть = Ссылка[?(ВидДокумента="АвансовыйОтчет", "ОплатаПоставщикам", "РасшифровкаПлатежа")];
	
	РеестрПлатежей = ОбщегоНазначения.СформироватьТаблицуЗначений(ТабличнаяЧасть, СтруктураТаблицы, Истина);
	Если РеестрПлатежей = Неопределено Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при движении денежных средств. Отсутствуют необходимые реквизиты в расшифровке платежа.",Ложь,Заголовок);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ВидДокумента <> "АвансовыйОтчет" Тогда
		
		РеестрПлатежей.Колонки.Добавить("Контрагент");
		РеестрПлатежей.ЗаполнитьЗначения(СтруктураПараметров.Контрагент, "Контрагент");
		
	КонецЕсли;
	
	РеестрПлатежей.Колонки.Добавить("КоррСубконто1");
	РеестрПлатежей.Колонки.Добавить("КоррСубконто2");
	РеестрПлатежей.Колонки.Добавить("КоррСубконто3");
	
	Для каждого ВидСубконтоКоррСчета из КоррСчет.ВидыСубконто Цикл
		
		Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета Тогда
			
			РеестрПлатежей.ЗаполнитьЗначения(СтруктураПараметров.СчетОрганизации, "КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки);
			
		КонецЕсли;
		
		Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств тогда
			
			РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СтатьяДвиженияДенежныхСредств"), "КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки);
			
		КонецЕсли;
		
		Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации и ВидДокумента="АвансовыйОтчет" тогда
			
			РеестрПлатежей.ЗаполнитьЗначения(СтруктураПараметров.ФизЛицо, "КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РеестрПлатежей.Колонки.Добавить("СуммаСНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ДанныеВалютыРегламентированногоУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, СтруктураПараметров.Период);

	Для Каждого СтрокаТаблицы Из РеестрПлатежей Цикл
		
		Если ВВалюте Тогда
			
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
										         				СтруктураПараметров.ВалютаДокумента, ВалютаРегламентированногоУчета,
													            СтруктураПараметров.КурсДокумента, ДанныеВалютыРегламентированногоУчета.Курс, 
														        СтруктураПараметров.КратностьДокумента, ДанныеВалютыРегламентированногоУчета.Кратность);
																
		Иначе
			
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			
		КонецЕсли;
		
	КонецЦикла;

	РеестрПлатежей.Колонки.Добавить("СделкаРегл");
	ПоДоговоруВЦелом = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	Для Каждого СтрокаТаблицы Из РеестрПлатежей Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = ПоДоговоруВЦелом Тогда
			
			СтрокаТаблицы.СделкаРегл = Неопределено;
			
		Иначе
			
			СтрокаТаблицы.СделкаРегл = СтрокаТаблицы.Сделка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Зачистка промежуточных данных
	Если НЕ ВидДокумента="АвансовыйОтчет" Тогда
		
		РеестрПлатежей.Колонки.Удалить("СтатьяДвиженияДенежныхСредств");
		СтруктураПараметров.Удалить("СчетОрганизации");
		СтруктураПараметров.Удалить("ДатаОплаты");
		
	Иначе
		Если РеестрПлатежей.Количество() > 0 Тогда
			СтруктураПараметров.Вставить("Контрагент", РеестрПлатежей[0].Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Таблица", РеестрПлатежей);
	
	Возврат СтруктураПараметров;

КонецФункции

//Формирует структуру параметров для передачи в процедуры движения денежных средств по таблице (дереву) значений (сведения из регистра) 
Функция ПодготовкаСтруктурыПараметровДляДвиженияДенегИзРегистраСведений(ТаблицаДвижений,КоллекцияКолонокДереваЗначений=Неопределено) Экспорт
	
	Если ТаблицаДвижений.Количество()=0 тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидДокумента = ТаблицаДвижений[0]["ВидДокумента"];
	
	//Реквизиты, общие для всех движений документа
	ОбщиеРеквизиты = Новый Структура("ВидДокумента,Организация,ВалютаДокумента,
	|"+?(ВидДокумента="АвансовыйОтчет","","Контрагент,")+"Период,Регистратор,НаправлениеДвижения,РасчетыВозврат,Контрагент,КоррСчет,КурсДокумента,КратностьДокумента");
	
	//Реквизиты табличной части
	СтруктураТаблицы = Новый Структура(?(ВидДокумента="АвансовыйОтчет","Контрагент,","")+"
	|Контрагент, ДоговорКонтрагента, СчетОплаты, СчетАванса, 
	|Сделка, 
	|КоррСубконто1,КоррСубконто2,КоррСубконто3,СуммаСНДСВал,СуммаСНДСРегл,НомерСтрокиДокумента");
	
	СтруктураПараметров = БухгалтерскийУчет.ПреобразоватьТаблицуЗначенийВСтруктуру(ТаблицаДвижений,ОбщиеРеквизиты,Истина,СтруктураТаблицы,КоллекцияКолонокДереваЗначений);
	

	Если 	 ВидДокумента = "ВозвратТоваровПоставщику"
		Или  ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ"
		Или  ВидДокумента = "ПолучениеУслугПоПереработке"
		Или  ВидДокумента = "ОтчетКомиссионераОПродажах"
		Или  ВидДокумента = "ВозвратТоваровОтПокупателя"
		Или  ВидДокумента = "АктОбОказанииПроизводственныхУслуг"
		Или  ВидДокумента = "ОтчетКомитентуОПродажах"
		Или  ВидДокумента = "ПоступлениеТоваровИзПереработки"
		Или  ВидДокумента = "АвансовыйОтчет" 
		Или	 ВидДокумента = "Взаимозачет" 
		Или	 ВидДокумента = "КорректировкаДолга" Тогда
		СтруктураПараметров.Вставить("ПлатежныйДокумент"	, Ложь);
	Иначе
		СтруктураПараметров.Вставить("ПлатежныйДокумент"	, Истина);
	КонецЕсли;
	
	ДобавитьПараметрыЗависимыеОтНаправленияИРасчетыВозврат(СтруктураПараметров);

	СтруктураПараметров.Таблица.Колонки.Добавить("СделкаРегл");
	ПоДоговоруВЦелом = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	Для Каждого СтрокаТаблицы Из СтруктураПараметров.Таблица Цикл
		Если СтрокаТаблицы.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = ПоДоговоруВЦелом Тогда
			СтрокаТаблицы.СделкаРегл = Неопределено;
		Иначе
			СтрокаТаблицы.СделкаРегл = СтрокаТаблицы.Сделка;
		КонецЕсли;
	КонецЦикла;

	СтруктураПараметров.Вставить("Заголовок", ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураПараметров.Регистратор));
	
	Возврат СтруктураПараметров;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////
// Подготовка данных по задолженности для обработки

//Определяет направление изменения состояния расчетов расчетов с контрагентами в зависимости от вида документа и вида операции документа
Функция ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента,ВидОперации = Неопределено) Экспорт

	ВидДействийДокумента = Новый Структура("НаправлениеДвижения,РасчетыВозврат");
	ВидыДокументов       = Новый Соответствие();

	ВидДвиженияПоступление = Перечисления.НаправленияДвижений.Поступление;
	ВидДвиженияВыбытие     = Перечисления.НаправленияДвижений.Выбытие;
	
	ВидыДокументов.Вставить("ПоступлениеТоваровУслуг"    , ВидДвиженияПоступление);
	ВидыДокументов.Вставить("ПоступлениеТоваровУслугВНТТ", ВидДвиженияПоступление);
	ВидыДокументов.Вставить("ПоступлениеДопРасходов"     , ВидДвиженияПоступление);
	ВидыДокументов.Вставить("ПоступлениеНМА"             , ВидДвиженияПоступление);
	ВидыДокументов.Вставить("ВозвратТоваровОтПокупателя" , ВидДвиженияПоступление);
	ВидыДокументов.Вставить("ВозвратПереданныхТоваров"   , ВидДвиженияПоступление);	
	ВидыДокументов.Вставить("ПолучениеУслугПоПереработке", ВидДвиженияПоступление);
	ВидыДокументов.Вставить("ГТДИмпорт"                  , ВидДвиженияПоступление);
	ВидыДокументов.Вставить("АвансовыйОтчет"             , ВидДвиженияПоступление);

	
	ВидыДокументов.Вставить("РеализацияТоваровУслуг"            , ВидДвиженияВыбытие);
	ВидыДокументов.Вставить("РеализацияУслугПоПереработке"      , ВидДвиженияВыбытие);
	ВидыДокументов.Вставить("АктОбОказанииПроизводственныхУслуг", ВидДвиженияВыбытие);
	ВидыДокументов.Вставить("ПередачаНМА"                       , ВидДвиженияВыбытие);
	ВидыДокументов.Вставить("ПередачаОС"                        , ВидДвиженияВыбытие);
	ВидыДокументов.Вставить("ПередачаТоваров"          			, ВидДвиженияВыбытие);	
	ВидыДокументов.Вставить("ВозвратТоваровПоставщику"          , ВидДвиженияВыбытие);
	ВидыДокументов.Вставить("ВозвратТоваровПоставщикуИзНТТ"		, ВидДвиженияВыбытие);

	Если ВидДокумента = "ОтчетКомиссионераОПродажах" или ВидДокумента = "ОтчетКомиссионераОПродажах" Тогда
		// Направление изменения состояния расчетов зависит от обрабатываемой операции
		Если НЕ ЗначениеЗаполнено(ВидОперации) или ВидОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации тогда
			ВидыДокументов.Вставить("ОтчетКомиссионераОПродажах",ВидДвиженияВыбытие);
		Иначе
			ВидыДокументов.Вставить("ОтчетКомиссионераОПродажах",ВидДвиженияПоступление);
		КонецЕсли;
		ВидДействийДокумента.Вставить("РасчетыВозврат",Перечисления.РасчетыВозврат.Расчеты);
	КонецЕсли; 
	
                                
	ВидДействийДокумента.Вставить("НаправлениеДвижения",ВидыДокументов[ВидДокумента]);

	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	
	Если ВидДокумента = "ОтчетКомиссионераОПродажах" или типЗнч(ВидДокумента) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		// Вид операции моет быть задан, а может быть и не задан
		ВидДействийДокумента.Вставить("РасчетыВозврат",ВидОперацииРасчет);
	ИначеЕсли ЗначениеЗаполнено(ВидОперации) тогда
		//Определение вида операции

		РасчетВозвратПоВидуОпераций = Новый Соответствие();

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия          , ВидОперацииРасчет);
		//Смартис Лиманчук начало 02.10.2012
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссияНал       , ВидОперацииРасчет);
		//Смартис Лиманчук окончание 02.10.2012
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование             , ВидОперацииРасчет);
		//Смартис Лиманчук начало 05.12.2012
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал          , ВидОперацииРасчет);
		//Смартис Лиманчук окончание 05.12.2012
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства     , ВидОперацииРасчет);
		//Смартис Лиманчук начало 18.01.2013
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительстваНал  , ВидОперацииРасчет);
		//Смартис Лиманчук окончание 18.01.2013
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика		   , ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации, ВидОперацииРасчет);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия                , ВидОперацииРасчет);
		//Смартис Лиманчук начало 02.10.2012
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссияНал             , ВидОперацииРасчет);
		//Смартис Лиманчук окончание 02.10.2012
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Оборудование                   , ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Брак                           , ВидОперацииРасчет);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия		   , ВидОперацииВозврат);
		//Смартис Лиманчук начало 19.12.2012
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссияНал	   , ВидОперацииВозврат);
		//Смартис Лиманчук окончание 19.12.2012
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование			   , ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия       , ВидОперацииВозврат);
		//Смартис Лиманчук начало 02.10.2012
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссияНал    , ВидОперацииВозврат);
		//Смартис Лиманчук окончание 02.10.2012
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование          , ВидОперацииВозврат);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.БланкиСтрогогоУчета       , ВидОперацииРасчет); 
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПередачаТоваров.ВПереработку          			, ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки          			, ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваров.ИзПереработки          			, ВидОперацииВозврат);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваров.ОтЗаказчика          				, ВидОперацииВозврат);
		
                                             
		ВидДействийДокумента.Вставить("РасчетыВозврат", РасчетВозвратПоВидуОпераций[ВидОперации]);
	Иначе
		Если    ВидДокумента = "РеализацияУслугПоПереработке"
			ИЛИ ВидДокумента = "АктОбОказанииПроизводственныхУслуг"
			ИЛИ ВидДокумента = "РеализацияТоваровУслуг"
			ИЛИ ВидДокумента = "ПолучениеУслугПоПереработке"
			ИЛИ ВидДокумента = "ПоступлениеНМА"
			ИЛИ ВидДокумента = "ПередачаНМА"
			ИЛИ ВидДокумента = "ПередачаОС"
			ИЛИ ВидДокумента = "ГТДИмпорт"
			ИЛИ ВидДокумента = "ОтчетКомитентуОПродажах"
			ИЛИ ВидДокумента = "АвансовыйОтчет" Тогда
			
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
			
		ИначеЕсли ВидДокумента = "ВозвратТоваровОтПокупателя" 
		      ИЛИ ВидДокумента = "ВозвратТоваровПоставщику"
			  ИЛИ ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ" Тогда			  
			  
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииВозврат);
			
		Конецесли;
	Конецесли;

	Возврат ВидДействийДокумента;

КонецФункции

//Формирует структуру параметров для передачи в процедуры зачета аванса по ссылке на документ
Функция ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, Заголовок = Неопределено,СуммаСНДС = 0) Экспорт

	МетаданныеДокумента = Ссылка.Метаданные();
	ВидДокумента = МетаданныеДокумента.Имя;
	Если НЕ ЗначениеЗаполнено(Заголовок) тогда
		Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	КонецЕсли;
	 
	НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента).НаправлениеДвижения;
	Если НаправлениеДвижения = Неопределено тогда
		//Другие документы не обрабатываются
		//ОбщегоНазначения.СообщитьОбОшибке("Документ не обрабатывается в блоке расчета авансов.",Ложь,Заголовок);
		Возврат Ложь;
	Конецесли;

	ВидОперации = ?(СтруктураШапкиДокумента.Свойство("ВидОперации"),СтруктураШапкиДокумента["ВидОперации"],Неопределено);
	РасчетыВозврат = ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента,ВидОперации).РасчетыВозврат;
	Если РасчетыВозврат = Неопределено тогда
		//Другие операции не обрабатываются
		//ОбщегоНазначения.СообщитьОбОшибке("Вид операции """+ВидОперации+""" по документу не обрабатывается в блоке расчета авансов.",Ложь,Заголовок);
		Возврат Ложь;                                  
	КонецЕсли;
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("Организация,ВалютаДокумента, ВидОперации
	                                      |,ОтражатьВНалоговомУчете
										  |,Контрагент, ДоговорКонтрагента
										  |,КурсВзаиморасчетов,КратностьВзаиморасчетов
										  |,СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам
										  |");


	Для Каждого Реквизит из СтруктураПараметров Цикл
		СтруктураПараметров.Вставить(Реквизит.Ключ,?(СтруктураШапкиДокумента.Свойство(Реквизит.Ключ),СтруктураШапкиДокумента[Реквизит.Ключ],Неопределено));
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ОтражатьВНалоговомУчете", ?(СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете"), СтруктураШапкиДокумента["ОтражатьВБухгалтерскомУчете"], Неопределено));
	
	СтруктураПараметров.Вставить("НаправлениеДвижения", НаправлениеДвижения);
	СтруктураПараметров.Вставить("РасчетыВозврат"     , РасчетыВозврат);
	
	СтруктураПараметров.Вставить("ВидДокумента"       , ВидДокумента);	
	СтруктураПараметров.Вставить("Регистратор"        , Ссылка);	
	СтруктураПараметров.Вставить("Заголовок"          , Заголовок);	
	СтруктураПараметров.Вставить("Период"             , Ссылка.Дата);	
	СтруктураПараметров.Вставить("ВестиПоДокументамРасчетовСКонтрагентом", СтруктураПараметров.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом);
	
//	СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
	
	Если СтруктураШапкиДокумента.Свойство("КурсВалютыДокумента") Тогда
		
		СтруктураПараметров.Вставить("КурсДокумента"     , СтруктураШапкиДокумента.КурсВалютыДокумента);	
		СтруктураПараметров.Вставить("КратностьДокумента", СтруктураШапкиДокумента.КратностьВалютыДокумента);
		
	Иначе
		
		СтруктураКурсов = Новый Структура("Курс, Кратность", 1, 1);
		
		Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
			
			СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(Ссылка.ВалютаДокумента, Ссылка.Дата);
			
		КонецЕсли;
		
		СтруктураПараметров.Вставить("КурсДокумента"     , СтруктураКурсов.Курс);	
		СтруктураПараметров.Вставить("КратностьДокумента", СтруктураКурсов.Кратность);	
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
КонецФункции

//Формирует структуру параметров для передачи в процедуры движения денежных средств по таблице (дереву) значений (сведения из регистра) 
Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаИзРегистраСведений(ТаблицаДвижений,КоллекцияКолонокДереваЗначений=Неопределено) Экспорт
	
	Если ТаблицаДвижений.Количество()=0 тогда
		Возврат Ложь;
	Конецесли;
	ВидДокумента = ТаблицаДвижений[0]["ВидДокумента"];
	
	//Реквизиты, общие для всех движений документа
	ОбщиеРеквизиты = Новый Структура("ВидДокумента,Организация,ВалютаДокумента,
	|"+?(ВидДокумента="АвансовыйОтчет","","Контрагент,")+"Период,Регистратор,НаправлениеДвижения,РасчетыВозврат,Контрагент,КоррСчет,КурсДокумента,КратностьДокумента");
	
	//Реквизиты табличной части
	СтруктураТаблицы = Новый Структура(?(ВидДокумента="АвансовыйОтчет","Контрагент,","")+"
	|Контрагент, ДоговорКонтрагента, СчетОплаты, СчетАванса, 
	|Сделка, 
	|КоррСубконто1,КоррСубконто2,КоррСубконто3,СуммаСНДСВал,СуммаСНДСРегл,НомерСтрокиДокумента");

	СтруктураПараметров = БухгалтерскийУчет.ПреобразоватьТаблицуЗначенийВСтруктуру(ТаблицаДвижений,ОбщиеРеквизиты,Истина,СтруктураТаблицы,КоллекцияКолонокДереваЗначений);
	
	СтруктураПараметров.Вставить("Заголовок", ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураПараметров.Регистратор));
	
	ТаблицаЗадолженности = СтруктураПараметров.Таблица;
	ТаблицаЗадолженности.Колонки.Добавить("ВидДоговораКонтрагента");
	Для Каждого Долг Из ТаблицаЗадолженности Цикл
		Долг.ВидДоговораКонтрагента = Долг.ДоговорКонтрагента.ВидДоговора;
	КонецЦикла;
	

	СтруктураПараметров.Таблица = ТаблицаЗадолженности;
	
	СтруктураПараметров.Таблица.Колонки.Добавить("СделкаРегл");
	ПоДоговоруВЦелом = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	Для Каждого СтрокаТаблицы Из СтруктураПараметров.Таблица Цикл
		Если СтрокаТаблицы.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = ПоДоговоруВЦелом Тогда
			СтрокаТаблицы.СделкаРегл = Неопределено;
		Иначе
			СтрокаТаблицы.СделкаРегл = СтрокаТаблицы.Сделка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Проверка возможности обработки взаиморасчетов в валюте
//
Функция ПроверкаРасчетыВУсловныхЕдиницах(СтруктураПараметров, Договор, ВалютаРегламентированногоУчета, Отказ, Заголовок, Сообщать = Ложь) Экспорт

	ВидДокумента	= СтруктураПараметров.ВидДокумента;
	ВидОперации = ?(СтруктураПараметров.Регистратор.Метаданные().Реквизиты.Найти("ВидОперации")=Неопределено,Неопределено,СтруктураПараметров.Регистратор["ВидОперации"]);
	ЭтоВозврат 		= (СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);
	ВалютаДокумента = СтруктураПараметров.ВалютаДокумента;
	
	Если СтруктураПараметров.ВидДокумента = "КорректировкаДолга" Тогда
		НаправлениеДвижения = Строка(СтруктураПараметров.НаправлениеДвижения);
		ЭтоОплата 	= Истина;
		ЭтоПокупки = ((НаправлениеДвижения = "Выбытие" и не (ЭтоВозврат)) или (НаправлениеДвижения = "Поступление" и ЭтоВозврат));
		ЭтоПродажи = ((НаправлениеДвижения = "Поступление" и не (ЭтоВозврат)) или (НаправлениеДвижения = "Выбытие" и ЭтоВозврат));
	ИначеЕсли СтруктураПараметров.ВидДокумента = "ОтчетКомиссионераОПродажах" Тогда
		НаправлениеДвижения = Строка(СтруктураПараметров.НаправлениеДвижения);
		ЭтоОплата 	= Ложь;
		ЭтоПокупки = (НаправлениеДвижения = "Поступление");
		ЭтоПродажи = (НаправлениеДвижения = "Выбытие");
	ИначеЕсли Не(ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента, ВидОперации).НаправлениеДвижения=Неопределено) тогда
		ЭтоОплата 	= Истина;
		НаправлениеДвижения = Строка(ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента, ВидОперации).НаправлениеДвижения);
		ЭтоПокупки = ((НаправлениеДвижения = "Выбытие" и не (ЭтоВозврат)) или (НаправлениеДвижения = "Поступление" и ЭтоВозврат));
		ЭтоПродажи = ((НаправлениеДвижения = "Поступление" и не (ЭтоВозврат)) или (НаправлениеДвижения = "Выбытие" и ЭтоВозврат));
	ИначеЕсли Не(ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента, ВидОперации).НаправлениеДвижения=Неопределено) тогда
		ЭтоОплата 	= Ложь;
		НаправлениеДвижения = Строка(ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента, ВидОперации).НаправлениеДвижения);
		ЭтоПокупки = ((НаправлениеДвижения = "Поступление" и не (ЭтоВозврат)) или (НаправлениеДвижения = "Выбытие" и ЭтоВозврат));
		ЭтоПродажи = ((НаправлениеДвижения = "Выбытие" и не (ЭтоВозврат)) или (НаправлениеДвижения = "Поступление" и ЭтоВозврат));
	Иначе
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ не учитывается автоматически в регистрах расчетов с контрагентами по бухгалтерскому учету.
			|	Движения регистров не могут быть сформированы.", Отказ, Заголовок); 
		КонецЕсли;
		Возврат Ложь;
	Конецесли;

	Если НЕ (ЭтоПокупки ИЛИ ЭтоПродажи) Тогда 
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Переданы неверные параметры для проверки возможности проведения по регистрам расчетов с контрагентами по бухгалтерскому учету:
			|	Вид документа: """ + ВидДокумента + """, вид операции: """ + ВидОперации + """
			|	Движения регистров не могут быть сформированы.", Отказ, Заголовок); 
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	РасчетыВВалюте = Договор.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;

	Если НЕ РасчетыВВалюте
		И СтруктураПараметров.СпособВеденияВзаиморасчетов <> Перечисления.СпособыВеденияВзаиморасчетовВБухгалтерскомУчете.НаРегистрахНакопления 
		Тогда
		Возврат Ложь;
	КонецЕсли;

	Покупки = ЭтоПокупки 
		И (Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
			ИЛИ Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
			ИЛИ Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	Продажи = ЭтоПродажи 
		И (Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			ИЛИ Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
			ИЛИ Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом); 

	Если НЕ (Покупки ИЛИ Продажи) Тогда
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Проведение по регистрам расчетов с контрагентами по бухгалтерскому учету невозможно:
			|	Вид договора не соответствует операции.
			|	Вид договора: """ + Договор.ВидДоговора + """, операция: """ + ?(Покупки, "покупка", "продажа") + """", Отказ, Заголовок); 
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	Возврат Новый Структура("Покупки, Продажи", Покупки, Продажи);

КонецФункции //ПроверкаРасчетыВУсловныхЕдиницах 

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УЧЕТА РАСЧЕТОВ С КОНТАГЕНТАМИ  - ОПЛАТА (ВЫДЕЛЕНИЕ АВАНСА)

// формируется записи в регистры сведений РасчетыПоПриобретениюОрганизации и РасчетыПоРеализацииОрганизации
// из документов движения денежных средст (оплаты). При необходимости формирует запись в последовательности расчетов
// или принудительно сбивает границу последовательности на момент движений документа
Функция ЗафиксироватьДвижениеДенегВРегистреРасчетов(Объект, СтруктураПараметров, ЗаписыватьДвижения, СтруктураДвижений) экспорт

	РасчетыВозврат      = СтруктураПараметров.РасчетыВозврат;
	НаправлениеДвижения = СтруктураПараметров.НаправлениеДвижения;
	РеестрПлатежей      = СтруктураПараметров.Таблица;
	КоррСчет            = СтруктураПараметров.КоррСчет;

	//Определяем, учитывается ли аванс в документе
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураПараметров.Период, СтруктураПараметров.Организация);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
		УчитыватьАванс = ПараметрыУчетнойПолитики.ОпределятьАвансыПриПроведенииДокумента;
	Иначе
		УчитыватьАванс = Истина;
	Конецесли;
	
	Если     НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление И РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты 
		 ИЛИ НаправлениеДвижения = Перечисления.НаправленияДвижений.Выбытие     И РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
		 
		РегистрРасчетов = ОбщегоНазначения.ПолучитьДвижение(Объект, РегистрыСведений["РасчетыПоРеализацииОрганизации"]);
		
		ИмяПоследовательностиДляРегистрации = "РасчетыПоРеализацииОрганизации";
		
	Иначе
		
		РегистрРасчетов = ОбщегоНазначения.ПолучитьДвижение(Объект, РегистрыСведений["РасчетыПоПриобретениюОрганизации"]);

		ИмяПоследовательностиДляРегистрации = "РасчетыПоПриобретениюОрганизации";

	КонецЕсли;

	Если РегистрРасчетов = Неопределено тогда
		
		Возврат Ложь;
		
	КонецЕсли;

	ТаблицаДвижений = РегистрРасчетов.Выгрузить();
	РеестрПлатежейКопия = РеестрПлатежей.Скопировать();
	РеестрПлатежейКопия.Колонки.Сделка.Имя = "Сделка_";
	РеестрПлатежейКопия.Колонки.СделкаРегл.Имя = "Сделка";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РеестрПлатежейКопия, ТаблицаДвижений);
	
	Для каждого Реквизит из СтруктураПараметров Цикл
		
		Если Реквизит.Ключ = "Таблица" Тогда
			
			Продолжить;
			
		КонецЕсли;

		Если Не ТаблицаДвижений.Колонки.Найти(Реквизит.Ключ) = Неопределено Тогда
			
			ТаблицаДвижений.ЗаполнитьЗначения(Реквизит.Значение, Реквизит.Ключ);
			
		Конецесли;
		
	КонецЦикла;
	
	РегистрРасчетов.Загрузить(ТаблицаДвижений);

	// Регистрация в последовательности при необходимости
	СдвигГраницыПоследовательностиНазад(ИмяПоследовательностиДляРегистрации, Новый МоментВремени(СтруктураПараметров.Период,СтруктураПараметров.Регистратор), Новый Структура("Организация", СтруктураПараметров.Организация));
	
	Если УчитыватьАванс тогда
		
		ПоследовательностьДляРегистрации = Объект.ПринадлежностьПоследовательностям[ИмяПоследовательностиДляРегистрации];
		
		Если Не ПоследовательностьДляРегистрации.Количество() =0 Тогда
			ПоследовательностьДляРегистрации.Очистить();
		КонецЕсли; 
		
		ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();
		ЗаписьРегистрации.Период 	  = СтруктураПараметров.Период;
		ЗаписьРегистрации.Организация = СтруктураПараметров.Организация;
	КонецЕсли; 
	

	Если ЗаписыватьДвижения Тогда

		Если ТаблицаДвижений.Количество() > 0 Тогда
			Если ТипЗнч(Объект) <> Тип("ДокументОбъект.КорректировкаДолга") Тогда
				РегистрРасчетов.Записать(Ложь);
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		СтруктураДвижений.Вставить("РегистрРасчетов", РегистрРасчетов);
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Движение денег. Оплата по прочим операциям (без выделения аванса и определения состояния задолженности)

// Выполняет расход денег по указанному документу
//
// Параметры
// Объект          - ДокументСсылка          - Документ для которого выполяентся 
//                                             операция.
// РасчетыВВалюте  - Булево                  - Признак расчетов в валюте
// СчетКт          - ПланСчетов.Хозрасчетный - корреспондирующий счет
//
Процедура ДвижениеДенегПрочийРасход(Объект, РасчетыВВалюте, СчетКт, КурсДокумента=1, КратностьДокумента=1, СтруктураДвижений=Неопределено) Экспорт

	Ссылка              = Объект.Ссылка;
	Движения            = Объект.Движения;
	ПроводкиБУ          = Движения.Хозрасчетный;

	Организация         = Ссылка.Организация;
	//ИЗМЕНЕНО Верескул Игорь(Начало 14.12.2020		
	Если Объект.Дата >= Дата("20210101") Тогда
		НаличнаяОрганизация = Константы.НПТ.Получить();
	Иначе
		НаличнаяОрганизация = Константы.КрафтКолор.Получить();
	КонецЕсли;
	//Смартис Лиманчук начало 06.11.2012
	Попытка
		Если Ссылка.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентамиНал Тогда
			Организация = НаличнаяОрганизация;
		КонецЕсли;
	Исключение
	КонецПопытки;
	//Смартис Лиманчук окончание 06.11.2012
	//Окончание)Верескул Игорь 
	ВалютаДокумента     = Ссылка.ВалютаДокумента;
	ВсегоСуммаДокумента = Ссылка.СуммаДокумента;
	Попытка
		ДатаДока            = ?(Ссылка.Оплачено,УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Ссылка.Дата,Ссылка.ДатаОплаты),Ссылка.Дата);
	Исключение
		ДатаДока            = Ссылка.Дата;
	КонецПопытки;
	МоментДокумента     = Новый МоментВремени(ДатаДока, Ссылка);

	ВалютаРег           = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ДанныеВалюты        = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
	
	//Получение обособленного подразделения организации
	ОбособленноеПодразделение = Неопределено;
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Объект.Дата, УчетнаяПолитикаНеЗадана, Объект.Организация, "Бух");
	Если НЕ УчетнаяПолитикаНеЗадана Тогда
		Если мУчетнаяПолитикаБУ.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
			Попытка 
				Если Объект.Метаданные().Реквизиты.Найти("Касса") <> Неопределено Тогда
					ОбособленноеПодразделение = Объект.Касса.ОбособленноеПодразделение;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Если  ТипЗнч(Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Контрагент      = Ссылка.Контрагент;
		
		//Смартис Лиманчук начало 04.10.2012
		//Если Ссылка.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		Если Ссылка.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю ИЛИ Ссылка.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателюНал Тогда
		//Смартис Лиманчук окончание 04.10.2012
			
			ВидОперации = "Возврат";
			
		Иначе
			
			//Если Ссылка.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
			ВидОперации = "Оплата";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		
		Контрагент      = Ссылка.Контрагент;
		СчетОрганизации = Ссылка.СчетОрганизации;
		
		Если Ссылка.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
			
			ВидОперации = "Возврат";
			
		Иначе
			
			//Если Ссылка.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
			ВидОперации = "Оплата";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.АккредитивПереданный")
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное")
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПлатежноеТребованиеПоручениеПолученное")
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		
		Контрагент      = Ссылка.Контрагент;
		СчетОрганизации = Ссылка.СчетОрганизации;
		
		Если Ссылка.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
			
			ВидОперации = "Возврат";
			
		Иначе
			
			//Если Ссылка.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику Тогда
			ВидОперации = "Оплата";
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при расходе (возврате) денежных средств.");
		Возврат;
		
	КонецЕсли;

	ТабличнаяЧасть = Объект["РасшифровкаПлатежа"];

	// Выгрузка нужных колонок табличной части в таблицу значений с переименованием названий счетов
	СтруктураРеквизитов = Новый Структура("
	|ДоговорКонтрагента, СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,
	|СтатьяДвиженияДенежныхСредств, СуммаПлатежа, СуммаВзаиморасчетов",
	,?(ВидОперации = "Оплата","СчетОплаты","СчетАванса")
	,?(ВидОперации = "Оплата","СчетАванса","СчетОплаты"));

	РеестрПлатежей = ОбщегоНазначения.СформироватьТаблицуЗначений(ТабличнаяЧасть, СтруктураРеквизитов);
	
	Если РеестрПлатежей = Неопределено тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при расходе (возврате) денежных средств.");
		Возврат;
		
	КонецЕсли;

	ЗадолженностьРеестр = РеестрПлатежей.Скопировать();
	ЗадолженностьРеестр.Свернуть("ДоговорКонтрагента,СчетОплаты", "СуммаПлатежа");
	ЗадолженностьРеестр.Колонки.Добавить("Задолженность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	//Оценка текущего состояния расчетов по БУ ля каждого счета из счетов оплаты в документе.
	Для каждого СчетДоговор из ЗадолженностьРеестр цикл

		Если СчетДоговор.СуммаПлатежа=0 тогда
			
			Продолжить;
			
		КонецЕсли;

		Если РасчетыВВалюте Тогда
			
			УсловиеВалюта=ВалютаДокумента;
			
		Иначе
			
			УсловиеВалюта=Справочники.Валюты.ПустаяСсылка();
			
		КонецЕсли;

		//СчетДоговор.Задолженность = - БухгалтерскийУчет.ПолучитьОстатокПоСчету(Организация,МоментДокумента,СчетДоговор.СчетОплаты,УсловиеВалюта ,Контрагент, СчетДоговор.ДоговорКонтрагента);
		
		МоментДокумента = Новый МоментВремени(ДатаДока,Ссылка);
		ТаблицаЗадолженностей = БухгалтерскийУчет.ПолучитьОстатокПоСчету(Организация,МоментДокумента,СчетДоговор.СчетОплаты,УсловиеВалюта ,Контрагент, СчетДоговор.ДоговорКонтрагента,,-1);
		Если РасчетыВВалюте Тогда
			СчетДоговор.Задолженность = ТаблицаЗадолженностей.Итог("ВалютнаяСуммаОстаток");
		Иначе
			СчетДоговор.Задолженность = ТаблицаЗадолженностей.Итог("СуммаОстаток");
		КонецЕсли; 

		
	КонецЦикла;

	//Разделение каждой строки на оплату задолженности и аванс
	Для каждого ТекущийПлатеж из РеестрПлатежей Цикл

		СчетОплаты = ТекущийПлатеж.СчетОплаты;
		СчетАванса = ТекущийПлатеж.СчетАванса;
		ДоговорКонтрагента = ТекущийПлатеж.ДоговорКонтрагента;
		
		КлючЗадолженности = Новый Структура("ДоговорКонтрагента,СчетОплаты");
		КлючЗадолженности.ДоговорКонтрагента = ТекущийПлатеж.ДоговорКонтрагента;
		КлючЗадолженности.СчетОплаты            = ТекущийПлатеж.СчетОплаты;
		ЗадолженностьСтрока                     = ЗадолженностьРеестр.НайтиСтроки(КлючЗадолженности);

		Задолженность =  ЗадолженностьСтрока[0].Задолженность;
		
		СуммаПлатежа  =  ТекущийПлатеж.СуммаПлатежа;
		
		НужноЗаплатить = 0;
		СуммаАванса    = 0;

		Если СуммаПлатежа >= Задолженность Тогда
			
			НужноЗаплатить = Задолженность;
			СуммаАванса    = СуммаПлатежа - Задолженность;
			
		Иначе
			
			НужноЗаплатить = СуммаПлатежа;
			СуммаАванса    = 0;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СчетАванса) Тогда
			
			НужноЗаплатить = НужноЗаплатить + СуммаАванса;
			СуммаАванса    = 0;
			
		КонецЕсли;

		Если НужноЗаплатить < 0 тогда
			
			НужноЗаплатить = 0;
			СуммаАванса    = НужноЗаплатить + СуммаАванса;
			
		КонецЕсли;

		ЗадолженностьСтрока[0].Задолженность = ЗадолженностьСтрока[0].Задолженность - НужноЗаплатить;

		Если НужноЗаплатить > 0 Тогда // Оплата от покупателя

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;
			Проводка.Содержание  = ВидОперации;

			Проводка.СчетДт = СчетОплаты;
			Если НЕ (СчетОплаты.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты ,"ВидСубконто") = Неопределено) Тогда
				
				Проводка.СубконтоДт.Контрагенты = Контрагент;
				
			КонецЕсли;

			Если НЕ (СчетОплаты.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры ,"ВидСубконто") = Неопределено) Тогда
				
				Проводка.СубконтоДт.Договоры    = ДоговорКонтрагента;
				
			КонецЕсли;

			Проводка.СчетКт = СчетКт;
			
			Если НЕ (СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета ,"ВидСубконто") = Неопределено) Тогда
				
				Проводка.СубконтоКт.БанковскиеСчета = Ссылка.СчетОрганизации;
				
			КонецЕсли;
			
			Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = ТекущийПлатеж.СтатьяДвиженияДенежныхСредств;
			Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
				Проводка.СубконтоКт.ОбособленныеПодразделенияБезОбразованияЮрЛица = ОбособленноеПодразделение;
			КонецЕсли;

			Если РасчетыВВалюте Тогда

				ДанныеОВалюте  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НужноЗаплатить, ВалютаДокумента, ВалютаРег,
				КурсДокумента, ДанныеОВалюте.Курс, 
				КратностьДокумента, ДанныеОВалюте.Кратность);

				Проводка.ВалютаКт        = ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = НужноЗаплатить;

				Если СчетОплаты.Валютный Тогда
					
					Проводка.ВалютаДт        = ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = НужноЗаплатить;
					
				КонецЕсли;


			Иначе
				
				Проводка.Сумма = НужноЗаплатить;
				
			КонецЕсли;

		КонецЕсли;

		Если СуммаАванса <> 0 тогда //Зачесть аванс

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Аванс";

			Проводка.СчетДт      = СчетАванса;
			
			Если НЕ (СчетАванса.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты ,"ВидСубконто") = Неопределено) Тогда
				
				Проводка.СубконтоДт.Контрагенты = Контрагент;
				
			КонецЕсли;

			Если НЕ (СчетАванса.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры ,"ВидСубконто") = Неопределено) Тогда
				
				Проводка.СубконтоДт.Договоры    = ДоговорКонтрагента;
				
			КонецЕсли;

			Проводка.СчетКт      = СчетКт;
			Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = ТекущийПлатеж.СтатьяДвиженияДенежныхСредств;
			Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
				Проводка.СубконтоКт.ОбособленныеПодразделенияБезОбразованияЮрЛица = ОбособленноеПодразделение;
			КонецЕсли;
			
			Если НЕ (СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета ,"ВидСубконто") = Неопределено) Тогда
				
				Проводка.СубконтоКт.БанковскиеСчета = Ссылка.СчетОрганизации;
				
			КонецЕсли;

			Если РасчетыВВалюте Тогда

				ДанныеОВалюте  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаАванса, ВалютаДокумента, ВалютаРег,
				КурсДокумента, ДанныеОВалюте.Курс,
				КратностьДокумента, ДанныеОВалюте.Кратность);

				Проводка.ВалютаКт        = ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СуммаАванса;

				Если СчетАванса.Валютный Тогда
					
					Проводка.ВалютаДт        = ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = СуммаАванса;
					
				КонецЕсли;

			Иначе
				
				Проводка.Сумма = СуммаАванса;
				
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	Если СтруктураДвижений <> Неопределено Тогда
		СтруктураДвижений.Вставить("ПроводкиБУ", ПроводкиБУ);
	КонецЕсли;

КонецПроцедуры // ДвижениеДенегПрочийРасход()

// Выполняет приход денег по указанному документу
//
// Параметры
// Объект          - ДокументСсылка          - Документ для которого выполяентся 
//                                             операция.
// РасчетыВВалюте  - Булево                  - Признак расчетов в валюте
// СчетДт          - ПланСчетов.Хозрасчетный - корреспондирующий счет
//
Процедура ДвижениеДенегПрочийПриход(Объект, РасчетыВВалюте, СчетДт, КурсДокумента=1, КратностьДокумента=1, СтруктураДвижений) Экспорт

	Ссылка             = Объект.Ссылка;
	Движения           = Объект.Движения;
	ПроводкиБУ         = Движения.Хозрасчетный;

	ДоговорКонтрагента = Ссылка.ДоговорКонтрагента;
	Организация        = Ссылка.Организация;
	//ИЗМЕНЕНО Верескул Игорь(Начало 14.12.2020		
	Если Объект.Дата >= Дата("20210101") Тогда
		НаличнаяОрганизация = Константы.НПТ.Получить();
	Иначе
		НаличнаяОрганизация = Константы.КрафтКолор.Получить();
	КонецЕсли;
	//Смартис Лиманчук начало 05.11.2012
	Попытка
		Если Ссылка.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентамиНал Тогда
			Организация = НаличнаяОрганизация;
		КонецЕсли;
	Исключение
	КонецПопытки;
	//Смартис Лиманчук окончание 05.11.2012
	
	ВалютаДокумента    = Ссылка.ВалютаДокумента;
	СуммаДокумента     = Ссылка.СуммаДокумента;
	Попытка
		ДатаДока           = ?(Ссылка.Оплачено,УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Ссылка.Дата,Ссылка.ДатаОплаты),Ссылка.Дата);
	Исключение
		ДатаДока           = Ссылка.Дата;
	КонецПопытки;
	МоментДокумента    = Новый МоментВремени(ДатаДока, Ссылка);
	
	ВалютаРег          = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ДанныеВалюты       = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
	
	//Получение обособленного подразделения организации
	ОбособленноеПодразделение = Неопределено;
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Объект.Дата, УчетнаяПолитикаНеЗадана, Объект.Организация, "Бух");
	Если НЕ УчетнаяПолитикаНеЗадана Тогда
		Если мУчетнаяПолитикаБУ.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
			Попытка 
				Если Объект.Метаданные().Реквизиты.Найти("Касса") <> Неопределено Тогда
					ОбособленноеПодразделение = Объект.Касса.ОбособленноеПодразделение;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Если   ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

		Контрагент      = Ссылка.Контрагент;
		Если Ссылка.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
			ВидОперации = "Возврат";
		//Смартис Лиманчук начало 05.11.2012
		ИначеЕсли Ссылка.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщикомНал Тогда
			ВидОперации = "Возврат";
		//Смартис Лиманчук окончание 05.11.2012
		Иначе
		//Если Ссылка.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
			ВидОперации = "Оплата";
		КонецЕсли;

	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.АккредитивПолученный")
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное")
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПлатежноеТребованиеПоручениеВыставленное") Тогда

		Контрагент      = Ссылка.Контрагент;
		СчетОрганизации = Ссылка.СчетОрганизации;
		Если Ссылка.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
			ВидОперации = "Возврат";
		Иначе
		//Если Ссылка.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
			ВидОперации = "Оплата";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
	
		Контрагент      = Ссылка.Контрагент;
		СчетОрганизации = Ссылка.СчетОрганизации;
		Если Ссылка.ВидОперации = Перечисления.ВидыОперацийПлатежныйОрдерПоступление.ВозвратДенежныхСредствПоставщиком Тогда
			ВидОперации = "Возврат";
		Иначе
		//Если Ссылка.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
			ВидОперации = "Оплата";
		КонецЕсли;

	Иначе

		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при приходе (возврате) денежных средств.");
		Возврат;

	КонецЕсли;

	ТабличнаяЧасть = Объект["РасшифровкаПлатежа"];

	// Выгрузка нужных колонок табличной части в таблицу значений с переименованием названий счетов
	СтруктураРеквизитов = Новый Структура("
	|ДоговорКонтрагента, СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,
	|СтатьяДвиженияДенежныхСредств, СуммаПлатежа, СуммаВзаиморасчетов",
	,?(ВидОперации = "Оплата","СчетОплаты","СчетАванса")
	,?(ВидОперации = "Оплата","СчетАванса","СчетОплаты"));

	
	
	РеестрПлатежей = ОбщегоНазначения.СформироватьТаблицуЗначений(ТабличнаяЧасть, СтруктураРеквизитов);

	Если РеестрПлатежей = Неопределено тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при расходе (возврате) денежных средств.");
		Возврат;
		
	КонецЕсли;

	ЗадолженностьРеестр = РеестрПлатежей.Скопировать();
	ЗадолженностьРеестр.Свернуть("ДоговорКонтрагента,СчетОплаты", "СуммаПлатежа");
	ЗадолженностьРеестр.Колонки.Добавить("Задолженность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	//Оценка текущего состояния расчетов по БУ для каждого счета из счетов оплаты в документе.
	Для каждого СчетДоговор из ЗадолженностьРеестр цикл

		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("МоментВремени", МоментДокумента);
		Запрос.УстановитьПараметр("Счет"         , СчетДоговор.СчетОплаты);
		Запрос.УстановитьПараметр("Организация"  , Организация);
		Запрос.УстановитьПараметр("Контрагент"   , Контрагент);
		Запрос.УстановитьПараметр("Договор"      , СчетДоговор.ДоговорКонтрагента);
		
		Если РасчетыВВалюте Тогда
			
			Запрос.УстановитьПараметр("ВалютаВзаиморасчетов" , ВалютаДокумента);
			УсловиеВалюта="И (Валюта = &ВалютаВзаиморасчетов)";
			
		Иначе
			
			УсловиеВалюта="";
			
		КонецЕсли;

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Субконто1,
		|	Субконто2,
		|	СуммаОстатокДт КАК СуммаОстаток,
		|	ВалютнаяСуммаОстатокДт КАК ВалютнаяСуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет = &Счет, , (Организация = &Организация) И (Субконто1 = &Контрагент)И (Субконто2 = &Договор)
		|"+УсловиеВалюта+"
		|	) КАК ХозрасчетныйОстатки";
		
		Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
					
			СтруктураПараметровБлокировки = Новый Структура(
				"ТипТаблицы, ИмяТаблицы", 
				"РегистрБухгалтерии", "Хозрасчетный");
			
			СтруктураЗначенийБлокировки   = Новый Структура;
			СтруктураЗначенийБлокировки.Вставить("Период", 		Новый Диапазон(, ДатаДока)); 
			СтруктураЗначенийБлокировки.Вставить("Счет", 		СчетДоговор.СчетОплаты); 
			СтруктураЗначенийБлокировки.Вставить("Организация", Организация); 
			СтруктураЗначенийБлокировки.Вставить("Субконто1", 	Контрагент); 
			СтруктураЗначенийБлокировки.Вставить("Субконто2", 	СчетДоговор.ДоговорКонтрагента); 
			Если РасчетыВВалюте Тогда
				СтруктураЗначенийБлокировки.Вставить("Валюта", 	ВалютаДокумента); 
			КонецЕсли;
			
			Отказ     = Ложь;
			Заголовок = "";
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, , Отказ, Заголовок);
					
		КонецЕсли;
		
		ВыборкаОстатков = Запрос.Выполнить().Выбрать();

		Если ВыборкаОстатков.Следующий() Тогда

			Если РасчетыВВалюте тогда
				
				СчетДоговор.Задолженность = ВыборкаОстатков.ВалютнаяСуммаОстаток;
				
			Иначе
				
				СчетДоговор.Задолженность = ВыборкаОстатков.СуммаОстаток;
				
			КонецЕсли;
			
			СчетДоговор.Задолженность = ВыборкаОстатков.СуммаОстаток;
			
		Иначе
			
			СчетДоговор.Задолженность = 0;
			
		КонецЕсли;

	КонецЦикла;

	//Разделение каждой строки на оплату задолженности и аванс
	Для каждого ТекущийПлатеж из РеестрПлатежей Цикл

		СчетОплаты = ТекущийПлатеж.СчетОплаты;
		СчетАванса = ТекущийПлатеж.СчетАванса;
		ДоговорКонтрагента = ТекущийПлатеж.ДоговорКонтрагента;
		КлючЗадолженности = Новый Структура("ДоговорКонтрагента,СчетОплаты");
		КлючЗадолженности.ДоговорКонтрагента = ТекущийПлатеж.ДоговорКонтрагента;
		КлючЗадолженности.СчетОплаты = ТекущийПлатеж.СчетОплаты;
		ЗадолженностьСтрока          = ЗадолженностьРеестр.НайтиСтроки(КлючЗадолженности);

		Задолженность =  ЗадолженностьСтрока[0].Задолженность;
		
		СуммаПлатежа  =  ТекущийПлатеж.СуммаПлатежа;
		НужноЗаплатить = 0;
		СуммаАванса    = 0;

		Если СуммаДокумента >= Задолженность Тогда
			
			НужноЗаплатить = Задолженность;
			СуммаАванса    = Ссылка.СуммаДокумента - Задолженность;
			
		Иначе
			
			НужноЗаплатить = СуммаДокумента;
			СуммаАванса    = 0;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СчетАванса) Тогда
			
			НужноЗаплатить = НужноЗаплатить + СуммаАванса;
			СуммаАванса    = 0;
			
		КонецЕсли;

		ЗадолженностьСтрока[0].Задолженность = ЗадолженностьСтрока[0].Задолженность - НужноЗаплатить;

		Если НужноЗаплатить > 0 Тогда // Оплата от покупателя

			Проводка   = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;

			Проводка.СчетДт = СчетДт;
			
			Если НЕ (СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета ,"ВидСубконто") = Неопределено) Тогда
				
				Проводка.СубконтоДт.БанковскиеСчета = Ссылка.СчетОрганизации;
				
			КонецЕсли;
			
			Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = ТекущийПлатеж.СтатьяДвиженияДенежныхСредств;
			Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
				Проводка.СубконтоДт.ОбособленныеПодразделенияБезОбразованияЮрЛица = ОбособленноеПодразделение;
			КонецЕсли;

			Проводка.СчетКт = СчетОплаты;
			
			Если НЕ (СчетОплаты.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты ,"ВидСубконто") = Неопределено) Тогда
				
				Проводка.СубконтоКт.Контрагенты = Контрагент;
				
			КонецЕсли;
			
			Если НЕ (СчетОплаты.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры ,"ВидСубконто") = Неопределено) Тогда
				
				Проводка.СубконтоКт.Договоры    = ДоговорКонтрагента;
				
			КонецЕсли;

			Если РасчетыВВалюте Тогда

				ДанныеОВалюте  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НужноЗаплатить, ВалютаДокумента, ВалютаРег,
				КурсДокумента, ДанныеОВалюте.Курс, 
				КратностьДокумента, ДанныеОВалюте.Кратность);

				Проводка.ВалютаДт        = ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = НужноЗаплатить;

				Если СчетОплаты.Валютный Тогда
					
					Проводка.ВалютаКт        = ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = НужноЗаплатить;
					
				КонецЕсли;

			Иначе
				
				Проводка.Сумма = НужноЗаплатить;
				
			КонецЕсли;

		КонецЕсли;

		Если СуммаАванса > 0 Тогда // Зачет аванса

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;

			Проводка.СчетДт      = СчетДт;
			
			Если НЕ (СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета ,"ВидСубконто") = Неопределено) Тогда
				
				Проводка.СубконтоДт.БанковскиеСчета = Ссылка.СчетОрганизации;
				
			КонецЕсли;
			Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = ТекущийПлатеж.СтатьяДвиженияДенежныхСредств;
			Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
				Проводка.СубконтоДт.ОбособленныеПодразделенияБезОбразованияЮрЛица = ОбособленноеПодразделение;
			КонецЕсли;

			Проводка.СчетКт      = СчетАванса;
			
			Если НЕ (СчетАванса.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "ВидСубконто") = Неопределено) Тогда
				
				Проводка.СубконтоКт.Контрагенты = Контрагент;
				
			КонецЕсли;
			
			Если НЕ (СчетАванса.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "ВидСубконто") = Неопределено) Тогда
				
				Проводка.СубконтоКт.Договоры    = ДоговорКонтрагента;
				
			КонецЕсли;

			Если РасчетыВВалюте Тогда

				ДанныеОВалюте  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаАванса, ВалютаДокумента, ВалютаРег,
				КурсДокумента, ДанныеОВалюте.Курс, 
				КратностьДокумента, ДанныеОВалюте.Кратность);

				Проводка.ВалютаДт        = ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СуммаАванса;

				Если СчетАванса.Валютный Тогда
					
					Проводка.ВалютаКт        = ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СуммаАванса;
					
				КонецЕсли;
				
			Иначе
				
				Проводка.Сумма = СуммаАванса;
				
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	СтруктураДвижений.Вставить("ПроводкиБУ", ПроводкиБУ);
		
КонецПроцедуры // ДвижениеДенегПрочийПриход()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УЧЕТА РАСЧЕТОВ С КОНТАГЕНТАМИ  - ОТРАЖЕНИЕ ЗАДОЛЖЕННОСТИ (ЗАЧЕТ АВАНСА)

// формируется записи в регистры сведений РасчетыПоПриобретениюОрганизации и РасчетыПоРеализацииОрганизации
// из документов приобретения и реализации. При необходимости формирует запись в последовательности расчетов
// или принудительно сбивает границу последовательности на момент движений документа
Функция ЗафиксироватьПриобретениеРеализациюВРегистреРасчетов(Объект,СтруктураПараметров,ВалютаРегламентированногоУчета,ТаблицаДанныхДокумента)

	НаправлениеДвижения  = СтруктураПараметров.НаправлениеДвижения;
	РасчетыВозврат       = СтруктураПараметров.РасчетыВозврат;
	
	Если     НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление И РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты
		 ИЛИ НаправлениеДвижения = Перечисления.НаправленияДвижений.Выбытие     И РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
		 
		РегистрРасчетов = ОбщегоНазначения.ПолучитьДвижение(Объект, РегистрыСведений.РасчетыПоПриобретениюОрганизации);
		
		ИмяПоследовательностиДляРегистрации = "РасчетыПоПриобретениюОрганизации";
		
	Иначе
		
		РегистрРасчетов = ОбщегоНазначения.ПолучитьДвижение(Объект, РегистрыСведений.РасчетыПоРеализацииОрганизации);
		
		ИмяПоследовательностиДляРегистрации = "РасчетыПоРеализацииОрганизации";
		
	КонецЕсли;
	
	//Определяем, учитывается ли аванс в документе
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураПараметров.Период, СтруктураПараметров.Организация);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
		УчитыватьАванс = ПараметрыУчетнойПолитики.ОпределятьАвансыПриПроведенииДокумента;
	Иначе
		УчитыватьАванс = Истина;
	Конецесли;
	
	Если РегистрРасчетов = Неопределено тогда
		Возврат Ложь;
	КонецЕсли;

	ТаблицаДвижений = РегистрРасчетов.Выгрузить();
	ТаблицаДанныхДокументаКопия = ТаблицаДанныхДокумента.Скопировать();
	ТаблицаДанныхДокументаКопия.Колонки.СделкаРегл.Имя = "Сделка";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДанныхДокументаКопия, ТаблицаДвижений);
	
	Для каждого Реквизит из СтруктураПараметров Цикл
		
		Если    Реквизит.Ключ = "Таблица" 
			Или Реквизит.Ключ = "Заголовок" 
			Или Реквизит.Ключ = "СуммаДокументаСНДС" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТаблицаДвижений.Колонки.Найти(Реквизит.Ключ) = Неопределено Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Реквизит.Значение,Реквизит.Ключ);
		Конецесли;
	КонецЦикла;
	
	РегистрРасчетов.Загрузить(ТаблицаДвижений);
	СтруктураПараметров.Вставить("Таблица", ТаблицаДанныхДокумента);
	
	// Регистрация в последовательности при необходимости
	СдвигГраницыПоследовательностиНазад(ИмяПоследовательностиДляРегистрации, Новый МоментВремени(СтруктураПараметров.Период,Объект.Ссылка), Новый Структура("Организация",СтруктураПараметров.Организация));
	
	Если УчитыватьАванс тогда
		
		ПоследовательностьДляРегистрации = Объект.ПринадлежностьПоследовательностям[ИмяПоследовательностиДляРегистрации];
		
		Если Не ПоследовательностьДляРегистрации.Количество() =0 Тогда
			ПоследовательностьДляРегистрации.Очистить();
		КонецЕсли; 
		
		ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();
		ЗаписьРегистрации.Период 	  = СтруктураПараметров.Период;
		ЗаписьРегистрации.Организация = СтруктураПараметров.Организация;
	КонецЕсли; 	
	

	Возврат Истина;
КонецФункции

// Выполняет зачет аванса по указанному документу
//
// Параметры
// ОбъектСсылка    - ДокументОбъект или ДокументСсылка - Документ для которого выполяентся операция.
// РежимПроведения - РежимПроведенияДокумента- Режим проведения документа, для регламентной процедуры - неопределено
// РасчетыВВалюте  - Булево                  - Признак расчетов в валюте
// СчетКт          - ПланСчетов.Хозрасчетный - корреспондирующий счет
//
Функция ЗачетАванса(СтруктураПараметров, СтруктураДвижений, ВалютаРегламентированногоУчета, РежимПроведения=Неопределено, Объект=Null, ТаблицаДанныхДокумента=Неопределено, Отказ=Ложь, НеОтражатьПоВзаиморасчетам = Ложь) Экспорт

	ПроводкиБУ                   = СтруктураДвижений.ПроводкиБУ;
	
	
	Организация             = СтруктураПараметров.Организация;
	ДатаДока                = СтруктураПараметров.Период;
	МоментДокумента         = Новый МоментВремени(ДатаДока, СтруктураПараметров.Регистратор);
								  
	ВалютаДокумента         = СтруктураПараметров.ВалютаДокумента;
	КурсДокумента           = СтруктураПараметров.КурсДокумента;
	КратностьДокумента      = СтруктураПараметров.КратностьДокумента;
	РасчетыВВалюте		    = ВалютаДокумента <> ВалютаРегламентированногоУчета ;
	
   	// Попытаемся определить направление движения из структуры параметров
	НаправлениеДвижения     = СтруктураПараметров.НаправлениеДвижения;
	РасчетыВозврат          = СтруктураПараметров.РасчетыВозврат;
	
	СуффиксСчетаРасчетов	= ?(НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление,"Дт","Кт");
	СуффиксСчетаАвансов	    = ?(НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление,"Кт","Дт");
	
	Если ТаблицаДанныхДокумента = Неопределено Тогда
		ТаблицаДанныхДокумента = СтруктураПараметров.Таблица;
	КонецЕсли;
	
	// Определение вида регламентной операции
	Если     НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление И РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты
		 ИЛИ НаправлениеДвижения = Перечисления.НаправленияДвижений.Выбытие     И РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
		ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовПриобретение;
	Иначе
		ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовРеализация;
	КонецЕсли;
	
	//Определяем, учитывается ли аванс в документе
	УчитыватьАванс = ОпределятьАвансыПриПроведении(ДатаДока, Организация) ИЛИ НЕ ЗначениеЗаполнено(РежимПроведения) ИЛИ РасчетыВВалюте;
	
	ДанныеВалютыРегламентированногоУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ДатаДока);

	//Сокращенная схема в случае off-line проведения
	Если НЕ УчитыватьАванс Тогда 
		//Зачет аванса документом не производится
		Если НЕ Объект = Null И НЕ НеОтражатьПоВзаиморасчетам Тогда
			ЗафиксироватьПриобретениеРеализациюВРегистреРасчетов(Объект,СтруктураПараметров,ВалютаРегламентированногоУчета,ТаблицаДанныхДокумента);
		Конецесли;
		Возврат Истина;
	КонецЕсли;
	
	//Колонки для хранения сумм зачета авансов
	ТаблицаДанныхДокумента.Колонки.Добавить("АвансРеглБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДанныхДокумента.Колонки.Добавить("АвансВалБУ" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	//Оценка текущего состояния расчетов по БУ для каждого счета из счетов авансов в документе.
	АвансыРеестр = ТаблицаДанныхДокумента.Скопировать();
	АвансыРеестр.Свернуть("СделкаРегл,ДоговорКонтрагента,СчетАванса,Контрагент", "СуммаСНДСВал");
	АвансыРеестр.Колонки.Добавить("Аванс", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Если РасчетыВВалюте Тогда
		УсловиеВалюта = ВалютаДокумента;
	Иначе
		УсловиеВалюта = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	Для каждого СчетДоговор из АвансыРеестр цикл
		
		Если СчетДоговор.СуммаСНДСВал=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетДоговор.СчетАванса) Тогда
			Продолжить;
		КонецЕсли;
		
		
		МоментДокумента = Новый МоментВремени(ДатаДока,СтруктураПараметров.Регистратор);
		ТаблицаЗадолженностей = БухгалтерскийУчет.ПолучитьОстатокПоСчету(Организация,МоментДокумента,СчетДоговор.СчетАванса,УсловиеВалюта ,СчетДоговор.Контрагент, СчетДоговор.ДоговорКонтрагента,СчетДоговор.СделкаРегл,?(НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление,1,-1));
		Если не ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			СуммаАванса = ТаблицаЗадолженностей.Итог("ВалютнаяСуммаОстаток");
		Иначе
			СуммаАванса = ТаблицаЗадолженностей.Итог("СуммаОстаток");
		КонецЕслИ;	
        СчетДоговор.Аванс = СуммаАванса;
				
		//СчетДоговор.Аванс = БухгалтерскийУчет.ПолучитьОстатокПоСчету(Организация,МоментДокумента,СчетДоговор.СчетАванса,УсловиеВалюта,СчетДоговор.Контрагент, СчетДоговор.ДоговорКонтрагента);
		//Если НаправлениеДвижения <> Перечисления.НаправленияДвижений.Поступление тогда
		//	СчетДоговор.Аванс = -СчетДоговор.Аванс;
		//КонецеслИ;

	КонецЦикла;

	//Разделение каждой строки на зачет аванса и задолженность
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхДокумента Цикл
		
		СчетОплаты = СтрокаТаблицы.СчетОплаты;
		СчетАванса = СтрокаТаблицы.СчетАванса;
		Если СтрокаТаблицы.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			СодержаниеОперации	= ?(РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты, "Зачет взаимной поставки", "Возврат взаимной поставки")
								    + ?(НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление, 
									      " поставщик" + ?(РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты,"а","у"),
									      " покупател" + ?(РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты,"я","ю"));
		Иначе
			СодержаниеОперации	= ?(РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты, "Зачет аванса", "Возврат аванса")
								    + ?(НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление, 
									      " поставщик" + ?(РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты,"а","у"),
									      " покупател" + ?(РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты,"я","ю"));
		КонецЕсли;
		КлючЗадолженности = Новый Структура("СделкаРегл, ДоговорКонтрагента,СчетАванса");
		КлючЗадолженности.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
		КлючЗадолженности.СчетАванса         = СтрокаТаблицы.СчетАванса;
		КлючЗадолженности.СделкаРегл         = СтрокаТаблицы.СделкаРегл;
		АвансыСтрока = АвансыРеестр.НайтиСтроки(КлючЗадолженности);
		
		АвансВал         = АвансыСтрока[0].Аванс;
        СуммаРасчетовВал = СтрокаТаблицы.СуммаСНДСВал;
		
		СуммаЗачетаАвансаВал = МИН(МАКС(0, АвансВал), СуммаРасчетовВал);
		
		//Если счет расчетов совпадает со счетом аванса или счет аванса не заполнен - нет зачета аванса
		Если СчетОплаты = СчетАванса или НЕ ЗначениеЗаполнено(СчетАванса) Тогда
			СуммаЗачетаАвансаВал = 0;
		КонецЕсли;
		
		// Уменьшим остаток аванса
		АвансыСтрока[0].Аванс = АвансыСтрока[0].Аванс - СуммаЗачетаАвансаВал;
		
		Если РасчетыВВалюте Тогда
			СуммаЗачетаАвансаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаЗачетаАвансаВал, 
														 ВалютаДокумента, ВалютаРегламентированногоУчета,
														 КурсДокумента, ДанныеВалютыРегламентированногоУчета.Курс, 
														 КратностьДокумента, ДанныеВалютыРегламентированногоУчета.Кратность);
		Иначе
			СуммаЗачетаАвансаРегл = СуммаЗачетаАвансаВал;
		КонецЕсли;
		
		// Запишем аванс в таблицу
		СтрокаТаблицы.АвансВалБУ = СуммаЗачетаАвансаВал;
		СтрокаТаблицы.АвансРеглБУ = СуммаЗачетаАвансаРегл;
		
		// Зачесть аванс
		Если СуммаЗачетаАвансаВал > 0 Тогда
			
			Если СчетОплаты <> СчетАванса Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период                  = ДатаДока;
				Проводка.Активность              = Истина;
				Проводка.Организация             = Организация;
				Проводка.Сумма                   = СуммаЗачетаАвансаРегл;
				Проводка.Содержание 			 = СодержаниеОперации;
				Проводка.ВидРегламентнойОперации = ВидРегламентнойОперации;
				
				Проводка["Счет"                    + СуффиксСчетаРасчетов] = СчетОплаты;
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Контрагенты", СтрокаТаблицы.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Договоры",    СтрокаТаблицы.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Сделки",    СтрокаТаблицы.СделкаРегл);
				Проводка["Валюта"                  + СуффиксСчетаРасчетов] = ВалютаДокумента;
				Проводка["ВалютнаяСумма"           + СуффиксСчетаРасчетов] = СуммаЗачетаАвансаВал;

				Проводка["Счет"                    + СуффиксСчетаАвансов] = СчетАванса;
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаАвансов], Проводка["Субконто" + СуффиксСчетаАвансов], "Контрагенты", СтрокаТаблицы.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаАвансов], Проводка["Субконто" + СуффиксСчетаАвансов], "Договоры",    СтрокаТаблицы.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаАвансов], Проводка["Субконто" + СуффиксСчетаАвансов], "Сделки",    СтрокаТаблицы.СделкаРегл);
				Проводка["Валюта"                  + СуффиксСчетаАвансов] = ВалютаДокумента;
				Проводка["ВалютнаяСумма"           + СуффиксСчетаАвансов] = СуммаЗачетаАвансаВал;
				
			КонецЕсли;	

		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Объект = Null И НЕ НеОтражатьПоВзаиморасчетам Тогда
		ЗафиксироватьПриобретениеРеализациюВРегистреРасчетов(Объект,СтруктураПараметров,ВалютаРегламентированногоУчета,ТаблицаДанныхДокумента);
	Конецесли;
	
	Возврат Истина;
	
КонецФункции // ЗачетАванса

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор, ВалютаРегламентированногоУчета = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;

	Результат = Новый Структура("СчетРасчетов, 
								|СчетАвансов,
								|СчетРасчетовПокупателя, 
								|СчетАвансовПокупателя,
								|СчетУчетаТары, 
								|СчетУчетаТарыПокупателя,
								|СчетАвансовПоТаре, 
								|СчетАвансовПоТареПокупателя,
								|СчетРасчетовПриБартере, 
								|СчетАвансовПриБартере,
								|СчетРасчетовПокупателяПриБартере, 
								|СчетАвансовПокупателяПриБартере,
								|СчетУчетаЗатратПоТаре,
								|СубконтоЗатратПоТаре1,
								|СубконтоЗатратПоТаре2,
								|СубконтоЗатратПоТаре3,
								|СчетУчетаДоходовПоТаре,
								|СубконтоДоходовПоТаре1,
								|СубконтоДоходовПоТаре2,
								|СубконтоДоходовПоТаре3,
								|СчетУчетаНДСПриобретений,
								|СчетУчетаНДСПродаж,
								|СчетУчетаНДСПриобретенийПодтвержденный,
								|СчетУчетаНДСПродажПодтвержденный,
								|СтавкаНДСПриобретений,
								|СтавкаНДСПродаж,
								|ВидНалоговойДеятельностиПриобретений,
								|ВидНалоговойДеятельностиПриобретенийПоТаре,
								|ВидНалоговойДеятельностиПродаж,
								|ВидНалоговойДеятельностиПродажПоТаре,
								|ВидДеятельностиНДС,
								|ВидДеятельностиНДСПоТаре,
								|НалоговоеНазначениеПриобретений,
								|НалоговоеНазначениеПриобретенийПоТаре,
								|НалоговоеНазначениеПродаж,
								|НалоговоеНазначениеПродажПоТаре");

	ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(Договор,ВалютаРегламентированногоУчета);

	СписокГруппКонтрагентов = ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Контрагент);
	
	СписокГруппДоговоров = ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Договор);
	
	МассивОрганизаций = Новый Массив(); 
	МассивОрганизаций.Добавить(Организация); 
	МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
    	
	МассивКонтрагентов = Новый Массив();
	МассивКонтрагентов.Добавить(Контрагент);
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.ПустаяСсылка()); 
	
	Для каждого Элемент Из СписокГруппКонтрагентов Цикл
		МассивКонтрагентов.Добавить(Элемент);
	КонецЦикла;

	МассивДоговоров = Новый Массив();
	МассивДоговоров.Добавить(Договор);
	МассивДоговоров.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	Для каждого Элемент Из СписокГруппДоговоров Цикл
		МассивДоговоров.Добавить(Элемент);
	КонецЦикла;
	
	МассивВидовРасчета = Новый Массив();
	МассивВидовРасчета.Добавить(ВидРасчетовПоДоговору);
    МассивВидовРасчета.Добавить(Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОрганизаций",             МассивОрганизаций);
	Запрос.УстановитьПараметр("МассивКонтрагентов",            МассивКонтрагентов);
	Запрос.УстановитьПараметр("МассивДоговоров",               МассивДоговоров);
	Запрос.УстановитьПараметр("МассивВидовРасчетовПоДоговору", МассивВидовРасчета); 		
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыОрганизаций.Организация,
	|	КонтрагентыОрганизаций.Контрагент,
	|	КонтрагентыОрганизаций.Договор,
	|	КонтрагентыОрганизаций.ВидРасчетовПоДоговору,
	|	КонтрагентыОрганизаций.СчетУчетаРасчетовСПоставщиком,
	|	КонтрагентыОрганизаций.СчетУчетаАвансовВыданных,
	|	КонтрагентыОрганизаций.СчетУчетаРасчетовСПокупателем,
	|	КонтрагентыОрганизаций.СчетУчетаАвансовПолученных,
	|	КонтрагентыОрганизаций.СчетУчетаРасчетовПоТареСПоставщиком,
	|	КонтрагентыОрганизаций.СчетУчетаАвансовПоТареВыданных,
	|	КонтрагентыОрганизаций.СчетУчетаРасчетовПоТареСПокупателем,
	|	КонтрагентыОрганизаций.СчетУчетаАвансовПоТареПолученных,
	|	КонтрагентыОрганизаций.СчетУчетаРасчетовСПоставщикомПриБартере,
	|	КонтрагентыОрганизаций.СчетУчетаРасчетовСПокупателемПриБартере,
	|	КонтрагентыОрганизаций.СчетУчетаЗатратПоТаре,
	|	КонтрагентыОрганизаций.СубконтоЗатратПоТаре1,
	|	КонтрагентыОрганизаций.СубконтоЗатратПоТаре2,
	|	КонтрагентыОрганизаций.СубконтоЗатратПоТаре3,
	|	КонтрагентыОрганизаций.СчетУчетаДоходовПоТаре,
	|	КонтрагентыОрганизаций.СубконтоДоходовПоТаре1,
	|	КонтрагентыОрганизаций.СубконтоДоходовПоТаре2,
	|	КонтрагентыОрганизаций.СубконтоДоходовПоТаре3,
	
	|	КонтрагентыОрганизаций.СчетУчетаНДСПриобретений,
 	|	КонтрагентыОрганизаций.СчетУчетаНДСПродаж,
	|	КонтрагентыОрганизаций.СчетУчетаНДСПриобретенийПодтвержденный,
	|	КонтрагентыОрганизаций.СчетУчетаНДСПродажПодтвержденный,
	
	|	КонтрагентыОрганизаций.СтавкаНДСПриобретений,
	|	КонтрагентыОрганизаций.СтавкаНДСПродаж,
	|	КонтрагентыОрганизаций.НалоговоеНазначениеПриобретений,
	|	КонтрагентыОрганизаций.НалоговоеНазначениеПриобретенийПоТаре,
	|	КонтрагентыОрганизаций.НалоговоеНазначениеПродаж,
	|	КонтрагентыОрганизаций.НалоговоеНазначениеПродажПоТаре
	
	
	|ИЗ
	|	РегистрСведений.КонтрагентыОрганизаций КАК КонтрагентыОрганизаций
	|ГДЕ
	|	КонтрагентыОрганизаций.Организация В(&МассивОрганизаций)
	|	И КонтрагентыОрганизаций.Контрагент В(&МассивКонтрагентов)
	|	И КонтрагентыОрганизаций.Договор В(&МассивДоговоров)
	|	И КонтрагентыОрганизаций.ВидРасчетовПоДоговору В(&МассивВидовРасчетовПоДоговору)";   
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗапроса.Колонки.Добавить("ГлубинаКонтрагента");
	ТаблицаЗапроса.Колонки.Добавить("ГлубинаДоговора");

	Для Каждого Строка Из ТаблицаЗапроса Цикл
		
		Если Строка.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			Строка.ГлубинаКонтрагента = 0;
		Иначе
			Строка.ГлубинаКонтрагента = СтрДлина(Строка.Контрагент.ПолныйКод());
		КонецЕсли;
		
		Если Строка.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			Строка.ГлубинаДоговора = 0;
		Иначе
			Строка.ГлубинаДоговора = СтрДлина(Строка.Договор.ПолныйКод());
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаЗапроса.Сортировать("ГлубинаКонтрагента Убыв, ГлубинаДоговора Убыв, Организация Убыв, ВидРасчетовПоДоговору Убыв");
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		
		СведенияОСчетах = ТаблицаЗапроса[0];
		
		Результат.СчетРасчетов                     = СведенияОСчетах.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов                      = СведенияОСчетах.СчетУчетаАвансовВыданных;
		Результат.СчетРасчетовПокупателя           = СведенияОСчетах.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя            = СведенияОСчетах.СчетУчетаАвансовПолученных;
		
		Результат.СчетУчетаТары                    = СведенияОСчетах.СчетУчетаРасчетовПоТареСПоставщиком;
		Результат.СчетАвансовПоТаре                = СведенияОСчетах.СчетУчетаАвансовПоТареВыданных;
		Результат.СчетУчетаТарыПокупателя          = СведенияОСчетах.СчетУчетаРасчетовПоТареСПокупателем;
		Результат.СчетАвансовПоТареПокупателя      = СведенияОСчетах.СчетУчетаАвансовПоТареПолученных;
		
		Результат.СчетРасчетовПриБартере           = СведенияОСчетах.СчетУчетаРасчетовСПоставщикомПриБартере;
		Результат.СчетАвансовПриБартере            = СведенияОСчетах.СчетУчетаРасчетовСПокупателемПриБартере;
		Результат.СчетРасчетовПокупателяПриБартере = СведенияОСчетах.СчетУчетаРасчетовСПокупателемПриБартере;
		Результат.СчетАвансовПокупателяПриБартере  = СведенияОСчетах.СчетУчетаРасчетовСПоставщикомПриБартере;
		
		Результат.СчетУчетаЗатратПоТаре  		   = СведенияОСчетах.СчетУчетаЗатратПоТаре;
		Результат.СубконтоЗатратПоТаре1  		   = СведенияОСчетах.СубконтоЗатратПоТаре1;
		Результат.СубконтоЗатратПоТаре2  		   = СведенияОСчетах.СубконтоЗатратПоТаре2;
		Результат.СубконтоЗатратПоТаре3  		   = СведенияОСчетах.СубконтоЗатратПоТаре3;
		Результат.СчетУчетаДоходовПоТаре  		   = СведенияОСчетах.СчетУчетаДоходовПоТаре;
		Результат.СубконтоДоходовПоТаре1  		   = СведенияОСчетах.СубконтоДоходовПоТаре1;
		Результат.СубконтоДоходовПоТаре2  		   = СведенияОСчетах.СубконтоДоходовПоТаре2;
		Результат.СубконтоДоходовПоТаре3  		   = СведенияОСчетах.СубконтоДоходовПоТаре3;
		
		Результат.СчетУчетаНДСПриобретений         = СведенияОСчетах.СчетУчетаНДСПриобретений;
		Результат.СчетУчетаНДСПродаж               = СведенияОСчетах.СчетУчетаНДСПродаж;
		
		Результат.СчетУчетаНДСПриобретенийПодтвержденный 	= СведенияОСчетах.СчетУчетаНДСПриобретенийПодтвержденный;
		Результат.СчетУчетаНДСПродажПодтвержденный 			= СведенияОСчетах.СчетУчетаНДСПродажПодтвержденный;
		
		Результат.СтавкаНДСПриобретений            = СведенияОСчетах.СтавкаНДСПриобретений;   
		Результат.СтавкаНДСПродаж                  = СведенияОСчетах.СтавкаНДСПродаж; 
		
		Результат.НалоговоеНазначениеПриобретений       = СведенияОСчетах.НалоговоеНазначениеПриобретений; 
		Результат.НалоговоеНазначениеПриобретенийПоТаре = СведенияОСчетах.НалоговоеНазначениеПриобретенийПоТаре; 
		Результат.НалоговоеНазначениеПродаж             = СведенияОСчетах.НалоговоеНазначениеПродаж; 
		Результат.НалоговоеНазначениеПродажПоТаре       = СведенияОСчетах.НалоговоеНазначениеПродажПоТаре; 
		
	КонецЕсли;
	
	Возврат Результат;  
	
КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

//Функция возвращает вид расчетов по договору
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтраентов
//		ВалютаРегламентированногоУчета 	- СправочникСсылка.Валюты
//
// Возвращаемое значение
//      ПеречилениеСсылка.ВидыРасчетовПоДоговорам
//
Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,ВалютаРегламентированногоУчета, ДоговорКонтрагентаВалютаВзаиморасчетов = Неопределено) Экспорт
	Если ДоговорКонтрагентаВалютаВзаиморасчетов = Неопределено Тогда
		ДоговорКонтрагентаВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) ИЛИ ДоговорКонтрагентаВалютаВзаиморасчетов = ВалютаРегламентированногоУчета
		 ИЛИ НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
	Иначе
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
	Конецесли;
	Возврат ВидРасчетовПоДоговору;
КонецФункции

//Преименование колонок таблицы значений по данным соответствия
Процедура ПереименованиеКолонок(ТаблицаЗначений, СоответствиеНазваний, Обратное = Ложь, СообщатьОбОшибке = Истина) Экспорт
	
	Колонки = ТаблицаЗначений.Колонки;
	
	Для каждого Колонка Из СоответствиеНазваний Цикл
		Если Обратное Тогда
			СтароеНазвание = Колонка.Значение;
			НовоеНазвание =  Колонка.Ключ;
		Иначе
			СтароеНазвание = Колонка.Ключ;
			НовоеНазвание =  Колонка.Значение;
		КонецЕсли;
		Если Колонки.Найти(СтароеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    ОбщегоНазначения.СообщитьОбОшибке("При переименовании колонок таблиццы не обнаружена колонка с именем """+СтароеНазвание+"""! Переименование колонки не произведено.");
			КонецЕсли; 
		ИначеЕсли не Колонки.Найти(НовоеНазвание) = неопределено тогда
			Если СообщатьОбОшибке Тогда
			    ОбщегоНазначения.СообщитьОбОшибке("При переименовании колонок таблиццы обнаружена колонка с именем """+НовоеНазвание+""", переименование существующей колонки """+СтароеНазвание+""" невозможно! Переименование колонки не произведено.");
			КонецЕсли; 
		Иначе
			Колонки[СтароеНазвание].Имя = НовоеНазвание;
		КонецЕсли;
	КонецЦикла; 
	

КонецПроцедуры

Функция ОпределятьАвансыПриПроведении(Дата, Организация) Экспорт
	
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
		Возврат ПараметрыУчетнойПолитики.ОпределятьАвансыПриПроведенииДокумента;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

// Выполняет приход/расход (возврат) денег по платежному документу
//
// Параметры
// ОбъектСсылка    - ДокументОбъект или ДокументСсылка - Документ для которого выполяентся операция.
// РежимПроведения - РежимПроведенияДокумента- Режим проведения документа, для регламентной процедуры - неопределено
// РасчетыВВалюте  - Булево                  - Признак расчетов в валюте
// СчетКт          - ПланСчетов.Хозрасчетный - корреспондирующий счет
//
Функция ДвижениеДенег(СтруктураПараметров, СтруктураДвижений, ВалютаРегламентированногоУчета, РежимПроведения=Неопределено, Объект=Null, Отказ=Ложь, ЗаписыватьДвижения=Истина) Экспорт

	ПроводкиБУ                   = СтруктураДвижений.ПроводкиБУ;
	
	Организация             = СтруктураПараметров.Организация;
	//ИЗМЕНЕНО Верескул Игорь(Начало 14.12.2020		
	Если Объект.Дата >= Дата("20210101") Тогда
		НаличнаяОрганизация = Константы.НПТ.Получить();
	Иначе
		НаличнаяОрганизация = Константы.КрафтКолор.Получить();
	КонецЕсли;
	//Смартис Лиманчук начало 05.10.2012
	Если НЕ СтруктураПараметров.Свойство("ВидОперации") Тогда
	ИначеЕсли СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателяНал Тогда
		Организация             = НаличнаяОрганизация;
	ИначеЕсли СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателюНал Тогда
		Организация             = НаличнаяОрганизация;
	ИначеЕсли СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщикуНал Тогда
		Организация             = НаличнаяОрганизация;
	КонецЕсли;
	//Смартис Лиманчук окончание 05.10.2012
	
	ДатаДока                = СтруктураПараметров.Период;
	МоментДокумента         = Новый МоментВремени(ДатаДока, СтруктураПараметров.Регистратор);
	ЭтоВозврат	= (СтруктураПараметров.РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат);	
	ВалютаДокумента         = СтруктураПараметров.ВалютаДокумента;
	КурсДокумента           = СтруктураПараметров.КурсДокумента;
	КратностьДокумента      = СтруктураПараметров.КратностьДокумента;
	РасчетыВВалюте          = ВалютаДокумента <> ВалютаРегламентированногоУчета;
	
	КоррСчет                = СтруктураПараметров.КоррСчет;
	
	НаправлениеДвижения     = СтруктураПараметров.НаправлениеДвижения;
	РасчетыВозврат          = СтруктураПараметров.РасчетыВозврат;
	
	СуффиксСчетаРасчетов    = ?(НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление,"Кт","Дт");
	СуффиксКоррСчета        = ?(НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление,"Дт","Кт");
	ВидОперации             = ?(СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты, "Оплата", "Возврат");
	
	Если СтруктураПараметров.Свойство("КомментарийОперации") Тогда
		ВидОперации = СтруктураПараметров.КомментарийОперации;	
	КонецЕсли;
	
	//Получение основных данных документа
	РеестрПлатежей = СтруктураПараметров.Таблица;
	
	//Получение обособленного подразделения организации
	ОбособленноеПодразделение = Неопределено;
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураПараметров.Период, УчетнаяПолитикаНеЗадана, СтруктураПараметров.Организация, "Бух");
	Если НЕ УчетнаяПолитикаНеЗадана Тогда
		Если мУчетнаяПолитикаБУ.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
			Попытка 
				Если СтруктураПараметров.Регистратор.Метаданные().Реквизиты.Найти("Касса") <> Неопределено Тогда
					ОбособленноеПодразделение = СтруктураПараметров.Регистратор.Касса.ОбособленноеПодразделение;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	// Определение вида регламентной операции
	Если     НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление И РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты 
		 ИЛИ НаправлениеДвижения = Перечисления.НаправленияДвижений.Выбытие     И РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
		 
		 ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовРеализация;
		 
	 Иначе
		 
		 ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовПриобретение;
		 
	 КонецЕсли;
	
	//Определяем, учитывается ли аванс в документе
	УчитыватьАванс = ОпределятьАвансыПриПроведении(ДатаДока, Организация) ИЛИ НЕ ЗначениеЗаполнено(РежимПроведения) ИЛИ РасчетыВВалюте;

	ДанныеВалютыРегламентированногоУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ДатаДока);

	//Сокращенная схема в случае off-line проведения
	Если Не УчитыватьАванс тогда

		// проводки на счет расчетов
		Для каждого ТекущийПлатеж из РеестрПлатежей Цикл
			
			Если ТекущийПлатеж.СуммаСНДСВал=0 тогда
				Продолжить;
			Конецесли;
			
			СуммаОплатыВал = ТекущийПлатеж.СуммаСНДСВал;
			Если РасчетыВВалюте Тогда
				СуммаОплатыРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаОплатыВал, 
								     						 ВалютаДокумента, ВалютаРегламентированногоУчета,
									    					 КурсДокумента, ДанныеВалютыРегламентированногоУчета.Курс,
										    				 КратностьДокумента, ДанныеВалютыРегламентированногоУчета.Кратность);
			Иначе
				СуммаОплатыРегл = СуммаОплатыВал;
			КонецЕсли;
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период                  = ДатаДока;
			Проводка.Активность              = Истина;
			
			//Смартис Лиманчук начало 02.11.2012
			//Проводка.Организация             = Организация;
			ТекОрганизация1 = Организация;
			ТекОрганизация2 = Организация;
			ДвойнаяПроводка = Ложь;
			
			//ИЗМЕНЕНО Верескул Игорь(Начало 14.12.2020		
			Если Объект.Дата >= Дата("20210101") Тогда
				НаличнаяОрганизация = Константы.НПТ.Получить();
			Иначе
				НаличнаяОрганизация = Константы.КрафтКолор.Получить();
			КонецЕсли;
			
			Если СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
				Если ТекущийПлатеж.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация1 = НаличнаяОрганизация;
				КонецЕсли;
			ИначеЕсли СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ВводНачальныхОстатков Тогда
				Если ТекущийПлатеж.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация1 = НаличнаяОрганизация;
				КонецЕсли;
			ИначеЕсли СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
				Если ТекущийПлатеж.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация1 = НаличнаяОрганизация;
				КонецЕсли;
			ИначеЕсли СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
				Если ТекущийПлатеж.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация1 = НаличнаяОрганизация;
					ТекОрганизация2 = НаличнаяОрганизация;
				КонецЕсли;
			ИначеЕсли СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
				Если ТекущийПлатеж.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация1 = НаличнаяОрганизация;
				КонецЕсли;
				Если ТекущийПлатеж.КоррСубконто2.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация2 = НаличнаяОрганизация;
				КонецЕсли;
				ДвойнаяПроводка = (ТекОрганизация1 <> ТекОрганизация2);
			КонецЕсли;
			
			Если НЕ ДвойнаяПроводка Тогда
			
			Проводка.Организация             = ТекОрганизация1;
			//Смартис Лиманчук окончание 02.11.2012
			
			Проводка.Сумма                   = СуммаОплатыРегл;
			Проводка.Содержание              = ВидОперации + " (без определения аванса)";
			Проводка.ВидРегламентнойОперации = ВидРегламентнойОперации;

			Проводка["Счет"                    + СуффиксСчетаРасчетов] = ТекущийПлатеж.СчетОплаты;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Контрагенты", ТекущийПлатеж.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Договоры",    ТекущийПлатеж.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Сделки",    ТекущийПлатеж.СделкаРегл);
			Проводка["Валюта"                  + СуффиксСчетаРасчетов] = ВалютаДокумента;
			Проводка["ВалютнаяСумма"           + СуффиксСчетаРасчетов] = СуммаОплатыВал;

			Проводка["Счет"                    + СуффиксКоррСчета]     = КоррСчет;
			Для каждого ВидСубконтоКоррСчета из КоррСчет.ВидыСубконто цикл
				Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто,ТекущийПлатеж["КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки]);
				Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица Тогда
					Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
						Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто, ОбособленноеПодразделение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Проводка["Валюта"                  + СуффиксКоррСчета]     = ВалютаДокумента;
			Проводка["ВалютнаяСумма"           + СуффиксКоррСчета]     = СуммаОплатыВал;
			
			Если НЕ РеестрПлатежей.Колонки.Найти("НалоговоеНазначение") = Неопределено Тогда
				
				Проводка["НалоговоеНазначение" + СуффиксКоррСчета] = ТекущийПлатеж.НалоговоеНазначение;
				
				Если НЕ ТекущийПлатеж.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
					Проводка["СуммаНУ" + СуффиксКоррСчета] = Проводка.Сумма;	
				КонецЕсли;
				
				Если НЕ РеестрПлатежей.Колонки.Найти("НеОтноситьНаЗатратыПоНУ") = Неопределено
					И ТекущийПлатеж.НеОтноситьНаЗатратыПоНУ = Истина Тогда
					Проводка["СуммаНУ" + СуффиксКоррСчета] = 0;		
				КонецЕсли;
				
			КонецЕсли;
			
			//Смартис Лиманчук начало 02.11.2012
			Иначе
			
				Проводка.Организация             = ТекОрганизация1;
				
				Проводка.Сумма                   = СуммаОплатыРегл;
				
				Проводка.Содержание              = ВидОперации + " (без определения аванса)";
				
				Проводка.ВидРегламентнойОперации = ВидРегламентнойОперации;
				
				Проводка["Счет"                    + СуффиксСчетаРасчетов] = ТекущийПлатеж.СчетОплаты;
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Контрагенты", ТекущийПлатеж.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Договоры",    ТекущийПлатеж.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Сделки",      ТекущийПлатеж.СделкаРегл);
				Проводка["Валюта"                  + СуффиксСчетаРасчетов] = ВалютаДокумента;
				Проводка["ВалютнаяСумма"           + СуффиксСчетаРасчетов] = СуммаОплатыВал;

				
				Проводка["Счет"                    + СуффиксКоррСчета]     = ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты;
				//Для каждого ВидСубконтоКоррСчета из КоррСчет.ВидыСубконто цикл
				//	Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто,ТекущийПлатеж["КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки]);
				//	Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица Тогда
				//		Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
				//			Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто, ОбособленноеПодразделение);
				//		КонецЕсли;
				//	КонецЕсли;
				//КонецЦикла;
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период                  = ДатаДока;
				Проводка.Активность              = Истина;
				
				Проводка.Организация             = ТекОрганизация2;
				Проводка.Сумма                   = СуммаОплатыРегл;
				
				Проводка.Содержание              = ВидОперации + " (без определения аванса)";
				
				Проводка.ВидРегламентнойОперации = ВидРегламентнойОперации;
				
				Проводка["Счет"                    + СуффиксСчетаРасчетов]     = ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты;
				//Для каждого ВидСубконтоКоррСчета из КоррСчет.ВидыСубконто цикл
				//	Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто,ТекущийПлатеж["КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки]);
				//	Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица Тогда
				//		Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
				//			Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто, ОбособленноеПодразделение);
				//		КонецЕсли;
				//	КонецЕсли;
				//КонецЦикла;
				
				Проводка["Счет"                    + СуффиксКоррСчета]     = КоррСчет;
				
				Для каждого ВидСубконтоКоррСчета из КоррСчет.ВидыСубконто цикл
					Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто,ТекущийПлатеж["КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки]);
					Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица Тогда
						Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
							Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто, ОбособленноеПодразделение);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Проводка["Валюта"                  + СуффиксКоррСчета]     = ВалютаДокумента;
				Проводка["ВалютнаяСумма"           + СуффиксКоррСчета]     = СуммаОплатыВал;
				
				Если НЕ РеестрПлатежей.Колонки.Найти("НалоговоеНазначение") = Неопределено Тогда
					
					Проводка["НалоговоеНазначение" + СуффиксКоррСчета] = ТекущийПлатеж.НалоговоеНазначение;
					
					Если НЕ ТекущийПлатеж.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
						Проводка["СуммаНУ" + СуффиксКоррСчета] = Проводка.Сумма;	
					КонецЕсли;
					
					Если НЕ РеестрПлатежей.Колонки.Найти("НеОтноситьНаЗатратыПоНУ") = Неопределено
						И ТекущийПлатеж.НеОтноситьНаЗатратыПоНУ = Истина Тогда
						Проводка["СуммаНУ" + СуффиксКоррСчета] = 0;		
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
			//Смартис Лиманчук окончание 02.11.2012
			
			
		КонецЦикла;
		
		Если НЕ Объект = Null тогда
			ЗафиксироватьДвижениеДенегВРегистреРасчетов(Объект, СтруктураПараметров, ЗаписыватьДвижения, СтруктураДвижений);
		Конецесли;
		
		
		Возврат Истина;
		
	КонецЕсли;
	
	//Полная схема проведения (on-line)	
	
	Если (РежимПроведения <> Неопределено) И (НЕ Объект = Null) Тогда
		ЗафиксироватьДвижениеДенегВРегистреРасчетов(Объект, СтруктураПараметров, ЗаписыватьДвижения, СтруктураДвижений);
	КонецЕсли;
	
	Если ЭтоВозврат Тогда
		// при возврате изменяем местами счета оплаты и аванса для правильного формирования движений по возвратам
		Для Каждого СтрокаПлатежа Из РеестрПлатежей Цикл
			СчетАванса = СтрокаПлатежа.СчетОплаты;
			СтрокаПлатежа.СчетОплаты = ?(ЗначениеЗаполнено(СтрокаПлатежа.СчетАванса), СтрокаПлатежа.СчетАванса, СтрокаПлатежа.СчетОплаты);
			СтрокаПлатежа.СчетАванса = СчетАванса;
		КонецЦикла;
	КонецЕсли;
	
	//Колонки для хранения сумм авансов
	РеестрПлатежей.Колонки.Добавить("АвансРеглБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	РеестрПлатежей.Колонки.Добавить("АвансВалБУ" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	//Оценка текущего состояния расчетов по БУ для каждого счета из счетов оплаты в документе.
	ЗадолженностьРеестр = РеестрПлатежей.Скопировать();
	ЗадолженностьРеестр.Свернуть("СделкаРегл, ДоговорКонтрагента,СчетОплаты,Контрагент", "СуммаСНДСВал");
	ЗадолженностьРеестр.Колонки.Добавить("Задолженность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Если РасчетыВВалюте Тогда
		УсловиеВалюта = ВалютаДокумента;
	Иначе
		УсловиеВалюта = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;

	Для каждого СчетДоговор из ЗадолженностьРеестр цикл
		
		Если СчетДоговор.СуммаСНДСВал=0 тогда
			Продолжить;
		КонецЕсли;
		
		//СчетДоговор.Задолженность = БухгалтерскийУчет.ПолучитьОстатокПоСчету(Организация,МоментДокумента,СчетДоговор.СчетОплаты,УсловиеВалюта, СчетДоговор.Контрагент, СчетДоговор.ДоговорКонтрагента);
		//Если НаправлениеДвижения <> Перечисления.НаправленияДвижений.Поступление тогда
		//	СчетДоговор.Задолженность = -СчетДоговор.Задолженность;
		//КонецеслИ;
		
		МоментДокумента = Новый МоментВремени(ДатаДока,СтруктураПараметров.Регистратор);
		ТаблицаЗадолженностей = БухгалтерскийУчет.ПолучитьОстатокПоСчету(Организация,МоментДокумента,СчетДоговор.СчетОплаты,УсловиеВалюта ,СчетДоговор.Контрагент, СчетДоговор.ДоговорКонтрагента,СчетДоговор.СделкаРегл,?(НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление,1,-1));
		Если РасчетыВВалюте Тогда
			СчетДоговор.Задолженность = ТаблицаЗадолженностей.Итог("ВалютнаяСуммаОстаток");
		Иначе
			СчетДоговор.Задолженность = ТаблицаЗадолженностей.Итог("СуммаОстаток");
		КонецЕсли; 

	КонецЦикла;

	//Разделение каждой строки на оплату задолженности и аванс
	Для каждого ТекущийПлатеж из РеестрПлатежей Цикл

		СчетОплаты = ТекущийПлатеж.СчетОплаты;
		СчетАванса = ТекущийПлатеж.СчетАванса;
		ДоговорКонтрагента = ТекущийПлатеж.ДоговорКонтрагента;

		КлючЗадолженности = Новый Структура("СделкаРегл, ДоговорКонтрагента,СчетОплаты");
		КлючЗадолженности.ДоговорКонтрагента = ТекущийПлатеж.ДоговорКонтрагента;
		КлючЗадолженности.СделкаРегл    	 = ТекущийПлатеж.СделкаРегл;
		КлючЗадолженности.СчетОплаты         = ТекущийПлатеж.СчетОплаты;
		ЗадолженностьСтрока = ЗадолженностьРеестр.НайтиСтроки(КлючЗадолженности);

		ЗадолженностьВал = ЗадолженностьСтрока[0].Задолженность;
		СуммаПлатежаВал  = ТекущийПлатеж.СуммаСНДСВал;

		СуммаОплатыВал = МИН(МАКС(0,ЗадолженностьВал), СуммаПлатежаВал);
		СуммаАвансаВал = СуммаПлатежаВал - СуммаОплатыВал;
		
		//Если счет расчетов совпадает со счетом аванса или счет аванса не заполнен - нет аванса
		Если СчетОплаты = СчетАванса ИЛИ НЕ ЗначениеЗаполнено(СчетАванса) Тогда
			СуммаОплатыВал = СуммаОплатыВал + СуммаАвансаВал;
			СуммаАвансаВал = 0;
		КонецЕсли;

		// Уменьшим остаток задолженности
		ЗадолженностьСтрока[0].Задолженность = ЗадолженностьСтрока[0].Задолженность - СуммаОплатыВал;
		
		Если РасчетыВВалюте Тогда
			СуммаОплатыРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаОплатыВал, 
							     						 ВалютаДокумента, ВалютаРегламентированногоУчета,
								    					 КурсДокумента, ДанныеВалютыРегламентированногоУчета.Курс,
									    				 КратностьДокумента, ДанныеВалютыРегламентированногоУчета.Кратность);
			СуммаАвансаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаАвансаВал, 
							     						 ВалютаДокумента, ВалютаРегламентированногоУчета,
								    					 КурсДокумента, ДанныеВалютыРегламентированногоУчета.Курс,
									    				 КратностьДокумента, ДанныеВалютыРегламентированногоУчета.Кратность);
		Иначе
			СуммаОплатыРегл = СуммаОплатыВал;
			СуммаАвансаРегл = СуммаАвансаВал;
		КонецЕсли;
		
		Если (СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат) И (СтруктураПараметров.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда

			//Получение основных данных документа
			ТаблицаПоВзаиморасчетам = СтруктураПараметров.Таблица.Скопировать();
			ТаблицаПоВзаиморасчетам.Свернуть("СделкаРегл,ДоговорКонтрагента","СуммаСНДСВал,СуммаСНДСРегл");

			ТаблицаОстаткиВзаиморасчетовБУ  = СформироватьОстаткиДляРасчетыПоПриобретениеРеализацияВВалюте(СтруктураПараметров);
			СуммаКР						   = 0;
			
			Для Каждого СтрокаТаблицы Из ТаблицаПоВзаиморасчетам Цикл
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ДоговорКонтрагента", СтрокаТаблицы.ДоговорКонтрагента);
				СтруктураПоиска.Вставить("Сделка", СтрокаТаблицы.СделкаРегл);
				НайденныеСтроки = ТаблицаОстаткиВзаиморасчетовБУ.НайтиСтроки(СтруктураПоиска);
				
				СуммаВзаиморасчетовОстаток  = 0;
				СуммаРеглОстаток            = 0;
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					ОсталосьВозместить = СтрокаТаблицы.СуммаСНДСВал;
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						
						Если СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
							//При возврате денег остатки в ТаблицаОстаткиВзаиморасчетовБУ положительные
							Возмещаем		= Макс(ОсталосьВозместить, НайденнаяСтрока.СуммаСНДСВал);//ведь сдесь суммы отрицательные
							ВозвращаемМод	= -Возмещаем;
						Иначе
							Возмещаем		=  МИН(ОсталосьВозместить, НайденнаяСтрока.СуммаСНДСВал);
							ВозвращаемМод	=  Возмещаем;
						КонецЕсли;
						СуммаВзаиморасчетовОстаток  = СуммаВзаиморасчетовОстаток + ВозвращаемМод;
						СуммаРеглОстаток            = СуммаРеглОстаток + ?(НайденнаяСтрока.СуммаСНДСВал=0, 0, НайденнаяСтрока.СуммаСНДСРегл * ВозвращаемМод / НайденнаяСтрока.СуммаСНДСВал);
						ОсталосьВозместить = ОсталосьВозместить - Возмещаем;
						
						Если ОсталосьВозместить = 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если СтрокаТаблицы.СуммаСНДСВал <> 0 И СуммаВзаиморасчетовОстаток <> 0 Тогда
					
					СуммаСНДСВтороеСобытиеВал	= МИН(МАКС(0,СуммаВзаиморасчетовОстаток), СтрокаТаблицы.СуммаСНДСВал);
					СуммаСНДСВтороеСобытиеРегл	= СтрокаТаблицы.СуммаСНДСРегл * СуммаСНДСВтороеСобытиеВал / СтрокаТаблицы.СуммаСНДСВал;
					СуммаКР						= СуммаКР + СуммаРеглОстаток  * СуммаСНДСВтороеСобытиеВал / СуммаВзаиморасчетовОстаток - СуммаСНДСВтороеСобытиеРегл;
					
				КонецЕсли;

			КонецЦикла;
			
			СуммаОплатыРегл = СуммаОплатыРегл + СуммаКР;
			ТекущийПлатеж.СуммаСНДСРегл = СуммаАвансаРегл + СуммаОплатыРегл;
			
		КонецЕсли;

		// запишем авансы
		ТекущийПлатеж.АвансВалБУ  = СуммаАвансаВал;
		ТекущийПлатеж.АвансРеглБУ = СуммаАвансаРегл;

		// Оплата от покупателя
		Если СуммаОплатыВал > 0 Тогда

			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период                  = ДатаДока;
			Проводка.Активность              = Истина;
			//Смартис Лиманчук начало 02.11.2012
			//Проводка.Организация             = Организация;
			ТекОрганизация1 = Организация;
			ТекОрганизация2 = Организация;
			ДвойнаяПроводка = Ложь;
			//ИЗМЕНЕНО Верескул Игорь(Начало 14.12.2020		
			Если Объект.Дата >= Дата("20210101") Тогда
				НаличнаяОрганизация = Константы.НПТ.Получить();
			Иначе
				НаличнаяОрганизация = Константы.КрафтКолор.Получить();
			КонецЕсли;
			Если НЕ СтруктураПараметров.Свойство("ВидОперации") Тогда
			ИначеЕсли СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
				Если ТекущийПлатеж.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация1 = НаличнаяОрганизация;
				КонецЕсли;
			ИначеЕсли СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
				Если ТекущийПлатеж.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация1 = НаличнаяОрганизация;
				КонецЕсли;
			ИначеЕсли СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
				Если ТекущийПлатеж.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация1 = НаличнаяОрганизация;
					ТекОрганизация2 = НаличнаяОрганизация;
				КонецЕсли;
			ИначеЕсли СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
				Если ТекущийПлатеж.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация1 = НаличнаяОрганизация;
				КонецЕсли;
				Если ТекущийПлатеж.КоррСубконто2.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация2 = НаличнаяОрганизация;
				КонецЕсли;
				ДвойнаяПроводка = (ТекОрганизация1 <> ТекОрганизация2);
			КонецЕсли;
			
			Если НЕ ДвойнаяПроводка Тогда
			
			Проводка.Организация             = ТекОрганизация1;
			//Смартис Лиманчук окончание 02.11.2012
			
			Проводка.Сумма                   = СуммаОплатыРегл;
			
			Проводка.Содержание  = ?(ЭтоВозврат, ВидОперации + " (аванс)", ВидОперации);
			
			Проводка.ВидРегламентнойОперации = ВидРегламентнойОперации;
			
			Проводка["Счет"                    + СуффиксСчетаРасчетов] = СчетОплаты;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Контрагенты", ТекущийПлатеж.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Договоры",    ТекущийПлатеж.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Сделки",      ТекущийПлатеж.СделкаРегл);
			Проводка["Валюта"                  + СуффиксСчетаРасчетов] = ВалютаДокумента;
			Проводка["ВалютнаяСумма"           + СуффиксСчетаРасчетов] = СуммаОплатыВал;

			Проводка["Счет"                    + СуффиксКоррСчета]     = КоррСчет;
			Для каждого ВидСубконтоКоррСчета из КоррСчет.ВидыСубконто цикл
				Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто,ТекущийПлатеж["КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки]);
				Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица Тогда
					Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
						Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто, ОбособленноеПодразделение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Проводка["Валюта"                  + СуффиксКоррСчета]     = ВалютаДокумента;
			Проводка["ВалютнаяСумма"           + СуффиксКоррСчета]     = СуммаОплатыВал;
			
			Если НЕ РеестрПлатежей.Колонки.Найти("НалоговоеНазначение") = Неопределено Тогда
				
				Проводка["НалоговоеНазначение" + СуффиксКоррСчета] = ТекущийПлатеж.НалоговоеНазначение;
				
				Если НЕ ТекущийПлатеж.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
					Проводка["СуммаНУ" + СуффиксКоррСчета] = Проводка.Сумма;	
				КонецЕсли;
				
				Если НЕ РеестрПлатежей.Колонки.Найти("НеОтноситьНаЗатратыПоНУ") = Неопределено
					И ТекущийПлатеж.НеОтноситьНаЗатратыПоНУ = Истина Тогда
					Проводка["СуммаНУ" + СуффиксКоррСчета] = 0;		
				КонецЕсли;
				
			КонецЕсли;
				
			//Смартис Лиманчук начало 02.11.2012
			Иначе
			
				Проводка.Организация             = ТекОрганизация1;
				
				Проводка.Сумма                   = СуммаОплатыРегл;
				
				Проводка.Содержание  = ?(ЭтоВозврат, ВидОперации + " (аванс)", ВидОперации);
				
				Проводка.ВидРегламентнойОперации = ВидРегламентнойОперации;
				
				Проводка["Счет"                    + СуффиксСчетаРасчетов] = СчетОплаты;
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Контрагенты", ТекущийПлатеж.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Договоры",    ТекущийПлатеж.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Сделки",      ТекущийПлатеж.СделкаРегл);
				Проводка["Валюта"                  + СуффиксСчетаРасчетов] = ВалютаДокумента;
				Проводка["ВалютнаяСумма"           + СуффиксСчетаРасчетов] = СуммаОплатыВал;

				
				Проводка["Счет"                    + СуффиксКоррСчета]     = ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты;
				//Для каждого ВидСубконтоКоррСчета из КоррСчет.ВидыСубконто цикл
				//	Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто,ТекущийПлатеж["КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки]);
				//	Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица Тогда
				//		Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
				//			Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто, ОбособленноеПодразделение);
				//		КонецЕсли;
				//	КонецЕсли;
				//КонецЦикла;
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период                  = ДатаДока;
				Проводка.Активность              = Истина;
				
				Проводка.Организация             = ТекОрганизация2;
				Проводка.Сумма                   = СуммаОплатыРегл;
				
				Проводка.Содержание  = ?(ЭтоВозврат, ВидОперации + " (аванс)", ВидОперации);
				
				Проводка.ВидРегламентнойОперации = ВидРегламентнойОперации;
				
				Проводка["Счет"                    + СуффиксСчетаРасчетов]     = ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты;
				//Для каждого ВидСубконтоКоррСчета из КоррСчет.ВидыСубконто цикл
				//	Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто,ТекущийПлатеж["КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки]);
				//	Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица Тогда
				//		Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
				//			Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто, ОбособленноеПодразделение);
				//		КонецЕсли;
				//	КонецЕсли;
				//КонецЦикла;
				
				Проводка["Счет"                    + СуффиксКоррСчета]     = КоррСчет;
				
				Для каждого ВидСубконтоКоррСчета из КоррСчет.ВидыСубконто цикл
					Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто,ТекущийПлатеж["КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки]);
					Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица Тогда
						Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
							Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто, ОбособленноеПодразделение);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Проводка["Валюта"                  + СуффиксКоррСчета]     = ВалютаДокумента;
				Проводка["ВалютнаяСумма"           + СуффиксКоррСчета]     = СуммаОплатыВал;
				
				Если НЕ РеестрПлатежей.Колонки.Найти("НалоговоеНазначение") = Неопределено Тогда
					
					Проводка["НалоговоеНазначение" + СуффиксКоррСчета] = ТекущийПлатеж.НалоговоеНазначение;
					
					Если НЕ ТекущийПлатеж.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
						Проводка["СуммаНУ" + СуффиксКоррСчета] = Проводка.Сумма;	
					КонецЕсли;
					
					Если НЕ РеестрПлатежей.Колонки.Найти("НеОтноситьНаЗатратыПоНУ") = Неопределено
						И ТекущийПлатеж.НеОтноситьНаЗатратыПоНУ = Истина Тогда
						Проводка["СуммаНУ" + СуффиксКоррСчета] = 0;		
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
			//Смартис Лиманчук окончание 02.11.2012
			
		КонецЕсли;
		
		// Учесть аванс
		Если СуммаАвансаВал <> 0 тогда 
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период                  = ДатаДока;
			Проводка.Активность              = Истина;
			//Смартис Лиманчук начало 02.11.2012
			//Проводка.Организация             = Организация;
			ТекОрганизация1 = Организация;
			ТекОрганизация2 = Организация;
			ДвойнаяПроводка = Ложь;
			//ИЗМЕНЕНО Верескул Игорь(Начало 14.12.2020		
			Если Объект.Дата >= Дата("20210101") Тогда
				НаличнаяОрганизация = Константы.НПТ.Получить();
			Иначе
				НаличнаяОрганизация = Константы.КрафтКолор.Получить();
			КонецЕсли;
			Если СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ИзменениеЗадолженности Тогда
				Если ТекущийПлатеж.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация1 = НаличнаяОрганизация;
				КонецЕсли;
			ИначеЕсли СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
				Если ТекущийПлатеж.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация1 = НаличнаяОрганизация;
				КонецЕсли;
			ИначеЕсли СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
				Если ТекущийПлатеж.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация1 = НаличнаяОрганизация;
				КонецЕсли;
			ИначеЕсли СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
				Если ТекущийПлатеж.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация1 = НаличнаяОрганизация;
				КонецЕсли;
				Если ТекущийПлатеж.КоррСубконто2.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					ТекОрганизация2 = НаличнаяОрганизация;
				КонецЕсли;
				ДвойнаяПроводка = (ТекОрганизация1 <> ТекОрганизация2);
			КонецЕсли;
			
			Если НЕ ДвойнаяПроводка Тогда
			
			Проводка.Организация             = ТекОрганизация1;
			//Смартис Лиманчук окончание 02.11.2012
			Проводка.Сумма                   = СуммаАвансаРегл;
			Проводка.Содержание  = ?(ЭтоВозврат, ВидОперации, ВидОперации  + " (аванс)");
			
			Проводка.ВидРегламентнойОперации = ВидРегламентнойОперации;
			
			Проводка["Счет"                    + СуффиксСчетаРасчетов] = СчетАванса;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Контрагенты", ТекущийПлатеж.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Договоры",    ТекущийПлатеж.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Сделки",    ТекущийПлатеж.СделкаРегл);
			Проводка["Валюта"                  + СуффиксСчетаРасчетов] = ВалютаДокумента;
			Проводка["ВалютнаяСумма"           + СуффиксСчетаРасчетов] = СуммаАвансаВал;

			Проводка["Счет"                    + СуффиксКоррСчета]     = КоррСчет;
			Для каждого ВидСубконтоКоррСчета из КоррСчет.ВидыСубконто цикл
				Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто,ТекущийПлатеж["КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки]);
				Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица Тогда
					Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
						Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто, ОбособленноеПодразделение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Проводка["Валюта"                  + СуффиксКоррСчета]     = ВалютаДокумента;
			Проводка["ВалютнаяСумма"           + СуффиксКоррСчета]     = СуммаАвансаВал;
			
			Если НЕ РеестрПлатежей.Колонки.Найти("НалоговоеНазначение") = Неопределено Тогда
				
				Проводка["НалоговоеНазначение" + СуффиксКоррСчета] = ТекущийПлатеж.НалоговоеНазначение;
				
				Если НЕ ТекущийПлатеж.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
					Проводка["СуммаНУ" + СуффиксКоррСчета] = Проводка.Сумма;	
				КонецЕсли;
				
				Если НЕ РеестрПлатежей.Колонки.Найти("НеОтноситьНаЗатратыПоНУ") = Неопределено
					И ТекущийПлатеж.НеОтноситьНаЗатратыПоНУ = Истина Тогда
					Проводка["СуммаНУ" + СуффиксКоррСчета] = 0;		
				КонецЕсли;
			КонецЕсли;
				
			//Смартис Лиманчук начало 02.11.2012
			Иначе
			
				Проводка.Организация             = ТекОрганизация1;
				
				Проводка.Сумма                   = СуммаАвансаРегл;
				Проводка.Содержание  = ?(ЭтоВозврат, ВидОперации, ВидОперации  + " (аванс)");
				
				Проводка.ВидРегламентнойОперации = ВидРегламентнойОперации;
				
				Проводка["Счет"                    + СуффиксСчетаРасчетов] = СчетАванса;
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Контрагенты", ТекущийПлатеж.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Договоры",    ТекущийПлатеж.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчетаРасчетов], Проводка["Субконто" + СуффиксСчетаРасчетов], "Сделки",      ТекущийПлатеж.СделкаРегл);
				Проводка["Валюта"                  + СуффиксСчетаРасчетов] = ВалютаДокумента;
				Проводка["ВалютнаяСумма"           + СуффиксСчетаРасчетов] = СуммаАвансаВал;

				
				Проводка["Счет"                    + СуффиксКоррСчета]     = ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты;
				//Для каждого ВидСубконтоКоррСчета из КоррСчет.ВидыСубконто цикл
				//	Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто,ТекущийПлатеж["КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки]);
				//	Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица Тогда
				//		Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
				//			Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто, ОбособленноеПодразделение);
				//		КонецЕсли;
				//	КонецЕсли;
				//КонецЦикла;
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период                  = ДатаДока;
				Проводка.Активность              = Истина;
				
				Проводка.Организация             = ТекОрганизация2;
				Проводка.Сумма                   = СуммаАвансаРегл;
				Проводка.Содержание  = ?(ЭтоВозврат, ВидОперации, ВидОперации  + " (аванс)");
				
				Проводка.ВидРегламентнойОперации = ВидРегламентнойОперации;
				
				Проводка["Счет"                    + СуффиксСчетаРасчетов]     = ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты;
				//Для каждого ВидСубконтоКоррСчета из КоррСчет.ВидыСубконто цикл
				//	Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто,ТекущийПлатеж["КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки]);
				//	Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица Тогда
				//		Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
				//			Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто, ОбособленноеПодразделение);
				//		КонецЕсли;
				//	КонецЕсли;
				//КонецЦикла;
				
				Проводка["Счет"                    + СуффиксКоррСчета]     = КоррСчет;
				
				Для каждого ВидСубконтоКоррСчета из КоррСчет.ВидыСубконто цикл
					Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто,ТекущийПлатеж["КоррСубконто"+ВидСубконтоКоррСчета.НомерСтроки]);
					Если ВидСубконтоКоррСчета.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица Тогда
						Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
							Проводка["Субконто"+СуффиксКоррСчета].Вставить(ВидСубконтоКоррСчета.ВидСубконто, ОбособленноеПодразделение);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Проводка["Валюта"                  + СуффиксКоррСчета]     = ВалютаДокумента;
				Проводка["ВалютнаяСумма"           + СуффиксКоррСчета]     = СуммаАвансаВал;
				
				Если НЕ РеестрПлатежей.Колонки.Найти("НалоговоеНазначение") = Неопределено Тогда
					
					Проводка["НалоговоеНазначение" + СуффиксКоррСчета] = ТекущийПлатеж.НалоговоеНазначение;
					
					Если НЕ ТекущийПлатеж.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
						Проводка["СуммаНУ" + СуффиксКоррСчета] = Проводка.Сумма;	
					КонецЕсли;
					
					Если НЕ РеестрПлатежей.Колонки.Найти("НеОтноситьНаЗатратыПоНУ") = Неопределено
						И ТекущийПлатеж.НеОтноситьНаЗатратыПоНУ = Истина Тогда
						Проводка["СуммаНУ" + СуффиксКоррСчета] = 0;		
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
			//Смартис Лиманчук окончание 02.11.2012
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	Возврат Истина;

КонецФункции // ДвижениеДенег()

Функция СформироватьОстаткиДляРасчетыПоПриобретениеРеализацияВВалюте(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Договор"      , СтруктураПараметров.Таблица.ВыгрузитьКолонку("ДоговорКонтрагента"));
	Запрос.УстановитьПараметр("Сделка"      ,  СтруктураПараметров.Таблица.ВыгрузитьКолонку("СделкаРегл"));
	Запрос.УстановитьПараметр("СчетОплаты"   , СтруктураПараметров.Таблица.ВыгрузитьКолонку("СчетОплаты"));
	Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(СтруктураПараметров.Период, СтруктураПараметров.Регистратор));
	
	Запрос.Текст = "
	   |ВЫБРАТЬ
	   |	РасчетыВВалюте.ДоговорКонтрагента,
	   |	РасчетыВВалюте.Сделка,
	   |	РасчетыВВалюте.СчетОплаты КАК СчетОплаты,
	   |	РасчетыВВалюте.ДатаОплаты КАК ДатаОплаты,
	   |	РасчетыВВалюте.Документ КАК Документ,
	   |	РасчетыВВалюте.СуммаВзаиморасчетовОстаток КАК СуммаСНДСВал,
	   |	РасчетыВВалюте.СуммаРеглОстаток КАК СуммаСНДСРегл
	   |ИЗ
	   |	РегистрНакопления."+СтруктураПараметров.РегистрРасчетов+".Остатки(&МоментВремени, (ДоговорКонтрагента  в  (&Договор) И СчетОплаты В (&СчетОплаты) И Сделка В (&Сделка))) КАК РасчетыВВалюте
	   |
	   |ГДЕ
	   |	  РасчетыВВалюте.СуммаВзаиморасчетовОстаток " + СтруктураПараметров.ЗнакОстатков + " 0 
	   |	И РасчетыВВалюте.СуммаРеглОстаток " + СтруктураПараметров.ЗнакОстатков + " 0
	   |
	   |УПОРЯДОЧИТЬ ПО
	   |	ДатаОплаты,
	   |	РасчетыВВалюте.Документ.Дата,
	   |	Документ";
	   
	Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
		
		СтруктураПараметровБлокировки = Новый Структура(
			"ТипТаблицы, ИмяТаблицы, ИсточникДанных", 
			"РегистрНакопления", СтруктураПараметров.РегистрРасчетов, СтруктураПараметров.Таблица);
			
		СтруктураЗначенийБлокировки   = Новый Структура;
	 	СтруктураЗначенийБлокировки.Вставить("Период", Новый Диапазон(, СтруктураПараметров.Период)); 
		
		СтруктураИсточникаДанных = Новый Структура(
			"ДоговорКонтрагента,СчетОплаты,Сделка"
			,"ДоговорКонтрагента"
			,"СчетОплаты"
			,"СделкаРегл");
		
		Отказ     = Ложь;
		Заголовок = "";
	 	ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных, Отказ, Заголовок);
				
	КонецЕсли;
	   
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДобавитьПараметрыЗависимыеОтНаправленияИРасчетыВозврат(СтруктураПараметров)
	
	Если СтруктураПараметров.ПлатежныйДокумент Тогда
		
		Если СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
			ЗнакОстатков = ">";
		Иначе
			ЗнакОстатков = "<";
		КонецЕсли;
		
		Если ((СтруктураПараметров.НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление) И (СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат))
		 Или ((СтруктураПараметров.НаправлениеДвижения = Перечисления.НаправленияДвижений.Выбытие)     И (СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты)) Тогда
			РегистрРасчетов	= "РасчетыПоПриобретениюВВалютеОрганизации";
		Иначе
			РегистрРасчетов	= "РасчетыПоРеализацииВВалютеОрганизации";
		КонецЕсли;
		
		ДобавитьПриход = СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты;
		
	Иначе
		
		Если СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
			ЗнакОстатков = "<";
		Иначе
			ЗнакОстатков = ">";
		КонецЕсли;
		
		Если ((СтруктураПараметров.НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление) И (СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат))
		 Или ((СтруктураПараметров.НаправлениеДвижения = Перечисления.НаправленияДвижений.Выбытие)     И (СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты)) Тогда
			РегистрРасчетов	= "РасчетыПоРеализацииВВалютеОрганизации";
		Иначе
			РегистрРасчетов	= "РасчетыПоПриобретениюВВалютеОрганизации";
		КонецЕсли;
		
		ДобавитьПриход = СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("РегистрРасчетов"		, РегистрРасчетов);
	СтруктураПараметров.Вставить("ЗнакОстатков"			, ЗнакОстатков);
	СтруктураПараметров.Вставить("ДобавитьПриход"		, ДобавитьПриход);
	
КонецПроцедуры

Функция ПодготовкаСтруктурыПараметровДляРасчетыПоПриобретениеРеализацияВВалюте(Ссылка) Экспорт

	МетаданныеДокумента= Ссылка.Метаданные();
	ВидДокумента       = МетаданныеДокумента.Имя;
	РеквизитыДокумента = МетаданныеДокумента.Реквизиты;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	СтруктураПараметров = Новый Структура("");
	СтруктураПараметров.Вставить("Организация"			, Ссылка.Организация);
	
	Если 	 ВидДокумента = "ВозвратТоваровПоставщику"
		Или  ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ"
		Или  ВидДокумента = "ПолучениеУслугПоПереработке"
		Или  ВидДокумента = "ОтчетКомиссионераОПродажах"
		Или  ВидДокумента = "ВозвратТоваровОтПокупателя"
		Или  ВидДокумента = "АктОбОказанииПроизводственныхУслуг"
		Или  ВидДокумента = "ОтчетКомитентуОПродажах"
		Или  ВидДокумента = "ПоступлениеТоваровИзПереработки" Тогда
			НаправлениеДвиженияРасчетыВозврат = ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации (ВидДокумента);
			СтруктураПараметров.Вставить("ПлатежныйДокумент"	, Ложь);
	Иначе
			НаправлениеДвиженияРасчетыВозврат = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента);
			СтруктураПараметров.Вставить("ПлатежныйДокумент"	, Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаправлениеДвиженияРасчетыВозврат) тогда
		Возврат Ложь;
	Конецесли;

	СтруктураПараметров.Вставить("ВалютаДокумента"		, Ссылка.ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"		, Ссылка.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("КратностьДокумента"	, Ссылка.КратностьВзаиморасчетов);
	
	СтруктураПараметров.Вставить("НаправлениеДвижения"	, НаправлениеДвиженияРасчетыВозврат.НаправлениеДвижения);
	СтруктураПараметров.Вставить("РасчетыВозврат"		, НаправлениеДвиженияРасчетыВозврат.РасчетыВозврат);
	СтруктураПараметров.Вставить("ВидДокумента"			, ВидДокумента);
	
	ВидОперации = ?(Ссылка.Метаданные().Реквизиты.Найти("ВидОперации")=Неопределено,Неопределено,Ссылка["ВидОперации"]);
	СтруктураПараметров.Вставить("ВидОперации"        , ВидОперации);

	СтруктураПараметров.Вставить("Регистратор"			, Ссылка);
	СтруктураПараметров.Вставить("Заголовок"			, Заголовок);
	СтруктураПараметров.Вставить("Период"				, Ссылка.Дата);
	
	РеестрПлатежей = Новый ТаблицаЗначений();
	РеестрПлатежей.Колонки.Добавить("ДоговорКонтрагента");
	РеестрПлатежей.Колонки.Добавить("СделкаРегл");
	РеестрПлатежей.Колонки.Добавить("СуммаСНДСВал");
	РеестрПлатежей.Колонки.Добавить("СуммаСНДСРегл");
	РеестрПлатежей.Колонки.Добавить("СчетОплаты");
	РеестрПлатежей.Колонки.Добавить("СчетАванса");
	
	//Определяем, учитывается ли аванс в документе
	УчитыватьАванс = ОпределятьАвансыПриПроведении(СтруктураПараметров.Период, СтруктураПараметров.Организация);
	
	ДобавитьПараметрыЗависимыеОтНаправленияИРасчетыВозврат(СтруктураПараметров);
	
	Строка = РеестрПлатежей.Добавить();
	Строка.ДоговорКонтрагента= Ссылка.ДоговорКонтрагента;
	Строка.СделкаРегл = ?(Ссылка.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом, Неопределено, Ссылка.Сделка);
	Строка.СуммаСНДСВал		 = Ссылка.СуммаДокумента;
	Если ВидДокумента = "ОтчетКомиссионераОПродажах" Тогда
		Строка.СуммаСНДСВал = Строка.СуммаСНДСВал - ?(Ссылка.УдержатьКомиссионноеВознаграждение, Ссылка.СуммаВознаграждения, 0);
	ИначеЕсли ВидДокумента = "ОтчетКомитентуОПродажах" Тогда
		Строка.СуммаСНДСВал = Строка.СуммаСНДСВал + ?(Ссылка.УдержатьКомиссионноеВознаграждение, Ссылка.СуммаВознаграждения, 0);
	КонецЕсли;
	Строка.СуммаСНДСРегл	 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаСНДСВал, СтруктураПараметров.ВалютаДокумента, ВалютаРегламентированногоУчета,
																	  СтруктураПараметров.КурсДокумента, 1, СтруктураПараметров.КратностьДокумента, 1);
	//
	Если ВидДокумента = "ОтчетКомиссионераОПродажах" Тогда
		СчетАвансов = Ссылка.СчетУчетаРасчетовПоАвансамПолученным;
	ИначеЕсли ВидДокумента = "ОтчетКомитентуОПродажах" Тогда
		СчетАвансов = Ссылка.СчетУчетаРасчетовПоАвансамВыданным;
	Иначе
		СчетАвансов = Ссылка.СчетУчетаРасчетовПоАвансам;
	КонецЕсли;

	Если УчитыватьАванс И (
		(СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат И    СтруктураПараметров.ПлатежныйДокумент) Или 
		(СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты И НЕ СтруктураПараметров.ПлатежныйДокумент)) Тогда
			Строка.СчетОплаты		 = СчетАвансов;
			Строка.СчетАванса		 = Ссылка.СчетУчетаРасчетовСКонтрагентом;
	Иначе
			Строка.СчетОплаты		 = Ссылка.СчетУчетаРасчетовСКонтрагентом;
			Строка.СчетАванса		 = СчетАвансов;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Таблица", РеестрПлатежей);
	
	Возврат СтруктураПараметров;

КонецФункции

Функция СформироватьДвиженияПоРасчетыПриобретениеРеализацияВВалюте(СтруктураПараметров, Отказ=Ложь, Объект=Неопределено) Экспорт
	
	ТаблицаПлатежей = СтруктураПараметров.Таблица;
	Если ТаблицаПлатежей.Количество() = 0 Тогда
		// Если нет платежей, нечего и переоценивать
		Возврат Истина;
	КонецЕсли;
	
	Ссылка 				= СтруктураПараметров.Регистратор;
	ВидДокумента		= СтруктураПараметров.ВидДокумента;
	ДатаДока			= СтруктураПараметров.Период;
	МоментДокумента 	= Новый МоментВремени(ДатаДока, СтруктураПараметров.Регистратор);
	
	Организация			= Ссылка.Организация;
	Контрагент			= Ссылка.Контрагент;
	ВалютаДокумента		= СтруктураПараметров.ВалютаДокумента;
	
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	ДвиженияПоРегистру = ОбщегоНазначения.ПолучитьДвижение(Объект, РегистрыНакопления[СтруктураПараметров.РегистрРасчетов]);
	
	Заголовок = "";
	СтруктураПараметров.Свойство("Заголовок", Заголовок);
	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
		 Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	КонецЕсли;
	
	СостояниеРасчетов  = БухгалтерскийУчетРасчетовСКонтрагентами.СформироватьОстаткиДляРасчетыПоПриобретениеРеализацияВВалюте(СтруктураПараметров);
	//Обрабатываем задолженности
	Для Каждого Платеж Из ТаблицаПлатежей Цикл
		
		АвансВал  = Платеж.СуммаСНДСВал;
		АвансРегл = Платеж.СуммаСНДСРегл;
		ДолгВал   = 0;
		ДолгРегл  = 0;
		
		Для Каждого ОстатокЗадолженности Из СостояниеРасчетов Цикл
			
			Если ОстатокЗадолженности.СуммаСНДСВал = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если АвансВал = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			//обработаем закрытие задолженностии и сформируем суммовые разницы
			СуммаСНДСВал  = АвансВал;
			СуммаСНДСРегл = АвансРегл;//Платеж всего
			ДолгВал       = ОстатокЗадолженности.СуммаСНДСВал;
			ДолгРегл      = ОстатокЗадолженности.СуммаСНДСРегл;//Долг
			Если СтруктураПараметров.ЗнакОстатков = "<" Тогда
				ДолгВал   = -ДолгВал;
				ДолгРегл  = -ДолгРегл;
			КонецЕсли;
			
			ТекущееПокрытиеВал	   = Мин(ДолгВал,СуммаСНДСВал);
			ТекущееПокрытиеРегл	   = Окр(ДолгРегл*(ТекущееПокрытиеВал/ДолгВал),2);
			ЗачитываемаяСуммаРегл  = Окр(СуммаСНДСРегл*(ТекущееПокрытиеВал/СуммаСНДСВал),2);
			ТекущаяСуммоваяРазница = ТекущееПокрытиеРегл - ЗачитываемаяСуммаРегл;
			
			Если СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Или (НЕ СтруктураПараметров.ПлатежныйДокумент И СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат) Тогда
				ОстатокЗадолженности.СуммаСНДСВал  = ОстатокЗадолженности.СуммаСНДСВал  + ТекущееПокрытиеВал;
				ОстатокЗадолженности.СуммаСНДСРегл = ОстатокЗадолженности.СуммаСНДСРегл + ТекущееПокрытиеРегл;
			Иначе
				ОстатокЗадолженности.СуммаСНДСВал  = ОстатокЗадолженности.СуммаСНДСВал  - ТекущееПокрытиеВал;
				ОстатокЗадолженности.СуммаСНДСРегл = ОстатокЗадолженности.СуммаСНДСРегл - ТекущееПокрытиеРегл;
			КонецЕсли;
			
			ДолгВал   = ДолгВал   + ТекущееПокрытиеВал;
			ДолгРегл  = ДолгРегл  + ТекущееПокрытиеРегл;
			АвансВал  = АвансВал  - ТекущееПокрытиеВал;
			АвансРегл = АвансРегл - ТекущееПокрытиеРегл;
			
			Движение=?(СтруктураПараметров.ДобавитьПриход, ДвиженияПоРегистру.ДобавитьПриход(), ДвиженияПоРегистру.ДобавитьРасход());
			Движение.ДоговорКонтрагента	 = Платеж.ДоговорКонтрагента;
			Движение.Сделка	 			= Платеж.СделкаРегл;
			Движение.Документ			 = ОстатокЗадолженности.Документ;
			Движение.ДатаОплаты          = ОстатокЗадолженности.ДатаОплаты;
			Движение.Активность			 = Истина;
			Движение.Период 			 = ДатаДока;
			Движение.Контрагент			 = Контрагент;
			Движение.Организация 		 = Организация;
			Движение.СчетОплаты			 = Платеж.СчетОплаты;
			Движение.СуммаВзаиморасчетов = ТекущееПокрытиеВал;
			Движение.СуммаРегл			 = ТекущееПокрытиеРегл;		
			
		КонецЦикла;
		
		Если АвансВал = 0 Тогда
			//Прерываем здесь алгоритм чтоб не возникло движения с курсовой разницей
			Возврат Истина;
		КонецЕсли;
		
		Движение=?(СтруктураПараметров.ДобавитьПриход, ДвиженияПоРегистру.ДобавитьПриход(), ДвиженияПоРегистру.ДобавитьРасход());
		Движение.ДоговорКонтрагента	 = Платеж.ДоговорКонтрагента;
		Движение.Сделка				 = Платеж.СделкаРегл;
		Движение.Документ			 = Ссылка;
		Движение.ДатаОплаты          = Ссылка.Дата;
		Движение.Активность			 = Истина;
		Движение.Период 			 = ДатаДока;
		Движение.Контрагент			 = Контрагент;
		Движение.Организация 		 = Организация;
		Движение.СчетОплаты			 = Платеж.СчетАванса;
		Движение.СуммаВзаиморасчетов = АвансВал;
		Движение.СуммаРегл			 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(АвансВал, ВалютаДокумента, ВалютаРегламентированногоУчета,
										СтруктураПараметров.КурсДокумента, 1, СтруктураПараметров.КратностьДокумента, 1);
		
	КонецЦикла;
	
КонецФункции

// Переносит неизменяемые реквизиты строки таблицы в корректирующую запись
//
Процедура ДополнитьЗаписьРегистраПоСтрокеТаблицы(ЗаписьНабора, СтрокаТаблицы, Таблица) Экспорт
	
	Для каждого Колонка из Таблица.Колонки Цикл
		Если Колонка.Имя = "МоментВремени" или Колонка.Имя = "НомерСтроки" тогда
			Продолжить;
		КонецЕсли;
		Попытка 
			ЗаписьНабора[Колонка.Имя] = СтрокаТаблицы[Колонка.Имя];
		Исключение
			//Не смогли заполнить реквизит... Видно его нет.
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Обработка взаиморасчетов в валюте по документам оплаты
//
Функция ВзаиморасчетыВВалютеОплата(СтруктураПараметров,ВалютаРегламентированногоУчета,РежимПроведения=Неопределено,ПроводкиБУ,Объект = Null,Отказ=Ложь,УдаляемыеВидыРегОпераций = Неопределено) Экспорт
	
	ТаблицаПлатежей = СтруктураПараметров.Таблица;
	Если ТаблицаПлатежей.Количество() = 0 Тогда
		// Если нет платежей, нечего и переоценивать
		Возврат Истина;
	КонецЕсли;
	
	Ссылка 			= СтруктураПараметров.Регистратор;
	ВидДокумента	= СтруктураПараметров.ВидДокумента;
	ДатаДока		= СтруктураПараметров.Период;
	МоментДокумента = Новый МоментВремени(ДатаДока, СтруктураПараметров.Регистратор);
	
	Организация		= СтруктураПараметров.Организация;
	Контрагент		= СтруктураПараметров.Контрагент;
	ВалютаДокумента	= СтруктураПараметров.ВалютаДокумента;
	
	Заголовок = "";
	СтруктураПараметров.Свойство("Заголовок", Заголовок);
	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
		 Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	КонецЕсли;
	
	//Отбор платежей по валютным договорам
	Покупки	= Истина;
	Продажи	= Истина;
	
	ЛишниеСтроки = Новый Массив();
	Для каждого Платеж из ТаблицаПлатежей Цикл
		Если НЕ ЗначениеЗаполнено(Платеж.СчетАванса) тогда
			Платеж.СчетАванса = Платеж.СчетОплаты;
		КонецЕсли;
		ПокупкиПродажи = БухгалтерскийУчетРасчетовСКонтрагентами.ПроверкаРасчетыВУсловныхЕдиницах(СтруктураПараметров, Платеж.ДоговорКонтрагента, ВалютаРегламентированногоУчета, Отказ, Заголовок, Истина);
		Если ПокупкиПродажи=Ложь тогда
			ЛишниеСтроки.Добавить(Платеж);
		Иначе
			Покупки	= Покупки и ПокупкиПродажи.Покупки;
			Продажи	= Продажи и ПокупкиПродажи.Продажи;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЛишняяСтрока Из ЛишниеСтроки Цикл
		ТаблицаПлатежей.Удалить(ЛишняяСтрока);
	КонецЦикла;
	
	ВызванРегламентнойПроцедурой = (Объект=Null);
	//Получаем записи регистра, по которому отслеживается изменение состояния расчетов по документу
	ПеречитыватьРегистр = (ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаДолга"));	
	НаборДвиженийПоРегистру = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления[?(Покупки,"РасчетыПоПриобретениюВВалютеОрганизации","РасчетыПоРеализацииВВалютеОрганизации")], ПеречитыватьРегистр);
	
	Если НаборДвиженийПоРегистру = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвиженияПоРегистру = НаборДвиженийПоРегистру.Выгрузить();
	
	Если ВызванРегламентнойПроцедурой Тогда 
		СтруктураДвижений = Новый Структура();
		СтруктураДвижений.Вставить("ДвиженияПоРегиструРасчетовВВалюте", ДвиженияПоРегистру);
	КонецЕсли;
	//Определяем образ действий (on/off-line)
	УчитыватьАванс = ОпределятьАвансыПриПроведении(СтруктураПараметров.Период, СтруктураПараметров.Организация);
	
	//Сокращенная схема в случае off-line проведения
	Если Не (УчитыватьАванс или ВызванРегламентнойПроцедурой) Тогда
		
		Для Каждого ТекущийПлатеж Из ТаблицаПлатежей Цикл
			
			Если ТекущийПлатеж.СуммаСНДСВал = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = ДвиженияПоРегистру.Добавить();
			Движение.Регистратор		 = Ссылка;
			Движение.Активность			 = Истина;
			Движение.Период 			 = ДатаДока;
			Движение.ДатаОплаты 		 = ДатаДока;
			Движение.ВидДвижения		 = ВидДвиженияНакопления.Приход;
			
			Движение.Контрагент			 = Контрагент;
			Движение.Организация 		 = Организация;
			
			Движение.ДоговорКонтрагента	 = ТекущийПлатеж.ДоговорКонтрагента;
			Движение.Сделка	 = ТекущийПлатеж.СделкаРегл;
			
			// Измерение "Документ" НЕ заполняем! Это признак нераспределенного движения(off-line проведения)!
			Движение.СчетОплаты 		 = ТекущийПлатеж.СчетОплаты;
			Движение.СуммаВзаиморасчетов = ТекущийПлатеж.СуммаСНДСВал;
			Движение.СуммаРегл			 = ТекущийПлатеж.СуммаСНДСРегл;
			
		КонецЦикла;
		
		Если ДвиженияПоРегистру.Количество() > 0 Тогда
			НаборДвиженийПоРегистру.мПериод          = ДатаДока;
			НаборДвиженийПоРегистру.мТаблицаДвижений = ДвиженияПоРегистру;
			НаборДвиженийПоРегистру.ВыполнитьДвижения();
			Если Тип(ПроводкиБУ) = Тип("Структура") Тогда
				ПроводкиБУ.Вставить("ДвиженияПоРегиструРасчетовВВалюте", НаборДвиженийПоРегистру);
			Иначе
				НаборДвиженийПоРегистру.Записать(Ложь);
			КонецЕсли;
		КонецЕсли;
		Возврат Истина;
		
	КонецЕсли;	

	// Выбираем текущее остатки по регистрам расчетов в валюте
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Договор"      , ТаблицаПлатежей.ВыгрузитьКолонку("ДоговорКонтрагента"));
	Запрос.УстановитьПараметр("Счет"         , ТаблицаПлатежей.ВыгрузитьКолонку("СчетОплаты"));
	Запрос.УстановитьПараметр("МоментВремени", МоментДокумента);
	
	РезультатРасчетовОстатков  = СформироватьОстаткиДляРасчетыПоПриобретениеРеализацияВВалюте(СтруктураПараметров);
	
	СтруктураРеквизитов = Новый Структура ("СделкаРегл, ДоговорКонтрагента,СчетОплаты,СуммаСНДСВал");
	СостояниеРасчетовПоСчетамОплаты = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПлатежей,СтруктураРеквизитов);
	СостояниеРасчетовПоСчетамОплаты.Свернуть("СделкаРегл,ДоговорКонтрагента,СчетОплаты","СуммаСНДСВал");
	СостояниеРасчетовПоСчетамОплаты.Колонки.Добавить("АвансВал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СостояниеРасчетовПоСчетамОплаты.Колонки.Добавить("ДолгВал" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СостояниеРасчетовПоСчетамОплаты.Колонки.Добавить("РеестрЗадолженности");
	
	Для Каждого Платеж Из СостояниеРасчетовПоСчетамОплаты Цикл
		
		Платеж.АвансВал = Платеж.СуммаСНДСВал;
		Платеж.ДолгВал  = 0;
		
		Отбор = Новый Структура("Сделка, ДоговорКонтрагента,СчетОплаты",Платеж.СделкаРегл,Платеж.ДоговорКонтрагента,Платеж.СчетОплаты);
		СостояниеРасчетов = РезультатРасчетовОстатков.НайтиСтроки(Отбор);
		Если СостояниеРасчетов.Количество() = 0 Тогда
			Продолжить;                                      
		КонецЕсли;	
		
		ЗакрытьДолг = Новый ТаблицаЗначений();
		ЗакрытьДолг.Колонки.Добавить("Документ");
		ЗакрытьДолг.Колонки.Добавить("ДатаОплаты");
		ЗакрытьДолг.Колонки.Добавить("СуммаСНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ЗакрытьДолг.Колонки.Добавить("СуммаСНДСВал" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		Для Каждого ОстатокЗадолженности Из СостояниеРасчетов Цикл
			ОстатокЗадолженностиСуммаСНДСВал = ?(СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты, -ОстатокЗадолженности.СуммаСНДСВал, ОстатокЗадолженности.СуммаСНДСВал);
			ТекущееПокрытиеВал  = Мин(ОстатокЗадолженностиСуммаСНДСВал, Платеж.АвансВал);
			ТекущееПокрытиеРегл = Окр(ТекущееПокрытиеВал*(ОстатокЗадолженности.СуммаСНДСРегл/ОстатокЗадолженности.СуммаСНДСВал), 2);
			
			СтрокаЗакрытия = ЗакрытьДолг.Добавить();
			СтрокаЗакрытия.Документ      = ОстатокЗадолженности.Документ;
			СтрокаЗакрытия.ДатаОплаты      = ОстатокЗадолженности.ДатаОплаты;
			СтрокаЗакрытия.СуммаСНДСВал  = ТекущееПокрытиеВал;
			СтрокаЗакрытия.СуммаСНДСРегл = ТекущееПокрытиеРегл;
			
			Платеж.АвансВал = Платеж.АвансВал - ТекущееПокрытиеВал;
			Платеж.ДолгВал  = Платеж.ДолгВал  + ТекущееПокрытиеВал;
			Если Платеж.АвансВал = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Платеж.РеестрЗадолженности = Новый ТаблицаЗначений();
		Платеж.РеестрЗадолженности = ЗакрытьДолг.Скопировать();
		
	КонецЦикла;//Оценка задолженности
	
	ТаблицаПлатежей.Колонки.Добавить("ДолгВал"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("ДолгРегл" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("АвансВал" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПлатежей.Колонки.Добавить("АвансРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Если СостояниеРасчетовПоСчетамОплаты.Итог("ДолгВал")=0 Тогда
		
		//Если задолженностей вообще не нашли, перебрасываем все суммы на аванс
		Для Каждого Платеж Из ТаблицаПлатежей Цикл
			Платеж.АвансВал      = Платеж.СуммаСНДСВал;
			Платеж.АвансРегл     = Платеж.СуммаСНДСРегл;
			Платеж.ДолгВал       = 0;
			Платеж.ДолгРегл      = 0;
			
			Платеж.АвансВалБУ    = Платеж.АвансВалБУ  - Платеж.АвансВал;
			Платеж.АвансРеглБУ   = Платеж.АвансРеглБУ - Платеж.АвансРегл;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Платеж Из ТаблицаПлатежей Цикл
			// в реквизитах Платеж.АвансВал и Платеж.АвансРегл хранится 
			// нераспределенный остаток ДС. Заполним его
			Платеж.АвансВал      = Платеж.СуммаСНДСВал;
			Платеж.АвансРегл     = Платеж.СуммаСНДСРегл;
		КонецЦикла;
		
		//Обрабатываем задолженности
		Для Каждого Платеж Из ТаблицаПлатежей Цикл
			
			Платеж.ДолгРегл  = 0;
			
			Отбор = Новый Структура("СделкаРегл,ДоговорКонтрагента,СчетОплаты", Платеж.СделкаРегл,Платеж.ДоговорКонтрагента,Платеж.СчетОплаты);
			СостояниеРасчетов = СостояниеРасчетовПоСчетамОплаты.НайтиСтроки(Отбор);
			//может получиться только одна строка, причем обязательно
			СостояниеРасчетов = СостояниеРасчетов[0];
			
			Если СостояниеРасчетов.ДолгВал = 0 Тогда
				//задолженности по текущей структуре платежа нет
				Платеж.АвансВалБУ    = Платеж.АвансВалБУ  - Платеж.АвансВал;
				Платеж.АвансРеглБУ   = Платеж.АвансРеглБУ - Платеж.АвансРегл;
				Продолжить;
				
			КонецЕсли;
			
			Для Каждого ОстатокЗадолженности Из СостояниеРасчетов.РеестрЗадолженности Цикл
				
				Если ОстатокЗадолженности.СуммаСНДСВал = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если Платеж.АвансВал = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				//обработаем закрытие задолженностии и сформируем суммовые разницы
				СуммаСНДСВал  = Платеж.АвансВал;
				СуммаСНДСРегл = Платеж.АвансРегл;//Платеж всего
				ДолгВал       = ОстатокЗадолженности.СуммаСНДСВал;
				ДолгРегл      = ОстатокЗадолженности.СуммаСНДСРегл;//Долг
				
				ТекущееПокрытиеВал	   = Мин(ДолгВал,СуммаСНДСВал);
				ТекущееПокрытиеРегл	   = Окр(ДолгРегл*(ТекущееПокрытиеВал/ДолгВал),2);
				ЗачитываемаяСуммаРегл  = Окр(СуммаСНДСРегл*(ТекущееПокрытиеВал/СуммаСНДСВал),2);
				ТекущаяСуммоваяРазница = ТекущееПокрытиеРегл - ЗачитываемаяСуммаРегл;
				
				//Переносим часть суммы по платежу в оплату задолженности, уменьшаем остаток по строке
				//Уменьшаем задолженность по документу (ОстатокЗадолженности) и в общем по счету (СостояниеРасчетов)
				ОстатокЗадолженности.СуммаСНДСВал  = ОстатокЗадолженности.СуммаСНДСВал  - ТекущееПокрытиеВал;
				ОстатокЗадолженности.СуммаСНДСРегл = ОстатокЗадолженности.СуммаСНДСРегл - ТекущееПокрытиеРегл;
				
				Платеж.ДолгВал   = Платеж.ДолгВал   + ТекущееПокрытиеВал;
				Платеж.ДолгРегл  = Платеж.ДолгРегл  + ТекущееПокрытиеРегл;
				Платеж.АвансВал	 = Платеж.АвансВал  - ТекущееПокрытиеВал;
				Платеж.АвансРегл = Платеж.АвансРегл - ТекущееПокрытиеРегл;
				
				Движение = ДвиженияПоРегистру.Добавить();
				Движение.ДоговорКонтрагента	 = Платеж.ДоговорКонтрагента;
				Движение.Сделка				 = Платеж.СделкаРегл;
				Движение.Документ			 = ОстатокЗадолженности.Документ;
				Движение.ДатаОплаты          = ОстатокЗадолженности.ДатаОплаты;
				Движение.Активность			 = Истина;
				Движение.Период 			 = ДатаДока;
				Движение.Контрагент			 = Контрагент;
				Движение.Организация 		 = Организация;
				Движение.СчетОплаты			 = Платеж.СчетОплаты;
				Движение.СуммаВзаиморасчетов = ТекущееПокрытиеВал;
				Движение.СуммаРегл			 = ТекущееПокрытиеРегл;		
				Движение.ВидДвижения		 = ?(СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
				Движение.Регистратор		 = Ссылка;
				
				СостояниеРасчетов.ДолгВал = СостояниеРасчетов.ДолгВал - ТекущееПокрытиеВал;
				
				Если ТекущаяСуммоваяРазница = 0 Тогда
					Если (СостояниеРасчетов.ДолгВал = 0) ИЛИ (Платеж.АвансВал = 0) Тогда
						Прервать;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Платеж.АвансВалБУ  = Платеж.АвансВалБУ  - Платеж.АвансВал;
			Платеж.АвансРеглБУ = Платеж.АвансРеглБУ - Платеж.АвансРегл;
			
		КонецЦикла;
	КонецЕсли;
	
	//Фиксация авансов по регистру
	Если Не (ТаблицаПлатежей.Итог("АвансРегл")=0 И ТаблицаПлатежей.Итог("АвансВал")= 0) Тогда
		Для Каждого Платеж Из ТаблицаПлатежей Цикл
			
			Если Платеж.АвансВал = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = ДвиженияПоРегистру.Добавить();
			Движение.ДоговорКонтрагента  = Платеж.ДоговорКонтрагента;
			Движение.Сделка				 = Платеж.СделкаРегл;
			Движение.Документ	         = Ссылка;
			Движение.СчетОплаты          = ?(НЕ ЗначениеЗаполнено(Платеж.СчетАванса),Платеж.СчетОплаты,Платеж.СчетАванса);
			Движение.Активность	         = Истина;
			Движение.Контрагент			 = Контрагент;
			Движение.Организация 		 = Организация;
			Движение.Период 	         = ДатаДока;
			Движение.ДатаОплаты          = ДатаДока;
			Движение.СуммаВзаиморасчетов = Платеж.АвансВал;
			Движение.СуммаРегл			 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Платеж.АвансВал, ВалютаДокумента, ВалютаРегламентированногоУчета,
											СтруктураПараметров.КурсДокумента, 1, СтруктураПараметров.КратностьДокумента, 1);
			Движение.ВидДвижения		 = ?(СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
			Движение.Регистратор		 = Ссылка;
			
		КонецЦикла;
	КонецЕсли;
	Если ДвиженияПоРегистру.Количество() > 0 Тогда
		НаборДвиженийПоРегистру.мПериод          = ДатаДока;
		НаборДвиженийПоРегистру.мТаблицаДвижений = ДвиженияПоРегистру;
		НаборДвиженийПоРегистру.ВыполнитьДвижения();
		Если Тип(ПроводкиБУ) = Тип("Структура") Тогда
			ПроводкиБУ.Вставить("ДвиженияПоРегиструРасчетовВВалюте", НаборДвиженийПоРегистру);
		Иначе
			НаборДвиженийПоРегистру.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции	

// Обработка взаиморасчетов в валюте по документам приобретения
//
Функция ВзаиморасчетыВВалютеПриобретение(СтруктураПараметров,ВалютаРегламентированногоУчета,РежимПроведения=Неопределено,ПроводкиБУ,Объект = Null,Отказ=Ложь,УдаляемыеВидыРегОпераций=Неопределено, СтруктураДвижений=Неопределено) Экспорт
	
	ТаблицаЗадолженности = СтруктураПараметров.Таблица;
	Если ТаблицаЗадолженности.Количество()=0 Тогда
		// Если нет платежей, нечего и переоценивать
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураПараметров.РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат Тогда
		// Возвраты пока не обрабатываем
		Возврат Истина;
	КонецЕсли;
	
	Ссылка 			= СтруктураПараметров.Регистратор;
	ВидДокумента	= СтруктураПараметров.ВидДокумента;
	ДатаДока		= СтруктураПараметров.Период;
	МоментДокумента = Новый МоментВремени(ДатаДока, СтруктураПараметров.Регистратор);
	
	Организация		= СтруктураПараметров.Организация;
	Контрагент		= СтруктураПараметров.Контрагент;
	ВалютаДокумента	= СтруктураПараметров.ВалютаДокумента;
	
	Заголовок = "";
	СтруктураПараметров.Свойство("Заголовок",Заголовок);
	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	КонецЕсли;

	ВызванРегламентнойПроцедурой = (Объект = Null);
	
	//Отбор платежей по валютным договорам
	Покупки = Истина;
	Продажи = Истина;
	
	ЛишниеСтроки = Новый Массив();
	Для Каждого Долг из ТаблицаЗадолженности Цикл
		Если НЕ ЗначениеЗаполнено(Долг.СчетАванса) тогда
			Долг.СчетАванса = Долг.СчетОплаты;
		КонецЕсли;
		
		ПокупкиПродажи = БухгалтерскийУчетРасчетовСКонтрагентами.ПроверкаРасчетыВУсловныхЕдиницах(СтруктураПараметров, Долг.ДоговорКонтрагента, ВалютаРегламентированногоУчета, Отказ, Заголовок, Истина);
		Если ПокупкиПродажи=Ложь тогда
			ЛишниеСтроки.Добавить(Долг);
		Иначе
			Покупки	= Покупки и ПокупкиПродажи.Покупки;
			Продажи	= Продажи и ПокупкиПродажи.Продажи;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЛишняяСтрока Из ЛишниеСтроки Цикл
		ТаблицаЗадолженности.Удалить(ЛишняяСтрока);
	КонецЦикла;
	
	//Получаем записи регистра, по которому отслеживается изменение состояния расчетов по документу
	НаборДвиженийПоРегистру = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления[?(Покупки,"РасчетыПоПриобретениюВВалютеОрганизации","РасчетыПоРеализацииВВалютеОрганизации")]);
	
	Если НаборДвиженийПоРегистру = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	ДвиженияПоРегистру = НаборДвиженийПоРегистру.Выгрузить();

	//Определяем образ действий (on/off-line)
	УчитыватьАванс = ОпределятьАвансыПриПроведении(СтруктураПараметров.Период, СтруктураПараметров.Организация);
	
	//Сокращенная схема в случае off-line проведения
	Если Не (УчитыватьАванс Или ВызванРегламентнойПроцедурой) Тогда
		
		Для Каждого ТекущийДолг Из ТаблицаЗадолженности Цикл
			
			Если ТекущийДолг.СуммаСНДСВал = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = ДвиженияПоРегистру.Добавить();
			Движение.Регистратор		 = Ссылка;
			Движение.Активность			 = Истина;
			Движение.Период 			 = ДатаДока;
			Движение.ВидДвижения		 = ВидДвиженияНакопления.Расход;
			
			Движение.Организация	 	 = Организация;
			Движение.Контрагент	 	 	 = Контрагент;
			Движение.ДоговорКонтрагента	 = ТекущийДолг.ДоговорКонтрагента;
			Движение.Сделка	 = ТекущийДолг.СделкаРегл;
			Движение.СчетОплаты 		 = ТекущийДолг.СчетОплаты;
			Движение.СуммаВзаиморасчетов = ТекущийДолг.СуммаСНДСВал;
			Движение.СуммаРегл			 = ТекущийДолг.СуммаСНДСРегл;
			
		КонецЦикла;
		
		Если ДвиженияПоРегистру.Количество() > 0 Тогда
			НаборДвиженийПоРегистру.мПериод          = ДатаДока;
			НаборДвиженийПоРегистру.мТаблицаДвижений = ДвиженияПоРегистру;
			НаборДвиженийПоРегистру.ВыполнитьДвижения();
			НаборДвиженийПоРегистру.Записать(Ложь);
		КонецЕсли;
		Возврат Истина;
		
	КонецЕсли;	
	
	// Выбираем текущее остатки по регистрам расчетов в валюте
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Договор"      , ТаблицаЗадолженности.ВыгрузитьКолонку("ДоговорКонтрагента"));
	Запрос.УстановитьПараметр("Сделка"      , ТаблицаЗадолженности.ВыгрузитьКолонку("СделкаРегл"));
	Запрос.УстановитьПараметр("Счет"         , ТаблицаЗадолженности.ВыгрузитьКолонку("СчетАванса"));
	Запрос.УстановитьПараметр("МоментВремени", МоментДокумента);
	
	Запрос.Текст = "
	   |ВЫБРАТЬ
	   |	РасчетыВВалюте.ДоговорКонтрагента,
	   |	РасчетыВВалюте.Сделка,
	   |	РасчетыВВалюте.СчетОплаты КАК СчетАванса,
	   |	РасчетыВВалюте.ДатаОплаты КАК ДатаОплаты,
	   |	РасчетыВВалюте.Документ КАК Документ,
	   |	РасчетыВВалюте.СуммаВзаиморасчетовОстаток КАК СуммаСНДСВал,
	   |	РасчетыВВалюте.СуммаРеглОстаток КАК СуммаСНДСРегл
	   |ИЗ
	   |	РегистрНакопления."+?(Покупки,"РасчетыПоПриобретениюВВалютеОрганизации","РасчетыПоРеализацииВВалютеОрганизации") + ".Остатки(&МоментВремени, (ДоговорКонтрагента  в  (&Договор)) И (СчетОплаты в (&Счет)) И (Сделка в (&Сделка))) КАК РасчетыВВалюте
	   |
	   |ГДЕ
	   |	  РасчетыВВалюте.СуммаВзаиморасчетовОстаток > 0 
	   |	И РасчетыВВалюте.СуммаРеглОстаток > 0
	   |
	   |УПОРЯДОЧИТЬ ПО
	   |	ДатаОплаты,
	   |	РасчетыВВалюте.Документ.Дата,
	   |	Документ";
	   
	Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
		
		СтруктураПараметровБлокировки = Новый Структура(
			"ТипТаблицы, ИмяТаблицы, ИсточникДанных", 
			"РегистрНакопления", ?(Покупки,"РасчетыПоПриобретениюВВалютеОрганизации","РасчетыПоРеализацииВВалютеОрганизации"), ТаблицаЗадолженности);
			
		СтруктураЗначенийБлокировки   = Новый Структура;
	 	СтруктураЗначенийБлокировки.Вставить("Период", Новый Диапазон(, МоментДокумента.Дата)); 
		
		СтруктураИсточникаДанных = Новый Структура(
			"ДоговорКонтрагента,СчетОплаты,Сделка"
			,"ДоговорКонтрагента"
			,"СчетАванса"
			,"СделкаРегл");
		
		Отказ     = Ложь;
	 	ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных, Отказ, Заголовок);
				
	КонецЕсли;
	   
	РезультатРасчетовОстатков = Запрос.Выполнить().Выгрузить();
	
	СтруктураРеквизитов = Новый Структура ("СделкаРегл, ДоговорКонтрагента,СчетАванса,СуммаСНДСВал");
	СостояниеРасчетовПоСчетамАвансов = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаЗадолженности,СтруктураРеквизитов);
	СостояниеРасчетовПоСчетамАвансов.Свернуть("СделкаРегл, ДоговорКонтрагента,СчетАванса","СуммаСНДСВал");
	СостояниеРасчетовПоСчетамАвансов.Колонки.Добавить("АвансВал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СостояниеРасчетовПоСчетамАвансов.Колонки.Добавить("ДолгВал" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СостояниеРасчетовПоСчетамАвансов.Колонки.Добавить("РеестрАвансов");
	
	Для Каждого Долг Из СостояниеРасчетовПоСчетамАвансов Цикл
		
		Долг.АвансВал = 0;
		Долг.ДолгВал  = Долг.СуммаСНДСВал;
		
		Отбор = Новый Структура("Сделка, ДоговорКонтрагента,СчетАванса", Долг.СделкаРегл, Долг.ДоговорКонтрагента,Долг.СчетАванса);
		СостояниеРасчетов = РезультатРасчетовОстатков.НайтиСтроки(Отбор);
		Если СостояниеРасчетов.Количество() = 0 Тогда
			Продолжить;                                      
		КонецЕсли;	
		
		ЗакрытьАванс = Новый ТаблицаЗначений();
		ЗакрытьАванс.Колонки.Добавить("Документ");
		ЗакрытьАванс.Колонки.Добавить("ДатаОплаты");
		ЗакрытьАванс.Колонки.Добавить("СуммаСНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ЗакрытьАванс.Колонки.Добавить("СуммаСНДСВал" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		Для Каждого ОстатокАванса Из СостояниеРасчетов Цикл
			
			ТекущееПокрытиеВал  = Мин(ОстатокАванса.СуммаСНДСВал, Долг.ДолгВал);
			ТекущееПокрытиеРегл = Окр(ТекущееПокрытиеВал*(ОстатокАванса.СуммаСНДСРегл/ОстатокАванса.СуммаСНДСВал), 2);
			
			СтрокаЗакрытия = ЗакрытьАванс.Добавить();
			СтрокаЗакрытия.Документ      = ОстатокАванса.Документ;
			СтрокаЗакрытия.ДатаОплаты    = ОстатокАванса.ДатаОплаты;
			СтрокаЗакрытия.СуммаСНДСВал  = ТекущееПокрытиеВал;
			СтрокаЗакрытия.СуммаСНДСРегл = ТекущееПокрытиеРегл;
			
			Долг.ДолгВал  = Долг.ДолгВал  - ТекущееПокрытиеВал;
			Долг.АвансВал = Долг.АвансВал + ТекущееПокрытиеВал;
			Если Долг.ДолгВал = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Долг.РеестрАвансов = Новый ТаблицаЗначений();
		Долг.РеестрАвансов = ЗакрытьАванс.Скопировать();
		
	КонецЦикла;//Оценка задолженности
	
	ТаблицаЗадолженности.Колонки.Добавить("ДолгВал"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаЗадолженности.Колонки.Добавить("ДолгРегл"       , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаЗадолженности.Колонки.Добавить("АвансВал"       , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаЗадолженности.Колонки.Добавить("АвансРегл"      , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаЗадолженности.Колонки.Добавить("СуммоваяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Если СостояниеРасчетовПоСчетамАвансов.Итог("АвансВал")=0 Тогда
		
		//Если авансов вообще не нашли, перебрасываем все суммы на долг
		Для Каждого Долг Из ТаблицаЗадолженности Цикл
			Долг.АвансВал    = 0;
			Долг.АвансРегл   = 0;
			Долг.ДолгВал     = Долг.СуммаСНДСВал;
			Долг.ДолгРегл    = Долг.СуммаСНДСРегл;
			
			Долг.АвансВалБУ  = Долг.АвансВалБУ  - Долг.АвансВал;
			Долг.АвансРеглБУ = Долг.АвансРеглБУ - Долг.АвансРегл;
		КонецЦикла;
		
	Иначе
		
		//Обрабатываем задолженности
		Для Каждого Долг Из ТаблицаЗадолженности Цикл
			
			Долг.АвансВал  = 0;
			Долг.АвансРегл = 0;
			Долг.ДолгВал   = Долг.СуммаСНДСВал;
			Долг.ДолгРегл  = Долг.СуммаСНДСРегл;
			
			Отбор = Новый Структура("СделкаРегл, ДоговорКонтрагента,СчетАванса", Долг.СделкаРегл, Долг.ДоговорКонтрагента,Долг.СчетАванса);
			СостояниеРасчетов = СостояниеРасчетовПоСчетамАвансов.НайтиСтроки(Отбор);
			//может получиться только одна строка, причем обязательно
			СостояниеРасчетов = СостояниеРасчетов[0];
			
			Если СостояниеРасчетов.АвансВал = 0 Тогда
				//авансов по текущей структуре платежа нет
				Долг.АвансВалБУ    = Долг.АвансВалБУ  - Долг.АвансВал;
				Долг.АвансРеглБУ   = Долг.АвансРеглБУ - Долг.АвансРегл;
				Продолжить;
				
			КонецЕсли;
			
			Для Каждого ОстатокАванса Из СостояниеРасчетов.РеестрАвансов Цикл
				
				Если ОстатокАванса.СуммаСНДСВал = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				//обработаем закрытие задолженности и сформируем суммовые разницы
				СуммаСНДСВал = Долг.ДолгВал;
				СуммаСНДСРег = Долг.ДолгРегл;
				АвансВал     = ОстатокАванса.СуммаСНДСВал;
				АвансРегл    = ОстатокАванса.СуммаСНДСРегл;
				
				ТекущееПокрытиеВал	   = Мин(АвансВал,СуммаСНДСВал);
				ТекущееПокрытиеРегл	   = Окр(АвансРегл*(ТекущееПокрытиеВал/АвансВал),2);
				ЗачитываемаяСуммаРегл  = Окр(СуммаСНДСРег*(ТекущееПокрытиеВал/СуммаСНДСВал),2);
				ТекущаяСуммоваяРазница = ТекущееПокрытиеРегл - ЗачитываемаяСуммаРегл;
				
				//Переносим часть суммы по платежу в погашение аванса, уменьшаем остаток по строке
				//Уменьшаем задолженность по авансу (ОстатокАванса) и в общем по счету (СостояниеРасчетов)
				ОстатокАванса.СуммаСНДСВал  = ОстатокАванса.СуммаСНДСВал  - ТекущееПокрытиеВал;
				ОстатокАванса.СуммаСНДСРегл = ОстатокАванса.СуммаСНДСРегл - ТекущееПокрытиеРегл;
				
				Долг.АвансВал        = Долг.АвансВал        + ТекущееПокрытиеВал;
				Долг.АвансРегл       = Долг.АвансРегл       + ЗачитываемаяСуммаРегл;
				Долг.ДолгВал         = Долг.ДолгВал         - ТекущееПокрытиеВал;
				Долг.ДолгРегл        = Долг.ДолгРегл        - ЗачитываемаяСуммаРегл;
				Долг.СуммоваяРазница = Долг.СуммоваяРазница + ТекущаяСуммоваяРазница;
				
				Движение = ДвиженияПоРегистру.Добавить();
				Движение.Регистратор		 = Ссылка;
				Движение.ВидДвижения		 = ВидДвиженияНакопления.Расход;
				Движение.Организация	 	 = Организация;
				Движение.Контрагент	 	 	 = Контрагент;
				Движение.ДоговорКонтрагента	 = Долг.ДоговорКонтрагента;
				Движение.Сделка				 = Долг.СделкаРегл;
				Движение.Документ			 = ОстатокАванса.Документ;
				Движение.ДатаОплаты          = ОстатокАванса.ДатаОплаты;
				Движение.Активность			 = Истина;
				Движение.Период 			 = ДатаДока;
				Движение.СчетОплаты			 = ?(НЕ ЗначениеЗаполнено(Долг.СчетАванса),Долг.СчетОплаты,Долг.СчетАванса);
				Движение.СуммаВзаиморасчетов = ТекущееПокрытиеВал;
				Движение.СуммаРегл			 = ТекущееПокрытиеРегл;		
				
				СостояниеРасчетов.АвансВал = СостояниеРасчетов.АвансВал - ТекущееПокрытиеВал;
				
				Если ТекущаяСуммоваяРазница = 0 Тогда
					Если (СостояниеРасчетов.АвансВал = 0) ИЛИ (Долг.ДолгВал = 0) Тогда
						Прервать;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Долг.АвансВалБУ  = Долг.АвансВалБУ  - Долг.АвансВал;
			Долг.АвансРеглБУ = Долг.АвансРеглБУ - Долг.АвансРегл;
			
		КонецЦикла;
	КонецЕсли;
	
	//Фиксация задолженности по регистру
	Если Не (ТаблицаЗадолженности.Итог("ДолгРегл")=0 И ТаблицаЗадолженности.Итог("ДолгВал")= 0) Тогда
		Для Каждого Долг Из ТаблицаЗадолженности Цикл
			
			Если Долг.ДолгРегл = 0 И Долг.ДолгВал = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Движение=ДвиженияПоРегистру.Добавить();
			Движение.Регистратор		 = Ссылка;
			Движение.ВидДвижения		 = ВидДвиженияНакопления.Расход;
			Движение.Организация	 	 = Организация;
			Движение.Контрагент	 	 	 = Контрагент;
			Движение.ДоговорКонтрагента  = Долг.ДоговорКонтрагента;
			Движение.Сделка				 = Долг.СделкаРегл;
			Движение.Документ	         = Ссылка;
			Движение.СчетОплаты          = Долг.СчетОплаты;
			Движение.Активность	         = Истина;
			Движение.Период 	         = ДатаДока;
			Движение.ДатаОплаты          = ДатаДока;
			Движение.СуммаВзаиморасчетов = Долг.ДолгВал;
			Движение.СуммаРегл 	         = Долг.ДолгРегл;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ДвиженияПоРегистру.Количество() > 0 Тогда
		НаборДвиженийПоРегистру.мПериод          = ДатаДока;
		НаборДвиженийПоРегистру.мТаблицаДвижений = ДвиженияПоРегистру;
		НаборДвиженийПоРегистру.ВыполнитьДвижения();
		НаборДвиженийПоРегистру.Записать();
	КонецЕсли;
	
	Для Каждого Долг Из ТаблицаЗадолженности Цикл
		//Если есть расхождения по сумме зачтенного аванса, корректируем по состоянию расчетов на регистре
		Если НЕ ((Долг.АвансВалБУ=0 И Долг.АвансРеглБУ=0)) И Не(Долг.СчетОплаты=Долг.СчетАванса ИЛИ НЕ ЗначениеЗаполнено(Долг.СчетАванса)) Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Регистратор = Ссылка;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;
			Проводка.Сумма       = - Долг.АвансРеглБУ;
			Проводка.Содержание  = "Корректировка суммы зачета аванса";
			Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВзаиморасчетахВВалюте;
			
			Проводка.СчетДт          = ?(Покупки,Долг.СчетОплаты,Долг.СчетАванса);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Долг.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , Долг.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   , Долг.СделкаРегл);
			Проводка.ВалютаДт        = ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = - Долг.АвансВалБУ;
			
			Проводка.СчетКт          = ?(Покупки,Долг.СчетАванса,Долг.СчетОплаты);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Долг.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , Долг.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   , Долг.СделкаРегл);
			Проводка.ВалютаКт        = ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = - Долг.АвансВалБУ;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если УдаляемыеВидыРегОпераций = Неопределено Тогда 
		УдаляемыеВидыРегОпераций = Новый Массив();
	КонецЕсли;	
	УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВзаиморасчетахВВалюте);
	УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовПриобретение);
	УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовРеализация);
	
	
	Если ВызванРегламентнойПроцедурой Тогда
		// обработка РегламентноеВосстановлениеСостоянияРасчетовОрганизаций уже передает в ПроводкиБУ прочитанный набор записей
		ТаблицаДвижений = ПроводкиБУ.Выгрузить();
	Иначе	
		// Для некоторых документов часть проводок может быть уже записана (например, при поступлении)
		// часть еще не записана и содержиться в ПроводкиБУ
		// Для правильной обработки таких ситуаций необходимо прочитать уже записанные проводки и объединить с ПроводкиБУ
		ТаблицаЗаписанныхДвижений = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыБухгалтерии["Хозрасчетный"], Истина).Выгрузить();
		ТаблицаДвижений = ПроводкиБУ.Выгрузить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписанныхДвижений, ТаблицаДвижений);
	КонецЕсли;
	
	БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ТаблицаДвижений,УдаляемыеВидыРегОпераций);
	
	ВидСубконтоСделки = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Сделки;
	
	Для Каждого Долг Из ТаблицаЗадолженности Цикл
		
		Если Долг.СуммоваяРазница = 0 ИЛИ Долг.СуммаСНДСРегл = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Коэффициент изменения сумм
		Коэфф = Долг.СуммоваяРазница / Долг.СуммаСНДСРегл;
			
		// Дооценим аванс
		Если ЗначениеЗаполнено(Долг.СчетАванса) Тогда
			
			СчетДт = ?(Покупки, Долг.СчетОплаты, Долг.СчетАванса);
			СчетКт = ?(Покупки, Долг.СчетАванса, Долг.СчетОплаты);
			
			Если НЕ (СчетДт = СчетКт ИЛИ Долг.СуммоваяРазница = 0) Тогда
			
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Регистратор = Ссылка;
				Проводка.Активность  = Истина;
				Проводка.Организация = Организация;
				Проводка.Сумма       = Долг.СуммоваяРазница;
				Проводка.Содержание  = "Корректировка суммы зачета аванса по курсам авансов";
				Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВзаиморасчетахВВалюте;
				
				Проводка.СчетДт          = СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Долг.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , Долг.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"     , Долг.СделкаРегл);
				Проводка.ВалютаДт        = ВалютаДокумента;
				
				Проводка.СчетКт          = СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Долг.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , Долг.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"     , Долг.СделкаРегл);
				Проводка.ВалютаКт        = ВалютаДокумента;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		//Дооценим проводки	
		Для Каждого СтрокаТаблицы из ТаблицаДвижений Цикл
			
			Если    СтрокаТаблицы.СчетКт             = Долг.СчетОплаты 
				ИЛИ СтрокаТаблицы.СчетДт             = Долг.СчетОплаты
				ИЛИ СтрокаТаблицы.СчетДополнительный = Долг.СчетОплаты Тогда
				
				//Смартис Лиманчук начало 22.02.2013
				Если ТипЗнч(СтруктураПараметров.Регистратор)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					Если СтруктураПараметров.Регистратор.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссияНал Тогда
						Продолжить;
					КонецЕсли; 
					//Смартис Лиманчук начало 26.04.2013
					//параметры для НЕ формирования проводки по Корректировке по курсам авансов:
					//документ Поступление ТиУ, контрагент ЭСКАРО АС кредит (000000603), договор Основной договор БЕЗНАЛ (000004299), 
					//строка ТЧ Услуги содержит статью затрат Обслуживание кредитов (ФО) (100000372) и счет затрат 951,
					//не разрешается появление в ТЧ Услуги, при соблюдении всех перечисленных условий, строк с другими значениями счета и статьи затрат.
					Если СтруктураПараметров.Регистратор.Контрагент.Код = "000000603" И СтруктураПараметров.Регистратор.ДоговорКонтрагента.Код = "000004299" Тогда
						//проверка ТЧ Услуги
						СвернутаяТЧУслуги = СтруктураПараметров.Регистратор.Услуги.Выгрузить(,"СчетЗатрат,СтатьяЗатрат");
						СвернутаяТЧУслуги.Свернуть("СчетЗатрат,СтатьяЗатрат","");
						СтруктураПоиска = Новый Структура("СчетЗатрат,СтатьяЗатрат",ПланыСчетов.Хозрасчетный.ПроцентыЗаКредит,Справочники.СтатьиЗатрат.НайтиПоКоду("100000372"));
						НайденныеСтроки = СвернутаяТЧУслуги.НайтиСтроки(СтруктураПоиска);
						Если НайденныеСтроки.Количество() = 1 Тогда
							//нет ли других строк
							Если СвернутаяТЧУслуги.Количество()>1 Тогда
								//недопустимо
								ОбщегоНазначения.СообщитьОбОшибке("В расчетах с этим контрагентам не разрешается смешивать статью затрат ""Обслуживание кредитов"" с другими статьями!", Отказ, Заголовок);
								Возврат Ложь;
							Иначе
								//только при этой комбинации условий разрешаем не дооценивать проводки
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли; 
					//Смартис Лиманчук окончание 26.04.2013
				КонецЕсли;
				//Смартис Лиманчук окончание 22.02.2013
			
				Если НЕ (   СтрокаТаблицы.СубконтоДт3 = Долг.СделкаРегл
					  	ИЛИ СтрокаТаблицы.СубконтоКт3 = Долг.СделкаРегл
					  	ИЛИ СтрокаТаблицы.СубконтоДт2 = Долг.СделкаРегл
					  	ИЛИ СтрокаТаблицы.СубконтоКт2 = Долг.СделкаРегл
					  	ИЛИ СтрокаТаблицы.СубконтоДт1 = Долг.СделкаРегл
					  	ИЛИ СтрокаТаблицы.СубконтоКт1 = Долг.СделкаРегл					  
					  	ИЛИ (НЕ ЗначениеЗаполнено(Долг.СделкаРегл) И  НЕ ЗначениеЗаполнено(СтрокаТаблицы.СубконтоКт3) И СтрокаТаблицы.ВидСубконтоКт3 = ВидСубконтоСделки) 
					  	ИЛИ (НЕ ЗначениеЗаполнено(Долг.СделкаРегл) И  НЕ ЗначениеЗаполнено(СтрокаТаблицы.СубконтоДт3) И СтрокаТаблицы.ВидСубконтоДт3 = ВидСубконтоСделки) 
					  	ИЛИ (НЕ ЗначениеЗаполнено(Долг.СделкаРегл) И  НЕ ЗначениеЗаполнено(СтрокаТаблицы.СубконтоКт2) И СтрокаТаблицы.ВидСубконтоКт2 = ВидСубконтоСделки) 
					  	ИЛИ (НЕ ЗначениеЗаполнено(Долг.СделкаРегл) И  НЕ ЗначениеЗаполнено(СтрокаТаблицы.СубконтоДт2) И СтрокаТаблицы.ВидСубконтоДт2 = ВидСубконтоСделки) 
					  	ИЛИ (НЕ ЗначениеЗаполнено(Долг.СделкаРегл) И  НЕ ЗначениеЗаполнено(СтрокаТаблицы.СубконтоКт1) И СтрокаТаблицы.ВидСубконтоКт1 = ВидСубконтоСделки) 
					  	ИЛИ (НЕ ЗначениеЗаполнено(Долг.СделкаРегл) И  НЕ ЗначениеЗаполнено(СтрокаТаблицы.СубконтоДт1) И СтрокаТаблицы.ВидСубконтоДт1 = ВидСубконтоСделки)) Тогда
						
					// переоценивается проводка по другой сделке	
					Продолжить;
					
				
				КонецЕсли;
				
				//Бит 26.12.2020
				//Проводка = ПроводкиБУ.Добавить();
				//Проводка.Период                  = СтрокаТаблицы.Период;
				//Проводка.Активность              = Истина;
				//Проводка.Организация             = СтрокаТаблицы.Организация;
				//Проводка.Сумма                   = СтрокаТаблицы.Сумма * Коэфф;
				//Проводка.Содержание 			 = "Корректировка по курсам авансов";
				//Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВзаиморасчетахВВалюте;
				//
				//Проводка.СчетКт   = СтрокаТаблицы.СчетКт;
				//Для НомерСубконто = 1 По 3 Цикл
				//	БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаТаблицы["ВидСубконтоКт" + НомерСубконто], СтрокаТаблицы["СубконтоКт" + НомерСубконто]);
				//КонецЦикла; 
				//Проводка.ВалютаКт = ВалютаДокумента;
				//Проводка.НалоговоеНазначениеКт = СтрокаТаблицы.НалоговоеНазначениеКт;
				//Проводка.СуммаНУКт             = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СтрокаТаблицы.СуммаНУКт  * Коэфф);
				//			
				//Проводка.СчетДт   = СтрокаТаблицы.СчетДт;
				//Для НомерСубконто = 1 По 3 Цикл
				//	БухгалтерскийУчет.УстановитьСубконтоПоВидуСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаТаблицы["ВидСубконтоДт" + НомерСубконто], СтрокаТаблицы["СубконтоДт" + НомерСубконто]);
				//КонецЦикла; 
				//Проводка.ВалютаДт = ВалютаДокумента;
				//Проводка.НалоговоеНазначениеДт = СтрокаТаблицы.НалоговоеНазначениеДт;
				//Проводка.СуммаНУДт             = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СтрокаТаблицы.СуммаНУДт  * Коэфф);
				//Бит 26.12.2020
			КонецЕсли;

		КонецЦикла;

		Если Покупки Тогда
			
			Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(ДатаДока) Тогда 
				
				Если ВызванРегламентнойПроцедурой тогда
					УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоПереоценкеТоваров(Ссылка, Коэфф, "Бух");
				Иначе
					// на этот момент движения по регистру УчетЗатратРегл еще не сформированы, скорректировать движения невозможно
					// используем регистр сведений для записи данных для расчета коэффициента зачета аванса 
					// и делаем корректирующие движения позже, после формирования движений по  УчетЗатратРегл 
					// в УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоРеглВзаиморасчетамВВалюте
					НаборДвиженийКоэффициентыЗачетаАванса = ОбщегоНазначения.ПолучитьДвижение(Объект, РегистрыСведений.КоэффициентыЗачетаАванса);
					
					Если НаборДвиженийКоэффициентыЗачетаАванса <> Неопределено Тогда 
						
						НоваяЗапись = НаборДвиженийКоэффициентыЗачетаАванса.Добавить();
						
						НоваяЗапись.Активность  = Истина;
						
						НоваяЗапись.Период      = ДатаДока;
						НоваяЗапись.Регистратор = Ссылка;
						
						НоваяЗапись.СуммоваяРазницаБУ = Долг.СуммоваяРазница;
						НоваяЗапись.СуммаСНДСБУ       = Долг.СуммаСНДСРегл;
						НоваяЗапись.КурсоваяРазницаНУ = 0;
						НоваяЗапись.СуммаСНДСНУ       = 0;
						
						НаборДвиженийКоэффициентыЗачетаАванса.Записать(Истина);
					КонецЕсли;	
					
				КонецЕсли;	
				
			Иначе	
			
				//Партии товаров
				Если ВызванРегламентнойПроцедурой тогда
					НаборДвиженийПартииТоваров = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет, Истина);
				Иначе
					НаборДвиженийПартииТоваров = ОбщегоНазначения.ПолучитьДвижение(Объект, РегистрыНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет);
					Если НЕ НаборДвиженийПартииТоваров = Неопределено Тогда
						НаборДвиженийПартииТоваров.Прочитать();
					КонецЕсли;
				КонецЕсли;
							
				Если  НаборДвиженийПартииТоваров <> Неопределено
				    И НаборДвиженийПартииТоваров.Количество()>0 Тогда
					
					Если ВызванРегламентнойПроцедурой тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(НаборДвиженийПартииТоваров,УдаляемыеВидыРегОпераций);
					КонецЕсли;
					
					ТаблицаДвижений    = НаборДвиженийПартииТоваров.Выгрузить();
					КоличествоДвижений = НаборДвиженийПартииТоваров.Количество();
					Для ТекСтрока = 0 по КоличествоДвижений-1 Цикл
						
						СтрокаДвижения = ТаблицаДвижений[ТекСтрока];
						НоваяЗапись = НаборДвиженийПартииТоваров.Добавить();
						ДополнитьЗаписьРегистраПоСтрокеТаблицы(НоваяЗапись, СтрокаДвижения, ТаблицаДвижений);
						
						НоваяЗапись.Количество = 0;
						НоваяЗапись.Стоимость  = НоваяЗапись.Стоимость * Коэфф;
						НоваяЗапись.СтоимостьНУ = НоваяЗапись.СтоимостьНУ * Коэфф;
						НоваяЗапись.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВзаиморасчетахВВалюте;
					КонецЦикла;	
					
					Если ВызванРегламентнойПроцедурой тогда
						СтруктураДвижений.Вставить("ДвиженияПартииБУ",НаборДвиженийПартииТоваров);
					КонецЕсли;
					
				КонецЕсли;
				
				// НЗП
				Если ВызванРегламентнойПроцедурой тогда
					НаборДвиженийНЗП = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.НезавершенноеПроизводствоБухгалтерскийУчет,Истина);
				Иначе
					НаборДвиженийНЗП = ОбщегоНазначения.ПолучитьДвижение(Объект, РегистрыНакопления.НезавершенноеПроизводствоБухгалтерскийУчет);
					Если НЕ НаборДвиженийНЗП = Неопределено Тогда
						НаборДвиженийНЗП.Прочитать();
					КонецЕсли;
				КонецЕсли;
							
				Если  НаборДвиженийНЗП <> Неопределено
				    И НаборДвиженийНЗП.Количество()>0 Тогда
					
					Если ВызванРегламентнойПроцедурой тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(НаборДвиженийНЗП,УдаляемыеВидыРегОпераций);
					КонецЕсли;
					
					ТаблицаДвижений    = НаборДвиженийНЗП.Выгрузить();
					КоличествоДвижений = НаборДвиженийНЗП.Количество();
					Для ТекСтрока = 0 по КоличествоДвижений-1 Цикл
						
						СтрокаДвижения = ТаблицаДвижений[ТекСтрока];
						НоваяЗапись = НаборДвиженийНЗП.Добавить();
						ДополнитьЗаписьРегистраПоСтрокеТаблицы(НоваяЗапись, СтрокаДвижения, ТаблицаДвижений);
						
						НоваяЗапись.Количество = 0;
						НоваяЗапись.Стоимость  = НоваяЗапись.Стоимость * Коэфф;
						НоваяЗапись.СтоимостьНУ  = НоваяЗапись.СтоимостьНУ * Коэфф;
						НоваяЗапись.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВзаиморасчетахВВалюте;
					КонецЦикла;	
					
					Если ВызванРегламентнойПроцедурой тогда
						СтруктураДвижений.Вставить("ДвиженияНЗПБУ",НаборДвиженийНЗП);
					КонецЕсли;
					
				КонецЕсли;
				
				// Затраты
				Если ВызванРегламентнойПроцедурой тогда
					НаборДвиженийЗатраты = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.ЗатратыБухгалтерскийУчет,Истина);
				Иначе
					НаборДвиженийЗатраты = ОбщегоНазначения.ПолучитьДвижение(Объект, РегистрыНакопления.ЗатратыБухгалтерскийУчет);
					Если НЕ НаборДвиженийЗатраты = Неопределено Тогда
						НаборДвиженийЗатраты.Прочитать();
					КонецЕсли;
				КонецЕсли;
							
				Если  НаборДвиженийЗатраты <> Неопределено
				    И НаборДвиженийЗатраты.Количество()>0 Тогда
					
					Если ВызванРегламентнойПроцедурой тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(НаборДвиженийЗатраты,УдаляемыеВидыРегОпераций);
					КонецЕсли;
					
					ТаблицаДвижений    = НаборДвиженийЗатраты.Выгрузить();
					КоличествоДвижений = НаборДвиженийЗатраты.Количество();
					Для ТекСтрока = 0 по КоличествоДвижений-1 Цикл
						
						СтрокаДвижения = ТаблицаДвижений[ТекСтрока];
						НоваяЗапись = НаборДвиженийЗатраты.Добавить();
						ДополнитьЗаписьРегистраПоСтрокеТаблицы(НоваяЗапись, СтрокаДвижения, ТаблицаДвижений);
						
						НоваяЗапись.Сумма = НоваяЗапись.Сумма * Коэфф;
						НоваяЗапись.СуммаНУ = НоваяЗапись.СуммаНУ * Коэфф;
						НоваяЗапись.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВзаиморасчетахВВалюте;
					КонецЦикла;	
					
					Если ВызванРегламентнойПроцедурой тогда
						СтруктураДвижений.Вставить("ДвиженияЗатратыБУ",НаборДвиженийЗатраты);
					КонецЕсли;
					
				КонецЕсли;
				
				// Брак
				Если ВызванРегламентнойПроцедурой тогда
					НаборДвиженийБрак = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыНакопления.БракВПроизводствеБухгалтерскийУчет,Истина);
				Иначе
					НаборДвиженийБрак = ОбщегоНазначения.ПолучитьДвижение(Объект, РегистрыНакопления.БракВПроизводствеБухгалтерскийУчет);
					Если НЕ НаборДвиженийБрак = Неопределено Тогда
						НаборДвиженийБрак.Прочитать();
					КонецЕсли;
				КонецЕсли;
							
				Если  НаборДвиженийБрак <> Неопределено
				    И НаборДвиженийБрак.Количество()>0 Тогда
					
					Если ВызванРегламентнойПроцедурой тогда
						БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(НаборДвиженийБрак,УдаляемыеВидыРегОпераций);
					КонецЕсли;
					
					ТаблицаДвижений    = НаборДвиженийБрак.Выгрузить();
					КоличествоДвижений = НаборДвиженийБрак.Количество();
					Для ТекСтрока = 0 по КоличествоДвижений-1 Цикл
						
						СтрокаДвижения = ТаблицаДвижений[ТекСтрока];
						НоваяЗапись = НаборДвиженийБрак.Добавить();
						ДополнитьЗаписьРегистраПоСтрокеТаблицы(НоваяЗапись, СтрокаДвижения, ТаблицаДвижений);
						
						НоваяЗапись.Сумма = НоваяЗапись.Сумма * Коэфф;
						НоваяЗапись.СуммаНУ = НоваяЗапись.СуммаНУ * Коэфф;
						НоваяЗапись.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВзаиморасчетахВВалюте;
					КонецЦикла;	
					
					Если ВызванРегламентнойПроцедурой тогда
						СтруктураДвижений.Вставить("ДвиженияБракБУ",НаборДвиженийБрак);
					КонецЕсли;
				КонецЕсли;	
			
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

Процедура РаспределитьКорректировкуПриРасчетахВВалюте(СуммаКорректировки,ТаблицыДокумента,Отказ,Заголовок,УвеличитьСуммуКорректировкиНаСуммуСНДС)

	Если СуммаКорректировки = 0 тогда
		Возврат;
	КонецЕсли;

	//Определим суммы по каждой из переданных таблиц значений
	СуммыПоТаблицамДокумента = Новый ТаблицаЗначений();
	СуммыПоТаблицамДокумента.Колонки.Добавить("ИмяТаблицы");
	СуммыПоТаблицамДокумента.Колонки.Добавить("СуммаСНДС",     		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СуммыПоТаблицамДокумента.Колонки.Добавить("СуммаБезНДС",   		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СуммыПоТаблицамДокумента.Колонки.Добавить("НДС",           		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СуммыПоТаблицамДокумента.Колонки.Добавить("Корректировка", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СуммыПоТаблицамДокумента.Колонки.Добавить("НДСРегл",           	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));	

	Для каждого ТекущаяТаблица Из ТаблицыДокумента Цикл

		СтрокаТаблицы = СуммыПоТаблицамДокумента.Добавить();

		СтрокаТаблицы.ИмяТаблицы = ТекущаяТаблица.Ключ;
		СтрокаТаблицы.СуммаСНДС  = ТекущаяТаблица.Значение.Итог("ПроводкиСуммаСНДСРегл");
		СтрокаТаблицы.НДСРегл	 = ТекущаяТаблица.Значение.Итог("СуммаНДСРегл");
        
		Если НЕ ТекущаяТаблица.Значение.Колонки.Найти("ПроводкиСуммаНДСРегл") = Неопределено тогда

			СтрокаТаблицы.СуммаБезНДС = ТекущаяТаблица.Значение.Итог("ПроводкиСуммаБезНДСРегл");
			СтрокаТаблицы.НДС         = ТекущаяТаблица.Значение.Итог("ПроводкиСуммаНДСРегл");

		Иначе
			СтрокаТаблицы.СуммаБезНДС = ТекущаяТаблица.Значение.Итог("ПроводкиСуммаБезНДСРегл");

		КонецЕсли;

	КонецЦикла;

	//Распределим корректировку по таблицам значений
	СуммаСНДСКРаспределению = СуммаКорректировки+?(УвеличитьСуммуКорректировкиНаСуммуСНДС,СуммыПоТаблицамДокумента.Итог("СуммаСНДС"),0);

	Если СуммаСНДСКРаспределению = 0 тогда
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка в распределении корректировок при зачете аванса по расчетам в валюте.", Отказ, Заголовок);
		Возврат;
	КонецЕсли;

	НДСКРаспределению     = 0;
	БезНДСКРаспределению  = 0;
    НДСРеглКРаспределению = 0;
	
	Если Не СуммыПоТаблицамДокумента.Итог("НДС") = 0 тогда
		НДСКРаспределению = Окр(СуммаСНДСКРаспределению * СуммыПоТаблицамДокумента.Итог("НДС") / СуммыПоТаблицамДокумента.Итог("СуммаСНДС"), 2);
	КонецЕсли;

	Если Не СуммыПоТаблицамДокумента.Итог("НДСРегл") = 0 тогда
		НДСРеглКРаспределению = Окр(СуммаСНДСКРаспределению * СуммыПоТаблицамДокумента.Итог("НДСРегл") / СуммыПоТаблицамДокумента.Итог("СуммаСНДС"), 2);
	КонецЕсли;
	
	БезНДСКРаспределению = СуммаСНДСКРаспределению - НДСКРаспределению;

	Если НЕ БезНДСКРаспределению = 0 тогда
		НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(БезНДСКРаспределению,СуммыПоТаблицамДокумента.ВыгрузитьКолонку("СуммаБезНДС"));
		СуммыПоТаблицамДокумента.ЗагрузитьКолонку(НовыеСуммы,"СуммаБезНДС");
	КонецЕсли;

	Если НЕ НДСКРаспределению = 0 тогда
		НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(НДСКРаспределению,СуммыПоТаблицамДокумента.ВыгрузитьКолонку("НДС"));
		СуммыПоТаблицамДокумента.ЗагрузитьКолонку(НовыеСуммы,"НДС");
	КонецЕсли;

	Если НЕ НДСРеглКРаспределению = 0 тогда
		НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(НДСРеглКРаспределению,СуммыПоТаблицамДокумента.ВыгрузитьКолонку("НДСРегл"));
		СуммыПоТаблицамДокумента.ЗагрузитьКолонку(НовыеСуммы,"НДСРегл");
	КонецЕсли;

	
	Для каждого СтрокаТаблицы Из СуммыПоТаблицамДокумента Цикл
		СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
	КонецЦикла;

	//Распределим корректировку в пределах каждой таблицы значений
	Для каждого СтрокаКРаспределению из СуммыПоТаблицамДокумента Цикл

		ТаблицаЗначений     = ТаблицыДокумента[СтрокаКРаспределению.ИмяТаблицы];
		СуммаКРаспределению = СтрокаКРаспределению.СуммаСНДС;

		Если СуммаКРаспределению = 0 тогда
			продолжить;
		КонецЕсли;

		Если не СтрокаКРаспределению.СуммаБезНДС = 0 тогда
			НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(СтрокаКРаспределению.СуммаБезНДС, ТаблицаЗначений.ВыгрузитьКолонку("ПроводкиСуммаБезНДСРегл"));
			ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы,"ПроводкиСуммаБезНДСРегл");
		КонецЕсли;
		
		Если НЕ СтрокаКРаспределению.НДС = 0 тогда
			НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(СтрокаКРаспределению.НДС,ТаблицаЗначений.ВыгрузитьКолонку("ПроводкиСуммаНДСРегл"));
			ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы,"ПроводкиСуммаНДСРегл");
		КонецЕсли;
		
		Если НЕ СтрокаКРаспределению.НДСРегл = 0 тогда
			НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(СтрокаКРаспределению.НДСРегл,ТаблицаЗначений.ВыгрузитьКолонку("СуммаНДСРегл"));
			ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы,"СуммаНДСРегл");
		КонецЕсли;
		
		Для каждого СтрокаТаблицы  Из ТаблицаЗначений Цикл
			СтрокаТаблицы.ПроводкиСуммаСНДСРегл = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл + СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			СтрокаТаблицы.СтоимостьНУ = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
		КонецЦикла; 
	КонецЦикла;

КонецПроцедуры // РаспределитьКорректировкуПриРасчетахВВалюте

// Выполняет зачет аванса по указанному документу
//
// Параметры
// ДокументОбъект    - ДокументОбъект или ДокументСсылка - Документ для которого выполяентся операция.
Функция ЗачетАвансаПодотчетника(ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ТаблицыДокумента, Отказ,СчетРасчетов) Экспорт

	Организация         = СтруктураШапкиДокумента.Организация;
	ДатаДока            = СтруктураШапкиДокумента.Дата;
	МоментДокумента     = Новый МоментВремени(ДокументОбъект.Дата,ДокументОбъект.Ссылка);
	КурсДокумента       = СтруктураШапкиДокумента.КурсДокумента;
	КратностьДокумента  = СтруктураШапкиДокумента.КратностьДокумента;
	Контрагент          = СтруктураШапкиДокумента.ФизЛицо;
	
	ВалютаДокумента     = СтруктураШапкиДокумента.ВалютаДокумента;
	
	СуммаДокументаСНДСРегл            = 0;
	СуммаДокументаСНДСВВалютеРасчетов = 0;

	Для каждого ТекущаяТаблица из ТаблицыДокумента Цикл

		Если ТекущаяТаблица.Значение.Колонки.Найти("ПроводкиСуммаСНДСРегл") = Неопределено тогда

			ОбщегоНазначения.СообщитьОбОшибке("Ошибка при зачете аванса.",Отказ);
			Возврат Неопределено;
        КонецЕсли;

		СуммаДокументаСНДСРегл = СуммаДокументаСНДСРегл + ТекущаяТаблица.Значение.Итог("ПроводкиСуммаСНДСРегл");
        СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов + ТекущаяТаблица.Значение.Итог("ПроводкиСуммаСНДСВал");
				
	КонецЦикла;
	 
	СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов; 
	СуммаДокументаСНДСРегл = СуммаДокументаСНДСРегл;

	Если СуммаДокументаСНДСРегл = 0 тогда 
		//Документ не требует обработки
		Возврат Неопределено; 
	КонецЕсли;

    УсловиеВалюта = ВалютаДокумента;
	ЗнакФильтрПоОстаткам = 1;
	
	Период = МоментДокумента;
		
	ТаблицаАвансов       = БухгалтерскийУчет.ПолучитьОстатокПоСчету(Организация,Период,СчетРасчетов,УсловиеВалюта ,Контрагент,,,ЗнакФильтрПоОстаткам);
	
	СуммаЗачетаАвансаРегл            = 0;
	СуммаЗачетаАвансаВВалютеРасчетов = 0;
	КорректировкиПриРасчетахВВалюте  = 0;

	Если ТаблицаАвансов.Количество()=0 тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого СтрокаАванса из ТаблицаАвансов Цикл

		//Расчет суммы перекрытия задолженности на счете, определение суммовых разниц
		ТекущийАванс = Макс(0, Мин(СуммаДокументаСНДСВВалютеРасчетов,СтрокаАванса["ВалютнаяСуммаОстаток"]));
		
		Если ТекущийАванс = 0 тогда 
			Продолжить;
		КонецЕсли;

		// считаем аванс по историческому курсу
		ИсторическийАвансРегл = (ТекущийАванс / СтрокаАванса.ВалютнаяСуммаОстаток) * СтрокаАванса.СуммаОстаток;
		ТекущийАвансРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущийАванс, ВалютаДокумента, ВалютаРегламентированногоУчета,
														КурсДокумента, 1, КратностьДокумента, 1);
														
		// на какую сумму нужно откорректировать 
		КорректировкиПриРасчетахВВалюте = КорректировкиПриРасчетахВВалюте + (ИсторическийАвансРегл - ТекущийАвансРегл);
		
		ТекущийАвансРегл = ИсторическийАвансРегл;
			
		
		СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов - ТекущийАванс;
		СуммаЗачетаАвансаВВалютеРасчетов  = СуммаЗачетаАвансаВВалютеРасчетов + ТекущийАванс;
		СуммаЗачетаАвансаРегл             = СуммаЗачетаАвансаРегл + ТекущийАвансРегл;

	КонецЦикла;

	Если КорректировкиПриРасчетахВВалюте <> 0 тогда
		
		РаспределитьКорректировкуПриРасчетахВВалюте(КорректировкиПриРасчетахВВалюте,ТаблицыДокумента,Отказ,, Истина);

	КонецЕсли;

	Возврат КорректировкиПриРасчетахВВалюте;

КонецФункции

Функция УстановитьСубконтоВТаблицеДвижений(Проводка, Счет, ВидСубконто, ЗначениеСубконто)
			НаборСубконто = Счет.ВидыСубконто.Выгрузить();
			СтруктураПоиска = Новый Структура("ВидСубконто", ВидСубконто);
			НайденнаяСтрока = НаборСубконто.НайтиСтроки(СтруктураПоиска);
			Если НайденнаяСтрока.Количество() = 1 Тогда
				
				Проводка["СубконтоДт"+НайденнаяСтрока[0].НомерСтроки] = ЗначениеСубконто;
				
			КонецЕсли;
		КонецФункции
		
Функция ОпределитьВозможныеТипыСделкиРегл() Экспорт
			
	СубконтоСделки = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Сделки;
	
	Возврат СубконтоСделки.ТипЗначения;

КонецФункции // ОпределитьВозможныеТипыСделкиРегл()

Процедура ЗаполнитьСделкуРеглВТаблице(ТаблицаДокумента, СтруктураШапкиДокумента, РасчетыСПокупателем = Неопределено, ИмяСделкиИзШапки = "Сделка") Экспорт

	ТаблицаДокумента.Колонки.Добавить("СделкаРегл", ОпределитьВозможныеТипыСделкиРегл());
	
	// определим регл. ведение взаиморасчетов
	ВедениеВзаиморасчетовРегл = Неопределено;
	СтруктураШапкиДокумента.Свойство("ВедениеВзаиморасчетовРегл", ВедениеВзаиморасчетовРегл);	
	Если НЕ ЗначениеЗаполнено(ВедениеВзаиморасчетовРегл) Тогда
		ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	КонецЕсли;
	
	// Определим вид договора
	ВидДоговора = Неопределено;
	СтруктураШапкиДокумента.Свойство("ВидДоговора", ВидДоговора);	
	Если НЕ ЗначениеЗаполнено(ВидДоговора) Тогда
		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	КонецЕсли;
	
	Если ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда	
	    // сделка из шапки документа
		СделкаРегл = Неопределено;
		СтруктураШапкиДокумента.Свойство(ИмяСделкиИзШапки, СделкаРегл);	
		
		ТаблицаДокумента.ЗаполнитьЗначения(СделкаРегл, "СделкаРегл");
		      
	ИначеЕсли ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда	
		
		СделкаИзШапки = Неопределено;
		СтруктураШапкиДокумента.Свойство(ИмяСделкиИзШапки, СделкаИзШапки);	
		
		Если РасчетыСПокупателем = Неопределено Тогда
			Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				РасчетыСПокупателем = Истина;	
			ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда	
			    РасчетыСПокупателем = Ложь;	
			КонецЕсли;
		КонецЕсли;
		
		ИмяКолонкиСделкаВТаблице = "";
		Если  СтруктураШапкиДокумента.Свойство("ЗаказВТабличнойЧасти")
			И СтруктураШапкиДокумента.ЗаказВТабличнойЧасти Тогда
			Если РасчетыСПокупателем = Истина Тогда
				Если НЕ ТаблицаДокумента.Колонки.Найти("ЗаказПокупателя") = Неопределено Тогда
					ИмяКолонкиСделкаВТаблице = "ЗаказПокупателя";
				КонецЕсли;
			ИначеЕсли РасчетыСПокупателем = Ложь Тогда
				Если НЕ ТаблицаДокумента.Колонки.Найти("ЗаказПоставщику") = Неопределено Тогда
					ИмяКолонкиСделкаВТаблице = "ЗаказПоставщику";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Строка Из ТаблицаДокумента Цикл
			
			Если ЗначениеЗаполнено(ИмяКолонкиСделкаВТаблице) Тогда
				
				СделкаИзТаблицы = Строка[ИмяКолонкиСделкаВТаблице];
				
				Если ЗначениеЗаполнено(СделкаИзТаблицы) Тогда
					Строка.СделкаРегл = СделкаИзТаблицы;
				Иначе
					Строка.СделкаРегл = СделкаИзШапки;
				КонецЕсли;
				
			Иначе	
				
				Строка.СделкаРегл = СделкаИзШапки;	
				
			КонецЕсли;
		
		КонецЦикла;
		
	Иначе	
		
		ТаблицаДокумента.ЗаполнитьЗначения(Неопределено, "СделкаРегл");	
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьВозможностьЗачетаАвансаВВалюте(СтруктураШапкиДокумента, СтруктураПараметров, Отказ, Заголовок) Экспорт
	
	Если   СтруктураШапкиДокумента.Свойство("ЗаказВТабличнойЧасти")
		 И СтруктураШапкиДокумента.ЗаказВТабличнойЧасти = Истина
		 И СтруктураШапкиДокумента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		 И Найти(ВРЕГ(СтруктураШапкиДокумента.ВидДокумента), ВРЕГ("ПоступлениеТоваровУслуг")) > 0 Тогда
		 
	
		ТаблицаДанныхДокумента = СтруктураПараметров.Таблица;	
		ТаблицаСделок = ТаблицаДанныхДокумента.Скопировать();
		ТаблицаСделок.Свернуть("СделкаРегл");
		
		Если ТаблицаСделок.Количество() > 1 Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке("Нельзя оформлять документы поступления с несколькими заказами в табличных частях при расчетах в инвалюте,
											  |если взаиморасчеты по бухгалтерскому и налоговому учету ведутся в разрезе заказов!", Отказ, Заголовок);	
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры
