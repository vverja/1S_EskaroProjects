#Если Клиент Тогда
// Процедура выполняет отключение пользователей от информационной 
// базы в случае, если был запущен сеанс с параметром "ЗавершитьРаботуПользователей"
//
Процедура КонтрольРежимаЗавершенияРаботыПользователей() Экспорт

	ТекущийРежим = ПолучитьБлокировкуУстановкиСоединений();
	БлокировкаУстановлена = УправлениеСоединениямиИБ.УстановленаБлокировкаСоединений();
	ВремяНачалаБлокировки = ТекущийРежим.Начало;
	ВремяОкончанияБлокировки = ТекущийРежим.Конец;
	
	ИнтервалПредупреждения    = УправлениеСоединениямиИБ.ИнтервалОжиданияЗавершенияРаботыПользователей();
	ИнтервалЗакрытьСЗапросом  = 0;
	ИнтервалЗакрытьБезЗапроса = - УправлениеСоединениямиИБ.ИнтервалОжиданияЗавершенияРаботыПользователей() / 5;
	ИнтервалПрекратить        = - УправлениеСоединениямиИБ.ИнтервалОжиданияЗавершенияРаботыПользователей() / 2.5;
	ТекущийМомент = ТекущаяДата();
	
	Если БлокировкаУстановлена Тогда
		
		Если ВремяОкончанияБлокировки <> '00010101' И ТекущийМомент > ВремяОкончанияБлокировки Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВремяНачалаБлокировки) 
			ИЛИ ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалПрекратить Тогда
			
			ПрекратитьРаботуСистемы(Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалЗакрытьБезЗапроса Тогда
			
			Сообщение = УправлениеСоединениямиИБ.ИзвлечьСообщениеБлокировки(ТекущийРежим.Сообщение);
			Предупреждение("Работа системы завершается" + ?(ПустаяСтрока(Сообщение), ".", " " + Сообщение), 30);
			ЗавершитьРаботуСистемы(Ложь, Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалЗакрытьСЗапросом Тогда
			
			Сообщение = УправлениеСоединениямиИБ.ИзвлечьСообщениеБлокировки(ТекущийРежим.Сообщение);
			Предупреждение("Работа системы завершается" + ?(ПустаяСтрока(Сообщение), ".", " " + Сообщение), 30);
			ЗавершитьРаботуСистемы(Истина, Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалПредупреждения Тогда
			
			Сообщение = УправлениеСоединениямиИБ.ИзвлечьСообщениеБлокировки(ТекущийРежим.Сообщение);
			Предупреждение("Работа системы будет завершена в " + ВремяНачалаБлокировки + ?(ПустаяСтрока(Сообщение), ".", " " + Сообщение), 30);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

// Завершение работы только при условии удачной установки монопольного режима работы
// Вызывается, только при запуске системы от имени администратора с параметром запуска "ЗавершитьРаботуПользователей"
//
Процедура ЗавершитьРаботуПользователей() Экспорт

	Соединения = ПолучитьСоединенияИнформационнойБазы();
	
	Если Соединения.Количество() = 1 Тогда
		// Отключены все пользователи, кроме текущего сеанса
		// В последнюю очередь завершается сеанс, запущенный с параметром "ЗавершитьРаботуПользователей".
		// Такой порядок отключений необходим для обновления конфигурации с помощью пакетного файла
		
		ЗавершитьРаботуСистемы(Ложь);
		
		Возврат;
	КонецЕсли; 
	
	// Получим текущее значение параметров блокировки
	ТекущийРежим = ПолучитьБлокировкуУстановкиСоединений();
	БлокировкаУстановлена = ТекущийРежим.Установлена;
	ВремяНачалаБлокировки = ТекущийРежим.Начало;
	ИнтервалОтключения    = - УправлениеСоединениямиИБ.ИнтервалОжиданияЗавершенияРаботыПользователей();
	ТекущийМомент = ТекущаяДата();
	
	Если БлокировкаУстановлена И
		(НЕ ЗначениеЗаполнено(ВремяНачалаБлокировки) 
			ИЛИ ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалОтключения) Тогда
			
		// после начала блокировки сеансы всех пользователей должны быть отключены	
		// если этого не произошло пробуем принудительно прервать соединения
		ОтключитьОбработчикОжидания("ЗавершитьРаботуПользователей");
		
		// Невозможно принудительно отсоединить подключения в файловом режиме работы
		Если ОпределитьЭтаИнформационнаяБазаФайловая() Тогда
			УправлениеСоединениямиИБ.РазрешитьРаботуПользователей();
			Сообщение = УправлениеСоединениямиИБ.ПолучитьНазванияСоединенийИБ("Не удалось завершить работу пользователей:");
			ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
			ЗавершитьРаботуСистемы(Ложь);
			Возврат;	
		КонецЕсли;	
		
		ПараметрыАдминистрированияИБ = УправлениеСоединениямиИБ.ПолучитьПараметрыАдминистрированияИБ();
		ПараметрыЗапуска = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
		Если ПараметрыЗапуска.Количество() > 1 Тогда
			ПараметрыАдминистрированияИБ.ИмяАдминистратораИБ = Врег(ПараметрыЗапуска[1]);
		КонецЕсли;
		Если ПараметрыЗапуска.Количество() > 2 Тогда
			ПараметрыАдминистрированияИБ.ПарольАдминистратораИБ = Врег(ПараметрыЗапуска[2]);
		КонецЕсли;
		
		Результат = УправлениеСоединениямиИБ.ОтключитьСоединенияИБ(ПараметрыАдминистрированияИБ);
		Если Результат Тогда
			Сообщить("Завершение работы пользователей выполнено успешно.", СтатусСообщения.Информация);
			ЗавершитьРаботуСистемы(Ложь);
		Иначе
			Сообщение = УправлениеСоединениямиИБ.ПолучитьНазванияСоединенийИБ("Не удалось завершить работу пользователей:");
			Сообщить(Сообщение, СтатусСообщения.Внимание);
			ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ДИНАМИЧЕСКОГО ОБНОВЛЕНИЯ
//

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Проверяет в конфигурации ИБ наличие изменений появившихся после старта сеанса
//
Процедура ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ() Экспорт

	// Если в конфигурации после старта текущего сеанса что-то изменилось
	Если КонфигурацияБазыДанныхИзмененаДинамически() Тогда


		// Завершим проверку обновления
		ЗавершитьПроверкуДинамическогоОбновленияИБ();

		// Спросим пользователя о его желании перезапустить сеанс
		ТекстВопроса = "В конфигурацию ИБ внесены изменения." + Символы.ПС +
						"Для работы с ними рекомендуется перезапустить программу." + Символы.ПС +
						"Перезапустить?";
		РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);

		// Если пользователь не хочет перезапускать сеанс
		Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			// Запустим проверку обновления опять
			НачатьПроверкуДинамическогоОбновленияИБ();
			Возврат;
		КонецЕсли;

	
		// Попробуем перезапустить
		РаботаСДиалогами.ПерезапуститьСеансРаботыСПрограммой();

	КонецЕсли;

КонецПроцедуры

// Начинает проверку динамического обновления конфигурации ИБ
//
Процедура НачатьПроверкуДинамическогоОбновленияИБ()Экспорт
	
	// проверка дин. обновления конфигурации каждые 20 мин.
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ", 20 * 60);

КонецПроцедуры

// Завершает проверку динамического обновления конфигурации ИБ
//
Процедура ЗавершитьПроверкуДинамическогоОбновленияИБ()Экспорт

	// Отключим соответствующий обработчик ожидания
	ОтключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ");

КонецПроцедуры

#КонецЕсли

Функция ОпределитьЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД = "") Экспорт
			
	СтрокаСоединенияСБД = ?(ПустаяСтрока(СтрокаСоединенияСБД), СтрокаСоединенияИнформационнойБазы(), СтрокаСоединенияСБД);
	
	// в зависимости от того файловый это вариант БД или нет немного по-разному путь в БД формируется
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");
	
	Возврат ПозицияПоиска = 1;	
	
КонецФункции

// Функция предназначена для получения значения по имени переменной
// значения берутся либо из КЭШа конфигурации (параметр сеанса "ОбщиеЗначения"),
// либо при помощи механизма платформы "повторное использование возвращаемых значений"
//
// Параметры:
//	ИмяПеременной - Строка, имя переменной
//
// Возвращаемое значение: 
//  Произвольное значение
//
Функция глЗначениеПеременной(ИмяПеременной) Экспорт
	
	Возврат РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной(ИмяПеременной);
	
КонецФункции

// Процедура установки значения экспортных переменных модуля приложения
//
// Параметры
//  ИмяПеременной      - строка, содержит имя переменной целиком
// 	ЗначениеПеременной - значение переменной
//
Процедура глЗначениеПеременнойУстановить(ИмяПеременной, ЗначениеПеременной, ОбновитьКэшНаСервере = Ложь) Экспорт
	
	РаботаСОбщимиПеременными.УстановитьЗначениеПеременной(ИмяПеременной, ЗначениеПеременной, ОбновитьКэшНаСервере);
	
КонецПроцедуры

