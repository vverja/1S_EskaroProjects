
// По параметрам структуры определяет, есть ли право на налоговый кредит
//
// Параметры
//  СтруктураДанных	– любой составной тип данных, в котором есть свойства, от которых зависит налоговый кредит
//						обязательно должно присутствовать НалоговоеНазначение 
//	ПоФакту		 	- Строка. Суффикс, который будет добавлен к именам свойств (используется при получении фактических данных о наличии налогового кредита)
//
// Возвращаемое значение:
//   Булево   – есть налоговый кредит или нет
//
Функция ЕстьНалоговыйКредит(СтруктураДанных, ПоФакту = Неопределено) Экспорт	

	ИмяНалоговоеНазначение       = "НалоговоеНазначение";
	Если ПоФакту <> Неопределено Тогда
		ИмяНалоговоеНазначение       = ИмяНалоговоеНазначение + ПоФакту;
	КонецЕсли; 
	Возврат НалоговыйУчетПовтИсп.ЕстьПравоНаНалоговыйКредит(СтруктураДанных[ИмяНалоговоеНазначение]);

КонецФункции // ЕстьНалоговыйКредит()

//Возвращает вид деятельности по НДС по ставке НДС и доп. параметрам
// Параметры
//  СтавкаНДС		– Перечисление.СтавкиНДС - ставка НДС по операции реализации.
//						Амортизируемость присутствует только в ТЧ с 
//	ДопПараметры	- Структура. Содаржит доп. параметры для определения вида деятельности НДС.
//
// Возвращаемое значение:
//   Перечисление.ВидыДеятельностиНДС   – вид деятельности НДС
//
Функция ПолучитьВидДеятельностиНДС(СтавкаНДС, ДопПараметры = Неопределено) Экспорт
	
	ЕстьДопПараметры = (ТипЗнч(ДопПараметры) = Тип("Структура"));
	
	Если ЕстьДопПараметры Тогда
		
		Если ДопПараметры.Свойство("БартерИЭкспорт") Тогда
			Если ДопПараметры.БартерИЭкспорт = Истина Тогда
			    
				// Вообще-то это "временное" ограничение. Но продлевается
				// каждый год начиная с 2001-го: дату проверки не учитываем
				Возврат Перечисления.ВидыДеятельностиНДС.Необлагаемая;
				
			КонецЕсли; 
		//ИначеЕсли	
		КонецЕсли;
		
	КонецЕсли;	//ЕстьДопПараметры
	
	// по общим правилам
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 
	  Или СтавкаНДС = Перечисления.СтавкиНДС.НДС0  Тогда
		 
		Возврат Перечисления.ВидыДеятельностиНДС.Облагаемая;
	Иначе
		
		Возврат Перечисления.ВидыДеятельностиНДС.Необлагаемая;
	КонецЕсли; 
	
КонецФункции // ПолучитьВидДеятельностиНДС()

// Получает таблицу с информацией по тем движениям регистра НДС, которые привели к необходимости корректировать налоговый кредит
//		и дополняет ее информацией о необходимости корректировать налоговый кредит
//
// Параметры
//  ДвиженияРегистраНДС  – таблица значений с движениями регистра,
//				в таблице должны быть обязательные колонки: 
//				ВидНалоговойДеятельности(ПоФакту), ДляОблагаемыхНДСомОпераций(ПоФакту), НДСВходящий, НДСКредит
Процедура ПолучитьТаблицуКорректировокНалоговогоКредита(ТаблицаДвиженийРегистраНДС) Экспорт
	
	ТаблицаДвиженийРегистраНДС.Колонки.Добавить("СуммаКорректировкиНалоговогоКредита", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Для каждого СтрокаТаблицы Из ТаблицаДвиженийРегистраНДС Цикл
		
		Если СтрокаТаблицы.ВидДвижения <> ВидДвиженияНакопления.Расход Тогда
		
			Продолжить; // Отбираем только использование ценностей (расход по регистру)
		
		КонецЕсли; 
		
		СтруктураКорректировкаНДСКредит = НалоговыйУчет.ПолучитьСуммуКорректировкиНалоговогоКредита(
			СтрокаТаблицы.НалоговоеНазначение,
			СтрокаТаблицы.НалоговоеНазначениеПоФакту,
			СтрокаТаблицы.НДСВходящий,
			СтрокаТаблицы.НДСКредит,
			СтрокаТаблицы.Стоимость  // СтоимостьБУ
		);
		
		Если НЕ СтруктураКорректировкаНДСКредит.ЕстьКорректировки Тогда
			Продолжить;
		КонецЕсли; 	
		
		КорректировкаНДСКредит        = СтруктураКорректировкаНДСКредит.КорректировкаНДСКредит;
		НДСКредитПоФакту              = СтруктураКорректировкаНДСКредит.НДСКредитПоФакту;
		СуммаКорректировкиСтоимость   = СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимость;
		СуммаКорректировкиСтоимостьНУ = СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимостьНУ;
		
		СтрокаТаблицы.СуммаКорректировкиНалоговогоКредита = КорректировкаНДСКредит;
		
	КонецЦикла; 

КонецПроцедуры // ПолучитьТаблицуКорректировокНалоговогоКредита()

//Возвращает схему налогообложения Организации на Дату
Функция ПолучитьСхемуНалогообложения(Дата,Организация) Экспорт
	
	УчетнаяПолитикаНУ = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьПоследнее(Дата, Новый Структура("Организация", Организация));
	Если ЗначениеЗаполнено(УчетнаяПолитикаНУ.СхемаНалогообложения) Тогда
		Возврат УчетнаяПолитикаНУ.СхемаНалогообложения;
	Иначе
		Возврат Справочники.СхемыНалогообложения.НеПлательщик;
	КонецЕсли; 
	
КонецФункции // ПолучитьСхемуНалогообложения()

// Проверяет, равен ли вид налоговой деятельности предопределенному значению Распределяется, и в таком
//  случае, выдается сообщение об ошибке. Процедура используется в тех случаях, когда в документах 
//  (регистрах) должен указываться конкретный вид налоговой деятельности.
//
// Параметры
//  ВидНалоговойДеятельности		– Справочник.ВидыНалоговойДеятельности - проверяемый вид налоговой деятельности
//  Отказ					  		– Булево – признак отказа в выполнении операции (проведении)
//  Заголовок                 		- Строка - заголовок начала серии сообщений
//  СтрокаНачалаСообщенияОбОшибке	- Строка - префикс сообщения
//
Процедура ПроверитьОтсутствиеРаспределяемойНалоговойДеятельности(ВидНалоговойДеятельности, Отказ = Ложь,
	                                                             Заголовок = "", СтрокаНачалаСообщенияОбОшибке = "") Экспорт

	Если ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.Распределяется Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+"Нельзя использовать распределение между видами налоговой деятельности, должен быть указан конкретный вид.", Отказ, Заголовок);
	
	КонецЕсли; 

КонецПроцедуры // ПроверитьОтсутствиеРаспределяемойНалоговойДеятельности()

// Проверяет, равен ли вид налоговой деятельности предопределенному значению Не облагается, и в таком
//  случае, выдается сообщение об ошибке. Процедура используется в тех случаях, когда в документах 
//  (регистрах) должен указываться конкретный вид налоговой деятельности.
//
// Параметры
//  ВидНалоговойДеятельности		– Справочник.ВидыНалоговойДеятельности - проверяемый вид налоговой деятельности
//  Отказ					  		– Булево – признак отказа в выполнении операции (проведении)
//  Заголовок                 		- Строка - заголовок начала серии сообщений
//  СтрокаНачалаСообщенияОбОшибке	- Строка - префикс сообщения
//
Процедура ПроверитьОтсутствиеНеОблагаемойНалоговойДеятельности(ВидНалоговойДеятельности, Отказ = Ложь, 
	                                                           Заголовок = "", СтрокаНачалаСообщенияОбОшибке = "") Экспорт

	Если ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке
		                 + "Нельзя использовать не облагаемый вид налоговой деятельности для данной операции.",
						 Отказ, Заголовок);
	
	КонецЕсли; 

КонецПроцедуры // ПроверитьОтсутствиеРаспределяемойНалоговойДеятельности()
 
// Проверяет табличную часть документа на присутствие не разрешенных для конкретной операции видов
// налоговой деятельности.
// Процедура используется в тех случаях, когда в документах ограничивается применение определенных
// видов налоговой деятельности.
//
// Параметры
//  ДокументОбъект          - объект проводимого документа, 
//  ИмяТабличнойЧасти       - табличная часть документа,
//  ИмяРеквизитаНН	        - имя проверяемого реквизита,
//  ТаблицаЗначений         - таблица значений, содержащая данные табличной части
//  СтруктураШапкиДокумента - Структура с параметрами шапки документа.
//  СтруктураПараметровПроверки - ПроверятьРаспределяемую - если есть такой параметр, то проверяется;
//                                ПроверятьНеОблагаемую   - если есть такой параметр, то проверяется;
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьТабличнуюЧастьНаРазрешенныеВидыНалоговойДеятельности(ДокументОбъект, ИмяТабличнойЧасти, 
							ИмяРеквизитаНН = "НалоговоеНазначение", ТаблицаЗначений, СтруктураПараметровПроверки,
							СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
							
							
							
	ПроверятьРаспределяемую = СтруктураПараметровПроверки.Свойство("ПроверятьРаспределяемую");
	ПроверятьНеОблагаемую   = СтруктураПараметровПроверки.Свойство("ПроверятьНеОблагаемую");

	Если НЕ (СтруктураШапкиДокумента.ЕстьНДС ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) Тогда
		// Проверка реквизитов не требуется
		Возврат;
	КонецЕсли;
	
	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "Налог. учет: Табличная часть """ + ПредставлениеТабличнойЧасти + """. "
									   + "Строка номер """ + СокрЛП(СтрокаТаблицы.НомерСтроки) + """: " 
									   + Символы.ПС + Символы.Таб;

		Если ПроверятьРаспределяемую Тогда
			
			Если ИмяРеквизитаНН = "ВидНалоговойДеятельности" Тогда
				ПроверитьОтсутствиеРаспределяемойНалоговойДеятельности(СтрокаТаблицы.ВидНалоговойДеятельности, 
			                                                       Отказ, Заголовок, СтрокаНачалаСообщенияОбОшибке);
			Иначе
				ПроверитьОтсутствиеРаспределяемойНалоговойДеятельности(СтрокаТаблицы[ИмяРеквизитаНН].ВидНалоговойДеятельности, 
			                                                       Отказ, Заголовок, СтрокаНачалаСообщенияОбОшибке);
			КонецЕсли;
		КонецЕсли;							   
		
		Если ПроверятьНеОблагаемую Тогда
			Если ИмяРеквизитаНН = "ВидНалоговойДеятельности" Тогда
				ПроверитьОтсутствиеНеОблагаемойНалоговойДеятельности(СтрокаТаблицы.ВидНалоговойДеятельности, 
				                                                     Отказ, Заголовок, СтрокаНачалаСообщенияОбОшибке);
			Иначе
				ПроверитьОтсутствиеНеОблагаемойНалоговойДеятельности(СтрокаТаблицы[ИмяРеквизитаНН].ВидНалоговойДеятельности, 
				                                                     Отказ, Заголовок, СтрокаНачалаСообщенияОбОшибке);	
			КонецЕсли;
		КонецЕсли;							   
																	 
	КонецЦикла;

КонецПроцедуры // ПроверитьОтсутствиеРаспределяемойНалоговойДеятельности()

Функция НоваяСхемаНДС(ДатаДок) Экспорт
	
	Если ДатаДок < '20050729' Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДВИЖЕНИЙ ПО НАЛОГОВЫМ РЕГИСТРАМ

Процедура ДвиженияПоРегистрамНалоговогоУчетаОплата(СтруктураПараметров, СтруктураДвижений, ВалютаРегламентированногоУчета, РежимПроведения=Неопределено, Объект=Null, Отказ=Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;

	Организация             = СтруктураПараметров.Организация;
	НаправлениеДвижения     = СтруктураПараметров.НаправлениеДвижения;
	РасчетыВозврат          = СтруктураПараметров.РасчетыВозврат;
	
	//Получение основных данных документа
	РеестрПлатежей = СтруктураПараметров.Таблица;
	
	ТаблицаНалоговыйУчет = РеестрПлатежей.Скопировать();
	ТаблицаНалоговыйУчет.Свернуть("СделкаРегл,ДоговорКонтрагента,ВозвратнаяТара", "СуммаСНДСВал");
	ТаблицаНалоговыйУчет.Колонки.СделкаРегл.Имя   = "Сделка";
	ТаблицаНалоговыйУчет.Колонки.СуммаСНДСВал.Имя = "СуммаВзаиморасчетов";
	
	// движения по регистрам НДС
	Если  НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление И РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты 
	  ИЛИ НаправлениеДвижения = Перечисления.НаправленияДвижений.Выбытие     И РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
	  
		НаборДвиженийНалоговыйУчет = СтруктураДвижений.ПродажиНалоговыйУчет; 	
				
		ТаблицаДвиженийНалоговыйУчет = НаборДвиженийНалоговыйУчет.ВыгрузитьКолонки();
					
		Если РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
			СобытиеНалоговыйУчет = Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем;
		Иначе
			СобытиеНалоговыйУчет = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю;
		КонецЕсли;
				
	ИначеЕсли НаправлениеДвижения = Перечисления.НаправленияДвижений.Выбытие     И РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты 
		  ИЛИ НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление И РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
			
		НаборДвиженийНалоговыйУчет = СтруктураДвижений.ПриобретенияНалоговыйУчет; 	
		
		ТаблицаДвиженийНалоговыйУчет = НаборДвиженийНалоговыйУчет.ВыгрузитьКолонки();
		
		Если НЕ СтруктураПараметров.ВалютаДокумента = ВалютаРегламентированногоУчета  Тогда
    		// при импорте учет НДС Приобретений не ведем, так как налоговый кредит возникает
			// в момент погашения налогового обязательства (оформления ГТД) на таможне, а не 
			// при оплате/поступлении.
			ТаблицаНалоговыйУчет.Очистить();	
		
		КонецЕсли; 
					
		Если РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
			СобытиеНалоговыйУчет = Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику;
		Иначе
			СобытиеНалоговыйУчет = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком;
		КонецЕсли;
					
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНалоговыйУчет, ТаблицаДвиженийНалоговыйУчет);
	
	ТаблицаДвиженийНалоговыйУчет.ЗаполнитьЗначения(Организация         , "Организация");
	ТаблицаДвиженийНалоговыйУчет.ЗаполнитьЗначения(СобытиеНалоговыйУчет, "Событие");
			
	Если ТаблицаДвиженийНалоговыйУчет.Количество() > 0 Тогда
		НаборДвиженийНалоговыйУчет.мПериод          = СтруктураПараметров.Период;
		НаборДвиженийНалоговыйУчет.мТаблицаДвижений = ТаблицаДвиженийНалоговыйУчет;

		НаборДвиженийНалоговыйУчет.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамНалоговогоУчетаОтгрузка(СтруктураПараметров, СтруктураДвижений, ВалютаРегламентированногоУчета, Отказ=Ложь) Экспорт
	
	Перем ТаблицыТоваров, ТаблицыТары; 
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	НаборДвиженийНалоговыйУчет		        = СтруктураДвижений.НалоговыйУчет; 	
	НаборДвиженийОжидаемыИПодтвержденныйНДС = СтруктураДвижений.ОжидаемыИПодтвержденныйНДС; 	
	
	ТаблицаДвиженийНалоговыйУчет		        = НаборДвиженийНалоговыйУчет.ВыгрузитьКолонки(); 	
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДС   = НаборДвиженийОжидаемыИПодтвержденныйНДС.ВыгрузитьКолонки(); 	
	
	ТаблицаДвиженийНалоговыйУчетТара		        = ТаблицаДвиженийНалоговыйУчет.Скопировать(); 	
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара   = ТаблицаДвиженийОжидаемыИПодтвержденныйНДС.Скопировать(); 	
	
	Организация             = СтруктураПараметров.Организация;
	ДоговорКонтрагента      = СтруктураПараметров.ДоговорКонтрагента;
	НаправлениеДвижения     = СтруктураПараметров.НаправлениеДвижения;
	РасчетыВозврат          = СтруктураПараметров.РасчетыВозврат;
	ЕстьНДС                 = СтруктураПараметров.ЕстьНДС;
	Валюта					= СтруктураПараметров.ВалютаДокумента;
	Период					= СтруктураПараметров.Период;
	
	// В случае передачи товаров комитенту, ожидаемый НДС есть, а вот продажи еще нет
	ЕстьПродажа = ?(СтруктураПараметров.Свойство("ЕстьПродажа"), СтруктураПараметров.ЕстьПродажа, Истина);
	
	СтруктураПараметров.Свойство("ТаблицыТоваров", ТаблицыТоваров);
	СтруктураПараметров.Свойство("ТаблицыТары",    ТаблицыТары);
	
	ТаблицаНалоговыйУчет     = Неопределено;
	ТаблицаНалоговыйУчетТара = Неопределено;
	
	СверткаАмортизируется = ?(НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление, " ,Амортизируется ", "");
	
	ЭтоПриобретение = (НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление И РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты) ИЛИ (НаправлениеДвижения = Перечисления.НаправленияДвижений.Выбытие И РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);
	
	Если НЕ ТаблицыТоваров = Неопределено Тогда
	
		Для каждого ТаблицаТоваров Из ТаблицыТоваров Цикл
		
			ТаблицаКопия = ТаблицаТоваров.Скопировать();
			
			ТаблицаКопия.Колонки.Добавить("СуммаНДСПропорционально",  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			
			ТаблицаКопия.Свернуть("СделкаРегл, СтавкаНДС, НалоговоеНазначение" + СверткаАмортизируется, 
								  "СуммаСНДСВал, СуммаБезНДСВал, СуммаНДСВал, СуммаНДСВалИсходный, СуммаНДСПропорционально");
								  
			Если ЭтоПриобретение Тогда
				Для Каждого СтрокаКопии Из ТаблицаКопия Цикл
					Если СтрокаКопии.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
						СуммаСНДСВал = СтрокаКопии.СуммаБезНДСВал  + СтрокаКопии.СуммаНДСВал;
						СтрокаКопии.СуммаНДСПропорционально = СтрокаКопии.СуммаНДСВал;
						СтрокаКопии.СуммаНДСВал 			= СтрокаКопии.СуммаНДСВалИсходный;
						СтрокаКопии.СуммаБезНДСВал 			= СуммаСНДСВал - СтрокаКопии.СуммаНДСВал;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			
			ТаблицаКопия.Свернуть("СделкаРегл, СтавкаНДС, НалоговоеНазначение"  + СверткаАмортизируется, 
								  "СуммаСНДСВал, СуммаБезНДСВал, СуммаНДСВал, СуммаНДСПропорционально");
			
			Если ТаблицаНалоговыйУчет = Неопределено Тогда
				ТаблицаНалоговыйУчет = ТаблицаКопия.Скопировать();	
			Иначе
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаНалоговыйУчет);
			КонецЕсли;
		
		КонецЦикла;	
		
		ТаблицаНалоговыйУчет.Свернуть("СделкаРегл, СтавкаНДС, НалоговоеНазначение"  + СверткаАмортизируется, 
									  "СуммаСНДСВал, СуммаБезНДСВал, СуммаНДСВал, СуммаНДСПропорционально");
		
		ТаблицаНалоговыйУчет.Колонки.СуммаСНДСВал  .Имя = "СуммаВзаиморасчетов";
		ТаблицаНалоговыйУчет.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
		ТаблицаНалоговыйУчет.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
		ТаблицаНалоговыйУчет.Колонки.СделкаРегл   .Имя = "Сделка";
		
	КонецЕсли;
	
	Если НЕ ТаблицыТары = Неопределено Тогда
	
		Для каждого ТаблицаТары Из ТаблицыТары Цикл
		
			ТаблицаКопия = ТаблицаТары.Скопировать();
			ТаблицаКопия.Свернуть("СделкаРегл, СтавкаНДС, НалоговоеНазначение" + СверткаАмортизируется,
							      "СуммаСНДСВал, СуммаБезНДСВал");
			
			Если ТаблицаНалоговыйУчетТара = Неопределено Тогда
				ТаблицаНалоговыйУчетТара = ТаблицаКопия.Скопировать();	
			Иначе
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаНалоговыйУчетТара);
			КонецЕсли;
		
		КонецЦикла;	
		
		ТаблицаНалоговыйУчетТара.Свернуть("СделкаРегл, СтавкаНДС, НалоговоеНазначение" + СверткаАмортизируется,
									      "СуммаСНДСВал, СуммаБезНДСВал");
		
		ТаблицаНалоговыйУчетТара.Колонки.СуммаСНДСВал       .Имя = "СуммаВзаиморасчетов";
		ТаблицаНалоговыйУчетТара.Колонки.СуммаБезНДСВал     .Имя = "БазаНДС";
		ТаблицаНалоговыйУчетТара.Колонки.СделкаРегл   	    .Имя = "Сделка";
	
	КонецЕсли;
	
	Если ТаблицаНалоговыйУчет = Неопределено Тогда
		ТаблицаНалоговыйУчет = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если ТаблицаНалоговыйУчетТара = Неопределено Тогда
		ТаблицаНалоговыйУчетТара = Новый ТаблицаЗначений;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНалоговыйУчет, 	 ТаблицаДвиженийНалоговыйУчет);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНалоговыйУчет, 	 ТаблицаДвиженийОжидаемыИПодтвержденныйНДС);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНалоговыйУчетТара, ТаблицаДвиженийНалоговыйУчетТара);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНалоговыйУчетТара, ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара);
	
	ТаблицаДвиженийНалоговыйУчет.			      ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДС.    ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвиженийНалоговыйУчетТара.		      ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара.ЗаполнитьЗначения(Организация, "Организация");
	
	ТаблицаДвиженийНалоговыйУчет.				  ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДС.	  ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийНалоговыйУчетТара.			  ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	
	ТаблицаДвиженийНалоговыйУчетТара.			  ЗаполнитьЗначения(Истина, "ВозвратнаяТара");
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара.ЗаполнитьЗначения(Истина, "ВозвратнаяТара");
	
	// движения по регистрам Налогового учета Приобретений / Продаж
	Если  НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление И РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты 
      ИЛИ НаправлениеДвижения = Перечисления.НаправленияДвижений.Выбытие     И РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
	  
	    // Приобретение
		
		Если НЕ Валюта = ВалютаРегламентированногоУчета  Тогда
    		// при импорте учет НДС Приобретений не ведем, так как налоговый кредит возникает
			// в момент погашения налогового обязательства (оформления ГТД) на таможне, а не 
			// при оплате/поступлении.
			ТаблицаДвиженийОжидаемыИПодтвержденныйНДС.Очистить();	
		
		КонецЕсли; 
				
		Если РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
			СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
			СобытиеНУ  = Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика;
		Иначе
			СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
			СобытиеНУ  = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику;
		КонецЕсли;
		КодОперацииНДС = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС;
		
	ИначеЕсли НаправлениеДвижения = Перечисления.НаправленияДвижений.Выбытие     И РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты 
		  ИЛИ НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление И РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
		  
		// реализация
  
		Если РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
			СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
			СобытиеНУ  = Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю;
		Иначе
			СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
			СобытиеНУ  = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя;
		КонецЕсли;
		КодОперацииНДС = Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС;
		  
	КонецЕсли;
	
	
	ТаблицаДвиженийНалоговыйУчет.    ЗаполнитьЗначения(СобытиеНУ, "Событие");
	ТаблицаДвиженийНалоговыйУчетТара.ЗаполнитьЗначения(СобытиеНУ, "Событие");
	
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДС.	  ЗаполнитьЗначения(СобытиеНДС, "СобытиеНДС");
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара.ЗаполнитьЗначения(СобытиеНДС, "СобытиеНДС");
	
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДС.	  ЗаполнитьЗначения(КодОперацииНДС, "КодОперации");
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара.ЗаполнитьЗначения(КодОперацииНДС, "КодОперации");
	
	Если ЕстьПродажа И ТаблицаДвиженийНалоговыйУчет.Количество() > 0 Тогда
		НаборДвиженийНалоговыйУчет.мПериод          = Период;
		НаборДвиженийНалоговыйУчет.мТаблицаДвижений = ТаблицаДвиженийНалоговыйУчет;

		НаборДвиженийНалоговыйУчет.ВыполнитьПриход();
		НаборДвиженийНалоговыйУчет.Записать();
	КонецЕсли;
	
	Если ЕстьПродажа И ТаблицаДвиженийНалоговыйУчетТара.Количество() > 0 Тогда
		НаборДвиженийНалоговыйУчет.мПериод          = Период;
		НаборДвиженийНалоговыйУчет.мТаблицаДвижений = ТаблицаДвиженийНалоговыйУчетТара;

		НаборДвиженийНалоговыйУчет.ВыполнитьПриход();
		НаборДвиженийНалоговыйУчет.Записать();
	КонецЕсли;
	
	Если ЕстьНДС И ТаблицаДвиженийОжидаемыИПодтвержденныйНДС.Количество() > 0 Тогда
		НаборДвиженийОжидаемыИПодтвержденныйНДС.мПериод          = Период;
		НаборДвиженийОжидаемыИПодтвержденныйНДС.мТаблицаДвижений = ТаблицаДвиженийОжидаемыИПодтвержденныйНДС;

		НаборДвиженийОжидаемыИПодтвержденныйНДС.ВыполнитьПриход();
		НаборДвиженийОжидаемыИПодтвержденныйНДС.Записать();
	КонецЕсли;
	
	Если ЕстьНДС И ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара.Количество() > 0 Тогда
		НаборДвиженийОжидаемыИПодтвержденныйНДС.мПериод          = Период;
		НаборДвиженийОжидаемыИПодтвержденныйНДС.мТаблицаДвижений = ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара;

		НаборДвиженийОжидаемыИПодтвержденныйНДС.ВыполнитьПриход();
		НаборДвиженийОжидаемыИПодтвержденныйНДС.Записать();
	КонецЕсли;
	
КонецПроцедуры

#Если Клиент Тогда
	
Функция СформироватьЗапросНалоговыеНазначенияЗапасов(ДокОбъект)
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	Если ВестиПартионныйУчетПоСкладамРегл Тогда
		УсловиеСклад = " И Склад = &Склад ";
	Иначе
		УсловиеСклад = "";	
	КонецЕсли;
	
	
	УсловиеКомиссионер = " И Комиссионер = &ПустойКомиссионер "; 
	
		 
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|
	|	0 КАК Приоритет,
	|	ТоварыОрганизацийРеглОстатки.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТоварыОрганизацийРеглОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийРегл.Остатки(&ДатаДок, 
	|       Организация = &Организация 
	|   	И Номенклатура = &Номенклатура 
	|       И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|       И СерияНоменклатуры = &СерияНоменклатуры
	|"      + УсловиеСклад + "
	|"      + УсловиеКомиссионер + "
	|		И НалоговоеНазначение = &НалоговоеНазначениеЗатрат 
	|   ) КАК ТоварыОрганизацийРеглОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ 
	|
	|ВЫБРАТЬ
	|
	|	1 КАК Приоритет,
	|	ТоварыОрганизацийРеглОстатки.НалоговоеНазначение,
	|	ТоварыОрганизацийРеглОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийРегл.Остатки(&ДатаДок, 
	|       Организация = &Организация 
	|   	И Номенклатура = &Номенклатура 
	|       И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|       И СерияНоменклатуры = &СерияНоменклатуры
	|"      + УсловиеСклад + "
	|"      + УсловиеКомиссионер + "
	|		И НалоговоеНазначение = &НалоговоеНазначениеРаспределямое
	|   ) КАК ТоварыОрганизацийРеглОстатки
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ 
	|
	|ВЫБРАТЬ
	|
	|	2 КАК Приоритет,
	|	ТоварыОрганизацийРеглОстатки.НалоговоеНазначение,
	|	ТоварыОрганизацийРеглОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийРегл.Остатки(&ДатаДок, 
	|       Организация = &Организация 
	|   	И Номенклатура = &Номенклатура 
	|       И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|       И СерияНоменклатуры = &СерияНоменклатуры
	|"      + УсловиеСклад + "
	|"      + УсловиеКомиссионер + "
	|		И (НалоговоеНазначение <> &НалоговоеНазначениеЗатрат И НалоговоеНазначение <> &НалоговоеНазначениеРаспределямое И НалоговоеНазначение <> &НалоговоеНазначениеПустое) 
	|   ) КАК ТоварыОрганизацийРеглОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	| 
	|";
		 
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДатаДок",                          ДокОбъект.Дата);
	Запрос.УстановитьПараметр("Организация",                      ДокОбъект.Организация);
	Запрос.УстановитьПараметр("НалоговоеНазначениеРаспределямое", Справочники.НалоговыеНазначенияАктивовИЗатрат.Распределяемое);
	Запрос.УстановитьПараметр("ПустойКомиссионер",                Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("НалоговоеНазначениеПустое",        Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка());
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросНалоговыеНазначенияЗапасов()

Процедура ЗаполнитьНалоговыеНазначенияЗапасов(ДокОбъект, ИмяТабличнойЧасти, УказаниеСкладовВТЧ) Экспорт
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(ДокОбъект.Дата) Тогда
		ОбщегоНазначения.Сообщение("Не включено использование регистра ""Товары организаций (регл)"" (меню Сервис/Настройка программы, закладка ""Товары организаций (регл)"")");
		Возврат;
	КонецЕсли; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	Запрос = СформироватьЗапросНалоговыеНазначенияЗапасов(ДокОбъект);
	
	ЕстьНалоговоеНазначениеЗатратШапка     = Ложь;
	ЕстьНалоговоеНазначениеЗатратТЧ        = Ложь;
	ИмяРеквизитаНалоговоеНазначениеЗатрат  = "";
	ИмяРеквизитаНалоговоеНазначениеЗапасов = "НалоговоеНазначение";
	
	ИмяРеквизитаХарактеристикаНоменклатуры = "ХарактеристикаНоменклатуры";
	ИмяРеквизитаСерияНоменклатуры = "СерияНоменклатуры";
	
	ИмяРеквизитаСклад = "Склад";
	
	
	ТипДокумента = ТипЗнч(ДокОбъект.Ссылка);
	
	Если ТипДокумента = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		
		ЕстьНалоговоеНазначениеЗатратТЧ        = Истина;
		ИмяРеквизитаНалоговоеНазначениеЗатрат  = "НалоговоеНазначениеДоходовИЗатрат";
		ИмяРеквизитаНалоговоеНазначениеЗапасов = "НалоговоеНазначение";
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		
		ЕстьНалоговоеНазначениеЗатратШапка     = Истина;
		ИмяРеквизитаНалоговоеНазначениеЗатрат  = "НалоговоеНазначениеДоходовИЗатрат";
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаСерийИХарактеристикТоваров") Тогда
		
		ИмяРеквизитаХарактеристикаНоменклатуры = "ХарактеристикаНоменклатурыСтарая";
		ИмяРеквизитаСерияНоменклатуры = "СерияНоменклатурыСтарая";
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		ИмяРеквизитаСклад = "СкладОтправитель";
		
	КонецЕсли;	
	
	Результат = ДокОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонки();
	
	Для Каждого СтрокаТЧ Из ДокОбъект[ИмяТабличнойЧасти] Цикл
		
		Запрос.УстановитьПараметр("Номенклатура",                     СтрокаТЧ.Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",       СтрокаТЧ[ИмяРеквизитаХарактеристикаНоменклатуры]);
		Запрос.УстановитьПараметр("СерияНоменклатуры",                СтрокаТЧ[ИмяРеквизитаСерияНоменклатуры]);
		
		Если ЕстьНалоговоеНазначениеЗатратШапка Тогда
			Запрос.УстановитьПараметр("НалоговоеНазначениеЗатрат",    ДокОбъект[ИмяРеквизитаНалоговоеНазначениеЗатрат]);
		ИначеЕсли ЕстьНалоговоеНазначениеЗатратТЧ Тогда
			Запрос.УстановитьПараметр("НалоговоеНазначениеЗатрат",    СтрокаТЧ[ИмяРеквизитаНалоговоеНазначениеЗатрат]);
		Иначе
			Запрос.УстановитьПараметр("НалоговоеНазначениеЗатрат",    Справочники.НалоговыеНазначенияАктивовИЗатрат.Распределяемое);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НалоговоеНазначение = &НалоговоеНазначениеЗатрат", " И ЛОЖЬ ");
		КонецЕсли; 
		
		Если УказаниеСкладовВТЧ Тогда
			Склад = СтрокаТЧ[ИмяРеквизитаСклад];
		Иначе
			Склад = ДокОбъект[ИмяРеквизитаСклад];
		КонецЕсли;	
		Запрос.УстановитьПараметр("Склад", Склад);
		
		ОсталосьОбработать = СтрокаТЧ.Количество;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Кво = Мин(ОсталосьОбработать, Выборка.КоличествоОстаток);
			
			НоваяСтрока = Результат.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			
			НоваяСтрока[ИмяРеквизитаНалоговоеНазначениеЗапасов] = Выборка.НалоговоеНазначение;
			
			НоваяСтрока.Количество                 = Кво;
			
			ОсталосьОбработать = ОсталосьОбработать - Кво;
			
			Если ОсталосьОбработать <= 0 Тогда
				Прервать;		
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если ОсталосьОбработать > 0  Тогда
			НоваяСтрока = Результат.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока[ИмяРеквизитаНалоговоеНазначениеЗапасов] = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(); 
			НоваяСтрока.Количество                 = ОсталосьОбработать;
			
			СтрокаСообщения = "Остатка по налоговым назначениям по организации " + ДокОбъект.Организация 
			+ ?(ВестиПартионныйУчетПоСкладамРегл, " по складу " + Склад,"")
			+ " товара " +  
			УправлениеЗапасами.ПредставлениеНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.ХарактеристикаНоменклатуры, СтрокаТЧ.СерияНоменклатуры) + 
			" недостаточно, налоговое значение запасов для количества " + ОсталосьОбработать + " не заполнено.";
			
			ОбщегоНазначения.Сообщение(СтрокаСообщения);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	ДокОбъект[ИмяТабличнойЧасти].Очистить();
	ДокОбъект[ИмяТабличнойЧасти].Загрузить(Результат);
	

КонецПроцедуры // ЗаполнитьНалоговыеНазначенияЗапасов()
 
#КонецЕсли 

Процедура ЗаполнитьНалоговуюНакладнуюПоОснованию(НалоговаяНакладнаяОбъект, Основание) Экспорт
	
	ТипОснования = ТипЗнч(Основание);
	
	мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

	Если ТипОснования = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(НалоговаяНакладнаяОбъект, Основание);
		
		ТаблицаВидовОпераций = НалоговаяНакладнаяОбъект.ОпределитьВозможныеВидыОперацийПоОснованию(Основание);
		
		Если ТаблицаВидовОпераций.Количество() > 1 Тогда
			ВыбранныйВидОперации = ТаблицаВидовОпераций.ВыбратьСтроку("Выберите операцию для формирования налоговой накладной");
		ИначеЕсли ТаблицаВидовОпераций.Количество() = 1 Тогда
			ВыбранныйВидОперации = ТаблицаВидовОпераций[0];
		Иначе
			//в документе-основании нет строк с заполненной СтавкойНДС
			ВыбранныйВидОперации = Неопределено;
		КонецЕсли;
			
		Если ВыбранныйВидОперации = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НалоговаяНакладнаяОбъект.ВидОперации = ВыбранныйВидОперации[0];
		
		// Этот документ всегда имеет установленный флаг УчитыватьНДС
		НалоговаяНакладнаяОбъект.УчитыватьНДС = Истина;
		
		НалоговаяНакладнаяОбъект.СчетНДС		 = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
		НалоговаяНакладнаяОбъект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
		
		НалоговаяНакладнаяОбъект.ЗаполнитьУсловиеПродажи(Основание);

		// в документе Чек нет некоторых реквизитов...  установим вручную		
		Если НЕ ЗначениеЗаполнено(НалоговаяНакладнаяОбъект.Организация) Тогда
			НалоговаяНакладнаяОбъект.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		КонецЕсли;		
		
		НалоговаяНакладнаяОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета;
		НалоговаяНакладнаяОбъект.КурсВзаиморасчетов = 1;
		НалоговаяНакладнаяОбъект.КратностьВзаиморасчетов = 1;
		НалоговаяНакладнаяОбъект.СуммаВключаетНДС = Истина;
		НалоговаяНакладнаяОбъект.АвторасчетНДС = Истина;
		
		НалоговаяНакладнаяОбъект.ФормаРасчетов = "";
                
		СуммаБезналичнойОплаты 	= 0;
		СуммаНаличнойОплаты		= 0;
		Для каждого СтрокаОплаты Из Основание.Оплата Цикл
			Если СтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные Тогда
				СуммаНаличнойОплаты = СуммаНаличнойОплаты + СтрокаОплаты.Сумма;
			Иначе
				СуммаБезналичнойОплаты 	= СуммаБезналичнойОплаты + СтрокаОплаты.Сумма;
			КонецЕсли; 
		КонецЦикла; 
		
 		Если СуммаБезналичнойОплаты > 0 Тогда
			
			НалоговаяНакладнаяОбъект.ФормаРасчетов = "Безготівковий розрахунок";
			
		КонецЕсли;
		
		Если СуммаНаличнойОплаты > 0 Тогда	
			
			Если НалоговаяНакладнаяОбъект.ФормаРасчетов = "" Тогда
				НалоговаяНакладнаяОбъект.ФормаРасчетов = "Готівка";
			Иначе
				НалоговаяНакладнаяОбъект.ФормаРасчетов = НалоговаяНакладнаяОбъект.ФормаРасчетов + ", готівка";
			КонецЕсли; 
			
		КонецЕсли;

		// В качестве документа-основания не имеет смысл выбирать документ ЧекККМ
		// с видом операции "Чек на возврат"
		Если   Основание.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
	    	Сообщить("Нельзя вводить документ Налоговая накладная на основании Чека на возврат! ", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
		НалоговаяНакладнаяОбъект.СкопироватьТовары(Основание);
		НалоговаяНакладнаяОбъект.СкопироватьУслуги(Основание);
		
		НалоговаяНакладнаяОбъект.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();

		Возврат;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") 
		    И НЕ Основание.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
#Если Клиент Тогда			
	
			Если Основание.Дата < '20110101' Тогда
				// необходимо определиться: либо вводим налоговоую накладную на проданный товар,
				// либо вводим налоговую накладную на услуги комиссии от нерезидента.
				СписокВариантов = Новый СписокЗначений();
				СписокВариантов.Добавить(1,"На реализованный товар");
				СписокВариантов.Добавить(2,"На услугу комиссии от нерезидента");
				Выбор = СписокВариантов.ВыбратьЭлемент("Выберите вариант заполнения налоговой накладной:", СписокВариантов[0]);
			Иначе	
				// имеет смысл вводить налоговую только на услуги нерезидента. 
				// с 2011 года налоговые выписываются при передаче товаров комиссионеру (поставке)
				Выбор = Новый Структура("Значение", 2);
			КонецЕсли;
			
			Если Выбор = Неопределено Тогда
				//отказались от выбора
				НалоговаяНакладнаяОбъект.мНеОткрыватьФормуДокумента = Истина;
				Возврат;
			ИначеЕсли Выбор.Значение = 2 Тогда
			
				// Заполним реквизиты из стандартного набора по документу основанию.
				ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(НалоговаяНакладнаяОбъект, Основание);
				
				НалоговаяНакладнаяОбъект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента;
				
				// Этот документ всегда имеет установленный флаг УчитыватьНДС
				НалоговаяНакладнаяОбъект.УчитыватьНДС = Истина;
				
				НалоговаяНакладнаяОбъект.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
				НалоговаяНакладнаяОбъект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;
				
				//Заполним ТЧ
				НалоговаяНакладнаяОбъект.СкопироватьУслугиКомиссииОтНерезидента(Основание);
				
				НалоговаяНакладнаяОбъект.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
				
				Возврат;
			
			Иначе// Выбор = 1;
				//Стандартное заполнение с помощью обработки
			КонецЕсли;
#КонецЕсли		
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПодтверждениеКорректировокИспользованияНалоговыйУчет") Тогда	
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(НалоговаяНакладнаяОбъект, Основание);
		
		НалоговаяНакладнаяОбъект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа;
		
		// Этот документ всегда имеет установленный флаг УчитыватьНДС
		НалоговаяНакладнаяОбъект.УчитыватьНДС = Истина;
		
		НалоговаяНакладнаяОбъект.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
		НалоговаяНакладнаяОбъект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;
		
		СобственныйКонтрагент = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(НалоговаяНакладнаяОбъект.Организация);
		Если НЕ ЗначениеЗаполнено(СобственныйКонтрагент) Тогда
			Сообщить("Для организации """+НалоговаяНакладнаяОбъект.Организация.Наименование+""" не задан собственный контрагент!", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
		НалоговаяНакладнаяОбъект.Контрагент = СобственныйКонтрагент;
		
		НалоговаяНакладнаяОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета;
		НалоговаяНакладнаяОбъект.КурсВзаиморасчетов = 1;
		НалоговаяНакладнаяОбъект.КратностьВзаиморасчетов = 1;
		
		//Заполним ТЧ
		НалоговаяНакладнаяОбъект.СкопироватьПартииТоваровВТовары(Основание);
		НалоговаяНакладнаяОбъект.СкопироватьТЧСВидомЗатратВУслуги(Основание);

		Возврат;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ИзменениеНалоговогоНазначенияОС") Тогда	
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(НалоговаяНакладнаяОбъект, Основание);
		
		НалоговаяНакладнаяОбъект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа;

		// Этот документ всегда имеет установленный флаг УчитыватьНДС
		НалоговаяНакладнаяОбъект.УчитыватьНДС = Истина;
		НалоговаяНакладнаяОбъект.СуммаВключаетНДС = Ложь;

		НалоговаяНакладнаяОбъект.ДокументОснование = Основание;
		НалоговаяНакладнаяОбъект.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
		НалоговаяНакладнаяОбъект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;
		
		СобственныйКонтрагент = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(НалоговаяНакладнаяОбъект.Организация);
		Если НЕ ЗначениеЗаполнено(СобственныйКонтрагент) Тогда
			Сообщить("Для организации """+НалоговаяНакладнаяОбъект.Организация.Наименование+""" не задан собственный контрагент!", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
		НалоговаяНакладнаяОбъект.Контрагент = СобственныйКонтрагент;
		
		НалоговаяНакладнаяОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета;
		НалоговаяНакладнаяОбъект.КурсВзаиморасчетов = 1;
		НалоговаяНакладнаяОбъект.КратностьВзаиморасчетов = 1;
		
		//Заполним ТЧ
		НалоговаяНакладнаяОбъект.СкопироватьТоварыИзИзмененияНалоговогоНазначенияОС(Основание);
		
		//НалоговаяНакладнаяОбъект.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
		НалоговаяНакладнаяОбъект.ТипПричиныНевыдачиПокупателю = 6;
		
		Возврат;
	
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СписаниеОС") 
		  ИЛИ ТипОснования = Тип("ДокументСсылка.СписаниеМатериаловИзЭксплуатации")
		  ИЛИ ТипОснования = Тип("ДокументСсылка.СписаниеНМА") Тогда	
		  
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(НалоговаяНакладнаяОбъект, Основание);
		
		НалоговаяНакладнаяОбъект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС;
		
		// Этот документ всегда имеет установленный флаг УчитыватьНДС
		НалоговаяНакладнаяОбъект.УчитыватьНДС = Истина;
		НалоговаяНакладнаяОбъект.СуммаВключаетНДС = Ложь;
		
		НалоговаяНакладнаяОбъект.ДокументОснование = Основание;
		НалоговаяНакладнаяОбъект.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
		
		СобственныйКонтрагент = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(НалоговаяНакладнаяОбъект.Организация);
		Если НЕ ЗначениеЗаполнено(СобственныйКонтрагент) Тогда
			Сообщить("Для организации """+НалоговаяНакладнаяОбъект.Организация.Наименование+""" не задан собственный контрагент!", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
		НалоговаяНакладнаяОбъект.Контрагент = СобственныйКонтрагент;
		
		НалоговаяНакладнаяОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета;
		НалоговаяНакладнаяОбъект.КурсВзаиморасчетов = 1;
		НалоговаяНакладнаяОбъект.КратностьВзаиморасчетов = 1;
		
		//Заполним в ТЧ номенклатуру
		Если ТипОснования = Тип("ДокументСсылка.СписаниеОС") Тогда
			НалоговаяНакладнаяОбъект.ЗаполнитьОСПоСписаниюОС(Основание);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.СписаниеНМА") Тогда
			НалоговаяНакладнаяОбъект.ЗаполнитьНМАПоСписаниюНМА(Основание);
		Иначе
			НалоговаяНакладнаяОбъект.ЗаполнитьТоварыПоСписаниюМатериаловИзЭксплуатации(Основание);
		КонецЕсли;
		
		НалоговаяНакладнаяОбъект.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
		
		Возврат;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
			И Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда	
			
		НалоговаяНакладнаяОбъект.мНеОткрыватьФормуДокумента = Истина;
		
		ОбработкаФормированияНН = Обработки.ФормированиеНалоговыхНакладныхПоРознице.ПолучитьФорму();
		ОбработкаФормированияНН.Открыть();
		
		ОбработкаФормированияНН.ЭтотОбъект.Организация = Основание.Организация;
		ОбработкаФормированияНН.ЭтотОбъект.Дата 	   = Основание.Дата;
		
		Возврат;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		  ИЛИ ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		
		Если Основание.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			
			Сообщить("На основании документа ""Поступление товаров и услуг"" можно вводить ""Налоговую накладную"" только при поставке от нерезидента!");
			
			НалоговаяНакладнаяОбъект.мНеОткрыватьФормуДокумента = Истина;
			Возврат;
			
		КонецЕсли;	
			       
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(НалоговаяНакладнаяОбъект, Основание);
		
		НалоговаяНакладнаяОбъект.ДокументОснование = Основание;
		
		НалоговаяНакладнаяОбъект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента;
		
		// Этот документ всегда имеет установленный флаг УчитыватьНДС
		НалоговаяНакладнаяОбъект.УчитыватьНДС = Истина;
		
		НалоговаяНакладнаяОбъект.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
		НалоговаяНакладнаяОбъект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;		
		
		//Заполним ТЧ
		НалоговаяНакладнаяОбъект.СкопироватьУслуги(Основание);
		
		НалоговаяНакладнаяОбъект.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();

		Возврат;	
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаДолгаПоВозвратнойТаре") Тогда
		
		// В качестве документа-основания имеет смысл выбирать документ КорректировкаДолгаПоВозвратнойТаре
		// только с видом операции = "[списание тары] поставщика"
		Если НЕ Основание.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолгаПоВозвратнойТаре.Поставщика Тогда
	    	Сообщить("Нельзя вводить налоговую накладную на основании документа Корректировка долга по возвратной таре с видом операции ""списание тары у покупателя"" ", СтатусСообщения.Внимание);
			НалоговаяНакладнаяОбъект.ДокументОснование = Неопределено;
			НалоговаяНакладнаяОбъект.мНеОткрыватьФормуДокумента = Истина;
			Возврат;
		КонецЕсли;

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(НалоговаяНакладнаяОбъект, Основание);
		
		НалоговаяНакладнаяОбъект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа;
		
		// Этот документ всегда имеет установленный флаг УчитыватьНДС
		НалоговаяНакладнаяОбъект.УчитыватьНДС = Истина;
		
		НалоговаяНакладнаяОбъект.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
		НалоговаяНакладнаяОбъект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.УсловнаяПродажа;	
		
		СобственныйКонтрагент = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(НалоговаяНакладнаяОбъект.Организация);
		Если НЕ ЗначениеЗаполнено(СобственныйКонтрагент) Тогда
			Сообщить("Для организации """+НалоговаяНакладнаяОбъект.Организация.Наименование+""" не задан собственный контрагент!", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
		НалоговаяНакладнаяОбъект.Контрагент = СобственныйКонтрагент;
		
		НалоговаяНакладнаяОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета;
		НалоговаяНакладнаяОбъект.КурсВзаиморасчетов = 1;
		НалоговаяНакладнаяОбъект.КратностьВзаиморасчетов = 1;
		
		//Заполним ТЧ
		Если Основание.УчитыватьНДС Тогда
			НалоговаяНакладнаяОбъект.СкопироватьТаруВТовары(Основание);
		КонецЕсли;
		
		НалоговаяНакладнаяОбъект.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();

		Возврат;		
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		      И Основание.Дата >='20110101'
			  И Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		// налоговые обязательства возникают по поставке.
		// заполним документ на основании.
		
		// возможно, в документе указаны облагаемые и не облагаемые НДС товары
		ЕстьОблагаемыеОперации = Истина;
		ЕстьНеОблагаемыеОперации = Истина;
		ЕстьНеНДСперации = Истина;
		СтавкиНДС = Основание.Товары.ВыгрузитьКолонку("СтавкаНДС");
		Если  СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС20) = Неопределено
			И СтавкиНДС.Найти(Перечисления.СтавкиНДС.НДС0) = Неопределено Тогда
			ЕстьОблагаемыеОперации = Ложь;	
		КонецЕсли;
		Если  СтавкиНДС.Найти(Перечисления.СтавкиНДС.БезНДС) = Неопределено Тогда
			ЕстьНеОблагаемыеОперации = Ложь;	
		КонецЕсли;
		Если  СтавкиНДС.Найти(Перечисления.СтавкиНДС.НеНДС) = Неопределено Тогда
			ЕстьНеНДСперации = Ложь;	
		КонецЕсли;
		
		Если  НЕ ЕстьОблагаемыеОперации 
			И НЕ ЕстьНеОблагаемыеОперации
			И НЕ ЕстьНеНДСперации Тогда
		
			//Сообщить("Нет данных для заполнения документа!");
			
			мНеОткрыватьФормуДокумента = Истина;
			Возврат;
		
		КонецЕсли;
		
		ТекущийДокументЗаполнен = Ложь;
		Если ЕстьОблагаемыеОперации Тогда
		
			ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(НалоговаяНакладнаяОбъект, Основание);
			НалоговаяНакладнаяОбъект.ДокументОснование = Основание;
			НалоговаяНакладнаяОбъект.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации;
			НалоговаяНакладнаяОбъект.Дата = Основание.Дата;
			// Этот документ всегда имеет установленный флаг УчитыватьНДС
			НалоговаяНакладнаяОбъект.УчитыватьНДС = Истина;
			
			НалоговаяНакладнаяОбъект.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
			
			//Заполним ТЧ
			НалоговаяНакладнаяОбъект.СкопироватьТовары(Основание);
			Если НЕ ТекущийДокументЗаполнен Тогда
				ТекущийДокументЗаполнен = Истина;
				НалоговаяНакладнаяОбъект.СкопироватьВозвратнуюТару(Основание);
			КонецЕсли;
			
			НалоговаяНакладнаяОбъект.ЗаполнитьВидДоговора();
			НалоговаяНакладнаяОбъект.ЗаполнитьУсловиеПродажи();
			НалоговаяНакладнаяОбъект.ФормаРасчетов = "Оплата з поточного рахунку";
			НалоговаяНакладнаяОбъект.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
			НалоговаяНакладнаяОбъект.Сделка = Основание.Сделка;
		
		КонецЕсли;
		
		Если ЕстьНеОблагаемыеОперации Тогда
			
			Если ТекущийДокументЗаполнен Тогда
				новДок = Документы.НалоговаяНакладная.СоздатьДокумент();
			Иначе
				новДок = НалоговаяНакладнаяОбъект;
			КонецЕсли;
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(новДок, Основание);
			новДок.ДокументОснование = Основание;
			новДок.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации;
			новДок.Дата = Основание.Дата;
			
			// Этот документ всегда имеет установленный флаг УчитыватьНДС
			новДок.УчитыватьНДС = Истина;
			
			новДок.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
			
			новДок.ЗаполнитьВидДоговора();
			новДок.ЗаполнитьУсловиеПродажи();
			новДок.ФормаРасчетов = "Оплата з поточного рахунку";
			новДок.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
			новДок.Сделка = Основание.Сделка;
			
			//Заполним ТЧ
			новДок.СкопироватьТовары(Основание);
			Если НЕ ТекущийДокументЗаполнен Тогда
				ТекущийДокументЗаполнен = Истина;
				новДок.СкопироватьВозвратнуюТару(Основание);
			Иначе
				ФормаНовДок = НовДок.ПолучитьФорму(,,Новый УникальныйИдентификатор);
				ФормаНовДок.Открыть();
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЕстьНеНДСперации Тогда
			
			Если ТекущийДокументЗаполнен Тогда
				новДок = Документы.НалоговаяНакладная.СоздатьДокумент();
			Иначе
				новДок = НалоговаяНакладнаяОбъект;
			КонецЕсли;
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(новДок, Основание);
			новДок.ДокументОснование = Основание;
			новДок.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации;
			новДок.Дата = Основание.Дата;
			
			// Этот документ всегда имеет установленный флаг УчитыватьНДС
			новДок.УчитыватьНДС = Истина;
			
			новДок.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;	
			
			новДок.ЗаполнитьВидДоговора();
			новДок.ЗаполнитьУсловиеПродажи();
			новДок.ФормаРасчетов = "Оплата з поточного рахунку";
			новДок.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
			новДок.Сделка = Основание.Сделка;
			
			//Заполним ТЧ
			новДок.СкопироватьТовары(Основание);
			Если НЕ ТекущийДокументЗаполнен Тогда
				ТекущийДокументЗаполнен = Истина;
				новДок.СкопироватьВозвратнуюТару(Основание);
			Иначе
				ФормаНовДок = НовДок.ПолучитьФорму(,,Новый УникальныйИдентификатор);
				ФормаНовДок.Открыть();
			КонецЕсли;
		
		КонецЕсли;
		
		Если НЕ ТекущийДокументЗаполнен Тогда
			ТекстПредупреждения = "Нет данных для заполнения документа!";
			#Если Клиент Тогда
				Предупреждение(ТекстПредупреждения);
			#Иначе
				Сообщить(ТекстПредупреждения, СтатусСообщения.Информация);
			#КонецЕсли
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
			И Основание.Дата >= '20110101'
		    И Основание.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			
			ТекстПредупреждения = "С 2011 года налоговые обязательства в комиссионной торговле возникают при поставке товаров на комиссию (необходимо вводить Налоговую накладную на основании документа ""Реализация товаров и услуг""!
					 |По отчету комиссионера можно вводить Приложение 2 к Налоговой накладной на разницу в цене передачи и реализации товаров.";
			#Если Клиент Тогда
				Предупреждение(ТекстПредупреждения);
			#Иначе
				Сообщить(ТекстПредупреждения, СтатусСообщения.Информация);
			#КонецЕсли
			
			мНеОткрыватьФормуДокумента = Истина;
			Возврат;
	
		
	КонецЕсли;
	
	// при вводе на основании запускается специальная обработка, которая и
	// формирует налоговые накладные
	НалоговаяНакладнаяОбъект.мНеОткрыватьФормуДокумента = Истина;
	
	Если ((   ТипОснования = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
		  ИЛИ ТипОснования = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное")
		  ИЛИ ТипОснования = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств")
		  ИЛИ ТипОснования = Тип("ДокументСсылка.ПлатежноеТребованиеПоручениеВыставленное")
		  ИЛИ ТипОснования = Тип("ДокументСсылка.АккредитивПолученный")
		  ) И Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком)
		  ИЛИ
		  (  ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		  //Смартис Лиманчук начало 05.11.2012
		  // И Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком) Тогда
		   И (Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком ИЛИ Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщикомНал)) Тогда
		  //Смартис Лиманчук окончание 05.11.2012
		   
#Если Клиент Тогда
			Предупреждение("По данному документу не возникают налоговые обязательства!");
#Иначе
			Сообщить("По данному документу не возникают налоговые обязательства!", СтатусСообщения.Информация);
#КонецЕсли

			Возврат;
	КонецЕсли;
	
	ОбработкаФормированияНН = Обработки.ФормированиеНалоговыхНакладных.Создать();
	ОбработкаФормированияНН.Дата = Основание.Дата;
	
	Если НЕ ЗначениеЗаполнено(Основание.Организация) Тогда
		Сообщить("В документе не указана организация! Заполнение невозможно.");
		Возврат;
	Иначе
		ОбработкаФормированияНН.Организация = Основание.Организация;
	КонецЕсли;
	
	// Основание может содержать номенклатуру для заполнения налоговой накладной
	ОснованиеСодержитНоменклатуру = Ложь;
  	Для каждого ДопустимыйТип Из ОбработкаФормированияНН.ДопустимыеТипыДокументов Цикл
		Если ТипОснования = ДопустимыйТип Тогда
			ОснованиеСодержитНоменклатуру = Истина;
			Прервать;
  		КонецЕсли;
   	КонецЦикла; 

	ОтборДоговоров = Новый ТаблицаЗначений;
	ОтборДоговоров.Колонки.Добавить("РасчетыВозврат");
	ОтборДоговоров.Колонки.Добавить("ДоговорКонтрагента");
	ОтборДоговоров.Колонки.Добавить("Сделка");                                           
	ОтборДоговоров.Колонки.Добавить("Дата", 		Новый ОписаниеТипов("Дата"));	
	ОтборДоговоров.Колонки.Добавить("ЗаТару", 		Новый ОписаниеТипов("Булево"));
	ОтборДоговоров.Колонки.Добавить("СтавкаНДС", 	Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ОтборДоговоров.Колонки.Добавить("НалоговоеНазначение", 	Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	
	Если ОснованиеСодержитНоменклатуру Тогда
		
		Если НЕ ЗначениеЗаполнено(Основание.ДоговорКонтрагента) Тогда
			
			Сообщить("В документе не указан договор контрагента! Заполнение невозможно.");
			Возврат;
			
		КонецЕсли;	
			
		СтрокаОтбора 					= ОтборДоговоров.Добавить();
		
		СтрокаОтбора.ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		СтрокаОтбора.РасчетыВозврат		= Перечисления.РасчетыВозврат.Расчеты;
		СтрокаОтбора.Дата               = Основание.Дата;
		
		Если     ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
			 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			СделкаНалоговыйУчет  = Основание;	
			Если  Основание.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
				И ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				СделкаНалоговыйУчет = Основание.ЗаказПокупателя;
			КонецЕсли;			
			
			СтрокаОтбора.Дата 	 = '00010101';	
			ОбработкаФормированияНН.Дата = '00010101';	
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				
			СделкаНалоговыйУчет = Основание.Сделка;
			// налоговые обязательства - по оплате
			СтрокаОтбора.Дата 	 		 = '00010101';	
			ОбработкаФормированияНН.Дата = '00010101';	
				
		Иначе
			Если ТипЗнч(Основание) <> Тип("ДокументСсылка.ПередачаНМА") Тогда
			СделкаНалоговыйУчет = Основание.Сделка;	
			КонецЕсли;
					
		КонецЕсли;
					
		Если    Основание.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаОтбора.Сделка = СделкаНалоговыйУчет;
			
			
		ИначеЕсли Основание.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			// возможно указание заказов в табличной части.		
			СтрокаОтбора.Сделка = СделкаНалоговыйУчет;
			 
			Если ОбработкаФормированияНН.мОтбиратьНоменклатуруПоЗаказам Тогда
				
				ОтборДоговоров.Удалить(СтрокаОтбора);
				
				МетаданныеОснования = Основание.Метаданные();
				
				МассивЗаказов = Новый Массив;
				Для каждого ТЧОснования Из МетаданныеОснования.ТабличныеЧасти Цикл
					Если НЕ (ТЧОснования.Реквизиты.Найти("ЗаказПокупателя") = Неопределено) Тогда
						Для каждого СтрокаТЧ Из Основание[ТЧОснования.Имя] Цикл
							МассивЗаказов.Добавить(СтрокаТЧ.ЗаказПокупателя);
						КонецЦикла;
					ИначеЕсли ЗначениеЗаполнено(СделкаНалоговыйУчет) Тогда
						МассивЗаказов.Добавить(СделкаНалоговыйУчет);
					КонецЕсли;						
				КонецЦикла;
				МассивЗаказов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивЗаказов);				
				
				Для каждого Заказ Из МассивЗаказов Цикл
				
					СтрокаОтбора = ОтборДоговоров.Добавить();
					СтрокаОтбора.РасчетыВозврат		= Перечисления.РасчетыВозврат.Расчеты;
					СтрокаОтбора.ДоговорКонтрагента = Основание.ДоговорКонтрагента;
					СтрокаОтбора.Сделка 			= Заказ;
					Если     ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
						 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
						 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
                        СтрокаОтбора.Дата 				= '00010101';
					Иначе
						СтрокаОтбора.Дата 				= Основание.Дата;
					КонецЕсли;
				
				КонецЦикла;				
			КонецЕсли;			
					
		Иначе
			
			СтрокаОтбора.Сделка = Неопределено;
					
		КонецЕсли;
			
	Иначе
		
	   Если НЕ Основание.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") = Неопределено Тогда
				
			// платежные документы
			Для каждого СтрокаТЧ Из Основание.РасшифровкаПлатежа  Цикл
				СтрокаОтбора = ОтборДоговоров.Добавить();
									
				СтрокаОтбора.РасчетыВозврат		= Перечисления.РасчетыВозврат.Расчеты;
				СтрокаОтбора.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
				СтрокаОтбора.Дата 				= Основание.Дата;
					
				СделкаНалоговыйУчет 			= СтрокаТЧ.Сделка;	
					
				Если    СтрокаТЧ.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
					ИЛИ СтрокаТЧ.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
					
					СтрокаОтбора.Сделка = СделкаНалоговыйУчет
					
				Иначе
					
					СтрокаОтбора.Сделка = Неопределено;
						
				КонецЕсли;
					
			КонецЦикла;
			
			ОтборДоговоров.Свернуть("Сделка, ДоговорКонтрагента, РасчетыВозврат, Дата, Затару, СтавкаНДС, НалоговоеНазначение","");
			
		Иначе
			
			Сообщить("В документе не указан договор контрагента! Заполнение невозможно.");
			Возврат;
				
		КонецЕсли;		
		
	КонецЕсли;

	// получим данные регистра ОжидаемыйИПодтвержденныйНДСПродаж на текущий момент
	ОбработкаФормированияНН.ОбновитьДоговора(ОтборДоговоров);
	
	// укажем номенклатурный состав
	Для каждого СтрокаОтбора Из ОтборДоговоров Цикл
		
		ДокументИсточникНоменклатуры = Неопределено;
	
		Если ОснованиеСодержитНоменклатуру Тогда
				
			ДокументИсточникНоменклатуры = Основание; 	
				
		Иначе
				
			СделкаСодержитНоменклатуру = Ложь;
				
			Для каждого ДопустимыйТип Из ОбработкаФормированияНН.ДопустимыеТипыДокументов Цикл
				Если ТипЗнч(СтрокаОтбора.Сделка) = ДопустимыйТип Тогда
					СделкаСодержитНоменклатуру = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
				
			Если СделкаСодержитНоменклатуру Тогда
				ДокументИсточникНоменклатуры = СтрокаОтбора.Сделка;
			КонецЕсли;
				
		КонецЕсли;
						
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Документ", 			ДокументИсточникНоменклатуры);
		СтруктураОтбора.Вставить("ДоговорКонтрагента", 	СтрокаОтбора.ДоговорКонтрагента);
		СтруктураОтбора.Вставить("Сделка", 				СтрокаОтбора.Сделка);
		СтруктураОтбора.Вставить("РасчетыВозврат", 		СтрокаОтбора.РасчетыВозврат);
		СтруктураОтбора.Вставить("Дата", 				СтрокаОтбора.Дата);
		
		Если НЕ ДокументИсточникНоменклатуры = Неопределено Тогда
			
			СтрокаИсточниковНоменклатуры = ОбработкаФормированияНН.ИсточникиНоменклатуры.Добавить();
			СтрокаИсточниковНоменклатуры.Документ 			= ДокументИсточникНоменклатуры;
			СтрокаИсточниковНоменклатуры.ДоговорКонтрагента = СтрокаОтбора.ДоговорКонтрагента;
			СтрокаИсточниковНоменклатуры.Сделка 			= СтрокаОтбора.Сделка;
			СтрокаИсточниковНоменклатуры.РасчетыВозврат 	= СтрокаОтбора.РасчетыВозврат;
			СтрокаИсточниковНоменклатуры.Дата			 	= СтрокаОтбора.Дата;
				
			ОбработкаФормированияНН.ЗаполнитьТабличныеЧасти(СтруктураОтбора);
			
		КонецЕсли;
			
	КонецЦикла;	
	
	МожноФормироватьНалоговыеНакладные  = Истина;
	БудутСформированыНалоговыеНакладные = Истина;

	// Проверим, можно ли не открывать форму обработки для корректировок
	Для каждого СтрокаОтбора Из ОтборДоговоров Цикл
						
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ДоговорКонтрагента", 	СтрокаОтбора.ДоговорКонтрагента);
		СтруктураОтбора.Вставить("Сделка", 				СтрокаОтбора.Сделка);
		СтруктураОтбора.Вставить("РасчетыВозврат", 		СтрокаОтбора.РасчетыВозврат);
		СтруктураОтбора.Вставить("Дата", 				СтрокаОтбора.Дата);
		
		ТаблицаЧастичнойОтгрузки = Неопределено;
		ОбязательствБольшеЧемНоменклатуры = ОбработкаФормированияНН.МожноФормироватьНалоговыеНакладные(СтруктураОтбора, ТаблицаЧастичнойОтгрузки);
		
		Если  ТаблицаЧастичнойОтгрузки.Количество() = 0 Тогда
			
			// вообще нет номенклатуры для заполнения
			МожноФормироватьНалоговыеНакладные = Ложь;
			Прервать;
			
		ИначеЕсли НЕ ОбязательствБольшеЧемНоменклатуры Тогда                     
			
			МожноФормироватьНалоговыеНакладные  = Ложь;
			
			// есть номенклатурный состав для заполнения
			Если НЕ ОбработкаФормированияНН.БудутСформированыНалоговыеНакладные(ТаблицаЧастичнойОтгрузки) Тогда
				
				БудутСформированыНалоговыеНакладные = Ложь;
				
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	
	Если МожноФормироватьНалоговыеНакладные Тогда
			
	ИначеЕсли НЕ БудутСформированыНалоговыеНакладные Тогда
				  
#Если Клиент Тогда
		Ответ = Вопрос("По данному документу не возникают налоговые обязательства. Открыть форму обработки заполнения налоговой накладной номенклатурным составом?", РежимДиалогаВопрос.ДаНет);
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
#Иначе
		Сообщить("По данному документу не возникают налоговые обязательства!", СтатусСообщения.Информация);
		Возврат;
#КонецЕсли
				
				
	Иначе
#Если Клиент Тогда
	        ТекстВопроса = "На текущий момент сумма неподтвержденных налоговых обязательств (в разрезе Ставок НДС, налоговых назначений или Счетов НДС н/о) меньше соответствующей суммы документа. Заполнить налоговую накладную номенклатурным составом невозможно. Открыть форму обработки заполнения налоговой накладной номенклатурным составом?";
			Если  ОтборДоговоров.Количество() = 1 И (НЕ ДокументИсточникНоменклатуры = Неопределено) Тогда
		    	ВариантыОтвета = РежимДиалогаВопрос.ДаНетОтмена;
				ТекстВопроса = ТекстВопроса + "	
				|
				|	Да		- будет открыта обработка заполнения налоговых накладных товарным составом 
				|	Нет		- будут сформированы налоговые накладные без товарного состава
				|	Отмена	- отказ от ввода налоговых накладных"
			Иначе
				ВариантыОтвета = РежимДиалогаВопрос.ОКОтмена;
			КонецЕсли;
	
			Ответ = Вопрос(ТекстВопроса, ВариантыОтвета);
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
					
				// открываем НН заполненную строками "частичная отгрузка"
				СтруктураОтбора.Вставить("Документ", ДокументИсточникНоменклатуры);
				
				ОбработкаФормированияНН.ПодготовитьНоменклатурныйСоставПриЧастичнойОтгрузке(СтруктураОтбора, ТаблицаЧастичнойОтгрузки);
				ОбработкаФормированияНН.ОткрыватьДокументы = Истина;
				ОбработкаФормированияНН.СформироватьНалоговыеДокументы();	
					
				Возврат;	
				
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			КонецЕсли; 
#Иначе
			Сообщить("Заполнить налоговую накладную номенклатурным составом невозможно!", СтатусСообщения.Информация);
#КонецЕсли

	КонецЕсли;
	
	// сюда мы попадаем только, если по всем договорам можно сформировать налоговые накладные
	Если МожноФормироватьНалоговыеНакладные Тогда
				
		ОбработкаФормированияНН.ОткрыватьДокументы = Истина;
				
		// сформированные документы не будут записаны в базу
		ОбработкаФормированияНН.мНеЗаписыватьДокументы = Истина;
		
		ОбработкаФормированияНН.СформироватьНалоговыеДокументы();	
		
		Возврат;	

	КонецЕсли;	
	
	// необходимо подкорректировать номенклатурный состав.
	// откроем обработку. Но в ТЧ Договора может не быть строк - если остатков по регистру НДСПродаж не текущий момент нет
	// Добавим строки при необходимости
	Для каждого СтрокаОтбораДоговоров Из ОтборДоговоров Цикл
		
		Если ОбработкаФормированияНН.Договора.НайтиСтроки(Новый Структура("ДоговорКонтрагента, Сделка",СтрокаОтбораДоговоров.ДоговорКонтрагента,СтрокаОтбораДоговоров.Сделка)).Количество() = 0 Тогда
			
			СтрокаДоговоров = ОбработкаФормированияНН.Договора.Добавить();
			СтрокаДоговоров.ДоговорКонтрагента 	= СтрокаОтбораДоговоров.ДоговорКонтрагента;
			СтрокаДоговоров.Сделка 				= СтрокаОтбораДоговоров.Сделка;
			СтрокаДоговоров.РасчетыВозврат 		= СтрокаОтбораДоговоров.РасчетыВозврат;
			СтрокаДоговоров.Дата 				= СтрокаОтбораДоговоров.Дата;

			
			СтрокаИсточниковНоменклатуры = ОбработкаФормированияНН.ИсточникиНоменклатуры.Добавить();
			СтрокаИсточниковНоменклатуры.ДоговорКонтрагента 	= СтрокаОтбораДоговоров.ДоговорКонтрагента;
			СтрокаИсточниковНоменклатуры.Сделка 				= СтрокаОтбораДоговоров.Сделка;
			СтрокаИсточниковНоменклатуры.РасчетыВозврат 		= СтрокаОтбораДоговоров.РасчетыВозврат;
			СтрокаИсточниковНоменклатуры.Дата 					= СтрокаОтбораДоговоров.Дата;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ФормаОбработки = ОбработкаФормированияНН.ПолучитьФорму();
	
	ФормаОбработки.ВосстанавливатьЗначенияПриОткрытии = Ложь;
	ФормаОбработки.ОткрыватьДокументы = Истина;
	
	ФормаОбработки.Открыть();
	
	ФормаОбработки.ЭлементыФормы.Панель.ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.Панель.Страницы.Данные;	

КонецПроцедуры // ЗаполнитьНалоговуюНакладнуюПоОснованию()

Функция ОпределитьСтоимостьНУ(Знач НалоговоеНазначение, Знач СтоимостьНУ) Экспорт
	Если НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность 
		ИЛИ НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность
		ИЛИ (НЕ ЗначениеЗаполнено(НалоговоеНазначение)) Тогда
		Возврат 0;
	Иначе
		Возврат СтоимостьНУ;
	КонецЕсли; 
КонецФункции // ОпределитьСтоимостьНУ
 
Функция УчестьСуммуАвансаДо01042011(СтруктураШапки, СуммаПроводки) Экспорт

	Если СуммаПроводки = 0 Тогда
		Возврат 0;	
	КонецЕсли;
	
	Если НЕ СтруктураШапки.Свойство("СуммаВДВРПоАвансуДо01042011") Тогда
		Возврат СуммаПроводки;
	КонецЕсли;
	
	Если СтруктураШапки.Свойство("ЕстьАвансДо1042012") Тогда
		Если НЕ СтруктураШапки.ЕстьАвансДо1042012 = Истина Тогда
			Возврат СуммаПроводки;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапки.СуммаВДВРПоАвансуДо01042011 <= 0 Тогда
		Возврат СуммаПроводки;
	КонецЕсли;	
	
	Аванс = МИН(СтруктураШапки.СуммаВДВРПоАвансуДо01042011, МАКС(СуммаПроводки, - СуммаПроводки));
	
	СтруктураШапки.СуммаВДВРПоАвансуДо01042011 = СтруктураШапки.СуммаВДВРПоАвансуДо01042011 - Аванс;
	
	Возврат  СуммаПроводки  - ?(СуммаПроводки < 0, -1, + 1) * Аванс;

КонецФункции // УчестьСуммуАвансаДо01042011 

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений по бухгалтерскому и налоговому учетам
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, ЭтоПриобретение = Истина, ЭтоУслуги = Ложь, ИмяКолонкиСумма = "Сумма", ЗаполнятьСделку = Истина) Экспорт
	
	Если НЕ ТипЗнч(ЭтоПриобретение) = Тип("Булево") Тогда
		ЭтоПриобретение = Ложь;		
	КонецЕсли;
	
	Если НЕ ТипЗнч(ЭтоУслуги) = Тип("Булево") Тогда
		ЭтоУслуги = Ложь;		
	КонецЕсли;
	
	ЕстьПропорциональныйНДС = ЭтоПриобретение И СтруктураШапкиДокумента.Свойство("СуммаНДСПропорциональноКредит");
	
	ЕстьКолонкаСуммаНДСПропорциональноКредит = ТаблицаТоваров.Колонки.Найти("СуммаНДСПропорциональноКредит") <> Неопределено;
	
	Если ТаблицаТоваров.Колонки.Найти("СуммаНДСВалИсходный") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("СуммаНДСВалИсходный",  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли;
	
	ЕстьКолонкаПроводкиСуммаНДСРеглРаспределения = ТаблицаТоваров.Колонки.Найти("ПроводкиСуммаНДСРеглРаспределения") <> Неопределено;
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл"        , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"          , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСВал"         , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСВал"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в проводках в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСРегл", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСРегл"   , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСРегл"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в проводках в валюте документа
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСВал" , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСВал"    , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСВал"   , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНоминальная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	// Если бланки строгого учета - пересчитать сумму номинальную.
	ЕстьСуммаНоминальная = ТаблицаТоваров.Колонки.Найти("СуммаНоминальная") <> Неопределено;
	
	ЕстьПроводкиСуммаНДСКредит = ТаблицаТоваров.Колонки.Найти("ПроводкиСуммаНДСКредит") <> Неопределено;
	
	ЕстьСебестоимостьНУ = ТаблицаТоваров.Колонки.Найти("СебестоимостьНУ") <> Неопределено;
	
	// сумма по налоговому учету налога на прибыль
	ТаблицаТоваров.Колонки.Добавить("СтоимостьНУ"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	
	ВидДеятельностиНДСНеоблагаемый 		= Перечисления.ВидыДеятельностиНДС.Необлагаемая;
	ВидДеятельностиНДСПропорциональный 	= Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая;
	
	// Заполним значения в добавленых колонках 
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал    = СтрокаТаблицы[ИмяКолонкиСумма] + ?(СтруктураШапкиДокумента.СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.НДС;
		
		Если ЕстьПропорциональныйНДС
			И СтрокаТаблицы.ВидДеятельностиНДС = ВидДеятельностиНДСПропорциональный Тогда
			// в этой колонке сохраним исходную сумму НДС в валюте.
			СтрокаТаблицы.СуммаНДСВалИсходный = СтрокаТаблицы.СуммаНДСВал;
			Если СтруктураШапкиДокумента.СуммаНДСПропорциональноВсего = 0 Тогда
				СтрокаТаблицы.СуммаНДСВал = 0;
			Иначе	
				СтрокаТаблицы.СуммаНДСВал = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(СтрокаТаблицы.СуммаНДСВал * (СтруктураШапкиДокумента.СуммаНДСПропорциональноКредит / СтруктураШапкиДокумента.СуммаНДСПропорциональноВсего), 2, , ПогрешностиОкругления, "СуммаНДСПропорциональноВал");
			КонецЕсли;	
		ИначеЕсли ЕстьКолонкаСуммаНДСПропорциональноКредит И СтрокаТаблицы.ВидДеятельностиНДС = ВидДеятельностиНДСПропорциональный Тогда
			// в этой колонке сохраним исходную сумму НДС в валюте.
			СтрокаТаблицы.СуммаНДСВалИсходный = СтрокаТаблицы.СуммаНДСВал;
			СтрокаТаблицы.СуммаНДСВал = СтрокаТаблицы.СуммаНДСПропорциональноКредит;
		КонецЕсли;			
		
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;

		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсДокумента, 1,
												СтруктураШапкиДокумента.КратностьДокумента, 1,
												, ПогрешностиОкругления, "СуммаСНДСРегл");
												
		    СтрокаТаблицы.СуммаНДСРегл  = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаСНДСРегл,
	                                                   СтруктураШапкиДокумента.УчитыватьНДС,
	                                                   Истина,
	                                                   СтрокаТаблицы.СтавкаНДС,
													   ПогрешностиОкругления);
													   
													   
			// Пересчет номинальной стоимости
			Если ЕстьСуммаНоминальная Тогда
				//  Только пересчет валюты,
				//  по забалансовому счету НДС не выделяеться, а номинальная сумма только для забалансового.
				СтрокаТаблицы.ПроводкиСуммаНоминальная = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаНоминальная, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсВалютыДокумента, 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												СтруктураШапкиДокумента.КратностьВалютыДокумента,
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
												, ПогрешностиОкругления);
			Иначе
				СтрокаТаблицы.ПроводкиСуммаНоминальная = 0;
			КонецЕсли; // ЕстьСуммаНоминальная 
													   
		КонецЕсли;
		
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
		// Рассчитаем суммы в проводках в валюте регл. учета и валюте документа
		СтрокаТаблицы.ПроводкиСуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаСНДСВал  = СтрокаТаблицы.СуммаСНДСВал;
		
		Если ЭтоПриобретение Тогда
	
			// Определим значение НДС в проводках
			Если СтруктураШапкиДокумента.УчитыватьНДС = Ложь Тогда
				// в документе НДС не указывается
				СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
				СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
				Если ЕстьКолонкаПроводкиСуммаНДСРеглРаспределения Тогда
					СтрокаТаблицы.ПроводкиСуммаНДСРеглРаспределения = 0;	
				КонецЕсли;	
			ИначеЕсли СтрокаТаблицы.ВидДеятельностиНДС = ВидДеятельностиНДСНеоблагаемый Тогда
				// НДС включается в стоимость
				СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
				СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
				Если ЕстьКолонкаПроводкиСуммаНДСРеглРаспределения Тогда
					СтрокаТаблицы.ПроводкиСуммаНДСРеглРаспределения = 0;	
				КонецЕсли;	
			ИначеЕсли СтрокаТаблицы.Забалансовый = Истина 
				И СтруктураШапкиДокумента.Дата < '20110101'
				Тогда
				// по забалансовому счету НДС не выделяется
				СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
				СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
				Если ЕстьКолонкаПроводкиСуммаНДСРеглРаспределения Тогда
					СтрокаТаблицы.ПроводкиСуммаНДСРеглРаспределения = 0;	
				КонецЕсли;	
			Иначе
				СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.СуммаНДСРегл;
				СтрокаТаблицы.ПроводкиСуммаНДСВал  = СтрокаТаблицы.СуммаНДСВал;
				Если ЕстьКолонкаПроводкиСуммаНДСРеглРаспределения Тогда
					СтрокаТаблицы.ПроводкиСуммаНДСРеглРаспределения = СтрокаТаблицы.ПроводкаСуммаНДСРаспределения;
				КонецЕсли;	
			КонецЕсли;
			
		Иначе
			
			// Определим значение НДС в проводках
			Если СтруктураШапкиДокумента.УчитыватьНДС = Ложь Тогда
				// в документе НДС не указывается
				СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
				СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
			Иначе
				СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.СуммаНДСРегл;
				СтрокаТаблицы.ПроводкиСуммаНДСВал  = СтрокаТаблицы.СуммаНДСВал;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаБезНДСВал  = СтрокаТаблицы.ПроводкиСуммаСНДСВал  - СтрокаТаблицы.ПроводкиСуммаНДСВал;
		
		
		Если ЕстьПроводкиСуммаНДСКредит Тогда
			Если НалоговыйУчетПовтИсп.ЕстьПравоНаНалоговыйКредит(СтрокаТаблицы.НалоговоеНазначение) Тогда
				СтрокаТаблицы.ПроводкиСуммаНДСКредит = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Иначе
				СтрокаТаблицы.ПроводкиСуммаНДСКредит = 0;
			КонецЕсли;
		КонецЕсли;	
		
		Если ЭтоПриобретение Тогда
			
			// при приобретении стоимость НУ (для целей учета налогоблагаемой прибыли) = 0 - если:
			// организация - не плательщик налога на прибыль
			// в договоре контрагента установлен признак НеОтноситьНаЗатратыПоНУ
			// в налоговом назначении НДС указана НеХозДеятельность
			
			НеОтноситьНаЗатратыПоНУ = Ложь;
			Если СтруктураШапкиДокумента.Свойство("НеОтноситьНаЗатратыПоНУ") Тогда
				НеОтноситьНаЗатратыПоНУ = СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ
			Иначе
				НеОтноситьНаЗатратыПоНУ = СтрокаТаблицы.НеОтноситьНаЗатратыПоНУ;
				Если НеОтноситьНаЗатратыПоНУ = Null Тогда
					НеОтноситьНаЗатратыПоНУ = Ложь;
				КонецЕсли; 
			КонецЕсли;
			
			Если (Не СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) 
				ИЛИ (НеОтноситьНаЗатратыПоНУ)
				ИЛИ (СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность)
				// пустое налоговое назначение может быть при поступлении в переработку или от комитента
				ИЛИ (СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка())
				Тогда
				
				СтоимостьНУ = 0;
				
			Иначе
				
				СтоимостьНУ = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
				// учтем авансы до 01.04.2011 
				СтоимостьНУ = НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтоимостьНУ);
				
				
			КонецЕсли;
		Иначе
			// при реализации стоимость НУ (для целей учета налогоблагаемой прибыли) = 0 - если:
			// организация - не плательщик налога на прибыль
			Если (Не СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) Тогда
				СтоимостьНУ = 0;
			Иначе
				СтоимостьНУ = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
				// учтем авансы до 01.04.2011 (без НДС)
				СтоимостьНУ = НалоговыйУчет.УчестьСуммуАвансаДо01042011(СтруктураШапкиДокумента, СтоимостьНУ);
				// добавим НДС
				СтоимостьНУ = СтоимостьНУ + СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				
			КонецЕсли;
		КонецЕсли;	
			
		
		СтрокаТаблицы.СтоимостьНУ = СтоимостьНУ;
		
		Если ЕстьСебестоимостьНУ Тогда
			Если (Не СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) Тогда
				СтрокаТаблицы.СебестоимостьНУ = 0;
			Иначе
			    СтрокаТаблицы.СебестоимостьНУ = НалоговыйУчет.ОпределитьСтоимостьНУ(СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат, СтрокаТаблицы.СебестоимостьНУ);
			КонецЕсли;	
		КонецЕсли;		
			
	КонецЦикла;
	
	Если ЗаполнятьСделку Тогда
		БухгалтерскийУчетРасчетовСКонтрагентами.ЗаполнитьСделкуРеглВТаблице(ТаблицаТоваров, СтруктураШапкиДокумента);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьКолонкиТоваровРегл

Процедура ПроверитьЗаполнениеНалоговыхНазначений(
	СтруктураШапкиДокумента, 
	ТаблицаДокумента = Неопределено,  // Неопределено - в случае проверки шапки документа
	ИмяТабличнойЧасти = Неопределено, // Неопределено - в случае проверки шапки документа
	Отказ, 
	Заголовок, 
	ВидОперации = "Поступление",
	ЭтоЗатраты = Ложь,
	ИмяРеквизитаСчетЗатрат = "СчетЗатрат",
	ИмяРеквизитаСубконтоЗатрат = "Субконто"
	) Экспорт
	
	Если Отказ 
		ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		ИЛИ НЕ (СтруктураШапкиДокумента.ЕстьНДС ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) 
		Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтоПроверкаШапки = (ТаблицаДокумента = Неопределено);
	
	Если ЭтоПроверкаШапки Тогда
		
		// Для формирования коллекции используем массив
		ТаблицаДокумента = Новый Массив(1);
		ТаблицаДокумента[0] = СтруктураШапкиДокумента;
		
		ЕстьКолонкаНалоговоеНазначение                    = СтруктураШапкиДокумента.Свойство("НалоговоеНазначение") = Истина;
		ЕстьКолонкаНалоговоеНазначениеДоходовИЗатрат      = СтруктураШапкиДокумента.Свойство("НалоговоеНазначениеДоходовИЗатрат") = Истина;
		ЕстьКолонкаНалоговоеНазначениеНовое               = Ложь; 
		ЕстьКолонкаСтавкаНДС                              = СтруктураШапкиДокумента.Свойство("СтавкаНДС") = Истина;
		ЕстьКолонкаВидНалоговойДеятельностиДоходовИЗатрат = СтруктураШапкиДокумента.Свойство("ВидНалоговойДеятельностиДоходовИЗатрат") = Истина;
		ЕстьКолонкаВидНалоговойДеятельности               = СтруктураШапкиДокумента.Свойство("ВидНалоговойДеятельности") = Истина;
		ЕстьКолонкаСчетУчетаБУ                            = Ложь; 
	Иначе
		// Это проверка табличной части документа
		ЕстьКолонкаНалоговоеНазначение = ТаблицаДокумента.Колонки.Найти("НалоговоеНазначение") <> Неопределено;
		ЕстьКолонкаНалоговоеНазначениеДоходовИЗатрат = ТаблицаДокумента.Колонки.Найти("НалоговоеНазначениеДоходовИЗатрат") <> Неопределено;
		Если ВидОперации = "ИзменениеНалоговогоНазначения" Тогда
			ЕстьКолонкаНалоговоеНазначениеНовое = ТаблицаДокумента.Колонки.Найти("НалоговоеНазначениеНовое") <> Неопределено;
		Иначе
			ЕстьКолонкаНалоговоеНазначениеНовое = Ложь;
		КонецЕсли; 
		ЕстьКолонкаСтавкаНДС = ТаблицаДокумента.Колонки.Найти("СтавкаНДС") <> Неопределено;
		ЕстьКолонкаВидНалоговойДеятельностиДоходовИЗатрат = ТаблицаДокумента.Колонки.Найти("ВидНалоговойДеятельностиДоходовИЗатрат") <> Неопределено;
		ЕстьКолонкаВидНалоговойДеятельности               = ТаблицаДокумента.Колонки.Найти("ВидНалоговойДеятельности") <> Неопределено;
		ЕстьКолонкаСчетУчетаБУ                            = ТаблицаДокумента.Колонки.Найти("СчетУчетаБУ") <> Неопределено;		
		
	КонецЕсли;
	
	// проверим, что не указаны старые налоговые назначения
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
				
		Если ЕстьКолонкаНалоговоеНазначение И НалоговыйУчетПовтИсп.ЭтоНеиспользуемоеНалоговоеНазначение(СтрокаТаблицы.НалоговоеНазначение) Тогда
			СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+
				              " ошибочно указано используемое до 01.04.2011 налоговое назначение НДС!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;	
		
		Если ЕстьКолонкаНалоговоеНазначениеДоходовИЗатрат И НалоговыйУчетПовтИсп.ЭтоНеиспользуемоеНалоговоеНазначение(СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат) Тогда
			СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+
			                  " ошибочно указано используемое до 01.04.2011 налоговое назначение доходов и затрат!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;	
		
		Если ЕстьКолонкаНалоговоеНазначениеНовое И НалоговыйУчетПовтИсп.ЭтоНеиспользуемоеНалоговоеНазначение(СтрокаТаблицы.НалоговоеНазначениеНовое) Тогда
			СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+
			                  " ошибочно указано используемое до 01.04.2011 налоговое назначение (новое)!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если Отказ Тогда
		// если есть "старые" налоговые назначения - дальнейшие проверки не имеют смысла
		Возврат;
	КонецЕсли; 
	
	// для пропорциональных налоговых назначений
	Если ВидОперации = "Поступление" И СтруктураШапкиДокумента.ЕстьНДС И ЕстьКолонкаНалоговоеНазначение И ЕстьКолонкаСтавкаНДС Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			
			// для пропорционального налогового назначения НДС ставка НДС может быть только 20% или 0%
			Если СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально
				И (НЕ (СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0)) Тогда
				
				СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+
				                  " указан признак пропорционального включения НДС в кредит. При этом ставка НДС  может быть только 0% или 20%!";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЦикла;	 
	КонецЕсли;
	
	
	
	Если (ВидОперации = "Поступление" ИЛИ ВидОперации = "ОтражениеЗатрат") И ЭтоЗатраты Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			
			Если НЕ СтрокаТаблицы[ИмяРеквизитаСчетЗатрат].НалоговыйУчет Тогда
				Продолжить;
			КонецЕсли;
			
			// проверим на РБП
			Если СтрокаТаблицы[ИмяРеквизитаСчетЗатрат] = ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов
	  			ИЛИ СтрокаТаблицы[ИмяРеквизитаСчетЗатрат].ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов) Тогда
	  
				ТипРБП = Тип("СправочникСсылка.РасходыБудущихПериодов");
				  
				Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяРеквизитаСубконтоЗатрат+"1"]) И ТипЗнч(СтрокаТаблицы[ИмяРеквизитаСубконтоЗатрат+"1"]) = ТипРБП Тогда
					ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТаблицы[ИмяРеквизитаСубконтоЗатрат+"1"].СчетБУ, Неопределено);
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы[ИмяРеквизитаСубконтоЗатрат+"2"]) И ТипЗнч(СтрокаТаблицы[ИмяРеквизитаСубконтоЗатрат+"2"]) = ТипРБП Тогда
					ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТаблицы[ИмяРеквизитаСубконтоЗатрат+"2"].СчетБУ, Неопределено);
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы[ИмяРеквизитаСубконтоЗатрат+"3"]) И ТипЗнч(СтрокаТаблицы[ИмяРеквизитаСубконтоЗатрат+"3"]) = ТипРБП Тогда
					ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТаблицы[ИмяРеквизитаСубконтоЗатрат+"3"].СчетБУ, Неопределено);
				КонецЕсли;
			Иначе
				ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТаблицы[ИмяРеквизитаСчетЗатрат], Неопределено);
			КонецЕсли; 	
			
			
			Если ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы 
				ИЛИ ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.БракВПроизводстве
				ИЛИ ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы 
			    ИЛИ ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы 
				
				Тогда
				
				// в СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат должно находится налоговое назначение НДС затрат
				Если СтруктураШапкиДокумента.ЕстьНДС Тогда
					
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат) Тогда
						СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+ 
						                  " не заполнено налоговое назначение затрат!"; 
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
						Возврат;
					КонецЕсли; 
					
					ГруппаНалоговогоНазначенияЗатрат = НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат);
					
					Если ГруппаНалоговогоНазначенияЗатрат <> Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС Тогда
						СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+ 
						                  " в налоговом назначении затрат должно быть налоговое назначение из группы Активов и взаиморасчетов по НДС!"; 
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
					КонецЕсли; 
					
				КонецЕсли; 	
				
				
			КонецЕсли;	
			
			Если ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы 
				ИЛИ ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.БракВПроизводстве
				ИЛИ ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы 
				Тогда
				
				Если НЕ ЕстьКолонкаНалоговоеНазначение Тогда
					ПроверкаПройдена = Истина;
				Иначе
					ПроверкаПройдена = НЕ СтруктураШапкиДокумента.ЕстьНДС;	
				КонецЕсли; 
				
				// в СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат находится налоговое назначение НДС затрат
				// Соответствуют друг другу, если оба НДС-ные налоговые назначения:
				// - совпадающие
				// - пропорциональное налоговое назначение НДС и налоговое назначение затрат = Обл. НДС, Необл. НДС, любая хозяйственная
				Если СтруктураШапкиДокумента.ЕстьНДС И ЕстьКолонкаНалоговоеНазначение Тогда
					Если СтрокаТаблицы.НалоговоеНазначение = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат Тогда
					
						ПроверкаПройдена = Истина;
					
					ИначеЕсли СтрокаТаблицы.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально 
				    И (СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая
					   ИЛИ СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность) Тогда
					   
						ПроверкаПройдена = Истина;
					
					КонецЕсли; 	
					
				КонецЕсли; 	
				
				Если НЕ ПроверкаПройдена Тогда
					
					СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+  
					                  " налоговое назначение НДС """ + СтрокаТаблицы.НалоговоеНазначение + 
					                  """ не соответствует налоговому назначению НДС затрат """ + СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат + """ !";
					
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
					
				КонецЕсли; 		
				
			ИначеЕсли ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы Тогда
				
				// в СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат находится налоговое назначение НДС затрат
				// для ТЗР оно должно быть точно равно СтрокаТаблицы.НалоговоеНазначение
				
				Если СтруктураШапкиДокумента.ЕстьНДС И ЕстьКолонкаНалоговоеНазначение
					И СтрокаТаблицы.НалоговоеНазначение <> СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат
					Тогда
					
					СтрокаСообщения = "Для затраты с характером затрат ТЗР " + ?(ЭтоПроверкаШапки, "в документе", "в табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+ 
					                  " налоговое назначение НДС не равно налоговому назначению НДС затрат!"; 
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
					
				КонецЕсли; 
				
			Иначе
				
				Если ЕстьКолонкаВидНалоговойДеятельностиДоходовИЗатрат Тогда
					ВидНалоговойДеятельностиДоходовИЗатрат = СтрокаТаблицы.ВидНалоговойДеятельностиДоходовИЗатрат;
				Иначе
					ВидНалоговойДеятельностиДоходовИЗатрат = НалоговыйУчетПовтИсп.ПолучитьВидНалоговойДеятельностиНалоговогоНазначения(СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат);
				КонецЕсли;	
				
				Если ЕстьКолонкаВидНалоговойДеятельности Тогда
					ВидНалоговойДеятельности = СтрокаТаблицы.ВидНалоговойДеятельности;
				Иначе
					ВидНалоговойДеятельности = ?(ЕстьКолонкаНалоговоеНазначение, НалоговыйУчетПовтИсп.ПолучитьВидНалоговойДеятельностиНалоговогоНазначения(СтрокаТаблицы.НалоговоеНазначение), Неопределено);
				КонецЕсли;	
				
				// в СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат должно находится налоговое назначение затрат
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат) Тогда
						СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+ 
						                  " не заполнено налоговое назначение затрат!"; 
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
						Возврат;
					КонецЕсли; 
					
					ГруппаНалоговогоНазначенияЗатрат = НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат);
					
					Если ГруппаНалоговогоНазначенияЗатрат <> Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат Тогда
						СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+ 
						                  " в налоговом назначении затрат должно быть налоговое назначение из группы Доходов и затрат!"; 
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
					КонецЕсли; 
					
				КонецЕсли; 	
				
				// нехоз. вид налоговой деятельности может быть только если и в СтрокаТаблицы.НалоговоеНазначение нехоз. вид налоговой деятельности
				Если СтруктураШапкиДокумента.ЕстьНДС И СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И ЕстьКолонкаНалоговоеНазначение 
					И ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.ЛюбаяХозяйственная 
					И ВидНалоговойДеятельностиДоходовИЗатрат = Справочники.ВидыНалоговойДеятельности.НеОблагаемая 
					Тогда
					
					СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+  
					                  " в налоговом назначении НДС указан хозяйственный вид налоговой деятельности, " + 
					                  "при этом в налоговом назначении затрат указан нехозяйственный вид налоговой деятельности!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
				
				КонецЕсли; 	
				
				Если СтруктураШапкиДокумента.ЕстьНДС И СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И ЕстьКолонкаНалоговоеНазначение
					И ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая 
					И ВидНалоговойДеятельностиДоходовИЗатрат = Справочники.ВидыНалоговойДеятельности.ЛюбаяХозяйственная
					Тогда
					
					СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+  
					                  " в налоговом назначении НДС указан нехозяйственный вид налоговой деятельности, " + 
					                  "при этом в налоговом назначении затрат указан хозяйственный вид налоговой деятельности!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
				
				КонецЕсли; 	
				
				// в налоговом назначении затрат не может быть указано налоговое назначение с видом налоговой деятельности - распределяется
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль 
					И ВидНалоговойДеятельностиДоходовИЗатрат = Справочники.ВидыНалоговойДеятельности.Распределяется Тогда
					
					СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+  
					                  " в налоговом назначении затрат указан вид налоговой деятельности ""Распределяется""!"; 
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
				
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;	
	КонецЕсли;
	
	Если ВидОперации = "Реализация" Тогда
		
		Если СтруктураШапкиДокумента.Свойство("ВидДоговора") Тогда
			ЭтоКомиссия = (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		Иначе
			ЭтоКомиссия = Ложь; // Например документ "Отчет о розничных продажах"
		КонецЕсли;
		
		НехозВНД_НДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
		НехозВНД_НП  = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность;
		
		// Для определения вида деятельности НДС
		ДопПараметрыОпределенияВДНДС = Новый Структура("БартерИЭкспорт");
		Если СтруктураШапкиДокумента.Свойство("ВидДоговора") 
		  И (СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> глЗначениеПеременной("ВалютаРегламентированногоУчета")) 
		  И (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный) Тогда
			// Бартер и экспорт
			ДопПараметрыОпределенияВДНДС.БартерИЭкспорт = Истина;
		Иначе
			ДопПараметрыОпределенияВДНДС.БартерИЭкспорт = Ложь;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль
				И НЕ ЭтоКомиссия Тогда   
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат) Тогда
					СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+ 
					                  " не заполнено налоговое назначение доходов!"; 
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
					Возврат;
				КонецЕсли; 
				
				Если СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат = НехозВНД_НП Тогда 
					
					СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+ 
					                  " указано некорректное налоговое назначение доходов! " + 
					                  "Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"".";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЭтоЗатраты ИЛИ (ЕстьКолонкаСчетУчетаБУ И НЕ УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаТаблицы.СчетУчетаБУ)) Тогда
					
				Если СтруктураШапкиДокумента.ЕстьНДС Тогда
					
					Если СтрокаТаблицы.НалоговоеНазначение = НехозВНД_НДС Тогда	
					// запасы с налоговым назначением «Необл., нехоз» можно продавать по ставкам «Без НДС», «Не НДС»
					// при этом выдаем предупреждение, но документ проводить разрешаем 
					
					
						Если ЕстьКолонкаСтавкаНДС И ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) 
							И (СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС ИЛИ СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС)
							Тогда
							
							СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+ 
							                  " реализация по виду налоговой деятельности ""Не хозяйственная деятельность""";
							
							ОбщегоНазначения.Сообщение(СтрокаСообщения, Перечисления.ВидыСообщений.Информация, Заголовок);
							
						Иначе 
							
							СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+ 
							                  " указано некорректное налоговое назначение (НДС)! " + 
							                  "Вид налоговой деятельности при реализации не может быть ""Не хозяйственной деятельностью"", если ставка НДС не ""Без НДС"" или ""Не НДС"".";
							
							ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
							
						КонецЕсли;
						
					Иначе
								     
						Если ЕстьКолонкаСтавкаНДС
							И ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС)
						    И НЕ СтрокаТаблицы.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая
						    И НЕ СтрокаТаблицы.ВидДеятельностиНДС = НалоговыйУчетПовтИсп.ПолучитьВидДеятельностиНДС(СтрокаТаблицы.СтавкаНДС, ДопПараметрыОпределенияВДНДС) 
						    И НЕ ЭтоКомиссия Тогда
							   
							Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
							   
							   	СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+ 
								                  " указано некорректное налоговое назначение (НДС)! " + 
								                  "Оно не соответствует ставке НДС, указанной в строке.";
								   
						   	Иначе	
							   
								СтрокаСообщения = ?(ЭтоПроверкаШапки, "В документе", "В табличной части " + ИмяТабличнойЧасти + " в строке " + СтрокаТаблицы.НомерСтроки)+ 
								                  " указано некорректное налоговое назначение (НДС)! " + 
								                  "Вид деятельности НДС должен быть ""Необлагаемая"".";
								   
							КонецЕсли;
							
							ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
							   
						КонецЕсли;
							
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
		

КонецПроцедуры // ПроверитьЗаполнениеНалоговыхНазначений()

Функция ПолучитьСуммуКорректировкиНалоговогоКредита(
	НалоговоеНазначение,
	НалоговоеНазначениеНовое,
	НДСВходящий,
	НДСКредит,
	СтоимостьБУ
	) Экспорт
	
	СтруктураВозврата = Новый Структура("ЕстьКорректировки", Ложь);

	Если НалоговоеНазначение = НалоговоеНазначениеНовое Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(НалоговоеНазначение) ИЛИ НЕ ЗначениеЗаполнено(НалоговоеНазначениеНовое) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;	
	
	ГруппаСтарая = НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(НалоговоеНазначение);
	ГруппаНовая  = НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(НалоговоеНазначениеНовое);
	
	Если ГруппаСтарая = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоНКУ 
		ИЛИ ГруппаНовая = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоНКУ
		Тогда
		// "старые" налоговые назначения не корректируем
		Возврат СтруктураВозврата;	
	КонецЕсли; 
	
	Если ГруппаСтарая = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат Тогда
		// с налоговых назначений доходов и затрат не корректируем
		Возврат СтруктураВозврата;	
	КонецЕсли;	
	
	Если ГруппаНовая = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат Тогда
		Если НалоговоеНазначениеНовое <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
			// на налоговые назначений доходов и затрат можем корректировать только на не хоз. деятельность
			Возврат СтруктураВозврата;
		ИначеЕсли НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
		    // Необл. НДС, нехоз. на Нехоз. д-сть не корректируется
			Возврат СтруктураВозврата;
		Иначе	
			// не хоз. деятельность не имеет права на налоговый кредит
			ЕстьПравоНаНалоговыйКредитПоФакту = Ложь;
		КонецЕсли; 
	ИначеЕсли НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
		// пропорциональное налоговое назначение обрабатываем отдельно
		// Если налоговое назначение затрат обл. НДС или необл. НДС, хоз. – не должна формироваться корректировка
		Если НалоговоеНазначениеНовое = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая
			ИЛИ НалоговоеНазначениеНовое = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность
			Тогда
			
			Возврат СтруктураВозврата;
			
		Иначе
			// Если налоговое назначение затрат необл. НДС, нехоз. или нехоз. -  нужна корректировка.
			ЕстьПравоНаНалоговыйКредитПоФакту = НалоговыйУчетПовтИсп.ЕстьПравоНаНалоговыйКредит(НалоговоеНазначениеНовое);
		КонецЕсли; 
	Иначе
		ЕстьПравоНаНалоговыйКредитПоФакту = НалоговыйУчетПовтИсп.ЕстьПравоНаНалоговыйКредит(НалоговоеНазначениеНовое);
	КонецЕсли;
	
	Если ЕстьПравоНаНалоговыйКредитПоФакту Тогда
		НДСКредитПоФакту = НДСВходящий;
	Иначе
		НДСКредитПоФакту = 0;
	КонецЕсли;
	
	// корректировки по налоговому кредиту
	КорректировкаНДСКредит = НДСКредитПоФакту - НДСКредит;
	
	ЕстьПравоНаНалоговыйКредит = НалоговыйУчетПовтИсп.ЕстьПравоНаНалоговыйКредит(НалоговоеНазначение);
	ВосстановлениеНДС = (НЕ ЕстьПравоНаНалоговыйКредит И ЕстьПравоНаНалоговыйКредитПоФакту);
	
	// стоимость сторнируем только когда восстанавливаем НДС
	Если ВосстановлениеНДС Тогда
		СуммаКорректировкиСтоимость   = - КорректировкаНДСКредит;
		СуммаКорректировкиСтоимостьНУ = - КорректировкаНДСКредит;
		// при этом при восстановлении с не обл. НДС не хоз. деятельность восстанавливаем СуммуНУ равной СуммеБУ
		// (при поступлении на не обл. НДС не хоз. деятельность СуммаНУ = 0)
		Если НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			СуммаКорректировкиСтоимостьНУ = СуммаКорректировкиСтоимостьНУ + СтоимостьБУ;	
		КонецЕсли;	
	Иначе
		СуммаКорректировкиСтоимость   = 0;
		СуммаКорректировкиСтоимостьНУ = 0;
	КонецЕсли;
	
	Если КорректировкаНДСКредит = 0 И СуммаКорректировкиСтоимость = 0 И СуммаКорректировкиСтоимостьНУ = 0 Тогда
		СтруктураВозврата.ЕстьКорректировки      = Ложь;
	Иначе	
		СтруктураВозврата.ЕстьКорректировки      = Истина;
		СтруктураВозврата.Вставить("ВосстановлениеНДС",             ВосстановлениеНДС);
		СтруктураВозврата.Вставить("КорректировкаНДСКредит",        КорректировкаНДСКредит);
		СтруктураВозврата.Вставить("НДСКредитПоФакту",              НДСКредитПоФакту);
		СтруктураВозврата.Вставить("СуммаКорректировкиСтоимость",   СуммаКорректировкиСтоимость);
		СтруктураВозврата.Вставить("СуммаКорректировкиСтоимостьНУ", СуммаКорректировкиСтоимостьНУ);
	КонецЕсли;	
	
	Возврат СтруктураВозврата;

КонецФункции // ПолучитьСуммуКорректировкиНалоговогоКредита()

Процедура ПроверитьНалоговыеНазначенияПриВыпускеПродукции(
	ИмяТабличнойЧасти,
	НомерСтроки,
	Отказ, 
	Заголовок,
	НалоговоеНазначение,
	СчетЗатратПолучатель = Неопределено,
	НалоговоеНазначениеДоходовИЗатрат = Неопределено,
	ЕстьНаправленияСписания = Ложь,
	НомерСтрокиНаправления = 0
	) Экспорт
	
	
	// проверим, что не указаны старые налоговые назначения
	Если НалоговыйУчетПовтИсп.ЭтоНеиспользуемоеНалоговоеНазначение(НалоговоеНазначение) Тогда
		СтрокаСообщения = "В табличной части """ + ИмяТабличнойЧасти + """ в строке " + НомерСтроки + 
		" ошибочно указано используемое до 01.04.2011 налоговое назначение продукции!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(НалоговоеНазначениеДоходовИЗатрат) И НалоговыйУчетПовтИсп.ЭтоНеиспользуемоеНалоговоеНазначение(НалоговоеНазначениеДоходовИЗатрат) Тогда
		СтрокаСообщения = "В табличной части """ + ИмяТабличнойЧасти + """ в строке " + НомерСтроки + 
		" ошибочно указано используемое до 01.04.2011 налоговое назначение затрат-получателя!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;	
	
	Если Отказ Тогда
		// если есть "старые" налоговые назначения - дальнейшие проверки не имеют смысла
		Возврат;
	КонецЕсли; 
	
	
	Если НЕ ЗначениеЗаполнено(НалоговоеНазначениеДоходовИЗатрат) ИЛИ НЕ ЗначениеЗаполнено(СчетЗатратПолучатель) Тогда
		Возврат;
	КонецЕсли; 
	
	// Контролируем соответствие группы НалоговоеНазначениеДоходовИЗатрат счету затрат-получателю
	ГруппаСчетаЗатрат = НалоговыйУчетПовтИсп.ОпределитьГруппуНалоговогоНазначенияПоСчету(СчетЗатратПолучатель);
	ГруппаНалоговоеНазначениеДоходовИЗатрат = НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(НалоговоеНазначениеДоходовИЗатрат);
	
	Если ГруппаСчетаЗатрат <> ГруппаНалоговоеНазначениеДоходовИЗатрат Тогда
		Если ЕстьНаправленияСписания Тогда
			СтрокаСообщения = "В табличной части """ + ИмяТабличнойЧасти + """ в строке " + НомерСтроки + 
			" налоговое назначение затрат-получателя не соответствует счету затрат-получателю в направлениях списания для строки " + НомерСтрокиНаправления + " !";
		Иначе
			СтрокаСообщения = "В табличной части """ + ИмяТабличнойЧасти + """ в строке " + НомерСтроки + 
			" налоговое назначение затрат-получателя не соответствует счету затрат-получателю !";
		КонецЕсли;	
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		
		Возврат;
		
	КонецЕсли; 
	
	
	// при производстве продукции налоговые назначения продукции и затрат-получателя могут быть:
	// - одинаковые (НДС). Если нн-получатель НДС и не равен нн-продукции - ошибка
    // - продукции любая, кроме «Необл. НДС, нехоз», затрат любая, кроме «нехоз»
    // - продукции «Необл. НДС, нехоз», затрат «нехоз»
	
	ПроверкаПройдена = Ложь;
	
	Если НалоговоеНазначение = НалоговоеНазначениеДоходовИЗатрат Тогда
		ПроверкаПройдена = Истина;
	Иначе
		Если ГруппаНалоговоеНазначениеДоходовИЗатрат = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС Тогда
			
			ПроверкаПройдена = Ложь;
			
		ИначеЕсли НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность
			И НалоговоеНазначениеДоходовИЗатрат <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
		
			Тогда 
		
			ПроверкаПройдена = Истина;			
			
		ИначеЕсли 
			НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность
			И НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
		
			Тогда 
		
			ПроверкаПройдена = Истина;
			
		КонецЕсли; 
		
	КонецЕсли; 	
		
	Если НЕ ПроверкаПройдена Тогда
		Если ЕстьНаправленияСписания Тогда
			СтрокаСообщения = "В табличной части """ + ИмяТабличнойЧасти + """ в строке " + НомерСтроки + 
			" налоговое назначение продукции не соответствует налоговому назначению затрат-получателя в направлениях списания для строки " + НомерСтрокиНаправления + " !";
		Иначе
			СтрокаСообщения = "В табличной части """ + ИмяТабличнойЧасти + """ в строке " + НомерСтроки + 
			" налоговое назначение продукции не соответствует налоговому назначению затрат-получателя!";
		КонецЕсли;	
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;	
	

КонецПроцедуры

Процедура ЗаполнитьПризнакАмортизируетсяПриПоступлении(
	ТаблицаПоТоварам = Неопределено,
	ТаблицаПоТаре  = Неопределено,
	ТаблицаПоУслугам =  Неопределено,
	ТаблицаПоОборудованию  = Неопределено,
	ТаблицаПоОбъектамСтроительства = Неопределено,
	ТаблицаПоБланкам = Неопределено,
	ИмяРеквизитаСчетЗатрат = "СчетЗатрат"
	) Экспорт
	
	// для товаров, тары, бланков - всегда не амортизируется
	Если ТаблицаПоТоварам <> Неопределено Тогда
		ТаблицаПоТоварам.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
		ТаблицаПоТоварам.ЗаполнитьЗначения(Ложь, "Амортизируется");
	КонецЕсли; 
	Если ТаблицаПоТаре <> Неопределено Тогда
		ТаблицаПоТаре.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
		ТаблицаПоТаре.ЗаполнитьЗначения(Ложь, "Амортизируется");
	КонецЕсли; 
	Если ТаблицаПоБланкам <> Неопределено Тогда
		ТаблицаПоБланкам.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
		ТаблицаПоБланкам.ЗаполнитьЗначения(Ложь, "Амортизируется");
	КонецЕсли; 
	
	// для оборудования, объектов строительства - всегда амортизируется
	Если ТаблицаПоОборудованию <> Неопределено Тогда
		ТаблицаПоОборудованию.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
		ТаблицаПоОборудованию.ЗаполнитьЗначения(Истина, "Амортизируется");
	КонецЕсли; 
	Если ТаблицаПоОбъектамСтроительства <> Неопределено Тогда
		ТаблицаПоОбъектамСтроительства.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
		ТаблицаПоОбъектамСтроительства.ЗаполнитьЗначения(Истина, "Амортизируется");
	КонецЕсли; 
	
	// для услуг - только для характера затрат БУ ВложенияВоВнеоборотныеАктивы
	Если ТаблицаПоУслугам <> Неопределено Тогда
		ТаблицаПоУслугам.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));
		Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
			ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТаблицы[ИмяРеквизитаСчетЗатрат], Неопределено);
			СтрокаТаблицы.Амортизируется = (ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы);
		КонецЦикла; 
	КонецЕсли;	

КонецПроцедуры

Процедура ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
	ВидОперации,
	Дата,
	Организация,
	ТабличнаяЧастьТовары               = Неопределено,
	ТабличнаяЧастьВозвратнаяТара       = Неопределено,
	ТабличнаяЧастьУслуги               = Неопределено,
	ТабличнаяЧастьОборудование         = Неопределено,
	ТабличнаяЧастьОбъектыСтроительства = Неопределено,
	ТабличнаяЧастьБланкиСтрогогоУчета  = Неопределено,
	ИмяРеквизитаСчетЗатрат = "СчетЗатрат",
	ИмяРеквизитаСубконто = "Субконто",
	НеЗаполнятьНалоговоеНазначение = Ложь
	) Экспорт
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	Если УчетнаяПолитика = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЕстьНДС            = УчетнаяПолитика.ЕстьНДС;
	ЕстьНалогНаПрибыль = УчетнаяПолитика.ЕстьНалогНаПрибыль;
	
	Если ЕстьНДС И ЕстьНалогНаПрибыль Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнятьНалоговоеНазначениеДоходовИЗатрат = (НЕ ЕстьНалогНаПрибыль) И 
	(ВидОперации = "Реализация");
	
	УслугиПоступление = (НЕ ЕстьНалогНаПрибыль) И (ВидОперации = "Поступление");
	
	УслугиРеализация = (НЕ ЕстьНалогНаПрибыль) И 
	(ВидОперации = "Реализация");
	
	ЭтоРеализация = (ВидОперации = "Реализация");
	
	НалоговоеНазначениеНеПлательщикНДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;  
	НалоговоеНазначениеНеПлательщикНалогаНаПрибыль = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
	
	Если ТабличнаяЧастьТовары <> Неопределено Тогда
		Если Не ЕстьНДС Тогда
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьТовары Цикл
			    СтрокаТабличнойЧасти.НалоговоеНазначение = НалоговоеНазначениеНеПлательщикНДС;
			КонецЦикла; 
		КонецЕсли; 
		Если ЗаполнятьНалоговоеНазначениеДоходовИЗатрат Тогда
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьТовары Цикл
			    СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеНеПлательщикНалогаНаПрибыль;
			КонецЦикла; 
		КонецЕсли;	
	КонецЕсли; 
	
	Если ТабличнаяЧастьВозвратнаяТара <> Неопределено Тогда
		Если Не ЕстьНДС Тогда
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьВозвратнаяТара Цикл
			    СтрокаТабличнойЧасти.НалоговоеНазначение = НалоговоеНазначениеНеПлательщикНДС;
			КонецЦикла; 
		КонецЕсли; 
		Если ЗаполнятьНалоговоеНазначениеДоходовИЗатрат Тогда
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьВозвратнаяТара Цикл
			    СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеНеПлательщикНалогаНаПрибыль;
			КонецЦикла; 
		КонецЕсли;	
	КонецЕсли; 
	
	Если ТабличнаяЧастьОборудование <> Неопределено Тогда
		Если Не ЕстьНДС Тогда
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьОборудование Цикл
			    СтрокаТабличнойЧасти.НалоговоеНазначение = НалоговоеНазначениеНеПлательщикНДС;
			КонецЦикла; 
		КонецЕсли; 
		Если ЗаполнятьНалоговоеНазначениеДоходовИЗатрат Тогда
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьОборудование Цикл
			    СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеНеПлательщикНалогаНаПрибыль;
			КонецЦикла; 
		КонецЕсли;	
	КонецЕсли; 
	
	Если ТабличнаяЧастьОбъектыСтроительства <> Неопределено Тогда
		Если Не ЕстьНДС Тогда
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьОбъектыСтроительства Цикл
			    СтрокаТабличнойЧасти.НалоговоеНазначение = НалоговоеНазначениеНеПлательщикНДС;
			КонецЦикла; 
		КонецЕсли; 
		Если ЗаполнятьНалоговоеНазначениеДоходовИЗатрат Тогда
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьОбъектыСтроительства Цикл
			    СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеНеПлательщикНалогаНаПрибыль;
			КонецЦикла; 
		КонецЕсли;	
	КонецЕсли; 
	
	Если ТабличнаяЧастьБланкиСтрогогоУчета <> Неопределено Тогда
		Если Не ЕстьНДС Тогда
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьБланкиСтрогогоУчета Цикл
			    СтрокаТабличнойЧасти.НалоговоеНазначение = НалоговоеНазначениеНеПлательщикНДС;
			КонецЦикла; 
		КонецЕсли; 
		Если ЗаполнятьНалоговоеНазначениеДоходовИЗатрат Тогда
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьБланкиСтрогогоУчета Цикл
			    СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеНеПлательщикНалогаНаПрибыль;
			КонецЦикла; 
		КонецЕсли;	
	КонецЕсли; 
	
	Если ТабличнаяЧастьУслуги <> Неопределено Тогда
		Если (Не ЕстьНДС) И (НЕ ЭтоРеализация) И (НЕ НеЗаполнятьНалоговоеНазначение) Тогда
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьУслуги Цикл
			    СтрокаТабличнойЧасти.НалоговоеНазначение = НалоговоеНазначениеНеПлательщикНДС;
			КонецЦикла; 
		КонецЕсли; 
		Если УслугиРеализация Тогда
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьУслуги Цикл
			    СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеНеПлательщикНалогаНаПрибыль;
			КонецЦикла; 
		ИначеЕсли УслугиПоступление Тогда
			ЕстьСубконто = ЗначениеЗаполнено(ИмяРеквизитаСубконто);
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьУслуги Цикл
				
				Если ЕстьСубконто Тогда
					Субконто1 = СтрокаТабличнойЧасти[ИмяРеквизитаСубконто+"1"];
					Субконто2 = СтрокаТабличнойЧасти[ИмяРеквизитаСубконто+"2"];
					Субконто3 = СтрокаТабличнойЧасти[ИмяРеквизитаСубконто+"3"];
				Иначе
					Субконто1 = Неопределено;
					Субконто2 = Неопределено;
					Субконто3 = Неопределено;
				КонецЕсли; 
				
				ГруппаНалоговогоНазначенияЗатрат = НалоговыйУчетПовтИсп.ОпределитьГруппуНалоговогоНазначенияЗатрат(
					СтрокаТабличнойЧасти[ИмяРеквизитаСчетЗатрат], 
					Субконто1, 
					Субконто2, 
					Субконто3
				);
				
				Если ГруппаНалоговогоНазначенияЗатрат = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС Тогда
					Если Не ЕстьНДС Тогда
			    		СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеНеПлательщикНДС;
					Иначе
						// пользователь сам должен указать НалоговоеНазначениеДоходовИЗатрат
					КонецЕсли;	
				Иначе
					СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеНеПлательщикНалогаНаПрибыль;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента()

Процедура ЗаполнитьНалоговыеНазначенияВШапкеПередЗаписьюДокумента(
	ДокументОбъект,
	ИмяРеквизитаСчетЗатрат = "СчетДт",
	ИмяРеквизитаСубконто = "СубконтоДт",
	ЕстьРеквизитНалоговоеНазначение = Ложь
	) Экспорт
	
	Если НЕ ДокументОбъект[ИмяРеквизитаСчетЗатрат].НалоговыйУчет Тогда
		ДокументОбъект.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		Если ЕстьРеквизитНалоговоеНазначение Тогда
			ДокументОбъект.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЕсли; 
		Возврат;
	КонецЕсли;	
	
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДокументОбъект.Дата, ДокументОбъект.Организация);
	Если УчетнаяПолитика = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЕстьНДС            = УчетнаяПолитика.ЕстьНДС;
	ЕстьНалогНаПрибыль = УчетнаяПолитика.ЕстьНалогНаПрибыль;
	
	Если ЕстьНДС И ЕстьНалогНаПрибыль Тогда
		Возврат;
	КонецЕсли; 
	
	//ЗаполнятьНалоговоеНазначениеДоходовИЗатрат = (НЕ ЕстьНалогНаПрибыль) И 
	//(ВидОперации = "Реализация");
	//
	//УслугиПоступление = (НЕ ЕстьНалогНаПрибыль) И (ВидОперации = "Поступление");
	//
	//УслугиРеализация = (НЕ ЕстьНалогНаПрибыль) И 
	//(ВидОперации = "Реализация");
	//
	//ЭтоРеализация = (ВидОперации = "Реализация");
	
	НалоговоеНазначениеНеПлательщикНДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;  
	НалоговоеНазначениеНеПлательщикНалогаНаПрибыль = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
	
	ЕстьСубконто = ЗначениеЗаполнено(ИмяРеквизитаСубконто);
		
	Если ЕстьСубконто Тогда
		Субконто1 = ДокументОбъект[ИмяРеквизитаСубконто+"1"];
		Субконто2 = ДокументОбъект[ИмяРеквизитаСубконто+"2"];
		Субконто3 = ДокументОбъект[ИмяРеквизитаСубконто+"3"];
	Иначе
		Субконто1 = Неопределено;
		Субконто2 = Неопределено;
		Субконто3 = Неопределено;
	КонецЕсли; 
				
	ГруппаНалоговогоНазначенияЗатрат = НалоговыйУчетПовтИсп.ОпределитьГруппуНалоговогоНазначенияЗатрат(
		ДокументОбъект[ИмяРеквизитаСчетЗатрат], 
		Субконто1, 
		Субконто2, 
		Субконто3
	);
				
	Если ГруппаНалоговогоНазначенияЗатрат = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС Тогда
		Если Не ЕстьНДС Тогда
    		ДокументОбъект.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеНеПлательщикНДС;
		Иначе
			// пользователь сам должен указать НалоговоеНазначениеДоходовИЗатрат, НалоговоеНазначение
		КонецЕсли;	
	Иначе
		Если НЕ ЕстьНалогНаПрибыль Тогда
			ДокументОбъект.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеНеПлательщикНалогаНаПрибыль;
		Иначе
			// пользователь сам должен указать НалоговоеНазначениеДоходовИЗатрат
		КонецЕсли;	
	КонецЕсли;
	
	Если ЕстьРеквизитНалоговоеНазначение И Не ЕстьНДС Тогда
		ДокументОбъект.НалоговоеНазначение = НалоговоеНазначениеНеПлательщикНДС;	
	КонецЕсли; 

	
КонецПроцедуры // ЗаполнитьНалоговыеНазначенияВШапкеПередЗаписьюДокумента()

