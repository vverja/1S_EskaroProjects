Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт
	  //СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	  Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ
	                 |	ЗаданиеНаРаботуИзменения.Ссылка КАК Документ
	                 |ИЗ
	                 |	Документ.ЗаданиеНаРаботу.Изменения КАК ЗаданиеНаРаботуИзменения
	                 |ГДЕ
	                 |	ЗаданиеНаРаботуИзменения.Ссылка.Исполнитель = &Исполнитель
	                 |	И (ЗаданиеНаРаботуИзменения.Ссылка.ВремяОкончанияОбработки = ДАТАВРЕМЯ(1, 1, 1)
	                 |			ИЛИ ЗаданиеНаРаботуИзменения.Ссылка.ИспользуемУпаковочныйЛист = ИСТИНА
	                 |				И (ЗаданиеНаРаботуИзменения.Ссылка.Дата МЕЖДУ &ДАТА1 И &ДАТА2))
	                 |
	                 |ОБЪЕДИНИТЬ
	                 |
	                 |ВЫБРАТЬ
	                 |	ИнвентаризацияИзменения.Ссылка
	                 |ИЗ
	                 |	Документ.Инвентаризация.Изменения КАК ИнвентаризацияИзменения
	                 |ГДЕ
	                 |	ИнвентаризацияИзменения.Ссылка.Планшет.Работник = &Исполнитель
	                 |	И ИнвентаризацияИзменения.Ссылка.Дата МЕЖДУ &ДАТА1 И &ДАТА2";
	  Запрос.УстановитьПараметр("Исполнитель", УзелОбмена.Работник);
	  Запрос.УстановитьПараметр("Дата1", НачалоМесяца(ТекущаяДата()));
	  Запрос.УстановитьПараметр("Дата2", ТекущаяДата());
	  РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	  
	   
	 Для каждого строка Из РезультатЗапроса Цикл
		  ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,Строка.Документ); 
	 КонецЦикла;
КонецПроцедуры
  
Функция СформироватьПакетОбмена(УзелОбмена) Экспорт
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	ХранилищеФайла = Справочники.ХранилищеДополнительнойИнформации.НайтиПоНаименованию("XSD");
	Файл = ХранилищеФайла.Хранилище.Получить();
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	ПутьКФайлу = КаталогВременныхФайлов() + Строка(ГСЧ.СлучайноеЧисло(1,1000)) + "Mobile.XSD";
	Файл.Записать(ПутьКФайлу);
	Фабрика = СоздатьФабрикуXDTO(ПутьКФайлу);
	УдалитьФайлы(ПутьКФайлу);
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	
	Пока ВыборкаИзменений.Следующий() Цикл
		Данные = ВыборкаИзменений.Получить();
		Если Не НуженПереносДанных(Данные, УзелОбмена) Тогда
			Если ТипЗнч(Данные) = Тип("ДокументОбъект.Инвентаризация") Тогда
				Продолжить;
			КонецЕсли;
			УдалениеДанных(Данные);
		КонецЕсли; 
		ЗаписатьДанные(ЗаписьXML, Данные, Фабрика);
	КонецЦикла; 
	ЗаписьСообщения.ЗакончитьЗапись();
	Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
	
КонецФункции

Функция НуженПереносДанных(Данные, УзелОбмена)
	Перенос = Истина;
	Если Не ЗначениеЗаполнено(УзелОбмена.Работник) Тогда 
		Перенос = Ложь;
	КонецЕсли;	
	Если ТипЗнч(Данные) = Тип("ДокументОбъект.ЗаданиеНаРаботу") Тогда
		Если Данные.Исполнитель <> УзелОбмена.Работник Тогда
			Перенос = Ложь;
		КонецЕсли;
		Если (Данные.ВидЗадания = "Проверка" И УзелОбмена.ТипРаботника = "Кладовщик") ИЛИ Данные.ВидЗадания = "Приемка" ИЛИ Данные.ВидЗадания = "Премещение" Тогда
			Если ЗначениеЗаполнено(Данные.Исполнитель) И Данные.Исполнитель <> УзелОбмена.Работник Тогда
				Перенос = Ложь;
			Иначе 
				Перенос = Истина;
			КонецЕсли; 	
		КонецЕсли; 
	КонецЕсли;
	Если ТипЗнч(Данные) = Тип("ДокументОбъект.Инвентаризация") Тогда
		Если УзелОбмена <> Данные.Планшет Тогда
			Перенос = Ложь;				
		КонецЕсли; 	
	КонецЕсли;

	Возврат Перенос;
КонецФункции

Процедура УдалениеДанных(Данные) Экспорт
	// Получаем объект описания метаданного, соответствующий данным.
	ОбъектМетаданных = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"),
	Данные.Ссылка.Метаданные(), Данные.Метаданные());
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		// Перенос удаления объекта для объектных
		Данные = Новый УдалениеОбъекта(Данные.Ссылка);
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		// Очищаем данные.
		Данные.Очистить();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьДанные(ЗаписьXML, Данные, Фабрика)
	Если ТипЗнч(Данные) = Тип("ДокументОбъект.Инвентаризация") Тогда
			ТипXML = Фабрика.Тип("http://v8.1c.ru/8.1/data/enterprise/current-config","DocumentObject.Инвентаризация");
			Объект = Фабрика.Создать(ТипXML);
			Объект.Ref = Данные.Ссылка.УникальныйИдентификатор();
			Объект.DeletionMark =  Данные.ПометкаУдаления;
			Объект.Date = Данные.Дата;
			Объект.Number = Данные.Номер;
			Объект.Posted = Данные.Проведен;
			Объект.ПовторнаяВыгрузка = Данные.ПовторнаяВыгрузка;
			Объект.Исполнитель = Данные.Планшет.Работник;
			Объект.ЧленКомиссии = Данные.ИсполнительИнвентаризации.Наименование;
			Объект.Склад = Данные.Склад.Наименование; 
			Объект.ВремяНачалообработки = Дата(1, 1, 1);
			Объект.ВремяОкончанияОбработки = Дата(1, 1, 1);
			Объект.Комментарий = "Выгрузка в планшет " + ТекущаяДата() + " " + Данные.Комментарий;
			Если Данные.ПечатьСПустымиЯчейками Тогда
				Товары = СформироватьТаблицуТоваров(Данные.Ссылка);
			Иначе
				Товары =  Данные.Товары; 
			КонецЕсли; 
			Для каждого Строка Из Товары Цикл
				СтрокаОбъект = Фабрика.Создать(Фабрика.Тип("http://v8.1c.ru/8.1/data/enterprise/current-config", "DocumentTabularSectionRow.Инвентаризация.ТМЦ"));
				Если Данные.ПовторнаяВыгрузка Тогда
					Если Строка.ОтклонениеЕХО <> 0 ИЛИ Строка.ОтклонениеКоробок <> 0 ИЛИ Строка.ОтклонениеПаллет <> 0 Тогда
						СтрокаОбъект.КодНоменклатуры = Строка.Номенклатура.Код;
						СтрокаОбъект.Номенклатура = Строка.Номенклатура.Наименование;
						СтрокаОбъект.Ячейка = Строка.УчетнаяЯчейка.Наименование;
						СтрокаОбъект.Количество =  0;
						СтрокаОбъект.Примечание =  Строка.Примечание;
						Объект.ТМЦ.Добавить(СтрокаОбъект);	
					КонецЕсли; 					 
				Иначе
					СтрокаОбъект.КодНоменклатуры = Строка.Номенклатура.Код;
					СтрокаОбъект.Номенклатура = Строка.Номенклатура.Наименование;
					СтрокаОбъект.Ячейка = Строка.УчетнаяЯчейка.Наименование;
					СтрокаОбъект.Количество =  0;
					СтрокаОбъект.Примечание =  Строка.Примечание;
					Объект.ТМЦ.Добавить(СтрокаОбъект);
				КонецЕсли;
			КонецЦикла;
			Фабрика.ЗаписатьXML(ЗаписьXML, Объект);
		Иначе//Если ТипЗнч(Данные) = Тип("ДокументОбъект.ЗаданиеНаРаботу") Тогда
			//Док = Данные.Ссылка.ПолучитьОбъект();
			//Док.Выгружен = Истина;
			//Док.Записать(РежимЗаписиДокумента.Запись);
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);	
		КонецЕсли;
КонецПроцедуры

Функция ПринятьПакетОбмена(УзелОбмена, ДанныеОбмена) Экспорт
	РезультатОбработки = "";
	ЧтениеXML = Новый ЧтениеXML;
	XMLСтрока = ДанныеОбмена.Получить();
	ЧтениеXML.УстановитьСтроку(XMLСтрока);
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	Попытка
		ЧтениеСообщения.НачатьЧтение(ЧтениеXML);	
	Исключение
		ЧтениеСообщения.ЗакончитьЧтение();
	    ЧтениеXML.Закрыть();
		Возврат Ложь;
	КонецПопытки; 	
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель,ЧтениеСообщения.НомерПринятого);
	//НачатьТранзакцию();
	Пока ЧтениеXML.ТипУзла<>ТипУзлаXML.КонецЭлемента Цикл
		Данные = ПрочитатьДанные(ЧтениеXML);
		Если Не Данные = Неопределено Тогда
			// Не переносим изменение, полученное от планшета, если есть регистрация
			// изменения в офисе.
			Если Не ПринятьИзменения(ЧтениеСообщения.Отправитель, Данные, РезультатОбработки) Тогда
				Продолжить;
			КонецЕсли;
			Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			Данные.ОбменДанными.Загрузка = Истина;
			Данные.Записать();
			//Здесь мы запускаем функцию внесения изменений в документы Примека и Отбор
			//Это задания с типом приемка, проверка, перемещение
			Если ТипЗнч(Данные) = Тип("ДокументОбъект.ЗаданиеНаРаботу")	
						И ЗначениеЗаполнено(Данные.ВремяОкончанияОбработки) Тогда
				ОбработкаЗаданийНаРаботу(Данные);	
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	//ЗафиксироватьТранзакцию();
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	Возврат РезультатОбработки;
КонецФункции
 
Функция ПрочитатьДанные(ЧтениеXML)
	ТипXML = ПолучитьXMLТип(ЧтениеXML); 

	Если ТипXML = Неопределено Тогда 
		Возврат Неопределено; 
	КонецЕсли; 
	ХранилищеФайла = Справочники.ХранилищеДополнительнойИнформации.НайтиПоНаименованию("XSD");
	Файл = ХранилищеФайла.Хранилище.Получить();
	ПутьКФайлу = КаталогВременныхФайлов() + "Mobile.XSD";
	Файл.Записать(ПутьКФайлу);
	Фабрика = СоздатьФабрикуXDTO(ПутьКФайлу);
    ТипXDTO = Фабрика.Тип("http://v8.1c.ru/8.1/data/enterprise/current-config",ТипXML.ИмяТипа);
	Если ТипXML.ИмяТипа = "DocumentObject.Инвентаризация" Тогда
		ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML,ТипXDTO);
		Документ = Документы.Инвентаризация.ПолучитьСсылку(ОбъектXDTO.Ref.УникальныйИдентификатор());
		Если Документ.Статус = Перечисления.СтатусыСкладскихПеремещений.Завершено Тогда
			Возврат Неопределено;
		Иначе
			ДокументОбъект = Документ.ПолучитьОбъект();
			
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	СкладскиеЯчейки.Ссылка
				               |ИЗ
				               |	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
				               |ГДЕ
				               |	СкладскиеЯчейки.Наименование = &Наименование
				               |	И СкладскиеЯчейки.Владелец = &Владелец";

			Для к=0 По ОбъектXDTO.ТМЦ.Количество()-1  Цикл
				
				Элемент = ОбъектXDTO.ТМЦ.Получить(к);
				Если Элемент.КодНоменклатуры ="" И Элемент.Примечание =""  Тогда
					Продолжить;
				КонецЕсли; 
				Запрос.УстановитьПараметр("Наименование", Элемент.Ячейка);
				Запрос.УстановитьПараметр("Владелец", ДокументОбъект.Склад);
				Ячейка = Запрос.Выполнить().Выгрузить();
				Если Ячейка.Количество()=0 Тогда
					Продолжить;
				КонецЕсли; 
				Элемент = ОбъектXDTO.ТМЦ.Получить(к);
				НайденнаяНоменклатура = Справочники.Номенклатура.НайтиПоКоду(Элемент.КодНоменклатуры);
				Отбор = Новый Структура("Номенклатура, УчетнаяЯчейка", НайденнаяНоменклатура, Ячейка[0].Ссылка);
				НайденнаяСтрока= ДокументОбъект.Товары.НайтиСтроки(Отбор);
												

				Если  НайденнаяСтрока.Количество() = 0  Тогда
					НоваяСтрока = ДокументОбъект.Товары.Добавить();
					НоваяСтрока.УчетнаяЯчейка = Ячейка[0].Ссылка;
					НоваяСтрока.УчетноеКоличествоЕХО = 0;
					НоваяСтрока.ФактическаяЯчейка = Ячейка[0].Ссылка;
					НоваяСтрока.ФактическоеКоличествоЕХО = Элемент.Количество;
					НоваяСтрока.ОтклонениеЕХО = 0 - Элемент.Количество;
					НоваяСтрока.Примечание = Элемент.Примечание;
				Иначе
					Если Элемент.КодНоменклатуры ="" Тогда
						НайденнаяСтрока [0].Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
						НайденнаяСтрока [0].ЕдиницаХраненияОстатков = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
						НайденнаяСтрока [0].Коэффициент = 0;
						НайденнаяСтрока [0].НомерПаллета = 0;
					КонецЕсли; 
					НайденнаяСтрока[0].ФактическоеКоличествоЕХО = Элемент.Количество;
					НайденнаяСтрока[0].ОтклонениеЕХО = НайденнаяСтрока[0].ФактическоеКоличествоЕХО - НайденнаяСтрока[0].УчетноеКоличествоЕХО;
					НайденнаяСтрока[0].Примечание = Элемент.Примечание;
				КонецЕсли;
			КонецЦикла;
			ДокументОбъект.Комментарий = "Документ был выгружен из планшета " +ТекущаяДата();
			ДокументОбъект.ПовторнаяВыгрузка = Ложь;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);

		КонецЕсли; 
		Возврат ДокументОбъект;
	Иначе//Если ТипXML.ИмяТипа = "DocumentObject.ЗаданиеНаРа боту" Тогда 
		Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);	
	КонецЕсли;
	Возврат Неопределено;

КонецФункции


Функция ПринятьИзменения(УзелОбмена, Данные, РезультатОбработки)
	Прием = Истина;
	Если ЗначениеЗаполнено(УзелОбмена.Работник) Тогда
		Если ТипЗнч(Данные)= Тип("ДокументОбъект.ЗаданиеНаРаботу")  Тогда
			Если НЕ Данные.ВидЗадания = "Отгрузка" Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ЗаданиеНаРаботу.ВремяНачалообработки,
				               |	ЗаданиеНаРаботу.ВремяОкончанияОбработки,
				               |	ЗаданиеНаРаботу.Ссылка,
				               |	ЗаданиеНаРаботу.Исполнитель
				               |ИЗ
				               |	Документ.ЗаданиеНаРаботу КАК ЗаданиеНаРаботу
				               |ГДЕ
				               |	ЗаданиеНаРаботу.Номер = &Номер
				               |	И ЗаданиеНаРаботу.Дата = &Дата";
				Запрос.УстановитьПараметр("Номер", Данные.Номер );
				Запрос.УстановитьПараметр("Дата", Данные.Дата );
				Док = Запрос.Выполнить().Выгрузить();
				Если Док.Количество() = 0 Тогда
					
					Возврат Ложь;
				КонецЕсли; 
				//Проверяем была ли начата проверка работы.
				Если ЗначениеЗаполнено(Док[0].ВремяНачалообработки) И Данные.Исполнитель <> Док[0].Исполнитель Тогда
					Прием = Ложь;
					РезультатОбработки = "Работа уже начата " + Док[0].Исполнитель ;
				КонецЕсли;
				//Проверяем есть ли еще не оконченные работы
				Если ЗначениеЗаполнено(Данные.ВремяОкончанияОбработки) И Данные.ВидЗадания = "Проверка" Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	ЗаданиеНаРаботу.Ссылка
					               |ИЗ
					               |	Документ.ЗаданиеНаРаботу КАК ЗаданиеНаРаботу
					               |ГДЕ
					               |	ЗаданиеНаРаботу.ДокументОснование = &ДокументОснование
					               |	И ЗаданиеНаРаботу.ВремяОкончанияОбработки = ДАТАВРЕМЯ(1, 1, 1)
					               |	И ЗаданиеНаРаботу.ВидЗадания = ""Отгрузка""";
					Запрос.УстановитьПараметр("ДокументОснование",Данные.ДокументОснование);
					НеоконченнаяРабота = Запрос.Выполнить().Выгрузить();
					Если НеоконченнаяРабота.Количество() > 0  Тогда
						Прием = Ложь;
						РезультатОбработки = "Не все работы еще выполнены";
					КонецЕсли; 					
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	Возврат Прием;
КонецФункции //ПринятьИзменения

//Обработка полученных заданий
Процедура ОбработкаЗаданийНаРаботу(ЗаданиеНаПроверку) Экспорт
	//ТипДокумента = Лев(ЗаданиеНаПроверку.ДокументОснование, 5);
    ТипДокумента = ЗаданиеНаПроверку.ВидЗадания;
	Если ТипДокумента = "Отгрузка" ИЛИ ЗаданиеНаПроверку.ВидЗадания = "Проверка" Тогда
		УИД = Новый УникальныйИдентификатор(ЗаданиеНаПроверку.УИД);
        Док = Документы.ОтборИОтгрузка.ПолучитьСсылку(УИД).ПолучитьОбъект();
       
		Если ЗаданиеНаПроверку.ВидЗадания = "Проверка" Тогда
            Если Док <> Неопределено Тогда
                Если Док.Статус = Перечисления.СтатусыСкладскихОтгрузок.Отгружено Тогда
                    Возврат;
                КонецЕсли; 
				ТЗ = ЗаданиеНаПроверку.Задание.Выгрузить();
				ТЗ.Свернуть("КодНоменклатуры","КоличествоФакт");
				Док.Статус = Перечисления.СтатусыСкладскихОтгрузок.Отгружено;
			    //ИЗМЕНЕНО Верескул Игорь(Начало 06.09.2019
				//В связи с тем что Номенклатура в отгрузке теперь может многократно повторятся
				//необходимо свернуть табличную часть отгрузка
				//Окончание)Верескул Игорь 
				Отгрузка = Док.Отгрузка.Выгрузить(,"Номенклатура, КоличествоКОтгрузке, КоличествоФактическиОтгруженное");
				Отгрузка.Свернуть("Номенклатура", "КоличествоКОтгрузке, КоличествоФактическиОтгруженное");
				Для каждого СтрокаОтбора Из Отгрузка Цикл
					НайденнаяСтрока = ТЗ.Найти(СтрокаОтбора.Номенклатура.Код,"КодНоменклатуры");		
                    //Ошибка Вариант несовпадения
                    Если НЕ ЗначениеЗаполнено(НайденнаяСтрока) Тогда
                        Продолжить;                    	
                    КонецЕсли;  
                    Если СтрокаОтбора.КоличествоКОтгрузке <> НайденнаяСтрока.КоличествоФакт  Тогда
						Для каждого СтрокаЗадачи Из ЗаданиеНаПроверку.Задание Цикл
							Для каждого Строка Из Док.Отбор Цикл
								Если Строка.Номенклатура.Код = СтрокаЗадачи.КодНоменклатуры
									И Строка.ЯчейкаПлан.Наименование = СтрокаЗадачи.ЯчейкаПлан Тогда
										Строка.Количество = СтрокаЗадачи.КоличествоФакт;	
								КонецЕсли; 	
							КонецЦикла; 
						КонецЦикла; 
						Док.Отклонение = Истина;
						Док.Статус = Перечисления.СтатусыСкладскихОтгрузок.Выполнение;
					КонецЕсли; 
					СтрокаОтбора.КоличествоФактическиОтгруженное = НайденнаяСтрока.КоличествоФакт;
				КонецЦикла;
				ОбработкаЗаданийНаРаботуФрагмент(Док, Отгрузка);
				Попытка
					Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
					//Мессенджер.ОтправкаСообщенияВТелеграм("Отбор " + Док.Номер + " от " +Док.Дата + " для "+ Док.Получатель +" " + Док.ТорговаяТочка + " завершен " + ТекущаяДата(), Док.Ответственный); 
				Исключение
				   	ЗаписьЖурналаРегистрации(ОписаниеОшибки(), УровеньЖурналаРегистрации.Ошибка, Док, Док.Ссылка, "Ошибка синхронизации " + ЗаданиеНаПроверку.Исполнитель); 
				КонецПопытки; 
			Иначе 
				ВызватьИсключение("Отбор не определен!");
			КонецЕсли;
		Иначе //Вид задания = отгрузка
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЗаданиеНаРаботу.Ссылка КАК Проверка
			               |ИЗ
			               |	Документ.ЗаданиеНаРаботу КАК ЗаданиеНаРаботу
			               |ГДЕ
			               |	ЗаданиеНаРаботу.УИД = &УИД
			               |	И ЗаданиеНаРаботу.ВидЗадания = ""Проверка""";
			Запрос.УстановитьПараметр("УИД", ЗаданиеНаПроверку.УИД);
			ДокументПроверок = Запрос.Выполнить().Выгрузить();
			Если ДокументПроверок.Количество()>0 Тогда
				Объект = ДокументПроверок[0].Проверка.ПолучитьОбъект();
				//Нюанс: Если кладовщик начал проверку паралельно с работой грузчика. 
  				//То грузчик не может вносить изменения в его документ
				Если ЗначениеЗаполнено(Объект.ВремяНачалообработки) Тогда
					Возврат;	
				КонецЕсли; 
				Для каждого Строка Из ЗаданиеНаПроверку.Задание Цикл
					Если Строка.Количество <> Строка.КоличествоФакт Тогда 
						Для каждого СтрокаЗадлания Из Объект.Задание Цикл
							Если СтрокаЗадлания.КодНоменклатуры = Строка.КодНоменклатуры 
								И СтрокаЗадлания.ЯчейкаПлан = Строка.ЯчейкаПлан Тогда
									СтрокаЗадлания.КоличествоФакт = Строка.КоличествоФакт;
							КонецЕсли; 
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Иначе
				//ВызватьИсключение("Проверка не определена!");	
			КонецЕсли; 
	  КонецЕсли; //ВидЗадания = "Проверка"
	ИначеЕсли ТипДокумента = "Приемка" Тогда 
	    УИД = Новый УникальныйИдентификатор(ЗаданиеНаПроверку.УИД);
	    Док = Документы.ПриемкаИРазмещение.ПолучитьСсылку(УИД).ПолучитьОбъект(); 
        Если Док <> Неопределено Тогда
            Док.Статус = Перечисления.СтатусыСкладскихПоступлений.Принято;
            ТаблицаОтклонений = Новый ТаблицаЗначений;
            ТаблицаОтклонений.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("Строка"));
            ТаблицаОтклонений.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
            Для каждого СтрокаЗадания Из ЗаданиеНаПроверку.Задание Цикл
                Если СтрокаЗадания.Ошибка Тогда
                    Для каждого СтрокаРазмещения Из Док.Размещение Цикл
                        Если СтрокаРазмещения.ЯчейкаПлан.Наименование = СтрокаЗадания.ЯчейкаПланКуда И 
                            СтрокаРазмещения.Номенклатура.Код = СтрокаЗадания.КодНоменклатуры Тогда
                            СтрокаРазмещения.Количество = СтрокаЗадания.КоличествоФакт;	
                            НС = ТаблицаОтклонений.Добавить();
                            НС.Номенклатура = СтрокаЗадания.КодНоменклатуры;
                            НС.Количество = СтрокаЗадания.КоличествоФакт;
                        КонецЕсли; 
                    КонецЦикла;
                    Док.Отклонение = Истина;
                КонецЕсли;  
            КонецЦикла; 
            Если Док.Отклонение Тогда
 	            ТаблицаОтклонений.Свернуть("Номенклатура", "Количество");
                Для каждого СтрокаОтклонений Из ТаблицаОтклонений Цикл
                    Для каждого СтрокаПриемки Из Док.Приемка Цикл
                    	Если СтрокаПриемки.Номенклатура.Код = СтрокаОтклонений.Номенклатура Тогда
                            СтрокаПриемки.КоличествоФактическиПринятое = СтрокаОтклонений.Количество;	
                        КонецЕсли; 
                    КонецЦикла; 	
                КонецЦикла; 
            КонецЕсли;             
            Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);		
		Иначе 
			ВызватьИсключение("Приемка не определена!");
		КонецЕсли;
	ИначеЕсли ТипДокумента = "Перемещение" Тогда
	  УИД = Новый УникальныйИдентификатор(ЗаданиеНаПроверку.УИД);
	  Док = Документы.ПеремещениеПоСкладу.ПолучитьСсылку(УИД).ПолучитьОбъект(); 
		Если Док <> Неопределено Тогда
			Для каждого СтрокаОтбора Из Док.Перемещение Цикл
				Для каждого СтрокаЗадлания Из ЗаданиеНаПроверку.Задание Цикл 
                    Если СтрокаОтбора.Номенклатура.Код = СтрокаЗадлания.КодНоменклатуры 
                        И СтрокаОтбора.ЯчейкаПланКуда = СтрокаЗадлания.ЯчейкаПланКуда
                        И  СтрокаОтбора.ЯчейкаПлан = СтрокаЗадлания.ЯчейкаПлан Тогда
						СтрокаОтбора.КоличествоФактическиПеремещенное =	СтрокаЗадлания.КоличествоФакт;			
					КонецЕсли; 		
				КонецЦикла; 	
			КонецЦикла;
			Док.Статус = Перечисления.СтатусыСкладскихПеремещений.Завершено;
			Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);		
		Иначе 
			ВызватьИсключение("Перемещение не определено!");
		КонецЕсли;		
	КонецЕсли   ; 
КонецПроцедуры

Процедура ОбработкаЗаданийНаРаботуФрагмент(Знач Док, Отгрузка)
	
	МодификацияОтгрузкиСоответствииСФактическиОтгруженнымТоваром(Док.Отгрузка, Отгрузка);

КонецПроцедуры

Функция СформироватьДанныеДляОтчета() Экспорт
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	//УзелОбмена = ПланыОбмена.ТА.НайтиПоКоду("ТА1");
	//ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	//ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
	
	//Пока ВыборкаИзменений.Следующий() Цикл	
	//	Данные = ВыборкаИзменений.Получить();
	//	ЗаписатьXML(Данные,ЗаписьXML); 
	//КонецЦикла; 
	//ЗаписьСообщения.ЗакончитьЗапись();
	Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));	
КонецФункции
 
Функция СформироватьТаблицуТоваров(Ссылка) Экспорт
	ПостроительОтчета = Новый ПостроительОтчета;
	
	ПостроительОтчета.Текст = "ВЫБРАТЬ
	|	РазмещениеТоваровНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	РазмещениеТоваровНаСкладахОстатки.Ячейка КАК Ячейка,
	|	РазмещениеТоваровНаСкладахОстатки.КоличествоЕХООстаток КАК КоличествоЕХО,
	|	РазмещениеТоваровНаСкладахОстатки.НомерПаллета КАК НомерПаллета
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.РазмещениеТоваровНаСкладах.Остатки(&НаДату, Склад = &Склад И Статус = &СтатусЗавершено) КАК РазмещениеТоваровНаСкладахОстатки
	|{ГДЕ
	|	РазмещениеТоваровНаСкладахОстатки.Номенклатура.* КАК Номенклатура,
	|	РазмещениеТоваровНаСкладахОстатки.Ячейка.НомерРяда КАК Ряд,
	|	РазмещениеТоваровНаСкладахОстатки.Ячейка.НомерЯруса КАК Ярус,
	|	РазмещениеТоваровНаСкладахОстатки.Ячейка.* КАК Ячейка}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Остатки.Ячейка,
	|	Остатки.КоличествоЕХО КАК КоличествоЕХО,
	|	Остатки.НомерПаллета КАК НомерПаллета
	|ИЗ
	|	Остатки КАК Остатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Остатки.Номенклатура.Наименование";

	
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Номенклатура");
	МассивОтбора.Добавить("Ряд");
	МассивОтбора.Добавить("Ярус");
	МассивОтбора.Добавить("Ячейка");
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);

	
	ЗначениеУсловий    = Ссылка.УсловияПроведенияИнвентаризации.Получить();
	ПостроительОтчета.УстановитьНастройки(ЗначениеУсловий, Истина, Ложь, Ложь, Ложь, Ложь);

	Скл = Ссылка.Склад;
	Ряд_ = ПостроительОтчета.Отбор.Ряд.Значение;
	Ярус_ = ПостроительОтчета.Отбор.Ярус.Значение;
	
	Запрос = Новый Запрос();
	Текст = "ВЫБРАТЬ
			|	СкладскиеЯчейки.Ссылка КАК УчетнаяЯчейка
			|ИЗ
			|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
			|ГДЕ
			|	СкладскиеЯчейки.Владелец = &Склад";
			
	Если ТипЗнч(Ряд_) = Тип("СписокЗначений") ТОгда
		Текст = Текст + "			
			|	И СкладскиеЯчейки.НомерРяда В (&НомерРяда)";
	Иначе		
			Текст = Текст + "			
			|	И СкладскиеЯчейки.НомерРяда = &НомерРяда";
	КонецЕсли;		
	Если ТипЗнч(Ярус_) = Тип("СписокЗначений") Тогда
		Текст = Текст + "			
			|	И СкладскиеЯчейки.НомерЯруса В (&НомерЯруса)";
	ИначеЕсли Ярус_ <> 0 Тогда		
		Текст = Текст + "			
			|	И СкладскиеЯчейки.НомерЯруса = &НомерЯруса";
	КонецЕсли;		
			
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Склад",Скл);
	Запрос.УстановитьПараметр("НомерРяда",Ряд_);
	Запрос.УстановитьПараметр("НомерЯруса",Ярус_);

	Результат = Запрос.Выполнить().Выгрузить();
	ТаблРезультат = Ссылка.Товары.выгрузить();
	Для каждого Строка Из Результат Цикл
		НайденнаяСтрока = ТаблРезультат.Найти(Строка.УчетнаяЯчейка, "УчетнаяЯчейка");
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСТрока = ТаблРезультат.Добавить();	
			НоваяСТрока.УчетнаяЯчейка = Строка.УчетнаяЯчейка; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ТаблРезультат;	
КонецФункции


Процедура ПриЗаписиЗаданияПриЗаписи(Источник, Отказ) Экспорт
    Если Источник.ВидЗадания = "Отгрузка" Тогда
        Запрос = Новый Запрос;
        Запрос.Текст = "ВЫБРАТЬ
                       |    Мобильный.Ссылка
                       |ИЗ
                       |    ПланОбмена.Мобильный КАК Мобильный
                       |ГДЕ
                       |    Мобильный.Работник ПОДОБНО &Работник";
        Запрос.УстановитьПараметр("Работник", СокрЛП(Источник.Исполнитель));
        ТЗОбмена = Запрос.Выполнить().Выгрузить();
        ПланыОбмена.ЗарегистрироватьИзменения(ТЗОбмена.ВыгрузитьКолонку("Ссылка"),Источник);
    ИначеЕсли Источник.ВидЗадания = "Проверка" Тогда     
        Запрос = Новый Запрос;
        Запрос.Текст = "ВЫБРАТЬ
                       |    Мобильный.Ссылка
                       |ИЗ
                       |    Справочник.Работники.ТабличнаяЧастьРаботников КАК РаботникиТабличнаяЧастьРаботников
                       |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.Мобильный КАК Мобильный
                       |        ПО (Мобильный.Работник = РаботникиТабличнаяЧастьРаботников.Сотрудник.Наименование)
                       |ГДЕ
                       |    РаботникиТабличнаяЧастьРаботников.Ссылка.Склад.Наименование ПОДОБНО &Склад";
        Запрос.УстановитьПараметр("Склад", СокрЛП(Источник.Склад)+ "%");
        ТЗОбмена = Запрос.Выполнить().Выгрузить();
        ПланыОбмена.ЗарегистрироватьИзменения(ТЗОбмена.ВыгрузитьКолонку("Ссылка"),Источник);
    КонецЕсли; 
КонецПроцедуры


Процедура ПриУдаленииЗаданияПередУдалением(Источник, Отказ) Экспорт
    Если НЕ ЗначениеЗаполнено(Источник.Исполнитель) Тогда
    	Запрос = Новый Запрос;
        Запрос.Текст = "ВЫБРАТЬ
                       |    Мобильный.Ссылка
                       |ИЗ
                       |    Справочник.Работники.ТабличнаяЧастьРаботников КАК РаботникиТабличнаяЧастьРаботников
                       |        ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.Мобильный КАК Мобильный
                       |        ПО (Мобильный.Работник = РаботникиТабличнаяЧастьРаботников.Сотрудник.Наименование)
                       |ГДЕ
                       |    РаботникиТабличнаяЧастьРаботников.Ссылка.Склад.Наименование ПОДОБНО &Склад
                       |    И РаботникиТабличнаяЧастьРаботников.ТипРаботника = &ТипРаботника";
        Запрос.УстановитьПараметр("Склад", СокрЛП(Источник.Склад)+ "%");        
        Запрос.УстановитьПараметр("ТипРаботника","Кладовщик");        
    Иначе
        Запрос = Новый Запрос;
        Запрос.Текст = "ВЫБРАТЬ
        |    Мобильный.Ссылка
        |ИЗ
        |    ПланОбмена.Мобильный КАК Мобильный
        |ГДЕ
        |    Мобильный.Работник ПОДОБНО &Работник";
        Запрос.УстановитьПараметр("Работник", СокрЛП(Источник.Исполнитель));
    КонецЕсли; 
    ТЗОбмена = Запрос.Выполнить().Выгрузить();
    Узлы = ТЗОбмена.ВыгрузитьКолонку("Ссылка");           
    Удаление = Новый УдалениеОбъекта(Источник.ссылка);
	Попытка
		ПланыОбмена.ЗарегистрироватьИзменения(Узлы, Удаление);	
	Исключение
	КонецПопытки; 
    
КонецПроцедуры
 
Процедура МодификацияОтгрузкиСоответствииСФактическиОтгруженнымТоваром(ДокОтгрузка, Отгрузка)
	//ToDo:
	//Написать процедуру сравнения отгрузки и задания а отбор и в случае отклонения - внесение измененений
	Для каждого Строка Из Отгрузка Цикл
		Отбор = Новый Структура;	
		Отбор.Вставить("Номенклатура", Строка.Номенклатура);
		НайденныеСтроки =  ДокОтгрузка.НайтиСтроки(отбор);
		Если ЗначениеЗаполнено(НайденныеСтроки)  Тогда
			СуммаВсего = 0;
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				СуммаВсего = СуммаВсего + НайденнаяСтрока.КоличествоФактическиОтгруженное;
			КонецЦикла; 
			Разница =  Строка.КоличествоФактическиОтгруженное -СуммаВсего;
			Если Разница <> 0 Тогда
				НайденнаяСтрока.КоличествоФактическиОтгруженное = НайденнаяСтрока.КоличествоФактическиОтгруженное + Разница;		 
			КонецЕсли; 		
		КонецЕсли; 			
	КонецЦикла; 
КонецПроцедуры
 
