Функция ИзменитьПрименениеДатыЗапретаДляПолныхПрав(ИспользоватьДатуЗапрета) Экспорт

	// Если режим не используется, то ничего не требуется делать
	Если НЕ ИспользоватьДатуЗапрета
		И НЕ Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Константы.ПрименятьДатуЗапретаДляПолныхПрав.Установить(ИспользоватьДатуЗапрета);
	ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	
	Возврат Истина;
	
КонецФункции

// Процедура проверяет, есть ли необходимость выполнять обновление информационной базы.
// Если необходимо - выполняется обновление.
// Если обновление не удалось выполнить - предлагается завершить работу системы.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	// { Агент Плюс	 	
	Если Не Метаданные.Константы.Найти("кпкНомерВерсииМодуляОбмена") = Неопределено Тогда
		
		ТекущаяВерсияМодуляИБ  = Константы.кпкНомерВерсииМодуляОбмена.Получить();
		Если НЕ ЗначениеЗаполнено(ТекущаяВерсияМодуляИБ) Тогда
			ТекущаяВерсияМодуляИБ = "10.3.13.1";
		КонецЕсли; 
		НомерРелиза      	   = кпкАгентПлюс.ПолучитьНомерРелиза(ТекущаяВерсияМодуляИБ);
		НоваяВерсияМодуляИБ    = "10.3.14.5";
		
		Если НомерРелиза = "10.3.13" и Найти(ТекущаяВерсияМодуляИБ, НоваяВерсияМодуляИБ) = 0 Тогда			
			
			СтрСообщения = "обновление модуля обмена ""Агент Плюс"" с версии " + ТекущаяВерсияМодуляИБ + " на версию " + НоваяВерсияМодуляИБ;
			
			#Если Клиент Тогда
				Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполняется " + СтрСообщения);
			#КонецЕсли
			
			НачатьТранзакцию();
			
			кпкАгентПлюс.ЗаполнитьШаблоныКоманд();
			кпкАгентПлюс.ЗаполнитьКодыДляВыгружаемыхТиповЦен();			
			
			// Установка номера версии информационной базы
			Константы.кпкНомерВерсииМодуляОбмена.Установить(НоваяВерсияМодуляИБ);
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
		ТекущаяВерсияМодуляИБ  = Константы.кпкНомерВерсииМодуляОбмена.Получить();
		НомерРелиза      	   = кпкАгентПлюс.ПолучитьНомерРелиза(ТекущаяВерсияМодуляИБ);
		НоваяВерсияМодуляИБ    = "10.3.14.5(ver2)";
		
		Если НомерРелиза = "10.3.14" и ТекущаяВерсияМодуляИБ <> НоваяВерсияМодуляИБ Тогда
			
			СтрСообщения = "обновление модуля обмена ""Агент Плюс"" с версии " + ТекущаяВерсияМодуляИБ + " на версию " + НоваяВерсияМодуляИБ;
			
			#Если Клиент Тогда
				Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполняется " + СтрСообщения);
			#КонецЕсли
			
			НачатьТранзакцию();
			
			// Создаем категорию для номенклатуры "Акция". Она будет использована в 
			// качестве признака "Акция" для выгрузки в МУ
			Спр = Справочники.КатегорииОбъектов;
			Если Спр.НайтиПоНаименованию("АП_Акция") = Спр.ПустаяСсылка() Тогда
				Элемент = Спр.СоздатьЭлемент();
				Элемент.Наименование = "АП_Акция";
				Элемент.НазначениеКатегории = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
				Элемент.Записать();
				Сообщить("Добавлена новая категория ""АП_Акция"" для справочника ""Номенклатура""", СтатусСообщения.Информация);
			КонецЕсли;                                         			
			
			// Установка номера версии информационной базы
			Константы.кпкНомерВерсииМодуляОбмена.Установить(НоваяВерсияМодуляИБ);
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
		ТекущаяВерсияМодуляИБ  = Константы.кпкНомерВерсииМодуляОбмена.Получить();
		НомерРелиза      	   = кпкАгентПлюс.ПолучитьНомерРелиза(ТекущаяВерсияМодуляИБ);
		НоваяВерсияМодуляИБ    = "10.3.15.9";
		
		Если НомерРелиза = "10.3.14" и ТекущаяВерсияМодуляИБ <> НоваяВерсияМодуляИБ Тогда
			
			СтрСообщения = "обновление модуля обмена ""Агент Плюс"" с версии " + ТекущаяВерсияМодуляИБ + " на версию " + НоваяВерсияМодуляИБ;
			
			НачатьТранзакцию();
			
			// Установка номера версии информационной базы
			Константы.кпкНомерВерсииМодуляОбмена.Установить(НоваяВерсияМодуляИБ);
			
			ЗафиксироватьТранзакцию();
			
			// Если удалось зафиксировать транзакцию, то сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
 
		КонецЕсли;  
		
		ТекущаяВерсияМодуляИБ  = Константы.кпкНомерВерсииМодуляОбмена.Получить();
		НомерРелиза      	   = кпкАгентПлюс.ПолучитьНомерРелиза(ТекущаяВерсияМодуляИБ);
		НоваяВерсияМодуляИБ    = "10.3.17.4";
		
		Если НомерРелиза = "10.3.15" или НомерРелиза = "10.3.16" и ТекущаяВерсияМодуляИБ <> НоваяВерсияМодуляИБ Тогда
			
			СтрСообщения = "обновление модуля обмена ""Агент Плюс"" с версии " + ТекущаяВерсияМодуляИБ + " на версию " + НоваяВерсияМодуляИБ;
			
			НачатьТранзакцию();
			
			// Установка номера версии информационной базы
			Константы.кпкНомерВерсииМодуляОбмена.Установить(НоваяВерсияМодуляИБ);						
			кпкАгентПлюс.АППроверкаСправочникаПечатныхФорм(Перечисления.кпкТипыМобильныхПриложений.АгентПлюсМобильнаяТорговля);			
			
			ЗафиксироватьТранзакцию();
			
			// Если удалось зафиксировать транзакцию, то сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
 
		КонецЕсли;       
		
		ТекущаяВерсияМодуляИБ  = Константы.кпкНомерВерсииМодуляОбмена.Получить();
		НомерРелиза      	   = кпкАгентПлюс.ПолучитьНомерРелиза(ТекущаяВерсияМодуляИБ);
		НоваяВерсияМодуляИБ    = "10.3.18.3";
		
		Если НомерРелиза = "10.3.17" и ТекущаяВерсияМодуляИБ <> НоваяВерсияМодуляИБ Тогда
			
			СтрСообщения = "обновление модуля обмена ""Агент Плюс"" с версии " + ТекущаяВерсияМодуляИБ + " на версию " + НоваяВерсияМодуляИБ;
			
			НачатьТранзакцию();
			
			// Установка номера версии информационной базы
			Константы.кпкНомерВерсииМодуляОбмена.Установить(НоваяВерсияМодуляИБ);						
			кпкАгентПлюс.АППроверкаСправочникаПечатныхФорм(Перечисления.кпкТипыМобильныхПриложений.АгентПлюсМобильнаяТорговля);			
			
			ЗафиксироватьТранзакцию();
			
			// Если удалось зафиксировать транзакцию, то сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
 
		КонецЕсли;   
		
	КонецЕсли;   	
	// Агент Плюс }   	
	
	// Проверка необходимости обновления информационной базы.
	Если НЕ ПустаяСтрока(Метаданные.Версия) Тогда
		Если ПустаяСтрока(Константы.НомерВерсииКонфигурации.Получить()) Тогда
			// первый запуск
			ТекстСообщения = "Первый запуск информационной базы. Будет выполнено начальное заполнение информационной базы.";
			#Если Клиент Тогда			
			Предупреждение(ТекстСообщения);
			#Иначе
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			#КонецЕсли
		ИначеЕсли Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда
			// обновление
			ТекстСообщения = "Изменился номер версии конфигурации. Будет выполнено обновление информационной базы.";
			#Если Клиент Тогда			
			Предупреждение(ТекстСообщения);
			#Иначе
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			#КонецЕсли
		Иначе	
			Возврат;
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;         

	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ПравоДоступа("МонопольныйРежим", Метаданные) 
	 ИЛИ НЕ РольДоступна("ПолныеПрава") Тогда
	 	ТекстСообщения = "Недостаточно прав для выполнения обновления. Необходимы полные права. Работа системы будет завершена.";
		#Если Клиент Тогда
		Предупреждение(ТекстСообщения);
		глЗначениеПеременнойУстановить("глЗапрашиватьПодтверждениеПриЗакрытии", Ложь);
		ЗавершитьРаботуСистемы(Ложь);
		#Иначе
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	// Проверка легальности получения обновления.
	Если НЕ ПроверитьЛегальностьПолученияОбновления(Константы.НомерВерсииКонфигурации.Получить()) Тогда
		Возврат;	
	КонецЕсли;

	// Установка монопольного режима для обновления информационной базы.
	Попытка
		УстановитьМонопольныйРежим(Истина);
	Исключение
		ТекстСообщения = "Не удалось установить монопольный режим по причине: " + ОписаниеОшибки() + ". Работа системы будет завершена.";
		#Если Клиент Тогда
		Предупреждение(ТекстСообщения);
		глЗначениеПеременнойУстановить("глЗапрашиватьПодтверждениеПриЗакрытии", Ложь);
		ЗавершитьРаботуСистемы(Ложь);
		#Иначе
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
		#КонецЕсли
		Возврат;
	КонецПопытки;
	
	// Если для пользователей с полными правами применяется дата запрета изменения данных,
	// то отключим этот признак на время выполнения обновления
	ВосстановитьДатуЗапрета = ИзменитьПрименениеДатыЗапретаДляПолныхПрав(Ложь);

	// Обновление информационной базы.
	Обработки.ОбновлениеИнформационнойБазы.Создать().ВыполнитьОбновление();

	// Восстановим применение даты запрета изменения данных для пользователей с полными правами
	Если ВосстановитьДатуЗапрета Тогда
		ИзменитьПрименениеДатыЗапретаДляПолныхПрав(Истина);
	КонецЕсли; 
	
	// Отключение монопольного режима.
	УстановитьМонопольныйРежим(Ложь);

	// Проверка выполнения обновления информационной базы.
	Если Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда
		ТекстСообщения = "Обновление информационной базы не выполнено.";
		#Если Клиент Тогда
		ОбщегоНазначения.Сообщение(ТекстСообщения, СтатусСообщения.Важное);
		Текст = "Не выполнено обновление информационной базы! Завершить работу системы?";
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );

		Если Ответ = КодВозвратаДиалога.Да Тогда
			глЗначениеПеременнойУстановить("глЗапрашиватьПодтверждениеПриЗакрытии", Ложь);
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
		#Иначе
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
		#КонецЕсли
	Иначе
		ТекстСообщения = "Обновление информационной базы выполнено успешно.";
		#Если Клиент Тогда
		ОбщегоНазначения.Сообщение(ТекстСообщения, СтатусСообщения.Информация);
		#Иначе
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры

// Проверить легальность получения обновления.
//
// Параметры
//  ТекущаяВерсияИБ  - Строка - номер версии ИБ.
//
// Возвращаемое значение:
//   Булево   - Истина, если проверка завершилась успешно.
//
Функция ПроверитьЛегальностьПолученияОбновления(Знач ТекущаяВерсияИБ)

	#Если Клиент Тогда
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли; 
	Если ЭтоБазоваяВерсияКонфигурации()	Тогда
		Возврат Истина;
	КонецЕсли;
		
	Если ТекущаяВерсияИБ <> Метаданные.Версия И ТекущаяВерсияИБ <> "" Тогда
		Форма = Обработки.ЛегальностьПолученияОбновлений.ПолучитьФорму();
		Форма.ПоказыватьПредупреждениеОПерезапуске = Истина;
		Результат = Форма.ОткрытьМодально();
		Если Результат <> Истина Тогда
			ЗавершитьРаботуСистемы(Ложь);
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли;
	#КонецЕсли
	Возврат Истина;

КонецФункции 

Функция ЭтоБазоваяВерсияКонфигурации()
	
	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;
	
КонецФункции
 


