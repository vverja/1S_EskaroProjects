Процедура СформироватьЛогистическуюЦепочку(СсылкаНаЗаказ, ВыполнитьЗакрытиеЗаказа = Ложь) Экспорт
	
		
	НачатьТранзакцию();
	Если СсылкаНаЗаказ.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда 
		//Ищем уже существующий заказ в организации НПТ
		//если его нет то создаем копированием
		//{
		ЗапросНаПоискЗаказаНПТ = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                                      |	ЗаказПокупателя.Ссылка
		                                      |ИЗ
		                                      |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		                                      |ГДЕ
		                                      |	ЗаказПокупателя.НомерВходящегоДокументаЭлектронногоОбмена = &НомерВходящегоДокументаЭлектронногоОбмена
		                                      |	И ЗаказПокупателя.Ссылка <> &Ссылка
		                                      |	И ЗаказПокупателя.Дата >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД)");
		ЗапросНаПоискЗаказаНПТ.УстановитьПараметр("НомерВходящегоДокументаЭлектронногоОбмена", СсылкаНаЗаказ.Номер);
		ЗапросНаПоискЗаказаНПТ.УстановитьПараметр("Ссылка", СсылкаНаЗаказ);
		ЗапросНаПоискЗаказаНПТ.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		ВыборкаЗаказовВНПТ = ЗапросНаПоискЗаказаНПТ.Выполнить().Выбрать();
		//}
		//Ищем Корректировки
		МассивКорректировок = НайтиКорректировки(СсылкаНаЗаказ);			
		//Инициализируем начальные константные значения
		//{
		Если ВыборкаЗаказовВНПТ.Следующий() Тогда	
			обЗаказПокуптаеляНПТ = ВыборкаЗаказовВНПТ.Ссылка.ПолучитьОбъект();			 
		Иначе
			обЗаказПокуптаеляНПТ = СсылкаНаЗаказ.Скопировать();
		КонецЕсли; 
		
		ИнкрементДаты = 10;
		обЗаказПокупателяКолор = СсылкаНаЗаказ.ПолучитьОбъект();
		обЗаказПокупателяКолор.НомерВходящегоДокументаЭлектронногоОбмена = СсылкаНаЗаказ.Номер;
		КонтрагентНПТ = Справочники.Контрагенты.НайтиПоКоду("ЭК-001856");
		КонтрагентЭскароКолор = Справочники.Контрагенты.НайтиПоКоду("000005448");
		ОрганизацияНПТ = Справочники.Организации.НайтиПоКоду("ЭК-000002");
		Контрагент = обЗаказПокупателяКолор.Контрагент;
		
		ПодразделениеПользователя = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновноеПодразделение");
		ПодразделениеОргПользователя = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновноеПодразделениеОрганизации");
		
		ТипЦен =  Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000084");
		ТипЦенКонтрагента = Справочники.ТипыЦенНоменклатурыКонтрагентов.НайтиПоКоду("000000171");
		
		Проект = Справочники.Проекты.НайтиПоКоду("000000092");
		
		Если СсылкаНаЗаказ.Дата < Дата("20210101") Тогда
			ПравильноеДата = ТекущаяДата();	
		Иначе
			ПравильноеДата = СсылкаНаЗаказ.Дата; 	
		КонецЕсли; 
		ЗапросПоРезервам = Новый Запрос;
		ЗапросПоРезервам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                         |	ТоварыВРезервеНаСкладахОстатки.Номенклатура,
		                         |	ТоварыВРезервеНаСкладахОстатки.Склад,
		                         |	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток КАК Количество
		                         |ПОМЕСТИТЬ Врем1
		                         |ИЗ
		                         |	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &ДокументРезерва) КАК ТоварыВРезервеНаСкладахОстатки
		                         |
		                         |ОБЪЕДИНИТЬ ВСЕ
		                         |
		                         |ВЫБРАТЬ
		                         |	РеализацияТоваровУслугТовары.Номенклатура,
		                         |	РеализацияТоваровУслугТовары.Склад,
		                         |	-РеализацияТоваровУслугТовары.Количество
		                         |ИЗ
		                         |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		                         |ГДЕ
		                         |	РеализацияТоваровУслугТовары.Ссылка.ДополнениеКАдресуДоставки = &НомерЗаказа
		                         |	И РеализацияТоваровУслугТовары.Ссылка.Организация <> &Организация
		                         |	И РеализацияТоваровУслугТовары.Ссылка.Проведен
		                         |	И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ГОД) И КОНЕЦПЕРИОДА(&Дата, ГОД)
		                         |;
		                         |
		                         |////////////////////////////////////////////////////////////////////////////////
		                         |ВЫБРАТЬ
		                         |	Врем1.Номенклатура,
		                         |	Врем1.Склад,
		                         |	СУММА(Врем1.Количество) КАК Количество
		                         |ПОМЕСТИТЬ Врем2
		                         |ИЗ
		                         |	Врем1 КАК Врем1
		                         |
		                         |СГРУППИРОВАТЬ ПО
		                         |	Врем1.Номенклатура,
		                         |	Врем1.Склад
		                         |;
		                         |
		                         |////////////////////////////////////////////////////////////////////////////////
		                         |ВЫБРАТЬ
		                         |	Врем2.Номенклатура,
		                         |	Врем2.Склад,
		                         |	Врем2.Количество
		                         |ИЗ
		                         |	Врем2 КАК Врем2
		                         |ГДЕ
		                         |	Врем2.Количество > 0";
		ЗапросПоРезервам.УстановитьПараметр("ДокументРезерва", СсылкаНаЗаказ);
		ЗапросПоРезервам.УстановитьПараметр("НомерЗаказа", СсылкаНаЗаказ.Номер);
		ЗапросПоРезервам.УстановитьПараметр("Дата", СсылкаНаЗаказ.Дата);
		ЗапросПоРезервам.УстановитьПараметр("Организация", Константы.НПТ.Получить());
		
		ТаблицаРезервов = ЗапросПоРезервам.Выполнить().Выгрузить();
				//Проверяем заказ на наличие цен в НПТ
		Если НЕ ПроверитьЦеныВНПТ(ТаблицаРезервов, ТипЦен) Тогда
			Возврат;
		КонецЕсли;

		//}

		Если ТаблицаРезервов.Количество() = 0  Тогда
			Если ВыполнитьЗакрытиеЗаказа Тогда
				ЗакрытиеЗаказа(СсылкаНаЗаказ);	
				ЗафиксироватьТранзакцию();
				Возврат;
			КонецЕсли; 
			
			Сообщить("У заказа нет резервов! Возможно его нужно закрыть");
			Возврат;
		КонецЕсли; 
		
		Попытка	
			обЗаказПокупателяКолор.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Невозможно провести последовательность документов!");
			Сообщить("Ошибка в создании заказа покупателя для реализации товара НПТ!");
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		РеализацияКолор = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(РеализацияКолор, обЗаказПокупателяКолор);
		РеализацияКолор.УстановитьНовыйНомер();
		РеализацияКолор.ОтражатьВБухгалтерскомУчете = Истина;
		РеализацияКолор.ОтражатьВУправленческомУчете = Истина;
		РеализацияКолор.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		
		РеализацияКолор.Контрагент = КонтрагентНПТ;
		РеализацияКолор.Дата = ПравильноеДата;
		РеализацияКолор.ВидПередачи=Перечисления.ВидыПередачиТоваров.СоСклада;
		РеализацияКолор.ДоговорКонтрагента =  КонтрагентНПТ.ОсновнойДоговорКонтрагента;
		РеализацияКолор.Грузополучатель = Контрагент;
		РеализацияКолор.ТипЦен = ТипЦен;
		РеализацияКолор.УчитыватьНДС = Истина;
		РеализацияКолор.СуммаВключаетНДС = Истина;
		РеализацияКолор.Проект = Проект;
		РеализацияКолор.Подразделение = ПодразделениеПользователя;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	СвязанныеДокументы.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	КритерийОтбора.СвязанныеДокументы(&Значение) КАК СвязанныеДокументы
		                      |ГДЕ
		                      |	СвязанныеДокументы.Ссылка.Проведен
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	СвязанныеДокументы.Ссылка.Дата");
		Запрос.УстановитьПараметр("Значение", обЗаказПокупателяКолор.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.РезервированиеТоваров")  Тогда
				ДатаПоРезерву = Выборка.Ссылка.Дата;
			КонецЕсли;
		КонецЦикла;
		Если ДатаПоРезерву < Дата("20210101") Тогда
			ДатаПоРезерву = ТекущаяДата();
		КонецЕсли;	
		РеализацияКолор.Дата = ДатаПоРезерву + ИнкрементДаты;
		//РеализацияКолор.Выгружен = Истина;
		РеализацияКолор.ДополнениеКАдресуДоставки = СсылкаНаЗаказ.Номер;
		РеализацияКолор.Склад = СсылкаНаЗаказ.СкладГруппа;
		РеализацияКолор.мПараметрыСвязиСтрокТЧ = Новый Соответствие;
		РеализацияКолор.мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
		РеализацияКолор.мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
		//Перенос табличной части
		Для каждого Строка Из ТаблицаРезервов Цикл
			НС = РеализацияКолор.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НС, строка);
			СтрокаТабличнойЧасти = НС;
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, РеализацияКолор);
			РеализацияКолор.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", Истина);
			// Заполняем реквизиты табличной части.
			
			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, РеализацияКолор, "Реализация");
			//ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, РеализацияКолор);
			СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
			// Заполнение цены зависит от розничности операции.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, РеализацияКолор, глЗначениеПеременной("ВалютаРегламентированногоУчета"));
			СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
			
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, РеализацияКолор);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, РеализацияКолор);
            УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, РеализацияКолор);

			// Ввод состава набора
			УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, РеализацияКолор);
		КонецЦикла; 
		Попытка
			РеализацияКолор.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Невозможно провести последовательность документов!");
			Сообщить("Ошибка в создании реализации товара для НПТ!");
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		//ПланыОбмена.ЗарегистрироватьИзменения(Узел, РеализацияКолор.Ссылка);
		//Закрываем заказ
		Если ВыполнитьЗакрытиеЗаказа Тогда
			ЗакрытиеЗаказа(СсылкаНаЗаказ);	
		КонецЕсли;  
		//Создаем поступление товаров в новий погляд
		ПоступлениеНПТ = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ПоступлениеНПТ.Дата = РеализацияКолор.Дата + ИнкрементДаты; 
		ПоступлениеНПТ.Заполнить(РеализацияКолор.Ссылка); 
		ПоступлениеНПТ.ОтражатьВБухгалтерскомУчете = Истина;
		ПоступлениеНПТ.ОтражатьВУправленческомУчете = Истина;
		ПоступлениеНПТ.СкладОрдер = РеализацияКолор.Склад;
		ПоступлениеНПТ.Подразделение = ПодразделениеПользователя;
		ПоступлениеНПТ.ПодразделениеОрганизации = ПодразделениеОргПользователя;
		ПоступлениеНПТ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("ЭК-003121");
		//ПоступлениеНПТ.Выгружен = Истина;
		ПоступлениеНПТ.НомерВходящегоДокументаЭлектронногоОбмена = СсылкаНаЗаказ.Номер;
		//Заполняем колонку склад на тот случай если реализация осуществляется с разных складов
		Для каждого СтрокаТЧ Из РеализацияКолор.Товары Цикл
			НС = ПоступлениеНПТ.Товары.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
			НС.Склад = СтрокаТЧ.Склад;
		КонецЦикла; 
		Попытка
			ПоступлениеНПТ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Невозможно провести последовательность документов!");
			Сообщить("Ошибка в создании поступления товара в НПТ!");
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		//ПланыОбмена.ЗарегистрироватьИзменения(Узел, ПоступлениеНПТ.Ссылка);
		//Проверяем есть ли уже этот заказ
		
		Если обЗаказПокуптаеляНПТ.ЭтоНовый() Тогда
			обЗаказПокуптаеляНПТ.Организация = ОрганизацияНПТ;
			обЗаказПокуптаеляНПТ.Дата = ПоступлениеНПТ.Дата + ИнкрементДаты;
			обЗаказПокуптаеляНПТ.ДатаОтгрузки = обЗаказПокуптаеляНПТ.Дата;
			ПравильныйДоговор = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию(Лев("НПТ - " + обЗаказПокуптаеляНПТ.ДоговорКонтрагента.Наименование, 50),,,обЗаказПокуптаеляНПТ.Контрагент);
			Если НЕ ЗначениеЗаполнено(ПравильныйДоговор) Тогда
				Сообщить("Не найден догвор НПТ. Создаю новый");	
				ПравильныйДоговор = обЗаказПокуптаеляНПТ.ДоговорКонтрагента.Скопировать();
				ПравильныйДоговор.Организация = ОрганизацияНПТ;
				ПравильныйДоговор.Наименование = "НПТ - " + ПравильныйДоговор.Наименование;
				Попытка
					ПравильныйДоговор.Записать();
				Исключение
					ОтменитьТранзакцию();
					Сообщить("Невозможно провести последовательность документов!");
					Сообщить("Ошибка в создании договора покупателя в НПТ!");
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки; 
			КонецЕсли;
			обЗаказПокуптаеляНПТ.ДоговорКонтрагента = ПравильныйДоговор.Ссылка;
			обЗаказПокуптаеляНПТ.НомерВходящегоДокументаЭлектронногоОбмена = СсылкаНаЗаказ.Номер;	
			обЗаказПокуптаеляНПТ.Товары.Очистить();
			//перезаполняем табличную часть для того чтобы подтянулись все скидки
			Для каждого СтрокаТЧ Из обЗаказПокупателяКолор.Товары Цикл
				НС = обЗаказПокуптаеляНПТ.Товары.Добавить();	
				ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ);
			КонецЦикла; 
			Попытка
				обЗаказПокуптаеляНПТ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Исключение
				ОтменитьТранзакцию();
				Сообщить("Невозможно провести последовательность документов!");
				Сообщить("Ошибка в создании Заказа для конечного покупателя в НПТ!");
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
		КонецЕсли; 
		//Создаем копии корректировок
		//{
		//Ищем уже созданные
		МассивКорректировокУжеСкопированных = НайтиКорректировки(обЗаказПокуптаеляНПТ.Ссылка);
		//Теперь перебираем все существующие корректировки в изначальном заказе
		Для каждого Запись Из МассивКорректировок Цикл
			УжеЕсть = Ложь;	
			Для каждого ЗаписьУжеСуществущих Из МассивКорректировокУжеСкопированных Цикл
				Если Запись.Ссылка.Номер = "НП-" + Прав(Запись.Ссылка.Номер, СтрДлина(Запись.Ссылка.Номер)-3) Тогда
					УжеЕсть = Истина;	
				КонецЕсли; 
			КонецЦикла;
			Если НЕ УжеЕсть Тогда
				КорректировкаНПТ = Запись.Ссылка.Скопировать();
				КорректировкаНПТ.Номер = "НП-" + Прав(Запись.Ссылка.Номер, СтрДлина(Запись.Ссылка.Номер)-3);
				КорректировкаНПТ.Организация = ОрганизацияНПТ;
				КорректировкаНПТ.Дата = ПоступлениеНПТ.Дата + ИнкрементДаты;
				КорректировкаНПТ.Контрагент = обЗаказПокуптаеляНПТ.Контрагент;
				КорректировкаНПТ.ЗаказПокупателя = обЗаказПокуптаеляНПТ.Ссылка;
				Попытка
					КорректировкаНПТ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
				Исключение
					ОтменитьТранзакцию();
					Сообщить("Невозможно провести последовательность документов!");
					Сообщить("Ошибка в создании Заказа для конечного покупателя в НПТ!");
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки; 		
			КонецЕсли; 
		КонецЦикла; 
		//}	
		
		//Копируем резервы товара
		МассивРезервов = НайтиРезервы(СсылкаНаЗаказ);
		МассивРезервовСкопированных = НайтиРезервы(обЗаказПокуптаеляНПТ.Ссылка);
		
		Для каждого Запись Из МассивРезервов Цикл
			УжеЕсть = Ложь;	
			Для каждого ЗаписьУжеСуществущих Из МассивРезервовСкопированных Цикл
				Если Запись.Ссылка.Номер = "НП-" + Прав(Запись.Ссылка.Номер, СтрДлина(Запись.Ссылка.Номер)-3) Тогда
					УжеЕсть = Истина;	
				КонецЕсли; 
			КонецЦикла;
			Если НЕ УжеЕсть Тогда
				РезервНПТ = Запись.Скопировать();
				РезервНПТ.Организация = ОрганизацияНПТ;
				РезервНПТ.Дата = ПоступлениеНПТ.Дата + ИнкрементДаты;
				РезервНПТ.Контрагент = обЗаказПокуптаеляНПТ.Контрагент;
				РезервНПТ.Заказ = обЗаказПокуптаеляНПТ.Ссылка;
				РезервНПТ.УстановитьНовыйНомер("НП-");
				Попытка
					РезервНПТ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
				Исключение
					ОтменитьТранзакцию();
					Сообщить("Невозможно провести последовательность документов!");
					Сообщить("Ошибка в создании резерва для конечного покупателя в НПТ!");
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки; 		
			КонецЕсли; 
		КонецЦикла;
		
		
		//Создаем реализацию конечному покупателю
		Реализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		Реализация.Заполнить(обЗаказПокуптаеляНПТ.Ссылка);
		Реализация.Дата = ПоступлениеНПТ.Дата + ИнкрементДаты + 1;
		Реализация.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссияНал;
		Реализация.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		Реализация.ОтражатьВБухгалтерскомУчете = Истина;
		Реализация.ОтражатьВУправленческомУчете = Истина;
		Реализация.Проект = Проект;
		Реализация.ДополнениеКАдресуДоставки = СсылкаНаЗаказ.Номер;
 //   	
 //   	Реализация.Товары.Очистить();
 //   	
 //   	Для каждого Строка Из ТаблицаРезервов Цикл
 //   		НС = Реализация.Товары.Добавить();
 //   		ЗаполнитьЗначенияСвойств(НС, строка);
 //   		СтрокаТабличнойЧасти = НС;
 //   		
 //   		// Выполнить общие действия для всех документов при изменении номенклатуры.
 //   		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, Реализация);
 //   		Реализация.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", Истина);
 //   		// Заполняем реквизиты табличной части.
 //   		Если Реализация.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам  Тогда
 //   			СтрокаТабличнойЧасти.ЗаказПокупателя = обЗаказПокуптаеляНПТ.Ссылка;		
 //   		КонецЕсли;
 //   		// Заполняем реквизиты табличной части.
 //   		//ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Реализация, "Реализация");
 //   		СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
 //   		ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, Реализация);
 //   		
 //   		// Заполнение цены зависит от розничности операции.
 //   		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, Реализация, глЗначениеПеременной("ВалютаРегламентированногоУчета"));	
 //   		
 //   		//Заполняем скидки
 //   		ЗаполнитьСкидки(СтрокаТабличнойЧасти, обЗаказПокуптаеляНПТ.Ссылка);
 //   		
 //   		// Рассчитываем реквизиты табличной части.
 //   		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Реализация);
 //   		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Реализация);
 //
 //   	КонецЦикла;
 //   	Реализация.СуммаДокумента = Реализация.Товары.Итог("Сумма");
 		УдаляемыеСтроки = Новый Массив;
 		Для каждого СтрокаТЗ Из Реализация.Товары Цикл
			Если СтрокаТЗ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЗ);	
			КонецЕсли; 
		КонецЦикла; 
		Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Реализация.Товары.Удалить(УдаляемаяСтрока);		
		КонецЦикла; 
		Попытка
			//Если ПроверкаЗадолженности (обЗаказПокуптаеляНПТ.Ссылка, Реализация.Дата)Тогда 
			//	Реализация.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			//Иначе
				Реализация.Записать(РежимЗаписиДокумента.Запись);
			//КонецЕсли; 
			
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Невозможно провести последовательность документов!");
			Сообщить("Ошибка в создании реализации для конечного покупателя в НПТ!");
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		//Попытка	
		//	НастройкаОбмена = Справочники.НастройкиОбменаДанными.НайтиПоКоду("007");
		//	СтруктураНастроекОбмена = ПроцедурыОбменаДанными.ПолучитьБазовуюСтруктуруПараметровОбмена(Истина, Неопределено, Ложь, Неопределено);
		//	ПроцедурыОбменаДанными.ДополнитьСтруктуруОбменаПоПростойНастройкеОбмена(СтруктураНастроекОбмена, НастройкаОбмена.ПолучитьОбъект());	
		//	ПроцедурыОбменаДанными.ВыполнитьОбменДаннымиЧерезComСоединениеВнешняя(СтруктураНастроекОбмена);
		//Исключение
		//	ОтменитьТранзакцию();
		//	Сообщить("Невозможно провести последовательность документов!");
		//	Сообщить("Ошибка в выгрузке документов!");
		//	Сообщить(ОписаниеОшибки());
		//	Возврат;
		//КонецПопытки;
		ЗафиксироватьТранзакцию();
		Попытка
			Реализация.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
		    Сообщить("Невозможно провести последовательность документов!");
			Сообщить("Ошибка в проведении реализации для конечного покупателя в НПТ!");
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
		Форма = Реализация.ПолучитьФорму("ФормаДокумента");
		Форма.ЭлементыФормы.Организация.Видимость = Ложь;
		Форма.ЭлементыФормы.НадписьОрганизация.Видимость = Ложь;
		Форма.Открыть();			
	Иначе
		Сообщить("Не нал!");
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ЗакрытиеЗаказа(СсылкаНаЗаказ)
	ЗакрытиеЗаказа = Документы.ЗакрытиеЗаказовПокупателей.СоздатьДокумент();
	ЗакрытиеЗаказа.Заполнить(СсылкаНаЗаказ);
	ЗакрытиеЗаказа.Дата = ТекущаяДата();
	Попытка
		ЗакрытиеЗаказа.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
	Исключение
		Сообщить("Невозможно провести последовательность документов!");
		Сообщить("Ошибка в создании закрытия заказа!");
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
КонецПроцедуры
 
Процедура СформироватьЦепочкуВозврат(СсылкаНаВозврат) Экспорт
	обВозвратВКолор = СсылкаНаВозврат.ПолучитьОбъект();
	// Копирует Возврат товаров от покупателя из организации Эскаро Колор в организацию НПТ 
	// с первоначально заполненными реквизитами включая тип операции нал, реального контрагента, 
	// договор контрагент, тип цен.
	обВозвратВНПТ = СсылкаНаВозврат.Скопировать();
	обВозвратВНПТ.Дата = СсылкаНаВозврат.Дата;
	
	
	КонтрагентНПТ = Справочники.Контрагенты.НайтиПоКоду("ЭК-001856");
	КонтрагентЭскароКолор = Справочники.Контрагенты.НайтиПоКоду("000005448");
	ДоговорПоставки = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("ЭК-003045");
	ОрганизацияНПТ = Справочники.Организации.НайтиПоКоду("ЭК-000002");
	Контрагент = обВозвратВКолор.Контрагент;
	ТипЦен =  Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000111");
	ТипЦенКонтрагента = Справочники.ТипыЦенНоменклатурыКонтрагентов.НайтиПоКоду("000000171");
	Проект = Справочники.Проекты.НайтиПоКоду("000000092");
	ИнкрементДаты = 10;
	НачатьТранзакцию();
	//
	//Заменяет реквизиты документа Возврат покупателя 
	//- Тип операции с Продажа комиссия нал на Продажа комиссия
	обВозвратВКолор.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
	обВозвратВКолор.Организация = ОрганизацияНПТ;
	
	обВозвратВКолор.НомерВходящегоДокументаЭлектронногоОбмена = обВозвратВКолор.Номер;
	обВозвратВКолор.Сделка = Документы.ЗаказПокупателя.ПустаяСсылка();
	ПравильныйДоговор = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("НПТ - " + обВозвратВНПТ.ДоговорКонтрагента.Наименование,,,обВозвратВНПТ.Контрагент);
	Если НЕ ЗначениеЗаполнено(ПравильныйДоговор) Тогда
		Сообщить("Не найден догвор НПТ. Создаю новый"); 
		ПравильныйДоговор = обВозвратВНПТ.ДоговорКонтрагента.Скопировать();
		ПравильныйДоговор.Организация = ОрганизацияНПТ;
		ПравильныйДоговор.Наименование = "НПТ - " + ПравильныйДоговор.Наименование;
		ПравильныйДоговор.Записать();
	КонецЕсли;
	обВозвратВКолор.ДоговорКонтрагента = ПравильныйДоговор.Ссылка;
	Попытка 
	обВозвратВКолор.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Исключение
		ОтменитьТранзакцию();
		Сообщить("Невозможно провести последовательность документов!");
		Сообщить("Ошибка в изменении возврата в Колор из НПТ!");
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	//Организация Новий погляд Трейд
	
	// В Возврате товаров от покупателя должна автоматически проставляться в виде документа-основания последняя Реализация товара по договору, 
	// в которой был возвращаемый товар. Если возвращаемый товар в документах реализации не найден, для него проставляется 
	// Закупочная цена, которой является цена ЭК – НПТ.
	обВозвратВНПТ.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
	обВозвратВНПТ.Контрагент = КонтрагентНПТ;
	обВозвратВНПТ.ДоговорКонтрагента = КонтрагентНПТ.ОсновнойДоговорКонтрагента;
	обВозвратВНПТ.кпкТорговаяТочка = Справочники.кпкТорговыеТочки.ПустаяСсылка();
	обВозвратВНПТ.ТипЦен = ТипЦен; 
	обВозвратВНПТ.Сделка = Документы.ЗаказПокупателя.ПустаяСсылка();
	ЗапросНаПоследнююРеализацию = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПродажиОбороты.ДокументПродажи.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Контрагент = &Контрагент
	|				И ДоговорКонтрагента = &ДоговорКонтрагента
	|				И Номенклатура = &Номенклатура) КАК ПродажиОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПродажиОбороты.Период УБЫВ");
	ЗапросНаПоследнююРеализацию.УстановитьПараметр("Контрагент", КонтрагентНПТ);
	ЗапросНаПоследнююРеализацию.УстановитьПараметр("ДоговорКонтрагента", КонтрагентНПТ.ОсновнойДоговорКонтрагента);
	ЗапросПоЦенамНПТ = Новый Запрос("
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			ТипЦен = &ТипЦен
	|				И Номенклатура В (&СПИСОК)) КАК ЦеныНоменклатурыСрезПоследних");
	
	ЗапросПоЦенамНПТ.УстановитьПараметр("ТипЦен", ТипЦен);
	ЗапросПоЦенамНПТ.УстановитьПараметр("СПИСОК",обВозвратВНПТ.Товары.ВыгрузитьКолонку("Номенклатура"));
	тзЗакупочыеЦены = ЗапросПоЦенамНПТ.Выполнить().Выгрузить();
	
	для каждого СтрокаТабличнойЧасти из обВозвратВНПТ.Товары цикл
		ДокументОснование = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		СтрокаТабличнойЧасти.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		ЗапросНаПоследнююРеализацию.УстановитьПараметр("Номенклатура",СтрокаТабличнойЧасти.Номенклатура);
		Выборка = ЗапросНаПоследнююРеализацию.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДокументОснование = Выборка.Ссылка;     
		КонецЕсли;
		СтрокаТабличнойЧасти.ДокументПартии = ДокументОснование;    
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			НайденнаяСтрока = тзЗакупочыеЦены.Найти(СтрокаТабличнойЧасти.Номенклатура, "Номенклатура");
			Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
				СтрокаТабличнойЧасти.Себестоимость = НайденнаяСтрока.Цена * СтрокаТабличнойЧасти.Количество; 
			КонецЕсли;
		КонецЕсли;
		
		// Выполнить общие действия для всех документов при изменении номенклатуры.
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, обВозвратВНПТ, "Реализация"); 
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, обВозвратВНПТ,  глЗначениеПеременной("ВалютаРегламентированногоУчета")); 
		
		
		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, обВозвратВНПТ);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, обВозвратВНПТ);
		
		обВозвратВНПТ.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", Истина);
	КонецЦикла;
	обВозвратВНПТ.НомерВходящегоДокументаЭлектронногоОбмена = обВозвратВКолор.Номер;
	
	Попытка 
	обВозвратВНПТ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Исключение
		ОтменитьТранзакцию();
		Сообщить("Невозможно провести последовательность документов!");
		Сообщить("Ошибка в изменении возврата в Колор из НПТ!");
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	// Формирует и проводит документ Возврат товаров поставщику на контрагента Эскаро Колор 
	// на количество согласно Возврату товаров и с ценами по типу цен для НПТ 
	// (поступление осуществляется на тот склад, который указан в Возврате товаров), 
	// в качестве договора выбирается договор поставки товара ООО Новий погляд Трейд (покупка) - его необходимо создать в Базе УПП НПТ.
	ВозвратПоставщикуКолор = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
	ВозвратПоставщикуКолор.Дата = обВозвратВНПТ.Дата + ИнкрементДаты;
	ВозвратПоставщикуКолор.Организация = ОрганизацияНПТ;
	ВозвратПоставщикуКолор.Контрагент = КонтрагентЭскароКолор;
	ВозвратПоставщикуКолор.ДоговорКонтрагента = ДоговорПоставки;
	ВозвратПоставщикуКолор.ВалютаДокумента = ДоговорПоставки.ВалютаВзаиморасчетов;
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорПоставки.ВалютаВзаиморасчетов, ВозвратПоставщикуКолор.Дата);
	ВозвратПоставщикуКолор.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	ВозвратПоставщикуКолор.КурсВзаиморасчетов = СтруктураКурса.Курс;
	ВозвратПоставщикуКолор.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
	ВозвратПоставщикуКолор.ОтражатьВБухгалтерскомУчете = истина;
	ВозвратПоставщикуКолор.ОтражатьВУправленческомУчете = истина;
	ВозвратПоставщикуКолор.Грузоотправитель = Контрагент;
	ВозвратПоставщикуКолор.Склад = обВозвратВКолор.СкладОрдер;
	ВозвратПоставщикуКолор.ТипЦен = ТипЦенКонтрагента;
	ВозвратПоставщикуКолор.СчетУчетаДоходов = ПланыСчетов.Хозрасчетный.НайтиПоКоду("6831");
	ВозвратПоставщикуКолор.СчетУчетаЗатрат = ПланыСчетов.Хозрасчетный.НайтиПоКоду("6831");
	ВозвратПоставщикуКолор.НомерВходящегоДокумента = обВозвратВКолор.Номер;
	ВозвратПоставщикуКолор.Ответственный = обВозвратВКолор.Ответственный;
	
	ЗаполнитьЗначенияСвойств(ВозвратПоставщикуКолор, ВозвратПоставщикуКолор.ЗаполнитьСтруктуруСчетовУчетаШапки());
	для каждого Строка из обВозвратВНПТ.Товары цикл
		СтрокаТабличнойЧасти = ВозвратПоставщикуКолор.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Строка);
		
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ВозвратПоставщикуКолор);
		
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ВозвратПоставщикуКолор, "Приобретение"); 
		СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
		КонтрагентЭскароКолор, ТипЦен, ДоговорПоставки, ВозвратПоставщикуКолор.Дата, ДоговорПоставки.ВалютаВзаиморасчетов, Истина, Истина);
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ВозвратПоставщикуКолор, СтруктураШапкиДокумента, глЗначениеПеременной("ВалютаРегламентированногоУчета")); 
		
		СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
		
		ВозвратПоставщикуКолор.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", Истина);
		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ВозвратПоставщикуКолор);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ВозвратПоставщикуКолор);
	КонецЦикла;
	
	Попытка 
	ВозвратПоставщикуКолор.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Исключение
		ОтменитьТранзакцию();
		Сообщить("Невозможно провести последовательность документов!");
		Сообщить("Ошибка в изменении возврата в Колор из НПТ!");
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
				
КонецПроцедуры


Процедура ПриЗаписиВозвратовНаличныхОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт	
	//Если Источник.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет и Источник.Организация <> Константы.НПТ.Получить() И Источник.Дата >= Дата("20210101") Тогда
	//	СформироватьЦепочкуВозврат(Источник.Ссылка);
	//	Обработка = Обработки.ПроведениеНаличнойРеализации.Создать();
	//	Обработка.ДокументСсылка = Источник.Ссылка;
	//	ФормаФормированияРеализаций = обработка.ПолучитьФорму("Форма");
	//	
	//	ФормаФормированияРеализаций.ОткрытьМодально();
	//КонецЕсли; 	
	
	Если Источник.Организация = Константы.НПТ.Получить() Тогда
		Если Источник.Товары.Количество() > 0 Тогда
			ДокументОснование = Источник.Товары[0].ДокументПартии;
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				КодБазовогоЗаказа = ДокументОснование.ДополнениеКАдресуДоставки;
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ПоступлениеТоваровУслуг.Ссылка
				|ИЗ
				|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
				|ГДЕ
				|	ПоступлениеТоваровУслуг.НомерВходящегоДокументаЭлектронногоОбмена = &КодБазовогоЗаказа";
				Запрос.УстановитьПараметр("КодБазовогоЗаказа", КодБазовогоЗаказа);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НаборЗаписей = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(Источник.Ссылка);
					НаборЗаписей.Прочитать();
					Для каждого Запись Из НаборЗаписей Цикл
						Запись.ДокументОприходования = Выборка.Ссылка; 
						Запись.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
					КонецЦикла; 
					НаборЗаписей.Записать();
				КонецЕсли; 
				 
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
КонецПроцедуры
 
Функция НайтиКорректировки(СсылкаНаЗаказ)
	ЗапросПоКоррекитровкам = Новый Запрос("ВЫБРАТЬ
	|	КорректировкаЗаказаПокупателя.Ссылка
	|ИЗ
	|	Документ.КорректировкаЗаказаПокупателя КАК КорректировкаЗаказаПокупателя
	|ГДЕ
	|	КорректировкаЗаказаПокупателя.Проведен
	|	И КорректировкаЗаказаПокупателя.ЗаказПокупателя = &ЗаказПокупателя");
	
	ЗапросПоКоррекитровкам.УстановитьПараметр("ЗаказПокупателя", СсылкаНаЗаказ);
	Возврат ЗапросПоКоррекитровкам.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция НайтиРезервы(СсылкаНаЗаказ)
	ЗапросПоРезервам = Новый Запрос("ВЫБРАТЬ
	                                |	РезервированиеТоваров.Ссылка
	                                |ИЗ
	                                |	Документ.РезервированиеТоваров КАК РезервированиеТоваров
	                                |ГДЕ
	                                |	РезервированиеТоваров.Проведен
	                                |	И РезервированиеТоваров.Заказ = &Заказ");
	
	ЗапросПоРезервам.УстановитьПараметр("Заказ", СсылкаНаЗаказ);
	Возврат ЗапросПоРезервам.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ЗаполнитьСкидки(СтрокаРеализации, СсылкаНаЗаказ)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ЗаказыПокупателейОстатки.Номенклатура,
	                      |	ЗаказыПокупателейОстатки.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	                      |	ЗаказыПокупателейОстатки.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	                      |	ЗаказыПокупателейОстатки.УсловиеАвтоматическойСкидки,
	                      |	ЗаказыПокупателейОстатки.ЗначениеУсловияАвтоматическойСкидки,
	                      |	ЗаказыПокупателейОстатки.Цена
	                      |ИЗ
	                      |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	                      |			,
	                      |			ЗаказПокупателя = &СсылкаНаЗаказ
	                      |				И Номенклатура = &Номенклатура) КАК ЗаказыПокупателейОстатки
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ПроцентСкидкиНаценки УБЫВ,
	                      |	ПроцентАвтоматическихСкидок УБЫВ");
	Запрос.УстановитьПараметр("СсылкаНаЗаказ",СсылкаНаЗаказ); 
	Запрос.УстановитьПараметр("Номенклатура",СтрокаРеализации.Номенклатура);
	ТЗ_ОстатковВЗаказе = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ_ОстатковВЗаказе.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтрокаРеализации, ТЗ_ОстатковВЗаказе[0]); 	
	КонецЕсли; 
КонецПроцедуры

 

Функция ПроверкаЗадолженности(СсылкаНаЗаказ, ДатаОтгрузки)
	ДоговорКонтрагента = СсылкаНаЗаказ.ДоговорКонтрагента;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		Если НЕ РольДоступна("ПроведениеПлатежныхДокументовБезКонтроляПоРД") И ДоговорКонтрагента.КонтролироватьСуммуЗадолженности Тогда
			
			// Контроль общей суммы задолженности по договору 
			ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");					
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
			Запрос.УстановитьПараметр("НаДату", ДатаОтгрузки);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВзаиморасчетыПоДоговору.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&НаДату, ДоговорКонтрагента = &ДоговорКонтрагента) КАК ВзаиморасчетыПоДоговору
			|
			|ДЛЯ ИЗМЕНЕНИЯ";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				СуммаВзаиморасчетовОстаток = ?(Выборка.СуммаВзаиморасчетовОстаток= NULL, 0, Выборка.СуммаВзаиморасчетовОстаток);
				ДокументОбъект = СсылкаНаЗаказ.ПолучитьОбъект();
				
				СуммаВзаиморасчетовПоДокументу = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СсылкаНаЗаказ.СуммаДокумента, 
				СсылкаНаЗаказ.ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов, 
				ЗаполнениеДокументов.КурсДокумента(ДокументОбъект,ВалютаРегламентированногоУчета), СсылкаНаЗаказ.КурсВзаиморасчетов, 
				ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), СсылкаНаЗаказ.КратностьВзаиморасчетов);
				
				Валюта = ?(ДоговорКонтрагента.ВалютаВзаиморасчетов = NULL, "", ДоговорКонтрагента.ВалютаВзаиморасчетов);
				Если (СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоДокументу) > ДоговорКонтрагента.ДопустимаяСуммаЗадолженности Тогда
					Возврат Ложь;	
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("НаДату", ДатаОтгрузки);
	
	// Выбирает дату самого раннего документа из остатков по договору
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента,
	|	МИНИМУМ(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата) КАК ДатаПервогоДокумента
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(&НаДату, ДоговорКонтрагента = &ДоговорКонтрагента) КАК ВзаиморасчетыПоДокументамОстатки
	|ГДЕ
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки";
	
	РезультатЗапр = Запрос.Выполнить();
	ТЗ = РезультатЗапр.Выгрузить();
	Выборка = РезультатЗапр.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ДопустимоеЧислоДнейЗадолженности = ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
		
		Если Константы.СпособКонтроляДнейЗадолженности.Получить() = Перечисления.СпособыКонтроляДнейЗадолженности.ПоКалендарнымДням Тогда
			РазницаДатВСекундах = (СсылкаНаЗаказ.Дата - Выборка.ДатаПервогоДокумента);
			
			РазницаДней = Цел(РазницаДатВСекундах/(24 * 60 * 60));
		Иначе
			РазницаДней = ЗаполнениеДокументов.ЧислоРабочихДней(Выборка.ДатаПервогоДокумента, СсылкаНаЗаказ.Дата);
		КонецЕсли;
		
		Если РазницаДней > ДопустимоеЧислоДнейЗадолженности Тогда
			
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;

//	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
//	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
//													Отказ, Заголовок);
//	
	Возврат Истина;
КонецФункции
 
Функция ПроверитьЦеныВНПТ(ТаблицаРезервов, ТипЦен)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			ТипЦен = &ТипЦен
	|				И Номенклатура В (&СписокНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("СписокНоменклатуры",ТаблицаРезервов.ВыгрузитьКолонку("Номенклатура"));
	
	ТЗ_Цены = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЧ Из ТаблицаРезервов Цикл
		НайденнаяСтрока = ТЗ_Цены.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока = Неопределено ИЛИ НайденнаяСтрока.Цена = 0 Тогда
			Сообщить("Не найдена цена НПТ для номенклатуры " + СтрокаТЧ.Номенклатура);
			Сообщить("Последовательность не будет создана!!!");
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Истина; 
		
КонецФункции
