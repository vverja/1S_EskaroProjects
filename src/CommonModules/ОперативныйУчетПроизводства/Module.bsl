////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СМЕНАМИ

// Определяет время начала выбранной смены (в секундах от начала дня).
//
// Параметры
//  Смена - ссылка на элемент справочника Смены
//
// Возвращаемое значение
//  число 			- время начала выбранной смены в секундах от начала дня
//  Неопределено 	- смена не выбрана или её график не задан
Функция НачалоСмены(Смена)
	
	//определим начало выбранной смены
	//начало смены определяется по первой строке графика
	//это может не являться общим для конфигурации принципом
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СменыПериодыСмены.НомерСтроки КАК НомерСтроки,
	|	СменыПериодыСмены.ВремяНачала КАК ВремяНачала
	|ИЗ
	|	Справочник.Смены.ПериодыСмены КАК СменыПериодыСмены
	|ГДЕ
	|	СменыПериодыСмены.Ссылка = &Смена
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки"
	);
	Запрос.УстановитьПараметр("Смена", Смена);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВремяНачала - '0001-01-01';
	Иначе
		//в смене не указан график работы или смена пустая.
		Возврат Неопределено;
	КонецЕсли;
	
	
КонецФункции

// Определяет время окончания выбранной смены (в секундах от начала дня).
//
// Параметры
//  Смена - ссылка на элемент справочника Смены
//
// Возвращаемое значение
//  число 			- время начала выбранной смены в секундах от начала дня
//  Неопределено 	- смена не выбрана или её график не задан
Функция КонецСмены(Смена)
	
	//конец смены определяется по последней строке графика
	//это может не являться общим для конфигурации принципом
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СменыПериодыСмены.НомерСтроки КАК НомерСтроки,
	|	СменыПериодыСмены.ВремяОкончания КАК ВремяОкончания 
	|ИЗ
	|	Справочник.Смены.ПериодыСмены КАК СменыПериодыСмены
	|ГДЕ
	|	СменыПериодыСмены.Ссылка = &Смена
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки УБЫВ"
	);
	Запрос.УстановитьПараметр("Смена", Смена);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВремяОкончания - '0001-01-01';
	Иначе
		//в смене не указан график работы или смена пустая.
		Возврат Неопределено;
	КонецЕсли;
	
	
КонецФункции

// Получает дату границы смены (из даты смены и номера смены) с учетом времени (документа).
//  Для смен, переходящих через границу суток, будет возвращена дата той смены, 
//  которая началась к переданной дате и времени.
//
// Параметры
//  ГраницаСмены 	- дата, с учетом времени
//  Смена 			- ссылка на элемент справочника Смены
//
// Возвращаемое значение
//  дата и время границы смены
//
Функция ПолучитьГраницуСменыПоДате(Дата, Смена) Экспорт
	
	// Границей смены (и соответственно - датой смены) считаем дату её начала.
	// Это близко к подходу, принятому в подсистеме ЗУП, т.к. отработанные
	// часы относятся на день начала смены.

	НачалоСмены = НачалоСмены(Смена);
	КонецСмены  = КонецСмены(Смена);
	Если НачалоСмены = Неопределено Тогда
		Возврат НачалоДня(Дата);
	ИначеЕсли НачалоСмены = Неопределено Тогда
		Возврат НачалоДня(Дата);
	Иначе
		
		Если КонецСмены > НачалоСмены Тогда
			
			Возврат НачалоДня(Дата) + НачалоСмены;
			
		Иначе
			
			Если Дата - НачалоДня(Дата) >= НачалоСмены Тогда
				//смена относится к текущей дате
				Возврат НачалоДня(Дата) + НачалоСмены;
			Иначе
				//смена относится к предыдущей дате
				Возврат НачалоДня(Дата) + НачалоСмены - 24*60*60;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Подготавливает текстовое описание предыдущей смены, за которую есть проведенные документы 
// указанного вида ("отчет мастера смены", "отчет о составе смены").
//
// Параметры
//  Подразделение - ссылка на справочник Подразделения
//  ГраницаСмены  - дата (с учетом времени) текущей смены
//  ИмяДокумента  - строка, имя документа 
//
// Возвращаемое значение
//  строка, представление предыдущей смены
Функция ОписаниеПредыдущейСмены(Подразделение, ГраницаСмены, ИмяДокумента) Экспорт
	
	// Получим предыдущую смену - т.е. самую позднюю из смен до границы текущей смены
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Документ.Смена,
	|	НАЧАЛОПЕРИОДА(Документ.ГраницаСмены, ДЕНЬ) КАК Дата,
	|	Документ.Ответственный
	|ИЗ
	|	Документ."+ИмяДокумента+" КАК Документ
	|ГДЕ
	|	Документ.Подразделение = &Подразделение
	|	И " 
	+ ?(Метаданные.Документы[ИмяДокумента].Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить, 
	"Документ.Проведен", 
	"НЕ (Документ.ПометкаУдаления)") 
	+ "
	|	И Документ.ГраницаСмены < &ГраницаСмены
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Дата УБЫВ"
	);
	
	Запрос.УстановитьПараметр("Подразделение", 		Подразделение);
	Запрос.УстановитьПараметр("ГраницаСмены", 		ГраницаСмены);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ПредставлениеСмены(Выборка.Дата, Выборка.Смена) + " (" + СокрЛП(Выборка.Ответственный) + ")";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает представление смены
//
// Параметры
//  ГраницаСмены  - граница смены
//  Смена         - ссылка на справочник Смены
//
// Возвращаемое значение
//  Строка, представление смены
Функция ПредставлениеСмены(ГраницаСмены, Смена) Экспорт
	
	Возврат Формат(ГраницаСмены, "ДЛФ=D") + ?(Смена.Пустая(), "", " " + Смена);
	
КонецФункции

// Возвращает представление периода смены
// Параметры
//  ГраницаСмены  - граница смены
//  Смена         - ссылка на справочник Смены
//
// Возвращаемое значение
//  Строка, представление смены вида 01.01.0001 (00:00 - 23:59)
Функция ПредставлениеПериодаСмены(ГраницаСмены, Смена) Экспорт
	
	НачалоСмены = НачалоСмены(Смена);
	КонецСмены	= КонецСмены(Смена);
	
	Если НачалоДня(ГраницаСмены) = '0001-01-01' Тогда
		Возврат "";
	КонецЕсли;
	
	Если НачалоСмены=Неопределено ИЛИ КонецСмены = Неопределено Тогда
		Возврат Формат(ГраницаСмены,"ДЛФ=D");
	КонецЕсли;
	
	Возврат 
		Формат(ГраницаСмены,"ДЛФ=D") 
		+ " (" + Формат('0001-01-01' + НачалоСмены,"ДФ=ЧЧ:мм") 
		+ " - " 
		+ Формат('0001-01-01' + КонецСмены,"ДФ=ЧЧ:мм") + ")";
	
КонецФункции

// Возвращает дату окончания смены (с учетом времени)
// Параметры
//  ГраницаСмены  - граница смены
//  Смена         - ссылка на справочник Смены
//
// Возвращаемое значение
//  Дата, последняя секунда смены
Функция ДатаВремяОкончанияСмены(ГраницаСмены, Смена) Экспорт
	
	КонецСмены	= КонецСмены(Смена);
	
	Если НачалоДня(ГраницаСмены) = '0001-01-01' Тогда
		Возврат ГраницаСмены;
	КонецЕсли;
	
	Если КонецСмены = Неопределено Тогда
		Возврат КонецДня(ГраницаСмены);
	КонецЕсли;
	
	НачалоСмены = (ГраницаСмены - НачалоДня(ГраницаСмены)); // кол-во секунд от начала смены
	Если НачалоСмены > КонецСмены Тогда
		// Смена переходит на следующие сутки
		Возврат КонецДня(ГраницаСмены) + 1 + КонецСмены;
	Иначе
		Возврат НачалоДня(ГраницаСмены) + КонецСмены;
	КонецЕсли;
	
КонецФункции

// Возвращает массив смен, начало и окончание которых находятся в разных днях
// Параметры
//  нет
//
// Возвращаемое значение
//  Массив элементов справочника Смены
Функция СписокПереходящихСмен()
	
	// Выберем смены, у которых время начала в первой строке табличной части периодов
	// больше, чем время окончания в последней строке
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СменыПериодыСмены.Ссылка КАК Смена
	|ИЗ
	|	Справочник.Смены.ПериодыСмены КАК СменыПериодыСмены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СменыПериодыСмены.Ссылка КАК Ссылка,
	|			МИНИМУМ(СменыПериодыСмены.НомерСтроки) КАК НомерПервойСтроки,
	|			МАКСИМУМ(СменыПериодыСмены.НомерСтроки) КАК НомерПоследнейСтроки
	|		ИЗ
	|			Справочник.Смены.ПериодыСмены КАК СменыПериодыСмены
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СменыПериодыСмены.Ссылка) КАК ПериодыСмен
	|		ПО СменыПериодыСмены.Ссылка = ПериодыСмен.Ссылка
	|			И (СменыПериодыСмены.НомерСтроки = ПериодыСмен.НомерПервойСтроки
	|				ИЛИ СменыПериодыСмены.НомерСтроки = ПериодыСмен.НомерПоследнейСтроки)
	|
	|СГРУППИРОВАТЬ ПО
	|	СменыПериодыСмены.Ссылка
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СменыПериодыСмены.НомерСтроки = ПериодыСмен.НомерПервойСтроки
	|				ТОГДА СменыПериодыСмены.ВремяНачала
	|			ИНАЧЕ NULL
	|		КОНЕЦ) > МАКСИМУМ(ВЫБОР
	|			КОГДА СменыПериодыСмены.НомерСтроки = ПериодыСмен.НомерПоследнейСтроки
	|				ТОГДА СменыПериодыСмены.ВремяОкончания
	|			ИНАЧЕ NULL
	|		КОНЕЦ)";
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Смена");
	
КонецФункции

// Получает смену, в которую по сменному графику в указанную дату должен работать сотрудник.
// Если на указанную дату такой смены нет, то выполняется поиск на предыдущую дату среди смен,
// начало и окончание которых находится в разных днях.
// 
// Параметры
//  ФизЛицо - ссылка на справочник ФизическиеЛица
//  Дата    - дата (с временем 00:00:00)
//
// Возвращаемое значение
//  СправочникСсылка.Смены
//
Функция ПолучитьСменуПоГрафику(ФизЛицо, Дата) Экспорт
	
	Если ФизЛицо.Пустая() Тогда
		
		Возврат Справочники.Смены.ПустаяСсылка();
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		Запрос.УстановитьПараметр("Дата", 	 НачалоДня(Дата));
		
		// Определяем график работы ФизЛица
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы КАК График,
		|	0 КАК Порядок
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(, Сотрудник.Физлицо = &ФизЛицо) КАК РаботникиОрганизацийСрезПоследних
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	РаботникиСрезПоследних.ГрафикРаботы,
		|	1
		|ИЗ
		|	РегистрСведений.Работники.СрезПоследних(, Физлицо = &ФизЛицо) КАК РаботникиСрезПоследних
		|ГДЕ
		|	РаботникиСрезПоследних.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	График";
					   
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Справочники.Смены.ПустаяСсылка();
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ГрафикРаботы = Выборка.График;
		Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
		
		ПереходящиеСмены = СписокПереходящихСмен();
		Запрос.УстановитьПараметр("ПереходящиеСмены", ПереходящиеСмены);
		
		// Определяем смену для текущей или вчерашней даты
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	ГрафикиРаботыПоСменам.Смена КАК Смена,
		|	ГрафикиРаботыПоСменам.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
		|ГДЕ
		|	ГрафикиРаботыПоСменам.ГрафикРаботы = &ГрафикРаботы
		|	И (ГрафикиРаботыПоСменам.Дата = &Дата
		|				И ГрафикиРаботыПоСменам.Смена ССЫЛКА Справочник.Смены
		|				И ГрафикиРаботыПоСменам.Смена <> ЗНАЧЕНИЕ(Справочник.Смены.ПустаяСсылка)
		|			ИЛИ ГрафикиРаботыПоСменам.Дата = ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, -1)
		|				И ГрафикиРаботыПоСменам.Смена В (&ПереходящиеСмены))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ,
		|	Смена";
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат Справочники.Смены.ПустаяСсылка();
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Смена;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// По регистру ЗавершенныеСмены проверяет возможность редактирования документов, 
// если редактировать нельзя - то устанавливает Отказ.
// Редактирование документов закрытых смен не запрещается, если это пометка на удаление не проведенного документа.
//
// Параметры
//  Объект - документ-объект имеющий реквизиты "Подразделение" и "ГраницаСмены"
//  Отказ  - булево, будет изменено в процедуре на Истина, если редактирование запрещено.
Процедура ПроверкаЗапретаРедактированияЗакрытыхСмен(Объект, Отказ, РежимЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ Отказ Тогда
		
		Если РольДоступна("ПолныеПрава") Тогда
			//Запрет не распространяется на пользователей с полными правами
		ИначеЕсли НЕ Объект.Проведен И РежимЗаписи<>РежимЗаписиДокумента.Проведение Тогда
			//Не проведенные документы редактировать можем разрешать.
			//Это может понадобиться как минимум в двух случаях:
			//  - редактирования шаблонов;
			//	- удаления "неправильных" непроведенных документов.
		Иначе
			//Проверим, а не относится ли этот документ к закрытой смене.
			
			//Процедура вызывается перед записью, поэтому значения реквизитов
			//объекта могут отличаться от данных документа в базе.
			//Поэтому выполним две проверки:
			
			//1. Документ в базе не относится к закрытому периоду:
			
			ТекстЗапроса = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДанныеДокумента.ГраницаСмены КАК ГраницаСмены,
			|	ДанныеДокумента.Подразделение
			|ИЗ
			|	РегистрСведений.ЗавершенныеСмены КАК ЗавершенныеСмены
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
			|			%ИмяДокумента% КАК ДанныеДокумента
			|		ПО ЗавершенныеСмены.Подразделение = ДанныеДокумента.Подразделение
			|			И ЗавершенныеСмены.ГраницаСмены >= ДанныеДокумента.ГраницаСмены
			|		ГДЕ
			|			ДанныеДокумента.Ссылка = &Ссылка";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", "Документ."+Объект.Метаданные().Имя);
			
			Запрос = Новый Запрос(ТекстЗапроса);
			
			Запрос.УстановитьПараметр("Ссылка",			Объект.Ссылка);
			
			Если НЕ Запрос.Выполнить().Пустой() Тогда
				ОбщегоНазначения.СообщитьОбОшибке(
					"Редактирование этого документа запрещено. Документ относится к завершившейся смене.",
					Отказ,
					"Запись документа "+Объект.Метаданные().Синоним,
					СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
			
			//2. Новые значения реквизитов не относятся к закрытому периоду:
			
			Запрос = Новый Запрос(
		    "ВЫБРАТЬ
			|	ЗавершенныеСмены.ГраницаСмены
			|ИЗ
			|	РегистрСведений.ЗавершенныеСмены КАК ЗавершенныеСмены
			|ГДЕ
			|	ЗавершенныеСмены.Подразделение = &Подразделение
			|	И ЗавершенныеСмены.ГраницаСмены >= &ГраницаСмены"
			);
			
			Запрос.УстановитьПараметр("ГраницаСмены",	Объект.ГраницаСмены);
			Запрос.УстановитьПараметр("Подразделение",	Объект.Подразделение);
			
			Если НЕ Запрос.Выполнить().Пустой() Тогда
				ОбщегоНазначения.СообщитьОбОшибке(
					"Редактирование данных этой смены запрещено. Изменения не могут быть записаны.", 
					Отказ, 
					"Запись документа "+ Объект.Метаданные().Синоним, 
					СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
