Функция РазделыУчета() Экспорт
	
	РазделыУчета = Новый Массив();
	РазделыУчета.Добавить("НезавершенноеПроизводство");
	РазделыУчета.Добавить("БракВПроизводстве");
	РазделыУчета.Добавить("ЗатратыНаВыпускПродукции");
	РазделыУчета.Добавить("Затраты");
	РазделыУчета.Добавить("ПартииТоваров");
	РазделыУчета.Добавить("МатериалыВЭксплуатации");
	
	Возврат РазделыУчета;
	
КонецФункции

Функция ПолучитьИсточникиДанных(РазделУчета, ВидОтраженияВУчете)
	
	ИсточникиДанных = Новый Массив();
	ИсточникДанных  = Новый Структура("ТекстЗапроса, Комментарий");
	
	Если РазделУчета = "ПартииТоваров" Тогда
		// Для этого раздела - два источника.
		// Первый: 
		ИсточникДанных.ТекстЗапроса = ПолучитьЗапросПоРегиструПартииТоваровНаСкладах(ВидОтраженияВУчете);
		ИсточникДанных.Комментарий  = "Партии товаров на складах";
		ИсточникиДанных.Добавить(ИсточникДанных);
		// Второй:
		ИсточникДанных  = Новый Структура("ТекстЗапроса, Комментарий");
		ИсточникДанных.ТекстЗапроса = ПолучитьЗапросПоРегиструПартииТоваровПереданные(ВидОтраженияВУчете);
		ИсточникДанных.Комментарий  = "Партии товаров переданных";
		// Второй источник добавляется в массив в конце функции.
		// Для остальных разделов - по одному источнику данных.
	ИначеЕсли РазделУчета = "НезавершенноеПроизводство" Тогда
		ИсточникДанных.ТекстЗапроса = ПолучитьЗапросПоРегиструНезавершенноеПроизводство(ВидОтраженияВУчете);
		ИсточникДанных.Комментарий  = "Незавершенное производство";
	ИначеЕсли РазделУчета = "Затраты" Тогда
		ИсточникДанных.ТекстЗапроса = ПолучитьЗапросПоРегиструЗатраты(ВидОтраженияВУчете);
		ИсточникДанных.Комментарий  = "Затраты";
	ИначеЕсли РазделУчета = "БракВПроизводстве" Тогда
		ИсточникДанных.ТекстЗапроса = ПолучитьЗапросПоРегиструБракВПроизводстве(ВидОтраженияВУчете);
		ИсточникДанных.Комментарий  = "Брак в производстве";
	ИначеЕсли РазделУчета = "ЗатратыНаВыпускПродукции" Тогда
		ИсточникДанных.ТекстЗапроса = ПолучитьЗапросПоРегиструЗатратыНаВыпускПродукцииНаработка(ВидОтраженияВУчете);
		ИсточникДанных.Комментарий  = "Затраты на выпуск продукции наработка";
	ИначеЕсли РазделУчета = "МатериалыВЭксплуатации" Тогда
		ИсточникДанных.ТекстЗапроса = ПолучитьЗапросПоРегиструПартииМатериаловВЭксплуатации(ВидОтраженияВУчете);
		ИсточникДанных.Комментарий  = "Партии материалов в эксплуатации";
	КонецЕсли;	
	
	ИсточникиДанных.Добавить(ИсточникДанных);
	Возврат ИсточникиДанных;
	
КонецФункции

Функция НетОстатковПоРазделуУчета(РазделУчета,ВидОтраженияВУчете,ДатаОстатков) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПериодКонец",ДатаОстатков);
	Запрос.УстановитьПараметр("ГраницаПериода",Новый Граница(ДатаОстатков,ВидГраницы.Включая));
	
	НетОстатков = Истина;
	Для Каждого ИсточникДанных Из ПолучитьИсточникиДанных(РазделУчета, ВидОтраженияВУчете) Цикл
		Запрос.Текст = СтрЗаменить(ИсточникДанных.ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 1");
		НетОстатков  = НетОстатков И Запрос.Выполнить().Пустой();
	КонецЦикла;
	
	Возврат НетОстатков;
	
КонецФункции	

///////////////////////////////////////////////////////////////////////////////////////////
//ФУНКЦИИ ПОЛУЧЕНИЯ ЗАПРОСОВ ПО РЕГИСТРАМ, ДЛЯ ПЕРЕНОСА ОСТАТКОВ В ПОДСИСТЕМУ РАСШИРЕННОЙ АНАЛИТИКИ

// Функция формирует текст запроса по регистру "Незавершенное производство".
//
// Параметры:
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструНезавершенноеПроизводство(ВидОтраженияВУчете) Экспорт
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат,
		|	ЕСТЬNULL(Подразделения.Подразделение, СпособыРаспределения.Подразделение) КАК Подразделение,
		|	СпособыРаспределения.СпособРаспределенияЗатрат КАК СпособРаспределенияЗатрат
		|	
		|ПОМЕСТИТЬ СпособыРаспределения
		|
		|ИЗ
		|	РегистрСведений.СпособыРаспределенияСтатейЗатрат.СрезПоследних(&ГраницаПериода, 
		|	) КАК СпособыРаспределения
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			Подразделения.Родитель КАК Родитель,
		|			Подразделения.Ссылка КАК Подразделение
		|		ИЗ
		|			Справочник.Подразделения КАК Подразделения
		|		
		|		) КАК Подразделения
		|	ПО
		|		СпособыРаспределения.Подразделение = 
		|			ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|		ИЛИ (СпособыРаспределения.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
		|			И 
		|			(СпособыРаспределения.Подразделение = Подразделения.Подразделение
		|			ИЛИ СпособыРаспределения.Подразделение = Подразделения.Родитель
		|			ИЛИ СпособыРаспределения.Подразделение = Подразделения.Родитель.Родитель
		|			ИЛИ СпособыРаспределения.Подразделение = Подразделения.Родитель.Родитель.Родитель)
		|			)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтатьяЗатрат, Подразделение
		|			
		|;
		|
		|ВЫБРАТЬ
		|	*,
		|	&РазделУчета КАК РазделУчета,
		|	НезавершенноеПроизводство.Подразделение КАК Подразделение,
		|	НезавершенноеПроизводство.СтатьяЗатрат КАК СтатьяЗатрат,
		|
		|	ВЫБОР КОГДА НезавершенноеПроизводство.Затрата ССЫЛКА Перечисление.ХарактерЗатрат ТОГДА
		|		НезавершенноеПроизводство.Затрата
		|	ИНАЧЕ
		|		ЕСТЬNULL(НезавершенноеПроизводство.СтатьяЗатрат.ХарактерЗатрат,Неопределено)
		|	КОНЕЦ КАК ХарактерЗатрат,
		|
		|   ВЫБОР КОГДА СпособыРаспределения.СпособРаспределенияЗатрат ЕСТЬ NULL ТОГДА
		|		ВЫБОР КОГДА НезавершенноеПроизводство.Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск ТОГДА
		|			НезавершенноеПроизводство.Затрата
		|		ИНАЧЕ
		|			Неопределено
		|		КОНЕЦ
		|   ИНАЧЕ
		|		СпособыРаспределения.СпособРаспределенияЗатрат
		|   КОНЕЦ КАК СпособРаспределенияЗатрат,
		|
		|	&ПериодКонец КАК Период,
		|	Неопределено КАК КодОперации,
		|
		|	НезавершенноеПроизводство.КоличествоОстаток КАК Количество,
		|	НезавершенноеПроизводство.СтоимостьОстаток КАК Стоимость
		|
		|ИЗ
		|	РегистрНакопления.НезавершенноеПроизводство.Остатки(&ГраницаПериода,) КАК НезавершенноеПроизводство
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ СпособыРаспределения КАК СпособыРаспределения
		|   ПО
		|   	НезавершенноеПроизводство.СтатьяЗатрат = СпособыРаспределения.СтатьяЗатрат
		|   	И (НезавершенноеПроизводство.Подразделение = СпособыРаспределения.Подразделение ИЛИ СпособыРаспределения.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
		|
		|";
		
	Иначе
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СпособыРаспределения.Организация КАК Организация,
		|	СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат,
		|	ЕСТЬNULL(Подразделения.Подразделение, СпособыРаспределения.Подразделение) КАК Подразделение,
		|	ЕСТЬNULL(ПланСчетов.Счет, СпособыРаспределения.СчетЗатрат) КАК СчетЗатрат,
		|	СпособыРаспределения.СпособРаспределенияЗатрат
		|	
		|ПОМЕСТИТЬ СпособыРаспределения
		|
		|ИЗ
		|	РегистрСведений.СпособыРаспределенияСтатейЗатратОрганизаций.СрезПоследних(&ГраницаПериода, 
		|	) КАК СпособыРаспределения
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			Подразделения.Родитель КАК Родитель,
		|			Подразделения.Владелец КАК Организация,
		|			Подразделения.Ссылка КАК Подразделение
		|		ИЗ
		|			Справочник.ПодразделенияОрганизаций КАК Подразделения
		|		) КАК Подразделения
		|	ПО
		|		СпособыРаспределения.Организация = Подразделения.Организация И
		|		СпособыРаспределения.Подразделение = 
		|			ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|		ИЛИ (СпособыРаспределения.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
		|			И 
		|			(СпособыРаспределения.Подразделение = Подразделения.Подразделение
		|			ИЛИ СпособыРаспределения.Подразделение = Подразделения.Родитель
		|			ИЛИ СпособыРаспределения.Подразделение = Подразделения.Родитель.Родитель
		|			ИЛИ СпособыРаспределения.Подразделение = Подразделения.Родитель.Родитель.Родитель)
		|			)
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			ПланСчетов.Ссылка КАК Счет
		|		ИЗ
		|			ПланСчетов.Хозрасчетный КАК ПланСчетов
		|		ГДЕ
		|			ПланСчетов.Ссылка В ИЕРАРХИИ (&МассивСчетовЗатрат)
		|		) КАК ПланСчетов
		|	ПО
		|		СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет
		|		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель
		|		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель.Родитель
		|		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель.Родитель.Родитель
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация, СтатьяЗатрат, Подразделение, СчетЗатрат
		|			
		|;
		|
		|ВЫБРАТЬ
		|
		|	&РазделУчета КАК РазделУчета,
		|	НезавершенноеПроизводствоБух.Организация,
		|	
		|	НезавершенноеПроизводствоБух.Подразделение КАК ПодразделениеОрганизации,
		|	НезавершенноеПроизводствоБух.СчетУчета,
		|	НезавершенноеПроизводствоБух.СтатьяЗатрат,
		|	НезавершенноеПроизводствоБух.НоменклатурнаяГруппа,
		|	НезавершенноеПроизводствоБух.Заказ,
		|	НезавершенноеПроизводствоБух.Затрата,
		|	НезавершенноеПроизводствоБух.ХарактеристикаЗатраты,
		|	НезавершенноеПроизводствоБух.СерияЗатраты,
		|
		|	ВЫБОР КОГДА НезавершенноеПроизводствоБух.Затрата ССЫЛКА Перечисление.ХарактерЗатрат ТОГДА
		|		НезавершенноеПроизводствоБух.Затрата
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК ХарактерЗатрат,
		|
		|   ВЫБОР КОГДА СпособыРаспределения.СпособРаспределенияЗатрат ЕСТЬ NULL ТОГДА
		|		ВЫБОР КОГДА НезавершенноеПроизводствоБух.Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск ТОГДА
		|			НезавершенноеПроизводствоБух.Затрата
		|		ИНАЧЕ
		|			Неопределено
		|		КОНЕЦ
		|	ИНАЧЕ
		|		СпособыРаспределения.СпособРаспределенияЗатрат
		|	КОНЕЦ КАК СпособРаспределенияЗатрат,
		|
		|	&ПериодКонец КАК Период,
		|	Неопределено КАК КодОперации,
		|
		|	НезавершенноеПроизводствоБух.НалоговоеНазначение КАК НалоговоеНазначение,
		|	НезавершенноеПроизводствоБух.НДСВходящийОстаток КАК НДСВходящий,
		|	НезавершенноеПроизводствоБух.НДСКредитОстаток КАК НДСКредит,
		|	НезавершенноеПроизводствоБух.КоличествоОстаток КАК КоличествоНУ,
		|	НезавершенноеПроизводствоБух.СтоимостьНУОстаток КАК СтоимостьНУ,
		|
		|	НезавершенноеПроизводствоБух.КоличествоОстаток КАК Количество,
		|	НезавершенноеПроизводствоБух.СтоимостьОстаток КАК Стоимость
		|
		|ИЗ
		|	РегистрНакопления.НезавершенноеПроизводствоБухгалтерскийУчет.Остатки(&ГраницаПериода,) КАК НезавершенноеПроизводствоБух
		|
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыРаспределения КАК СпособыРаспределения
		|   	ПО
		|   		НезавершенноеПроизводствоБух.Организация = СпособыРаспределения.Организация И 
		|   		НезавершенноеПроизводствоБух.СтатьяЗатрат = СпособыРаспределения.СтатьяЗатрат
		|   		И (НезавершенноеПроизводствоБух.Подразделение = СпособыРаспределения.Подразделение ИЛИ СпособыРаспределения.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
		|
		
		|";
		
	КонецЕсли;	
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(ТекстЗапроса, ВидОтраженияВУчете);	
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструНезавершенноеПроизводство()	

// Функция формирует текст запроса по регистру "Затраты".
//
// Параметры:
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструЗатраты(ВидОтраженияВУчете) Экспорт
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	*,
		|	&РазделУчета КАК РазделУчета,
		|	//ДляУпрУчета Подразделение КАК Подразделение,
		|	//ДляБухУчета Подразделение КАК ПодразделениеОрганизации,
		|	//ДляНалУчета Подразделение КАК ПодразделениеОрганизации,
		|
		|	//ДляУпрУчета ЕСТЬNULL(СтатьяЗатрат.ХарактерЗатрат,Неопределено) КАК ХарактерЗатрат,
		|
		|	&ПериодКонец КАК Период,
		|	Неопределено КАК КодОперации,
		|
		|	//ДляНалУчета НалоговоеНазначение КАК НалоговоеНазначение,
		|	//ДляНалУчета НДСВходящийОстаток КАК НДСВходящий,
		|	//ДляНалУчета НДСКредитОстаток КАК НДСКредит,
		|	//ДляНалУчета СуммаОстаток КАК СтоимостьНУ
		|	//ДляУпрУчета СуммаОстаток КАК Стоимость
		|	//ДляБухУчета СуммаОстаток КАК Стоимость	
		|ИЗ
		|	РегистрНакопления.Затраты%СуффиксУчета%.Остатки(&ГраницаПериода,) КАК Затраты
		|";
		
	Иначе
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|
		|	&РазделУчета КАК РазделУчета,
		|	ЗатратыБух.Организация,
		|	
		|	ЗатратыБух.Подразделение КАК ПодразделениеОрганизации,
		|	ЗатратыБух.СчетУчета,
		|	ЗатратыБух.СтатьяЗатрат,
		|	ЗатратыБух.НоменклатурнаяГруппа,
		|	ЗатратыБух.Заказ,
		|
		|	&ПериодКонец КАК Период,
		|	Неопределено КАК КодОперации,
		|
		|	ЗатратыБух.НалоговоеНазначение КАК НалоговоеНазначение,
		|	ЗатратыБух.НДСВходящийОстаток КАК НДСВходящий,
		|	ЗатратыБух.НДСКредитОстаток КАК НДСКредит,
		|	ЗатратыБух.СуммаНУОстаток КАК СтоимостьНУ,
		|	ЗатратыБух.СуммаОстаток КАК Стоимость	 
		|	
		|ИЗ
		|	РегистрНакопления.ЗатратыБухгалтерскийУчет.Остатки(&ГраницаПериода,) КАК ЗатратыБух
		|
		|";
		
	КонецЕсли;	
	
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(ТекстЗапроса, ВидОтраженияВУчете);	
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструЗатраты()

// Функция формирует текст запроса по регистру "Брак в производстве".
//
// Параметры:
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструБракВПроизводстве(ВидОтраженияВУчете) Экспорт
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	*,
		|	&РазделУчета КАК РазделУчета,
		|	//ДляУпрУчета Подразделение КАК Подразделение,
		|	//ДляБухУчета Подразделение КАК ПодразделениеОрганизации,
		|	//ДляНалУчета Подразделение КАК ПодразделениеОрганизации,
		|
		|	//ДляУпрУчета ЕСТЬNULL(СтатьяЗатрат.ХарактерЗатрат,Неопределено) КАК ХарактерЗатрат,
		|
		|	&ПериодКонец КАК Период,
		|	Неопределено КАК КодОперации,
		|
		|	//ДляНалУчета НалоговоеНазначение КАК НалоговоеНазначение,
		|	//ДляНалУчета НДСВходящийОстаток КАК НДСВходящий,
		|	//ДляНалУчета НДСКредитОстаток КАК НДСКредит,
		|	//ДляНалУчета СуммаОстаток КАК СтоимостьНУ
		|	//ДляУпрУчета СуммаОстаток КАК Стоимость
		|	//ДляБухУчета СуммаОстаток КАК Стоимость	
		|ИЗ
		|	РегистрНакопления.БракВПроизводстве%СуффиксУчета%.Остатки(&ГраницаПериода,) КАК БракВПроизводстве
		|";
	
	Иначе
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|
		|	&РазделУчета КАК РазделУчета,
		|	БракВПроизводствеБух.Организация,
		|	
		|	БракВПроизводствеБух.Подразделение КАК ПодразделениеОрганизации,
		|	БракВПроизводствеБух.СчетУчета,
		|	БракВПроизводствеБух.СтатьяЗатрат,
		|	БракВПроизводствеБух.НоменклатурнаяГруппа,
		|	БракВПроизводствеБух.Заказ,
		|	БракВПроизводствеБух.Продукция,
		|	БракВПроизводствеБух.ХарактеристикаПродукции,
		|	БракВПроизводствеБух.СерияПродукции,
		|
		|	&ПериодКонец КАК Период,
		|	Неопределено КАК КодОперации,
		|
		|	БракВПроизводствеБух.НалоговоеНазначение КАК НалоговоеНазначение,
		|	БракВПроизводствеБух.НДСВходящийОстаток КАК НДСВходящий,
		|	БракВПроизводствеБух.НДСКредитОстаток КАК НДСКредит,
		|	БракВПроизводствеБух.СуммаНУОстаток КАК СтоимостьНУ,
		|	БракВПроизводствеБух.СуммаОстаток КАК Стоимость	 
		|	
		|ИЗ
		|	РегистрНакопления.БракВПроизводствеБухгалтерскийУчет.Остатки(&ГраницаПериода,) КАК БракВПроизводствеБух
		|
		|";
		
	КонецЕсли;	
	
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(ТекстЗапроса, ВидОтраженияВУчете);	
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструБракВПроизводстве()

// Функция формирует текст запроса по регистру "Выпуск продукции (наработка)".
//
// Параметры:
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструЗатратыНаВыпускПродукцииНаработка(ВидОтраженияВУчете) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*,
	|	&РазделУчета КАК РазделУчета,
	|	//ДляУпрУчета Подразделение КАК Подразделение,
	|	//ДляБухУчета Подразделение КАК ПодразделениеОрганизации,
	|
	|	//ДляУпрУчета ЕСТЬNULL(СтатьяЗатрат.ХарактерЗатрат,Неопределено) КАК ХарактерЗатрат,
	|
	|	&ПериодКонец КАК Период,
	|	Неопределено КАК КодОперации,
	|
	|	//ДляУпрУчета КоличествоОстаток КАК Количество
	|	//ДляБухУчета КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукцииНаработка%СуффиксУчета%.Остатки(&ГраницаПериода,) КАК ЗатратыНаВыпускПродукцииНаработка
	|";
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(ТекстЗапроса, ВидОтраженияВУчете);	
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструЗатратыНаВыпускПродукцииНаработка()

// Функция формирует текст запроса по регистру "Партии товаров на складах".
//
// Параметры:
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструПартииТоваровНаСкладах(ВидОтраженияВУчете) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Затрата,
	|	Склад КАК Склад,
	|	ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	СерияНоменклатуры КАК СерияЗатраты,
	|	//ДляУпрУчета ВЫБОР КОГДА (СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Продукция))
	|	//ДляУпрУчета 			ИЛИ (СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Оборудование))
	|	//ДляУпрУчета 			ИЛИ (СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.КупленныйОтложеннаяОтгрузка)) ТОГДА
	|	//ДляУпрУчета 	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Купленный)
	|	//ДляУпрУчета ИНАЧЕ 
	|	//ДляУпрУчета 	ВЫБОР КОГДА СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВозвратнаяТараОтложеннаяОтгрузка) ТОГДА
	|	//ДляУпрУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВозвратнаяТара)
	|	//ДляУпрУчета 	ИНАЧЕ
	|	//ДляУпрУчета 		СтатусПартии 
	|	//ДляУпрУчета 	КОНЕЦ
	|	//ДляУпрУчета КОНЕЦ КАК СтатусПартии,
	|	//ДляБухУчета СчетУчета КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|	Качество КАК Качество,
	|	Организация КАК Организация,
	|	&РазделУчета КАК РазделУчета,
	|
	|	&ПериодКонец КАК Период,
	|	Неопределено КАК КодОперации,
	|
	|	//ДляБухУчета ДокументОприходования КАК ДокументОприходования,
	|	//ДляБухУчета НалоговоеНазначение КАК НалоговоеНазначение,
	|	//ДляБухУчета НДСВходящийОстаток КАК НДСВходящий,
	|	//ДляБухУчета НДСКредитОстаток КАК НДСКредит,
	|	//ДляБухУчета КоличествоОстаток КАК КоличествоНУ,
	|	//ДляБухУчета СтоимостьНУОстаток КАК СтоимостьНУ,
	|	//ДляУпрУчета КоличествоОстаток КАК Количество,
	|	//ДляУпрУчета СтоимостьОстаток КАК Стоимость
	|	//ДляБухУчета КоличествоОстаток КАК Количество,
	|	//ДляБухУчета СтоимостьОстаток КАК Стоимость	
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах%СуффиксУчета%.Остатки(&ГраницаПериода,
	|	//ДляУпрУчета (СтатусПартии	<> ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.НаКомиссию)) 
	|	//ДляУпрУчета   И  (СтатусПартии <> ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВПереработку))
	|	//ДляУпрУчета   И  (СтатусПартии <> ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ПоОрдеру))
	|	//ДляБухУчета (НЕ СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссиюВсего)))
	|	//ДляБухУчета   И (НЕ СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВсего)))
	|	) КАК ПартииТоваровНаСкладах
	|";
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(ТекстЗапроса, ВидОтраженияВУчете);
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструПартииТоваровНаСкладах()

// Функция формирует текст запроса по регистру "Партии товаров переданные".
//
// Параметры:
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструПартииТоваровПереданные(ВидОтраженияВУчете) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Затрата,
	|	ДоговорКонтрагента КАК ДоговорКомиссионера,
	|	ДоговорКонтрагента.Владелец КАК Комиссионер,
	|	ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	//ДляУпрУчета СтатусПартии КАК СтатусПартии,
	|	//ДляБухУчета СчетУчета КАК СчетУчета,
	|	Организация КАК Организация,
	|	&РазделУчета КАК РазделУчета,
	|
	|	&ПериодКонец КАК Период,
	|	Неопределено КАК КодОперации,
	|
	|	//ДляБухУчета ДокументПередачи КАК ДокументПередачи,
	|	//ДляБухУчета ДокументОприходования КАК ДокументОприходования,
	|	//ДляБухУчета НалоговоеНазначение КАК НалоговоеНазначение,
	|	//ДляБухУчета НДСВходящийОстаток КАК НДСВходящий,
	|	//ДляБухУчета НДСКредитОстаток КАК НДСКредит,
	|	//ДляБухУчета КоличествоОстаток КАК КоличествоНУ,
	|	//ДляБухУчета СтоимостьНУОстаток КАК СтоимостьНУ,
	|	//ДляУпрУчета КоличествоОстаток КАК Количество,
	|	//ДляУпрУчета СтоимостьОстаток КАК Стоимость
	|	//ДляБухУчета КоличествоОстаток КАК Количество,
	|	//ДляБухУчета СтоимостьОстаток КАК Стоимость	
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданные%СуффиксУчета%.Остатки(&ГраницаПериода,
	|	//ДляУпрУчета (СтатусПартии	<> ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.НаКомиссию)) 
	|	//ДляУпрУчета   И  (СтатусПартии <> ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВПереработку))
	|	//ДляУпрУчета   И  (СтатусПартии <> ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ПоОрдеру))
	|	//ДляБухУчета (НЕ СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссиюВсего)))
	|	//ДляБухУчета   И (НЕ СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВсего)))
	|	) КАК ПартииТоваровПереданные
	|";
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(ТекстЗапроса, ВидОтраженияВУчете);	
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструПартииТоваровПереданные()

// Функция формирует текст запроса по регистру "Партии материалов в эксплуатации".
//
// Параметры:
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросПоРегиструПартииМатериаловВЭксплуатации(ВидОтраженияВУчете) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляБухУчета Организация КАК Организация,
	|	Номенклатура КАК Затрата,
	|	ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	СерияНоменклатуры КАК СерияЗатраты,
	|	//ДляУпрУчета Подразделение КАК Подразделение,
	|	//ДляБухУчета Подразделение КАК ПодразделениеОрганизации,
	|    //ДляБухУчета ВЫБОР КОГДА СхемаНазначенияИспользования.ВидМатериала = ЗНАЧЕНИЕ(Перечисление.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет) ТОГДА Неопределено ИНАЧЕ СхемаНазначенияИспользования.СчетПередачиБУ КОНЕЦ КАК СчетУчета,
	|	ДокументПередачи КАК ДокументПередачи,
	|	ФизЛицо КАК ФизЛицо,
	|	СхемаНазначенияИспользования КАК СхемаНазначенияИспользования,
	|	СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МатериалыВЭксплуатации) КАК РазделУчета,
	|
	|	&ПериодКонец КАК Период,
	|	Неопределено КАК КодОперации,
	|
	|	//ДляБухУчета ДокументОприходования КАК ДокументОприходования,
	|	//ДляБухУчета НалоговоеНазначение КАК НалоговоеНазначение,
	|	//ДляБухУчета НДСВходящийОстаток КАК НДСВходящий,
	|	//ДляБухУчета НДСКредитОстаток КАК НДСКредит,
	|	//ДляБухУчета КоличествоОстаток КАК КоличествоНУ,
	|	//ДляБухУчета СтоимостьНУОстаток КАК СтоимостьНУ,
	|	//ДляУпрУчета КоличествоОстаток КАК Количество,
	|	//ДляУпрУчета СтоимостьОстаток КАК Стоимость
	|	//ДляБухУчета КоличествоОстаток КАК Количество,
	|	//ДляБухУчета СтоимостьОстаток КАК Стоимость	
	|
	|ИЗ
	|	РегистрНакопления.ПартииМатериаловВЭксплуатации%СуффиксУчета%.Остатки(&ГраницаПериода,) КАК ПартииМатериаловВЭксплуатации
	|";
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(ТекстЗапроса, ВидОтраженияВУчете);	
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросПоРегиструПартииМатериаловВЭксплуатации()


///////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ОСТАТКОВ


// Возвращает структуру для формирования ключа аналитики учета затрат. Дополняет исходную структуру полем ХарактерЗатрат
//
Функция ПолучитьСтруктуруДляФормированияКлючаАналитикиУчетаЗатрат(ВидОтраженияВУчете, Колонки, Выборка)
	СтруктураДляФормированияКлючаУчетаАналитикиЗатрат = Новый Структура();
	Для Каждого ТекущаяКолонка Из Колонки Цикл
		СтруктураДляФормированияКлючаУчетаАналитикиЗатрат.Вставить(ТекущаяКолонка.Имя,Выборка[ТекущаяКолонка.Имя]);
	КонецЦикла;	
	Если Колонки.Найти("СтатьяЗатрат") <> Неопределено Тогда
		Если (Колонки.Найти("ХарактерЗатрат") = Неопределено)
		  ИЛИ (НЕ ЗначениеЗаполнено(Выборка.ХарактерЗатрат)) Тогда
			Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
				Если ЗначениеЗаполнено(Выборка.СтатьяЗатрат) Тогда
					СтруктураДляФормированияКлючаУчетаАналитикиЗатрат.Вставить("ХарактерЗатрат",Выборка.СтатьяЗатрат.ХарактерЗатрат);
				КонецЕсли;
			Иначе
				Если Колонки.Найти("СчетУчета") <> Неопределено Тогда 
					СтруктураДляФормированияКлючаУчетаАналитикиЗатрат.Вставить("ХарактерЗатрат",УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(Выборка.СчетУчета, Выборка.СтатьяЗатрат));
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	Возврат СтруктураДляФормированияКлючаУчетаАналитикиЗатрат;
КонецФункции	

// Возвращает структуру для формирования ключа аналитики вида учета. Дополняет исходную структуру полем СчетУчетаНУ
//
Функция ПолучитьСтруктуруДляФормированияКлючаАналитикиВидаУчета(ВидОтраженияВУчете, Колонки, Выборка)
		
	СтруктураДляФормированияКлючаАналитикиВидаУчета = Новый Структура();
	Для Каждого ТекущаяКолонка Из Колонки Цикл
		СтруктураДляФормированияКлючаАналитикиВидаУчета.Вставить(ТекущаяКолонка.Имя,Выборка[ТекущаяКолонка.Имя]);
	КонецЦикла;	
	
	Возврат СтруктураДляФормированияКлючаАналитикиВидаУчета;
КонецФункции	

// Процедура ввода остатков по регистрам "Учет затрат" и "Учет затрат (бухгалтерский и налоговый учет)".
// Используется при включении использования расширенной аналитики учета из обработки настройки параметров учета (начиная с версии 1.2.10).
//
// Параметры:
//	Запрос - Запрос - Запрос по остаткам
//	ДатаДокумента - Дата - Дата документа ввода остатков
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	ТекстДляКомментария - Строка - Комментарий документа
//
Процедура СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(Запрос, ДатаДокумента, ВидОтраженияВУчете, ТекстДляКомментария)
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		ИмяРегистра = "УчетЗатрат";
		ПредставлениеРегистра = "Учет затрат (управленческий учет)";
		ПредставлениеВидаУчета = "управленческий учет";
	Иначе
		ИмяРегистра = "УчетЗатратРегл";
		ПредставлениеРегистра = "Учет затрат (бухгалтерский и налоговый учет)";
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
			ПредставлениеВидаУчета = "бухгалтерский учет";
		КонецЕсли;
	КонецЕсли;	
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ДокументКорректировкиЗаписейРегистров = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
		ДокументКорректировкиЗаписейРегистров.Дата = ДатаДокумента;
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументКорректировкиЗаписейРегистров);
		ДокументКорректировкиЗаписейРегистров.Комментарий = "Ввод остатков по регистру """ + ПредставлениеРегистра + """ на основании данных регистра """ + ТекстДляКомментария + " (" + ПредставлениеВидаУчета + ")""";
		
		НоваяСтрока = ДокументКорректировкиЗаписейРегистров.ТаблицаРегистровНакопления.Добавить();
		НоваяСтрока.Имя = ИмяРегистра;
		НоваяСтрока.Представление = ПредставлениеРегистра; 
		
		ДокументКорректировкиЗаписейРегистров.Записать();
		
		НачатьТранзакцию();
		
		НаборЗаписей = ДокументКорректировкиЗаписейРегистров.Движения[ИмяРегистра];
		
		СтруктураКлючиАналитики = Новый Структура();
		СтруктураШапкиДокумента = Новый Структура();
		СтруктураШапкиДокумента.Вставить("Дата", ДатаДокумента);
		СтруктураШапкиДокумента.Вставить("Ссылка", ДокументКорректировкиЗаписейРегистров.Ссылка);
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураДляФормированияКлючаАналитикиВидаУчета = ПолучитьСтруктуруДляФормированияКлючаАналитикиВидаУчета(ВидОтраженияВУчете, Результат.Колонки, Выборка);
			АналитикаВидаУчетаПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
				СтруктураШапкиДокумента,
				СтруктураДляФормированияКлючаАналитикиВидаУчета,
				Перечисления.КлючиАналитики.АналитикаВидаУчета,
				ВидОтраженияВУчете,
				СтруктураКлючиАналитики
			);
			СтруктураДляФормированияКлючаУчетаАналитикиЗатрат = ПолучитьСтруктуруДляФормированияКлючаАналитикиУчетаЗатрат(ВидОтраженияВУчете, Результат.Колонки, Выборка);
			АналитикаУчетаЗатратПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
				СтруктураШапкиДокумента,
				СтруктураДляФормированияКлючаУчетаАналитикиЗатрат,
				Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
				ВидОтраженияВУчете,
				СтруктураКлючиАналитики
			);
			АналитикаУчетаПартийПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
				СтруктураШапкиДокумента,
				Выборка,
				Перечисления.КлючиАналитики.АналитикаУчетаПартий,
				ВидОтраженияВУчете,
				СтруктураКлючиАналитики
			);
			АналитикаРаспределенияЗатратПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
				СтруктураШапкиДокумента,
				Выборка,
				Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
				ВидОтраженияВУчете,
				СтруктураКлючиАналитики
			);
			
			СтруктураСумм = Новый Структура("Количество, КоличествоНУ, Стоимость, СтоимостьНУ, НДСВходящий, НДСКредит",0,0,0,0,0,0);
			
			ЗаполнитьЗначенияСвойств(СтруктураСумм,Выборка);
			
			РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
				СтруктураШапкиДокумента,
				АналитикаВидаУчетаПолучатель, // АналитикаВидаУчета
				АналитикаУчетаЗатратПолучатель, // АналитикаУчетаЗатрат
				АналитикаУчетаПартийПолучатель, // АналитикаУчетаПартий
				АналитикаРаспределенияЗатратПолучатель, // АналитикаУчетаВыпуска
				Неопределено, // КорАналитикаВидаУчета
				Неопределено, // КорАналитикаУчетаЗатрат
				Неопределено, // КорАналитикаУчетаПартий
				Неопределено, // КорАналитикаУчетаВыпуска
				ВидДвиженияНакопления.Приход,
				Неопределено,
				СтруктураСумм.Количество,
				СтруктураСумм.Стоимость,
				СтруктураСумм.КоличествоНУ,
				СтруктураСумм.СтоимостьНУ,
				СтруктураСумм.НДСВходящий,
				СтруктураСумм.НДСКредит,
				НаборЗаписей
			);
		КонецЦикла;
		
		Если НаборЗаписей.Модифицированность() Тогда
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Иначе
		ЗаписьЖурналаРегистрации("Сообщение", УровеньЖурналаРегистрации.Примечание, , ,"Перенос остатков в подсистему расширенной аналитики учета затрат. Остатков по регистру " + ТекстДляКомментария + " (" + ПредставлениеВидаУчета + ") нет. Документ ввода остатков не сформирован.");
	КонецЕсли;	
			
КонецПроцедуры // СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета()	

// Процедура ввода остатков по регистрам "Учет затрат" и "Учет затрат (бухгалтерский и налоговый учет)".
// Используется при включении использования расширенной аналитики учета из обработки настройки параметров учета (начиная с версии 1.2.15).
//
// Параметры:
//	ДатаПереноса - Дата - Дата переноса остатков
//	УправленческийУчет - Булево - Признак переноса остатков по управленческому учету
//	БухгалтерскийУчет - Булево - Признак переноса остатков по бухгалтерскому учету
//	НалоговыйУчет - Булево - Признак переноса остатков по налоговому учету
//	Затраты - Булево - Признак переноса остатков затрат
//	БракВПроизводстве - Булево - Признак переноса остатков брака в производстве
//	ЗатратыНаВыпускПродукции - Булево - Признак переноса остатков затрат на выпуск продукции
//	ПартииТоваров - Булево - Признак переноса остатков партий товаров
//	ПартииМатериаловВЭксплуатации - Булево - Признак переноса остатков партий материалов в эксплуатации
//
Процедура СформироватьОстаткиПоРегистрамУчетЗатратИУчетЗатратРегл(
	ДатаПереноса,
	УправленческийУчет,
	БухгалтерскийУчет,
	НезавершенноеПроизводство,
	Затраты,
	БракВПроизводстве,
	ЗатратыНаВыпускПродукции,
	ПартииТоваров,
	ПартииМатериаловВЭксплуатации
	) Экспорт
			
	МассивВидовУчета = Новый Массив();		
	Если УправленческийУчет Тогда
		МассивВидовУчета.Добавить(Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);
	КонецЕсли;	
	Если БухгалтерскийУчет Тогда
		МассивВидовУчета.Добавить(Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПериодКонец",ДатаПереноса);
	Запрос.УстановитьПараметр("ГраницаПериода",Новый Граница(ДатаПереноса,ВидГраницы.Включая));
	
	Для Каждого ТекущийВидУчета Из МассивВидовУчета Цикл
		
		
		
		Если НезавершенноеПроизводство Тогда
			
			
			Запрос.Текст = ПолучитьЗапросПоРегиструНезавершенноеПроизводство(ТекущийВидУчета);
			Запрос.УстановитьПараметр("РазделУчета",Перечисления.РазделыУчета.Затраты);
			
			МассивСчетовЗатрат = Новый Массив;
			
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
			
			Запрос.УстановитьПараметр("МассивСчетовЗатрат", МассивСчетовЗатрат);
			
			СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(Запрос, ДатаПереноса, ТекущийВидУчета, "Незавершенное производство");
			
		КонецЕсли;	
		Если Затраты Тогда
			
			
			Запрос.Текст = ПолучитьЗапросПоРегиструЗатраты(ТекущийВидУчета);
			Запрос.УстановитьПараметр("РазделУчета",Перечисления.РазделыУчета.Затраты);
			
			СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(Запрос, ДатаПереноса, ТекущийВидУчета, "Затраты");
			
		КонецЕсли;	
		Если БракВПроизводстве Тогда
			
			
			Запрос.Текст = ПолучитьЗапросПоРегиструБракВПроизводстве(ТекущийВидУчета);
			Запрос.УстановитьПараметр("РазделУчета",Перечисления.РазделыУчета.Затраты);
			
			СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(Запрос, ДатаПереноса, ТекущийВидУчета, "Брак в производстве");
		КонецЕсли;	
		Если ЗатратыНаВыпускПродукции Тогда
			
			Запрос.Текст = ПолучитьЗапросПоРегиструЗатратыНаВыпускПродукцииНаработка(ТекущийВидУчета);
			Запрос.УстановитьПараметр("РазделУчета",Перечисления.РазделыУчета.ЗатратыПоНаработке);
			
			СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(Запрос, ДатаПереноса, ТекущийВидУчета, "Затраты на выпуск продукции наработка");
		КонецЕсли;	
		Если ПартииТоваров Тогда
			
			
			Запрос.Текст = ПолучитьЗапросПоРегиструПартииТоваровНаСкладах(ТекущийВидУчета);
			Запрос.УстановитьПараметр("РазделУчета",Перечисления.РазделыУчета.МПЗ);
			
			
			
			СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(Запрос, ДатаПереноса, ТекущийВидУчета, "Партии товаров на складах");	
			
			
			Запрос.Текст = ПолучитьЗапросПоРегиструПартииТоваровПереданные(ТекущийВидУчета);
			Запрос.УстановитьПараметр("РазделУчета",Перечисления.РазделыУчета.ТоварыОтгруженные);
			
			
			СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(Запрос, ДатаПереноса, ТекущийВидУчета, "Партии товаров переданных");
			
			
		КонецЕсли;	
		Если ПартииМатериаловВЭксплуатации Тогда
			
			
			Запрос.Текст = ПолучитьЗапросПоРегиструПартииМатериаловВЭксплуатации(ТекущийВидУчета);
			
			
			Запрос.УстановитьПараметр("ПустоеНалоговоеНазначение", Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка());
			
			СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(Запрос, ДатаПереноса, ТекущийВидУчета, "Партии материалов в эксплуатации");
			
			
			
		КонецЕсли;			
	КонецЦикла;	
КонецПроцедуры		


