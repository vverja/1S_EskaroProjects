

// Процедура устанавливает параметры сеанса.

Процедура УстановитьПараметрыМеханизмаОграниченияПравДоступа() Экспорт
	
	ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей = Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить();
	Если ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВидыОбъектовДоступа.Ссылка,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА ПользователиГруппы.Ссылка ЕСТЬ NULL 
		               |				ТОГДА ИСТИНА
		               |			ИНАЧЕ ВЫБОР
		               |					КОГДА НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа ЕСТЬ NULL 
		               |						ТОГДА ЛОЖЬ
		               |					ИНАЧЕ ИСТИНА
		               |				КОНЕЦ
		               |		КОНЕЦ) КАК ЕстьОграничение
		               |ИЗ
		               |	Перечисление.ВидыОбъектовДоступа КАК ВидыОбъектовДоступа
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ПользователиГруппы
		               |		ПО (ПользователиГруппы.Пользователь = &ТекущийПОльзователь)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа
		               |		ПО (НазначениеВидовОбъектовДоступа.ГруппаПользователей = ПользователиГруппы.Ссылка)
		               |			И (НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ВидыОбъектовДоступа.Ссылка)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВидыОбъектовДоступа.Ссылка";
		
		Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		Выборка = Запрос.Выполнить().Выбрать();
		ВидыОбъектовДоступаЗначения = Метаданные.Перечисления.ВидыОбъектовДоступа.ЗначенияПеречисления; 
		Пока Выборка.Следующий() Цикл
			ПараметрыСеанса["ИспользоватьОграничениеПо" + ВидыОбъектовДоступаЗначения.Получить(Перечисления.ВидыОбъектовДоступа.Индекс(Выборка.Ссылка)).Имя] = Выборка.ЕстьОграничение;
		КонецЦикла;
		
			
	Иначе
		
		Для Каждого ВидОбъектаДоступа Из Метаданные.Перечисления.ВидыОбъектовДоступа.ЗначенияПеречисления Цикл			
			ПараметрыСеанса["ИспользоватьОграничениеПо" + ВидОбъектаДоступа.Имя] = Ложь;			
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Сохранение в параметре сеанса ГраницыЗапретаИзмененияДанных границ запрета изменений данных
Процедура УстановитьПараметрГраницыЗапретаИзмененияДанных() Экспорт
	
	ЗапретИзмененияДанныхДо01042011 = Константы.ЗапретИзмененияДанныхДо01042011.Получить();
	
	Если РольДоступна("ПолныеПрава") И НЕ Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить() И НЕ ЗапретИзмененияДанныхДо01042011  Тогда
		ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));	
		Возврат;
    КонецЕсли;
    
    ТекстЗапросаПоОрганизациям = "
    |ВЫБРАТЬ
    |       Значение(Справочник.Организации.ПустаяСсылка) как Организация
    |   ОБЪЕДИНИТЬ ВСЕ
    |   ВЫБРАТЬ
    |       Организации.Ссылка
    |   ИЗ 
    |       Справочник.Организации КАК Организации ";
	
    ТекстЗапросаПоОбщейДатеЗапретаРедактирования = "
	|ВЫБРАТЬ
    |    ЕстьNull(ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений, ДатаВремя(1,1,1)) КАК ОбщаяДата
    |ИЗ
    |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
    |ГДЕ
    |    ГраницыЗапретаИзмененияДанных.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |    И ГраницыЗапретаИзмененияДанных.Пользователь = НЕОПРЕДЕЛЕНО 
	|";
	
    ТекстЗапросаПоПриоритетамЗаписей = "
	|ВЫБРАТЬ
    |    Границы.Организация КАК Организация,
    |    Границы.Пользователь КАК Пользователь,
    |    ВЫБОР
    |        КОГДА Границы.Пользователь = НЕОПРЕДЕЛЕНО
    |            ТОГДА 3
    |        КОГДА Границы.Пользователь ССЫЛКА Справочник.ГруппыПользователей
    |                И ГруппыПользователей.Пользователь = &Пользователь
    |            ТОГДА 2
    |        КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
    |                И Границы.Пользователь = &Пользователь
    |            ТОГДА 1
    |    КОНЕЦ КАК Приоритет,
    |    Границы.ГраницаЗапретаИзменений КАК ГраницаЗапретаИзменений
    |ИЗ
    |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
    |        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователей
    |        ПО (ГруппыПользователей.Пользователь = &Пользователь И ГруппыПользователей.Ссылка = Границы.Пользователь)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ  РАЗРЕШЕННЫЕ
    |    Организации.Организация как Организация,
    |    МИНИМУМ(ЕСТЬNULL(ТаблицаГраницыЗапрета.ГраницаЗапретаИзменений, ОбщаяДатаЗапрета.ОбщаяДата)) КАК ГраницаЗапретаИзменений,                   
    |    ОбщаяДатаЗапрета.ОбщаяДата как ОбщаяДата
    |ИЗ
    | (" + ТекстЗапросаПоОрганизациям+") Как Организации  
    |        ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    |            Границы.Организация КАК Организация,
    |            МИНИМУМ(Приоритеты.Приоритет) КАК Приоритет
    |        ИЗ
    |            РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
    |                ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК Приоритеты
    |                ПО Границы.Организация = Приоритеты.Организация
    |                    И Границы.Пользователь = Приоритеты.Пользователь
    |        
    |        СГРУППИРОВАТЬ ПО
    |            Границы.Организация) КАК ТаблицаПриоритетов
    |        ПО ТаблицаПриоритетов.Организация = Организации.Организация
    |        ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК ТаблицаГраницыЗапрета
    |        ПО ТаблицаПриоритетов.Организация = ТаблицаГраницыЗапрета.Организация
    |            И ТаблицаПриоритетов.Приоритет = ТаблицаГраницыЗапрета.Приоритет,
    | (" + ТекстЗапросаПоОбщейДатеЗапретаРедактирования + ") Как ОбщаяДатаЗапрета
    |СГРУППИРОВАТЬ ПО
    |    Организации.Организация, ОбщаяДата
	|";
	
	Запрос.УстановитьПараметр("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
    
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Если ЗапретИзмененияДанныхДо01042011 Тогда
			Соответствие = Новый Соответствие;	
			Соответствие["ОбщаяДатаЗапретаРедактирования"] = '20110331235959';
		Иначе
			Соответствие = Неопределено;	
		КонецЕсли;
	Иначе			
		Соответствие = Новый Соответствие;
		Выборка = РезультатЗапроса.Выбрать();
        ОбщаяДатаЗапрета = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ЗапретИзмененияДанныхДо01042011 Тогда
				Соответствие[Выборка.Организация] = Макс(?(ЗначениеЗаполнено(Выборка.ГраницаЗапретаИзменений), КонецДня(Выборка.ГраницаЗапретаИзменений), Выборка.ГраницаЗапретаИзменений),'20110331235959');
	            Если ОбщаяДатаЗапрета = Неопределено Тогда
	                ОбщаяДатаЗапрета = Макс(?(ЗначениеЗаполнено(Выборка.ОбщаяДата), КонецДня(Выборка.ОбщаяДата), Выборка.ОбщаяДата),'20110331235959');
				КонецЕсли;
			Иначе
				Соответствие[Выборка.Организация] = ?(ЗначениеЗаполнено(Выборка.ГраницаЗапретаИзменений), КонецДня(Выборка.ГраницаЗапретаИзменений), Выборка.ГраницаЗапретаИзменений);
	            Если ОбщаяДатаЗапрета = Неопределено Тогда
	                ОбщаяДатаЗапрета = ?(ЗначениеЗаполнено(Выборка.ОбщаяДата), КонецДня(Выборка.ОбщаяДата), Выборка.ОбщаяДата);
				КонецЕсли;
			КонецЕсли;
        КонецЦикла;
        
        Если НЕ ОбщаяДатаЗапрета = Неопределено Тогда
            Соответствие["ОбщаяДатаЗапретаРедактирования"] = ОбщаяДатаЗапрета;
        КонецЕсли;
        
		Если Соответствие.Количество() = 0 Тогда
			Соответствие = Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
	Если Соответствие <> Неопределено И РольДоступна("ПолныеПрава") И НЕ Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить() Тогда
		Для Каждого КлючИЗначение Из Соответствие Цикл
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Соответствие.Вставить(КлючИЗначение.Ключ, Мин(КлючИЗначение.Значение, '20110331235959'));
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;	
	
	Если Соответствие <> Неопределено Тогда
		СохранятьСоответствие = Ложь;
		Для Каждого КлючИЗначение Из Соответствие Цикл
			ЕСли ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				СохранятьСоответствие = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СохранятьСоответствие Тогда
			Соответствие = Неопределено;
		КонецЕсли;			
	КонецЕсли;
	
		
	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Соответствие, Новый СжатиеДанных(0));
	
КонецПроцедуры // УстановитьПараметрГраницыЗапретаИзмененияДанных

// Процедура удаляет из регистра сведений данные
// незарегистрированного контрагента.
//
Процедура УдалитьДанныеНезарегистрированногоКонтрагента(Ссылка, Отказ) Экспорт

	НаборЗаписей = РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРегистратор.Использование = Истина;
	НаборЗаписей.Отбор.ОбъектРегистратор.Значение      = Ссылка;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Очистить();
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли; 

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ПРИ ЗАПИСИ НОМЕНКЛАТУРЫ

// Функция проверяет, существуют ли ссылки на единицу измерения в движениях регистров накопления.
// Если есть - нельзя менять коэффицент
//
// Параметры:
//  СуществуютСсылки - булево, переменная, в которой сохраняется результат работы функции, чтобы
//                     при последующих вызовах заново не считать функцию.
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция Номенклатура_СуществуютСсылки(Ссылка, СуществуютСсылки) Экспорт

	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	ИначеЕсли СуществуютСсылки <> Неопределено Тогда
		Возврат СуществуютСсылки; // уже было рассчитано
	КонецЕсли;
	
	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("ТекущийВладелец", Ссылка);

	ТипНоменклатура = ТипЗнч(Справочники.Номенклатура.ПустаяСсылка());

	Запрос.Текст = "";

	Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
		Для Каждого РеквизитРегистра Из РегистрНакопления.Измерения Цикл
			Если РеквизитРегистра.Тип.СодержитТип(ТипНоменклатура) Тогда
				Если Запрос.Текст <> "" Тогда
					Запрос.Текст = Запрос.Текст + "
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	РегистрНакопления."+РегистрНакопления.Имя+"."+РеквизитРегистра.Имя+" КАК Номенклатура
				|ГДЕ
				|	"+РеквизитРегистра.Имя+" = &ТекущийВладелец
				|";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СуществуютСсылки = НЕ Запрос.Выполнить().Пустой();

	Возврат СуществуютСсылки;

КонецФункции //  СуществуютСсылки()

// Функция проверяет, существуют ли ссылки на серию  в движениях регистров накопления.
//
// Параметры:
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция Номенклатура_СуществуютСсылкиНаСерииВРегистрахНакопления(Ссылка) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);
	Запрос.УстановитьПараметр("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	ТипСерия	 = ТипЗнч(Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.Текст = "";

	Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
		Для Каждого РеквизитРегистра Из РегистрНакопления.Измерения Цикл
			Если РеквизитРегистра.Тип.СодержитТип(ТипСерия) Тогда
				Если Запрос.Текст <> "" Тогда
					Запрос.Текст = Запрос.Текст + "
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|   ИСТИНА
				|ИЗ
				|	РегистрНакопления."+РегистрНакопления.Имя+" КАК "+РегистрНакопления.Имя+"
				|ГДЕ
				|   "+РегистрНакопления.Имя+"."+РеквизитРегистра.Имя+" <> &СерияНоменклатуры
				|И "+РегистрНакопления.Имя+"."+РеквизитРегистра.Имя+".Владелец = &Номенклатура
				|";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	СуществуютСерии = НЕ Запрос.Выполнить().Пустой();

	Возврат СуществуютСерии;

КонецФункции //СуществуютСсылкиНаСерииВРегистрахНакопления()

// Функция проверяет, существуют ли ссылки на вид номенклатуры в справочнике "Номенклатура".
// Если есть - нельзя менять коэффицент
//
// Параметры:
//  СуществуютСсылки - булево, переменная, в которой сохраняется результат работы функции, чтобы
//                     при последующих вызовах заново не считать функцию.
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция ВидыНоменклатуры_СуществуютСсылкиВНоменклатуре(Ссылка, СуществуютСсылки) Экспорт

	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	ИначеЕсли СуществуютСсылки <> Неопределено Тогда
		Возврат СуществуютСсылки; // уже было рассчитано
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийЭлемент", Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ВидНоменклатуры = &ТекущийЭлемент
	|";
	
	СуществуютСсылки = НЕ Запрос.Выполнить().Пустой();

	Возврат СуществуютСсылки;

КонецФункции //  СуществуютСсылки()

////////////////////////////////////////////////////////////////////////////////

// Функция проверяет, существуют ли ссылки на статью затрат в движениях регистров накопления.
//
// Параметры:
//	Ссылка - СправочникСсылка.СтатьиЗатрат - Статья затрат
//
// Возвращаемое значение:
//  Булево - Истина - если есть движения, 
//			 Ложь - если нет.
//
Функция СтатьяЗатрат_СуществуютСсылкиВРегистрахНакопления(Ссылка) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СтатьяЗатрат", Ссылка);
	
	ТипЗначения = ТипЗнч(Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.УчетЗатрат.АналитикаУчетаЗатрат
	|ГДЕ
	|	АналитикаУчетаЗатрат В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Ссылка
	|       ИЗ
	|       	РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|		ГДЕ
	|			СтатьяЗатрат = &СтатьяЗатрат
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.УчетЗатратРегл.АналитикаУчетаЗатрат
	|ГДЕ
	|	АналитикаУчетаЗатрат В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Ссылка
	|       ИЗ
	|       	РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|		ГДЕ
	|			СтатьяЗатрат = &СтатьяЗатрат
	|		)
	|";

	Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
		Для Каждого РеквизитРегистра Из РегистрНакопления.Измерения Цикл
			Если РеквизитРегистра.Тип.СодержитТип(ТипЗначения) Тогда
				Запрос.Текст = Запрос.Текст + "
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|   ИСТИНА
				|ИЗ
				|	РегистрНакопления." + РегистрНакопления.Имя + " КАК " + РегистрНакопления.Имя + "
				|ГДЕ
				|   " + РегистрНакопления.Имя + "." + РеквизитРегистра.Имя + " = &СтатьяЗатрат
				|";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	СуществуютСсылки = НЕ Запрос.Выполнить().Пустой();

	Возврат СуществуютСсылки;

КонецФункции // СтатьяЗатрат_СуществуютСсылкиВРегистрахНакопления()

////////////////////////////////////////////////////////////////////////////////

// Функция проверяет, существуют ли ссылки на налогвое назначение в движениях регистров накопления.
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция НалоговоеНазначение_СуществуютСсылки(Ссылка) Экспорт

	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("ТекущийВладелец", Ссылка);

	 
	ТипНалоговоеНазначение = ТипЗнч(Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка());

	Запрос.Текст = "";

	Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
		Для Каждого РеквизитРегистра Из РегистрНакопления.Измерения Цикл
			Если РеквизитРегистра.Тип.СодержитТип(ТипНалоговоеНазначение) Тогда
				Если Запрос.Текст <> "" Тогда
					Запрос.Текст = Запрос.Текст + "
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	РегистрНакопления."+РегистрНакопления.Имя+"."+РеквизитРегистра.Имя+" КАК НалоговоеНазначение 
				|ГДЕ
				|	"+РеквизитРегистра.Имя+" = &ТекущийВладелец
				|";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СуществуютСсылки = НЕ Запрос.Выполнить().Пустой();

	Возврат СуществуютСсылки;

КонецФункции //  НалоговоеНазначение_СуществуютСсылки()

////////////////////////////////////////////////////////////////////////////////

Процедура ЗарегистрироватьПраваДоступаПользователяКОбъекту(СсылкаНового, Родитель, Отказ = Ложь) Экспорт

	Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНового)) Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаНового.ПолучитьОбъект() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектДоступа.Установить(СсылкаНового);
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаУнаследованнымиЗаписями(НаборЗаписей, СсылкаНового, Родитель);
		
	ЗаписатьНаборПрав(НаборЗаписей, Отказ, "Не удалось записать права доступа к объекту!")
	
КонецПроцедуры

Процедура ЗаписатьНаборПрав(НаборПрав, Отказ, ШапкаОшибки)
	
	Попытка
		НаборПрав.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаОшибки);
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьПраваДоступаКПрошлымРодителям(Ссылка, ПрошлыйИзмененныйРодительОбъектаДоступа, Отказ) Экспорт
	
	ОбновляемыеОбъекты = Новый Массив;
	ОбновляемыеОбъекты.Добавить(ПрошлыйИзмененныйРодительОбъектаДоступа);
	НастройкаПравДоступа.ПолучитьМассивРодительскихЭлементов(ПрошлыйИзмененныйРодительОбъектаДоступа, ОбновляемыеОбъекты);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиПравДоступаПользователей.ОбъектДоступа КАК Ссылка
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	|ГДЕ
	|	НастройкиПравДоступаПользователей.ОбъектДоступа = НастройкиПравДоступаПользователей.ВладелецПравДоступа И 
	|	НастройкиПравДоступаПользователей.ОбъектДоступа В (&ОбновляемыеОбъекты)";
	
	Запрос.УстановитьПараметр("ОбновляемыеОбъекты", ОбновляемыеОбъекты);	
	
	ОбновляемыеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для каждого ОбновляемыйОбъект Из ОбновляемыеОбъекты Цикл
		
		МассивЭлементов = НастройкаПравДоступа.ПолучитьМассивДочернихЭлементов(Ссылка);
		МассивЭлементов.Добавить(Ссылка);
		
		Для Каждого ПодчиненныйЭлемент ИЗ МассивЭлементов Цикл
		
			ПраваДоступаПользователей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
		
			ПраваДоступаПользователей.Отбор.ОбъектДоступа      .Установить(ПодчиненныйЭлемент);
			ПраваДоступаПользователей.Отбор.ВладелецПравДоступа.Установить(ОбновляемыйОбъект);
			
			Попытка
				ПраваДоступаПользователей.Записать();		
			Исключение
				Отказ = Истина;
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки() + Символы.ПС+ " .Не записаны права доступа к объекту: " + Ссылка);
				Возврат;
			КонецПопытки;
		
		КонецЦикла;
			
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьСписокОбновляемыхОбъектовПриПереносеВГруппу(Ссылка, ОбновляемыеОбъекты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиПравДоступаПользователей.ОбъектДоступа КАК Ссылка
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	|ГДЕ
	|	НастройкиПравДоступаПользователей.ОбъектДоступа = НастройкиПравДоступаПользователей.ВладелецПравДоступа и 
	|	(НастройкиПравДоступаПользователей.ОбъектДоступа В (&ОбновляемыеОбъекты)";
	
	Если НастройкаПравДоступа.ПолучитьИмяРеквизитаРодителяОбъектаДоступа(Ссылка) = "Родитель" Тогда
		Запрос.Текст = Запрос.Текст + "
		|			ИЛИ НастройкиПравДоступаПользователей.ОбъектДоступа В ИЕРАРХИИ (&Ссылка))";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Иначе
		Запрос.Текст = Запрос.Текст + ")";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ОбновляемыеОбъекты", ОбновляемыеОбъекты);	
	
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции
	
Функция ОбновитьПраваДоступаПользователейПоВладельцуДоступа(Ссылка, ОбновляемыйОбъект = Неопределено) Экспорт
	
	ПраваДоступаПользователей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	
	ПраваДоступаПользователей.Отбор.ОбъектДоступа      .Установить(Ссылка);
	ПраваДоступаПользователей.Отбор.ВладелецПравДоступа.Установить(Ссылка);
	
	ПраваДоступаПользователей.Прочитать();
	
	ПраваДоступаПользователей.Отбор.ОбъектДоступа.Использование = Ложь;
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаНаследуемымиЗаписями(ПраваДоступаПользователей);
		
	Попытка
		ПраваДоступаПользователей.Записать(Истина);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // () 

Процедура ЗаписатьПраваДоступаПользователей(ТаблицаНабораПрав, СтруктураОтбора, Отказ = Ложь, ШапкаОшибки = "") Экспорт
	
	// Проверим, что пользователь имеет права для использования процедуры
	Если НЕ УправлениеДопПравамиПользователей.ЕстьПравоАдминистрированияПользователей() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нарушение прав доступа!",, ШапкаОшибки);
		Возврат;
	КонецЕсли;	
	
	НаборПрав   = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	
	Для Каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
		Если Не ЭлементСтруктуры.Ключ = "ВладелецПравДоступа" Тогда
			НаборПрав.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
			НаборПрав.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим набор на корректность установленных отборов
	Если НаборПрав.Отбор.ОбъектДоступа.Использование Тогда
		ОтборПоОбъектуДоступа = Истина;
		ОбъектДоступа = НаборПрав.Отбор.ОбъектДоступа.Значение;
		НаборПрав.Отбор.ВладелецПравДоступа.Установить(ОбъектДоступа);
		НаборПрав.Отбор.ОбъектДоступа.Использование = Ложь;
	ИначеЕсли НаборПрав.Отбор.Пользователь.Использование Тогда
		
		ОтборПоОбъектуДоступа = Ложь;
		НаборПрав.Отбор.НаследованаОтВсеПользователи.Установить(Ложь);		
		
		Если НЕ ЗначениеЗаполнено(НаборПрав.Отбор.Пользователь.Значение) Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
			Возврат;
		КонецЕсли;
		
	Иначе
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
		Возврат;
	КонецЕсли;
	
	ТаблицаРазличияСтрок   = НаборПрав.Выгрузить();
	ТаблицаРазличияЗаписей = НаборПрав.Выгрузить();
	
	НаборПрав.Прочитать();
	
	ТаблицаСтарогоНабора = НаборПрав.Выгрузить();
	
	ТаблицаНовогоНабора  = НастройкаПравДоступа.ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(ТаблицаНабораПрав);
	
	НаборПрав.Загрузить(ТаблицаНовогоНабора);
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаНаследуемымиЗаписями(НаборПрав);
	
	Если ОтборПоОбъектуДоступа Тогда
		НастройкаПравДоступа.ДополнитьНаборПравДоступаГруппамиПользователей(НаборПрав);
	КонецЕсли;
		
	ЗаписатьНаборПрав(НаборПрав, Отказ, ШапкаОшибки);
	
КонецПроцедуры // ЗаписатьПраваДоступаПользователей 

// функция по пользователю ИБ определяет есть ли у него Windows авторизация
Функция НаличиеУПользователяWindowsАвторизации(Знач ИмяПользователяИБ) Экспорт
	
	Если ПустаяСтрока(ИмяПользователяИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// находим пользователя ИБ
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПользовательИБ.АутентификацияОС;
	
КонецФункции

Функция ПроверитьНаличиеСсылокНаДоговорКонтрагента(ДоговорКонтрагента) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовОбщие.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.РасчетыСКонтрагентами.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ЗаказыПокупателей.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ЗаказыПоставщикам.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПартииТоваровПереданные.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыПереданные.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыПолученные.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.Продажи.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПланируемыеПоступленияДенежныхСредств.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|";

	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция Кассы_СуществуютСсылки(Касса) Экспорт

	Запрос = Новый Запрос();

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	РегистрНакопления.ДенежныеСредства.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства
	|ГДЕ
	|	РегистрНакопления.ДенежныеСредства.БанковскийСчетКасса = &Касса";

	Запрос.УстановитьПараметр("Касса", Касса);

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Функция Категории_СуществуютСсылки(Категория) Экспорт

	Запрос = Новый Запрос();

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	РегистрСведений.КатегорииОбъектов.Категория КАК Категория
	|ИЗ
	|	РегистрСведений.КатегорииОбъектов
	|
	|ГДЕ
	|	РегистрСведений.КатегорииОбъектов.Категория = &Категория
	|";

	Запрос.УстановитьПараметр("Категория", Категория);

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Функция СвойстваОбъектов_СуществуютСсылки(Свойство) Экспорт

	Запрос = Новый Запрос();

	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрСведений.ЗначенияСвойствОбъектов.Свойство КАК Свойство
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов
	|
	|ГДЕ
	|	РегистрСведений.ЗначенияСвойствОбъектов.Свойство = &Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство КАК Свойство
	|ИЗ
	|	РегистрСведений.НазначенияСвойствОбъектов
	|
	|ГДЕ
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство = &Свойство
	|";

	Запрос.УстановитьПараметр("Свойство", Свойство);

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Функция СерииНоменклатуры_СуществуютСсылки(СерияНоменклатуры) Экспорт

	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыНаСкладах.СерияНоменклатуры
	|ГДЕ
	|	СерияНоменклатуры = &СерияНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыОрганизаций.СерияНоменклатуры
	|ГДЕ
	|	СерияНоменклатуры = &СерияНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПартииТоваровНаСкладах.СерияНоменклатуры
	|ГДЕ
	|	СерияНоменклатуры = &СерияНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыВНТТ.СерияНоменклатуры
	|ГДЕ
	|	СерияНоменклатуры = &СерияНоменклатуры
	|
	|";

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Функция Склад_СуществуютСсылки(Склад) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Склад);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТоварыНаСкладах.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|ГДЕ
	|	ТоварыНаСкладах.Склад = &Склад
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТоварыВРознице.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ТоварыВРознице КАК ТоварыВРознице
	|ГДЕ
	|	ТоварыВРознице.Склад = &Склад
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТоварыВНТТ.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ТоварыВНТТ КАК ТоварыВНТТ
	|ГДЕ
	|	ТоварыВНТТ.Склад = &Склад
	|";

	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

// Функция определяет наличение движения по регистрам для документа
//
Функция ОпределитьНаличиеДвиженийПоРегистратору(ДокументСсылка) Экспорт
	ТекстЗапроса = "";	
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданнныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданнныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Индексы.Добавить("Имя");
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданнныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

// Процедура записывает набор записей на сервере (привилегированно)
//
Процедура ЗаписатьНаборЗаписейНаСервере(ИмяРегистра, Регистратор, ТаблицаДвижений = Неопределено, ТипРегистра = "РегистрНакопления") Экспорт
	
	Если ТипРегистра = "РегистрНакопления" Тогда
		Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		
		Если ТаблицаДвижений <> Неопределено Тогда
			Набор.мТаблицаДвижений = ТаблицаДвижений;
			ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(Набор);		
		КонецЕсли;
		
	Иначе
		Если ТипРегистра = "РегистрБухгалтерии" Тогда
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
		КонецЕсли; 
		
		Если ТаблицаДвижений <> Неопределено Тогда
			Набор.Загрузить(ТаблицаДвижений);
		КонецЕсли;
	КонецЕсли; 
	
	Набор.Отбор.Регистратор.Установить(Регистратор);
	Набор.Записать();
	
КонецПроцедуры

Функция ПолучитьПараметрыДокументовОприходования(МассивДокументов, Период) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пост.ДоговорКонтрагента КАК ДоговорПоставки,
		|	Пост.Сделка,
		|	Пост.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность,
		|	Пост.Ссылка,
		|	Пост.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Пост
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, ) КАК КурсыВалютСрезПоследних
		|		ПО Пост.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта

		|ГДЕ
		|	Пост.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Пост.ДоговорКонтрагента,
		|	Пост.Сделка,
		|	Пост.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность,
		|	Пост.Ссылка,
		|	Пост.ДоговорКонтрагента.ВедениеВзаиморасчетов
		|ИЗ
		|	Документ.ПоступлениеТоваровУслугВНТТ КАК Пост
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, ) КАК КурсыВалютСрезПоследних
		|		ПО Пост.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	Пост.Ссылка В(&Ссылка)");
		
	Запрос.УстановитьПараметр("Ссылка" , МассивДокументов);
	Запрос.УстановитьПараметр("ДатаКурса" , Период);
		
	Возврат Запрос.Выполнить().Выбрать();		
		
КонецФункции

Процедура ОпределитьФактИспользованияРИБ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Полный.Ссылка
	               |ИЗ
	               |	ПланОбмена.Полный КАК Полный
	               |ГДЕ
	               |	Полный.Ссылка <> &ЭтотУзелПолный";
				   
	Запрос.УстановитьПараметр("ЭтотУзелПолный", ПланыОбмена.Полный.ЭтотУзел());
	ЕстьУзлыПолногоПланаОбмена = НЕ Запрос.Выполнить().Пустой();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбменУППУПП.Ссылка,
	               |	ОбменУППУПП.ДатаНачалаВыгрузкиДокументов КАК ДатаНачалаВыгрузкиДокументов
	               |ИЗ
	               |	ПланОбмена.ОбменУППУПП КАК ОбменУППУПП
	               |ГДЕ
	               |	ОбменУППУПП.Ссылка <> &ЭтотУзелПолный";
				   
	Запрос.УстановитьПараметр("ЭтотУзелПолный", ПланыОбмена.ОбменУППУПП.ЭтотУзел());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕстьУзлыОбменаУППУПП = НЕ РезультатЗапроса.Пустой();
	
	ПараметрыСеанса.НаличиеОбменаУПП = ЕстьУзлыОбменаУППУПП;
	
	Если ЕстьУзлыОбменаУППУПП Тогда
		
		ТаблицаОбменовУППУПП = РезультатЗапроса.Выгрузить();
		ТаблицаОбменовУППУПП.Индексы.Добавить("Ссылка");
		
		ПараметрыСеанса.СоответствиеУзловИДатДляОбменаУПП = Новый ХранилищеЗначения(ТаблицаОбменовУППУПП);
		
		МассивВсехУзлов = ПроцедурыОбменаУПП.ПолучитьМассивВсехУзлов();
		ПараметрыСеанса.ВсеУзлыОбменаУПП = Новый ФиксированныйМассив(МассивВсехУзлов);	
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Организации.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Организации КАК Организации";
		МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");			   
		МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
				
		СоответствиеУзловИОрганизаций = Новый Соответствие;			   
					   
		Для Каждого Организация ИЗ МассивОрганизаций Цикл
			
			МассивУзлов = ПроцедурыОбменаУПП.ПолучитьЗапросомМассивУзловПоОрганизации(Организация);
			СоответствиеУзловИОрганизаций.Вставить(Организация, МассивУзлов);
						
		КонецЦикла;		
				
		ПараметрыСеанса.СоответствиеОрганизацийИУзловОбменаУПП = Новый ХранилищеЗначения(СоответствиеУзловИОрганизаций);		
		
	КонецЕсли; 	
		
	ПараметрыСеанса.ИспользованиеРИБ = ЕстьУзлыПолногоПланаОбмена ИЛИ ЕстьУзлыОбменаУППУПП;
	
	ПараметрыСеанса.ПрефиксУзлаРаспределеннойИнформационнойБазы = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
	
	
	
	
		
	
	// обмен с сайтом
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбменССайтомТоварами.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ОбменССайтомТоварами КАК ОбменССайтомТоварами
	               |ГДЕ
	               |	(ОбменССайтомТоварами.Ссылка <> &ЭтотУзел)	
				   |";
				   
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменССайтомТоварами.ЭтотУзел());
	МассивУзловДляОбменаССайтомТоварами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ПараметрыСеанса.ВсеУзлыДляОбменаССайтомТоварами = Новый ФиксированныйМассив(МассивУзловДляОбменаССайтомТоварами);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбменССайтомЗаказами.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ОбменССайтомЗаказами КАК ОбменССайтомЗаказами
	               |ГДЕ
	               |	(ОбменССайтомЗаказами.Ссылка <> &ЭтотУзел)	
				   |";
				   
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменССайтомЗаказами.ЭтотУзел());
	МассивУзловДляОбменаССайтомЗаказами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ПараметрыСеанса.ВсеУзлыДляОбменаССайтомЗаказами = Новый ФиксированныйМассив(МассивУзловДляОбменаССайтомЗаказами);	
	
	ПараметрыСеанса.НаличиеОбменаССайтом = (МассивУзловДляОбменаССайтомТоварами.Количество() + МассивУзловДляОбменаССайтомЗаказами.Количество() > 0);
		
	ПараметрыСеанса.СохранятьИнформациюОМестеСозданияОбъектов = Константы.СохранятьИнформациюОМестеСозданияОбъектов.Получить();
	
КонецПроцедуры

Функция ПолучитьЗапросомМассивУзловПоОрганизацииДляОбменаУПП(Организация) Экспорт
	
	Возврат ПроцедурыОбменаУПП.ПолучитьЗапросомМассивУзловПоОрганизации(Организация);
	
КонецФункции


Функция ПолучитьРезультатЗапросаПоВыборкеОрганизаций(ИмяСправочника, ИмяРеквизита, ИмяРеквизитаОрганизации, СсылкаНаСправочник) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	Спр." + ИмяРеквизитаОрганизации + " КАК Организация
	               |ИЗ
	               |	Справочник." + ИмяСправочника + " КАК Спр
	               |ГДЕ
	               |	Спр." + ИмяРеквизита + " = &СсылкаНаЭлемент";
				   
	Запрос.УстановитьПараметр("СсылкаНаЭлемент", СсылкаНаСправочник);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьВыборкуПоКритериюОтбора(ИмяКритерияОтбора, ЗначениеКритерия) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора[ИмяКритерияОтбора].Состав Цикл
		
		Если Не ЭлементСостава.Тип.СодержитТип(ТипЗнч(ЗначениеКритерия)) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = ОбщегоНазначения.РазобратьПутьКОбъектуМетаданных(ПутьКДанным, ЭлементСостава.Родитель());
		
		Попытка
			ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные);	
		Исключение
		    Продолжить;
		КонецПопытки; 
		//Если НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		ПсевдонимТаблицы = СтруктураПутьКДанным.ТипОбъекта + "_" + СтруктураПутьКДанным.ВидОбъекта + "_" + СтруктураПутьКДанным.ИмяТаблЧасти;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + ПсевдонимТаблицы + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
			
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ТекстЗапроса = ТекстЗапроса + (?(ТекстЗапроса = "", "ВЫБРАТЬ", "ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ") + "
		|" + ПсевдонимТаблицы + ".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + ПсевдонимТаблицы + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|");
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерия);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура РегистрацияОбъектовДоступаДокумента(ДокументСсылка, ОбъектыДоступа, Замещать = Истина) Экспорт
	
	ОбъектыДоступа.Свернуть("ОбъектДоступа, ВидОбъектаДоступа");
	ОбъектыДоступа.Колонки.Добавить("ДокументСсылка");
	ОбъектыДоступа.ЗаполнитьЗначения(ДокументСсылка, "ДокументСсылка");
		
	Набор = РегистрыСведений.ОбъектыДоступаДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументСсылка.Установить(ДокументСсылка);
	Набор.Загрузить(ОбъектыДоступа);
	Набор.Записать(Замещать);

КонецПроцедуры

Процедура РегистрацияОбъектовДоступаДокументаЗУП(ДокументСсылка, ОбъектыДоступа) Экспорт
	
	Набор = РегистрыСведений.ОбъектыДоступаДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументСсылка.Установить(ДокументСсылка);
	Для Каждого ЭлементМассива ИЗ ОбъектыДоступа Цикл
		Набор.ДобавитьОбъектыДоступа(ЭлементМассива);
	КонецЦикла;
	Набор.ДвижениеПоРегистру();
	Набор.Записать();

КонецПроцедуры

// Возвращает текущий максимальный номер строки в наборе записей регистра
//
Функция МаксНомерСтрокиВНабореЗаписей(ИмяРегистра, Регистратор, ВидРегистра = "РегистрНакопления", УчитыватьДвиженияПартионногоУчета = Ложь) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(Рег.НомерСтроки) КАК МаксНомерСтроки
	                      |ИЗ
	                      |"+ВидРегистра+"." +ИмяРегистра+ " КАК Рег
	                      |
	                      |ГДЕ
	                      |	Рег.Регистратор = &Регистратор");
						  
	Если УчитыватьДвиженияПартионногоУчета тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ГДЕ","ГДЕ Рег.СписаниеПартий = Ложь И");
	КонецЕсли;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		МаксНомерСтроки = Выборка.МаксНомерСтроки;
	Иначе
		МаксНомерСтроки = 0;
	КонецЕсли;
	
	Возврат МаксНомерСтроки;

КонецФункции //МаксНомерСтрокиВНабореЗаписей

// Процедура предназначена для изменения значения некоторых реквизитов электронного письма, доступного только для чтения
// Параметры
//  ЭлектронноеПисьмо – ссыслка на документ ЭлектронноеПисьмо
//  ЗначенияРеквизитов – структура значений реквизитов, где ключ - имя реквизита,
//						 к изменению доступны только ограниченный перечень реквизитов.
Процедура УстановитьРеквизитЭлектронногоПисьма(ЭлектронноеПисьмо, ЗначенияРеквизитов) Экспорт
	
	РазрешенныеКИзмененениюРеквизиты = Новый Структура;
	РазрешенныеКИзмененениюРеквизиты.Вставить("Ответственный");
	РазрешенныеКИзмененениюРеквизиты.Вставить("НеРассмотрено");
	
	ЭлектронноеПисьмоОбъект = ЭлектронноеПисьмо.ПолучитьОбъект();
	Для Каждого КлючИЗначение ИЗ ЗначенияРеквизитов Цикл
		Если РазрешенныеКИзмененениюРеквизиты.Свойство(КлючИЗначение.Ключ) Тогда
			ЭлектронноеПисьмоОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	Попытка
		ЭлектронноеПисьмоОбъект.Записать();	
	Исключение
		Ош = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

// Функция определяет наличие хотя бы одной записи в регистре сведений
//
// Параметры
//  ИмяРегистра - строка
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьЗаписиВРегистреСведений(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегСв.*
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК РегСв";
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции // ЕстьЗаписиВРегистреСведений()

// Функция получает должность, подразделение и табельный номер сотрудника организации.
//
// Параметры
//  ФизЛицо.    - физ. лицо, для которго необходимо получить данные
//  ДатаПериода - дата получения сведений
//  Организация - организация, для которой необходимо получить данные
//  Сотрудник   - Сотрудник, для которго необходимо получить данные
//
// Возвращаемое значение:
//   Структура с данными
//
Функция СведенияОСотруднике(ФизЛицо, ДатаПериода, Организация = Неопределено, Сотрудник = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПериода", ДатаПериода);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		// Для совместимости
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Подразделение.Представление КАК Подразделение,
		|	Должность.Представление     КАК Должность
		|ИЗ
		|	РегистрСведений.Работники.СрезПоследних(&ДатаПериода, ФизЛицо = &ФизЛицо)
		|";
		
	ИначеЕсли ЗначениеЗаполнено(Сотрудник) Тогда
		
		// Если известен сотрудник, получим данные из регистра сведений "РаботникиОрганизаций"
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.Должность.Представление КАК Должность,
		|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Представление КАК ПодразделениеОрганизации,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаПериода, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних"	
		
	Иначе
		
		// Если сотрудник не передан, тогда произведем поиск этого сотрудника в справочнике по физлицу и организации, 
		// и затем произведем поиск данных в регистре сведений "РаботникиОрганизаций"
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиОрганизаций.Код КАК ТабельныйНомер,
		|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Представление КАК ПодразделениеОрганизации,
		|	РаботникиОрганизацийСрезПоследних.Должность.Представление КАК Должность,
		|	РаботникиОрганизацийСрезПоследних.Период КАК Период
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&ДатаПериода,
		|				Сотрудник В
		|					(ВЫБРАТЬ
		|						СотрудникиОрганизаций.Ссылка
		|					ИЗ
		|						Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|					ГДЕ
		|						СотрудникиОрганизаций.Физлицо = &Физлицо
		|						И СотрудникиОрганизаций.Организация = &Организация)) КАК РаботникиОрганизацийСрезПоследних
		|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизацийСрезПоследних.Сотрудник
		|ГДЕ
		|	СотрудникиОрганизаций.Физлицо = &Физлицо
		|	И СотрудникиОрганизаций.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ"
		
		
	КонецЕсли; 	
	
	Результат = Новый Структура("ТабельныйНомер, ПодразделениеОрганизации, Должность");
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат,ВыборкаЗапроса)
	Иначе
		// Если в запросе ничего не нашли тогда вернем вместо табельного номера код физ.лица
		Результат.ТабельныйНомер = ?(ЗначениеЗаполнено(ФизЛицо), ФизЛицо.Код,"")
	КонецЕсли; 
	
	Возврат Результат
	
КонецФункции // СведенияОСотруднике()


////////////////////////////////////////////////////////////////////////////////
// Подготовка структуры для заполнения шапки документа

//Функция проверяет наличие свойства в структуре по ключу, и его заполненность
//	Вызывается из процедуры ПодготовитьСтруктуруДляЗаполненияШапкиДокумента
//Параметры: СтруктураПараметров - проверяемая структура
//			ИмяСвойства - строка, имя проверяемого свойства (ключ структуры)
//Возвращаемое значение - булево (Истина если свойство есть и оно заполнено)
Функция СвойствоЕстьИОноЗаполнено(ИмяСвойства, СтруктураПараметров)
	
	Возврат СтруктураПараметров.Свойство(ИмяСвойства) И ЗначениеЗаполнено(СтруктураПараметров[ИмяСвойства]);

КонецФункции

//Функция проверяет наличие свойства в структуре и его заполненность
//	Вызывается из процедуры ПодготовитьСтруктуруДляЗаполненияШапкиДокумента
//Параметры: СтруктураПараметров - проверяемая структура
//			ИмяСвойства - строка, имя проверяемого свойства (ключ структуры)
//Возвращаемое значение - булево (Истина если свойство есть и оно НЕ заполнено)
Функция СвойствоЕстьИОноНЕЗаполнено(ИмяСвойства, СтруктураПараметров)
	
	Возврат СтруктураПараметров.Свойство(ИмяСвойства) И НЕ ЗначениеЗаполнено(СтруктураПараметров[ИмяСвойства]);

КонецФункции

//Процедура заполняет свойство в структуре значением по умолчанию
//	Вызывается из процедуры ПодготовитьСтруктуруДляЗаполненияШапкиДокумента
//Параметры: СтруктураПараметров - проверяемая структура
//			ИмяСвойства - строка, имя проверяемого свойства (ключ структуры)
//			ИмяНастройки - строка, имя настройки пользователя, по которой необходимо заполнить значение в структуре
//			ЗаполнятьТолькоНезаполненные - булево, признак того что заполнять необходимо только если свойство еще не заполнено
Процедура ЗаполнитьСвойствоЗначениемПоУмолчанию(ИмяСвойства, ИмяНастройки, СтруктураПараметров, ЗаполнятьТолькоНезаполненные = Ложь)
	// если нет такого свойства, то сразу уходим
	Если НЕ СтруктураПараметров.Свойство(ИмяСвойства) Тогда 
		Возврат; 
	КонецЕсли;
	
	//Если свойство заполнено, и необходимо заполнять только незаполненные свойства - ничего делать не надо
	Если ЗаполнятьТолькоНезаполненные И ЗначениеЗаполнено(СтруктураПараметров[ИмяСвойства]) Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураПараметров[ИмяСвойства] = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), ИмяНастройки);
КонецПроцедуры

//Процедура заполняет свойство в структуре значением по умолчанию. При этом проверяется, соответствует ли заполненное свойство организации.
//	Вызывается из процедуры ПодготовитьСтруктуруДляЗаполненияШапкиДокумента
//Параметры: СтруктураПараметров - обрабатываемая структура
//			ИмяСвойства - строка, имя проверяемого свойства (ключ структуры)
//			ИмяНастройки - строка, имя настройки пользователя, по которой необходимо заполнить значение в структуре
Процедура ЗаполнитьСвойствоЕслиОноСоответствуетОрганизации(ИмяСвойства, ИмяНастройки, СтруктураПараметров) 
	// имеет смысл, если только свойство есть 
	Если НЕ СтруктураПараметров.Свойство(ИмяСвойства) Тогда
		Возврат;
	КонецЕсли;

	// если свойство не заполнено, то установим его в значение по умолчанию 
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров[ИмяСвойства]) Тогда
		СтруктураПараметров[ИмяСвойства] = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), ИмяНастройки);
	КонецЕсли;
	
	// Если свойство установлено, Организация есть и установлена, и свойство не соответствует организации, то придется очистить свойство
	Если ЗначениеЗаполнено(СтруктураПараметров[ИмяСвойства]) 
			И СвойствоЕстьИОноЗаполнено("Организация", СтруктураПараметров) 
			И СтруктураПараметров[ИмяСвойства].Владелец <> СтруктураПараметров.Организация Тогда
		СтруктураПараметров[ИмяСвойства] = Неопределено;
	КонецЕсли;
		
КонецПроцедуры

//Процедура заполняет свойство в структуре банковским счетом владельца
//	Вызывается из процедуры ПодготовитьСтруктуруДляЗаполненияШапкиДокумента
// Параметры: СтруктураПараметров - обрабатываемая структура
//			ИмяСвойства - строка, имя проверяемого заполняемого (ключ структуры)
//			ИмяВладельца: строка, имя свойства содержащего владельца банковского счета ("Организация" или "Контрагент")
Процедура ЗаполнитьСвойствоБанковскимСчетомВладельца(ИмяСвойства, ИмяВладельца, СтруктураПараметров)
	// Перед вызовом процедуры проверяется, что Владелец есть и он заполнен. 
	//Поэтому внутри процедуры свойство ИмяВладельца на заполненность не проверяется

	// имеет смысл, если только свойство есть 
	Если НЕ СтруктураПараметров.Свойство(ИмяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	// если свойство не заполнено, то заполнить по Владельцу
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров[ИмяСвойства]) Тогда
		
		СтруктураПараметров[ИмяСвойства] = СтруктураПараметров[ИмяВладельца].ОсновнойБанковскийСчет;
		
	// Свойство заполнено, значит надо проверить, соответствует ли оно Владельцу (что Владелец есть и он установлен, мы проверили до вызова процедуры)
	ИначеЕсли СтруктураПараметров[ИмяСвойства].Владелец <> СтруктураПараметров[ИмяВладельца] Тогда
		// Если свойство не соответствует Владельцу, то следует очистить его
		СтруктураПараметров[ИмяСвойства] = Неопределено;
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается из процедуры ЗаполнитьШапкуДокумента.
//
//  СтруктураПараметров				- структура параметров для заполнения, содержит реквизиты шапки заполняемого документа,
//  ТипОперации						- строка вида операции ("Покупка", "Продажа", "ПокупкаКомиссия", "ПродажаКомиссия"),
//										если передана пустая строка, то реквизиты, зависящие от вида операции, не заполняются,
//  ОбъектКопирования				- ссылка на объект, с которого скопирован заполняемый документ,
//
Процедура ПодготовитьСтруктуруДляЗаполненияШапкиДокумента(СтруктураПараметров, ТипОперации, ОбъектКопирования) Экспорт
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	ЗаполнитьСвойствоЗначениемПоУмолчанию("Ответственный", "ОсновнойОтветственный", СтруктураПараметров);
	ЗаполнитьСвойствоЗначениемПоУмолчанию("Организация", "ОсновнаяОрганизация", СтруктураПараметров, Истина);
	
	// Заполним флаги принадлежности к учету исходя из значений по умолчанию.
	ЗаполнитьСвойствоЗначениемПоУмолчанию("ОтражатьВУправленческомУчете", "ОтражатьДокументыВУправленческомУчете", СтруктураПараметров);

	Если СтруктураПараметров.Свойство("Организация") И СтруктураПараметров.Свойство("ОтражатьВБухгалтерскомУчете") Тогда
		//Если Организация заполнена, и отражается в регл. учете - флаг отражения в БУ устанавливается из настроек пользователя
		Если ЗначениеЗаполнено(СтруктураПараметров.Организация) И СтруктураПараметров.Организация.ОтражатьВРегламентированномУчете Тогда
			СтруктураПараметров.ОтражатьВБухгалтерскомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
			
			
		Иначе
			СтруктураПараметров.ОтражатьВБухгалтерскомУчете = Ложь;
		КонецЕсли;
	КонецЕсли; //Если СтруктураПараметров.Свойство("Организация") И СтруктураПараметров.Свойство("ОтражатьВБухгалтерскомУчете") Тогда
	
	// Определяем дату для вычисления периода регистрации, курса валюты и учетной политики (используется ниже) 
	ДатаДокумента = ?(НЕ ЗначениеЗаполнено(СтруктураПараметров.Дата),ОбщегоНазначения.ПолучитьРабочуюДату(),СтруктураПараметров.Дата);

	Если СтруктураПараметров.Свойство("ПериодРегистрации") Тогда
		СтруктураПараметров.ПериодРегистрации = НачалоМесяца(ДатаДокумента);
	КонецЕсли;

	//если документ скопирован - другие реквизиты шапки не заполняем
	Если ОбъектКопирования <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойствоЗначениемПоУмолчанию("Подразделение", "ОсновноеПодразделение", СтруктураПараметров, Истина);
	ЗаполнитьСвойствоЗначениемПоУмолчанию("ДоговорЭквайринга", "ОсновнойДоговорЭквайринга", СтруктураПараметров);
	//Вид операции заполним первым по счету значением соответствующего перечисления
	Если СвойствоЕстьИОноНЕЗаполнено("ВидОперации", СтруктураПараметров) Тогда
		СтруктураПараметров.ВидОперации = Перечисления[СтруктураПараметров.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;
	Если СвойствоЕстьИОноНЕЗаполнено("ПредставительОрганизации", СтруктураПараметров) Тогда
         СтруктураПараметров.ПредставительОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойПредставительОрганизации");
    КонецЕсли;
  
	Если СвойствоЕстьИОноНЕЗаполнено("МестоСоставленияДокумента", СтруктураПараметров) Тогда
	  СтруктураПараметров.МестоСоставленияДокумента = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь,"ОсновноеМестоСоставленияРасходныхДокументов");
  	КонецЕсли;
	ЗаполнитьСвойствоЗначениемПоУмолчанию("Склад", "ОсновнойСклад", СтруктураПараметров, Истина);

	Если СвойствоЕстьИОноНЕЗаполнено("СкладОрдер", СтруктураПараметров) И СвойствоЕстьИОноНЕЗаполнено("ВидПоступления", СтруктураПараметров) Тогда
		СтруктураПараметров.СкладОрдер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойСклад");
		СтруктураПараметров.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	КонецЕсли;
	
	Если СвойствоЕстьИОноНЕЗаполнено("ВидПередачи", СтруктураПараметров) Тогда
		СтруктураПараметров.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
	КонецЕсли;
	ЗаполнитьСвойствоЗначениемПоУмолчанию("СтавкаНДС", "ОсновнаяСтавкаНДС", СтруктураПараметров, Истина);
	
	ЗаполнитьСвойствоЗначениемПоУмолчанию("УсловиеПродаж", "ОсновноеУсловиеПродаж", СтруктураПараметров, Истина); 

	//Заполним банковский счет по организации
	Если СвойствоЕстьИОноЗаполнено("Организация", СтруктураПараметров)  Тогда
		ЗаполнитьСвойствоБанковскимСчетомВладельца("БанковскийСчет",	"Организация", СтруктураПараметров);
		ЗаполнитьСвойствоБанковскимСчетомВладельца("СчетОрганизации",	"Организация", СтруктураПараметров);
		ЗаполнитьСвойствоБанковскимСчетомВладельца("СтруктурнаяЕдиница", "Организация", СтруктураПараметров);
		ЗаполнитьСвойствоБанковскимСчетомВладельца("БанковскийСчетОрганизации", "Организация", СтруктураПараметров);
	КонецЕсли;
	
	//Для заполнения этого свойства не используется процедура ЗаполнитьСвойствоЗначениемПоУмолчанию, 
	//	т.к. внутри этой процедуры применяется ЗначениеЗаполнено,	которое для булевых значений всегда возвращает Истина
	Если СтруктураПараметров.Свойство("ИспользоватьПлановуюСебестоимость") И НЕ СтруктураПараметров.ИспользоватьПлановуюСебестоимость Тогда
		СтруктураПараметров.ИспользоватьПлановуюСебестоимость = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ИспользоватьПлановуюСебестоимость");
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Контрагент") Тогда
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Контрагент) Тогда
			//В зависимости от типа операции выбираем настройку, по которой будет заполнен Контрагент. 
			//Заполняем свойство, только если оно еще не заполнено 
			ИмяНастройки = "";
			Если ТипОперации = "Покупка" ИЛИ ТипОперации = "ПокупкаКомиссия" Тогда
				ИмяНастройки = "ОсновнойПоставщик";
			ИначеЕсли ТипОперации = "Продажа" ИЛИ ТипОперации = "ПродажаКомиссия" Тогда
				ИмяНастройки = "ОсновнойПокупатель";
			КонецЕсли;
			Если ИмяНастройки <> "" Тогда
				ЗаполнитьСвойствоЗначениемПоУмолчанию("Контрагент", ИмяНастройки, СтруктураПараметров);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.Контрагент)
			И ТипЗнч(СтруктураПараметров.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
			Если СвойствоЕстьИОноНЕЗаполнено("КонтактноеЛицоКонтрагента", СтруктураПараметров) Тогда
				СтруктураПараметров.КонтактноеЛицоКонтрагента = СтруктураПараметров.Контрагент.ОсновноеКонтактноеЛицо;
			КонецЕсли;
			ЗаполнитьСвойствоБанковскимСчетомВладельца("БанковскийСчетКонтрагента", "Контрагент", СтруктураПараметров);
			
			Если СтруктураПараметров.Свойство("ДоговорКонтрагента") Тогда
				//Если договор заполнен - проверим что он соответствует контрагенту и организации
				//При необходимости очистим
				Если ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента) 
					И (СтруктураПараметров.ДоговорКонтрагента.Владелец <> СтруктураПараметров.Контрагент 
					ИЛИ (СвойствоЕстьИОноЗаполнено("Организация", СтруктураПараметров) 
					И СтруктураПараметров.ДоговорКонтрагента.Организация <> СтруктураПараметров.Организация)) Тогда
					СтруктураПараметров.ДоговорКонтрагента = Неопределено; 
				КонецЕсли;
				// Договор не заполнен - получим договор по организации (если есть), контрагенту и типу операции
				Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента) Тогда
					Если ТипОперации = "Продажа" Тогда
						СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
					ИначеЕсли ТипОперации = "ПродажаКомиссия" Тогда
						СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораКомиссионера();
					ИначеЕсли ТипОперации = "Покупка" Тогда
						СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
					ИначеЕсли ТипОперации = "ПокупкаКомиссия" Тогда
						СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораКомитента();
					Иначе
						СтруктураПараметровДляПолученияДоговора = Неопределено;
					КонецЕсли;
					СтруктураПараметров.ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(
												?(СтруктураПараметров.Свойство("Организация"),СтруктураПараметров.Организация, Неопределено), 
												СтруктураПараметров.Контрагент, 
												СтруктураПараметровДляПолученияДоговора);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента) Тогда

					//тип сделки имеет смысл устанавливать только в том случае, если договор заполнен 
					Если СтруктураПараметров.Свойство("Сделка") Тогда
						ЭтоЗаказПокупателя = Истина;
						Если СтруктураПараметров.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
						  ИЛИ СтруктураПараметров.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
							ЭтоЗаказПокупателя = Ложь;
						КонецЕсли;
						ЗаполнениеДокументов.УстановитьТипСделки(СтруктураПараметров, ЭтоЗаказПокупателя);
					КонецЕсли;
					
					// если в документе есть реквизит Организация и он не заполнен, то заполняем его из договора
					Если СвойствоЕстьИОноНЕЗаполнено("Организация", СтруктураПараметров) Тогда
						СтруктураПараметров.Организация = СтруктураПараметров.ДоговорКонтрагента.Организация;
					КонецЕсли;
					
					// тип цен - по договору
					Если СвойствоЕстьИОноНЕЗаполнено("ТипЦен", СтруктураПараметров) Тогда
						СтруктураПараметров.ТипЦен = СтруктураПараметров.ДоговорКонтрагента.ТипЦен;
					КонецЕсли;
				КонецЕсли; // Договор заполнен
			КонецЕсли; // есть реквизит договор
		КонецЕсли; //Контрагент заполнен
	КонецЕсли; //есть реквизит Контрагент
	
	// кассу, ККМ и подразделение организации устанавливаем в значения по умолчанию, только если они соответствуют Владельцу - Организации 
	// заполняем именно здесь (то есть ПОСЛЕ, а не ДО обработки Договора), потому что Организация может измениться в зависимости от договора
	ЗаполнитьСвойствоЕслиОноСоответствуетОрганизации("Касса", "ОсновнаяКасса", СтруктураПараметров); 
	ЗаполнитьСвойствоЕслиОноСоответствуетОрганизации("КассаККМ", "ОсновнаяКассаККМ", СтруктураПараметров); 
	ЗаполнитьСвойствоЕслиОноСоответствуетОрганизации("ПодразделениеОрганизации", "ОсновноеПодразделениеОрганизации", СтруктураПараметров); 

	// Валюта документа
	Если СвойствоЕстьИОноНЕЗаполнено("ВалютаДокумента", СтруктураПараметров) Тогда
		Если СвойствоЕстьИОноЗаполнено("Касса", СтруктураПараметров) Тогда
			СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.Касса.ВалютаДенежныхСредств;
		ИначеЕсли СвойствоЕстьИОноЗаполнено("СчетОрганизации", СтруктураПараметров) Тогда
			СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.СчетОрганизации.ВалютаДенежныхСредств;
		ИначеЕсли СвойствоЕстьИОноЗаполнено("ДоговорКонтрагента", СтруктураПараметров) Тогда
			СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе
			СтруктураПараметров.ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета");
		КонецЕсли;
	КонецЕсли;
	
	//Курс и Кратность
	Если СвойствоЕстьИОноЗаполнено("ВалютаДокумента", СтруктураПараметров) Тогда
		СтруктураКурсаДокумента = Неопределено;
		Если СвойствоЕстьИОноНЕЗаполнено("КурсДокумента", СтруктураПараметров) Тогда
			СтруктураКурсаДокумента      = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураПараметров.ВалютаДокумента, ДатаДокумента);
			СтруктураПараметров.КурсДокумента = СтруктураКурсаДокумента.Курс;

			Если СтруктураПараметров.Свойство("КратностьДокумента") Тогда
				СтруктураПараметров.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

		Если СвойствоЕстьИОноНЕЗаполнено("КурсВзаиморасчетов", СтруктураПараметров) Тогда
			Если СтруктураКурсаДокумента = Неопределено Тогда
				СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураПараметров.ВалютаДокумента, ДатаДокумента);
			КонецЕсли;
			СтруктураПараметров.КурсВзаиморасчетов = СтруктураКурсаДокумента.Курс;

			Если СтруктураПараметров.Свойство("КратностьВзаиморасчетов") Тогда
				СтруктураПараметров.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// флаг нужен для установки определения реквизитов (флагов) "УчитыватьНДС" и "СуммаВключаетНДС"
	флСуммаВключаетНДС = НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "СуммаНеВключаетНДС");
	
	Если СтруктураПараметров.Свойство("ТипЦен") Тогда
		// Если тип цен оказался не заполненным, то берем его из установок пользователя
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ТипЦен) И (ТипОперации = "Продажа" ИЛИ ТипОперации = "ПродажаКомиссия") Тогда
			СтруктураПараметров.ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойТипЦенПродажи");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураПараметров.ТипЦен) Тогда
			// Если ТипЦен - элемент справочника ТипыЦенНоменклатуры и цены выбранного типа расчетные, 
			// то флаги включения налогов надо брать из базовой цены
			Если ТипЗнч(СтруктураПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") И СтруктураПараметров.ТипЦен.Рассчитывается Тогда
				флСуммаВключаетНДС = СтруктураПараметров.ТипЦен.БазовыйТипЦен.ЦенаВключаетНДС;
			Иначе
				флСуммаВключаетНДС = СтруктураПараметров.ТипЦен.ЦенаВключаетНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОрганизацияПлательщикНДС = Истина; // для заполнения реквизита УчитыватьНДС
	Если СвойствоЕстьИОноЗаполнено("Организация", СтруктураПараметров) Тогда
		Если НалоговыйУчет.ПолучитьСхемуНалогообложения(ОбщегоНазначения.ПолучитьРабочуюДату(), СтруктураПараметров.Организация).НДС = Ложь Тогда
			ОрганизацияПлательщикНДС = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("УчитыватьНДС") И ОрганизацияПлательщикНДС Тогда
		СтруктураПараметров.УчитыватьНДС     = Истина;	
		Если СтруктураПараметров.Свойство("СуммаВключаетНДС") Тогда
			СтруктураПараметров.СуммаВключаетНДС = СтруктураПараметров.УчитыватьНДС И флСуммаВключаетНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если  СтруктураПараметров.Свойство("АвторасчетНДС")
		И СтруктураПараметров.Свойство("УчитыватьНДС")
		И СтруктураПараметров.УчитыватьНДС Тогда
		
		СтруктураПараметров.АвторасчетНДС = Истина;
		
	КонецЕсли;


КонецПроцедуры // ПодготовитьСтруктуруДляЗаполненияШапкиДокумента()

Функция ПроверитьНаличиеСсылокНаДоговорКонтрагентаВЗаказахПокупателей(ДоговорКонтрагента) Экспорт
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 
	|1
	|ИЗ РегистрНакопления.ЗаказыПокупателей
	|ГДЕ ДоговорКонтрагента = &ДоговорКонтрагента";
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

//Регистрация документа в регистре сведений ДокументыТребующиеДопроведения
//Процедура вызывается из процедуры ОтложенноеПроведениеДокументов.ПриПроведенииРегистрацияОтложенногоПроведения, которая в свою очередь
//		вызывается из соответствующей подписки на событие.
//		Запись в регистр происходит при проведении документа в режиме отложенного проведения
//		Удаление записи происходит при перепроведении и отмене проведения в универсальной процедуре УдалитьДвиженияРегистратора 
//Параметры:
//	ДокументСсылка 	- документ, который проводится
//	Организация 	- организация, указанная в документе
//
Процедура РегистрацияОтложенногоПроведения(ДокументСсылка, Организация) Экспорт
	Набор = РегистрыСведений.ДокументыТребующиеДопроведения.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ДокументСсылка);
	Запись 				= Набор.Добавить();
	Запись.Организация 	= Организация;
	Запись.Период 		= ДокументСсылка.Дата;
	Запись.Регистратор 	= ДокументСсылка;
	Запись.Активность 	= Истина;
	Набор.Записать();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С РЕГЛАМЕНТНЫМ ЗАДАНИЕМ
// (Создание и управление регламентными заданиями разрешено только пользователям, имеющим административные права.)

// Создает регламентное задание, если задания с переданным идентификатором не существует
// 
// Параметры
//  МетаданныеРегламентноеЗадание - метаданные или имя регламентного задания
//  Идентификатор - строка, уникальный идентификатор регламентного задания.
//                  В случае, если задание создано, то в параметр помещается строка 
//                  с уникальным идентификатором созданного задания.
//  Сообщение - начало текста сообщения об ошибке
//  Заголовок - заголовок сообщения об ошибке
//
// Возвращаемое значение
//  Истина - задание существует или было успешно создано
//  Ложь - нет гарантии существования задания с указанным идентификатором
Функция ОбеспечитьРегламентноеЗадание(МетаданныеРегламентноеЗадание, Идентификатор, Сообщение = "", Заголовок = "") Экспорт
	
	// Проверим, возможно регл. задание уже есть
	Если НЕ ПустаяСтрока(Идентификатор) Тогда
		
		Попытка
			Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Идентификатор));
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(Сообщение + ?(ПустаяСтрока(Сообщение), "", ": ") + ОписаниеОшибки(), , Заголовок);
			Возврат Ложь;
		КонецПопытки;
		
		Если Задание <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
		
	// Создаем новое регламентное задание
	Попытка
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(МетаданныеРегламентноеЗадание);
		Задание.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение + ?(ПустаяСтрока(Сообщение), "", ": ") + ОписаниеОшибки(), , Заголовок);
		Возврат Ложь;
	КонецПопытки;
	
	Идентификатор = Задание.УникальныйИдентификатор;
	
	Возврат Истина;
		
КонецФункции

// Получает данные из регламентного задания
// 
// Параметры
//  УникальныйИдентификатор - уникальный идентификатор регламентного задания (тип: УникальныйИдентификатор)
//  СтруктураСвойств - структура, в которую будут помещены значения прочитанных свойств регламентного задания.
//                     Следует передавать структуру с перечнем свойств, которые должны быть получены.
//	                   Будут заполнены только существующие в переданной структуре ключи.
//                     Расписание регламентного задания будет передано внутри ХранилищеЗначения,
//                     для того, чтобы избежать попытки передачи с сервера мутабельного значения.
//                     В свойстве Метаданные будет передана строка - имя метаданного регламентного задания.
//  Сообщение - начало текста сообщения об ошибке
//  Заголовок - заголовок сообщения об ошибке
//
// Возвращаемое значение
//  Истина - свойства прочитаны
//  Ложь - задание с переданным идентификатором не существует или произошла ошибка при получении задания
Функция ПрочитатьРегламентноеЗадание(УникальныйИдентификатор, СтруктураСвойств, Сообщение = "", Заголовок = "") Экспорт
	
	Попытка
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение + ?(ПустаяСтрока(Сообщение), "", ": ") + ОписаниеОшибки(), , Заголовок);
		Возврат Ложь;
	КонецПопытки;
	
	Если Задание = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Добавим в структуру нужные параметры регламентного задания
	ЗаполнитьЗначенияСвойств(СтруктураСвойств, Задание);
	
	// Мутабельные параметры представим в виде, позволющем передать их на клиента
	// Структура не должна содержать свойства "ПоследнееЗадание"
	Если СтруктураСвойств.Свойство("Расписание") Тогда
		СтруктураСвойств.Вставить("Расписание", Новый ХранилищеЗначения(СтруктураСвойств.Расписание));
	КонецЕсли;
	
	Если СтруктураСвойств.Свойство("Метаданные") Тогда
		СтруктураСвойств.Вставить("Метаданные", СтруктураСвойств.Метаданные.Имя);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Изменяет свойства регламентного задания
// 
// Параметры
//  УникальныйИдентификатор - уникальный идентификатор регламентного задания (тип: УникальныйИдентификатор)
//  СтруктураСвойств - структура, значения свойств которой будут записаны в реквизиты свойства регламентного задания.
//                     Ключи - имена свойств, значения - значения свойств.
//                     Нельзя передавать имена свойств, которые не могут быть установлены у регламентного задания.
//                     Расписание регламентного задания должно быть передано внутри ХранилищеЗначения,
//                     для того, чтобы избежать попытки передачи с сервера мутабельного значения
//                     (свойство с ключем Расписание должно иметь тип ХранилищеЗначения, 
//                     в хранилище должно быть помещено значение типа Расписание).
//  Сообщение - начало текста сообщения об ошибке
//  Заголовок - заголовок сообщения об ошибке
//
// Возвращаемое значение
//  Истина - задание записано
//  Ложь - задание не существует или не записано
Функция ИзменитьРегламентноеЗадание(УникальныйИдентификатор, Знач СтруктураСвойств, Сообщение = "", Заголовок = "") Экспорт
	
	Попытка
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение + ?(ПустаяСтрока(Сообщение), "", ": ") + ОписаниеОшибки(), , Заголовок);
		Возврат Ложь;
	КонецПопытки;
	
	Если Задание = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Мутабельные параметры передаются на сервер внутри ХранилищеЗначения, 
	// получим их в "обычном" виде
	Если СтруктураСвойств.Свойство("Расписание") Тогда
		СтруктураСвойств.Вставить("Расписание", СтруктураСвойств.Расписание.Получить());
	КонецЕсли;
	
	Попытка
		ЗаполнитьЗначенияСвойств(Задание, СтруктураСвойств);
		Задание.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение + ?(ПустаяСтрока(Сообщение), "", ": ") + ОписаниеОшибки(), , Заголовок);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Удаляет регламентное задание
// 
// Параметры
//  УникальныйИдентификатор - уникальный идентификатор регламентного задания (тип: УникальныйИдентификатор)
//  Сообщение - начало текста сообщения об ошибке
//  Заголовок - заголовок сообщения об ошибке
//
// Возвращаемое значение
//  Истина - задания не существует (не найдено или удалено)
//  Ложь - ошибка при удалении задания, задание может существовать
Функция УдалитьРегламентноеЗадание(УникальныйИдентификатор, Сообщение = "", Заголовок = "") Экспорт
	
	Попытка
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение + ?(ПустаяСтрока(Сообщение), "", ": ") + ОписаниеОшибки(), , Заголовок);
		Возврат Ложь;
	КонецПопытки;
	
	Если Задание = Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Попытка
		Задание.Удалить();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение + ?(ПустаяСтрока(Сообщение), "", ": ") + ОписаниеОшибки(), , Заголовок);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ ПРОВЕРКИ ЗАПОЛНЕНИЯ ОТЧЕТОВ ПОД РЛС

// Функция проверяет есть используються ли роли с ограничением прав доступа на уровне записи
//
Функция ИспользуетсяОграниченияПравДоступаНаУровнеЗаписей() Экспорт 
    ИспользуетсяРЛС = Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить();
    ИспользуетсяРЛС = ИспользуетсяРЛС И Не РольДоступна("ПолныеПрава");
    Возврат ИспользуетсяРЛС;
КонецФункции

// Проверяет запрос за наличие ошибки доступа
//
Функция ОшибкаДоступа(МассивПараметровЗапроса, ИспользоватьМенеджерВременныхТаблиц = истина) Экспорт
	Запрос = Новый Запрос;
	Если ИспользоватьМенеджерВременныхТаблиц тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	ОшибкаВЗапросе = ложь;
	Для каждого ПараметрыЗапроса из МассивПараметровЗапроса Цикл
		Для каждого ПараметрЗапроса из ПараметрыЗапроса Цикл
			Если ПараметрЗапроса.Ключ = "Текст" тогда
				Запрос.Текст = ПараметрЗапроса.Значение;
			Иначе
				Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЕсли;
		КонецЦикла;
		ОшибкаВЗапросе = ложь;
		Попытка 
			Запрос.Выполнить();
		Исключение
			ОшибкаВЗапросе = Истина;
			Прервать;
		КонецПопытки;
	КонецЦикла;
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Запрос = Неопределено;
	Возврат Не ОшибкаВЗапросе;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ КАДРОВОГО УЧЕТА

// Процедура осуществляет проверку дублей в справочнике ФизическиеЛица
// Проверка происходит по паспортным данным, ИНН, ПФР и ФИО
//
Процедура ПроверитьДублиФизлиц(Ссылка, ЗаписьПаспортныхДанных = Неопределено, ИНН, ДРФО, ФИО) Экспорт	

	
	ЕстьДублиПаспортныхДанных	= Ложь;
	ЕстьДублиИНН				= Ложь;
	ЕстьДублиДРФО				= Ложь;
	
	Если ЗаписьПаспортныхДанных <> Неопределено И (
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументВид) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументСерия) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументНомер) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументДатаВыдачи)) Тогда
		
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",						Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ДокументВид",				ЗаписьПаспортныхДанных.ДокументВид);
		ЗапросПоДублям.УстановитьПараметр("ДокументСерия",				ЗаписьПаспортныхДанных.ДокументСерия);
		ЗапросПоДублям.УстановитьПараметр("ДокументНомер",				ЗаписьПаспортныхДанных.ДокументНомер);
		ЗапросПоДублям.УстановитьПараметр("ДокументДатаВыдачи",			ЗаписьПаспортныхДанных.ДокументДатаВыдачи);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПаспортныеДанныеФизЛиц.ФизЛицо
		|ИЗ
		|	РегистрСведений.ПаспортныеДанныеФизЛиц КАК ПаспортныеДанныеФизЛиц
		|ГДЕ
		|	ПаспортныеДанныеФизЛиц.ФизЛицо <> &Ссылка
		|	И ПаспортныеДанныеФизЛиц.ДокументВид = &ДокументВид
		|	И ПаспортныеДанныеФизЛиц.ДокументСерия = &ДокументСерия
		|	И ПаспортныеДанныеФизЛиц.ДокументНомер = &ДокументНомер
		|	И ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи = &ДокументДатаВыдачи";
		
		ВыборкаЗапроса = ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Сообщить("Физлицо: " + ВыборкаЗапроса.Физлицо +" имеет такие же паспортные данные как и у "+Строка(Ссылка));
			ЕстьДублиПаспортныхДанных = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ИНН",	ИНН);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|   ФизическиеЛица.Наименование,
		|	ФизическиеЛица.Ссылка КАК Физлицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка <> &Ссылка
		|	И ФизическиеЛица.ИНН = &ИНН
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическиеЛица.Наименование";
		
		
		ВыборкаЗапроса = ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Сообщить("Физлицо: " + ВыборкаЗапроса.Физлицо +" имеет такой же ИНН как и у "+Строка(Ссылка));
			ЕстьДублиИНН = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ДРФО) тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.Ссылка КАК Физлицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка <> &Ссылка
		|	И ФизическиеЛица.КодПоДРФО = &ДРФО
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическиеЛица.Наименование";
		
		
		ЗапросПоДублям 	= Новый Запрос(ТекстЗапроса);
		ЗапросПоДублям.УстановитьПараметр("Ссылка", 				Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ДРФО", 					ДРФО);
		РезультатЗапросаПоДублям 	= ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса 				= РезультатЗапросаПоДублям.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Сообщить("Физлицо: " + ВыборкаЗапроса.Физлицо +" имеет такой же код ДРФО как и у "+Строка(Ссылка));
			ЕстьДублиДРФО = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФИО) И
		 НЕ ЕстьДублиИНН И
		 НЕ ЕстьДублиПаспортныхДанных И
		 НЕ ЕстьДублиДРФО Тогда
		 
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ФИО",	СтрЗаменить(ФИО, " ", ""));
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФИОФизЛиц.ФизЛицо
		|ИЗ
		|	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		|ГДЕ
		|	ФИОФизЛиц.ФизЛицо <> &Ссылка
		|	И ФИОФизЛиц.Фамилия + ФИОФизЛиц.Имя + ФИОФизЛиц.Отчество = &ФИО";
		
		ВыборкаЗапроса 				= ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Сообщить("Физлицо с таким ФИО (" + ВыборкаЗапроса.Физлицо +") уже есть в справочнике");
			ЕстьДублиПаспортныхДанных = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// ПРОЦЕДУРЫ ДЛЯ ЗАПИСИ ТЕКУЩИХ КАДРОВЫХ ДАННЫХ СОТРУДНИКА КОМПАНИИ

Процедура УстановитьРеквизитыИЗаписатьСотрудника(Выборка, Отказ)

	Пока Выборка.Следующий() Цикл
		
		СотрудникОбъект = Выборка.Сотрудник.ПолучитьОбъект();
		
		Если СотрудникОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СотрудникОбъект.ТекущееПодразделениеКомпании	= Выборка.Подразделение;
		СотрудникОбъект.ТекущаяДолжностьКомпании		= Выборка.Должность;
		СотрудникОбъект.ДатаПриемаНаРаботуВКомпанию		= Выборка.ДатаПриемаНаРаботу;
		СотрудникОбъект.ДатаУвольненияИзКомпании		= Выборка.ДатаУвольнения;
		
		Попытка	
			СотрудникОбъект.Заблокировать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		СотрудникОбъект.Записать();
		
	КонецЦикла;

КонецПроцедуры

// В процедуре всем сотрудникам, которые есть в документе регистраторе,
// устанавливаются текущие кадровые данные
// Перед записью данных необходимо отобрать данные без учета регистратора
// При записи данных необходимо отбирать данные с учетом регистратора
//
Процедура ЗаписатьТекущиеКадровыеДанныеСотрудника(Отказ, Замещение, БезРегистратора, ОбменДаннымиЗагрузка, Регистратор) Экспорт
	
	Если ОбменДаннымиЗагрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Работники.ФизЛицо КАК Физлицо
	|ПОМЕСТИТЬ ВТФизлица
	|ИЗ
	|	РегистрСведений.Работники КАК Работники
	|ГДЕ
	|	Работники.Регистратор = &Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	(НЕ СотрудникиОрганизаций.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский)))
	|	И СотрудникиОрганизаций.Физлицо В
	|			(ВЫБРАТЬ
	|				Физлица.Физлицо
	|			ИЗ
	|				ВТФизлица КАК Физлица)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.Сотрудник.Физлицо КАК Физлицо,
	|	РаботникиСрезПоследних.Подразделение КАК Подразделение,
	|	РаботникиСрезПоследних.Должность КАК Должность,
	|	ЕСТЬNULL(РаботникиПрием.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриемаНаРаботу,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РаботникиУвольнение.Период, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(РаботникиУвольнение.Период, ДЕНЬ, -1)
	|	КОНЕЦ КАК ДатаУвольнения
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(
	|				,
	|				Физлицо В
	|						(ВЫБРАТЬ
	|							Физлица.Физлицо
	|						ИЗ
	|							ВТФизлица КАК Физлица)
	|					" + ?(БезРегистратора, "И Регистратор <> &Регистратор", "") + ") КАК РаботникиСрезПоследних
	|		ПО Сотрудники.Физлицо = РаботникиСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РаботникиПрием
	|		ПО Сотрудники.Физлицо = РаботникиПрием.ФизЛицо
	|			И (РаботникиПрием.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
	|			" + ?(БезРегистратора, "И (РаботникиПрием.Регистратор <> &Регистратор)", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РаботникиУвольнение
	|		ПО Сотрудники.Физлицо = РаботникиУвольнение.ФизЛицо
	|			И (РаботникиУвольнение.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|			" + ?(БезРегистратора, "И (РаботникиУвольнение.Регистратор <> &Регистратор)", "") + "
	|ГДЕ
	|	(Сотрудники.Сотрудник.ТекущееПодразделениеКомпании <> ЕСТЬNULL(РаботникиСрезПоследних.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	|			ИЛИ Сотрудники.Сотрудник.ТекущаяДолжностьКомпании <> ЕСТЬNULL(РаботникиСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиОрганизаций.ПустаяСсылка))
	|			ИЛИ Сотрудники.Сотрудник.ДатаПриемаНаРаботуВКомпанию <> ЕСТЬNULL(РаботникиПрием.Период, ДАТАВРЕМЯ(1, 1, 1))
	|			ИЛИ Сотрудники.Сотрудник.ДатаУвольненияИзКомпании <> ЕСТЬNULL(РаботникиУвольнение.Период, ДАТАВРЕМЯ(1, 1, 1)))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьРеквизитыИЗаписатьСотрудника(Выборка, Отказ);
	
КонецПроцедуры

Процедура ВыгрузитьДоступыхСотрудниковВВремТабл(МассивСотрудников, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизаций.Ссылка
	|	ПОМЕСТИТЬ ВрмТблСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СоставГруппы.Ссылка КАК ГруппаПользователей
	|		ИЗ
	|			Справочник.ГруппыПользователей.ПользователиГруппы КАК СоставГруппы
	|		ГДЕ
	|			СоставГруппы.Пользователь = &ТекущийПользователь) КАК ГруппыПользователей
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения
	|		ПО (ОбособленныеПодразделения.ГоловнаяОрганизация = СотрудникиОрганизаций.Организация
	|					И (НЕ ОбособленныеПодразделения.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|				ИЛИ ОбособленныеПодразделения.Ссылка = СотрудникиОрганизаций.Организация)
	|ГДЕ СотрудникиОрганизаций.Ссылка В (&МассивСотрудников)
	|	И (НЕ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1 КАК ПолеОтбора
	|				ИЗ
	|					РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа
	|				ГДЕ
	|					НазначениеВидовОбъектовДоступа.ГруппаПользователей = ГруппыПользователей.ГруппаПользователей
	|					И ВЫБОР
	|						КОГДА НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации)
	|							ТОГДА ВЫБОР
	|									КОГДА 1 В
	|											(ВЫБРАТЬ ПЕРВЫЕ 1
	|												1
	|											ИЗ
	|												(ВЫБРАТЬ
	|													1 КАК ПолеОтбора
	|												) КАК Оптмизация ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	|													ПО
	|														НастройкиПравДоступаПользователей.ОбъектДоступа = ОбособленныеПодразделения.Ссылка
	|															И НастройкиПравДоступаПользователей.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации)
	|															И (НастройкиПравДоступаПользователей.Пользователь = НазначениеВидовОбъектовДоступа.ГруппаПользователей
	|																ИЛИ НастройкиПравДоступаПользователей.Пользователь = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)))
	|										ТОГДА ИСТИНА
	|									ИНАЧЕ ЛОЖЬ
	|								КОНЕЦ
	|						КОГДА НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.ФизическиеЛица)
	|							ТОГДА ВЫБОР
	|									КОГДА 1 В
	|											(ВЫБРАТЬ ПЕРВЫЕ 1
	|												1
	|											ИЗ
	|												Справочник.ФизическиеЛица КАК ФизическиеЛица ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	|													ПО
	|														НастройкиПравДоступаПользователей.ОбъектДоступа = ФизическиеЛица.ГруппаДоступаФизическогоЛица
	|															И НастройкиПравДоступаПользователей.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.ФизическиеЛица)
	|															И НастройкиПравДоступаПользователей.ОбластьДанных = ЗНАЧЕНИЕ(Перечисление.ОбластиДанныхОбъектовДоступа.ФизическиеЛицаДанные)
	|															И (НастройкиПравДоступаПользователей.Пользователь = НазначениеВидовОбъектовДоступа.ГруппаПользователей
	|																ИЛИ НастройкиПравДоступаПользователей.Пользователь = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи))
	|											ГДЕ
	|												ФизическиеЛица.Ссылка = СотрудникиОрганизаций.Физлицо)
	|										ТОГДА ИСТИНА
	|									ИНАЧЕ ЛОЖЬ
	|								КОНЕЦ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ = ЛОЖЬ))
	|	И (НЕ ГруппыПользователей.ГруппаПользователей ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Рез = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция ПолучитьДанныеСотрудниковОрганизаций(МассивСотрудников, ДатаСреза, ПоказыватьПодразделениеОрганизации, ПоказыватьДолжность, ПоказыватьЗанимаемыхСтавок, ПоказыватьГрафикРаботы, ПоказыватьСостояние) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПроверятьНаличиеПравДоступаКСотрудникам = ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей И ПараметрыДоступа("Чтение", Метаданные.Справочники.СотрудникиОрганизаций, "Наименование", ПользователиИнформационнойБазы.ТекущийПользователь()).ОграничениеУсловием;
	
	Если ПроверятьНаличиеПравДоступаКСотрудникам Тогда
		ВыгрузитьДоступыхСотрудниковВВремТабл(МассивСотрудников, МенеджерВременныхТаблиц);
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|Сотрудник КАК Сотрудник,
	|ПРЕДСТАВЛЕНИЕ(ВидЗанятости) КАК ВидЗанятости,
	|Период КАК Период";
	
	Если ПоказыватьПодразделениеОрганизации Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|ПРЕДСТАВЛЕНИЕ(Подразделение) КАК Подразделение";
	КонецЕсли;

    Если ПоказыватьДолжность Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|ПРЕДСТАВЛЕНИЕ(Должность) КАК Должность";
	КонецЕсли;

    Если ПоказыватьЗанимаемыхСтавок Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|ЗанимаемыхСтавок КАК ЗанимаемыхСтавок";
	КонецЕсли;
	
	Если ПоказыватьГрафикРаботы Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|ПРЕДСТАВЛЕНИЕ(ГрафикРаботы) КАК ГрафикРаботы";
	КонецЕсли;
	
	Если ПоказыватьСостояние Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|Состояние КАК Состояние";
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|(	
	|ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	СотрудникиОрганизаций.ВидЗанятости КАК ВидЗанятости,
	|ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Период, ДЕНЬ, -1)
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Период
	|КОНЕЦ КАК Период";
	
	Если ПоказыватьПодразделениеОрганизации Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	| РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Подразделение"; 
	
	КонецЕсли;
	
	Если ПоказыватьДолжность Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	| РаботникиОрганизацийСрезПоследних.Должность КАК Должность";
	КонецЕсли;
	
	Если ПоказыватьЗанимаемыхСтавок Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	| РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок";
	КонецЕсли;
	
	Если ПоказыватьГрафикРаботы Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы КАК ГрафикРаботы";
	КонецЕсли;
	
	Если ПоказыватьСостояние Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|			ТОГДА ВЫБОР
	|					КОГДА ФизическиеЛица.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|						ТОГДА ""Принята ""
	|					ИНАЧЕ ""Принят ""
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ВЫБОР
	|					КОГДА ФизическиеЛица.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|						ТОГДА ""Уволена ""
	|					ИНАЧЕ ""Уволен ""
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)
	|			ТОГДА ВЫБОР
	|					КОГДА ФизическиеЛица.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|						ТОГДА ""Переведена ""
	|					ИНАЧЕ ""Переведен ""
	|				КОНЕЦ
	|		ИНАЧЕ ""Не указано ""
	|КОНЕЦ КАК Состояние"
	КонецЕсли;

	
	Если ПроверятьНаличиеПравДоступаКСотрудникам Тогда		
		ТекстЗапросКСотрудникам = "ВЫБРАТЬ Ссылка ИЗ ВрмТблСотрудники";
	Иначе
		ТекстЗапросКСотрудникам = "&МассивСотрудников";
		Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамДатаСреза, Сотрудник В (" + ТекстЗапросКСотрудникам + ")) КАК РаботникиОрганизацийСрезПоследних
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизацийСрезПоследних.Сотрудник
    |
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ПО СотрудникиОрганизаций.ФизЛицо = ФизическиеЛица.Ссылка
	|) КАК Вложенный";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("парамДатаСреза", ДатаСреза);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Функция возвращает список работающих физлиц
// Используется документом Отсутствие на рабочем месте, что бы сообщить, работает физическое лицо или нет
//
Функция ПолучитьТаблицуРаботающихФизическихЛиц(ДатаСреза, СписокФизическихЛиц) Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДатаСреза",				ДатаСреза);
	Запрос.УстановитьПараметр("СписокФизическихЛиц",	СписокФизическихЛиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиСрезПоследних.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	РегистрСведений.Работники.СрезПоследних(&ДатаСреза, Физлицо В (&СписокФизическихЛиц)) КАК РаботникиСрезПоследних
	|ГДЕ
	|	РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиСрезПоследних.Сотрудник.Физлицо
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаСреза, Сотрудник.Физлицо В (&СписокФизическихЛиц)) КАК РаботникиСрезПоследних
	|ГДЕ
	|	РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Физлицо");
	
КонецФункции

