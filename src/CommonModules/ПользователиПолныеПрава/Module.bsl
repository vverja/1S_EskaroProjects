////////////////////////////////////////////////////////////////////////////////
// Процедуры, выполнение которых требует привилегированного режима

// Функция проверяет существования пользователя информационной базы
// Параметры
// ЗначениеПоиска - уникальный идентификатор, строка - УИД пользователя ИБ
//												или имя пользователя ИБ
// 
// Возвращаемое значение:
// Истина	- пользователь существует
// Ложь		- пользователь не существует
//
Функция ПользовательСуществует(знач ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ЗначениеПоиска);
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ЗначениеПоиска);
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура добавляет исполнителя  в регистр Роли и исполнители, если
// в регистре еще нет записей по исполнителю
//
Процедура ЗаписатьИсполнителя(Исполнитель, Роли = Неопределено)
	
	НаборЗаписей = РегистрыСведений.РолиИИсполнители.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Исполнитель.Установить(Исполнитель);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Роли = Неопределено Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Организация	= Справочники.Организации.ПустаяСсылка();
		НоваяЗапись.Исполнитель	= Исполнитель;
		
	Иначе
		Если ТипЗнч(Роли) = Тип("Массив") Тогда
			МассивРолей = Роли;
		Иначе
			МассивРолей = Новый Массив;
			МассивРолей.Добавить(Роли);
		КонецЕсли;
		
		Для Каждого Роль Из МассивРолей Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			
			НоваяЗапись.Организация	= Справочники.Организации.ПустаяСсылка();
			НоваяЗапись.Исполнитель	= Исполнитель;
			НоваяЗапись.Роль		= Роль;
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Процедура, определяет пользователя, под которым запущен сеанс и пытается
// найти соответсвие ему в справочнике Пользователи. Если соответствие
// не найдено - создается новый элемент. Параметр сеанса ТекущийПользователь
// устанавливается как ссылка на найденный (созданный) элемент справочника.
//
Процедура ОпределитьТекущегоПользователя(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра <> "ТекущийПользователь" Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьПользователя = Ложь;
	
	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		ИмяПользователя			= "<Не указан>";
		ПолноеИмяПользователя	= "<Не указан>";
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Код = &Имя";
		
		Запрос.Параметры.Вставить("Имя", ИмяПользователя);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			СоздатьПользователя = Истина;
			ИдентификаторПользователяИБ = Новый УникальныйИдентификатор;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПараметрыСеанса.ТекущийПользователь = Выборка.Ссылка;
		КонецЕсли;
	Иначе
		ИдентификаторПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
		
		Запрос.Параметры.Вставить("ИдентификаторПользователяИБ ", ИдентификаторПользователяИБ);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ПользовательПоКоду = ПроверитьПользователяПоКоду(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
			Если ПользовательПоКоду <> Неопределено Тогда
				ПараметрыСеанса.ТекущийПользователь = ПользовательПоКоду;
				ПользовательОбъект = ПользовательПоКоду.ПолучитьОбъект();
				ПользовательОбъект.ИдентификаторПользователяИБ = ИдентификаторПользователяИБ;
				ПользовательОбъект.Записать();
			Иначе
				СоздатьПользователя = Истина;
				ИмяПользователя			= ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
				ПолноеИмяПользователя	= ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
			КонецЕсли;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПараметрыСеанса.ТекущийПользователь = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если СоздатьПользователя Тогда
		СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
		ПараметрыСеанса.ТекущийПользователь = СсылкаНового;
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Код			= ИмяПользователя;
		НовыйПользователь.Наименование	= ПолноеИмяПользователя;
		НовыйПользователь.ИдентификаторПользователяИБ = ИдентификаторПользователяИБ;
		НовыйПользователь.УстановитьСсылкуНового(СсылкаНового);
		
		Попытка
			НовыйПользователь.Записать();
		Исключение
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Пользователь: %1 не был найден в справочнике пользователей. Возникла ошибка при добавлении пользователя в справочник.
													|%2'"),
													ИмяПользователя, ОписаниеОшибки() );
			ВызватьИсключение ТекстСообщенияОбОшибке;
		КонецПопытки;
		
		УстановитьНастройкиПоУмолчанию(НовыйПользователь.Ссылка);
		
	КонецЕсли;
	
	Если НЕ Константы.РазделятьЗадачиПоОрганизациям.Получить() Тогда
		
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		
		Если Константы.РазделятьЗадачиПоРолямИсполнителей.Получить() Тогда
			РолиПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Роли;
			
			СоответствиеРолей = Новый Соответствие;
			
			МассивРолейИсполнителей = Новый Массив;
			МассивРолейИсполнителей.Добавить(Справочники.РолиИсполнителей.Расчетчик);
			МассивРолейИсполнителей.Добавить(Справочники.РолиИсполнителей.Кадровик);
			СоответствиеРолей.Вставить(Метаданные.Роли.ПолныеПрава, МассивРолейИсполнителей);
			
			ПользователиПереопределяемый.ДополнитьСоответствиеРолей(СоответствиеРолей);
			
			Для Каждого ЭлементСоответствия Из СоответствиеРолей Цикл
				ДоступнаяРоль			= ЭлементСоответствия.Ключ;
				МассивРолейИсполнителя	= ЭлементСоответствия.Значение;
				
				Если РолиПользователя.Содержит(ДоступнаяРоль) Тогда
					ЗаписатьИсполнителя(ТекущийПользователь, МассивРолейИсполнителя);
				КонецЕсли;
			КонецЦикла;
				
		Иначе
			ЗаписатьИсполнителя(ТекущийПользователь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	УстановленныеПараметры.Вставить(ИмяПараметра);
	
КонецПроцедуры

Функция ПроверитьПользователяПоКоду(ИмяПользователя)
	
	Если НЕ ПроверитьНеоднозначностьИмениПользователя(ИмяПользователя) Тогда
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'В информационной базе уже существует пользователь с таким именем: %1 (совпадают первые %2 символов)'"),
								ИмяПользователя,
								Метаданные.Справочники.Пользователи.ДлинаКода);
		ВызватьИсключение ТекстСообщенияОбОшибке;
	КонецЕсли;
	
	ДопустимаяДлинаИмени = Метаданные.Справочники.Пользователи.ДлинаКода;
	
	Если СтрДлина(ИмяПользователя) > ДопустимаяДлинаИмени Тогда
		ИмяПользователя = Лев(ИмяПользователя, ДопустимаяДлинаИмени);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Код = &ИмяПользователя";
	
	Запрос.Параметры.Вставить("ИмяПользователя", ИмяПользователя);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Пользователь = Выборка.Ссылка;
		Если ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
					Пользователь.ИдентификаторПользователяИБ) = Неопределено Тогда
			Возврат Пользователь;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Функция проверяет, что имя пользователя в пределах первых пятидесяти
// символов является уникальным. Пятьдесят символов - длина кода справочника
// Пользователи.
// Параметры:
// ИмяПользователя - строка - проверяемое имя пользователя
// Возвращаемое значение
// Истина - имя уникально
// Ложь   - имя неоднозначно
//
Функция ПроверитьНеоднозначностьИмениПользователя(знач ИмяПользователя)
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить("Имя");
	
	Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		НоваяСтрока = ТаблицаПользователей.Добавить();
		НоваяСтрока.Имя = Лев(ПользовательИБ.Имя, Метаданные.Справочники.Пользователи.ДлинаКода);
	КонецЦикла;
	
	КоличествоСтрокДо = ТаблицаПользователей.Количество();
	
	ТаблицаПользователей.Свернуть("Имя");
	
	Если КоличествоСтрокДо = 0 ИЛИ КоличествоСтрокДо = ТаблицаПользователей.Количество() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Выполняет попытку сопоставления / заполнения реквизита "ИдентификаторПользователяИБ"
// для каждого элемента справочника Пользователи.
//
Функция ЗаполнитьИдентификаторыПользователей() Экспорт
	
	СписокПользователей = Справочники.Пользователи.Выбрать();
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Пока СписокПользователей.Следующий() Цикл
		Пользователь = СписокПользователей.Ссылка;
		Если Не ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ)
			И СокрЛП(Пользователь.Код) <> "<Не указан>" Тогда
			// идентификатор не заполнен - пытаемся сопоставить по коду
			ИмяПользователя = СокрЛП(Пользователь.Код);
			Для Каждого ПользовательИБ Из ПользователиИБ Цикл
				Если ИмяПользователя = СокрЛП(Лев(ПользовательИБ.Имя, Метаданные.Справочники.Пользователи.ДлинаКода))
				   И Не ПользовательПоИдентификаторуСуществует(ПользовательИБ.УникальныйИдентификатор) Тогда
					ОбъектПользователь = Пользователь.ПолучитьОбъект();
					ОбъектПользователь.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
					ОбъектПользователь.Записать();
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ПользовательПоИдентификаторуСуществует(УникальныйИдентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 1
					|ИЗ
					|	Справочник.Пользователи КАК Пользователи
					|ГДЕ
					|	Пользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор";
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция РассинхронизацияИмениПользователя(Ссылка) Экспорт
	
	ИмяПользователя = СокрЛП(Ссылка.Код);
	ПолноеИмяПользователя = СокрЛП(Ссылка.Наименование);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Ссылка.ИдентификаторПользователяИБ);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПользовательИБ.Имя <> ИмяПользователя
		ИЛИ СокрЛП(ПолноеИмяПользователя) <> СокрЛП(ПользовательИБ.ПолноеИмя) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПользовательИБНеЗанят(знач ИмяПользователя) Экспорт
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПользовательПоИдентификаторуСуществует(ПользовательИБ.УникальныйИдентификатор) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ

// Процедура выполняет установку настроек по умолчанию для нового пользователя
Процедура УстановитьНастройкиПоУмолчанию(Пользователь)
	
	ЗначенияПоУмолчанию = Новый Соответствие;	
	ЗначенияПоУмолчанию.Вставить(ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьПодтверждениеПриЗакрытии, Истина);	
	ЗначенияПоУмолчанию.Вставить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойОтветственный, Пользователь);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ ПланВидовХарактеристик.НастройкиПользователей ГДЕ Не ЭтоГруппа И Не ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Установить(Пользователь);
	Пока Выборка.Следующий() Цикл
		Запись = Набор.Добавить();
		Запись.Пользователь = Пользователь;
		Запись.Настройка = Выборка.Ссылка;
		Запись.Значение = Запись.Настройка.ТипЗначения.ПривестиЗначение(ЗначенияПоУмолчанию[Запись.Настройка]);
	КонецЦикла;
	Набор.Записать();
	
КонецПроцедуры


