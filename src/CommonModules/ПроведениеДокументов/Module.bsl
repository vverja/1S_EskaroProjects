// Возвращает перечень регистров, которые требуется очистить
//
Функция МассивРегистровНужноОчистить(ДокументОбъект) Экспорт
	
	МассивРегистров = Новый Массив();
	
	Для Каждого Движение ИЗ ДокументОбъект.Метаданные().Движения Цикл
		МассивРегистров.Добавить(Движение.ПолноеИмя());
	КонецЦикла; 
	
	Возврат МассивРегистров;
	
КонецФункции

//Коновалова 12092012 + (Доработано Черный 03102012)
Процедура ПроверкаЗаполненияДокументаОснованияПриПроведенииОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Отказ ТОгда
		Возврат;
	КонецЕсли;
	
	Если НЕ РольДоступна("ПроведениеПлатежныхДокументовБезКонтроляПоРД") И ЗначениеЗаполнено(Источник.ДоговорКонтрагента) И Источник.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Источник.Ссылка, глЗначениеПеременной("ВалютаРегламентированногоУчета"));
		
		ЗадолженностьРеестр = СтруктураПараметровДДС.Таблица.Скопировать();
		ЗадолженностьРеестр.Свернуть("СделкаРегл, ДоговорКонтрагента,СчетОплаты,Контрагент", "СуммаСНДСВал");
		ЗадолженностьРеестр.Колонки.Добавить("Задолженность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		РасчетыВВалюте          = СтруктураПараметровДДС.ВалютаДокумента <> глЗначениеПеременной("ВалютаРегламентированногоУчета");
		
		Если РасчетыВВалюте Тогда
			УсловиеВалюта = СтруктураПараметровДДС.ВалютаДокумента;
		Иначе
			УсловиеВалюта = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
		
		Для каждого СчетДоговор из ЗадолженностьРеестр цикл
			
			Если СчетДоговор.СуммаСНДСВал=0 тогда
				Продолжить;
			КонецЕсли;
			
			//СчетДоговор.Задолженность = БухгалтерскийУчет.ПолучитьОстатокПоСчету(Организация,МоментДокумента,СчетДоговор.СчетОплаты,УсловиеВалюта, СчетДоговор.Контрагент, СчетДоговор.ДоговорКонтрагента);
			//Если НаправлениеДвижения <> Перечисления.НаправленияДвижений.Поступление тогда
			//	СчетДоговор.Задолженность = -СчетДоговор.Задолженность;
			//КонецеслИ;
			
			МоментДокумента = Новый МоментВремени(Источник.Дата, Источник.Ссылка);
			ТаблицаЗадолженностей = БухгалтерскийУчет.ПолучитьОстатокПоСчету(Источник.Организация,МоментДокумента,СчетДоговор.СчетОплаты,УсловиеВалюта ,СчетДоговор.Контрагент, СчетДоговор.ДоговорКонтрагента,СчетДоговор.СделкаРегл,?(СтруктураПараметровДДС.НаправлениеДвижения = Перечисления.НаправленияДвижений.Поступление,1,-1));
			Если РасчетыВВалюте Тогда
				СчетДоговор.Задолженность = ТаблицаЗадолженностей.Итог("ВалютнаяСуммаОстаток");
			Иначе
				СчетДоговор.Задолженность = ТаблицаЗадолженностей.Итог("СуммаОстаток");
			КонецЕсли; 
			
		КонецЦикла;
		
		ЗадолженностьРеестр.Свернуть(, "Задолженность");
		СуммаЗадолженности = ЗадолженностьРеестр[0].Задолженность;
		ЕстьЗадолженность = СуммаЗадолженности > 0;
		
		Если ЕстьЗадолженность Тогда
			ТаблицаПлатежа = Источник.РасшифровкаПлатежа.Выгрузить();
			ТаблицаПлатежа.Свернуть("ДокументРасчетовСКонтрагентом","СуммаПлатежа");
			РаспределеннаяСумма = 0;
			НераспределеннаяСумма = 0;
			Для каждого стр Из ТаблицаПлатежа Цикл
				Если ЗначениеЗаполнено(стр.ДокументРасчетовСКонтрагентом) Тогда
					РаспределеннаяСумма = РаспределеннаяСумма + стр.СуммаПлатежа;
				Иначе
					НераспределеннаяСумма = НераспределеннаяСумма + стр.СуммаПлатежа;
				КонецЕсли;
			КонецЦикла;
			
			Если РаспределеннаяСумма < СуммаЗадолженности Тогда
				Если НЕ НераспределеннаяСумма = 0 Тогда
					Отказ = Истина;
					Сообщить("Документ не может быть проведен, так как сумма распределенная по документам расчетов меньше суммы задолженности по данному договору");
				КонецЕсли;
			КонецЕсли;
			//Для каждого стр из ТаблицаПлатежа Цикл
			//	Если стр.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И НЕ ЗначениеЗаполнено(стр.ДокументРасчетовСКонтрагентом) Тогда
			//		Отказ = Истина;
			//		Сообщить("Документ не может быть проведен, так как в строке № " + н + " не заполнено значение реквизита ""Документ расчетов с контрагентом""");
			//	КонецЕсли;
			//	н=н+1;
			//КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Источник.Проведен = Ложь;
		Источник.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
		
КонецПроцедуры
//Коновалова 12092012 -

//---Черный А.В.--->
Процедура ПроверкаВидаВзаиморасчетовВПлатежныхДокументахОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") И
			(Источник.ВидОперации = Перечисления.ВидыОперацийППВходящее.ОплатаПокупателя ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийППВходящее.ВозвратДенежныхСредствПоставщиком
			ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийППВходящее.РасчетыПоКредитамИЗаймам ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийППВходящее.ПрочиеРасчетыСКонтрагентами) Тогда
			
			Для каждого СтрДок Из Источник.РасшифровкаПлатежа Цикл
				Если ЗначениеЗаполнено(СтрДок.ДоговорКонтрагента.ВидВзаиморасчетов) Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Отказ Тогда
				Сообщить("Обнаружены договоры с видом взаиморасчетов не являющимся безналичным", СтатусСообщения.Важное);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") И
			(Источник.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю
			ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами) Тогда
			
			Для каждого СтрДок Из Источник.РасшифровкаПлатежа Цикл
				Если ЗначениеЗаполнено(СтрДок.ДоговорКонтрагента.ВидВзаиморасчетов) Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Отказ Тогда
				Сообщить("Обнаружены договоры с видом взаиморасчетов не являющимся безналичным", СтатусСообщения.Важное);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") И
			(Источник.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком
			ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами) Тогда
			
			Для каждого СтрДок Из Источник.РасшифровкаПлатежа Цикл
				Если НЕ СтрДок.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Отказ Тогда
				Сообщить("Обнаружены договоры с видом взаиморасчетов не являющимся наличным", СтатусСообщения.Важное);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") И
			(Источник.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
			ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю) Тогда
			
			Для каждого СтрДок Из Источник.РасшифровкаПлатежа Цикл
				Если НЕ СтрДок.ДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.НаличныйРасчет Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Отказ Тогда
				Сообщить("Обнаружены договоры с видом взаиморасчетов не являющимся наличным", СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Источник.Проведен = Ложь;
			Источник.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//<---Черный А.В.---

//---Черный А.В.--->
Функция ПодходящийРегистраторПродаж(Регистратор)
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
		ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

Процедура ПриЗаписиВПродажиПередЗаписью(Источник, Отказ, Замещение) Экспорт
	//а=0;
	//НаборЗаписей = Источник;
	
	//Источник.Прочитать();
	//
	//тзНаборЗаписей = Источник.Выгрузить();
	//
	//Если тзНаборЗаписей.Количество() > 0 Тогда
	//	НаборЗаписей = РегистрыНакопления.ПродажиБухгалтерскийУчет.СоздатьНаборЗаписей();
	//	ТекущийРегистратор = Неопределено;
	//	
	//	Для каждого стрТЗ Из тзНаборЗаписей Цикл
	//		Если ПодходящийРегистраторПродаж(стрТЗ.Регистратор) Тогда
	//			Если Источник.мТаблицаДвижений <> Неопределено И Источник.мТаблицаДвижений.Количество() > 0 Тогда
	//				Источник.мТаблицаДвижений.Очистить();
	//				Источник.Очистить();
	//				Источник.Записать();
	//				Отказ = Истина;
	//			КонецЕсли;
	//			Если ТекущийРегистратор <> стрТЗ.Регистратор Тогда
	//				Если НаборЗаписей.Количество() > 0 И ТекущийРегистратор <> Неопределено Тогда
	//					НаборЗаписей.Записать();
	//				КонецЕсли;
	//				
	//				ТекущийРегистратор = стрТЗ.Регистратор;
	//				НаборЗаписей.Отбор.Регистратор.Установить(стрТЗ.Регистратор);
	//				НаборЗаписей.Прочитать();
	//				НаборЗаписей.Очистить();
	//			КонецЕсли;
	//			
	//			НоваяЗапись = НаборЗаписей.Добавить();
	//			НоваяЗапись.Активность = Истина;
	//			НоваяЗапись.Регистратор = стрТЗ.Регистратор;
	//			НоваяЗапись.Период = стрТЗ.Период;
	//			НоваяЗапись.ДокументПродажи = стрТЗ.ДокументПродажи;
	//			НоваяЗапись.Номенклатура = стрТЗ.Номенклатура;
	//			//НоваяЗапись.НомерСтроки = стрТЗ.НомерСтроки;
	//			НоваяЗапись.Организация = стрТЗ.Организация;
	//			НоваяЗапись.Стоимость = стрТЗ.Стоимость;
	//			НоваяЗапись.НДС = стрТЗ.НДС;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Если НаборЗаписей.Количество() > 0 Тогда
	//		НаборЗаписей.Записать();
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписиВПродажиОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	Если НЕ Отказ Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
		|ИЗ
		|	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
		|ГДЕ
		|	СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация
		|	И СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение = &Подразделение";
		
		ЗапросКурс = Новый Запрос;
		ЗапросКурс.Текст = 
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
		
		ЗапросКурс.УстановитьПараметр("Валюта", глЗначениеПеременной("ВалютаУправленческогоУчета"));
		
		ДвиженияПродажиУпр = Источник.Движения.Продажи;
		ДвиженияПродажиБУ = Источник.Движения.ПродажиБухгалтерскийУчет;
		
		Если ДвиженияПродажиУпр.Количество() = 0 Тогда
			ДвиженияПродажиУпр.Прочитать();
		КонецЕсли;
		
		ДвиженияПродажиБУ.Прочитать();
		ДвиженияПродажиБУ.Очистить();
		
		Если ДвиженияПродажиУпр.Количество() > 0 Тогда
			Для каждого ДвижениеУпр Из ДвиженияПродажиУпр Цикл
				Запрос.УстановитьПараметр("Организация", ДвижениеУпр.Организация);
				Запрос.УстановитьПараметр("Подразделение", ДвижениеУпр.Подразделение);
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Количество() > 1 Тогда
					Сообщить("Обнаружено избыточное сопоставление подразделений");
					Пока Выборка.Следующий() Цикл
						Сообщить("Подразделение: """ + СокрЛП(ДвижениеУпр.Подразделение) + """, Подразделение организации: """ + Выборка.ПодразделениеОрганизации + """");	
					КонецЦикла;
					Отказ = Истина;
					Прервать;
				Иначе
					Выборка.Следующий();
					ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
				КонецЕсли;
				
				ЗапросКурс.УстановитьПараметр("НаДату", Источник.Дата);
				ВыборкаКурсов = ЗапросКурс.Выполнить().Выбрать();
				Если ВыборкаКурсов.Следующий() Тогда
					Курс = ВыборкаКурсов.Курс;
					Кратность = ВыборкаКурсов.Кратность;
					
					Если Курс = 0 ИЛИ Кратность = 0 Тогда
						Сообщить("Обнаружен нулевой курс или кратность валюты управленческого учета на " + Источник.Дата);
						Отказ = Истина;
						Прервать;
					КонецЕсли;
				Иначе
					Сообщить("Не удалось получить курс валюты управленческого учета на " + Источник.Дата);
					Отказ = Истина;
					Прервать;
				КонецЕсли;
				
		
				НовоеДвижение = ДвиженияПродажиБУ.Добавить();
				НовоеДвижение.Активность				 = ДвижениеУпр.Активность;
				НовоеДвижение.ДоговорКонтрагента		 = ДвижениеУпр.ДоговорКонтрагента;
				НовоеДвижение.ДокументПродажи			 = ДвижениеУпр.ДокументПродажи;
				НовоеДвижение.ЗаказПокупателя			 = ДвижениеУпр.ЗаказПокупателя;
				НовоеДвижение.Количество				 = ДвижениеУпр.Количество;
				НовоеДвижение.Контрагент				 = ДвижениеУпр.Контрагент;
				НовоеДвижение.НДС						 = ДвижениеУпр.НДС * Курс / Кратность;
				НовоеДвижение.Номенклатура				 = ДвижениеУпр.Номенклатура;
				НовоеДвижение.Организация				 = ДвижениеУпр.Организация;
				НовоеДвижение.Период					 = ДвижениеУпр.Период;
				НовоеДвижение.Подразделение				 = ПодразделениеОрганизации;
				НовоеДвижение.Проект					 = ДвижениеУпр.Проект;
				НовоеДвижение.Стоимость					 = ДвижениеУпр.Стоимость * Курс / Кратность;
				НовоеДвижение.СтоимостьБезСкидок		 = ДвижениеУпр.СтоимостьБезСкидок * Курс / Кратность;
				НовоеДвижение.ХарактеристикаНоменклатуры = ДвижениеУпр.ХарактеристикаНоменклатуры;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписиВПродажиСебестоимостьОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	Если НЕ Отказ Тогда
		
		//Источник = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		
		ДвиженияПродажиБУ = Источник.Движения.ПродажиСебестоимостьБухгалтерскийУчет;
		ДвиженияПродажиБУ.Прочитать();
		ДвиженияПродажиБУ.Очистить();
		
		ДвиженияПродажиУпр = Источник.Движения.ПродажиСебестоимость;
		ДвиженияПродажиУпр.Прочитать();
		тзПродажиСебестоимость = ДвиженияПродажиУпр.Выгрузить();
		
		ДвиженияБух = Источник.Движения.Хозрасчетный;
		ДвиженияБух.Прочитать();
		тзПроводки = ДвиженияБух.Выгрузить();
		
		ДвиженияПартии = Источник.Движения.ПартииТоваровНаСкладахБухгалтерскийУчет;
		ДвиженияПартии.Прочитать();
		тзПартии = ДвиженияПартии.Выгрузить();
		
		Запрос = Новый Запрос;
		
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.РасчетСебестоимостиВыпуска") Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаПартий.Период,
			|	ТаблицаПартий.Регистратор,
			|	ТаблицаПартий.НомерСтроки,
			|	ТаблицаПартий.Активность,
			|	ТаблицаПартий.ВидДвижения,
			|	ТаблицаПартий.Организация,
			|	ТаблицаПартий.Номенклатура,
			|	ТаблицаПартий.СчетУчета,
			|	ТаблицаПартий.НалоговоеНазначение,
			|	ТаблицаПартий.Склад,
			|	ТаблицаПартий.ДокументОприходования,
			|	ТаблицаПартий.ХарактеристикаНоменклатуры,
			|	ТаблицаПартий.СерияНоменклатуры,
			|	ТаблицаПартий.Заказ,
			|	ТаблицаПартий.Качество,
			|	ТаблицаПартий.Количество,
			|	ТаблицаПартий.Стоимость,
			|	ТаблицаПартий.КорСчет,
			|	ТаблицаПартий.ДокументДвижения,
			|	ТаблицаПартий.ДокументДвиженияПериод,
			|	ТаблицаПартий.КодОперации,
			|	ТаблицаПартий.СписаниеПартий
			|ПОМЕСТИТЬ врТаблицаПартий
			|ИЗ
			|	&тзПартии КАК ТаблицаПартий
			|ГДЕ
			|	ТаблицаПартий.СчетУчета = &СчетУчета
			|	И ТаблицаПартий.КорСчет = &КорСчет
			|	И ТаблицаПартий.КодОперации В(&СписокКодовОперации)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	врТаблицаПартий.Период КАК Период,
			|	врТаблицаПартий.Регистратор КАК Регистратор,
			|	врТаблицаПартий.НомерСтроки КАК НомерСтроки,
			|	врТаблицаПартий.Активность КАК Активность,
			|	врТаблицаПартий.ВидДвижения КАК ВидДвижения,
			|	врТаблицаПартий.Организация КАК Организация,
			|	врТаблицаПартий.Номенклатура КАК Номенклатура,
			|	врТаблицаПартий.СчетУчета КАК СчетУчета,
			|	врТаблицаПартий.НалоговоеНазначение КАК НалоговоеНазначение,
			|	врТаблицаПартий.Склад КАК Склад,
			|	врТаблицаПартий.ДокументОприходования КАК ДокументОприходования,
			|	врТаблицаПартий.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	врТаблицаПартий.СерияНоменклатуры КАК СерияНоменклатуры,
			|	врТаблицаПартий.Заказ КАК Заказ,
			|	врТаблицаПартий.Качество КАК Качество,
			|	врТаблицаПартий.Количество КАК Количество,
			|	ВЫБОР
			|		КОГДА врТаблицаПартий.ВидДвижения = &ДвижениеРасход
			|			ТОГДА врТаблицаПартий.Стоимость
			|		ИНАЧЕ -врТаблицаПартий.Стоимость
			|	КОНЕЦ КАК Стоимость,
			|	врТаблицаПартий.КорСчет КАК КорСчет,
			|	врТаблицаПартий.ДокументДвижения КАК ДокументДвижения,
			|	врТаблицаПартий.ДокументДвиженияПериод КАК ДокументДвиженияПериод,
			|	врТаблицаПартий.ДокументДвижения.Подразделение КАК Подразделение,
			|	врТаблицаПартий.ДокументДвижения.Проект КАК Проект,
			|	врТаблицаПартий.ДокументДвижения.Сделка КАК ЗаказПокупателя,
			|	врТаблицаПартий.СписаниеПартий КАК СписаниеПартий
			|ПОМЕСТИТЬ ТаблицаДвижений
			|ИЗ
			|	врТаблицаПартий КАК врТаблицаПартий
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДвижений.Период,
			|	ТаблицаДвижений.Регистратор,
			|	ТаблицаДвижений.НомерСтроки,
			|	ТаблицаДвижений.Активность,
			|	ТаблицаДвижений.ВидДвижения,
			|	ТаблицаДвижений.Организация,
			|	ТаблицаДвижений.Номенклатура,
			|	ТаблицаДвижений.СчетУчета,
			|	ТаблицаДвижений.НалоговоеНазначение,
			|	ТаблицаДвижений.Склад,
			|	ТаблицаДвижений.ДокументОприходования,
			|	ТаблицаДвижений.ХарактеристикаНоменклатуры,
			|	ТаблицаДвижений.СерияНоменклатуры,
			|	ТаблицаДвижений.Заказ,
			|	ТаблицаДвижений.Качество,
			|	ТаблицаДвижений.Количество,
			|	ТаблицаДвижений.Стоимость,
			|	ТаблицаДвижений.КорСчет,
			|	ТаблицаДвижений.ДокументДвижения,
			|	ТаблицаДвижений.ДокументДвиженияПериод,
			|	ТаблицаДвижений.ЗаказПокупателя,
			|	ТаблицаДвижений.Подразделение,
			|	ТаблицаДвижений.Проект,
			|	ТаблицаДвижений.СписаниеПартий,
			|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации
			|ИЗ
			|	ТаблицаДвижений КАК ТаблицаДвижений
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
			|		ПО ТаблицаДвижений.Подразделение = СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение
			|			И ТаблицаДвижений.Организация = СоответствиеПодразделенийИПодразделенийОрганизаций.Организация";
			
			Запрос.УстановитьПараметр("СчетУчета",	 ПланыСчетов.Хозрасчетный.ГотоваяПродукция); // 26
			Запрос.УстановитьПараметр("КорСчет",	 ПланыСчетов.Хозрасчетный.СебестоимостьРеализованнойГотовойПродукции); // 901
			
			МассивКодовОпераций = Новый Массив;
			МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц);
			МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииТоваров.Реализация);
			
			Запрос.УстановитьПараметр("СписокКодовОперации", МассивКодовОпераций);
			
		Иначе
			
			//Запрос.Текст = 
			//"ВЫБРАТЬ
			//|	ТаблицаПроводок.Период,
			//|	ТаблицаПроводок.Регистратор,
			//|	ТаблицаПроводок.НомерСтроки,
			//|	ТаблицаПроводок.Активность,
			//|	ТаблицаПроводок.СчетДт,
			//|	ТаблицаПроводок.СчетКт,
			//|	ТаблицаПроводок.Организация,
			//|	ТаблицаПроводок.Сумма,
			//|	ТаблицаПроводок.Содержание,
			//|	ТаблицаПроводок.СубконтоКт1
			//|ПОМЕСТИТЬ врТаблицаПроводок
			//|ИЗ
			//|	&тзПроводки КАК ТаблицаПроводок
			//|ГДЕ
			//|	ТаблицаПроводок.СчетДт В(&СписокСчетов)
			//|;
			//|
			//|////////////////////////////////////////////////////////////////////////////////
			//|ВЫБРАТЬ
			//|	ТаблицаПартий.Период,
			//|	ТаблицаПартий.Регистратор,
			//|	ТаблицаПартий.НомерСтроки,
			//|	ТаблицаПартий.Активность,
			//|	ТаблицаПартий.ВидДвижения,
			//|	ТаблицаПартий.Организация,
			//|	ТаблицаПартий.Номенклатура,
			//|	ТаблицаПартий.СчетУчета,
			//|	ТаблицаПартий.НалоговоеНазначение,
			//|	ТаблицаПартий.Склад,
			//|	ТаблицаПартий.ДокументОприходования,
			//|	ТаблицаПартий.ХарактеристикаНоменклатуры,
			//|	ТаблицаПартий.СерияНоменклатуры,
			//|	ТаблицаПартий.Заказ,
			//|	ТаблицаПартий.Качество,
			//|	ТаблицаПартий.Количество,
			//|	ТаблицаПартий.Стоимость,
			//|	ТаблицаПартий.КорСчет,
			//|	ТаблицаПартий.ДокументДвижения,
			//|	ТаблицаПартий.ДокументДвиженияПериод
			//|ПОМЕСТИТЬ врТаблицаПартийБезГр
			//|ИЗ
			//|	&тзПартии КАК ТаблицаПартий
			//|;
			//|
			//|////////////////////////////////////////////////////////////////////////////////
			//|ВЫБРАТЬ
			//|	врТаблицаПартийБезГр.Период,
			//|	врТаблицаПартийБезГр.Активность,
			//|	врТаблицаПартийБезГр.Регистратор,
			//|	врТаблицаПартийБезГр.ВидДвижения,
			//|	врТаблицаПартийБезГр.ДокументДвижения,
			//|	врТаблицаПартийБезГр.ДокументДвиженияПериод,
			//|	врТаблицаПартийБезГр.ДокументОприходования,
			//|	СУММА(врТаблицаПартийБезГр.Количество) КАК Количество,
			//|	врТаблицаПартийБезГр.Номенклатура,
			//|	врТаблицаПартийБезГр.Организация,
			//|	СУММА(врТаблицаПартийБезГр.Стоимость) КАК Стоимость,
			//|	врТаблицаПартийБезГр.ХарактеристикаНоменклатуры
			//|ПОМЕСТИТЬ врТаблицаПартий
			//|ИЗ
			//|	врТаблицаПартийБезГр КАК врТаблицаПартийБезГр
			//|
			//|СГРУППИРОВАТЬ ПО
			//|	врТаблицаПартийБезГр.Период,
			//|	врТаблицаПартийБезГр.Активность,
			//|	врТаблицаПартийБезГр.Регистратор,
			//|	врТаблицаПартийБезГр.ВидДвижения,
			//|	врТаблицаПартийБезГр.ДокументДвижения,
			//|	врТаблицаПартийБезГр.ДокументДвиженияПериод,
			//|	врТаблицаПартийБезГр.ДокументОприходования,
			//|	врТаблицаПартийБезГр.Номенклатура,
			//|	врТаблицаПартийБезГр.Организация,
			//|	врТаблицаПартийБезГр.ХарактеристикаНоменклатуры
			//|;
			//|
			//|////////////////////////////////////////////////////////////////////////////////
			//|ВЫБРАТЬ
			//|	ТаблицаПродажиСебестоимость.Период,
			//|	ТаблицаПродажиСебестоимость.Регистратор,
			//|	ТаблицаПродажиСебестоимость.НомерСтроки,
			//|	ТаблицаПродажиСебестоимость.Активность,
			//|	ТаблицаПродажиСебестоимость.Организация,
			//|	ТаблицаПродажиСебестоимость.Номенклатура,
			//|	ТаблицаПродажиСебестоимость.ЗаказПокупателя,
			//|	ТаблицаПродажиСебестоимость.ДокументОприходования,
			//|	ТаблицаПродажиСебестоимость.Подразделение,
			//|	ТаблицаПродажиСебестоимость.ХарактеристикаНоменклатуры,
			//|	ТаблицаПродажиСебестоимость.Проект,
			//|	ТаблицаПродажиСебестоимость.Количество,
			//|	ТаблицаПродажиСебестоимость.Стоимость,
			//|	ТаблицаПродажиСебестоимость.ДокументДвижения,
			//|	ТаблицаПродажиСебестоимость.ДокументДвиженияПериод,
			//|	ТаблицаПродажиСебестоимость.СписаниеПартий
			//|ПОМЕСТИТЬ врТаблицаПродажиСебестоимостьБезГр
			//|ИЗ
			//|	&тзПродажиСебестоимость КАК ТаблицаПродажиСебестоимость
			//|;
			//|
			//|////////////////////////////////////////////////////////////////////////////////
			//|ВЫБРАТЬ
			//|	врТаблицаПродажиСебестоимостьБезГр.Период,
			//|	врТаблицаПродажиСебестоимостьБезГр.Регистратор,
			//|	врТаблицаПродажиСебестоимостьБезГр.Активность,
			//|	врТаблицаПродажиСебестоимостьБезГр.Организация,
			//|	врТаблицаПродажиСебестоимостьБезГр.Номенклатура,
			//|	врТаблицаПродажиСебестоимостьБезГр.ЗаказПокупателя,
			//|	врТаблицаПродажиСебестоимостьБезГр.ДокументОприходования,
			//|	врТаблицаПродажиСебестоимостьБезГр.Подразделение,
			//|	врТаблицаПродажиСебестоимостьБезГр.ХарактеристикаНоменклатуры,
			//|	врТаблицаПродажиСебестоимостьБезГр.Проект,
			//|	СУММА(врТаблицаПродажиСебестоимостьБезГр.Количество) КАК Количество,
			//|	СУММА(врТаблицаПродажиСебестоимостьБезГр.Стоимость) КАК Стоимость,
			//|	врТаблицаПродажиСебестоимостьБезГр.ДокументДвижения,
			//|	врТаблицаПродажиСебестоимостьБезГр.ДокументДвиженияПериод,
			//|	врТаблицаПродажиСебестоимостьБезГр.СписаниеПартий
			//|ПОМЕСТИТЬ врТаблицаПродажиСебестоимость
			//|ИЗ
			//|	врТаблицаПродажиСебестоимостьБезГр КАК врТаблицаПродажиСебестоимостьБезГр
			//|
			//|СГРУППИРОВАТЬ ПО
			//|	врТаблицаПродажиСебестоимостьБезГр.Период,
			//|	врТаблицаПродажиСебестоимостьБезГр.Регистратор,
			//|	врТаблицаПродажиСебестоимостьБезГр.Активность,
			//|	врТаблицаПродажиСебестоимостьБезГр.Организация,
			//|	врТаблицаПродажиСебестоимостьБезГр.Номенклатура,
			//|	врТаблицаПродажиСебестоимостьБезГр.ЗаказПокупателя,
			//|	врТаблицаПродажиСебестоимостьБезГр.ДокументОприходования,
			//|	врТаблицаПродажиСебестоимостьБезГр.Подразделение,
			//|	врТаблицаПродажиСебестоимостьБезГр.ХарактеристикаНоменклатуры,
			//|	врТаблицаПродажиСебестоимостьБезГр.Проект,
			//|	врТаблицаПродажиСебестоимостьБезГр.ДокументДвижения,
			//|	врТаблицаПродажиСебестоимостьБезГр.ДокументДвиженияПериод,
			//|	врТаблицаПродажиСебестоимостьБезГр.СписаниеПартий
			//|;
			//|
			//|////////////////////////////////////////////////////////////////////////////////
			//|ВЫБРАТЬ
			//|	врТаблицаПартий.Период КАК Период,
			//|	врТаблицаПартий.Регистратор КАК Регистратор,
			//|	врТаблицаПартий.Активность КАК Активность,
			//|	врТаблицаПартий.ВидДвижения КАК ВидДвижения,
			//|	врТаблицаПартий.Организация КАК Организация,
			//|	врТаблицаПартий.Номенклатура КАК Номенклатура,
			//|	врТаблицаПартий.ДокументОприходования КАК ДокументОприходования,
			//|	врТаблицаПартий.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			//|	врТаблицаПартий.Количество КАК Количество,
			//|	ВЫБОР
			//|		КОГДА врТаблицаПартий.ВидДвижения = &ДвижениеРасход
			//|			ТОГДА врТаблицаПартий.Стоимость
			//|		ИНАЧЕ -врТаблицаПартий.Стоимость
			//|	КОНЕЦ КАК Стоимость,
			//|	врТаблицаПартий.ДокументДвижения КАК ДокументДвижения,
			//|	врТаблицаПартий.ДокументДвиженияПериод КАК ДокументДвиженияПериод,
			//|	врТаблицаПродажиСебестоимость.ЗаказПокупателя КАК ЗаказПокупателя,
			//|	врТаблицаПродажиСебестоимость.Подразделение КАК Подразделение,
			//|	врТаблицаПродажиСебестоимость.Проект КАК Проект,
			//|	врТаблицаПродажиСебестоимость.СписаниеПартий КАК СписаниеПартий
			//|ПОМЕСТИТЬ ТаблицаДвижений
			//|ИЗ
			//|	врТаблицаПартий КАК врТаблицаПартий
			//|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаПродажиСебестоимость КАК врТаблицаПродажиСебестоимость
			//|		ПО врТаблицаПартий.Номенклатура = врТаблицаПродажиСебестоимость.Номенклатура
			//|			И врТаблицаПартий.ДокументОприходования = врТаблицаПродажиСебестоимость.ДокументОприходования
			//|ГДЕ
			//|	1 В
			//|			(ВЫБРАТЬ
			//|				1 КАК Поле1
			//|			ИЗ
			//|				врТаблицаПроводок
			//|			ГДЕ
			//|				врТаблицаПроводок.СубконтоКт1 = врТаблицаПартий.Номенклатура)
			//|;
			//|
			//|////////////////////////////////////////////////////////////////////////////////
			//|ВЫБРАТЬ
			//|	ТаблицаДвижений.Период,
			//|	ТаблицаДвижений.Регистратор,
			//|	ТаблицаДвижений.Активность,
			//|	ТаблицаДвижений.ВидДвижения,
			//|	ТаблицаДвижений.Организация,
			//|	ТаблицаДвижений.Номенклатура,
			//|	ТаблицаДвижений.ДокументОприходования,
			//|	ТаблицаДвижений.ХарактеристикаНоменклатуры,
			//|	ТаблицаДвижений.Количество,
			//|	ТаблицаДвижений.Стоимость,
			//|	ТаблицаДвижений.ДокументДвижения,
			//|	ТаблицаДвижений.ДокументДвиженияПериод,
			//|	ТаблицаДвижений.ЗаказПокупателя,
			//|	ТаблицаДвижений.Подразделение,
			//|	ТаблицаДвижений.Проект,
			//|	ТаблицаДвижений.СписаниеПартий,
			//|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации
			//|ИЗ
			//|	ТаблицаДвижений КАК ТаблицаДвижений
			//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
			//|		ПО ТаблицаДвижений.Подразделение = СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение
			//|			И ТаблицаДвижений.Организация = СоответствиеПодразделенийИПодразделенийОрганизаций.Организация";
	
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаПроводок.Период,
			|	ТаблицаПроводок.Регистратор,
			|	ТаблицаПроводок.НомерСтроки,
			|	ТаблицаПроводок.Активность,
			|	ТаблицаПроводок.СчетДт,
			|	ТаблицаПроводок.СчетКт,
			|	ТаблицаПроводок.Организация,
			|	ТаблицаПроводок.Сумма,
			|	ТаблицаПроводок.Содержание,
			|	ТаблицаПроводок.СубконтоКт1
			|ПОМЕСТИТЬ врТаблицаПроводок
			|ИЗ
			|	&тзПроводки КАК ТаблицаПроводок
			|ГДЕ
			|	ТаблицаПроводок.СчетДт В(&СписокСчетов)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПартий.Период,
			|	ТаблицаПартий.Регистратор,
			|	ТаблицаПартий.НомерСтроки,
			|	ТаблицаПартий.Активность,
			|	ТаблицаПартий.ВидДвижения,
			|	ТаблицаПартий.Организация,
			|	ТаблицаПартий.Номенклатура,
			|	ТаблицаПартий.СчетУчета,
			|	ТаблицаПартий.НалоговоеНазначение,
			|	ТаблицаПартий.Склад,
			|	ТаблицаПартий.ДокументОприходования,
			|	ТаблицаПартий.ХарактеристикаНоменклатуры,
			|	ТаблицаПартий.СерияНоменклатуры,
			|	ТаблицаПартий.Заказ,
			|	ТаблицаПартий.Качество,
			|	ТаблицаПартий.Количество,
			|	ТаблицаПартий.Стоимость,
			|	ТаблицаПартий.КорСчет,
			|	ТаблицаПартий.ДокументДвижения,
			|	ТаблицаПартий.ДокументДвиженияПериод
			|ПОМЕСТИТЬ врТаблицаПартийБезГр
			|ИЗ
			|	&тзПартии КАК ТаблицаПартий
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	врТаблицаПартийБезГр.Период,
			|	врТаблицаПартийБезГр.Активность,
			|	врТаблицаПартийБезГр.Регистратор,
			|	врТаблицаПартийБезГр.ВидДвижения,
			|	врТаблицаПартийБезГр.ДокументДвижения,
			|	врТаблицаПартийБезГр.ДокументДвиженияПериод,
			|	врТаблицаПартийБезГр.ДокументОприходования,
			|	СУММА(врТаблицаПартийБезГр.Количество) КАК Количество,
			|	врТаблицаПартийБезГр.Номенклатура,
			|	врТаблицаПартийБезГр.Организация,
			|	СУММА(врТаблицаПартийБезГр.Стоимость) КАК Стоимость,
			|	врТаблицаПартийБезГр.ХарактеристикаНоменклатуры
			|ПОМЕСТИТЬ врТаблицаПартий
			|ИЗ
			|	врТаблицаПартийБезГр КАК врТаблицаПартийБезГр
			|
			|СГРУППИРОВАТЬ ПО
			|	врТаблицаПартийБезГр.Период,
			|	врТаблицаПартийБезГр.Активность,
			|	врТаблицаПартийБезГр.Регистратор,
			|	врТаблицаПартийБезГр.ВидДвижения,
			|	врТаблицаПартийБезГр.ДокументДвижения,
			|	врТаблицаПартийБезГр.ДокументДвиженияПериод,
			|	врТаблицаПартийБезГр.ДокументОприходования,
			|	врТаблицаПартийБезГр.Номенклатура,
			|	врТаблицаПартийБезГр.Организация,
			|	врТаблицаПартийБезГр.ХарактеристикаНоменклатуры
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	врТаблицаПартий.Период КАК Период,
			|	врТаблицаПартий.Регистратор КАК Регистратор,
			|	врТаблицаПартий.Активность КАК Активность,
			|	врТаблицаПартий.ВидДвижения КАК ВидДвижения,
			|	врТаблицаПартий.Организация КАК Организация,
			|	врТаблицаПартий.Номенклатура КАК Номенклатура,
			|	врТаблицаПартий.ДокументОприходования КАК ДокументОприходования,
			|	врТаблицаПартий.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	врТаблицаПартий.Количество КАК Количество,
			|	ВЫБОР
			|		КОГДА врТаблицаПартий.ВидДвижения = &ДвижениеРасход
			|			ТОГДА врТаблицаПартий.Стоимость
			|		ИНАЧЕ -врТаблицаПартий.Стоимость
			|	КОНЕЦ КАК Стоимость,
			|	врТаблицаПартий.ДокументДвижения КАК ДокументДвижения,
			|	врТаблицаПартий.ДокументДвиженияПериод КАК ДокументДвиженияПериод
			|ПОМЕСТИТЬ ТаблицаДвижений
			|ИЗ
			|	врТаблицаПартий КАК врТаблицаПартий
			|ГДЕ
			|	1 В
			|			(ВЫБРАТЬ
			|				1 КАК Поле1
			|			ИЗ
			|				врТаблицаПроводок
			|			ГДЕ
			|				врТаблицаПроводок.СубконтоКт1 = врТаблицаПартий.Номенклатура)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДвижений.Период,
			|	ТаблицаДвижений.Регистратор,
			|	ТаблицаДвижений.Активность,
			|	ТаблицаДвижений.ВидДвижения,
			|	ТаблицаДвижений.Организация,
			|	ТаблицаДвижений.Номенклатура,
			|	ТаблицаДвижений.ДокументОприходования,
			|	ТаблицаДвижений.ХарактеристикаНоменклатуры,
			|	ТаблицаДвижений.Количество,
			|	ТаблицаДвижений.Стоимость,
			|	ТаблицаДвижений.ДокументДвижения,
			|	ТаблицаДвижений.ДокументДвиженияПериод
			|ИЗ
			|	ТаблицаДвижений КАК ТаблицаДвижений";
			
			МассивСчетов = Новый Массив;
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьРеализованнойГотовойПродукции); // 901
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("9021"));
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("9022"));
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("9023"));
			
			Запрос.УстановитьПараметр("СписокСчетов",			 МассивСчетов);
			Запрос.УстановитьПараметр("тзПроводки",				 тзПроводки);
			//Запрос.УстановитьПараметр("тзПродажиСебестоимость",	 тзПродажиСебестоимость);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДвижениеРасход",	 ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("тзПартии",		 тзПартии);
		
		
		тзРезультат = Запрос.Выполнить().Выгрузить();
		
		Для каждого стрДвижений Из тзРезультат Цикл
			НовоеДвижение = ДвиженияПродажиБУ.Добавить();
			НовоеДвижение.Активность				 = стрДвижений.Активность;
			НовоеДвижение.Период					 = стрДвижений.Период;
			НовоеДвижение.ДокументДвижения			 = стрДвижений.ДокументДвижения;
			НовоеДвижение.ДокументДвиженияПериод	 = стрДвижений.ДокументДвиженияПериод;
			НовоеДвижение.ДокументОприходования		 = стрДвижений.ДокументОприходования;
			
			
			СтрокаСебестоиомость =  тзПродажиСебестоимость.Найти(стрДвижений.Номенклатура, "Номенклатура");
			Если СтрокаСебестоиомость <> Неопределено Тогда	
				НовоеДвижение.ЗаказПокупателя			 = СтрокаСебестоиомость.ЗаказПокупателя;
				НовоеДвижение.Проект					 = СтрокаСебестоиомость.Проект;
				НовоеДвижение.СписаниеПартий			 = СтрокаСебестоиомость.СписаниеПартий;
				НЗ = РегистрыСведений.СоответствиеПодразделенийИПодразделенийОрганизаций.СоздатьНаборЗаписей();
				НЗ.Отбор.Организация.Установить(стрДвижений.Организация);
				НЗ.Отбор.Подразделение.Установить(СтрокаСебестоиомость.Подразделение);
				НЗ.Прочитать();
				Если НЗ.Количество() > 0 Тогда
					НовоеДвижение.Подразделение = НЗ[0].ПодразделениеОрганизации;	
				КонецЕсли;
			КонецЕсли; 
			
			НовоеДвижение.Количество				 = стрДвижений.Количество;
			НовоеДвижение.Номенклатура				 = стрДвижений.Номенклатура;
			НовоеДвижение.Организация				 = стрДвижений.Организация;
			
			НовоеДвижение.Стоимость					 = стрДвижений.Стоимость;
			НовоеДвижение.ХарактеристикаНоменклатуры = стрДвижений.ХарактеристикаНоменклатуры;
		КонецЦикла;
		
		
		
		//Если ТипЗнч(Источник) = Тип("ДокументОбъект.РасчетСебестоимостиВыпуска") Тогда
		//	
		//Иначе
		//	Движения
		//	Для каждого  Из  Цикл
		//		
		//	КонецЦикла;
		//КонецЕсли;
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
		//|ИЗ
		//|	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
		//|ГДЕ
		//|	СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация
		//|	И СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение = &Подразделение";
		//
		//ЗапросКурс = Новый Запрос;
		//ЗапросКурс.Текст = 
		//"ВЫБРАТЬ
		//|	КурсыВалютСрезПоследних.Курс,
		//|	КурсыВалютСрезПоследних.Кратность
		//|ИЗ
		//|	РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
		//
		//ЗапросКурс.УстановитьПараметр("Валюта", глЗначениеПеременной("ВалютаУправленческогоУчета"));
		//
		//ДвиженияПродажиУпр = Источник.Движения.ПродажиСебестоимость;
		//ДвиженияПродажиБУ = Источник.Движения.ПродажиСебестоимостьБухгалтерскийУчет;
		//
		////ДвиженияПродажиБУ = РегистрыНакопления.ПродажиСебестоимостьБухгалтерскийУчет.СоздатьНаборЗаписей();
		//Если ДвиженияПродажиУпр.Количество() = 0 Тогда
		//	ДвиженияПродажиУпр.Прочитать();
		//КонецЕсли;
		//
		//ДвиженияПродажиБУ.Прочитать();
		//ДвиженияПродажиБУ.Очистить();
		//
		//Если ДвиженияПродажиУпр.Количество() > 0 Тогда
		//	Для каждого ДвижениеУпр Из ДвиженияПродажиУпр Цикл
		//		Запрос.УстановитьПараметр("Организация", Источник.Организация);
		//		Запрос.УстановитьПараметр("Подразделение", ДвижениеУпр.Подразделение);
		//		Выборка = Запрос.Выполнить().Выбрать();
		//		
		//		Если Выборка.Количество() > 1 Тогда
		//			Сообщить("Обнаружено избыточное сопоставление подразделений");
		//			Пока Выборка.Следующий() Цикл
		//				Сообщить("Подразделение: """ + СокрЛП(ДвижениеУпр.Подразделение) + """, Подразделение организации: """ + Выборка.ПодразделениеОрганизации + """");	
		//			КонецЦикла;
		//			Отказ = Истина;
		//			Прервать;
		//		Иначе
		//			Выборка.Следующий();
		//			ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
		//		КонецЕсли;
		//		
		//		ЗапросКурс.УстановитьПараметр("НаДату", Источник.Дата);
		//		ВыборкаКурсов = ЗапросКурс.Выполнить().Выбрать();
		//		Если ВыборкаКурсов.Следующий() Тогда
		//			Курс = ВыборкаКурсов.Курс;
		//			Кратность = ВыборкаКурсов.Кратность;
		//			
		//			Если Курс = 0 ИЛИ Кратность = 0 Тогда
		//				Сообщить("Обнаружен нулевой курс или кратность валюты управленческого учета на " + Источник.Дата);
		//				Отказ = Истина;
		//				Прервать;
		//			КонецЕсли;
		//		Иначе
		//			Сообщить("Не удалось получить курс валюты управленческого учета на " + Источник.Дата);
		//			Отказ = Истина;
		//			Прервать;
		//		КонецЕсли;
		//		
		//
		//		НовоеДвижение = ДвиженияПродажиБУ.Добавить();
		//		НовоеДвижение.Активность				 = ДвижениеУпр.Активность;
		//		НовоеДвижение.ДокументДвижения			 = ДвижениеУпр.ДокументДвижения;
		//		НовоеДвижение.ДокументДвиженияПериод	 = ДвижениеУпр.ДокументДвиженияПериод;
		//		НовоеДвижение.ДокументОприходования		 = ДвижениеУпр.ДокументОприходования;
		//		НовоеДвижение.ЗаказПокупателя			 = ДвижениеУпр.ЗаказПокупателя;
		//		НовоеДвижение.Количество				 = ДвижениеУпр.Количество;
		//		НовоеДвижение.Номенклатура				 = ДвижениеУпр.Номенклатура;
		//		НовоеДвижение.Организация				 = Источник.Организация;
		//		НовоеДвижение.Период					 = ДвижениеУпр.Период;
		//		НовоеДвижение.Подразделение				 = ПодразделениеОрганизации;
		//		НовоеДвижение.Проект					 = ДвижениеУпр.Проект;
		//		НовоеДвижение.СписаниеПартий			 = ДвижениеУпр.СписаниеПартий;
		//		НовоеДвижение.Стоимость					 = ДвижениеУпр.Стоимость * Курс / Кратность;
		//		НовоеДвижение.ХарактеристикаНоменклатуры = ДвижениеУпр.ХарактеристикаНоменклатуры;
		//	КонецЦикла;
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписиПроводокПриЗаписи(Источник, Отказ, РежимЗаписи) Экспорт
	//РегистраторСсылка = Источник.Отбор.Регистратор.Значение;
	//ДокументРегистратор = РегистраторСсылка.ПолучитьОбъект();
	//ДвиженияБух = ДокументРегистратор.Движения.Хозрасчетный;
	//ДвиженияБух.Прочитать();
	//
	//МассивСчетов = Новый Массив;
	//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьРеализованнойГотовойПродукции); // 901
	//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("9021"));
	//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("9022"));
	//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("9023"));
	//
	//Если Источник.Количество() > 0 Тогда
	//	тзПроводки = Источник.Выгрузить();
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ТаблицаПроводок.Период,
	//	|	ТаблицаПроводок.Регистратор,
	//	|	ТаблицаПроводок.НомерСтроки,
	//	|	ТаблицаПроводок.Активность,
	//	|	ТаблицаПроводок.СчетДт,
	//	|	ТаблицаПроводок.СчетКт,
	//	|	ТаблицаПроводок.Организация,
	//	|	ТаблицаПроводок.Сумма,
	//	|	ТаблицаПроводок.Содержание,
	//	|	ТаблицаПроводок.СубконтоКт1
	//	|ПОМЕСТИТЬ врТаблицаПроводок
	//	|ИЗ
	//	|	&тзПроводки КАК ТаблицаПроводок
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	врТаблицаПроводок.Период,
	//	|	врТаблицаПроводок.Регистратор,
	//	|	врТаблицаПроводок.НомерСтроки,
	//	|	врТаблицаПроводок.Активность,
	//	|	врТаблицаПроводок.СчетДт,
	//	|	врТаблицаПроводок.СчетКт,
	//	|	врТаблицаПроводок.Организация,
	//	|	врТаблицаПроводок.Сумма,
	//	|	врТаблицаПроводок.Содержание,
	//	|	врТаблицаПроводок.СубконтоКт1
	//	|ИЗ
	//	|	врТаблицаПроводок КАК врТаблицаПроводок";
	//	
	//	Запрос.УстановитьПараметр("", );
	//	
	//	тзРезультат = Запрос.Выполнить().Выгрузить();
	//	
	//	
	//	
	//	//ЕстьСебестоимость
	//	Для каждого Проводка Из Источник Цикл
	//		Если МассивСчетов.Найти(Проводка.СчетДт) <> Неопределено Тогда
	//			
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
КонецПроцедуры

Процедура ОганичениеПоДоговорамОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
    Если Источник.ДоговорКонтрагента.СрокДействия <= Источник.Дата Тогда
        Сообщить("Договор контрагента просрочен, просьба обновить дату!!!");
    	Отказ = Истина;
        Возврат;
    КонецЕсли; 
    Если ДобавитьМесяц(Источник.Дата,1) > Источник.ДоговорКонтрагента.СрокДействия Тогда
    	Сообщить("Внимание срок действия договора подходит к концу осталось " + Окр((Источник.ДоговорКонтрагента.СрокДействия - Источник.Дата)/(3600*24)) + " дней");
    КонецЕсли; 
КонецПроцедуры
//<---Черный А.В.---

