
// Функция предназначена для получения оплачиваемого времени по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результат запроса, по которой вернуть время
//
// Возвращаемое значение:
//	Число - размер оплачиваемого времени в днях/часах
//
Функция ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВладелец, СообщениеОбОшибке = Ложь, ГрафикиБезРабочегоВремени)
	
	ОплачиваемоеВремя = 0;
	РасшифровкаКомментария = НеОпределено;
	ВажностьКомментария = НеОпределено;
	ОплачиваемоеВремя = ИсходныеДанные.ОтработаноВремени;
	
	Если ИсходныеДанные.ОтработаноВремени = Null Тогда
		Если ИсходныеДанные.ОшибкаВводаОтработанногоВремени Тогда
			ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введены сводно. Расчет времени по данному виду расчета невозможен");
		ИначеЕсли ИсходныеДанные.ОшибкаВводаИндивидуальногоГрафикаРаботы Тогда
			ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Индивидуальный график работы введен сводно. Расчет времени по данному виду расчета невозможен");
		Иначе
			ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не найдены данные об отработанном времени");
		КонецЕсли;
		СообщениеОбОшибке = Истина;
		Возврат 0;
	ИначеЕсли ИсходныеДанные.ПредупреждениеНесоответствияТабеляИНачисления Тогда
		ОбщегоНазначения.ОшибкаРасчета("Предупреждение: " + ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Данные об отработанном времени введенные табелем,  не соответствуют введенным начислениям");
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		Если ИсходныеДанные.СпособВводаВремени = 1 
			или ИсходныеДанные.СпособВводаВремени = 2 Тогда // введено сводно табелем или индивид. графиком
			РасшифровкаКомментария = Новый Массив;
			РасшифровкаКомментария.Добавить("РаботаСДиалогами.ОткрытьГрафик");
			РасшифровкаКомментария.Добавить(СтрокаДвижений.Сотрудник);
			РасшифровкаКомментария.Добавить(СтрокаДвижений.ПериодДействия);
			ТекстКомментария = "Оплачиваемое время введено сводно за весь период работы ";
			Если ИсходныеДанные.СпособВводаВремени = 1 Тогда
				ПредставлениеРасшифровки = "табелем учета рабочего времени или сдельным нарядом";
			Иначе
				ПредставлениеРасшифровки = "индивидуальным графиком работы";
			КонецЕсли;
			ВажностьКомментария = Перечисления.ВидыСообщений.ВажнаяИнформация;
		Иначе
			РасшифровкаКомментария = Новый Массив;
			РасшифровкаКомментария.Добавить("РаботаСДиалогами.ОткрытьГрафик");
			РасшифровкаКомментария.Добавить(СтрокаДвижений.ГрафикРаботы);
			РасшифровкаКомментария.Добавить(СтрокаДвижений.ПериодДействия);
			Если ТипЗнч(СтрокаДвижений.ГрафикРаботы) = Тип("СправочникСсылка.ГрафикиРаботы") Тогда
				ТекстКомментария = "Оплачиваемое время рассчитано по графику работы: ";
				ПредставлениеРасшифровки = ИсходныеДанные.ГрафикРаботыНаименование;
			Иначе
				ТекстКомментария = "Оплачиваемое время рассчитано по индивидуальному графику работы или по табелю учета рабочего времени. ";
				ПредставлениеРасшифровки = "Подробнее...";
				ВажностьКомментария = Перечисления.ВидыСообщений.ВажнаяИнформация;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ИсходныеДанные.ВидУчетаВремени <> Перечисления.ВидыУчетаВремени.ПоДням Тогда
		Если ИсходныеДанные.ВидРасчета.ВидВремени = Перечисления.ВидыВремени.ЧасовоеНеотработанное
			ИЛИ ИсходныеДанные.ВидРасчета.ВидВремени = Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы Тогда
			ОплачиваемоеВремя = ИсходныеДанные.ОтработаноЧасов;
		Иначе
			ОплачиваемоеВремя = ИсходныеДанные.ОтработаноВремени - ИсходныеДанные.ОтработаноЧасовПоТабелюОтклонение;
		КонецЕсли;
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		ОбщегоНазначения.КомментарийРасчета("Оплачиваемое время " + ?(ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, "(в днях) ", "(в часах) ") + ОплачиваемоеВремя, КомментарийВладелец);
		ОбщегоНазначения.КомментарийРасчета("Вид учета времени: " + ИсходныеДанные.ВидУчетаВремени, КомментарийВладелец);
		ОбщегоНазначения.КомментарийРасчета(ТекстКомментария, КомментарийВладелец, ПредставлениеРасшифровки, РасшифровкаКомментария, ВажностьКомментария);
	КонецЕсли;
	
	Если ОплачиваемоеВремя = 0 И Не ЗначениеЗаполнено(ИсходныеДанные.НормаВремениЗаМесяц) Тогда
		КлючПоиска = Новый Структура("ГрафикРаботы,ВидУчетаВремени");
		КлючПоиска.ВидУчетаВремени = ИсходныеДанные.ВидУчетаВремени;
		Если ИсходныеДанные.СпособВводаВремени = 1 Или ИсходныеДанные.СпособВводаВремени = 2 Тогда
			КлючПоиска.ГрафикРаботы = СтрокаДвижений.Сотрудник;
		Иначе
			КлючПоиска.ГрафикРаботы = СтрокаДвижений.ГрафикРаботы;
		КонецЕсли;
		
		КоличествоСтрокГрафика = ГрафикиБезРабочегоВремени.НайтиСтроки(КлючПоиска).Количество();
		Если КомментироватьРасчет Или КоличествоСтрокГрафика = 0 Тогда
			РасшифровкаКомментария = Новый Массив;
			РасшифровкаКомментария.Добавить("РаботаСДиалогами.ОткрытьГрафик");
			
			Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам Тогда
				ТекстВидаВремени = "вечерних часов";
			ИначеЕсли ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам Тогда
				ТекстВидаВремени = "ночных часов";
			Иначе
				ТекстВидаВремени = "рабочих дней";
			КонецЕсли;
			
			Если ИсходныеДанные.СпособВводаВремени = 1 Тогда
				РасшифровкаКомментария.Добавить(СтрокаДвижений.Сотрудник);
				РасшифровкаКомментария.Добавить(СтрокаДвижений.ПериодДействия);
				Если КомментироватьРасчет Тогда
					ТекстКомментария = "В сдельном наряде или табеле учета рабочего времени за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + "! Необходимо заполнить ";
				Иначе
					ФИО = ИсходныеДанные.СотрудникНаименование;
					УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ФИО, 2, ФИО);
					
					ТекстКомментария = "У " + ФИО + " в сдельном наряде или табеле учета рабочего времени за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + "! Необходимо заполнить ";
				КонецЕсли;
				
				ОбщегоНазначения.КомментарийРасчета(ТекстКомментария, КомментарийВладелец, "документ", РасшифровкаКомментария, Перечисления.ВидыСообщений.Ошибка);
				Если КоличествоСтрокГрафика = 0 Тогда
					НоваяСтрока = ГрафикиБезРабочегоВремени.Добавить();
					НоваяСтрока.ВидУчетаВремени = ИсходныеДанные.ВидУчетаВремени;
					НоваяСтрока.ГрафикРаботы = СтрокаДвижений.Сотрудник;
				КонецЕсли;
				
			ИначеЕсли ИсходныеДанные.СпособВводаВремени = 2 Тогда
				РасшифровкаКомментария.Добавить(СтрокаДвижений.Сотрудник);
				РасшифровкаКомментария.Добавить(СтрокаДвижений.ПериодДействия);
				
				Если КомментироватьРасчет Тогда
					ТекстКомментария = "В индивидуальном графике за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + "! Необходимо заполнить ";
				Иначе
					ФИО = ИсходныеДанные.СотрудникНаименование;
					УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ФИО, 2, ФИО);
					
					ТекстКомментария = "У " + ФИО + " в индивидуальном графике за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + "! Необходимо заполнить ";
				КонецЕсли;
				
				ОбщегоНазначения.КомментарийРасчета(ТекстКомментария, КомментарийВладелец, "документ", РасшифровкаКомментария, Перечисления.ВидыСообщений.Ошибка);
				Если КоличествоСтрокГрафика = 0 Тогда
					НоваяСтрока = ГрафикиБезРабочегоВремени.Добавить();
					НоваяСтрока.ВидУчетаВремени = ИсходныеДанные.ВидУчетаВремени;
					НоваяСтрока.ГрафикРаботы = СтрокаДвижений.Сотрудник;
				КонецЕсли;
				
			Иначе
				РасшифровкаКомментария.Добавить(СтрокаДвижений.ГрафикРаботы);
				РасшифровкаКомментария.Добавить(СтрокаДвижений.ПериодДействия);
				Если ТипЗнч(СтрокаДвижений.ГрафикРаботы) = Тип("СправочникСсылка.ГрафикиРаботы") Тогда
					ОбщегоНазначения.КомментарийРасчета("В графике нет " + ТекстВидаВремени + " за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " Необходимо заполнить график: ", КомментарийВладелец, ИсходныеДанные.ГрафикРаботыНаименование, РасшифровкаКомментария, Перечисления.ВидыСообщений.Ошибка);
				Иначе
					Если КомментироватьРасчет Тогда
						ТекстКомментария = "В индивидуальном графике или табеле учета рабочего времени за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + ". Необходимо заполнить ";
					Иначе
						ФИО = ИсходныеДанные.СотрудникНаименование;
						УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ФИО, 2, ФИО);
						
						ТекстКомментария = "У " + ФИО + " в индивидуальном графике или табеле учета рабочего времени за " + Формат(СтрокаДвижений.ПериодДействия, "ДФ='MMММ yyyy ""г.""'") + " нет " + ТекстВидаВремени + ". Необходимо заполнить ";
					КонецЕсли;
					
					ОбщегоНазначения.КомментарийРасчета(ТекстКомментария, КомментарийВладелец, "документ", РасшифровкаКомментария, Перечисления.ВидыСообщений.Ошибка);
				КонецЕсли;
				Если КоличествоСтрокГрафика = 0 Тогда
					НоваяСтрока = ГрафикиБезРабочегоВремени.Добавить();
					НоваяСтрока.ВидУчетаВремени = ИсходныеДанные.ВидУчетаВремени;
					НоваяСтрока.ГрафикРаботы = СтрокаДвижений.ГрафикРаботы;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		СообщениеОбОшибке = Истина;
	КонецЕсли;
	
	Возврат ОплачиваемоеВремя;
	
КонецФункции // ОплачиваемоеВремя()

Функция НалогиПоГруппеВзносов(ГруппаОтбора = Неопределено, ДатаОтбора = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Если ГруппаОтбора <> Неопределено Тогда
		ГруппаВзносов = ГруппаОтбора;
	Иначе
		ГруппаВзносов = Справочники.ГруппыВзносовВФонды.ОсновнойСостав;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаОтбора) Тогда
		Запрос.УстановитьПараметр("Дата", ОбщегоНазначения.ПолучитьРабочуюДату());
	Иначе	
		Запрос.УстановитьПараметр("Дата", ДатаОтбора);
	КонецЕсли;
	Запрос.УстановитьПараметр("парамГруппа", ГруппаВзносов);
	
		
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	Взносы.Налог КАК Налог,
	|	ВидыРасчетовВзносов.ВидРасчета.СпособРасчета КАК СпосовРасчета
	|ИЗ РегистрСведений.ВзносыВФондыПоГруппам.СрезПоследних(&Дата) КАК Взносы
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыРасчетовВзносовВФонды.СрезПоследних(&Дата) КАК ВидыРасчетовВзносов
	|ПО  Взносы.Налог = ВидыРасчетовВзносов.Налог
	|
	|ГДЕ Взносы.ГруппаВзносов = &парамГруппа
	|    И Взносы.Действует
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// проставляет в строку табличной части или реквизит формы полученные данные по Сотруднику
//
// Параметры:
//	Сотрудник - основное назначение
//	Назначение - по месту работы (может быть внутренее совместительство, замена и пр.)
//	ДатаСобытия - Дата начала действия
//
Процедура ПроставитьДанныеСтроки(Сотрудник, Назначение, ДатаСобытия, ПериодРегистрации, ВидРасчета, ТекущаяСтрока, ЭтоНачисление = Истина) Экспорт
		
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамДатаСобытия", ДатаСобытия);
	Запрос.УстановитьПараметр("парамСотрудник", Сотрудник);
	Запрос.УстановитьПараметр("парамНазначение", Назначение);
	Запрос.УстановитьПараметр("парамВидРасчета", ВидРасчета);
	Запрос.УстановитьПараметр("парамСпособРасчета", ВидРасчета.СпособРасчета);
	Запрос.УстановитьПараметр("парамОрганизация", Сотрудник.Организация);
	
	Запрос.УстановитьПараметр("парамПериодРегистрации" , ПериодРегистрации);
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета" , глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	
	Если ЭтоНачисление Тогда
		ТекстПВР = "ОсновныеНачисленияОрганизаций";
		ТекстПРС = "ПлановыеНачисленияРаботниковОрганизаций";
	Иначе
		ТекстПВР = "УдержанияОрганизаций";
		ТекстПРС = "ПлановыеУдержанияРаботниковОрганизаций";
	КонецЕсли;	
	
	//	ВТОкладТариф
	Если Истина Тогда 
		//	Описание:
		// 		Все оклады сотрудников
		//		Для п.1.
		ТекстЗапросаВТ = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Начисления.Актуальность	КАК Актуальность,		
		|	Начисления.Организация	КАК Организация,
		|	Начисления.Сотрудник	КАК Назначение,
		|	Начисления.ВидРасчета	КАК ВидРасчета,
		|	ВЫБОР	КОГДА 		Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням)
		|					ИЛИ Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
		|				ТОГДА 1//""ЗА МЕСЯЦ""
		|			КОГДА 	Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
		|			ТОГДА 2//""ЗА ДЕНЬ""
		|			ИНАЧЕ 3//""ЗА ЧАС""
		|	КОНЕЦ					КАК СпособУчетаВремени,
		|	ВЫБОР	КОГДА Начисления.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
		|				ТОГДА РазмерТарифныхСтавок.Размер
		|			ИНАЧЕ Начисления.Показатель1
		|	КОНЕЦ	КАК ОкладТариф,
		|	ВЫБОР	КОГДА Начисления.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
		|				ТОГДА РазмерТарифныхСтавок.Валюта
		|			ИНАЧЕ Начисления.Валюта1
		|	КОНЕЦ	КАК Валюта1,
		|	Начисления.Период		КАК ДатаНачала,
		|	МИНИМУМ(ВЫБОР КОГДА Окончания.Период Есть NULL 
		|				ТОГДА NULL
		|			ИНАЧЕ
		|				ДОБАВИТЬКДАТЕ(Окончания.Период, СЕКУНДА, -1)
		|			КОНЕЦ
		|			) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОкладТариф	
		|ИЗ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Начисления
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамДатаСобытия, ) КАК РазмерТарифныхСтавок
		|ПО Начисления.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд
		|
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Окончания
		|ПО Начисления.ВидРасчетаИзмерение <> Начисления.ВидРасчета
		|	И	Начисления.Актуальность 
		|	И	Начисления.Организация = &парамОрганизация
		|	И	Начисления.Сотрудник = Окончания.Сотрудник
		|	И	Начисления.ВидРасчета = Окончания.ВидРасчета
		|	И	Начисления.Период < Окончания.Период
		|
		|ГДЕ		Начисления.ВидРасчетаИзмерение <> Начисления.ВидРасчета
		|	И	Начисления.Актуальность 
		|	И	Начисления.Организация = &парамОрганизация
		|	И	Начисления.Сотрудник = &парамНазначение // оклад по назначению
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Актуальность,		
		|	Начисления.Организация,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	ВЫБОР	КОГДА 		Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням)
		|					ИЛИ Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам)
		|				ТОГДА 1
		|			КОГДА 	Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
		|			ТОГДА 2
		|			ИНАЧЕ 3
		|	КОНЕЦ,
		|	ВЫБОР	КОГДА Начисления.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
		|				ТОГДА РазмерТарифныхСтавок.Размер
		|			ИНАЧЕ Начисления.Показатель1
		|	КОНЕЦ,
		|	ВЫБОР	КОГДА Начисления.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка) 
		|				ТОГДА РазмерТарифныхСтавок.Валюта
		|			ИНАЧЕ Начисления.Валюта1
		|	КОНЕЦ,
		|	Начисления.Период
 		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТОкладТариф";
	
	//	ВТЗначенияПоказателей
	Если Истина Тогда 
		//	Описание:
		// 		Все оклады сотрудников
		//		Для п.1.
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Подразделение,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ПериодДействия КАК ПериодДействия,
		|	ВЫБОР
		|		КОГДА ЗначенияПоказателей.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.Денежный)
		|		И НЕ (ЗначенияПоказателей.Валюта В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)))
		|			ТОГДА ЗначенияПоказателей.Значение * ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
		|		ИНАЧЕ ЗначенияПоказателей.Значение
		|	КОНЕЦ КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияПоказателей
		|ИЗ 
		|   (ВЫБРАТЬ 
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.Подразделение,
		|	ЗначенияПоказателей.Показатель,
		|	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.ПериодДействия, МЕСЯЦ) КАК ПериодДействия,
		|	ЗначенияПоказателей.Валюта,
		|	ЗначенияПоказателей.Значение
		|	ИЗ РегистрСведений.ЗначенияПоказателейСхемМотивации КАК ЗначенияПоказателей
		|	
		|	ОБЪЕДИНИТЬ
		|
		|   ВЫБРАТЬ 
		|	ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка),
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.Подразделение,
		|	ЗначенияПоказателей.Показатель,
		|	&парамПериодРегистрации,
		|	ЗначенияПоказателей.Валюта,
		|	ЗначенияПоказателей.Значение
		|	ИЗ РегистрСведений.ПериодическиеЗначенияПоказателейСхемМотивации.СрезПоследних(&парамПериодРегистрации, Организация = &парамОрганизация) КАК ЗначенияПоказателей
		|   ) КАК ЗначенияПоказателей
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних(&парамПериодРегистрации) Как Валюты
		|ПО Валюты.Валюта = ЗначенияПоказателей.Валюта 
		|	
		|ГДЕ	ЗначенияПоказателей.Организация = &парамОрганизация
		|	И	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.ПериодДействия, МЕСЯЦ) = &парамПериодРегистрации
		|	И	(ЗначенияПоказателей.Сотрудник = &парамНазначение
		|	ИЛИ	ЗначенияПоказателей.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТЗначенияПоказателей";
	
	//	ВТПоказатели
	Если Истина Тогда 
		//	Описание:
		// 		
		//		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СотрудникиПодразделенияВПоказателях.Сотрудник КАК Сотрудник,
		|	СотрудникиПодразделенияВПоказателях.Подразделение КАК Подразделение,
		|	ПоказателиВидовРасчета.Ссылка КАК ВидРасчета,
		|	ПоказателиВидовРасчета.Показатель1.ТипПоказателя КАК ТипПоказателя1,
		|	ПоказателиВидовРасчета.Показатель2.ТипПоказателя КАК ТипПоказателя2,
		|	ПоказателиВидовРасчета.Показатель3.ТипПоказателя КАК ТипПоказателя3,
		|	ПоказателиВидовРасчета.Показатель4.ТипПоказателя КАК ТипПоказателя4,
		|	ПоказателиВидовРасчета.Показатель5.ТипПоказателя КАК ТипПоказателя5,
		|	ПоказателиВидовРасчета.Показатель6.ТипПоказателя КАК ТипПоказателя6,
		|	ПоказателиВидовРасчета.Показатель1.ВозможностьИзменения КАК ВозможностьИзменения1,
		|	ПоказателиВидовРасчета.Показатель2.ВозможностьИзменения КАК ВозможностьИзменения2,
		|	ПоказателиВидовРасчета.Показатель3.ВозможностьИзменения КАК ВозможностьИзменения3,
		|	ПоказателиВидовРасчета.Показатель4.ВозможностьИзменения КАК ВозможностьИзменения4,
		|	ПоказателиВидовРасчета.Показатель5.ВозможностьИзменения КАК ВозможностьИзменения5,
		|	ПоказателиВидовРасчета.Показатель6.ВозможностьИзменения КАК ВозможностьИзменения6,
		|	ЗначенияПоказателей1.Значение КАК Показатель1,
		|	ЗначенияПоказателей2.Значение КАК Показатель2,
		|	ЗначенияПоказателей3.Значение КАК Показатель3,
		|	ЗначенияПоказателей4.Значение КАК Показатель4,
		|	ЗначенияПоказателей5.Значение КАК Показатель5,
		|	ЗначенияПоказателей6.Значение КАК Показатель6
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ (ВЫБРАТЬ РАЗЛИЧНЫЕ Подразделение, Сотрудник ИЗ ВТЗначенияПоказателей КАК ЗначенияПоказателей) КАК СотрудникиПодразделенияВПоказателях
		|
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		Показатели.Ссылка КАК Ссылка,
		|		Показатели1.Показатель КАК Показатель1,
		|		Показатели2.Показатель КАК Показатель2,
		|		Показатели3.Показатель КАК Показатель3,
		|		Показатели4.Показатель КАК Показатель4,
		|		Показатели5.Показатель КАК Показатель5,
		|		Показатели6.Показатель КАК Показатель6
		|	ИЗ ПланВидовРасчета."+ТекстПВР+".Показатели КАК Показатели
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ТекстПВР+".Показатели КАК Показатели1
		|	ПО Показатели.Ссылка = Показатели1.Ссылка И Показатели1.НомерСтроки = 1
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ТекстПВР+".Показатели КАК Показатели2
		|	ПО Показатели.Ссылка = Показатели2.Ссылка И Показатели2.НомерСтроки = 2
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ТекстПВР+".Показатели КАК Показатели3
		|	ПО Показатели.Ссылка = Показатели3.Ссылка И Показатели3.НомерСтроки = 3
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ТекстПВР+".Показатели КАК Показатели4
		|	ПО Показатели.Ссылка = Показатели4.Ссылка И Показатели4.НомерСтроки = 4
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ТекстПВР+".Показатели КАК Показатели5
		|	ПО Показатели.Ссылка = Показатели5.Ссылка И Показатели5.НомерСтроки = 5
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ТекстПВР+".Показатели КАК Показатели6
		|	ПО Показатели.Ссылка = Показатели6.Ссылка И Показатели6.НомерСтроки = 6
		|	
		|) КАК ПоказателиВидовРасчета
		|ПО ИСТИНА
		|	
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей1
		|ПО 	ПоказателиВидовРасчета.Показатель1 = ЗначенияПоказателей1.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей1.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей1.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей2
		|ПО		ПоказателиВидовРасчета.Показатель2 = ЗначенияПоказателей2.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей2.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей2.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей3
		|ПО		ПоказателиВидовРасчета.Показатель3 = ЗначенияПоказателей3.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей3.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей3.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей4
		|ПО		ПоказателиВидовРасчета.Показатель4 = ЗначенияПоказателей4.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей4.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей4.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей5
		|ПО		ПоказателиВидовРасчета.Показатель5 = ЗначенияПоказателей5.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей5.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей5.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей6
		|ПО		ПоказателиВидовРасчета.Показатель6 = ЗначенияПоказателей6.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей6.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей6.Подразделение
		|
		|ГДЕ	ПоказателиВидовРасчета.Ссылка = &парамВидРасчета
		|	И (ЗначенияПоказателей1.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей2.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей3.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей4.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей5.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей6.Значение ЕСТЬ НЕ NULL)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПоказатели";
	
	НормаЧасовЗаМесяц = "
	|	ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц, 0)<> 0 
	|				ТОГДА ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц 
	|			КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.Часов, 0)<> 0 
	|				ТОГДА  СводныеИндивидуальныеГрафики.Часов
	|			ИНАЧЕ  ДанныеКалендаря.НормаЧасовЗаМесяц
	|	КОНЕЦ
	|	";

	НормаДнейЗаМесяц = "
	|	ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаДнейЗаМесяц, 0)<> 0 
	|				ТОГДА ДанныеИндивидуальногоКалендаря.НормаДнейЗаМесяц 
	|			КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.Дней, 0)<> 0 
	|				ТОГДА  СводныеИндивидуальныеГрафики.Дней
	|			ИНАЧЕ  ДанныеКалендаря.НормаДнейЗаМесяц
	|	КОНЕЦ
	|	";
	
	ТекстПоказатель1 = "
	|			ВЫБОР
	|				КОГДА ПоказателиСхемМотивацийПоСотруднику.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоСотруднику.Показатель1
	|				КОГДА ПоказателиСхемМотивацийПоПодразделению.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоПодразделению.Показатель1
	|				КОГДА ПоказателиСхемМотивацийПоОрганизации.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоОрганизации.Показатель1
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
	|                       //СПЕЦИАЛЬНЫЕ
	|					ТОГДА	ВЫБОР	КОГДА Оклады.СпособУчетаВремени = 1 И (" + НормаЧасовЗаМесяц + ") > 0
	|											ТОГДА Оклады.ОкладТариф/(" + НормаЧасовЗаМесяц + ")
	|									КОГДА Оклады.СпособУчетаВремени = 2
	|											ТОГДА Оклады.ОкладТариф/8
	|									ИНАЧЕ Оклады.ОкладТариф
	|							КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
	|					ТОГДА 
	|						ВЫБОР	КОГДА Оклады.СпособУчетаВремени = 1 И (" + НормаДнейЗаМесяц + ") > 0
	|										ТОГДА Оклады.ОкладТариф/(" + НормаДнейЗаМесяц + ")
	|								КОГДА Оклады.СпособУчетаВремени = 2
	|										ТОГДА Оклады.ОкладТариф
	|								ИНАЧЕ Оклады.ОкладТариф*8
	|						КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
	|					ТОГДА 
	|						ВЫБОР	КОГДА Оклады.СпособУчетаВремени = 1
	|										ТОГДА Оклады.ОкладТариф
	|								КОГДА Оклады.СпособУчетаВремени = 2  И (" + НормаДнейЗаМесяц + ") > 0
	|										ТОГДА Оклады.ОкладТариф*(" + НормаДнейЗаМесяц + ")
	|								ИНАЧЕ Оклады.ОкладТариф*(" + НормаЧасовЗаМесяц + ")
	|						КОНЕЦ
	|				КОГДА СписокПлановыхНачислений.Показатель1 ЕСТЬ NULL ТОГДА 0
	|				ИНАЧЕ СписокПлановыхНачислений.Показатель1
	|			КОНЕЦ
	|	";
	ТекстПоказатель2 = СтрЗаменить(ТекстПоказатель1, "Показатель1", "Показатель2");
	ТекстПоказатель3 = СтрЗаменить(ТекстПоказатель1, "Показатель1", "Показатель3");
	ТекстПоказатель4 = СтрЗаменить(ТекстПоказатель1, "Показатель1", "Показатель4");
	ТекстПоказатель5 = СтрЗаменить(ТекстПоказатель1, "Показатель1", "Показатель5");
	ТекстПоказатель6 = СтрЗаменить(ТекстПоказатель1, "Показатель1", "Показатель6");
	
	//Некоторые способы расчета имеют "виртуальный" показатель 1 "часовой тариф"
	ТекстПоказатель1 = СтрЗаменить(ТекстПоказатель1, "//СПЕЦИАЛЬНЫЕ", 
	"ИЛИ &парамСпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы) 
	|ИЛИ &парамСпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы)
	|ИЛИ &парамСпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеУмножитьНаПроцент)");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Сотрудники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Сотрудники.Должность КАК Должность,
	|	
	|	ВЫБОР	КОГДА ЕСТЬNULL(ГрафикРаботыПоСотруднику.Сотрудник,ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|				ТОГДА Сотрудники.ГрафикРаботы 
	|				ИНАЧЕ &парамНазначение
	|	КОНЕЦ								КАК ГрафикРаботы,
	|	ВЫБОР	КОГДА ЕСТЬNULL(ГрафикРаботыПоСотруднику.Сотрудник,ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|				ТОГДА Сотрудники.ГрафикРаботы.СуммированныйУчетРабочегоВремени 
	|				ИНАЧЕ ИСТИНА
	|	КОНЕЦ								КАК СуммированныйУчетРабочегоВремени,
	|
	|	ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаДнейЗаМесяц, 0)<> 0 
	|				ТОГДА ДанныеИндивидуальногоКалендаря.НормаДнейЗаМесяц 
	|			КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.Дней, 0)<> 0 
	|				ТОГДА  СводныеИндивидуальныеГрафики.Дней
	|			ИНАЧЕ  ДанныеКалендаря.НормаДнейЗаМесяц
	|	КОНЕЦ	КАК НормаДнейЗаМесяц,
	|	" + НормаЧасовЗаМесяц + " КАК НормаЧасовЗаМесяц,
	|	Оклады.ОкладТариф КАК ОкладТариф,
	|	" + ТекстПоказатель1 + " КАК Показатель1,
	|	" + ТекстПоказатель2 + " КАК Показатель2,
	|	" + ТекстПоказатель3 + " КАК Показатель3,
	|	" + ТекстПоказатель4 + " КАК Показатель4,
	|	" + ТекстПоказатель5 + " КАК Показатель5,
	|	" + ТекстПоказатель6 + " КАК Показатель6
	|
	//|ИЗ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &парамСотрудник) КАК Сотрудники
	|ИЗ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &парамНазначение) КАК Сотрудники
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+ТекстПРС+".СрезПоследних(&парамДатаСобытия, Сотрудник = &парамНазначение) КАК СписокПлановыхНачислений
	|ПО		СписокПлановыхНачислений.ВидРасчета = &парамВидРасчета
	|
	|//-----------------------
	|// Вид расчета
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ТекстПВР+" КАК СписокНачислений
	|ПО		СписокНачислений.Ссылка = &парамВидРасчета
	|
	|//-----------------------
	|// данные о видах показателей
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ТекстПВР+".Показатели КАК ТипПоказатель1
	|ПО		ТипПоказатель1.Ссылка = СписокНачислений.Ссылка И ТипПоказатель1.НомерСтроки = 1
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ТекстПВР+".Показатели КАК ТипПоказатель2
	|ПО		ТипПоказатель2.Ссылка = СписокНачислений.Ссылка И ТипПоказатель2.НомерСтроки = 2
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ТекстПВР+".Показатели КАК ТипПоказатель3
	|ПО		ТипПоказатель3.Ссылка = СписокНачислений.Ссылка И ТипПоказатель3.НомерСтроки = 3
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ТекстПВР+".Показатели КАК ТипПоказатель4
	|ПО		ТипПоказатель4.Ссылка = СписокНачислений.Ссылка И ТипПоказатель4.НомерСтроки = 4
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ТекстПВР+".Показатели КАК ТипПоказатель5
	|ПО		ТипПоказатель5.Ссылка = СписокНачислений.Ссылка И ТипПоказатель5.НомерСтроки = 5
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ТекстПВР+".Показатели КАК ТипПоказатель6
	|ПО		ТипПоказатель6.Ссылка = СписокНачислений.Ссылка И ТипПоказатель6.НомерСтроки = 6
	|
	|//-----------------------
	|// если есть индивидуальный график и он зарегистрирвоан в регистре сведений ГрафикиРаботыПоВидамВремени
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикРаботыПоСотруднику
	|ПО		ГрафикРаботыПоСотруднику.ГрафикРаботы = &парамСотрудник
	|  	И	ГрафикРаботыПоСотруднику.Сотрудник = &парамНазначение
	|	И	ГрафикРаботыПоСотруднику.Месяц = НАЧАЛОПЕРИОДА(&парамДатаСобытия, МЕСЯЦ)
	|       
	|
	|//-----------------------
	|// данные нормы календаря по индивидуальным графикам
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ГрафикиРаботы.ГрафикРаботы	КАК ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник		КАК Сотрудник,
	|		ГрафикиРаботы.Документ		КАК Документ,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ) = НАЧАЛОПЕРИОДА( &парамДатаСобытия, МЕСЯЦ ) 
	|		И	ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
	|		И	ГрафикиРаботы.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикиРаботы.ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник,
	|		ГрафикиРаботы.Документ
	|) КАК ДанныеИндивидуальногоКалендаря
	|ПО		ВЫБОР	КОГДА ГрафикРаботыПоСотруднику.Сотрудник = &парамСотрудник	// это индивидуальный график и не сокращенное время работы
	|				ТОГДА ДанныеИндивидуальногоКалендаря.ГрафикРаботы = &парамСотрудник 
	|		     		И ДанныеИндивидуальногоКалендаря.Сотрудник = &парамНазначение
	|				ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ 
	|
	|//-----------------------
	|// данные нормы календаря
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ГрафикиРаботы.ГрафикРаботы	КАК ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник		КАК Сотрудник,
	|		ГрафикиРаботы.Документ		КАК Документ,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ) = НАЧАЛОПЕРИОДА( &парамДатаСобытия, МЕСЯЦ ) 
	|		И	ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.СдельныйНаряд
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикиРаботы.ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник,
	|		ГрафикиРаботы.Документ
	|) КАК ДанныеКалендаря
	|ПО		ВЫБОР	КОГДА Сотрудники.ГрафикРаботы.СокращенноеРабочееВремя	
	|		     		ТОГДА ДанныеКалендаря.ГрафикРаботы = Сотрудники.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|				ИНАЧЕ ДанныеКалендаря.ГрафикРаботы = Сотрудники.ГрафикРаботы
	|		КОНЕЦ 
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики  КАК СводныеИндивидуальныеГрафики
	|ПО		СводныеИндивидуальныеГрафики.Сотрудник в (&парамСотрудник)
	|	И	СводныеИндивидуальныеГрафики.Назначение в (&парамНазначение)
	|	И	СводныеИндивидуальныеГрафики.Месяц = НАЧАЛОПЕРИОДА( &парамДатаСобытия, МЕСЯЦ )
	|
	|//-----------------------
	|// данные об окладах
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладТариф КАК Оклады
	|ПО	  (&парамДатаСобытия <= Оклады.ДатаОкончания ИЛИ Оклады.ДатаОкончания ЕСТЬ NULL)
	| 	И  &парамДатаСобытия  >= Оклады.ДатаНачала 
	|
	|//-----------------------
	|// данные показателей Схем Мотиваций
	|// по конкретным сотрудникам
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоСотруднику
	|ПО	ПоказателиСхемМотивацийПоСотруднику.Сотрудник = &парамНазначение
	|
	|// по подразделению
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоПодразделению
	|ПО	ПоказателиСхемМотивацийПоПодразделению.Подразделение = Сотрудники.ПодразделениеОрганизации
	|
	|// организации
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоОрганизации
	|ПО		ПоказателиСхемМотивацийПоОрганизации.Сотрудник = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	И	ПоказателиСхемМотивацийПоОрганизации.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) 
	|
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда	
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
	КонецЕсли;

КонецПроцедуры // ПроставитьДанныеСтроки()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ определения специальных алгоритмов

  // Функция возвращает дату ввода Единого социального взноса
//
Функция ДатаВводаЕСВ() Экспорт
	
	Возврат Дата(2011,1,1);
	
КонецФункции

 // Функция возвращает дату ввода Налогового кодекса
//
Функция ДатаВводаНК() Экспорт
	
	Возврат Дата(2011,1,1);
	
КонецФункции

// Функция по периоду определяет необходимость использования Единого социального взноса
//
Функция ИспользуетсяЕСВ(Период = Неопределено) Экспорт
	
	Если Период = Неопределено Тогда
		Период = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;	
		
	Возврат Период >= ДатаВводаЕСВ();
	
КонецФункции	

// Функция по периоду определяет необходимость использования Налогового кодекса
//
Функция ИспользуетсяНК(Период = Неопределено) Экспорт
	
	Если Период = Неопределено Тогда
		Период = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;	
		
	Возврат Период >= ДатаВводаНК();
	
КонецФункции	

// Функция возвращает используемые в ИБ варианты алгоритмов расчета ЗП
//
Функция ВариантыАлгоритмовРасчетаЗарплаты() Экспорт
	
	НаборЗаписей = РегистрыСведений.ВариантыАлгоритмовРасчетаЗарплаты.СоздатьНаборЗаписей(); 
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 1 Тогда
		Возврат НаборЗаписей[0];
	КонецЕсли;
	//вдруг кто-то удалил
	Запись = НаборЗаписей.Добавить();
	Запись.РасчетНДФЛ17 = Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ДоначислениеНаСуммуПревышения;
	НаборЗаписей.Записать();
	Возврат Запись;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ для ЕСВ

// Процедура определяет Код категории застрахованного лица
//
Процедура ОпределитьКодКатегорииЗЛ(СтрокаТЧ)
	
	//Определим случаи, когда код не нужен
	Если СтрокаТЧ.ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.Взносы Тогда
		Возврат;
	КонецЕсли;
	Если НЕ СтрокаТЧ.ВидРасчета.ЕСВ Тогда
		Возврат;
	КонецЕсли;	
	
	//Когда код известен сразу
	Если СтрокаТЧ.ВидРасчета = ПланыВидовРасчета.ВзносыВФонды.ЕСВГПХ Тогда
		//особи, які працюють за угодами ЦПХ 
		СтрокаТЧ.КодКатегорииЗЛ = 26;
		Возврат;
	КонецЕсли;
	Если СтрокаТЧ.ВидРасчета = ПланыВидовРасчета.ВзносыВФонды.ЕСВБольничные Тогда
		//особи, які отримують допомогу по тимчасовій непрацездатності
		СтрокаТЧ.КодКатегорииЗЛ = 29;
		Возврат;
	КонецЕсли;
	Налоги = РегистрыСведений.ВзносыВФондыРаботниковОрганизаций.СрезПоследних(СтрокаТЧ.ДатаНачала,Новый Структура("Сотрудник",СтрокаТЧ.Сотрудник));
	Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТИнвалиды,"Налог");
	Если Налог <> Неопределено И Налог.Актуальность Тогда
		//працюючий інвалід (категорія платника: 1 та 2) 
		СтрокаТЧ.КодКатегорииЗЛ = 2;
        Возврат;
	КонецЕсли;
	Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТРаботники,"Налог");
	Если  Налог <> Неопределено И Налог.Актуальность Тогда
		Налог = Налоги.Найти(Справочники.Налоги.ЕСВРаботникиСР,"Налог");
		Если  Налог <> Неопределено И Налог.Актуальность Тогда
			//наймані працівники, які працюють на посадах, робота на яких зараховується до стажу, що дає право на одержання пенсії відповідно до окремих законів України
			СтрокаТЧ.КодКатегорииЗЛ = 25;
	        Возврат;
		Иначе
			//наймані працівники на загальних підставах
			СтрокаТЧ.КодКатегорииЗЛ = 1;
	        Возврат;
		КонецЕсли;	
	КонецЕсли;
	Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТЛетчики,"Налог");
	Если  Налог <> Неопределено И Налог.Актуальность Тогда
		//особа льотного складу
		СтрокаТЧ.КодКатегорииЗЛ = 3;
        Возврат;
	КонецЕсли;
	Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТИнвалиды50,"Налог");
	Если  Налог <> Неопределено И Налог.Актуальность Тогда
		//працюючий інвалід на підприємстві або в організації громадських організацій інвалідів, в яких кількість інвалідів становить понад 50 % 
		СтрокаТЧ.КодКатегорииЗЛ = 28;
        Возврат;
	КонецЕсли;
	Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТРаботникиУТОГУТОС,"Налог"); 
	Если  Налог <> Неопределено И Налог.Актуальность Тогда
		Налог = Налоги.Найти(Справочники.Налоги.ЕСВИнвалидыУТОГУТОС,"Налог"); 
		Если  Налог <> Неопределено И Налог.Актуальность Тогда
			//найманий працівник-інвалід, який працює на підприємствах та в організаціях всеукраїнських громадських організацій інвалідів, зокрема товариствах УТОГ та УТОС
			СтрокаТЧ.КодКатегорииЗЛ = 30;
	        Возврат;
		Иначе
			//особи, які працюють на підприємствах та в організаціях всеукраїнських громадських організацій інвалідів, зокрема товариствах УТОГ та УТОС
			СтрокаТЧ.КодКатегорииЗЛ = 27;
	        Возврат;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

// Процедура определяет тип начисления
//
Процедура ОпределитьТипНачисления(СтрокаТЧ, Регистратор)
	
	//Определим случаи, когда код не нужен
	Если СтрокаТЧ.ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.Взносы Тогда
		Возврат;
	КонецЕсли;
	Если НЕ СтрокаТЧ.ВидРасчета.ЕСВ Тогда
		Возврат;
	КонецЕсли;	
	Если СтрокаТЧ.ВидРасчета = ПланыВидовРасчета.ВзносыВФонды.ЕСВГПХ И
		СтрокаТЧ.БазовыйПериодНачало < Регистратор.ПериодРегистрации Тогда
		СтрокаТЧ.ТипНачисления = 1;
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры	

// Функция возвращает список начислений входящих в базу взноса ЕСВ с оплаты по договорам ГПХ
//
Функция СписокГПХПоЕСВ() Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВзносыВФондыБазовыеВидыРасчета.Ссылка,
	               |	ВзносыВФондыБазовыеВидыРасчета.ВидРасчета
	               |ИЗ
	               |	ПланВидовРасчета.ВзносыВФонды.БазовыеВидыРасчета КАК ВзносыВФондыБазовыеВидыРасчета
				   |ГДЕ
				   |  ВзносыВФондыБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ВзносыВФонды.ЕСВГПХ)
				   |";
				   
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАСЧЕТОВ Средних

                                                                        
// Осуществляет округление числа по правилу четной цифры
//
// Параметры
//  Значение  – Число – округляемое значение
//
Функция ОкруглитьПоПравилуЧетнойЦифры(Значение)
	
	Если (Значение = Неопределено) или (Значение = NULL) Тогда
		Возврат 0;
	КонецЕсли;	
	
	ЦелаяЧасть = Цел(Значение);
	ДробнаяЧасть = Значение - ЦелаяЧасть;
	Если (ДробнаяЧасть >= 0.6) или (ДробнаяЧасть < 0.5) Тогда
		//Стандартно
		Возврат Окр(Значение);
	КонецЕсли;
	ПоловинаЦелой = Цел(ЦелаяЧасть/2);
	Если (ЦелаяЧасть = (ПоловинаЦелой*2)) Тогда
		//четное - округляем в меньшую
	    Возврат ЦелаяЧасть;
	Иначе
		//нечетное - округляем в большую
		Возврат ЦелаяЧасть+1;
	КонецЕсли;	
	
КонецФункции	

// Расчитывает среднесписочную численность штатных работников и в эквиваленте полной занятости
//
// Параметры
//  ВидСредней  – Строка – "ЭПЗ", "ССЧ"
//  ВидПериода  – Строка – "МЕСЯЦ", "КВАРТАЛ", "ГОД", "КВАРТАЛСНАЧАЛАГОДА", "МЕСЯЦСНАЧАЛАГОДА" 
//  Организация  – ссылка – организация
//  ПараметрОтбора  – Строка – "" = по всем(штатным + ГПХ), "Ж" = Женщины, "Инв" = Инвалиды, "Пен" = пенсионеры, "Иностранцы" = Иностранцы, "ГПХ" - работающие по договору ГПХ, "Штат" - только по штатным
//
// Возвращаемое число:
//   таблица значений   – Колонки: Период и Сумма
//
Функция ПолучитьСреднююЧисленность(НачалоПериода, КонецПериода, ВидСредней, ВидПериода = "МЕСЯЦ", Организация, ПараметрОтбора = "") Экспорт
	
	// таблица с результатми
	тбСредняя = Новый ТаблицаЗначений;
	тбСредняя.Колонки.Добавить("Период");
	тбСредняя.Колонки.Добавить("Средняя");
	ТекСтрока = тбСредняя.Добавить();
	ТекСтрока.Средняя = 0;
	
	
	Если ВидСредней = "ССЧ" Тогда
		ФормаОтчета = Отчеты.СреднеучетнаяЧисленностьСотрудников.ПолучитьФорму();
	ИначеЕсли ВидСредней = "ЭПЗ" Тогда
		ФормаОтчета = Отчеты.СреднеучетнаяЧисленностьСотрудниковЭПЗ.ПолучитьФорму();
	КонецЕсли;

	ФормаОтчета.ЗаполнитьНачальныеНастройки();
	ФормаОтчета.ПостроительОтчета.Отбор.Организация.Значение = Организация;
	ФормаОтчета.ПостроительОтчета.Отбор.Организация.Использование = Истина;
	//  ВидПериода  – Строка – "МЕСЯЦ", "КВАРТАЛ", "ГОД", "КВАРТАЛСНАЧАЛАГОДА", "МЕСЯЦСНАЧАЛАГОДА" 
	Если ВидПериода = "МЕСЯЦ" Тогда
		тбСредняя = ПолучитьСреднююЧисленностьЗаМесяц(КонецПериода, ВидСредней, Организация, ПараметрОтбора);
	ИначеЕсли ВидПериода = "КВАРТАЛ" Или ВидПериода = "КВАРТАЛСНАЧАЛАГОДА" Или ВидПериода = "МЕСЯЦСНАЧАЛАГОДА" Тогда
		
		Если ВидПериода = "КВАРТАЛ"  Тогда
			ТекДата	= НачалоКвартала(НачалоПериода);
		Иначе
			ТекДата	= НачалоГода(НачалоПериода);
		КонецЕсли;
		
		КвоМесяцев = 0;
		ДатаКонца	= НачалоМесяца(КонецПериода);
		Пока ТекДата <= ДатаКонца Цикл
			
			тбСредняяЗаМесяц = ПолучитьСреднююЧисленностьЗаМесяц(ТекДата, ВидСредней, Организация, ПараметрОтбора);
			Если тбСредняяЗаМесяц[0].Средняя <> Неопределено Тогда
				ТекСтрока.Средняя = ТекСтрока.Средняя + тбСредняяЗаМесяц[0].Средняя;
			КонецЕсли;
			
			КвоМесяцев = КвоМесяцев + 1;
			ТекДата = ДобавитьМесяц(ТекДата, 1);
		КонецЦикла;
		
		ТекСтрока.Средняя = ?( КвоМесяцев = 0, 0, ОкруглитьПоПравилуЧетнойЦифры(ТекСтрока.Средняя/КвоМесяцев));
		
	КонецЕсли;
	
	Возврат тбСредняя;
	
КонецФункции // ПолучитьСреднюю()

// Расчитывает среднесписочную численность штатных работников и в эквиваленте полной занятости
//
// Параметры
//  ВидСредней  – Строка – "ЭПЗ", "ССЧ"
//  ВидПериода  – Строка – "МЕСЯЦ", "КВАРТАЛ", "ГОД", "КВАРТАЛСНАЧАЛАГОДА", "МЕСЯЦСНАЧАЛАГОДА" 
//  Организация  – ссылка – организация
//  ПараметрОтбора  – Строка – "" = по всем, "Ж" = Женщины, "Инв" = Инвалиды, "Пен" = пенсионеры, "Иностранцы" = Иностранцы, "ГПХ" - работающие по договору ГПХ
//
// Возвращаемое число:
//   таблица значений   – Колонки: Период и Сумма
//
Функция ПолучитьСреднююЧисленностьЗаМесяц(КонецПериода, ВидСредней, Организация, ПараметрОтбора = "") Экспорт
	
	// таблица с результатми
	тбСредняя = Новый ТаблицаЗначений;
	тбСредняя.Колонки.Добавить("Период");
	тбСредняя.Колонки.Добавить("Средняя");
	
	Если ВидСредней = "ССЧ" Тогда
		ФормаОтчета = Отчеты.СреднеучетнаяЧисленностьСотрудников.ПолучитьФорму();
	ИначеЕсли ВидСредней = "ЭПЗ" Тогда
		ФормаОтчета = Отчеты.СреднеучетнаяЧисленностьСотрудниковЭПЗ.ПолучитьФорму();
	КонецЕсли;

	ФормаОтчета.ЗаполнитьНачальныеНастройки();
	ФормаОтчета.ПостроительОтчета.Отбор.Организация.Значение = Организация;
	ФормаОтчета.ПостроительОтчета.Отбор.Организация.Использование = Истина;
	
	ВидОтчета 	  = "";
	ВидРаботников = "";
	Если  ВРЕГ(ПараметрОтбора) = "Ж" Тогда
		ВидОтчета = "Ж";	
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ЖШТАТ" Тогда
		ВидОтчета	  = "Ж"; 
		ВидРаботников = "Штатные";	
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ШТАТ" Тогда
		ВидРаботников = "Штатные";	
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "СОВМ" Тогда
		ВидРаботников = "Совместители";	
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ГПХ" Тогда
		Если ВидСредней = "ЭПЗ" Тогда
		   ВидОтчета = "ГПХ";
		КонецЕсли;
		ВидРаботников = "ГПХ";	
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ПЕНСИОНЕРЫ" Тогда
		ВидОтчета = "Пен";
	ИначеЕсли  ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ИНОСТРАНЦЫ" Тогда
		ВидОтчета = "Иностранцы";
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ИНВ" Тогда
		ВидОтчета = "Инв";
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ПЕННЕИНВ" Тогда
		ВидОтчета = "ПенНеИнв";	
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ИНВНЕПЕН" Тогда
		ВидОтчета = "ИнвНеПен";
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ИНВПЕН" Тогда
		ВидОтчета = "ИнвПен";
	ИначеЕсли ПараметрОтбора <> "" Тогда
		ТекСтрока = тбСредняя.Добавить();
		ТекСтрока.Период = НачалоМесяца(КонецПериода);
		ТекСтрока.Средняя = 0;
		Возврат тбСредняя;
	КонецЕсли;

	
	ФормаОтчета.ДатаНачала	= НачалоМесяца(КонецПериода);
	ФормаОтчета.ДатаКонца	= КонецМесяца(КонецПериода);
	ФормаОтчета.ВидОтчета	  = ВидОтчета;
	Если ВидСредней = "ССЧ" Тогда
		ФормаОтчета.ВидРаботников = ВидРаботников;
	КонецЕсли;
	
	ФормаОтчета.СформироватьПараметрыОтчета();
	Выборка = ФормаОтчета.ПостроительОтчета.ПолучитьЗапрос().Выполнить().Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам);
	Выборка.Следующий();
	
	ТекСтрока = тбСредняя.Добавить();
	ТекСтрока.Период = НачалоМесяца(КонецПериода);
	ТекСтрока.Средняя = ОкруглитьПоПравилуЧетнойЦифры(Выборка.Средняя);
	
	Возврат тбСредняя;
	
КонецФункции // ПолучитьСреднюю()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАСЧЕТОВ Коммунального налога

//Процедура служит для определения регламентированных параметров, необходимых для
//расчета суммы коммунального налога
Процедура ОпределитьРегламентированныеПараметрыДляРасчетаКоммунальногоНалога(СтавкаКоммунальногоНалога, НеоблагаемыйМинимум, ДатаНалога, Организация = "")   Экспорт
	
	Если Организация = "" Тогда
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	//определяем ставку коммунального налога
	СтавкаКоммунальногоНалога = 0;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	НалогиОсн.Налог  КАК Налог, 
	|	НалогиОсн.Ставка КАК Ставка,
	|	НалогиОсн.Организация КАК Организация
    |ИЗ РегистрСведений.ШкалаСтавокНалогов.СрезПоследних (&Дата) КАК НалогиОсн
	|ГДЕ НалогиОсн.Налог = &КоммунальныйНалог
	|";
	ЗапросЗначенияСтавок = Новый Запрос;
	ЗапросЗначенияСтавок.Текст = ТекстЗапроса;
	ЗапросЗначенияСтавок.УстановитьПараметр("Дата", ДатаНалога);
	КоммунальныйНалог = Справочники.Налоги.КоммунальныйНалог;
	ЗапросЗначенияСтавок.УстановитьПараметр("КоммунальныйНалог", КоммунальныйНалог);
	
	РезультатЗапроса = ЗапросЗначенияСтавок.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТаблицаСтавок = РезультатЗапроса.Выгрузить();
		НайденнаяСтрока = ТаблицаСтавок.Найти (Организация,"Организация" );
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = ТаблицаСтавок.Найти (КоммунальныйНалог,"Налог" );
		КонецЕсли;
		СтавкаКоммунальногоНалога = НайденнаяСтрока.Ставка;
		
	КонецЕсли;
	
	
	//определяем значение необлагаемого минимума
	ТекстЗапроса = "
	|ВЫБРАТЬ  
	|	НеоблагМинимум.Размер  КАК РазмерМинимума 
	|ИЗ РегистрСведений.НеоблагаемыйМинимум.СрезПоследних (&Дата) КАК НеоблагМинимум
	|";
	
	ЗапросЗначениеМинимума = Новый Запрос;
	ЗапросЗначениеМинимума.Текст = ТекстЗапроса;
	ЗапросЗначениеМинимума.УстановитьПараметр("Дата", ДатаНалога);
	
	РезультатЗапроса = ЗапросЗначениеМинимума.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТаблицаСтавок = РезультатЗапроса.Выгрузить();
		НеоблагаемыйМинимум = ТаблицаСтавок[0].РазмерМинимума; 
		
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАСЧЕТОВ

Функция АвтозаполнениеРаботникиОрганизации( Регистратор, ПроверятьДубли = Истина, ЭтоДоговорники = Ложь, ЭтоУволенные = Ложь) Экспорт
	
	ПериодРегистрации = Регистратор.ПериодРегистрации;
	Организация = Регистратор.Организация;
	Ответственный = Регистратор.Ответственный;
	ПодразделениеОрганизации = Регистратор.ПодразделениеОрганизации;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСсылка",	Регистратор);
	
	// надо получить назначение на начало последнего дня месяца
	Запрос.УстановитьПараметр("парамДеньСреза",	?(ЭтоУволенные, КонецМесяца(ПериодРегистрации) + 1, НачалоДня(КонецМесяца(ПериодРегистрации))) );
	Запрос.УстановитьПараметр("парамПериодРегистрации",	ПериодРегистрации );
	
	Запрос.УстановитьПараметр("парамОрганизация",	Регистратор.Организация);
	Запрос.УстановитьПараметр("парамПользователь",	Регистратор.Ответственный);
	Запрос.УстановитьПараметр("парамПодразделение",	Регистратор.ПодразделениеОрганизации);
	
	ЕстьРеквизитЭтоПересчетНДФЛ = Ложь;
	Если Регистратор.Метаданные().Реквизиты.Найти("ЭтоПересчетНДФЛ") <> Неопределено Тогда
		ЕстьРеквизитЭтоПересчетНДФЛ = Истина;
		Запрос.УстановитьПараметр("ЭтоПересчетНДФЛ",	Регистратор.ЭтоПересчетНДФЛ);
	КонецЕсли;
	ЕстьРеквизитПредварительныйРасчет = Ложь;
	Если Регистратор.Метаданные().Реквизиты.Найти("ПредварительныйРасчет") <> Неопределено Тогда
		ЕстьРеквизитПредварительныйРасчет = Истина;
	КонецЕсли;
	ЕстьПерерассчитываемыйДокумент = Ложь;
	ТекстПерерассчитываемыйДокумент = "";
	Если Регистратор.Метаданные().Реквизиты.Найти("ПерерассчитываемыйДокумент") <> Неопределено Тогда
		ЕстьПерерассчитываемыйДокумент = Истина;
		ТекстПерерассчитываемыйДокумент = "ЗНАЧЕНИЕ(Документ."+Регистратор.Метаданные().Имя+".ПустаяСсылка)";
	КонецЕсли;
	
 	// Проверим ответсвенного - является ли он расчетчиком вообще и для заданного 
 	// подразделения (если оно задано)
 	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
 	ПустойОтветственный = Справочники.Пользователи.ПустаяСсылка();
	Если Ответственный <> ПустойОтветственный Тогда
		Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].РасчетЗарплатыОрганизацииПоОтветственным Тогда
			Если ПодразделениеОрганизации = ПустоеПодразделение Тогда
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Расчетчики.ПодразделениеОрганизации
				|ИЗ
				|	РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамПериодРегистрации) КАК Расчетчики
				|
				|ГДЕ
				|	Расчетчики.Пользователь = &парамПользователь";
				Если Запрос.Выполнить().Пустой() Тогда
					Сообщить("Ответственный за этот документ не является расчетчиком ни одного из подразделений организации");
				КонецЕсли;
			Иначе
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Подразделения.Ссылка
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК Подразделения
				|
				|ГДЕ
				|	Подразделения.Ссылка В ИЕРАРХИИ(&парамПодразделение) И
				|	(Подразделения.Ссылка В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ 	Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамПериодРегистрации) КАК Расчетчики ГДЕ 	Расчетчики.Пользователь = &парамПользователь ))";
				Если Запрос.Выполнить().Пустой() Тогда
					Сообщить("Ответственный за этот документ не является расчетчиком для выбранного подразделения");
					Запрос.УстановитьПараметр("парамПодразделение",	Неопределено);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
 	КонецЕсли;
	
    // Описание условий	
	Если ПодразделениеОрганизации = ПустоеПодразделение Тогда
		
		Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].РасчетЗарплатыОрганизацииПоОтветственным Тогда
			ПоВсемПодразделениямОрганизации = Ложь;
			УсловиеНаПодразделение = "ПодразделениеОрганизации В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамПериодРегистрации) Расчетчики ГДЕ Расчетчики.Пользователь = &парамПользователь)";
		Иначе
			ПоВсемПодразделениямОрганизации = Истина;
			УсловиеНаПодразделение = "ПодразделениеОрганизации.Владелец = &парамОрганизация";
		КонецЕсли;
		
	Иначе
		
		ПоВсемПодразделениямОрганизации = Ложь;
		УсловиеНаПодразделение = "ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)";
	КонецЕсли;
	
	// Текст запроса: срез работников на конец месяца
	ТекстЗапроса = "
	//Смартис Лиманчук начало 15.05.2012
	//|ВЫБРАТЬ
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//Смартис Лиманчук окончание 15.05.2012
	|	Сотрудники.Сотрудник КАК Сотрудник  
	|ИЗ (		
	|	ВЫБРАТЬ
	|		Работники.Сотрудник КАК Сотрудник
	|	ИЗ	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамДеньСреза, Организация = &парамОрганизация) КАК Работники
	|	
	|	
	|	// все уволенные до текущего периода
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			Работники.Сотрудник КАК Сотрудник
	|		ИЗ	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамПериодРегистрации, Организация = &парамОрганизация) КАК Работники
	|		ГДЕ		Работники.ЗанимаемыхСтавок = 0 
	//Смартис Лиманчук начало 16.05.2012
	//|			И	Работники.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	//|			И	Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	//Смартис Лиманчук окончание 16.05.2012
	|			"+?(ПоВсемПодразделениямОрганизации, "", "И Работники."+УсловиеНаПодразделение)+"
	|	) КАК УволенныеРаботники
	|	ПО  Работники.Сотрудник = УволенныеРаботники.Сотрудник
	|	
	|	ГДЕ  ( Работники.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|	// если сотрудник перешел с совместителя на основное место работы, то в последнем месяце его заполнять не надо
	|	ИЛИ  Работники.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|	И  Работники.ЗанимаемыхСтавок > 0 )
	|	И  УволенныеРаботники.Сотрудник ЕСТЬ NULL
	|	"+?(ПоВсемПодразделениямОрганизации, "", "И Работники."+УсловиеНаПодразделение)+"
	|	"+?(ЭтоУволенные, "И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)", "")+"
	|	"+?(ЭтоУволенные, "И Работники.Сотрудник.ВидДоговора<> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда) ", "") + "
	|	"+?(ЭтоДоговорники, "И Работники.Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)", "") + "
	
	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВЫБОР КОГДА ДоговорникиОрганизаций.Сотрудник.ОсновноеНазначение <> ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
	|			ТОГДА ДоговорникиОрганизаций.Сотрудник.ОсновноеНазначение
	|			ИНАЧЕ ДоговорникиОрганизаций.Сотрудник
	|		КОНЕЦ КАК Сотрудник
	|	ИЗ  Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорникиОрганизаций
	|	
	|	ГДЕ ДоговорникиОрганизаций.Проведен
	|		И ДоговорникиОрганизаций.ДатаОкончания >= &парамПериодРегистрации
	|		И ДоговорникиОрганизаций.ДатаНачала <= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
	|		И ДоговорникиОрганизаций.Организация = &парамОрганизация
	|	"+?(ПоВсемПодразделениямОрганизации, "", " И ДоговорникиОрганизаций."+УсловиеНаПодразделение)+"
	|	"+?(ЭтоУволенные,"И ДоговорникиОрганизаций.Сотрудник.ВидДоговора<> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)", "") + "
	|	"+?(ЭтоДоговорники, "И ДоговорникиОрганизаций.Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)", "") + "

	|		
	|) КАК Сотрудники		
	|		
	|";
	
	Если ПроверятьДубли Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ (		
		|	ВЫБРАТЬ
		|		Работники.Сотрудник КАК Сотрудник
		|	ИЗ  Документ."+Регистратор.Метаданные().Имя+".РаботникиОрганизации КАК Работники
		|	ГДЕ		Работники.Ссылка <> &парамСсылка 
		|		И	Работники.Ссылка.ПериодРегистрации = &парамПериодРегистрации
		|		И	Работники.Ссылка.Организация = &парамОрганизация
		|		И	Работники.Ссылка.ПометкаУдаления = ЛОЖЬ
		|		И	Работники.Ссылка.Проведен = ИСТИНА
		|		" + ?(ЕстьРеквизитЭтоПересчетНДФЛ,"И НЕ Работники.Ссылка.ЭтоПересчетНДФЛ <> &ЭтоПересчетНДФЛ","")+"
		|		" + ?(ЕстьРеквизитПредварительныйРасчет,"И НЕ Работники.Ссылка.ПредварительныйРасчет","")+"
		|		" + ?(ЕстьПерерассчитываемыйДокумент,"И НЕ Работники.Ссылка.ПерерассчитываемыйДокумент <> "+ТекстПерерассчитываемыйДокумент,"")+"
		|) КАК РаботникиРасчитанныеДругимимДокументами		
		|ПО РаботникиРасчитанныеДругимимДокументами.Сотрудник = Сотрудники.Сотрудник 		
		|		
		|ГДЕ	РаботникиРасчитанныеДругимимДокументами.Сотрудник ЕСТЬ NULL		
		|";

		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
    Возврат Запрос.Выполнить();

КонецФункции // АвтозаполнениеРаботникиОрганизации()

Процедура АвтозаполнениеВзносы( Регистратор, Взносы, ЭтоВзносы, Сотрудники, ПоРегистратору = Ложь ) Экспорт
	
	Если Регистратор.Метаданные().реквизиты.Найти("ПерерассчитываемыйДокумент")= Неопределено  Тогда
		мПериодРегистрации = Регистратор.ПериодРегистрации;
	Иначе
		мПериодРегистрации = ?(ЗначениеЗаполнено(Регистратор.ПерерассчитываемыйДокумент), Регистратор.ПерерассчитываемыйДокумент.ПериодРегистрации, Регистратор.ПериодРегистрации);
	КонецЕсли;
	
	
	ИспользуетсяЕСВ = ИспользуетсяЕСВ(Регистратор.ПериодРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамРегистратор" , Регистратор);
	Запрос.УстановитьПараметр("парамОрганизация" , Регистратор.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", мПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудники"  , Сотрудники);
	Запрос.УстановитьПараметр("парамПрогрессивнаяШкала"  , Перечисления.СпособыРасчетаПоШкале.Прогрессивный);
	
	//	ВТРаботникиПоПериодам
	Если Истина Тогда
		
		//Определим правила отнесения к налоговому периоду
		Если ИспользуетсяЕСВ Тогда
			
			Запрос.УстановитьПараметр("СписокГПХПоЕСВ",СписокГПХПоЕСВ());
			
			ТекстНалоговыйПериод = "ВЫБОР КОГДА Начисления.ВидРасчета.ЭтоБольничные //Больничные
			                        |ИЛИ  Начисления.ВидРасчета В (&СписокГПХПоЕСВ) //Оплата по договору ГПХ
									|ИЛИ  Начисления.ВидРасчета.ЭтоОтпуск //Отпускные
									|ТОГДА НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало,	МЕСЯЦ) //по периоду действия
									|ИНАЧЕ &ПериодРегистрации //по периоду регистрации
									|КОНЕЦ";
            ТекстНачало = "ВЫБОР КОГДА Начисления.ВидРасчета.ЭтоБольничные
			                        |ИЛИ  Начисления.ВидРасчета В (&СписокГПХПоЕСВ)
									|ИЛИ  Начисления.ВидРасчета.ЭтоОтпуск
									|ТОГДА Начисления.ПериодДействияНачало
									|ИНАЧЕ &ПериодРегистрации
									|КОНЕЦ";
			ТекстКонец = "ВЫБОР КОГДА Начисления.ВидРасчета.ЭтоБольничные
			                        |ИЛИ  Начисления.ВидРасчета В (&СписокГПХПоЕСВ)
									|ИЛИ  Начисления.ВидРасчета.ЭтоОтпуск
									|ТОГДА Начисления.ПериодДействияКонец
									|ИНАЧЕ &ПериодРегистрации
									|КОНЕЦ";						
		Иначе
			ТекстНалоговыйПериод = "НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало,	МЕСЯЦ)";
			ТекстНачало = "НачисленияВсе.ПериодДействияНачало";
			ТекстКонец = "НачисленияВсе.ПериодДействияКонец";
		КонецЕсли;	
		
		//	Описание:
		// 		Сотрудники по которым есть зарегистрированные записи по начислениям в периодеРегистрации 
		// 		сгруппированные по периодам действия
		//
		ТекстЗапроса = "
		//Смартис Лиманчук начало 15.05.2012
		//|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		//Смартис Лиманчук окончание 15.05.2012
		|		Начисления.Сотрудник            						КАК Сотрудник,       // сотрудник определяет организацию, потому условие на организацию не требуется
		|"+ТекстНалоговыйПериод+" КАК НалоговыйПериод,
		|		МАКСИМУМ( 
		|       		ВЫБОР КОГДА ЕСТЬNULL(РаботникиПрием.Период,НАЧАЛОПЕРИОДА("+ТекстНачало+", МЕСЯЦ)) > НАЧАЛОПЕРИОДА("+ТекстНачало+", МЕСЯЦ) 
		|							ТОГДА РаботникиПрием.Период
		|                     ИНАЧЕ НАЧАЛОПЕРИОДА("+ТекстНачало+", МЕСЯЦ) КОНЕЦ
		|		)	КАК ДатаНачала,    // если пришел на работу, то это будет дата приема		
		|
		|		МАКСИМУМ( 
		|       		ВЫБОР КОГДА  ЕСТЬNULL(РаботникиУвольнение.Период, КОНЕЦПЕРИОДА("+ТекстКонец+", МЕСЯЦ)) > КОНЕЦПЕРИОДА("+ТекстКонец+", МЕСЯЦ) 
		|							ТОГДА КОНЕЦПЕРИОДА("+ТекстКонец+", МЕСЯЦ)
		|                     ИНАЧЕ ЕСТЬNULL(РаботникиУвольнение.Период, КОНЕЦПЕРИОДА("+ТекстКонец+", МЕСЯЦ)) КОНЕЦ
		|		)	КАК ДатаОкончания    // если уволился то это будет дата увольнения		
		|
		|ПОМЕСТИТЬ ВТРаботникиПоПериодам	
		|	ИЗ	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК НачисленияВсе
		|	ПО		НачисленияВсе.ПериодРегистрации <= &ПериодРегистрации
		|		И	НачисленияВсе.Сотрудник = Начисления.Сотрудник
		|		И	НАЧАЛОПЕРИОДА(НачисленияВсе.ПериодДействияНачало,	МЕСЯЦ) = НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало,	МЕСЯЦ)
		|           " + ?(ПоРегистратору, "И	НачисленияВсе.Регистратор = &парамРегистратор", "") + "
		|
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ( 
		|   	ВЫБРАТЬ
		|			Работники.Сотрудник,
		|			Работники.Период КАК Период
		|       ИЗ РегистрСведений.РаботникиОрганизаций КАК Работники
		|       ГДЕ Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|		И	Работники.Сотрудник в ( &парамСотрудники )
		|   ) КАК РаботникиПрием
		|	ПО		РаботникиПрием.Сотрудник = Начисления.Сотрудник
		|
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ( 
		|   	ВЫБРАТЬ
		|			Работники.Сотрудник,
		|			ДОБАВИТЬКДАТЕ(Работники.Период,СЕКУНДА, -1) КАК Период 
		|       ИЗ РегистрСведений.РаботникиОрганизаций КАК Работники
		|       ГДЕ Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|		И	Работники.Сотрудник в ( &парамСотрудники )
		|   ) КАК РаботникиУвольнение
		|	ПО		РаботникиУвольнение.Сотрудник = Начисления.Сотрудник
		|
		|	ГДЕ		Начисления.ПериодРегистрации = &ПериодРегистрации
		|		И	Начисления.Сотрудник в ( &парамСотрудники )
		|           " + ?(ПоРегистратору, "И	Начисления.Регистратор = &парамРегистратор", "") + "
		|
		|	СГРУППИРОВАТЬ ПО
		|		Начисления.Сотрудник,
		|"+ТекстНалоговыйПериод+"
		|
		|	ИНДЕКСИРОВАТЬ ПО
		|		Сотрудник,
		|		НалоговыйПериод
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТРаботникиПоПериодам = "ВТРаботникиПоПериодам";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТРаботникиПоПериодам";
	
	//	ВТПодразделения
	Если Истина Тогда
		//	Описание:
		// 		Сотрудники и подразделения в которых они числились на конец периода регистрации 
		//      
		//
		//
		ТекстЗапроса = "
		//Смартис Лиманчук начало 15.05.2012
		//|	ВЫБРАТЬ
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//Смартис Лиманчук окончание 15.05.2012
		|		РаботникиОрганизаций.Сотрудник      КАК Сотрудник,
		|		Работники.ПодразделениеОрганизации	КАК ПодразделениеОрганизации
		|
		|ПОМЕСТИТЬ ВТПодразделения	
		|	ИЗ	(
		|		ВЫБРАТЬ
		|			РаботникиПоПериодам.Сотрудник	КАК Сотрудник,	// сотрудник определяет организацию, потому условие на организацию не требуется
		|			МАКСИМУМ(Работники.Период)		КАК Период		// дата приема или последнего кадрового перемещения		
		|		ИЗ	ВТРаботникиПоПериодам КАК РаботникиПоПериодам
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ	РегистрСведений.РаботникиОрганизаций КАК Работники
		|		ПО		Работники.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|			И	Работники.Сотрудник = РаботникиПоПериодам.Сотрудник
		|			И	Работники.ЗанимаемыхСтавок > 0
		|
		|		СГРУППИРОВАТЬ ПО
		|			РаботникиПоПериодам.Сотрудник
		|	)КАК РаботникиОрганизаций
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ	РегистрСведений.РаботникиОрганизаций КАК Работники
		|	ПО		Работники.Сотрудник = РаботникиОрганизаций.Сотрудник
		|		И	Работники.Период = РаботникиОрганизаций.Период
		|		И	Работники.ЗанимаемыхСтавок > 0
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТПодразделения = "ВТПодразделения";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПодразделения";
	
	//	ВТВзносы
	Если Истина Тогда
		//	Описание:
		// 		Набор налогово по Сотруднику с периодом актуальности этого налога
		// 		сгруппированные по периодам действия
		//
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Взносы.Сотрудник		КАК Сотрудник,
		|	Взносы.Налог			КАК Налог,
		|	Взносы.Период			КАК ДатаНачала,
		|	МИНИМУМ (
		|       ВЫБОР	КОГДА НЕ Окончания.Актуальность		// это закрытие, значит надо закрыть предыдущим днем
		|					ТОГДА  НАЧАЛОПЕРИОДА(Окончания.Период, ДЕНЬ)
		|       		КОГДА Окончания.Актуальность //ЕСТЬ НЕ NULL		// это закрытие, значит надо закрыть предыдущим днем
		|					ТОГДА  ДОБАВИТЬКДАТЕ(Окончания.Период, ДЕНЬ,-1)
		|				ИНАЧЕ  РаботникиПомесячно.ДатаОкончания						// если не закрыто закрываем последней датой работника	
		|				КОНЕЦ
		|						)	КАК ДатаОкончания
		|
		|ПОМЕСТИТЬ ВТВзносы	
		|ИЗ РегистрСведений.ВзносыВФондыРаботниковОрганизаций КАК Взносы
		|			
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ( 			
		|	ВЫБРАТЬ
		|		РаботникиПоПериодам.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(РаботникиПоПериодам.ДатаОкончания) КАК ДатаОкончания
		|	ИЗ " + ТекстЗапросаВТРаботникиПоПериодам + "	КАК	РаботникиПоПериодам	
		|	СГРУППИРОВАТЬ ПО			
		|		РаботникиПоПериодам.Сотрудник
		|)КАК РаботникиПомесячно			
		|ПО 	Взносы.Сотрудник = РаботникиПомесячно.Сотрудник 			
		|	И	Взносы.Период <= РаботникиПомесячно.ДатаОкончания		
		|			
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВзносыВФондыРаботниковОрганизаций КАК Окончания
		|ПО		Взносы.Сотрудник = Окончания.Сотрудник
		|	И	Взносы.Налог = Окончания.Налог
		////|	И	НЕ Взносы.Актуальность      // это условие позволит не видеть лишние записи
		|	И	Взносы.Период < Окончания.Период
		|			
		|ГДЕ	Взносы.Сотрудник в ( &парамСотрудники )
		|	И	Взносы.Актуальность
		|СГРУППИРОВАТЬ ПО
		|	Взносы.Сотрудник,
		|	Взносы.Налог,
		|	Взносы.Период
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТВзносыРаботников = "ВТВзносы";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВзносы";
	
	//	ВТВзносыРаботников
	Если Истина Тогда
		//	Описание:
		// 		
		//
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Взносы.Сотрудник		КАК Сотрудник,
		|	Взносы.Налог			КАК Налог,
		|	Взносы.ДатаНачала		КАК ДатаНачала,
		|	МИНИМУМ(ВзносыОкончание.ДатаОкончания)	КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТВзносыРаботников	
		|ИЗ (			
		|	ВЫБРАТЬ
		|		ВзносыНачало.Сотрудник		КАК Сотрудник,
		|		ВзносыНачало.Налог			КАК Налог,
		|		ВзносыНачало.ДатаНачала		КАК ДатаНачала
		|	ИЗ ВТВзносы КАК ВзносыНачало
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносы КАК Предыдущий			
		|	ПО 		ВзносыНачало.Сотрудник = Предыдущий.Сотрудник 			
		|		И 	ВзносыНачало.Налог = Предыдущий.Налог 			
		|		И	ДОБАВИТЬКДАТЕ(ВзносыНачало.ДатаНачала, ДЕНЬ,-1) = Предыдущий.ДатаОкончания		
		|	ГДЕ	Предыдущий.Налог ЕСТЬ NULL
		|) КАК Взносы			
		|			
		|ЛЕВОЕ СОЕДИНЕНИЕ (			
		|	ВЫБРАТЬ
		|		ВзносыКонец.Сотрудник		КАК Сотрудник,
		|		ВзносыКонец.Налог			КАК Налог,
		|		ВзносыКонец.ДатаОкончания	КАК ДатаОкончания
		|	ИЗ ВТВзносы КАК ВзносыКонец
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносы КАК Следующий			
		|	ПО 	ВзносыКонец.Сотрудник = Следующий.Сотрудник 			
		|	И 	ВзносыКонец.Налог = Следующий.Налог 			
		|	И	ДОБАВИТЬКДАТЕ(ВзносыКонец.ДатаОкончания, ДЕНЬ,1) = Следующий.ДатаНачала		
		|	ГДЕ	Следующий.Налог ЕСТЬ NULL
		|) КАК ВзносыОкончание			
		|ПО 	Взносы.Сотрудник = ВзносыОкончание.Сотрудник 			
		|	И 	Взносы.Налог = ВзносыОкончание.Налог 			
		|	И 	Взносы.ДатаНачала <= ВзносыОкончание.ДатаОкончания 			
		|			
		|СГРУППИРОВАТЬ ПО
		|	Взносы.Сотрудник,
		|	Взносы.Налог,
		|	Взносы.ДатаНачала
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТВзносыРаботников = "ВТВзносыРаботников";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВзносыРаботников";
	
	//	ВТПараметрыНалоговНачалоКонец
	Если Истина Тогда
		
		//	ВТДатаИзмененияПределВидРасчетаШкала
		
		//	Описание:
		// 		СведенияОВзносахВФонды, ВидыРасчетовВзносовВФонды, ШкалаСтавокНалогов   
		//      тут получим даты изменения в таблицах (Периоды)
		//      эти таблички маленькие, потому никакими условиями их не ограничиваем
		//
		ТекстЗапроса = "
		|//--------------------------------------------------
		|// Если не СтавкаПоПериодуРегистрации - старый метод
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Налоги.Налог				КАК Налог,
		|	Налоги.Период				КАК Период
		|ПОМЕСТИТЬ ВТДатаИзмененияПределВидРасчетаШкала	
		|ИЗ РегистрСведений.СведенияОВзносахВФонды КАК Налоги
		|
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыРасч.Налог				КАК Налог,
		|	ВидыРасч.Период				КАК Период
		|ИЗ РегистрСведений.ВидыРасчетовВзносовВФонды КАК ВидыРасч
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодРегистрации) КАК ВРВзносыВФонды
		|ПО ВидыРасч.Налог = ВРВзносыВФонды.Налог
		|ГДЕ НЕ ВРВзносыВФонды.ВидРасчета.СтавкаПоПериодуРегистрации 
		|
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШкалаСтавокНалогов.Налог	КАК Налог,
		|	ШкалаСтавокНалогов.Период	КАК Период
		|ИЗ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаСтавокНалогов
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодРегистрации) КАК ВРВзносыВФонды
		|ПО ШкалаСтавокНалогов.Налог = ВРВзносыВФонды.Налог
		|ГДЕ НЕ ВРВзносыВФонды.ВидРасчета.СтавкаПоПериодуРегистрации 
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТДатаИзмененияПределВидРасчетаШкала = "ВТДатаИзмененияПределВидРасчетаШкала";
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДатаИзмененияПределВидРасчетаШкала";
		
		//	ВТНалогНачалоКонец
		
		//	Описание:
		// 		Определить периоды когда параметры налога не изменялись: Налог (Начало, Конец)   
		//
		ТекстЗапроса = "
		|//--------------------------------------------------
		|// Если не СтавкаПоПериодуРегистрации - старый метод
		|ВЫБРАТЬ
		|	ДанныеОНалогах.Налог										КАК Налог,
		|	ДанныеОНалогах.Период										КАК ПериодНачало,
		|	МИНИМУМ( ДОБАВИТЬКДАТЕ( Окончание.Период, СЕКУНДА, -1 ) )	КАК ПериодКонец
		|ПОМЕСТИТЬ ВТНалогНачалоКонец	
		|ИЗ	" + ТекстЗапросаВТДатаИзмененияПределВидРасчетаШкала + " КАК ДанныеОНалогах
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДатаИзмененияПределВидРасчетаШкала + " КАК Окончание
		|ПО    Окончание.Налог = ДанныеОНалогах.Налог
		|	И	Окончание.Период > ДанныеОНалогах.Период
		|		
		|СГРУППИРОВАТЬ ПО
		|	ДанныеОНалогах.Налог,
		|	ДанныеОНалогах.Период
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТНалогНачалоКонец = "ВТНалогНачалоКонец";
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТНалогНачалоКонец";
		
		//	Описание:
		// 		Определить периоды когда параметры налогов не изменялись + сами параметры: 
		//		Налог+Параметры (Начало, Конец)   
		//
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НалогиПоПериодам.Налог			КАК Налог,
		|	НалогиПоПериодам.ПериодНачало	КАК ПериодНачало,
		|	НалогиПоПериодам.ПериодКонец	КАК ПериодКонец,    // тут может быть NULL
		|
		|	ДанныеОПределахВзносов.Предел	КАК Предел,
		|
		|	ВидыРасчетов.ВидРасчета			КАК ВидРасчета,
		|	ВидыРасчетов.ВидРасчета.СпособРасчетаПоШкале КАК СпособРасчетаПоШкале,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаПоШкале.ПоШкале) КАК ПрогрессивнаяШкала,
		|
		|	ВЫБОР	КОГДА	ВидыРасчетов.ВидРасчета.СпособРасчетаПоШкале = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаПоШкале.ПоШкале) 
		|   			ТОГДА	NULL
		|   		ИНАЧЕ 		Шкала.НомерПорога 
		|   КОНЕЦ							КАК НомерПорога      // только для прогресивной шкалы
		|
		|ПОМЕСТИТЬ ВТПараметрыНалоговНачалоКонец	
		|ИЗ (
		|	ВЫБРАТЬ
		|		Налоги.Налог						КАК Налог,
		|		Налоги.ПериодНачало					КАК ПериодНачало,
		|		Налоги.ПериодКонец					КАК ПериодКонец,
		|		ШкалаПериодОрганизация.Организация	КАК Организация,
		|		МАКСИМУМ(Сведения.Период)			КАК ПериодПределВзносав,
		|		МАКСИМУМ(ВидыРасчетов.Период)		КАК ПериодВидРасчета,
		|		МАКСИМУМ(ШкалаПериодОрганизация.Период)	КАК ПериодШкалаСтавок
		|	ИЗ	" + ТекстЗапросаВТНалогНачалоКонец + " КАК Налоги
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВзносахВФонды КАК Сведения
		|	ПО		Налоги.Налог			=	Сведения.Налог
		|		И	(Налоги.ПериодКонец		>=	Сведения.Период 
		|		ИЛИ	Налоги.ПериодКонец		Есть NULL)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыРасчетовВзносовВФонды КАК ВидыРасчетов
		|	ПО		Налоги.Налог			=	ВидыРасчетов.Налог
		|		И	(Налоги.ПериодКонец		>=	ВидыРасчетов.Период 
		|		ИЛИ	Налоги.ПериодКонец		Есть NULL)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ 
		|			ШкалаСтавок.Налог	КАК Налог,
		|			ШкалаСтавок.Период	КАК Период,
		|			МАКСИМУМ(ШкалаСтавок.Организация)	КАК Организация
		|		ИЗ (
		|			ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ШкалаСтавокНалогов.Налог	КАК Налог,
		|				ШкалаСтавокНалогов.Период	КАК Период
		|			ИЗ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаСтавокНалогов
		|			ГДЕ (ШкалаСтавокНалогов.Организация = (&парамОрганизация) ИЛИ ШкалаСтавокНалогов.Организация =  ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|		) КАК ШкалаСтавокПериод
		|					   	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаСтавок	
		|		ПО		ШкалаСтавокПериод.Налог = ШкалаСтавок.Налог	   	
		|			И	ШкалаСтавокПериод.Период = ШкалаСтавок.Период
		|			И	(ШкалаСтавок.Организация = (&парамОрганизация) ИЛИ ШкалаСтавок.Организация =  ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|							
		|		СГРУППИРОВАТЬ ПО
		|			ШкалаСтавок.Налог,
		|			ШкалаСтавок.Период
		|	) КАК ШкалаПериодОрганизация
		|	ПО		Налоги.Налог = ШкалаПериодОрганизация.Налог
		|		И	(Налоги.ПериодКонец >=	ШкалаПериодОрганизация.Период 
		|		ИЛИ	Налоги.ПериодКонец Есть NULL)
		|
		|	СГРУППИРОВАТЬ ПО
		|		Налоги.Налог,
		|		Налоги.ПериодНачало,
		|		Налоги.ПериодКонец,
		|		ШкалаПериодОрганизация.Организация
	    |) КАК НалогиПоПериодам
	    |
	    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВзносахВФонды КАК ДанныеОПределахВзносов
	    |ПО		НалогиПоПериодам.Налог					= ДанныеОПределахВзносов.Налог
	    |	И	НалогиПоПериодам.ПериодПределВзносав	= ДанныеОПределахВзносов.Период 
	    |
	    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыРасчетовВзносовВФонды КАК ВидыРасчетов
	    |ПО		НалогиПоПериодам.Налог				= ВидыРасчетов.Налог
	    |	И	НалогиПоПериодам.ПериодВидРасчета	= ВидыРасчетов.Период 
	    |
	    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК Шкала
	    |ПО		НалогиПоПериодам.Налог				= Шкала.Налог
	    |	И	НалогиПоПериодам.ПериодШкалаСтавок	= Шкала.Период 
		|	И	НалогиПоПериодам.Организация =  Шкала.Организация
	    |
	    |
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТВТПараметрыНалоговНачалоКонец = "ВТПараметрыНалоговНачалоКонец";
		
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПараметрыНалоговНачалоКонец";
	
	//	ВТОсновная
	Если Истина Тогда
		//	Описание:
		// 		
		//
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Истина			КАК Авторасчет,
		|	РаботникиПоПериодам.Сотрудник			КАК Сотрудник,
		|	РаботникиПоПериодам.ДатаНачала 			КАК БазовыйПериодНачало,
		|	РаботникиПоПериодам.ДатаОкончания 		КАК БазовыйПериодКонец,
		|	ВзносыРаботников.Налог					КАК Налог,
		|
		|	ПараметрыНалогов.ВидРасчета				КАК ВидРасчета,
		|	ПараметрыНалогов.НомерПорога			КАК НомерПорога,
		|	ПараметрыНалогов.Предел					КАК Предел,
		|
		|
		|
		|	ВЫБОР	КОГДА		РаботникиПоПериодам.ДатаНачала >= ВзносыРаботников.ДатаНачала		
		|					И	РаботникиПоПериодам.ДатаНачала >= ПараметрыНалогов.ПериодНачало
		|				ТОГДА	РаботникиПоПериодам.ДатаНачала
		|			КОГДА		ВзносыРаботников.ДатаНачала >= РаботникиПоПериодам.ДатаНачала		
		|					И	ВзносыРаботников.ДатаНачала >= ПараметрыНалогов.ПериодНачало
		|				ТОГДА	ВзносыРаботников.ДатаНачала
		|			КОГДА		ПараметрыНалогов.ПериодНачало >= РаботникиПоПериодам.ДатаНачала	
		|					И	ПараметрыНалогов.ПериодНачало >= ВзносыРаботников.ДатаНачала
		|				ТОГДА	ПараметрыНалогов.ПериодНачало
		|	КОНЕЦ										КАК ДатаНачала,
		|
		|	ВЫБОР	КОГДА		РаботникиПоПериодам.ДатаОкончания <= ВзносыРаботников.ДатаОкончания		
		|					И	(РаботникиПоПериодам.ДатаОкончания <= ПараметрыНалогов.ПериодКонец	ИЛИ ПараметрыНалогов.ПериодКонец ЕСТЬ NULL )
		|				ТОГДА	РаботникиПоПериодам.ДатаОкончания
		|			КОГДА		ВзносыРаботников.ДатаОкончания <= РаботникиПоПериодам.ДатаОкончания		
		|					И	(ВзносыРаботников.ДатаОкончания <= ПараметрыНалогов.ПериодКонец	ИЛИ ПараметрыНалогов.ПериодКонец ЕСТЬ NULL )
		|				ТОГДА	ВзносыРаботников.ДатаОкончания
		|			КОГДА		ПараметрыНалогов.ПериодКонец <= РаботникиПоПериодам.ДатаОкончания	
		|					И	ПараметрыНалогов.ПериодКонец <= ВзносыРаботников.ДатаОкончания
		|				ТОГДА	ПараметрыНалогов.ПериодКонец
		|	КОНЕЦ										КАК ДатаОкончания,
		|
		|	ВзносыРаботников.ДатаНачала		КАК ВзносыРаботниковДатаНачала,
		|	ВзносыРаботников.ДатаОкончания	КАК ВзносыРаботниковДатаОкончания,
		|	ПараметрыНалогов.ПериодНачало   КАК ПараметрыНалоговПериодНачало,
		|	ПараметрыНалогов.ПериодКонец	КАК ПараметрыНалоговПериодКонец
		|
		|ПОМЕСТИТЬ ВТОсновная	
		|ИЗ	" + ТекстЗапросаВТРаботникиПоПериодам + " КАК РаботникиПоПериодам
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТВзносыРаботников + " КАК ВзносыРаботников
		|ПО		РаботникиПоПериодам.Сотрудник =	ВзносыРаботников.Сотрудник
		|	И ( РаботникиПоПериодам.ДатаНачала <=	ВзносыРаботников.ДатаОкончания ИЛИ	ВзносыРаботников.ДатаОкончания ЕСТЬ NULL )
		|	И	ВзносыРаботников.ДатаНачала <= РаботникиПоПериодам.ДатаОкончания 
		|	            
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТВТПараметрыНалоговНачалоКонец + " КАК ПараметрыНалогов
		|	ПО	ВзносыРаботников.Налог = ПараметрыНалогов.Налог
		|	И ( РаботникиПоПериодам.ДатаНачала <= ПараметрыНалогов.ПериодКонец	ИЛИ	ПараметрыНалогов.ПериодКонец ЕСТЬ NULL )
		|	И	ПараметрыНалогов.ПериодНачало <= РаботникиПоПериодам.ДатаОкончания 
		|	И ( ВзносыРаботников.ДатаНачала <= ПараметрыНалогов.ПериодКонец	ИЛИ	ПараметрыНалогов.ПериодКонец ЕСТЬ NULL )
		|	И ( ПараметрыНалогов.ПериодНачало <= ВзносыРаботников.ДатаОкончания ИЛИ	ВзносыРаботников.ДатаОкончания ЕСТЬ NULL)
		|	            
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТВзносыРаботников = "ВТОсновная";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТОсновная";
	
	
	НужноРасчитыватьКоэффициент = Ложь;
	Если Регистратор.Метаданные().Имя = "НачислениеЗарплатыРаботникамОрганизаций" Тогда
        // проверим есть ли в таблице несоответствие базового периода и периода изменения ставки
		// если есть, то надо будет провести еще расчет коэффициента
		//
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Основной.Сотрудник,
		|	Основной.БазовыйПериодНачало,
		|	Основной.БазовыйПериодКонец,
		|	Основной.Налог,
		|	Основной.ВидРасчета,
		|	Основной.НомерПорога,
		|	Основной.Предел,
		|	Основной.ДатаНачала,
		|	Основной.ДатаОкончания
		|ИЗ	ВТОсновная КАК Основной
		|
		|ГДЕ Основной.БазовыйПериодНачало <> Основной.ДатаНачала	            
		|	 ИЛИ Основной.БазовыйПериодКонец <> Основной.ДатаОкончания           
		|";
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НужноРасчитыватьКоэффициент = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НужноРасчитыватьКоэффициент Тогда
		
		// ВТНорма	
		Если Истина Тогда
			//	Описание:
			// 		Норма времени по периодам минус норма времени невыходов 
			//		Невыходы - виды расчеты, которые виляют на расчет времени и не включены в базу взноса
			//		Например больничный для безработицы это невыход, но для пенсионного вкрлючается в норму отработанного времени для получения пропорции
			//
			ТекстЗапроса = "
			|ВЫБРАТЬ 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ДатаНачалаСтавки, 
			|	Основной.ДатаОкончанияСтавки, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания,
			|	СУММА(ВЫБОР КОГДА НормыПоСотруднику.Сотрудник ЕСТЬ NULL 
			|				ТОГДА НормыПоГрафику.ОсновноеЗначение 
			|				ИНАЧЕ НормыПоСотруднику.ОсновноеЗначение 
			|	КОНЕЦ) КАК Дней
			|ПОМЕСТИТЬ ВТНорма	
			|ИЗ (
			|	ВЫБРАТЬ 
			|		Основной.Сотрудник					Как Сотрудник, 
			|		Основной.ВидРасчета					Как ВидРасчета, 
			|		Основной.БазовыйПериодНачало		Как БазовыйПериодНачало, 
			|		Основной.БазовыйПериодКонец			Как БазовыйПериодКонец, 
			|		Основной.ДатаНачала					Как ДатаНачалаСтавки, 
			|		Основной.ДатаОкончания				Как ДатаОкончанияСтавки, 
			|		ГрафикРаботника.ГрафикРаботы		Как ГрафикРаботы,
			|		ВЫБОР КОГДА Работники.ДатаНачала <= Основной.ДатаНачала ТОГДА Основной.ДатаНачала ИНАЧЕ Работники.ДатаНачала КОНЕЦ	Как ДатаНачала, 
			|		ВЫБОР КОГДА Работники.ДатаОкончания ЕСТЬ NULL ИЛИ Основной.ДатаОкончания <= Работники.ДатаОкончания ТОГДА Основной.ДатаОкончания ИНАЧЕ Работники.ДатаОкончания КОНЕЦ	Как ДатаОкончания 
			|		ИЗ ВТОсновная Как Основной
			|
			|		// если график менялся в середине месяца
			|		ЛЕВОЕ СОЕДИНЕНИЕ (
			|			ВЫБРАТЬ 
			|				РаботникиОрганизаций.Сотрудник,
			|				РаботникиОрганизаций.Период КАК ДатаНачала,
			|				МИНИМУМ(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций1.Период,День,-1)) КАК ДатаОкончания
			|			ИЗ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций1
			|			ПО	РаботникиОрганизаций1.ЗанимаемыхСтавок > 0
			|			И	РаботникиОрганизаций1.Сотрудник = РаботникиОрганизаций.Сотрудник
			|			И	РаботникиОрганизаций.Период < РаботникиОрганизаций1.Период
			|			ГДЕ	РаботникиОрганизаций.ЗанимаемыхСтавок > 0
			|			СГРУППИРОВАТЬ ПО 
			|				РаботникиОрганизаций.Сотрудник,
			|				РаботникиОрганизаций.Период
			|		)КАК Работники
			|		ПО		Основной.Сотрудник	= Работники.Сотрудник 
			|			И	Работники.ДатаНачала <= Основной.ДатаОкончания
			|			И	(Основной.ДатаНачала <= Работники.ДатаОкончания ИЛИ Работники.ДатаОкончания ЕСТЬ NULL)
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ГрафикРаботника
			|		ПО		Основной.Сотрудник	= ГрафикРаботника.Сотрудник 
			|			И	Работники.ДатаНачала = ГрафикРаботника.Период
			|
			|		ГДЕ Основной.БазовыйПериодНачало <> Основной.ДатаНачала
			|		ИЛИ Основной.БазовыйПериодКонец <> Основной.ДатаОкончания
			|) КАК Основной 
			|
			|// График работы
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК НормыПоГрафику
			|ПО		Основной.ГрафикРаботы	= НормыПоГрафику.ГрафикРаботы 
			|	И	Основной.ДатаНачала <= НормыПоГрафику.Дата
			|	И	Основной.ДатаОкончания >= НормыПоГрафику.Дата
			|	И	НормыПоГрафику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
			|
			|// Индивидуальный график
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК НормыПоСотруднику
			|ПО		Основной.Сотрудник	= НормыПоСотруднику.ГрафикРаботы 
			|	И	Основной.Сотрудник	= НормыПоСотруднику.Сотрудник 
			|	И	НормыПоСотруднику.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
			|	И	НормыПоГрафику.Дата = НормыПоСотруднику.Дата
			|	И	Основной.ДатаНачала <= НормыПоСотруднику.Дата
			|	И	Основной.ДатаОкончания >= НормыПоСотруднику.Дата
			|	И	НормыПоСотруднику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
			|
			|СГРУППИРОВАТЬ ПО 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ДатаНачалаСтавки, 
			|	Основной.ДатаОкончанияСтавки, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания
			|
			|
			|// невыходы нормы с отрицательными значениями
			|ОБЪЕДИНИТЬ ВСЕ			
			|ВЫБРАТЬ 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ДатаНачалаСтавки, 
			|	Основной.ДатаОкончанияСтавки, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания,
			|	СУММА(ВЫБОР КОГДА НормыПоСотруднику.Сотрудник ЕСТЬ NULL 
			|				ТОГДА - НормыПоГрафику.ОсновноеЗначение 
			|				ИНАЧЕ - НормыПоСотруднику.ОсновноеЗначение 
			|	КОНЕЦ) КАК Дней
			|
			|ИЗ (
			|ВЫБРАТЬ 
			|	Основной.Сотрудник					Как Сотрудник, 
			|	Основной.ВидРасчета					Как ВидРасчета, 
			|	Основной.БазовыйПериодНачало		Как БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец			Как БазовыйПериодКонец, 
			|	Основной.ДатаНачала					Как ДатаНачалаСтавки, 
			|	Основной.ДатаОкончания				Как ДатаОкончанияСтавки, 
			|	БазаИзНачислений.ГрафикРаботы		Как ГрафикРаботы, 
			|	БазаИзНачислений.ВидРасчета			Как ВидРасчета1, 
			|	МИНИМУМ(ВЫБОР КОГДА Основной.ДатаНачала	<= БазаИзНачислений.ПериодДействияНачало 
			|			ТОГДА БазаИзНачислений.ПериодДействияНачало 
			|			ИНАЧЕ Основной.ДатаНачала 
			|	КОНЕЦ)		Как ДатаНачала, 
			|	МАКСИМУМ(ВЫБОР КОГДА Основной.ДатаОкончания <= БазаИзНачислений.ПериодДействияКонец 
			|		ТОГДА Основной.ДатаОкончания 
			|		ИНАЧЕ БазаИзНачислений.ПериодДействияКонец 
			|	КОНЕЦ)	Как ДатаОкончания 
			|
			|ИЗ ВТОсновная Как Основной
			|
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика() КАК БазаИзНачислений
			|ПО		Основной.Сотрудник	= БазаИзНачислений.Назначение 
			|	И	БазаИзНачислений.ПериодДействияНачало <= Основной.ДатаОкончания
			|	И	Основной.ДатаНачала <= БазаИзНачислений.ПериодДействияКонец
			|	И	БазаИзНачислений.ПериодРегистрации <= &ПериодРегистрации
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ВзносыВФонды.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
			|	И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			|
			|ГДЕ	БазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL
			|	И	БазаИзНачислений.ВидРасчета.ЗачетНормыВремени
			|	И	(Основной.БазовыйПериодНачало <> Основной.ДатаНачала
			|	ИЛИ Основной.БазовыйПериодКонец <> Основной.ДатаОкончания)
			|
			|СГРУППИРОВАТЬ ПО 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания, 
			|	БазаИзНачислений.ГрафикРаботы, 
			|	БазаИзНачислений.ВидРасчета 
			|) КАК Основной 
			|
			|// График работы
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК НормыПоГрафику
			|ПО		Основной.ГрафикРаботы	= НормыПоГрафику.ГрафикРаботы 
			|	И	Основной.ДатаНачала <= НормыПоГрафику.Дата
			|	И	Основной.ДатаОкончания >= НормыПоГрафику.Дата
			|	И	НормыПоГрафику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
			|
			|// Индивидуальный график
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК НормыПоСотруднику
			|ПО		Основной.Сотрудник	= НормыПоСотруднику.ГрафикРаботы 
			|	И	Основной.Сотрудник	= НормыПоСотруднику.Сотрудник 
			|	И	НормыПоСотруднику.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
			|	И	НормыПоГрафику.Дата = НормыПоСотруднику.Дата
			|	И	Основной.ДатаНачала <= НормыПоСотруднику.Дата
			|	И	Основной.ДатаОкончания >= НормыПоСотруднику.Дата
			|	И	НормыПоСотруднику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
			|
			|СГРУППИРОВАТЬ ПО 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ДатаНачалаСтавки, 
			|	Основной.ДатаОкончанияСтавки, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТНорма";
		
		// ВТПолнаяНорма	
		Если Истина Тогда
			//	Описание:
			// 		Норма времени по периодам минус норма времени невыходов 
			//		Невыходы - виды расчеты, которые виляют на расчет времени и не включены в базу взноса
			//		Например больничный для безработицы это невыход, но для пенсионного вкрлючается в норму отработанного времени для получения пропорции
			//
			ТекстЗапроса = "
			|ВЫБРАТЬ 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания,
			|	СУММА(ВЫБОР КОГДА НормыПоСотруднику.Сотрудник ЕСТЬ NULL 
			|				ТОГДА НормыПоГрафику.ОсновноеЗначение 
			|				ИНАЧЕ НормыПоСотруднику.ОсновноеЗначение 
			|	КОНЕЦ) КАК Дней
			|ПОМЕСТИТЬ ВТПолнаяНорма	
			|ИЗ (
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ 
			|		Основной.Сотрудник					Как Сотрудник, 
			|		Основной.ВидРасчета					Как ВидРасчета, 
			|		Основной.БазовыйПериодНачало		Как БазовыйПериодНачало, 
			|		Основной.БазовыйПериодКонец			Как БазовыйПериодКонец, 
			|		ГрафикРаботника.ГрафикРаботы		Как ГрафикРаботы,
			|		ВЫБОР КОГДА Работники.ДатаНачала <= Основной.БазовыйПериодНачало ТОГДА Основной.БазовыйПериодНачало ИНАЧЕ Работники.ДатаНачала КОНЕЦ	Как ДатаНачала, 
			|		ВЫБОР КОГДА Работники.ДатаОкончания ЕСТЬ NULL ИЛИ Основной.БазовыйПериодКонец <= Работники.ДатаОкончания ТОГДА Основной.БазовыйПериодКонец ИНАЧЕ Работники.ДатаОкончания КОНЕЦ	Как ДатаОкончания 
			|		ИЗ ВТОсновная Как Основной
			|
			|		// если график менялся в середине месяца
			|		ЛЕВОЕ СОЕДИНЕНИЕ (
			|			ВЫБРАТЬ 
			|				РаботникиОрганизаций.Сотрудник,
			|				РаботникиОрганизаций.Период КАК ДатаНачала,
			|				МИНИМУМ(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций1.Период,День,-1)) КАК ДатаОкончания
			|			ИЗ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций1
			|			ПО	РаботникиОрганизаций1.ЗанимаемыхСтавок > 0
			|			И	РаботникиОрганизаций1.Сотрудник = РаботникиОрганизаций.Сотрудник
			|			И	РаботникиОрганизаций.Период < РаботникиОрганизаций1.Период
			|			ГДЕ	РаботникиОрганизаций.ЗанимаемыхСтавок > 0
			|			СГРУППИРОВАТЬ ПО 
			|				РаботникиОрганизаций.Сотрудник,
			|				РаботникиОрганизаций.Период
			|		)КАК Работники
			|		ПО		Основной.Сотрудник	= Работники.Сотрудник 
			|			И	Работники.ДатаНачала <= Основной.БазовыйПериодКонец
			|			И	(Основной.БазовыйПериодНачало <= Работники.ДатаОкончания ИЛИ Работники.ДатаОкончания ЕСТЬ NULL)
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ГрафикРаботника
			|		ПО		Основной.Сотрудник	= ГрафикРаботника.Сотрудник 
			|			И	Работники.ДатаНачала = ГрафикРаботника.Период
			|
			|) КАК Основной 
			|
			|// График работы
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК НормыПоГрафику
			|ПО		Основной.ГрафикРаботы	= НормыПоГрафику.ГрафикРаботы 
			|	И	Основной.ДатаНачала <= НормыПоГрафику.Дата
			|	И	Основной.ДатаОкончания >= НормыПоГрафику.Дата
			|	И	НормыПоГрафику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
			|
			|// Индивидуальный график
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК НормыПоСотруднику
			|ПО		Основной.Сотрудник	= НормыПоСотруднику.ГрафикРаботы 
			|	И	Основной.Сотрудник	= НормыПоСотруднику.Сотрудник 
			|	И	НормыПоСотруднику.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
			|	И	НормыПоГрафику.Дата = НормыПоСотруднику.Дата
			|	И	Основной.ДатаНачала <= НормыПоСотруднику.Дата
			|	И	Основной.ДатаОкончания >= НормыПоСотруднику.Дата
			|	И	НормыПоСотруднику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
			|
			|СГРУППИРОВАТЬ ПО 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания
			|
			|
			|// невыходы нормы с отрицательными значениями
			|ОБЪЕДИНИТЬ ВСЕ			
			|ВЫБРАТЬ 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания,
			|	СУММА(ВЫБОР КОГДА НормыПоСотруднику.Сотрудник ЕСТЬ NULL 
			|				ТОГДА - НормыПоГрафику.ОсновноеЗначение 
			|				ИНАЧЕ - НормыПоСотруднику.ОсновноеЗначение 
			|	КОНЕЦ) КАК Дней
			|
			|ИЗ (
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Основной.Сотрудник					Как Сотрудник, 
			|	Основной.ВидРасчета					Как ВидРасчета, 
			|	Основной.БазовыйПериодНачало		Как БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец			Как БазовыйПериодКонец, 
			|	БазаИзНачислений.ГрафикРаботы		Как ГрафикРаботы, 
			|	БазаИзНачислений.ВидРасчета			Как ВидРасчета1, 
			|	ВЫБОР КОГДА Основной.БазовыйПериодНачало	<= БазаИзНачислений.ПериодДействияНачало 
			|			ТОГДА БазаИзНачислений.ПериодДействияНачало 
			|			ИНАЧЕ Основной.БазовыйПериодНачало 
			|	КОНЕЦ		Как ДатаНачала, 
			|	ВЫБОР КОГДА Основной.БазовыйПериодКонец <= БазаИзНачислений.ПериодДействияКонец 
			|		ТОГДА Основной.БазовыйПериодКонец 
			|		ИНАЧЕ БазаИзНачислений.ПериодДействияКонец 
			|	КОНЕЦ	Как ДатаОкончания 
			|
			|ИЗ ВТОсновная Как Основной
			|
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика() КАК БазаИзНачислений
			|ПО		Основной.Сотрудник	= БазаИзНачислений.Назначение 
			|	И	БазаИзНачислений.ПериодДействияНачало <= Основной.БазовыйПериодКонец
			|	И	Основной.БазовыйПериодНачало <= БазаИзНачислений.ПериодДействияКонец
			|	И	БазаИзНачислений.ПериодРегистрации <= &ПериодРегистрации
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ВзносыВФонды.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
			|	И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			|
			|ГДЕ	БазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL
			|	И	БазаИзНачислений.ВидРасчета.ЗачетНормыВремени
			|
			|СГРУППИРОВАТЬ ПО 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания, 
			|	БазаИзНачислений.ГрафикРаботы, 
			|	БазаИзНачислений.ВидРасчета,
			|	ВЫБОР КОГДА Основной.БазовыйПериодНачало	<= БазаИзНачислений.ПериодДействияНачало 
			|			ТОГДА БазаИзНачислений.ПериодДействияНачало 
			|			ИНАЧЕ Основной.БазовыйПериодНачало 
			|	КОНЕЦ, 
			|	ВЫБОР КОГДА Основной.БазовыйПериодКонец <= БазаИзНачислений.ПериодДействияКонец 
			|		ТОГДА Основной.БазовыйПериодКонец 
			|		ИНАЧЕ БазаИзНачислений.ПериодДействияКонец 
			|	КОНЕЦ
			|) КАК Основной 
			|
			|// График работы
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК НормыПоГрафику
			|ПО		Основной.ГрафикРаботы	= НормыПоГрафику.ГрафикРаботы 
			|	И	Основной.ДатаНачала <= НормыПоГрафику.Дата
			|	И	Основной.ДатаОкончания >= НормыПоГрафику.Дата
			|	И	НормыПоГрафику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
			|
			|// Индивидуальный график
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК НормыПоСотруднику
			|ПО		Основной.Сотрудник	= НормыПоСотруднику.ГрафикРаботы 
			|	И	Основной.Сотрудник	= НормыПоСотруднику.Сотрудник 
			|	И	НормыПоСотруднику.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
			|	И	НормыПоГрафику.Дата = НормыПоСотруднику.Дата
			|	И	Основной.ДатаНачала <= НормыПоСотруднику.Дата
			|	И	Основной.ДатаОкончания >= НормыПоСотруднику.Дата
			|	И	НормыПоСотруднику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
			|
			|СГРУППИРОВАТЬ ПО 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПолнаяНорма";

		// ВТНормаВремени	
		Если Истина Тогда
			//	Описание:
			// 		Получаем реквизиты Дней и ДнейВсего, для расчета пропорции по норме времени при изменении ставки
			//
			ТекстЗапроса = "
			|ВЫБРАТЬ 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания, 
			|	Основной.Дней КАК Дней,
			|	СуммаОсновной.Дней КАК ДнейВсего
			|ПОМЕСТИТЬ ВТНормаВремени	
			|ИЗ ( 
			|	ВЫБРАТЬ 
			|		Норма.Сотрудник, 
			|		Норма.ВидРасчета, 
			|		Норма.БазовыйПериодНачало, 
			|		Норма.БазовыйПериодКонец, 
			|		Норма.ДатаНачалаСтавки		КАК ДатаНачала, 
			|		Норма.ДатаОкончанияСтавки	КАК ДатаОкончания, 
			|		СУММА(Норма.Дней) КАК Дней
			|		ИЗ ВТНорма Как Норма
			|	СГРУППИРОВАТЬ ПО 
			|		Норма.Сотрудник, 
			|		Норма.ВидРасчета, 
			|		Норма.БазовыйПериодНачало, 
			|		Норма.БазовыйПериодКонец, 
			|		Норма.ДатаНачалаСтавки, 
			|		Норма.ДатаОкончанияСтавки 
			|) КАК Основной 
			| 
			|ЛЕВОЕ СОЕДИНЕНИЕ ( 
			|	ВЫБРАТЬ 
			|		Норма.Сотрудник, 
			|		Норма.ВидРасчета, 
			|		Норма.БазовыйПериодНачало, 
			|		Норма.БазовыйПериодКонец, 
			|		СУММА(Норма.Дней) КАК Дней
			|		ИЗ ВТПолнаяНорма Как Норма
			|	СГРУППИРОВАТЬ ПО 
			|		Норма.Сотрудник, 
			|		Норма.ВидРасчета, 
			|		Норма.БазовыйПериодНачало, 
			|		Норма.БазовыйПериодКонец 
			|) КАК СуммаОсновной 
			|ПО   СуммаОсновной.Сотрудник = Основной.Сотрудник 
			|	И	СуммаОсновной.ВидРасчета = Основной.ВидРасчета 
			|	И	СуммаОсновной.БазовыйПериодНачало = Основной.БазовыйПериодНачало 
			|	И	СуммаОсновной.БазовыйПериодКонец = Основной.БазовыйПериодКонец  
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТНормаВремени";
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Основной.Авторасчет,
		|	Основной.Сотрудник,
		|	Подразделения.ПодразделениеОрганизации,
		|	Основной.БазовыйПериодНачало,
		|	Основной.БазовыйПериодКонец,
		|	Основной.Налог,
		|	Основной.ВидРасчета,
		|	Основной.НомерПорога,
		|	Основной.Предел,
		|	Основной.ДатаНачала,
		|	Основной.ДатаОкончания,
		|	НормаВремени.Дней КАК ОтработаноДней,
		|	НормаВремени.ДнейВсего КАК ОтработаноДнейВсего
		|ИЗ	ВТОсновная КАК Основной
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремени КАК НормаВремени
		|ПО		Основной.Сотрудник = НормаВремени.Сотрудник
		|	И	Основной.ВидРасчета = НормаВремени.ВидРасчета 
		|	И	Основной.БазовыйПериодНачало = НормаВремени.БазовыйПериодНачало 
		|	И	Основной.БазовыйПериодКонец = НормаВремени.БазовыйПериодКонец 
		|	И	Основной.ДатаНачала = НормаВремени.ДатаНачала 
		|	И	Основной.ДатаОкончания = НормаВремени.ДатаОкончания 
		|	            
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТПодразделения КАК Подразделения
		|ПО		Основной.Сотрудник = Подразделения.Сотрудник
		|	            
		|УПОРЯДОЧИТЬ ПО	            
		|	Основной.Сотрудник,            
		|	НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ),            
		|	Основной.Налог,            
		|	Основной.БазовыйПериодНачало,            
		|	Основной.ДатаНачала,            
		|	НомерПорога.Порядок           
		|";
		Запрос.Текст = ТекстЗапроса;
		
	Иначе	
		
		// точно не надо получать данные графиков в середине месяца
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Основной.Авторасчет,
		|	Основной.Сотрудник,
		|	Подразделения.ПодразделениеОрганизации,
		|	Основной.ДатаНачала	КАК ПериодВзаиморасчетов,
		|	Основной.БазовыйПериодНачало,
		|	Основной.БазовыйПериодКонец,
		|	Основной.Налог,
		|	Основной.ВидРасчета,
		|	Основной.НомерПорога,
		|	Основной.Предел,
		|	Основной.ДатаНачала,
		|	Основной.ДатаОкончания
		|ИЗ	ВТОсновная КАК Основной
		|	            
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТПодразделения КАК Подразделения
		|ПО		Основной.Сотрудник = Подразделения.Сотрудник
		|	            
		|УПОРЯДОЧИТЬ ПО	            
		|	Основной.Сотрудник,            
		|	НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ),            
		|	Основной.Налог,            
		|	Основной.БазовыйПериодНачало,            
		|	Основной.ДатаНачала,            
		|	НомерПорога.Порядок           
		|";
		Запрос.Текст = ТекстЗапроса;
		
	КонецЕсли;
	
	
	ВыборкаВзносы = Запрос.Выполнить().Выбрать();
	Если ЭтоВзносы Тогда
		СпособВзносы = Перечисления.СпособыРасчетаОплатыТруда.Взносы;
	Иначе
		СпособВзносы = Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ;
	КонецЕсли;

	Пока ВыборкаВзносы.Следующий() Цикл
		
		Если ВыборкаВзносы.ВидРасчета.СпособРасчета <> СпособВзносы Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Взносы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаВзносы);
		ОпределитьКодКатегорииЗЛ(НоваяСтрока);
		ОпределитьТипНачисления(НоваяСтрока, Регистратор);
		
	КонецЦикла;

КонецПроцедуры // АвтозаполнениеВзносы

Процедура АвтозаполнениеНДФЛ( Регистратор, НДФЛ, Сотрудники, ПоРегистратору = Ложь, СНачалаГода = Ложь, ГодЗаполнения = 0 ) Экспорт
	
	Если СНачалаГода Тогда
		мПериодРегистрации = Мин(Регистратор.ПериодРегистрации, Дата(ГодЗаполнения,12,1));
	ИначеЕсли Регистратор.Метаданные().реквизиты.Найти("ПерерассчитываемыйДокумент")= Неопределено  Тогда
		мПериодРегистрации = Регистратор.ПериодРегистрации;
	Иначе
		мПериодРегистрации = ?(ЗначениеЗаполнено(Регистратор.ПерерассчитываемыйДокумент), Регистратор.ПерерассчитываемыйДокумент.ПериодРегистрации, Регистратор.ПериодРегистрации);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамРегистратор" , Регистратор);
	Запрос.УстановитьПараметр("парамОрганизация" , Регистратор.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", мПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудники"  , Сотрудники);
	
	// парамНачало - парамКонец 
	Если СНачалаГода Тогда
		
		Запрос.УстановитьПараметр("парамНачало" , НачалоГода(мПериодРегистрации) );
		Запрос.УстановитьПараметр("парамКонец"  , КонецМесяца(мПериодРегистрации) );
		
	Иначе
		
		Запрос.УстановитьПараметр("парамНачало" , мПериодРегистрации);
		Запрос.УстановитьПараметр("парамКонец"  , КонецМесяца(мПериодРегистрации));
	
	КонецЕсли;
	
	ИспользуетсяНК = ИспользуетсяНК(Регистратор.ПериодРегистрации);
	ВариантНДФЛ = ВариантыАлгоритмовРасчетаЗарплаты().РасчетНДФЛ17;
	
	// ВТРаботникиПоПериодам
	Если Истина Тогда
		
		Если ИспользуетсяНК Тогда
			ТекстНП = "ВЫБОР КОГДА Начисления.ВидРасчета.ЭтоБольничные //Больничные
					|		ИЛИ (Начисления.ВидРасчета.ЭтоОтпуск И НЕ Начисления.Сторно) //Отпускные
					|		ТОГДА Начисления.ПериодДействия
					|		ИНАЧЕ Начисления.ПериодРегистрации
					|		КОНЕЦ";
		Иначе
			ТекстНП = "Начисления.ПериодДействия";
		КонецЕсли;	
		
		
		//	Описание:
		// 		Сотрудники по которым есть зарегистрированные записи по начислениям в периодеРегистрации 
		// 		сгруппированные по периодам действия
		//
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Начисления.Сотрудник            			КАК Сотрудник,		// сотрудник определяет организацию, потому условие на организацию не требуется
		|		Начисления.ВидРасчета.ДоходНДФЛ				КАК ДоходНДФЛ,
		|		"+ТекстНП+"	КАК ПериодДействия,
		|		"+?(ИспользуетсяНК И (ВариантНДФЛ=Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ОтдельныйРасчетБазы),"МИНИМУМ(Начисления.Регистратор.Дата)		КАК ДатаДействия,","")+"
		|		МИНИМУМ(Начисления.ПериодДействияНачало)	КАК ДатаНачала,		// если принят на работу то это будет дата приема
		|		МАКСИМУМ(Начисления.ПериодДействияКонец)	КАК ДатаОкончания	// если уволился то это будет дата увольнения
		|
		|ПОМЕСТИТЬ ВТРаботникиПоПериодам	
		|	ИЗ	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
		|		ГДЕ	Начисления.ПериодРегистрации <= &парамКонец
		|		И	Начисления.ПериодРегистрации >= &парамНачало
		|		И	Начисления.Сотрудник в ( &парамСотрудники )
		|		И	Начисления.ВидРасчета.ДоходНДФЛ <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код12)
		|           " + ?(ПоРегистратору, "И	Начисления.Регистратор = &парамРегистратор", "") + "
		|
		|	СГРУППИРОВАТЬ ПО
		|		Начисления.Сотрудник,
		|		Начисления.ВидРасчета.ДоходНДФЛ,
		|		"+ТекстНП+"
		|
		|	ИНДЕКСИРОВАТЬ ПО
		|		Сотрудник,
		|		ПериодДействия,
		|		ДоходНДФЛ
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТРаботникиПоПериодам = "ВТРаботникиПоПериодам";
	КонецЕсли;
	
	// ВТГражданствоФизЛиц
	Если Истина Тогда
		//	Описание:
		// 		Сотрудники по которым есть зарегистрированные записи по начислениям в периодеРегистрации 
		// 		сгруппированные по периодам действия
		//
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ГражданствоФизЛиц.Период     КАК Период,
		|		ГражданствоФизЛиц.ФизЛицо    КАК ФизЛицо,
		|		НЕ ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентом  КАК Резидент
		|
		|ПОМЕСТИТЬ ВТГражданствоФизЛиц	
		|	ИЗ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|
		|	ГДЕ  	ГражданствоФизЛиц.Период <= &парамКонец
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТГражданствоФизЛиц = "ВТГражданствоФизЛиц";
	КонецЕсли;
	
	// ВТШахтеры
	Если Истина Тогда
		//	Описание:
		// 		Сотрудники по которым есть зарегистрированные записи по начислениям в периодеРегистрации 
		// 		сгруппированные по периодам действия
		//
		ТекстЗапроса = "
		//Смартис Лиманчук начало 15.05.2012
		//|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		//Смартис Лиманчук окончание 15.05.2012
		|		ВЫБОР КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|		ТОГДА НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, МЕСЯЦ)
		|		ИНАЧЕ РаботникиОрганизаций.Период КОНЕЦ   КАК Период,
		|		РаботникиОрганизаций.Сотрудник    КАК Сотрудник,
		|		РаботникиОрганизаций.Должность.Шахтеры  КАК Шахтер
		|
		|ПОМЕСТИТЬ ВТШахтеры	
		|	ИЗ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|
		|	ГДЕ		РаботникиОрганизаций.Сотрудник в ( &парамСотрудники )
		|	  	И	РаботникиОрганизаций.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТШахтеры = "ВТШахтеры";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТШахтеры";
	
	Если ИспользуетсяНК Тогда
		ТекстСтавка = "ИНАЧЕ Основной.ДоходНДФЛ.ВидСтавкиРезидента";
	Иначе
		ТекстСтавка = "			КОГДА ((Параметры_НеРезиденты.ФизЛицо) ЕСТЬ NULL) ИЛИ (Параметры_НеРезиденты.Резидент)
						|				ТОГДА Основной.ДоходНДФЛ.ВидСтавкиРезидента 
						|			ИНАЧЕ Основной.ДоходНДФЛ.ВидСтавкиНеРезидента";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Истина			КАК Авторасчет,
	|	Основной.Сотрудник			КАК Сотрудник,
	|	Основной.ДоходНДФЛ	    	КАК ДоходНДФЛ,
	|	Основной.НалоговыйПериод	КАК НалоговыйПериод,
	|	"+?(ИспользуетсяНК И (ВариантНДФЛ=Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ОтдельныйРасчетБазы),"ВЫБОР КОГДА Основной.ДоходНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код01) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ	КАК ЭтоЗарплата,","")+"
	|	"+?(ИспользуетсяНК И (ВариантНДФЛ=Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ОтдельныйРасчетБазы),"Основной.ДатаДействия	    	КАК ДатаДействия,","")+"
	|	Параметры_Шахтеры.Шахтер	КАК Параметры_Шахтеры_Шахтер,
	|	Основной.ДоходНДФЛ.ВидСтавкиШахтера	КАК ВидСтавкиШахтера,
	|	Основной.ДоходНДФЛ.ВидСтавкиНеРезидента	КАК ВидСтавкиНеРезидента,
	|	ВЫБОР	КОГДА ЕстьNULL(Параметры_Шахтеры.Шахтер,ЛОЖЬ)
	|	 ТОГДА Основной.ДоходНДФЛ.ВидСтавкиШахтера
	|	 ИНАЧЕ Основной.ДоходНДФЛ.ВидСтавкиУвеличенная
	|	КОНЕЦ КАК УвеличеннаяСтавка,
	|	ВЫБОР	КОГДА ЕстьNULL(Параметры_Шахтеры.Шахтер,ЛОЖЬ)
	|				ТОГДА Основной.ДоходНДФЛ.ВидСтавкиШахтера 
	|"+ТекстСтавка+"
	|          КОНЕЦ                                        КАК ВидСтавки
	|	ИЗ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			НачисленияРаботников.Сотрудник		КАК Сотрудник,
	|			НачисленияРаботников.ДоходНДФЛ	    КАК ДоходНДФЛ,
	|			НачисленияРаботников.ПериодДействия	КАК НалоговыйПериод,
	|			"+?(ИспользуетсяНК И (ВариантНДФЛ=Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ОтдельныйРасчетБазы),"МИНИМУМ(НачисленияРаботников.ДатаДействия) КАК ДатаДействия,","")+"
	|			МАКСИМУМ(ТБШахтеры.Период) 			КАК ПериодРасчетовШахтеры,
	|			МАКСИМУМ(НеРезиденты.Период) 		КАК ПериодРасчетовНеРезиденты
	|		ИЗ " + ТекстЗапросаВТРаботникиПоПериодам + " КАК НачисленияРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШахтеры + " КАК ТБШахтеры
	|       ПО		ТБШахтеры.Период <= НачисленияРаботников.ПериодДействия
	|       	И	 ТБШахтеры.Сотрудник = НачисленияРаботников.Сотрудник    
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТГражданствоФизЛиц + " КАК НеРезиденты
	|       ПО		НеРезиденты.Период <= НачисленияРаботников.ПериодДействия
	|       	И	 НеРезиденты.Физлицо = НачисленияРаботников.Сотрудник.Физлицо    
	|		СГРУППИРОВАТЬ ПО
	|			НачисленияРаботников.Сотрудник,
	|			НачисленияРаботников.ДоходНДФЛ,
	|			НачисленияРаботников.ПериодДействия
	|   ) КАК Основной
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШахтеры + " КАК Параметры_Шахтеры
	|	ПО		Основной.ПериодРасчетовШахтеры = Параметры_Шахтеры.Период
	|		И	Основной.Сотрудник =  Параметры_Шахтеры.Сотрудник
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТГражданствоФизЛиц + " КАК Параметры_НеРезиденты
	|	ПО		Основной.ПериодРасчетовНеРезиденты = Параметры_НеРезиденты.Период
	|		И	Основной.Сотрудник.Физлицо =  Параметры_НеРезиденты.Физлицо
	|
	|  "+?(ИспользуетсяНК И (ВариантНДФЛ=Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ОтдельныйРасчетБазы),"УПОРЯДОЧИТЬ ПО Сотрудник, НалоговыйПериод, ЭтоЗарплата убыв, ДатаДействия, ДоходНДФЛ.Код","")+"
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если	Выборка.ДоходНДФЛ = Null
			ИЛИ	Выборка.ДоходНДФЛ = Неопределено 
			ИЛИ	Выборка.ДоходНДФЛ = Справочники.ВидыДоходовНДФЛ.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = НДФЛ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;

КонецПроцедуры // АвтозаполнениеНДФЛ

// Рассчитывает записи из переданного набора записей
//
// Параметры:
//	ИмяРегистра				- имя регистра, чьи записи будут рассчитаны
//	НаборЗаписейРегистра	- набор записей, которые надо рассчитать
//	НаборЗаписейРасчетСреднего
//	ГоловнаяОрганизация
//	ОбособленноеПодразделение
//	ТабличнаяЧастьДокумента
//	ОднократныйРасчетСреднего	- будево. Если Истина, то при расчете выполняется 
//								  однократный расчет среднего в не зависимости от количесвта различных 
//								  категорий видов расчета в наборе записей
//  МассивИндексыСтрокТабличнойЧасти	- массив с индексами строк табличного поля, для реализации
//										  расчета по одному сотруднику	
//	Физлицо								- ссылка Справочники.ФизическиеЛица, для реализации
//										  расчета по одному сотруднику	
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьЗаписиРегистраРасчета(ИмяРегистра, 
												НаборЗаписейРегистра,
												ТабличнаяЧастьДокумента = Неопределено,
												МассивИндексыСтрокТабличнойЧасти = Неопределено,
												Сотрудники = Неопределено,
												КомментироватьРасчет = Ложь,
												ФизЛица = Неопределено) Экспорт 
												
	Организация = Справочники.Организации.ПустаяСсылка();
												
	Если НаборЗаписейРегистра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации
	ПериодРегистрации = НаборЗаписейРегистра[0].ПериодРегистрации;
	Если	ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" или
			ИмяРегистра = "ВзносыВФонды" или
			ИмяРегистра = "УдержанияРаботниковОрганизаций" 
			Тогда
	Организация = НаборЗаписейРегистра[0].Организация;
	КонецЕсли;
	
	
	Регистратор = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	ИмяПВР = Метаданные.РегистрыРасчета[ИмяРегистра].ПланВидовРасчета.Имя;

	
	// Получим максимальное число показателей			
	Если	ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" ИЛИ
		ИмяРегистра = "УдержанияРаботниковОрганизаций"      
		ИЛИ ИмяРегистра = "УправленческиеНачисления"
		ИЛИ ИмяРегистра = "УправленческиеУдержания"	Тогда
		ЗапросНаКоличествоПоказателей = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(НачисленияПоказатели.НомерСтроки),0) КАК КолВоПоказателей
		|ИЗ ПланВидовРасчета." +  ИмяПВР + ".Показатели КАК НачисленияПоказатели
		|");
		ВыборкаКоличестваПоказателей = ЗапросНаКоличествоПоказателей.Выполнить().Выбрать();		
		ВыборкаКоличестваПоказателей.Следующий();
		КоличествоПоказателей = ВыборкаКоличестваПоказателей.КолВоПоказателей;
		
	Иначе
		КоличествоПоказателей = 0;
		
	КонецЕсли;


	
	Если	ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" или
			ИмяРегистра = "ВзносыВФонды" или
			ИмяРегистра = "УдержанияРаботниковОрганизаций" или
			ИмяРегистра = "УправленческиеНачисления" или
			ИмяРегистра = "УправленческиеУдержания" Тогда
		
		// получим массив видов расчета из набора записей
		ТаблицаВидовРасчета = НаборЗаписейРегистра.Выгрузить();
		ТаблицаВидовРасчета.Свернуть("ВидРасчета");
		ВидыРасчетов = ТаблицаВидовРасчета.ВыгрузитьКолонку("ВидРасчета");
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
		Запрос.УстановитьПараметр("парамФизЛица", ФизЛица);
		
		//	ВТВидыРасчета
		Если Истина Тогда 
			//	Описание:
			// 		Таблица видов расчета
			//
			ТекстЗапросаВТ = "
			//|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РР.ВидРасчета КАК ВидРасчета
			|ПОМЕСТИТЬ ВТВидыРасчета	
			|ИЗ РегистрРасчета."+ИмяРегистра+" КАК РР
			|ГДЕ	РР.Регистратор = &парамРегистратор";
			
			Если ИмяРегистра = "УправленческиеНачисления" ИЛИ ИмяРегистра = "УправленческиеУдержания" Тогда
				ТекстЗапросаВТ = ТекстЗапросаВТ + " И РР.ФизЛицо В (&парамФизЛица)";
			ИначеЕсли Сотрудники <> Неопределено Тогда 
				ТекстЗапросаВТ = ТекстЗапросаВТ + " И РР.Сотрудник В ( &парамСотрудники )";
			КонецЕсли;                                                               
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВидыРасчета";
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СпособРасчета Как СпособРасчета,
		|"+?(ИмяПВР="ВзносыВФонды", "1", "КатегорияРасчета")+"	КАК КатегорияРасчета,
		|"+?(ИмяПВР="ОсновныеНачисленияОрганизаций","ЗачетНормыВремени", " NULL")+"	КАК ЗачетНормыВремени,	
		|"+?(ИмяПВР="ОсновныеНачисленияОрганизаций","ЗачетКалендарных", " NULL")+"	КАК ЗачетКалендарных,	
		|"+?(ИмяПВР = "УправленческиеНачисления" 
		ИЛИ ИмяПВР = "ОсновныеНачисленияОрганизаций", "ЗачетОтработанногоВремени"," NULL")+"	КАК ЗачетОтработанногоВремени
		|"; 
		Для СчПоказателей = 1 По КоличествоПоказателей Цикл
			ТекстЗапроса = ТекстЗапроса + ",
			|	ВЫБОР
			|		КОГДА ТЧПоказатели.НомерСтроки = "+ СчПоказателей+"
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА ТЧПоказатели.Показатель.Предопределенный
			|						ТОГДА ТЧПоказатели.Показатель
			|					ИНАЧЕ NULL
			|				КОНЕЦ				
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК Показатель" + СчПоказателей;
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ ПланВидовРасчета."+ИмяПВР+" КАК "+ИмяПВР+" 
		|";
		Если КоличествоПоказателей > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ  ПланВидовРасчета."+ИмяПВР+".Показатели КАК ТЧПоказатели
			|	ПО "+ИмяПВР+".Ссылка = ТЧПоказатели.Ссылка
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ "+ИмяПВР+".Ссылка В (ВЫБРАТЬ * ИЗ ВТВидыРасчета)
		|
		|УПОРЯДОЧИТЬ ПО
		|"+?(ИмяПВР="ВзносыВФонды", "1", ИмяПВР+".КатегорияРасчета.Порядок")+"
		|
		|ИТОГИ 
		|	МАКСИМУМ(ЗачетОтработанногоВремени),
		|	МАКСИМУМ(ЗачетНормыВремени),
		|	МАКСИМУМ(ЗачетКалендарных)
		|ПО КатегорияРасчета
		|";
		
		Запрос.Текст = ТекстЗапроса;
			
		////Запрос.УстановитьПараметр("парамВидыРасчетов", ВидыРасчетов);		
		
		// получаем список категороий и способов расчета
		ВыборкаКатегорий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		// первая запись набора делается с пересчетом Фактического периода действия
		ТолькоЗапись = Ложь;
		
		Пока ВыборкаКатегорий.Следующий() Цикл
			
			// Получим структуру необходимых данных для расчетов текущей категории
			МассивСпособовРасчета	= Новый Массив;	// Массив способов расчета текущий категории
			МассивПоказателей		= Новый Массив;	// Массив видов показателей схем мотивации
			Календарные				= Ложь;
			НормаВремени			= Ложь;			// Признак необходимости получения нормы времени для видов расчета
			ОтработаноВремени		= Ложь;			// Признак необходимости получения отработанного времени для видов расчета
			
			ВложеннаяВыборка = ВыборкаКатегорий.Выбрать();
			Пока ВложеннаяВыборка.Следующий() Цикл
				МассивСпособовРасчета.Добавить(ВложеннаяВыборка.СпособРасчета);
				
				Для Сч = 1 По КоличествоПоказателей Цикл
					Если ВложеннаяВыборка["Показатель"+Сч] <> Null Тогда
						МассивПоказателей.Добавить(ВложеннаяВыборка["Показатель"+Сч]);
					КонецЕсли;
				КонецЦикла;
				
				Если ИмяПВР = "ОсновныеНачисленияОрганизаций" Тогда
					НормаВремени			= НормаВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
					Календарные				= НормаВремени ИЛИ ВложеннаяВыборка.ЗачетКалендарных;
					ОтработаноВремени		= ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
					
				КонецЕсли;
				
				Если ИмяПВР = "УправленческиеНачисления" Тогда
					ОтработаноВремени = ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НеобходимыеДанные = ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета, МассивПоказателей);
			НеобходимыеДанные.НормаВремени			= НеобходимыеДанные.НормаВремени ИЛИ НормаВремени;
			НеобходимыеДанные.Календарные			= НеобходимыеДанные.Календарные ИЛИ Календарные;
			НеобходимыеДанные.ОтработаноВремени		= НеобходимыеДанные.ОтработаноВремени ИЛИ ОтработаноВремени;
			НеобходимыеДанные.Вставить("ВТабличнойЧастиЕстьУчетВремени", НЕ ТабличнаяЧастьДокумента.Выгрузить().Колонки.Найти("ОплаченоДнейЧасов") = Неопределено);                     
			
			Если Не НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
				НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = ИмяРегистра = "УдержанияРаботниковОрганизаций" И НеобходимыеДанные.База
			КонецЕсли;
			
			Если ИмяПВР = "ОсновныеНачисленияОрганизаций"  Тогда  //Или ИмяПВР = "УправленческиеНачисления"
				НеобходимыеДанные.НормаВремениЗаМесяц = НеобходимыеДанные.ВТабличнойЧастиЕстьУчетВремени; // для предотвращения ложных сообщений об отсутствии графика
			КонецЕсли;
			
			// записываем набор перед расчетом каждой категории начислений
			НаборЗаписейРегистра.Записать(Истина, ТолькоЗапись);
			ТолькоЗапись = Истина;
			
			
			
			ИсходныеДанные = ПолучитьДанныеДляРасчета(ИмяРегистра, ВыборкаКатегорий.КатегорияРасчета, НеобходимыеДанные, Регистратор, Организация, ПериодРегистрации,Сотрудники, КомментироватьРасчет, ФизЛица);

			РассчитатьЗаписиНабора(ИсходныеДанные
			,НаборЗаписейРегистра
			,НеобходимыеДанные
			,ТабличнаяЧастьДокумента
			,МассивИндексыСтрокТабличнойЧасти
			,КомментироватьРасчет);
			НаборЗаписейРегистра.Записать(Истина, ТолькоЗапись);
			
			Если ИмяРегистра = "ВзносыВФонды"  Тогда
				
				ТолькоПоДвижениямТекущегоДокумента=ТипЗнч(Регистратор)=Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций");
				Если Не ТолькоПоДвижениямТекущегоДокумента Тогда
					
					ЭтоВзносы = Ложь;
					Если ТипЗнч(ТабличнаяЧастьДокумента) = Тип(НаборЗаписейРегистра.Отбор.Регистратор.Значение.Взносы) Тогда
						ЭтоВзносы = Истина;
					КонецЕсли;
					
					ИсходныеДанныеСторно = ПолучитьДанныеДляРасчетаСторноВзносовВФонды( Регистратор, ЭтоВзносы, Сотрудники, КомментироватьРасчет);
					РассчитатьЗаписиНабораСторноВзносовВФонды(ИсходныеДанныеСторно, НаборЗаписейРегистра, ТабличнаяЧастьДокумента, МассивИндексыСтрокТабличнойЧасти, КомментироватьРасчет);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // РассчитатьЗаписиРегистраРасчета

// Производит расчет записей набора записей регистра расчета
// параметры:
//  ИсходныеДанные - результат запроса к исходным данным
//  НаборЗаписейРегистра - набор записей
//  ЗаписиДоходыНДФЛ - набор записей регистра доходов НДФЛ
//  ГоловнаяОрганизация - ссылка на организацию
//  ОбособленноеПодразделение - ссылка на обособленное подразделение
//	ТабличнаяЧастьДокумента - табличная часть документа, заполняется по результатам расчета
//
// возвращаемое значение:
//	нет
//
Процедура РассчитатьЗаписиНабора(ИсходныеДанные,
									НаборЗаписейРегистра,
									НеобходимыеДанные,
									ТабличнаяЧастьДокумента,
									МассивИндексыСтрокТабличнойЧасти = Неопределено,
									КомментироватьРасчет)
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	// признаки расчета набора записей определенного регистра
	ОсновныеНачисленияОрганизаций = Ложь;
	УправленческиеРасчеты = Ложь;
	УправленческиеНачисления = Ложь;
	РегламентированныеУдержания = Ложь;
	РегламентированныеНачисления = Ложь;
	ВзносыВФонды = Ложь;
	Взносы = Ложь;
	ВзносыФОТ = Ложь;
	Если ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
		ОсновныеНачисленияОрганизаций = Истина;
		РегламентированныеНачисления = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.УправленческиеНачисления") Тогда
		УправленческиеРасчеты = Истина;
		УправленческиеНачисления = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.УправленческиеУдержания") Тогда
		УправленческиеРасчеты = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.УдержанияРаботниковОрганизаций") Тогда
		РегламентированныеУдержания = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.ВзносыВФонды") Тогда
		ВзносыВФонды = Истина;
		Если ТипЗнч(ТабличнаяЧастьДокумента) = Тип(НаборЗаписейРегистра.Отбор.Регистратор.Значение.Взносы) Тогда
			Взносы = Истина;
		Иначе
			ВзносыФОТ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если УправленческиеРасчеты или ОсновныеНачисленияОрганизаций Тогда
		ПоказательРазмер = "Показатель1";
	Иначе
		ПоказательРазмер = "Размер";
	КонецЕсли;
	
	// Соответствие для хранения графика с ошибками
	ГрафикиБезРабочегоВремени = Новый ТаблицаЗначений;
	ГрафикиБезРабочегоВремени.Колонки.Добавить("ГрафикРаботы");
	ГрафикиБезРабочегоВремени.Колонки.Добавить("ВидУчетаВремени");
	
	Пока ИсходныеДанные.Следующий() Цикл
		
		СтрокаДвижений = НаборЗаписейРегистра[ИсходныеДанные.НомерСтроки - 1];
		
		// Позиционирование на строке ТЧ
		СтрокаТабличнойЧасти = Неопределено;
		Если ТабличнаяЧастьДокумента <> Неопределено Тогда
			
			Если ВзносыВФонды Тогда
				Если	Взносы 
					И	СтрокаДвижений.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Взносы
					ИЛИ 
					ВзносыФОТ 
					И	СтрокаДвижений.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ
					Тогда
					СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(СтрокаДвижений.НомерСтрокиТЧ-1);
				Иначе
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли МассивИндексыСтрокТабличнойЧасти = Неопределено Тогда
				
				// Расчет всего документа
				СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений));
				
			Иначе
				
				//расчет по сотруднику
				СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(МассивИндексыСтрокТабличнойЧасти.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений)));
			КонецЕсли;
			
		КонецЕсли;
		
		РассчитатьЗаписьРегистраРасчета(СтрокаДвижений, ИсходныеДанные, НеобходимыеДанные, УправленческиеРасчеты, РегламентированныеНачисления, РегламентированныеУдержания, ОсновныеНачисленияОрганизаций, ВзносыВФонды, КомментироватьРасчет, ГрафикиБезРабочегоВремени);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтрокаТабличнойЧасти.Результат = СтрокаДвижений.Результат;
			Если НеобходимыеДанные.ВТабличнойЧастиЕстьУчетВремени И ОсновныеНачисленияОрганизаций И СтрокаДвижений.Авторасчет Тогда
				СтрокаТабличнойЧасти.ОплаченоДнейЧасов = СтрокаДвижений.ОплаченоДнейЧасов;
			ИначеЕсли НеобходимыеДанные.ВТабличнойЧастиЕстьУчетВремени И СтрокаДвижений.Авторасчет Тогда
				СтрокаТабличнойЧасти.ОплаченоДнейЧасов = 0;
			КонецЕсли;
		КонецЕсли;
		
		// если это данные по виду расчета, период действия которого является отработанным временем
		// или учитывается как норма времени, то для рассчитываемой записи сохраним данные о времени
		Если (НеобходимыеДанные.ВТабличнойЧастиЕстьУчетВремени И ОсновныеНачисленияОрганизаций ИЛИ УправленческиеНачисления) И СтрокаДвижений.Авторасчет Тогда
			
			СпособРасчета = ИсходныеДанные.СпособРасчета;
			
			БылоСообщениеОРабочемВремени = (
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы); 
			
			БылоСообщениеОВидеВремени = Ложь;
			
			Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
				СтрокаДвижений.ОтработаноДней = 0;
				СтрокаДвижений.ОтработаноЧасов = 0;
				Если Не БылоСообщениеОРабочемВремени  Тогда
					СообщениеОбОшибке = Ложь;
					ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, , СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
					БылоСообщениеОРабочемВремени = СообщениеОбОшибке;
				КонецЕсли;
				Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням 
					Или СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					СтрокаДвижений.ОтработаноДней = ИсходныеДанные.ОтработаноДней * ?(СтрокаДвижений.Сторно,-1,1);
					СтрокаДвижений.ОтработаноЧасов = ИсходныеДанные.ОтработаноЧасов * ?(СтрокаДвижений.Сторно,-1,1);
				Иначе
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + СтрокаДвижений.ВидРасчета + ": Не задан вид учета времени");
					БылоСообщениеОВидеВремени = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ОсновныеНачисленияОрганизаций И ИсходныеДанные.ЗачетНормыВремени Тогда
				СтрокаДвижений.НормаЧасов = 0;
				СтрокаДвижений.НормаДней = 0;
				Если ИсходныеДанные.НормаОплачиваемыхЧасов = NULL Тогда
					Если Не БылоСообщениеОРабочемВремени Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
					КонецЕсли;
				ИначеЕсли ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням 
					Или ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					Если ИсходныеДанные.ВидРасчетаЯвляетсяПочасовымОтклонением Тогда
						СтрокаДвижений.НормаЧасов = ИсходныеДанные.ОтработаноЧасов * ?(СтрокаДвижений.Сторно,-1,1);
					Иначе 	
						СтрокаДвижений.НормаЧасов = ИсходныеДанные.НормаОплачиваемыхЧасов * ?(СтрокаДвижений.Сторно,-1,1);
						СтрокаДвижений.НормаДней = ИсходныеДанные.НормаОплачиваемыхДней * ?(СтрокаДвижений.Сторно,-1,1);
					КонецЕсли;
				ИначеЕсли Не БылоСообщениеОВидеВремени Тогда
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не задан вид учета времени");
				КонецЕсли;
			КонецЕсли;
			
			Если ОсновныеНачисленияОрганизаций И ИсходныеДанные.ЗачетКалендарных Тогда
				// только по основному назначению и без вяких замен
				Если СтрокаДвижений.Назначение = СтрокаДвижений.Сотрудник Тогда
					СтрокаДвижений.КалендарныеДни = ИсходныеДанные.КалендарныеДни * ?(СтрокаДвижений.Сторно,-1,1);
				КонецЕсли;
			КонецЕсли;
			
			// Перепишем данные из регистра в табличную часть документа
			Если СтрокаТабличнойЧасти <> Неопределено тогда
				Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
					СтрокаТабличнойЧасти.ОтработаноДней = СтрокаДвижений.ОтработаноДней;
					СтрокаТабличнойЧасти.ОтработаноЧасов = СтрокаДвижений.ОтработаноЧасов;
				Иначе
					СтрокаТабличнойЧасти.ОтработаноДней = 0;
					СтрокаТабличнойЧасти.ОтработаноЧасов = 0;
				КонецЕсли;
				
				Если ОсновныеНачисленияОрганизаций Тогда 
					
					Если ИсходныеДанные.ЗачетНормыВремени Тогда
						СтрокаТабличнойЧасти.НормаДней = СтрокаДвижений.НормаДней;
						СтрокаТабличнойЧасти.НормаЧасов = СтрокаДвижений.НормаЧасов;
					Иначе
						СтрокаТабличнойЧасти.НормаДней = 0;
						СтрокаТабличнойЧасти.НормаЧасов = 0;
					КонецЕсли;
					
					Если ИсходныеДанные.ЗачетКалендарных Тогда
						СтрокаТабличнойЧасти.КалендарныеДни = СтрокаДвижений.КалендарныеДни;
					Иначе
						СтрокаТабличнойЧасти.КалендарныеДни = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ВзносыВФонды И СтрокаДвижений.Авторасчет Тогда
			Если СтрокаТабличнойЧасти <> НеОпределено Тогда
				
				СтрокаТабличнойЧасти.База                      = СтрокаДвижений.База;
				СтрокаТабличнойЧасти.БазаВзноса                = СтрокаДвижений.БазаВзноса;
				СтрокаТабличнойЧасти.СтатьяНалоговойДекларации = СтрокаДвижений.СтатьяНалоговойДекларации;
				СтрокаТабличнойЧасти.Ставка                    = СтрокаДвижений.Ставка;
				СтрокаТабличнойЧасти.БазаВычет                 = СтрокаДвижений.БазаВычет;
				СтрокаТабличнойЧасти.ТипНачисления             = СтрокаДвижений.ТипНачисления;
				
				Если ИсходныеДанные.ЗарплатаКВыплатеОрганизаций Тогда
					СтрокаТабличнойЧасти.ПериодВзаиморасчетов	= ИсходныеДанные.Регистратор.ПериодРегистрации;
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли РегламентированныеУдержания И СтрокаДвижений.Авторасчет Тогда
			Если СтрокаТабличнойЧасти <> НеОпределено Тогда
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьЗаписиНабора

Процедура РассчитатьЗаписиНабораСторноВзносовВФонды(ИсходныеДанныеСторно,
									НаборЗаписейРегистра,
									ТабличнаяЧастьДокумента,
									МассивИндексыСтрокТабличнойЧасти = Неопределено,
									КомментироватьРасчет = Ложь)
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	ИсходныеДанныеСторно.Сбросить();
	Пока ИсходныеДанныеСторно.Следующий() Цикл
		
		Если ИсходныеДанныеСторно.ВидРасчета.СтавкаПоПериодуРегистрации Тогда
			Продолжить;
		КонецЕсли;
		
		Если КомментироватьРасчет Тогда
			
			КомментарийВидаРасчета = ОбщегоНазначения.КомментарийРасчета("Расчет "+ИсходныеДанныеСторно.Налог+" за " + Формат(ИсходныеДанныеСторно.БазовыйПериодНачало,"ДФ='МММ гггг'"), , ИсходныеДанныеСторно.ВидРасчетаНаименование, ИсходныеДанныеСторно.ВидРасчета);
			КомментарийБазы = ОбщегоНазначения.КомментарийРасчета("База сторно: " + ИсходныеДанныеСторно.База, КомментарийВидаРасчета,,,, Ложь);
			КомментарийБазы = ОбщегоНазначения.КомментарийРасчета("База с ограничением сторно: " + ИсходныеДанныеСторно.БазаВзноса, КомментарийВидаРасчета,,,, Ложь);
			ОбщегоНазначения.КомментарийРасчета("Сумма взноса сторно : " + ИсходныеДанныеСторно.Результат, КомментарийВидаРасчета);
			
		КонецЕсли;
			
		Если ИсходныеДанныеСторно.НомерСтрокиТЧ = NULL Тогда
			
			// аналогичная строка не нашлась надо создавать сторно запись
			// Названия всех переменных запроса соответствуют названиям измерений, 
			// ресурсов и реквизитов регистра расчета ВзносыВФонды
			Движение = НаборЗаписейРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,ИсходныеДанныеСторно);	
			
			НоваяСтрока = ТабличнаяЧастьДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ИсходныеДанныеСторно);	
			
		Иначе
			//Движение = НаборЗаписейРегистра.Получить(МассивИндексыСтрокТабличнойЧасти.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений)));
			
			// все параметры совпали, достаточно просто откорректировать ресурсы
			Движение = НаборЗаписейРегистра.Получить(ИсходныеДанныеСторно.НомерСтрокиРегистратора-1);
			Движение.База		= Движение.База + ИсходныеДанныеСторно.База;
			Движение.БазаВзноса	= Движение.БазаВзноса + ИсходныеДанныеСторно.БазаВзноса;
			Движение.Результат	= Движение.Результат + ИсходныеДанныеСторно.Результат;
			
			СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(ИсходныеДанныеСторно.НомерСтрокиТЧ-1);
			СтрокаТабличнойЧасти.База		= СтрокаТабличнойЧасти.База + ИсходныеДанныеСторно.База;
			СтрокаТабличнойЧасти.БазаВзноса	= СтрокаТабличнойЧасти.БазаВзноса + ИсходныеДанныеСторно.БазаВзноса;
			СтрокаТабличнойЧасти.Результат	= СтрокаТабличнойЧасти.Результат + ИсходныеДанныеСторно.Результат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьЗаписиНабораСторноВзносовВФонды


// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  УправленческиеРасчеты - булево, признак того, что это расчет управленческий
//  РегламентированныеНачисления - булево, признак того, что это регламентированное начисление
//  ОсновныеНачисленияОрганизаций - булево, признак того, что это именно основое регламентированное начисление
//
// Возвращаемое значение:
//  Нет.
//
Процедура РассчитатьЗаписьРегистраРасчета(СтрокаДвижений,
	ИсходныеДанные,
	НеобходимыеДанные,
	УправленческиеРасчеты,
	РегламентированныеНачисления,
	РегламентированныеУдержания,
	ОсновныеНачисленияОрганизаций,
	ВзносыВФонды,
	КомментироватьРасчет, ГрафикиБезРабочегоВремени)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	
	РезультатПолучен = Истина;
	
	ПоказательРазмер = "Показатель1";
	
	// расчет будем проводить только для авторассчитываемой записи
	Если СтрокаДвижений.Авторасчет Тогда
		
		// этот Если... нужно расширять при появлении новых способов расчета или видов расчета,
		// которые не укладываются в тот или иной способ
		
		Если КомментироватьРасчет Тогда
			Если ВзносыВФонды Тогда
				КомментарийВидаРасчета = ОбщегоНазначения.КомментарийРасчета("Расчет "+СтрокаДвижений.Налог+" за " + Формат(СтрокаДвижений.БазовыйПериодНачало,"ДФ='МММ гггг'"), , ИсходныеДанные.ВидРасчетаНаименование, СтрокаДвижений.ВидРасчета);
			Иначе
				КомментарийВидаРасчета = ОбщегоНазначения.КомментарийРасчета("Расчет ", , ИсходныеДанные.ВидРасчетаНаименование, СтрокаДвижений.ВидРасчета);
				ОбщегоНазначения.КомментарийРасчета("Способ расчета: " + ИсходныеДанные.СпособРасчета, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Порядок расчета: " + ВизуализироватьФормулуРасчета(ИсходныеДанные.ВидРасчета), КомментарийВидаРасчета);
			КонецЕсли;
		КонецЕсли;
		
		Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
			// Размер - процент доплаты
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
			Иначе
				Если КомментироватьРасчет Тогда
					КомментарийБазы = ОбщегоНазначения.КомментарийРасчета("Базовые начисления составили всего: " + ИсходныеДанные.РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
					РасшифровкаБазы = ИсходныеДанные.Выбрать();
					Пока РасшифровкаБазы.Следующий() Цикл
						Если РасшифровкаБазы.РезультатБаза <> 0 Тогда
							ОбщегоНазначения.КомментарийРасчета(РасшифровкаБазы.ВидРасчетаРазрезНаименование + ": " + РасшифровкаБазы.РезультатБаза, КомментарийБазы);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если РегламентированныеУдержания Тогда
					УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
					Результат = Макс(ИсходныеДанные.РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100 - УжеНачисленоВТекущемПериоде,0);
					Если КомментироватьРасчет Тогда
						ОбщегоНазначения.КомментарийРасчета("Процент: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
						ОбщегоНазначения.КомментарийРасчета("Ранее начислено в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
					КонецЕсли;
				Иначе
					Результат = ИсходныеДанные.РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100;
					Если КомментироватьРасчет Тогда
						ОбщегоНазначения.КомментарийРасчета("Процент: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
				
			// ГосударственноеПособие
			//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ГосударственноеПособие Тогда
			
			
			Если НеобходимыеДанные.ГосударственноеПособиеУчитыватьВремя Тогда
				
				ДатаНачала		= НачалоДня( ИсходныеДанные.ПериодДействияНачало );
				ДатаОкончания	= НачалоДня( ИсходныеДанные.ПериодДействияКонец );
				
				НП	= НачалоМесяца( ИсходныеДанные.ПериодДействияНачало );
				КП	= НачалоДня( КонецМесяца( ИсходныеДанные.ПериодДействияКонец ) );
				
				ДнейОтпуска = (ДатаОкончания - ДатаНачала) /86400 + 1;
				ДнейВсего = (КП - НП) /86400 + 1;
				Коэф = ?( ДнейВсего = 0, 0, ДнейОтпуска / ДнейВсего);
				
			Иначе
				
				Коэф = 1;
				
			КонецЕсли;
			
			Результат = Коэф * СтрокаДвижений[ПоказательРазмер];
			
			
			// ФиксированнойСуммой
			//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой  Тогда
			
			Результат = СтрокаДвижений[ПоказательРазмер];
			
			
			// ПоДоговоруФиксированнойСуммой
			//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
			
			Если ТипЗнч(СтрокаДвижений.ДокументОснование) = Тип("ДокументСсылка.ДоговорНаВыполнениеРаботСФизЛицом") Тогда
				Если СтрокаДвижений.ДокументОснование.ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.ПоСдельномуНаряду  Тогда
					Если ИсходныеДанные.РазмерСдельногоЗаработка = NULL Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": нет данных о фактической выработке ");
					Иначе	
						Результат = ИсходныеДанные.РазмерСдельногоЗаработка;
					КонецЕсли; 
					
				Иначе
					Результат = СтрокаДвижений[ПоказательРазмер];
				КонецЕсли;
			Иначе
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": оплата не должна производиться без договора подряда ");
			КонецЕсли;
			
			// НулеваяСумма
			//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда
			// Ничего не считаем 
			

			// ПоМесячнойТарифнойСтавкеПоДням
			// ПоМесячнойТарифнойСтавкеПоЧасам
		ИначеЕсли
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
			Тогда
			
			НормаВремени = ?( СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням , СтрокаДвижений.НормаДнейЗаМесяц,СтрокаДвижений.НормаЧасовЗаМесяц);
			СообщениеОбОшибке = Ложь;
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
			Если НЕ СообщениеОбОшибке И НормаВремени = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет рабочих дней в заданном периоде");
			КонецЕсли;
			Если НормаВремени <> 0 Тогда
				Результат = СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное / НормаВремени;
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Норма времени: " + НормаВремени, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
			
			// ПоЧасовойТарифнойСтавкеУмножитьНаПроцент
			//
		ИначеЕсли
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеУмножитьНаПроцент 
			Тогда

			ОтработаноВремениОсновное = ИсходныеДанные.ОтработаноЧасов;
			
			Результат = ОтработаноВремениОсновное * СтрокаДвижений[ПоказательРазмер] *  СтрокаДвижений.Показатель2/100;
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Процент: " + СтрокаДвижений.Показатель2, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);			

			// ПоЧасовойТарифнойСтавке
			// ПоДневнойТарифнойСтавке
			//
		ИначеЕсли
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке
			Тогда
			
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
			
			Результат = СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное;
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Тарифная ставка: " + СтрокаДвижений[ПоказательРазмер], КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);			

			// ДоплатаЗаВечерниеЧасы
			//
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
			
			ОтработаноВремениОсновное	= ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
			ЧасовойТариф				= СтрокаДвижений.Показатель1;
			КоэффициентВечерних			= СтрокаДвижений.Показатель2/100;
			Результат = ЧасовойТариф * КоэффициентВечерних * ОтработаноВремениОсновное;
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Коэффициент вечерних: " + КоэффициентВечерних, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Часовой тариф: " + ЧасовойТариф, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.Показатель1 = ЧасовойТариф;
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
			
			
			// ДоплатаЗаНочныеЧасы
			//
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
			
			ОтработаноВремениОсновное	= ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВидаРасчета, , ГрафикиБезРабочегоВремени);
			ЧасовойТариф				= СтрокаДвижений.Показатель1;
			КоэффициентНочных			= СтрокаДвижений.Показатель2/100;
			
			Результат = ЧасовойТариф * КоэффициентНочных * ОтработаноВремениОсновное;
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Коэффициент ночных: " + КоэффициентНочных, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Часовой тариф: " + ЧасовойТариф, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Отработанное время: " + ОтработаноВремениОсновное, КомментарийВидаРасчета);
			КонецЕсли;
			
			СтрокаДвижений.Показатель1 = ЧасовойТариф;
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
			
			
			// ПочтовыйСбор для исполнительных листов
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
			
			Если ИсходныеДанные.РазмерПочтовогоПеревода = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определен размер почтового переода  ");
			ИначеЕсли ИсходныеДанные.РазмерПочтовогоПеревода = 0 Тогда
				//Дальше можно не проверять и не считать
			ИначеЕсли ИсходныеДанные.Ставка = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определена ставка почтового сбора  ");
			Иначе
				 
				РезультатБаза = ИсходныеДанные.РазмерПочтовогоПеревода;
				СуммаДополнительно = ИсходныеДанные.СуммаДополнительно;
				Результат = (РезультатБаза * ИсходныеДанные.Ставка + СуммаДополнительно) *1.2;
				//Запишем ставку в размер
				СтрокаДвижений[ПоказательРазмер] = ИсходныеДанные.Ставка;
				
			КонецЕсли;
			
			// ВыслугаЛет                                                      
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВыслугаЛет Тогда
			
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определена база ");
			ИначеЕсли ИсходныеДанные.СтавкаВыслуги = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета выслуги (проверьте список ""Начальные сведения о стаже работников организации"")");
			Иначе
					Если КомментироватьРасчет Тогда
					КомментарийБазы = ОбщегоНазначения.КомментарийРасчета("Базовые начисления составили всего: " + ИсходныеДанные.РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
					РасшифровкаБазы = ИсходныеДанные.Выбрать();
					Пока РасшифровкаБазы.Следующий() Цикл
						Если РасшифровкаБазы.РезультатБаза <> 0 Тогда
							ОбщегоНазначения.КомментарийРасчета(РасшифровкаБазы.ВидРасчетаРазрезНаименование + ": " + РасшифровкаБазы.РезультатБаза, КомментарийБазы);
						КонецЕсли;
					КонецЦикла;
					
					ОбщегоНазначения.КомментарийРасчета("Ставка выслуги: " + ИсходныеДанные.СтавкаВыслуги, КомментарийВидаРасчета);
				КонецЕсли;
				
				РезультатБаза = ИсходныеДанные.РезультатБаза; 
				Если ИсходныеДанные.Ограничение>0 Тогда
					//С ограничением
					Если КомментироватьРасчет Тогда
						ОбщегоНазначения.КомментарийРасчета("Ограничение: " + ИсходныеДанные.Ограничение, КомментарийВидаРасчета);
					КонецЕсли;
					Результат = МИН(РезультатБаза * ИсходныеДанные.СтавкаВыслуги,ИсходныеДанные.Ограничение);
				Иначе	
					//Без ограничения
					Результат = РезультатБаза * ИсходныеДанные.СтавкаВыслуги;
				КонецЕсли;

				
			КонецЕсли;
			
			// ИсполнительныйЛистПроцентом
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
			
			// Размер - процент удержания
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
			Иначе                                                
				
				ИсчисленныйНДФЛ 			= ?(ИсходныеДанные.ИсчисленныйНДФЛ = Null, 0, ИсходныеДанные.ИсчисленныйНДФЛ);
				ИсчисленныеВзносы 			= ?(ИсходныеДанные.Взносы = Null, 0, ИсходныеДанные.Взносы);
				
				РезультатБаза = ИсходныеДанные.РезультатБаза - ИсчисленныйНДФЛ - ИсчисленныеВзносы;
				
				Результат = РезультатБаза * СтрокаДвижений[ПоказательРазмер] / 100;
				
			КонецЕсли;            
			
			// АлиментыПроцентом
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.АлиментыПроцентом Тогда
			
			// Размер - процент удержания
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисленияя ");
			ИначеЕсли ИсходныеДанные.ДетейВДокументеВсего = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": В исполнительном листе на уплату алементов не указанны данные о детях ");
			Иначе
				
				АлиментыДетиДо6 		= ?(ИсходныеДанные.АлиментыДетиДо6 = Null	, 0, ИсходныеДанные.АлиментыДетиДо6);
				АлиментыДетиДо18 		= ?(ИсходныеДанные.АлиментыДетиДо18 = Null	, 0, ИсходныеДанные.АлиментыДетиДо18);
				АлиментыТрудоспособные 	= ?(ИсходныеДанные.ИсчисленныйНДФЛ = Null	, 0, ИсходныеДанные.АлиментыТрудоспособные);

				ДетейВДокументе6 	= ?(ИсходныеДанные.ДетейВДокументе6 = Null	, 0, ИсходныеДанные.ДетейВДокументе6);
				ДетейВДокументе18 	= ?(ИсходныеДанные.ДетейВДокументе18 = Null	, 0, ИсходныеДанные.ДетейВДокументе18);
				ДетейВДокументе19 	= ?(ИсходныеДанные.ДетейВДокументе19 = Null	, 0, ИсходныеДанные.ДетейВДокументе19);
				
				ПределПоПрожиточнымМинимумам = 0.3 * (ДетейВДокументе6*АлиментыДетиДо6 
													+ АлиментыДетиДо18*ДетейВДокументе18
													+ АлиментыТрудоспособные*ДетейВДокументе19);
													
				// все дети указанные в исполнительном листе
				ДетейВДокументеВсего = ?(ИсходныеДанные.ДетейВДокументеВсего = Null	, 0, ИсходныеДанные.ДетейВДокументеВсего);
				
				// дети которые уже достигли возраста указанного вдокументе
				ДетейВДокументе 	 = ?(ИсходныеДанные.ДетейВДокументе = Null	, 0, ИсходныеДанные.ДетейВДокументе);
				Если ДетейВДокументеВсего = 0 Тогда
					Сообщить(""+СтрокаДвижений.Сотрудник + "; " + СтрокаДвижений.ВидРасчета + ": В исполнительном листе на уплату алементов не указанны данные о детях ", СтатусСообщения.Важное);
					Возврат;	
				КонецЕсли;	
				
				ИсчисленныйНДФЛ 			= ?(ИсходныеДанные.ИсчисленныйНДФЛ = Null  , 0, ИсходныеДанные.ИсчисленныйНДФЛ);
				ИсчисленныеВзносы 			= ?(ИсходныеДанные.Взносы = Null, 0, ИсходныеДанные.Взносы);
				
				РезультатБаза = ИсходныеДанные.РезультатБаза - ИсчисленныйНДФЛ - ИсчисленныеВзносы;
				
				Результат = (РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100)*ДетейВДокументе/ДетейВДокументеВсего ;
				
				Если ИсходныеДанные.ПометкаУвеличиватьДоМинимума  Тогда
					Результат = Макс(Результат, ПределПоПрожиточнымМинимумам);
				КонецЕсли;
				
			КонецЕсли;
			
			
			// ИсполнительныйЛистПроцентомДоПредела
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
			
			// Размер - процент удержания
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисленияя ");
			Иначе
				
				ИсчисленныйНДФЛ 			= ?(ИсходныеДанные.ИсчисленныйНДФЛ = Null, 0, ИсходныеДанные.ИсчисленныйНДФЛ);
				ИсчисленныеВзносы 			= ?(ИсходныеДанные.Взносы = Null, 0, ИсходныеДанные.Взносы);
				УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
				РезультатБаза = ИсходныеДанные.РезультатБаза - ИсчисленныйНДФЛ - ИсчисленныеВзносы;
				
				Результат = Макс((РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100) - УжеНачисленоВТекущемПериоде, 0);
				
				ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
				УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
				
				// Ограничим результат расчета в случае достижения предела удержания
				Результат = Мин(Результат, ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию);

			КонецЕсли;
			
			// АлиментыПроцентомДоПредела
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.АлиментыПроцентомДоПредела Тогда
			
			// Размер - процент удержания
			Если ИсходныеДанные.РезультатБаза = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисленияя ");
			ИначеЕсли ИсходныеДанные.ДетейВДокументеВсего = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": В исполнительном листе на уплату элементов не указанны данные о детях ");
			Иначе
				
				АлиментыДетиДо6 		= ?(ИсходныеДанные.АлиментыДетиДо6 = Null	, 0, ИсходныеДанные.АлиментыДетиДо6);
				АлиментыДетиДо18 		= ?(ИсходныеДанные.АлиментыДетиДо18 = Null	, 0, ИсходныеДанные.АлиментыДетиДо18);
				АлиментыТрудоспособные 	= ?(ИсходныеДанные.ИсчисленныйНДФЛ = Null	, 0, ИсходныеДанные.АлиментыТрудоспособные);

				ДетейВДокументе6 	= ?(ИсходныеДанные.ДетейВДокументе6 = Null	, 0, ИсходныеДанные.ДетейВДокументе6);
				ДетейВДокументе18 	= ?(ИсходныеДанные.ДетейВДокументе18 = Null	, 0, ИсходныеДанные.ДетейВДокументе18);
				ДетейВДокументе19 	= ?(ИсходныеДанные.ДетейВДокументе19 = Null	, 0, ИсходныеДанные.ДетейВДокументе19);
				
				ПределПоПрожиточнымМинимумам = 0.3 * (ДетейВДокументе6*АлиментыДетиДо6 
													+ АлиментыДетиДо18*ДетейВДокументе18
													+ АлиментыТрудоспособные*ДетейВДокументе19);
				
				// все дети указанные в исполнительном листе
				ДетейВДокументеВсего = ?(ИсходныеДанные.ДетейВДокументеВсего = Null	, 0, ИсходныеДанные.ДетейВДокументеВсего);
				
				// дети которые уже достигли возраста указанного вдокументе
				ДетейВДокументе 	 = ?(ИсходныеДанные.ДетейВДокументе = Null	, 0, ИсходныеДанные.ДетейВДокументе);
				Если ДетейВДокументеВсего = 0 Тогда
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": В исполнительном листе на уплату алементов не указанны данные о детях ");
					Возврат;	
				КонецЕсли;	
				
				ИсчисленныйНДФЛ 			= ?(ИсходныеДанные.ИсчисленныйНДФЛ = Null  , 0, ИсходныеДанные.ИсчисленныйНДФЛ);
				ИсчисленныеВзносы 			= ?(ИсходныеДанные.Взносы = Null, 0, ИсходныеДанные.Взносы);
				
				РезультатБаза = ИсходныеДанные.РезультатБаза - ИсчисленныйНДФЛ - ИсчисленныеВзносы;
				
				УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
				
				Если ДетейВДокументеВсего <> 0 Тогда
					Результат = Макс((РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100)*ДетейВДокументе/ДетейВДокументеВсего - УжеНачисленоВТекущемПериоде, 0);
					
					Если ИсходныеДанные.ПометкаУвеличиватьДоМинимума  Тогда
						Результат = Макс(Результат, ПределПоПрожиточнымМинимумам);
					КонецЕсли;
				КонецЕсли; 
				
				// Ограничим результат расчета в случае достижения предела удержания
				ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
				УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
				
				Результат = Мин(Результат, ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию);
				
			КонецЕсли;
			
			// ИсполнительныйЛистФиксСуммой
			//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммой Тогда
			
			Результат = СтрокаДвижений[ПоказательРазмер];
			
			// АлиментыФиксСуммой
			//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.АлиментыФиксСуммой Тогда
			
			
			Если ИсходныеДанные.ДетейВДокументеВсего = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": В исполнительном листе на уплату элементов не указанны данные о детях ");
			Иначе
				
				ДетейВДокументеВсего = ИсходныеДанные.ДетейВДокументеВсего;// все дети указанные в исполнительном листе
				ДетейВДокументе = ИсходныеДанные.ДетейВДокументе;     // дети которые уже достигли возраста указанного вдокументе
				
				Результат = СтрокаДвижений[ПоказательРазмер] * ДетейВДокументе / ДетейВДокументеВсего;
				
			КонецЕсли;
			
			
			// ИсполнительныйЛистФиксСуммойДоПредела
			//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
			
			ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
			УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
			
			// Ограничим результат расчета в случае достижения предела удержания
			Результат = Мин(СтрокаДвижений[ПоказательРазмер], ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию);
			
			
			// АлиментыФиксСуммойДоПредела
			//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
			
			Если ИсходныеДанные.ДетейВДокументеВсего = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": В исполнительном листе на уплату элементов не указанны данные о детях ");
			Иначе
				
				ДетейВДокументеВсего = ИсходныеДанные.ДетейВДокументеВсего;// все дети указанные в исполнительном листе
				ДетейВДокументе = ИсходныеДанные.ДетейВДокументе;     // дети которые уже достигли возраста указанного вдокументе
				ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
				УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
				
				// Ограничим результат расчета в случае достижения предела удержания
				Результат = Мин(СтрокаДвижений[ПоказательРазмер] * ДетейВДокументе / ДетейВДокументеВсего, ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию);
			КонецЕсли;	
			
			
			// ПоСреднемуЗаработку для ВыходноеПособие
			//
		ИначеЕсли
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку  
			И СтрокаДвижений.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ВыходноеПособие Тогда
			
			Если НЕ СтрокаДвижений.Сторно Тогда 
				Если ИсходныеДанные.СреднийЗаработок = NULL 
					ИЛИ (ИсходныеДанные.ОтработаноМесяцев = 0 ИЛИ ИсходныеДанные.ОтработаноМесяцев = NULL)
					Тогда
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка ");
					СтрокаДвижений.Результат = 0;
					Возврат;
				КонецЕсли;	
			КонецЕсли;	
			
			ОплачиваемоеВремя = ?(СтрокаДвижений[ПоказательРазмер] = 0, 100,СтрокаДвижений[ПоказательРазмер]);
			
			// Рассчитаем заработок за день (или за час для суммированного учета времени)
			// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
			Если НЕ СтрокаДвижений.Сторно Тогда
				
				ЗаработокЗаЕдиницуВремени = ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноМесяцев;
				
				// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
				СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				
			Иначе
				ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
			КонецЕсли; 
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени;
			
			// ДоплатаДоСреднегоЗаработка
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
			
			
			ЗаработокЗаЕдиницуВремени = СтрокаДвижений.Показатель1;
			
			ВидУчетаВремениДляСредней = СтрокаДвижений.ВидУчетаВремениДляСредней;
			Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.НормаОплачиваемыхДней = NULL, 0, ИсходныеДанные.НормаОплачиваемыхДней);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.НормаОплачиваемыхЧасов = NULL, 0, ИсходныеДанные.НормаОплачиваемыхЧасов);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныеДни = NULL, 0, ИсходныеДанные.КалендарныеДни);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныеДниСПраздниками = NULL, 0, ИсходныеДанные.КалендарныеДниСПраздниками);		
			Иначе
				ОплачиваемоеВремя = 0;
			КонецЕсли;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Сумма средней: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
					ОбщегоНазначения.КомментарийРасчета("Оплачиваемое время (в рабочих днях): " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
					ОбщегоНазначения.КомментарийРасчета("Оплачиваемое время (в рабочих часах): " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
					ОбщегоНазначения.КомментарийРасчета("Оплачиваемое время (в календарных днях): " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			СреднийЗаработок = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени;
			РезультатБаза = ?(ИсходныеДанные.РезультатБаза = NULL, 0, ИсходныеДанные.РезультатБаза);
			
			Результат = Макс(СреднийЗаработок - РезультатБаза, 0);
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
			
			// ПоСреднемуЗаработкуДляОтпуска
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска 
			//ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КомпенсацияОтпуска 
			Тогда
			
			ЗаработокЗаЕдиницуВремени = СтрокаДвижений.Показатель1;
			
			ВидУчетаВремениДляСредней = СтрокаДвижений.ВидУчетаВремениДляСредней;
			Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.НормаОплачиваемыхДней = NULL, 0, ИсходныеДанные.НормаОплачиваемыхДней);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.НормаОплачиваемыхЧасов = NULL, 0, ИсходныеДанные.НормаОплачиваемыхЧасов);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныеДни = NULL, 0, ИсходныеДанные.КалендарныеДни);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныеДниСПраздниками = NULL, 0, ИсходныеДанные.КалендарныеДниСПраздниками);	
			Иначе
				ОплачиваемоеВремя = 0;
			КонецЕсли;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Сумма средней: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
					ОбщегоНазначения.КомментарийРасчета("Оплачиваемое время (в рабочих днях): " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
					ОбщегоНазначения.КомментарийРасчета("Оплачиваемое время (в рабочих часах): " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
					ОбщегоНазначения.КомментарийРасчета("Оплачиваемое время (в календарных днях): " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени;
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
			// ВыходноеПособие
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВыходноеПособие 
			Тогда
			
			ЗаработокЗаМесяц = СтрокаДвижений.Показатель1;
			КоличествоМесяцев = СтрокаДвижений.Показатель2;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Сумма средней: " + ЗаработокЗаМесяц, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Количество месяцев, за которые оплачивается пособие: " + КоличествоМесяцев, КомментарийВидаРасчета);
			КонецЕсли;
			
			Результат = ЗаработокЗаМесяц * КоличествоМесяцев;
			СтрокаДвижений.ОплаченоДнейЧасов = КоличествоМесяцев * ?(СтрокаДвижений.Сторно,-1,1);
			
			
			// ПоСреднемуЗаработкуКомпенсацияОтпуска
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуКомпенсацияОтпуска 
			Тогда
			
			ЗаработокЗаМесяц = СтрокаДвижений.Показатель1;
			КалендарныхДней = СтрокаДвижений.Показатель2;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Сумма средней: " + ЗаработокЗаМесяц, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Время, за которые компенсируется отпуск: " + КалендарныхДней, КомментарийВидаРасчета);
			КонецЕсли;
			
			Результат = ЗаработокЗаМесяц * КалендарныхДней;
			СтрокаДвижений.ОплаченоДнейЧасов = КалендарныхДней * ?(СтрокаДвижений.Сторно,-1,1);
			
			
			// ПоСреднемуЗаработкуВозвратОтпуска
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуВозвратОтпуска 
			Тогда
			
			ЗаработокЗаМесяц = СтрокаДвижений.Показатель1;
			КалендарныхДней = СтрокаДвижений.Показатель2;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Сумма средней: " + ЗаработокЗаМесяц, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Время, за которые компенсируется отпуск: " + КалендарныхДней, КомментарийВидаРасчета);
			КонецЕсли;
			
			Результат = - ЗаработокЗаМесяц * КалендарныхДней;
			СтрокаДвижений.ОплаченоДнейЧасов = КалендарныхДней * ?(СтрокаДвижений.Сторно,-1,1);
			
			// ПоСреднемуЗаработку
			//
		ИначеЕсли  СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднему  
			ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку 
			Тогда
			
			ЗаработокЗаЕдиницуВремени = СтрокаДвижений.Показатель1;
			ПроцентОплаты = ?(СтрокаДвижений.Показатель2 = 0, 100,СтрокаДвижений.Показатель2);
			
			ВидУчетаВремениДляСредней = СтрокаДвижений.ВидУчетаВремениДляСредней;
			Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.ОтработаноДней = NULL, 0, ИсходныеДанные.ОтработаноДней);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.ОтработаноЧасов = NULL, 0, ИсходныеДанные.ОтработаноЧасов);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныеДни = NULL, 0, ИсходныеДанные.КалендарныеДни);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныеДниСПраздниками = NULL, 0, ИсходныеДанные.КалендарныеДниСПраздниками);		
			Иначе
				ОплачиваемоеВремя = 0;
			КонецЕсли;
			//ВидУчетаВремениДляСредней = СтрокаДвижений.ВидУчетаВремениДляСредней;
			//Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
			//	ОплачиваемоеВремя = ?(ИсходныеДанные.НормаОплачиваемыхДней = NULL, 0, ИсходныеДанные.НормаОплачиваемыхДней);
			//ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
			//	ОплачиваемоеВремя = ?(ИсходныеДанные.НормаОплачиваемыхЧасов = NULL, 0, ИсходныеДанные.НормаОплачиваемыхЧасов);
			//ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
			//	ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныеДни = NULL, 0, ИсходныеДанные.КалендарныеДни);
			//Иначе
			//	ОплачиваемоеВремя = 0;
			//КонецЕсли;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Сумма средней: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
				Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
					ОбщегоНазначения.КомментарийРасчета("Оплачиваемое время (в рабочих днях): " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
					ОбщегоНазначения.КомментарийРасчета("Оплачиваемое время (в рабочих часах): " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
					ОбщегоНазначения.КомментарийРасчета("Оплачиваемое время (в календарных днях): " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100;
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
			
			// ПоСреднемуЗаработкуФСС
			//
		ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС 
			Тогда
			
			ЗаработокЗаЕдиницуВремени = СтрокаДвижений.Показатель1;
			ПроцентОплаты = ?(СтрокаДвижений.Показатель2 = 0, 100,СтрокаДвижений.Показатель2);
			
			ВидУчетаВремениДляСредней = СтрокаДвижений.ВидУчетаВремениДляСредней;
			Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.НормаОплачиваемыхДней = NULL, 0, ИсходныеДанные.НормаОплачиваемыхДней);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.НормаОплачиваемыхЧасов = NULL, 0, ИсходныеДанные.НормаОплачиваемыхЧасов);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныеДни = NULL, 0, ИсходныеДанные.КалендарныеДни);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныеДниСПраздниками = NULL, 0, ИсходныеДанные.КалендарныеДниСПраздниками);	
			Иначе
				ОплачиваемоеВремя = 0;
			КонецЕсли;
			
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Сумма средней: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
				Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
					ОбщегоНазначения.КомментарийРасчета("Оплачиваемое время (в рабочих днях): " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
					ОбщегоНазначения.КомментарийРасчета("Оплачиваемое время (в рабочих часах): " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
					ОбщегоНазначения.КомментарийРасчета("Оплачиваемое время (в календарных днях): " + ОплачиваемоеВремя, КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100;
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
			
			// СдельныйЗаработок
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
			
			Если ИсходныеДанные.РазмерСдельногоЗаработка = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": нет данных о фактической выработке ");
			Иначе	
				Результат = ИсходныеДанные.РазмерСдельногоЗаработка;
			КонецЕсли; 
		
			
			// КомпенсацияНевыплаченнойЗарплаты
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КомпенсацияНевыплаченнойЗарплаты Тогда
			
			Если ИсходныеДанные.СуммаКомпенсации = NULL Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": в базовом периоде нет задолженности перед работником");
			Иначе	
				
				Начало = ДобавитьМесяц(СтрокаДвижений.БазовыйПериодНачало, 1);
				Конец  = ДобавитьМесяц(СтрокаДвижений.ПериодРегистрации, -1);
				КоэффициентКомпенсации = РассчитатьЗаписьРегистраРасчета_КоэффициентКомпенсации( Начало, Конец, НеобходимыеДанные );
				
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("База компенсации: "+ИсходныеДанные.СуммаКомпенсации, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("КоэффициентКомпенсации: "+КоэффициентКомпенсации, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Период расчета коєффициента: ("+Формат(Начало,"ДФ=""ММММ гггг 'г.' """)+", "+Формат(Конец,"ДФ=""ММММ гггг 'г.' """)+")", КомментарийВидаРасчета);
				КонецЕсли;
				
				Результат = ИсходныеДанные.СуммаКомпенсации * КоэффициентКомпенсации;
			КонецЕсли; 
			
		
			// ИндексацияЗарплаты
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИндексацияЗарплаты Тогда
			
			БазаИндексацияЗарплаты1 = ?(ИсходныеДанные.БазаИндексацияЗарплаты1 = NULL, 0, ИсходныеДанные.БазаИндексацияЗарплаты1);
			БазаИндексацияЗарплаты2 = ?(ИсходныеДанные.БазаИндексацияЗарплаты2 = NULL, 0, ИсходныеДанные.БазаИндексацияЗарплаты2);
			БазаИндексацияЗарплаты3 = ?(ИсходныеДанные.БазаИндексацияЗарплаты3 = NULL, 0, ИсходныеДанные.БазаИндексацияЗарплаты3);
			БазаИндексацияЗарплаты4 = ?(ИсходныеДанные.БазаИндексацияЗарплаты4 = NULL, 0, ИсходныеДанные.БазаИндексацияЗарплаты4);
			РезультатПолнаяБаза = БазаИндексацияЗарплаты1
			+ БазаИндексацияЗарплаты2
			+ БазаИндексацияЗарплаты3
			+ БазаИндексацияЗарплаты4;
			
			Если СтрокаДвижений.Назначение.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
				Результат = 0;	
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("По внутреннему совместителю индексация не начисляется. Расчет индексации производится только по основному месту работы!");
				КонецЕсли;
				
			ИначеЕсли РезультатПолнаяБаза = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о базе индексации ");
				
			ИначеЕсли СтрокаДвижений.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство
				И НЕ ИсходныеДанные.ЕстьСправкаОБазеИндексацииСовместителя Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет сведений о базе индексации с основного места работы ");
			Иначе	
				
				Начало = ?(ИсходныеДанные.ИндексацияЗарплатыНачало = Null, Дата("00010101"), ИсходныеДанные.ИндексацияЗарплатыНачало);
				Конец  = ИсходныеДанные.ИндексацияЗарплатыКонец;
				БазовыйМесяц = Макс(Начало, НеобходимыеДанные.НачалоРасчетаИндексации);
				                          
				КоэффициентИндексации	= РассчитатьЗаписьРегистраРасчета_Индексация_Коэффициент( Начало, Конец, НеобходимыеДанные, "ИндексацияЗарплаты" );
				РезультатБаза			= РассчитатьЗаписьРегистраРасчета_Индексация_База( ИсходныеДанные, НеобходимыеДанные, "ИндексацияЗарплаты" );
					
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("База индексации:" + РезультатБаза, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Базовый период: " + БазовыйМесяц, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Коэффициент индексации: " + КоэффициентИндексации, КомментарийВидаРасчета);
				КонецЕсли;
				
				Результат  = РезультатБаза * КоэффициентИндексации;
				
			КонецЕсли;
			
			
			// ИндексацияСоциальныхНачислений
			//
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИндексацияСоциальныхНачислений Тогда
			
			БазаИндексацияСоциальныхНачислений1 = ?(ИсходныеДанные.БазаИндексацияСоциальныхНачислений1 = NULL, 0, ИсходныеДанные.БазаИндексацияСоциальныхНачислений1);
			БазаИндексацияСоциальныхНачислений2 = ?(ИсходныеДанные.БазаИндексацияСоциальныхНачислений2 = NULL, 0, ИсходныеДанные.БазаИндексацияСоциальныхНачислений2);
			БазаИндексацияСоциальныхНачислений3 = ?(ИсходныеДанные.БазаИндексацияСоциальныхНачислений3 = NULL, 0, ИсходныеДанные.БазаИндексацияСоциальныхНачислений3);
			БазаИндексацияСоциальныхНачислений4 = ?(ИсходныеДанные.БазаИндексацияСоциальныхНачислений4 = NULL, 0, ИсходныеДанные.БазаИндексацияСоциальныхНачислений4);
			РезультатПолнаяБаза = БазаИндексацияСоциальныхНачислений1
			+ БазаИндексацияСоциальныхНачислений2
			+ БазаИндексацияСоциальныхНачислений3
			+ БазаИндексацияСоциальныхНачислений4;
			Если РезультатПолнаяБаза = 0 Тогда
				ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о базе ");
			Иначе
	            
				Начало = ИсходныеДанные.ИндексацияСоциальныхНачисленийНачало;
				Конец  = ИсходныеДанные.ИндексацияСоциальныхНачисленийКонец;
		
				КоэффициентИндексации	= РассчитатьЗаписьРегистраРасчета_Индексация_Коэффициент( Начало, Конец, НеобходимыеДанные, "ИндексацияСоциальныхНачислений" );
				РезультатБаза			= РассчитатьЗаписьРегистраРасчета_Индексация_База( ИсходныеДанные, НеобходимыеДанные, "ИндексацияСоциальныхНачислений" );
					
				Если КомментироватьРасчет Тогда
					ОбщегоНазначения.КомментарийРасчета("База индексации соц.начислений:" + РезультатБаза, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Базовый период соц.начислений: " + Начало, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Коэффициент индексации соц.начислений: " + КоэффициентИндексации, КомментарийВидаРасчета);
				КонецЕсли;
				
				Результат  = РезультатБаза * КоэффициентИндексации;
			КонецЕсли;
			
			
			ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			
			// проверем все ли показатели получены			
			Для НомерСтроки = 1 По ИсходныеДанные.КоличествоПоказателей Цикл
				Если ИсходныеДанные["Показатель"+НомерСтроки] = Null Тогда
					ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": не получен Показатель """ + ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] + """");
					РезультатПолучен = Ложь;
				ИначеЕсли КомментироватьРасчет Тогда
					Если ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] = "Расчетная база" Тогда
						ОбщегоНазначения.КомментарийРасчета(ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"]+ ": " + Строка(ИсходныеДанные["РезультатБаза"]), КомментарийВидаРасчета);						
					Иначе
						ОбщегоНазначения.КомментарийРасчета(ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"]+ ": " + Строка(ИсходныеДанные["Показатель"+НомерСтроки]), КомментарийВидаРасчета);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
				
			Если РезультатПолучен Тогда
				Попытка
					ФормулаРасчета = ИсходныеДанные.ФормулаРасчета;
					Если КомментироватьРасчет Тогда
						Для НомерСтроки = 1 По ИсходныеДанные.КоличествоПоказателей Цикл
							Если ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] = "Расчетная база" Тогда
								ФормулаРасчета = СтрЗаменить(ФормулаРасчета,"Показатель"+НомерСтроки, "РезультатБаза")							
							КонецЕсли;
						КонецЦикла                           
					КонецЕсли;
					
					Результат = Вычислить(ФормулаРасчета);


				Исключение					
					ОбщегоНазначения.КомментарийРасчета(ИсходныеДанные.СотрудникНаименование + "; " +ИсходныеДанные.ВидРасчетаНаименование +" Ошибка в формуле расчета!", КомментарийВидаРасчета, ,,Перечисления.ВидыСообщений.Ошибка);
				КонецПопытки;
			КонецЕсли;			
			
			
			// Взносы в фонды
			// 
		ИначеЕсли	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Взносы 
			ИЛИ	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ Тогда
			
			Если СтрокаДвижений.ВидРасчета.СтавкаПоПериодуРегистрации Тогда
				
				Если НЕ СтрокаДвижений.Сторно Тогда
					
						База = ?(ИсходныеДанные.РезультатБаза = NULL, 0, ИсходныеДанные.РезультатБаза);
						БазаДо = ?(ИсходныеДанные.БазаДо = NULL, 0, ИсходныеДанные.БазаДо);
						БазаВзносаДо = ?(ИсходныеДанные.БазаВзносаДо = NULL, 0, ИсходныеДанные.БазаВзносаДо);
						БазаВычет = ?(ИсходныеДанные.БазаВычет = NULL, 0, ИсходныеДанные.БазаВычет);
						БазаПолная = База;
						
					Если ИсходныеДанные.РезультатБаза = NULL Тогда
						Если СтрокаДвижений.ВидРасчета.КатегорияРасчета <> Перечисления.КатегорииРасчетов.Первичное Тогда
							//Это нормальная ситуация, базы может и не быть, выдавать сообщения не нужно
						ИначеЕсли СтрокаДвижений.БазовыйПериодНачало < СтрокаДвижений.ПериодРегистрации Тогда
							//Это нормальная ситуация, базы за прошлый период может и не быть, выдавать сообщения не нужно
						ИначеЕсли ТипЗнч(ИсходныеДанные.Регистратор) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
							//В ЗКВ это тоже нормально, могут быть "специфические выплаты"
						Иначе	 
							ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не удалось определить базу взноса ");
						КонецЕсли;						СтрокаДвижений.База			= 0;
						СтрокаДвижений.БазаВзноса	= 0;
						СтрокаДвижений.БазаВычет	= БазаВычет;
						
					ИначеЕсли ИсходныеДанные.Предел = NULL Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о пределе ");
						СтрокаДвижений.База			= 0;
						СтрокаДвижений.БазаВзноса	= 0;
						СтрокаДвижений.БазаВычет	= 0;
						
					ИначеЕсли (База - БазаДо) <> 0 И (ИсходныеДанные.Ставка = Неопределено ИЛИ ИсходныеДанные.Ставка = NULL) Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о ставке ");
						СтрокаДвижений.База			= 0;
						СтрокаДвижений.БазаВзноса	= 0;
						СтрокаДвижений.БазаВычет	= 0;
						
					Иначе
						
						Коэф = 1;
						Если	СтрокаДвижений.ДатаНачала <> СтрокаДвижений.БазовыйПериодНачало
							ИЛИ	СтрокаДвижений.ДатаОкончания <> СтрокаДвижений.БазовыйПериодКонец
							Тогда
							Коэф = ?( СтрокаДвижений.ОтработаноДнейВсего = 0, 1, СтрокаДвижений.ОтработаноДней / СтрокаДвижений.ОтработаноДнейВсего);
							
						КонецЕсли;
						
						Предел = ?(ИсходныеДанные.Предел = NULL, 0, ИсходныеДанные.Предел);
						Ставка = ?(ИсходныеДанные.Ставка = NULL, 0, ИсходныеДанные.Ставка);
						Порог = ?(ИсходныеДанные.Порог = NULL, 0, ИсходныеДанные.Порог);
						НижнийПорог = ?(ИсходныеДанные.НижнийПорог = NULL, 0, ИсходныеДанные.НижнийПорог);
						
						БазаВзноса = Мин(Макс(Предел-БазаВычет,0), База);
						
						Если	СтрокаДвижений.ВидРасчета.СпособРасчетаПоШкале = Перечисления.СпособыРасчетаПоШкале.Прогрессивный Тогда 
							База = Макс( Мин(Порог, База)- НижнийПорог, 0);
							БазаВзноса = Макс( Мин(Порог, БазаВзноса)- НижнийПорог, 0);
							
							БазаДо = Макс( Мин(Порог, БазаДо)- НижнийПорог, 0);
							БазаВзносаДо = Макс( Мин(Порог, БазаВзносаДо)- НижнийПорог, 0);
						КонецЕсли;
						
						Если НЕ ИсходныеДанные.ВидРасчета.ЕСВ Тогда
							База = (База - БазаДо) * Коэф;
							БазаВзноса = (БазаВзноса - БазаВзносаДо) * Коэф;
						Иначе	
							Если ИсходныеДанные.ВидРасчета.КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное
							   И СтрокаДвижений.БазовыйПериодНачало < ИсходныеДанные.Регистратор.ПериодРегистрации Тогда
								//Вообще-то, таких ситуаций быть не должно.
								//Но такое возможно, например, корректировка отпуска в прошедших периодах задним числом.
								//В этом случае не надо учитывать БазуДо, отнесем все сумму в доходы соответсвующего периода.
								//И в этом случае покажем корректировку
								Если База > 0 Тогда
									СтрокаДвижений.ТипНачисления = 2;
								ИначеЕсли База < 0 Тогда
									СтрокаДвижений.ТипНачисления = 3;
								КонецЕсли;	
							Иначе
								База = (База - БазаДо) * Коэф;
								БазаВзноса = (БазаВзноса - БазаВзносаДо) * Коэф;
							КонецЕсли;	
						КонецЕсли;		
							
						Результат  = БазаВзноса * Ставка;
						
						Если КомментироватьРасчет Тогда
							
							КомментарийБазы = ОбщегоНазначения.КомментарийРасчета("Базовые начисления составили всего: " + БазаПолная, КомментарийВидаРасчета,,,, Ложь);
							РасшифровкаБазы = ИсходныеДанные.Выбрать();
							Пока РасшифровкаБазы.Следующий() Цикл
								Если РасшифровкаБазы.РезультатБаза <> 0 Тогда
									ОбщегоНазначения.КомментарийРасчета(РасшифровкаБазы.ВидРасчетаРазрезНаименование + ": " + РасшифровкаБазы.РезультатБаза, КомментарийБазы);
								КонецЕсли;
							КонецЦикла;
							ОбщегоНазначения.КомментарийРасчета("База расчетная: " + База, КомментарийВидаРасчета,,,, Ложь);
							Если БазаДо <> 0 Тогда 
								ОбщегоНазначения.КомментарийРасчета("База до: " + БазаДо, КомментарийВидаРасчета,,,, Ложь);
							Конецесли;	
							Если БазаВычет <> 0 Тогда 
								ОбщегоНазначения.КомментарийРасчета("База вычет: " + БазаВычет, КомментарийВидаРасчета,,,, Ложь);
							КонецЕсли;	
							ОбщегоНазначения.КомментарийРасчета("База с учетом ограничений: " + БазаВзноса, КомментарийВидаРасчета,,,, Ложь);
							
							Если	СтрокаДвижений.ВидРасчета.СпособРасчетаПоШкале = Перечисления.СпособыРасчетаПоШкале.Прогрессивный Тогда 
								ОбщегоНазначения.КомментарийРасчета("Расчет по прогрессивной шкале (Нижний порог, Порог): ("+НижнийПорог+", "+Порог+")", КомментарийВидаРасчета);
							КонецЕсли;
							ОбщегоНазначения.КомментарийРасчета("Сумма предела : " + Предел, КомментарийВидаРасчета);
							Если Коэф <> 1 Тогда
								ОбщегоНазначения.КомментарийРасчета("	Коэффициент : " + Коэф, КомментарийВидаРасчета);
							КонецЕсли;
						КонецЕсли;
						
						//дополнительные реквизиты регистра расчетов взносы в фонды
						СтрокаДвижений.База			= База;
						СтрокаДвижений.БазаВзноса	= БазаВзноса;
						Результат					= Результат;
						СтрокаДвижений.БазаВычет	= БазаВычет;
						
						СтрокаДвижений.СтатьяНалоговойДекларации	= ИсходныеДанные.СтатьяНалоговойДекларации;
						СтрокаДвижений.Ставка						= Ставка;
						
						Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Взносы Тогда
							Результат  = Окр(Результат,2);
						КонецЕсли; 
						
					КонецЕсли;
					
				Иначе
					//Сторно
					СтрокаДвижений.База = 0;
					СтрокаДвижений.БазаВзноса = 0;
					СтрокаДвижений.БазаВычет = 0;
				КонецЕсли
				
			Иначе
				
				Если НЕ СтрокаДвижений.Сторно Тогда
					
					Если ИсходныеДанные.РезультатБаза = NULL Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не определены базовые начисления ");
					ИначеЕсли ИсходныеДанные.Предел = NULL Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о пределе ");
					ИначеЕсли ИсходныеДанные.РезультатБаза <> 0 И (ИсходныеДанные.Ставка = Неопределено ИЛИ ИсходныеДанные.Ставка = NULL) Тогда
						ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных о ставке ");
					Иначе
						
						Коэф = 1;
						Если	СтрокаДвижений.ДатаНачала <> СтрокаДвижений.БазовыйПериодНачало
							ИЛИ	СтрокаДвижений.ДатаОкончания <> СтрокаДвижений.БазовыйПериодКонец
							Тогда
							Коэф = ?( СтрокаДвижений.ОтработаноДнейВсего = 0, 1, СтрокаДвижений.ОтработаноДней / СтрокаДвижений.ОтработаноДнейВсего);
							
						КонецЕсли;
						
						Предел = ?(ИсходныеДанные.Предел = NULL, 0, ИсходныеДанные.Предел);
						Ставка = ?(ИсходныеДанные.Ставка = NULL, 0, ИсходныеДанные.Ставка);
						Порог = ?(ИсходныеДанные.Порог = NULL, 0, ИсходныеДанные.Порог);
						НижнийПорог = ?(ИсходныеДанные.НижнийПорог = NULL, 0, ИсходныеДанные.НижнийПорог);
						
						БазаЗаМесяц = ?(ИсходныеДанные.РезультатБаза = NULL, 0, ИсходныеДанные.РезультатБаза);
						БазаВзносаЗаМесяц = Мин(Предел, БазаЗаМесяц);
						Если	СтрокаДвижений.ВидРасчета.СпособРасчетаПоШкале = Перечисления.СпособыРасчетаПоШкале.Прогрессивный Тогда 
							БазаЗаМесяц = Макс( Мин(Порог, БазаЗаМесяц)- НижнийПорог, 0);
							БазаВзносаЗаМесяц = Макс( Мин(Порог, БазаВзносаЗаМесяц)- НижнийПорог, 0);
						КонецЕсли;
						
						РезультатЗаМесяц  = БазаВзносаЗаМесяц * Ставка;
						
						БазаВзноса = БазаВзносаЗаМесяц * Коэф;
						База       = БазаЗаМесяц * Коэф;
						Результат  = РезультатЗаМесяц * Коэф;
						
						Если КомментироватьРасчет Тогда
							
							КомментарийБазы = ОбщегоНазначения.КомментарийРасчета("Базовые начисления составили всего: " + База, КомментарийВидаРасчета,,,, Ложь);
							РасшифровкаБазы = ИсходныеДанные.Выбрать();
							Пока РасшифровкаБазы.Следующий() Цикл
								Если РасшифровкаБазы.РезультатБаза <> 0 Тогда
									ОбщегоНазначения.КомментарийРасчета(РасшифровкаБазы.ВидРасчетаРазрезНаименование + ": " + РасшифровкаБазы.РезультатБаза, КомментарийБазы);
								КонецЕсли;
							КонецЦикла;

							Если	СтрокаДвижений.ВидРасчета.СпособРасчетаПоШкале = Перечисления.СпособыРасчетаПоШкале.Прогрессивный Тогда 
								ОбщегоНазначения.КомментарийРасчета("Расчет по прогрессивной шкале (Нижний порог, Порог): ("+НижнийПорог+", "+Порог+")", КомментарийВидаРасчета);
							КонецЕсли;
							ОбщегоНазначения.КомментарийРасчета("Сумма предела : " + Предел, КомментарийВидаРасчета);
							ОбщегоНазначения.КомментарийРасчета("Сумма дохода за месяц: " + БазаЗаМесяц, КомментарийВидаРасчета);
							ОбщегоНазначения.КомментарийРасчета("Сумма дохода за месяц с учетом предела : " + БазаВзносаЗаМесяц, КомментарийВидаРасчета);
							Если Коэф <> 1 Тогда
								ОбщегоНазначения.КомментарийРасчета("	Коэффициент : " + Коэф, КомментарийВидаРасчета);
							КонецЕсли;
						КонецЕсли;
						
						//дополнительные реквизиты регистра расчетов взносы в фонды
						СтрокаДвижений.База			= База;
						СтрокаДвижений.БазаВзноса	= БазаВзноса;
						Результат					= Результат;
						
						СтрокаДвижений.СтатьяНалоговойДекларации	= ИсходныеДанные.СтатьяНалоговойДекларации;
						СтрокаДвижений.Ставка						= Ставка;
						
						//СтрокаДвижений.БазаЗаМесяц			= БазаЗаМесяц;
						//СтрокаДвижений.БазаВзносаЗаМесяц	= БазаВзносаЗаМесяц;
						
						Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ Тогда
							Результат  = Окр(Результат,6);
						Иначе
							Результат  = Окр(Результат,2);
						КонецЕсли; 
						
					КонецЕсли;
					
				Иначе
					//Сторно
					СтрокаДвижений.База = -СтрокаДвижений.База;
					СтрокаДвижений.БазаВзноса = -СтрокаДвижений.БазаВзноса;
				КонецЕсли
				
			КонецЕсли;
			
		Иначе // Не найден способ расчета
			ОбщегоНазначения.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": вид расчета не предусмотрен");
		КонецЕсли;
		
		Если СтрокаДвижений.Сторно Тогда
			СтрокаДвижений.Результат = Результат * -1;
			Если КомментироватьРасчет Тогда
				ОбщегоНазначения.КомментарийРасчета("Расчет сторно", КомментарийВидаРасчета, , , Перечисления.ВидыСообщений.ВажнаяИнформация);
			КонецЕсли;
		Иначе
			СтрокаДвижений.Результат = Результат;
		КонецЕсли;
		
		Если КомментироватьРасчет Тогда
			ОбщегоНазначения.КомментарийРасчета("Результат расчета: " + СтрокаДвижений.Результат, КомментарийВидаРасчета);
		КонецЕсли;
		
	КонецЕсли;
//	
КонецПроцедуры  // РассчитатьЗаписьРегистраРасчета



//////////////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ И ФУНКЦИИ, обход результатов запросов

// Функция предназначена для получения структуры НеобходимыеДанные с элементами:
//			База
//			НормаВремени
//			ОтработаноВремени
// большая часть из которых - булево и означает необходимость получения соотв. исходных данных 
// расчета записей регистра расчета;
// для некоторых начислений, здесь формируются временные структуры (таблицы значений, массивы),
// которые в последствии будут использоваться в расчете
//
// Параметр:
//	МассивСпособРасчета - массив элементов типа СпособРасчетаСсылка или ПланВидовРасчетаСсылка
//  НеобходимыеДанные	- структура - структура с необходимыми общими данными для расчета
//
// Возвращаемое значение:
//  НеобходимыеДанные
Функция ПолучитьСтруктуруНеобходимыхДанных(МассивСпособРасчета, МассивПоказателей, НеобходимыеДанные = "" )
	
	НеобходимыеДанные = Новый Структура;
	
	НеобходимыеДанные.Вставить("База", Ложь);                     
	НеобходимыеДанные.Вставить("БазаУдержаний", Ложь);
	
	НеобходимыеДанные.Вставить("ГосударственноеПособие", Ложь);
	НеобходимыеДанные.Вставить("ГосударственноеПособиеУчитыватьВремя", Ложь);
	
	НеобходимыеДанные.Вставить("ВыслугаЛет", Ложь);
	
	НеобходимыеДанные.Вставить("ПараметрыИсполнительногоЛиста", Ложь);
	
	НеобходимыеДанные.Вставить("Календарные", Ложь);
	НеобходимыеДанные.Вставить("НормаВремени", Ложь);
	НеобходимыеДанные.Вставить("НормаВремениЗаМесяц", Ложь);
	НеобходимыеДанные.Вставить("КоэффициентНочных", Ложь);
	НеобходимыеДанные.Вставить("ОтработаноВремени", Ложь);
	НеобходимыеДанные.Вставить("СдельныйЗаработок", Ложь);
	//??
	НеобходимыеДанные.Вставить("СреднийЗаработокОтпуска", Ложь);
	НеобходимыеДанные.Вставить("КадровыеДанные", Ложь);
	
	НеобходимыеДанные.Вставить("ИсчисленныйНДФЛ", Ложь);
	НеобходимыеДанные.Вставить("ИсчисленныеВзносы", Ложь);
	
	НеобходимыеДанные.Вставить("ПределПоДокументуОснованию", Ложь);
	НеобходимыеДанные.Вставить("НакопленныеДанныеПоДокументуОснованию", Ложь);
	
	//??                      
	//НеобходимыеДанные.Вставить("РазмерПособияПоУходуЗаРебенкомДо3Лет", Ложь);
	НеобходимыеДанные.Вставить("ПараметрыПочты", Ложь);
	
	НеобходимыеДанные.Вставить("СуммаКомпенсации", Ложь);
	НеобходимыеДанные.Вставить("НеобходимыИндексыИнфляции", Ложь);
	НеобходимыеДанные.Вставить("ИндексацияЗарплаты", Ложь);
	НеобходимыеДанные.Вставить("ИндексацияСоциальныхНачислений", Ложь);
	НеобходимыеДанные.Вставить("БазаИндексацииСовместителя", Ложь);
	
	НеобходимыеДанные.Вставить("ГосударственноеПособие", Ложь);
	НеобходимыеДанные.Вставить("ПособиеПриРождении", Ложь);
	НеобходимыеДанные.Вставить("ПособиеПоУходуЗаРебенкомДо3Лет", Ложь);
	                            
	НеобходимыеДанные.Вставить("ПоказателиСхемМотивации", Ложь);
	НеобходимыеДанные.Вставить("Стаж", Ложь);
	
	
	// для расчета базы необходимо получить Минимальную зарплату для социальных групп
	тбСоциальныеГруппы = Новый ТаблицаЗначений;
	тбСоциальныеГруппы.Колонки.Добавить("СоцГруппа");
	СтрокатбСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
	СтрокатбСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.ДетиДо6;
	СтрокатбСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
	СтрокатбСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.ДетиДо18;
	СтрокатбСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
	СтрокатбСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.Трудоспособные; 
	СтрокатбСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
	СтрокатбСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.НеТрудоспособные;
	// полученные доп.параметры помещаем в структуру
	НеобходимыеДанные.Вставить("тбСоциальныеГруппы", тбСоциальныеГруппы);
	
	
	// данный Если... необходимо пополнять при появлении новых способ расчета или
	// видов расчета, которые не укладываются ни в один из способов
	Для Каждого СпособРасчета Из МассивСпособРасчета Цикл
		Если	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ГосударственноеПособие Тогда
			НеобходимыеДанные.ГосударственноеПособие = Истина;
			НеобходимыеДанные.ГосударственноеПособиеУчитыватьВремя = Истина;
			
		////ИначеЕсли	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет Тогда
		////	НеобходимыеДанные.ПособиеПоУходуЗаРебенкомДо3Лет = Истина;
		////	НеобходимыеДанные.ГосударственноеПособие = Истина;
		////	
		////ИначеЕсли	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПриРождении Тогда
		////	НеобходимыеДанные.ПособиеПриРождении = Истина;

		ИначеЕсли	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.НормаВремени = Истина;
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
			
		ИначеЕсли 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням ИЛИ 
			СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.НормаВремени = Истина;
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
			НеобходимыеДанные.КадровыеДанные = Истина; 
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке ИЛИ
			СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифДневной Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
			НеобходимыеДанные.КадровыеДанные = Истина; 
			
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке 
			Или СпособРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой 
			Тогда
			НеобходимыеДанные.ОтработаноВремени   = Истина;
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
			
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
			НеобходимыеДанные.ОтработаноВремени   = Истина;
			
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
			НеобходимыеДанные.ОтработаноВремени   = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
			НеобходимыеДанные.База = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВыслугаЛет Тогда
			НеобходимыеДанные.База       = Истина;
			НеобходимыеДанные.ВыслугаЛет = Истина;
			
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнителныйЛистСУчетомОграничения Тогда
			НеобходимыеДанные.БазаУдержаний = Истина;
			
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом
			ИЛИ 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.АлиментыПроцентом Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ИсчисленныйНДФЛ = Истина;
			НеобходимыеДанные.ИсчисленныеВзносы = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
			НеобходимыеДанные.ПараметрыИсполнительногоЛиста = Истина;	
			
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела
			ИЛИ 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.АлиментыПроцентомДоПредела Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ИсчисленныйНДФЛ = Истина;
			НеобходимыеДанные.ИсчисленныеВзносы = Истина;
			НеобходимыеДанные.ПределПоДокументуОснованию = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
			НеобходимыеДанные.ПараметрыИсполнительногоЛиста = Истина;	
			
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.АлиментыФиксСуммой
			ИЛИ 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммой Тогда

			НеобходимыеДанные.БазаУдержаний = Истина;
			НеобходимыеДанные.ПараметрыИсполнительногоЛиста = Истина;	
			
			
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела
			ИЛИ 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.АлиментыФиксСуммойДоПредела Тогда
			НеобходимыеДанные.ПределПоДокументуОснованию = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
			НеобходимыеДанные.ПараметрыИсполнительногоЛиста = Истина;
			
		ИначеЕсли	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС 
			ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку 
			ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска 
			Тогда
			
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.НормаВремени = Истина;
			НеобходимыеДанные.Календарные = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.НормаВремени = Истина;
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.Календарные = Истина;
			
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ПараметрыПочты =  Истина;
			НеобходимыеДанные.ПараметрыИсполнительногоЛиста = Истина;	
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
			НеобходимыеДанные.СдельныйЗаработок = Истина;	
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
			НеобходимыеДанные.СдельныйЗаработок = Истина;	
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			НеобходимыеДанные.ПоказателиСхемМотивации = Истина;

			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КомпенсацияНевыплаченнойЗарплаты Тогда
			НеобходимыеДанные.СуммаКомпенсации = Истина;	
			НеобходимыеДанные.НеобходимыИндексыИнфляции = Истина;	
			
			тбКоэффициентыИнфляции = Новый ТаблицаЗначений;
			тбКоэффициентыИнфляции.Колонки.Добавить("Начало");
			тбКоэффициентыИнфляции.Колонки.Добавить("Конец");
			тбКоэффициентыИнфляции.Колонки.Добавить("КоэффициентИнфляции");
			
			НеобходимыеДанные.Вставить("тбКоэффициентыИнфляции", тбКоэффициентыИнфляции);
			
		ИначеЕсли   СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИндексацияЗарплаты
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИндексацияСоциальныхНачислений Тогда
			//НеобходимыеДанные.База = Истина;	
			НеобходимыеДанные.НеобходимыИндексыИнфляции = Истина;	
			НеобходимыеДанные.База = Истина;
			
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИндексацияЗарплаты Тогда
				НеобходимыеДанные.ИндексацияЗарплаты = Истина;
			ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИндексацияСоциальныхНачислений Тогда
				НеобходимыеДанные.ИндексацияСоциальныхНачислений = Истина;
			КонецЕсли;
			
			// для расчета коэффициента индексации необходимо заполнить таблицу с индексами инфляции
			тбКоэффициентыИндексации = Новый ТаблицаЗначений;
			тбКоэффициентыИндексации.Колонки.Добавить("Начало");
			тбКоэффициентыИндексации.Колонки.Добавить("Конец");
			тбКоэффициентыИндексации.Колонки.Добавить("ИндексацияЗарплаты");
			тбКоэффициентыИндексации.Колонки.Добавить("ИндексацияСоциальныхНачислений");
			
			
			// для расчета базы необходимо получить Минимальную зарплату для социальных групп
			тбСоциальныеГруппы = Новый ТаблицаЗначений;
			тбСоциальныеГруппы.Колонки.Добавить("СоцГруппа");
			
			СтрокатаСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
			СтрокатаСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.ДетиДо6;
			СтрокатаСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
			СтрокатаСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.ДетиДо18;
			СтрокатаСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
			СтрокатаСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.Трудоспособные; 
			СтрокатаСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
			СтрокатаСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.НеТрудоспособные;
			
			// полученные доп.параметры помещаем в структуру
			НеобходимыеДанные.Вставить("тбКоэффициентыИндексации", тбКоэффициентыИндексации);
			НеобходимыеДанные.Вставить("тбСоциальныеГруппы", тбСоциальныеГруппы);
			НеобходимыеДанные.Вставить("НачалоРасчетаИндексации", '2003.03.01');
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Показатель Из МассивПоказателей Цикл
		
		НеобходимыеДанные.СдельныйЗаработок = НеобходимыеДанные.СдельныйЗаработок Или Показатель = Справочники.ПоказателиСхемМотивации.СдельнаяВыработка;
		НеобходимыеДанные.ОтработаноВремени = НеобходимыеДанные.ОтработаноВремени Или Показатель = Справочники.ПоказателиСхемМотивации.ВремяВДнях Или Показатель = Справочники.ПоказателиСхемМотивации.ВремяВЧасах;
		НеобходимыеДанные.НормаВремениЗаМесяц = НеобходимыеДанные.НормаВремениЗаМесяц Или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВДнях Или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах;
		НеобходимыеДанные.База = НеобходимыеДанные.База Или Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза Или Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБазаВремяВДнях Или Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБазаВремяВЧасах Или Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБазаОплаченоДнейЧасов;
		НеобходимыеДанные.Стаж = НеобходимыеДанные.Стаж Или Показатель = Справочники.ПоказателиСхемМотивации.Стаж;
		
	КонецЦикла;
	
	
	Возврат НеобходимыеДанные;
	
КонецФункции

// Рассчитывает коэффициент из переданного набора записей
//
// Параметры: 
//  Начало				- дата		- первый месяц, который нужно учитывать в расчете
//  Конец				- дата		- последний месяц, который нужно учитывать в расчете
//  НеобходимыеДанные	- структура	- структура с необходимыми общими данными для расчета
//
// Возвращаемое значение:
//  Число, если меньше 0,01, то 0
//
Функция		РассчитатьЗаписьРегистраРасчета_КоэффициентКомпенсации( Начало, Конец, НеобходимыеДанные )
	
	СтруктураОтбора = Новый Структура(); //можно будет сократить на пару секунд время
	СтруктураОтбора.Вставить("Начало", Начало);
	СтруктураОтбора.Вставить("Конец", Конец);
	
	МассивКоэффициентов = НеобходимыеДанные.тбКоэффициентыИнфляции.НайтиСтроки(СтруктураОтбора);
	
	Если МассивКоэффициентов.Количество() = 1 Тогда
		
		// результат уже рассчитан
		Результат = МассивКоэффициентов[0].КоэффициентИнфляции;
		
	Иначе
		
		// рассчитываем первый раз
		Результат = 1;
		
		// проверим не пропущен ли какой-то из месяцев
		ТекМесяц = НачалоМесяца(Начало);
		Пока ТекМесяц <= Конец Цикл
			Если НеобходимыеДанные.тбИндексыИнфляции.Найти(ТекМесяц,"Период") = Неопределено  Тогда
				Сообщить("Отсутствует информация об индексе инфляции за: " + Формат(ТекМесяц, "ДФ=ММММ-гггг"));
				Возврат 0;
			КонецЕсли; 
			ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
		КонецЦикла; 
		
		
		Для каждого ТекущаяСтрока Из НеобходимыеДанные.тбИндексыИнфляции Цикл
			
			Если ТекущаяСтрока.Период < Начало
				Или ТекущаяСтрока.Период > Конец Тогда
				
				Продолжить;			
			КонецЕсли; 
			Результат = Результат * ТекущаяСтрока.ИндексИнфляции;
			
		КонецЦикла;  
		
		текСтрока = НеобходимыеДанные.тбКоэффициентыИнфляции.Добавить();
		текСтрока.Начало              = Начало;
		текСтрока.Конец               = Конец;
		текСтрока.КоэффициентИнфляции = Результат;
		
	КонецЕсли;   
	
	Возврат ?( Результат < 1, 0, Результат - 1 ); 
	
КонецФункции // РассчитатьЗаписьРегистраРасчета_КоэффициентКомпенсации()

// Рассчитывает коэффициент индексации за заданный период и записывает значение во временный массив
// если во временном массиве уже есть значение коэффициента за период, то повторного расчета не производится
// возвращается значение, рассчитанное ранее 
//
// Параметры: 
//  Начало				- дата		- первый месяц, который нужно учитывать в расчете
//  Конец				- дата		- последний месяц, который нужно учитывать в расчете
//  НеобходимыеДанные	- структура - структура с необходимыми общими данными для расчета
//  ИмяИндексации		- строка	- "ИндексацияЗарплаты" или "ИндексацияСоциальныхНачислений"
//
// Возвращаемое значение:
//  число, если меньше 0,01, то 0
//
Функция		РассчитатьЗаписьРегистраРасчета_Индексация_Коэффициент(знач Начало, Конец, НеобходимыеДанные, ИмяИндексации )
	
	Начало = Макс(Добавитьмесяц(НачалоМесяца(Начало),1), НеобходимыеДанные.НачалоРасчетаИндексации);
	Если Конец < Начало Тогда
		Возврат 0;
	КонецЕсли;
	
	
	СтркОтбора = Новый Структура("Начало, Конец");
	СтркОтбора.Начало = Начало;
	СтркОтбора.Конец  = Конец;
	масКоэффициентыИндексации = НеобходимыеДанные.тбКоэффициентыИндексации.НайтиСтроки(СтркОтбора);
	
	Если масКоэффициентыИндексации.Количество() <> 0 
		И масКоэффициентыИндексации[0][ИмяИндексации] <> Неопределено Тогда
		
		//коэффициент уже рассчитан
		Коэф = масКоэффициентыИндексации[0][ИмяИндексации];
		
	Иначе
		
		// такого коэффициента в таблице еще нет
		Коэф = 1; 
		ТекКоэф = 1;            // умножаем коэф., до достижения порога индексации  
		ПорогИндексации = 1.01; // это значение возможно вынесется в отдельную процедуру глобального модуля
		
		ОкончаниеПериода = ДобавитьМесяц(НачалоМесяца(Конец), -2); 
		
		Для каждого ТекущаяСтрока Из НеобходимыеДанные.тбИндексыИнфляции Цикл
			
			Если ТекущаяСтрока.Период < Начало
				Или ТекущаяСтрока.Период > ОкончаниеПериода Тогда
				
				Продолжить;			
			КонецЕсли; 
			
			ТекКоэф = ТекКоэф * ТекущаяСтрока.ИндексИнфляции;
			
			Если Окр(ТекКоэф, 3) > ПорогИндексации Тогда
				
				Коэф = Коэф * Окр(ТекКоэф, 3); 
				ТекКоэф = 1;
				
			КонецЕсли;
			
			//ОбщегоНазначения.СообщитьСлужебнуюИнформацию("Отладка: расчет индексации по "+ НеобходимыеДанные.Сотрудник + " в периоде "+ Формат(ТекущаяСтрока.Период, "ДФ= ММММ - гггг ") + " коэффициент = " + Коэф);
			
		КонецЦикла; 
		
		
		Коэф = Окр(Коэф,3) - 1;
		//ОбщегоНазначения.СообщитьСлужебнуюИнформацию("Отладка: коэффициент = "+ Окр(Коэф,3));
		
		// запомним рассчитанный результат
		текСтрока 		 = НеобходимыеДанные.тбКоэффициентыИндексации.Добавить();
		текСтрока.Начало = Начало;
		текСтрока.Конец  = Конец;
		текСтрока[ИмяИндексации] = Коэф;
		
	КонецЕсли; 
	
	Возврат Коэф;
	
КонецФункции // РассчитатьЗаписьРегистраРасчета_Индексация_Коэффициент()

// Рассчитывает сумму базы для индексации зарплаты с учетом прожиточных минимумов различных социальных групп
//
// Параметры
//  ИсходныеДанные		- выборка	- выборка из результата запроса с исходными данными для расчета
//  НеобходимыеДанные	- структура - структура с необходимыми общими данными для расчета
//  ИмяИндексации		- строка	- "ИндексацияЗарплаты" или "ИндексацияСоциальныхНачислений"
//
// Возвращаемое значение:
//  число
//
Функция		РассчитатьЗаписьРегистраРасчета_Индексация_База(ИсходныеДанные, НеобходимыеДанные, ИмяИндексации)
	
	Если ИмяИндексации = "ИндексацияЗарплаты" Тогда
		БазаИндексацииСовместителя = ?(ИсходныеДанные.БазаИндексацииСовместителя = NULL ИЛИ ИсходныеДанные.БазаИндексацииСовместителя = Неопределено, 0, ИсходныеДанные.БазаИндексацииСовместителя);
	Иначе
		БазаИндексацииСовместителя = 0;
	КонецЕсли;
	
	
	табПороги = НеобходимыеДанные.тбСоциальныеГруппы.Скопировать();
	табПороги.Колонки.Добавить("База");
	табПороги.Колонки.Добавить("Порог");
	КвоСоцГрупп = табПороги.Количество();
	
	Для Инд = 1  По КвоСоцГрупп Цикл
		
		табПороги[Инд-1].База = ИсходныеДанные["База" + ИмяИндексации + Инд];
		табПороги[Инд-1].Порог = ИсходныеДанные["Порог" + ИмяИндексации + Инд];
		
	КонецЦикла;
	
	// считаем что совместители всегда работают по статье трудоспособные
	табПороги[2].База = табПороги[2].База + БазаИндексацииСовместителя;
	
	табПороги.Сортировать("Порог");
	
	РезультатБаза = 0;
	РезультатПолнаяБаза = 0;
	Для Инд = 1  По КвоСоцГрупп Цикл
		РезультатБаза = РезультатБаза + Мин( табПороги[Инд-1].База, табПороги[Инд-1].Порог - РезультатБаза);
		РезультатПолнаяБаза = РезультатПолнаяБаза + табПороги[Инд-1].База;
	КонецЦикла;
	
	РезультатБаза = Макс(РезультатБаза - БазаИндексацииСовместителя, 0);
	
	Если (РезультатПолнаяБаза - БазаИндексацииСовместителя) <> ИсходныеДанные["РезультатБаза"+ИмяИндексации]
		и ИсходныеДанные["РезультатБаза"+ИмяИндексации] <> 0 Тогда
		
		РезультатБаза = РезультатБаза * ИсходныеДанные["РезультатБаза"+ИмяИндексации] / (РезультатПолнаяБаза - БазаИндексацииСовместителя);
	КонецЕсли; 
	
	ОбщегоНазначения.СообщитьСлужебнуюИнформацию("Отладка: база индексации = " + РезультатБаза);
	
	Возврат РезультатБаза;
	
КонецФункции // РассчитатьЗаписьРегистраРасчета_Индексация_База()




//////////////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ И ФУНКЦИИ, получение данных расчета

// Возвращает список алгоритмов начислений, являющихся почасовыми отклонениями
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокНачисленийПочасовыхОтклонений() Экспорт

	СписокСпособов = Новый СписокЗначений;
	 
	СписокСпособов.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
	СписокСпособов.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);

	Возврат СписокСпособов

КонецФункции // ПолучитьСписокДополнительныхВариантовНачислений()


// Получает данные для расчета ресурсов записей регистра расчета
//
//	ИмяРегистра - строка, имя регистра расчета
//	КатегорияРасчета - ссылка на значение перечисленич КатегорииРасчетов
//	НеобходимыеДанные - Структура с элементами 
//			База,
//			НормаВремени,
//			ОтработаноВремени,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//	Перерасчет - булево - признак того, что получаем данные для случая перерасчета
//	Физлица - массив ссылок на физлиц - выбранные для перерасчета физлица, или массив содержащий ссылку
//			  на физлицо по которому производится расчет (расчет по одному работнику из документа)	
//
// Возвращает выборку результата запроса
Функция ПолучитьДанныеДляРасчета(ИмяРегистра,
									КатегорияРасчета,
									НеобходимыеДанные,
									Регистратор,
									Организация,
									ПериодРегистрации,
									Сотрудники = Неопределено,
									КомментироватьРасчет = Ложь,
									ФизЛица = Неопределено) Экспорт

	Если НеобходимыеДанные.НеобходимыИндексыИнфляции Тогда
		// индексы инфляции
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
		
		Запрос.Текст = "
		|ВЫБРАТЬ 
		|	ИндексыИнфляции.Период			КАК Период, 
		|	ИндексыИнфляции.Индекс			КАК ИндексИнфляции 
		| 
		|	ИЗ РегистрСведений.ИндексИнфляции КАК ИндексыИнфляции
		| 
		|ГДЕ ИндексыИнфляции.Период <= &парамПериодРегистрации
		|УПОРЯДОЧИТЬ ПО 
		|	ИндексыИнфляции.Период ВОЗР

		|";
		
		тбИндексыИнфляции = Запрос.Выполнить().Выгрузить();
		НеобходимыеДанные.Вставить("тбИндексыИнфляции", тбИндексыИнфляции);
		
		// Проверим правильно ли заполнены ли все социальные группы у базовых начислений индексации
		// иначе могут быть проблемы в расчете индексации
		Запрос.Текст = "
		|ВЫБРАТЬ 
		|	ИндексацияБазовые.ВидРасчета,
		|	ИндексацияБазовые.ВидРасчета.СоциальнаяГруппа
		|ИЗ  ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК ИндексацияБазовые
		|ГДЕ	ИндексацияБазовые.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ИндексацияЗарплаты)
		|	И	ИндексацияБазовые.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ПустаяСсылка)		
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество()>0 Тогда
			Индексация = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ИндексацияЗарплаты;
			КомментарийОшибки = ОбщегоНазначения.КомментарийРасчета("Индексация зарплаты может рассчитаться неверно! Не установлена социальная группа у расчетов: ", , Индексация.Наименование, Индексация, Перечисления.ВидыСообщений.ВажнаяИнформация);
			Пока Выборка.Следующий() Цикл
				ОбщегоНазначения.КомментарийРасчета("", КомментарийОшибки,Выборка.ВидРасчета.Наименование,Выборка.ВидРасчета);
			КонецЦикла;
		КонецЕсли;
		
		Запрос.Текст = "
		|		ВЫБРАТЬ 
		|	Начисления.Ссылка КАК ВидРасчета,
		|	ИндексацияБазовые.Ссылка КАК БазовыйВидРасчета,
		|	Начисления.Ссылка.СоциальнаяГруппа
		|ИЗ  ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК Начисления
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК ИндексацияБазовые
		|ПО		ИндексацияБазовые.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ИндексацияЗарплаты)
		|									, ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ИндексацияСоцстрах)
		|									, ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ИндексацияСоцстрахНесч))
		|	И	ИндексацияБазовые.ВидРасчета = Начисления.Ссылка
		|
		|ГДЕ		Начисления.Ссылка.СоциальнаяГруппа <> ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ПустаяСсылка)		
		|	И	ИндексацияБазовые.Ссылка ЕСТЬ NULL 
		|";
	
 		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество()>0 Тогда
			Индексация = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ИндексацияЗарплаты;
			КомментарийОшибки = ОбщегоНазначения.КомментарийРасчета("У некоторых расчетов установлена социальная группа, хотя они не включены в базу ни одного расчета индексации: ", , Индексация.Наименование, Индексация, Перечисления.ВидыСообщений.ВажнаяИнформация);
			Пока Выборка.Следующий() Цикл
				ОбщегоНазначения.КомментарийРасчета("", КомментарийОшибки,Выборка.ВидРасчета.Наименование,Выборка.ВидРасчета);
			КонецЦикла;
		КонецЕсли;
		

	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////
	// Вложенные запросы
	// для получения данных расчета
	// Реализованы как временные таблицы
	Если Истина Тогда
		
		// НакопленныеДанные
		Если Истина Тогда
			// уже начислено по другим регистраторам в данном расчетном периоде и за всю историю
			// применяется для расчета удержаний "нарастающим итогом за месяц"
			//	Поля:
			//		Сотрудник
			//		ДокументОснование
			//		ВидРасчета
			//		УжеНачисленоВТекущемПериоде
			//		УжеНачисленоЗаВсюИсторию
			//	Описание:
			//		суммирует результаты по видам расчета и документам-основаниям
			//
			НакопленныеДанныеТекст = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР КОГДА НакопленныеДанные.ПериодРегистрации  = Основной.ПериодРегистрации ТОГДА НакопленныеДанные.Результат ИНАЧЕ 0 КОНЕЦ) КАК УжеНачисленоВТекущемПериоде,
			|	СУММА(ВЫБОР КОГДА НакопленныеДанные.ПериодРегистрации <= Основной.ПериодРегистрации ТОГДА НакопленныеДанные.Результат ИНАЧЕ 0 КОНЕЦ) КАК УжеНачисленоЗаВсюИсторию,
			|	НакопленныеДанные.Сотрудник,
			|	НакопленныеДанные.ВидРасчета,
			|	НакопленныеДанные.ДокументОснование
			|ПОМЕСТИТЬ ВТНакопленныеДанные
			|ИЗ
			|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основной
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УдержанияРаботниковОрганизаций КАК НакопленныеДанные
			|		ПО 
			|			НакопленныеДанные.Сотрудник = Основной.Сотрудник
			|			И НакопленныеДанные.ВидРасчета = Основной.ВидРасчета
			|			И НакопленныеДанные.ПериодРегистрации <= Основной.ПериодРегистрации
			|			И НакопленныеДанные.Организация = Основной.Организация
			|			И НакопленныеДанные.ДокументОснование = Основной.ДокументОснование
			|			И НакопленныеДанные.Регистратор <> Основной.Регистратор
			|
			|ГДЕ
			|	Основной.Регистратор = &парамРегистратор И Основной.Авторасчет
			|
			|СГРУППИРОВАТЬ ПО
			|	НакопленныеДанные.Сотрудник,
			|	НакопленныеДанные.ВидРасчета,
			|	НакопленныеДанные.ДокументОснование
			|ИНДЕКСИРОВАТЬ ПО 
			|	НакопленныеДанные.Сотрудник,
			|	НакопленныеДанные.ВидРасчета,
			|	НакопленныеДанные.ДокументОснование";
		КонецЕсли;
		
		// СдельныйЗаработокОрганизацииТекст
		Если Истина Тогда
			//	Поля:
			//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
			//		РазмерЗаработка - размер сдельного заработка
			//	Описание:
			//		получает размер сдельного заработка для начислений со способом расчета "Сдельный заработок"
			//
			СдельныйЗаработокОрганизацииТекст =
			"ВЫБРАТЬ
			|	НесгруппированныеДанные.ОсновнойНомерСтроки КАК ОсновнойНомерСтроки,
			|	СУММА(НесгруппированныеДанные.СуммаЗаработка) КАК СуммаЗаработка,
			|	МАКСИМУМ(НесгруппированныеДанные.ОшибкаВводаФактическойВыработки) КАК ОшибкаВводаФактическойВыработки
			|ПОМЕСТИТЬ ВТСдельныйЗаработокОрганизации
			|ИЗ
			|	(ВЫБРАТЬ
			|		Начисления.НомерСтроки КАК ОсновнойНомерСтроки,
			|		ФактическаяВыработка.Выработка КАК СуммаЗаработка,
			|		ЛОЖЬ КАК ОшибкаВводаФактическойВыработки
			|	ИЗ
			|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
			|				Регистратор = &парамРегистратор
			|					И Авторасчет
			|					) КАК Начисления
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработка
			|			ПО Начисления.Сотрудник = ФактическаяВыработка.Сотрудник
			|				И (ФактическаяВыработка.Период МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
			|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)))
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Начисления.НомерСтроки,
			|		ФактическаяВыработка.Выработка,
			|		ВЫБОР
			|			КОГДА ПроверкаКоличестваЗаписей.Сотрудник ЕСТЬ НЕ NULL 
			|					И ФактическаяВыработка.Выработка ЕСТЬ НЕ NULL 
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработка
			|			ПО Начисления.Сотрудник = ФактическаяВыработка.Сотрудник
			|				И ФактическаяВыработка.Период = Начисления.ПериодДействия
			|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод)))
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ПроверкаКоличестваЗаписей
			|			ПО Начисления.Сотрудник = ПроверкаКоличестваЗаписей.Сотрудник
			|				И Начисления.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
			|				И Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ПроверкаКоличестваЗаписей.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
			|				И Начисления.Организация = ПроверкаКоличестваЗаписей.Организация
			|				И (Начисления.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
			|				И (ПроверкаКоличестваЗаписей.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
			|				И ((НЕ(Начисления.Регистратор = ПроверкаКоличестваЗаписей.Регистратор
			|						И Начисления.НомерСтроки = ПроверкаКоличестваЗаписей.НомерСтроки)))
			|	ГДЕ
			|		Начисления.Регистратор = &парамРегистратор
			|		И Начисления.Авторасчет
			|		) КАК НесгруппированныеДанные
			|
			|СГРУППИРОВАТЬ ПО
			|	НесгруппированныеДанные.ОсновнойНомерСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОсновнойНомерСтроки";
		КонецЕсли;
		
		// СдельныйЗаработокКомпанииТекст
		Если Истина Тогда
			//	Поля:
			//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
			//		РазмерЗаработка - размер сдельного заработка
			//	Описание:
			//		получает размер сдельного заработка для начислений со способом расчета "Сдельный заработок"
			//
			СдельныйЗаработокКомпанииТекст =
			"ВЫБРАТЬ
			|	НесгруппированныеДанные.ОсновнойНомерСтроки КАК ОсновнойНомерСтроки,
			|	СУММА(НесгруппированныеДанные.СуммаЗаработка) КАК СуммаЗаработка,
			|	МАКСИМУМ(НесгруппированныеДанные.ОшибкаВводаФактическойВыработки) КАК ОшибкаВводаФактическойВыработки
			|ПОМЕСТИТЬ ВТСдельныйЗаработокКомпании
			|ИЗ
			|	(ВЫБРАТЬ
			|		Начисления.НомерСтроки КАК ОсновнойНомерСтроки,
			|		ФактическаяВыработка.Выработка КАК СуммаЗаработка,
			|		ЛОЖЬ КАК ОшибкаВводаФактическойВыработки
			|	ИЗ
			|		РегистрРасчета.УправленческиеНачисления.ФактическийПериодДействия(
			|				Регистратор = &парамРегистратор
			|					И Авторасчет) КАК Начисления
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботников КАК ФактическаяВыработка
			|			ПО Начисления.ФизЛицо = ФактическаяВыработка.Физлицо
			|				И (ФактическаяВыработка.Период МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
			|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)))
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Начисления.НомерСтроки,
			|		ФактическаяВыработка.Выработка,
			|		ВЫБОР
			|			КОГДА ПроверкаКоличестваЗаписей.ФизЛицо ЕСТЬ НЕ NULL 
			|					И ФактическаяВыработка.Выработка ЕСТЬ НЕ NULL 
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		РегистрРасчета.УправленческиеНачисления КАК Начисления
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботников КАК ФактическаяВыработка
			|			ПО Начисления.ФизЛицо = ФактическаяВыработка.Физлицо
			|				И (ФактическаяВыработка.Период = Начисления.ПериодДействия)
			|				И (ФактическаяВыработка.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод))
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УправленческиеНачисления КАК ПроверкаКоличестваЗаписей
			|			ПО Начисления.ФизЛицо = ПроверкаКоличестваЗаписей.ФизЛицо
			|				И Начисления.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
			|				И Начисления.ВидРасчета.ВидУчетаРабочегоВремени = ПроверкаКоличестваЗаписей.ВидРасчета.ВидУчетаРабочегоВремени
			|				И (Начисления.ВидРасчета.ЗачетОтработанногоВремени)
			|				И (ПроверкаКоличестваЗаписей.ВидРасчета.ЗачетОтработанногоВремени)
			|				И ((НЕ(Начисления.Регистратор = ПроверкаКоличестваЗаписей.Регистратор
			|						И Начисления.НомерСтроки = ПроверкаКоличестваЗаписей.НомерСтроки)))
			|	ГДЕ
			|		Начисления.Регистратор = &парамРегистратор
			|		И Начисления.Авторасчет) КАК НесгруппированныеДанные
			|
			|СГРУППИРОВАТЬ ПО
			|	НесгруппированныеДанные.ОсновнойНомерСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОсновнойНомерСтроки";

		КонецЕсли;
		
		// ВремяПоТабелю
		Если Истина Тогда
			//	данные по отработанному времени и норме времени по методу "сплошной регистрации" в текущем периоде регистрации
			//	Поля 
			//		НомерСтроки
			//		ОтработаноДнейПоТабелю
			//		ОтработаноЧасовПоТабелю
			//		ОтработаноЧасовПоТабелюОтклонение
			//
			//	Описание                       
			//	Суммируем отработанное время и норму времени в заданном периоде действия для каждой строки начисления
			//	из регистра РабочееВремяРаботниковОрганизаций 
			ВремяПоТабелюТекст = 
			"ВЫБРАТЬ
			|	Основной.НомерСтроки КАК НомерСтроки,
			|	СУММА(ВЫБОР
			|			КОГДА Основной.ВидРасчета.ВидВремени = &ОтработанноеВПределахНормы
			|				ТОГДА ОтработанноеВремя.Часов
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ОтработаноЧасовПоТабелюОтклонение,
			|	СУММА(ВЫБОР	
			|			КОГДА Основной.ВидРасчета.ВидВремени В (Значение(Перечисление.ВидыВремени.ЧасовоеНеотработанное), Значение(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы))
			|				ТОГДА ОтработанноеВремя.Часов
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК  ВнутрисменныеЧасыОтклонение
			|ПОМЕСТИТЬ ВТВремяПоТабелю
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(Регистратор = &парамРегистратор) КАК Основной
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций КАК ОтработанноеВремя
			|		ПО Основной.Сотрудник = ОтработанноеВремя.Сотрудник
			|			И Основной.Назначение = ОтработанноеВремя.Назначение
			|			И (ОтработанноеВремя.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
			|ГДЕ
			|	Основной.Регистратор = &парамРегистратор
			|	И Основной.Авторасчет
			|
			|СГРУППИРОВАТЬ ПО
			|	Основной.НомерСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
		КонецЕсли;
		
		
		// ВТВремяВведенноеВЦеломЗаПериод
		Если Истина Тогда
			ВремяВведенноеВЦеломЗаПериодТекст = 
			"ВЫБРАТЬ
			|	Основной.НомерСтроки КАК НомерСтроки,
			|	СУММА(ВЫБОР
			|			КОГДА Основной.ВидУчетаВремени = &ПоДням
			|				ТОГДА ОтработанноеВремя.Дней
			|			ИНАЧЕ ОтработанноеВремя.Часов
			|		КОНЕЦ) КАК ОсновноеЗначениеПоТабелю,
			|	СУММА(ОтработанноеВремя.Дней) КАК ДнейПоТабелю,
			|	СУММА(ОтработанноеВремя.Часов) КАК ЧасовПоТабелю,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ПроверкаКоличестваЗаписей.Сотрудник ЕСТЬ НЕ NULL 
			|					И ОтработанноеВремя.Дней ЕСТЬ НЕ NULL 
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ОшибкаВводаОтработанногоВремени
			|ПОМЕСТИТЬ ВТВремяВведенноеВЦеломЗаПериод
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
			|		ПО Основной.Сотрудник = ОтработанноеВремя.Сотрудник
			|		    И Основной.Назначение = ОтработанноеВремя.Назначение
			|			И ОтработанноеВремя.Период = Основной.ПериодДействия
			|			И Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
			|			И (ОтработанноеВремя.ВЦеломЗаПериод)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ПроверкаКоличестваЗаписей
			|		ПО Основной.Сотрудник = ПроверкаКоличестваЗаписей.Сотрудник
			|		    И Основной.Назначение = ПроверкаКоличестваЗаписей.Назначение
			|			И Основной.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
			|			И Основной.ПериодРегистрации >= ПроверкаКоличестваЗаписей.ПериодРегистрации
			|			И Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ПроверкаКоличестваЗаписей.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
			|			И Основной.Организация = ПроверкаКоличестваЗаписей.Организация
			|			И (Основной.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
			|			И (ПроверкаКоличестваЗаписей.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
			|			И ((НЕ(Основной.Регистратор = ПроверкаКоличестваЗаписей.Регистратор
			|					И Основной.НомерСтроки = ПроверкаКоличестваЗаписей.НомерСтроки)))
			|			И (НЕ(Основной.ВидРасчета = ПроверкаКоличестваЗаписей.ВидРасчета 
			|					И Основной.ПериодДействияНачало = ПроверкаКоличестваЗаписей.ПериодДействияНачало
			|					И Основной.ПериодДействияКонец = ПроверкаКоличестваЗаписей.ПериодДействияКонец
			|					И (Основной.ПериодРегистрации <> ПроверкаКоличестваЗаписей.ПериодРегистрации  
			|						ИЛИ Основной.Сторно <> ПроверкаКоличестваЗаписей.Сторно)))	
			|ГДЕ
			|	Основной.Регистратор = &парамРегистратор
			|	И Основной.Авторасчет
			|
			|СГРУППИРОВАТЬ ПО
			|	Основной.НомерСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
		КонецЕсли;
		
		// ВТСводныеИндивидуальныеГрафики
		Если Истина Тогда
			СводныеИндивидуальныеГрафикиТекст = 
			"ВЫБРАТЬ
			|	Основной.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА Основной.ВидУчетаВремени = &ПоДням
			|			ТОГДА СводныеИндивидуальныеГрафики.Дней
			|		КОГДА Основной.ВидУчетаВремени = &ПоЧасам
			|			ТОГДА СводныеИндивидуальныеГрафики.Часов
			|		КОГДА Основной.ВидУчетаВремени = &ПоВечернимЧасам
			|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовВечерних
			|		КОГДА Основной.ВидУчетаВремени = &ПоНочнымЧасам
			|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовНочных
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК НормаВремени,
			|	ВЫБОР
			|		КОГДА Основной.ВидУчетаВремени = &ПоДням
			|			ТОГДА СводныеИндивидуальныеГрафики.Дней
			|		ИНАЧЕ СводныеИндивидуальныеГрафики.Часов
			|	КОНЕЦ КАК ОсновноеЗначение,
			|	ВЫБОР
			|		КОГДА Основной.ВидУчетаВремени = &ПоЧасам
			|			ТОГДА СводныеИндивидуальныеГрафики.Дней
			|		ИНАЧЕ СводныеИндивидуальныеГрафики.Часов
			|	КОНЕЦ КАК ДополнительноеЗначение,
			|	СводныеИндивидуальныеГрафики.Дней КАК ДнейПоГрафику,
			|	СводныеИндивидуальныеГрафики.Часов КАК ЧасовПоГрафику,
			|	СводныеИндивидуальныеГрафики.Дней КАК НормаДнейПоГрафику,
			|	СводныеИндивидуальныеГрафики.Часов КАК НормаЧасовПоГрафику,
			|	ВЫБОР
			|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
			|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
			|				И СводныеИндивидуальныеГрафики.Дней ЕСТЬ НЕ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ОшибкаВводаИндивидуальногоГрафикаРаботы
			|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафики
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
			|		ПО Основной.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
			|			И (СводныеИндивидуальныеГрафики.Месяц = &парамПериодРегистрации)
			|ГДЕ
			|	Основной.Регистратор = &парамРегистратор
			|	И Основной.Авторасчет
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
		КонецЕсли;	
		
		// СоответствиеТабеляИНачислений
		Если Истина Тогда
			// Данное по ошибке, возникающей в случае ввода табеля с отклонениями, на которые не введены документы
			//	Поля 
			//		НомерСтроки
			//		ПредупреждениеОНесоответствииТабеляИНачисления
			//
			//	Описание                       
			//	Суммируем отработанное время в заданном периоде действия для каждой строки начисления
			//	из регистра РабочееВремяРаботниковОрганизаций 
			
			СоответствиеТабеляИНачислений = "ВЫБРАТЬ
			|	Основной.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА КОЛИЧЕСТВО(РабочееВремяРаботниковОрганизаций.НомерСтроки) > 0
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ПредупреждениеОНесоответствииТабеляИНачисления
			|ПОМЕСТИТЬ ВТСоответствиеТабеляИНачислений
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(Регистратор = &парамРегистратор) КАК Основной
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
			|		ПО (РабочееВремяРаботниковОрганизаций.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
			|			И Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени
			|			И (ВЫБОР
			|				КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = &КлассификаторЯ
			|							И РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени В (&КлассификаторВЧ, &КлассификаторНЧ)
			|						ИЛИ Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = &КлассификаторВЧ
			|							И РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени В (&КлассификаторЯ, &КлассификаторНЧ)
			|						ИЛИ Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = &КлассификаторНЧ
			|							И РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени В (&КлассификаторЯ, &КлассификаторВЧ)
			|					ТОГДА ЛОЖЬ
			|				ИНАЧЕ ИСТИНА
			|			КОНЕЦ)
			|			И Основной.ГрафикРаботы = РабочееВремяРаботниковОрганизаций.Сотрудник
			|			И Основной.ГрафикРаботы = Основной.Назначение
			|			И Основной.ГрафикРаботы = Основной.Сотрудник
			|			И (НАЧАЛОПЕРИОДА(РабочееВремяРаботниковОрганизаций.Период, МЕСЯЦ) = &парамПериодРегистрации)
			|			И ((НЕ РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод))
			|ГДЕ
			|	Основной.Авторасчет
			|	И Основной.Регистратор = &ПарамРегистратор
			|
			|СГРУППИРОВАТЬ ПО
			|	Основной.НомерСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";	
		КонецЕсли;
		
		// ВремяПоТабелю
		Если Истина Тогда
			//	данные по отработанному времени и норме времени по методу "сплошной регистрации" в текущем периоде регистрации
			//	Поля 
			//		НомерСтроки
			//		ОтработаноДнейПоТабелю
			//		ОтработаноЧасовПоТабелю
			//		ОтработаноЧасовПоТабелюОтклонение
			//
			//	Описание                       
			//	Суммируем отработанное время и норму времени в заданном периоде действия для каждой строки начисления
			//	из регистра РабочееВремяРаботниковОрганизаций 
			
			УпрВремяПоТабелюТекст = 
			"ВЫБРАТЬ
			|	Основной.НомерСтроки КАК НомерСтроки,
			|	СУММА(ВЫБОР
			|			КОГДА Основной.ВидРасчета.ВидУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
			|				ТОГДА ВЫБОР
			|						КОГДА Основной.ВидУчетаВремени = &ПоДням
			|							ТОГДА ОтработанноеВремя.Дней
			|						ИНАЧЕ ОтработанноеВремя.Часов
			|					КОНЕЦ
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ОсновноеЗначениеПоТабелю,
			|	СУММА(ВЫБОР
			|			КОГДА Основной.ВидРасчета.ВидУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
			|				ТОГДА ОтработанноеВремя.Дней
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ОтработаноДнейПоТабелю,
			|	СУММА(0) КАК ВнутрисменныеЧасыОтклонение,
			|	СУММА(ВЫБОР
			|			КОГДА Основной.ВидРасчета.ВидУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
			|				ТОГДА ОтработанноеВремя.Часов
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ОтработаноЧасовПоТабелю,
			|	 0 КАК ОтработаноЧасовПоТабелюОтклонение
			|ПОМЕСТИТЬ ВТУпрВремяПоТабелю
			|ИЗ
			|	РегистрРасчета.УправленческиеНачисления КАК Основной
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
			|		ПО Основной.ФизЛицо = ОтработанноеВремя.Сотрудник.ФизЛицо
			|			И (ОтработанноеВремя.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
			|			И ((НЕ ОтработанноеВремя.ВЦеломЗаПериод))
			|ГДЕ
			|	Основной.Регистратор = &парамРегистратор
			|	И Основной.Авторасчет
			|
			|СГРУППИРОВАТЬ ПО
			|	Основной.НомерСтроки
			|ИНДЕКСИРОВАТЬ ПО 
			|	НомерСтроки";
		КонецЕсли;
		//
		// ВТУпрВремяВведенноеВЦеломЗаПериод
		Если Истина Тогда
			УпрВремяВведенноеВЦеломЗаПериодТекст = 
			"ВЫБРАТЬ
			|	Основной.НомерСтроки КАК НомерСтроки,
			|	СУММА(ВЫБОР
			|			КОГДА Основной.ВидУчетаВремени = &ПоДням
			|				ТОГДА ОтработанноеВремя.Дней
			|			ИНАЧЕ ОтработанноеВремя.Часов
			|		КОНЕЦ) КАК ОсновноеЗначениеПоТабелю,
			|	СУММА(ОтработанноеВремя.Дней) КАК ДнейПоТабелю,
			|	СУММА(ОтработанноеВремя.Часов) КАК ЧасовПоТабелю,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > ПроверкаКоличестваЗаписей.ПериодДействияНачало
			|					ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < ПроверкаКоличестваЗаписей.ПериодДействияКонец)
			|					И ОтработанноеВремя.Дней ЕСТЬ НЕ NULL 
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ОшибкаВводаОтработанногоВремени
			|ПОМЕСТИТЬ ВТУпрВремяВведенноеВЦеломЗаПериод
			|ИЗ
			|	РегистрРасчета.УправленческиеНачисления КАК Основной
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			НАЧАЛОПЕРИОДА(МИНИМУМ(НачисленияРаботников.ПериодДействияНачало), ДЕНЬ) КАК ПериодДействияНачало,
			|			КОНЕЦПЕРИОДА(МАКСИМУМ(НачисленияРаботников.ПериодДействияКонец), ДЕНЬ) КАК ПериодДействияКонец,
			|			НачисленияРаботников.ПериодДействия КАК ПериодДействия,
			|			НачисленияРаботников.ВидРасчета КАК ВидРасчета,
			|			НачисленияРаботников.ФизЛицо КАК ФизЛицо
			|		ИЗ
			|			РегистрРасчета.УправленческиеНачисления КАК НачисленияРаботников
			|		ГДЕ
			|			НачисленияРаботников.Регистратор = &парамРегистратор
			|			И НачисленияРаботников.Авторасчет
			|		
			|		СГРУППИРОВАТЬ ПО
			|			НачисленияРаботников.ПериодДействия,
			|			НачисленияРаботников.ВидРасчета,
			|			НачисленияРаботников.ФизЛицо) КАК ПроверкаКоличестваЗаписей
			|		ПО Основной.ФизЛицо = ПроверкаКоличестваЗаписей.ФизЛицо
			|			И Основной.ВидРасчета = ПроверкаКоличестваЗаписей.ВидРасчета
			|			И Основной.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
			|		ПО Основной.ФизЛицо = ОтработанноеВремя.Сотрудник.ФизЛицо
			|			И ОтработанноеВремя.Период = Основной.ПериодДействия
			|			И Основной.ВидРасчета.ВидУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
			|			И (ОтработанноеВремя.ВЦеломЗаПериод)
			|ГДЕ
			|	Основной.Регистратор = &парамРегистратор
			|	И Основной.Авторасчет
			|
			|СГРУППИРОВАТЬ ПО
			|	Основной.НомерСтроки
			|ИНДЕКСИРОВАТЬ ПО 
			|	НомерСтроки";
		КонецЕсли;
		
		// ВТУпрСводныеИндивидуальныеГрафики
		Если Истина Тогда
			УпрСводныеИндивидуальныеГрафикиТекст = 
			"ВЫБРАТЬ
			|	Основной.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА Основной.ВидУчетаВремени = &ПоДням
			|			ТОГДА СводныеИндивидуальныеГрафики.Дней
			|		КОГДА Основной.ВидУчетаВремени = &ПоЧасам
			|			ТОГДА СводныеИндивидуальныеГрафики.Часов
			|		КОГДА Основной.ВидУчетаВремени = &ПоВечернимЧасам
			|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовВечерних
			|		КОГДА Основной.ВидУчетаВремени = &ПоНочнымЧасам
			|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовНочных
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК НормаВремени,
			|	ВЫБОР
			|		КОГДА Основной.ВидУчетаВремени = &ПоДням
			|			ТОГДА СводныеИндивидуальныеГрафики.Дней
			|		ИНАЧЕ СводныеИндивидуальныеГрафики.Часов
			|	КОНЕЦ КАК ОсновноеЗначение,
			|	СводныеИндивидуальныеГрафики.Дней КАК ДнейПоГрафику,
			|	СводныеИндивидуальныеГрафики.Часов КАК ЧасовПоГрафику,
			|	СводныеИндивидуальныеГрафики.Дней КАК НормаДнейПоГрафику,
			|	СводныеИндивидуальныеГрафики.Часов КАК НормаЧасовПоГрафику,
			|	ВЫБОР
			|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
			|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
			|				И СводныеИндивидуальныеГрафики.Дней ЕСТЬ НЕ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ОшибкаВводаИндивидуальногоГрафикаРаботы
			|ПОМЕСТИТЬ ВТУпрСводныеИндивидуальныеГрафики
			|ИЗ
			|	РегистрРасчета.УправленческиеНачисления КАК Основной
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
			|		ПО Основной.ФизЛицо = СводныеИндивидуальныеГрафики.Сотрудник.ФизЛицо
			|			И (СводныеИндивидуальныеГрафики.Месяц = &парамПериодРегистрации)
			|ГДЕ
			|	Основной.Регистратор = &парамРегистратор
			|	И Основной.Авторасчет
			|ИНДЕКСИРОВАТЬ ПО 
			|	НомерСтроки";
		КонецЕсли;
		
	КонецЕсли;
	// Конец определения текстов вложенных запросов
	/////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос();
	НеобходимаБаза = НеобходимыеДанные.База;
	НеобходимГрафик = НеобходимыеДанные.НормаВремени ИЛИ НеобходимыеДанные.ОтработаноВремени ИЛИ НеобходимыеДанные.Календарные ИЛИ НеобходимыеДанные.НормаВремениЗаМесяц;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
    
	// параметры запросов
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ОсновнойГрафикРаботыПредприятий", Константы.ОсновнойГрафикРаботыПредприятий.Получить());
	Запрос.УстановитьПараметр("парамФизЛица", ФизЛица);
	
	// категория начисления (удержания)
	Запрос.УстановитьПараметр("парамКатегорияНачисления", КатегорияРасчета);
	
	Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" или 
			ИмяРегистра = "УдержанияРаботниковОрганизаций" Тогда
		Условие = "ВидРасчета.КатегорияРасчета = &парамКатегорияНачисления И Регистратор = &парамРегистратор И Авторасчет И Сотрудник В (&парамСотрудники)";
		ВнешнееУсловие = "Основной.ВидРасчета.КатегорияРасчета = &парамКатегорияНачисления И Основной.Регистратор = &парамРегистратор И Основной.Сотрудник В (&парамСотрудники)";
	ИначеЕсли ИмяРегистра = "УправленческиеНачисления" ИЛИ ИмяРегистра = "УправленческиеУдержания" Тогда
		Условие = "ВидРасчета.КатегорияРасчета = &парамКатегорияНачисления И Регистратор = &парамРегистратор И Авторасчет И Физлицо В (&парамФизлица)";
		ВнешнееУсловие = "Основной.ВидРасчета.КатегорияРасчета = &парамКатегорияНачисления И Основной.Регистратор = &парамРегистратор И Основной.Физлицо В (&парамФизлица)";
	Иначе
		Условие = "Регистратор = &парамРегистратор И Авторасчет И Сотрудник В (&парамСотрудники)";
		ВнешнееУсловие = "Основной.Регистратор = &парамРегистратор И Основной.Сотрудник В (&парамСотрудники)";
	КонецЕсли;
	
	УсловиеНаСотрудникиТекст = "Сотрудник В (&парамСотрудники)";
	
	// для формирования ИТОГИ при комментировании расчета
	ПоляЗапросаМаксимум = Новый Массив;
	ПоляЗапросаСумма = Новый Массив;
	
	Если ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|Основной.Регистратор							Как Регистратор,
		|Основной.НомерСтроки							Как НомерСтроки,
		|Основной.ВидРасчета							Как ВидРасчета,
		|Основной.ВидРасчета.Наименование				Как ВидРасчетаНаименование,
		|Основной.ВидРасчета.ПериодДействияБазовый		Как ВидРасчетаПериодДействияБазовый,
		|Основной.Сотрудник								Как Сотрудник,
		|Основной.Сотрудник.Наименование				Как СотрудникНаименование,
		|Основной.Назначение							Как Назначение,
		|Основной.ПериодДействияНачало					Как ПериодДействияНачало,
		|Основной.ПериодДействияКонец					Как ПериодДействияКонец,
		|ЕСТЬNULL(Основной.ВидРасчета.ЗачетОтработанногоВремени, ЛОЖЬ)	Как ЗачетОтработанногоВремени,
		|ЕСТЬNULL(Основной.ВидРасчета.ЗачетНормыВремени, ЛОЖЬ)			Как ЗачетНормыВремени,
		|ЕСТЬNULL(Основной.ВидРасчета.ЗачетКалендарных, ЛОЖЬ)			Как ЗачетКалендарных,
		|Основной.ВидУчетаВремени						Как ВидУчетаВремени,
		|Основной.ВидРасчета.СпособРасчета				Как СпособРасчета, 
		|ВЫБОР КОГДА Основной.ВидРасчета.ВидВремени В(&парамСписокПочасовыхОтклонений) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ВидРасчетаЯвляетсяПочасовымОтклонением,
		|Основной.ВидРасчета.ДоходНДФЛ					Как ДоходНДФЛ";
		
		Если КомментироватьРасчет Тогда
			ПоляЗапросаМаксимум.Добавить("Сотрудник");
			ПоляЗапросаМаксимум.Добавить("СотрудникНаименование");
			ПоляЗапросаМаксимум.Добавить("ПериодДействияНачало");
			ПоляЗапросаМаксимум.Добавить("ПериодДействияКонец");
			ПоляЗапросаМаксимум.Добавить("ЗачетОтработанногоВремени");
			ПоляЗапросаМаксимум.Добавить("ЗачетНормыВремени");
			ПоляЗапросаМаксимум.Добавить("ЗачетКалендарных");
			ПоляЗапросаМаксимум.Добавить("ВидУчетаВремени");
			ПоляЗапросаМаксимум.Добавить("СпособРасчета");
			//ПоляЗапросаМаксимум.Добавить("ВариантАлгоритмаРасчета");
			ПоляЗапросаМаксимум.Добавить("ВидРасчетаЯвляетсяПочасовымОтклонением");
			ПоляЗапросаМаксимум.Добавить("ДоходНДФЛ");
			ПоляЗапросаМаксимум.Добавить("ВидРасчета");
			ПоляЗапросаМаксимум.Добавить("ВидРасчетаНаименование");
			ПоляЗапросаМаксимум.Добавить("ВидРасчетаПериодДействияБазовый");
		КонецЕсли;
		
	Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			
			// Получим максимальное число показателей			
			Если Истина Тогда
		
				ТекстКолВоПоказателей =
				"ВЫБРАТЬ
				|	МАКСИМУМ(ВложенныйЗапрос.НомерСтроки) КАК КолВоПоказателей
				|ИЗ
				|	РегистрРасчета."+ИмяРегистра+" КАК Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	(ВЫБРАТЬ
				|		Показатели.Ссылка,
				|		Показатели.НомерСтроки КАК НомерСтроки
				|	ИЗ";
				ТекстКолВоПоказателей  =  ТекстКолВоПоказателей + "	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели) КАК ВложенныйЗапрос ";
				ТекстКолВоПоказателей = ТекстКолВоПоказателей +"
				|	ПО ВложенныйЗапрос.Ссылка = Основной.ВидРасчета
				|ГДЕ "+ВнешнееУсловие;
				
				Запрос.Текст = ТекстКолВоПоказателей;
				ВыборкаКоличестваПоказателей = Запрос.Выполнить().Выбрать();
				ВыборкаКоличестваПоказателей.Следующий();
				КоличествоПоказателей = ?(ВыборкаКоличестваПоказателей.КолВоПоказателей=NULL,0,ВыборкаКоличестваПоказателей.КолВоПоказателей);		
			КонецЕсли;
			
			Если КоличествоПоказателей = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				| 0 КАК КоличествоПоказателей,";
			Иначе
				ТекстЗапроса = ТекстЗапроса + ",
				| Показатели.КоличествоПоказателей КАК КоличествоПоказателей,";
				Если КомментироватьРасчет Тогда
					ПоляЗапросаМаксимум.Добавить("КоличествоПоказателей");
				КонецЕсли;
			КонецЕсли;
			
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("ФормулаРасчета");
			КонецЕсли;
				
			ТекстЗапроса = ТекстЗапроса + "
			| Основной.ВидРасчета.ФормулаРасчета КАК ФормулаРасчета";
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				ТекстЗапроса = ТекстЗапроса + ", 
				|Показатели.Показатель" + СчПоказателей+".Наименование Как Показатель" + СчПоказателей + "Наименование";
				
				Если КомментироватьРасчет Тогда
					ПоляЗапросаМаксимум.Добавить("Показатель" + СчПоказателей + "Наименование");
				КонецЕсли;
			КонецЦикла;			
			
			Показатель1Текст = ПолучитьТекстПоказателя(НеобходимыеДанные,ИмяРегистра,, КоличествоПоказателей, КомментироватьРасчет);
			Если КоличествоПоказателей > 6 Тогда
				// получим текст запроса для предопределенных показателей
				Показатель1ТекстПредопределенный = ПолучитьТекстПоказателя(НеобходимыеДанные,ИмяРегистра, Истина, КоличествоПоказателей, КомментироватьРасчет);
			КонецЕсли;
			
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				Если СчПоказателей > 6 Тогда					
					ПоказательТекст = СтрЗаменить(Показатель1ТекстПредопределенный, "Показатель1", "Показатель"+СчПоказателей);
				Иначе
					ПоказательТекст = СтрЗаменить(Показатель1Текст, "Показатель1", "Показатель"+СчПоказателей);
				КонецЕсли;					
				ТекстЗапроса = ТекстЗапроса + ", 
			   	|" + ПоказательТекст + " Как Показатель"+СчПоказателей;
				
				Если КомментироватьРасчет Тогда
					ПоляЗапросаМаксимум.Добавить("Показатель" + СчПоказателей);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Базы	
		Если НеобходимаБаза Тогда
			Если КомментироватьРасчет Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|ВЫБОР КОГДА Основной.ВидРасчета.БазаПоНазначению ТОГДА БазаНазначения.РезультатБаза ИНАЧЕ База.РезультатБаза КОНЕЦ Как РезультатБаза,
				|ВЫБОР КОГДА Основной.ВидРасчета.БазаПоНазначению ТОГДА БазаНазначения.ВидРасчетаРазрез ИНАЧЕ База.ВидРасчетаРазрез КОНЕЦ Как ВидРасчетаРазрез,
				|ВЫБОР КОГДА Основной.ВидРасчета.БазаПоНазначению ТОГДА БазаНазначения.ВидРасчетаРазрез.Наименование ИНАЧЕ База.ВидРасчетаРазрез.Наименование КОНЕЦ Как ВидРасчетаРазрезНаименование";
				ПоляЗапросаМаксимум.Добавить("ВидРасчетаРазрез");
				ПоляЗапросаМаксимум.Добавить("ВидРасчетаРазрезНаименование");
			Иначе 
				ТекстЗапроса = ТекстЗапроса + ",
				|ВЫБОР КОГДА Основной.ВидРасчета.БазаПоНазначению ТОГДА БазаНазначения.РезультатБаза ИНАЧЕ База.РезультатБаза КОНЕЦ Как РезультатБаза";
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимГрафик Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ) КАК ОшибкаВводаИндивидуальногоГрафикаРаботы,
			|	ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ) КАК ОшибкаВводаОтработанногоВремени,
			|	ЕСТЬNULL(СоответствиеТабеляИНачислений.ПредупреждениеОНесоответствииТабеляИНачисления, ЛОЖЬ) КАК ПредупреждениеНесоответствияТабеляИНачисления,
			|	Основной.ГрафикРаботы.Наименование КАК ГрафикРаботыНаименование";
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("ГрафикРаботыНаименование");
				ПоляЗапросаМаксимум.Добавить("ОшибкаВводаИндивидуальногоГрафикаРаботы");
				ПоляЗапросаМаксимум.Добавить("ОшибкаВводаОтработанногоВремени");
				ПоляЗапросаМаксимум.Добавить("ПредупреждениеНесоответствияТабеляИНачисления");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.НормаВремениЗаМесяц Тогда
			//ТекстЗапроса = ТекстЗапроса + ", 
			//|	ЕСТЬNULL(ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОсновноеЗначение, ДанныеГрафика.ОсновноеЗначениеПериодДействия),0) КАК НормаВремениЗаМесяц,
			//|	ЕСТЬNULL(ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОсновноеЗначение, ДанныеГрафика.ОсновноеЗначениеПериодДействия),0) КАК ОсновноеЗначениеНормаВремениЗаМесяц,
			//|	ЕСТЬNULL(ЕСТЬNULL(СводныеИндивидуальныеГрафики.ДополнительноеЗначение, ДанныеГрафика.ДополнительноеЗначениеПериодДействия),0) КАК ДополнительноеЗначениеНормаВремениЗаМесяц,
			//|	ЕСТЬNULL(ДанныеГрафика.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия,0) КАК КалендарныеДни";
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ЕСТЬNULL(ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОсновноеЗначение, ДанныеГрафика.ОсновноеЗначениеПериодДействия),0) КАК НормаВремениЗаМесяц,
			|	ЕСТЬNULL(ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОсновноеЗначение, ДанныеГрафика.ОсновноеЗначениеПериодДействия),0) КАК ОсновноеЗначениеНормаВремениЗаМесяц,
			|	ЕСТЬNULL(ЕСТЬNULL(СводныеИндивидуальныеГрафики.ДополнительноеЗначение, ДанныеГрафика.ДополнительноеЗначениеПериодДействия),0) КАК ДополнительноеЗначениеНормаВремениЗаМесяц
			|";
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("НормаВремениЗаМесяц");
				ПоляЗапросаМаксимум.Добавить("ОсновноеЗначениеНормаВремениЗаМесяц");
				ПоляЗапросаМаксимум.Добавить("ДополнительноеЗначениеНормаВремениЗаМесяц");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.НормаВремени Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|			ТОГДА NULL
			|		ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику, ЕСТЬNULL(ВЫБОР
			|						КОГДА Основной.ВидУчетаВремени = &ПоДням
			|							ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|						ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|					КОНЕЦ, 0))
			|	КОНЕЦ КАК НормаОплачиваемыхЧасов,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|			ТОГДА NULL
			|		ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаДнейПоГрафику, ЕСТЬNULL(ВЫБОР
			|						КОГДА Основной.ВидУчетаВремени = &ПоДням
			|							ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|						ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|					КОНЕЦ, 0))
			|	КОНЕЦ КАК НормаОплачиваемыхДней";
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("НормаОплачиваемыхЧасов");
				ПоляЗапросаМаксимум.Добавить("НормаОплачиваемыхДней");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.Календарные Тогда		
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ЕСТЬNULL(ДанныеГрафика.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия,0) КАК КалендарныеДни,
			|	ЕСТЬNULL(ДанныеГрафика.ПроизводственныйКалендарьКалендарныеДниСПраздникамиФактическийПериодДействия,0) КАК КалендарныеДниСПраздниками";
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("КалендарныеДни");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноВремени Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|			ТОГДА NULL
			|		ИНАЧЕ 
			|			ВЫБОР 
			|				КОГДА НЕ ВремяВведенноеВЦеломЗаПериод.ОсновноеЗначениеПоТабелю ЕСТЬ NULL 
			|					ТОГДА 1 
			|				ИНАЧЕ
			|					ВЫБОР 
			|						КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|							ТОГДА NULL
			|						ИНАЧЕ 
			|							ВЫБОР 
			|								КОГДА НЕ СводныеИндивидуальныеГрафики.НормаВремени ЕСТЬ NULL 
			|									ТОГДА 2 
			|								ИНАЧЕ 3 
			|							КОНЕЦ
			|					КОНЕЦ
			|			КОНЕЦ
			|	КОНЕЦ КАК СпособВводаВремени,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|			ТОГДА NULL
			|		ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОсновноеЗначениеПоТабелю, ВЫБОР
			|								КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|									ТОГДА NULL
			|								ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия, 0))
			|							КОНЕЦ)
			|	КОНЕЦ КАК ОтработаноВремени,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|			ТОГДА 0
			|		ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ДнейПоТабелю, ВЫБОР
			|								КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|									ТОГДА 0
			|								ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ДнейПоГрафику, ЕСТЬNULL(ВЫБОР
			|												КОГДА Основной.ВидУчетаВремени = &ПоДням
			|													ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|												ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|											КОНЕЦ, 0))
			|							КОНЕЦ)
			|	КОНЕЦ КАК ОтработаноДней,
			|	ЕСТЬNULL(ВЫБОР
			|		КОГДА Основной.ВидРасчета.ВидВремени В (Значение(Перечисление.ВидыВремени.ЧасовоеНеотработанное), Значение(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы))
			|			ТОГДА ВремяПоТабелю.ВнутрисменныеЧасыОтклонение
			|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|			ТОГДА 0
			|		ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ЧасовПоТабелю, ВЫБОР
			|								КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|									ТОГДА 0
			|								ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ЧасовПоГрафику, ЕСТЬNULL(ВЫБОР
			|												КОГДА Основной.ВидУчетаВремени = &ПоДням
			|													ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|												ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|											КОНЕЦ, 0)) - ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение, 0)
			|							КОНЕЦ)
			|	КОНЕЦ, 0) КАК ОтработаноЧасов,
			|	ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение,0) КАК ОтработаноЧасовПоТабелюОтклонение";
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("ОтработаноВремени");
				ПоляЗапросаМаксимум.Добавить("ОтработаноДней");
				ПоляЗапросаМаксимум.Добавить("ОтработаноЧасов");
				ПоляЗапросаМаксимум.Добавить("ОтработаноЧасовПоТабелюОтклонение");
			КонецЕсли;
		КонецЕсли;
		
		// Допрасчеты
		Если НеобходимыеДанные.ВыслугаЛет Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|СтавкиВыслуги.Ставка 		КАК СтавкаВыслуги,
			|ЕстьNULL(Стаж.ВидСтажа.Ограничение,0) КАК Ограничение";
		
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("СтавкаВыслуги");
				ПоляЗапросаМаксимум.Добавить("Ограничение");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ИндексацияЗарплаты Тогда
			
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеПоИндексацииЗарплаты.ИндексацияНачало	Как ИндексацияЗарплатыНачало, 
			|ДанныеПоИндексацииЗарплаты.ИндексацияКонец		Как ИндексацияЗарплатыКонец,
			|
			|ДанныеПоИндексацииЗарплаты.БазаСоцГруппы1		КАК БазаИндексацияЗарплаты1, 
			|ДанныеПоИндексацииЗарплаты.БазаСоцГруппы2		КАК БазаИндексацияЗарплаты2, 
			|ДанныеПоИндексацииЗарплаты.БазаСоцГруппы3		КАК БазаИндексацияЗарплаты3, 
			|ДанныеПоИндексацииЗарплаты.БазаСоцГруппы4		КАК БазаИндексацияЗарплаты4,
			|
			|ДанныеПоИндексацииЗарплаты.ПорогСоцГруппы1	КАК ПорогИндексацияЗарплаты1,
			|ДанныеПоИндексацииЗарплаты.ПорогСоцГруппы2	КАК ПорогИндексацияЗарплаты2,
			|ДанныеПоИндексацииЗарплаты.ПорогСоцГруппы3	КАК ПорогИндексацияЗарплаты3,
			|ДанныеПоИндексацииЗарплаты.ПорогСоцГруппы4	КАК ПорогИндексацияЗарплаты4,
			|
			|ДанныеПоИндексацииЗарплаты.ЕстьСправкаОБазеИндексацииСовместителя КАК ЕстьСправкаОБазеИндексацииСовместителя,
			|ДанныеПоИндексацииЗарплаты.БазаИндексацииСовместителей	Как БазаИндексацииСовместителя,
			|ДанныеПоИндексацииЗарплаты.РезультатБаза		КАК РезультатБазаИндексацияЗарплаты";
			
			Если КомментироватьРасчет Тогда
				
				ПоляЗапросаМаксимум.Добавить("ИндексацияЗарплатыНачало");
				ПоляЗапросаМаксимум.Добавить("ИндексацияЗарплатыКонец");
				
				ПоляЗапросаМаксимум.Добавить("ПорогИндексацияЗарплаты1");
				ПоляЗапросаМаксимум.Добавить("ПорогИндексацияЗарплаты2");
				ПоляЗапросаМаксимум.Добавить("ПорогИндексацияЗарплаты3");
				ПоляЗапросаМаксимум.Добавить("ПорогИндексацияЗарплаты4");
				
				ПоляЗапросаМаксимум.Добавить("БазаИндексацияЗарплаты1");
				ПоляЗапросаМаксимум.Добавить("БазаИндексацияЗарплаты2");
				ПоляЗапросаМаксимум.Добавить("БазаИндексацияЗарплаты3");
				ПоляЗапросаМаксимум.Добавить("БазаИндексацияЗарплаты4");
				
				ПоляЗапросаМаксимум.Добавить("ЕстьСправкаОБазеИндексацииСовместителя");
				ПоляЗапросаМаксимум.Добавить("БазаИндексацииСовместителя");
				ПоляЗапросаМаксимум.Добавить("РезультатБазаИндексацияЗарплаты");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ИндексацияСоциальныхНачислений Тогда
			
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеПоИндексацииСоциальныхНачислений.ИндексацияНачало	Как ИндексацияСоциальныхНачисленийНачало, 
			|ДанныеПоИндексацииСоциальныхНачислений.ИндексацияКонец		Как ИндексацияСоциальныхНачисленийКонец,
			|
			|ДанныеПоИндексацииСоциальныхНачислений.БазаСоцГруппы1		КАК БазаИндексацияСоциальныхНачислений1, 
			|ДанныеПоИндексацииСоциальныхНачислений.БазаСоцГруппы2		КАК БазаИндексацияСоциальныхНачислений2, 
			|ДанныеПоИндексацииСоциальныхНачислений.БазаСоцГруппы3		КАК БазаИндексацияСоциальныхНачислений3, 
			|ДанныеПоИндексацииСоциальныхНачислений.БазаСоцГруппы4		КАК БазаИндексацияСоциальныхНачислений4,
			|
			|ДанныеПоИндексацииСоциальныхНачислений.ПорогСоцГруппы1	КАК ПорогИндексацияСоциальныхНачислений1,
			|ДанныеПоИндексацииСоциальныхНачислений.ПорогСоцГруппы2	КАК ПорогИндексацияСоциальныхНачислений2,
			|ДанныеПоИндексацииСоциальныхНачислений.ПорогСоцГруппы3	КАК ПорогИндексацияСоциальныхНачислений3,
			|ДанныеПоИндексацииСоциальныхНачислений.ПорогСоцГруппы4	КАК ПорогИндексацияСоциальныхНачислений4,
			|
			|ДанныеПоИндексацииСоциальныхНачислений.РезультатБаза		КАК РезультатБазаИндексацияСоциальныхНачислений";
			
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("ИндексацияСоциальныхНачисленийНачало");
				ПоляЗапросаМаксимум.Добавить("ИндексацияСоциальныхНачисленийКонец");
				
				ПоляЗапросаМаксимум.Добавить("ПорогИндексацияСоциальныхНачислений1");
				ПоляЗапросаМаксимум.Добавить("ПорогИндексацияСоциальныхНачислений2");
				ПоляЗапросаМаксимум.Добавить("ПорогИндексацияСоциальныхНачислений3");
				ПоляЗапросаМаксимум.Добавить("ПорогИндексацияСоциальныхНачислений4");
				
				ПоляЗапросаСумма.Добавить("БазаИндексацияСоциальныхНачислений1");
				ПоляЗапросаСумма.Добавить("БазаИндексацияСоциальныхНачислений2");
				ПоляЗапросаСумма.Добавить("БазаИндексацияСоциальныхНачислений3");
				ПоляЗапросаСумма.Добавить("БазаИндексацияСоциальныхНачислений4");
				
				ПоляЗапросаСумма.Добавить("РезультатБазаИндексацияСоциальныхНачислений");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.СуммаКомпенсации Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|Задолженность.СуммаВзаиморасчетовОстаток КАК СуммаКомпенсации";   
			
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("СуммаКомпенсации");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.СдельныйЗаработок Тогда
			// размер сдельного заработка
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ)
			|			ТОГДА NULL
			|		ИНАЧЕ ДанныеОСдельномЗаработке.СуммаЗаработка 
			|	КОНЕЦ КАК РазмерСдельногоЗаработка,
			|ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ) КАК ОшибкаВводаФактическойВыработки";
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("РазмерСдельногоЗаработка");
				ПоляЗапросаМаксимум.Добавить("ОшибкаВводаФактическойВыработки");
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций Как Основной";
		
		
				
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
						
		ИмяПВР = Метаданные.РегистрыРасчета[ИмяРегистра].планВидовРасчета.Имя;	
			// ВТПоказатели
			Если Истина Тогда
				// получим временную таблицу с расчетом показателей
				ТекстЗапросаПоказатели = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Основной.ВидРасчета,
				|	ЕстьNULL(МАКСИМУМ(ВСЕПоказатели.НомерСтроки),0) КАК КоличествоПоказателей";
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + ",
					|	Показатели"+ СчПоказателей + ".Показатель КАК Показатель" + СчПоказателей;
				КонецЦикла;
				ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
				|ПОМЕСТИТЬ ВТПоказатели
				|ИЗ
				|	РегистрРасчета."+ИмяРегистра +" КАК Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ИмяПВР+".Показатели КАК ВСЕПоказатели
				|	ПО Основной.ВидРасчета = ВСЕПоказатели.Ссылка";
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
					|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ИмяПВР+".Показатели КАК Показатели"+ СчПоказателей + "
					|	ПО Основной.ВидРасчета = Показатели"+ СчПоказателей + ".Ссылка 
					|	И  Показатели"+ СчПоказателей + ".НомерСтроки = "+ СчПоказателей;
				КонецЦикла;
				ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
				|ГДЕ " + ВнешнееУсловие + "
				|СГРУППИРОВАТЬ ПО
				|	Основной.ВидРасчета";
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + ",
					|	Показатели"+ СчПоказателей + ".Показатель";
				КонецЦикла;
				ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
				|ИНДЕКСИРОВАТЬ ПО Основной.ВидРасчета";		
				
				Запрос.Текст = ТекстЗапросаПоказатели;
				Запрос.Выполнить();
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
            |ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
			|ПО Показатели.ВидРасчета = Основной.ВидРасчета";
						
		КонецЕсли;
		

		
		Если НеобходимыеДанные.Стаж Тогда
			// присоединение к данным о стаже
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеОСтаже			
			|ПО ДанныеОСтаже.Сотрудник = Основной.Сотрудник
			|И	ДанныеОСтаже.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)";
			
			Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
			Если КомментироватьРасчет Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|ЛЕВОЕ СОЕДИНЕНИЕ (
				|ВЫБРАТЬ
				|	РезультатБаза КАК РезультатБаза,
				|	ОтработаноДнейБаза КАК ОтработаноДнейБаза,
				|	ОтработаноЧасовБаза КАК ОтработаноЧасовБаза,
				|	ОплаченоДнейЧасовБаза КАК ОплаченоДнейЧасовБаза,
				|	ВидРасчетаРазрез КАК ВидРасчетаРазрез,
				|	Регистратор КАК Регистратор,
				|	НомерСтроки КАК НомерСтроки
				|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, &парамРазрезы, " + Условие + ") Как База1
				|) КАК База
				|ПО Основной.Регистратор = База.Регистратор И Основной.НомерСтроки = База.НомерСтроки
             	| И НЕ(Основной.ВидРасчета.БазаПоНазначению) 
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ (
				|ВЫБРАТЬ
				|	РезультатБаза КАК РезультатБаза,
				|	ОтработаноДнейБаза КАК ОтработаноДнейБаза,
				|	ОтработаноЧасовБаза КАК ОтработаноЧасовБаза,
				|	ОплаченоДнейЧасовБаза КАК ОплаченоДнейЧасовБаза,
				|	ВидРасчетаРазрез КАК ВидРасчетаРазрез,
				|	Регистратор КАК Регистратор,
				|	НомерСтроки КАК НомерСтроки
				|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновногоНазначения, &парамИзмеренияБазовогоНазначения, &парамРазрезы, " + Условие + ") Как База1
				|) КАК БазаНазначения
				|ПО Основной.Регистратор = БазаНазначения.Регистратор И Основной.НомерСтроки = БазаНазначения.НомерСтроки
				|И Основной.ВидРасчета.БазаПоНазначению"; 
				Разрезы = Новый Массив;
				Разрезы.Добавить("ВидРасчета");
				Запрос.УстановитьПараметр("парамРазрезы", Разрезы);
				
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновного, &парамИзмеренияБазового, , " + Условие + ") Как База
				|ПО База.Регистратор = Основной.Регистратор И База.НомерСтроки = Основной.НомерСтроки
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(&парамИзмеренияОсновногоНазначения, &парамИзмеренияБазовогоНазначения, , " + Условие + ") Как БазаНазначения
				|ПО БазаНазначения.Регистратор = Основной.Регистратор И БазаНазначения.НомерСтроки = Основной.НомерСтроки";
				
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимГрафик Тогда
			Запрос.УстановитьПараметр("ПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
			Запрос.УстановитьПараметр("ПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
			Запрос.УстановитьПараметр("ПоВечернимЧасам", Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
			Запрос.УстановитьПараметр("ПоНочнымЧасам", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
			Запрос.УстановитьПараметр("ПустойВидИспользованияРабочегоВремени", Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка());
			Запрос.УстановитьПараметр("КлассификаторЯ", Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
			Запрос.УстановитьПараметр("КлассификаторВЧ", Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы);
			Запрос.УстановитьПараметр("КлассификаторНЧ", Справочники.КлассификаторИспользованияРабочегоВремени.Ночные);
			Запрос.УстановитьПараметр("ОтработанноеВПределахНормы", Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
			Запрос.УстановитьПараметр("ЦелодневноеНеотработанное", Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
			Запрос.УстановитьПараметр("ЧасовоеНеотработанное", Перечисления.ВидыВремени.ЧасовоеНеотработанное);
			Запрос.УстановитьПараметр("ЧасовоеОтработанноеВПределахНормы", Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
			
			
			Запрос.Текст = ВремяПоТабелюТекст;
			Запрос.Выполнить();
			ВремяПоТабелюТекст = "ВТВремяПоТабелю";
			Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВремяПоТабелю";
			
			Запрос.Текст = СводныеИндивидуальныеГрафикиТекст;
			Запрос.Выполнить();
			СводныеИндивидуальныеГрафикиТекст = "ВТСводныеИндивидуальныеГрафики";
			Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТСводныеИндивидуальныеГрафики";
			
			Запрос.Текст = ВремяВведенноеВЦеломЗаПериодТекст;
			Запрос.Выполнить();
			ВремяВведенноеВЦеломЗаПериодТекст = "ВТВремяВведенноеВЦеломЗаПериод";
			
			Запрос.Текст = СоответствиеТабеляИНачислений;
			Запрос.Выполнить();
			СоответствиеТабеляИНачислений = "ВТСоответствиеТабеляИНачислений";
			
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(" + Условие +  ") Как ДанныеГрафика
			|ПО Основной.Регистратор = ДанныеГрафика.Регистратор И Основной.НомерСтроки = ДанныеГрафика.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяПоТабелю КАК ВремяПоТабелю
			|ПО Основной.НомерСтроки = ВремяПоТабелю.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ " + СводныеИндивидуальныеГрафикиТекст + " КАК СводныеИндивидуальныеГрафики
			|ПО Основной.НомерСтроки = СводныеИндивидуальныеГрафики.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ВремяВведенноеВЦеломЗаПериодТекст + " КАК ВремяВведенноеВЦеломЗаПериод
			|ПО Основной.НомерСтроки = ВремяВведенноеВЦеломЗаПериод.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ " + СоответствиеТабеляИНачислений + " КАК СоответствиеТабеляИНачислений
			|ПО Основной.НомерСтроки = СоответствиеТабеляИНачислений.НомерСтроки
			|";
			
		КонецЕсли;
		
		// допрасчеты
		Если НеобходимыеДанные.ВыслугаЛет Тогда
			
			//ВТСведенияОСтаже
			Если Истина Тогда
				ТекстЗапросаВТ = "
				|ВЫБРАТЬ
				|  ПриказОПриеме.Сотрудник		КАК Сотрудник,
				|  ПриказОПриеме.ДатаПриема		КАК ДатаПриема,
				|  ОбщийСтаж.ВидСтажа			КАК ВидСтажа,
				|  СУММА( ЕСТЬNULL(ОбщийСтаж.ДнейСтажа, 0))  КАК ДнейСтажа
				|ПОМЕСТИТЬ ВТСведенияОСтаже	
				|	ИЗ (	ВЫБРАТЬ 
				|           	МИНИМУМ(Работники.Период) КАК ДатаПриема,
				|				Работники.Сотрудник	КАК Сотрудник
				|			ИЗ РегистрСведений.РаботникиОрганизаций КАК Работники
				|   		ГДЕ Работники.Сотрудник В (&парамСотрудники)
				|			СГРУППИРОВАТЬ ПО Работники.Сотрудник
				|	) КАК ПриказОприеме
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ ( 
				|	ВЫБРАТЬ
				|		Стаж.ФизЛицо,
				|		Стаж.ДнейСтажа,
				|		Стаж.ВидСтажа
				|	ИЗ РегистрСВедений.НачальныеСведенияОСтажеРаботниковОрганизации КАК Стаж
				|	ГДЕ	Стаж.Организация	= &парамОрганизация
				|
				|) КАК ОбщийСтаж		
				|	ПО ОбщийСтаж.ФизЛицо = ПриказОПриеме.Сотрудник.ФизЛицо 
				|   
				|СГРУППИРОВАТЬ ПО  
				|  ПриказОПриеме.Сотрудник,
				|  ОбщийСтаж.ВидСтажа,
				|  ПриказОПриеме.ДатаПриема
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТСведенияОСтаже = "ВТСведенияОСтаже"; 
			КонецЕсли;
			
				
			//ВТПараметрыВыслуги
			Если Истина Тогда
				ТекстЗапросаВТ =  "
				| ВЫБРАТЬ 
				|  ПараметрыВыслуги.Порог   		 	КАК Порог,
				|  ПараметрыВыслуги.ВидСтажа		  	КАК ВидСтажа,
				|  ПараметрыВыслуги.Ставка  			КАК Ставка,
				|  ЕстьNULL(МАКСИМУМ(ПараметрыВыслуги1.Порог),0)    КАК НижнийПорог
				|ПОМЕСТИТЬ ВТПараметрыВыслуги
				|
				|  ИЗ РегистрСведений.ШкалаВыслугиЛет.СрезПоследних(&парамПериодРегистрации) КАК ПараметрыВыслуги
				|
				| ЛЕВОЕ СОЕДИНЕНИЕ (
				| 	ВЫБРАТЬ 
				|  		ПараметрыВыслуги.ВидСтажа			КАК ВидСтажа,
				|  		ПараметрыВыслуги.Ставка  			КАК Ставка,
				|  		ПараметрыВыслуги.Порог   			КАК Порог
				|
				|  		ИЗ РегистрСведений.ШкалаВыслугиЛет.СрезПоследних(&парамПериодРегистрации) КАК ПараметрыВыслуги
				|
				|   ) КАК ПараметрыВыслуги1
				| ПО  ПараметрыВыслуги1.ВидСтажа = ПараметрыВыслуги.ВидСтажа
				|	И ПараметрыВыслуги1.Порог    < ПараметрыВыслуги.Порог
				|
				| СГРУППИРОВАТЬ ПО 
				|  ПараметрыВыслуги.Порог, 
				|  ПараметрыВыслуги.ВидСтажа,
				|  ПараметрыВыслуги.Ставка
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();				
				ТекстЗапросаВТПараметрыВыслуги = "ВТПараметрыВыслуги";				
			 КонецЕсли;
			  
			ТекстЗапроса = ТекстЗапроса + "
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТСведенияОСтаже + "  КАК Стаж
				|ПО   (Стаж.ВидСтажа = Основной.ВидРасчета.ВидСтажа Или  Стаж.ВидСтажа ЕСТЬ NULL )
				|   И Стаж.Сотрудник  = Основной.Сотрудник
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТПараметрыВыслуги + "  КАК СтавкиВыслуги
				|ПО   (Стаж.ВидСтажа = СтавкиВыслуги.ВидСтажа ИЛИ Стаж.ВидСтажа ЕСТЬ NULL И СтавкиВыслуги.ВидСтажа = Основной.ВидРасчета.ВидСтажа)
				|   И ВЫБОР КОГДА Стаж.ДнейСтажа ЕСТЬ NULL ТОГДА Стаж.ДатаПриема ИНАЧЕ ДОБАВИТЬКДАТЕ( Стаж.ДатаПриема, ДЕНЬ, - Стаж.ДнейСтажа) КОНЕЦ <= ДОБАВИТЬКДАТЕ( НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало), ГОД, - СтавкиВыслуги.НижнийПорог )
				|   И ВЫБОР КОГДА Стаж.ДнейСтажа ЕСТЬ NULL ТОГДА Стаж.ДатаПриема ИНАЧЕ ДОБАВИТЬКДАТЕ( Стаж.ДатаПриема, ДЕНЬ, - Стаж.ДнейСтажа) КОНЕЦ > ДОБАВИТЬКДАТЕ( НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало), ГОД, - СтавкиВыслуги.Порог )
				|
				|";
		КонецЕсли;

			
		Если НеобходимыеДанные.ИндексацияЗарплаты Тогда
			
			//	ВТИндексироватьСотрудниковПоПериодам
			Если Истина Тогда
				//	Описание:
				// 		В этой таблице только сотрудники по которым есть Вид расчета Индексация и периоды по которым надо расчиать тндексацию
				//		Для п.1.
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		Доход.Сотрудник									КАК Сотрудник, 
				|		НАЧАЛОПЕРИОДА(Доход.БазовыйПериодНачало, МЕСЯЦ)	КАК ДатаНачала 
				|ПОМЕСТИТЬ ВТИндексироватьСотрудниковПоПериодам	
				|   ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Доход
				|	ГДЕ 	Доход.Регистратор = &парамРегистратор 
				|		И	Доход.Сотрудник В (&парамСотрудники) 
				//|		И	Доход.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ИндексацияЗарплаты) 
				|		И	Доход.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ИндексацияЗарплаты) 
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТИндексироватьСотрудниковПоПериодам = "ВТИндексироватьСотрудниковПоПериодам";
			КонецЕсли;
			
			//	ВТИндексированныйДоходСовместителей
			Если Истина Тогда
				//	Описание:
				// 		Доход совместителей с других мест работы
				//		Для п.1.
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		Доход.Сотрудник				КАК Сотрудник, 
				|		Доход.ДатаДействия			КАК ДатаНачала, 
				|		СУММА(Доход.БазаИндексации)	КАК БазаИндексацииСовместителей 
				|ПОМЕСТИТЬ ВТИндексированныйДоходСовместителей	
				|   ИЗ РегистрСведений.ИндексированныйДоходСовместителей.СрезПоследних(&парамПериодРегистрации, 
				|   		Сотрудник в (ВЫБРАТЬ РАЗЛИЧНЫЕ Сотрудник ИЗ "+ТекстЗапросаВТИндексироватьСотрудниковПоПериодам+" ) ) КАК Доход
				|	СГРУППИРОВАТЬ ПО 
				|		Доход.Сотрудник, 
				|		Доход.ДатаДействия 
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТИндексированныйДоходСовместителей = "ВТИндексированныйДоходСовместителей";
			КонецЕсли;
			
			//	ВТБазовыеПериодыИндексации
			Если Истина Тогда
				//	Описание:
				// 		Трио сотрудник (основное место работы) и период с которого начинаетсяинается расчет коэффициента индексации
				//
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		Основной.Сотрудник	КАК Сотрудник,
				|		Основной.ДатаНачала	КАК ДатаНачала,
				|		МАКСИМУМ(НАЧАЛОПЕРИОДА(ДатыИндексации.Период , МЕСЯЦ))	КАК БазовыйПериодИндексации,
				|		МИНИМУМ(ДатыПриема.Период)	КАК ДатаПриемаСотрудника
				|
				|ПОМЕСТИТЬ ВТБазовыеПериодыИндексации	
				|	ИЗ " + ТекстЗапросаВТИндексироватьСотрудниковПоПериодам + " Как Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРасчетаИндексации Как ДатыИндексации
				|	ПО		Основной.Сотрудник = ДатыИндексации.Сотрудник 
				|   	И	Основной.ДатаНачала >= НАЧАЛОПЕРИОДА(ДатыИндексации.Период , МЕСЯЦ)
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций Как ДатыПриема
				|	ПО		Основной.Сотрудник = ДатыПриема.Сотрудник 
				|
				|  	ГДЕ	Основной.Сотрудник в (ВЫБРАТЬ РАЗЛИЧНЫЕ Сотрудник ИЗ "+ТекстЗапросаВТИндексироватьСотрудниковПоПериодам+" )
				|	СГРУППИРОВАТЬ ПО 
				|		Основной.Сотрудник,
				|		Основной.ДатаНачала
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТБазовыеПериодыИндексации = "ВТБазовыеПериодыИндексации";
			КонецЕсли;
			Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТБазовыеПериодыИндексации";
			
			//	ВТБазаИндексацииЗарплаты
			Если Истина Тогда 
				//	Описание:
				// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали
				//		Для п.1.
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		Основной.НомерСтроки КАК НомерСтроки, 
				|   	Основной.Сотрудник				КАК Сотрудник,
				|   	НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)	КАК ДатаНачала,
				|   	Основной.ВидРасчета				КАК ВидРасчета,
				|   	СУММА(БазаИзНачислений.Результат)	КАК РезультатБаза,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо6)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы1,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо18)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы2,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы3,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.НеТрудоспособные)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы4
				|ПОМЕСТИТЬ ВТБазаИндексацииЗарплаты	
				|		ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК БазаИзНачислений
				|	ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
				|		И	НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
				|		И	БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
				|	ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
				|		И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
				|
				|	ГДЕ		Основной.Регистратор = &парамРегистратор 
				|		И	Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ИндексацияЗарплаты) 
				|   	И	Основной.Сотрудник в (ВЫБРАТЬ РАЗЛИЧНЫЕ Сотрудник ИЗ "+ТекстЗапросаВТИндексироватьСотрудниковПоПериодам+" )
				|
				|	СГРУППИРОВАТЬ ПО 
				|   	Основной.Сотрудник,
				|       Основной.НомерСтроки,
				|   	Основной.БазовыйПериодНачало,
				|   	Основной.ВидРасчета
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТБазаИндексацииЗарплаты = "ВТБазаИндексацииЗарплаты";
			КонецЕсли; 
		
			//	ВТПрожиточныеМинимумыИндексации
			Если Истина Тогда
				//	Описание:
				// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали
				//		
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		Основной.ДатаНачала		КАК ДатаНачала, 
				|		ПрожМинСоцГруппы1.Размер	КАК ПорогСоцГруппы1, 
				|		ПрожМинСоцГруппы2.Размер	КАК ПорогСоцГруппы2, 
				|		ПрожМинСоцГруппы3.Размер	КАК ПорогСоцГруппы3, 
				|		ПрожМинСоцГруппы4.Размер	КАК ПорогСоцГруппы4 
				| 
				|ПОМЕСТИТЬ ВТПрожиточныеМинимумыИндексации	
				|   ИЗ (
				|		ВЫБРАТЬ 
				|			ПериодыИндексации.ДатаНачала		КАК ДатаНачала, 
				|			МАКСИМУМ(ПрожМинСоцГруппы1.Период)	КАК ПериодСоцГруппа1, 
				|			МАКСИМУМ(ПрожМинСоцГруппы2.Период)	КАК ПериодСоцГруппа2, 
				|			МАКСИМУМ(ПрожМинСоцГруппы3.Период)	КАК ПериодСоцГруппа3, 
				|			МАКСИМУМ(ПрожМинСоцГруппы4.Период)	КАК ПериодСоцГруппа4 
				|		ИЗ (
				|   		ВЫБРАТЬ РАЗЛИЧНЫЕ
				|           	Периоды.ДатаНачала КАК ДатаНачала
				|			ИЗ " + ТекстЗапросаВТИндексироватьСотрудниковПоПериодам + " КАК Периоды
				|   		) КАК ПериодыИндексации
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы1
				|       ПО	ПрожМинСоцГруппы1.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо6)
				|       	И	ПрожМинСоцГруппы1.Период <= ПериодыИндексации.ДатаНачала
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы2
				|       ПО	ПрожМинСоцГруппы2.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо18)
				|       	И	ПрожМинСоцГруппы2.Период <= ПериодыИндексации.ДатаНачала
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы3
				|       ПО	ПрожМинСоцГруппы3.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
				|       	И	ПрожМинСоцГруппы3.Период <= ПериодыИндексации.ДатаНачала
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы4
				|       ПО	ПрожМинСоцГруппы4.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.НеТрудоспособные)
				|       	И	ПрожМинСоцГруппы4.Период <= ПериодыИндексации.ДатаНачала
				| 
				|		СГРУППИРОВАТЬ ПО 
				|			ПериодыИндексации.ДатаНачала 
				|    ) КАК Основной
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы1
				|	ПО		ПрожМинСоцГруппы1.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо6)
				|		И	ПрожМинСоцГруппы1.Период = Основной.ПериодСоцГруппа1
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы2
				|	ПО		ПрожМинСоцГруппы2.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо18)
				|		И	ПрожМинСоцГруппы2.Период = Основной.ПериодСоцГруппа2
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы3
				|	ПО		ПрожМинСоцГруппы3.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
				|		И	ПрожМинСоцГруппы3.Период = Основной.ПериодСоцГруппа3
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы4
				|	ПО		ПрожМинСоцГруппы4.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.НеТрудоспособные)
				|		И	ПрожМинСоцГруппы4.Период = Основной.ПериодСоцГруппа4
				| 
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТПрожиточныеМинимумыИндексации = "ВТПрожиточныеМинимумыИндексации";
			КонецЕсли;
	
			//	ВТДанныеПоИндексации
			Если Истина Тогда
				//	Описание:
				// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали
				//		Для п.1.
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		База.Сотрудник					КАК Сотрудник, 
				|		База.НомерСтроки				КАК НомерСтроки, 
				|		База.ДатаНачала					КАК БазовыйПериодНачало, 
				|       База.ВидРасчета					КАК ВидРасчета,
				|		База.ДатаНачала					КАК ИндексацияКонец,
				|		База.РезультатБаза				КАК РезультатБаза, 
				|		База.БазаСоцГруппы1				КАК БазаСоцГруппы1, 
				|		База.БазаСоцГруппы2				КАК БазаСоцГруппы2, 
				|		База.БазаСоцГруппы3				КАК БазаСоцГруппы3, 
				|		База.БазаСоцГруппы4				КАК БазаСоцГруппы4, 
				|
				|		ПрожиточныеМинимумы.ПорогСоцГруппы1	КАК ПорогСоцГруппы1, 
				|		ПрожиточныеМинимумы.ПорогСоцГруппы2	КАК ПорогСоцГруппы2, 
				|		ПрожиточныеМинимумы.ПорогСоцГруппы3	КАК ПорогСоцГруппы3, 
				|		ПрожиточныеМинимумы.ПорогСоцГруппы4	КАК ПорогСоцГруппы4, 
				|
				|		ЕСТЬNULL(БазовыеПериодыИндексации.БазовыйПериодИндексации, БазовыеПериодыИндексации.ДатаПриемаСотрудника)	КАК ИндексацияНачало,
				|
				|		ВЫБОР КОГДА ДоходСовместителя.Сотрудник ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ		Как ЕстьСправкаОБазеИндексацииСовместителя,
				|		ДоходСовместителя.БазаИндексацииСовместителей		Как БазаИндексацииСовместителей
				|	 
				|ПОМЕСТИТЬ ВТДанныеПоИндексации	
				|	ИЗ " + ТекстЗапросаВТИндексироватьСотрудниковПоПериодам + " Как Основной
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ   " + ТекстЗапросаВТБазаИндексацииЗарплаты + " КАК База
				|	ПО		Основной.Сотрудник = База.Сотрудник 
				|		И	Основной.ДатаНачала = База.ДатаНачала 
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПрожиточныеМинимумыИндексации + " КАК ПрожиточныеМинимумы
				|	ПО		Основной.ДатаНачала = ПрожиточныеМинимумы.ДатаНачала
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТБазовыеПериодыИндексации + " КАК БазовыеПериодыИндексации
				|	ПО		Основной.Сотрудник = БазовыеПериодыИндексации.Сотрудник
				|		И	Основной.ДатаНачала	= БазовыеПериодыИндексации.ДатаНачала
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТИндексированныйДоходСовместителей + " КАК ДоходСовместителя
				|	ПО		Основной.Сотрудник = ДоходСовместителя.Сотрудник
				|		И	Основной.ДатаНачала	= ДоходСовместителя.ДатаНачала
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТДанныеПоИндексации = "ВТДанныеПоИндексации";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТДанныеПоИндексации+" КАК ДанныеПоИндексацииЗарплаты
			|ПО		Основной.НомерСтроки = ДанныеПоИндексацииЗарплаты.НомерСтроки
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.ИндексацияСоциальныхНачислений Тогда
			
			//	ВТИндексироватьСНСотрудниковПоПериодам
			Если Истина Тогда
				//	Описание:
				// 		В этой таблице только сотрудники по которым есть Вид расчета Индексация социальных начислений и периоды по которым надо расчиать тндексацию
				//
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		Доход.Сотрудник									КАК Сотрудник, 
				|		НАЧАЛОПЕРИОДА(Доход.БазовыйПериодНачало, МЕСЯЦ)	КАК ДатаНачала 
				|ПОМЕСТИТЬ ВТИндексироватьСНСотрудниковПоПериодам	
				|   ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Доход
				|	ГДЕ 	Доход.Регистратор = &парамРегистратор 
				|		И	Доход.Сотрудник В (&парамСотрудники) 
				|		И	Доход.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ИндексацияСоциальныхНачислений) 
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТИндексироватьСНСотрудниковПоПериодам = "ВТИндексироватьСНСотрудниковПоПериодам";
			КонецЕсли;
			
			//	ВТБазаИндексацииСН
			Если Истина Тогда 
				//	Описание:
				// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали
				//		Для п.1.
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		Основной.НомерСтроки				 КАК НомерСтроки, 
				|   	Основной.Сотрудник					КАК Сотрудник,
				|   	НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)	КАК ДатаНачала,
				|   	Основной.ВидРасчета					КАК ВидРасчета,
				|   	МАКСИМУМ(Пособия.Период)			КАК БазовыйПериодИндексации,
				|   	СУММА(БазаИзНачислений.Результат)	КАК РезультатБаза,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо6)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы1,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо18)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы2,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы3,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.НеТрудоспособные)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы4
				|ПОМЕСТИТЬ ВТБазаИндексацииСН	
				|		ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК БазаИзНачислений
				|	ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
				|		И	НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
				|		И	БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
				|	ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
				|		И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
				|
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.РазмерыЗаконодательноУстановленныхВыплат КАК Пособия
				|	ПО		Пособия.ВидРасчета = БазаИзНачислений.ВидРасчета
				|		И	Пособия.Период <= Основной.БазовыйПериодНачало
				|
				|	ГДЕ		Основной.Регистратор = &парамРегистратор 
				|		И	Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ИндексацияСоциальныхНачислений) 
				|   	И	Основной.Сотрудник в (ВЫБРАТЬ РАЗЛИЧНЫЕ Сотрудник ИЗ "+ТекстЗапросаВТИндексироватьСНСотрудниковПоПериодам+" )
				|
				|	СГРУППИРОВАТЬ ПО 
				|   	Основной.Сотрудник,
				|       Основной.НомерСтроки,
				|   	Основной.БазовыйПериодНачало,
				|   	Основной.ВидРасчета
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТБазаИндексацииСН = "ВТБазаИндексацииСН";
			КонецЕсли; 
		
			//	ВТПрожиточныеМинимумыИндексацииСН
			Если Истина Тогда
				//	Описание:
				// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали
				//		
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		Основной.ДатаНачала		КАК ДатаНачала, 
				|		ПрожМинСоцГруппы1.Размер	КАК ПорогСоцГруппы1, 
				|		ПрожМинСоцГруппы2.Размер	КАК ПорогСоцГруппы2, 
				|		ПрожМинСоцГруппы3.Размер	КАК ПорогСоцГруппы3, 
				|		ПрожМинСоцГруппы4.Размер	КАК ПорогСоцГруппы4 
				| 
				|ПОМЕСТИТЬ ВТПрожиточныеМинимумыИндексацииСН	
				|   ИЗ (
				|		ВЫБРАТЬ 
				|			ПериодыИндексации.ДатаНачала		КАК ДатаНачала, 
				|			МАКСИМУМ(ПрожМинСоцГруппы1.Период)	КАК ПериодСоцГруппа1, 
				|			МАКСИМУМ(ПрожМинСоцГруппы2.Период)	КАК ПериодСоцГруппа2, 
				|			МАКСИМУМ(ПрожМинСоцГруппы3.Период)	КАК ПериодСоцГруппа3, 
				|			МАКСИМУМ(ПрожМинСоцГруппы4.Период)	КАК ПериодСоцГруппа4 
				|		ИЗ (
				|   		ВЫБРАТЬ РАЗЛИЧНЫЕ
				|           	Периоды.ДатаНачала КАК ДатаНачала
				|			ИЗ " + ТекстЗапросаВТИндексироватьСНСотрудниковПоПериодам + " КАК Периоды
				|   		) КАК ПериодыИндексации
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы1
				|       ПО	ПрожМинСоцГруппы1.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо6)
				|       	И	ПрожМинСоцГруппы1.Период <= ПериодыИндексации.ДатаНачала
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы2
				|       ПО	ПрожМинСоцГруппы2.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо18)
				|       	И	ПрожМинСоцГруппы2.Период <= ПериодыИндексации.ДатаНачала
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы3
				|       ПО	ПрожМинСоцГруппы3.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
				|       	И	ПрожМинСоцГруппы3.Период <= ПериодыИндексации.ДатаНачала
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы4
				|       ПО	ПрожМинСоцГруппы4.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.НеТрудоспособные)
				|       	И	ПрожМинСоцГруппы4.Период <= ПериодыИндексации.ДатаНачала
				| 
				|		СГРУППИРОВАТЬ ПО 
				|			ПериодыИндексации.ДатаНачала 
				|    ) КАК Основной
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы1
				|	ПО		ПрожМинСоцГруппы1.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо6)
				|		И	ПрожМинСоцГруппы1.Период = Основной.ПериодСоцГруппа1
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы2
				|	ПО		ПрожМинСоцГруппы2.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо18)
				|		И	ПрожМинСоцГруппы2.Период = Основной.ПериодСоцГруппа2
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы3
				|	ПО		ПрожМинСоцГруппы3.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
				|		И	ПрожМинСоцГруппы3.Период = Основной.ПериодСоцГруппа3
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы4
				|	ПО		ПрожМинСоцГруппы4.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.НеТрудоспособные)
				|		И	ПрожМинСоцГруппы4.Период = Основной.ПериодСоцГруппа4
				| 
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТПрожиточныеМинимумыИндексацииСН = "ВТПрожиточныеМинимумыИндексацииСН";
			КонецЕсли;
	
			//	ВТДанныеПоИндексацииСН
			Если Истина Тогда
				//	Описание:
				// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали
				//		Для п.1.
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		База.Сотрудник					КАК Сотрудник, 
				|		База.НомерСтроки				КАК НомерСтроки, 
				|		База.ДатаНачала					КАК БазовыйПериодНачало, 
				|       База.ВидРасчета					КАК ВидРасчета,
				|		База.ДатаНачала					КАК ИндексацияКонец,
				|		База.РезультатБаза				КАК РезультатБаза, 
				|		База.БазаСоцГруппы1				КАК БазаСоцГруппы1, 
				|		База.БазаСоцГруппы2				КАК БазаСоцГруппы2, 
				|		База.БазаСоцГруппы3				КАК БазаСоцГруппы3, 
				|		База.БазаСоцГруппы4				КАК БазаСоцГруппы4, 
				|
				|		ПрожиточныеМинимумы.ПорогСоцГруппы1	КАК ПорогСоцГруппы1, 
				|		ПрожиточныеМинимумы.ПорогСоцГруппы2	КАК ПорогСоцГруппы2, 
				|		ПрожиточныеМинимумы.ПорогСоцГруппы3	КАК ПорогСоцГруппы3, 
				|		ПрожиточныеМинимумы.ПорогСоцГруппы4	КАК ПорогСоцГруппы4, 
				|
				|		База.БазовыйПериодИндексации	КАК ИндексацияНачало
				|	 
				|ПОМЕСТИТЬ ВТДанныеПоИндексацииСН	
				|	ИЗ " + ТекстЗапросаВТИндексироватьСНСотрудниковПоПериодам + " Как Основной
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ   " + ТекстЗапросаВТБазаИндексацииСН + " КАК База
				|	ПО		Основной.Сотрудник = База.Сотрудник 
				|		И	Основной.ДатаНачала = База.ДатаНачала 
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПрожиточныеМинимумыИндексацииСН + " КАК ПрожиточныеМинимумы
				|	ПО		Основной.ДатаНачала = ПрожиточныеМинимумы.ДатаНачала
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТДанныеПоИндексацииСН = "ВТДанныеПоИндексацииСН";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТДанныеПоИндексацииСН+" КАК ДанныеПоИндексацииСоциальныхНачислений
			|ПО		Основной.НомерСтроки = ДанныеПоИндексацииСоциальныхНачислений.НомерСтроки
			|";
			////
			////ИзмеренияБазы = Новый Массив(1);
			////ИзмеренияБазы[0] = "ВидРасчета";    
			////Запрос.УстановитьПараметр("парамРазрезы", ИзмеренияБазы);
			////
			////Запрос.УстановитьПараметр("парамИндексацияСоциальныхНачислений", Перечисления.СпособыРасчетаОплатыТруда.ИндексацияСоциальныхНачислений);
			////
			////Измерения = Новый Массив(2);
			////Измерения[0] = "ФизЛицо";
			////Измерения[1] = "Организация";
			////// для начислений сопоставляемые измерения основного и базового регистров совпадают
			////Запрос.УстановитьПараметр("парамИзмеренияИндексация", Измерения);
			////
			////Запрос.Текст = "";//БазаИндексацииСоциальныхНачисленийТекст;
			////Запрос.Выполнить();
			////БазаИндексацииСоциальныхНачисленийТекст = "ВТБазаИндексацииСоциальныхНачислений";
			////ТекстЗапроса = ТекстЗапроса + "
			////|ЛЕВОЕ СОЕДИНЕНИЕ ("+БазаИндексацииСоциальныхНачисленийТекст+") КАК ДанныеПоИндексацииСоциальныхНачислений
			////|ПО Основной.НомерСтроки = ДанныеПоИндексацииЗарплаты.НомерСтроки";
		КонецЕсли;
		
		Если НеобходимыеДанные.СуммаКомпенсации Тогда
			ТекстЗапроса = ТекстЗапроса + " 
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&парамПериодРегистрации, Организация = &парамОрганизация) КАК Задолженность
			|ПО   Задолженность.ПериодВзаиморасчетов = Основной.БазовыйПериодНачало
			|   И Задолженность.Сотрудник = Основной.Сотрудник
			|
			|";
		КонецЕсли;
		
		
		Если НеобходимыеДанные.СдельныйЗаработок Тогда
			Запрос.УстановитьПараметр("СпособРасчетаСдельныйЗаработок", Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
			
			Запрос.Текст = СдельныйЗаработокОрганизацииТекст;
			Запрос.Выполнить();
			СдельныйЗаработокОрганизацииТекст = "ВТСдельныйЗаработокОрганизации";
			Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТСдельныйЗаработокОрганизации";
			
			// присоединяем данные о сдельном заработке
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+СдельныйЗаработокОрганизацииТекст+" КАК ДанныеОСдельномЗаработке
			|ПО Основной.НомерСтроки = ДанныеОСдельномЗаработке.ОсновнойНомерСтроки";
			
		КонецЕсли;
				
	КонецЕсли;
	
	Если ИмяРегистра = "УправленческиеНачисления" или 
		ИмяРегистра = "УправленческиеУдержания" Тогда 
		
		ТекстЗапроса =                     
		"ВЫБРАТЬ 
		|Основной.Регистратор Как Регистратор,
		|Основной.НомерСтроки Как НомерСтроки,
		|Основной.ВидРасчета Как ВидРасчета,
		|Основной.ВидРасчета.Наименование Как ВидРасчетаНаименование,
		|Основной.Физлицо Как Сотрудник,
		|Основной.Физлицо.Наименование Как СотрудникНаименование";
		
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			ИмяПВР = Метаданные.РегистрыРасчета[ИмяРегистра].планВидовРасчета.Имя;	
			Запрос.УстановитьПараметр("ПоказательВремяВДнях", Справочники.ПоказателиСхемМотивации.ВремяВДнях);
			Запрос.УстановитьПараметр("ПоказательВремяВЧасах", Справочники.ПоказателиСхемМотивации.ВремяВЧасах);
			Запрос.УстановитьПараметр("ПоказательНормаВремениВДнях", Справочники.ПоказателиСхемМотивации.НормаВремениВДнях);
			Запрос.УстановитьПараметр("ПоказательНормаВремениВЧасах", Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах);
			Запрос.УстановитьПараметр("ПоказательРасчетнаяБаза", Справочники.ПоказателиСхемМотивации.РасчетнаяБаза);
			Запрос.УстановитьПараметр("ПоказательСтаж", Справочники.ПоказателиСхемМотивации.Стаж);
			Запрос.УстановитьПараметр("ПоказательНуль", Справочники.ПоказателиСхемМотивации.Нуль);
			
			ПроцентныеПоказатели = Новый Массив;
			ПроцентныеПоказатели.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная);
			ПроцентныеПоказатели.Добавить(Перечисления.ТипыПоказателейСхемМотивации.Процентный);
			Запрос.УстановитьПараметр("ПроцентныеПоказатели", ПроцентныеПоказатели);
			
			
			// Получим максимальное число показателей			
			Если Истина Тогда
				
				ТекстКолВоПоказателей =
				"ВЫБРАТЬ
				|	МАКСИМУМ(ВложенныйЗапрос.НомерСтроки) КАК КолВоПоказателей
				|ИЗ
				|	РегистрРасчета."+ИмяРегистра+" КАК Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	(ВЫБРАТЬ
				|		Показатели.Ссылка,
				|		Показатели.НомерСтроки КАК НомерСтроки
				|	ИЗ";
				ТекстКолВоПоказателей  =  ТекстКолВоПоказателей + "	ПланВидовРасчета." + ИмяПВР + ".Показатели КАК Показатели) КАК ВложенныйЗапрос ";
				ТекстКолВоПоказателей = ТекстКолВоПоказателей +"
				|	ПО ВложенныйЗапрос.Ссылка = Основной.ВидРасчета
				|ГДЕ "+ВнешнееУсловие;
				
				Запрос.Текст = ТекстКолВоПоказателей;
				ВыборкаКоличестваПоказателей = Запрос.Выполнить().Выбрать();
				
				
				ВыборкаКоличестваПоказателей.Следующий();
				КоличествоПоказателей = ?(ВыборкаКоличестваПоказателей.КолВоПоказателей=NULL,0,ВыборкаКоличестваПоказателей.КолВоПоказателей);		
				
			КонецЕсли;
			
			Если КоличествоПоказателей = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				| 0 КАК КоличествоПоказателей,";
			Иначе
				ТекстЗапроса = ТекстЗапроса + ",
				| Показатели.КоличествоПоказателей КАК КоличествоПоказателей,";
				Если КомментироватьРасчет Тогда
					ПоляЗапросаМаксимум.Добавить("КоличествоПоказателей");
				КонецЕсли;
			КонецЕсли;
			
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("ФормулаРасчета");
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			| Основной.ВидРасчета.ФормулаРасчета КАК ФормулаРасчета";
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				ТекстЗапроса = ТекстЗапроса + ", 
				|Показатели.Показатель" + СчПоказателей+".Наименование Как Показатель" + СчПоказателей + "Наименование";
				
				Если КомментироватьРасчет Тогда
					ПоляЗапросаМаксимум.Добавить("Показатель" + СчПоказателей + "Наименование");
				КонецЕсли;
			КонецЦикла;			
			
			Показатель1Текст = ПолучитьТекстПоказателяУпр(НеобходимыеДанные,ИмяРегистра,, КоличествоПоказателей, КомментироватьРасчет);
			Если КоличествоПоказателей > 6 Тогда
				// получим текст запроса для предопределенных показателей
				Показатель1ТекстПредопределенный = ПолучитьТекстПоказателяУпр(НеобходимыеДанные,ИмяРегистра, Истина, КоличествоПоказателей, КомментироватьРасчет);
			КонецЕсли;
			
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				Если СчПоказателей > 6 Тогда					
					ПоказательТекст = СтрЗаменить(Показатель1ТекстПредопределенный, "Показатель1", "Показатель"+СчПоказателей);
				Иначе
					ПоказательТекст = СтрЗаменить(Показатель1Текст, "Показатель1", "Показатель"+СчПоказателей);
				КонецЕсли;					
				ТекстЗапроса = ТекстЗапроса + ", 
				|" + ПоказательТекст + " Как Показатель"+СчПоказателей;
				
				Если КомментироватьРасчет Тогда
					ПоляЗапросаМаксимум.Добавить("Показатель" + СчПоказателей);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
		Если ИмяРегистра = "УправленческиеНачисления" Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|Основной.ВидРасчета.ЗачетОтработанногоВремени Как ЗачетОтработанногоВремени,
			|Основной.ВидУчетаВремени Как ВидУчетаВремени";
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноВремени Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|			ТОГДА NULL
			|		ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОсновноеЗначениеПоТабелю, ВЫБОР
			|								КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|									ТОГДА NULL
			|								ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОсновноеЗначение, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия, 0))
			|							КОНЕЦ)
			|	КОНЕЦ КАК ОтработаноВремени,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|			ТОГДА 0
			|		ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ДнейПоТабелю, ВЫБОР
			|								КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|									ТОГДА 0
			|								ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ДнейПоГрафику, ЕСТЬNULL(ВЫБОР
			|												КОГДА Основной.ВидУчетаВремени = &ПоДням
			|													ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|												ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|											КОНЕЦ, 0))
			|							КОНЕЦ)
			|	КОНЕЦ КАК ОтработаноДней,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|			ТОГДА 0
			|		ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ЧасовПоТабелю, ВЫБОР
			|								КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|									ТОГДА 0
			|								ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ЧасовПоГрафику, ЕСТЬNULL(ВЫБОР
			|												КОГДА Основной.ВидУчетаВремени = &ПоДням
			|													ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|												ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|											КОНЕЦ, 0)) - ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение, 0)
			|							КОНЕЦ)
			|	КОНЕЦ КАК ОтработаноЧасов,
			|	ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение,0) КАК ОтработаноЧасовПоТабелюОтклонение";
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("ОтработаноВремени");
				ПоляЗапросаМаксимум.Добавить("ОтработаноДней");
				ПоляЗапросаМаксимум.Добавить("ОтработаноЧасов");
				ПоляЗапросаМаксимум.Добавить("ОтработаноВремениПроизводственныйГрафик");
				ПоляЗапросаМаксимум.Добавить("ОтработаноЧасовПроизводственныйГрафик");
				//ПоляЗапросаМаксимум.Добавить("ОтработаноЧасовПоТабелю");
				ПоляЗапросаМаксимум.Добавить("ОтработаноЧасовПоТабелюОтклонение");
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ", 
		|Основной.ВидРасчета.СпособРасчета Как СпособРасчета";
		
		Если НеобходимаБаза Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|База.РезультатБаза";
		КонецЕсли;
		
		Если НеобходимГрафик Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ) КАК ОшибкаВводаИндивидуальногоГрафикаРаботы,
			|	ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ) КАК ОшибкаВводаОтработанногоВремени,
			|	ЛОЖЬ КАК ПредупреждениеНесоответствияТабеляИНачисления,
			|	Основной.ГрафикРаботы.Наименование КАК ГрафикРаботыНаименование";
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("ГрафикРаботыНаименование");
				ПоляЗапросаМаксимум.Добавить("ОшибкаВводаИндивидуальногоГрафикаРаботы");
				ПоляЗапросаМаксимум.Добавить("ОшибкаВводаОтработанногоВремени");
				ПоляЗапросаМаксимум.Добавить("ПредупреждениеНесоответствияТабеляИНачисления");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.Стаж Тогда
			// стаж работы на предприятии
			ТекстЗапроса = ТекстЗапроса + ", 
			|РАЗНОСТЬДАТ(ДанныеОСтаже.Период, &ПериодРегистрации, МЕСЯЦ) КАК Стаж";			
			
		КонецЕсли;
		
		Если НеобходимыеДанные.СдельныйЗаработок Тогда
			// размер сдельного заработка
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ)
			|			ТОГДА NULL
			|		ИНАЧЕ ДанныеОСдельномЗаработке.СуммаЗаработка 
			|	КОНЕЦ КАК РазмерСдельногоЗаработка,
			|ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ) КАК ОшибкаВводаФактическойВыработки";
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("ОшибкаВводаФактическойВыработки");
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "		
		|ИЗ РегистрРасчета." + ИмяРегистра + " Как Основной";
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			
			ИмяПВР = Метаданные.РегистрыРасчета[ИмяРегистра].планВидовРасчета.Имя;	
			// ВТПоказатели
			Если Истина Тогда
				// получим временную таблицу с расчетом показателей
				ТекстЗапросаПоказатели = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Основной.ВидРасчета,
				|	ЕстьNULL(МАКСИМУМ(ВСЕПоказатели.НомерСтроки),0) КАК КоличествоПоказателей";
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + ",
					|	Показатели"+ СчПоказателей + ".Показатель КАК Показатель" + СчПоказателей;
				КонецЦикла;
				ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
				|ПОМЕСТИТЬ ВТПоказатели
				|ИЗ
				|	РегистрРасчета."+ИмяРегистра +" КАК Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ИмяПВР+".Показатели КАК ВСЕПоказатели
				|	ПО Основной.ВидРасчета = ВСЕПоказатели.Ссылка";
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
					|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ИмяПВР+".Показатели КАК Показатели"+ СчПоказателей + "
					|	ПО Основной.ВидРасчета = Показатели"+ СчПоказателей + ".Ссылка 
					|	И  Показатели"+ СчПоказателей + ".НомерСтроки = "+ СчПоказателей;
				КонецЦикла;
				ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
				|ГДЕ " + ВнешнееУсловие + "
				|СГРУППИРОВАТЬ ПО
				|	Основной.ВидРасчета";
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + ",
					|	Показатели"+ СчПоказателей + ".Показатель";
				КонецЦикла;
				ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
				|ИНДЕКСИРОВАТЬ ПО Основной.ВидРасчета";		
				
				Запрос.Текст = ТекстЗапросаПоказатели;
				Запрос.Выполнить();
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
			|ПО Показатели.ВидРасчета = Основной.ВидРасчета";
			
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
			// присоединяем к базе
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета." + ИмяРегистра + ".БазаУправленческиеНачисления(&парамИзмеренияОсновного, &парамИзмеренияБазового, , " + Условие + ") Как База
			|ПО База.Регистратор = Основной.Регистратор И База.НомерСтроки = Основной.НомерСтроки";
		КонецЕсли;
		
		Если НеобходимГрафик Тогда
			Запрос.УстановитьПараметр("ПоДням", Перечисления.ВидыУчетаВремени.ПоДням);
			Запрос.УстановитьПараметр("ПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
			Запрос.УстановитьПараметр("ПоВечернимЧасам", Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
			Запрос.УстановитьПараметр("ПоНочнымЧасам", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
			Запрос.УстановитьПараметр("ПустойВидИспользованияРабочегоВремени", Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка());
			Запрос.УстановитьПараметр("ОтработанноеВПределахНормы", Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
			Запрос.УстановитьПараметр("ЦелодневноеНеотработанное", Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
			Запрос.УстановитьПараметр("ЧасовоеНеотработанное", Перечисления.ВидыВремени.ЧасовоеНеотработанное);
			Запрос.УстановитьПараметр("ЧасовоеОтработанноеВПределахНормы", Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
			
			Запрос.Текст = УпрВремяПоТабелюТекст;
			Запрос.Выполнить();
			УпрВремяПоТабелюТекст = "ВТУпрВремяПоТабелю";
			
			Запрос.Текст = УпрСводныеИндивидуальныеГрафикиТекст;
			Запрос.Выполнить();
			УпрСводныеИндивидуальныеГрафикиТекст = "ВТУпрСводныеИндивидуальныеГрафики";
			
			Запрос.Текст = УпрВремяВведенноеВЦеломЗаПериодТекст;
			Запрос.Выполнить();
			УпрВремяВведенноеВЦеломЗаПериодТекст = "ВТУпрВремяВведенноеВЦеломЗаПериод";
			
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета." + ИмяРегистра + ".ДанныеГрафика(" + Условие +  ") Как ДанныеГрафика
			|ПО Основной.Регистратор = ДанныеГрафика.Регистратор И Основной.НомерСтроки = ДанныеГрафика.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ " + УпрВремяПоТабелюТекст + " КАК ВремяПоТабелю
			|ПО Основной.НомерСтроки = ВремяПоТабелю.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ " + УпрСводныеИндивидуальныеГрафикиТекст + " КАК СводныеИндивидуальныеГрафики
			|ПО Основной.НомерСтроки = СводныеИндивидуальныеГрафики.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ " + УпрВремяВведенноеВЦеломЗаПериодТекст + " КАК ВремяВведенноеВЦеломЗаПериод
			|ПО Основной.НомерСтроки = ВремяВведенноеВЦеломЗаПериод.НомерСтроки
			|";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.Стаж Тогда
			// присоединение к данным о стаже
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК ДанныеОСтаже
			|ПО ДанныеОСтаже.Физлицо = Основной.Физлицо
			|И	ДанныеОСтаже.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)";
			
			Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
		КонецЕсли;
		
		Если НеобходимыеДанные.СдельныйЗаработок Тогда
			
			Запрос.Текст = СдельныйЗаработокКомпанииТекст;
			Запрос.Выполнить();
			СдельныйЗаработокКомпанииТекст = "ВТСдельныйЗаработокКомпании";
			
			// присоединяем данные о сдельном заработке
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+СдельныйЗаработокКомпанииТекст+" КАК ДанныеОСдельномЗаработке
			|ПО Основной.НомерСтроки = ДанныеОСдельномЗаработке.ОсновнойНомерСтроки";
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если ИмяРегистра = "УдержанияРаботниковОрганизаций" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	Основной.Регистратор Как Регистратор, 
		|	Основной.НомерСтроки Как НомерСтроки, 
		|	Основной.Сотрудник Как Сотрудник, 
		|	Основной.Сотрудник.Наименование Как СотрудникНаименование, 
		|	Основной.ВидРасчета Как ВидРасчета,
		|	Истина Как ВидРасчетаПериодДействияБазовый,
		|	Основной.ВидРасчета.Наименование Как ВидРасчетаНаименование,
		|	Основной.ВидРасчета.СпособРасчета Как СпособРасчета";
		
		Если КомментироватьРасчет Тогда
			ПоляЗапросаМаксимум.Добавить("Сотрудник");
			ПоляЗапросаМаксимум.Добавить("СотрудникНаименование");
			ПоляЗапросаМаксимум.Добавить("ВидРасчета");
			ПоляЗапросаМаксимум.Добавить("ВидРасчетаНаименование");
			ПоляЗапросаМаксимум.Добавить("СпособРасчета");
			ПоляЗапросаМаксимум.Добавить("ВидРасчетаПериодДействияБазовый");
		КонецЕсли;
		
		Если НеобходимыеДанные.ПределПоДокументуОснованию Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	Основной.ДокументОснование.Предел Как ПределПоДокументуОснованию";
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("ПределПоДокументуОснованию");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			
			// Получим максимальное число показателей			
			Если Истина Тогда
		
				ТекстКолВоПоказателей =
				"ВЫБРАТЬ
				|	МАКСИМУМ(ВложенныйЗапрос.НомерСтроки) КАК КолВоПоказателей
				|ИЗ
				|	РегистрРасчета."+ИмяРегистра+" КАК Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	(ВЫБРАТЬ
				|		Показатели.Ссылка,
				|		Показатели.НомерСтроки КАК НомерСтроки
				|	ИЗ";
				ТекстКолВоПоказателей  =  ТекстКолВоПоказателей + "	ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели) КАК ВложенныйЗапрос ";
				ТекстКолВоПоказателей = ТекстКолВоПоказателей +"
				|	ПО ВложенныйЗапрос.Ссылка = Основной.ВидРасчета
				|ГДЕ "+ВнешнееУсловие;
				
				Запрос.Текст = ТекстКолВоПоказателей;
				ВыборкаКоличестваПоказателей = Запрос.Выполнить().Выбрать();
				ВыборкаКоличестваПоказателей.Следующий();
				КоличествоПоказателей = ?(ВыборкаКоличестваПоказателей.КолВоПоказателей=NULL,0,ВыборкаКоличестваПоказателей.КолВоПоказателей);		
			КонецЕсли;
			
			Если КоличествоПоказателей = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				| 0 КАК КоличествоПоказателей,";
			Иначе
				ТекстЗапроса = ТекстЗапроса + ",
				| Показатели.КоличествоПоказателей КАК КоличествоПоказателей,";
				Если КомментироватьРасчет Тогда
					ПоляЗапросаМаксимум.Добавить("КоличествоПоказателей");
				КонецЕсли;
			КонецЕсли;
			
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("ФормулаРасчета");
			КонецЕсли;
				
			ТекстЗапроса = ТекстЗапроса + "
			| Основной.ВидРасчета.ФормулаРасчета КАК ФормулаРасчета";
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				ТекстЗапроса = ТекстЗапроса + ", 
				|Показатели.Показатель" + СчПоказателей+".Наименование Как Показатель" + СчПоказателей + "Наименование";
				
				Если КомментироватьРасчет Тогда
					ПоляЗапросаМаксимум.Добавить("Показатель" + СчПоказателей + "Наименование");
				КонецЕсли;
			КонецЦикла;			
			
			Показатель1Текст = ПолучитьТекстПоказателя(НеобходимыеДанные,ИмяРегистра,, КоличествоПоказателей, КомментироватьРасчет);
			Если КоличествоПоказателей > 6 Тогда
				// получим текст запроса для предопределенных показателей
				Показатель1ТекстПредопределенный = ПолучитьТекстПоказателя(НеобходимыеДанные,ИмяРегистра, Истина, КоличествоПоказателей, КомментироватьРасчет);
			КонецЕсли;
			
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				Если СчПоказателей > 6 Тогда					
					ПоказательТекст = СтрЗаменить(Показатель1ТекстПредопределенный, "Показатель1", "Показатель"+СчПоказателей);
				Иначе
					ПоказательТекст = СтрЗаменить(Показатель1Текст, "Показатель1", "Показатель"+СчПоказателей);
				КонецЕсли;					
				ТекстЗапроса = ТекстЗапроса + ", 
			   	|" + ПоказательТекст + " Как Показатель"+СчПоказателей;
				
				Если КомментироватьРасчет Тогда
					ПоляЗапросаМаксимум.Добавить("Показатель" + СчПоказателей);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		
		Если НеобходимаБаза Тогда
			//Базы	
			Если КомментироватьРасчет Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|БазСКоментарием.РезультатБаза Как РезультатБаза,
				|БазСКоментарием.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
				|БазСКоментарием.ВидРасчетаРазрез.Наименование КАК ВидРасчетаРазрезНаименование";
				ПоляЗапросаМаксимум.Добавить("ВидРасчетаРазрез");
				ПоляЗапросаМаксимум.Добавить("ВидРасчетаРазрезНаименование");
			Иначе 
				ТекстЗапроса = ТекстЗапроса + ",
				|База.РезультатБаза КАК РезультатБаза";
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|НакопленныеДанные.УжеНачисленоВТекущемПериоде     КАК УжеНачисленоВТекущемПериоде,
			|НакопленныеДанные.УжеНачисленоЗаВсюИсторию        КАК УжеНачисленоЗаВсюИсторию";
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("УжеНачисленоВТекущемПериоде");
				ПоляЗапросаМаксимум.Добавить("УжеНачисленоЗаВсюИсторию");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныеВзносы Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|ИсчисленныеВзносы.Взносы КАК Взносы";
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("Взносы");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныйНДФЛ Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|ИсчисленныйНДФЛ.НДФЛ КАК ИсчисленныйНДФЛ";
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("ИсчисленныйНДФЛ");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ПараметрыИсполнительногоЛиста Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|ИсполниетльныеЛисты_ДетиДо6.Размер          	КАК АлиментыДетиДо6,
			|ИсполниетльныеЛисты_ДетиДо18.Размер          	КАК АлиментыДетиДо18,
			|ИсполниетльныеЛисты_Трудоспособные.Размер		КАК АлиментыТрудоспособные,
			|ИсполниетльныеЛисты.Предел          			КАК Предел,
			|ИсполниетльныеЛисты.ПометкаУвеличиватьДоМинимума КАК ПометкаУвеличиватьДоМинимума,
			|ЕСТЬNULL(ИсполниетльныеЛисты.ДетейВДокументеВсего,0)       КАК ДетейВДокументеВсего,
			|ЕСТЬNULL(ИсполниетльныеЛисты.ДетейВДокументе6,0)      		КАК ДетейВДокументе6,
			|ЕСТЬNULL(ИсполниетльныеЛисты.ДетейВДокументе18,0)     		КАК ДетейВДокументе18,
			|ЕСТЬNULL(ИсполниетльныеЛисты.ДетейВДокументе19,0)     		КАК ДетейВДокументе19,
			|ЕСТЬNULL(ИсполниетльныеЛисты.ДетейВДокументе,0)            КАК ДетейВДокументе";
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("АлиментыДетиДо6");
				ПоляЗапросаМаксимум.Добавить("АлиментыДетиДо18");
				ПоляЗапросаМаксимум.Добавить("АлиментыТрудоспособные");
				ПоляЗапросаМаксимум.Добавить("Предел");
				ПоляЗапросаМаксимум.Добавить("ПометкаУвеличиватьДоМинимума");
				ПоляЗапросаМаксимум.Добавить("ДетейВДокументеВсего");
				ПоляЗапросаМаксимум.Добавить("ДетейВДокументе6");
				ПоляЗапросаМаксимум.Добавить("ДетейВДокументе18");
				ПоляЗапросаМаксимум.Добавить("ДетейВДокументе19");
				ПоляЗапросаМаксимум.Добавить("ДетейВДокументе");
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимыеДанные.ПараметрыПочты Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|ПочтовыеПереводы.РазмерПочтовогоПеревода		КАК РазмерПочтовогоПеревода,
			|ПараметрыПочты.СуммаДополнительно				КАК СуммаДополнительно,
			|ПараметрыПочты.Ставка 							КАК Ставка";   
			Если КомментироватьРасчет Тогда
				ПоляЗапросаМаксимум.Добавить("РазмерПочтовогоПеревода");
				ПоляЗапросаМаксимум.Добавить("СуммаДополнительно");
				ПоляЗапросаМаксимум.Добавить("Ставка"); 
			КонецЕсли;
		КонецЕсли;

		ТекстЗапроса = ТекстЗапроса + "
		|	ИЗ РегистрРасчета."+ИмяРегистра+" Как Основной";
			
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
						
		ИмяПВР = Метаданные.РегистрыРасчета[ИмяРегистра].планВидовРасчета.Имя;	
			// ВТПоказатели
			Если Истина Тогда
				// получим временную таблицу с расчетом показателей
				ТекстЗапросаПоказатели = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Основной.ВидРасчета,
				|	ЕстьNULL(МАКСИМУМ(ВСЕПоказатели.НомерСтроки),0) КАК КоличествоПоказателей";
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + ",
					|	Показатели"+ СчПоказателей + ".Показатель КАК Показатель" + СчПоказателей;
				КонецЦикла;
				ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
				|ПОМЕСТИТЬ ВТПоказатели
				|ИЗ
				|	РегистрРасчета."+ИмяРегистра +" КАК Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ИмяПВР+".Показатели КАК ВСЕПоказатели
				|	ПО Основной.ВидРасчета = ВСЕПоказатели.Ссылка";
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
					|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ИмяПВР+".Показатели КАК Показатели"+ СчПоказателей + "
					|	ПО Основной.ВидРасчета = Показатели"+ СчПоказателей + ".Ссылка 
					|	И  Показатели"+ СчПоказателей + ".НомерСтроки = "+ СчПоказателей;
				КонецЦикла;
				ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
				|ГДЕ " + ВнешнееУсловие + "
				|СГРУППИРОВАТЬ ПО
				|	Основной.ВидРасчета";
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + ",
					|	Показатели"+ СчПоказателей + ".Показатель";
				КонецЦикла;
				ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
				|ИНДЕКСИРОВАТЬ ПО Основной.ВидРасчета";		
				
				Запрос.Текст = ТекстЗапросаПоказатели;
				Запрос.Выполнить();
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
            |ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
			|ПО Показатели.ВидРасчета = Основной.ВидРасчета";
						
		КонецЕсли;
		

		
		Если НеобходимаБаза Тогда
			// присоединяем к базе
			
			
			// ВТБазы
			//	Описание:
			// 		Альтернатива таблице РегистрРасчета.ВзносыВФонды.БазаОсновныеНачисленияРаботниковОрганизаций(
			//
			ТекстЗапросаВТ = "
			|	ВЫБРАТЬ 
			|		Основной.Регистратор КАК Регистратор, 
			|		Основной.НомерСтроки КАК НомерСтроки, 
			|		СУММА(Основной.РезультатБаза)	КАК РезультатБаза 
			|ПОМЕСТИТЬ ВТБазы	
			|		ИЗ (
			|		ВЫБРАТЬ 
			|			Основной.Регистратор КАК Регистратор, 
			|			Основной.НомерСтроки КАК НомерСтроки, 
			|			Основной.ВидРасчета КАК Взнос, 
			|			Основной.Сотрудник КАК Сотрудник, 
			|			БазаИзНачислений.ВидРасчета КАК ВидРасчета, 
			|			БазаИзНачислений.Результат		КАК РезультатБаза 
			|		ИЗ РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основной
			| 
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК БазаИзНачислений
			|		ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
			|			И	БазаИзНачислений.ПериодРегистрации = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
			|			И	БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|		ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
			|			И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			| 
			|		ГДЕ Основной.Регистратор = &парамРегистратор
			|			И	Основной.Сотрудник В (&парамСотрудники)
			| 
			|       ОБЪЕДИНИТЬ ВСЕ
			|		ВЫБРАТЬ 
			|			Основной.Регистратор КАК Регистратор, 
			|			Основной.НомерСтроки КАК НомерСтроки, 
			|			Основной.ВидРасчета КАК Взнос, 
			|			Основной.Сотрудник КАК Сотрудник, 
			|			БазаИзНачислений.ВидРасчета КАК ВидРасчета, 
			|			БазаИзНачислений.Результат		КАК РезультатБаза 
			|		ИЗ РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основной
			| 
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УдержанияРаботниковОрганизаций КАК БазаИзНачислений
			|		ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
			|			И	БазаИзНачислений.ПериодРегистрации = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
			|			И	БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|		ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
			|			И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			| 
			|		ГДЕ Основной.Регистратор = &парамРегистратор
			|			И	Основной.Сотрудник В (&парамСотрудники)
			| 
			|	)КАК Основной 
			| 
			|	СГРУППИРОВАТЬ ПО 
			|		Основной.Регистратор, 
			|		Основной.НомерСтроки 
			| ";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТБазы КАК База
			|ПО Основной.Регистратор = База.Регистратор И Основной.НомерСтроки = База.НомерСтроки";
			
			Если КомментироватьРасчет Тогда
				
				// ВТБазыСКоментарием
				//	Описание:
				// 		Альтернатива таблице РегистрРасчета.ВзносыВФонды.БазаОсновныеНачисленияРаботниковОрганизаций(
				//
				ТекстЗапросаВТ = "
				|		ВЫБРАТЬ 
				|			Основной.Регистратор КАК Регистратор, 
				|			Основной.НомерСтроки КАК НомерСтроки, 
				|			БазаИзНачислений.ВидРасчета КАК ВидРасчетаРазрез, 
				|			СУММА(БазаИзНачислений.Результат)		КАК РезультатБаза 
				|ПОМЕСТИТЬ ВТБазыСКоментарием	
				|		ИЗ РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основной
				| 
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК БазаИзНачислений
				|		ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
				|			И	БазаИзНачислений.ПериодРегистрации = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
				|			И	БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
				|		ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
				|			И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
				| 
				|		ГДЕ 	Основной.Регистратор = &парамРегистратор
				|			И	Основной.Сотрудник В (&парамСотрудники)
				| 
				|		СГРУППИРОВАТЬ ПО 
				|			Основной.Регистратор, 
				|			Основной.НомерСтроки, 
				|			БазаИзНачислений.ВидРасчета 
				| 
				|       ОБЪЕДИНИТЬ ВСЕ
				|		ВЫБРАТЬ 
				|			Основной.Регистратор КАК Регистратор, 
				|			Основной.НомерСтроки КАК НомерСтроки, 
				|			БазаИзНачислений.ВидРасчета КАК ВидРасчетаРазрез, 
				|			СУММА(БазаИзНачислений.Результат)		КАК РезультатБаза 
				|		ИЗ РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основной
				| 
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УдержанияРаботниковОрганизаций КАК БазаИзНачислений
				|		ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
				|			И	БазаИзНачислений.ПериодРегистрации = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
				|			И	БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
				|		ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
				|			И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
				| 
				|		ГДЕ 	Основной.Регистратор = &парамРегистратор
				|			И	Основной.Сотрудник В (&парамСотрудники)
				| 
				|		СГРУППИРОВАТЬ ПО 
				|			Основной.Регистратор, 
				|			Основной.НомерСтроки, 
				|			БазаИзНачислений.ВидРасчета 
				| ";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТБазыСКоментарием = "ВТБазыСКоментарием";
				
				ТекстЗапроса = ТекстЗапроса + "
				|ЛЕВОЕ СОЕДИНЕНИЕ ВТБазыСКоментарием КАК БазСКоментарием
				|ПО Основной.Регистратор = БазСКоментарием.Регистратор И Основной.НомерСтроки = БазСКоментарием.НомерСтроки
				|";
			КонецЕсли;
			
			
			
		КонецЕсли;
		
		Если НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
			Запрос.Текст = НакопленныеДанныеТекст;
			Запрос.Выполнить();
			НакопленныеДанныеТекст = "ВТНакопленныеДанные";
			
			// присоединяем сводные данные по документу основанию
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+НакопленныеДанныеТекст+" КАК НакопленныеДанные
			|ПО 
			|	НакопленныеДанные.Сотрудник = Основной.Сотрудник
			|	И НакопленныеДанные.ВидРасчета = Основной.ВидРасчета
			|	И НакопленныеДанные.ДокументОснование = Основной.ДокументОснование";
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныеВзносы Тогда
			
			ИсчисленныеВзносыТекст = "
			|ВЫБРАТЬ
			|	ВзносыВФонды.Сотрудник      КАК Сотрудник,
			|	СУММА(ВзносыВФонды.Результат) КАК Взносы
			|ПОМЕСТИТЬ ВТИсчисленныеВзносы
			|ИЗ
			|	РегистрРасчета.ВзносыВФонды КАК ВзносыВФонды
			|
			|ГДЕ  ВзносыВФонды.Организация = &парамОрганизация
			|	И ВзносыВФонды.ПериодРегистрации = &парамПериодРегистрации
			|	И ВзносыВФонды.ВидРасчета.СпособРасчета в (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Взносы))
			|
			|СГРУППИРОВАТЬ ПО
			|	ВзносыВФонды.Сотрудник
			|ИНДЕКСИРОВАТЬ ПО 
			|	Сотрудник";
			
			Запрос.Текст = ИсчисленныеВзносыТекст;
			Запрос.Выполнить();
			ИсчисленныеВзносыТекст = "ВТИсчисленныеВзносы";
		
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ИсчисленныеВзносыТекст + " КАК ИсчисленныеВзносы
			|ПО Основной.Сотрудник = ИсчисленныеВзносы.Сотрудник
			|
			|";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныйНДФЛ Тогда
			ИсчисленныйНДФЛТекст = "
			|ВЫБРАТЬ
			|	ВзаиморасчетыПоНДФЛ.Сотрудник		КАК Сотрудник,
			|	СУММА(ВзаиморасчетыПоНДФЛ.Налог)	КАК НДФЛ
			|ПОМЕСТИТЬ ВТИсчисленныйНДФЛ
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛ
			|
			|ГДЕ
			|	ВзаиморасчетыПоНДФЛ.Организация = &парамОрганизация
			|	И НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.Период,Месяц) = НАЧАЛОПЕРИОДА(&парамПериодРегистрации,Месяц)
			|	И ВзаиморасчетыПоНДФЛ.ВидДвижения = &парамПриход
			|
			|СГРУППИРОВАТЬ ПО
			|	ВзаиморасчетыПоНДФЛ.Сотрудник
			|ИНДЕКСИРОВАТЬ ПО 
			|	Сотрудник";
			
			Запрос.Текст = ИсчисленныйНДФЛТекст;
			Запрос.Выполнить();
			ИсчисленныйНДФЛТекст = "ВТИсчисленныйНДФЛ";
			
			// присоединяем данные по исчисленному НДФЛ
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ИсчисленныйНДФЛТекст+" КАК ИсчисленныйНДФЛ
			|ПО Основной.Сотрудник = ИсчисленныйНДФЛ.Сотрудник";
			
		КонецЕсли;
				
		Если НеобходимыеДанные.ПараметрыИсполнительногоЛиста Тогда
			Запрос.УстановитьПараметр("парамДетиДо6"	, Перечисления.СоциальныеГруппыНаселения.ДетиДо6);
			Запрос.УстановитьПараметр("парамДетиДо18"	, Перечисления.СоциальныеГруппыНаселения.ДетиДо18);
			Запрос.УстановитьПараметр("парамТрудоспособные", Перечисления.СоциальныеГруппыНаселения.Трудоспособные);
			
			Запрос.УстановитьПараметр("парамПериодРегистрации6"		, ДобавитьМесяц(ПериодРегистрации, -6*12));
			Запрос.УстановитьПараметр("парамПериодРегистрации18"	, ДобавитьМесяц(ПериодРегистрации, -18*12));
			
			ДанныеДокументаТекст = "
			|                                   
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТабличнаяЧастьДети.Ссылка                              КАК ИсполнительныйЛист, 
			|	ТабличнаяЧастьДети.Ссылка.ТарифПочты                   КАК ПочтовыйТариф, 
			|	ТабличнаяЧастьДети.Ссылка.Предел                       КАК Предел,
			|	ТабличнаяЧастьДети.Ссылка.ПометкаУвеличиватьДоМинимума КАК ПометкаУвеличиватьДоМинимума,
			|	КОЛИЧЕСТВО ( РАЗЛИЧНЫЕ ТабличнаяЧастьДети.ФизЛицо)     КАК ДетейВДокументеВсего,
			|	КОЛИЧЕСТВО ( РАЗЛИЧНЫЕ АктуальныеДети.ФизЛицо)         КАК ДетейВДокументе,
			|	КОЛИЧЕСТВО ( РАЗЛИЧНЫЕ АктуальныеДети_ДетиДо6.ФизЛицо)			КАК ДетейВДокументе6,
			|	КОЛИЧЕСТВО ( РАЗЛИЧНЫЕ АктуальныеДети_ДетиДо18.ФизЛицо)			КАК ДетейВДокументе18,
			|	КОЛИЧЕСТВО ( РАЗЛИЧНЫЕ АктуальныеДети_Трудоспособные.ФизЛицо)	КАК ДетейВДокументе19
			|
			|ИЗ	Документ.ИсполнительныйЛист.Дети КАК ТабличнаяЧастьДети
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсполнительныйЛист.Дети КАК АктуальныеДети
			|ПО   АктуальныеДети.ГодОкончания >= ГОД(&парамПериодРегистрации) 
			|   И АктуальныеДети.Ссылка = ТабличнаяЧастьДети.Ссылка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсполнительныйЛист.Дети КАК АктуальныеДети_ДетиДо6
			|ПО   НАЧАЛОПЕРИОДА(АктуальныеДети_ДетиДо6.ФизЛицо.ДатаРождения, ГОД) >= &парамПериодРегистрации6 
			|	И НАЧАЛОПЕРИОДА(АктуальныеДети_ДетиДо6.ФизЛицо.ДатаРождения, ГОД) <  &парамПериодРегистрации
			|	И АктуальныеДети_ДетиДо6.ГодОкончания >= ГОД(&парамПериодРегистрации) 
			|   И АктуальныеДети_ДетиДо6.Ссылка = ТабличнаяЧастьДети.Ссылка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсполнительныйЛист.Дети КАК АктуальныеДети_ДетиДо18
			|ПО   НАЧАЛОПЕРИОДА(АктуальныеДети_ДетиДо18.ФизЛицо.ДатаРождения, ГОД) >= &парамПериодРегистрации18 
			|	И НАЧАЛОПЕРИОДА(АктуальныеДети_ДетиДо18.ФизЛицо.ДатаРождения, ГОД) <  &парамПериодРегистрации6
			|	И АктуальныеДети_ДетиДо18.ГодОкончания >= ГОД(&парамПериодРегистрации)
			|   И АктуальныеДети_ДетиДо18.Ссылка = ТабличнаяЧастьДети.Ссылка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсполнительныйЛист.Дети КАК АктуальныеДети_Трудоспособные
			|ПО   НАЧАЛОПЕРИОДА(АктуальныеДети_Трудоспособные.ФизЛицо.ДатаРождения, ГОД) <  &парамПериодРегистрации18
			|	И АктуальныеДети_Трудоспособные.ГодОкончания >= ГОД(&парамПериодРегистрации)
			|   И АктуальныеДети_Трудоспособные.Ссылка = ТабличнаяЧастьДети.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ТабличнаяЧастьДети.Ссылка
			|";
			
			// присоединяем данные для расчета исполнительных листов
			ТекстЗапроса = ТекстЗапроса + "
			|		
			|ЛЕВОЕ СОЕДИНЕНИЕ (" + ДанныеДокументаТекст + ") КАК ИсполниетльныеЛисты
			|ПО   Основной.ДокументОснование = ИсполниетльныеЛисты.ИсполнительныйЛист 
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы.СрезПоследних(&парамПериодРегистрации) КАК ИсполниетльныеЛисты_ДетиДо6
			|ПО   ИсполниетльныеЛисты_ДетиДо6.СоциальнаяГруппа = &парамДетиДо6 
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы.СрезПоследних(&парамПериодРегистрации) КАК ИсполниетльныеЛисты_ДетиДо18
			|ПО   ИсполниетльныеЛисты_ДетиДо18.СоциальнаяГруппа = &парамДетиДо18 
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы.СрезПоследних(&парамПериодРегистрации) КАК ИсполниетльныеЛисты_Трудоспособные
			|ПО   ИсполниетльныеЛисты_Трудоспособные.СоциальнаяГруппа = &парамТрудоспособные"; 
		КонецЕсли;
				
		Если НеобходимыеДанные.ПараметрыПочты Тогда
			Запрос.УстановитьПараметр("СпособРасчетаПочтовыйСбор", Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор);
			
			// ВТРазмерПочтовогоПеревода
			Если Истина Тогда 
				// 
				//
				ТекстЗапросаВТ =  "
				|ВЫБРАТЬ
				|	Основная.Сотрудник КАК Сотрудник,
				|	Основная.Организация,
				|	Основная.ДокументОснование,
				|	СУММА(Дополнительная.Результат) КАК РазмерПочтовогоПеревода
				|ПОМЕСТИТЬ ВТРазмерПочтовогоПеревода
				|ИЗ
				|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основная
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УдержанияРаботниковОрганизаций КАК Дополнительная
				|		ПО Основная.ПериодРегистрации = Дополнительная.ПериодРегистрации
				|			И Основная.Сотрудник = Дополнительная.Сотрудник
				|			И Основная.Организация = Дополнительная.Организация
				|			И Основная.ДокументОснование = Дополнительная.ДокументОснование
				|			И Основная.ВидРасчета <> Дополнительная.ВидРасчета
				|ГДЕ
				|	Основная.Регистратор = &парамРегистратор
				|	И Основная.ВидРасчета.СпособРасчета = &СпособРасчетаПочтовыйСбор
				|
				|СГРУППИРОВАТЬ ПО
				|	Основная.Сотрудник,
				|	Основная.Организация,
				|	Основная.ДокументОснование
				|ИНДЕКСИРОВАТЬ ПО 
				|	Сотрудник
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТДвиженияРаботников = "ВТРазмерПочтовогоПеревода";
			КонецЕсли; 
			
			// ВТПараметрыПочты
			Если Истина Тогда 
				// 
				//
				ТекстЗапросаВТ =  "
				|ВЫБРАТЬ 
				|  ПараметрыПочты.ПочтовыйТариф  			КАК ПочтовыйТариф,
				|  ПараметрыПочты.Порог   		 			КАК Порог,
				|  ЕСТЬNULL(ПараметрыПочты.НижнийПорог, 0)	КАК НижнийПорог,
				|  ПочтовыеСборыСтавки.Ставка   		 	КАК Ставка,
				|  ПочтовыеСборыСтавки.СуммаДополнительно	КАК СуммаДополнительно
				|  
				|ПОМЕСТИТЬ ВТПараметрыПочты
				|ИЗ (
				|	ВЫБРАТЬ 
				|	  ПочтовыеСборыПериод.ПочтовыйТариф  		КАК ПочтовыйТариф,
				|	  ПочтовыеСборыПериод.Период   		 		КАК Период,
				|	  ПочтовыеСборыПериод.Порог   		 		КАК Порог,
				|	  МАКСИМУМ(ПочтовыеСборы.Порог)   	КАК НижнийПорог
				|
				|	ИЗ (
				|		ВЫБРАТЬ 
				|		  	ПочтовыеСборыПериод.ПочтовыйТариф  	КАК ПочтовыйТариф,
				|		  	ПочтовыеСборыПериод.Период  		КАК Период,
				|		  	ПочтовыеСборы.Порог   				КАК Порог
				|
				|		  	ИЗ (
				|	 			ВЫБРАТЬ   
				|					ПочтовыеСборы.ПочтовыйТариф  		КАК ПочтовыйТариф,
				|					МАКСИМУМ(ПочтовыеСборы.Период)  	КАК Период
				|		  		ИЗ РегистрСведений.ШкалаПочтовыхСборов КАК ПочтовыеСборы
				|				ГДЕ ПочтовыеСборы.Период <= &парамПериодРегистрации
				|				СГРУППИРОВАТЬ ПО
				|		  			ПочтовыеСборы.ПочтовыйТариф
				|		  	) КАК ПочтовыеСборыПериод
				|		  	ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ШкалаПочтовыхСборов КАК ПочтовыеСборы
				|		  	ПО ПочтовыеСборы.ПочтовыйТариф = ПочтовыеСборыПериод.ПочтовыйТариф
				|		  	И ПочтовыеСборы.Период = ПочтовыеСборыПериод.Период
				|
				|	   ) КАК ПочтовыеСборыПериод
				|	 
				|	ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ШкалаПочтовыхСборов КАК ПочтовыеСборы
				|	 ПО  ПочтовыеСборыПериод.ПочтовыйТариф = ПочтовыеСборы.ПочтовыйТариф
				|		И ПочтовыеСборыПериод.Период       = ПочтовыеСборы.Период
				|		И ПочтовыеСборы.Порог        < ПочтовыеСборыПериод.Порог
				|
				|	СГРУППИРОВАТЬ ПО 
				|	  ПочтовыеСборыПериод.ПочтовыйТариф,
				|	  ПочтовыеСборыПериод.Период,
				|	  ПочтовыеСборыПериод.Порог
				|  
				|) КАК ПараметрыПочты
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ШкалаПочтовыхСборов КАК ПочтовыеСборыСтавки
				| ПО  ПараметрыПочты.ПочтовыйТариф	= ПочтовыеСборыСтавки.ПочтовыйТариф
				|	И ПараметрыПочты.Период		= ПочтовыеСборыСтавки.Период
				|	И ПараметрыПочты.Порог        		= ПочтовыеСборыСтавки.Порог
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТДвиженияРаботников = "ВТПараметрыПочты";
			КонецЕсли;
			
			// присоединяем данные для расчета почтового сбора
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПочтовогоПеревода КАК ПочтовыеПереводы
			|ПО Основной.Сотрудник = ПочтовыеПереводы.Сотрудник И
			|	Основной.Организация = ПочтовыеПереводы.Организация И
			|	Основной.ДокументОснование = ПочтовыеПереводы.ДокументОснование
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыПочты КАК ПараметрыПочты
			|ПО ПочтовыеПереводы.ДокументОснование.ТарифПочты = ПараметрыПочты.ПочтовыйТариф 
			|	И ПочтовыеПереводы.РазмерПочтовогоПеревода <= ПараметрыПочты.Порог
			|	И ПочтовыеПереводы.РазмерПочтовогоПеревода > ПараметрыПочты.НижнийПорог
			|";
			
		КонецЕсли;
		
	КонецЕсли;	
		
	Если ИмяРегистра = "ВзносыВФонды" Тогда
		
		Мод = "ВЫБОР КОГДА Рез<0 ТОГДА -Рез ИНАЧЕ Рез КОНЕЦ";
		НеобходимаБаза = Истина;
		НеобходимаБаза = Истина;
		ТолькоПоДвижениямТекущегоДокумента=ТипЗнч(Регистратор)=Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций");
		ИспользуетсяЕСВ = ИспользуетсяЕСВ(Регистратор.ПериодРегистрации);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	Основной.Регистратор				Как Регистратор, 
		|ВЫБОР КОГДА Основной.Регистратор ССЫЛКА Документ.ЗарплатаКВыплатеОрганизаций ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ	Как ЗарплатаКВыплатеОрганизаций,
		|	Основной.НомерСтроки				Как НомерСтроки, 
		|	Основной.Сотрудник					Как Сотрудник, 
		|	Основной.Сотрудник.Наименование		Как СотрудникНаименование, 
		|	Основной.Предел 					Как Предел,
		|	Основной.ВидРасчета 				Как ВидРасчета,
		|	Основной.ВидРасчета.Наименование	Как ВидРасчетаНаименование,
		|	Основной.ВидРасчета.СпособРасчета	Как СпособРасчета,
		|	Основной.Налог 						Как Налог,
		|	Основной.НомерПорога                КАК НомерПорога, 
	    |
		|	ВЫБОР КОГДА Основной.ВидРасчета.СтавкаПоПериодуРегистрации ТОГДА ВсеВзносыПоМесяцуРегистрации.СтатьяНалоговойДекларации	ИНАЧЕ ВсеВзносы.СтатьяНалоговойДекларации КОНЕЦ			КАК СтатьяНалоговойДекларации, 
		|	ВЫБОР КОГДА Основной.ВидРасчета.СтавкаПоПериодуРегистрации ТОГДА ВсеВзносыПоМесяцуРегистрации.Ставка					ИНАЧЕ ВсеВзносы.Ставка КОНЕЦ                     		КАК Ставка, 
		|	ВЫБОР КОГДА Основной.ВидРасчета.СтавкаПоПериодуРегистрации ТОГДА ВсеВзносыПоМесяцуРегистрации.НижнийПорог				ИНАЧЕ ВсеВзносы.НижнийПорог КОНЕЦ						КАК НижнийПорог,
		|	ВЫБОР КОГДА Основной.ВидРасчета.СтавкаПоПериодуРегистрации ТОГДА ВсеВзносыПоМесяцуРегистрации.Порог						ИНАЧЕ ВсеВзносы.Порог КОНЕЦ								КАК Порог
 		|"; 
			
		Если КомментироватьРасчет Тогда
			ПоляЗапросаМаксимум.Добавить("Регистратор");
			ПоляЗапросаМаксимум.Добавить("Сотрудник");
			ПоляЗапросаМаксимум.Добавить("ЗарплатаКВыплатеОрганизаций");
			ПоляЗапросаМаксимум.Добавить("СотрудникНаименование");
			ПоляЗапросаМаксимум.Добавить("Предел");
			ПоляЗапросаМаксимум.Добавить("ВидРасчета");
			ПоляЗапросаМаксимум.Добавить("СпособРасчета");
			ПоляЗапросаМаксимум.Добавить("ВидРасчетаНаименование");
			ПоляЗапросаМаксимум.Добавить("Налог");
			ПоляЗапросаМаксимум.Добавить("НомерПорога");
			
			ПоляЗапросаМаксимум.Добавить("СтатьяНалоговойДекларации");
			ПоляЗапросаМаксимум.Добавить("Ставка");
			ПоляЗапросаМаксимум.Добавить("НижнийПорог");
			ПоляЗапросаМаксимум.Добавить("Порог");
		КонецЕсли;
		
		//Базы + БазыДо	
		Если КомментироватьРасчет Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|БазСКоментарием.РезультатБаза Как РезультатБаза,
			|БазСКоментарием.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
			|БазСКоментарием.ВидРасчетаРазрез.Наименование КАК ВидРасчетаРазрезНаименование,
			|БазВычет.РезультатБаза КАК БазаВычет,
			|БазДо.БазаДо КАК БазаДо,
			|БазДо.БазаВзносаДо КАК БазаВзносаДо";
			ПоляЗапросаМаксимум.Добавить("ВидРасчетаРазрез");
			ПоляЗапросаМаксимум.Добавить("ВидРасчетаРазрезНаименование");
			ПоляЗапросаМаксимум.Добавить("БазаВычет");
			ПоляЗапросаМаксимум.Добавить("БазаДо");
			ПоляЗапросаМаксимум.Добавить("БазаВзносаДо");
		Иначе 
			ТекстЗапроса = ТекстЗапроса + ",
			|Баз.РезультатБаза КАК РезультатБаза,
			|БазВычет.РезультатБаза КАК БазаВычет,
			|БазДо.БазаДо КАК БазаДо,
			|БазДо.БазаВзносаДо КАК БазаВзносаДо";
		КонецЕсли;

		
		ТекстЗапроса = ТекстЗапроса + "
		|	ИЗ РегистрРасчета.ВзносыВФонды Как Основной";
		
		// ВТБазы
		Если Истина Тогда 
			
			Если ИспользуетсяЕСВ Тогда
				
				Запрос.УстановитьПараметр("СписокГПХПоЕСВ",СписокГПХПоЕСВ());
				
				ТекстФильтрПоПериодам = "				И	ВЫБОР КОГДА БазаИзНачислений.ВидРасчета.ЭтоБольничные //Больничные
										|			ИЛИ  БазаИзНачислений.ВидРасчета В (&СписокГПХПоЕСВ) //Оплата по договору ГПХ
										|			ИЛИ  НЕ Основной.ВидРасчета.ЕСВ //Это старый взнос
										|			ТОГДА	НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
										|           КОГДА БазаИзНачислений.ВидРасчета.ЭтоОтпуск //Отпускные
										|               И НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = &парамПериодРегистрации
										|			ТОГДА НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
										|           КОГДА БазаИзНачислений.ВидРасчета.ЭтоОтпуск //Отпускные
										|               И НЕ БазаИзНачислений.Сторно
										|			ТОГДА НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации = &парамПериодРегистрации
										|			ИНАЧЕ	((НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации = &парамПериодРегистрации
										|               И   НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) = &парамПериодРегистрации) //Начислено в текущем месяце за этот месяц
										|               ИЛИ (НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) < НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации = &парамПериодРегистрации
										|               И   НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) = &парамПериодРегистрации) //Начислено в текущем месяце за предыдущий месяц
										|               ИЛИ (НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) > НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации = &парамПериодРегистрации
										|               И   НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) = &парамПериодРегистрации)) //Начислено в текущем месяце за следующий месяц
										|
										|           КОНЕЦ
										|";	
			Иначе
				ТекстФильтрПоПериодам = "			И	НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			И	БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации";	
			КонецЕсли;	
			
			//	Описание:
			// 		Альтернатива таблице РегистрРасчета.ВзносыВФонды.БазаОсновныеНачисленияРаботниковОрганизаций(
			//
			ТекстЗапросаВТ = "
			|		ВЫБРАТЬ 
			|			Основной.Регистратор КАК Регистратор, 
			|			Основной.НомерСтроки КАК НомерСтроки, 
			|			Основной.ВидРасчета КАК ВидРасчета,
			|			Основной.Сотрудник КАК Сотрудник,
			|			Основной.ТипНачисления КАК ТипНачисления,
			|			НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) КАК БазовыйПериодНачало,
			|			СУММА(БазаИзНачислений.Результат)		КАК РезультатБаза 
			|ПОМЕСТИТЬ ВТБазы	
			|		ИЗ РегистрРасчета.ВзносыВФонды КАК Основной
			| 
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК БазаИзНачислений
			|		ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
			|"+ТекстФильтрПоПериодам+"
			|  			" + ?(ТолькоПоДвижениямТекущегоДокумента," И БазаИзНачислений.Регистратор = &парамРегистратор", "") + "
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ВзносыВФонды.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|		ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
			|			И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			| 
			|		ГДЕ Основной.Регистратор = &парамРегистратор
			|			И	Основной.Сотрудник В (&парамСотрудники)
			| 
			|		СГРУППИРОВАТЬ ПО 
			|			Основной.Регистратор, 
			|			Основной.НомерСтроки,
			|			Основной.ВидРасчета,
			|			Основной.Сотрудник,
			|			Основной.ТипНачисления,
			|			НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
			| ";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТБазы = "ВТБазы";
		КонецЕсли; 
		
		// ВТБазыДо 
		Если Истина Тогда 
			
			Если ИспользуетсяЕСВ Тогда
				
				МассивПенсионный = Новый СписокЗначений();
				МассивПенсионный.Добавить(ПланыВидоврасчета.ВзносыВФонды.Пенсионный20050101);
				МассивПенсионный.Добавить(ПланыВидоврасчета.ВзносыВФонды.Пенсионный20070101);
				
				МассивПенсионныйФОТ = Новый СписокЗначений();
				МассивПенсионныйФОТ.Добавить(ПланыВидоврасчета.ВзносыВФонды.ПенсионныйФОТ20050101);
				
				Запрос.УстановитьПараметр("МассивПенсионный",МассивПенсионный);
				Запрос.УстановитьПараметр("МассивПенсионныйФОТ",МассивПенсионныйФОТ);
				Запрос.УстановитьПараметр("ДатаЕСВ",ДатаВводаЕСВ());
				
				
				//Здесь отбираем по принципу - если начисляется в 2011 году, и за этот период начислено еще в 2010,
				//то базу до определяем по пенсионному фонду
				ТекстФильтр = "			И ВЫБОР КОГДА НАЧАЛОПЕРИОДА(БазаИзВзносов.ПериодРегистрации, МЕСЯЦ) >= &ДатаЕСВ
							  |				ТОГДА Основной.Налог = БазаИзВзносов.Налог
							  |			  КОГДА Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ВзносыВФонды.ЕСВ)
							  |				ТОГДА Основной.Налог = БазаИзВзносов.Налог ИЛИ БазаИзВзносов.ВидРасчета В (&МассивПенсионный)
							  |			  КОГДА Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ВзносыВФонды.ЕСВФОТ)
							  |				ТОГДА Основной.Налог = БазаИзВзносов.Налог ИЛИ БазаИзВзносов.ВидРасчета В (&МассивПенсионныйФОТ)
							  |				ИНАЧЕ Основной.Налог = БазаИзВзносов.Налог
							  |			КОНЕЦ";	
			Иначе
				ТекстФильтр = "			И	Основной.Налог = БазаИзВзносов.Налог";	
			КонецЕсли;	
			
			
			//	Описание:
			// 		суммы уже начисленные ранее по анализируемым в расчете периодам
			//
			ТекстЗапросаВТ = "
			|		ВЫБРАТЬ 
			|			Основной.Регистратор КАК Регистратор, 
			|			Основной.НомерСтроки КАК НомерСтроки, 
			|			Основной.ВидРасчета КАК ВидРасчета,
			|			Основной.Сотрудник КАК Сотрудник,
			|			Основной.ТипНачисления КАК ТипНачисления,
			|			НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) КАК БазовыйПериодНачало,
			|			СУММА(БазаИзВзносов.База)		КАК БазаДо, 
			|			СУММА(БазаИзВзносов.БазаВзноса)	КАК БазаВзносаДо 
			|ПОМЕСТИТЬ ВТБазыДо	
			|		ИЗ РегистрРасчета.ВзносыВФонды  КАК Основной
			| 
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВзносыВФонды КАК БазаИзВзносов
			|		ПО		Основной.Сотрудник = БазаИзВзносов.Сотрудник  
			|"+ТекстФильтр+"
			|			И	НАЧАЛОПЕРИОДА(БазаИзВзносов.БазовыйПериодНачало, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
			|  			" + ?(ТолькоПоДвижениямТекущегоДокумента,"  И БазаИзВзносов.ПериодРегистрации < &парамПериодРегистрации И БазаИзВзносов.Регистратор = &парамРегистратор", "  И БазаИзВзносов.ПериодРегистрации <= &парамПериодРегистрации И БазаИзВзносов.Регистратор <> &парамРегистратор") + "
			| 
			|		ГДЕ Основной.Регистратор = &парамРегистратор
			|			И	Основной.Сотрудник В (&парамСотрудники)
			| 
			|		СГРУППИРОВАТЬ ПО 
			|			Основной.Регистратор, 
			|			Основной.НомерСтроки,
			|			Основной.ВидРасчета,
			|			Основной.Сотрудник,
			|			Основной.ТипНачисления,
			|			НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) 
			| ";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТБазыДо = "ВТБазыДо";
		КонецЕсли; 
		
		// ВТБазыВычет
		Если Истина Тогда
			
			//БазаВычет - база взносов ЕСВ, которая имеет более высокий порядок в расчете.
			//Для оплаты взносов с оплаты по ГПХ - это взносы с основной зарплаты
			//Для оплаты взносов с больничных - это взносы с основной зарплаты и взносы с оплаты по ГПХ
			//Используется при определении базы взноса с учетом общего Предела.
			//Т.е. предел при расчете будет уменьшен на сумму БазаВычет
			
			ТекстЗапросаВТ = "
			|	ВЫБРАТЬ
			|       Результаты.Регистратор КАК Регистратор, 
			|		Результаты.НомерСтроки КАК НомерСтроки, 
			|		СУММА(Результаты.Результат)		КАК РезультатБаза
			|ПОМЕСТИТЬ ВТБазыВычет
			|    ИЗ(
			|		ВЫБРАТЬ 
			|			Основной.Регистратор КАК Регистратор, 
			|			Основной.НомерСтроки КАК НомерСтроки, 
			|			База.РезультатБаза   КАК Результат 
			|		ИЗ ВТБазы КАК Основной
			| 
			|		ЛЕВОЕ СОЕДИНЕНИЕ 
			//Если по взносу есть База, то она будет включать в себя и БазуДо
			//Но если Базы в этом периоде нет, то БазуДо надо учесть все равно
			|			(ВЫБРАТЬ
			|			 ЕСТЬNULL(Базы.Регистратор,БазыДо.Регистратор) КАК Регистратор, 
			|			 ЕСТЬNULL(Базы.НомерСтроки,БазыДо.НомерСтроки) КАК НомерСтроки, 
			|			 ЕСТЬNULL(Базы.ВидРасчета,БазыДо.ВидРасчета) КАК ВидРасчета,
			|			 ЕСТЬNULL(Базы.ВидРасчета.СпособРасчета,БазыДо.ВидРасчета.СпособРасчета) КАК СпособРасчета,
			|			 ЕСТЬNULL(Базы.ВидРасчета.КатегорияРасчета.Порядок,БазыДо.ВидРасчета.КатегорияРасчета.Порядок) КАК Порядок,
			|			 ЕСТЬNULL(Базы.Сотрудник,БазыДо.Сотрудник) КАК Сотрудник,
			|			 ЕСТЬNULL(Базы.ТипНачисления,БазыДо.ТипНачисления) КАК ТипНачисления,
			|			 НАЧАЛОПЕРИОДА(ЕСТЬNULL(Базы.БазовыйПериодНачало,БазыДо.БазовыйПериодНачало), МЕСЯЦ) КАК БазовыйПериодНачало,
			|			 ВЫБОР 
			|			  КОГДА ЕСТЬNULL(Базы.РезультатБаза,0) <> 0 ТОГДА Базы.РезультатБаза
			|             ИНАЧЕ ЕСТЬNULL(БазыДо.БазаВзносаДо,0)
			|            КОНЕЦ КАК РезультатБаза
			|			 ИЗ ВТБазы КАК Базы
			|			 ПОЛНОЕ СОЕДИНЕНИЕ ВТБазыДо КАК БазыДо
			|			 ПО Базы.НомерСтроки = БазыДо.НомерСтроки ) КАК База 
			|		ПО Основной.Сотрудник = База.Сотрудник
			|        И Основной.БазовыйПериодНачало = База.БазовыйПериодНачало
			|		 И Основной.ВидРасчета.СпособРасчета = База.СпособРасчета
			|        И Основной.ВидРасчета.КатегорияРасчета.Порядок > База.Порядок
			|		) КАК Результаты	
			|			
			| 
			|		СГРУППИРОВАТЬ ПО 
			|			Результаты.Регистратор, 
			|			Результаты.НомерСтроки 
			| 
			|";
			
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТБазы = "ВТБазы";
		КонецЕсли; 

		
		
		//	ВТПолнаяШкалаПоМесяцуРегистрации
		Если Истина Тогда
			//	Описание:
			// 		Тут получаем все Параметры таблицы ШкалаСтавокНалогов сгруппированые по Налоговым пеиодам
			// 		Так как налог одновременно не может быть и для всех организация и для одно достаточно вытащить все с пустой орг. и по текущей
			//
			ТекстЗапросаВТ = "
 			|		ВЫБРАТЬ 
 			|			ВсяШкала.Налог			КАК Налог,
 			|			ВсяШкала.Период			КАК Период,
 			|			ВсяШкала.Организация	КАК Организация,
 			|			ВсяШкала.СтатьяНалоговойДекларации	КАК СтатьяНалоговойДекларации,
 			|			ВсяШкала.Ставка						КАК Ставка,
 			|			ЕСТЬNULL(ШкалаНижнийПорог.Порог,0)	КАК НижнийПорог,
 			|			ВсяШкала.Порог						КАК Порог,
 			|			ВсяШкала.НомерПорога				КАК НомерПорога,
 			|			ВсяШкала.НомерПорога.Порядок		КАК НомерПорогаПорядок,
 			|			ВсяШкала.НижнийНомерПорогаПорядок	КАК НижнийНомерПорогаПорядок,
 			|			ШкалаНижнийПорог.НомерПорога		КАК НижнийНомерПорога
			|ПОМЕСТИТЬ ВТПолнаяШкалаПоМесяцуРегистрации	
 			|		ИЗ (	ВЫБРАТЬ 
 			|					ШкалаПериодОрганизация.Налог		КАК Налог,
 			|					ШкалаПериодОрганизация.Период		КАК Период,
 			|					ШкалаПериодОрганизация.Организация	КАК Организация,
 			|					Шкала.СтатьяНалоговойДекларации	КАК СтатьяНалоговойДекларации,
 			|					Шкала.Ставка					КАК Ставка,
 			|					Шкала.Порог						КАК Порог,
 			|					Шкала.НомерПорога				КАК НомерПорога,
 			|					Шкала.НомерПорога.Порядок		КАК НомерПорогаПорядок,
 			|					МАКСИМУМ(ШкалаНижнийПорог.НомерПорога.Порядок)  КАК НижнийНомерПорогаПорядок
 			|				ИЗ (
 			|						ВЫБРАТЬ 
 			|							ШкалаСтавок.Налог	КАК Налог,
 			|							ШкалаСтавок.Период	КАК Период,
 			|							МАКСИМУМ(ШкалаСтавок.Организация)	КАК Организация
 			|						ИЗ (
 			|							ВЫБРАТЬ 
 			|								ШкалаСтавокНалогов.Налог							КАК Налог,
 			|								МАКСИМУМ(ШкалаСтавокНалогов.Период)				КАК Период
 			|							ИЗ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаСтавокНалогов
 			|							ГДЕ		ШкалаСтавокНалогов.Период  <= КОНЕЦПЕРИОДА( &парамПериодРегистрации, МЕСЯЦ )
 			|								И	(ШкалаСтавокНалогов.Организация = (&парамОрганизация) ИЛИ ШкалаСтавокНалогов.Организация =  ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
 			|							СГРУППИРОВАТЬ ПО
 			|					   			ШкалаСтавокНалогов.Налог
 			|					   	) КАК ШкалаСтавокПериод
 			|					   	
 			|					   	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаСтавок	
 			|					   	ПО		ШкалаСтавокПериод.Налог = ШкалаСтавок.Налог	   	
 			|					   		И	ШкалаСтавокПериод.Период = ШкалаСтавок.Период
 			|					 		И	(ШкалаСтавок.Организация = (&парамОрганизация) ИЛИ ШкалаСтавок.Организация =  ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
 			|							
 			|						СГРУППИРОВАТЬ ПО
 			|					   		ШкалаСтавок.Налог,
 			|					   		ШкалаСтавок.Период
 			|				) КАК ШкалаПериодОрганизация
 			|				   
 			|				   
 			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК Шкала	
 			|				ПО		ШкалаПериодОрганизация.Налог = Шкала.Налог	   	
 			|					И	ШкалаПериодОрганизация.Период = Шкала.Период
 			|					И	ШкалаПериодОрганизация.Организация = Шкала.Организация

 			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаНижнийПорог	
 			|				ПО		ШкалаПериодОрганизация.Налог = ШкалаНижнийПорог.Налог	   	
 			|					И	ШкалаПериодОрганизация.Период = ШкалаНижнийПорог.Период
 			|					И	ШкалаПериодОрганизация.Организация = ШкалаНижнийПорог.Организация
 			|					И	ШкалаНижнийПорог.НомерПорога.Порядок < Шкала.НомерПорога.Порядок

 			|			 	СГРУППИРОВАТЬ ПО 
 			|					ШкалаПериодОрганизация.Налог,
 			|					ШкалаПериодОрганизация.Период,
 			|					ШкалаПериодОрганизация.Организация,
 			|					Шкала.СтатьяНалоговойДекларации,
 			|					Шкала.Ставка,
 			|					Шкала.Порог,
 			|					Шкала.НомерПорога,
 			|					Шкала.НомерПорога.Порядок
 			|	) КАК ВсяШкала

 			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаНижнийПорог	
 			|	ПО		ВсяШкала.Налог = ШкалаНижнийПорог.Налог	   	
 			|	И	ВсяШкала.Период = ШкалаНижнийПорог.Период
 			|	И	ВсяШкала.Организация = ШкалаНижнийПорог.Организация
 			|	И	ШкалаНижнийПорог.НомерПорога.Порядок = ВсяШкала.НижнийНомерПорогаПорядок
			|
			|	ИНДЕКСИРОВАТЬ ПО
			|		 Налог, НомерПорогаПорядок 
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТПолнаяШкалаПоМесяцуРегистрации = "ВТПолнаяШкалаПоМесяцуРегистрации";
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПолнаяШкалаПоМесяцуРегистрации";
		
		//	ВТПолнаяШкала
		Если Истина Тогда
			
			//	ВТМесяцыДляАнализа
			Если Истина Тогда
				//	Описание:
				// 		Сотрудники по которым есть зарегистрированные записи по начислениям в периодеРегистрации 
				// 		сгруппированные по периодам действия
				//
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		Взносы.Налог										КАК Налог,    
				|		НАЧАЛОПЕРИОДА(Взносы.БазовыйПериодНачало, МЕСЯЦ)	КАК НалоговыйПериод,    
				|		Взносы.ДатаНачала									КАК ДатаНачала    
				|
				|ПОМЕСТИТЬ ВТМесяцыДляАнализа	
				|	ИЗ	РегистрРасчета.ВзносыВФонды КАК Взносы
				|	ГДЕ		Взносы.Регистратор = &парамРегистратор
				|		И	Взносы.Сотрудник в ( &парамСотрудники )
				|
				|	ИНДЕКСИРОВАТЬ ПО
				|		Налог, НалоговыйПериод, ДатаНачала
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТМесяцыДляАнализа = "ВТМесяцыДляАнализа";
			КонецЕсли;
			Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТМесяцыДляАнализа";
			
			//	ВТШкалаПоНалоговымПериодам
			Если Истина Тогда
				//	Описание:
				// 		Тут получаем все Параметры таблицы ШкалаСтавокНалогов сгруппированые по Налоговым пеиодам
				// 		Так как налог одновременно не может быть и для всех организация и для одно достаточно вытащить все с пустой орг. и по текущей
				//
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
				|       ШкалаПоНалоговымПериодам.Налог				КАК Налог,
				|		ШкалаПоНалоговымПериодам.НалоговыйПериод	КАК НалоговыйПериод,    
				|		ВЫБОР КОГДА ШкалаПоНалоговымПериодам.НалоговыйПериод < Шкала.Период ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ	КАК ИзменениеСтавкиВСерединеМесяца,    
				|		ШкалаПоНалоговымПериодам.ДатаНачала			КАК ДатаНачала,    
				|		ШкалаПоНалоговымПериодам.Организация		КАК Организация,    
				|       Шкала.НомерПорога							КАК НомерПорога,
				|       Шкала.НомерПорога.Порядок					КАК НомерПорогаПорядок,
				|       Шкала.СтатьяНалоговойДекларации				КАК СтатьяНалоговойДекларации,
				|       Шкала.Ставка								КАК Ставка,
				|       Шкала.Порог									КАК Порог
				|
				|ПОМЕСТИТЬ ВТШкалаПоНалоговымПериодам	
				|   ИЗ  (
				|		ВЫБРАТЬ
				|			Месяцы1.НалоговыйПериод				КАК НалоговыйПериод,    
				|			Месяцы1.Налог						КАК Налог,
				|			Месяцы1.ДатаНачала					КАК ДатаНачала,
				|			Месяцы1.Период						КАК Период,
				|			МАКСИМУМ(ШкалаСтавокНалогов.Организация)		КАК Организация  
				|			ИЗ	(
				|			ВЫБРАТЬ
				|				Месяцы.НалоговыйПериод				КАК НалоговыйПериод,    
				|				Месяцы.Налог						КАК Налог,
				|				Месяцы.ДатаНачала					КАК ДатаНачала,
				|				МАКСИМУМ(ШкалаСтавокНалогов.Период)	КАК Период
				|				ИЗ	" + ТекстЗапросаВТМесяцыДляАнализа + " КАК Месяцы
				|
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаСтавокНалогов
				|			ПО		Месяцы.Налог = ШкалаСтавокНалогов.Налог
				|				И	ШкалаСтавокНалогов.Период <= Месяцы.ДатаНачала
				|				И	ШкалаСтавокНалогов.Период <= КОНЕЦПЕРИОДА(&ПарамПериодРегистрации, МЕСЯЦ)
				|       		И	(ШкалаСтавокНалогов.Организация = (&парамОрганизация) ИЛИ ШкалаСтавокНалогов.Организация = (&ПустаяОрганизация)) 
				|
				|			СГРУППИРОВАТЬ ПО
				|				Месяцы.НалоговыйПериод,    
				|				Месяцы.Налог,
				|				Месяцы.ДатаНачала
				|   	) КАК Месяцы1
				|
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаСтавокНалогов
				|		ПО		Месяцы1.Налог = ШкалаСтавокНалогов.Налог
				|			И	ШкалаСтавокНалогов.Период = Месяцы1.Период
				|       	И	(ШкалаСтавокНалогов.Организация = (&парамОрганизация) ИЛИ ШкалаСтавокНалогов.Организация = (&ПустаяОрганизация)) 
				|
				|		СГРУППИРОВАТЬ ПО
				|			Месяцы1.НалоговыйПериод,    
				|			Месяцы1.Налог,
				|			Месяцы1.ДатаНачала,
				|			Месяцы1.Период
				|   ) КАК ШкалаПоНалоговымПериодам
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК Шкала
				|	ПО		ШкалаПоНалоговымПериодам.Налог			= Шкала.Налог
				|		И	ШкалаПоНалоговымПериодам.Организация	= Шкала.Организация 
				|		И	ШкалаПоНалоговымПериодам.Период = Шкала.Период 
				|
				|	ИНДЕКСИРОВАТЬ ПО
				|		НалоговыйПериод
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТШкалаПоНалоговымПериодам = "ВТШкалаПоНалоговымПериодам";
			КонецЕсли;
			Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТШкалаПоНалоговымПериодам";
			
			//	Описание:
			// 		Тут получаем все Параметры таблицы ШкалаСтавокНалогов сгруппированые по Налоговым пеиодам
			// 		Так как налог одновременно не может быть и для всех организация и для одно достаточно вытащить все с пустой орг. и по текущей
			//
			ТекстЗапросаВТ = "
			|	ВЫБРАТЬ
			|      	ШкалаСтавок.Налог							КАК Налог,
			|		ШкалаСтавок.НалоговыйПериод					КАК НалоговыйПериод,    
			|      	ШкалаСтавок.ДатаНачала						КАК ДатаНачала,
			|      	ШкалаСтавок.НомерПорога						КАК НомерПорога,
			|      	ШкалаСтавок.СтатьяНалоговойДекларации		КАК СтатьяНалоговойДекларации,
			|		ШкалаСтавок.ИзменениеСтавкиВСерединеМесяца	КАК ИзменениеСтавкиВСерединеМесяца,    
			|      	ШкалаСтавок.Ставка							КАК Ставка,
			|      	ШкалаСтавок.Порог							КАК Порог,
			|		ВЫБОР КОГДА НижнийШкала.НомерПорога ЕСТЬ NULL ТОГДА 0 ИНАЧЕ НижнийШкала.Порог КОНЕЦ	КАК НижнийПорог  
			|
			|ПОМЕСТИТЬ ВТПолнаяШкала	
			|   ИЗ  (
			|		ВЫБРАТЬ
			|       	ШкалаСтавок.Налог							КАК Налог,
			|			ШкалаСтавок.НалоговыйПериод					КАК НалоговыйПериод,    
			|       	ШкалаСтавок.ДатаНачала						КАК ДатаНачала,
			|       	ШкалаСтавок.НомерПорога						КАК НомерПорога,
			|       	ШкалаСтавок.НомерПорогаПорядок				КАК НомерПорогаПорядок,
			|       	ШкалаСтавок.СтатьяНалоговойДекларации		КАК СтатьяНалоговойДекларации,
			|			ШкалаСтавок.ИзменениеСтавкиВСерединеМесяца	КАК ИзменениеСтавкиВСерединеМесяца,    
			|       	ШкалаСтавок.Ставка							КАК Ставка,
			|       	ШкалаСтавок.Порог							КАК Порог,
			|			МАКСИМУМ(Шкала.ДатаНачала)				КАК НижнийДатаНачала,  
			|			МАКСИМУМ(Шкала.НомерПорогаПорядок) 		КАК НижнийНомерПорогаПорядок  
			|			ИЗ " + ТекстЗапросаВТШкалаПоНалоговымПериодам + " КАК ШкалаСтавок
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШкалаПоНалоговымПериодам + " КАК Шкала
			|		ПО		ШкалаСтавок.НалоговыйПериод = Шкала.НалоговыйПериод
			|			И	ШкалаСтавок.Налог = Шкала.Налог 
			|       	И	ШкалаСтавок.ДатаНачала >= Шкала.ДатаНачала 
			|       	И	ШкалаСтавок.НомерПорогаПорядок > Шкала.НомерПорогаПорядок 
			|		СГРУППИРОВАТЬ ПО
			|       	ШкалаСтавок.Налог,
			|			ШкалаСтавок.НалоговыйПериод,    
			|       	ШкалаСтавок.ДатаНачала,
			|       	ШкалаСтавок.НомерПорога,
			|       	ШкалаСтавок.НомерПорогаПорядок,
			|       	ШкалаСтавок.СтатьяНалоговойДекларации,
			|			ШкалаСтавок.ИзменениеСтавкиВСерединеМесяца,    
			|       	ШкалаСтавок.Ставка,
			|       	ШкалаСтавок.Порог
			|   ) КАК ШкалаСтавок
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШкалаПоНалоговымПериодам + " КАК НижнийШкала
			|	ПО		ШкалаСтавок.НалоговыйПериод		= НижнийШкала.НалоговыйПериод
			|		И	ШкалаСтавок.Налог				= НижнийШкала.Налог
			|		И	ШкалаСтавок.НижнийНомерПорогаПорядок	= НижнийШкала.НомерПорогаПорядок
			|		И	ШкалаСтавок.НижнийДатаНачала	= НижнийШкала.ДатаНачала 
			|
			|	ИНДЕКСИРОВАТЬ ПО
			|		 НалоговыйПериод, Налог, НомерПорога 
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТПолнаяШкала = "ВТПолнаяШкала";
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПолнаяШкала";
		
		
		// присоединяем к базе
		Если КомментироватьРасчет Тогда
			
			// ВТБазыСКоментарием
			Если Истина Тогда
				//	Описание:
				// 		Альтернатива таблице РегистрРасчета.ВзносыВФонды.БазаОсновныеНачисленияРаботниковОрганизаций(
				//
				ТекстЗапросаВТ = "
				|		ВЫБРАТЬ 
				|			Основной.Регистратор КАК Регистратор, 
				|			Основной.НомерСтроки КАК НомерСтроки, 
				|			БазаИзНачислений.ВидРасчета КАК ВидРасчетаРазрез, 
				|			ВЫБОР КОГДА БазаИзНачислений.Результат >= 0 ТОГДА 1 ИНАЧЕ -1 КОНЕЦ КАК Знак, 
				|			СУММА(БазаИзНачислений.Результат)		КАК РезультатБаза 
				|ПОМЕСТИТЬ ВТБазыСКоментарием	
				|		ИЗ РегистрРасчета.ВзносыВФонды КАК Основной
				| 
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК БазаИзНачислений
				|		ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
				|"+ТекстФильтрПоПериодам+"
				|  			" + ?(ТолькоПоДвижениямТекущегоДокумента," И БазаИзНачислений.Регистратор = &парамРегистратор", "") + "
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ВзносыВФонды.БазовыеВидыРасчета КАК БазовыеВидыРасчета
				|		ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
				|			И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
				| 
				|		ГДЕ 	Основной.Регистратор = &парамРегистратор
				|			И	Основной.Сотрудник В (&парамСотрудники)
				| 
				|		СГРУППИРОВАТЬ ПО 
				|			Основной.Регистратор, 
				|			Основной.НомерСтроки, 
				|			БазаИзНачислений.ВидРасчета,
				|			ВЫБОР КОГДА БазаИзНачислений.Результат >= 0 ТОГДА 1 ИНАЧЕ -1 КОНЕЦ
				| ";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТБазыСКоментарием = "ВТБазыСКоментарием";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТБазы+" КАК Баз
			|ПО Основной.Регистратор = Баз.Регистратор И Основной.НомерСтроки = Баз.НомерСтроки
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТБазыВычет КАК БазВычет
			|ПО Основной.Регистратор = БазВычет.Регистратор И Основной.НомерСтроки = БазВычет.НомерСтроки
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТБазыСКоментарием+" КАК БазСКоментарием
			|ПО Основной.Регистратор = БазСКоментарием.Регистратор И Основной.НомерСтроки = БазСКоментарием.НомерСтроки
			|";
		Иначе
	
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТБазы+" КАК Баз
			|ПО Основной.Регистратор = Баз.Регистратор И Основной.НомерСтроки = Баз.НомерСтроки
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТБазыВычет КАК БазВычет
			|ПО Основной.Регистратор = БазВычет.Регистратор И Основной.НомерСтроки = БазВычет.НомерСтроки";
		КонецЕсли;
		
		Мод = "ВЫБОР КОГДА Рез<0 ТОГДА -Рез ИНАЧЕ Рез КОНЕЦ";
		// присоединяем к базе
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТБазыДо+" КАК БазДо
		|ПО Основной.НомерСтроки = БазДо.НомерСтроки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПолнаяШкалаПоМесяцуРегистрации + " Как ВсеВзносыПоМесяцуРегистрации
		|ПО		Основной.Налог		= ВсеВзносыПоМесяцуРегистрации.Налог 
		|	И 	( Основной.НомерПорога <> ЗНАЧЕНИЕ(Перечисление.ПорогиШкалыСтавокНалогов.ПустаяСсылка) И Основной.НомерПорога = ВсеВзносыПоМесяцуРегистрации.НомерПорога
		|		ИЛИ	Основной.НомерПорога = ЗНАЧЕНИЕ(Перечисление.ПорогиШкалыСтавокНалогов.ПустаяСсылка)
		|		И	"+СтрЗаменить (Мод,"Рез","(Баз.РезультатБаза)")+" > ВсеВзносыПоМесяцуРегистрации.НижнийПорог 
		|		И	"+СтрЗаменить (Мод,"Рез","(Баз.РезультатБаза)")+" <= ВсеВзносыПоМесяцуРегистрации.Порог
		|        )
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПолнаяШкала + " Как ВсеВзносы
		|ПО		Основной.Налог		= ВсеВзносы.Налог 
		|	И	Основной.ДатаНачала	= ВсеВзносы.ДатаНачала 
		|   И ВЫБОР КОГДА Основной.НомерПорога = ЗНАЧЕНИЕ(Перечисление.ПорогиШкалыСтавокНалогов.ПустаяСсылка)
		|           ТОГДА ( "+СтрЗаменить (Мод,"Рез","Баз.РезультатБаза")+" > ВсеВзносы.НижнийПорог 
		|           И "+СтрЗаменить (Мод,"Рез","Баз.РезультатБаза")+" <= ВсеВзносы.Порог )
		|           ИНАЧЕ Основной.НомерПорога = ВсеВзносы.НомерПорога  КОНЕЦ
		|
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ " + ВнешнееУсловие;
		
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО НомерСтроки";
	
	Если (НеобходимаБаза ИЛИ НеобходимыеДанные.ИндексацияЗарплаты ИЛИ НеобходимыеДанные.ИндексацияСоциальныхНачислений) И КомментироватьРасчет Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ИТОГИ";
		Для Каждого Поле Из ПоляЗапросаМаксимум Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	МАКСИМУМ(" + Поле + "),";
			Зпт = ",";
		КонецЦикла;
		Для Каждого Поле Из ПоляЗапросаСумма Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	СУММА(" + Поле + "),";
			Зпт = ",";
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "
		|	СУММА(РезультатБаза)
		|ПО
		|	НомерСтроки";
	КонецЕсли;
	
	Если	ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
		// измерения сопоставления
		Измерения = Новый Массив(2);
		Измерения[0] = "Организация";     
		Измерения[1] = "Сотрудник";
		// для начислений сопоставляемые измерения основного и базового регистов совпадают
		Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
		Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
		// для начислений сопоставляемые измерения основного и базового регистов совпадают
		// измерения сопоставления
		Измерения = Новый Массив(3);
		Измерения[0] = "Организация";     
		Измерения[1] = "Сотрудник";
		Измерения[2] = "Назначение";
		Запрос.УстановитьПараметр("парамИзмеренияОсновногоНазначения", Измерения);
		Запрос.УстановитьПараметр("парамИзмеренияБазовогоНазначения", Измерения);
		// список способов расчета, являющихся почасовыми отклонениями
		Запрос.УстановитьПараметр("парамСписокПочасовыхОтклонений", ПолучитьСписокНачисленийПочасовыхОтклонений());
		
	ИначеЕсли	ИмяРегистра = "УправленческиеНачисления" ИЛИ
				ИмяРегистра = "УправленческиеУдержания"
		Тогда
		// измерения сопоставления для управленческих регистров
		Измерения = Новый Массив(1);
		Измерения[0] = "Физлицо";
		// для начислений сопоставляемые измерения основного и базового регистов совпадают
		Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
		Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
		
	Иначе
		// измерения сопоставления для удержаний
		Измерения = Новый Массив(2);
		Измерения[0] = "Организация";
		Измерения[1] = "Сотрудник";
		// для удержаний сопоставляемые измерения основного и базового регистов разные
		Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
		Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
		
	КонецЕсли;
				
	Запрос.Текст = ТекстЗапроса;
	
	ПроцентныеПоказатели = Новый Массив;
	ПроцентныеПоказатели.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная);
	ПроцентныеПоказатели.Добавить(Перечисления.ТипыПоказателейСхемМотивации.Процентный);
	Запрос.УстановитьПараметр("ПроцентныеПоказатели", ПроцентныеПоказатели);
	
	ШкальныеПоказатели = Новый Массив;
	ШкальныеПоказатели.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная);
	ШкальныеПоказатели.Добавить(Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая);
	Запрос.УстановитьПараметр("ШкальныеПоказатели", ШкальныеПоказатели);				

	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
КонецФункции //ПолучитьДанныеДляРасчета()

Функция ПолучитьДанныеДляРасчетаСторноВзносовВФонды( Регистратор, ЭтоВзносы , Сотрудники = НеОпределено, КомментироватьРасчет = Ложь)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамРегистратор",		Регистратор);
	Запрос.УстановитьПараметр("парамОрганизация",		Регистратор.Организация );
	Запрос.УстановитьПараметр("парамПериодРегистрации",	Регистратор.ПериодРегистрации );
	Запрос.УстановитьПараметр("парамСотрудники",		Сотрудники);
	Запрос.УстановитьПараметр("парамСпособРасчета", ?(ЭтоВзносы, Перечисления.СпособыРасчетаОплатыТруда.Взносы, Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ));
	
	//	ВТВзносыРегистратора
	Если Истина Тогда
		//	Описание:
		// 		Сотрудники по которым есть зарегистрированные записи по начислениям в периодеРегистрации 
		// 		сгруппированные по периодам действия
		//
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Основной.НомерСтрокиТЧ				КАК НомерСтрокиТЧ, 
		|		Основной.НомерСтроки				КАК НомерСтроки, 
		|		Основной.Сотрудник					КАК Сотрудник, 
		|		Основной.Налог						КАК Налог, 
		|		Основной.НомерПорога        		КАК НомерПорога, 
		|		Основной.БазовыйПериодНачало		КАК БазовыйПериодНачало, 
		|		Основной.ВидРасчета				 	Как ВидРасчета, 
		|		Основной.Предел                   	Как Предел, 
		|		Основной.Ставка                   	Как Ставка, 
		|		Основной.СтатьяНалоговойДекларации  КАК СтатьяНалоговойДекларации, 
		|		Основной.ДатаНачала        			КАК ДатаНачала, 
		|		Основной.ДатаОкончания        		КАК ДатаОкончания 
		|
		|ПОМЕСТИТЬ ВТВзносыРегистратора	
		|
		|	ИЗ РегистрРасчета.ВзносыВФонды КАК Основной
		|	ГДЕ		Основной.Регистратор = &парамРегистратор
		|		И	Основной.Сотрудник В (&парамСотрудники)
		|		И	Основной.ВидРасчета.СпособРасчета = &парамСпособРасчета
		|		И	Основной.Авторасчет
		|
		|	ИНДЕКСИРОВАТЬ ПО
		|		Сотрудник, Налог, НомерПорога
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТВзносыРегистратора = "ВТВзносыРегистратора";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВзносыРегистратора";
	
	//	ВТРаботникиПоПериодамИНалоги
	Если Истина Тогда
		//	Описание:
		// 		Сотрудники по которым есть зарегистрированные записи по начислениям в периодеРегистрации 
		// 		сгруппированные по периодам действия
		//
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Основной.ПериодРегистрации		КАК ПериодРегистрации, 
		|		Основной.Организация			КАК Организация, 
		|		Основной.Сотрудник				КАК Сотрудник, 
		|		Основной.Налог					КАК Налог, 
		|		Основной.БазовыйПериодНачало	КАК БазовыйПериодНачало, 
		|		Основной.БазовыйПериодКонец		КАК БазовыйПериодКонец 
		|
		|ПОМЕСТИТЬ ВТРаботникиПоПериодамИНалоги	
		|	ИЗ РегистрРасчета.ВзносыВФонды КАК Основной
		|
		|	ГДЕ		Основной.Регистратор = &парамРегистратор
		|		И	Основной.Сотрудник В (&парамСотрудники)
		|
		|	ИНДЕКСИРОВАТЬ ПО
		|		Сотрудник,
		|		Налог,
		|		БазовыйПериодНачало
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТРаботникиПоПериодамИНалоги = "ВТРаботникиПоПериодамИНалоги";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТРаботникиПоПериодамИНалоги";
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	ИСТИНА			 	  			КАК Сторно, 
	|	ИСТИНА							КАК Авторасчет, 
	|	Основной.ПериодРегистрации  	КАК ПериодРегистрации, 
	|	Основной.Организация  			КАК Организация, 
	|	Основной.Сотрудник 	  			КАК Сотрудник, 
	|	Основной.Налог                  КАК Налог, 
	|	Основной.БазовыйПериодНачало	КАК БазовыйПериодНачало, 
	|	Основной.БазовыйПериодКонец		КАК БазовыйПериодКонец, 
	|
	|	ВзносыДо.ВидРасчета				 			Как ВидРасчета, 
	|	ВзносыДо.ВидРасчета.Наименование 			Как ВидРасчетаНаименование, 
	|	ВзносыДо.Предел                   			Как Предел, 
	|	ВзносыДо.Ставка                   			Как Ставка, 
	|	ВзносыДо.СтатьяНалоговойДекларации        	КАК СтатьяНалоговойДекларации, 
	|	ВзносыДо.НомерПорога        				КАК НомерПорога, 
	|	ВзносыДо.ДатаНачала        					КАК ДатаНачала, 
	|	ВзносыДо.ДатаОкончания        				КАК ДатаОкончания,
	|
	|	ВзносыРегистратора.НомерСтроки        		КАК НомерСтрокиРегистратора, 
	|	ВзносыРегистратора.НомерСтрокиТЧ        	КАК НомерСтрокиТЧ, 
	|
	|	-ВзносыДо.База			КАК База, 
	|	-ВзносыДо.БазаВзноса	КАК БазаВзноса, 
	|	-ВзносыДо.Результат		КАК Результат 
	| 
	|	ИЗ " + ТекстЗапросаВТРаботникиПоПериодамИНалоги + " КАК Основной
	| 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ 
	|			ВзносыВФонды.Сотрудник                  КАК Сотрудник, 
	|			ВзносыВФонды.Налог        				КАК Налог, 
	|			ВзносыВФонды.БазовыйПериодНачало		КАК БазовыйПериодНачало, 
	|			ВзносыВФонды.ВидРасчета        			КАК ВидРасчета, 
	|			ВзносыВФонды.Предел        				КАК Предел, 
	|			ВзносыВФонды.Ставка						КАК Ставка, 
	|			ВзносыВФонды.СтатьяНалоговойДекларации	КАК СтатьяНалоговойДекларации, 
	|			ВзносыВФонды.НомерПорога        		КАК НомерПорога, 
	|			ВзносыВФонды.ДатаНачала        			КАК ДатаНачала, 
	|			ВзносыВФонды.ДатаОкончания        		КАК ДатаОкончания, 
	|			СУММА(ВзносыВФонды.База)        КАК База, 
	|			СУММА(ВзносыВФонды.БазаВзноса)	КАК БазаВзноса, 
	|			СУММА(ВзносыВФонды.Результат)	КАК Результат 
	|
	|		ИЗ РегистрРасчета.ВзносыВФонды КАК ВзносыВФонды
	|
	|		ГДЕ ВзносыВФонды.ПериодРегистрации < &парамПериодРегистрации
	|		И	ВзносыВФонды.Регистратор <> &парамРегистратор
	|		И	ВзносыВФонды.Организация = &парамОрганизация
	|		И	ВзносыВФонды.Сотрудник В (&парамСотрудники)
	|		И	НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ) В (ВЫБРАТЬ РАЗЛИЧНЫЕ Периоды.БазовыйПериодНачало ИЗ " + ТекстЗапросаВТРаботникиПоПериодамИНалоги + " КАК Периоды )
	|		И	ВзносыВФонды.ВидРасчета.СпособРасчета = &парамСпособРасчета
	|
	|		СГРУППИРОВАТЬ ПО
	|			ВзносыВФонды.Сотрудник, 
	|			ВзносыВФонды.Налог, 
	|			ВзносыВФонды.БазовыйПериодНачало, 
	|			ВзносыВФонды.ВидРасчета, 
	|			ВзносыВФонды.Предел, 
	|			ВзносыВФонды.Ставка, 
	|			ВзносыВФонды.СтатьяНалоговойДекларации, 
	|			ВзносыВФонды.НомерПорога, 
	|			ВзносыВФонды.ДатаНачала, 
	|			ВзносыВФонды.ДатаОкончания 
	| 
	|	) КАК ВзносыДо 
	| 	ПО		Основной.Сотрудник = ВзносыДо.Сотрудник
	|		И	Основной.Налог = ВзносыДо.Налог
	|		И	Основной.БазовыйПериодНачало = НАЧАЛОПЕРИОДА(ВзносыДо.БазовыйПериодНачало, МЕСЯЦ) 
	| 
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТВзносыРегистратора + " КАК ВзносыРегистратора
	|   ПО		ВзносыДо.Сотрудник = ВзносыРегистратора.Сотрудник
	|   	И	ВзносыДо.Налог = ВзносыРегистратора.Налог
	|   	И	ВзносыДо.НомерПорога = ВзносыРегистратора.НомерПорога
	|   	И	ВзносыДо.БазовыйПериодНачало = ВзносыРегистратора.БазовыйПериодНачало
	|   	И	ВзносыДо.ВидРасчета = ВзносыРегистратора.ВидРасчета
	|   	И	ВзносыДо.Предел = ВзносыРегистратора.Предел
	|   	И	ВзносыДо.Ставка = ВзносыРегистратора.Ставка
	|   	И	ВзносыДо.СтатьяНалоговойДекларации = ВзносыРегистратора.СтатьяНалоговойДекларации
	|   	И	ВзносыДо.ДатаНачала = ВзносыРегистратора.ДатаНачала
	|   	И	ВзносыДо.ДатаОкончания = ВзносыРегистратора.ДатаОкончания
	|
	| ГДЕ	НЕ ВзносыДо.Результат ЕСТЬ NULL
	|	 И (ВзносыДо.База <> 0 
	|	ИЛИ ВзносыДо.БазаВзноса <> 0 
	|	ИЛИ ВзносыДо.Результат <> 0)
	|"; 

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции



//////////////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ И ФУНКЦИИ, связанные с расчетом НДФЛ

// Рассчитывает записи НДФЛ из переданного набора записей
//
// Параметры: 
//  НеобходимыеДанные		- структура со многими параметрами, необходимыми для расчета
//  ТабличнаяЧастьДокумента - табличная часть документа, структура тч должна быть одинаковой 
//                            со структурой регистра
// Возвращаемое значение:
//  Нет.
//
Процедура РассчитатьЗаписиНДФЛ(НаборЗаписейРегистра, ТабличнаяЧастьДокумента = НеОпределено, МассивИндексыСтрок = НеОпределено, Сотрудники, КомментироватьРасчет = Ложь) Экспорт
	
	Если НаборЗаписейРегистра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации
	ПериодРегистрации = НаборЗаписейРегистра[0].Период;

	Регистратор = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	
	ИсходныеДанные = ПолучитьДанныеДляРасчетаНДФЛ(Регистратор, Сотрудники, КомментироватьРасчет);
	РассчитатьЗаписиНабораНДФЛ(	ИсходныеДанные,
								НаборЗаписейРегистра,
								ТабличнаяЧастьДокумента, 
								МассивИндексыСтрок,
								КомментироватьРасчет);

	НаборЗаписейРегистра.Записать();
	
								
КонецПроцедуры // РассчитатьНДФЛ

// Получает данные для расчета ресурсов записей регистра расчета
//
//	ИмяРегистра - строка, имя регистра расчета
//	КатегорияРасчета - ссылка на значение перечисленич КатегорииРасчетов
//	НеобходимыеДанные - Структура с элементами 
//			База,
//			НормаВремени,
//			ОтработаноВремени,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//	Перерасчет - булево - признак того, что получаем данные для случая перерасчета
//	Физлица - массив ссылок на физлиц - выбранные для перерасчета физлица, или массив содержащий ссылку
//			  на физлицо по которому производится расчет (расчет по одному работнику из документа)	
//
// Возвращает выборку результата запроса
Функция ПолучитьДанныеДляРасчетаНДФЛ(Регистратор,
									Сотрудники = Неопределено,
									КомментироватьРасчет = Ложь) Экспорт

	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТолькоПоДвижениямТекущегоДокумента=ТипЗнч(Регистратор)=Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций");
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор );
	Запрос.УстановитьПараметр("парамОрганизация", Регистратор.Организация );
	Запрос.УстановитьПараметр("парамПериодРегистрации", Регистратор.ПериодРегистрации);
	
	Запрос.УстановитьПараметр("парамПриход",				ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамТрудоспособные",		Перечисления.СоциальныеГруппыНаселения.Трудоспособные);
	
	// способы расчета льготы   
	Запрос.УстановитьПараметр("парамОсновной",                   Перечисления.СпособыПримененияЛьготРаботников.Основной);
	Запрос.УстановитьПараметр("парамНаКаждогоРебенка",           Перечисления.СпособыПримененияЛьготРаботников.НаКаждогоРебенка);
	Запрос.УстановитьПараметр("парамНаКаждогоРебенкаИнвалида",   Перечисления.СпособыПримененияЛьготРаботников.НаКаждогоРебенкаИнвалида);
	Запрос.УстановитьПараметр("парамНаТроихДетей",               Перечисления.СпособыПримененияЛьготРаботников.НаТроихДетей);
	
	СписокЛьгот = Новый СписокЗначений;
	СписокЛьгот.Добавить(Справочники.ВидыЛьготРаботниковОрганизаций.НДФЛ_612а);
	СписокЛьгот.Добавить(Справочники.ВидыЛьготРаботниковОрганизаций.НДФЛ_612б);
	СписокЛьгот.Добавить(Справочники.ВидыЛьготРаботниковОрганизаций.НДФЛ_612в);
	СписокЛьгот.Добавить(Справочники.ВидыЛьготРаботниковОрганизаций.НДФЛ_613е);
	СписокЛьгот.Добавить(Справочники.ВидыЛьготРаботниковОрганизаций.НДФЛ_16912);
	СписокЛьгот.Добавить(Справочники.ВидыЛьготРаботниковОрганизаций.НДФЛ_16912ВР);
	Запрос.УстановитьПараметр("парамРазрешенныеДублиЛьгот",	СписокЛьгот);
	Запрос.УстановитьПараметр("парамБазоваяЛьгота",         Справочники.ВидыЛьготРаботниковОрганизаций.НДФЛ_611);
	
	ИспользуетсяНК = ИспользуетсяНК(Регистратор.ПериодРегистрации);
	ВариантНДФЛ = ВариантыАлгоритмовРасчетаЗарплаты().РасчетНДФЛ17;
	Запрос.УстановитьПараметр("ИспользуетсяНК", ИспользуетсяНК);
	Запрос.УстановитьПараметр("ВариантНДФЛ", ВариантНДФЛ);
	
	/////////////////////////////////////////////////////////////////////
	// Вложенные запросы
	// для получения данных расчета
	// Реализованы как временные таблицы
	Если Истина Тогда 
		
		// ВТСотрудникиПоНалоговымПериодам
		Если Истина Тогда
			// Определяем Сотрудников с Периодами по которым надо рассчитать НДФЛ
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Основной.Сотрудник	КАК Сотрудник, 
			|	Основной.НалоговыйПериод	КАК НалоговыйПериод
			|
			|ПОМЕСТИТЬ ВТСотрудникиПоНалоговымПериодам
			|ИЗ	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Основной
			|ГДЕ	Основной.Регистратор = &парамРегистратор
			|	И	Основной.Сотрудник в (&парамСотрудники)
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТСотрудникиПоНалоговымПериодам = "ВТСотрудникиПоНалоговымПериодам";
		КонецЕсли;	
		
		// ВТСотрудникиПоНалоговымПериодамИСтрокам
		Если ВариантНДФЛ = Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ОтдельныйРасчетБазы Тогда
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Основной.Сотрудник	КАК Сотрудник, 
			|	Основной.НомерСтроки		КАК НомерСтроки,
			|	Основной.ДоходНДФЛ			КАК ДоходНДФЛ,
			|	Основной.НалоговыйПериод	КАК НалоговыйПериод
			|
			|ПОМЕСТИТЬ ВТСотрудникиПоНалоговымПериодамИСтрокам
			|ИЗ	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Основной
			|ГДЕ	Основной.Регистратор = &парамРегистратор
			|	И	Основной.Сотрудник в (&парамСотрудники)
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ВТСотрудникиПоНалоговымПериодамИСтрокам = "ВТСотрудникиПоНалоговымПериодамИСтрокам";
		КонецЕсли;	
		
		// ВТНалоговыеПериоды
		Если Истина Тогда
			// Определяем Сотрудников с Периодами по которым надо рассчитать НДФЛ
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Основной.НалоговыйПериод	КАК НалоговыйПериод
			|ПОМЕСТИТЬ ВТНалоговыеПериоды
			|ИЗ	" + ТекстЗапросаВТСотрудникиПоНалоговымПериодам + " КАК Основной
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТНалоговыеПериоды = "ВТНалоговыеПериоды";
		КонецЕсли;	
		
		// ВТДоход
		Если Истина Тогда
			
			Если ИспользуетсяНК Тогда
				ТекстНП = "ВЫБОР КОГДА Начисления.ВидРасчета.ЭтоБольничные //Больничные
						|ИЛИ (Начисления.ВидРасчета.ЭтоОтпуск  И НЕ Начисления.Сторно) //Отпускные
						|ТОГДА Начисления.ПериодДействия
						|ИНАЧЕ Начисления.ПериодРегистрации
						|КОНЕЦ";
			Иначе
				ТекстНП = "Начисления.ПериодДействия";
			КонецЕсли;	

			
			Если НЕ ИспользуетсяНК ИЛИ ВариантНДФЛ = Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ДоначислениеНаСуммуПревышения Тогда
				// Получает суммы начисленного дохода Сотрудников в разрезе ПериодовДействия и Видов доходов
				// Суммы по расчетам, которые действуют в текущем периоде
				//
				ТекстЗапросаВТ = "
				|  	ВЫБРАТЬ
				|		Основной.Сотрудник    				КАК Сотрудник,
				|		Основной.НалоговыйПериод    		КАК НалоговыйПериод,
				|		Начисления.ВидРасчета.ДоходНДФЛ    	КАК ДоходНДФЛ,
				|		СУММА( Начисления.Результат )		КАК Доход
				|ПОМЕСТИТЬ ВТДоход
				|	ИЗ	" + ТекстЗапросаВТСотрудникиПоНалоговымПериодам + " КАК Основной
				|	 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
				|   ПО		Основной.Сотрудник = Начисления.Сотрудник
				|   	И	Основной.НалоговыйПериод = "+ТекстНП+"
				|		И	Начисления.ПериодРегистрации <=	&парамПериодРегистрации
				|		"+?(ТолькоПоДвижениямТекущегоДокумента,"И Начисления.Регистратор=&парамРегистратор","")+"
				|
				|   СГРУППИРОВАТЬ ПО
				|		Основной.Сотрудник,
				|		Основной.НалоговыйПериод,
				|		Начисления.ВидРасчета.ДоходНДФЛ
				|";
			Иначе //Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ОтдельныйРасчетБазы
				ТекстЗапросаВТ = "
				|  	ВЫБРАТЬ
				|		Основной.Сотрудник    				КАК Сотрудник,
				|		Основной.НалоговыйПериод    		КАК НалоговыйПериод,
				|		Основной.ДоходНДФЛ    				КАК ДоходНДФЛ,
				|		Основной.НомерСтроки   				КАК НомерСтроки,
				|		СУММА( Начисления.Результат )		КАК Доход
				|ПОМЕСТИТЬ ВТДоход
				|	ИЗ	" + ВТСотрудникиПоНалоговымПериодамИСтрокам + " КАК Основной
				|	 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
				|   ПО		Основной.Сотрудник = Начисления.Сотрудник
				|   	И	Основной.НалоговыйПериод = "+ТекстНП+"
				|		И	Начисления.ПериодРегистрации <=	&парамПериодРегистрации
				|		И	Начисления.ВидРасчета.ДоходНДФЛ = Основной.ДоходНДФЛ
				|		"+?(ТолькоПоДвижениямТекущегоДокумента,"И Начисления.Регистратор=&парамРегистратор","")+"
				|
				|   СГРУППИРОВАТЬ ПО
				|		Основной.Сотрудник,
				|		Основной.НалоговыйПериод,
				|		Основной.ДоходНДФЛ,
				|		Основной.НомерСтроки
				|";
				
			КонецЕсли;	
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТДоход = "ВТДоход";
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДоход";
		
		// ВТДоходЛьготы
		Если Истина Тогда
			// Получает суммы начисленного дохода Сотрудников в разрезе ПериодовДействия и Видов доходов
			// Суммы по расчетам, которые действуют в текущем периоде
			//
			ТекстЗапросаВТ = "
			|  	ВЫБРАТЬ
			|		Основной.Сотрудник    				КАК Сотрудник,
			|		Основной.НалоговыйПериод    		КАК НалоговыйПериод,
			|		СУММА( Начисления.Результат )		КАК Доход
			|ПОМЕСТИТЬ ВТДоходЛьготы
			|	ИЗ	" + ТекстЗапросаВТСотрудникиПоНалоговымПериодам + " КАК Основной
			|	 
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
			|   ПО		Основной.Сотрудник = Начисления.Сотрудник
			|   	И	Основной.НалоговыйПериод = "+ТекстНП+"
			|		И	Начисления.ПериодРегистрации <=	&парамПериодРегистрации
			|		"+?(ТолькоПоДвижениямТекущегоДокумента,"И Начисления.Регистратор=&парамРегистратор","")+"
			|
			|  ГДЕ Начисления.ВидРасчета.ДоходНДФЛ.ЭтоМесячныйДоход
			|
			|   СГРУППИРОВАТЬ ПО
			|		Основной.Сотрудник,
			|		Основной.НалоговыйПериод
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТДоходЛьготы = "ВТДоходЛьготы";
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДоходЛьготы";
		
		// ВТВзносы
		Если Истина Тогда
			
			Если ИспользуетсяНК Тогда
				ТекстНП = "ВЫБОР КОГДА БазаИзНачислений.ВидРасчета.ЭтоБольничные //Больничные
						|ИЛИ (БазаИзНачислений.ВидРасчета.ЭтоОтпуск  И НЕ БазаИзНачислений.Сторно) //Отпускные
						|ТОГДА НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ)
						|ИНАЧЕ БазаИзНачислений.ПериодРегистрации
						|КОНЕЦ";
			Иначе
				ТекстНП = "НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ)";
			КонецЕсли;	

			Если НЕ ИспользуетсяНК ИЛИ ВариантНДФЛ = Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ДоначислениеНаСуммуПревышения Тогда
			
				// Получает суммы взносов в фонды социального страхования Сотрудников в разрезе Налогового периода
				// только по доходу 01
				ТекстЗапросаВТ = "
				|ВЫБРАТЬ
				|	Основной.Сотрудник,
				|	Основной.НалоговыйПериод,
				|	Основной.ДоходНДФЛ,
				|	СУММА(ВЫБОР КОГДА Основной.БазаВзноса <> 0 И Основной.БазаДоходаНДФЛ < Основной.БазаВзноса
				|					ТОГДА Основной.Взнос*Основной.БазаДоходаНДФЛ/Основной.БазаВзноса 
				|				КОГДА Основной.БазаВзноса <> 0 И Основной.БазаДоходаНДФЛ >= Основной.БазаВзноса
				|					ТОГДА Основной.Взнос 
				|				ИНАЧЕ 0 
				|			КОНЕЦ) КАК СуммаВзносов,
				|	0 КАК БазаВзносов,
				|	0 КАК СуммаВзносовБЛ,
				|	0 КАК БазаВзносовБЛ
				|ПОМЕСТИТЬ ВТВзносы
				|ИЗ (
				|	ВЫБРАТЬ
				|		Основной.Сотрудник,
				|		Основной.НалоговыйПериод,
				|		Основной.ДоходНДФЛ,
				|		Основной.ВидРасчета,
				|		Основной.БазаВзноса,
				|		Основной.Взнос,
				|		СУММА(БазаИзНачислений.Результат) КАК БазаДоходаНДФЛ
				|	ИЗ (
				|			  ВЫБРАТЬ
				|				Основной.Сотрудник,
				|				Основной.НалоговыйПериод,
				|				Основной.ДоходНДФЛ,
				|				ВзносыВФонды.ВидРасчета,
				|				СУММА( ВзносыВФонды.База )			КАК БазаВзноса,
				|				СУММА( ВзносыВФонды.Результат )		КАК Взнос
				|			ИЗ	(
				
				|				ВЫБРАТЬ
				|					Основной.Сотрудник, 
				|					Основной.НалоговыйПериод,
				|					Основной.ДоходНДФЛ
				|				ИЗ	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Основной
				|				ГДЕ	Основной.Регистратор = &парамРегистратор
				|					И	Основной.Сотрудник в (&парамСотрудники)
				|					И	Основной.ДоходНДФЛ.ЭтоМесячныйДоход
				|			) КАК Основной
				|
				|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВзносыВФонды КАК ВзносыВФонды
				|			   ПО		Основной.Сотрудник			= ВзносыВФонды.Сотрудник
				|				   И	Основной.НалоговыйПериод	= НАЧАЛОПЕРИОДА( ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ )
				|					И	ВзносыВФонды.ПериодРегистрации			<=	&парамПериодРегистрации
				|					И	ВзносыВФонды.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Взносы)
				|		"+?(ТолькоПоДвижениямТекущегоДокумента,"И ВзносыВФонды.Регистратор=&парамРегистратор","")+"
				|
				|			СГРУППИРОВАТЬ ПО
				|				Основной.Сотрудник,
				|				Основной.НалоговыйПериод,
				|				Основной.ДоходНДФЛ,
				|				ВзносыВФонды.ВидРасчета
				|	) КАК Основной
				|	 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК БазаИзНачислений
				|	ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
				|		И	БазаИзНачислений.ВидРасчета.ДоходНДФЛ = Основной.ДоходНДФЛ 
				|		И	"+ТекстНП+" = Основной.НалоговыйПериод
				|		И	БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
				|		" + ?(ТолькоПоДвижениямТекущегоДокумента," И БазаИзНачислений.Регистратор = &парамРегистратор", "") + "
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ВзносыВФонды.БазовыеВидыРасчета КАК БазовыеВидыРасчета
				|	ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
				|		И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
				|				 
				|	СГРУППИРОВАТЬ ПО
				|		Основной.Сотрудник,
				|		Основной.НалоговыйПериод,
				|		Основной.ДоходНДФЛ,
				|		Основной.ВидРасчета,
				|		Основной.БазаВзноса,
				|		Основной.Взнос
				|) КАК Основной
				|
				|СГРУППИРОВАТЬ ПО
				|	Основной.Сотрудник,
				|	Основной.НалоговыйПериод,
				|	Основной.ДоходНДФЛ
				|";
				
			Иначе //Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ОтдельныйРасчетБазы
				ТекстЗапросаВТ = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Основной.Сотрудник,
				|	Основной.НалоговыйПериод,
				|	Основной.ДоходНДФЛ,
				|   СУММА(
				|    ВЫБОР КОГДА Основной.ВидРасчета.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.Первичное) 
				|    ТОГДА Основной.БазаВзноса
				|    ИНАЧЕ 0
				|    КОНЕЦ) КАК БазаВзносов,
				|   СУММА(
				|    ВЫБОР КОГДА Основной.ВидРасчета.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.Первичное) 
				|    ТОГДА Основной.Взнос
				|    ИНАЧЕ 0
				|    КОНЕЦ) КАК СуммаВзносов,
				|   СУММА(
				|    ВЫБОР КОГДА Основной.ДоходНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код01) И Основной.ВидРасчета.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеВторогоУровня) 
				|    ТОГДА Основной.БазаВзноса
				|    ИНАЧЕ 0
				|    КОНЕЦ) КАК БазаВзносовБЛ,
				|   СУММА(
				|    ВЫБОР КОГДА Основной.ДоходНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код01) И Основной.ВидРасчета.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеВторогоУровня) 
				|    ТОГДА Основной.Взнос
				|    ИНАЧЕ 0
				|    КОНЕЦ) КАК СуммаВзносовБЛ
				|ПОМЕСТИТЬ ВТВзносы
				|	ИЗ (
				|			  ВЫБРАТЬ
				|				Основной.Сотрудник,
				|				Основной.НалоговыйПериод,
				|				Основной.ДоходНДФЛ,
				|				ВзносыВФонды.ВидРасчета,
				|				СУММА( ВзносыВФонды.БазаВзноса)		КАК БазаВзноса,
				|				СУММА( ВзносыВФонды.Результат)		КАК Взнос
				|			ИЗ	(
				
				|				ВЫБРАТЬ
				|					Основной.Сотрудник, 
				|					Основной.НалоговыйПериод,
				|					Основной.ДоходНДФЛ
				|				ИЗ	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Основной
				|				ГДЕ	Основной.Регистратор = &парамРегистратор
				|					И	Основной.Сотрудник в (&парамСотрудники)
				|					И	Основной.ДоходНДФЛ.ЭтоМесячныйДоход
				|			) КАК Основной
				|
				|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВзносыВФонды КАК ВзносыВФонды
				|			   ПО		Основной.Сотрудник			= ВзносыВФонды.Сотрудник
				|				   И	Основной.НалоговыйПериод	= НАЧАЛОПЕРИОДА( ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ )
				|					И	ВзносыВФонды.ПериодРегистрации			<=	&парамПериодРегистрации
				|					И	ВзносыВФонды.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Взносы)
				|					"+?(ТолькоПоДвижениямТекущегоДокумента,"И ВзносыВФонды.Регистратор=&парамРегистратор","")+"
				|
				|			СГРУППИРОВАТЬ ПО
				|				Основной.Сотрудник,
				|				Основной.НалоговыйПериод,
				|				Основной.ДоходНДФЛ,
				|				ВзносыВФонды.ВидРасчета
				|	) КАК Основной
				|	 
				|СГРУППИРОВАТЬ ПО
				|	Основной.Сотрудник,
				|	Основной.НалоговыйПериод,
				|	Основной.ДоходНДФЛ
				|";
				
			КонецЕсли;	
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТВзносы = "ВТВзносы";
		КонецЕсли;	
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВзносы";
	
		// ВТАктуальныеЛьготыРаботниковПоНалоговымПериодам
		Если Истина Тогда
			// Получает по Сотрудникам в разрезе периодов актуальные льготы
			//
			ТекстЗапроса = "
			|  	ВЫБРАТЬ
			|		ПериодыЛьгот.Сотрудник    			КАК Сотрудник,
			|		ПериодыЛьгот.НалоговыйПериод    	КАК НалоговыйПериод,
			|		ЛьготыРаботниковОрганизаций.Льгота	КАК Льгота
			|ПОМЕСТИТЬ ВТАктуальныеЛьготыРаботниковПоНалоговымПериодам
			|	ИЗ	(
			|  		ВЫБРАТЬ
			|			Основной.Сотрудник    		КАК Сотрудник,
			|			Основной.НалоговыйПериод    КАК НалоговыйПериод,
			|			Льготы.Льгота    			КАК Льгота,
			|			МАКСИМУМ( Льготы.Период )	КАК ПериодИзмененияЛьготы
			|		ИЗ	" + ТекстЗапросаВТСотрудникиПоНалоговымПериодам + " КАК Основной
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛьготыРаботниковОрганизаций КАК Льготы
			|		ПО		Основной.Сотрудник = Льготы.Сотрудник
			|   		И	Льготы.Период <= Основной.НалоговыйПериод		
			|   	СГРУППИРОВАТЬ ПО
			|			Основной.Сотрудник,
			|			Основной.НалоговыйПериод,
			|			Льготы.Льгота
			|   ) КАК ПериодыЛьгот
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛьготыРаботниковОрганизаций КАК ЛьготыРаботниковОрганизаций
			|	ПО		ПериодыЛьгот.Сотрудник = ЛьготыРаботниковОрганизаций.Сотрудник
			|   	И	ПериодыЛьгот.Льгота = ЛьготыРаботниковОрганизаций.Льгота
 			|   	И	ПериодыЛьгот.ПериодИзмененияЛьготы <= ЛьготыРаботниковОрганизаций.Период
			|
			|   ГДЕ  ЛьготыРаботниковОрганизаций.Актуальность 
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТАктуальныеЛьготыРаботниковПоНалоговымПериодам = "ВТАктуальныеЛьготыРаботниковПоНалоговымПериодам";
		КонецЕсли;	
		
		// ВТИнвалиды
		Если Истина Тогда
			// Получает по Сотрудникам в разрезе периодов актуальные льготы
			//
			ТекстЗапроса = "
			|  	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		Инвалиды.ФизЛицоИнвалид    			КАК ФизЛицоИнвалид,
			|		Инвалиды.НалоговыйПериод    		КАК НалоговыйПериод
			|ПОМЕСТИТЬ ВТИнвалиды
			|	ИЗ	(
			|  		ВЫБРАТЬ
			|			Основной.НалоговыйПериод    				КАК НалоговыйПериод,
			|			СведенияОбИнвалидности.ФизЛицо    			КАК ФизЛицоИнвалид,
			|			МАКСИМУМ( СведенияОбИнвалидности.Период )	КАК ПериодНачалаИнвалидности
			|		ИЗ	" + ТекстЗапросаВТНалоговыеПериоды + " КАК Основной
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидности
			|		ПО		Основной.НалоговыйПериод >= СведенияОбИнвалидности.Период
			|   	СГРУППИРОВАТЬ ПО
			|			Основной.НалоговыйПериод,
			|			СведенияОбИнвалидности.ФизЛицо
			|   ) КАК Инвалиды
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидности
			|	ПО		Инвалиды.ФизЛицоИнвалид = СведенияОбИнвалидности.ФизЛицо
			|   	И	Инвалиды.ПериодНачалаИнвалидности = СведенияОбИнвалидности.Период
			|
			|   ГДЕ  СведенияОбИнвалидности.Инвалидность 
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТИнвалиды = "ВТИнвалиды";
		КонецЕсли;	
		
		// ВТДетиРаботников
		Если Истина Тогда
			// Получаем Сотрудников с Налоговыми периодами и колличество детей на каждый период в разрезе периодов актуальные льготы
			//
			ТекстЗапроса = "
			|	ВЫБРАТЬ 
			|		СемьяСДетьми.Сотрудник					КАК Сотрудник,
			|		СемьяСДетьми.НалоговыйПериод			КАК НалоговыйПериод,
			|		СУММА(СемьяСДетьми.КвоДетей)			КАК КвоДетей,
			|		СУММА(СемьяСДетьми.КвоДетейИнвалидов)	КАК КвоДетейИнвалидов
			|ПОМЕСТИТЬ ВТДетиРаботников
			|	ИЗ (
			|		ВЫБРАТЬ
			|			Основной.Сотрудник    				КАК Сотрудник,
			|			Основной.НалоговыйПериод    		КАК НалоговыйПериод,
			|			Семья.НомерСтроки      				КАК НомерСтроки,
			|			Семья.ФизЛицо      					КАК Ребенок,       
			|			ВЫРАЗИТЬ (ВЫБОР 
			|					КОГДА Семья.СтепеньРодства = ЗНАЧЕНИЕ(Справочник.СтепениРодстваФизЛиц.Ребенок) 
			|					И	Семья.Иждивенец 
			|					И 	Семья.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|					И	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Семья.ФизЛицо.ДатаРождения, ГОД), ГОД, 18) >= НАЧАЛОПЕРИОДА(Основной.НалоговыйПериод, ГОД)                    
			|					ТОГДА 1
			|                   КОГДА Семья.СтепеньРодства = ЗНАЧЕНИЕ(Справочник.СтепениРодстваФизЛиц.Ребенок) 
			|					И	Семья.Иждивенец 
			|					И 	Семья.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
            |					И	(Семья.ГодРождения+18) >= ГОД(Основной.НалоговыйПериод)                    
			|					ТОГДА 1
			|					ИНАЧЕ 0 
			|			КОНЕЦ КАК ЧИСЛО(5,2)) 								КАК КвоДетей,
			|			ВЫРАЗИТЬ(ВЫБОР 
			|					КОГДА	Семья.СтепеньРодства = ЗНАЧЕНИЕ(Справочник.СтепениРодстваФизЛиц.Ребенок) 
			|						И	Семья.Иждивенец 
			|						И 	Семья.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|						И	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Семья.ФизЛицо.ДатаРождения, ГОД), ГОД, 18) >= НАЧАЛОПЕРИОДА(Основной.НалоговыйПериод, ГОД) 
			|						И	Инвалиды.ФизЛицоИнвалид ЕСТЬ НЕ NULL 
			|					ТОГДА 1 
			|           		КОГДА  Семья.СтепеньРодства = ЗНАЧЕНИЕ(Справочник.СтепениРодстваФизЛиц.Ребенок) 
			|						И	Семья.Иждивенец 
			|						И 	Семья.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|						И	(Семья.ГодРождения+18) >= ГОД(Основной.НалоговыйПериод)                    
			|						И	Семья.Иждивенец ЕСТЬ НЕ NULL 
			|					ТОГДА 1 
			|					ИНАЧЕ 0 
			|			КОНЕЦ КАК ЧИСЛО(5,2))								КАК КвоДетейИнвалидов
			|
			|		ИЗ " + ТекстЗапросаВТСотрудникиПоНалоговымПериодам + " КАК Основной
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.СоставСемьи КАК Семья 
			|       ПО		Основной.Сотрудник.ФизЛицо = Семья.Ссылка
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТИнвалиды + " КАК Инвалиды
			|		ПО		Семья.ФизЛицо = Инвалиды.ФизЛицоИнвалид
			|			И	Основной.НалоговыйПериод = Инвалиды.НалоговыйПериод
			|	) КАК СемьяСДетьми
			|
			|СГРУППИРОВАТЬ ПО
			|	СемьяСДетьми.Сотрудник,
			|	СемьяСДетьми.НалоговыйПериод
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТДетиРаботников = "ВТДетиРаботников";
		КонецЕсли;	
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДетиРаботников";
		
		// ВТЛьготы - Льготы и их парааметы Количество льгот, Количество порогов
		Если Истина Тогда
			// Получает по Сотрудникам в разрезе периодов, актуальные льготыи их параметры
			//
			
			Если НЕ ИспользуетсяНК Тогда
				ТекстЗапроса = "
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		Льготы.Сотрудник			КАК Сотрудник,
				|		Льготы.НалоговыйПериод		КАК НалоговыйПериод,
				|		Льготы.КвоЛьгот				КАК КвоЛьгот,
				|		Льготы.КвоПороговЛьгот		КАК КвоПороговЛьгот,
				|		МАКСИМУМ (Льготы.Льгота)	КАК Льгота
				|	 
				|ПОМЕСТИТЬ ВТЛьготы
				|	ИЗ (
				|		ВЫБРАТЬ РАЗЛИЧНЫЕ
				|			СведенияОЛьготах.Сотрудник    			КАК Сотрудник,
				|			СведенияОЛьготах.НалоговыйПериод    	КАК НалоговыйПериод,
				|			СведенияОЛьготах.Льгота					КАК Льгота,
				|	 
				|			ВЫРАЗИТЬ( ВЫБОР КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.Основной) 
				|								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ 
				|							КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаКаждогоРебенка) 
				|								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ * ДетиРаботников.КвоДетей 
				|							КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаКаждогоРебенкаИнвалида) 
				|								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ * ДетиРаботников.КвоДетейИнвалидов 
				|							КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаТроихДетей)
				|										И ДетиРаботников.КвоДетей >= 3
				|								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ * ДетиРаботников.КвоДетей 
				|		 		       		ИНАЧЕ 0
				|	         		   		КОНЕЦ
				|					КАК ЧИСЛО(5,2) )       		КАК КвоЛьгот,
				|	 
				|			ВЫРАЗИТЬ (ВЫБОР КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.Основной) 
				|							ТОГДА 1 
				|						КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаКаждогоРебенка) 
				|							ТОГДА ДетиРаботников.КвоДетей 
				|						КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаКаждогоРебенкаИнвалида) 
				|							ТОГДА ДетиРаботников.КвоДетейИнвалидов 
				|						КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаТроихДетей)
				|										И ДетиРаботников.КвоДетей >= 3
				|							ТОГДА ДетиРаботников.КвоДетей 
				|		        		ИНАЧЕ 1 
				|	            	КОНЕЦ
				|				КАК ЧИСЛО(5,2))    		КАК КвоПороговЛьгот
				|			ИЗ " + ТекстЗапросаВТАктуальныеЛьготыРаботниковПоНалоговымПериодам + " КАК СведенияОЛьготах
				|
				|			ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДетиРаботников + " КАК ДетиРаботников
				|			ПО		СведенияОЛьготах.Сотрудник = ДетиРаботников.Сотрудник
				|				И   СведенияОЛьготах.НалоговыйПериод = ДетиРаботников.НалоговыйПериод
				|	) КАК Льготы
				|	СГРУППИРОВАТЬ ПО
				|		Льготы.Сотрудник,
				|		Льготы.НалоговыйПериод,
				|		Льготы.КвоЛьгот,
				|		Льготы.КвоПороговЛьгот
				|";
			Иначе
				//Для льгот "на каждого ребенка" количество порогов льгот теперь НЕ увеличивается.
				//Исключение - льгота 169.1.2 у одного родителя
				ТекстЗапроса = "
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		Льготы.Сотрудник			КАК Сотрудник,
				|		Льготы.НалоговыйПериод		КАК НалоговыйПериод,
				|		Льготы.КвоЛьгот				КАК КвоЛьгот,
				|		Льготы.КвоПороговЛьгот		КАК КвоПороговЛьгот,
				|		МАКСИМУМ (Льготы.Льгота)	КАК Льгота
				|	 
				|ПОМЕСТИТЬ ВТЛьготы
				|	ИЗ (
				|		ВЫБРАТЬ РАЗЛИЧНЫЕ
				|			СведенияОЛьготах.Сотрудник    			КАК Сотрудник,
				|			СведенияОЛьготах.НалоговыйПериод    	КАК НалоговыйПериод,
				|			СведенияОЛьготах.Льгота					КАК Льгота,
				|	 
				|			ВЫРАЗИТЬ( ВЫБОР КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.Основной) 
				|								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ 
				|							КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаКаждогоРебенка) 
				|								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ * ДетиРаботников.КвоДетей 
				|							КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаКаждогоРебенкаИнвалида) 
				|								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ * ДетиРаботников.КвоДетейИнвалидов 
				|							КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаТроихДетей)
				|										И ДетиРаботников.КвоДетей >= 3
				|								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ * ДетиРаботников.КвоДетей 
				|		 		       		ИНАЧЕ 0
				|	         		   		КОНЕЦ
				|					КАК ЧИСЛО(5,2) )       		КАК КвоЛьгот,
				|	 
				|			ВЫРАЗИТЬ (ВЫБОР КОГДА СведенияОЛьготах.Льгота = ЗНАЧЕНИЕ(Справочник.ВидыЛьготРаботниковОрганизаций.НДФЛ_16912) 
				|							ТОГДА ДетиРаботников.КвоДетей 
				|		        		ИНАЧЕ 1 
				|	            	КОНЕЦ
				|				КАК ЧИСЛО(5,2))    		КАК КвоПороговЛьгот
				|			ИЗ " + ТекстЗапросаВТАктуальныеЛьготыРаботниковПоНалоговымПериодам + " КАК СведенияОЛьготах
				|
				|			ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДетиРаботников + " КАК ДетиРаботников
				|			ПО		СведенияОЛьготах.Сотрудник = ДетиРаботников.Сотрудник
				|				И   СведенияОЛьготах.НалоговыйПериод = ДетиРаботников.НалоговыйПериод
				|	) КАК Льготы
				|	СГРУППИРОВАТЬ ПО
				|		Льготы.Сотрудник,
				|		Льготы.НалоговыйПериод,
				|		Льготы.КвоЛьгот,
				|		Льготы.КвоПороговЛьгот
				|";
            КонецЕсли;
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТЛьготы = "ВТЛьготы";
		КонецЕсли;	
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТЛьготы";
		
		// ВТЛьготыРаботников
		Если Истина Тогда
			// 
			//
			ТекстЗапроса = "
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		Льготы.Сотрудник			КАК Сотрудник,
			|		Льготы.НалоговыйПериод		КАК НалоговыйПериод,
			|		Льготы.КвоЛьгот					КАК КвоЛьгот,
			|		ПараметрыЛьгот.КвоПороговЛьгот	КАК КвоПороговЛьгот,
			|		ПараметрыЛьгот.Льгота			КАК Льгота,
			|		БазоваяЛьгота.КвоЛьгот			КАК БазоваяКвоЛьгот,
			|		БазоваяЛьгота.КвоПороговЛьгот	КАК БазоваяКвоПороговЛьгот,
			|		БазоваяЛьгота.Льгота			КАК БазоваяЛьгота
			|	 
			|ПОМЕСТИТЬ ВТЛьготыРаботников
			|	ИЗ (
			|  		ВЫБРАТЬ
			|			Основной.Сотрудник    			КАК Сотрудник,
			|			Основной.НалоговыйПериод    	КАК НалоговыйПериод,
			|			МАКСИМУМ( Основной.КвоЛьгот )	КАК КвоЛьгот
			|		ИЗ	" + ТекстЗапросаВТЛьготы + " КАК Основной
			|   	СГРУППИРОВАТЬ ПО
			|			Основной.Сотрудник,
			|			Основной.НалоговыйПериод
			|   ) КАК Льготы
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТЛьготы + "  КАК ПараметрыЛьгот
			|	ПО		Льготы.Сотрудник = ПараметрыЛьгот.Сотрудник
			|		И	Льготы.НалоговыйПериод = ПараметрыЛьгот.НалоговыйПериод
			|   	И	Льготы.КвоЛьгот = ПараметрыЛьгот.КвоЛьгот
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТЛьготы + "  КАК БазоваяЛьгота
			|	ПО		Льготы.Сотрудник = БазоваяЛьгота.Сотрудник
			|   	И	Льготы.НалоговыйПериод = БазоваяЛьгота.НалоговыйПериод
			|   	И	БазоваяЛьгота.Льгота = &парамБазоваяЛьгота
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТЛьготыРаботников = "ВТЛьготыРаботников";
		КонецЕсли;	
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТЛьготы";
		
		// ВТСтавки
		Если Истина Тогда
			// Получает по Сотрудникам в разрезе периодов актуальные льготы
			//
			ТекстЗапроса = "
			|  	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		АктивныеПериоды.НалоговыйПериод    	КАК НалоговыйПериод,
			|		МинимальнаяОплатаТруда.Размер		КАК МинимальнаяОплатаТруда,
			|		АктивныеПериоды.ВидСтавки                КАК ВидСтавкиНДФЛ,           
			|		СтавкиНДФЛ.Ставка                   КАК СтавкаНДФЛ,
			|		СтавкиНДФЛ.Порог                    КАК ПорогСтавкаНДФЛ,           
			|		РазмерыЛьготНДФЛ.Ставка 			КАК РазмерыЛьготНДФЛСтавка,
			|		РазмерыЛьготНДФЛ.Порог       		КАК РазмерыЛьготНДФЛПорог
			|ПОМЕСТИТЬ ВТСтавки
			|	ИЗ	(
			|  		ВЫБРАТЬ
			|			Основной.НалоговыйПериод    				КАК НалоговыйПериод,
			|			СтавкиНДФЛ.ВидСтавки    					КАК ВидСтавки,
			|			МАКСИМУМ( МинимальнаяОплатаТруда.Период )	КАК ПериодМинимальнаяОплатаТруда,
			|			МАКСИМУМ( СтавкиНДФЛ.Период )				КАК ПериодСтавкиНДФЛ,
			|			МАКСИМУМ( РазмерыЛьготНДФЛ.Период )			КАК ПериодРазмерыЛьготНДФЛ
			|		ИЗ	" + ТекстЗапросаВТНалоговыеПериоды + " КАК Основной
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТруда КАК МинимальнаяОплатаТруда
			|		ПО		НАЧАЛОПЕРИОДА(Основной.НалоговыйПериод, ГОД) >= МинимальнаяОплатаТруда.Период
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДФЛ КАК СтавкиНДФЛ
			|		ПО		Основной.НалоговыйПериод >= СтавкиНДФЛ.Период
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыЛьготНДФЛ КАК РазмерыЛьготНДФЛ
			|		ПО		Основной.НалоговыйПериод >= РазмерыЛьготНДФЛ.Период
			|
			|   	СГРУППИРОВАТЬ ПО
			|			Основной.НалоговыйПериод,
			|			СтавкиНДФЛ.ВидСтавки
			|   ) КАК АктивныеПериоды
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТруда КАК МинимальнаяОплатаТруда
			|	ПО		АктивныеПериоды.ПериодМинимальнаяОплатаТруда = МинимальнаяОплатаТруда.Период
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДФЛ КАК СтавкиНДФЛ
			|	ПО		АктивныеПериоды.ПериодСтавкиНДФЛ = СтавкиНДФЛ.Период
			|			И	АктивныеПериоды.ВидСтавки = СтавкиНДФЛ.ВидСтавки
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыЛьготНДФЛ КАК РазмерыЛьготНДФЛ
			|	ПО		АктивныеПериоды.ПериодРазмерыЛьготНДФЛ = РазмерыЛьготНДФЛ.Период
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТСтавки = "ВТСтавки";
		КонецЕсли; 
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТСтавки";
		
		// ВТНалогДо
		Если НЕ ТолькоПоДвижениямТекущегоДокумента Тогда
			// Получает по Сотрудникам ранее начисленные суммц НДФЛ и дохода
			//
			ТекстЗапроса = "
			|		ВЫБРАТЬ 
			|			НДФЛ.Сотрудник			КАК Сотрудник, 
			|			НДФЛ.НалоговыйПериод	КАК НалоговыйПериод, 
			|			НДФЛ.ДоходНДФЛ			КАК ДоходНДФЛ, 
			|			СУММА(НДФЛ.Доход)	КАК Доход,
			|			СУММА(НДФЛ.Налог)КАК Налог
			|ПОМЕСТИТЬ ВТНалогДо
			|		ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК НДФЛ
			|
			|		ГДЕ НДФЛ.Период <= &парамПериодРегистрации
			|		И	НДФЛ.Регистратор <> &парамРегистратор
			|		И	НДФЛ.ВидДвижения = &парамПриход
			|		И	НДФЛ.Организация = &парамОрганизация
			|		И	НДФЛ.Сотрудник В (&парамСотрудники)
			|		И	НДФЛ.НалоговыйПериод В (ВЫБРАТЬ РАЗЛИЧНЫЕ Периоды.НалоговыйПериод ИЗ " + ТекстЗапросаВТСотрудникиПоНалоговымПериодам + " КАК Периоды )
			|
			|		СГРУППИРОВАТЬ ПО
			|			НДФЛ.Сотрудник, 
			|			НДФЛ.НалоговыйПериод, 
			|			НДФЛ.ДоходНДФЛ 
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТНалогДо = "ВТНалогДо";
		КонецЕсли; 
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТНалогДо";
		
	КонецЕсли;
	
	// Конец формирования виртуальных таблиц
	/////////////////////////////////////////////////////////////////////
	
	Если ИспользуетсяНК Тогда
		
		Если ВариантНДФЛ = Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ДоначислениеНаСуммуПревышения Тогда
			ЗапросВсего = 	"ЛЕВОЕ СОЕДИНЕНИЕ
					|   (ВЫБРАТЬ
					|      Начисления.Сотрудник КАК Сотрудник,
					|      Начисления.НалоговыйПериод КАК НалоговыйПериод,
					|      СУММА(Начисления.Доход) КАК Доход
					|    ИЗ "+ТекстЗапросаВТДоход+" КАК Начисления
					|    ГДЕ Начисления.ДоходНДФЛ.ВидСтавкиУвеличенная = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.Увеличенная)
					|    СГРУППИРОВАТЬ ПО
					|      Начисления.Сотрудник,
					|      Начисления.НалоговыйПериод
					|   ) КАК НачисленияВсего
					|ПО		Основной.Сотрудник  = НачисленияВсего.Сотрудник
					|	И	Основной.НалоговыйПериод  = НачисленияВсего.НалоговыйПериод
					|ЛЕВОЕ СОЕДИНЕНИЕ
					|   (ВЫБРАТЬ
					|      Взносы.Сотрудник КАК Сотрудник,
					|      Взносы.НалоговыйПериод КАК НалоговыйПериод,
					|      СУММА(Взносы.СуммаВзносов) КАК СуммаВзносов
					|    ИЗ ВТВзносы КАК Взносы
					|    СГРУППИРОВАТЬ ПО
					|      Взносы.Сотрудник,
					|      Взносы.НалоговыйПериод
					|   ) КАК ВзносыВсего
					|ПО		Основной.Сотрудник  = ВзносыВсего.Сотрудник
					|	И	Основной.НалоговыйПериод  = ВзносыВсего.НалоговыйПериод";
					
			РезультатВсего = "	НачисленияВсего.Доход КАК ДоходПолный,
							 |	ВзносыВсего.СуммаВзносов КАК ВзносыВсего,";		
			
			РезультатВидСтавки = "Основной.УвеличеннаяСтавка КАК ОсновнойВидСтавкиУвеличенная,
								|СтавкиУвеличенная.СтавкаНДФЛ  КАК СтавкаНДФЛУвеличенная,
								|СтавкиУвеличенная.ПорогСтавкаНДФЛ  КАК ПорогСтавкаНДФЛУвеличенная,";
								
			ЗапросВидСтавки = 	"ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТСтавки + " КАК СтавкиУвеличенная
								|ПО		Основной.НалоговыйПериод	= СтавкиУвеличенная.НалоговыйПериод
								|И		Основной.УвеличеннаяСтавка	= СтавкиУвеличенная.ВидСтавкиНДФЛ";
		Иначе //Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ОтдельныйРасчетБазы
			ТекстЗапроса = "
			    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Основной.НомерСтроки  КАК НомерСтроки,
				|	СУММА(НачисленияВсего.Доход) КАК Доход,
				|	СУММА(НачисленияВсего.ДоходДляВзносов) КАК ДоходДляВзносов
				|ПОМЕСТИТЬ ВТДоходПолный
				|ИЗ
				|  РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Основной
				|  ЛЕВОЕ СОЕДИНЕНИЕ
				|   (ВЫБРАТЬ
				|      Начисления.Сотрудник КАК Сотрудник,
				|      Начисления.ДоходНДФЛ КАК ДоходНДФЛ,
				|      Начисления.НалоговыйПериод КАК НалоговыйПериод,
				|      Начисления.НомерСтроки КАК НомерСтроки,
				|      СУММА(Начисления.Доход) КАК Доход,
				|	   СУММА(ВЫБОР КОГДА Начисления.ДоходНДФЛ.ЭтоМесячныйДоход
				|       ТОГДА Начисления.Доход ИНАЧЕ 0 КОНЕЦ) КАК ДоходДляВзносов 
				|    ИЗ "+ТекстЗапросаВТДоход+" КАК Начисления
				|    ГДЕ Начисления.ДоходНДФЛ.ВидСтавкиУвеличенная = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.Увеличенная)
				|    СГРУППИРОВАТЬ ПО
				|      Начисления.Сотрудник,
				|      Начисления.ДоходНДФЛ,
				|      Начисления.НалоговыйПериод,
				|      Начисления.НомерСтроки
				|   ) КАК НачисленияВсего
				|ПО		Основной.Сотрудник  = НачисленияВсего.Сотрудник
				|	И	Основной.НалоговыйПериод  = НачисленияВсего.НалоговыйПериод
				|	И	Основной.НомерСтроки  > НачисленияВсего.НомерСтроки
				|	И	Основной.ДоходНДФЛ.ВидСтавкиУвеличенная = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.Увеличенная)
				|ГДЕ Основной.Регистратор = &парамРегистратор
				|	И	Основной.Сотрудник В (&парамСотрудники)
				|
				|СГРУППИРОВАТЬ ПО
				| Основной.НомерСтроки";
				
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
				
				
				ЗапросВсего = 	"ЛЕВОЕ СОЕДИНЕНИЕ
				|   ВТДоходПолный КАК НачисленияВсего
				|ПО		Основной.НомерСтроки  = НачисленияВсего.НомерСтроки
				|";
					
			РезультатВсего = "	НачисленияВсего.Доход КАК ДоходПолный,
							 |	НачисленияВсего.ДоходДляВзносов КАК ВзносыВсего,";
							 
			РезультатВидСтавки = "Основной.УвеличеннаяСтавка КАК ОсновнойВидСтавкиУвеличенная,
								|СтавкиУвеличенная.СтавкаНДФЛ  КАК СтавкаНДФЛУвеличенная,
								|СтавкиУвеличенная.ПорогСтавкаНДФЛ  КАК ПорогСтавкаНДФЛУвеличенная,";
								
			ЗапросВидСтавки = 	"ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТСтавки + " КАК СтавкиУвеличенная
								|ПО		Основной.НалоговыйПериод	= СтавкиУвеличенная.НалоговыйПериод
								|И		Основной.УвеличеннаяСтавка	= СтавкиУвеличенная.ВидСтавкиНДФЛ";
			
			
		КонецЕсли;		
	Иначе
		ЗапросВсего = 	"";
		РезультатВсего = "	0 КАК ДоходПолный, 0 КАК ВзносыВсего,";
		РезультатВидСтавки = "0 КАК ОсновнойВидСтавкиУвеличенная,
							|0  КАК СтавкаНДФЛУвеличенная,
							|0  КАК ПорогСтавкаНДФЛУвеличенная,";
		ЗапросВидСтавки = 	"";
		
	КонецЕсли;	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ИспользуетсяНК				КАК ИспользуетсяНК,
	|	&ВариантНДФЛ				КАК ВариантНДФЛ, 
	|	Основной.НомерСтроки				КАК НомерСтроки, 
	|	Основной.Авторасчет					КАК Авторасчет,
	|	Основной.Сотрудник					КАК Сотрудник,
	|	Основной.Регистратор				КАК Регистратор,
	|ВЫБОР КОГДА Основной.Регистратор ССЫЛКА Документ.ЗарплатаКВыплатеОрганизаций ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ	Как ЗарплатаКВыплатеОрганизаций,
	|	Основной.НалоговыйПериод			КАК НалоговыйПериод,
	|	Основной.ДоходНДФЛ.ЭтоМесячныйДоход КАК ЭтоМесячныйДоход,
	|	Основной.ДоходНДФЛ					КАК ДоходНДФЛ,
	|	                              
	|	"+?(ТолькоПоДвижениямТекущегоДокумента,"0","НалогДо.Доход")+"	КАК ДоходДо,
	|	"+?(ТолькоПоДвижениямТекущегоДокумента,"0","НалогДо.Налог")+"	КАК НалогДо,
	|	                              
	|	Начисления.Доход					КАК Доход,
	|"+РезультатВсего+"
	|	НачисленияЛьготы.Доход				КАК ДоходЛьготы,
	|	Взносы.СуммаВзносов					КАК СуммаВзносов,
	|	Взносы.БазаВзносов					КАК БазаВзносов,
	|	Взносы.СуммаВзносовБЛ				КАК СуммаВзносовБЛ,
	|	Взносы.БазаВзносовБЛ				КАК БазаВзносовБЛ,
	|	                              
	|Основной.НалоговыйПериод КАК ОсновнойНалоговыйПериод, 
	|Основной.ВидСтавки       КАК ОсновнойВидСтавки,
	|Ставки.НалоговыйПериод   КАК СтавкиНалоговыйПериод,
	|Ставки.ВидСтавкиНДФЛ     КАК СтавкиВидСтавкиНДФЛ,
	|	Ставки.МинимальнаяОплатаТруда		КАК МинимальнаяОплатаТруда,
	|	Ставки.СтавкаНДФЛ                   КАК СтавкаНДФЛ,           
	|	Ставки.РазмерыЛьготНДФЛСтавка 		КАК РазмерыЛьготНДФЛСтавка,
	|	Ставки.РазмерыЛьготНДФЛПорог       	КАК РазмерыЛьготНДФЛПорог,
	|	                                                            
	|"+РезультатВидСтавки+"
	|
	|	ЛьготыРаботников.Льгота				КАК Льгота,
	|	ЛьготыРаботников.КвоПороговЛьгот    КАК КвоПороговЛьгот,                          
	|	// если доход меньше одного порога и есть базовая льгота то количество льгот складывается
	|   ВЫБОР	КОГДА	НачисленияЛьготы.Доход <= Ставки.РазмерыЛьготНДФЛПорог          
	|                И	НЕ ЕстьNULL(ПараметрыОрганизаций.ПрименятьЛьготуНДФЛБазовуюИДетскуюПоПорогуДетской,Ложь)
	|                И	ЛьготыРаботников.Льгота	В (&парамРазрешенныеДублиЛьгот)
	|				ТОГДА ЛьготыРаботников.КвоЛьгот + ЕСТЬNULL(ЛьготыРаботников.БазоваяКвоЛьгот, 0)
	|   		КОГДА	НачисленияЛьготы.Доход <= ЛьготыРаботников.КвоПороговЛьгот*Ставки.РазмерыЛьготНДФЛПорог          
	|                И	ЕстьNULL(ПараметрыОрганизаций.ПрименятьЛьготуНДФЛБазовуюИДетскуюПоПорогуДетской,Ложь)
	|                И	ЛьготыРаботников.Льгота	В (&парамРазрешенныеДублиЛьгот)
	|				ТОГДА ЛьготыРаботников.КвоЛьгот + ЕСТЬNULL(ЛьготыРаботников.БазоваяКвоЛьгот, 0)
	|			КОГДА	НачисленияЛьготы.Доход <= Ставки.РазмерыЛьготНДФЛПорог*ЕСТЬNULL(ЛьготыРаботников.КвоПороговЛьгот, 0)          
	|				ТОГДА ЛьготыРаботников.КвоЛьгот
	|         ИНАЧЕ 0
	|   КОНЕЦ						        КАК КвоЛьгот,
	|   ЕСТЬNULL(ПараметрыОрганизаций.НеПрименятьЛьготуНДФЛДляАвансов,ЛОЖЬ) КАК НеПрименятьЛьготуНДФЛДляАвансов, 
	|   ЕСТЬNULL(ПараметрыОрганизаций.НеПрименятьЛьготуНДФЛДляБудущихПериодов,ЛОЖЬ) КАК НеПрименятьЛьготуНДФЛДляБудущихПериодов
	|
	|
	|ИЗ	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Основной
	|
	|"+?(ТолькоПоДвижениямТекущегоДокумента,"","
	|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТНалогДо+" КАК НалогДо 
	| 	ПО		Основной.Сотрудник = НалогДо.Сотрудник
	|		И	Основной.ДоходНДФЛ = НалогДо.ДоходНДФЛ
	|		И	Основной.НалоговыйПериод = НалогДо.НалоговыйПериод
	|")+" 
	| 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРасчетаЗарплатыОрганизаций КАК ПараметрыОрганизаций
	|ПО		Основной.Организация  = ПараметрыОрганизаций.Организация
	| 
	|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТДоход+" КАК Начисления
	|ПО		Основной.Сотрудник  = Начисления.Сотрудник
	|	И	Основной.НалоговыйПериод  = Начисления.НалоговыйПериод
	|	И	Основной.ДоходНДФЛ  = Начисления.ДоходНДФЛ
	|
	|"+ЗапросВсего+"
	| 
	|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТДоходЛьготы+" КАК НачисленияЛьготы
	|ПО		Основной.Сотрудник  = НачисленияЛьготы.Сотрудник
	|	И	Основной.НалоговыйПериод  = НачисленияЛьготы.НалоговыйПериод
	|	И	Основной.ДоходНДФЛ.ЭтоМесячныйДоход
	| 
	|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТВзносы+" КАК Взносы
	|ПО		Основной.Сотрудник  = Взносы.Сотрудник
	|	И	Основной.НалоговыйПериод  = Взносы.НалоговыйПериод
	|	И	Основной.ДоходНДФЛ	= Взносы.ДоходНДФЛ
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТСтавки + " КАК Ставки
	|ПО		Основной.НалоговыйПериод	= Ставки.НалоговыйПериод
	|И		Основной.ВидСтавки	= Ставки.ВидСтавкиНДФЛ
	|
	|"+ЗапросВидСтавки+"
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТЛьготыРаботников + " КАК ЛьготыРаботников
	|ПО		Основной.Сотрудник			= ЛьготыРаботников.Сотрудник
	|	И	Основной.НалоговыйПериод	= ЛьготыРаботников.НалоговыйПериод
	|	И	Основной.ДоходНДФЛ.ЭтоМесячныйДоход
	|
	|ГДЕ Основной.Регистратор = &парамРегистратор
	|	И	Основной.Сотрудник В (&парамСотрудники)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Основной.НомерСтроки
	|";
	
	Запрос.Текст = ТекстЗапроса; 
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции //ПолучитьДанныеДляРасчетаНДФЛ()

Процедура РассчитатьЗаписиНабораНДФЛ(ИсходныеДанные,
									НаборЗаписейРегистра,
									ТабличнаяЧастьДокумента,
									МассивИндексыСтрокТабличнойЧасти = Неопределено,
									КомментироватьРасчет = Ложь)
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	Для Каждого СтрокаДвижений Из НаборЗаписейРегистра Цикл
		СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
		
		Если ИсходныеДанные.НайтиСледующий(СтруктураПоиска) Тогда
			СтрокаТабличнойЧасти = Неопределено;
			Если ТабличнаяЧастьДокумента <> Неопределено Тогда
				Если МассивИндексыСтрокТабличнойЧасти = Неопределено Тогда
					//расчет всего документа
					СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений));
				Иначе
					//расчет по сотруднику
					СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(МассивИндексыСтрокТабличнойЧасти.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений)));
				КонецЕсли;
			КонецЕсли;
			
			// Окончательный расчет
			РассчитатьЗаписьНДФЛ(СтрокаДвижений, ИсходныеДанные, КомментироватьРасчет);
			
			Если ТабличнаяЧастьДокумента <> НеОпределено Тогда
				
				СтрокаТабличнойЧасти.Доход    = СтрокаДвижений.Доход;
				СтрокаТабличнойЧасти.Налог    = СтрокаДвижений.Налог;
				СтрокаТабличнойЧасти.Льгота   		= СтрокаДвижений.Льгота;
				СтрокаТабличнойЧасти.КоличествоЛьгот = СтрокаДвижений.КоличествоЛьгот;
				СтрокаТабличнойЧасти.ДоходПолный = СтрокаДвижений.ДоходПолный;
				
				Если ИсходныеДанные.ЗарплатаКВыплатеОрганизаций Тогда
					СтрокаТабличнойЧасти.ПериодВзаиморасчетов	= ИсходныеДанные.Регистратор.ПериодРегистрации;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьЗаписиНабораНДФЛ

Процедура	РассчитатьЗаписьНДФЛ(СтрокаДвижений, ИсходныеДанные, КомментироватьРасчет)
	
	Если НЕ СтрокаДвижений.Авторасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтрокаДвижений.Сторно Тогда
	
		// Сначала рассчитаем базу налога
		ДоходДо			= ?( ИсходныеДанные.ДоходДо<> NULL			, ИсходныеДанные.ДоходДо, 0);
		НалогДо			= ?( ИсходныеДанные.НалогДо<> NULL			, ИсходныеДанные.НалогДо, 0);
		Доход			= ?( ИсходныеДанные.Доход<> NULL			, ИсходныеДанные.Доход, 0);
		ДоходЛьготы		= ?( ИсходныеДанные.ДоходЛьготы<> NULL		, ИсходныеДанные.ДоходЛьготы, 0);
		КоэфЛьготы = ?(ИсходныеДанные.ЭтоМесячныйДоход, ?(ДоходЛьготы = 0, 0, Окр(Доход/ДоходЛьготы,5)), 1);
		ДоходПолный		= ?( ИсходныеДанные.ДоходПолный<> NULL			, ИсходныеДанные.ДоходПолный, 0);
		ВзносыВсего		= ?( ИсходныеДанные.ВзносыВсего<> NULL			, ИсходныеДанные.ВзносыВсего, 0);

		СуммаВзносов	= ?( ИсходныеДанные.СуммаВзносов<> NULL	, ИсходныеДанные.СуммаВзносов, 0);
		БазаВзносов		= ?( ИсходныеДанные.БазаВзносов<> NULL	, ИсходныеДанные.БазаВзносов, 0);
		СуммаВзносовБЛ	= ?( ИсходныеДанные.СуммаВзносовБЛ<> NULL	, ИсходныеДанные.СуммаВзносовБЛ, 0);
		БазаВзносовБЛ	= ?( ИсходныеДанные.БазаВзносовБЛ<> NULL	, ИсходныеДанные.БазаВзносовБЛ, 0);
		БазаНалога		= Окр(Доход, 2) - ?(ИсходныеДанные.ЭтоМесячныйДоход, СуммаВзносов+СуммаВзносовБЛ, 0);
		
		МинимальнаяОплатаТруда	= ?( ИсходныеДанные.МинимальнаяОплатаТруда <> NULL	, ИсходныеДанные.МинимальнаяОплатаТруда, 0);
		СтавкаНДФЛ				= ?( ИсходныеДанные.СтавкаНДФЛ<> NULL				, ИсходныеДанные.СтавкаНДФЛ, 0);
		СтавкаНДФЛУвеличенная		= ?( ИсходныеДанные.СтавкаНДФЛУвеличенная<> NULL			, ИсходныеДанные.СтавкаНДФЛУвеличенная, 0);
		ПорогСтавкаНДФЛУвеличенная		= ?( ИсходныеДанные.ПорогСтавкаНДФЛУвеличенная<> NULL			, ИсходныеДанные.ПорогСтавкаНДФЛУвеличенная, 0);
		
		КвоПороговЛьгот	= ?( ИсходныеДанные.КвоПороговЛьгот<> NULL		, ИсходныеДанные.КвоПороговЛьгот, 0);
		ПорогЛьготы		= ?( ИсходныеДанные.РазмерыЛьготНДФЛПорог<> NULL	, ИсходныеДанные.РазмерыЛьготНДФЛПорог, 0);
		СтавкаЛьготы	= ?( ИсходныеДанные.РазмерыЛьготНДФЛСтавка<> NULL	, ИсходныеДанные.РазмерыЛьготНДФЛСтавка, 0);
		
		СуммаЛьготы = 0;
		СуммаЛьготыВсего = 0;
		
		Если ИсходныеДанные.ЗарплатаКВыплатеОрганизаций И ИсходныеДанные.НеПрименятьЛьготуНДФЛДляАвансов Тогда
			КвоЛьгот = 0;
			Льгота	= Справочники.ВидыЛьготРаботниковОрганизаций.ПустаяСсылка();
		ИначеЕсли ИсходныеДанные.НеПрименятьЛьготуНДФЛДляБудущихПериодов И (ИсходныеДанные.Регистратор.ПериодРегистрации < ИсходныеДанные.НалоговыйПериод) Тогда	
		    КвоЛьгот = 0;
			Льгота	= Справочники.ВидыЛьготРаботниковОрганизаций.ПустаяСсылка();
		Иначе	
			Если ДоходЛьготы <= КвоПороговЛьгот * ПорогЛьготы Тогда			
				Льгота		= ИсходныеДанные.Льгота;
				
				КвоЛьгот	= ?( ИсходныеДанные.КвоЛьгот <> NULL, ИсходныеДанные.КвоЛьгот, 0);
				СуммаЛьготыВсего = МинимальнаяОплатаТруда * СтавкаЛьготы * КоэфЛьготы;
				СуммаЛьготы = Окр(КвоЛьгот * МинимальнаяОплатаТруда * СтавкаЛьготы * КоэфЛьготы,2);
				БазаНалога	= БазаНалога - СуммаЛьготы;
				
			Иначе
				
				КвоЛьгот=0;
				Если Льгота = Неопределено Тогда
					Льгота		= Справочники.ВидыЛьготРаботниковОрганизаций.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		
		Если НЕ ИсходныеДанные.ИспользуетсяНК Тогда
			
			Налог = Окр(Макс(БазаНалога * СтавкаНДФЛ, 0), 2);
		ИначеЕсли ИсходныеДанные.ВариантНДФЛ = Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ДоначислениеНаСуммуПревышения Тогда 	
		
			Налог = Окр(Макс(БазаНалога * СтавкаНДФЛ, 0), 2);
			
			//ст. 167.1 Налогового кодекса - если общий доход превышает 10-ти кратный размер минимальной зарплаты,
			//то к сумме превышения применяется ставка 17%.
			//Т.е. к налогу по ставке 15% (уже рассчитано) надо доначислить 2% от суммы превышения.
			//Если в месяце есть несколько видов дохода - учтем по каждому пропорционально?
			Если СтавкаНДФЛУвеличенная <> 0 И СтавкаНДФЛУвеличенная <> СтавкаНДФЛ И ДоходПолный <> 0 И (ДоходПолный <> ВзносыВсего) И Доход <> 0 Тогда
				Превышение = Макс(ДоходПолный - ВзносыВсего - ПорогСтавкаНДФЛУвеличенная,0)*БазаНалога/(ДоходПолный - ВзносыВсего);
				СтавкаПревышение = Макс(СтавкаНДФЛУвеличенная - СтавкаНДФЛ,0);
				НалогПревышение = Окр(Превышение*СтавкаПревышение,2);
				Налог = Налог + НалогПревышение;
			Иначе
				Превышение = 0;
				НалогПревышение = 0;
			КонецЕсли;
			
		Иначе //Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ОтдельныйРасчетБазы
			
			Предел = МАКС(ПорогСтавкаНДФЛУвеличенная - ДоходПолный,0);
			Если СтавкаНДФЛУвеличенная = 0 ИЛИ СтавкаНДФЛУвеличенная = СтавкаНДФЛ ИЛИ Доход <= Предел Тогда
			    Налог = Окр(Макс(БазаНалога * СтавкаНДФЛ, 0), 2);
				Доход15 = Доход;
				СуммаВзносов15 =  СуммаВзносов;
				СуммаВзносовБЛ15 =  СуммаВзносовБЛ;
				БазаНалога15 = БазаНалога;
				Налог15 = Налог;
				Доход17 = 0;
				СуммаВзносов17 =  0;
				СуммаВзносовБЛ17 =  0;
				БазаНалога17 = 0;
				Налог17 = 0;				
			Иначе
				//Письмо ГНАУ 03.02.11 р. № 2919/7/17-0717
				//Для расчета НДФЛ отдельно определяется база налога для ставки 15% и ставки 17%
				//Для этого ЕСВ разделяется на сумму до порога и свыше порога
				//Сначала учитывается ЕСВ с зарплаты, затем - с больничных
				Если БазаВзносов = 0 Тогда
					СтавкаВзносов = 0;
				Иначе
					СтавкаВзносов = СуммаВзносов/БазаВзносов;
				КонецЕсли;
				Если БазаВзносовБЛ = 0 Тогда
					СтавкаВзносовБЛ = 0;
				Иначе
					СтавкаВзносовБЛ = СуммаВзносовБЛ/БазаВзносовБЛ;
				КонецЕсли;
				Доход15 = Предел;
				БазаВзносов15 = Мин(Предел,Макс(БазаВзносов-ВзносыВсего,0));
				СуммаВзносов15 =  Окр(БазаВзносов15*СтавкаВзносов,2);
				БазаВзносовБЛ15 = Мин(Макс(Предел-БазаВзносов15,0),БазаВзносовБЛ);
				СуммаВзносовБЛ15 = Окр(БазаВзносовБЛ15*СтавкаВзносовБЛ,2);
				
				БазаНалога15 = Доход15 - СуммаВзносов15 - СуммаВзносовБЛ15;
				Налог15 = Окр(Макс(БазаНалога15 * СтавкаНДФЛ, 0), 2);
				
				Доход17 = Доход-Доход15;
				БазаВзносов17 = Мин(Доход17,Макс(БазаВзносов-ВзносыВсего,0)-БазаВзносов15);
				СуммаВзносов17 =  Окр(БазаВзносов17*СтавкаВзносов,2);
				БазаВзносовБЛ17 = Мин(Макс(Доход17-БазаВзносов17,0),Макс(БазаВзносовБЛ-БазаВзносовБЛ15,0));
				СуммаВзносовБЛ17 =  Окр(БазаВзносовБЛ17*СтавкаВзносовБЛ,2);
				
				БазаНалога17 = Доход17 - СуммаВзносов17 - СуммаВзносовБЛ17;
				Налог17 = Окр(Макс(БазаНалога17 * СтавкаНДФЛУвеличенная, 0), 2);
				
				Налог = Налог15 + Налог17;
			КонецЕсли;	
		КонецЕсли;	
		
		Если КомментироватьРасчет Тогда
			
			Если НЕ ИсходныеДанные.ИспользуетсяНК Тогда
				КомментарийВидаРасчета = ОбщегоНазначения.КомментарийРасчета("Расчет НДФЛ за " + Формат(СтрокаДвижений.НалоговыйПериод,"ДФ='МММ гггг'") + " (Код дохода " + СтрокаДвижений.ДоходНДФЛ + ")");
				ОбщегоНазначения.КомментарийРасчета("Сумма дохода : " + Доход, КомментарийВидаРасчета);
				Если ДоходДо <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("	доход до: " + ДоходДо, КомментарийВидаРасчета);
				КонецЕсли;	
				ОбщегоНазначения.КомментарийРасчета("Учтено взносов : " + СуммаВзносов, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Ставка НДФЛ : " + СтавкаНДФЛ, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Всего сумма льготы : " + СуммаЛьготыВсего, КомментарийВидаРасчета);
				Если ИсходныеДанные.ЭтоМесячныйДоход И КоэфЛьготы <> 1 Тогда
					ОбщегоНазначения.КомментарийРасчета("	Коєффициент учета вида дохода в месячном доходе : " + КоэфЛьготы, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("	Учтенная сумма льготы по текущему виду дохода: " + СуммаЛьготы, КомментарийВидаРасчета);
				КонецЕсли;
				ОбщегоНазначения.КомментарийРасчета("	Действующая льгота : " + Льгота, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("	Количество льгот : " + ИсходныеДанные.КвоЛьгот, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("	Количество порогов для применения льготы : " + КвоПороговЛьгот, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("	Порог льготы : " + КвоПороговЛьгот * ПорогЛьготы, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Минимальная оплата труда : " + МинимальнаяОплатаТруда, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("База налога : " + БазаНалога, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Налог : " + Налог, КомментарийВидаРасчета);
			ИначеЕсли ИсходныеДанные.ВариантНДФЛ = Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ДоначислениеНаСуммуПревышения Тогда 	
				КомментарийВидаРасчета = ОбщегоНазначения.КомментарийРасчета("Расчет НДФЛ за " + Формат(СтрокаДвижений.НалоговыйПериод,"ДФ='МММ гггг'") + " (Код дохода " + СтрокаДвижений.ДоходНДФЛ + ")");
				ОбщегоНазначения.КомментарийРасчета("Доход полный за период : " + ДоходПолный, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Сумма дохода : " + Доход, КомментарийВидаРасчета);
				Если ДоходДо <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("	доход до: " + ДоходДо, КомментарийВидаРасчета);
				КонецЕсли;	
				ОбщегоНазначения.КомментарийРасчета("Учтено ЕСВ : " + СуммаВзносов, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Ставка НДФЛ : " + СтавкаНДФЛ, КомментарийВидаРасчета);
				Если СтавкаНДФЛУвеличенная <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Ставка НДФЛ (увеличенная) : " + СтавкаНДФЛУвеличенная, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("	порог : " + ПорогСтавкаНДФЛУвеличенная, КомментарийВидаРасчета);
				КонецЕсли;	
				Если ИсходныеДанные.ЭтоМесячныйДоход И СуммаЛьготыВсего <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Всего сумма льготы : " + СуммаЛьготыВсего, КомментарийВидаРасчета);
					Если ИсходныеДанные.ЭтоМесячныйДоход И КоэфЛьготы <> 1 Тогда
						ОбщегоНазначения.КомментарийРасчета("	Коєффициент учета вида дохода в месячном доходе : " + КоэфЛьготы, КомментарийВидаРасчета);
						ОбщегоНазначения.КомментарийРасчета("	Учтенная сумма льготы по текущему виду дохода: " + СуммаЛьготы, КомментарийВидаРасчета);
					КонецЕсли;
					ОбщегоНазначения.КомментарийРасчета("	Действующая льгота : " + Льгота, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("	Количество льгот : " + ИсходныеДанные.КвоЛьгот, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("	Количество порогов для применения льготы : " + КвоПороговЛьгот, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("	Порог льготы : " + КвоПороговЛьгот * ПорогЛьготы, КомментарийВидаРасчета);
				КонецЕсли;	
				ОбщегоНазначения.КомментарийРасчета("База налога : " + БазаНалога, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("Налог : " + (Налог-НалогПревышение), КомментарийВидаРасчета);
				Если Превышение <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("	превышение порога: " + Окр(Превышение,2), КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("	доначислено налога: " + НалогПревышение, КомментарийВидаРасчета);
				КонецЕсли;
				Если НалогДо <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("	налог до: " + НалогДо, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("	начислено налога: " + (Налог - НалогДо), КомментарийВидаРасчета);
				КонецЕсли;

			Иначе	
				КомментарийВидаРасчета = ОбщегоНазначения.КомментарийРасчета("Расчет НДФЛ за " + Формат(СтрокаДвижений.НалоговыйПериод,"ДФ='МММ гггг'") + " (Код дохода " + СтрокаДвижений.ДоходНДФЛ + ")");
				ОбщегоНазначения.КомментарийРасчета("Сумма дохода : " + Доход, КомментарийВидаРасчета);
				Если ДоходДо <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("	доход до: " + ДоходДо, КомментарийВидаРасчета);
				КонецЕсли;	
				ОбщегоНазначения.КомментарийРасчета("Учтено ЕСВ : " + СуммаВзносов, КомментарийВидаРасчета);
				ОбщегоНазначения.КомментарийРасчета("База ЕСВ : " + БазаВзносов, КомментарийВидаРасчета);
				Если СуммаВзносовБЛ <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Учтено ЕСВ с больничных : " + СуммаВзносовБЛ, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("База ЕСВ с больничных : " + БазаВзносовБЛ, КомментарийВидаРасчета);
				КонецЕсли;	
				ОбщегоНазначения.КомментарийРасчета("Ставка НДФЛ : " + СтавкаНДФЛ, КомментарийВидаРасчета);
				Если СтавкаНДФЛУвеличенная <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Ставка НДФЛ (увеличенная) : " + СтавкаНДФЛУвеличенная, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("	порог : " + ПорогСтавкаНДФЛУвеличенная, КомментарийВидаРасчета);
				КонецЕсли;
				ОбщегоНазначения.КомментарийРасчета("Учтено других видов дохода : " + ДоходПолный, КомментарийВидаРасчета);
				Если ИсходныеДанные.ЭтоМесячныйДоход И СуммаЛьготыВсего <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Всего сумма льготы : " + СуммаЛьготыВсего, КомментарийВидаРасчета);
					Если ИсходныеДанные.ЭтоМесячныйДоход И КоэфЛьготы <> 1 Тогда
						ОбщегоНазначения.КомментарийРасчета("	Коєффициент учета вида дохода в месячном доходе : " + КоэфЛьготы, КомментарийВидаРасчета);
						ОбщегоНазначения.КомментарийРасчета("	Учтенная сумма льготы по текущему виду дохода: " + СуммаЛьготы, КомментарийВидаРасчета);
					КонецЕсли;
					ОбщегоНазначения.КомментарийРасчета("	Действующая льгота : " + Льгота, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("	Количество льгот : " + ИсходныеДанные.КвоЛьгот, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("	Количество порогов для применения льготы : " + КвоПороговЛьгот, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("	Порог льготы : " + КвоПороговЛьгот * ПорогЛьготы, КомментарийВидаРасчета);
				КонецЕсли;
				Если Доход15 <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Доход (15%) : " + Доход15, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Сумма взносов (15%) : " + Строка(СуммаВзносов15 + СуммаВзносовБЛ15), КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("База налога (15%) : " + БазаНалога15, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Налог (15%) : " + Налог15, КомментарийВидаРасчета);
				КонецЕсли;
				Если Доход17 <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Доход (17%) : " + Доход17, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Сумма взносов (17%) : " + Строка(СуммаВзносов17 + СуммаВзносовБЛ17), КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("База налога (17%) : " + БазаНалога17, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("Налог (17%) : " + Налог17, КомментарийВидаРасчета);
				КонецЕсли;
				Если Доход17 <> 0 И Доход15 <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("Налог (15%+17%) : " + Налог, КомментарийВидаРасчета);
				КонецЕсли;	
				Если НалогДо <> 0 Тогда
					ОбщегоНазначения.КомментарийРасчета("	налог до: " + НалогДо, КомментарийВидаРасчета);
					ОбщегоНазначения.КомментарийРасчета("	начислено налога: " + (Налог - НалогДо), КомментарийВидаРасчета);
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;
		
		
		// в таблицу полученные значения
		СтрокаДвижений.Доход = Доход - ДоходДо;
		СтрокаДвижений.Налог = Налог - НалогДо;
		СтрокаДвижений.Льгота = ?(СуммаЛьготы = 0, "", Льгота);
		СтрокаДвижений.КоличествоЛьгот = КвоЛьгот;
		СтрокаДвижений.ДоходПолный = ДоходПолный;
	Иначе
		СтрокаДвижений.Доход = -СтрокаДвижений.Доход;
		СтрокаДвижений.Налог = -СтрокаДвижений.Налог;
		СтрокаДвижений.Льгота = СтрокаДвижений.Льгота;
		СтрокаДвижений.КоличествоЛьгот = -СтрокаДвижений.КоличествоЛьгот;
		СтрокаДвижений.ДоходПолный = СтрокаДвижений.ДоходПолный;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьЗаписьНДФЛ



//////////////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ И ФУНКЦИИ для расчета средней

Функция РассчитатьПремияЗаГод(пГодоваяПремияБазовыйПериодНачало, Сотрудник) Экспорт
	
	ГодоваяПремия = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГодоваяПремияБазовыйПериодНачало",пГодоваяПремияБазовыйПериодНачало);
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	Запрос.УстановитьПараметр("ГодоваяПремия",Перечисления.ВидыПремии.ГодоваяПремия);
	
	мНеУчитыватьСовместителейДляСредних = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Сотрудник.Организация)).НеУчитыватьСовместителейДляСредних;
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|  СУММА(Основной.Результат) КАК Сумма
	|
	|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|ГДЕ НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, ГОД) = &ГодоваяПремияБазовыйПериодНачало
	|    И	Основной.Сотрудник = &Сотрудник
	|	// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
	|	"+ ?(мНеУчитыватьСовместителейДляСредних,"И Основной.Назначение.ОсновноеНазначение <> Основной.Сотрудник","")+"
	|    И	Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Годовая)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ГодоваяПремия = Выборка.Сумма;
	КонецЕсли;
	
	Возврат ГодоваяПремия;
	
КонецФункции

Функция РассчитатьСреднююПорядок100(Регистратор) Экспорт
	
	Организация = Регистратор.Организация;
	мЕстьПремии = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ЕстьПремии;
	мЕстьГодоваяПремия = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ЕстьГодоваяПремия;
	
	// сам расчет ТЧ РасчетСреднего
	Запрос = Новый Запрос;     
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр( "Регистратор", Регистратор );
	Запрос.УстановитьПараметр( "парамОрганизация", Организация );
	Запрос.УстановитьПараметр( "парамСотрудник", Регистратор.Сотрудник );
	Запрос.УстановитьПараметр( "парамПериодРегистрации", Регистратор.ПериодРегистрации );
	Запрос.УстановитьПараметр( "ПериодРасчетаСреднегоНачало", Регистратор.ПериодРасчетаСреднегоНачало );
	Запрос.УстановитьПараметр( "ПериодРасчетаСреднегоКонец", Регистратор.ПериодРасчетаСреднегоКонец );
	Запрос.УстановитьПараметр( "ВидУчетаВремениДляСредней", Регистратор.ВидУчетаВремениДляСредней );
	
	// Формула такая: Результат * Мин(ДнейВСреднего, ДнейВсегоПоНачислениям) / ДнейВсегоПоНачислениям
	// Если Коэффициент не повышался в середине месяца, то Коэф=1 и КоэфГодПремии=1
	Коэф = "
	|		(1 + РАЗНОСТЬДАТ(	ВЫБОР КОГДА Средняя.БазовыйПериодНачало > Начисления.ПериодДействияНачало ТОГДА Средняя.БазовыйПериодНачало ИНАЧЕ Начисления.ПериодДействияНачало КОНЕЦ
	|                        ,	ВЫБОР КОГДА Средняя.БазовыйПериодКонец < Начисления.ПериодДействияКонец ТОГДА Средняя.БазовыйПериодКонец ИНАЧЕ Начисления.ПериодДействияКонец КОНЕЦ
	|					, ДЕНЬ))
	|		/ (1 + РАЗНОСТЬДАТ(Начисления.ПериодДействияНачало, Начисления.ПериодДействияКонец, ДЕНЬ))";       
	КоэфПремии = "
	|		(1 + РАЗНОСТЬДАТ(	Средняя.БазовыйПериодНачало, Средняя.БазовыйПериодКонец, ДЕНЬ))
	|		/ (1 + РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Средняя.БазовыйПериодНачало,МЕСЯЦ), КОНЕЦПЕРИОДА(Средняя.БазовыйПериодНачало,МЕСЯЦ) , ДЕНЬ))";       
	
	//	ВТПоВремени
	Если Истина Тогда
		//	Описание:
		// 		таблица с расчетами по зарплате
		//		если в строке нет авторасчета, то берм значения проставленные пользователем. Они потом понадобятся для премии пропорционально
		//		
		ТекстЗапросаВТ = " 
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
		|	Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|   
		|	СУММА(Средняя.ОтработаноДнейБаза)	КАК ОтработаноДнейБаза,
		|	СУММА(Средняя.ОтработаноЧасовБаза)	КАК ОтработаноЧасовБаза,
		|	СУММА(Средняя.НормаДнейБаза)		КАК НормаДнейБаза,
		|	СУММА(Средняя.НормаЧасовБаза)		КАК НормаЧасовБаза,
		|	СУММА(Средняя.КалендарныеДниБаза)	КАК КалендарныеДниБаза
		|   
		|ПОМЕСТИТЬ ВТПоВремени	
		|ИЗ (
		|	ВЫБРАТЬ
		|		Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
		|		Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|		СУММА(Начисления.ОтработаноДней*"+Коэф+")	КАК ОтработаноДнейБаза,
		|		СУММА(Начисления.ОтработаноЧасов*"+Коэф+")	КАК ОтработаноЧасовБаза,
		|		СУММА(Начисления.НормаДней*"+Коэф+")			КАК НормаДнейБаза,
		|		СУММА(Начисления.НормаЧасов*"+Коэф+")		КАК НормаЧасовБаза,
		|		0	КАК КалендарныеДниБаза
		|	ИЗ РегистрРасчета.РасчетСреднегоЗаработка КАК Средняя
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
		|	ПО		Средняя.ВидРасчета = БазовыеВидыРасчета.Ссылка  
		|        И  (Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска) 
		|        ИЛИ  Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработку)) 
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления  
		|	ПО		Начисления.Сотрудник = &парамСотрудник
		|		И	НАЧАЛОПЕРИОДА(Средняя.БазовыйПериодНачало,МЕСЯЦ) = Начисления.ПериодДействия
		|		И	Начисления.ПериодРегистрации <= &парамПериодРегистрации
		|		И	Начисления.Организация = &парамОрганизация
		|		И	(Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска) 
		|				ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработку)) 
		|		И Начисления.ВидРасчета = БазовыеВидыРасчета.ВидРасчета 
		|		И НЕ (Средняя.БазовыйПериодКонец < Начисления.ПериодДействияНачало ИЛИ Средняя.БазовыйПериодНачало > Начисления.ПериодДействияКонец) 
		| 		
		|	ГДЕ		Средняя.Авторасчет		
		|		И	Средняя.Регистратор = &Регистратор			
		|		И	Средняя.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработку)
		|								, ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска) )			
		| 		
		| 	СГРУППИРОВАТЬ ПО
		|   	Средняя.БазовыйПериодНачало,
		|   	Средняя.БазовыйПериодКонец
		| 		
		| 		
		|   // Данные календарным с вычетом праздников и невыходов
		|	ОбЪЕДИНИТЬ ВСЕ   
		|	ВЫБРАТЬ
		|		Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
		|		Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|	
		|		0	КАК ОтработаноДнейБаза,
		|		0	КАК ОтработаноЧасовБаза,
		|		0	КАК НормаДнейБаза,
		|		0	КАК НормаЧасовБаза,
		|    	СУММА(ВЫБОР КОГДА НЕ Начисления.Сторно ТОГДА       
       	|        Начисления.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия * "+Коэф+" 
      	|  		ИНАЧЕ
       	|        -Начисления.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия * "+Коэф+"
      	|   	КОНЕЦ)  КАК КалендарныеДниБаза
		|	
		|		ИЗ РегистрРасчета.РасчетСреднегоЗаработка КАК Средняя
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(
		|		Назначение = &парамСотрудник И ПериодДействияНачало <= &ПериодРасчетаСреднегоКонец И ПериодДействияКонец >= &ПериодРасчетаСреднегоНачало
		|		И ВидРасчета.ЗачетНормыВремени И ВидРасчета.ЗачетКалендарных
		|		И ВидРасчета В (ВЫБРАТЬ База.ВидРасчета ИЗ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК База ГДЕ База.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработку),ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска)))
		|		) КАК Начисления
		|	ПО		Начисления.ПериодДействияНачало <= Средняя.БазовыйПериодКонец  
		|		И	Начисления.ПериодДействияКонец >= Средняя.БазовыйПериодНачало  
		|
		|	ГДЕ		Средняя.Авторасчет		
		|		И	Средняя.Регистратор = &Регистратор			
		|		И	Средняя.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработку)			
		|									,ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска) )			
		| 
		|	СГРУППИРОВАТЬ ПО
		|		Средняя.БазовыйПериодНачало,
		|		Средняя.БазовыйПериодКонец
		| 
		|) КАК Средняя
		|СГРУППИРОВАТЬ ПО
		|	Средняя.БазовыйПериодНачало,
		|	Средняя.БазовыйПериодКонец
		|   
		|			
		|// записиси отредактированные пользователем			
		|ОБЪЕДИНИТЬ ВСЕ			
		|	ВЫБРАТЬ
		|		Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
		|		Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|
		|		Средняя.ОтработаноДней				КАК ОтработаноДней,
		|		Средняя.ОтработаноЧасов				КАК ОтработаноЧасов,
		|		Средняя.НормаДней					КАК НормаДней,
		|		Средняя.НормаЧасов					КАК НормаЧасов,
		|		Средняя.КалендарныеДни				КАК КалендарныеДни
		|
		|	ИЗ РегистрРасчета.РасчетСреднегоЗаработка КАК Средняя
		|			
		|	ГДЕ		НЕ Средняя.Авторасчет		
		|		И	Средняя.Регистратор = &Регистратор			
		|		И	Средняя.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработку)			
		|									,ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска) )			
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		
		Запрос.Выполнить();
		ТекстЗапросаВТПоВремени = "ВТПоВремени";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПоВремени";
	
	мНеУчитыватьСовместителейДляСредних = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).НеУчитыватьСовместителейДляСредних;
	
	ТекстЗапроса = " 
	|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|		Основной.НомерСтроки					КАК НомерСтроки,
	|		Основной.Авторасчет						КАК Авторасчет,
	|		Основной.ВидРасчета						КАК ВидРасчета,
	|		Основной.БазовыйПериодНачало			КАК БазовыйПериодНачало,
	|		Основной.БазовыйПериодКонец				КАК БазовыйПериодКонец,
	|		Основной.КоэффициентПовышенияОкладов	КАК КоэффициентПовышенияОкладов,
    |
	|		ВЫБОР КОГДА Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиям) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК УсловиеПремия,			
	|		ВЫБОР КОГДА Время.ОтработаноЧасовБаза < Время.НормаЧасовБаза ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК УсловиеМеньшеНормы, 
	|		ВЫБОР КОГДА Время.НормаЧасовБаза > 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК УсловиеБольшеНуля, 
	|       
	|		ВЫБОР	КОГДА	Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуска))			
	|						И	&ВидУчетаВремениДляСредней  = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимДням) 
	|						И	Время.ОтработаноДнейБаза < Время.НормаДнейБаза И Время.НормаДнейБаза > 0  
	|					ТОГДА	Основной.Результат * Время.ОтработаноДнейБаза / Время.НормаДнейБаза
	|				КОГДА	Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуска))			
	|						И	Время.ОтработаноЧасовБаза < Время.НормаЧасовБаза И Время.НормаЧасовБаза > 0  
	|					ТОГДА	Основной.Результат * Время.ОтработаноЧасовБаза / Время.НормаЧасовБаза
	|				ИНАЧЕ		Основной.Результат КОНЕЦ    
	|												КАК Результат,
	|           
	|		ВЫБОР	КОГДА	Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуска))			
	|						И	&ВидУчетаВремениДляСредней  = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимДням) 
	|						И	Время.ОтработаноЧасовБаза < Время.НормаДнейБаза И Время.НормаДнейБаза > 0  
	|					ТОГДА	1
	|				КОГДА	Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуска))			
	|						И	Время.ОтработаноЧасовБаза < Время.НормаЧасовБаза И Время.НормаЧасовБаза > 0  
	|					ТОГДА	2
	|				ИНАЧЕ		3 КОНЕЦ    
	|												КАК Результат1,
	|		Основной.РезультатПолный				КАК РезультатПолный,
	|           
	|		ВремяДляСредней.ОтработаноДнейБаза				КАК ОтработаноДней,
	|		ВремяДляСредней.ОтработаноЧасовБаза				КАК ОтработаноЧасов,
	|		ВремяДляСредней.НормаДнейБаза					КАК НормаДней,
	|		ВремяДляСредней.НормаЧасовБаза					КАК НормаЧасов,
	|		ВремяДляСредней.КалендарныеДниБаза				КАК КалендарныеДни
	|	ИЗ (
	|	ВЫБРАТЬ 
	|		Основной1.НомерСтроки				КАК НомерСтроки,
	|		Основной1.Авторасчет				КАК Авторасчет,
	|		Основной1.ВидРасчета				КАК ВидРасчета,
	|		Основной1.БазовыйПериодНачало		КАК БазовыйПериодНачало,
	|		Основной1.БазовыйПериодКонец		КАК БазовыйПериодКонец, 
	|		Основной1.КоэффициентПовышенияОкладов		КАК КоэффициентПовышенияОкладов, 
	|		СУММА(Основной1.Результат)			КАК Результат,
	|		СУММА(Основной1.РезультатПолный)	КАК РезультатПолный
	|		ИЗ (
	|		ВЫБРАТЬ 
	|			Средняя.НомерСтроки				КАК НомерСтроки,
	|			Средняя.Авторасчет				КАК Авторасчет,
	|			Средняя.ВидРасчета				КАК ВидРасчета,
	|			Средняя.БазовыйПериодНачало		КАК БазовыйПериодНачало,
	|			Средняя.БазовыйПериодКонец		КАК БазовыйПериодКонец, 
	|			Средняя.КоэффициентПовышенияОкладов	КАК КоэффициентПовышенияОкладов,
	|			ВЫБОР	КОГДА 	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиям)			
	|								ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиям)   
	|								ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямОтпуска)   
	|								ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуска)   
	|							ТОГДА	ВЫБОР	КОГДА Начисления.ВидРасчета.ЧислоМесяцев <= 1
	|											ТОГДА Начисления.Результат
	|											ИНАЧЕ 0 КОНЕЦ
	|						ИНАЧЕ Начисления.Результат КОНЕЦ
	|				*"+Коэф+"					КАК Результат,
	|			ВЫБОР	КОГДА 	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиям)			
	|								ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиям)   
	|								ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямОтпуска)   
	|								ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуска)   
	|							ТОГДА	ВЫБОР	КОГДА Начисления.ВидРасчета.ЧислоМесяцев <= 1
	|											ТОГДА Начисления.Результат
	|											ИНАЧЕ 0 КОНЕЦ
	|						ИНАЧЕ Начисления.Результат КОНЕЦ
	|				*"+Коэф+"					КАК РезультатПолный
	|		ИЗ РегистрРасчета.РасчетСреднегоЗаработка КАК Средняя     
	|  	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|		ПО		(Начисления.Сотрудник = &парамСотрудник ИЛИ Начисления.Сотрудник.ОсновноеНазначение = &парамСотрудник) 
	|			// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
	|			"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.Назначение.ОсновноеНазначение <> Начисления.Сотрудник","")+"
	|			И	Начисления.Организация = &парамОрганизация  
	|			И	Начисления.ПериодРегистрации <= &парамПериодРегистрации
	|			И	Начисления.ПериодДействияНачало <= Средняя.БазовыйПериодКонец
	|			И	Средняя.БазовыйПериодНачало <= Начисления.ПериодДействияКонец
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
	|		ПО		Средняя.ВидРасчета = БазовыеВидыРасчета.Ссылка  
	|			И	Начисления.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
	|  	
	|		ГДЕ		Средняя.Регистратор = &Регистратор  
	|			И	Средняя.Авторасчет И Средняя.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии)		
	|			
	|			
	|		//------------------------------------------------------------	
	|		// по премиям, которые учитываются полной суммой ОТПУСК			
	|		ОБЪЕДИНИТЬ ВСЕ	
	|		ВЫБРАТЬ
	|			Средняя.НомерСтроки					КАК НомерСтроки,
	|			Средняя.Авторасчет					КАК Авторасчет,
	|			Средняя.ВидРасчета               	КАК ВидРасчета,
	|			Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
	|			Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
	|			Средняя.КоэффициентПовышенияОкладов	КАК КоэффициентПовышенияОкладов,
	|			Начисления.Результат * "+КоэфПремии+"		КАК Результат,
	|			Начисления.Результат * "+КоэфПремии+"		КАК РезультатПолный
	|		ИЗ РегистрРасчета.РасчетСреднегоЗаработка КАК Средняя
	| 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|		ПО		Средняя.Сотрудник = Начисления.Сотрудник  
	|			// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
	|			"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.Назначение.ОсновноеНазначение <> Начисления.Сотрудник","")+"
	|			И	НАЧАЛОПЕРИОДА(Средняя.БазовыйПериодНачало, МЕСЯЦ) = Начисления.ПериодДействия	
	|			И	Начисления.ПериодРегистрации <= &парамПериодРегистрации
	|			И	Начисления.ВидРасчета.ЧислоМесяцев > 1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
	|		ПО		Средняя.ВидРасчета = БазовыеВидыРасчета.Ссылка  
	|			И	Начисления.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
	|			
	|		ГДЕ	Средняя.Авторасчет		
	|			И	Средняя.Регистратор = &Регистратор			
	|			И	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямОтпуска)			
	|			
	|		//------------------------------------------------------------	
	|		// по премиям, которые учитываются полной суммой СРЕДНЯЯ			
	|		ОБЪЕДИНИТЬ ВСЕ	
	|		ВЫБРАТЬ
	|			Средняя.НомерСтроки					КАК НомерСтроки,
	|			Средняя.Авторасчет					КАК Авторасчет,
	|			Средняя.ВидРасчета               	КАК ВидРасчета,
	|			Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
	|			Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
	|			Средняя.КоэффициентПовышенияОкладов	КАК КоэффициентПовышенияОкладов,
	|			Начисления.Результат/Начисления.ВидРасчета.ЧислоМесяцев *"+КоэфПремии+"		КАК Результат,
	|			Начисления.Результат/Начисления.ВидРасчета.ЧислоМесяцев *"+КоэфПремии+"		КАК РезультатПолный
	|		ИЗ РегистрРасчета.РасчетСреднегоЗаработка КАК Средняя
	| 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|		ПО		Средняя.Сотрудник = Начисления.Сотрудник  
	|			// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
	|			"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.Назначение.ОсновноеНазначение <> Начисления.Сотрудник","")+"
	|			И	Средняя.БазовыйПериодКонец		>=	Начисления.БазовыйПериодНачало	
	|			И	Начисления.БазовыйПериодКонец	>=	Средняя.БазовыйПериодНачало		
	|			И	Начисления.ПериодРегистрации <= &парамПериодРегистрации
	|			И	Начисления.ВидРасчета.ЧислоМесяцев > 1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
	|		ПО		Средняя.ВидРасчета = БазовыеВидыРасчета.Ссылка  
	|			И	Начисления.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
	|			
	|		ГДЕ	Средняя.Авторасчет		
	|			И	Средняя.Регистратор = &Регистратор			
	|			И	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиям)			
	|			
	|			
	|
	|		//------------------------------------------------------------	
	|		// по премиям, которые учитываются пропорционально отработанному времени ОТПУСК	
	|		ОБЪЕДИНИТЬ ВСЕ	
	|		ВЫБРАТЬ
	|			Средняя.НомерСтроки					КАК НомерСтроки,
	|			Средняя.Авторасчет					КАК Авторасчет,
	|			Средняя.ВидРасчета               	КАК ВидРасчета,
	|			Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
	|			Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
	|			Средняя.КоэффициентПовышенияОкладов	КАК КоэффициентПовышенияОкладов,
	|			Начисления.Результат/Начисления.ВидРасчета.ЧислоМесяцев * "+КоэфПремии+"		КАК Результат,
	|			Начисления.Результат/Начисления.ВидРасчета.ЧислоМесяцев * "+КоэфПремии+"		КАК РезультатПолный
	|		ИЗ РегистрРасчета.РасчетСреднегоЗаработка КАК Средняя
	| 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|		ПО		Средняя.Сотрудник = Начисления.Сотрудник  
	|			// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
	|			"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.Назначение.ОсновноеНазначение <> Начисления.Сотрудник","")+"
	|			И	НАЧАЛОПЕРИОДА(Средняя.БазовыйПериодНачало, МЕСЯЦ) = Начисления.ПериодДействия	
	|			И	Начисления.ПериодРегистрации <= &парамПериодРегистрации
	|			И	Начисления.ВидРасчета.ЧислоМесяцев > 1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
	|		ПО		Средняя.ВидРасчета = БазовыеВидыРасчета.Ссылка  
	|			И	Начисления.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
	|			
	|		ГДЕ		Средняя.Авторасчет		
	|			И	Средняя.Регистратор = &Регистратор			
	|			И	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиямОтпуска)			
	|			
	|			
	|		//------------------------------------------------------------	
	|		// по премиям, которые учитываются пропорционально отработанному времени СРЕДНЯЯ		
	|		ОБЪЕДИНИТЬ ВСЕ	
	|		ВЫБРАТЬ
	|			Средняя.НомерСтроки					КАК НомерСтроки,
	|			Средняя.Авторасчет					КАК Авторасчет,
	|			Средняя.ВидРасчета               	КАК ВидРасчета,
	|			Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
	|			Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
	|			Средняя.КоэффициентПовышенияОкладов	КАК КоэффициентПовышенияОкладов,
	|			Начисления.Результат/Начисления.ВидРасчета.ЧислоМесяцев *"+КоэфПремии+"		КАК Результат,
	|			Начисления.Результат/Начисления.ВидРасчета.ЧислоМесяцев *"+КоэфПремии+"		КАК РезультатПолный
	|		ИЗ РегистрРасчета.РасчетСреднегоЗаработка КАК Средняя
	| 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|		ПО		Средняя.Сотрудник = Начисления.Сотрудник  
	|			// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
	|			"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.Назначение.ОсновноеНазначение <> Начисления.Сотрудник","")+"
	|			И	Средняя.БазовыйПериодКонец		>=	Начисления.БазовыйПериодНачало	
	|			И	Начисления.БазовыйПериодКонец	>=	Средняя.БазовыйПериодНачало		
	|			И	Начисления.ПериодРегистрации <= &парамПериодРегистрации
	|			И	Начисления.ВидРасчета.ЧислоМесяцев > 1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
	|		ПО		Средняя.ВидРасчета = БазовыеВидыРасчета.Ссылка  
	|			И	Начисления.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
	|			
	|		ГДЕ		Средняя.Авторасчет		
	|			И	Средняя.Регистратор = &Регистратор			
	|			И	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоФиксПремиям)			
	|			
	|
	|			
	|		//------------------------------------------------------------	
	|		// записиси отредактированные пользователем	или годовая премия		
	|		ОБЪЕДИНИТЬ ВСЕ	
	|		ВЫБРАТЬ
	|			Средняя.НомерСтроки				КАК НомерСтроки,
	|			Средняя.Авторасчет				КАК Авторасчет,
	|			Средняя.ВидРасчета				КАК ВидРасчета,
	|			Средняя.БазовыйПериодНачало		КАК БазовыйПериодНачало,
	|			Средняя.БазовыйПериодКонец		КАК БазовыйПериодКонец,
	|			Средняя.КоэффициентПовышенияОкладов	КАК КоэффициентПовышенияОкладов,
	|			ВЫБОР	КОГДА 	НЕ Средняя.Авторасчет   
	|							ТОГДА	Средняя.Результат
	|						КОГДА 	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии)			
	|							ТОГДА (Средняя.Регистратор.ГодоваяПремия/12)*("+КоэфПремии+")
	|						ИНАЧЕ 0 КОНЕЦ
	|				КАК Результат,
	|			ВЫБОР	КОГДА 	НЕ Средняя.Авторасчет   
	|							ТОГДА	Средняя.РезультатПолный
	|						КОГДА 	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии)			
	|							ТОГДА Средняя.Регистратор.ГодоваяПремия*("+КоэфПремии+")
	|						ИНАЧЕ 0 КОНЕЦ
	|				КАК РезультатПолный
	|		ИЗ РегистрРасчета.РасчетСреднегоЗаработка КАК Средняя
	|		ГДЕ		Средняя.Регистратор = &Регистратор			
	|			И	(НЕ Средняя.Авторасчет		
	|			ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоГодовойПремии) )		
	|	) КАК Основной1		
	|	СГРУППИРОВАТЬ ПО 
	|		Основной1.НомерСтроки,
	|		Основной1.Авторасчет,
	|		Основной1.ВидРасчета,
	|		Основной1.БазовыйПериодНачало,
	|		Основной1.БазовыйПериодКонец,	 
	|		Основной1.КоэффициентПовышенияОкладов	
	|	) КАК Основной		
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПоВремени КАК Время			
	|	ПО	Время.БазовыйПериодНачало = Основной.БазовыйПериодНачало		
	|			
	|	// Чтобы не писать в каждой строке условие, сделаем левое соединение по этому условию		
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПоВремени КАК ВремяДляСредней			
	|	ПО	ВремяДляСредней.БазовыйПериодНачало = Основной.БазовыйПериодНачало		
	|		И	(Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработку)			
	|		ИЛИ	Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуДляОтпуска) )			
	|			
	|УПОРЯДОЧИТЬ ПО           
	|  Основной.НомерСтроки УБЫВ         
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Получает Сумму оклада за месяц и нормы времени и календарные дни
// 		в случае необходимости оклад перерасчитывается в месячный
//
Функция ПолучитьПараметыОклада( мДатаНачала, Сотрудник, ПериодРасчетаСреднегоНачало= Неопределено, ПериодРасчетаСреднегоКонец = Неопределено, ДляДекретных = Ложь  ) Экспорт
	
	ВалютаРегл = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамСотрудник",	Сотрудник);
	Запрос.УстановитьПараметр("парамПериод",	мДатаНачала);
	Запрос.УстановитьПараметр("парамНеопределено",	Неопределено);
	Если ПериодРасчетаСреднегоНачало= Неопределено Тогда
		АнализируемМесяцы = Ложь;
		Запрос.УстановитьПараметр("КвоМесяцев",	12);
		
	Иначе
		Начало = ПериодРасчетаСреднегоНачало;
		Конец = ПериодРасчетаСреднегоКонец;
		Если НачалоМесяца(Начало) = Начало И НачалоДня(КонецМесяца(Конец)) = Конец Тогда
			АнализируемМесяцы = Истина;
			Начало = НачалоМесяца(ПериодРасчетаСреднегоНачало);
			Конец = КонецМесяца(ПериодРасчетаСреднегоКонец);
			КвоМесяцев = (Год(Конец)-Год(Начало))*12+ Месяц(Конец)-Месяц(Начало)+1;
			Запрос.УстановитьПараметр("КвоМесяцев",	КвоМесяцев);
			Запрос.УстановитьПараметр("парамНачало",	Начало);
			Запрос.УстановитьПараметр("парамКонец",	Конец);
		ИначеЕсли Начало = Конец Тогда
			// заболел в первый день работы, анализируем график за предыдущие 6 месяцев
			АнализируемМесяцы = Истина;
			КвоМесяцев = 6;
			Конец = КонецМесяца(ДобавитьМесяц(ПериодРасчетаСреднегоКонец,-1));
			Начало = НачалоМесяца(ДобавитьМесяц(Конец, - КвоМесяцев));
			Запрос.УстановитьПараметр("КвоМесяцев",	КвоМесяцев);
			Запрос.УстановитьПараметр("парамНачало",Начало);
			Запрос.УстановитьПараметр("парамКонец",	Конец);
		Иначе	
			// если не целый период (не целые месяцы) то анализируем год
			АнализируемМесяцы = Ложь;
			Запрос.УстановитьПараметр("КвоМесяцев",	12);
		КонецЕсли;
		//Если НачалоМесяца(Начало) <> Начало ИЛИ НачалоДня(КонецМесяца(Конец)) <> Конец Тогда
		//	// если не целый период (не целые месяцы) то анализируем год
		//	АнализируемМесяцы = Ложь;
		//	Запрос.УстановитьПараметр("КвоМесяцев",	12);
		//Иначе	
		//	АнализируемМесяцы = Истина;
		//	Начало = НачалоМесяца(ПериодРасчетаСреднегоНачало);
		//	Конец = КонецМесяца(ПериодРасчетаСреднегоКонец);
		//	КвоМесяцев = (Год(Конец)-Год(Начало))*12+ Месяц(Конец)-Месяц(Начало)+1;
		//	Запрос.УстановитьПараметр("КвоМесяцев",	КвоМесяцев);
		//	Запрос.УстановитьПараметр("парамНачало",	Начало);
		//	Запрос.УстановитьПараметр("парамКонец",	Конец);
		//КонецЕсли;
		
	КонецЕсли;
	
	//	ВТДанныеГрафика
	Если Истина Тогда
		//	Описание:
		// 		График и норма за месяц дней, часов и календарных дней
		//
		ТекстЗапросаВТ = "
	  	|ВЫБРАТЬ 
	  	|	ВсеГрафики.ГрафикРаботы    	КАК ГрафикРаботы,
	  	|	СУММА(ВсеГрафики.НормаДнейЗаРабочийМесяц)	КАК НормаДнейЗаРабочийМесяц,
	  	|	СУММА(ВсеГрафики.НормаЧасовЗаРабочийМесяц)	КАК НормаЧасовЗаРабочийМесяц,
	  	|	СУММА(ВсеГрафики.НормаДней)					КАК НормаДней,
	  	|	СУММА(ВсеГрафики.НормаЧасов)				КАК НормаЧасов,
	  	|	СУММА(ВсеГрафики.КалендарныеДни)			КАК КалендарныеДни
		|ПОМЕСТИТЬ ВТДанныеГрафика	
	  	|	ИЗ ( 
	  	|	ВЫБРАТЬ 
	  	|		Работники.ГрафикРаботы    	КАК ГрафикРаботы,
	  	|		0			КАК НормаДнейЗаРабочийМесяц,
	  	|		0			КАК НормаЧасовЗаРабочийМесяц,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение)			КАК НормаДней,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение)	КАК НормаЧасов,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ПроизводственныйКалендарьКалендарныеДни)	КАК КалендарныеДни
	  	|	ИЗ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамПериод, Сотрудник = &парамСотрудник) КАК Работники 
	  	|		   
	  	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	  	|	ПО	" + ?(АнализируемМесяцы,"	ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &парамНачало И &парамКонец"
	  			,"	ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&парамПериод, ГОД) И КОНЕЦПЕРИОДА(&парамПериод, ГОД)") + "
	  	|		И	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = Работники.ГрафикРаботы
	  	|		И	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	  	|	СГРУППИРОВАТЬ ПО 
	  	|		Работники.ГрафикРаботы
	  	|		   
	  	|		   
	  	|	ОБЪЕДИНИТЬ ВСЕ	   
	  	|	ВЫБРАТЬ 
	  	|		Работники.ГрафикРаботы    	КАК ГрафикРаботы,
	  	|		СУММА(ГрафикиРаботыЗаРабочийМесяц.ОсновноеЗначение)			КАК НормаДнейЗаРабочийМесяц,
	  	|		СУММА(ГрафикиРаботыЗаРабочийМесяц.ДополнительноеЗначение)	КАК НормаЧасовЗаРабочийМесяц,
	  	|		0	КАК НормаДней,
	  	|		0	КАК НормаЧасов,
	  	|		0	КАК КалендарныеДни
	  	|	ИЗ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамПериод, Сотрудник = &парамСотрудник) КАК Работники 
	  	|		   
	  	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыЗаРабочийМесяц
	  	|	ПО		ГрафикиРаботыЗаРабочийМесяц.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&парамПериод, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамПериод, МЕСЯЦ)
	  	|		И	ГрафикиРаботыЗаРабочийМесяц.ГрафикРаботы = Работники.ГрафикРаботы
	  	|		И	ГрафикиРаботыЗаРабочийМесяц.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	  	|	СГРУППИРОВАТЬ ПО 
	  	|		Работники.ГрафикРаботы
	  	|) КАК ВсеГрафики		   
	  	|СГРУППИРОВАТЬ ПО 
	  	|	ВсеГрафики.ГрафикРаботы
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТДанныеГрафика = "ВТДанныеГрафика";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДанныеГрафика";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	Начисления.ВидРасчета	КАК ВидРасчета,
	|	Начисления.Показатель1	КАК ОкладТариф,
	|	Начисления.Валюта1	КАК Валюта,
	|	Графики.ГрафикРаботы	КАК ГрафикРаботы,
	|	Графики.НормаДнейЗаРабочийМесяц		КАК НормаДнейЗаРабочийМесяц,
	|	Графики.НормаЧасовЗаРабочийМесяц	КАК НормаЧасовЗаРабочийМесяц,
	|	Графики.НормаДней/&КвоМесяцев		КАК НормаДней,
	|	Графики.НормаЧасов/&КвоМесяцев		КАК НормаЧасов,
	|	Графики.КалендарныеДни/&КвоМесяцев	КАК КалендарныеДни
	|	
    |ИЗ ( 
    |	ВЫБРАТЬ 
    |      Плановые.Сотрудник,
    |      Плановые.ВидРасчета,
    |      ВЫБОР КОГДА НЕ Плановые.ВидРасчета.ТребуетВводаТарифногоРазряда
	|		ТОГДА Плановые1.Показатель1
	|		ИНАЧЕ РазмерТарифныхСтавок.Размер
	|	   КОНЕЦ	КАК Показатель1,
    |      ВЫБОР КОГДА НЕ Плановые.ВидРасчета.ТребуетВводаТарифногоРазряда
	|		ТОГДА Плановые1.Валюта1
	|		ИНАЧЕ РазмерТарифныхСтавок.Валюта
	|	   КОНЕЦ	КАК Валюта1
    |   ИЗ (
    |		ВЫБРАТЬ 
    |			Плановые.Сотрудник,
    |			Плановые.ВидРасчета,
    |			МАКСИМУМ(Плановые.Период) КАК Период
    |		ИЗ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Плановые
  	|		ГДЕ		Плановые.Сотрудник = &парамСотрудник 
	|			И	Плановые.ВидРасчетаИзмерение <> Плановые.ВидРасчета  
	|			И	Плановые.Период <= &парамПериод  
	|			И	Плановые.Актуальность  
    |		СГРУППИРОВАТЬ ПО 
    |			Плановые.Сотрудник,
    |			Плановые.ВидРасчета
	|		) КАК Плановые
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Плановые1
  	|		ПО		Плановые1.Сотрудник = &парамСотрудник 
	|			И	Плановые1.ВидРасчетаИзмерение <> Плановые1.ВидРасчета  
	|			И	Плановые1.Актуальность  
	|			И	Плановые1.Период = Плановые.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамПериод) КАК РазмерТарифныхСтавок
  	|		ПО		Плановые.ВидРасчета.ТребуетВводаТарифногоРазряда 
	|			И	Плановые1.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд  
	|	) КАК Начисления
    | 
	| ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДанныеГрафика + " КАК Графики
	| ПО	ИСТИНА
	|
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	ПараметрыОклада = Новый Соответствие;
	ПараметрыОклада.Вставить("Оклад",		0);
	ПараметрыОклада.Вставить("НормаДней",	0);
	ПараметрыОклада.Вставить("НормаЧасов",	0);
	ПараметрыОклада.Вставить("КалендарныеДни",	0);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОкладЗаМесяц = Выборка.ОкладТариф;
		// если оклад ввиде тарифа за день или за час приведем его к сумме за месяц
		Если Выборка.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
			ОкладЗаМесяц = ОкладЗаМесяц*Окр(Выборка.НормаДнейЗаРабочийМесяц,2);
		ИначеЕсли Выборка.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
			ОкладЗаМесяц = ОкладЗаМесяц*Окр(Выборка.НормаЧасовЗаРабочийМесяц);
		КонецЕсли;
		//Пересчет валюты
		Если НЕ ЗначениеЗаполнено(Выборка.Валюта) ИЛИ Выборка.Валюта = ВалютаРегл Тогда
			ПараметрыОклада["Оклад"] = ОкладЗаМесяц;
		Иначе
			Структура = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.ПолучитьПоследнее(мДатаНачала, Новый Структура("Валюта", Выборка.Валюта));
			КурсВылюты = Структура.Курс;
			КратностьВылюты = Структура.Кратность;
			СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОкладЗаМесяц,Выборка.Валюта,ВалютаРегл,
								КурсВылюты, 1, КратностьВылюты, 1);
			ПараметрыОклада["Оклад"] = СуммаРегл;					
		КонецЕсли;	
		ПараметрыОклада["НормаДней"] = Выборка.НормаДней;
		ПараметрыОклада["НормаЧасов"] = Выборка.НормаЧасов;
		ПараметрыОклада["КалендарныеДни"] = ?(ДляДекретных, 30.44, Выборка.КалендарныеДни);;
	КонецЕсли;
	
	Возврат ПараметрыОклада;
КонецФункции



//////////////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ И ФУНКЦИИ, связанные с расчетом НДФЛ

// Проверяет необходимость выполнения перерасчета документа
// если в таблицах перерасчета по документу ссылка, на который передана 
// есть хоть одна запись - возвращает Истина
// Параметры:
//  Регистратор - ссылка на документ
// Возвращаемое значение:
//  булево
//
Функция НеобходимостьПерерасчета(Регистратор) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Перерасчет.Сотрудник КАК Сотрудник
	|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
	|ГДЕ Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|	
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Перерасчет.Сотрудник КАК Сотрудник
	|ИЗ РегистрСведений.ЗаполнениеПлановыхНачислений КАК Перерасчет
	|ГДЕ Перерасчет.ОбъектЗаполнения = &парамРегистратор
	|	
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Перерасчет.Сотрудник КАК Сотрудник
	|ИЗ РегистрРасчета.РасчетСреднегоЗаработка.ПерерасчетСреднегоЗаработка КАК Перерасчет
	|ГДЕ Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|	
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Перерасчет.Сотрудник КАК Сотрудник
	|ИЗ РегистрРасчета.ВзносыВФонды.ПерерасчетВзносовВФонды КАК Перерасчет
	|ГДЕ Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|");
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Если Запрос.Выполнить().Пустой() Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции  // НеобходимостьПерерасчета

// Проверяет правильность заполнения реквизитов вида расчета 
// для некоторых случаев выдает сообщение об ошибке
// для некоторых - возвращает текст сообщения
// 	Параметры:
//		ВидРасчета - объект Вид расчета
//		Отказ - признак отказа (проверка не прошла)
//	Возвращаемое значение:
//		ТекстСообщения - текст сообщения о результате проверки
Функция ПроверитьНастройкуВидаРасчета(ВидРасчета, Отказ, ПроверятьСоответствиеБазовыхИВедущихРасчетов = Истина) Экспорт
	
	МетаданныеВидаРасчета = ВидРасчета.Метаданные();
	
	Если Не ЗначениеЗаполнено(ВидРасчета.Наименование) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо задать имя расчета!", Отказ);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ВидРасчета.Код) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо задать код расчета!", Отказ);
	КонецЕсли; 
	
	СпособРасчета = ВидРасчета.СпособРасчета;
	Если  Не ЗначениеЗаполнено(СпособРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо задать способ расчета!", Отказ);
	КонецЕсли; 
	
	ЕстьРеквизитКатегорияРасчета = МетаданныеВидаРасчета.Реквизиты.Найти("КатегорияРасчета") <> НеОпределено;
	Если ЕстьРеквизитКатегорияРасчета и Не ЗначениеЗаполнено(ВидРасчета.КатегорияРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо задать категорию начислений!", Отказ);
	КонецЕсли; 
	
	// Вид расчета не может входить в собственную базу
	ВидРасчетаСсылка = ВидРасчета.Ссылка;
	
	// рассчитываем на то, что данная функция вызывается для видов расчета с поддержкой базового периода
	Если ВидРасчета.БазовыеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  НеОпределено 
		И НЕ ВидРасчета.Предопределенный
		Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Вид расчета не может быть включен в состав собственной расчетной базы!", Отказ);
	КонецЕсли;
	
	Если ВидРасчета.ВедущиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  НеОпределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Вид расчета не может быть включен в состав собственной таблицы ведущих видов расчета!", Отказ);
	КонецЕсли;
	
	// если поддерживается период действия
	Если МетаданныеВидаРасчета.ИспользованиеПериодаДействия Тогда
		Если ВидРасчета.ВытесняющиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  НеОпределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Вид расчета не может быть включен в состав собственной таблицы вытесняющих видов расчета!", Отказ);
		КонецЕсли;
	КонецЕсли;
	Если Отказ Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстСообщения = "";
	// Проверим значение реквизита "Категория начисления"
	Если ЕстьРеквизитКатегорияРасчета Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыРасчета.ВидРасчета.КатегорияРасчета,
		|	ВидыРасчета.ВидРасчета.Наименование,
		|	ВидыРасчета.ВидРасчета.Ссылка
		|ИЗ
		|	ПланВидовРасчета."+МетаданныеВидаРасчета.Имя+".БазовыеВидыРасчета КАК ВидыРасчета
		|
		|ГДЕ
		|	ВидыРасчета.Ссылка = &парамТекущийВидРасчета");
		
		
		Запрос.УстановитьПараметр("парамТекущийВидРасчета", ВидРасчетаСсылка);
		Категории = Запрос.Выполнить().Выгрузить();
		
		// Определение максимальной категории среди видов расчета, входящих в базу
		МаксимальныйИндексКатегории = -1;
		Для Каждого БазовыйРасчет Из Категории Цикл
			Если БазовыйРасчет.Наименование = Null Тогда
				Продолжить;
			КонецЕсли; 
			Если БазовыйРасчет.КатегорияРасчета = Перечисления.КатегорииРасчетов.ПустаяСсылка() Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(БазовыйРасчет.Ссылка) = ТипЗнч(ВидРасчетаСсылка) Тогда
				ИндексКатегории = Перечисления.КатегорииРасчетов.Индекс(БазовыйРасчет.КатегорияРасчета);
				МаксимальныйИндексКатегории = Макс(МаксимальныйИндексКатегории, ИндексКатегории);
			КонецЕсли;
			
		КонецЦикла;  
		
		Если МаксимальныйИндексКатегории = Перечисления.КатегорииРасчетов.Количество()-1 Тогда
			
			// В базе расчетов есть расчеты с максимальной категорией
			ТекстСообщения = "Откорректируйте состав базовых видов расчетов. В базу расчетов не должны входить расчеты с категорией начислений ""Зависимое третьего уровня""!.";
			
		Иначе
			// Категория начислений вида расчета должна быть на уровень выше любого из видов расчетов, составляющих базу расчета
			Если МаксимальныйИндексКатегории = -1 Тогда
				МаксимальнаяКатегорияБазы = Перечисления.КатегорииРасчетов.ПустаяСсылка();
			Иначе
				МаксимальнаяКатегорияБазы = Перечисления.КатегорииРасчетов.Получить(МаксимальныйИндексКатегории);
			КонецЕсли;
			ИндексВыбраннойКатегории = Перечисления.КатегорииРасчетов.Индекс(ВидРасчета.КатегорияРасчета);
			ОжидаемаяКатегория = Перечисления.КатегорииРасчетов.Получить(МаксимальныйИндексКатегории +1);
			
			Если ИндексВыбраннойКатегории <= МаксимальныйИндексКатегории Тогда
				// Пользователь установил категорию меньше чем самая максимальная категория базы расчетов
				ТекстСообщения = "Неверно установлена категория начислений. В базу расчетов входят расчеты с категорией """ + МаксимальнаяКатегорияБазы + """. Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """!";
			ИначеЕсли ИндексВыбраннойКатегории > МаксимальныйИндексКатегории +1 тогда
				// Категория слишком большая - предупредим
				Если МаксимальныйИндексКатегории = -1 Тогда  // нет в базе ничего
					ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. для вида расчета не заданы базовые начисления или для базовых начислений не заданы категории начисления!";
				Иначе
					ТекстСообщения = "Рекомендуется установить категорию начислений """ + ОжидаемаяКатегория + """, т.к. максимальной категорией среди базовых расчетов является категория """ + МаксимальнаяКатегорияБазы + """!";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// Проверим соответствие списков базовых и ведущих расчетов
	Если ПроверятьСоответствиеБазовыхИВедущихРасчетов Тогда
		Для Каждого СтрокаБазовыйРасчет из ВидРасчета.БазовыеВидыРасчета Цикл
			
			Если СтрокаБазовыйРасчет.ВидРасчета = Неопределено Тогда
				ТекстСообщения = ТекстСообщения + ?(Не ЗначениеЗаполнено(ТекстСообщения),"",Символы.ПС) + "В строке " + СтрокаБазовыйРасчет.НомерСтроки + " базовых видов расчета не указан вид расчета!";
				Продолжить
			КонецЕсли;
			
			Если СтрокаБазовыйРасчет.ВидРасчета.Ссылка = Неопределено Тогда
				ТекстСообщения = ТекстСообщения + ?(Не ЗначениеЗаполнено(ТекстСообщения),"",Символы.ПС) + "В строке " + СтрокаБазовыйРасчет.НомерСтроки + " базовых видов расчета не указан вид расчета!"
			Иначе
				
				Если ВидРасчета.ВедущиеВидыРасчета.Найти(СтрокаБазовыйРасчет.ВидРасчета,"ВидРасчета") = Неопределено Тогда
					ТекстСообщения = ТекстСообщения + ?(Не ЗначениеЗаполнено(ТекстСообщения),"",Символы.ПС) + "Список ведущих видов расчета отличается от списка базовых расчетов. В списке нет расчета """+СтрокаБазовыйРасчет.ВидРасчета+"""!";
					Прервать;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат ТекстСообщения;
	
КонецФункции // ПроверитьНастройкуВидаРасчета

// Возвращает список категорий начислений, доступных для способа расчета
Функция ПолучитьСписокКатегорийНачисленийСпособаРасчета(СпособРасчета) Экспорт
	
	СписокКатегорий = Новый СписокЗначений;	
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом  Тогда
		СписокКатегорий.Добавить(Перечисления.КатегорииРасчетов.ЗависимоеПервогоУровня);
		СписокКатегорий.Добавить(Перечисления.КатегорииРасчетов.ЗависимоеВторогоУровня);
		СписокКатегорий.Добавить(Перечисления.КатегорииРасчетов.ЗависимоеТретьегоУровня);
	Иначе//СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой
		СписокКатегорий.Добавить(Перечисления.КатегорииРасчетов.Первичное);
	КонецЕсли; 
	
	Возврат СписокКатегорий;
	
КонецФункции // ПолучитьСписокКатегорийНачисленийСпособаРасчета()

// Возвращает вид учета времени в зависимости от вида расчета и вида графика 
Функция ПолучитьВидУчетаВремени(СпособРасчета, ВидВремени, СуммированныйУчетРабочегоВремени = Ложь, ВидУчетаВремениДляСредней = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СуммированныйУчетРабочегоВремени) Тогда
		СуммированныйУчетРабочегоВремениЛок = Ложь;
	Иначе
		СуммированныйУчетРабочегоВремениЛок = СуммированныйУчетРабочегоВремени;
	КонецЕсли;	
	
	// вид учета времени определяется по способу расчета
	
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
		или ЗначениеЗаполнено(ВидВремени) И (ВидВремени = Перечисления.ВидыВремени.ЧасовоеНеотработанное 
		или ВидВремени = Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы) Тогда
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
			
	ИначеЕсли СуммированныйУчетРабочегоВремениЛок и (СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС) Тогда 
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		
	ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам и (СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС) Тогда 
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;	
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда	
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
		
	Иначе
		
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		
	КонецЕсли;
	
	Возврат ВидУчетаВремени;
КонецФункции

// Возвращает список начислений для использования при предварительном расчете
//
Функция ПолучитьСписокНачисленийДляПредварительногоРасчета() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета,
	               |	ОсновныеНачисленияОрганизаций.ВидВремени,
	               |	НачисленияДляПредварительногоРасчета.ВидРасчета КАК ВидРасчета1
	               |ИЗ
	               |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачисленияДляПредварительногоРасчета КАК НачисленияДляПредварительногоРасчета
	               |		ПО НачисленияДляПредварительногоРасчета.ВидРасчета = ОсновныеНачисленияОрганизаций.Ссылка
	               |ГДЕ
	               |	(ОсновныеНачисленияОрганизаций.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
	               |		ИЛИ ОсновныеНачисленияОрганизаций.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы)
				   |		ИЛИ НЕ (НачисленияДляПредварительногоРасчета.ВидРасчета ЕСТЬ NULL))";
				   
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"); 
	
КонецФункции	

// рассчитываем сумму за работу в документах сдельной выработки
//
// Параметры
//  ТекущиеДанные - данные строки т.ч. Выработка
//  РассчитыватьСуммуЗаРаботуВВалютеРасценки - булево, флажок пересчета суммы в валюте расценки
//
Процедура РассчитатьСуммуЗаРаботу(ОтражатьВБухгалтерскомУчете, ОтражатьВУправленческомУчете, ТекущиеДанные, Дата, ВалютаРегламентированногоУчета, ВалютаУпрУчета, КурсВалютыУпрУчета, КратностьВалютыУпрУчета, РассчитыватьСуммуЗаРаботуВВалютеРасценки = Истина) Экспорт

	Если РассчитыватьСуммуЗаРаботуВВалютеРасценки Тогда
		ТекущиеДанные.СуммаЗаРаботуВВалютеРасценки = ТекущиеДанные.Расценка * ТекущиеДанные.Количество;
	КонецЕсли;
	
	Если ТекущиеДанные.Валюта = ВалютаРегламентированногоУчета Тогда
		КурсВылютыРасценки = 1;
		КратностьВылютыРасценки = 1;
	ИначеЕсли ТекущиеДанные.Валюта = ВалютаУпрУчета Тогда	
		КурсВылютыРасценки = КурсВалютыУпрУчета;
		КратностьВылютыРасценки = КратностьВалютыУпрУчета;
	Иначе	
		Структура = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ТекущиеДанные.Валюта));
		КурсВылютыРасценки = Структура.Курс;
		КратностьВылютыРасценки = Структура.Кратность;
	КонецЕсли; 
	
	Если ОтражатьВУправленческомУчете Тогда
		ТекущиеДанные.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаЗаРаботуВВалютеРасценки,ТекущиеДанные.Валюта,ВалютаУпрУчета,
								КурсВылютыРасценки, КурсВалютыУпрУчета, КратностьВылютыРасценки, КратностьВалютыУпрУчета);
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете Тогда
		ТекущиеДанные.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаЗаРаботуВВалютеРасценки,ТекущиеДанные.Валюта,ВалютаРегламентированногоУчета,
								КурсВылютыРасценки, 1, КратностьВылютыРасценки, 1);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуЗаРаботу()


Функция ПолучитьСтавкуНДФЛ(Дата, ВидСтавки) Экспорт
	ТекстЗапроса="ВЫБРАТЬ
	|	СтавкиНДФЛ.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СтавкиНДФЛ.СрезПоследних(&Дт, ВидСтавки=&ВидСтавки) КАК СтавкиНДФЛ";
	
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дт", Дата);
	Запрос.УстановитьПараметр("ВидСтавки", ВидСтавки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ставка;
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОПИСЫВАЮТ СВЯЗИ ПРЕДОПРЕДЕЛЕННЫХ ВИДОВ РАСЧЕТА И СПОСОБОВ ИХ РАСЧЕТА

// Возвращает способ расчета для указанного вида расчета
//
// Параметры
//  ВидРасчета  – ПланыВыидовРасчета.ОсновныеНачисленияОрганизаций.Ссылка – вид расчета
// Возвращаемое значение:
//   Перечисления.СпособыРасчетаОплатыТруда.Ссылка   – <описание возвращаемого значения>
Функция ПолучитьСпособРасчетаОтВидаРасчета(ВидРасчета) Экспорт
	
	// ОРГАНИЗАЦИОННЫЕ НАЧИСЛЕНИЯ
	Если ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням Тогда
		Возврат  Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням; 
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоЧасам Тогда
		Возврат  Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам; 
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифДневной Тогда
		Возврат  Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке; 
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой Тогда
		Возврат  Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке; 
	ИначеЕсли ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата Тогда
		Возврат Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок; 
	Иначе
		Возврат Перечисления.СпособыРасчетаОплатыТруда.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции 

//Возвращает вид расчета по организации для указанного способа расчета
//
// Параметры
//   СпособРасчета - Перечисления.СпособыРасчетаОплатыТруда.Ссылка   – <описание возвращаемого значения>
// Возвращаемое значение:
//  ПланыВыидовРасчета.ОсновныеНачисленияОрганизаций.Ссылка – вид расчета
Функция ПолучитьВидРасчетаОрганизацииОтСпособаРасчета(СпособРасчета) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.СпособРасчета = &СпособРасчета И
	|	(НЕ(ОсновныеНачисленияОрганизаций.Предопределенный))");
	
	Запрос.УстановитьПараметр("СпособРасчета",СпособРасчета);						  
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Если Выборка.Количество() = 0 Тогда
		
		Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням  Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоЧасам
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифДневной
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата
		Иначе
			Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПолучитьВидРасчетаОрганизацииОтСпособаРасчета()

//Возвращает вид расчета для указанного способа расчета
//
// Параметры
//   СпособРасчета - Перечисления.СпособыРасчетаОплатыТруда.Ссылка   – <описание возвращаемого значения>
// Возвращаемое значение:
//  ПланыВыидовРасчета.ОсновныеНачисленияОрганизаций.Ссылка – вид расчета
Функция ПолучитьВидРасчетаОтСпособаРасчета(СпособРасчета) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	УправленческиеНачисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.УправленческиеНачисления КАК УправленческиеНачисления
	|
	|ГДЕ
	|	УправленческиеНачисления.СпособРасчета = &СпособРасчета");
	
	Запрос.УстановитьПараметр("СпособРасчета",СпособРасчета);						  
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка
	Иначе
		Возврат ПланыВидовРасчета.УправленческиеНачисления.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПолучитьВидРасчетаОтСпособаРасчета()

// Процедура получает курс валюты упр.учета для целей расчетов с персоналом 
// и валюту упр.учета
// Параметры:
//		ДатаКурса
//		ВалютаУпрУчета - в параметр будет передана ссылка на валюту
//		КурсВалютыУпрУчета - в параметр будет передан курс
//		ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ПолучитьКурсВалютыУпрУчета(ДатаКурса, ВалютаУпрУчета, КурсВалютыУпрУчета, ВалютаРегламентированногоУчета) Экспорт
	ВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	Если ВалютаРегламентированногоУчета = ВалютаУпрУчета Тогда
		КурсВалютыУпрУчета = 1;
	Иначе
		Отбор = Новый Структура("Валюта", ВалютаУпрУчета);
		СведенияОКурсе = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.СрезПоследних( НачалоМесяца(ДатаКурса), Отбор );
		
		Если СведенияОКурсе.Количество() = 0 Тогда
		    КурсВалютыУпрУчета = 0;
			Сообщить("Внимание! Для валюты " + ВалютаУпрУчета + " на дату "+ ДатаКурса + " не определен курс!");
			Возврат;
		КонецЕсли; 
		
		КурсВалютыУпрУчета = СведенияОКурсе[0].Курс / СведенияОКурсе[0].Кратность;
	КонецЕсли;
КонецПроцедуры	// ПолучитьКурсВалютыУпрУчета

// Разбивает строку таблицы начислений на помесячные записи (длиной не более месяца)
// Параметры:
//		СтрокаНачислений - строка таблицы начислений, которую следует разбить
//		ТаблицаНачислений - таблица начислений, имеющая 2 обязательные колонки: ДатаНачала и  ДатаОкончания
Процедура РазбитьСтрокуНачисленийНаПомесячныеЗаписи(СтрокаНачислений, ТаблицаНачислений) Экспорт
	
	НачалоПериода = СтрокаНачислений["ДатаНачала"];
	КонецПериода = СтрокаНачислений["ДатаОкончания"];
	
	Если НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) ИЛИ КонецПериода < НачалоПериода Тогда
		Возврат;// разбивать не надо
	КонецЕсли; 
	
	РазницаВМесяцах = (Год(КонецПериода)*12 + Месяц(КонецПериода)) - (Год(НачалоПериода)*12 + Месяц(НачалоПериода));
	
	// У первоначальной строки дату конца установим в конец первого месяца
	СтрокаНачислений["ДатаОкончания"] = КонецМесяца(НачалоПериода);	
	
	ОчередноеНачалоМесяца = НачалоМесяца(НачалоПериода);
	Для Счетчик = 1 По РазницаВМесяцах Цикл
		
		НоваяСтрока = ТаблицаНачислений.Добавить();
		
		// Скопируем строку
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНачислений);
		
		// Установим период
		ОчередноеНачалоМесяца = ДобавитьМесяц(ОчередноеНачалоМесяца, 1);
		НоваяСтрока["ДатаНачала"] = ОчередноеНачалоМесяца;	
		НоваяСтрока["ДатаОкончания"] = КонецМесяца(ОчередноеНачалоМесяца);	
		
	КонецЦикла;
	
	// Для  последней строки установим конец периода в конец разбиваемого периода
	НоваяСтрока["ДатаОкончания"]	 = КонецПериода;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СПИСКОВ СПОСОБОВ РАСЧЕТА

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокОсновныхВариантовНачисленийОрганизации() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеУмножитьНаПроцент);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ВыслугаЛет);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуКомпенсацияОтпуска);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуВозвратОтпуска);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ГосударственноеПособие);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИндексацияЗарплаты);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИндексацияСоциальныхНачислений);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.КомпенсацияНевыплаченнойЗарплаты);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ВыходноеПособие);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокОсновныхВариантовНачисленийОрганизации()

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокДополнительныхВариантовНачислений() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ГосударственноеПособие);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокДополнительныхВариантовНачислений()

// Возвращает список регламентированных алгоритмов удержаний
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовУдержанийОрганизации() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокВариантовУдержанийОрганизации()

// Возвращает список управленческих алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовУпрНачислений() Экспорт

	 СписокСпособов = Новый СписокЗначений; 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула);
 
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокВариантовУпрНачислений()

// Возвращает список регламентированных алгоритмов взносов
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовВзносовВФондыОрганизации() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Взносы);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокВариантовВзносовВФондыОрганизации()

// Возвращает список регламентированных алгоритмов взносов
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовВыплатЗарплаты() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокВариантовВыплатЗарплаты()

// Возвращает список алгоритмов начислений надбавок
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовНадбавок() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
    
    СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула);
	
	Возврат СписокСпособов

	
КонецФункции // ПолучитьСписокВариантовНадбавок()

// Возвращает список алгоритмов начислений, не требующих указания валюты начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ГосударственноеПособие);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ВыслугаЛет);
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИндексацияЗарплаты);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИндексацияСоциальныхНачислений);
	               
	Возврат СписокСпособов;
	
КонецФункции // ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты()

// Возвращает алгоритмы начислений, не требующих указания валюты начислений, в виде соответствия
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Соответствие, содержащее подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетаТребующихСпециализированныхДокументов() Экспорт

	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	
	Возврат СписокСпособов;
	
КонецФункции // ПолучитьСписокСпособовРасчетаТребующихСпециализированныхДокументов()

// Возвращает список видов государственных единовременных пособий за счет ФСС
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления ВидыГосударственныхПособий
//
Функция ПолучитьСписокЕдиновременныхПособийЗаСчетФСС() Экспорт
	
	СписокПособий = Новый СписокЗначений;
	                                   
	СписокПособий.Добавить(Перечисления.ВидыГосударственныхПособий.БлаготворительнаяПомощь);
	СписокПособий.Добавить(Перечисления.ВидыГосударственныхПособий.НаПогребение);
	
	Возврат СписокПособий
	
КонецФункции // ПолучитьСписокВариантовНадбавок()


// Возвращает алгоритмы начислений, не требующих указания валюты начислений, в виде соответствия
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Соответствие, содержащая подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСоответствиеСпособовРасчетаТребующихВалюту() Экспорт
	
	Список = ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты();
	СоответствиеСпособов = Новый Соответствие;
	Для Сч = 0 По Перечисления.СпособыРасчетаОплатыТруда.Количество() - 1 Цикл
		Значение = Перечисления.СпособыРасчетаОплатыТруда.Получить(Сч);
		СоответствиеСпособов.Вставить(Значение, Список.НайтиПоЗначению(Значение) = Неопределено);
	КонецЦикла;  
	
    Возврат СоответствиеСпособов
	
КонецФункции // Получить()


// Возвращает список видов расчетов, не требующих указания валюты начислений
//
// Параметры
//  ИмяПланаВидовРасчета - имя плана видов расчета, к которому относятся виды расчета 
//
// Возвращаемое значение:
//   Список значений, содержащий список видов расчета, не требующих при расчете курса валюты
//
Функция ПолучитьСписокВидовРасчетаНеТребующихУказанияВалюты(ИмяПланаВидовРасчета) Экспорт
	
	СписокСпособовРасчета = ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка
	|ИЗ
	|	ПланВидовРасчета." + ИмяПланаВидовРасчета + " КАК ОсновныеНачисленияОрганизаций
	|
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.СпособРасчета В(&СписокСпособовРасчета)");
	Запрос.УстановитьПараметр("СписокСпособовРасчета", СписокСпособовРасчета);
	
	СписокРасчетов = Новый СписокЗначений; 
	СписокРасчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокРасчетов;
	
КонецФункции // ПолучитьСписокВидовРасчетаНеТребующихУказанияВалюты()

// Возвращает список алгоритмов основных начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовОсновныхНачислений() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокВариантовОсновныхНачислений()

// Возвращает список видов расчетов исполнительных листов
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетовИспонителныеЛисты() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнителныйЛистСУчетомОграничения);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммой);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.АлиментыПроцентом);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.АлиментыПроцентомДоПредела);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.АлиментыФиксСуммой);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.АлиментыФиксСуммойДоПредела);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокСпособовРасчетовИспонителныеЛисты()

Функция ПолучитьСписокНачисленийПоСреднемуЗаработку() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуВозвратОтпуска);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуКомпенсацияОтпуска);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокСпособовРасчетовИспонителныеЛисты()

// Возвращает список алгоритмов основных начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСтатьиНалоговыхДекларацийПоВзносамРаботников() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Справочники.СтатьиНалоговыхДеклараций.ПФ_Сотр15);
	СписокСпособов.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССБезработ_Сотр);
	СписокСпособов.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Сотр025);
	СписокСпособов.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Сотр05);
	СписокСпособов.Добавить(Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_Сотр1);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокСтатьиНалоговыхДекларацийПоВзносамРаботников()

// Возвращает список предопределенных начислений
Функция ПредопределенныеНачисленияОрганизации() Экспорт
	
	СписокПредопределенныхВР = Новый СписокЗначений;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ОсновныеНачисленияОрганизаций.Наименование
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|
	|ГДЕ
	|	(ОсновныеНачисленияОрганизаций.Предопределенный)");
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СписокПредопределенныхВР.Добавить(Результат.Ссылка,Результат.Наименование);
	КонецЦикла;
	
	Возврат СписокПредопределенныхВР
	
КонецФункции // ПредопределенныеНачисленияОрганизации()

// Возвращает список кодов дохода, требующих либо ввода вычетов, либо исчисления налога по ставкам 9% или 35%
//
// Параметры
//  нет
//
// Возвращаемое значение:
//  список значений, содержащий ссылки на предопределенные эл-ты спр-ка ДоходыНДФЛ 
//
Функция ПолучитьСписокКодовДоходаТребующихДополнительнойОбработки() Экспорт 

	СписокКодовДохода = Новый СписокЗначений;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоходыНДФЛ.Ссылка
	|ИЗ
	|	Справочник.ВидыДоходовНДФЛ КАК ДоходыНДФЛ
	|
	|ГДЕ
	|	ДоходыНДФЛ.ВидСтавкиРезидента <> &парамВидСтавкиРезидента");
						  
	Запрос.УстановитьПараметр("парамВидСтавкиРезидента",Перечисления.ВидыСтавокНДФЛ.Основная);					  
	СписокКодовДохода.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	СписокКодовДохода.Добавить(Справочники.ВидыДоходовНДФЛ.Код29);

	Возврат СписокКодовДохода
КонецФункции // ПолучитьСписокКодовДоходаТребующихДополнительнойОбработки()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВИДАМИ РАСЧЕТА

// Эта функция возвращает информацию о виде расчета из переданного соответствия
// Если в соответствии не найдена информация о виде расчета - она подготавливается и 
// помещается в соответствие
// Применяется для работы с формами, в которых активно требуется получать 
// информацию о видах расчета, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОВидахРасчета - соответствие, у которого в качестве ключа - ПланВидовРасчетаСсылка, а 
//  				  в качестве значения - структура из элементов
//					  РазмерТребуется - булево - если да, то при вводе такого 
//										вида расчета требуется проставлять значение "размер" 
//										(суммы, проценты и проч. показатели, используемые при расчете)
//
//	ВидРасчета - ПланВидовРасчетаСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОВидеРасчета(СведенияОВидахРасчета, ВидРасчета) Экспорт
	СведенияОВидеРасчета = СведенияОВидахРасчета[ВидРасчета];
	Если СведенияОВидеРасчета = Неопределено Тогда
		СведенияОВидеРасчета = Новый Структура("РазмерТребуется, ДоходНДФЛ, СпособРасчета");
		СпособРасчета = ВидРасчета.СпособРасчета;
		ТипВР = ТипЗнч(ВидРасчета);
		// размер требует способ расчета
		СведенияОВидеРасчета.РазмерТребуется = СпособРасчетаТребуетРазмер(СпособРасчета);
		СведенияОВидеРасчета.СпособРасчета = СпособРасчета;
		// размер требует вид расчета
		Если 	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок И 
				ТипВР = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
			СведенияОВидеРасчета.РазмерТребуется = Истина;
		КонецЕсли;
		Если ТипВР = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
			СведенияОВидеРасчета.ДоходНДФЛ = ВидРасчета.ДоходНДФЛ;
		КонецЕсли;
		СведенияОВидахРасчета[ВидРасчета] = СведенияОВидеРасчета;
	КонецЕсли;
	Возврат СведенияОВидеРасчета;
	
КонецФункции  // ПолучитьСведенияОВидеРасчета

// функция проверяет необходимость задавать размер для расчета по заданному способу
// Параметры:
//	СпособРасчета
//
// Возвращаемое значение:
//	булево - признак того, нужен ли размер для расчета таким способом
//
Функция СпособРасчетаТребуетРазмер(СпособРасчета) Экспорт
	Возврат НЕ (СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
	ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма
	ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ГосударственноеПособие
	ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИндексацияЗарплаты
	ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИндексацияСоциальныхНачислений
	ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КомпенсацияНевыплаченнойЗарплаты
	ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВыслугаЛет
	ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы
	ИЛИ СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы
	);
КонецФункции // СпособРасчетаТребуетРазмер()

Функция СпособРасчетаНеТребуетВалюты(СпособРасчета) Экспорт
	
	Возврат (
	
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВыходноеПособие Или 
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуВозвратОтпуска Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуКомпенсацияОтпуска Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела
	
    );
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ТИПОВЫХ ТАБЛИЧНЫХ ЧАСТЕЙ РАСЧЕТНЫХ ДОКУМЕНТОВ

Процедура УдалитьСтрокиСторноПоУсловию(НаборДанных, Сотрудники, ПроверятьСторнируемыйДокумент = Ложь) Экспорт

	
	Если НаборДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// обходим в обратном порядке
	ПоследнееДвижение = НаборДанных.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		
		Движение = НаборДанных[ПоследнееДвижение - Сч];
		Если ПроверятьСторнируемыйДокумент Тогда
			Если НЕ Движение.Авторасчет ИЛИ НЕ Движение.Сторно ИЛИ ЗначениеЗаполнено(Движение.СторнируемыйДокумент) Тогда
				Продолжить;	
			КонецЕсли;
		Иначе
			Если НЕ Движение.Авторасчет ИЛИ НЕ Движение.Сторно Тогда
				Продолжить;	
			КонецЕсли;
		КонецЕсли;
		
		// удалим сторно-записи по всем сотрудникам полученного списка
		Если Сотрудники.НайтиПоЗначению(Движение.Сотрудник) <> Неопределено Тогда
			НаборДанных.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры // УдалитьСтрокиСторноПоУсловию()

Процедура УдалитьСтрокиПоУсловию(ТаблицаДокумента, Сотрудники) Экспорт
	
	Если ТаблицаДокумента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Сотрудник Из Сотрудники Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Сотрудник", Сотрудник.Значение);
		НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(ПараметрыОтбора);
		Для каждого СтрокаТЧ Из НайденныеСтроки Цикл
			ТаблицаДокумента.Удалить(СтрокаТЧ);
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры // УдалитьСтрокиПоУсловию()

// Когда перерасчеты отладим, эта процедура уйдет из модулей
Процедура УдалитьЗаписиПерерасчетаПоКоторымВыполненПерерасчет(Регистратор, НаборЗаписей, Сотрудники) Экспорт
	
	// Удаляет записи перерасчета по которым выполнен перерасчет
	НаборЗаписей.Отбор.ОбъектПерерасчета.Значение = Регистратор;
	НаборЗаписей.Прочитать();
	
	// обходим в обратном порядке
	ПоследнееДвижение = НаборЗаписей.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		Движение = НаборЗаписей[ПоследнееДвижение - Сч];
		Если Сотрудники.НайтиПоЗначению(Движение.Сотрудник) <> Неопределено Тогда
			НаборЗаписей.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НеобходимостьПерерасчетаНачислений(Регистратор) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Перерасчет.Сотрудник КАК Сотрудник
	|ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
	|ГДЕ Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|");
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Если Запрос.Выполнить().Пустой() Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции  // НеобходимостьПерерасчета

Функция НеобходимостьПерерасчетаСредней(Регистратор) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Перерасчет.Сотрудник КАК Сотрудник
	|ИЗ РегистрРасчета.РасчетСреднегоЗаработка.ПерерасчетСреднегоЗаработка КАК Перерасчет
	|ГДЕ Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|");
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Если Запрос.Выполнить().Пустой() Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции  // НеобходимостьПерерасчета



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКИИ 

// Переводит стаж в дату
//
// Параметры
//  ДатаНачала          – Дата, от которой отсчитываем
//  Дней, Месяцев, Лет  – Величина стажа
//  Начало              - если ИСТИНА надо прибавить к дате, иначе отнять
//
// Возвращаемое значение:
//   Дата стажа
//
Функция ПересчитатьСтажВДату(ДатаНачала, Начало = Истина, Дней, Месяцев, Лет ) Экспорт
	Если Дней = 0 И Месяцев = 0 И Лет = 0 Тогда
		Возврат 0;     
	КонецЕсли;
	
	
	Если Начало Тогда
		ДатаКонца = ДобавитьМесяц( ДатаНачала - 86400*(Дней-1), -(Месяцев + Лет*12 ) );
	Иначе
		ДатаКонца = ДобавитьМесяц( ДатаНачала + 86400*(Дней+1),  (Месяцев + Лет*12 ) );
	КонецЕсли;
	
	Возврат ДатаКонца;
	
КонецФункции // ПересчитатьСтажВДату()

// Переводит дату в стаж
//
// Параметры
//  ДатаНачала   – Дата, от которой отсчитываем
//  ДатаТекущая  – Текущие значение стажа в виде даты
//  Дней, Месяцев, Лет - переменные, в которые записываем значение стажа
//
// Возвращаемое значение:
//   Строка значения стажа
Функция ПересчитатьСтажИзДаты(ДатаНачала, ДатаТекущая, Дней, Месяцев, Лет) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ДатаТекущая) Тогда
		Возврат "Нет стажа";
	КонецЕсли;
	
	Годы = Год(ДатаНачала)-Год(ДатаТекущая);
	Если Годы < 0 Тогда
		Годы = Годы + 100;
	КонецЕсли;
	
	Разн = Месяц(ДатаНачала) - Месяц(ДатаТекущая) + Годы*12;
	Если День(ДатаНачала) < День(ДатаТекущая) Тогда
		Разн = Разн-1;
	КонецЕсли;
	
	Месяцев = Разн%12;
	Лет = (Разн-Месяцев)/12;
	Дней = (ДатаНачала-ДобавитьМесяц(ДатаТекущая,Разн))/86400
	;
	
	Если Лет>20 Тогда
		ОстатокЛет=Лет%10;
	Иначе 
		ОстатокЛет = Лет;	
	КонецЕсли;
	
	Если Дней>20 Тогда
		ОстатокДней=Дней%10;
	Иначе 
		ОстатокДней = Дней;	
	КонецЕсли;
	СтрокаВозврата="";
	
	Если Лет=0 Тогда
		//пропускаем	
	ИначеЕсли ОстатокЛет=1 Тогда
		СтрокаВозврата =Строка(Лет)+" год ";
	ИначеЕсли ОстатокЛет < 5 Тогда	
		СтрокаВозврата = Строка(Лет)+" года ";
	Иначе
		СтрокаВозврата = Строка(Лет)+" лет ";
	КонецЕсли;
	
	Если Месяцев=0 Тогда
		//пропускаем	
	ИначеЕсли Месяцев=1 Тогда
		СтрокаВозврата = СтрокаВозврата+"1 месяц ";
	ИначеЕсли Месяцев < 5 Тогда	
		СтрокаВозврата = СтрокаВозврата+Строка(Месяцев)+" месяца ";
	Иначе
		СтрокаВозврата = СтрокаВозврата+Строка(Месяцев)+" месяцев ";
	КонецЕсли;
	
	Если Дней=0 Тогда
		//пропускаем	
	ИначеЕсли ОстатокДней=1 Тогда
		СтрокаВозврата = СтрокаВозврата+Строка(Дней)+" день";
	ИначеЕсли ОстатокДней < 5 Тогда	
		СтрокаВозврата = СтрокаВозврата+Строка(Дней)+" дня";
	Иначе
		СтрокаВозврата = СтрокаВозврата+Строка(Дней)+" дней";
	КонецЕсли;
	
	Если СтрокаВозврата = "" Тогда
		СтрокаВозврата ="Нет стажа";
	КонецЕсли;	
	
	Возврат СтрокаВозврата;
	
КонецФункции // ПересчитатьСтажИзДаты()

// Ограничение выборки по физическим лицам
// Параметры: 
//  массивФизЛиц   - массив ФизЛиц. 
//  ИмяТаблицы     -  Может быть сравнение с одним ФизЛицом, 
//  ИмяДокумента   - Название документа как объекта метаданных
//
// Возвращаемое значение:
//  часть текста запроса
//
Функция ПолучитьКвоМесяцевВпериоде( ТекстДатаНачало, ТекстДатаКонец ) Экспорт
	
	ТекстЗапроса = "(  (ГОД("+ТекстДатаКонец+") - ГОД("+ТекстДатаНачало+"))*12 + МЕСЯЦ("+ТекстДатаКонец+") - МЕСЯЦ("+ТекстДатаНачало+") + 1 )
	|
	|"; 
	
	Возврат ТекстЗапроса;
КонецФункции

// Процедура вычисляет количество лет, месяцев и дней между двумя датами
//
// Параметры
//  Дата1	– дата, первая дата (более поздняя, часто текущая, стаж определяется по состоянию на эту дату)
//  Дата2	– дата, вторая дата (ранняя дата, с нее начинается "течение" стажа)
//  Лет		– Число, в этот параметр будет записано кол-во лет между двумя датами (Дата1-Дата2)
//  Месяцев	– Число, в этот параметр будет записано кол-во месяцев между двумя датами (Дата1-Дата2)
//  Дней	– Число, в этот параметр будет записано кол-во дней между двумя датами (Дата1-Дата2)
//
Функция РазобратьРазностьДат(Дата1, Дата2, Дней = 0, Месяцев = 0, Лет = 0) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Дата1) ИЛИ НЕ ЗначениеЗаполнено(Дата2) Тогда
		Возврат "Нет стажа";
	КонецЕсли;
	
	Лет		= 0;
	Месяцев	= 0;
	Дней	= 0;
		
	Если Дата1 > Дата2 Тогда
		
		ВременнаяДата = Дата1;
		Если День(ВременнаяДата) < День(Дата2) Тогда
			Дней = (ВременнаяДата - ДобавитьМесяц(ВременнаяДата,-1))/86400;
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата,-1);
		КонецЕсли;
		Если Месяц(ВременнаяДата) < Месяц(Дата2) Тогда
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата,-12);
			Месяцев = 12;
		КонецЕсли;
		
		Лет		= Макс(			 Год(ВременнаяДата)		- Год(Дата2),	0);
		Месяцев	= Макс(Месяцев	+ Месяц(ВременнаяДата)	- Месяц(Дата2),	0);
		Дней	= Макс(Дней		+ День(ВременнаяДата)	- День(Дата2),	0);
		
		
		// скорректируем отображаемое значение, если "вмешалось" разное количество дней в месяцах
		
	КонецЕсли;
	
	
	
	Если Лет>20 Тогда
		ОстатокЛет=Лет%10;
	Иначе 
		ОстатокЛет = Лет;	
	КонецЕсли;
	
	Если Дней>20 Тогда
		ОстатокДней=Дней%10;
	Иначе 
		ОстатокДней = Дней;	
	КонецЕсли;
	СтрокаВозврата="";
	
	Если Лет=0 Тогда
		//пропускаем	
	ИначеЕсли ОстатокЛет=1 Тогда
		СтрокаВозврата =Строка(Лет)+" год ";
	ИначеЕсли ОстатокЛет < 5 Тогда	
		СтрокаВозврата = Строка(Лет)+" года ";
	Иначе
		СтрокаВозврата = Строка(Лет)+" лет ";
	КонецЕсли;
	
	Если Месяцев=0 Тогда
		//пропускаем	
	ИначеЕсли Месяцев=1 Тогда
		СтрокаВозврата = СтрокаВозврата+"1 месяц ";
	ИначеЕсли Месяцев < 5 Тогда	
		СтрокаВозврата = СтрокаВозврата+Строка(Месяцев)+" месяца ";
	Иначе
		СтрокаВозврата = СтрокаВозврата+Строка(Месяцев)+" месяцев ";
	КонецЕсли;
	
	Если Дней=0 Тогда
		//пропускаем	
	ИначеЕсли ОстатокДней=1 Тогда
		СтрокаВозврата = СтрокаВозврата+Строка(Дней)+" день";
	ИначеЕсли ОстатокДней < 5 Тогда	
		СтрокаВозврата = СтрокаВозврата+Строка(Дней)+" дня";
	Иначе
		СтрокаВозврата = СтрокаВозврата+Строка(Дней)+" дней";
	КонецЕсли;
	
	Если СтрокаВозврата = "" Тогда
		СтрокаВозврата ="Нет стажа";
	КонецЕсли;	
	
	Возврат СтрокаВозврата;
	


КонецФункции	// РазобратьРазностьДат

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫВОДА НА ПЕЧАТЬ

// Функция формирует представление периода по дате начала и дате окончания
// в сжатом виде.
//
// Параметры
//  ДатаНачала	   – Дата – дата начала периода.
//  ДатаОкончания  – Дата – дата окончания периода.
//  БезЧисел  	   – Булево – признак того, что описание периода будет сформирован 
//					 без указания чисел месяца.
//  Язык           - Строка формата - Например, украинский: "Л=uk_UA"
//
// Возвращаемое значение:
//   Строка   – строковое представление периода.
//
Функция ОписаниеПериодаРасчеты(ДатаНачала, ДатаОкончания, БезЧисел = Ложь, Язык = "") Экспорт
	
	СтрокаФорматаДаты = Язык + "ДФ='" + ?(БезЧисел, "", "d.") + "MM.yy'";
						 
	НетДатыНачала    = НЕ ЗначениеЗаполнено(ДатаНачала);
	НетДатыОкончания = НЕ ЗначениеЗаполнено(ДатаОкончания);
	
	Если НетДатыНачала и НетДатыОкончания Тогда
		
		Возврат ""
		
	ИначеЕсли НетДатыНачала Тогда
		
		Возврат Формат(ДатаОкончания, СтрокаФорматаДаты)
		
	ИначеЕсли НетДатыОкончания Тогда
		
		Возврат Формат(ДатаНачала, СтрокаФорматаДаты)
		
	КонецЕсли;
	
	//Есть ДатаНачала и ДатаОкончания
	
	Если ДатаНачала = ДатаОкончания Тогда
		
		Возврат Формат(ДатаНачала, СтрокаФорматаДаты);
		
	ИначеЕсли НачалоМесяца(ДатаНачала) = НачалоМесяца(ДатаОкончания) Тогда
		//Даты одного месяца
		
		//Если полный месяц
		Если (НачалоМесяца(ДатаНачала) = ДатаНачала) 
			и (КонецДня(ДатаОкончания) = КонецМесяца(ДатаОкончания)) Тогда
			
			Возврат Формат(ДатаНачала, Язык + "ДФ='MMMM гг'"); 
			
		КонецЕсли;
		
		//Если не полный месяц
		ЧислоНачала = ?(БезЧисел, "", "" + День(ДатаНачала) + "-");
		Возврат ЧислоНачала + Формат(ДатаОкончания, СтрокаФорматаДаты);
		
	Иначе
		//Даты разных месяцев
		
		Возврат Формат(ДатаНачала, СтрокаФорматаДаты) + " - " + Формат(ДатаОкончания, СтрокаФорматаДаты)
		
	КонецЕсли;
	
КонецФункции	// ОписаниеПериода 


// проверка того, что показатель схемы мотивации является предопределенным показателем 
// не требующим ввода (т.е. рассчитываемым автоматически)
Функция ЭтоПоказательСАвторасчетом(Показатель) Экспорт
    Возврат     Показатель = Справочники.ПоказателиСхемМотивации.ВремяВДнях 
            или Показатель = Справочники.ПоказателиСхемМотивации.ВремяВЧасах
            или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВДнях
            или Показатель = Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах
            или Показатель = Справочники.ПоказателиСхемМотивации.СдельнаяВыработка
            или Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза;
КонецФункции

// Формирует текстовую интерпретацию формулы по способу расчета и показателям для отображения
// на экране.
//
// Параметры
//  Объект - ПланВидовРасчетаОбъект для ПВР УправленческиеНачисления или УправленческиеУдержания
//	Режим - "Текст" - форумал выводится в виде текста, "HTML" - в виде HTML кода, по умолчанию = "Текст"
// Возвращаемое значение:
//   Строка   – содержит текстовую интерпретацию формулы расчета.
//
Функция ВизуализироватьФормулуРасчета(Объект, Режим = "Текст") Экспорт

	СпособРасчета = Объект.СпособРасчета;
	
	Если Режим = "HTML" Тогда
		
		
		СтрокаФормулы ="
		|	<HTML><HEAD>
		|	</HEAD>
		|	<BODY vlink=#000 link=#000 scroll=auto rightMargin=0><FONT face=""MS Sans Serif"" size=1>
		|";
		
	КонецЕсли;
    
	Если  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ee>Фиксированная сумма</FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ee>Фиксированная сумма</FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>, до удержания указанной в документе суммы";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ee>Фиксированная сумма, до удержания указанной в документе суммы</FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Сдельная выработка>";		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ee>Сдельная выработка</FONT>"			
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<0>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = 0"
		КонецЕсли;

	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = ""+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная.Наименование + " * Отработанное время в днях"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Отработанное время в днях</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "> * <Отработанное время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Отработанное время в часах</FONT>"						
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент оплаты> * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Процент оплаты</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Расчетная база</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент сбора> * <Сумма по исполнительному листу>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Процент сбора</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Сумма по исполнительному листу</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент удержаний> * (<Расчетная база> - <Исчисленный НДФЛ>)"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Процент удержаний</FONT> <FONT color=#FF0000> * </FONT> (<FONT color=#0000ff>Расчетная база</FONT> <FONT color=#FF0000> - </FONT> <FONT color=#0000ff>Исчисленный НДФЛ</FONT>)"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент удержаний> * (<Расчетная база> - <Исчисленный НДФЛ>), до удержания указанной в документе суммы"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff><Процент удержаний></FONT> <FONT color=#FF0000> * </FONT> <FONT color=#FF0000>(</FONT><FONT color=#0000ff>Расчетная база</FONT> <FONT color=#FF0000> - </FONT> <FONT color=#0000ff>Исчисленный НДФЛ</FONT><FONT color=#FF0000>)</FONT>, до удержания указанной в документе суммы"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеУмножитьНаПроцент Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "> * <Процент доплаты> * <Время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = </FONT> <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Процент доплаты </FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Время в часах</FONT>"			
		КонецЕсли;	
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "> * <Процент доплаты> * <Вечернее время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Процент доплаты</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Вечернее время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "> * <Процент доплаты> * <Вечернее время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Процент доплаты</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Вечернее время в часах</FONT>"			
		КонецЕсли;					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "> * <Процент доплаты> * <Ночное время в часах>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Процент доплаты</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Ночное время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной (часовой) заработок> * <Время в днях (часах)>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Средний дневной (часовой) заработок</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Время в днях (часах)</FONT>"			
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний заработок> * <Время в календарных днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Средний заработок></FONT> умножить на <FONT color=#993366><Время в календарных днях></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Тогда		
		Если Режим = "Текст" Тогда  
			СтрокаФормулы = "<Средний дневной(часовой) заработок>  * <Процент оплаты (60%, 80%, 100%)> * <Время в днях(часах)>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Средний дневной заработок></FONT> умножить на <FONT color=#993366><Процент оплаты (60%, 80%, 100%)></FONT> умножить на <FONT color=#993366><Время в календарных днях></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуКомпенсацияОтпуска Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний заработок> * <Время в календарных днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Средний заработок></FONT> умножить на <FONT color=#993366><Время в календарных днях></FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуВозвратОтпуска Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "< - Средний заработок> * <Время в календарных днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366>< - Средний заработок></FONT> умножить на <FONT color=#993366><Время в календарных днях></FONT>"			
		КонецЕсли;	
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.КомпенсацияНевыплаченнойЗарплаты Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэф.компенсации> * <Задолженность>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Коэф.компенсации></FONT> умножить на <FONT color=#993366><Задолженность></FONT>"			
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИндексацияЗарплаты Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэф.индексации> * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Коэф.индексации></FONT> умножить на <FONT color=#993366><Расчетная база></FONT>"			
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИндексацияСоциальныхНачислений Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэф.индексации> * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Коэф.индексации></FONT> умножить на <FONT color=#993366><Расчетная база></FONT>"			
		КонецЕсли;					
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.Наименование + "> / <Норма времени за месяц в днях> * <Отработанное время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ee>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.Наименование + "</FONT> <FONT color=#FF0000> / </FONT> <FONT color=#0000ee>Норма времени за месяц в днях</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Отработанное время в днях</FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.Наименование + "> / <Норма времени за месяц в часах> * <Отработанное время в часах>"								
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>"+Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная.Наименование + "</FONT> <FONT color=#FF0000> / </FONT> <FONT color=#0000ff>Норма времени за месяц в часах</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Отработанное время в часах</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум(<Средний заработок> - <Начислено>, <0>)";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Максимум</FONT><FONT color=#FF0000>(</FONT><FONT color=#0000ff>Средний заработок</FONT><FONT color=#FF0000> - </FONT><FONT color=#0000ff>Начислено</FONT> <FONT color=#FF0000>,</FONT> 0<FONT color=#FF0000>)</FONT>"		
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВыходноеПособие Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний заработок за месяц>  * <Время оплаты пособия>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Средний месячный заработок></FONT> умножить на <FONT color=#993366><Время оплаты пособия></FONT>"			
		КонецЕсли;
						
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВыслугаЛет Тогда
		Если Объект.ВидСтажа.Пустая() Тогда
			ВидСтажа = "<a href=./0><FONT id=""Staj"" color=#0000ff size = 2> (вид стажа ) </FONT></a>&nbsp";						
		Иначе
			ВидСтажа = "<a href=./0> <FONT id=""Staj"" color=#993366 size =2>" + " (вид стажа - " + """" + Строка(Объект.ВидСтажа)+ """"+" )</FONT></a>&nbsp";
		КонецЕсли;	

	
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Минимум(<Ставка выслуги лет> " + "( вид стажа - " + Строка(Объект.ВидСтажа)+") * <Расчетная база>, <Ограничение>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = Минимум(<FONT color=#993366><Ставка выслуги лет></FONT> "+ ВидСтажа + " умножить на <FONT color=#993366><Расчетная база></FONT>,<FONT color=#993366><Ограничение></FONT>)"
		КонецЕсли;      

	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ГосударственноеПособие Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Сумма пособия>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#993366><Сумма пособия></FONT>"			
		КонецЕсли;
					
	
	ИначеЕсли Объект.ПроизвольнаяФормулаРасчета Тогда
		
		ФормулаРасчета	= Объект.ФормулаРасчета;
		
		ФормулаРасчета	= СтрЗаменить(ФормулаРасчета, "ПроведениеРасчетов.", "");
		
		СимволыДляЗамены = "/=-+*()?<,";
		
		Если Режим = "Текст" Тогда
			
			// заменим подставим вместо ИсходныеДанные.ПоказательN нужные показатели
			СтрокаФормулы = ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Объект.Показатели, Режим);
			
		Иначе
			
			НоваяФормулаРасчета = "";
			Для НомерСимвола = 1 По СтрДлина(ФормулаРасчета) Цикл
				Символ = Сред(ФормулаРасчета,НомерСимвола,1);
				Если Найти(СимволыДляЗамены,Символ) > 0 Тогда
					НоваяФормулаРасчета = НоваяФормулаРасчета + "<FONT color=#FF0000>" + Символ + "</FONT>"; 
				Иначе
					НоваяФормулаРасчета = НоваяФормулаРасчета + Символ;
				КонецЕсли;
			КонецЦикла;	
			
			ФормулаРасчета = НоваяФормулаРасчета;
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " NOT ", "<FONT color=#FF0000> NOT </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " OR ", "<FONT color=#FF0000> OR </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " AND ", "<FONT color=#FF0000> AND </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " И ", "<FONT color=#FF0000> И </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " ИЛИ ", "<FONT color=#FF0000> ИЛИ </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " НЕ ", "<FONT color=#FF0000> НЕ </FONT>"); 
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " not ", "<FONT color=#FF0000> not </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " or ", "<FONT color=#FF0000> or </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " and ", "<FONT color=#FF0000> and </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " и ", "<FONT color=#FF0000> и </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " или ", "<FONT color=#FF0000> или </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " не ", "<FONT color=#FF0000> не </FONT>");
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Not ", "<FONT color=#FF0000> Not </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Or ", "<FONT color=#FF0000> Or </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " And ", "<FONT color=#FF0000> And </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Или ", "<FONT color=#FF0000> Или </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Не ", "<FONT color=#FF0000> Не </FONT>");		
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Цел", "<FONT color=#0000ff>Цел</FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Окр", "<FONT color=#0000ff>Окр</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Макс", "<FONT color=#0000ff>Макс</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Мин", "<FONT color=#0000ff>Мин</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "ОценитьПо", "<FONT color=#0000ff>ОценитьПо</FONT>");		
			
			СтрокаФормулы = СтрокаФормулы + "Результат = " +  ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Объект.Показатели, Режим);
			
		КонецЕсли;
	Иначе
		Если Режим = "Текст" Тогда
			СтрокаФормулы = ""	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|</font></HTML>"
		КонецЕсли;
	КонецЕсли;
	
	Если Режим = "HTML" Тогда
				
		СтрокаФормулы = СтрокаФормулы + "
		|</font></HTML>"

	КонецЕсли;
	
    Возврат СтрокаФормулы;	
	
КонецФункции // ВизуализироватьФормулуРасчета()


////////////////////////////////////////////////////////////////////////////////
// ОТПУСКА

Функция ПолагаетсяДнейОтпускаЗаПериод(ФизЛицо, РабочийПериодС, РабочийПериодПо,НомерРеквизита=1) Экспорт
	ПолагаетсяДнейВсего=0;
	ТекстЗапроса="ВЫБРАТЬ
	             |	ПоложенныеЕжегодныеОтпускаРаботниковСрезПоследних.Период,
	             |	ПоложенныеЕжегодныеОтпускаРаботниковСрезПоследних.ПоложеноОсновного
	             |ИЗ
	             |	РегистрСведений.ПоложенныеЕжегодныеОтпускаРаботников.СрезПоследних(&ДатаНач, ФизЛицо = &ФизЛицо) КАК ПоложенныеЕжегодныеОтпускаРаботниковСрезПоследних
	             |
	             |ОБЪЕДИНИТЬ
	             |
	             |ВЫБРАТЬ
	             |	ПоложенныеЕжегодныеОтпускаРаботников.Период,
	             |	ПоложенныеЕжегодныеОтпускаРаботников.ПоложеноОсновного
	             |ИЗ
	             |	РегистрСведений.ПоложенныеЕжегодныеОтпускаРаботников КАК ПоложенныеЕжегодныеОтпускаРаботников
	             |ГДЕ
	             |	ПоложенныеЕжегодныеОтпускаРаботников.ФизЛицо = &ФизЛицо
	             |	И ПоложенныеЕжегодныеОтпускаРаботников.Период МЕЖДУ &ДатаНач И &ДатаКон";
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
	Запрос.УстановитьПараметр("ДатаНач",РабочийПериодС);
	Запрос.УстановитьПараметр("ДатаКон",РабочийПериодПо);
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПолагаетсяДней=Выборка[НомерРеквизита];
		ТекДата=РабочийПериодС;
		Пока Выборка.Следующий() Цикл
			Коэф = (Выборка.Период - ТекДата) / 31536000;
			ПолагаетсяДнейВсего = ПолагаетсяДнейВсего+ПолагаетсяДней * Коэф;
			ПолагаетсяДней=Выборка[НомерРеквизита];
			ТекДата=Выборка.Период;
		КонецЦикла;
		Коэф = (РабочийПериодПо - ТекДата + 86400) / 31536000;
		ПолагаетсяДнейВсего = ПолагаетсяДнейВсего+ПолагаетсяДней * Коэф;
	КонецЕсли;
    Возврат Окр(ПолагаетсяДнейВсего); 
КонецФункции

Функция ПолучитьТаблицуРабочихПериодовОтпусков(ФизЛицо,ПериодС=Неопределено,ПериодПо) Экспорт
	Если ПериодС=Неопределено Тогда
		//Определяем дату приема на работу
		ТекстЗапроса="ВЫБРАТЬ
		             |	РаботникиОрганизацийСрезПервых.Период
		             |ИЗ
		             |	РегистрСведений.РаботникиОрганизаций.СрезПервых(, Сотрудник.ФизЛицо = &ФизЛицо) КАК РаботникиОрганизацийСрезПервых";

		Запрос=Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
		Выборка=Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
        ПериодС=Выборка.Период;
	КонецЕсли;
	//На всякий случай - это важно
	ПериодС=НачалоДня(ПериодС);
	ПериодПо=НачалоДня(ПериодПо);
	
	ТекстЗапроса="ВЫБРАТЬ
	             |	ИспользованиеЕжегодныхОтпусковРаботниковОбороты.ФизЛицо,
	             |	ИспользованиеЕжегодныхОтпусковРаботниковОбороты.РабочийПериодНачало КАК РабочийПериодНачало,
	             |	ИспользованиеЕжегодныхОтпусковРаботниковОбороты.РабочийПериодОкончание КАК РабочийПериодОкончание,
	             |	ИспользованиеЕжегодныхОтпусковРаботниковОбороты.ИспользованоОсновногоОборот КАК ИспользованоОсновного
	             |ИЗ
	             |	РегистрНакопления.ИспользованиеЕжегодныхОтпусковРаботников.Обороты(&ПериодС, &ПериодПо, , ФизЛицо = &ФизЛицо) КАК ИспользованиеЕжегодныхОтпусковРаботниковОбороты
	             |ИТОГИ
	             |	СУММА(ИспользованоОсновногоОборот)
	             |ПО
	             |	РабочийПериодНачало,
	             |	РабочийПериодОкончание";
	
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
	Запрос.УстановитьПараметр("ПериодС",ПериодС);
	Запрос.УстановитьПараметр("ПериодПо",ПериодПо);
	
	ВыборкаПеридС=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	тбТаблицаПериодов = Новый ТаблицаЗначений;
	тбТаблицаПериодов.Колонки.Добавить("ПериодС");
	тбТаблицаПериодов.Колонки.Добавить("ПериодПо");
	тбТаблицаПериодов.Колонки.Добавить("ПолагаетсяДнейОсн", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,0));
	//тбТаблицаПериодов.Колонки.Добавить("ПолагаетсяДнейДоп", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,0));
	тбТаблицаПериодов.Колонки.Добавить("ИспользованоДнейОсн", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,0));
	//тбТаблицаПериодов.Колонки.Добавить("ИспользованоДнейДоп", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,0));
	
	ТекДата=ПериодС;
	Пока ВыборкаПеридС.Следующий() Цикл
		
		ВыборкаПериодПо=ВыборкаПеридС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПериодПо.Следующий() Цикл

			РабочийПериодС=ВыборкаПериодПо.РабочийПериодНачало;
			Если (НЕ ЗначениеЗаполнено(РабочийПериодС)) ИЛИ (РабочийПериодС<ПериодС) Тогда
				РабочийПериодС=ПериодС;
			КонецЕсли;
			РабочийПериодПо=ВыборкаПериодПо.РабочийПериодОкончание;
			Если (НЕ ЗначениеЗаполнено(РабочийПериодС)) Тогда
				РабочийПериодПо=МИН(ПериодПо,ДобавитьМесяц(РабочийПериодС,12)-86400);
			КонецЕсли;

			РабочийПериодПо=МИН(ПериодПо,РабочийПериодПо);
			СтрокаТЗ=тбТаблицаПериодов.Добавить();
			СтрокаТЗ.ПериодС = РабочийПериодС;
			СтрокаТЗ.ПериодПо = РабочийПериодПо;
			СтрокаТЗ.ПолагаетсяДнейОсн = ПолагаетсяДнейОтпускаЗаПериод(ФизЛицо, РабочийПериодС, РабочийПериодПо,1);
			//СтрокаТЗ.ПолагаетсяДнейДоп = ПолагаетсяДнейОтпускаЗаПериод(ФизЛицо, РабочийПериодС, РабочийПериодПо,"ПолагаетсяДнейДопОтпуска");
			СтрокаТЗ.ИспользованоДнейОсн = ВыборкаПериодПо.ИспользованоОсновного;
			//СтрокаТЗ.ИспользованоДнейДоп = Запрос.ИспользованоДополнительного;
			
			ТекДата=РабочийПериодПо+86400;
		КонецЦикла;
	КонецЦикла;
	Пока ТекДата<ПериодПо Цикл
	    РабочийПериодС=ТекДата;
		РабочийПериодПо=МИН(ПериодПо,ДобавитьМесяц(РабочийПериодС,12)-86400);
		СтрокаТЗ=тбТаблицаПериодов.Добавить();
		СтрокаТЗ.ПериодС = РабочийПериодС;
		СтрокаТЗ.ПериодПо = РабочийПериодПо;
		СтрокаТЗ.ПолагаетсяДнейОсн = ПолагаетсяДнейОтпускаЗаПериод(ФизЛицо, РабочийПериодС, РабочийПериодПо,1);
		//СтрокаТЗ.ПолагаетсяДнейДоп = ПолагаетсяДнейОтпускаЗаПериод(ФизЛицо, РабочийПериодС, РабочийПериодПо,"ПолагаетсяДнейДопОтпуска");
		СтрокаТЗ.ИспользованоДнейОсн = 0;
		//СтрокаТЧ.ИспользованоДнейДоп = 0;
		ТекДата=РабочийПериодПо+86400;
	КонецЦикла;
	тбТаблицаПериодов.Сортировать("ПериодС Возр,ПериодПо");
	//Проверим периоды на непрерывность
	ПрошлоеОкончание=0;
	фОшибка=0;
	Для Каждого СтрокаТЧ Из тбТаблицаПериодов Цикл
		Если ЗначениеЗаполнено(ПрошлоеОкончание) Тогда
			Если СтрокаТЧ.ПериодС<>ПрошлоеОкончание+86400 Тогда
				фОшибка=1;
				Прервать
			КонецЕсли;
		КонецЕсли;
		ПрошлоеОкончание=СтрокаТЧ.ПериодПо;
	КонецЦикла;
	Если фОшибка=1 Тогда
		Сообщить("Для сотрудника "+ФизЛицо+" нарушена непрерывность рабочих периодов! Подробности в отчете по использованию отпусков!",СтатусСообщения.Важное);
	КонецЕсли;
	Возврат тбТаблицаПериодов;
КонецФункции

Функция ОпределитьКвоКалендарныхДнейЗаПериод(Дата1,Дата2) Экспорт
	ТекстЗапроса="ВЫБРАТЬ
	|	СУММА(РегламентированныйПроизводственныйКалендарь.КалендарныеДни) КАК КоличествоКалендарныеДни
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаНачала", Дата1);
	Запрос.УстановитьПараметр("ДатаОкончания", Дата2);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	КоличествоКалендарныеДни=?(Выборка.КоличествоКалендарныеДни=Неопределено,0,Выборка.КоличествоКалендарныеДни);
	Возврат КоличествоКалендарныеДни;
КонецФункции



///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫПЛАТЫ ЗАРАБОТНОЙ ПЛАТЫ

// Процедура выполняет движение по регистру ВзаиморасчетыСРаботникамиОрганизаций  и проводки по Бухгалтерскому учету
//
Процедура ВыполнитьДвиженияПоЗарплате( ДокументВыплаты, Движения, ПроводкиБУ="", СчетКт, СпособОплаты, ВыплаченностьЗарплаты, 
	СчетОрганизации = Неопределено, Сотрудник = Неопределено, Контрагент = Неопределено, Касса = Неопределено ) Экспорт
	
	Перем ВалютаУпрУчета;
	Перем КурсВалютыУпрУчета;
	
	
	ЭтоДепонирование = ДокументВыплаты.Метаданные().Имя = "ЗарплатаКВыплатеОрганизаций";
	Если Не ЭтоДепонирование Тогда 
		ПолучитьКурсВалютыУпрУчета(ДокументВыплаты.Дата, ВалютаУпрУчета, КурсВалютыУпрУчета, глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	Иначе
		КурсВалютыУпрУчета = 0;
	КонецЕсли;	
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументВыплаты.Ссылка); 
	Если ДокументВыплаты.Метаданные().Имя = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		Запрос.УстановитьПараметр("парамВедомости",	ДокументВыплаты.ПеречислениеЗаработнойПлаты.Выгрузить().ВыгрузитьКолонку("Ведомость") ); 
		ОтражатьВБухгалтерскомУчете = ДокументВыплаты.ОтражатьВБухгалтерскомУчете;
		
	ИначеЕсли ДокументВыплаты.Метаданные().Имя = "ЗарплатаКВыплатеОрганизаций" тогда
		Запрос.УстановитьПараметр("парамВедомости",	ДокументВыплаты ); 
		ОтражатьВБухгалтерскомУчете = Истина;
		
	ИначеЕсли ДокументВыплаты.Метаданные().Имя = "РасходныйКассовыйОрдер" И ДокументВыплаты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		Запрос.УстановитьПараметр("парамВедомости", ДокументВыплаты.РасчетныйДокумент);
		ОтражатьВБухгалтерскомУчете = ДокументВыплаты.ОтражатьВБухгалтерскомУчете;
		
	Иначе
		Запрос.УстановитьПараметр("парамВедомости",	ДокументВыплаты.ВыплатаЗаработнойПлаты.Выгрузить().ВыгрузитьКолонку("Ведомость") ); 
		ОтражатьВБухгалтерскомУчете = ДокументВыплаты.ОтражатьВБухгалтерскомУчете;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Выплачено", ВыплаченностьЗарплаты);
	Запрос.УстановитьПараметр("парамДата", ДокументВыплаты.Дата);
	Запрос.УстановитьПараметр("СпособОплаты", СпособОплаты);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудник);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("КурсВалютыУпрУчета", КурсВалютыУпрУчета);
	
	
	//	ВТРасшифровкаВедомостиСКопейками - по Зарплате к выплате для депонентов
	Если ДокументВыплаты.Метаданные().Имя = "ЗарплатаКВыплатеОрганизаций" Тогда
		//	Описание:
		//      осноная часть запроса, тут получим даные для проведения
		// 
		ТекстЗапросаВТ = "
		|ВЫБРАТЬ
		|	ИСТИНА												КАК ОтражатьВБухгалтерскомУчете,
		|	ПараметрыОплаты.Ссылка								КАК Ведомость,
		|	ПараметрыОплаты.Ссылка.Дата							КАК Период,
		|	ПараметрыОплаты.Ссылка.Организация					КАК Организация,
		|	ПараметрыОплаты.Сотрудник							КАК Сотрудник,
		|	ПараметрыОплаты.ПериодВзаиморасчетов				КАК ПериодВзаиморасчетов,
		|	ПараметрыОплаты.СчетУчета							КАК СчетУчета,
		|	ПараметрыОплаты.Ведомость					КАК ВедомостьДепонента,		
		|	NULL		КАК СтатьяДвиженияДенежныхСредств,
		|	ПараметрыОплаты.Ссылка 								КАК ДокументРегистратор, 
		|
		|	ПараметрыОплаты.Сумма				КАК СуммаВзаиморасчетов,
		//Смартис Лиманчук начало 19.11.2012
		|	ПараметрыОплаты.СуммаБух			КАК СуммаБух,
		//Смартис Лиманчук окончание 19.11.2012
		|	ПараметрыОплаты.СуммаОкругления		КАК СуммаОкругления
		|        
		|ПОМЕСТИТЬ ВТРасшифровкаВедомостиСКопейками	
		|ИЗ	Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК ПараметрыОплаты
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
		|ПО	РаботникиОрганизации.Ссылка = &Ссылка
		|И	РаботникиОрганизации.Сотрудник = ПараметрыОплаты.Сотрудник       
		|И	РаботникиОрганизации.ВыплаченностьЗарплаты = &Выплачено       
		|И	РаботникиОрганизации.СпособВыплаты = &СпособОплаты       
		| " + ?(Контрагент = Неопределено, "", "И РаботникиОрганизации.Банк = &Контрагент") + "        
		|
		|ГДЕ	ПараметрыОплаты.Ссылка = &Ссылка 
		|" + ?(Сотрудник = Неопределено, "", "	И	ПараметрыОплаты.Сотрудник в (&парамСотрудники)") + "        
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТРасшифровкаВедомостиСКопейками = "ВТРасшифровкаВедомостиСКопейками";
	КонецЕсли;
	
	//	ВТРасшифровкаВедомостиСКопейками
	Если ДокументВыплаты.Метаданные().Имя = "РасходныйКассовыйОрдер" И (ДокументВыплаты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Или ДокументВыплаты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов)
		ИЛИ ДокументВыплаты.Метаданные().Имя <> "РасходныйКассовыйОрдер" И ДокументВыплаты.Метаданные().Имя <> "ЗарплатаКВыплатеОрганизаций"
		Тогда
		//	Описание:
		//      осноная часть запроса, тут получим даные для проведения
		// 
		ТекстЗапросаВТ = "
		|ВЫБРАТЬ
		|	ПараметрыОплаты.Ссылка						КАК Ведомость,
		|	Выплаты.Ссылка.Дата							КАК Период,
		|	Выплаты.Ссылка.ОтражатьВБухгалтерскомУчете	КАК ОтражатьВБухгалтерскомУчете,
		|	Выплаты.Ссылка.Организация					КАК Организация,
		|	ПараметрыОплаты.Сотрудник					КАК Сотрудник,
		|	ПараметрыОплаты.ПериодВзаиморасчетов		КАК ПериодВзаиморасчетов,
		|	ПараметрыОплаты.СчетУчета					КАК СчетУчета,
		|	ПараметрыОплаты.Ведомость					КАК ВедомостьДепонента,		
		|	Выплаты.СтатьяДвиженияДенежныхСредств		КАК СтатьяДвиженияДенежныхСредств,
		|	Выплаты.Ссылка								КАК ДокументРегистратор,
		|
		|	ПараметрыОплаты.Сумма				КАК СуммаВзаиморасчетов,
		//Смартис Лиманчук начало 19.11.2012
		|	ПараметрыОплаты.СуммаБух			КАК СуммаБух,
		//Смартис Лиманчук окончание 19.11.2012
		|	ПараметрыОплаты.СуммаОкругления		КАК СуммаОкругления
		|        
		|ПОМЕСТИТЬ ВТРасшифровкаВедомостиСКопейками	
		|ИЗ	Документ."+ ДокументВыплаты.Метаданные().Имя +".ВыплатаЗаработнойПлаты КАК Выплаты
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ	Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК ПараметрыОплаты
		|ПО Выплаты.Ведомость = ПараметрыОплаты.Ссылка
		|И	Выплаты.СчетУчета = ПараметрыОплаты.СчетУчета
		|" + ?(НЕ ЗначениеЗаполнено(Сотрудник), "", "	И	ПараметрыОплаты.Сотрудник в (&парамСотрудники)") + "        
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
		|ПО	Выплаты.Ведомость = РаботникиОрганизации.Ссылка
		|И	РаботникиОрганизации.Сотрудник = ПараметрыОплаты.Сотрудник       
		|И	РаботникиОрганизации.ВыплаченностьЗарплаты = &Выплачено       
		|И	РаботникиОрганизации.СпособВыплаты = &СпособОплаты       
		| " + ?(НЕ ЗначениеЗаполнено(Контрагент), "", "И РаботникиОрганизации.Банк = &Контрагент") + "        
		|
		|ГДЕ	Выплаты.Ссылка = &Ссылка 
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТРасшифровкаВедомостиСКопейками = "ВТРасшифровкаВедомостиСКопейками";
	КонецЕсли;
	
	//	ВТРасшифровкаВедомостиСКопейками для РКО по одному работнику
	Если ДокументВыплаты.Метаданные().Имя = "РасходныйКассовыйОрдер" И ДокументВыплаты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		//	Описание:
		//      осноная часть запроса, тут получим даные для проведения
		// 
		ТекстЗапросаВТ = "
		|ВЫБРАТЬ
		|	ПараметрыОплаты.Ссылка						КАК Ведомость,
		|	Выплаты.Ссылка.Дата							КАК Период,
		|	Выплаты.Ссылка.ОтражатьВБухгалтерскомУчете	КАК ОтражатьВБухгалтерскомУчете,
		|	Выплаты.Ссылка.Организация					КАК Организация,
		|	ПараметрыОплаты.Сотрудник					КАК Сотрудник,
		|	ПараметрыОплаты.ПериодВзаиморасчетов		КАК ПериодВзаиморасчетов,
		|	ПараметрыОплаты.СчетУчета					КАК СчетУчета,
		|	ПараметрыОплаты.Ведомость					КАК ВедомостьДепонента,		
		|	Выплаты.СтатьяДвиженияДенежныхСредств		КАК СтатьяДвиженияДенежныхСредств,
		|	Выплаты.Ссылка 								КАК ДокументРегистратор,
		|
		|	ПараметрыОплаты.Сумма				КАК СуммаВзаиморасчетов,
		//Смартис Лиманчук начало 19.11.2012
		|	ПараметрыОплаты.СуммаБух			КАК СуммаБух,
		//Смартис Лиманчук окончание 19.11.2012
		|	ПараметрыОплаты.СуммаОкругления		КАК СуммаОкругления
		|        
		|ПОМЕСТИТЬ ВТРасшифровкаВедомостиСКопейками	
		|ИЗ	Документ."+ ДокументВыплаты.Метаданные().Имя +".РасшифровкаПлатежа КАК Выплаты
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ	Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК ПараметрыОплаты
		|ПО Выплаты.Ссылка.РасчетныйДокумент = ПараметрыОплаты.Ссылка
		|И	ПараметрыОплаты.Сотрудник в (&парамСотрудники)        
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
		|ПО	Выплаты.Ссылка.РасчетныйДокумент = РаботникиОрганизации.Ссылка
		|И	РаботникиОрганизации.Сотрудник = ПараметрыОплаты.Сотрудник       
		|И	РаботникиОрганизации.ВыплаченностьЗарплаты = &Выплачено       
		|И	РаботникиОрганизации.СпособВыплаты = &СпособОплаты       
		|
		|ГДЕ	Выплаты.Ссылка = &Ссылка 
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТРасшифровкаВедомостиСКопейками = "ВТРасшифровкаВедомостиСКопейками";
		Запрос.Текст = ТекстЗапросаВТ;
	КонецЕсли;
	
	
	// По регистру ВзаиморасчетыСРаботникамиОрганизаций
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Выплаты.Период							КАК Период,
	|	Выплаты.ОтражатьВБухгалтерскомУчете		КАК ОтражатьВБухгалтерскомУчете,
	|	Выплаты.Организация						КАК Организация,
	|	Выплаты.Ведомость						КАК Ведомость,
	|	Выплаты.Сотрудник						КАК Сотрудник,
	|	Выплаты.Сотрудник.ФизЛицо				КАК ФизЛицо,
	|	Выплаты.ПериодВзаиморасчетов			КАК ПериодВзаиморасчетов,
	|	Выплаты.СчетУчета						КАК СчетУчета,
    |	Выплаты.ВедомостьДепонента				КАК ВедомостьДепонента,	
	|	Выплаты.СтатьяДвиженияДенежныхСредств	КАК СтатьяДвиженияДенежныхСредств,
	|	ЕСТЬNULL(УчетЗаработкаРаботников.УчетНачисленийПоОрганизации, ЛОЖЬ)	КАК УчетНачисленийПоОрганизации,
	|   Выплаты.ДокументРегистратор				КАК ДокументРегистратор,
	|
	|	РанееВыплаченныеСуммы.Регистратор		КАК РегистраторРанееВыплаченные,
	|
	|	ВЫБОР КОГДА &КурсВалютыУпрУчета = 0 ТОГДА  0 ИНАЧЕ Выплаты.СуммаВзаиморасчетов/&КурсВалютыУпрУчета КОНЕЦ	КАК СуммаУпр,
	|	Выплаты.СуммаВзаиморасчетов 			КАК СуммаВзаиморасчетов,
	//Смартис Лиманчук начало 19.11.2012
	|	Выплаты.СуммаБух			 			КАК СуммаБух,
	//Смартис Лиманчук окончание 19.11.2012
	|	Выплаты.СуммаОкругления 				КАК СуммаОкругления
	|        
	|ИЗ	ВТРасшифровкаВедомостиСКопейками КАК Выплаты
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|ПО	Выплаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
	|И	Выплаты.Сотрудник = РанееВыплаченныеСуммы.Сотрудник
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(&парамДата) КАК УчетЗаработкаРаботников
	|ПО Выплаты.Сотрудник.ФизЛицо = УчетЗаработкаРаботников.Физлицо
	|
	//Смартис Лиманчук начало 19.11.2012
	//|ИТОГИ СУММА(СуммаВзаиморасчетов), СУММА(СуммаОкругления), МАКСИМУМ(Период), МАКСИМУМ(ПериодВзаиморасчетов), МАКСИМУМ(СтатьяДвиженияДенежныхСредств)
	|ИТОГИ СУММА(СуммаВзаиморасчетов), СУММА(СуммаБух), СУММА(СуммаОкругления), МАКСИМУМ(Период), МАКСИМУМ(ПериодВзаиморасчетов), МАКСИМУМ(СтатьяДвиженияДенежныхСредств)
	//Смартис Лиманчук окончание 19.11.2012
	|ПО Организация, Сотрудник, Ведомость
	|
	|";
	
	
	Запрос.Текст = ТекстЗапроса;
	НаборЗаписей = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
	Если Не ЭтоДепонирование Тогда
		НаборЗаписейУпр = Движения.ВзаиморасчетыСРаботниками;
	КонецЕсли;
	
	НаборЗаписейСведенияОВыплатах = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям;
	СчетУчетаДепонентов = ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам;
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаСотрудник = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
		Пока ВыборкаСотрудник.Следующий() Цикл
			
			ВыборкаВедомость = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ведомость");
			Пока ВыборкаВедомость.Следующий() Цикл
				
				Если ЭтоДепонирование Тогда
					
					// нужны все движения по взаиморасчетам
					// + надо  задепонировать сумму 
					ДобавитьСтрокуВзаиморасчетыСДепонентамиОрганизаций(ВыборкаВедомость, ДокументВыплаты.Дата, ВидДвиженияНакопления.Приход, Движения.ВзаиморасчетыСДепонентамиОрганизаций);
					
				КонецЕсли;
				
				// зарегистрируем факт выплаты по работнику и по федомости
				ДобавитьСтрокуСведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям(ВыборкаВедомость, НаборЗаписейСведенияОВыплатах);
				
				// теперь движения по каждому счету
				Выборка = ВыборкаВедомость.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					
					ЭтоВыплатаДепонента = ?( ВыборкаВедомость.Ведомость.ВидВыплаты = Справочники.ВидыВыплат.Депоненты, Истина, Ложь);
					Если ЭтоВыплатаДепонента Тогда
						
						Если ОтражатьВБухгалтерскомУчете И ПроводкиБУ <> "" Тогда
							ДобавитьСтрокуВыполнитьПроводкуВыплатыЗарплаты(Выборка, ПроводкиБУ, СчетУчетаДепонентов, СчетКт, ДокументВыплаты.Дата, СчетОрганизации); 
						КонецЕсли;	
						ДобавитьСтрокуВзаиморасчетыСДепонентамиОрганизаций(Выборка, ДокументВыплаты.Дата, ВидДвиженияНакопления.Расход, Движения.ВзаиморасчетыСДепонентамиОрганизаций);
						
					Иначе
						
						Если ОтражатьВБухгалтерскомУчете И ПроводкиБУ <> "" Тогда
							ДобавитьСтрокуВыполнитьПроводкуВыплатыЗарплаты(Выборка, ПроводкиБУ, Выборка.СчетУчета, СчетКт, ДокументВыплаты.Дата, СчетОрганизации, Касса); 
						КонецЕсли;
						
					КонецЕсли;	
					
					Если Выборка.РегистраторРанееВыплаченные <> NULL И Выборка.РегистраторРанееВыплаченные <> ДокументВыплаты Тогда
						// выплата по ФизЛицу и по ведомости уже производилась
					КонецЕсли;
					
					Если НЕ ЭтоВыплатаДепонента Тогда
						Если Не ЭтоДепонирование Тогда
							ДобавитьСтрокуВзаиморасчетыСРаботникамиОрганизаций( Выборка, НаборЗаписей, НаборЗаписейУпр  );
						Иначе
							ДобавитьСтрокуВзаиморасчетыСРаботникамиОрганизаций( Выборка, НаборЗаписей );
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьДвиженияПоЗарплате()

Процедура	ДобавитьСтрокуВзаиморасчетыСРаботникамиОрганизаций(Выборка, НаборЗаписей, НаборЗаписейУпр = Неопределено)
	
	Если	Выборка.СуммаВзаиморасчетов = 0
		И	Выборка.СуммаОкругления = 0
		Тогда
		Возврат;
	КонецЕсли;
	
	Если Выборка.ДокументРегистратор.Метаданные().Имя ="РасходныйКассовыйОрдер" Тогда
		мСпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
	ИначеЕсли Выборка.ДокументРегистратор.Метаданные().Имя = "ПлатежноеПоручениеИсходящее" Тогда
		мСпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк;
   	ИначеЕсли Выборка.ДокументРегистратор.Метаданные().Имя = "ПлатежныйОрдерНаСписаниеДенежныхСредств" Тогда
		мСпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк;
	Иначе
		мСпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ПустаяСсылка();
	КонецЕсли;	
	
	Если Выборка.Ведомость.ВидВыплаты = Справочники.ВидыВыплат.Очередная ИЛИ Выборка.Ведомость.ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов Тогда
		мХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	ИначеЕсли Выборка.Ведомость.ВидВыплаты = Справочники.ВидыВыплат.Аванс
		  или Выборка.Ведомость.ВидВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет ТОгда
		мХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс;
	Иначе 
		мХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПустаяСсылка();
	КонецЕсли;
		
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Выборка);
	Движение.СпособВыплаты = мСпособВыплаты;
	Движение.ХарактерВыплаты = мХарактерВыплаты;
	Движение.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата;
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	Движение.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов + Выборка.СуммаОкругления;	
	
	Если Выборка.УчетНачисленийПоОрганизации И Выборка.СуммаУпр <> 0 Тогда	
		Движение = НаборЗаписейУпр.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	КонецЕсли;
	
	Если Выборка.СуммаОкругления > 0 Тогда
		
		Движение = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		Движение.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.ПереносОстатковНаСледующийМесяц;
		Движение.ПериодВзаиморасчетов = ДобавитьМесяц(НачалоМесяца(Выборка.ПериодВзаиморасчетов),1);
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.СуммаВзаиморасчетов 	= - Выборка.СуммаОкругления;	
		Движение.СуммаОкругления = 0;

	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВзаиморасчетыСРаботникамиОрганизаций()

Процедура	ДобавитьСтрокуСведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям(Выборка, НаборЗаписей)
	
	Если	Выборка.СуммаВзаиморасчетов = 0
		И	Выборка.СуммаОкругления = 0
		Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Запись ИЗ НаборЗаписей Цикл
		Если Запись.Ведомость = Выборка.Ведомость 
			И Запись.Сотрудник = Выборка.Сотрудник
			И Запись.СчетУчета = Выборка.СчетУчета
		Тогда Возврат;
		КонецЕсли;
	КонецЦикла;
        			
	
	Движение = НаборЗаписей.Добавить();
	Движение.Ведомость = Выборка.Ведомость;
	Движение.Сотрудник = Выборка.Сотрудник;
	Движение.СчетУчета = Выборка.СчетУчета;
	
КонецПроцедуры // ДобавитьСтрокуСведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям()

Процедура	ДобавитьСтрокуВзаиморасчетыСДепонентамиОрганизаций(Выборка, Период, ВидДвижения, НаборЗаписей)
	
	Если	Выборка.СуммаВзаиморасчетов = 0
		И	Выборка.СуммаОкругления = 0
		Тогда
		Возврат;
	КонецЕсли;
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Выборка);
	Движение.ВидДвижения	= ВидДвижения;
	Движение.Сумма			= Выборка.СуммаВзаиморасчетов + Выборка.СуммаОкругления;	
	Если ВидДвижения = ВидДвиженияНакопления.Расход Тогда
		Движение.Ведомость	= Выборка.ВедомостьДепонента;
	КонецЕсли;	
	
КонецПроцедуры // ДобавитьСтрокуВзаиморасчетыСДепонентамиОрганизаций()

//Функция, которая возвращает текст запроса, в котором выбираются параметры заполнения платежных документов с учетом того
//что пустая организация = организация по умолчанию 
Функция ПолучитьПараметрыПлатежекПоВзносамВФонды(Организация,СтатьяНалоговойДекларации = Истина , СчетУчета = Истина, Контрагент = Истина, СчетКонтрагента = Истина) Экспорт
	//Какие записи считаем заполнеными для организации :
	//1. Те которые есть счета для самой организации
	//2. Те которых нет  счетов для самой организации, но которые есть для пустой организации.
	ТекстЗапроса =  "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация
	|	" + ?(СтатьяНалоговойДекларации," ,ПолныеСведения.СтатьяНалоговойДекларации КАК СтатьяНалоговойДекларации", "") + "
	|	" + ?(СчетУчета, ",ПолныеСведения.СчетУчета КАК СчетУчета" ,"") + "
	|	" + ?(Контрагент, ",ПолныеСведения.Контрагент КАК Контрагент","") + "
	|	" + ?(СчетКонтрагента,",ПолныеСведения.СчетКонтрагента КАК СчетКонтрагента","") + "	
	|ИЗ
	|	(
    |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		&Организация	КАК Организация
	|		" + ?(СтатьяНалоговойДекларации," ,Сведения.СтатьяНалоговойДекларации КАК СтатьяНалоговойДекларации", "") + "
	|		" + ?(СчетУчета, ",Сведения.СчетУчета КАК СчетУчета" ,"") + "
	|		" + ?(Контрагент, ",Сведения.Контрагент КАК Контрагент","") + "
	|		" + ?(СчетКонтрагента,",Сведения.СчетКонтрагента КАК СчетКонтрагента","") + "	
	|		ИЗ
	|			РегистрСведений.ПараметрыПлатежныхДокументовПоВзносамВФонды КАК Сведения
	|		ГДЕ
	|			Сведения.Организация = &Организация
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ

	|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация
	|		" + ?(СтатьяНалоговойДекларации," ,СведенияПоУмолчанию.СтатьяНалоговойДекларации КАК СтатьяНалоговойДекларации", "") + "
	|		" + ?(СчетУчета, ",СведенияПоУмолчанию.СчетУчета КАК СчетУчета" ,"") + "
	|		" + ?(Контрагент, ",СведенияПоУмолчанию.Контрагент КАК Контрагент","") + "
	|		" + ?(СчетКонтрагента,",СведенияПоУмолчанию.СчетКонтрагента КАК СчетКонтрагента","") + "	
	|	ИЗ
	|		РегистрСведений.ПараметрыПлатежныхДокументовПоВзносамВФонды КАК СведенияПоУмолчанию
	|	ГДЕ
	|		СведенияПоУмолчанию.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		И СведенияПоУмолчанию.СчетУчета НЕ В
	|		(	
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Сведения.СчетУчета КАК СчетУчета
	|		ИЗ
	|			РегистрСведений.ПараметрыПлатежныхДокументовПоВзносамВФонды КАК Сведения
	|		ГДЕ
	|			Сведения.Организация = &Организация
	|		)
	|	) КАК ПолныеСведения
	|";	
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ПолучитьТекстПоказателя(НеобходимыеДанные, ВидПВР, Предопределенный = Ложь, КоличествоПоказателей, КомментироватьРасчет)		
	
	Если 	НеобходимыеДанные.ОтработаноВремени или 
		НеобходимыеДанные.НормаВремениЗаМесяц или
		НеобходимыеДанные.Стаж или
		НеобходимыеДанные.Календарные или
		НеобходимыеДанные.СдельныйЗаработок или
		НеобходимыеДанные.База Тогда
		
		Показатель1Текст = "ВЫБОР ";
		Показатель1Текст = Показатель1Текст +
		?(НеобходимыеДанные.ОтработаноВремени, "
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВДнях) 
			|		ТОГДА ВЫБОР
			|			КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|				ТОГДА 0
			|			ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ДнейПоТабелю, ВЫБОР
			|								КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|									ТОГДА 0
			|								ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ДнейПоГрафику, ЕСТЬNULL(ВЫБОР
			|												КОГДА Основной.ВидУчетаВремени = &ПоДням
			|													ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|												ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|											КОНЕЦ, 0))
			|							КОНЕЦ)
			|		КОНЕЦ 
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВЧасах) 
			|		ТОГДА ВЫБОР
			|			КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
			|				ТОГДА 0
			|			ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ЧасовПоТабелю, ВЫБОР
			|								КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
			|									ТОГДА 0
			|								ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ЧасовПоГрафику, ЕСТЬNULL(ВЫБОР
			|												КОГДА Основной.ВидУчетаВремени = &ПоДням
			|													ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|												ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|											КОНЕЦ, 0)) - ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение, 0)
			|							КОНЕЦ)
			|		КОНЕЦ", "") +

		
		?(НеобходимыеДанные.НормаВремениЗаМесяц, "
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях)
		|		ТОГДА Основной.НормаДнейЗаМесяц
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах)
		|		ТОГДА Основной.НормаЧасовЗаМесяц 
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВДнях)
		|		ТОГДА ВЫБОР КОГДА Основной.ВидУчетаВремени = &ПоДням 
		|				ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия 
		|				ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия 
		|			КОНЕЦ
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВЧасах)
		|		ТОГДА ВЫБОР КОГДА Основной.ВидУчетаВремени = &ПоДням 
		|				ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия 
		|			ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия 
		|		КОНЕЦ", "");
		
		Если ВидПВР = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
			Показатель1Текст = Показатель1Текст +		
			?(НеобходимыеДанные.База, "
			|	КОГДА Основной.ВидРасчета.БазаПоНазначению И Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза)
			|		ТОГДА БазаНазначения.РезультатБаза
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза)
			|		ТОГДА База.РезультатБаза
			|	КОГДА Основной.ВидРасчета.БазаПоНазначению И Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБазаВремяВДнях)
			|		ТОГДА БазаНазначения.ОтработаноДнейБаза
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБазаВремяВДнях)
			|		ТОГДА База.ОтработаноДнейБаза
			|	КОГДА Основной.ВидРасчета.БазаПоНазначению И Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБазаВремяВЧасах)
			|		ТОГДА БазаНазначения.ОтработаноЧасовБаза
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБазаВремяВЧасах)
			|		ТОГДА База.ОтработаноЧасовБаза
			|	КОГДА Основной.ВидРасчета.БазаПоНазначению И Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБазаОплаченоДнейЧасов)
			|		ТОГДА БазаНазначения.ОплаченоДнейЧасовБаза
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБазаОплаченоДнейЧасов)
			|		ТОГДА База.ОплаченоДнейЧасовБаза", "");
		Иначе
			Показатель1Текст = Показатель1Текст +		
			?(НеобходимыеДанные.База, "
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза)
			|		ТОГДА База.РезультатБаза", "");

		КонецЕсли;
		Показатель1Текст = Показатель1Текст +
		?(НеобходимыеДанные.СдельныйЗаработок, "
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.СдельнаяВыработка) 
		|		ТОГДА ВЫБОР
		|			КОГДА ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ)
		|				ТОГДА 0
		|			ИНАЧЕ ДанныеОСдельномЗаработке.СуммаЗаработка
		|		КОНЕЦ", "");
		
		Показатель1Текст = Показатель1Текст+
			?(НеобходимыеДанные.Стаж, "                 
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.Стаж)
			|		ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(Основной.Сотрудник.ДатаПриемаНаРаботу,ДЕНЬ,-1), Основной.БазовыйПериодКонец, МЕСЯЦ)", ""); 
		
		Если Предопределенный ИЛИ КоличествоПоказателей = 0 Тогда
			
			Показатель1Текст = Показатель1Текст + "				
			|ИНАЧЕ 0
			|КОНЕЦ ";
		Иначе
			Показатель1Текст = Показатель1Текст + "				
			|ИНАЧЕ ВЫБОР КОГДА Показатели.Показатель1.ТипПоказателя В (&ШкальныеПоказатели)
			|		ТОГДА Показатели.Показатель1
			|	    ИНАЧЕ  Основной.Показатель1 / ВЫБОР КОГДА Показатели.Показатель1.ТипПоказателя В (&ПроцентныеПоказатели) ТОГДА 100 ИНАЧЕ 1 КОНЕЦ
			|КОНЕЦ КОНЕЦ";
			
		КонецЕсли;
	Иначе
		Если Предопределенный ИЛИ КоличествоПоказателей = 0 Тогда
			
			Показатель1Текст = Показатель1Текст + "				
			|ИНАЧЕ 0
			|КОНЕЦ ";
		Иначе
			
			Показатель1Текст = "ВЫБОР 
			|КОГДА Показатели.Показатель1.ТипПоказателя В (&ШкальныеПоказатели)
			|		ТОГДА Показатели.Показатель1
			|	  	ИНАЧЕ  Основной.Показатель1 / ВЫБОР КОГДА Показатели.Показатель1.ТипПоказателя В (&ПроцентныеПоказатели) ТОГДА 100 ИНАЧЕ 1 КОНЕЦ
			|КОНЕЦ";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Показатель1Текст;
	
КонецФункции //ПолучитьТекстПоказателя


//Функция выполняет оценку значения по оценочной шкале
//	Параметр:
//		Показатель - значение, которое оцениванием
//		Шкала - показатель - оценочная шкала
//	Возвращает:
//		Значение, которое соответствует оценочной шкале
//
Функция ОценитьПо(Показатель, Шкала) Экспорт 
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 	
	  "ВЫБРАТЬ
	 |	ВЫБОР
	 |		КОГДА СоставШкалОценкиПоказателейРасчета.ШкалаОценкиПоказателя.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)
	 |			ТОГДА СоставШкалОценкиПоказателейРасчета.Размер / 100
	 |		ИНАЧЕ СоставШкалОценкиПоказателейРасчета.Размер
	 |	КОНЕЦ КАК Значение
	 |ИЗ
	 |	РегистрСведений.СоставШкалОценкиПоказателейРасчета КАК СоставШкалОценкиПоказателейРасчета
	 |ГДЕ
	 |	СоставШкалОценкиПоказателейРасчета.ШкалаОценкиПоказателя = &Шкала
	 |	И &Показатель > СоставШкалОценкиПоказателейРасчета.ЗначениеС
	 |			И &Показатель <= СоставШкалОценкиПоказателейРасчета.ЗначениеПо";
	 
	 Запрос.УстановитьПараметр("Показатель", Показатель);
	 Запрос.УстановитьПараметр("Шкала", Шкала);
	 
	 Запрос.Текст = ТекстЗапроса;
	 Выборка = Запрос.Выполнить().Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
		 
		 Возврат Выборка.Значение;
		 
	 КонецЦикла;
	 
	 ОбщегоНазначения.СообщитьОбОшибке("Не выполнена оценка по шкале!");
	 Возврат 0;
	
КонецФункции //ОценитьПо

// Эта функция возвращает информацию о виде расчета из переданного соответствия
// Если в соответствии не найдена информация о виде расчета - она подготавливается и 
// помещается в соответствие
// Применяется для работы с формами, в которых активно требуется получать 
// информащцию о видах расчета, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОВидахРасчета - соответствие, у котрого в качестве ключа - ПланВидовРасчетаСсылка, а 
//  				  в качестве значения - структура из элементов
//					  РазмерТребуется - булево - если да, то при вводе такого 
//										вида расчета требуется проставлять значение "размер" 
//										(суммы, проценты и проч. показатели, используемые при расчете)
//
//	ВидРасчета - ПланВидовРасчетаСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета, Режим = "ПлановыеНачисления") Экспорт
	
	СведенияОВидеРасчета = СведенияОВидахРасчета[ВидРасчета];
	
	Если СведенияОВидеРасчета = Неопределено Тогда
		ТипВидРасчета = ТипЗнч(ВидРасчета);
		ИзменениеПоказателяНеУказано = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
				
		СведенияОВидеРасчета = Новый Структура("КоличествоПоказателей,РазмерТребуется,НеТребуетВалюты,ТребуетВводаТарифногоРазряда,ФактКоличествоПоказателей",1, Ложь, Ложь, Ложь,0);
																					
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Показатели.Показатель,
		|	ВЫБОР
		|		КОГДА  НЕ Показатели.ЗапрашиватьПриКадровыхПеремещениях
		|			ТОГДА ИСТИНА
		|       ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НЕЗапрашиватьПриКадровыхПеремещениях,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ПустаяСсылка) 
		|			ТОГДА ИСТИНА
		|	    ИНАЧЕ Показатели.Показатель.Предопределенный
		|	КОНЕЦ КАК Предопределенный,
		|	ВЫБОР КОГДА Показатели.Показатель.Предопределенный ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПредопределенный,
		|	Показатели.Показатель.Наименование КАК ПоказательНаименование,
		|	Показатели.Показатель.ТипПоказателя,
		|	ЕСТЬNULL(Показатели.Показатель.ВозможностьИзменения, ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)) КАК ПоказательВозможностьИзменения,
		|	Показатели.НомерСтроки,
		|	Максимум(Показатели.НомерСтроки) КАК КоличествоПоказателей
		|ИЗ ПланВидовРасчета."+ВидРасчета.Метаданные().Имя+".Показатели КАК Показатели
		////Если ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
		////	Запрос.Текст = Запрос.Текст + "
		////	|	ПланВидовРасчета."+ВидРасчета.Метаданные().Имя+".Показатели КАК Показатели";
		////ИначеЕсли ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.Удержания") Тогда
		////	Запрос.Текст = Запрос.Текст + "
		////	|	ПланВидовРасчета.Удержания.Показатели КАК Показатели";
		////КонецЕсли;
		////Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	Показатели.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	Показатели.Показатель,
		|	ВЫБОР
		|		КОГДА  НЕ Показатели.ЗапрашиватьПриКадровыхПеремещениях
		|			ТОГДА ИСТИНА
		|       ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель = Значение(Справочник.ПоказателиСхемМотивации.ПустаяСсылка) 
		|			ТОГДА ИСТИНА
		|	    ИНАЧЕ Показатели.Показатель.Предопределенный
		|	КОНЕЦ,
		|	Показатели.Показатель.Наименование,
		|	Показатели.Показатель.ТипПоказателя,
		|	ЕСТЬNULL(Показатели.Показатель.ВозможностьИзменения, ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)),
		|	Показатели.НомерСтроки";
		
		Запрос.УстановитьПараметр("Ссылка",ВидРасчета);

		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			СтрокаТаблицыСведений = РезультатЗапроса.Выбрать();
			Пока СтрокаТаблицыСведений.Следующий() Цикл
				
				СведенияОВидеРасчета["КоличествоПоказателей"] = Макс(СведенияОВидеРасчета["КоличествоПоказателей"], СтрокаТаблицыСведений["КоличествоПоказателей"]);
				СведенияОВидеРасчета["ФактКоличествоПоказателей"] = Макс(СтрокаТаблицыСведений["КоличествоПоказателей"],СведенияОВидеРасчета["ФактКоличествоПоказателей"]);
				
				СчПоказателей 			= СтрокаТаблицыСведений.НомерСтроки;
				
				ВозможностьИзменения	= СтрокаТаблицыСведений["ПоказательВозможностьИзменения"];
				ТипПоказателя			= СтрокаТаблицыСведений["ПоказательТипПоказателя"];
				
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность",3);
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "ВозможностьИзменения",СтрокаТаблицыСведений["ПоказательВозможностьИзменения"]);
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Наименование",СтрокаТаблицыСведений["ПоказательНаименование"]);
				
				СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей ,СтрокаТаблицыСведений["Показатель"]);
				

				Если СтрокаТаблицыСведений["НЕЗапрашиватьПриКадровыхПеремещениях"] <> Null
					И СтрокаТаблицыСведений["НЕЗапрашиватьПриКадровыхПеремещениях"] 
					И Не СтрокаТаблицыСведений["ЭтоПредопределенный"] Тогда
					Если Режим = "ПлановыеНачисления" Тогда
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
				   Иначе
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" ,Истина);
						Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Числовой Тогда
							
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							
						ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда

							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность",2);
							
							
						ИначеЕсли (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
							Или (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная) Тогда

							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							
						Иначе
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
							СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
							СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
							СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
							
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли СтрокаТаблицыСведений["Предопределенный"] <> Null И СтрокаТаблицыСведений["Предопределенный"] Тогда
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
					СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
					
				ИначеЕсли Режим = "ПлановыеНачисления" 
					и (СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете
					Или СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете) Тогда
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость", Ложь);
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость" , Ложь);
					СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость" , Ложь);
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость" , Ложь);
					СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость" , Ложь);
					
				Иначе
					СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "НаименованиеВидимость" ,Истина);
					Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Числовой Тогда

						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
						
					ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный Тогда
						
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Точность",2);
						
						
					ИначеЕсли (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
						Или (ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная) Тогда
						
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Ложь);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
						
					Иначе
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "НаименованиеВидимость", Ложь);
						СведенияОВидеРасчета.Вставить("ПоказательТР" + СчПоказателей + "Видимость", Ложь);						
						СведенияОВидеРасчета.Вставить("Показатель" + СчПоказателей + "Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта" + СчПоказателей + "Видимость", Ложь);
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СведенияОВидеРасчета.Вставить("Показатель1Наименование", "");
			СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель1Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель1Точность", 2);
			СведенияОВидеРасчета.Вставить("Показатель1ВозможностьИзменения", Ложь);
			СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Ложь);


			СведенияОВидеРасчета.Вставить("Показатель2Наименование", "");
			СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель2Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Валюта2Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель2Точность", 2);
			СведенияОВидеРасчета.Вставить("Показатель2ВозможностьИзменения", Ложь);
			
			СведенияОВидеРасчета.Вставить("ПоказательТР2НаименованиеВидимость", Ложь);
			СведенияОВидеРасчета.Вставить("ПоказательТР2Видимость", Ложь);
			СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Ложь);

			
		КонецЕсли;
		
		// заполним для регламентированных способов оплаты труда
		Если ЗначениеЗаполнено(ВидРасчета) И (ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций")
				Или ТипВидРасчета = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций")) Тогда
			СтруктураВидаРасчета = Новый Структура("СпособРасчета,ТребуетВводаТарифногоРазряда");
			ЗаполнитьЗначенияСвойств(СтруктураВидаРасчета,ВидРасчета);
			Если СтруктураВидаРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
				СведенияОВидеРасчета.Вставить("ФактКоличествоПоказателей",0);
				СведенияОВидеРасчета["Показатель1Точность"] = 3;
				Если СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент оплаты");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке	
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
					Если СтруктураВидаРасчета.ТребуетВводаТарифногоРазряда Тогда
						СведенияОВидеРасчета.Вставить("ПоказательТР1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("ПоказательТР1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("ПоказательТР1Наименование", "Тарифный разряд");
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					Иначе
						СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Оклад/Тариф");
						СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
						СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					КонецЕсли;	
				ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
					СведенияОВидеРасчета["КоличествоПоказателей"] = 2;
					СведенияОВидеРасчета["ФактКоличествоПоказателей"] = 2;
					Если Режим = "ПлановыеНачисления" Тогда
						СведенияОВидеРасчета["Показатель1Наименование"] = "Часовой тариф";
						СведенияОВидеРасчета["Показатель1Видимость"] = Ложь;
						СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Ложь;				
						СведенияОВидеРасчета["Валюта1Видимость"] = Ложь;
						СведенияОВидеРасчета["Показатель2Наименование"] = "Процент доплаты";
						СведенияОВидеРасчета["Показатель2Видимость"] = Истина;
						СведенияОВидеРасчета["Показатель2НаименованиеВидимость"] = Истина;				
						СведенияОВидеРасчета["Валюта2Видимость"] = Ложь;
					Иначе
						СведенияОВидеРасчета["Показатель1Наименование"] = "Часовой тариф";
						СведенияОВидеРасчета["Показатель1Видимость"] = Истина;
						СведенияОВидеРасчета["Показатель1НаименованиеВидимость"] = Истина;				
						СведенияОВидеРасчета["Валюта1Видимость"] = Истина;
						СведенияОВидеРасчета["Показатель2Наименование"] = "Процент доплаты";
						СведенияОВидеРасчета["Показатель2Видимость"] = Истина;
						СведенияОВидеРасчета["Показатель2НаименованиеВидимость"] = Истина;				
						СведенияОВидеРасчета["Валюта2Видимость"] = Ложь;
					КонецЕсли;
					
			ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
				ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуКомпенсацияОтпуска Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);
					
					СведенияОВидеРасчета.Вставить("Показатель2Наименование", "Время");
					СведенияОВидеРасчета.Вставить("Показатель2Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель2НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта2Видимость", Ложь);
				ИначеЕсли СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент среднего заработка");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Ложь);	
				ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Сумма");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					
				ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом 
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.АлиментыПроцентом 
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела
					Или СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.АлиментыПроцентомДоПредела Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент удержаний");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
				ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела
					Или  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.АлиментыФиксСуммойДоПредела
					Или  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммой
					Или  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.АлиментыФиксСуммой Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Фиксированная сумма");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
				ИначеЕсли  СтруктураВидаРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
					СведенияОВидеРасчета.Вставить("Показатель1Наименование", "Процент сбора");
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
				ИначеЕсли СпособРасчетаТребуетРазмер(СтруктураВидаРасчета.СпособРасчета) Тогда
					СведенияОВидеРасчета.Вставить(СведенияОВидеРасчета.РазмерТребуется, Истина);
					СведенияОВидеРасчета.Вставить("Показатель1НаименованиеВидимость", Истина);
					СведенияОВидеРасчета.Вставить("Показатель1Видимость", Истина);
					Если НЕ СпособРасчетаНеТребуетВалюты(СтруктураВидаРасчета.СпособРасчета) И Найти(Строка(СтруктураВидаРасчета.СпособРасчета), "П1") = 0 Тогда
						СведенияОВидеРасчета.Вставить("Валюта1Видимость", Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СведенияОВидахРасчета[ВидРасчета] = СведенияОВидеРасчета;
	КонецЕсли;

	Возврат СведенияОВидеРасчета;
	
КонецФункции  // ПолучитьСведенияОВидеРасчетаСхемыМотивации

Процедура УдалитьЗаписиПерерасчетаПоЗаполнениеПлановыхНачислений(Регистратор, НаборЗаписей, Сотрудники) Экспорт
	
	// Удаляет записи перерасчета по которым выполнен перерасчет
	НаборЗаписей.Отбор.ОбъектЗаполнения.Значение = Регистратор;
	НаборЗаписей.Прочитать();
	
	// обходим в обратном порядке
	ПоследнееДвижение = НаборЗаписей.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		Движение = НаборЗаписей[ПоследнееДвижение - Сч];
		Если Сотрудники.НайтиПоЗначению(Движение.Сотрудник) <> Неопределено Тогда
			Если Движение.ОбъектЗаполнения = Регистратор Тогда
				НаборЗаписей.Удалить(ПоследнееДвижение - Сч);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЗаписиПерерасчетаПоРегиструРасчета(Регистратор, НаборЗаписей, Сотрудники) Экспорт
	
	// Удаляет записи перерасчета по которым выполнен перерасчет
	НаборЗаписей.Отбор.ОбъектПерерасчета.Значение = Регистратор;
	НаборЗаписей.Прочитать();
	
	// обходим в обратном порядке
	ПоследнееДвижение = НаборЗаписей.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		Движение = НаборЗаписей[ПоследнееДвижение - Сч];
		Если Сотрудники.НайтиПоЗначению(Движение.Сотрудник) <> Неопределено Тогда
			Если Движение.ОбъектПерерасчета = Регистратор Тогда
				НаборЗаписей.Удалить(ПоследнееДвижение - Сч);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Показатели, Режим, ВыводитьИдентификатор = Ложь) Экспорт
	
	Числа = "0123456789";
	
	
	ОператорыИФункции				=  ".,+,-,/,*,ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,?,=,<,>,<=,>=,ОЦЕНИТЬПО,(,),И,ИЛИ,НЕ,OR,AND,NOT";
	ОператорыИФункцииОднойСтрокой	=  ".,+,-,/,*,?,=,<,>,(,)";
	
	МассивРазделителей = Новый Массив;
	МассивРазделителей.Добавить(" ");
	МассивРазделителей.Добавить(Символы.ВК);
	МассивРазделителей.Добавить(Символы.ВТаб);
	МассивРазделителей.Добавить(Символы.НПП);
	МассивРазделителей.Добавить(Символы.ПС);
	МассивРазделителей.Добавить(Символы.ПФ);
	МассивРазделителей.Добавить(Символы.Таб);
	
	СловоСобрано		= Ложь;
	НайденПоказатель	= Ложь;
	
	Слово = "";
	
	ДлинаСтроки					= СтрДлина(ФормулаРасчета);
	НовыйHTMLКодФормулыРасчета	= "";
	
	
	// разбор слов
	НомерАнализируемогоСимвола = 1;
	Пока НомерАнализируемогоСимвола <= ДлинаСтроки Цикл
		
		Символ = Сред(ФормулаРасчета, НомерАнализируемогоСимвола, 1);
		
		Если Символ = "." И Слово = "ИсходныеДанные" и Сред(ФормулаРасчета, НомерАнализируемогоСимвола+1, 10) = "Показатель" Тогда
			
			
			НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 10;
			НомерПоказателя = "";
			ШагВнутриЦикла = 0;
			ПродолжитьЦикл = Истина;
			Пока ПродолжитьЦикл Цикл
				
				НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 1;
				СимволДляСравненияСЧислом = Сред(ФормулаРасчета, НомерАнализируемогоСимвола, 1);
				Если Найти(Числа, СимволДляСравненияСЧислом) <> 0 Тогда
					НомерПоказателя = НомерПоказателя + СимволДляСравненияСЧислом;
					ПродолжитьЦикл  = (НомерАнализируемогоСимвола <= ДлинаСтроки);
				Иначе
					ПродолжитьЦикл = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Режим = "Текст" Тогда
				Если ВыводитьИдентификатор Тогда
					ПоказательДляФормулы = Строка(Показатели[Число(НомерПоказателя) - 1].Показатель.Идентификатор);
				Иначе
					ПоказательДляФормулы = Строка(Показатели[Число(НомерПоказателя) - 1].Показатель);
				КонецЕсли;
			Иначе
				ПоказательДляФормулы = "<FONT color=#0000ff>" + Строка(Показатели[Число(НомерПоказателя) - 1].Показатель)+"</FONT>";
			КонецЕсли;
			
			НовыйHTMLКодФормулыРасчета = НовыйHTMLКодФормулыРасчета + ПоказательДляФормулы;
			
			НайденПоказатель = Истина;
			
			Слово = "";
			
		ИначеЕсли  МассивРазделителей.Найти(Символ) <> Неопределено Или Найти(ОператорыИФункцииОднойСтрокой, Символ) Тогда
			
			СловоСобрано = Истина;
			НайденПоказатель = Ложь;
			Слово = Слово + Символ;
		Иначе
			
			// символ не разделитель, можно его добавить к слову
			Слово = Слово + Символ;
			Если ДлинаСтроки = НомерАнализируемогоСимвола Тогда 
				СловоСобрано = Истина;
			КонецЕсли;
			НайденПоказатель = Ложь;
		КонецЕсли;
		
		Если СловоСобрано И Не НайденПоказатель Тогда
			//	ФормулаРасчета	= СтрЗаменить(ФормулаРасчета, "ИсходныеДанные.Показатель"+Показатель.НомерСтроки, ПоказательДляФормулы);
			НовыйHTMLКодФормулыРасчета = НовыйHTMLКодФормулыРасчета + Слово;
			СловоСобрано = Ложь;
			Слово = "";
		КонецЕсли;
		
		Если НЕ НайденПоказатель Тогда
			НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйHTMLКодФормулыРасчета;
	
КонецФункции //ПолучитьHTLMКодФормулыРасчета

// Процедура обеспечивает ввод формульных начислений и удержаний
Процедура УстановитьПараметрыВидаРасчета(Параметр, Объект, Элементыформы) Экспорт
	
	Объект.ФормулаРасчета				= Параметр[0];
	Объект.СпособРасчета 				= Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
	Объект.ПроизвольнаяФормулаРасчета	= Истина;
	
	ПарамПоказатели = Параметр[1];
	
	ОбъектПоказатели = Объект.Показатели;
	ОбъектПоказатели.Очистить();
	Для Каждого ОбъектПоказатель Из ОбъектПоказатели Цикл
		Если ПарамПоказатели.Найти(ОбъектПоказатель.Показатель) = Неопределено Тогда
			ОбъектПоказатель.Показатель = Справочники.ПоказателиСхемМотивации.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	Для Каждого Показатель Из ПарамПоказатели Цикл
		Если ОбъектПоказатели.Найти(Показатель,"Показатель") = Неопределено Тогда
			НовыйПоказатель				= Объект.Показатели.Добавить();
			
			Если	Показатель.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная 
				И	Показатель.ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая 
				И	Показатель.ВозможностьИзменения <> Перечисления.ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете 
				И	Показатель.ВозможностьИзменения <> Перечисления.ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете Тогда
				
				Если (Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная) ИЛИ (Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая) ИЛИ (Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная) Тогда
					Если Объект.Метаданные().Реквизиты.Найти("ЗачетОтработанногоВремени") = Неопределено Тогда
						НовыйПоказатель.ЗапрашиватьПриКадровыхПеремещениях = Ложь;
					ИначеЕсли Объект.ЗачетОтработанногоВремени Тогда
						НовыйПоказатель.ЗапрашиватьПриКадровыхПеремещениях = Истина;
					Иначе
						НовыйПоказатель.ЗапрашиватьПриКадровыхПеремещениях = Ложь;
					КонецЕсли;
				Иначе
					НовыйПоказатель.ЗапрашиватьПриКадровыхПеремещениях = Истина;
				КонецЕсли;
			КонецЕсли;
			НовыйПоказатель.Показатель	= Показатель;
		КонецЕсли;
	КонецЦикла;
				
	Элементыформы.СпособРасчетаПредставление.УстановитьТекст(ВизуализироватьФормулуРасчета(Объект, "HTML"));
	
КонецПроцедуры

Процедура ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, ЭтоНачисление, Отказ, Заголовок, ИспользуютсяНачисленияВВалюте, СоответствиеВалютныеСпособыРасчета = Неопределено) Экспорт
	
	Если ВыборкаПоСтрокамДокумента.ПроизвольнаяФормулаРасчета Тогда
		Для СчПоказателя = 1 По Мин(ВыборкаПоСтрокамДокумента.КоличествоПоказателей, 6) Цикл
			ТипПоказателя = ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "ТипПоказателя"];
			ВозможностьИзменения = ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "ВозможностьИзменения"];
			ЗапрашиватьПриКадровыхПеремещениях = ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "ЗапрашиватьПриКадровыхПеремещениях"];
			Если ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется И ЗапрашиватьПриКадровыхПеремещениях
				Или ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете	Тогда
				
				// проверка постоянных показателей
				Если ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя] = 0 Тогда
					// размер 
					Если Не ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя + "Предопределенный"]
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " не указан размер показателя " + ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя+"Наименование"], Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
				Если ЭтоНачисление Тогда
					Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["ТарифныйРазряд" + СчПоказателя])
						и ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан размер тарифа " + ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателя+"Наименование"], Отказ, Заголовок);
					КонецЕсли;	
				КонецЕсли;	
				// валюта (для денежного показателя)
				Если ИспользуютсяНачисленияВВалюте Тогда
					Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный 
						и НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["Валюта" + СчПоказателя]) 
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке +  "не указана валюта!", Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ИспользуютсяНачисленияВВалюте Тогда
			// Валюта
			Если ВыборкаПоСтрокамДокумента.КоличествоПоказателей > 0 
				И (Не ЭтоНачисление Или Не ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда)
				И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Валюта1) 
				И СоответствиеВалютныеСпособыРасчета[ВыборкаПоСтрокамДокумента.СпособРасчета] 
				И СпособРасчетаТребуетРазмер(ВыборкаПоСтрокамДокумента.СпособРасчета) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задана валюта!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		// Размер оплаты
		Если ВыборкаПоСтрокамДокумента.КоличествоПоказателей > 0 И ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить И СпособРасчетаТребуетРазмер(ВыборкаПоСтрокамДокумента.СпособРасчета) Тогда
			Если ЭтоНачисление И ВыборкаПоСтрокамДокумента.Показатель1 = 0 и Не ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан размер начисления!", Отказ, Заголовок);
			ИначеЕсли ЭтоНачисление И ВыборкаПоСтрокамДокумента.ТарифныйРазряд1.Пустая() И ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан разряд!", Отказ, Заголовок);
			ИначеЕсли Не ЭтоНачисление И ВыборкаПоСтрокамДокумента.Показатель1 = 0 Тогда 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан размер удержания!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
			
		
	КонецЕсли;
	
КонецПроцедуры //ПроверкаПоказаетелей


////////////////////////////////////////////////////////////////////////////////
// ОБСЛУЖИВАНИЕ ПЕРЕРАСЧЕТОВ
// 

// процедура выполняет дописывание наборов записей перерасчетов основных начислений по 
// переданной выборке
// выборка должна содержать уникальные комбинации Физлицо+Регистратор (т.е. ОбъектПерерасчета)
// которых еще нет в таблице перерасчета
Процедура ДописатьПерерасчетыОсновныхНачислений(Выборка) Экспорт
	Наборы = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Набор = Наборы[Выборка.Регистратор];
		Если Набор = Неопределено Тогда
			Набор = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектПерерасчета.Значение = Выборка.Регистратор;
			Набор.Отбор.ОбъектПерерасчета.Использование = Истина;
			Наборы.Вставить(Выборка.Регистратор, Набор);
		КонецЕсли;
		НоваяСтрока = Набор.Добавить();
		НоваяСтрока.ОбъектПерерасчета	= Выборка.Регистратор;
		НоваяСтрока.Сотрудник			= Выборка.Сотрудник;
		НоваяСтрока.Назначение			= Выборка.Назначение;
		НоваяСтрока.Организация			= Выборка.Организация;
	КонецЦикла;
	Для Каждого ЭлементСтруктуры Из Наборы Цикл
		// дописываем набор записей по данному объекту перерасчета
		ЭлементСтруктуры.Значение.Записать(Ложь);
	КонецЦикла;
КонецПроцедуры

// Процедура выполняет дописывание наборов записей перерасчетов в
// регистр сведений ЗаполнениеПлановыхНачислений
//
Процедура ДописатьПерерасчетыВЗаполнениеПлановыхНачислений(Выборка) Экспорт
	
	Наборы = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Набор = Наборы[Выборка.ОбъектЗаполнения];
		Если Набор = Неопределено Тогда
			Набор = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектЗаполнения.Значение = Выборка.ОбъектЗаполнения;
			Набор.Отбор.ОбъектЗаполнения.Использование = Истина;
			Наборы.Вставить(Выборка.ОбъектЗаполнения, Набор);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Набор.Добавить(),Выборка);
	КонецЦикла;
		
	Для Каждого ЭлементыСтруктуры Из Наборы Цикл
		ЭлементыСтруктуры.Значение.Записать(Ложь);
	КонецЦикла;
	
КонецПроцедуры // ДописатьПерерасчетыВЗаполнениеПлановыхНачислений()

Процедура ОбработатьТаблицуПерерасчетов(Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перерасчеты.ОбъектПерерасчета КАК ОбъектПерерасчетаОсновные
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчеты
	|		ПО Начисления.СторнируемыйДокумент = Перерасчеты.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = Перерасчеты.ФизЛицо
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И Начисления.Сторно";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаОбъектПерерасчета = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОбъектПерерасчета.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные) Тогда
			НаборЗаписейПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные;
			НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
			НаборЗаписейПерерасчета.Записать();	
		КонецЕсли;
	КонецЦикла;
	

КонецПроцедуры

// Обрабатывает и возвращает таблицу сторно записей, добавляя колонку СторнируемыйДокумент
//
// Параметры
//  ТаблицаСторноЗаписей  – <Таблица значений> – таблица сторно записей
//
// Возвращаемое значение:
//   <Таблица значений>   – таблица сторно записей в которую добавлена колонка СторнируемыйДокумент
//
Функция ПолучитьТаблицуСторноЗаписей(ТаблицаСторноЗаписей) Экспорт

	Если ТаблицаСторноЗаписей.Количество() = 0 Тогда
		Возврат ТаблицаСторноЗаписей;
	КонецЕсли;	
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСторноЗаписей.Сотрудник КАК Сотрудник,
	|	ТаблицаСторноЗаписей.ВидРасчета КАК ВидРасчета,
	|	ТаблицаСторноЗаписей.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаСторноЗаписей.ПериодРегистрацииСторно,
	|	ТаблицаСторноЗаписей.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ТаблицаСторноЗаписей.ПериодДействияКонец КАК ПериодДействияКонец,
	|	ТаблицаСторноЗаписей.ПериодДействияНачалоСторно,
	|	ТаблицаСторноЗаписей.ПериодДействияКонецСторно,
	|	ТаблицаСторноЗаписей.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ТаблицаСторноЗаписей.БазовыйПериодНачало,
	|	ТаблицаСторноЗаписей.БазовыйПериодКонец,
	|	ТаблицаСторноЗаписей.ФизЛицо,
	|	ТаблицаСторноЗаписей.Организация,
	|	ТаблицаСторноЗаписей.ГрафикРаботы,
	|	ТаблицаСторноЗаписей.ГрафикРаботыНорма,
	|	ТаблицаСторноЗаписей.ВидУчетаВремени,
	|	ТаблицаСторноЗаписей.Показатель1,
	|	ТаблицаСторноЗаписей.Показатель2,
	|	ТаблицаСторноЗаписей.Показатель3,
	|	ТаблицаСторноЗаписей.Показатель4,
	|	ТаблицаСторноЗаписей.Показатель5,
	|	ТаблицаСторноЗаписей.Показатель6,
	|	ТаблицаСторноЗаписей.ПодразделениеОрганизации,
	|	ТаблицаСторноЗаписей.ОбособленноеПодразделение,
	|	ТаблицаСторноЗаписей.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ТаблицаСторноЗаписей.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ТаблицаСторноЗаписей.Авторасчет,
	|	ТаблицаСторноЗаписей.ДополнительныеДанные,
	|	ТаблицаСторноЗаписей.ВариантАлгоритмаРасчета
	|ПОМЕСТИТЬ ВТ_ТаблицаСторноЗаписей
	|ИЗ
	|	&ТаблицаСторноЗаписей КАК ТаблицаСторноЗаписей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодРегистрации,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	ДатаНачалаСобытия";
	
	Запрос.УстановитьПараметр("ТаблицаСторноЗаписей", ТаблицаСторноЗаписей);
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОсновныеНачисления.Регистратор КАК СторнируемыйДокумент,
	|	ТаблицаСторноЗаписей.Сотрудник,
	|	ТаблицаСторноЗаписей.ВидРасчета КАК ВидРасчета,
	|	ТаблицаСторноЗаписей.ПериодРегистрации,
	|	ТаблицаСторноЗаписей.ПериодРегистрацииСторно,
	|	ТаблицаСторноЗаписей.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ТаблицаСторноЗаписей.ПериодДействияКонец,
	|	ТаблицаСторноЗаписей.ПериодДействияНачалоСторно,
	|	ТаблицаСторноЗаписей.ПериодДействияКонецСторно,
	|	ТаблицаСторноЗаписей.ДатаНачалаСобытия,
	|	ТаблицаСторноЗаписей.БазовыйПериодНачало,
	|	ТаблицаСторноЗаписей.БазовыйПериодКонец,
	|	ТаблицаСторноЗаписей.ФизЛицо,
	|	ТаблицаСторноЗаписей.Организация,
	|	ТаблицаСторноЗаписей.ГрафикРаботы,
	|	ТаблицаСторноЗаписей.ГрафикРаботыНорма,
	|	ТаблицаСторноЗаписей.ВидУчетаВремени,
	|	ТаблицаСторноЗаписей.Показатель1,
	|	ТаблицаСторноЗаписей.Показатель2,
	|	ТаблицаСторноЗаписей.Показатель3,
	|	ТаблицаСторноЗаписей.Показатель4,
	|	ТаблицаСторноЗаписей.Показатель5,
	|	ТаблицаСторноЗаписей.Показатель6,
	|	ТаблицаСторноЗаписей.ПодразделениеОрганизации,
	|	ТаблицаСторноЗаписей.ОбособленноеПодразделение,
	|	ТаблицаСторноЗаписей.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ТаблицаСторноЗаписей.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ТаблицаСторноЗаписей.Авторасчет,
	|	ТаблицаСторноЗаписей.ДополнительныеДанные,
	|	ТаблицаСторноЗаписей.ВариантАлгоритмаРасчета
	|ИЗ
	|	ВТ_ТаблицаСторноЗаписей КАК ТаблицаСторноЗаписей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	|		ПО ТаблицаСторноЗаписей.Сотрудник = ОсновныеНачисления.Сотрудник
	|			И ТаблицаСторноЗаписей.ВидРасчета = ОсновныеНачисления.ВидРасчета
	|			И ТаблицаСторноЗаписей.ПериодРегистрации = ОсновныеНачисления.ПериодРегистрации
	|			И ТаблицаСторноЗаписей.ПериодДействияНачало = ОсновныеНачисления.ПериодДействияНачало
	|			И ТаблицаСторноЗаписей.ПериодДействияКонец = ОсновныеНачисления.ПериодДействияКонец
	|			И ТаблицаСторноЗаписей.ДатаНачалаСобытия = ОсновныеНачисления.ДатаНачалаСобытия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидРасчета,
	|	ПериодДействияНачало
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();	

КонецФункции // ПолучитьТаблицуСторноЗаписей()

// Функция получает по таблице начислений таблицу зависимых начислений
//
// Параметры
//  ТаблицаНачислений  – <Таблица значений> – таблица начислений по которым необходимо собрать зависимые начисления
//  
// Возвращаемое заначение - – <Таблица значений>
Функция ПолучитьТаблицуЗависимыхНачисленийОсновные(ТаблицаНачислений) Экспорт

	Если ТаблицаНачислений.Количество() = 0 Тогда
		Возврат ТаблицаНачислений;
	КонецЕсли;	
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// поместим таблицу значений во временную таблицу
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
	|	ТаблицаНачислений.ВидРасчета КАК ВидРасчета,
	|	ТаблицаНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаНачислений.ПериодДействия КАК ПериодДействия,
	|	ТаблицаНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ТаблицаНачислений.ПериодДействияКонец КАК ПериодДействияКонец,
	|	ТаблицаНачислений.Сторно
	|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодРегистрации,
	|	ПериодДействия,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец";
	
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗависимыеНачисления.Сотрудник,
	|	ЗависимыеНачисления.ВидРасчета КАК ВидРасчета,
	|	ЗависимыеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ЗависимыеНачисления.ПериодДействияКонец,
	|	ЗависимыеНачисления.Сторнировать,
	|	ЗависимыеНачисления.Начислить КАК Начислить,
	|	ЗависимыеНачисления.ПериодРегистрации,
	|	ЗависимыеНачисления.ПериодДействия,
	|	ЗависимыеНачисления.БазовыйПериодНачало,
	|	ЗависимыеНачисления.БазовыйПериодКонец,
	|	ЗависимыеНачисления.Сторно,
	|	ЗависимыеНачисления.ФизЛицо,
	|	ЗависимыеНачисления.Организация,
	|	ЗависимыеНачисления.ГрафикРаботы,
	|	ЗависимыеНачисления.ГрафикРаботыНорма,
	|	ЗависимыеНачисления.ВидУчетаВремени,
	|	ЗависимыеНачисления.Показатель1,
	|	ЗависимыеНачисления.Показатель2,
	|	ЗависимыеНачисления.Показатель3,
	|	ЗависимыеНачисления.Показатель4,
	|	ЗависимыеНачисления.Показатель5,
	|	ЗависимыеНачисления.Показатель6,
	|	ЗависимыеНачисления.ПодразделениеОрганизации,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ЗависимыеНачисления.ДатаНачалаСобытия,
	|	ЗависимыеНачисления.ОбособленноеПодразделение,
	|	ЗависимыеНачисления.Авторасчет,
	|	ЗависимыеНачисления.СторнируемыйДокумент
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|		ЗависимыеНачисления.ВидРасчета КАК ВидРасчета,
	|		МИНИМУМ(ВЫБОР
	|				КОГДА ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.ПериодДействияНачало
	|					ТОГДА ЗависимыеНачисления.ПериодДействияНачало
	|				ИНАЧЕ ОсновныеНачисления.ПериодДействияНачало
	|			КОНЕЦ) КАК ПериодДействияНачало,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.ПериодДействияКонец
	|					ТОГДА ЗависимыеНачисления.ПериодДействияКонец
	|				ИНАЧЕ ОсновныеНачисления.ПериодДействияКонец
	|			КОНЕЦ) КАК ПериодДействияКонец,
	|		СУММА(ВЫБОР
	|				КОГДА ОсновныеНачисления.Сторно
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК Сторнировать,
	|		СУММА(ВЫБОР
	|				КОГДА (НЕ ОсновныеНачисления.Сторно)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК Начислить,
	|		ОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|		ОсновныеНачисления.ПериодДействия КАК ПериодДействия,
	|		ЗависимыеНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|		ЗависимыеНачисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|		ЗависимыеНачисления.Сторно КАК Сторно,
	|		ЗависимыеНачисления.ФизЛицо КАК ФизЛицо,
	|		ЗависимыеНачисления.Организация КАК Организация,
	|		ЗависимыеНачисления.ГрафикРаботы КАК ГрафикРаботы,
	|		ЗависимыеНачисления.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
	|		ЗависимыеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
	|		ЗависимыеНачисления.Показатель1 КАК Показатель1,
	|		ЗависимыеНачисления.Показатель2 КАК Показатель2,
	|		ЗависимыеНачисления.Показатель3 КАК Показатель3,
	|		ЗависимыеНачисления.Показатель4 КАК Показатель4,
	|		ЗависимыеНачисления.Показатель5 КАК Показатель5,
	|		ЗависимыеНачисления.Показатель6 КАК Показатель6,
	|		ЗависимыеНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|		ЗависимыеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|		ЗависимыеНачисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|		ЗависимыеНачисления.Авторасчет КАК Авторасчет,
	|		ЗависимыеНачисления.Регистратор КАК СторнируемыйДокумент
	|	ИЗ
	|		ВТ_ОсновныеНачисления КАК ОсновныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|					(Сотрудник, ПериодДействия) В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ОсновныеНачисления.Сотрудник,
	|							ОсновныеНачисления.ПериодДействия
	|						ИЗ
	|							ВТ_ОсновныеНачисления КАК ОсновныеНачисления)) КАК ЗависимыеНачисления
	|			ПО ОсновныеНачисления.Сотрудник = ЗависимыеНачисления.Сотрудник
	|				И ОсновныеНачисления.ПериодДействия = ЗависимыеНачисления.ПериодДействия
	|				И ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.ПериодДействияКонец
	|				И ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.ПериодДействияНачало
	|				И (ЗависимыеНачисления.ПериодРегистрации < ОсновныеНачисления.ПериодРегистрации)
	|				И ((НЕ ЗависимыеНачисления.Сторно))
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВедущиеВидыРасчета КАК Ведущие
	|			ПО (Ведущие.Ссылка = ЗависимыеНачисления.ВидРасчета)
	|				И (Ведущие.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК Вытесняющие
	|			ПО (Вытесняющие.Ссылка = ЗависимыеНачисления.ВидРасчета)
	|				И (Вытесняющие.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|	ГДЕ
	|		((НЕ Ведущие.ВидРасчета ЕСТЬ NULL )
	|				ИЛИ (НЕ Вытесняющие.ВидРасчета ЕСТЬ NULL ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОсновныеНачисления.Сотрудник,
	|		ЗависимыеНачисления.ВидРасчета,
	|		ОсновныеНачисления.ПериодРегистрации,
	|		ОсновныеНачисления.ПериодДействия,
	|		ЗависимыеНачисления.БазовыйПериодНачало,
	|		ЗависимыеНачисления.БазовыйПериодКонец,
	|		ЗависимыеНачисления.Сторно,
	|		ЗависимыеНачисления.ФизЛицо,
	|		ЗависимыеНачисления.Организация,
	|		ЗависимыеНачисления.ГрафикРаботы,
	|		ЗависимыеНачисления.ГрафикРаботыНорма,
	|		ЗависимыеНачисления.ВидУчетаВремени,
	|		ЗависимыеНачисления.Показатель1,
	|		ЗависимыеНачисления.Показатель2,
	|		ЗависимыеНачисления.Показатель3,
	|		ЗависимыеНачисления.Показатель4,
	|		ЗависимыеНачисления.Показатель5,
	|		ЗависимыеНачисления.Показатель6,
	|		ЗависимыеНачисления.ПодразделениеОрганизации,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|		ЗависимыеНачисления.ДатаНачалаСобытия,
	|		ЗависимыеНачисления.ОбособленноеПодразделение,
	|		ЗависимыеНачисления.Авторасчет,
	|		ЗависимыеНачисления.Регистратор) КАК ЗависимыеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОсновныеНачисления КАК ВТ_ОсновныеНачисления
	|		ПО ЗависимыеНачисления.Сотрудник = ВТ_ОсновныеНачисления.Сотрудник
	|			И ЗависимыеНачисления.ВидРасчета = ВТ_ОсновныеНачисления.ВидРасчета
	|ГДЕ
	|	ВТ_ОсновныеНачисления.ВидРасчета ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начислить УБЫВ,
	|	ВидРасчета,
	|	ПериодДействияНачало
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции // ПолучитьТаблицуЗависимыхНачисленийОсновные()

// Удаляем записи перерасчетов как по самому документу, так и по исходному документу,
// если переданный документ является исправлением
//
// Параметры
//  ДокументСсылка - ссылка на документ, для которого требуется удалить записи таблиц перерасчетов
//  
Процедура УдалитьСведенияОПерерасчетеДокумента(ДокументСсылка, ТолькоПоИсправленнымДокументам = Ложь) Экспорт
	
	ПерерасчетыПоДокументам = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
	ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
	
	СредПерерасчетыПоДокументам = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
	СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
	
	МассивИсправленныхДокументов = Новый Массив;
	ТипРегистратора = ТипЗнч(ДокументСсылка);
	Если ТипРегистратора <> Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
		
		// проверим, является ли переданный документ чьим-нибудь исправлением
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыИсправления.ПерерассчитываемыйДокумент КАК ОбъектПерерасчета
		|ИЗ
		|	Документ." + ДокументСсылка.Метаданные().Имя + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления.Ссылка = &Исправление";
		Запрос.УстановитьПараметр("Исправление", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
		
		Если ЗначениеЗаполнено(ОбъектПерерасчета) Тогда
			
			ПерерасчетыФизлицПоДокументам = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			
			СредПерерасчетыФизлицПоДокументам = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
			СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			
			// выберем исправленных физлиц - соответствующие им записи перерасчетов надо будет также удалить
			ЗапросФизлиц = Новый Запрос;
			ЗапросФизлиц.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник.ФизЛицо КАК ФизЛицо 
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
			|ГДЕ
			|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
			|	И ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент = &ИсходныйДокумент
			|	И ОсновныеНачисленияРаботниковОрганизаций.Сторно
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РасчетСреднегоЗаработка.Сотрудник.ФизЛицо
			|ИЗ
			|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|ГДЕ
			|	РасчетСреднегоЗаработка.Регистратор = &Регистратор";
			ЗапросФизлиц.УстановитьПараметр("Регистратор", ДокументСсылка);
			ЗапросФизлиц.УстановитьПараметр("ИсходныйДокумент", ОбъектПерерасчета);
			МассивФизлиц = ЗапросФизлиц.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
			
			// выявим все исправленные документы
			Пока ЗначениеЗаполнено(ОбъектПерерасчета) Цикл
				
				МассивИсправленныхДокументов.Добавить(ОбъектПерерасчета);
				Запрос.УстановитьПараметр("Исправление", ОбъектПерерасчета);
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) тогда
		
		Если Не ТолькоПоИсправленнымДокументам Тогда // удалим все записи перерасчетов по самому документу
			ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
			ПерерасчетыПоДокументам.Записать();
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			ПерерасчетыПоДокументам.Прочитать();
			Для каждого Запись Из ПерерасчетыПоДокументам Цикл
				Если МассивФизлиц.Найти(Запись.ФизЛицо) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ПерерасчетыФизлицПоДокументам.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			ПерерасчетыФизлицПоДокументам.Записать();
			ПерерасчетыФизлицПоДокументам.Очистить();
		КонецЦикла;
		
	КонецЕсли;
	Если СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора) тогда
		
		Если Не ТолькоПоИсправленнымДокументам Тогда // удалим все записи перерасчетов по самому документу
			СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
			СредПерерасчетыПоДокументам.Записать();
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Значение = Значение;
			СредПерерасчетыПоДокументам.Прочитать();
			Для каждого Запись Из СредПерерасчетыПоДокументам Цикл
				Если МассивФизлиц.Найти(Запись.ФизЛицо) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СредПерерасчетыФизлицПоДокументам.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			СредПерерасчетыФизлицПоДокументам.Записать();
			СредПерерасчетыФизлицПоДокументам.Очистить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Удаляем записи перезаполнений как по самому документу, так и по исходному документу,
// если переданный документ является исправлением
//
// Параметры
//  ДокументСсылка - ссылка на документ, для которого требуется удалить записи рег-ра перезаполнений
//  
Процедура УдалитьСведенияОПерезаполненииДокумента(ДокументСсылка, СотрудникиДокумента = Неопределено, ТолькоПоИсправленнымДокументам = Ложь) Экспорт
	
	НаборПерезаполнения = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
	НаборПерезаполнения.Отбор.ОбъектЗаполнения.Использование = Истина;
	НаборПерезаполнения.Отбор.ОбъектЗаполнения.ВидСравнения = ВидСравнения.Равно;
	
	Если НаборПерезаполнения.Отбор.ОбъектЗаполнения.ТипЗначения.СодержитТип(ТипЗнч(ДокументСсылка)) Тогда
		
		НаборСотрудниковПерезаполнения = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
		НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Использование = Истина;
		НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.ВидСравнения = ВидСравнения.Равно;
		
		МассивИсправленныхДокументов = Новый Массив;
		
		// проверим, является ли переданный документ чьим-нибудь исправлением
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыИсправления.ПерерассчитываемыйДокумент КАК ОбъектПерерасчета
		|ИЗ
		|	Документ." + ДокументСсылка.Метаданные().Имя + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления.Ссылка = &Исправление";
		Запрос.УстановитьПараметр("Исправление", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
		
		Если ЗначениеЗаполнено(ОбъектПерерасчета) Тогда
			
			// выберем исправленных сотрудников - соответствующие им записи перерасчетов надо будет также удалить
			ЗапросСотрудников = Новый Запрос;
			ЗапросСотрудников.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаполнениеПлановыхНачислений.Сотрудник
			|ИЗ
			|	РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
			|ГДЕ
			|	ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &ОбъектЗаполнения
			|	И (&ПоВсемСотрудникам
			|			ИЛИ ЗаполнениеПлановыхНачислений.Сотрудник В (&Сотрудники))";
			ЗапросСотрудников.УстановитьПараметр("ОбъектЗаполнения", ДокументСсылка);
			ЗапросСотрудников.УстановитьПараметр("Сотрудники", СотрудникиДокумента);
			ЗапросСотрудников.УстановитьПараметр("ПоВсемСотрудникам", СотрудникиДокумента = Неопределено);
			МассивСотрудников = ЗапросСотрудников.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
			
			// выявим все исправленные документы
			Пока ЗначениеЗаполнено(ОбъектПерерасчета) Цикл
				
				МассивИсправленныхДокументов.Добавить(ОбъектПерерасчета);
				Запрос.УстановитьПараметр("Исправление", ОбъектПерерасчета);
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ТолькоПоИсправленнымДокументам Тогда 
			Если СотрудникиДокумента = Неопределено Тогда // удалим все записи перезаполнений по самому документу
				НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение = ДокументСсылка;
				НаборПерезаполнения.Записать(Истина);
			Иначе // удалим записи перезаполнений по переданным сотрудникам
				НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение = ДокументСсылка;
				НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Значение = ДокументСсылка;
				НаборПерезаполнения.Прочитать();
				Для каждого Запись Из НаборПерезаполнения Цикл
					Если СотрудникиДокумента.Найти(Запись.Сотрудник) = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(НаборСотрудниковПерезаполнения.Добавить(),Запись);
					КонецЕсли;
				КонецЦикла;
				НаборСотрудниковПерезаполнения.Записать(Истина);
				НаборСотрудниковПерезаполнения.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
		// в переданном документе сотрудникам
		Для каждого Значение Из МассивИсправленныхДокументов Цикл
			НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение = Значение;
			НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Значение = Значение;
			НаборПерезаполнения.Прочитать();
			Для каждого Запись Из НаборПерезаполнения Цикл
				Если МассивСотрудников.Найти(Запись.Сотрудник) = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НаборСотрудниковПерезаполнения.Добавить(),Запись);
				КонецЕсли;
			КонецЦикла;
			НаборСотрудниковПерезаполнения.Записать(Истина);
			НаборСотрудниковПерезаполнения.Очистить();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПРАВЛЕНИЕ ДОКУМЕНТОВ

// Функция получает документ(ы), которым был исправлен расчетный документ
//
// Параметры
//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
//  Режим - строка, допустимые значения: "КритерийОтбора", "ТаблицаДокумента" 
//  ИмяДокумента - имя соответствующего объекта метаданных
//
// Возвращаемое значение:
//   Режим = "КритерийОтбора": массив документов-исправлений, возможно, пустой.
//   Режим = "ТаблицаДокумента": ссылка на документ того же вида, что и переданный параметр; 
//   или Неопределено, если документ-исправление не найден.
//
Функция ПолучитьДокументИсправление(ДокументСсылка = Неопределено, Режим = Неопределено, ИмяДокумента = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено	
	КонецЕсли;	
	
	Если Режим = Неопределено Тогда
		Режим = ?(ДокументСсылка.Метаданные().Реквизиты.Найти("Сотрудник") = Неопределено, "КритерийОтбора","ТаблицаДокумента")	
	КонецЕсли;
	
	Если Режим = "КритерийОтбора" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыИсправления.Ссылка
		|ИЗ
		|	КритерийОтбора.ДокументыИсправления(&ИсходныйДокумент) КАК ДокументыИсправления
		|";
	ИначеЕсли Режим = "ТаблицаДокумента" Тогда
		Если Не ЗначениеЗаполнено(ИмяДокумента) Тогда
			ИмяДокумента = ДокументСсылка.Метаданные().Имя;
		КонецЕсли;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыИсправления.Ссылка
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления.ПерерассчитываемыйДокумент = &ИсходныйДокумент";
	Иначе
		Возврат Неопределено	
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИсходныйДокумент",ДокументСсылка);
	Результат = Запрос.Выполнить();
	
	Если Режим = "КритерийОтбора" Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка
		Иначе
			Возврат Неопределено	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Функция получает документ(ы), которым был исправлен расчетный документ
//
// Параметры
//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
//  Режим - строка, допустимые значения: "КритерийОтбора", "ТаблицаДокумента" 
//
// Возвращаемое значение:
//   Режим = "КритерийОтбора": массив документов-исправлений, возможно, пустой.
//   Режим = "ТаблицаДокумента": ссылка на документ того же вида, что и переданный параметр; 
//   или Неопределено, если документ-исправление не найден.
//
Функция ПолучитьДокументСторнирование(ДокументСсылка = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено	
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыИсправления.Ссылка
	|ИЗ
	|	Документ.Сторнирование КАК ДокументыИсправления
	|ГДЕ
	|	ДокументыИсправления.СторнируемыйДокумент = &ИсходныйДокумент";
	
	Запрос.УстановитьПараметр("ИсходныйДокумент",ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка
	Иначе
		Возврат Документы.Сторнирование.ПустаяСсылка()
	КонецЕсли;
	
КонецФункции

// Определяет, можно ли изменять документ "задним числом", т.е. проверяет
//   отсутствие исправлений и сторнирований.
//
// Параметры
//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
//  ОписаниеПричиныОтказа - переменная, куда возвращается описание проблемы
//
// Возвращаемое значение:
//  булево
//
Функция ДокументНельзяИзменятьЗаднимЧислом(ДокументСсылка = Неопределено, ОписаниеПричиныОтказа = "") Экспорт 
	
	ОписаниеПричиныОтказа = "";
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Ложь
	ИначеЕсли ЗначениеЗаполнено(ПолучитьДокументИсправление(ДокументСсылка)) Тогда
		ОписаниеПричиныОтказа = "Документ был исправлен, перерасчет документа ""задним числом"" запрещен!";
		Возврат Истина
	ИначеЕсли ЗначениеЗаполнено(ПолучитьДокументСторнирование(ДокументСсылка)) Тогда
		ОписаниеПричиныОтказа = "Документ был сторнирован, перерасчет документа ""задним числом"" запрещен!";
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь
		
КонецФункции

// Выбирает из документов-исправлений сотрудников и помещает их в соответствие
//
// Параметры
//  ТекстЗапроса - строка. содержит текст запроса выора сотрудников
//  ДокументыИсправления - массив документов-исправлений
//  ИмяПоля - строка, имя поля запроса, содержащего сотрудника
//  ИмяПараметра - строка, имя параметра запроса, содержащего документы-исправления
//
// Возвращаемое значение:
//   Соответствие с сотрудниками документов исправлений
//
Функция СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса = "", ДокументыИсправления = Неопределено, ИмяПоля = "Сотрудник", ИмяПараметра = "Исправления") Экспорт
                                                                             
	Сотрудники = Новый Соответствие;
	
	Если ПустаяСтрока(ТекстЗапроса) Или Не ЗначениеЗаполнено(ДокументыИсправления) Тогда
		Возврат	Сотрудники
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр(ИмяПараметра,ДокументыИсправления);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сотрудники.Вставить(Выборка[ИмяПоля], Истина);
	КонецЦикла;
	
	Возврат Сотрудники

КонецФункции // СформироватьСоответствиеСотрудниковСИсправлениями()

// Обработчик подписки ПередЗаписьюДокументаИсправление
// 
Процедура ПередЗаписьюДокументаПроверкаИсправленногоДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Или РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ЗначениеЗаполнено(ПолучитьДокументИсправление(Источник.Ссылка)) Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ТекстСообщенияОбОшибке = "Документ был исправлен, проведение документа запрещено!";
			Иначе 	
				ТекстСообщенияОбОшибке = "Документ был исправлен, отмена проведения документа запрещена!";
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
		ИначеЕсли ЗначениеЗаполнено(ПолучитьДокументСторнирование(Источник.Ссылка)) Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ТекстСообщенияОбОшибке = "Документ был сторнирован, проведение документа запрещено!";
			Иначе 	
				ТекстСообщенияОбОшибке = "Документ был сторнирован, отмена проведения документа запрещена!";
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


Функция ПолучитьТекстПоказателяУпр(НеобходимыеДанные, ВидПВР, Предопределенный = Ложь, КоличествоПоказателей, КомментироватьРасчет)		
	    		
			Если 	НеобходимыеДанные.СдельныйЗаработок или 
				НеобходимыеДанные.ОтработаноВремени или 
				НеобходимыеДанные.НормаВремениЗаМесяц или
				НеобходимыеДанные.Стаж или
				НеобходимыеДанные.База Тогда

				Показатель1Текст = "ВЫБОР "+
				?(НеобходимыеДанные.Стаж, "
				|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.Стаж)
				|		ТОГДА РАЗНОСТЬДАТ(ДанныеОСтаже.Период, &ПериодРегистрации, МЕСЯЦ)", "") + 
				?(НеобходимыеДанные.СдельныйЗаработок, "
				|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.СдельнаяВыработка) 
				|		ТОГДА ВЫБОР
				|			КОГДА ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ)
				|				ТОГДА 0
				|			ИНАЧЕ ДанныеОСдельномЗаработке.СуммаЗаработка
				|		КОНЕЦ", "") + 
				?(НеобходимыеДанные.ОтработаноВремени, "
				|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВДнях) 
				|		ТОГДА ВЫБОР
				|			КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
				|				ТОГДА 0
				|			ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ДнейПоТабелю, ВЫБОР
				|								КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
				|									ТОГДА 0
				|								ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ДнейПоГрафику, ЕСТЬNULL(ВЫБОР
				|												КОГДА Основной.ВидУчетаВремени = &ПоДням
				|													ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
				|												ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
				|											КОНЕЦ, 0))
				|							КОНЕЦ)
				|		КОНЕЦ 
				|	КОГДА Показатели.Показатель1 = &ПоказательВремяВЧасах 
				|		ТОГДА ВЫБОР
				|			КОГДА ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ОшибкаВводаОтработанногоВремени, ЛОЖЬ)
				|				ТОГДА 0
				|			ИНАЧЕ ЕСТЬNULL(ВремяВведенноеВЦеломЗаПериод.ЧасовПоТабелю, ВЫБОР
				|								КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
				|									ТОГДА 0
				|								ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.ЧасовПоГрафику, ЕСТЬNULL(ВЫБОР
				|												КОГДА Основной.ВидУчетаВремени = &ПоДням
				|													ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
				|												ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
				|											КОНЕЦ, 0)) - ЕСТЬNULL(ВремяПоТабелю.ОтработаноЧасовПоТабелюОтклонение, 0)
				|							КОНЕЦ)
				|		КОНЕЦ", "") +
				?(НеобходимыеДанные.НормаВремениЗаМесяц, "
				|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ( Справочник.ПоказателиСхемМотивации.НормаВремениВДнях)
				|		ТОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаДнейПоГрафику, ВЫБОР КОГДА Основной.ВидУчетаВремени = &ПоДням ТОГДА ДанныеГрафика.ОсновноеЗначениеПериодДействия ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеПериодДействия КОНЕЦ)
				|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.НормаВремениВЧасах)
				|		ТОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику, ВЫБОР КОГДА Основной.ВидУчетаВремени = &ПоДням ТОГДА ДанныеГрафика.ДополнительноеЗначениеПериодДействия ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеПериодДействия КОНЕЦ)", "") +
				?(НеобходимыеДанные.База, "
				|	КОГДА Показатели.Показатель1 = &ПоказательРасчетнаяБаза
				|		ТОГДА База.РезультатБаза", "") + "
				|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.Нуль)
				|		ТОГДА 0 
				|	ИНАЧЕ Основной.Показатель1 / ВЫБОР КОГДА Показатели.Показатель1.ТипПоказателя В (&ПроцентныеПоказатели) ТОГДА 100 ИНАЧЕ 1 КОНЕЦ
				|КОНЕЦ";
				
			Иначе
				Показатель1Текст = "ВЫБОР 
				|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.Нуль)
				|		ТОГДА 0 
				|	ИНАЧЕ Основной.Показатель1 / ВЫБОР КОГДА Показатели.Показатель1.ТипПоказателя В (&ПроцентныеПоказатели) ТОГДА 100 ИНАЧЕ 1 КОНЕЦ
				|КОНЕЦ";
			КонецЕсли;

	Возврат Показатель1Текст;
	
КонецФункции //ПолучитьТекстПоказателя


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ТИПОВЫХ ТАБЛИЧНЫХ ЧАСТЕЙ РАСЧЕТНЫХ ДОКУМЕНТОВ

Процедура	ДобавитьСтрокуВыполнитьПроводкуВыплатыЗарплаты(Выборка, ПроводкиБУ, СчетДт, СчетКт, Дата, СчетОрганизации = Неопределено, Касса = Неопределено ) Экспорт
	
	//Смартис Лиманчук начало 19.11.2012
	Попытка
	    СуммаБух = Выборка.СуммаБух;
	Исключение
	    СуммаБух = Выборка.СуммаВзаиморасчетов;
	КонецПопытки;
	//Смартис Лиманчук окончание 19.11.2012
	
	//Смартис Лиманчук начало 19.11.2012
	//Если Выборка.СуммаВзаиморасчетов = 0 Тогда
	Если Выборка.СуммаВзаиморасчетов = 0 И СуммаБух = 0 Тогда
	//Смартис Лиманчук окончание 19.11.2012
		Возврат;
	КонецЕсли;
	
	//Смартис Лиманчук начало 19.11.2012
	Если СуммаБух <> 0 Тогда
	//Смартис Лиманчук окончание 19.11.2012
	
	Проводка = ПроводкиБУ.Добавить();

	Проводка.Период      = Дата;
	Проводка.Активность  = Истина;
	Проводка.Организация = Выборка.Организация;
	Проводка.Содержание  = "Выплата зарплаты";
	//Смартис Лиманчук начало 19.11.2012
	//Проводка.Сумма       = Выборка.СуммаВзаиморасчетов;
	Проводка.Сумма       = Выборка.СуммаБух;
	//Смартис Лиманчук окончание 19.11.2012

	Проводка.СчетКт      = СчетКт;
	Если ЗначениеЗаполнено(СчетОрганизации) Тогда
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "БанковскиеСчета", СчетОрганизации);
	КонецЕсли;                                                                  
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", Выборка.СтатьяДвиженияДенежныхСредств);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизации", Выборка.Сотрудник.ФизЛицо);
	Если ТипЗнч(выборка.ДокументРегистратор)=Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбособленныеПодразделенияБезОбразованияЮрЛица", Выборка.ДокументРегистратор.Касса.ОбособленноеПодразделение);
	КонецЕсли;
	
	
	Проводка.СчетДт      = СчетДт;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизации", Выборка.Сотрудник.ФизЛицо);
	
	//Смартис Лиманчук начало 19.11.2012
	КонецЕсли;
	
	Если Выборка.СуммаВзаиморасчетов = СуммаБух Тогда
		Возврат;
	КонецЕсли;
	
	Проводка = ПроводкиБУ.Добавить();

	Проводка.Период      = Дата;
	Проводка.Активность  = Истина;
	//ИЗМЕНЕНО Верескул Игорь(Начало 14.12.2020		
	Если Дата >= Дата("20210101") Тогда
		НаличнаяОрганизация = Константы.НПТ.Получить();
	Иначе
		НаличнаяОрганизация = Константы.КрафтКолор.Получить();
	КонецЕсли;

	Проводка.Организация = НаличнаяОрганизация;
	Проводка.Содержание  = "Выплата зарплаты";
	Проводка.Сумма       = Выборка.СуммаВзаиморасчетов - СуммаБух;

	Проводка.СчетКт      = СчетКт;
	Если ЗначениеЗаполнено(СчетОрганизации) Тогда
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "БанковскиеСчета", СчетОрганизации);
	КонецЕсли;                                                                  
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", Выборка.СтатьяДвиженияДенежныхСредств);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизации", Выборка.Сотрудник.ФизЛицо);
	Если ТипЗнч(выборка.ДокументРегистратор)=Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбособленныеПодразделенияБезОбразованияЮрЛица", Выборка.ДокументРегистратор.Касса.ОбособленноеПодразделение);
	КонецЕсли;
	
	Проводка.СчетДт      = СчетДт;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизации", Выборка.Сотрудник.ФизЛицо);
	//Смартис Лиманчук окончание 19.11.2012
	
КонецПроцедуры	

