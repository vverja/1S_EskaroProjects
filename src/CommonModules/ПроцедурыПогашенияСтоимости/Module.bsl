
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ БУХГАЛТЕРИИ

// Функция проверяет заполнение счета затрат и счета учета материалов в эксплуатации.
//
// Параметры:
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	СчетЗатрат - ПланыСчетов.Хозрасчетный или ПланыСчетов.Налоговый - Счет затрат
//	СчетУчета - ПланыСчетов.Хозрасчетный или ПланыСчетов.Налоговый - Счет учета материалов в эксплуатации
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	ТаблицаОшибок - ТаблицаЗначений - Таблица регистрации ошибок
//
// Возвращаемое значение:
//   Булево – 	Истина - проверка прошла успешно,
//				Ложь - обнаружены ошибки заполнения счетов. 
//
Функция ПроверитьСчетЗатратИСчетУчетаПоВидуОтраженияВУчете(
	СтрокаВыборки,
	СчетЗатрат, 
	СчетУчета,
	ВидОтраженияВУчете,
	ТаблицаОшибок
	)

	ПроверкаПройдена = Истина;

	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		ТекстОтраженияВУчете = "по бухгалтерскому учету";
			
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		ТекстОтраженияВУчете = "по налоговому учету";
		
	Иначе
		ТекстОтраженияВУчете = "";
		
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СчетЗатрат) Тогда
		   
		ТекстСообщения = "Не указан счет затрат " + ТекстОтраженияВУчете + ":
			|Способ отражения расходов: " + СтрокаВыборки.СпособОтраженияРасходов + "
			|Проводка по погашению стоимости спецодежды (спецоснастки, инвентаря) не сформирована!";

		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.Сообщение = ТекстСообщения;
		НоваяСтрока.Объект = СтрокаВыборки.СпособОтраженияРасходов;
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(СчетУчета) Тогда
		   
		ТекстСообщения = "Не указан счет учета материала в эксплуатации " + ТекстОтраженияВУчете + ":
			|Номенклатура: " + СтрокаВыборки.Номенклатура + "
			|Проводка по погашению стоимости спецодежды (спецоснастки, инвентаря) не сформирована!";
			
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.Сообщение = ТекстСообщения;
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;

	Возврат ПроверкаПройдена;

КонецФункции // ПроверитьСчетЗатратИСчетУчетаПоВидуОтраженияВУчете()

// Процедура формирует проводку по погашению стоимости спецодежды (спецоснастки, инвентаря).
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа
//  СтрокаВыборки- ВыборкаИзРезультатаЗапроса - Строка выборки
//	Склад - СправочникСсылка.Склады - Склад для формирования проводки
//	Количество - Число - Количество проводки
//  Сумма - Число - Сумма проводки
//	КодОперации - ПеречислениеСсылка.КодыОперацийПартииМатериаловВЭксплуатации - Код операции
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//  ВидУчетаПоПБУ18 - ПеречислениеСсылка.ВидыУчетаПоПБУ18 - Вид учета по ПБУ18/02, для которого формируется проводка
//	ТаблицаОшибок - ТаблицаЗначений - Таблица регистрации ошибок
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьПроводкуПоРегиструБухгалтерииПогашениеСтоимости(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Склад,
	Знач Количество,
	Знач Сумма,
	Знач СуммаНУ,
	КодОперации,
	ВидОтраженияВУчете,
	ТаблицаОшибок,
	РегистрБухгалтерииНаборЗаписей
	)

	Если Количество = 0
	   И Сумма = 0
	   И СуммаНУ = 0
	Тогда
		Возврат;
	КонецЕсли;

	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		ИмяПланСчетов = "Хозрасчетный";
		СчетЗатрат = СтрокаВыборки.СчетЗатрат;
		СчетУчета = СтрокаВыборки.СчетАмортизации;
			
		
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Не определено формирование проводки по виду отражения в учете: """ + ВидОтраженияВУчете + """.
			|Процедура <СформироватьПроводкуПоРегиструБухгалтерииПогашениеСтоимости>");
		Возврат;
			
	КонецЕсли;


	Если Количество = 0
	   И Сумма = 0
	   И СуммаНУ = 0
	Тогда
		Возврат;
	КонецЕсли;

	ПроверкаПройдена = ПроверитьСчетЗатратИСчетУчетаПоВидуОтраженияВУчете(
		СтрокаВыборки,
		СчетЗатрат, 
		СчетУчета,
		ВидОтраженияВУчете,
		ТаблицаОшибок
	);

	Если Не ПроверкаПройдена Тогда
		Возврат;
	КонецЕсли;

	НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
	НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
	НоваяПроводка.Активность = Истина;
	НоваяПроводка.Период = СтруктураШапкиДокумента.Дата;
	НоваяПроводка.СписаниеПартий = Истина;

	НоваяПроводка.СуммаНУДт = СуммаНУ;
	НоваяПроводка.НалоговоеНазначениеДт = СтрокаВыборки.НалоговоеНазначениеДоходовИЗатрат;
	
	НоваяПроводка.Сумма = Сумма;

		НоваяПроводка.Содержание = "Погашение стоимости";
		
		УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(
			НоваяПроводка, 
			СтрокаВыборки,
			СтруктураШапкиДокумента,
			"Дт",
			Истина // ПолучитьПодразделениеИзСтрокиТаблицы
		);

	НоваяПроводка.КоличествоКт = Количество;
	
	НоваяПроводка.СуммаНУКт = СуммаНУ;
	НоваяПроводка.НалоговоеНазначениеКт = СтрокаВыборки.НалоговоеНазначение;
	
	НоваяПроводка.СчетКт = СчетУчета;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Номенклатура", СтрокаВыборки.Номенклатура);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Склады", Склад);


КонецПроцедуры // СформироватьПроводкуПоРегиструБухгалтерииПогашениеСтоимости()

// Процедура формирует движения по регистрам бухгалтерии "Хозрасчетный" и "Налоговый" по погашению стоимости.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	Склад - СправочникСсылка.Склады - Склад для формирования проводки
//	Количество - Число - Количество материала
//	СтоимостьБух - Число - Стоимость по бухгалтерскому учету
//	СтоимостьНал - Число - Стоимость по налоговому учету
//	ПостояннаяРазница - Число - Стоимость в части постоянной разницы
//	ВременнаяРазница - Число - Стоимость в части временной разницы
//	КодОперации - ПеречислениеСсылка.КодыОперацийПартииМатериаловВЭксплуатации - Код операции
//	ТаблицаОшибок - ТаблицаЗначений - Таблица регистрации ошибок
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегиструБухгалтерииПогашениеСтоимости(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Склад,
	Количество,
	СтоимостьБух,
	СтоимостьНал,
	КодОперации,
	ТаблицаОшибок,
	СтруктураНаборыЗаписей
	)

	Если Количество = 0
	   И СтоимостьБух = 0
	   И СтоимостьНал = 0
	Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистра = "Хозрасчетный";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьПроводкуПоРегиструБухгалтерииПогашениеСтоимости(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Склад,
			Количество,
			СтоимостьБух,
			СтоимостьНал,
			КодОперации,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			ТаблицаОшибок,
			СтруктураНаборыЗаписей[ИмяРегистра]
			);
		
	КонецЕсли;



КонецПроцедуры // СформироватьДвиженияПоРегиструБухгалтерииПогашениеСтоимости()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСПРЕДЕЛЕНИЯ ПОГАШЕННОЙ СТОИМОСТИ

// Функция формирует запрос по способам отражения амортизации.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ТаблицаПогашеннойСтоимости - ТаблицаЗначений - Таблица погашенной стоимости
//
// Возвращаемое значение:
//	Запрос - Запрос по способам распределения
//
Функция СформироватьЗапросПоСпособамОтраженияРасходов(
	СтруктураШапкиДокумента,
	ТаблицаПогашеннойСтоимости
	)

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.СпособОтраженияРасходов
	|	
	|ПОМЕСТИТЬ СпособыОтраженияРасходов
	|ИЗ
	|	&ТаблицаПогашеннойСтоимости КАК Таблица
	|ГДЕ
	|	Таблица.СпособОтраженияРасходов ССЫЛКА Справочник.СпособыОтраженияРасходовПоАмортизации
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.СпособОтраженияРасходов КАК Документ
	|	
	|ПОМЕСТИТЬ ДокументыСписания
	|ИЗ
	|	&ТаблицаПогашеннойСтоимости КАК Таблица
	|ГДЕ
	|	Таблица.СпособОтраженияРасходов ССЫЛКА Документ.СписаниеМатериаловИзЭксплуатации
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходов.Ссылка КАК СпособОтраженияРасходов,
	|	СпособыОтраженияРасходов.Ссылка.СпособРаспределенияЗатратНаВыпуск КАК СпособРаспределенияЗатратНаВыпуск,
	|	СпособыОтраженияРасходов.СтатьяЗатрат,
	|	СпособыОтраженияРасходов.НоменклатурнаяГруппа,
	|	СпособыОтраженияРасходов.Подразделение,
	|	СпособыОтраженияРасходов.ПодразделениеОрганизации,
	|
	|	СпособыОтраженияРасходов.Продукция,
	|	СпособыОтраженияРасходов.СерияПродукции,
	|	СпособыОтраженияРасходов.ХарактеристикаПродукции,
	|	
	|	СпособыОтраженияРасходов.ОбъектСтроительства,
	|	СпособыОтраженияРасходов.Проект,
	|	
	|	СпособыОтраженияРасходов.СчетЗатрат,


	|	СпособыОтраженияРасходов.НалоговоеНазначениеДоходовИЗатрат,

	|	СпособыОтраженияРасходов.Субконто1,
	|	СпособыОтраженияРасходов.Субконто2,
	|	СпособыОтраженияРасходов.Субконто3,
	|	
	|	СпособыОтраженияРасходов.Коэффициент
	|	
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходов
	|	
	|ГДЕ
	|	СпособыОтраженияРасходов.Ссылка В (
	|		ВЫБРАТЬ
	|			СпособОтраженияРасходов
	|		ИЗ
	|       	СпособыОтраженияРасходов КАК СпособыОтраженияРасходов
	|		)
	|
	|
	|ИТОГИ
	|	СУММА(Коэффициент)
	|ПО
	|	СпособыОтраженияРасходов.Ссылка
	|	
	|";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаПогашеннойСтоимости", ТаблицаПогашеннойСтоимости);
	Если СтруктураШапкиДокумента.Свойство("НачДата") Тогда
		Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.НачДата);
		Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.КонДата);
	Иначе
		Запрос.УстановитьПараметр("НачДата", НачалоДня(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", КонецДня(СтруктураШапкиДокумента.Дата));
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);

	Возврат Запрос;

КонецФункции // СформироватьЗапросПоСпособамОтраженияРасходов()

// Процедура выводит сообщение об нулевой сумме коэффициентов.
//
// Параметры:
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки
//	ТаблицаОшибок - ТаблицаЗначений - Таблица регистрации ошибок
//
Процедура ВывестиСообщениеНулеваяСуммаКоэффициентов(
	СтрокаВыборки,
	ТаблицаОшибок
	)

	ТекстСообщения = "В способе отражения расходов по амортизации (погашению стоимости) """ 
		+ СтрокаВыборки.СпособОтраженияРасходов
		+ """ сумма коэффициентов равна 0!";

	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.Сообщение = ТекстСообщения;
	НоваяСтрока.Объект = СтрокаВыборки.СпособОтраженияРасходов;

КонецПроцедуры // ВывестиСообщениеНулеваяСуммаКоэффициентов()

// Процедура распределяет погашенную стоимость по способам отражения.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ТаблицаПогашеннойСтоимости - ТаблицаЗначений - Таблица сумм погашенной стоимости
//	ТаблицаОшибок - ТаблицаЗначений - Таблица ошибок
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура РаспределитьПогашеннуюСтоимостьПоСпособамОтраженияРасходов(
	СтруктураШапкиДокумента,
	ТаблицаПогашеннойСтоимости,
	ТаблицаОшибок,
	СтруктураНаборыЗаписей
	)

	Если ТаблицаПогашеннойСтоимости.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаПогашеннойСтоимости.Свернуть("
	    |КорАналитикаВидаУчета,
		|КорАналитикаУчетаЗатрат,
		|КорАналитикаРаспределенияЗатрат,
		|КорАналитикаУчетаПартий,
	    |АналитикаВидаУчета,
		|АналитикаУчетаЗатрат,
		|АналитикаРаспределенияЗатрат,
		|АналитикаУчетаПартий,
		|Склад,
		|Номенклатура,
		|СпособОтраженияРасходов,
		|СчетУчетаБУ,
		|НалоговоеНазначение,
		|Подразделение,
		|ПодразделениеОрганизации,
		|ВидМатериала,
		|СчетАмортизации"
		," 
		|КоличествоУпр,
		|КоличествоБух,
		|СтоимостьУпр,
		|СтоимостьБух,
		|СтоимостьНал,
		|НДСВходящий,
		|НДСКредит
		|"
	);

	Запрос = СформироватьЗапросПоСпособамОтраженияРасходов(
		СтруктураШапкиДокумента,
		ТаблицаПогашеннойСтоимости
	);
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат ;
	КонецЕсли;

	// определим структуру выходной таблицы
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	ТаблицаЗатрат.Колонки.Добавить("СпособОтраженияРасходов", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаЗатрат.Колонки.Добавить("СчетАмортизации", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	
	КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеПартийВЭксплуатацию;

	ВыборкаПоСпособам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСпособам.Следующий() Цикл
		
		Если ВыборкаПоСпособам.Коэффициент = 0 Тогда
			ВывестиСообщениеНулеваяСуммаКоэффициентов(
				ВыборкаПоСпособам,
				ТаблицаОшибок
			);
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СпособОтраженияРасходов", ВыборкаПоСпособам.СпособОтраженияРасходов);
		
		МассивСтрок = ТаблицаПогашеннойСтоимости.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Строка Из МассивСтрок Цикл
			
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				ВсегоКоличествоУпр = Строка.КоличествоУпр;
				ВсегоСтоимостьУпр = Строка.СтоимостьУпр;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ВсегоКоличествоБух = Строка.КоличествоБух;
				ВсегоСтоимостьБух = Строка.СтоимостьБух;
				
				ВсегоСтоимостьНал = Строка.СтоимостьНал;
				ВсегоНДСВходящий 	= Строка.НДСВходящий;
				ВсегоНДСКредит 		= Строка.НДСКредит;
				ВсегоОбщаяСтоимость = ВсегоСтоимостьНал;
				
			КонецЕсли;
			
			ВсегоКоэффициент = ВыборкаПоСпособам.Коэффициент;
			
			Выборка = ВыборкаПоСпособам.Выбрать();
			Пока Выборка.Следующий() Цикл
			
				Коэффициент = Выборка.Коэффициент;
				
				КоличествоУпр = 0;
				КоличествоБух = 0;
				СтоимостьУпр = 0;
				СтоимостьБух = 0;
				СтоимостьНал = 0;
				НДСВходящий = 0;
				НДСКредит 	= 0;
				
				Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
					КоличествоУпр = ?(ВсегоКоэффициент <> 0, Окр(ВсегоКоличествоУпр * Коэффициент / ВсегоКоэффициент, 3, 1), 0);
					ВсегоКоличествоУпр = ВсегоКоличествоУпр - КоличествоУпр;
				
					СтоимостьУпр = ?(ВсегоКоэффициент <> 0, Окр(ВсегоСтоимостьУпр * Коэффициент / ВсегоКоэффициент, 2, 1), 0);
					ВсегоСтоимостьУпр = ВсегоСтоимостьУпр - СтоимостьУпр;
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					КоличествоБух = ?(ВсегоКоэффициент <> 0, Окр(ВсегоКоличествоБух * Коэффициент / ВсегоКоэффициент, 3, 1), 0);
					ВсегоКоличествоБух = ВсегоКоличествоБух - КоличествоБух;
				
					СтоимостьБух = ?(ВсегоКоэффициент <> 0, Окр(ВсегоСтоимостьБух * Коэффициент / ВсегоКоэффициент, 2, 1), 0);
					ВсегоСтоимостьБух = ВсегоСтоимостьБух - СтоимостьБух;
					
					СтоимостьНал = ?(ВсегоКоэффициент <> 0, Окр(ВсегоСтоимостьНал * Коэффициент / ВсегоКоэффициент, 2, 1), 0);
					ВсегоСтоимостьНал = ВсегоСтоимостьНал - СтоимостьНал;
					
					НДСВходящий = Окр(ВсегоНДСВходящий * Коэффициент / ВсегоКоэффициент, 2, 1);
					ВсегоНДСВходящий = ВсегоНДСВходящий - НДСВходящий;
										
					НДСКредит = Окр(ВсегоНДСКредит * Коэффициент / ВсегоКоэффициент, 2, 1);
					ВсегоНДСКредит = ВсегоНДСКредит - НДСКредит;
					
					ОбщаяСтоимость = Окр(ВсегоОбщаяСтоимость * Коэффициент / ВсегоКоэффициент, 2, 1);
					ВсегоОбщаяСтоимость = ВсегоОбщаяСтоимость - ОбщаяСтоимость;
					
					
				КонецЕсли;
				
				ВсегоКоэффициент = ВсегоКоэффициент - Выборка.Коэффициент;
								
				// Заполним строку отражения затрат.
				НоваяСтрока = ТаблицаЗатрат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				НоваяСтрока.СпособОтраженияРасходов = ВыборкаПоСпособам.СпособОтраженияРасходов;
				
				Если ЗначениеЗаполнено(Выборка.Подразделение) Тогда
					НоваяСтрока.Подразделение 	= Выборка.Подразделение;
				Иначе	
					// получаем по местонахождению объекта
					НоваяСтрока.Подразделение 	= Строка.Подразделение;
				КонецЕсли;	
				Если ЗначениеЗаполнено(Выборка.ПодразделениеОрганизации) Тогда
					НоваяСтрока.ПодразделениеОрганизации 	= Выборка.ПодразделениеОрганизации;
				Иначе	
					// получаем по местонахождению объекта
					НоваяСтрока.ПодразделениеОрганизации 	= Строка.ПодразделениеОрганизации;
				КонецЕсли;	
				
				НоваяСтрока.НалоговоеНазначение = Строка.НалоговоеНазначение;
				
				НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = Выборка.НалоговоеНазначениеДоходовИЗатрат;
				
				НоваяСтрока.Номенклатура = Строка.Номенклатура;
				НоваяСтрока.СчетУчетаБУ = Строка.СчетУчетаБУ;
				НоваяСтрока.КодОперации = КодОперации;
				
				Если Строка.ВидМатериала <> Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет Тогда
					НоваяСтрока.СчетАмортизации = Строка.СчетАмортизации;
				Иначе
					НоваяСтрока.СчетАмортизации = Строка.СчетУчетаБУ;
				КонецЕсли;	
				
				Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
					НоваяСтрока.КорАналитикаВидаУчета = Строка.КорАналитикаВидаУчета;
					НоваяСтрока.КорАналитикаУчетаЗатрат = Строка.КорАналитикаУчетаЗатрат;
					НоваяСтрока.КорАналитикаРаспределенияЗатрат = Строка.КорАналитикаРаспределенияЗатрат;
					НоваяСтрока.КорАналитикаУчетаПартий = Строка.КорАналитикаУчетаПартий;
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
					НоваяСтрока.КоличествоУпр = КоличествоУпр;
					НоваяСтрока.СуммаУпр = СтоимостьУпр;
				КонецЕсли;
					
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					НоваяСтрока.КоличествоБух = КоличествоБух;
					НоваяСтрока.КоличествоНал = КоличествоБух;
					НоваяСтрока.СуммаБух  = СтоимостьБух;
					НоваяСтрока.СуммаНал  = СтоимостьНал;
					НоваяСтрока.СуммаНДСРегл 		   	= НДСВходящий;
					НоваяСтрока.ПроводкиСуммаНДСРегл 	= НДСКредит;
				КонецЕсли;
					
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
				Тогда
					СформироватьДвиженияПоРегиструБухгалтерииПогашениеСтоимости(
						СтруктураШапкиДокумента,
						НоваяСтрока,
						Строка.Склад,
						КоличествоБух,
						СтоимостьБух,
						СтоимостьНал,
						КодОперации,
						ТаблицаОшибок,
						СтруктураНаборыЗаписей
					);
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

	ТаблицаЗатрат.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");

		
	 	УправлениеЗатратамиДвиженияПоРегистрам.СформироватьДвиженияПоОтражениюЗатрат(
	  		СтруктураШапкиДокумента,
	  		ТаблицаЗатрат,
	  		Неопределено, // ВидОтраженияВУчете
	  		СтруктураНаборыЗаписей
		);
		

КонецПроцедуры // РаспределитьПогашеннуюСтоимостьПоСпособамОтраженияРасходов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ


// Процедура формирует движение по регистрам "Партии материалов в эксплуатации" по всем видам учета.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//  Стоимость - Число - Сумма материалов
//  ПогашеннаяСтоимостьУпр - Число - Сумма погашенной стоимости по упр. учету
//  ПогашеннаяСтоимостьБух - Число - Сумма погашенной стоимости по бух. учету
//  ПогашеннаяСтоимостьНал - Число - Сумма погашенной стоимости по нал. учету
//	ВременнаяРазница - Число - Стоимость в части временной разницы
//  ПогашеннаяПостояннаяРазница - Число - Сумма погашенной стоимости в части постоянной разницы
//  ПогашеннаяВременнаяРазница - Число - Сумма погашенной стоимости в части временной разницы
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегистрамПартииМатериаловВЭксплуатацииУкр(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ПогашеннаяСтоимостьУпр,
	ПогашеннаяСтоимостьБух,
	ПогашеннаяСтоимостьНал,
	СтруктураНаборыЗаписей
	)

	КодОперацииПогашениеСтоимости = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеПартийВЭксплуатацию;

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ИмяРегистра = "ПартииМатериаловВЭксплуатации";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьДвиженияПоРегиструПартииМатериаловВЭксплуатацииУкр(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтрокаВыборки.КоличествоУпр, // Количество,
			ПогашеннаяСтоимостьУпр, // Стоимость,
			0, // СтоимостьНУ,
			ВидДвиженияНакопления.Приход,
			КодОперацииПогашениеСтоимости,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистра = "ПартииМатериаловВЭксплуатацииБухгалтерскийУчет";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьДвиженияПоРегиструПартииМатериаловВЭксплуатацииУкр(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтрокаВыборки.КоличествоБух, // Количество,
			ПогашеннаяСтоимостьБух, // Стоимость,
			ПогашеннаяСтоимостьНал, // СтоимостьНУ,
			ВидДвиженияНакопления.Приход,
			КодОперацииПогашениеСтоимости,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;



КонецПроцедуры // СформироватьДвиженияПоРегиструПартииМатериаловВЭксплуатации()

// Процедура формирует движение по регистру "Партии материалов в эксплуатации".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	ДокументПередачи - ДокументСсылка.ПередачаМатериаловВЭксплуатацию - Документ передачи
//	Количество - Число - Количество материалов
//  Стоимость - Число - Сумма материалов
//  ПогашеннаяСтоимость - Число - Сумма погашенной стоимости
//  ПостояннаяРазница - Число - Сумма постоянной разницы
//  ВременнаяРазница - Число - Сумма временной разницы
//  ПогашеннаяСтоимостьПР - Число - Сумма погашенной стоимости в части постоянной разницы
//  ПогашеннаяСтоимостьВР - Число - Сумма погашенной стоимости в части временной разницы
//
//	ВидДвижения - ВидДвиженияНакопления - Текущий вид движения
//	КодОперации - ПеречислениеСсылка.КодыОперацийПартииМатериаловВЭксплуатации - Код операции
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	НаборЗаписейПартииМатериалов - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Партии материалов в эксплуатации".
//
Процедура СформироватьДвиженияПоРегиструПартииМатериаловВЭксплуатацииУкр(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Количество,
	Стоимость,
	СтоимостьНУ,
	ВидДвижения,
	КодОперации,
	ВидОтраженияВУчете,
	НаборЗаписейПартииМатериалов
	)

	Если Количество = 0
	   И Стоимость = 0
	   И СтоимостьНУ = 0
	Тогда
		Возврат;
	КонецЕсли;

	// В движениях по регистру "Партии материалов в эксплуатации" должны быть заполнены измерения:
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или налоговом учете,
	//	- Номенклатура,
	//	- ХарактеристикаНоменклатуры,
	//	- СерияНоменклатуры,
	//	- ДокументПередачи,
	//	- ФизЛицо,
	//	- НазначениеИспользования.

	НоваяСтрока = НаборЗаписейПартииМатериалов.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Период = СтруктураШапкиДокумента.ПериодРегистрации;

	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);

	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Подразделение = СтрокаВыборки.Подразделение;
	Иначе
		НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеОрганизации;
	КонецЕсли;

	НоваяСтрока.КодОперации = КодОперации;
	НоваяСтрока.СписаниеПартий = Истина;

	//Если КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатации
	//   И ВидДвижения = ВидДвиженияНакопления.Расход
	//Тогда
	//	НоваяСтрока.НомерКорСтроки = СтрокаВыборки.НомерСтроки;
	//	
	//ИначеЕсли КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатации
	//	ИЛИ КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатации
	//Тогда
	//	НоваяСтрока.НомерКорСтроки = СтрокаВыборки.НомерСтроки;
	//	
	//КонецЕсли;

	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Стоимость = Стоимость;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СтоимостьНУ = СтоимостьНУ;
	КонецЕсли;	

	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейПартииМатериалов.Количество() = 1000 Тогда
		НаборЗаписейПартииМатериалов.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструПартииМатериаловВЭксплуатации()



// Функция формирует таблицу погашенной стоимости.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица для отражения погашенной стоимости
//
Функция СформироватьТаблицуПогашеннойСтоимости()

	ТаблицаПогашеннойСтоимости = Новый ТаблицаЗначений;
	Колонки = ТаблицаПогашеннойСтоимости.Колонки;
	Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СписаниеМатериаловИзЭксплуатации"));
	Колонки.Добавить("СпособОтраженияРасходов", Новый ОписаниеТипов(МассивТипов));

	Колонки.Добавить("КорАналитикаВидаУчета", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиВидаУчета"));
	Колонки.Добавить("КорАналитикаУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));
	Колонки.Добавить("КорАналитикаРаспределенияЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиРаспределенияЗатрат"));
	Колонки.Добавить("КорАналитикаУчетаПартий", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаПартий"));

	Колонки.Добавить("АналитикаВидаУчета", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиВидаУчета"));
	Колонки.Добавить("АналитикаУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));
	Колонки.Добавить("АналитикаРаспределенияЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиРаспределенияЗатрат"));
	Колонки.Добавить("АналитикаУчетаПартий", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаПартий"));
	
	Колонки.Добавить("СчетУчетаБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Колонки.Добавить("НалоговоеНазначение", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Колонки.Добавить("ВидМатериала", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМатериалов"));
	Колонки.Добавить("СчетАмортизации", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));

	Колонки.Добавить("КоличествоУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Колонки.Добавить("КоличествоБух", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Колонки.Добавить("СтоимостьУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Колонки.Добавить("СтоимостьБух", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Колонки.Добавить("СтоимостьНал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	Колонки.Добавить("НДСВходящий", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Колонки.Добавить("НДСКредит", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ТаблицаПогашеннойСтоимости.Индексы.Добавить("СпособОтраженияРасходов");

	Возврат ТаблицаПогашеннойСтоимости;

КонецФункции // ПолучитьТаблицуАмортизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ НАЗНАЧЕНИЯ ИСПОЛЬЗОВАНИЯ

// Процедура проверяет правильность заполнения назначения использования.
//
// Параметры:
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	ТаблицаОшибок - ТаблицаЗначений - Таблица ошибок
//
// Возвращаемое значение:
//   Булево – 	Истина - проверка прошла успешно,
//				Ложь - обнаружены ошибки заполнения назначения использования. 
//
Функция ПроверитьНазначениеИспользования(
	СтрокаВыборки,
	ТаблицаОшибок
	)

	ПроверкаПройдена = Истина;
	Если СтрокаВыборки.СрокПолезногоИспользования = 0 Тогда
		
		ТекстСообщения = "В назначении использования """ 
			+ СтрокаВыборки.НазначениеИспользования
			+ """ не указан срок полезного использования!";
		
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.Сообщение = ТекстСообщения;
		НоваяСтрока.Объект = СтрокаВыборки.НазначениеИспользования;
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СтрокаВыборки.СпособОтраженияРасходов) Тогда
		
		ТекстСообщения = "В назначении использования """ 
			+ СтрокаВыборки.НазначениеИспользования
			+ """ не указан способ отражения расходов!";
		
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.Сообщение = ТекстСообщения;
		НоваяСтрока.Объект = СтрокаВыборки.НазначениеИспользования;
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;

	Возврат ПроверкаПройдена;

КонецФункции // ПроверитьНазначениеИспользования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА ПОГАШЕННОЙ СТОИМОСТИ ПРИ ПЕРЕДАЧЕ В ЭКСПЛУАТАЦИЮ

// Функция формирует запрос по списанным партиям.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ТаблицаСписанныхПартий - ТаблицаЗначений - Таблица списанных партий
//
// Возвращаемое значение:
//	Запрос - Запрос по остаткам материалов в эксплуатации
//
Функция СформироватьЗапросПоСписаннымПартиямРасширеннаяАналитика(
	СтруктураШапкиДокумента,
	ТаблицаСписанныхПартий
	)

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Таблица.ОтражатьВУправленческомУчете,
	|	Таблица.ОтражатьВБухгалтерскомУчете,
	|
	|	Таблица.АналитикаВидаУчета,
	|	Таблица.АналитикаУчетаЗатрат,
	|	Таблица.АналитикаРаспределенияЗатрат,
	|	Таблица.АналитикаУчетаПартий,
	|
	|	Таблица.КорАналитикаВидаУчета,
	|	Таблица.КорАналитикаУчетаЗатрат,
	|	Таблица.КорАналитикаРаспределенияЗатрат,
	|	Таблица.КорАналитикаУчетаПартий,
	|
	|	Таблица.Склад,
	|	
	|	Таблица.НДСВходящий,
	|	Таблица.НДСКредит,
	|	Таблица.СтоимостьНУ,
	|	Таблица.Стоимость,
	|	Таблица.Количество
	|	
	|ПОМЕСТИТЬ ПартииМатериалов
	|ИЗ
	|	&ТаблицаСписанныхПартий КАК Таблица
    |;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ПартииМатериалов.АналитикаВидаУчета,
	|	ПартииМатериалов.АналитикаУчетаЗатрат,
	|	ПартииМатериалов.АналитикаРаспределенияЗатрат,
	|	ПартииМатериалов.АналитикаУчетаПартий,
	|
	|	ПартииМатериалов.КорАналитикаВидаУчета,
	|	ПартииМатериалов.КорАналитикаУчетаЗатрат,
	|	ПартииМатериалов.КорАналитикаРаспределенияЗатрат,
	|	ПартииМатериалов.КорАналитикаУчетаПартий,
	|
	|	ПартииМатериалов.Склад,
	|
	|	РегистрАналитикаВидаУчета.СчетУчета КАК СчетУчетаБУ,
	|	РегистрАналитикаВидаУчета.НалоговоеНазначение,
	|
	|	РегистрКорАналитикаУчетаЗатрат.Затрата КАК Номенклатура,
	|	РегистрКорАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК ХарактеристикаНоменклатуры,
	|	РегистрКорАналитикаУчетаЗатрат.СерияЗатраты КАК СерияНоменклатуры,
	|
	|	РегистрКорАналитикаУчетаПартий.СхемаНазначенияИспользования,
	|	ЕСТЬNULL(РегистрКорАналитикаУчетаПартий.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	РегистрКорАналитикаУчетаПартий.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	РегистрКорАналитикаУчетаПартий.СхемаНазначенияИспользования.ВидМатериала КАК ВидМатериала,
	|	РегистрКорАналитикаУчетаПартий.СхемаНазначенияИспользования.СчетАмортизацииБУ КАК СчетАмортизации,
	|	РегистрКорАналитикаВидаУчета.Подразделение КАК Подразделение,
	|	РегистрКорАналитикаВидаУчета.Организация КАК Организация,
	|	РегистрКорАналитикаВидаУчета.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РегистрКорАналитикаУчетаПартий.ФизЛицо КАК ФизЛицо,
	|	РегистрАналитикаУчетаЗатрат.Качество КАК Качество,
	|	РегистрКорАналитикаУчетаПартий.ДокументПередачи КАК ДокументПередачи,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВБухгалтерскомУчете ТОГДА
	|			ПартииМатериалов.НДСВходящий
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК НДСВходящий,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВБухгалтерскомУчете ТОГДА
	|			ПартииМатериалов.НДСКредит
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК НДСКредит,

	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВБухгалтерскомУчете ТОГДА
	|			ПартииМатериалов.СтоимостьНУ
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СтоимостьНал,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВБухгалтерскомУчете
	|		ТОГДА
	|			ПартииМатериалов.Стоимость
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК СтоимостьБух,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВУправленческомУчете
	|		ТОГДА
	|			ПартииМатериалов.Стоимость
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК СтоимостьУпр,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВБухгалтерскомУчете
	|		ТОГДА
	|			ПартииМатериалов.Количество
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК КоличествоБух,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВУправленческомУчете
	|		ТОГДА
	|			ПартииМатериалов.Количество
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК КоличествоУпр
	|
	|ИЗ
	|	ПартииМатериалов КАК ПартииМатериалов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК РегистрКорАналитикаВидаУчета
	|	ПО 
	|		ПартииМатериалов.КорАналитикаВидаУчета = РегистрКорАналитикаВидаУчета.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|	ПО 
	|		ПартииМатериалов.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|	ПО 
	|		ПартииМатериалов.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка

	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК РегистрКорАналитикаУчетаЗатрат
	|	ПО 
	|		ПартииМатериалов.КорАналитикаУчетаЗатрат = РегистрКорАналитикаУчетаЗатрат.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК РегистрКорАналитикаУчетаПартий
	|	ПО 
	|		ПартииМатериалов.КорАналитикаУчетаПартий = РегистрКорАналитикаУчетаПартий.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииМатериалов.АналитикаВидаУчета,
	|	ПартииМатериалов.АналитикаУчетаЗатрат,
	|	ПартииМатериалов.АналитикаРаспределенияЗатрат,
	|	ПартииМатериалов.АналитикаУчетаПартий,
	|
	|	ПартииМатериалов.КорАналитикаВидаУчета,
	|	ПартииМатериалов.КорАналитикаУчетаЗатрат,
	|	ПартииМатериалов.КорАналитикаРаспределенияЗатрат,
	|	ПартииМатериалов.КорАналитикаУчетаПартий,
	|
	|	ПартииМатериалов.Склад,
	|
	|	РегистрАналитикаВидаУчета.СчетУчета,
	|	РегистрАналитикаВидаУчета.НалоговоеНазначение,
	|	РегистрКорАналитикаУчетаЗатрат.Затрата,
	|	РегистрКорАналитикаУчетаЗатрат.ХарактеристикаЗатраты,
	|	РегистрКорАналитикаУчетаЗатрат.СерияЗатраты,
	|	РегистрКорАналитикаУчетаПартий.СхемаНазначенияИспользования,
	|	ЕСТЬNULL(РегистрКорАналитикаУчетаПартий.СрокПолезногоИспользования, 0),
	|	РегистрКорАналитикаУчетаПартий.СпособОтраженияРасходов,
	|	РегистрКорАналитикаУчетаПартий.СхемаНазначенияИспользования.ВидМатериала,
	|	РегистрКорАналитикаУчетаПартий.СхемаНазначенияИспользования.СчетАмортизацииБУ,
	|	РегистрКорАналитикаВидаУчета.Подразделение,
	|	РегистрКорАналитикаВидаУчета.Организация,
	|	РегистрКорАналитикаВидаУчета.ПодразделениеОрганизации,
	|	РегистрКорАналитикаУчетаПартий.ФизЛицо,
	|	РегистрАналитикаУчетаЗатрат.Качество,
	|	РегистрКорАналитикаУчетаПартий.ДокументПередачи
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартииМатериалов.АналитикаВидаУчета,
	|	ПартииМатериалов.АналитикаУчетаЗатрат,
	|	ПартииМатериалов.АналитикаРаспределенияЗатрат,
	|	ПартииМатериалов.АналитикаУчетаПартий
	|";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("ТаблицаСписанныхПартий", ТаблицаСписанныхПартий);

	Возврат Запрос;

КонецФункции // СформироватьЗапросПоСписаннымПартиямРасширеннаяАналитика()

// Функция формирует запрос по списанным партиям.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ТаблицаСписанныхПартий - ТаблицаЗначений - Таблица списанных партий
//
// Возвращаемое значение:
//	Запрос - Запрос по остаткам материалов в эксплуатации
//
Функция СформироватьЗапросПоСписаннымПартиям(
	СтруктураШапкиДокумента,
	ТаблицаСписанныхПартий
	)

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Таблица.ОтражатьВУправленческомУчете,
	|	Таблица.ОтражатьВБухгалтерскомУчете,
	|
	|	//ДляУпрУчета Таблица.Подразделение,
	|	//ДляРеглУчета Таблица.Организация,
	|	//ДляРеглУчета Таблица.ПодразделениеОрганизации,
	|	
	|	Таблица.Склад,
	|	Таблица.Номенклатура,
	|	Таблица.ХарактеристикаНоменклатуры,
	|	Таблица.СерияНоменклатуры,
	|	
	|	Таблица.ФизЛицо,
	|	Таблица.ДокументПередачи,
	|	Таблица.СхемаНазначенияИспользования,
	|	Таблица.СпособОтраженияРасходов,
	|	Таблица.СрокПолезногоИспользования,
	|	
	|	//ДляБухУчета Таблица.КорСчетБУ КАК СчетУчета,
	|	//ДляБухУчета Таблица.НалоговоеНазначениеПоФакту КАК НалоговоеНазначениеПоФакту,
	|	
	|	//ДляБухУчета Таблица.НДСВходящий,
	|	//ДляБухУчета Таблица.НДСКредит,
	|	Таблица.Стоимость,
	|	//ДляБухУчета Таблица.СтоимостьНУ,
	|	Таблица.Количество
	|	
	|ПОМЕСТИТЬ ПартииМатериалов
	|ИЗ
	|	&ТаблицаСписанныхПартий КАК Таблица
	|ГДЕ
	|	Таблица.КодОперацииПартииТоваров = ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ПередачаМатериаловВЭксплуатацию)
    |;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	//ДляУпрУчета ПартииМатериалов.Подразделение,
	|	//ДляРеглУчета ПартииМатериалов.Организация,
	|	//ДляРеглУчета ПартииМатериалов.ПодразделениеОрганизации,
	|
	|	//ДляБухУчета ПартииМатериалов.СчетУчета,
	|	//ДляБухУчета ПартииМатериалов.СчетУчета КАК СчетУчетаБУ,
	|	//ДляБухУчета ПартииМатериалов.НалоговоеНазначениеПоФакту КАК НалоговоеНазначение,
	|
	|	ПартииМатериалов.Склад,
	|	ПартииМатериалов.Номенклатура,
	|	ПартииМатериалов.ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА ПартииМатериалов.Номенклатура.ВестиПартионныйУчетПоСериям ТОГДА
	|		ПартииМатериалов.СерияНоменклатуры
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК СерияНоменклатуры,
	|	ПартииМатериалов.ФизЛицо,
	|	ПартииМатериалов.СхемаНазначенияИспользования,
 	|	ЕСТЬNULL(ПартииМатериалов.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	ПартииМатериалов.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	ПартииМатериалов.СхемаНазначенияИспользования.ВидМатериала КАК ВидМатериала,
	|	ПартииМатериалов.СхемаНазначенияИспользования.СчетАмортизацииБУ КАК СчетАмортизации,
	|	ПартииМатериалов.ДокументПередачи,
	|
	|	//ДляБухУчета СУММА(
	|	//ДляБухУчета 	ВЫБОР КОГДА ПартииМатериалов.ОтражатьВБухгалтерскомУчете ТОГДА
	|	//ДляБухУчета 		ПартииМатериалов.НДСВходящий
	|	//ДляБухУчета 	ИНАЧЕ
	|	//ДляБухУчета 		0
	|	//ДляБухУчета 	КОНЕЦ) КАК НДСВходящий,
	|
	|	//ДляБухУчета СУММА(
	|	//ДляБухУчета 	ВЫБОР КОГДА ПартииМатериалов.ОтражатьВБухгалтерскомУчете ТОГДА
	|	//ДляБухУчета 		ПартииМатериалов.НДСКредит
	|	//ДляБухУчета 	ИНАЧЕ
	|	//ДляБухУчета 		0
	|	//ДляБухУчета 	КОНЕЦ) КАК НДСКредит,
	|
	|	//ДляБухУчета СУММА(
	|	//ДляБухУчета 	ВЫБОР КОГДА ПартииМатериалов.ОтражатьВБухгалтерскомУчете ТОГДА
	|	//ДляБухУчета 		ПартииМатериалов.СтоимостьНУ
	|	//ДляБухУчета 	ИНАЧЕ
	|	//ДляБухУчета 		0
	|	//ДляБухУчета 	КОНЕЦ) КАК СтоимостьНал,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВБухгалтерскомУчете
	|		ТОГДА
	|			ПартииМатериалов.Стоимость
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК СтоимостьБух,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВУправленческомУчете
	|		ТОГДА
	|			ПартииМатериалов.Стоимость
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК СтоимостьУпр,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВБухгалтерскомУчете
	|		ТОГДА
	|			ПартииМатериалов.Количество
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК КоличествоБух,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВУправленческомУчете
	|		ТОГДА
	|			ПартииМатериалов.Количество
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК КоличествоУпр
	|
	|ИЗ
	|	ПартииМатериалов КАК ПартииМатериалов
	|
	|СГРУППИРОВАТЬ ПО
	|	//ДляУпрУчета ПартииМатериалов.Подразделение,
	|	//ДляРеглУчета ПартииМатериалов.Организация,
	|	//ДляРеглУчета ПартииМатериалов.ПодразделениеОрганизации,
	|	//ДляБухУчета ПартииМатериалов.СчетУчета,
	|	//ДляБухУчета ПартииМатериалов.НалоговоеНазначениеПоФакту,
	|	ПартииМатериалов.Склад,
	|	ПартииМатериалов.Номенклатура,
	|	ПартииМатериалов.ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА ПартииМатериалов.Номенклатура.ВестиПартионныйУчетПоСериям ТОГДА
	|		ПартииМатериалов.СерияНоменклатуры
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ,
	|	ПартииМатериалов.ФизЛицо,
	|	ПартииМатериалов.СхемаНазначенияИспользования,
	|	ЕСТЬNULL(ПартииМатериалов.СрокПолезногоИспользования, 0),
	|	ПартииМатериалов.СпособОтраженияРасходов,
	|	ПартииМатериалов.СхемаНазначенияИспользования.ВидМатериала,
	|	ПартииМатериалов.СхемаНазначенияИспользования.СчетАмортизацииБУ,
	|	ПартииМатериалов.ДокументПередачи
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляУпрУчета ПартииМатериалов.Подразделение,
	|	//ДляРеглУчета ПартииМатериалов.Организация,
	|	//ДляРеглУчета ПартииМатериалов.ПодразделениеОрганизации,
	|	//ДляБухУчета ПартииМатериалов.СчетУчета,
	|	//ДляБухУчета ПартииМатериалов.НалоговоеНазначениеПоФакту,
	|	ПартииМатериалов.Склад,
	|	ПартииМатериалов.Номенклатура,
	|	ПартииМатериалов.ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	ПартииМатериалов.ФизЛицо,
	|	ПартииМатериалов.СхемаНазначенияИспользования,
	|	ПартииМатериалов.ДокументПередачи
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ПартииМатериалов
	|";

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
			ТекстЗапроса,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
		);
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
			ТекстЗапроса,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
		);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("ТаблицаСписанныхПартий", ТаблицаСписанныхПартий);

	Возврат Запрос;

КонецФункции // СформироватьЗапросПоСписаннымПартиям()

// Процедура рассчитывает сумму погашения стоимости.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ТаблицаПогашеннойСтоимости - ТаблицаЗначений - Таблица погашенной стоимости
//	ТаблицаОшибок - ТаблицаЗначений - Таблица ошибок
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура РассчитатьПогашеннуюСтоимостьПриПередачеВЭксплуатацию(
	СтруктураШапкиДокумента,
	ТаблицаСписанныхПартий,
	ТаблицаПогашеннойСтоимости,
	ТаблицаОшибок,
	СтруктураНаборыЗаписей
	)

	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		Запрос = СформироватьЗапросПоСписаннымПартиямРасширеннаяАналитика(
			СтруктураШапкиДокумента,
			ТаблицаСписанныхПартий
		);
	Иначе
		Запрос = СформироватьЗапросПоСписаннымПартиям(
			СтруктураШапкиДокумента,
			ПодготовитьТаблицуСписанныхПартий(ТаблицаСписанныхПартий)
		);
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	СуммаНа09Счет = 0;

	Выборка  = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		
		ПогашеннаяСтоимостьУпр = 0;
		ПогашеннаяСтоимостьБух = 0;
		ПогашеннаяСтоимостьНал = 0;
		
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			ПогашеннаяСтоимостьУпр = Выборка.СтоимостьУпр;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			ПогашеннаяСтоимостьБух = Выборка.СтоимостьБух;
			
			ПогашеннаяСтоимостьНал = Выборка.СтоимостьНал;
		КонецЕсли;
		
		Если Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
		   И ПогашеннаяСтоимостьУпр = 0
		   И ПогашеннаяСтоимостьБух = 0
		   И ПогашеннаяСтоимостьНал = 0
		Тогда
			Продолжить;
		КонецЕсли;
		
		// Запомним погашенную стоимость в таблице значений.
		НоваяСтрока = ТаблицаПогашеннойСтоимости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.СтоимостьУпр = ПогашеннаяСтоимостьУпр;
		НоваяСтрока.СтоимостьБух = ПогашеннаяСтоимостьБух;
		НоваяСтрока.СтоимостьНал = ПогашеннаяСтоимостьНал;
		
		Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда

			
		Иначе
		КонецЕсли;
		
		Если Выборка.ВидМатериала <> Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет Тогда
			
			СуммаНа09Счет = СуммаНа09Счет + ПогашеннаяСтоимостьБух; 
			
		КонецЕсли;
		
	КонецЦикла;

	РаспределитьПогашеннуюСтоимостьПоСпособамОтраженияРасходов(
		СтруктураШапкиДокумента,
		ТаблицаПогашеннойСтоимости,
		ТаблицаОшибок,
		СтруктураНаборыЗаписей
	);


	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		// Отражение амортизации на 09 счете
		СуммаПроводки = СуммаНа09Счет;
		
		Если СуммаПроводки <> 0 И СтруктураНаборыЗаписей.Свойство("Хозрасчетный") Тогда
			
			РегистрБухгалтерииНаборЗаписей = СтруктураНаборыЗаписей["Хозрасчетный"];
			
			НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
			
			НоваяПроводка.Организация  	= СтруктураШапкиДокумента.Организация;
			НоваяПроводка.Активность 	= Истина;
			НоваяПроводка.Период 		= СтруктураШапкиДокумента.Дата;
			НоваяПроводка.Содержание   	= "Отражение амортизации на 09 счете";
			НоваяПроводка.Сумма        	= СуммаПроводки;
			НоваяПроводка.СписаниеПартий = Истина;
			
			НоваяПроводка.СчетДт 		= ПланыСчетов.Хозрасчетный.АмортизационныеОтчисления;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // РассчитатьПогашеннуюСтоимостьПриПередачеВЭксплуатацию()

// Процедура дополняет структуру шапки документа новыми значениями.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//
Процедура ДополнитьСтруктуруШапкиДокументаПогашениеСтоимости(
	СтруктураШапкиДокумента
	)

	СуффиксыИмениРегистра = Новый Соответствие;
	СуффиксыИмениРегистра.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете, "");
	СуффиксыИмениРегистра.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете, "БухгалтерскийУчет");
	СтруктураШапкиДокумента.Вставить("СуффиксыИмениРегистра", СуффиксыИмениРегистра);

	СоответствиеВидУчета = Новый Соответствие;
	СоответствиеВидУчета.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	СоответствиеВидУчета.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	СтруктураШапкиДокумента.Вставить("СоответствиеВидУчета", СоответствиеВидУчета);

	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.ПериодРегистрации);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);

КонецПроцедуры // ДополнитьСтруктуруШапкиДокументаПогашениеСтоимости()

// Функция подготавливает таблицу списанных партий для погашения стоимости
//
// Параметры:
//  ТаблицаСписанныхПартий – таблица значений - табилца списанных партий по документу
//
Функция ПодготовитьТаблицуСписанныхПартий(ТаблицаСписанныхПартий)
	Если ТаблицаСписанныхПартий.Колонки.Найти("Движение") <> Неопределено Тогда//Вызывается из партионного учета
		ПодготовленнаяТаблицаСписанныхПартий = ТаблицаСписанныхПартий.Скопировать();
				
		Для НомерСтроки = 0 По ПодготовленнаяТаблицаСписанныхПартий.Количество() - 1 Цикл		
			ПодготовленнаяТаблицаСписанныхПартий[НомерСтроки].Количество = ТаблицаСписанныхПартий[НомерСтроки].Движение.Количество;
		КонецЦикла;
		
		Возврат ПодготовленнаяТаблицаСписанныхПартий;
	Иначе //Вызывается из корректировки стоимости списания
		Возврат ТаблицаСписанныхПартий;
	КонецЕсли;	
КонецФункции	

// Процедура выполняет погашение стоимости материалов при передаче в эксплуатацию.
//
// Параметры:
//	СтруктураПараметров - Структура - Параметры
//	ТаблицаСписанныхПартий - ТаблицаЗначений - Таблица списанных партий
//
Процедура ПогашениеСтоимостиПриПередачеВЭксплуатацию(
	СтруктураПараметров,
	ТаблицаСписанныхПартий
	) Экспорт

	Если ТаблицаСписанныхПартий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Ссылка", СтруктураПараметров.Регистратор);
	СтруктураШапкиДокумента.Вставить("Дата", СтруктураПараметров.Период);
	СтруктураШапкиДокумента.Вставить("ПериодРегистрации", СтруктураПараметров.Период);

	СтруктураШапкиДокумента.Вставить("НачДата", НачалоМесяца(СтруктураШапкиДокумента.ПериодРегистрации));
	СтруктураШапкиДокумента.Вставить("КонДата", КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации));

	СтруктураШапкиДокумента.Вставить("Организация", СтруктураПараметров.Организация);
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете", СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете);
	СтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете);

	

	МетаданныеДокумента = СтруктураПараметров.Регистратор.Метаданные();
	СтруктураШапкиДокумента.Вставить("ВидДокумента",  МетаданныеДокумента.Имя);

	ДополнитьСтруктуруШапкиДокументаПогашениеСтоимости(СтруктураШапкиДокумента);

	Если СтруктураПараметров.Свойство("НаборыЗаписейРегистров") Тогда
		СтруктураНаборыЗаписей = СтруктураПараметров.НаборыЗаписейРегистров;
	Иначе
		СтруктураНаборыЗаписей = Новый Структура;
	КонецЕсли;

	ТаблицаПогашеннойСтоимости = СформироватьТаблицуПогашеннойСтоимости();
	ТаблицаОшибок = УправлениеЗатратами.СформироватьТаблицуОшибок();

	РассчитатьПогашеннуюСтоимостьПриПередачеВЭксплуатацию(
		СтруктураШапкиДокумента,
		ТаблицаСписанныхПартий,
		ТаблицаПогашеннойСтоимости,
		ТаблицаОшибок,
		СтруктураНаборыЗаписей
	);

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента.Ссылка);
	УправлениеЗатратами.ВывестиСообщенияОбОшибках(
		СтруктураШапкиДокумента,
		ТаблицаОшибок,
		Заголовок
	);

	СтруктураПараметров.Вставить("НаборыЗаписейРегистров", СтруктураНаборыЗаписей);

КонецПроцедуры // ПогашениеСтоимостиПриПередачеВЭксплуатацию()

