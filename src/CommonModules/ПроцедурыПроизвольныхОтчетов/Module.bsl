
Функция ЭтоТиповойОтчет(МетаданныеОтчета) Экспорт

	ЕстьРеквизит = (МетаданныеОтчета.Реквизиты.Найти("ЗначенияНастроекПанелиПользователя") <> Неопределено); 
	
	Возврат ЕстьРеквизит;

КонецФункции //
 
Функция ЭтоУниверсальныйОтчет(МетаданныеОтчета) Экспорт
	
	ЕстьРеквизит = (МетаданныеОтчета.Реквизиты.Найти("УниверсальныйОтчет") <> Неопределено); 
	
	Возврат ЕстьРеквизит;
	
КонецФункции //

Функция ЭтоПроизвольныйОтчет(ОтчетОбъект) Экспорт
	
	Результат = (ТипЗнч(ОтчетОбъект) = Тип("ОтчетОбъект.ПроизвольныйОтчет"));
	
	Возврат Результат;
		
КонецФункции

Процедура ВосстановитьНастройкиОтчета(ОтчетОбъект, ТипИсточникаДанных, СохраненнаяНастройка) Экспорт
	

	Если ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет Тогда
		
		Если ЗначениеЗаполнено(СохраненнаяНастройка) Тогда
			ОтчетОбъект.ВосстановитьНастройкиИзСтруктуры(СохраненнаяНастройка);
		КонецЕсли;
		
	ИначеЕсли ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет
		ИЛИ ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет Тогда
		
		// Если сохраненная настройка пустая, то будет применена настройка по умолчанию
		ТиповыеОтчеты.ИнициализироватьКомпоновщикНастроек(ОтчетОбъект, , Ложь);
		
		ОтчетОбъект.СохраненнаяНастройка = СохраненнаяНастройка;
		ОтчетОбъект.ПрименитьНастройку();
		
	КонецЕсли; 
	
КонецПроцедуры //
 
Функция ПолучитьОтчетИзИсточникаДанных(СтруктураИсточникаДанных, ВосстановитьНастройки = Ложь) Экспорт

	ОтчетОбъект = Неопределено;
	
	Если СтруктураИсточникаДанных.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет 
		ИЛИ СтруктураИсточникаДанных.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет Тогда
		
		Если ЗначениеЗаполнено(СтруктураИсточникаДанных.ИмяИсточника) Тогда
			ОтчетОбъект = Отчеты[СтруктураИсточникаДанных.ИмяИсточника].Создать();
		КонецЕсли;  
		
	ИначеЕсли СтруктураИсточникаДанных.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет Тогда 
		
		Если ЗначениеЗаполнено(СтруктураИсточникаДанных.ИмяИсточника) Тогда
			ОтчетОбъект = Отчеты.ПроизвольныйОтчет.Создать();
			ОтчетОбъект.УстановитьПроизвольныйОтчет(СтруктураИсточникаДанных.ИмяИсточника,,, Ложь);
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ВосстановитьНастройки И ОтчетОбъект <> Неопределено Тогда
		
		СохраненнаяНастройка = Неопределено;
		Если СтруктураИсточникаДанных.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет Тогда
			
			Если НЕ ПустаяСтрока(СтруктураИсточникаДанных.НаименованиеНастройкиОтчета) Тогда
				СтруктураНастройки = Новый Структура;
				СтруктураНастройки.Вставить("Пользователь", СтруктураИсточникаДанных.ПользовательНастройкиОтчета);
				СтруктураНастройки.Вставить("ИмяОбъекта", "ОтчетОбъект." + СтруктураИсточникаДанных.ИмяИсточника);
				СтруктураНастройки.Вставить("НаименованиеНастройки", СтруктураИсточникаДанных.НаименованиеНастройкиОтчета);
				
				Если УниверсальныеМеханизмы.ПолучитьНастройку(СтруктураНастройки) Тогда
					СохраненнаяНастройка = СтруктураНастройки.СохраненнаяНастройка;
				КонецЕсли;
			КонецЕсли;
		
		ИначеЕсли СтруктураИсточникаДанных.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет
			ИЛИ СтруктураИсточникаДанных.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет Тогда
			
			СохраненнаяНастройка = СтруктураИсточникаДанных.СохраненнаяНастройка;
		КонецЕсли;
		
		ВосстановитьНастройкиОтчета(ОтчетОбъект, СтруктураИсточникаДанных.ТипИсточникаДанных, СохраненнаяНастройка);
		
	КонецЕсли;
	
	Возврат ОтчетОбъект;
	
КонецФункции //

Функция ПолучитьСписокПолейИсточника(СтруктураИсточникаДанных) Экспорт

	СписокПолейИсточника = Новый ТаблицаЗначений;
	СписокПолейИсточника.Колонки.Добавить("Поле");
	СписокПолейИсточника.Колонки.Добавить("Заголовок");
	СписокПолейИсточника.Колонки.Добавить("ТипЗначения");
	СписокПолейИсточника.Колонки.Добавить("ВыражениеПоляИтога");
	СписокПолейИсточника.Колонки.Добавить("ЭтоРесурс", Новый ОписаниеТипов("Булево"));
	
	Если СтруктураИсточникаДанных.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет Тогда
		
		ОтчетОбъект = ПолучитьОтчетИзИсточникаДанных(СтруктураИсточникаДанных, Истина);
		Если ОтчетОбъект <> Неопределено Тогда
			ЗаполнитьСписокПолейУниверсальногоОтчета(СписокПолейИсточника, ОтчетОбъект);
		КонецЕсли; 
		
	ИначеЕсли СтруктураИсточникаДанных.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет
		ИЛИ СтруктураИсточникаДанных.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет Тогда
		
		ОтчетОбъект = ПолучитьОтчетИзИсточникаДанных(СтруктураИсточникаДанных, Истина);
		Если ОтчетОбъект <> Неопределено Тогда
			ЗаполнитьСписокПолейТиповогоОтчета(СписокПолейИсточника, ОтчетОбъект);
		КонецЕсли; 
		
	ИначеЕсли СтруктураИсточникаДанных.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ВнешняяОбработка Тогда
		
		ЗаполнитьСписокПолейОбработки(СписокПолейИсточника, СтруктураИсточникаДанных.ИмяИсточника);
		
	КонецЕсли; 
	
	Возврат СписокПолейИсточника;

КонецФункции //

Функция ПолучитьСписокПараметровИсточника(СтруктураИсточникаДанных) Экспорт
	
	СписокПараметровИсточника = Новый ТаблицаЗначений;
	СписокПараметровИсточника.Колонки.Добавить("Имя");
	СписокПараметровИсточника.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	СписокПараметровИсточника.Колонки.Добавить("ОграничениеИспользования", Новый ОписаниеТипов("Булево"));
	СписокПараметровИсточника.Колонки.Добавить("Выражение", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)));
	СписокПараметровИсточника.Колонки.Добавить("ТипЗначения");
	
	Если СтруктураИсточникаДанных.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет Тогда
		
		ОтчетОбъект = ПолучитьОтчетИзИсточникаДанных(СтруктураИсточникаДанных, Истина);
		Если ОтчетОбъект <> Неопределено Тогда
			ЗаполнитьСписокПараметровУниверсальногоОтчета(СписокПараметровИсточника, ОтчетОбъект);
		КонецЕсли; 
		
	ИначеЕсли СтруктураИсточникаДанных.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет
		ИЛИ СтруктураИсточникаДанных.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет Тогда

		ОтчетОбъект = ПолучитьОтчетИзИсточникаДанных(СтруктураИсточникаДанных, Истина);
		Если ОтчетОбъект <> Неопределено Тогда
			ЗаполнитьСписокПараметровТиповогоОтчета(СписокПараметровИсточника,ОтчетОбъект);
		КонецЕсли; 
		
	ИначеЕсли СтруктураИсточникаДанных.ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ВнешняяОбработка Тогда
		
		ЗаполнитьСписокПараметровОбработки(СписокПараметровИсточника, СтруктураИсточникаДанных.ИмяИсточника);
		
	КонецЕсли; 
	
	Возврат СписокПараметровИсточника;
	
КонецФункции //

Функция НайтиНаборДанныхСхемы(ИмяНабораДанных, НаборыДанных, ВладелецНабора = Неопределено) Экспорт
	
	Если ВладелецНабора = Неопределено Тогда
		ВладелецНабора = НаборыДанных;
	КонецЕсли; 
	
	Для каждого НаборДанных Из НаборыДанных Цикл
		Если НаборДанных.Имя = ИмяНабораДанных Тогда
			Возврат НаборДанных;
		КонецЕсли;
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ВладелецНабора = НаборДанных;
			Результат = НайтиНаборДанныхСхемы(ИмяНабораДанных, НаборДанных.Элементы, ВладелецНабора);
			Если Результат <> Неопределено Тогда
				Возврат Результат; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции //

Процедура УдалитьНаборДанных(НаборДанных, ВладелецНабора = Неопределено) Экспорт

	Если ВладелецНабора <> Неопределено Тогда
		Если ТипЗнч(ВладелецНабора) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ВладелецНабора.Элементы.Удалить(НаборДанных);
		Иначе
			ВладелецНабора.Удалить(НаборДанных);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //

Функция СкопироватьНаборДанных(Приемник, Источник, ИсточникиДанных = Неопределено, ПараметрыИсточниковДанных = Неопределено) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	ИсточникКопия = Приемник.Добавить(ТипИсточника);
	
	ЗаполнитьЗначенияСвойств(ИсточникКопия, Источник);
	
	Для каждого ПолеИсточника Из Источник.Поля Цикл
		ТипПоля = ТипЗнч(ПолеИсточника);
		ПолеИсточникаКопия = ИсточникКопия.Поля.Добавить(ТипПоля);
		ЗаполнитьЗначенияСвойств(ПолеИсточникаКопия, ПолеИсточника);
	КонецЦикла;
	
	Если ТипИсточника = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") И ИсточникиДанных <> Неопределено Тогда
		
		ИсточникНабора = ИсточникиДанных.Найти(Источник.Имя, "НаборДанных");
		Если ИсточникНабора <> Неопределено Тогда
			НовыйИсточник = ДобавитьИсточникДанных(ИсточникиДанных);
			НовыйИсточник.НаборДанных = ИсточникКопия.Имя;

			НовыйИсточник.ТипИсточникаДанных = ИсточникНабора.ТипИсточникаДанных;
			НовыйИсточник.ИмяИсточника = ИсточникНабора.ИмяИсточника;
			НовыйИсточник.СохраненнаяНастройка = ИсточникНабора.СохраненнаяНастройка;
			НовыйИсточник.НаименованиеНастройкиОтчета = ИсточникНабора.НаименованиеНастройкиОтчета;
			НовыйИсточник.ПользовательНастройкиОтчета = ИсточникНабора.ПользовательНастройкиОтчета;
		КонецЕсли; 
		
		ПараметрыИсточника = ПараметрыИсточниковДанных.НайтиСтроки(Новый Структура("КлючИсточника", ИсточникНабора.КлючИсточника));
		Для каждого ЭлКоллекции Из ПараметрыИсточника Цикл
			НовыйПараметр = ПараметрыИсточниковДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ЭлКоллекции);
			НовыйПараметр.КлючИсточника = НовыйИсточник.КлючИсточника;
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат ИсточникКопия;
	
КонецФункции //

Функция ПолучитьТипЗначенияПоля(ПолеКомпоновкиДанных)
	
	ТипЗначенияПоля = Неопределено;
	
	Попытка
		
		ТипЗначенияПоля = ПолеКомпоновкиДанных.Тип;
		
	Исключение
		
	КонецПопытки; 
	
	Если ТипЗначенияПоля = Неопределено Тогда
		ТипЗначенияПоля = ПолеКомпоновкиДанных.ТипЗначения;
	КонецЕсли;
	
	Возврат ТипЗначенияПоля;
	
КонецФункции // 

Процедура ВставитьЗначениеЭлементаФормы(ЭлементыФормы, Структура, Имя)
	
	Ключ = СтрЗаменить(Имя, "АналитическиеОтборы", "");
	Ключ = СтрЗаменить(Ключ, "НастройкиПрогноза", "");
		
	Если ЭлементыФормы.Найти(Имя) <> Неопределено Тогда
		Структура.Вставить(Ключ, ЭлементыФормы[Имя].Значение);
	Иначе
		Структура.Вставить(Ключ, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияАналитическихОтборов(ЗначенияНастроек, ЭлементыФормы) Экспорт

	//АналитическиеОтборы
	ЗначенияАналитическихОтборов = Новый Структура;
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыКоличествоТоп");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПроцентТоп");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеТоп");
	
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПроцентПорог");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыРесурсПорог");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеПорог");
	
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеОтборТренд");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыЗначениеОтборТренд");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеОтборСостояние");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыЗначениеОтборСостояние");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеОтборABCКлассификация");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыЗначениеОтборABCКлассификация");
	ВставитьЗначениеЭлементаФормы(ЭлементыФормы, ЗначенияАналитическихОтборов, "АналитическиеОтборыСкрытьНулевые");
	
	ЗначенияНастроек.Вставить("АналитическиеОтборы", ЗначенияАналитическихОтборов);
	
КонецПроцедуры //

Процедура ЗаполнитьЗначенияАналитическихОтборовПоумолчанию(ЗначенияНастроек) Экспорт

	//АналитическиеОтборы
	ЗначенияАналитическихОтборов = Новый Структура;
	ЗначенияАналитическихОтборов.Вставить("КоличествоТоп", Неопределено);
	ЗначенияАналитическихОтборов.Вставить("ПроцентТоп", Неопределено);
	ЗначенияАналитическихОтборов.Вставить("ПолеТоп", "");
	
	ЗначенияАналитическихОтборов.Вставить("ПроцентПорог", 0);
	ЗначенияАналитическихОтборов.Вставить("РесурсПорог", "");
	ЗначенияАналитическихОтборов.Вставить("ПолеПорог", "");
	
	ЗначенияАналитическихОтборов.Вставить("ПолеОтборТренд", "");
	ЗначенияАналитическихОтборов.Вставить("ЗначениеОтборТренд", Неопределено);
	ЗначенияАналитическихОтборов.Вставить("ПолеОтборСостояние", "");
	ЗначенияАналитическихОтборов.Вставить("ЗначениеОтборСостояние", Неопределено);
	ЗначенияАналитическихОтборов.Вставить("ПолеОтборABCКлассификация", "");
	ЗначенияАналитическихОтборов.Вставить("ЗначениеОтборABCКлассификация", Неопределено);
	ЗначенияАналитическихОтборов.Вставить("СкрытьНулевые", Неопределено);
	
	ЗначенияНастроек.Вставить("АналитическиеОтборы", ЗначенияАналитическихОтборов);
	
КонецПроцедуры //

Функция ПользовательМожетИзменятьПроизвольныйОтчет() Экспорт
	
	Результат = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("АдминистрированиеДополнительныхФормИОбработок");
	
	Возврат Результат;
	
КонецФункции // 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ИСТОЧНИКОМ "ОТЧЕТ" НА БАЗЕ УНИВЕРСАЛЬНОГО ОТЧЕТА

Функция ПолучитьДанныеОтчетаНаБазеУниверсальногоОтчета(ОтчетОбъект, СтруктураПараметров)
	
	ДанныеОтчета = Новый ТаблицаЗначений;
	
	Если СтруктураПараметров.Свойство("ПараметрыОтчета") Тогда
		Для каждого ПараметрОтчета Из СтруктураПараметров.ПараметрыОтчета Цикл
			ОтчетОбъект.УниверсальныйОтчет[ПараметрОтчета.Ключ] = ПараметрОтчета.Значение;
		КонецЦикла;
	КонецЕсли; 
	
	ЕстьГруппировки = (ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() <> 0);
	ЕстьДетальныеЗаписи = ОтчетОбъект.УниверсальныйОтчет.ВыводитьДетальныеЗаписи;
	
	
	Попытка
	
		ОтчетОбъект.СформироватьОтчет(Неопределено);
		Результат = ОтчетОбъект.УниверсальныйОтчет.ПолучитьРезультат();
	
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	// Создадим колонки
	Для каждого КолонкаРезультата Из Результат.Колонки Цикл
		ДанныеОтчета.Колонки.Добавить(КолонкаРезультата.Имя, Новый ОписаниеТипов(КолонкаРезультата.ТипЗначения));
	КонецЦикла; 
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТипЗаписиВыборки = Выборка.ТипЗаписи();
		
		// Берем данные, которые выводятся в отчет
		Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ДетальнаяЗапись 
			И ЕстьДетальныеЗаписи 
			
			ИЛИ ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке 
			И ЕстьГруппировки 
			
			ИЛИ ТипЗаписиВыборки = ТипЗаписиЗапроса.ОбщийИтог
			И НЕ ЕстьДетальныеЗаписи И НЕ ЕстьГруппировки Тогда
			
			
			НоваяСтрокаДанных = ДанныеОтчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных, Выборка);
			
			Если НЕ ЕстьДетальныеЗаписи И НЕ ЕстьГруппировки Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ДанныеОтчета;

КонецФункции //

Процедура ЗаполнитьСписокПолейУниверсальногоОтчета(СписокВыбранныхПолейОтчета, ОтчетОбъект)

	Показатели = ОтчетОбъект.УниверсальныйОтчет.Показатели;
	
	Для каждого ТекущийПоказатель из Показатели.Строки Цикл
			
		// Группа показателей
		Если ТекущийПоказатель.Строки.Количество() > 0 И ТекущийПоказатель.Использование > 0 Тогда
				
			КоличествоПоказателейВГруппе = 0;
			
			Для каждого Показатель из ТекущийПоказатель.Строки Цикл
					
				Если Показатель.Использование > 0 Тогда
					
					НовоеПоле = СписокВыбранныхПолейОтчета.Добавить();
					НовоеПоле.Поле = Показатель.Имя;
					НовоеПоле.Заголовок = Показатель.Представление + " (" + ТекущийПоказатель.Представление + ")";
					НовоеПоле.ЭтоРесурс = Истина;
						
				КонецЕсли;
					
			КонецЦикла;
				
		ИначеЕсли ТекущийПоказатель.Использование > 0 Тогда // Показатель
			
			НовоеПоле = СписокВыбранныхПолейОтчета.Добавить();
			НовоеПоле.Поле = ТекущийПоказатель.Имя;
			НовоеПоле.Заголовок = ТекущийПоказатель.Представление;
			НовоеПоле.ЭтоРесурс = Истина;
				
		КонецЕсли;
			
	КонецЦикла;
	
	Для каждого ВыбранноеПоле Из ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля Цикл
		НовоеПоле = СписокВыбранныхПолейОтчета.Добавить();
		НовоеПоле.Поле = ВыбранноеПоле.Имя;
		НовоеПоле.Заголовок = ВыбранноеПоле.Представление;
		НовоеПоле.ЭтоРесурс = Ложь;
	КонецЦикла; 
	
	Для каждого ВыбранноеПоле Из ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки Цикл
		НовоеПоле = СписокВыбранныхПолейОтчета.Добавить();
		НовоеПоле.Поле = ВыбранноеПоле.Имя;
		НовоеПоле.Заголовок = ВыбранноеПоле.Представление;
		НовоеПоле.ЭтоРесурс = Ложь;
	КонецЦикла; 
	
	Для каждого ВыбранноеПоле Из СписокВыбранныхПолейОтчета Цикл
		ПолеПостроителя = ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.Найти(ВыбранноеПоле.Поле);
		ВыбранноеПоле.ТипЗначения = ПолеПостроителя.ТипЗначения;
	КонецЦикла; 
	
КонецПроцедуры //

Процедура ЗаполнитьСписокПараметровУниверсальногоОтчета(СписокПараметровОтчета, ОтчетОбъект)

	ПараметрыПостроителя = ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Параметры;
	
	// Возможные значения: // (-1) - не выбирать период, 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
	РежимВводаПериода = ОтчетОбъект.УниверсальныйОтчет.мРежимВводаПериода;
	
	Если РежимВводаПериода = 1 Тогда
		
		ПараметрОтчета = СписокПараметровОтчета.Добавить();
		ПараметрОтчета.Имя = "ДатаКон";
		ПараметрОтчета.Заголовок = "На дату";
		ПараметрОтчета.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		
	ИначеЕсли РежимВводаПериода = 0 Тогда
		
		ПараметрОтчета = СписокПараметровОтчета.Добавить();
		ПараметрОтчета.Имя = "ДатаНач";
		ПараметрОтчета.Заголовок = "Дата начала";
		ПараметрОтчета.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		
		ПараметрОтчета = СписокПараметровОтчета.Добавить();
		ПараметрОтчета.Имя = "ДатаКон";
		ПараметрОтчета.Заголовок = "Дата окончания";
		ПараметрОтчета.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
		
	КонецЕсли; 
	
КонецПроцедуры //


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ИСТОЧНИКОМ "ОТЧЕТ" НА БАЗЕ ТИПОВОГО ОТЧЕТА

Процедура ЗаполнитьПользовательскиеНастройкиПоКомпоновщику(ОтчетОбъект, ЗначенияПараметровМакетаКомпоновкиДанных, ПараметрыИсточника, ЗначенияПараметровИсточника = Неопределено) Экспорт
	Перем ЗначениеПараметра;
	
	Если ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Неопределено Тогда
 		Возврат;
	КонецЕсли;
	
	НастройкиКомпоновкиДанныхОтчета = ОтчетОбъект.КомпоновщикНастроек.Настройки;
	
	ПараметрНачалоПериода = Неопределено;
	ПараметрКонецПериода = Неопределено;
	ПараметрПериод = Неопределено;
	
	ЗначенияНастроекПанелиПользователя = ОтчетОбъект.ЗначенияНастроекПанелиПользователя.Получить();

	ЕстьДинамическиеПараметры = ЗначенияНастроекПанелиПользователя.Свойство("ДинамическиеПараметры") <> Неопределено;
	
	Для каждого ПараметрИсточника Из ПараметрыИсточника Цикл
		
		Если ЗначенияПараметровИсточника = Неопределено 
			ИЛИ НЕ ЗначенияПараметровИсточника.Свойство(ПараметрИсточника.Параметр, ЗначениеПараметра) Тогда
			
			ЗначениеПараметра = ПолучитьЗначениеПараметраКомпоновщика(ЗначенияПараметровМакетаКомпоновкиДанных, ПараметрИсточника.ПутьКДанным);
		КонецЕсли;
		
		Если ЗначениеПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрКомпоновкиДанныхОтчета = НастройкиКомпоновкиДанныхОтчета.ПараметрыДанных.Элементы.Найти(ПараметрИсточника.Параметр);
		Если ПараметрКомпоновкиДанныхОтчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрКомпоновкиДанныхОтчета.Значение = ЗначениеПараметра;
		ПараметрКомпоновкиДанныхОтчета.Использование = Истина;
	
		Если ПараметрИсточника.Параметр = "НачалоПериода" Тогда
			ПараметрНачалоПериода = ЗначениеПараметра;
		ИначеЕсли ПараметрИсточника.Параметр = "КонецПериода" Тогда			
			ПараметрКонецПериода = ЗначениеПараметра;
		ИначеЕсли ПараметрИсточника.Параметр = "Период" Тогда			
			ПараметрПериод = ЗначениеПараметра;
		КонецЕсли; 
		
		Если ЕстьДинамическиеПараметры Тогда
			ПараметрПанелиПользователя = ЗначенияНастроекПанелиПользователя.ДинамическиеПараметры.Получить(ПараметрИсточника.Параметр);
			Если ПараметрПанелиПользователя <> Неопределено Тогда
				СтруктураНасроек = Новый Структура;
				СтруктураНасроек.Вставить("Использование", Истина);
				СтруктураНасроек.Вставить("Параметр", ПараметрИсточника.Параметр);
				СтруктураНасроек.Вставить("Значение", ЗначениеПараметра);
				
				ЗначенияНастроекПанелиПользователя.ДинамическиеПараметры.Вставить(ПараметрИсточника.Параметр, СтруктураНасроек);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Если ПараметрНачалоПериода <> Неопределено И ПараметрКонецПериода <> Неопределено Тогда
		СтандартныйПериод = Новый СтандартныйПериод;
		СтандартныйПериод.ДатаНачала = ПараметрНачалоПериода;
		СтандартныйПериод.ДатаОкончания = ПараметрКонецПериода;
		
		ЗначенияНастроекПанелиПользователя.Вставить("СтандартныйПериод", СтандартныйПериод);
	ИначеЕсли ПараметрПериод <> Неопределено Тогда
		СтандартнаяДатаНачала = Новый СтандартнаяДатаНачала;
		СтандартнаяДатаНачала.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
		СтандартнаяДатаНачала.Дата = ПараметрПериод;
		ЗначенияНастроекПанелиПользователя.Вставить("СтандартнаяДатаНачала", СтандартнаяДатаНачала);
	КонецЕсли; 
	
	ЗначенияНастроекПанелиПользователя.Вставить("НастройкиКомпоновщика", ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
	
	ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ЗначенияНастроекПанелиПользователя);
	
КонецПроцедуры //

Функция ПолучитьДанныеОтчетаНаБазеТиповогоОтчета(ОтчетОбъект)
	
	ДанныеОтчета = Новый ТаблицаЗначений;
	
	НастройкиКомпоновкиДанныхОтчета = ОтчетОбъект.КомпоновщикНастроек.Настройки;
	
	ВертикальноеРасположениеИтогов = НастройкиКомпоновкиДанныхОтчета.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("VerticalOverallPlacement"));
	ВертикальноеРасположениеИтогов.Использование = Истина;
	ВертикальноеРасположениеИтогов.Значение = РасположениеИтоговКомпоновкиДанных.Нет;
	
	Попытка
	
		ОтчетОбъект.СформироватьОтчет(ДанныеОтчета, Неопределено, Ложь);
	
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДанныеОтчета;

КонецФункции //

Процедура ДобавитьКоллекциюПолейВыбораОтчета(СписокПолейОтчета, ДоступныеПоляВыбора, Элементы)

	Для каждого ПолеВыбора Из Элементы Цикл
		
		Если НЕ ПолеВыбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ДобавитьКоллекциюПолейВыбораОтчета(СписокПолейОтчета, ДоступныеПоляВыбора, ПолеВыбора.Элементы);
		Иначе
			НовоеПоле = СписокПолейОтчета.Добавить();
			НовоеПоле.Поле = Строка(ПолеВыбора.Поле);
			
			ДоступноеПолеКомпоновкиДанных = ДоступныеПоляВыбора.НайтиПоле(ПолеВыбора.Поле);
			
			НовоеПоле.Заголовок = ДоступноеПолеКомпоновкиДанных.Заголовок;
			
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов(ПолучитьТипЗначенияПоля(ДоступноеПолеКомпоновкиДанных));
			НовоеПоле.ЭтоРесурс = ДоступноеПолеКомпоновкиДанных.Ресурс
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры //

Процедура ДобавитьКоллекциюГруппировокОтчета(СписокПолейОтчета, ДоступныеПоляГруппировки, Структура)

	Для каждого ГруппировкаКомпоновки Из Структура Цикл
		
		Если НЕ ГруппировкаКомпоновки.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ПолеГруппировки Из ГруппировкаКомпоновки.ПоляГруппировки.Элементы Цикл
			
			Если НЕ ПолеГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			НовоеПоле = СписокПолейОтчета.Добавить();
			НовоеПоле.Поле = Строка(ПолеГруппировки.Поле);
			
			ДоступноеПоле = ДоступныеПоляГруппировки.НайтиПоле(ПолеГруппировки.Поле);
			
			НовоеПоле.Заголовок = ДоступноеПоле.Заголовок;
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов(ПолучитьТипЗначенияПоля(ДоступноеПоле));
			НовоеПоле.ЭтоРесурс = ДоступноеПоле.Ресурс
			
		КонецЦикла; 
		
		ДобавитьКоллекциюГруппировокОтчета(СписокПолейОтчета, ДоступныеПоляГруппировки, ГруппировкаКомпоновки.Структура);
		
	КонецЦикла; 
	
КонецПроцедуры //

Процедура ЗаполнитьСписокПолейТиповогоОтчета(СписокВыбранныхПолейОтчета, ОтчетОбъект)
	
	НастройкиКомпоновки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
	
	СхемаКомпоновкиДанных = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект);
	
	ДобавитьКоллекциюПолейВыбораОтчета(СписокВыбранныхПолейОтчета, НастройкиКомпоновки.Выбор.ДоступныеПоляВыбора, НастройкиКомпоновки.Выбор.Элементы);
	ДобавитьКоллекциюГруппировокОтчета(СписокВыбранныхПолейОтчета, НастройкиКомпоновки.ДоступныеПоляГруппировок, НастройкиКомпоновки.Структура);
	
	Для каждого ПолеОтчета Из СписокВыбранныхПолейОтчета Цикл
		Если ПолеОтчета.ЭтоРесурс Тогда
			ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Найти(ПолеОтчета.Поле);
			
			// Получим выражение поля итога
			Если ПолеИтога <> Неопределено Тогда
				ПолеОтчета.ВыражениеПоляИтога = ПолеИтога.Выражение;
			Иначе
			
				Если Найти(ПолеОтчета.Поле, "UserFields") <> 0 
					ИЛИ Найти(ПолеОтчета.Поле, "ПользовательскиеПоля") <> 0 Тогда
					// Пользовательское поле
					
					Для каждого ПользовательскоеПоле Из НастройкиКомпоновки.ПользовательскиеПоля.Элементы Цикл
						Если ПользовательскоеПоле.ПутьКДанным = ПолеОтчета.Поле Тогда
							Если ТипЗнч(ПользовательскоеПоле) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
								ПолеОтчета.ВыражениеПоляИтога = ПользовательскоеПоле.ПолучитьВыражениеИтоговыхЗаписей();
							КонецЕсли; 
							
							Прервать;
						КонецЕсли;					
					КонецЦикла; 
				КонецЕсли; 
				
			КонецЕсли; 
		КонецЕсли; 
		
		ПолеОтчета.Поле = СтрЗаменить(ПолеОтчета.Поле, ".","");
	КонецЦикла; 
	
КонецПроцедуры //

Процедура ЗаполнитьСписокПараметровТиповогоОтчета(СписокПараметровОтчета, ОтчетОбъект)

	
	СхемаКомпоновкиДанных = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект);
	ПараметрыСКД = СхемаКомпоновкиДанных.Параметры;
	
	Для каждого ПараметрКомпоновкиДанных Из ПараметрыСКД Цикл
		// Пропустим параметры, которые ограничены для использования
		// кроме параметров "Период", "НачалоПериода", "КонецПериода"
		Если ПараметрКомпоновкиДанных.ОграничениеИспользования 
			И НРег(ПараметрКомпоновкиДанных.Имя) <> "период" 
			И НРег(ПараметрКомпоновкиДанных.Имя) <> "началопериода"
			И НРег(ПараметрКомпоновкиДанных.Имя) <> "конецпериода"
			
			ИЛИ НЕ ПараметрКомпоновкиДанных.ВключатьВДоступныеПоля Тогда
			
			Продолжить;
		КонецЕсли;
		
		ПараметрОтчета = СписокПараметровОтчета.Добавить();
		ПараметрОтчета.Имя = ПараметрКомпоновкиДанных.Имя; 
		ПараметрОтчета.Заголовок = ПараметрКомпоновкиДанных.Заголовок; 
		ПараметрОтчета.ОграничениеИспользования = ПараметрКомпоновкиДанных.ОграничениеИспользования;
		ПараметрОтчета.Выражение = ПараметрКомпоновкиДанных.Выражение;
	    ПараметрОтчета.ТипЗначения = Новый ОписаниеТипов(ПараметрКомпоновкиДанных.ТипЗначения);
	КонецЦикла; 
	
КонецПроцедуры //
 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ИСТОЧНИКОМ "ВНЕШНЯЯ ОБРАБОТКА"

Функция СоздатьВнешнююОбработку(ВнешняяОбработка)

	ОбработкаОбъект = Неопределено;
		
	#Если Клиент Тогда
	ИмяФайла = ПолучитьИмяВременногоФайла();
	Попытка
		ДвоичныеДанные = ВнешняяОбработка.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
	
		ОбработкаОбъект = ВнешниеОбработки.Создать(ИмяФайла);
	Исключение
	КонецПопытки;
	#КонецЕсли
	
	Возврат ОбработкаОбъект;
	
КонецФункции //

Функция ПолучитьДанныеВнешнейОбработки(ВнешняяОбработка, ПараметрыИсточникаДанных, НастройкиКомпоновкиДанных)
	
	ДанныеОбработки = Неопределено;
	
	Попытка
		
		ОбработкаОбъект = СоздатьВнешнююОбработку(ВнешняяОбработка);
		Если ОбработкаОбъект <> Неопределено Тогда
			ДанныеОбработки = ОбработкаОбъект.ПолучитьДанные(ПараметрыИсточникаДанных, НастройкиКомпоновкиДанных);
		КонецЕсли;
		
	Исключение
		
		ДанныеОбработки = Неопределено;
		
	КонецПопытки;
	
	Возврат ДанныеОбработки;
	
КонецФункции //

Процедура ЗаполнитьСписокПолейОбработки(СписокПолейИсточника, ВнешняяОбработка)

	Если НЕ ЗначениеЗаполнено(ВнешняяОбработка) Тогда
		Возврат;
	КонецЕсли; 
	
	Попытка
		ОбработкаОбъект = СоздатьВнешнююОбработку(ВнешняяОбработка);
		Если ОбработкаОбъект <> Неопределено Тогда
			ОбработкаОбъект.ЗаполнитьСписокПолей(СписокПолейИсточника);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры //
 
Процедура ЗаполнитьСписокПараметровОбработки(СписокПараметровИсточника, ВнешняяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВнешняяОбработка) Тогда
		Возврат;
	КонецЕсли; 
	
	Попытка
		ОбработкаОбъект = СоздатьВнешнююОбработку(ВнешняяОбработка);
		Если ОбработкаОбъект <> Неопределено Тогда
			ОбработкаОбъект.ЗаполнитьСписокПараметров(СписокПараметровИсточника);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры //
 

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ

Функция ПолучитьСтруктуруИсточникаДанных(ЗначенияСвойств) Экспорт
	
	СтруктураИсточникаДанных = Новый Структура("ТипИсточникаДанных,ИмяИсточника,СохраненнаяНастройка,НаименованиеНастройкиОтчета,ПользовательНастройкиОтчета");
	ЗаполнитьЗначенияСвойств(СтруктураИсточникаДанных, ЗначенияСвойств);
	
	Возврат СтруктураИсточникаДанных;
	
КонецФункции //

Функция ДобавитьИсточникДанных(ИсточникиДанных) Экспорт

	НовыйКлюч = 0;
	
	Для каждого ЭлКоллекции Из ИсточникиДанных Цикл
		Если НовыйКлюч <= ЭлКоллекции.КлючИсточника Тогда
			НовыйКлюч = ЭлКоллекции.КлючИсточника + 1;
		КонецЕсли;	
	КонецЦикла; 
	
	НовыйИсточникДанных = ИсточникиДанных.Добавить();
	НовыйИсточникДанных.КлючИсточника = НовыйКлюч;

	Возврат НовыйИсточникДанных;
	
КонецФункции //

Функция ПолучитьЗначениеПараметраКомпоновщика(ПараметрыКомпоновщика, Имя)

	ЗначениеПараметраКомпоновки = ПараметрыКомпоновщика.Найти(Имя);
	Если ЗначениеПараметраКомпоновки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ТипЗначенияПараметра = ТипЗнч(ЗначениеПараметраКомпоновки.Значение);
	Если ТипЗначенияПараметра = Тип("СтандартнаяДатаНачала") Тогда
		ЗначениеПараметра = ЗначениеПараметраКомпоновки.Значение.Дата;
	Иначе
		ЗначениеПараметра = ЗначениеПараметраКомпоновки.Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;

КонецФункции //

Функция ПолучитьПараметрыИсточника(ПараметрыИсточниковДанных, КлючИсточника) Экспорт
	
	СписокСтрок = ПараметрыИсточниковДанных.НайтиСтроки(Новый Структура("КлючИсточника", КлючИсточника));
	
	Возврат ПараметрыИсточниковДанных.Выгрузить(СписокСтрок);

КонецФункции //

Функция ПолучитьДанныеИсточников(ИсточникиДанных, ПараметрыИсточниковДанных, НастройкиКомпоновкиДанных, СхемаОтчета) Экспорт

	ВнешниеНаборыДанных = Новый Структура;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка	
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаОтчета, НастройкиКомпоновкиДанных);	
	Исключение
		#Если Клиент Тогда
		Вопрос("Отчет не сформирован!" + Символы.ПС + ТиповыеОтчеты.ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(ИнформацияОбОшибке()), РежимДиалогаВопрос.ОК);
		#КонецЕсли
		Возврат Неопределено;
	КонецПопытки; 
	
	ЗначенияПараметровМакетаКомпоновкиДанных = МакетКомпоновки.ЗначенияПараметров;
	
	Для каждого СтрокаИсточникДанных Из ИсточникиДанных Цикл
		
		СтруктураИсточникаДанных = Новый Структура;
		СтруктураИсточникаДанных.Вставить("ТипИсточникаДанных", СтрокаИсточникДанных.ТипИсточникаДанных);
		СтруктураИсточникаДанных.Вставить("ИмяИсточника", СтрокаИсточникДанных.ИмяИсточника);
		СтруктураИсточникаДанных.Вставить("СохраненнаяНастройка", СтрокаИсточникДанных.СохраненнаяНастройка);
		СтруктураИсточникаДанных.Вставить("НаименованиеНастройкиОтчета", СтрокаИсточникДанных.НаименованиеНастройкиОтчета);
		СтруктураИсточникаДанных.Вставить("ПользовательНастройкиОтчета", СтрокаИсточникДанных.ПользовательНастройкиОтчета);
		
		ТипИсточникаДанных = СтрокаИсточникДанных.ТипИсточникаДанных;
		
		НаборДанных = НайтиНаборДанныхСхемы(СтрокаИсточникДанных.НаборДанных, СхемаОтчета.НаборыДанных);
		Если НаборДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъектаНабора = НаборДанных.ИмяОбъекта;

		Если ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.УниверсальныйОтчет Тогда
			
			ПараметрыОтчета = Новый Структура;
			
			ПараметрыИсточника = ПолучитьПараметрыИсточника(ПараметрыИсточниковДанных, СтрокаИсточникДанных.КлючИсточника);
			ПараметрОтчета = ПараметрыИсточника.Найти("ДатаНач", "Параметр");
			Если ПараметрОтчета <> Неопределено Тогда
				ИмяПараметраОтчета = ПараметрОтчета.Параметр;
				ЗначениеПараметра = ПолучитьЗначениеПараметраКомпоновщика(ЗначенияПараметровМакетаКомпоновкиДанных, ПараметрОтчета.ПутьКДанным);
				
				ПараметрыОтчета.Вставить(ИмяПараметраОтчета, ЗначениеПараметра);
			КонецЕсли; 
		
			ПараметрОтчета = ПараметрыИсточника.Найти("ДатаКон", "Параметр");
			Если ПараметрОтчета <> Неопределено Тогда
				ИмяПараметраОтчета = ПараметрОтчета.Параметр;
				ЗначениеПараметра = ПолучитьЗначениеПараметраКомпоновщика(ЗначенияПараметровМакетаКомпоновкиДанных, ПараметрОтчета.ПутьКДанным);
				
				ПараметрыОтчета.Вставить(ИмяПараметраОтчета, ЗначениеПараметра);
			КонецЕсли; 
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ПараметрыОтчета",ПараметрыОтчета);
			
			ОтчетИсточникОбъект = ПолучитьОтчетИзИсточникаДанных(СтруктураИсточникаДанных, Истина);
			
			ДанныеИсточникаДанных = ПолучитьДанныеОтчетаНаБазеУниверсальногоОтчета(ОтчетИсточникОбъект, СтруктураПараметров);
			
		ИначеЕсли ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ТиповойОтчет
			ИЛИ ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ПроизвольныйОтчет Тогда
			
			ОтчетИсточникОбъект = ПолучитьОтчетИзИсточникаДанных(СтруктураИсточникаДанных, Истина);
			
			ПараметрыИсточника = ПолучитьПараметрыИсточника(ПараметрыИсточниковДанных, СтрокаИсточникДанных.КлючИсточника);
			
			ЗаполнитьПользовательскиеНастройкиПоКомпоновщику(ОтчетИсточникОбъект, ЗначенияПараметровМакетаКомпоновкиДанных, ПараметрыИсточника);
			
			ДанныеИсточникаДанных = ПолучитьДанныеОтчетаНаБазеТиповогоОтчета(ОтчетИсточникОбъект);
			
		ИначеЕсли ТипИсточникаДанных = Перечисления.ТипыИсточниковДанных.ВнешняяОбработка Тогда
			
			ПараметрыИсточника = ПолучитьПараметрыИсточника(ПараметрыИсточниковДанных, СтрокаИсточникДанных.КлючИсточника);
			
			ДанныеИсточникаДанных = ПолучитьДанныеВнешнейОбработки(СтрокаИсточникДанных.ИмяИсточника, ПараметрыИсточника, НастройкиКомпоновкиДанных);
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;	
		
		ВнешниеНаборыДанных.Вставить(ИмяОбъектаНабора, ДанныеИсточникаДанных);
		
	КонецЦикла; 
	
	Возврат ВнешниеНаборыДанных;

КонецФункции //
 
#Если Клиент Тогда
	
Функция ПолучитьКартинкуПроизвольногоОтчета(ДанныеОтчета) Экспорт

	Если ДанныеОтчета.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности Тогда
		Картинка = БиблиотекаКартинок.ПоказательМонитораЭффективности;
	ИначеЕсли ДанныеОтчета.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт Тогда
		Картинка = БиблиотекаКартинок.ПоказательМонитораЭффективностиПланФакт;
	ИначеЕсли ДанныеОтчета.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
		Картинка = БиблиотекаКартинок.ПоказательМонитораЭффективностиПрогноз;
	Иначе
		Картинка = Неопределено;
	КонецЕсли;
		
    Возврат Картинка;
	
КонецФункции //
 
Процедура УстановитьОформлениеСтрокСписка(ОформленияСтрок) Экспорт

	МассивОтчетов = Новый Массив;
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		МассивОтчетов.Добавить(ДанныеСтроки.Ссылка);	
	КонецЦикла;
		
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПроизвольныеОтчеты.Ссылка КАК Ссылка,
		|	ПроизвольныеОтчеты.ВидПроизвольногоОтчета
		|ИЗ
		|	Справочник.ПроизвольныеОтчеты КАК ПроизвольныеОтчеты
		|ГДЕ
		|	ПроизвольныеОтчеты.Ссылка В(&МассивОтчетов)
		|	И (НЕ ПроизвольныеОтчеты.ПометкаУдаления)";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("МассивОтчетов", МассивОтчетов);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Ячейка = ОформлениеСтроки.Ячейки.Наименование;
		
		ДанныеОтчета = Результат.Найти(ДанныеСтроки.Ссылка, "Ссылка");
		Если ДанныеОтчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Картинка = ПолучитьКартинкуПроизвольногоОтчета(ДанныеОтчета);
		Если Картинка <> Неопределено Тогда
			Ячейка.Картинка = Картинка;
			Ячейка.ОтображатьКартинку = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры //
 
#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ АНАЛИТИЧЕСКИХ ВОЗМОЖНОСТЕЙ

Функция ПолучитьНачалоПериода(ИсходнаяДата, Периодичность, СмещениеПериода)
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		
		НачалоПериода = НачалоДня(ИсходнаяДата + СмещениеПериода*86400);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		
		НачалоПериода = НачалоНедели(ИсходнаяДата + СмещениеПериода*604800);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		
		Если СмещениеПериода <> 0 Тогда
			ДеньМесяца = День(ИсходнаяДата);
			НачМесяца = НачалоМесяца(ИсходнаяДата);
			Если ДеньМесяца <= 10 Тогда
				НомерДекады = 1;
			ИначеЕсли ДеньМесяца <= 20 Тогда
				НомерДекады = 2;
			Иначе
				НомерДекады = 3;
			КонецЕсли;
			
			НомерДекады = НомерДекады + СмещениеПериода;
			Если НомерДекады > 0 Тогда
				Месяцев = Цел((НомерДекады-1)/3);
			Иначе
				Месяцев = -1 - Цел((-НомерДекады)/3);
			КонецЕсли;
			
			НомерДекады = НомерДекады - 3*Месяцев;
			НачалоПериода = ДобавитьМесяц(НачМесяца, Месяцев) + (НомерДекады - 1)* 10 * 24 * 60 * 60;
		Иначе	
			НачалоПериода = ОбщегоНазначения.ПолучитьНачалоДекады(ИсходнаяДата);
		КонецЕсли; 
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		
		НачалоПериода = НачалоКвартала(ДобавитьМесяц(ИсходнаяДата, СмещениеПериода*3));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		
		НачалоПериода = ДобавитьМесяц(ИсходнаяДата, СмещениеПериода*6);
		Если Месяц(НачалоПериода) <= 6 Тогда
			НачалоПериода = Дата(Год(НачалоПериода), 1, 1);
		Иначе	
			НачалоПериода = Дата(Год(НачалоПериода), 7, 1);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		
		НачалоПериода = НачалоГода(ДобавитьМесяц(ИсходнаяДата, СмещениеПериода*12));
		
	Иначе // Месяц
		
		НачалоПериода = НачалоМесяца(ДобавитьМесяц(ИсходнаяДата, СмещениеПериода));
		
	КонецЕсли; 
	
	Возврат НачалоПериода;
	
КонецФункции // 

Функция ПолучитьКонецПериода(ИсходнаяДата, Периодичность, СмещениеПериода)
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		
		КонецПериода = ИсходнаяДата + СмещениеПериода*86400;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		
		КонецПериода = ИсходнаяДата + СмещениеПериода*604800;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		
		Если СмещениеПериода <> 0 Тогда
			ДеньМесяца = День(ИсходнаяДата);
			НачМесяца = НачалоМесяца(ИсходнаяДата);
			Если ДеньМесяца <= 10 Тогда
				НомерДекады = 1;
			ИначеЕсли ДеньМесяца <= 20 Тогда
				НомерДекады = 2;
			Иначе
				НомерДекады = 3;
			КонецЕсли;
			
			НомерДекады = НомерДекады + СмещениеПериода;
			Если НомерДекады > 0 Тогда
				Месяцев = Цел((НомерДекады-1)/3);
			Иначе
				Месяцев = -1 - Цел((-НомерДекады)/3);
			КонецЕсли;
			
			НомерДекады = НомерДекады - 3*Месяцев;
			КонецПериода = ДобавитьМесяц(НачМесяца, Месяцев) + (НомерДекады - 1)* 10 * 24 * 60 * 60;
			
			КонецПериода = ОбщегоНазначения.ПолучитьКонецДекады(КонецПериода);
		Иначе	
			КонецПериода = ОбщегоНазначения.ПолучитьКонецДекады(ИсходнаяДата);
		КонецЕсли; 
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		
		КонецПериода = ДобавитьМесяц(ИсходнаяДата, СмещениеПериода*3);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		
		КонецПериода = ДобавитьМесяц(ИсходнаяДата, СмещениеПериода*6);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		
		КонецПериода = ДобавитьМесяц(ИсходнаяДата, СмещениеПериода*12);
		
	Иначе // Месяц
		
		КонецПериода = ДобавитьМесяц(ИсходнаяДата, СмещениеПериода);
		
	КонецЕсли; 
	
	Если СмещениеПериода <> 0 
		И КонецДня(ИсходнаяДата) = КонецМесяца(ИсходнаяДата) 
		И (Периодичность = Перечисления.Периодичность.День
			ИЛИ Периодичность = Перечисления.Периодичность.Месяц
			ИЛИ Периодичность = Перечисления.Периодичность.Квартал
			ИЛИ Периодичность = Перечисления.Периодичность.Полугодие
			ИЛИ Периодичность = Перечисления.Периодичность.Год) Тогда
			
		КонецПериода = КонецМесяца(КонецПериода);		
			
	КонецЕсли;
	
	КонецПериода = КонецДня(КонецПериода);
	
	Возврат КонецПериода;
	
КонецФункции // 

Функция ПолучитьПериодФормирования(ИсходнаяДата, Периодичность, СмещениеПериода = 0) Экспорт
	
	НачалоПериода = ПолучитьНачалоПериода(ИсходнаяДата, Периодичность, СмещениеПериода);
	КонецПериода  = ПолучитьКонецПериода (ИсходнаяДата, Периодичность, СмещениеПериода);
	
	ПериодФормирования = Новый Структура("НачалоПериода,КонецПериода", НачалоПериода, КонецПериода);
	
	Возврат ПериодФормирования;
	
КонецФункции // 

// Добавляет в таблицу значений колонку с ABC классификацией поля по показателю
Процедура ДобавитьABCКлассификацию(Таблица, ИмяНовойКолонки, Показатель, Поле, Процент1, Процент2, Процент3, Приставка = "")
	
	Таблица.Колонки.Добавить(ИмяНовойКолонки, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	КопияТаблицы = Таблица.Скопировать(, "" + Поле + "," + Показатель);
	КопияТаблицы.Свернуть(Поле, Показатель);
	КопияТаблицы.Сортировать(Показатель + " убыв,");
	ИтогПоКолонке = КопияТаблицы.Итог(Показатель);
	Сумма = 0;
	Для каждого Строка Из КопияТаблицы Цикл
		Если Сумма < Процент1 / 100 * ИтогПоКолонке Тогда
			Класс = Приставка + "A - класс";
		ИначеЕсли Сумма >= Процент1 / 100 * ИтогПоКолонке И Сумма < (Процент2 + Процент1) / 100 * ИтогПоКолонке Тогда
			Класс = Приставка + "B - класс";
		Иначе
			Класс = Приставка + "C - класс";
		КонецЕсли;
		СтруктураПоиска = Новый Структура(Поле, Строка[Поле]);
		НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока[ИмяНовойКолонки] = Класс;
		КонецЦикла;
		Сумма = Сумма + Строка[Показатель];
	КонецЦикла;
	
КонецПроцедуры

Процедура ВычислитьПериодФормированияПоказателяМонитораЭффективности(ПараметрыДанных) Экспорт

	ПараметрПериод = ПараметрыДанных.Элементы.Найти("Период");
	ПараметрСмещениеПериода = ПараметрыДанных.Элементы.Найти("СмещениеПериода");
	Если ПараметрСмещениеПериода = Неопределено Тогда
		// Показатель-прогноз
		ПараметрСмещениеПериода = ПараметрыДанных.Элементы.Найти("Горизонт");
	КонецЕсли;
	ПараметрПериодичность = ПараметрыДанных.Элементы.Найти("Периодичность");
	Если ПараметрПериод <> Неопределено 
		И ПараметрСмещениеПериода <> Неопределено 
		И ПараметрПериодичность <> Неопределено Тогда
		
		// Текущий период
		ПериодФормирования = Неопределено;
		ЗначениеПараметра = ПараметрыДанных.Элементы.Найти("НачалоТекущегоПериода");
		Если ЗначениеПараметра <> Неопределено Тогда
			ПериодФормирования = ПолучитьПериодФормирования(ПараметрПериод.Значение, ПараметрПериодичность.Значение, 0);
			ЗначениеПараметра.Значение = ПериодФормирования.НачалоПериода;
			ЗначениеПараметра.Использование = Истина;
		КонецЕсли; 
		
		ЗначениеПараметра = ПараметрыДанных.Элементы.Найти("КонецТекущегоПериода");
		Если ЗначениеПараметра <> Неопределено Тогда
			Если ПериодФормирования = Неопределено Тогда
				ПериодФормирования = ПолучитьПериодФормирования(ПараметрПериод.Значение, ПараметрПериодичность.Значение, 0);
			КонецЕсли; 
			ЗначениеПараметра.Значение = ПериодФормирования.КонецПериода;
			ЗначениеПараметра.Использование = Истина;
		КонецЕсли; 
		
		// Предыдущий период
		ПериодФормирования = Неопределено;
		ЗначениеПараметра = ПараметрыДанных.Элементы.Найти("НачалоПредыдущегоПериода");
		Если ЗначениеПараметра <> Неопределено Тогда
			ПериодФормирования = ПолучитьПериодФормирования(ПараметрПериод.Значение, ПараметрПериодичность.Значение, ПараметрСмещениеПериода.Значение);
			ЗначениеПараметра.Значение = ПериодФормирования.НачалоПериода;
			ЗначениеПараметра.Использование = Истина;
		КонецЕсли; 
		
		ЗначениеПараметра = ПараметрыДанных.Элементы.Найти("КонецПредыдущегоПериода");
		Если ЗначениеПараметра <> Неопределено Тогда
			Если ПериодФормирования = Неопределено Тогда
				ПериодФормирования = ПолучитьПериодФормирования(ПараметрПериод.Значение, ПараметрПериодичность.Значение, ПараметрСмещениеПериода.Значение);
			КонецЕсли; 
			ЗначениеПараметра.Значение = ПериодФормирования.КонецПериода;
			ЗначениеПараметра.Использование = Истина;
		КонецЕсли; 
		
		// Планируемый период
		ПериодФормирования = Неопределено;
		ЗначениеПараметра = ПараметрыДанных.Элементы.Найти("НачалоПериодаПлан");
		Если ЗначениеПараметра <> Неопределено Тогда
			ПериодФормирования = ПолучитьПериодФормирования(ПараметрПериод.Значение, ПараметрПериодичность.Значение, ПараметрСмещениеПериода.Значение);
			ЗначениеПараметра.Значение = ПериодФормирования.НачалоПериода;
			ЗначениеПараметра.Использование = Истина;
		КонецЕсли; 
		
		ЗначениеПараметра = ПараметрыДанных.Элементы.Найти("КонецПериодаПлан");
		Если ЗначениеПараметра <> Неопределено Тогда
			Если ПериодФормирования = Неопределено Тогда
				ПериодФормирования = ПолучитьПериодФормирования(ПараметрПериод.Значение, ПараметрПериодичность.Значение, ПараметрСмещениеПериода.Значение);
			КонецЕсли; 
			ЗначениеПараметра.Значение = ПериодФормирования.КонецПериода;
			ЗначениеПараметра.Использование = Истина;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры //

// Дорабатывает компоновщик настроек перед выводом в отчет
Процедура ДоработатьАналитическийОтчетПередВыводом(ОтчетОбъект, КомпоновщикНастроек, СхемаКомпоновкиДанных) Экспорт
	
	ЗначенияНастроек = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
	
	// Отбор Пользовательского поля Тренд
	Если ЗначенияНастроек <> Неопределено 
		И НЕ ПустаяСтрока(ЗначенияНастроек.АналитическиеОтборы.ПолеОтборТренд)
		И ЗначениеЗаполнено(ЗначенияНастроек.АналитическиеОтборы.ЗначениеОтборТренд) Тогда
		
		ПользовательскоеПоле = ТиповыеОтчеты.НайтиПользовательскоеПоле(КомпоновщикНастроек, Новый ПолеКомпоновкиДанных(ЗначенияНастроек.АналитическиеОтборы.ПолеОтборТренд));
		Для каждого Вариант Из ПользовательскоеПоле.Варианты.Элементы Цикл
			Если Вариант.Значение = ЗначенияНастроек.АналитическиеОтборы.ЗначениеОтборТренд Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ТиповыеОтчеты.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, Вариант.Отбор, , Ложь);
	КонецЕсли;
	
	// Отбор Пользовательского поля Состояние
	Если ЗначенияНастроек <> Неопределено 
		И НЕ ПустаяСтрока(ЗначенияНастроек.АналитическиеОтборы.ПолеОтборСостояние) 
		И ЗначениеЗаполнено(ЗначенияНастроек.АналитическиеОтборы.ЗначениеОтборСостояние) Тогда
		
		ПользовательскоеПоле = ТиповыеОтчеты.НайтиПользовательскоеПоле(КомпоновщикНастроек, Новый ПолеКомпоновкиДанных(ЗначенияНастроек.АналитическиеОтборы.ПолеОтборСостояние));
		Для каждого Вариант Из ПользовательскоеПоле.Варианты.Элементы Цикл
			Если Вариант.Значение = ЗначенияНастроек.АналитическиеОтборы.ЗначениеОтборСостояние Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ТиповыеОтчеты.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, Вариант.Отбор, , Ложь);
	КонецЕсли;
	
	// Отбор Пользовательского поля ABC классификация
	Если ЗначенияНастроек <> Неопределено 
		И НЕ ПустаяСтрока(ЗначенияНастроек.АналитическиеОтборы.ПолеОтборABCКлассификация) 
		И ЗначениеЗаполнено(ЗначенияНастроек.АналитическиеОтборы.ЗначениеОтборABCКлассификация) Тогда
		
		ПользовательскоеПоле = ТиповыеОтчеты.НайтиПользовательскоеПоле(КомпоновщикНастроек, Новый ПолеКомпоновкиДанных(ЗначенияНастроек.АналитическиеОтборы.ПолеОтборABCКлассификация));
		ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, ПользовательскоеПоле.ПутьКДанным, ЗначенияНастроек.АналитическиеОтборы.ЗначениеОтборABCКлассификация);
	КонецЕсли;
	
	
	// Оформление индикаторов
	Для каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
		Если ТиповыеОтчеты.ПолучитьИмяФормыРедактированияПользовательскогоПоля(ПользовательскоеПоле) <> Неопределено 
		   И ТипЗнч(ПользовательскоеПоле) <> Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных")
		   И (ПользовательскоеПоле.Варианты.Элементы[0].Значение = "1Тренд" 
		   ИЛИ ПользовательскоеПоле.Варианты.Элементы[0].Значение = "1Состояние") Тогда
		    Поворачивать = (ПользовательскоеПоле.Варианты.Элементы[0].Значение = "1Тренд");
			
			// у индикаторов расположение по горизонтали сделаем по центру
			ЭлементУсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			Поле = ЭлементУсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
			ЗначениеПараметра = ЭлементУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("HorizontalAlign"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = ГоризонтальноеПоложение.Центр;
			// меньше. Оформление
			ЭлементУсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			Поле = ЭлементУсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
			ТиповыеОтчеты.СкопироватьЭлементы(ЭлементУсловноеОформление.Отбор, ПользовательскоеПоле.Варианты.Элементы[0].Отбор);
			
			ЗначениеПараметра = ЭлементУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TextColor"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = WebЦвета.Желтый.Красный;
			
			// между Оформление
			ЭлементУсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			Поле = ЭлементУсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
			ТиповыеОтчеты.СкопироватьЭлементы(ЭлементУсловноеОформление.Отбор, ПользовательскоеПоле.Варианты.Элементы[1].Отбор);

			// цвет
			ЗначениеПараметра = ЭлементУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TextColor"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = WebЦвета.Черный;			
			
			// больше. Оформление
			ЭлементУсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			Поле = ЭлементУсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
			ТиповыеОтчеты.СкопироватьЭлементы(ЭлементУсловноеОформление.Отбор, ПользовательскоеПоле.Варианты.Элементы[2].Отбор);

			// цвет
			ЗначениеПараметра = ЭлементУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TextColor"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = WebЦвета.Зеленый;
			ЗначениеПараметра = ЭлементУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TextOrientation"));
			ЗначениеПараметра.Использование = Поворачивать;
			ЗначениеПараметра.Значение = 45;			
		КонецЕсли;
	КонецЦикла;
	
	// Вычислим и установим при необходимости период
	Если ОтчетОбъект.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективности
		ИЛИ ОтчетОбъект.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПланФакт 
		ИЛИ ОтчетОбъект.ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПоказательМонитораЭффективностиПрогноз Тогда
		
		ВычислитьПериодФормированияПоказателяМонитораЭффективности(КомпоновщикНастроек.Настройки.ПараметрыДанных);

	КонецЕсли; 
	
КонецПроцедуры //ДоработатьАналитическийОтчетПередВыводом

Процедура ОставитьПервыеСтрокиТаблицы(Таблица, Знач Количество, Процент = Ложь)
	
	КоличествоСтрок = Таблица.Количество();
	
	// Переводим проценты в количество
	Если Процент Тогда 
		Количество = КоличествоСтрок * Количество / 100;
		Количество = Цел(Количество) + ?(Количество = Цел(Количество), 0, 1);
	КонецЕсли;
	
	// Если количество больше всех строк, то ничего не делаем
	Если Количество > КоличествоСтрок Тогда
		Возврат;
	КонецЕсли;
	
	Для Индекс = 1 По КоличествоСтрок - Количество Цикл
		ОбратныйИндекс = КоличествоСтрок - Индекс;
		Таблица.Удалить(ОбратныйИндекс);
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьABCКлассификация(КомпоновщикНастроек)

	Для каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
		Если ТипЗнч(ПользовательскоеПоле) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных")
		   И ПользовательскоеПоле.Варианты.Элементы.Количество() > 0 
		   И ТиповыеОтчеты.ПолучитьПараметрИзСтроки(ПользовательскоеПоле.Варианты.Элементы[0].Значение) = "ДоработкаТаблицы" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция ВОбъектеОдинНаборДанных(Объект)
	
	Если Объект.НаборыДанных.Количество() = 1 Тогда
		ТипНабора = ТипЗнч(Объект.НаборыДанных[0]);
		
		Возврат ТипНабора = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных")
			ИЛИ ТипНабора = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")
			ИЛИ ТипНабора = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных");
		
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьТаблицуПоНаборуДанных(Источник, ПоляНабора)

	СоответствиеКолонок = Новый Соответствие;
	
	Для каждого ПолеНабора Из ПоляНабора Цикл
		ИмяНовойКолонки = СтрЗаменить(ПолеНабора.ПутьКДанным, ".", "");
		ИмяПоля = СоответствиеКолонок.Получить(ПолеНабора.Имя);
		Если ИмяПоля = Неопределено Тогда
			
			Если ПолеНабора.Имя <> ПолеНабора.ПутьКДанным Тогда
				Источник.Колонки[ПолеНабора.Имя].Имя = ИмяНовойКолонки;
			КонецЕсли; 
		
			СоответствиеКолонок.Вставить(ПолеНабора.Имя, ИмяНовойКолонки);
		Иначе
			Источник.Колонки.Добавить(ИмяНовойКолонки);
			Источник.ЗагрузитьКолонку(Источник.ВыгрузитьКолонку(ИмяПоля), ИмяНовойКолонки);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры //
 
Функция ПолучитьТаблицуРезультатПоМакетуКомпоновки(НаборыДанных, ЗначенияПараметров, ВнешниеНаборыДанных)
	
	ТаблицаРезультат = Неопределено;
	
	Для каждого НаборДанных Из НаборыДанных Цикл
	
		ТипНабора = ТипЗнч(НаборДанных);
		Если ТипНабора = Тип("НаборДанныхЗапросМакетаКомпоновкиДанных") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = НаборДанных.Запрос;
			Для каждого Параметр Из ЗначенияПараметров Цикл
				Запрос.УстановитьПараметр(Параметр.Имя, Параметр.Значение);
			КонецЦикла;
			
			ТЗ = Запрос.Выполнить().Выгрузить();
			
			ОбработатьТаблицуПоНаборуДанных(ТЗ, НаборДанных.Поля);
			
		ИначеЕсли ТипНабора = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных") Тогда
			
			ТЗ = Неопределено;
			ВнешниеНаборыДанных.Свойство(НаборДанных.ИмяОбъекта, ТЗ);
			
			ОбработатьТаблицуПоНаборуДанных(ТЗ, НаборДанных.Поля);
			
		ИначеЕсли ТипНабора = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда
			
			ТЗ = ПолучитьТаблицуРезультатПоМакетуКомпоновки(НаборДанных.Элементы, ЗначенияПараметров, ВнешниеНаборыДанных);
			
		КонецЕсли;
		
		// Создание структуры колонок
		Если ТаблицаРезультат = Неопределено Тогда
			ТаблицаРезультат = Новый ТаблицаЗначений;

			Для каждого КолонкаТЗ Из ТЗ.Колонки Цикл
				ТаблицаРезультат.Колонки.Добавить(КолонкаТЗ.Имя,, КолонкаТЗ.Заголовок);
			КонецЦикла;
		Иначе
			Для каждого КолонкаТЗ Из ТЗ.Колонки Цикл
				КолонкаРезультата = ТаблицаРезультат.Колонки.Найти(КолонкаТЗ.Имя);
				Если КолонкаРезультата = Неопределено Тогда
					ТаблицаРезультат.Колонки.Добавить(КолонкаТЗ.Имя,, КолонкаТЗ.Заголовок);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из ТЗ Цикл
			СтрокаРезультата = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаТЗ);
		КонецЦикла;		
		
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ОтработатьОпциюТоп(ЗначенияНастроек, ТЗ, КомпоновщикНастроек)
	
	// Формируем строку упорядочивания
	СтрокаУпорядочивания = "";
	СтрокаРесурсы = "";
	Для каждого ЭлементПорядка Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
		Если Найти(ЭлементПорядка.Поле, "UserFields") > 0 
			ИЛИ Найти(ЭлементПорядка.Поле, "ПользовательскиеПоля") > 0 Тогда
			Продолжить;
		КонецЕсли;
		ДоступноеПоле = ТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ЭлементПорядка.Поле, КомпоновщикНастроек);
		Если ДоступноеПоле = Неопределено ИЛИ Не ДоступноеПоле.Ресурс Тогда
			Продолжить;
		КонецЕсли;
		Поле = СтрЗаменить(Строка(ЭлементПорядка.Поле), ".", "");
		Если ТЗ.Колонки.Найти(Поле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаНаправлениеСортировки = ?(ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр, "Возр", "Убыв");
		СтрокаУпорядочивания = СтрокаУпорядочивания + Поле + " " + СтрокаНаправлениеСортировки + ",";
		СтрокаРесурсы = СтрокаРесурсы + Поле + " " + ",";  
	КонецЦикла;
	
	Если ЗначенияНастроек.АналитическиеОтборы.ПолеТоп = "ДетальныеЗаписи" Тогда
		Если Не ПустаяСтрока(СтрокаУпорядочивания) Тогда
			ТЗ.Сортировать(СтрокаУпорядочивания);
		КонецЕсли;
		ОставитьПервыеСтрокиТаблицы(ТЗ, ЗначенияНастроек.АналитическиеОтборы.КоличествоТоп, ЗначенияНастроек.АналитическиеОтборы.ПроцентТоп);
	Иначе
		СтрокаПолеТоп = СтрЗаменить(ЗначенияНастроек.АналитическиеОтборы.ПолеТоп, ".", "");
		КопияТЗ = ТЗ.Скопировать(,СтрокаПолеТоп + "," + СтрокаРесурсы);
		КопияТЗ.Свернуть(СтрокаПолеТоп, СтрокаРесурсы);
		Если Не ПустаяСтрока(СтрокаУпорядочивания) Тогда
			КопияТЗ.Сортировать(СтрокаУпорядочивания);
		КонецЕсли;
		ОставитьПервыеСтрокиТаблицы(КопияТЗ, ЗначенияНастроек.АналитическиеОтборы.КоличествоТоп, ЗначенияНастроек.АналитическиеОтборы.ПроцентТоп);
		КоличествоСтрок = ТЗ.Количество();
		Для Индекс = 1 По КоличествоСтрок Цикл
			Строка = ТЗ[КоличествоСтрок - Индекс];
			СтруктураПоиска = Новый Структура(СтрокаПолеТоп, Строка[СтрокаПолеТоп]);
			Если КопияТЗ.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				ТЗ.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ОтработатьОпциюПорог(ЗначенияНастроек, ТЗ, КомпоновщикНастроек)
	
	СтрокаПолеПорог = СтрЗаменить(ЗначенияНастроек.АналитическиеОтборы.ПолеПорог, ".", "");
	СтрокаРесурсПорог = СтрЗаменить(ЗначенияНастроек.АналитическиеОтборы.РесурсПорог, ".", "");
	КопияТЗ = ТЗ.Скопировать(,СтрокаПолеПорог + "," + СтрокаРесурсПорог);
	КопияТЗ.Свернуть(СтрокаПолеПорог, СтрокаРесурсПорог);
	Итог = КопияТЗ.Итог(СтрокаРесурсПорог);
	Порог = Итог * ЗначенияНастроек.АналитическиеОтборы.ПроцентПорог / 100;
	
	КоличествоСтрок = КопияТЗ.Количество();
	Для Индекс = 1 По КоличествоСтрок Цикл
		Строка = КопияТЗ[КоличествоСтрок - Индекс];
		Если Строка[СтрокаРесурсПорог] < Порог Тогда
			КопияТЗ.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрок = ТЗ.Количество();
	Для Индекс = 1 По КоличествоСтрок Цикл
		Строка = ТЗ[КоличествоСтрок - Индекс];
		СтруктураПоиска = Новый Структура(СтрокаПолеПорог, Строка[СтрокаПолеПорог]);
		Если КопияТЗ.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			ТЗ.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьТипыВТипКолонкиТаблицыЗначений(ТЗ, СтрокаПолеПорог, "Строка");
	ИтогПрочее  = Итог - ТЗ.Итог(СтрокаРесурсПорог);
	Если ИтогПрочее > 0 Тогда
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока[СтрокаПолеПорог] = "Прочее";
		НоваяСтрока[СтрокаРесурсПорог] = ИтогПрочее;
		Если ТЗ.Колонки.Найти(СтрокаПолеПорог + "Представление") <> Неопределено Тогда
			НоваяСтрока[СтрокаПолеПорог + "Представление"] = "Прочее";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Добавляет типы в ТипКолонки таблицы значений. При этом колонка перемещается в конец
// Парам ДобавляемыеТипы - Массив типов или строка, содержащая типы через запятую
Процедура ДобавитьТипыВТипКолонкиТаблицыЗначений(ТЗ, ИмяКолонки, ДобавляемыеТипы)
	
	СтараяКолонка = ТЗ.Колонки[ИмяКолонки];
	ОписаниеТипов = СтараяКолонка.ТипЗначения;
	ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, ДобавляемыеТипы);
	НоваяКолонка = ТЗ.Колонки.Добавить(ИмяКолонки + "НоваяКолонка");
	МассивЗначенийКолонки = ТЗ.ВыгрузитьКолонку(ИмяКолонки);
	ТЗ.ЗагрузитьКолонку(МассивЗначенийКолонки, ИмяКолонки + "НоваяКолонка");
	ТЗ.Колонки.Удалить(ИмяКолонки);
	ТЗ.Колонки[ИмяКолонки + "НоваяКолонка"].Имя = ИмяКолонки;
	
КонецПроцедуры

Функция ОтработатьОпциюСкрытьНулевые(ТЗ, КомпоновщикНастроек, СписокНовыхПолей)
	
	ТЗ.Колонки.Добавить("СуммаРесурсовПоМодулю", Новый ОписаниеТипов("Число"));
	ВыбранныеПоля = ТиповыеОтчеты.ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	МассивКолонок = Новый Массив;
	Для каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
		Если ВыбранноеПоле.Использование 
		   И ТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ВыбранноеПоле.Поле, КомпоновщикНастроек).Ресурс
		   И ТЗ.Колонки.Найти(Строка(ВыбранноеПоле.Поле)) <> Неопределено Тогда
			
			// Добавляем ресурс в массив колонок
			ИмяКолонки = СтрЗаменить(Строка(ВыбранноеПоле.Поле), ".", "");
			МассивКолонок.Добавить(ИмяКолонки);
			НулеваяКолонка = Истина;
			// Проверяем по всей таблице не нулевой ли это ресурс по всей таблице
			Для каждого СтрокаТЗ Из ТЗ Цикл
				Если СтрокаТЗ[ИмяКолонки] <> 0 Тогда
					НулеваяКолонка = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НулеваяКолонка Тогда
				// Нулевую колонку не выводим
				ВыбранноеПоле.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// Заполняем дополнительную колонку
	Для каждого СтрокаТЗ Из ТЗ Цикл
		Для каждого Ресурс Из МассивКолонок Цикл
			СтрокаТЗ["СуммаРесурсовПоМодулю"] = СтрокаТЗ["СуммаРесурсовПоМодулю"] + ?(СтрокаТЗ[Ресурс] > 0, СтрокаТЗ[Ресурс], - СтрокаТЗ[Ресурс]);
		КонецЦикла;
	КонецЦикла;
	
	СписокНовыхПолей.Добавить("СуммаРесурсовПоМодулю", "Сумма ресурсов по модулю");
	
КонецФункции

Функция ДобавитьВТаблицуРезультатаABCКлассификацию(ТЗ, КомпоновщикНастроек, СписокНовыхПолей)

	Для каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
		
		ИмяКолонки = "ПользовательскоеПоле" + КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы.Индекс(ПользовательскоеПоле);
		Если ТиповыеОтчеты.ПолучитьИмяФормыРедактированияПользовательскогоПоля(ПользовательскоеПоле) <> "ФормаABCКлассификация" Тогда
			Продолжить;
		КонецЕсли;
		
		Наименование = ПользовательскоеПоле.Заголовок;
		
		Значение = ПользовательскоеПоле.Варианты.Элементы[0].Отбор.Элементы[0].ПравоеЗначение;
		Показатель = ТиповыеОтчеты.ПолучитьПараметрИзСтроки(Значение, 2);
		
		Значение = ПользовательскоеПоле.Варианты.Элементы[0].Отбор.Элементы[0].ПравоеЗначение;
		Поле = ТиповыеОтчеты.ПолучитьПараметрИзСтроки(Значение, 3);
		
		Значение = ПользовательскоеПоле.Варианты.Элементы[0].Отбор.Элементы[0].ПравоеЗначение;
		Значение = ТиповыеОтчеты.ПолучитьПараметрИзСтроки(Значение);
		Процент1 = Число(Значение);
		
		Значение = ПользовательскоеПоле.Варианты.Элементы[1].Отбор.Элементы[0].ПравоеЗначение;
		Значение = ТиповыеОтчеты.ПолучитьПараметрИзСтроки(Значение);
		Процент2 = Число(Значение);
		
		Значение = ПользовательскоеПоле.Варианты.Элементы[2].Отбор.Элементы[0].ПравоеЗначение;
		Значение = ТиповыеОтчеты.ПолучитьПараметрИзСтроки(Значение);
		Процент3 = Число(Значение);
		
		ДобавитьABCКлассификацию(ТЗ, ИмяКолонки, Показатель, Поле, Процент1, Процент2, Процент3);
		
		СписокНовыхПолей.Добавить(ИмяКолонки, Наименование);
		
	КонецЦикла;
	
КонецФункции

Функция ПеренастроитьПользовательскиеПоляДляABCКлассификации(КомпоновщикНастроек)
	
	Для каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
		ИмяКолонки = "ПользовательскоеПоле" + КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы.Индекс(ПользовательскоеПоле);
		Если ТиповыеОтчеты.ПолучитьИмяФормыРедактированияПользовательскогоПоля(ПользовательскоеПоле) = "ФормаABCКлассификация" Тогда
			//Значение = ПользовательскоеПоле.Варианты.Элементы[0].Отбор.Элементы[0].ПравоеЗначение;
			//Показатель = ТиповыеОтчеты.ПолучитьПараметрИзСтроки(Значение, 2);
			//
			//Значение = ПользовательскоеПоле.Варианты.Элементы[0].Отбор.Элементы[0].ПравоеЗначение;
			//Поле = ТиповыеОтчеты.ПолучитьПараметрИзСтроки(Значение, 3);
			
			Вариант = ПользовательскоеПоле.Варианты.Элементы[0];
			Вариант.Значение = Вариант.Представление;
			Отбор = Вариант.Отбор;
			Отбор.Элементы.Очистить();
			ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки);
			ЭлементОтбора.ПравоеЗначение = Вариант.Представление;
			
			Вариант = ПользовательскоеПоле.Варианты.Элементы[1];
			Вариант.Значение = Вариант.Представление;
			Отбор = Вариант.Отбор;
			Отбор.Элементы.Очистить();
			ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки);
			ЭлементОтбора.ПравоеЗначение = Вариант.Представление;
			
			Вариант = ПользовательскоеПоле.Варианты.Элементы[2];
			Вариант.Значение = Вариант.Представление;
			Отбор = Вариант.Отбор;
			Отбор.Элементы.Очистить();
			ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки);
			ЭлементОтбора.ПравоеЗначение = Вариант.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция УстановитьОтборНаНулевыеГруппировки(КомпоновщикНастроек)
	
	Группировки = ТиповыеОтчеты.ПолучитьГруппировки(КомпоновщикНастроек);
	Для каждого Группировка Из Группировки Цикл
		Элемент = Группировка.Значение.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаРесурсовПоМодулю");
		Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		Элемент.ПравоеЗначение = 0;
		ЗначениеПараметра = Группировка.Значение.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("FilterOutput"));
		Если ЗначениеПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КонецЦикла;
	
КонецФункции

Функция ПолучитьСтруктуруТипОбработки(ЗначенияНастроек, КомпоновщикНастроек)
	
	ТипОбработки = Новый Структура;
	
	Если ЕстьABCКлассификация(КомпоновщикНастроек) Тогда
		ТипОбработки.Вставить("ABCКлассификация", Истина);
	КонецЕсли;
	
	// Если используется функция ТОП
	Если ЗначенияНастроек <> Неопределено
		И НЕ ПустаяСтрока(ЗначенияНастроек.АналитическиеОтборы.ПолеТоп) И ЗначенияНастроек.АналитическиеОтборы.КоличествоТоп <> 0 Тогда
		ТипОбработки.Вставить("Топ", Истина);
	КонецЕсли;
	
	Если ЗначенияНастроек <> Неопределено
		И ЗначенияНастроек.АналитическиеОтборы.Свойство("РесурсПорог")
		И Не ПустаяСтрока(ЗначенияНастроек.АналитическиеОтборы.РесурсПорог) И Не ПустаяСтрока(ЗначенияНастроек.АналитическиеОтборы.ПолеПорог) И ЗначенияНастроек.АналитическиеОтборы.ПроцентПорог <> 0 Тогда
		ТипОбработки.Вставить("Порог", Истина);
	КонецЕсли;
	
	Если ЗначенияНастроек <> Неопределено
		И ЗначенияНастроек.АналитическиеОтборы.СкрытьНулевые = Истина Тогда
		ТипОбработки.Вставить("СкрытьНулевые", Истина);
	КонецЕсли;
	
	Возврат ТипОбработки;
	
КонецФункции

Функция ПолучитьТекстВнешнегоЗапроса(Знач ТекстЗапроса, СписокНовыхПолей, ПоляНабораДанных)
	
	Если СписокНовыхПолей.Количество() = 0 Тогда
		Возврат ТекстЗапроса;
	КонецЕсли; 
	
	ПодтекстЗапроса = "";
	Для каждого НовоеПоле Из СписокНовыхПолей Цикл
		ПодтекстЗапроса	= ПодтекстЗапроса + "0 КАК " + НовоеПоле.Значение + ", ";
	КонецЦикла; 
	
	ЕстьРазрешенные = Ложь;
	Позиция = Найти(ВРег(ТекстЗапроса), "РАЗРЕШЕННЫЕ");
	Если Позиция > 0 Тогда
		ТекстПередРазрешенные = Лев(ТекстЗапроса, Позиция - 1);
		ТекстПослеРазрешенные = Сред(ТекстЗапроса, Позиция + 11);
		Если Найти(ТекстПередРазрешенные, ",") = 0 
			И Найти(ВРег(ТекстПередРазрешенные), "КАК") = 0
			И Найти(ВРег(ТекстПередРазрешенные), "ИЗ") = 0
			И Найти(ТекстПередРазрешенные, """") = 0 Тогда
			ТекстЗапроса = ТекстПередРазрешенные + ТекстПослеРазрешенные;
			ЕстьРазрешенные = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ " + ?(ЕстьРазрешенные, "РАЗРЕШЕННЫЕ ", "") + ПодтекстЗапроса + " * ИЗ ( " + ТекстЗапроса + " ) КАК ТаблицаЗапроса";
	 
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьМакетКомпоновки(ОтчетОбъект, СхемаКомпоновкиДанных, КомпоновщикНастроек, ДанныеРасшифровки, ВнешниеНаборыДанных, ВыводВТабличныйДокумент) Экспорт
	
	ЗначенияНастроек = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
	ТипОбработки = ПолучитьСтруктуруТипОбработки(ЗначенияНастроек, КомпоновщикНастроек);
	Дорабатывать = ТипОбработки.Количество() > 0;
	
	// Проверяем, количество наборов данных и их тип. Допустим один - запрос
	Если Дорабатывать И Не ВОбъектеОдинНаборДанных(СхемаКомпоновкиДанных) Тогда
		ТекстСообщения = "Допустим только один набор данных. Дополнительные возможности недоступны.";
		ОбщегоНазначения.Сообщение(ТекстСообщения,,"Формирование отчета", ОтчетОбъект.Ссылка);
		Дорабатывать = Ложь;
 	КонецЕсли;
	
	// Если дорабатывать компоновщик не надо, сразу возвращаем макет компоновки
	Если Не Дорабатывать Тогда
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Если ВыводВТабличныйДокумент Тогда
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
		Иначе
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		КонецЕсли; 
		
		Возврат МакетКомпоновки;
	КонецЕсли;
	
	// Добавляем элементы структуры, чтобы поля попали в выполняемый запрос
	//Если ТипОбработки.Свойство("ABCКлассификация") Тогда
	//	ДобавитьЭлементСтруктурыДляABCКЛассификации(КомпоновщикНастроек);
	//КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
	
	// Получаем таблицу результата
	ТЗ = ПолучитьТаблицуРезультатПоМакетуКомпоновки(МакетКомпоновки.НаборыДанных, МакетКомпоновки.ЗначенияПараметров, ВнешниеНаборыДанных);
	Если ТЗ = Неопределено Тогда
		Возврат МакетКомпоновки;
	КонецЕсли;
	
	СписокНовыхПолей = Новый СписокЗначений;
	
	// Отработка ТОП
	Если ТипОбработки.Свойство("Топ") Тогда
		ОтработатьОпциюТоп(ЗначенияНастроек, ТЗ, КомпоновщикНастроек);
	КонецЕсли;
	
	// Отработка Порог
	Если ТипОбработки.Свойство("Порог") Тогда
		ОтработатьОпциюПорог(ЗначенияНастроек, ТЗ, КомпоновщикНастроек);
	КонецЕсли;
	
	// Отработка скрыть нулевые
	Если ТипОбработки.Свойство("СкрытьНулевые") Тогда
		ОтработатьОпциюСкрытьНулевые(ТЗ, КомпоновщикНастроек, СписокНовыхПолей);
	КонецЕсли;
	
	// Добавляем в таблицу результата ABC классификацию
	Если ТипОбработки.Свойство("ABCКлассификация") Тогда
		ДобавитьВТаблицуРезультатаABCКлассификацию(ТЗ, КомпоновщикНастроек, СписокНовыхПолей);
	КонецЕсли;
	
	// Формируем внешний набор данных
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("Результат", ТЗ);
	
	// Добавим в один из наборов новые поля
	// Это необходимо для успешной инициализации компоновщика настроек
	НаборДанныхСКД = СхемаКомпоновкиДанных.НаборыДанных[0];
	Если ТипЗнч(НаборДанныхСКД) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		Для каждого ЭлНаборДанныхСКД Из НаборДанныхСКД.Элементы Цикл
			Если ТипЗнч(ЭлНаборДанныхСКД) <> Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
				НаборДанныхСКД = ЭлНаборДанныхСКД;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 

	Если ТипЗнч(НаборДанныхСКД) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
		НаборДанныхСКД.Запрос = ПолучитьТекстВнешнегоЗапроса(НаборДанныхСКД.Запрос, СписокНовыхПолей, НаборДанныхСКД.Поля);
    Иначе
		Для каждого НовоеПоле Из СписокНовыхПолей Цикл
			КолонкаТЗ = ТЗ.Колонки.Найти(НовоеПоле.Значение);
			Если КолонкаТЗ <> Неопределено Тогда
				НовоеПолеСКД = НаборДанныхСКД.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
				НовоеПолеСКД.Поле = НовоеПоле.Значение;
				НовоеПолеСКД.Заголовок = НовоеПоле.Представление;		
				НовоеПолеСКД.ТипЗначения = Новый ОписаниеТипов(КолонкаТЗ.ТипЗначения);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	// Схема компоновки изменилась, переинициализируем компоновщик настроек
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	// Перенастраиваем пользовательские поля для ABC классификации
	ПеренастроитьПользовательскиеПоляДляABCКлассификации(КомпоновщикНастроек);
	
	// Установим отбор на группировки - не выводить нулевые строки
	Если ТипОбработки.Свойство("СкрытьНулевые") Тогда
		УстановитьОтборНаНулевыеГруппировки(КомпоновщикНастроек);
	КонецЕсли;
	ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, "СуммаРесурсовПоМодулю");
	
	// Получим Макет компоновки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Если ВыводВТабличныйДокумент Тогда
		МакетКомпоновкиНовый = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
	Иначе
		МакетКомпоновкиНовый = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	КонецЕсли; 
	
	// Добавляем новый набор данных в макет (схему лучше не изменять)
	СтарыйНаборДанных = МакетКомпоновкиНовый.НаборыДанных[0];
	НаборДанныхОбъект = МакетКомпоновкиНовый.НаборыДанных.Добавить(Тип("НаборДанныхОбъектМакетаКомпоновкиДанных"));
	
	НаборДанныхОбъект.Имя = СтарыйНаборДанных.Имя;
	НаборДанныхОбъект.ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных[0].Имя;
	
	Для каждого ПолеСтарый Из СтарыйНаборДанных.Поля Цикл
		НовоеПоле = НаборДанныхОбъект.Поля.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеПоле, ПолеСтарый);
		НовоеПоле.Имя = СтрЗаменить(НовоеПоле.Имя, ".", "");
	КонецЦикла;
	
	НаборДанныхОбъект.ИмяОбъекта = "Результат";
	
	МакетКомпоновкиНовый.НаборыДанных.Удалить(СтарыйНаборДанных);
	
	Возврат МакетКомпоновкиНовый;
	
КонецФункции //ПолучитьМакетКомпоновки()


#Если Клиент Тогда
	
// Возвращает картинку, обозначающую соответствующий индикатор
Функция ПолучитьКартинкуИндикатора(Значение) Экспорт
	
	Если Значение = "1Тренд" Тогда
		Возврат БиблиотекаКартинок.ДинамикаНегативная;
	ИначеЕсли Значение = "2Тренд" Тогда
		Возврат БиблиотекаКартинок.ДинамикаСтабильная;
	ИначеЕсли Значение = "3Тренд" Тогда
		Возврат БиблиотекаКартинок.ДинамикаПозитивная;
	ИначеЕсли Значение = "1Состояние" Тогда
		Возврат БиблиотекаКартинок.СостояниеТревожное;
	ИначеЕсли Значение = "2Состояние" Тогда
		Возврат БиблиотекаКартинок.СостояниеУдовлетворительное;  
	ИначеЕсли Значение = "3Состояние" Тогда
		Возврат БиблиотекаКартинок.СостояниеХорошее;
	КонецЕсли;
	
КонецФункции	

// По массиву полей расшифровки открывает экземпляр отчета
         
#КонецЕсли



