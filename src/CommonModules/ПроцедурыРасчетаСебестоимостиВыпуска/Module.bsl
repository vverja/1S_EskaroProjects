
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура дополняет структуру шапки документа новыми значениями.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//
Процедура ДополнитьСтруктуруШапкиДокумента(
	СтруктураШапкиДокумента
	)
	
	Если Не СтруктураШапкиДокумента.Свойство("ИтерационныйРасчетЗатратВстречногоВыпуска") Тогда
		СтруктураШапкиДокумента.Вставить("ИтерационныйРасчетЗатратВстречногоВыпуска", Ложь);
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруШапкиДокумента()

// Функция возвращает значение характера затрат, соответствующего счету затрат.
//
// Параметры
//  СчетЗатрат - ПланСчетовСсылка - счет затрат, по которому определяется характер затрат.
//  СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - статья затрат для уточнения характера затрат.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ХарактерЗатрат – характер затрат, соответствующий счету затрат.
//
Функция ПолучитьХарактерЗатратПоСчетуЗатратМежд(
	СчетЗатрат, 
	СтатьяЗатрат
	)
	
	// Проверка счета затрат.
	Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
		ПравильныйСчетЗатрат = Ложь;
		
	ИначеЕсли ТипЗнч(СчетЗатрат) <> Тип("ПланСчетовСсылка.Международный") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Счет затрат " + СчетЗатрат + " не соответствует плану счетов: ""Международный"".
			|Функция <ПолучитьХарактерЗатратПоСчетуЗатратМежд>");
		ПравильныйСчетЗатрат = Ложь;
		
	// Если все проверки пройдены, значит передан правильный счет затрат.
	Иначе
		ПравильныйСчетЗатрат = Истина;
	КонецЕсли;
	
	Если ПравильныйСчетЗатрат Тогда
	
		Если СчетЗатрат = ПланыСчетов.Международный.ОсновноеПроизводство
		 ИЛИ СчетЗатрат = ПланыСчетов.Международный.ВспомогательноеПроизводство
		 ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный.ОсновноеПроизводство)
		 ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный.ВспомогательноеПроизводство) Тогда
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
			
		ИначеЕсли СчетЗатрат = ПланыСчетов.Международный.ОбслуживающиеПроизводства
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный.ОбслуживающиеПроизводства) Тогда
			Если НЕ ЗначениеЗаполнено(СтатьяЗатрат) Тогда
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
			Иначе
				ХарактерЗатрат = СтатьяЗатрат.ХарактерЗатрат;
			КонецЕсли;
		
		ИначеЕсли СчетЗатрат = ПланыСчетов.Международный.БракВПроизводстве
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный.БракВПроизводстве) Тогда
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве;
			
		ИначеЕсли СчетЗатрат = ПланыСчетов.Международный.ОбщепроизводственныеРасходы
			  ИЛИ СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Международный.ОбщепроизводственныеРасходы) Тогда
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы;
			
		Иначе
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие;
			
		КонецЕсли;
		
	Иначе
		ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат ХарактерЗатрат;
	
КонецФункции // ПолучитьХарактерЗатратПоСчетуЗатратМежд()

// Функция получает вид отражения в учете в зависимости от флажков документа.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//
Функция ПолучитьВидОтраженияВУчете(СтруктураШапкиДокумента) Экспорт
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете;
		
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете;
		
	КонецЕсли;
	
	Возврат ВидОтраженияВУчете;
	
КонецФункции // ПолучитьВидОтраженияВУчете()

// Определяет, следует ли заполнять оборотные субконто (статью затрат и подразделение) в проводках
// по данным учетной политики
Функция ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента)
	
	Если НЕ СтруктураШапкиДокумента.Свойство("УчетнаяПолитика") Тогда
		// Учетная политика в структуре должна быть
		Возврат Ложь; 
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.УчетнаяПолитика.Свойство("ЗаполнятьСтатьиИПодразделенияВПроводкахПриРаспределенииЗатрат") Тогда
		// В учетной политике регл. учета ресурс должен быть
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтруктураШапкиДокумента.УчетнаяПолитика.ЗаполнятьСтатьиИПодразделенияВПроводкахПриРаспределенииЗатрат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ДВИЖЕНИЯМИ ОБЪЕКТА

// Функция получает наборы движений регистров.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	СтруктураИмен - Структура - Перечень необходимых регистров
//
// Возвращаемое значение:
//	Структура - Наборы движений по регистрам
//
Функция ПолучитьНаборыДвижений(
	СтруктураШапкиДокумента, 
	СтруктураИмен = Неопределено
	) Экспорт
	
	СтруктураДвижений = Новый Структура;
	
	ДокументОбъект = СтруктураШапкиДокумента.Ссылка.ПолучитьОбъект();
	Движения = ДокументОбъект.Движения;
	
	// Наборы движений по регистрам.
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ДвиженияВыпуск                   = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ВыпускПродукции"), 					Движения.ВыпускПродукции, Неопределено);
		ДвиженияЗатраты                  = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("Затраты"), 							Движения.Затраты, Неопределено);
		ДвиженияЗатратыОбороты           = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыОбороты"), 					Движения.ЗатратыОбороты, Неопределено);
		ДвиженияЗатратыНаВыпуск          = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыНаВыпускПродукции"), 			Движения.ЗатратыНаВыпускПродукции, Неопределено);
		ДвиженияЗатратыНаВыпускНаработка = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыНаВыпускПродукцииНаработка"), 	Движения.ЗатратыНаВыпускПродукцииНаработка, Неопределено);
		ДвиженияБракВПроизводстве        = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("БракВПроизводстве"), 					Движения.БракВПроизводстве, Неопределено);
		ДвиженияНЗП		              	 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("НезавершенноеПроизводство"), 			Движения.НезавершенноеПроизводство, Неопределено);
		ДвиженияПартии			         = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ПартииТоваровНаСкладах"), 			Движения.ПартииТоваровНаСкладах, Неопределено);
		ДвиженияПродажиСебестоимость	 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ПродажиСебестоимость"), 				Движения.ПродажиСебестоимость, Неопределено);
		ДвиженияБазаРаспределенияЗатрат  = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("БазаРаспределенияЗатрат"), 			Движения.БазаРаспределенияЗатрат, Неопределено);
		
		ЗатратыНаСтроительствоОбъектовОсновныхСредств = 
			?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыНаСтроительствоОбъектовОсновныхСредств"), 
			Движения.ЗатратыНаСтроительствоОбъектовОсновныхСредств, Неопределено);
			
		СтроительствоОбъектовОсновныхСредств = 
			?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("СтроительствоОбъектовОсновныхСредств"), 
			Движения.СтроительствоОбъектовОсновныхСредств, Неопределено);
		
		Операция                         = Неопределено;
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ДвиженияВыпуск                   = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ВыпускПродукции"),					Движения.ВыпускПродукцииБухгалтерскийУчет, Неопределено);
		ДвиженияЗатраты                  = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("Затраты"),							Движения.ЗатратыБухгалтерскийУчет, Неопределено);
		ДвиженияЗатратыНаВыпуск          = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыНаВыпускПродукции"),			Движения.ЗатратыНаВыпускПродукцииБухгалтерскийУчет, Неопределено);
		ДвиженияЗатратыНаВыпускНаработка = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыНаВыпускПродукцииНаработка"),	Движения.ЗатратыНаВыпускПродукцииНаработкаБухгалтерскийУчет, Неопределено);
		ДвиженияБракВПроизводстве        = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("БракВПроизводстве"),					Движения.БракВПроизводствеБухгалтерскийУчет, Неопределено);
		ДвиженияНЗП		              	 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("НезавершенноеПроизводство"),			Движения.НезавершенноеПроизводствоБухгалтерскийУчет, Неопределено);
		ДвиженияПартии			         = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ПартииТоваровНаСкладах"),				Движения.ПартииТоваровНаСкладахБухгалтерскийУчет, Неопределено);
		ДвиженияБазаРаспределенияЗатрат  = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("БазаРаспределенияЗатрат"),			Движения.БазаРаспределенияЗатратБухгалтерскийУчет, Неопределено);
		
		ДвиженияЗатратыОбороты           = Неопределено;
		ДвиженияПродажиСебестоимость	 = Неопределено;
		
		ЗатратыНаСтроительствоОбъектовОсновныхСредств = Неопределено;
		СтроительствоОбъектовОсновныхСредств = Неопределено;
		
		ДвиженияСтроительствоОбъектовОС_БУ 		   = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("СтроительствоОбъектовОС_БУ"), 			Движения.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет, Неопределено);
		ДвиженияКорректировкиНЗП_НУ                = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("КорректировкиНЗП_НУ"), 					Движения.КорректировкиНезавершенноеПроизводствоНалоговыйУчет, Неопределено);
		ДвиженияКорректировкиЗатраты_НУ            = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("КорректировкиЗатраты_НУ"), 				Движения.КорректировкиЗатратыНалоговыйУчет, Неопределено);
		ДвиженияКорректировкиБракВПроизводстве_НУ  = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("КорректировкиБракВПроизводстве_НУ"), 	Движения.КорректировкиБракВПроизводствеНалоговыйУчет, Неопределено); 
		
		Операция                         = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("Операция"), 							Движения.Хозрасчетный, Неопределено);
		
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
		
		ДвиженияВыпуск            		 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ВыпускПродукции"), 					Движения.ВыпускПродукцииМеждународныйУчет, Неопределено);
		ДвиженияЗатраты           		 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("Затраты"), 							Движения.ЗатратыМеждународныйУчет, Неопределено);
		ДвиженияЗатратыНаВыпуск   		 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ЗатратыНаВыпускПродукции"),			Движения.ЗатратыНаВыпускПродукцииМеждународныйУчет, Неопределено);
		ДвиженияБракВПроизводстве 		 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("БракВПроизводстве"), 					Движения.БракВПроизводствеМеждународныйУчет, Неопределено);
		ДвиженияНЗП		       		  	 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("НезавершенноеПроизводство"), 			Движения.НезавершенноеПроизводствоМеждународныйУчет, Неопределено);
		ДвиженияПартии			   		 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("ПартииТоваровНаСкладах"), 			Движения.ПартииТоваровНаСкладахМеждународныйУчет, Неопределено);
		ДвиженияБазаРаспределенияЗатрат  = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("БазаРаспределенияЗатрат"), 			Движения.БазаРаспределенияЗатратМеждународныйУчет, Неопределено);
		
		ДвиженияЗатратыОбороты           = Неопределено;
		ДвиженияПродажиСебестоимость	 = Неопределено;
		
		ЗатратыНаСтроительствоОбъектовОсновныхСредств = Неопределено;
		СтроительствоОбъектовОсновныхСредств = Неопределено;
		
		Операция                  		 = ?(СтруктураИмен = Неопределено ИЛИ СтруктураИмен.Свойство("Операция"),							Движения.Международный, Неопределено);
		
	КонецЕсли;
	
	
	Если Операция <> Неопределено Тогда
		Операция.Очистить();
	КонецЕсли;
	
	
	СтруктураДвижений.Вставить("ДокументОбъект", 					ДокументОбъект);
	СтруктураДвижений.Вставить("ДвиженияВыпуск", 					ДвиженияВыпуск);
	СтруктураДвижений.Вставить("ДвиженияЗатраты", 					ДвиженияЗатраты);
	СтруктураДвижений.Вставить("ДвиженияЗатратыОбороты", 			ДвиженияЗатратыОбороты);
	СтруктураДвижений.Вставить("ДвиженияЗатратыНаВыпуск", 			ДвиженияЗатратыНаВыпуск);
	СтруктураДвижений.Вставить("ДвиженияЗатратыНаВыпускНаработка", 	ДвиженияЗатратыНаВыпускНаработка);
	СтруктураДвижений.Вставить("ДвиженияБракВПроизводстве", 		ДвиженияБракВПроизводстве);
	СтруктураДвижений.Вставить("ДвиженияНЗП", 						ДвиженияНЗП);
	СтруктураДвижений.Вставить("ДвиженияПартии", 					ДвиженияПартии);
	СтруктураДвижений.Вставить("ДвиженияПродажиСебестоимость", 		ДвиженияПродажиСебестоимость);
	СтруктураДвижений.Вставить("ДвиженияБазаРаспределенияЗатрат", 	ДвиженияБазаРаспределенияЗатрат);
	
	СтруктураДвижений.Вставить("ЗатратыНаСтроительствоОбъектовОсновныхСредств", ЗатратыНаСтроительствоОбъектовОсновныхСредств);
	СтруктураДвижений.Вставить("СтроительствоОбъектовОсновныхСредств", СтроительствоОбъектовОсновныхСредств);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураДвижений.Вставить("ДвиженияСтроительствоОбъектовОС_БУ",		ДвиженияСтроительствоОбъектовОС_БУ);
		СтруктураДвижений.Вставить("ДвиженияКорректировкиНЗП_НУ", 				ДвиженияКорректировкиНЗП_НУ);
		СтруктураДвижений.Вставить("ДвиженияКорректировкиЗатраты_НУ", 			ДвиженияКорректировкиЗатраты_НУ);
		СтруктураДвижений.Вставить("ДвиженияКорректировкиБракВПроизводстве_НУ",	ДвиженияКорректировкиБракВПроизводстве_НУ);
	КонецЕсли;
	
	СтруктураДвижений.Вставить("Операция", 							Операция);
	
	Возврат СтруктураДвижений;
	
КонецФункции // ПолучитьНаборыДвижений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ КОРРЕКТИРОВКИ ВСТРЕЧНОГО ВЫПУСКА ПРОДУКЦИИ

// Функция формирует текст запроса для заполнения корректировки встречного выпуска продукции.
//
// Возвращаемое значение:
//   Строка – Текст запроса
//
Функция СформироватьТекстЗапросаЗаполнениеКорректировкиВстречногоВыпускаПродукции()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	//ДляУпрУчета Истина КАК ОтражатьВУправленческомУчете,
	|	//ДляБухУчета Истина КАК ОтражатьВБухгалтерскомУчете,
	|	//ДляМеждУчета Истина КАК ОтражатьВМеждународномУчете,
	|
	|	СписанныеТовары.Регистратор КАК Документ,
	|	СписанныеТовары.НомерСтроки КАК НомерСтрокиСписанныхТоваров,
	|	
	|	//ДляРеглУчета МАКСИМУМ(ЗатратыНаВыпуск.Организация) КАК Организация,
	|	//ДляРеглУчета МАКСИМУМ(ЗатратыНаВыпуск.СчетУчета) КАК СчетУчета,
	|	МАКСИМУМ(ЗатратыНаВыпуск.Подразделение),
	|	МАКСИМУМ(ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП) КАК НоменклатурнаяГруппа,
	|	МАКСИМУМ(ЗатратыНаВыпуск.ЗаказНЗП) КАК Заказ,
	|	МАКСИМУМ(ЗатратыНаВыпуск.СтатьяЗатрат) КАК СтатьяЗатрат,
	|	МАКСИМУМ(ЗатратыНаВыпуск.Затрата) КАК Затрата,
	|	МАКСИМУМ(ЗатратыНаВыпуск.ХарактеристикаЗатраты) КАК ХарактеристикаЗатраты,
	|	МАКСИМУМ(ЗатратыНаВыпуск.СерияЗатраты) КАК СерияЗатраты
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ВстречныйВыпускПродукции.Продукция КАК Продукция,
	|			ВстречныйВыпускПродукции.Затрата КАК Затрата,
	|			ВстречныйВыпускПродукции.СпособОценкиСтоимости КАК СпособОценкиСтоимости
	|		ИЗ
	|			РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, ) КАК ВстречныйВыпускПродукции
	|		ГДЕ
	|			ВстречныйВыпускПродукции.СпособОценкиСтоимости = &СпособОценкиСтоимости
	|		) КАК РегистрВстречныйВыпуск
	|	ПО
	|		ЗатратыНаВыпуск.Затрата = РегистрВстречныйВыпуск.Затрата
	|		И ЗатратыНаВыпуск.Продукция = РегистрВстречныйВыпуск.Продукция
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			СписанныеТовары.Регистратор,
	|			СписанныеТовары.НомерСтроки,
	|			Ложь КАК ДокументПередачаТоваров,
	|			
	|			СписанныеТовары.СтатьяЗатрат,
	|			//ДляУпрУчета СписанныеТовары.Подразделение,
	|			//ДляРеглУчета СписанныеТовары.ПодразделениеОрганизации КАК Подразделение,
	|			
	|			//ДляУпрУчета Неопределено КАК КорСчет,
	|			//ДляБухУчета СписанныеТовары.КорСчетБУ КАК КорСчет,
	|			//ДляМеждУчета СписанныеТовары.КорСчетМУ КАК КорСчет,
	|			СписанныеТовары.НоменклатурнаяГруппа,
	|			СписанныеТовары.ЗаказСписания,
	|			
	|			СписанныеТовары.Номенклатура,
	|			СписанныеТовары.ХарактеристикаНоменклатуры,
	|			ВЫБОР КОГДА СписанныеТовары.Номенклатура.ВестиУчетПоСериямВНЗП ТОГДА
	|				СписанныеТовары.СерияНоменклатуры
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			КОНЕЦ КАК СерияНоменклатуры
	|		ИЗ
	|			РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ГДЕ 
	|			СписанныеТовары.Период МЕЖДУ &НачДата И &КонДата
	|			//ДляУпрУчета И СписанныеТовары.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И СписанныеТовары.ОтражатьВБухгалтерскомУчете
	|			//ДляМеждУчета И СписанныеТовары.ОтражатьВМеждународномУчете
	|			//ДляРеглУчета И СписанныеТовары.Организация = &Организация
	|			И (СписанныеТовары.Регистратор ССЫЛКА Документ.ТребованиеНакладная
	|				ИЛИ СписанныеТовары.Регистратор ССЫЛКА Документ.ПолучениеУслугПоПереработке)
	|			И СписанныеТовары.Номенклатура В (
	|				ВЫБРАТЬ
	|					ВстречныйВыпускПродукции.Затрата
	|				ИЗ
	|					РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, ) КАК ВстречныйВыпускПродукции
	|				ГДЕ
	|					ВстречныйВыпускПродукции.СпособОценкиСтоимости = &СпособОценкиСтоимости
	|				)	
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|						
	|		ВЫБРАТЬ
	|			СписанныеТовары.Регистратор,
	|			СписанныеТовары.НомерСтроки,
	|			Истина КАК ДокументПередачаТоваров,
	|			
	|			Неопределено КАК СтатьяЗатрат,
	|			Неопределено КАК Подразделение,
	|			Неопределено КАК КорСчет,
	|			Неопределено КАК НоменклатурнаяГруппа,
	|			Неопределено КАК ЗаказСписания,
	|			
	|			СписанныеТовары.Номенклатура,
	|			СписанныеТовары.ХарактеристикаНоменклатуры,
	|			ВЫБОР КОГДА СписанныеТовары.Номенклатура.ВестиУчетПоСериямВНЗП ТОГДА
	|				СписанныеТовары.СерияНоменклатуры
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			КОНЕЦ КАК СерияНоменклатуры
	|		ИЗ
	|			РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ГДЕ 
	|			СписанныеТовары.Период МЕЖДУ &НачДата И &КонДата
	|			//ДляУпрУчета И СписанныеТовары.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И СписанныеТовары.ОтражатьВБухгалтерскомУчете
	|			//ДляМеждУчета И СписанныеТовары.ОтражатьВМеждународномУчете
	|			//ДляРеглУчета И СписанныеТовары.Организация = &Организация
	|			И СписанныеТовары.Регистратор ССЫЛКА Документ.ПередачаТоваров
	|			И СписанныеТовары.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПередачаТоваров.ВПереработкуБрак)
	|			И СписанныеТовары.Номенклатура В (
	|				ВЫБРАТЬ
	|					ВстречныйВыпускПродукции.Затрата
	|				ИЗ
	|					РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, ) КАК ВстречныйВыпускПродукции
	|				ГДЕ
	|					ВстречныйВыпускПродукции.СпособОценкиСтоимости = &СпособОценкиСтоимости
	|				)	
	|		) КАК СписанныеТовары
	|	ПО
	|		ЗатратыНаВыпуск.Затрата = СписанныеТовары.Номенклатура
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = СписанныеТовары.ХарактеристикаНоменклатуры
	|		И ЗатратыНаВыпуск.СерияЗатраты = СписанныеТовары.СерияНоменклатуры
	|		И (ЗатратыНаВыпуск.СтатьяЗатрат = СписанныеТовары.СтатьяЗатрат 
	|			ИЛИ СписанныеТовары.ДокументПередачаТоваров)
	|		И (ЗатратыНаВыпуск.Подразделение = СписанныеТовары.Подразделение
	|			ИЛИ СписанныеТовары.ДокументПередачаТоваров)
	|		И (ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = СписанныеТовары.НоменклатурнаяГруппа
	|			ИЛИ СписанныеТовары.ДокументПередачаТоваров)
	|		И (ЗатратыНаВыпуск.ЗаказНЗП = СписанныеТовары.ЗаказСписания
	|			ИЛИ СписанныеТовары.ДокументПередачаТоваров)
	|		//ДляРеглУчета И (ЗатратыНаВыпуск.СчетУчета = СписанныеТовары.КорСчет
	|		//ДляРеглУчета 	ИЛИ СписанныеТовары.ДокументПередачаТоваров)
	|		
	|ГДЕ 
	|	ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|	И Не СписанныеТовары.Регистратор ЕСТЬ NULL
	|	И ЗатратыНаВыпуск.Затрата В (
	|		ВЫБРАТЬ
	|			ВстречныйВыпускПродукции.Затрата
	|		ИЗ
	|			РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, ) КАК ВстречныйВыпускПродукции
	|		ГДЕ
	|			ВстречныйВыпускПродукции.СпособОценкиСтоимости = &СпособОценкиСтоимости
	|		)
	|	//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	СписанныеТовары.Регистратор,
	|	СписанныеТовары.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписанныеТовары.Регистратор,
	|	СписанныеТовары.НомерСтроки
	|";
	
	Возврат ТекстЗапроса;
		
КонецФункции // СформироватьТекстЗапросаЗаполнениеКорректировкиВстречногоВыпускаПродукции()

// Процедура формирует движение по регистру сведений "Корректировка встречного выпуска продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	НомерЗаписи - Число - Номер строки выборки
//	НаборЗаписейКорректировкаВстречногоВыпускаПродукции - РегистрСведенийНаборЗаписей - Набор записей регистра сведений "Корректировка встречного выпуска продукции".
//
Процедура СформироватьДвиженияПоРегиструКорректировкаВстречногоВыпускаПродукции(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	НомерЗаписи,
	НаборЗаписейКорректировкаВстречногоВыпускаПродукции
	)
	
	НоваяСтрока = НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	Если СтрокаВыборки.НомерСтрокиСписанныхТоваров = 0
	   И СтрокаВыборки.Документ = Неопределено Тогда
		НоваяСтрока.НомерСтрокиСписанныхТоваров = НомерЗаписи;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Количество() = 1000 Тогда
		НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструКорректировкаВстречногоВыпускаПродукции()

// Процедура заполняет регистр сведений "Корректировка встречного выпуска продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//
Процедура ЗаполнениеКорректировкиВстречногоВыпускаПродукции(
	СтруктураШапкиДокумента
	) Экспорт
	
	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ИтерационныйРасчетЗатратВстречногоВыпуска Тогда
		 Возврат;
	КонецЕсли;
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаЗаполнениеКорректировкиВстречногоВыпускаПродукции();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Запрос.УстановитьПараметр("СпособОценкиСтоимости", Перечисления.СпособыОценкиСтоимостиВстречногоВыпуска.ПоРасчетнойСтоимости);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НаборЗаписейКорректировкаВстречногоВыпускаПродукции = РегистрыСведений.КорректировкаВстречногоВыпускаПродукции.СоздатьНаборЗаписей();
		НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СформироватьДвиженияПоРегиструКорректировкаВстречногоВыпускаПродукции(
				СтруктураШапкиДокумента,
				Выборка,
				0,
				НаборЗаписейКорректировкаВстречногоВыпускаПродукции
			);
		КонецЦикла;
		
		Если НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Модифицированность() Тогда
			НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Записать(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнениеКорректировкиВстречногоВыпускаПродукции()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДГОТОВКИ ТАБЛИЦЫ НОМЕНКЛАТУРЫ, ИСКЛЮЧАЕМОЙ ИЗ БАЗЫ РАСПРЕДЕЛЕНИЯ ЗАТРАТ.

// Процедура формирования запроса по продукции, полностью списанной на собственные нужды.
//
// Возвращаемое значение:
//   Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоСписаниюНаСобственныеНужды()
	
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продукция 
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|	И Не ВыпускПродукции.КодОперации В (&ИсключаемыеКодыОпераций)
	|";
	
	ТекстЗапросаСпособыРаспределения = "
	|						ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СпособыРаспределения.СпособРаспределенияЗатрат,
	|							СпособыРаспределения.ХарактерРаспределенияЗатрат,
	|							СпособыРаспределения.Подразделение,
	|							СпособыРаспределения.СтатьяЗатрат
	|						ИЗ
	|							РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(
	|								&КонГраница, 
	|								//ДляРеглУчета Организация = &Организация 
	|							) КАК СпособыРаспределения
	|
	|							ЛЕВОЕ СОЕДИНЕНИЕ (
	|								ВЫБРАТЬ РАЗЛИЧНЫЕ
	|									СпособыРаспределения.СтатьяЗатрат,
	|									СпособыРаспределения.ХарактерРаспределенияЗатрат,
	|									СпособыРаспределения.Период
	|								ИЗ
	|									РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(
	|										&КонГраница,
	|										//ДляРеглУчета Организация = &Организация
	|										) КАК СпособыРаспределения
	|									ГДЕ
	|										Не СпособыРаспределения.НеРаспределять
	|			
	|								) КАК СпособыРаспределенияПоПериодам
	|							ПО
	|								СпособыРаспределения.ХарактерРаспределенияЗатрат
	|									<> СпособыРаспределенияПоПериодам.ХарактерРаспределенияЗатрат
	|								И СпособыРаспределения.СтатьяЗатрат = СпособыРаспределенияПоПериодам.СтатьяЗатрат
	|								И СпособыРаспределения.Период < СпособыРаспределенияПоПериодам.Период
	|	
	|						ГДЕ
	|							Не СпособыРаспределения.НеРаспределять
	|							И СпособыРаспределенияПоПериодам.СтатьяЗатрат ЕСТЬ NULL
	|							И СпособыРаспределения.ХарактерРаспределенияЗатрат <> &ПроизводственныеРасходы
	|";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СписаниеНаСобственныеНужды.Номенклатура 				КАК Номенклатура,
	|	СписаниеНаСобственныеНужды.ХарактеристикаНоменклатуры 	КАК ХарактеристикаНоменклатуры,
	|	СписаниеНаСобственныеНужды.СерияНоменклатуры 			КАК СерияНоменклатуры,
	|	Сумма(ВЫБОР КОГДА
	|			(ВыпускПродукцииВсего.Количество - СписаниеНаСобственныеНужды.Количество +
	|			ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.Количество, 0)) <= 0 ТОГДА
	|				СписаниеНаСобственныеНужды.Количество
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ
	|		) КАК Количество
	|ИЗ (
	|	ВЫБРАТЬ
	|		СписаниеНаСобственныеНужды.Номенклатура 				КАК Номенклатура,
	|		СписаниеНаСобственныеНужды.ХарактеристикаНоменклатуры 	КАК ХарактеристикаНоменклатуры,
	|		СписаниеНаСобственныеНужды.СерияНоменклатуры 			КАК СерияНоменклатуры,
	|		СУММА(СписаниеНаСобственныеНужды.Количество) 			КАК Количество
	|	ИЗ (
	|		ВЫБРАТЬ
	|			ПартииТоваровНаСкладах.Номенклатура 				КАК Номенклатура,
	|			ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры 	КАК ХарактеристикаНоменклатуры,
	|			ПартииТоваровНаСкладах.СерияНоменклатуры 			КАК СерияНоменклатуры,
	|			СУММА(ПартииТоваровНаСкладах.Количество) 			КАК Количество
	|		ИЗ
	|			РегистрНакопления.ПартииТоваровНаСкладах%СуффиксУчета% КАК ПартииТоваровНаСкладах
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Регистратор,
	|					СписанныеТовары.НомерСтроки,
	|					СписанныеТовары.СтатьяЗатрат,
	|					СпособыРаспределенияСтатейЗатрат.СпособРаспределенияЗатрат
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				
	|					ЛЕВОЕ СОЕДИНЕНИЕ (
	|						//ТекстЗапросаСпособыРаспределения
	|						) КАК СпособыРаспределенияСтатейЗатрат
	|					ПО 
	|						СпособыРаспределенияСтатейЗатрат.СтатьяЗатрат = СписанныеТовары.СтатьяЗатрат
	|						И (
	|							//ДляУпрУчета СпособыРаспределенияСтатейЗатрат.Подразделение = СписанныеТовары.Подразделение
	|							//ДляРеглУчета СпособыРаспределенияСтатейЗатрат.Подразделение = СписанныеТовары.ПодразделениеОрганизации
	|							ИЛИ СпособыРаспределенияСтатейЗатрат.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|							ИЛИ СпособыРаспределенияСтатейЗатрат.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|							)
	|						
	|				ГДЕ
	|					СписанныеТовары.Период МЕЖДУ &НачДата И &КонДата
	|					//ДляУпрУчета И СписанныеТовары.ОтражатьВУправленческомУчете
	|					//ДляРеглУчета И СписанныеТовары.ОтражатьВБухгалтерскомУчете
	|					//ДляРеглУчета И СписанныеТовары.Организация = &Организация
	|					//ДляРеглУчета И СписанныеТовары.КорСчетБУ В ИЕРАРХИИ (&ИсключаемыеСчетаЗатрат)
	|					И СписанныеТовары.Регистратор ССЫЛКА Документ.ТребованиеНакладная
	|					И Не СпособыРаспределенияСтатейЗатрат.СпособРаспределенияЗатрат ЕСТЬ NULL
	|		    		И СписанныеТовары.Номенклатура В (
	|						//ТекстЗапросаСписокНоменклатуры
	|						)
	|
	|				) КАК СписанныеТовары
	|			ПО
	|				ПартииТоваровНаСкладах.Регистратор 						= СписанныеТовары.Регистратор
	|				И ПартииТоваровНаСкладах.НомерСтрокиСписанныхТоваров 	= СписанныеТовары.НомерСтроки
	|
	|		ГДЕ
	|			ПартииТоваровНаСкладах.Период МЕЖДУ &НачДата И &КонДата
	|			//ДляРеглУчета И ПартииТоваровНаСкладах.Организация = &Организация
	|			И ПартииТоваровНаСкладах.КодОперации В (&КодыОперацийСписанияПартии)
	|			И Не СписанныеТовары.СпособРаспределенияЗатрат ЕСТЬ NULL
	|
	|		    И ПартииТоваровНаСкладах.Номенклатура В (
	|				//ТекстЗапросаСписокНоменклатуры
	|				)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПартииТоваровНаСкладах.Номенклатура,
	|			ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|			ПартииТоваровНаСкладах.СерияНоменклатуры
	|
	|		ОБЪЕДИНИТЬ ВСЕ
    |
	|		ВЫБРАТЬ
	|			ВыпускПродукции.Продукция               КАК Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|			ВыпускПродукции.СерияПродукции          КАК СерияПродукции,
	|			СУММА(ВыпускПродукции.Количество) 		КАК Количество
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ (
	|				//ТекстЗапросаСпособыРаспределения
	|				) КАК СпособыРаспределенияСтатейЗатрат
	|			ПО 
	|				СпособыРаспределенияСтатейЗатрат.СтатьяЗатрат = ВыпускПродукции.СтатьяЗатратПолучатель
	|				И (
	|					СпособыРаспределенияСтатейЗатрат.Подразделение = ВыпускПродукции.ПодразделениеПолучатель
	|					ИЛИ СпособыРаспределенияСтатейЗатрат.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|					ИЛИ СпособыРаспределенияСтатейЗатрат.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|					)
	|		ГДЕ
	|			ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|			И ВыпускПродукции.КодОперации В (&КодыОперацийСписаниеНаЗатраты)
	|			И Не СпособыРаспределенияСтатейЗатрат.СтатьяЗатрат ЕСТЬ NULL
	|			//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|			//ДляРеглУчета И ВыпускПродукции.СчетДт В ИЕРАРХИИ (&ИсключаемыеСчетаЗатрат)
	|
	|		СГРУППИРОВАТЬ ПО
	|			ВыпускПродукции.Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции,
	|			ВыпускПродукции.СерияПродукции
	|
	|   	 ) КАК СписаниеНаСобственныеНужды
	|	    
	|	СГРУППИРОВАТЬ ПО
	|		СписаниеНаСобственныеНужды.Номенклатура,
	|		СписаниеНаСобственныеНужды.ХарактеристикаНоменклатуры,
	|		СписаниеНаСобственныеНужды.СерияНоменклатуры
	|	    
	|	) КАК СписаниеНаСобственныеНужды
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ВыпускПродукции.Продукция               КАК Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|			ВыпускПродукции.СерияПродукции 			КАК СерияПродукции,
	|			СУММА(ВыпускПродукции.Количество) 		КАК Количество
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|		ГДЕ
	|			ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|			//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|			И Не ВыпускПродукции.КодОперации В (&ИсключаемыеКодыОпераций)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВыпускПродукции.Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции,
	|			ВыпускПродукции.СерияПродукции
	|		) КАК ВыпускПродукцииВсего
	|	ПО
	|		СписаниеНаСобственныеНужды.Номенклатура               	= ВыпускПродукцииВсего.Продукция
	|		И СписаниеНаСобственныеНужды.ХарактеристикаНоменклатуры = ВыпускПродукцииВсего.ХарактеристикаПродукции
	|		И СписаниеНаСобственныеНужды.СерияНоменклатуры 			= ВыпускПродукцииВсего.СерияПродукции
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ПартииТоваровНаСкладах.Номенклатура,
	|			ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|			ПартииТоваровНаСкладах.СерияНоменклатуры,
	|			ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество
	|		ИЗ
	|			РегистрНакопления.ПартииТоваровНаСкладах%СуффиксУчета%.Остатки(&НачГраница, 
	|				Номенклатура В ( 
	|					//ТекстЗапросаСписокНоменклатуры 
	|					)
	|				//ДляРеглУчета И Организация = &Организация
	|
	|			) КАК ПартииТоваровНаСкладах
	|		
	|		) КАК ПартииТоваровНаСкладахОстатки
	|	ПО
	|		СписаниеНаСобственныеНужды.Номенклатура               	= ПартииТоваровНаСкладахОстатки.Номенклатура
	|		И СписаниеНаСобственныеНужды.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры
	|		И СписаниеНаСобственныеНужды.СерияНоменклатуры 			= ПартииТоваровНаСкладахОстатки.СерияНоменклатуры
	|	
	|СГРУППИРОВАТЬ ПО
	|	СписаниеНаСобственныеНужды.Номенклатура,
	|	СписаниеНаСобственныеНужды.ХарактеристикаНоменклатуры,
	|	СписаниеНаСобственныеНужды.СерияНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	Сумма(ВЫБОР КОГДА
	|			(ВыпускПродукцииВсего.Количество - СписаниеНаСобственныеНужды.Количество +
	|			ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.Количество, 0)) <= 0 ТОГДА
	|				СписаниеНаСобственныеНужды.Количество
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ
	|		) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеНаСобственныеНужды.Номенклатура,
	|	СписаниеНаСобственныеНужды.ХарактеристикаНоменклатуры,
	|	СписаниеНаСобственныеНужды.СерияНоменклатуры
	|
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаСпособыРаспределения", ТекстЗапросаСпособыРаспределения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаСписокНоменклатуры", ТекстЗапросаСписокНоменклатуры);
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаПоСписаниюНаСобственныеНужды()

// Процедура формирования запроса по полуфабрикатам, полностью использованным на выпуск продукции.
//
Функция СформироватьТекстЗапросаПоИспользованиюПолуфабрикатов()
	
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продукция 
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И Не ВыпускПродукции.КодОперации В (&ИсключаемыеКодыОпераций)
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗатратыНаВыпуск.Затрата					КАК Номенклатура,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты	КАК ХарактеристикаНоменклатуры,
	|	ЗатратыНаВыпуск.СерияЗатраты			КАК СерияНоменклатуры,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП КАК НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.ЗаказНЗП КАК Заказ,
	|	//ДляУпрУчета Неопределено КАК СчетУчета,
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	
	|	СписанныеТовары.Регистратор КАК Документ,
	|	СписанныеТовары.НомерСтроки КАК НомерСтрокиСписанныхТоваров,
	|	
	|	МАКСИМУМ(ЗатратыНаВыпуск.Количество) 			КАК Количество,
	|	МАКСИМУМ(ЗатратыНаВыпускВсего.Количество) 		КАК КоличествоВсего,
	|	МАКСИМУМ(НезавершенноеПроизводство.Количество) 	КАК КоличествоОстаток,
	|	МАКСИМУМ(ВыпускПродукции.Количество) 			КАК КоличествоВыпуск
	|ИЗ (
	|	ВЫБРАТЬ
	|		ЗатратыНаВыпуск.Подразделение,
	|		//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|		ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|		ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|		ЗатратыНаВыпуск.ЗаказНЗП,
	|		ЗатратыНаВыпуск.СтатьяЗатрат,
	|		ЗатратыНаВыпуск.Затрата,
	|		ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|		ЗатратыНаВыпуск.СерияЗатраты,
	|		СУММА(ЗатратыНаВыпуск.Количество) КАК Количество
	|	ИЗ
	|		РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				ИсключаемаяНоменклатура.Номенклатура,
	|				ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры,
	|				ИсключаемаяНоменклатура.СерияНоменклатуры,
	|				Истина КАК ЕстьИсключаемаяНоменклатура
	|			ИЗ
	|				РегистрСведений.НоменклатураИсключаемаяИзБазыРаспределения%СуффиксОрганизаций% КАК ИсключаемаяНоменклатура
	|			ГДЕ
	|				ИсключаемаяНоменклатура.Период МЕЖДУ &НачДата И &КонДата
	|				//ДляРеглУчета И ИсключаемаяНоменклатура.Организация = &Организация
	|			) КАК ИсключаемаяНоменклатура
	|		ПО
	|			ЗатратыНаВыпуск.Продукция               	= ИсключаемаяНоменклатура.Номенклатура
	|			И ЗатратыНаВыпуск.ХарактеристикаПродукции 	= ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры
	|			И ЗатратыНаВыпуск.СерияПродукции 			= ИсключаемаяНоменклатура.СерияНоменклатуры
	|			
	|	ГДЕ
	|		ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|		И ЗатратыНаВыпуск.КодОперации В (&ПрямыеЗатраты)
	|		И Не ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура ЕСТЬ NULL
	|		И ЗатратыНаВыпуск.Затрата В (
	|			//ТекстЗапросаСписокНоменклатуры
	|			)
	|		//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗатратыНаВыпуск.Подразделение,
	|		//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|		ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|		ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|		ЗатратыНаВыпуск.ЗаказНЗП,
	|		ЗатратыНаВыпуск.СтатьяЗатрат,
	|		ЗатратыНаВыпуск.Затрата,
	|		ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|		ЗатратыНаВыпуск.СерияЗатраты
	|			
	|	) КАК ЗатратыНаВыпуск
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			Распределение.Подразделение,
	|			Распределение.НоменклатурнаяГруппа,
	|			Распределение.СтатьяЗатрат,
	|			Распределение.Затрата,
	|			Распределение.ХарактеристикаЗатраты,
	|			Распределение.СерияЗатраты
	|		ИЗ			
	|			РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК Распределение
	|		ГДЕ
	|			Распределение.Период МЕЖДУ &НачДата И &КонДата
	|			И Распределение.НомерПередела = &НомерПередела
	|			И Распределение.Затрата В (
	|				//ТекстЗапросаСписокНоменклатуры
	|				)
	|			//ДляРеглУчета И Распределение.Организация = &Организация
	|
	|		) КАК Распределение
	|	ПО 
	|		ЗатратыНаВыпуск.Подразделение			= Распределение.Подразделение
	|		И ЗатратыНаВыпуск.Затрата				= Распределение.Затрата
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = Распределение.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты			= Распределение.СерияЗатраты
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппа 	= Распределение.НоменклатурнаяГруппа
	|		И ЗатратыНаВыпуск.СтатьяЗатрат  		= Распределение.СтатьяЗатрат
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ЗатратыНаВыпуск.Подразделение,
	|			//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|			ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|			ЗатратыНаВыпуск.ЗаказНЗП,
	|			ЗатратыНаВыпуск.СтатьяЗатрат,
	|			ЗатратыНаВыпуск.Затрата,
	|			ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|			ЗатратыНаВыпуск.СерияЗатраты,
	|			СУММА(ЗатратыНаВыпуск.Количество) КАК Количество
	|		ИЗ
	|			РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|				
	|		ГДЕ
	|			ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|			И ЗатратыНаВыпуск.КодОперации В (&ПрямыеЗатраты)
	|			И ЗатратыНаВыпуск.Затрата В (
	|				//ТекстЗапросаСписокНоменклатуры
	|				)
	|			//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			ЗатратыНаВыпуск.Подразделение,
	|			//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|			ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|			ЗатратыНаВыпуск.ЗаказНЗП,
	|			ЗатратыНаВыпуск.СтатьяЗатрат,
	|			ЗатратыНаВыпуск.Затрата,
	|			ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|			ЗатратыНаВыпуск.СерияЗатраты
	|			
	|		) КАК ЗатратыНаВыпускВсего
	|	ПО
	|		ЗатратыНаВыпуск.Затрата               	= ЗатратыНаВыпускВсего.Затрата
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = ЗатратыНаВыпускВсего.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты 			= ЗатратыНаВыпускВсего.СерияЗатраты
	|		И ЗатратыНаВыпуск.Подразделение 		= ЗатратыНаВыпускВсего.Подразделение
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = ЗатратыНаВыпускВсего.НоменклатурнаяГруппаНЗП
	|		И ЗатратыНаВыпуск.СтатьяЗатрат			= ЗатратыНаВыпускВсего.СтатьяЗатрат
	|		И ЗатратыНаВыпуск.ЗаказНЗП = ЗатратыНаВыпускВсего.ЗаказНЗП
	|		//ДляРеглУчета И ЗатратыНаВыпуск.СчетУчета = ЗатратыНаВыпускВсего.СчетУчета
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ВыпускПродукции.Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции,
	|			ВыпускПродукции.СерияПродукции,
	|			СУММА(ВыпускПродукции.Количество) КАК Количество
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|		ГДЕ
	|			ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|			И Не ВыпускПродукции.КодОперации В (&ИсключаемыеКодыОпераций)
	|			//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВыпускПродукции.Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции,
	|			ВыпускПродукции.СерияПродукции
	|
	|		) КАК ВыпускПродукции
	|	ПО
	|		ЗатратыНаВыпуск.Затрата               	= ВыпускПродукции.Продукция
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = ВыпускПродукции.ХарактеристикаПродукции
	|		И ЗатратыНаВыпуск.СерияЗатраты 			= ВыпускПродукции.СерияПродукции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			НезавершенноеПроизводство.Подразделение,
	|			//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|			НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|			НезавершенноеПроизводство.СтатьяЗатрат,
	|			НезавершенноеПроизводство.Заказ,
	|			НезавершенноеПроизводство.Затрата,
	|			НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|			НезавершенноеПроизводство.СерияЗатраты,
	|			НезавершенноеПроизводство.КоличествоОстаток КАК Количество
	|		ИЗ
	|			РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&КонГраница,
	|				Затрата В (
	|					//ТекстЗапросаСписокНоменклатуры
	|					)
	|				//ДляРеглУчета И Организация = &Организация
	|			) КАК НезавершенноеПроизводство
	|		
	|		) КАК НезавершенноеПроизводство
	|	ПО
	|		ЗатратыНаВыпуск.Затрата               	= НезавершенноеПроизводство.Затрата
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = НезавершенноеПроизводство.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты 			= НезавершенноеПроизводство.СерияЗатраты
	|		И ЗатратыНаВыпуск.Подразделение 		= НезавершенноеПроизводство.Подразделение
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = НезавершенноеПроизводство.НоменклатурнаяГруппа
	|		И ЗатратыНаВыпуск.СтатьяЗатрат			= НезавершенноеПроизводство.СтатьяЗатрат
	|		И ЗатратыНаВыпуск.ЗаказНЗП = НезавершенноеПроизводство.Заказ
	|		//ДляРеглУчета И ЗатратыНаВыпуск.СчетУчета = НезавершенноеПроизводство.СчетУчета
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			СписанныеТовары.Регистратор,
	|			СписанныеТовары.НомерСтроки,
	|			СписанныеТовары.СтатьяЗатрат,
	|			//ДляУпрУчета СписанныеТовары.Подразделение,
	|			//ДляРеглУчета СписанныеТовары.ПодразделениеОрганизации КАК Подразделение,
	|			СписанныеТовары.КорСчетБУ,
	|			СписанныеТовары.НоменклатурнаяГруппа,
	|			СписанныеТовары.Номенклатура,
	|			СписанныеТовары.ЗаказСписания,
	|			СписанныеТовары.ХарактеристикаНоменклатуры,
	|			СписанныеТовары.СерияНоменклатуры
	|		ИЗ
	|			РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ГДЕ 
	|			СписанныеТовары.Период МЕЖДУ &НачДата И &КонДата
	|			И СписанныеТовары.Регистратор ССЫЛКА Документ.ТребованиеНакладная
	|			И СписанныеТовары.Номенклатура В (
	|				//ТекстЗапросаСписокНоменклатуры
	|				)
	|			//ДляУпрУчета И СписанныеТовары.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И СписанныеТовары.ОтражатьВБухгалтерскомУчете
	|			//ДляРеглУчета И СписанныеТовары.Организация = &Организация
	|
	|		) КАК СписанныеТовары
	|	ПО
	|		ЗатратыНаВыпуск.Затрата 				= СписанныеТовары.Номенклатура
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = СписанныеТовары.ХарактеристикаНоменклатуры
	|		И ЗатратыНаВыпуск.СерияЗатраты 			= СписанныеТовары.СерияНоменклатуры
	|		И ЗатратыНаВыпуск.СтатьяЗатрат 			= СписанныеТовары.СтатьяЗатрат
	|		И ЗатратыНаВыпуск.Подразделение 		= СписанныеТовары.Подразделение
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = СписанныеТовары.НоменклатурнаяГруппа
	|		И ЗатратыНаВыпуск.ЗаказНЗП = СписанныеТовары.ЗаказСписания
	|		//ДляРеглУчета И ЗатратыНаВыпуск.СчетУчета = СписанныеТовары.КорСчетБУ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ИсключаемаяНоменклатура.Номенклатура,
	|			ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры,
	|			ИсключаемаяНоменклатура.СерияНоменклатуры,
	|			Истина КАК ЕстьИсключаемаяНоменклатура
	|		ИЗ
	|			РегистрСведений.НоменклатураИсключаемаяИзБазыРаспределения%СуффиксОрганизаций% КАК ИсключаемаяНоменклатура
	|		ГДЕ
	|			ИсключаемаяНоменклатура.Период МЕЖДУ &НачДата И &КонДата
	|			//ДляРеглУчета И ИсключаемаяНоменклатура.Организация = &Организация
	|
	|		) КАК ИсключаемаяНоменклатура
	|	ПО
	|		ЗатратыНаВыпуск.Затрата               	= ИсключаемаяНоменклатура.Номенклатура
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры
	|		И ЗатратыНаВыпуск.СерияЗатраты 			= ИсключаемаяНоменклатура.СерияНоменклатуры
	|
	|ГДЕ
	|	ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура ЕСТЬ NULL
	|		
	|СГРУППИРОВАТЬ ПО
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	СписанныеТовары.Регистратор,
	|	СписанныеТовары.НомерСтроки
	|
	|ИМЕЮЩИЕ
	|	(МАКСИМУМ(ЗатратыНаВыпуск.Количество) >= МАКСИМУМ(ЗатратыНаВыпускВсего.Количество))
	|	И (МАКСИМУМ(НезавершенноеПроизводство.Количество) = 0 
	|		ИЛИ МАКСИМУМ(НезавершенноеПроизводство.Количество) ЕСТЬ NULL)
	|
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	СписанныеТовары.Регистратор,
	|	СписанныеТовары.НомерСтроки
	|	
	|
	|ИТОГИ ПО
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	//ДляУпрУчета СчетУчета,
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	ЗатратыНаВыпуск.СтатьяЗатрат
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаСписокНоменклатуры", ТекстЗапросаСписокНоменклатуры);
	
	Возврат ТекстЗапроса;
		
КонецФункции // СформироватьТекстЗапросаПоИспользованиюПолуфабрикатов()

// Процедура определяет номенклатуру, которая должна быть исключена из базы распределения затрат. 
// Из базы распределения исключается продукция, полностью списанная на собственные нужды (ОПР, ОХР, Брак в производстве),
// и полуфабрикаты, которые включаются в себестоимость продукции, полностью списанной на собственные нужды.
//
Процедура ОпределитьНоменклатуруИсключаемуюИзБазыРаспределения(СтруктураШапкиДокумента) Экспорт
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		НаборЗаписейНоменклатураИсключаемаяИзБазы = РегистрыСведений.НоменклатураИсключаемаяИзБазыРаспределения.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписейНоменклатураИсключаемаяИзБазы = РегистрыСведений.НоменклатураИсключаемаяИзБазыРаспределенияОрганизаций.СоздатьНаборЗаписей();
	КонецЕсли;
	НаборЗаписейНоменклатураИсключаемаяИзБазы.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	ТаблицаДвижений = НаборЗаписейНоменклатураИсключаемаяИзБазы.Выгрузить();
	
	НаборЗаписейКорректировкаВстречногоВыпускаПродукции = РегистрыСведений.КорректировкаВстречногоВыпускаПродукции.СоздатьНаборЗаписей();
	НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	ТаблицаДвиженийКорректировка = НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Выгрузить();
	
	МассивИсключаемыхКодовОпераций = Новый Массив;
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	
	МассивКодовОперацийСписанияПартии = Новый Массив;
	МассивКодовОперацийСписанияПартии.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеНаБрак);
	МассивКодовОперацийСписанияПартии.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеНаЗатраты);
	МассивКодовОперацийСписанияПартии.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеПартийВПроизводствоОперативно);
	
	МассивКодовПрямыеЗатраты = Новый Массив;
	МассивКодовПрямыеЗатраты.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	
	МассивКодовОперацийСписаниеНаЗатраты = Новый Массив;
	МассивКодовОперацийСписаниеНаЗатраты.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты);
	МассивКодовОперацийСписаниеНаЗатраты.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство);
	
	МассивИсключаемыхСчетовЗатрат = Новый Массив;
	МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.АдминистративныеРасходы);
	МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	
	МассивИсключаемыхХарактеровЗатрат = Новый Массив;
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.АдминистративныеРасходы);
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.БракВПроизводстве);
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоСписаниюНаСобственныеНужды();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата",    СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата",    СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ИсключаемыеКодыОпераций", 	МассивИсключаемыхКодовОпераций);
	Запрос.УстановитьПараметр("КодыОперацийСписанияПартии", МассивКодовОперацийСписанияПартии);
	Запрос.УстановитьПараметр("КодыОперацийСписаниеНаЗатраты", МассивКодовОперацийСписаниеНаЗатраты);
	Запрос.УстановитьПараметр("ИсключаемыеСчетаЗатрат", 	МассивИсключаемыхСчетовЗатрат);
	Запрос.УстановитьПараметр("ИсключаемыеХарактерыЗатрат", МассивИсключаемыхХарактеровЗатрат);
	Запрос.УстановитьПараметр("НеУчитыватьПодразделение", Перечисления.ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение);
	Запрос.УстановитьПараметр("ПроизводственныеРасходы", Перечисления.ХарактерРаспределенияЗатрат.ПроизводственныеРасходы);
	Запрос.УстановитьПараметр("Материальные", Перечисления.ВидыЗатрат.Материальные);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ТаблицаИсключаемойНоменклатуры = РезультатЗапроса.Выгрузить();
	
	ТаблицаИсключаемойНоменклатуры.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", "");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаИсключаемойНоменклатуры, ТаблицаДвижений);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, 	"Организация");
	КонецЕсли;
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
		НаборЗаписейНоменклатураИсключаемаяИзБазы.мПериод = СтруктураШапкиДокумента.Период;
		НаборЗаписейНоменклатураИсключаемаяИзБазы.мТаблицаДвижений = ТаблицаДвижений;
		НаборЗаписейНоменклатураИсключаемаяИзБазы.ВыполнитьДвижения();
		НаборЗаписейНоменклатураИсключаемаяИзБазы.Записать();
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	МИНИМУМ(РаспределениеЗатратПоПеределам.НомерПередела) КАК НачальныйПередел,
		|	МАКСИМУМ(РаспределениеЗатратПоПеределам.НомерПередела) КАК КонечныйПередел
		|ИЗ
		|	РегистрСведений.РаспределениеЗатратПоПеределам КАК РаспределениеЗатратПоПеределам
		|ГДЕ
		|	РаспределениеЗатратПоПеределам.Период МЕЖДУ &НачДата И &КонДата
		|	И РаспределениеЗатратПоПеределам.НомерПередела <> 0
		|";	
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	МИНИМУМ(РаспределениеЗатратПоПеределам.НомерПередела) КАК НачальныйПередел,
		|	МАКСИМУМ(РаспределениеЗатратПоПеределам.НомерПередела) КАК КонечныйПередел
		|ИЗ
		|	РегистрСведений.РаспределениеЗатратПоПеределамОрганизаций КАК РаспределениеЗатратПоПеределам
		|ГДЕ
		|	РаспределениеЗатратПоПеределам.Период МЕЖДУ &НачДата И &КонДата
		|	И РаспределениеЗатратПоПеределам.НомерПередела <> 0
		|	И РаспределениеЗатратПоПеределам.Организация = &Организация
		|";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата",     СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата",     СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	НачальныйПередел = РезультатЗапроса[0].НачальныйПередел;
	КонечныйПередел = РезультатЗапроса[0].КонечныйПередел;
	
	Если Не ЗначениеЗаполнено(НачальныйПередел) ИЛИ Не ЗначениеЗаполнено(КонечныйПередел) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаЗатратыСКомментариями = СформироватьТекстЗапросаПоИспользованиюПолуфабрикатов();
	ТекстЗапросаЗатраты = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаЗатратыСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	ЗапросЗатраты = Новый Запрос;
	ЗапросЗатраты.Текст = ТекстЗапросаЗатраты;
	ЗапросЗатраты.УстановитьПараметр("НачДата",    СтруктураШапкиДокумента.мНачДата);
	ЗапросЗатраты.УстановитьПараметр("КонДата",    СтруктураШапкиДокумента.мКонДата);
	ЗапросЗатраты.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	ЗапросЗатраты.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	ЗапросЗатраты.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	ЗапросЗатраты.УстановитьПараметр("ИсключаемыеКодыОпераций", МассивИсключаемыхКодовОпераций);
	ЗапросЗатраты.УстановитьПараметр("ПрямыеЗатраты", 			МассивКодовПрямыеЗатраты);
	
	НомерЗаписи = 0;
	Для НомерПередела = НачальныйПередел По КонечныйПередел Цикл
		
		ЗапросЗатраты.УстановитьПараметр("НомерПередела", КонечныйПередел - НомерПередела + 1);
		РезультатЗапроса = ЗапросЗатраты.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		ОбходПоЗатратам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоЗатратам.Следующий() Цикл
			ОбходПоХарактеристикам = ОбходПоЗатратам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоХарактеристикам.Следующий() Цикл
				ОбходПоСериям = ОбходПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ОбходПоСериям.Следующий() Цикл
					ОбходПоПодразделениям = ОбходПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ОбходПоПодразделениям.Следующий() Цикл
						ОбходПоНомГруппам = ОбходПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ОбходПоНомГруппам.Следующий() Цикл
							ОбходПоЗаказам = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ОбходПоЗаказам.Следующий() Цикл
								ОбходПоСчетам = ОбходПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								Пока ОбходПоСчетам.Следующий() Цикл
									ОбходПоСтатьямЗатрат = ОбходПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
									Пока ОбходПоСтатьямЗатрат.Следующий() Цикл
										
										Если ОбходПоСтатьямЗатрат.Количество >= ОбходПоСтатьямЗатрат.КоличествоВыпуск Тогда
											НоваяСтрока = ТаблицаИсключаемойНоменклатуры.Добавить();
											ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбходПоСтатьямЗатрат);
										Иначе
											Обход = ОбходПоСтатьямЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
											Пока Обход.Следующий() Цикл
												НоваяСтрока = ТаблицаДвиженийКорректировка.Добавить();
												ЗаполнитьЗначенияСвойств(НоваяСтрока, Обход);
												Если Не ЗначениеЗаполнено(Обход.Документ) ТОгда
													НомерЗаписи = НомерЗаписи + 1;
													НоваяСтрока.НомерСтрокиСписанныхТоваров = НомерЗаписи;
												КонецЕсли;
											КонецЦикла;
										КонецЕсли;
										
									КонецЦикла; // по статьям затрат
								КонецЦикла; // по счетам
							КонецЦикла; // по заказам
						КонецЦикла; // по номенклатурным группам
					КонецЦикла; // по подразделениям
				КонецЦикла; // по сериям затрат
			КонецЦикла; // по характеристикам затрат
		КонецЦикла; // по затратам
		
		ТаблицаИсключаемойНоменклатуры.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", "");
		
		Если ТаблицаИсключаемойНоменклатуры.Количество() > 0 Тогда
			ТаблицаДвижений.Очистить();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаИсключаемойНоменклатуры, ТаблицаДвижений);
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, 	"Организация");
			КонецЕсли;
			
			Если ТаблицаДвижений.Количество() > 0 Тогда
				НаборЗаписейНоменклатураИсключаемаяИзБазы.Очистить();
				НаборЗаписейНоменклатураИсключаемаяИзБазы.Записать();
				
				НаборЗаписейНоменклатураИсключаемаяИзБазы.мПериод = СтруктураШапкиДокумента.Период;
				НаборЗаписейНоменклатураИсключаемаяИзБазы.мТаблицаДвижений = ТаблицаДвижений;
				НаборЗаписейНоменклатураИсключаемаяИзБазы.ВыполнитьДвижения();
				НаборЗаписейНоменклатураИсключаемаяИзБазы.Записать();
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	Если ТаблицаДвиженийКорректировка.Количество() > 0 Тогда
		
		ТаблицаДвиженийКорректировка.Свернуть("Документ, НомерСтрокиСписанныхТоваров, Подразделение, НоменклатурнаяГруппа, Заказ, СтатьяЗатрат, Затрата, ХарактеристикаЗатраты, СерияЗатраты", "");
		
		ТаблицаДвижений = НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийКорректировка, ТаблицаДвижений);
		
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "ОтражатьВУправленческомУчете");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "ОтражатьВБухгалтерскомУчете");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "ОтражатьВМеждународномУчете");
		КонецЕсли;

		Если ТаблицаДвижений.Количество() > 0 Тогда
			НаборЗаписейКорректировкаВстречногоВыпускаПродукции.мПериод          = СтруктураШапкиДокумента.Период;
			НаборЗаписейКорректировкаВстречногоВыпускаПродукции.мТаблицаДвижений = ТаблицаДвижений;
			НаборЗаписейКорректировкаВстречногоВыпускаПродукции.ВыполнитьДвижения();
			НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНоменклатуруИсключаемуюИзБазыРаспределения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДГОТОВКИ ТАБЛИЦЫ НОМЕНКЛАТУРЫ, СПИСАННОЙ НА СТАТЬИ ЗАТРАТ, РАСПРЕДЕЛЯЕМЫЕ ПО БАЗЕ

// Функция формирования текста запроса по продукции, списываемой на статьи затрат, распределяемые
// базе распределения, указанной в регистре сведений "Способы распределения статей затрат".
//
// Возвращаемое значение:
//   Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоСписаниюНаРаспределяемыеРасходы()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	//ДляУпрУчета Истина КАК ОтражатьВУправленческомУчете,
	|	//ДляРеглУчета Истина КАК ОтражатьВБухгалтерскомУчете,
	|
	|	СписанныеТовары.Регистратор КАК Документ,
	|	СписанныеТовары.НомерСтроки КАК НомерСтрокиСписанныхТоваров,
	|	
	|	//ДляРеглУчета СписанныеТовары.Организация,
	|	//ДляУпрУчета СписанныеТовары.Подразделение,
	|	//ДляРеглУчета СписанныеТовары.ПодразделениеОрганизации КАК Подразделение,
	|	//ДляБухУчета СписанныеТовары.КорСчетБУ КАК СчетУчета,
	|	СписанныеТовары.СтатьяЗатрат,
	|	СписанныеТовары.НоменклатурнаяГруппа,
	|	СписанныеТовары.ЗаказСписания КАК Заказ,
	|	СписанныеТовары.Номенклатура КАК Затрата,
	|	СписанныеТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	СписанныеТовары.СерияНоменклатуры КАК СерияЗатраты
	|	
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Корректировка.Документ,
	|			Корректировка.НомерСтрокиСписанныхТоваров
	|		ИЗ
	|			РегистрСведений.КорректировкаВстречногоВыпускаПродукции КАК Корректировка
	|		ГДЕ
	|			Корректировка.Регистратор = &Ссылка
	|			//ДляУпрУчета И Корректировка.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И Корректировка.ОтражатьВБухгалтерскомУчете
	|		) КАК Корректировка
	|	ПО
	|		СписанныеТовары.Регистратор = Корректировка.Документ
	|		И СписанныеТовары.НомерСтроки = Корректировка.НомерСтрокиСписанныхТоваров
	|	
	|ГДЕ 
	|	СписанныеТовары.Период МЕЖДУ &НачДата И &КонДата
	|	//ДляУпрУчета И СписанныеТовары.ОтражатьВУправленческомУчете
	|	//ДляБухУчета И СписанныеТовары.ОтражатьВБухгалтерскомУчете
	|	//ДляРеглУчета И СписанныеТовары.Организация = &Организация
	|	И СписанныеТовары.Регистратор ССЫЛКА Документ.ТребованиеНакладная
	|	И Корректировка.Документ ЕСТЬ NULL
	|	И СписанныеТовары.Номенклатура В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Продукция 
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|		ГДЕ
	|			ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|			И Не ВыпускПродукции.КодОперации В (&ИсключаемыеКодыОпераций)
	|			//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|		)
	|		
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	//ДляУпрУчета Истина КАК ОтражатьВУправленческомУчете,
	|	//ДляРеглУчета Истина КАК ОтражатьВБухгалтерскомУчете,
	|
	|	Неопределено КАК Документ,
	|	0 КАК НомерСтрокиСписанныхТоваров,
	|	
	|	//ДляРеглУчета ВыпускПродукции.Организация,
	|	ВыпускПродукции.ПодразделениеПолучатель,
	|	//ДляРеглУчета ВыпускПродукции.СчетДт КАК СчетУчета,
	|	ВыпускПродукции.СтатьяЗатратПолучатель,
	|	ВыпускПродукции.НоменклатурнаяГруппаПолучатель,
	|	Неопределено КАК Заказ,
	|	ВыпускПродукции.Продукция КАК Затрата,
	|	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаЗатраты,
	|	ВыпускПродукции.СерияПродукции КАК СерияЗатраты
	|	
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Корректировка.Подразделение,
	|			//ДляРеглУчета Корректировка.СчетУчета,
	|			Корректировка.НоменклатурнаяГруппа,
	|			Корректировка.СтатьяЗатрат,
	|			Корректировка.Затрата,
	|			Корректировка.ХарактеристикаЗатраты,
	|			Корректировка.СерияЗатраты
	|		ИЗ
	|			РегистрСведений.КорректировкаВстречногоВыпускаПродукции КАК Корректировка
	|		ГДЕ
	|			Корректировка.Регистратор = &Ссылка
	|			И Корректировка.Документ = Неопределено
	|			//ДляУпрУчета И Корректировка.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И Корректировка.ОтражатьВБухгалтерскомУчете
	|			//ДляРеглУчета И Корректировка.Организация = &Организация
	|		) КАК Корректировка
	|	ПО
	|		ВыпускПродукции.ПодразделениеПолучатель = Корректировка.Подразделение
	|		//ДляРеглУчета И ВыпускПродукции.СчетДт = Корректировка.СчетУчета
	|		И ВыпускПродукции.СтатьяЗатратПолучатель = Корректировка.СтатьяЗатрат
	|		И ВыпускПродукции.НоменклатурнаяГруппаПолучатель = Корректировка.НоменклатурнаяГруппа
	|		И ВыпускПродукции.Продукция = Корректировка.Затрата
	|		И ВыпускПродукции.ХарактеристикаПродукции = Корректировка.ХарактеристикаЗатраты
	|		И ВыпускПродукции.СерияПродукции = Корректировка.СерияЗатраты
	|	
	|ГДЕ 
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.КодОперации В (&КодыОперацийСписаниеНаЗатраты)
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|	И Корректировка.СтатьяЗатрат ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	НомерСтрокиСписанныхТоваров,
	|	Подразделение,
	|	//ДляРеглУчета СчетУчета,
	|	СтатьяЗатрат,
	|	НоменклатурнаяГруппа,
	|	Заказ,
	|	Затрата,
	|	ХарактеристикаЗатраты,
	|	СерияЗатраты
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоСписаниюНаРаспределяемыеРасходы()

// Функция формирования запроса по продукции, списываемой на статьи затрат, распределяемые
// базе распределения, указанной в регистре сведений "Способы распределения статей затрат".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//
// Возвращаемое значение:
//	Запрос - Запрос по продукции.
//
Функция СформироватьЗапросПоСписаниюНаРаспределяемыеРасходы(
	СтруктураШапкиДокумента
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоСписаниюНаРаспределяемыеРасходы();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	
	МассивИсключаемыхКодовОпераций = Новый Массив;
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	Запрос.УстановитьПараметр("ИсключаемыеКодыОпераций", МассивИсключаемыхКодовОпераций);
	
	МассивКодовОперацийСписаниеНаЗатраты = Новый Массив;
	МассивКодовОперацийСписаниеНаЗатраты.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты);
	МассивКодовОперацийСписаниеНаЗатраты.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство);
	Запрос.УстановитьПараметр("КодыОперацийСписаниеНаЗатраты", МассивКодовОперацийСписаниеНаЗатраты);
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоСписаниюНаРаспределяемыеРасходы()

// Функция определяет максимальный номер, отраженный в измерении "Номер строки списанных товаров",
// регистра "Корректировка встречного выпуска продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//
// Возвращаемое значение:
//	Число - Максимальный номер, отраженный в регистре сведений "Корректировка встречного выпуска продукции".
//
Функция ПолучитьМаксимальныйНомерСтрокиРегистраКорректировкиВстречногоВыпуска(
	СтруктураШапкиДокумента
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(КорректировкаВстречногоВыпускаПродукции.НомерСтрокиСписанныхТоваров) КАК НомерСтрокиСписанныхТоваров
	|ИЗ
	|	РегистрСведений.КорректировкаВстречногоВыпускаПродукции КАК КорректировкаВстречногоВыпускаПродукции
	|ГДЕ
	|	КорректировкаВстречногоВыпускаПродукции.Документ = Неопределено
	|	И КорректировкаВстречногоВыпускаПродукции.Регистратор = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	НомерСтрокиСписанныхТоваров = 0;
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			НомерСтрокиСписанныхТоваров = Выборка.НомерСтрокиСписанныхТоваров;
		КонецЕсли;
	КонецЕсли;
	
	Если НомерСтрокиСписанныхТоваров = NULL Тогда
		НомерСтрокиСписанныхТоваров = 0;
	КонецЕсли;
	
	Возврат НомерСтрокиСписанныхТоваров;
	
КонецФункции // ПолучитьМаксимальныйНомерСтрокиРегистраКорректировкиВстречногоВыпуска()

// Процедура определяет номенклатуру, списанную на статьи затрат, распределяемые про базе.
//
Процедура ОпределитьНоменклатуруСписаннуюНаРаспределяемыеЗатраты(СтруктураШапкиДокумента) Экспорт
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	МассивХарактеровРаспределения = Новый Массив;
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение);
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.УчитыватьПодразделение);
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.ПроизводственныеРасходы);
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка());
	
	// Сформируем запрос по способам распределения статей затрат.	
	ЗапросПоСпособамРаспределенияЗатрат = СформироватьЗапросПоСпособамРаспределенияЗатрат(
		СтруктураШапкиДокумента,
		МассивХарактеровРаспределения,
		Ложь, // ФормироватьВременнуюТаблицу
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	РезультатЗапросаПоСпособамРаспределенияЗатрат = ЗапросПоСпособамРаспределенияЗатрат.Выполнить();
	
	// Сформируем запрос по списанию продукции на распределяемые расходы.
	ЗапросПоСписаниюНаРасходы = СформироватьЗапросПоСписаниюНаРаспределяемыеРасходы(СтруктураШапкиДокумента);
    РезультатЗапросаПоСписаниюНаРасходы = ЗапросПоСписаниюНаРасходы.Выполнить();
	
	Если РезультатЗапросаПоСпособамРаспределенияЗатрат.Пустой()
	 ИЛИ РезультатЗапросаПоСписаниюНаРасходы.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейКорректировкаВстречногоВыпускаПродукции = РегистрыСведений.КорректировкаВстречногоВыпускаПродукции.СоздатьНаборЗаписей();
	НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	ВыборкаПоСпособамРаспределенияЗатрат = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выбрать();
	
	НомерЗаписи = ПолучитьМаксимальныйНомерСтрокиРегистраКорректировкиВстречногоВыпуска(СтруктураШапкиДокумента);
	
	Выборка = РезультатЗапросаПоСписаниюНаРасходы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НомерЗаписи = НомерЗаписи + 1;
		
		// Определим способ и характер распределения затрат.
		СпособРаспределения = Неопределено;
		ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка();
		РаспределятьНаПодчиненныеПодразделения = Ложь;
		
		РаспределятьЗатраты = ПолучитьСпособИХарактерРаспределенияЗатрат(
			СтруктураШапкиДокумента,
			Выборка,
			ВыборкаПоСпособамРаспределенияЗатрат,
			Ложь, // ОпределятьПоХарактеруЗатрат
			Ложь, // ПроверятьУказаниеСпособаРаспределения
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения
		);
			
		Если Не РаспределятьЗатраты
		 ИЛИ ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПроизводственныеРасходы Тогда
			Продолжить;
		КонецЕсли;
		
		СформироватьДвиженияПоРегиструКорректировкаВстречногоВыпускаПродукции(
			СтруктураШапкиДокумента,
			Выборка,
			НомерЗаписи,
			НаборЗаписейКорректировкаВстречногоВыпускаПродукции
			);
	КонецЦикла;
	
	Если НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Модифицированность() Тогда
		НаборЗаписейКорректировкаВстречногоВыпускаПродукции.Записать(Ложь);
	КонецЕсли;
		
КонецПроцедуры // ОпределитьНоменклатуруСписаннуюНаРаспределяемыеЗатраты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ ЗАТРАТ ПО НАРАБОТКЕ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСОВ ПО НАРАБОТКЕ

// Функция формирует текст запроса по регистру "Затраты на выпуск (наработка)".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоЗатратамНаВыпускНаработка()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА
	|		Неопределено
	|	ИНАЧЕ
	|		ЗатратыНаВыпуск.Затрата
	|	КОНЕЦ КАК Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	ЗатратыНаВыпуск.Заказ,
	|	
	|	ЗатратыНаВыпуск.ПодразделениеНЗП КАК ЗатратыПодразделениеНЗП,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП КАК ЗатратыНоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.ЗаказНЗП КАК ЗатратыЗаказНЗП,
	|	
	|	ЕСТЬNULL(
	|		НезавершенноеПроизводство.Подразделение,
	|		НезавершенноеПроизводствоАналитикаНЗП.Подразделение
	|		) КАК ПодразделениеНЗП,
	|	ЕСТЬNULL(
	|		НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|		НезавершенноеПроизводствоАналитикаНЗП.НоменклатурнаяГруппа
	|		) КАК НоменклатурнаяГруппаНЗП,
	|	ЕСТЬNULL(
	|		НезавершенноеПроизводство.Заказ,
	|		НезавершенноеПроизводствоАналитикаНЗП.Заказ 
	|		) КАК ЗаказНЗП,
	|	
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	//ДляРеглУчета ЗатратыНаВыпуск.НалоговоеНазначение,
	|	//ДляРеглУчета ЗатратыНаВыпуск.НалоговоеНазначениеПоФакту,
	|	
	|	ЗатратыНаВыпуск.КоличествоКонечныйОстаток КАК Количество,
	|	ЗатратыНаВыпуск.СуммаКонечныйОстаток КАК Сумма,
	|	//ДляРеглУчета ЗатратыНаВыпуск.СуммаНУКонечныйОстаток КАК СуммаНУ,
	|	//ДляРеглУчета ЗатратыНаВыпуск.НДСВходящийКонечныйОстаток КАК НДСВходящий,
	|	//ДляРеглУчета ЗатратыНаВыпуск.НДСКредитКонечныйОстаток КАК НДСКредит,
	|	
	|	ВЫБОР КОГДА Не ВыпускПродукции.КоличествоПриход ЕСТЬ NULL
	|		И Не ВыпускПродукции.КоличествоРасход ЕСТЬ NULL
	|		И (ВыпускПродукции.КоличествоПриход + ВыпускПродукции.КоличествоНачальныйОстаток) <> 0 
	|	ТОГДА
	|		ВыпускПродукции.КоличествоРасход / 
	|		(ВыпускПродукции.КоличествоПриход + ВыпускПродукции.КоличествоНачальныйОстаток)
	|	Иначе
	|		0
	|	Конец КАК КоэффициентРасхода
	|		
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукцииНаработка%СуффиксУчета%.ОстаткиИОбороты(&НачГраница, &КонГраница, , , 
	|		//ДляРеглУчета Организация = &Организация
	|	) КАК ЗатратыНаВыпуск
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ВыпускПродукцииНаработка%СуффиксУчета%.ОстаткиИОбороты(&НачГраница, &КонГраница, , , 
	|			//ДляРеглУчета Организация = &Организация
	|		) КАК ВыпускПродукции
	|	ПО  
	|		ЗатратыНаВыпуск.Подразделение = ВыпускПродукции.Подразделение
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппа = ВыпускПродукции.НоменклатурнаяГруппа
	|		И ЗатратыНаВыпуск.Продукция = ВыпускПродукции.Продукция
	|		И ЗатратыНаВыпуск.ХарактеристикаПродукции = ВыпускПродукции.ХарактеристикаПродукции
	|		И ЗатратыНаВыпуск.Заказ = ВыпускПродукции.Заказ
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&КонГраница,
	|			//ДляРеглУчета Организация = &Организация
	|		) КАК НезавершенноеПроизводство
	|	ПО  
	|		ЗатратыНаВыпуск.СтатьяЗатрат = НезавершенноеПроизводство.СтатьяЗатрат
	|		И (ЗатратыНаВыпуск.Затрата = НезавершенноеПроизводство.Затрата
	|			ИЛИ 
	|			ЗатратыНаВыпуск.Затрата = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И НезавершенноеПроизводство.Затрата = Неопределено
	|			)
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = НезавершенноеПроизводство.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты = НезавершенноеПроизводство.СерияЗатраты
	|		
	|		И (ЗатратыНаВыпуск.ПодразделениеНЗП = НезавершенноеПроизводство.Подразделение
	|			ИЛИ 
	|			ЗатратыНаВыпуск.Подразделение = НезавершенноеПроизводство.Подразделение
	|			//ДляУпрУчета И ЗатратыНаВыпуск.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			//ДляРеглУчета И ЗатратыНаВыпуск.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			)
	|		
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = НезавершенноеПроизводство.НоменклатурнаяГруппа
	|		И ЗатратыНаВыпуск.ЗаказНЗП = НезавершенноеПроизводство.Заказ
	|		//ДляРеглУчета И ЗатратыНаВыпуск.СчетУчета = НезавершенноеПроизводство.СчетУчета
	|		//ДляРеглУчета И ЗатратыНаВыпуск.НалоговоеНазначение = НезавершенноеПроизводство.НалоговоеНазначение 
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&КонГраница,
	|			//ДляРеглУчета Организация = &Организация
	|		) КАК НезавершенноеПроизводствоАналитикаНЗП
	|	ПО  
	|		НезавершенноеПроизводство.СтатьяЗатрат ЕСТЬ NULL
	|		И ЗатратыНаВыпуск.СтатьяЗатрат = НезавершенноеПроизводствоАналитикаНЗП.СтатьяЗатрат
	|		И (ЗатратыНаВыпуск.Затрата = НезавершенноеПроизводствоАналитикаНЗП.Затрата
	|			ИЛИ 
	|			ЗатратыНаВыпуск.Затрата = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И НезавершенноеПроизводствоАналитикаНЗП.Затрата = Неопределено
	|			)
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = НезавершенноеПроизводствоАналитикаНЗП.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты = НезавершенноеПроизводствоАналитикаНЗП.СерияЗатраты
	|		
	|		И (ЗатратыНаВыпуск.ПодразделениеНЗП = НезавершенноеПроизводствоАналитикаНЗП.Подразделение
	|			ИЛИ 
	|			ЗатратыНаВыпуск.Подразделение = НезавершенноеПроизводствоАналитикаНЗП.Подразделение
	|			//ДляУпрУчета И ЗатратыНаВыпуск.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			//ДляРеглУчета И ЗатратыНаВыпуск.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			)
	|		
	|		И (ЗатратыНаВыпуск.НоменклатурнаяГруппа = НезавершенноеПроизводствоАналитикаНЗП.НоменклатурнаяГруппа
	|			И ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|			)
	|		
	|		И (ЗатратыНаВыпуск.Заказ = НезавершенноеПроизводствоАналитикаНЗП.Заказ
	|			И ЗатратыНаВыпуск.ЗаказНЗП = Неопределено
	|			)
	|		//ДляРеглУчета И ЗатратыНаВыпуск.СчетУчета = НезавершенноеПроизводствоАналитикаНЗП.СчетУчета
	|		//ДляРеглУчета И ЗатратыНаВыпуск.НалоговоеНазначение = НезавершенноеПроизводствоАналитикаНЗП.НалоговоеНазначение 
	|		
	|ГДЕ
	|	ВыпускПродукции.КоличествоРасход <> 0
	|	И ЗатратыНаВыпуск.КоличествоРасход = 0
	|	И ЗатратыНаВыпуск.СуммаРасход = 0
	|	//ДляРеглУчета И ЗатратыНаВыпуск.СуммаНУРасход = 0
	|	//ДляРеглУчета И ЗатратыНаВыпуск.НДСВходящийРасход = 0
	|	//ДляРеглУчета И ЗатратыНаВыпуск.НДСКредитРасход = 0
	|	И (Не НезавершенноеПроизводство.СтатьяЗатрат ЕСТЬ NULL
	|		ИЛИ Не НезавершенноеПроизводствоАналитикаНЗП.СтатьяЗатрат ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.Заказ,
	|
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	//ДляРеглУчета ЗатратыНаВыпуск.НалоговоеНазначение,	
	|	
	|	ЗатратыНаВыпуск.ПодразделениеНЗП,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоЗатратамНаВыпускНаработка()

// Процедура устанавливает параметры запроса по производственным затратам.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	Запрос - Запрос
//
Процедура УстановитьПараметрыЗапросаПоНаработке(
	СтруктураШапкиДокумента,
	Запрос
	)
	
	Запрос.УстановитьПараметр("НачДата",    СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата",    СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	МассивИсключаемыхКодовОпераций = Новый Массив;
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивИсключаемыхКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	Запрос.УстановитьПараметр("ИсключаемыеКодыОпераций", МассивИсключаемыхКодовОпераций);
	
КонецПроцедуры // УстановитьПараметрыЗапросаПоНаработке()

// Функция формирует запрос по регистру "Затраты на выпуск (наработка)".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//
// Возвращаемое значение:
//	Запрос - Запрос по регистру "Затраты на выпуск (наработка)".
//
Функция СформироватьЗапросПоЗатратамНаВыпускНаработка(
	СтруктураШапкиДокумента
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоЗатратамНаВыпускНаработка();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями,
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапросаПоНаработке(
		СтруктураШапкиДокумента,
		Запрос
	);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоЗатратамНаВыпускНаработка()

// Функция формирует текст запроса по регистру "Выпуск продукции".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииДоделка()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.ДокументВыпуска,
	|	СУММА(ВыпускПродукции.Количество) КАК Количество
	|
	|ПОМЕСТИТЬ ВыпускПродукцииДоделка
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И Не ВыпускПродукции.КодОперации В (&ИсключаемыеКодыОпераций)
	|	И ВыпускПродукции.КоличествоДоделка <> 0
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.ДокументВыпуска
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииДоделка()

// Процедура формирует временную таблицу "Выпуск продукции доделка".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//
Процедура СформироватьВременнуюТаблицуВыпускуПродукцииДоделка(
	СтруктураШапкиДокумента,
	МенеджерВременныхТаблиц
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоВыпускуПродукцииДоделка();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями,
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаПоНаработке(
		СтруктураШапкиДокумента,
		Запрос
	);
	
	Запрос.Выполнить();
	
КонецПроцедуры // СформироватьВременнуюТаблицуВыпускуПродукцииДоделка()

// Функция формирует текст запроса по временной таблице.
//
// Возвращаемое значение:
//	Запрос – Запроса по выборке выпуска продукции
//
Функция СформироватьЗапросПоВыборкеВыпускаПродукции(
	МенеджерВременныхТаблиц
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.ДокументВыпуска,
	|	ВыпускПродукции.Количество
	|ИЗ
	|	ВыпускПродукцииДоделка КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.Подразделение = &Подразделение
	|	И ВыпускПродукции.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	|	И ВыпускПродукции.Заказ = &Заказ
	|	И ВыпускПродукции.Продукция = &Продукция
	|	И ВыпускПродукции.ХарактеристикаПродукции = &ХарактеристикаПродукции
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.ДокументВыпуска
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоВыборкеВыпускаПродукции()

// Процедура устанавливает параметры запроса по выборке выпуска продукции.
//
// Параметры:
//	ВыборкаПоЗатратам - ВыборкаИзРезультатаЗапроса - Строка выборки
//	ЗапросПоВыпуску - ВыборкаИзРезультатаЗапроса - Строка выборки
//
Процедура УстановитьПараметрыЗапросаПоВыборкеВыпускаПродукции(
	ВыборкаПоЗатратам,
	ЗапросПоВыпуску
	)
	
	ЗапросПоВыпуску.УстановитьПараметр("Подразделение", ВыборкаПоЗатратам.Подразделение);
	ЗапросПоВыпуску.УстановитьПараметр("НоменклатурнаяГруппа", ВыборкаПоЗатратам.НоменклатурнаяГруппа);
	ЗапросПоВыпуску.УстановитьПараметр("Заказ", ВыборкаПоЗатратам.Заказ);
	ЗапросПоВыпуску.УстановитьПараметр("Продукция", ВыборкаПоЗатратам.Продукция);
	ЗапросПоВыпуску.УстановитьПараметр("ХарактеристикаПродукции", ВыборкаПоЗатратам.ХарактеристикаПродукции);
	
КонецПроцедуры // УстановитьПараметрыЗапросаПоВыборкеВыпускаПродукции()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ "ЗАТРАТЫ НА ВЫПУСК ПРОДУКЦИИ" И "ЗАТРАТЫ НА ВЫПУСК ПРОДУКЦИИ (НАРАБОТКА)"

// Процедура формирует движение по распределению затрат по регистру "Затраты на выпуск продукции (наработка)".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  Количество - Число - Количество затрат
//  Сумма - Число - Сумма затрат
//	НаборЗаписейЗатратыНаВыпускНаработка - ТаблицаЗначений - Таблица движений регистра накопления "Затраты на выпуск (наработка)".
//
Процедура СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработкаРасход(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Количество,
	Сумма,
	СуммаНУ,
	НДСВходящий,
	НДСКредит,
	НаборЗаписейЗатратыНаВыпускНаработка
	)
	
	Если Количество = 0
	   И Сумма = 0 
	   И СуммаНУ = 0 
	   И НДСВходящий = 0 
	   И НДСКредит = 0 
	   
	   Тогда
	   
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты на выпуск (наработка)" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//
	// Измерения и реквизиты:
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или международном учете,
	//	- НоменклатурнаяГруппа,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции,
	//	- Заказ,
	//
	//	- СтатьяЗатрат,
	//	- Затрата,
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты,
	
	НоваяСтрока = НаборЗаписейЗатратыНаВыпускНаработка.Добавить();
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	НоваяСтрока.ПодразделениеНЗП = СтрокаВыборки.ЗатратыПодразделениеНЗП;
	НоваяСтрока.НоменклатурнаяГруппаНЗП = СтрокаВыборки.ЗатратыНоменклатурнаяГруппаНЗП;
	НоваяСтрока.ЗаказНЗП = СтрокаВыборки.ЗатратыЗаказНЗП;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Сумма = Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СуммаНУ = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначение, СуммаНУ);
		НоваяСтрока.НДСВходящий = НДСВходящий;
		НоваяСтрока.НДСКредит = НДСКредит;
	КонецЕсли; 
	 
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыНаВыпускНаработка.Количество() = 1000 Тогда
		НаборЗаписейЗатратыНаВыпускНаработка.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработкаРасход()

// Процедура формирует движение по распределению затрат по регистру "Затраты на выпуск продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиБаза - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	РаспределениеЗатратПоБазе - Булево - Признак вызова процедуры при распределении затрат по базе
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска"
//  Количество - Число - Количество затрат
//  Сумма - Число - Сумма затрат
//	НаборЗаписейЗатратыНаВыпуск - ТаблицаЗначений - Таблица движений регистра накопления "Затраты на выпуск".
//
Процедура СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииСписаниеНаработки(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтрокаВыборкиВыпуск,
	Количество,
	Сумма,
	СуммаНУ,
	НДСВходящий,
	НДСКредит,
	НаборЗаписейЗатратыНаВыпуск
	)
	
	Если Количество = 0
	   И Сумма = 0 
	   И СуммаНУ = 0 
	   И НДСВходящий = 0 
	   И НДСКредит = 0 
	   Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты на выпуск" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//
	// Измерения и реквизиты, заполняемые по распределенным затратам:
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или международном учете,
	//	- НалоговоеНазначение - заполняется только при отражении документа в бухгалтерском учете,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//
	//	- СтатьяЗатрат,
	//	- Затрата,
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты,
	//	- НоменклатурнаяГруппаНЗП,
	//	- ЗаказНЗП,
	//	- ПодразделениеНЗП,
	//
	// Измерения и реквизиты, заполняемые по выпуску продукции:
	//	- СерияПродукции,
	//	- Спецификация,
	//	- ДокументВыпуска
	
	НоваяСтрока = НаборЗаписейЗатратыНаВыпуск.Добавить();
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	НоваяСтрока.СерияПродукции = СтрокаВыборкиВыпуск.СерияПродукции;
	НоваяСтрока.Спецификация = СтрокаВыборкиВыпуск.Спецификация;
	НоваяСтрока.ДокументВыпуска = СтрокаВыборкиВыпуск.ДокументВыпуска;
	
	Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы Тогда
		КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты;
	Иначе
		КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты;
	КонецЕсли;
	НоваяСтрока.КодОперации = КодОперации;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Сумма = Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СуммаНУ = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначение, СуммаНУ);
		НоваяСтрока.НДСВходящий = НДСВходящий;
		НоваяСтрока.НДСКредит = НДСКредит;
	КонецЕсли; 
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыНаВыпуск.Количество() = 1000 Тогда
		НаборЗаписейЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииСписаниеНаработки()

////////////////////////////////////////////////////////////////////////////////

// Функция проверяет было ли выполнено списание затрат на выпуск по наработке в текущем месяце.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//
// Возвращаемое значение:
//	Булево - Признак что было выполнено списание затрат по наработке
//
Функция ВыполненоСписаниеЗатратНаВыпускНаработка(СтруктураШапкиДокумента)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Истина КАК ВыполненоСписание
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукцииНаработка%СуффиксУчета% КАК ЗатратыНаВыпуск
	|ГДЕ
	|	ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|	И ЗатратыНаВыпуск.Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска
	|	И ЗатратыНаВыпуск.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	//ДляРеглУчета И Организация = &Организация
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапроса, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	РезультатЗапроса = запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции // ВыполненоСписаниеЗатратНаВыпускНаработка()

// Процедура производит распределение затрат на выпуск по наработке.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат выполнения запроса по затратам
//	ЗапросПоВыпуску - Запрос - Запрос по выборке выпуска продукции
//	НаборЗаписейЗатратыНаВыпуск - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск продукции"
//	НаборЗаписейЗатратыНаВыпускНаработка - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск продукции (наработка)"
//
Процедура РаспределитьЗатратыНаВыпускНаработка(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	ЗапросПоВыпуску,
	НаборЗаписейЗатратыНаВыпуск,
	НаборЗаписейЗатратыНаВыпускНаработка
	)
	
	МассивКоэф = Новый Массив;
	
	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		Количество = ВыборкаПоЗатратам.Количество;
		Сумма = ВыборкаПоЗатратам.Сумма;
		КоэффициентРасхода = ВыборкаПоЗатратам.КоэффициентРасхода;
		КоэффициентРасхода = ?(КоэффициентРасхода > 1, 1, КоэффициентРасхода);
		
		КоличествоРасход = Количество * КоэффициентРасхода;
		СуммаРасход = Сумма * КоэффициентРасхода;
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СуммаНУРасход = ВыборкаПоЗатратам.СуммаНУ * КоэффициентРасхода;
			НДСВходящийРасход = ВыборкаПоЗатратам.НДСВходящий * КоэффициентРасхода;
			НДСКредитРасход = ВыборкаПоЗатратам.НДСКредит * КоэффициентРасхода;
		Иначе
			СуммаНУРасход = 0;
			НДСВходящийРасход = 0;
			НДСКредитРасход = 0;
		КонецЕсли; 
		
		УстановитьПараметрыЗапросаПоВыборкеВыпускаПродукции(
			ВыборкаПоЗатратам,
			ЗапросПоВыпуску
		);
		РезультатаЗапросаПоВыпуску = ЗапросПоВыпуску.Выполнить();
		
		МассивКоэф.Очистить();
		
		ВыборкаПоВыпуску = РезультатаЗапросаПоВыпуску.Выбрать();
		Пока ВыборкаПоВыпуску.Следующий() Цикл
			МассивКоэф.Добавить(ВыборкаПоВыпуску.Количество);
		КонецЦикла;
		
		МассивКоличество = ОбщегоНазначения.РаспределитьПропорционально(КоличествоРасход, МассивКоэф, 3);
		МассивСумма      = ОбщегоНазначения.РаспределитьПропорционально(СуммаРасход, МассивКоэф, 2);
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСуммаНУ     = ОбщегоНазначения.РаспределитьПропорционально(СуммаНУРасход, МассивКоэф, 2);
			МассивНДСВходящий = ОбщегоНазначения.РаспределитьПропорционально(НДСВходящийРасход, МассивКоэф, 2);
			МассивНДСКредит   = ОбщегоНазначения.РаспределитьПропорционально(НДСКредитРасход, МассивКоэф, 2);
		Иначе
			МассивСуммаНУ     = Неопределено;
			МассивНДСВходящий = Неопределено;
			МассивНДСКредит   = Неопределено;
		КонецЕсли;	
		
		СписаноКоличество = 0;
		СписаноСумма = 0;
		СписаноСуммаНУ = 0;
		СписаноНДСВходящий = 0;
		СписаноНДСКредит = 0;
		
		Индекс = 0;
		ВыборкаПоВыпуску.Сбросить();
		Пока ВыборкаПоВыпуску.Следующий() Цикл
			
			Количество = ?(МассивКоличество = Неопределено, 0, МассивКоличество[Индекс]);
			Сумма      = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			СуммаНУ      = ?(МассивСуммаНУ = Неопределено, 0, МассивСуммаНУ[Индекс]);
			НДСВходящий      = ?(МассивНДСВходящий = Неопределено, 0, МассивНДСВходящий[Индекс]);
			НДСКредит       = ?(МассивНДСКредит = Неопределено, 0, МассивНДСКредит[Индекс]);
			
			// Формирование движений по регистру "Затраты на выпуск".
			СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииСписаниеНаработки(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ВыборкаПоВыпуску,
				Количество,
				Сумма,
				СуммаНУ,
				НДСВходящий,
				НДСКредит,
				НаборЗаписейЗатратыНаВыпуск
			);
			
			СписаноКоличество = СписаноКоличество + Количество;
			СписаноСумма = СписаноСумма + Сумма;
			СписаноСуммаНУ = СписаноСуммаНУ + СуммаНУ;
			СписаноНДСВходящий = СписаноНДСВходящий + НДСВходящий;
			СписаноНДСКредит = СписаноНДСКредит + НДСКредит;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		// Формирование движений расход по регистру "Затраты на выпуск (наработка)".
		СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработкаРасход(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			СписаноКоличество,
			СписаноСумма,
			СписаноСуммаНУ,
			СписаноНДСВходящий,
			СписаноНДСКредит,
			НаборЗаписейЗатратыНаВыпускНаработка
		);
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьЗатратыНаВыпускНаработка()

// Процедура производит списание затрат на выпуск по наработке.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//
Процедура СписаниеЗатратНаВыпускНаработка(
	СтруктураШапкиДокумента
	) Экспорт
	
	// Списание затрат по наработке выполняем только один раз.
	Если ВыполненоСписаниеЗатратНаВыпускНаработка(СтруктураШапкиДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СформироватьВременнуюТаблицуВыпускуПродукцииДоделка(
		СтруктураШапкиДокумента,
		МенеджерВременныхТаблиц
	);
	
	ЗапросПоВыпуску = СформироватьЗапросПоВыборкеВыпускаПродукции(МенеджерВременныхТаблиц);

	ЗапросПоЗатратам = СформироватьЗапросПоЗатратамНаВыпускНаработка(СтруктураШапкиДокумента);
	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	Если РезультатЗапросаПоЗатратам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураИмен = Новый Структура("
		|ЗатратыНаВыпускПродукции, 
		|ЗатратыНаВыпускПродукцииНаработка 
		|");
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
	
	РаспределитьЗатратыНаВыпускНаработка(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоЗатратам,
		ЗапросПоВыпуску,
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск,
		СтруктураДвижений.ДвиженияЗатратыНаВыпускНаработка
	);
	
	Если СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВМеждународномУчете
	   И СтруктураДвижений.ДвиженияЗатратыНаВыпускНаработка.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпускНаработка.Записать(Ложь);
	КонецЕсли;
			
КонецПроцедуры // СписаниеЗатратНаВыпускНаработка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ПРАВИЛЬНОСТИ РАСПРЕДЕЛЕНИЯ ПРОИЗВОДСТВЕННЫХ ЗАТРАТ

// Функция формирует запрос о прямых затратах не соответствующих выпуску продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//
// Возвращаемое значение:
//	Запрос - Запрос по затратам на выпуск.
//
Функция СформироватьЗапросПоРаспределениюЗатрат(
	СтруктураШапкиДокумента
	)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.РазрешитьКорректировкиИспользования Тогда
		// разрешаем не совпадение налоговых назначений при проверке соответствия, так как разрешаем автокоректировки при распределении
		УсловиеНалоговоеНазначение = "";
	Иначе
		УсловиеНалоговоеНазначение = " //ДляБухУчета И ((РегВыпуск.НалоговоеНазначение = РегЗатраты.НалоговоеНазначение) ИЛИ 
		| //ДляБухУчета (РегЗатраты.СтатьяЗатрат.СтатусМатериальныхЗатрат = ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку) 
		| //ДляБухУчета И РегЗатраты.НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)))
		|";
		
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РегЗатраты.Затрата,
	|	РегЗатраты.ХарактеристикаЗатраты,
	|	РегЗатраты.СерияЗатраты,
	|	РегЗатраты.Подразделение,
	|	РегЗатраты.НоменклатурнаяГруппа,
	|	РегЗатраты.СтатьяЗатрат,
	|	РегЗатраты.Продукция,
	|	РегЗатраты.ХарактеристикаПродукции,
	|	РегЗатраты.СерияПродукции,
	|	РегЗатраты.Спецификация,
	|	РегЗатраты.Заказ,
	|	//ДляРеглУчета РегЗатраты.СчетУчета,
	|	//ДляБухУчета РегЗатраты.НалоговоеНазначение,
	|
	|	СУММА(ЕСТЬNULL(РегВыпуск.КоличествоВыпуск, 0)) КАК КоличествоВыпуск,
	|	СУММА(РегЗатраты.Количество) КАК Количество,
	|	//ДляБухУчета СУММА(РегЗатраты.СуммаНУ) КАК СтоимостьНУ,
	|	//ДляБухУчета СУММА(РегЗатраты.НДСВходящий) КАК НДСВходящий,
	|	//ДляБухУчета СУММА(РегЗатраты.НДСКредит) КАК НДСКредит,
	|	СУММА(РегЗатраты.Сумма) КАК Стоимость
	|	
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК РегЗатраты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			РегВыпуск.Подразделение,
	|			РегВыпуск.Продукция,
	|			РегВыпуск.ХарактеристикаПродукции,
	|			РегВыпуск.СерияПродукции,
	|			РегВыпуск.Спецификация,
	|			РегВыпуск.НоменклатурнаяГруппа,
	|			РегВыпуск.Заказ,
	|			//ДляРеглУчета РегВыпуск.СчетУчетаНЗП,
	|			//ДляБухУчета  РегВыпуск.НалоговоеНазначение,
	|			СУММА(РегВыпуск.Количество) КАК КоличествоВыпуск
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК РегВыпуск
	|		ГДЕ
	|			РегВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|			И РегВыпуск.КодОперации <> &КодФиксСтоим
	|			//ДляРеглУчета И РегВыпуск.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			РегВыпуск.Подразделение,
	|			РегВыпуск.Продукция,
	|			РегВыпуск.ХарактеристикаПродукции,
	|			РегВыпуск.СерияПродукции,
	|			РегВыпуск.Спецификация,
	|			РегВыпуск.НоменклатурнаяГруппа,
	|			РегВыпуск.Заказ,
	|			//ДляРеглУчета РегВыпуск.СчетУчетаНЗП,
	|			//ДляБухУчета РегВыпуск.НалоговоеНазначение,
	|			РегВыпуск.Заказ
	|
	|		) КАК РегВыпуск
	|	ПО
	|		РегВыпуск.Подразделение = РегЗатраты.Подразделение
	|	 	И РегВыпуск.НоменклатурнаяГруппа = РегЗатраты.НоменклатурнаяГруппа
	|	 	И РегВыпуск.Продукция = РегЗатраты.Продукция
	|	 	И РегВыпуск.ХарактеристикаПродукции = РегЗатраты.ХарактеристикаПродукции
	|	 	И РегВыпуск.СерияПродукции = РегЗатраты.СерияПродукции
	|	 	И РегВыпуск.Спецификация = РегЗатраты.Спецификация
	|		И РегВыпуск.Заказ = РегЗатраты.Заказ
	|	 	//ДляРеглУчета И РегВыпуск.СчетУчетаНЗП = РегЗатраты.СчетУчета
	|" +  УсловиеНалоговоеНазначение  + "
	|
	|ГДЕ
	|	РегЗатраты.Период МЕЖДУ &НачДата И &КонДата
	|	И РегЗатраты.КодОперации В (&КодыОпераций)
	|	И (РегВыпуск.КоличествоВыпуск = 0 ИЛИ РегВыпуск.КоличествоВыпуск Есть NULL)
	|	И (РегЗатраты.Количество <> 0 ИЛИ РегЗатраты.Сумма <> 0
	|   //ДляБухУчета  ИЛИ РегЗатраты.СуммаНУ <> 0
	|   //ДляБухУчета  ИЛИ РегЗатраты.НДСВходящий <> 0
	|   //ДляБухУчета  ИЛИ РегЗатраты.НДСКредит <> 0
	|   )
	|	//ДляРеглУчета И РегЗатраты.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	РегЗатраты.Затрата,
	|	РегЗатраты.ХарактеристикаЗатраты,
	|	РегЗатраты.СерияЗатраты,
	|	РегЗатраты.Подразделение,
	|	РегЗатраты.Продукция,
	|	РегЗатраты.ХарактеристикаПродукции,
	|	РегЗатраты.СерияПродукции,
	|	РегЗатраты.Спецификация,
	|	РегЗатраты.ДокументВыпуска,
	|	РегЗатраты.СтатьяЗатрат,
	|	РегЗатраты.НоменклатурнаяГруппа,
	|	//ДляРеглУчета РегЗатраты.СчетУчета,
	|	//ДляБухУчета РегЗатраты.НалоговоеНазначение,
	|	РегЗатраты.Заказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегЗатраты.Затрата,
	|	РегЗатраты.ХарактеристикаЗатраты,
	|	РегЗатраты.СерияЗатраты,
	|	РегЗатраты.Подразделение,
	|	РегЗатраты.Продукция,
	|	РегЗатраты.ХарактеристикаПродукции,
	|	РегЗатраты.СерияПродукции,
	|	РегЗатраты.Спецификация,
	|	РегЗатраты.ДокументВыпуска,
	|	РегЗатраты.СтатьяЗатрат,
	|	РегЗатраты.НоменклатурнаяГруппа,
	|	//ДляРеглУчета РегЗатраты.СчетУчета,
	|	//ДляБухУчета РегЗатраты.НалоговоеНазначение,
	|	РегЗатраты.Заказ
	|
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапроса, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	МассивКодыОпераций = Новый Массив;
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты);
	Запрос.УстановитьПараметр("КодыОпераций", МассивКодыОпераций);
	
	Запрос.УстановитьПараметр("КодФиксСтоим", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоРаспределениюЗатрат()

// Процедура производит проверку соответствия распределения прямых затрат и выпуска продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//
Процедура ПроверитьПрямыеЗатраты(
	СтруктураШапкиДокумента
	) Экспорт
	
	Запрос = СформироватьЗапросПоРаспределениюЗатрат(СтруктураШапкиДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаСообщения = УправлениеЗатратами.СформироватьРасшифровкуОткрытияОтчета("АнализРаспределенияЗатрат");
	
	СтрокаГруппы = ОбщегоНазначения.Сообщение(
		"Обнаружены расхождения аналитики выпуска продукции и аналитики распределения затрат!", 
		Перечисления.ВидыСообщений.Ошибка,
		, // Заголовок
		РасшифровкаСообщения,
		, // РодительскаяСтрока
		Ложь // РаскрытьСообщение
	);
	
	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СтоимостьНУ = Обход.СтоимостьНУ;
			НДСВходящий = Обход.НДСВходящий;
			НДСКредит   = Обход.НДСКредит;
		Иначе
			СтоимостьНУ = 0;
			НДСВходящий = 0;
			НДСКредит   = 0;
		КонецЕсли; 
		
		Если Обход.Количество = 0 И Обход.Стоимость = 0 И СтоимостьНУ = 0 И НДСВходящий = 0 И НДСКредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		 
		
		Если Обход.Количество <> 0 И Обход.КоличествоВыпуск = 0 Тогда
			ОбщегоНазначения.Сообщение("Количество, распределенное на выпуск, не соответствует аналитике выпуска продукции:
				|Подразделение: " + Обход.Подразделение
				+ ?(Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, "
				|Счет учета: " + Обход.СчетУчета, "") 
				+ ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "
				|Налоговое назначение: " + Обход.НалоговоеНазначение, "")  + "
				|Продукция: " + Обход.Продукция + ", " + Обход.ХарактеристикаПродукции + ", " + Обход.СерияПродукции + "
				|Номенклатурная группа: " + 	Обход.НоменклатурнаяГруппа + "
				|Спецификация: " + 	Обход.Спецификация + "
				|Заказ: " + 	Обход.Заказ + "
				|Статья затрат: " + Обход.СтатьяЗатрат + "
				|Затрата: " + Обход.Затрата + ", " + Обход.ХарактеристикаЗатраты + ", " + Обход.СерияЗатраты + "
				|Количество: " + Обход.Количество + "
				|",
				СтатусСообщения.Важное,
				, // Заголовок
				, //РасшифровкаСообщения
				СтрокаГруппы
			);
		ИначеЕсли (Обход.Стоимость <> 0 ИЛИ СтоимостьНУ <> 0 ИЛИ НДСВходящий <> 0 ИЛИ НДСКредит <> 0 ) И Обход.КоличествоВыпуск = 0 Тогда
			ОбщегоНазначения.Сообщение("Сумма, распределенная на выпуск, не соответствует аналитике выпуска продукции:
				|Подразделение: " + Обход.Подразделение
				+?(Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, "
				|Счет учета: " + Обход.СчетУчета, "")
				+ ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "
				|Налоговое назначение: " + Обход.НалоговоеНазначение, "")  + "
				|Продукция: " + Обход.Продукция + ", " + Обход.ХарактеристикаПродукции + ", " + Обход.СерияПродукции + "
				|Номенклатурная группа: " + 	Обход.НоменклатурнаяГруппа + "
				|Спецификация: " + 	Обход.Спецификация + "
				|Заказ: " + 	Обход.Заказ + "
				|Статья затрат: " + Обход.СтатьяЗатрат + "
				|Сумма: " + Обход.Стоимость 
				+?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "
				|Сумма (НУ): " + СтоимостьНУ, "") 
				+?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "
				|НДС входящий : " + НДСВходящий, "") 
				+?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "
				|НДС кредит : " + НДСКредит, "") + "
				|",
				СтатусСообщения.Важное,
				, // Заголовок
				, //РасшифровкаСообщения
				СтрокаГруппы
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьПрямыеЗатраты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА СЕБЕСТОИМОСТИ ПО ПРЯМЫМ ЗАТРАТАМ

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРУ "НЕЗАВЕРШЕННОЕ ПРОИЗВОДСТВО"

// Функция формирует текст запроса по регистру "Незавершенное производство".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоНезавершенномуПроизводству()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	НезавершенноеПроизводство.Затрата,
	|	ЕСТЬNULL(НезавершенноеПроизводство.Затрата.ВестиУчетПоСериямВНЗП, Ложь) КАК ВестиУчетПоСериямВНЗП,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты,
	|	НезавершенноеПроизводство.Заказ,
	|
	|	ЕСТЬNULL(Распределение.ВстречныйВыпуск, Ложь) КАК ВстречныйВыпуск,
	|	
    |	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
    |	//ДляБухУчета  НезавершенноеПроизводство.НалоговоеНазначение,
	|	
	|	СУММА(НезавершенноеПроизводство.Количество) КАК Количество,
	|
	|	//ДляБухУчета СУММА(НезавершенноеПроизводство.СтоимостьНУ) КАК СтоимостьНУ,
	|	//ДляБухУчета СУММА(НезавершенноеПроизводство.НДСВходящий) КАК НДСВходящий,
	|	//ДляБухУчета СУММА(НезавершенноеПроизводство.НДСКредит)   КАК НДСКредит,
    |
    |	СУММА(НезавершенноеПроизводство.Стоимость) КАК Стоимость,
	|
	|	СУММА(НезавершенноеПроизводство.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(НезавершенноеПроизводство.КоличествоРасход) КАК КоличествоРасход,
	|	
	|	//ДляБухУчета СУММА(НезавершенноеПроизводство.СтоимостьНУОстаток) КАК СтоимостьНУОстаток,
	|	//ДляБухУчета СУММА(НезавершенноеПроизводство.НДСВходящийОстаток) КАК НДСВходящийОстаток,
	|	//ДляБухУчета СУММА(НезавершенноеПроизводство.НДСКредитОстаток)   КАК НДСКредитОстаток,
	|
    |	СУММА(НезавершенноеПроизводство.СтоимостьОстаток) КАК СтоимостьОстаток
	|	
	|ИЗ (
	|	
	|	// Остатки НЗП на начало месяца.
	|	ВЫБРАТЬ 
	|		НезавершенноеПроизводство.Подразделение,
	|		НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|		НезавершенноеПроизводство.СтатьяЗатрат,
	|		НезавершенноеПроизводство.Затрата,
	|		НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|		НезавершенноеПроизводство.СерияЗатраты,
	|		НезавершенноеПроизводство.Заказ,
	|		
    |		//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
    |		//ДляБухУчета НезавершенноеПроизводство.НалоговоеНазначение,
	|		
	|		0 КАК Количество,
	|
    |		//ДляБухУчета 0 КАК СтоимостьНУ,
    |		//ДляБухУчета 0 КАК НДСВходящий,
    |		//ДляБухУчета 0 КАК НДСКредит,
	|
    |		0 КАК Стоимость,
	|
	|		НезавершенноеПроизводство.КоличествоОстаток,
	|		0 КАК КоличествоРасход,
	|		
    |		//ДляБухУчета НезавершенноеПроизводство.СтоимостьНУОстаток,
    |		//ДляБухУчета НезавершенноеПроизводство.НДСВходящийОстаток,
    |		//ДляБухУчета НезавершенноеПроизводство.НДСКредитОстаток,
	|
    |		НезавершенноеПроизводство.СтоимостьОстаток
	|		
	|	ИЗ
	|		РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&НачДата, 
	|			Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|			И (Затрата В (&МассивЗатрат)
	|				ИЛИ Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск
	|				ИЛИ Затрата = Неопределено)
	|			//ДляРеглУчета И Организация = &Организация
	|			
	|			) КАК НезавершенноеПроизводство
	|			
	|	ОБЪЕДИНИТЬ ВСЕ		
	|		
	|	// Добавим приход в НЗП в течение месяца.
	|	ВЫБРАТЬ 
	|		НезавершенноеПроизводство.Подразделение,
	|		НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|		НезавершенноеПроизводство.СтатьяЗатрат,
	|		НезавершенноеПроизводство.Затрата,
	|		НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|		НезавершенноеПроизводство.СерияЗатраты,
	|		НезавершенноеПроизводство.Заказ,
	|		
    |		//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
    |		//ДляБухУчета  НезавершенноеПроизводство.НалоговоеНазначение,
	|		
	|		0, 
	|
    |		//ДляБухУчета 0 КАК СтоимостьНУ,
    |		//ДляБухУчета 0 КАК НДСВходящий,
    |		//ДляБухУчета 0 КАК НДСКредит,
	|
    |		0 КАК Стоимость,
	|
	|		НезавершенноеПроизводство.КоличествоПриход,
	|		0,
	|		
    |		//ДляБухУчета НезавершенноеПроизводство.СтоимостьНУПриход,
    |		//ДляБухУчета НезавершенноеПроизводство.НДСВходящийПриход,
    |		//ДляБухУчета НезавершенноеПроизводство.НДСКредитПриход,
	|
	|		НезавершенноеПроизводство.СтоимостьПриход
	|
	|	ИЗ
	|		РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Обороты(&НачГраница, &КонГраница, , 
	|			Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|			И НЕ НеУчитыватьДвиженияПриРасчетеСебестоимости
	|			И (Затрата В (&МассивЗатрат)
	|				ИЛИ Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск
	|				ИЛИ Затрата = Неопределено)
	|			//ДляРеглУчета И Организация = &Организация
	|			
	|			) КАК НезавершенноеПроизводство
	|		       	
	|	ОБЪЕДИНИТЬ ВСЕ
	|		
	|	// Вычтем возврат из НЗП.
	|	ВЫБРАТЬ 
	|		НезавершенноеПроизводство.Подразделение,
	|		НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|		НезавершенноеПроизводство.СтатьяЗатрат,
	|		НезавершенноеПроизводство.Затрата,
	|		НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|		НезавершенноеПроизводство.СерияЗатраты,
	|		НезавершенноеПроизводство.Заказ,
	|		
    |		//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
    |		//ДляБухУчета  НезавершенноеПроизводство.НалоговоеНазначение,
	|		
	|		0 КАК Количество,
	|
    |		//ДляБухУчета 0 КАК СтоимостьНУ,
    |		//ДляБухУчета 0 КАК НДСВходящий,
    |		//ДляБухУчета 0 КАК НДСКредит,
	|
    |		0 КАК Стоимость,
	|
	|		СУММА(
	|			ВЫБОР КОГДА НезавершенноеПроизводство.НомерПередела < &НомерПередела ТОГДА
	|				-НезавершенноеПроизводство.Количество
	|			ИНАЧЕ
	|				0
	|           КОНЕЦ
	|		) КАК КоличествоОстаток,
	|		СУММА(
	|			ВЫБОР КОГДА НезавершенноеПроизводство.НомерПередела = 1 ТОГДА
	|				НезавершенноеПроизводство.Количество
	|			ИНАЧЕ
	|				0
	|           КОНЕЦ
	|		) КАК КоличествоРасход,
	|		
	|
	|		//ДляБухУчета СУММА(
	|		//ДляБухУчета 	ВЫБОР КОГДА НезавершенноеПроизводство.НомерПередела < &НомерПередела ТОГДА
	|		//ДляБухУчета 		-НезавершенноеПроизводство.СтоимостьНУ
	|		//ДляБухУчета 	ИНАЧЕ
	|		//ДляБухУчета 		0
	|       //ДляБухУчета     КОНЕЦ
	|		//ДляБухУчета ),
	|
	|
	|		//ДляБухУчета СУММА(
	|		//ДляБухУчета 	ВЫБОР КОГДА НезавершенноеПроизводство.НомерПередела < &НомерПередела ТОГДА
	|		//ДляБухУчета 		-НезавершенноеПроизводство.НДСВходящий
	|		//ДляБухУчета 	ИНАЧЕ
	|		//ДляБухУчета 		0
	|       //ДляБухУчета     КОНЕЦ
	|		//ДляБухУчета ),
	|
	|
	|		//ДляБухУчета СУММА(
	|		//ДляБухУчета 	ВЫБОР КОГДА НезавершенноеПроизводство.НомерПередела < &НомерПередела ТОГДА
	|		//ДляБухУчета 		-НезавершенноеПроизводство.НДСКредит
	|		//ДляБухУчета 	ИНАЧЕ
	|		//ДляБухУчета 		0
	|       //ДляБухУчета     КОНЕЦ
	|		//ДляБухУчета ),
	|
	|		СУММА(
	|			ВЫБОР КОГДА НезавершенноеПроизводство.НомерПередела < &НомерПередела ТОГДА
	|				-НезавершенноеПроизводство.Стоимость
	|			ИНАЧЕ
	|				0
	|           КОНЕЦ
	|		)
	|
	|	ИЗ
	|		РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета% КАК НезавершенноеПроизводство
	|	ГДЕ
	|		НезавершенноеПроизводство.Период МЕЖДУ &НачДата И &КонДата
	|		И НезавершенноеПроизводство.Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|		И НезавершенноеПроизводство.ВидДвижения = &ВидДвиженияРасход
	|		И НезавершенноеПроизводство.КодОперации В (&КодыОперВозврата)
	|		И НЕ НезавершенноеПроизводство.НеУчитыватьДвиженияПриРасчетеСебестоимости
	|		И (НезавершенноеПроизводство.Затрата В (&МассивЗатрат)
	|			ИЛИ НезавершенноеПроизводство.Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск
	|			ИЛИ НезавершенноеПроизводство.Затрата = Неопределено)
	|			
	|		//ДляРеглУчета И НезавершенноеПроизводство.Организация = &Организация
	|
	|	СГРУППИРОВАТЬ ПО
	|		НезавершенноеПроизводство.Подразделение,	
    |		//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
    |		//ДляБухУчета  НезавершенноеПроизводство.НалоговоеНазначение,
	|		НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|		НезавершенноеПроизводство.СтатьяЗатрат,
	|		НезавершенноеПроизводство.Затрата,
	|		НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|		НезавершенноеПроизводство.СерияЗатраты,
	|		НезавершенноеПроизводство.Заказ
	|		
	|	// Добавим данные о затратах на выпуск.
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП = &ПустоеПодразделение ТОГДА
	|			ЗатратыНаВыпуск.Подразделение
	|		ИНАЧЕ
	|			ЗатратыНаВыпуск.ПодразделениеНЗП
	|		КОНЕЦ,
	|		ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|		ЗатратыНаВыпуск.СтатьяЗатрат,
	|		ЗатратыНаВыпуск.Затрата,
	|		ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|
	|		ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата.ВестиУчетПоСериямВНЗП ТОГДА
	|			ЗатратыНаВыпуск.СерияЗатраты
	|		ИНАЧЕ
	|			&ПустаяСерия
	|		КОНЕЦ КАК СерияЗатраты,
	|
	|		ЗатратыНаВыпуск.ЗаказНЗП,
	|			
	|		//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|		//ДляБухУчета ЗатратыНаВыпуск.НалоговоеНазначение,
	|			
	|		СУММА(ЗатратыНаВыпуск.Количество) КАК Количество,
	|
	|		//ДляБухУчета СУММА(ЗатратыНаВыпуск.СуммаНУ) КАК СуммаНУ,
	|		//ДляБухУчета СУММА(ЗатратыНаВыпуск.НДСВходящий) КАК НДСВходящий,
    |		//ДляБухУчета СУММА(ЗатратыНаВыпуск.НДСКредит) КАК НДСКредит,
	|	
	|		СУММА(ЗатратыНаВыпуск.Сумма) КАК Стоимость,
	|
	|		0,
	|		0,
	|
    |		//ДляБухУчета 0,
    |		//ДляБухУчета 0,
    |		//ДляБухУчета 0,
	|
	|		0
	|
	|	ИЗ
	|		РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|	ГДЕ
	|		ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|		И ЗатратыНаВыпуск.Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|		И ЗатратыНаВыпуск.КодОперации В (&КодыОперацийЗатратыНаВыпуск)
	|		И ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат <> &СтатусМатериальныхЗатратПринятые
	|		И (ЗатратыНаВыпуск.Затрата В (&МассивЗатрат)
	|			ИЛИ ЗатратыНаВыпуск.Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск
	|			ИЛИ ЗатратыНаВыпуск.Затрата = Неопределено)
	|		//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
	|		
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП = &ПустоеПодразделение ТОГДА
	|			ЗатратыНаВыпуск.Подразделение
	|		ИНАЧЕ
	|			ЗатратыНаВыпуск.ПодразделениеНЗП
	|		КОНЕЦ,
	|		//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|		//ДляБухУчета ЗатратыНаВыпуск.НалоговоеНазначение,
	|		ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|		ЗатратыНаВыпуск.СтатьяЗатрат,
	|		ЗатратыНаВыпуск.Затрата,
	|		ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|
	|		ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата.ВестиУчетПоСериямВНЗП ТОГДА
	|			ЗатратыНаВыпуск.СерияЗатраты
	|		ИНАЧЕ
	|			&ПустаяСерия
	|		КОНЕЦ,
	|
	|		ЗатратыНаВыпуск.ЗаказНЗП
	|		
	|	) КАК НезавершенноеПроизводство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			МИНИМУМ(Распределение.ВстречныйВыпуск) КАК ВстречныйВыпуск,
	|			Распределение.СтатьяЗатрат,
	|			Распределение.Затрата,
	|			Распределение.ХарактеристикаЗатраты,
	|			Распределение.СерияЗатраты
	|		ИЗ			
	|			РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК Распределение
	|		ГДЕ
	|			Распределение.Период МЕЖДУ &НачДата И &КонДата
	|			И Распределение.НомерПередела = &НомерПередела
	|			//ДляРеглУчета И Распределение.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			Распределение.СтатьяЗатрат,
	|			Распределение.Затрата,
	|			Распределение.ХарактеристикаЗатраты,
	|			Распределение.СерияЗатраты
	|			
	|		) КАК Распределение
	|	ПО 
	|		НезавершенноеПроизводство.Затрата = Распределение.Затрата
	|		И НезавершенноеПроизводство.ХарактеристикаЗатраты = Распределение.ХарактеристикаЗатраты
	|		И НезавершенноеПроизводство.СерияЗатраты = Распределение.СерияЗатраты
	|		И НезавершенноеПроизводство.СтатьяЗатрат = Распределение.СтатьяЗатрат
	|	
	|СГРУППИРОВАТЬ ПО
	|	НезавершенноеПроизводство.Подразделение,
	|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
    |	//ДляБухУчета  НезавершенноеПроизводство.НалоговоеНазначение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.Затрата,
	|	ЕСТЬNULL(НезавершенноеПроизводство.Затрата.ВестиУчетПоСериямВНЗП, Ложь),
	|	ЕСТЬNULL(Распределение.ВстречныйВыпуск, Ложь),
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты,
	|	НезавершенноеПроизводство.Заказ
	|	
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
    |	//ДляБухУчета  НезавершенноеПроизводство.НалоговоеНазначение,
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.Затрата,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоНезавершенномуПроизводству()

// Процедура устанавливает параметры запроса по незавершенному производству.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	Запрос - Запрос
//
Процедура УстановитьПараметрыЗапросПоНезавершенномуПроизводству(
	СтруктураШапкиДокумента,
	СпособРасчета, 
	Запрос
	) 
	
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("СтатусМатериальныхЗатратПринятые", Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку);
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.Подразделения.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	КонецЕсли;
	Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПеределам);
	Иначе
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПодразделениям);
	КонецЕсли;
	
	МассивКодыОперацийВозврата = Новый Массив;
	МассивКодыОперацийВозврата.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.ВозвратМатериаловИзПроизводстваФикс);
	МассивКодыОперацийВозврата.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс);
	МассивКодыОперацийВозврата.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеНЗПФикс);
	МассивКодыОперацийВозврата.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеНЗПРегламент);
	МассивКодыОперацийВозврата.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.РаспределениеНЗППриИспользованииАналитикиНЗП);
	Запрос.УстановитьПараметр("КодыОперВозврата", МассивКодыОперацийВозврата);
	
	МассивКодыОпераций = Новый Массив;
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗПФикс);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПФикс);
	Запрос.УстановитьПараметр("КодыОперацийЗатратыНаВыпуск", МассивКодыОпераций);
	
КонецПроцедуры // УстановитьПараметрыЗапросПоНезавершенномуПроизводству()

// Функция формирует запрос по регистру "Незавершенное производство".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//
// Возвращаемое значение:
//	Запрос - Запрос по регистру "Незавершенное производство".
//
Функция СформироватьЗапросПоНезавершенномуПроизводству(
	СтруктураШапкиДокумента,
	СпособРасчета
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоНезавершенномуПроизводству();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапросПоНезавершенномуПроизводству(
		СтруктураШапкиДокумента,
		СпособРасчета,
		Запрос
		);
		
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоНезавершенномуПроизводству()()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРУ "ЗАТРАТЫ НА ВЫПУСК"

// Функция формирует текст запроса по регистру "Затраты на выпуск".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоЗатратамНаВыпуск(СтруктураШапкиДокумента)
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	//ДляБухУчета  ЗатратыНаВыпуск.НалоговоеНазначение,        // налоговое назначение затрат в ЗатратыНаВыпуск
	|	//ДляБухУчета  ЗатратыНаВыпуск.НалоговоеНазначениеПоФакту, // налоговое назначение выпущенной продукции в ЗатратыНаВыпуск
	|	
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|	ЗатратыНаВыпуск.СерияПродукции,
	|	ЗатратыНаВыпуск.Спецификация,
	|	ЗатратыНаВыпуск.Заказ,
	|	ЗатратыНаВыпуск.ДокументВыпуска,
	|	ЗатратыНаВыпуск.КодОперации,
	|	
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	ЗатратыНаВыпуск.Затрата,
	|	
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	ЗатратыНаВыпуск.ПодразделениеНЗП,
	|	
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП = &ПустоеПодразделение ТОГДА
	|		ЗатратыНаВыпуск.Подразделение
	|	ИНАЧЕ
	|		ЗатратыНаВыпуск.ПодразделениеНЗП
	|	КОНЕЦ КАК ПодразделениеСписанияНЗП,
	|
	|	Распределение.КорректировкаНЗП,
	|	Распределение.ОприходованиеНЗП,
	|	Распределение.ВозвратИзНЗП,
	|
	|	ЕСТЬNULL(Распределение.ВстречныйВыпуск, Ложь) КАК ВстречныйВыпуск,
	|	ЕСТЬNULL(РегистрВстречныйВыпуск.ВстречныйВыпуск, Ложь) КАК ЗатратаВстречногоВыпуска,
	|	ЕСТЬNULL(ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура, Ложь) КАК ЕстьИсключаемаяНоменклатура,
	|	
	|	ЕСТЬNULL(ВыпускПродукции.ЕстьВыпускПродукции, Ложь) КАК ЕстьВыпускПродукции,
	|	
	|	//ДляБухУчета СУММА(ЗатратыНаВыпуск.СуммаНУ) КАК СтоимостьНУ,
	|	//ДляБухУчета СУММА(ЗатратыНаВыпуск.НДСВходящий) КАК НДСВходящий,
	|	//ДляБухУчета СУММА(ЗатратыНаВыпуск.НДСКредит) КАК НДСКредит,
	|
	|	СУММА(ЗатратыНаВыпуск.Сумма) КАК Стоимость,
	|	СУММА(ЗатратыНаВыпуск.Количество) КАК Количество
	|	
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			МИНИМУМ(Распределение.КорректировкаНЗП) КАК КорректировкаНЗП,
	|			МИНИМУМ(Распределение.ОприходованиеНЗП) КАК ОприходованиеНЗП,
	|			МИНИМУМ(Распределение.ВозвратИзНЗП) КАК ВозвратИзНЗП,
	|			МИНИМУМ(Распределение.ВстречныйВыпуск) КАК ВстречныйВыпуск,
	|			
	|			Распределение.Подразделение,
	|			Распределение.НоменклатурнаяГруппа,
	|			Распределение.СтатьяЗатрат,
	|			Распределение.Затрата,
	|			Распределение.ХарактеристикаЗатраты,
	|			Распределение.СерияЗатраты
	|		ИЗ			
	|			РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК Распределение
	|		ГДЕ
	|			Распределение.Период МЕЖДУ &НачДата И &КонДата
	|			И Распределение.НомерПередела = &НомерПередела
	|			//ДляРеглУчета И Распределение.Организация = &Организация
	|			
	|		СГРУППИРОВАТЬ ПО
	|			Распределение.Подразделение,
	|			Распределение.НоменклатурнаяГруппа,
	|			Распределение.СтатьяЗатрат,
	|			Распределение.Затрата,
	|			Распределение.ХарактеристикаЗатраты,
	|			Распределение.СерияЗатраты
	|		) КАК Распределение
	|	ПО 
	|		ЗатратыНаВыпуск.Подразделение = Распределение.Подразделение
	|		И ЗатратыНаВыпуск.Затрата = Распределение.Затрата
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = Распределение.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты = Распределение.СерияЗатраты
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппа = Распределение.НоменклатурнаяГруппа
	|		И ЗатратыНаВыпуск.СтатьяЗатрат = Распределение.СтатьяЗатрат
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ВстречныйВыпускПродукции.Продукция,
	|			ВстречныйВыпускПродукции.Затрата,
	|			Истина КАК ВстречныйВыпуск
	|		ИЗ
	|			РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, 
	|				) КАК ВстречныйВыпускПродукции
	|		ГДЕ
	|			ВстречныйВыпускПродукции.СпособОценкиСтоимости = &СпособОценкиСтоимости
	|			И ВстречныйВыпускПродукции.Затрата В (
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВыпускПродукции.Продукция
	|				ИЗ
	|					РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|				ГДЕ
	|					ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|					И ВыпускПродукции.КодОперации <> &ВыпускПродукцииПоФиксированнойСтоимости
	|					//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|				)
	|				
	|		) КАК РегистрВстречныйВыпуск
	|	ПО
	|		ЗатратыНаВыпуск.Затрата = РегистрВстречныйВыпуск.Затрата
	|		И ЗатратыНаВыпуск.Продукция = РегистрВстречныйВыпуск.Продукция
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ИсключаемаяНоменклатура.Номенклатура,
	|			ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры,
	|			ИсключаемаяНоменклатура.СерияНоменклатуры,
	|			Истина КАК ЕстьИсключаемаяНоменклатура
	|		ИЗ
	|			РегистрСведений.НоменклатураИсключаемаяИзБазыРаспределения%СуффиксОрганизаций% КАК ИсключаемаяНоменклатура
	|		ГДЕ
	|			ИсключаемаяНоменклатура.Период МЕЖДУ &НачДата И &КонДата
	|			И (&РасчетКосвенныхЗатрат ИЛИ &РасчетЗатратВстречногоВыпуска)
	|			//ДляРеглУчета И ИсключаемаяНоменклатура.Организация = &Организация
	|		) КАК ИсключаемаяНоменклатура
	|	ПО
	|		ЗатратыНаВыпуск.Продукция = ИсключаемаяНоменклатура.Номенклатура
	|		И ЗатратыНаВыпуск.ХарактеристикаПродукции = ИсключаемаяНоменклатура.ХарактеристикаНоменклатуры
	|		И ЗатратыНаВыпуск.СерияПродукции = ИсключаемаяНоменклатура.СерияНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВыпускПродукции.Подразделение,
	|			ВыпускПродукции.Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции,
	|			ВыпускПродукции.СерияПродукции,
	|			ВыпускПродукции.Спецификация,
	|			ВыпускПродукции.НоменклатурнаяГруппа,
	|			ВыпускПродукции.Заказ,
	|			//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|			//ДляБухУчета ВыпускПродукции.НалоговоеНазначение,
	|			ВыпускПродукции.Заказ,
	|			Истина КАК ЕстьВыпускПродукции
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|		ГДЕ
	|			ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|			И ВыпускПродукции.КодОперации <> &ВыпускПродукцииПоФиксированнойСтоимости
	|			//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|		
	|		) КАК ВыпускПродукции
	|	ПО
	|		ВыпускПродукции.Подразделение = ЗатратыНаВыпуск.Подразделение
	|	 	И ВыпускПродукции.НоменклатурнаяГруппа = ЗатратыНаВыпуск.НоменклатурнаяГруппа
	|	 	И ВыпускПродукции.Продукция = ЗатратыНаВыпуск.Продукция
	|	 	И ВыпускПродукции.ХарактеристикаПродукции = ЗатратыНаВыпуск.ХарактеристикаПродукции
	|	 	И ВыпускПродукции.СерияПродукции = ЗатратыНаВыпуск.СерияПродукции
	|	 	И ВыпускПродукции.Спецификация = ЗатратыНаВыпуск.Спецификация
	|		И ВыпускПродукции.Заказ = ЗатратыНаВыпуск.Заказ
	|	 	//ДляРеглУчета И ВыпускПродукции.СчетУчетаНЗП = ЗатратыНаВыпуск.СчетУчета
	|	 	//ДляБухУчета И ВыпускПродукции.НалоговоеНазначение = ЗатратыНаВыпуск.НалоговоеНазначениеПоФакту 
	|
	|ГДЕ
	|	ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|	И ЗатратыНаВыпуск.КодОперации В (&КодыОпераций)
	|	
	|	//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
	|	
	|	И ( (Распределение.КорректировкаНЗП
	|	     И ЗатратыНаВыпуск.КодОперации В (&КодыОперацииКорректировка))
	|	   ИЛИ (Не Распределение.КорректировкаНЗП
	|	    И Не ЗатратыНаВыпуск.КодОперации В (&КодыОперацииКорректировка)) )
	|	
	|	И ( (Распределение.ВозвратИзНЗП
	|	     И ЗатратыНаВыпуск.КодОперации В (&КодыОперацииВозврат))
	|	   ИЛИ (Не Распределение.ВозвратИзНЗП
	|	    И Не ЗатратыНаВыпуск.КодОперации В (&КодыОперацииВозврат)) )
	|	
	|	И ( (Распределение.ОприходованиеНЗП
	|	     И ЗатратыНаВыпуск.КодОперации В (&КодыОперацииОприходованиеНЗП))
	|	   ИЛИ (Не Распределение.ОприходованиеНЗП
	|	    И Не ЗатратыНаВыпуск.КодОперации В (&КодыОперацииОприходованиеНЗП)) )
	|	
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	//ДляБухУчета  ЗатратыНаВыпуск.НалоговоеНазначение,
	|	//ДляБухУчета  ЗатратыНаВыпуск.НалоговоеНазначениеПоФакту,
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|	ЗатратыНаВыпуск.СерияПродукции,
	|	ЗатратыНаВыпуск.Спецификация,
	|	ЗатратыНаВыпуск.Заказ,
	|	ЗатратыНаВыпуск.ДокументВыпуска,
	|	ЗатратыНаВыпуск.КодОперации,
	|	
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	ЗатратыНаВыпуск.ПодразделениеНЗП,
	|	
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП = &ПустоеПодразделение ТОГДА
	|		ЗатратыНаВыпуск.Подразделение
	|	ИНАЧЕ
	|		ЗатратыНаВыпуск.ПодразделениеНЗП
	|	КОНЕЦ,
	|
	|	Распределение.КорректировкаНЗП,
	|	Распределение.ОприходованиеНЗП,
	|	Распределение.ВозвратИзНЗП,
	|	
	|	ЕСТЬNULL(Распределение.ВстречныйВыпуск, Ложь),
	|	ЕСТЬNULL(РегистрВстречныйВыпуск.ВстречныйВыпуск, Ложь),
	|	ЕСТЬNULL(ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура, Ложь),
	|	
	|	ЕСТЬNULL(ВыпускПродукции.ЕстьВыпускПродукции, Ложь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
	|	//ДляРеглУчета ЗатратыНаВыпуск.СчетУчета,
	|	//ДляБухУчета  ЗатратыНаВыпуск.НалоговоеНазначение,
	|	//ДляБухУчета  ЗатратыНаВыпуск.НалоговоеНазначениеПоФакту,
	|	ПодразделениеСписанияНЗП,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	ЕСТЬNULL(ИсключаемаяНоменклатура.ЕстьИсключаемаяНоменклатура, Ложь) Убыв,
	|
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|	ЗатратыНаВыпуск.СерияПродукции,
	|	ЗатратыНаВыпуск.Спецификация,
	|	ЗатратыНаВыпуск.Заказ,
	|	ЗатратыНаВыпуск.ДокументВыпуска,
	|	ЗатратыНаВыпуск.КодОперации
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоЗатратамНаВыпуск()

// Процедура устанавливает параметры запроса по затратам на выпуск.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	Запрос - Запрос
//
Процедура УстановитьПараметрыЗапросПоЗатратамНаВыпуск(
	СтруктураШапкиДокумента,
	СпособРасчета, 
	Запрос
	)
	
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("СпособОценкиСтоимости", 	Перечисления.СпособыОценкиСтоимостиВстречногоВыпуска.ПоРасчетнойСтоимости);
	Запрос.УстановитьПараметр("СтатусМатериальныхЗатратПринятые", Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку);
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.Подразделения.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	КонецЕсли;
	
	Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПеределам);
	Иначе
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПодразделениям);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВыпускПродукцииПоФиксированнойСтоимости", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	
	МассивКодыОпераций = Новый Массив;
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗПФикс);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПФикс);
	Запрос.УстановитьПараметр("КодыОпераций", МассивКодыОпераций);
	
	МассивКодовОперацийКорректировка = Новый Массив;
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч);
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПФикс);
	Запрос.УстановитьПараметр("КодыОперацииКорректировка", МассивКодовОперацийКорректировка);
	
	МассивКодовОперацийКорректировка = Новый Массив;
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП);
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗПФикс);
	Запрос.УстановитьПараметр("КодыОперацииВозврат", МассивКодовОперацийКорректировка);
	
	МассивКодовОперацийОприходованиеНЗП = Новый Массив;
	МассивКодовОперацийОприходованиеНЗП.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП);
	Запрос.УстановитьПараметр("КодыОперацииОприходованиеНЗП", МассивКодовОперацийОприходованиеНЗП);
	
	
КонецПроцедуры // УстановитьПараметрыЗапросПоЗатратамНаВыпуск()

// Функция формирует запрос по регистру "Затраты на выпуск".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//
// Возвращаемое значение:
//	Запрос - Запрос по регистру "Затраты на выпуск".
//
Функция СформироватьЗапросПоЗатратамНаВыпуск(
	СтруктураШапкиДокумента,
	СпособРасчета
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоЗатратамНаВыпуск(СтруктураШапкиДокумента);
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапросПоЗатратамНаВыпуск(
		СтруктураШапкиДокумента,
		СпособРасчета,
		Запрос
		);
		
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоНезавершенномуПроизводству()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА СУММ СПИСАНИЯ ЗАТРАТ

// Процедура выводить сообщение о превышении количества остатка в НЗП.
//
// Параметры
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	КоличествоСписано - Число - Количество затрат списания на выпуск
//	КоличествоОстаток - Число - Остаток затрат в незавершенном производстве
//
Процедура ВывестиСообщениеОПревышенииКоличестваОстаткаНЗП(
	СтрокаВыборки,
	КоличествоСписано,
	КоличествоОстаток,
	СтруктураШапкиДокумента
	)
	
	РасшифровкаСообщения = УправлениеЗатратами.СформироватьРасшифровкуОткрытияОтчета("АнализРаспределенияПроизводственныхЗатрат");
	
	СтрокаНалоговоеНазначение = "";
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда   
		СтрокаНалоговоеНазначение = "
		|Налоговое назначение: " + СтрокаВыборки.НалоговоеНазначениеПоФакту;
	КонецЕсли; 
	
	ОбщегоНазначения.Сообщение("
		|Количество списываемое из производства, превышает остаток в НЗП:
		|Подразделение: " + СтрокаВыборки.Подразделение + "
		|Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + "
		|Статья затрат: " + СтрокаВыборки.СтатьяЗатрат + "
		|Затрата: " + СтрокаВыборки.Затрата + ", " 
			+ СтрокаВыборки.ХарактеристикаЗатраты + ", " + СтрокаВыборки.СерияЗатраты + "
		|Заказ: " + СтрокаВыборки.Заказ + СтрокаНалоговоеНазначение + "
		|Код операции: " + СтрокаВыборки.КодОперации + "
		|Количество списания: " + КоличествоСписано + ", остаток НЗП: " + КоличествоОстаток + "
		|",
		СтатусСообщения.Важное,
		, // Заголовок
		РасшифровкаСообщения
	);
	
КонецПроцедуры // ВывестиСообщениеОПревышенииКоличестваОстаткаНЗП()

// Процедура выводить сообщение о превышении суммы остатка в НЗП.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	СуммаСписано - Число - Сумма затрат списания на выпуск
//	СуммаОстаток - Число - Сумма остаток затрат в незавершенном производстве
//
Процедура ВывестиСообщениеОПревышенииСуммыОстаткаНЗП(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СуммаСписано,
	СуммаОстаток
	)
	
	РасшифровкаСообщения = УправлениеЗатратами.СформироватьРасшифровкуОткрытияОтчета("АнализРаспределенияПроизводственныхЗатрат");
	
	СтрокаНалоговоеНазначение = "";
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда   
		СтрокаНалоговоеНазначение = "
		|Налоговое назначение: " + СтрокаВыборки.НалоговоеНазначениеПоФакту;
	КонецЕсли; 
	
	ОбщегоНазначения.Сообщение("
		|Сумма списываемая из производства, превышает остаток в НЗП:
		|Подразделение: " + СтрокаВыборки.Подразделение + "
		|Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + "
		|Статья затрат: " + СтрокаВыборки.СтатьяЗатрат + "
		|Способ распределения: " + СтрокаВыборки.Затрата + "
		|Заказ: " + СтрокаВыборки.Заказ + СтрокаНалоговоеНазначение + "
		|Код операции: " + СтрокаВыборки.КодОперации + "
		|Сумма списания: " + СуммаСписано + ", остаток НЗП: " + Окр(СуммаОстаток, 2, 1) + "
		|",
		СтатусСообщения.Важное,
		, // Заголовок
		РасшифровкаСообщения
	);
		
КонецПроцедуры // ВывестиСообщениеОПревышенииСуммыОстаткаНЗП()

// Процедура рассчитывает суммы корректировки операций по фиксированной стоимости,
// если на конец месяца остался суммовой остаток в незавершенном производстве.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	КоличествоНЗП - Число - Количество остаток незавершенного производства
//	СуммаНЗП - Число - Сумма остаток незавершенного производства
//
// Выходные параметры
//	СуммаЗатрат - Число - Сумма для отражения в затратах на выпуск
//	СписатьСуммаИзНЗП - Число - Сумма списания из незавершенного производства
//
Процедура РассчитатьСуммыКорректировкиФиксированнойСтоимости(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	КоличествоНЗП,
	СуммаНЗП,
	СуммаНУНЗП,
	НДСВходящийНЗП,
	НДСКредитНЗП,
	СуммаЗатрат,
	СуммаНУЗатрат,
	НДСВходящийЗатрат,
	НДСКредитЗатрат,
	СписатьСуммаИзНЗП,
	СписатьСуммаНУИзНЗП,
	СписатьНДСВходящийИзНЗП,
	СписатьНДСКредитИзНЗП
	)
	
	Если (СуммаНЗП <> 0 ИЛИ СуммаНУНЗП <> 0 ИЛИ НДСВходящийНЗП <> 0 ИЛИ НДСКредитНЗП <> 0) И КоличествоНЗП = 0 Тогда
			
		ОбщегоНазначения.Сообщение("Обнаружен суммовой остаток незавершенного производства.
			|Необходимо скорректировать сумму операции по фиксированной стоимости:
			|Подразделение: " + СтрокаВыборки.Подразделение + "
			|Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + "
			|Статья затрат: " + СтрокаВыборки.СтатьяЗатрат + "
			|Затрата: " + СтрокаВыборки.Затрата + ", " 
				+ СтрокаВыборки.ХарактеристикаЗатраты + ", " + СтрокаВыборки.СерияЗатраты + "
			|Заказ: " + СтрокаВыборки.Заказ + "
			|Код операции: " + СтрокаВыборки.КодОперации + "
			|Сумма корректировки: " + СуммаНЗП + "
			|Сумма (НУ) корректировки: " + СуммаНУНЗП + "
			|НДС вход.  корректировки: " + НДСВходящийНЗП + "
			|НДС кредит корректировки: " + НДСКредитНЗП + "
			|", СтатусСообщения.Важное);
			
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммыКорректировкиФиксированнойСтоимости()

// Процедура рассчитывает суммы корректировки оприходования НЗП.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	КоличествоНЗП - Число - Количество остаток незавершенного производства
//	СуммаНЗП - Число - Сумма остаток незавершенного производства
//
// Выходные параметры
//	СуммаЗатрат - Число - Сумма для отражения в затратах на выпуск
//
Процедура РассчитатьСуммыКорректировкиОприходованияНЗП(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	КоличествоНЗП,
	СуммаНЗП,
	СуммаНУНЗП,
	НДСВходящийНЗП,
	НДСКредитНЗП,
	СуммаЗатрат,
	СуммаНУЗатрат,
	НДСВходящийЗатрат,
	НДСКредитЗатрат
	)
	
	СписаноКол = СтрокаВыборки.Количество;
	
	Если КоличествоНЗП <> 0 Тогда
		СуммаЗатрат = Окр(СписаноКол * СуммаНЗП / КоличествоНЗП, 2, 1) - СтрокаВыборки.Стоимость;
	Иначе
		СуммаЗатрат = 0;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СуммаНУЗатрат 		= Окр(СписаноКол * СуммаНУНЗП / КоличествоНЗП, 2, 1) - СтрокаВыборки.СтоимостьНУ;
		НДСВходящийЗатрат	= Окр(СписаноКол * НДСВходящийНЗП / КоличествоНЗП, 2, 1) - СтрокаВыборки.НДСВходящий;
		НДСКредитЗатрат 	= Окр(СписаноКол * НДСКредитНЗП / КоличествоНЗП, 2, 1) - СтрокаВыборки.НДСКредит;
	КонецЕсли; 
	
	
КонецПроцедуры // РассчитатьСуммыКорректировкиОприходованияНЗП()

// Процедура рассчитывает суммы списания материальных затрат.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	КоличествоНЗП - Число - Количество остаток незавершенного производства
//	СуммаНЗП - Число - Сумма остаток незавершенного производства
//	ОбщаяСуммаНЗП - Число - Общая сумма остатка незавершенного производства
//	КоличествоЗатратНаВыпуск - Число - Количество затрат на выпуск продукции
//	РасчетКосвенныхЗатрат - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	РасчетЗатратВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска" 
//
// Выходные параметры
//	СуммаЗатрат - Число - Сумма для отражения в затратах на выпуск
//	СписатьКоличествоИзНЗП - Число - Количество списания из незавершенного производства
//	СписатьСуммаИзНЗП - Число - Сумма списания из незавершенного производства
//
Процедура РассчитатьСуммыСписанияМатериальныхЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	КоличествоНЗП,
	
	СуммаНЗП,
	СуммаНУНЗП,
	НДСВходящийНЗП,
	НДСКредитНЗП,
					
	ОбщаяСуммаНЗП,
	ОбщаяСуммаНУНЗП,
	ОбщаяНДСВходящийНЗП,
	ОбщаяНДСКредитНЗП,
	
	КоличествоЗатратНаВыпуск,
	РасчетКосвенныхЗатрат,
	РасчетЗатратВстречногоВыпуска,
	
	СуммаЗатрат,
	СуммаНУЗатрат,
	НДСВходящийЗатрат,
	НДСКредитЗатрат,
					
	СписатьКоличествоИзНЗП,
	
	СписатьСуммаИзНЗП,
	СписатьСуммаНУИзНЗП,
	СписатьНДСВходящийИзНЗП,
	СписатьНДСКредитИзНЗП
	)
	
	СписаноКол = СтрокаВыборки.Количество;
	
	Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы Тогда
		Знак = - 1;
	Иначе
		Знак = 1;
	КонецЕсли;
	
	СуммаЗатрат = 0;
	СуммаНУЗатрат		= 0;
	НДСВходящийЗатрат	= 0;
	НДСКредитЗатрат 	= 0;
	
	СписатьКоличествоИзНЗП = 0;
	
	СписатьСуммаИзНЗП = 0;
	СписатьСуммаНУИзНЗП 	= 0;
	СписатьНДСВходящийИзНЗП	= 0;
	СписатьНДСКредитИзНЗП 	= 0;
	
	Если СписаноКол = 0 Тогда
		Возврат;
	КонецЕсли;
											
	Если Знак * КоличествоНЗП <= Знак * СписаноКол Тогда
												
		Если (Знак * КоличествоНЗП < Знак * СписаноКол)
		   И Не РасчетКосвенныхЗатрат
		   И (Не РасчетЗатратВстречногоВыпуска
		   	ИЛИ РасчетЗатратВстречногоВыпуска И СтрокаВыборки.ЗатратаВстречногоВыпуска)
		Тогда
				
			ВывестиСообщениеОПревышенииКоличестваОстаткаНЗП(
				СтрокаВыборки,
				(Знак * СписаноКол),
				(Знак * КоличествоНЗП),
				СтруктураШапкиДокумента
				);
				
		КонецЕсли;
				
		Если КоличествоНЗП = 0 Тогда
			Возврат;
		КонецЕсли;
			
		СписаноКол = КоличествоНЗП;
		
		СуммаЗатрат = СуммаНЗП;
		СуммаНУЗатрат		= СуммаНУНЗП;
		НДСВходящийЗатрат	= НДСВходящийНЗП;
		НДСКредитЗатрат 	= НДСКредитНЗП;
		
		СписатьКоличествоИзНЗП = КоличествоНЗП;
		
		СписатьСуммаИзНЗП = СуммаЗатрат;
		СписатьСуммаНУИзНЗП 	= СуммаНУЗатрат;
		СписатьНДСВходящийИзНЗП = НДСВходящийЗатрат;
		СписатьНДСКредитИзНЗП 	= НДСКредитЗатрат;
		
	Иначе
		
		СуммаЗатрат = ?(КоличествоНЗП <> 0, Окр(СписаноКол * СуммаНЗП / КоличествоНЗП, 2, 1), 0);
		СуммаНУЗатрат 		= ?(КоличествоНЗП <> 0, Окр(СписаноКол * СуммаНУНЗП / КоличествоНЗП, 2, 1), 0);
		НДСВходящийЗатрат 	= ?(КоличествоНЗП <> 0, Окр(СписаноКол * НДСВходящийНЗП / КоличествоНЗП, 2, 1), 0);
		НДСКредитЗатрат 	= ?(КоличествоНЗП <> 0, Окр(СписаноКол * НДСКредитНЗП / КоличествоНЗП, 2, 1), 0);
		
		СписатьКоличествоИзНЗП = СписаноКол;
		
		СписатьСуммаИзНЗП = СуммаЗатрат;
		СписатьСуммаНУИзНЗП 	= СуммаНУЗатрат;
		СписатьНДСВходящийИзНЗП = НДСВходящийЗатрат;
		СписатьНДСКредитИзНЗП 	= НДСКредитЗатрат;
		
		КоличествоЗатратНаВыпуск = КоличествоЗатратНаВыпуск - СписаноКол;
												
	КонецЕсли;
											
КонецПроцедуры // РассчитатьСуммыСписанияМатериальныхЗатрат()

// Процедура рассчитывает суммы списания материальных затрат.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	КодыОперацийФиксСтоимость - Соответствие - Соответствие кода операции и операции по фиксированной стоимости
//	КоличествоНЗП - Число - Количество остаток незавершенного производства
//	СуммаНЗП - Число - Сумма остаток незавершенного производства
//	ОбщаяСуммаНЗП - Число - Общая сумма остатка незавершенного производства
//	КоличествоЗатратНаВыпуск - Число - Количество затрат на выпуск продукции
//	РасчетКосвенныхЗатрат - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	РасчетЗатратВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска" 
//
// Выходные параметры
//	СуммаЗатрат - Число - Сумма для отражения в затратах на выпуск
//	СписатьСуммаИзНЗП - Число - Сумма списания из незавершенного производства
//
Процедура РассчитатьСуммыСписанияИКорректировкиМатериальныхЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	КодыОперацийФиксСтоимость,
	КоличествоНЗП,
	
	СуммаНЗП,
	СуммаНУНЗП,
	НДСВходящийНЗП,
	НДСКредитНЗП,
					
	ОбщаяСуммаНЗП,
	ОбщаяСуммаНУНЗП,
	ОбщаяНДСВходящийНЗП,
	ОбщаяНДСКредитНЗП,
	
	КоличествоЗатратНаВыпуск,
	РасчетКосвенныхЗатрат,
	РасчетЗатратВстречногоВыпуска,
	
	СуммаЗатрат,
	СуммаНУЗатрат,
	НДСВходящийЗатрат,
	НДСКредитЗатрат,
	
	СписатьКоличествоИзНЗП,
	
	СписатьСуммаИзНЗП,
	СписатьСуммаНУИзНЗП,
	СписатьНДСВходящийИзНЗП,
	СписатьНДСКредитИзНЗП
	)
	
	Если КодыОперацийФиксСтоимость.Получить(СтрокаВыборки.КодОперации) <> Неопределено Тогда
		ЭтоКодОперацииФиксСтоимость = Истина;
	Иначе
		ЭтоКодОперацииФиксСтоимость = Ложь;
	КонецЕсли;
	
	СуммаЗатрат = 0;
	СуммаНУЗатрат  = 0;
	НДСВходящийЗатрат = 0;
	НДСКредитЗатрат = 0;
	
	СписатьКоличествоИзНЗП = 0;
	
	СписатьСуммаИзНЗП = 0;
	СписатьСуммаНУИзНЗП = 0;
	СписатьНДСВходящийИзНЗП = 0;
	СписатьНДСКредитИзНЗП  = 0;
											
	Если ЭтоКодОперацииФиксСтоимость Тогда
		
		Если Не РасчетКосвенныхЗатрат 
		   И Не РасчетЗатратВстречногоВыпуска Тогда
	   
			РассчитатьСуммыКорректировкиФиксированнойСтоимости(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				КоличествоНЗП,
				
				СуммаНЗП,
				СуммаНУНЗП,
				НДСВходящийНЗП,
				НДСКредитНЗП,
					
				СуммаЗатрат,
				СуммаНУЗатрат,
				НДСВходящийЗатрат,
				НДСКредитЗатрат,
					
				СписатьСуммаИзНЗП,
				СписатьСуммаНУИзНЗП,
				СписатьНДСВходящийИзНЗП,
				СписатьНДСКредитИзНЗП
			);
			
		КонецЕсли;
			
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП Тогда
		РассчитатьСуммыКорректировкиОприходованияНЗП(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			КоличествоНЗП,
			
			СуммаНЗП,
			СуммаНУНЗП,
			НДСВходящийНЗП,
			НДСКредитНЗП,
					
			СуммаЗатрат,
			СуммаНУЗатрат,
			НДСВходящийЗатрат,
			НДСКредитЗатрат
		);
		
	Иначе
		РассчитатьСуммыСписанияМатериальныхЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			КоличествоНЗП,
			
			СуммаНЗП,
			СуммаНУНЗП,
			НДСВходящийНЗП,
			НДСКредитНЗП,
					
			ОбщаяСуммаНЗП,
			ОбщаяСуммаНУНЗП,
			ОбщаяНДСВходящийНЗП,
			ОбщаяНДСКредитНЗП,
			
			КоличествоЗатратНаВыпуск,
			РасчетКосвенныхЗатрат,
			РасчетЗатратВстречногоВыпуска,
			
			СуммаЗатрат,
			СуммаНУЗатрат,
			НДСВходящийЗатрат,
			НДСКредитЗатрат,
					
			СписатьКоличествоИзНЗП,
			
			СписатьСуммаИзНЗП,
			СписатьСуммаНУИзНЗП,
			СписатьНДСВходящийИзНЗП,
			СписатьНДСКредитИзНЗП
		);

	КонецЕсли;
	
	СписаноКол = СтрокаВыборки.Количество;
		
	Если Не ЭтоКодОперацииФиксСтоимость 
	   И Не СтрокаВыборки.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП Тогда
		КоличествоНЗП = КоличествоНЗП - СписатьКоличествоИзНЗП;
		
		СуммаНЗП = СуммаНЗП - СписатьСуммаИзНЗП;
		СуммаНУНЗП		= СуммаНУНЗП - СписатьСуммаНУИзНЗП;
		НДСВходящийНЗП	= НДСВходящийНЗП - СписатьНДСВходящийИзНЗП;
		НДСКредитНЗП	= НДСКредитНЗП - СписатьНДСКредитИзНЗП;
		
		ОбщаяСуммаНЗП = ОбщаяСуммаНЗП - СписатьСуммаИзНЗП;
		ОбщаяСуммаНУНЗП = ОбщаяСуммаНУНЗП - СписатьСуммаНУИзНЗП;
		ОбщаяНДСВходящийНЗП = ОбщаяНДСВходящийНЗП - СписатьНДСВходящийИзНЗП;
		ОбщаяНДСКредитНЗП = ОбщаяНДСКредитНЗП - СписатьНДСКредитИзНЗП;
		
	КонецЕсли;
											
	Если Не РасчетЗатратВстречногоВыпуска И Не РасчетКосвенныхЗатрат 
	   И Не ЭтоКодОперацииФиксСтоимость
	   И Не СтрокаВыборки.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП Тогда
	   
		СуммаЗатрат = СуммаЗатрат - СтрокаВыборки.Стоимость;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СуммаНУЗатрат 		= СуммаНУЗатрат - СтрокаВыборки.СтоимостьНУ;
			НДСВходящийЗатрат	= НДСВходящийЗатрат - СтрокаВыборки.НДСВходящий;
			НДСКредитЗатрат 	= НДСКредитЗатрат - СтрокаВыборки.НДСКредит;
		КонецЕсли; 
		
	ИначеЕсли (РасчетЗатратВстречногоВыпуска ИЛИ РасчетКосвенныхЗатрат) 
		И Не ЭтоКодОперацииФиксСтоимость
		И Не СтрокаВыборки.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП Тогда
												
		Если РасчетЗатратВстречногоВыпуска И СтрокаВыборки.ЗатратаВстречногоВыпуска Тогда
			СуммаЗатрат = СуммаЗатрат - СтрокаВыборки.Стоимость;
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				СуммаНУЗатрат 		= СуммаНУЗатрат - СтрокаВыборки.СтоимостьНУ;
				НДСВходящийЗатрат	= НДСВходящийЗатрат - СтрокаВыборки.НДСВходящий;
				НДСКредитЗатрат 	= НДСКредитЗатрат - СтрокаВыборки.НДСКредит;
			КонецЕсли; 
			 
		Иначе
			
			СписатьКоличествоИзНЗП = 0;
			
			СписатьСуммаИзНЗП = СписатьСуммаИзНЗП - СтрокаВыборки.Стоимость;
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				СписатьСуммаНУИзНЗП 	= СписатьСуммаНУИзНЗП - СтрокаВыборки.СтоимостьНУ;
				СписатьНДСВходящийИзНЗП = СписатьНДСВходящийИзНЗП - СтрокаВыборки.НДСВходящий;
				СписатьНДСКредитИзНЗП 	= СписатьНДСКредитИзНЗП - СтрокаВыборки.НДСКредит;
			КонецЕсли; 
			 
			СуммаЗатрат = СуммаЗатрат - СтрокаВыборки.Стоимость;
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				СуммаНУЗатрат 		= СуммаНУЗатрат - СтрокаВыборки.СтоимостьНУ;
				НДСВходящийЗатрат	= НДСВходящийЗатрат - СтрокаВыборки.НДСВходящий;
				НДСКредитЗатрат 	= НДСКредитЗатрат - СтрокаВыборки.НДСКредит;
			КонецЕсли; 
			
		КонецЕсли;	
											
	ИначеЕсли ЭтоКодОперацииФиксСтоимость
		  ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП Тогда
		СписатьКоличествоИзНЗП = 0;
		
	КонецЕсли;
												
КонецПроцедуры // РассчитатьСуммыСписанияИКорректировкиМатериальныхЗатрат()

// Процедура рассчитывает суммы списания нематериальных затрат.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	СуммаНЗП - Число - Сумма остаток незавершенного производства
//	ОбщаяСуммаНЗП - Число - Общая сумма остатка незавершенного производства
//	СуммаЗатратНаВыпуск - Число - Сумма затрат на выпуск продукции, отраженная в документах распределения
//	РасчетЗатратВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска" 
//
// Выходные параметры
//	СуммаЗатрат - Число - Сумма для отражения в затратах на выпуск
//	СписатьСуммаИзНЗП - Число - Сумма списания из незавершенного производства
//
Процедура РассчитатьСуммыСписанияНематериальныхЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	
	СуммаНЗП,
	СуммаНУНЗП,
	НДСВходящийНЗП,
	НДСКредитНЗП,
					
	ОбщаяСуммаНЗП,
	ОбщаяСуммаНУНЗП,
	ОбщаяНДСВходящийНЗП,
	ОбщаяНДСКредитНЗП,
	
	СуммаЗатратНаВыпуск,
	СуммаНУЗатратНаВыпуск,
	НДСВходящийЗатратНаВыпуск,
	НДСКредитЗатратНаВыпуск,
	
	РасчетЗатратВстречногоВыпуска,
	
	СуммаЗатрат,
	СуммаНУЗатрат,
	НДСВходящийЗатрат,
	НДСКредитЗатрат,
	
	СписатьСуммаИзНЗП,
	СписатьСуммаНУИзНЗП,
	СписатьНДСВходящийИзНЗП,
	СписатьНДСКредитИзНЗП
	
	)
	
	Если Не РасчетЗатратВстречногоВыпуска И СтрокаВыборки.ЗатратаВстречногоВыпуска
	 ИЛИ РасчетЗатратВстречногоВыпуска И Не СтрокаВыборки.ЗатратаВстречногоВыпуска
	Тогда
		Возврат;
	КонецЕсли;
	
	ОбщаяСтоимость = СтрокаВыборки.Стоимость;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ОбщаяСтоимостьНУ = СтрокаВыборки.СтоимостьНУ;
		ОбщаяНДСВходящий = СтрокаВыборки.НДСВходящий;
		ОбщаяНДСКредит   = СтрокаВыборки.НДСКредит;
	Иначе
		ОбщаяСтоимостьНУ = 0;
		ОбщаяНДСВходящий = 0;
		ОбщаяНДСКредит   = 0;
	КонецЕсли; 
		
	Знак = ?(ОбщаяСтоимость < 0, - 1, 1);
	
	Если Знак * ОбщаяСтоимость > Знак * СуммаНЗП Тогда
		ВывестиСообщениеОПревышенииСуммыОстаткаНЗП(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			ОбщаяСтоимость,
			СуммаНЗП
		);
	КонецЕсли;
	
	Если Знак * ОбщаяСтоимость >= Знак * СуммаНЗП 
	   И ОбщаяСтоимость <> 0
	Тогда
		СуммаЗатрат = СуммаНЗП;
		СуммаНУЗатрат 		= СуммаНУНЗП;
		НДСВходящийЗатрат 	= НДСВходящийНЗП;
		НДСКредитЗатрат 	= НДСКредитНЗП;
		
		СписатьСуммаИзНЗП = СуммаНЗП;
		СписатьСуммаНУИзНЗП 	= СуммаНУНЗП;
		СписатьНДСВходящийИзНЗП = НДСВходящийНЗП;
		СписатьНДСКредитИзНЗП 	= НДСКредитНЗП;
		
	Иначе
		
		СуммаЗатрат = ОбщаяСтоимость;
		СуммаНУЗатрат 		= ОбщаяСтоимостьНУ;
		НДСВходящийЗатрат 	= ОбщаяНДСВходящий;
		НДСКредитЗатрат 	= ОбщаяНДСКредит;
		
		СписатьСуммаИзНЗП = СуммаЗатрат;
		СписатьСуммаНУИзНЗП 	= СуммаНУЗатрат;
		СписатьНДСВходящийИзНЗП = НДСВходящийЗатрат;
		СписатьНДСКредитИзНЗП 	= НДСКредитЗатрат;
	КонецЕсли;
	
	СуммаЗатратНаВыпуск = СуммаЗатратНаВыпуск - ОбщаяСтоимость;
	СуммаНУЗатратНаВыпуск 		= СуммаНУЗатратНаВыпуск - ОбщаяСтоимостьНУ;
	НДСВходящийЗатратНаВыпуск	= НДСВходящийЗатратНаВыпуск - ОбщаяНДСВходящий;
	НДСКредитЗатратНаВыпуск 	= НДСКредитЗатратНаВыпуск - ОбщаяНДСКредит;
	
	СуммаЗатрат = СуммаЗатрат - ОбщаяСтоимость;
	СуммаНУЗатрат 		= СуммаНУЗатрат - ОбщаяСтоимостьНУ;
	НДСВходящийЗатрат 	= НДСВходящийЗатрат - ОбщаяНДСВходящий;
	НДСКредитЗатрат 	= НДСКредитЗатрат - ОбщаяНДСКредит;
	
	СуммаНЗП = СуммаНЗП - СписатьСуммаИзНЗП;
	СуммаНУНЗП 		= СуммаНУНЗП - СписатьСуммаНУИзНЗП;
	НДСВходящийНЗП	= НДСВходящийНЗП - СписатьНДСВходящийИзНЗП;
	НДСКредитНЗП 	= НДСКредитНЗП - СписатьНДСКредитИзНЗП;
	
	ОбщаяСуммаНЗП = ОбщаяСуммаНЗП - СписатьСуммаИзНЗП;
	ОбщаяСуммаНУНЗП = ОбщаяСуммаНУНЗП - СписатьСуммаНУИзНЗП;
	ОбщаяНДСВходящийНЗП = ОбщаяНДСВходящийНЗП - СписатьНДСВходящийИзНЗП;
	ОбщаяНДСКредитНЗП = ОбщаяНДСКредитНЗП - СписатьНДСКредитИзНЗП;
												
КонецПроцедуры // РассчитатьСуммыСписанияНематериальныхЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СПИСАНИЯ ЗАТРАТ НА ВЫПУСК ПРОДУКЦИИ

// Функция получения массива затрат, рассчитываемых на текущем переделе.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	НомерПередела - Число - Текущий номер передела
//
// Возвращаемое значение:
//	Массив - Массив затрат
//
Функция ПолучитьМассивЗатрат(
	СтруктураШапкиДокумента,
	НомерПередела
	)

	ТекстЗапросаСКомментариями = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаспределениеЗатрат.Затрата
	|ИЗ			
	|	РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК РаспределениеЗатрат
	|ГДЕ
	|	РаспределениеЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|	И РаспределениеЗатрат.НомерПередела = &НомерПередела
	|	//ДляРеглУчета И РаспределениеЗатрат.Организация = &Организация
	|";
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НомерПередела", НомерПередела);
	
	ТаблицаЗатрат = Запрос.Выполнить().Выгрузить();
	МассивЗатрат = ТаблицаЗатрат.ВыгрузитьКолонку("Затрата");
	
	Возврат МассивЗатрат;

КонецФункции // ПолучитьМассивЗатрат()

// Функция получает структуру поиска строк результата запроса по затратам на выпуск.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса по незавершенному производству
//	РасчетПоНУ - Булево - Признак расчет по налоговому учету 
//
// Возвращаемое значение:
//	Структура - Структура поиска
//
Функция ПолучитьСтруктуруПоискаСтрокЗатратНаВыпуск(
	СтруктураШапкиДокумента,
	СтрокаВыборки
	)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ПодразделениеСписанияНЗП", СтрокаВыборки.Подразделение);
	СтруктураПоиска.Вставить("НоменклатурнаяГруппаНЗП", СтрокаВыборки.НоменклатурнаяГруппа);
	СтруктураПоиска.Вставить("ЗаказНЗП", СтрокаВыборки.Заказ);
	СтруктураПоиска.Вставить("СтатьяЗатрат", СтрокаВыборки.СтатьяЗатрат);
	СтруктураПоиска.Вставить("Затрата", СтрокаВыборки.Затрата);
	СтруктураПоиска.Вставить("ХарактеристикаЗатраты", СтрокаВыборки.ХарактеристикаЗатраты);
		
	Если СтрокаВыборки.ВестиУчетПоСериямВНЗП Тогда
		СтруктураПоиска.Вставить("СерияЗатраты", СтрокаВыборки.СерияЗатраты);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	   И СтрокаВыборки.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
		СтруктураПоиска.Вставить("СчетУчета", СтрокаВыборки.СчетУчета);
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 	
		И СтрокаВыборки.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
		СтруктураПоиска.Вставить("НалоговоеНазначение", СтрокаВыборки.НалоговоеНазначение);
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И НЕ СтруктураШапкиДокумента.РазрешитьКорректировкиИспользования Тогда
		// налоговое назначение выпущенной продукции должно соответствовать налоговому назначению распределяемой затраты
		Если СтрокаВыборки.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			СтруктураПоиска.Вставить("НалоговоеНазначениеПоФакту", СтрокаВыборки.НалоговоеНазначение);
		КонецЕсли;	
	КонецЕсли; 
	
	Возврат СтруктураПоиска;
	
КонецФункции // ПолучитьСтруктуруПоискаСтрокЗатратНаВыпуск()

// Функция получает построитель запроса по затратам на выпуск.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	РезультатЗапросаПоЗатратамНаВыпуск - РезультатЗапроса - Результат выполнения запроса по затратам на выпуск
//
// Возвращаемое значение:
//	ПостроительЗапроса - построитель запроса.
//
Функция ПолучитьПостроительЗапросаПоЗатратамНаВыпуск(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратамНаВыпуск
	)
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(РезультатЗапросаПоЗатратамНаВыпуск);
	ПостроительЗапроса.Отбор.Добавить("ПодразделениеСписанияНЗП");
	ПостроительЗапроса.Отбор.Добавить("НоменклатурнаяГруппаНЗП");
	
	ПостроительЗапроса.Отбор.ПодразделениеСписанияНЗП.Использование = Истина;
	ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Использование = Истина;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  Тогда 
		ПостроительЗапроса.Отбор.Добавить("НалоговоеНазначение");
		ПостроительЗапроса.Отбор.НалоговоеНазначение.Использование = Истина;
		Если (НЕ СтруктураШапкиДокумента.РазрешитьКорректировкиИспользования) Тогда
			ПостроительЗапроса.Отбор.Добавить("НалоговоеНазначениеПоФакту");
			ПостроительЗапроса.Отбор.НалоговоеНазначениеПоФакту.Использование = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПостроительЗапроса;

КонецФункции // ПолучитьПостроительЗапросаПоЗатратамНаВыпуск()

// Функция проверяет отбор и устанавливает параметры отбора построителя запроса по затратам на выпуск.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//
// Выходные параметры
//	ПостроительЗапроса - ПостроительЗапроса - построитель запроса.
//
// Возвращаемое значение:
//	Булево - Истина - установлен новый отбор,
//			 Ложь - значения отбора не изменились.
//
Функция ПроверитьИУстановитьОтборПостроителяЗапросаПоЗатратамНаВыпуск(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ПостроительЗапроса
	)
	
	ОтборСоответствуетАналитике = Ложь;
	Если ПостроительЗапроса.Отбор.ПодразделениеСписанияНЗП.Значение = СтрокаВыборки.Подразделение
	   И ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Значение = СтрокаВыборки.НоменклатурнаяГруппа
	Тогда
		ОтборСоответствуетАналитике = Истина;
	КонецЕсли;
	
	Если (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И ПостроительЗапроса.Отбор.НалоговоеНазначение.Значение <> СтрокаВыборки.НалоговоеНазначение) Тогда 
		ОтборСоответствуетАналитике = Ложь;		                   
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (НЕ СтруктураШапкиДокумента.РазрешитьКорректировкиИспользования) И (ПостроительЗапроса.Отбор.НалоговоеНазначениеПоФакту.Значение <> СтрокаВыборки.НалоговоеНазначение) Тогда
		ОтборСоответствуетАналитике = Ложь;
	КонецЕсли; 
	   
	Если Не ОтборСоответствуетАналитике Тогда
	
		ПостроительЗапроса.Отбор.ПодразделениеСписанияНЗП.Значение = СтрокаВыборки.Подразделение;
		ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Значение = СтрокаВыборки.НоменклатурнаяГруппа;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда   
			ПостроительЗапроса.Отбор.НалоговоеНазначение.Значение = СтрокаВыборки.НалоговоеНазначение;
			Если НЕ СтруктураШапкиДокумента.РазрешитьКорректировкиИспользования Тогда   
				Если СтрокаВыборки.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
					ПостроительЗапроса.Отбор.НалоговоеНазначениеПоФакту.Значение = СтрокаВыборки.НалоговоеНазначение;
					ПостроительЗапроса.Отбор.НалоговоеНазначениеПоФакту.Использование = Истина;
				Иначе
					ПостроительЗапроса.Отбор.НалоговоеНазначениеПоФакту.Использование = Ложь;
				КонецЕсли;	
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не ОтборСоответствуетАналитике;

КонецФункции // ПроверитьИУстановитьОтборПостроителяЗапросаПоЗатратамНаВыпуск()

// Процедура распределения затрат из незавершенного производства за выпуск продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	РезультатЗапросаПоНезавершенномуПроизводству - РезультатЗапроса - Результат выполнения запроса по незавершенному производству
//  РезультатЗапросаПоЗатратамНаВыпуск - РезультатЗапроса - Результат запроса по затратам на выпуск
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	РасчетКосвенныхЗатрат - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	РасчетЗатратВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска" 
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейЗатратыНаВыпуск - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск продукции"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьЗатратыИзНезавершенногоПроизводстваНаВыпускПродукции(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоНезавершенномуПроизводству,
	РезультатЗапросаПоЗатратамНаВыпуск,
	НомерПередела,
	РасчетКосвенныхЗатрат,
	РасчетЗатратВстречногоВыпуска,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейЗатратыНаВыпуск,
	РегистрБухгалтерииНаборЗаписей,
	НаборЗаписейКорректировкиНезавершенноеПроизводствоНалоговыйУчет
	)
	
	КодыОперацийФиксСтоимость = Новый Соответствие;
	КодыОперацийФиксСтоимость.Вставить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс, Истина);
	КодыОперацийФиксСтоимость.Вставить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗПФикс, Истина);
	КодыОперацийФиксСтоимость.Вставить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПФикс, Истина);
	
	ПостроительЗапроса = ПолучитьПостроительЗапросаПоЗатратамНаВыпуск(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоЗатратамНаВыпуск
		);
		
	ВыборкаПоЗатратам = РезультатЗапросаПоНезавершенномуПроизводству.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		КоличествоЗатратНаВыпуск = ВыборкаПоЗатратам.Количество;
		
		СуммаЗатратНаВыпуск = ВыборкаПоЗатратам.Стоимость;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СуммаНУЗатратНаВыпуск 		= ВыборкаПоЗатратам.СтоимостьНУ;
			НДСВходящийЗатратНаВыпуск 	= ВыборкаПоЗатратам.НДСВходящий;
			НДСКредитЗатратНаВыпуск 	= ВыборкаПоЗатратам.НДСКредит;
		Иначе
			СуммаНУЗатратНаВыпуск 		= 0;
			НДСВходящийЗатратНаВыпуск 	= 0;
			НДСКредитЗатратНаВыпуск 	= 0;
		КонецЕсли; 
		
		КоличествоНЗП = ВыборкаПоЗатратам.КоличествоОстаток;
		
		СуммаНЗП = ВыборкаПоЗатратам.СтоимостьОстаток;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СуммаНУНЗП     = ВыборкаПоЗатратам.СтоимостьНУОстаток;
			НДСВходящийНЗП = ВыборкаПоЗатратам.НДСВходящийОстаток;
			НДСКредитНЗП   = ВыборкаПоЗатратам.НДСКредитОстаток;
		Иначе
			СуммаНУНЗП     = 0;
			НДСВходящийНЗП = 0;
			НДСКредитНЗП   = 0;
		КонецЕсли; 
		
		ОбщаяСуммаНЗП = СуммаНЗП;
		
		ОбщаяСуммаНУНЗП     = СуммаНУНЗП;
		ОбщаяНДСВходящийНЗП = НДСВходящийНЗП;
		ОбщаяНДСКредитНЗП   = НДСКредитНЗП;
		
		// Отберем строки затрат на выпуск.
		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоЗатратамНаВыпуск(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ПостроительЗапроса
			);

		Если УстановленНовыйОтбор Тогда	
			ПостроительЗапроса.Выполнить();
		КонецЕсли;	
		РезультатЗапросаПоЗатратамНаВыпуск = ПостроительЗапроса.Результат;
					                       
		// Выберем выпуск продукции с направлениями списания.
		СтруктураПоиска = ПолучитьСтруктуруПоискаСтрокЗатратНаВыпуск(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам
			);
			
		СписатьКоличествоИзНЗП = 0;	
		
		СписатьСуммаИзНЗП = 0;
		СписатьСуммаНУИзНЗП     = 0;
		СписатьНДСВходящийИзНЗП = 0;
		СписатьНДСКредитИзНЗП   = 0;
		
		ВсегоЗатратыНаВыпуск = 0;
		ВсегоЗатратыНаВыпускНУ           = 0;
		ВсегоЗатратыНаВыпускНДСВходящий  = 0;
		ВсегоЗатратыНаВыпускНДСКредит    = 0;
		
		
		// оптимизация - замена медленно работающего ВыборкаПоЗатратамНаВыпуск.НайтиСледующий на поиск по таблице значений 
		// для отключения закомментируйте строки до // ...оптимизация 
		Если УстановленНовыйОтбор Тогда	
			ТаблицаВыборкаПоЗатратамНаВыпуск = РезультатЗапросаПоЗатратамНаВыпуск.Выгрузить();
			ИндексВыборкаПоЗатратамНаВыпуск = "";
			Для Каждого Элемент Из СтруктураПоиска Цикл
				ИндексВыборкаПоЗатратамНаВыпуск = ИндексВыборкаПоЗатратамНаВыпуск + Элемент.Ключ + ",";
			КонецЦикла; 
			ТаблицаВыборкаПоЗатратамНаВыпуск.Индексы.Добавить(ИндексВыборкаПоЗатратамНаВыпуск);
		КонецЕсли;	
		// ...оптимизация 
		
		// оптимизация - замена медленно работающего ВыборкаПоЗатратамНаВыпуск.НайтиСледующий на поиск по таблице значений 
		// для отключения раскомментируйте следующие две строки и закомментируйте следующие после этих строк две строки
		// ВыборкаПоЗатратамНаВыпуск = РезультатЗапросаПоЗатратамНаВыпуск.Выбрать();
		// Пока ВыборкаПоЗатратамНаВыпуск.НайтиСледующий(СтруктураПоиска) Цикл
        МассивСтрокЗатратыНаВыпуск = ТаблицаВыборкаПоЗатратамНаВыпуск.НайтиСтроки(СтруктураПоиска);
        Для Каждого ВыборкаПоЗатратамНаВыпуск Из МассивСтрокЗатратыНаВыпуск Цикл
		// ... оптимизация 
			
			Если ВыборкаПоЗатратамНаВыпуск.ЗатратаВстречногоВыпуска 
			   И Не ВыборкаПоЗатратамНаВыпуск.ВстречныйВыпуск Тогда
				Продолжить;
			ИначеЕсли Не ВыборкаПоЗатратамНаВыпуск.ЗатратаВстречногоВыпуска 
					И ВыборкаПоЗатратамНаВыпуск.ВстречныйВыпуск Тогда
				Продолжить;
			ИначеЕсли ВыборкаПоЗатратамНаВыпуск.ЗатратаВстречногоВыпуска 
					И Не РасчетЗатратВстречногоВыпуска Тогда
				Продолжить;
			КонецЕсли;
			
			// Пропускаем записи по которым нет выпуска продукции.
			Если Не ВыборкаПоЗатратамНаВыпуск.ЕстьВыпускПродукции Тогда
				Продолжить;
			КонецЕсли;
			
			ВсегоЗатратыНаВыпуск = ВсегоЗатратыНаВыпуск + ВыборкаПоЗатратамНаВыпуск.Стоимость;
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ВсегоЗатратыНаВыпускНУ          = ВсегоЗатратыНаВыпускНУ + ВыборкаПоЗатратамНаВыпуск.СтоимостьНУ;
				ВсегоЗатратыНаВыпускНДСВходящий = ВсегоЗатратыНаВыпускНДСВходящий + ВыборкаПоЗатратамНаВыпуск.НДСВходящий;
				ВсегоЗатратыНаВыпускНДСКредит   = ВсегоЗатратыНаВыпускНДСКредит + ВыборкаПоЗатратамНаВыпуск.НДСКредит;
			КонецЕсли; 
			
			СуммаЗатрат = 0;
			
			СуммаНУЗатрат = 0;
			НДСВходящийЗатрат = 0;
			НДСКредитЗатрат = 0;
			
			
			КоличествоИзНЗП = 0;
			СуммаИзНЗП = 0;
			
			СуммаНУИзНЗП = 0;
			НДСВходящийИзНЗП = 0;
			НДСКредитИзНЗП = 0;
			
			// Если производится списание затрат на продукцию, исключаемую из базы распределения,
			// стоимость такой продукции не корректируем. 
			Если ВыборкаПоЗатратамНаВыпуск.ЕстьИсключаемаяНоменклатура 
			   И (РасчетКосвенныхЗатрат ИЛИ РасчетЗатратВстречногоВыпуска) Тогда
			   
				КоличествоНЗП = КоличествоНЗП - ВыборкаПоЗатратамНаВыпуск.Количество;
				СуммаНЗП = СуммаНЗП - ВыборкаПоЗатратамНаВыпуск.Стоимость;
				ОбщаяСуммаНЗП = ОбщаяСуммаНЗП - ВыборкаПоЗатратамНаВыпуск.Стоимость;
				
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					
					СуммаНУНЗП = СуммаНУНЗП - ВыборкаПоЗатратамНаВыпуск.СтоимостьНУ;
					ОбщаяСуммаНУНЗП = ОбщаяСуммаНУНЗП - ВыборкаПоЗатратамНаВыпуск.СтоимостьНУ;
					
					НДСВходящийНЗП = НДСВходящийНЗП - ВыборкаПоЗатратамНаВыпуск.НДСВходящий;
					ОбщаяНДСВходящийНЗП = ОбщаяНДСВходящийНЗП - ВыборкаПоЗатратамНаВыпуск.НДСВходящий;
					
					НДСКредитНЗП = НДСКредитНЗП - ВыборкаПоЗатратамНаВыпуск.НДСКредит;
					ОбщаяНДСКредитНЗП = ОбщаяНДСКредитНЗП - ВыборкаПоЗатратамНаВыпуск.НДСКредит;
					
				КонецЕсли; 
				
				Продолжить;
				
			КонецЕсли;
			
			Если ВыборкаПоЗатратам.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
				
				РассчитатьСуммыСписанияИКорректировкиМатериальныхЗатрат(
					СтруктураШапкиДокумента,
					ВыборкаПоЗатратамНаВыпуск,
					КодыОперацийФиксСтоимость,
					КоличествоНЗП,
					
					СуммаНЗП,
					СуммаНУНЗП,
					НДСВходящийНЗП,
					НДСКредитНЗП,
					
					ОбщаяСуммаНЗП,
					ОбщаяСуммаНУНЗП,
					ОбщаяНДСВходящийНЗП,
					ОбщаяНДСКредитНЗП,
					
					КоличествоЗатратНаВыпуск,
					РасчетКосвенныхЗатрат,
					РасчетЗатратВстречногоВыпуска,
					
					СуммаЗатрат,
					СуммаНУЗатрат,
					НДСВходящийЗатрат,
					НДСКредитЗатрат,
					
					КоличествоИзНЗП,
					
					СуммаИзНЗП,
					СуммаНУИзНЗП,
					НДСВходящийИзНЗП,
					НДСКредитИзНЗП
					
					);
				
			// Расчет сумм списания для нематериальных затрат.
			ИначеЕсли Не РасчетКосвенныхЗатрат Тогда
				РассчитатьСуммыСписанияНематериальныхЗатрат(
					СтруктураШапкиДокумента,
					ВыборкаПоЗатратамНаВыпуск,
					
					СуммаНЗП,
					СуммаНУНЗП,
					НДСВходящийНЗП,
					НДСКредитНЗП,
					
					ОбщаяСуммаНЗП,
					ОбщаяСуммаНУНЗП,
					ОбщаяНДСВходящийНЗП,
					ОбщаяНДСКредитНЗП,
					
					СуммаЗатратНаВыпуск,
					СуммаНУЗатратНаВыпуск,
					НДСВходящийЗатратНаВыпуск,
					НДСКредитЗатратНаВыпуск,
					
					РасчетЗатратВстречногоВыпуска,
					
					СуммаЗатрат,
					СуммаНУЗатрат,
					НДСВходящийЗатрат,
					НДСКредитЗатрат,
					
					СуммаИзНЗП,
					СуммаНУИзНЗП,
					НДСВходящийИзНЗП,
					НДСКредитИзНЗП
					
				);
			КонецЕсли;
			
			Если Не РасчетЗатратВстречногоВыпуска И ВыборкаПоЗатратамНаВыпуск.ЗатратаВстречногоВыпуска Тогда
				СуммаЗатрат = 0;
				СуммаНУЗатрат = 0;
				НДСВходящийЗатрат = 0;
				НДСКредитЗатрат = 0;
			КонецЕсли;
			
			СписатьКоличествоИзНЗП = СписатьКоличествоИзНЗП + КоличествоИзНЗП;	
			
			СписатьСуммаИзНЗП = СписатьСуммаИзНЗП + СуммаИзНЗП;
			СписатьСуммаНУИзНЗП 	= СписатьСуммаНУИзНЗП + СуммаНУИзНЗП;
			СписатьНДСВходящийИзНЗП = СписатьНДСВходящийИзНЗП + НДСВходящийИзНЗП;
			СписатьНДСКредитИзНЗП	= СписатьНДСКредитИзНЗП + НДСКредитИзНЗП;
			
			ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
			
			// Формирование движений по регистру "Затраты на выпуск".
			СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииПрямыеЗатраты(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ВыборкаПоЗатратамНаВыпуск,
				Ложь, // РаспределениеЗатратПоБазе,
				РасчетКосвенныхЗатрат, // КосвенныеЗатраты,
				РасчетЗатратВстречногоВыпуска, // ЗатратыВстречногоВыпуска,
				0, // Количество
				СуммаЗатрат,
				СуммаНУЗатрат, 
				НДСВходящийЗатрат,
				НДСКредитЗатрат,
				НаборЗаписейЗатратыНаВыпуск
			);
			
			Если РасчетЗатратВстречногоВыпуска
			   И СтруктураШапкиДокумента.ИтерационныйРасчетЗатратВстречногоВыпуска
			   И ВыборкаПоЗатратам.ВстречныйВыпуск Тогда
				Если ВыборкаПоЗатратам.КоличествоРасход <> 0 Тогда
					КоличествоИзНЗП = 0;
					СуммаИзНЗП = СуммаИзНЗП - ВыборкаПоЗатратамНаВыпуск.Стоимость;
					Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
						СуммаНУИзНЗП = СуммаНУИзНЗП - ВыборкаПоЗатратамНаВыпуск.СтоимостьНУ;
						НДСВходящийИзНЗП = НДСВходящийИзНЗП - ВыборкаПоЗатратамНаВыпуск.НДСВходящий;
						НДСКредитИзНЗП = НДСКредитИзНЗП - ВыборкаПоЗатратамНаВыпуск.НДСКредит;
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			
			// Формирование движений по регистру бухгалтерии.	
			Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
				И ВыборкаПоЗатратам.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку
			   И (ВыборкаПоЗатратамНаВыпуск.НоменклатурнаяГруппа <> ВыборкаПоЗатратамНаВыпуск.НоменклатурнаяГруппаНЗП
					ИЛИ ВыборкаПоЗатратамНаВыпуск.Подразделение <> ВыборкаПоЗатратамНаВыпуск.ПодразделениеНЗП 
					И ЗначениеЗаполнено(ВыборкаПоЗатратамНаВыпуск.ПодразделениеНЗП)) 
					ИЛИ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И ВыборкаПоЗатратамНаВыпуск.НалоговоеНазначение <> ВыборкаПоЗатратамНаВыпуск.НалоговоеНазначениеПоФакту И ВыборкаПоЗатратам.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
					Тогда
					
				СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					СтруктураШапкиДокумента.ВидОтраженияВУчете,
					ВыборкаПоЗатратам,
					ВыборкаПоЗатратамНаВыпуск,
					ВыборкаПоЗатратам.СтатьяЗатрат,
					Перечисления.ХарактерЗатрат.ПроизводственныеРасходы,
					СуммаИзНЗП,
					СуммаНУИзНЗП,
					РегистрБухгалтерииНаборЗаписей
					);
					
			КонецЕсли;		
			
			
			// Если аналитика НЗП отличается от аналитики выпуска - также сделаем следующие движения:
			// Приход НЗП по аналитике выпуска с кодом операции РаспределениеНЗППриИспользованииАналитикиНЗП и измерением НеУчитыватьВРасчетеБазы = Истина
			// Расход НЗП по аналитике выпуска с кодом операцииСписаниеНЗПРегламент и измерением НеУчитыватьВРасчетеБазы = Истина
			// Расход НЗП по аналитике НЗП с кодом операции РаспределениеНЗППриИспользованииАналитикиНЗП
			
			// При построении базы распределения по стоимости затрат не учитываем приход и расход НЗП с НеУчитыватьВРасчетеБазы = Истина
			// В отчете АнализРаспределенияПроизводственныхЗатрат учитываем расход НЗП по коду РаспределениеНЗППриИспользованииАналитикиНЗП как -Приход
			
			// Это позволит:
			// Для бухучета обеспечить совпадение оборотов 23 и регистра НЗП
			// Для всех учетов -  в отчетах анализировать НЗП с учетом использования аналитики НЗП (например, в отчете АнализРаспределенияПроизводственныхЗатрат)
			// Для всех учетов - база распределения останется прежней, без учета добавленых движений по НЗП
			
			Если (ВыборкаПоЗатратамНаВыпуск.НоменклатурнаяГруппа <> ВыборкаПоЗатратамНаВыпуск.НоменклатурнаяГруппаНЗП
					ИЛИ (ВыборкаПоЗатратамНаВыпуск.Подразделение <> ВыборкаПоЗатратамНаВыпуск.ПодразделениеНЗП 
					И ЗначениеЗаполнено(ВыборкаПоЗатратамНаВыпуск.ПодразделениеНЗП))
					ИЛИ ВыборкаПоЗатратамНаВыпуск.Заказ <> ВыборкаПоЗатратамНаВыпуск.ЗаказНЗП 
					ИЛИ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И ВыборкаПоЗатратамНаВыпуск.НалоговоеНазначение <> ВыборкаПоЗатратамНаВыпуск.НалоговоеНазначениеПоФакту И ВыборкаПоЗатратам.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
					) Тогда
					
				НоменклатурнаяГруппаВыпуска = ВыборкаПоЗатратамНаВыпуск.НоменклатурнаяГруппа;
				НоменклатурнаяГруппаНЗП = НоменклатурнаяГруппаВыпуска;
				Если ВыборкаПоЗатратамНаВыпуск.НоменклатурнаяГруппа <> ВыборкаПоЗатратамНаВыпуск.НоменклатурнаяГруппаНЗП Тогда
					НоменклатурнаяГруппаНЗП = ВыборкаПоЗатратамНаВыпуск.НоменклатурнаяГруппаНЗП;
				КонецЕсли; 
				ПодразделениеВыпуска = ВыборкаПоЗатратамНаВыпуск.Подразделение;
				ПодразделениеНЗП = ПодразделениеВыпуска;
				Если (ВыборкаПоЗатратамНаВыпуск.Подразделение <> ВыборкаПоЗатратамНаВыпуск.ПодразделениеНЗП 
					И ЗначениеЗаполнено(ВыборкаПоЗатратамНаВыпуск.ПодразделениеНЗП)) Тогда
					ПодразделениеНЗП = ВыборкаПоЗатратамНаВыпуск.ПодразделениеНЗП;
				КонецЕсли; 	
				ЗаказВыпуска = ВыборкаПоЗатратамНаВыпуск.Заказ;
				ЗаказНЗП = ВыборкаПоЗатратамНаВыпуск.ЗаказНЗП;
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					НалоговоеНазначениеНЗП     = ВыборкаПоЗатратамНаВыпуск.НалоговоеНазначение;
					НалоговоеНазначениеВыпуска = ВыборкаПоЗатратамНаВыпуск.НалоговоеНазначениеПоФакту;
				КонецЕсли; 
				
				Если СуммаИзНЗП <> 0 ИЛИ СуммаНУИзНЗП <> 0 ИЛИ НДСВходящийИзНЗП <> 0 ИЛИ НДСКредитИзНЗП <> 0 ИЛИ КоличествоИзНЗП <> 0 Тогда
					
					// Приход НЗП по аналитике выпуска с кодом операции РаспределениеНЗППриИспользованииАналитикиНЗП 
					// и измерением НеУчитыватьВРасчетеБазы = Истина
					
					НоваяСтрокаПриход = НаборЗаписейНезавершенноеПроизводство.Добавить();
					НоваяСтрокаПриход.Активность = Истина;
					НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					НоваяСтрокаПриход.Период = СтруктураШапкиДокумента.Период;
					
					Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда 
						НоваяСтрокаПриход.Организация           = СтруктураШапкиДокумента.Организация;
						НоваяСтрокаПриход.СчетУчета             = ВыборкаПоЗатратам.СчетУчета;
					КонецЕсли;	
					
					НоваяСтрокаПриход.Подразделение         = ПодразделениеВыпуска;
					НоваяСтрокаПриход.НоменклатурнаяГруппа  = НоменклатурнаяГруппаВыпуска;
					
					НоваяСтрокаПриход.СтатьяЗатрат          = ВыборкаПоЗатратам.СтатьяЗатрат;
					НоваяСтрокаПриход.Заказ                 = ЗаказВыпуска;
					НоваяСтрокаПриход.Затрата               = ВыборкаПоЗатратам.Затрата;
					НоваяСтрокаПриход.ХарактеристикаЗатраты = ВыборкаПоЗатратам.ХарактеристикаЗатраты;
					НоваяСтрокаПриход.СерияЗатраты          = ВыборкаПоЗатратам.СерияЗатраты;
					
					НоваяСтрокаПриход.КодОперации           = Перечисления.КодыОперацийНезавершенноеПроизводство.РаспределениеНЗППриИспользованииАналитикиНЗП;
					НоваяСтрокаПриход.НомерПередела         = НомерПередела;
					
					НоваяСтрокаПриход.Стоимость             = СуммаИзНЗП;
					НоваяСтрокаПриход.Количество            = КоличествоИзНЗП;
					
					Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
						
						НоваяСтрокаПриход.НалоговоеНазначение = НалоговоеНазначениеВыпуска; 
			
						НоваяСтрокаПриход.СтоимостьНУ = СуммаНУИзНЗП;
						НоваяСтрокаПриход.НДСВходящий = НДСВходящийИзНЗП;
						НоваяСтрокаПриход.НДСКредит   = НДСКредитИзНЗП;

					КонецЕсли; 
					
					НоваяСтрокаПриход.НеУчитыватьВРасчетеБазы = Истина;
					НоваяСтрокаПриход.НеУчитыватьДвиженияПриРасчетеСебестоимости = Истина;
					
					
					// Если в наборе записей 1000 строк, запишем набор.
					Если НаборЗаписейНезавершенноеПроизводство.Количество() = 1000 Тогда
						НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
					КонецЕсли;
					
					// Расход НЗП по аналитике выпуска с кодом операции СписаниеНЗПРегламент 
					// и измерением НеУчитыватьВРасчетеБазы = Истина
					
					НоваяСтрокаРасход = НаборЗаписейНезавершенноеПроизводство.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРасход, НоваяСтрокаПриход);
					НоваяСтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
					
					НоваяСтрокаРасход.КодОперации           = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеНЗПРегламент;
					
					НоваяСтрокаРасход.НеУчитыватьВРасчетеБазы = Истина;
					НоваяСтрокаРасход.НеУчитыватьДвиженияПриРасчетеСебестоимости = Истина;
					
					// Если в наборе записей 1000 строк, запишем набор.
					Если НаборЗаписейНезавершенноеПроизводство.Количество() = 1000 Тогда
						НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
					КонецЕсли;
					
					// Расход НЗП по аналитике НЗП с кодом операции РаспределениеНЗППриИспользованииАналитикиНЗП
					НоваяСтрокаРасходНЗП = НаборЗаписейНезавершенноеПроизводство.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРасходНЗП, НоваяСтрокаПриход);
					
					НоваяСтрокаРасходНЗП.ВидДвижения = ВидДвиженияНакопления.Расход;
					
					НоваяСтрокаРасходНЗП.Подразделение         = ПодразделениеНЗП;
					НоваяСтрокаРасходНЗП.НоменклатурнаяГруппа  = НоменклатурнаяГруппаНЗП;
					НоваяСтрокаРасходНЗП.Заказ                 = ЗаказНЗП;
					
					Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
						НоваяСтрокаРасходНЗП.НалоговоеНазначение = НалоговоеНазначениеНЗП; 
					КонецЕсли; 
					
					// расход НЗП по всей затрате по "обычному коду" надо сделать меньше
					СписатьКоличествоИзНЗП = СписатьКоличествоИзНЗП - КоличествоИзНЗП;	
					
					СписатьСуммаИзНЗП       = СписатьСуммаИзНЗП - СуммаИзНЗП;
					СписатьСуммаНУИзНЗП 	= СписатьСуммаНУИзНЗП - СуммаНУИзНЗП;
					СписатьНДСВходящийИзНЗП = СписатьНДСВходящийИзНЗП - НДСВходящийИзНЗП;
					СписатьНДСКредитИзНЗП	= СписатьНДСКредитИзНЗП - НДСКредитИзНЗП;
					
					НоваяСтрокаРасходНЗП.КодОперации  = Перечисления.КодыОперацийНезавершенноеПроизводство.РаспределениеНЗППриИспользованииАналитикиНЗП;
					
					НоваяСтрокаРасходНЗП.НеУчитыватьВРасчетеБазы = Ложь;
					НоваяСтрокаРасходНЗП.НеУчитыватьДвиженияПриРасчетеСебестоимости = Ложь;
					
					// Если в наборе записей 1000 строк, запишем набор.
					Если НаборЗаписейНезавершенноеПроизводство.Количество() = 1000 Тогда
						НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
					КонецЕсли;
				
				КонецЕсли;
			КонецЕсли;
			
			// корректировки использования в НУ
			Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				Продолжить;					
			КонецЕсли; 
			
			СтруктураКорректировкаНДСКредит = НалоговыйУчет.ПолучитьСуммуКорректировкиНалоговогоКредита(
				ВыборкаПоЗатратамНаВыпуск.НалоговоеНазначение,
				ВыборкаПоЗатратамНаВыпуск.НалоговоеНазначениеПоФакту,
				НДСВходящийИзНЗП,
				НДСКредитИзНЗП,
				СуммаИзНЗП
			);
			
			Если НЕ СтруктураКорректировкаНДСКредит.ЕстьКорректировки Тогда
				Продолжить;
			КонецЕсли; 	
				
			КорректировкаНДСКредит        = СтруктураКорректировкаНДСКредит.КорректировкаНДСКредит;
			НДСКредитПоФакту              = СтруктураКорректировкаНДСКредит.НДСКредитПоФакту;
			СуммаКорректировкиСтоимость   = СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимость;
			СуммаКорректировкиСтоимостьНУ = СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимостьНУ;
			
			КодОперацииКорректировкаНУ = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкиНУ;
			Если ВыборкаПоЗатратамНаВыпуск.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч Тогда
				КодОперацииКорректировкаНУ = ВыборкаПоЗатратамНаВыпуск.КодОперации;
			КонецЕсли;	
			
			// Формирование движений по регистру КорректировкиНезавершенноеПроизводствоНалоговыйУчет
			СформироватьДвиженияПоРегиструКорректировкиНалоговыйУчет(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ВыборкаПоЗатратамНаВыпуск,
				НДСКредитИзНЗП,
				НДСКредитПоФакту,
				ВидДвиженияНакопления.Приход,
				НаборЗаписейКорректировкиНезавершенноеПроизводствоНалоговыйУчет
			);
			
			// Проводки БУ по корректировке налогового кредита
			// отcторнируем стоимость БУ и НУ на сумму корректировки НДС по проводкам БУ
			// сторнируем только когда восстанавливаем НДС
			Если СтруктураКорректировкаНДСКредит.ВосстановлениеНДС Тогда
				
				СформироватьПроводкуПоКорректировкеИспользования(
					СтруктураШапкиДокумента,
					ВыборкаПоЗатратамНаВыпуск,
					СуммаКорректировкиСтоимость,
					СуммаКорректировкиСтоимостьНУ,
					РегистрБухгалтерииНаборЗаписей,
					"НЗП"
				);
					
			КонецЕсли;
			
			// Сумма корректировки налогового кредита должна скорректировать Затраты на выпуск продукции БУ
			// Формирование движений по регистру "Затраты на выпуск (БУ)".
			СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииПрямыеЗатраты(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ВыборкаПоЗатратамНаВыпуск,
				Ложь, // РаспределениеЗатратПоБазе,
				РасчетКосвенныхЗатрат, // КосвенныеЗатраты,
				РасчетЗатратВстречногоВыпуска, // ЗатратыВстречногоВыпуска,
				0, // Количество
				СуммаКорректировкиСтоимость,   // Сумма
				СуммаКорректировкиСтоимостьНУ, // СуммаНУ
				0,                       // НДСВходящий
				КорректировкаНДСКредит,  // НДСКредит
				НаборЗаписейЗатратыНаВыпуск,
				КодОперацииКорректировкаНУ, // принудительная установка кода операции
				ВыборкаПоЗатратам.СчетУчета // принудительная установка счета учета по БУ
			);
			
			
			// Приход НЗП БУ по аналитике выпуска 
				
			НоваяСтрокаПриход = НаборЗаписейНезавершенноеПроизводство.Добавить();
			НоваяСтрокаПриход.Активность = Истина;
			НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрокаПриход.Период = СтруктураШапкиДокумента.Период;

			НоваяСтрокаПриход.Организация           = СтруктураШапкиДокумента.Организация;
			НоваяСтрокаПриход.Подразделение         = ВыборкаПоЗатратамНаВыпуск.Подразделение;
			НоваяСтрокаПриход.СтатьяЗатрат          = ВыборкаПоЗатратам.СтатьяЗатрат;
			НоваяСтрокаПриход.НоменклатурнаяГруппа  = ВыборкаПоЗатратамНаВыпуск.НоменклатурнаяГруппа;
			НоваяСтрокаПриход.Заказ                 = ВыборкаПоЗатратамНаВыпуск.Заказ;
			НоваяСтрокаПриход.Затрата               = ВыборкаПоЗатратам.Затрата;
			НоваяСтрокаПриход.ХарактеристикаЗатраты = ВыборкаПоЗатратам.ХарактеристикаЗатраты;
			НоваяСтрокаПриход.СерияЗатраты          = ВыборкаПоЗатратам.СерияЗатраты;
			
			НоваяСтрокаПриход.НалоговоеНазначение   = ВыборкаПоЗатратамНаВыпуск.НалоговоеНазначениеПоФакту;
			НоваяСтрокаПриход.СчетУчета         	= ВыборкаПоЗатратам.СчетУчета;


			НоваяСтрокаПриход.КодОперации           = Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкиНУ;
			НоваяСтрокаПриход.НомерПередела         = НомерПередела;

			НоваяСтрокаПриход.Количество            = 0;
			
			НоваяСтрокаПриход.Стоимость             = СуммаКорректировкиСтоимость;
			НоваяСтрокаПриход.СтоимостьНУ           = СуммаКорректировкиСтоимостьНУ;
			НоваяСтрокаПриход.НДСВходящий           = 0;
			НоваяСтрокаПриход.НДСКредит             = КорректировкаНДСКредит;

			НоваяСтрокаПриход.НеУчитыватьВРасчетеБазы = Ложь; 
			
			Если ВыборкаПоЗатратамНаВыпуск.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч Тогда
				НоваяСтрокаПриход.НеУчитыватьДвиженияПриРасчетеСебестоимости = Ложь;
			Иначе
				НоваяСтрокаПриход.НеУчитыватьДвиженияПриРасчетеСебестоимости = Истина;
			КонецЕсли;	

			// Если в наборе записей 1000 строк, запишем набор.
			Если НаборЗаписейНезавершенноеПроизводство.Количество() = 1000 Тогда
				НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
			КонецЕсли;

			// Расход НЗП по аналитике выпуска 
			НоваяСтрокаРасход = НаборЗаписейНезавершенноеПроизводство.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасход, НоваяСтрокаПриход);
			НоваяСтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;

			НоваяСтрокаРасход.НеУчитыватьВРасчетеБазы = Ложь; 
			Если ВыборкаПоЗатратамНаВыпуск.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч Тогда
				НоваяСтрокаРасход.НеУчитыватьДвиженияПриРасчетеСебестоимости = Ложь;
			Иначе
				НоваяСтрокаРасход.НеУчитыватьДвиженияПриРасчетеСебестоимости = Истина;
			КонецЕсли;	

			НоваяСтрокаРасход.КодОперации           = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеНЗПРегламент;

			// Если в наборе записей 1000 строк, запишем набор.
			Если НаборЗаписейНезавершенноеПроизводство.Количество() = 1000 Тогда
				НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
			КонецЕсли;
			
			// ... корректировки использования в НУ
			
			
		КонецЦикла; // по затратам на выпуск продукции
		
		Если РасчетЗатратВстречногоВыпуска
		   И СтруктураШапкиДокумента.ИтерационныйРасчетЗатратВстречногоВыпуска
		   И ВыборкаПоЗатратам.ВстречныйВыпуск Тогда
		   
			Если ВыборкаПоЗатратам.КоличествоРасход <> 0 Тогда
			   
				СписатьКоличествоИзНЗП = 0;
				
				СписатьСуммаИзНЗП = СписатьСуммаИзНЗП - ВсегоЗатратыНаВыпуск;
				СписатьСуммаНУИзНЗП 	= СписатьСуммаНУИзНЗП - ВсегоЗатратыНаВыпускНУ;
				СписатьНДСВходящийИзНЗП = СписатьНДСВходящийИзНЗП - ВсегоЗатратыНаВыпускНДСВходящий;
				СписатьНДСКредитИзНЗП	= СписатьНДСКредитИзНЗП - ВсегоЗатратыНаВыпускНДСКредит;
				
			КонецЕсли;
		КонецЕсли;
		
		// Формирование движений по регистру "Незавершенное производство".
		СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоЗатратам.СтатьяЗатрат,
			Неопределено, // ХарактерЗатрат,
			ВыборкаПоЗатратам.Затрата,
			ВыборкаПоЗатратам.ХарактеристикаЗатраты,
			ВыборкаПоЗатратам.СерияЗатраты,
			НомерПередела,
			СписатьКоличествоИзНЗП,
			СписатьСуммаИзНЗП,
			СписатьСуммаНУИзНЗП, // СуммаНУ
			СписатьНДСВходящийИзНЗП, // НДСВходящий
			СписатьНДСКредитИзНЗП, // НДСКредит
			ВидДвиженияНакопления.Расход,
			НаборЗаписейНезавершенноеПроизводство
		);
		
	КонецЦикла; // по затратам НЗП
	
КонецПроцедуры // РаспределитьЗатратыИзНезавершенногоПроизводстваНаВыпускПродукции()

// Процедура списания затрат из незавершенного производства на выпуск продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	ЗапросПоНезавершенномуПроизводству - Запрос - Запрос по незавершенному производству
//  ЗапросПоЗатратамНаВыпуск - Запрос - Запрос по затратам на выпуск
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	РасчетКосвенныхЗатрат - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	РасчетЗатратВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска" 
//  СтруктураДвижений - Структура - Наборы движений по регистрам
//
Процедура СписаниеЗатратИзНезавершенногоПроизводстваНаВыпускПродукции(
	СтруктураШапкиДокумента,
	ЗапросПоНезавершенномуПроизводству,
	ЗапросПоЗатратамНаВыпуск,
	НомерПередела,
	РасчетКосвенныхЗатрат,
	РасчетЗатратВстречногоВыпуска,
	СтруктураДвижений
	)
	
	МассивЗатрат = ПолучитьМассивЗатрат(
		СтруктураШапкиДокумента,
		НомерПередела
		);
		
	ЗапросПоНезавершенномуПроизводству.УстановитьПараметр("НомерПередела", НомерПередела);
	ЗапросПоНезавершенномуПроизводству.УстановитьПараметр("МассивЗатрат",  МассивЗатрат);
	
	РезультатЗапросаПоНезавершенномуПроизводству = ЗапросПоНезавершенномуПроизводству.Выполнить();
	
	
	ЗапросПоЗатратамНаВыпуск.УстановитьПараметр("НомерПередела", НомерПередела);
	ЗапросПоЗатратамНаВыпуск.УстановитьПараметр("МассивЗатрат",  МассивЗатрат);
	ЗапросПоЗатратамНаВыпуск.УстановитьПараметр("РасчетКосвенныхЗатрат", РасчетКосвенныхЗатрат);
	ЗапросПоЗатратамНаВыпуск.УстановитьПараметр("РасчетЗатратВстречногоВыпуска", РасчетЗатратВстречногоВыпуска);
	
	РезультатЗапросаПоЗатратамНаВыпуск = ЗапросПоЗатратамНаВыпуск.Выполнить();
	
	Если Не РезультатЗапросаПоНезавершенномуПроизводству.Пустой()
	   И Не РезультатЗапросаПоЗатратамНаВыпуск.Пустой() Тогда
	   
	   РаспределитьЗатратыИзНезавершенногоПроизводстваНаВыпускПродукции(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоНезавершенномуПроизводству,
			РезультатЗапросаПоЗатратамНаВыпуск,
			НомерПередела,
			РасчетКосвенныхЗатрат,
			РасчетЗатратВстречногоВыпуска,
			СтруктураДвижений.ДвиженияНЗП,
			СтруктураДвижений.ДвиженияЗатратыНаВыпуск,
			СтруктураДвижений.Операция,
			?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураДвижений.ДвиженияКорректировкиНЗП_НУ, Неопределено)
		);
	   
   КонецЕсли;
   
   Если СтруктураДвижений.ДвиженияНЗП.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураДвижений.ДвиженияКорректировкиНЗП_НУ.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияКорректировкиНЗП_НУ.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СписаниеЗатратИзНезавершенногоПроизводстваНаВыпускПродукции()

// Процедура определения начального и конечного номера передела.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//
// Выходные параметры
//	НачальныйПередел - Число - Начальный номер передела
//	КонечныйПередел - Число - Конечный номер передела
//	ВсегоПеределов - Число - Максимальный номер передела (без учета способа расчета себестоимости)
//	МинимальныйПередел - Число - Минимальный номер передела (без учета способа расчета себестоимости)
//
Процедура ПолучитьНачальныйИКонечныйНомерПередела(
	СтруктураШапкиДокумента,
	СпособРасчета,
	НачальныйПередел,
	КонечныйПередел,
	ВсегоПеределов = 0,
	МинимальныйПередел = 0
	)
	
	ТекстЗапросаСКомментариями = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА РаспределениеЗатрат.НачальныйПередел > ЕСТЬNULL(ПорядокЗакрытия.МинимальныйПередел, 0)
	|		И ЕСТЬNULL(ПорядокЗакрытия.МинимальныйПередел, 0) <> 0
	|	ТОГДА
	|		ЕСТЬNULL(ПорядокЗакрытия.МинимальныйПередел, 0)
	|	ИНАЧЕ
	|		РаспределениеЗатрат.НачальныйПередел
	|	КОНЕЦ КАК НачальныйПередел,
	|	РаспределениеЗатрат.КонечныйПередел,
	|	РаспределениеЗатратПолное.ВсегоПеределов,
	|	РаспределениеЗатратПолное.МинимальныйПередел
	|ИЗ (	
	|	ВЫБРАТЬ
	|		МИНИМУМ(
	|			ВЫБОР КОГДА РаспределениеЗатрат.Подразделение.ВидПодразделения В (&ВидыПодразделений) ТОГДА
	|				РаспределениеЗатрат.НомерПередела
	|			ИНАЧЕ
	|				9999
	|			КОНЕЦ
	|		) КАК НачальныйПередел,
	|		МАКСИМУМ(
	|			ВЫБОР КОГДА РаспределениеЗатрат.Подразделение.ВидПодразделения В (&ВидыПодразделений) ТОГДА
	|				РаспределениеЗатрат.НомерПередела
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ
	|		) КАК КонечныйПередел
	|		
	|	ИЗ
	|		РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК РаспределениеЗатрат
	|	ГДЕ
	|		РаспределениеЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|		//ДляРеглУчета И РаспределениеЗатрат.Организация = &Организация
	|		
	|	) КАК РаспределениеЗатрат
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			МИНИМУМ(НомерПередела) КАК МинимальныйПередел
	|		ИЗ
	|			РегистрСведений.ПорядокЗакрытияПодразделений%СуффиксОрганизаций%.СрезПоследних(&КонДата, 
	|				Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|				//ДляРеглУчета И Организация = &Организация 
	|				) КАК ПорядокЗакрытия
	|		ГДЕ
	|			НомерПередела <> 0
	|		) КАК ПорядокЗакрытия
	|	ПО
	|		Истина
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			МИНИМУМ(РаспределениеЗатратПолное.НомерПередела) КАК МинимальныйПередел,
	|			МАКСИМУМ(РаспределениеЗатратПолное.НомерПередела) КАК ВсегоПеределов
	|		ИЗ
	|			РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК РаспределениеЗатратПолное
	|		ГДЕ
	|			РаспределениеЗатратПолное.Период МЕЖДУ &НачДата И &КонДата
	|			//ДляРеглУчета И РаспределениеЗатратПолное.Организация = &Организация
	|
	|		) КАК РаспределениеЗатратПолное
	|	ПО
	|		ИСТИНА
	|";	
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПеределам);
	Иначе
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПодразделениям);
	КонецЕсли;
	
	НачальныйПередел = 0;
	КонечныйПередел = 0;
	ВсегоПеределов = 0;
	МинимальныйПередел = 0;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			НачальныйПередел = ?(Выборка.НачальныйПередел = NULL, 0, Выборка.НачальныйПередел);
			КонечныйПередел = ?(Выборка.КонечныйПередел = NULL, 0, Выборка.КонечныйПередел);
			ВсегоПеределов = ?(Выборка.ВсегоПеределов = NULL, 0, Выборка.ВсегоПеределов);
			МинимальныйПередел = ?(Выборка.МинимальныйПередел = NULL, 0, Выборка.МинимальныйПередел);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьНачальныйИКонечныйНомерПередела()

// Процедура производит расчет себестоимости по прямым затратам по переделам.
//
Процедура РасчетПрямыхЗатрат(
	СтруктураШапкиДокумента, 
	СтруктураТаблицДвижений, 
	СпособРасчета, 
	РасчетЗатратВстречногоВыпуска = Ложь
	) Экспорт
	
	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента);
	
	НачальныйПередел = 0;
	КонечныйПередел = 0;
	
	ПолучитьНачальныйИКонечныйНомерПередела(
		СтруктураШапкиДокумента,
		СпособРасчета,
		НачальныйПередел,
		КонечныйПередел
		);
	
	Если НачальныйПередел = 0 ИЛИ КонечныйПередел = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование запроса по незавершенному производству.
	ЗапросПоНезавершенномуПроизводству = СформироватьЗапросПоНезавершенномуПроизводству(
		СтруктураШапкиДокумента,
		СпособРасчета
		);
		
	// Формирование запроса по затратам на выпуск.
	ЗапросПоЗатратамНаВыпуск = СформироватьЗапросПоЗатратамНаВыпуск(
		СтруктураШапкиДокумента,
		СпособРасчета
		);
		
	// Формирование запроса по выпуску продукции и затратам на выпуск.	
	ЗапросПоВыпускуПродукцииИЗатратамНаВыпуск = СформироватьЗапросПоВыпускуПродукцииИЗатратамНаВыпуск(
		СтруктураШапкиДокумента, 
		СпособРасчета,
		Ложь, // КосвенныеЗатраты
		РасчетЗатратВстречногоВыпуска
		);
		
	// Формирование запроса по направлением выпуска продукции.
	ЗапросПоВыпускуПродукции = СформироватьЗапросПоНаправлениямВыпускаПродукции(
		СтруктураШапкиДокумента, 
		СпособРасчета,
		Ложь, // КосвенныеЗатраты
		РасчетЗатратВстречногоВыпуска
		);
		
	// Формирование запроса по способам распределения.	
	ЗапросПоИсключаемымНаправлениямВыпуска = СформироватьЗапросПоИсключаемымНаправлениямВыпуска(
		СтруктураШапкиДокумента, 
		Ложь, // КосвенныеЗатраты
		РасчетЗатратВстречногоВыпуска
		);
		
	// Формирование запроса по коэффициентам распределения по проектам.
	ЗапросРаспределениеПоПроектам = СформироватьЗапросРаспределениеПоПроектам(
		СтруктураШапкиДокумента
		);
	РезультатЗапросаРаспределениеПоПроектам = ЗапросРаспределениеПоПроектам.Выполнить();
	
	
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента);
	
	Для НомерПередела = НачальныйПередел По КонечныйПередел Цикл
		
		ОбщегоНазначения.Сообщение("- Расчет передела № " + НомерПередела + "/" + КонечныйПередел + ".");
		
		// Списание затрат из незавершенного производства на выпуск продукции.
		СписаниеЗатратИзНезавершенногоПроизводстваНаВыпускПродукции(
			СтруктураШапкиДокумента,
			ЗапросПоНезавершенномуПроизводству,
			ЗапросПоЗатратамНаВыпуск,
			НомерПередела,
			Ложь, // РасчетКосвенныхЗатрат
			РасчетЗатратВстречногоВыпуска,
			СтруктураДвижений
		);
		
		ТабТоваров = Новый ТаблицаЗначений;
		ТабТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТабТоваров.Колонки.Добавить("ДокументОприходования");
		ТабТоваров.Колонки.Добавить("СчетУчета");
		
		КорректировкаДвиженийПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ЗапросПоВыпускуПродукцииИЗатратамНаВыпуск,
			ЗапросПоВыпускуПродукции,
			ЗапросПоИсключаемымНаправлениямВыпуска,
			РезультатЗапросаРаспределениеПоПроектам,
			НомерПередела,
			Ложь, // КосвенныеЗатраты
			РасчетЗатратВстречногоВыпуска,
			СтруктураДвижений,
			ТабТоваров
			);
			
		ОбщегоНазначения.Сообщение("- Корректировка списания партий на переделе № " + НомерПередела + "/" + КонечныйПередел + ".");
		
		КорректировкаСтоимости.КорректировкаСписания(
			СтруктураШапкиДокумента.мНачДата, 
			СтруктураШапкиДокумента.мКонДата, 
			ТабТоваров, 
			СтруктураШапкиДокумента.Ссылка,
			СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.ВидОтраженияВУчете,
			?(СтруктураШапкиДокумента.ИтерационныйРасчетЗатратВстречногоВыпуска,
				Ложь,
				РасчетЗатратВстречногоВыпуска
				), // НеСписыватьНаПостоянныеЗатраты 
			Неопределено, // ДопПараметры 
			НомерПередела = КонечныйПередел, // ПоследнийПередел
			?(СтруктураШапкиДокумента.ИтерационныйРасчетЗатратВстречногоВыпуска,
				Ложь,
				РасчетЗатратВстречногоВыпуска
				), // ВстречныйВыпуск
			Истина // РасчетСебестоимостиВыпуска
			);
			
	КонецЦикла;
	
КонецПроцедуры // РасчетПрямыхЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ КОРРЕКТИРОВКИ СТОИМОСТИ ВЫПУСКА ПРОДУКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРАМ "ВЫПУСК ПРОДУКЦИИ" И "ЗАТРАТЫ НА ВЫПУСК ПРОДУКЦИИ"

// Процедура устанавливает параметры запроса по выпуску продукции и затратам на выпуск продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска"
//	Запрос - Запрос.
//
Процедура УстановитьПараметрыЗапросаПоВыпускуПродукцииИЗатратамНаВыпуск(
	СтруктураШапкиДокумента, 
	СпособРасчета, 
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска,
	Запрос
	)
	
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПеределам);
	Иначе
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПодразделениям);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяПродукция", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат", Справочники.СтатьиЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойПроект", Справочники.Проекты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВыпускПродукцииПоФиксированнойСтоимости", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	Запрос.УстановитьПараметр("ВидРасходовПроизводственные", Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	Запрос.УстановитьПараметр("СтатусМатериальныхЗатратПринятые",  Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку);
	
	Запрос.УстановитьПараметр("КодыОперацииОприходование", Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП);
	Запрос.УстановитьПараметр("КодыОперацииВыпускаОприходование", Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП);
	
	МассивКодовОперацийКорректировка = Новый Массив;
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч);
	Запрос.УстановитьПараметр("КодыОперацииКорректировка", МассивКодовОперацийКорректировка);
	
	МассивКодовОперацийВозврат = Новый Массив;
	МассивКодовОперацийВозврат.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодовОперацийВозврат.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП);
	Запрос.УстановитьПараметр("КодыОперацииВозврат", МассивКодовОперацийВозврат);
	
	МассивКодовОперацийВыпускаКорректировка = Новый Массив;
	МассивКодовОперацийВыпускаКорректировка.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч);
	Запрос.УстановитьПараметр("КодыОперацииВыпускаКорректировка", МассивКодовОперацийВыпускаКорректировка);
	
	КодыОперацииВыпускаВозврат = Новый Массив;
	КодыОперацииВыпускаВозврат.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	КодыОперацииВыпускаВозврат.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП);
	Запрос.УстановитьПараметр("КодыОперацииВыпускаВозврат", КодыОперацииВыпускаВозврат);
	
	КодыОперацийФиксСтоимость = Новый Массив;
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПФикс);
	КодыОперацийФиксСтоимость.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗПФикс);
	Запрос.УстановитьПараметр("КодыОперацийФиксСтоимость", КодыОперацийФиксСтоимость);
	
	КодыОперацийВыпускаФиксСтоимость = Новый Массив;
	КодыОперацийВыпускаФиксСтоимость.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	КодыОперацийВыпускаФиксСтоимость.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	КодыОперацийВыпускаФиксСтоимость.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс);
	КодыОперацийВыпускаФиксСтоимость.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс);
	Запрос.УстановитьПараметр("КодыОперацийВыпускаФиксСтоимость", КодыОперацийВыпускаФиксСтоимость);
	
	КодыОперацийСписаниеНаЗатраты = Новый Массив;
	КодыОперацийСписаниеНаЗатраты.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты);
	КодыОперацийСписаниеНаЗатраты.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство);
	Запрос.УстановитьПараметр("КодыОперацийСписаниеНаЗатраты", КодыОперацийСписаниеНаЗатраты);
	
	МассивИсключаемыхСчетовЗатрат = Новый Массив;
	МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.АдминистративныеРасходы);
	МассивИсключаемыхСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	Запрос.УстановитьПараметр("МассивИсключаемыхСчетовЗатрат", МассивИсключаемыхСчетовЗатрат);
	
	МассивИсключаемыхХарактеровЗатрат = Новый Массив;
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.АдминистративныеРасходы);
	МассивИсключаемыхХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.БракВПроизводстве);
	Запрос.УстановитьПараметр("МассивИсключаемыхХарактеровЗатрат", МассивИсключаемыхХарактеровЗатрат);
	
	
КонецПроцедуры // УстановитьПараметрыЗапросаПоВыпускуПродукцииИЗатратамНаВыпуск()

// Функция формирует текст запроса по регистрам "Выпуск продукции" и "Затраты на выпуск продукции".
//
// Возвращаемое значение:
//   Текст – текст запроса по регистрам "Выпуск продукции" и "Затраты на выпуск продукции".
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииИЗатратамНаВыпуск()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РаспределениеПродукцииПоПеределам.Подразделение,
	|	РаспределениеПродукцииПоПеределам.КорректировкаНЗП,
	|	РаспределениеПродукцииПоПеределам.ОприходованиеНЗП,
	|	РаспределениеПродукцииПоПеределам.ВозвратИзНЗП,
	|	РаспределениеПродукцииПоПеределам.Продукция,
	|	РаспределениеПродукцииПоПеределам.ХарактеристикаПродукции,
	|	РаспределениеПродукцииПоПеределам.СерияПродукции,
	|	РаспределениеПродукцииПоПеределам.Продукция.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП
	|
	|ПОМЕСТИТЬ 
	|	Распределение
	|
	|ИЗ			
	|	РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК РаспределениеПродукцииПоПеределам
	|ГДЕ
	|	РаспределениеПродукцииПоПеределам.Период МЕЖДУ &НачДата И &КонДата
	|	И РаспределениеПродукцииПоПеределам.НомерПередела = &НомерПередела
	|	//ДляРеглУчета И РаспределениеПродукцииПоПеределам.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РаспределениеПродукцииПоПеределам.Подразделение,
	|	РаспределениеПродукцииПоПеределам.КорректировкаНЗП,
	|	РаспределениеПродукцииПоПеределам.ОприходованиеНЗП,
	|	РаспределениеПродукцииПоПеределам.ВозвратИзНЗП,
	|	РаспределениеПродукцииПоПеределам.Продукция,
	|	РаспределениеПродукцииПоПеределам.ХарактеристикаПродукции,
	|	РаспределениеПродукцииПоПеределам.СерияПродукции,
	|	РаспределениеПродукцииПоПеределам.Продукция.ВестиУчетПоСериямВНЗП
	|
	|;
	|
	|ВЫБРАТЬ
	|	//ДляРеглУчета ВыпускПродукции.Организация,
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|	//ДляБухУчета  ВыпускПродукции.НалоговоеНазначение,
	| 	
	| 	ВыпускПродукции.ОприходованиеНЗП,
	| 	ВыпускПродукции.КорректировкаНЗП,
	| 	ВыпускПродукции.ВозвратИзНЗП,
	|	
	|	СУММА(ВыпускПродукции.КоличествоОприходование) КАК КоличествоОприходование,
	|	СУММА(ВыпускПродукции.Количество) КАК Количество,
	|
	|	//ДляБухУчета СУММА(ВыпускПродукции.СтоимостьНУ) КАК СтоимостьНУ,
	|	//ДляБухУчета СУММА(ВыпускПродукции.НДСВходящий) КАК НДСВходящий,
	|	//ДляБухУчета СУММА(ВыпускПродукции.НДСКредит)   КАК НДСКредит,
	|
	|	СУММА(ВыпускПродукции.Стоимость) КАК Стоимость,
	|
	|	//ДляБухУчета СУММА(ВыпускПродукции.СуммаНУЗатрат)     КАК СуммаНУЗатрат,
	|	//ДляБухУчета СУММА(ВыпускПродукции.НДСВходящийЗатрат) КАК НДСВходящийЗатрат,
	|	//ДляБухУчета СУММА(ВыпускПродукции.НДСКредитЗатрат)   КАК НДСКредитЗатрат,
	|
	|	СУММА(ВыпускПродукции.СуммаЗатрат) КАК СуммаЗатрат
	|
	|	
	|ИЗ (
	|	ВЫБРАТЬ
	|		//ДляРеглУчета ВыпускПродукции.Организация,
	|		ВыпускПродукции.Подразделение,
	|		ВыпускПродукции.НоменклатурнаяГруппа,
	|		ВыпускПродукции.Продукция,
	|		ВыпускПродукции.ХарактеристикаПродукции,
	|		ВыпускПродукции.СерияПродукции,
	|		ВыпускПродукции.Спецификация,
	|		ВыпускПродукции.Заказ,
	|		//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|       //ДляБухУчета  ВЫБОР КОГДА (ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаКорректировка) ИЛИ ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаВозврат) ИЛИ ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование)) ТОГДА
	|       //ДляБухУчета  	ВыпускПродукции.НалоговоеНазначениеПолучатель
	|       //ДляБухУчета  ИНАЧЕ
	|       //ДляБухУчета  	ВыпускПродукции.НалоговоеНазначение
	|       //ДляБухУчета  КОНЕЦ КАК НалоговоеНазначение,
	|		
	|		ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаКорректировка) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК КорректировкаНЗП,
	|		
	|		ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаВозврат) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК ВозвратИзНЗП,
	|		
	|		ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК ОприходованиеНЗП,
	|		
	|		СУММА(
	|			ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование) ТОГДА
	|				ВыпускПродукции.Количество
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ
	|			) КАК КоличествоОприходование,
	|		
	|		СУММА(ВыпускПродукции.Количество) КАК Количество,
	|
	|  	    //ДляБухУчета СУММА(ВыпускПродукции.СтоимостьНУ) КАК СтоимостьНУ,
	|		//ДляБухУчета СУММА(ВыпускПродукции.НДСВходящий) КАК НДСВходящий,
	|		//ДляБухУчета СУММА(ВыпускПродукции.НДСКредит) КАК НДСКредит,
	|
	|		СУММА(ВыпускПродукции.Стоимость) КАК Стоимость,
	|
	|		//ДляБухУчета 0 КАК СуммаНУЗатрат,
	|		//ДляБухУчета 0 КАК НДСВходящийЗатрат,
	|		//ДляБухУчета 0 КАК НДСКредитЗатрат,
	|
	|		0 КАК СуммаЗатрат
	|	
	|	ИЗ	
	|		РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|		
	|	ГДЕ
	|		ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|		И ВыпускПродукции.Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|		И Не ВыпускПродукции.КодОперации В (&КодыОперацийВыпускаФиксСтоимость)
	|		//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|
	|		И ВыпускПродукции.Продукция В (
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Распределение.Продукция
	|			ИЗ			
	|				Распределение КАК Распределение
	|			)
	|		
	|	СГРУППИРОВАТЬ ПО
	|		//ДляРеглУчета ВыпускПродукции.Организация,
	|		ВыпускПродукции.Подразделение,
	|		ВыпускПродукции.НоменклатурнаяГруппа,
	|		ВыпускПродукции.Продукция,
	|		ВыпускПродукции.ХарактеристикаПродукции,
	|		ВыпускПродукции.СерияПродукции,
	|		ВыпускПродукции.Спецификация,
	|		ВыпускПродукции.Заказ,
	|		//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|       //ДляБухУчета  ВЫБОР КОГДА (ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаКорректировка) ИЛИ ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаВозврат) ИЛИ ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование)) ТОГДА
	|       //ДляБухУчета  	ВыпускПродукции.НалоговоеНазначениеПолучатель
	|       //ДляБухУчета  ИНАЧЕ
	|       //ДляБухУчета  	ВыпускПродукции.НалоговоеНазначение
	|       //ДляБухУчета  КОНЕЦ,
	|		
	|		ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаКорректировка) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ,
	|		
	|		ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаВозврат) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ,
	|		
	|		ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ
	|		
	|	ОБЪЕДИНИТЬ ВСЕ 
	|	
	|	ВЫБРАТЬ
	|		//ДляРеглУчета ЗатратыНаВыпускПродукции.Организация,
	|		ЗатратыНаВыпускПродукции.Подразделение,
	|		ЗатратыНаВыпускПродукции.НоменклатурнаяГруппа,
	|		ЗатратыНаВыпускПродукции.Продукция,
	|		ЗатратыНаВыпускПродукции.ХарактеристикаПродукции,
	|		ЗатратыНаВыпускПродукции.СерияПродукции,
	|		ЗатратыНаВыпускПродукции.Спецификация,
	|		ЗатратыНаВыпускПродукции.Заказ,
	|		//ДляРеглУчета ЗатратыНаВыпускПродукции.СчетУчета,
	|		//ДляБухУчета  ЗатратыНаВыпускПродукции.НалоговоеНазначениеПоФакту,
	|
	|		ВЫБОР КОГДА ЗатратыНаВыпускПродукции.КодОперации В (&КодыОперацииКорректировка) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК КорректировкаНЗП,
	|		
	|		ВЫБОР КОГДА ЗатратыНаВыпускПродукции.КодОперации В (&КодыОперацииВозврат) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК ВозвратИзНЗП,
	|
	|		ВЫБОР КОГДА ЗатратыНаВыпускПродукции.КодОперации В (&КодыОперацииОприходование) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК ОприходованиеНЗП,
	|		
	|		0, // КоличествоОприходование
	|		0, // Количество
	|
	|  	    //ДляБухУчета 0, // СтоимостьНУ
	|		//ДляБухУчета 0, // НДСВходящий
	|		//ДляБухУчета 0, // НДСКредит
	|
	|		0, // Стоимость
	|
	|		//ДляБухУчета СУММА(ЗатратыНаВыпускПродукции.СуммаНУ) КАК СуммаНУЗатрат,
	|		//ДляБухУчета СУММА(ЗатратыНаВыпускПродукции.НДСВходящий) КАК НДСВходящийЗатрат,
	|		//ДляБухУчета СУММА(ЗатратыНаВыпускПродукции.НДСКредит) КАК НДСКредитЗатрат,
	|
	|		СУММА(ЗатратыНаВыпускПродукции.Сумма) КАК СуммаЗатрат
	|
	|	ИЗ
	|		РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпускПродукции
	|	ГДЕ
	|		ЗатратыНаВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|		И ЗатратыНаВыпускПродукции.СтатьяЗатрат.СтатусМатериальныхЗатрат <> &СтатусМатериальныхЗатратПринятые
	|		И ЗатратыНаВыпускПродукции.Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|		И Не ЗатратыНаВыпускПродукции.КодОперации В (&КодыОперацийФиксСтоимость)
	|		//ДляРеглУчета И ЗатратыНаВыпускПродукции.Организация = &Организация
	|
	|		И ЗатратыНаВыпускПродукции.Продукция В (
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Распределение.Продукция
	|			ИЗ			
	|				Распределение КАК Распределение
	|			)
	|			
	|	СГРУППИРОВАТЬ ПО
	|		//ДляРеглУчета ЗатратыНаВыпускПродукции.Организация,
	|		ЗатратыНаВыпускПродукции.Подразделение,
	|		ЗатратыНаВыпускПродукции.НоменклатурнаяГруппа,
	|		ЗатратыНаВыпускПродукции.Продукция,
	|		ЗатратыНаВыпускПродукции.ХарактеристикаПродукции,
	|		ЗатратыНаВыпускПродукции.СерияПродукции,
	|		ЗатратыНаВыпускПродукции.Спецификация,
	|		ЗатратыНаВыпускПродукции.Заказ,
	|		//ДляРеглУчета ЗатратыНаВыпускПродукции.СчетУчета,
	|		//ДляБухУчета  ЗатратыНаВыпускПродукции.НалоговоеНазначениеПоФакту,
	|
	|		ВЫБОР КОГДА ЗатратыНаВыпускПродукции.КодОперации В (&КодыОперацииКорректировка) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ,
	|
	|		ВЫБОР КОГДА ЗатратыНаВыпускПродукции.КодОперации В (&КодыОперацииОприходование) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ,
	|
	|		ВЫБОР КОГДА ЗатратыНаВыпускПродукции.КодОперации В (&КодыОперацииВозврат) ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ
	|		
	|	) КАК ВыпускПродукции
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Распределение КАК Распределение
	|	ПО 
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И (ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|			И Распределение.ВестиУчетПоСериямВНЗП
	|			ИЛИ Не Распределение.ВестиУчетПоСериямВНЗП)
	|		И ВыпускПродукции.КорректировкаНЗП = Распределение.КорректировкаНЗП
	|		И ВыпускПродукции.ВозвратИзНЗП = Распределение.ВозвратИзНЗП
	|		И ВыпускПродукции.ОприходованиеНЗП = Распределение.ОприходованиеНЗП
	|	
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета ВыпускПродукции.Организация,
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|	//ДляБухУчета  ВыпускПродукции.НалоговоеНазначение,
	|	ВыпускПродукции.ОприходованиеНЗП,
	| 	ВыпускПродукции.КорректировкаНЗП,
	| 	ВыпускПродукции.ВозвратИзНЗП
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета ВыпускПродукции.Организация,
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|	//ДляБухУчета  ВыпускПродукции.НалоговоеНазначение,
	|	ВыпускПродукции.ОприходованиеНЗП,
	| 	ВыпускПродукции.КорректировкаНЗП,
	| 	ВыпускПродукции.ВозвратИзНЗП
	|";
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииИЗатратамНаВыпуск()

// Функция формирует запрос по регистрам "Выпуск продукции" и "Затраты на выпуск продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска".
//
// Возвращаемое значение:
//   Запрос – Запрос по регистрам "Выпуск продукции" и "Затраты на выпуск продукции".
//
Функция СформироватьЗапросПоВыпускуПродукцииИЗатратамНаВыпуск(
	СтруктураШапкиДокумента, 
	СпособРасчета,
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоВыпускуПродукцииИЗатратамНаВыпуск();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапросаПоВыпускуПродукцииИЗатратамНаВыпуск(
		СтруктураШапкиДокумента, 
		СпособРасчета, 
		КосвенныеЗатраты,
		ЗатратыВстречногоВыпуска,
		Запрос
		);
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоВыпускуПродукцииИЗатратамНаВыпуск()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРУ "ВЫПУСК ПРОДУКЦИИ"

// Функция формирует текст запроса по регистру "Выпуск продукции".
//
// Возвращаемое значение:
//   Текст – текст запроса по регистру "Выпуск продукции".
//
Функция СформироватьТекстЗапросаПоВыпускуПродукции()

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляУпрУчета ВыпускПродукции.ДокументВыпуска.Организация КАК Организация,
	|	//ДляРеглУчета ВыпускПродукции.Организация,
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	
	|	ВыпускПродукции.Продукция,
	|	ПРЕДСТАВЛЕНИЕ(ВыпускПродукции.Продукция),
	|	ВыпускПродукции.Продукция.Услуга КАК Услуга,
	|	ВыпускПродукции.Продукция.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ВыпускПродукции.Продукция.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	
	|	ВыпускПродукции.ВариантВыпускаПродукции,
	|	ВыпускПродукции.ДокументВыпуска,
	|	ВыпускПродукции.ДокументВыпуска.Дата КАК ДокументВыпускаДата,
	|	//ДляУпрУчета ВыпускПродукции.НомерСтрокиДокумента,
	|	//ДляБухУчета ВыпускПродукции.НомерСтрокиДокумента,
	|	ВыпускПродукции.КодОперации,
	|
	|	//ДляУпрУчета ЕСТЬNULL(ВыпускПродукции.ДокументВыпуска.Проект, &ПустойПроект) КАК ДокументВыпускаПроект,
	|	//ДляУпрУчета ЕСТЬNULL(ПроектыНоменклатуры.Проект, &ПустойПроект) КАК Проект,
	|	
	|	ВыпускПродукции.ПодразделениеПолучатель,
	|	ВыпускПродукции.НоменклатурнаяГруппаПолучатель,
	|	
	|	ВыпускПродукции.СтатьяЗатратПолучатель,
	|	ВыпускПродукции.СтатьяЗатратПоВозврату,
	|
	|	//ДляУпрУчета ВыпускПродукции.ОбъектСтроительства,
	|	//ДляБухУчета ВыпускПродукции.ОбъектСтроительства,
	|	
	|	ВЫБОР КОГДА Не ВыпускПродукции.СтатьяЗатратПоВозврату = &ПустаяСтатьяЗатрат ТОГДА
	|		ВыпускПродукции.СтатьяЗатратПоВозврату.ВидЗатрат
	|	ИНАЧЕ
	|		ВыпускПродукции.СтатьяЗатратПолучатель.ВидЗатрат
	|	КОНЕЦ КАК ВидЗатрат,
	|	
	|	ВЫБОР КОГДА Не ВыпускПродукции.СтатьяЗатратПоВозврату = &ПустаяСтатьяЗатрат ТОГДА
	|		ВыпускПродукции.СтатьяЗатратПоВозврату.ХарактерЗатрат
	|	ИНАЧЕ
	|		ВыпускПродукции.СтатьяЗатратПолучатель.ХарактерЗатрат
	|	КОНЕЦ КАК ХарактерЗатрат,
	|	
	|	ВыпускПродукции.СкладПолучатель,
	|	ВыпускПродукции.Качество,
	|	//ДляУпрУчета ВыпускПродукции.СтатусПартии,
	|	
	|	ВыпускПродукции.ЗаказПолучатель,
	|	ВыпускПродукции.ЗаказПолучатель.ВидОперации КАК ВидОперации,
	|	ЕСТЬNULL(
	|		ВыпускПродукции.ЗаказПолучатель.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|		Ложь
	|		) КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|		
	|	ВыпускПродукции.ПродукцияПолучатель,
	|	ВыпускПродукции.ХарактеристикаПродукцииПолучатель,
	|	ВыпускПродукции.СерияПродукцииПолучатель,
	|		
	|	//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|	//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП КАК СчетЗатрат,
	|	//ДляРеглУчета ВыпускПродукции.СчетДт,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт1,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт2,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт3,
	|
	|	//ДляБухУчета ВыпускПродукции.НалоговоеНазначение,
	|	//ДляБухУчета ВыпускПродукции.НалоговоеНазначениеПолучатель,
	|	
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаКорректировка) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК КорректировкаНЗП,
	|			
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаВозврат) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ВозвратИзНЗП,
	|			
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ОприходованиеНЗП,
	|
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацийСписаниеНаЗатраты)
	|		//ДляУпрУчета И ВыпускПродукции.СтатьяЗатратПолучатель.ХарактерЗатрат В (&МассивИсключаемыхХарактеровЗатрат)
	|		//ДляРеглУчета И ВыпускПродукции.СчетДт В ИЕРАРХИИ (&МассивИсключаемыхСчетовЗатрат)
	|	ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ПроверятьНаправлениеВыпуска,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование) ТОГДА
	|			ВыпускПродукции.Количество
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|		) КАК КоличествоОприходование,
	|	
	|	СУММА(ВыпускПродукции.Количество) КАК Количество,
	|
	|	//ДляБухУчета СУММА(ВыпускПродукции.СтоимостьНУ) КАК СтоимостьНУ,
	|	//ДляБухУчета СУММА(ВыпускПродукции.НДСВходящий) КАК НДСВходящий,
	|	//ДляБухУчета СУММА(ВыпускПродукции.НДСКредит)   КАК НДСКредит,
	|
	|	СУММА(ВыпускПродукции.Стоимость) КАК Стоимость
	|	
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|
	|	//ДляУпрУчета ЛЕВОЕ СОЕДИНЕНИЕ 
	|	//ДляУпрУчета 	РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(&КонДата, 
	|	//ДляУпрУчета 		НоменклатураПроекта В (
	|	//ДляУпрУчета			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	//ДляУпрУчета				Распределение.Продукция
	|	//ДляУпрУчета			ИЗ			
	|	//ДляУпрУчета				РегистрСведений.РаспределениеПродукцииПоПеределам КАК Распределение
	|	//ДляУпрУчета			ГДЕ
	|	//ДляУпрУчета				Распределение.Период МЕЖДУ &НачДата И &КонДата
	|	//ДляУпрУчета				И Распределение.НомерПередела = &НомерПередела
	|	//ДляУпрУчета			)
	|	//ДляУпрУчета		) КАК ПроектыНоменклатуры
	|	//ДляУпрУчета	ПО 
	|	//ДляУпрУчета		ВыпускПродукции.Продукция = ПроектыНоменклатуры.НоменклатураПроекта
	|	
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|	И Не ВыпускПродукции.КодОперации В (&КодыОперацийВыпускаФиксСтоимость)
	|	
	|	И ВыпускПродукции.Подразделение В (
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Распределение.Подразделение
	|			ИЗ			
	|				РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК Распределение
	|			ГДЕ
	|				Распределение.Период МЕЖДУ &НачДата И &КонДата
	|				И Распределение.НомерПередела = &НомерПередела
	|				//ДляРеглУчета И Распределение.Организация = &Организация
	|			)
	|	И ВыпускПродукции.Продукция В (
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Распределение.Продукция
	|			ИЗ			
	|				РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК Распределение
	|			ГДЕ
	|				Распределение.Период МЕЖДУ &НачДата И &КонДата
	|				И Распределение.НомерПередела = &НомерПередела
	|				//ДляРеглУчета И Распределение.Организация = &Организация
	|			)
	|
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета ВыпускПродукции.Организация,
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	
	|	ВыпускПродукции.ВариантВыпускаПродукции,
	|	ВыпускПродукции.ДокументВыпуска,
	|	//ДляУпрУчета ВыпускПродукции.НомерСтрокиДокумента,
	|	//ДляБухУчета ВыпускПродукции.НомерСтрокиДокумента,
	|	ВыпускПродукции.КодОперации,
	|	
	|	//ДляУпрУчета ЕСТЬNULL(ВыпускПродукции.ДокументВыпуска.Проект, &ПустойПроект),
	|	//ДляУпрУчета ЕСТЬNULL(ПроектыНоменклатуры.Проект, &ПустойПроект),
	|
	|	ВыпускПродукции.ПодразделениеПолучатель,
	|	ВыпускПродукции.НоменклатурнаяГруппаПолучатель,
	|	ВыпускПродукции.СтатьяЗатратПолучатель,
	|	ВыпускПродукции.СтатьяЗатратПоВозврату,
	|
	|	//ДляУпрУчета ВыпускПродукции.ОбъектСтроительства,
	|	//ДляБухУчета ВыпускПродукции.ОбъектСтроительства,
	|	
	|	ВЫБОР КОГДА Не ВыпускПродукции.СтатьяЗатратПоВозврату = &ПустаяСтатьяЗатрат ТОГДА
	|		ВыпускПродукции.СтатьяЗатратПоВозврату.ВидЗатрат
	|	ИНАЧЕ
	|		ВыпускПродукции.СтатьяЗатратПолучатель.ВидЗатрат
	|	КОНЕЦ,
	|	
	|	ВЫБОР КОГДА Не ВыпускПродукции.СтатьяЗатратПоВозврату = &ПустаяСтатьяЗатрат ТОГДА
	|		ВыпускПродукции.СтатьяЗатратПоВозврату.ХарактерЗатрат
	|	ИНАЧЕ
	|		ВыпускПродукции.СтатьяЗатратПолучатель.ХарактерЗатрат
	|	КОНЕЦ,
	|	
	|	ВыпускПродукции.СкладПолучатель,
	|	ВыпускПродукции.Качество,
	|	//ДляУпрУчета ВыпускПродукции.СтатусПартии,
	|	
	|	ВыпускПродукции.ЗаказПолучатель,
	|	ЕСТЬNULL(
	|		ВыпускПродукции.ЗаказПолучатель.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|		Ложь
	|		),
	|	
	|	ВыпускПродукции.ПродукцияПолучатель,
	|	ВыпускПродукции.ХарактеристикаПродукцииПолучатель,
	|	ВыпускПродукции.СерияПродукцииПолучатель,
	|		
	|	//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|	//ДляРеглУчета ВыпускПродукции.СчетДт,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт1,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт2,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт3,
	|
	|	//ДляБухУчета ВыпускПродукции.НалоговоеНазначение,
	|	//ДляБухУчета ВыпускПродукции.НалоговоеНазначениеПолучатель,
	|	
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаКорректировка) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ,
	|
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаВозврат) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ,
	|
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета ВыпускПродукции.Организация,
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.Заказ,
	|	//ДляРеглУчета ВыпускПродукции.СчетУчетаНЗП,
	|	//ДляБухУчета ВыпускПродукции.НалоговоеНазначение,
	|	
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаКорректировка) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ,
	|
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаВозврат) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ,
	|
	|	ВЫБОР КОГДА ВыпускПродукции.КодОперации В (&КодыОперацииВыпускаОприходование) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ,
	|	
	|	ВыпускПродукции.ВариантВыпускаПродукции,
	|	ВыпускПродукции.ДокументВыпуска,
	|	//ДляУпрУчета ВыпускПродукции.НомерСтрокиДокумента,
	|	//ДляБухУчета ВыпускПродукции.НомерСтрокиДокумента,
	|	ВыпускПродукции.КодОперации,
	|	
	|	ВыпускПродукции.ПодразделениеПолучатель,
	|	ВыпускПродукции.НоменклатурнаяГруппаПолучатель,
	|	ВыпускПродукции.СтатьяЗатратПолучатель,
	|	ВыпускПродукции.СтатьяЗатратПоВозврату,
	|	ВыпускПродукции.СкладПолучатель,
	|	ВыпускПродукции.Качество,
	|	//ДляУпрУчета ВыпускПродукции.СтатусПартии,
	|	//ДляУпрУчета ВыпускПродукции.ОбъектСтроительства,
	|	//ДляБухУчета ВыпускПродукции.ОбъектСтроительства,
	|	ВыпускПродукции.ЗаказПолучатель,
	|		
	|	//ДляРеглУчета ВыпускПродукции.СчетДт,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт1,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт2,
	|	//ДляРеглУчета ВыпускПродукции.СубконтоДт3,
	|
	|	//ДляБухУчета ВыпускПродукции.НалоговоеНазначениеПолучатель,
	|	
	|	ВыпускПродукции.ПродукцияПолучатель,
	|	ВыпускПродукции.ХарактеристикаПродукцииПолучатель,
	|	ВыпускПродукции.СерияПродукцииПолучатель
	|";	

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукции()

// Функция формирует запрос по регистру "Выпуск продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска".
//
// Возвращаемое значение:
//   Запрос – Запрос по регистру "Выпуск продукции".
//
Функция СформироватьЗапросПоНаправлениямВыпускаПродукции(
	СтруктураШапкиДокумента, 
	СпособРасчета,
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоВыпускуПродукции();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапросаПоВыпускуПродукцииИЗатратамНаВыпуск(
		СтруктураШапкиДокумента, 
		СпособРасчета, 
		КосвенныеЗатраты,
		ЗатратыВстречногоВыпуска,
		Запрос
		);
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоНаправлениямВыпускаПродукции()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ЗАПРОСА ДЛЯ ОПРЕДЕЛЕНИЯ НАПРАВЛЕНИЙ ВЫПУСКА, ИСКЛЮЧАЕМЫХ ИЗ КОРРЕКТИРОВКИ

// Функция формирует текст запроса для получения направлений списания продукции, исключаемых из корректировки.
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоИсключаемымНаправлениямВыпуска()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Распределение.Подразделение,
	|	Распределение.НоменклатурнаяГруппа,
	|	Распределение.СтатьяЗатрат,
	|	Распределение.Затрата,
	|	Распределение.ХарактеристикаЗатраты,
	|	Распределение.СерияЗатраты
	|ИЗ			
	|	РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК Распределение
	|ГДЕ
	|	Распределение.Период МЕЖДУ &НачДата И &КонДата
	|	И Распределение.ВстречныйВыпуск
	|	И &ЗатратыВстречногоВыпуска
	|	И Не &ИтерационныйРасчетЗатратВстречногоВыпуска
	|	//ДляРеглУчета И Распределение.Организация = &Организация
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Корректировка.Подразделение,
	|	Корректировка.НоменклатурнаяГруппа,
	|	Корректировка.СтатьяЗатрат,
	|	Корректировка.Затрата,
	|	Корректировка.ХарактеристикаЗатраты,
	|	Корректировка.СерияЗатраты
	|ИЗ			
	|	РегистрСведений.КорректировкаВстречногоВыпускаПродукции КАК Корректировка
	|ГДЕ
	|	Корректировка.Период МЕЖДУ &НачДата И &КонДата
	|	И Корректировка.Документ = Неопределено
	|	//ДляУпрУчета И Корректировка.ОтражатьВУправленческомУчете
	|	//ДляРеглУчета И Корректировка.ОтражатьВБухгалтерскомУчете
	|	//ДляРеглУчета И Корректировка.Организация = &Организация
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	НоменклатурнаяГруппа,
	|	СтатьяЗатрат,
	|	Затрата,
	|	ХарактеристикаЗатраты,
	|	СерияЗатраты
	|";	

	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаПоИсключаемымНаправлениямВыпуска()

// Функция формирует запрос для получения направлений списания продукции, исключаемых из корректировки.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска".
//
// Возвращаемое значение:
//   Запрос – Запрос по исключаемым направлениям выпуска
//
Функция СформироватьЗапросПоИсключаемымНаправлениямВыпуска(
	СтруктураШапкиДокумента, 
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска
	)
	
	Запрос = Новый Запрос;
	
	Если КосвенныеЗатраты ИЛИ ЗатратыВстречногоВыпуска Тогда
		
		ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоИсключаемымНаправлениямВыпуска();
		ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
			ТекстЗапросаСКомментариями, 
			СтруктураШапкиДокумента.ВидОтраженияВУчете
		);
		Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
		Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("ЗатратыВстречногоВыпуска", ЗатратыВстречногоВыпуска);
		Запрос.УстановитьПараметр("ИтерационныйРасчетЗатратВстречногоВыпуска", СтруктураШапкиДокумента.ИтерационныйРасчетЗатратВстречногоВыпуска);
		
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL
		|";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоИсключаемымНаправлениямВыпуска()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРА ФОРМИРОВАНИЯ ЗАПРОСА ДЛЯ ОПРЕДЕЛЕНИЯ КОЭФФИЦИЕНТОВ РАСПРЕДЕЛЕНИЯ ПО ПРОЕКТАМ

// Функция формирует запрос по коэффициентам распределения по проектам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//
// Возвращаемое значение:
//	Запрос - Запрос по коэффициентам распределения по проектам.
//
Функция СформироватьЗапросРаспределениеПоПроектам(
	СтруктураШапкиДокумента
	)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	РаспределениеПоПроектам.ВидРаспределения,
		|	РаспределениеПоПроектам.Проект,
		|	РаспределениеПоПроектам.ДоляРаспределения
		|ИЗ
		|	РегистрСведений.РаспределениеПоПроектам.СрезПоследних(&КонДата, ) КАК РаспределениеПоПроектам
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			РаспределениеПоПроектам.ВидРаспределения,
		|			МАКСИМУМ(РаспределениеПоПроектам.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.РаспределениеПоПроектам.СрезПоследних(&КонДата, ) КАК РаспределениеПоПроектам
		|		СГРУППИРОВАТЬ ПО
		|			РаспределениеПоПроектам.ВидРаспределения
		|		) КАК РаспределениеПоПроектамПериод
		|	ПО
		|		РаспределениеПоПроектам.ВидРаспределения = РаспределениеПоПроектамПериод.ВидРаспределения
		|		И РаспределениеПоПроектам.Период = РаспределениеПоПроектамПериод.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаспределениеПоПроектам.ВидРаспределения,
		|	РаспределениеПоПроектам.Проект
		|";
	
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL
		|";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросРаспределениеПоПроектам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ НАКОПЛЕНИЯ ПО НАПРАВЛЕНИЯМ ВЫПУСКА

// Процедура формирует движение по регистру "Выпуск продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//  СуммаКорректировки - Число - Сумма корректировки
//	НаборЗаписейВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Выпуск продукции".
//
Процедура СформироватьДвиженияПоРегиструВыпускПродукции(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СуммаКорректировки,
	СуммаНУКорректировки,
	НДСВходящийКорректировки,
	НДСКредитКорректировки,
	НаборЗаписейВыпускПродукции
	)
	
	Если СуммаКорректировки = 0
		И СуммаНУКорректировки = 0 И НДСВходящийКорректировки = 0 И НДСКредитКорректировки = 0 
		Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = НаборЗаписейВыпускПродукции.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	НоваяСтрока.Количество  = 0;
	НоваяСтрока.Стоимость = СуммаКорректировки;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		НоваяСтрока.СтоимостьНУ  = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначениеПолучатель, СуммаНУКорректировки);
		НоваяСтрока.НДСВходящий  = НДСВходящийКорректировки;
		НоваяСтрока.НДСКредит    = НДСКредитКорректировки;
		
		
	КонецЕсли; 

	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейВыпускПродукции.Количество() = 1000 Тогда
		НаборЗаписейВыпускПродукции.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструВыпускПродукции()

// Функция получает способ ведения партионного учета для организации по данным соответствия
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	Организация - СправочникСсылка.Организации - Текущая организация
//
Функция ПолучитьСпособВеденияПартионногоУчетаПоОрганизацииИзСоответствия(
	СтруктураШапкиДокумента,
	Организация
	)
	
	СпособыВеденияПартионногоУчетаПоОрганизациям = СтруктураШапкиДокумента.СпособыВеденияПартионногоУчетаПоОрганизациям;
	СпособВеденияПартионногоУчетаПоОрганизации = СпособыВеденияПартионногоУчетаПоОрганизациям.Получить(Организация);
	
	Возврат СпособВеденияПартионногоУчетаПоОрганизации;
	
КонецФункции // ПолучитьСпособВеденияПартионногоУчетаПоОрганизацииИзСоответствия()

// Процедура формирует движение по регистру "Партии товаров на складах".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//  СуммаКорректировки - Число - Сумма корректировки
//	НаборЗаписейПартииТоваровНаСкладах - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Партии товаров на складах".
//
Процедура СформироватьДвиженияПоРегиструПартииТоваровНаСкладах(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СуммаКорректировки,
	СуммаНУКорректировки,
	НДСВходящийКорректировки,
	НДСКредитКорректировки,
	НаборЗаписейПартииТоваровНаСкладах
	)
	
	Если СуммаКорректировки = 0
		И СуммаНУКорректировки = 0 И НДСВходящийКорректировки = 0 И НДСКредитКорректировки = 0  
		Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		СпособВеденияПартионногоУчетаПоОрганизации = ПолучитьСпособВеденияПартионногоУчетаПоОрганизацииИзСоответствия(
			СтруктураШапкиДокумента,
			СтрокаВыборки.Организация
		);
		Если СпособВеденияПартионногоУчетаПоОрганизации = Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// В движениях по регистру "Партии товаров на складах" должны быть заполнены измерения:
	//	- Номенклатура,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Склад - заполняется, если ведется суммовой учет по складам
	//		склад не заполняется для продукции, выпущенной из давальческого сырья (при указании заказа покупателя: переработка),
	//	- ХарактеристикаНоменклатуры,
	//	- СерияНоменклатуры - заполняется, если ведется партионный учет по сериям,
	//	- ДокументОприходования - заполняется, если не используется способ списания МПЗ "По средней",
	//	- СтатусПартии - заполняется только при отражении документа в управленческом учете,
	//	- Заказ - заполняется, если в заказе покупателя указан договор с установленным флажком "Вести учет товаров по заказам покупателей"
	//		или если указан заказ покупателя: переработка.
	//	- Качество,
	//  - НалоговоеНазначение - заполняется только при отражении документа в налоговом учете,
	//
	// В движениях должны быть заполнены реквизиты:
	//	- КодОперации - записывается код операции "Выпуск по операции стоимость",
	//	- ДокументДвижения - документ, движения которого корректируются по фактической стоимости.
	//	- ДокументДвиженияПериод - период документа движения
	
	
	НоваяСтрока = НаборЗаписейПартииТоваровНаСкладах.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	НоваяСтрока.Номенклатура = СтрокаВыборки.Продукция;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ОрганизацияУпр = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(
			СтрокаВыборки.Организация,
			СпособВеденияПартионногоУчетаПоОрганизации
		);
		НоваяСтрока.Организация = ОрганизацияУпр;
		
		Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам
		   И Не СтрокаВыборки.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			НоваяСтрока.Склад = СтрокаВыборки.СкладПолучатель;
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		  ИЛИ СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
		  
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;		  
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;
		  
		Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл
		   И Не СтрокаВыборки.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			НоваяСтрока.Склад = СтрокаВыборки.СкладПолучатель;
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаВыборки.ХарактеристикаПродукции;
	
	Если СтрокаВыборки.ВестиПартионныйУчетПоСериям Тогда
		НоваяСтрока.СерияНоменклатуры = СтрокаВыборки.СерияПродукции;
	Иначе
		НоваяСтрока.СерияНоменклатуры = Неопределено;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.УчетПоСредней Тогда
		НоваяСтрока.ДокументОприходования = СтрокаВыборки.ДокументВыпуска;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Если ЗначениеЗаполнено(СтрокаВыборки.СтатусПартии) Тогда
			НоваяСтрока.СтатусПартии = СтрокаВыборки.СтатусПартии;
		Иначе
			НоваяСтрока.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаВыборки.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка
	 ИЛИ СтрокаВыборки.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
		НоваяСтрока.Заказ = СтрокаВыборки.ЗаказПолучатель;
	КонецЕсли;
		
	НоваяСтрока.Качество = СтрокаВыборки.Качество;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.НалоговоеНазначение = СтрокаВыборки.НалоговоеНазначениеПолучатель;
	КонецЕсли; 
	
	Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч Тогда
		НоваяСтрока.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзПроизводстваРасч;
	Иначе
		НоваяСтрока.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВыпускПоОперацииСтоимость;
	КонецЕсли;
	НоваяСтрока.ДокументДвижения = СтрокаВыборки.ДокументВыпуска;	
	НоваяСтрока.ДокументДвиженияПериод = СтрокаВыборки.ДокументВыпускаДата;
	
	НоваяСтрока.Стоимость = СуммаКорректировки;
	НоваяСтрока.Количество  = 0;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		НоваяСтрока.СтоимостьНУ = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначение, СуммаНУКорректировки);
		НоваяСтрока.НДСВходящий = НДСВходящийКорректировки;
		НоваяСтрока.НДСКредит   = НДСКредитКорректировки;
		
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейПартииТоваровНаСкладах.Количество() = 1000 Тогда
		НаборЗаписейПартииТоваровНаСкладах.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструПартииТоваровНаСкладах()

// Процедура формирует движение по регистру "Незавершенное производство".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	НомерПередела - Число - Текущий номер передела
//  СуммаКорректировки - Число - Сумма корректировки
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство".
//
Процедура СформироватьДвиженияПоРегиструНезавершенноеПроизводство(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	НомерПередела,
	СуммаКорректировки,
	СуммаНУКорректировки,
	НДСВходящийКорректировки,
	НДСКредитКорректировки,
	НаборЗаписейНезавершенноеПроизводство
	)
	
	Если СуммаКорректировки = 0
		И СуммаНУКорректировки = 0
		И НДСВходящийКорректировки = 0
		И НДСКредитКорректировки = 0
		Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Незавершенное производство" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Затрата - всегда заполняется в случае указания статей затрат с видом затрат "Материальные",
	//		для нематериальных статей затрат должен заполнятся способ распределения затрат.
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты - заполняется, если ведется учет по сериям в НЗП
	//	- НалоговоеНазначение - заполняется только при отражении документа в бухгалтерском учете
	
	
	НоваяСтрока = НаборЗаписейНезавершенноеПроизводство.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		
		Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП Тогда
			СчетДт = СтрокаВыборки.СчетЗатрат;
		Иначе
			СчетДт = СтрокаВыборки.СчетДт;
		КонецЕсли;
		
		НоваяСтрока.СчетУчета = СчетДт;
		
	КонецЕсли;
	
	НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеПолучатель;
	НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппаПолучатель;
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатратПолучатель;
	НоваяСтрока.Заказ = СтрокаВыборки.ЗаказПолучатель;
	
	Если СтрокаВыборки.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
		
		НоваяСтрока.Затрата = СтрокаВыборки.Продукция;
		
		Если Не СтрокаВыборки.Услуга Тогда
			
			НоваяСтрока.ХарактеристикаЗатраты = СтрокаВыборки.ХарактеристикаПродукции;
		
			Если СтрокаВыборки.ВестиУчетПоСериямВНЗП Тогда
				НоваяСтрока.СерияЗатраты = СтрокаВыборки.СерияПродукции;
			Иначе
				НоваяСтрока.СерияЗатраты = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП Тогда
			НоваяСтрока.НалоговоеНазначение = СтрокаВыборки.НалоговоеНазначение;
		Иначе
			НоваяСтрока.НалоговоеНазначение = СтрокаВыборки.НалоговоеНазначениеПолучатель;
		КонецЕсли;
	КонецЕсли; 
	
	Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП Тогда
		НоваяСтрока.КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.ОприходованиеНЗП;
	Иначе
		НоваяСтрока.КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.ВнутренниеУслугиНаПроизводство;
	КонецЕсли;
	
	НоваяСтрока.НомерПередела = НомерПередела;
	
	НоваяСтрока.Стоимость = СуммаКорректировки;
	НоваяСтрока.Количество  = 0;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СтоимостьНУ = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначение, СуммаНУКорректировки);
		НоваяСтрока.НДСВходящий = НДСВходящийКорректировки;
		НоваяСтрока.НДСКредит = НДСКредитКорректировки;
	КонецЕсли; 
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейНезавершенноеПроизводство.Количество() = 1000 Тогда
		НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструНезавершенноеПроизводство()

// Процедура формирует движение по регистру "Затраты".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//  СуммаКорректировки - Число - Сумма корректировки
//	НаборЗаписейЗатраты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты".
//
Процедура СформироватьДвиженияПоРегиструЗатраты(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СуммаКорректировки,
	СуммаНУКорректировки,
	НДСВходящийКорректировки,
	НДСКредитКорректировки,
	НаборЗаписейЗатраты
	)
	
	Если СуммаКорректировки = 0
		И СуммаНУКорректировки = 0
		И НДСВходящийКорректировки = 0
		И НДСКредитКорректировки = 0
		Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И СтрокаВыборки.ХарактерЗатрат = Перечисления.ХарактерЗатрат.НеУчитываемыеВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- НалоговоеНазначение - заполняется только при отражении документа в бухгалтерском учете
	
	НоваяСтрока = НаборЗаписейЗатраты.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеПолучатель;
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатратПолучатель;
	НоваяСтрока.Заказ = СтрокаВыборки.ЗаказПолучатель;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И СтрокаВыборки.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
		НоваяСтрока.НоменклатурнаяГруппа = Неопределено;
	Иначе
		НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппаПолучатель;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;
	КонецЕсли;
	
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийЗатраты.ВнутренниеУслугиНаПостоянныеЗатраты;
	
	НоваяСтрока.Сумма = СуммаКорректировки;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		НоваяСтрока.НалоговоеНазначение  = СтрокаВыборки.НалоговоеНазначениеПолучатель;
		
		НоваяСтрока.СуммаНУ = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначение, СуммаНУКорректировки);
		НоваяСтрока.НДСВходящий = НДСВходящийКорректировки;
		НоваяСтрока.НДСКредит = НДСКредитКорректировки;
		
	КонецЕсли; 
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатраты.Количество() = 1000 Тогда
		НаборЗаписейЗатраты.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатраты()

// Процедура формирует движение по регистру "Брак в производстве".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//  СуммаКорректировки - Число - Сумма корректировки
//	НаборЗаписейБракВПроизводстве - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Брак в производстве".
//
Процедура СформироватьДвиженияПоРегиструБракВПроизводстве(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СуммаКорректировки,
	СуммаНУКорректировки,
	НДСВходящийКорректировки,
	НДСКредитКорректировки,
	НаборЗаписейБракВПроизводстве
	)
	
	Если СуммаКорректировки = 0
		И СуммаНУКорректировки = 0 
		И НДСВходящийКорректировки = 0 
		И НДСКредитКорректировки = 0 
		Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Брак в производстве" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции,
	//	- НалоговоеНазначение - заполняется только при отражении документа в бухгалтерском учете,
	
	
	НоваяСтрока = НаборЗаписейБракВПроизводстве.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеПолучатель;
	НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппаПолучатель;
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатратПолучатель;
	НоваяСтрока.Заказ = СтрокаВыборки.ЗаказПолучатель;
	
	НоваяСтрока.Продукция = СтрокаВыборки.ПродукцияПолучатель;
	НоваяСтрока.ХарактеристикаПродукции = СтрокаВыборки.ХарактеристикаПродукцииПолучатель;
	НоваяСтрока.СерияПродукции = СтрокаВыборки.СерияПродукцииПолучатель;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;	
	КонецЕсли;
	
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийБракВПроизводстве.ВнутренниеУслугиНаПостоянныеЗатраты;
	
	НоваяСтрока.Сумма = СуммаКорректировки;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		НоваяСтрока.НалоговоеНазначение = СтрокаВыборки.НалоговоеНазначениеПолучатель;
		
		НоваяСтрока.СуммаНУ = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначение, СуммаНУКорректировки);
		НоваяСтрока.НДСВходящий = НДСВходящийКорректировки;
		НоваяСтрока.НДСКредит = НДСКредитКорректировки;
		
	КонецЕсли; 
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейБракВПроизводстве.Количество() = 1000 Тогда
		НаборЗаписейБракВПроизводстве.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструБракВПроизводстве()

// Процедура формирует движение по регистру "Продажи себестоимость".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	Проект - СправочникСсылка.Проекты - Проект
//  СуммаКорректировки - Число - Сумма корректировки
//	НаборЗаписейПродажиСебестоимость - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Продажи себестоимость".
//
Процедура СформироватьДвиженияПоРегиструПродажиСебестоимость(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Проект,
	СуммаКорректировки,
	НаборЗаписейПродажиСебестоимость,
	ПризнакДокументаДвижения = Ложь
	)
	
	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Продажи себестоимость" должны быть заполнены измерения:
	//	- Номенклатура
	//	- ХарактеристикаНоменклатуры
	//	- ЗаказПокупателя
	//	- ДокументОприходования
	//	- Подразделение
	//	- Проект
	//
	// Ресурсы:
	//	- Стоимость
	
	НоваяСтрока = НаборЗаписейПродажиСебестоимость.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	НоваяСтрока.Номенклатура = СтрокаВыборки.Продукция;
	НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаВыборки.ХарактеристикаПродукции;
	НоваяСтрока.ЗаказПокупателя = СтрокаВыборки.Заказ;
	НоваяСтрока.ДокументОприходования = СтрокаВыборки.ДокументВыпуска;
	НоваяСтрока.Подразделение = СтрокаВыборки.Подразделение;
	
	НоваяСтрока.Проект = Проект;
	
	Если НЕ ПризнакДокументаДвижения Тогда
		НоваяСтрока.ДокументДвижения = СтрокаВыборки.ДокументВыпуска;
		НоваяСтрока.ДокументДвиженияПериод = СтрокаВыборки.ДокументВыпускаДата;
	Иначе	
		НоваяСтрока.ДокументДвижения = СтрокаВыборки.ДокументДвижения;
		НоваяСтрока.ДокументДвиженияПериод = СтрокаВыборки.ДокументДвиженияПериод;
		НоваяСтрока.СписаниеПартий = Истина;
	КонецЕсли; 
	
		
	НоваяСтрока.Стоимость = СуммаКорректировки;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейПродажиСебестоимость.Количество() = 1000 Тогда
		НаборЗаписейПродажиСебестоимость.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструПродажиСебестоимость()

// Процедура формирует движение по регистру "Строительство объектов основных средств".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//  СуммаКорректировки - Число - Сумма корректировки
//	НаборЗаписейСтроительствоОбъектовОсновныхСредств - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Строительство объектов основных средств".
//
Процедура СформироватьДвиженияПоРегиструСтроительствоОбъектовОсновныхСредств(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СуммаКорректировки,
	СуммаНУКорректировки,
	НДСВходящийКорректировки,
	НДСКредитКорректировки,
	НаборЗаписейСтроительствоОбъектовОсновныхСредств
	)
	
	Если СуммаКорректировки = 0 И СуммаНУКорректировки = 0 И НДСВходящийКорректировки = 0 И НДСКредитКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = НаборЗаписейСтроительствоОбъектовОсновныхСредств.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	НоваяСтрока.ОбъектСтроительства = СтрокаВыборки.ОбъектСтроительства;
	
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;	
		НоваяСтрока.НалоговоеНазначение = СтрокаВыборки.НалоговоеНазначениеПолучатель;
		
		НоваяСтрока.Стоимость   = СуммаКорректировки;
		НоваяСтрока.СтоимостьНУ = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначение, СуммаНУКорректировки);
		НоваяСтрока.НДСВходящий = НДСВходящийКорректировки;
		НоваяСтрока.НДСКредит   = НДСКредитКорректировки;
		
	Иначе
		
		НоваяСтрока.Сумма = СуммаКорректировки;	
		
	КонецЕсли; 
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейСтроительствоОбъектовОсновныхСредств.Количество() = 1000 Тогда
		НаборЗаписейСтроительствоОбъектовОсновныхСредств.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструСтроительствоОбъектовОсновныхСредств()

// Процедура формирует движение по регистру "затраты на строительство объектов основных средств".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//  СуммаКорректировки - Число - Сумма корректировки
//	НаборЗаписейЗатратыНаСтроительствоОбъектовОсновныхСредств - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на строительство объектов основных средств".
//
Процедура СформироватьДвиженияПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СуммаКорректировки,
	НаборЗаписейЗатратыНаСтроительствоОбъектовОсновныхСредств
	)
	
	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = НаборЗаписейЗатратыНаСтроительствоОбъектовОсновныхСредств.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	НоваяСтрока.ОбъектСтроительства = СтрокаВыборки.ОбъектСтроительства;
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатратПолучатель;
		
	НоваяСтрока.Сумма = СуммаКорректировки;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыНаСтроительствоОбъектовОсновныхСредств.Количество() = 1000 Тогда
		НаборЗаписейЗатратыНаСтроительствоОбъектовОсновныхСредств.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ БУХГАЛТЕРИИ

// Функция проверяет заполнение счета затрат и счета дебета выпуска продукции.
//
// Параметры:
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//  СтрокаОбхода - ОбходРезультатаЗапроса - Текущая строка обхода результата запроса
//	Сумма - Число - сумма затрат на выпуск продукции. Используется для формирования сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево – 	Истина - проверка прошла успешно,
//				Ложь - обнаружены ошибки заполнения счетов. 
//
Функция ПроверитьСчетЗатратИСчетДебета(
	ВидОтраженияВУчете,
	СтрокаОбхода, 
	Сумма
	)
	
	ПроверкаПройдена = Истина;
	
	СчетДт = СтрокаОбхода.СчетДт;
	СчетЗатрат = СтрокаОбхода.СчетЗатрат;
	
	
	Если Не ЗначениеЗаполнено(СчетДт) Тогда
		   
		ОбщегоНазначения.Сообщение("Не указан счет дебета выпуска продукции (услуг):
		|Организация: " + СтрокаОбхода.Организация + "
		|Подразделение: " + СтрокаОбхода.Подразделение + "
		|Номенклатурная группа: " + СтрокаОбхода.НоменклатурнаяГруппа + "
		|Продукция: " + СтрокаОбхода.Продукция + ", " + 
			СтрокаОбхода.ХарактеристикаПродукции + ", " + 
			СтрокаОбхода.СерияПродукции + "
		|Заказ: " + СтрокаОбхода.Заказ + "
		|Спецификация: " + СтрокаОбхода.Спецификация + "
		|Код операции: " + СтрокаОбхода.КодОперации + "
		|Проводка по выпуску продукции (услуг) на сумму: " + Сумма + " не сформирована!
		|", СтатусСообщения.Важное);
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(СчетЗатрат) Тогда
		   
		ОбщегоНазначения.Сообщение("Не указан счет затрат выпуска продукции (услуг):
		|Организация: " + СтрокаОбхода.Организация + "
		|Подразделение: " + СтрокаОбхода.Подразделение + "
		|Номенклатурная группа: " + СтрокаОбхода.НоменклатурнаяГруппа + "
		|Продукция: " + СтрокаОбхода.Продукция + ", " + 
			СтрокаОбхода.ХарактеристикаПродукции + ", " + 
			СтрокаОбхода.СерияПродукции + "
		|Заказ: " + СтрокаОбхода.Заказ + "
		|Спецификация: " + СтрокаОбхода.Спецификация + "
		|Код операции: " + СтрокаОбхода.КодОперации + "
		|Проводка по выпуску продукции (услуг) на сумму: " + Сумма + " не сформирована!
		|", СтатусСообщения.Важное);
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
	
	Возврат ПроверкаПройдена;

КонецФункции // ПроверитьСчетЗатратИСчетДебета()

// Функция формирует содержание проводки.
//
// Параметры
//  КодОперацииВыпускПродукции - Перечисления.КодыОперацийВыпускПродукции - Код операции выпуска
//	СоответствиеКодОперацииСодержание - Соответствие - Соответствие кода операции выпуска и содержания проводки.
//
// Возвращаемое значение:
//   Строка – текст содержания проводки.
//
Функция ПолучитьСодержаниеПроводкиПоКодуОперации(КодОперацииВыпускПродукции, СоответствиеКодОперацииСодержание) Экспорт
	
	// Если соответствие не заполнено, произведем инициализацию.
	Если СоответствиеКодОперацииСодержание = Неопределено Тогда
		
		СоответствиеКодОперацииСодержание = Новый Соответствие;
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад,
			"Выпуск продукции на склад");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты,
			"Оказание услуг собственным подразделениям");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство,
			"Оказание услуг собственным подразделениям");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги,
			"Оказание услуг сторонним организациям");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаСчет,
			"Списание выпущенной продукции на расходы производства");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч,
			"Списание материалов в производство сторно");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс,
			"Оприходование возвратных отходов");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч,
			"Распределение производственных расходов");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс,
			"Распределение производственных расходов");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП,
			"Списание НЗП");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс,
			"Списание НЗП");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП,
			"Излишки НПЗ, выявленные в результате инвентаризации");
		СоответствиеКодОперацииСодержание.Вставить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости,
			"Оприходованы возвратные отходы");
			
	КонецЕсли;
	
	Содержание = СоответствиеКодОперацииСодержание.Получить(КодОперацииВыпускПродукции);
		
	Если Содержание = Неопределено Тогда
		Содержание = "";
		ОбщегоНазначения.СообщитьОбОшибке("Не определено содержание проводки для кода операции: """ + КодОперацииВыпускПродукции + """.
					|Процедура <ПолучитьСодержаниеПроводкиПоКодуОперации>");
	КонецЕсли;
		
	Возврат Содержание;

КонецФункции // ПолучитьСодержаниеПроводкиПоКодуОперации()

// Процедура формирует проводку по выпуску продукции.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска".
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - характер затрат, по которому отражается списание продукции на расходы.
//  Сумма - Число - Сумма проводки.
//  СуммаНУ - Число - Сумма проводки по НУ.
//	СоответствиеКодОперацииСодержание - Соответствие - Соответствие кода операции выпуска и содержания проводки.
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьПроводкуПоВыпускуПродукции(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	СтрокаВыборки,
	ХарактерЗатрат,
	Сумма,
	СуммаНУ,
	СоответствиеКодОперацииСодержание,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если Сумма = 0 И СуммаНУ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СчетДт = СтрокаВыборки.СчетДт;
	СчетЗатрат = СтрокаВыборки.СчетЗатрат;
	
	НалоговоеНазначениеДт = СтрокаВыборки.НалоговоеНазначениеПолучатель;
	СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(НалоговоеНазначениеДт, СуммаНУ);
	
	НалоговоеНазначениеКт = СтрокаВыборки.НалоговоеНазначение;
	СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(НалоговоеНазначениеКт, СуммаНУ);
	
	
	Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаСчет
	Тогда
	
		Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад Тогда
			Содержание = ПолучитьСодержаниеПроводкиПоКодуОперации(СтрокаВыборки.КодОперации, СоответствиеКодОперацииСодержание);
		Иначе
			Содержание = "" + СтрокаВыборки.Продукция;
		КонецЕсли;
	 
	    НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
		НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Активность = Истина;
		НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
		НоваяПроводка.Содержание = Содержание;
	
		НоваяПроводка.Сумма = Сумма;
		НоваяПроводка.СчетДт = СчетДт;
		
		НоваяПроводка.НалоговоеНазначениеДт = НалоговоеНазначениеДт;
		НоваяПроводка.СуммаНУДт = СуммаНУДт;
		
		
		Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад Тогда
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", СтрокаВыборки.Продукция);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады", СтрокаВыборки.СкладПолучатель);
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы
			Тогда
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтрокаВыборки.ПодразделениеПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппаПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаВыборки.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаВыборки.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаВыборки.СубконтоДт3);
			
		ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги Тогда	
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаВыборки.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаВыборки.СубконтоДт2);
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаВыборки.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаВыборки.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаВыборки.СубконтоДт3);
			
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Не определено заполнение субконто в проводке по счету: """ + СтрокаВыборки.СчетДт + """.
			|Процедура <СформироватьПроводкуПоВыпускуПродукции>");
			
		КонецЕсли;
		
		
		СчетКт = СчетЗатрат;
				
		НоваяПроводка.СчетКт = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборки.Подразделение);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
		
		
		НоваяПроводка.НалоговоеНазначениеКт = НалоговоеНазначениеКт;
		НоваяПроводка.СуммаНУКт = СуммаНУКт;
		
	// Формирование проводки для операций корректировки и списания незавершенного производства.	
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч
		  ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс
		  ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП
		  ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс
		Тогда
		
		НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
		НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Активность = Истина;
		НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
		НоваяПроводка.Содержание = ПолучитьСодержаниеПроводкиПоКодуОперации(СтрокаВыборки.КодОперации, СоответствиеКодОперацииСодержание);
	
		НоваяПроводка.Сумма = Сумма;
		НоваяПроводка.СчетДт = СчетДт;
		
		НоваяПроводка.НалоговоеНазначениеДт = НалоговоеНазначениеДт;
		НоваяПроводка.СуммаНУДт = СуммаНУДт;
		
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы
		Тогда
		
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтрокаВыборки.ПодразделениеПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппаПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаВыборки.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаВыборки.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаВыборки.СубконтоДт3);
			
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Не определено заполнение субконто в проводке по счету: """ + СтрокаВыборки.СчетДт + """.
			|Для кода операции: " + СтрокаВыборки.КодОперации + "
			|Процедура <СформироватьПроводкуПоВыпускуПродукции>");
			
		КонецЕсли;
		  
		НоваяПроводка.СчетКт = СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборки.Подразделение);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПоВозврату);
		
		НоваяПроводка.НалоговоеНазначениеКт = НалоговоеНазначениеКт;
		НоваяПроводка.СуммаНУКт = СуммаНУКт;
		
	// Формирование проводки для операции оприходования	незавершенного производства.
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП Тогда
	
		НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
		НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Активность = Истина;
		НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
		НоваяПроводка.Содержание = ПолучитьСодержаниеПроводкиПоКодуОперации(СтрокаВыборки.КодОперации, СоответствиеКодОперацииСодержание);
		
		НоваяПроводка.Сумма = Сумма;
		
		НоваяПроводка.СчетДт = СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтрокаВыборки.ПодразделениеПолучатель);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппаПолучатель);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
		
		НоваяПроводка.НалоговоеНазначениеДт = НалоговоеНазначениеКт;
		НоваяПроводка.СуммаНУДт = СуммаНУКт;
		
		НоваяПроводка.СчетКт = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 1, СтрокаВыборки.СубконтоДт1);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 2, СтрокаВыборки.СубконтоДт2);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 3, СтрокаВыборки.СубконтоДт3);
		
		НоваяПроводка.НалоговоеНазначениеКт = НалоговоеНазначениеДт;
		НоваяПроводка.СуммаНУКт = СуммаНУДт;
		
	// Формирование проводки "красным" для операции возврата материалов из производства.
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч
		ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс Тогда
		
		НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
		НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Активность = Истина;
		НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
		НоваяПроводка.Содержание = ПолучитьСодержаниеПроводкиПоКодуОперации(СтрокаВыборки.КодОперации, СоответствиеКодОперацииСодержание);
		
		НоваяПроводка.Сумма = - Сумма;
	 
		НоваяПроводка.СчетДт = СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтрокаВыборки.Подразделение);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
		
		НоваяПроводка.НалоговоеНазначениеДт = НалоговоеНазначениеКт;
		НоваяПроводка.СуммаНУДт = -СуммаНУКт;
		
		НоваяПроводка.СчетКт = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Номенклатура", СтрокаВыборки.Продукция);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Склады", СтрокаВыборки.СкладПолучатель);
		
		НоваяПроводка.НалоговоеНазначениеКт = НалоговоеНазначениеДт;
		НоваяПроводка.СуммаНУКт = -СуммаНУДт;
		
	// Выдача сообщения об ошибке по коду операции, который не предусмотрен в процедуре.
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Не сформирована проводка по коду операции: """ + СтрокаВыборки.КодОперации + """.
			|Процедура <СформироватьПроводкуПоВыпускуПродукции>");
		
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;
 	
КонецПроцедуры // СформироватьПроводкуПоВыпускуПродукции()

// Процедура формирует движения по регистру бухгалтерии.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СуммаЗатрат - Число - Полная сумма затрат на выпуск продукции
//  СуммаКорректировки - Число - Разница между полной суммой затрат и учетной суммой выпуска продукции в течение месяца
//  ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - характер затрат, по которому отражается списание продукции на расходы
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска"
//	СоответствиеКодОперацииСодержание - Соответствие - Соответствие кода операции выпуска и содержания проводки
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//  РасчетПоНУ - Булево - признак расчета себестоимости по налоговому учету
//
Процедура СформироватьДвиженияПоРегиструБухгалтерииВыпускПродукции(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	СтрокаВыборки,
	СуммаКорректировки,
	СуммаНУКорректировки,
	ХарактерЗатрат,
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска,
	СоответствиеКодОперацииСодержание,
	РегистрБухгалтерииНаборЗаписей
	) Экспорт
	
	Если СуммаКорректировки = 0
	   И СуммаНУКорректировки = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим заполнение счета дебета и счета затрат.
	ПроверкаПройдена = ПроверитьСчетЗатратИСчетДебета(
		ВидОтраженияВУчете,
		СтрокаВыборки, 
		СуммаКорректировки
	);
	Если Не ПроверкаПройдена Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда	
		 
		СформироватьПроводкуПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			СтрокаВыборки,
			ХарактерЗатрат,
			СуммаКорректировки,
			СуммаНУКорректировки,
			СоответствиеКодОперацииСодержание,
			РегистрБухгалтерииНаборЗаписей
		);
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете Тогда
			
		СформироватьПроводкуПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			СтрокаВыборки,
			ХарактерЗатрат,
			СуммаКорректировки,
			0, // СуммаНУКорректировки
			СоответствиеКодОперацииСодержание,
			РегистрБухгалтерииНаборЗаписей
		);
		
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструБухгалтерииВыпускПродукции()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРА ДОСПИСАНИЯ СТОИМОСТИ ПО НАПРАВЛЕНИЯМ ВЫПУСКА

// Процедура выполняет распределение себестоимости по проектам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по выпуску продукции
//	ВыборкаРаспределениеПоПроектам - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса распределения по проектам
//	Стоимость - Число - Стоимость выпущенной продукции по управленческому учету
//	НаборЗаписейПродажиСебестоимость - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Продажи себестоимость".
//
Процедура РаспределитьПродажиСебестоимостьПоПроектам(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВыборкаРаспределениеПоПроектам,
	Стоимость,
	НаборЗаписейПродажиСебестоимость,
	ПризнакДокументаДвижения = Ложь
	)
	
	Если Не СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
		Проект = Справочники.Проекты.ПустаяСсылка();
	ИначеЕсли ЗначениеЗаполнено(СтрокаВыборки.ДокументВыпускаПроект) Тогда
		Проект = СтрокаВыборки.ДокументВыпускаПроект;
	Иначе
		Проект = СтрокаВыборки.Проект;
	КонецЕсли;
	
	ВсегоБазаРаспределения = 0;
	Если ТипЗнч(Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам") Тогда
		
		СтруктураПоиска = Новый Структура("ВидРаспределения", Проект);
		
		МассивКоэф = Новый Массив;
		
		ВыборкаРаспределениеПоПроектам.Сбросить();
		Пока ВыборкаРаспределениеПоПроектам.НайтиСледующий(СтруктураПоиска) Цикл
			МассивКоэф.Добавить(ВыборкаРаспределениеПоПроектам.ДоляРаспределения);
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаРаспределениеПоПроектам.ДоляРаспределения;
		КонецЦикла;
		
		Если ВсегоБазаРаспределения = 0 Тогда
			ОбщегоНазначения.Сообщение("Не удалось выполнить распределение себестоимости продаж по виду распределения """ + Проект + """", СтатусСообщения.Внимание);
			Проект = Справочники.Проекты.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
		
	Если ВсегоБазаРаспределения <> 0 Тогда
			
		МассивКоличество = ОбщегоНазначения.РаспределитьПропорционально(СтрокаВыборки.Количество, МассивКоэф, 3);
		МассивСтоимость  = ОбщегоНазначения.РаспределитьПропорционально(Стоимость, МассивКоэф, 2);
			
		Индекс = 0;
		ВыборкаРаспределениеПоПроектам.Сбросить();
		Пока ВыборкаРаспределениеПоПроектам.НайтиСледующий(СтруктураПоиска) Цикл
				
			Количество = ?(МассивКоличество = Неопределено, 0, МассивКоличество[Индекс]);
			Сумма      = ?(МассивСтоимость = Неопределено, 0, МассивСтоимость[Индекс]);
				
			СформироватьДвиженияПоРегиструПродажиСебестоимость(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ВыборкаРаспределениеПоПроектам.Проект,
				Сумма,
				НаборЗаписейПродажиСебестоимость,
				ПризнакДокументаДвижения
			);
				
			Индекс = Индекс + 1;
				
		КонецЦикла;
			
	Иначе
		
		СформироватьДвиженияПоРегиструПродажиСебестоимость(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Проект,
			Стоимость,
			НаборЗаписейПродажиСебестоимость,
			ПризнакДокументаДвижения
		);
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьПродажиСебестоимостьПоПроектам()

// Процедура формирует движения по направлениям выпуска
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска".
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	ВыборкаРаспределениеПоПроектам - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса по коэффициентам распределения по проектам
//	НомерПередела - Число - Текущий номер передела
//  СуммаЗатрат - Число - Полная сумма затрат на выпуск продукции
//  СуммаКорректировки - Число - Разница между полной суммой затрат и учетной суммой выпуска продукции в течение месяца
//	СоответствиеКодОперацииСодержание - Соответствие - Соответствие кода операции выпуска и содержания проводки
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска"
//  СтруктураДвижений - Структура - Наборы движений по регистрам
//	ТабТоваров - ТаблицаЗначений - Таблица продукции для передачи в модуль партионного учета.
//
Процедура ДосписатьПоНаправлениюВыпуска(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВыборкаРаспределениеПоПроектам,
	НомерПередела,
	СуммаЗатрат,
	СуммаНУЗатрат,
	НДСВходящийЗатрат,
	НДСКредитЗатрат,
	СуммаКорректировки,
	СуммаНУКорректировки,
	НДСВходящийКорректировки,
	НДСКредитКорректировки,
	СоответствиеКодОперацииСодержание,
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска,
	СтруктураДвижений,
	ТабТоваров
	)
	
	СформироватьДвиженияПоРегиструВыпускПродукции(
		СтруктураШапкиДокумента,
		СтрокаВыборки,
		СуммаКорректировки,
		СуммаНУКорректировки,
		НДСВходящийКорректировки,
		НДСКредитКорректировки,
		СтруктураДвижений.ДвиженияВыпуск
	);
		
	// Сформируем движения по регистру "Партии товаров на складах".
	Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс
		 Тогда
		 
		СформироватьДвиженияПоРегиструПартииТоваровНаСкладах(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СуммаКорректировки,
			СуммаНУКорректировки,
			НДСВходящийКорректировки,
			НДСКредитКорректировки,
			СтруктураДвижений.ДвиженияПартии
		);
		
		Если СуммаКорректировки <> 0
			ИЛИ	СуммаНУКорректировки <> 0 
			ИЛИ	НДСВходящийКорректировки <> 0 
			ИЛИ	НДСКредитКорректировки <> 0 
			Тогда
			
			НоваяСтрока = ТабТоваров.Добавить();
			НоваяСтрока.Номенклатура = СтрокаВыборки.Продукция;
			Если НЕ СтруктураШапкиДокумента.УчетПоСредней Тогда
				НоваяСтрока.ДокументОприходования = СтрокаВыборки.ДокументВыпуска;
			КонецЕсли;
			Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;
			КонецЕсли;
		
		КонецЕсли;
			
		Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				
			СформироватьДвиженияПоРегиструБухгалтерииВыпускПродукции(
				СтруктураШапкиДокумента,
				СтруктураШапкиДокумента.ВидОтраженияВУчете,
				СтрокаВыборки,
				СуммаКорректировки,
				СуммаНУКорректировки,
				Неопределено, // ХарактерЗатрат
				КосвенныеЗатраты,
				ЗатратыВстречногоВыпуска,
				СоответствиеКодОперацииСодержание,
				СтруктураДвижений.Операция
			);
				
		КонецЕсли;
			
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты
		ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство
		ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаСчет
		ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП
		ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч
		ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс
		Тогда
		
		Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП Тогда
				СчетДт = СтрокаВыборки.СчетЗатрат;
			Иначе
				СчетДт = СтрокаВыборки.СчетДт;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(
				СчетДт, 
				СтрокаВыборки.СтатьяЗатратПолучатель
			);
			
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			ХарактерЗатрат = СтрокаВыборки.ХарактерЗатрат;
			
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда	
			ХарактерЗатрат = ПолучитьХарактерЗатратПоСчетуЗатратМежд(
				СчетДт, 
				СтрокаВыборки.СтатьяЗатратПолучатель
			);
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Не определен характер затрат по коду операции""" + СтрокаВыборки.КодОперации + """.
				|Процедура <ДосписатьПоНаправлениюВыпуска>");
		КонецЕсли;
				
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				
			СформироватьДвиженияПоРегиструНезавершенноеПроизводство(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				НомерПередела,
				СуммаКорректировки,
				СуммаНУКорректировки,
				НДСВходящийКорректировки,
				НДСКредитКорректировки,
				СтруктураДвижений.ДвиженияНЗП
				);
					
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
					
			СформироватьДвиженияПоРегиструБракВПроизводстве(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СуммаКорректировки,
				СуммаНУКорректировки,
				НДСВходящийКорректировки,
				НДСКредитКорректировки,
				СтруктураДвижений.ДвиженияБракВПроизводстве
				);
				
				
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы
			ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт
		
			  Тогда

			СформироватьДвиженияПоРегиструЗатраты(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СуммаКорректировки,
				СуммаНУКорректировки,
				НДСВходящийКорректировки,
				НДСКредитКорректировки,
				СтруктураДвижений.ДвиженияЗатраты
			);

		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				
				СформироватьДвиженияПоРегиструСтроительствоОбъектовОсновныхСредств(
					СтруктураШапкиДокумента,
					СтрокаВыборки,
					СуммаКорректировки,
					СуммаНУКорректировки,
					НДСВходящийКорректировки,
					НДСКредитКорректировки,
					СтруктураДвижений.ДвиженияСтроительствоОбъектовОС_БУ
				);
				
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				
				СформироватьДвиженияПоРегиструСтроительствоОбъектовОсновныхСредств(
					СтруктураШапкиДокумента,
					СтрокаВыборки,
					СуммаКорректировки,
					СуммаНУКорректировки,
					НДСВходящийКорректировки,
					НДСКредитКорректировки,
					СтруктураДвижений.СтроительствоОбъектовОсновныхСредств
				);
					
				СформироватьДвиженияПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств(
					СтруктураШапкиДокумента,
					СтрокаВыборки,
					СуммаКорректировки,
					СтруктураДвижений.ЗатратыНаСтроительствоОбъектовОсновныхСредств
				);
					
			КонецЕсли;

		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
				
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				СформироватьДвиженияПоРегиструЗатраты(
					СтруктураШапкиДокумента,
					СтрокаВыборки,
					СуммаКорректировки,
					0, // СуммаНУКорректировки
					0, // НДСВходящий
					0, // НДСКредит
					СтруктураДвижений.ДвиженияЗатраты
					);
			КонецЕсли;
				
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.НеУчитываемыеВУправленческомУчете Тогда
				
			// Формировать движения не нужно.
				
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Не обработан характер затрат """ + ХарактерЗатрат + """.
			|Процедура <ДосписатьПоНаправлениюВыпуска>");
			
		КонецЕсли;
			
		Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				
			СформироватьДвиженияПоРегиструБухгалтерииВыпускПродукции(
				СтруктураШапкиДокумента,
				СтруктураШапкиДокумента.ВидОтраженияВУчете,
				СтрокаВыборки,
				СуммаКорректировки,
				СуммаНУКорректировки,
				ХарактерЗатрат,
				КосвенныеЗатраты,
				ЗатратыВстречногоВыпуска,
				СоответствиеКодОперацииСодержание,
				СтруктураДвижений.Операция
			);
				
		КонецЕсли;
			
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП
		ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс Тогда
			
		Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаВыборки.СчетДт, СтрокаВыборки.СтатьяЗатратПолучатель);
				
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке("Не определен характер затрат по коду операции""" + СтрокаВыборки.КодОперации + """.
					|Процедура <ДосписатьПоНаправлениюВыпуска>.");
			КонецЕсли;
				
			СформироватьДвиженияПоРегиструБухгалтерииВыпускПродукции(
				СтруктураШапкиДокумента,
				СтруктураШапкиДокумента.ВидОтраженияВУчете,
				СтрокаВыборки,
				СуммаКорректировки,
				СуммаНУКорректировки,
				ХарактерЗатрат,
				КосвенныеЗатраты,
				ЗатратыВстречногоВыпуска,
				СоответствиеКодОперацииСодержание,
				СтруктураДвижений.Операция
			);
				
		КонецЕсли;
		  
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги Тогда
		
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			
			РаспределитьПродажиСебестоимостьПоПроектам(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ВыборкаРаспределениеПоПроектам,
				СуммаКорректировки,
				СтруктураДвижений.ДвиженияПродажиСебестоимость
			);
			
		КонецЕсли;
			
		Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				
			СформироватьДвиженияПоРегиструБухгалтерииВыпускПродукции(
				СтруктураШапкиДокумента,
				СтруктураШапкиДокумента.ВидОтраженияВУчете,
				СтрокаВыборки,
				СуммаКорректировки,
				СуммаНУКорректировки,
				ХарактерЗатрат,
				КосвенныеЗатраты,
				ЗатратыВстречногоВыпуска,
				СоответствиеКодОперацииСодержание,
				СтруктураДвижений.Операция
			);
				
		КонецЕсли;
			
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Не обработан код операции """ + СтрокаВыборки.КодОперации + """.
			|Процедура <ДосписатьПоНаправлениюВыпуска>");
			
	КонецЕсли;
	
КонецПроцедуры // ДосписатьПоНаправлениюВыпуска()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ КОРРЕКТИРОВКИ СТОИМОСТИ ПРОДУКЦИИ ПО НАПРАВЛЕНИЯМ ВЫПУСКА

// Функция получает структуру поиска строк результата запроса по выпуску продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса по затратам на выпуск
//
// Возвращаемое значение:
//	Структура - Структура поиска
//
Функция ПолучитьСтруктуруПоискаСтрокВыпускаПродукции(
	СтруктураШапкиДокумента,
	СтрокаВыборки
	)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Подразделение", СтрокаВыборки.Подразделение);
	СтруктураПоиска.Вставить("НоменклатурнаяГруппа", СтрокаВыборки.НоменклатурнаяГруппа);
	СтруктураПоиска.Вставить("Продукция", СтрокаВыборки.Продукция);
	СтруктураПоиска.Вставить("ХарактеристикаПродукции", СтрокаВыборки.ХарактеристикаПродукции);
	СтруктураПоиска.Вставить("СерияПродукции", СтрокаВыборки.СерияПродукции);
	СтруктураПоиска.Вставить("Спецификация", СтрокаВыборки.Спецификация);
	СтруктураПоиска.Вставить("Заказ", СтрокаВыборки.Заказ);
		
	СтруктураПоиска.Вставить("ОприходованиеНЗП", СтрокаВыборки.ОприходованиеНЗП);
	СтруктураПоиска.Вставить("КорректировкаНЗП", СтрокаВыборки.КорректировкаНЗП);
	СтруктураПоиска.Вставить("ВозвратИзНЗП", СтрокаВыборки.ВозвратИзНЗП);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураПоиска.Вставить("СчетУчетаНЗП", СтрокаВыборки.СчетУчетаНЗП);
		Если СтрокаВыборки.КорректировкаНЗП ИЛИ СтрокаВыборки.ОприходованиеНЗП ИЛИ СтрокаВыборки.ВозвратИзНЗП Тогда
		 	СтруктураПоиска.Вставить("НалоговоеНазначениеПолучатель", СтрокаВыборки.НалоговоеНазначение);
		Иначе	
		 	СтруктураПоиска.Вставить("НалоговоеНазначение", СтрокаВыборки.НалоговоеНазначение);
		КонецЕсли;
	КонецЕсли; 
	
	Возврат СтруктураПоиска;
	
КонецФункции // ПолучитьСтруктуруПоискаСтрокВыпускаПродукции()

// Функция проверяет наличие исключаемых направлений выпуска продукции.
//
// Параметры
//	ВыборкаПоЗатратам - ВыборкаИзРезультатаЗапроса - Выборка по затратам на выпуск продукции
//	ВыборкаПоИсключаемымНаправлениямВыпуска - ВыборкаИзРезультатаЗапроса - Выборка по исключаемым направлениям выпуска
//
// Возвращаемое значение:
//	Булево –	Истина - есть направления выпуска, исключаемые из корректировки,
//				Ложь - нет направлений выпуска, исключаемых из корректировки.
//	
Функция ЕстьИсключаемыеНаправленияВыпуска(
	ВыборкаПоЗатратам,
	ВыборкаПоИсключаемымНаправлениямВыпуска
	)
	
	СтруктураПоискаРаспределение = Новый Структура;
	СтруктураПоискаРаспределение.Вставить("Затрата", ВыборкаПоЗатратам.Продукция);
	СтруктураПоискаРаспределение.Вставить("ХарактеристикаЗатраты", ВыборкаПоЗатратам.ХарактеристикаПродукции);
	СтруктураПоискаРаспределение.Вставить("СерияЗатраты", ВыборкаПоЗатратам.СерияПродукции);
				
	ВыборкаПоИсключаемымНаправлениямВыпуска.Сбросить();
	Если ВыборкаПоИсключаемымНаправлениямВыпуска.НайтиСледующий(СтруктураПоискаРаспределение) Тогда
		ИсключитьНаправлениеВыпуска = Истина;
	Иначе
		ИсключитьНаправлениеВыпуска = Ложь;
	КонецЕсли;
	
	Возврат ИсключитьНаправлениеВыпуска;
	
КонецФункции // ЕстьИсключаемыеНаправленияВыпуска()

// Функция проверяет направление выпуска на исключаемое из корректировки.
//
// Параметры
//	ВыборкаПоВыпуску - ВыборкаИзРезультатаЗапроса - Выборка по выпуску продукции
//	ВыборкаПоИсключаемымНаправлениямВыпуска - ВыборкаИзРезультатаЗапроса - Выборка по исключаемым направлениям выпуска
//
// Возвращаемое значение:
//	Булево –	Истина - направление выпуска исключается из корректировки,
//				Ложь - направление выпуска не исключается из корректировки.
//	
Функция ЭтоИсключаемоеНаправлениеВыпуска(
	ВыборкаПоВыпуску,
	ВыборкаПоИсключаемымНаправлениямВыпуска
	)
	
	ИсключитьНаправлениеВыпуска = Ложь;
	Если ВыборкаПоВыпуску.ПроверятьНаправлениеВыпуска Тогда
		
		СтруктураПоискаРаспределение = Новый Структура;
		СтруктураПоискаРаспределение.Вставить("СтатьяЗатрат", ВыборкаПоВыпуску.СтатьяЗатратПолучатель);
		СтруктураПоискаРаспределение.Вставить("Подразделение", ВыборкаПоВыпуску.ПодразделениеПолучатель);
		Если Не ВыборкаПоВыпуску.НоменклатурнаяГруппаПолучатель.Пустая() Тогда
			СтруктураПоискаРаспределение.Вставить("НоменклатурнаяГруппа", ВыборкаПоВыпуску.НоменклатурнаяГруппаПолучатель);
		КонецЕсли;
					
		СтруктураПоискаРаспределение.Вставить("Затрата", ВыборкаПоВыпуску.Продукция);
		СтруктураПоискаРаспределение.Вставить("ХарактеристикаЗатраты", ВыборкаПоВыпуску.ХарактеристикаПродукции);
		СтруктураПоискаРаспределение.Вставить("СерияЗатраты", ВыборкаПоВыпуску.СерияПродукции);
					
		ВыборкаПоИсключаемымНаправлениямВыпуска.Сбросить();
		Если ВыборкаПоИсключаемымНаправлениямВыпуска.НайтиСледующий(СтруктураПоискаРаспределение) Тогда
			ИсключитьНаправлениеВыпуска = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИсключитьНаправлениеВыпуска;
	
КонецФункции // ЭтоИсключаемоеНаправлениеВыпуска()

// Процедура формирует корректирующие движения по выпуску продукции и услуг.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  ЗапросПоЗатратамНаВыпускПродукции - Запрос - Запрос по регистру "Затраты на выпуск продукции" с учетом регистра "Выпуск продукции"
//  ЗапросПоВыпускуПродукции - Запрос - Запрос по регистру "Выпуск продукции" с направлениями списания продукции
//  ЗапросПоИсключаемымНаправлениямВыпуска - Запрос - Запрос по списанию на исключаемые направления выпуска
//	РезультатЗапросаРаспределениеПоПроектам - РезультатЗапроса - Результат запроса по коэффициентам распределения по проектам
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска"
//  СтруктураДвижений - Структура - Наборы движений по регистрам
//	ТабТоваров - ТаблицаЗначений - Таблица продукции для передачи в модуль партионного учета.
//
Процедура КорректировкаДвиженийПоВыпускуПродукции(
	СтруктураШапкиДокумента,
	ЗапросПоЗатратамНаВыпускПродукции,
	ЗапросПоВыпускуПродукции,
	ЗапросПоИсключаемымНаправлениямВыпуска,
	РезультатЗапросаРаспределениеПоПроектам,
	НомерПередела,
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска,
	СтруктураДвижений,
	ТабТоваров
	)
	
	Перем СоответствиеКодОперацииСодержание;
	
	// Выполним запрос по затратам на выпуск продукции.
	ЗапросПоЗатратамНаВыпускПродукции.УстановитьПараметр("НомерПередела", НомерПередела);
	РезультатЗапросаПоЗатратамНаВыпускПродукции = ЗапросПоЗатратамНаВыпускПродукции.Выполнить();
	
	// Выполним запрос по выпуску продукции.
	ЗапросПоВыпускуПродукции.УстановитьПараметр("НомерПередела", НомерПередела);
	РезультатЗапросаПоВыпускуПродукции = ЗапросПоВыпускуПродукции.Выполнить();
	ВыборкаПоВыпуску = РезультатЗапросаПоВыпускуПродукции.Выбрать();
	
	
	// оптимизация - замена медленно работающего ВыборкаПоВыпуску.НайтиСледующий(СтруктураПоискаВыпуск) на поиск по таблице значений 
	// для отключения закомментируйте строки до // ...оптимизация 
	ТаблицаВыборкаПоВыпуску = РезультатЗапросаПоВыпускуПродукции.Выгрузить();
	ИндексВыборкаПоВыпуску = "Подразделение, НоменклатурнаяГруппа, Продукция, ХарактеристикаПродукции, СерияПродукции, Спецификация, Заказ, ОприходованиеНЗП, КорректировкаНЗП, ВозвратИзНЗП";
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ИндексВыборкаПоВыпуску = ИндексВыборкаПоВыпуску  + ",СчетУчетаНЗП, НалоговоеНазначение";
	КонецЕсли; 
	ТаблицаВыборкаПоВыпуску.Индексы.Добавить(ИндексВыборкаПоВыпуску);
	// ...оптимизация 
	
	// Выполним запрос по исключаемым направлениям выпуска.
	РезультатЗапросаПоИсключаемымНаправлениямВыпуска = ЗапросПоИсключаемымНаправлениямВыпуска.Выполнить();
	ВыборкаПоИсключаемымНаправлениямВыпуска = РезультатЗапросаПоИсключаемымНаправлениямВыпуска.Выбрать();
	
	// Выберем коэффициенты распределения по проектам.
	ВыборкаРаспределениеПоПроектам = РезультатЗапросаРаспределениеПоПроектам.Выбрать();
	
	ОбходПоЗатратам = РезультатЗапросаПоЗатратамНаВыпускПродукции.Выбрать();
	Пока ОбходПоЗатратам.Следующий() Цикл
		
		// Выберем выпуск продукции с направлениями списания.
		СтруктураПоискаВыпуск = ПолучитьСтруктуруПоискаСтрокВыпускаПродукции(
			СтруктураШапкиДокумента,
			ОбходПоЗатратам
		);
		
		// оптимизация - замена медленно работающего ВыборкаПоВыпуску.НайтиСледующий(СтруктураПоискаВыпуск) на поиск по таблице значений 
		// для отключения закомментируйте следующую стрроку
        МассивСтрокВыпуск = ТаблицаВыборкаПоВыпуску.НайтиСтроки(СтруктураПоискаВыпуск);
		
		ВсегоКоличество = ОбходПоЗатратам.Количество;
		ВсегоСуммаЗатрат = ОбходПоЗатратам.СуммаЗатрат;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			ВсегоСуммаНУЗатрат     = ОбходПоЗатратам.СуммаНУЗатрат;
			ВсегоНДСВходящийЗатрат = ОбходПоЗатратам.НДСВходящийЗатрат;
			ВсегоНДСКредитЗатрат   = ОбходПоЗатратам.НДСКредитЗатрат;
		Иначе
			ВсегоСуммаНУЗатрат     = 0;
			ВсегоНДСВходящийЗатрат = 0;
			ВсегоНДСКредитЗатрат   = 0;
		КонецЕсли; 
		 
		
		// Проверим наличие исключаемых направлений выпуска.
		Если (КосвенныеЗатраты ИЛИ ЗатратыВстречногоВыпуска)
		   И Не РезультатЗапросаПоИсключаемымНаправлениямВыпуска.Пустой() Тогда
		   
			ЕстьИсключаемыеНаправления = ЕстьИсключаемыеНаправленияВыпуска(
				ОбходПоЗатратам,
				ВыборкаПоИсключаемымНаправлениямВыпуска
			);
		Иначе
			ЕстьИсключаемыеНаправления = Ложь;
		КонецЕсли;
			
		// Вычтем стоимость исключаемых направлений выпуска из общих затрат на выпуск. 
		Если ЕстьИсключаемыеНаправления Тогда
			// оптимизация - замена медленно работающего ВыборкаПоВыпуску.НайтиСледующий(СтруктураПоискаВыпуск) на поиск по таблице значений 
			// для отключения раскомментируйте следующие две строки и закомментируйте следующую после этих строк одну строку
			//  ВыборкаПоВыпуску.Сбросить();
			//  Пока ВыборкаПоВыпуску.НайтиСледующий(СтруктураПоискаВыпуск) Цикл
			Для Каждого ВыборкаПоВыпуску Из МассивСтрокВыпуск Цикл	
				
				Если ВыборкаПоВыпуску.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство
				 ИЛИ ВыборкаПоВыпуску.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты Тогда
			
				 	ИсключитьНаправлениеВыпуска = ЭтоИсключаемоеНаправлениеВыпуска(
						ВыборкаПоВыпуску,
						ВыборкаПоИсключаемымНаправлениямВыпуска
					);
					Если ИсключитьНаправлениеВыпуска Тогда
						
						ВсегоКоличество = ВсегоКоличество - ВыборкаПоВыпуску.Количество;
						ВсегоСуммаЗатрат = ВсегоСуммаЗатрат - ВыборкаПоВыпуску.Стоимость;
						
						Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
							ВсегоСуммаНУЗатрат     = ВсегоСуммаНУЗатрат - ВыборкаПоВыпуску.СтоимостьНУ;
							ВсегоНДСВходящийЗатрат = ВсегоНДСВходящийЗатрат - ВыборкаПоВыпуску.НДСВходящий;
							ВсегоНДСКредитЗатрат   = ВсегоНДСКредитЗатрат - ВыборкаПоВыпуску.НДСКредит;
						КонецЕсли; 
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Распределим затраты на выпуск продукции по направлениям выпуска.
		// оптимизация - замена медленно работающего ВыборкаПоВыпуску.НайтиСледующий(СтруктураПоискаВыпуск) на поиск по таблице значений 
		// для отключения раскомментируйте следующие две строки и закомментируйте следующую после этих строк одну строку
		// ВыборкаПоВыпуску.Сбросить();
		// Пока ВыборкаПоВыпуску.НайтиСледующий(СтруктураПоискаВыпуск) Цикл
		Для Каждого ВыборкаПоВыпуску Из МассивСтрокВыпуск Цикл		
			
			Если ЕстьИсключаемыеНаправления Тогда
				ИсключитьНаправлениеВыпуска = ЭтоИсключаемоеНаправлениеВыпуска(
					ВыборкаПоВыпуску,
					ВыборкаПоИсключаемымНаправлениямВыпуска
				);
			Иначе
				ИсключитьНаправлениеВыпуска = Ложь;
			КонецЕсли;
			
			СуммаЗатрат = 0;
			
			СуммаНУЗатрат 		= 0;
			НДСВходящийЗатрат 	= 0;
			НДСКредитЗатрат 	= 0;
			
			Если ИсключитьНаправлениеВыпуска Тогда
				
				Продолжить;
				
			Иначе
			
				Если ВсегоКоличество <> 0 Тогда
					
					СуммаЗатрат = Окр(ВсегоСуммаЗатрат * ВыборкаПоВыпуску.Количество / ВсегоКоличество, 2, 1);
					
					Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
						СуммаНУЗатрат     = Окр(ВсегоСуммаНУЗатрат  * ВыборкаПоВыпуску.Количество / ВсегоКоличество, 2, 1);
						НДСВходящийЗатрат = Окр(ВсегоНДСВходящийЗатрат * ВыборкаПоВыпуску.Количество / ВсегоКоличество, 2, 1);
						НДСКредитЗатрат   = Окр(ВсегоНДСКредитЗатрат * ВыборкаПоВыпуску.Количество / ВсегоКоличество, 2, 1);
					КонецЕсли; 
					
				КонецЕсли;
			
				ВсегоКоличество = ВсегоКоличество - ВыборкаПоВыпуску.Количество;
				ВсегоСуммаЗатрат = ВсегоСуммаЗатрат - СуммаЗатрат;
				
				ВсегоСуммаНУЗатрат     = ВсегоСуммаНУЗатрат - СуммаНУЗатрат;
				ВсегоНДСВходящийЗатрат = ВсегоНДСВходящийЗатрат - НДСВходящийЗатрат;
				ВсегоНДСКредитЗатрат   = ВсегоНДСКредитЗатрат - НДСКредитЗатрат;
				
			КонецЕсли;
	
			СуммаКорректировки = СуммаЗатрат - ВыборкаПоВыпуску.Стоимость;
			
			СуммаНУКорректировки     = 0;
			НДСВходящийКорректировки = 0;
			НДСКредитКорректировки   = 0;
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				СуммаНУКорректировки     = СуммаНУЗатрат - ВыборкаПоВыпуску.СтоимостьНУ;
				НДСВходящийКорректировки = НДСВходящийЗатрат - ВыборкаПоВыпуску.НДСВходящий;
				НДСКредитКорректировки   = НДСКредитЗатрат - ВыборкаПоВыпуску.НДСКредит;
			КонецЕсли; 
			
			Если СуммаЗатрат  < 0 Тогда	
				ОбщегоНазначения.Сообщение("Обнаружена отрицательная сумма затрат на выпуск продукции:
					|Подразделение: " + ВыборкаПоВыпуску.Подразделение + "
					|Номенклатурная группа: " + ВыборкаПоВыпуску.НоменклатурнаяГруппа + "
					|Продукция: " + ВыборкаПоВыпуску.Продукция + ", " + 
						ВыборкаПоВыпуску.ХарактеристикаПродукции + ", " + 
						ВыборкаПоВыпуску.СерияПродукции + "
					|Заказ: " + ВыборкаПоВыпуску.Заказ + "
					|Сумма затрат: " + 
						СуммаЗатрат + "
					|", СтатусСообщения.Важное);
			КонецЕсли;
					
			ДосписатьПоНаправлениюВыпуска(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпуску,
				ВыборкаРаспределениеПоПроектам,
				НомерПередела,
				СуммаЗатрат,
				СуммаНУЗатрат,
				НДСВходящийЗатрат,
				НДСКредитЗатрат,
				СуммаКорректировки,
				СуммаНУКорректировки,
				НДСВходящийКорректировки,
				НДСКредитКорректировки,
				СоответствиеКодОперацииСодержание,
				КосвенныеЗатраты,
				ЗатратыВстречногоВыпуска,
				СтруктураДвижений,
				ТабТоваров
			);
												
		КонецЦикла;
		
		Если ВсегоСуммаЗатрат <> 0 ИЛИ ВсегоСуммаНУЗатрат <> 0 ИЛИ ВсегоНДСВходящийЗатрат <> 0 ИЛИ ВсегоНДСКредитЗатрат <> 0 Тогда 
			ОбщегоНазначения.Сообщение("Не удалось распределить по направлениям выпуска:
				|Подразделение: " + ОбходПоЗатратам.Подразделение + "
				|Номенклатурная группа: " + ОбходПоЗатратам.НоменклатурнаяГруппа + "
				|Продукция: " + ОбходПоЗатратам.Продукция + 
					", " + ОбходПоЗатратам.ХарактеристикаПродукции + 
					", " + ОбходПоЗатратам.СерияПродукции + "
				|Заказ: " + ОбходПоЗатратам.Заказ + "
				|Сумма затрат: " + ВсегоСуммаЗатрат + "
				|" + ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "Сумма (НУ) затрат: " + ВсегоСуммаНУЗатрат, "") + "
				|" + ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "НДС вход.  затрат: " + ВсегоНДСВходящийЗатрат, "") + "
				|" + ?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "НДС кредит затрат: " + ВсегоНДСКредитЗатрат, "") + "
				|" + ?(ЗатратыВстречногоВыпуска, 
						"Проверьте правильность заполнения регистра ""Встречный выпуск продукции (услуг)"".", 
						""
					) + "
				|", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияПартии.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияПартии.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияНЗП.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатраты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатраты.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияБракВПроизводстве.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияБракВПроизводстве.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Если СтруктураДвижений.ДвиженияПродажиСебестоимость.Модифицированность() Тогда
			СтруктураДвижений.ДвиженияПродажиСебестоимость.Записать(Ложь);
		КонецЕсли;
		Если СтруктураДвижений.ЗатратыНаСтроительствоОбъектовОсновныхСредств.Модифицированность() Тогда
			СтруктураДвижений.ЗатратыНаСтроительствоОбъектовОсновныхСредств.Записать(Ложь);
		КонецЕсли;
		Если СтруктураДвижений.СтроительствоОбъектовОсновныхСредств.Модифицированность() Тогда
			СтруктураДвижений.СтроительствоОбъектовОсновныхСредств.Записать(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если СтруктураДвижений.ДвиженияСтроительствоОбъектовОС_БУ.Модифицированность() Тогда
			СтруктураДвижений.ДвиженияСтроительствоОбъектовОС_БУ.Записать(Ложь);
		КонецЕсли;
	КонецЕсли; 
	
	ТабТоваров.Свернуть("Номенклатура, ДокументОприходования, СчетУчета");

КонецПроцедуры // КорректировкаДвиженийПоВыпускуПродукции()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ ЗАТРАТ

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО СПОСОБАМ РАСПРЕДЕЛЕНИЯ И ОТБОРА РЕЗУЛЬТАТА ЗАПРОСА

// Процедура формирует временную таблицу "СпособыРаспределения".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//
Процедура СформироватьВременнуюТаблицуСпособыРаспределенияРасширеннаяАналитика(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	МенеджерВременныхТаблиц
	) 
	
	ТекстЗапросаСКомментариями = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпособыРаспределения.СтатьяЗатрат,
	|	ЕСТЬNULL(РегистрАналитикаВидаУчета.Подразделение, СпособыРаспределения.Подразделение) КАК Подразделение,
	|	//ДляРеглУчета ЕСТЬNULL(РегистрАналитикаВидаУчета.СчетУчета, СпособыРаспределения.СчетЗатрат) КАК СчетЗатрат,
	|	
	|	РегистрАналитикаВидаУчета.Ссылка КАК АналитикаВидаУчета,
	|	РегистрАналитикаУчетаЗатрат.Ссылка КАК АналитикаУчетаЗатрат,
	|
	|	ЕСТЬNULL(
	|		СпособыРаспределения.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения,
	|		Ложь
	|		) КАК РаспределятьНаПодчиненныеПодразделения,
	|	
	|	ВЫБОР КОГДА РегистрАналитикаВидаУчета.Подразделение <> СпособыРаспределения.Подразделение
	|		И СпособыРаспределения.Подразделение <>
	|			//ДляУпрУчета ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			//ДляРеглУчета ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ЭтоСпособРаспределенияРодителя,
	|		
	|	СпособыРаспределения.ХарактерРаспределенияЗатрат,
	|	СпособыРаспределения.СпособРаспределенияЗатрат,
	|	СпособыРаспределения.НеРаспределять,
	|	СпособыРаспределения.Период
	|	
	|ПОМЕСТИТЬ СпособыРаспределения%СуффиксУчета%
	|ИЗ
	|	РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(&КонГраница, 
	|		//ДляРеглУчета Организация = &Организация 
	|	) КАК СпособыРаспределения
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			РегистрАналитикаУчетаЗатрат.Ссылка,
	|			РегистрАналитикаУчетаЗатрат.СтатьяЗатрат
	|		ИЗ
	|			РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|		ГДЕ
	|			РегистрАналитикаУчетаЗатрат.СтатьяЗатрат <> ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|		) КАК РегистрАналитикаУчетаЗатрат
	|	ПО
	|		СпособыРаспределения.СтатьяЗатрат = РегистрАналитикаУчетаЗатрат.СтатьяЗатрат
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			//ДляУпрУчета РегистрАналитикаВидаУчета.Подразделение,
	|			//ДляРеглУчета РегистрАналитикаВидаУчета.ПодразделениеОрганизации КАК Подразделение,
	|			//ДляРеглУчета РегистрАналитикаВидаУчета.СчетУчета,
	|			РегистрАналитикаВидаУчета.Ссылка
	|		ИЗ
	|			РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|		ГДЕ
	|			РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты)
	|			//ДляУпрУчета И РегистрАналитикаВидаУчета.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			//ДляРеглУчета И РегистрАналитикаВидаУчета.Организация = &Организация
	|			
	|		) КАК РегистрАналитикаВидаУчета
	|	ПО
	|		(СпособыРаспределения.Подразделение = 
	|			//ДляУпрУчета ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			//ДляРеглУчета ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|		ИЛИ СпособыРаспределения.Подразделение = РегистрАналитикаВидаУчета.Подразделение
	|		ИЛИ СпособыРаспределения.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|			И 
	|			(СпособыРаспределения.Подразделение = РегистрАналитикаВидаУчета.Подразделение.Родитель
	|			ИЛИ СпособыРаспределения.Подразделение = РегистрАналитикаВидаУчета.Подразделение.Родитель.Родитель
	|			ИЛИ СпособыРаспределения.Подразделение = РегистрАналитикаВидаУчета.Подразделение.Родитель.Родитель.Родитель)
	|		)
	|		//ДляРеглУчета 	И (СпособыРаспределения.СчетЗатрат = РегистрАналитикаВидаУчета.СчетУчета
	|		//ДляРеглУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = РегистрАналитикаВидаУчета.СчетУчета.Родитель
	|		//ДляРеглУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = РегистрАналитикаВидаУчета.СчетУчета.Родитель.Родитель
	|		//ДляРеглУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = РегистрАналитикаВидаУчета.СчетУчета.Родитель.Родитель.Родитель)
	|			
    |";
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		
	Запрос.Выполнить();
	
КонецПроцедуры // СформироватьВременнуюТаблицуСпособыРаспределенияРасширеннаяАналитика()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО СПОСОБАМ РАСПРЕДЕЛЕНИЯ И ОТБОРА РЕЗУЛЬТАТА ЗАПРОСА

// Процедура формирует временную таблицу "СпособыРаспределения".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//
Процедура СформироватьВременнуюТаблицуСпособыРаспределения(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	МенеджерВременныхТаблиц               
	) 
	
	ТекстЗапросаСКомментариями = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпособыРаспределения.СтатьяЗатрат,
	|	ЕСТЬNULL(Подразделения.Подразделение, СпособыРаспределения.Подразделение) КАК Подразделение,
	|	//ДляРеглУчета ЕСТЬNULL(ПланСчетов.Счет, СпособыРаспределения.СчетЗатрат) КАК СчетЗатрат,
	|	ЕСТЬNULL(
	|		СпособыРаспределения.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения,
	|		Ложь
	|		) КАК РаспределятьНаПодчиненныеПодразделения,
	|	
	|	ВЫБОР КОГДА Подразделения.Подразделение <> СпособыРаспределения.Подразделение
	|		И СпособыРаспределения.Подразделение <>
	|			//ДляУпрУчета ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			//ДляРеглУчета ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ЭтоСпособРаспределенияРодителя,
	|		
	|	СпособыРаспределения.ХарактерРаспределенияЗатрат,
	|	СпособыРаспределения.СпособРаспределенияЗатрат,
	|	СпособыРаспределения.НеРаспределять,
	|	СпособыРаспределения.Период
	|	
	|ПОМЕСТИТЬ СпособыРаспределения%СуффиксУчета%
	|ИЗ
	|	РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(&КонГраница, 
	|		//ДляРеглУчета Организация = &Организация 
	|	) КАК СпособыРаспределения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			Подразделения.Родитель КАК Родитель,
	|			Подразделения.Ссылка КАК Подразделение
	|		ИЗ
	|			//ДляУпрУчета 	Справочник.Подразделения КАК Подразделения
	|			//ДляРеглУчета 	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|		
	|		//ДляРеглУчета 	ГДЕ
	|		//ДляРеглУчета 		Подразделения.Владелец = &Организация
	|		) КАК Подразделения
	|	ПО
	|		СпособыРаспределения.Подразделение = 
	|			//ДляУпрУчета ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			//ДляРеглУчета ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|		ИЛИ (СпособыРаспределения.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|			И 
	|			(СпособыРаспределения.Подразделение = Подразделения.Подразделение
	|			ИЛИ СпособыРаспределения.Подразделение = Подразделения.Родитель
	|			ИЛИ СпособыРаспределения.Подразделение = Подразделения.Родитель.Родитель
	|			ИЛИ СпособыРаспределения.Подразделение = Подразделения.Родитель.Родитель.Родитель)
	|			)
	|			
	|	//ДляРеглУчета 	ЛЕВОЕ СОЕДИНЕНИЕ (
	|	//ДляРеглУчета 		ВЫБРАТЬ
	|	//ДляРеглУчета 			ПланСчетов.Ссылка КАК Счет
	|	//ДляРеглУчета 		ИЗ
	|	//ДляБухУчета 			ПланСчетов.%ИмяПланаСчетов% КАК ПланСчетов
	|	//ДляМеждУчета 			ПланСчетов.%ИмяПланаСчетов% КАК ПланСчетов
	|	//ДляРеглУчета 		ГДЕ
	|	//ДляРеглУчета 			ПланСчетов.Ссылка В ИЕРАРХИИ (&МассивСчетовЗатрат)
	|	//ДляРеглУчета 		) КАК ПланСчетов
	|	//ДляРеглУчета 	ПО
	|
	|		//ДляРеглУчета 	СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет
	|		//ДляРеглУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель
	|		//ДляРеглУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель.Родитель
	|		//ДляРеглУчета 		ИЛИ СпособыРаспределения.СчетЗатрат = ПланСчетов.Счет.Родитель.Родитель.Родитель
    |";
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		МассивСчетовЗатрат = Новый Массив;
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.АдминистративныеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
		
		Запрос.УстановитьПараметр("МассивСчетовЗатрат", МассивСчетовЗатрат);
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете Тогда
		МассивСчетовЗатрат = Новый Массив;
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ОбщепроизводственныеРасходы);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.БракВПроизводстве);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ОсновноеПроизводство);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ВспомогательноеПроизводство);
		МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ОбслуживающиеПроизводства);
		
		Запрос.УстановитьПараметр("МассивСчетовЗатрат", МассивСчетовЗатрат);
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры // СформироватьВременнуюТаблицуСпособыРаспределения()

// Функция формирует текст запроса по регистру сведений "Способы распределения статей затрат".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоСпособамРаспределенияЗатратРасширеннаяАналитика()
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпособыРаспределения.СтатьяЗатрат,
	|	СпособыРаспределения.Подразделение,
	|	//ДляРеглУчета СпособыРаспределения.СчетЗатрат,
	|	
	|	СпособыРаспределения.АналитикаВидаУчета,
	|	СпособыРаспределения.АналитикаУчетаЗатрат,
	|	
	|	СпособыРаспределения.ХарактерРаспределенияЗатрат,
	|	СпособыРаспределения.СпособРаспределенияЗатрат КАК СпособРаспределения,
	|	СпособыРаспределения.РаспределятьНаПодчиненныеПодразделения,
	|	
	|	СпособыРаспределения.ЭтоСпособРаспределенияРодителя,
	|	
	|	//ДляРеглУчета	ВЫБОР КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АдминистративныеРасходы)
	|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ОбщепроизводственныеРасходы)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.АдминистративныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ ( 
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщепроизводственныеРасходы)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ОбщепроизводственныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.БракВПроизводстве)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.БракВПроизводстве)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство)
	|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ОсновноеПроизводство)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ПроизводственныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВспомогательныеПроизводства)
	|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ВспомогательноеПроизводство)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ПроизводственныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбслуживающиеПроизводства)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета 		СпособыРаспределения.СтатьяЗатрат.ХарактерЗатрат
	|	//ДляРеглУчета 	КОНЕЦ КАК ХарактерЗатрат,
	|	
	|	СпособыРаспределения.НеРаспределять
	|	
	|//Поместить ПОМЕСТИТЬ РаспределяемыеСтатьиЗатрат%СуффиксУчета%
	|ИЗ 
	|	СпособыРаспределения%СуффиксУчета% КАК СпособыРаспределения
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СпособыРаспределения.АналитикаВидаУчета,
	|			СпособыРаспределения.АналитикаУчетаЗатрат,
	|			СпособыРаспределения.ЭтоСпособРаспределенияРодителя,
	|			МАКСИМУМ(СпособыРаспределения.Период) КАК Период
	|		ИЗ 
	|			СпособыРаспределения%СуффиксУчета% КАК СпособыРаспределения
	|	
	|		СГРУППИРОВАТЬ ПО
	|			СпособыРаспределения.АналитикаВидаУчета,
	|			СпособыРаспределения.АналитикаУчетаЗатрат,
	|			СпособыРаспределения.ЭтоСпособРаспределенияРодителя
	|			
	|		) КАК СпособыРаспределенияПоПериодам
	|	ПО
	|		СпособыРаспределения.АналитикаВидаУчета = СпособыРаспределенияПоПериодам.АналитикаВидаУчета
	|		И СпособыРаспределения.АналитикаУчетаЗатрат = СпособыРаспределенияПоПериодам.АналитикаУчетаЗатрат
	|		И СпособыРаспределения.ЭтоСпособРаспределенияРодителя = СпособыРаспределенияПоПериодам.ЭтоСпособРаспределенияРодителя	
	|		И СпособыРаспределения.Период = СпособыРаспределенияПоПериодам.Период
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СпособыРаспределения.АналитикаВидаУчета,
	|			СпособыРаспределения.АналитикаУчетаЗатрат
	|		ИЗ 
	|			СпособыРаспределения%СуффиксУчета% КАК СпособыРаспределения
	|		ГДЕ
	|			Не СпособыРаспределения.ЭтоСпособРаспределенияРодителя
	|
	|		) КАК УказанныеСпособыРаспределения
	|	ПО
	|		СпособыРаспределения.АналитикаВидаУчета = УказанныеСпособыРаспределения.АналитикаВидаУчета
	|		И СпособыРаспределения.АналитикаУчетаЗатрат = УказанныеСпособыРаспределения.АналитикаУчетаЗатрат
	|		И СпособыРаспределения.ЭтоСпособРаспределенияРодителя
	|
	|ГДЕ	
	|	УказанныеСпособыРаспределения.АналитикаУчетаЗатрат ЕСТЬ NULL
	|	И СпособыРаспределения.ХарактерРаспределенияЗатрат В (&МассивХарактеровРаспределения)
    |
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоСпособамРаспределенияЗатратРасширеннаяАналитика()

// Функция формирует текст запроса по регистру сведений "Способы распределения статей затрат".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоСпособамРаспределенияЗатрат()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпособыРаспределения.СтатьяЗатрат,
	|	СпособыРаспределения.Подразделение,
	|	//ДляРеглУчета СпособыРаспределения.СчетЗатрат,
	|	
	|	СпособыРаспределения.ХарактерРаспределенияЗатрат,
	|	СпособыРаспределения.СпособРаспределенияЗатрат КАК СпособРаспределения,
	|	СпособыРаспределения.РаспределятьНаПодчиненныеПодразделения,
	|	
	|	СпособыРаспределения.ЭтоСпособРаспределенияРодителя,
	|	
	|	//ДляРеглУчета	ВЫБОР КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляБухУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АдминистративныеРасходы)	
	|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ОбщепроизводственныеРасходы)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.АдминистративныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ ( 
	|	//ДляБухУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщепроизводственныеРасходы)
	|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ОбщепроизводственныеРасходы)	
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ОбщепроизводственныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляБухУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.БракВПроизводстве)
	|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.БракВПроизводстве)	
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.БракВПроизводстве)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляБухУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство)
	|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ОсновноеПроизводство)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ПроизводственныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляБухУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВспомогательныеПроизводства)
	|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ВспомогательноеПроизводство)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета		ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ПроизводственныеРасходы)
	|	
	|	//ДляРеглУчета 	КОГДА СпособыРаспределения.СчетЗатрат В ИЕРАРХИИ (
	|	//ДляБухУчета		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбслуживающиеПроизводства)
	|	//ДляМеждУчета		ЗНАЧЕНИЕ(ПланСчетов.Международный.ОбслуживающиеПроизводства)
	|	//ДляРеглУчета	) ТОГДА
	|	//ДляРеглУчета 		СпособыРаспределения.СтатьяЗатрат.ХарактерЗатрат
	|	//ДляРеглУчета 	КОНЕЦ КАК ХарактерЗатрат,
	|	
	|	СпособыРаспределения.НеРаспределять
	|	
	|//Поместить ПОМЕСТИТЬ РаспределяемыеСтатьиЗатрат%СуффиксУчета%
	|ИЗ 
	|	СпособыРаспределения%СуффиксУчета% КАК СпособыРаспределения
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			//ДляРеглУчета СпособыРаспределения.СчетЗатрат,
	|			СпособыРаспределения.СтатьяЗатрат,
	|			СпособыРаспределения.Подразделение,
	|			СпособыРаспределения.ЭтоСпособРаспределенияРодителя,
	|			МАКСИМУМ(СпособыРаспределения.Период) КАК Период
	|		ИЗ 
	|			СпособыРаспределения%СуффиксУчета% КАК СпособыРаспределения
	|	
	|		СГРУППИРОВАТЬ ПО
	|			//ДляРеглУчета СпособыРаспределения.СчетЗатрат,
	|			СпособыРаспределения.Подразделение,
	|			СпособыРаспределения.СтатьяЗатрат,
	|			СпособыРаспределения.ЭтоСпособРаспределенияРодителя
	|			
	|		) КАК СпособыРаспределенияПоПериодам
	|	ПО
	|		СпособыРаспределения.СтатьяЗатрат = СпособыРаспределенияПоПериодам.СтатьяЗатрат
	|		И СпособыРаспределения.Подразделение = СпособыРаспределенияПоПериодам.Подразделение
	|		//ДляРеглУчета И СпособыРаспределения.СчетЗатрат = СпособыРаспределенияПоПериодам.СчетЗатрат
	|		И СпособыРаспределения.Период = СпособыРаспределенияПоПериодам.Период
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			//ДляРеглУчета СпособыРаспределения.СчетЗатрат,
	|			СпособыРаспределения.СтатьяЗатрат,
	|			СпособыРаспределения.Подразделение
	|		ИЗ 
	|			СпособыРаспределения%СуффиксУчета% КАК СпособыРаспределения
	|		ГДЕ
	|			Не СпособыРаспределения.ЭтоСпособРаспределенияРодителя
	|
	|		) КАК УказанныеСпособыРаспределения
	|	ПО
	|		СпособыРаспределения.СтатьяЗатрат = УказанныеСпособыРаспределения.СтатьяЗатрат
	|		И СпособыРаспределения.Подразделение = УказанныеСпособыРаспределения.Подразделение
	|		И СпособыРаспределения.ЭтоСпособРаспределенияРодителя
	|		//ДляРеглУчета И СпособыРаспределения.СчетЗатрат = УказанныеСпособыРаспределения.СчетЗатрат
	|
	|ГДЕ	
	|	УказанныеСпособыРаспределения.СтатьяЗатрат ЕСТЬ NULL
	|	И СпособыРаспределения.ХарактерРаспределенияЗатрат В (&МассивХарактеровРаспределения)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоСпособамРаспределенияЗатрат()

// Функция формирует запрос по регистру сведений "Способы распределения статей затрат".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	МассивХарактеровРаспределения - Массив - Массив допустимых характеров распределения затрат
//	ФормироватьВременнуюТаблицу - Булево - Признак формирования временной таблицы 
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//
// Возвращаемое значение:
//   Запрос – Запрос по регистру "Способы распределения статей затрат".
//
Функция СформироватьЗапросПоСпособамРаспределенияЗатрат(
	СтруктураШапкиДокумента,
	МассивХарактеровРаспределения,
	ФормироватьВременнуюТаблицу = Ложь,
	ВидОтраженияВУчете,
	МенеджерВременныхТаблиц = Неопределено
	) Экспорт
	
	// Если в процедуру не передан менеджер временных таблиц, то создадим новый менеджер временных таблиц.
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	// Сформируем временную таблицу по способам распределения.
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		СформироватьВременнуюТаблицуСпособыРаспределенияРасширеннаяАналитика(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			МенеджерВременныхТаблиц
		) ;
		ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоСпособамРаспределенияЗатратРасширеннаяАналитика();
	Иначе
		СформироватьВременнуюТаблицуСпособыРаспределения(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			МенеджерВременныхТаблиц
		) ;
		ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоСпособамРаспределенияЗатрат();
	КонецЕсли;
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		ВидОтраженияВУчете
	);
	
	Если ФормироватьВременнуюТаблицу Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//Поместить", "");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НеУчитыватьПодразделение", Перечисления.ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение);
	
	Запрос.УстановитьПараметр("МассивХарактеровРаспределения", МассивХарактеровРаспределения);
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоСпособамРаспределенияЗатрат()

// Функция получает строку выборки по способам распределения затрат.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  ВыборкаПоСпособамРаспределенияЗатрат - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса по способам распределения затрат
//	ОпределятьПоХарактеруЗатрат - Булево - Использовать характер затрат для определения способа распределения
//	ПроверятьУказаниеСпособаРаспределения - Булево - Признак необходимости проверки указания способа распределения и вывода сообщения,
//		если способ распределения не указан
//
// Выходные параметры
//	СпособРаспределения - СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск - Заданный способ определения
//	ХарактерРаспределения - ПеречислениеСсылка.ХарактерРаспределения - Заданный характер распределения
//	РаспределятьНаПодчиненныеПодразделения - Булево - Признак распределения на подчиненные подразделения.
//
// Возвращаемое значение:
//	Булево – Признак необходимости распределения затрат:
//				Истина - затраты необходимо распределить по способу распределения,
//				Ложь - затраты распределять не нужно.
//
Функция ПолучитьСпособИХарактерРаспределенияЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВыборкаПоСпособамРаспределенияЗатрат,
	ОпределятьПоХарактеруЗатрат,
	ПроверятьУказаниеСпособаРаспределения,
	СпособРаспределения,
	ХарактерРаспределенияЗатрат = Неопределено,
	РаспределятьНаПодчиненныеПодразделения = Ложь
	)
	
	РаспределятьЗатраты = Ложь;
	
	// Определим способ распределения затрат.
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Подразделение", СтрокаВыборки.Подразделение);
	СтруктураПоиска.Вставить("СтатьяЗатрат", СтрокаВыборки.СтатьяЗатрат);
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если ОпределятьПоХарактеруЗатрат Тогда
			СтруктураПоиска.Вставить("ХарактерЗатрат", СтрокаВыборки.ХарактерЗатрат);
		Иначе 
			СтруктураПоиска.Вставить("СчетЗатрат", СтрокаВыборки.СчетУчета);
		КонецЕсли;
			
	КонецЕсли;
		
	ВыборкаПоСпособамРаспределенияЗатрат.Сбросить();
	Если ВыборкаПоСпособамРаспределенияЗатрат.НайтиСледующий(СтруктураПоиска) Тогда
			
		СпособРаспределения = ВыборкаПоСпособамРаспределенияЗатрат.СпособРаспределения;
		ХарактерРаспределенияЗатрат = ВыборкаПоСпособамРаспределенияЗатрат.ХарактерРаспределенияЗатрат;
		РаспределятьНаПодчиненныеПодразделения = ВыборкаПоСпособамРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения;
			
		Если ЗначениеЗаполнено(СпособРаспределения) Тогда
			РаспределятьЗатраты = Не ВыборкаПоСпособамРаспределенияЗатрат.НеРаспределять;
		КонецЕсли;
			
	Иначе
			
		СпособРаспределения = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПустаяСсылка();
		ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка();
		РаспределятьНаПодчиненныеПодразделения = Ложь;
		
	КонецЕсли;
		
	// Если не указан способ распределения, выведем сообщение об ошибке.
	Если ПроверятьУказаниеСпособаРаспределения И Не ЗначениеЗаполнено(СпособРаспределения) Тогда
		ОбщегоНазначения.Сообщение("Не указан способ распределения для:
			|Подразделение: " + СтрокаВыборки.Подразделение + "
			|Статья затрат: " + СтрокаВыборки.СтатьяЗатрат + "
			|" + ?(Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, 
				"Счет учета: " + СтрокаВыборки.СчетУчета, "") + "", 
			СтатусСообщения.Важное
		);
			
	КонецЕсли;

	Возврат РаспределятьЗатраты;	

КонецФункции // ПолучитьСпособИХарактерРаспределенияЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРУ "БАЗА РАСПРЕДЕЛЕНИЯ ЗАТРАТ"

// Функция формирует текст запроса по регистру сведений "База распределения затрат".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаБазаРаспределенияЗатрат()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Распределение.Подразделение,
	|	Распределение.Продукция,
	|	Распределение.ХарактеристикаПродукции,
	|	Распределение.СерияПродукции,
	|	Распределение.НомерПередела,
	|	Распределение.Продукция.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП
	|
	|ПОМЕСТИТЬ РаспределениеПродукцииПоПеределам
	|ИЗ			
	|	РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК Распределение
	|
	|ГДЕ
	|	Распределение.Период МЕЖДУ &НачДата И &КонДата
	|	И &РаспределениеКосвенныхЗатрат
	|	И Не Распределение.КорректировкаНЗП
	|	И Не Распределение.ОприходованиеНЗП
	|	И Не Распределение.ВозвратИзНЗП
	|	//ДляРеглУчета И Распределение.Организация = &Организация
 	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции
	|
	|ПОМЕСТИТЬ ВыпускПродукции
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости)
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	МИНИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|
	|ПОМЕСТИТЬ ВыпускПродукцииПоПеределам
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|					
	|ГДЕ
	|	ВыпускПродукции.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|			
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа
	|			
	|ОБЪЕДИНИТЬ ВСЕ
	|			
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка),
	|	МАКСИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И (ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|			И Распределение.ВестиУчетПоСериямВНЗП
	|			ИЛИ Не Распределение.ВестиУчетПоСериямВНЗП)
	|					
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение
	|			
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат КАК СпособРаспределения,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения КАК РаспределятьНаПодчиненныеПодразделения,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ,
	|	БазаРаспределенияЗатрат.Подразделение КАК ПодразделениеНЗП,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|	БазаРаспределенияЗатрат.Заказ КАК ЗаказНЗП,
	|	ЗНАЧЕНИЕ(Перечисление.ХарактерРаспределенияЗатрат.ПустаяСсылка) КАК ХарактерРаспределенияЗатрат,
	|	
	|	МИНИМУМ(
	|		ЕСТЬNULL(ВыпускПродукции.НомерПередела, &НачальныйНомерПередела)
	|		) КАК НомерПередела,
	|
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета  БазаРаспределенияЗатрат.НалоговоеНазначение,
	|	//ДляБухУчета  БазаРаспределенияЗатрат.НалоговоеНазначение КАК НалоговоеНазначениеПоФакту,
	|
	|
	|	СУММА(
	|		ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриход = 0 ТОГДА
	|			БазаРаспределенияЗатрат.БазаПриход
	|		ИНАЧЕ
	|			(БазаРаспределенияЗатрат.БазаПриход /
	|			ВЫБОР КОГДА БазаРаспределенияЗатратВсего.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияЗатратВсего.БазаПриход = 0 ТОГДА
	|				1
	|			ИНАЧЕ
	|				БазаРаспределенияЗатратВсего.БазаПриход
	|			КОНЕЦ)
	|		КОНЕЦ
	|	) КАК БазаПриход,
	|	МАКСИМУМ(
	|		ВЫБОР КОГДА БазаРаспределенияНаПодчиненные.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненные.БазаПриход = 0 ТОГДА
	|			1
	|		ИНАЧЕ
	|			БазаРаспределенияНаПодчиненные.БазаПриход /
	|			ВЫБОР КОГДА БазаРаспределенияНаПодчиненныеВсего.БазаПриход ЕСТЬ NULL ИЛИ БазаРаспределенияНаПодчиненныеВсего.БазаПриход = 0 ТОГДА
	|				1
	|			ИНАЧЕ
	|				БазаРаспределенияНаПодчиненныеВсего.БазаПриход
	|			КОНЕЦ
	|		КОНЕЦ
	|	) КАК БазаНаПодчиненные
	|
	|ИЗ
	|	РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			БазаРаспределенияЗатрат.Подразделение,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	        //ДляБухУчета  БазаРаспределенияЗатрат.НалоговоеНазначение,
	|			СУММА(БазаРаспределенияЗатрат.БазаПриход) КАК БазаПриход
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	        //ДляБухУчета  БазаРаспределенияЗатрат.НалоговоеНазначение,
	|			БазаРаспределенияЗатрат.Подразделение
	|
	|		) КАК БазаРаспределенияЗатратВсего
	|	ПО
	|		БазаРаспределенияЗатрат.СпособРаспределенияЗатрат = БазаРаспределенияЗатратВсего.СпособРаспределенияЗатрат
	|		И БазаРаспределенияЗатрат.Подразделение = БазаРаспределенияЗатратВсего.Подразделение			
	|		И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			БазаРаспределенияЗатрат.Подразделение,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	        //ДляБухУчета  БазаРаспределенияЗатрат.НалоговоеНазначение,
	|			СУММА(БазаРаспределенияЗатрат.БазаПриход) КАК БазаПриход
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	        //ДляБухУчета  БазаРаспределенияЗатрат.НалоговоеНазначение,
	|			БазаРаспределенияЗатрат.Подразделение
	|
	|		) КАК БазаРаспределенияНаПодчиненные
	|	ПО
	|		БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.СпособРаспределенияЗатратПоПодразделениям 
	|					= БазаРаспределенияНаПодчиненные.СпособРаспределенияЗатрат
	|		И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|		И БазаРаспределенияЗатрат.Подразделение = БазаРаспределенияНаПодчиненные.Подразделение
	|		//ДляРеглУчета И БазаРаспределенияЗатрат.СчетУчета 	= БазаРаспределенияНаПодчиненные.СчетУчета
	|		//ДляБухУчета  И БазаРаспределенияЗатрат.НалоговоеНазначение = БазаРаспределенияНаПодчиненные.НалоговоеНазначение
	|				
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|			СУММА(БазаРаспределенияЗатрат.БазаПриход) КАК БазаПриход
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|
	|		СГРУППИРОВАТЬ ПО
	|			БазаРаспределенияЗатрат.СпособРаспределенияЗатрат
	|
	|		) КАК БазаРаспределенияНаПодчиненныеВсего
	|	ПО
	|		БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.СпособРаспределенияЗатратПоПодразделениям 
	|					= БазаРаспределенияНаПодчиненныеВсего.СпособРаспределенияЗатрат
	|		И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВыпускПродукцииПоПеределам КАК ВыпускПродукции
	|	ПО
	|		БазаРаспределенияЗатрат.Подразделение = ВыпускПродукции.Подразделение
	|		И БазаРаспределенияЗатрат.НоменклатурнаяГруппа = ВыпускПродукции.НоменклатурнаяГруппа
	|			
	|ГДЕ
	|	БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|	И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|	И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|	И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СпособыРаспределения.СпособРаспределенияЗатрат
	|		ИЗ
	|			РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(&КонГраница, 
	|				//ДляРеглУчета Организация = &Организация
	|			) КАК СпособыРаспределения
	|		ГДЕ
	|			Не СпособыРаспределения.НеРаспределять
	|			И ((&РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат <> &ХарактерРаспределенияПроизводственныеРасходы)
	|				ИЛИ 
	|				(Не &РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат = &ХарактерРаспределенияПроизводственныеРасходы)
	|				)
	|		)
	|	//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|	//ДляБухУчета И Не БазаРаспределенияЗатрат.СчетУчета.Забалансовый
	|			
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета  БазаРаспределенияЗатрат.НалоговоеНазначение,
	|	БазаРаспределенияЗатрат.Заказ
	|			
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляБухУчета  БазаРаспределенияЗатрат.НалоговоеНазначение,
	|	НомерПередела,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ
	|";
	
 	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаБазаРаспределенияЗатрат()

// Функция формирует текст запроса по регистру сведений "База распределения затрат".
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаБазаРаспределенияЗатратНаПродукцию()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Распределение.Подразделение,
	|	Распределение.Продукция,
	|	Распределение.ХарактеристикаПродукции,
	|	Распределение.СерияПродукции,
	|	Распределение.НомерПередела,
	|	Распределение.Продукция.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП
	|
	|ПОМЕСТИТЬ РаспределениеПродукцииПоПеределам
	|ИЗ			
	|	РегистрСведений.РаспределениеПродукцииПоПеределам%СуффиксОрганизаций% КАК Распределение
	|
	|ГДЕ
	|	Распределение.Период МЕЖДУ &НачДата И &КонДата
	|	И &РаспределениеКосвенныхЗатрат
	|	И Не Распределение.КорректировкаНЗП
	|	И Не Распределение.ОприходованиеНЗП
	|	И Не Распределение.ВозвратИзНЗП
	|	//ДляРеглУчета И Распределение.Организация = &Организация
 	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции
	|
	|ПОМЕСТИТЬ ВыпускПродукции
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости)
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|
	|	И ВыпускПродукции.Продукция В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Продукция
	|		ИЗ
	|			РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|		ГДЕ
	|			БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|			И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|		)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	МИНИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|
	|ПОМЕСТИТЬ ВыпускПродукцииПоПеределам
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И (ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|			И Распределение.ВестиУчетПоСериямВНЗП
	|			ИЛИ Не Распределение.ВестиУчетПоСериямВНЗП)
	|					
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции
	|			
	|ОБЪЕДИНИТЬ ВСЕ
	|			
	|ВЫБРАТЬ
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	МИНИМУМ(Распределение.НомерПередела) КАК НомерПередела
	|ИЗ
	|	ВыпускПродукции КАК ВыпускПродукции
	|					
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаспределениеПродукцииПоПеределам КАК Распределение
	|	ПО
	|		ВыпускПродукции.Подразделение = Распределение.Подразделение
	|		И ВыпускПродукции.Продукция = Распределение.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = Распределение.ХарактеристикаПродукции
	|		И ВыпускПродукции.СерияПродукции = Распределение.СерияПродукции
	|					
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа
	|			
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат КАК СпособРаспределения,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат.РаспределятьНаПодчиненныеПодразделения КАК РаспределятьНаПодчиненныеПодразделения,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ,
	|
	|	БазаРаспределенияЗатрат.ПодразделениеНЗП,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппаНЗП,
	|	БазаРаспределенияЗатрат.ЗаказНЗП,
	|
	|	БазаРаспределенияЗатрат.Продукция,
	|	БазаРаспределенияЗатрат.ХарактеристикаПродукции,
	|	БазаРаспределенияЗатрат.СерияПродукции,
	|	БазаРаспределенияЗатрат.Спецификация,
	|	БазаРаспределенияЗатрат.ВидВыпуска,
	|	&ПустойХарактерРаспределения КАК ХарактерРаспределенияЗатрат,
	|	
	|	МИНИМУМ(
	|		ЕСТЬNULL(ВыпускПродукции.НомерПередела, &НачальныйНомерПередела)
	|		) КАК НомерПередела,
	|
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.НалоговоеНазначение,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.НалоговоеНазначение КАК НалоговоеНазначениеПоФакту,
	|
	|	СУММА(БазаРаспределенияЗатрат.База) КАК БазаПриход,
	|	СУММА(БазаРаспределенияЗатрат.База) КАК База,
	|	СУММА(БазаРаспределенияЗатрат.БазаОстатокНЗП) КАК БазаОстатокНЗП
	|
	|ИЗ
	|	РегистрСведений.БазаРаспределенияЗатрат%СуффиксУчета% КАК БазаРаспределенияЗатрат
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВыпускПродукцииПоПеределам КАК ВыпускПродукции
	|	ПО
	|		БазаРаспределенияЗатрат.Подразделение = ВыпускПродукции.Подразделение
	|		И БазаРаспределенияЗатрат.НоменклатурнаяГруппа = ВыпускПродукции.НоменклатурнаяГруппа
	|		И БазаРаспределенияЗатрат.Продукция = ВыпускПродукции.Продукция
	|		И БазаРаспределенияЗатрат.ХарактеристикаПродукции = ВыпускПродукции.ХарактеристикаПродукции
	|		И БазаРаспределенияЗатрат.СерияПродукции = ВыпускПродукции.СерияПродукции
	|			
	|ГДЕ
	|	БазаРаспределенияЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|	И БазаРаспределенияЗатрат.РаспределениеКосвенныхЗатрат = &РаспределениеКосвенныхЗатрат
	|	И БазаРаспределенияЗатрат.РасчетСебестоимостиВыпуска
	|	И БазаРаспределенияЗатрат.СпособРаспределенияЗатрат В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СпособыРаспределения.СпособРаспределенияЗатрат
	|		ИЗ
	|			РегистрСведений.СпособыРаспределенияСтатейЗатрат%СуффиксОрганизаций%.СрезПоследних(&КонГраница, 
	|				//ДляРеглУчета Организация = &Организация
	|			) КАК СпособыРаспределения
	|		ГДЕ
	|			Не СпособыРаспределения.НеРаспределять
	|			И ((&РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат <> &ХарактерРаспределенияПроизводственныеРасходы)
	|				ИЛИ 
	|				(Не &РаспределениеКосвенныхЗатрат 
	|				И СпособыРаспределения.ХарактерРаспределенияЗатрат = &ХарактерРаспределенияПроизводственныеРасходы)
	|				)
	|		)
	|	//ДляРеглУчета И БазаРаспределенияЗатрат.Организация = &Организация
	|	//ДляБухУчета И Не БазаРаспределенияЗатрат.СчетУчета.Забалансовый
	|			
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ,
	|
	|	БазаРаспределенияЗатрат.ПодразделениеНЗП,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппаНЗП,
	|	БазаРаспределенияЗатрат.ЗаказНЗП,
	|
	|	БазаРаспределенияЗатрат.Продукция,
	|	БазаРаспределенияЗатрат.ХарактеристикаПродукции,
	|	БазаРаспределенияЗатрат.СерияПродукции,
	|	БазаРаспределенияЗатрат.Спецификация,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.НалоговоеНазначение,
	|	БазаРаспределенияЗатрат.ВидВыпуска
	|			
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета БазаРаспределенияЗатрат.Организация,
	|	БазаРаспределенияЗатрат.СпособРаспределенияЗатрат,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.СчетУчета,
	|	//ДляРеглУчета БазаРаспределенияЗатрат.НалоговоеНазначение,
	|	НомерПередела,
	|	БазаРаспределенияЗатрат.Подразделение,
	|	БазаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	БазаРаспределенияЗатрат.Заказ,
	|	БазаРаспределенияЗатрат.Продукция,
	|	БазаРаспределенияЗатрат.ХарактеристикаПродукции,
	|	БазаРаспределенияЗатрат.СерияПродукции,
	|	БазаРаспределенияЗатрат.Спецификация,
	|	БазаРаспределенияЗатрат.ВидВыпуска
	|";

 	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаБазаРаспределенияЗатратНаПродукцию()

// Функция формирует запрос по регистру сведений "База распределения затрат".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	ТекстЗапросаСКомментариями - Текст - Текст запроса
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//
// Возвращаемое значение:
//   Запрос – Запрос по регистру сведений "База распределения затрат".
//
Функция СформироватьЗапросПоБазеРаспределенияЗатрат(
	СтруктураШапкиДокумента,
	ТекстЗапросаСКомментариями,
	КосвенныеЗатраты,
	НачальныйПередел = 1
	)
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("РаспределениеКосвенныхЗатрат", КосвенныеЗатраты);
	Запрос.УстановитьПараметр("ВыпускПродукцииПоФиксированнойСтоимости", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	Запрос.УстановитьПараметр("ХарактерРаспределенияПроизводственныеРасходы", Перечисления.ХарактерРаспределенияЗатрат.ПроизводственныеРасходы);
	Запрос.УстановитьПараметр("ПустойХарактерРаспределения", Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ПустаяНоменклатурнаяГруппа", Справочники.НоменклатурныеГруппы.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПродукция", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("НачальныйНомерПередела", Макс(НачальныйПередел, 1));

	Возврат Запрос;

КонецФункции // СформироватьЗапросПоБазеРаспределенияЗатрат()

// Функция получает построитель запроса по базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат выполнения запроса по базе распределения
//
// Возвращаемое значение:
//	ПостроительЗапроса - построитель запроса.
//
Функция ПолучитьПостроительЗапросаПоБазеРаспределения(
	СтруктураШапкиДокумента,
	РезультатЗапросаБазаРаспределения
	)
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(РезультатЗапросаБазаРаспределения);
	ПостроительЗапроса.Отбор.Добавить("СпособРаспределения");
	ПостроительЗапроса.Отбор.Добавить("ПодразделениеНЗП");
	ПостроительЗапроса.Отбор.Добавить("НоменклатурнаяГруппаНЗП");
	ПостроительЗапроса.Отбор.Добавить("ЗаказНЗП");
	ПостроительЗапроса.Отбор.Добавить("НомерПередела");
	ПостроительЗапроса.Отбор.Добавить("ХарактерРаспределенияЗатрат");
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПостроительЗапроса.Отбор.Добавить("СчетУчета");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И НЕ СтруктураШапкиДокумента.РазрешитьКорректировкиИспользования Тогда
		ПостроительЗапроса.Отбор.Добавить("НалоговоеНазначениеПоФакту");
	КонецЕсли;
	
		 
	Если ПостроительЗапроса.ДоступныеПоля.Найти("Продукция") <> Неопределено Тогда
		ПостроительЗапроса.Отбор.Добавить("Продукция");
	КонецЕсли;
	Если ПостроительЗапроса.ДоступныеПоля.Найти("ХарактеристикаПродукции") <> Неопределено Тогда
		ПостроительЗапроса.Отбор.Добавить("ХарактеристикаПродукции");
	КонецЕсли;
	Если ПостроительЗапроса.ДоступныеПоля.Найти("СерияПродукции") <> Неопределено Тогда
		ПостроительЗапроса.Отбор.Добавить("СерияПродукции");
	КонецЕсли;
	
	ПостроительЗапроса.Отбор.СпособРаспределения.Использование = Истина;
	ПостроительЗапроса.Отбор.НомерПередела.Использование = Истина;
	ПостроительЗапроса.Отбор.НомерПередела.ВидСравнения = ВидСравнения.БольшеИлиРавно;
	
	Возврат ПостроительЗапроса;

КонецФункции // ПолучитьПостроительЗапросаПоБазеРаспределения()

// Функция проверяет отбор и устанавливает параметры отбора построителя запроса по базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	НомерПередела - Число - Текущий номер передела
//	СпособРаспределения - СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск - Заданный способ определения
//	ХарактерРаспределенияЗатрат - ПеречислениеСсылка.ХарактерРаспределения - Заданный характер распределения
//	РаспределятьНаПодчиненныеПодразделения - Булево - Признак распределения на подчиненные подразделения
//	ОпределятьПоСчетуУчету - Булево - Признак определения базы распределения по счету учета
//	ОтборПоПродукции - Булево - Признак определения базы распределения с учетом отбора по продукции
//
// Выходные параметры
//	ПостроительЗапроса - ПостроительЗапроса - построитель запроса.
//
// Возвращаемое значение:
//	Булево - Истина - установлен новый отбор,
//			 Ложь - значения отбора не изменились.
//
Функция ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	НомерПередела,
	СпособРаспределения,
	ХарактерРаспределенияЗатрат,
	РаспределятьНаПодчиненныеПодразделения,
	ОпределятьПоСчетуУчету,
	ОтборПоПродукции,
	ПостроительЗапроса
	)
	
	ОтборСоответствуетАналитике = Ложь;
	Если ПостроительЗапроса.Отбор.СпособРаспределения.Значение = СпособРаспределения
	   И ПостроительЗапроса.Отбор.ХарактерРаспределенияЗатрат.Значение = ХарактерРаспределенияЗатрат
	   И ПостроительЗапроса.Отбор.ПодразделениеНЗП.Значение = СтрокаВыборки.Подразделение
	   И ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Значение = СтрокаВыборки.НоменклатурнаяГруппа
	   И ПостроительЗапроса.Отбор.ЗаказНЗП.Значение = СтрокаВыборки.Заказ
	   И ПостроительЗапроса.Отбор.НомерПередела.Значение = НомерПередела 
	Тогда
		ОтборСоответствуетАналитике = Истина;
	КонецЕсли;
	   
	Если ОтборСоответствуетАналитике
	   И ОпределятьПоСчетуУчету
	      И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
		Если ПостроительЗапроса.Отбор.СчетУчета.Значение <> СтрокаВыборки.СчетУчета Тогда
			ОтборСоответствуетАналитике = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтборСоответствуетАналитике
	   И ОтборПоПродукции
	   И ПостроительЗапроса.ДоступныеПоля.Найти("Продукция") <> Неопределено Тогда
			
		Если ПостроительЗапроса.Отбор.Продукция <> СтрокаВыборки.Продукция
		 ИЛИ ПостроительЗапроса.Отбор.ХарактеристикаПродукции <> СтрокаВыборки.ХарактеристикаПродукции
		 ИЛИ ПостроительЗапроса.Отбор.СерияПродукции <> СтрокаВыборки.СерияПродукции Тогда
			ОтборСоответствуетАналитике = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
	
	Если ОтборСоответствуетАналитике Тогда
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
			И НЕ СтруктураШапкиДокумента.РазрешитьКорректировкиИспользования 
			И ПостроительЗапроса.ДоступныеПоля.Найти("НалоговоеНазначениеПоФакту") <> Неопределено 
			// НалоговоеНазначение затрат с группой ДоходовИЗатрат можно распределять на все налоговые назначения выпуска - по ним корректировок не бывает
			И (НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(СтрокаВыборки.НалоговоеНазначение) <> Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат)
			
			Тогда
			
	  		Если ПостроительЗапроса.Отбор.НалоговоеНазначениеПоФакту <> СтрокаВыборки.НалоговоеНазначение Тогда
	  			ОтборСоответствуетАналитике = Ложь;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;	
			
	Если Не ОтборСоответствуетАналитике Тогда
	
		ПостроительЗапроса.Отбор.СпособРаспределения.Значение = СпособРаспределения;
		ПостроительЗапроса.Отбор.ХарактерРаспределенияЗатрат.Значение = ХарактерРаспределенияЗатрат;
		ПостроительЗапроса.Отбор.ПодразделениеНЗП.Значение = СтрокаВыборки.Подразделение;
		ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Значение = СтрокаВыборки.НоменклатурнаяГруппа;
		ПостроительЗапроса.Отбор.ЗаказНЗП.Значение = СтрокаВыборки.Заказ;
		ПостроительЗапроса.Отбор.НомерПередела.Значение = НомерПередела;
			
		Если ОпределятьПоСчетуУчету
			И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				
			ПостроительЗапроса.Отбор.СчетУчета.Значение = СтрокаВыборки.СчетУчета;
			Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
				ПостроительЗапроса.Отбор.СчетУчета.Использование = Ложь;
			Иначе	
				ПостроительЗапроса.Отбор.СчетУчета.Использование = Истина;
			КонецЕсли;
			
		КонецЕсли;
			
		Если ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение Тогда
			ПостроительЗапроса.Отбор.ПодразделениеНЗП.Использование = Ложь;
		Иначе
			ПостроительЗапроса.Отбор.ПодразделениеНЗП.Использование = Истина;
			Если РаспределятьНаПодчиненныеПодразделения Тогда
				ПостроительЗапроса.Отбор.ПодразделениеНЗП.ВидСравнения = ВидСравнения.ВИерархии;
			Иначе
				ПостроительЗапроса.Отбор.ПодразделениеНЗП.ВидСравнения = ВидСравнения.Равно;
			КонецЕсли;
		КонецЕсли;
												
		ПостроительЗапроса.Отбор.НоменклатурнаяГруппаНЗП.Использование = Не СтрокаВыборки.НоменклатурнаяГруппа.Пустая();
		ПостроительЗапроса.Отбор.ЗаказНЗП.Использование = ЗначениеЗаполнено(СтрокаВыборки.Заказ);
		
		Если ОтборПоПродукции
		   И ПостроительЗапроса.ДоступныеПоля.Найти("Продукция") <> Неопределено Тогда
			
			ПостроительЗапроса.Отбор.Продукция.Значение = СтрокаВыборки.Продукция;
			ПостроительЗапроса.Отбор.ХарактеристикаПродукции.Значение = СтрокаВыборки.ХарактеристикаПродукции;
			ПостроительЗапроса.Отбор.СерияПродукции.Значение = СтрокаВыборки.СерияПродукции;
			
			ПостроительЗапроса.Отбор.Продукция.Использование = Не СтрокаВыборки.Продукция.Пустая();
			ПостроительЗапроса.Отбор.ХарактеристикаПродукции.Использование = Не СтрокаВыборки.ХарактеристикаПродукции.Пустая();
			ПостроительЗапроса.Отбор.СерияПродукции.Использование = Не СтрокаВыборки.СерияПродукции.Пустая();
			
		КонецЕсли;
		
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
			И НЕ СтруктураШапкиДокумента.РазрешитьКорректировкиИспользования 
			И ПостроительЗапроса.ДоступныеПоля.Найти("НалоговоеНазначениеПоФакту") <> Неопределено 
			// НалоговоеНазначение затрат с группой ДоходовИЗатрат можно распределять на все налоговые назначения выпуска - по ним корректировок не бывает
			И (НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(СтрокаВыборки.НалоговоеНазначение) <> Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат)
			
			Тогда
			
		 	ПостроительЗапроса.Отбор.НалоговоеНазначениеПоФакту.Значение = СтрокаВыборки.НалоговоеНазначение;
		  	ПостроительЗапроса.Отбор.НалоговоеНазначениеПоФакту.Использование = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не ОтборСоответствуетАналитике;

КонецФункции // ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ ПО РАСПРЕДЕЛЕНИЮ ЗАТРАТ

// Процедура формирует движение по распределению затрат по регистру "Незавершенное производство".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - Статья затрат
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат или Неопределено - Текущий характер затрат
//	Затрата - ПеречислениеСсылка.ХарактерЗатрат или СправочникСсылка.Номенклатура,
//	ХарактеристикаЗатраты - СправочникСсылка.ХарактеристикиНоменклатуры (используется только для производственных расходов),
//	СерияЗатраты - СправочникСсылка.СерииНоменклатуры (используется только для производственных расходов),
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	Количество - Число - Количество затрат (используется только для производственных расходов)
//  Сумма - Число - Сумма затрат
//	ВидДвижения - ВидДвиженияНакопления - Текущий вид движения
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство".
//
Процедура СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтатьяЗатрат,
	ХарактерЗатрат,
	Затрата,
	ХарактеристикаЗатраты,
	СерияЗатраты,
	НомерПередела,
	Количество,
	Сумма,
	СуммаНУ,
	НДСВходящий,
	НДСКредит,
	ВидДвижения,
	НаборЗаписейНезавершенноеПроизводство,
	СтрокаВыборкиПоЗатратамНаВыпуск = Неопределено,
	СтрокаВыборкиПоЗатратам = Неопределено
	)
	
	Если Количество = 0
	   И Сумма = 0
	   И СуммаНУ = 0
	   И НДСВходящий = 0
	   И НДСКредит = 0
	   Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидДвижения <> ВидДвиженияНакопления.Приход
	   И ВидДвижения <> ВидДвиженияНакопления.Расход Тогда
	   
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид движения!
					|Процедура <СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат>");
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Незавершенное производство" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Затрата - заполняется характер затрат или номенклатура
	//	- ХарактеристикаЗатраты - не заполняется (для косвенных затрат) или заполняется характеристика номенклатуры
	//	- СерияЗатраты - не заполняется (для косвенных затрат) или заполняется серия номенклатуры.
	
	НоваяСтрока = НаборЗаписейНезавершенноеПроизводство.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетУчета;
	КонецЕсли;
	
	НоваяСтрока.Подразделение = СтрокаВыборки.Подразделение;
	НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппа;
	НоваяСтрока.СтатьяЗатрат = СтатьяЗатрат;
	НоваяСтрока.Заказ = СтрокаВыборки.Заказ;
	
	НоваяСтрока.Затрата = Затрата;
	НоваяСтрока.ХарактеристикаЗатраты = ХарактеристикаЗатраты;
	НоваяСтрока.СерияЗатраты = СерияЗатраты;
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
	 	КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеАдминистративныеРасходы_Регламент;	
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
		КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеОбщепроизводственныеРасходы_Регламент;
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
		КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеБракВПроизводстве_Регламент;
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.РаспределениеНЗПРегламент;
		
	ИначеЕсли ХарактерЗатрат = Неопределено Тогда
		КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеНЗПРегламент;
		
	Иначе
		КодОперации = Неопределено;
		ОбщегоНазначения.СообщитьОбОшибке("Не определен код операции для характера затрат: """ + ХарактерЗатрат + """.
					|Процедура <СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат>");
		
	КонецЕсли;
		
	НоваяСтрока.КодОперации = КодОперации;
	НоваяСтрока.НомерПередела = НомерПередела;		
	
	НоваяСтрока.Стоимость = Сумма;
	НоваяСтрока.Количество  = Количество;
	
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если СтрокаВыборкиПоЗатратам <> Неопределено Тогда
		  	Если НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(СтрокаВыборкиПоЗатратам.НалоговоеНазначение) = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС Тогда
		  		НоваяСтрока.НалоговоеНазначение = СтрокаВыборкиПоЗатратам.НалоговоеНазначение;
		  	Иначе	
		  		НоваяСтрока.НалоговоеНазначение = СтрокаВыборкиПоЗатратамНаВыпуск.НалоговоеНазначение;
		  	КонецЕсли; 
		Иначе
		  	НоваяСтрока.НалоговоеНазначение = СтрокаВыборки.НалоговоеНазначение;
		КонецЕсли;
		
		Если СтрокаВыборкиПоЗатратамНаВыпуск <> Неопределено Тогда
			НоваяСтрока.НалоговоеНазначениеПоФакту = СтрокаВыборкиПоЗатратамНаВыпуск.НалоговоеНазначение;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.НалоговоеНазначениеПоФакту) Тогда
				НоваяСтрока.НалоговоеНазначениеПоФакту = НоваяСтрока.НалоговоеНазначение;
			КонецЕсли;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.НалоговоеНазначение) 
			И (ЗначениеЗаполнено(СтрокаВыборки.Заказ) И СтрокаВыборки.Заказ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка) 
			И НЕ СтрокаВыборки.СчетУчета.Забалансовый
			Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Заказ", СтрокаВыборки.Заказ);
			СтруктураПараметров.Вставить("НоменклатурнаяГруппа", СтрокаВыборки.НоменклатурнаяГруппа);
			СтруктураПараметров.Вставить("ПодразделениеОрганизации", СтрокаВыборки.Подразделение);
			
			НалоговоеНазначениеПереработки = УправлениеЗатратами.ОпределитьНалоговоеНазначение(СтруктураПараметров);
			
			НоваяСтрока.НалоговоеНазначение = НалоговоеНазначениеПереработки;
			
		КонецЕсли; 
		
		
		НоваяСтрока.СтоимостьНУ = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначение, СуммаНУ);
		НоваяСтрока.НДСВходящий = НДСВходящий;
		НоваяСтрока.НДСКредит   = НДСКредит;
		
	КонецЕсли; 
	
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейНезавершенноеПроизводство.Количество() = 1000 Тогда
		НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат()

// Процедура формирует движение по распределению затрат по регистру "Затраты".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//  Сумма - Число - Сумма затрат
//	ВидДвижения - ВидДвиженияНакопления - Текущий вид движения
//	НаборЗаписейЗатраты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты".
//
Процедура СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатрат,
	Сумма,
	СуммаНУ = 0,
	НДСВходящий = 0,
	НДСКредит = 0,
	ВидДвижения,
	НаборЗаписейЗатраты,
	НалоговоеНазначениеПоФакту = Неопределено
	)
	
	Если Сумма = 0
		И СуммаНУ = 0
		И НДСВходящий = 0
		И НДСКредит = 0
		Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидДвижения <> ВидДвиженияНакопления.Приход
	   И ВидДвижения <> ВидДвиженияНакопления.Расход Тогда
	   
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид движения!
					|Процедура <СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат>");
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- НалоговоеНазначение - заполняется только при отражении документа в бухгалтерском учете
	
	НоваяСтрока = НаборЗаписейЗатраты.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда	
		КодОперации = Перечисления.КодыОперацийЗатраты.СписаниеАдминистративныеРасходы_Регламент;
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
		КодОперации = Перечисления.КодыОперацийЗатраты.СписаниеОбщепроизводственныеРасходы_Регламент;
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы
		ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт
		ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы
		ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие
	Тогда
		КодОперации = Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты;
		
	Иначе
		КодОперации = Неопределено;
		ОбщегоНазначения.СообщитьОбОшибке("Не определен код операции для характера затрат: """ + ХарактерЗатрат + """.
					|Процедура <СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат>");
		
	КонецЕсли;
		
	НоваяСтрока.КодОперации = КодОперации;
	
	НоваяСтрока.Сумма = Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		НоваяСтрока.СуммаНУ     = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначение, СуммаНУ);
		НоваяСтрока.НДСВходящий = НДСВходящий;		
		НоваяСтрока.НДСКредит   = НДСКредит;
		
		Если НалоговоеНазначениеПоФакту <> Неопределено Тогда
			НоваяСтрока.НалоговоеНазначениеПоФакту = НалоговоеНазначениеПоФакту;	
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатраты.Количество() = 1000 Тогда
		НаборЗаписейЗатраты.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат()

// Процедура формирует движение по распределению затрат по регистру "Затраты (обороты)".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	Проект - Справочник.Проекты - Текущий проект
//  Сумма - Число - Сумма затрат
//	НаборЗаписейЗатратыОбороты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты (обороты)".
//
Процедура СформироватьДвиженияПоРегиструЗатратыОборотыРаспределениеЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Проект,
	Сумма,
	НаборЗаписейЗатратыОбороты
	)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты (обороты)" должны быть заполнены измерения:
	//	- Подразделение,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Проект
	
	НоваяСтрока = НаборЗаписейЗатратыОбороты.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	НоваяСтрока.Проект = Проект;
	НоваяСтрока.Сумма = Сумма;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыОбороты.Количество() = 1000 Тогда
		НаборЗаписейЗатратыОбороты.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыОборотыРаспределениеЗатрат()

// Процедура формирует движение по распределению затрат по регистру "Брак в производстве".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  Сумма - Число - Сумма затрат
//	ВидДвижения - ВидДвиженияНакопления - Текущий вид движения
//	НаборЗаписейБракВПроизводстве - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Брак в производстве".
//
Процедура СформироватьДвиженияПоРегиструБракВПроизводствеРаспределениеЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Сумма,
	СуммаНУ = 0,
	НДСВходящий = 0,
	НДСКредит = 0,
	ВидДвижения,
	НаборЗаписейБракВПроизводстве
	)
	
	Если Сумма = 0
		И СуммаНУ = 0
		И НДСВходящий = 0
		И НДСКредит = 0
		Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидДвижения <> ВидДвиженияНакопления.Приход
	   И ВидДвижения <> ВидДвиженияНакопления.Расход Тогда
	   
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид движения!
					|Процедура <СформироватьДвиженияПоРегиструБракВПроизводствеРаспределениеЗатрат>");
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Брак в производстве" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции,
	//	- НалоговоеНазначение - заполняется только при отражении документа в бухгалтерском учете
	
	НоваяСтрока = НаборЗаписейБракВПроизводстве.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийБракВПроизводстве.СписаниеБракВПроизводстве_Регламент;
	
	НоваяСтрока.Сумма = Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СуммаНУ     = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначение, СуммаНУ);
		НоваяСтрока.НДСВходящий = НДСВходящий;		
		НоваяСтрока.НДСКредит   = НДСКредит;
	КонецЕсли; 
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейБракВПроизводстве.Количество() = 1000 Тогда
		НаборЗаписейБракВПроизводстве.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструБракВПроизводствеРаспределениеЗатрат()

// Процедура формирует движение по распределению затрат по регистру "Затраты на выпуск продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиБаза - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - Статья затрат
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//	СтатусМатериальныхЗатрат - ПеречислениеСсылка.СтатусыМатериальныхЗатратНаПроизводство - Текущий статус материальных затрат
//  Сумма - Число - Сумма затрат
//	НаборЗаписейЗатратыНаВыпуск - ТаблицаЗначений - Таблица движений регистра накопления "Затраты на выпуск".
//
Процедура СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтрокаВыборкиБаза,
	СтатьяЗатрат,
	ХарактерЗатрат,
	СтатусМатериальныхЗатрат,
	НалоговоеНазначениеЗатрат,
	Сумма,
	СуммаНУ = 0,
	НДСВходящий = 0,
	НДСКредит = 0,
	НаборЗаписейЗатратыНаВыпуск,
	УстановитьКодОперации = Неопределено,
	УстановитьСчетУчета = Неопределено
	)
	
	Если Сумма = 0
		И СуммаНУ = 0
		И НДСВходящий = 0
		И НДСКредит = 0
		Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты на выпуск" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском или международном учете,
	//
	// Измерения и реквизиты, заполняемые по данным базы распределения:
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или международном учете,
	//	- НоменклатурнаяГруппа,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции,
	//	- Спецификация,
	//	- Заказ,
	//	- ДокументВыпуска,
	//	- НалоговоеНазначениеПоФакту - заполняется только при отражении документа в бухгалтерском учете
	
	//
	// Измерения и реквизиты, заполняемые по распределяемым затратам:
	//	- СтатьяЗатрат,
	//	- Затрата - заполняется ХарактерЗатрат,
	//	- ХарактеристикаЗатраты - не заполняется,
	//	- СерияЗатраты - не заполняется,
	//	- НоменклатурнаяГруппаНЗП,
	//	- ЗаказНЗП,
	//	- ПодразделениеНЗП,
	//	- НалоговоеНазначение - заполняется только при отражении документа в бухгалтерском учете
	
	НоваяСтрока = НаборЗаписейЗатратыНаВыпуск.Добавить();
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборкиБаза);
	
	НоваяСтрока.Затрата = ХарактерЗатрат;
	
	НоваяСтрока.НоменклатурнаяГруппаНЗП = СтрокаВыборки.НоменклатурнаяГруппа;
	НоваяСтрока.ЗаказНЗП = СтрокаВыборки.Заказ;
	НоваяСтрока.ПодразделениеНЗП = СтрокаВыборки.Подразделение;
	
	Если СтруктураШапкиДокумента.Свойство("ДетализацияПоФиксированнойСтатьеЗатрат") Тогда
		ДетализацияПоФиксированнойСтатьеЗатрат = СтруктураШапкиДокумента.ДетализацияПоФиксированнойСтатьеЗатрат;
	Иначе
		ДетализацияПоФиксированнойСтатьеЗатрат = Ложь;
	КонецЕсли;
	
	// Заполним статью затрат.
	Если Не ДетализацияПоФиксированнойСтатьеЗатрат Тогда
		НоваяСтрока.СтатьяЗатрат  = СтатьяЗатрат;
	Иначе
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
			НоваяСтрока.СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяБракВПроизводстве;
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
			НоваяСтрока.СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяОбщепроизводственныеРасходы;
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
			НоваяСтрока.СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяАдминистративныеРасходы;
			
		Иначе
			НоваяСтрока.СтатьяЗатрат = СтатьяЗатрат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.НалоговоеНазначение        = НалоговоеНазначениеЗатрат;
		НоваяСтрока.НалоговоеНазначениеПоФакту = СтрокаВыборкиБаза.НалоговоеНазначение;		
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.НалоговоеНазначениеПоФакту) 
			И (ЗначениеЗаполнено(СтрокаВыборкиБаза.Заказ) И СтрокаВыборкиБаза.Заказ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка) Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Заказ", СтрокаВыборкиБаза.Заказ);
			СтруктураПараметров.Вставить("НоменклатурнаяГруппа", СтрокаВыборкиБаза.НоменклатурнаяГруппа);
			СтруктураПараметров.Вставить("ПодразделениеОрганизации", СтрокаВыборкиБаза.Подразделение);
			
			НалоговоеНазначениеПереработки = УправлениеЗатратами.ОпределитьНалоговоеНазначение(СтруктураПараметров);
			
			НоваяСтрока.НалоговоеНазначениеПоФакту = НалоговоеНазначениеПереработки;
			
		КонецЕсли; 
	КонецЕсли; 
	
	
	// Заполним код операции.
	Если УстановитьКодОперации <> Неопределено Тогда
		КодОперации = УстановитьКодОперации;	
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
		КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ФактСебестоимостьАдминистративныеРасходы;
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
		КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ФактСебестоимостьОбщепроизводственныеРасходы;
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
		КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ФактСебестоимостьБракВПроизводстве;
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		Если СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы Тогда
			КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты;
		Иначе
			КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты;
		КонецЕсли;
		
	Иначе
		КодОперации = Неопределено;
		ОбщегоНазначения.СообщитьОбОшибке("Не определен код операции для характера затрат: """ + ХарактерЗатрат + """.
					|Процедура <СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатрат>");
		
	КонецЕсли;
				
	Если УстановитьСчетУчета <> Неопределено Тогда
		НоваяСтрока.СчетУчета = УстановитьСчетУчета;
	КонецЕсли;
		
	НоваяСтрока.КодОперации = КодОперации;
	НоваяСтрока.КосвенныеЗатраты = Истина;
	НоваяСтрока.ЗатратыВстречногоВыпуска = Ложь;
	
	НоваяСтрока.Количество = 0;
	НоваяСтрока.Сумма = Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СуммаНУ 	= НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначениеПоФакту, СуммаНУ);
		НоваяСтрока.НДСВходящий = НДСВходящий;
		НоваяСтрока.НДСКредит 	= НДСКредит;
	КонецЕсли; 
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыНаВыпуск.Количество() = 1000 Тогда
		НаборЗаписейЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатрат()

// Процедура формирует движение по распределению затрат по регистру "Затраты на выпуск продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиБаза - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	РаспределениеЗатратПоБазе - Булево - Признак вызова процедуры при распределении затрат по базе
//	КосвенныеЗатраты - Булево - Признак выполнения действия "Распределение косвенных расходов"
//	ЗатратыВстречногоВыпуска - Булево - Признак выполнения действия "Распределение затрат встречного выпуска"
//  Количество - Число - Количество затрат
//  Сумма - Число - Сумма затрат
//	НаборЗаписейЗатратыНаВыпуск - ТаблицаЗначений - Таблица движений регистра накопления "Затраты на выпуск".
//
Процедура СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииПрямыеЗатраты(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтрокаВыборкиБаза,
	РаспределениеЗатратПоБазе,
	КосвенныеЗатраты,
	ЗатратыВстречногоВыпуска,
	Количество,
	Сумма,
	СуммаНУ,
	НДСВходящий,
	НДСКредит,
	НаборЗаписейЗатратыНаВыпуск,
	УстановитьКодОперации = Неопределено,
	УстановитьСчетУчета = Неопределено,
	УстановитьПодразделение = Неопределено,
	УстановитьНоменклатурнаяГруппа = Неопределено
	)
	
	Если Количество = 0
	   И Сумма = 0
	   И СуммаНУ = 0 
	   И НДСВходящий = 0 
	   И НДСКредит = 0 
	   Тогда
	   
		Возврат;
		
	КонецЕсли;
	
	// В движениях по регистру "Затраты на выпуск" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском или международном учете,
	//
	// Измерения и реквизиты, заполняемые по данным базы распределения:
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или международном учете,
	//	- НоменклатурнаяГруппа,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции,
	//	- Спецификация,
	//	- Заказ,
	//	- ДокументВыпуска,
	//	- НалоговоеНазначениеПоФакту - заполняется только при отражении документа в бух. учете
	
	//
	// Измерения и реквизиты, заполняемые по распределяемым затратам:
	//	- СтатьяЗатрат,
	//	- Затрата,
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты,
	//	- НоменклатурнаяГруппаНЗП,
	//	- ЗаказНЗП,
	//	- ПодразделениеНЗП,
	//	- НалоговоеНазначение - заполняется только при отражении документа в бух. учете
	
	НоваяСтрока = НаборЗаписейЗатратыНаВыпуск.Добавить();
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборкиБаза);
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.НалоговоеНазначениеПоФакту) Тогда
			// это налоговое назначение выпущенной продукции
			НоваяСтрока.НалоговоеНазначениеПоФакту = СтрокаВыборкиБаза.НалоговоеНазначение;
		КонецЕсли; 
	КонецЕсли;
	
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатрат;
		
	Если РаспределениеЗатратПоБазе Тогда
		НоваяСтрока.НоменклатурнаяГруппаНЗП = СтрокаВыборки.НоменклатурнаяГруппа;
		НоваяСтрока.ЗаказНЗП = СтрокаВыборки.Заказ;
		НоваяСтрока.ПодразделениеНЗП = СтрокаВыборки.Подразделение;
		
		НоваяСтрока.Затрата = СтрокаВыборки.Затрата;
		НоваяСтрока.ХарактеристикаЗатраты = СтрокаВыборки.ХарактеристикаЗатраты;
		НоваяСтрока.СерияЗатраты = СтрокаВыборки.СерияЗатраты;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			// это налоговое назначение затраты
			НоваяСтрока.НалоговоеНазначение = СтрокаВыборки.НалоговоеНазначение;
		КонецЕсли;	
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Не ЗначениеЗаполнено(НоваяСтрока.НалоговоеНазначениеПоФакту) 
		И (ЗначениеЗаполнено(СтрокаВыборкиБаза.Заказ) И СтрокаВыборкиБаза.Заказ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка) Тогда	
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Заказ", СтрокаВыборкиБаза.Заказ);
		СтруктураПараметров.Вставить("НоменклатурнаяГруппа", СтрокаВыборкиБаза.НоменклатурнаяГруппа);
		СтруктураПараметров.Вставить("ПодразделениеОрганизации", СтрокаВыборкиБаза.Подразделение);
		
		НалоговоеНазначениеПереработки = УправлениеЗатратами.ОпределитьНалоговоеНазначение(СтруктураПараметров);
		
		НоваяСтрока.НалоговоеНазначениеПоФакту = НалоговоеНазначениеПереработки;
		
	КонецЕсли; 
	
	Если УстановитьКодОперации <> Неопределено Тогда
		КодОперации = УстановитьКодОперации;	
	Иначе	
		Если РаспределениеЗатратПоБазе Тогда
	  		Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы Тогда
	  			КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты;
	  		Иначе
	  			КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты;
	  		КонецЕсли;
	  	Иначе
	  		КодОперации = СтрокаВыборкиБаза.КодОперации;
		КонецЕсли;	
	КонецЕсли;
	
	Если УстановитьСчетУчета <> Неопределено Тогда
		НоваяСтрока.СчетУчета = УстановитьСчетУчета;
	КонецЕсли;
	
	НоваяСтрока.КодОперации = КодОперации;
	НоваяСтрока.КосвенныеЗатраты = КосвенныеЗатраты;
	НоваяСтрока.ЗатратыВстречногоВыпуска = ЗатратыВстречногоВыпуска;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Сумма = Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СуммаНУ 	= НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначениеПоФакту, СуммаНУ);
		НоваяСтрока.НДСВходящий = НДСВходящий;
		НоваяСтрока.НДСКредит 	= НДСКредит;
	КонецЕсли;
	
	
	Если УстановитьПодразделение <> Неопределено Тогда
		НоваяСтрока.Подразделение = УстановитьПодразделение;
	КонецЕсли;	
	
	Если УстановитьНоменклатурнаяГруппа <> Неопределено Тогда
		НоваяСтрока.НоменклатурнаяГруппа = УстановитьНоменклатурнаяГруппа;
	КонецЕсли;	
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыНаВыпуск.Количество() = 1000 Тогда
		НаборЗаписейЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииПрямыеЗатраты()

// Процедура формирует движение по распределению затрат по регистру "Затраты на выпуск продукции (наработка)".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиБаза - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//  Количество - Число - Количество затрат
//  Сумма - Число - Сумма затрат
//	НаборЗаписейЗатратыНаВыпускНаработка - ТаблицаЗначений - Таблица движений регистра накопления "Затраты на выпуск (наработка)".
//
Процедура СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработка(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтрокаВыборкиБаза,
	Количество,
	Сумма,
	СуммаНУ,
	НДСВходящий,
	НДСКредит,
	НаборЗаписейЗатратыНаВыпускНаработка
	)
	
	Если Количество = 0
	   И Сумма = 0 
	   И СуммаНУ = 0
	   И НДСВходящий = 0
       И НДСКредит  = 0
	   
	   Тогда
	   
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты на выпуск (наработка)" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//
	// Измерения и реквизиты, заполняемые по данным базы распределения:
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- НоменклатурнаяГруппа,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции,
	//	- Заказ,
	//
	// Измерения и реквизиты, заполняемые по распределяемым затратам:
	//	- СтатьяЗатрат,
	//	- Затрата,
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты,
	//	- НоменклатурнаяГруппаНЗП,
	//	- ЗаказНЗП,
	//	- ПодразделениеНЗП,
	
	НоваяСтрока = НаборЗаписейЗатратыНаВыпускНаработка.Добавить();
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборкиБаза);
	
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатрат;
	НоваяСтрока.Затрата = СтрокаВыборки.Затрата;
	НоваяСтрока.ХарактеристикаЗатраты = СтрокаВыборки.ХарактеристикаЗатраты;
	НоваяСтрока.СерияЗатраты = СтрокаВыборки.СерияЗатраты;
	
	НоваяСтрока.НоменклатурнаяГруппаНЗП = СтрокаВыборки.НоменклатурнаяГруппа;
	НоваяСтрока.ЗаказНЗП = СтрокаВыборки.Заказ;
	НоваяСтрока.ПодразделениеНЗП = СтрокаВыборки.Подразделение;
	
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Сумма = Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СуммаНУ     = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначение, СуммаНУ);
		НоваяСтрока.НДСВходящий = НДСВходящий;
		НоваяСтрока.НДСКредит   = НДСКредит ;
	КонецЕсли; 
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыНаВыпускНаработка.Количество() = 1000 Тогда
		НаборЗаписейЗатратыНаВыпускНаработка.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ БУХГАЛТЕРИИ

// Процедура формирует проводку по распределению затрат.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиБаза - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - Статья затрат
//  ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - характер затрат, по которому отражается списание продукции на расходы
//  Сумма - Число - Сумма проводки
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьПроводкуПоРаспределениюЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтрокаВыборкиБаза,
	СтатьяЗатрат,
	ХарактерЗатрат,
	Сумма,
	СуммаНУ,
	РегистрБухгалтерииНаборЗаписей,
	ВидОтраженияВУчете
)
	
	Если Сумма = 0 И СуммаНУ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаВыборкиБаза.СчетУчета = СтрокаВыборки.СчетУчета
		И СтрокаВыборкиБаза.НалоговоеНазначениеПоФакту = СтрокаВыборки.НалоговоеНазначение 
	   И СтрокаВыборкиБаза.Подразделение = СтрокаВыборки.Подразделение
	   И СтрокаВыборкиБаза.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппа
	Тогда
		Возврат;
	КонецЕсли;
	
	
	НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
	НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
	НоваяПроводка.Активность = Истина;
	НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
		СодержаниеПроводки = "Распределение административных расходов";
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
		СодержаниеПроводки = "Распределение общепроизводственных расходов";
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
		СодержаниеПроводки = "Распределение расходов по браку в производстве";
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		СодержаниеПроводки = "Распределение производственных расходов";	
		
	Иначе
		СодержаниеПроводки = "";
		ОбщегоНазначения.СообщитьОбОшибке("Не определено содержание операции для характера затрат: """ + ХарактерЗатрат + """.
					|Процедура <СформироватьПроводкуПоРаспределениюЗатрат>");
		
	КонецЕсли;
	
	НоваяПроводка.Содержание = СодержаниеПроводки;
	НоваяПроводка.Сумма = Сумма;
	
	НоваяПроводка.СчетДт = СтрокаВыборкиБаза.СчетУчета;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборкиБаза.НоменклатурнаяГруппа);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтрокаВыборкиБаза.Подразделение);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтатьяЗатрат);
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		
	  	Если (СтрокаВыборкиБаза.СчетУчета <> СтрокаВыборки.СчетУчета) И НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(СтрокаВыборки.НалоговоеНазначение) = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС Тогда
	  		НоваяПроводка.НалоговоеНазначениеДт = СтрокаВыборки.НалоговоеНазначение;
	  	Иначе	
	  		НоваяПроводка.НалоговоеНазначениеДт = СтрокаВыборкиБаза.НалоговоеНазначениеПоФакту;
	  	КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(НоваяПроводка.НалоговоеНазначениеДт) 
			И (ЗначениеЗаполнено(СтрокаВыборкиБаза.Заказ) И СтрокаВыборкиБаза.Заказ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка) Тогда	
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Заказ", СтрокаВыборкиБаза.Заказ);
			СтруктураПараметров.Вставить("НоменклатурнаяГруппа", СтрокаВыборкиБаза.НоменклатурнаяГруппа);
			СтруктураПараметров.Вставить("ПодразделениеОрганизации", СтрокаВыборкиБаза.Подразделение);
			
			НалоговоеНазначениеПереработки = УправлениеЗатратами.ОпределитьНалоговоеНазначение(СтруктураПараметров);
			
			НоваяПроводка.НалоговоеНазначениеДт = НалоговоеНазначениеПереработки;
			
		КонецЕсли; 
		
		НоваяПроводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеДт, СуммаНУ); 
		
	КонецЕсли;
										
	НоваяПроводка.СчетКт = СтрокаВыборки.СчетУчета;
										
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "Подразделения") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборки.Подразделение);
	КонецЕсли;
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "НоменклатурныеГруппы") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
	КонецЕсли;
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "СтатьиЗатрат") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтатьяЗатрат);
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		НоваяПроводка.НалоговоеНазначениеКт = СтрокаВыборки.НалоговоеНазначение;
		НоваяПроводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеКт, СуммаНУ); 
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьПроводкуПоРаспределениюЗатрат()

// Функция проверяет заполнение счетов учета затрат.
//
// Параметры:
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиБаза - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	Сумма - Число - сумма затрат на выпуск продукции. Используется для формирования сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево – 	Истина - проверка прошла успешно,
//				Ложь - обнаружены ошибки заполнения счетов. 
//
Функция ПроверитьСчетаУчетаРаспределениеЗатрат(
	СтрокаВыборки, 
	СтрокаВыборкиБаза, 
	Сумма
	)
	
	
	ПроверкаПройдена = Истина;
	
	Если Не ЗначениеЗаполнено(СтрокаВыборки.СчетУчета) Тогда
		   
		ОбщегоНазначения.Сообщение("Не указан счет учета затрат:
			|Организация: " + СтрокаВыборки.Организация + "
			|Подразделение: " + СтрокаВыборки.Подразделение + "
			|Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + "
			|Заказ: " + СтрокаВыборки.Заказ + "
			|Проводка по списанию затрат на сумму: " + Сумма + " не сформирована!
			|", СтатусСообщения.Важное);
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(СтрокаВыборкиБаза.СчетУчета) Тогда
		   
		ОбщегоНазначения.Сообщение("Не указан счет учета в базе распределения затрат:
			|Способ распределения: " + СтрокаВыборкиБаза.СпособРаспределения + "
			|Организация: " + СтрокаВыборкиБаза.Организация + "
			|Подразделение: " + СтрокаВыборкиБаза.Подразделение + "
			|Номенклатурная группа: " + СтрокаВыборкиБаза.НоменклатурнаяГруппа + "
			|Заказ: " + СтрокаВыборкиБаза.Заказ + "
			|Проводка по списанию затрат на сумму: " + Сумма + " не сформирована!
			|", СтатусСообщения.Важное);
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
	
	Возврат ПроверкаПройдена;

КонецФункции // ПроверитьСчетаУчетаРаспределениеЗатрат()

// Процедура формирует движения по регистру бухгалтерии.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиБаза - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - Статья затрат
//  ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - характер затрат, по которому отражается списание продукции на расходы
//  Сумма - Число - Сумма затрат
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	СтрокаВыборки,
	СтрокаВыборкиБаза,
	СтатьяЗатрат,
	ХарактерЗатрат,
	Сумма,
	СуммаНУ,
	РегистрБухгалтерииНаборЗаписей
	) Экспорт
	
	
	Если Сумма = 0
		И СуммаНУ = 0
		Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПроверкаПройдена = ПроверитьСчетаУчетаРаспределениеЗатрат(
		СтрокаВыборки, 
		СтрокаВыборкиБаза, 
		Сумма
	);
	
	
	Если ПроверкаПройдена Тогда
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		 
			СформироватьПроводкуПоРаспределениюЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СтрокаВыборкиБаза,
				СтатьяЗатрат,
				ХарактерЗатрат,
				Сумма,
				СуммаНУ,
				РегистрБухгалтерииНаборЗаписей,
				ВидОтраженияВУчете
			);
			
		ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете Тогда
			
			СформироватьПроводкуПоРаспределениюЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СтрокаВыборкиБаза,
				СтатьяЗатрат,
				ХарактерЗатрат,
				Сумма,
				0,  // СуммаНУ
				РегистрБухгалтерииНаборЗаписей,
				ВидОтраженияВУчете
			);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат()


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО ПРЯМЫМ ПРОИЗВОДСТВЕННЫМ ЗАТРАТАМ

// Функция формирует текст запроса по производственным затратам.
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоПрямымПроизводственнымЗатратам()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА
	|		Неопределено
	|	ИНАЧЕ
	|		ЗатратыНаВыпуск.Затрата
	|	КОНЕЦ КАК Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	
	|	НезавершенноеПроизводство.Подразделение КАК ПодразделениеНЗП,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|	НезавершенноеПроизводство.Заказ КАК ЗаказНЗП,
	|	
	|	//ДляРеглУчета ВЫБОР КОГДА ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = 
	|	//ДляРеглУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|	//ДляРеглУчета ТОГДА
	|	//ДляРеглУчета 		Неопределено
	|	//ДляРеглУчета ИНАЧЕ
	|	//ДляРеглУчета 		ЗатратыНаВыпуск.СчетУчета
	|	//ДляРеглУчета КОНЕЦ КАК СчетУчета,
	|	//ДляБухУчета ВЫБОР КОГДА ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = 
	|	//ДляБухУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|	//ДляБухУчета ТОГДА
	|	//ДляБухУчета 		Неопределено
	|	//ДляБухУчета ИНАЧЕ
	|	//ДляБухУчета 		ЗатратыНаВыпуск.НалоговоеНазначение
	|	//ДляБухУчета КОНЕЦ КАК НалоговоеНазначение,
	|	
	|	СУММА(ЗатратыНаВыпуск.КоличествоОстаток) КАК Количество,
	|	//ДляБухУчета СУММА(ЗатратыНаВыпуск.СуммаНУОстаток) КАК СуммаНУ,
	|	//ДляБухУчета СУММА(ЗатратыНаВыпуск.НДСВходящийОстаток) КАК НДСВходящий,
	|	//ДляБухУчета СУММА(ЗатратыНаВыпуск.НДСКредитОстаток) КАК НДСКредит,
	|	СУММА(ЗатратыНаВыпуск.СуммаОстаток) КАК Сумма
	|
	|ПОМЕСТИТЬ ЗатратыНаВыпускНаработка
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукцииНаработка%СуффиксУчета%.Остатки(&КонГраница, 
	|		СтатьяЗатрат В (&МассивСтатьиЗатрат)
	|		//ДляРеглУчета И Организация = &Организация
	|	) КАК ЗатратыНаВыпуск
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&КонГраница,
	|			СтатьяЗатрат В (&МассивСтатьиЗатрат)
	|			//ДляРеглУчета И Организация = &Организация
	|		) КАК НезавершенноеПроизводство
	|	ПО  
	|		ЗатратыНаВыпуск.СтатьяЗатрат = НезавершенноеПроизводство.СтатьяЗатрат
	|		И (ЗатратыНаВыпуск.Затрата = НезавершенноеПроизводство.Затрата
	|			ИЛИ 
	|			ЗатратыНаВыпуск.Затрата = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И НезавершенноеПроизводство.Затрата = Неопределено
	|			)
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = НезавершенноеПроизводство.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты = НезавершенноеПроизводство.СерияЗатраты
	|		
	|		И (ЗатратыНаВыпуск.ПодразделениеНЗП = НезавершенноеПроизводство.Подразделение
	|			ИЛИ 
	|			ЗатратыНаВыпуск.Подразделение = НезавершенноеПроизводство.Подразделение
	|			//ДляУпрУчета И ЗатратыНаВыпуск.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			//ДляРеглУчета И ЗатратыНаВыпуск.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			)
	|		
	|		И (ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = НезавершенноеПроизводство.НоменклатурнаяГруппа
	|			ИЛИ 
	|			ЗатратыНаВыпуск.НоменклатурнаяГруппа = НезавершенноеПроизводство.НоменклатурнаяГруппа
	|			И ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|			)
	|		
	|		И (ЗатратыНаВыпуск.ЗаказНЗП = НезавершенноеПроизводство.Заказ
	|			ИЛИ
	|			ЗатратыНаВыпуск.Заказ = НезавершенноеПроизводство.Заказ
	|			И ЗатратыНаВыпуск.ЗаказНЗП = Неопределено
	|			)
	|		//ДляРеглУчета И ВЫБОР КОГДА ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = 
	|		//ДляРеглУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|		//ДляРеглУчета ТОГДА
	|		//ДляРеглУчета 		Истина
	|		//ДляРеглУчета ИНАЧЕ
	|		//ДляРеглУчета 		ЗатратыНаВыпуск.СчетУчета = НезавершенноеПроизводство.СчетУчета
	|		//ДляРеглУчета КОНЕЦ
	|		//ДляБухУчета И ВЫБОР КОГДА ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = 
	|		//ДляБухУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|		//ДляБухУчета ТОГДА
	|		//ДляБухУчета 		Истина
	|		//ДляБухУчета ИНАЧЕ
	|		//ДляБухУчета 		ЗатратыНаВыпуск.НалоговоеНазначение = НезавершенноеПроизводство.НалоговоеНазначение
	|		//ДляБухУчета КОНЕЦ
	|		
	|СГРУППИРОВАТЬ ПО
	|	//ДляРеглУчета ЗатратыНаВыпуск.Организация,
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|
	|	//ДляРеглУчета ВЫБОР КОГДА ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = 
	|	//ДляРеглУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|	//ДляРеглУчета ТОГДА
	|	//ДляРеглУчета 		Неопределено
	|	//ДляРеглУчета ИНАЧЕ
	|	//ДляРеглУчета 		ЗатратыНаВыпуск.СчетУчета
	|	//ДляРеглУчета КОНЕЦ,
	|	//ДляБухУчета ВЫБОР КОГДА ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = 
	|	//ДляБухУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|	//ДляБухУчета ТОГДА
	|	//ДляБухУчета 		Неопределено
	|	//ДляБухУчета ИНАЧЕ
	|	//ДляБухУчета 		ЗатратыНаВыпуск.НалоговоеНазначение
	|	//ДляБухУчета КОНЕЦ,
	|	
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ
    |;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП =
	|		//ДляУпрУчета ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|		//ДляРеглУчета ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	ТОГДА
	|		ЗатратыНаВыпуск.Подразделение
	|	ИНАЧЕ
	|		ЗатратыНаВыпуск.ПодразделениеНЗП
	|	КОНЕЦ КАК Подразделение,
	|	//ДляРеглУчета ВЫБОР КОГДА ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = 
	|	//ДляРеглУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|	//ДляРеглУчета ТОГДА
	|	//ДляРеглУчета 		Неопределено
	|	//ДляРеглУчета ИНАЧЕ
	|	//ДляРеглУчета 		ЗатратыНаВыпуск.СчетУчета
	|	//ДляРеглУчета КОНЕЦ КАК СчетУчета,
	|	//ДляБухУчета ВЫБОР КОГДА ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = 
	|	//ДляБухУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|	//ДляБухУчета ТОГДА
	|	//ДляБухУчета 		Неопределено
	|	//ДляБухУчета ИНАЧЕ
	|	//ДляБухУчета 		ЗатратыНаВыпуск.НалоговоеНазначение
	|	//ДляБухУчета КОНЕЦ КАК НалоговоеНазначение,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	СУММА(ЗатратыНаВыпуск.Сумма) КАК Сумма,
	|	//ДляБухУчета СУММА(ЗатратыНаВыпуск.СуммаНУ) КАК СуммаНУ,
	|	//ДляБухУчета СУММА(ЗатратыНаВыпуск.НДСВходящий) КАК НДСВходящий,
	|	//ДляБухУчета СУММА(ЗатратыНаВыпуск.НДСКредит) КАК НДСКредит,
	|	СУММА(ЗатратыНаВыпуск.Количество) КАК Количество
	|
	|ПОМЕСТИТЬ ЗатратыНаВыпуск
	|ИЗ 
	|	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|ГДЕ
	|	ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|	И ЗатратыНаВыпуск.КодОперации В (&КодыОпераций)
	|	И ЗатратыНаВыпуск.СтатьяЗатрат В (&МассивСтатьиЗатрат)
	|	//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
	|			
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.ПодразделениеНЗП =
	|		//ДляУпрУчета ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|		//ДляРеглУчета ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	ТОГДА
	|		ЗатратыНаВыпуск.Подразделение
	|	ИНАЧЕ
	|		ЗатратыНаВыпуск.ПодразделениеНЗП
	|	КОНЕЦ,
	|	//ДляРеглУчета ВЫБОР КОГДА ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = 
	|	//ДляРеглУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|	//ДляРеглУчета ТОГДА
	|	//ДляРеглУчета 		Неопределено
	|	//ДляРеглУчета ИНАЧЕ
	|	//ДляРеглУчета 		ЗатратыНаВыпуск.СчетУчета
	|	//ДляРеглУчета КОНЕЦ,
	|	//ДляБухУчета ВЫБОР КОГДА ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = 
	|	//ДляБухУчета 		ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|	//ДляБухУчета ТОГДА
	|	//ДляБухУчета 		Неопределено
	|	//ДляБухУчета ИНАЧЕ
	|	//ДляБухУчета 		ЗатратыНаВыпуск.НалоговоеНазначение
	|	//ДляБухУчета КОНЕЦ,
	|	ЗатратыНаВыпуск.ЗаказНЗП,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты
    |;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	//ДляРеглУчета НезавершенноеПроизводство.Организация,
	|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|	//ДляБухУчета НезавершенноеПроизводство.НалоговоеНазначение,
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	НезавершенноеПроизводство.Затрата,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты,
	|	
	|	(НезавершенноеПроизводство.СтоимостьОстаток
	|		- ЕСТЬNULL(ЗатратыНаВыпуск.Сумма, 0)
	|		- ЕСТЬNULL(ЗатратыНаВыпускНаработка.Сумма, 0)
	|	) КАК СуммаОстаток,
	|	
	|	
	|	//ДляБухУчета (НезавершенноеПроизводство.СтоимостьНУОстаток
	|	//ДляБухУчета 	- ЕСТЬNULL(ЗатратыНаВыпуск.СуммаНУ, 0)
	|	//ДляБухУчета 	- ЕСТЬNULL(ЗатратыНаВыпускНаработка.СуммаНУ, 0)
	|	//ДляБухУчета ) КАК СуммаНУОстаток,
	|	
	|	//ДляБухУчета (НезавершенноеПроизводство.НДСВходящийОстаток
	|	//ДляБухУчета 	- ЕСТЬNULL(ЗатратыНаВыпуск.НДСВходящий, 0)
	|	//ДляБухУчета 	- ЕСТЬNULL(ЗатратыНаВыпускНаработка.НДСВходящий, 0)
	|	//ДляБухУчета ) КАК НДСВходящийОстаток,
	|	
	|	//ДляБухУчета (НезавершенноеПроизводство.НДСКредитОстаток
	|	//ДляБухУчета 	- ЕСТЬNULL(ЗатратыНаВыпуск.НДСКредит, 0)
	|	//ДляБухУчета 	- ЕСТЬNULL(ЗатратыНаВыпускНаработка.НДСКредит, 0)
	|	//ДляБухУчета ) КАК НДСКредитОстаток,
	|	
	|
	|	(НезавершенноеПроизводство.КоличествоОстаток
	|		- ЕСТЬNULL(ЗатратыНаВыпуск.Количество, 0)
	|		- ЕСТЬNULL(ЗатратыНаВыпускНаработка.Количество, 0)
	|	) КАК КоличествоОстаток,
	|	
	|	ЕСТЬNULL(ИнвентаризацияНЗП.Сумма, 0) КАК СуммаИнвентаризация,
	|	//ДляБухУчета ЕСТЬNULL(ИнвентаризацияНЗП.СуммаНУ, 0)     КАК СуммаНУИнвентаризация,
	|	//ДляБухУчета ЕСТЬNULL(ИнвентаризацияНЗП.НДСВходящий, 0) КАК НДСВходящийИнвентаризация,
	|	//ДляБухУчета ЕСТЬNULL(ИнвентаризацияНЗП.НДСКредит, 0)   КАК НДСКредитИнвентаризация,
	|	ЕСТЬNULL(ИнвентаризацияНЗП.Количество, 0) КАК КоличествоИнвентаризация
	|
	|ИЗ
	|	РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&КонГраница,
	|		Не Затрата ССЫЛКА Перечисление.ХарактерЗатрат
	|		И СтатьяЗатрат В (&МассивСтатьиЗатрат)
	|		//ДляРеглУчета И Организация = &Организация
	|		) КАК НезавершенноеПроизводство
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ЗатратыНаВыпуск КАК ЗатратыНаВыпуск
	|	ПО 
	|		НезавершенноеПроизводство.Подразделение = ЗатратыНаВыпуск.Подразделение
	|		И НезавершенноеПроизводство.НоменклатурнаяГруппа = ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП
	|		И НезавершенноеПроизводство.Заказ = ЗатратыНаВыпуск.ЗаказНЗП
	|		И НезавершенноеПроизводство.СтатьяЗатрат = ЗатратыНаВыпуск.СтатьяЗатрат
	|		И НезавершенноеПроизводство.Затрата	= ЗатратыНаВыпуск.Затрата
	|		И НезавершенноеПроизводство.ХарактеристикаЗатраты = ЗатратыНаВыпуск.ХарактеристикаЗатраты
	|		И НезавершенноеПроизводство.СерияЗатраты = ЗатратыНаВыпуск.СерияЗатраты
	|		//ДляРеглУчета И (НезавершенноеПроизводство.СчетУчета = ЗатратыНаВыпуск.СчетУчета
	|		//ДляРеглУчета 		ИЛИ ЗатратыНаВыпуск.СчетУчета = Неопределено)
	|		//ДляБухУчета И (НезавершенноеПроизводство.НалоговоеНазначение = ЗатратыНаВыпуск.НалоговоеНазначение
	|		//ДляБухУчета 		ИЛИ ЗатратыНаВыпуск.НалоговоеНазначение = Неопределено)
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ЗатратыНаВыпускНаработка КАК ЗатратыНаВыпускНаработка
	|	ПО 
	|		НезавершенноеПроизводство.Подразделение = ЗатратыНаВыпускНаработка.ПодразделениеНЗП
	|		И НезавершенноеПроизводство.НоменклатурнаяГруппа = ЗатратыНаВыпускНаработка.НоменклатурнаяГруппаНЗП
	|		И НезавершенноеПроизводство.Заказ = ЗатратыНаВыпускНаработка.ЗаказНЗП
	|		И НезавершенноеПроизводство.СтатьяЗатрат = ЗатратыНаВыпускНаработка.СтатьяЗатрат
	|		И НезавершенноеПроизводство.Затрата	= ЗатратыНаВыпускНаработка.Затрата
	|		И НезавершенноеПроизводство.ХарактеристикаЗатраты = ЗатратыНаВыпускНаработка.ХарактеристикаЗатраты
	|		И НезавершенноеПроизводство.СерияЗатраты = ЗатратыНаВыпускНаработка.СерияЗатраты	
	|		//ДляРеглУчета И (НезавершенноеПроизводство.СчетУчета = ЗатратыНаВыпускНаработка.СчетУчета
	|		//ДляРеглУчета 		ИЛИ ЗатратыНаВыпускНаработка.СчетУчета = Неопределено)
	|		//ДляБухУчета И (НезавершенноеПроизводство.НалоговоеНазначение = ЗатратыНаВыпускНаработка.НалоговоеНазначение
	|		//ДляБухУчета 		ИЛИ ЗатратыНаВыпускНаработка.НалоговоеНазначение = Неопределено)
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			//ДляУпрУчета ИнвентаризацияМатериалы.Ссылка.Подразделение,
	|			//ДляРеглУчета ИнвентаризацияМатериалы.Ссылка.ПодразделениеОрганизации КАК Подразделение,
	|
	|			//ДляБухУчета ИнвентаризацияМатериалы.СчетЗатрат,
	|			//ДляБухУчета ИнвентаризацияМатериалы.НалоговоеНазначение,
	|
	|			ИнвентаризацияМатериалы.Номенклатура КАК Затрата,
	|			ИнвентаризацияМатериалы.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|			ИнвентаризацияМатериалы.СерияНоменклатуры КАК СерияЗатраты,
	|			ИнвентаризацияМатериалы.НоменклатурнаяГруппа,
	|			ИнвентаризацияМатериалы.СтатьяЗатрат,
	|			ВЫБОР КОГДА ИнвентаризацияМатериалы.Заказ <> &ПустойЗаказПокупателя И
	|						ИнвентаризацияМатериалы.Заказ <> &ПустойЗаказНаПроизводство ТОГДА
	|				ИнвентаризацияМатериалы.Заказ
	|			ИНАЧЕ
	|				Неопределено
	|			КОНЕЦ КАК Заказ,
	|
	|			СУММА(ИнвентаризацияМатериалы.Количество * 
	|				ИнвентаризацияМатериалы.Коэффициент /
	|				ИнвентаризацияМатериалы.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|			) КАК Количество,
	|			//ДляБухУчета 0 КАК СуммаНУ,
	|			//ДляБухУчета 0 КАК НДСВходящий,
	|			//ДляБухУчета 0 КАК НДСКредит,
	|			0 КАК Сумма
	|			
	|		ИЗ
	|			Документ.ИнвентаризацияНЗП.Материалы КАК ИнвентаризацияМатериалы
	|			
	|		ГДЕ
	|			ИнвентаризацияМатериалы.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|			И Не ИнвентаризацияМатериалы.Ссылка.ПометкаУдаления
	|			И ИнвентаризацияМатериалы.СтатьяЗатрат В (&МассивСтатьиЗатрат)
	|			//ДляУпрУчета И ИнвентаризацияМатериалы.Ссылка.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И ИнвентаризацияМатериалы.Ссылка.ОтражатьВБухгалтерскомУчете
	|			//ДляРеглУчета И ИнвентаризацияМатериалы.Ссылка.Организация = &Организация
	|			
	|		СГРУППИРОВАТЬ ПО
	|			//ДляУпрУчета ИнвентаризацияМатериалы.Ссылка.Подразделение,
	|			//ДляРеглУчета ИнвентаризацияМатериалы.Ссылка.ПодразделениеОрганизации,
	|
	|			//ДляБухУчета ИнвентаризацияМатериалы.СчетЗатрат,
	|			//ДляБухУчета ИнвентаризацияМатериалы.НалоговоеНазначение,
	|			ИнвентаризацияМатериалы.Номенклатура,
	|			ИнвентаризацияМатериалы.ХарактеристикаНоменклатуры,
	|			ИнвентаризацияМатериалы.СерияНоменклатуры,
	|			ИнвентаризацияМатериалы.НоменклатурнаяГруппа,
	|			ИнвентаризацияМатериалы.СтатьяЗатрат,
	|			ВЫБОР КОГДА ИнвентаризацияМатериалы.Заказ <> &ПустойЗаказПокупателя И
	|						ИнвентаризацияМатериалы.Заказ <> &ПустойЗаказНаПроизводство ТОГДА
	|				ИнвентаризацияМатериалы.Заказ
	|			ИНАЧЕ
	|				Неопределено
	|			КОНЕЦ
	|			
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			//ДляУпрУчета ИнвентаризацияПрочие.Ссылка.Подразделение,
	|			//ДляРеглУчета ИнвентаризацияПрочие.Ссылка.ПодразделениеОрганизации,
	|
	|			//ДляБухУчета ИнвентаризацияПрочие.СчетЗатрат,
	|			//ДляБухУчета ИнвентаризацияПрочие.НалоговоеНазначениеДоходовИЗатрат,
	|
	|			ВЫБОР КОГДА ИнвентаризацияПрочие.СпособРаспределенияЗатратНаВыпуск = &ПустойСпособРаспределения Тогда
	|				Неопределено
	|			ИНАЧЕ
	|				ИнвентаризацияПрочие.СпособРаспределенияЗатратНаВыпуск	
	|			КОНЕЦ КАК Затрата,
	|			&ПустаяХарактеристика,
	|			&ПустаяСерия,
	|			ИнвентаризацияПрочие.НоменклатурнаяГруппа,
	|			ИнвентаризацияПрочие.СтатьяЗатрат,
	|			ВЫБОР КОГДА ИнвентаризацияПрочие.Заказ <> &ПустойЗаказПокупателя И
	|						ИнвентаризацияПрочие.Заказ <> &ПустойЗаказНаПроизводство ТОГДА
	|				ИнвентаризацияПрочие.Заказ
	|			ИНАЧЕ
	|				Неопределено
	|			КОНЕЦ,
	|
	|			0 КАК Количество,
	|			//ДляБухУчета СУММА(ИнвентаризацияПрочие.СуммаНал) КАК СуммаНУ,
	|			//ДляБухУчета СУММА(ИнвентаризацияПрочие.СуммаНДС) КАК НДСВходящий,
	|			//ДляБухУчета СУММА(ИнвентаризацияПрочие.СуммаНДСКредит) КАК НДСКредит,
	|			//ДляУпрУчета СУММА(ИнвентаризацияПрочие.Сумма) КАК Сумма
	|			//ДляБухУчета СУММА(ИнвентаризацияПрочие.СуммаРегл) КАК Сумма
	|		ИЗ
	|			Документ.ИнвентаризацияНЗП.ПрочиеЗатраты КАК ИнвентаризацияПрочие
	|			
	|		ГДЕ
	|			ИнвентаризацияПрочие.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|			И Не ИнвентаризацияПрочие.Ссылка.ПометкаУдаления
	|			И ИнвентаризацияПрочие.СтатьяЗатрат В (&МассивСтатьиЗатрат)
	|			//ДляУпрУчета И ИнвентаризацияПрочие.Ссылка.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И ИнвентаризацияПрочие.Ссылка.ОтражатьВБухгалтерскомУчете
	|			//ДляРеглУчета И ИнвентаризацияПрочие.Ссылка.Организация = &Организация
	|			
	|		СГРУППИРОВАТЬ ПО
	|			//ДляУпрУчета ИнвентаризацияПрочие.Ссылка.Подразделение,
	|			//ДляРеглУчета ИнвентаризацияПрочие.Ссылка.ПодразделениеОрганизации,
	|
	|			//ДляБухУчета ИнвентаризацияПрочие.СчетЗатрат,
	|			//ДляБухУчета ИнвентаризацияПрочие.НалоговоеНазначениеДоходовИЗатрат,
	|
	|			ВЫБОР КОГДА ИнвентаризацияПрочие.СпособРаспределенияЗатратНаВыпуск = &ПустойСпособРаспределения Тогда
	|				Неопределено
	|			ИНАЧЕ
	|				ИнвентаризацияПрочие.СпособРаспределенияЗатратНаВыпуск	
	|			КОНЕЦ,
	|			ИнвентаризацияПрочие.НоменклатурнаяГруппа,
	|			ИнвентаризацияПрочие.СтатьяЗатрат,
	|			ВЫБОР КОГДА ИнвентаризацияПрочие.Заказ <> &ПустойЗаказПокупателя И
	|						ИнвентаризацияПрочие.Заказ <> &ПустойЗаказНаПроизводство ТОГДА
	|				ИнвентаризацияПрочие.Заказ
	|			ИНАЧЕ
	|				Неопределено
	|			КОНЕЦ
	|			
	|		) КАК ИнвентаризацияНЗП
	|	ПО 
	|		НезавершенноеПроизводство.Подразделение = ИнвентаризацияНЗП.Подразделение
	|		И НезавершенноеПроизводство.НоменклатурнаяГруппа = ИнвентаризацияНЗП.НоменклатурнаяГруппа
	|		И НезавершенноеПроизводство.Заказ = ИнвентаризацияНЗП.Заказ
	|		И НезавершенноеПроизводство.СтатьяЗатрат = ИнвентаризацияНЗП.СтатьяЗатрат
	|		И НезавершенноеПроизводство.Затрата	= ИнвентаризацияНЗП.Затрата
	|		И НезавершенноеПроизводство.ХарактеристикаЗатраты = ИнвентаризацияНЗП.ХарактеристикаЗатраты
	|		И НезавершенноеПроизводство.СерияЗатраты = ИнвентаризацияНЗП.СерияЗатраты
	|		//ДляРеглУчета И НезавершенноеПроизводство.СчетУчета = ИнвентаризацияНЗП.СчетЗатрат
	|		//ДляРеглУчета И НезавершенноеПроизводство.НалоговоеНазначение = ИнвентаризацияНЗП.НалоговоеНазначение
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета НезавершенноеПроизводство.Организация,
	|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|	//ДляБухУчета  НезавершенноеПроизводство.НалоговоеНазначение,
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Затрата,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты,
	|	НезавершенноеПроизводство.Заказ
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗатратыНаВыпускНаработка
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗатратыНаВыпуск
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПрямымПроизводственнымЗатратам()

// Процедура устанавливает параметры запроса по производственным затратам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	МассивСтатьиЗатрат - Массив - Массив статей затрат
//	Запрос - Запрос
//
Процедура УстановитьПараметрыЗапросаПоПрямымПроизводственнымЗатратам(
	СтруктураШапкиДокумента,
	МассивСтатьиЗатрат,
	Запрос
	)
	
	Запрос.УстановитьПараметр("НачДата",    СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата",    СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	
	Запрос.УстановитьПараметр("МассивСтатьиЗатрат", МассивСтатьиЗатрат);
	
	МассивКодыОпераций = Новый Массив;
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП);
	МассивКодыОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч);
	Запрос.УстановитьПараметр("КодыОпераций", МассивКодыОпераций);
	
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказНаПроизводство", Документы.ЗаказНаПроизводство.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСпособРаспределения", Справочники.СпособыРаспределенияЗатратНаВыпуск.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	

КонецПроцедуры // УстановитьПараметрыЗапросаПоПрямымПроизводственнымЗатратам()

// Функция формирует запрос по производственным затратам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//
// Возвращаемое значение:
//   Запрос – Запрос по производственным затратам.
//
Функция СформироватьЗапросПоПрямымПроизводственнымЗатратам(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоСпособамРаспределенияЗатрат
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоПрямымПроизводственнымЗатратам();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаЗначений = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выгрузить();
	ТаблицаЗначений.Свернуть("СтатьяЗатрат", "");
	МассивСтатьиЗатрат = ТаблицаЗначений.ВыгрузитьКолонку("СтатьяЗатрат");
	
	УстановитьПараметрыЗапросаПоПрямымПроизводственнымЗатратам(
		СтруктураШапкиДокумента,
		МассивСтатьиЗатрат,
		Запрос
		);
		
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоПрямымПроизводственнымЗатратам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ ПРЯМЫХ ПРОИЗВОДСТВЕННЫХ ЗАТРАТ 

// Процедура производит распределение прямых затрат по рассчитанной базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат выполнения запроса по затратам
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат выполнения запроса по базе распределения
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//	НаборЗаписейЗатратыНаВыпускПродукцииНаработка - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск (наработка)"
//
Процедура РаспределитьПрямыеПроизводственныеЗатратыПоБазеРаспределения(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	НаборЗаписейЗатратыНаВыпуск,
	НаборЗаписейЗатратыНаВыпускНаработка
	)
	
	// Получим построитель запроса по базе распределения.
	ПостроительЗапроса = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределения
		);
		
	ВыборкаПоСпособамРаспределенияЗатрат = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выбрать();

	МассивКоэф = Новый Массив;
	
	ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
	
	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		// Определим способ и характер распределения затрат.
		СпособРаспределения = Неопределено;
		ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка();
		РаспределятьНаПодчиненныеПодразделения = Ложь;
		
		РаспределятьЗатраты = ПолучитьСпособИХарактерРаспределенияЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоСпособамРаспределенияЗатрат,
			Ложь, // ОпределятьПоХарактеруЗатрат
			Ложь, // ПроверятьУказаниеСпособаРаспределения
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения
			);
			
		Если Не РаспределятьЗатраты Тогда
			Продолжить;		
		КонецЕсли; 
		
		// Отберем строки базы распределения.
		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			0, // НомерПередела
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения,
			Истина, // ОпределятьПоСчетуУчету
			Ложь, // ОтборПоПродукции
			ПостроительЗапроса
			);

		Если УстановленНовыйОтбор Тогда	
			ПостроительЗапроса.Выполнить();
		КонецЕсли;	
		РезультатЗапросаБаза = ПостроительЗапроса.Результат;
										
		ВсегоБазаРаспределения = 0;
		ВсегоБазаРаспределенияНЗП = 0;
		
		МассивКоэф.Очистить();
		
		ВыборкаБаза = РезультатЗапросаБаза.Выбрать();
		Пока ВыборкаБаза.Следующий() Цикл
			
			МассивКоэф.Добавить(ВыборкаБаза.База);
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаБаза.База;
			ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.БазаОстатокНЗП;
			
		КонецЦикла;
		
		Если ВсегоБазаРаспределения = 0 Тогда
			ОбщегоНазначения.Сообщение("Сумма базы коэф. по " + СпособРаспределения + " равна 0, для:
				|Подразделение: " + ВыборкаПоЗатратам.Подразделение + "
				|Статья затрат: " + ВыборкаПоЗатратам.СтатьяЗатрат + "
				|Заказ: " + ВыборкаПоЗатратам.Заказ + "
				|Номенклатурная группа: " + ВыборкаПоЗатратам.НоменклатурнаяГруппа, СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		КоличествоОстаток = ВыборкаПоЗатратам.КоличествоОстаток;
		СуммаОстаток = ВыборкаПоЗатратам.СуммаОстаток;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СуммаНУОстаток 		= ВыборкаПоЗатратам.СуммаНУОстаток;
			НДСВходящийОстаток 	= ВыборкаПоЗатратам.НДСВходящийОстаток;
			НДСКредитОстаток 	= ВыборкаПоЗатратам.НДСКредитОстаток;
		Иначе
			СуммаНУОстаток 		= 0;
			НДСВходящийОстаток 	= 0;
			НДСКредитОстаток 	= 0;
		КонецЕсли; 
		
		// Пропускаем строки с пустой суммой.
		Если КоличествоОстаток = 0
		   И СуммаОстаток = 0
		   И СуммаНУОстаток = 0
		   И НДСВходящийОстаток = 0
		   И НДСКредитОстаток = 0
		   Тогда
		   
			Продолжить;
			
		КонецЕсли; 
		
		Если (ВсегоБазаРаспределения + ВсегоБазаРаспределенияНЗП) <> 0 Тогда
			КоэффициентРаспределения = ВсегоБазаРаспределения / (ВсегоБазаРаспределения + ВсегоБазаРаспределенияНЗП);
		Иначе
			КоэффициентРаспределения = 1;
		КонецЕсли;
		КоэффициентРаспределения = ?(КоэффициентРаспределения < 0, - КоэффициентРаспределения, КоэффициентРаспределения);
		
		Если ВыборкаПоЗатратам.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
			Если ВыборкаПоЗатратам.КоличествоИнвентаризация <> 0 И КоличествоОстаток <> 0 Тогда
				СуммаИнвентаризация = Окр(ВыборкаПоЗатратам.КоличествоИнвентаризация * СуммаОстаток / КоличествоОстаток, 2, 1);
				КоличествоОстаток = КоличествоОстаток - ВыборкаПоЗатратам.КоличествоИнвентаризация;
				СуммаОстаток = СуммаОстаток - СуммаИнвентаризация;
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					
					СуммаНУИнвентаризация = Окр(ВыборкаПоЗатратам.КоличествоИнвентаризация * СуммаНУОстаток / КоличествоОстаток, 2, 1);	
					НДСВходящийИнвентаризация = Окр(ВыборкаПоЗатратам.КоличествоИнвентаризация * НДСВходящийОстаток / КоличествоОстаток, 2, 1);	
					НДСКредитИнвентаризация = Окр(ВыборкаПоЗатратам.КоличествоИнвентаризация * НДСКредитОстаток / КоличествоОстаток, 2, 1);	
					
					СуммаНУОстаток = СуммаНУОстаток - СуммаНУИнвентаризация;
					НДСВходящийОстаток = НДСВходящийОстаток - НДСВходящийИнвентаризация;
					НДСКредитОстаток = НДСКредитОстаток - НДСКредитИнвентаризация;
					
				КонецЕсли; 
			КонецЕсли;
		Иначе
			СуммаОстаток = СуммаОстаток - ВыборкаПоЗатратам.СуммаИнвентаризация;
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				СуммаНУОстаток = СуммаНУОстаток - ВыборкаПоЗатратам.СуммаНУИнвентаризация;	
				НДСВходящийОстаток = НДСВходящийОстаток - ВыборкаПоЗатратам.НДСВходящийИнвентаризация;
				НДСКредитОстаток = НДСКредитОстаток - ВыборкаПоЗатратам.НДСКредитИнвентаризация;
			КонецЕсли; 
		КонецЕсли;
											
		КоличествоОстаток = Окр(КоличествоОстаток * КоэффициентРаспределения, 3, 1);
		СуммаОстаток = Окр(СуммаОстаток * КоэффициентРаспределения, 2, 1);
		СуммаНУОстаток = Окр(СуммаНУОстаток * КоэффициентРаспределения, 2, 1);
		НДСВходящийОстаток = Окр(НДСВходящийОстаток * КоэффициентРаспределения, 2, 1);
		НДСКредитОстаток = Окр(НДСКредитОстаток * КоэффициентРаспределения, 2, 1);
		
		// Материальные затраты распределяются по количеству, поэтому нулевые остатки пропускаем.
		Если ВыборкаПоЗатратам.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные
		   И КоличествоОстаток = 0
		Тогда
			Продолжить;
		КонецЕсли;
		
		МассивКоличество = ОбщегоНазначения.РаспределитьПропорционально(КоличествоОстаток, МассивКоэф, 3);
		МассивСумма      = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэф, 2);
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСуммаНУ      = ОбщегоНазначения.РаспределитьПропорционально(СуммаНУОстаток, МассивКоэф, 2);
			МассивНДСВходящий  = ОбщегоНазначения.РаспределитьПропорционально(НДСВходящийОстаток, МассивКоэф, 2);
			МассивНДСКредит    = ОбщегоНазначения.РаспределитьПропорционально(НДСКредитОстаток, МассивКоэф, 2);
		Иначе
			МассивСуммаНУ      = Неопределено;
			МассивНДСВходящий  = Неопределено;
			МассивНДСКредит    = Неопределено;
		КонецЕсли; 
		 
		Индекс = 0;
		ВыборкаБаза.Сбросить();
		Пока ВыборкаБаза.Следующий() Цикл
			
			Количество = ?(МассивКоличество = Неопределено, 0, МассивКоличество[Индекс]);
			Сумма      = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			СуммаНУ    = ?(МассивСуммаНУ = Неопределено, 0, МассивСуммаНУ[Индекс]);
			НДСВходящий = ?(МассивНДСВходящий = Неопределено, 0, МассивНДСВходящий[Индекс]);
			НДСКредит   = ?(МассивНДСКредит = Неопределено, 0, МассивНДСКредит[Индекс]);
			
			
			Если ВыборкаБаза.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка 
			   И Не СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
			   
				// Формирование движений по регистру "Затраты на выпуск (наработка)".
				СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработка(
					СтруктураШапкиДокумента,
					ВыборкаПоЗатратам,
					ВыборкаБаза,
					Количество,
					Сумма,
					СуммаНУ,
					НДСВходящий,
					НДСКредит,
					НаборЗаписейЗатратыНаВыпускНаработка
				);
			Иначе
				
				// Формирование движений по регистру "Затраты на выпуск".
				СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииПрямыеЗатраты(
					СтруктураШапкиДокумента,
					ВыборкаПоЗатратам,
					ВыборкаБаза,
					Истина, // РаспределениеЗатратПоБазе,
					Ложь, // КосвенныеЗатраты,
					Ложь, //ЗатратыВстречногоВыпуска,
					Количество,
					Сумма,
					СуммаНУ,
					НДСВходящий,
					НДСКредит,
					НаборЗаписейЗатратыНаВыпуск
				);
			КонецЕсли;

			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры // РаспределитьПрямыеПроизводственныеЗатратыПоБазеРаспределения()

// Процедура производит распределение прямых производственных расходов.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//
Процедура РаспределениеПрямыхПроизводственныхРасходов(
	СтруктураШапкиДокумента
	) Экспорт
	
	Если СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.Сообщение("Распределение производственных расходов");
	
	СтруктураИмен = Новый Структура("
		|ЗатратыНаВыпускПродукции,
		|ЗатратыНаВыпускПродукцииНаработка
		|");
		
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
	
	МассивХарактеровРаспределения = Новый Массив;
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.ПроизводственныеРасходы);
	
	// Сформируем запрос по способам распределения статей затрат.	
	ЗапросПоСпособамРаспределенияЗатрат = СформироватьЗапросПоСпособамРаспределенияЗатрат(
		СтруктураШапкиДокумента, 
		МассивХарактеровРаспределения,
		Ложь, // ФормироватьВременнуюТаблицу
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	РезультатЗапросаПоСпособамРаспределенияЗатрат = ЗапросПоСпособамРаспределенияЗатрат.Выполнить();
	
	// Сформируем запрос по базе распределения затрат.
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаБазаРаспределенияЗатратНаПродукцию();
	ЗапросБазаРаспределения = СформироватьЗапросПоБазеРаспределенияЗатрат(СтруктураШапкиДокумента, ТекстЗапросаСКомментариями, Ложь);
	РезультатЗапросаБазаРаспределения = ЗапросБазаРаспределения.Выполнить();
	
	// Сформируем запрос по производственным расходам.
	ЗапросПоЗатратам = СформироватьЗапросПоПрямымПроизводственнымЗатратам(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоСпособамРаспределенияЗатрат
		);

	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	Если Не РезультатЗапросаПоЗатратам.Пустой()
	   И Не РезультатЗапросаПоСпособамРаспределенияЗатрат.Пустой()
	   И Не РезультатЗапросаБазаРаспределения.Пустой() Тогда
		
		РаспределитьПрямыеПроизводственныеЗатратыПоБазеРаспределения(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоЗатратам,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			СтруктураДвижений.ДвиженияЗатратыНаВыпуск,
			СтруктураДвижений.ДвиженияЗатратыНаВыпускНаработка
			);
		
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВМеждународномУчете
	   И СтруктураДвижений.ДвиженияЗатратыНаВыпускНаработка.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпускНаработка.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // РаспределениеПрямыхПроизводственныхРасходов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ РАСХОДОВ НА ВЫПУСК ПРОДУКЦИИ

// Процедура рассчитывает остаток затрат с учетом коэффициента распределения на остатки НЗП.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	ВсегоБазаРаспределения - Число - Общая сумма базы распределения
//	ВсегоБазаРаспределенияНЗП - Число - Общая сумма базы распределения на НЗП
//	СуммаОстаток - Число - Сумма остатка затрат для распределения
//	СуммаНаВыпуск - Число - Сумма затрат, распределяемых на выпуск продукции
//
Процедура РассчитатьОстатокСуммыЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВсегоБазаРаспределения,
	ВсегоБазаРаспределенияНЗП,
	СуммаОстаток,
	СуммаНУОстаток,
	НДСВходящийОстаток,
	НДСКредитОстаток,
	СуммаНаВыпуск,
	СуммаНУНаВыпуск,
	НДСВходящийНаВыпуск,
	НДСКредитНаВыпуск
	)
	
	Если (ВсегоБазаРаспределенияНЗП + ВсегоБазаРаспределения) <> 0 Тогда
		Коэффициент = ВсегоБазаРаспределения / (ВсегоБазаРаспределения + ВсегоБазаРаспределенияНЗП);
		Коэффициент = ?(Коэффициент < 0, - Коэффициент, Коэффициент);
	Иначе
		Коэффициент = 1;
	КонецЕсли;

	СуммаНаВыпуск = Окр(СуммаОстаток * Коэффициент, 2, 1);
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СуммаНУНаВыпуск 	= Окр(СуммаНУОстаток * Коэффициент, 2, 1);
		НДСВходящийНаВыпуск = Окр(НДСВходящийОстаток * Коэффициент, 2, 1);
		НДСКредитНаВыпуск 	= Окр(НДСКредитОстаток * Коэффициент, 2, 1);
	КонецЕсли; 
	
КонецПроцедуры // РассчитатьОстатокСуммыЗатрат()

// Функция получает структуру поиска строк результата запроса по базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	СтрокаВыборкиЗатраты - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по затратам
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//	СпособРаспределения - СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск - Заданный способ определения
//	РаспределятьПустуюАналитику - Булево - Признак распределения пустой номенклатурной группы и пустого заказа 
//											по всем номенклатурным группам и всем заказам
//
// Возвращаемое значение:
//	Структура - Структура поиска
//
Функция ПолучитьСтруктуруПоискаСтрокБазыРаспределения(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтрокаВыборкиЗатраты,
	ХарактерЗатрат,
	СпособРаспределения,
	РаспределятьПустуюАналитику
	)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("СпособРаспределения", СпособРаспределения);
	СтруктураПоиска.Вставить("ПодразделениеНЗП", СтрокаВыборки.Подразделение);
	
	Если Не РаспределятьПустуюАналитику Тогда
		СтруктураПоиска.Вставить("НоменклатурнаяГруппаНЗП", СтрокаВыборки.НоменклатурнаяГруппа);
		СтруктураПоиска.Вставить("ЗаказНЗП", СтрокаВыборки.Заказ);
	Иначе
		Если Не СтрокаВыборки.НоменклатурнаяГруппа.Пустая() Тогда
			СтруктураПоиска.Вставить("НоменклатурнаяГруппаНЗП", СтрокаВыборки.НоменклатурнаяГруппа);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаВыборки.Заказ) Тогда
			СтруктураПоиска.Вставить("ЗаказНЗП", СтрокаВыборки.Заказ);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураПоиска.Вставить("СчетУчета", СтрокаВыборки.СчетУчета);
	КонецЕсли;
	
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
		
		Если СтрокаВыборки.Владелец().Колонки.Найти("Продукция") = Неопределено Тогда
		
			Если Не СтрокаВыборкиЗатраты.Продукция.Пустая() Тогда
				СтруктураПоиска.Вставить("Продукция", СтрокаВыборкиЗатраты.Продукция);
			КонецЕсли;
			Если Не СтрокаВыборкиЗатраты.ХарактеристикаПродукции.Пустая() Тогда
				СтруктураПоиска.Вставить("ХарактеристикаПродукции", СтрокаВыборкиЗатраты.ХарактеристикаПродукции);
			КонецЕсли;
			Если Не СтрокаВыборкиЗатраты.СерияПродукции.Пустая() Тогда
				СтруктураПоиска.Вставить("СерияПродукции", СтрокаВыборкиЗатраты.СерияПродукции);
			КонецЕсли;
			
		Иначе
			СтруктураПоиска.Вставить("Продукция", СтрокаВыборки.Продукция);
			СтруктураПоиска.Вставить("ХарактеристикаПродукции", СтрокаВыборки.ХарактеристикаПродукции);
			СтруктураПоиска.Вставить("СерияПродукции", СтрокаВыборки.СерияПродукции);
			СтруктураПоиска.Вставить("Спецификация", СтрокаВыборки.Спецификация);
			СтруктураПоиска.Вставить("ВидВыпуска", СтрокаВыборки.ВидВыпуска);
		КонецЕсли;
			
	КонецЕсли;
		
	Возврат СтруктураПоиска;
	
КонецФункции // ПолучитьСтруктуруПоискаСтрокБазыРаспределения()

// Процедура распределяет затраты на выпуск продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	ВыборкаБаза - ВыборкаИзРезультатаЗапроса - Выборка по базе распределения на продукцию
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  СтрокаВыборкиЗатраты - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по затратам
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//	СпособРаспределения - СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск - Текущий способ распределения
//	СтатусМатериальныхЗатрат - ПеречислениеСсылка.СтатусыМатериальныхЗатратНаПроизводство - Текущий статус материальных затрат
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//  СуммаОстаток - Число - Сумма затрат
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьЗатратыНаВыпускПродукции(
	СтруктураШапкиДокумента,
	ВыборкаБаза,
	СтрокаВыборки,
	СтрокаВыборкиЗатраты,
	ХарактерЗатрат,
	СпособРаспределения,
	СтатусМатериальныхЗатрат,
	НомерПередела,
	СуммаОстаток,
	СуммаНУОстаток = 0,
	НДСВходящийОстаток = 0,
	НДСКредитОстаток = 0,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейЗатратыНаВыпуск,
	РегистрБухгалтерииНаборЗаписей,
	НаборЗаписейКорректировкиНалоговыйУчет = Неопределено,
	СодержаниеПроводкиКорректировка = ""
	)
	
	Если СуммаОстаток = 0
		И СуммаНУОстаток = 0
		И НДСВходящийОстаток = 0
		И НДСКредитОстаток = 0
		
		Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПоиска = ПолучитьСтруктуруПоискаСтрокБазыРаспределения(
		СтруктураШапкиДокумента,
		СтрокаВыборки,
		СтрокаВыборкиЗатраты,
		ХарактерЗатрат,
		СпособРаспределения,
		Ложь // РаспределятьПустуюАналитику
	);
	
	МассивКоэф = Новый Массив;
	
	ВсегоБазаРаспределения = 0;
	ВсегоБазаРаспределенияНЗП = 0;
	
	ВыборкаБаза.Сбросить();
	Пока ВыборкаБаза.НайтиСледующий(СтруктураПоиска) Цикл
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
			И НЕ СтруктураШапкиДокумента.РазрешитьКорректировкиИспользования 
			И ЗначениеЗаполнено(ВыборкаБаза.НалоговоеНазначение) 
			И (ВыборкаБаза.НалоговоеНазначение <> СтрокаВыборкиЗатраты.НалоговоеНазначение)
			// НалоговоеНазначение затрат с группой ДоходовИЗатрат можно распределять всегда - по ним корректировок не бывает
			И (НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(СтрокаВыборкиЗатраты.НалоговоеНазначение) <> Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат)
		
		Тогда
		
			Продолжить;
			
		КонецЕсли;	
			
		Если ВыборкаБаза.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
			МассивКоэф.Добавить(0);
			ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.База + ВыборкаБаза.БазаОстатокНЗП;
		Иначе
			МассивКоэф.Добавить(ВыборкаБаза.База);
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаБаза.База;
			ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.БазаОстатокНЗП;
		КонецЕсли;
													
	КонецЦикла;
	
	// Если не удалось определить базу распределения,
	// попробуем распределить пустые номенклатурные группы и пустые заказы
	// по всем номенклатурным группам и всем заказам.
	Если ВсегоБазаРаспределения = 0 Тогда
		
		СтруктураПоиска = ПолучитьСтруктуруПоискаСтрокБазыРаспределения(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтрокаВыборкиЗатраты,
			ХарактерЗатрат,
			СпособРаспределения,
			Истина // РаспределятьПустуюАналитику
		);
		
		МассивКоэф = Новый Массив;
		
		ВсегоБазаРаспределения = 0;
		ВсегоБазаРаспределенияНЗП = 0;
		
		ВыборкаБаза.Сбросить();
		Пока ВыборкаБаза.НайтиСледующий(СтруктураПоиска) Цикл
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
				И НЕ СтруктураШапкиДокумента.РазрешитьКорректировкиИспользования 
				И ЗначениеЗаполнено(ВыборкаБаза.НалоговоеНазначение) 
				И (ВыборкаБаза.НалоговоеНазначение <> СтрокаВыборкиЗатраты.НалоговоеНазначение)
				И (НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(СтрокаВыборкиЗатраты.НалоговоеНазначение) <> Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат)
			
			Тогда
			
				Продолжить;
				
			КонецЕсли;	
			
				
			Если ВыборкаБаза.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
				МассивКоэф.Добавить(0);
				ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.База + ВыборкаБаза.БазаОстатокНЗП;
			Иначе
				МассивКоэф.Добавить(ВыборкаБаза.База);
				ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаБаза.База;
				ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.БазаОстатокНЗП;
			КонецЕсли;
														
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВсегоБазаРаспределения <> 0 Тогда
		
		// Определим остаток затрат для распределения.
		СуммаНаВыпуск = 0;
		СуммаНУНаВыпуск = 0;
		НДСВходящийНаВыпуск = 0;
		НДСКредитНаВыпуск = 0;
				
		РассчитатьОстатокСуммыЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			ВсегоБазаРаспределения,
			ВсегоБазаРаспределенияНЗП,
			СуммаОстаток,
			СуммаНУОстаток,
			НДСВходящийОстаток,
			НДСКредитОстаток,
			СуммаНаВыпуск,
			СуммаНУНаВыпуск,
			НДСВходящийНаВыпуск,
			НДСКредитНаВыпуск
			);
	
		МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаНаВыпуск, МассивКоэф, 2);
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСуммаНУ     = ОбщегоНазначения.РаспределитьПропорционально(СуммаНУНаВыпуск, МассивКоэф, 2);
			МассивНДСВходящий = ОбщегоНазначения.РаспределитьПропорционально(НДСВходящийНаВыпуск, МассивКоэф, 2);
			МассивНДСКредит   = ОбщегоНазначения.РаспределитьПропорционально(НДСКредитНаВыпуск, МассивКоэф, 2);
		Иначе
			МассивСуммаНУ     = Неопределено;
			МассивНДСВходящий = Неопределено;
			МассивНДСКредит   = Неопределено;
		КонецЕсли; 
		
		Индекс = 0;
		ВыборкаБаза.Сбросить();
		Пока ВыборкаБаза.НайтиСледующий(СтруктураПоиска) Цикл
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
				И НЕ СтруктураШапкиДокумента.РазрешитьКорректировкиИспользования 
				И ЗначениеЗаполнено(ВыборкаБаза.НалоговоеНазначение) 
				И (ВыборкаБаза.НалоговоеНазначение <> СтрокаВыборкиЗатраты.НалоговоеНазначение)
				И (НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(СтрокаВыборкиЗатраты.НалоговоеНазначение) <> Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат)
			
			Тогда
			
				Продолжить;
				
			КонецЕсли;	
			
			Сумма       = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			СуммаНУ     = ?(МассивСуммаНУ = Неопределено, 0, МассивСуммаНУ[Индекс]);
			НДСВходящий = ?(МассивНДСВходящий = Неопределено, 0, МассивНДСВходящий[Индекс]);
			НДСКредит   = ?(МассивНДСКредит = Неопределено, 0, МассивНДСКредит[Индекс]);
			
			// Формирование движений по регистру "Затраты на выпуск".
			СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ВыборкаБаза,
				СтрокаВыборкиЗатраты.СтатьяЗатрат,
				ХарактерЗатрат,
				СтатусМатериальныхЗатрат,
				?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтрокаВыборкиЗатраты.НалоговоеНазначение, Неопределено), // НалоговоеНазначениеЗатрат
				Сумма,
				СуммаНУ,
				НДСВходящий,
				НДСКредит,
				НаборЗаписейЗатратыНаВыпуск
			);
				
			// Формирование движений по регистру бухгалтерии.	
			Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
			   И (СтрокаВыборки.НоменклатурнаяГруппа <> ВыборкаБаза.НоменклатурнаяГруппа 
			     ИЛИ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтрокаВыборки.НалоговоеНазначение <> ВыборкаБаза.НалоговоеНазначениеПоФакту)
			   )
			   Тогда
				
				СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					СтруктураШапкиДокумента.ВидОтраженияВУчете,
					СтрокаВыборки,
					ВыборкаБаза,
					СтрокаВыборкиЗатраты.СтатьяЗатрат,
					ХарактерЗатрат,
					Сумма,
					СуммаНУ,
					РегистрБухгалтерииНаборЗаписей
				);
				
			КонецЕсли;	
			
			Индекс = Индекс + 1;

			// корректировки использования в НУ
			Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				Продолжить;	
			КонецЕсли; 
			
			СтруктураКорректировкаНДСКредит = НалоговыйУчет.ПолучитьСуммуКорректировкиНалоговогоКредита(
				СтрокаВыборкиЗатраты.НалоговоеНазначение,
				ВыборкаБаза.НалоговоеНазначениеПоФакту,
				НДСВходящий,
				НДСКредит,
				Сумма // СтоимостьБУ
			);
			
			Если НЕ СтруктураКорректировкаНДСКредит.ЕстьКорректировки Тогда
				Продолжить;
			КонецЕсли; 	
				
			КорректировкаНДСКредит        = СтруктураКорректировкаНДСКредит.КорректировкаНДСКредит;
			НДСКредитПоФакту              = СтруктураКорректировкаНДСКредит.НДСКредитПоФакту;
			СуммаКорректировкиСтоимость   = СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимость;
			СуммаКорректировкиСтоимостьНУ = СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимостьНУ;
			
			КодОперацииКорректировкаНУ = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкиНУ;
			
			// Формирование движений по регистру КорректировкиЗатратыНалоговыйУчет
			СформироватьДвиженияПоРегиструКорректировкиНалоговыйУчет(
				СтруктураШапкиДокумента,
				СтрокаВыборкиЗатраты,
				ВыборкаБаза,
				НДСКредит,
				НДСКредитПоФакту,
				ВидДвиженияНакопления.Приход,
				НаборЗаписейКорректировкиНалоговыйУчет
			);
			
			// Проводки БУ по корректировке налогового кредита
			// отcторнируем стоимость БУ и НУ на сумму корректировки НДС по проводкам БУ
			// сторнируем только когда восстанавливаем НДС
			Если СтруктураКорректировкаНДСКредит.ВосстановлениеНДС Тогда
			
				СформироватьПроводкуПоКорректировкеИспользования(
					СтруктураШапкиДокумента,
					ВыборкаБаза,
					СуммаКорректировкиСтоимость,
					СуммаКорректировкиСтоимостьНУ,
					РегистрБухгалтерииНаборЗаписей,
					СодержаниеПроводкиКорректировка,
					СтрокаВыборкиЗатраты.СтатьяЗатрат
				);
					
			КонецЕсли;
			
			// Сумма корректировки налогового кредита должна скорректировать Затраты на выпуск продукции (БУ)
			// Формирование движений по регистру "Затраты на выпуск (БУ)".
			СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ВыборкаБаза,
				СтрокаВыборкиЗатраты.СтатьяЗатрат,
				ХарактерЗатрат,
				СтатусМатериальныхЗатрат,
				СтрокаВыборкиЗатраты.НалоговоеНазначение,  // НалоговоеНазначениеЗатрат
				СуммаКорректировкиСтоимость,   // Сумма
				СуммаКорректировкиСтоимостьНУ, // СуммаНУ
				0,                       // НДСВходящий
				КорректировкаНДСКредит,  // НДСКредит
				НаборЗаписейЗатратыНаВыпуск,
				КодОперацииКорректировкаНУ,  // принудительная установка кода операции
				СтрокаВыборки.СчетУчета // принудительная установка счета учета по БУ
			);
			
			// Также при корректировке необходимо сделать следующие движения:
			// Приход НЗП БУ по аналитике выпуска с кодом операции КорректировкиНУ, 
			// измерением НеУчитыватьВРасчетеБазы = Ложь (суммы корректировок должны участвовать в расчете базы), 
			// измерением НеУчитыватьДвиженияПриРасчетеСебестоимости = Истина (этот приход и расход по НЗП не должен входить в запросы при расчете себестоимости)
			
			// Расход НЗП БУ по аналитике выпуска с кодом операцииСписаниеНЗПРегламент 
			// измерением НеУчитыватьВРасчетеБазы = Ложь (суммы корректировок должны участвовать в расчете базы), 
			// измерением НеУчитыватьДвиженияПриРасчетеСебестоимости = Истина (этот приход и расход по НЗП не должен входить в запросы при расчете себестоимости)
		
			// Это позволит:
			// Для бух. учета - обеспечить совпадение оборотов регистра НЗП БУ и 23 счета
			// Для бух. учета - совпадение НЗП и затрат на выпуск в отчете АнализРаспределенияПроизводственныхЗатрат
			
			// Приход НЗП БУ по аналитике выпуска 
				
			НоваяСтрокаПриход = НаборЗаписейНезавершенноеПроизводство.Добавить();
			НоваяСтрокаПриход.Активность = Истина;
			НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрокаПриход.Период = СтруктураШапкиДокумента.Период;
				
			НоваяСтрокаПриход.Организация           = СтруктураШапкиДокумента.Организация;
			НоваяСтрокаПриход.СчетУчета           	= СтрокаВыборки.СчетУчета;
			НоваяСтрокаПриход.НалоговоеНазначение   = ВыборкаБаза.НалоговоеНазначениеПоФакту;
				
			НоваяСтрокаПриход.Подразделение         = ВыборкаБаза.Подразделение;
			НоваяСтрокаПриход.НоменклатурнаяГруппа  = ВыборкаБаза.НоменклатурнаяГруппа;
				
			НоваяСтрокаПриход.СтатьяЗатрат          = СтрокаВыборкиЗатраты.СтатьяЗатрат;
			НоваяСтрокаПриход.Заказ                 = ВыборкаБаза.Заказ;
			НоваяСтрокаПриход.Затрата               = ХарактерЗатрат;
			НоваяСтрокаПриход.ХарактеристикаЗатраты = Неопределено;
			НоваяСтрокаПриход.СерияЗатраты          = Неопределено;
				
			НоваяСтрокаПриход.КодОперации           = Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкиНУ;
			НоваяСтрокаПриход.НомерПередела         = НомерПередела;
				
			НоваяСтрокаПриход.Стоимость             = СуммаКорректировкиСтоимость;
			НоваяСтрокаПриход.СтоимостьНУ           = СуммаКорректировкиСтоимостьНУ;
			НоваяСтрокаПриход.НДСВходящий           = 0;
			НоваяСтрокаПриход.НДСКредит             = КорректировкаНДСКредит;
			
			НоваяСтрокаПриход.Количество            = 0;
			
			НоваяСтрокаПриход.НеУчитыватьВРасчетеБазы = Ложь; 
			НоваяСтрокаПриход.НеУчитыватьДвиженияПриРасчетеСебестоимости = Истина;
				
			// Если в наборе записей 1000 строк, запишем набор.
			Если НаборЗаписейНезавершенноеПроизводство.Количество() = 1000 Тогда
				НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
			КонецЕсли;
				
			// Расход НЗП по аналитике выпуска 
				
			НоваяСтрокаРасход = НаборЗаписейНезавершенноеПроизводство.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасход, НоваяСтрокаПриход);
			НоваяСтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			НоваяСтрокаРасход.НеУчитыватьВРасчетеБазы = Ложь; 
			НоваяСтрокаРасход.НеУчитыватьДвиженияПриРасчетеСебестоимости = Истина;
			
			НоваяСтрокаРасход.КодОперации           = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеНЗПРегламент;
				
			// Если в наборе записей 1000 строк, запишем набор.
			Если НаборЗаписейНезавершенноеПроизводство.Количество() = 1000 Тогда
				НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
			КонецЕсли;
					
		КонецЦикла;
		
		// Формирование расходных движений по регистру "Незавершенное производство".
		СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтрокаВыборкиЗатраты.СтатьяЗатрат,
			ХарактерЗатрат,
			ХарактерЗатрат, // Затрата 
			Неопределено, // ХарактеристикаЗатраты
			Неопределено, // СерияЗатраты
			НомерПередела,
			0, // Количество
			СуммаНаВыпуск,
			СуммаНУНаВыпуск, 
			НДСВходящийНаВыпуск,
			НДСКредитНаВыпуск,
			ВидДвиженияНакопления.Расход,
			НаборЗаписейНезавершенноеПроизводство,
			СтрокаВыборки,
			СтрокаВыборкиЗатраты
			);
			
	КонецЕсли;

КонецПроцедуры // РаспределитьЗатратыНаВыпускПродукции()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО ПРОИЗВОДСТВЕННЫМ ЗАТРАТАМ

// Функция формирует текст запроса по производственным затратам.
//
// Возвращаемое значение:
//	Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоПроизводственнымЗатратам()
		
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета НезавершенноеПроизводство.Организация,
    |   //ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|	//ДляБухУчета НезавершенноеПроизводство.НалоговоеНазначение,
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	НезавершенноеПроизводство.Затрата,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты,
	|
	|	//ДляБухУчета НезавершенноеПроизводство.СтоимостьНУОстаток КАК СуммаНУОстаток,
	|	//ДляБухУчета НезавершенноеПроизводство.НДСВходящийОстаток КАК НДСВходящийОстаток,
	|	//ДляБухУчета НезавершенноеПроизводство.НДСКредитОстаток КАК НДСКредитОстаток,
	|
	|	НезавершенноеПроизводство.СтоимостьОстаток КАК СуммаОстаток,
	|	НезавершенноеПроизводство.КоличествоОстаток КАК КоличествоОстаток
	|	
	|ИЗ
	|	РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&КонГраница,
	|		Не Затрата ССЫЛКА Перечисление.ХарактерЗатрат
	|		И Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|		И СтатьяЗатрат В (&МассивСтатьиЗатрат)
	|		//ДляРеглУчета И Организация = &Организация
	|		) КАК НезавершенноеПроизводство
	|	
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета НезавершенноеПроизводство.Организация,
    | 	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|	//ДляБухУчета НезавершенноеПроизводство.НалоговоеНазначение,
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.Затрата,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПроизводственнымЗатратам()

// Процедура устанавливает параметры запроса по производственным затратам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	МассивСтатьиЗатрат - Массив - Массив статей затрат
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	Запрос - Запрос
//
Процедура УстановитьПараметрыЗапросаПоПроизводственнымЗатратам(
	СтруктураШапкиДокумента,
	МассивСтатьиЗатрат,
	СпособРасчета,
	Запрос
	)
	
	Запрос.УстановитьПараметр("НачДата",    СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата",    СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Запрос.УстановитьПараметр("МассивСтатьиЗатрат", МассивСтатьиЗатрат);
	
	Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПеределам);
	Иначе
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПодразделениям);
	КонецЕсли;

КонецПроцедуры // УстановитьПараметрыЗапросаПоПроизводственнымЗатратам()

// Функция формирует запрос по производственным затратам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультЗапроса - Результат запроса по способам распределения
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//
// Возвращаемое значение:
//   Запрос – Запрос по производственным затратам.
//
Функция СформироватьЗапросПоПроизводственнымЗатратам(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	СпособРасчета
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоПроизводственнымЗатратам();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаЗначений = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выгрузить();
	ТаблицаЗначений.Свернуть("СтатьяЗатрат", "");
	МассивСтатьиЗатрат = ТаблицаЗначений.ВыгрузитьКолонку("СтатьяЗатрат");
	
	УстановитьПараметрыЗапросаПоПроизводственнымЗатратам(
		СтруктураШапкиДокумента,
		МассивСтатьиЗатрат,
		СпособРасчета,
		Запрос
		);
		
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоПроизводственнымЗатратам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ ПРОИЗВОДСТВЕННЫХ ЗАТРАТ

// Процедура производит распределение затрат по рассчитанной базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат выполнения запроса по затратам
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат выполнения запроса по базе распределения
//	РезультатЗапросаБазаРаспределенияНаПродукцию - РезультатЗапроса - Результат запроса по базе распределения на продукцию
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	ВсегоПеределов - Число - Общее количество переделов
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьПроизводственныеЗатратыПоБазеРаспределения(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	РезультатЗапросаБазаРаспределенияНаПродукцию,
	НомерПередела,
	ВсегоПеределов,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейЗатратыНаВыпуск,
	РегистрБухгалтерииНаборЗаписей,
	НаборЗаписейКорректировкиНалоговыйУчет = Неопределено
	)
	
	// Получим построитель запроса по базе распределения.
	ПостроительЗапроса = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределения
		);
		
	ПостроительЗапросаНаПродукцию = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределенияНаПродукцию
		);
		
	ВыборкаПоСпособамРаспределенияЗатрат = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выбрать();

	МассивКоэф = Новый Массив;
	
	ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
	
	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		КоличествоОстаток = ВыборкаПоЗатратам.КоличествоОстаток;
		СуммаОстаток = ВыборкаПоЗатратам.СуммаОстаток;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СуммаНУОстаток     = ВыборкаПоЗатратам.СуммаНУОстаток;
			НДСВходящийОстаток = ВыборкаПоЗатратам.НДСВходящийОстаток;
			НДСКредитОстаток   = ВыборкаПоЗатратам.НДСКредитОстаток;
		Иначе
			СуммаНУОстаток     = 0;
			НДСВходящийОстаток = 0;
			НДСКредитОстаток   = 0;
		КонецЕсли; 
		
		// Пропускаем строки с пустым количеством и пустой суммой.
		Если КоличествоОстаток = 0
		   И СуммаОстаток = 0
		   И СуммаНУОстаток = 0
		   И НДСВходящийОстаток = 0 
		   И НДСКредитОстаток = 0
		Тогда
			Продолжить;
		КонецЕсли; 
		
		// Определим способ и характер распределения затрат.
		СпособРаспределения = Неопределено;
		ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка();
		РаспределятьНаПодчиненныеПодразделения = Ложь;
		
		РаспределятьЗатраты = ПолучитьСпособИХарактерРаспределенияЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоСпособамРаспределенияЗатрат,
			Ложь, // ОпределятьПоХарактеруЗатрат
			Ложь, // ПроверятьУказаниеСпособаРаспределения
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения
			);
			
		Если Не РаспределятьЗатраты Тогда
			Продолжить;		
		КонецЕсли; 
		
		// Отберем строки базы распределения.
		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			НомерПередела,
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения,
			Ложь, // ОпределятьПоСчетуУчету
			Ложь, // ОтборПоПродукции
			ПостроительЗапроса
			);

		Если УстановленНовыйОтбор Тогда	
			ПостроительЗапроса.Выполнить();
		КонецЕсли;	
		РезультатЗапросаБаза = ПостроительЗапроса.Результат;
		
		// Отберем строки базы распределения на продукцию.
		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			НомерПередела,
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения,
			Ложь, // ОпределятьПоСчетуУчету
			Ложь, // ОтборПоПродукции
			ПостроительЗапросаНаПродукцию
			);

		Если УстановленНовыйОтбор Тогда	
			ПостроительЗапросаНаПродукцию.Выполнить();
		КонецЕсли;	
		РезультатЗапросаБазаНаПродукцию = ПостроительЗапросаНаПродукцию.Результат;
		ВыборкаБазаНаПродукцию = РезультатЗапросаБазаНаПродукцию.Выбрать();
										
		ВсегоБазаРаспределения = 0;
		
		МассивКоэф.Очистить();
		
		ВыборкаБаза = РезультатЗапросаБаза.Выбрать();
		Пока ВыборкаБаза.Следующий() Цикл
			
			МассивКоэф.Добавить(ВыборкаБаза.БазаПриход * ВыборкаБаза.БазаНаПодчиненные);
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + (ВыборкаБаза.БазаПриход * ВыборкаБаза.БазаНаПодчиненные);
			
		КонецЦикла;
		
		Если ВсегоБазаРаспределения = 0 Тогда
			Если НомерПередела = ВсегоПеределов Тогда
				ОбщегоНазначения.Сообщение("Сумма базы коэф. по " + СпособРаспределения + " равна 0, для:
					|Подразделение: " + ВыборкаПоЗатратам.Подразделение + "
					|Статья затрат: " + ВыборкаПоЗатратам.СтатьяЗатрат + "
					|Заказ: " + ВыборкаПоЗатратам.Заказ + "
					|Номенклатурная группа: " + ВыборкаПоЗатратам.НоменклатурнаяГруппа, СтатусСообщения.Важное);
				
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МассивКоличество = ОбщегоНазначения.РаспределитьПропорционально(КоличествоОстаток, МассивКоэф, 3);
		МассивСумма      = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэф, 2);
		
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСуммаНУ     = ОбщегоНазначения.РаспределитьПропорционально(СуммаНУОстаток, МассивКоэф, 2);
			МассивНДСВходящий = ОбщегоНазначения.РаспределитьПропорционально(НДСВходящийОстаток, МассивКоэф, 2);
			МассивНДСКредит   = ОбщегоНазначения.РаспределитьПропорционально(НДСКредитОстаток, МассивКоэф, 2);
		Иначе
			МассивСуммаНУ     = Неопределено;
			МассивНДСВходящий = Неопределено;
			МассивНДСКредит   = Неопределено;
		КонецЕсли; 
		
		// Формирование расходных движений по регистру "Незавершенное производство".
		СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоЗатратам.СтатьяЗатрат,
			ХарактерЗатрат,
			ВыборкаПоЗатратам.Затрата,
			ВыборкаПоЗатратам.ХарактеристикаЗатраты,
			ВыборкаПоЗатратам.СерияЗатраты,
			НомерПередела,
			КоличествоОстаток,
			СуммаОстаток,
			СуммаНУОстаток, 
			НДСВходящийОстаток,
			НДСКредитОстаток, 
			ВидДвиженияНакопления.Расход,
			НаборЗаписейНезавершенноеПроизводство
			);
		
		Индекс = 0;
		ВыборкаБаза.Сбросить();
		Пока ВыборкаБаза.Следующий() Цикл
			
			Количество = ?(МассивКоличество = Неопределено, 0, МассивКоличество[Индекс]);
			
			Сумма           = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			 
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				СуммаНУ     = ?(МассивСуммаНУ = Неопределено, 0, МассивСуммаНУ[Индекс]);
				НДСВходящий = ?(МассивНДСВходящий = Неопределено, 0, МассивНДСВходящий[Индекс]);
				НДСКредит   = ?(МассивНДСКредит = Неопределено, 0, МассивНДСКредит[Индекс]);
			Иначе
				СуммаНУ     = 0;
				НДСВходящий = 0;
				НДСКредит   = 0;
			КонецЕсли;	
			
			Если Количество <> 0
			 ИЛИ Сумма <> 0
			 ИЛИ СуммаНУ <> 0
			 ИЛИ НДСВходящий <> 0
			 ИЛИ НДСКредит <> 0
			 Тогда
			
				// Формирование приходных движений по регистру "Незавершенное производство".
				СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					ВыборкаБаза,
					ВыборкаПоЗатратам.СтатьяЗатрат,
					ХарактерЗатрат,
					ХарактерЗатрат, // Затрата 
					Неопределено, // ХарактеристикаЗатраты
					Неопределено, // СерияЗатраты
					НомерПередела,
					0, // Количество
					Сумма,
					СуммаНУ, // СуммаНУ
					НДСВходящий, // НДСВходящий
					НДСКредит, // НДСКредит
					ВидДвиженияНакопления.Приход,
					НаборЗаписейНезавершенноеПроизводство,
					ВыборкаБаза,
					ВыборкаПоЗатратам // в НЗП НУ движения идут по разрезам затрат (не факту)
					);
			 
			 	// Формирование движений по регистру бухгалтерии.	
				Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
					
					СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
						СтруктураШапкиДокумента,
						СтруктураШапкиДокумента.ВидОтраженияВУчете,
						ВыборкаПоЗатратам,
						ВыборкаБаза,
						ВыборкаПоЗатратам.СтатьяЗатрат,
						ХарактерЗатрат,
						Сумма,
						СуммаНУ, // СуммаНУ
						РегистрБухгалтерииНаборЗаписей
						);
					
				КонецЕсли;
					
				// Распределение затрат на выпуск продукции по базе.
				РаспределитьЗатратыНаВыпускПродукции(
					СтруктураШапкиДокумента,
					ВыборкаБазаНаПродукцию,
					ВыборкаБаза,
					ВыборкаПоЗатратам,
					ХарактерЗатрат,
					СпособРаспределения,
					ВыборкаПоЗатратам.СтатусМатериальныхЗатрат,
					НомерПередела,
					Сумма,
					СуммаНУ,
					НДСВходящий,
					НДСКредит,
					НаборЗаписейНезавершенноеПроизводство,
					НаборЗаписейЗатратыНаВыпуск,
					РегистрБухгалтерииНаборЗаписей,
					НаборЗаписейКорректировкиНалоговыйУчет,
					"НЗП"
					);
			КонецЕсли;
				
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры // РаспределитьПроизводственныеЗатратыПоБазеРаспределения()

// Процедура производит распределение производственных расходов.
//
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат запроса по базе распределения
//	РезультатЗапросаБазаРаспределенияНаПродукцию - РезультатЗапроса - Результат запроса по базе распределения на продукцию
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	ВсегоПеределов - Число - Общее количество переделов
//  СтруктураДвижений - Структура - Наборы движений по регистрам.
//
Процедура РаспределениеПроизводственныхРасходов(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	РезультатЗапросаБазаРаспределенияНаПродукцию,
	СпособРасчета,
	НомерПередела,
	ВсегоПеределов,
	СтруктураДвижений
	)
	
	// Сформируем запрос по производственным расходам.
	ЗапросПоЗатратам = СформироватьЗапросПоПроизводственнымЗатратам(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоСпособамРаспределенияЗатрат,
		СпособРасчета
		);

	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	Если Не РезультатЗапросаПоЗатратам.Пустой()
	   И Не РезультатЗапросаПоСпособамРаспределенияЗатрат.Пустой()
	   И Не РезультатЗапросаБазаРаспределения.Пустой() Тогда	
		
		РаспределитьПроизводственныеЗатратыПоБазеРаспределения(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоЗатратам,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			РезультатЗапросаБазаРаспределенияНаПродукцию,
			НомерПередела,
			ВсегоПеределов,
			СтруктураДвижений.ДвиженияНЗП,
			СтруктураДвижений.ДвиженияЗатратыНаВыпуск,
			СтруктураДвижений.Операция,
			?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураДвижений.ДвиженияКорректировкиНЗП_НУ, Неопределено)
			);
		
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияНЗП.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураДвижений.ДвиженияКорректировкиНЗП_НУ.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияКорректировкиНЗП_НУ.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // РаспределениеПроизводственныхРасходов()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРУ "ЗАТРАТЫ"

// Функция формирует текст запроса по регистру "Затраты".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоЗатратам()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета Затраты.Организация,
	|	Затраты.Подразделение,
	|	Затраты.СтатьяЗатрат,
	|	Затраты.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	|	Затраты.СтатьяЗатрат.ПостояннаяЗатрата КАК ПостояннаяЗатрата,
	|	Затраты.НоменклатурнаяГруппа,
	|	Затраты.Заказ,
	|	//ДляУпрУчета  Затраты.Проект,
	|	//ДляРеглУчета Затраты.СчетУчета,
	|	//ДляБухУчета  Затраты.НалоговоеНазначение,
	|
	|	ЕстьNULL(ПоказателиПриНормальнойМощности.БазаРаспределения, 0) КАК БазаРаспределенияПриНормальнойМощности,
	|	ЕстьNULL(ПоказателиПриНормальнойМощности.СуммаПостоянныхЗатрат, 0) КАК СуммаПостоянныхЗатратПриНормальнойМощности,
	|
	|	//ДляБухУчета  Затраты.СуммаНУОстаток,
	|	//ДляБухУчета  Затраты.НДСВходящийОстаток,
	|	//ДляБухУчета  Затраты.НДСКредитОстаток,
	|
	|	Затраты.СуммаОстаток
	|
	|ИЗ
	|	РегистрНакопления.Затраты%СуффиксУчета%.Остатки(&КонГраница,
	|		//ДляУпрУчета СтатьяЗатрат.ХарактерЗатрат В (&МассивХарактеровЗатрат)
	|		//ДляРеглУчета Организация = &Организация 
	|		//ДляРеглУчета И СчетУчета В ИЕРАРХИИ (&МассивСчетовЗатрат)
	|
	|		) КАК Затраты
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПоказателиПриНормальнойМощности%СуффиксОрганизаций%.СрезПоследних(&КонГраница, ) КАК ПоказателиПриНормальнойМощности
	|	ПО 
	|		Затраты.СтатьяЗатрат    = ПоказателиПриНормальнойМощности.СтатьяЗатрат
	|		И Затраты.Подразделение = ПоказателиПриНормальнойМощности.Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета Затраты.Организация,
	|	//ДляРеглУчета Затраты.СчетУчета,
	|	//ДляБухУчета  Затраты.НалоговоеНазначение,
	|	Затраты.Подразделение,
	|	Затраты.НоменклатурнаяГруппа,
	|	Затраты.Заказ,
	|	Затраты.СтатьяЗатрат
	|";
		
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоЗатратам()

// Функция формирует массив счетов затрат.
//
// Параметры
//	СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//
// Возвращаемое значение:
//	Массив – Массив счетов затрат.
//
Функция ПолучитьМассивСчетовЗатрат(
	СтруктураШапкиДокумента,
	ХарактерЗатрат
	)
	
	МассивСчетовЗатрат = Новый Массив;
	
	Если ХарактерЗатрат.Пустая() Тогда
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			Если Не СтруктураШапкиДокумента.ДиректКостингОбщепроизводственныеЗатраты Тогда	
				МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
			КонецЕсли;
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
			Если Не СтруктураШапкиДокумента.ДиректКостингАдминистративныеЗатраты Тогда	
				МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.АдминистративныеРасходы);
			КонецЕсли;
			
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Международный.ОбщепроизводственныеРасходы);
			
		КонецЕсли;
			
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы Тогда
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельностиГруппа);
	
		КонецЕсли;
			
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт Тогда
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаСбыт);
	
		КонецЕсли;
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		КонецЕсли;	
			
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.АдминистративныеРасходы);
	
		КонецЕсли;
	
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы Тогда
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы);
			МассивСчетовЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТовары);
		КонецЕсли;	
			
	КонецЕсли;
	
	Возврат МассивСчетовЗатрат;
		
КонецФункции // ПолучитьМассивСчетовЗатрат()

// Функция формирует запрос по регистру "Затраты".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для выборки остатков
//
// Возвращаемое значение:
//   Запрос – Запрос по регистру "Затраты".
//
Функция СформироватьЗапросПоЗатратам(
	СтруктураШапкиДокумента,
	ХарактерЗатрат,
	СписаниеДиректКостинг = Ложь
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоЗатратам();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		МассивХарактеровЗатрат = Новый Массив;
		Если ХарактерЗатрат.Пустая() Тогда
			Если Не СтруктураШапкиДокумента.ДиректКостингОбщепроизводственныеЗатраты Тогда	
				МассивХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
			КонецЕсли;	
			Если Не СтруктураШапкиДокумента.ДиректКостингАдминистративныеЗатраты Тогда	
				МассивХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.АдминистративныеРасходы);
			КонецЕсли;
		Иначе
			МассивХарактеровЗатрат.Добавить(ХарактерЗатрат);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивХарактеровЗатрат", МассивХарактеровЗатрат);
		
	Иначе
		
		МассивСчетовЗатрат = ПолучитьМассивСчетовЗатрат(
			СтруктураШапкиДокумента,
			ХарактерЗатрат
		);
		Запрос.УстановитьПараметр("МассивСчетовЗатрат", МассивСчетовЗатрат);
		
	КонецЕсли;
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоЗатратам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ ОБЩЕПРОИЗВОДСТВЕННЫХ И АДМИНИСТРАТИВНЫХ РАСХОДОВ

// Процедура выполняет распределение затрат по проектам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по затратам
//	ВыборкаРаспределениеПоПроектам - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса распределения по проектам
//	СуммаОстаток - Число - Сумма затрат по управленческому учету
//	НаборЗаписейЗатратыОбороты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты (обороты)".
//
Процедура РаспределитьСписанныеЗатратыПоПроектам(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВыборкаРаспределениеПоПроектам,
	СуммаОстаток,
	НаборЗаписейЗатратыОбороты
	)
	
	Если СтруктураШапкиДокумента.Свойство("ВедениеУчетаЗатратПоПроектам") И СтруктураШапкиДокумента.ВедениеУчетаЗатратПоПроектам Тогда
		Проект = СтрокаВыборки.Проект;
	Иначе
		Проект = Справочники.Проекты.ПустаяСсылка();
	КонецЕсли;
	
	ВсегоБазаРаспределения = 0;
	Если ТипЗнч(Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам") Тогда
		
		СтруктураПоиска = Новый Структура("ВидРаспределения", Проект);
		
		МассивКоэф = Новый Массив;
		
		ВыборкаРаспределениеПоПроектам.Сбросить();
		Пока ВыборкаРаспределениеПоПроектам.НайтиСледующий(СтруктураПоиска) Цикл
			МассивКоэф.Добавить(ВыборкаРаспределениеПоПроектам.ДоляРаспределения);
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаРаспределениеПоПроектам.ДоляРаспределения;
		КонецЦикла;
		
		Если ВсегоБазаРаспределения = 0 Тогда
			ОбщегоНазначения.Сообщение("Не удалось выполнить распределение затрат по виду распределения """ + Проект + """", СтатусСообщения.Внимание);
			Проект = Справочники.Проекты.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
		
	Если ВсегоБазаРаспределения <> 0 Тогда
			
		МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэф, 2);
			
		Индекс = 0;
		ВыборкаРаспределениеПоПроектам.Сбросить();
		Пока ВыборкаРаспределениеПоПроектам.НайтиСледующий(СтруктураПоиска) Цикл
				
			Сумма = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
				
			СформироватьДвиженияПоРегиструЗатратыОборотыРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ВыборкаРаспределениеПоПроектам.Проект,
				Сумма,
				НаборЗаписейЗатратыОбороты
			);
				
			Индекс = Индекс + 1;
				
		КонецЦикла;
			
	Иначе
		
		СформироватьДвиженияПоРегиструЗатратыОборотыРаспределениеЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Проект,
			СуммаОстаток,
			НаборЗаписейЗатратыОбороты
		);
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьСписанныеЗатратыПоПроектам()

// Процедура производит распределение затрат по рассчитанной базе в незавершенное производство.
//
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  ВыборкаПоЗатратам - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по затратам
//	ВыборкаРаспределениеПоПроектам - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса распределения по проектам
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//	СпособРаспределения - СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск - Текущий способ распределения
//	ХарактерРаспределенияЗатрат - ПеречислениеСсылка.ХарактерРаспределенияЗатрат - Текущий характер распределения затрат
//	РаспределятьНаПодчиненныеПодразделения - Булево - Признак распределения на подчиненные подразделения
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	ВсегоПеределов - Число - Всего передела
//  СуммаОстаток - Число - Сумма затрат
//	ПостроительЗапроса - ПостроительЗапроса - Построитель запроса по базе распределения
//	ПостроительЗапросаНаПродукцию - ПостроительЗапроса - Построитель запроса по базе распределения на продукцию
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейЗатраты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты"
//	НаборЗаписейЗатратыОбороты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты (обороты)"
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьЗатратыВНезавершенноеПроизводство(
	СтруктураШапкиДокумента,
	ВыборкаПоЗатратам,
	ВыборкаРаспределениеПоПроектам,
	ХарактерЗатрат,
	СпособРаспределения,
	ХарактерРаспределенияЗатрат,
	РаспределятьНаПодчиненныеПодразделения,
	НомерПередела,
	ВсегоПеределов,
	СуммаОстаток,
	СуммаНУОстаток = 0,
	НДСВходящийОстаток = 0,
	НДСКредитОстаток = 0,
	ПостроительЗапроса,
	ПостроительЗапросаНаПродукцию,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейЗатраты,
	НаборЗаписейЗатратыОбороты,
	НаборЗаписейЗатратыНаВыпуск,
	РегистрБухгалтерииНаборЗаписей,
	НаборЗаписейКорректировкиНалоговыйУчет = Неопределено
	)
	
	Если СуммаОстаток = 0 
		И (ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
		ИЛИ (СуммаНУОстаток = 0 И НДСВходящийОстаток = 0 И НДСКредитОстаток = 0))
	   Тогда
		Возврат;
	КонецЕсли;
	
	// Отберем строки базы распределения.
	УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		ВыборкаПоЗатратам,
		НомерПередела,
		СпособРаспределения,
		ХарактерРаспределенияЗатрат,
		РаспределятьНаПодчиненныеПодразделения,
		Ложь, // ОпределятьПоСчетуУчету
		Ложь, // ОтборПоПродукции
		ПостроительЗапроса
		);

	Если УстановленНовыйОтбор Тогда	
		ПостроительЗапроса.Выполнить();
	КонецЕсли;	
	РезультатЗапросаБаза = ПостроительЗапроса.Результат;
		
	// Отберем строки базы распределения на продукцию.
	УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		ВыборкаПоЗатратам,
		НомерПередела,
		СпособРаспределения,
		ХарактерРаспределенияЗатрат,
		РаспределятьНаПодчиненныеПодразделения,
		Ложь, // ОпределятьПоСчетуУчету
		Ложь, // ОтборПоПродукции
		ПостроительЗапросаНаПродукцию
		);

	Если УстановленНовыйОтбор Тогда	
		ПостроительЗапросаНаПродукцию.Выполнить();
	КонецЕсли;	
	РезультатЗапросаБазаНаПродукцию = ПостроительЗапросаНаПродукцию.Результат;
	ВыборкаБазаНаПродукцию = РезультатЗапросаБазаНаПродукцию.Выбрать();
										
	ВсегоБазаРаспределения = 0;
		
	МассивКоэф = Новый Массив;
		
	ВыборкаБаза = РезультатЗапросаБаза.Выбрать();
	Пока ВыборкаБаза.Следующий() Цикл
		
		МассивКоэф.Добавить(ВыборкаБаза.БазаПриход * ВыборкаБаза.БазаНаПодчиненные);
		ВсегоБазаРаспределения = ВсегоБазаРаспределения + (ВыборкаБаза.БазаПриход * ВыборкаБаза.БазаНаПодчиненные);
			
	КонецЦикла;
		
	// Для постоянных общепроизводственных затрат определяем сумму распределяемых и нераспределяемых (относимых на себестоимость)
	СуммаСписанияНаСебестоимость = 0;
	СуммаНУСписанияНаСебестоимость = 0;
	НДСВходящийСписанияНаСебестоимость = 0;
	НДСКредитСписанияНаСебестоимость = 0;
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
			 И ВыборкаПоЗатратам.ПостояннаяЗатрата = Истина Тогда
			 
			Если  ВыборкаПоЗатратам.БазаРаспределенияПриНормальнойМощности = 0 
				ИЛИ ВыборкаПоЗатратам.СуммаПостоянныхЗатратПриНормальнойМощности = 0 Тогда
				
					ОбщегоНазначения.Сообщение("Не указаны показатели при нормальной мощности для постоянной общепроизводственной затраты:
							|Подразделение: " + ВыборкаПоЗатратам.Подразделение + "
							|Статья затрат: " + ВыборкаПоЗатратам.СтатьяЗатрат + "
							|Затрата будет полностью распределена!", СтатусСообщения.Важное);
			Иначе
				Если ВсегоБазаРаспределения <= ВыборкаПоЗатратам.БазаРаспределенияПриНормальнойМощности Тогда
					СуммаРаспределения = Мин(СуммаОстаток, ВыборкаПоЗатратам.СуммаПостоянныхЗатратПриНормальнойМощности * ВсегоБазаРаспределения / ВыборкаПоЗатратам.БазаРаспределенияПриНормальнойМощности);
					// списуем на себестоимость нераспределенные ОПЗ
					СуммаСписанияНаСебестоимость = СуммаОстаток - СуммаРаспределения;
					СуммаОстаток = СуммаРаспределения;
					Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  И СуммаСписанияНаСебестоимость > 0 Тогда
						
						КоэфСписанияНУ = СуммаСписанияНаСебестоимость / (СуммаОстаток + СуммаСписанияНаСебестоимость);
						
						СуммаНУСписанияНаСебестоимость 		= 0;
						НДСВходящийСписанияНаСебестоимость 	= 0;
						НДСКредитСписанияНаСебестоимость 	= 0;
						
						СуммаНУОстаток 		= СуммаНУОстаток - СуммаНУСписанияНаСебестоимость;
						НДСВходящийОстаток	= НДСВходящийОстаток - НДСВходящийСписанияНаСебестоимость;
						НДСКредитОстаток 	= НДСКредитОстаток - НДСКредитСписанияНаСебестоимость;
						
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЕсли; 
	
	Если ВсегоБазаРаспределения = 0 И СуммаСписанияНаСебестоимость = 0 Тогда
		Если НомерПередела = ВсегоПеределов Тогда
			ОбщегоНазначения.Сообщение("Сумма базы коэф. по " + СпособРаспределения + " равна 0, для:
				|Подразделение: " + ВыборкаПоЗатратам.Подразделение + "
				|Статья затрат: " + ВыборкаПоЗатратам.СтатьяЗатрат + "
				|Заказ: " + ВыборкаПоЗатратам.Заказ + "
				|Номенклатурная группа: " + ВыборкаПоЗатратам.НоменклатурнаяГруппа, СтатусСообщения.Важное);
			Возврат;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэф, 2);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		МассивСуммаНУ     = ОбщегоНазначения.РаспределитьПропорционально(СуммаНУОстаток, МассивКоэф, 2);	
		МассивНДСВходящий = ОбщегоНазначения.РаспределитьПропорционально(НДСВходящийОстаток, МассивКоэф, 2);
		МассивНДСКредит   = ОбщегоНазначения.РаспределитьПропорционально(НДСКредитОстаток, МассивКоэф, 2);
	Иначе
		МассивСуммаНУ     = Неопределено;
		МассивНДСВходящий = Неопределено;
		МассивНДСКредит   = Неопределено;
	КонецЕсли; 
		
	Индекс = 0;
	ВыборкаБаза.Сбросить();
	Пока ВыборкаБаза.Следующий() Цикл
		
		Сумма       = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
			СуммаНУ     = 0;
			НДСВходящий = 0;
			НДСКредит   = 0;
		Иначе
			СуммаНУ     = ?(МассивСуммаНУ = Неопределено, 0, МассивСуммаНУ[Индекс]);
			НДСВходящий = ?(МассивНДСВходящий = Неопределено, 0, МассивНДСВходящий[Индекс]);
			НДСКредит   = ?(МассивНДСКредит = Неопределено, 0, МассивНДСКредит[Индекс]);
		КонецЕсли; 	
			
		Если Сумма <> 0
			ИЛИ СуммаНУ     <> 0
			ИЛИ НДСВходящий <> 0
			ИЛИ НДСКредит   <> 0
			Тогда
		
			// Формирование приходных движений по регистру "Незавершенное производство".
			СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				ВыборкаБаза,
				ВыборкаПоЗатратам.СтатьяЗатрат,
				ХарактерЗатрат,
				ХарактерЗатрат, // Затрата 
				Неопределено, // ХарактеристикаЗатраты
				Неопределено, // СерияЗатраты
				НомерПередела,
				0, // Количество
				Сумма,
				СуммаНУ, 
				НДСВходящий, 
				НДСКредит, 
				ВидДвиженияНакопления.Приход,
				НаборЗаписейНезавершенноеПроизводство,
				ВыборкаБаза, 
				ВыборкаПоЗатратам // в НЗП НУ движения идут по разрезам затрат (не факту)
				);
								
			// Формирование движений по регистру бухгалтерии.	
			Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
					
				СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					СтруктураШапкиДокумента.ВидОтраженияВУчете,
					ВыборкаПоЗатратам,
					ВыборкаБаза,
					ВыборкаПоЗатратам.СтатьяЗатрат,
					ХарактерЗатрат,
					Сумма,
					СуммаНУ,
					РегистрБухгалтерииНаборЗаписей
					);
					
			КонецЕсли;
					
			// Распределение затрат на выпуск продукции по базе.
			РаспределитьЗатратыНаВыпускПродукции(
				СтруктураШапкиДокумента,
				ВыборкаБазаНаПродукцию,
				ВыборкаБаза,
				ВыборкаПоЗатратам,
				ХарактерЗатрат,
				СпособРаспределения,
				Неопределено, //СтатусМатериальныхЗатрат
				НомерПередела,
				Сумма,
				СуммаНУ,
				НДСВходящий,
				НДСКредит,
				НаборЗаписейНезавершенноеПроизводство,
				НаборЗаписейЗатратыНаВыпуск,
				РегистрБухгалтерииНаборЗаписей,
				НаборЗаписейКорректировкиНалоговыйУчет,
				"общепроизводственных затрат"
				);
		КонецЕсли;
				
		Индекс = Индекс + 1;
			
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
		РасходСуммаНУ     = 0;
		РасходНДСВходящий = 0;
		РасходНДСКредит   = 0;
	Иначе
		РасходСуммаНУ     = СуммаНУОстаток + СуммаНУСписанияНаСебестоимость;
		РасходНДСВходящий = НДСВходящийОстаток + НДСВходящийСписанияНаСебестоимость;
		РасходНДСКредит   = НДСКредитОстаток + НДСКредитСписанияНаСебестоимость;
	КонецЕсли;	
	
	// Формирование движений по регистру "Затраты".
	СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат(
		СтруктураШапкиДокумента,
		ВыборкаПоЗатратам,
		ХарактерЗатрат,
		СуммаОстаток + СуммаСписанияНаСебестоимость,
		РасходСуммаНУ,
		РасходНДСВходящий,
		РасходНДСКредит,
		ВидДвиженияНакопления.Расход,
		НаборЗаписейЗатраты
	);
		
	// Формирование движений по регистру "Затраты (обороты)".
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		РаспределитьСписанныеЗатратыПоПроектам(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаРаспределениеПоПроектам,
			СуммаОстаток,
			НаборЗаписейЗатратыОбороты
		);
		
	КонецЕсли;
	
	// Списание нераспределенных постоянных ОПЗ на себестоимость
	Если (СуммаСписанияНаСебестоимость <> 0 ИЛИ СуммаНУСписанияНаСебестоимость <> 0) И НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		СформироватьДвиженияПоРегиструБухгалтерииСписаниеЗатратНаСебестоимость(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоЗатратам.СтатьяЗатрат,
			СуммаСписанияНаСебестоимость,
			СуммаНУСписанияНаСебестоимость,
			РегистрБухгалтерииНаборЗаписей
		);
			
	КонецЕсли;
	

КонецПроцедуры // РаспределитьЗатратыВНезавершенноеПроизводство()

// Процедура производит распределение затрат по рассчитанной базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат выполнения запроса по затратам
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат выполнения запроса по базе распределения
//	РезультатЗапросаБазаРаспределенияНаПродукцию - РезультатЗапроса - Результат запроса по базе распределения на продукцию
//	РезультатЗапросаРаспределениеПоПроектам - РезультатЗапроса - Результат запроса по коэффициентам распределения по проектам
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	МинимальныйПередел - Число - Минимальный номер передела
//	ВсегоПеределов - Число - Общее количество переделов
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейЗатраты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты"
//	НаборЗаписейЗатратыОбороты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты (обороты)"
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьЗатратыПоБазеРаспределения(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	РезультатЗапросаБазаРаспределенияНаПродукцию,
	РезультатЗапросаРаспределениеПоПроектам,
	НомерПередела,
	МинимальныйПередел,
	ВсегоПеределов,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейЗатраты,
	НаборЗаписейЗатратыОбороты,
	НаборЗаписейЗатратыНаВыпуск,
	РегистрБухгалтерииНаборЗаписей,
	НаборЗаписейКорректировкиНалоговыйУчет = Неопределено
	)
	
	// Получим построитель запроса по базе распределения.
	ПостроительЗапроса = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределения
		);
		
	ПостроительЗапросаНаПродукцию = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределенияНаПродукцию
		);
		
	// Выберем способы распределения затрат.
	ВыборкаПоСпособамРаспределенияЗатрат = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выбрать();
	
	// Выберем коэффициенты распределения по проектам.
	ВыборкаРаспределениеПоПроектам = РезультатЗапросаРаспределениеПоПроектам.Выбрать();
	
	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		СуммаОстаток = ВыборкаПоЗатратам.СуммаОстаток;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СуммаНУОстаток     = ВыборкаПоЗатратам.СуммаНУОстаток;	
			НДСВходящийОстаток = ВыборкаПоЗатратам.НДСВходящийОстаток;	
			НДСКредитОстаток   = ВыборкаПоЗатратам.НДСКредитОстаток;	
		Иначе
			СуммаНУОстаток     = 0;	
			НДСВходящийОстаток = 0;	
			НДСКредитОстаток   = 0;	
		КонецЕсли; 
		
		// Пропускаем строки с пустой суммой.
		Если СуммаОстаток = 0 
			И СуммаНУОстаток     = 0
			И НДСВходящийОстаток = 0
			И НДСКредитОстаток   = 0
			Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		// Определим способ и характер распределения затрат.
		СпособРаспределения = Неопределено;
		ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка();
		РаспределятьНаПодчиненныеПодразделения = Ложь;
		
		РаспределятьЗатраты = ПолучитьСпособИХарактерРаспределенияЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоСпособамРаспределенияЗатрат,
			Ложь, // ОпределятьПоХарактеруЗатрат
			Истина, // ПроверятьУказаниеСпособаРаспределения
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения
			);
			
		Если Не РаспределятьЗатраты Тогда
			Продолжить;		
		КонецЕсли; 
		
		// Затраты с характером распределения "Не учитывать подразделение" распределяем только на первом переделе
		// по всем подразделениям.
		Если ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение
		   И НомерПередела <> МинимальныйПередел Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(ВыборкаПоЗатратам.СчетУчета, ВыборкаПоЗатратам.СтатьяЗатрат);
		Иначе
			ХарактерЗатрат = ВыборкаПоЗатратам.ХарактерЗатрат;
				
		КонецЕсли;
		
		РаспределитьЗатратыВНезавершенноеПроизводство(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаРаспределениеПоПроектам,
			ХарактерЗатрат,
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения,
			НомерПередела,
			ВсегоПеределов,
			СуммаОстаток,
			СуммаНУОстаток,
			НДСВходящийОстаток,
			НДСКредитОстаток,
			ПостроительЗапроса,
			ПостроительЗапросаНаПродукцию,
			НаборЗаписейНезавершенноеПроизводство,
			НаборЗаписейЗатраты,
			НаборЗаписейЗатратыОбороты,
			НаборЗаписейЗатратыНаВыпуск,
			РегистрБухгалтерииНаборЗаписей,
			НаборЗаписейКорректировкиНалоговыйУчет
		);
		
	КонецЦикла; 
	
КонецПроцедуры // РаспределитьЗатратыПоБазеРаспределения()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРУ "НЕЗАВЕРШЕННОЕ ПРОИЗВОДСТВО"

// Функция формирует текст запроса по регистру "Незавершенное производство".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоОстаткамЗатратВНезавершенномПроизводстве()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета НезавершенноеПроизводство.Организация,
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	НезавершенноеПроизводство.Затрата КАК ХарактерЗатрат,
	|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|	//ДляБухУчета  НезавершенноеПроизводство.НалоговоеНазначение,
	|	
	|	//ДляБухУчета  НезавершенноеПроизводство.СтоимостьНУНачальныйОстаток КАК СуммаНУОстаток,
	|	//ДляБухУчета  НезавершенноеПроизводство.НДСВходящийНачальныйОстаток КАК НДСВходящийОстаток,
	|	//ДляБухУчета  НезавершенноеПроизводство.НДСКредитНачальныйОстаток   КАК НДСКредитОстаток,
	|	НезавершенноеПроизводство.СтоимостьНачальныйОстаток КАК СуммаОстаток
	|	
	|ИЗ
	|	РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.ОстаткиИОбороты(&НачГраница, &КонГраница, , ,
	|		Затрата В (&ХарактерЗатрат)
	|		//ДляРеглУчета И Организация = &Организация
	|		) КАК НезавершенноеПроизводство
	|		
	|ГДЕ
	|	НезавершенноеПроизводство.СтоимостьРасход = 0
	|	//ДляБухУчета И НезавершенноеПроизводство.СтоимостьНУРасход = 0
	|	//ДляБухУчета И НезавершенноеПроизводство.НДСВходящийРасход = 0
	|	//ДляБухУчета И НезавершенноеПроизводство.НДСКредитРасход = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета НезавершенноеПроизводство.Организация,
	|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
	|	//ДляБухУчета  НезавершенноеПроизводство.НалоговоеНазначение,
	|	НезавершенноеПроизводство.Подразделение,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	НезавершенноеПроизводство.Затрата,
	|	НезавершенноеПроизводство.СтатьяЗатрат
	|";
		
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоОстаткамЗатратВНезавершенномПроизводстве()

// Функция формирует запрос по регистру "Незавершенное производство".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//
// Возвращаемое значение:
//   Запрос – Запрос по регистру "Незавершенное производство".
//
Функция СформироватьЗапросПоОстаткамЗатратВНезавершенномПроизводстве(
	СтруктураШапкиДокумента,
	СпособРасчета
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоОстаткамЗатратВНезавершенномПроизводстве();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	МассивХарактерЗатрат = Новый Массив;
	МассивХарактерЗатрат.Добавить(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	МассивХарактерЗатрат.Добавить(Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
	МассивХарактерЗатрат.Добавить(Перечисления.ХарактерЗатрат.АдминистративныеРасходы);	
	МассивХарактерЗатрат.Добавить(Перечисления.ХарактерЗатрат.БракВПроизводстве);
	
	Запрос.УстановитьПараметр("ХарактерЗатрат", МассивХарактерЗатрат);
	
	Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПеределам);
	Иначе
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПодразделениям);
	КонецЕсли;

	Возврат Запрос;

КонецФункции // СформироватьЗапросПоОстаткамЗатратВНезавершенномПроизводстве()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ ОСТАТКА РАСХОДОВ В НЗП НА ВЫПУСК ПРОДУКЦИИ

// Процедура производит распределение затрат на выпуск продукции по рассчитанной базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат выполнения запроса по затратам
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат выполнения запроса по базе распределения
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьОстатокКосвенныхРасходовНаВыпускПродукции(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейЗатратыНаВыпускПродукции,
	РегистрБухгалтерииНаборЗаписей,
	НаборЗаписейКорректировкиНалоговыйУчет
	)
	
	// Получим построитель запроса по базе распределения.
	ПостроительЗапроса = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределения
		);
		
	ВыборкаПоСпособамРаспределенияЗатрат = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выбрать();
		
	МассивКоэф = Новый Массив;
	
	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		// Определим способ и характер распределения затрат.
		СпособРаспределения = Неопределено;
		
		РаспределятьЗатраты = ПолучитьСпособИХарактерРаспределенияЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоСпособамРаспределенияЗатрат,
			Истина, // ОпределятьПоХарактеруЗатрат
			Истина, // ПроверятьУказаниеСпособаРаспределения
			СпособРаспределения
			);
			
		Если Не РаспределятьЗатраты Тогда
			Продолжить;
		КонецЕсли;
		
		// Отберем строки базы распределения.
		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			0, // НомерПередела
			СпособРаспределения,
			Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка(),
			Ложь, // РаспределятьНаПодчиненныеПодразделения
			Истина, // ОпределятьПоСчетуУчету
			Ложь, // ОтборПоПродукции
			ПостроительЗапроса
			);
		
		Если УстановленНовыйОтбор Тогда
			ПостроительЗапроса.Выполнить();
		КонецЕсли;
		РезультатЗапросаБаза = ПостроительЗапроса.Результат;
										
		ВсегоБазаРаспределения = 0;
		ВсегоБазаРаспределенияНЗП = 0;
		МассивКоэф.Очистить();
		
		ВыборкаБаза = РезультатЗапросаБаза.Выбрать();
		Пока ВыборкаБаза.Следующий() Цикл
			
			Если ВыборкаБаза.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
				МассивКоэф.Добавить(0);
				ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.База + ВыборкаБаза.БазаОстатокНЗП;
			Иначе
				МассивКоэф.Добавить(ВыборкаБаза.База);
				ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаБаза.База;
				ВсегоБазаРаспределенияНЗП = ВсегоБазаРаспределенияНЗП + ВыборкаБаза.БазаОстатокНЗП;
			КонецЕсли;
													
		КонецЦикла;

		Если ВсегоБазаРаспределения = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Определим остаток затрат для распределения.
		СуммаОстаток = ВыборкаПоЗатратам.СуммаОстаток;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СуммаНУОстаток 		= ВыборкаПоЗатратам.СуммаНУОстаток;
			НДСВходящийОстаток 	= ВыборкаПоЗатратам.НДСВходящийОстаток;
			НДСКредитОстаток 	= ВыборкаПоЗатратам.НДСКредитОстаток;
		Иначе
			СуммаНУОстаток 		= 0;
			НДСВходящийОстаток 	= 0;
			НДСКредитОстаток 	= 0;
		КонецЕсли; 
		
		СуммаНаВыпуск = 0;
		СуммаНУНаВыпуск 	= 0;
		НДСВходящийНаВыпуск = 0;
		НДСКредитНаВыпуск 	= 0;
		
		РассчитатьОстатокСуммыЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВсегоБазаРаспределения,
			ВсегоБазаРаспределенияНЗП,
			СуммаОстаток,
			СуммаНУОстаток,
			НДСВходящийОстаток,
			НДСКредитОстаток,
			СуммаНаВыпуск,
			СуммаНУНаВыпуск,
			НДСВходящийНаВыпуск,
			НДСКредитНаВыпуск
			);
		
		МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаНаВыпуск, МассивКоэф, 2);
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСуммаНУ 	  = ОбщегоНазначения.РаспределитьПропорционально(СуммаНУНаВыпуск, МассивКоэф, 2);
			МассивНДСВходящий = ОбщегоНазначения.РаспределитьПропорционально(НДСВходящийНаВыпуск, МассивКоэф, 2);
			МассивНДСКредит   = ОбщегоНазначения.РаспределитьПропорционально(НДСКредитНаВыпуск, МассивКоэф, 2);
		Иначе
			МассивСуммаНУ 	  = Неопределено;
			МассивНДСВходящий = Неопределено;
			МассивНДСКредит   = Неопределено;
		КонецЕсли; 
		 
		Индекс = 0;
		ВыборкаБаза.Сбросить();
		Пока ВыборкаБаза.Следующий() Цикл
			
			Сумма       = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			СуммаНУ     = ?(МассивСуммаНУ = Неопределено, 0, МассивСуммаНУ[Индекс]);
			НДСВходящий = ?(МассивНДСВходящий = Неопределено, 0, МассивНДСВходящий[Индекс]);
			НДСКредит	= ?(МассивНДСКредит = Неопределено, 0, МассивНДСКредит[Индекс]);
			
			
			// Формирование движений по регистру "Затраты на выпуск".
			СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ВыборкаБаза,
				ВыборкаПоЗатратам.СтатьяЗатрат,
				ВыборкаПоЗатратам.ХарактерЗатрат,
				ВыборкаПоЗатратам.СтатусМатериальныхЗатрат,
				?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, ВыборкаПоЗатратам.НалоговоеНазначение, Неопределено), // НалоговоеНазначениеЗатрат 
				Сумма,
				СуммаНУ,
				НДСВходящий,
				НДСКредит,
				НаборЗаписейЗатратыНаВыпускПродукции
			);
				
			// Формирование движений по регистру бухгалтерии.	
			Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
			   И (ВыборкаПоЗатратам.НоменклатурнаяГруппа <> ВыборкаБаза.НоменклатурнаяГруппа 
			     ИЛИ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И ВыборкаПоЗатратам.НалоговоеНазначение <> ВыборкаБаза.НалоговоеНазначениеПоФакту))
			   Тогда
				
				СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					СтруктураШапкиДокумента.ВидОтраженияВУчете,
					ВыборкаПоЗатратам,
					ВыборкаБаза,
					ВыборкаПоЗатратам.СтатьяЗатрат,
					ВыборкаПоЗатратам.ХарактерЗатрат,
					Сумма,
					СуммаНУ,
					РегистрБухгалтерииНаборЗаписей
				);
				
			КонецЕсли;
				
				
			Индекс = Индекс + 1;
			
			// корректировки использования в НУ
			Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				Продолжить;	
			КонецЕсли; 
			
			СтруктураКорректировкаНДСКредит = НалоговыйУчет.ПолучитьСуммуКорректировкиНалоговогоКредита(
				ВыборкаПоЗатратам.НалоговоеНазначение,
				ВыборкаБаза.НалоговоеНазначениеПоФакту,
				НДСВходящий,
				НДСКредит,
				Сумма // СтоимостьБУ
			);
			
			Если НЕ СтруктураКорректировкаНДСКредит.ЕстьКорректировки Тогда
				Продолжить;
			КонецЕсли; 	
				
			КорректировкаНДСКредит        = СтруктураКорректировкаНДСКредит.КорректировкаНДСКредит;
			НДСКредитПоФакту              = СтруктураКорректировкаНДСКредит.НДСКредитПоФакту;
			СуммаКорректировкиСтоимость   = СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимость;
			СуммаКорректировкиСтоимостьНУ = СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимостьНУ;
			
			КодОперацииКорректировкаНУ = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкиНУ;
			
			// Формирование движений по регистру КорректировкиЗатратыНалоговыйУчет
			СформироватьДвиженияПоРегиструКорректировкиНалоговыйУчет(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ВыборкаБаза,
				НДСКредит,
				НДСКредитПоФакту,
				ВидДвиженияНакопления.Приход,
				НаборЗаписейКорректировкиНалоговыйУчет
			);
			
			// Проводки БУ по корректировке налогового кредита
			// отcторнируем стоимость БУ и НУ на сумму корректировки НДС по проводкам БУ
			// сторнируем только когда восстанавливаем НДС
			Если СтруктураКорректировкаНДСКредит.ВосстановлениеНДС Тогда
				
				СформироватьПроводкуПоКорректировкеИспользования(
					СтруктураШапкиДокумента,
					ВыборкаБаза,
					СуммаКорректировкиСтоимость,
					СуммаКорректировкиСтоимостьНУ,
					РегистрБухгалтерииНаборЗаписей,
					"НЗП",
					ВыборкаПоЗатратам.СтатьяЗатрат
				);
					
			КонецЕсли;
			
			// Сумма корректировки налогового кредита должна скорректировать Затраты на выпуск продукции (БУ)
			// Формирование движений по регистру "Затраты на выпуск (БУ)".
			СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукцииРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ВыборкаБаза,
				ВыборкаПоЗатратам.СтатьяЗатрат,
				ВыборкаПоЗатратам.ХарактерЗатрат,
				ВыборкаПоЗатратам.СтатусМатериальныхЗатрат,
				ВыборкаПоЗатратам.НалоговоеНазначение,  // НалоговоеНазначениеЗатрат
				СуммаКорректировкиСтоимость,   // Сумма
				СуммаКорректировкиСтоимостьНУ, // СуммаНУ
				0,                       // НДСВходящий
				КорректировкаНДСКредит,  // НДСКредит
				НаборЗаписейЗатратыНаВыпускПродукции,
				КодОперацииКорректировкаНУ,  // принудительная установка кода операции
				ВыборкаПоЗатратам.СчетУчета // принудительная установка счета учета по БУ
			);
			
		КонецЦикла;
		
		// Формирование движений по регистру "Незавершенное производство".
		СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоЗатратам.СтатьяЗатрат,
			ВыборкаПоЗатратам.ХарактерЗатрат,
			ВыборкаПоЗатратам.ХарактерЗатрат,  // Затрата 
			Неопределено, // ХарактеристикаЗатраты
			Неопределено, // СерияЗатраты
			0, // НомерПередела
			0, // Количество
			СуммаНаВыпуск,
			СуммаНУНаВыпуск, 
			НДСВходящийНаВыпуск, 
			НДСКредитНаВыпуск, 
			ВидДвиженияНакопления.Расход,
			НаборЗаписейНезавершенноеПроизводство,
			ВыборкаБаза, // СтрокаВыборкиПоЗатратамНаВыпуск
			ВыборкаПоЗатратам // СтрокаВыборкиПоЗатратам
			);
	
	КонецЦикла; 
	
КонецПроцедуры // РаспределитьОстатокКосвенныхРасходовНаВыпускПродукции()

// Процедура распределения затрат на выпуск продукции.
//
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат запроса по базе распределения
//	СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//  СтруктураДвижений - Структура - Наборы движений по регистрам.
//
Процедура РаспределениеОстаткаКосвенныхРасходовВПроизводстве(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	СпособРасчета,
	СтруктураДвижений
	)
	
	ЗапросПоЗатратам = СформироватьЗапросПоОстаткамЗатратВНезавершенномПроизводстве(
		СтруктураШапкиДокумента,
		СпособРасчета
		);
	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	Если Не РезультатЗапросаПоЗатратам.Пустой()
	   И Не РезультатЗапросаПоСпособамРаспределенияЗатрат.Пустой()
	   И Не РезультатЗапросаБазаРаспределения.Пустой() Тогда	
		
		РаспределитьОстатокКосвенныхРасходовНаВыпускПродукции(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоЗатратам,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			СтруктураДвижений.ДвиженияНЗП,
			СтруктураДвижений.ДвиженияЗатратыНаВыпуск,
			СтруктураДвижений.Операция,
			?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураДвижений.ДвиженияКорректировкиНЗП_НУ, Неопределено)
		);
		
	КонецЕсли;
		
	Если СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияНЗП.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураДвижений.ДвиженияКорректировкиНЗП_НУ.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияКорректировкиНЗП_НУ.Записать(Ложь);
	КонецЕсли; 

КонецПроцедуры // РаспределениеОстаткаКосвенныхРасходовВПроизводстве()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ПО РЕГИСТРУ "БРАК В ПРОИЗВОДСТВЕ"

// Функция формирует текст запроса по регистру "Брак в производстве".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоБракуВПроизводстве()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета БракВПроизводстве.Организация,
	|	//ДляРеглУчета БракВПроизводстве.СчетУчета,
	|	//ДляБухУчета  БракВПроизводстве.НалоговоеНазначение,
	|	БракВПроизводстве.Подразделение,
	|	БракВПроизводстве.СтатьяЗатрат,
	|	БракВПроизводстве.НоменклатурнаяГруппа,
	|	БракВПроизводстве.Заказ,
	|	БракВПроизводстве.Продукция,
	|	БракВПроизводстве.ХарактеристикаПродукции,
	|	БракВПроизводстве.СерияПродукции,
	|	
	|	//ДляБухУчета  (БракВПроизводстве.СуммаНУОстаток
	|	//ДляБухУчета  	- ЕСТЬNULL(Инвентаризация.СуммаНУ, 0)
	|	//ДляБухУчета  ) КАК СуммаНУОстаток,
	|
	|	//ДляБухУчета  (БракВПроизводстве.НДСВходящийОстаток
	|	//ДляБухУчета  	- ЕСТЬNULL(Инвентаризация.НДСВходящий, 0)
	|	//ДляБухУчета  ) КАК НДСВходящийОстаток,
	|
	|	//ДляБухУчета  (БракВПроизводстве.НДСКредитОстаток
	|	//ДляБухУчета  	- ЕСТЬNULL(Инвентаризация.НДСКредит, 0)
	|	//ДляБухУчета  ) КАК НДСКредитОстаток,
	|
	|	(БракВПроизводстве.СуммаОстаток
	|		- ЕСТЬNULL(Инвентаризация.Сумма, 0)
	|	) КАК СуммаОстаток
	|
	|ИЗ
	|	РегистрНакопления.БракВПроизводстве%СуффиксУчета%.Остатки(&КонГраница,
	|		Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|		//ДляРеглУчета И Организация = &Организация
	|		) КАК БракВПроизводстве
	|	
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			//ДляУпрУчета Инвентаризация.Ссылка.Подразделение КАК Подразделение,
	|			//ДляРеглУчета Инвентаризация.Ссылка.ПодразделениеОрганизации КАК Подразделение,
	|
	|			Инвентаризация.СтатьяЗатрат,
	|			Инвентаризация.НоменклатурнаяГруппа,
	|			ВЫБОР КОГДА Инвентаризация.Заказ <> &ПустойЗаказПокупателя И
	|						Инвентаризация.Заказ <> &ПустойЗаказНаПроизводство ТОГДА
	|				Инвентаризация.Заказ
	|			ИНАЧЕ
	|				Неопределено
	|			КОНЕЦ КАК Заказ,
	|			Инвентаризация.Продукция,
	|			Инвентаризация.СерияПродукции,
	|			Инвентаризация.ХарактеристикаПродукции,
	|
	|			//ДляБухУчета Инвентаризация.СчетЗатрат КАК СчетЗатрат,
	|			//ДляМеждУчета Инвентаризация.СчетЗатрат КАК СчетЗатрат,
	|
	|			//ДляБухУчета Инвентаризация.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначение,
	|
	|			//ДляБухУчета Сумма(Инвентаризация.СуммаНал) КАК СуммаНУ,
	|			//ДляБухУчета Сумма(Инвентаризация.СуммаНДС) КАК НДСВходящий,
	|			//ДляБухУчета Сумма(Инвентаризация.СуммаНДСКредит) КАК НДСКредит,
	|
	|			//ДляУпрУчета Сумма(Инвентаризация.Сумма) КАК Сумма
	|			//ДляБухУчета Сумма(Инвентаризация.СуммаРегл) КАК Сумма
	|			//ДляМеждУчета Сумма(Инвентаризация.СуммаРегл) КАК Сумма
	|		ИЗ
	|			Документ.ИнвентаризацияБракаВПроизводстве.ЗатратыПоБракуВПроизводстве КАК Инвентаризация
	|		ГДЕ	
	|			Инвентаризация.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|			И НЕ Инвентаризация.Ссылка.ПометкаУдаления
	|			//ДляРеглУчета И Инвентаризация.Ссылка.Организация = &Организация
	|
	|			//ДляУпрУчета И Инвентаризация.Ссылка.ОтражатьВУправленческомУчете
	|			//ДляБухУчета И Инвентаризация.Ссылка.ОтражатьВБухгалтерскомУчете
	|
	|		СГРУППИРОВАТЬ ПО
	|			//ДляУпрУчета Инвентаризация.Ссылка.Подразделение,
	|			//ДляРеглУчета Инвентаризация.Ссылка.ПодразделениеОрганизации,
	|			//ДляБухУчета Инвентаризация.СчетЗатрат,
	|			//ДляМеждУчета Инвентаризация.СчетЗатрат,
	|			//ДляБухУчета Инвентаризация.НалоговоеНазначениеДоходовИЗатрат,
	|			Инвентаризация.СтатьяЗатрат,
	|			Инвентаризация.НоменклатурнаяГруппа,
	|			Инвентаризация.Заказ,
	|			Инвентаризация.Продукция,
	|			Инвентаризация.СерияПродукции,
	|			Инвентаризация.ХарактеристикаПродукции
	|		) КАК Инвентаризация
	|	ПО
	|		БракВПроизводстве.Подразделение = Инвентаризация.Подразделение
	|		И БракВПроизводстве.СтатьяЗатрат = Инвентаризация.СтатьяЗатрат
	|		И БракВПроизводстве.НоменклатурнаяГруппа = Инвентаризация.НоменклатурнаяГруппа
	|		И БракВПроизводстве.Заказ = Инвентаризация.Заказ
	|		И БракВПроизводстве.Продукция = Инвентаризация.Продукция
	|		И БракВПроизводстве.ХарактеристикаПродукции = Инвентаризация.ХарактеристикаПродукции
	|		И БракВПроизводстве.СерияПродукции = Инвентаризация.СерияПродукции
	|		//ДляРеглУчета И БракВПроизводстве.СчетУчета = Инвентаризация.СчетЗатрат
	|		//ДляБухУчета И БракВПроизводстве.НалоговоеНазначение = Инвентаризация.НалоговоеНазначение
	|
	|УПОРЯДОЧИТЬ ПО
	|	СуммаОстаток,
	|	//ДляРеглУчета БракВПроизводстве.Организация,
	|	//ДляРеглУчета БракВПроизводстве.СчетУчета,
	|	//ДляБухУчета  БракВПроизводстве.НалоговоеНазначение,
	|	БракВПроизводстве.Подразделение,
	|	БракВПроизводстве.НоменклатурнаяГруппа,
	|	БракВПроизводстве.Заказ,
	|	БракВПроизводстве.Продукция,
	|	БракВПроизводстве.ХарактеристикаПродукции,
	|	БракВПроизводстве.СерияПродукции,
	|	БракВПроизводстве.СтатьяЗатрат
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоБракуВПроизводстве()

// Функция формирует запрос по регистру "Брак в производстве".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//
// Возвращаемое значение:
//   Запрос – Запрос по регистру "Брак в производстве".
//
Функция СформироватьЗапросПоБракуВПроизводстве(
	СтруктураШапкиДокумента,
	СпособРасчета
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоБракуВПроизводстве();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", 		Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказНаПроизводство", 	Документы.ЗаказНаПроизводство.ПустаяСсылка());
	
	Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПеределам);
	Иначе
		Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.мВидыПодразделенийДляРасчетаПоПодразделениям);
	КонецЕсли;
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоБракуВПроизводстве()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ РАСХОДОВ ПО БРАКУ В ПРОИЗВОДСТВЕ

// Процедура производит распределение расходов по браку по рассчитанной базе распределения.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат выполнения запроса по затратам
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат выполнения запроса по базе распределения
//	РезультатЗапросаБазаРаспределенияНаПродукцию - РезультатЗапроса - Результат запроса по базе распределения на продукцию
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	ВсегоПеределов - Число - Общее количество переделов
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство"
//	НаборЗаписейБракВПроизводстве - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Брак в производстве"
//	НаборЗаписейЗатратыНаВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск"
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура РаспределитьРасходыПоБракуВПроизводствеПоБазеРаспределения(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	РезультатЗапросаБазаРаспределенияНаПродукцию,
	НомерПередела,
	ВсегоПеределов,
	НаборЗаписейНезавершенноеПроизводство,
	НаборЗаписейБракВПроизводстве,
	НаборЗаписейЗатратыНаВыпуск,
	РегистрБухгалтерииНаборЗаписей,
	НаборЗаписейКорректировкиНалоговыйУчет = Неопределено
	)
	
	// Получим построитель запроса по базе распределения.
	ПостроительЗапроса = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределения
		);
		
	ПостроительЗапросаНаПродукцию = ПолучитьПостроительЗапросаПоБазеРаспределения(
		СтруктураШапкиДокумента,
		РезультатЗапросаБазаРаспределенияНаПродукцию
		);
		
	ВыборкаПоСпособамРаспределенияЗатрат = РезультатЗапросаПоСпособамРаспределенияЗатрат.Выбрать();

	МассивКоэф = Новый Массив;
	
	ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве;
	
	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		СуммаОстаток = ВыборкаПоЗатратам.СуммаОстаток;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СуммаНУОстаток     = ВыборкаПоЗатратам.СуммаНУОстаток;	
			НДСВходящийОстаток = ВыборкаПоЗатратам.НДСВходящийОстаток;	
			НДСКредитОстаток   = ВыборкаПоЗатратам.НДСКредитОстаток;	
		Иначе
			СуммаНУОстаток     = 0;	
			НДСВходящийОстаток = 0;	
			НДСКредитОстаток   = 0;	
		КонецЕсли; 
		
		// Пропускаем строки с пустой суммой.
		Если СуммаОстаток = 0
			И СуммаНУОстаток     = 0
			И НДСВходящийОстаток = 0
			И НДСКредитОстаток   = 0
			Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		// Определим способ и характер распределения затрат.
		СпособРаспределения = Неопределено;
		ХарактерРаспределенияЗатрат = Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка();
		РаспределятьНаПодчиненныеПодразделения = Ложь;
		
		РаспределятьЗатраты = ПолучитьСпособИХарактерРаспределенияЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			ВыборкаПоСпособамРаспределенияЗатрат,
			Ложь, // ОпределятьПоХарактеруЗатрат
			Истина, // ПроверятьУказаниеСпособаРаспределения
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения
			);
			
		Если Не РаспределятьЗатраты Тогда
			Продолжить;		
		КонецЕсли; 
		
		// Отберем строки базы распределения.
		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			НомерПередела,
			СпособРаспределения,
			Перечисления.ХарактерРаспределенияЗатрат.УчитыватьПодразделение,
			РаспределятьНаПодчиненныеПодразделения,
			Ложь, // ОпределятьПоСчетуУчету
			Истина, // ОтборПоПродукции
			ПостроительЗапроса
			);

		Если УстановленНовыйОтбор Тогда
			ПостроительЗапроса.Выполнить();
		КонецЕсли;
		РезультатЗапросаБаза = ПостроительЗапроса.Результат;
		
		// Отберем строки базы распределения на продукцию.
		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоБазеРаспределения(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			НомерПередела,
			СпособРаспределения,
			ХарактерРаспределенияЗатрат,
			РаспределятьНаПодчиненныеПодразделения,
			Ложь, // ОпределятьПоСчетуУчету
			Истина, // ОтборПоПродукции
			ПостроительЗапросаНаПродукцию
			);

		Если УстановленНовыйОтбор Тогда	
			ПостроительЗапросаНаПродукцию.Выполнить();
		КонецЕсли;	
		РезультатЗапросаБазаНаПродукцию = ПостроительЗапросаНаПродукцию.Результат;
		ВыборкаБазаНаПродукцию = РезультатЗапросаБазаНаПродукцию.Выбрать();
										
		ВсегоБазаРаспределения = 0;
		
		МассивКоэф.Очистить();
		
		Если ЗначениеЗаполнено(ВыборкаПоЗатратам.Продукция) Тогда
			ВыборкаБаза = РезультатЗапросаБазаНаПродукцию.Выбрать();
			УчитыватьБазуНаПодчиненные = Ложь;
		Иначе
			ВыборкаБаза = РезультатЗапросаБаза.Выбрать();
			УчитыватьБазуНаПодчиненные = Истина;
		КонецЕсли;
		
		Пока ВыборкаБаза.Следующий() Цикл
			
			МассивКоэф.Добавить(ВыборкаБаза.БазаПриход * ?(УчитыватьБазуНаПодчиненные, ВыборкаБаза.БазаНаПодчиненные, 1));

			ВсегоБазаРаспределения = ВсегоБазаРаспределения + (ВыборкаБаза.БазаПриход * ?(УчитыватьБазуНаПодчиненные, ВыборкаБаза.БазаНаПодчиненные, 1));
			
		КонецЦикла;
		
		Если ВсегоБазаРаспределения = 0 Тогда
			Если НомерПередела = ВсегоПеределов Тогда
				ОбщегоНазначения.Сообщение("Сумма базы коэф. по " + СпособРаспределения + " равна 0, для:
						|Подразделение: " + ВыборкаПоЗатратам.Подразделение + "
						|Статья затрат: " + ВыборкаПоЗатратам.СтатьяЗатрат + "
						|Заказ: " + ВыборкаПоЗатратам.Заказ + "
						|Номенклатурная группа: " + ВыборкаПоЗатратам.НоменклатурнаяГруппа + "
						|Продукция: " + ВыборкаПоЗатратам.Продукция + ", " + ВыборкаПоЗатратам.ХарактеристикаПродукции + ", " + ВыборкаПоЗатратам.СерияПродукции + "
						|", СтатусСообщения.Важное);
				
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаОстаток, МассивКоэф, 2);
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			МассивСуммаНУ     = ОбщегоНазначения.РаспределитьПропорционально(СуммаНУОстаток, МассивКоэф, 2);	
			МассивНДСВходящий = ОбщегоНазначения.РаспределитьПропорционально(НДСВходящийОстаток, МассивКоэф, 2);
			МассивНДСКредит   = ОбщегоНазначения.РаспределитьПропорционально(НДСКредитОстаток, МассивКоэф, 2);
		КонецЕсли; 
		
		Индекс = 0;
		ВыборкаБаза.Сбросить();
		Пока ВыборкаБаза.Следующий() Цикл
			
			Сумма             = ?(МассивСумма = Неопределено, 0, МассивСумма[Индекс]);
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				СуммаНУ     = ?(МассивСуммаНУ = Неопределено, 0, МассивСуммаНУ[Индекс]);
				НДСВходящий = ?(МассивНДСВходящий = Неопределено, 0, МассивНДСВходящий[Индекс]);
				НДСКредит   = ?(МассивНДСКредит = Неопределено, 0, МассивНДСКредит[Индекс]);
			Иначе
				СуммаНУ     = 0;
				НДСВходящий = 0;
				НДСКредит   = 0;
			КонецЕсли; 
			
			Если Сумма <> 0
				ИЛИ СуммаНУ <> 0
				ИЛИ НДСВходящий <> 0
				ИЛИ НДСКредит   <> 0
				Тогда
				
				// Формирование приходных движений по регистру "Незавершенное производство".
				СформироватьДвиженияПоРегиструНезавершенноеПроизводствоРаспределениеЗатрат(
					СтруктураШапкиДокумента,
					ВыборкаБаза,
					ВыборкаПоЗатратам.СтатьяЗатрат,
					ХарактерЗатрат,
					ХарактерЗатрат, // Затрата 
					Неопределено, // ХарактеристикаЗатраты
					Неопределено, // СерияЗатраты
					НомерПередела,
					0,   // Количество
					Сумма,
					СуммаНУ,
					НДСВходящий, // НДСВходящий
					НДСКредит, // НДСКредит
					ВидДвиженияНакопления.Приход,
					НаборЗаписейНезавершенноеПроизводство,
					ВыборкаБаза,
					ВыборкаПоЗатратам
					);
					
				// Формирование движений по регистру бухгалтерии.	
				Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда	
					
					СформироватьДвиженияПоРегиструБухгалтерииРаспределениеЗатрат(
						СтруктураШапкиДокумента,
						СтруктураШапкиДокумента.ВидОтраженияВУчете,
						ВыборкаПоЗатратам,
						ВыборкаБаза,
						ВыборкаПоЗатратам.СтатьяЗатрат,
						ХарактерЗатрат,
						Сумма,
						СуммаНУ,
						РегистрБухгалтерииНаборЗаписей
						);
						
				КонецЕсли;
					
				// Распределение затрат на выпуск продукции по базе.
				РаспределитьЗатратыНаВыпускПродукции(
					СтруктураШапкиДокумента,
					ВыборкаБазаНаПродукцию,
					ВыборкаБаза,
					ВыборкаПоЗатратам,
					ХарактерЗатрат,
					СпособРаспределения,
					Неопределено, //СтатусМатериальныхЗатрат
					НомерПередела,
					Сумма,
					СуммаНУ,
					НДСВходящий,
					НДСКредит,
					НаборЗаписейНезавершенноеПроизводство,
					НаборЗаписейЗатратыНаВыпуск,
					РегистрБухгалтерииНаборЗаписей,
					НаборЗаписейКорректировкиНалоговыйУчет,
					"затрат на брак" // СодержаниеПроводкиКорректировка
					);
					
			КонецЕсли;
				
			Индекс = Индекс + 1;
			
		КонецЦикла;
			
		// Формирование движений по регистру "Брак в производстве".
		СформироватьДвиженияПоРегиструБракВПроизводствеРаспределениеЗатрат(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам,
			СуммаОстаток,
			СуммаНУОстаток,
			НДСВходящийОстаток,
			НДСКредитОстаток,
			ВидДвиженияНакопления.Расход,
			НаборЗаписейБракВПроизводстве
		);
	
	КонецЦикла; 
	
КонецПроцедуры // РаспределитьРасходыПоБракуВПроизводствеПоБазеРаспределения()

// Процедура распределения расходов по браку в производстве.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат запроса по базе распределения
//	РезультатЗапросаБазаРаспределенияНаПродукцию - РезультатЗапроса - Результат запроса по базе распределения на продукцию
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	ВсегоПеределов - Число - Общее количество переделов
//  СтруктураДвижений - Структура - Наборы движений по регистрам.
//
Процедура РаспределениеРасходовПоБракуВПроизводстве(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	РезультатЗапросаБазаРаспределенияНаПродукцию,
	СпособРасчета,
	НомерПередела,
	ВсегоПеределов,
	СтруктураДвижений
	)
	
	ЗапросПоЗатратам = СформироватьЗапросПоБракуВПроизводстве(СтруктураШапкиДокумента, СпособРасчета);
	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	Если Не РезультатЗапросаПоЗатратам.Пустой()
	   И Не РезультатЗапросаПоСпособамРаспределенияЗатрат.Пустой()
	   И Не РезультатЗапросаБазаРаспределения.Пустой() Тогда
		
		РаспределитьРасходыПоБракуВПроизводствеПоБазеРаспределения(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоЗатратам,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			РезультатЗапросаБазаРаспределенияНаПродукцию,
			НомерПередела,
			ВсегоПеределов,
			СтруктураДвижений.ДвиженияНЗП,
			СтруктураДвижений.ДвиженияБракВПроизводстве,
			СтруктураДвижений.ДвиженияЗатратыНаВыпуск,
			СтруктураДвижений.Операция,
			?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураДвижений.ДвиженияКорректировкиБракВПроизводстве_НУ, Неопределено)
			);
		
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияБракВПроизводстве.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияБракВПроизводстве.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияНЗП.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураДвижений.ДвиженияКорректировкиБракВПроизводстве_НУ.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияКорректировкиБракВПроизводстве_НУ.Записать(Ложь);
	КонецЕсли;
	
	
КонецПроцедуры // РаспределениеРасходовПоБракуВПроизводстве()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ РАСХОДОВ ПО СПОСОБУ РАСПРЕДЕЛЕНИЯ

// Процедура производит распределение общепроизводственных, административных расходов и расходов по браку в производстве.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	СтруктураТаблицДвижений - Структура - Структура таблиц регистров
//	ДиректКостинг - Булево - Признак применения метода "Директ - костинг"
//  СпособРасчета - Перечисления.СпособыРасчетаСебестоимостиПродукции - Текущий способ расчета себестоимости
//
Процедура РаспределениеКосвенныхРасходов(
	СтруктураШапкиДокумента, 
	СтруктураТаблицДвижений, 
	ДиректКостингОбщепроизводственныеЗатраты, 
	СпособРасчета
	) Экспорт
	
	ДополнитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента);
	
	НачальныйПередел = 0;
	КонечныйПередел = 0;
	ВсегоПеределов = 0;
	МинимальныйПередел = 0;
	
	ПолучитьНачальныйИКонечныйНомерПередела(
		СтруктураШапкиДокумента,
		СпособРасчета,
		НачальныйПередел,
		КонечныйПередел,
		ВсегоПеределов,
		МинимальныйПередел
		);
		
	// Формирование запроса по незавершенному производству.
	ЗапросПоНезавершенномуПроизводству = СформироватьЗапросПоНезавершенномуПроизводству(
		СтруктураШапкиДокумента,
		СпособРасчета
		);
		
	// Формирование запроса по затратам на выпуск.
	ЗапросПоЗатратамНаВыпуск = СформироватьЗапросПоЗатратамНаВыпуск(
		СтруктураШапкиДокумента,
		СпособРасчета
		);
		
	// Формирование запроса по выпуску продукции и затратам на выпуск.		
	ЗапросПоВыпускуПродукцииИЗатратамНаВыпуск = СформироватьЗапросПоВыпускуПродукцииИЗатратамНаВыпуск(
		СтруктураШапкиДокумента, 
		СпособРасчета,
		Истина, // КосвенныеЗатраты
		Ложь // ЗатратыВстречногоВыпуска
		);
		
	// Формирование запроса по направлением выпуска продукции.
	ЗапросПоВыпускуПродукции = СформироватьЗапросПоНаправлениямВыпускаПродукции(
		СтруктураШапкиДокумента, 
		СпособРасчета,
		Истина, // КосвенныеЗатраты
		Ложь // ЗатратыВстречногоВыпуска
		);
		
	ЗапросПоИсключаемымНаправлениямВыпуска = СформироватьЗапросПоИсключаемымНаправлениямВыпуска(
		СтруктураШапкиДокумента, 
		Истина, // КосвенныеЗатраты
		Ложь // ЗатратыВстречногоВыпуска
		);
		
	// Формирование запроса по коэффициентам распределения по проектам.
	ЗапросРаспределениеПоПроектам = СформироватьЗапросРаспределениеПоПроектам(
		СтруктураШапкиДокумента
		);	
	РезультатЗапросаРаспределениеПоПроектам = ЗапросРаспределениеПоПроектам.Выполнить();
	
	МассивХарактеровРаспределения = Новый Массив;
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение);
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.УчитыватьПодразделение);
	МассивХарактеровРаспределения.Добавить(Перечисления.ХарактерРаспределенияЗатрат.ПустаяСсылка());
	
	// Сформируем запрос по способам распределения статей затрат.	
	ЗапросПоСпособамРаспределенияЗатрат = СформироватьЗапросПоСпособамРаспределенияЗатрат(
		СтруктураШапкиДокумента,
		МассивХарактеровРаспределения,
		Ложь, // ФормироватьВременнуюТаблицу
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	РезультатЗапросаПоСпособамРаспределенияЗатрат = ЗапросПоСпособамРаспределенияЗатрат.Выполнить();
	
	// Сформируем запрос по базе распределения затрат.
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаБазаРаспределенияЗатрат();
	ЗапросБазаРаспределения = СформироватьЗапросПоБазеРаспределенияЗатрат(СтруктураШапкиДокумента, ТекстЗапросаСКомментариями, Истина, НачальныйПередел);
	РезультатЗапросаБазаРаспределения = ЗапросБазаРаспределения.Выполнить();
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаБазаРаспределенияЗатратНаПродукцию();
	ЗапросБазаРаспределенияНаПродукцию = СформироватьЗапросПоБазеРаспределенияЗатрат(СтруктураШапкиДокумента, ТекстЗапросаСКомментариями, Истина, НачальныйПередел);
	РезультатЗапросаБазаРаспределенияНаПродукцию = ЗапросБазаРаспределенияНаПродукцию.Выполнить();
	
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента);
	
	// Распределение остатка расходов из незавершенного производства на выпуск продукции.
	РаспределениеОстаткаКосвенныхРасходовВПроизводстве(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоСпособамРаспределенияЗатрат,
		РезультатЗапросаБазаРаспределенияНаПродукцию,
		СпособРасчета,
		СтруктураДвижений
		);
		
	Для ТекНомПередела = НачальныйПередел По КонечныйПередел Цикл
		
		Если ТекНомПередела <> 0 Тогда
			ОбщегоНазначения.Сообщение("- Распределение производственных расходов (передел № " + ТекНомПередела + "/" + ВсегоПеределов + ")");
		КонецЕсли;
		
		РаспределениеПроизводственныхРасходов(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			РезультатЗапросаБазаРаспределенияНаПродукцию,
			СпособРасчета,
			ТекНомПередела,
			ВсегоПеределов,
			СтруктураДвижений
			);
			
				
		Если ТекНомПередела <> 0 Тогда	
			ОбщегоНазначения.Сообщение("- Распределение общепроизводственных и административных расходов (передел № " + ТекНомПередела + "/" + ВсегоПеределов + ")");
		КонецЕсли;
		
		РаспределениеОбщепроизводственныхИАдминистративныхРасходов(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			РезультатЗапросаБазаРаспределенияНаПродукцию,
			РезультатЗапросаРаспределениеПоПроектам,
			ТекНомПередела,
			МинимальныйПередел,
			ВсегоПеределов,
			СтруктураДвижений
			);
			
		Если ТекНомПередела <> 0 Тогда
			ОбщегоНазначения.Сообщение("- Распределение расходов по браку в производстве (передел № " + ТекНомПередела + "/" + ВсегоПеределов + ")");
		КонецЕсли;
		
		РаспределениеРасходовПоБракуВПроизводстве(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			РезультатЗапросаБазаРаспределенияНаПродукцию,
			СпособРасчета,
			ТекНомПередела,
			ВсегоПеределов,
			СтруктураДвижений
			);
			
		Если ТекНомПередела <> 0 Тогда
			ОбщегоНазначения.Сообщение("- Корректировка выпуска продукции (передел № " + ТекНомПередела + "/" + ВсегоПеределов + ")");
		КонецЕсли;
		
		// Списание затрат из незавершенного производства на выпуск продукции.
		СписаниеЗатратИзНезавершенногоПроизводстваНаВыпускПродукции(
			СтруктураШапкиДокумента,
			ЗапросПоНезавершенномуПроизводству,
			ЗапросПоЗатратамНаВыпуск,
			ТекНомПередела,
			Истина, // РасчетКосвенныхЗатрат
			Ложь, // РасчетЗатратВстречногоВыпуска
			СтруктураДвижений
		);
		
		Если ТекНомПередела <> 0 Тогда
			ОбщегоНазначения.Сообщение("- Корректировка движений по продукции (передел № " + ТекНомПередела + "/" + ВсегоПеределов + ")");
		КонецЕсли;
		
		ТабТоваров = Новый ТаблицаЗначений;
		ТабТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТабТоваров.Колонки.Добавить("ДокументОприходования");
		ТабТоваров.Колонки.Добавить("СчетУчета");
		
		КорректировкаДвиженийПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ЗапросПоВыпускуПродукцииИЗатратамНаВыпуск,
			ЗапросПоВыпускуПродукции,
			ЗапросПоИсключаемымНаправлениямВыпуска,
			РезультатЗапросаРаспределениеПоПроектам,
			ТекНомПередела,
			Истина, // КосвенныеЗатраты
			Ложь, // ЗатратыВстречногоВыпуска
			СтруктураДвижений,
			ТабТоваров
			);
			
		Если ТекНомПередела <> 0 Тогда
			ОбщегоНазначения.Сообщение("- Корректировка стоимости партий (передел № " + ТекНомПередела + "/" + ВсегоПеределов + ")...");
		КонецЕсли;
		
		КорректировкаСтоимости.КорректировкаСписания(
			СтруктураШапкиДокумента.мНачДата, 
			СтруктураШапкиДокумента.мКонДата, 
			ТабТоваров, 
			СтруктураШапкиДокумента.Ссылка,
			СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.ВидОтраженияВУчете,
			Ложь, // НеСписыватьНаПостоянныеЗатраты (данная переменная больше не используется)
			, // ДопПараметры
			ТекНомПередела = КонечныйПередел,
			Истина, // ВстречныйВыпуск
			Истина // РасчетСебестоимостиВыпуска
		);
			
	КонецЦикла;
	
КонецПроцедуры // РаспределениеКосвенныхРасходов()

// Функция проверяет заполнение счета учета затрат.
//
// Параметры
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по затратам
//	СчетСписания - ПланСчетовСсылка.Хозрасчетный или ПланСчетовСсылка.Налоговый - Счет списания затрат
//	Сумма - Число - сумма затрат. Используется для формирования сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево – 	Истина - проверка прошла успешно,
//				Ложь - обнаружены ошибки заполнения счетов. 
//
Функция ПроверитьСчетУчетаИСчетСписания(
	СтрокаВыборки,
	СчетСписания,
	Сумма
	)
	
	ПроверкаПройдена = Истина;
	
	Если Не ЗначениеЗаполнено(СтрокаВыборки.СчетУчета) Тогда
		   
		ОбщегоНазначения.Сообщение("Не указан счет учета затрат:
		|Организация: " + СтрокаВыборки.Организация + "
		|Подразделение: " + СтрокаВыборки.Подразделение + "
		|Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + "
		|Заказ: " + СтрокаВыборки.Заказ + "
		|Проводка по распределению затрат на сумму: " + Сумма + " не сформирована!
		|", СтатусСообщения.Важное);
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетСписания) Тогда
		   
		ОбщегоНазначения.Сообщение("Не определен счет списания затрат:
		|Организация: " + СтрокаВыборки.Организация + "
		|Подразделение: " + СтрокаВыборки.Подразделение + "
		|Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + "
		|Заказ: " + СтрокаВыборки.Заказ + "
		|Проводка по распределению затрат на сумму: " + Сумма + " не сформирована!
		|", СтатусСообщения.Важное);
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
	
	Возврат ПроверкаПройдена;

КонецФункции // ПроверитьСчетУчетаИСчетСписания()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СПИСАНИЯ ЗАТРАТ

// Функция получает счет списания затрат.
//
// Параметры:
//	СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//
// Возвращаемое значение:
// 	ПланыСчетовСсылка.Хозрасчетный - Счет списания затрат
//
Функция ПолучитьСчетСписанияЗатрат(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	ХарактерЗатрат
	)
	
	СчетСписания = Неопределено;
	

	СчетСписания = ПланыСчетов.Хозрасчетный.РезультатОперационнойДеятельности;
	
	
	Возврат СчетСписания;

КонецФункции // ПолучитьСчетСписанияЗатрат()

////////////////////////////////////////////////////////////////////////////////

// Процедура сворачивает движения по регистрам.
//
Процедура СвернутьДвиженияПоРегистрам(СтруктураШапкиДокумента) Экспорт
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураИмен = Новый Структура("Операция");
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
	РегистрБухгалтерииНаборЗаписей = СтруктураДвижений.Операция;
	
	РегистрБухгалтерииНаборЗаписей.Прочитать();
	
	СвернутьТаблицуДвиженийРегистраБухгалтерии(РегистрБухгалтерииНаборЗаписей);
	
	Если РегистрБухгалтерииНаборЗаписей.Модифицированность() Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СвернутьДвиженияПоРегистрам()

// Процедура сворачивает движения по регистру бухгалтерии
//
// Параметры:
//	РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Новый набор записей регистра бухгалтерии
//
Процедура СвернутьТаблицуДвиженийРегистраБухгалтерии(
	РегистрБухгалтерииНаборЗаписей
	)
	
	ИзмеренияСтр = "Период, Регистратор, Активность, СчетДт, СчетКт";
	МетаРег = РегистрБухгалтерииНаборЗаписей.Метаданные();
	Для Каждого Измерение Из МетаРег.Измерения Цикл
		Если Измерение.Балансовый Тогда
			ИзмеренияСтр = ИзмеренияСтр + ", " + Измерение.Имя;
		Иначе
			ИзмеренияСтр = ИзмеренияСтр + ", " + Измерение.Имя + "Дт";
			ИзмеренияСтр = ИзмеренияСтр + ", " + Измерение.Имя + "Кт";
		КонецЕсли;
	КонецЦикла;
	
	СубконтоСтр = "";
	Для К = 1 По МетаРег.ПланСчетов.МаксКоличествоСубконто Цикл
		СубконтоСтр = СубконтоСтр + ", ВидСубконтоДт" + К + ", СубконтоДт" + К;
		СубконтоСтр = СубконтоСтр + ", ВидСубконтоКт" + К + ", СубконтоКт" + К;
	КонецЦикла;
	
	Для Каждого Измерение Из МетаРег.Реквизиты Цикл
		ИзмеренияСтр = ИзмеренияСтр + ", " + Измерение.Имя;
	КонецЦикла;
	
	РесурсыСтр = "";
	Для Каждого Ресурс Из МетаРег.Ресурсы Цикл
		Если Ресурс.Балансовый Тогда
			РесурсыСтр = РесурсыСтр + ", " + Ресурс.Имя;
		Иначе
			РесурсыСтр = РесурсыСтр + ", " + Ресурс.Имя + "Дт";
			РесурсыСтр = РесурсыСтр + ", " + Ресурс.Имя + "Кт";
		КонецЕсли;
	КонецЦикла;
	РесурсыСтр = Сред( РесурсыСтр, 3);
	
	ТаблицаРегистраБухгалтерии = РегистрБухгалтерииНаборЗаписей.Выгрузить();
	ТаблицаРегистраБухгалтерии.Свернуть(ИзмеренияСтр + СубконтоСтр, РесурсыСтр);
	
	СтруктРесурсы = Новый Структура(РесурсыСтр);
	СтруктПоиска  = Новый Структура;
	Для Каждого Ресурс Из СтруктРесурсы Цикл
		СтруктПоиска.Вставить(Ресурс.Ключ, 0);
	КонецЦикла;
	МассивПустСтрок = ТаблицаРегистраБухгалтерии.НайтиСтроки(СтруктПоиска);
	Для К = 0 По МассивПустСтрок.ВГраница() Цикл
		ТаблицаРегистраБухгалтерии.Удалить(МассивПустСтрок[К]);
	КонецЦикла;
	
	СтруктПоля = Новый Структура(ИзмеренияСтр + ", " + РесурсыСтр);
	
	РегистрБухгалтерииНаборЗаписей.Очистить();
	РегистрБухгалтерииНаборЗаписей.Записать();
	
	Для Каждого Проводка Из ТаблицаРегистраБухгалтерии Цикл
		
		НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
		Для Каждого Поле Из СтруктПоля Цикл
			НоваяПроводка[Поле.Ключ] = Проводка[Поле.Ключ];
		КонецЦикла;
		Для К = 1 По Проводка.СчетДт.ВидыСубконто.Количество() Цикл
			НоваяПроводка.СубконтоДт.Вставить(Проводка["ВидСубконтоДт" + К], Проводка["СубконтоДт" + К]);
		КонецЦикла;
		Для К = 1 По Проводка.СчетКт.ВидыСубконто.Количество() Цикл
			НоваяПроводка.СубконтоКт.Вставить(Проводка["ВидСубконтоКт" + К], Проводка["СубконтоКт" + К]);
		КонецЦикла;
		
	КонецЦикла;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
	
КонецПроцедуры // СвернутьТаблицуДвиженийРегистраБухгалтерии()


// Процедура формирует проводку по списаню затрат на себестоимость
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - Статья затрат
//  Сумма - Число - Сумма проводки
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьПроводкуПоСписаниюЗатратНаСебестоимость(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтатьяЗатрат,
	Сумма,
	СуммаНУ,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если Сумма = 0 И СуммаНУ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
	НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
	НоваяПроводка.Активность = Истина;
	НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СодержаниеПроводки = "Списание общепроизводственных расходов на себестоимость продаж";
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
		СодержаниеПроводки = "Списание административных расходов на себестоимость продаж";
	КонецЕсли;
	
	НоваяПроводка.Содержание = СодержаниеПроводки;
	НоваяПроводка.Сумма = Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		НоваяПроводка.СчетДт = ПланыСчетов.Хозрасчетный.СебестоимостьРеализованнойГотовойПродукции;
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
		НоваяПроводка.СчетДт = ПланыСчетов.Международный.СебестоимостьПродаж;
	КонецЕсли;

	НоваяПроводка.СчетКт = СтрокаВыборки.СчетУчета;
	
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "Подразделения") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборки.Подразделение);
	КонецЕсли;	
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "НоменклатурныеГруппы") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
	КонецЕсли;
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "СтатьиЗатрат") Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтатьяЗатрат);
	КонецЕсли;	
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьПроводкуПоСписаниюЗатратНаСебестоимость()

// Функция проверяет заполнение счета учета затрат.
//
// Параметры
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	Сумма - Число - сумма затрат на выпуск продукции. Используется для формирования сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево – 	Истина - проверка прошла успешно,
//				Ложь - обнаружены ошибки заполнения счетов. 
//
Функция ПроверитьСчетаУчетаСписаниеЗатратНаСебестоимость(
	СтрокаВыборки, 
	Сумма
	)
	
	ПроверкаПройдена = Истина;
	
	Если Не ЗначениеЗаполнено(СтрокаВыборки.СчетУчета) Тогда
		   
		Сообщить("Не указан счет учета затрат:
			|Организация: " + СтрокаВыборки.Организация + "
			|Подразделение: " + СтрокаВыборки.Подразделение + "
			|Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + "
			|Заказ: " + СтрокаВыборки.Заказ + "
			|Проводка по списанию затрат на сумму: " + Сумма + " не сформирована!
			|", СтатусСообщения.Важное);
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
		
	Возврат ПроверкаПройдена;

КонецФункции // ПроверитьСчетаУчетаСписаниеЗатратНаСебестоимость()

// Процедура формирует движения по списанию затрат на себестоимость по регистру бухгалтерии.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - Статья затрат
//  Сумма - Число - Сумма затрат
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьДвиженияПоРегиструБухгалтерииСписаниеЗатратНаСебестоимость(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтатьяЗатрат,
	Сумма,
	СуммаНУ,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если ПроверитьСчетаУчетаСписаниеЗатратНаСебестоимость(СтрокаВыборки, Сумма) Тогда
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВМеждународномУчете Тогда
		 
			СформироватьПроводкуПоСписаниюЗатратНаСебестоимость(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СтатьяЗатрат,
				Сумма,
				СуммаНУ,
				РегистрБухгалтерииНаборЗаписей
			);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструБухгалтерииСписаниеЗатратНаСебестоимость()

// Процедура распределения общепроизводственных и административных затрат.
//
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  РезультатЗапросаПоСпособамРаспределенияЗатрат - РезультатЗапроса - Результат запроса по способам распределения затрат
//	РезультатЗапросаБазаРаспределения - РезультатЗапроса - Результат запроса по базе распределения
//	РезультатЗапросаБазаРаспределенияНаПродукцию - РезультатЗапроса - Результат запроса по базе распределения на продукцию
//	РезультатЗапросаРаспределениеПоПроектам - РезультатЗапроса - Результат запроса по коэффициентам распределения по проектам
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	МинимальныйПередел - Число - Минимальный номер передела
//	ВсегоПеределов - Число - Общее количество переделов
//  СтруктураДвижений - Структура - Наборы движений по регистрам.
//
Процедура РаспределениеОбщепроизводственныхИАдминистративныхРасходов(	
	СтруктураШапкиДокумента,
	РезультатЗапросаПоСпособамРаспределенияЗатрат,
	РезультатЗапросаБазаРаспределения,
	РезультатЗапросаБазаРаспределенияНаПродукцию,
	РезультатЗапросаРаспределениеПоПроектам,
	НомерПередела,
	МинимальныйПередел,
	ВсегоПеределов,
	СтруктураДвижений
	)
	
	ЗапросПоЗатратам = СформироватьЗапросПоЗатратам(
		СтруктураШапкиДокумента,
		Перечисления.ХарактерЗатрат.ПустаяСсылка()
		);
		
	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	Если Не РезультатЗапросаПоЗатратам.Пустой()
	   И Не РезультатЗапросаПоСпособамРаспределенияЗатрат.Пустой()
	   И Не РезультатЗапросаБазаРаспределения.Пустой() Тогда	
		
		РаспределитьЗатратыПоБазеРаспределения(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоЗатратам,
			РезультатЗапросаПоСпособамРаспределенияЗатрат,
			РезультатЗапросаБазаРаспределения,
			РезультатЗапросаБазаРаспределенияНаПродукцию,
			РезультатЗапросаРаспределениеПоПроектам,
			НомерПередела,
			МинимальныйПередел,
			ВсегоПеределов,
			СтруктураДвижений.ДвиженияНЗП,
			СтруктураДвижений.ДвиженияЗатраты,
			СтруктураДвижений.ДвиженияЗатратыОбороты,
			СтруктураДвижений.ДвиженияЗатратыНаВыпуск,
			СтруктураДвижений.Операция
			);
		
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатраты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатраты.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.ДвиженияЗатратыОбороты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыОбороты.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияНЗП.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
	
КонецПроцедуры // РаспределениеОбщепроизводственныхИОбщехозяйственныхРасходов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ БУХГАЛТЕРИИ

// Процедура формирует проводку списания затрат
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	СчетСписания - ПланСчетовСсылка.Хозрасчетный - Счет списания затрат
//	НоменклатурнаяГруппа - СправочникСсылка.НоменклатурныеГруппы - Номенклатурная группа
//  ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//  Сумма - Число - Сумма проводки
//  Сумма - Число - Сумма проводки по НУ
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьПроводкуСписаниеЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СчетСписания,
	НоменклатурнаяГруппа,
	ХарактерЗатрат,
	Сумма,
	СуммаНУ,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если Сумма = 0 И СуммаНУ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
	НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
	НоваяПроводка.Активность = Истина;
	НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы Тогда
		СодержаниеПроводки = "Списание прочих операционных расходов";
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт Тогда
		
		СодержаниеПроводки = "Списание расходов на сбыт";
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
		СодержаниеПроводки = "Списание общепроизводственных расходов";
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
		СодержаниеПроводки = "Списание административных расходов";
	Иначе
		СодержаниеПроводки = "";
		ОбщегоНазначения.СообщитьОбОшибке("Не определено содержание операции для характера затрат: """ + ХарактерЗатрат + """.
					|Процедура <СформироватьПроводкуСписаниеЗатрат>");
		
	КонецЕсли;
	
	НоваяПроводка.Содержание = СодержаниеПроводки;
	НоваяПроводка.Сумма = Сумма;
	
	НоваяПроводка.СчетДт = СчетСписания;
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", НоменклатурнаяГруппа);
	
	НоваяПроводка.НалоговоеНазначениеДт = СтрокаВыборки.НалоговоеНазначение;
	НоваяПроводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеДт, СуммаНУ);
										
	НоваяПроводка.СчетКт = СтрокаВыборки.СчетУчета;
	
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "Подразделения") Тогда
	  	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборки.Подразделение);
	КонецЕсли;
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "НоменклатурныеГруппы") Тогда
	 	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
	КонецЕсли;
	Если ЗаполнятьОборотныеСубконто(СтруктураШапкиДокумента) ИЛИ Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "СтатьиЗатрат") Тогда
	  	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатрат);
	КонецЕсли;
	
	НоваяПроводка.НалоговоеНазначениеКт = СтрокаВыборки.НалоговоеНазначение;
	НоваяПроводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеКт, СуммаНУ);
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
		РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьПроводкуСписаниеЗатрат()

// Процедура формирует движения списания затрат по регистру бухгалтерии.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	СчетСписания - ПланСчетовСсылка.Хозрасчетный или ПланСчетовСсылка.Налоговый - Счет списания затрат
//	НоменклатурнаяГруппа - СправочникСсылка.НоменклатурныеГруппы - Номенклатурная группа
//  ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//  Сумма - Число - Сумма затрат
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьДвиженияПоРегиструБухгалтерииСписаниеЗатрат(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	СтрокаВыборки,
	СчетСписания,
	НоменклатурнаяГруппа,
	ХарактерЗатрат,
	Сумма,
	СуммаНУ,
	РегистрБухгалтерииНаборЗаписей
	) Экспорт
	
	Если ПроверитьСчетУчетаИСчетСписания(СтрокаВыборки, СчетСписания, Сумма) Тогда
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
			
			СформироватьПроводкуСписаниеЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СчетСписания,
				НоменклатурнаяГруппа,
				ХарактерЗатрат,
				Сумма,
				СуммаНУ,
				РегистрБухгалтерииНаборЗаписей
			);

		ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете Тогда
			
			СформироватьПроводкуСписаниеЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СчетСписания,
				НоменклатурнаяГруппа,
				ХарактерЗатрат,
				Сумма,
				0, // СуммаНУ
				РегистрБухгалтерииНаборЗаписей
			);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструБухгалтерииСписаниеЗатрат()

// Процедура списания затрат
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	РезультатЗапросаПоЗатратам - РезультатЗапроса - Результат запроса по затратам
//	РезультатЗапросаРаспределениеПоПроектам - РезультатЗапроса - Результат запроса по распределению по проектам
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//  СтруктураДвижений - Структура - Наборы движений по регистрам.
//
Процедура СписатьЗатраты(	
	СтруктураШапкиДокумента,
	РезультатЗапросаПоЗатратам,
	РезультатЗапросаРаспределениеПоПроектам,
	ХарактерЗатрат,
	СтруктураДвижений
	)
	
	ВыборкаРаспределениеПоПроектам = РезультатЗапросаРаспределениеПоПроектам.Выбрать();
	
	// Получим счет списания затрат.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СчетСписания = ПолучитьСчетСписанияЗатрат(
			СтруктураШапкиДокумента,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			ХарактерЗатрат
		);
	Иначе	
		СчетСписания = Неопределено;
	КонецЕсли;	
	
	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		СуммаОстаток = ВыборкаПоЗатратам.СуммаОстаток;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СуммаНУОстаток = ВыборкаПоЗатратам.СуммаНУОстаток;
			НДСВходящийОстаток = ВыборкаПоЗатратам.НДСВходящийОстаток;
			НДСКредитОстаток = ВыборкаПоЗатратам.НДСКредитОстаток;
		Иначе
			СуммаНУОстаток = 0;
			НДСВходящийОстаток = 0;
			НДСКредитОстаток = 0;
		КонецЕсли; 
		 
		
		// Пропускаем строки с пустой суммой.
		Если СуммаОстаток = 0
			И СуммаНУОстаток = 0
			И НДСВходящийОстаток = 0
			И НДСКредитОстаток = 0
			Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы И НЕ СтруктураШапкиДокумента.ДиректКостингОбщепроизводственныеЗатраты Тогда
				// в БУ не списываем нераспределенные ОПЗ, если они должны распределятся, но сумму по НУ списываем всегда
				СуммаОстаток = 0;
			КонецЕсли; 
			
			// Формирование движений по регистру "Затраты".
			СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ХарактерЗатрат,
				СуммаОстаток,
				СуммаНУОстаток,
				НДСВходящийОстаток,
				НДСКредитОстаток,
				ВидДвиженияНакопления.Расход,
				СтруктураДвижений.ДвиженияЗатраты
			);
			
			// Формирование проводки по списанию затрат
			СформироватьДвиженияПоРегиструБухгалтерииСписаниеЗатрат(
				СтруктураШапкиДокумента,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
				ВыборкаПоЗатратам,
				СчетСписания,
				ВыборкаПоЗатратам.НоменклатурнаяГруппа,
				ХарактерЗатрат,
				СуммаОстаток,
				СуммаНУОстаток,
				СтруктураДвижений.Операция
			);
		Иначе
			
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы И НЕ СтруктураШапкиДокумента.ДиректКостингОбщепроизводственныеЗатраты Тогда
				// в УУ не списываем нераспределенные ОПЗ, если они должны распределятся
				СуммаОстаток = 0;
			КонецЕсли; 
			
			// Формирование движений по регистру "Затраты".
			СформироватьДвиженияПоРегиструЗатратыРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ХарактерЗатрат,
				СуммаОстаток,
				СуммаНУОстаток,
				НДСВходящийОстаток,
				НДСКредитОстаток,
				ВидДвиженияНакопления.Расход,
				СтруктураДвижений.ДвиженияЗатраты
			);
		КонецЕсли;
			
		// Формирование движений по регистру "Затраты (обороты)".
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			
			РаспределитьСписанныеЗатратыПоПроектам(
				СтруктураШапкиДокумента,
				ВыборкаПоЗатратам,
				ВыборкаРаспределениеПоПроектам,
				СуммаОстаток,
				СтруктураДвижений.ДвиженияЗатратыОбороты
			);
			
		КонецЕсли;
				
	КонецЦикла; 
	
КонецПроцедуры // СписатьЗатраты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРА СПИСАНИЯ ЗАТРАТ

// Процедура списания издержек обращения и коммерческих расходов.
// Процедура списания общепроизводственных, административных затрат, расходов на сбыт и прочих операционных затрат (директ-костингом)
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Текущий характер затрат
//
Процедура СписаниеЗатратДиректКостинг(
	СтруктураШапкиДокумента,
	ХарактерЗатрат
	) Экспорт
	
	// Формирование запроса по затратам.
	ЗапросПоЗатратам = СформироватьЗапросПоЗатратам(
		СтруктураШапкиДокумента, 
		ХарактерЗатрат
	);
		
	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	Если РезультатЗапросаПоЗатратам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование запроса по коэффициентам распределения по проектам.
	ЗапросРаспределениеПоПроектам = СформироватьЗапросРаспределениеПоПроектам(
		СтруктураШапкиДокумента
		);	
	РезультатЗапросаРаспределениеПоПроектам = ЗапросРаспределениеПоПроектам.Выполнить();
		
	СтруктураИмен = Новый Структура("
		|Затраты, 
		|ЗатратыОбороты,
		|Операция
		|");
		
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
	
	// Спишем затраты 
	СписатьЗатраты(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоЗатратам,
		РезультатЗапросаРаспределениеПоПроектам,
		ХарактерЗатрат,
		СтруктураДвижений
	);
		
	Если СтруктураДвижений.ДвиженияЗатраты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатраты.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.ДвиженияЗатратыОбороты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатратыОбороты.Записать(Ложь);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
	
КонецПроцедуры // СписаниеЗатратДиректКостинг()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ ТЗР

Функция СформироватьЗапросПоНачальнымОстаткамПартийТоваров(СтруктураШапкиДокумента)
	
   ТекстЗапроса = "
   |ВЫБРАТЬ
   |	ПартииТоваровНаСкладах.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
   |	//ДляБухУчета  ПартииТоваровНаСкладах.НалоговоеНазначение,
   |
   |    //ДляБухУчета  СУММА(ПартииТоваровНаСкладах.СтоимостьНУОстаток) КАК СуммаНУНачальныйОстаток,
   |    //ДляБухУчета  СУММА(ПартииТоваровНаСкладах.НДСВходящийОстаток) КАК НДСВходящийНачальныйОстаток,
   |    //ДляБухУчета  СУММА(ПартииТоваровНаСкладах.НДСКредитОстаток) КАК НДСКредитНачальныйОстаток,
   |
   |    СУММА(ПартииТоваровНаСкладах.СтоимостьОстаток) КАК СуммаНачальныйОстаток
   |ИЗ
   |	РегистрНакопления.ПартииТоваровНаСкладах%СуффиксУчета%.Остатки(&НачГраница,
   |		Номенклатура.НоменклатурнаяГруппа В (&НоменклатурныеГруппыЗатрат)
   |		//ДляРеглУчета И Организация = &Организация
   |		//ДляБухУчета  И СчетУчета В ИЕРАРХИИ (&МассивСчетовЗапасов)
   |        ) КАК ПартииТоваровНаСкладах
   |
   |СГРУППИРОВАТЬ ПО 
   |	//ДляБухУчета  ПартииТоваровНаСкладах.НалоговоеНазначение,
   |	ПартииТоваровНаСкладах.Номенклатура.НоменклатурнаяГруппа
   |
   |УПОРЯДОЧИТЬ ПО  
   |	ПартииТоваровНаСкладах.Номенклатура.НоменклатурнаяГруппа
   |
   |";
   
   	Запрос = Новый Запрос;
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(ТекстЗапроса, СтруктураШапкиДокумента.ВидОтраженияВУчете);

	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачГраница",  СтруктураШапкиДокумента.мНачДата);
	
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
															 
	Возврат Запрос;
															   
КонецФункции // СформироватьЗапросПоНачальнымОстаткамПартийТоваров()

Функция СформироватьЗапросПоПоступлениюПартийТоваров(СтруктураШапкиДокумента)
	
   ТекстЗапроса = "
   |ВЫБРАТЬ
   |	ПартииТоваровНаСкладах.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
   |	//ДляБухУчета ПартииТоваровНаСкладах.НалоговоеНазначение, 
   |
   |	//ДляБухУчета СУММА(ПартииТоваровНаСкладах.СтоимостьНУ) КАК СуммаНУПоступление,
   |	//ДляБухУчета СУММА(ПартииТоваровНаСкладах.НДСВходящий) КАК НДСВходящийПоступление,
   |	//ДляБухУчета СУММА(ПартииТоваровНаСкладах.НДСКредит) КАК НДСКредитПоступление,
   |
   |	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК СуммаПоступление
   |
   |ИЗ
   |	РегистрНакопления.ПартииТоваровНаСкладах%СуффиксУчета% КАК ПартииТоваровНаСкладах
   |
   |ГДЕ
   |	ПартииТоваровНаСкладах.Период МЕЖДУ &НачДата И &КонДата
   |	И ПартииТоваровНаСкладах.Номенклатура.НоменклатурнаяГруппа В (&НоменклатурныеГруппыЗатрат)
   |    И ПартииТоваровНаСкладах.КодОперации В (&КодыПоступление)
   |    И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
   |	//ДляРеглУчета И ПартииТоваровНаСкладах.Организация = &Организация
   |	//ДляБухУчета И ПартииТоваровНаСкладах.СчетУчета В ИЕРАРХИИ (&МассивСчетовЗапасов)
   |
   |СГРУППИРОВАТЬ ПО 
   |	//ДляБухУчета ПартииТоваровНаСкладах.НалоговоеНазначение, 
   |	ПартииТоваровНаСкладах.Номенклатура.НоменклатурнаяГруппа
   |
   |УПОРЯДОЧИТЬ ПО  
   |	ПартииТоваровНаСкладах.Номенклатура.НоменклатурнаяГруппа
   |
   |";
		
   	Запрос = Новый Запрос;
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(ТекстЗапроса, СтруктураШапкиДокумента.ВидОтраженияВУчете);

	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	
	КодыПоступление = Новый Массив;
	КодыПоступление.Добавить(Перечисления.КодыОперацийПартииТоваров.Поступление);
	Запрос.УстановитьПараметр("КодыПоступление", КодыПоступление);
	
	Возврат Запрос;
															   
КонецФункции // СформироватьЗапросПоПоступлениюПартийТоваров()

Функция СформироватьЗапросПоПартиямТоваров(СтруктураШапкиДокумента, РасчетПоНУ = Ложь)

   ТекстЗапроса = "
   |ВЫБРАТЬ
   |	ПартииТоваровНаСкладах.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
   |	ПартииТоваровНаСкладах.Номенклатура,
   |	ПартииТоваровНаСкладах.КодОперации,
   |	//ДляБухУчета ПартииТоваровНаСкладах.СчетУчета,
   |	//ДляРеглУчета ПартииТоваровНаСкладах.КорСчет,
   |	//ДляРеглУчета ПартииТоваровНаСкладах.КорСубконто1,
   |	//ДляРеглУчета ПартииТоваровНаСкладах.КорСубконто2,
   |	//ДляРеглУчета ПартииТоваровНаСкладах.КорСубконто3,
   |	ПартииТоваровНаСкладах.ДокументОприходования,
   |	ПартииТоваровНаСкладах.ДокументДвижения,
   |	ПартииТоваровНаСкладах.ДокументДвиженияПериод,
   |	ПартииТоваровНаСкладах.Качество,
   |	//ДляБухУчета ПартииТоваровНаСкладах.НалоговоеНазначение,
   // Регистратор и его дата нужны только для реализации и сторно реализации
   |	//ДляУпрУчета ВЫБОР КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыРеализация) ИЛИ ПартииТоваровНаСкладах.КодОперации В (&КодыВозвратЭтогоМесяца) ТОГДА ПартииТоваровНаСкладах.Регистратор ИНАЧЕ NULL КОНЕЦ КАК Регистратор,
   |	//ДляУпрУчета ВЫБОР КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыРеализация) ИЛИ ПартииТоваровНаСкладах.КодОперации В (&КодыВозвратЭтогоМесяца) ТОГДА ПартииТоваровНаСкладах.Регистратор.Дата ИНАЧЕ NULL КОНЕЦ КАК РегистраторДата,
   |
   |	СписанныеТовары.СкладПолучатель,
   |	//ДляУпрУчета  СписанныеТовары.Подразделение КАК Подразделение,
   |	//ДляРеглУчета СписанныеТовары.ПодразделениеОрганизации КАК Подразделение,
   |	СписанныеТовары.Продукция,
   |	СписанныеТовары.ХарактеристикаНоменклатурыНовая КАК ХарактеристикаНоменклатурыНовая,
   |	СписанныеТовары.СерияНоменклатурыНовая КАК СерияНоменклатурыНовая,
   |	СписанныеТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
   |	СписанныеТовары.СерияНоменклатуры КАК СерияНоменклатуры,
   |	СписанныеТовары.СтатьяЗатрат,
   |	//ДляУпрУчета СписанныеТовары.ОбъектСтроительства,
   |	//ДляБухУчета СписанныеТовары.ОбъектСтроительства,
   |	//ДляУпрУчета СписанныеТовары.Проект,
   |	//ДляБухУчета СписанныеТовары.НалоговоеНазначениеПоФакту,
   |	//ДляБухУчета СписанныеТовары.НалоговоеНазначениеНовое КАК НалоговоеНазначениеПолучатель,
   |	СписанныеТовары.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаЗатрат,
   |	СписанныеТовары.ЗаказСписания КАК Заказ,
   |
   |	СУММА(ВЫБОР
   |		КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыПоступление) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
   |			ТОГДА ПартииТоваровНаСкладах.Стоимость
   |		ИНАЧЕ 0
   |	КОНЕЦ) КАК СуммаПоступление,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыПоступление) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.СтоимостьНУ
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК СуммаНУПоступление,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыПоступление) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСВходящий
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСВходящийПоступление,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыПоступление) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСКредит
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСКредитПоступление,
   |
   |	//ДляРеглУчета СУММА(ВЫБОР
   |	//ДляРеглУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыПеремещение) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |    //ДляБухУчета         И ПартииТоваровНаСкладах.КорСчет В (&МассивСчетовЗапасовДругаяГруппа)
   |	//ДляРеглУчета 		ТОГДА ПартииТоваровНаСкладах.Стоимость
   |	//ДляРеглУчета 	ИНАЧЕ 0
   |	//ДляРеглУчета КОНЕЦ) КАК СуммаПеремещениеДругаяГруппа, // перемещение из товаров в материалы или из материалов в товары 
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыПеремещение) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |    //ДляБухУчета         И ПартииТоваровНаСкладах.КорСчет В (&МассивСчетовЗапасовДругаяГруппа)
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.СтоимостьНУ
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК СуммаНУПеремещениеДругаяГруппа, // перемещение из товаров в материалы или из материалов в товары 
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыПеремещение) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |    //ДляБухУчета         И ПартииТоваровНаСкладах.КорСчет В (&МассивСчетовЗапасовДругаяГруппа)
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСВходящий
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСВходящийПеремещениеДругаяГруппа, // перемещение из товаров в материалы или из материалов в товары 
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыПеремещение) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |    //ДляБухУчета         И ПартииТоваровНаСкладах.КорСчет В (&МассивСчетовЗапасовДругаяГруппа)
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСКредит
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСКредитПеремещениеДругаяГруппа, // перемещение из товаров в материалы или из материалов в товары 
   |
   |	//ДляРеглУчета СУММА(ВЫБОР
   |	//ДляРеглУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыПеремещение) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |    //ДляБухУчета         И НЕ ПартииТоваровНаСкладах.КорСчет В (&МассивСчетовЗапасовДругаяГруппа)
   |	//ДляРеглУчета 		ТОГДА ПартииТоваровНаСкладах.Стоимость
   |	//ДляРеглУчета 	ИНАЧЕ 0
   |	//ДляРеглУчета КОНЕЦ) КАК СуммаПеремещениеТаЖеГруппа, // перемещение из товаров в товары или из материалов в материалы
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыПеремещение) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |    //ДляБухУчета         И НЕ ПартииТоваровНаСкладах.КорСчет В (&МассивСчетовЗапасовДругаяГруппа)
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.СтоимостьНУ
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК СуммаНУПеремещениеТаЖеГруппа, // перемещение из товаров в товары иили з материалов в материалы
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыПеремещение) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |    //ДляБухУчета         И НЕ ПартииТоваровНаСкладах.КорСчет В (&МассивСчетовЗапасовДругаяГруппа)
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСВходящий
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСВходящийПеремещениеТаЖеГруппа, // перемещение из товаров в товары иили з материалов в материалы
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыПеремещение) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |    //ДляБухУчета         И НЕ ПартииТоваровНаСкладах.КорСчет В (&МассивСчетовЗапасовДругаяГруппа)
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСКредит
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСКредитПеремещениеТаЖеГруппа, // перемещение из товаров в товары иили з материалов в материалы
   |
   |	СУММА(ВЫБОР
   |		КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыНЗП) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |			ТОГДА ПартииТоваровНаСкладах.Стоимость
   |		ИНАЧЕ 0
   |	КОНЕЦ) КАК СуммаНЗП,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыНЗП) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.СтоимостьНУ
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК СуммаНУНЗП,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыНЗП) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСВходящий
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСВходящийНЗП,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыНЗП) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСКредит
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСКредитНЗП,
   |
   |	СУММА(ВЫБОР
   |		КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыЗатраты) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |			ТОГДА ПартииТоваровНаСкладах.Стоимость
   |		ИНАЧЕ 0
   |	КОНЕЦ) КАК СуммаЗатраты,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыЗатраты) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.СтоимостьНУ
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК СуммаНУЗатраты,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыЗатраты) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСВходящий
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСВходящийЗатраты,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыЗатраты) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСКредит
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСКредитЗатраты,
   |
   |	СУММА(ВЫБОР
   |		КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыБрак) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |			ТОГДА ПартииТоваровНаСкладах.Стоимость
   |		ИНАЧЕ 0
   |	КОНЕЦ) КАК СуммаБрак,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыБрак) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.СтоимостьНУ
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК СуммаНУБрак,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыБрак) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСВходящий
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСВходящийБрак,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыБрак) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСКредит
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСКредитБрак,
   |
   |	СУММА(ВЫБОР
   |		КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыЗатратыОС) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |			ТОГДА ПартииТоваровНаСкладах.Стоимость
   |		ИНАЧЕ 0
   |	КОНЕЦ) КАК СуммаЗатратыОС,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыЗатратыОС) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.СтоимостьНУ
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК СуммаНУЗатратыОС,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыЗатратыОС) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСВходящий
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСВходящийЗатратыОС,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыЗатратыОС) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСКредит
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСКредитЗатратыОС,
   |
   |	СУММА(ВЫБОР
   |		КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыРеализация) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |			ТОГДА ПартииТоваровНаСкладах.Стоимость
   |		ИНАЧЕ 0
   |	КОНЕЦ) КАК СуммаРеализация,
   |
  // возврат текущего месяца - сторно реализации
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыРеализация) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.СтоимостьНУ
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК СуммаНУРеализация,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыРеализация) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСВходящий
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСВходящийРеализация,
   |
   |	//ДляБухУчета СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыРеализация) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСКредит
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСКредитРеализация,
   |
   // возврат текущего месяца - сторно реализации
   |	-СУММА(ВЫБОР
   |		КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыВозвратЭтогоМесяца) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |			ТОГДА ПартииТоваровНаСкладах.Стоимость
   |		ИНАЧЕ 0
   |	КОНЕЦ) КАК СуммаВозвратЭтогоМесяца,
   |
   |	//ДляБухУчета -СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыВозвратЭтогоМесяца) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.СтоимостьНУ
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК СуммаНУВозвратЭтогоМесяца,
   |
   |	//ДляБухУчета -СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыВозвратЭтогоМесяца) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСВходящий
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСВходящийВозвратЭтогоМесяца,
   |
   |	//ДляБухУчета -СУММА(ВЫБОР
   |	//ДляБухУчета 	КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыВозвратЭтогоМесяца) И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
   |	//ДляБухУчета 		ТОГДА ПартииТоваровНаСкладах.НДСКредит
   |	//ДляБухУчета 	ИНАЧЕ 0
   |	//ДляБухУчета КОНЕЦ) КАК НДСКредитВозвратЭтогоМесяца,
   |
   |    Истина //чтобы после замены комментариев не осталась запятой в конце
   |
   |ИЗ
   |	РегистрНакопления.ПартииТоваровНаСкладах%СуффиксУчета% КАК ПартииТоваровНаСкладах
   |
   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
   |		ПО ПартииТоваровНаСкладах.Регистратор = СписанныеТовары.Регистратор
   |			И ПартииТоваровНаСкладах.НомерСтрокиСписанныхТоваров = СписанныеТовары.НомерСтроки
   |
   |ГДЕ
   |	ПартииТоваровНаСкладах.Период МЕЖДУ &НачДата И &КонДата
   |	И ПартииТоваровНаСкладах.Номенклатура.НоменклатурнаяГруппа В (&НоменклатурныеГруппыЗатрат)
   |	//ДляРеглУчета И ПартииТоваровНаСкладах.Организация = &Организация
   |	//ДляБухУчета И ПартииТоваровНаСкладах.СчетУчета В ИЕРАРХИИ (&МассивСчетовЗапасов)
   |
   |СГРУППИРОВАТЬ ПО 
   |	ПартииТоваровНаСкладах.Номенклатура.НоменклатурнаяГруппа,
   |	ПартииТоваровНаСкладах.Номенклатура,
   |	ПартииТоваровНаСкладах.КодОперации,
   |	//ДляБухУчета ПартииТоваровНаСкладах.СчетУчета,
   |	//ДляРеглУчета ПартииТоваровНаСкладах.КорСчет,
   |	//ДляРеглУчета ПартииТоваровНаСкладах.КорСубконто1,
   |	//ДляРеглУчета ПартииТоваровНаСкладах.КорСубконто2,
   |	//ДляРеглУчета ПартииТоваровНаСкладах.КорСубконто3,
   |	ПартииТоваровНаСкладах.ДокументОприходования,
   |	ПартииТоваровНаСкладах.ДокументДвижения,
   |	ПартииТоваровНаСкладах.ДокументДвиженияПериод,
   |	ПартииТоваровНаСкладах.Качество,
   |	//ДляБухУчета ПартииТоваровНаСкладах.НалоговоеНазначение,
   |	//ДляУпрУчета ВЫБОР КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыРеализация) ИЛИ ПартииТоваровНаСкладах.КодОперации В (&КодыВозвратЭтогоМесяца) ТОГДА ПартииТоваровНаСкладах.Регистратор ИНАЧЕ NULL КОНЕЦ,
   |	//ДляУпрУчета ВЫБОР КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыРеализация) ИЛИ ПартииТоваровНаСкладах.КодОперации В (&КодыВозвратЭтогоМесяца) ТОГДА ПартииТоваровНаСкладах.Регистратор.Дата ИНАЧЕ NULL КОНЕЦ,
   |
   |	СписанныеТовары.СкладПолучатель,
   |	//ДляУпрУчета  СписанныеТовары.Подразделение,
   |	//ДляРеглУчета СписанныеТовары.ПодразделениеОрганизации,
   |	СписанныеТовары.Продукция,
   |	СписанныеТовары.ХарактеристикаНоменклатурыНовая,
   |	СписанныеТовары.СерияНоменклатурыНовая,
   |	СписанныеТовары.ХарактеристикаНоменклатуры,
   |	СписанныеТовары.СерияНоменклатуры,
   |	СписанныеТовары.СтатьяЗатрат,
   |	//ДляУпрУчета СписанныеТовары.ОбъектСтроительства,
   |	//ДляБухУчета СписанныеТовары.ОбъектСтроительства,
   |	//ДляУпрУчета СписанныеТовары.Проект,
   |	//ДляБухУчета СписанныеТовары.НалоговоеНазначениеПоФакту,
   |	//ДляБухУчета СписанныеТовары.НалоговоеНазначениеНовое,
   |	СписанныеТовары.НоменклатурнаяГруппа,
   |	СписанныеТовары.ЗаказСписания
   |
   |УПОРЯДОЧИТЬ ПО  
   |	ПартииТоваровНаСкладах.Номенклатура.НоменклатурнаяГруппа,
   |	ПартииТоваровНаСкладах.Номенклатура,
   |	ПартииТоваровНаСкладах.КодОперации,
   |	//ДляБухУчета ПартииТоваровНаСкладах.СчетУчета,
   |	//ДляРеглУчета ПартииТоваровНаСкладах.КорСчет,
   |	//ДляРеглУчета ПартииТоваровНаСкладах.КорСубконто1,
   |	//ДляРеглУчета ПартииТоваровНаСкладах.КорСубконто2,
   |	//ДляРеглУчета ПартииТоваровНаСкладах.КорСубконто3,
   |	ПартииТоваровНаСкладах.ДокументОприходования,
   |	ПартииТоваровНаСкладах.ДокументДвижения,
   |	ПартииТоваровНаСкладах.ДокументДвиженияПериод,
   |	ПартииТоваровНаСкладах.Качество,
   |	//ДляБухУчета ПартииТоваровНаСкладах.НалоговоеНазначение,
   |	//ДляУпрУчета ВЫБОР КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыРеализация) ИЛИ ПартииТоваровНаСкладах.КодОперации В (&КодыВозвратЭтогоМесяца) ТОГДА ПартииТоваровНаСкладах.Регистратор ИНАЧЕ NULL КОНЕЦ,
   |	//ДляУпрУчета ВЫБОР КОГДА ПартииТоваровНаСкладах.КодОперации В (&КодыРеализация) ИЛИ ПартииТоваровНаСкладах.КодОперации В (&КодыВозвратЭтогоМесяца) ТОГДА ПартииТоваровНаСкладах.Регистратор.Дата ИНАЧЕ NULL КОНЕЦ,
   |
   |	СписанныеТовары.СкладПолучатель,
   |	//ДляУпрУчета  СписанныеТовары.Подразделение,
   |	//ДляРеглУчета СписанныеТовары.ПодразделениеОрганизации,
   |	СписанныеТовары.Продукция,
   |	СписанныеТовары.ХарактеристикаНоменклатурыНовая,
   |	СписанныеТовары.СерияНоменклатурыНовая,
   |	СписанныеТовары.ХарактеристикаНоменклатуры,
   |	СписанныеТовары.СерияНоменклатуры,
   |	СписанныеТовары.СтатьяЗатрат,
   |	//ДляУпрУчета СписанныеТовары.ОбъектСтроительства,
   |	//ДляБухУчета СписанныеТовары.ОбъектСтроительства,
   |	//ДляУпрУчета СписанныеТовары.Проект,
   |	//ДляБухУчета СписанныеТовары.НалоговоеНазначениеПоФакту,
   |	//ДляБухУчета СписанныеТовары.НалоговоеНазначениеНовое,
   |	СписанныеТовары.НоменклатурнаяГруппа,
   |	СписанныеТовары.ЗаказСписания
   |
   |";
				   
   
   	Запрос = Новый Запрос;
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(ТекстЗапроса, СтруктураШапкиДокумента.ВидОтраженияВУчете);

	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	
	КодыПоступление = Новый Массив;
	КодыПоступление.Добавить(Перечисления.КодыОперацийПартииТоваров.Поступление);
	Запрос.УстановитьПараметр("КодыПоступление", КодыПоступление);
	
	КодыПеремещение = Новый Массив;
	КодыПеремещение.Добавить(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами);
	Запрос.УстановитьПараметр("КодыПеремещение", КодыПеремещение);
	
	КодыРеализация = Новый Массив;
	КодыРеализация.Добавить(Перечисления.КодыОперацийПартииТоваров.Реализация);
	КодыРеализация.Добавить(Перечисления.КодыОперацийПартииТоваров.РеализацияРозница);
	Запрос.УстановитьПараметр("КодыРеализация", КодыРеализация);
	
	// возврат текущего месяца - сторно реализации
	КодыВозвратЭтогоМесяца = Новый Массив;
	КодыВозвратЭтогоМесяца.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц );
	Запрос.УстановитьПараметр("КодыВозвратЭтогоМесяца", КодыВозвратЭтогоМесяца);
	
	КодыНЗП = Новый Массив;
	КодыНЗП.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеПартийВПроизводствоОперативно);
	Запрос.УстановитьПараметр("КодыНЗП", КодыНЗП);
	
	КодыЗатраты = Новый Массив;
	КодыЗатраты.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеНаЗатраты);
	Запрос.УстановитьПараметр("КодыЗатраты", КодыЗатраты);
	
	КодыБрак = Новый Массив;
	КодыБрак.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеНаБрак);
	Запрос.УстановитьПараметр("КодыБрак", КодыБрак);
	
	КодыВозвратЭтогоМесяца = Новый Массив;
	КодыВозвратЭтогоМесяца.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц );
	Запрос.УстановитьПараметр("КодыВозвратЭтогоМесяца", КодыВозвратЭтогоМесяца);
	
	КодыЗатратыОС = Новый Массив;
	КодыЗатратыОС.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеНаСтроительствоОбъектовОС);
	КодыЗатратыОС.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеНаВложенияВоВнеоборотныеАктивы);
	Запрос.УстановитьПараметр("КодыЗатратыОС", КодыЗатратыОС);
	
	
															 
															 
	Возврат Запрос;
															   
КонецФункции // СформироватьЗапросПоПартиямТоваров()

// Функция формирует текст запроса по ТЗР по регистру "Затраты".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоТЗР()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета Затраты.Организация,
	|	Затраты.Подразделение,
	|	Затраты.СтатьяЗатрат,
	|	Затраты.НоменклатурнаяГруппа,
	|	Затраты.Заказ,
	|	//ДляУпрУчета Затраты.Проект,
	|	//ДляБухУчета Затраты.СчетУчета,
	|	//ДляБухУчета Затраты.НалоговоеНазначение,
	|
	|	//ДляБухУчета СУММА(Затраты.СуммаНУОстаток) КАК СуммаНУОстаток,
	|	//ДляБухУчета СУММА(Затраты.НДСВходящийОстаток) КАК НДСВходящийОстаток,
	|	//ДляБухУчета СУММА(Затраты.НДСКредитОстаток) КАК НДСКредитОстаток,
	|	СУММА(Затраты.СуммаОстаток) КАК СуммаОстаток
	|
	|ИЗ
	|	РегистрНакопления.Затраты%СуффиксУчета%.Остатки(&КонГраница,
	|		//ДляУпрУчета  СтатьяЗатрат.ХарактерЗатрат В (&МассивХарактеровЗатрат)
	|		//ДляРеглУчета Организация = &Организация 
	|		//ДляБухУчета И СчетУчета В ИЕРАРХИИ (&МассивСчетовЗатрат)
	|
	|		) КАК Затраты
	|
	|СГРУППИРОВАТЬ ПО
	|	Затраты.НоменклатурнаяГруппа,
	|	//ДляРеглУчета Затраты.Организация,
	|	Затраты.Подразделение,
	|	Затраты.СтатьяЗатрат,
	|	//ДляУпрУчета Затраты.Проект,
	|	//ДляБухУчета Затраты.СчетУчета,
	|	//ДляБухУчета Затраты.НалоговоеНазначение,
	|	Затраты.Заказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Затраты.НоменклатурнаяГруппа,
	|	//ДляРеглУчета Затраты.Организация,
	|	Затраты.Подразделение,
	|	Затраты.СтатьяЗатрат,
	|	//ДляУпрУчета Затраты.Проект,
	|	//ДляБухУчета Затраты.СчетУчета,
	|	//ДляБухУчета Затраты.НалоговоеНазначение,
	|	Затраты.Заказ
	|";
		
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоТЗР()

// Функция формирует запрос по ТЗР по регистру "Затраты".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//
// Возвращаемое значение:
//   Запрос – Запрос по ТЗР по регистру "Затраты".
//
Функция СформироватьЗапросПоТЗР(
	СтруктураШапкиДокумента
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоТЗР();
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(ТекстЗапросаСКомментариями, СтруктураШапкиДокумента.ВидОтраженияВУчете);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.мНачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.мКонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		МассивХарактеровЗатрат = Новый Массив;
		МассивХарактеровЗатрат.Добавить(Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы);
		Запрос.УстановитьПараметр("МассивХарактеровЗатрат", МассивХарактеровЗатрат);
	КонецЕсли;
	
	Возврат Запрос;

КонецФункции // СформироватьЗапросПоТЗР()

// Процедура распределения всех транспортно-заготовительных расходов 
//
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
Процедура РаспределениеВсехТранспортноЗаготовительныхРасходов(
	СтруктураШапкиДокумента
	) Экспорт
	
	
	ИменаРегистров = "Затраты, НезавершенноеПроизводство, БракВПроизводстве, 
	|ПродажиСебестоимость, СтроительствоОбъектовОсновныхСредств, 
	|ЗатратыНаСтроительствоОбъектовОсновныхСредств, ЗатратыОбороты, Операция, СтроительствоОбъектовОС_БУ";
	
	СтруктураИмен = Новый Структура(ИменаРегистров);
	
	СтруктураДвижений = ПолучитьНаборыДвижений(СтруктураШапкиДокумента, СтруктураИмен);
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		РаспределениеТранспортноЗаготовительныхРасходов(СтруктураШапкиДокумента, СтруктураДвижений);
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		РаспределениеТранспортноЗаготовительныхРасходов(СтруктураШапкиДокумента, СтруктураДвижений, "Материалы");
		РаспределениеТранспортноЗаготовительныхРасходов(СтруктураШапкиДокумента, СтруктураДвижений, "Товары");
	КонецЕсли; 
	
	Если СтруктураДвижений.ДвиженияЗатраты.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияЗатраты.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияНЗП.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияНЗП.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураДвижений.ДвиженияБракВПроизводстве.Модифицированность() Тогда
		СтруктураДвижений.ДвиженияБракВПроизводстве.Записать(Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Если СтруктураДвижений.ДвиженияПродажиСебестоимость.Модифицированность() Тогда
			СтруктураДвижений.ДвиженияПродажиСебестоимость.Записать(Ложь);
		КонецЕсли;
		
		Если СтруктураДвижений.ДвиженияЗатратыОбороты.Модифицированность() Тогда
			СтруктураДвижений.ДвиженияЗатратыОбороты.Записать(Ложь);
		КонецЕсли;
		
		Если СтруктураДвижений.СтроительствоОбъектовОсновныхСредств.Модифицированность() Тогда
			СтруктураДвижений.СтроительствоОбъектовОсновныхСредств.Записать(Ложь);
		КонецЕсли;
		
		Если СтруктураДвижений.ЗатратыНаСтроительствоОбъектовОсновныхСредств.Модифицированность() Тогда
			СтруктураДвижений.ЗатратыНаСтроительствоОбъектовОсновныхСредств.Записать(Ложь);
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И СтруктураДвижений.Операция.Модифицированность() Тогда
		СтруктураДвижений.Операция.Записать(Ложь);
	КонецЕсли;
	
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если СтруктураДвижений.ДвиженияСтроительствоОбъектовОС_БУ.Модифицированность() Тогда
		  	СтруктураДвижений.ДвиженияСтроительствоОбъектовОС_БУ.Записать(Ложь);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // РаспределениеВсехТранспортноЗаготовительныхРасходов()

Функция СформироватьМассивСчетовВИерархии(МассивСчетов) 
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка КАК Счет
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетов)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Хозрасчетный.Ссылка";

				   
   	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	Рез = Новый Массив;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Рез.Добавить(Выборка.Счет);
	КонецЦикла;	
	
	Возврат Рез;
	
КонецФункции // СформироватьМассивСчетовПоИерархии()
 
// Процедура распределения транспортно-заготовительных расходов 
//
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
Процедура РаспределениеТранспортноЗаготовительныхРасходов(
	СтруктураШапкиДокумента,
	СтруктураДвижений,
	ВидТЗР = ""
	) Экспорт
	
	ЗапросПоЗатратам = СформироватьЗапросПоТЗР(
		СтруктураШапкиДокумента
	);
		
	ЗапросПоПартиям = СформироватьЗапросПоПартиямТоваров(
		СтруктураШапкиДокумента
	);
		
	ЗапросПоНачальнымОстаткам = СформироватьЗапросПоНачальнымОстаткамПартийТоваров(
		СтруктураШапкиДокумента
	);
		
	ЗапросПоПоступлению = СформироватьЗапросПоПоступлениюПартийТоваров(
		СтруктураШапкиДокумента
	);
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		МассивСчетовЗатратТЗР = Новый Массив;
		МассивСчетовЗапасов = Новый Массив;
		МассивСчетовЗапасовДругаяГруппа = Новый Массив;
		Если ВидТЗР = "Материалы" Тогда
			МассивСчетовЗатратТЗР.Добавить(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы);
			МассивСчетовЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы);
			МассивСчетовЗапасовДругаяГруппа = СформироватьМассивСчетовВИерархии(ПланыСчетов.Хозрасчетный.Товары);
		Иначе
			МассивСчетовЗатратТЗР.Добавить(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТовары);
			МассивСчетовЗапасов.Добавить(ПланыСчетов.Хозрасчетный.Товары);
			МассивСчетовЗапасовДругаяГруппа = СформироватьМассивСчетовВИерархии(ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы);
		КонецЕсли;
		ЗапросПоЗатратам.УстановитьПараметр("МассивСчетовЗатрат", МассивСчетовЗатратТЗР);
		
		ЗапросПоПартиям.УстановитьПараметр("МассивСчетовЗапасов", МассивСчетовЗапасов);
		ЗапросПоПартиям.УстановитьПараметр("МассивСчетовЗапасовДругаяГруппа", МассивСчетовЗапасовДругаяГруппа);
		
		ЗапросПоНачальнымОстаткам.УстановитьПараметр("МассивСчетовЗапасов", МассивСчетовЗапасов);
		ЗапросПоПоступлению.УстановитьПараметр("МассивСчетовЗапасов", МассивСчетовЗапасов);
		
	КонецЕсли; 
	
		
	РезультатЗапросаПоЗатратам = ЗапросПоЗатратам.Выполнить();
	
	// ограничиваем запросы по партиям и нач. остаткам теми группами, для которых существуют ТЗР к распределению
	МассивНоменклатурныеГруппы = РезультатЗапросаПоЗатратам.Выгрузить().ВыгрузитьКолонку("НоменклатурнаяГруппа");
	ЗапросПоПартиям.УстановитьПараметр("НоменклатурныеГруппыЗатрат", МассивНоменклатурныеГруппы);
	ЗапросПоНачальнымОстаткам.УстановитьПараметр("НоменклатурныеГруппыЗатрат", МассивНоменклатурныеГруппы);
	ЗапросПоПоступлению.УстановитьПараметр("НоменклатурныеГруппыЗатрат", МассивНоменклатурныеГруппы);
	

	РезультатЗапросаПоПартиям = ЗапросПоПартиям.Выполнить();
	
	РезультатЗапросаПоНачальнымОстаткам = ЗапросПоНачальнымОстаткам.Выполнить();
	
	РезультатЗапросаПоПоступлению = ЗапросПоПоступлению.Выполнить();
	
	Если РезультатЗапросаПоЗатратам.Пустой() // ТЗР не было
		ИЛИ РезультатЗапросаПоПартиям.Пустой() Тогда // списания партий не было
		Возврат;  
	КонецЕсли;
	
	// Формирование запроса по коэффициентам распределения по проектам.
	ЗапросРаспределениеПоПроектам = СформироватьЗапросРаспределениеПоПроектам(
		СтруктураШапкиДокумента
	);
	РезультатЗапросаРаспределениеПоПроектам = ЗапросРаспределениеПоПроектам.Выполнить();
	// Выберем коэффициенты распределения по проектам.
	ВыборкаРаспределениеПоПроектам = РезультатЗапросаРаспределениеПоПроектам.Выбрать();
	
	
	// Получим построитель запроса по партиям товаров
	ПостроительЗапроса = ПолучитьПостроительЗапросаПоПартиямТоваров(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоПартиям
		);
		
	// Получим построитель запроса по начальным остаткам 
	ПостроительЗапросаНачОст = ПолучитьПостроительЗапросаПоНачальнымОстаткам(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоНачальнымОстаткам
		);
		
	// Получим построитель запроса по поступлению
	ПостроительЗапросаПоПоступлению = ПолучитьПостроительЗапросаПоПоступлению(
		СтруктураШапкиДокумента,
		РезультатЗапросаПоПоступлению
	);
		
		
	МассивКоэфСуммаПеремещение= Новый Массив;		
	МассивКоэфСуммаНЗП        = Новый Массив;	
	МассивКоэфСуммаЗатраты    = Новый Массив;	
	МассивКоэфСуммаБрак       = Новый Массив;	
	МассивКоэфСуммаЗатратыОС  = Новый Массив;	
	МассивКоэфСуммаРеализация = Новый Массив;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		МассивКоэфСуммаНУПеремещение= Новый Массив;		
		МассивКоэфСуммаНУНЗП        = Новый Массив;	
		МассивКоэфСуммаНУЗатраты    = Новый Массив;	
		МассивКоэфСуммаНУБрак       = Новый Массив;	
		МассивКоэфСуммаНУЗатратыОС  = Новый Массив;	
		МассивКоэфСуммаНУРеализация = Новый Массив;
			
		МассивКоэфНДСКредитПеремещение= Новый Массив;		
		МассивКоэфНДСКредитНЗП        = Новый Массив;	
		МассивКоэфНДСКредитЗатраты    = Новый Массив;	
		МассивКоэфНДСКредитБрак       = Новый Массив;	
		МассивКоэфНДСКредитЗатратыОС  = Новый Массив;	
		МассивКоэфНДСКредитРеализация = Новый Массив;
		
		МассивКоэфНДСВходящийПеремещение= Новый Массив;		
		МассивКоэфНДСВходящийНЗП        = Новый Массив;	
		МассивКоэфНДСВходящийЗатраты    = Новый Массив;	
		МассивКоэфНДСВходящийБрак       = Новый Массив;	
		МассивКоэфНДСВходящийЗатратыОС  = Новый Массив;	
		МассивКоэфНДСВходящийРеализация = Новый Массив;
		
	КонецЕсли; 
	
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
	КонецЕсли; 
	 
	ВыборкаПоЗатратам = РезультатЗапросаПоЗатратам.Выбрать();
	Пока ВыборкаПоЗатратам.Следующий() Цикл
		
		// Отберем строки партий товаров 
		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоПартиямТоваров(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам.НоменклатурнаяГруппа,
			?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, ВыборкаПоЗатратам.НалоговоеНазначение, Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка()), 		
			ПостроительЗапроса
		); 

		Если УстановленНовыйОтбор Тогда	
			ПостроительЗапроса.Выполнить();
		КонецЕсли;	
		
		РезультатЗапросаПоПартиямТоваров = ПостроительЗапроса.Результат;
		
		МассивКоэфСуммаПеремещение.Очистить();
		МассивКоэфСуммаНЗП.Очистить();
		МассивКоэфСуммаЗатраты.Очистить();
		МассивКоэфСуммаЗатратыОС.Очистить();
		МассивКоэфСуммаБрак.Очистить();
		МассивКоэфСуммаРеализация.Очистить();
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
			МассивКоэфСуммаНУПеремещение.Очистить();
			МассивКоэфСуммаНУНЗП.Очистить();
			МассивКоэфСуммаНУЗатраты.Очистить();
			МассивКоэфСуммаНУЗатратыОС.Очистить();
			МассивКоэфСуммаНУБрак.Очистить();
			МассивКоэфСуммаНУРеализация.Очистить();
			
			МассивКоэфНДСКредитПеремещение.Очистить();
			МассивКоэфНДСКредитНЗП.Очистить();
			МассивКоэфНДСКредитЗатраты.Очистить();
			МассивКоэфНДСКредитЗатратыОС.Очистить();
			МассивКоэфНДСКредитБрак.Очистить();
			МассивКоэфНДСКредитРеализация.Очистить();
		
			МассивКоэфНДСВходящийПеремещение.Очистить();
			МассивКоэфНДСВходящийНЗП.Очистить();
			МассивКоэфНДСВходящийЗатраты.Очистить();
			МассивКоэфНДСВходящийЗатратыОС.Очистить();
			МассивКоэфНДСВходящийБрак.Очистить();
			МассивКоэфНДСВходящийРеализация.Очистить();
			
		КонецЕсли; 		
		
		
		ОбщаяСуммаПоступление = 0;
		ОбщаяСуммаПеремещение = 0;
		ОбщаяСуммаНЗП = 0;
		ОбщаяСуммаЗатраты = 0;
		ОбщаяСуммаБрак = 0;
		ОбщаяСуммаЗатратыОС = 0;
		ОбщаяСуммаРеализация = 0;
		СуммаНачальныйОстаток = 0;
		
		ОбщаяСуммаНУПоступление = 0;
		ОбщаяСуммаНУПеремещение = 0;
		ОбщаяСуммаНУНЗП = 0;
		ОбщаяСуммаНУЗатраты = 0;
		ОбщаяСуммаНУБрак = 0;
		ОбщаяСуммаНУЗатратыОС = 0;
		ОбщаяСуммаНУРеализация = 0;
		СуммаНУНачальныйОстаток = 0;
		
		ОбщаяНДСВходящийПоступление = 0;
		ОбщаяНДСВходящийПеремещение = 0;
		ОбщаяНДСВходящийНЗП = 0;
		ОбщаяНДСВходящийЗатраты = 0;
		ОбщаяНДСВходящийБрак = 0;
		ОбщаяНДСВходящийЗатратыОС = 0;
		ОбщаяНДСВходящийРеализация = 0;
		НДСВходящийНачальныйОстаток = 0;
		
		ОбщаяНДСКредитПоступление = 0;
		ОбщаяНДСКредитПеремещение = 0;
		ОбщаяНДСКредитНЗП = 0;
		ОбщаяНДСКредитЗатраты = 0;
		ОбщаяНДСКредитБрак = 0;
		ОбщаяНДСКредитЗатратыОС = 0;
		ОбщаяНДСКредитРеализация = 0;
		НДСКредитНачальныйОстаток = 0;
		
		
		ВыборкаПартии = РезультатЗапросаПоПартиямТоваров.Выбрать();
		Пока ВыборкаПартии.Следующий() Цикл
			
			МассивКоэфСуммаНЗП.Добавить(ВыборкаПартии.СуммаНЗП);
			МассивКоэфСуммаЗатраты.Добавить(ВыборкаПартии.СуммаЗатраты);
			МассивКоэфСуммаБрак.Добавить(ВыборкаПартии.СуммаБрак);
			МассивКоэфСуммаЗатратыОС.Добавить(ВыборкаПартии.СуммаЗатратыОС);
			МассивКоэфСуммаРеализация.Добавить(ВыборкаПартии.СуммаРеализация - ВыборкаПартии.СуммаВозвратЭтогоМесяца);
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				
				МассивКоэфСуммаНУНЗП.Добавить(ВыборкаПартии.СуммаНУНЗП);
				МассивКоэфСуммаНУЗатраты.Добавить(ВыборкаПартии.СуммаНУЗатраты);
				МассивКоэфСуммаНУБрак.Добавить(ВыборкаПартии.СуммаНУБрак);
				МассивКоэфСуммаНУЗатратыОС.Добавить(ВыборкаПартии.СуммаНУЗатратыОС);
				МассивКоэфСуммаНУРеализация.Добавить(ВыборкаПартии.СуммаНУРеализация - ВыборкаПартии.СуммаНУВозвратЭтогоМесяца);
				
				МассивКоэфНДСКредитНЗП.Добавить(ВыборкаПартии.НДСКредитНЗП);
				МассивКоэфНДСКредитЗатраты.Добавить(ВыборкаПартии.НДСКредитЗатраты);
				МассивКоэфНДСКредитБрак.Добавить(ВыборкаПартии.НДСКредитБрак);
				МассивКоэфНДСКредитЗатратыОС.Добавить(ВыборкаПартии.НДСКредитЗатратыОС);
				МассивКоэфНДСКредитРеализация.Добавить(ВыборкаПартии.НДСКредитРеализация - ВыборкаПартии.НДСКредитВозвратЭтогоМесяца);
				
				МассивКоэфНДСВходящийНЗП.Добавить(ВыборкаПартии.НДСВходящийНЗП);
				МассивКоэфНДСВходящийЗатраты.Добавить(ВыборкаПартии.НДСВходящийЗатраты);
				МассивКоэфНДСВходящийБрак.Добавить(ВыборкаПартии.НДСВходящийБрак);
				МассивКоэфНДСВходящийЗатратыОС.Добавить(ВыборкаПартии.НДСВходящийЗатратыОС);
				МассивКоэфНДСВходящийРеализация.Добавить(ВыборкаПартии.НДСВходящийРеализация - ВыборкаПартии.НДСВходящийВозвратЭтогоМесяца);
				
			КонецЕсли;	

			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				// перемещением считаем перемещение только между разными группами (материалы и товары)
				ОбщаяСуммаПеремещение = ОбщаяСуммаПеремещение + ВыборкаПартии.СуммаПеремещениеДругаяГруппа;
				МассивКоэфСуммаПеремещение.Добавить(ВыборкаПартии.СуммаПеремещениеДругаяГруппа);
				
				ОбщаяСуммаНУПеремещение = ОбщаяСуммаНУПеремещение + ВыборкаПартии.СуммаНУПеремещениеДругаяГруппа;
				МассивКоэфСуммаНУПеремещение.Добавить(ВыборкаПартии.СуммаНУПеремещениеДругаяГруппа);
				
				ОбщаяНДСКредитПеремещение = ОбщаяНДСКредитПеремещение + ВыборкаПартии.НДСКредитПеремещениеДругаяГруппа;
				МассивКоэфНДСКредитПеремещение.Добавить(ВыборкаПартии.НДСКредитПеремещениеДругаяГруппа);
				
				ОбщаяНДСВходящийПеремещение = ОбщаяНДСВходящийПеремещение + ВыборкаПартии.НДСВходящийПеремещениеДругаяГруппа;
				МассивКоэфНДСВходящийПеремещение.Добавить(ВыборкаПартии.НДСВходящийПеремещениеДругаяГруппа);
					
				
			Иначе
				// для управленческого учета перемещения не обрабатываются и не требуются
				ОбщаяСуммаПеремещение = 0;
				МассивКоэфСуммаПеремещение.Добавить(0);
			КонецЕсли;	
				
			ОбщаяСуммаНЗП        = ОбщаяСуммаНЗП + ВыборкаПартии.СуммаНЗП;
			ОбщаяСуммаЗатраты    = ОбщаяСуммаЗатраты + ВыборкаПартии.СуммаЗатраты;
			ОбщаяСуммаБрак       = ОбщаяСуммаБрак + ВыборкаПартии.СуммаБрак;
			ОбщаяСуммаЗатратыОС  = ОбщаяСуммаЗатратыОС + ВыборкаПартии.СуммаЗатратыОС;
			ОбщаяСуммаРеализация = ОбщаяСуммаРеализация + ВыборкаПартии.СуммаРеализация - ВыборкаПартии.СуммаВозвратЭтогоМесяца;
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				
				ОбщаяСуммаНУНЗП        = ОбщаяСуммаНУНЗП + ВыборкаПартии.СуммаНУНЗП;
				ОбщаяСуммаНУЗатраты    = ОбщаяСуммаНУЗатраты + ВыборкаПартии.СуммаНУЗатраты;
				ОбщаяСуммаНУБрак       = ОбщаяСуммаНУБрак + ВыборкаПартии.СуммаНУБрак;
				ОбщаяСуммаНУЗатратыОС  = ОбщаяСуммаНУЗатратыОС + ВыборкаПартии.СуммаНУЗатратыОС;
				ОбщаяСуммаНУРеализация = ОбщаяСуммаНУРеализация + ВыборкаПартии.СуммаНУРеализация - ВыборкаПартии.СуммаНУВозвратЭтогоМесяца;
				
				ОбщаяНДСКредитНЗП        = ОбщаяНДСКредитНЗП + ВыборкаПартии.НДСКредитНЗП;
				ОбщаяНДСКредитЗатраты    = ОбщаяНДСКредитЗатраты + ВыборкаПартии.НДСКредитЗатраты;
				ОбщаяНДСКредитБрак       = ОбщаяНДСКредитБрак + ВыборкаПартии.НДСКредитБрак;
				ОбщаяНДСКредитЗатратыОС  = ОбщаяНДСКредитЗатратыОС + ВыборкаПартии.НДСКредитЗатратыОС;
				ОбщаяНДСКредитРеализация = ОбщаяНДСКредитРеализация + ВыборкаПартии.НДСКредитРеализация - ВыборкаПартии.НДСКредитВозвратЭтогоМесяца;
				
				ОбщаяНДСВходящийНЗП        = ОбщаяНДСВходящийНЗП + ВыборкаПартии.НДСВходящийНЗП;
				ОбщаяНДСВходящийЗатраты    = ОбщаяНДСВходящийЗатраты + ВыборкаПартии.НДСВходящийЗатраты;
				ОбщаяНДСВходящийБрак       = ОбщаяНДСВходящийБрак + ВыборкаПартии.НДСВходящийБрак;
				ОбщаяНДСВходящийЗатратыОС  = ОбщаяНДСВходящийЗатратыОС + ВыборкаПартии.НДСВходящийЗатратыОС;
				ОбщаяНДСВходящийРеализация = ОбщаяНДСВходящийРеализация + ВыборкаПартии.НДСВходящийРеализация - ВыборкаПартии.НДСВходящийВозвратЭтогоМесяца;
				
			КонецЕсли; 
			
		КонецЦикла;
		
		// Отберем строку начальных остатков
   		УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоНачальнымОстаткам(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам.НоменклатурнаяГруппа,
			?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, ВыборкаПоЗатратам.НалоговоеНазначение, Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка()), 		
			ПостроительЗапросаНачОст
			);

		Если УстановленНовыйОтбор Тогда	
			ПостроительЗапросаНачОст.Выполнить();
		КонецЕсли;	
		
		РезультатЗапросаПоНачальнымОстаткам = ПостроительЗапросаНачОст.Результат;
		
		СуммаНачальныйОстаток  = 0;
		СуммаНУНачальныйОстаток  = 0;
		НДСКредитНачальныйОстаток  = 0;
		НДСВходящийНачальныйОстаток  = 0;
		
		ВыборкаНачОст = РезультатЗапросаПоНачальнымОстаткам.Выбрать();
		Если ВыборкаНачОст.Следующий() Тогда // может быть только одна или 0 строк для ном. группы
			СуммаНачальныйОстаток  = ?(ВыборкаНачОст.СуммаНачальныйОстаток = NULL, 0, ВыборкаНачОст.СуммаНачальныйОстаток);
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				СуммаНУНачальныйОстаток  = ?(ВыборкаНачОст.СуммаНУНачальныйОстаток = NULL, 0, ВыборкаНачОст.СуммаНУНачальныйОстаток);
				НДСКредитНачальныйОстаток  = ?(ВыборкаНачОст.НДСВходящийНачальныйОстаток = NULL, 0, ВыборкаНачОст.НДСВходящийНачальныйОстаток);
				НДСВходящийНачальныйОстаток  = ?(ВыборкаНачОст.НДСКредитНачальныйОстаток = NULL, 0, ВыборкаНачОст.НДСКредитНачальныйОстаток);
			КонецЕсли; 
		КонецЕсли;	
		
		
		// Отберем строку поступлений
      	УстановленНовыйОтбор = ПроверитьИУстановитьОтборПостроителяЗапросаПоПоступлению(
			СтруктураШапкиДокумента,
			ВыборкаПоЗатратам.НоменклатурнаяГруппа,
			?(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, ВыборкаПоЗатратам.НалоговоеНазначение, Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка()), 		
        	ПостроительЗапросаПоПоступлению
			);

		Если УстановленНовыйОтбор Тогда	
			ПостроительЗапросаПоПоступлению.Выполнить();
		КонецЕсли;	
		
		РезультатЗапросаПоПоступлению = ПостроительЗапросаПоПоступлению.Результат;
		
		ВыборкаПоступление = РезультатЗапросаПоПоступлению.Выбрать();
		Если ВыборкаПоступление.Следующий() Тогда // может быть только одна или 0 строк для ном. группы
			ОбщаяСуммаПоступление = ОбщаяСуммаПоступление + ?(ВыборкаПоступление.СуммаПоступление = NULL, 0, ВыборкаПоступление.СуммаПоступление);
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ОбщаяСуммаНУПоступление = ОбщаяСуммаНУПоступление + ?(ВыборкаПоступление.СуммаНУПоступление = NULL, 0, ВыборкаПоступление.СуммаНУПоступление);
				ОбщаяНДСКредитПоступление = ОбщаяНДСКредитПоступление + ?(ВыборкаПоступление.НДСКредитПоступление = NULL, 0, ВыборкаПоступление.НДСКредитПоступление);
				ОбщаяНДСВходящийПоступление = ОбщаяНДСВходящийПоступление + ?(ВыборкаПоступление.НДСВходящийПоступление = NULL, 0, ВыборкаПоступление.НДСВходящийПоступление);
			КонецЕсли; 
		КонецЕсли;	
		
		
		СписаноВсегоСумма = ОбщаяСуммаПеремещение + ОбщаяСуммаНЗП + ОбщаяСуммаЗатраты + ОбщаяСуммаБрак + ОбщаяСуммаЗатратыОС + ОбщаяСуммаРеализация;
		КоэфТЗРСумма = ?(ОбщаяСуммаПоступление + СуммаНачальныйОстаток = 0, 0, СписаноВсегоСумма/(ОбщаяСуммаПоступление + СуммаНачальныйОстаток));
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
			СписаноВсегоСуммаНУ = ОбщаяСуммаНУПеремещение + ОбщаяСуммаНУНЗП + ОбщаяСуммаНУЗатраты + ОбщаяСуммаНУБрак + ОбщаяСуммаНУЗатратыОС + ОбщаяСуммаНУРеализация;
			КоэфТЗРСуммаНУ = ?(ОбщаяСуммаНУПоступление + СуммаНУНачальныйОстаток = 0, 0, СписаноВсегоСуммаНУ/(ОбщаяСуммаНУПоступление + СуммаНУНачальныйОстаток));
			
			СписаноВсегоНДСКредит = ОбщаяНДСКредитПеремещение + ОбщаяНДСКредитНЗП + ОбщаяНДСКредитЗатраты + ОбщаяНДСКредитБрак + ОбщаяНДСКредитЗатратыОС + ОбщаяНДСКредитРеализация;
			КоэфТЗРНДСКредит = ?(ОбщаяНДСКредитПоступление + НДСКредитНачальныйОстаток = 0, 0, СписаноВсегоНДСКредит/(ОбщаяНДСКредитПоступление + НДСКредитНачальныйОстаток));
			
			СписаноВсегоНДСВходящий = ОбщаяНДСВходящийПеремещение + ОбщаяНДСВходящийНЗП + ОбщаяНДСВходящийЗатраты + ОбщаяНДСВходящийБрак + ОбщаяНДСВходящийЗатратыОС + ОбщаяНДСВходящийРеализация;
			КоэфТЗРНДСВходящий = ?(ОбщаяНДСВходящийПоступление + НДСВходящийНачальныйОстаток = 0, 0, СписаноВсегоНДСВходящий/(ОбщаяНДСВходящийПоступление + НДСВходящийНачальныйОстаток));
			
		КонецЕсли; 
		
		
		СуммаТЗР = Окр(ВыборкаПоЗатратам.СуммаОстаток * КоэфТЗРСумма, 2);
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СуммаНУТЗР = Окр(ВыборкаПоЗатратам.СуммаНУОстаток * КоэфТЗРСуммаНУ, 2);
			НДСКредитТЗР = Окр(ВыборкаПоЗатратам.НДСКредитОстаток * КоэфТЗРНДСКредит, 2);
			НДСВходящийТЗР = Окр(ВыборкаПоЗатратам.НДСВходящийОстаток * КоэфТЗРНДСВходящий, 2);
		Иначе	
			СуммаВРТЗР = 0;
			НДСКредитТЗР = 0;
			НДСВходящийТЗР = 0;
		КонецЕсли;	
		
		Если СуммаТЗР = 0 И СуммаНУТЗР = 0 И НДСКредитТЗР = 0 И НДСВходящийТЗР = 0 Тогда
			// нечего распределять
			Продолжить;
		КонецЕсли; 
		
		СуммаПеремещение = ?(СписаноВсегоСумма=0, 0, Окр(СуммаТЗР * ОбщаяСуммаПеремещение / СписаноВсегоСумма, 2));
		СуммаНЗП = ?(СписаноВсегоСумма=0, 0, Окр(СуммаТЗР * ОбщаяСуммаНЗП / СписаноВсегоСумма, 2));
		СуммаЗатраты = ?(СписаноВсегоСумма=0, 0, Окр(СуммаТЗР * ОбщаяСуммаЗатраты / СписаноВсегоСумма, 2));
		СуммаБрак = ?(СписаноВсегоСумма=0, 0, Окр(СуммаТЗР * ОбщаяСуммаБрак / СписаноВсегоСумма, 2));
		СуммаЗатратыОС = ?(СписаноВсегоСумма=0, 0, Окр(СуммаТЗР * ОбщаяСуммаЗатратыОС / СписаноВсегоСумма, 2));
		СуммаРеализация = СуммаТЗР - СуммаПеремещение - СуммаНЗП - СуммаЗатраты - СуммаБрак - СуммаЗатратыОС;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
			СуммаНУПеремещение = ?(СписаноВсегоСуммаНУ=0, 0, Окр(СуммаНУТЗР * ОбщаяСуммаНУПеремещение / СписаноВсегоСуммаНУ, 2));
			СуммаНУНЗП = ?(СписаноВсегоСуммаНУ=0, 0, Окр(СуммаНУТЗР * ОбщаяСуммаНУНЗП / СписаноВсегоСуммаНУ, 2));
			СуммаНУЗатраты = ?(СписаноВсегоСуммаНУ=0, 0, Окр(СуммаНУТЗР * ОбщаяСуммаНУЗатраты / СписаноВсегоСуммаНУ, 2));
			СуммаНУБрак = ?(СписаноВсегоСуммаНУ=0, 0, Окр(СуммаНУТЗР * ОбщаяСуммаНУБрак / СписаноВсегоСуммаНУ, 2));
			СуммаНУЗатратыОС = ?(СписаноВсегоСуммаНУ=0, 0, Окр(СуммаНУТЗР * ОбщаяСуммаНУЗатратыОС / СписаноВсегоСуммаНУ, 2));
			СуммаНУРеализация = СуммаНУТЗР - СуммаНУПеремещение - СуммаНУНЗП - СуммаНУЗатраты - СуммаНУБрак - СуммаНУЗатратыОС;
			
			НДСКредитПеремещение = ?(СписаноВсегоНДСКредит=0, 0, Окр(НДСКредитТЗР * ОбщаяНДСКредитПеремещение / СписаноВсегоНДСКредит, 2));
			НДСКредитНЗП = ?(СписаноВсегоНДСКредит=0, 0, Окр(НДСКредитТЗР * ОбщаяНДСКредитНЗП / СписаноВсегоНДСКредит, 2));
			НДСКредитЗатраты = ?(СписаноВсегоНДСКредит=0, 0, Окр(НДСКредитТЗР * ОбщаяНДСКредитЗатраты / СписаноВсегоНДСКредит, 2));
			НДСКредитБрак = ?(СписаноВсегоНДСКредит=0, 0, Окр(НДСКредитТЗР * ОбщаяНДСКредитБрак / СписаноВсегоНДСКредит, 2));
			НДСКредитЗатратыОС = ?(СписаноВсегоНДСКредит=0, 0, Окр(НДСКредитТЗР * ОбщаяНДСКредитЗатратыОС / СписаноВсегоНДСКредит, 2));
			НДСКредитРеализация = НДСКредитТЗР - НДСКредитПеремещение - НДСКредитНЗП - НДСКредитЗатраты - НДСКредитБрак - НДСКредитЗатратыОС;
			
			НДСВходящийПеремещение = ?(СписаноВсегоНДСВходящий=0, 0, Окр(НДСВходящийТЗР * ОбщаяНДСВходящийПеремещение / СписаноВсегоНДСВходящий, 2));
			НДСВходящийНЗП = ?(СписаноВсегоНДСВходящий=0, 0, Окр(НДСВходящийТЗР * ОбщаяНДСВходящийНЗП / СписаноВсегоНДСВходящий, 2));
			НДСВходящийЗатраты = ?(СписаноВсегоНДСВходящий=0, 0, Окр(НДСВходящийТЗР * ОбщаяНДСВходящийЗатраты / СписаноВсегоНДСВходящий, 2));
			НДСВходящийБрак = ?(СписаноВсегоНДСВходящий=0, 0, Окр(НДСВходящийТЗР * ОбщаяНДСВходящийБрак / СписаноВсегоНДСВходящий, 2));
			НДСВходящийЗатратыОС = ?(СписаноВсегоНДСВходящий=0, 0, Окр(НДСВходящийТЗР * ОбщаяНДСВходящийЗатратыОС / СписаноВсегоНДСВходящий, 2));
			НДСВходящийРеализация = НДСВходящийТЗР - НДСВходящийПеремещение - НДСВходящийНЗП - НДСВходящийЗатраты - НДСВходящийБрак - НДСВходящийЗатратыОС;
		КонецЕсли; 
		
		МассивСуммаПеремещение = ОбщегоНазначения.РаспределитьПропорционально(СуммаПеремещение, МассивКоэфСуммаПеремещение, 2, Ложь);
		МассивСуммаНЗП         = ОбщегоНазначения.РаспределитьПропорционально(СуммаНЗП, МассивКоэфСуммаНЗП, 2, Ложь);
		МассивСуммаЗатраты     = ОбщегоНазначения.РаспределитьПропорционально(СуммаЗатраты, МассивКоэфСуммаЗатраты, 2, Ложь);
		МассивСуммаБрак        = ОбщегоНазначения.РаспределитьПропорционально(СуммаБрак, МассивКоэфСуммаБрак, 2, Ложь);
		МассивСуммаЗатратыОС   = ОбщегоНазначения.РаспределитьПропорционально(СуммаЗатратыОС, МассивКоэфСуммаЗатратыОС, 2, Ложь);
		МассивСуммаРеализация  = ОбщегоНазначения.РаспределитьПропорционально(СуммаРеализация, МассивКоэфСуммаРеализация, 2, Ложь);
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
			МассивСуммаНУПеремещение = ОбщегоНазначения.РаспределитьПропорционально(СуммаНУПеремещение, МассивКоэфСуммаНУПеремещение, 2, Ложь);
			МассивСуммаНУНЗП         = ОбщегоНазначения.РаспределитьПропорционально(СуммаНУНЗП, МассивКоэфСуммаНУНЗП, 2, Ложь);
			МассивСуммаНУЗатраты     = ОбщегоНазначения.РаспределитьПропорционально(СуммаНУЗатраты, МассивКоэфСуммаНУЗатраты, 2, Ложь);
			МассивСуммаНУБрак        = ОбщегоНазначения.РаспределитьПропорционально(СуммаНУБрак, МассивКоэфСуммаНУБрак, 2, Ложь);
			МассивСуммаНУЗатратыОС   = ОбщегоНазначения.РаспределитьПропорционально(СуммаНУЗатратыОС, МассивКоэфСуммаНУЗатратыОС, 2, Ложь);
			МассивСуммаНУРеализация  = ОбщегоНазначения.РаспределитьПропорционально(СуммаНУРеализация, МассивКоэфСуммаНУРеализация, 2, Ложь);
				
			МассивНДСКредитПеремещение = ОбщегоНазначения.РаспределитьПропорционально(НДСКредитПеремещение, МассивКоэфНДСКредитПеремещение, 2, Ложь);
			МассивНДСКредитНЗП         = ОбщегоНазначения.РаспределитьПропорционально(НДСКредитНЗП, МассивКоэфНДСКредитНЗП, 2, Ложь);
			МассивНДСКредитЗатраты     = ОбщегоНазначения.РаспределитьПропорционально(НДСКредитЗатраты, МассивКоэфНДСКредитЗатраты, 2, Ложь);
			МассивНДСКредитБрак        = ОбщегоНазначения.РаспределитьПропорционально(НДСКредитБрак, МассивКоэфНДСКредитБрак, 2, Ложь);
			МассивНДСКредитЗатратыОС   = ОбщегоНазначения.РаспределитьПропорционально(НДСКредитЗатратыОС, МассивКоэфНДСКредитЗатратыОС, 2, Ложь);
			МассивНДСКредитРеализация  = ОбщегоНазначения.РаспределитьПропорционально(НДСКредитРеализация, МассивКоэфНДСКредитРеализация, 2, Ложь);
			
			МассивНДСВходящийПеремещение = ОбщегоНазначения.РаспределитьПропорционально(НДСВходящийПеремещение, МассивКоэфНДСВходящийПеремещение, 2, Ложь);
			МассивНДСВходящийНЗП         = ОбщегоНазначения.РаспределитьПропорционально(НДСВходящийНЗП, МассивКоэфНДСВходящийНЗП, 2, Ложь);
			МассивНДСВходящийЗатраты     = ОбщегоНазначения.РаспределитьПропорционально(НДСВходящийЗатраты, МассивКоэфНДСВходящийЗатраты, 2, Ложь);
			МассивНДСВходящийБрак        = ОбщегоНазначения.РаспределитьПропорционально(НДСВходящийБрак, МассивКоэфНДСВходящийБрак, 2, Ложь);
			МассивНДСВходящийЗатратыОС   = ОбщегоНазначения.РаспределитьПропорционально(НДСВходящийЗатратыОС, МассивКоэфНДСВходящийЗатратыОС, 2, Ложь);
			МассивНДСВходящийРеализация  = ОбщегоНазначения.РаспределитьПропорционально(НДСВходящийРеализация, МассивКоэфНДСВходящийРеализация, 2, Ложь);
		КонецЕсли; 
		
		
		Индекс = 0;
		ВыборкаПартии.Сбросить();
		Пока ВыборкаПартии.Следующий() Цикл
			
			ДосписаниеСуммаПеремещение = ?(МассивСуммаПеремещение = Неопределено, 0, МассивСуммаПеремещение[Индекс]);
			ДосписаниеСуммаНЗП = ?(МассивСуммаНЗП = Неопределено, 0, МассивСуммаНЗП[Индекс]);
			ДосписаниеСуммаЗатраты = ?(МассивСуммаЗатраты = Неопределено, 0, МассивСуммаЗатраты[Индекс]);
			ДосписаниеСуммаБрак = ?(МассивСуммаБрак = Неопределено, 0, МассивСуммаБрак[Индекс]);
			ДосписаниеСуммаЗатратыОС = ?(МассивСуммаЗатратыОС = Неопределено, 0, МассивСуммаЗатратыОС[Индекс]);
			ДосписаниеСуммаРеализация = ?(МассивСуммаРеализация = Неопределено, 0, МассивСуммаРеализация[Индекс]);
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				
				ДосписаниеСуммаНУПеремещение = ?(МассивСуммаНУПеремещение = Неопределено, 0, МассивСуммаНУПеремещение[Индекс]);
				ДосписаниеСуммаНУНЗП = ?(МассивСуммаНУНЗП = Неопределено, 0, МассивСуммаНУНЗП[Индекс]);
				ДосписаниеСуммаНУЗатраты = ?(МассивСуммаНУЗатраты = Неопределено, 0, МассивСуммаНУЗатраты[Индекс]);
				ДосписаниеСуммаНУБрак = ?(МассивСуммаНУБрак = Неопределено, 0, МассивСуммаНУБрак[Индекс]);
				ДосписаниеСуммаНУЗатратыОС = ?(МассивСуммаНУЗатратыОС = Неопределено, 0, МассивСуммаНУЗатратыОС[Индекс]);
				ДосписаниеСуммаНУРеализация = ?(МассивСуммаНУРеализация = Неопределено, 0, МассивСуммаНУРеализация[Индекс]);
				
				ДосписаниеНДСКредитПеремещение = ?(МассивНДСКредитПеремещение = Неопределено, 0, МассивНДСКредитПеремещение[Индекс]);
				ДосписаниеНДСКредитНЗП = ?(МассивНДСКредитНЗП = Неопределено, 0, МассивНДСКредитНЗП[Индекс]);
				ДосписаниеНДСКредитЗатраты = ?(МассивНДСКредитЗатраты = Неопределено, 0, МассивНДСКредитЗатраты[Индекс]);
				ДосписаниеНДСКредитБрак = ?(МассивНДСКредитБрак = Неопределено, 0, МассивНДСКредитБрак[Индекс]);
				ДосписаниеНДСКредитЗатратыОС = ?(МассивНДСКредитЗатратыОС = Неопределено, 0, МассивНДСКредитЗатратыОС[Индекс]);
				ДосписаниеНДСКредитРеализация = ?(МассивНДСКредитРеализация = Неопределено, 0, МассивНДСКредитРеализация[Индекс]);
				
				ДосписаниеНДСВходящийПеремещение = ?(МассивНДСВходящийПеремещение = Неопределено, 0, МассивНДСВходящийПеремещение[Индекс]);
				ДосписаниеНДСВходящийНЗП = ?(МассивНДСВходящийНЗП = Неопределено, 0, МассивНДСВходящийНЗП[Индекс]);
				ДосписаниеНДСВходящийЗатраты = ?(МассивНДСВходящийЗатраты = Неопределено, 0, МассивНДСВходящийЗатраты[Индекс]);
				ДосписаниеНДСВходящийБрак = ?(МассивНДСВходящийБрак = Неопределено, 0, МассивНДСВходящийБрак[Индекс]);
				ДосписаниеНДСВходящийЗатратыОС = ?(МассивНДСВходящийЗатратыОС = Неопределено, 0, МассивНДСВходящийЗатратыОС[Индекс]);
				ДосписаниеНДСВходящийРеализация = ?(МассивНДСВходящийРеализация = Неопределено, 0, МассивНДСВходящийРеализация[Индекс]);
				
			Иначе
				
				ДосписаниеСуммаНУПеремещение = 0;
				ДосписаниеСуммаНУНЗП =  0;
				ДосписаниеСуммаНУЗатраты = 0;
				ДосписаниеСуммаНУБрак = 0;
				ДосписаниеСуммаНУЗатратыОС = 0;
				ДосписаниеСуммаНУРеализация = 0;
				
				ДосписаниеНДСКредитПеремещение = 0;
				ДосписаниеНДСКредитНЗП = 0;
				ДосписаниеНДСКредитЗатраты = 0;
				ДосписаниеНДСКредитБрак = 0;
				ДосписаниеНДСКредитЗатратыОС = 0;
				ДосписаниеНДСКредитРеализация = 0;
				
				ДосписаниеНДСВходящийПеремещение = 0;
				ДосписаниеНДСВходящийНЗП = 0;
				ДосписаниеНДСВходящийЗатраты = 0;
				ДосписаниеНДСВходящийБрак = 0;
				ДосписаниеНДСВходящийЗатратыОС = 0;
				ДосписаниеНДСВходящийРеализация = 0;
				
			КонецЕсли; 
			
			НаправлениеИспользования = "";
			Сумма = 0;
			СуммаНУ = 0;
			НДСКредит = 0;
			НДСВходящий = 0;
			Если ДосписаниеСуммаНЗП <> 0 ИЛИ ДосписаниеСуммаНУНЗП <> 0 ИЛИ ДосписаниеНДСКредитНЗП <> 0 ИЛИ ДосписаниеНДСВходящийНЗП <> 0 Тогда
				НаправлениеИспользования = "НЗП";
				Сумма = ДосписаниеСуммаНЗП;
				СуммаНУ = ДосписаниеСуммаНУНЗП;
				НДСКредит = ДосписаниеНДСКредитНЗП;
				НДСВходящий = ДосписаниеНДСВходящийНЗП;
			ИначеЕсли ДосписаниеСуммаЗатраты <> 0 ИЛИ ДосписаниеСуммаНУЗатраты <> 0 ИЛИ ДосписаниеНДСКредитЗатраты <> 0 ИЛИ ДосписаниеНДСВходящийЗатраты <> 0 Тогда
				НаправлениеИспользования = "Затраты";
				Сумма = ДосписаниеСуммаЗатраты;
				СуммаНУ = ДосписаниеСуммаНУЗатраты;
				НДСКредит = ДосписаниеНДСКредитЗатраты;
				НДСВходящий = ДосписаниеНДСВходящийЗатраты;
			ИначеЕсли ДосписаниеСуммаБрак <> 0 ИЛИ ДосписаниеСуммаНУБрак <> 0 ИЛИ ДосписаниеНДСКредитБрак <> 0 ИЛИ ДосписаниеНДСВходящийБрак <> 0 Тогда
				НаправлениеИспользования = "Брак";
				Сумма = ДосписаниеСуммаБрак;
				СуммаНУ = ДосписаниеСуммаНУБрак;
				НДСКредит = ДосписаниеНДСКредитБрак;
				НДСВходящий = ДосписаниеНДСВходящийБрак;
			ИначеЕсли ДосписаниеСуммаЗатратыОС <> 0 ИЛИ ДосписаниеСуммаНУЗатратыОС <> 0 ИЛИ ДосписаниеНДСКредитЗатратыОС <> 0 ИЛИ ДосписаниеНДСВходящийЗатратыОС <> 0 Тогда
				НаправлениеИспользования = "ЗатратыОС";
				Сумма = ДосписаниеСуммаЗатратыОС;
				СуммаНУ = ДосписаниеСуммаНУЗатратыОС;
				НДСКредит = ДосписаниеНДСКредитЗатратыОС;
				НДСВходящий = ДосписаниеНДСВходящийЗатратыОС;
			ИначеЕсли ДосписаниеСуммаРеализация <> 0 ИЛИ ДосписаниеСуммаНУРеализация <> 0 ИЛИ ДосписаниеНДСКредитРеализация <> 0 ИЛИ ДосписаниеНДСВходящийРеализация <> 0 Тогда
				НаправлениеИспользования = "Себестоимость";
				Сумма = ДосписаниеСуммаРеализация;
				СуммаНУ = ДосписаниеСуммаНУРеализация;
				НДСКредит = ДосписаниеНДСКредитРеализация;
				НДСВходящий = ДосписаниеНДСВходящийРеализация;
			ИначеЕсли ДосписаниеСуммаПеремещение <> 0 ИЛИ ДосписаниеСуммаНУПеремещение <> 0 ИЛИ ДосписаниеНДСКредитПеремещение <> 0 ИЛИ ДосписаниеНДСВходящийПеремещение <> 0 Тогда
				НаправлениеИспользования = "Перемещение";
				Сумма = ДосписаниеСуммаПеремещение;
				СуммаНУ = ДосписаниеСуммаНУПеремещение;
				НДСКредит = ДосписаниеНДСКредитПеремещение;
				НДСВходящий = ДосписаниеНДСВходящийПеремещение;
			КонецЕсли; 
			
			ДосписатьТЗРПоНаправлениюИспользования(
				СтруктураШапкиДокумента,
				НаправлениеИспользования,
				ВыборкаПоЗатратам,
				ВыборкаПартии,
				ВыборкаРаспределениеПоПроектам,
				Сумма,
				СуммаНУ,
				НДСВходящий,
				НДСКредит,
				СтруктураДвижений
			);
			
			Индекс = Индекс + 1;
			
		КонецЦикла; 
		
	КонецЦикла;	
	
КонецПроцедуры // РаспределениеТранспортноЗаготовительныхРасходов()

// Процедура формирует движения по распределению ТЗР по направлениям использования
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска".
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	ВыборкаРаспределениеПоПроектам - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса по коэффициентам распределения по проектам
//	НомерПередела - Число - Текущий номер передела
//  СуммаЗатрат - Число - Полная сумма затрат на выпуск продукции
//  СуммаКорректировки - Число - Разница между полной суммой затрат и учетной суммой выпуска продукции в течение месяца
//  СтруктураДвижений - Структура - Наборы движений по регистрам
//
Процедура ДосписатьТЗРПоНаправлениюИспользования(
	СтруктураШапкиДокумента,
	НаправлениеИспользования,
	СтрокаВыборкиЗатраты,
	СтрокаВыборкиПартии,
	ВыборкаРаспределениеПоПроектам,
	Сумма,
	СуммаНУ = 0,
	НДСВходящий = 0,
	НДСКредит = 0,
	СтруктураДвижений
	)
	
	
	Если НаправлениеИспользования = "" Тогда
		Возврат;
	КонецЕсли; 
	
	Если НаправлениеИспользования = "Перемещение" И СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		// в управленческом учете досписание перемещения не требуется
		Возврат;
	КонецЕсли; 
	
	НаборЗаписейЗатраты = СтруктураДвижений.ДвиженияЗатраты;
	
	НоваяСтрока = НаборЗаписейЗатраты.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	НоваяСтрока.Подразделение = СтрокаВыборкиЗатраты.Подразделение;
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборкиЗатраты.СтатьяЗатрат;
	НоваяСтрока.Заказ = СтрокаВыборкиЗатраты.Заказ;
	НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборкиЗатраты.НоменклатурнаяГруппа;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета = СтрокаВыборкиЗатраты.СчетУчета;
	КонецЕсли;
	
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийЗатраты.СписаниеТранспортноЗаготовительныеРасходы_Регламент;
	
	НоваяСтрока.Сумма = Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		НоваяСтрока.НалоговоеНазначение  = СтрокаВыборкиЗатраты.НалоговоеНазначение;
		НоваяСтрока.СуммаНУ = СуммаНУ;
		НоваяСтрока.НДСВходящий = НДСВходящий;
		НоваяСтрока.НДСКредит = НДСКредит;
		
	КонецЕсли; 
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатраты.Количество() = 1000 Тогда
		НаборЗаписейЗатраты.Записать(Ложь);
	КонецЕсли;
		
	// Формирование движений по списанным затратам по регистру "Затраты (обороты)".
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		РаспределитьСписанныеЗатратыПоПроектам(
			СтруктураШапкиДокумента,
			СтрокаВыборкиЗатраты,
			ВыборкаРаспределениеПоПроектам,
			Сумма,
			СтруктураДвижений.ДвиженияЗатратыОбороты
		);
		
	КонецЕсли;
	
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		// проводка по БУ по досписанию ТЗР (направление использования - кор. счет и субконто, кроме перемещения)
		// для перемещения - перемещаем на счет учета ТЗР другой группы, эти ТЗР будет распредены только в следующем месяце
		РегистрБухгалтерииНаборЗаписей = СтруктураДвижений.Операция;
		
		НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
		НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Активность = Истина;
		НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
		
		НоваяПроводка.Содержание = "Распределение ТЗР на " + НаправлениеИспользования;
		НоваяПроводка.Сумма = Сумма;
		
		
		Если НаправлениеИспользования <> "Перемещение" Тогда
			НоваяПроводка.СчетДт = СтрокаВыборкиПартии.КорСчет;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1 , СтрокаВыборкиПартии.КорСубконто1);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2 , СтрокаВыборкиПартии.КорСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3 , СтрокаВыборкиПартии.КорСубконто3);
		Иначе	
			Если СтрокаВыборкиЗатраты.СчетУчета = ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы Тогда
				НоваяПроводка.СчетДт = ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТовары;
			Иначе
				НоваяПроводка.СчетДт = ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтрокаВыборкиЗатраты.Подразделение);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборкиЗатраты.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборкиЗатраты.СтатьяЗатрат);
			НоваяПроводка.Содержание = "Перемещение ТЗР";
		КонецЕсли; 
		
		НоваяПроводка.НалоговоеНазначениеДт = СтрокаВыборкиПартии.НалоговоеНазначениеПолучатель;
		НоваяПроводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеДт, СуммаНУ);
											
		НоваяПроводка.СчетКт = СтрокаВыборкиЗатраты.СчетУчета;
		
		Если Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "Подразделения") Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтрокаВыборкиЗатраты.Подразделение);
		КонецЕсли;	
		Если Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "НоменклатурныеГруппы") Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборкиЗатраты.НоменклатурнаяГруппа);
		КонецЕсли;	
		Если Не УправлениеПроизводством.ПроверитьСубконтоНаОборотное(НоваяПроводка.СчетКт, "СтатьиЗатрат") Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтрокаВыборкиЗатраты.СтатьяЗатрат);
		КонецЕсли;
		
		НоваяПроводка.НалоговоеНазначениеКт = СтрокаВыборкиЗатраты.НалоговоеНазначение;
		НоваяПроводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеКт, СуммаНУ);
		
		// Если в наборе записей 1000 строк, запишем набор.
		Если РегистрБухгалтерииНаборЗаписей.Количество() = 1000 Тогда
			РегистрБухгалтерииНаборЗаписей.Записать(Ложь);
		КонецЕсли;
	 КонецЕсли;
	
	// движения по регистрам в зависимости от направления использования
	Если НаправлениеИспользования = "НЗП" Тогда
		
		// досписание ТЗР в НЗП
		
		НаборЗаписейНезавершенноеПроизводство = СтруктураДвижений.ДвиженияНЗП;
		
		НоваяСтрока = НаборЗаписейНезавершенноеПроизводство.Добавить();
		НоваяСтрока.Активность = Истина;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
		
		Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СчетУчета = СтрокаВыборкиПартии.КорСчет;
		КонецЕсли;
		
		НоваяСтрока.Подразделение        = СтрокаВыборкиПартии.Подразделение;
		НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборкиПартии.НоменклатурнаяГруппаЗатрат;
		НоваяСтрока.СтатьяЗатрат         = СтрокаВыборкиПартии.СтатьяЗатрат;
		НоваяСтрока.Заказ                = СтрокаВыборкиПартии.Заказ;
		
		НоваяСтрока.Затрата = СтрокаВыборкиПартии.Номенклатура;
		НоваяСтрока.ХарактеристикаЗатраты = СтрокаВыборкиПартии.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияЗатраты = СтрокаВыборкиПартии.СерияНоменклатуры;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			НоваяСтрока.НалоговоеНазначение  = СтрокаВыборкиПартии.НалоговоеНазначениеПолучатель;
		КонецЕсли; 
		
		НоваяСтрока.КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно; 
		НоваяСтрока.НомерПередела = 0;
		
		НоваяСтрока.Стоимость = Сумма;
		НоваяСтрока.Количество  = 0;
		
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
			НоваяСтрока.СтоимостьНУ = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначение, СуммаНУ);
			НоваяСтрока.НДСВходящий = НДСВходящий;
			НоваяСтрока.НДСКредит = НДСКредит;
			
		КонецЕсли; 
		
		// Если в наборе записей 1000 строк, запишем набор.
		Если НаборЗаписейНезавершенноеПроизводство.Количество() = 1000 Тогда
			НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
		КонецЕсли;
		
	ИначеЕсли НаправлениеИспользования = "Затраты" Тогда
		
		// досписание ТЗР в затраты
		
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			
			// в управленческом учете необходимо распределение по проектам
		
			Если Не СтруктураШапкиДокумента.ВедениеУчетаЗатратПоПроектам Тогда
				Проект = Справочники.Проекты.ПустаяСсылка();
			Иначе
				Проект = СтрокаВыборкиПартии.Проект;
			КонецЕсли;
			
			ВсегоБазаРаспределения = 0;
			Если ТипЗнч(Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам") Тогда
				
				СтруктураПоиска = Новый Структура("ВидРаспределения", Проект);
				
				МассивКоэф = Новый Массив;
				
				ВыборкаРаспределениеПоПроектам.Сбросить();
				Пока ВыборкаРаспределениеПоПроектам.НайтиСледующий(СтруктураПоиска) Цикл
					МассивКоэф.Добавить(ВыборкаРаспределениеПоПроектам.ДоляРаспределения);
					ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаРаспределениеПоПроектам.ДоляРаспределения;
				КонецЦикла;
				
				Если ВсегоБазаРаспределения = 0 Тогда
					Сообщить("Не удалось выполнить распределение затрат по виду распределения """ + Проект + """", СтатусСообщения.Внимание);
					Проект = Справочники.Проекты.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
				
			Если ВсегоБазаРаспределения <> 0 Тогда
					
				МассивСумма = ОбщегоНазначения.РаспределитьПропорционально(Сумма, МассивКоэф, 2);
					
				Индекс = 0;
				ВыборкаРаспределениеПоПроектам.Сбросить();
				Пока ВыборкаРаспределениеПоПроектам.НайтиСледующий(СтруктураПоиска) Цикл
						
					СуммаПоПроекту = МассивСумма[Индекс];
						
					СформироватьДвиженияПоРегиструЗатратыПриходИзТЗР(
						СтруктураШапкиДокумента,
						СтрокаВыборкиПартии,
						СуммаПоПроекту,
						0, // СуммаНУ,
						0, // НДСВходящий,
						0, // НДСКредит,
						НаборЗаписейЗатраты,
						ВыборкаРаспределениеПоПроектам.Проект
					);
					
						
					Индекс = Индекс + 1;
						
				КонецЦикла;
					
			Иначе
				
				СформироватьДвиженияПоРегиструЗатратыПриходИзТЗР(
					СтруктураШапкиДокумента,
					СтрокаВыборкиПартии,
					Сумма,
					0, // СуммаНУ,
					0, // НДСВходящий,
					0, // НДСКредит,
					НаборЗаписейЗатраты,
					Проект
				);
				
				
			КонецЕсли;
		
		Иначе
		
			СформироватьДвиженияПоРегиструЗатратыПриходИзТЗР(
				СтруктураШапкиДокумента,
				СтрокаВыборкиПартии,
				Сумма,
				СуммаНУ,
				НДСВходящий,
				НДСКредит,
				НаборЗаписейЗатраты,
				Неопределено // Проект
			);
				
		КонецЕсли;		
		
		
	ИначеЕсли НаправлениеИспользования = "ЗатратыОС" Тогда
		
		// досписание на строительство ОС
		
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			
			СформироватьДвиженияПоРегиструСтроительствоОбъектовОсновныхСредств(
				СтруктураШапкиДокумента,
				СтрокаВыборкиПартии,
				Сумма,
				0, // СуммаНУ,
				0, // НДСВходящий, 
				0, // НДСКредит, 
				СтруктураДвижений.СтроительствоОбъектовОсновныхСредств
			);
				
			// подготовим требуемую "строку выборки" для СформироватьДвиженияПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств()
			СтрокаВыборки = Новый Структура;
			СтрокаВыборки.Вставить("ОбъектСтроительства", СтрокаВыборкиПартии.ОбъектСтроительства); 
			СтрокаВыборки.Вставить("СтатьяЗатратПолучатель", СтрокаВыборкиПартии.СтатьяЗатрат); 
				
			СформироватьДвиженияПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				Сумма,
				СтруктураДвижений.ЗатратыНаСтроительствоОбъектовОсновныхСредств
			);
			
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
			СтрокаВыборки = Новый Структура;
			СтрокаВыборки.Вставить("ОбъектСтроительства", СтрокаВыборкиПартии.ОбъектСтроительства); 
			СтрокаВыборки.Вставить("НалоговоеНазначениеПолучатель", СтрокаВыборкиПартии.НалоговоеНазначениеПолучатель); 
			СтрокаВыборки.Вставить("СчетДт", СтрокаВыборкиПартии.КорСчет);
			
			СформироватьДвиженияПоРегиструСтроительствоОбъектовОсновныхСредств(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				Сумма,
				СуммаНУ,
				НДСВходящий, 
				НДСКредит, 
				СтруктураДвижений.ДвиженияСтроительствоОбъектовОС_БУ
			);
		КонецЕсли;
		
	ИначеЕсли НаправлениеИспользования = "Брак" Тогда
		
		НаборЗаписейБракВПроизводстве = СтруктураДвижений.ДвиженияБракВПроизводстве;

		НоваяСтрока = НаборЗаписейБракВПроизводстве.Добавить();
		НоваяСтрока.Активность = Истина;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
		
		НоваяСтрока.Подразделение        = СтрокаВыборкиПартии.Подразделение;
		НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборкиПартии.НоменклатурнаяГруппаЗатрат;
		НоваяСтрока.СтатьяЗатрат         = СтрокаВыборкиПартии.СтатьяЗатрат;
		НоваяСтрока.Заказ                = СтрокаВыборкиПартии.Заказ;
		
		НоваяСтрока.Продукция               = СтрокаВыборкиПартии.Продукция;
		// для брака необходимо использовать Новые
		НоваяСтрока.ХарактеристикаПродукции = СтрокаВыборкиПартии.ХарактеристикаНоменклатурыНовая;
		НоваяСтрока.СерияПродукции          = СтрокаВыборкиПартии.СерияНоменклатурыНовая;
		
		Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СчетУчета = СтрокаВыборкиПартии.КорСчет;
		КонецЕсли;
		
		НоваяСтрока.КодОперации = Перечисления.КодыОперацийБракВПроизводстве.СписаниеПартийВПроизводствоОперативно;
		
		НоваяСтрока.Сумма = Сумма;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
			НоваяСтрока.НалоговоеНазначение = СтрокаВыборкиПартии.НалоговоеНазначениеПолучатель;
			НоваяСтрока.СуммаНУ = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначение, СуммаНУ);
			НоваяСтрока.НДСВходящий = НДСВходящий;
			НоваяСтрока.НДСКредит = НДСКредит;
			
		КонецЕсли; 
		
		// Если в наборе записей 1000 строк, запишем набор.
		Если НаборЗаписейБракВПроизводстве.Количество() = 1000 Тогда
			НаборЗаписейБракВПроизводстве.Записать(Ложь);
		КонецЕсли;
		
	ИначеЕсли НаправлениеИспользования = "Себестоимость" Тогда
		
		
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			
			// подготовим требуемую "строку выборки" для РаспределитьПродажиСебестоимостьПоПроектам()
			СтрокаВыборки = Новый Структура;
			
			СтрокаВыборки.Вставить("ДокументВыпускаПроект", 0); 
			СтрокаВыборки.Вставить("Проект", СтрокаВыборкиПартии.Проект); 
			СтрокаВыборки.Вставить("Количество", 0); 
			СтрокаВыборки.Вставить("Продукция", СтрокаВыборкиПартии.Номенклатура); 
			СтрокаВыборки.Вставить("ХарактеристикаПродукции", СтрокаВыборкиПартии.ХарактеристикаНоменклатуры); 
			СтрокаВыборки.Вставить("Заказ", СтрокаВыборкиПартии.Заказ); 
			СтрокаВыборки.Вставить("ДокументВыпуска", СтрокаВыборкиПартии.ДокументОприходования); 
			СтрокаВыборки.Вставить("Подразделение", СтрокаВыборкиПартии.Подразделение); 
			
			СтрокаВыборки.Вставить("ДокументДвижения",       СтрокаВыборкиПартии.Регистратор); 
			СтрокаВыборки.Вставить("ДокументДвиженияПериод", СтрокаВыборкиПартии.РегистраторДата); 
			
			РаспределитьПродажиСебестоимостьПоПроектам(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ВыборкаРаспределениеПоПроектам,
				Сумма,
				СтруктураДвижений.ДвиженияПродажиСебестоимость,
				Истина // ПризнакДокументаДвижения
			);
			
		КонецЕсли;
		
		
	ИначеЕсли НаправлениеИспользования = "Перемещение" Тогда
		
		// досписание ТЗР на перемещение - перемещение на ТЗР другой группы
		
		// движения по приходу ТЗР по регистру Затраты
		НаборЗаписейЗатраты = СтруктураДвижений.ДвиженияЗатраты;
		
		НоваяСтрока = НаборЗаписейЗатраты.Добавить();
		НоваяСтрока.Активность = Истина;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
		
		НоваяСтрока.Подразделение = СтрокаВыборкиЗатраты.Подразделение;
		НоваяСтрока.СтатьяЗатрат = СтрокаВыборкиЗатраты.СтатьяЗатрат;
		НоваяСтрока.Заказ = СтрокаВыборкиЗатраты.Заказ;
		НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборкиЗатраты.НоменклатурнаяГруппа;
		
		Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
			
			Если СтрокаВыборкиЗатраты.СчетУчета = ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы Тогда
				НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТовары;
			Иначе
				НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.КодОперации = Перечисления.КодыОперацийЗатраты.СписаниеТранспортноЗаготовительныеРасходы_Регламент;
		
		НоваяСтрока.Сумма = Сумма;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			
			НоваяСтрока.НалоговоеНазначение = СтрокаВыборкиЗатраты.НалоговоеНазначение;
			
			НоваяСтрока.СуммаНУ     = СуммаНУ;
			НоваяСтрока.НДСВходящий = НДСВходящий;
			НоваяСтрока.НДСКредит   = НДСКредит;
			
		КонецЕсли; 
		
		// Если в наборе записей 1000 строк, запишем набор.
		Если НаборЗаписейЗатраты.Количество() = 1000 Тогда
			НаборЗаписейЗатраты.Записать(Ложь);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // ДосписатьТЗРПоНаправлениюИспользования()

// Процедура формирует движение по распределению затрат по регистру "Затраты".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  Сумма - Число - Сумма затрат
//	НаборЗаписейЗатраты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты".
//
Процедура СформироватьДвиженияПоРегиструЗатратыПриходИзТЗР(
	СтруктураШапкиДокумента,
	СтрокаВыборкиПартии,
	Сумма,
	СуммаНУ = 0,
	НДСВходящий = 0,
	НДСКредит = 0,
	НаборЗаписейЗатраты,
	Проект = Неопределено
	)
	
	Если Сумма = 0
		И СуммаНУ = 0
		И НДСВходящий = 0
		И НДСКредит = 0
		Тогда
		Возврат;
	КонецЕсли;
	
	
	// В движениях по регистру "Затраты" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Проект,
	//	- НалоговоеНазначение - заполняется только при отражении документа в бухгалтерском учете
	
	НоваяСтрока = НаборЗаписейЗатраты.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	НоваяСтрока.Подразделение        = СтрокаВыборкиПартии.Подразделение;
	НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборкиПартии.НоменклатурнаяГруппаЗатрат;
	НоваяСтрока.СтатьяЗатрат         = СтрокаВыборкиПартии.СтатьяЗатрат;
	НоваяСтрока.Заказ                = СтрокаВыборкиПартии.Заказ;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета = СтрокаВыборкиПартии.КорСчет;
	Иначе
		НоваяСтрока.Проект = Проект;
	КонецЕсли;
	
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийЗатраты.СписаниеПартийВПроизводствоОперативно;
	
	НоваяСтрока.Сумма = Сумма;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		НоваяСтрока.НалоговоеНазначение = СтрокаВыборкиПартии.НалоговоеНазначениеПолучатель;
		
		НоваяСтрока.СуммаНУ     = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяСтрока.НалоговоеНазначение, СуммаНУ);
		НоваяСтрока.НДСВходящий = НДСВходящий;
		НоваяСтрока.НДСКредит   = НДСКредит;
		
	КонецЕсли; 
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатраты.Количество() = 1000 Тогда
		НаборЗаписейЗатраты.Записать(Ложь);
	КонецЕсли;
	

КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыПриходИзТЗР()

// Функция получает построитель запроса по партиям товаров
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	РезультатЗапросаПоПартиям - РезультатЗапроса - Результат выполнения запроса по партиям товаров
//  РасчетПоНУ - Булево - признак расчета по налоговому учету
//
// Возвращаемое значение:
//	ПостроительЗапроса - построитель запроса.
//
Функция ПолучитьПостроительЗапросаПоПартиямТоваров(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоПартиям
	)
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(РезультатЗапросаПоПартиям);
	ПостроительЗапроса.Отбор.Добавить("НоменклатурнаяГруппа");
	
	ПостроительЗапроса.Отбор.НоменклатурнаяГруппа.Использование = Истина;
	ПостроительЗапроса.Отбор.НоменклатурнаяГруппа.ВидСравнения = ВидСравнения.Равно;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПостроительЗапроса.Отбор.Добавить("НалоговоеНазначение");
		ПостроительЗапроса.Отбор.НалоговоеНазначение.Использование = Истина;
		ПостроительЗапроса.Отбор.НалоговоеНазначение.ВидСравнения = ВидСравнения.Равно; 	
	КонецЕсли; 
	
	Возврат ПостроительЗапроса;

КонецФункции // ПолучитьПостроительЗапросаПоПартиямТоваров()

// Функция проверяет отбор и устанавливает параметры отбора построителя запроса по партиям товаров.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	НоменклатурнаяГруппа - СправочникСсылка.НоменклатурныеГруппы - Заданная номенклатурная группа
//
// Выходные параметры
//	ПостроительЗапроса - ПостроительЗапроса - построитель запроса.
//
// Возвращаемое значение:
//	Булево - Истина - установлен новый отбор,
//			 Ложь - значения отбора не изменились.
//
Функция ПроверитьИУстановитьОтборПостроителяЗапросаПоПартиямТоваров(
	СтруктураШапкиДокумента,
	НоменклатурнаяГруппа,
	НалоговоеНазначение,
	ПостроительЗапроса
	)
	
	ОтборСоответствуетАналитике = Ложь;
	Если ПостроительЗапроса.Отбор.НоменклатурнаяГруппа.Значение = НоменклатурнаяГруппа
	Тогда
		ОтборСоответствуетАналитике = Истина;
	КонецЕсли;
			
	Если Не ОтборСоответствуетАналитике Тогда
		ПостроительЗапроса.Отбор.НоменклатурнаяГруппа.Значение = НоменклатурнаяГруппа;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если ПостроительЗапроса.Отбор.НалоговоеНазначение.Значение = НалоговоеНазначение Тогда
		Иначе
		 	ПостроительЗапроса.Отбор.НалоговоеНазначение.Значение = НалоговоеНазначение;
		  	ОтборСоответствуетАналитике = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не ОтборСоответствуетАналитике;

КонецФункции // ПроверитьИУстановитьОтборПостроителяЗапросаПоПартиямТоваров()

// Функция получает построитель запроса по начальным остаткам партий товаров
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	РезультатЗапросаПоНачальнымОстаткам - РезультатЗапроса - Результат выполнения запроса по партиям товаров
//  РасчетПоНУ - Булево - признак расчета по налоговому учету
//
// Возвращаемое значение:
//	ПостроительЗапроса - построитель запроса.
//
Функция ПолучитьПостроительЗапросаПоНачальнымОстаткам(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоНачальнымОстаткам
	)
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(РезультатЗапросаПоНачальнымОстаткам);
	ПостроительЗапроса.Отбор.Добавить("НоменклатурнаяГруппа");
	
	ПостроительЗапроса.Отбор.НоменклатурнаяГруппа.Использование = Истина;
	ПостроительЗапроса.Отбор.НоменклатурнаяГруппа.ВидСравнения = ВидСравнения.Равно;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПостроительЗапроса.Отбор.Добавить("НалоговоеНазначение");
		ПостроительЗапроса.Отбор.НалоговоеНазначение.Использование = Истина;
		ПостроительЗапроса.Отбор.НалоговоеНазначение.ВидСравнения = ВидСравнения.Равно; 	
	КонецЕсли; 
	
	Возврат ПостроительЗапроса;

КонецФункции // ПолучитьПостроительЗапросаПоНачальнымОстаткам()

// Функция проверяет отбор и устанавливает параметры отбора построителя запроса по начальным остаткам партий товаров.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	НоменклатурнаяГруппа - СправочникСсылка.НоменклатурныеГруппы - Заданная номенклатурная группа
//
// Выходные параметры
//	ПостроительЗапроса - ПостроительЗапроса - построитель запроса.
//
// Возвращаемое значение:
//	Булево - Истина - установлен новый отбор,
//			 Ложь - значения отбора не изменились.
//
Функция ПроверитьИУстановитьОтборПостроителяЗапросаПоНачальнымОстаткам(
	СтруктураШапкиДокумента,
	НоменклатурнаяГруппа,
	НалоговоеНазначение,
	ПостроительЗапроса
	)
	
	ОтборСоответствуетАналитике = Ложь;
	Если ПостроительЗапроса.Отбор.НоменклатурнаяГруппа.Значение = НоменклатурнаяГруппа
	Тогда
		ОтборСоответствуетАналитике = Истина;
	КонецЕсли;
			
	Если Не ОтборСоответствуетАналитике Тогда
		ПостроительЗапроса.Отбор.НоменклатурнаяГруппа.Значение = НоменклатурнаяГруппа;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если ПостроительЗапроса.Отбор.НалоговоеНазначение.Значение = НалоговоеНазначение 
			Тогда
		Иначе
			ПостроительЗапроса.Отбор.НалоговоеНазначение.Значение = НалоговоеНазначение;
			ОтборСоответствуетАналитике = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не ОтборСоответствуетАналитике;

КонецФункции // ПроверитьИУстановитьОтборПостроителяЗапросаПоНачальнымОстаткам()

// Функция получает построитель запроса по поступлению партий товаров
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	РезультатЗапросаПоПоступлению - РезультатЗапроса - Результат выполнения запроса по поступлению 
//  РасчетПоНУ - Булево - признак расчета по налоговому учету
//
// Возвращаемое значение:
//	ПостроительЗапроса - построитель запроса.
//
Функция ПолучитьПостроительЗапросаПоПоступлению(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоПоступлению
	)
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(РезультатЗапросаПоПоступлению);
	ПостроительЗапроса.Отбор.Добавить("НоменклатурнаяГруппа");
	
	ПостроительЗапроса.Отбор.НоменклатурнаяГруппа.Использование = Истина;
	ПостроительЗапроса.Отбор.НоменклатурнаяГруппа.ВидСравнения = ВидСравнения.Равно;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПостроительЗапроса.Отбор.Добавить("НалоговоеНазначение");
		ПостроительЗапроса.Отбор.НалоговоеНазначение.Использование = Истина;
		ПостроительЗапроса.Отбор.НалоговоеНазначение.ВидСравнения = ВидСравнения.Равно; 	
	КонецЕсли; 
	
	Возврат ПостроительЗапроса;

КонецФункции // ПолучитьПостроительЗапросаПоПоступлению()

// Функция проверяет отбор и устанавливает параметры отбора построителя запроса по поступлению партий товаров.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//	НоменклатурнаяГруппа - СправочникСсылка.НоменклатурныеГруппы - Заданная номенклатурная группа
//
// Выходные параметры
//	ПостроительЗапроса - ПостроительЗапроса - построитель запроса.
//
// Возвращаемое значение:
//	Булево - Истина - установлен новый отбор,
//			 Ложь - значения отбора не изменились.
//
Функция ПроверитьИУстановитьОтборПостроителяЗапросаПоПоступлению(
	СтруктураШапкиДокумента,
	НоменклатурнаяГруппа,
	НалоговоеНазначение,
	ПостроительЗапроса
	)
	
	ОтборСоответствуетАналитике = Ложь;
	Если ПостроительЗапроса.Отбор.НоменклатурнаяГруппа.Значение = НоменклатурнаяГруппа
	Тогда
		ОтборСоответствуетАналитике = Истина;
	КонецЕсли;
			
	Если Не ОтборСоответствуетАналитике Тогда
		ПостроительЗапроса.Отбор.НоменклатурнаяГруппа.Значение = НоменклатурнаяГруппа;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если ПостроительЗапроса.Отбор.НалоговоеНазначение.Значение = НалоговоеНазначение 
			Тогда
		Иначе
			ПостроительЗапроса.Отбор.НалоговоеНазначение.Значение = НалоговоеНазначение;
			ОтборСоответствуетАналитике = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не ОтборСоответствуетАналитике;

КонецФункции // ПроверитьИУстановитьОтборПостроителяЗапросаПоПоступлению()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДВИЖЕНИЙ ПО КОРРЕКТИРОВКАМ ИСПОЛЬЗОВАНИЯ В НУ 

// Процедура формирует движение по регистрам КорректировкиНезавершенноеПроизводствоНалоговыйУчет
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска"
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по базе распределения
//	СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - Статья затрат
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат или Неопределено - Текущий характер затрат
//	Затрата - ПеречислениеСсылка.ХарактерЗатрат или СправочникСсылка.Номенклатура,
//	ХарактеристикаЗатраты - СправочникСсылка.ХарактеристикиНоменклатуры (используется только для производственных расходов),
//	СерияЗатраты - СправочникСсылка.СерииНоменклатуры (используется только для производственных расходов),
//	НомерПередела - Число - Текущий номер передела, для которого производится расчет себестоимости
//	Количество - Число - Количество затрат (используется только для производственных расходов)
//  Сумма - Число - Сумма затрат
//	ВидДвижения - ВидДвиженияНакопления - Текущий вид движения
//	НаборЗаписейКорректировки - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления 
//
Процедура СформироватьДвиженияПоРегиструКорректировкиНалоговыйУчет(
	СтруктураШапкиДокумента,
	СтрокаВыборкиПоЗатратам,
	СтрокаВыборкиПоЗатратамНаВыпуск,
	НДСКредит, 
	НДСКредитПоФакту,
	ВидДвижения,
	НаборЗаписейКорректировкиНалоговыйУчет
	)
	
	//Если НДСКредит = 0 И НДСКредитПоФакту = 0 И СуммаВР = 0 И СуммаВРПоФакту = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если ВидДвижения <> ВидДвиженияНакопления.Приход
	   И ВидДвижения <> ВидДвиженияНакопления.Расход Тогда
	   
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид движения!
					|Процедура <СформироватьДвиженияПоРегиструКорректировкиНалоговыйУчет>");
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Корректировки незавершенное производство (НУ)" должны быть заполнены измерения:
	//	- Организация, 
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Затрата - заполняется характер затрат или номенклатура
	//  - НалоговоеНазначение,
	//  - НалоговоеНазначениеПоФакту
	
	НоваяСтрока = НаборЗаписейКорректировкиНалоговыйУчет.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Период;
	
	НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборкиПоЗатратам);
	
	НоваяСтрока.НалоговоеНазначениеПоФакту       = СтрокаВыборкиПоЗатратамНаВыпуск.НалоговоеНазначениеПоФакту;
	Если НоваяСтрока.НалоговоеНазначениеПоФакту = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
	    НоваяСтрока.НалоговоеНазначениеПоФакту = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
	КонецЕсли;
	
	НоваяСтрока.НДСКредит                       = НДСКредит;
	НоваяСтрока.НДСКредитПоФакту                = НДСКредитПоФакту;
				
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийКорректировкиИспользованияНалоговыйУчет.ПредполагаемаяКорректрировка;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейКорректировкиНалоговыйУчет.Количество() = 1000 Тогда
		НаборЗаписейКорректировкиНалоговыйУчет.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструКорректировкиНалоговыйУчет()

// Процедура формирует проводку по корректировке использования НЗП.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа "Расчет себестоимости выпуска".
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  Сумма - Число - Сумма проводки.
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьПроводкуПоКорректировкеИспользования(
	СтруктураШапкиДокумента,
	СтрокаВыборкиПоЗатратамНаВыпуск,
	Сумма,
	СуммаНУ,
	РегистрБухгалтерииНаборЗаписей, 
	СодержаниеПроводки,
	СтатьяЗатрат = Неопределено
	)
	
	Если Сумма = 0 И СуммаНУ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// проводка вида Дт 231 Кт 6443 Сторно
	НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
	НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
	НоваяПроводка.Активность = Истина;
	НоваяПроводка.Период = СтруктураШапкиДокумента.Период;
	НоваяПроводка.Содержание  = "Корректировка налогового кредита по использованию " + СодержаниеПроводки;
	НоваяПроводка.Сумма       = Сумма;
	
	НоваяПроводка.СчетДт = СтрокаВыборкиПоЗатратамНаВыпуск.СчетУчета;
	
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения"       , СтрокаВыборкиПоЗатратамНаВыпуск.Подразделение);
	БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборкиПоЗатратамНаВыпуск.НоменклатурнаяГруппа);
	Если СтатьяЗатрат <> Неопределено Тогда
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтатьяЗатрат);
	Иначе
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборкиПоЗатратамНаВыпуск.СтатьяЗатрат);
	КонецЕсли; 
	
	НоваяПроводка.СуммаНУДт              = СуммаНУ;
	НоваяПроводка.НалоговоеНазначениеДт  = СтрокаВыборкиПоЗатратамНаВыпуск.НалоговоеНазначениеПоФакту;
	
	// со счета корректировок
	НоваяПроводка.СчетКт = ПланыСчетов.Хозрасчетный.КорректировкиНалоговогоКредита;
 	
КонецПроцедуры // СформироватьПроводкуПоКорректировкеИспользования()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ СПИСКА ДЕЙСТВИЙ РАСЧЕТА СЕБЕСТОИМОСТИ

// Функция формирует массив для заполнения табличной части "Выполняемые действия".
//
Функция ПолучитьМассивВыполняемыхДействийРасширеннаяАналитика(ПериодРегистрации, Организация, ОтражатьВУправленческомУчете)
	
	МассивДействий = Новый Массив;
	
	
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетБазыРаспределенияРасходов);
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеРасходовПоБазе);
	
		
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетФактическойСебестоимости);
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.ФормированиеДвиженийПоРегистрам);
	
	Возврат МассивДействий;
	
КонецФункции // ПолучитьМассивВыполняемыхДействийРасширеннаяАналитика()

// Функция формирует массив для заполнения табличной части "Выполняемые действия".
//
Функция ПолучитьМассивВыполняемыхДействийТрадиционныйРежим(ПериодРегистрации, Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, СообщатьОбОшибке)
	
	Если ОтражатьВУправленческомУчете Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(ПериодРегистрации, СообщатьОбОшибке);
	Иначе
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ПериодРегистрации, Организация, СообщатьОбОшибке);
	КонецЕсли;
	
	МассивДействий = Новый Массив;
	
	Если Не ЗначениеЗаполнено(УчетнаяПолитика)  Тогда
		Возврат МассивДействий;
	КонецЕсли;
	
	РасчетПоПеределам = Ложь;
	РасчетПоПодразделениям = Ложь;
	Если УчетнаяПолитика.СпособРасчетаСебестоимостиОсновногоПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		РасчетПоПеределам = Истина;
	ИначеЕсли УчетнаяПолитика.СпособРасчетаСебестоимостиОсновногоПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям Тогда
		РасчетПоПодразделениям = Истина;
	КонецЕсли;
	
	Если УчетнаяПолитика.СпособРасчетаСебестоимостиВспомогательногоПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
		РасчетПоПеределам = Истина;
	ИначеЕсли УчетнаяПолитика.СпособРасчетаСебестоимостиВспомогательногоПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям Тогда
		РасчетПоПодразделениям = Истина;
	КонецЕсли;

	Если ОтражатьВУправленческомУчете Тогда
		ДиректКостингОбщепроизводственныеЗатраты = УчетнаяПолитика["ДиректКостингОбщепроизводственныеЗатраты"];
		ДиректКостингАдминистративныеЗатраты     = УчетнаяПолитика["ДиректКостингАдминистративныеЗатраты"];
	Иначе
		Если ОтражатьВБухгалтерскомУчете Тогда
			ДиректКостингОбщепроизводственныеЗатраты = УчетнаяПолитика["НеРаспределятьОПЗнаСебестоимостьПродукции"];
		Иначе
			ДиректКостингОбщепроизводственныеЗатраты = Истина;	
		КонецЕсли; 
		ДиректКостингАдминистративныеЗатраты     = Истина;
	КонецЕсли;
	
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеТЗР);
	
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетБазыРаспределенияПроизводственныхРасходов);
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеПроизводственныхРасходов);
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеПродукцииИЗатратПоПеределам);
	
	Если РасчетПоПодразделениям Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетПрямыхЗатратПоПодразделениям);
	КонецЕсли;
	
	Если РасчетПоПеределам Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетПрямыхЗатратПоПеределам);
	КонецЕсли;
	
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.ОпределениеПродукцииИсключаемойИзБазыРаспределения);
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетБазыРаспределенияКосвенныхРасходов);
	
	Если РасчетПоПодразделениям Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеКосвенныхРасходовПоПодразделениям);
	КонецЕсли;
	
	Если РасчетПоПеределам Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеКосвенныхРасходовПоПеределам);
	КонецЕсли;
	
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СписаниеОбщепроизводственныхРасходовПоМетодуДиректКостинг);
	
	Если ДиректКостингАдминистративныеЗатраты Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СписаниеАдминистративныхРасходовПоМетодуДиректКостинг);
	КонецЕсли;
	
	
	Если РасчетПоПодразделениям Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетЗатратВстречногоВыпускаПоПодразделениям);
	КонецЕсли;
	
	Если РасчетПоПеределам Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РасчетЗатратВстречногоВыпускаПоПеределам);
	КонецЕсли;
	
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СписаниеПрочихОперационныхРасходов);
	МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СписаниеРасходовНаСбыт);
	
	Если ОтражатьВУправленческомУчете Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СписаниеПрочихЗатрат);
	КонецЕсли;
	
	Если Не ОтражатьВУправленческомУчете Тогда
		МассивДействий.Добавить(Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.СверткаДвиженийПоРегистрам);
	КонецЕсли;
	
	Возврат МассивДействий;
	
КонецФункции // ПолучитьМассивВыполняемыхДействийТрадиционныйРежим()

Функция ПолучитьМассивВыполняемыхДействий(ПериодРегистрации, Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, СообщатьОбОшибке=Ложь) Экспорт
	
	ИспользоватьРасширеннуюАналитику = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(ПериодРегистрации);
	
	Если ИспользоватьРасширеннуюАналитику Тогда
		МассивДействий = ПолучитьМассивВыполняемыхДействийРасширеннаяАналитика(ПериодРегистрации, Организация, ОтражатьВУправленческомУчете);
	Иначе	
		МассивДействий = ПолучитьМассивВыполняемыхДействийТрадиционныйРежим(ПериодРегистрации, Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, СообщатьОбОшибке);
	КонецЕсли;
	
	Возврат МассивДействий;
	
КонецФункции	

