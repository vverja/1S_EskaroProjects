// Определяет размер часовой тарифной ставки на основании месячного оклада и других необходимых параметров
Функция ПолучитьЧасовуюТарифнуюСтавкуНаОсновеМесячнойСтавки(Оклад, ПродолжительностьРабочейНедели, ЧислоРабочихДнейВГоду, ЧислоПредпраздничныхДнейВГоду) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЧислоРабочихДнейВГоду) Тогда  // в календаре нет данных
		Возврат 0
	КонецЕсли;
	
	СреднемесячноеКоличествоЧасов =  (ПродолжительностьРабочейНедели/5 * (ЧислоРабочихДнейВГоду + ЧислоПредпраздничныхДнейВГоду) - ЧислоПредпраздничныхДнейВГоду)/12;
	
	// расчет часовой ставки
	Возврат ?(СреднемесячноеКоличествоЧасов <= 0, 0, Оклад / СреднемесячноеКоличествоЧасов);
	
КонецФункции	

// Определяет размер часовой тарифной ставки на основании дневной тарифной ставки
Функция ПолучитьЧасовуюТарифнуюСтавкуНаОсновеДневнойСтавки(ДневнаяСтавка, ПродолжительностьРабочейНедели, ВидГрафика) Экспорт
	ПродолжительностьРабочегоДня = ПродолжительностьРабочейНедели / 5;
	// расчет часовой ставки
	Возврат ?(ПродолжительностьРабочегоДня = 0, 0, ДневнаяСтавка / ПродолжительностьРабочегоДня);
	
КонецФункции	

// Выполняет расчет часовой тарифной ставки работника
// Возвращает результат с учетом курса валюты тарифной ставки
//
Функция ЧасоваяТарифнаяСтавкаРаботникаОрг(Знач Сотрудник, Знач ДатаАктуальности, Знач ДатаВалютногоУчета, ВалютаРегламентированногоУчета) Экспорт
	
	Ставка = 0;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудник",				Сотрудник);
	Запрос.УстановитьПараметр("ДатаАктуальности",		ДатаАктуальности);
	Запрос.УстановитьПараметр("ДатаВалютногоУчета",		НачалоМесяца(ДатаВалютногоУчета));
	Запрос.УстановитьПараметр("РегламентВалюта",		ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ПустаяВалюта",			Справочники.Валюты.ПустаяСсылка());

	
	// ВТСводныеИндивидуальныеГрафики
	Если Истина Тогда 
		ТекстЗапросаВТ = 
		"ВЫБРАТЬ
		|	СводныеИндивидуальныеГрафики.Сотрудник КАК Сотрудник,
		|	СводныеИндивидуальныеГрафики.Назначение КАК Назначение,
		|	СводныеИндивидуальныеГрафики.Месяц КАК Месяц,
		|	СводныеИндивидуальныеГрафики.Дней КАК НормаДнейПоГрафику,
		|	СводныеИндивидуальныеГрафики.Часов КАК НормаЧасовПоГрафику
		|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафики
		|ИЗ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|ГДЕ	СводныеИндивидуальныеГрафики.Сотрудник в (&Сотрудник)
		|	И	СводныеИндивидуальныеГрафики.Месяц = НАЧАЛОПЕРИОДА(&ДатаАктуальности, МЕСЯЦ)
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
	КонецЕсли; 

	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ВЫБОР
	|			КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|				ТОГДА РазмерТарифныхСтавок.Размер
	|				ИНАЧЕ ОсновноеНачисление.Показатель1
	|	КОНЕЦ * ВЫБОР КОГДА
	|		ВЫБОР	КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|				ТОГДА РазмерТарифныхСтавок.Валюта
	|				ИНАЧЕ ОсновноеНачисление.Валюта1
	|			КОНЕЦ В (&РегламентВалюта, &ПустаяВалюта)
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|	КОНЕЦ КАК ОкладТариф,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
	|   РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ВидГрафика КАК ВидГрафика,
	|
	|	ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаДнейЗаМесяц, 0)<> 0 
	|				ТОГДА ДанныеИндивидуальногоКалендаря.НормаДнейЗаМесяц 
	|			КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаДнейПоГрафику, 0)<> 0 
	|				ТОГДА  СводныеИндивидуальныеГрафики.НормаДнейПоГрафику
	|			ИНАЧЕ  ДанныеКалендаря.НормаДнейЗаМесяц
	|	КОНЕЦ	КАК НормаДнейЗаМесяц,
	|	ВЫБОР	КОГДА ЕСТЬNULL(ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц, 0)<> 0 
	|				ТОГДА ДанныеИндивидуальногоКалендаря.НормаЧасовЗаМесяц 
	|			КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику, 0)<> 0 
	|				ТОГДА  СводныеИндивидуальныеГрафики.НормаЧасовПоГрафику
	|			ИНАЧЕ  ДанныеКалендаря.НормаЧасовЗаМесяц
	|	КОНЕЦ	КАК НормаЧасовЗаМесяц,
	|
	|	ОсновноеНачисление.ВидРасчета.СпособРасчета КАК СпособРасчета
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|		&ДатаАктуальности,
	|		Сотрудник = &Сотрудник
	|			И ВидРасчетаИзмерение.Код ЕСТЬ NULL ) КАК ОсновноеНачисление
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ДатаВалютногоУчета, ) КАК РазмерТарифныхСтавок
	|			ПО (ОсновноеНачисление.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|			ПО (Валюты.Валюта = ВЫБОР
	|					КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавок.Валюта
	|							ИНАЧЕ ОсновноеНачисление.Валюта1
	|				КОНЕЦ)
	|				И (Валюты.Период = &ДатаВалютногоУчета)
	|		ПО (ИСТИНА)
	|
	|//-----------------------
	|// если есть индивидуальный график и он зарегистрирвоан в регистре сведений ГрафикиРаботыПоВидамВремени
	|ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикРаботыПоСотруднику
	|   ПО		ГрафикРаботыПоСотруднику.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник
	|		И	ГрафикРаботыПоСотруднику.Месяц = НАЧАЛОПЕРИОДА(&ДатаАктуальности, МЕСЯЦ)
	|       
	|
	|//-----------------------
	|// данные нормы календаря по индивидуальным графикам
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ГрафикиРаботы.ГрафикРаботы	КАК ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник		КАК Сотрудник,
	|		ГрафикиРаботы.Документ		КАК Документ,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ) = НАЧАЛОПЕРИОДА(&ДатаАктуальности, МЕСЯЦ) 
	|		И	ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
	|		И	ГрафикиРаботы.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикиРаботы.ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник,
	|		ГрафикиРаботы.Документ
	|) КАК ДанныеИндивидуальногоКалендаря
	|ПО		ВЫБОР	КОГДА ГрафикРаботыПоСотруднику.Сотрудник ЕСТЬ НЕ NULL	// это индивидуальный график и не сокращенное время работы
	|				ТОГДА ДанныеИндивидуальногоКалендаря.Сотрудник = ГрафикРаботыПоСотруднику.Сотрудник
	|				ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ 
	|
	|//-----------------------
	|// данные нормы календаря
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ГрафикиРаботы.ГрафикРаботы	КАК ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник		КАК Сотрудник,
	|		ГрафикиРаботы.Документ		КАК Документ,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ) = НАЧАЛОПЕРИОДА(&ДатаАктуальности, МЕСЯЦ) 
	|		И	ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации 
	|		И НЕ ГрафикиРаботы.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации 
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикиРаботы.ГрафикРаботы,
	|		ГрафикиРаботы.Сотрудник,
	|		ГрафикиРаботы.Документ
	|) КАК ДанныеКалендаря
	|ПО		ВЫБОР	КОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СокращенноеРабочееВремя	
	|		     		ТОГДА ДанныеКалендаря.ГрафикРаботы = РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|				ИНАЧЕ ДанныеКалендаря.ГрафикРаботы = РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|		КОНЕЦ 
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|ПО		РаботникиОрганизацииСрезПоследних.Сотрудник = СводныеИндивидуальныеГрафики.Назначение
	|	И	СводныеИндивидуальныеГрафики.Месяц = НАЧАЛОПЕРИОДА(&ДатаАктуальности, МЕСЯЦ)
	|
	|
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		
		ПродолжительностьРабочейНедели = ?(Выборка.ДлительностьРабочейНедели = NULL, 0, Выборка.ДлительностьРабочейНедели);
		
		Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке или Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
			
			Ставка = Выборка.ОкладТариф;
			
		ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням
			ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам тогда
			
			// Пересчет месячной тарифной ставки в часовую
			Ставка = ?(Выборка.НормаЧасовЗаМесяц=NULL,0,Выборка.ОкладТариф/ Выборка.НормаЧасовЗаМесяц);
			
		ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
			
			// Пересчет дневной ставки в часовую
			Ставка = Выборка.ОкладТариф/8;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ставка;
	
КонецФункции // ЧасоваяТарифнаяСтавкаРаботникаОрг()

// Проверяет, заполнен ли регламентированный производственный календарь за переданный период 
//
// Параметры
//  ДатаНач, ДатаКон - дата, определяют проверяемый период
//  ВыводитьСообщения - булево - признак вывода сообщений в окно сообщений, по умолчанию - ложь
//
// Возвращаемое значение:
//   Булево  - если колендарь заполнен за весь период
//
Функция РегламентированныйКалендарьЗаполнен(ДатаНач, ДатаКон, ВыводитьСообщения = Ложь) Экспорт 

	ТекстЛет = "ВЫБРАТЬ " + Символы.ПС + Символы.Таб + Формат(ДатаНач,"ДФ=yyyy; ДП='0'") + " КАК Год";
	ТекущийГод = Год(ДатаНач) + 1;
	Пока ТекущийГод <= Год(ДатаКон) Цикл
	    ТекстЛет = ТекстЛет + Символы.ПС + Символы.Таб + "Объединить" + Символы.ПС + "ВЫБРАТЬ " + Символы.ПС + Символы.Таб + Формат(ТекущийГод,"ЧГ=0");
		ТекущийГод = ТекущийГод + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ГодыПериода.Год,
		|	ДатыКалендаря.КоличествоДней
		|ИЗ
		|	(" + ТекстЛет + ") КАК ГодыПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КоличествоДней,
		|			РегламентированныйПроизводственныйКалендарь.Год КАК Год
		|		ИЗ
		|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		
		|		ГДЕ
		|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаС И &ДатаПо
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РегламентированныйПроизводственныйКалендарь.Год) КАК ДатыКалендаря
		|		ПО ГодыПериода.Год = ДатыКалендаря.Год";
		
	Запрос.Текст = ТекстЗапроса;					   
	Запрос.УстановитьПараметр("ДатаПо", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаС", ДатаНач);
	Выборка = Запрос.Выполнить().Выбрать();
	КалендарьЗаполнен = Истина;
	Сообщение = "Перед формированием отчета заполните ""Регламентированный производственный календарь"" за ";
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоДней = Null Тогда
			Сообщение = Сообщение + ?(КалендарьЗаполнен,"",", ") + Формат(Выборка.Год,"ЧГ=0");
			КалендарьЗаполнен = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если Не КалендарьЗаполнен и ВыводитьСообщения Тогда
		Сообщение = Сообщение + ?(Найти(Сообщение,",")=0," год!"," годы!");
		Сообщить(Сообщение + "
		|Интерфейсы: ""Полный"", ""Расчет зарплаты организаций"", ""Кадровый учет организаций"", пункт меню Предприятие - Производственный календарь.");
	КонецЕсли;
	
    Возврат КалендарьЗаполнен
	
КонецФункции // РегламентированныйКалендарьЗаполнен()

// Удаляет из строки фрагмент заключенный в скобки
//
// Параметры
//  СтрокаДляОбработки  – Строка – строка из которой необходимо удалить фрагмент
//
// Возвращаемое значение:
//   Строка   – строка без фрагмента заключенного в скобки.
//
Функция УдалениеСимволовСкобок(СтрокаДляОбработки)

	НачальнаяПозиция	= Найти(СтрокаДляОбработки,"(");
	КонечнаяПозиция		= Найти(СтрокаДляОбработки,")");
	ДлинаСтроки			= СтрДлина(СтрокаДляОбработки);
	
	Если НачальнаяПозиция > 0 Тогда
		Возврат Лев(СтрокаДляОбработки, НачальнаяПозиция - 1) + ?(КонечнаяПозиция > 0,Прав(СтрокаДляОбработки, ДлинаСтроки - КонечнаяПозиция),"")
	Иначе
		Возврат СтрокаДляОбработки
	КонецЕсли; 

КонецФункции // ()
 
// Заполняет реквизит "КраткийСоставДокумента" документа по его табличным частям.
//
// Параметры
//  ТЧДокумента					– табличная часть документа по которой происходит заполнение реквизита
//  ДополнительнаяТЧДокумента	- табличная часть документа, как правило это ТЧ с дополнительными начислениями
//
// Возвращаемое значение:
//   строка, значение реквизита "КраткийСоставДокумента".
//
Функция ЗаполнитьКраткийСоставДокумента(ТЧДокумента, ДополнительнаяТЧДокумента = Неопределено, ИмяРеквизита = "Сотрудник") Экспорт

	КраткийСоставДокумента = "";
	
	Для каждого СтрокаТЧ Из ТЧДокумента Цикл
		
		ФИОФизЛица = ОбщегоНазначения.ФамилияИнициалыФизЛица(УдалениеСимволовСкобок(СтрокаТЧ[ИмяРеквизита].Наименование));
		Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
			
			Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
				КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
			Иначе
				КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
				Прервать;
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	Если ДополнительнаяТЧДокумента <> Неопределено И СтрДлина(КраткийСоставДокумента) < 100 Тогда
	
		Для каждого СтрокаТЧ Из ДополнительнаяТЧДокумента Цикл
			
			ФИОФизЛица = ОбщегоНазначения.ФамилияИнициалыФизЛица(УдалениеСимволовСкобок(СтрокаТЧ[ИмяРеквизита].Наименование));
			Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
				
				Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
					КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
				Иначе
					Если Лев(КраткийСоставДокумента,2) = ", " Тогда
						КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
					Иначе
						КраткийСоставДокумента = Лев(КраткийСоставДокумента,97) + "...";
					КонецЕсли;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	 
	КонецЕсли;
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставДокумента;
	
КонецФункции // ЗаполнитьКраткийСоставДокумента()

// Функция формирует наименовние элемента справочника СотрудникиОрганизаций
//
// Параметры
//  <Физлицо>  – <СправочникСсылка.ФизическиеЛица> – физлицо 
//  <Постфикс>  – <Строка> – постфикс наименования сотрудника
//
// Возвращаемое значение:
//   <Строка>   – наименование сотрудника
//
Функция УстановитьНаименованиеСотрудника(Физлицо, Постфикс) Экспорт

	Возврат  Физлицо.Наименование + " " + Постфикс;

КонецФункции // УстановитьНаименованиеСотрудника()

// Процедура производит синхронирзацию наименований сотрудников
Процедура СинхронизироватьНаименованияСотрудников(Физлицо, Сотрудник = Неопределено) Экспорт
	
	Если Сотрудник = Неопределено Тогда
		Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли; 

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.Наименование,
	|	СотрудникиОрганизаций.ПостфиксНаименования,
	|	СотрудникиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Физлицо = &парамФизлицо";	
	
	Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка = Сотрудник Тогда
			// не обрабатываем сотрудника, из которого вызвана синхронизация
			Продолжить;
		КонецЕсли; 
		
		СотрудникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка	
			СотрудникОбъект.Заблокировать();
		Исключение
			Продолжить;
		КонецПопытки;
		СотрудникОбъект.Наименование = УстановитьНаименованиеСотрудника(Физлицо, Выборка.ПостфиксНаименования);
		СотрудникОбъект.Записать();
		СотрудникОбъект.Разблокировать();
	КонецЦикла; 

КонецПроцедуры

// Функция определяет пол физлица по его отчеству
//
Функция ПолучитьПол(ОтчествоРаботника) Экспорт
	
	Если Прав(ОтчествоРаботника, 2) = "ич" Тогда
		Возврат Перечисления.ПолФизическихЛиц.Мужской;
	
	ИначеЕсли Прав(ОтчествоРаботника, 2) = "на" Тогда
		Возврат Перечисления.ПолФизическихЛиц.Женский;
	
	КонецЕсли;
	
	Возврат Перечисления.ПолФизическихЛиц.ПустаяСсылка();
	
КонецФункции // ПолучитьПол()

Процедура ЗаполнитьФизЛицо(Документ, ИмяСотрудник = "Сотрудник", ИмяФизЛицо = "ФизЛицо") Экспорт
	
	Если ЗначениеЗаполнено(Документ[ИмяФизЛицо]) и НЕ ЗначениеЗаполнено(Документ[ИмяСотрудник]) Тогда
		Возврат;
	КонецЕсли;	
	Документ[ИмяФизЛицо]= Документ[ИмяСотрудник].ФизЛицо;
    	
КонецПроцедуры

Процедура ЗаполнитьФизЛицоПоТЧ(ДокументТЧ, ИмяСотрудник = "Сотрудник", ИмяФизЛицо = "ФизЛицо") Экспорт
	
	Для Каждого СтрокаДок из ДокументТЧ Цикл
		Если ЗначениеЗаполнено(СтрокаДок[ИмяФизЛицо]) и НЕ ЗначениеЗаполнено(СтрокаДок[ИмяСотрудник]) Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаДок[ИмяФизЛицо]= СтрокаДок[ИмяСотрудник].ФизЛицо;
	КонецЦикла;	
    	
КонецПроцедуры	

// Функция возвращает график работы по умолчанию
// График получается из настроек пользователя или из константы.
//
Функция ПолучитьГрафикРаботы(Ответственный) Экспорт
	
	ГрафикРаботы = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Ответственный, "ГрафикРаботы");
	Если НЕ ЗначениеЗаполнено(ГрафикРаботы) Тогда
		ГрафикРаботы = Константы.ОсновнойГрафикРаботыПредприятий.Получить();
	КонецЕсли;
	Возврат ГрафикРаботы;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ГОЛОВНЫЕ ОРГАНИЗАЦИИ И ОБОСОБЛЕННЫЕ ПОДРАЗДЕЛЕНИЯ

// Формирует список головных организаций предприятия
Функция ПолучитьСписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &ПустаяОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");

	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());						  

	СписокОрганизаций = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла; 

	Возврат СписокОрганизаций;
	
КонецФункции 

// Формирует список организаций предприятия
Функция ПолучитьСписокОрганизаций() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");

	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());						  

	СписокОрганизаций = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла; 

	Возврат СписокОрганизаций;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ

#Если Клиент Тогда

// Процедура ищет единственное физлицо среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
//  Режим 		- строка - определяет, среди кандидатов, работников предприятия или организаций производится поиск
//  Текст 		- строка - начало ФИО
//  Организация - СправочникСсылка.Организации - организация, 
//					среди работников которой производится поиск, необязательна,
//					если не указана - поиск ведется по всем организациям
//
// Возвращаемое значение
//  строка - наименование найденного кандидата, работника (предприятия или организаций), если он единственный
//
Функция ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, Режим, Знач Текст, Организация = "", ВозвращатьФизлицо = Ложь) Экспорт
	
	ТекстАвтоПодбора = "";
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	
	Если Режим = "Работники" Тогда
		
		Запрос.УстановитьПараметр("ДатаАктуальности",		ТекущаяДата());
			
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	Сотрудники.Сотрудник.Наименование КАК Наименование,
		|	Работники.ФизЛицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	РегистрСведений.Работники КАК Работники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокСотрудников.Сотрудник КАК Сотрудник,
		|			СписокСотрудников.Физлицо КАК Физлицо
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
		|				РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
		|				1 КАК Приоритет
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОсновноеМесто
		|			ГДЕ
		|				РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиОсновноеМесто.Сотрудник.Физлицо
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				МАКСИМУМ(РаботникиСовместительство.Сотрудник),
		|				РаботникиСовместительство.Сотрудник.Физлицо,
		|				2
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) КАК РаботникиСовместительство
		|			ГДЕ
		|				РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиСовместительство.Сотрудник.Физлицо
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				МАКСИМУМ(СотрудникиДУ.Ссылка),
		|				СотрудникиДУ.Физлицо,
		|				ВЫБОР
		|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|						ТОГДА 3
		|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|						ТОГДА 4
		|					ИНАЧЕ 5
		|				КОНЕЦ
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СотрудникиДУ.Физлицо,
		|				ВЫБОР
		|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|						ТОГДА 3
		|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|						ТОГДА 4
		|					ИНАЧЕ 5
		|				КОНЕЦ) КАК СписокСотрудников
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СписокФизическихЛиц.Физлицо КАК Физлицо,
		|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
		|				ИЗ
		|					(ВЫБРАТЬ
		|						РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
		|						1 КАК Приоритет
		|					ИЗ
		|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|								&ДатаАктуальности,
		|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОсновноеМесто
		|					ГДЕ
		|						РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						РаботникиСовместительство.Сотрудник.Физлицо,
		|						2
		|					ИЗ
		|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|								&ДатаАктуальности,
		|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) КАК РаботникиСовместительство
		|					ГДЕ
		|						РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						СотрудникиДУ.Физлицо,
		|						ВЫБОР
		|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|								ТОГДА 3
		|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|								ТОГДА 4
		|							ИНАЧЕ 5
		|						КОНЕЦ
		|					ИЗ
		|						Справочник.СотрудникиОрганизаций КАК СотрудникиДУ) КАК СписокФизическихЛиц
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
		|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
		|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
		|		ПО Работники.ФизЛицо = Сотрудники.Физлицо
		|ГДЕ
		|	Работники.ФизЛицо.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""";
			
	ИначеЕсли Режим = "Кандидаты" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	Кандидаты.ФизЛицо.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.КандидатыНаРаботу КАК Кандидаты
		|ГДЕ
		|	Кандидаты.ФизЛицо.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""";
		
	ИначеЕсли Режим = "РаботникиИДоговорники" Тогда
		
		ДоговорыГПХ = Новый Массив;
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
		
		ТекстУсловияРаботники = "";
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияРаботники = " И Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	ВложенныйЗапрос.Наименование КАК Наименование
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РаботникиОрганизации.Сотрудник.Наименование КАК Наименование
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|	ГДЕ
		|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияРаботники + "
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДоговорникиОрганизаций.Наименование
		|	ИЗ
		|		Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
		|	ГДЕ
		|		ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|		И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники + ") КАК ВложенныйЗапрос";
		
	ИначеЕсли Режим = "Договорники" Тогда
		
		ДоговорыГПХ = Новый Массив;
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
		
		ТекстУсловияРаботники = "";
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияРаботники = " И ДоговорникиОрганизаций.Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоговорникиОрганизаций.Наименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
		|ГДЕ
		|	ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники;
	
	ИначеЕсли Режим = "РаботникиОрганизации" Тогда
		
		ТекстУсловияОрганизации = "";
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	РаботникиОрганизации.Сотрудник.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|ГДЕ
		|	РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации;
		
	ИначеЕсли Режим = "Сотрудники" Тогда
		
		ТекстУсловияОрганизации = "";
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СотрудникиОрганизаций.Наименование КАК Наименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Актуальность
		|	И СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации;
		
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("В процедуру ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата() передано неверное значение параметра Режим!");
		
	КонецЕсли;
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Если ВозвращатьФизлицо Тогда
			ТекстАвтоПодбора = Выборка.ФизлицоНаименование;
		Иначе
			ТекстАвтоПодбора = Выборка.Наименование;
		КонецЕсли;
	КонецЕсли;

	Возврат ТекстАвтоПодбора;
	
КонецФункции // ПодобратьФИОРаботникаКандидата()

// Процедура ищет физлиц среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
//  Режим 		- строка - определяет, среди кандидатов, работников предприятия или организаций производится поиск
//  Текст 		- строка - начало ФИО
//  НачальноеЗначение	- СправочникСсылка.ФизическиеЛица - значение по умолчанию
//  Организация - СправочникСсылка.Организации - организация, 
//					среди работников которой производится поиск, необязательна,
//					если не указана - поиск ведется по всем организациям
//
// Возвращаемое значение
//  СправочникСсылка.ФизическиеЛица - возвращается значение по умолчанию, если 
//									не найдено ни одного подходящего кандидата, работника (предприятия или организаций)
//  СписокЗначений - список подходящих физлиц, если их найдено не более 50
//  Неопределено - если найдено более 50 подходящих физлиц
//
Функция ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, Режим, Знач Текст, НачальноеЗначение, Организация = "", ВозвращатьФизлицо = Ложь) Экспорт
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат Новый СписокЗначений;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если Режим = "Работники" Тогда
		
		Запрос.УстановитьПараметр("ДатаАктуальности",		ТекущаяДата());
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	Сотрудники.Сотрудник КАК Ссылка,
		|	Сотрудники.Сотрудник.Наименование КАК Наименование,
		|	Работники.ФизЛицо КАК Физлицо,
		|	Работники.ФизЛицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	РегистрСведений.Работники КАК Работники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокСотрудников.Сотрудник КАК Сотрудник,
		|			СписокСотрудников.Физлицо КАК Физлицо
		|		ИЗ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
		|				РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
		|				1 КАК Приоритет
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОсновноеМесто
		|			ГДЕ
		|				РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиОсновноеМесто.Сотрудник.Физлицо
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				МАКСИМУМ(РаботникиСовместительство.Сотрудник),
		|				РаботникиСовместительство.Сотрудник.Физлицо,
		|				2
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) КАК РаботникиСовместительство
		|			ГДЕ
		|				РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиСовместительство.Сотрудник.Физлицо
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				МАКСИМУМ(СотрудникиДУ.Ссылка),
		|				СотрудникиДУ.Физлицо,
		|				ВЫБОР
		|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|						ТОГДА 3
		|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|						ТОГДА 4
		|					ИНАЧЕ 5
		|				КОНЕЦ
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СотрудникиДУ.Физлицо,
		|				ВЫБОР
		|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|						ТОГДА 3
		|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|						ТОГДА 4
		|					ИНАЧЕ 5
		|				КОНЕЦ) КАК СписокСотрудников
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СписокФизическихЛиц.Физлицо КАК Физлицо,
		|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
		|				ИЗ
		|					(ВЫБРАТЬ
		|						РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
		|						1 КАК Приоритет
		|					ИЗ
		|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|								&ДатаАктуальности,
		|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОсновноеМесто
		|					ГДЕ
		|						РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						РаботникиСовместительство.Сотрудник.Физлицо,
		|						2
		|					ИЗ
		|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|								&ДатаАктуальности,
		|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) КАК РаботникиСовместительство
		|					ГДЕ
		|						РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|					
		|					ОБЪЕДИНИТЬ
		|					
		|					ВЫБРАТЬ
		|						СотрудникиДУ.Физлицо,
		|						ВЫБОР
		|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
		|								ТОГДА 3
		|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
		|								ТОГДА 4
		|							ИНАЧЕ 5
		|						КОНЕЦ
		|					ИЗ
		|						Справочник.СотрудникиОрганизаций КАК СотрудникиДУ) КАК СписокФизическихЛиц
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
		|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
		|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
		|		ПО Работники.ФизЛицо = Сотрудники.Физлицо
		|ГДЕ
		|	Работники.ФизЛицо.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""";
		
	ИначеЕсли Режим = "Кандидаты" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	Кандидаты.ФизЛицо КАК Ссылка,
		|	Кандидаты.ФизЛицо.Наименование КАК Наименование,
		|	Кандидаты.ФизЛицо КАК Физлицо,
		|	Кандидаты.ФизЛицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	РегистрСведений.КандидатыНаРаботу КАК Кандидаты
		|ГДЕ
		|	Кандидаты.ФизЛицо.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""";
		
	ИначеЕсли Режим = "РаботникиИДоговорники" Тогда
		
		ДоговорыГПХ = Новый Массив;
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
		
		ТекстУсловияРаботники = "";
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияРаботники = " И Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		Если ВозвращатьФизлицо Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	ВложенныйЗапрос.Физлицо,
			|	ВложенныйЗапрос.ФизлицоНаименование
			|ИЗ
			|	(ВЫБРАТЬ 
			|		РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
			|		РаботникиОрганизации.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияРаботники + "
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ДоговорникиОрганизаций.Физлицо,
			|		ДоговорникиОрганизаций.Физлицо.Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
			|	ГДЕ
			|		ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники + ") КАК ВложенныйЗапрос";
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	ВложенныйЗапрос.Ссылка,
			|	ВложенныйЗапрос.Наименование
			|ИЗ
			|	(ВЫБРАТЬ 
			|		РаботникиОрганизации.Сотрудник КАК Ссылка,
			|		РаботникиОрганизации.Сотрудник.Наименование КАК Наименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|	ГДЕ
			|		РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияРаботники + "
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ 
			|		ДоговорникиОрганизаций.Ссылка,
			|		ДоговорникиОрганизаций.Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
			|	ГДЕ
			|		ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники + ") КАК ВложенныйЗапрос";
		КонецЕсли;
		
	ИначеЕсли Режим = "Договорники" Тогда
		
		ДоговорыГПХ = Новый Массив;
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		ДоговорыГПХ.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
		
		ТекстУсловияРаботники = "";
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияРаботники = " И ДоговорникиОрганизаций.Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоговорникиОрганизаций.Наименование,
		|	ДоговорникиОрганизаций.Ссылка,
		|	ДоговорникиОрганизаций.Физлицо
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
		|ГДЕ
		|	ДоговорникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И ДоговорникиОрганизаций.ВидДоговора В(&ДоговорыГПХ)" + ТекстУсловияРаботники;
		
	ИначеЕсли Режим = "РаботникиОрганизации" Тогда
		
		ТекстУсловияОрганизации = "";
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		КонецЕсли;
		
		Если ВозвращатьФизлицо Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
			|	РаботникиОрганизации.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|ГДЕ
			|	РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации;
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	РаботникиОрганизации.Сотрудник КАК Ссылка,
			|	РаботникиОрганизации.Сотрудник.Наименование КАК Наименование
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|ГДЕ
			|	РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации;
		КонецЕсли;
		
	ИначеЕсли Режим = "Сотрудники" Тогда
		
		ТекстУсловияОрганизации = "";
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		Если ВозвращатьФизлицо Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
			|	СотрудникиОрганизаций.Физлицо.Наименование КАК ФизлицоНаименование
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Актуальность
			|	И СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации;
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СотрудникиОрганизаций.Ссылка КАК Ссылка,
			|	СотрудникиОрганизаций.Наименование КАК Наименование
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Актуальность
			|	И СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации;
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("В процедуру ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов() передано неверное значение параметра Режим!");
		
	КонецЕсли;
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Количество = Выборка.Количество();
	
	Если Количество < 51 Тогда
		
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Если ВозвращатьФизлицо Тогда
				Значение.Добавить(Выборка.Физлицо, Выборка.ФизлицоНаименование);
			Иначе
				Значение.Добавить(Выборка.Ссылка, Выборка.Наименование);
			КонецЕсли;
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		Возврат Значение;
		
	Иначе
		// значений для выбора больше 50
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПодобратьСписокРаботниковКандидатов()

// Открывает форму обработки для подготовки списка работников, отобранного по указанным пользователем критериям
//
// Владелец - форма, для которой требуется вызвать обработку
// ДатаАктуальности - дата, по состоянию на которую осматривается список работников
// ИмяРегистра - строка, возможны 2 значения - "РаботникиОрганизаций" или "Работники" - определяет
//               какие работники будут отбираться - по регл. или по упр. учету
// Организация - ссылка на организацию (может быть в том числе обособленным подразделением), если передана пустая ссылка, выбираются 
//					работники всех организаций
// Подразделение - ссылка на подразделение, если передана пустая ссылка, выбираются 
//					работники всех подразделений
// 
Процедура ОткрытьФормуОтбораСпискаРаботников(Владелец, ДатаАктуальности, ИмяРегистра = "РаботникиОрганизаций", Организация = Неопределено, Подразделение = Неопределено, ИсполнятьЗапрос = Истина, ВыбиратьСотрудника = Истина, ИменаСтраницФормы = Неопределено, Реквизиты = Неопределено, ДатаУволенных = Неопределено, ВключатьУволенных = Ложь, ВключатьСовместителей = Истина) Экспорт
	
	Если ИмяРегистра = "РаботникиОрганизаций" И НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация, отобрать список работников невозможно!");
		Возврат;
	КонецЕсли;
		
	ФормированиеСпискаРаботников = Обработки.ФормированиеСпискаРаботников.Создать();
	ФормированиеСпискаРаботников.ИмяРегистра			= ИмяРегистра;
	ФормированиеСпискаРаботников.ДатаАктуальности		= ДатаАктуальности;
	ФормированиеСпискаРаботников.ДатаУволенных			= ?(ДатаУволенных = Неопределено, НачалоГода(ДатаАктуальности), ДатаУволенных);
	ФормированиеСпискаРаботников.ИсполнятьЗапрос		= ИсполнятьЗапрос;
	ФормированиеСпискаРаботников.ВыбиратьСотрудника		= ВыбиратьСотрудника;
	ФормированиеСпискаРаботников.Реквизиты				= Реквизиты;
	ФормированиеСпискаРаботников.ВключатьУволенных	    = ВключатьУволенных;
	
	// подготовим Построитель отчета к работе
	ФормированиеСпискаРаботников.ЗаполнитьНачальныеНастройки();
	
	СтруктураНедоступныхОтборов = Новый Структура;
	Если ИмяРегистра = "РаботникиОрганизаций" Тогда
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Количество() = 0 Тогда 
			ФормированиеСпискаРаботников.ЗаполнитьНачальныеНастройки();	
		КонецЕсли;
		// Переданную организацию пропишем независимо от сохраненных ранее настроек отбора
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("ОбособленноеПодразделение") = Неопределено Тогда
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("ОбособленноеПодразделение")
		КонецЕсли;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.ОбособленноеПодразделение.Установить(Организация,);
		ФормированиеСпискаРаботников.ПостроительОтчета.Параметры.Вставить("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		СтруктураНедоступныхОтборов.Вставить("ОбособленноеПодразделение");
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("Подразделение") = Неопределено Тогда
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("Подразделение")
		КонецЕсли;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.Значение = Подразделение;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.Использование = Истина;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.ВидСравнения = ВидСравнения.ВИерархии;
		СтруктураНедоступныхОтборов.Вставить("Подразделение");
	КонецЕсли;
	Если НЕ ВключатьСовместителей Тогда
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("ВидЗанятости") = Неопределено Тогда
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("ВидЗанятости")
		КонецЕсли;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.ВидЗанятости.Значение = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.ВидЗанятости.Использование = Истина;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.ВидЗанятости.ВидСравнения = ВидСравнения.НеРавно;
		СтруктураНедоступныхОтборов.Вставить("Подразделение");
	КонецЕсли;	
	
	// Теперь откроем подготовленную форму
	Форма = ФормированиеСпискаРаботников.ПолучитьФорму("ФормаНастройки",Владелец);
	Форма.мСтруктураНедоступныхОтборов = СтруктураНедоступныхОтборов;
	Если Реквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма,Реквизиты);
	КонецЕсли;
	
	Если ИменаСтраницФормы = Неопределено Тогда // страницу дополнительных данных не показываем
		Форма.ЭлементыФормы.ПанельСтраницы.Свертка = РежимСверткиЭлементаУправления.Низ;
	Иначе
		УдаляемыеСтраницы = Новый Массив;
		Страницы = Форма.ЭлементыФормы.ПанельСтраницы.Страницы;
		Для каждого СтраницаПанели Из Страницы Цикл
			Если СтраницаПанели.Имя <> ИменаСтраницФормы Тогда
				УдаляемыеСтраницы.Добавить(СтраницаПанели);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтраницаПанели Из УдаляемыеСтраницы Цикл
			Страницы.Удалить(Страницы.Индекс(СтраницаПанели))
		КонецЦикла;
	КонецЕсли;
	
	Форма.ОткрытьМодально();
	
КонецПроцедуры  // ОткрытьФормуОтбораСпискаРаботников()

// Открывает для выбора список доков ЗарплатаКВыплатеОрганизаций конкретной организации
//
// Параметры
//  Элемент - поле ввода, в котором выбирается платежная ведомость 
//  СтандартнаяОбработка - булево, признак стандартной обработки события
//  Организация - СправочникСсылка.Организации, организация ведости которой надо выбрать
//  СпособыВыплатыЗарплаты - ПеречислениеСсылка.СпособыВыплатыЗарплаты - дополнительное ограничение на список ведомостей
//
Процедура ОткрытьФормуВыбораПлатежныхВедомостейОрганизации(Элемент, СтандартнаяОбработка, Организация, СпособыВыплатыЗарплаты) Экспорт

	СтандартнаяОбработка  = Ложь;
	
	ФормаВыбора = Документы.ЗарплатаКВыплатеОрганизаций.ПолучитьФормуВыбора(, Элемент);
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;	
	
	ФормаВыбора.Отбор.Организация.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.Организация.Значение		= Организация;
	ФормаВыбора.Отбор.Организация.Использование	= Истина;
	
	//ФормаВыбора.Отбор.РаботникиОрганизации.СпособВыплаты.ВидСравнения	= ВидСравнения.Равно;
	//ФормаВыбора.Отбор.РаботникиОрганзации.СпособВыплаты.Значение		= СпособыВыплатыЗарплаты;
	//ФормаВыбора.Отбор.СпособВыплаты.РаботникиОрганизации.Использование	= Истина;
	
	ФормаВыбора.Открыть();
	

КонецПроцедуры // ОткрытьФормуВыбораКассовыхПлатежныхВедомостейОрганизации()

// Обеспечивает подбор данных по сотруднику
// подбираются подразделение и должность
// Параметры:
//	Форма - форма в которой производится подбор данных
//	ЭлементФормы - элементы формы в которой производится подбор данных
//	Физлицо
//
// ВозвращаемоеЗначение - строка таблицы значений или Неопределено, 
// если подбор данных не состоялся
// Поля строки таблицы значений:
//		ПодразделениеОрганизации
//		Должность
//
Функция ПодборДанныхПоФизлицу(Форма, ЭлементФормы, Физлицо, Организация, ДатаСобытия, ПредлагатьВыбор = Ложь) Экспорт
	
	Запрос = Новый Запрос();
	
	
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("парамДатаСобытия", ДатаСобытия);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность КАК Должность,
	|	РаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	|	РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
	|	РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&парамДатаСобытия,
	|		Сотрудник.Физлицо = &Физлицо
	|			И Сотрудник.Организация = &Организация) КАК РаботникиОрганизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизации.Период";
	
	НаборыДанных = Запрос.Выполнить().Выгрузить();
	
	Если НаборыДанных.Количество() = 0 Тогда
		// Если не нашли данных - ничего не делаем
		Возврат Неопределено;
	ИначеЕсли НаборыДанных.Количество() = 1 Тогда
		//если запись единственная, вернем ее
		Возврат НаборыДанных[0];
	ИначеЕсли ПредлагатьВыбор Тогда
		// предложим выбрать из списка если записей больше одной и предлагать выбор
		СписокНаборовДанных = Новый СписокЗначений;
		Для Каждого Строка Из НаборыДанных Цикл
			СписокНаборовДанных.Добавить(Строка, Строка.СотрудникНаименование + " (" + Строка.ПодразделениеОрганизацииНаименование + ", " + Строка.ДолжностьНаименование + ")");
		КонецЦикла;
		ВыбранныйНаборДанных = Форма.ВыбратьИзСписка(СписокНаборовДанных, ЭлементФормы);
		Если ВыбранныйНаборДанных = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат ВыбранныйНаборДанных.Значение;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПодборДанныхПоФизлицу()

Процедура ОткрытьФормуВыбораСотрудника(Владелец, Ключ, ЗакрыватьПриВыборе, ДатаСреза, СтандартнаяОбработка = Неопределено, ТекущееЗначение = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуВыбора(, Владелец, Ключ);
	
	Форма.ДатаСреза 					= ДатаСреза;
	Форма.ПараметрВыборГруппИЭлементов	= ИспользованиеГруппИЭлементов.Элементы;
	Форма.РежимВыбора					= Истина;
	Форма.ЗакрыватьПриВыборе			= ЗакрыватьПриВыборе;
	
	Если ТекущееЗначение <> Неопределено Тогда
		Если ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			Форма.ПараметрТекущаяСтрока		= ТекущееЗначение;
			
		ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Физлицо",					ТекущееЗначение);
			Запрос.УстановитьПараметр("ОсновноеМестоРаботы",		Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
			Запрос.УстановитьПараметр("ВнутренееСовместительство",	Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
			Запрос.УстановитьПараметр("Трудовой",					Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
			Запрос.УстановитьПараметр("Управленческий",				Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Ссылка,
			|	ВЫБОР
			|		КОГДА СотрудникиОрганизаций.ВидДоговора = &Трудовой
			|			ТОГДА ВЫБОР
			|					КОГДА СотрудникиОрганизаций.ВидЗанятости = &ОсновноеМестоРаботы
			|						ТОГДА 1
			|					ИНАЧЕ 2
			|				КОНЕЦ
			|		ИНАЧЕ 3
			|	КОНЕЦ КАК Порядок
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	((НЕ СотрудникиОрганизаций.ВидДоговора В (&Управленческий, &Трудовой))
			|			ИЛИ СотрудникиОрганизаций.ВидЗанятости <> &ВнутренееСовместительство)
			|	И СотрудникиОрганизаций.Физлицо = &Физлицо
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Форма.ПараметрТекущаяСтрока	= Выборка.Ссылка;
			КонецЕсли;
			
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Неверный тип параметра: " + ТипЗнч(ТекущееЗначение));
			
		КонецЕсли;
	КонецЕсли;
	
	СписокДоговоров = Новый СписокЗначений;
	СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	
	Форма.Отбор.ВидДоговора.ВидСравнения	= ВидСравнения.ВСписке;
	Форма.Отбор.ВидДоговора.Использование	= Истина;
	Форма.Отбор.ВидДоговора.Значение		= СписокДоговоров;
	
	Форма.Отбор.ВидЗанятости.ВидСравнения = ВидСравнения.НеРавно;
	Форма.Отбор.ВидЗанятости.Использование = Истина;
	Форма.Отбор.ВидЗанятости.Значение = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
	
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьФормуВыбораСотрудника()

// Процедура открывает форму выбора сотрудников организации
// Параметры:
//	Владелец 			- владелец формы
//	Ключ 				- ключ, ссылка на документ из которого открывается форма
//	ЗакрыватьПриВыборе 	- Булево
//	ДатаСреза 			- дата, передается в форму для получения доп. данных по сотруднику на эту дату
//	ГоловнаяОрганизация - головная организация
//	КогоПодбирать 		- 0-всех, 1 - только по трудовым договорам, 2 - только договора ГПХ
//                      - 3 - внешние совместители, 4 - основные сотрудники и внешние совместители
//	СтандартнаяОбработка- Булево
//	ТекущееЗначение 	- ссылка на элемент, на котором необходимо спозиционироваться при открытии формы
//
Процедура ОткрытьФормуВыбораСотрудникаОрганизации(Владелец, Ключ, ЗакрыватьПриВыборе, ДатаСреза, ГоловнаяОрганизация = Неопределено, КогоВыбирать = 0, СтандартнаяОбработка = Неопределено, ТекущееЗначение = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуВыбора(, Владелец, Ключ);
	
	Форма.ДатаСреза 					= ДатаСреза;
	Форма.ПараметрВыборГруппИЭлементов	= ИспользованиеГруппИЭлементов.Элементы;
	Форма.РежимВыбора					= Истина;
	Форма.ЗакрыватьПриВыборе			= ЗакрыватьПриВыборе;
	
	Если ТекущееЗначение <> Неопределено Тогда
		Если ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			Форма.ПараметрТекущаяСтрока		= ТекущееЗначение;
			
		ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Физлицо",				ТекущееЗначение);
			Запрос.УстановитьПараметр("ВидЗанятости",			Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
			Запрос.УстановитьПараметр("Трудовой",				Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
			Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ГоловнаяОрганизация);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Ссылка,
			|	ВЫБОР
			|		КОГДА СотрудникиОрганизаций.ВидДоговора = &Трудовой
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК Порядок
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	(СотрудникиОрганизаций.ВидДоговора <> &Трудовой
			|			ИЛИ СотрудникиОрганизаций.ВидЗанятости <> &ВидЗанятости)
			|	И СотрудникиОрганизаций.Физлицо = &Физлицо
			|	И СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Форма.ПараметрТекущаяСтрока	= Выборка.Ссылка;
			КонецЕсли;
			
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Неверный тип параметра: " + ТипЗнч(ТекущееЗначение));
			
		КонецЕсли;
	КонецЕсли;
	
	//установим отборы
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Форма.Отбор.Организация.Установить(ГоловнаяОрганизация);
		Форма.Отбор.Организация.Использование = ЗначениеЗаполнено(ГоловнаяОрганизация);
	КонецЕсли;
		
	Если КогоВыбирать = 2 Тогда
		//выбор только договорников
		СписокДоговоров = Новый СписокЗначений;
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		Форма.Отбор.ВидДоговора.ВидСравнения  = ВидСравнения.ВСписке;
		Форма.Отбор.ВидДоговора.Использование = Истина;
		Форма.Отбор.ВидДоговора.Значение	  = СписокДоговоров;
	ИначеЕсли КогоВыбирать = 1 Тогда
		//выбор только трудовые договора
		Форма.Отбор.ВидДоговора.ВидСравнения  = ВидСравнения.Равно;
		Форма.Отбор.ВидДоговора.Использование = Истина;
		Форма.Отбор.ВидДоговора.Значение	  = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
	ИначеЕсли КогоВыбирать = 0 Тогда
		//отбор по всем, исключим сотрудников упр. учета
		Форма.Отбор.ВидДоговора.ВидСравнения  = ВидСравнения.НеРавно;
		Форма.Отбор.ВидДоговора.Использование = Истина;
		Форма.Отбор.ВидДоговора.Значение	  = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий;
	ИначеЕсли КогоВыбирать = 3 Тогда
		//выбор только внешних совместителей
		Форма.Отбор.ВидДоговора.ВидСравнения  = ВидСравнения.Равно;
		Форма.Отбор.ВидДоговора.Использование = Истина;
		Форма.Отбор.ВидДоговора.Значение	  = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
		Форма.Отбор.ВидЗанятости.ВидСравнения  = ВидСравнения.Равно;
		Форма.Отбор.ВидЗанятости.Использование = Истина;
		Форма.Отбор.ВидЗанятости.Значение	  = Перечисления.ВидыЗанятостиВОрганизации.Совместительство;
	ИначеЕсли КогоВыбирать = 4 Тогда
		//выбор только основных сотрудников
		Форма.Отбор.ОсновноеНазначение.ВидСравнения  = ВидСравнения.Равно;
		Форма.Отбор.ОсновноеНазначение.Использование = Истина;
		Форма.Отбор.ОсновноеНазначение.Значение	  = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьФормуВыбораСотрудникаОрганизации()

// Открывает форму выбора перерассчитываемого документа
//
// Владелец - элемент формы
//
// СтандартнаяОбработка - флаг стандартной обработки события НачалоВыбора
//
// ДокументПерерасчет - ссылка на документ, для которого подбирается перерассчитываемый документ
//
// Ключ - ключ уникальности открываемой формы
//
// 
Процедура ОткрытьФормуВыбораПерерассчитываемогоДокумента(Владелец, СтандартнаяОбработка, ДокументПерерасчет, Ключ = Неопределено) Экспорт

	ИмяДокумента = ДокументПерерасчет.Метаданные().Имя;
	ФормаВыбора = Документы[ИмяДокумента].ПолучитьФормуВыбора(, Владелец, Ключ);
	
	ФормаВыбора.Отбор.Организация.Использование	= Истина;
	ФормаВыбора.Отбор.Организация.ВидСравнения 	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.Организация.Значение	 	= ДокументПерерасчет.Организация;
	
	ФормаВыбора.Отбор.ПериодРегистрации.Использование	= Истина;
	ФормаВыбора.Отбор.ПериодРегистрации.ВидСравнения 	= ВидСравнения.Меньше;
	ФормаВыбора.Отбор.ПериодРегистрации.Значение	 	= ДокументПерерасчет.ПериодРегистрации;
	
	ФормаВыбора.Открыть();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// процедура устанавливает текущую строку в табличных полях формы 
// объекта, связанных с табличными частями объекта
// предположения:
// все табличные части и соответсвующие им табличные поля - одноименны
// все "синхронизируемые" табличные части имеют колонку с одинаковым 
// именем по которой ведется синхронизация
// 
// Параметры:
// 	Форма - форма объекта
//  Объект - объект данных
//  Элемент - элемнт формы в котором возникла активизация строки
//  СинхронизируемыеТабличныеЧасти - соответствие с 
//  			элементами, соответствующими синхронизируемым табличным полям
//  ИмяКолонки - имя колнки синхронизации
Процедура СинхронизироватьСтроки(Форма, Объект, Элемент, СинхронизируемыеТабличныеЧасти, ИмяКолонки) Экспорт
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СинхронизируемыеТабличныеЧасти[Имя] Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСоответствия Из СинхронизируемыеТабличныеЧасти Цикл
		Если ЭлементСоответствия.Ключ = Имя Тогда 
			Продолжить;
		КонецЕсли;
		Попытка
			СтрокаТЧ = Объект[ЭлементСоответствия.Ключ].Найти(Элемент.ТекущиеДанные[ИмяКолонки], ИмяКолонки);
		Исключение
			СтрокаТЧ = Форма.ЭлементыФормы[ЭлементСоответствия.Ключ].Значение.Найти(Элемент.ТекущиеДанные[ИмяКолонки], ИмяКолонки);
		КонецПопытки;
		Если СтрокаТЧ <> Неопределено Тогда
			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Истина;
			Форма.ЭлементыФормы[ЭлементСоответствия.Ключ].ТекущаяСтрока = СтрокаТЧ;
			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ] = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  //  СинхронизироватьСтроки

// Процедура строит список должностей (или подразделений), по штатному расписанию организации.
//  
// Параметры: 
//  Режим - строка, может принимать значения: "Должность" или "ПодразделениеОрганизации"
//			определяет, что именно будет выбирать пользователь
//  ДолжностьИлиПодразделениеОрганизации - СправочникСсылка.ПодразделенияОрганизаций или   
//          СправочникСсылка.ДолжностиОрганизаций, второе значение в текущей строке т.п.
//
// Возвращаемое значение
//  нет
//
Функция ВыбратьИзШтатногоРасписанияОрганизации(Режим, Организация, ДолжностьИлиПодразделениеОрганизации) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("ДолжностьИлиПодразделениеОрганизации", ДолжностьИлиПодразделениеОрганизации);
	
	Если Режим = "ПодразделениеОрганизации" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Элемент,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации.Наименование КАК ЭлементНаименование
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(, ПодразделениеОрганизации.Владелец = &Владелец) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
		|ГДЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок > 0";
		Если ЗначениеЗаполнено(ДолжностьИлиПодразделениеОрганизации) Тогда
			ТекстЗапроса = ТекстЗапроса + "	И ШтатноеРасписаниеОрганизацийСрезПоследних.Должность = &ДолжностьИлиПодразделениеОрганизации";
		КонецЕсли;	
		
	ИначеЕсли Режим = "Должность" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность КАК Элемент,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность.Наименование КАК ЭлементНаименование
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(, ПодразделениеОрганизации.Владелец = &Владелец) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
		|ГДЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок > 0";
		
		Если ЗначениеЗаполнено(ДолжностьИлиПодразделениеОрганизации) Тогда
			ТекстЗапроса = ТекстЗапроса + "	И ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации = &ДолжностьИлиПодразделениеОрганизации";
		КонецЕсли;	
		
	Иначе
		Возврат Новый СписокЗначений
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	СписокВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Элемент, Выборка.ЭлементНаименование);	
	КонецЦикла;
	
    Возврат СписокВыбора
	
КонецФункции // ВыбратьИзШтатногоРасписанияОрганизации

// Процедура строит список должностей (или подразделений), по кадровому плану предприятия.
//
// Параметры: 
//  Режим - строка, может принимать значения: "Должность" или "Подразделение" определяет, что именно 
//			будет выбирать пользователь
//  ДолжностьИлиПодразделение - СправочникСсылка.Подразделения или СправочникСсылка.Должности,  
//			второе значение в текущей строке т.п.
//
// Возвращаемое значение
//  нет
//
Функция ВыбратьИзКадровогоПланаПредприятия(Режим, ДолжностьИлиПодразделение) Экспорт
	
	Запрос = Новый Запрос;
	
	Если НЕ ЗначениеЗаполнено(ДолжностьИлиПодразделение) Тогда
		Возврат Новый СписокЗначений 
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ДолжностьИлиПодразделение",ДолжностьИлиПодразделение);
		
	Если Режим = "Подразделение" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыйПланСрезПоследних.Подразделение КАК Элемент,
		|	КадровыйПланСрезПоследних.Подразделение.Наименование КАК ЭлементНаименование
		|ИЗ
		|	РегистрСведений.КадровыйПлан.СрезПоследних(
		|		,
		|		Должность В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ДолжностиОрганизаций.Ссылка
		|			ИЗ
		|				Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
		|			ГДЕ
		|				ДолжностиОрганизаций.Должность = &ДолжностьИлиПодразделение)) КАК КадровыйПланСрезПоследних
		|ГДЕ
		|	КадровыйПланСрезПоследних.Количество > 0";
		
	ИначеЕсли Режим = "Должность" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДолжностиОрганизаций.Ссылка КАК Элемент,
		|	ДолжностиОрганизаций.Наименование КАК ЭлементНаименование
		|ИЗ
		|	Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
		|ГДЕ
		|	ДолжностиОрганизаций.Должность В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				КадровыйПланСрезПоследних.Должность
		|			ИЗ
		|				РегистрСведений.КадровыйПлан.СрезПоследних(, Подразделение = &ДолжностьИлиПодразделение) КАК КадровыйПланСрезПоследних
		|			ГДЕ
		|				КадровыйПланСрезПоследних.Количество > 0)";
		
	Иначе
		Возврат Новый СписокЗначений 
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений 
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	СписокВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Элемент, Выборка.ЭлементНаименование);	
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции // ВыбратьИзКадровогоПланаПредприятия

// Функция возвращаект сведения о позиции штатного расписания на выбранную дату
// для измерений Подразделение и Должность
//
Функция СведенияОПозицииШтатногоРасписания(Период, Подразделение, Должность) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаАктуальности",	Период);
	Запрос.УстановитьПараметр("Подразделение",		Подразделение);
	Запрос.УстановитьПараметр("Должность",			Должность);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.МинимальнаяТарифнаяСтавка,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.МаксимальнаяТарифнаяСтавка,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.ВидТарифнойСтавки,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.ГрафикРаботы,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.ВалютаТарифнойСтавки
	|ИЗ
	|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(
	|		&ДатаАктуальности,
	|		ПодразделениеОрганизации = &Подразделение
	|			И Должность = &Должность) КАК ШтатноеРасписаниеОрганизацийСрезПоследних";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СведенияОПозицииШтатногоРасписания()

// Возвращает структуру с данными по выбранному работнику 
// Парамтеры:
//	Сотрудник - ссылка на справочник Сотрудники
//	ВыбираемыеДанные - строка, признак того, что нужно выбирать данные из регистров Работники и/или УчетЗаработкаРаботников
//
// Возвращаемое значение:
//  Структура с элементами
//		всегда присуствует 
//			Физлицо
//		если ВыбираемыеДанные содержит строку "Работники"
//			Подразделение
//			Должность
//			ГрафикРаботы
//			ЗанимаемыхСтавок
//		если ВыбираемыеДанные содержит строку "УчетЗаработкаРаботников"
//			СпособОтраженияВУпрУчете
//			УчетНачисленийПоОрганизации
//
Функция СведенияПоВыбранномуРаботнику(Сотрудник, ВыбираемыеДанные) Экспорт
	
	// Получим данные из среза последних
	ВыбиратьРаботники = Найти(ВыбираемыеДанные, "Работники") > 0;
	ВыбиратьУчетЗаработкаРаботников = Найти(ВыбираемыеДанные, "УчетЗаработкаРаботников") > 0;
	
	Запрос = Новый Запрос;
	Если ВыбиратьРаботники Тогда
		Если Не ВыбиратьУчетЗаработкаРаботников Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	&Сотрудник КАК Сотрудник,
			|	Работники.Подразделение,
			|	Работники.Должность,
			|	Работники.ГрафикРаботы,
			|	Работники.ЗанимаемыхСтавок
			|ИЗ
			|	РегистрСведений.Работники.СрезПоследних(
			|		,
			|		Физлицо В
			|			(ВЫБРАТЬ
			|				СотрудникиОрганизаций.Физлицо
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|			ГДЕ
			|				СотрудникиОрганизаций.%СсылкаСотрудник% = &Сотрудник)) КАК Работники";
			
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	&Сотрудник КАК Сотрудник,
			|	Работники.Подразделение,
			|	Работники.Должность,
			|	Работники.ГрафикРаботы,
			|	Работники.ЗанимаемыхСтавок,
			|	УчетЗаработкаРаботников.СпособОтраженияВУпрУчете,
			|	УчетЗаработкаРаботников.УчетНачисленийПоОрганизации
			|ИЗ
			|	РегистрСведений.Работники.СрезПоследних(
			|		,
			|		Физлицо В
			|			(ВЫБРАТЬ
			|				СотрудникиОрганизаций.Физлицо
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|			ГДЕ
			|				СотрудникиОрганизаций.%СсылкаСотрудник% = &Сотрудник)) КАК Работники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(
			|		,
			|		Физлицо В
			|			(ВЫБРАТЬ
			|				СотрудникиОрганизаций.Физлицо
			|			ИЗ
			|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|			ГДЕ
			|				СотрудникиОрганизаций.%СсылкаСотрудник% = &Сотрудник)) КАК УчетЗаработкаРаботников
			|		ПО (ИСТИНА)";
		КонецЕсли;
		
	ИначеЕсли ВыбиратьУчетЗаработкаРаботников Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Сотрудник КАК Сотрудник,
		|	УчетЗаработкаРаботников.СпособОтраженияВУпрУчете,
		|	УчетЗаработкаРаботников.УчетНачисленийПоОрганизации
		|ИЗ
		|	РегистрСведений.УчетЗаработкаРаботников.СрезПоследних(
		|		,
		|		Физлицо В
		|			(ВЫБРАТЬ
		|				СотрудникиОрганизаций.Физлицо
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ГДЕ
		|				СотрудникиОрганизаций.%СсылкаСотрудник% = &Сотрудник)) КАК УчетЗаработкаРаботников";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Сотрудник КАК Сотрудник,
		|	Работники.ФизЛицо
		|ИЗ
		|	РегистрСведений.Работники.СрезПоследних(
		|		,
		|		Физлицо В
		|			(ВЫБРАТЬ
		|				СотрудникиОрганизаций.Физлицо
		|			ИЗ
		|				Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|			ГДЕ
		|				СотрудникиОрганизаций.%СсылкаСотрудник% = &Сотрудник)) КАК Работники";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СсылкаСотрудник%", ?(ТипЗнч(Сотрудник)=Тип("СправочникСсылка.ФизическиеЛица"), "Физлицо", "Ссылка"));
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
		
	Иначе
		Если ВыбиратьРаботники Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ВыбранныйНаборДанных = Новый Структура("Сотрудник, Подразделение, Должность, ГрафикРаботы, ЗанимаемыхСтавок");
			ВыбранныйНаборДанных.Сотрудник			= Выборка.Сотрудник;
			ВыбранныйНаборДанных.Подразделение		= Выборка.Подразделение;
			ВыбранныйНаборДанных.Должность			= Выборка.Должность;
			ВыбранныйНаборДанных.ГрафикРаботы		= Выборка.ГрафикРаботы;
			ВыбранныйНаборДанных.ЗанимаемыхСтавок	= Выборка.ЗанимаемыхСтавок;
			Если ВыбиратьУчетЗаработкаРаботников Тогда
				ВыбранныйНаборДанных.Вставить("СпособОтраженияВУпрУчете",		Выборка.СпособОтраженияВУпрУчете);
				ВыбранныйНаборДанных.Вставить("УчетНачисленийПоОрганизации",	Выборка.УчетНачисленийПоОрганизации);
			КонецЕсли;
			
		ИначеЕсли ВыбиратьУчетЗаработкаРаботников Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ВыбранныйНаборДанных = Новый Структура("Сотрудник, СпособОтраженияВУпрУчете, УчетНачисленийПоОрганизации");
			ВыбранныйНаборДанных.Сотрудник						= Выборка.Сотрудник;
			ВыбранныйНаборДанных.СпособОтраженияВУпрУчете		= Выборка.СпособОтраженияВУпрУчете;
			ВыбранныйНаборДанных.УчетНачисленийПоОрганизации	= Выборка.УчетНачисленийПоОрганизации;
			
		Иначе
			ВыбранныйНаборДанных = Новый Структура("Сотрудник");
			ВыбранныйНаборДанных.Сотрудник	= Выборка.Сотрудник;
			
		КонецЕсли;
		
		Возврат ВыбранныйНаборДанных;
		
	КонецЕсли;
	
КонецФункции // СведенияПоВыбранномуРаботнику

// Открывает форму ввода на основании
//
Процедура ВводРегламентированногоКадровогоДокументаНаОсновании(Основание) Экспорт
	
	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВводаНаОсновании = Обработки.ВводРегламентированныхКадровыхДокументовНаОсновании.ПолучитьФорму();
	
	ФормаВводаНаОсновании.Основание = Основание;
	
	ФормаВводаНаОсновании.Открыть();
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СПИСКОВ ЗНАЧЕНИЙ ПЕРЕЧИСЛЕНИЙ

// Возвращает список причин отсутствия, регистрируемых документом Отсутствие организации
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления 
//
Функция ПолучитьСписокПрочихСостоянийРаботника() Экспорт

	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Заболевание);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Работает);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Простой);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ВынужденныйПрогул);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ГосударственныеОбязанности);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.Прогулы);
	СписокСпособов.Добавить(Перечисления.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемые);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокПрочихСостоянийРаботника()

////////////////////////////////////////////////////////////////////////////////
// КАДРОВАЯ НУМЕРАЦИЯ

// имитация кадрового нумератора для поддержки учетной политики по персоналу с 
// кадровым нумераторм документов
Процедура ПриУстановкеНовогоНомераКадровогоДокумента(СтандартнаяОбработка, ЕдиныйНумераторКадровыхДокументов, Номер, Префикс, Дата) Экспорт
	// проверка учетной политики
	Если ЕдиныйНумераторКадровыхДокументов Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить("КадровоеПеремещениеОрганизаций");
		СписокДокументов.Добавить("ПриемНаРаботуВОрганизацию");
		СписокДокументов.Добавить("УвольнениеИзОрганизаций");
		
		НовыйНомер = ПолучитьНовыйНомерПоДокументам(СписокДокументов, Префикс, Дата);
		
		Если НовыйНомер <> "" Тогда
			СтандартнаяОбработка = Ложь;
			Номер = НовыйНомер;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Получает новый номер документа по переданному списку документов и префиксу
// Фактически, имитирует работу нумератора докумнетов
// Если в информационной базе еще нет документов вернет пустую стоку
//
// Только для документов со строковым номером!
//
// Параметры:
//	СписокДокументов - массив строк с именами документов
//  Префикс - строка, префикс номера
//  Дата - дата документа
// Возвращаемое значение:
//  строка
//
Функция ПолучитьНовыйНомерПоДокументам(СписокДокументов, Префикс, Дата)
	
	Запрос = Новый Запрос;
	
	Результат = Новый СписокЗначений;
	
	Для Каждого Документ из СписокДокументов Цикл
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номер
		|ИЗ
		|	Документ."+Документ+"
		|ГДЕ Номер Подобно """ + Префикс + "%""
		|  И Дата>=&НачалоГода
		|  И Дата<=&КонецГода
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер УБЫВ";
		
        // поддерживается "годовая" кадровая нумерация
        Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Дата));
    	Запрос.УстановитьПараметр("КонецГода", КонецГода(Дата));
        
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат.Добавить(Выборка.Номер);
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		// выберем наибольший
		Результат.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		// получим новый номер
		НовыйНомер = ПолучитьСледующийНомер(СокрП(Результат[0].Значение));
	Иначе
		НовыйНомер = "";
	КонецЕсли;
	Возврат НовыйНомер;
	
КонецФункции		

// Увеличивает номер в переданной строке на 1
//
// Параметры
//  ПоследнийНомер - строка - представляет собой номер (документа, табельный и т.п.)
//
// Возвращаемое значение:
//  строка  - следующий по порядку номер
//
Функция ПолучитьСледующийНомер(ПоследнийНомер, Знач ДлинаНомера = 0) Экспорт
	
	Если ДлинаНомера = 0 Тогда
		ДлинаНомера = СтрДлина(ПоследнийНомер);
	КонецЕсли;
	Если ДлинаНомера = 0 Тогда
		Возврат "1"
	КонецЕсли;
	СчетчикСимв = ДлинаНомера;
	Пока СчетчикСимв > 0 Цикл
		Если Не ПустаяСтрока(Сред(ПоследнийНомер, СчетчикСимв, 1)) и ОбщегоНазначения.ТолькоЦифрыВСтроке(Сред(ПоследнийНомер, СчетчикСимв, 1)) Тогда
			СчетчикСимв = СчетчикСимв - 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СчетчикСимв = ДлинаНомера Тогда
		НомерЧисловой = 1
	Иначе
		НомерЧисловой = Число(Сред(ПоследнийНомер, СчетчикСимв + 1));
	КонецЕсли;
	Если НомерЧисловой < Pow(10, ДлинаНомера - СчетчикСимв) - 1 Тогда
		СледующийНомер = НомерЧисловой + 1;
	Иначе
		СледующийНомер = НомерЧисловой;
	КонецЕсли;
	НовыйНомер = Лев(ПоследнийНомер,  СчетчикСимв) + Формат(СледующийНомер,"ЧЦ=" + (ДлинаНомера - СчетчикСимв) + "; ЧВН=; ЧГ=0");
	Возврат НовыйНомер
	
КонецФункции // ПолучитьСледующийНомер()

// проверяет уникальность кадрового номера
// если не уникален - возвращает Ложь
// Параметры:
//  ЕдиныйНумераторКадровыхДокументов - сведения по учетной политике ведения единого нумератора кадровых документов
//  Организация
//  Номер - проверяемый номер
//  Дата - дата проверяемого документа
//  Ссылка - ссылка на документ, для которого выпорлняется проверка
//
// Вызывает исключение! 
// Должна использоваться, например, при записи документа.
//
Функция ПроверкаУникальностиНомераКадровогоДокумента(ЕдиныйНумераторКадровыхДокументов, Номер, Дата, Ссылка) Экспорт
	// проверка учетной политики
	Если ЕдиныйНумераторКадровыхДокументов Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить("КадровоеПеремещениеОрганизаций");
		СписокДокументов.Добавить("ПриемНаРаботуВОрганизацию");
		СписокДокументов.Добавить("УвольнениеИзОрганизаций");
		
		Если Не ПроверкаУникальностиНомераПоДокументам(СписокДокументов, Номер, Дата, Ссылка) Тогда
			ВызватьИсключение "Неуникальный номер кадрового документа! (" + Номер + ")";
		КонецЕсли;
	КонецЕсли;
КонецФункции

// используется в ПроверкаУникальностиНомераКадровогоДокумента
Функция ПроверкаУникальностиНомераПоДокументам(СписокДокументов, Номер, Дата, Ссылка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Номер", Номер);
    // поддерживается "годовая" кадровая нумерация
    Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(Дата));
	
	Для Каждого Документ из СписокДокументов Цикл
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номер
		|ИЗ
		|	Документ." + Документ+"
		|ГДЕ Ссылка <> &Ссылка 
        |   И Номер = &Номер 
        |   И Дата>=&НачалоГода 
        |   И Дата<=&КонецГода";
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫПОЛНЯЮЩИЕ ВКЛЮЧЕНИЕ (ВЫКЛЮЧЕНИЕ) ПОДДЕРЖКИ ВНУТРЕННОГО СОВМЕСТИТЕЛЬСТВА

// Функция проверяет можно ли отключать поддержку внутренних совместителей
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Истина - можно отключать, Ложь - существуют внутренние совместители =>
//	отключение невозможно
//
// Описание:
//  Проверяет, есть ли внутренние совместители 
//
Функция МожноОтключатьВнутреннееСовместительство(Организация) Экспорт
	
	#Если Клиент Тогда
	Состояние("Выполняется поиск внутренних совместителей");
	#КонецЕсли
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Организация = &Организация
	|	И РаботникиОрганизации.Сотрудник.ВидЗанятости = &ВнутреннееСовместительство");
	
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство",	Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Отключить поддержку внутреннего совместительства невозможно, т.к. некоторые работники заняты на нескольких местах работы!");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // МожноОтключатьВнутреннееСовместительство()

// Проверяет уникальность кадровых номеров
//
// Параметры: 
//	Организация - нет
//
// Возвращаемое значение:
//  Истина	- если номера уникальные
//	Ложь	- если номера не уникальные
Функция НомераКадровыхДокументовУникальны(Организация) Экспорт
	
	Отказ = Ложь;
	ЗаголовокСообщения = "Включить единый кадровый нумератор невозможно, т.к. следующие номера используются в нескольких кадровых документах:";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОрганизации.Номер
	|ИЗ
	|	(ВЫБРАТЬ
	|		ГОД(КадровоеПеремещениеОрганизаций.Дата) КАК Год,
	|		КадровоеПеремещениеОрганизаций.Номер КАК Номер,
	|		КадровоеПеремещениеОрганизаций.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
	|	ГДЕ
	|		КадровоеПеремещениеОрганизаций.Организация = &Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГОД(ПриемНаРаботуВОрганизацию.Дата),
	|		ПриемНаРаботуВОрганизацию.Номер,
	|		ПриемНаРаботуВОрганизацию.Ссылка
	|	ИЗ
	|		Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
	|	ГДЕ
	|		ПриемНаРаботуВОрганизацию.Организация = &Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГОД(УвольнениеИзОрганизаций.Дата),
	|		УвольнениеИзОрганизаций.Номер,
	|		УвольнениеИзОрганизаций.Ссылка
	|	ИЗ
	|		Документ.УвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций
	|	ГДЕ
	|		УвольнениеИзОрганизаций.Организация = &Организация) КАК ДокументыОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ГОД(КадровоеПеремещениеОрганизаций.Дата) КАК Год,
	|			КадровоеПеремещениеОрганизаций.Номер КАК Номер,
	|			КадровоеПеремещениеОрганизаций.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ГОД(ПриемНаРаботуВОрганизацию.Дата),
	|			ПриемНаРаботуВОрганизацию.Номер,
	|			ПриемНаРаботуВОрганизацию.Ссылка
	|		ИЗ
	|			Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ГОД(УвольнениеИзОрганизаций.Дата),
	|			УвольнениеИзОрганизаций.Номер,
	|			УвольнениеИзОрганизаций.Ссылка
	|		ИЗ
	|			Документ.УвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций) КАК ВсеКадровыеДокументы
	|		ПО ДокументыОрганизации.Год = ВсеКадровыеДокументы.Год
	|			И ДокументыОрганизации.Номер = ВсеКадровыеДокументы.Номер
	|			И ДокументыОрганизации.Ссылка <> ВсеКадровыеДокументы.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация",Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначения.СообщитьОбОшибке(Выборка.Номер,Отказ,ЗаголовокСообщения);
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции //НомераКадровыхДокументовУникальны()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ПРОВЕРЯЮЩИЕ ВОЗМОЖНОСТЬ ОТКЛЮЧЕНИЯ ВЕДЕНИЯ УЧЕТА В ВАЛЮТЕ

// Функция проверяет можно ли отключать поддержку учета в валюте
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Истина - можно отключать, Ложь - нельзя отключать, есть начисления (удержания) в валюте
//
// Описание:
//  Проверяет, есть действующие начисления (удержания) в валюте 
//
Функция МожноОтключатьУчетВВалюте(Организация) Экспорт
	
	ПарамРубли = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	Если ПарамРубли.Пустая() Тогда
		ПарамРубли = Справочники.Валюты.НайтиПоКоду("980")
	КонецЕсли;
	
	ТекстЗапроса = 
	 "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	 |ИЗ
	 |	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	 |ГДЕ
	 |	ПлановыеНачисленияРаботниковОрганизаций.Валюта1 <> &ПарамРубли
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта1 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта2 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта3 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта4 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта5 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Валюта6 <> &ПарамПустаяВалюта
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Актуальность
	 |	И ПлановыеНачисленияРаботниковОрганизаций.Организация = &парамОрганизация
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ПлановыеУдержанияРаботниковОрганизаций.Сотрудник
	 |ИЗ
	 |	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержанияРаботниковОрганизаций
	 |ГДЕ
	 |	ПлановыеУдержанияРаботниковОрганизаций.Валюта1 <> &ПарамРубли
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта1 <> &ПарамПустаяВалюта
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта2 <> &ПарамПустаяВалюта
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта3 <> &ПарамПустаяВалюта
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта4 <> &ПарамПустаяВалюта
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта5 <> &ПарамПустаяВалюта
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Валюта6 <> &ПарамПустаяВалюта
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Действие <> &ПарамПрекратить
	 |	И ПлановыеУдержанияРаботниковОрганизаций.Организация <> &парамОрганизация";
	 
	 	 
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ПарамОрганизация", Организация);
	Запрос.УстановитьПараметр("ПарамРубли", ПарамРубли);
	Запрос.УстановитьПараметр("ПарамПустаяВалюта", Справочники.Валюты.ПустаяСсылка());	
	Запрос.УстановитьПараметр("ПарамПрекратить", Перечисления.ВидыДействияСНачислением.Прекратить);
		
 	Возврат Запрос.Выполнить().Пустой();
	 
КонецФункции //МожноОтключатьУчетВВалюте

// Получение значения учетной политики по персоналу
// Если в соответствии по данной организации нет политики - пытаемся прочитать ее из ИБ, если там нет - 
// она добавляется как политика по умолчанию
//
// Параметры:
//
//  УчетнаяПолитика - соответствие политик по организациям
//  Организация - ссылка на организацию
//  ИмяПолитики - название получаемой учетной политики
//
Функция ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитика, Организация, ИмяПолитики) Экспорт
	
	Если УчетнаяПолитика[Организация] = Неопределено Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПоддержкаВнутреннегоСовместительства, ЛОЖЬ) КАК ПоддержкаВнутреннегоСовместительства,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ЕдиныйНумераторКадровыхДокументов, ЛОЖЬ) КАК ЕдиныйНумераторКадровыхДокументов,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПроверкаШтатногоРасписания, ЛОЖЬ) КАК ПроверкаШтатногоРасписания,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.РасчетЗарплатыОрганизацииПоОтветственным, ЛОЖЬ) КАК РасчетЗарплатыОрганизацииПоОтветственным,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ПоказыватьТабельныеНомераВДокументах, ЛОЖЬ) КАК ПоказыватьТабельныеНомераВДокументах,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизаций.ИспользуютсяНачисленияВВалюте, ЛОЖЬ) КАК ИспользуютсяНачисленияВВалюте
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация)
		|ГДЕ
		|	Организации.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка",Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			УчетнаяПолитика.Вставить(Организация, 
				Новый Структура(
				"ПоддержкаВнутреннегоСовместительства,
				|ЕдиныйНумераторКадровыхДокументов,
				|ПроверкаШтатногоРасписания,
				|РасчетЗарплатыОрганизацииПоОтветственным,
				|ПоказыватьТабельныеНомераВДокументах,
				|ИспользуютсяНачисленияВВалюте",
				Выборка.ПоддержкаВнутреннегоСовместительства,
				Выборка.ЕдиныйНумераторКадровыхДокументов,
				Выборка.ПроверкаШтатногоРасписания,
				Выборка.РасчетЗарплатыОрганизацииПоОтветственным,
				Выборка.ПоказыватьТабельныеНомераВДокументах,
				Выборка.ИспользуютсяНачисленияВВалюте));
		Иначе 
			УчетнаяПолитика.Вставить(Организация, 
				Новый Структура(
				"ПоддержкаВнутреннегоСовместительства,
				|ЕдиныйНумераторКадровыхДокументов,
				|ПроверкаШтатногоРасписания,
				|РасчетЗарплатыОрганизацииПоОтветственным,
				|ПоказыватьТабельныеНомераВДокументах,
				|ИспользуютсяНачисленияВВалюте",
				Ложь,
				Ложь,
				Ложь,
				Ложь,
				Ложь,
				Истина));
		КонецЕсли;		
	КонецЕсли;
	
	Возврат УчетнаяПолитика[Организация][ИмяПолитики];
	
КонецФункции // ЗначениеУчетнойПолитикиПоПерсоналуОрганизации()


//////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТОВ
Функция СформироватьЗапросПоПлановымНачислениям(ДанныеОНачислениях, ПроверкаШтатногоРасписания, ДанныеПлановыхНачислений = Неопределено) Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеОНачислениях", ДанныеОНачислениях);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Ссылка,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.ПодразделениеОрганизации,
	|	ТЧНачисления.Должность,
	|	ТЧНачисления.ЗанимаемыхСтавок,
	|	ТЧНачисления.ГрафикРаботы,
	|	ТЧНачисления.Действие,
	|	ТЧНачисления.ДатаНачала,
	|	ТЧНачисления.ДатаОкончания,
	|	ТЧНачисления.ВидРасчета,
	|	ТЧНачисления.ВидРасчетаИзмерение,
	|	ТЧНачисления.СпособРасчета,
	|	ТЧНачисления.ЗачетОтработанногоВремени,
	|	ТЧНачисления.ТребуетВводаТарифногоРазряда,
	|	ТЧНачисления.ПроизвольнаяФормулаРасчета,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Валюта1,
	|	ТЧНачисления.ТарифныйРазряд1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Валюта2,
	|	ТЧНачисления.ТарифныйРазряд2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Валюта3,
	|	ТЧНачисления.ТарифныйРазряд3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Валюта4,
	|	ТЧНачисления.ТарифныйРазряд4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Валюта5,
	|	ТЧНачисления.ТарифныйРазряд5,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Валюта6,
	|	ТЧНачисления.ТарифныйРазряд6
	|ПОМЕСТИТЬ ВТДанныеОНачислениях
	|ИЗ
	|	&ДанныеОНачислениях КАК ТЧНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДанныеОНачислениях";
	
	// временная таблица с результатами проверки штатного расписания
	Если ПроверкаШтатногоРасписания Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТЧНачисления.ЗанимаемыхСтавок <> 1
		|			ТОГДА ИСТИНА
		|		КОГДА ТЧНачисления.ЗачетОтработанногоВремени
		|				И ТЧНачисления.Действие В (ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать), ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить))
		|			ТОГДА ВЫБОР
		|					КОГДА ТЧНачисления.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам))
		|							И ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.Месячная)
		|						ТОГДА ВЫБОР
		|								КОГДА ТЧНачисления.ТребуетВводаТарифногоРазряда
		|									ТОГДА ВЫБОР
		|											КОГДА РазмерТарифныхСтавок.Размер < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка
		|												ТОГДА ЛОЖЬ
		|											КОГДА РазмерТарифныхСтавок.Размер > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка
		|												ТОГДА ЛОЖЬ
		|											ИНАЧЕ ИСТИНА
		|										КОНЕЦ
		|								ИНАЧЕ ВЫБОР
		|										КОГДА ТЧНачисления.Показатель1 < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка
		|											ТОГДА ЛОЖЬ
		|										КОГДА ТЧНачисления.Показатель1 > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка
		|											ТОГДА ЛОЖЬ
		|										ИНАЧЕ ИСТИНА
		|									КОНЕЦ
		|							КОНЕЦ
		|					КОГДА ТЧНачисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
		|							И ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.Дневная)
		|						ТОГДА ВЫБОР
		|								КОГДА ТЧНачисления.ТребуетВводаТарифногоРазряда
		|									ТОГДА ВЫБОР
		|											КОГДА РазмерТарифныхСтавок.Размер < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка
		|												ТОГДА ЛОЖЬ
		|											КОГДА РазмерТарифныхСтавок.Размер > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка
		|												ТОГДА ЛОЖЬ
		|											ИНАЧЕ ИСТИНА
		|										КОНЕЦ
		|								ИНАЧЕ ВЫБОР
		|										КОГДА ТЧНачисления.Показатель1 < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка
		|											ТОГДА ЛОЖЬ
		|										КОГДА ТЧНачисления.Показатель1 > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка
		|											ТОГДА ЛОЖЬ
		|										ИНАЧЕ ИСТИНА
		|									КОНЕЦ
		|							КОНЕЦ
		|					КОГДА ТЧНачисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
		|							И ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.Часовая)
		|						ТОГДА ВЫБОР
		|								КОГДА ТЧНачисления.ТребуетВводаТарифногоРазряда
		|									ТОГДА ВЫБОР
		|											КОГДА РазмерТарифныхСтавок.Размер < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка
		|												ТОГДА ЛОЖЬ
		|											КОГДА РазмерТарифныхСтавок.Размер > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка
		|												ТОГДА ЛОЖЬ
		|											ИНАЧЕ ИСТИНА
		|										КОНЕЦ
		|								ИНАЧЕ ВЫБОР
		|										КОГДА ТЧНачисления.Показатель1 < ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка
		|											ТОГДА ЛОЖЬ
		|										КОГДА ТЧНачисления.Показатель1 > ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка
		|											ТОГДА ЛОЖЬ
		|										ИНАЧЕ ИСТИНА
		|									КОНЕЦ
		|							КОНЕЦ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РазмерСоответствуетШТР
		|ПОМЕСТИТЬ ВТДанныеШтатногоРасписания
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТЧНачисления.НомерСтроки КАК НомерСтроки,
		|		ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		ТЧНачисления.Должность КАК Должность,
		|		ТЧНачисления.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|		ТЧНачисления.ТарифныйРазряд1 КАК ТарифныйРазряд1,
		|		ТЧНачисления.ТарифныйРазряд2 КАК ТарифныйРазряд2,
		|		ТЧНачисления.ТарифныйРазряд3 КАК ТарифныйРазряд3,
		|		ТЧНачисления.ТарифныйРазряд4 КАК ТарифныйРазряд4,
		|		ТЧНачисления.ТарифныйРазряд5 КАК ТарифныйРазряд5,
		|		ТЧНачисления.ТарифныйРазряд6 КАК ТарифныйРазряд6,
		|		ТЧНачисления.Показатель1 КАК Показатель1,
		|		ТЧНачисления.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|		ТЧНачисления.ТребуетВводаТарифногоРазряда КАК ТребуетВводаТарифногоРазряда,
		|		ТЧНачисления.СпособРасчета КАК СпособРасчета,
		|		ТЧНачисления.Действие КАК Действие,
		|		МАКСИМУМ(ШтатноеРасписаниеОрганизаций.Период) КАК ПериодШтР,
		|		МАКСИМУМ(РазмерТарифныхСтавок.Период) КАК ПериодРазряда
		|	ИЗ
		|		ВТДанныеОНачислениях КАК ТЧНачисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
		|			ПО ТЧНачисления.ПодразделениеОрганизации = ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации
		|				И ТЧНачисления.Должность = ШтатноеРасписаниеОрганизаций.Должность
		|				И ТЧНачисления.ДатаНачала >= ШтатноеРасписаниеОрганизаций.Период
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
		|			ПО ТЧНачисления.ДатаНачала >= РазмерТарифныхСтавок.Период
		|				И ТЧНачисления.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТЧНачисления.ПодразделениеОрганизации,
		|		ТЧНачисления.Должность,
		|		ТЧНачисления.ЗанимаемыхСтавок,
		|		ТЧНачисления.ТарифныйРазряд1,
		|		ТЧНачисления.ТарифныйРазряд2,
		|		ТЧНачисления.ТарифныйРазряд3,
		|		ТЧНачисления.ТарифныйРазряд4,
		|		ТЧНачисления.ТарифныйРазряд5,
		|		ТЧНачисления.ТарифныйРазряд6,
		|		ТЧНачисления.Показатель1,
		|		ТЧНачисления.ЗачетОтработанногоВремени,
		|		ТЧНачисления.ТребуетВводаТарифногоРазряда,
		|		ТЧНачисления.СпособРасчета,
		|		ТЧНачисления.Действие,
		|		ТЧНачисления.НомерСтроки) КАК ТЧНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
		|		ПО ТЧНачисления.ПериодШтР = ШтатноеРасписаниеОрганизаций.Период
		|			И ТЧНачисления.ПодразделениеОрганизации = ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации
		|			И ТЧНачисления.Должность = ШтатноеРасписаниеОрганизаций.Должность
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
		|		ПО ТЧНачисления.ПериодРазряда = РазмерТарифныхСтавок.Период
		|			И (ТЧНачисления.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд
		|				ИЛИ ТЧНачисления.ТарифныйРазряд2 = РазмерТарифныхСтавок.ТарифныйРазряд
		|				ИЛИ ТЧНачисления.ТарифныйРазряд3 = РазмерТарифныхСтавок.ТарифныйРазряд
		|				ИЛИ ТЧНачисления.ТарифныйРазряд4 = РазмерТарифныхСтавок.ТарифныйРазряд
		|				ИЛИ ТЧНачисления.ТарифныйРазряд5 = РазмерТарифныхСтавок.ТарифныйРазряд
		|				ИЛИ ТЧНачисления.ТарифныйРазряд6 = РазмерТарифныхСтавок.ТарифныйРазряд)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
		|	ИСТИНА КАК РазмерСоответствуетШТР
		|ПОМЕСТИТЬ ВТДанныеШтатногоРасписания
		|ИЗ
		|	ВТДанныеОНачислениях КАК ТЧНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
	КонецЕсли;
	
	Запрос.Выполнить();	
	
	// временная таблица с данными плановых начислений по состоянию до изменения
	
	Если ДанныеПлановыхНачислений = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧНачисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТДанныеОНачислениях КАК ТЧНачисления
		|ГДЕ
		|	(ТЧНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
		|			ИЛИ ТЧНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить))";

		Если Запрос.Выполнить().Пустой() Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|	ТЧОсновныеНачисления.ВидРасчета КАК ПрежнийВидРасчета,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд1,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель1,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта1,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд2,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель2,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта2,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд3,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель3,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта3,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд4,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель4,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта4,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд5,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель5,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта5,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийТарифныйРазряд6,
			|	НЕОПРЕДЕЛЕНО КАК ПрежнийПоказатель6,
			|	НЕОПРЕДЕЛЕНО КАК ПрежняяВалюта6,
			|	НЕОПРЕДЕЛЕНО КАК КонфликтныйДокумент,
			|	НЕОПРЕДЕЛЕНО КАК ДатаДвижения
			|ПОМЕСТИТЬ ВТДанныеОПрежнихНачислениях
			|ИЗ
			|	ВТДанныеОНачислениях КАК ТЧОсновныеНачисления
			|ГДЕ
			|	(ТЧОсновныеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
			|			ИЛИ ТЧОсновныеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДатыНачислений.НомерСтроки КАК НомерСтроки,
			|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета 		КАК ПрежнийВидРасчета,
			|	ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1 КАК ПрежнийТарифныйРазряд1,
			|	ПлановыеНачисленияРаботниковОрганизаций.Показатель1 	КАК ПрежнийПоказатель1,
			|	ПлановыеНачисленияРаботниковОрганизаций.Валюта1			КАК ПрежняяВалюта1,
			|	ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд2 КАК ПрежнийТарифныйРазряд2,
			|	ПлановыеНачисленияРаботниковОрганизаций.Показатель2 	КАК ПрежнийПоказатель2,
			|	ПлановыеНачисленияРаботниковОрганизаций.Валюта2			КАК ПрежняяВалюта2,
			|	ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд3 КАК ПрежнийТарифныйРазряд3,
			|	ПлановыеНачисленияРаботниковОрганизаций.Показатель3 	КАК ПрежнийПоказатель3,
			|	ПлановыеНачисленияРаботниковОрганизаций.Валюта3			КАК ПрежняяВалюта3,
			|	ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд4 КАК ПрежнийТарифныйРазряд4,
			|	ПлановыеНачисленияРаботниковОрганизаций.Показатель4 	КАК ПрежнийПоказатель4,
			|	ПлановыеНачисленияРаботниковОрганизаций.Валюта4			КАК ПрежняяВалюта4,
			|	ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд5 КАК ПрежнийТарифныйРазряд5,
			|	ПлановыеНачисленияРаботниковОрганизаций.Показатель5 	КАК ПрежнийПоказатель5,
			|	ПлановыеНачисленияРаботниковОрганизаций.Валюта5			КАК ПрежняяВалюта5,
			|	ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд6 КАК ПрежнийТарифныйРазряд6,
			|	ПлановыеНачисленияРаботниковОрганизаций.Показатель6 	КАК ПрежнийПоказатель6,
			|	ПлановыеНачисленияРаботниковОрганизаций.Валюта6			КАК ПрежняяВалюта6,    			
			|	ПРЕДСТАВЛЕНИЕ(ПлановыеНачисленияРаботниковОрганизаций.Регистратор) КАК КонфликтныйДокумент,
			|	ДатыНачислений.ПериодНачислений КАК ДатаДвижения
			|ПОМЕСТИТЬ ВТДанныеОПрежнихНачислениях
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|		ТЧОсновныеНачисления.ДатаНачала КАК ДатаНачала,
			|		ТЧОсновныеНачисления.Сотрудник КАК Сотрудник,
			|		ВЫБОР
			|			КОГДА ТЧОсновныеНачисления.ВидРасчетаИзмерение = """"
			|				ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
			|			ИНАЧЕ ТЧОсновныеНачисления.ВидРасчетаИзмерение
			|		КОНЕЦ КАК ВидРасчетаИзмерение,
			|		МАКСИМУМ(ПлановыеНачисленияРаботниковОрганизаций.Период) КАК ПериодНачислений
			|	ИЗ
			|		ВТДанныеОНачислениях КАК ТЧОсновныеНачисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
			|			ПО ТЧОсновныеНачисления.ДатаНачала >= ПлановыеНачисленияРаботниковОрганизаций.Период
			|				И ТЧОсновныеНачисления.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
			|				И (ВЫБОР
			|					КОГДА ТЧОсновныеНачисления.ВидРасчетаИзмерение = """"
			|						ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
			|					ИНАЧЕ ТЧОсновныеНачисления.ВидРасчетаИзмерение
			|				КОНЕЦ = ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение)
			|	ГДЕ
			|		(ТЧОсновныеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
			|				ИЛИ ТЧОсновныеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить))
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТЧОсновныеНачисления.НомерСтроки,
			|		ТЧОсновныеНачисления.ВидРасчета,
			|		ТЧОсновныеНачисления.ДатаНачала,
			|		ТЧОсновныеНачисления.Сотрудник,
			|		ВЫБОР
			|			КОГДА ТЧОсновныеНачисления.ВидРасчетаИзмерение = """"
			|				ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
			|			ИНАЧЕ ТЧОсновныеНачисления.ВидРасчетаИзмерение
			|		КОНЕЦ) КАК ДатыНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
			|		ПО ДатыНачислений.ПериодНачислений = ПлановыеНачисленияРаботниковОрганизаций.Период
			|			И ДатыНачислений.ВидРасчетаИзмерение = ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение
			|			И ДатыНачислений.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
		КонецЕсли;
		
	Иначе
		
		Запрос.УстановитьПараметр("ДанныеПлановыхНачислений", ДанныеПлановыхНачислений);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ТЧОсновныеНачисления.ПрежнийВидРасчета,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд1,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель1,
		|	ТЧОсновныеНачисления.ПрежняяВалюта1,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд2,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель2,
		|	ТЧОсновныеНачисления.ПрежняяВалюта2,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд3,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель3,
		|	ТЧОсновныеНачисления.ПрежняяВалюта3,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд4,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель4,
		|	ТЧОсновныеНачисления.ПрежняяВалюта4,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд5,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель5,
		|	ТЧОсновныеНачисления.ПрежняяВалюта5,
		|	ТЧОсновныеНачисления.ПрежнийТарифныйРазряд6,
		|	ТЧОсновныеНачисления.ПрежнийПоказатель6,
		|	ТЧОсновныеНачисления.ПрежняяВалюта6,
		|	ТЧОсновныеНачисления.КонфликтныйДокумент,
		|	ТЧОсновныеНачисления.ДатаДвижения
		|ПОМЕСТИТЬ ВТДанныеОПрежнихНачислениях
		|ИЗ
		|	&ДанныеПлановыхНачислений КАК ТЧОсновныеНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	Запрос.Выполнить();	
	
	// временная таблица с описанием показателей
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КоличествоПоказателей,
	|	Показатели1.Показатель.Предопределенный КАК Показатель1Предопределенный,
	|	Показатели1.Показатель.Наименование КАК Показатель1Наименование,
	|	Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя,
	|	Показатели1.Показатель.ВозможностьИзменения КАК Показатель1ВозможностьИзменения,
	|	Показатели2.Показатель.Предопределенный КАК Показатель2Предопределенный,
	|	Показатели2.Показатель.Наименование КАК Показатель2Наименование,
	|	Показатели2.Показатель.ТипПоказателя КАК Показатель2ТипПоказателя,
	|	Показатели2.Показатель.ВозможностьИзменения КАК Показатель2ВозможностьИзменения,
	|	Показатели3.Показатель.Предопределенный КАК Показатель3Предопределенный,
	|	Показатели3.Показатель.Наименование КАК Показатель3Наименование,
	|	Показатели3.Показатель.ТипПоказателя КАК Показатель3ТипПоказателя,
	|	Показатели3.Показатель.ВозможностьИзменения КАК Показатель3ВозможностьИзменения,
	|	Показатели4.Показатель.Предопределенный КАК Показатель4Предопределенный,
	|	Показатели4.Показатель.Наименование КАК Показатель4Наименование,
	|	Показатели4.Показатель.ТипПоказателя КАК Показатель4ТипПоказателя,
	|	Показатели4.Показатель.ВозможностьИзменения КАК Показатель4ВозможностьИзменения,
	|	Показатели5.Показатель.Предопределенный КАК Показатель5Предопределенный,
	|	Показатели5.Показатель.Наименование КАК Показатель5Наименование,
	|	Показатели5.Показатель.ТипПоказателя КАК Показатель5ТипПоказателя,
	|	Показатели5.Показатель.ВозможностьИзменения КАК Показатель5ВозможностьИзменения,
	|	Показатели6.Показатель.Предопределенный КАК Показатель6Предопределенный,
	|	Показатели6.Показатель.Наименование КАК Показатель6Наименование,
	|	Показатели6.Показатель.ТипПоказателя КАК Показатель6ТипПоказателя,
	|	Показатели6.Показатель.ВозможностьИзменения КАК Показатель6ВозможностьИзменения,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели1.Показатель.ТарифнаяСтавка КАК Показатель1ТарифнаяСтавка,
	|	Показатели2.Показатель.ТарифнаяСтавка КАК Показатель2ТарифнаяСтавка,
	|	Показатели3.Показатель.ТарифнаяСтавка КАК Показатель3ТарифнаяСтавка,
	|	Показатели4.Показатель.ТарифнаяСтавка КАК Показатель4ТарифнаяСтавка,
	|	Показатели5.Показатель.ТарифнаяСтавка КАК Показатель5ТарифнаяСтавка,
	|	Показатели6.Показатель.ТарифнаяСтавка КАК Показатель6ТарифнаяСтавка
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	ВТДанныеОНачислениях КАК ТЧОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели1.Ссылка
	|			И (Показатели1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели2
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели2.Ссылка
	|			И (Показатели2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели3
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели3.Ссылка
	|			И (Показатели3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели4
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели4.Ссылка
	|			И (Показатели4.НомерСтроки = 4)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели5
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели5.Ссылка
	|			И (Показатели5.НомерСтроки = 5)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели6
	|		ПО ТЧОсновныеНачисления.ВидРасчета = Показатели6.Ссылка
	|			И (Показатели6.НомерСтроки = 6)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧОсновныеНачисления.НомерСтроки,
	|	Показатели1.Показатель,
	|	Показатели2.Показатель,
	|	Показатели3.Показатель,
	|	Показатели4.Показатель,
	|	Показатели5.Показатель,
	|	Показатели6.Показатель,
	|	Показатели1.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели2.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели3.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели4.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели5.ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели6.ЗапрашиватьПриКадровыхПеремещениях
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";		
	Запрос.Выполнить();	
	
	// в основном запросе собираем в единой выборке подготовленные ранее данные
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧНачисления.Ссылка,
	|	ТЧНачисления.НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.ДатаНачала,
	|	ТЧНачисления.ДатаОкончания,
	|	ТЧНачисления.Действие,
	|	ТЧНачисления.ВидРасчета,
	|	ТЧНачисления.ЗачетОтработанногоВремени,
	|	ТЧНачисления.СпособРасчета КАК СпособРасчета,
	|	ЕСТЬNULL(ТЧНачисления.ПроизвольнаяФормулаРасчета, ЛОЖЬ) КАК ПроизвольнаяФормулаРасчета,
	|	ЕСТЬNULL(ТЧНачисления.ЗачетОтработанногоВремени, ЛОЖЬ) КАК ОсновноеНачисление,
	|	ЕСТЬNULL(ТЧНачисления.ТребуетВводаТарифногоРазряда, ЛОЖЬ) КАК ТребуетВводаТарифногоРазряда,
	|	ТЧНачисления.ТарифныйРазряд1,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Валюта1,
	|	ТЧНачисления.ТарифныйРазряд2,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Валюта2,
	|	ТЧНачисления.ТарифныйРазряд3,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Валюта3,
	|	ТЧНачисления.ТарифныйРазряд4,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Валюта4,
	|	ТЧНачисления.ТарифныйРазряд5,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Валюта5,
	|	ТЧНачисления.ТарифныйРазряд6,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Валюта6,
	|	ДанныеШтатногоРасписания.РазмерСоответствуетШТР,
	|	ДанныеОПрежнихНачислениях.ПрежнийВидРасчета КАК ПрежнийВидРасчета,
	|	ДанныеОПрежнихНачислениях.ПрежнийВидРасчета.СпособРасчета КАК ПрежнийСпособРасчета,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд1 КАК ПрежнийТарифныйРазряд1,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель1 КАК прежнийПоказатель1,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта1 КАК ПрежняяВалюта1,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд2 КАК ПрежнийТарифныйРазряд2,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель2 КАК ПрежнийПоказатель2,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта2 КАК ПрежняяВалюта2,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд3 КАК ПрежнийТарифныйРазряд3,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель3 КАК ПрежнийПоказатель3,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта3 КАК ПрежняяВалюта3,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд4 КАК ПрежнийТарифныйРазряд4,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель4 КАК ПрежнийПоказатель4,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта4 КАК ПрежняяВалюта4,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд5 КАК ПрежнийТарифныйРазряд5,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель5 КАК ПрежнийПоказатель5,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта5 КАК ПрежняяВалюта5,
	|	ДанныеОПрежнихНачислениях.ПрежнийТарифныйРазряд6 КАК ПрежнийтарифныйРазряд6,
	|	ДанныеОПрежнихНачислениях.ПрежнийПоказатель6 КАК ПрежнийПоказатель6,
	|	ДанныеОПрежнихНачислениях.ПрежняяВалюта6 КАК ПрежняяВалюта6,
	|	ДанныеОПрежнихНачислениях.КонфликтныйДокумент,
	|	ДанныеОПрежнихНачислениях.ДатаДвижения,
	|	ЕСТЬNULL(Показатели.КоличествоПоказателей, 0) КАК КоличествоПоказателей,
	|	Показатели.Показатель1Предопределенный,
	|	Показатели.Показатель1Наименование,
	|	Показатели.Показатель1ТипПоказателя,
	|	Показатели.Показатель1ВозможностьИзменения,
	|	Показатели.Показатель2Предопределенный,
	|	Показатели.Показатель2Наименование,
	|	Показатели.Показатель2ТипПоказателя,
	|	Показатели.Показатель2ВозможностьИзменения,
	|	Показатели.Показатель3Предопределенный,
	|	Показатели.Показатель3Наименование,
	|	Показатели.Показатель3ТипПоказателя,
	|	Показатели.Показатель3ВозможностьИзменения,
	|	Показатели.Показатель4Предопределенный,
	|	Показатели.Показатель4Наименование,
	|	Показатели.Показатель4ТипПоказателя,
	|	Показатели.Показатель4ВозможностьИзменения,
	|	Показатели.Показатель5Предопределенный,
	|	Показатели.Показатель5Наименование,
	|	Показатели.Показатель5ТипПоказателя,
	|	Показатели.Показатель5ВозможностьИзменения,
	|	Показатели.Показатель6Предопределенный,
	|	Показатели.Показатель6Наименование,
	|	Показатели.Показатель6ТипПоказателя,
	|	Показатели.Показатель6ВозможностьИзменения,
	|	Показатели.Показатель1ТарифнаяСтавка,
	|	Показатели.Показатель2ТарифнаяСтавка,
	|	Показатели.Показатель3ТарифнаяСтавка,
	|	Показатели.Показатель4ТарифнаяСтавка,
	|	Показатели.Показатель5ТарифнаяСтавка,
	|	Показатели.Показатель6ТарифнаяСтавка,
	|	Показатели.Показатель1ЗапрашиватьПриКадровыхПеремещениях КАК Показатель1ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель2ЗапрашиватьПриКадровыхПеремещениях КАК Показатель2ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель3ЗапрашиватьПриКадровыхПеремещениях КАК Показатель3ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель4ЗапрашиватьПриКадровыхПеремещениях КАК Показатель4ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель5ЗапрашиватьПриКадровыхПеремещениях КАК Показатель5ЗапрашиватьПриКадровыхПеремещениях,
	|	Показатели.Показатель6ЗапрашиватьПриКадровыхПеремещениях КАК Показатель6ЗапрашиватьПриКадровыхПеремещениях,
	|	ДвойныеСтроки.КонфликтнаяСтрокаНомер КАК ДвойнаяСтрока
	|ИЗ
	|	ВТДанныеОНачислениях КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеШтатногоРасписания КАК ДанныеШтатногоРасписания
	|		ПО ТЧНачисления.НомерСтроки = ДанныеШтатногоРасписания.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПрежнихНачислениях КАК ДанныеОПрежнихНачислениях
	|		ПО ТЧНачисления.НомерСтроки = ДанныеОПрежнихНачислениях.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
	|		ПО ТЧНачисления.НомерСтроки = Показатели.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			ВТДанныеОНачислениях КАК ТЧНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеОНачислениях КАК ТЧНачисления2
	|				ПО (ТЧНачисления.ВидРасчета = ТЧНачисления2.ВидРасчета
	|						ИЛИ ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|							И ТЧНачисления2.ВидРасчета.ЗачетОтработанногоВремени)
	|					И ТЧНачисления.НомерСтроки < ТЧНачисления2.НомерСтроки
	|					И ТЧНачисления.Сотрудник = ТЧНачисления2.Сотрудник
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ДвойныеСтроки
	|		ПО ТЧНачисления.НомерСтроки = ДвойныеСтроки.НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНачисления()

// Функция возвращает текст запроса для получения периодов использования ресурсов
// Параметры:
//	ИмяРегистра		- имя регистра
//	ДатаНачала		- имя параметра "дата начала" интревала за который необходимо получить периоды, 
//					  если не задана - то "от самого начала"
//	ДатаОкончания	- имя параметра "дата окончания" интервала за который необходимо получить периоды, 
//					  если не задана - то "до самомго конца"
//	Условие			- условие, по которому отбираются перичные записи регистра. Условия пишется на поля 
//					  регистра периодов с применением алиаса "Периоды". Например: "Периоды.Физлицо В (&Физлица)"
//
// Возвращает:
//	Текст запроса, содержащий поля:
//		Регистратор1	- ссылка на регистратор, который определяет период
//		Регистратор2	- ссылка на второй регистратор, который определяет период (для 
//						  периодов, которые определяются двумя событиями)
//		<Измерение>		- все измерения регистра кроме ДатаНачала и ДатаОкончания
//		ДатаНачала		- начало полученного виртуального периода
//		ДатаОкончания	- окончание полученного виртуального периода
//
Функция ПериодыИспользованияРесурсов(ИмяРегистра, ДатаНачала = Неопределено, ДатаОкончания = Неопределено, Условие = "", УчитыватьРегистратор = Истина) Экспорт
	
	ИмяТаблицы = "РегистрСведений." + ИмяРегистра;
	РегистрМД = Метаданные.НайтиПоПолномуИмени(ИмяТаблицы);
	Измерения = Новый Массив;
	Для Каждого Измерение Из РегистрМД.Измерения Цикл
		Имя = Измерение.Имя;
		Если Имя = "ДатаНачала" или Имя = "ДатаОкончания" Тогда
			Продолжить;
		КонецЕсли;
		Измерения.Добавить(Имя);
	КонецЦикла;
		
	Текст =
	"ВЫБРАТЬ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|	Периоды." + Измерение + " КАК " + Измерение + ",";
	КонецЦикла;
	Текст = Текст + "            
	|	Периоды.Регистратор КАК Регистратор1,
	|	NULL КАК Регистратор2,
	|	Периоды.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ПериодыВсп.ДатаНачала) ЕСТЬ NULL 
	|			ТОГДА Периоды.ДатаОкончания
	|		ИНАЧЕ МИНИМУМ(ПериодыВсп.ДатаНачала)
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	" + ИмяТаблицы + " КАК Периоды
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК ПериодыВсп
	|	ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|	Периоды." + Измерение + " = ПериодыВсп." + Измерение + "
		|   И ";
	КонецЦикла;
	Текст = Текст + "ПериодыВсп.ДатаНачала > Периоды.ДатаНачала
	|			И ПериодыВсп.ДатаНачала < Периоды.ДатаОкончания
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК Проверка
	|	ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|	Периоды." + Измерение + " = Проверка." + Измерение + "
		|   И ";
	КонецЦикла;
	Текст = Текст + "Проверка.ДатаОкончания > Периоды.ДатаНачала
	|		И Проверка.ДатаОкончания < Периоды.ДатаОкончания
	|		И (Проверка.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|ГДЕ";
	Если Не ПустаяСтрока(Условие) Тогда
		Текст = Текст + "
		|" + Условие + "
		|	И ";
	КонецЕсли;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "
		|Периоды.Регистратор <> &Регистратор
		|	И ";
	КонецЕсли;		
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "ВЫБОР КОГДА Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1) ТОГДА Периоды.ДатаОкончания ИНАЧЕ Периоды.ДатаНачала КОНЕЦ >= &" + ДатаНачала + "
		|	И ";
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		Текст = Текст + "ВЫБОР КОГДА Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1) ТОГДА Периоды.ДатаОкончания ИНАЧЕ Периоды.ДатаНачала КОНЕЦ <= &" + ДатаОкончания + "
		|	И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаНачала <> ДАТАВРЕМЯ(1,1,1)
	|	И Периоды.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1)
	|	И Проверка.ДатаНачала ЕСТЬ NULL
	|
	|	СГРУППИРОВАТЬ ПО";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|	Периоды." + Измерение + ",";
	КонецЦикла;
	Текст = Текст + "
	|		Периоды.Регистратор,
	|		Периоды.ДатаНачала,
	|		Периоды.ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|   Периоды." + Измерение + " КАК " + Измерение + ",";
	КонецЦикла;
	Текст = Текст + "
	|	Периоды.Регистратор1,
	|	Периоды.Регистратор2,
	|	Периоды.ДатаНачала,
	|	Периоды.ДатаОкончания
	|ИЗ
	|	(ВЫБРАТЬ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|		МаксимальныеПериоды." + Измерение +" КАК " + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|		Периоды.Регистратор КАК Регистратор1,
	|		ВЫБОР КОГДА МаксимальныеПериоды.Регистратор <> Периоды.Регистратор ТОГДА МаксимальныеПериоды.Регистратор КОНЕЦ КАК Регистратор2,
	|		ЕСТЬNULL(Периоды.ДатаНачала, ДАТАВРЕМЯ(1,1,1)) КАК ДатаНачала,
	|		МаксимальныеПериоды.ДатаОкончания КАК ДатаОкончания
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Периоды.Регистратор КАК Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +" КАК " + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаОкончания КАК ДатаОкончания,
	|			МАКСИМУМ(ПериодыПредыдущие.ДатаНачала) КАК МаксДата
	|		ИЗ
	|			" + ИмяТаблицы + " КАК Периоды
	|				ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК ПериодыПредыдущие
	|				ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = ПериодыПредыдущие." + Измерение +"
		|				И ";
	КонецЦикла;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "
		|ПериодыПредыдущие.Регистратор <> &Регистратор
		|	И ";
	КонецЕсли;		
	Текст = Текст + "Периоды.ДатаОкончания > ПериодыПредыдущие.ДатаНачала
	|		ГДЕ";
	Если Не ПустаяСтрока(Условие) Тогда
		Текст = Текст + "
		|" + Условие + "
		|	И ";
	КонецЕсли;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "
		|Периоды.Регистратор <> &Регистратор
		|	И ";
	КонецЕсли;		
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "ВЫБОР КОГДА Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1) ТОГДА Периоды.ДатаОкончания ИНАЧЕ Периоды.ДатаНачала КОНЕЦ >= &" + ДатаНачала + "
		|	И ";
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		Текст = Текст + "ВЫБОР КОГДА Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1) ТОГДА Периоды.ДатаОкончания ИНАЧЕ Периоды.ДатаНачала КОНЕЦ <= &" + ДатаОкончания + "
		|	И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаОкончания) КАК МаксимальныеПериоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК Периоды
	|			ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = МаксимальныеПериоды." + Измерение +"
		|				И ";
	КонецЦикла;
	Текст = Текст + "МаксимальныеПериоды.МаксДата = Периоды.ДатаНачала
	|				И (Периоды.ДатаНачала <> ДАТАВРЕМЯ(1,1,1))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|		МинимальныеПериоды." + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|		МинимальныеПериоды.Регистратор КАК Регистратор1,
	|		ВЫБОР КОГДА Периоды.Регистратор <> МинимальныеПериоды.Регистратор ТОГДА Периоды.Регистратор КОНЕЦ КАК Регистратор2,
	|		МинимальныеПериоды.ДатаНачала,
	|		ЕСТЬNULL(Периоды.ДатаОкончания, ДАТАВРЕМЯ(1,1,1))
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Периоды.Регистратор КАК Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +" КАК " + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаНачала КАК ДатаНачала,
	|			МИНИМУМ(ПериодыСледующие.ДатаОкончания) КАК МинДата
	|		ИЗ
	|			" + ИмяТаблицы + " КАК Периоды
	|				ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК ПериодыСледующие
	|				ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = ПериодыСледующие." + Измерение +"
		|				И ";
	КонецЦикла;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "
		|ПериодыСледующие.Регистратор <> &Регистратор
		|	И ";
	КонецЕсли;		
	Текст = Текст + "Периоды.ДатаНачала < ПериодыСледующие.ДатаОкончания
	|		И ПериодыСледующие.ДатаНачала = ДАТАВРЕМЯ(1,1,1)
	|		ГДЕ";
	Если Не ПустаяСтрока(Условие) Тогда
		Текст = Текст + "
		|" + Условие + "
		|	И ";
	КонецЕсли;
	Если Не УчитыватьРегистратор Тогда
		Текст = Текст + "
		|Периоды.Регистратор <> &Регистратор
		|	И ";
	КонецЕсли;		
	Если ДатаНачала <> Неопределено Тогда
		Текст = Текст + "ВЫБОР КОГДА Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1) ТОГДА Периоды.ДатаОкончания ИНАЧЕ Периоды.ДатаНачала КОНЕЦ >= &" + ДатаНачала + "
		|	И ";
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		Текст = Текст + "ВЫБОР КОГДА Периоды.ДатаНачала = ДАТАВРЕМЯ(1,1,1) ТОГДА Периоды.ДатаОкончания ИНАЧЕ Периоды.ДатаНачала КОНЕЦ <= &" + ДатаОкончания + "
		|	И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаОкончания = ДАТАВРЕМЯ(1,1,1)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Регистратор,";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "
		|			Периоды." + Измерение +",";
	КонецЦикла;
	Текст = Текст + "
	|			Периоды.ДатаНачала) КАК МинимальныеПериоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК Периоды
	|			ПО ";
	Для Каждого Измерение Из Измерения Цикл
		Текст = Текст + "Периоды." + Измерение +" = МинимальныеПериоды." + Измерение +"
		|				И ";
	КонецЦикла;
	Текст = Текст + "МинимальныеПериоды.МинДата = Периоды.ДатаОкончания
	|				И (Периоды.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1))) КАК Периоды";
	Возврат Текст;
	
КонецФункции

Процедура ПолучитьОшибкиПериодовСостоянияСотрудника(Регистратор, УчитиыватьРегистратор, МассивСотрудники, СообщенияОбОшибках, ОшибкиПериодов) Экспорт
	
	Запрос = Новый Запрос;
	
	ТаблицаПериодов = ПериодыИспользованияРесурсов("ПериодыСостоянийРаботниковОрганизаций", , , "Периоды.Сотрудник В (&Сотрудники)", УчитиыватьРегистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистратор1,
	|	Регистратор2,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор1) КАК ПредставлениеРегистратор1,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор2) КАК ПредставлениеРегистратор2,
	|	Сотрудник,
	|	Сотрудник.Наименование КАК СотрудникНаименование,
	|	ДатаНачала,
	|	ДатаОкончания
	|ИЗ
	|	(" + ТаблицаПериодов + ") КАК Периоды
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникНаименование,
	|	ДатаНачала";
	
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	Запрос.УстановитьПараметр("Сотрудники",		МассивСотрудники);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// обработаем периоды
	ТекущееСотрудник						= Неопределено;
	ПоследняяДатаНачала					= '0001-01-01';
	ПоследняяДатаОкончания				= '0001-01-01';
	ПоследнийРегистратор1				= Неопределено;
	ПоследнийРегистратор2				= Неопределено;
	ПоследнийПредставлениеРегистратор1	= "";
	ПоследнийПредставлениеРегистратор2	= "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущееСотрудник <> Выборка.Сотрудник Тогда
			ТекущееСотрудник = Выборка.Сотрудник;
			
		ИначеЕсли (ПоследняяДатаОкончания > Выборка.ДатаНачала) ИЛИ (ПоследняяДатаОкончания = '0001-01-01') Тогда
			Если ОшибкиПериодов <> НеОпределено Тогда
				ОшибкиПериодов[Выборка.Сотрудник] = 0;
			КонецЕсли;
			// сообщения формируем для переданного регистратора или все, если регистратор не задан 
			Если СообщенияОбОшибках <> НеОпределено и
				(	Регистратор = НеОпределено ИЛИ
					ПоследнийРегистратор1 = Регистратор ИЛИ
					ПоследнийРегистратор2 = Регистратор ИЛИ
					Выборка.Регистратор1 = Регистратор ИЛИ
					Выборка.Регистратор2 = Регистратор) Тогда
				СообщениеОбОшибке = Новый Структура("Сотрудник, 
													|ДатаНачала, 
													|ДатаОкончания, 
													|ДатаНачалаПред, 
													|ДатаОкончанияПред, 
													|Регистратор1, 
													|Регистратор2, 
													|ПослРегистратор1, 
													|ПослРегистратор2,
													|Регистратор1Ссылка, 
													|Регистратор2Ссылка, 
													|ПослРегистратор1Ссылка, 
													|ПослРегистратор2Ссылка");
				СообщениеОбОшибке.Сотрудник			= Выборка.СотрудникНаименование;
				СообщениеОбОшибке.ДатаНачала		= Выборка.ДатаНачала;
				СообщениеОбОшибке.ДатаОкончания		= Выборка.ДатаОкончания;
				СообщениеОбОшибке.ДатаНачалаПред	= ПоследняяДатаНачала;
				СообщениеОбОшибке.ДатаОкончанияПред	= ПоследняяДатаОкончания;
				
				СообщениеОбОшибке.Регистратор1Ссылка 		= Выборка.Регистратор1;
				СообщениеОбОшибке.Регистратор2Ссылка 		= Выборка.Регистратор2;
				СообщениеОбОшибке.ПослРегистратор1Ссылка 	= ПоследнийРегистратор1;
				СообщениеОбОшибке.ПослРегистратор2Ссылка 	= ПоследнийРегистратор2;
				
				Если Выборка.Регистратор1 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор1 = Выборка.ПредставлениеРегистратор1 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор1 = "" + Выборка.ПредставлениеРегистратор1;
				КонецЕсли;
				
				Если Выборка.Регистратор2 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор2 = Выборка.ПредставлениеРегистратор2 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор2 = "" + Выборка.ПредставлениеРегистратор2;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор1 
					и Выборка.Регистратор2 <> ПоследнийРегистратор1 Тогда
					Если ПоследнийРегистратор1 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор1 = ПоследнийПредставлениеРегистратор1 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор1 = "" + ПоследнийПредставлениеРегистратор1;
					КонецЕсли;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор2 
					и Выборка.Регистратор2 <> ПоследнийРегистратор2 Тогда
					Если ПоследнийРегистратор2 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор2 = ПоследнийПредставлениеРегистратор2 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор2 = "" + ПоследнийПредставлениеРегистратор2;
					КонецЕсли;
				КонецЕсли;
				
				СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
				
			КонецЕсли;
		КонецЕсли;
		
		ПоследнийРегистратор1				= Выборка.Регистратор1;
		ПоследнийРегистратор2				= Выборка.Регистратор2;
		ПоследнийПредставлениеРегистратор1	= Выборка.ПредставлениеРегистратор1;;
		ПоследнийПредставлениеРегистратор2	= Выборка.ПредставлениеРегистратор2;
		ПоследняяДатаНачала					= Выборка.ДатаНачала;
		ПоследняяДатаОкончания				= Выборка.ДатаОкончания;
	КонецЦикла;
	
КонецПроцедуры	


/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С КАДРОВЫМ УЧЕТОМ ОТПУСКОВ
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Данная функция возвращает положенное количество дней основного ежегодного отпуска для заданной организации
Функция ПолучитьПоложенноеКоличествоДнейОтпуска(Организация) Экспорт
	//Значение по выбранной организации
	ОтборОрганизация = Новый Структура("Организация", Организация);
	КоличествоДнейОтпуска = РегистрыСведений.УчетнаяПолитикаПоПерсоналуОрганизаций.Получить(ОтборОрганизация).КоличествоДнейПоложенногоОтпуска;
	
	Возврат КоличествоДнейОтпуска;	
КонецФункции

Процедура ПолучитьТаблицуОстатковДнейОтпуска(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	ДополнитьРабочиеПериоды(МенеджерВременныхТаблиц);
	
	
	//Получем информацию о положенном количестве дней отпуска
	//ВТОстаткиОтпусковПоРабочимПериодам
	//В этой временной таблице храним информацию о количестве дней остающихся на конец каждого рабочего периода 
	Запрос.Текст =" 
	|ВЫБРАТЬ 
	|	ДатаЗаписиПоложенныхОтпусков.Сотрудник			КАК Сотрудник,
	|	ДатаЗаписиПоложенныхОтпусков.Организация		КАК Организация,
	|	ДатаЗаписиПоложенныхОтпусков.ВидОтпуска			КАК ВидОтпуска,
	|	ДатаЗаписиПоложенныхОтпусков.ДатаЗаписи 		КАК ДатаИзмененияРазмераПоложенныхОтпусков,
	|	ДатаЗаписиПоложенныхОтпусков.РабочийПериодНачало 	КАК РабочийПериодНачало,
	|	ДатаЗаписиПоложенныхОтпусков.РабочийПериодОкончание КАК РабочийПериодОкончание,
	|	ПоложенныеЕжегодныеОтпуска.Положено 	КАК ПоложеноДнейОтпуска
	|ПОМЕСТИТЬ
	|	ВТПоложеноДнейОтпуска
	|ИЗ
	|(
	|	ВЫБРАТЬ 
	|		РабочиеПериодыОтпуска.Сотрудник			 	 	КАК Сотрудник,
	|		РабочиеПериодыОтпуска.ВидОтпуска			 	КАК ВидОтпуска,
	|		РабочиеПериодыОтпуска.Организация				КАК Организация,
	|		РабочиеПериодыОтпуска.РабочийПериодНачало		КАК РабочийПериодНачало,
	|		РабочиеПериодыОтпуска.РабочийПериодОкончание	КАК РабочийПериодОкончание,
	|		МАКСИМУМ(ПоложенныеОтпускаРаботников.Период)    КАК ДатаЗаписи
	|	ИЗ
	|		ВТРаботникиРабочиеПериоды КАК РабочиеПериодыОтпуска
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ПоложенныеЕжегодныеОтпускаРаботников КАК ПоложенныеОтпускаРаботников	
	|	ПО
	|		РабочиеПериодыОтпуска.Сотрудник = ПоложенныеОтпускаРаботников.Сотрудник
	|		И РабочиеПериодыОтпуска.ВидОтпуска = ПоложенныеОтпускаРаботников.ВидОтпуска
	|		И РабочиеПериодыОтпуска.Организация = ПоложенныеОтпускаРаботников.Организация
	|		И РабочиеПериодыОтпуска.РабочийПериодОкончание >= ПоложенныеОтпускаРаботников.Период 
	|	СГРУППИРОВАТЬ ПО
	|		РабочиеПериодыОтпуска.Сотрудник,
	|		РабочиеПериодыОтпуска.ВидОтпуска,
	|		РабочиеПериодыОтпуска.Организация,
	|		РабочиеПериодыОтпуска.РабочийПериодНачало,
	|		РабочиеПериодыОтпуска.РабочийПериодОкончание
	|)КАК ДатаЗаписиПоложенныхОтпусков
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПоложенныеЕжегодныеОтпускаРаботников КАК ПоложенныеЕжегодныеОтпуска
	|ПО
	|	ДатаЗаписиПоложенныхОтпусков.ДатаЗаписи = ПоложенныеЕжегодныеОтпуска.Период
	|	И ДатаЗаписиПоложенныхОтпусков.Сотрудник = ПоложенныеЕжегодныеОтпуска.Сотрудник
	|	И ДатаЗаписиПоложенныхОтпусков.ВидОтпуска = ПоложенныеЕжегодныеОтпуска.ВидОтпуска
	|	И ДатаЗаписиПоложенныхОтпусков.Организация = ПоложенныеЕжегодныеОтпуска.Организация	
	|";
	Запрос.Выполнить();	
	
	//Запрос по использованным дням отпуска
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВТПоложеноДнейОтпуска.Сотрудник					КАК Сотрудник,
	|	ВТПоложеноДнейОтпуска.Организация				КАК Организация,
	|	ВТПоложеноДнейОтпуска.РабочийПериодНачало 		КАК РабочийПериодНачало,
	|	ВТПоложеноДнейОтпуска.РабочийПериодОкончание	КАК РабочийПериодОкончание,
	|	ВТПоложеноДнейОтпуска.ВидОтпуска				КАК ВидОтпуска,
	|	ВТПоложеноДнейОтпуска.ПоложеноДнейОтпуска		КАК ПоложеноДнейОтпуска,
	|	СУММА(ЕстьNULL(ИспользованиеОтпусков.ИспользованоОсновногоОборот,0))	КАК ИспользованоДней
	|ПОМЕСТИТЬ ВТИспользованоДнейОтпуска
	|ИЗ
	|	ВТПоложеноДнейОтпуска КАК ВТПоложеноДнейОтпуска
	|ЛЕВОЕ СОЕДИНЕНИЕ	
	|	РегистрНакопления.ИспользованиеЕжегодныхОтпусковРаботников.Обороты КАК ИспользованиеОтпусков
	|ПО
	|	ВТПоложеноДнейОтпуска.Сотрудник = ИспользованиеОтпусков.Сотрудник	       
	|	И ИспользованиеОтпусков.РабочийПериодНачало >= ВтПоложеноДнейОтпуска.РабочийПериодНачало
	|	И ИспользованиеОтпусков.РабочийПериодОкончание <= ВтПоложеноДнейОтпуска.РабочийПериодОкончание
	|	И ВТПоложеноДнейОтпуска.Организация = ИспользованиеОтпусков.Организация
	|	И ВТПоложеноДнейОтпуска.ВидОтпуска = ИспользованиеОтпусков.ВидОтпуска
	|СГРУППИРОВАТЬ ПО
	|	ВТПоложеноДнейОтпуска.Сотрудник,
	|	ВТположеноДнейОтпуска.Организация,
	|	ВТПоложеноДнейОтпуска.РабочийПериодНачало,
	|	ВТПоложеноДнейОтпуска.РабочийПериодОкончание,
	|	ВТПоложеноДнейОтпуска.ВидОтпуска,
	|	ВТПоложеноДнейОтпуска.ПоложеноДнейОтпуска
	|";
	Запрос.Выполнить();
	
	//В следующем запросе определяется остаток дней отпуска
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Сотрудник				КАК Сотрудник,
	|	Организация				КАК Организация,
	|	РабочийПериодНачало		КАК РабочийПериодНачало,
	|	РабочийПериодОкончание	КАК РабочийПериодОкончание,
	|	ВидОтпуска				КАК ВидОтпуска,
	|	ПоложеноДнейОтпуска		КАК ПоложеноДнейОтпуска,
	|	ИспользованоДней	КАК ИспользованоДнейОтпуска,
	|	ПоложеноДнейОтпуска - ИспользованоДней КАК ОстатокДнейОтпуска
	|ПОМЕСТИТЬ ВТОстатокДнейОтпуска
	|ИЗ
	|	ВТИспользованоДнейОтпуска	КАК ИспользованоДнейОтпуска
	|ГДЕ
	|	ПоложеноДнейОтпуска - ИспользованоДней > 0 
	|";
	Запрос.Выполнить();	
КонецПроцедуры

//Процедура добавляет в менеджер временных таблиц дополнительную таблицу
Функция ДополнитьРабочиеПериоды(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|СрезПервых.Период				КАК Период, 
	|РаботникиОрганизации.ДатаОкончания	КАК ДатаОкончания,
	|РаботникиОрганизации.ВидОтпуска	КАК ВидОтпуска,
	|РаботникиОрганизации.Организация	КАК Организация
	|ИЗ
	|	ВТРаботникиОрганизации КАК РаботникиОрганизации
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.РаботникиОрганизаций.СрезПервых(,Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТРаботникиОрганизации)) КАК СрезПервых
	|ПО
	|	СрезПервых.Сотрудник = РаботникиОрганизации.Сотрудник
	|";                                                      
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаСотрудникиРабочиеПериоды = Новый ТаблицаЗначений;
	ТаблицаСотрудникиРабочиеПериоды.Колонки.Добавить("Сотрудник",Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаСотрудникиРабочиеПериоды.Колонки.Добавить("РабочийПериодНачало", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудникиРабочиеПериоды.Колонки.Добавить("РабочийПериодОкончание", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудникиРабочиеПериоды.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаСотрудникиРабочиеПериоды.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	                         	
	Пока Выборка.Следующий() Цикл 		
		РабочийПериодНачало = Выборка.Период;
		
		Пока (Год(РабочийПериодНачало) <= Год(Выборка.ДатаОкончания)) 
			И РабочийПериодНачало < Выборка.ДатаОкончания Цикл
			НоваяСтрока = ТаблицаСотрудникиРабочиеПериоды.Добавить();
			НоваяСтрока.РабочийПериодНачало = РабочийПериодНачало;
			НоваяСтрока.РабочийПериодОкончание = ДобавитьМесяц(РабочийПериодНачало,12) - 1;
			НоваяСтрока.Сотрудник = Выборка.Сотрудник;
			НоваяСтрока.ВидОтпуска = Выборка.ВидОтпуска;
			НоваяСтрока.Организация	= Выборка.Организация;
			
			РабочийПериодНачало = ДобавитьМесяц(РабочийПериодНачало,12);
		КонецЦикла;		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудникиРабочиеПериоды", ТаблицаСотрудникиРабочиеПериоды);
	Запрос.Текст =" 
	|ВЫБРАТЬ
	|	СотрудникиРабочиеПериоды.Сотрудник				КАК Сотрудник,
	|	СотрудникиРабочиеПериоды.РабочийПериодНачало	КАК РабочийПериодНачало,
	|	СотрудникиРабочиеПериоды.РабочийПериодОкончание КАК РабочийПериодОкончание,
	|	СотрудникиРабочиеПериоды.ВидОтпуска				КАК ВидОтпуска,
	|	СотрудникиРабочиеПериоды.Организация			КАК Организация
	|
	|ПОМЕСТИТЬ ВТРаботникиРабочиеПериоды 
	|ИЗ
	|	&ТаблицаСотрудникиРабочиеПериоды КАК СотрудникиРабочиеПериоды";
	
	Запрос.Выполнить()
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА КОНТРОЛЯ ПЕРИОДОВ

Процедура ПолучитьОшибкиПериодовРаботыСотрудникаПоОсновномуМестуРаботы(Регистратор, УчитыватьРегистратор, МассивФизлица, СообщенияОбОшибках, ОшибкиПериодов) Экспорт
	
	Запрос = Новый Запрос;
	
	ТаблицаПериодов = ПериодыИспользованияРесурсов("ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы", , , "Периоды.Физлицо В (&Физлица)", УчитыватьРегистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистратор1,
	|	Регистратор2,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор1) КАК ПредставлениеРегистратор1,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор2) КАК ПредставлениеРегистратор2,
	|	Физлицо,
	|	Физлицо.Наименование КАК ФизлицоНаименование,
	|	ДатаНачала,
	|	ДатаОкончания
	|ИЗ
	|	(" + ТаблицаПериодов + ") КАК Периоды
	|УПОРЯДОЧИТЬ ПО
	|	ФизлицоНаименование,
	|	ДатаНачала";
	
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	Запрос.УстановитьПараметр("Физлица",		МассивФизлица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// обработаем периоды
	ТекущееФизлицо						= Неопределено;
	ПоследняяДатаНачала					= '0001-01-01';
	ПоследняяДатаОкончания				= '0001-01-01';
	ПоследнийРегистратор1				= Неопределено;
	ПоследнийРегистратор2				= Неопределено;
	ПоследнийПредставлениеРегистратор1	= "";
	ПоследнийПредставлениеРегистратор2	= "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущееФизлицо <> Выборка.Физлицо Тогда
			ТекущееФизлицо = Выборка.Физлицо;
			
		ИначеЕсли (ПоследняяДатаОкончания > Выборка.ДатаНачала) ИЛИ (ПоследняяДатаОкончания = '0001-01-01') Тогда
			Если ОшибкиПериодов <> НеОпределено Тогда
				ОшибкиПериодов[Выборка.Физлицо] = 0;
			КонецЕсли;
			// сообщения формируем для переданного регистратора или все, если регистратор не задан 
			Если СообщенияОбОшибках <> НеОпределено и
				(	Регистратор = НеОпределено ИЛИ
					ПоследнийРегистратор1 = Регистратор ИЛИ
					ПоследнийРегистратор2 = Регистратор ИЛИ
					Выборка.Регистратор1 = Регистратор ИЛИ
					Выборка.Регистратор2 = Регистратор) Тогда
				СообщениеОбОшибке = Новый Структура("Физлицо, 
													|ДатаНачала, 
													|ДатаОкончания, 
													|ДатаНачалаПред, 
													|ДатаОкончанияПред, 
													|Регистратор1, 
													|Регистратор2, 
													|ПослРегистратор1, 
													|ПослРегистратор2,
													|Регистратор1Ссылка, 
													|Регистратор2Ссылка, 
													|ПослРегистратор1Ссылка, 
													|ПослРегистратор2Ссылка");
				СообщениеОбОшибке.Физлицо			= Выборка.ФизлицоНаименование;
				СообщениеОбОшибке.ДатаНачала		= Выборка.ДатаНачала;
				СообщениеОбОшибке.ДатаОкончания		= Выборка.ДатаОкончания;
				СообщениеОбОшибке.ДатаНачалаПред	= ПоследняяДатаНачала;
				СообщениеОбОшибке.ДатаОкончанияПред	= ПоследняяДатаОкончания;
				
				СообщениеОбОшибке.Регистратор1Ссылка 		= Выборка.Регистратор1;
				СообщениеОбОшибке.Регистратор2Ссылка 		= Выборка.Регистратор2;
				СообщениеОбОшибке.ПослРегистратор1Ссылка 	= ПоследнийРегистратор1;
				СообщениеОбОшибке.ПослРегистратор2Ссылка 	= ПоследнийРегистратор2;
				
				Если Выборка.Регистратор1 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор1 = Выборка.ПредставлениеРегистратор1 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор1 = "" + Выборка.ПредставлениеРегистратор1;
				КонецЕсли;
				
				Если Выборка.Регистратор2 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор2 = Выборка.ПредставлениеРегистратор2 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор2 = "" + Выборка.ПредставлениеРегистратор2;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор1 
					и Выборка.Регистратор2 <> ПоследнийРегистратор1 Тогда
					Если ПоследнийРегистратор1 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор1 = ПоследнийПредставлениеРегистратор1 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор1 = "" + ПоследнийПредставлениеРегистратор1;
					КонецЕсли;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор2 
					и Выборка.Регистратор2 <> ПоследнийРегистратор2 Тогда
					Если ПоследнийРегистратор2 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор2 = ПоследнийПредставлениеРегистратор2 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор2 = "" + ПоследнийПредставлениеРегистратор2;
					КонецЕсли;
				КонецЕсли;
				
				СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
				
			КонецЕсли;
		КонецЕсли;
		
		ПоследнийРегистратор1				= Выборка.Регистратор1;
		ПоследнийРегистратор2				= Выборка.Регистратор2;
		ПоследнийПредставлениеРегистратор1	= Выборка.ПредставлениеРегистратор1;;
		ПоследнийПредставлениеРегистратор2	= Выборка.ПредставлениеРегистратор2;
		ПоследняяДатаНачала					= Выборка.ДатаНачала;
		ПоследняяДатаОкончания				= Выборка.ДатаОкончания;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьОшибкиПериодовРаботыСотрудникаПоСовместительству(Регистратор, УчитыватьРегистратор, МассивФизлица, Организация, СообщенияОбОшибках, ОшибкиПериодов) Экспорт
	
	Запрос = Новый Запрос;
	
	ТаблицаПериодов = ПериодыИспользованияРесурсов("ПериодыРаботыРаботниковОрганизацийПоСовместительству", , , "Периоды.Физлицо В (&Физлица) И Периоды.Организация = &Организация", УчитыватьРегистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистратор1,
	|	Регистратор2,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор1) КАК ПредставлениеРегистратор1,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор2) КАК ПредставлениеРегистратор2,
	|	Физлицо,
	|	Физлицо.Наименование КАК ФизлицоНаименование,
	|	ДатаНачала,
	|	ДатаОкончания
	|ИЗ
	|	(" + ТаблицаПериодов + ") КАК Периоды
	|УПОРЯДОЧИТЬ ПО
	|	ФизлицоНаименование,
	|	ДатаНачала";
	
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Физлица",		МассивФизлица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// обработаем периоды
	ТекущееФизлицо						= Неопределено;
	ПоследняяДатаНачала					= '0001-01-01';
	ПоследняяДатаОкончания				= '0001-01-01';
	ПоследнийРегистратор1				= Неопределено;
	ПоследнийРегистратор2				= Неопределено;
	ПоследнийПредставлениеРегистратор1	= "";
	ПоследнийПредставлениеРегистратор2	= "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущееФизлицо <> Выборка.Физлицо Тогда
			ТекущееФизлицо = Выборка.Физлицо;
			
		ИначеЕсли (ПоследняяДатаОкончания > Выборка.ДатаНачала) ИЛИ (ПоследняяДатаОкончания = '0001-01-01') Тогда
			Если ОшибкиПериодов <> НеОпределено Тогда
				ОшибкиПериодов[Выборка.Физлицо] = 0;
			КонецЕсли;
			// сообщения формируем для переданного регистратора или все, если регистратор не задан 
			Если СообщенияОбОшибках <> НеОпределено и
				(	Регистратор = НеОпределено ИЛИ
					ПоследнийРегистратор1 = Регистратор ИЛИ
					ПоследнийРегистратор2 = Регистратор ИЛИ
					Выборка.Регистратор1 = Регистратор ИЛИ
					Выборка.Регистратор2 = Регистратор) Тогда
				СообщениеОбОшибке = Новый Структура("Физлицо, 
													|ДатаНачала, 
													|ДатаОкончания, 
													|ДатаНачалаПред, 
													|ДатаОкончанияПред, 
													|Регистратор1, 
													|Регистратор2, 
													|ПослРегистратор1, 
													|ПослРегистратор2,
													|Регистратор1Ссылка, 
													|Регистратор2Ссылка, 
													|ПослРегистратор1Ссылка, 
													|ПослРегистратор2Ссылка");
				СообщениеОбОшибке.Физлицо			= Выборка.ФизлицоНаименование;
				СообщениеОбОшибке.ДатаНачала		= Выборка.ДатаНачала;
				СообщениеОбОшибке.ДатаОкончания		= Выборка.ДатаОкончания;
				СообщениеОбОшибке.ДатаНачалаПред	= ПоследняяДатаНачала;
				СообщениеОбОшибке.ДатаОкончанияПред	= ПоследняяДатаОкончания;
				
				СообщениеОбОшибке.Регистратор1Ссылка 		= Выборка.Регистратор1;
				СообщениеОбОшибке.Регистратор2Ссылка 		= Выборка.Регистратор2;
				СообщениеОбОшибке.ПослРегистратор1Ссылка 	= ПоследнийРегистратор1;
				СообщениеОбОшибке.ПослРегистратор2Ссылка 	= ПоследнийРегистратор2;
				
				Если Выборка.Регистратор1 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор1 = Выборка.ПредставлениеРегистратор1 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор1 = "" + Выборка.ПредставлениеРегистратор1;
				КонецЕсли;
				
				Если Выборка.Регистратор2 = Регистратор Тогда
					СообщениеОбОшибке.Регистратор2 = Выборка.ПредставлениеРегистратор2 + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор2 = "" + Выборка.ПредставлениеРегистратор2;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор1 
					и Выборка.Регистратор2 <> ПоследнийРегистратор1 Тогда
					Если ПоследнийРегистратор1 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор1 = ПоследнийПредставлениеРегистратор1 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор1 = "" + ПоследнийПредставлениеРегистратор1;
					КонецЕсли;
				КонецЕсли;
				
				Если Выборка.Регистратор1 <> ПоследнийРегистратор2 
					и Выборка.Регистратор2 <> ПоследнийРегистратор2 Тогда
					Если ПоследнийРегистратор2 = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор2 = ПоследнийПредставлениеРегистратор2 + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор2 = "" + ПоследнийПредставлениеРегистратор2;
					КонецЕсли;
				КонецЕсли;
				
				СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
				
			КонецЕсли;
		КонецЕсли;
		
		ПоследнийРегистратор1				= Выборка.Регистратор1;
		ПоследнийРегистратор2				= Выборка.Регистратор2;
		ПоследнийПредставлениеРегистратор1	= Выборка.ПредставлениеРегистратор1;;
		ПоследнийПредставлениеРегистратор2	= Выборка.ПредставлениеРегистратор2;
		ПоследняяДатаНачала					= Выборка.ДатаНачала;
		ПоследняяДатаОкончания				= Выборка.ДатаОкончания;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОткрытьТрудовыеДоговора() Экспорт
	Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуСписка("ФормаСпискаТрудовыхДоговоров");
	Форма.Открыть();
КонецПроцедуры

// Функция склоняет Фамилию, Имя и Отчество
// Параметры:
//  Фамилия, Имя, Отчество (обязательный), тип строка
//   Параметры должены содержать фамилию, имя и отчество в именительном падеже единственного числа.
//   Строка должна состоять только из букв русского алфавита, пробелов и дефисов. 
//   Внутри фамилии, имени, отчества пробелов быть не должно.
//   Двойные и тройные имена и фамилии должны писаться через дефис. Имена и отчества должны быть полные
//
//  Падеж (обязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
//  Пол (необязательный), тип ПеречислениеСсылка.ПолФизическихЛиц
//   Данный параметр предназначен для разрешения возможных неоднозначностей, например, имя Карен Акопян
//   может принадлежать и мужчине, и женщине, и в зависимости от этого склоняться или не склоняться.
//   В остальных случаях рекомендуется опускать этот параметр.
//
Функция ПросклонятьФамилиюИмяОтчество(Компонента, Знач Фамилия = "", Знач Имя = "", Знач Отчество = "", Падеж = 1, Пол = 0, Результат = "", СообщениеОбОшибке = "") Экспорт
	
	ФамилияНовая	= Фамилия;
	ИмяНовое		= Имя;
	ОтчествоНовое	= Отчество;
	
	Результат = Фамилия + " " + Имя + " " + Отчество;
	
	// Двойные и тройные ФИО, если указаны с пробелами, исправим на использование дефиса
	НужноИсправитьФамилию	= Найти(Фамилия, " ") > 0;
	НужноИсправитьИмя		= Найти(Имя, " ") > 0;
	НужноИсправитьОтчество	= Найти(Отчество, " ") > 0;
	Если НужноИсправитьФамилию Тогда
		ФамилияНовая = СтрЗаменить(Фамилия, " ", "-");
	КонецЕсли;
	Если НужноИсправитьИмя Тогда
		ИмяНовое = СтрЗаменить(Имя, " ", "-");
	КонецЕсли;
	Если НужноИсправитьОтчество Тогда
		ОтчествоНовое = СтрЗаменить(Отчество, " ", "-");
	КонецЕсли;
	
	ФИО = ФамилияНовая + " " + ИмяНовое + " " + ОтчествоНовое;
	
	Если ПустаяСтрока(ФИО) Тогда
		СообщениеОбОшибке = "Строка с ФИО не должна быть пустая.";
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РегламентированнаяОтчетность.ФИОНаписаноВерно(ФИО) Тогда
		СообщениеОбОшибке = "Строка с ФИО должна состоять только из букв русского алфавита, пробелов и дефисов.";
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрЧислоВхождений(ФИО, " ") > 3 Тогда
		СообщениеОбОшибке = "Фамилия, имя и отчество должны разделяться пробелами. Внутри фамилии, имени, отчества пробелов быть не должно.";
		Возврат Ложь;
	КонецЕсли;
	
	#Если Клиент Тогда
		
	Попытка
		Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
			Результат = Компонента.Просклонять(ФИО, Падеж, 1);
				
		ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
			Результат = Компонента.Просклонять(ФИО, Падеж, 2);
				
		Иначе
			Результат = Компонента.Просклонять(ФИО, Падеж);
				
		КонецЕсли;
		
		// Вернем пробелы в составные ФИО обратно, если до этого их изменили
		Если НужноИсправитьФамилию ИЛИ НужноИсправитьИмя ИЛИ НужноИсправитьОтчество Тогда
			
			МассивФИО = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Результат, " ");
			
			Результат = "";
			
			ИндексФИО = 0;
			
			Если Не ПустаяСтрока(Фамилия) Тогда
				ФамилияНовая = МассивФИО[ИндексФИО];
				ИндексФИО = ИндексФИО + 1;
				
				Если НужноИсправитьФамилию Тогда
					
					Если СтрЧислоВхождений(Фамилия, "-") > 0 Тогда
						
						МассивФамилия = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ФамилияНовая, "-");
						ФамилияНовая = МассивФамилия[0];
						ИндексФамилия = 1;
						
						Пока Истина Цикл
							
							ПозПробел = Найти(Фамилия, " ");
							ПозДефис  = Найти(Фамилия, "-");
							
							Если ПозПробел = ПозДефис Тогда
								Прервать;
							КонецЕсли;
							
							Если (ПозДефис = 0) ИЛИ (ПозПробел > 0) И (ПозПробел < ПозДефис) Тогда
								ФамилияНовая = ФамилияНовая + " ";
								Фамилия = Сред(Фамилия, ПозПробел+1);
								
							ИначеЕсли (ПозПробел = 0) ИЛИ (ПозДефис > 0) И (ПозДефис < ПозПробел) Тогда
								ФамилияНовая = ФамилияНовая + "-";
								Фамилия = Сред(Фамилия, ПозДефис+1);
								
							КонецЕсли;
							
							ФамилияНовая = ФамилияНовая + МассивФамилия[ИндексФамилия];
							ИндексФамилия = ИндексФамилия + 1;
							
						КонецЦикла;
						
					Иначе
						ФамилияНовая = СтрЗаменить(ФамилияНовая, "-", " ");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Результат = Результат + ФамилияНовая;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(Имя) Тогда
				ИмяНовое = МассивФИО[ИндексФИО];
				ИндексФИО = ИндексФИО + 1;
				
				Если НужноИсправитьИмя Тогда
					
					Если СтрЧислоВхождений(Имя, "-") > 0 Тогда
						
						МассивИмя = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяНовое, "-");
						ИмяНовое = МассивИмя[0];
						ИндексИмя = 1;
						
						Пока Истина Цикл
							
							ПозПробел = Найти(Имя, " ");
							ПозДефис  = Найти(Имя, "-");
							
							Если ПозПробел = ПозДефис Тогда
								Прервать;
							КонецЕсли;
							
							Если (ПозДефис = 0) ИЛИ (ПозПробел > 0) И (ПозПробел < ПозДефис) Тогда
								ИмяНовое = ИмяНовое + " ";
								Имя = Сред(Имя, ПозПробел+1);
								
							ИначеЕсли (ПозПробел = 0) ИЛИ (ПозДефис > 0) И (ПозДефис < ПозПробел) Тогда
								ИмяНовое = ИмяНовое + "-";
								Имя = Сред(Имя, ПозДефис+1);
								
							КонецЕсли;
							
							ИмяНовое = ИмяНовое + МассивИмя[ИндексИмя];
							ИндексИмя = ИндексИмя + 1;
							
						КонецЦикла;
						
					Иначе
						ИмяНовое = СтрЗаменить(ИмяНовое, "-", " ");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Результат = СокрЛП(Результат + " " + ИмяНовое);
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(Отчество) Тогда
				ОтчествоНовое = МассивФИО[ИндексФИО];
				ИндексФИО = ИндексФИО + 1;
				
				Если НужноИсправитьОтчество Тогда
					
					Если СтрЧислоВхождений(Отчество, "-") > 0 Тогда
						
						МассивОтчество = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ОтчествоНовое, "-");
						ОтчествоНовое = МассивОтчество[0];
						ИндексОтчество = 1;
						
						Пока Истина Цикл
							
							ПозПробел = Найти(Отчество, " ");
							ПозДефис  = Найти(Отчество, "-");
							
							Если ПозПробел = ПозДефис Тогда
								Прервать;
							КонецЕсли;
							
							Если (ПозДефис = 0) ИЛИ (ПозПробел > 0) И (ПозПробел < ПозДефис) Тогда
								ОтчествоНовое = ОтчествоНовое + " ";
								Отчество = Сред(Отчество, ПозПробел+1);
								
							ИначеЕсли (ПозПробел = 0) ИЛИ (ПозДефис > 0) И (ПозДефис < ПозПробел) Тогда
								ОтчествоНовое = ОтчествоНовое + "-";
								Отчество = Сред(Отчество, ПозДефис+1);
								
							Иначе
								Прервать;
								
							КонецЕсли;
							
							ОтчествоНовое = ОтчествоНовое + МассивОтчество[ИндексОтчество];
							ИндексОтчество = ИндексОтчество + 1;
							
						КонецЦикла;
						
					Иначе
						ОтчествоНовое = СтрЗаменить(ОтчествоНовое, "-", " ");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Результат = СокрЛП(Результат + " " + ОтчествоНовое);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
		
	КонецПопытки;
	
	#Иначе
	
	Возврат Ложь;
	
	#КонецЕсли
	
КонецФункции // ПросклонятьФИО()

// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

// проставляет в строку табличной части или реквизит формы полученные данные по Сотруднику
//
Процедура ПроставитьДанныеСтроки(Сотрудник, ДатаСобытия, ЭлементФормы) Экспорт
		
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("парамДатаСобытия", ДатаСобытия);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
	|	РаботникиОрганизации.Должность КАК Должность
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизации";
	
	Запрос.Текст = ТекстЗапроса;
	НаборыДанных = Запрос.Выполнить().Выгрузить();
	
	ЗапросИндивидуальныйГрафик = Новый Запрос;
	ЗапросИндивидуальныйГрафик.УстановитьПараметр("Месяц", НачалоМесяца(ДатаСобытия));
	ЗапросИндивидуальныйГрафик.УстановитьПараметр("Сотрудник", Сотрудник);
	ЗапросИндивидуальныйГрафик.Текст = "
	|ВЫБРАТЬ
	|	ИндивидуальныйГрафик.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ИндивидуальныйГрафик
	|ГДЕ
	|	ИндивидуальныйГрафик.Сотрудник = &Сотрудник
	|	И ИндивидуальныйГрафик.Месяц = &Месяц";
	
	Если НаборыДанных.Количество() = 0 Тогда
		// Если не нашли данных - ничего не делаем
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементФормы) = Тип("ТабличноеПоле") Тогда
		
		// поле ПодразделениеОрганизации есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			ЭлементФормы.ТекущаяСтрока.ПодразделениеОрганизации = НаборыДанных[0].ПодразделениеОрганизации;
		КонецЕсли;
		
		// поле ГрафикРаботы есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("ГрафикРаботы") <> Неопределено Тогда
			Если ЗапросИндивидуальныйГрафик.Выполнить().Выбрать().Количество() <> 0 Тогда
				ЭлементФормы.ТекущаяСтрока.ГрафикРаботы = Сотрудник;
			Иначе
				ЭлементФормы.ТекущаяСтрока.ГрафикРаботы = НаборыДанных[0].ГрафикРаботы;
			КонецЕсли;
		КонецЕсли;
		
		// поле Должность есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("Должность") <> Неопределено Тогда
			ЭлементФормы.ТекущаяСтрока.Должность = НаборыДанных[0].Должность;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПроставитьДанныеСтроки()

Функция ПериодыИспользованияПомещений(ДатаНачала = Неопределено, ДатаОкончания = Неопределено, Условие = "", УчитыватьРегистратор = Истина) Экспорт
	
	Текст =
	"ВЫБРАТЬ
	|	Периоды.Регистратор,
	|	Периоды.Помещение,
	|	Периоды.ДатаНачала,
	|	Периоды.ДатаОкончания
	|ИЗ
	|	РегистрСведений.ПериодыЗанятостиПомещений КАК Периоды
	|ГДЕ
	|	Периоды.ДатаНачала <> ДАТАВРЕМЯ(1,1,1)
	|	И Периоды.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1)";
	Если Не ПустаяСтрока(Условие) Тогда
	Текст = Текст + "
	|	И " + Условие;
	КонецЕсли;
	Если Не УчитыватьРегистратор Тогда
	Текст = Текст + "
	|	И Периоды.Регистратор <> &Регистратор";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
	Текст = Текст + "
	|	И (";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
	Текст = Текст + "Периоды.ДатаНачала >= &" + ДатаНачала + "
	|	";
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
	Если ДатаНачала <> Неопределено Тогда
	Текст = Текст + "И ";
	КонецЕсли;
	Текст = Текст + "Периоды.ДатаНачала <= &" + ДатаОкончания + "
	|	";
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
	Текст = Текст + "ИЛИ &ДатаНачала >= Периоды.ДатаНачала
	|	И &ДатаНачала <= Периоды.ДатаОкончания";
	КонецЕсли;
	Если ДатаНачала <> Неопределено ИЛИ ДатаОкончания <> Неопределено Тогда
	Текст = Текст + ")";
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Процедура ПолучитьОшибкиПериодовЗанятостиПомещения(Регистратор, УчитыватьРегистратор, МассивПомешения, СообщенияОбОшибках, ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	ТекстДатаНачала		= Неопределено;
	ТекстДатаОкончания	= Неопределено;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ТекстДатаНачала		= "ДатаНачала";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекстДатаОкончания	= "ДатаОкончания";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТаблицаПериодов = ПериодыИспользованияПомещений(ТекстДатаНачала, ТекстДатаОкончания, "Периоды.Помещение В (&Помещения)", УчитыватьРегистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(Регистратор) КАК ПредставлениеРегистратор,
	|	Помещение,
	|	Помещение.Наименование КАК ПомещениеНаименование,
	|	ДатаНачала,
	|	ДатаОкончания
	|ИЗ
	|	(" + ТаблицаПериодов + ") КАК Периоды
	|УПОРЯДОЧИТЬ ПО
	|	ПомещениеНаименование,
	|	ДатаНачала";
	
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	Запрос.УстановитьПараметр("Помещения",		МассивПомешения);
	Запрос.УстановитьПараметр("ДатаНачала",		ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// обработаем периоды
	ТекущееПомещение					= Неопределено;
	ПоследняяДатаНачала					= '0001-01-01';
	ПоследняяДатаОкончания				= '0001-01-01';
	ПоследнийРегистратор				= Неопределено;
	ПоследнийПредставлениеРегистратор	= "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущееПомещение <> Выборка.Помещение Тогда
			ТекущееПомещение = Выборка.Помещение;
			
		ИначеЕсли (ПоследняяДатаОкончания > Выборка.ДатаНачала) ИЛИ (ПоследняяДатаОкончания = '0001-01-01') Тогда
			// сообщения формируем для переданного регистратора или все, если регистратор не задан 
			Если СообщенияОбОшибках <> НеОпределено и
				(	Регистратор = НеОпределено ИЛИ
					ПоследнийРегистратор = Регистратор ИЛИ
					Выборка.Регистратор = Регистратор) Тогда
				СообщениеОбОшибке = Новый Структура("Помещение,
													|ДатаНачала,
													|ДатаОкончания,
													|ДатаНачалаПред,
													|ДатаОкончанияПред,
													|Регистратор,
													|ПослРегистратор,
													|РегистраторСсылка,
													|ПослРегистраторСсылка");
				СообщениеОбОшибке.Помещение			= Выборка.ПомещениеНаименование;
				СообщениеОбОшибке.ДатаНачала		= Выборка.ДатаНачала;
				СообщениеОбОшибке.ДатаОкончания		= Выборка.ДатаОкончания;
				СообщениеОбОшибке.ДатаНачалаПред	= ПоследняяДатаНачала;
				СообщениеОбОшибке.ДатаОкончанияПред	= ПоследняяДатаОкончания;
				
				СообщениеОбОшибке.РегистраторСсылка 		= Выборка.Регистратор;
				СообщениеОбОшибке.ПослРегистраторСсылка 	= ПоследнийРегистратор;
				
				Если Выборка.Регистратор = Регистратор Тогда
					СообщениеОбОшибке.Регистратор = Выборка.ПредставлениеРегистратор + " (текущий документ)";
				Иначе
					СообщениеОбОшибке.Регистратор = "" + Выборка.ПредставлениеРегистратор;
				КонецЕсли;
				
				Если Выборка.Регистратор <> ПоследнийРегистратор Тогда
					Если ПоследнийРегистратор = Регистратор Тогда
						СообщениеОбОшибке.ПослРегистратор = ПоследнийПредставлениеРегистратор + " (текущий документ)";
					Иначе
						СообщениеОбОшибке.ПослРегистратор = "" + ПоследнийПредставлениеРегистратор;
					КонецЕсли;
				КонецЕсли;
				
				СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
				
			КонецЕсли;
		КонецЕсли;
		
		ПоследнийРегистратор				= Выборка.Регистратор;
		ПоследнийПредставлениеРегистратор	= Выборка.ПредставлениеРегистратор;
		ПоследняяДатаНачала					= Выборка.ДатаНачала;
		ПоследняяДатаОкончания				= Выборка.ДатаОкончания;
	КонецЦикла;
	
КонецПроцедуры

