// Выполняет расчет потребностей.
//
// Параметры:
//   Источники - тип "ТаблицаЗначений" (нельзя использовать элемент коллекции).
//     Колонки:
//       - Номенклатура - необязательный в случае указания спецификации (если не указан, тогда выполняется разузлование спецификации).
//       - ХарактеристикаНоменклатуры - необязательный.
//       - СерияНоменклатуры - необязательный.
//       - ЕдиницаИзмерения - необязательный (если не указан, тогда единица хранения остатков номенклатуры).
//       - Коэффициент - необязательный (если не указан, тогда коэффициент единица измерения).
//       - Количество - необязательный (если не указан, тогда 1).
//       - Спецификация - необязательный в случае указания номенклатуры (если не указан, тогда основная спецификация номенклатуры).
//
//   Результат - тип "Структура"
//     Свойства:
//       - Потребности - необязательный (если не указан, тогда будет создан, так как расчет потребностей выполняется всегда).
//       - ВозвратныеОтходы - необязательный (если не указан, тогда расчет возвратных отходов не выполняется).
//    
//   Параметры - тип "Массив" или "Структура". Содержит массив структур параметров для каждой строки источника или структуры параметров для всех строк источника (необязательный).
//     Свойства:
//       - ПараметрыВыпуска - тип "Соответсвие" (ключ - имя параметра, значение - значение параметра). Необязательный.
//       - ДатаСпецификации - дата, на которую будут получены основные спецификации номенклатуры. Необязательный. Значение по умолчанию - текущая дата.
//       - Отбор - структура, свойства которой являются имена колонок результата разузлования, а значениями значения отбора (значение или массив значений).
//       - РазмещатьВСопутствующихИзделиях - тип "Булево"
//
// Возвращаемое значение:
//   Массив, содержащий структуры с содержанием ошибок, полученных в результате разлования.
//    Свойства структуры:
//      - СтатусОшибки
//      - Причина
//      - ОписаниеОшибки
//      - Спецификация
//      - НомерСтроки
//      - Последовательность
//
// Значения, возвращаемые в структуру "Результат".
//
//   Таблица значений "Потребности"
//     - Номенклатура
//     - ХарактеристикаНоменклатуры
//     - СерияНоменклатуры
//     - ЕдиницаИзмерения
//     - Количество
//     - Спецификация
//     - Материал
//     - ХарактеристикаМатериала
//     - КоличествоМатериала
//     - ЕдиницаИзмеренияМатериала
//     - СтатьяЗатрат
//
//   Таблица значений "ВозвратныеОтходы"
//     - Номенклатура
//     - ХарактеристикаНоменклатуры
//     - СерияНоменклатуры
//     - ЕдиницаИзмерения
//     - Количество
//     - Спецификация
//     - Материал
//     - ХарактеристикаМатериала
//     - КоличествоМатериала
//     - ЕдиницаИзмеренияМатериала
//     - Сумма
//     - СуммаРегл
//     - СтатьяЗатрат
//
Функция ПолучитьПотребность(Источники, Результат, Параметры = Неопределено) Экспорт
	
	МассивОшибок = Новый Массив;
	
	РезультатПотребности = Новый ТаблицаЗначений;
	РезультатПотребности.Колонки.Добавить("ИндексСтрокиИсточника", Новый ОписаниеТипов("Число"));
	РезультатПотребности.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	РезультатПотребности.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	РезультатПотребности.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	РезультатПотребности.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	РезультатПотребности.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	РезультатПотребности.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
	РезультатПотребности.Колонки.Добавить("Материал", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	РезультатПотребности.Колонки.Добавить("ХарактеристикаМатериала", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	РезультатПотребности.Колонки.Добавить("КоличествоМатериала", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	РезультатПотребности.Колонки.Добавить("ЕдиницаИзмеренияМатериала", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	РезультатПотребности.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	
	РезультатВозвратныеОтходы = Новый ТаблицаЗначений;
	РезультатВозвратныеОтходы.Колонки.Добавить("ИндексСтрокиИсточника", Новый ОписаниеТипов("Число"));
	РезультатВозвратныеОтходы.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	РезультатВозвратныеОтходы.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	РезультатВозвратныеОтходы.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	РезультатВозвратныеОтходы.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	РезультатВозвратныеОтходы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	РезультатВозвратныеОтходы.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
	РезультатВозвратныеОтходы.Колонки.Добавить("Материал", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	РезультатВозвратныеОтходы.Колонки.Добавить("ХарактеристикаМатериала", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	РезультатВозвратныеОтходы.Колонки.Добавить("КоличествоМатериала", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	РезультатВозвратныеОтходы.Колонки.Добавить("ЕдиницаИзмеренияМатериала", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	РезультатВозвратныеОтходы.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РезультатВозвратныеОтходы.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РезультатВозвратныеОтходы.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	
	ПотребностиПоСпецификациям = Новый ТаблицаЗначений;
	ПотребностиПоСпецификациям.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
	ПотребностиПоСпецификациям.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ПотребностиПоСпецификациям.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ПотребностиПоСпецификациям.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ПотребностиПоСпецификациям.Колонки.Добавить("Потребности");
	ПотребностиПоСпецификациям.Колонки.Добавить("ВозвратныеОтходы");
	ПотребностиПоСпецификациям.Колонки.Добавить("ДоляСтоимостиПоСпецификации");
	
	ПотребностиПоНоменклатуре = Новый ТаблицаЗначений;
	ПотребностиПоНоменклатуре.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ПотребностиПоНоменклатуре.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ПотребностиПоНоменклатуре.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ПотребностиПоНоменклатуре.Колонки.Добавить("ДоляСтоимости");
	ПотребностиПоНоменклатуре.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
	ПотребностиПоНоменклатуре.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ПотребностиПоНоменклатуре.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	ЕстьНомерСтрокиПродукция = Ложь;
	Если Источники.Колонки.Найти("НомерСтрокиПродукция") <> Неопределено Тогда   
		ЕстьНомерСтрокиПродукция = Истина;
		ПотребностиПоНоменклатуре.Колонки.Добавить("НомерСтрокиПродукция", Новый ОписаниеТипов("Число"));
	КонецЕсли;  
	
	ЕстьВидВыпуска = Ложь;
	Если Источники.Колонки.Найти("ВидВыпуска") <> Неопределено Тогда   
		ЕстьВидВыпуска = Истина;
		ПотребностиПоНоменклатуре.Колонки.Добавить("ВидВыпуска", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыВыпуска"));
		ПотребностиПоСпецификациям.Колонки.Добавить("ВидВыпуска", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыВыпуска"));
	КонецЕсли;  
	
    Для каждого Источник Из Источники Цикл
		
		ПараметрыТекущейСтроки = Неопределено;
		Индекс = Источники.Индекс(Источник);
		
		Если ТипЗнч(Параметры) = Тип("Массив") И Параметры.ВГраница() >= Индекс Тогда
			
			ПараметрыТекущейСтроки = Параметры[Индекс];
			
		ИначеЕсли ТипЗнч(Параметры) = Тип("Структура") Тогда
			
			ПараметрыТекущейСтроки = Параметры;
			
		КонецЕсли;
		
		Результат = Новый Структура("ВыходныеИзделия, ИсходныеКомплектующие, ВозвратныеОтходы");
		
		ИнициализацияПараметров(ПараметрыТекущейСтроки);
		ПараметрыТекущейСтроки.КоличествоУровнейРазузлования = 1;
		ПараметрыТекущейСтроки.РазмещатьВСопутствующихИзделиях = Ложь;
		
		СтруктураИсточник = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ЕдиницаИзмерения, Количество, Спецификация");
		ЗаполнитьЗначенияСвойств(СтруктураИсточник, Источник);

		МассивОшибокРазузлования = РазузловатьНоменклатуру(СтруктураИсточник, Результат, ПараметрыТекущейСтроки);
		
		Для каждого ОшибкаРазузлования из МассивОшибокРазузлования Цикл
			
			МассивОшибок.Добавить(ОшибкаРазузлования);
			
		КонецЦикла;
		
		ВыходныеИзделия = Результат.ВыходныеИзделия;
		ИсходныеКомплектующие = Результат.ИсходныеКомплектующие;
		ВозвратныеОтходы = Результат.ВозвратныеОтходы;
		
		Если ТипЗнч(СтруктураИсточник.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ СтруктураИсточник.Номенклатура.Пустая() Тогда
			
			НоваяПотребностьПоНоменклатуре = ПотребностиПоНоменклатуре.Добавить();
			
			НоваяПотребностьПоНоменклатуре.Номенклатура = СтруктураИсточник.Номенклатура;
			НоваяПотребностьПоНоменклатуре.ХарактеристикаНоменклатуры = СтруктураИсточник.ХарактеристикаНоменклатуры;
			НоваяПотребностьПоНоменклатуре.СерияНоменклатуры = СтруктураИсточник.СерияНоменклатуры;
			НоваяПотребностьПоНоменклатуре.Спецификация = ПараметрыТекущейСтроки.Спецификация;
			НоваяПотребностьПоНоменклатуре.ЕдиницаИзмерения = СтруктураИсточник.ЕдиницаИзмерения;
			НоваяПотребностьПоНоменклатуре.Количество = СтруктураИсточник.Количество;
			НоваяПотребностьПоНоменклатуре.ДоляСтоимости = ПараметрыТекущейСтроки.ДоляСтоимости;
			
			Если ЕстьНомерСтрокиПродукция Тогда
				НоваяПотребностьПоНоменклатуре.НомерСтрокиПродукция = Источник.НомерСтрокиПродукция;
			КонецЕсли;	
			
			Если ЕстьВидВыпуска Тогда
				НоваяПотребностьПоНоменклатуре.ВидВыпуска = Источник.ВидВыпуска;
			КонецЕсли;
			
			Если ЕстьВидВыпуска Тогда
				НайденныеСтроки = ПотребностиПоСпецификациям.НайтиСтроки(Новый Структура("Спецификация, Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ВидВыпуска", ПараметрыТекущейСтроки.Спецификация, СтруктураИсточник.Номенклатура, СтруктураИсточник.ХарактеристикаНоменклатуры, СтруктураИсточник.СерияНоменклатуры, Источник.ВидВыпуска));
			Иначе
				НайденныеСтроки = ПотребностиПоСпецификациям.НайтиСтроки(Новый Структура("Спецификация, Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", ПараметрыТекущейСтроки.Спецификация, СтруктураИсточник.Номенклатура, СтруктураИсточник.ХарактеристикаНоменклатуры, СтруктураИсточник.СерияНоменклатуры));
			КонецЕсли;	
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				СтрокаПотребностиПоСпецификации = ПотребностиПоСпецификациям.Добавить();
				СтрокаПотребностиПоСпецификации.Спецификация = ПараметрыТекущейСтроки.Спецификация;
				СтрокаПотребностиПоСпецификации.Номенклатура = СтруктураИсточник.Номенклатура;
				СтрокаПотребностиПоСпецификации.ХарактеристикаНоменклатуры = СтруктураИсточник.ХарактеристикаНоменклатуры;
				СтрокаПотребностиПоСпецификации.СерияНоменклатуры = СтруктураИсточник.СерияНоменклатуры;
				Если ЕстьВидВыпуска Тогда
					СтрокаПотребностиПоСпецификации.ВидВыпуска = Источник.ВидВыпуска;
				КонецЕсли;	
				СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации = УправлениеПланированием.ПолучитьДробь(0, 1);
				
			Иначе
				
				СтрокаПотребностиПоСпецификации = НайденныеСтроки[0];
				
			КонецЕсли; 
			
			СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации = УправлениеПланированием.СуммаДробей(СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации, ПараметрыТекущейСтроки.ДоляСтоимости);
			
			УправлениеПланированием.ДополнитьТаблицу(СтрокаПотребностиПоСпецификации.Потребности, ИсходныеКомплектующие);
			УправлениеПланированием.ДополнитьТаблицу(СтрокаПотребностиПоСпецификации.ВозвратныеОтходы, ВозвратныеОтходы);
			
		ИначеЕсли ТипЗнч(СтруктураИсточник.Спецификация) = Тип("СправочникСсылка.СпецификацииНоменклатуры") И НЕ СтруктураИсточник.Спецификация.Пустая() Тогда
			
			СтрокаПотребностиПоСпецификации = ПотребностиПоСпецификациям.Найти(ПараметрыТекущейСтроки.Спецификация, "Спецификация");
			
			Если СтрокаПотребностиПоСпецификации = Неопределено Тогда
				
				СтрокаПотребностиПоСпецификации = ПотребностиПоСпецификациям.Добавить();
				СтрокаПотребностиПоСпецификации.Спецификация = ПараметрыТекущейСтроки.Спецификация;
				СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации = УправлениеПланированием.ПолучитьДробь(0, 1);
				
			КонецЕсли; 
			
			Для каждого ВыходноеИзделие из ВыходныеИзделия Цикл
				
				НоваяПотребностьПоНоменклатуре = ПотребностиПоНоменклатуре.Добавить();
				
				НоваяПотребностьПоНоменклатуре.Номенклатура = ВыходноеИзделие.Номенклатура;
				НоваяПотребностьПоНоменклатуре.ХарактеристикаНоменклатуры = ВыходноеИзделие.ХарактеристикаНоменклатуры;
				НоваяПотребностьПоНоменклатуре.Спецификация = ПараметрыТекущейСтроки.Спецификация;
				НоваяПотребностьПоНоменклатуре.ЕдиницаИзмерения = ВыходноеИзделие.ЕдиницаИзмерения;
				НоваяПотребностьПоНоменклатуре.Количество = ВыходноеИзделие.Количество;
				НоваяПотребностьПоНоменклатуре.ДоляСтоимости = ВыходноеИзделие.ДоляСтоимости;
				
				Если ЕстьНомерСтрокиПродукция Тогда
					НоваяПотребностьПоНоменклатуре.НомерСтрокиПродукция = Источник.НомерСтрокиПродукция;
				КонецЕсли;	
				
				Если ЕстьВидВыпуска Тогда
					НоваяПотребностьПоНоменклатуре.ВидВыпуска = Источник.ВидВыпуска;
				КонецЕсли;
				
				СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации = УправлениеПланированием.СуммаДробей(СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации, УправлениеПланированием.ПолучитьДробь(ВыходноеИзделие.ДоляСтоимости, ВыходныеИзделия.Итог("ДоляСтоимости")));
				
			КонецЦикла;
			
			УправлениеПланированием.ДополнитьТаблицу(СтрокаПотребностиПоСпецификации.Потребности, ИсходныеКомплектующие);
			УправлениеПланированием.ДополнитьТаблицу(СтрокаПотребностиПоСпецификации.ВозвратныеОтходы, ВозвратныеОтходы);
			
		КонецЕсли;
			
	КонецЦикла; 
	
	Для каждого СтрокаПотребностиПоНоменклатуре Из ПотребностиПоНоменклатуре Цикл
		
		Если ЕстьВидВыпуска Тогда
			НайденныеСтроки = ПотребностиПоСпецификациям.НайтиСтроки(Новый Структура("Спецификация, Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ВидВыпуска", СтрокаПотребностиПоНоменклатуре.Спецификация, СтрокаПотребностиПоНоменклатуре.Номенклатура, СтрокаПотребностиПоНоменклатуре.ХарактеристикаНоменклатуры, СтрокаПотребностиПоНоменклатуре.СерияНоменклатуры, СтрокаПотребностиПоНоменклатуре.ВидВыпуска));
		Иначе	
			НайденныеСтроки = ПотребностиПоСпецификациям.НайтиСтроки(Новый Структура("Спецификация, Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", СтрокаПотребностиПоНоменклатуре.Спецификация, СтрокаПотребностиПоНоменклатуре.Номенклатура, СтрокаПотребностиПоНоменклатуре.ХарактеристикаНоменклатуры, СтрокаПотребностиПоНоменклатуре.СерияНоменклатуры));
		КонецЕсли;
		
		Для каждого СтрокаПотребностиПоСпецификации из НайденныеСтроки Цикл
		
			Если СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации.Значение = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если СтрокаПотребностиПоСпецификации.Потребности <> Неопределено Тогда
				
				Для каждого Потребность Из СтрокаПотребностиПоСпецификации.Потребности Цикл
					
					НоваяПотребность = РезультатПотребности.Добавить();
					
					НоваяПотребность.ИндексСтрокиИсточника = ПотребностиПоНоменклатуре.Индекс(СтрокаПотребностиПоНоменклатуре);
					
					Если ЕстьНомерСтрокиПродукция Тогда
						НоваяПотребность.ИндексСтрокиИсточника = СтрокаПотребностиПоНоменклатуре.НомерСтрокиПродукция;
					КонецЕсли;
					
					НоваяПотребность.Номенклатура = СтрокаПотребностиПоНоменклатуре.Номенклатура;
					НоваяПотребность.ХарактеристикаНоменклатуры = СтрокаПотребностиПоНоменклатуре.ХарактеристикаНоменклатуры;
					НоваяПотребность.СерияНоменклатуры = СтрокаПотребностиПоНоменклатуре.СерияНоменклатуры;
					НоваяПотребность.ЕдиницаИзмерения = СтрокаПотребностиПоНоменклатуре.ЕдиницаИзмерения;
					НоваяПотребность.Количество = СтрокаПотребностиПоНоменклатуре.Количество;
					НоваяПотребность.Спецификация = СтрокаПотребностиПоНоменклатуре.Спецификация;
					
					НоваяПотребность.Материал = Потребность.Номенклатура;
					НоваяПотребность.ХарактеристикаМатериала = Потребность.ХарактеристикаНоменклатуры;
					НоваяПотребность.КоличествоМатериала = Потребность.Количество * СтрокаПотребностиПоНоменклатуре.ДоляСтоимости.Числитель * СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации.Знаменатель / (СтрокаПотребностиПоНоменклатуре.ДоляСтоимости.Знаменатель * СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации.Числитель);
					НоваяПотребность.ЕдиницаИзмеренияМатериала = Потребность.ЕдиницаИзмерения;
					НоваяПотребность.СтатьяЗатрат = Потребность.СтатьяЗатрат;
					
					Потребность.Количество = Потребность.Количество - НоваяПотребность.КоличествоМатериала;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если СтрокаПотребностиПоСпецификации.ВозвратныеОтходы <> Неопределено Тогда
			
				Для каждого ВозвратныйОтход Из СтрокаПотребностиПоСпецификации.ВозвратныеОтходы Цикл
					
					НовыйВозвратныйОтход = РезультатВозвратныеОтходы.Добавить();
					
					НовыйВозвратныйОтход.ИндексСтрокиИсточника = ПотребностиПоНоменклатуре.Индекс(СтрокаПотребностиПоНоменклатуре);
					
					Если ЕстьНомерСтрокиПродукция Тогда
						НовыйВозвратныйОтход.ИндексСтрокиИсточника = СтрокаПотребностиПоНоменклатуре.НомерСтрокиПродукция;
					КонецЕсли;
					
					НовыйВозвратныйОтход.Номенклатура = СтрокаПотребностиПоНоменклатуре.Номенклатура;
					НовыйВозвратныйОтход.ХарактеристикаНоменклатуры = СтрокаПотребностиПоНоменклатуре.ХарактеристикаНоменклатуры;
					НовыйВозвратныйОтход.СерияНоменклатуры = СтрокаПотребностиПоНоменклатуре.СерияНоменклатуры;
					НовыйВозвратныйОтход.ЕдиницаИзмерения = СтрокаПотребностиПоНоменклатуре.ЕдиницаИзмерения;
					НовыйВозвратныйОтход.Количество = СтрокаПотребностиПоНоменклатуре.Количество;
					НовыйВозвратныйОтход.Спецификация = СтрокаПотребностиПоНоменклатуре.Спецификация;
					
					НовыйВозвратныйОтход.Материал = ВозвратныйОтход.Номенклатура;
					НовыйВозвратныйОтход.ХарактеристикаМатериала = ВозвратныйОтход.ХарактеристикаНоменклатуры;
					НовыйВозвратныйОтход.КоличествоМатериала = ВозвратныйОтход.Количество * СтрокаПотребностиПоНоменклатуре.ДоляСтоимости.Числитель * СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации.Знаменатель / (СтрокаПотребностиПоНоменклатуре.ДоляСтоимости.Знаменатель * СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации.Числитель);
					НовыйВозвратныйОтход.ЕдиницаИзмеренияМатериала = ВозвратныйОтход.ЕдиницаИзмерения;
					НовыйВозвратныйОтход.Сумма = ВозвратныйОтход.Сумма * СтрокаПотребностиПоНоменклатуре.ДоляСтоимости.Числитель * СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации.Знаменатель / (СтрокаПотребностиПоНоменклатуре.ДоляСтоимости.Знаменатель * СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации.Числитель);
					НовыйВозвратныйОтход.СуммаРегл = ВозвратныйОтход.СуммаРегл * СтрокаПотребностиПоНоменклатуре.ДоляСтоимости.Числитель * СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации.Знаменатель / (СтрокаПотребностиПоНоменклатуре.ДоляСтоимости.Знаменатель * СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации.Числитель);
					НовыйВозвратныйОтход.СтатьяЗатрат = ВозвратныйОтход.СтатьяЗатрат;
					
					ВозвратныйОтход.Количество = ВозвратныйОтход.Количество - НовыйВозвратныйОтход.КоличествоМатериала;
					ВозвратныйОтход.Сумма = ВозвратныйОтход.Сумма - НовыйВозвратныйОтход.Сумма;
					ВозвратныйОтход.СуммаРегл = ВозвратныйОтход.СуммаРегл - НовыйВозвратныйОтход.СуммаРегл;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации = УправлениеПланированием.РазностьДробей(СтрокаПотребностиПоСпецификации.ДоляСтоимостиПоСпецификации, СтрокаПотребностиПоНоменклатуре.ДоляСтоимости);
			
		КонецЦикла;
		
	КонецЦикла; 
	
	Результат = Новый Структура("Потребности, ВозвратныеОтходы", РезультатПотребности, РезультатВозвратныеОтходы);
	
	Возврат МассивОшибок;
	
КонецФункции // ПолучитьПотребность()

// Выполняет разузлование номенклатуры или спецификации.
//
// Параметры:
//   Источник - тип "Структура" (нельзя использовать элемент коллекции).
//     Свойства:
//       - Номенклатура - необязательный в случае указания спецификации (если не указан, тогда выполняется разузлование спецификации).
//       - ХарактеристикаНоменклатуры - необязательный.
//       - ЕдиницаИзмерения - необязательный (если не указан, тогда единица хранения остатков номенклатуры).
//       - Коэффициент - необязательный (если не указан, тогда коэффициент единица измерения).
//       - Количество - необязательный (если не указан, тогда 1).
//       - Спецификация - необязательный в случае указания номенклатуры (если не указан, тогда основная спецификация номенклатуры).
//
//   Результат - тип "Структура"
//     Свойства:
//       - ПолноеРазузлование - необязательный (если не указан, тогда будет создан, так как полное разулование выполняется всегда).
//       - ВыходныеИзделия - необязательный (если не указан, тогда расчет выходных изделий не выполняется).
//       - ИсходныеКомплектующие - необязательный (если не указан, тогда расчет исходных комплектующих не выполняется).
//       - ВозвратныеОтходы - необязательный (если не указан, тогда расчет возвратных отходов не выполняется).
//       - СопутствующиеИзделия - необязательный (если не указан, тогда расчет сопутствующих изделий не выполняется).
//  
//   Параметры - тип "Структура"
//     Свойства:
//       - ПараметрыВыпуска - тип "Соответсвие" (ключ - имя параметра, значение - значение параметра). Необязательный.
//       - КоличествоУровнейРазузлования - тип "Число" (0 - полное разузлование, 1 - последний передел и т.д). Необязательный. Значение по умолчанию - 0.
//       - ДатаСпецификации - дата, на которую будут получены основные спецификации номенклатуры. Необязательный. Значение по умолчанию - текущая дата.
//       - Отбор - структура, свойства которой являются имена колонок результата разузлования, а значениями значения отбора (значение или массив значений).
//       - РазмещатьВСопутствующихИзделиях - тип "Булево"
//
// Возвращаемое значение:
//   Массив, содержащий структуры с содержанием ошибок, полученных в результате разлования.
//     Свойства структуры:
//       - СтатусОшибки
//       - Причина
//       - ОписаниеОшибки
//       - Спецификация
//       - НомерСтроки
//       - Последовательность
//
// Значения, возвращаемые в структуру "Результат".
//
//   Таблица значений "ПолноеРазузлование"
//     - Уровень
//     - Разузлован
//     - Номенклатура
//     - ХарактеристикаНоменклатуры
//     - ЕдиницаИзмерения
//     - Коэффициент
//     - Количество
//     - МинимальнаяПартия
//     - Кратность
//     - ДоляСтоимости
//     - СтатьяЗатрат
//     - ВидВоспроизводства
//     - СписаниеКомплектующей
//     - Спецификация
//     - ТочкаМаршрута
//     - Подразделение
//     - РабочийЦентр
//     - Последовательность
//
//   Таблица значений "ВыходныеИзделия"
//     - Уровень
//     - Разузлован
//     - Номенклатура
//     - ХарактеристикаНоменклатуры
//     - ЕдиницаИзмерения
//     - Коэффициент
//     - Количество
//     - МинимальнаяПартия
//     - Кратность
//     - ДоляСтоимости
//     - Спецификация
//     - ТочкаМаршрута
//     - Подразделение
//     - РабочийЦентр
//
//   Таблица значений "ИсходныеКомплектующие"
//     - Уровень
//     - Разузлован
//     - Номенклатура
//     - ХарактеристикаНоменклатуры
//     - ЕдиницаИзмерения
//     - Коэффициент
//     - Количество
//     - СтатьяЗатрат
//     - МинимальнаяПартия
//     - Кратность
//     - ВидВоспроизводства
//     - СписаниеКомплектующей
//     - Спецификация
//     - ТочкаМаршрута
//     - Подразделение
//     - РабочийЦентр
//
//   Таблица значений "ВозвратныеОтходы"
//     - Уровень
//     - Номенклатура
//     - ХарактеристикаНоменклатуры
//     - ЕдиницаИзмерения
//     - Коэффициент
//     - Количество
//     - Сумма
//     - СуммаРегл
//     - СтатьяЗатрат
//     - СписаниеКомплектующей
//     - ТочкаМаршрута
//     - Подразделение
//     - РабочийЦентр
//
//   Таблица значений "СопутствующиеИзделия"
//     - Уровень
//     - Разузлован
//     - Номенклатура
//     - ХарактеристикаНоменклатуры
//     - ЕдиницаИзмерения
//     - Коэффициент
//     - Количество
//     - МинимальнаяПартия
//     - Кратность
//     - ДоляСтоимости
//     - Спецификация
//     - ТочкаМаршрута
//     - Подразделение
//     - РабочийЦентр
//     - ИсходноеКоличество
//     - КоэффициентПриведения
//
//   - МаксимальныйУровень
//
Функция РазузловатьНоменклатуру(Источник, Результат = Неопределено, Параметры = Неопределено, Кэш = Неопределено) Экспорт
	
	ИнициализацияПараметров(Параметры);
	ИнициализацияРезультатаРазузлования(Результат, Параметры);
	
	МассивОшибок = Новый Массив;
	Уровень = 0;
	
	Если Источник.Свойство("Номенклатура") И ТипЗнч(Источник.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ Источник.Номенклатура.Пустая() Тогда
		
		// Исходная строка добавляется в результат разузлования
		НоваяСтрока = Результат.ПолноеРазузлование.Добавить();
			
		НоваяСтрока.Уровень = Уровень;
		НоваяСтрока.Разузлован = Ложь;
		НоваяСтрока.НоменклатурнаяГруппа = ПолучитьРеквизитНоменклатурыИзКеша(Источник.Номенклатура, "НоменклатурнаяГруппа", Кэш);
		НоваяСтрока.Номенклатура = Источник.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = ?(Источник.Свойство("ХарактеристикаНоменклатуры"), Источник.ХарактеристикаНоменклатуры, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		НоваяСтрока.ЕдиницаИзмерения = ?(Источник.Свойство("ЕдиницаИзмерения"), Источник.ЕдиницаИзмерения, ПолучитьРеквизитНоменклатурыИзКеша(Источник.Номенклатура, "ЕдиницаХраненияОстатков", Кэш));
		Если Источник.Свойство("Коэффициент") Тогда
			Коэффициент = Источник.Коэффициент;
		Иначе
			Если Кэш = Неопределено Тогда
				Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			Иначе
				Строки = Кэш.ЕдиницыИзмерения.НайтиСтроки(Новый Структура("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения));
				
				Если Строки.Количество() > 0 Тогда
					Коэффициент = Строки[0].Коэффициент;
				Иначе
					Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
					
					НоваяСтрокаКэша = Кэш.ЕдиницыИзмерения.Добавить();
					НоваяСтрокаКэша.ЕдиницаИзмерения = НоваяСтрока.ЕдиницаИзмерения;
					НоваяСтрокаКэша.Коэффициент = Коэффициент;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		НоваяСтрока.Коэффициент = Коэффициент;
		НоваяСтрока.Количество = ?(Источник.Свойство("Количество"), Источник.Количество, 1);
		УстановитьВидВоспроизводства(НоваяСтрока, Кэш);
		НоваяСтрока.Спецификация = ПолучитьСпецификацию(Источник, Параметры, Кэш);
		УстановитьПараметрыВыходногоИзделия(НоваяСтрока, Кэш);
		
		Если НЕ ДобавитьСпецификациюВПоследовательность(НоваяСтрока.Спецификация, НоваяСтрока.Последовательность) Тогда
			
			НоваяСтрока.Разузлован = Истина;
			ДобавитьВОшибки(СтатусСообщения.ОченьВажное, НСтр("ru='Обнаружено зацикливание в структуре изделия.'"), НСтр("ru='Зацикливание'"), НоваяСтрока.Спецификация, Неопределено, НоваяСтрока.Последовательность, МассивОшибок);
			
		КонецЕсли;
		
		Параметры.Вставить("Спецификация", НоваяСтрока.Спецификация);
		
		ДоляСтоимостиКоличествоВыпусков = ПолучитьДолюСтоимостиКоличествоВыпусков(НоваяСтрока.Спецификация, НоваяСтрока.Номенклатура, НоваяСтрока.ХарактеристикаНоменклатуры, НоваяСтрока.Коэффициент, НоваяСтрока.Количество, Кэш);
		
		Параметры.Вставить("КоличествоВыпусков", ДоляСтоимостиКоличествоВыпусков.КоличествоВыпусков);
		Параметры.Вставить("ДоляСтоимости", ДоляСтоимостиКоличествоВыпусков.ДоляСтоимости);
		
		Результат.КоличествоВыпусков = Параметры.КоличествоВыпусков;
		
	ИначеЕсли Источник.Свойство("Спецификация") И ТипЗнч(Источник.Спецификация) = Тип("СправочникСсылка.СпецификацииНоменклатуры") И НЕ Источник.Спецификация.Пустая() Тогда
		
		ВыходноеИзделие = ПолучитьВыходныеИзделия(Источник.Спецификация);
		
		Если ВыходноеИзделие.Количество() = 0 Тогда
			
			НоваяСтрока = Результат.ПолноеРазузлование.Добавить();
					
			НоваяСтрока.Уровень = Уровень;
			НоваяСтрока.Разузлован = Ложь;
			НоваяСтрока.СопутствующееИзделие = Ложь;
			НоваяСтрока.Коэффициент = 1;
			НоваяСтрока.Количество = ?(Источник.Свойство("Количество"), Источник.Количество, 1);
			НоваяСтрока.Спецификация = Источник.Спецификация;
				
			Если НЕ ДобавитьСпецификациюВПоследовательность(НоваяСтрока.Спецификация, НоваяСтрока.Последовательность) Тогда
					
				НоваяСтрока.Разузлован = Истина;
				ДобавитьВОшибки(СтатусСообщения.ОченьВажное, НСтр("ru='Обнаружено зацикливание в структуре изделия.'"), НСтр("ru='Зацикливание'"), НоваяСтрока.Спецификация, Неопределено, НоваяСтрока.Последовательность, МассивОшибок);
					
			КонецЕсли;
			
		Иначе
			
			Пока ВыходноеИзделие.Следующий() Цикл
							
				НоваяСтрока = Результат.ПолноеРазузлование.Добавить();
					
				НоваяСтрока.Уровень = Уровень;
				НоваяСтрока.Разузлован = Ложь;
				НоваяСтрока.СопутствующееИзделие = ВыходноеИзделие.СопутствующееИзделие;
				НоваяСтрока.НомерОперацииМаршрута = ВыходноеИзделие.НомерОперацииМаршрута;
				НоваяСтрока.НоменклатурнаяГруппа = ВыходноеИзделие.НоменклатурнаяГруппа;
				НоваяСтрока.Номенклатура = ВыходноеИзделие.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = ВыходноеИзделие.ХарактеристикаНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения = ВыходноеИзделие.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент = ВыходноеИзделие.Коэффициент;
				НоваяСтрока.Количество = ?(Источник.Свойство("Количество"), ВыходноеИзделие.Количество * Источник.Количество, ВыходноеИзделие.Количество);
				НоваяСтрока.Спецификация = Источник.Спецификация;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыходноеИзделие, "МинимальнаяПартия, Кратность, ДоляСтоимости, ТочкаМаршрута, Подразделение, РабочийЦентр");
				
				Если НЕ ДобавитьСпецификациюВПоследовательность(НоваяСтрока.Спецификация, НоваяСтрока.Последовательность) Тогда
					
					НоваяСтрока.Разузлован = Истина;
					ДобавитьВОшибки(СтатусСообщения.ОченьВажное, НСтр("ru='Обнаружено зацикливание в структуре изделия.'"), НСтр("ru='Зацикливание'"), НоваяСтрока.Спецификация, Неопределено, НоваяСтрока.Последовательность, МассивОшибок);
					
				КонецЕсли;
							
			КонецЦикла;
			
		КонецЕсли;
		
		Параметры.Вставить("Спецификация", Источник.Спецификация);
		Параметры.Вставить("КоличествоВыпусков", УправлениеПланированием.ПолучитьДробь(Источник.Количество, Источник.Количество));
		Параметры.Вставить("ДоляСтоимости", УправлениеПланированием.ПолучитьДробь(Источник.Количество, Источник.Количество));
		
		Результат.КоличествоВыпусков = Параметры.КоличествоВыпусков;
		
	Иначе
		
		ДобавитьВОшибки(СтатусСообщения.ОченьВажное, НСтр("ru='Не указана номенклатура или спецификация для разузлования.'"), НСтр("ru='Разузлование'"), Неопределено, Неопределено, Неопределено, МассивОшибок);
		
	КонецЕсли;
	
	Пока Истина Цикл
		
		Если Параметры.КоличествоУровнейРазузлования < 0 Тогда // Разузлование не требуется
			
			Прервать;
			
		КонецЕсли;
		
		// Получение позиций, требующих разузлования
		СтрокиТекущегоУровня = Результат.ПолноеРазузлование.НайтиСтроки(Новый Структура("Разузлован, Уровень", Ложь, Уровень));
		
		Если СтрокиТекущегоУровня.Количество() = 0 Тогда // Нет данных для разузлования
			
			Прервать;
			
		ИначеЕсли Параметры.КоличествоУровнейРазузлования > 0 И Уровень = Параметры.КоличествоУровнейРазузлования Тогда // Достигнут требуемый уровень разузлования
			
			Для каждого СтрокаТекущегоУровня из СтрокиТекущегоУровня Цикл
				
				СтрокаТекущегоУровня.Разузлован = Истина;
				
			КонецЦикла;
			
			Прервать;
			
		КонецЕсли;
			
		Уровень = Уровень + 1;
			
		Для каждого СтрокаТекущегоУровня из СтрокиТекущегоУровня Цикл
			
			СтрокаТекущегоУровня.Разузлован = Истина;
			
			Если СтрокаТекущегоУровня.Спецификация <> Неопределено И НЕ СтрокаТекущегоУровня.Спецификация.Пустая() Тогда
					
				НеразмещенноеКоличество = РазместитьВСопутствующихИзделиях(СтрокаТекущегоУровня, Параметры, Результат);
				
				ДобавитьВВыходныеИзделия(Результат, СтрокаТекущегоУровня, Параметры);
				
				Если СтрокаТекущегоУровня.СопутствующееИзделие ИЛИ НеразмещенноеКоличество = 0 Тогда
					
					Продолжить;
					
				Иначе
					
					ДобавитьВСопутствующиеИзделия(СтрокаТекущегоУровня, Результат);
					
				КонецЕсли;
				
				ДоляСтоимостиКоличествоВыпусков = ПолучитьДолюСтоимостиКоличествоВыпусков(СтрокаТекущегоУровня.Спецификация, СтрокаТекущегоУровня.Номенклатура, СтрокаТекущегоУровня.ХарактеристикаНоменклатуры, СтрокаТекущегоУровня.Коэффициент, НеразмещенноеКоличество, Кэш);
				
				КоличествоВыпусков = ДоляСтоимостиКоличествоВыпусков.КоличествоВыпусков;
				ДоляСтоимости = ДоляСтоимостиКоличествоВыпусков.ДоляСтоимости;
				
				КоэффициентОсновногоСырья = 0;
				
				ИсходноеКомплектующее = ПолучитьИсходныеКомплектующие(СтрокаТекущегоУровня.Спецификация, Источник,, Кэш);
				
				Пока ИсходноеКомплектующее.Следующий() Цикл
					
					Если Результат.Свойство("СопутствующиеИзделия") Тогда
						
						Результат.ПолноеРазузлование.Колонки.Количество.Имя = "КоличествоОкругленное";
						Результат.ПолноеРазузлование.Колонки.КоличествоТочное.Имя = "Количество";
						
					КонецЕсли;
						
					ДобавитьВПолноеРазулование(ИсходноеКомплектующее, СтрокаТекущегоУровня, КоличествоВыпусков, КоэффициентОсновногоСырья, Параметры, Уровень, Результат, МассивОшибок,, Кэш);
					
					Если Результат.Свойство("СопутствующиеИзделия") Тогда
						
						Результат.ПолноеРазузлование.Колонки.Количество.Имя = "КоличествоТочное";
						Результат.ПолноеРазузлование.Колонки.КоличествоОкругленное.Имя = "Количество";
						
					КонецЕсли;
						
				КонецЦикла;
				
				ВозвратныйОтход = ПолучитьВозвратныеОтходы(СтрокаТекущегоУровня.Спецификация, Источник, Кэш);
				
				Пока ВозвратныйОтход.Следующий() Цикл
						
					ДобавитьВВозвратныеОтходы(ВозвратныйОтход, СтрокаТекущегоУровня, КоличествоВыпусков, КоэффициентОсновногоСырья, ДоляСтоимости, Параметры, Уровень, Результат, МассивОшибок);
						
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.МаксимальныйУровень = Макс(Результат.МаксимальныйУровень, Уровень);
		
	КонецЦикла;
	
	ВыполнитьОтбор(Результат, Параметры);
	
	Возврат МассивОшибок;
	
КонецФункции // РазузловатьНоменклатуру()

Функция ДобавитьВПолноеРазулование(СтрокаСпецификации, ИсходнаяСтрока, КоличествоВыпусков, КоэффициентОсновногоСырья, Параметры, Уровень, Результат, МассивОшибок, ПоследовательностьУзлов = Неопределено, Кэш)
	
	НоваяСтрока = Неопределено;
	
	Если СтрокаСпецификации.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Номенклатура Тогда
						
		НоваяСтрока = Результат.ПолноеРазузлование.Добавить();
							
		НоваяСтрока.Уровень = Уровень;
		НоваяСтрока.НомерОперацииМаршрута = СтрокаСпецификации.НомерОперацииМаршрута;
		НоваяСтрока.НоменклатурнаяГруппа = ИсходнаяСтрока.НоменклатурнаяГруппа;
		НоваяСтрока.Номенклатура = СтрокаСпецификации.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаСпецификации.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения = СтрокаСпецификации.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент = СтрокаСпецификации.Коэффициент;
		НоваяСтрока.Количество = СтрокаСпецификации.Количество;
			
		РассчитатьКоличествоПоФормуле(ИсходнаяСтрока, СтрокаСпецификации, НоваяСтрока, КоэффициентОсновногоСырья, Параметры.ПараметрыВыпуска, МассивОшибок);
		
		Если СтрокаСпецификации.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоОсновногоСырья Тогда
			
			НоваяСтрока.Количество = НоваяСтрока.Количество * КоэффициентОсновногоСырья;
			
		Иначе
			
			НоваяСтрока.Количество = НоваяСтрока.Количество * КоличествоВыпусков.Числитель / КоличествоВыпусков.Знаменатель;
			
		КонецЕсли;
						
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСпецификации, "МинимальнаяПартия, Кратность, СтатьяЗатрат, ВидВоспроизводства, Спецификация, СписаниеКомплектующей, ТочкаМаршрута, Подразделение, РабочийЦентр");
		УстановитьВидВоспроизводства(НоваяСтрока, Кэш);
		НоваяСтрока.Спецификация = ПолучитьСпецификацию(НоваяСтрока, Параметры, Кэш);
		УстановитьРазузлован(НоваяСтрока);
		
		Если НЕ ДобавитьСпецификациюВПоследовательность(НоваяСтрока.Спецификация, НоваяСтрока.Последовательность, ИсходнаяСтрока.Последовательность) Тогда
								
			НоваяСтрока.Разузлован = Истина;
			ДобавитьВОшибки(СтатусСообщения.ОченьВажное, НСтр("ru='Обнаружено зацикливание в структуре изделия.'"), НСтр("ru='Зацикливание'"), ИсходнаяСтрока.Спецификация, СтрокаСпецификации.НомерСтроки, НоваяСтрока.Последовательность, МассивОшибок);
								
		КонецЕсли;
		
		ОбновитьСопутствующиеИзделия(НоваяСтрока, ИсходнаяСтрока, Результат);
							
	ИначеЕсли СтрокаСпецификации.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Узел Тогда
		
		Если ДобавитьСпецификациюВПоследовательность(СтрокаСпецификации.Номенклатура, ПоследовательностьУзлов) Тогда
			
			// Перед обходом состава узла необходимо сохранить текущую последовательность узлов
			ПоследовательностьУзловТекущая = Неопределено;
			ДобавитьСпецификациюВПоследовательность(ПоследовательностьУзлов, ПоследовательностьУзловТекущая);
			
			ИсходноеКомплектующее = ПолучитьИсходныеКомплектующие(СтрокаСпецификации.Номенклатура, ИсходнаяСтрока, Новый Структура("НомерОперацииМаршрута", СтрокаСпецификации.НомерОперацииМаршрута), Кэш);
				
			Пока ИсходноеКомплектующее.Следующий() Цикл
				
				ПараметрыИсходногоКомплектующего = Новый Структура("Количество, Последовательность");
				ЗаполнитьЗначенияСвойств(ПараметрыИсходногоКомплектующего, СтрокаСпецификации);
				
				РассчитатьКоличествоПоФормуле(ИсходнаяСтрока, СтрокаСпецификации, ПараметрыИсходногоКомплектующего, КоэффициентОсновногоСырья, Параметры.ПараметрыВыпуска, МассивОшибок);
				
				КоличествоВыпусковУзла = УправлениеПланированием.ПолучитьДробь(ПараметрыИсходногоКомплектующего.Количество * КоличествоВыпусков.Числитель, КоличествоВыпусков.Знаменатель);
				
				Если Результат.Свойство("СопутствующиеИзделия") Тогда
					
					//Корректирка количества в соответствии с минимальной партией и кратностью потребления узла
					КоличествоВыпусковУзла.Значение = УправлениеПланированием.ПривестиКМинимальнойПартииКратности(КоличествоВыпусковУзла.Значение, СтрокаСпецификации.МинимальнаяПартия, СтрокаСпецификации.Кратность);
					КоличествоВыпусковУзла.Значение = УправлениеПланированием.ОкруглитьВБольшуюСторону(КоличествоВыпусковУзла.Значение, 3);
					КоличествоВыпусковУзла.Числитель = УправлениеПланированием.ОкруглитьВБольшуюСторону(КоличествоВыпусковУзла.Значение * КоличествоВыпусковУзла.Знаменатель, 3);
					
				КонецЕсли;
				
				ДобавленнаяСтрока = ДобавитьВПолноеРазулование(ИсходноеКомплектующее, ИсходнаяСтрока, КоличествоВыпусковУзла, КоэффициентОсновногоСырья, Параметры, Уровень, Результат, МассивОшибок, ПоследовательностьУзлов, Кэш);
				
				// По окончании рекурсивного обхода необходимо установить последовательность узлов в текущую
				ПоследовательностьУзлов = Неопределено;
				ДобавитьСпецификациюВПоследовательность(ПоследовательностьУзловТекущая, ПоследовательностьУзлов);
				
				Если ДобавленнаяСтрока <> Неопределено Тогда
					
					Если НЕ ДобавитьСпецификациюВПоследовательность(ПоследовательностьУзлов, ДобавленнаяСтрока.Последовательность, ИсходнаяСтрока.Последовательность) Тогда
											
						ДобавленнаяСтрока.Разузлован = Истина;
						ДобавитьВОшибки(СтатусСообщения.ОченьВажное, НСтр("ru='Обнаружено зацикливание в структуре изделия.'"), НСтр("ru='Зацикливание'"), ИсходнаяСтрока.Спецификация, СтрокаСпецификации.НомерСтроки, ИсходнаяСтрока.Последовательность, МассивОшибок);
											
					КонецЕсли;
					
				КонецЕсли;
									
			КонецЦикла;
										
		Иначе
		
			ДобавитьВОшибки(СтатусСообщения.ОченьВажное, НСтр("ru='Обнаружено зацикливание в структуре изделия.'"), НСтр("ru='Зацикливание'"), ИсходнаяСтрока.Спецификация, СтрокаСпецификации.НомерСтроки, ИсходнаяСтрока.Последовательность, МассивОшибок);
			
		КонецЕсли;
		
	ИначеЕсли СтрокаСпецификации.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры Тогда
						
		Если СтрокаСпецификации.ВариантАвтоподбора = Перечисления.ВариантыАвтоподбораНоменклатуры.ПолучитьИзСвойства Тогда
			
			НоваяСтрока = Результат.ПолноеРазузлование.Добавить();
			НоваяСтрока.Уровень = Уровень;
       		НоваяСтрока.НомерОперацииМаршрута = СтрокаСпецификации.НомерОперацииМаршрута;
			НоваяСтрока.НоменклатурнаяГруппа = ИсходнаяСтрока.НоменклатурнаяГруппа;

			Если НЕ АвтоподборНоменклатурыИзСвойства(ИсходнаяСтрока, СтрокаСпецификации, НоваяСтрока, МассивОшибок) Тогда
								
				Результат.ПолноеРазузлование.Удалить(НоваяСтрока);
				Возврат Неопределено;
								
			КонецЕсли;
							
			НоваяСтрока.Количество = СтрокаСпецификации.Количество;
			
			РассчитатьКоличествоПоФормуле(ИсходнаяСтрока, СтрокаСпецификации, НоваяСтрока, КоэффициентОсновногоСырья, Параметры.ПараметрыВыпуска, МассивОшибок);
			
			Если СтрокаСпецификации.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоОсновногоСырья Тогда
				
				НоваяСтрока.Количество = НоваяСтрока.Количество * КоэффициентОсновногоСырья;
				
			Иначе
				
				НоваяСтрока.Количество = НоваяСтрока.Количество * КоличествоВыпусков.Числитель / КоличествоВыпусков.Знаменатель;
				
			КонецЕсли;
							
		ИначеЕсли СтрокаСпецификации.ВариантАвтоподбора = Перечисления.ВариантыАвтоподбораНоменклатуры.УказываетсяДляСвойства Тогда
			
			НоваяСтрока = Результат.ПолноеРазузлование.Добавить();
			НоваяСтрока.Уровень = Уровень;
       		НоваяСтрока.НомерОперацииМаршрута = СтрокаСпецификации.НомерОперацииМаршрута;
			НоваяСтрока.НоменклатурнаяГруппа = ИсходнаяСтрока.НоменклатурнаяГруппа;
							
			Если НЕ АвтоподборНоменклатурыДляСвойства(ИсходнаяСтрока, СтрокаСпецификации, НоваяСтрока, МассивОшибок) Тогда
								
				Результат.ПолноеРазузлование.Удалить(НоваяСтрока);
				Возврат Неопределено;
								
			КонецЕсли;
			
			РассчитатьКоличествоПоФормуле(ИсходнаяСтрока, СтрокаСпецификации, НоваяСтрока, КоэффициентОсновногоСырья, Параметры.ПараметрыВыпуска, МассивОшибок);
			
			Если СтрокаСпецификации.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоОсновногоСырья Тогда
				
				НоваяСтрока.Количество = НоваяСтрока.Количество * КоэффициентОсновногоСырья;
				
			Иначе
				
				НоваяСтрока.Количество = НоваяСтрока.Количество * КоличествоВыпусков.Числитель / КоличествоВыпусков.Знаменатель;
				
			КонецЕсли;
							
		КонецЕсли;
						
		Если НоваяСтрока <> Неопределено Тогда
			
			АвтоподборХарактеристики(ИсходнаяСтрока, СтрокаСпецификации, НоваяСтрока, МассивОшибок);
							
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСпецификации, "МинимальнаяПартия, Кратность, СтатьяЗатрат, ВидВоспроизводства, Спецификация, СписаниеКомплектующей, ТочкаМаршрута, Подразделение, РабочийЦентр");
			УстановитьВидВоспроизводства(НоваяСтрока, Кэш);
			НоваяСтрока.Спецификация = ПолучитьСпецификацию(НоваяСтрока, Параметры, Кэш);
			УстановитьРазузлован(НоваяСтрока);
			
			Если НЕ ДобавитьСпецификациюВПоследовательность(НоваяСтрока.Спецификация, НоваяСтрока.Последовательность, ИсходнаяСтрока.Последовательность) Тогда
									
				НоваяСтрока.Разузлован = Истина;
				ДобавитьВОшибки(СтатусСообщения.ОченьВажное, НСтр("ru='Обнаружено зацикливание в структуре изделия.'"), НСтр("ru='Зацикливание'"), ИсходнаяСтрока.Спецификация, СтрокаСпецификации.НомерСтроки, НоваяСтрока.Последовательность, МассивОшибок);
									
			КонецЕсли;
			
			ОбновитьСопутствующиеИзделия(НоваяСтрока, ИсходнаяСтрока, Результат);
			
		КонецЕсли;
						
	ИначеЕсли СтрокаСпецификации.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборХарактеристики Тогда
						
		НоваяСтрока = Результат.ПолноеРазузлование.Добавить();
							
		НоваяСтрока.Уровень = Уровень;
   		НоваяСтрока.НомерОперацииМаршрута = СтрокаСпецификации.НомерОперацииМаршрута;
		НоваяСтрока.НоменклатурнаяГруппа = ИсходнаяСтрока.НоменклатурнаяГруппа;
		НоваяСтрока.Номенклатура = СтрокаСпецификации.Номенклатура;
						
		АвтоподборХарактеристики(ИсходнаяСтрока, СтрокаСпецификации, НоваяСтрока, МассивОшибок);
						
		НоваяСтрока.ЕдиницаИзмерения = СтрокаСпецификации.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент = СтрокаСпецификации.Коэффициент;
		НоваяСтрока.Количество = СтрокаСпецификации.Количество;
				
		РассчитатьКоличествоПоФормуле(ИсходнаяСтрока, СтрокаСпецификации, НоваяСтрока, КоэффициентОсновногоСырья, Параметры.ПараметрыВыпуска, МассивОшибок);
		
		Если СтрокаСпецификации.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоОсновногоСырья Тогда
			
			НоваяСтрока.Количество = НоваяСтрока.Количество * КоэффициентОсновногоСырья;
			
		Иначе
				
			НоваяСтрока.Количество = НоваяСтрока.Количество * КоличествоВыпусков.Числитель / КоличествоВыпусков.Знаменатель;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСпецификации, "МинимальнаяПартия, Кратность, СтатьяЗатрат, ВидВоспроизводства, Спецификация, СписаниеКомплектующей, ТочкаМаршрута, Подразделение, РабочийЦентр");
		УстановитьВидВоспроизводства(НоваяСтрока, Кэш);
		НоваяСтрока.Спецификация = ПолучитьСпецификацию(НоваяСтрока, Параметры, Кэш);
		УстановитьРазузлован(НоваяСтрока);
		
		Если НЕ ДобавитьСпецификациюВПоследовательность(НоваяСтрока.Спецификация, НоваяСтрока.Последовательность, ИсходнаяСтрока.Последовательность) Тогда
								
			НоваяСтрока.Разузлован = Истина;
			ДобавитьВОшибки(СтатусСообщения.ОченьВажное, НСтр("ru='Обнаружено зацикливание в структуре изделия.'"), НСтр("ru='Зацикливание'"), ИсходнаяСтрока.Спецификация, СтрокаСпецификации.НомерСтроки, НоваяСтрока.Последовательность, МассивОшибок);
								
		КонецЕсли;
		
		ОбновитьСопутствующиеИзделия(НоваяСтрока, ИсходнаяСтрока, Результат);
						
	КонецЕсли;
	
	Если НоваяСтрока <> Неопределено И Результат.Свойство("СопутствующиеИзделия") Тогда
		
		НоваяСтрока.КоличествоОкругленное = НоваяСтрока.Количество;
		
	КонецЕсли;
	
	ДобавитьВИсходныеКомплектующие(Результат, НоваяСтрока, Параметры);
	
	Если НоваяСтрока <> Неопределено И СтрокаСпецификации.ОсновноеСырье Тогда
		
		КоэффициентОсновногоСырья = НоваяСтрока.Количество / ?(СтрокаСпецификации.Количество = 0, 1, СтрокаСпецификации.Количество);
		
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции // ДобавитьВПолноеРазулование()

Процедура ДобавитьВВыходныеИзделия(Результат, ВыходныеИзделия, Параметры)
	
	Если НЕ Результат.Свойство("ВыходныеИзделия") Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Если ТипЗнч(ВыходныеИзделия) = Тип("Массив") Тогда
		
		Для каждого ВыходноеИзделие из ВыходныеИзделия Цикл
			
			НоваяСтрока = Результат.ВыходныеИзделия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыходноеИзделие);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ВыходныеИзделия) = Тип("ТаблицаЗначений") Тогда
		
		УправлениеПланированием.ДополнитьТаблицу(Результат.ВыходныеИзделия, ВыходныеИзделия);
		
	ИначеЕсли  ТипЗнч(ВыходныеИзделия) = Тип("СтрокаТаблицыЗначений") Тогда
		
		НоваяСтрока = Результат.ВыходныеИзделия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыходныеИзделия);
		
	КонецЕсли;
		
КонецПроцедуры // ДобавитьВВыходныеИзделия()

Процедура ДобавитьВИсходныеКомплектующие(Результат, ИсходныеКомплектующие, Параметры)
	
	Если НЕ Результат.Свойство("ИсходныеКомплектующие") Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Если ТипЗнч(ИсходныеКомплектующие) = Тип("Массив") Тогда
		
		Для каждого ИсходноеКомплектующее из ИсходныеКомплектующие Цикл
			
			НоваяСтрока = Результат.ИсходныеКомплектующие.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходноеКомплектующее);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ИсходныеКомплектующие) = Тип("ТаблицаЗначений") Тогда
		
		УправлениеПланированием.ДополнитьТаблицу(Результат.ИсходныеКомплектующие, ИсходныеКомплектующие);
		
	ИначеЕсли  ТипЗнч(ИсходныеКомплектующие) = Тип("СтрокаТаблицыЗначений") Тогда
		
		НоваяСтрока = Результат.ИсходныеКомплектующие.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходныеКомплектующие);
		
	КонецЕсли;
		
КонецПроцедуры // ДобавитьВИсходныеКомплектующие()

Процедура ДобавитьВВозвратныеОтходы(ВозвратныйОтход, ИсходнаяСтрока, КоличествоВыпусков, КоэффициентОсновногоСырья, ДоляСтоимости, Параметры, Уровень, Результат, МассивОшибок)
	
	Если НЕ Результат.Свойство("ВозвратныеОтходы") Тогда
		
		Возврат;
			
	КонецЕсли;
		
	Если ВозвратныйОтход.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Номенклатура Тогда
						
		НоваяСтрока = Результат.ВозвратныеОтходы.Добавить();
							
		НоваяСтрока.Уровень = Уровень;
		НоваяСтрока.НомерОперацииМаршрута = ВозвратныйОтход.НомерОперацииМаршрута;
		НоваяСтрока.НоменклатурнаяГруппа = ИсходнаяСтрока.НоменклатурнаяГруппа;
		НоваяСтрока.Номенклатура = ВозвратныйОтход.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = ВозвратныйОтход.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения = ВозвратныйОтход.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент = ВозвратныйОтход.Коэффициент;
		НоваяСтрока.Количество = ВозвратныйОтход.Количество;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВозвратныйОтход, "СтатьяЗатрат, СписаниеКомплектующей, ТочкаМаршрута, Подразделение, РабочийЦентр");
		
		РассчитатьКоличествоПоФормуле(ИсходнаяСтрока, ВозвратныйОтход, НоваяСтрока, КоэффициентОсновногоСырья, Параметры.ПараметрыВыпуска, МассивОшибок);
		
		Если ВозвратныйОтход.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоОсновногоСырья Тогда
			
			НоваяСтрока.Количество = НоваяСтрока.Количество * КоэффициентОсновногоСырья;
			
		Иначе
				
			НоваяСтрока.Количество = НоваяСтрока.Количество * КоличествоВыпусков.Числитель / КоличествоВыпусков.Знаменатель;
			
		КонецЕсли;
		
		НоваяСтрока.Сумма = ВозвратныйОтход.Сумма * НоваяСтрока.Количество / ?(ВозвратныйОтход.Количество = 0, 1, ВозвратныйОтход.Количество);
		НоваяСтрока.СуммаРегл = ВозвратныйОтход.СуммаРегл * НоваяСтрока.Количество / ?(ВозвратныйОтход.Количество = 0, 1, ВозвратныйОтход.Количество);
		
	ИначеЕсли ВозвратныйОтход.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры Тогда
						
		НоваяСтрока = Результат.ВозвратныеОтходы.Добавить();
							
		НоваяСтрока.Уровень = Уровень;
		НоваяСтрока.НомерОперацииМаршрута = ВозвратныйОтход.НомерОперацииМаршрута;
		НоваяСтрока.НоменклатурнаяГруппа = ИсходнаяСтрока.НоменклатурнаяГруппа;
						
		Если ВозвратныйОтход.ВариантАвтоподбора = Перечисления.ВариантыАвтоподбораНоменклатуры.ПолучитьИзСвойства Тогда

			Если НЕ АвтоподборНоменклатурыИзСвойства(ИсходнаяСтрока, ВозвратныйОтход, НоваяСтрока, МассивОшибок) Тогда
								
				Результат.ВозвратныеОтходы.Удалить(НоваяСтрока);
				Возврат;
								
			КонецЕсли;
							
			НоваяСтрока.Количество = ВозвратныйОтход.Количество;
							
			РассчитатьКоличествоПоФормуле(ИсходнаяСтрока, ВозвратныйОтход, НоваяСтрока, КоэффициентОсновногоСырья, Параметры.ПараметрыВыпуска, МассивОшибок);
			
			Если ВозвратныйОтход.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоОсновногоСырья Тогда
				
				НоваяСтрока.Количество = НоваяСтрока.Количество * КоэффициентОсновногоСырья;
				
			Иначе
					
				НоваяСтрока.Количество = НоваяСтрока.Количество * КоличествоВыпусков.Числитель / КоличествоВыпусков.Знаменатель;
					
			КонецЕсли;
							
		ИначеЕсли ВозвратныйОтход.ВариантАвтоподбора = Перечисления.ВариантыАвтоподбораНоменклатуры.УказываетсяДляСвойства Тогда
							
			Если НЕ АвтоподборНоменклатурыДляСвойства(ИсходнаяСтрока, ВозвратныйОтход, НоваяСтрока, МассивОшибок, Истина) Тогда
								
				Результат.ВозвратныеОтходы.Удалить(НоваяСтрока);
				Возврат;
								
			КонецЕсли;
			
			РассчитатьКоличествоПоФормуле(ИсходнаяСтрока, ВозвратныйОтход, НоваяСтрока, КоэффициентОсновногоСырья, Параметры.ПараметрыВыпуска, МассивОшибок);
			
			Если ВозвратныйОтход.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоОсновногоСырья Тогда
				
				НоваяСтрока.Количество = НоваяСтрока.Количество * КоэффициентОсновногоСырья;
				
			Иначе
					
				НоваяСтрока.Количество = НоваяСтрока.Количество * КоличествоВыпусков.Числитель / КоличествоВыпусков.Знаменатель;
				
			КонецЕсли;
							
		КонецЕсли;
						
		АвтоподборХарактеристики(ИсходнаяСтрока, ВозвратныйОтход, НоваяСтрока, МассивОшибок, Истина);
						
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВозвратныйОтход, "СтатьяЗатрат, СписаниеКомплектующей, ТочкаМаршрута, Подразделение, РабочийЦентр");
		
		НоваяСтрока.Сумма = ВозвратныйОтход.Сумма * НоваяСтрока.Количество / ?(ВозвратныйОтход.Количество = 0, 1, ВозвратныйОтход.Количество);
		НоваяСтрока.СуммаРегл = ВозвратныйОтход.СуммаРегл * НоваяСтрока.Количество / ?(ВозвратныйОтход.Количество = 0, 1, ВозвратныйОтход.Количество);
						
	ИначеЕсли ВозвратныйОтход.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборХарактеристики Тогда
						
		НоваяСтрока = Результат.ВозвратныеОтходы.Добавить();
							
		НоваяСтрока.Уровень = Уровень;
		НоваяСтрока.НомерОперацииМаршрута = ВозвратныйОтход.НомерОперацииМаршрута;
		НоваяСтрока.НоменклатурнаяГруппа = ИсходнаяСтрока.НоменклатурнаяГруппа;
		НоваяСтрока.Номенклатура = ВозвратныйОтход.Номенклатура;
						
		АвтоподборХарактеристики(ИсходнаяСтрока, ВозвратныйОтход, НоваяСтрока, МассивОшибок, Истина);
						
		НоваяСтрока.ЕдиницаИзмерения = ВозвратныйОтход.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент = ВозвратныйОтход.Коэффициент;
		НоваяСтрока.Количество = ВозвратныйОтход.Количество;
						
		РассчитатьКоличествоПоФормуле(ИсходнаяСтрока, ВозвратныйОтход, НоваяСтрока, КоэффициентОсновногоСырья, Параметры.ПараметрыВыпуска, МассивОшибок);
		
		Если ВозвратныйОтход.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоОсновногоСырья Тогда
			
			НоваяСтрока.Количество = НоваяСтрока.Количество * КоэффициентОсновногоСырья;
			
		Иначе
					
			НоваяСтрока.Количество = НоваяСтрока.Количество * КоличествоВыпусков.Числитель / КоличествоВыпусков.Знаменатель;
			
		КонецЕсли;
						
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВозвратныйОтход, "СтатьяЗатрат, СписаниеКомплектующей, ТочкаМаршрута, Подразделение, РабочийЦентр");
		
		НоваяСтрока.Сумма = ВозвратныйОтход.Сумма * НоваяСтрока.Количество / ?(ВозвратныйОтход.Количество = 0, 1, ВозвратныйОтход.Количество);
		НоваяСтрока.СуммаРегл = ВозвратныйОтход.СуммаРегл * НоваяСтрока.Количество / ?(ВозвратныйОтход.Количество = 0, 1, ВозвратныйОтход.Количество);
						
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВВозвратныеОтходы()

Процедура ДобавитьВСопутствующиеИзделия(Источник, Результат)
	
	Если НЕ Результат.Свойство("СопутствующиеИзделия") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Получение выходных изделия по спецификации
	ВыходныеИзделия = ПолучитьВыходныеИзделия(Источник);
	
	Пока ВыходныеИзделия.Следующий() Цикл
		
		// Все строки выходных изделий переносятся в таблицу сопутствующих изделий, т.к. каждое выходное изделие может оказаться сопутствующим
		НоваяСтрока = Результат.СопутствующиеИзделия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыходныеИзделия);
		
		// Отдельно сохраняется исходное количество сопутствующих изделий для последующих расчетов
		НоваяСтрока.ИсходноеКоличество = ?(Результат.КоличествоВыпусков.Знаменатель = 0, 0, НоваяСтрока.Количество * Результат.КоличествоВыпусков.Числитель / Результат.КоличествоВыпусков.Знаменатель);
		
		// Начальное значение коэффициента приведения, означает что коэффициент еще не рассчитывался
		НоваяСтрока.КоэффициентПриведения = - 1;
		
		НоваяСтрока.Спецификация = Источник.Спецификация;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьВСопутствующиеИзделия()

Процедура ОбновитьСопутствующиеИзделия(НоваяСтрока, ИсходнаяСтрока, Результат)
	
	Если НЕ Результат.Свойство("СопутствующиеИзделия") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Расчет количества комплектующей в соответствии с кратностью и минимальной партией ее потребления
	ПриведенноеКоличество = УправлениеПланированием.ПривестиКМинимальнойПартииКратности(НоваяСтрока.Количество, НоваяСтрока.МинимальнаяПартия, НоваяСтрока.Кратность);
	
	Если НоваяСтрока.Количество = 0 Тогда
		
		КоэффициентПриведения = 0;
		
	Иначе
		
		// Коэффициент приведения показывает, во сколько раз увеличилось потребление после корректировки
		Если ПриведенноеКоличество = НоваяСтрока.Количество Тогда
			
			// Если приведения количества не было, необходимо округлить до 3 знаков количество комплектующей
			// Округление в большую сторону, т.к. уменьшать количество комплектующей нельзя
			ПриведенноеКоличество = УправлениеПланированием.ОкруглитьВБольшуюСторону(ПриведенноеКоличество, 3);
			
			// При округлении образetncz сопутствующий выпуск основной номенклатуры
			КоэффициентПриведения = 1;
			
		Иначе
			
		    КоэффициентПриведения = ПриведенноеКоличество / НоваяСтрока.Количество;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Поиск сопутствующих изделия данной спецификации
	СтрокиСопутствующихИзделий = Результат.СопутствующиеИзделия.НайтиСтроки(Новый Структура("Спецификация", ИсходнаяСтрока.Спецификация));
	
	Для Каждого СтрокаСопутствующихИзделий Из СтрокиСопутствующихИзделий Цикл
		
		// Если коэффициент приведения текущей строки = 0, значит сопутствующего выпуска не будет - корректировка не нужна
		Если СтрокаСопутствующихИзделий.КоэффициентПриведения <> 0 Тогда
			
			// Расчет коэффициента приведения каждого сопутствующего изделия
			СтрокаСопутствующихИзделий.КоэффициентПриведения = ?(СтрокаСопутствующихИзделий.КоэффициентПриведения = -1, КоэффициентПриведения, Мин(КоэффициентПриведения, СтрокаСопутствующихИзделий.КоэффициентПриведения));
				
			// Для основной номенклатуры действует доп.условие - необходимо вычитать исходное количество, т.к. оно уже содержится в таблице продукции при вызове разузлования
			СтрокаСопутствующихИзделий.Количество = СтрокаСопутствующихИзделий.ИсходноеКоличество * СтрокаСопутствующихИзделий.КоэффициентПриведения - ?(СтрокаСопутствующихИзделий.СопутствующееИзделие,0, СтрокаСопутствующихИзделий.ИсходноеКоличество);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Корректировка количества комплектующей
	НоваяСтрока.Количество = ?(НоваяСтрока.Количество = 0, 0, ПриведенноеКоличество);
	
КонецПроцедуры // ОбновитьСопутствующиеИзделия()

Функция РазместитьВСопутствующихИзделиях(Источник, Параметры, Результат)
	
	НеразмещенноеКоличество = Источник.Количество;
	
	Если НЕ Параметры.РазмещатьВСопутствующихИзделиях ИЛИ Результат.СопутствующиеИзделия.Количество() = 0 ИЛИ Источник.Количество <= 0 Тогда
		
		Возврат НеразмещенноеКоличество;
		
	КонецЕсли;
	
	СтрокиСопутствующихИзделий = Результат.СопутствующиеИзделия.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Источник.Номенклатура, Источник.ХарактеристикаНоменклатуры));
	
	Для каждого СтрокаСопутствующегоИзделия из СтрокиСопутствующихИзделий Цикл
		
		Если СтрокаСопутствующегоИзделия.Количество > 0 Тогда
			
			// Пересчет количества сопутствующего изделия в единицу источника
			КоличествоСопутствующегоИзделия = Источник.Коэффициент * (СтрокаСопутствующегоИзделия.Количество / СтрокаСопутствующегоИзделия.Коэффициент);
			
			//Расчет количества к размещению в данной строке сопутствующего изделия
			КоличествоКРазмещению = Мин(КоличествоСопутствующегоИзделия, Источник.Количество);
			
			//Корректировка количества источника
			НеразмещенноеКоличество = НеразмещенноеКоличество - КоличествоКРазмещению;
			
			// Пересчет количества к размещению в единицу сопутствующего изделия
			КоличествоКРазмещениюСопутствующегоИзделия = СтрокаСопутствующегоИзделия.Коэффициент * (КоличествоКРазмещению / Источник.Коэффициент);
			
			//Корректировка сопутствующего изделия
			СтрокаСопутствующегоИзделия.Количество = СтрокаСопутствующегоИзделия.Количество - КоличествоКРазмещениюСопутствующегоИзделия;
			
			Если НеразмещенноеКоличество = 0 Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат НеразмещенноеКоличество;
	
КонецФункции //РазместитьВСопутствующихИзделиях

Функция ПолучитьВыходныеИзделия(Источник)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыходныеИзделия.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ОсновноеИзделие
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВыходныеИзделияСХарактеристикой.НомерСтроки КАК НомерСтроки,
	|		1 КАК Приоритет
	|	ИЗ
	|		Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК ВыходныеИзделияСХарактеристикой
	|	ГДЕ
	|		ВыходныеИзделияСХарактеристикой.Ссылка = &Спецификация
	|		И ВыходныеИзделияСХарактеристикой.Номенклатура = &Номенклатура
	|		И ВыходныеИзделияСХарактеристикой.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВыходныеИзделияБезХарактеристики.НомерСтроки,
	|		2
	|	ИЗ
	|		Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК ВыходныеИзделияБезХарактеристики
	|	ГДЕ
	|		ВыходныеИзделияБезХарактеристики.Ссылка = &Спецификация
	|		И ВыходныеИзделияБезХарактеристики.Номенклатура = &Номенклатура
	|		И ВыходныеИзделияБезХарактеристики.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ВыходныеИзделия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыходныеИзделия.Приоритет,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпецификацииНоменклатурыВыходныеИзделия.Ссылка КАК Ссылка,
	|	СпецификацииНоменклатурыВыходныеИзделия.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА &Номенклатура = НЕОПРЕДЕЛЕНО
	|				И &ХарактеристикаНоменклатуры = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВЫБОР
	|					КОГДА СпецификацииНоменклатурыВыходныеИзделия.НомерСтроки = 1
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ОсновноеИзделие.НомерСтроки ЕСТЬ NULL 
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК СопутствующееИзделие,
	|	СпецификацииНоменклатурыВыходныеИзделия.НомерОперацииМаршрута КАК НомерОперацииМаршрута,
	|	СпецификацииНоменклатурыВыходныеИзделия.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СпецификацииНоменклатурыВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ОсновноеИзделие.НомерСтроки ЕСТЬ НЕ NULL 
	|				И &ХарактеристикаНоменклатуры <> НЕОПРЕДЕЛЕНО
	|			ТОГДА &ХарактеристикаНоменклатуры
	|		ИНАЧЕ СпецификацииНоменклатурыВыходныеИзделия.ХарактеристикаНоменклатуры
	|	КОНЕЦ КАК ХарактеристикаНоменклатуры,
	|	СпецификацииНоменклатурыВыходныеИзделия.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА СпецификацииНоменклатурыВыходныеИзделия.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА СпецификацииНоменклатурыВыходныеИзделия.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ СпецификацииНоменклатурыВыходныеИзделия.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	(ВЫБОР
	|		КОГДА СпецификацииНоменклатурыВыходныеИзделия.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА СпецификацииНоменклатурыВыходныеИзделия.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ СпецификацииНоменклатурыВыходныеИзделия.ЕдиницаИзмерения
	|	КОНЕЦ).Коэффициент КАК Коэффициент,
	|	СпецификацииНоменклатурыВыходныеИзделия.МинимальнаяПартия КАК МинимальнаяПартия,
	|	СпецификацииНоменклатурыВыходныеИзделия.Кратность КАК Кратность,
	|	СпецификацииНоменклатурыВыходныеИзделия.ДоляСтоимости КАК ДоляСтоимости,
	|	СпецификацииНоменклатурыВыходныеИзделия.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ЕСТЬNULL(СпецификацииНоменклатурыВыходныеИзделия.ТочкаМаршрута.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(СпецификацииНоменклатурыВыходныеИзделия.ТочкаМаршрута.РабочийЦентр, НЕОПРЕДЕЛЕНО) КАК РабочийЦентр
	|ИЗ
	|	Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК СпецификацииНоменклатурыВыходныеИзделия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОсновноеИзделие КАК ОсновноеИзделие
	|		ПО СпецификацииНоменклатурыВыходныеИзделия.НомерСтроки = ОсновноеИзделие.НомерСтроки
	|ГДЕ
	|	СпецификацииНоменклатурыВыходныеИзделия.Ссылка = &Спецификация");
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
		
		Запрос.УстановитьПараметр("Спецификация", Источник);
		Запрос.УстановитьПараметр("Номенклатура", Неопределено);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Неопределено);
		
	Иначе
		
		Запрос.УстановитьПараметр("Спецификация", Источник.Спецификация);
		Запрос.УстановитьПараметр("Номенклатура", Источник.Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ?(ЗначениеЗаполнено(Источник.ХарактеристикаНоменклатуры), Источник.ХарактеристикаНоменклатуры, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()));
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыходныеИзделия()

Функция ПолучитьИсходныеКомплектующие(Спецификация, Источник, НаследуемыеСвойства = Неопределено, Кэш = Неопределено)
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Если Источник.Свойство("ХарактеристикаНоменклатуры") Тогда
			
			ХарактеристикаНоменклатуры = Источник.ХарактеристикаНоменклатуры;
			
		Иначе
			
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			
		КонецЕсли;
		
	Иначе
		
		ХарактеристикаНоменклатуры = Источник.ХарактеристикаНоменклатуры;
		
	КонецЕсли;
	
	Если ТипЗнч(НаследуемыеСвойства) = Тип("Структура") Тогда
		
		Если НаследуемыеСвойства.Свойство("НомерОперацииМаршрута") Тогда
			
			НомерОперацииМаршрута = НаследуемыеСвойства.НомерОперацииМаршрута;
			
		Иначе
			
			НомерОперацииМаршрута = NULL;
			
		КонецЕсли;
		
	Иначе
			
		НомерОперацииМаршрута = NULL;
	
	КонецЕсли;
	
	ИспользоватьКэш = (Кэш <> Неопределено);
	
	Если ИспользоватьКэш Тогда
		
		ИсходныеКомплектующие = Кэш.ИсходныеКомплектующие.НайтиСтроки(Новый Структура("Спецификация, ХарактеристикаНоменклатуры, НомерОперацииМаршрута", Спецификация, ХарактеристикаНоменклатуры, НомерОперацииМаршрута));
		
		Если ИсходныеКомплектующие.Количество() > 0 Тогда
			
			Возврат ИсходныеКомплектующие[0].РезультатЗапроса.Выбрать();
			
		КонецЕсли;
		
	КонецЕсли;
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсходныеКомплектующие.Ссылка КАК Ссылка,
	|	ИсходныеКомплектующие.НомерСтроки КАК НомерСтроки,
	|	ИсходныеКомплектующие.ВидНорматива КАК ВидНорматива,
	|	ЕСТЬNULL(&НомерОперацииМаршрута, ИсходныеКомплектующие.НомерОперацииМаршрута) КАК НомерОперацииМаршрута,
	|	ИсходныеКомплектующие.Номенклатура КАК Номенклатура,
	|	ИсходныеКомплектующие.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ИсходныеКомплектующие.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ИсходныеКомплектующие.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ИсходныеКомплектующие.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ ИсходныеКомплектующие.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	(ВЫБОР
	|		КОГДА ИсходныеКомплектующие.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ИсходныеКомплектующие.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ ИсходныеКомплектующие.ЕдиницаИзмерения
	|	КОНЕЦ).Коэффициент КАК Коэффициент,
	|	ИсходныеКомплектующие.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ИсходныеКомплектующие.МинимальнаяПартия КАК МинимальнаяПартия,
	|	ИсходныеКомплектующие.Кратность КАК Кратность,
	|	ИсходныеКомплектующие.ПозицияПоСпецификации КАК ПозицияПоСпецификации,
	|	ВЫБОР
	|		КОГДА ИсходныеКомплектующие.Ссылка.ИспользоватьВидВоспроизводства = ИСТИНА
	|			ТОГДА ИсходныеКомплектующие.ВидВоспроизводства
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидВоспроизводства,
	|	ВЫБОР
	|		КОГДА ИсходныеКомплектующие.Ссылка.ИспользоватьВидВоспроизводства = ИСТИНА
	|			ТОГДА ИсходныеКомплектующие.Спецификация
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Спецификация,
	|	ВЫБОР
	|		КОГДА ИсходныеКомплектующие.Ссылка.ИспользоватьУправлениеСписанием = ИСТИНА
	|			ТОГДА ВЫБОР
	|					КОГДА ИсходныеКомплектующие.СписаниеКомплектующей = ЗНАЧЕНИЕ(Перечисление.ВариантыСписанияКомплектующих.ЗадаетсяВСвойстве)
	|							ИЛИ ИсходныеКомплектующие.СписаниеКомплектующей = ЗНАЧЕНИЕ(Перечисление.ВариантыСписанияКомплектующих.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыСписанияКомплектующих.Всегда)
	|					ИНАЧЕ ИсходныеКомплектующие.СписаниеКомплектующей
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыСписанияКомплектующих.Всегда)
	|	КОНЕЦ КАК СписаниеКомплектующей,
	|	ИсходныеКомплектующие.СвойствоДляСписания КАК СвойствоДляСписания,
	|	ВЫБОР
	|		КОГДА ИсходныеКомплектующие.Ссылка.ИспользоватьФормулы = ИСТИНА
	|			ТОГДА ИсходныеКомплектующие.Формула
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Формула,
	|	ВЫБОР
	|		КОГДА ИсходныеКомплектующие.Ссылка.ИспользоватьУказаниеНорматива = ИСТИНА
	|			ТОГДА ИсходныеКомплектующие.УказаниеНорматива
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК УказаниеНорматива,
	|	ИсходныеКомплектующие.ОсновноеСырье КАК ОсновноеСырье,
	|	ИсходныеКомплектующие.ВариантАвтоподбора КАК ВариантАвтоподбора,
	|	ИсходныеКомплектующие.Свойство КАК Свойство,
	|	ИсходныеКомплектующие.КлючСвязи КАК КлючСвязи,
	|	ИсходныеКомплектующие.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ЕСТЬNULL(ИсходныеКомплектующие.ТочкаМаршрута.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(ИсходныеКомплектующие.ТочкаМаршрута.РабочийЦентр, НЕОПРЕДЕЛЕНО) КАК РабочийЦентр
	|ИЗ
	|	Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК ИсходныеКомплектующие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Объект = &ХарактеристикаНоменклатуры)
	|			И (ЗначенияСвойствОбъектов.Свойство = ИсходныеКомплектующие.СвойствоДляСписания)
	|ГДЕ
	|	ИсходныеКомплектующие.Ссылка = &Спецификация
	|	И (ИсходныеКомплектующие.Ссылка.ИспользоватьУправлениеСписанием = ЛОЖЬ
	|			ИЛИ ИсходныеКомплектующие.Ссылка.ИспользоватьУправлениеСписанием = ИСТИНА
	|				И ИсходныеКомплектующие.СписаниеКомплектующей <> ЗНАЧЕНИЕ(Перечисление.ВариантыСписанияКомплектующих.ЗадаетсяВСвойстве)
	|			ИЛИ ИсходныеКомплектующие.Ссылка.ИспользоватьУправлениеСписанием = ИСТИНА
	|				И ИсходныеКомплектующие.СписаниеКомплектующей = ЗНАЧЕНИЕ(Перечисление.ВариантыСписанияКомплектующих.ЗадаетсяВСвойстве)
	|				И ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЛОЖЬ) = ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСырье УБЫВ");
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("НомерОперацииМаршрута", НомерОперацииМаршрута);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ИспользоватьКэш Тогда

		НоваяСтрокаКэша = Кэш.ИсходныеКомплектующие.Добавить();
		
		НоваяСтрокаКэша.Спецификация = Спецификация;
		НоваяСтрокаКэша.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		НоваяСтрокаКэша.НомерОперацииМаршрута = НомерОперацииМаршрута;
		НоваяСтрокаКэша.РезультатЗапроса = РезультатЗапроса;
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции // ПолучитьИсходныеКомплектующие()

Функция ПолучитьВозвратныеОтходы(Спецификация, Источник, Кэш = Неопределено)
	
	Если Источник.Свойство("ХарактеристикаНоменклатуры") Тогда
		
		ХарактеристикаНоменклатуры = Источник.ХарактеристикаНоменклатуры;
		
	Иначе
		
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
	КонецЕсли;
	
	ИспользоватьКэш = (Кэш <> Неопределено);
	
	Если ИспользоватьКэш Тогда
		
		ВозвратныеОтходы = Кэш.ВозвратныеОтходы.НайтиСтроки(Новый Структура("Спецификация, ХарактеристикаНоменклатуры", Спецификация, ХарактеристикаНоменклатуры));
		
		Если ВозвратныеОтходы.Количество() > 0 Тогда
			
			Возврат ВозвратныеОтходы[0].РезультатЗапроса.Выбрать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратныеОтходы.Ссылка КАК Ссылка,
	|	ВозвратныеОтходы.НомерСтроки КАК НомерСтроки,
	|	ВозвратныеОтходы.ВидНорматива КАК ВидНорматива,
	|	ВозвратныеОтходы.НомерОперацииМаршрута КАК НомерОперацииМаршрута,
	|	ВозвратныеОтходы.Номенклатура КАК Номенклатура,
	|	ВозвратныеОтходы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВозвратныеОтходы.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ВозвратныеОтходы.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВозвратныеОтходы.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ ВозвратныеОтходы.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	(ВЫБОР
	|		КОГДА ВозвратныеОтходы.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВозвратныеОтходы.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ ВозвратныеОтходы.ЕдиницаИзмерения
	|	КОНЕЦ).Коэффициент КАК Коэффициент,
	|	ВозвратныеОтходы.Сумма КАК Сумма,
	|	ВозвратныеОтходы.СуммаРегл КАК СуммаРегл,
	|	ВозвратныеОтходы.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА ВозвратныеОтходы.Ссылка.ИспользоватьУправлениеСписанием = ИСТИНА
	|			ТОГДА ВЫБОР
	|					КОГДА ВозвратныеОтходы.СписаниеКомплектующей = ЗНАЧЕНИЕ(Перечисление.ВариантыСписанияКомплектующих.ЗадаетсяВСвойстве)
	|							ИЛИ ВозвратныеОтходы.СписаниеКомплектующей = ЗНАЧЕНИЕ(Перечисление.ВариантыСписанияКомплектующих.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыСписанияКомплектующих.Всегда)
	|					ИНАЧЕ ВозвратныеОтходы.СписаниеКомплектующей
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыСписанияКомплектующих.Всегда)
	|	КОНЕЦ КАК СписаниеКомплектующей,
	|	ВозвратныеОтходы.СвойствоДляСписания КАК СвойствоДляСписания,
	|	ВЫБОР
	|		КОГДА ВозвратныеОтходы.Ссылка.ИспользоватьФормулы = ИСТИНА
	|			ТОГДА ВозвратныеОтходы.Формула
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Формула,
	|	ВЫБОР
	|		КОГДА ВозвратныеОтходы.Ссылка.ИспользоватьУказаниеНорматива = ИСТИНА
	|			ТОГДА ВозвратныеОтходы.УказаниеНорматива
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК УказаниеНорматива,
	|	ВозвратныеОтходы.ВариантАвтоподбора КАК ВариантАвтоподбора,
	|	ВозвратныеОтходы.Свойство КАК Свойство,
	|	ВозвратныеОтходы.КлючСвязи КАК КлючСвязи,
	|	ВозвратныеОтходы.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ЕСТЬNULL(ВозвратныеОтходы.ТочкаМаршрута.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(ВозвратныеОтходы.ТочкаМаршрута.РабочийЦентр, НЕОПРЕДЕЛЕНО) КАК РабочийЦентр
	|ИЗ
	|	Справочник.СпецификацииНоменклатуры.ВозвратныеОтходы КАК ВозвратныеОтходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Объект = &ХарактеристикаНоменклатуры)
	|			И (ЗначенияСвойствОбъектов.Свойство = ВозвратныеОтходы.СвойствоДляСписания)
	|ГДЕ
	|	ВозвратныеОтходы.Ссылка = &Спецификация
	|	И ВозвратныеОтходы.Ссылка.ИспользоватьВозвратныеОтходы = ИСТИНА
	|	И (ВозвратныеОтходы.Ссылка.ИспользоватьУправлениеСписанием = ЛОЖЬ
	|			ИЛИ ВозвратныеОтходы.Ссылка.ИспользоватьУправлениеСписанием = ИСТИНА
	|				И ВозвратныеОтходы.СписаниеКомплектующей <> ЗНАЧЕНИЕ(Перечисление.ВариантыСписанияКомплектующих.ЗадаетсяВСвойстве)
	|			ИЛИ ВозвратныеОтходы.Ссылка.ИспользоватьУправлениеСписанием = ИСТИНА
	|				И ВозвратныеОтходы.СписаниеКомплектующей = ЗНАЧЕНИЕ(Перечисление.ВариантыСписанияКомплектующих.ЗадаетсяВСвойстве)
	|				И ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЛОЖЬ) = ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ИспользоватьКэш Тогда

		НоваяСтрокаКэша = Кэш.ВозвратныеОтходы.Добавить();
		
		НоваяСтрокаКэша.Спецификация = Спецификация;
		НоваяСтрокаКэша.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		НоваяСтрокаКэша.РезультатЗапроса = РезультатЗапроса;
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции // ПолучитьВозвратныеОтходы()

Функция АвтоподборНоменклатурыИзСвойства(ИсходнаяСтрока, СтрокаСпецификации, НоваяСтрока, МассивОшибок)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗначенияСвойствОбъектов.Значение КАК Номенклатура,
	|	ЗначенияСвойствОбъектов.Значение.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ЗначенияСвойствОбъектов.Значение.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = &Свойство
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура");
		
	Запрос.УстановитьПараметр("Объект", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Свойство", СтрокаСпецификации.Свойство);
		
	РезультатЗапроса = Запрос.Выполнить();
		
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
			
		Если ТипЗнч(Выборка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				
			НоваяСтрока.Номенклатура = Выборка.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = Выборка.Коэффициент;
			Возврат Истина;
				
		Иначе
				
			ДобавитьВОшибки(СтатусСообщения.Важное, НСтр("ru='Не выполнен автоподбор номенклатуры из свойства: '") + СокрЛП(СтрокаСпецификации.Свойство.Наименование), НСтр("ru='Несоответствие типов. Полученный тип: '") + ТипЗнч(Выборка.Номенклатура) + НСтр("ru=' Требуемый тип: '") + Тип("СправочникСсылка.Номенклатура"), ИсходнаяСтрока.Спецификация, СтрокаСпецификации.НомерСтроки, НоваяСтрока.Последовательность, МассивОшибок);
			Возврат Ложь;
				
		КонецЕсли;
			
	Иначе
			
		ДобавитьВОшибки(СтатусСообщения.Важное, НСтр("ru='Не выполнен автоподбор номенклатуры из свойства: '") + СокрЛП(СтрокаСпецификации.Свойство.Наименование), НСтр("ru='Не задано значение свойства'"), ИсходнаяСтрока.Спецификация, СтрокаСпецификации.НомерСтроки, НоваяСтрока.Последовательность, МассивОшибок);
		Возврат Ложь;
			
	КонецЕсли;
		
КонецФункции // АвтоподборНоменклатурыИзСвойства()

Функция АвтоподборНоменклатурыДляСвойства(ИсходнаяСтрока, СтрокаСпецификации, НоваяСтрока, МассивОшибок, ВозвратныйОтход = Ложь)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СпецификацииНоменклатурыАвтоподборНоменклатуры.НомерСтроки КАК НомерСтроки,
	|	СпецификацииНоменклатурыАвтоподборНоменклатуры.Номенклатура КАК Номенклатура,
	|	СпецификацииНоменклатурыАвтоподборНоменклатуры.Количество КАК Количество,
	|	СпецификацииНоменклатурыАвтоподборНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СпецификацииНоменклатурыАвтоподборНоменклатуры.ЕдиницаИзмерения.Коэффициент КАК Коэффициент
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры.АвтоподборНоменклатуры" + ?(ВозвратныйОтход, "Отходы", "") + " КАК СпецификацииНоменклатурыАвтоподборНоменклатуры
	|		ПО ЗначенияСвойствОбъектов.Значение = СпецификацииНоменклатурыАвтоподборНоменклатуры.Значение
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = &Свойство
	|	И СпецификацииНоменклатурыАвтоподборНоменклатуры.Ссылка = &Спецификация
	|	И СпецификацииНоменклатурыАвтоподборНоменклатуры.КлючСвязи = &КлючСвязи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
		
	Запрос.УстановитьПараметр("Объект", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Свойство", СтрокаСпецификации.Свойство);
	Запрос.УстановитьПараметр("Спецификация", СтрокаСпецификации.Ссылка);
	Запрос.УстановитьПараметр("КлючСвязи", СтрокаСпецификации.КлючСвязи);

	РезультатЗапроса = Запрос.Выполнить();
		
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
			
		Если ТипЗнч(Выборка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				
			НоваяСтрока.Номенклатура = Выборка.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент = Выборка.Коэффициент;
			НоваяСтрока.Количество = ?(Выборка.Количество = 0, СтрокаСпецификации.Количество, Выборка.Количество);
				
			Возврат Истина;
				
		Иначе
				
			ДобавитьВОшибки(СтатусСообщения.Важное, НСтр("ru='Не выполнен автоподбор номенклатуры для свойства: '") + СокрЛП(СтрокаСпецификации.Свойство.Наименование), НСтр("ru='Несоответствие типов. Полученный тип: '") + ТипЗнч(Выборка.Номенклатура) + НСтр("ru=' Требуемый тип: '") + Тип("СправочникСсылка.Номенклатура"), ИсходнаяСтрока.Спецификация, СтрокаСпецификации.НомерСтроки, НоваяСтрока.Последовательность, МассивОшибок);
			Возврат Ложь;
				
		КонецЕсли;
			
	Иначе
			
		ДобавитьВОшибки(СтатусСообщения.Важное, НСтр("ru='Не выполнен автоподбор номенклатуры для свойства: '") + СокрЛП(СтрокаСпецификации.Свойство.Наименование), НСтр("ru='Для указанного значения свойства не найдено соответствие.'"), ИсходнаяСтрока.Спецификация, СтрокаСпецификации.НомерСтроки, НоваяСтрока.Последовательность, МассивОшибок);
		Возврат Ложь;
			
	КонецЕсли;
		
КонецФункции // АвтоподборНоменклатурыДляСвойства()

Функция АвтоподборХарактеристики(ИсходнаяСтрока, СтрокаСпецификации, НоваяСтрока, МассивОшибок, ВозвратныйОтход = Ложь)
	
	Если СтрокаСпецификации.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры Тогда
		
		Если СтрокаСпецификации.Ссылка["АвтоподборХарактеристики" + ?(ВозвратныйОтход, "Отходы", "")].Найти(СтрокаСпецификации.КлючСвязи, "КлючСвязи") = Неопределено Тогда
			
			Возврат Истина;
			
		ИначеЕсли НЕ НоваяСтрока.Номенклатура.ВестиУчетПоХарактеристикам Тогда
			
			ДобавитьВОшибки(СтатусСообщения.Важное, НСтр("ru='Не выполнен автоподбор характеристики.'"), НСтр("ru='Для номенклатуры не ведется учет по характеристикам'"), ИсходнаяСтрока.Спецификация, СтрокаСпецификации.НомерСтроки, НоваяСтрока.Последовательность, МассивОшибок);
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаСпецификации.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборХарактеристики И НЕ НоваяСтрока.Номенклатура.ВестиУчетПоХарактеристикам Тогда
		
		ДобавитьВОшибки(СтатусСообщения.Важное, НСтр("ru='Не выполнен автоподбор характеристики.'"), НСтр("ru='Для номенклатуры не ведется учет по характеристикам'"), ИсходнаяСтрока.Спецификация, СтрокаСпецификации.НомерСтроки, НоваяСтрока.Последовательность, МассивОшибок);
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	МАКСИМУМ(ВложенныйЗапрос.КоличествоСовпавшихСвойст) КАК КоличествоСовпавшихСвойст,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПодбираемыеХарактеристики.Ссылка КАК ХарактеристикаНоменклатуры,
	|		КОЛИЧЕСТВО(СпецификацииНоменклатурыАвтоподборХарактеристики.Свойство) КАК КоличествоСовпавшихСвойст
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК ПодбираемыеХарактеристики
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры.АвтоподборХарактеристики" + ?(ВозвратныйОтход, "Отходы", "") + " КАК СпецификацииНоменклатурыАвтоподборХарактеристики
	|			ПО (СпецификацииНоменклатурыАвтоподборХарактеристики.Ссылка = &Спецификация)
	|				И (СпецификацииНоменклатурыАвтоподборХарактеристики.КлючСвязи = &КлючСвязи)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектовИсходнаяХарактеристика
	|			ПО (ЗначенияСвойствОбъектовИсходнаяХарактеристика.Объект = &Объект)
	|				И (СпецификацииНоменклатурыАвтоподборХарактеристики.Свойство = ЗначенияСвойствОбъектовИсходнаяХарактеристика.Свойство)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектовПодбираемаяХарактеристика
	|			ПО (ЗначенияСвойствОбъектовПодбираемаяХарактеристика.Объект = ПодбираемыеХарактеристики.Ссылка)
	|				И (СпецификацииНоменклатурыАвтоподборХарактеристики.Свойство = ЗначенияСвойствОбъектовПодбираемаяХарактеристика.Свойство)
	|	ГДЕ
	|		ПодбираемыеХарактеристики.Владелец = &Владелец
	|		И ЕСТЬNULL(ЗначенияСвойствОбъектовИсходнаяХарактеристика.Значение, НЕОПРЕДЕЛЕНО) = ЕСТЬNULL(ЗначенияСвойствОбъектовПодбираемаяХарактеристика.Значение, НЕОПРЕДЕЛЕНО)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПодбираемыеХарактеристики.Ссылка) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры.АвтоподборХарактеристики" + ?(ВозвратныйОтход, "Отходы", "") + " КАК СпецификацииНоменклатурыАвтоподборХарактеристики
	|		ПО (СпецификацииНоменклатурыАвтоподборХарактеристики.Ссылка = &Спецификация)
	|			И (СпецификацииНоменклатурыАвтоподборХарактеристики.КлючСвязи = &КлючСвязи)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВложенныйЗапрос.КоличествоСовпавшихСвойст) = КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпецификацииНоменклатурыАвтоподборХарактеристики.Свойство)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоСовпавшихСвойст УБЫВ");
	
	Запрос.УстановитьПараметр("Объект", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Владелец", НоваяСтрока.Номенклатура);
	Запрос.УстановитьПараметр("Спецификация", СтрокаСпецификации.Ссылка);
	Запрос.УстановитьПараметр("КлючСвязи", СтрокаСпецификации.КлючСвязи);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если НЕ РезультатЗапроса.Пустой() Тогда
			
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
			
		Если ТипЗнч(Выборка.ХарактеристикаНоменклатуры) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
				
			НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			Возврат Истина;
				
		Иначе
				
			ДобавитьВОшибки(СтатусСообщения.Важное, НСтр("ru='Не выполнен автоподбор характеристики.'"), НСтр("ru='Автоподбор характеристики'"), ИсходнаяСтрока.Спецификация, СтрокаСпецификации.НомерСтроки, НоваяСтрока.Последовательность, МассивОшибок);
			Возврат Ложь;
				
		КонецЕсли;
			
	Иначе
			
		ДобавитьВОшибки(СтатусСообщения.Важное, НСтр("ru='Не выполнен автоподбор характеристики.'"), НСтр("ru='Автоподбор характеристики'"), ИсходнаяСтрока.Спецификация, СтрокаСпецификации.НомерСтроки, НоваяСтрока.Последовательность, МассивОшибок);
		Возврат Ложь;
			
	КонецЕсли;
	
КонецФункции // АвтоподборХарактеристики()

Функция РассчитатьКоличествоПоФормуле(ИсходнаяСтрока, СтрокаСпецификации, НоваяСтрока, КоэффициентОсновногоСырья, ПараметрыВыпуска, МассивОшибок)
	
	Если ПустаяСтрока(СтрокаСпецификации.Формула) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ПараметрыВыпуска = Неопределено Тогда
		
		ПараметрыВыпуска = Новый Соответствие;
		
	КонецЕсли;
	
	Формула = СтрокаСпецификации.Формула;
	ФормулаДляРазбора = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаСпецификации.Формула, "[", Символы.ПС + "["), "]", "]" + Символы.ПС), "{", Символы.ПС + "{"), "}", "}" + Символы.ПС);
	
	СтруктураПараметров = Новый Структура;
	СоответствиеПараметров = Новый Соответствие;
	
	Для Индекс = 1 По СтрЧислоСтрок(ФормулаДляРазбора) Цикл
		
		ТекущаяСтрока = СокрЛП(СтрПолучитьСтроку(ФормулаДляРазбора, Индекс));
		ИмяПараметра = "Параметр" + Формат(Индекс, "ЧГ=0");
		
		Если Лев(ТекущаяСтрока, 2) = "[#" Тогда
			
			Формула = СтрЗаменить(Формула, ТекущаяСтрока, "НоваяСтрока." + СтрЗаменить(СтрЗаменить(ТекущаяСтрока, "[#", ""), "#]", ""));
			
		ИначеЕсли (Лев(ТекущаяСтрока, 1) = "{" ИЛИ Лев(ТекущаяСтрока, 1) = "[") И СоответствиеПараметров[ТекущаяСтрока] = Неопределено Тогда
			
			Формула = СтрЗаменить(Формула, ТекущаяСтрока, "СтруктураПараметров." + ИмяПараметра);
			СоответствиеПараметров.Вставить(ТекущаяСтрока, ИмяПараметра);
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;

	КонецЦикла;
	
	МассивПараметров = Новый Массив;
	МассивСвойств = Новый Массив;
	
	Для каждого Параметр из СоответствиеПараметров Цикл
		
		Если Лев(Параметр.Ключ, 1) = "[" Тогда
			
			МассивПараметров.Добавить(СтрЗаменить(СтрЗаменить(Параметр.Ключ, "[", ""), "]", ""));
			
		ИначеЕсли Лев(Параметр.Ключ, 1) = "{" Тогда
			
			МассивСвойств.Добавить(СтрЗаменить(СтрЗаменить(Параметр.Ключ, "{", ""), "}", ""));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивПараметров.Количество() > 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыВыпускаПродукции.ВидПараметра.Наименование КАК Наименование,
		|	ПараметрыВыпускаПродукции.Значение КАК Значение
		|ИЗ
		|	Справочник.СпецификацииНоменклатуры.ПараметрыВыпускаПродукции КАК ПараметрыВыпускаПродукции
		|ГДЕ
		|	ПараметрыВыпускаПродукции.Ссылка = &Спецификация
		|	И ПараметрыВыпускаПродукции.ВидПараметра.Наименование В(&МассивПараметров)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование,
		|	Значение");
			
		Запрос.УстановитьПараметр("Спецификация", ?(СтрокаСпецификации.Ссылка.ВидСпецификации = Перечисления.ВидыСпецификаций.Узел, ИсходнаяСтрока.Спецификация, СтрокаСпецификации.Ссылка));
		Запрос.УстановитьПараметр("МассивПараметров", МассивПараметров);
		
		РезультатЗапроса = Запрос.Выполнить();
				
		Если НЕ РезультатЗапроса.Пустой() Тогда
					
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если НЕ СтруктураПараметров.Свойство(СоответствиеПараметров["[" + Выборка.Наименование + "]"]) Тогда
					
					Если ПараметрыВыпуска[Выборка.Наименование] = Неопределено Тогда
						
						СтруктураПараметров.Вставить(СоответствиеПараметров["[" + Выборка.Наименование + "]"], Выборка.Значение);
						
					Иначе
						
						СтруктураПараметров.Вставить(СоответствиеПараметров["[" + Выборка.Наименование + "]"], ПараметрыВыпуска[Выборка.Наименование]);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
					
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивСвойств.Количество() > 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияСвойствОбъектов.Свойство.Наименование КАК Наименование,
		|	ЗначенияСвойствОбъектов.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &Объект
		|	И ЗначенияСвойствОбъектов.Свойство.Наименование В(&МассивСвойств)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование,
		|	Значение");
			
		Запрос.УстановитьПараметр("Объект", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		Запрос.УстановитьПараметр("МассивСвойств", МассивСвойств);
			
		РезультатЗапроса = Запрос.Выполнить();
				
		Если НЕ РезультатЗапроса.Пустой() Тогда
					
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если НЕ СтруктураПараметров.Свойство(СоответствиеПараметров["{" + Выборка.Наименование + "}"]) Тогда
					
					СтруктураПараметров.Вставить(СоответствиеПараметров["{" + Выборка.Наименование + "}"], Выборка.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
					
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		НоваяСтрока.Количество = Вычислить(Формула);
		Возврат Истина;
				
	Исключение
				
		НоваяСтрока.Количество = 0;
		
		Если НоваяСтрока.Владелец().Колонки.Найти("Последовательность") = Неопределено Тогда
			
			ДобавитьВОшибки(СтатусСообщения.Важное, НСтр("ru='Ошибка расчета количества по формуле.'"), ОписаниеОшибки(), ИсходнаяСтрока.Спецификация, СтрокаСпецификации.НомерСтроки, Новый Массив, МассивОшибок);
			
		Иначе
			
			ДобавитьВОшибки(СтатусСообщения.Важное, НСтр("ru='Ошибка расчета количества по формуле.'"), ОписаниеОшибки(), ИсходнаяСтрока.Спецификация, СтрокаСпецификации.НомерСтроки, НоваяСтрока.Последовательность, МассивОшибок);
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки
	
КонецФункции // РассчитатьКоличествоПоФормуле()

Функция ПолучитьСпецификацию(ИсходнаяСтрока, Параметры, Кэш)
	
	Попытка
		
		ВидВоспроизводства = ИсходнаяСтрока.ВидВоспроизводства;
		
	Исключение
		
		ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство;
		
	КонецПопытки;
	
	Если ВидВоспроизводства <> Перечисления.ВидыВоспроизводстваНоменклатуры.Производство И ВидВоспроизводства <> Перечисления.ВидыВоспроизводстваНоменклатуры.Переработка Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Попытка
		
		Спецификация = ИсходнаяСтрока.Спецификация;
		
		Если ТипЗнч(Спецификация) <> Тип("СправочникСсылка.СпецификацииНоменклатуры") ИЛИ Спецификация.Пустая() Тогда
			
			Спецификация = Неопределено;
			
		КонецЕсли;
		
	Исключение
		
		Спецификация = Неопределено;
		
	КонецПопытки;
	
	Если Спецификация = Неопределено Тогда
		
		Попытка
			
			Подразделение = ИсходнаяСтрока.ТочкаМаршрута.Подразделение;
			
		Исключение
			
			Подразделение = Неопределено;
			
		КонецПопытки;
		
		Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(ИсходнаяСтрока.Номенклатура, ИсходнаяСтрока.ХарактеристикаНоменклатуры, Параметры.ДатаСпецификации, Подразделение, Кэш);
		
	КонецЕсли;
	
	Возврат Спецификация;
	
КонецФункции // ПолучитьСпецификацию()

Процедура УстановитьПараметрыВыходногоИзделия(НоваяСтрока, Кэш = Неопределено)
	
	Спецификация = НоваяСтрока.Спецификация;
	Номенклатура = НоваяСтрока.Номенклатура;
	ХарактеристикаНоменклатуры = ?(ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНоменклатуры), НоваяСтрока.ХарактеристикаНоменклатуры, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	ИспользоватьКэш = (Кэш <> Неопределено);
	
	Если ИспользоватьКэш Тогда
		
		ПараметрыВыходногоИзделия = Кэш.ПараметрыВыходногоИзделия.НайтиСтроки(Новый Структура("Спецификация, Номенклатура, ХарактеристикаНоменклатуры", Спецификация, Номенклатура, ХарактеристикаНоменклатуры));
		
		Если ПараметрыВыходногоИзделия.Количество() > 0 Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыВыходногоИзделия[0].ПараметрыВыходногоИзделия, "НомерОперацииМаршрута, МинимальнаяПартия, Кратность, ТочкаМаршрута, Подразделение, РабочийЦентр");
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВыходныеИзделия.НомерОперацииМаршрута КАК НомерОперацииМаршрута,
	|	ВыходныеИзделия.МинимальнаяПартия КАК МинимальнаяПартия,
	|	ВыходныеИзделия.Кратность КАК Кратность,
	|	ВыходныеИзделия.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ВыходныеИзделия.Подразделение КАК Подразделение,
	|	ВыходныеИзделия.РабочийЦентр КАК РабочийЦентр,
	|	ВыходныеИзделия.Приоритет КАК Приоритет
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВыходныеИзделия.НомерСтроки КАК НомерСтроки,
	|		ВыходныеИзделия.НомерОперацииМаршрута КАК НомерОперацииМаршрута,
	|		ВыходныеИзделия.МинимальнаяПартия КАК МинимальнаяПартия,
	|		ВыходныеИзделия.Кратность КАК Кратность,
	|		ВыходныеИзделия.ТочкаМаршрута КАК ТочкаМаршрута,
	|		ВыходныеИзделия.ТочкаМаршрута.Подразделение КАК Подразделение,
	|		ВыходныеИзделия.ТочкаМаршрута.РабочийЦентр КАК РабочийЦентр,
	|		1 КАК Приоритет
	|	ИЗ
	|		Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК ВыходныеИзделия
	|	ГДЕ
	|		ВыходныеИзделия.Номенклатура = &Номенклатура
	|		И ВыходныеИзделия.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|		И ВыходныеИзделия.Ссылка = &Спецификация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВыходныеИзделия.НомерСтроки,
	|		ВыходныеИзделия.НомерОперацииМаршрута,
	|		ВыходныеИзделия.МинимальнаяПартия,
	|		ВыходныеИзделия.Кратность,
	|		ВыходныеИзделия.ТочкаМаршрута,
	|		ВыходныеИзделия.ТочкаМаршрута.Подразделение,
	|		ВыходныеИзделия.ТочкаМаршрута.РабочийЦентр,
	|		2
	|	ИЗ
	|		Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК ВыходныеИзделия
	|	ГДЕ
	|		ВыходныеИзделия.Номенклатура = &Номенклатура
	|		И ВыходныеИзделия.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		И ВыходныеИзделия.Ссылка = &Спецификация) КАК ВыходныеИзделия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ВыходныеИзделия.НомерСтроки");
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		НоваяСтрока.НомерОперацииМаршрута = "";
		НоваяСтрока.МинимальнаяПартия = 0;
		НоваяСтрока.Кратность = 0;
		НоваяСтрока.ТочкаМаршрута = Справочники.ТочкиМаршрута.ПустаяСсылка();
		НоваяСтрока.Подразделение = НоваяСтрока.ТочкаМаршрута.Подразделение;
		НоваяСтрока.РабочийЦентр = НоваяСтрока.ТочкаМаршрута.РабочийЦентр;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "НомерОперацииМаршрута, МинимальнаяПартия, Кратность, ТочкаМаршрута, Подразделение, РабочийЦентр");
	
	КонецЕсли;
	
	Если ИспользоватьКэш Тогда
		
		НоваяСтрокаКэша = Кэш.ПараметрыВыходногоИзделия.Добавить();
		
		НоваяСтрокаКэша.Спецификация = Спецификация;
		НоваяСтрокаКэша.Номенклатура = Номенклатура;
		НоваяСтрокаКэша.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		НоваяСтрокаКэша.ПараметрыВыходногоИзделия = Новый Структура("НомерОперацииМаршрута, МинимальнаяПартия, Кратность, ТочкаМаршрута, Подразделение, РабочийЦентр");
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКэша.ПараметрыВыходногоИзделия, НоваяСтрока, "НомерОперацииМаршрута, МинимальнаяПартия, Кратность, ТочкаМаршрута, Подразделение, РабочийЦентр");
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыВыходногоИзделия()

Функция ПолучитьДолюСтоимостиКоличествоВыпусков(Спецификация, Номенклатура, ХарактеристикаНоменклатуры, Коэффициент, Количество, Кэш = Неопределено)
	
	ИспользоватьКэш = (Кэш <> Неопределено);
	
	Если ИспользоватьКэш Тогда
		
		ДолиСтоимости_КоличестваВыпусков = Кэш.ДолиСтоимости_КоличестваВыпусков.НайтиСтроки(Новый Структура("Спецификация, Номенклатура, ХарактеристикаНоменклатуры, Коэффициент", Спецификация, Номенклатура, ХарактеристикаНоменклатуры, ?(Коэффициент = 0, 1, Коэффициент)));
		
		Если ДолиСтоимости_КоличестваВыпусков.Количество() > 0 Тогда
			
			Возврат Новый Структура("ДоляСтоимости, КоличествоВыпусков", ДолиСтоимости_КоличестваВыпусков[0].ДоляСтоимости, УправлениеПланированием.ПолучитьДробь(Количество, ДолиСтоимости_КоличестваВыпусков[0].Количество));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВыходныеИзделия.Количество / &Коэффициент КАК Количество,
	|	ВыходныеИзделия.ДоляСтоимости / &Коэффициент КАК ДоляСтоимости,
	|	ЕСТЬNULL(ДоляСтоимостиВсехВыходныхИзделийПоСпецификации.ДоляСтоимости, 0) КАК ДоляСтоимостиВсехВыходныхИзделий
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК Приоритет,
	|		ВыходныеИзделияСХарактеристикой.НомерСтроки КАК НомерСтроки,
	|		ВыходныеИзделияСХарактеристикой.Количество * ЕСТЬNULL(ВыходныеИзделияСХарактеристикой.ЕдиницаИзмерения.Коэффициент, 1) КАК Количество,
	|		ВыходныеИзделияСХарактеристикой.ДоляСтоимости * ЕСТЬNULL(ВыходныеИзделияСХарактеристикой.ЕдиницаИзмерения.Коэффициент, 1) КАК ДоляСтоимости
	|	ИЗ
	|		Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК ВыходныеИзделияСХарактеристикой
	|	ГДЕ
	|		ВыходныеИзделияСХарактеристикой.Ссылка = &Спецификация
	|		И ВыходныеИзделияСХарактеристикой.Номенклатура = &Номенклатура
	|		И ВыходныеИзделияСХарактеристикой.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|		И ВыходныеИзделияСХарактеристикой.Количество > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		2,
	|		ВыходныеИзделияБезХарактеристики.НомерСтроки,
	|		ВыходныеИзделияБезХарактеристики.Количество * ЕСТЬNULL(ВыходныеИзделияБезХарактеристики.ЕдиницаИзмерения.Коэффициент, 1),
	|		ВыходныеИзделияБезХарактеристики.ДоляСтоимости * ЕСТЬNULL(ВыходныеИзделияБезХарактеристики.ЕдиницаИзмерения.Коэффициент, 1)
	|	ИЗ
	|		Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК ВыходныеИзделияБезХарактеристики
	|	ГДЕ
	|		ВыходныеИзделияБезХарактеристики.Ссылка = &Спецификация
	|		И ВыходныеИзделияБезХарактеристики.Номенклатура = &Номенклатура
	|		И ВыходныеИзделияБезХарактеристики.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		И ВыходныеИзделияБезХарактеристики.Количество > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		3,
	|		1,
	|		1,
	|		0) КАК ВыходныеИзделия
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ВыходныеИзделия.ДоляСтоимости) КАК ДоляСтоимости
	|		ИЗ
	|			Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК ВыходныеИзделия
	|		ГДЕ
	|			ВыходныеИзделия.Ссылка = &Спецификация
	|			И ВыходныеИзделия.Количество > 0) КАК ДоляСтоимостиВсехВыходныхИзделийПоСпецификации
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыходныеИзделия.Приоритет,
	|	ВыходныеИзделия.НомерСтроки");
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ?(ЗначениеЗаполнено(ХарактеристикаНоменклатуры), ХарактеристикаНоменклатуры, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()));
	Запрос.УстановитьПараметр("Коэффициент", ?(Коэффициент = 0, 1, Коэффициент));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДоляСтоимости = УправлениеПланированием.ПолучитьДробь(?(Выборка.ДоляСтоимостиВсехВыходныхИзделий = 0, 0, Выборка.ДоляСтоимости), ?(Выборка.ДоляСтоимостиВсехВыходныхИзделий = 0, 1, Выборка.ДоляСтоимостиВсехВыходныхИзделий));
	
	Если ИспользоватьКэш Тогда

		НоваяСтрокаКэша = Кэш.ДолиСтоимости_КоличестваВыпусков.Добавить();
	
		НоваяСтрокаКэша.Спецификация = Спецификация;
		НоваяСтрокаКэша.Номенклатура = Номенклатура;
		НоваяСтрокаКэша.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		НоваяСтрокаКэша.Коэффициент = ?(Коэффициент = 0, 1, Коэффициент);
		НоваяСтрокаКэша.Количество = Выборка.Количество;
		НоваяСтрокаКэша.ДоляСтоимости = ДоляСтоимости;
			
	КонецЕсли;
	
	Возврат Новый Структура("ДоляСтоимости, КоличествоВыпусков", ДоляСтоимости, УправлениеПланированием.ПолучитьДробь(Количество, Выборка.Количество));
	
КонецФункции

Функция ДобавитьСпецификациюВПоследовательность(Спецификация, Последовательность, ПредыдущаяПоследовательность = Неопределено)
	
	Если Спецификация = Неопределено ИЛИ (ТипЗнч(Спецификация) = Тип("СправочникСсылка.СпецификацииНоменклатуры") И Спецификация.Пустая()) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ТипЗнч(Последовательность) <> Тип("Массив") Тогда
		
		Последовательность = Новый Массив;
		
	КонецЕсли;
	
	Если ПредыдущаяПоследовательность <> Неопределено Тогда
				
		Для каждого ЭлементПоследовательности из ПредыдущаяПоследовательность Цикл
			
			Последовательность.Добавить(ЭлементПоследовательности);
			
		КонецЦикла;
				
	КонецЕсли;
	
	Если Последовательность.Найти(Спецификация) <> Неопределено Тогда
			
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(Спецификация) = Тип("Массив") Тогда
		
		Для каждого ЭлементМассиваСпецификаций из Спецификация Цикл
			
			Последовательность.Добавить(ЭлементМассиваСпецификаций);
			
		КонецЦикла;
		
	Иначе
		
		Последовательность.Добавить(Спецификация);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ДобавитьСпецификациюВПоследовательность()

Процедура УстановитьВидВоспроизводства(НоваяСтрока, Кэш = Неопределено)

	Если НоваяСтрока.ВидВоспроизводства = Неопределено ИЛИ НоваяСтрока.ВидВоспроизводства.Пустая() Тогда
		
		НоменклатураВидВоспроизводства = ПолучитьРеквизитНоменклатурыИзКеша(НоваяСтрока.Номенклатура, "ВидВоспроизводства", Кэш);
		НоменклатураВидВоспроизводстваПустая = ПолучитьРеквизитНоменклатурыИзКеша(НоваяСтрока.Номенклатура, "ВидВоспроизводстваПустая", Кэш);
		
		Если НоменклатураВидВоспроизводстваПустая Тогда
			НоваяСтрока.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Закупка;
		Иначе
			НоваяСтрока.ВидВоспроизводства = НоменклатураВидВоспроизводства;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидВоспроизводства()

Процедура УстановитьРазузлован(НоваяСтрока)
	
	Если НоваяСтрока.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство ИЛИ НоваяСтрока.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Переработка Тогда
			
		НоваяСтрока.Разузлован = Ложь;
			
	Иначе
			
		НоваяСтрока.Разузлован = Истина;
			
	КонецЕсли;
	
КонецПроцедуры // УстановитьРазузлован()

Процедура ВыполнитьОтбор(Результат, Параметры)
	
	Если ТипЗнч(Параметры.Отбор) <> Тип("Структура") ИЛИ Параметры.Отбор.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат.Свойство("ПолноеРазузлование") Тогда
		
		МассивУдаляемыхСтрок = Новый Массив;
		
		Для каждого ТекущаяСтрока из Результат.ПолноеРазузлование Цикл
			
			Если НЕ СоответствуетОтбору(Результат.ПолноеРазузлование, ТекущаяСтрока, Параметры.Отбор) Тогда
				
				МассивУдаляемыхСтрок.Добавить(ТекущаяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого УдаляемаяСтрока из МассивУдаляемыхСтрок Цикл
			
			Результат.ПолноеРазузлование.Удалить(УдаляемаяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Результат.Свойство("ВыходныеИзделия") Тогда
		
		МассивУдаляемыхСтрок = Новый Массив;
		
		Для каждого ТекущаяСтрока из Результат.ВыходныеИзделия Цикл
			
			Если НЕ СоответствуетОтбору(Результат.ВыходныеИзделия, ТекущаяСтрока, Параметры.Отбор) Тогда
				
				МассивУдаляемыхСтрок.Добавить(ТекущаяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого УдаляемаяСтрока из МассивУдаляемыхСтрок Цикл
			
			Результат.ВыходныеИзделия.Удалить(УдаляемаяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Результат.Свойство("ИсходныеКомплектующие") Тогда
		
		МассивУдаляемыхСтрок = Новый Массив;
		
		Для каждого ТекущаяСтрока из Результат.ИсходныеКомплектующие Цикл
			
			Если НЕ СоответствуетОтбору(Результат.ИсходныеКомплектующие, ТекущаяСтрока, Параметры.Отбор) Тогда
				
				МассивУдаляемыхСтрок.Добавить(ТекущаяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого УдаляемаяСтрока из МассивУдаляемыхСтрок Цикл
			
			Результат.ИсходныеКомплектующие.Удалить(УдаляемаяСтрока);
			
		КонецЦикла;

	КонецЕсли;
	
	Если Результат.Свойство("ВозвратныеОтходы") Тогда
		
		МассивУдаляемыхСтрок = Новый Массив;
		
		Для каждого ТекущаяСтрока из Результат.ВозвратныеОтходы Цикл
			
			Если НЕ СоответствуетОтбору(Результат.ВозвратныеОтходы, ТекущаяСтрока, Параметры.Отбор) Тогда
				
				МассивУдаляемыхСтрок.Добавить(ТекущаяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого УдаляемаяСтрока из МассивУдаляемыхСтрок Цикл
			
			Результат.ВозвратныеОтходы.Удалить(УдаляемаяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьОтбор()

Функция СоответствуетОтбору(ТаблицаИсточник, ПроверяемаяСтрока, Отбор)
	
	Для каждого ЭлементОтбора из Отбор Цикл
		
		Если ТаблицаИсточник.Колонки.Найти(ЭлементОтбора.Ключ) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Массив") Тогда
			
			СоответствуетОтбору = Ложь;
			
			Для каждого Значение из ЭлементОтбора.Значение Цикл
				
				Если ПроверяемаяСтрока[ЭлементОтбора.Ключ] = Значение Тогда
					
					СоответствуетОтбору = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ СоответствуетОтбору Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ЭлементОтбора.Значение <> Неопределено Тогда
			
			Если ПроверяемаяСтрока[ЭлементОтбора.Ключ] <> ЭлементОтбора.Значение Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // СоответствуетОтбору()

Процедура ИнициализацияРезультатаРазузлования(Результат, Параметры)
	
	Если Результат = Неопределено Тогда
		
		Результат = Новый Структура("ПолноеРазузлование");
		
	ИначеЕсли НЕ Результат.Свойство("ПолноеРазузлование") Тогда
		
		Результат.Вставить("ПолноеРазузлование");
		
	КонецЕсли;
		
	Если НЕ Результат.Свойство("МаксимальныйУровень") Тогда
		
		Результат.Вставить("МаксимальныйУровень", 0);
		
	Иначе
		
		Результат.МаксимальныйУровень = 0;
		
	КонецЕсли;
	
	Если НЕ Результат.Свойство("КоличествоВыпусков") Тогда
		
		Результат.Вставить("КоличествоВыпусков", 0);
		
	Иначе
		
		Результат.КоличествоВыпусков = 0;
		
	КонецЕсли;
	
	Если Результат.Свойство("ПолноеРазузлование") И Результат.ПолноеРазузлование = Неопределено Тогда
		
		Результат.ПолноеРазузлование = Новый ТаблицаЗначений;
		
		Результат.ПолноеРазузлование.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
		Результат.ПолноеРазузлование.Колонки.Добавить("Разузлован", Новый ОписаниеТипов("Булево"));
		Результат.ПолноеРазузлование.Колонки.Добавить("СопутствующееИзделие", Новый ОписаниеТипов("Булево"));
		Результат.ПолноеРазузлование.Колонки.Добавить("НомерОперацииМаршрута", Новый ОписаниеТипов("Строка"));
		Результат.ПолноеРазузлование.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
		Результат.ПолноеРазузлование.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Результат.ПолноеРазузлование.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		Результат.ПолноеРазузлование.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		Результат.ПолноеРазузлование.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
		Результат.ПолноеРазузлование.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Результат.ПолноеРазузлование.Колонки.Добавить("МинимальнаяПартия", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Результат.ПолноеРазузлование.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Результат.ПолноеРазузлование.Колонки.Добавить("ДоляСтоимости", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		Результат.ПолноеРазузлование.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
		Результат.ПолноеРазузлование.Колонки.Добавить("ВидВоспроизводства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыВоспроизводстваНоменклатуры"));
		Результат.ПолноеРазузлование.Колонки.Добавить("СписаниеКомплектующей", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыСписанияКомплектующих"));
		Результат.ПолноеРазузлование.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
		Результат.ПолноеРазузлование.Колонки.Добавить("ТочкаМаршрута", Новый ОписаниеТипов("СправочникСсылка.ТочкиМаршрута"));
		Результат.ПолноеРазузлование.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
		Результат.ПолноеРазузлование.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры, СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров"));
		Результат.ПолноеРазузлование.Колонки.Добавить("Последовательность");
		
		Если Результат.Свойство("СопутствующиеИзделия") ИЛИ Параметры.РазмещатьВСопутствующихИзделиях Тогда
			
			Результат.ПолноеРазузлование.Колонки.Добавить("КоличествоТочное", Новый ОписаниеТипов("Число"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат.Свойство("ВыходныеИзделия") И Результат.ВыходныеИзделия = Неопределено Тогда
		
		Результат.ВыходныеИзделия = Новый ТаблицаЗначений;
		
		Результат.ВыходныеИзделия.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
		Результат.ВыходныеИзделия.Колонки.Добавить("Разузлован", Новый ОписаниеТипов("Булево"));
		Результат.ВыходныеИзделия.Колонки.Добавить("СопутствующееИзделие", Новый ОписаниеТипов("Булево"));
		Результат.ВыходныеИзделия.Колонки.Добавить("НомерОперацииМаршрута", Новый ОписаниеТипов("Строка"));
		Результат.ВыходныеИзделия.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
		Результат.ВыходныеИзделия.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Результат.ВыходныеИзделия.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		Результат.ВыходныеИзделия.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		Результат.ВыходныеИзделия.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
		Результат.ВыходныеИзделия.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Результат.ВыходныеИзделия.Колонки.Добавить("МинимальнаяПартия", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Результат.ВыходныеИзделия.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Результат.ВыходныеИзделия.Колонки.Добавить("ДоляСтоимости", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		Результат.ВыходныеИзделия.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
		Результат.ВыходныеИзделия.Колонки.Добавить("ТочкаМаршрута", Новый ОписаниеТипов("СправочникСсылка.ТочкиМаршрута"));
		Результат.ВыходныеИзделия.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
		Результат.ВыходныеИзделия.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры, СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров"));
		
	КонецЕсли;
	
	Если Результат.Свойство("ИсходныеКомплектующие") И Результат.ИсходныеКомплектующие = Неопределено Тогда
		
		Результат.ИсходныеКомплектующие = Новый ТаблицаЗначений;
		
		Результат.ИсходныеКомплектующие.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("Разузлован", Новый ОписаниеТипов("Булево"));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("НомерОперацииМаршрута", Новый ОписаниеТипов("Строка"));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("МинимальнаяПартия", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("ВидВоспроизводства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыВоспроизводстваНоменклатуры"));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("СписаниеКомплектующей", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыСписанияКомплектующих"));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("ТочкаМаршрута", Новый ОписаниеТипов("СправочникСсылка.ТочкиМаршрута"));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
		Результат.ИсходныеКомплектующие.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры, СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров"));
		
	КонецЕсли;
	
	Если Результат.Свойство("ВозвратныеОтходы") И Результат.ВозвратныеОтходы = Неопределено Тогда
		
		Результат.ВозвратныеОтходы = Новый ТаблицаЗначений;
		
		Результат.ВозвратныеОтходы.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
		Результат.ВозвратныеОтходы.Колонки.Добавить("НомерОперацииМаршрута", Новый ОписаниеТипов("Строка"));
		Результат.ВозвратныеОтходы.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
		Результат.ВозвратныеОтходы.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Результат.ВозвратныеОтходы.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		Результат.ВозвратныеОтходы.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		Результат.ВозвратныеОтходы.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
		Результат.ВозвратныеОтходы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Результат.ВозвратныеОтходы.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		Результат.ВозвратныеОтходы.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		Результат.ВозвратныеОтходы.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
		Результат.ВозвратныеОтходы.Колонки.Добавить("СписаниеКомплектующей", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыСписанияКомплектующих"));
		Результат.ВозвратныеОтходы.Колонки.Добавить("ТочкаМаршрута", Новый ОписаниеТипов("СправочникСсылка.ТочкиМаршрута"));
		Результат.ВозвратныеОтходы.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
		Результат.ВозвратныеОтходы.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры, СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров"));
		
	КонецЕсли;
	
	Если (Параметры.РазмещатьВСопутствующихИзделиях И (НЕ Результат.Свойство("СопутствующиеИзделия") ИЛИ Результат.Свойство("СопутствующиеИзделия") И Результат.СопутствующиеИзделия = Неопределено)) ИЛИ (Результат.Свойство("СопутствующиеИзделия") И Результат.СопутствующиеИзделия = Неопределено) Тогда
		
		Если НЕ Результат.Свойство("СопутствующиеИзделия") Тогда
			
			Результат.Вставить("СопутствующиеИзделия");
			
		КонецЕсли;
		
		Результат.СопутствующиеИзделия = Новый ТаблицаЗначений;
		
		Результат.СопутствующиеИзделия.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
		Результат.СопутствующиеИзделия.Колонки.Добавить("Разузлован", Новый ОписаниеТипов("Булево"));
		Результат.СопутствующиеИзделия.Колонки.Добавить("СопутствующееИзделие", Новый ОписаниеТипов("Булево"));
		Результат.СопутствующиеИзделия.Колонки.Добавить("НомерОперацииМаршрута", Новый ОписаниеТипов("Строка"));
		Результат.СопутствующиеИзделия.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
		Результат.СопутствующиеИзделия.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Результат.СопутствующиеИзделия.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		Результат.СопутствующиеИзделия.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		Результат.СопутствующиеИзделия.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
		Результат.СопутствующиеИзделия.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Результат.СопутствующиеИзделия.Колонки.Добавить("МинимальнаяПартия", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Результат.СопутствующиеИзделия.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Результат.СопутствующиеИзделия.Колонки.Добавить("ДоляСтоимости", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		Результат.СопутствующиеИзделия.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
		Результат.СопутствующиеИзделия.Колонки.Добавить("ТочкаМаршрута", Новый ОписаниеТипов("СправочникСсылка.ТочкиМаршрута"));
		Результат.СопутствующиеИзделия.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
		Результат.СопутствующиеИзделия.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры, СправочникСсылка.ГруппыЗаменяемостиРабочихЦентров"));
		Результат.СопутствующиеИзделия.Колонки.Добавить("ИсходноеКоличество", Новый ОписаниеТипов("Число"));
		Результат.СопутствующиеИзделия.Колонки.Добавить("КоэффициентПриведения", Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
КонецПроцедуры // ИнициализацияРезультатаРазузлования()

Процедура ИнициализацияПараметров(Параметры)
	
	Если Параметры = Неопределено ИЛИ ТипЗнч(Параметры) <> Тип("Структура") Тогда
		
		Параметры = Новый Структура;
		
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ПараметрыВыпуска") Тогда
		
		Параметры.Вставить("ПараметрыВыпуска");
		
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("КоличествоУровнейРазузлования") Тогда
		
		Параметры.Вставить("КоличествоУровнейРазузлования", 0);
		
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ДатаСпецификации") Тогда
		
		Параметры.Вставить("ДатаСпецификации", ТекущаяДата());
		
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("Отбор") Тогда
		
		Параметры.Вставить("Отбор", Новый Структура);
		
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("РазмещатьВСопутствующихИзделиях") Тогда
		
		Параметры.Вставить("РазмещатьВСопутствующихИзделиях", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // ИнициализацияПараметров()

Процедура ДобавитьВОшибки(СтатусОшибки, Причина, ОписаниеОшибки, Спецификация, НомерСтрокиСпецификации, Последовательность, МассивОшибок)
		
	МассивОшибок.Добавить(Новый Структура(
	"СтатусОшибки,
	|Причина,
	|ОписаниеОшибки,
	|Спецификация,
	|НомерСтроки,
	|Последовательность",
	СтатусОшибки,
	Причина,
	ОписаниеОшибки,
	Спецификация,
	НомерСтрокиСпецификации,
	Последовательность));
	
КонецПроцедуры // ДобавитьВОшибки()

Функция ДобавитьНоменклатуруВКеш(Номенклатура, Кэш)
	
	НоваяСтрокаКэша = Кэш.Номенклатура.Добавить();
	
	НоваяСтрокаКэша.Номенклатура = Номенклатура;
	НоваяСтрокаКэша.Наименование = СокрЛП(Номенклатура.Наименование);
	НоваяСтрокаКэша.ВидВоспроизводства = Номенклатура.ВидВоспроизводства;
	НоваяСтрокаКэша.ВидВоспроизводстваПустая = НоваяСтрокаКэша.ВидВоспроизводства.Пустая();
	НоваяСтрокаКэша.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
	НоваяСтрокаКэша.ЕдиницаХраненияОстатков = Номенклатура.ЕдиницаХраненияОстатков;
	
	Возврат НоваяСтрокаКэша;

КонецФункции
 
Функция ПолучитьРеквизитНоменклатурыИзКеша(Номенклатура, ИмяРеквизита, Кэш)
	
	Если Кэш = Неопределено Тогда
		Если ИмяРеквизита = "ВидВоспроизводстваПустая" Тогда
			Возврат Номенклатура.ВидВоспроизводства.Пустая();
		Иначе	
			Возврат Номенклатура[ИмяРеквизита];
		КонецЕсли; 
	КонецЕсли; 
	
	Строки = Кэш.Номенклатура.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	
	Если Строки.Количество() > 0 Тогда
		Результат = Строки[0][ИмяРеквизита];
	Иначе
		НоваяСтрокаКэша = ДобавитьНоменклатуруВКеш(Номенклатура, Кэш);
	    Результат = НоваяСтрокаКэша[ИмяРеквизита];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	
