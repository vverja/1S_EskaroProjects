////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ ПРОДУКЦИИ И ЗАТРАТ ПО ПЕРЕДЕЛАМ

////////////////////////////////////////////////////////////////////////////////
// ФУНЦИИ ФОРМИРОВАНИЯ ЗАПРОСА ДЛЯ РАСПРЕДЕЛЕНИЯ ПРОДУКЦИИ И ЗАТРАТ ПО ПЕРЕДЕЛАМ

// Функция формирует текст запроса по материальным производственным расходам.
//
// Возвращаемое значение:
//   Текст – текст запроса по материальным производственным расходам.
//
Функция СформироватьТекстЗапросаМатериальныеПроизводственныеРасходы()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ложь КАК НематериальныеЗатраты,
	|	Ложь КАК КосвенныеЗатраты,
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.Подразделение.Представление КАК ПодразделениеПредставление,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.Продукция.ВестиУчетПоСериямВНЗП ТОГДА
	|		ЗатратыНаВыпуск.СерияПродукции
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияПродукции,
	|	
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата.ВестиУчетПоСериямВНЗП ТОГДА
	|		ЗатратыНаВыпуск.СерияЗатраты
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияЗатраты,
	|	
	|	ЗатратыНаВыпуск.Затрата.Представление КАК ЗатратаПредставление,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты.Представление КАК ХарактеристикаЗатратыПредставление,
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата.ВестиУчетПоСериямВНЗП ТОГДА
	|		ЗатратыНаВыпуск.СерияЗатраты.Представление
	|	ИНАЧЕ
	|		ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|	КОНЕЦ КАК СерияЗатратыПредставление,
	|	
	|	ЕСТЬNULL(ПорядокЗакрытия.НомерПередела, 0) КАК ПодразделениеНомерПередела,
	|	ЕСТЬNULL(РегистрВстречныйВыпуск.ВстречныйВыпуск, Ложь) КАК ВстречныйВыпуск,
	|	
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.КодОперации В (&КодыОперацииКорректировка) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК КорректировкаНЗП,
	|	
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.КодОперации В (&КодыОперацииВозврат) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ВозвратИзНЗП,
	|	
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.КодОперации В (&КодыОперацииСписание) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК СписаниеНЗП,
	|	
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.КодОперации В (&КодыОперацииОприходование) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ОприходованиеНЗП
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ВстречныйВыпускПродукции.Продукция,
	|			ВстречныйВыпускПродукции.Затрата,
	|			ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаЗатраты,
	|			ВыпускПродукции.СерияПродукции КАК СерияЗатраты,
	|			Истина КАК ВстречныйВыпуск
	|		ИЗ
	|			РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, 
	|				) КАК ВстречныйВыпускПродукции
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ (
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВыпускПродукции.Продукция,
	|					ВыпускПродукции.ХарактеристикаПродукции,
	|					ВЫБОР КОГДА ВыпускПродукции.Продукция.ВестиУчетПоСериямВНЗП ТОГДА
	|						ВыпускПродукции.СерияПродукции
	|					ИНАЧЕ
	|						ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|					КОНЕЦ КАК СерияПродукции
	|				ИЗ
	|					РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|				ГДЕ
	|					ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|					И ВыпускПродукции.КодОперации <> ЗНАЧЕНИЕ(Перечисление.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости)
	|					//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|					
	|				) КАК ВыпускПродукции
	|			ПО
	|				ВстречныйВыпускПродукции.Затрата = ВыпускПродукции.Продукция
	|
	|		ГДЕ
	|			ВстречныйВыпускПродукции.СпособОценкиСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыОценкиСтоимостиВстречногоВыпуска.ПоРасчетнойСтоимости)
	|			И Не ВыпускПродукции.Продукция ЕСТЬ NULL
	|
	|		) КАК РегистрВстречныйВыпуск
	|	ПО
	|		ЗатратыНаВыпуск.Продукция = РегистрВстречныйВыпуск.Продукция
	|		И ЗатратыНаВыпуск.Затрата = РегистрВстречныйВыпуск.Затрата
	|		И ЗатратыНаВыпуск.ХарактеристикаЗатраты = РегистрВстречныйВыпуск.ХарактеристикаЗатраты
	|		И ЗатратыНаВыпуск.СерияЗатраты = РегистрВстречныйВыпуск.СерияЗатраты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПорядокЗакрытияПодразделений%СуффиксОрганизаций%.СрезПоследних(&КонДата, 
	|			Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|			//ДляРеглУчета И Организация = &Организация 
	|			) КАК ПорядокЗакрытия
	|	ПО
	|		ЗатратыНаВыпуск.Подразделение = ПорядокЗакрытия.Подразделение
	|			
	|ГДЕ 
	|	ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|	И Не ЗатратыНаВыпуск.Продукция = &ПустСсылка
	|	И ЗатратыНаВыпуск.КодОперации  В (&КодыОпераций)
	|	И Не ЗатратыНаВыпуск.Затрата ССЫЛКА Перечисление.ХарактерЗатрат
	|	И ЗатратыНаВыпуск.СтатьяЗатрат.ВидЗатрат = &Материальные
	|	//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаМатериальныеПроизводственныеРасходы()

// Функция формирует текст запроса по нематериальным производственным расходам.
//
// Возвращаемое значение:
//   Текст – текст запроса по нематериальным производственным расходам.
//
Функция СформироватьТекстЗапросаНематериальныеПроизводственныеРасходы()
	
	ТекстЗапроса = "
	|
	|// Выпуск услуг в производство по нематериальной статье затрат.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Истина, // НематериальныеЗатраты
	|	Ложь, // КосвенныеЗатраты
	|	ЗатратыНаВыпуск.Подразделение,
	|	ЗатратыНаВыпуск.Подразделение.Представление КАК ПодразделениеПредставление,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.Продукция.ВестиУчетПоСериямВНЗП ТОГДА
	|		ЗатратыНаВыпуск.СерияПродукции
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияПродукции,
	|	
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск ТОГДА
	|		ЗатратыНаВыпуск.Затрата
	|	ИНАЧЕ
	|		ВыпускПродукции.Затрата
	|	КОНЕЦ,
	|	
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск ТОГДА
	|		&ПустаяХарактеристика
	|	ИНАЧЕ
	|		ВыпускПродукции.ХарактеристикаЗатраты
	|	КОНЕЦ,
	|	
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск ТОГДА
	|		&ПустаяСерия
	|	ИНАЧЕ
	|		ВыпускПродукции.СерияЗатраты
	|	КОНЕЦ,
	|	
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск ТОГДА
	|		ЗатратыНаВыпуск.Затрата.Представление
	|	ИНАЧЕ
	|		ВыпускПродукции.Затрата.Представление
	|	КОНЕЦ,
	|	
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск ТОГДА
	|		Представление(&ПустаяХарактеристика)
	|	ИНАЧЕ
	|		ВыпускПродукции.ХарактеристикаЗатраты.Представление
	|	КОНЕЦ,
	|	
	|	ВЫБОР КОГДА ЗатратыНаВыпуск.Затрата ССЫЛКА Справочник.СпособыРаспределенияЗатратНаВыпуск ТОГДА
	|		Представление(&ПустаяСерия)
	|	ИНАЧЕ
	|		ВыпускПродукции.СерияЗатраты.Представление
	|	КОНЕЦ,
	|	
	|	ЕСТЬNULL(ПорядокЗакрытия.НомерПередела, 0) КАК ПодразделениеНомерПередела,
	|	ЕСТЬNULL(РегистрВстречныйВыпуск.ВстречныйВыпуск, Ложь) КАК ВстречныйВыпуск,
	|	Ложь,
	|	Ложь,
	|	Ложь,
	|	Ложь
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПорядокЗакрытияПодразделений%СуффиксОрганизаций%.СрезПоследних(&КонДата, 
	|			Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|			//ДляРеглУчета И Организация = &Организация 
	|			) КАК ПорядокЗакрытия
	|	ПО
	|		ЗатратыНаВыпуск.Подразделение = ПорядокЗакрытия.Подразделение
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВыпускПродукции.ПодразделениеПолучатель,
	|			ВыпускПродукции.СтатьяЗатратПолучатель,
	|			ВыпускПродукции.НоменклатурнаяГруппаПолучатель,
	|			ВыпускПродукции.ЗаказПолучатель,
	|			//ДляРеглУчета ВыпускПродукции.СчетДт,
	|			ВыпускПродукции.Продукция КАК Затрата,
	|			ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаЗатраты,
	|			ВыпускПродукции.СерияПродукции КАК СерияЗатраты
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|				
	|		ГДЕ
	|			ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|			И ВыпускПродукции.КодОперации = &КодОперацииНаПроизводство
	|			И ВыпускПродукции.СтатьяЗатратПолучатель.ВидЗатрат <> &Материальные
	|			//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|
	|		) КАК ВыпускПродукции
	|	ПО
	|		ЗатратыНаВыпуск.Подразделение = ВыпускПродукции.ПодразделениеПолучатель
	|		И ЗатратыНаВыпуск.СтатьяЗатрат = ВыпускПродукции.СтатьяЗатратПолучатель
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппа = ВыпускПродукции.НоменклатурнаяГруппаПолучатель
	|		И ЗатратыНаВыпуск.Заказ = ВыпускПродукции.ЗаказПолучатель
	|		//ДляРеглУчета И ЗатратыНаВыпуск.СчетУчета = ВыпускПродукции.СчетДт
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ВстречныйВыпускПродукции.Продукция,
	|			ВстречныйВыпускПродукции.Затрата,
	|			Истина КАК ВстречныйВыпуск
	|		ИЗ
	|			РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, 
	|				) КАК ВстречныйВыпускПродукции
	|		ГДЕ
	|			ВстречныйВыпускПродукции.СпособОценкиСтоимости = &СпособОценкиСтоимости
	|			
	|		) КАК РегистрВстречныйВыпуск
	|	ПО
	|		ЗатратыНаВыпуск.Продукция = РегистрВстречныйВыпуск.Продукция
	|		И ВыпускПродукции.Затрата = РегистрВстречныйВыпуск.Затрата
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			РаспределениеЗатрат.Подразделение,
	|			РаспределениеЗатрат.НоменклатурнаяГруппа,
	|			РаспределениеЗатрат.СтатьяЗатрат
	|		ИЗ
	|			РегистрСведений.РаспределениеЗатратПоПеределам%СуффиксОрганизаций% КАК РаспределениеЗатрат
	|		ГДЕ 
	|			РаспределениеЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			//ДляРеглУчета И РаспределениеЗатрат.Организация = &Организация
	|		) КАК РаспределениеЗатрат
	|	ПО
	|		ЗатратыНаВыпуск.Подразделение = РаспределениеЗатрат.Подразделение
	|		И ЗатратыНаВыпуск.НоменклатурнаяГруппа = РаспределениеЗатрат.НоменклатурнаяГруппа
	|		И ЗатратыНаВыпуск.СтатьяЗатрат = РаспределениеЗатрат.СтатьяЗатрат
	|			
	|ГДЕ 
	|	ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|	И Не ЗатратыНаВыпуск.Продукция = &ПустСсылка
	|	И ЗатратыНаВыпуск.КодОперации  В (&КодыОпераций)
	|	И Не ЗатратыНаВыпуск.Затрата ССЫЛКА Перечисление.ХарактерЗатрат
	|	И ЗатратыНаВыпуск.СтатьяЗатрат.ВидЗатрат <> &Материальные
	|	И РаспределениеЗатрат.СтатьяЗатрат ЕСТЬ NULL
	|	//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаНематериальныеПроизводственныеРасходы()


// Функция формирует текст запроса по выпуску без прямых расходов.
//
// Возвращаемое значение:
//   Текст – текст запроса по выпуску без прямых расходов.
//
Функция СформироватьТекстЗапросаВыпускБезПрямыхРасходов()
	
	ТекстЗапроса = "
	|
	|// Выпуск без прямых расходов
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ложь, // НематериальныеЗатраты
	|	Ложь, // КосвенныеЗатраты
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.Подразделение.Представление,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	Неопределено,
	|	
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВЫБОР КОГДА ВыпускПродукции.Продукция.ВестиУчетПоСериямВНЗП ТОГДА
	|		ВыпускПродукции.СерияПродукции
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияПродукции,
	|	
	|	Неопределено,
	|	&ПустаяХарактеристика,
	|	&ПустаяСерия,
	|	
	|	Неопределено,
	|	Неопределено,
	|	Неопределено,
	|	
	|	ЕСТЬNULL(ПорядокЗакрытия.НомерПередела, 0) КАК ПодразделениеНомерПередела,
	|	Ложь, // ВстречныйВыпуск
	|	Ложь, // КорректировкаНЗП
	|	Ложь, // ВозвратИзНЗП
	|	Ложь, // СписаниеНЗП
	|	Ложь // ОприходованиеНЗП
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЗатратыНаВыпуск.Подразделение,
	|			ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|			ЗатратыНаВыпуск.Продукция,
	|			ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|			ЗатратыНаВыпуск.СерияПродукции
	|		ИЗ
	|			РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|		ГДЕ 
	|			ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|			И Не ЗатратыНаВыпуск.Продукция = &ПустСсылка
	|			И ЗатратыНаВыпуск.КодОперации  В (&КодыОпераций)
	|			//ДляРеглУчета И ЗатратыНаВыпуск.Организация = &Организация
	|			
	|		) КАК ЗатратыНаВыпуск
	|	ПО
	|		ВыпускПродукции.Подразделение = ЗатратыНаВыпуск.Подразделение
	|		И ВыпускПродукции.НоменклатурнаяГруппа = ЗатратыНаВыпуск.НоменклатурнаяГруппа
	|		И ВыпускПродукции.Продукция = ЗатратыНаВыпуск.Продукция
	|		И ВыпускПродукции.ХарактеристикаПродукции = ЗатратыНаВыпуск.ХарактеристикаПродукции
	|		И ВыпускПродукции.СерияПродукции = ЗатратыНаВыпуск.СерияПродукции
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПорядокЗакрытияПодразделений%СуффиксОрганизаций%.СрезПоследних(&КонДата, 
	|			Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|			//ДляРеглУчета И Организация = &Организация 
	|			) КАК ПорядокЗакрытия
	|	ПО
	|		ВыпускПродукции.Подразделение = ПорядокЗакрытия.Подразделение	
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.КодОперации <> &КодФиксСтоим
	|	И ЗатратыНаВыпуск.Продукция ЕСТЬ NULL
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаВыпускБезПрямыхРасходов()

// Функция формирует текст запроса по выпуску на распределяемые расходы.
//
// Возвращаемое значение:
//   Текст – текст запроса по выпуску на распределяемые расходы.
//
Функция СформироватьТекстЗапросаВыпускНаРаспределяемыеРасходы()
	
    ТекстЗапроса = "
	|
	|// Выпуск продукции (услуг) на общепроизводственные расходы.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Истина, // НематериальныеЗатраты
	|	Истина, // КосвенныеЗатраты
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.Подразделение.Представление КАК ПодразделениеПредставление,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукцииНаЗатраты.СтатьяЗатратПолучатель,
	|	
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВЫБОР КОГДА ВыпускПродукции.Продукция.ВестиУчетПоСериямВНЗП ТОГДА
	|		ВыпускПродукции.СерияПродукции
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияПродукции,
	|	
	|	ВыпускПродукцииНаЗатраты.Затрата,
	|	ВыпускПродукцииНаЗатраты.ХарактеристикаЗатраты,
	|	ВыпускПродукцииНаЗатраты.СерияЗатраты,
	|	
	|	ВыпускПродукцииНаЗатраты.Затрата.Представление,
	|	ВыпускПродукцииНаЗатраты.ХарактеристикаЗатраты.Представление,
	|	ВыпускПродукцииНаЗатраты.СерияЗатраты.Представление,
	|	
	|	ЕСТЬNULL(ПорядокЗакрытия.НомерПередела, 0) КАК ПодразделениеНомерПередела,
	|	ЕСТЬNULL(РегистрВстречныйВыпуск.ВстречныйВыпуск, Ложь) КАК ВстречныйВыпуск,
	|	Ложь, // КорректировкаНЗП
	|	Ложь, // ВозвратИзНЗП
	|	Ложь, // СписаниеНЗП
	|	Ложь // ОприходованиеНЗП
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПорядокЗакрытияПодразделений%СуффиксОрганизаций%.СрезПоследних(&КонДата, 
	|			Подразделение.ВидПодразделения В (&ВидыПодразделений)
	|			//ДляРеглУчета И Организация = &Организация 
	|			) КАК ПорядокЗакрытия
	|	ПО
	|		ВыпускПродукции.Подразделение = ПорядокЗакрытия.Подразделение
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВыпускПродукции.ПодразделениеПолучатель,
	|			ВыпускПродукции.СтатьяЗатратПолучатель,
	|			ВыпускПродукции.НоменклатурнаяГруппаПолучатель,
	|			ВыпускПродукции.ЗаказПолучатель,
	|			//ДляРеглУчета ВыпускПродукции.СчетДт,
	|			ВыпускПродукции.Продукция КАК Затрата,
	|			ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаЗатраты,
	|			ВыпускПродукции.СерияПродукции КАК СерияЗатраты
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|				
	|		ГДЕ
	|			ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|			И ВыпускПродукции.КодОперации В (&МассивКодыОперацийСписаниеНаЗатраты)
	|			//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|			//ДляУпрУчета И ВыпускПродукции.СтатьяЗатратПолучатель.ХарактерЗатрат = &ОбщепроизводственныеРасходы
	|			//ДляБухУчета И ВыпускПродукции.СчетДт В ИЕРАРХИИ (&СчетОбщепроизводственныеРасходы)
	|
	|		) КАК ВыпускПродукцииНаЗатраты
	|	ПО
	|		ВыпускПродукции.Подразделение = ВыпускПродукцииНаЗатраты.ПодразделениеПолучатель
	|		И (ВыпускПродукции.НоменклатурнаяГруппа = ВыпускПродукцииНаЗатраты.НоменклатурнаяГруппаПолучатель
	|			ИЛИ ВыпускПродукцииНаЗатраты.НоменклатурнаяГруппаПолучатель = &ПустаяНоменклатурнаяГруппа)
	|		И (ВыпускПродукции.Заказ = ВыпускПродукцииНаЗатраты.ЗаказПолучатель
	|			ИЛИ ВыпускПродукцииНаЗатраты.ЗаказПолучатель = Неопределено)
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ВстречныйВыпускПродукции.Продукция КАК Продукция,
	|			ВстречныйВыпускПродукции.Затрата КАК Затрата,
	|			Истина КАК ВстречныйВыпуск
	|		ИЗ
	|			РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&КонДата, 
	|				) КАК ВстречныйВыпускПродукции
	|		ГДЕ
	|			ВстречныйВыпускПродукции.СпособОценкиСтоимости = &СпособОценкиСтоимости
	|			
	|		) КАК РегистрВстречныйВыпуск
	|	ПО
	|		ВыпускПродукции.Продукция = РегистрВстречныйВыпуск.Продукция
	|		И ВыпускПродукцииНаЗатраты.Затрата = РегистрВстречныйВыпуск.Затрата
	|			
	|ГДЕ 
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.КодОперации <> &КодФиксСтоим
	|	И Не ВыпускПродукцииНаЗатраты.Затрата ЕСТЬ NULL
	|	И ВыпускПродукции.Подразделение В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВыпускПродукции.ПодразделениеПолучатель
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|		ГДЕ 
	|			ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|			И ВыпускПродукции.КодОперации В (&МассивКодыОперацийСписаниеНаЗатраты)
	|			//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|		)
	|	//ДляРеглУчета И ВыпускПродукции.Организация = &Организация
	|";
	
Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаВыпускНаРаспределяемыеРасходы()

// Процедура устанавливает параметры запроса для расчета таблицы переделов.
//
Процедура УстановитьПараметрыЗапросТабПеределов(СтруктураШапкиДокумента, Запрос)
	
	НачДата    = НачалоМесяца(СтруктураШапкиДокумента.Дата);
	КонДата    = КонецМесяца (СтруктураШапкиДокумента.Дата);
	
	Запрос.УстановитьПараметр("НачДата",      НачДата);
	Запрос.УстановитьПараметр("КонДата",      КонДата);
	Запрос.УстановитьПараметр("ПустСсылка",   Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СпособОценкиСтоимости", Перечисления.СпособыОценкиСтоимостиВстречногоВыпуска.ПоРасчетнойСтоимости);
	Запрос.УстановитьПараметр("ВидыПодразделений", СтруктураШапкиДокумента.ВидыПодразделенийДляРасчетаПоПодразделениям);
	Запрос.УстановитьПараметр("КодФиксСтоим", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	Запрос.УстановитьПараметр("КодОперацииНаПроизводство", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство);
	Запрос.УстановитьПараметр("Материальные", Перечисления.ВидыЗатрат.Материальные);
	
	МассивКодыОперацийСписаниеНаЗатраты = Новый Массив;
	МассивКодыОперацийСписаниеНаЗатраты.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты);
	Запрос.УстановитьПараметр("МассивКодыОперацийСписаниеНаЗатраты", МассивКодыОперацийСписаниеНаЗатраты);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Запрос.УстановитьПараметр("СчетОбщепроизводственныеРасходы", ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Запрос.УстановитьПараметр("ОбщепроизводственныеРасходы", Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
		
	КонецЕсли;

	МассивКодовОпераций = Новый Массив;
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗПФикс);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПФикс);
	Запрос.УстановитьПараметр("КодыОпераций",  МассивКодовОпераций);
	
	МассивКодовОперацийКорректировка = Новый Массив;
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч);
	МассивКодовОперацийКорректировка.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПФикс);
	Запрос.УстановитьПараметр("КодыОперацииКорректировка", МассивКодовОперацийКорректировка);
	
	МассивКодовОперацийВозврат = Новый Массив;
	МассивКодовОперацийВозврат.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодовОперацийВозврат.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивКодовОперацийВозврат.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП);
	МассивКодовОперацийВозврат.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗПФикс);
	Запрос.УстановитьПараметр("КодыОперацииВозврат", МассивКодовОперацийВозврат);
	
	МассивКодовОперацийОприходование = Новый Массив;
	МассивКодовОперацийОприходование.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП);
	Запрос.УстановитьПараметр("КодыОперацииОприходование", МассивКодовОперацийОприходование);
	
	МассивКодовОперацийСписание = Новый Массив;
	Запрос.УстановитьПараметр("КодыОперацииСписание", МассивКодовОперацийСписание);
	
	Запрос.УстановитьПараметр("ПустаяНоменклатурнаяГруппа", Справочники.НоменклатурныеГруппы.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());

КонецПроцедуры // УстановитьПараметрыЗапросТабПеределов()

// Функция формирует таблицу значений распределения затрат по продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//
// Возвращаемое значение:
//   ТаблицаЗначений – Таблица распределения затрат по продукции.
//
Функция СформироватьТаблицуРаспределенияЗатратПоПродукции(СтруктураШапкиДокумента)
	
	
		ТекстЗапросаСКомментариями = СформироватьТекстЗапросаМатериальныеПроизводственныеРасходы();
		
		ТекстЗапросаСКомментариями = ТекстЗапросаСКомментариями + "
		|ОБЪЕДИНИТЬ ВСЕ
		|" + СформироватьТекстЗапросаНематериальныеПроизводственныеРасходы();
		
		ТекстЗапросаСКомментариями = ТекстЗапросаСКомментариями + "
		|ОБЪЕДИНИТЬ ВСЕ
		|" + СформироватьТекстЗапросаВыпускБезПрямыхРасходов();
		
		Если СтруктураШапкиДокумента.Свойство("УчитыватьОбщепроизводственныеРасходыПриРаспределенииПоПеределам")
		   И СтруктураШапкиДокумента.УчитыватьОбщепроизводственныеРасходыПриРаспределенииПоПеределам Тогда
		   
			ТекстЗапросаСКомментариями = ТекстЗапросаСКомментариями + "
			|ОБЪЕДИНИТЬ ВСЕ
			|" + СформироватьТекстЗапросаВыпускНаРаспределяемыеРасходы();
			
		КонецЕсли;
		
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями, 
		СтруктураШапкиДокумента.ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапросТабПеределов(СтруктураШапкиДокумента, Запрос);
	
	ТабПеределов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТабПеределов;
	
КонецФункции // СформироватьТаблицуРаспределенияЗатратПоПродукции()

// Процедура добавляет новую строку в таблицу корректировки продукции.
//
// Параметры
//	СтрокаТаблицы - СтрокаТаблицыЗначений - Текущая строка таблицы
//	Количество - Число - Количество продукции
//	ТаблицаКорректировкиПродукции - ТаблицаЗначений - Таблица корректировки продукции.
//
Процедура ДобавитьСтрокуТаблицыПродукции(
	СтрокаТаблицы,
	Количество,
	ТаблицаКорректировкиПродукции
	)
	
	НоваяСтрока = ТаблицаКорректировкиПродукции.Добавить();
	НоваяСтрока.Номенклатура = СтрокаТаблицы.Продукция;
	НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаПродукции;
	НоваяСтрока.СерияНоменклатуры = СтрокаТаблицы.СерияПродукции;
	НоваяСтрока.Количество = Количество;
	
КонецПроцедуры // ДобавитьСтрокуВТаблицы()

// Процедура создания таблиц продукции.
//
// Параметры
//	НомерПередела - Число - Начальный номер передела
//	Индекс - Число - Текущий номер таблицы затрат по переделам
//	МаксИндекс - Число - Максимальный номер таблицы затрат по переделам
//	ТаблицаЗатратПоПеределам - ТаблицаЗначений - Таблица затрат по переделам
//	ТабПродукцииОприходование - ТаблицаЗначений - Таблица оприходования НЗП 
//	ТабПродукцииКорректировка - ТаблицаЗначений - Таблица корректировки НЗП
//	ТабПродукцииВозврат - ТаблицаЗначений - Таблица возврата из НЗП
//	ТабПродукции - ТаблицаЗначений - Таблица выпуска продукции.
//
Процедура СозданиеТаблицПродукции(
	НомерПередела,
	Индекс,
	МаксИндекс,
	ТаблицаЗатратПоПеределам,
	ТабПродукцииОприходование,
	ТабПродукцииКорректировка,
	ТабПродукцииВозврат,
	ТабПродукции
	)
	
	ЕстьВстречныйВыпуск = Ложь;
	
	Пока Индекс <= МаксИндекс Цикл
		
		СтрокаТаблицы = ТаблицаЗатратПоПеределам[Индекс];
		
		Если СтрокаТаблицы.ВстречныйВыпуск ТОгда
			СтрокаТаблицы.НомерПередела = 1;
			ЕстьВстречныйВыпуск = Истина;
			
		Иначе 
			Если СтрокаТаблицы.ОприходованиеНЗП Тогда
				ДобавитьСтрокуТаблицыПродукции(
					СтрокаТаблицы,
					0,
					ТабПродукцииОприходование
				);
				
			ИначеЕсли СтрокаТаблицы.КорректировкаНЗП Тогда
				ДобавитьСтрокуТаблицыПродукции(
					СтрокаТаблицы,
					0,
					ТабПродукцииКорректировка
				);
				
			ИначеЕсли СтрокаТаблицы.ВозвратИзНЗП Тогда
				ДобавитьСтрокуТаблицыПродукции(
					СтрокаТаблицы,
					0,
					ТабПродукцииВозврат
				);
				
			ИначеЕсли СтрокаТаблицы.СписаниеНЗП Тогда
				НоваяСтрока = ТабПродукции.Добавить();
				НоваяСтрока.Номенклатура = СтрокаТаблицы.Затрата;
				НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаЗатраты;
				НоваяСтрока.СерияНоменклатуры = СтрокаТаблицы.СерияЗатраты;
				НоваяСтрока.Количество = 0;
				
			Иначе
				ДобавитьСтрокуТаблицыПродукции(
					СтрокаТаблицы,
					1,
					ТабПродукции
				);
				
				НоваяСтрока = ТабПродукции.Добавить();
				НоваяСтрока.Номенклатура = СтрокаТаблицы.Затрата;
				НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаЗатраты;
				НоваяСтрока.СерияНоменклатуры = СтрокаТаблицы.СерияЗатраты;
				НоваяСтрока.Количество = 0;  
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Если ЕстьВстречныйВыпуск Тогда
		НомерПередела = НомерПередела + 1;
	КонецЕсли;
	
КонецПроцедуры // СозданиеТаблицПродукции()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УСТАНОВКИ НОМЕРОВ ПЕРЕДЕЛОВ В ТАБЛИЦАХ

// Процедура устанавливает номер передела для затрат по таблицы продукции.
//
// Параметры
//	НомерПередела - Число - Текущий номер передела
//	ОприходованиеНЗП - Булево - Признак таблицы оприходования НЗП
//	КорректировкаНЗП - Булево - Признак таблицы корректировки НЗП
//	ВозвратИзНЗП - Булево - Признак таблицы возврата из НЗП
//	КосвенныеЗатраты - Булево - Признак таблицы списания на косвенные затраты
//	УчитыватьСписаниеНЗП - Булево - Признак необходимости учитывать списание НЗП
//	ПроставленПередел - Булево - Признак, что был проставлен номер передела
//	ТаблицаПродукции - ТаблицаЗначений - Таблица продуции
//	ТаблицаЗатратПоПеределам - ТаблицаЗначений - Таблица распределения затрат по переделам
//	ТаблицаПродукцииУстановленные - ТаблицаЗначений - Таблица продукции, для которой был установлен номер передела.
//
Процедура УстановитьНомерПеределаПоТаблице(
	НомерПередела,
	ОприходованиеНЗП,
	КорректировкаНЗП,
	ВозвратИзНЗП,
	УчитыватьСписаниеНЗП,
	ПроставленПередел,
	ТаблицаПродукции,
	ТаблицаЗатратПоПеределам,
	ТаблицаПродукцииУстановленные
	)
	
	Если ТаблицаПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	МассивУдаляемыхСтрок = Новый Массив;
	
	СтруктураПоиска.Вставить("Количество", 0);
	МассивСтрок = ТаблицаПродукции.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		// Проверяем таблицу установленных.
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("СерияНоменклатуры", СтрокаТаблицы.СерияНоменклатуры);
		МассивСтрокУстановленные = ТаблицаПродукцииУстановленные.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрокУстановленные.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
	
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Затрата", СтрокаТаблицы.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаЗатраты", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("СерияЗатраты", СтрокаТаблицы.СерияНоменклатуры);
		СтруктураПоиска.Вставить("ОприходованиеНЗП", ОприходованиеНЗП);
		СтруктураПоиска.Вставить("КорректировкаНЗП", КорректировкаНЗП);
		СтруктураПоиска.Вставить("ВозвратИзНЗП", ВозвратИзНЗП);
		СтруктураПоиска.Вставить("ВстречныйВыпуск", Ложь); // Для встречного выпуска уже проставлен 1-ый передел
		СтруктураПоиска.Вставить("НомерПередела", 0);
		
		Если Не УчитыватьСписаниеНЗП Тогда
			СтруктураПоиска.Вставить("СписаниеНЗП", Ложь);
		КонецЕсли;
		
		МассивСтрокЗатрат = ТаблицаЗатратПоПеределам.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаТаблицыЗатрат Из МассивСтрокЗатрат Цикл
			СтрокаТаблицыЗатрат.НомерПередела = НомерПередела;
			ПроставленПередел = Истина;
		КонецЦикла;
				
		НоваяСтрока = ТаблицаПродукцииУстановленные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Для Каждого Строка Из МассивУдаляемыхСтрок Цикл
		ТаблицаПродукции.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры // УстановитьНомерПеределаПоТаблице()

// Функция устанавливает номер передела в таблице затрат.
//
// Параметры
//	НомерПередела - Число - Текущий номер передела
//	ТабПродукцииОприходование - ТаблицаЗначений - Таблица оприходования НЗП 
//	ТабПродукцииКорректировка - ТаблицаЗначений - Таблица корректировки НЗП
//	ТабПродукцииВозврат - ТаблицаЗначений - Таблица возврата из НЗП
//	ТабПродукции - ТаблицаЗначений - Таблица выпуска продукции
//	ТаблицаЗатратПоПеределам - ТаблицаЗначений - Таблица затрат по переделам
//	ТаблицаПродукцииУстановленные - ТаблицаЗначений - Таблица продукции, для которой был установлен номер передела.
//
// Возвращаемое значение:
//	Булево - 	Истина - Номер передела установлен
//				Ложь - Не удалось установить номер передела для строк таблицы затрат.
//
Функция УстановитьНомерПеределаВТаблицеЗатрат(
	НомерПередела,
	ТабПродукцииОприходование,
	ТабПродукцииКорректировка,
	ТабПродукцииВозврат,
	ТабПродукции,
	ТаблицаЗатратПоПеределам,
	ТабПродукцияУстановленные
	)
	
	ПроставленПередел = Ложь;
	
	// Обрабатываем таблицу оприходования.
	УстановитьНомерПеределаПоТаблице(
		НомерПередела,
		Истина, // ОприходованиеНЗП,
		Ложь, // КорректировкаНЗП,
		Ложь, // ВозвратИзНЗП,
		Ложь, // УчитыватьСписаниеНЗП
		ПроставленПередел,
		ТабПродукцииОприходование,
		ТаблицаЗатратПоПеределам,
		ТабПродукцияУстановленные
		);

	// Обрабатываем таблицу корректировки.
	УстановитьНомерПеределаПоТаблице(
		НомерПередела,
		Ложь, // ОприходованиеНЗП,
		Истина, // КорректировкаНЗП,
		Ложь, // ВозвратИзНЗП,
		Ложь, // УчитыватьСписаниеНЗП
		ПроставленПередел,
		ТабПродукцииКорректировка,
		ТаблицаЗатратПоПеределам,
		ТабПродукцияУстановленные
		);
				
	// Обрабатываем таблицу возвратов.
	УстановитьНомерПеределаПоТаблице(
		НомерПередела,
		Ложь, // ОприходованиеНЗП,
		Ложь, // КорректировкаНЗП,
		Истина, // ВозвратИзНЗП,
		Ложь, // УчитыватьСписаниеНЗП
		ПроставленПередел,
		ТабПродукцииВозврат,
		ТаблицаЗатратПоПеределам,
		ТабПродукцияУстановленные
		);
		
	// Обрабатываем таблицу производства.
	УстановитьНомерПеределаПоТаблице(
		НомерПередела,
		Ложь, // ОприходованиеНЗП,
		Ложь, // КорректировкаНЗП,
		Ложь, // ВозвратИзНЗП,
		Истина, // УчитыватьСписаниеНЗП
		ПроставленПередел,
		ТабПродукции,
		ТаблицаЗатратПоПеределам,
		ТабПродукцияУстановленные
		);
		
	Возврат ПроставленПередел;
	
КонецФункции // УстановитьНомерПеределаВТаблицахПродукции();

// Функция устанавливает признак встречного выпуска в таблице затрат.
//
// Параметры
//	Индекс - Число - Текущий номер таблицы затрат по переделам
//	МаксИндекс - Число - Максимальный номер таблицы затрат по переделам
//	ТаблицаЗатратПоПеределам - ТаблицаЗначений - Таблица затрат по переделам
//
// Возвращаемое значение:
//	Булево - 	Истина - Номер передела установлен
//				Ложь - Не удалось установить номер передела для строк таблицы затрат.
//
//
Функция УстановитьПризнакВстречногоВыпускаВТаблицеЗатрат(
	Индекс,
	МаксИндекс,
	ТаблицаЗатратПоПеределам
	)
	
	ПроставленПередел = Ложь;
	СтруктураПоиска = Новый Структура;
	
	ИндексСтроки = Индекс;
	Пока ИндексСтроки <= МаксИндекс Цикл
					
		СтрокаТаблицы = ТаблицаЗатратПоПеределам[ИндексСтроки];
		Если СтрокаТаблицы.КосвенныеЗатраты Тогда
						
			СтруктураПоиска.Очистить();
			СтруктураПоиска.Вставить("Продукция", СтрокаТаблицы.Продукция);
			СтруктураПоиска.Вставить("ХарактеристикаПродукции", СтрокаТаблицы.ХарактеристикаПродукции);
			СтруктураПоиска.Вставить("СерияПродукции", СтрокаТаблицы.СерияПродукции);
			СтруктураПоиска.Вставить("ОприходованиеНЗП", Ложь);
			СтруктураПоиска.Вставить("КорректировкаНЗП", Ложь);
			СтруктураПоиска.Вставить("ВозвратИзНЗП", Ложь);
			СтруктураПоиска.Вставить("ВстречныйВыпуск", Ложь);
			СтруктураПоиска.Вставить("НематериальныеЗатраты", Ложь);
			
			МассивСтрок = ТаблицаЗатратПоПеределам.НайтиСтроки(СтруктураПоиска);
						
			Для Каждого СтрокаТаблицыЗатрат Из МассивСтрок Цикл
				
				Если СтрокаТаблицыЗатрат.СтатьяЗатрат <> Неопределено
				   И СтрокаТаблицыЗатрат.НомерПередела <> 0 Тогда
							   
					// Если для данной для продукции уже задан номер передела,
					// то установим для текущей строки признак встречного выпуск. 
					СтрокаТаблицы.ВстречныйВыпуск = Истина;
					СтрокаТаблицы.НомерПередела = 1;
								
					ПроставленПередел = Истина;
					НовыйНомерПередела = Ложь;
					
					Прервать;
								
				КонецЕсли;
				
			КонецЦикла;
						
			Если ПроставленПередел Тогда
							
				// Проставим признак встречного выпуска для строк с аналогичной аналитикой.
				СтруктураПоиска.Очистить();
				СтруктураПоиска.Вставить("Подразделение", СтрокаТаблицы.Подразделение);
				СтруктураПоиска.Вставить("НоменклатурнаяГруппа", СтрокаТаблицы.НоменклатурнаяГруппа);
				СтруктураПоиска.Вставить("СтатьяЗатрат", СтрокаТаблицы.СтатьяЗатрат);
				СтруктураПоиска.Вставить("КосвенныеЗатраты", Истина);
				
				МассивСтрок = ТаблицаЗатратПоПеределам.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаТаблицыЗатрат Из МассивСтрок Цикл
					СтрокаТаблицыЗатрат.ВстречныйВыпуск = Истина;
					СтрокаТаблицыЗатрат.НомерПередела = 1;
				КонецЦикла;
				
				Прервать;
				
			КонецЕсли;
						
		КонецЕсли;
					
		ИндексСтроки = ИндексСтроки + 1;
					
	КонецЦикла;
	
	Возврат ПроставленПередел;
	
КонецФункции // УстановитьПризнакВстречногоВыпускаВТаблицеЗатрат()

// Процедура выводить сообщения об ошибках при распределении затрат по переделам.
//
// Параметры
//	Индекс - Число - Текущий номер таблицы затрат по переделам
//	МаксИндекс - Число - Максимальный номер таблицы затрат по переделам
//	ТаблицаЗатратПоПеределам - ТаблицаЗначений - Таблица затрат по переделам
//
Процедура ВывестиСообщенияОбОшибкахРаспределенияПоПеределам(
	Индекс,
	МаксИндекс,
	ТаблицаЗатратПоПеределам
	)
	
	ТаблицаОшибок = УправлениеПроизводством.КопироватьСтруктуруТаблицыЗначений(ТаблицаЗатратПоПеределам, "
		|Подразделение, 
		|НоменклатурнаяГруппа, 
		|СтатьяЗатрат, 
		|Затрата, 
		|ХарактеристикаЗатраты, 
		|СерияЗатраты, 
		|Продукция, 
		|ХарактеристикаПродукции, 
		|СерияПродукции
		|");
				
	ИндексСтроки = Индекс;	
	Пока ИндексСтроки <= МаксИндекс Цикл
					
		СтрокаТаблицы = ТаблицаЗатратПоПеределам[ИндексСтроки];
					
		// Заполняем таблицу ошибок, если затрата не относится к косвенным расходам.
		Если Не СтрокаТаблицы.КосвенныеЗатраты Тогда
			
			НоваяСтрока = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЕсли;
					
		ИндексСтроки = ИндексСтроки + 1;
					
	КонецЦикла;
				
	ТаблицаОшибок.Свернуть("
		|Подразделение, 
		|НоменклатурнаяГруппа, 
		|СтатьяЗатрат, 
		|Затрата, 
		|ХарактеристикаЗатраты, 
		|СерияЗатраты, 
		|Продукция, 
		|ХарактеристикаПродукции, 
		|СерияПродукции");
				
	// Выведем сообщения о нераспределенных по переделам затрат.
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не выполнено распределение по переделам для затрат: ");
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			ОбщегоНазначения.СообщитьОбОшибке("
				|Подразделение: " + СтрокаТаблицы.Подразделение + "
				|Номенклатурная группа: " + СтрокаТаблицы.НоменклатурнаяГруппа + "
				|Статья затрат: " + СтрокаТаблицы.СтатьяЗатрат + "
				|- Затрата: " + СтрокаТаблицы.Затрата 
					+ ", характеристика: " + СтрокаТаблицы.ХарактеристикаЗатраты 
					+ ", серия: " + СтрокаТаблицы.СерияЗатраты + "
				|- Продукция: " + СтрокаТаблицы.Продукция 
					+ ", характеристика: " + СтрокаТаблицы.ХарактеристикаПродукции 
					+ ", серия: " + СтрокаТаблицы.СерияПродукции + "
				|");
			КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры // ВывестиСообщенияОбОшибкахРаспределенияПоПеределам()

// Процедура заполняет количество продукции в переданной таблице значений.
//
// Параметры
//	ТаблицаПродукции - ТаблицаЗначений - Таблица продуции
//	ТаблицаКорректировкиПродукции - ТаблицаЗначений - Таблица корректировки продукции
//		(оприходование, корректировка, возврат).
//
Процедура ЗаполнитьКоличествоВыпускаВТаблице(
	ТаблицаПродукции,
	ТаблицаКорректировкиПродукции
	)
	
	ПараметрыПоиска = Новый Структура;
	
	Для Каждого СтрокаТаблицы из ТаблицаКорректировкиПродукции Цикл
		
		ПараметрыПоиска.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		ПараметрыПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		ПараметрыПоиска.Вставить("СерияНоменклатуры", СтрокаТаблицы.СерияНоменклатуры);
		
		МассивСтрок = ТаблицаПродукции.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрок.Количество() > 0 Тогда		
			СтрокаТаблицы.Количество = МассивСтрок[0].Количество;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКоличествоВыпускаВТаблице()

// Функция создает структуру переделов по продукции
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	ТабПеределов - ТаблицаЗначений - Таблица распределения затрат по продукции
//	ТабПродукция - ТаблицаЗначений - Таблица распределения продукции по переделам
//
Процедура СоздатьТабПеределов(
	СтруктураШапкиДокумента, 
	ТабПеределов, 
	ТабПродукция
	)
	
	ТабПеределов.Колонки.Добавить("НомерПередела", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0)));
	
	ТабПродукции = Новый ТаблицаЗначений();
	ТабПродукции.Колонки.Добавить("Номенклатура");
	ТабПродукции.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТабПродукции.Колонки.Добавить("СерияНоменклатуры");
	ТабПродукции.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0)));
	
	ТабПродукцииОприходование = ТабПродукции.Скопировать();
	ТабПродукцииКорректировка = ТабПродукции.Скопировать();
	ТабПродукцииВозврат 	  = ТабПродукции.Скопировать();
	
	МаксНомерПередела = 0;
	ПараметрыПоиска = Новый Структура;
	
	//Определим затраты которые не являются продукцией
	Для Каждого СтрокаТЗ Из ТабПеределов Цикл
		Если СтрокаТЗ.ПодразделениеНомерПередела>0 Тогда
			Если МаксНомерПередела < СтрокаТЗ.ПодразделениеНомерПередела Тогда
				МаксНомерПередела = СтрокаТЗ.ПодразделениеНомерПередела;
			КонецЕсли;
			Если не СтрокаТЗ.ВстречныйВыпуск Тогда
				НовСтрока = ТабПродукции.Добавить();
				НовСтрока.Номенклатура = СтрокаТЗ.Продукция;
				НовСтрока.ХарактеристикаНоменклатуры = СтрокаТЗ.ХарактеристикаПродукции;
				НовСтрока.СерияНоменклатуры = СтрокаТЗ.СерияПродукции;
				НовСтрока.Количество = 1;
					
				НовСтрока = ТабПродукции.Добавить();
				НовСтрока.Номенклатура = СтрокаТЗ.Затрата;
				НовСтрока.ХарактеристикаНоменклатуры = СтрокаТЗ.ХарактеристикаЗатраты;
				НовСтрока.СерияНоменклатуры = СтрокаТЗ.СерияЗатраты;
				НовСтрока.Количество = 0;  
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Табпродукции.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры","Количество");
	
	Для каждого СтрокаТаблицы Из ТабПродукции Цикл
		Если СтрокаТаблицы.Количество =0 Тогда 
 			ПараметрыПоиска.Очистить();
			ПараметрыПоиска.Вставить( "Затрата", 				СтрокаТаблицы.Номенклатура);
			ПараметрыПоиска.Вставить( "ХарактеристикаЗатраты", 	СтрокаТаблицы.ХарактеристикаНоменклатуры);
			ПараметрыПоиска.Вставить( "СерияЗатраты", 			СтрокаТаблицы.СерияНоменклатуры);
			ПараметрыПоиска.Вставить( "ОприходованиеНЗП", 		Ложь);
			ПараметрыПоиска.Вставить( "КорректировкаНЗП", 		Ложь);
			ПараметрыПоиска.Вставить( "ВозвратИзНЗП", 			Ложь);
			ПараметрыПоиска.Вставить( "ВстречныйВыпуск", 		Ложь);
			НаборСтрок = ТабПеределов.НайтиСтроки(ПараметрыПоиска);
			Для Каждого СтрокаПрод Из НаборСтрок Цикл
				СтрокаПрод.НомерПередела = СтрокаПрод.ПодразделениеНомерПередела;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТабПродукции.Очистить();
	ТабПеределов.Сортировать("НомерПередела Убыв");
	
	ТекСтрока = ТабПеределов.Найти(0, "НомерПередела");		
	Если ТекСтрока = Неопределено Тогда
		Индекс = ТабПеределов.Количество()-1;
	Иначе
		Индекс = ТабПеределов.Индекс(ТекСтрока);
	КонецЕсли;
	МаксИндекс = ТабПеределов.Количество() - 1;
	
	ТекПередел = МаксНомерПередела + 1;
	
	// Заполним таблицы выпуска и корректировки продукции.
	СозданиеТаблицПродукции(
		ТекПередел,
		Индекс,
		МаксИндекс,
		ТабПеределов,
		ТабПродукцииОприходование,
		ТабПродукцииКорректировка,
		ТабПродукцииВозврат,
		ТабПродукции
		);
	
	Табпродукции.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры","Количество");
	ТабпродукцииОприходование.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры","Количество");
	ТабпродукцииКорректировка.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры","Количество");
	ТабПродукцииВозврат.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры","Количество");
	
	// Обрабатываем таблицу оприходования.
	ЗаполнитьКоличествоВыпускаВТаблице(
		ТабПродукции,
		ТабПродукцииОприходование
		);
		
	// Обрабатываем таблицу корректировки.	
	ЗаполнитьКоличествоВыпускаВТаблице(
		ТабПродукции,
		ТабПродукцииКорректировка
		);
		
	// Обрабатываем таблицу возвратов.
	ЗаполнитьКоличествоВыпускаВТаблице(
		ТабПродукции,
		ТабПродукцииВозврат
		);
		
	ТабПродукцияУстановленные = Новый ТаблицаЗначений();
	ТабПродукцияУстановленные.Колонки.Добавить("Номенклатура");
	ТабПродукцияУстановленные.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТабПродукцияУстановленные.Колонки.Добавить("СерияНоменклатуры");
	
	СчетчикКоличестваЦиклов = 0;
	
	ПроставленПередел = Истина;
	Пока ПроставленПередел Цикл
		
		ПроставленПередел = Ложь;
		ТабПродукцияУстановленные.Очистить();
		
		// Проверим контрольный счетчик.
		Если СчетчикКоличестваЦиклов >= 1000 Тогда
			Прервать;
		КонецЕсли;
		СчетчикКоличестваЦиклов = СчетчикКоличестваЦиклов + 1;
		
		// Установим номер передела в таблице затрат.
		ПроставленПередел = УстановитьНомерПеределаВТаблицеЗатрат(
			ТекПередел,
			ТабПродукцииОприходование,
			ТабПродукцииКорректировка,
			ТабПродукцииВозврат,
			ТабПродукции,
			ТабПеределов,
			ТабПродукцияУстановленные
			);
					
		ТабПеределов.Сортировать("НомерПередела Убыв");
		ТекСтрока = ТабПеределов.Найти(0, "НомерПередела");		
		
		// Если нет строк с пустыми переделами, выходим из цикла.
		Если ТекСтрока = Неопределено Тогда
			Прервать;
		КонецЕсли;
			
		Индекс = ТабПеределов.Индекс(ТекСтрока);
			
		НовыйНомерПередела = Истина;
			
		// Если переделы проставить не удалось, попробуем заполнить встречный выпуск.
		Если Не ПроставленПередел Тогда
				
			ПроставленПередел = УстановитьПризнакВстречногоВыпускаВТаблицеЗатрат(
				Индекс,
				МаксИндекс,
				ТабПеределов
				);
				
			Если ПроставленПередел Тогда
					
				ТабПеределов.Сортировать("НомерПередела Убыв");
				ТекСтрока = ТабПеределов.Найти(0, "НомерПередела");
				Если ТекСтрока <> Неопределено Тогда
					Индекс = ТабПеределов.Индекс(ТекСтрока);
				Иначе
					Прервать;
				КонецЕсли;
				
				НовыйНомерПередела = Ложь;
					
			КонецЕсли;
				
		КонецЕсли;
			
		// Если переделы проставить не удалось, выведем сообщения об ошибках.
		Если Не ПроставленПередел Тогда
				
			ВывестиСообщенияОбОшибкахРаспределенияПоПеределам(
				Индекс,
				МаксИндекс,
				ТабПеределов
				);
			Прервать;
				
		КонецЕсли;
			
		ТабПродукции.ЗаполнитьЗначения(0,"Количество");
		ТабПродукцииОприходование.ЗаполнитьЗначения(0,"Количество");
		ТабПродукцииКорректировка.ЗаполнитьЗначения(0,"Количество");
		ТабПродукцииВозврат.ЗаполнитьЗначения(0,"Количество");
		
		Пока Индекс <= МаксИндекс Цикл
			СтрокаТЗ   = ТабПеределов[Индекс];
			
			Если (Не СтрокаТЗ.ОприходованиеНЗП) 
			   И (Не СтрокаТЗ.КорректировкаНЗП) 
			   И (Не СтрокаТЗ.ВозвратИзНЗП) 
			   И (Не СтрокаТЗ.СписаниеНЗП)
			   И (Не СтрокаТЗ.ВстречныйВыпуск)
			   И СтрокаТЗ.НомерПередела = 0
			Тогда
				НовСтрока = ТабПродукции.Добавить();
				НовСтрока.Номенклатура = СтрокаТЗ.Продукция;
				НовСтрока.ХарактеристикаНоменклатуры = СтрокаТЗ.ХарактеристикаПродукции;
				НовСтрока.СерияНоменклатуры = СтрокаТЗ.СерияПродукции;
				НовСтрока.Количество = 1;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		ТабПродукции.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры","Количество");
		ТабПродукцииОприходование.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры","Количество");
		ТабПродукцииКорректировка.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры","Количество");
		ТабПродукцииВозврат.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры","Количество");
		
		// Обрабатываем таблицу оприходования.
		ЗаполнитьКоличествоВыпускаВТаблице(
			ТабПродукции,
			ТабПродукцииОприходование
			);
			
		// Обрабатываем таблицу корректировки.	
		ЗаполнитьКоличествоВыпускаВТаблице(
			ТабПродукции,
			ТабПродукцииКорректировка
			);
			
		// Обрабатываем таблицу возвратов.
		ЗаполнитьКоличествоВыпускаВТаблице(
			ТабПродукции,
			ТабПродукцииВозврат
			);
			
		Если НовыйНомерПередела Тогда
			ТекПередел = ТекПередел + 1;
		КонецЕсли;
		
	КонецЦикла;  // Пока ПроставленПередел
	
	Если ТабПеределов.Найти(Истина, "НематериальныеЗатраты") <> Неопределено Тогда
		
		Для Каждого СтрокаТаб Из ТабПеределов Цикл
			Если СтрокаТаб.НематериальныеЗатраты И ТипЗнч(СтрокаТаб.Затрата) <> Тип("СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск") Тогда
				СтрокаТаб.Затрата 				= Неопределено;
				СтрокаТаб.ХарактеристикаЗатраты = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				СтрокаТаб.СерияЗатраты 			= Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		
		// Для нематериальных затрат установим максимальный номер передела из рассчитанных.
		ТаблицаНематериальныхЗатрат = ТабПеределов.Скопировать();
		ТаблицаНематериальныхЗатрат.Свернуть("НематериальныеЗатраты, Подразделение, СтатьяЗатрат, Затрата, НомерПередела");
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НематериальныеЗатраты", Истина);
		СтруктураПоиска.Вставить("Затрата", Неопределено);
		МассивСтрокЗатрат = ТабПеределов.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаЗатраты Из МассивСтрокЗатрат Цикл
			
			СтруктураПоиска.Вставить("Подразделение", СтрокаЗатраты.Подразделение);
			СтруктураПоиска.Вставить("СтатьяЗатрат", СтрокаЗатраты.СтатьяЗатрат);
			
			МассивСтрок = ТаблицаНематериальныхЗатрат.НайтиСтроки(СтруктураПоиска);
			МаксНомерПередела = 0;
			Для Каждого Строка Из МассивСтрок Цикл
				МаксНомерПередела = Макс(МаксНомерПередела, Строка.НомерПередела);
			КонецЦикла;
			СтрокаЗатраты.НомерПередела = МаксНомерПередела;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Продукция выпущенная на переделе.
	ТабТемп = ТабПеределов.Скопировать();
	
	// Рассчитаем максимальный уровень передела для продукции
	ТабТемп.Свернуть("Подразделение, Продукция, ХарактеристикаПродукции, СерияПродукции, НомерПередела, ОприходованиеНЗП, КорректировкаНЗП, ВозвратИзНЗП, СписаниеНЗП");
	ТабПродукция = ТабТемп.Скопировать();
	ТабПродукция.Свернуть("Подразделение, Продукция, ХарактеристикаПродукции, СерияПродукции, ОприходованиеНЗП, КорректировкаНЗП, ВозвратИзНЗП, СписаниеНЗП");
	ТабПродукция.Колонки.Добавить("НомерПередела", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0)));
	СтруктПоиска = Новый Структура;
	Для Каждого СтрокаТаб Из ТабПродукция Цикл
		СтруктПоиска.Вставить("Подразделение", 		СтрокаТаб.Подразделение);
		СтруктПоиска.Вставить("Продукция", 			СтрокаТаб.Продукция);
		СтруктПоиска.Вставить("ХарактеристикаПродукции", СтрокаТаб.ХарактеристикаПродукции);
		СтруктПоиска.Вставить("СерияПродукции", 	СтрокаТаб.СерияПродукции);
		СтруктПоиска.Вставить("ОприходованиеНЗП", 	СтрокаТаб.ОприходованиеНЗП);
		СтруктПоиска.Вставить("КорректировкаНЗП", 	СтрокаТаб.КорректировкаНЗП);
		СтруктПоиска.Вставить("ВозвратИзНЗП", 		СтрокаТаб.ВозвратИзНЗП);
		СтруктПоиска.Вставить("СписаниеНЗП", 		СтрокаТаб.СписаниеНЗП);
		
		НаборСтрок = ТабТемп.НайтиСтроки(СтруктПоиска);
		МаксНомерПередела = 0;
		Для Каждого Строка Из НаборСтрок Цикл
			МаксНомерПередела = Макс(МаксНомерПередела, Строка.НомерПередела);
		КонецЦикла;
		СтрокаТаб.НомерПередела = МаксНомерПередела;
	КонецЦикла;
	ТабПродукция.Сортировать("НомерПередела Возр");
	ТабТемп = 0;
	
	ТабПеределов.Свернуть("Подразделение, НоменклатурнаяГруппа, СтатьяЗатрат, Затрата, ХарактеристикаЗатраты, СерияЗатраты, НомерПередела, ВстречныйВыпуск, ОприходованиеНЗП, КорректировкаНЗП, ВозвратИзНЗП");
	ТабПеределов.Сортировать("НомерПередела Возр");
	
	ТабПродукция.Свернуть("Подразделение, Продукция, ХарактеристикаПродукции, СерияПродукции, НомерПередела, ОприходованиеНЗП, КорректировкаНЗП, ВозвратИзНЗП");
	ТабПродукция.Сортировать("НомерПередела Возр");
	
	Если не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		ТабПеределов.Колонки.добавить("Организация");
		ТабПеределов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");

		ТабПродукция.Колонки.добавить("Организация");
		ТабПродукция.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	КонецЕсли;
	
КонецПроцедуры // СоздатьТабПеределов()

// Процедура производит распределение продукции и затрат по переделам.
//
Процедура РаспределениеПродукцииИЗатратПоПеределам(СтруктураШапкиДокумента) Экспорт
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.Сообщение("Распределение продукции и затрат по переделам");
	
	ДокументОбъект = СтруктураШапкиДокумента.Ссылка.ПолучитьОбъект();
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		ДвиженияРаспределениеПродукцииПоПеределам 	= ДокументОбъект.Движения.РаспределениеПродукцииПоПеределам;
		ДвиженияРаспределениеЗатратПоПеределам 		= ДокументОбъект.Движения.РаспределениеЗатратПоПеределам;
	Иначе
		ДвиженияРаспределениеПродукцииПоПеределам 	= ДокументОбъект.Движения.РаспределениеПродукцииПоПеределамОрганизаций;
		ДвиженияРаспределениеЗатратПоПеределам 		= ДокументОбъект.Движения.РаспределениеЗатратПоПеределамОрганизаций;
	КонецЕсли;
	
	РаспределениеПродукцииПоПеределам = ДвиженияРаспределениеПродукцииПоПеределам.Выгрузить();
	РаспределениеПродукцииПоПеределам.Очистить();
	РаспределениеЗатратПоПеределам = ДвиженияРаспределениеЗатратПоПеределам.Выгрузить();
	РаспределениеЗатратПоПеределам.Очистить();
		
	ТабПеределов = СформироватьТаблицуРаспределенияЗатратПоПродукции(СтруктураШапкиДокумента);
	ТабПродукция = Новый ТаблицаЗначений;

	Если ТабПеределов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьТабПеределов(СтруктураШапкиДокумента, ТабПеределов, ТабПродукция);
		
	Для Каждого Строка Из ТабПеределов Цикл
		НоваяСтрока = РаспределениеЗатратПоПеределам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	Для Каждого Строка Из ТабПродукция Цикл
		НоваяСтрока = РаспределениеПродукцииПоПеределам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
		
	ДвиженияРаспределениеПродукцииПоПеределам.Очистить();
	ДвиженияРаспределениеПродукцииПоПеределам.Записать();
	
	Если РаспределениеПродукцииПоПеределам.Количество() > 0 Тогда
		ДвиженияРаспределениеПродукцииПоПеределам.мПериод = НачалоМесяца(СтруктураШапкиДокумента.Период);
		ДвиженияРаспределениеПродукцииПоПеределам.мТаблицаДвижений = РаспределениеПродукцииПоПеределам;
		ДвиженияРаспределениеПродукцииПоПеределам.ВыполнитьДвижения();
		ДвиженияРаспределениеПродукцииПоПеределам.Записать();
	КонецЕсли;
	
	ДвиженияРаспределениеЗатратПоПеределам.Очистить();
	ДвиженияРаспределениеЗатратПоПеределам.Записать();
	
	Если РаспределениеЗатратПоПеределам.Количество() > 0 Тогда
		ДвиженияРаспределениеЗатратПоПеределам.мПериод = НачалоМесяца(СтруктураШапкиДокумента.Период);
		ДвиженияРаспределениеЗатратПоПеределам.мТаблицаДвижений = РаспределениеЗатратПоПеределам;
		ДвиженияРаспределениеЗатратПоПеределам.ВыполнитьДвижения();
		ДвиженияРаспределениеЗатратПоПеределам.Записать();
	КонецЕсли;
	
КонецПроцедуры // РаспределениеПродукцииИЗатратПоПеределам()

