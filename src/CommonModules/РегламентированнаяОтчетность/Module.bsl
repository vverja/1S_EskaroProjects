////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

//Выполняет в строке ГДЕ замену символов ЧТО на соответствующие по номерам символы из строки НаЧто
//
Функция ЗаменитьОдниСимволыДругими(Что,Где,НаЧто) Экспорт
	Рез = Где;
	Для Сч=1 По СтрДлина(Что) Цикл
		Рез = СтрЗаменить(Рез,Сред(Что,Сч,1),Сред(НаЧто,Сч,1));
	КонецЦикла;
	Возврат Рез;
КонецФункции

// Проверяет, написана ли строка только русскими и латинскими буквами 
//
// Параметры:
//  СтрокаПараметр - строка, проверяемая строка.
//
// Возвращаемое значение:
//		Истина - строка состоит из допустимых символов
//		Ложь - в строке встречаются недопустимые символы
// 
// Описание:
//		Строка проверяется на наличие только русских и латинских букв;
//		кроме того,	допускаются дефис, "Ё", "ё".
//
Функция СтрокаНаписанаРусскимиИлиЛатинскими(Знач СтрокаПараметр) Экспорт
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);	

	Русские = 0;     
	КоличествоСимволов = СтрДлина(СтрокаПараметр);
	
	Если  КоличествоСимволов > 0 Тогда
		ПервыйСимвол = КодСимвола(Лев(СтрокаПараметр,1)); 
		Если  (ПервыйСимвол >= 192) или (ПервыйСимвол = 184) или (ПервыйСимвол = 168) Тогда
			Русские = 1;
		КонецЕсли;
	КонецЕсли;
	
	СписокДопустимыхЗначений = Новый СписокЗначений;
	СписокДопустимыхЗначений.Добавить(184);   // ё
	СписокДопустимыхЗначений.Добавить(168);   // Ё
	СписокДопустимыхЗначений.Добавить(45);   //  "-"

	Для Сч = 1 По КоличествоСимволов Цикл
		Код = КодСимвола(Сред(СтрокаПараметр,Сч));   
		// Большие латинские буквы: 65 - 90
		// Маленькие латинские буквы: 97 - 122
		// Русские буквы: 192 и больше
		
		//русские:
		Если (Русские = 1) Тогда
			Если (СписокДопустимыхЗначений.НайтиПоЗначению(Код) = Неопределено) и (Код < 192)  Тогда
				Возврат 0;
			КонецЕсли;

		// латинские:	
		Иначе 
			Если (Код <> 45) и 
			((Код < 65) или	(Код > 90) и (Код < 97) или (Код > 122))  Тогда    
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат 1;

КонецФункции // СтрокаНаписанаРусскимиИлиЛатинскими()

// Дополняет строку указанным символом до указанной длины
//
// Параметры: 
//  Стр            - Дополняемая строка
//  Длина          - Требуемая длина результирующей строки
//  Чем            - Символ, которым дополняется строка
//
// Возвращаемое значение:
//  Строка дополненная указанным символом до указанной длины
//
Функция ДополнитьСтроку(Знач Стр, Длина, Чем=" ", Режим = 0) Экспорт
	
	СимволовДополнить = Длина -  СтрДлина(Стр);
	Добавок = "";
	Для Н=1 по СимволовДополнить Цикл
		Добавок =	Добавок + Чем;
	КонецЦикла;
	Возврат ?(Режим=0, Добавок + Стр, Стр + Добавок);
	
КонецФункции 

// Выполянет преобразование цифры в римскую нотацию 
//
// Параметры
//		Цифра - число, целое, от 0 до 9
//      РимскаяЕдиница,РимскаяПятерка,РимскаяДесятка - строки, соответствующие римские цифры
//
// Возвращаемое значение
//		строка
//
// Описание
//		записывает "обычную" цифру римскими цифрами,
//		например:
//				ПреобразоватьЦифруВРимскуюНотацию(7,"I","V","X") = "VII"
//
Функция ПреобразоватьЦифруВРимскуюНотацию(Цифра,РимскаяЕдиница,РимскаяПятерка,РимскаяДесятка) Экспорт

	РимскаяЦифра="";
	Если Цифра = 1 Тогда
	   РимскаяЦифра = РимскаяЕдиница
	ИначеЕсли Цифра = 2 Тогда
	   РимскаяЦифра = РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 3 Тогда
	   РимскаяЦифра = РимскаяЕдиница + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 4 Тогда
	   РимскаяЦифра = РимскаяЕдиница + РимскаяПятерка;
	ИначеЕсли Цифра = 5 Тогда
	   РимскаяЦифра = РимскаяПятерка;
	ИначеЕсли Цифра = 6 Тогда
	   РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница;
	ИначеЕсли Цифра = 7 Тогда
	   РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 8 Тогда
	   РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 9 Тогда
	   РимскаяЦифра = РимскаяЕдиница + РимскаяДесятка;
	КонецЕсли;
	Возврат РимскаяЦифра;

КонецФункции //ПреобразоватьЦифруВРимскуюНотацию

// Выполянет преобразование арабского числа в римское 
//
// Параметры
//		АрабскоеЧисло - число, целое, от 0 до 999
//
// Возвращаемое значение
//		строка
//
// Описание
//		записывает "обычное" число римскими цифрами,
//		например:
//				ПреобразоватьЧислоВРимскуюНотацию(17) = "ХVII"
//
Функция ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, ИспЛатинскиеБуквы = Ложь) Экспорт
	
	РимскоеЧисло="";
	cRab = ДополнитьСтроку(АрабскоеЧисло,3);

	Если ИспЛатинскиеБуквы Тогда
		c1 = "I";c5 = "V";c10 = "X";c50 = "L";c100 ="C";c500 = "M";c1000 = "D";
		
	Иначе
		c1 = "1";c5 = "У";c10 = "Х";c50 = "Л";c100 ="С";c500 = "М";c1000 = "Д";
	КонецЕсли;

	nEd = Число(Сред(cRab,3,1));
	nDs = Число(Сред(cRab,2,1));
	nSt = Число(Сред(cRab,1,1));

	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(nSt,c100,c500,c1000);
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(nDs,c10,c50,c100);
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(nEd,c1,c5,c10);

	Возврат РимскоеЧисло;
	
КонецФункции //ПреобразоватьЧислоВРимскуюНотацию

// Выполянет преобразование римского числа в арабское
//
// Параметры
//		РимскоеЧисло - строка, число, записанное римскими цифрами
//
// Возвращаемое значение
//		число
//
// Описание
//		преобразует число, записанное римскими цифрами, в "обычное" число,
//		например:
//				ПреобразоватьЧислоВАрабскуюНотацию("ХVII") = 17
//
Функция ПреобразоватьЧислоВАрабскуюНотацию(РимскоеЧисло) Экспорт
	
	АрабскоеЧисло=0;

	c1 = "1";c5 = "У";c10 = "Х";c50 = "Л";c100 ="С";c500 = "М";c1000 = "Д";

	РимскоеЧисло = СокрЛП(РимскоеЧисло);
	ЧислоСимволов = СтрДлина(РимскоеЧисло);

	Для Сч=1 По ЧислоСимволов Цикл
	   Если Сред(РимскоеЧисло,Сч,1) = c1000 Тогда
		  АрабскоеЧисло = АрабскоеЧисло+1000;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c500 Тогда
		  АрабскоеЧисло = АрабскоеЧисло+500;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c100 Тогда
		  Если (Сч < ЧислоСимволов) И ((Сред(РимскоеЧисло,Сч+1,1) = c500) ИЛИ (Сред(РимскоеЧисло,Сч+1,1) = c1000)) Тогда
			 АрабскоеЧисло = АрабскоеЧисло-100;
		  Иначе
			 АрабскоеЧисло = АрабскоеЧисло+100;
		  КонецЕсли;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c50 Тогда
		  АрабскоеЧисло = АрабскоеЧисло+50;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c10 Тогда
		  Если (Сч < ЧислоСимволов) И ((Сред(РимскоеЧисло,Сч+1,1) = c50) ИЛИ (Сред(РимскоеЧисло,Сч+1,1) = c100)) Тогда
			 АрабскоеЧисло = АрабскоеЧисло-10;
		  Иначе
			 АрабскоеЧисло = АрабскоеЧисло+10;
		  КонецЕсли;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c5 Тогда
		  АрабскоеЧисло = АрабскоеЧисло+5;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c1 Тогда
		  Если (Сч < ЧислоСимволов) И ((Сред(РимскоеЧисло,Сч+1,1) = c5) ИЛИ (Сред(РимскоеЧисло,Сч+1,1) = c10)) Тогда
			 АрабскоеЧисло = АрабскоеЧисло-1;
		  Иначе
			 АрабскоеЧисло = АрабскоеЧисло+1;
		  КонецЕсли;
	   КонецЕсли;
	КонецЦикла;
	Возврат АрабскоеЧисло;
КонецФункции //ПреобразоватьЧислоВАрабскуюНотацию

// КонвертацияОтчетнойФормы
// СтруктураМногостраничныхРазделов - структура многостраничных страниц
// ПоказателиОтчета - показатели отчета
// ВерсияФормы - старая версия формы
// ВызванноИзОтчета - откуда вызывается процедура, Истина из отчета при восстановлении, Ложь - извне
//
Процедура КонвертацияОтчетнойФормы(СохраненныйДок = Неопределено, ЭтаФормаД = Неопределено, ВерсияФормы = Неопределено, ПоказателиОтчета = Неопределено) Экспорт
	Перем ТаблицаСтраницРаздела;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеМногострочныхРазделов;

	Если СохраненныйДок = Неопределено Тогда
		ВызванноИзОтчета = Истина;
	Иначе
		ВызванноИзОтчета = Ложь;
	КонецЕсли;

	Если НЕ ВызванноИзОтчета Тогда

		Если СохраненныйДок = Неопределено Тогда
			Возврат;
		КонецЕсли;

		// Текущая Версия - будет оставаться в отчете всегда прежняя версия, записываться новая не будет
		// поэтому строчки комментарятся
		//ТекущаяВерсия = Отчеты[СохраненныйДок.ИсточникОтчета].ПолучитьФорму(СохраненныйДок.ВыбраннаяФорма).мВерсияФормы;
		ТекущаяВерсия = -1;

		// восстанавливаем сохраненные данные отчета
		СписокСохранения = СохраненныйДок.ДанныеОтчета.Получить();

		Если ВерсияФормы = Неопределено Тогда
			// Получим версию формы, в которой был сохранен отчет
			СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
		КонецЕсли;

		Если НЕ СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета) Тогда
			Возврат;
		КонецЕсли;

		// Если многостраничных разделов нет, то нечего конвертировать.
		Если (НЕ СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов))
		Или (ДанныеМногостраничныхРазделов = Неопределено) Тогда
			Возврат;
		КонецЕсли;

		ВыбраннаяФорма = СохраненныйДок.ИсточникОтчета;

		// Считываем данные многострочной части
		Если НЕ СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
			МногострочнаяЧастьОтсутствует = Истина;
		Иначе
			МногострочнаяЧастьОтсутствует = Ложь;
		КонецЕсли;

		Если ДанныеМногострочныхРазделов = Неопределено Тогда
			МногострочнаяЧастьОтсутствует = Истина;
		Иначе
			МногострочнаяЧастьОтсутствует = Ложь;
		КонецЕсли;

	Иначе

		ТекущаяВерсия = ЭтаФормаД.мВерсияФормы;
		ВыбраннаяФорма = ЭтаФормаД.КлючУникальности.ИсточникОтчета;

		Попытка
			ДанныеМногостраничныхРазделов = ЭтаФормаД.мСтруктураМногостраничныхРазделов;
		Исключение
			ДанныеМногостраничныхРазделов = Неопределено;
		КонецПопытки;

		Если ДанныеМногостраничныхРазделов = Неопределено Тогда
			Возврат;
		КонецЕсли;

		МногострочнаяЧастьОтсутствует = Ложь;

		// Считываем данные многострочной части
		Попытка
			ДанныеМногострочныхРазделов = ЭтаФормаД.мСтруктураМногострочныхРазделов;
		Исключение
			МногострочнаяЧастьОтсутствует = Истина;
		КонецПопытки;

		Если ДанныеМногострочныхРазделов = Неопределено Тогда
			МногострочнаяЧастьОтсутствует = Истина;
		КонецЕсли;

		// Показатель будет изменен
		ПоказателиОтчета = ПоказателиОтчета;
	КонецЕсли;

	// Если версии равны, то выходим
	Если ТекущаяВерсия = ВерсияФормы Тогда
		Возврат;
	КонецЕсли;

		Список = Новый СписокЗначений;
		Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл

			ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
			ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
			ИмяСтраницы = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");

			Если ДанныеМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
				// если раздел многостраничный тогда ...

				// Страница для удаления
				Список.Добавить(ИмяСтраницы);

				Если ВызванноИзОтчета Тогда
					Сообщить(НСтр("ru='Идет обновление структуры разделов декларации. ';uk='Йде оновлення структури розділів декларації. '") + ИмяСтраницы + " ...");
				КонецЕсли;

				Если ТаблицаСтраницРаздела.Количество() = 0 Тогда

					// Добавим пустую страницу
					МногостраничностьОбеспечена = ТаблицаСтраницРаздела.Добавить();
					МногостраничностьОбеспечена.Представление      = НСтр("ru='Новая страница';uk='Нова сторінка'");
					МногостраничностьОбеспечена.АктивнаяСтраница   = Истина;
					// Добавим данные
					ТаблицаСтраницРаздела[0].Данные           = ПоказателиТаблПоле;

					МногострочнаяЧастьОтсутствуетПоСтруктуреМногостраничнойЧасти = Ложь;
					ДопСтроки = Неопределено;

					Попытка
					// Поле ДанныеДопСтрок есть не во всех многостраничных разделах
						ДопСтроки = ТаблицаСтраницРаздела[0].ДанныеДопСтрок;
					Исключение
						// на доп. листе нет многострочной части
						МногострочнаяЧастьОтсутствуетПоСтруктуреМногостраничнойЧасти = Истина;
					КонецПопытки;

					// Если поле многострочности есть, а данные = Неопределено, то считаем, что нет многострочной части
					//МногострочнаяЧастьОтсутствуетПоСтруктуреМногостраничнойЧасти = ?(ДопСтроки = Неопределено, Истина, Ложь);

					// Не используем переменную МногострочнаяЧастьОтсутствуетПоСтруктуреМногостраничнойЧасти
					// т.к. если нет доп. страниц в разделе, то многострочность запишется в отчете в переменную
					// данные многостраничных частей - мСтруктураМногострочныхЧастей, которую ранее мы и считали
					Если НЕ МногострочнаяЧастьОтсутствует Тогда

						// Объявим переменную для сбора многострочных частей
						СтруктураДанныхДопСтрокРаздела = Новый Структура;

						// Переберем всю многострочную часть
						Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл

							ИмяГруппы = ЭлементСтруктуры.Ключ;

							// Найдем многострочные части, для нужного нам листа и соберем их вместе, в случае
							// если на одном листе больше одной мнг. части.

							Если ОпределитьПринадлежностьМногострочнойЧастиКЛистуДекларации(ИмяГруппы, ВыбраннаяФорма, 1) = ИмяСтраницы Тогда

								ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
								ДанныеМногострочныхРазделов.Свойство(ИмяГруппы, ПромТаблицаДопСтрокРаздела);
								ТаблицаДопСтрокГруппы1 = ПромТаблицаДопСтрокРаздела.Скопировать();
								СтруктураДанныхДопСтрокРаздела.Вставить(ИмяГруппы, ТаблицаДопСтрокГруппы1);

							КонецЕсли; // Имя страницы равно имя из структуры многостраничной части

						КонецЦикла; // Для Каждого

						// Запишем в структуру многостраничного раздела, если
						// многострочная часть присутствует (по структуре мСтруктураМногостраничной части
						// или (многострочная часть присутствует (по мСтруктураМногострочныхРазделов) И есть поле
						// И в структуре данныхДопСтрокРаздела, больше 0, т.е. больше одного блока
						// таким образом учитываем вариант, когда
						// на многостраничном разделе 1 лист, содержит многострочные части
						Если ((НЕ МногострочнаяЧастьОтсутствуетПоСтруктуреМногостраничнойЧасти)
						И (НЕ МногострочнаяЧастьОтсутствует))
						Или ((НЕ МногострочнаяЧастьОтсутствует) И (СтруктураДанныхДопСтрокРаздела.Количество()>0)) Тогда
							ТаблицаСтраницРаздела[0].ДанныеДопСтрок = СтруктураДанныхДопСтрокРаздела;
						КонецЕсли;

					КонецЕсли;
				КонецЕсли; // Если кол-во страниц = 0
			КонецЕсли; // Если многостраничный документ
		КонецЦикла;

		Для Каждого Зн Из Список Цикл
			// Сообщить(Зн.Значение);
			// Удалим лишние разделы из Показателей Отчета
			ПоказателиОтчета.Удалить("ПолеТабличногоДокумента" + Зн.Значение);
		КонецЦикла;

		Если НЕ ВызванноИзОтчета Тогда

			// вставляем данные, которые изменили
			СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

			// вставляем данные многостраничных разделов
			СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);

			// вствляем версию формы
			//СписокСохранения.Вставить("ВерсияФормы", ТекущаяВерсия);

			ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
			СохраненныйДокОбъект = СохраненныйДок.ПолучитьОбъект();
			СохраненныйДокОбъект.ДанныеОтчета = ХранилищеДанных;
			СохраненныйДокОбъект.Записать();
		Иначе
			// Если вызвано из формы при восстановлении
			ЭтаФормаД.мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;
		КонецЕсли;


КонецПроцедуры // КонвертацияОтчетнойФормы2

// ОпределитьПринадлежностьМногострочнойЧастиКЛистуДекларации
//
Функция ОпределитьПринадлежностьМногострочнойЧастиКЛистуДекларации(ИдГруппы, ИмяФормы, НомерКонвертации)

	Если НомерКонвертации = 1 Тогда
		Результат = "";
		Если ИмяФормы = "РегламентированныйОтчетАкцизыПриложение1" Тогда

			Если (ИдГруппы = "П0000200010")
			Или (ИдГруппы = "П0000200020")
			Или (ИдГруппы = "П0000200030")
			Или (ИдГруппы = "П0000200040")
			Или (ИдГруппы = "П0000200050")
			Или (ИдГруппы = "П0000200060")
			Или (ИдГруппы = "П0000200070")
			Или (ИдГруппы = "П0000200080")
			Или (ИдГруппы = "П0000200090")
			Или (ИдГруппы = "П0000200100")
			Или (ИдГруппы = "П0000200110") Тогда
				Результат = "Раздел2";
			ИначеЕсли (ИдГруппы = "П0002100050") Или (ИдГруппы = "П0002100070") Тогда
				Результат = "Приложение1";
			ИначеЕсли (ИдГруппы = "П0002200050") Или (ИдГруппы = "П0002200070") Тогда
				Результат = "Приложение2";
			ИначеЕсли ИдГруппы = "П0002300050" Тогда
				Результат = "Приложение3";
			ИначеЕсли ИдГруппы = "П0002400050" Тогда
				Результат = "Приложение4";
			ИначеЕсли ИдГруппы = "П0002500010" Тогда
				Результат = "Приложение5";
			ИначеЕсли ИдГруппы = "П0000400070" Тогда
				Результат = "Приложение7";
			КонецЕсли;

		ИначеЕсли ИмяФормы = "РегламентированныйОтчетНДС" Тогда
			Если ИдГруппы = "П0000500010" Тогда
				Результат = "Раздел5";
			ИначеЕсли ИдГруппы = "П0000600010" Тогда
				Результат = "Раздел6";
			КонецЕсли;

		ИначеЕсли ИмяФормы = "РегламентированныйОтчетНДС0" Тогда
			Если ИдГруппы = "П0000300050" Тогда
				Результат = "Раздел3";
			ИначеЕсли ИдГруппы = "П0000300060" Тогда
				Результат = "Раздел3";
			КонецЕсли;

		ИначеЕсли ИмяФормы = "РегламентированныйОтчетДоходыЗаПределамиРФ" Тогда
			Если ИдГруппы = "П0000200100" Тогда
				Результат = "Раздел2";
			ИначеЕсли (ИдГруппы = "П0000300070")
				Или (ИдГруппы = "П0000300080")
				Или (ИдГруппы = "П0000300090")
				Или (ИдГруппы = "П0000300110")
				Или (ИдГруппы = "П0000300120")
				Или (ИдГруппы = "П0000300130") Тогда
				Результат = "Раздел3";
			КонецЕсли;

		ИначеЕсли ИмяФормы = "РегламентированныйОтчетАкцизыПриложение3" Тогда

			Если ИдГруппы = "П0002100050" Тогда
				Результат = "Приложение1";
			Иначе
				Результат = "Приложение2";
			КонецЕсли;

		ИначеЕсли ИмяФормы = "РегламентированныйОтчетАкцизыПриложение5" Тогда

			Если ИдГруппы = "П0002400050" Тогда
				Результат = "Приложение1";
			ИначеЕсли ИдГруппы = "П0002500040" Тогда
				Результат = "Приложение2";
			ИначеЕсли ИдГруппы = "П0002600050" Тогда
				Результат = "Приложение3";
			ИначеЕсли ИдГруппы = "П0002700040" Тогда
				Результат = "Приложение4";
			КонецЕсли;

		КонецЕсли;

		Возврат Результат;

	КонецЕсли;

КонецФункции // ОпределитьПринадлежностьМногострочнойЧастиКЛистуДекларации

// Возвращает представление вида документа для отображения в журнале документов.
//
// Параметры:
//	Вариант - число, значение реквизита Вид документа РегламентированныйОтчет.
//
// Возвращаемое значение:
//	Строка - пользовательское представление вида документа для отображения в журнале.
//
Функция ПредставлениеВидаДокумента(Вид) Экспорт
	
	Если Вид = 0 Тогда
		Возврат "П";
	ИначеЕсли Вид = Неопределено Тогда
		Возврат "-";
	Иначе
		Возврат "К/" + Вид;
	КонецЕсли;
	
КонецФункции


// Возвращает части даты, для формирования полей "День","Месяц","Год" в реготчетах.
//
Функция ПолучитьЧастиДатыДляПодписи(Дата, Язык="uk_UA") Экспорт
	
	Результат = Новый Структура("День,Месяц,МесяцЦифрой,Год,ПоследняяЦифраГода,ДвеПоследниеЦифрыГода");
	
	Результат.День = Формат(День(Дата),"ЧГ=0");
	
	ДатаСтрокой = Формат(Дата,"ДЛФ = 'ДД';Л = uk_UA");
	ПозицияПервогоПробела = Найти(ДатаСтрокой," ");
	ПозицияВторогоПробела = Найти(Сред(ДатаСтрокой,ПозицияПервогоПробела+1)," ");
	Результат.Месяц = Сред(ДатаСтрокой,ПозицияПервогоПробела+1,ПозицияВторогоПробела-1);
	Результат.МесяцЦифрой = Формат(Дата, "ДФ=ММ");
	Результат.Год = Формат(Год(Дата),"ЧГ=0");
	
	Результат.ПоследняяЦифраГода = Сред(Результат.Год,4,1);
	Результат.ДвеПоследниеЦифрыГода = Сред(Результат.Год,3,2);
	
	Возврат Результат;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ КОРРЕКТНОСТИ ЗАПОЛНЕНИЯ ДАННЫХ
//

//Определяет принадлежность работника к организации
Функция ФизЛицоРаботаетВОрганизации(ФизЛицо,Организация,НаДату) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо" ,     ФизЛицо);
	Запрос.УстановитьПараметр("Организация" , Организация);
	Запрос.УстановитьПараметр("НаДату" ,      НаДату);
	Запрос.УстановитьПараметр("Уволен" ,      Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизации.ПодразделениеОрганизации КАК Подразделение
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НаДату, Организация = &ГоловнаяОрганизация И Физлицо = &ФизЛицо И (Приказ.ВидЗанятости <> &ВнутреннееСовместительство ИЛИ (Приказ.ВидЗанятости) ЕСТЬ NULL )) КАК РаботникиОрганизации
	|
	|ГДЕ
	|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &Уволен И
	|	РаботникиОрганизации.ПодразделениеОрганизации.Владелец = &Организация";

	Возврат Запрос.Выполнить().Выбрать().Количество() > 0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫБОРКИ ДАННЫХ 
//
// Определяет страну, гражданином которой является ФизЛицо по состоянию на ДатуЗначения
Функция ПолучитьГражданство(ФизЛицо, ДатаЗначения)  Экспорт
	
	Гражд = РегистрыСведений.ГражданствоФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФизЛицо));

	Если Гражд.Количество() > 0 Тогда
		Возврат Гражд[0].Страна;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает паспортные данные ФизЛица по состоянию на ДатуЗначения
Функция ПолучитьУдЛичн(ФизЛицо, ДатаЗначения)  Экспорт
	
	Удостоверения = РегистрыСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФизЛицо));

	Если Удостоверения.Количество() > 0 Тогда
		Возврат Удостоверения[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает сокращенный уникальный идентификатор текущей конфигурации.
Функция ИДКонфигурации() Экспорт
	// Условие ИЛИ было добавлено для совместимости с данной конфигурацией
	
	ИДКонфигурации =  Метаданные.Имя;
	Если    Найти(ВРег(ИДКонфигурации), ВРег("БухгалтерияДляУкраины")) > 0 
		ИЛИ Найти(ВРег(ИДКонфигурации), ВРег("РегламентированнаяОтчетность")) > 0 Тогда
		Возврат "БП";
	ИначеЕсли Найти(ВРег(ИДКонфигурации), ВРег("ЗарплатаИУправлениеПерсоналомДляУкраины")) > 0 Тогда
		Возврат "ЗУП";
	ИначеЕсли Найти(ВРег(ИДКонфигурации), ВРег("УправлениеПроизводственнымПредприятиемДляУкраины")) > 0 Тогда
		Возврат "УПП";
	ИначеЕсли Найти(ВРег(ИДКонфигурации), ВРег("УправлениеТорговымПредприятиемДляУкраины")) > 0 Тогда
	    Возврат "УТП";	
	ИначеЕсли Найти(ВРег(ИДКонфигурации), ВРег("УправлениеТорговлейДляУкраины")) > 0 Тогда
	    Возврат "УТ";	
	Иначе
		Возврат ИДКонфигурации;
	КонецЕсли;
КонецФункции // ИДКонфигурации()

// Возвращает номер редакции текущей конфигурации.
//  Номер редакции выделяется из полного номера версии конфигурации 
// и представляет собой все символы до второй точки.
//
Функция РедакцияКонфигурации() Экспорт
	
	Перем Версия;
	Перем ПерваяТочка;

	Версия = Метаданные.Версия;
	ПерваяТочка = Найти(Версия, ".");

	Возврат СокрЛП(Лев(Версия, Найти(Сред(Версия, ПерваяТочка + 1), ".") + ПерваяТочка - 1));

КонецФункции // РедакцияКонфигурации()


#Если Клиент Тогда

// Функция возвращает пользовательское представление адреса в формате "9 запятых" по переданному в качестве
// параметра внутреннему представлению.
// Параметры:
//		АдресВФормате9Запятых - строка, внутренне представление адреса в формате "9 запятых".
// Возвращаемое значение:
//		Строка - пользовательское представление адреса в формате "9 запятых".
Функция ПредставлениеАдресаВФормате9Запятых(Знач АдресВФормате9Запятых) Экспорт
	
	Если СтрЧислоВхождений(АдресВФормате9Запятых, ",") <> 9 ИЛИ (Лев(АдресВФормате9Запятых, 3) <> "643" И Лев(АдресВФормате9Запятых, 3) <> "999") Тогда
		Возврат АдресВФормате9Запятых;
	КонецЕсли;
	
	КопияАдреса = АдресВФормате9Запятых;
	
	ПоследняяКоордината = 0;
	СоставляющиеАдреса = Новый Массив;
	КоординатыЗапятых = Новый Массив;
	Для Сч = 1 По 9 Цикл
		КоординатаЗапятой = Найти(КопияАдреса, ",");
		КоординатыЗапятых.Добавить(ПоследняяКоордината + КоординатаЗапятой);
		ПоследняяКоордината = ПоследняяКоордината + КоординатаЗапятой;
		КопияАдреса = Сред(КопияАдреса, КоординатаЗапятой + 1);
	КонецЦикла;
	
	СоставляющиеАдреса.Добавить(СокрЛП(Лев(АдресВФормате9Запятых, КоординатыЗапятых[0] - 1)));
	Для Сч = 0 По 7 Цикл
		СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[Сч] + 1, КоординатыЗапятых[Сч + 1] - (КоординатыЗапятых[Сч] + 1))));
	КонецЦикла;
	СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[8] + 1)));
	
	ТекПредставление = "";

	Если СокрЛП(СоставляющиеАдреса[1]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[1]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[2]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[2]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[3]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[3]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[4]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[4]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[5]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[5]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[6]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[6]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[7]) <> "" Тогда
		ТекПредставление = ТекПредставление + НСтр("ru=', дом № ';uk=', будинок № '") + СокрЛП(СоставляющиеАдреса[7]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[8]) <> "" Тогда
		ТекПредставление = ТекПредставление + НСтр("ru=', корпус ';uk=', корпус '") + СокрЛП(СоставляющиеАдреса[8]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[9]) <> "" Тогда
		ТекПредставление = ТекПредставление + НСтр("ru=', кв.';uk=', кв.'") + СокрЛП(СоставляющиеАдреса[9]);
	КонецЕсли;

	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	Возврат ТекПредставление;
	
КонецФункции
		
// Извлекает сведения об организации по списку, переданному в параметре.
// 
// Параметры:
//  Показатели     - Список значений. Содержит в виде представлений перечень 
//                   сведений, которые надо получить. В первом элемент списка
//                   
// 
// Описание:
//  Функция умеет обрабатыать следующие мнемонические имена:
//  ФИОРук
//  ИННРук
//  ФИОБух
//  ИННБух
//
//
Функция ПолучитьСведенияОбОрганизации(Организация, ДатаЗначения, СписокПоказателей) Экспорт

	Перем ОргСведения;
	Перем Значение;

	// Структура, в которой будут возвращаться найденые значения
	ОргСведения = Новый Структура;

	Для каждого ЭлементСписка Из СписокПоказателей Цикл
		ИмяПоказателя = ЭлементСписка.Представление;
		Значение = Неопределено;

		Если ИмяПоказателя = "ФИОРук" Тогда
			Если ИДКонфигурации() = "УТ" Тогда
				
				Данные = Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо", Организация, Перечисления.ОтветственныеЛицаОрганизации.Руководитель);

				ОтвЛица = РегистрыСведений.ОтветственныеЛицаОрганизации.СрезПоследних(ДатаЗначения, Данные);

				Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизации.Руководитель);

				Если Результат <> Неопределено Тогда
					ДанныеФИО = Новый Структура("ФизЛицо",Результат.ФизическоеЛицо);
					ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(ДатаЗначения, ДанныеФИО);
					Значение = СокрЛП(ФИОСрез.Фамилия) + " " + Лев(СокрЛ(ФИОСрез.Имя), 1) + "." + Лев(СокрЛ(ФИОСрез.Отчество), 1) + ".";
				КонецЕсли;
			
			Иначе	
				Данные = Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",Организация,Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);

				ОтвЛица = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(ДатаЗначения, Данные);

				Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);

				Если Результат <> Неопределено Тогда
					ДанныеФИО = Новый Структура("ФизЛицо",Результат.ФизическоеЛицо);
					ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(ДатаЗначения, ДанныеФИО);
					Значение = СокрЛП(ФИОСрез.Фамилия) + " " + Лев(СокрЛ(ФИОСрез.Имя), 1) + "." + Лев(СокрЛ(ФИОСрез.Отчество), 1) + ".";
					
				КонецЕсли;
			
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ИННРук" Тогда

			Данные = Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);

			ОтвЛица = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(ДатаЗначения, Данные);

			Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);

			Если Результат <> Неопределено Тогда
				Значение = Результат.ФизическоеЛицо.КодПоДРФО;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ФИОБух" Тогда
			
			Если ИДКонфигурации() = "УТ" Тогда
				
				Данные = Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",Организация, Перечисления.ОтветственныеЛицаОрганизации.ГлавныйБухгалтер);

				ОтвЛица = РегистрыСведений.ОтветственныеЛицаОрганизации.СрезПоследних(ДатаЗначения, Данные);

				Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизации.ГлавныйБухгалтер);

				Если Результат <> Неопределено Тогда
					ДанныеФИО = Новый Структура("ФизЛицо",Результат.ФизическоеЛицо);
					ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(ДатаЗначения, ДанныеФИО);
					Значение = СокрЛП(ФИОСрез.Фамилия) + " " + Лев(СокрЛ(ФИОСрез.Имя), 1) + "." + Лев(СокрЛ(ФИОСрез.Отчество), 1) + ".";
				КонецЕсли;
				
			Иначе	
				
				Данные = Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",Организация, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);

				ОтвЛица = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(ДатаЗначения, Данные);

				Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);

				Если Результат <> Неопределено Тогда
					ДанныеФИО = Новый Структура("ФизЛицо",Результат.ФизическоеЛицо);
					ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(ДатаЗначения, ДанныеФИО);
					Значение = СокрЛП(ФИОСрез.Фамилия) + " " + Лев(СокрЛ(ФИОСрез.Имя), 1) + "." + Лев(СокрЛ(ФИОСрез.Отчество), 1) + ".";
					
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ИННБух" Тогда
			Данные = Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",Организация, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);

			ОтвЛица = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(ДатаЗначения, Данные);

			Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);

			Если Результат <> Неопределено Тогда
				Значение = Результат.ФизическоеЛицо.КодПоДРФО;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КодПоЕДРПОУ" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Если ИДКонфигурации() = "УТ" Тогда
					Результат = Организация.КодПоЕДРПОУ;
				Иначе
					Данные = Новый Структура("Организация",Организация); 
					КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
					Если КодыОрганизации.Количество()> 0 Тогда
						Результат = КодыОрганизации[0].КодПоЕДРПОУ;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КодКОАТУУ" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].КодКОАТУУ;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КодКФВ" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].КодКФВ;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КодСПОДУ" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].КодСПОДУ;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КодЗКГНГ" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].КодЗКГНГ;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КодКВЕД" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда  
				Если ИДКонфигурации() = "УТ" Тогда
					Результат = Организация.КодКВЕД;
				Иначе
	 				Данные = Новый Структура("Организация",Организация); 
					КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
					Если КодыОрганизации.Количество()> 0 Тогда
						Результат = КодыОрганизации[0].КодКВЕД;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Территория" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].Территория;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ФормаСобственности" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].ФормаСобственности;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ОрганГУ" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].ОрганГУ;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "Отрасль" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].Отрасль;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ВЭД" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].ВЭД;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "НомерФССНесчСлучай" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].НомерФССНесчСлучай;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "НомерРегистрацииПФ" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].НомерРегистрацииПФ;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КодОрганаПФУ" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].КодОрганаПФУ;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "НомерФССБезработица" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда  
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].НомерРегистрацииВСлужбеЗанятости;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "НомерФССНесчСлучай" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].НомерФССНесчСлучай;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
        ИначеЕсли ИмяПоказателя = "НомерФССУтратаТрудосп" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].НомерФСС;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;	
		ИначеЕсли ИмяПоказателя = "ИНН" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда  
				Если ИДКонфигурации() = "УТ" Тогда
					Результат = Организация.ИНН;
				Иначе
					Данные = Новый Структура("Организация",Организация); 
					КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
					Если КодыОрганизации.Количество()> 0 Тогда
						Результат = КодыОрганизации[0].ИНН;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "НомерСвидетельства" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Если ИДКонфигурации() = "УТ" Тогда
					Результат = Организация.НомерСвидетельства;
				Иначе
		 			Данные = Новый Структура("Организация",Организация); 
					КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
					Если КодыОрганизации.Количество()> 0 Тогда
						Результат = КодыОрганизации[0].НомерСвидетельства;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "НалоговаяИнспекция" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Если ИДКонфигурации() = "УТ" Тогда
					Результат = Организация.НалоговаяИнспекция;
				Иначе
					Данные = Новый Структура("Организация",Организация); 
					КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
					Если КодыОрганизации.Количество()> 0 Тогда
						Результат = КодыОрганизации[0].НалоговаяИнспекция.Ссылка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
	
		ИначеЕсли ИмяПоказателя ="ДатаРегистрации" Тогда 
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].ДатаРегистрации;
				КонецЕсли;
				Если Результат <> Неопределено Тогда
					Значение = Результат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КодОПФГ" Тогда
			Если НЕ (НЕ ЗначениеЗаполнено(Организация)) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].КодОПФГ;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ОПФГ" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].ОПФГ;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПР" Тогда
			Если ЗначениеЗаполнено(Организация) Тогда 
				Данные = Новый Структура("Организация",Организация); 
				КодыОрганизации = РегистрыСведений.КодыОрганизации.СрезПоследних(ДатаЗначения, Данные);
				Если КодыОрганизации.Количество()> 0 Тогда
					Результат = КодыОрганизации[0].КлассПрофессиональногоРиска;
				КонецЕсли;
			КонецЕсли;	
			Если Результат <> Неопределено Тогда
				Значение = Результат;
			КонецЕсли
		КонецЕсли;

				
		ОргСведения.Вставить(ИмяПоказателя, Значение);

	КонецЦикла;

	Возврат ОргСведения;

КонецФункции // ПолучитьСведенияОбОрганизации()

#КонецЕсли

// Проверяет соответствие ИНН требованиям
// Параметры:
//		ИНН - строка - проверяемый индивидуальный номер налогоплательщика,
//		ВладелецИНН - ПеречислениеСсылка.ЮрФизЛицо - тип владельца ИНН: физлицо или юрлицо
Функция ИННСоответствуетТребованиям(Знач ИНН, ВладелецИНН) Экспорт

	ИНН = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИНН);

	Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ИНН) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ДлинаИНН = 10  и ВладелецИНН = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда

		КонтрольнаяСумма = 0;

		Для Н = 1 По 9 Цикл

			Если 	  Н = 1 Тогда
				Множитель = 2;
			ИначеЕсли Н = 2 Тогда
				Множитель = 4;
			ИначеЕсли Н = 3 Тогда
				Множитель = 10;
			ИначеЕсли Н = 4 Тогда
				Множитель = 3;
			ИначеЕсли Н = 5 Тогда
				Множитель = 5;
			ИначеЕсли Н = 6 Тогда
				Множитель = 9;
			ИначеЕсли Н = 7 Тогда
				Множитель = 4;
			ИначеЕсли Н = 8 Тогда
				Множитель = 6;
			ИначеЕсли Н = 9 Тогда
				Множитель = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;
			
		КонецЦикла; 
		
		КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;
		
		Если КонтрольныйРазряд <> Число(Сред(ИНН,10,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	ИначеЕсли ДлинаИНН =12 и ВладелецИНН = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		КонтрольнаяСумма11 = 0;
		КонтрольнаяСумма12 = 0;
		
		Для Н=1 По 11 Цикл
			
			// Расчет множителя для 11-го и 12-го разрядов
			Если Н = 1 Тогда
				Множитель11 = 7;
				Множитель12 = 3;
			ИначеЕсли Н = 2 Тогда
				Множитель11 = 2;
				Множитель12 = 7;
			ИначеЕсли Н = 3 Тогда
				Множитель11 = 4;
				Множитель12 = 2;
			ИначеЕсли Н = 4 Тогда
				Множитель11 = 10;
				Множитель12 = 4;
			ИначеЕсли Н = 5 Тогда
				Множитель11 = 3;
				Множитель12 = 10;
			ИначеЕсли Н = 6 Тогда
				Множитель11 = 5;
				Множитель12 = 3;
			ИначеЕсли Н = 7 Тогда
				Множитель11 = 9;
				Множитель12 = 5;
			ИначеЕсли Н = 8 Тогда
				Множитель11 = 4;
				Множитель12 = 9;
			ИначеЕсли Н = 9 Тогда
				Множитель11 = 6;
				Множитель12 = 4;
			ИначеЕсли Н = 10 Тогда
				Множитель11 = 8;
				Множитель12 = 6;
			ИначеЕсли Н = 11 Тогда
				Множитель11 = 0;
				Множитель12 = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
			КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;
			
		КонецЦикла; 
		
		КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
		КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;
		
		Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1))
			ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

// Проверяет соответствие ИНН требованиям. 
// Используется в тех случаях, когда невозможно определить тип владельца ИНН.
// Во всех остальных случаях следует использовать функцию ИННсоответствуетТребованиям(Знач ИНН, ВладелецИНН)
// Параметры:
//		ИНН - строка - проверяемый индивидуальный номер налогоплательщика
Функция ИННСоответствуетТребованиямБезТипа(Знач ИНН) Экспорт
	
	ИННСтр = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИННСтр);
	
	Если ДлинаИНН = 10 Тогда
		ВладелецИНН = Перечисления.ЮрФизЛицо.ЮрЛицо;
	ИначеЕсли ДлинаИНН = 12 Тогда
		ВладелецИНН = Перечисления.ЮрФизЛицо.ФизЛицо;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ИННСоответствуетТребованиям(ИНН, ВладелецИНН);
	
КонецФункции

//Проверяет на наличие только русских букв (допускаются пробелы и дефис и некоторые спец символы)
Функция СтрокаНаписанаПоРусски(Знач СтрокаПараметр) Экспорт

	СтрокаПараметр = СокрЛП(СтрокаПараметр);	

	СписокДопустимыхЗначений = Новый СписокЗначений;
	СписокДопустимыхЗначений.Добавить(184); 
	СписокДопустимыхЗначений.Добавить(168);
	СписокДопустимыхЗначений.Добавить(45);
	СписокДопустимыхЗначений.Добавить(46);
	СписокДопустимыхЗначений.Добавить(32);
	СписокДопустимыхЗначений.Добавить(48);
	СписокДопустимыхЗначений.Добавить(49);
	СписокДопустимыхЗначений.Добавить(50);
	СписокДопустимыхЗначений.Добавить(51);
	СписокДопустимыхЗначений.Добавить(52);
	СписокДопустимыхЗначений.Добавить(53);
	СписокДопустимыхЗначений.Добавить(54);
	СписокДопустимыхЗначений.Добавить(55);
	СписокДопустимыхЗначений.Добавить(56);
	СписокДопустимыхЗначений.Добавить(57);

	Для Сч=1 По СтрДлина(СтрокаПараметр) Цикл
		Код = КодСимвола(СтрокаПараметр,Сч);
		Если (Код<192) И (СписокДопустимыхЗначений.НайтиПоЗначению(Код) = Неопределено) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
КонецФункции 

//Функция возвращает информацию об ответственных лицах организации и их должностях 
Функция ОтветственныеЛицаОрганизаций(Организация, ДатаСреза, Исполнитель = Неопределено) Экспорт

	Результат = Новый Структура("Руководитель, РуководительДолжность, ГлавныйБухгалтер, Кассир, Исполнитель, ИсполнительДолжность, ОтветственныйЗаРегистры");

	Если Организация <> Неопределено тогда

		Если ИДКонфигурации() = "ЗУП" Тогда
			
			ЗапросПоЛицам = Новый Запрос();
			ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
			ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
			ЗапросПоЛицам.Текст = 
			"ВЫБРАТЬ
			|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
			|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
			|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
			|			ИНАЧЕ """"
			|		КОНЕЦ + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
			|			ИНАЧЕ """"
			|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОПолное
			|ИЗ
			|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
			|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
			Выборка = ЗапросПоЛицам.Выполнить().Выбрать();

			Пока Выборка.Следующий() Цикл

				Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
					Результат.Руководитель            = Выборка.ФИОПолное;
					Результат.РуководительДолжность   = Выборка.Должность;

				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
					Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;

				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
					Результат.Кассир                  = Выборка.ФИОПолное;

				КонецЕсли;

			КонецЦикла;

			Если Исполнитель <> Неопределено тогда

				ЗапросПоИсполнителям = Новый Запрос();
				ЗапросПоИсполнителям.УстановитьПараметр("Организация",         Организация);
				ЗапросПоИсполнителям.УстановитьПараметр("ГоловнаяОрганизация",         ОбщегоНазначения.ГоловнаяОрганизация(Организация));
				ЗапросПоИсполнителям.УстановитьПараметр("ДатаСреза",           ДатаСреза);
				ЗапросПоИсполнителям.УстановитьПараметр("Исполнитель",         Исполнитель);
				ЗапросПоИсполнителям.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
				ЗапросПоИсполнителям.Текст = 
				"ВЫБРАТЬ
				|	РаботникиОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
				|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
				|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
				|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
				|			ИНАЧЕ """"
				|		КОНЕЦ + ВЫБОР
				|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
				|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
				|			ИНАЧЕ """"
				|		КОНЕЦ, РаботникиОрганизацииСрезПоследних.Физлицо.Наименование) КАК ФИОПолное
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
				|		&ДатаСреза,
				|		Организация = &ГоловнаяОрганизация
				|		    И ФизЛицо = &Исполнитель
				|		    И (Приказ.ВидЗанятости <> &ВнутреннееСовместительство
				|		        ИЛИ Приказ.ВидЗанятости ЕСТЬ NULL )) КАК РаботникиОрганизацииСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &Исполнитель) КАК ФИОФизЛицСрезПоследних
				|		ПО РаботникиОрганизацииСрезПоследних.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
				|ГДЕ
				|	РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение = &Организация";
				ВыборкаИсполнителей = ЗапросПоИсполнителям.Выполнить().Выбрать();

				Если ВыборкаИсполнителей.Следующий() тогда
					Результат.ИсполнительДолжность = ВыборкаИсполнителей.Должность;
					Результат.Исполнитель          = ВыборкаИсполнителей.ФиоПолное;
				КонецЕсли;

			КонецЕсли;

		Иначе
		
			Если ИДКонфигурации() = "БП" И РедакцияКонфигурации() > "1.0" Тогда
				ЗапросПоЛицам = Новый Запрос();
				ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
				ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
				ЗапросПоЛицам.УстановитьПараметр("ПризнакФизЛица",   Перечисления.ЮрФизЛицо.ФизЛицо);
				
				ЗапросПоЛицам.Текст = "ВЫБРАТЬ
				                      |	ВЫБОР
				                      |		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
				                      |			ТОГДА Организации.ИндивидуальныйПредприниматель.Наименование
				                      |		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
				                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
				                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
				                      |				ИНАЧЕ """"
				                      |			КОНЕЦ + ВЫБОР
				                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
				                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
				                      |				ИНАЧЕ """"
				                      |			КОНЕЦ
				                      |	КОНЕЦ КАК ФИОПолное
				                      |ИЗ
				                      |	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
				                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
				                      |		ПО ФИОФизЛицСрезПоследних.ФизЛицо = Организации.ИндивидуальныйПредприниматель
				                      |			И (Организации.Ссылка = &Организация)
				                      |			И (Организации.ЮрФизЛицо = &ПризнакФизЛица)";
				
				Выборка = ЗапросПоЛицам.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					Результат.Руководитель            = Выборка.ФИОПолное;
					Результат.РуководительДолжность   = "";
				КонецЦикла;
				
				ЗапросПоЛицам.Текст = "ВЫБРАТЬ
				                      |	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
				                      |	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
				                      |	ВЫБОР
				                      |		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
				                      |			ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
				                      |		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
				                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
				                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
				                      |				ИНАЧЕ """"
				                      |			КОНЕЦ + ВЫБОР
				                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
				                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
				                      |				ИНАЧЕ """"
				                      |			КОНЕЦ
				                      |	КОНЕЦ КАК ФИОПолное
				                      |ИЗ
				                      |	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
				                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
				                      |		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
				
			Иначе
				
				ЗапросПоЛицам = Новый Запрос();
				ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
				ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
				ЗапросПоЛицам.Текст = "
				|ВЫБРАТЬ
				|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
				|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
				|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОПолное
				|ИЗ
				|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
				|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
				
			КонецЕсли;
			
			Выборка = ЗапросПоЛицам.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл

				Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
					Результат.Руководитель            = Выборка.ФИОПолное;
					Результат.РуководительДолжность   = Выборка.Должность;

				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
					Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;

				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
					Результат.Кассир                  = Выборка.ФИОПолное;

				КонецЕсли;

			КонецЦикла;
			
			Если Исполнитель <> Неопределено тогда

				ЗапросПоИсполнителям = Новый Запрос();
				ЗапросПоИсполнителям.УстановитьПараметр("Организация",         Организация);
				ЗапросПоИсполнителям.УстановитьПараметр("ГоловнаяОрганизация",         ОбщегоНазначения.ГоловнаяОрганизация(Организация));
				ЗапросПоИсполнителям.УстановитьПараметр("ДатаСреза",           ДатаСреза);
				ЗапросПоИсполнителям.УстановитьПараметр("Исполнитель",         Исполнитель);
				ЗапросПоИсполнителям.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
				ЗапросПоИсполнителям.Текст = 
				"ВЫБРАТЬ
				|	РаботникиОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
				|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL  ТОГДА РаботникиОрганизацииСрезПоследних.Физлицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОПолное
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаСреза, Организация = &ГоловнаяОрганизация И ФизЛицо = &Исполнитель И (Приказ.ВидЗанятости <> &ВнутреннееСовместительство ИЛИ (Приказ.ВидЗанятости) ЕСТЬ NULL )) КАК РаботникиОрганизацииСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &Исполнитель) КАК ФИОФизЛицСрезПоследних
				|		ПО РаботникиОрганизацииСрезПоследних.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
				|
				|ГДЕ
				|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Владелец = &Организация";
				ВыборкаИсполнителей = ЗапросПоИсполнителям.Выполнить().Выбрать();

				Если ВыборкаИсполнителей.Следующий() тогда
					Результат.ИсполнительДолжность = ВыборкаИсполнителей.Должность;
					Результат.Исполнитель          = ВыборкаИсполнителей.ФиоПолное;
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтветственныеЛицаОрганизаций()

//Представляет адрес в "удобочитаемом" виде	для отражения в формах
//
//	Параметры: 
//		АдреснаяСтрока (строка), адрес представление которого нужно вернуть.
//		Способ - способ представления адреса (если=1, то возвращает представление адреса без индекса)
//
//	Возвращаемое значение:
//		строку - представление адреса
//
//	Описание:
//		Предназначена для формирования адресной строки в "удобочитаемом" виде
//		для отражения в формах.
//
Функция ПредставлениеАдреса(Знач АдреснаяСтрока, Способ = 0, ПредставлениеПустого = "<<Адрес не задан>>") Экспорт

	Если НЕ ЗначениеЗаполнено(СтрЗаменить(АдреснаяСтрока,",","")) Тогда
		Возврат ПредставлениеПустого;
	КонецЕсли;

	СтруктураАдрес = РазложитьАдрес(АдреснаяСтрока);
	Если АдресСоответствуетТребованиям(СтруктураАдрес) Тогда
		Адрес = "";
		Если ЗначениеЗаполнено(СтруктураАдрес.Страна) Тогда
			СсылкаНаСтрану = Справочники.КлассификаторСтранМира.НайтиПоКоду(СтруктураАдрес.Страна);
			Если НЕ СсылкаНаСтрану.Пустая() Тогда
				Адрес = Адрес +", "+ СсылкаНаСтрану.Наименование;
			Иначе
				Адрес = Адрес +", "+ СтруктураАдрес.Страна;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтруктураАдрес.Индекс)и(Способ<>1) тогда
			Адрес = Адрес + СтруктураАдрес.Индекс;
		КонецЕсли;	 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Регион),", "+СтруктураАдрес.Регион,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Район),", "+СтруктураАдрес.Район,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Город),", "+СтруктураАдрес.Город,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.НаселенныйПункт),", "+СтруктураАдрес.НаселенныйПункт,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Улица),", "+СтруктураАдрес.Улица,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Дом),НСтр("ru=', д.';uk=', буд.'")+СтруктураАдрес.Дом,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Корпус),", корп. "+СтруктураАдрес.Корпус,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Квартира),", кв. "+СтруктураАдрес.Квартира,""); 

		Адрес = Сред(Адрес,1);//Убрали первую запятую
	Иначе
		Адрес = СтрЗаменить(АдреснаяСтрока, Символы.ПС, ", ");
	КонецЕсли;
	Возврат Адрес;
КонецФункции	// глПредставлениеАдреса

//Определяет соответствие основных параметров адреса требованиям ФНС
//
Функция АдресСоответствуетТребованиям(Знач СтруктураАдрес) Экспорт
	
	Город = СтруктураАдрес.Город;
	Город = СтрЗаменить(Город,"с/с","");
	Город = СтрЗаменить(Город,"с/а","");  
	Город = СтрЗаменить(Город,"с/мо","");
	Город = СтрЗаменить(Город,"с/о",""); 
	НаселенныйПункт = СтруктураАдрес.НаселенныйПункт;
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"ж/д_","");
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"ж/д","");  
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"п/р","");
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"п/ст",""); 
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"п/о",""); 

	// Элементы классификатора KLADR. Встречаются элементы с "/". "(", ")".
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"/","");
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"(",""); 
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,")",""); 

	Улица = СтруктураАдрес.Улица; 

	// Элементы классификатора сокращений.
	Улица = СтрЗаменить(Улица,"ж/д_","");
	Улица = СтрЗаменить(Улица,"ж/д","");  
	Улица = СтрЗаменить(Улица,"п/о","");
	Улица = СтрЗаменить(Улица,"п/ст",""); 
	Улица = СтрЗаменить(Улица,"п/р","");

	// Элементы классификатора STREET. Встречаются улицы с "/". "(", ")". 
	Улица = СтрЗаменить(Улица,"/","");
	Улица = СтрЗаменить(Улица,"(","");
	Улица = СтрЗаменить(Улица,")","");

	Если СтруктураАдрес.Количество()<>10 Тогда // должно быть 10 элементов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Страна) > 3  Тогда   // код страны не > 3 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Индекс) > 6  Тогда   // индекс не > 6 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Регион) > 30 Тогда   // наим.региона не > 30 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Район) > 35 Тогда   // наим.района не > 35 символов
		Возврат Ложь;
	ИначеЕсли НЕ СтрокаНаписанаПоРусски(СтруктураАдрес.Район) Тогда   // наим.района написано не русскими буквами
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Город) > 35 Тогда   // наим.города не > 35 символов
		Возврат Ложь;
	ИначеЕсли НЕ СтрокаНаписанаПоРусски(Город) Тогда   // наим.города написано не русскими буквами
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.НаселенныйПункт) > 45 Тогда   // наим.нас.пункта не > 45 символов
		Возврат Ложь;
	ИначеЕсли НЕ СтрокаНаписанаПоРусски(НаселенныйПункт) Тогда   // наим.нас.пункта написано не русскими буквами
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Улица) > 45 Тогда   // наим.улицы не > 45 символов
		Возврат Ложь;
	ИначеЕсли НЕ СтрокаНаписанаПоРусски(Улица) Тогда   // наим.улицы написано не русскими буквами
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Дом) > 10 Тогда   // номер дома не > 10 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Корпус) > 10 Тогда   // номер корпуса не > 10 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Квартира)> 10 Тогда   // номер квартиры не > 10 символов
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции	

//Получает текст файла сведений из регистра
Функция ПолучитьТекстФайлаИзРегистра(ДокументСсылка) 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументСсылка);

	Запрос.Текст = "ВЫБРАТЬ
	|	АрхивДанныхРегламентированнойОтчетности.Данные
	|ИЗ
	|	РегистрСведений.АрхивДанныхРегламентированнойОтчетности КАК АрхивДанныхРегламентированнойОтчетности
	|
	|ГДЕ
	|	АрхивДанныхРегламентированнойОтчетности.Объект = &ДокументСсылка";

	ВыборкаДанных = Запрос.Выполнить().Выбрать();

	Если ВыборкаДанных.Следующий() тогда
		Возврат ВыборкаДанных.Данные;
	Иначе	
		Возврат "";
	КонецЕсли;	 

КонецФункции	

//Получает текст файла сведений, сформированного по данным документа
Функция ПолучитьТекстФайла(ДокументОбъект,Отказ) Экспорт

	Если ДокументОбъект.Проведен тогда
		//Для проведенного документа берём сохраненный ранее текст файла 
		Отказ = Ложь;
		Возврат ПолучитьТекстФайлаИзРегистра(ДокументОбъект.Ссылка);

	Иначе
		Возврат ДокументОбъект.СформироватьВыходнойФайл(Отказ);

	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕОБРАЗОВАНИЯ ЗНАЧЕНИЙ
//

//Собирает из элементов структуры адреса строку записи адреса в формате 9 запятых
Функция СобратьАдрес(Знач СтруктураАдрес) Экспорт

	Возврат ""+ СтруктураАдрес.Страна + "," + СтруктураАдрес.Индекс + ","+ СтруктураАдрес.Регион + ","
	+ СтруктураАдрес.Район  + "," + СтруктураАдрес.Город  + ","+ СтруктураАдрес.НаселенныйПункт + ","
	+ СтруктураАдрес.Улица  + "," + СтруктураАдрес.Дом    + ","+ СтруктураАдрес.Корпус + "," + СтруктураАдрес.Квартира

КонецФункции	 

//Возвращает строковое представление места рождения
Функция ПредставлениеМестаРождения(Знач СтрокаМестоРождения) Экспорт

	СтруктураМестоРождения = РазложитьМестоРождения(СтрокаМестоРождения, Ложь);

    Если СтруктураМестоРождения.Особое = 1 Тогда
	
		Представление	=	НСтр("ru='особое';uk='особливе'") +
		?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	"  "	+	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Страна));
	
	Иначе
	
		Представление	= "" + ?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	НСтр("ru='Населенный пункт: ';uk='Населений пункт: '") + СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	НСтр("ru=', район:  ';uk=', район:  '") + СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	НСтр("ru=', область: ';uk=', область: '")	+	СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	НСтр("ru=', страна: ';uk=', країна: '")	+	СокрЛП(СтруктураМестоРождения.Страна));
		
		Если Лев(Представление, 1) = ","  Тогда
			Представление = Сред(Представление, 2)
		КонецЕсли;
			
	КонецЕсли; 

	Возврат Представление;
КонецФункции	 

//Функция раскладывает строку с данными об адресе (в формате 9 запятых) на элементы структуры
Функция РазложитьАдрес(Знач СтрокаАдрес) Экспорт
	
	Страна = "";
	Индекс = "";
	Регион = "";
	Район = "";
	Город = "";
	НаселенныйПункт = "";
	Улица ="";
	Дом ="";
	Корпус ="";
	Квартира ="";

	МассивАдрес	=	ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаАдрес);
	ЭлементовВМассиве = МассивАдрес.Количество();   

	Если ЭлементовВМассиве	>	0	тогда
		Страна	=	СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	1	тогда
		Индекс	=	СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	2	тогда
		Регион	=	СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	3	тогда
		Район	=	СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	4	тогда
		Город	=	СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	5	тогда
		НаселенныйПункт	=	СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	6	тогда
		Улица	=	СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	7	тогда
		Дом	=	СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	8	тогда
		Корпус	=	СокрЛП(МассивАдрес[8]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	9	тогда
		Квартира	=	СокрЛП(МассивАдрес[9]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Страна",Страна);
	СтруктураВозврата.Вставить("Индекс",Индекс);
	СтруктураВозврата.Вставить("Регион",Регион);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Город",Город);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Улица",Улица);
	СтруктураВозврата.Вставить("Дом",Дом);
	СтруктураВозврата.Вставить("Корпус",Корпус);
	СтруктураВозврата.Вставить("Квартира",Квартира);

	Возврат СтруктураВозврата;
	
КонецФункции	 

//Функция раскладывает строку с данными о месте рождения на элементы структуры
Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина) Экспорт

	Особое = 0;НаселенныйПункт	= "";Район	= "";Область	= "";Страна	= "";

	//МассивМестоРождения	=	ПроцедурыУправленияПерсоналом.РазложитьСтрокуВМассивПодстрок(Врег(СтрокаМестоРождения));
	МассивМестоРождения	=	ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(?(ВерхнийРегистр, Врег(СтрокаМестоРождения), СтрокаМестоРождения));
	
	ЭлементовВМассиве = МассивМестоРождения.Количество();   
	Если ЭлементовВМассиве	>	0	тогда
		Если СокрЛП(МассивМестоРождения[0]) = "1" тогда
			Особое	=	1;
		КонецЕсли;	 
	КонецЕсли;
	Если ЭлементовВМассиве	>	1	тогда
		НаселенныйПункт	=	СокрЛП(МассивМестоРождения[1]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	2	тогда
		Район	=	СокрЛП(МассивМестоРождения[2]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	3	тогда
		Область	=	СокрЛП(МассивМестоРождения[3]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	4	тогда
		Страна	=	СокрЛП(МассивМестоРождения[4]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Особое",Особое);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Область",Область);
	СтруктураВозврата.Вставить("Страна",Страна);
	Возврат СтруктураВозврата;
	
КонецФункции	 

#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИАЛОГАМИ
//

//Выполняет запись документа в случае подтверждения пользователем
Функция ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,ТекстВопросаПодтверждения) Экспорт

	Если ДокументОбъект.ЭтоНовый() или ДокументОбъект.Модифицированность() Тогда
		Ответ  = Вопрос(ТекстВопросаПодтверждения, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ДокументОбъект.Записать();
		Иначе
			Возврат ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции

//Предлагает пользователю указать каталог для выгрузки декларации в электронном виде
Функция ПолучитьПутьВыгрузки(ПутьДляВыгрузки = Неопределено) Экспорт

	ФормаПараметровСохранения = ПолучитьОбщуюФорму("НастройкаПараметровСохраненияРегламентированногоОтчета");
	ФормаПараметровСохранения.ПутьДляВыгрузки = ПутьДляВыгрузки;

	РезВыбора = ФормаПараметровСохранения.ОткрытьМодально();
	Если РезВыбора = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ РезВыбора Тогда
		Возврат Ложь;
	Иначе
		Возврат ФормаПараметровСохранения.ПутьДляВыгрузки;
	КонецЕсли;

КонецФункции

// Функция проверяет возможность открытия дочерней формы из основной
//
// Параметры
//  ЭтаФорма  - Форма - основная форма отчета
//
// Возвращаемое значение:
//   Булево   - флаг возможности открытия дочерней формы
//
Функция ПроверитьВозможностьОткрытияДочернейФормыРегламентиованногоОтчета(ЭтаФорма) Экспорт	
	Перем МенеджерЗвит1С;
	
	// Не во всех конфигурациях использующих рег отчеты есть поддержка 1С-Звит
	Попытка
		Выполнить("МенеджерЗвит1С = глМенеджерЗвит1С;");
	Исключение
	    МенеджерЗвит1С = Неопределено;
	КонецПопытки;
	
	Попытка
		ДатаНачалаИспользованияЗвит1С = ЭтаФорма.Организация.ДатаНачалаИспользованияЗвит1С;	
	Исключение
	    ДатаНачалаИспользованияЗвит1С = Неопределено
	КонецПопытки;

	Если МенеджерЗвит1С = Неопределено
	 ИЛИ Не ЗначениеЗаполнено(ДатаНачалаИспользованияЗвит1С) 
	 ИЛИ Не ЗначениеЗаполнено(ЭтаФорма.мДатаКонцаПериодаОтчета) 
	 ИЛИ НачалоДня(ЭтаФорма.мДатаКонцаПериодаОтчета) < ДатаНачалаИспользованияЗвит1С Тогда
		Возврат Истина;
	КонецЕсли;
	
    ДатаСтрока        = Формат(ДатаНачалаИспользованияЗвит1С, "ДФ=dd.MM.yyyy");
	ОрганизацияСтрока = Строка(ЭтаФорма.Организация);
	
	ТекстВопроса = НСтр("ru = 'Внимание! Начиная с "+ДатаСтрока+" для формирования регламентированных отчетов по организации """+ОрганизацияСтрока+""" используется ""1С-Звит"". 
	                    |
	                    |Прервать выполнение операции и запустить ""1С-Звит""?'; uk = 'Увага! Починаючи з "+ДатаСтрока+" для формування регламентованих звітів по організації """+ОрганизацияСтрока+""" використовується ""1С-Звіт"".
	                    |
                        |Перервати виконання операції і запустити ""1С-Звіт""?'");
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат Истина;
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
				
		Если МенеджерЗвит1С.ЗапуситьЗвит1С() Тогда
		    // Если запустили 1С-Звит, форма нам больше не нужна
			ЭтаФорма.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
    Возврат Ложь;
	
КонецФункции // ПроверитьВозможностьОткрытияДочернейФормыРегламентиованногоОтчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛАМИ СВЕДЕНИЙ
//

//Предоставляет сформированный файл сведений документа для просмотра
Процедура ПоказатьФайлДокумента(ДокументОбъект, ЗаголовокОкна) Экспорт

	Вопрос = НСтр("ru='Перед формированием файла необходимо записать документ. Записать?';uk='Перед формуванням файлу необхідно записати документ. Записати?'");
	Если НЕ ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос) тогда
		Возврат;
	КонецЕсли;	 

	ЕстьОшибки = Ложь;
	ТекстФайла = ПолучитьТекстФайла(ДокументОбъект,ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат;
	КонецЕсли;	 
	
	//Если ТипЗнч(ТекстФайла) = Тип("Строка") Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстФайла); 
		ТекстовыйДокумент.Показать(ЗаголовокОкна, НСтр("ru='Файл сведений';uk='Файл відомостей'"));
	//Иначе //тип("ТекстовыйДокумент")	
	//	ТекстФайла.Показать(ЗаголовокОкна, "Файл сведений");
	//КонецЕсли; 
	
КонецПроцедуры	 

//Записывает файл сведений документа в каталог, указанный пользователем
Процедура ЗаписатьФайлДокументаНаДискету(ДокументОбъект, ТекущийПользователь, ИмяФайла) Экспорт
	
	Вопрос = НСтр("ru='Перед формированием файла необходимо записать документ. Записать?';uk='Перед формуванням файлу необхідно записати документ. Записати?'");
	Если НЕ ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос) тогда
		Возврат;
	КонецЕсли;

	ЕстьОшибки = Ложь;
	ТекстФайла = ПолучитьТекстФайла(ДокументОбъект,ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат;
	КонецЕсли;

	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);

	Длг.Каталог = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнойКаталогФайлов");
	Длг.Заголовок = НСтр("ru='Укажите каталог';uk='Вкажіть каталог'");

	Если Длг.Выбрать() Тогда
		ИмяФайла = Длг.Каталог+"\" + ИмяФайла;
		//Если ТипЗнч(ТекстФайла) = Тип("Строка") Тогда
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(ТекстФайла); 
			ТекстовыйДокумент.Записать(ИмяФайла,КодировкаТекста.OEM);
		//Иначе//тип("ТекстовыйДокумент")
		//	ТекстФайла.Записать(ИмяФайла, КодировкаТекста.OEM);
		//КонецЕсли;	
		Предупреждение(НСтр("ru='Файл-пачка записан под именем: ';uk=""Файл-пачка записана під ім'ям: """)+ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры	

//Печатает файл сведений документа
Процедура РаспечататьФайлДокумента(ДокументОбъект) Экспорт
	Вопрос = НСтр("ru='Перед печатью необходимо записать документ. Записать?';uk='Перед друком необхідно записати документ. Записати?'");
	Если НЕ ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос) тогда
		Возврат;
	КонецЕсли;	
	ДокументОбъект.ПечатьФайла();
КонецПроцедуры 

//Возвращает счетчик выгруженных файов по организации за период, обазначенный ДатойИзПериода
Функция ПолучитьСчетчикВыгруженныхФайлов(Организация) Экспорт

	Если Организация = Неопределено Тогда
		Возврат 0;
	КонецЕсли;

	Отбор = Новый Структура("Тип, Организация", Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайлов, Организация);
	РезФ = РегистрыСведений.СчетчикиВыгрузок.СрезПоследних(РабочаяДата, Отбор);

	Если РезФ.Количество() = 0 Тогда
		СчФ = 0;
	Иначе
		СчФ = РезФ.Получить(0).Значение;
	КонецЕсли;

	Возврат СчФ + 1;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ
//

// Возвращает номер следующего выгружаемого документа для указанной Организации
// Номер определяется для документов, выгружаемых в текущем году
Функция ПолучитьСчетчикВыгруженныхДокументов(Организация, Отчет = Неопределено, ДатаОтчета) Экспорт
	
	Если Организация = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Отбор = Новый Структура("Отчет, Организация", Отчет, Организация);
	РезД = РегистрыСведений.СчетчикиВыгрузок.Получить(НачалоКвартала(ДатаОтчета),Отбор);
	
//	Если РезД.Количество() = 0 Тогда
//		СчД = 0;
//	Иначе
//		СчД = РезД.Получить(0).Значение;
//	КонецЕсли;
	СчД = РезД.Значение;	
	Возврат СчД + 1;
	
КонецФункции

// Устанавливает счетчик выгруженных документов СчДок для указанной Организации
Процедура УстановитьСчетчикВыгруженныхДокументов(Организация, СчДок, Отчет, ДатаОтчета) Экспорт
	МенЗап = РегистрыСведений.СчетчикиВыгрузок.СоздатьМенеджерЗаписи();
	МенЗап.Период = НачалоКвартала(ДатаОтчета);
	МенЗап.Организация = Организация;
	//МенЗап.Тип = Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовВФормате300;
	МенЗап.Отчет = Отчет;
	МенЗап.Значение = СчДок;
	МенЗап.Записать(Истина);
КонецПроцедуры

// Устанавливает счетчик выгруженных файлов СчФайлов для указанной Организации
Процедура УстановитьСчетчикВыгруженныхФайлов(Организация, СчФайлов) Экспорт
	МенЗап = РегистрыСведений.СчетчикиВыгрузок.СоздатьМенеджерЗаписи();
	МенЗап.Период = НачалоГода(РабочаяДата);
	МенЗап.Организация = Организация;
	МенЗап.Тип = Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайлов;
	МенЗап.Значение = СчФайлов;
	МенЗап.Записать(Истина);
КонецПроцедуры

// Возвращает версию формата выгрузки для документа РеглДок вида 
// РегламентированныйОтчет на указанную дату. Если дата не указана, то
// за указанную принимается РабочаяДата.
Функция ВерсияФорматаВыгрузки(РеглДок, НаДату = Неопределено) Экспорт

	Попытка
		Возврат РеглОтчеты(РеглДок.ИсточникОтчета).ПолучитьФорму().ПолучитьВерсиюФорматаВыгрузки(НаДату);
		//Возврат ФормаРеглОтчета(РеглДок.ИсточникОтчета).ПолучитьВерсиюФорматаВыгрузки(НаДату);
	Исключение
		Возврат Неопределено;
	КонецПопытки;

КонецФункции

// Функция возвращает количество выгрузок указанного регламентированного отчета за указанный период
//
// Параметры:
//	- период 		- период составления отчета (дата начала периода отчета)
//	- периодичность - месяц, квартал, год... За указанный период будут суммироваться месячные количества выгрузок
//	- Отчет 		- параметр типа Справочники.РегламентированныеОтчеты
//	- Организация	- 
Функция ПолучитьНомерВыгрузки(Период, Периодичность, Отчет, Организация) Экспорт
	Запрос = Новый Запрос;
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		Запрос.УстановитьПараметр("парамПериод", НачалоМесяца(Период));
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		НомерКвартала 	= Формат(Период, "ДФ=к");
		Год				= Формат(Период, "ДФ=гггг");
		
		Месяцы = Новый Массив(4);
		Месяцы[0] = НачалоКвартала(Период);
		Месяцы[1] = ДобавитьМесяц(Месяцы[0], 1);
		Месяцы[2] = ДобавитьМесяц(Месяцы[0], 2);
		Месяцы[3] = ДобавитьМесяц(Месяцы[0], 3);
		
		Запрос.УстановитьПараметр("парамПериод", Месяцы);		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Месяцы = Новый Массив(12);
		Месяцы[0] = НачалоГода(Период);
		Месяцы[1] =  ДобавитьМесяц(Месяцы[0],  1);
		Месяцы[2] =  ДобавитьМесяц(Месяцы[0],  2);
		Месяцы[3] =  ДобавитьМесяц(Месяцы[0],  3);	
		Месяцы[4] =  ДобавитьМесяц(Месяцы[0],  4);
		Месяцы[5] =  ДобавитьМесяц(Месяцы[0],  5);
		Месяцы[6] =  ДобавитьМесяц(Месяцы[0],  6);
		Месяцы[7] =  ДобавитьМесяц(Месяцы[0],  7);
		Месяцы[8] =  ДобавитьМесяц(Месяцы[0],  8);
		Месяцы[9] =  ДобавитьМесяц(Месяцы[0],  9);
		Месяцы[10] = ДобавитьМесяц(Месяцы[0], 10);
		Месяцы[11] = ДобавитьМесяц(Месяцы[0], 11);
		
		Запрос.УстановитьПараметр("парамПериод", Месяцы);
	КонецЕсли;
	
	
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Значение),0)		КАК КоличествоВыгрузок
    |
	|ИЗ
	|РегистрСведений.СчетчикиВыгрузок
    |
	|ГДЕ
	|	Период В (&парамПериод)
  	|	И Отчет = &парамОтчет
  	|	И Организация = &парамОрганизация
	|";
	
	Запрос.УстановитьПараметр("парамОтчет", Отчет);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Возврат Результат.КоличествоВыгрузок;
КонецФункции


#КонецЕсли

// Проверяет указанный Реквизит на пустое значение.
// Значение Реквизита сравнивается с пустым значением соответствующего Реквизиту типа.
// Реквизит типа Строка считается пустым, если в нем не содержится значащих символов.
Функция ПустоеЗначение(Реквизит) Экспорт

	Если Реквизит = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Если ТипЗнч(Реквизит) = Тип("Строка") Тогда
		Возврат ПустаяСтрока(Реквизит);
	ИначеЕсли ТипЗнч(Реквизит) = Тип("Число") Тогда
		Если Реквизит = 0 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Реквизит) = Тип("Дата") Тогда
		Если Реквизит = Дата('00010101') Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

КонецФункции

// Проверяет указанную строку КодПок на соответствие требованиям, предъявляемым
// к именам предписанных показателей в форматах представления отчетности версий 2.00, 2.01 и 3.00
Функция ЭтоКодПоказателяП(КодПок) Экспорт
	
	Если СтрДлина(КодПок) < 13 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пок = СокрЛП(КодПок);
	
	Если Сред(Пок, 1, 1) = "П" Тогда
		
		Для Сч = 2 По 13 Цикл
			
			КодСимв = КодСимвола(Пок, Сч);
			
			Если НЕ ((КодСимв >= КодСимвола("0", 1)) И (КодСимв <= КодСимвола("9", 1))) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Добавляет строку в текст с электронным представлением отчета
// Строка добавляется в формате ИмяПоказателя:ЗначениеПоказателя
// Параметры:
// Текст          - ТекстовыйДокумент, в который требуется добавить строку.
// ЗначениеЯчейки - значение показателя, который следует вывести.
// ИмяЯчейки      - имя показателя, который следует вывести.
// ПризнакФормата - строка с описанием формата показателя
// ФорматВыгрузки - второй параметр функции Формат (для показателей с признаком "Е" и "С")
Процедура ВывестиПоказатель(Текст, ЗначениеЯчейки, ИмяЯчейки, ПризнакФормата, ФорматВыгрузки) Экспорт
	
	Если ПустоеЗначение(ЗначениеЯчейки) И ПризнакФормата <> "Д" Тогда
		Текст.ДобавитьСтроку(ИмяЯчейки + ":")
	Иначе
		Если ПризнакФормата = "Е" Тогда
			ТекстЯчейкиКакЧисло = Число(СокрЛ(ЗначениеЯчейки));
			Если ТекстЯчейкиКакЧисло = 0 Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":")
			Иначе
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + СокрЛ(Формат(ЗначениеЯчейки,ФорматВыгрузки)));
			КонецЕсли;
		ИначеЕсли ПризнакФормата = "Д" Тогда 
			Если ПустоеЗначение(Дата(ЗначениеЯчейки)) = 1 Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":");
			Иначе
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + СокрЛ(Формат(ЗначениеЯчейки,"ДФ=dd.MM.yyyy; ДЛФ=D")));
			КонецЕсли;	
		Иначе
			Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") Тогда
				Знч = Формат(ЗначениеЯчейки, "ЧРД=.; ЧГ=0");
			Иначе
				Знч = ЗначениеЯчейки;
			КонецЕсли;
			Если ЗначениеЯчейки = "0" Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":")
			Иначе	
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + ВРЕГ(СокрЛ(Знч)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Вычисляет значение показателя отчета по указанному "корню" имени показателя
// Например, 
// для показателей "ИНН_1"," ИНН_2" и т.д. "корнем" является "ИНН"
// для показателей "КПП1_1", "КПП1_2" и т.д. "корнем" является "КПП1"
// Параметры:
// Табл - таблица значений, описывающая показатели листа отчета
// Корень - строка - "корень", значение для которого требуется получить 
Функция ВычислитьЗначениеПоКорню(Табл, Корень) Экспорт
	
	Табл2 = Табл.Скопировать();
	ИтоговоеЗначение = "";
	
	Для Каждого Стр Из Табл2 Цикл
		
		Имя = Стр.Имя;
		//Если Лев(Имя, СтрДлина(Корень)) = Корень Тогда
		Если Имя = Корень Тогда
			ИтоговоеЗначение = ИтоговоеЗначение + Стр.Знач;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ((ВРЕГ(Лев(Корень, 4)) = "ДАТА") ИЛИ (СтрЧислоВхождений(Корень, "Дата") <> 0)) 
		И (((СтрДлина(ИтоговоеЗначение)=8) ИЛИ (СтрДлина(ИтоговоеЗначение)=6)) ИЛИ (ПустаяСтрока(ИтоговоеЗначение)))Тогда
		
		Если ПустаяСтрока(ИтоговоеЗначение) Тогда
			ИтоговоеЗначение = "00.00.0000";
		Иначе
			ИтоговоеЗначение = Лев(ИтоговоеЗначение, 2) + "." + Сред(ИтоговоеЗначение, 3, 2) + "." + Сред(ИтоговоеЗначение, 5);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИтоговоеЗначение;
	
КонецФункции

//Функция собирает значения из отдельных "ячеек", например, ИНН1 из ИНН1_1 + ИНН1_2 + ...
//
Функция СвернутьДанныеТабличногоПоля(Данные) Экспорт
	
	ТП = Новый ТаблицаЗначений;
	ТП.Колонки.Добавить("Имя");
	ТП.Колонки.Добавить("Кол");
	ТП.Колонки.Добавить("Номер");
	ТП.Колонки.Добавить("Знач");
	//ТП.Колонки.Вставить(3, "КолСимвОснования");
	
	Для Каждого Стр Из Данные Цикл
		НоваяСтрока = ТП.Добавить();
		НоваяСтрока.Имя = Стр.Ключ;
		//Стр.Ключ = НоваяСтрока.Имя;
		НоваяСтрока.Кол = 1;
		НоваяСтрока.Знач = Стр.Значение;
	КонецЦикла;
	
	ТП.Сортировать("Имя");
	
	Для Каждого Стр Из ТП Цикл
		Имя = Стр.Имя;
		
		Если ЭтоКодПоказателяП(Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ПризнакКвадратика = Ложь;//признак того, что значение является частью другого значения
		
		НомерСимвола = СтрДлина(Имя);
		Было_ = Ложь;//признак того, что в текущем наименовании показателя уже встречался символ "_"
		БылаЦифра = Ложь;
		
		Пока НомерСимвола > 0 Цикл
			
			Симв = Сред(Имя, НомерСимвола, 1);
			КодСимв = КодСимвола(Симв, 1);
			
			Если (КодСимв >= КодСимвола("0", 1) И КодСимв <= КодСимвола("9", 1)) ИЛИ (Симв = "_") Тогда
				
				Если Симв = "_" Тогда
					Если БылаЦифра Тогда
						
						ПризнакКвадратика = Истина;
						НомерСимвола = НомерСимвола - 1;
						Прервать;
						
					КонецЕсли;
				Иначе//это цифра
					БылаЦифра = Истина;
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			
			НомерСимвола = НомерСимвола - 1;
			
		КонецЦикла;
		
		Если БылаЦифра Тогда
			Корень = Лев(Стр.Имя, НомерСимвола);
			Номер = Сред(Стр.Имя, НомерСимвола + 1);
			Попытка
				Стр.Номер = Число( ?( Лев(Номер, 1) = "_", Сред(Номер, 2), Номер));
			Исключение
				Сообщить(НСтр("ru='Ошибки преобразования номера из окончания: ';uk='Помилки перетворення номера із закінчення: '") + Корень + " === " + Номер, СтатусСообщения.Важное);
			Конецпопытки;
			Стр.Имя = Корень;
		КонецЕсли;
		
	КонецЦикла;
	
	ТП.Сортировать("Имя, Номер");
	
	ТП2 = ТП.Скопировать();
	ТП2.Свернуть("Имя", "Кол");
	
	Для Каждого Стр Из ТП2 Цикл
		Если Стр.Кол > 1 Тогда
			ЗначениеСводногоПоказателя = ВычислитьЗначениеПоКорню(ТП, Стр.Имя);
			//Сообщить(Стр.Имя + " = " + ЗначениеСводногоПоказателя);
			НайдЗнач = Неопределено;
			Если НЕ Данные.Свойство(Стр.Имя, НайдЗнач) Тогда
				Данные.Вставить(Стр.Имя, ЗначениеСводногоПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

// Для указанного раздела возвращает структуру, описывающую подразделы.
// Параметры:
// ИмяРаздела - строка - имя раздела, для которого требуется определить подразделы
// мТаблицаСоставПоказателей - таблица значений, хранящая характеристики предписанных 
// показателей отчета
// МногострочныеИсключения - список значений, в котором указаны коды показателей,
// которые являются частью многострочного раздела и которые имеют номер строки, 
// отличный от предыдущего показателя, но которые не следует помещать в отдельный подраздел.
Функция РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения = Неопределено) Экспорт

	Если МногострочныеИсключения = Неопределено Тогда
		МногострочныеИсключения = Новый СписокЗначений;
	КонецЕсли;

	Подразделы = Новый Структура;
	СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
	ПослМногостр = "^^^";
	ПослКодПоказателя = "П000000000000";

	Для Каждого Стр из СтрокиФорматаТекРаздела Цикл

		КодПоказателя = Стр.КодПоказателяПоСоставу;
		Многостр = Стр.ПризнМногострочности;
		Если КодПоказателя = "###" или КодПоказателя = "===" или Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		Если Многостр <> ПослМногостр Тогда
			Подразделы.Вставить(КодПоказателя, Многостр);
			ПослМногостр = Многостр;
		ИначеЕсли (Многостр = ПослМногостр) и (МногоСтр = "/") и (Лев(ПослКодПоказателя, 11) <> Лев(КодПоказателя, 11))
					и МногострочныеИсключения.НайтиПоЗначению(КодПоказателя) = Неопределено Тогда
			Подразделы.Вставить(КодПоказателя, Многостр);
			ПослМногостр = Многостр;
		КонецЕсли;

		ПослКодПоказателя = КодПоказателя;

	КонецЦикла;

	Возврат Подразделы;

КонецФункции

// Проверяет показатель на пустое значение.
// Параметры
// НазваниеОтчета - пользовательское представление отчета.
// Стр - строка таблицы значений, содержащая описание показателя, который требуется проверить
// Значение - значение показателя
// ВыводитьСообщения - признак, указывающий на необходимость добавления описания ошибки
// (ошибка - отсутствие значения у обязательного к заполнению показателя) в таблицу сообщений, 
// определенную в модуле формы, из которой вызвана функция
// НомерСтраницы - номер страницы, на которой находится прверяемый показатель
// НомерСтроки   - номер строки многострочной части, на которой находится показатель
// ПроверкаЗаполненияСтр - признак того, что функция вызвана из процедур проверки 
// на наличие заполненных показателей в разделе, на листе либо в строке многострочной части
// ФормаВыводаСообщений - форма, из которой была вызвана функция
Функция ПроверитьНаПустоеЗначение(НазваниеОтчета, Стр, Значение, ВыводитьСообщения, НомерСтраницы = Неопределено, НомерСтроки = Неопределено, ПроверкаЗаполненияСтр = 0, ФормаВыводаСообщений = Неопределено) Экспорт
	//возможны три варианта Стр.Обязательность:
	//"Н" - показатель "белый"
	//"О" - показатель обязательный
	//"" - показатель необязательный
	
	Если Найти(Стр.Обязательность, "Н") <> 0 и ПроверкаЗаполненияСтр = 1 Тогда
		Возврат 1; 
	КонецЕсли;
	
	Если Найти(Стр.Обязательность, "Н") <> 0 и ПроверкаЗаполненияСтр = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Стр.Обязательность = "" и ПроверкаЗаполненияСтр = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ПустоеЗначение(Значение) Тогда
		Если ВыводитьСообщения Тогда
			Раздел = РазделПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
			Стрк = СтрокаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
			Графа = ГрафаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
			
			Если ФормаВыводаСообщений <> Неопределено Тогда
				НовСтр = ФормаВыводаСообщений.ТаблицаСообщений.Добавить();
				НовСтр.Раздел = Стр.ИмяПоляТаблДокумента;
				НовСтр.Строка = Стрк;
				НовСтр.Графа = Графа;
				НовСтр.Страница = НомерСтраницы;
				НовСтр.СтрокаПП = НомерСтроки;
				Попытка
					КодНаФорме = Стр.КодПоказателяПоСтруктуре;
				Исключение
					КодНаФорме = Стр.КодПоказателяПоФорме;
				КонецПопытки;
				НовСтр.ИмяЯчейки = ?(ПустаяСтрока(КодНаФорме), Стр.КодПоказателяПоСоставу, КодНаФорме); 
				НовСтр.Описание = НСтр("ru='Не задано значение';uk='Не задане значення'");
			КонецЕсли;

		КонецЕсли;
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
		
КонецФункции

// Проверяет корректность заполнения показателя (по дополнительному описанию).
// Параметры
// НазваниеОтчета - пользовательское представление отчета.
// Стр - строка таблицы значений, содержащая описание показателя, который требуется проверить
// Значение - значение показателя
// ВыводитьСообщения - признак, указывающий на необходимость добавления описания ошибки
// (ошибка - отсутствие значения у обязательного к заполнению показателя) в таблицу сообщений, 
// определенную в модуле формы, из которой вызвана функция
// ФормаВыводаСообщений - форма, из которой была вызвана функция
Функция ПроверитьНаКорректность(НазваниеОтчета, Стр, Значение, ВыводитьСообщения, НомерСтраницы = Неопределено, ФормаВыводаСообщений = Неопределено) Экспорт
	
	ДопОписание = СокрЛП(Стр.ДопОписание);
	Если ПустаяСтрока(ДопОписание) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") И ЭтоКодПоказателяП(Стр.КодПоказателяПоСоставу) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ДопОписание = "ИНН" Тогда
		Если НЕ ИННСоответствуетТребованиямБезТипа(Значение) Тогда
			Если ФормаВыводаСообщений <> Неопределено Тогда
				НовСтр = ФормаВыводаСообщений.ТаблицаСообщений.Добавить();
				НовСтр.Раздел = Стр.ИмяПоляТаблДокумента;
				НовСтр.Строка = СтрокаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
				НовСтр.Графа = ГрафаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
				НовСтр.Страница = НомерСтраницы;
				НовСтр.СтрокаПП = Неопределено;
				Попытка
					КодНаФорме = Стр.КодПоказателяПоСтруктуре;
				Исключение
					КодНаФорме = Стр.КодПоказателяПоФорме;
				КонецПопытки;
				НовСтр.ИмяЯчейки = ?(ПустаяСтрока(КодНаФорме), Стр.КодПоказателяПоСоставу, КодНаФорме); 
				НовСтр.Описание = НСтр("ru='Неверно задан ИНН';uk='Невірно заданий ІПН'");
			КонецЕсли;
			Возврат 1;
		КонецЕсли;
		
	ИначеЕсли ДопОписание = "КПП" Тогда
		
	
	ИначеЕсли ДопОписание = "КБК" Тогда
		
	ИначеЕсли ДопОписание = "ОКАТО" Тогда
		
	ИначеЕсли ДопОписание = "ОГРН" Тогда
		
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Возвращает номер раздела для указанного предписанного показателя
Функция РазделПоКодуПоказателя(КодПоказателя)
	Возврат Сред(КодПоказателя, 2, 5);
КонецФункции

// Возвращает номер строки для указанного предписанного показателя
Функция СтрокаПоКодуПоказателя(КодПоказателя)
	Возврат Сред(КодПоказателя, 9, 3);
КонецФункции

// Возвращает номер графы для указанного показателя
Функция ГрафаПоКодуПоказателя(КодПоказателя)
	КодГрафы = Строка(Число(Сред(КодПоказателя, 12, 2)));
	Возврат ?(КодГрафы = "0", "", КодГрафы);
КонецФункции

// Формирует пользовательское представление показателя по его коду
Функция УдобочитаемоеПредставлениеПоКодуПоказателя(КодПоказателя) Экспорт
	
	Если ЭтоКодПоказателяП(КодПоказателя) Тогда
		КодРаздела = Сред(КодПоказателя, 2, 5);
		КодСтроки = Сред(КодПоказателя, 9, 3);
		КодГрафы = Строка(Число(Сред(КодПоказателя, 12, 2)));
		Возврат НСтр("ru='Раздел ';uk='Розділ '") + КодРаздела + НСтр("ru=', Строка ';uk=', Рядок '") + КодСтроки + ?(КодГрафы = "0", "", НСтр("ru=', Графа ';uk=', Графа '") + КодГрафы);
	Иначе
		Возврат КодПоказателя;
	КонецЕсли;
	
КонецФункции

// Формирует пользовательское представление документа вида РегламентированныйОтчет
Функция ПредставлениеДокументаРеглОтч(Док) Экспорт
	Возврат "" + Док.НаименованиеОтчета + НСтр("ru=' за ';uk=' за '") + ПредставлениеПериода(НачалоДня(Док.ДатаНачала), КонецДня(Док.ДатаОкончания), "ФП=Истина");
КонецФункции

// Проверяет правильность заполнения Ф.И.О.
Функция ФИОНаписаноВерно(Знач СтрокаПараметр) Экспорт
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);	
    
	СписокДопустимыхЗначений = Новый СписокЗначений;
	СписокДопустимыхЗначений.Добавить(КодСимвола(" ")); 
	СписокДопустимыхЗначений.Добавить(КодСимвола("-"));
	СписокДопустимыхЗначений.Добавить(КодСимвола("ё"));
	СписокДопустимыхЗначений.Добавить(КодСимвола("Ё"));
	
	Для Сч = 1 По СтрДлина(СтрокаПараметр) Цикл
		Код = КодСимвола(Сред(СтрокаПараметр, Сч));
		Если (((Код >= КодСимвола("A")) И (Код <= КодСимвола("z"))) ИЛИ ((Код >= КодСимвола("А")) И (Код <= КодСимвола("я")))) ИЛИ (СписокДопустимыхЗначений.НайтиПоЗначению(Код) <> Неопределено) Тогда
			Продолжить;
		Иначе
			Возврат	0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // ФИОНаписаноВерно()

// Возвращает значение первого значащего из реквизитов, указанных в параметрах.
// Если оба реквизита неопределены, функция возвращает Неопределено
Функция ПолучитьРеквизит(Реквизит1, Реквизит2) Экспорт
	Если Реквизит1 <> Неопределено И Не ПустаяСтрока(Реквизит1) тогда
		Возврат Реквизит1;
	ИначеЕсли Реквизит2 <> Неопределено И НЕ Пустаястрока(Реквизит2) Тогда
		Возврат Реквизит2;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Создает и возвращает копию структуры Структура1
Функция СкопированнаяСтруктура(Структура1) Экспорт
	
	Структура2 = Новый Структура;
	
	Для Каждого Зап из Структура1 Цикл
		Структура2.Вставить(Зап.Ключ, Зап.Значение);
	КонецЦикла;
	
	Возврат Структура2;
	
КонецФункции

// Возвращает количество строк, соответствующих предписанным показателям 
// в указанном ТекстовомДокументе
Функция ПолучитьКоличествоПоказателей(Текст) Экспорт

	#Если Клиент Тогда
		Состояние(НСтр("ru='Определение количества выгруженных показателей ...';uk='Визначення кількості вивантажених показників ...'"));
	#КонецЕсли

	КоличествоПоказателей = 0;

	Для НомСтр = 1 По Текст.КоличествоСтрок() Цикл

		ТекСтр = СокрЛ(Текст.ПолучитьСтроку(Текст.КоличествоСтрок() - НомСтр + 1));

		Если Лев(ТекСтр, 11) = "КолПокФОтч:" Тогда
			Прервать;
		КонецЕсли;

		Если СтрДлина(ТекСтр)<14 Тогда
			Продолжить;
		КонецЕсли;

		Если (Сред(ТекСтр, 1, 1) = "П") и (Сред(ТекСтр, 14, 1) = ":") Тогда

			ЭтоПоказатель = Ложь;

			Для НСимв = 2 По 13 Цикл

				ТекСимв = Сред(ТекСтр, НСимв, 1);

				Если (ТекСимв = "0") или (ТекСимв = "1") ИЛИ (ТекСимв = "2") ИЛИ (ТекСимв = "3") ИЛИ (ТекСимв = "4")
					ИЛИ (ТекСимв = "5") ИЛИ (ТекСимв = "6") ИЛИ (ТекСимв = "7") ИЛИ (ТекСимв = "8") ИЛИ (ТекСимв = "9") Тогда

					ЭтоПоказатель = Истина;

				Иначе

					ЭтоПоказатель = Ложь;
					Прервать;

				КонецЕсли;

			КонецЦикла;

			Если ЭтоПоказатель Тогда
				КоличествоПоказателей = КоличествоПоказателей + 1;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	#Если Клиент Тогда
		Состояние(Неопределено);
	#КонецЕсли

	Возврат Формат(КоличествоПоказателей, "ЧН=; ЧГ=0");

КонецФункции

//Находит строку в тексте с определением параметра КолПокФОтч
Функция НайтиКолПокФОтч(Текст) Экспорт

	Для Сч = 1 По Текст.Количествострок() Цикл

		ТекИнд = Текст.Количествострок() - Сч + 1;
		Если Лев(Текст.ПолучитьСтроку(ТекИнд), 11) = "КолПокФОтч:" Тогда
			Возврат ТекИнд;
		КонецЕсли;

	КонецЦикла;

	Возврат -1;

КонецФункции

// Преобразовывает исходную строку по формату представления реквизитов типа ФИО.
// Разделительные пробелы заменяет запятыми и преобразовывает символы в верхний
// регистр.
// 
// Возвращаемое значение:
//   строка, преобразованная по формату МНС.
//
Функция СтрЗаменитьПробелы(ИсхСтрока) Экспорт
	
	ПромСтр=СокрЛП(ИсхСтрока); 
	
	Если ПустаяСтрока(ПромСтр) Тогда
		ПромСтр = ",,";
		
		Возврат ПромСтр;
	КонецЕсли;

	// сначала удаляем возможный недопустимый символ '.'
	ЧП = СтрЧислоВхождений(ПромСтр,".");
	Если ЧП>0 Тогда
		Для К=1 По ЧП Цикл
			РезСтр=СтрЗаменить(ПромСтр,"."," ");
			ПромСтр=РезСтр;
		КонецЦикла; 
	КонецЕсли;
	
	// Число разделительных пробелов
	ЧП=СтрЧислоВхождений(ПромСтр," ");
	Если ЧП>0 Тогда
		Для К=1 По ЧП Цикл
			РезСтр  = СтрЗаменить(ПромСтр," ",",");
			ПромСтр = РезСтр;
		КонецЦикла; 
	КонецЕсли;
	
	// проверяем соответствие формату представления
	КолЗап = СтрЧислоВхождений(ПромСтр,",");
	Если КолЗап < 2 Тогда
		// дополняем недостающими запятыми
		Для Ном=(КолЗап+1) По 2 Цикл
			ПромСтр=ПромСтр+",";
		КонецЦикла;
	ИначеЕсли КолЗап > 2 Тогда
		Пока СтрЧислоВхождений(ПромСтр, ",") <> 2 Цикл
			НайденПовтор = 0;
			
			ПозицияЗапятой = Найти(ПромСтр, ",");
			Если Сред(ПромСтр, ПозицияЗапятой + 1, 1) = "," Тогда
				НачПозиция	 = ПозицияЗапятой;
				НайденПовтор = 1;
			Иначе
				ПозицияЗапятой2 = Найти(Сред(ПромСтр, ПозицияЗапятой + 1), ",");
				Если Сред(ПромСтр, ПозицияЗапятой + ПозицияЗапятой2 + 1, 1) = "," Тогда
					НачПозиция	 = ПозицияЗапятой + ПозицияЗапятой2;
					НайденПовтор = 1;
				КонецЕсли;
			КонецЕсли;	
			
			Если НайденПовтор = 1 Тогда
				ПромСтр = Лев(ПромСтр, НачПозиция) + Сред(ПромСтр, НачПозиция + 2);
			Иначе
				Если Прав(ПромСтр, 1) = "," Тогда
					// лишние хвостовые пробелы удаляем
					ПромСтр = Лев(ПромСтр, СтрДлина(ПромСтр) - 1);
				Иначе
					// лишние запятые заменяем пробелами
					ПромСтр = Лев(ПромСтр, ПозицияЗапятой - 1) + " " + Сред(ПромСтр, ПозицияЗапятой + 1); 
				КонецЕсли;
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
		
	Возврат ВРег(ПромСтр);         
	
КонецФункции // СтрЗаменитьПробелы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УНИВЕРСАЛЬНОЙ ПЕЧАТИ
//

// Проверяет принадлежность строки табличного документа по номеру, указанному
// в параметре СледСтрока, группе строк ГруппаСтрок табличного документа  
Функция ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок)
	Для Каждого ГруппаСтрок Из ГруппыСтрок Цикл
		Если ГруппаСтрок.Верх <= СледСтрока И ГруппаСтрок.Низ >= СледСтрока Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции // ЕстьСоответствующаяОбластьГруппСтрок()

// Возвращает максимальное количество строк многострочных частей,
// описываемых в структуре МногострочныеЧасти
Функция МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти)
	Максимум = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Максимум = Макс(Максимум, Эл.Значение.Количество());
	КонецЦикла;
	Возврат Максимум;
КонецФункции // МаксимальноеКоличествоОбластейМногострочнойЧасти()

// Проверяет является ли описываемая в элементе списка значений
// ЭлСпКоорд строка частью одной из многострочных частей, описываемых в 
// структуре МногострочныеЧасти
Функция ЭтоОднаИзМногострочныхЧастей(ЭлСпКоорд, МногострочныеЧасти, ШагСтроки = 1)
	Коорд = ЭлСпКоорд.Значение;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Для Каждого ЭлСп Из Эл.Значение Цикл
			Если Число(ЭлСп.Представление) + ШагСтроки - 1 = Коорд Тогда
				Возврат Эл.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Ложь;
КонецФункции // МаксимальноеКоличествоОбластейМногострочнойЧасти()

// Разбивает табличный документ, соответствующий разделу с именем ИмяРаздела
// на части, ограниченные горизонтальным разделителем страниц, верхней или нижней границами
// табличного документа.
Функция ПолучитьКартуЛистовРаздела(Форма, ИмяРаздела)
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	ТаблПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
	КолСтрок = ТаблПоле.ВысотаТаблицы;
	НачСтрока = 1;
	Для Сч = 1 По КолСтрок Цикл
		Если ТаблПоле.Область("R" + Сч).КонецСтраницы Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = НачСтрока;
			НовСтр.Низ = Сч;
			НачСтрока = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	Если (Карта.Количество() = 0) ИЛИ (Карта.Получить(Карта.Количество() - 1).Низ <> КолСтрок) Тогда
		НовСтр = Карта.Добавить();
		НовСтр.Верх = ?(Карта.Количество() = 1, 1, Карта.Получить(Карта.Количество() - 2).Низ + 1);
		НовСтр.Низ = КолСтрок;
	КонецЕсли;
	Возврат Карта;
КонецФункции // ПолучитьКартуЛистовРаздела()

#Если Клиент Тогда
	
// Возвращает координату нижней строки области с именем ИмяОбласти раздела с именем Раздел.
// Для областей, ограничивающих многострочные части раздела, возвращается координата
// нижней строки многострочной части.
Функция ПолучитьНизМногострочнойЧасти(Форма, Раздел, ИмяОбласти)
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(Форма, Раздел);
	ТаблПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + Раздел];
	Обл = ТаблПоле.ПолучитьОбласть(ИмяОбласти);
	Низ = ТаблПоле.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(Низ, ГруппыСтрок) Цикл
		Низ = Низ + 1;
	Конеццикла;
	Возврат Низ - 1;
КонецФункции //ПолучитьНизМногострочнойЧасти()

// Возвращает строки многострочной части в виде табличных документов
// Параметры:
// Форма - объект Форма из которого вызвана печать
// Раздел - имя печатаемого раздела
// ИмяОбласти - имя области многострочной части
Функция ПолучитьОбластиМногострочнойЧасти(Форма, Раздел, ИмяОбласти)
	
	ОбластиМногострочнойЧасти = Новый СписокЗначений;
	Если ИмяОбласти = Неопределено Тогда
		Возврат ОбластиМногострочнойЧасти;
	КонецЕсли;
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(Форма, Раздел);
	ТаблПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + Раздел];
	Обл = ТаблПоле.ПолучитьОбласть(ИмяОбласти);
	
	Шаг = ПолучитьШагСтрокиДляТабличногоПоля(ТаблПоле);
	
	Для Сч = 1 По Обл.ВысотаТаблицы / Шаг Цикл
		ОблВрем = Обл.ПолучитьОбласть((Сч - 1) * Шаг + 1, 0, Сч * Шаг, 0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, ТаблПоле.Области.Найти(ИмяОбласти).Верх + (Сч - 1) * Шаг);
	КонецЦикла;
	СледСтрока = ТаблПоле.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок) Цикл
		ОблВрем = ТаблПоле.ПолучитьОбласть(СледСтрока,0,СледСтрока + Шаг - 1,0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, СледСтрока);
		СледСтрока = СледСтрока + Шаг;
	Конеццикла;
	Возврат ОбластиМногострочнойЧасти;
	
КонецФункции // ПолучитьОбластиМногострочнойЧасти()

// Возвращает массив имен многострочных частей табличного поля с именем ИмяТабличногоПоля.
// Поиск многострочных частей в табличном поле ограничивается верхней и нижней координатами - 
// Верх и Низ соответственно.
Функция	ПолучитьКартуМногострочныхСекцийЛиста(Форма, ИмяТабличногоПоля, Верх, Низ)
	ТаблДок = Форма.ЭлементыФормы[ИмяТабличногоПоля];
	МассивМногострочныхЧастей = Новый Массив;
	Для Каждого Обл Из ТаблДок.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки И Обл.Верх >= Верх И Обл.Низ <= Низ И Найти(ВРЕГ(Обл.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
			МассивМногострочныхЧастей.Добавить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
	Если МассивМногострочныхЧастей.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивМногострочныхЧастей;
	КонецЕсли;
КонецФункции // ПолучитьКартуМногострочныхСекцийЛиста()

// Возвращает количество готовых к выводу на печать листов формата A4 для 
// раздела с именем ИмяЛиста. Сфомированные листы хранятся в списке значений мПечатныеФормы
Функция КоличествоЛистовПоИмениЛиста(мПечатныеФормы, ИмяЛиста)
	КоличествоВхождений = 0;
	Для Каждого ЭлСп Из мПечатныеФормы Цикл
		Если ЭлСп.Представление = ИмяЛиста Тогда
			КоличествоВхождений = КоличествоВхождений + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат КоличествоВхождений;
КонецФункции

// Формирует готовый к выводу на печать лист формата A4. Лист - это область табличного документа,
// ограниченная снизу и сверху горизонтальными разделителями страниц или границами
// табличного документа.
// Параметры:
// Форма - форма отчета, из которой вызывается печать
// СтруктураПараметровЛиста - структура, содержащая параметры исходного листа
Процедура ВывестиНаПечатьЛистОбщая(Форма, СтруктураПараметровЛиста) Экспорт
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ИмяОбластиМногострочнойЧасти;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	СтруктураПараметровЛиста.Вставить("ВидПечати", НСтр("ru='Пакетная печать';uk='Пакетний друк'"));	

	ИмяРаздела = Сред(ИмяТабличногоПоля, 24);
	СтруктураПараметровЛиста.Вставить("ИмяРаздела", ИмяРаздела);	
	
	КартаСтраницРаздела = ПолучитьКартуЛистовРаздела(Форма, ИмяРаздела);
	НомЛиста = 0;
	
	Для Каждого Стр Из КартаСтраницРаздела Цикл
		
		НомЛиста = НомЛиста + 1;
		СтруктураПараметровЛиста.Вставить("Верх", Стр.Верх);
		СтруктураПараметровЛиста.Вставить("Низ", Стр.Низ);
		
		МассивМногострочныхЧастей = Неопределено;
		
		Состояние(Локализация.СтрШаблон(НСтр("ru='Фомирование печатной формы ¤1¤. Лист №¤2¤';uk='Формування друкованої форми ¤1¤. Аркуш №¤2¤'"), ИмяЛиста, (КоличествоЛистовПоИмениЛиста(Форма.мПечатныеФормы, ИмяЛиста) + 1)));
		
		СтруктураПараметровЛиста.Вставить("МногострочнаяЧасть", ПолучитьКартуМногострочныхСекцийЛиста(Форма, ИмяТабличногоПоля, Стр.Верх, Стр.Низ));
			
		ПечатныеЛисты = ВывестиНаПечатьЛистРаздела(Форма, СтруктураПараметровЛиста);
		
		Для Каждого Эл Из ПечатныеЛисты Цикл
			Форма.мПечатныеФормы.Добавить(Эл, ИмяЛиста);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиНаПечатьЛистОбщая()

// Пытается проставить номер страницы НомерЛиста в соответствующие ячейки табличного документа ТаблДок.
// Возвращает Истина, если удалось проставить номер. В противном случае возвращает Ложь.
Функция УдалосьПроставитьНомерСтраницы(ТаблДок,Знач НомерЛиста)
	ОбластиСНомерамиЛистов = Новый СписокЗначений;
	Для Каждого Обл Из ТаблДок.Значение.Области Цикл
		Если Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник ИЛИ Обл.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		Если Лев(ВРЕГ(Обл.Имя), 6) = "НОМСТР" И (Прав(Обл.Имя, 1) = "1" ИЛИ Прав(Обл.Имя, 1) = "2" ИЛИ Прав(Обл.Имя, 1) = "3" ИЛИ Прав(Обл.Имя, 1) = "4" ИЛИ Прав(Обл.Имя, 1) = "5" ИЛИ Прав(Обл.Имя, 1) = "6")Тогда
			ОбластиСНомерамиЛистов.Добавить(Обл);
		КонецЕсли;
		//Если ОбластиСНомерамиЛистов.Количество() = 3 Тогда
		//	Прервать;
		//КонецЕсли;
	КонецЦикла;
	
	Если ОбластиСНомерамиЛистов.Количество() < 3 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПервоеЧисло = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
	НомерЛиста = Цел(НомерЛиста / 10);
	ВтороеЧисло = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
	НомерЛиста = Цел(НомерЛиста / 10);
	ТретьеЧисло = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
	НомерЛиста = Цел(НомерЛиста / 10);
	ЧетвертоеЧисло = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
	НомерЛиста = Цел(НомерЛиста / 10);
	ПятоеЧисло = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
	НомерЛиста = Цел(НомерЛиста / 10);
	ШестоеЧисло = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
	
	Если ОбластиСНомерамиЛистов.Количество() = 3 Тогда
		ОбластиСНомерамиЛистов.Получить(0).Значение.Значение = ТретьеЧисло;
		ОбластиСНомерамиЛистов.Получить(1).Значение.Значение = ВтороеЧисло;
		ОбластиСНомерамиЛистов.Получить(2).Значение.Значение = ПервоеЧисло;
	Иначе
		ОбластиСНомерамиЛистов.Получить(0).Значение.Значение = ШестоеЧисло;
		ОбластиСНомерамиЛистов.Получить(1).Значение.Значение = ПятоеЧисло;
		ОбластиСНомерамиЛистов.Получить(2).Значение.Значение = ЧетвертоеЧисло;
		ОбластиСНомерамиЛистов.Получить(3).Значение.Значение = ТретьеЧисло;
		ОбластиСНомерамиЛистов.Получить(4).Значение.Значение = ВтороеЧисло;
		ОбластиСНомерамиЛистов.Получить(5).Значение.Значение = ПервоеЧисло;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // УдалосьПроставитьНомерСтраницы()

// Проставляет номера листов на каждом листе и общее количество листов на титульном;
// после нумерации выводит листыв в общую форму ПечатьРегламентированныхОтчетов.
// Параметры:
// Форма - объект типа Форма, из которого была вызвана печать.
// ВидПечати - строка, задающая действие, которое следует произвести с печатными формами: 
// непосредственная печать или предварительный просмотр.
// ПризнакНумеруемыхФорм - данный параметр следует установить в Ложь для тех
// печатных форм, в которых не предусмотрены области для нумерации листов и 
// указания общего количества листов (например, форма 4ФСС и т.п.).
Процедура ПроставитьНомераЛистов(Форма, ВидПечати, ПризнакНумеруемыхФорм = Истина) Экспорт;
	
	Если ПризнакНумеруемыхФорм Тогда
		Если Форма.мСчетчикСтраниц <> Истина Тогда
			НомерЛиста = 1;
			Для Каждого Эл Из Форма.мПечатныеФормы Цикл
				Если НЕ УдалосьПроставитьНомерСтраницы(Эл.Значение, НомерЛиста) Тогда
					Сообщить(НСтр("ru='Не удалось проставить номер страницы для ';uk='Не вдалося проставити номер сторінки для '") + Эл.Представление);
					Продолжить;
				КонецЕсли;
				НомерЛиста = НомерЛиста + 1;
			КонецЦикла;
			
			Если Форма.мПечатныеФормы.Количество() <> 0 Тогда
				ТаблДок = Форма.мПечатныеФормы.Получить(0).Значение.Значение;
				Если ТаблДок.Области.Найти("СоставленаНа6") <> Неопределено Тогда
					ВсегоЛистов = Формат(НомерЛиста - 1, "ЧЦ=6; ЧН=0; ЧВН=; ЧГ=");
					Попытка
						ТаблДок.Области.СоставленаНа1.Значение = Сред(ВсегоЛистов, 1, 1);
						ТаблДок.Области.СоставленаНа2.Значение = Сред(ВсегоЛистов, 2, 1);
						ТаблДок.Области.СоставленаНа3.Значение = Сред(ВсегоЛистов, 3, 1);
						ТаблДок.Области.СоставленаНа4.Значение = Сред(ВсегоЛистов, 4, 1);
						ТаблДок.Области.СоставленаНа5.Значение = Сред(ВсегоЛистов, 5, 1);
						ТаблДок.Области.СоставленаНа6.Значение = Сред(ВсегоЛистов, 6, 1);
					Исключение
						//Сообщить("Не удалось проставить общее количество листов на титульном листе отчета!", СтатусСообщения.Внимание);
					КонецПопытки;
				Иначе
					ВсегоЛистов = Формат(НомерЛиста - 1, "ЧЦ=3; ЧН=0; ЧВН=; ЧГ=");
					Попытка
						ТаблДок.Области.СоставленаНа1.Значение = Сред(ВсегоЛистов, 1, 1);
						ТаблДок.Области.СоставленаНа2.Значение = Сред(ВсегоЛистов, 2, 1);
						ТаблДок.Области.СоставленаНа3.Значение = Сред(ВсегоЛистов, 3, 1);
					Исключение
						//Сообщить("Не удалось проставить общее количество листов на титульном листе отчета!", СтатусСообщения.Внимание);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Если НЕ НаложитьДвухмерныйШтрихКод(Форма) Тогда
	//	Сообщить(НСтр("ru='Не удалось сгенерировать двухмерный штрих-код.';uk='Не вдалося згенерувати двомірний штрих-код.'"), СтатусСообщения.Внимание);
	//	Возврат;
	//КонецЕсли;
	
	НомераЛистов = Новый СписокЗначений;
	
	ПредПросмотр = ПолучитьОбщуюФорму("ПечатьРегламентированныхОтчетов", , Форма);
	Если ПредПросмотр.Открыта() Тогда
		ПредПросмотр.Закрыть();
		ПредПросмотр = ПолучитьОбщуюФорму("ПечатьРегламентированныхОтчетов", , Форма);
	КонецЕсли;
	НомерЛиста = 1;
	Для Каждого Эл Из Форма.мПечатныеФормы Цикл
		НовСтр = ПредПросмотр.СписокПечатаемыхЛистов.Добавить();
		НомЛиста = НомераЛистов.НайтиПоЗначению(Эл.Представление);
		Если НомЛиста = Неопределено Тогда
			НомЛиста = НомераЛистов.Добавить(Эл.Представление, "1");
			НЛиста = 1;
		Иначе
			НЛиста = Число(НомЛиста.Представление) + 1;
			НомЛиста.Представление = Строка(Число(НомЛиста.Представление) + 1);
		КонецЕсли;
		НовСтр.Наименование = Эл.Представление + НСтр("ru='. Лист №';uk='. Аркуш №'") + НЛиста;
		Если ТипЗнч(Эл.Значение) <> Тип("ТабличныйДокумент") Тогда
			НовСтр.ТабличныйДокумент = Эл.Значение.Значение;
		Иначе
			НовСтр.ТабличныйДокумент = Эл.Значение;
		КонецЕсли;
		НомерЛиста = НомерЛиста + 1;
	КонецЦикла;
	ПредПросмотр.ВидПечати = ВидПечати;
	ПредПросмотр.Открыть();
	
КонецПроцедуры // ПроставитьНомераЛистов()

// Для раздела с именем Раздел формирует таблицу значений, в которой перечисляются
// имена и вертикальные координаты областей - групп строк табличного документа, соответствующего
// данному разделу.
Функция ПолучитьКартуИменованныхГруппСтрок(Форма, Раздел)
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	ТаблПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + Раздел];
	Для Каждого Обл Из ТаблПоле.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = Обл.Верх;
			НовСтр.Низ = Обл.Низ;
		КонецЕсли;
	КонецЦикла;
	Возврат Карта;
КонецФункции //ПолучитьКартуИменованныхГруппСтрок()

// Для заданной по номеру НомСтр строки многострочной части, описываемой в элементе 
// списка значений МногострочныеЧасти, формирует и возвращает табличный документ,
// в котором очищены ячейки, содержащие значения и не защищенные от изменения пользователем.
Функция ПолучитьПустуюСтрокуМногострочнойЧасти(МногострочныеЧасти, НомСтр)
	ПерваяСтрока = МногострочныеЧасти.Значение.Получить(НомСтр).Значение;
	ИтоговыйТабличныйДокумент = Новый ТабличныйДокумент;
	ИтоговыйТабличныйДокумент.Вывести(ПерваяСтрока);
	Для Каждого Область Из ИтоговыйТабличныйДокумент.Области Цикл
		Если Область.СодержитЗначение Тогда //И НЕ Область.Защита Тогда
			Область.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат ИтоговыйТабличныйДокумент;
КонецФункции // ПолучитьПустуюСтрокуМногострочнойЧасти()

// Возвращает печатную форму (лист формата A4) листа раздела, не содержащего многострочные части.
// Параметры исходного листа задаются в структуре СтруктураПараметровЛиста.
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(Форма, СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем Верх;
	Перем Низ;

	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);

	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;
	
	ТабличноеПоле = Форма.ЭлементыФормы[ИмяТабличногоПоля];

	// Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для каждого Область Из ТабличноеПоле.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			// Добавляем в список имя области и ее верхнюю координату.
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		// В том случае, если в имени области не встречается строка "ПустаяСтрока", то
		// выводим область в результирующую таблицу и удаляем из списка.
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), ВРег("ПустаяСтрока")) = 0 Тогда
			
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
			
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		// Создаем массив выводимых областей.
		ВыводимыеОбласти = Новый Массив();
		
		// Добавляем в массив выводимые области таблицы для того, 
		// чтобы проверить: поместятся ли они на текущий лист.
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		флОбластьОграничителиУмещаетсяНаСтраницу = ПечатнаяФорма.ПроверитьВывод(ОбластьОграничители);
		
		Пока флОбластьОграничителиУмещаетсяНаСтраницу Цикл
			
			// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
			флВыводимыеОбластиУмещаютсяНаСтраницу = ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти);
			
			Если флВыводимыеОбластиУмещаютсяНаСтраницу Тогда
				ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
			Иначе
				ПечатнаяФорма.Вывести(ОбластьОграничители);
				ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;		
	
	Если ВидПечати = "ПоказатьБланк" Тогда
		ПечатнаяФорма.Показать(СокрП(Форма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
		ПечатнаяФорма.Напечатать();
	КонецЕсли;
	
	Возврат ПечатнаяФорма;
	
КонецФункции // ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей()

// Возвращает список значений, содержащий печатные формы - листы формата A4, готовые к выводу на печать.
// Листы формируются на основании исходного табличного документа, параметры которого и другие настройки
// печати хранятся в структуре СтруктураПараметровЛиста.
// Процедура расчитана на печать разделов, содержащих одну или несколько многострочных частей.
Функция ВывестиНаПечатьЛистРаздела(Форма, СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ИмяОбластиМногострочнойЧасти;
	Перем ИмяРаздела;
	Перем МногострочныеЧасти;
	Перем Верх;
	Перем Низ;
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("ИмяРаздела",         ИмяРаздела);
	СтруктураПараметровЛиста.Свойство("МногострочнаяЧасть", ИмяОбластиМногострочнойЧасти);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);
	
	Если ИмяОбластиМногострочнойЧасти = Неопределено Тогда
		СписокПечатныхФорм.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(Форма, СтруктураПараметровЛиста));
		Возврат СписокПечатныхФорм;
	КонецЕсли;
	
	//Если ИмяОбластиМногострочнойЧасти.Количество() = 1 Тогда
	//	СписокПечФорм = ВывестиНаПечатьЛистРазделаСОднойМногострочнойЧастью(Форма, СтруктураПараметровЛиста);
	//	Для Каждого Эл Из СписокПечФорм Цикл
	//		СписокПечатныхФорм.Добавить(Эл.Значение);
	//	КонецЦикла;
	//	Возврат СписокПечатныхФорм;
	//КонецЕсли;
	
	//ИмяЛиста = "";
	//Ориентация = ОриентацияСтраницы.Ландшафт;
	ИмяТабличногоПоля = "ПолеТабличногоДокумента" + ИмяРаздела;
	
	ТабличноеПоле = Форма.ЭлементыФормы[ИмяТабличногоПоля];

    // Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для Каждого Область Из ТабличноеПоле.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(ВРЕГ(Область.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				СписокВыводимыхНаПечатьОбластей.Добавить(ПолучитьНизМногоСтрочнойЧасти(Форма, ИмяРаздела, Область.Имя), Область.Имя);
			Иначе
				СписокВыводимыхНаПечатьОбластей.Добавить(Область.Низ, Область.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочныеЧасти = Новый Структура;
	Если ТипЗнч(ИмяОбластиМногострочнойЧасти) = Тип("Строка") Тогда
		МногострочныеЧасти.Вставить(ИмяОбластиМногострочнойЧасти, ПолучитьОбластиМногоСтрочнойЧасти(Форма, ИмяРаздела, ИмяОбластиМногострочнойЧасти));
	Иначе
		Для Каждого Эл Из ИмяОбластиМногострочнойЧасти Цикл
			МногострочныеЧасти.Вставить(Эл, ПолучитьОбластиМногоСтрочнойЧасти(Форма, ИмяРаздела, Эл));
		КонецЦикла;
	КонецЕсли;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();
	флПрервать = Ложь;
	КоличествоСтрок = 0;
	
	Строки = Новый Массив;
	
	ПустойТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПустыеСтрокиМногострочныхЧастей = Новый Массив(МногострочныеЧасти.Количество());
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		ПустыеСтрокиМногострочныхЧастей[НомСтр] = ПолучитьПустуюСтрокуМногострочнойЧасти(Эл, 0);
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	//ОчиститьМногострочныеЧастиОтПустыхСтрок(МногострочныеЧасти);
	
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Если Эл.Значение.Количество() = 0 Тогда
			Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	Пока МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Цикл
		
		//ПечатнаяФорма.Очистить();
		ПечатнаяФорма = Новый ТабличныйДокумент();
		
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;
		
		НомСтр = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Если Эл.Значение.Количество() = 0 Тогда
				Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 Тогда
				ОбластьОграничители = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;
			Если Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				ОбластьПустаяСтрока = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;                                                                                   
			Если МногострочныеЧасти.Свойство(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление) Тогда
				Продолжить;
			КонецЕсли;
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
		КонецЦикла;
		
		Строки.Очистить();
		Инд = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Попытка
				Строки.Добавить(Эл.Значение.Получить(0).Значение);
			Исключение
				Строки.Добавить(ПустыеСтрокиМногострочныхЧастей[Инд]);
			КонецПопытки;
			Инд = Инд + 1;
		КонецЦикла;
		Строки.Добавить(ОбластьПустаяСтрока);
		Строки.Добавить(ОбластьОграничители);
		
		Ном = 1;
		Пока ПечатнаяФорма.ПроверитьВывод(Строки) Цикл
			Ном = Ном + 1;
			НомерЭлементаТабличнойЧасти = 0;
			Для Каждого Эл Из МногострочныеЧасти Цикл
				Если Эл.Значение.Количество() > 0 Тогда
					ПечатнаяФорма.Вывести(Строки[НомерЭлементаТабличнойЧасти]);				
					НомерЭлементаТабличнойЧасти = НомерЭлементаТабличнойЧасти + 1;
				КонецЕсли;
			КонецЦикла;

			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) >= Ном Тогда
				НомерМнЧ = 0;
				Для Каждого Эл Из МногострочныеЧасти Цикл
					Попытка
						Строки[НомерМнЧ] = Эл.Значение.Получить(Ном - 1).Значение;
					Исключение
						Строки[НомерМнЧ] = ПустойТабличныйДокумент;//?(Ном = 1, ПустыеСтрокиМногострочныхЧастей[НомерМнЧ], ПустойТабличныйДокумент);
					КонецПопытки;
					НомерМнЧ = НомерМнЧ + 1;
				КонецЦикла;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
				
		КоличествоВыводимыхСтрок = Ном - 1;
		//Защита против частей разделов, которые не помещаются на лист, если даже
		//выводить по одной строке из каждой многострочной части.
		Если КоличествоВыводимыхСтрок = 0 Тогда
			КоличествоВыводимыхСтрок = 1;
		КонецЕсли;
		
		ИтоговыйТаблДок = Новый ТабличныйДокумент;
		ИтоговыйТаблДок.ОтображатьЗаголовки = Ложь;
		ИтоговыйТаблДок.ОтображатьСетку     = Ложь;
		ИтоговыйТаблДок.ЧерноБелыйПросмотр  = Истина;
		ИтоговыйТаблДок.ЧерноБелаяПечать    = Истина;
		ИтоговыйТаблДок.Автомасштаб         = Истина;
		ИтоговыйТаблДок.ОриентацияСтраницы  = Ориентация;
		
		НомерМногострочнойЧасти = -1;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 
				  ИЛИ Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			Рез = ЭтоОднаИзМногострочныхЧастей(СписокВыводимыхНаПечатьОбластей.Получить(Сч), МногострочныеЧасти, ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле));
			//Если Рез = Ложь И Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
			//	Продолжить
			//КонецЕсли;
			Если Рез <> Ложь ИЛИ Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				НомерМногострочнойЧасти = НомерМногострочнойЧасти + 1;
				ТаблЧастьВыведена = Истина;
				Если Рез = Ложь Тогда
					НомМнЧ = -1;
					Для Каждого ЭлСтр Из МногострочныеЧасти Цикл
						НомМнЧ = НомМнЧ + 1;
						Если НомМнЧ = НомерМногострочнойЧасти Тогда
							ИтоговыйТаблДок.Вывести(ЭлСтр.Значение.Получить(0).Значение);
							ЭлСтр.Значение.Удалить(0);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() >= Инд + 1 Тогда
							ИтоговыйТаблДок.Вывести(Рез.Получить(Инд).Значение);
						КонецЕсли;
					КонецЦикла;
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() > 0 Тогда
							Рез.Удалить(0);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ИтоговыйТаблДок.Вывести(ОбластьВыводимаяНаПечать);				
		КонецЦикла;
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		//ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		
		// Проверяем вывод области "Ограничители".
		флОбластьОграничителиУмещаетсяНаСтраницу = ИтоговыйТаблДок.ПроверитьВывод(ВыводимыеОбласти);
		
		// Поиск "Правого присоединения" - секции с ИНН, КПП, номером страницы, находящейся справа
		ТаблПоле = ТабличноеПоле.ПолучитьОбласть(Верх, , Низ, );
		ПравоеПрисоединение = Неопределено;
		Для НомерПравогоПрисоединения = 0 По 10 Цикл
			ПравоеПрисоединение = ТаблПоле.Области.Найти("ПравоеПрисоединение" + Формат(НомерПравогоПрисоединения, ""));
			Если ПравоеПрисоединение <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если флОбластьОграничителиУмещаетсяНаСтраницу Тогда
			
			ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
			
			Пока флОбластьОграничителиУмещаетсяНаСтраницу Цикл
				
				// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
				флВыводимыеОбластиУмещаютсяНаСтраницу = ИтоговыйТаблДок.ПроверитьВывод(ВыводимыеОбласти);
				
				Если флВыводимыеОбластиУмещаютсяНаСтраницу Тогда
					ИтоговыйТаблДок.Вывести(ОбластьПустаяСтрока);
				Иначе
					ИтоговыйТаблДок.Вывести(ОбластьОграничители);
					Если ПравоеПрисоединение <> Неопределено Тогда
						ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
						//ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
					КонецЕсли;
					ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
					
					Если ВидПечати = "ПоказатьБланк" Тогда
						ИтоговыйТаблДок.Показать(СокрП(Форма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
					ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
						ИтоговыйТаблДок.Напечатать();
					Иначе
						СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
					КонецЕсли;
					
					//ИтоговыйТаблДок.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ИтоговыйТаблДок.Вывести(ОбластьОграничители);
			Если ПравоеПрисоединение <> Неопределено Тогда
				ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
			КонецЕсли;
			ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
			
			Если ВидПечати = "ПоказатьБланк" Тогда
				ИтоговыйТаблДок.Показать(СокрП(Форма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
			ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
				ИтоговыйТаблДок.Напечатать();
			Иначе
				СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат СписокПечатныхФорм;
	
КонецФункции // ВывестиНаПечатьЛистРаздела()

Функция ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле)
	
	ОбластьОпределенияВысотыТаблицыСуществует = (ТабличноеПоле.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти") <> Неопределено);
	Если ОбластьОпределенияВысотыТаблицыСуществует Тогда
		Шаг = ТабличноеПоле.ПолучитьОбласть("ОпределениеВысотыСтрокиМногострочнойЧасти").ВысотаТаблицы;
	Иначе
    	Шаг = 1;
	КонецЕсли;
	Возврат Шаг;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// записывает в рег-р сведений новые фамилию, имя и отчество
Процедура ЗаписатьДанныеФИОВРегистр(Ссылка, Фамилия, Имя, Отчество) Экспорт
	
	ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка));
	
	СтрокаСреза = ФИОСрез.Фамилия + ФИОСрез.Имя + ФИОСрез.Отчество;
	
	Если СтрокаСреза <> (Фамилия + Имя + Отчество) Тогда
		
		МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ФизЛицо = Ссылка;
		Если ПустаяСтрока(СтрокаСреза) Тогда
			МенеджерЗаписи.Период = '19000101';
		Иначе
			МенеджерЗаписи.Период = РабочаяДата;
		КонецЕсли;
		
		МенеджерЗаписи.Фамилия = Фамилия;
		МенеджерЗаписи.Имя = Имя;
		МенеджерЗаписи.Отчество = Отчество;
		
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ, ИСПОЛЬЗУЕМЫЕ В ДРУГИХ ДЕКЛАРАЦИЯХ
//

// роВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы,
//            в табличное поле которой вставляется дополнительная страница.
//  Если ИмяТекущейСтраницыПанели - неопределено, тогда берется
//  из активной ОсновнойПанели на форме.
//
Процедура роВставитьДополнительнуюСтраницу(Форма, ИмяТекущейСтраницыПанели = Неопределено ) Экспорт

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = Форма.ЭлементыФормы[ИмяТекТабличногоПоля];

	// Сначала сохраним данные текущей страницы.
	// Если на листе есть многострочность, то удалим ее.
	роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницыПанели, Истина);

	// Часть для подстраховки, от старой системы хранения многостраничности
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
	КонецЕсли;

	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если СтрТаблицаСтраницы <> Неопределено Тогда

		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

		// Добавляем новую страницу
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();

		// Присваиваем представление по умолчанию
		СтрНоваяСтраница.Представление      = НСтр("ru='Новая страница';uk='Нова сторінка'");

		// Ставим признак активной страницы
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;

		КолМногострочныхЧастей = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

		// Если есть многострочность, то она очищена в проц роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице
		// Если многострочность есть, то она удалится и запустится Расчет на стадии роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице
		Если КолМногострочныхЧастей = 0 Тогда
				// Очищаем текущее поле
			Форма.ОчиститьТабличноеПоле(ТекТабличноеПоле);
		КонецЕсли;

		Если КолМногострочныхЧастей = 0 Тогда
			// Выполняем расчет показателей добавленной страницы
		//	Форма.Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		//ТекущийЭлемент     = ТекТабличноеПоле;
		Форма.Модифицированность = Истина;

	КонецЕсли;

	роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // роВставитьДополнительнуюСтраницу()

// роДоступностьКнопокЛистания
// Процедура управляет доступностью кнопок "<" и ">" листания страниц
// многостраничных разделов формы
//
// Параметры:
//  НомерТекущейСтраницы - число, порядковый номер текущей страницы;
//  КоличествоСтраниц    - число, количество страниц многостраничного раздела;
//  ИмяТекСтраницы       - строка, имя текущей страницы основной панели формы.
//
Процедура роДоступностьКнопокЛистания(Форма, НомерТекущейСтраницы, КоличествоСтраниц, ИмяТекущейСтраницыПанели) Экспорт

	ДоступностьКнопкаПредыдущаяСтраница = Ложь;
	ДоступностьКнопкаСледующаяСтраница  = Ложь;

	Если НомерТекущейСтраницы > 1 Тогда
		ДоступностьКнопкаПредыдущаяСтраница = Истина;
	КонецЕсли;

	Если НомерТекущейСтраницы < КоличествоСтраниц Тогда
		ДоступностьКнопкаСледующаяСтраница = Истина;
	КонецЕсли;

	Форма.ЭлементыФормы["КнопкаПредыдущаяСтраница" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьКнопкаПредыдущаяСтраница;
	Форма.ЭлементыФормы["КнопкаСледующаяСтраница"  + ИмяТекущейСтраницыПанели].Доступность = ДоступностьКнопкаСледующаяСтраница;
	
КонецПроцедуры // роДоступностьКнопокЛистания()

// роОбновитьСтруктуруМногостраничныхРазделов
// Вариант версия 12.05.2005
// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
// Используется в следующих процедурах и функциях:
// Процедура Очистить()
// Процедура Сохранить()
// Процедура ЗаполнитьСведенияОбФЛ()
// Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах
// Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей
// Функция ПроверитьПредписанныеПоказатели
//
Процедура роОбновитьСтруктуруМногостраничныхРазделов(Форма, ИмяСтраницы = Неопределено) Экспорт

	Для Каждого Страница Из Форма.мСтруктураМногостраничныхРазделов Цикл
		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Страница.Значение;

		Если ИмяСтраницы <> Неопределено Тогда
			Если ИмяСтраницы <> ИмяТекущейСтраницыПанели Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		// Для декларации по прибыли, специальные два раздела сохраняются особым образом
		// пришлось внести изменения в общий модуль и процедуру для всех отчетов

		Если (ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ1") Или (ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ2") Тогда
			Форма.СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения(ИмяТекущейСтраницыПанели);
		Иначе

		// Обновляя представления сохранения активного листа декларации
		// Параметр Ложь - не позволяет удалять многострочные части, если они есть на листе
			роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницыПанели, Ложь);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // роОбновитьСтруктуруМногостраничныхРазделов()

// роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура входит в группу стандартных функций
// Вариант версия 17.05.2005
// Всегда используется в обработчике "ПриОткрытии" основной формы декларации
//
Процедура роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(Форма) Экспорт

	Если ТипЗнч(Форма.мСвойстваРазделовДекларации) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.Строки Цикл
		Если СтрокаУровня1.ПредставлениеДанных Тогда
			Форма.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(СтрокаУровня1.ИмяСтраницы);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// роОпределитьПредставлениеДопСтраниц
// Процедура присваивает дополнительным листам многостраничных разделов
// уникальные имена (представление).
// Если ИмяСтраницы - неопределено, тогда по всем страницам
// ТолькоУАктивнойСтраницы - Если Истина то только у активной страницы меняется представление
// ТолькоУАктивнойСтраницы = Ложь или Неопределено - тогда у всех в структуре
//
Процедура роОпределитьПредставлениеДопСтраниц(Форма, ИмяСтраницы = Неопределено, ТолькоУАктивнойСтраницы = Неопределено) Экспорт
	Перем ТаблицаСтраницРаздела;
	Перем ТекущееПредставлениеСтраницы;

	ТолькоАктивная = ?(ТолькоУАктивнойСтраницы = Неопределено, Ложь, ТолькоУАктивнойСтраницы);

	Для Каждого Страница Из Форма.мСтруктураМногостраничныхРазделов Цикл
		ИмяТекСтраницы        = Страница.Ключ;
		ТаблицаСтраницРаздела = Страница.Значение;

		Если ИмяСтраницы <> Неопределено Тогда
			Если ИмяТекСтраницы <> ИмяСтраницы Тогда
				Продолжить; // Пропускаем не нужные страницы
			КонецЕсли;
		КонецЕсли;

		// Если есть хоть одна страница - определим её представление
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда
			НомерСтраницы = 0;
			Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл

				НомерСтраницы = НомерСтраницы + 1;

				СохрПредставлениеСтраницы = СтрокаТаблицы.Представление;

				// Определяем представление дополнительной страницы
				СтруктураДанныхСтраницы = СтрокаТаблицы.Данные;

				ИмяПредставления = роПолучитьСвойствоРаздела(Форма, ИмяТекСтраницы, "ИмяПредставления");
				СтруктураДанныхСтраницы.Свойство(ИмяПредставления, ТекущееПредставлениеСтраницы);

				Если (НЕ ТолькоАктивная) Или ((ТолькоАктивная) И (СтрокаТаблицы.АктивнаяСтраница))Тогда

					ТекущееПредставлениеСтраницы = ?(ПустоеЗначение(ТекущееПредставлениеСтраницы), НСтр("ru='Лист N ';uk='Аркуш N '") + Строка(НомерСтраницы), ТекущееПредставлениеСтраницы + НСтр("ru='. Лист N ';uk='. Аркуш N '") + Строка(НомерСтраницы));
					Если Не ПустаяСтрока(ТекущееПредставлениеСтраницы) Тогда
						СтрокаТаблицы.Представление = ТекущееПредставлениеСтраницы;
					Иначе
						СтрокаТаблицы.Представление = НСтр("ru='Новая страница';uk='Нова сторінка'");
					КонецЕсли;

				КонецЕсли; // ТолькоАктивная

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // роОпределитьПредставлениеДопСтраниц

// роОткрытьФормуСпискаДопСтраниц
// Версия-вариант 12.05.2005
// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
//
Процедура роОткрытьФормуСпискаДопСтраниц(Объект, Форма, ИмяСтраницы = Неопределено) Экспорт
	Перем ТаблицаСтраницРаздела;
	Перем ВыбрТаблицаСтраницРаздела;
	Перем ФлМодифицированностьСписка;

	// В процедуру внесены изменения, если на основной панели, есть ещё панель
	// то вторым параметром следует передавать имя листа
	// по умолчанию берется из основной панели, текущий лист

	Если ИмяСтраницы = Неопределено Тогда

		ТекущаяСтраницаПанели    = Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Иначе

		ИмяТекущейСтраницыПанели = ИмяСтраницы;

	КонецЕсли;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	Если ТаблицаСтраницРаздела.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = Форма.ЭлементыФормы[ИмяТекТабличногоПоля];

	// Сначала сохраним данные текущей страницы.
	//
	// СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницыПанели, Ложь);

	//ФормаВыбораДопСтраницы = Обработки.ОперацииРегламентированнойОтчетности.ПолучитьФорму("ФормаСпискаДопСтраниц", Форма, "дляПереходаНаСтраницу");
	ФормаВыбораДопСтраницы = Объект.ПолучитьФорму("ФормаСпискаДопСтраниц", Форма, "дляПереходаНаСтраницу");

	// ФормаВыбораДопСтраницы = Форма.ЭтотОбъект.ПолучитьФорму("ФормаСпискаДопСтраниц", Форма, "дляПереходаНаСтраницу");
	Если ФормаВыбораДопСтраницы.Открыта() Тогда
		ФормаВыбораДопСтраницы.Активизировать();
		Если Вопрос(НСтр("ru='Предыдущая операция показа списка страниц не завершена."
"Завершить?';uk='Попередня операція показу списку сторінок не завершена."
"Завершити?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаВыбораДопСтраницы.Закрыть();
		КонецЕсли;
	КонецЕсли;

	ФормаВыбораДопСтраницы.НачальноеЗначениеВыбора = ТаблицаСтраницРаздела;

	ВыбранноеЗначение = ФормаВыбораДопСтраницы.ОткрытьМодально();
	Если ВыбранноеЗначение <> Неопределено Тогда

		ВыбранноеЗначение.Свойство("ТаблицаСтраницРаздела",  ВыбрТаблицаСтраницРаздела);
		ВыбранноеЗначение.Свойство("ФлагМодифицированности", ФлМодифицированностьСписка);

		ТекСтраницаРаздела = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		ИндексТекСтраницы  = 0;

		Если ТекСтраницаРаздела <> Неопределено Тогда
			ИндексТекСтраницы = ТаблицаСтраницРаздела.Индекс(ТекСтраницаРаздела);
		КонецЕсли;

		//ИндексВыбСтраницы     = ИндексТекСтраницы;

		// ТаблицаСтраницРаздела = ВыбрТаблицаСтраницРаздела.Скопировать();
		ВыбраннаяСтраница = ВыбрТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		ПоисковоеПредставл = ВыбраннаяСтраница.Представление;
		
		ВыбСтраницаРаздела    = ТаблицаСтраницРаздела.Найти(ПоисковоеПредставл, "Представление");

		Если ВыбСтраницаРаздела <> Неопределено Тогда
			ИндексВыбСтраницы = ТаблицаСтраницРаздела.Индекс(ВыбСтраницаРаздела);
		КонецЕсли;

		Если ИндексВыбСтраницы <> ИндексТекСтраницы Тогда
			// Если была выбрана другая страница, то отображаем ее.
			//роПоказатьСтраницуМногостраничногоРаздела(Форма, ИндексВыбСтраницы - ИндексТекСтраницы, ИмяТекущейСтраницыПанели);
			роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Форма, ИндексВыбСтраницы, ИмяТекущейСтраницыПанели, Истина);
		КонецЕсли;

		Если ФлМодифицированностьСписка Тогда
			Модифицированность = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // роОткрытьФормуСпискаДопСтраниц()

// роВывестиЭлементыВариантаЗаполнения
//
// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура роВывестиЭлементыВариантаЗаполнения(Форма, ТекущаяЯчейка) Экспорт
	Перем Комментарий;

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		роДоступностьЭлементовВариантаЗаполнения(Форма,, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ТекущаяЯчейка) = Тип("РисунокТабличногоДокумента") Тогда
		// Пропускаем рисунки табличного документа
		роДоступностьЭлементовВариантаЗаполнения(Форма,, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		роДоступностьЭлементовВариантаЗаполнения(Форма,, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.СодержитЗначение <> Истина Тогда
		роДоступностьЭлементовВариантаЗаполнения(Форма,, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		роДоступностьЭлементовВариантаЗаполнения(Форма,, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ТекущаяСтраницаПанели    = Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = роПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		роДоступностьЭлементовВариантаЗаполнения(Форма,, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	Если ВариантЗаполнения = 1 ИЛИ 
		ВариантЗаполнения = 2 ИЛИ
		ВариантЗаполнения = 3 Тогда

		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
		Дельта            = НайденнаяСтрока.Дельта;
		Комментарий       = НайденнаяСтрока.Комментарий;

		Форма.ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
		Форма.ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		Форма.ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;	
		роДоступностьЭлементовВариантаЗаполнения(Форма, ВариантЗаполнения);

	ИначеЕсли ВариантЗаполнения = 0 Тогда
		роДоступностьЭлементовВариантаЗаполнения(Форма,, ТекущаяЯчейка);
	КонецЕсли;

КонецПроцедуры // роВывестиЭлементыВариантаЗаполнения()

// роДоступностьЭлементовВариантаЗаполнения
//
// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура роДоступностьЭлементовВариантаЗаполнения(Форма, Вариант = Неопределено, ТекущаяОбласть = Неопределено) Экспорт
	
	ТекущаяСтраницаПанели    = Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
	
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 240, 200) Тогда
			ОписаниеЯчейки    = НСтр("ru='Либо вручную, либо автоматически';uk='Або вручну, або автоматично'");

		КонецЕсли;
	Попытка
	// попытки сделаны для того, чтобы если автозапол только 4
	// на всем листе, то не пытаться выводить в комбобоксы
	// т.к. их может в этом случае не быть просто на форме
	// сделано для универсальности, пример есть в Имуществе
		Форма.ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		Форма.ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		Форма.ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;
	Исключение
		// в случае, если на листе не предусмотре автоматическое заполнение, кроме признака 4
	КонецПопытки;

	КонецЕсли;

	
	Попытка
	// попытки сделаны для того, чтобы если автозапол только 4
	// на всем листе, то не пытаться выводить в комбобоксы
	// т.к. их может в этом случае не быть просто на форме
	// сделано для универсальности, пример есть в Имуществе
	Форма.ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	Форма.ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	Форма.ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;
	Исключение
		// в случае, если на листе не предусмотре автоматическое заполнение, кроме признака 4
	КонецПопытки;

КонецПроцедуры // роДоступностьЭлементовВариантаЗаполнения

// роОчистить
// Функция входит в состав стандартных процедур/функций
// Вариант-версия 14.05.2005
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
// Возврат:
// Истина                  - если очистка произошла
// Ложь                    - в случае отказа от очистки
//
Функция роОчистить(Форма, ЗадаватьВопросПередОчисткой = Истина) Экспорт

	// Ранее, очистка происходила по панели, перебирая каждую страницу
	// Теперь переделано, и очистка проходит по свойствам декларации, перебирая
	// мСвойстваРазделовДекларации, т.к. на одной странице могутб быть несколько
	// табличных полей, например Прибыль, раздел Лист03_РазделыБВ

	// Переделано из процедуру в функцию
	// возвращает истина - если прошла очистка и ложь - если откзались от очистки
	ОчисткаПроизведена = Ложь;
	Если ЗадаватьВопросПередОчисткой Тогда

		Ответ = Вопрос(НСтр("ru='Внимание! Будут очищены все разделы (листы) документа."
"Продолжить операцию?';uk='Увага! Будуть очищені всі розділи (аркуші) документа."
"Продовжити операцію?'"), РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Нет);

		Если (Ответ = КодВозвратаДиалога.Нет) Или (Ответ = КодВозвратаДиалога.Отмена) Тогда

			Возврат ОчисткаПроизведена;

		Иначе

			ОчисткаПроизведена = Истина;

		КонецЕсли;

	КонецЕсли;

	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.Строки Цикл

		НазваниеСтраницы = СтрокаУровня1.ИмяСтраницы;
		Если (НазваниеСтраницы <> "Титульный") И (НазваниеСтраницы <> "ФизЛица") Тогда
			ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + НазваниеСтраницы;
			ТекТабличноеПоле = Форма.ЭлементыФормы[ИмяТекТабличногоПоля];
			Форма.ОчиститьТабличноеПоле(ТекТабличноеПоле);
		КонецЕсли;

	КонецЦикла;

	// Далее выясним, есть ли добавленные в многостраничный раздел дополнительные страницы.
	// При наличии таких страниц удаляем их.
	// Удалим все страницы кроме активных, таким образом в структуре будет всегда оставаться одна страница
	Для Каждого Страница Из Форма.мСтруктураМногостраничныхРазделов Цикл

		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Страница.Значение;

		Если (ТаблицаТекущейСтраницы.Количество() > 1)
		   И (ИмяТекущейСтраницыПанели <> "ФизЛица")
		   // Учесть ситуация в прибыли, два спец-листа, удалим по особой технологии
		   // из модуля объекта
		   И (ИмяТекущейСтраницыПанели <> "Лист03_РазделыБВ1")
		   И (ИмяТекущейСтраницыПанели <> "Лист03_РазделыБВ2") Тогда

			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаТекущейСтраницы.Количество()-1)) Цикл
				// Пропускаем активную страницу по той причине,
				// что данные активной страницы былы очищены ранее.
				СтрокаТаблицы = ТаблицаТекущейСтраницы[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					// удаляем дополнительную страницу
					ТаблицаТекущейСтраницы.Удалить(СтрокаТаблицы);

					Продолжить;
				КонецЕсли;

				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;

		КонецЕсли;

		Если (ИмяТекущейСтраницыПанели <> "Лист03_РазделыБВ1")
		   И (ИмяТекущейСтраницыПанели <> "Лист03_РазделыБВ2") Тогда

			// Здесь ИмяТекущейСтраницыПанели - это имя из многостраничной структуры, а не панели
			ПанельРаздела = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "НазваниеПанелиТабличногоПоляРаздела");
			Если Форма.ЭлементыФормы[ПанельРаздела].ТекущаяСтраница.Имя = ИмяТекущейСтраницыПанели Тогда
				// Покажем статик активной страницы, если она не многостраничная, то процедура ничего не сделает
				роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницыПанели);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	// Обновляем структуру многостраничных разделов
	роОбновитьСтруктуруМногостраничныхРазделов(Форма);

	// очищаем ячейки, в которых отображается дата подписи
	// должностных лиц организации
	Форма.ЗаполнитьДатуВЯчейках();

	// выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Форма.Расчет();

	// устанавливаем флаг модифицированности формы
	Форма.Модифицированность = Истина;

	Возврат ОчисткаПроизведена;

КонецФункции // роОчистить()

// роПоказатьСтатикСтраницРаздела
// Отображает на странице основной панели формы, содержащей многостраничный раздел,
// порядковый номер текущей страницы из набора страниц.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащей многостраничный раздел.
//
Процедура роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницыПанели) Экспорт
	Перем ТаблицаСтраницРаздела;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;
	КоличествоСтраниц    = Макс(ТаблицаСтраницРаздела.Количество(), 1);

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если СтрТаблицаСтраницы <> Неопределено Тогда
		НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
	КонецЕсли;

	СтатикСтраницРаздела = Строка(НомерТекущейСтраницы) + НСтр("ru=' из ';uk=' з '") + КоличествоСтраниц;
	Форма.ЭлементыФормы["НадписьСтатикСтраниц" + ИмяТекущейСтраницыПанели].Заголовок = СтатикСтраницРаздела;

	роДоступностьКнопокЛистания(Форма, НомерТекущейСтраницы, КоличествоСтраниц, ИмяТекущейСтраницыПанели);

//	Форма.УстановитьЦветФонаЯчейки(,, ИмяТекущейСтраницыПанели);

КонецПроцедуры // роПоказатьСтатикСтраницРаздела

// роПоказатьСтраницуМногостраничногоРаздела
//
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура роПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	Перем ТаблицаСтраницРаздела;
	Перем ТаблицаВариантыЗаполнения;
	Перем СтруктураДанныхДопСтрокРаздела;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = Форма.ЭлементыФормы[ИмяТекТабличногоПоля];

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если СтрТаблицаСтраницы = Неопределено Тогда
		роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницыПанели);
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы   = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);

	Если Не ПоказатьПоИндексу Тогда
		НомерСледующейСтраницы = НомерТекущейСтраницы + Шаг;
	Иначе
		НомерСледующейСтраницы = Шаг;
	КонецЕсли;

	Если ((НомерСледующейСтраницы + 1) > ТаблицаСтраницРаздела.Количество()) ИЛИ (НомерСледующейСтраницы < 0) Тогда
		Возврат;
	КонецЕсли;

	// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
	роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницыПанели, Истина);

	СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

	СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСледующейСтраницы];

	СтрСледующаяСтраница.АктивнаяСтраница = Истина;

	ТаблицаВариантыЗаполнения = роПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);

	КолМногострочныхЧастей = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

	Если КолМногострочныхЧастей > 0 Тогда

		НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;

		// Способ хранения многострочных частей
		СохранятьМногострКакТЗ = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "СохранятьМногострКакТЗ");

	Иначе

		НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
		ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено

	КонецЕсли;

	Если НовДанныеДопСтрокРаздела <> Неопределено Тогда

		// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
		Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
			Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
				ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
				ДанныеГруппыСтрок = ГруппаСтрок.Значение;

				ПромТаблицаГруппыСтрок = ДанныеГруппыСтрок.Скопировать();

				// Заменяем таблицу значений с данными текущей страницы.
				Форма.мСтруктураМногострочныхРазделов.Вставить(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				// Выводим в табличный документ данные группы дополнительных строк
				Форма.ВывестиРазделВТабличныйДокумент(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				// обновляем структуру многострочного раздела
				Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);
			КонецЦикла;

		ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда

			ИмяГруппыДопСтрок = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяТекущейСтраницыПанели);

			ПромТаблицаДопСтрокРаздела = НовДанныеДопСтрокРаздела.Скопировать();
			// Заменяем таблицу значений с данными текущей страницы.
			Форма.мСтруктураМногострочныхРазделов.Вставить(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
			// Выводим в табличный документ данные группы дополнительных строк
			Форма.ВывестиРазделВТабличныйДокумент(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
			// обновляем структуру многострочного раздела
			Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);

		КонецЕсли;

	КонецЕсли;

	// отображаем данные следующей страницы
	СтруктураДанныхСледующаяСтраница = СтрСледующаяСтраница.Данные;
	ПредставлениеДанных = роПолучитьСвойствоРаздела(Форма, ИмяТекТабличногоПоля, "ПредставлениеДанных");

	Для Каждого Элемент Из СтруктураДанныхСледующаяСтраница Цикл
		ИмяПоказателя      = Элемент.Ключ;
		ЗначениеПоказателя = Элемент.Значение;

		Если ПредставлениеДанных Тогда

			Если Форма.ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
				Продолжить; // Пропустим цикл
			КонецЕсли;

		КонецЕсли;

			//Если Форма.мСтараяВерсияФормы <> Форма.мВерсияФормы Тогда
			// Старая версия формы, нужно по позможности собрать данные

				Попытка
					ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;

			//Иначе
			//	ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			//КонецЕсли;

			Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда
				// обновляем примечания к ячейкам табличного документа
				НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
				Если НайденнаяСтрока <> Неопределено Тогда
					ТекущийКомментарий = ТекТабличноеПоле.Области[ИмяПоказателя].Примечание.Текст;
					НовыйКомментарий   = НайденнаяСтрока.Комментарий;

					// примечание к ячейке устанавливаем тогда, когда изменился текст комментария
					Если Не (ПустаяСтрока(ТекущийКомментарий) И ПустаяСтрока(НовыйКомментарий)) Тогда
						ТекТабличноеПоле.Области[ИмяПоказателя].Примечание.Текст = НовыйКомментарий;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

	КонецЦикла;

	//ТекущийЭлемент = ТекТабличноеПоле;

	роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // роПоказатьСтраницуМногостраничногоРаздела()

// роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
//
// Вывод необходимого номера страницы
// Входит в блок стандартизированных процедур/функций
// Вариант-версия 14.05.2005
// Выводит особым способом в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
//
Процедура роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Форма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь) Экспорт
	Перем ТаблицаСтраницРаздела;
	Перем ТаблицаДопСтрокРаздела;
	Перем ТаблицаВариантыЗаполнения;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = Форма.ЭлементыФормы[ИмяТекТабличногоПоля];

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	НомерСледующейСтраницы = Шаг;

	Если ((НомерСледующейСтраницы + 1) > ТаблицаСтраницРаздела.Количество()) ИЛИ (НомерСледующейСтраницы < 0) Тогда
		Возврат;
	КонецЕсли;

	// Для страниц многостраничного раздела, содержащих многострочную часть,
	// дополнительно сохраняем данные многострочной части.

	СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСледующейСтраницы];
	Если УчестьАктивнуюСтраницу Тогда
		// найдем активную страницу
		АктивнаяСтраницаВ = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		АктивнаяСтраницаВИнд = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаВ);
		ТекущиеАктивныеДанные = ТаблицаСтраницРаздела[АктивнаяСтраницаВИнд];
		ТекущиеАктивныеДанные.АктивнаяСтраница = Ложь; // убираем активность
		СтрСледующаяСтраница.АктивнаяСтраница = Истина; // ставим новую активность
	КонецЕсли;

	ТаблицаВариантыЗаполнения = роПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);

	// отображаем данные
	СтруктураДанныхСледующаяСтраница = СтрСледующаяСтраница.Данные;

	ПредставлениеДанных = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "ПредставлениеДанных");

	Для Каждого Элемент Из СтруктураДанныхСледующаяСтраница Цикл
		ИмяПоказателя      = Элемент.Ключ;
		ЗначениеПоказателя = Элемент.Значение;

		Если ПредставлениеДанных Тогда
			Если Форма.ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
				Продолжить; // Пропустим цикл
			КонецЕсли;
		КонецЕсли;

		//Если Форма.мСтараяВерсияФормы <> Форма.мВерсияФормы Тогда
		// Старая версия формы, нужно по позможности собрать данные

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		//Иначе
		//	ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		//КонецЕсли;

		Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда
			// обновляем примечания к ячейкам табличного документа
			НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
			Если НайденнаяСтрока <> Неопределено Тогда
				ТекущийКомментарий = ТекТабличноеПоле.Области[ИмяПоказателя].Примечание.Текст;
				НовыйКомментарий   = НайденнаяСтрока.Комментарий;

				// примечание к ячейке устанавливаем тогда, когда изменился текст комментария
				Если Не (ПустаяСтрока(ТекущийКомментарий) И ПустаяСтрока(НовыйКомментарий)) Тогда
					ТекТабличноеПоле.Области[ИмяПоказателя].Примечание.Текст = НовыйКомментарий;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Специально для декл. по прибыли, не отображать статит общими средствами
	// в листах Лист03_РазделыБВ1 и Лист03_РазделыБВ2
	Если (ИмяТекущейСтраницыПанели <> "Лист03_РазделыБВ1")И (ИмяТекущейСтраницыПанели <> "Лист03_РазделыБВ2") Тогда
		роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

КонецПроцедуры // роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении()

// роПолучитьСвойствоРаздела
//
// Получает из дерево св-в необходимый параметр
// Параметры
// ИмяСтраница - название страницы, для которой необходимо получить св-во
// ИмяСвойства - имя настройки
//
Функция роПолучитьСвойствоРаздела(Форма, Знач ИмяСтраницы, Знач ИмяСвойства) Экспорт

	Результат = Неопределено;

	Если ТипЗнч(Форма.мСвойстваРазделовДекларации) <> Тип("ДеревоЗначений") Тогда
		Возврат Результат;
	КонецЕсли;

	Если Найти(ИмяСтраницы, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницыП = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницыП = ИмяСтраницы;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.Строки Цикл
		Если ИмяСтраницыП = СтрокаУровня1.ИмяСтраницы Тогда
			Результат = СтрокаУровня1[ИмяСвойства];
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ПолучитьСвойствоРаздела

// роПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция роПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь) Экспорт
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;
			Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаСтраницРаздела) Тогда
				// Раздел является многостраничным. Определим активную страницу раздела:
				СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

				Если СтрТаблицаСтраницы <> Неопределено Тогда
					НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
				КонецЕсли;
			КонецЕсли;

			Если МассивВариантовЗаполненияСтраниц.Количество() < НомерТекущейСтраницы Тогда
				Для Сч = МассивВариантовЗаполненияСтраниц.Количество() По НомерТекущейСтраницы Цикл
					МассивВариантовЗаполненияСтраниц.Добавить(МассивВариантовЗаполненияСтраниц[0].Скопировать());	
				КонецЦикла;
			КонецЕсли;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
			ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = Форма.ЭтотОбъект.ПолучитьМакет(Форма.мСоставПоказателей);

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

					КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
						НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // роПолучитьТаблицуВариантовЗаполнения()

// роПроставитьНаВсехЛистах()
// Процедура проставляет значения в многостраничных документах
// может использоваться для простановки значений на одном листе, в нескольких позициях
//
// Параметры:
// Значение          - Значение, которое будет проставлено на лист
// ПрефиксНаЛисте    - Смысловая часть ячейки, без индекса в конце, например "ДатаПодписи"
// ЛистИсключение    - Лист, в котором не нужно проставлять данные, лист исключение
// ТолькоДляЛиста    - Название листа, если указано, то только этот лист будет обрабатываться
// ТолькоАктивныйЛистМногостраничнойчасти - Только активный лист, по умолчанию выключен режим
// ИспользоватьНомер - В случае, если параметр повторяется на листе несколько раз, например ИНН или КПП, по умолчанию включен
// ЛистыМногостраничные - если лист многостраничных, то проставлять во всех экземплярах листа, иначе, только в активном
//
Процедура роПроставитьНаВсехЛистах(Форма, Знач Значение, Знач ПрефиксНаЛисте, ЛистИсключение = Неопределено, ТолькоДляЛиста = Неопределено, ТолькоАктивныйЛистМногостраничнойчасти = Ложь, ИспользоватьНомер = Истина, ЛистыМногостраничные = Истина) Экспорт

	Перем ТаблицаСтраницРаздела;

	Если Найти(ПрефиксНаЛисте, "КПП") > 0 Тогда


	КонецЕсли;

	ПереборЗнач = Форма.мДеревоВыбранныхСтраниц.Строки.Количество();

	Пока ПереборЗнач > 0 Цикл

		ИмяДляРасчета = Форма.мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ИмяСтраницы;

		Если ТолькоДляЛиста <> Неопределено Тогда
			Если ТолькоДляЛиста <> ИмяДляРасчета Тогда
				ПереборЗнач = ПереборЗнач-1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если ЛистИсключение <> Неопределено Тогда
			Если ЛистИсключение = ИмяДляРасчета Тогда
				ПереборЗнач = ПереборЗнач-1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		
		РезВыбор = (Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяДляРасчета, ТаблицаСтраницРаздела));
		Если (НЕ ЛистыМногостраничные) Или (РезВыбор) Тогда
			
			Колво = роКолвоЛистоВРазделе(Форма, ИмяДляРасчета);

			Для Инд = 1 По Колво Цикл
				// В случае, если в декларации нет своей специализированной процедуры простановки
				// тогда вызовем стандатную из этого модуля.
				// Пример: Прибыль иностранной орг., там отличная ПроставитьВКвадратыЗначения от других
				Попытка
					Форма.ПроставитьВКвадратыЗначения(ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд) + "_", ""), СтрДлина(Значение), Значение);
				Исключение
					роПроставитьВКвадратыЗначения(Форма, ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд) + "_", ""), СтрДлина(Значение), Значение);
				КонецПопытки;
			КонецЦикла;

		ИначеЕсли ЛистыМногостраничные И (НЕ РезВыбор) Тогда

			роОбновитьСтруктуруМногостраничныхРазделов(Форма, ИмяДляРасчета);

			ИндА = 0;
			АктивныйНомерСтр = 0;
			Для Каждого Страница Из ТаблицаСтраницРаздела Цикл

				ИндА = ИндА + 1;

				Колво = роКолвоЛистоВРазделе(Форма, ИмяДляРасчета);

				Для Инд77 = 1 По Колво Цикл

					Если Страница.АктивнаяСтраница Тогда
						// В случае, если в декларации нет своей специализированной процедуры простановки
						// тогда вызовем стандатную из этого модуля.
						// Пример: Прибыль иностранной орг., там отличная ПроставитьВКвадратыЗначения от других
						Попытка
							Форма.ПроставитьВКвадратыЗначения(ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд77) + "_", ""), СтрДлина(Значение), Значение);
						Исключение
							роПроставитьВКвадратыЗначения(Форма, ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд77) + "_", ""), СтрДлина(Значение), Значение);
						КонецПопытки;

					Иначе

						Если НЕ ТолькоАктивныйЛистМногостраничнойчасти Тогда
							Для Инд = 1 По СтрДлина(Значение) Цикл
									Страница.Данные.Вставить(ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд77) + "_", "") + Строка(Инд), Сред(Значение, Инд, 1));
							КонецЦикла;
						КонецЕсли;

					КонецЕсли;

				КонецЦикла;

			КонецЦикла;

			//ПоказатьСтраницуМногостраничногоРаздела(АктивныйНомерСтр, ИмяДляРасчета, Истина);

		КонецЕсли;

		ПереборЗнач = ПереборЗнач - 1;

	КонецЦикла;

КонецПроцедуры // роПроставитьНаВсехЛистах()

// роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице
//
// Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтранице
// сохраняет данные в актвном листе
// Особенность:
// Процедура только сохраняет данные, не передвигая страница на начальную
// или какую либу другую часть многостраничного раздела
// Используется в следующих частях:
// 1. ОбновитьСтруктуруМногостраничныхРазделов
// 2. ПоказатьСтраницуМногостраничногоРаздела
// 3. ВставитьДополнительнуюСтраницу
// 4. ОткрытьФормуСпискаДопСтраниц
//
Процедура роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницы, ОчищатьРазделЕслиЕстьМногострочность) Экспорт
	Перем ТаблицаСтраницРаздела;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницы;
	ТекТабличноеПоле     = Форма.ЭлементыФормы[ИмяТекТабличногоПоля];

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	// Возьмем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	// Если нет активной страницы - то выход
	Если СтрТаблицаСтраницы = Неопределено Тогда
		роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницы);
		Возврат;
	КонецЕсли;

	// Берем индекс активной страницы
	НомерТекущейСтраницы   = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);

	// Сохраним данные текущей страницы.
	// В каждой декларации функция СобратьДанныеТекущегоТаблПоля - разные !
	СтруктураДанныхТекущейТаблицы = Форма.СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле,1);

	КолМногострочныхЧастей = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницы, "МногострочностьВРазделе");

	// Определяет, как работать с многострочностью в документе, либо как с ТаблЗначений или со структурой

	СохранятьМногострКакТЗ = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницы, "СохранятьМногострКакТЗ");

	// Если лист является многострочным и многостраничным, то необходимо добавить в поле данные доп. строк
	// в этой декларации не используется, т.к. многострочность одна на листе
	Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда

		ВРазделеДекларацииЕстьМногострочность = Истина;
		// Определим ИмяГруппы дополнительных строк, по необходимой страницы
		// Если на листе больше одной многострочной части, то алгорит сбора будет другим

		СтруктураДанныхДопСтрокРаздела = Форма.СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяТекущейСтраницы);
		ТаблицаДопСтрокРаздела = СтруктураДанныхДопСтрокРаздела;

	ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда

		ВРазделеДекларацииЕстьМногострочность = Истина;
		// Блок для разделов, где хранится только одна многострочная часть
		ИмяГруппыДопСтрок = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяТекущейСтраницы);
		Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);


		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокРаздела = ПромТаблицаДопСтрокРаздела.Скопировать();

	ИначеЕсли КолМногострочныхЧастей = 0 Тогда

		ВРазделеДекларацииЕстьМногострочность = Ложь;

	КонецЕсли;

	// Сохраним данные
	СтрТаблицаСтраницы.Данные           = СтруктураДанныхТекущейТаблицы;

	Если ВРазделеДекларацииЕстьМногострочность Тогда

		// Если процедура используется в ПоказатьСтраницуМногостраничногоРаздела, то необходимо
		// при показе след. страницы, убирать многострочность с листа, путем очистки
		Если ОчищатьРазделЕслиЕстьМногострочность Тогда
			Форма.ОчиститьТабличноеПоле(ТекТабличноеПоле);
		КонецЕсли;

		// Запишем данные доп. строк
		СтрТаблицаСтраницы.ДанныеДопСтрок   = ТаблицаДопСтрокРаздела;
	КонецЕсли;

	// Попытаемся определить представление, только по текущей странице (по активной), последний параметр Истина
	роОпределитьПредставлениеДопСтраниц(Форма, ИмяТекущейСтраницы, Истина);

КонецПроцедуры // роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице

// роУдалитьДополнительнуюСтраницу
//
// Удаляет текущую страницу многостраничного раздела формы.
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура роУдалитьДополнительнуюСтраницу(Форма, ИмяТекущейСтраницыПанели = Неопределено) Экспорт
	Перем ТаблицаСтраницРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	// Если одна страница в разделе, то её удалять нельзя
	Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = Форма.ЭлементыФормы[ИмяТекТабличногоПоля];

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если СтрТаблицаСтраницы <> Неопределено Тогда
		ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);

		// очищаем редактируемые ячейки удаляемой страницы
		Форма.ОчиститьТабличноеПоле(ТекТабличноеПоле);

		КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();

		Если КолвоДопСтраниц > 0 Тогда
			СтрТаблицаСтраницыЗамена = ТаблицаСтраницРаздела[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];

			// Для страниц многостраничного раздела, содержащих многострочную часть,
			// восстанавливаем структуру дополнительных строк.
			//
			// Предварительно проверим, содержит ли страница многострочные части

			КолвоМногострочныхБлоков = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
			СохранятьМногострКакТЗ = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "СохранятьМногострКакТЗ");

			Если КолвоМногострочныхБлоков > 0 Тогда
				ДанныеДопСтрокРаздела = СтрТаблицаСтраницыЗамена.ДанныеДопСтрок;
			Иначе
				ДанныеДопСтрокРаздела = Неопределено;
			КонецЕсли;

			Если ДанныеДопСтрокРаздела <> Неопределено Тогда

				Если (КолвоМногострочныхБлоков > 0) И (НЕ СохранятьМногострКакТЗ) Тогда

					Для Каждого ГруппаСтрок Из ДанныеДопСтрокРаздела Цикл
						ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
						ДанныеГруппыСтрок = ГруппаСтрок.Значение;

						ПромТаблицаГруппыСтрок = ДанныеГруппыСтрок.Скопировать();

						// Заменяем таблицу значений с данными текущей страницы.
						Форма.мСтруктураМногострочныхРазделов.Вставить(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
						// Выводим в табличный документ строки многострочной группы
						Форма.ВывестиРазделВТабличныйДокумент(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					КонецЦикла;

				ИначеЕсли (КолвоМногострочныхБлоков > 0) И (СохранятьМногострКакТЗ) Тогда

					ИмяГруппыДопСтрок = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяТекущейСтраницыПанели);
					ПромТаблицаДопСтрокРаздела = ДанныеДопСтрокРаздела.Скопировать();

					// Заменяем таблицу значений с данными текущей страницы.
					Форма.мСтруктураМногострочныхРазделов.Вставить(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
					// Выводим строки многострочной группы замещающей страницы
					ФОрма.ВывестиРазделВТабличныйДокумент(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

				КонецЕсли;

			КонецЕсли;

			ПредставлениеДанных = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "ПредставлениеДанных");
			// Восстановим данные замещаемой страницы.
			СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.Данные;

			Для Каждого Элемент Из СтруктураДанныхСтраницыЗамена Цикл
				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;

				Если ПредставлениеДанных Тогда
					Если Форма.ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
						Продолжить; // Пропустим цикл
					КонецЕсли;
				КонецЕсли;

				//Если Форма.мСтараяВерсияФормы <> Форма.мВерсияФормы Тогда

					Попытка
						ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
					Исключение
					КонецПопытки;

				//Иначе
				//	ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				//КонецЕсли;

			КонецЦикла;
			
			СтрТаблицаСтраницыЗамена.АктивнаяСтраница = Истина;
		КонецЕсли;
		
		//Форма.Расчет(ИмяТекущейСтраницыПанели);
		Форма.Расчет();
		//		ТекущийЭлемент     = ТекТабличноеПоле;
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // роУдалитьДополнительнуюСтраницу()

// роПоказательВходитВМногострочнуюЧасть
//
// Функция определяем, входит ли переданный показатель в многострочную часть
// Параметры:
// ИмяПоказателя - строка, имя показателя
//
// Возврат:
// 0 - показатель не входит в многострочный блок
// >0 кол-во строк в многострочной части
//
Функция роПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя) Экспорт

	ИмяГруппы = Лев(ИмяПоказателя, 11);

	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции // роПоказательВходитВМногострочнуюЧасть

// роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения
//
// Процедура считывает св-ва всех разделов и если раздел является автозаполняемым, то добавляется 3 параметра в элементы форм
//
Процедура роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(Форма) Экспорт

	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы = СтрокаУровня1.ИмяСтраницы;
		АвтоЗаполнение   = СтрокаУровня1.РазделЯвляетсяАвтозаполняемым;

		Если АвтоЗаполнение Тогда

			Форма.ЭлементыФормы["ПолеВыбораВариантЗаполнения" + НазваниеСтраницы].СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
			Форма.ЭлементыФормы["ПолеВыбораВариантЗаполнения" + НазваниеСтраницы].СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
			Форма.ЭлементыФормы["ПолеВыбораВариантЗаполнения" + НазваниеСтраницы].СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения

// Функция роЯвляетсяЧислом(Значение)
// Если передено число - то истина, иначе ложь
//
Функция роЯвляетсяЧислом(Значение) Экспорт

	Если ТипЗнч(Значение) = Тип("Число") Тогда

		Возврат Истина

	Иначе

		Попытка
			Р = Число(Значение);
		Исключение
			Возврат Ложь;
		КонецПопытки;
			Возврат Истина;

	КонецЕсли;

КонецФункции // роЯвляетсяЧислом(Значение)

// Функция роЯвляетсяДатой(Знач Значение)
// является ли передаваемое значение датой или нет
//
Функция роЯвляетсяДатой(Знач Значение) Экспорт

	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Истина;
	КонецЕсли;

	Попытка
	Р = Дата(Значение);
	Исключение
	Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции // функция роЯвляетсяДатой(Знач Значение)

// Функция роКолвоЛистоВРазделе(ИмяСтраницыПанели)
// Получает количество листов в табличном документе, ориентируясь на параметр НомСтр
//
// Параметры:
// ИмяСтраницыПанели                    - имя страницы
//
// Возврат:
// Количество страниц в табличном документе
//
Функция роКолвоЛистоВРазделе(Форма, ИмяСтраницыПанели) Экспорт

	ФлагИскл = 0;
	КолЛистовВОдномерномЛисте = 1;

	ТекТаблПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыПанели];

	Пока ФлагИскл = 0 Цикл

		Если КолЛистовВОдномерномЛисте = 1 Тогда
			КолЛистовВОдномерномЛистеСтр = "";
		Иначе
			КолЛистовВОдномерномЛистеСтр = Формат(Число(КолЛистовВОдномерномЛисте)) + "_";
		КонецЕсли;

		Если ТекТаблПоле.Области.Найти("НомСтр" + КолЛистовВОдномерномЛистеСтр + "1") <> Неопределено Тогда

			КолЛистовВОдномерномЛисте = КолЛистовВОдномерномЛисте + 1;

		Иначе

			КолЛистовВОдномерномЛисте = КолЛистовВОдномерномЛисте - 1;
			ФлагИскл = 1;

		КонецЕсли;

	КонецЦикла;// пока искл = 0

	Возврат КолЛистовВОдномерномЛисте;

КонецФункции // роКолвоЛистоВРазделе(ИмяСтраницыПанели)

// ПроставитьВКвадратыЗначения
// Процедура проставляет переданное ей значение в необходимый лист
// декларации. Нельзя использовать в декларации Прибыль иностранной организации
// т.е. там своя процедура, проставляющая символ "равно" после вывода значения.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  Показатель     - показатель, смысловая его часть
//  Размерность    - кол-во символов и кол-во квадратиков на листе декларации
//  Значение       - непосредственно значение
//  ДополнитьЗначение - если переданное значение является числом, которое необходимо
//               округлять и производить другие действия, как с числом, то этому па-
//               раметру необходимо присвоить Истина, иначе во всех случаях Ложь.
//
Процедура роПроставитьВКвадратыЗначения(Форма, Знач Лист, Знач Показатель, Знач Размерность, Знач Значение, ДополнитьЗначение = Ложь) Экспорт

	Раздел = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + СтрЗаменить(Лист, "ПолеТабличногоДокумента", "")];

	ДопРазряд = ""; // дополнительный разряд в счетчике
	ТестОк = Истина;

	// Логика осталась от прошлого, в случае именования ячеек с ведущем нулем
	// например: КБК_01, КБК_02 и т.д.
	Если Раздел.Области.Найти(Показатель + ДопРазряд + "1") = Неопределено Тогда
		ТестОк = Ложь;
	КонецЕсли;

	Если НЕ ТестОк Тогда
		Если ДопРазряд = "0" Тогда
			ДопРазряд = "";
		Иначе
			ДопРазряд = "0";
		КонецЕсли;
	КонецЕсли;

	СтрокаФорматаЯчейки = СтрЗаменить(Форма.мСтрокаФормата, "; ЧН=-", "");
	// Убираем пробелы между группами разрядов числа
	СтрокаФорматаЯчейки = СтрокаФорматаЯчейки + "; ЧГ=0";

	Если (ДополнитьЗначение) Или ((роЯвляетсяЧислом(Значение)) И (Значение = 0)) Тогда

		Если ((роЯвляетсяЧислом(Значение)) И (Значение = 0)) Тогда

			ЗначениеДопСтрока = ДополнитьСтроку("", Размерность," ");

		Иначе

			ЗначениеДопСтрока = Формат(Значение, СтрокаФорматаЯчейки);
			ЗначениеДопСтрока = ДополнитьСтроку(ЗначениеДопСтрока, Размерность," ");

		КонецЕсли;

	Иначе

		ЗначениеДопСтрока = Значение;

	КонецЕсли; // ДополнитьЗначение

	ДопЗначение = 0;

	Для НомЯчейки = 1 По Размерность Цикл

		Раздел.Области[Показатель + ?(СтрДлина(НомЯчейки) = 1, ДопРазряд + НомЯчейки, НомЯчейки)].Значение = Сред(ЗначениеДопСтрока, НомЯчейки, 1);

	КонецЦикла;

КонецПроцедуры // ПроставитьВКвадратыЗначения(Лист, Показатель, Размерность, Значение)

// Процедура - обработчик события "ПриИзмененииФлажка" в колонке
// табличного поля.
//   Ставит/снимает пометку у всех подчиненных строк выбранного уровня
// 
Процедура роДеревоПриИзмененииФлажка(Элемент, Колонка) Экспорт

	НоваяПометка = Элемент.ТекущиеДанные[Колонка.Имя];

	Если Колонка.Имя = "ПоказатьСтраницу" Тогда
		Если НоваяПометка = 1 Тогда

			// Для составляющих страниц титульного листа 
			// запрещаем варирование показом страницы.
			// Флаг показа определяется только по титульному
			// листу в целом.
			НоваяПометка = 2;

		ИначеЕсли НоваяПометка = 0 Тогда
			// Предполагаем, что если пользователь отключил 
			// показ какой-либо страницы, то и необходимость
			// вывода этой страницы на печать отпадает
			Элемент.ТекущаяСтрока.ВыводНаПечать = НоваяПометка;

			Для Каждого Строка Из Элемент.ТекущаяСтрока.Строки Цикл
				Строка.ВыводНаПечать = НоваяПометка;
			КонецЦикла;

		КонецЕсли;

	ИначеЕсли Колонка.Имя = "ВыводНаПечать" Тогда

		ВерхняяГруппировка = Элемент.ТекущаяСтрока.Родитель;
		Если ВерхняяГруппировка <> Неопределено Тогда
			// Проверяем все вложенные строки на предмет
			// того, установлены или сняты ли везде метки.
			// Если нет, то устанавливаем третье состояние
			// метки строки-родителя 
			НеВсеОтмечены = 0;

			Для каждого СтрокаУровня Из ВерхняяГруппировка.Строки Цикл

				Если СтрокаУровня.ВыводНаПечать <> НоваяПометка Тогда

					НеВсеОтмечены = 1;

					Прервать;
				КонецЕсли; 

			КонецЦикла; 

			Если НеВсеОтмечены = 1 Тогда
				ВерхняяГруппировка.ВыводНаПечать = 2;
			Иначе
				ВерхняяГруппировка.ВыводНаПечать = НоваяПометка;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Для Каждого Строка Из Элемент.ТекущаяСтрока.Строки Цикл
		Строка[Колонка.Имя] = НоваяПометка;
	КонецЦикла;

КонецПроцедуры // ДеревоПриИзмененииФлажка()

// Процедура - обработчик события "ПередНачаломИзменения" строки табличного поля.
//
Процедура роДеревоПередНачаломИзменения(Элемент, Отказ) Экспорт

	ТекКолонка  = Элемент.ТекущаяКолонка.Имя;
	ТекЗначение = Элемент.ТекущиеДанные[ТекКолонка];

	Если ТекКолонка = "ВыгрузитьСтраницу" Тогда

		Если ТекЗначение = 2 Тогда
			// Лист является обязательным для выгрузки,
			// поэтому не меняем состояние флажка
			Отказ = Истина;
		КонецЕсли;

	ИначеЕсли ТекКолонка = "ПоказатьСтраницу" Тогда
		// Лист является составной частью титульного листа,
		// поэтому не меняем состояние флажка

		Если ТекЗначение = 2 Тогда

			Отказ = Истина;

		ИначеЕсли ТекЗначение = 0 Тогда
			Если Элемент.ТекущиеДанные.Родитель <> Неопределено Тогда

				Отказ = Истина;

			КонецЕсли; 
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДеревоПередНачаломИзменения()

// Функция возвращает общую форму регламентированной отчетности.
//
// Параметры:
//	ИмяФормы - строка с именем запрашиваемой формы.
//	Владелец - форма-владелец открываемой формы.
//	КлючУникальности - ключ для поиска уже открытых форм.
//
// Возвращаемое значение:
//	Форма - запрошенная общая форма регламентированной отчетности 
//			или Неопределено в случае отсутствия общей формы с указанным именем.
//
Функция роПолучитьОбщуюФорму(ИмяФормы, Владелец = Неопределено, КлючУникальности = Неопределено) Экспорт
	
	Если Метаданные.Обработки.ОбщиеОбъектыРегламентированнойОтчетности.Формы.Найти(ИмяФормы) <> Неопределено Тогда
		Возврат Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму(ИмяФормы, Владелец, КлючУникальности);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст
// Функция возвращает текст, который выводится в сообщении во всех общих формах.
// Возвращаемое значение:
//  Строка для вывода в Сообщить
//
Функция ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст() Экспорт

	Возврат НСтр("ru='Не выбрана организация.';uk='Не обрана організація.'");

КонецФункции // ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПОДДЕРЖКИ ВНЕШНИХ РЕГЛАМЕНТИРОВАННЫХ ОТЧЕТОВ
//

// Функция пытается сравнить объект (внешний регламентированный отчет) в памяти с объектом, 
// находящемся в соответствующем файле в текущем каталоге.
// Если объекты совпадают, функция загружает файл на диске в реквизит ВнешнийОтчетХранилище
// соответствующего элемента справочника РегламентированныеОтчеты.
// Параметры:
//       Объект - объект в памяти, который сравнивается с объектом на диске.
//	Возвращаемое значение:
//		 Булево - Истина, если объект загружен; Ложь в противном случае.
//
Функция ПроверкаРегистрацииПриОткрытииОсновнойФормыРегламентированногоОтчета(Объект, ОткрытьОсновнуюФорму=Истина) Экспорт

	ИмяФайлаВнешнегоОтчета = Объект.ИспользуемоеИмяФайла;

	// Пытаемся найти отчет данного вида в справочнике отчетов.
	НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Объект.Метаданные().Имя);
	Если НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
		Предупреждение(НСтр("ru = 'В справочнике ""Регламентированные отчеты"" не удалось найти отчет вида ""'; uk = 'У довіднику "" Регламентовані звіти ""не вдалося знайти звіт виду ""'")+Объект.Метаданные().Имя+"""!");
		Возврат Ложь;
	КонецЕсли;
	
	// Если в справочнике уже хранится внешний отчет, то сравниваем его с существующим.
	Если НайденныйЭлемент.ВнешнийОтчетХранилище.Получить() <> Неопределено Тогда
		ВремФайлВнешнегоОтчета2 = ПолучитьИмяВременногоФайла();
		Попытка
			НайденныйЭлемент.ВнешнийОтчетХранилище.Получить().Записать(ВремФайлВнешнегоОтчета2);
			Сравнение = Новый СравнениеФайлов();
			Сравнение.ПервыйФайл = ИмяФайлаВнешнегоОтчета;
			Сравнение.ВторойФайл = ВремФайлВнешнегоОтчета2;
			Сравнение.СпособСравнения = СпособСравненияФайлов.Двоичное;
			Если Сравнение.Сравнить() Тогда
				Предупреждение(НСтр("ru = 'Внешний регламентированный отчет уже зарегистрирован в информационной базе.'; uk = 'Зовнішній регламентований звіт вже зареєстрований в інформаційній базі.'"));
				Возврат Ложь;
			КонецЕсли;
			ТекстВопроса = НСтр("ru='Отчет, который хранится в информационной базе, отличается от выбранного."
"Загрузить выбранный отчет в информационную базу?';uk='Звіт, що зберігається в інформаційній базі, відрізняється від обраного."
"Завантажити обраний звіт в інформаційну базу?'");
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		ТекстВопроса = НСтр("ru = 'Зарегистрировать выбранный внешний регламентированный отчет в информационной базе?'; uk = 'Зареєструвати обраний регламентований звіт в інформаційній базі?'");
	КонецЕсли;
	
	// Если загруженный и текущий отчеты отличаются, то спросим у пользователя, нужно ли регистрировать текущий.
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если пользователь согласен, то регистрируем внешний отчет в информационной базе.
	Попытка
		ОбъектНайденныйЭлемент = НайденныйЭлемент.ПолучитьОбъект();
		ОбъектНайденныйЭлемент.ВнешнийОтчетХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаВнешнегоОтчета), Новый СжатиеДанных(9));
		ОбъектНайденныйЭлемент.ВнешнийОтчетИспользовать = Истина;
		ОбъектНайденныйЭлемент.Записать();
	Исключение
		Предупреждение(НСтр("ru = 'Не удалось зарегистрировать отчет в информационной базе!'; uk = 'Не вдалося зареєструвати обраний звіт в інформаційній базі!'"));
		Возврат Ложь;
	КонецПопытки;
	
	// Не во всех конфигурациях использующих рег отчеты есть поддержка 1С-Звит
	Попытка
		Выполнить("МенеджерЗвит1С = глМенеджерЗвит1С;");
	Исключение
	    МенеджерЗвит1С = Неопределено;
	КонецПопытки;
	// При подключении внешнего отчета новые схемы должны автоматически подхватиться 1С-Звит
	Если МенеджерЗвит1С <> Неопределено Тогда
		МенеджерЗвит1С.ЗаполнитьСоответствиеОтчетов(Объект.Метаданные().Имя);
	КонецЕсли;
	
	Если Не ОткрытьОсновнуюФорму Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОтчетКэшировался(ОбъектНайденныйЭлемент) Тогда
		Предупреждение(НСтр("ru='Внешний отчет успешно загружен в информационную базу.';uk='Зовнішній звіт успішно завантажений в інформаційну базу.'") + "
					   | " +
					   НСтр("ru='ИЗМЕНЕНИЯ ВСТУПЯТ В СИЛУ ТОЛЬКО ПОСЛЕ ПОВТОРНОГО ОТКРЫТИЯ ПРОГРАММЫ!';uk='ЗМІНИ НАБУДУТЬ ЧИННОСТІ ТІЛЬКИ ПІСЛЯ ПОВТОРНОГО ВІДКРИТТЯ ПРОГРАМИ!'"));
		Возврат Истина;
	Иначе
		Предупреждение(НСтр("ru='Внешний отчет успешно загружен в информационную базу.';uk='Зовнішній звіт успішно завантажений в інформаційну базу.'") );
		
		ТекОтчет = РеглОтчеты(Объект.Метаданные().Имя);
		ТекФорма = ФормаРеглОтчета(Объект.Метаданные().Имя);
		ТекФорма.РежимВыбора = Ложь;
		ТекФорма.Открыть();
		Возврат Истина;
		
	КонецЕсли;

КонецФункции

// Сравнивает "версию" данных, хранящихся в экземпляре документа РегламентированныйОтчет с 
// "версией" отчета, с помощью которого эти данные пытаются открыть.
// Параметры:
// 		ВерсияФормы - "версия" данных.
//		мВерсияФормы = "версия" отчета.
// Возвращаемое значение:
//		Булево - Истина, если отчет с версией мВерсияФормы способен работать с данными версии ВерсияФормы.
//				 Ложь, если отчет с версией мВерсияФормы НЕ способен работать с данными версии ВерсияФормы.
Функция ПродолжитьПриНесоответствииВерсийФорм(Знач ВерсияФормы, Знач мВерсияФормы) Экспорт
	
	ПервыйСлеш = Найти(ВерсияФормы, "/");
	ВторойСлеш = Найти(Лев(ВерсияФормы, ПервыйСлеш - 1) + " " + Сред(ВерсияФормы, ПервыйСлеш + 1), "/");
	Если ПервыйСлеш = Неопределено ИЛИ ВторойСлеш = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	ГодВерсияФормы = Сред(ВерсияФормы, ВторойСлеш + 1);
	МесяцВерсияФормы = Сред(ВерсияФормы, ПервыйСлеш + 1, ВторойСлеш - ПервыйСлеш - 1);
	ДеньВерсияФормы = Сред(ВерсияФормы, 1, ПервыйСлеш - 1);
	Если СтрДлина(ГодВерсияФормы) = 2 Тогда
		ГодВерсияФормы = "20" + ГодВерсияФормы;
	КонецЕсли;
	Если СтрДлина(МесяцВерсияФормы) = 1 Тогда
		МесяцВерсияФормы = "0" + МесяцВерсияФормы;
	КонецЕсли;
	Если СтрДлина(ДеньВерсияФормы) = 1 Тогда
		ДеньВерсияФормы = "0" + ДеньВерсияФормы;
	КонецЕсли;
	ДатаВерсияФормы = Дата(ГодВерсияФормы + МесяцВерсияФормы + ДеньВерсияФормы);
	
	ПервыйСлеш = Найти(мВерсияФормы, "/");
	ВторойСлеш = Найти(Лев(мВерсияФормы, ПервыйСлеш - 1) + " " + Сред(мВерсияФормы, ПервыйСлеш + 1), "/");
	Если ПервыйСлеш = Неопределено ИЛИ ВторойСлеш = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	ГодмВерсияФормы = Сред(мВерсияФормы, ВторойСлеш + 1);
	МесяцмВерсияФормы = Сред(мВерсияФормы, ПервыйСлеш + 1, ВторойСлеш - ПервыйСлеш - 1);
	ДеньмВерсияФормы = Сред(мВерсияФормы, 1, ПервыйСлеш - 1);
	Если СтрДлина(ГодмВерсияФормы) = 2 Тогда
		ГодмВерсияФормы = "20" + ГодмВерсияФормы;
	КонецЕсли;
	Если СтрДлина(МесяцмВерсияФормы) = 1 Тогда
		МесяцмВерсияФормы = "0" + МесяцмВерсияФормы;
	КонецЕсли;
	Если СтрДлина(ДеньмВерсияФормы) = 1 Тогда
		ДеньмВерсияФормы = "0" + ДеньмВерсияФормы;
	КонецЕсли;
	ДатамВерсияФормы = Дата(ГодмВерсияФормы + МесяцмВерсияФормы + ДеньмВерсияФормы);
	
	Если ДатамВерсияФормы < ДатаВерсияФормы Тогда
		Предупреждение(Локализация.СтрШаблон(НСтр("ru='Сохраненные данные не могут быть открыты текущей версией отчета!"
"Версия отчета - от ¤1¤ "
"Версия данных - от ¤2¤';uk='Збережені дані не можуть бути відкриті поточною версією звіту!"
"Версія звіту - від ¤1¤ "
"Версія даних - від ¤2¤'"), Формат(ДатамВерсияФормы, НСтр("ru='ДЛФ=DD; ДП='Пустая дата''")), Формат(ДатаВерсияФормы, НСтр("ru='ДЛФ=DD; ДП='Пустая дата''"))));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Возвращает двоичные данные с файлом - внешней обработкой с учетом кэша (реквизит ВнешнийОтчетХранилище), 
// для переданного в качестве параметра элемента справочника РегламентированныеОтчеты.
// Параметры:
//		РеглОтч - ссылка на элемент справочника РегламентированныеОтчеты.
// Возвращаемое значение:
//		Содержимое реквизита ВнешнийОтчетХранилище элемента справочника с учетом кэша.
Функция ОбъектОтчетСУчетомКэша(РеглОтч)
	Перем ОтчетВКэше;
	
	Попытка
		Кэш = ПараметрыСеанса.ХранилищеПараметровВнешнихРегламентированныхОтчетов.Получить();
	Исключение
		Кэш = Новый Структура;
	КонецПопытки;
	Если Кэш.Свойство(РеглОтч.ИсточникОтчета, ОтчетВКэше) Тогда
		Возврат ОтчетВКэше.Отчет;
	Иначе
		Попытка
			ОтчетВКэш = РеглОтч.ВнешнийОтчетХранилище.Получить();
			Кэш.Вставить(РеглОтч.ИсточникОтчета, Новый Структура("Отчет, Признак", ОтчетВКэш, РеглОтч.ВнешнийОтчетИспользовать));
			ПараметрыСеанса.ХранилищеПараметровВнешнихРегламентированныхОтчетов = Новый ХранилищеЗначения(Кэш);
			Возврат ОтчетВКэш;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

// Возвращает признак использования внешнего отчета с учетом кэша (реквизит ВнешнийОтчетИспользовать), 
// для переданного в качестве параметра элемента справочника РегламентированныеОтчеты.
// Параметры:
//		РеглОтч - ссылка на элемент справочника РегламентированныеОтчеты.
// Возвращаемое значение:
//		Признак использования внешнего отчета для заданного элемента справочника с учетом кэша.
Функция ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(РеглОтч)
	Перем ОтчетВКэше;
	
	Попытка
		Кэш = ПараметрыСеанса.ХранилищеПараметровВнешнихРегламентированныхОтчетов.Получить();
	Исключение
		Кэш = Новый Структура;
	КонецПопытки;
	Если Кэш.Свойство(РеглОтч.ИсточникОтчета, ОтчетВКэше) Тогда
		Возврат ОтчетВКэше.Признак;
	Иначе
		Попытка
			ВнешнийОтчетИспользовать = РеглОтч.ВнешнийОтчетИспользовать;
			Кэш.Вставить(РеглОтч.ИсточникОтчета, Новый Структура("Отчет, Признак", РеглОтч.ВнешнийОтчетХранилище.Получить(), ВнешнийОтчетИспользовать));
			ПараметрыСеанса.ХранилищеПараметровВнешнихРегламентированныхОтчетов = Новый ХранилищеЗначения(Кэш);
			Возврат ВнешнийОтчетИспользовать;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

// Показывает или скрывает (в зависимости от вида отчета) элемент формы, сигнализирующий пользователю
// о том, что текущая форма принадлежит внешнему отчету.
// Параметры:
//		Форма - объект Форма.
Процедура ДобавитьНадписьВнешнийОтчет(Форма) Экспорт
	
	СтроковоеПредставлениеТипаОбъекта = Строка(ТипЗнч(Форма.ЭтотОбъект));
	КлючеваяФразаРУ = "Внешний отчет объект";
	КлючеваяФразаУК = "Зовнішній звіт об`єкт";
	ЭтоВнешняяОбработка =  (Лев(СтроковоеПредставлениеТипаОбъекта, СтрДлина(КлючеваяФразаРУ)) = КлючеваяФразаРУ)
						ИЛИ(Лев(СтроковоеПредставлениеТипаОбъекта, СтрДлина(КлючеваяФразаУК)) = КлючеваяФразаУК);
	Если ЭтоВнешняяОбработка Тогда
	
		Если Форма.ЭлементыФормы.Найти("_ИндикаторВнешнегоОтчета") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Форма.ЭлементыФормы._ИндикаторВнешнегоОтчета.Видимость = Истина;
		
	Иначе
		
		Если Форма.ЭлементыФормы.Найти("_ИндикаторВнешнегоОтчета") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Форма.ЭлементыФормы._ИндикаторВнешнегоОтчета.Видимость = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

// Создает и возвращает ссылку на объект - регламентированный отчет, соответствующий переданному 
// в качестве параметра наименованию. При создании объекта учитывается информация в кэше.
// Параметры:
//		Наим - строка-идентификатор регламентированного отчета.
//		СоздаватьИНеЗапоминать - признак того, что созданный объект не оставить след в кэше.
// Возвращаемое значение:
//		Отчет или ВнешняяОбработка - созданный объект. В случае неудачи возвращается Неопределено.
Функция РеглОтчеты(Наим, СоздаватьИНеЗапоминать = Ложь) Экспорт
	Перем ВременныйФайл;
	
	НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Наим);
	Если НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(НайденныйЭлемент) <> Истина ИЛИ НайденныйЭлемент.ВнешнийОтчетХранилище = Неопределено Тогда // используется внутренний отчет
		Если Метаданные.Отчеты.Найти(Наим) <> Неопределено Тогда
			Возврат Отчеты[Наим];
		Иначе
			Сообщить(НСтр("ru='Не найден отчет ';uk='Не знайдений звіт '") + СокрП(Наим) + ".", СтатусСообщения.ОченьВажное);
			Возврат Неопределено;
		КонецЕсли; 
	Иначе // используется внешний отчет
		
		Попытка
			СтруктураРегламентированныхОтчетов = ПараметрыСеанса.ПолныеИменаФайловВнешнихРегламентированныхОтчетов.Получить();
		Исключение
			СтруктураРегламентированныхОтчетов = Новый Структура;
		КонецПопытки;
		
		Если НЕ СтруктураРегламентированныхОтчетов.Свойство(Наим, ВременныйФайл) ИЛИ ВременныйФайл = Неопределено Тогда
			
			Попытка
				ВременныйФайл = ПолучитьИмяВременногоФайла();
				ОбъектОтчетСУчетомКэша(НайденныйЭлемент).Записать(ВременныйФайл);
				ВнешнийОтчет = ВнешниеОтчеты.Создать(ВременныйФайл);
				Попытка
					ВнешнийОтчет.мПолноеИмяФайлаВнешнейОбработки = ВременныйФайл;
				Исключение
				КонецПопытки;
				Если НЕ СоздаватьИНеЗапоминать Тогда
					СтруктураРегламентированныхОтчетов.Вставить(Наим, ВременныйФайл);
					ПараметрыСеанса.ПолныеИменаФайловВнешнихРегламентированныхОтчетов = Новый ХранилищеЗначения(СтруктураРегламентированныхОтчетов);
				КонецЕсли;
				Возврат ВнешнийОтчет;
			Исключение
				Сообщить(НСтр("ru='Не удалось запустить внешний отчет ';uk='Не вдалося запустити зовнішній звіт '") + СокрП(Наим) + ".", СтатусСообщения.ОченьВажное);
				Возврат Неопределено;
			Конецпопытки;
			
		Иначе
			
			Попытка
				ОбъектОтчетСУчетомКэша(НайденныйЭлемент).Записать(ВременныйФайл);
				ВнешнийОтчет = ВнешниеОтчеты.Создать(ВременныйФайл);
				Попытка
					ВнешнийОтчет.мПолноеИмяФайлаВнешнейОбработки = ВременныйФайл;
				Исключение
				КонецПопытки;
				Возврат ВнешнийОтчет;
			Исключение
				Сообщить(НСтр("ru='Не удалось запустить внешний отчет ';uk='Не вдалося запустити зовнішній звіт '") + СокрП(Наим) + ".", СтатусСообщения.ОченьВажное);
				Возврат Неопределено;
			Конецпопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// Создает и возвращает ссылку на форму регламентированного отчета, соответствующего переданному 
// в качестве параметра наименованию. При получении формы учитывается информация в кэше.
// Параметры:
//		Наим - строка-идентификатор регламентированного отчета.
//		Выбраннаяформа - строка - имя формы.
//		Владелец - владелец формы. Форма или элемент управления.
//		КлючУникальности - ключ, значение которого будет использовано для поиска уже открытых форм.
// Возвращаемое значение:
//		Форма - созданный объект. В случае неудачи возвращается Неопределено.
Функция ФормаРеглОтчета(Наим, ВыбраннаяФорма = Неопределено, Владелец = Неопределено, КлючУникальности = Неопределено) Экспорт
	Перем ВременныйФайл;
	
	НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Наим);
	Если НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(НайденныйЭлемент) <> Истина ИЛИ НайденныйЭлемент.ВнешнийОтчетХранилище = Неопределено Тогда // используется внутренний отчет
		Если Метаданные.Отчеты.Найти(Наим) <> Неопределено Тогда
			Возврат Отчеты[Наим].ПолучитьФорму(ВыбраннаяФорма, Владелец, КлючУникальности);
		Иначе
			// отчет с таким именем не найден
			Сообщить(НСтр("ru='Не найден отчет ';uk='Не знайдений звіт '") + СокрП(Наим) + ".", СтатусСообщения.ОченьВажное);
			Возврат Неопределено;
		КонецЕсли; 
	Иначе // используется внешний отчет
		
		Попытка
			СтруктураРегламентированныхОтчетов = ПараметрыСеанса.ПолныеИменаФайловВнешнихРегламентированныхОтчетов.Получить();
		Исключение
			СтруктураРегламентированныхОтчетов = Новый Структура;
		КонецПопытки;
		
		Если НЕ СтруктураРегламентированныхОтчетов.Свойство(Наим, ВременныйФайл) ИЛИ ВременныйФайл = Неопределено Тогда
			
			Возврат Неопределено;
			//Попытка
			//	ВременныйФайл = ПолучитьИмяВременногоФайла();
			//	НайденныйЭлемент.ВнешнийОтчетХранилище.Получить().Записать(ВременныйФайл);
			//	ВнешняяОбработка = ВнешниеОбработки.Создать(ВременныйФайл);
			//	СтруктураРегламентированныхОтчетов.Вставить(Наим, ВременныйФайл);
			//	ПараметрыСеанса.РегламентированныеОтчеты = Новый ХранилищеЗначения(СтруктураРегламентированныхОтчетов);
			//	Возврат ВнешняяОбработка;
			//Исключение
			//	Сообщить("Не удалось запустить внешний отчет " + СокрП(Наим) + ".", СтатусСообщения.ОченьВажное);
			//	Возврат Неопределено;
			//Конецпопытки;
			
		Иначе
			
			Попытка
				ОбъектОтчетСУчетомКэша(НайденныйЭлемент).Записать(ВременныйФайл);
				ВнешняяОбработка = ВнешниеОтчеты.ПолучитьФорму(ВременныйФайл, ВыбраннаяФорма, Владелец, КлючУникальности);
				Попытка
					ВнешняяОбработка.мПолноеИмяФайлаВнешнейОбработки = ВременныйФайл;
				Исключение
				КонецПопытки;
				ДобавитьНадписьВнешнийОтчет(ВнешняяОбработка);
				Возврат ВнешняяОбработка;
			Исключение
				Возврат Неопределено;
			Конецпопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// Определяет, с учетом кэша, является ли отчет, заданный строкой-идентификатором Наим, внешним.
// Параметры:
//		Наим - строка-идентификатор отчета.
// ВозвращаемоеЗначение:
//		Булево - Истина, если для заданной строки-идентификатора используется внешний отчет.
//				 Ложь - в противном случае.
//				 Неопределено - информация по отчету, заданному строкой-идентификатором 
//  			 отсутствует в справочнике РегламентированныеОтчеты.
Функция ЭтоВнешнийОтчет(Наим) Экспорт
	
	НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Наим);
	Если НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(НайденныйЭлемент) <> Истина ИЛИ НайденныйЭлемент.ВнешнийОтчетХранилище = Неопределено Тогда // внутренний отчет
		Возврат Ложь;
	Иначе // внешний отчет
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Определяет кэшировалась ли информация для заданного элемента справочника РегламентированныеОтчеты.
// Параметры:
//		РеглОтч - ссылка на элемент справочника РегламентированныеОтчеты.
// Возвращаемое значение:
// 		Булево - Истина - информация кэшировалась,
// 				 Ложь - в противном случае.
Функция ОтчетКэшировался(РеглОтч) Экспорт
	Перем ОтчетВКэше;
	
	Попытка
		Возврат ПараметрыСеанса.ХранилищеПараметровВнешнихРегламентированныхОтчетов.Получить().Свойство(РеглОтч.ИсточникОтчета, ОтчетВКэше);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Пытается заблокировать документ. В случае неудачной попытки выдает предупреждение.
// Параметры:
//		мСохраненныйДок - объект ДокументОбъект, блокировку которого следует выполнить.
// Возвращаемое значение:
// 		Булево - Истина - объект удалось заблокировать,
// 				 Ложь - объект заблокировать не удалось.
Функция ЗаблокироватьДокумент(мСохраненныйДок)
	
	Попытка
		мСохраненныйДок.Заблокировать();
		Возврат Истина;
	Исключение
		Предупреждение(НСтр("ru='Не удается заблокировать документ!"
"Возможно, документ уже открыт другим пользователем!';uk='Не вдається заблокувати документ!"
"Можливо, документ уже відкритий іншим користувачем!'"));
		Возврат Ложь;
	Конецпопытки;
			
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ РЕГЛАМЕНТИРОВАННЫХ ОТЧЕТОВ
//

// Событие возникает перед открытием основной формы регламентированного отчета.
// В процедуре инициализируются стандартные переменные отчета. Выполняются специфические для
// внешних регламентированных отчетов действия, в случае если отчет внешний.
// Параметры:
//		Форма - основная форма отчета.
//		Отказ - признак отказа от открытия формы.
//		СтандартнаяОбработка - признак стандартной обработки открытия формы.
Процедура ПередОткрытиемОсновнойФормыРегламентиованногоОтчета(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	СтроковоеПредставлениеТипаОбъекта = Строка(ТипЗнч(Форма.ЭтотОбъект));
	КлючеваяФразаРУ = "Внешний отчет объект";
	КлючеваяФразаУК = "Зовнішній звіт об`єкт";
	ЭтоВнешняяОбработка =  (Лев(СтроковоеПредставлениеТипаОбъекта, СтрДлина(КлючеваяФразаРУ)) = КлючеваяФразаРУ)
						ИЛИ(Лев(СтроковоеПредставлениеТипаОбъекта, СтрДлина(КлючеваяФразаУК)) = КлючеваяФразаУК);
	Если ЭтоВнешняяОбработка И Форма.мПолноеИмяФайлаВнешнейОбработки = Неопределено Тогда
		Если ПроверкаРегистрацииПриОткрытииОсновнойФормыРегламентированногоОтчета(Форма.ЭтотОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если Форма.мПолноеИмяФайлаВнешнейОбработки = Неопределено Тогда
			Предупреждение(НСтр("ru='Внимание, отчет не зарегистрирован! Функция сохранения будет недоступна!';uk='Увага, звіт не зареєстрований! Функція збереження буде недоступна!'"));
			Форма.мЗаписьЗапрещена = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Событие возникает после записи из регалментированного отчета информации в экземпляр документа
// РегламентированныйОтчет.
// Параметры:
// 		Форма - форма регламентированного отчета, из которой происходила запись в документ.
Процедура ПослеЗаписиРегламентированногоОтчета(Форма) Экспорт
	
	ЗаблокироватьДокумент(Форма.мСохраненныйДок);
	КартинкаСохранение = Форма.ЭлементыФормы.Найти("КартинкаСохранение");
	Если КартинкаСохранение <> Неопределено Тогда
	    КартинкаСохранение.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Событие возникает перед записью из регламентированного отчета информации в экземпляр документа
// РегламентированныйОтчет.
// Проверяет возможность записи данных в экземлпяр документа РегламентированныйОтчет из 
// переданной в качестве параметра Формы регламентированного отчета.
// В случае невозможности записи выдает предупреждение.
// Параметры:
// 		Форма - форма регламентированного отчета, из которой производится попытка записи данных в документ.
// Возвращаемое значение:
//		Булево - Истина, если запись возможна; Ложь - в противном случае.
Функция ПриЗаписиРегламентированногоОтчета(Форма) Экспорт
	
	Если Форма.мЗаписьЗапрещена = Истина Тогда
		Предупреждение(НСтр("ru='Невозможно сохранить отчет! Воспользуйтесь механизмом внешних регламентированных отчетов, встроенным в конфигурацию!';uk='Неможливо зберегти звіт! Скористайтеся механізмом зовнішніх регламентованих звітів, вбудованим у конфігурацію!'"));
		Возврат Ложь;
	КонецЕсли;
	КартинкаСохранение = Форма.ЭлементыФормы.Найти("КартинкаСохранение");
	Если КартинкаСохранение <> Неопределено Тогда
	    КартинкаСохранение.Видимость = Истина;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

// Событие возникает при закрытии регламентированного отчета
// Параметры:
// 		Форма - закрываемая форма регламентированного отчета.
Процедура ПриЗакрытииРегламентированногоОтчета(Форма) Экспорт
	
	Если Форма.мСохраненныйДок <> Неопределено И Форма.мСохраненныйДок <> ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(Форма.мСохраненныйДок)) И Форма.мСохраненныйДок.Заблокирован() Тогда
		Форма.мСохраненныйДок.Разблокировать();
	КонецЕсли;
	СохранитьЗначение("ИнтервалАвтосохраненияРегламентированнойОтчетности", Форма.мИнтервалАвтосохранения);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ, ИСПОЛЬЗУЕМЫЕ В РЕГЛАМЕНТИРОВАННЫХ ОТЧЕТАХ
//

// Процедура добавляет строку в таблицу сообщений, заполняемую при выгрузке регламентированного отчета.
// Параметры:
//		Форма - форма, из которой вызывается процедура;
//		Описание - описание ошибки;
//		Раздел - наименование раздела;
//		ИмяЯчейки - имя области на табличном поле, соответвующей показателю, с которым связана ошибка;
//		ФИО - ФИО физлица (для случая, когда ошибка обнаружена при проверке раздела ФизЛица).
Процедура роСообщитьВТаблицуСообщений(Форма, Описание, Раздел, ИмяЯчейки, ФИО = "") Экспорт
	
	НовСтр = Форма.ТаблицаСообщений.Добавить();
	НовСтр.Раздел = Раздел;
	НовСтр.ИмяЯчейки = ИмяЯчейки; 
	НовСтр.Описание = Описание;
	Если Раздел = "ФизЛица" Тогда
		НовСтр.Страница = ФИО;
	Иначе
		НовСтр.Страница = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает номер страницы раздела "Физлица", соответствующей переданному в качестве параметра строке - ФИО физлица.
// Параметры:
//		Форма - форма, из которой вызывается функция;
//		ФИО - строка, содержащая ФИО физлица.
// Возвращаемое значение:
//		Число - порядковый номер страницы, соответствующей указанному в качестве параметра ФИО.
Функция роНомерСтраницыПоФИОФизЛица(Форма, ФИО)
	
	Ном = 0;
	Для Каждого Стр Из Форма.мСтруктураМногостраничныхРазделов.ФизЛица Цикл
		Ном = Ном + 1;
		Если Стр.Данные.ФизЛицФИО = ФИО Тогда
			Возврат Ном;
		КонецЕсли;
	КонецЦикла;
	Возврат 1; 
	
КонецФункции

// Процедура активизирует ячейку на поле табличного документа.
// Описание ячейки задается в виде строки таблицы значений.
// Параметры:
//		Форма - форма, из которой вызывается процедура;
//		Ячейка - строка таблицы значений, содержащая описание активизируемой ячейки.
Процедура роАктивизироватьЯчейку(Форма, Ячейка) Экспорт
	
	Попытка
		НомСтраницы = 0;
		
		Для Каждого СтрПан Из Форма.ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			НомСтраницы = НомСтраницы + 1;
			
			Если СтрПан.Имя = Ячейка.Раздел Тогда
				Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = СтрПан;
				Форма.ОсновнаяПанельПриСменеСтраницы(Форма.ЭлементыФормы.ОсновнаяПанель, НомСтраницы);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	Если Ячейка.Раздел = "ФизЛица" Тогда
		Попытка
			НС = роНомерСтраницыПоФИОФизЛица(Форма, Форма.Ячейка.Страница);
			роПоказатьСтраницуМногостраничногоРаздела(Форма, НС - 1, Ячейка.Раздел, Истина);
			ИмяСтраницы = НС;
		Исключение
		КонецПопытки;
	Иначе
		Попытка
			роПоказатьСтраницуМногостраничногоРаздела(Форма, Число(Ячейка.Страница) - 1, Ячейка.Раздел, Истина);
			ИмяСтраницы = Ячейка.Страница;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ПолеТД = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + Ячейка.Раздел];
	
	Попытка
		
		ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки);
		ИмяОбласти = Ячейка.ИмяЯчейки;
		
	Исключение
		
		Если (Ячейка.СтрокаПП <> Неопределено) И (НЕ (ПустаяСтрока(Ячейка.СтрокаПП))) Тогда
			
			Попытка
				ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
				ИмяОбласти = Ячейка.ИмяЯчейки + Ячейка.СтрокаПП;
			Исключение
				
				Попытка
					ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
					ИмяОбласти = Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП;
				Исключение
					
				КонецПопытки;
				
			КонецПопытки;
			
		Иначе
			
			Попытка
				ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + "1");
				ИмяОбласти = Ячейка.ИмяЯчейки + "1";
			Исключение
				
				Попытка
					ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + "_1");
					ИмяОбласти = Ячейка.ИмяЯчейки + "_1";
				Исключение
					
				КонецПопытки;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПопытки;
	
	ПолеТД.Область(ИмяОбласти).Примечание.ВыводитьНаПечать = Ложь;
	
	Форма.ТекущийЭлемент = ПолеТД;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА РАСШИФРОВКИ ПОКАЗАТЕЛЕЙ ОТЧЕТА
//
// Механизм расшифровки предназначен для показа пользователю алгоритма 
// вычисления значения показателя.

// Процедура добавляет строку в таблицу расшифровки. Строка содержит информацию 
// об одной из сумм, составляющих значение показателя.
// 
// Параметры:
//  Форма         - форма, из которой вызвана процедура;
//  ИмяЯчейки     - строка; имя области, соответствующей показателю отчета, 
//                  расшифровка которого формируется;
//  ИмяПоказателя - пользовательское наименование показателя;
//  ЗнакОперации  - знак операции. Значения "+" или "-";
//  ИмяСлагаемого - пользовательское наименование составляющей суммы показетеля 
//  Сумма         - число;
//  Счет          - ссылка на план счетов. Счет
//  КорСчет       - 
//  Сдвиг         - сдвиг от основного периода в годах с минусом. Т.е. сдвиг 2 от периода 2004 год означает 2002 год.
//  ПраваяГраница - правая граница периода. Если Сдвиг задает сдвиг от основного периода, то ПраваяГраница не учитывается.
//  ИмяРаздела    - наименование раздела, которому принадлежит показатель;
//  НомерЛиста    - номер листа раздела, на котором находится показатель;
//  МнЧ           - ИД многострочной части, которой принадлежит описываемый показатель;
//  НомерСтроки   - номер строки многострочной части, в которой находится показатель
//  Субконто1     - значение субкотно 1
//  Субконто2     - значение субкотно 2
//  Субконто3     - значение субкотно 3
Процедура _ДобавитьСтрокуРасшифровки(Форма, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого, Сумма, Счет = Неопределено, КорСчет = Неопределено, Сдвиг = Неопределено, ПраваяГраница = Неопределено, ИмяРаздела = Неопределено, НомерЛиста = Неопределено, МнЧ = Неопределено, НомерСтроки = Неопределено, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено) Экспорт

	НовСтр               = Форма.СпП.Добавить();
	НовСтр.НомСтроки     = Форма.СпП.Количество();
	НовСтр.ИмяЯчейки     = ИмяЯчейки;
	НовСтр.ИмяПоказателя = ИмяПоказателя;
	НовСтр.ЗнакОперации  = ЗнакОперации;
	НовСтр.ИмяСлагаемого = ИмяСлагаемого;
	НовСтр.Сумма         = Сумма;
	НовСтр.КодСчета      = Счет;
	НовСтр.КодКорСчета   = КорСчет;
	Если Сдвиг = Неопределено ИЛИ Сдвиг = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")) Тогда
		НовСтр.ДатаНачала = Форма.мДатаНачалаПериодаОтчета;
		НовСтр.ДатаКонца  = Форма.мДатаКонцаПериодаОтчета;
	ИначеЕсли ТипЗнч(Сдвиг) = Тип("Число") И Сдвиг <= 10 Тогда
		НовСтр.ДатаНачала = ДобавитьМесяц(Форма.мДатаНачалаПериодаОтчета, -12*Сдвиг);
		НовСтр.ДатаКонца  = ДобавитьМесяц(Форма.мДатаКонцаПериодаОтчета, -12*Сдвиг);
	Иначе
		НовСтр.ДатаНачала = Сдвиг;
		НовСтр.ДатаКонца  = ПраваяГраница;
	КонецЕсли;
	НовСтр.Раздел        = ИмяРаздела;
	НовСтр.Страница      = НомерЛиста;
	НовСтр.МнЧ           = МнЧ;
	НовСтр.СтрокаПП      = НомерСтроки;
	НовСтр.Субконто1     = Субконто1;
	НовСтр.Субконто2     = Субконто2;
	НовСтр.Субконто3     = Субконто3;
	
КонецПроцедуры // _ДобавитьСтрокуРасшифровки()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ РЕГЛАМЕНТИРОВАННЫХ ОТЧЕТОВ
//

// Функция возвращает значение интервала автосохранения отчетов (в минутах)
// для пользователя текущего сеанса.
//
// Функция не имеет параметров.
// Возвращаемое значение: Число - интервал автосохранения регламентированных отчетов.
Функция ЗначениеИнтервалаАвтосохраненияРегламентированнойОтчетности() Экспорт
	
	ИнтервалАвтосохраненияРегламентированнойОтчетности = ВосстановитьЗначение("ИнтервалАвтосохраненияРегламентированнойОтчетности");
	Если ИнтервалАвтосохраненияРегламентированнойОтчетности = Неопределено Тогда
		ИнтервалАвтосохранения = 10;
	Иначе
		ИнтервалАвтосохранения = ИнтервалАвтосохраненияРегламентированнойОтчетности;
	КонецЕсли;
	Возврат ИнтервалАвтосохранения;
	
КонецФункции

// Функция определяет возможность использования регламентированного отчета текущим пользователем.
//
// Параметры:
//	ИдентификаторОтчета - строка - уникальный идентификатор регламентированного отчета.
//
// Возвращаемое значение:
//	Булево. Истина - пользователь имеет право использовать отчет.
//			Ложь - пользователь не имеет право использовать отчет.
//			Неопределено - указанный отчет не зарегистрирован в системе.
//
Функция ПравоДоступаКРегламентированномуОтчету(ИдентификаторОтчета) Экспорт
		
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.РегламентированныеОтчеты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЭтоВнешнийОтчет(ИдентификаторОтчета) = Истина Тогда // это внутренний отчет
		
		Если Метаданные.Документы.Найти(ИдентификаторОтчета) <> Неопределено Тогда // это документ
			
			Если НЕ ПравоДоступа("Изменение", Метаданные.Документы[ИдентификаторОтчета]) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли Метаданные.Отчеты.Найти(ИдентификаторОтчета) <> Неопределено Тогда // это отчет
			
			Если НЕ ПравоДоступа("Использование", Метаданные.Отчеты[ИдентификаторОтчета]) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	
	
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ РЕГЛАМЕНТИРОВАННЫХ ОТЧЕТОВ С ДВУХМЕРНЫМ ШТРИХ-КОДОМ
//

// Функция формирует файл с электронным представлением регалментированного отчета.
//
// Параметры:
//	Форма - вызывающая форма отчета, файл с электронным представлением которого необходимо сформировать.
//	ВремФайл - полное имя файла.
//
// Возвращаемое значение:
//	Булево - Истина, если выгрузка прошла успешно; Ложь - в противном случае.
//
Функция СформироватьТекстВыгрузки(Форма, ВремФайл) Экспорт
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(Форма.мСохраненныйДок);
 	Возврат НовыйДок.ПолучитьФорму(, Форма).СформироватьИЗаписать(СпДокОсн, , , ВремФайл);
	
КонецФункции

// Функция, используя внешнюю библиотеку, создает изображения с двухмерным штрих-кодом
// на основе электронного представления отчета, и помещает эти изображения на печатные формы
// отчета.
// Изображения налагаются только в том случае, если у отчета взведен признак печати
// двухмерного штрих-кода.
//
// Параметры:
//	Форма  - форма отчета, на печатные формы которого требуется наложить изображения
//				двухмерного штрих-кода.
//
// Возвращаемое значение:
//	Булево - Истина, если изображения штрих-кода успешно выведены на печатные формы или если
//				признак печати отчета с двухмерным штрих-кодом не установлен.
//		   - Ложь, если изображения с двухмерным штрих-кодом успешно выведены в печатные формы отчета.
//
//Функция НаложитьДвухмерныйШтрихКод(Форма)
//	
//	// Если для отчета не предусмотрена печать с двухмерным штрих-кодом или этот режим отключен, то
//	// возвращаем Истина.
//	Попытка
//		Если Форма.мПечатьСДвухмернымШтрихКодом <> Истина Тогда
//			Возврат Истина;
//		КонецЕсли;
//	Исключение
//		Возврат Истина;
//	КонецПопытки;
//		
//	СтандартнаяШиринаРисунка = 13;
//	СтандартнаяВысотаРисунка = 68;
//	
//	// формируем тексты выгрузки
//	ВремФайл = ПолучитьИмяВременногоФайла();
//	Если НЕ СформироватьТекстВыгрузки(Форма, ВремФайл) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	// пытаемся инициализировать объект для генерации изображений штрих-кода
//	Попытка
//		VAztecBarCode = Новый COMОбъект("VAztecBarCode.BarCodeService");
//	Исключение
//		Сообщить(НСтр("ru='Не установлена компонента формирования двухмерного штрих-кода!';uk='Не встановлений компонент формування двомірного штрих-коду!'"), СтатусСообщения.Внимание);
//		Возврат Ложь;
//	КонецПопытки;
//	
//	// создаем два подкаталога во временном каталоге Windows:
//	// - для вертикальных штрих-кодов;
//	// - для горизонтальных штрих-кодов.
//	УникИд1 = Новый УникальныйИдентификатор();
//	УникИд2 = Новый УникальныйИдентификатор();
//	ВременныйКаталог = КаталогВременныхФайлов() + ?(Прав(КаталогВременныхФайлов(), 1) = "\", "", "\");
//	ВременныйКаталогВертикальныхШтрихКодов = ВременныйКаталог + УникИД1 + "\";
//	ВременныйКаталогГоризонтальныхШтрихКодов = ВременныйКаталог + УникИД2 + "\";
//	СоздатьКаталог(ВременныйКаталогВертикальныхШтрихКодов);
//	СоздатьКаталог(ВременныйКаталогГоризонтальныхШтрихКодов);
//	
//	// пытаемся сформировать изображения
//	Попытка
//		VAztecBarCode.CreateImageFiles(ВремФайл, ВременныйКаталогГоризонтальныхШтрихКодов + "1C2D%", 0);
//		VAztecBarCode.CreateImageFiles(ВремФайл, ВременныйКаталогВертикальныхШтрихКодов + "1C2D%", 1);
//	Исключение
//		Сообщить(НСтр("ru='Во время формирования произошла ошибка: ';uk='Під час формування відбулася помилка: '") + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Внимание);
//		Возврат Ложь;
//	КонецПопытки;
//	VAztecBarCode = Неопределено;
//		
//	// инициализируем массив имён файлов с изображениями
//	МассивДвумерныхШтрихКодов = Новый Массив;
//	Инд = 1;
//	Для Инд = 1 По Форма.мПечатныеФормы.Количество()*3 Цикл
//		
//		ИндексПечатнойФормы = (Инд - 1) % Форма.мПечатныеФормы.Количество();
//	
//		Если ТипЗнч(Форма.мПечатныеФормы.Получить(ИндексПечатнойФормы).Значение) = Тип("ТабличныйДокумент") Тогда
//			ТаблДок = Форма.мПечатныеФормы.Получить(ИндексПечатнойФормы).Значение;
//		Иначе
//			ТаблДок = Форма.мПечатныеФормы.Получить(ИндексПечатнойФормы).Значение.Значение;
//		КонецЕсли;
//		
//		Если ТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт Тогда
//			МассивДвумерныхШтрихКодов.Добавить(ВременныйКаталогГоризонтальныхШтрихКодов + "1C2D" + Формат(Инд, "ЧЦ=4; ЧН=; ЧВН=; ЧГ=") + ".bmp");
//		Иначе
//			МассивДвумерныхШтрихКодов.Добавить(ВременныйКаталогВертикальныхШтрихКодов + "1C2D" + Формат(Инд, "ЧЦ=4; ЧН=; ЧВН=; ЧГ=") + ".bmp");
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	ИндексПечатнойФормы = 0;
//	ИндексОбходаЛистов = 1;
//	КоличествоПечатныхФорм = Форма.мПечатныеФормы.Количество();
//	Для Каждого ФайлШтрихКода Из МассивДвумерныхШтрихКодов Цикл
//		
//		// инициализируем переменную - текущий табличный документ, на который будет наноситься штрих-код
//		Если ТипЗнч(Форма.мПечатныеФормы.Получить(ИндексПечатнойФормы).Значение) = Тип("ТабличныйДокумент") Тогда
//			ТаблДок = Форма.мПечатныеФормы.Получить(ИндексПечатнойФормы).Значение;
//		Иначе
//			ТаблДок = Форма.мПечатныеФормы.Получить(ИндексПечатнойФормы).Значение.Значение;
//		КонецЕсли;
//		
//		// находим на табличном документе рисунки - ограничивающие квадраты по углам печатной формы
//		ОграничивающиеКвадраты = Новый ТаблицаЗначений;
//		ОграничивающиеКвадраты.Колонки.Добавить("Низ");
//		ОграничивающиеКвадраты.Колонки.Добавить("Право");
//		Для Каждого Рис Из ТаблДок.Рисунки Цикл
//			Если Рис.ТипРисунка = ТипРисункаТабличногоДокумента.Картинка И Рис.Высота < 10 И Рис.Ширина < 10 Тогда
//				НовСтр = ОграничивающиеКвадраты.Добавить();
//				НовСтр.Право = Рис.Лево + Рис.Ширина;
//				НовСтр.Низ = Рис.Верх + Рис.Высота;
//			КонецЕсли;
//		КонецЦикла;
//		// если квадраты не найдены, то прервемся с ошибкой
//		Если ОграничивающиеКвадраты.Количество() = 0 Тогда
//			Сообщить(НСтр("ru='Не удалось поместить двухмерный штрих-код на печатные формы отчета!';uk='Не вдалося помістити двомірний штрих-код на друковані форми звіту!'"), СтатусСообщения.Внимание);
//			Возврат Ложь;
//		КонецЕсли;
//		
//		// определяем координаты рисунка
//		Если ТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт Тогда
//			ОграничивающиеКвадраты.Сортировать("Низ Убыв");
//			ВерхРисунка = ОграничивающиеКвадраты[0].Низ - СтандартнаяШиринаРисунка;//?(Форма.мСекцияДляДвухмерногоШтрихКодаПредусмотрена = Ложь, 0, СтандартнаяШиринаРисунка);
//			ОграничивающиеКвадраты.Сортировать("Право Убыв");
//			ЛевоРисунка = ОграничивающиеКвадраты[0].Право - СтандартнаяВысотаРисунка - (10 + 79*(ИндексОбходаЛистов - 1));
//		Иначе
//			ВерхРисунка = 10 + 79*(ИндексОбходаЛистов - 1);
//			ОграничивающиеКвадраты.Сортировать("Право Убыв");
//			ЛевоРисунка = ОграничивающиеКвадраты[0].Право - ?(Форма.мСекцияДляДвухмерногоШтрихКодаПредусмотрена = Ложь, 0, СтандартнаяШиринаРисунка);
//			ШиринаТаблДок = ТаблДок.ШиринаТаблицы;
//		КонецЕсли;
//		
//		// пытаемся поместить изображение на форму
//		Попытка
//			Рисунок = ТаблДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
//			Рисунок.Картинка = Новый Картинка(ФайлШтрихКода);
//		Исключение
//			Прервать;// если файл не найден - значит все файлы выведены
//		Конецпопытки;
//		
//		Если ТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет И ИндексОбходаЛистов = 1 Тогда
//			Если Форма.мСекцияДляДвухмерногоШтрихКодаПредусмотрена = Ложь Тогда
//				ТаблДок.Область(0, ШиринаТаблДок + 1, 0, ШиринаТаблДок + 1).ШиринаКолонки = 8;
//			КонецЕсли;
//		КонецЕсли;
//		
//		// задаем атрибуты объекта РисунокТабличногоДокумента
//		Рисунок.Верх = ВерхРисунка;
//		Рисунок.Лево = ЛевоРисунка;
//		Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
//		Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
//		Если ТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт Тогда
//			Рисунок.Ширина = СтандартнаяВысотаРисунка;
//			Рисунок.Высота = СтандартнаяШиринаРисунка;
//		Иначе
//			Рисунок.Ширина = СтандартнаяШиринаРисунка;
//			Рисунок.Высота = СтандартнаяВысотаРисунка;
//		КонецЕсли;
//		
//		// наращиваем счетчики номера обхода и порядкового номера печатной формы для текущего обхода
//		Если (ИндексПечатнойФормы + 1) % КоличествоПечатныхФорм <= ИндексПечатнойФормы Тогда
//			ИндексОбходаЛистов = ИндексОбходаЛистов + 1;
//		КонецЕсли;
//		ИндексПечатнойФормы = (ИндексПечатнойФормы + 1) % КоличествоПечатныхФорм;
//		
//	КонецЦикла;
//	
//	// удаляем временные каталоги, содержащие файлы с изображениями штрих-кодов
//	Попытка
//		УдалитьФайлы(ВременныйКаталогГоризонтальныхШтрихКодов);
//		УдалитьФайлы(ВременныйКаталогВертикальныхШтрихКодов);
//	Исключение
//	Конецпопытки;
//	
//	Возврат Истина;
//		
//КонецФункции

// Функция возвращает признак печати раздела.
//
// Параметры:
//	Форма - вызывающая форма регламентированного отчета.
//	СтрокаРаздела - СтрокаДереваЗначений с описанием раздела.
//
// Возвращаемое значение:
//	Число - 1, если раздел печатается; в противном случае - 0.
//
Функция ПечататьРаздел(Форма, СтрокаРаздела) Экспорт
	Перем КлючФизЛица;
	
	// если в настройках взведен флаг печати, то добавляем раздел в список печатаемых и выходим
	Если СтрокаРаздела.ВыводНаПечать <> 0 Тогда
		Форма.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
		Возврат 1;
	КонецЕсли;
	
	// определяем является ли невыбранный для печати раздел обязательным
	//Попытка
	//	НеВыбранРаздел = (Форма.мПечатьСДвухмернымШтрихКодом = Истина
	//	И (Форма.ОбязРазделов.НайтиПоЗначению(СтрокаРаздела.ИмяСтраницы) <> Неопределено
	//	ИЛИ Лев(ВРЕГ(СтрокаРаздела.ИмяСтраницы), 9) = "ТИТУЛЬНЫЙ"));
	//Исключение
	//	Возврат 0;
	//КонецПопытки;
	//// если не выбран обязательный раздел, то сообщаем об этом пользователю, добавляем раздел в список печатаемых и выходим
	//Если НеВыбранРаздел Тогда
	//	Сообщить(Локализация.СтрШаблон(НСтр("ru='В режиме печати с двухмерным штрих-кодом не выбран обязательный для печати раздел ""¤1¤"". Печатная форма раздела будет сформирована принудительно.';uk='У режимі друку із двомірним штрих-кодом не обраний обов''язковий для друку розділ ""¤1¤"". Друкована форма розділу буде сформована примусово.'"), СтрокаРаздела.Представление), СтатусСообщения.Информация);
	//	Форма.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
	//	Возврат 1;
	//КонецЕсли;
	
	// для раздела "ФизЛица" - особая обработка
	// раздел выводится на печать, если в нем заполнена графа "ФИО физлица"
	//Если Форма.мПечатьСДвухмернымШтрихКодом = Истина И ВРЕГ(СтрокаРаздела.ИмяСтраницы) = "ФИЗЛИЦА" Тогда
	//	КлючФизЛицаПрисутствует = Форма.мСтруктураМногостраничныхРазделов.Свойство("ФизЛица", КлючФизЛица);
	//	Если НЕ КлючФизЛицаПрисутствует Тогда
	//		Возврат 0;
	//	КонецЕсли;
	//	Врем = Неопределено;
	//	Для Каждого ФизЛицо Из КлючФизЛица Цикл
	//		Если ФизЛицо <> Неопределено И ФизЛицо.Данные <> Неопределено И 
	//			((ФизЛицо.Данные.Свойство("ФизЛицФИО", Врем) И НЕ ПустаяСтрока(ФизЛицо.Данные.ФизЛицФИО)) 
	//			или (ФизЛицо.Данные.Свойство("ФизЛицоФИО", Врем) И НЕ ПустаяСтрока(ФизЛицо.Данные.ФизЛицоФИО))) Тогда
	//			Сообщить(НСтр("ru='В режиме печати с двухмерным штрих-кодом не выбран обязательный для печати раздел ""Физические лица"". Печатная форма раздела будет сформирована принудительно.';uk='У режимі друку із двомірним штрих-кодом не обраний обов''язковий для друку розділ ""Фізичні особи"". Друкована форма розділу буде сформована примусово.'"), СтатусСообщения.Информация);
	//			Форма.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
	//			Возврат 1;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
	Возврат 0;
	
КонецФункции
	
// Функция определяет установлена ли компонента формирования двухмерного штрих-кода.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево - Истина, если компонента установлена, и Ложь - в противном случае.
//
//Функция БиблиотекаФормированияДвухмерногоШтрихКодаУстановлена() Экспорт
//	
//	Попытка
//		VAztecBarCode = Новый COMОбъект("VAztecBarCode.BarCodeService");
//		Возврат Истина;
//	Исключение
//		Возврат Ложь;
//	КонецПопытки;
//	
//КонецФункции	

Процедура ПриНажатииНаКнопкуПереходаВРежимВводаДанных(Форма) Экспорт
	
	Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РасширитьПолеБланка.Пометка = НЕ Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РасширитьПолеБланка.Пометка;
	Если Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РасширитьПолеБланка.Пометка Тогда
		Форма.ЭлементыФормы.ПанельЭУВерхняя.Свертка = РежимСверткиЭлементаУправления.Верх;
		Если Форма.ЭлементыФормы.Найти("ПанельЭУНижняя") <> Неопределено Тогда
			Форма.ЭлементыФормы.ПанельЭУНижняя.Свертка = РежимСверткиЭлементаУправления.Низ;
		КонецЕсли;
	Иначе
		Форма.ЭлементыФормы.ПанельЭУВерхняя.Свертка = РежимСверткиЭлементаУправления.Нет;
		Если Форма.ЭлементыФормы.Найти("ПанельЭУНижняя") <> Неопределено Тогда
			Форма.ЭлементыФормы.ПанельЭУНижняя.Свертка = РежимСверткиЭлементаУправления.Нет;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//
//Процедура НаписатьПисьмо(ТекущийПользователь = Неопределено, СтруктураПараметров = Неопределено, ПеренестиВложенияИзОснования = Ложь, Копирование = Ложь,
//					   ТекущийЭлементХТМЛ = Ложь, Дополнительно = Неопределено, ФормаВладелец = Неопределено, ПодписьПодТекстом = Ложь,
//					   ОткрыватьПисьмо = Истина, ИсходныйОбъект = Неопределено) Экспорт
//	Перем Адрес;
//	Перем Представление;
//	Перем Тема;
//	Перем Текст;
//	
//	Если НЕ СтруктураПараметров.Свойство("Адрес", Адрес) Тогда
//		Адрес = "";
//	КонецЕсли; 
//	Если НЕ СтруктураПараметров.Свойство("Представление", Представление) Тогда
//		Представление = "";
//	КонецЕсли; 
//	Если НЕ СтруктураПараметров.Свойство("Тема", Тема) Тогда
//		Тема = "";
//	КонецЕсли; 
//	Если НЕ СтруктураПараметров.Свойство("Текст", Текст) Тогда
//		Текст = "";
//	КонецЕсли; 
//	
//	ТекстСообщения = СтрЗаменить(Текст, Символы.ПС, Символы.ВТаб);

//	СтрокаВыполнения = "mailto:";
//	СтрокаВыполнения = СтрокаВыполнения + Представление + "<" + Адрес + ">";
//	СтрокаВыполнения = СтрокаВыполнения + "?subject=" + ?(ПустаяСтрока(СокрЛП(Тема))," ",СокрЛП(Тема));
//	СтрокаВыполнения = СтрокаВыполнения + "&body=" + СокрЛП(Текст);

//	WshShell = Новый COMObject("WScript.Shell");

//	// Максимально допустимое число символов строки при использовании данного COM-объекта равно 2021
//	Попытка
//		WshShell.Run("""" + СтрокаВыполнения + """");
//	Исключение
//		ОбщаяДлинаСистемнойСтрокиВыполнения = СтрДлина(СтрокаВыполнения);
//		ОбщаяДлинаСлужебныхСимволов = СтрДлина(СтрокаВыполнения) - СтрДлина(СокрЛП(ТекстСообщения));
//		ПревышениеСтроки = ОбщаяДлинаСистемнойСтрокиВыполнения - 2021;
//		ДопустимаяДлинаТекста = 2021 - ОбщаяДлинаСлужебныхСимволов;
//		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Вы можете ввести в текст текущего письма только ';uk='Ви можете ввести в текст поточного листа лише '") + ДопустимаяДлинаТекста + НСтр("ru=' символов, а у вас - ';uk=' символів, а у вас - '") + СтрДлина(СокрЛП(ТекстСообщения)));
//		СтрокаВопроса = НСтр("ru='Количество символов в тексте письма превышает допустимое.';uk='Кількість символів в тексті листа перевищує максимально можливе.'") + Символы.ПС + НСтр("ru='Отбросить последние ';uk='Відкинути останні '") + ПревышениеСтроки + НСтр("ru=' символов и оправить?';uk=' символів та відправити?'");
//		ОтветНаВопрос = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет);
//		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
//			СтрокаВыполнения = Лев(СтрокаВыполнения, (ОбщаяДлинаСистемнойСтрокиВыполнения - ПревышениеСтроки));
//			Попытка
//				WshShell.Run("""" + СтрокаВыполнения + """");
//			Исключение
//				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
//			КонецПопытки;
//		КонецЕсли; 
//	КонецПопытки;
//	
//КонецПроцедуры
	
#КонецЕсли
