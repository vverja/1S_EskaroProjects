// Для расширения способов заполнения необходимо:
//	- создать новый объект метаданных "справочник"
//		обязательные реквизиты:
//			ГраницаОбработки
//			ФормироватьДокументыАвтоматически
//			РегламентноеЗадание
//	- добавить обработку нового способа заполнения в функции модуля 
//    ПолучитьДатуОкончанияПериодаФормированияДокументов()
//    СформироватьДокументы()
//    ПолучитьМассивДокументовДляПроведения()
//    ПолучитьМассивДокументовДляУдаления()
//    УдалятьИПроводитьДокументыВТранзакции()
//  - добавить новый справочник в состав типов реквизита Настройка 
//    обработки ФормированиеДокументовПоДаннымОперативногоУчетаПроизводства

////////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТ ФОРМИРОВАНИЯ ДОКУМЕНТОВ ВЫПУСКА

// Возвращает список видов регулярных документов, которые могут формироваться регламентом
//
Функция РегламентФормированияДокументовВыпуска_СписокВидовРегулярныхДокументов() Экспорт
	
	ВозможныеВидыДокументов = Новый Массив();
	ВозможныеВидыДокументов.Добавить("ВыпускПродукции");
	ВозможныеВидыДокументов.Добавить("ОтчетПроизводстваЗаСмену");
	
	СписокВидов = Новый СписокЗначений();
	
	Для Каждого ИмяДокумента Из ВозможныеВидыДокументов Цикл
		// Проверим, что такой документ есть в конфигурации
		Если Метаданные.Документы.Найти(ИмяДокумента) <> Неопределено Тогда
			СписокВидов.Добавить(ИмяДокумента, Метаданные.Документы[ИмяДокумента].Синоним);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВидов;
	
КонецФункции

// Возвращает булево: могут ли быть заполнены материалы в документе
Функция РегламентФормированияДокументовВыпуска_ЗаполнятьМатериалы(ВидДокумента) Экспорт
	
	Возврат ВидДокумента = "ОтчетПроизводстваЗаСмену";
	
КонецФункции

// Определяет дату окончания следующего периода формирования документов
// 
// Параметры
//	Настройка 		- ссылка на настройку
//
// Возвращаемое значение
//	Дата окончания периода
Функция РегламентФормированияДокументовВыпуска_ПолучитьДатуОкончанияПериодаФормированияДокументов(Настройка)
	
	Если Настройка.НеОбрабатыватьВсеДокументы Тогда
		
		Сутки = 24 * 60 * 60;
		Возврат НачалоДня(ТекущаяДата()) - Настройка.Задержка * Сутки - 1;
		
	Иначе
		
		Возврат ТекущаяДата();
		
	КонецЕсли;
	
КонецФункции

// Функция, производящая непосредственное формирование документов.
//
// Параметры
//  Настройка     - ссылка на настройку
//	ДатаНачала	  - дата начала выборки документов;
//	ДатаОкончания - дата окончания выборки документов;
//  Ошибка        - в параметр будет возвращен текст ошибки (если формирование документов завершится с ошибкой)
//	СформированныеДокументы	- в параметр будет возвращен массив сформированных документов;
//	УчтенныеДокументы		- в параметр будет возвращен массив учтенных документов (т.е. тех, по данным которых сформированы документы).
//
// Возвращаемое значение
//  Истина - сформировано без ошибок
//  Ложь   - при формировании документов произошли ошибки
//
Функция РегламентФормированияДокументовВыпуска_СформироватьДокументы(Настройка, ДатаНачала, ДатаОкончания, 
	    Ошибка = "", СформированныеДокументы = Неопределено, УчтенныеДокументы = Неопределено)
	
	// На основании указанных в настройке параметров будут созданы документы 
	// "ОтчетПроизводстваЗаСмену"
	// или
	// "ВыпускПродукции"
	
	// Проверим, что по указанному подразделению смены завершены.
	Если Настройка.НеОбрабатыватьПериодДоЗавершенияСмен Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеСмены = РегистрыСведений.ЗавершенныеСмены.Получить(Новый Структура("Подразделение", Настройка.Подразделение));
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ДанныеСмены.ГраницаСмены = '0001-01-01' Тогда
			Ошибка = Ошибка + "Для формирования документов должны быть завершены смены по " + Формат(ДатаОкончания, "ДЛФ=D");
			Возврат Ложь;
		КонецЕсли;
		
		// Определим дату и время конца смены, которая завершена
		КонецСмены = ОперативныйУчетПроизводства.ДатаВремяОкончанияСмены(ДанныеСмены.ГраницаСмены, ДанныеСмены.Смена);
		
		Если КонецСмены < КонецДня(ДатаОкончания) Тогда
			
			Ошибка = Ошибка + "Для формирования документов должны быть завершены смены по " + Формат(ДатаОкончания, "ДЛФ=D");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	СформированныеДокументы	=	Новый Массив;
	УчтенныеДокументы		=	Новый Массив;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц(); //используется для всех запросов функции
	
	//Получим перечень документов для обработки в соответствии с фильтрами
	Запрос = Новый Запрос();
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	//Определим аргумент функции КонецПериода в зависимости от периодичности
	ОписаниеПериодаДетализации = Строка(Настройка.ПериодДетализации);
	
	// Состав ключа запроса (выбираемый в третьем запросе) также дублируется 
	//	- в условии запросов, выбирающих данные ТЧ документов;
	//	- в объявлении структуры КлючДокумента
	
	//	Порядок запросов в пакете важен, так как потом выполняем его методом ВыполнитьПакет()
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетМастераСмены.Ссылка КАК Ссылка,
	|	ОтчетМастераСмены.Подразделение КАК Подразделение,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА КОНЕЦПЕРИОДА(ОтчетМастераСмены.Дата, "+ОписаниеПериодаДетализации+") > &ГраницаОкончания
	|				ТОГДА &ГраницаОкончания
	|			КОГДА КОНЕЦПЕРИОДА(ОтчетМастераСмены.Дата, "+ОписаниеПериодаДетализации+") > КОНЕЦПЕРИОДА(ОтчетМастераСмены.Дата, МЕСЯЦ)
	|				ТОГДА КОНЕЦПЕРИОДА(ОтчетМастераСмены.Дата, МЕСЯЦ)
	|			ИНАЧЕ КОНЕЦПЕРИОДА(ОтчетМастераСмены.Дата, "+ОписаниеПериодаДетализации+")
	|		КОНЕЦ, ДЕНЬ) КАК Дата,
	|	ОтчетМастераСмены.ГраницаСмены КАК ГраницаСмены
	|ПОМЕСТИТЬ ДокументыИсточники
	|ИЗ
	|	Документ.ОтчетМастераСмены КАК ОтчетМастераСмены
	|ГДЕ
	|	ОтчетМастераСмены.Дата МЕЖДУ &ГраницаНачала И &ГраницаОкончания
	|	И ОтчетМастераСмены.Проведен
	|	И (ОтчетМастераСмены.Подразделение = &Подразделение ИЛИ &Подразделение=Значение(Справочник.Подразделения.ПустаяСсылка))
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
  	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыИсточники.Ссылка 		КАК Документ,
	|	ДокументыИсточники.ГраницаСмены КАК ГраницаСмены
	|ИЗ
	|	ДокументыИсточники КАК ДокументыИсточники
	|УПОРЯДОЧИТЬ ПО ГраницаСмены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыИсточники.Дата КАК Дата,
	|	ДокументыИсточники.Подразделение
	|ИЗ
	|	ДокументыИсточники КАК ДокументыИсточники
	|УПОРЯДОЧИТЬ ПО Дата
	|;";
	
	//Значения отбора возьмем из шапки документа
	Отбор = Новый Структура("Ссылка, Подразделение");
	ЗаполнитьЗначенияСвойств(Отбор, Настройка);
	ЗаполнитьЗначенияПараметровЗапроса(Запрос, Отбор);
	
	//Период берется из параметров
	Запрос.УстановитьПараметр("ГраницаНачала", 		ДатаНачала);
	Запрос.УстановитьПараметр("ГраницаОкончания", 	КонецДня(ДатаОкончания));
	
	Попытка
		РезультатыЗапросов 				= Запрос.ВыполнитьПакет();
	Исключение
		Ошибка = "Не удалось получить данные для формирования документов: "+ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Второй запрос пакета содержит выборку документов-источников заполнения
	//Запоминаем документы, на основании которых проводим заполнение.
	УчтенныеДокументы = РезультатыЗапросов[1].Выгрузить().ВыгрузитьКолонку("Документ");
	
	//Третий запрос пакета содержит выборку по ключевым полям создаваемых документов
	ВыборкаКлючейДокументов = РезультатыЗапросов[2].Выбрать();
	
	//Подготовим запросы для получения данных 
	// о выпуске
	// о расходе материалов.
	
	ЗапросВыпуск = Новый Запрос();
	ЗапросВыпуск.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросВыпуск.Текст = 
	"ВЫБРАТЬ
	|	ОтчетМастераСменыВыпуск.Номенклатура КАК Номенклатура,
	|	ОтчетМастераСменыВыпуск.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ОтчетМастераСменыВыпуск.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ОтчетМастераСменыВыпуск.Спецификация КАК Спецификация,
	|	СУММА(ОтчетМастераСменыВыпуск.Количество * ОтчетМастераСменыВыпуск.Коэффициент / ОтчетМастераСменыВыпуск.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК Количество
	|ПОМЕСТИТЬ ДанныеВыпуска
	|ИЗ
	|	Документ.ОтчетМастераСмены.Выпуск КАК ОтчетМастераСменыВыпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыИсточники КАК ДокументыИсточники
	|		ПО ОтчетМастераСменыВыпуск.Ссылка = ДокументыИсточники.Ссылка
	|ГДЕ
	|	ДокументыИсточники.Дата = &Дата
	|	И ДокументыИсточники.Подразделение = &Подразделение
	|	И (НЕ ОтчетМастераСменыВыпуск.Номенклатура.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетМастераСменыВыпуск.Номенклатура,
	|	ОтчетМастераСменыВыпуск.ХарактеристикаНоменклатуры,
	|	ОтчетМастераСменыВыпуск.СерияНоменклатуры,
	|	ОтчетМастераСменыВыпуск.Спецификация
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОтчетМастераСменыВыпуск.Количество * ОтчетМастераСменыВыпуск.Коэффициент / ОтчетМастераСменыВыпуск.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеВыпуска.Номенклатура,
	|	ДанныеВыпуска.ХарактеристикаНоменклатуры,
	|	ДанныеВыпуска.СерияНоменклатуры,
	|	ДанныеВыпуска.Спецификация,
	|	ДанныеВыпуска.Количество,
	|	ДанныеВыпуска.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ДанныеВыпуска.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	ДанныеВыпуска.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ЗНАЧЕНИЕ(Справочник.Качество.Новый) КАК Качество,
	|	1 КАК ДоляСтоимости,
	|	ДанныеВыпуска.Номенклатура.Представление,
	|	ДанныеВыпуска.ХарактеристикаНоменклатуры.Представление,
	|	ДанныеВыпуска.СерияНоменклатуры.Представление,
	|	ДанныеВыпуска.Спецификация.Представление
	|ИЗ
	|	ДанныеВыпуска КАК ДанныеВыпуска
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	//документа
	//	Порядок запросов важен, так как запрос выполняется методом ВыполнитьПакет();
	//  Первый запрос 		[0] получит данные расхода материалов и поместит во временную таблицу;
	//  Второй запрос 		[1] нужен для того, чтобы отсечь расход материалов, для которых не указано точно, куда они пошли.
	//		В данном случае ограничиваем только материалами, аналитика распределения которых совпадает с выпуском 
	//		с точностью до продукции и характеристики.
	//	Третий запрос 		[2] получает данные о сводном расходе распределенных материалов (для заполнения закладки "Материалы".
	//	Четвертый запрос 	[3] получает данные о детальном расходе материалов (для заполнения РаспределениеМатериалов).
	
	ЗапросМатериалы = Новый Запрос();
	ЗапросМатериалы.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросМатериалы.Текст = 
	"ВЫБРАТЬ
	|	ОтчетМастераСменыРасходМатериалов.Номенклатура,
	|	ОтчетМастераСменыРасходМатериалов.ХарактеристикаНоменклатуры,
	|	ОтчетМастераСменыРасходМатериалов.СерияНоменклатуры,
	|	ОтчетМастераСменыРасходМатериалов.Спецификация КАК Спецификация,
	|	СУММА(ОтчетМастераСменыРасходМатериалов.Количество * ОтчетМастераСменыРасходМатериалов.Коэффициент / ОтчетМастераСменыРасходМатериалов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК Количество,
	|	ОтчетМастераСменыРасходМатериалов.Продукция КАК Продукция,
	|	ОтчетМастераСменыРасходМатериалов.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|	ОтчетМастераСменыРасходМатериалов.СерияПродукции КАК СерияПродукции,
	|	ОтчетМастераСменыРасходМатериалов.Номенклатура.СтатьяЗатрат КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ДанныеРасходаМатериалов
	|ИЗ
	|	Документ.ОтчетМастераСмены.РасходМатериалов КАК ОтчетМастераСменыРасходМатериалов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыИсточники КАК ДокументыИсточники
	|		ПО ОтчетМастераСменыРасходМатериалов.Ссылка = ДокументыИсточники.Ссылка
	|ГДЕ
	|	ДокументыИсточники.Дата = &Дата
	|	И ДокументыИсточники.Подразделение = &Подразделение
	|	И (НЕ ОтчетМастераСменыРасходМатериалов.Номенклатура.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетМастераСменыРасходМатериалов.Номенклатура,
	|	ОтчетМастераСменыРасходМатериалов.ХарактеристикаНоменклатуры,
	|	ОтчетМастераСменыРасходМатериалов.СерияНоменклатуры,
	|	ОтчетМастераСменыРасходМатериалов.Спецификация,
	|	ОтчетМастераСменыРасходМатериалов.Продукция,
	|	ОтчетМастераСменыРасходМатериалов.ХарактеристикаПродукции,
	|	ОтчетМастераСменыРасходМатериалов.СерияПродукции,
	|	ОтчетМастераСменыРасходМатериалов.Номенклатура.СтатьяЗатрат
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОтчетМастераСменыРасходМатериалов.Количество * ОтчетМастераСменыРасходМатериалов.Коэффициент / ОтчетМастераСменыРасходМатериалов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Продукция,
	|	ХарактеристикаПродукции,
	|	СерияПродукции,
	|	Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРасходаМатериалов.Номенклатура,
	|	ДанныеРасходаМатериалов.ХарактеристикаНоменклатуры,
	|	ДанныеРасходаМатериалов.СерияНоменклатуры,
	|	ДанныеРасходаМатериалов.Спецификация,
	|	СУММА(ДанныеРасходаМатериалов.Количество) КАК Количество,
	|	ДанныеРасходаМатериалов.Продукция,
	|	ДанныеРасходаМатериалов.ХарактеристикаПродукции,
	|	ДанныеРасходаМатериалов.СерияПродукции,
	|	ДанныеРасходаМатериалов.СтатьяЗатрат,
	|	ДанныеРасходаМатериалов.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ДанныеРасходаМатериалов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	ДанныеРасходаМатериалов.Продукция.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ ДанныеРаспределенияМатериалов
	|ИЗ
	|	ДанныеРасходаМатериалов КАК ДанныеРасходаМатериалов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеВыпуска.Номенклатура КАК Номенклатура,
	|			ДанныеВыпуска.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|		ИЗ
	|			ДанныеВыпуска КАК ДанныеВыпуска) КАК СвернутыеДанныеВыпуска
	|		ПО ДанныеРасходаМатериалов.Продукция = СвернутыеДанныеВыпуска.Номенклатура
	|			И ДанныеРасходаМатериалов.ХарактеристикаПродукции = СвернутыеДанныеВыпуска.ХарактеристикаНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРасходаМатериалов.СерияНоменклатуры,
	|	ДанныеРасходаМатериалов.Продукция,
	|	ДанныеРасходаМатериалов.Номенклатура,
	|	ДанныеРасходаМатериалов.ХарактеристикаНоменклатуры,
	|	ДанныеРасходаМатериалов.СерияПродукции,
	|	ДанныеРасходаМатериалов.СтатьяЗатрат,
	|	ДанныеРасходаМатериалов.ХарактеристикаПродукции,
	|	ДанныеРасходаМатериалов.Спецификация,
	|	ДанныеРасходаМатериалов.Номенклатура.ЕдиницаХраненияОстатков,
	|	ДанныеРасходаМатериалов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	|	ДанныеРасходаМатериалов.Продукция.НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРасходаМатериалов.Номенклатура,
	|	ДанныеРасходаМатериалов.ХарактеристикаНоменклатуры,
	|	ДанныеРасходаМатериалов.СерияНоменклатуры,
	|	СУММА(ДанныеРасходаМатериалов.Количество) КАК Количество,
	|	ДанныеРасходаМатериалов.СтатьяЗатрат,
	|	ДанныеРасходаМатериалов.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ДанныеРасходаМатериалов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	ДанныеРасходаМатериалов.Номенклатура.Представление КАК НоменклатураПредставление,
	|	ДанныеРасходаМатериалов.ХарактеристикаНоменклатуры.Представление КАК ХарактеристикаНоменклатурыПредставление,
	|	ДанныеРасходаМатериалов.СерияНоменклатуры.Представление КАК СерияНоменклатурыПредставление,
	|	ДанныеРасходаМатериалов.СтатьяЗатрат.Представление КАК СтатьяЗатратПредставление
	|ИЗ
	|	ДанныеРасходаМатериалов КАК ДанныеРасходаМатериалов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРасходаМатериалов.Номенклатура,
	|	ДанныеРасходаМатериалов.СерияНоменклатуры,
	|	ДанныеРасходаМатериалов.ХарактеристикаНоменклатуры,
	|	ДанныеРасходаМатериалов.СтатьяЗатрат,
	|	ДанныеРасходаМатериалов.Номенклатура.ЕдиницаХраненияОстатков,
	|	ДанныеРасходаМатериалов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	|	ДанныеРасходаМатериалов.Номенклатура.Представление,
	|	ДанныеРасходаМатериалов.ХарактеристикаНоменклатуры.Представление,
	|	ДанныеРасходаМатериалов.СерияНоменклатуры.Представление,
	|	ДанныеРасходаМатериалов.СтатьяЗатрат.Представление
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРаспределенияМатериалов.Номенклатура КАК Номенклатура,
	|	ДанныеРаспределенияМатериалов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДанныеРаспределенияМатериалов.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДанныеРаспределенияМатериалов.Спецификация КАК Спецификация,
	|	ДанныеРаспределенияМатериалов.Количество,
	|	ДанныеРаспределенияМатериалов.Продукция КАК Продукция,
	|	ДанныеРаспределенияМатериалов.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|	ДанныеРаспределенияМатериалов.СерияПродукции КАК СерияПродукции,
	|	ДанныеРаспределенияМатериалов.СтатьяЗатрат,
	|	ДанныеРаспределенияМатериалов.ЕдиницаИзмерения,
	|	ДанныеРаспределенияМатериалов.Коэффициент,
	|	ДанныеРаспределенияМатериалов.НоменклатурнаяГруппа,
	|	ДанныеРаспределенияМатериалов.Номенклатура.Представление КАК НоменклатураПредставление,
	|	ДанныеРаспределенияМатериалов.ХарактеристикаНоменклатуры.Представление КАК ХарактеристикаНоменклатурыПредставление,
	|	ДанныеРаспределенияМатериалов.СерияНоменклатуры.Представление КАК СерияНоменклатурыПредставление,
	|	ДанныеРаспределенияМатериалов.Спецификация.Представление КАК СпецификацияПредставление,
	|	ДанныеРаспределенияМатериалов.Продукция.Представление КАК ПродукцияПредставление,
	|	ДанныеРаспределенияМатериалов.ХарактеристикаПродукции.Представление КАК ХарактеристикаПродукцииПредставление,
	|	ДанныеРаспределенияМатериалов.СерияПродукции.Представление КАК СерияПродукцииПредставление,
	|	ДанныеРаспределенияМатериалов.СтатьяЗатрат.Представление КАК СтатьяЗатратПредставление,
	|	ДанныеРаспределенияМатериалов.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
	|	ДанныеРаспределенияМатериалов.НоменклатурнаяГруппа.Представление КАК НоменклатурнаяГруппаПредставление
	|ИЗ
	|	ДанныеРаспределенияМатериалов КАК ДанныеРаспределенияМатериалов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	Продукция,
	|	ХарактеристикаПродукции,
	|	СерияПродукции,
	|	Спецификация
	|АВТОУПОРЯДОЧИВАНИЕ";

	//Запросы удаления временных таблиц.
	//Таблицы удаляем принудительно, так как они создаются в цикле
	ЗапросУдалитьВыпуск = Новый Запрос("УНИЧТОЖИТЬ ДанныеВыпуска");
	ЗапросУдалитьВыпуск.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросУдалитьМатериалы = Новый Запрос("УНИЧТОЖИТЬ ДанныеРасходаМатериалов; УНИЧТОЖИТЬ ДанныеРаспределенияМатериалов");
	ЗапросУдалитьМатериалы.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	#Если Клиент Тогда
	//Если документов больше двух, то покажем индикатор процесса
	Если ВыборкаКлючейДокументов.Количество()>2 Тогда
		ФормаИндикатора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		ФормаИндикатора.МаксимальноеЗначение		= ВыборкаКлючейДокументов.Количество();
		ФормаИндикатора.КомментарийОбработкиДанных	= "Формирование документов";
		ФормаИндикатора.НаименованиеОбработкиДанных	= "Формирование документов";
		ФормаИндикатора.Открыть();
	Иначе
		ФормаИндикатора = Неопределено;
	КонецЕсли;
	#КонецЕсли
	
	// ОСОБЕННОСТИ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ РАЗНЫХ ВИДОВ
	ОтразитьМатериалы  = 
		РегламентФормированияДокументовВыпуска_ЗаполнятьМатериалы(Настройка.ВидРегулярногоДокумента)
		И Настройка.ОтразитьМатериалы;
	Если Настройка.ВидРегулярногоДокумента = "ОтчетПроизводстваЗаСмену" Тогда
		ТабличныеЧастиСоСчетами = Новый Структура("Продукция,РаспределениеМатериалов");
		ЕстьСчетаВШапке         = Ложь;
	Иначе
		ТабличныеЧастиСоСчетами = Новый Структура("Продукция");
		ЕстьСчетаВШапке         = Истина;
	КонецЕсли;
	
	//Получим не зависящие от результатов запросов данные
	ОсновнойОтветственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
		глЗначениеПеременной("глТекущийПользователь"), 
		"ОсновнойОтветственный");
		
	КонстантыДляЗаполнения = Новый Структура();
	КонстантыДляЗаполнения.Вставить("Ответственный",                ОсновнойОтветственный);
	КонстантыДляЗаполнения.Вставить("ВводитьСтатьиЗатратПоСтрокам", Истина);
	КонстантыДляЗаполнения.Вставить("ИспользоватьМатериалы",        ОтразитьМатериалы);
	КонстантыДляЗаполнения.Вставить("Комментарий",                  "Заполнено данными по отчетам мастера смены");
	
	Пока ВыборкаКлючейДокументов.Следующий() Цикл
		
		//Получим исходные данные для заполнения документа.
		
		//Параметрами запросов будут значения ключа формируемого документа.
		КлючДокумента = Новый Структура("Дата,Подразделение");
		ЗаполнитьЗначенияСвойств(КлючДокумента, ВыборкаКлючейДокументов);
		
		//Запрос по выпуску отражаем всегда, так как он нужен и для заполнения материалов тоже (формирует временную таблицу, используемую в запросе материалов)
		ЗаполнитьЗначенияПараметровЗапроса(ЗапросВыпуск, 	КлючДокумента);
		ДанныеВыпуск 					= ЗапросВыпуск.Выполнить();
		
		Если ОтразитьМатериалы Тогда
			ЗаполнитьЗначенияПараметровЗапроса(ЗапросМатериалы, КлючДокумента);
		 	МассивРезультатов 				= ЗапросМатериалы.ВыполнитьПакет();
			ДанныеРаспределениеМатериалов	= МассивРезультатов[3];
			ДанныеМатериалы					= МассивРезультатов[2];
		КонецЕсли;
		
		//Удаляем временные таблицы
		ЗапросУдалитьВыпуск.Выполнить();
		Если ОтразитьМатериалы Тогда
			ЗапросУдалитьМатериалы.Выполнить();
		КонецЕсли;
		
		// СОЗДАЕМ ДОКУМЕНТ И ЗАПОЛНЯЕМ ЕГО
		
		НовыйДокумент = Документы[Настройка.ВидРегулярногоДокумента].СоздатьДокумент();
		
		//Заполняем документ данными запросов и общих реквизитов (т.е. данными подсистемы Оперативного учета производства)
		ЗаполнитьЗначенияСвойств(НовыйДокумент, Настройка, "Организация,ПодразделениеОрганизации,Склад,ОтражатьВУправленческомУчете,ОтражатьВБухгалтерскомУчете");
		Если Настройка.ОтразитьВыпуск Тогда
			НовыйДокумент.Продукция.Загрузить(ДанныеВыпуск.Выгрузить());
		КонецЕсли;
		
		Если ОтразитьМатериалы Тогда
			НовыйДокумент.Материалы.Загрузить(ДанныеМатериалы.Выгрузить());
			НовыйДокумент.РаспределениеМатериалов.Загрузить(ДанныеРаспределениеМатериалов.Выгрузить());
		КонецЕсли;
		
		//Дозаполняем документ данными ключа
		ЗаполнитьЗначенияСвойств(НовыйДокумент, КлючДокумента);
		
		//Дозаполняем документ константами
		ЗаполнитьЗначенияСвойств(НовыйДокумент, КонстантыДляЗаполнения);
		
		//Дозаполняем документ внешними по отношению к подсистеме данными
		
		Если НовыйДокумент.ОтражатьВБухгалтерскомУчете Тогда
			
			//подразделение организации (может быть задано Настройкой)
			Если НовыйДокумент.ПодразделениеОрганизации.Пустая() Тогда
				НовыйДокумент.ПодразделениеОрганизации = УправлениеЗатратами.ПолучитьПодразделениеОрганизации(НовыйДокумент.Организация, НовыйДокумент.Подразделение, Истина);
			КонецЕсли;
		
			// счета учета затрат в шапке документа
			Если ЕстьСчетаВШапке Тогда
				НовыйДокумент.ЗаполнитьСчетаУчетаВШапке();
			КонецЕсли;
			
			// счета учета номенклатуры
			Для Каждого ДанныеТЧ Из ТабличныеЧастиСоСчетами Цикл
				НовыйДокумент.ЗаполнитьСчетаУчетаВТабЧасти(НовыйДокумент[ДанныеТЧ.Ключ], ДанныеТЧ.Ключ, НовыйДокумент.ОтражатьВБухгалтерскомУчете);
			КонецЦикла;
			
		КонецЕсли;
		
		//Сохраняем документ
		Сообщение = "Ошибка при записи документа " + НовыйДокумент.Метаданные().Синоним + ": ";
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись); //здесь только записываем, проводим отдельно
		Исключение
			
			Ошибка = Сообщение + ОписаниеОшибки();
			
			#Если Клиент Тогда
			Если ФормаИндикатора <> Неопределено Тогда
				ФормаИндикатора.Закрыть();
			КонецЕсли;
			#КонецЕсли	
		
			Возврат Ложь;//При первой же ошибке прекращаем обработку.

		КонецПопытки;
		
		//Запоминаем созданный документ
		СформированныеДокументы.Добавить(НовыйДокумент.Ссылка);
		
		//При необходимости этими же данными можем заполнить и документы другого вида
		
		//Обновим индикатор выполнения
		#Если Клиент Тогда
		Если ФормаИндикатора <> Неопределено Тогда
			ФормаИндикатора.КомментарийЗначения = "" + НовыйДокумент.Ссылка;
			ФормаИндикатора.Значение 			= ФормаИндикатора.Значение + 1;
			ОбработкаПрерыванияПользователя();
		КонецЕсли;
		#КонецЕсли	
		
	КонецЦикла;
	
	#Если Клиент Тогда
	Если ФормаИндикатора <> Неопределено Тогда
		ФормаИндикатора.Закрыть();
	КонецЕсли;
	#КонецЕсли	

	Возврат Истина;
	
КонецФункции

//Возвращает массив документов, входящих в переданный массив сформированных по данному настройке 
//документов (ПроверяемыеДокументы), которые требуют проведения в соответствии с логикой 
//отражения операций по данной настройке .
Функция РегламентФормированияДокументовВыпуска_ПолучитьМассивДокументовДляПроведения(Настройка, ПроверяемыеДокументы)
	
	//Все документы, сформированные в рамках данного регламента требуют проведения
	Возврат ПроверяемыеДокументы;
	
КонецФункции

//Возвращает массив документов, входящих в переданный массив учтенных данным регламентом 
//документов (ПроверяемыеДокументы), которые требуют удаления в соответствии с логикой 
//отражения операций по данному настройке.
Функция РегламентФормированияДокументовВыпуска_ПолучитьМассивДокументовДляУдаления(Настройка, ПроверяемыеДокументы)
	
	Если Настройка.ВидРегулярногоДокумента = "ОтчетПроизводстваЗаСмену" 
		И Настройка.ОтразитьМатериалы
		И Настройка.ОтражатьВУправленческомУчете Тогда
		// Документы, на основании которых формируются ОПЗС, отражающие выпуск в Упр. учете, 
		// подлежат удалению для формирования корректных движений по регистру МатериалыВПроизводстве
		Возврат ПроверяемыеДокументы;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТ ФОРМИРОВАНИЯ ДОКУМЕНТОВ ПО ОРДЕРАМ

// Функция, производящая непосредственное формирование документов.
//
// Параметры
//  Настройка     - ссылка на настройку
//	ДатаНачала	  - дата начала выборки документов;
//	ДатаОкончания - дата окончания выборки документов;
//  Ошибка        - в параметр будет возвращен текст ошибки (если формирование документов завершится с ошибкой)
//	СформированныеДокументы	- в параметр будет возвращен массив сформированных документов;
//	УчтенныеДокументы		- в параметр будет возвращен массив учтенных документов (т.е. тех, по данным которых сформированы документы).
//
// Возвращаемое значение
//  Истина - сформировано без ошибок
//  Ложь   - при формировании документов произошли ошибки
//
Функция РегламентФормированияДокументовПоОрдерам_СформироватьДокументы(Настройка, ДатаНачала, ДатаОкончания, 
	    Ошибка = "", СформированныеДокументы = Неопределено, УчтенныеДокументы = Неопределено)
	
	//На основании указанных в настройке параметров будут созданы документы "ПТиУ" или "РТиУ".
	
	СформированныеДокументы	=	Новый Массив;
	УчтенныеДокументы		=	Новый Массив;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц(); //используется для всех запросов функции
	
	//Получим перечень документов для обработки в соответствии с фильтрами
	Запрос = Новый Запрос();
	
	//Определим аргумент функции КонецПериода в зависимости от периодичности
	ОписаниеПериодаДетализации = Строка(Настройка.ПериодДетализации);
	
	//Получим список обрабатываемых ордеров в соответствии с отбором в настройке и поместим его в массив
	СхемаКомпоновкиДанных = Справочники.НастройкиФормированияДокументовПоОрдерам.ПолучитьМакет("Настройка"); 
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, Настройка.НастройкиКомпоновщика.Получить());
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.СписокОрдеров.Запрос);
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетКомпоновкиДанных.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
	КонецЦикла;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Попытка
		ТаблицаОрдеров = Запрос.Выполнить().Выгрузить();
	Исключение
		Ошибка = "Не удалось получить данные для формирования документов: "+ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	Если ТаблицаОрдеров.Количество() = 0 Тогда
		Ошибка = "Не обнаружены данные для обработки";
		Возврат Ложь;
	КонецЕсли;
	
	//Запрос обрабатывает данные ордеров для создания документов ПТиУ или РТиУ
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаОрдеров", ТаблицаОрдеров);
	Запрос.УстановитьПараметр("ГраницаНачала", 		ДатаНачала);
	Запрос.УстановитьПараметр("ГраницаОкончания", 	КонецДня(ДатаОкончания));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	//	Порядок запросов в пакете важен, так как потом выполняем его методом ВыполнитьПакет()
	Запрос.Текст = "
	|ВЫБРАТЬ *
	|ПОМЕСТИТЬ ВременнаяТаблицаОрдеров
	|ИЗ 
	|	&ТаблицаОрдеров КАК ТаблицаОрдеров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОрдеров.СкладскойОрдер.Ссылка КАК Ссылка,
	|	ВременнаяТаблицаОрдеров.СкладскойОрдер.Организация КАК Организация,
	|	ВременнаяТаблицаОрдеров.СкладскойОрдер.Склад КАК Склад,
	|	ВременнаяТаблицаОрдеров.СкладскойОрдер.Контрагент КАК Контрагент,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА КОНЕЦПЕРИОДА(ВременнаяТаблицаОрдеров.СкладскойОрдер.Дата, "+ОписаниеПериодаДетализации+") > &ГраницаОкончания
	|				ТОГДА &ГраницаОкончания
	|			КОГДА КОНЕЦПЕРИОДА(ВременнаяТаблицаОрдеров.СкладскойОрдер.Дата, "+ОписаниеПериодаДетализации+") > КОНЕЦПЕРИОДА(ВременнаяТаблицаОрдеров.СкладскойОрдер.Дата, МЕСЯЦ)
	|				ТОГДА КОНЕЦПЕРИОДА(ВременнаяТаблицаОрдеров.СкладскойОрдер.Дата, МЕСЯЦ)
	|			ИНАЧЕ КОНЕЦПЕРИОДА(ВременнаяТаблицаОрдеров.СкладскойОрдер.Дата, "+ОписаниеПериодаДетализации+")
	|		КОНЕЦ, ДЕНЬ) КАК Дата,
	|	ВЫБОР 
	|		КОГДА ВременнаяТаблицаОрдеров.СкладскойОрдер ССЫЛКА Документ.ПриходныйОрдерНаТовары ТОГДА
	|			ВременнаяТаблицаОрдеров.СкладскойОрдер.ЗаказПоставщику
	|		КОГДА ВременнаяТаблицаОрдеров.СкладскойОрдер ССЫЛКА Документ.РасходныйОрдерНаТовары 
	|			И ВременнаяТаблицаОрдеров.СкладскойОрдер.ДокументПередачи ССЫЛКА Документ.ЗаказПокупателя ТОГДА
	|			ВременнаяТаблицаОрдеров.СкладскойОрдер.ДокументПередачи
	|		ИНАЧЕ NULL 
	|	КОНЕЦ 												КАК Заказ
	|ПОМЕСТИТЬ ДокументыИсточники
	|ИЗ
	|	ВременнаяТаблицаОрдеров КАК ВременнаяТаблицаОрдеров
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыИсточники.Ссылка 	КАК Документ,
	|	ДокументыИсточники.Дата 	КАК Дата
	|ИЗ
	|	ДокументыИсточники КАК ДокументыИсточники
	|УПОРЯДОЧИТЬ ПО Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыИсточники.Дата 							КАК Дата,
	|	ДокументыИсточники.Организация 						КАК Организация,
	|	ДокументыИсточники.Склад 							КАК Склад,
	|	ДокументыИсточники.Контрагент 						КАК Контрагент,
	|	ВЫБОР 
	|		КОГДА ДокументыИсточники.Ссылка ССЫЛКА Документ.ПриходныйОрдерНаТовары ТОГДА
	|			ДокументыИсточники.Ссылка.ЗаказПоставщику
	|		КОГДА ДокументыИсточники.Ссылка ССЫЛКА Документ.РасходныйОрдерНаТовары 
	|			И ДокументыИсточники.Ссылка.ДокументПередачи ССЫЛКА Документ.ЗаказПокупателя ТОГДА
	|			ДокументыИсточники.Ссылка.ДокументПередачи
	|		ИНАЧЕ NULL 
	|	КОНЕЦ 												КАК Заказ
	|	
	|ИЗ
	|	ДокументыИсточники КАК ДокументыИсточники
	|УПОРЯДОЧИТЬ ПО Дата
	|;";
	
	Попытка
		РезультатыЗапросов 				= Запрос.ВыполнитьПакет();
	Исключение
		Ошибка = "Не удалось получить данные для формирования документов: "+ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Третий запрос пакета содержит выборку документов-источников заполнения
	//Запоминаем документы, на основании которых проводим заполнение.
	УчтенныеДокументы = РезультатыЗапросов[2].Выгрузить().ВыгрузитьКолонку("Документ");
	
	//Четвертый запрос пакета содержит выборку по ключевым полям создаваемых документов
	ВыборкаКлючейДокументов = РезультатыЗапросов[3].Выбрать();
	
	//Подготовим запросы для получения данных о номенклатуре указанной в ордерах
	
	ЗапросТовары = Новый Запрос();
	ЗапросТовары.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросТовары.Текст = 
	"ВЫБРАТЬ
	|	СкладскойОрдер.Номенклатура КАК Номенклатура,
	|	СкладскойОрдер.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СкладскойОрдер.СерияНоменклатуры КАК СерияНоменклатуры,
	|	СкладскойОрдер.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	СкладскойОрдер.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	СкладскойОрдер.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	МИНИМУМ(СкладскойОрдер.Цена) КАК Цена,
	|	СУММА(СкладскойОрдер.Количество * СкладскойОрдер.Коэффициент / СкладскойОрдер.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК Количество
	|ИЗ
	|(
	|	ВЫБРАТЬ 
	|		ПриходныйОрдерТовары.Номенклатура,
	|		ПриходныйОрдерТовары.ХарактеристикаНоменклатуры,
	|		ПриходныйОрдерТовары.СерияНоменклатуры,
	|		ПриходныйОрдерТовары.Количество,
	|		ПриходныйОрдерТовары.Коэффициент,
	|		ВЫБОР КОГДА &Заказ = NULL ТОГДА 0
	|		ИНАЧЕ
	|			ЕстьNULL(ОстаткиЗаказы.Цена, 0) * ПриходныйОрдерТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ЕстьNULL(ОстаткиЗаказы.ЕдиницаИзмерения.Коэффициент, 1)
	|		КОНЕЦ КАК Цена
	|	ИЗ Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(,ЗаказПоставщику = &Заказ) КАК ОстаткиЗаказы
	|		ПО ОстаткиЗаказы.Номенклатура = ПриходныйОрдерТовары.Номенклатура
	|			И ОстаткиЗаказы.ХарактеристикаНоменклатуры = ПриходныйОрдерТовары.ХарактеристикаНоменклатуры
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ДокументыИсточники КАК ДокументыИсточники
	|		ПО ПриходныйОрдерТовары.Ссылка = ДокументыИсточники.Ссылка
	|	ГДЕ
	|		ДокументыИсточники.Дата = &Дата
	|		И ДокументыИсточники.Склад = &Склад
	|		И ДокументыИсточники.Организация = &Организация
	|		И ДокументыИсточники.Контрагент = &Контрагент
	|		И ДокументыИсточники.Заказ = &Заказ
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ 
	|		РасходныйОрдерТовары.Номенклатура,
	|		РасходныйОрдерТовары.ХарактеристикаНоменклатуры,
	|		РасходныйОрдерТовары.СерияНоменклатуры,
	|		РасходныйОрдерТовары.Количество,
	|		РасходныйОрдерТовары.Коэффициент,
	|		ВЫБОР КОГДА &Заказ = NULL ТОГДА 0
	|		ИНАЧЕ
	|			ЕстьNULL(ОстаткиЗаказы.Цена, 0) * РасходныйОрдерТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ЕстьNULL(ОстаткиЗаказы.ЕдиницаИзмерения.Коэффициент, 1)
	|		КОНЕЦ КАК Цена
	|	ИЗ Документ.РасходныйОрдерНаТовары.Товары КАК РасходныйОрдерТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(,ЗаказПокупателя = &Заказ) КАК ОстаткиЗаказы
	|		ПО ОстаткиЗаказы.Номенклатура = РасходныйОрдерТовары.Номенклатура
	|			И ОстаткиЗаказы.ХарактеристикаНоменклатуры = РасходныйОрдерТовары.ХарактеристикаНоменклатуры
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыИсточники КАК ДокументыИсточники
	|		ПО РасходныйОрдерТовары.Ссылка = ДокументыИсточники.Ссылка
	|)	КАК СкладскойОрдер
	|
	|СГРУППИРОВАТЬ ПО
	|	СкладскойОрдер.Номенклатура,
	|	СкладскойОрдер.ХарактеристикаНоменклатуры,
	|	СкладскойОрдер.СерияНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	СУММА(СкладскойОрдер.Количество * СкладскойОрдер.Коэффициент / СкладскойОрдер.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) > 0
	|";
	
	#Если Клиент Тогда
	//Если документов больше двух, то покажем индикатор процесса
	Если ВыборкаКлючейДокументов.Количество()>2 Тогда
		ФормаИндикатора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		ФормаИндикатора.МаксимальноеЗначение		= ВыборкаКлючейДокументов.Количество();
		ФормаИндикатора.КомментарийОбработкиДанных	= "Формирование документов";
		ФормаИндикатора.НаименованиеОбработкиДанных	= "Формирование документов";
		ФормаИндикатора.Открыть();
	Иначе
		ФормаИндикатора = Неопределено;
	КонецЕсли;
	#КонецЕсли
	
	//Получим не зависящие от результатов запросов данные
	ОсновнойОтветственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ВидДокумента = Настройка.ВидРегулярногоДокумента;
	МетаданныеДокумента = Документы[ВидДокумента].СоздатьДокумент().Метаданные();
	Если ВидДокумента = "ПоступлениеТоваровУслуг" Тогда
		СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
	ИначеЕсли ВидДокумента = "РеализацияТоваровУслуг" Тогда
		СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	КонецЕсли;
	ШаблонДокумента = Настройка.ШаблонРегулярногоДокумента;
	
	// Структура реквизитов для заполнения цен.
	СтруктураРеквизитовДокументаДляЦенообразования = Новый Структура;
	СтруктураРеквизитовДокументаДляЦенообразования.Вставить("ТипЦен");
	СтруктураРеквизитовДокументаДляЦенообразования.Вставить("ВалютаДокумента");
	СтруктураРеквизитовДокументаДляЦенообразования.Вставить("КурсВзаиморасчетов");
	СтруктураРеквизитовДокументаДляЦенообразования.Вставить("КратностьВзаиморасчетов");
	СтруктураРеквизитовДокументаДляЦенообразования.Вставить("УчитыватьНДС");
	СтруктураРеквизитовДокументаДляЦенообразования.Вставить("СуммаВключаетНДС");
	Если ВидДокумента = "ПоступлениеТоваровУслуг" Тогда
		СтруктураРеквизитовДокументаДляЦенообразования.Вставить("НДСВключенВСтоимость");
	КонецЕсли;
	Если ВидДокумента = "ПоступлениеТоваровУслуг" Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	КонецЕсли;

	Пока ВыборкаКлючейДокументов.Следующий() Цикл
		
		//Получим исходные данные для заполнения документа.
		
		//Параметрами запросов будут значения ключа формируемого документа.
		КлючДокумента = Новый Структура("Дата,Организация,Склад,Контрагент,Заказ");
		ЗаполнитьЗначенияСвойств(КлючДокумента, ВыборкаКлючейДокументов);
		
		ЗаполнитьЗначенияПараметровЗапроса(ЗапросТовары, 	КлючДокумента);
		ДанныеТовары 					= ЗапросТовары.Выполнить();
		
		//ДОКУМЕНТ "ПТИУ" / "РТИУ"
		
		НовыйДокумент = Документы[ВидДокумента].СоздатьДокумент();
		
		//По ключам документа заполняем реквизиты шапки
		ЗаполнитьЗначенияСвойств(НовыйДокумент, КлючДокумента);
		
		//Если в настройке указан шаблон - реквизиты шапки возьмем из шаблона
		Если ЗначениеЗаполнено(ШаблонДокумента) Тогда
			Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
				Если ЗначениеЗаполнено(ШаблонДокумента[Реквизит.Имя]) Тогда
					НовыйДокумент[Реквизит.Имя] = ШаблонДокумента[Реквизит.Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//Признаки отражения в учете берем из настройки
		ЗаполнитьЗначенияСвойств(НовыйДокумент, Настройка, "ОтражатьВУправленческомУчете,ОтражатьВБухгалтерскомУчете");
		
		НовыйДокумент.Дата = КлючДокумента.Дата;
		Если ЗначениеЗаполнено(КлючДокумента.Заказ) И НЕ ЗначениеЗаполнено(НовыйДокумент.Сделка) Тогда
			НовыйДокумент.Сделка = КлючДокумента.Заказ;
		КонецЕсли;

		НовыйДокумент.Ответственный = ОсновнойОтветственный;
		НовыйДокумент.Комментарий	= "Заполнено по ордерам";
		//Заполняем реквизиты, специфические для вида документа
		Если ВидДокумента = "ПоступлениеТоваровУслуг" Тогда
			НовыйДокумент.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
			НовыйДокумент.СкладОрдер = КлючДокумента.Склад;
			НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		ИначеЕсли ВидДокумента = "РеализацияТоваровУслуг" Тогда
			НовыйДокумент.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
			НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		КонецЕсли;
		//Заполняем реквизиты шапки, зависимые от других реквизитов
		
		Если ЗначениеЗаполнено(НовыйДокумент.Сделка) Тогда
			ЗаполнитьЗначенияСвойств(НовыйДокумент, НовыйДокумент.Сделка, "Контрагент, ДоговорКонтрагента, ВалютаДокумента, ТипЦен, Организация, УчитыватьНДС, СуммаВключаетНДС");
		Иначе
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
				НовыйДокумент.ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(НовыйДокумент.Организация, НовыйДокумент.Контрагент, СтруктураПараметровДляПолученияДоговора);
			КонецЕсли;

			Если ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
				Если НЕ ЗначениеЗаполнено(НовыйДокумент.ТипЦен) Тогда
					НовыйДокумент.ТипЦен = НовыйДокумент.ДоговорКонтрагента.ТипЦен;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(НовыйДокумент.Организация) Тогда
					НовыйДокумент.Организация = НовыйДокумент.ДоговорКонтрагента.Организация;
				КонецЕсли;
			КонецЕсли;
			ОрганизацияПлательщикНДС = НалоговыйУчет.ПолучитьСхемуНалогообложения(НовыйДокумент.Дата, НовыйДокумент.Организация).НДС;
			
			Если ЗначениеЗаполнено(НовыйДокумент.Организация) И НЕ НовыйДокумент.УчитыватьНДС Тогда
				ОрганизацияПлательщикНДС = НалоговыйУчет.ПолучитьСхемуНалогообложения(НовыйДокумент.Дата, НовыйДокумент.Организация).НДС;
				НовыйДокумент.УчитыватьНДС = ОрганизацияПлательщикНДС;
			КонецЕсли;
			Если НовыйДокумент.УчитыватьНДС И НЕ НовыйДокумент.СуммаВключаетНДС И ЗначениеЗаполнено(НовыйДокумент.ТипЦен) Тогда
				// Если ТипЦен - элемент справочника ТипыЦенНоменклатуры и цены выбранного типа расчетные, 
				// то флаги включения налогов надо брать из базовой цены
				Если ТипЗнч(НовыйДокумент.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") И НовыйДокумент.ТипЦен.Рассчитывается Тогда
					флСуммаВключаетНДС = НовыйДокумент.ТипЦен.БазовыйТипЦен.ЦенаВключаетНДС;
				Иначе
					флСуммаВключаетНДС = НовыйДокумент.ТипЦен.ЦенаВключаетНДС;
				КонецЕсли;
				НовыйДокумент.СуммаВключаетНДС = флСуммаВключаетНДС И НовыйДокумент.УчитыватьНДС;
			КонецЕсли;
			Если НовыйДокумент.УчитыватьНДС И ВидДокумента = "РеализацияТоваровУслуг" Тогда
				НовыйДокумент.АвторасчетНДС = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.ВалютаДокумента) Тогда
				НовыйДокумент.ВалютаДокумента = НовыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов, НовыйДокумент.Дата);
			НовыйДокумент.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;
			НовыйДокумент.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		КонецЕсли;
		
		НовыйДокумент.Товары.Загрузить(ДанныеТовары.Выгрузить());
		
		//Заполнение цен
		Если ЗначениеЗаполнено(НовыйДокумент.Сделка) Тогда
			//Цены в табличной части заполняются по заказу. Необходимо рассчитать сумму и сумму НДС
			Для Каждого СтрокаТабличнойЧасти ИЗ НовыйДокумент.Товары Цикл
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НовыйДокумент);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, НовыйДокумент);
				Если ВидДокумента = "РеализацияТоваровУслуг" Тогда
					СтрокаТабличнойЧасти.ЗаказПокупателя = НовыйДокумент.Сделка;
					СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				ИначеЕсли ВидДокумента = "ПоступлениеТоваровУслуг" Тогда
					СтрокаТабличнойЧасти.ЗаказПоставщику = НовыйДокумент.Сделка;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЗначениеЗаполнено(НовыйДокумент.ТипЦен) Тогда
			СтруктураЗначений = Новый Структура();
			Для Каждого ЭлементСтруктурыЦенообразование ИЗ СтруктураРеквизитовДокументаДляЦенообразования Цикл
				СтруктураЗначений.Вставить("Текущий"+ЭлементСтруктурыЦенообразование.Ключ, НовыйДокумент[ЭлементСтруктурыЦенообразование.Ключ]);
				СтруктураЗначений.Вставить("Новый"+ЭлементСтруктурыЦенообразование.Ключ, НовыйДокумент[ЭлементСтруктурыЦенообразование.Ключ]);
			КонецЦикла;
			СтруктураЗначений.Вставить("ТекущийКурсДокумента", НовыйДокумент.КурсВзаиморасчетов);
			СтруктураЗначений.Вставить("НовыйКурсДокумента", НовыйДокумент.КурсВзаиморасчетов);
			СтруктураЗначений.Вставить("ТекущийКратностьДокумента", НовыйДокумент.КратностьВзаиморасчетов);
			СтруктураЗначений.Вставить("НовыйКратностьДокумента", НовыйДокумент.КратностьВзаиморасчетов);
			СтруктураЗначений.Вставить("ПерезаполнитьЦеныПоТипу", Истина);
			СтруктураЗначений.Вставить("ПересчитатьЦеныПоВалюте", Истина);
			ЗаполнениеДокументов.ИзменитьЦеныВалюту(НовыйДокумент, СпособЗаполненияЦен, СтруктураРеквизитовДокументаДляЦенообразования, Неопределено, "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);
		КонецЕсли;
		
		Если НовыйДокумент.ОтражатьВБухгалтерскомУчете Тогда
			//счета учета номенклатуры в ТЧ
			НовыйДокумент.ЗаполнитьСчетаУчетаВТабЧасти(НовыйДокумент.Товары, "Товары", НовыйДокумент.ОтражатьВБухгалтерскомУчете);
			//счета в шапке
			ЗаполнитьЗначенияСвойств(НовыйДокумент, НовыйДокумент.ЗаполнитьСтруктуруСчетовУчетаШапки(НовыйДокумент.ОтражатьВБухгалтерскомУчете));
		КонецЕсли;
		
		//Сохраняем документ
		Сообщение = "Ошибка при записи документа " + НовыйДокумент.Метаданные().Синоним + ": ";
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись); //здесь только записываем, проводим отдельно
		Исключение
			
			Ошибка = Ошибка + Сообщение + ОписаниеОшибки();
			
			#Если Клиент Тогда
			Если ФормаИндикатора <> Неопределено Тогда
				ФормаИндикатора.Закрыть();
			КонецЕсли;
			#КонецЕсли	
		
			Возврат Ложь;//При первой же ошибке прекращаем обработку.

		КонецПопытки;
		
		//Запоминаем созданный документ
		СформированныеДокументы.Добавить(НовыйДокумент.Ссылка);
		
		//Обновим индикатор выполнения
		#Если Клиент Тогда
		Если ФормаИндикатора <> Неопределено Тогда
			ФормаИндикатора.КомментарийЗначения = "" + НовыйДокумент.Ссылка;
			ФормаИндикатора.Значение 			= ФормаИндикатора.Значение + 1;
			ОбработкаПрерыванияПользователя();
		КонецЕсли;
		#КонецЕсли	
		
	КонецЦикла;
	
	#Если Клиент Тогда
	Если ФормаИндикатора <> Неопределено Тогда
		ФормаИндикатора.Закрыть();
	КонецЕсли;
	#КонецЕсли	

	Возврат Истина;
	
КонецФункции

// Определяет дату окончания следующего периода формирования документов
// 
// Параметры
//	Настройка 		- ссылка на настройку
//
// Возвращаемое значение
//	Дата окончания периода
Функция РегламентФормированияДокументовПоОрдерам_ПолучитьДатуОкончанияПериодаФормированияДокументов(Настройка)
	
	Если Настройка.НеОбрабатыватьВсеДокументы Тогда
		
		Сутки = 24 * 60 * 60;
		Возврат НачалоДня(ТекущаяДата()) - Настройка.Задержка * Сутки - 1;
		
	Иначе
		
		Возврат ТекущаяДата();
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С РЕГЛАМЕНТАМИ

// Получает экземпляр регламента.
// Под экземпляром регламента понимается нечто, определяющее логику и настройки
// формирования документов.
// Для реализованных способов формирования экземпляр регламента - ссылка на настройку
// (логика формирования документов определяется типом справочника, а параметры - значениями его реквизитов).
// 
// Метод предусмотрен для возможности расширения способов формирования документов.
// Например, методы для формирования документов и получения параметров могут быть реализованы в виде внешней обработки.
// В этом случае метод может возвращать объект внешней обработки.
//
// Сейчас в качестве экземпляра регламента всегда возвращается ссылка на переданную настройку.
//
// Параметры
//  Настройка - ссылка на настройку
//
// Возвращаемое значение
//  Экземпляр регламента
Функция ПолучитьЭкземплярРегламента(Настройка) Экспорт
	
	Возврат Настройка;
		
КонецФункции

// Определяет дату начала периода, по которому должны формироваться документы по настройке.
// 
// Параметры
//	Настройка - ссылка на настройку
//
// Возвращаемое значение
//	Дата
Функция ПолучитьДатуНачалаСледующегоПериодаФормированияДокументов(Настройка) Экспорт
	
	Если Настройка.ГраницаОбработки = '0001-01-01' Тогда
		Возврат '0001-01-01';
	Иначе
		Возврат КонецДня(Настройка.ГраницаОбработки) + 1;
	КонецЕсли;
	
КонецФункции

// Устанавливает новый период формирования документов.
//
// Параметры
//  Настройка - ссылка на справочник, содержащий настройку формирования документов
//  ГраницаОбработки - дата, на которую будет установлена граница формирования документов
//  Ошибка - при возникновении ошибки в параметр будет возвращен текст сообщения об ошибке
// 
// Возвращаемое значение
//  Истина - выполнено успешно
//  Ложь - ошибка при записи 
Функция УстановитьПериодФормированияДокументов(Настройка, ГраницаОбработки, Ошибка = "") Экспорт
	
	ОбъектНастройки = Настройка.ПолучитьОбъект();
	ОбъектНастройки.ГраницаОбработки = ГраницаОбработки;
	
	Попытка
		ОбъектНастройки.Заблокировать();
		ОбъектНастройки.Записать();
	Исключение
		Ошибка = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Фиксирует результат выполнения регламентного задания РегламентноеФормированиеДокументов в журнале регистрации
//
// Параметры
//  Настройка - настройка, по которой формируются документы
//  Сообщение - текст сообщения
//  Ошибка - выполнение завершилось ошибкой
Процедура ЗаписатьРезультатРегламентногоФормированияДокументов(Настройка, Сообщение, Ошибка = Ложь)
	
	ЗаписьЖурналаРегистрации(
	"Регламентное формирование документов", 
	?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация),
	Метаданные.РегламентныеЗадания.РегламентноеФормированиеДокументов,
	Настройка,
	Сообщение,
	?(ТранзакцияАктивна(), РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая));
	
КонецПроцедуры

// Метод регламентного задания РегламентноеФормированиеДокументов
//
// Параметры
//  Настройка - ссылка на элемент справочника НастройкиФормированияДокументовВыпускаПродукции либо НастройкиФормированияДокументовПоОрдерам
//
Процедура РегламентноеФормированиеДокументов(Настройка) Экспорт
	
	// Убедимся, что ссылка соответствует существующему объекту
	Попытка
		ОбъектНастройки = Настройка.ПолучитьОбъект();
	Исключение
		ВызватьИсключение "Ошибка при получении настройки, связанной с регламентным заданием: " + ОписаниеОшибки();
	КонецПопытки;
	
	// Проверим, что по настройке включено автоматическое формирование
	Если НЕ Настройка.ФормироватьДокументыАвтоматически Тогда
		ЗаписатьРезультатРегламентногоФормированияДокументов(Настройка, "Для настройки, связанной с регламентным заданием, автоматическое формирование документов отключено", Истина);
		Возврат;
	КонецЕсли;
	
	// Заблокируем объект настройки
	ОбъектНастройки.Заблокировать();
	
	// Получим период формирования документов
	ДатаНачалаПериода    = ПолучитьДатуНачалаСледующегоПериодаФормированияДокументов(Настройка);
	
	// Убедимся, что наступил новый период формирования
	Если НачалоДня(ТекущаяДата()) <= ДатаНачалаПериода Тогда
		ЗаписатьРезультатРегламентногоФормированияДокументов(Настройка, "Следующий период формирования документов не начался (с "+Формат(ДатаНачалаПериода,"ДЛФ=D")+")", Ложь);
		Возврат;
	КонецЕсли;
	
	ЭкземплярРегламента = ПолучитьЭкземплярРегламента(Настройка);
	
	// Выполним логику, находящуюся в регламенте
	МассивСформированныеДокументы = Неопределено;
	МассивУчтенныеДокументы		  = Неопределено;
	
	ДатаОкончанияПериода = ПолучитьДатуОкончанияПериодаФормированияДокументов(ЭкземплярРегламента, ДатаНачалаПериода);
	
	Если ДатаОкончанияПериода > ТекущаяДата() Тогда
		// Новый период формирования еще не закончился, формировать документы пока рано
		ЗаписатьРезультатРегламентногоФормированияДокументов(Настройка, "Следующий период формирования документов еще не закончился (по "+Формат(ДатаОкончанияПериода,"ДЛФ=D")+")", Ложь);
		Возврат;
	КонецЕсли;
	
	Если ДатаНачалаПериода > ДатаОкончанияПериода Тогда
		// Период некорректен, возможно формировать документы пока рано
		ЗаписатьРезультатРегламентногоФормированияДокументов(Настройка, "Данные за период по " + Формат(ДатаОкончанияПериода, "ДЛФ=D") + " уже обработаны", Ложь);
		Возврат;
	КонецЕсли;
	
	ПредставлениеПериода = ПредставлениеПериода(ДатаНачалаПериода, ДатаОкончанияПериода);
	
	НачатьТранзакцию();
	
	ТекстОшибки = ""; // Используется далее для всех вызовов методов регламента
	Если НЕ РегламентноеФормированиеДокументов.УстановитьПериодФормированияДокументов(Настройка, ДатаОкончанияПериода, ТекстОшибки) Тогда
		ЗаписатьРезультатРегламентногоФормированияДокументов(Настройка, ТекстОшибки, Истина);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	// Формируем документы
	Если НЕ РегламентноеФормированиеДокументов.СформироватьДокументы(ЭкземплярРегламента, ДатаНачалаПериода, ДатаОкончанияПериода, ТекстОшибки, МассивСформированныеДокументы, МассивУчтенныеДокументы) Тогда
		ЗаписатьРезультатРегламентногоФормированияДокументов(Настройка, "При формировании документов за период "+ПредставлениеПериода+" произошла ошибка: " + ТекстОшибки, Истина);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	Если МассивСформированныеДокументы.Количество() = 0 Тогда
		ЗаписатьРезультатРегламентногоФормированияДокументов(Настройка, "Нет данных для формирования документов за период " + ПредставлениеПериода, Ложь);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	// Пометим на удаление учтенные документы и проведем сформированные
	//В зависимости от настройки удаление и проведение документов может происходить либо внутри транзакции, либо вне транзакции
	УдалятьИПроводитьДокументыВТранзакции = УдалятьИПроводитьДокументыВТранзакции(Настройка);
	//Если проводить и удалять вне транзакции - зафиксируем транзакцию до выполнения этих действий
	Если НЕ УдалятьИПроводитьДокументыВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	Если НЕ РегламентноеФормированиеДокументов.УдалитьУчтенныеДокументы(ЭкземплярРегламента, МассивУчтенныеДокументы, Ложь, ТекстОшибки) Тогда
		ЗаписатьРезультатРегламентногоФормированияДокументов(Настройка, "При удалении учтенных документов за период " + ПредставлениеПериода + " произошли ошибки: " + ТекстОшибки, Истина);
		Если УдалятьИПроводитьДокументыВТранзакции Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если НЕ РегламентноеФормированиеДокументов.ПровестиСформированныеДокументы(ЭкземплярРегламента, МассивСформированныеДокументы, Ложь, ТекстОшибки) Тогда
		ЗаписатьРезультатРегламентногоФормированияДокументов(Настройка, "При проведении сформированных документов за период " + ПредставлениеПериода+" произошли ошибки: " + ТекстОшибки, Истина);
		Если УдалятьИПроводитьДокументыВТранзакции Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//Если удаление и проведение документов происходило внутри транзакции - зафиксируем транзакцию
	Если УдалятьИПроводитьДокументыВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	ЗаписатьРезультатРегламентногоФормированияДокументов(Настройка, "Сформированы документы за период " + ПредставлениеПериода, Ложь);
	
	ОбъектНастройки.Разблокировать();
	
КонецПроцедуры

// Функции работы с коллекциями представлений периодов

// Добавляет элемент в коллекцию представлений
//
// Параметры 
//  Коллекция		- коллекция, в которую добавляется значение. Если Неопределено, то коллекция будет инициализирована
//  Значение		- значение, добавляемое в коллекцию (для коллекций периодичности - значение перечисления Периодичность) 
//  Представление	- строка, представление добавляемого значения
//  Порядок			- число для сравнения элементов коллекции (для коллекций периодичности - количество дней в периоде)
Процедура ДобавитьЭлементКоллекцииПредставлений(Коллекция, Значение, Представление, Порядок) Экспорт
	
	Если Коллекция = Неопределено Тогда
		
		Коллекция = Новый ТаблицаЗначений;
		Коллекция.Колонки.Добавить("Значение");
		Коллекция.Колонки.Добавить("Представление");
		Коллекция.Колонки.Добавить("Порядок");
		
	КонецЕсли;
	
	НоваяСтрока = Коллекция.Добавить();
	НоваяСтрока.Значение 		= Значение;
	НоваяСтрока.Представление 	= Представление;
	НоваяСтрока.Порядок 		= Порядок;
	
КонецПроцедуры

// Получает значение из коллекции по представлению
//
// Параметры
//  Коллекция     - коллекция, подготовленная с использованием ДобавитьЭлементКоллекцииПредставлений()
//  Представление - строка, искомое представление
//
// Возвращаемое значение
//  Значение элемента коллекции (для коллекций периодичности - значение перечисления Периодичность) 
Функция ПолучитьЗначение(Коллекция, Представление) Экспорт
	
	НайденнаяСтрока = Коллекция.Найти(Представление, "Представление");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденнаяСтрока.Значение;
	КонецЕсли;
	
КонецФункции

// Получает представление по значению
//
// Параметры
//  Коллекция  - коллекция, подготовленная с использованием ДобавитьЭлементКоллекцииПредставлений()
//  Значение   - искомое значение элемента коллекции (для коллекций периодичности - значение перечисления Периодичность) 
//
// Возвращаемое значение
//  Строка, представление значения
Функция ПолучитьПредставление(Коллекция, Значение) Экспорт
	
	НайденнаяСтрока = Коллекция.Найти(Значение, "Значение");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденнаяСтрока.Представление;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ФОРМИРОВАНИЯ ЗАПРОСОВ

// Заполняет значения параметров запроса ключами переданной структуры.
//
// Параметры
//	Запрос 				- объект типа запрос
//	СтруктураПараметров - структура с именами и значениями параметров
Процедура ЗаполнитьЗначенияПараметровЗапроса(Запрос, СтруктураПараметров)
	
	Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
		Запрос.Параметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ МЕТОДЫ РАБОТЫ С ДОКУМЕНТАМИ

// Получает типы переданных объектов
//
// Параметры
//  МассивДокументов - массив объектов (ссылок на документы)
//
// Возвращаемое значение
//  массив типов документов, переданных в качестве параметра.
Функция ПолучитьТипыДокументов(МассивДокументов) Экспорт
	
	//Получим список типов в массиве
	МассивТипов = Новый Массив;
	Для Каждого Документ Из МассивДокументов Цикл
		Тип = ТипЗнч(Документ);
		Если МассивТипов.Найти(Тип) = Неопределено Тогда
			МассивТипов.Добавить(Тип);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивТипов;
	
КонецФункции

// Подгатавливает список документов
//	- либо сформированных, требующих проведения, но не проведенных.
//	- либо учтенных, требующих удаления, но не помеченных на удаление
// из списка переданных документов
//
// Параметры
//  
//  Регламент - экземпляр регламента (возвращаемый функцией ПолучитьЭкземплярРегламента())
//  МассивДокументов - массив со ссылками на документы
//	Режим - строка "Проведение" или "Удаление"
//
// Возвращаемое значение
//  Результат запроса
Функция ПолучитьРезультатЗапросаДокументов(Регламент, МассивДокументов, Режим)
	
	Режим = Врег(Режим);
	
	// Обрабатываем документы, указанные в табличной части
	Если Режим = "ПРОВЕДЕНИЕ" Тогда
		// Регламентом может быть предусмотрено, что не все документы нужно проводить.
		ОбрабатываемыеДокументы	= РегламентноеФормированиеДокументов.ПолучитьМассивДокументовДляПроведения(Регламент, МассивДокументов);
	Иначе
		// Регламентом может быть предусмотрено, что не все документы нужно удалять.
		ОбрабатываемыеДокументы	= РегламентноеФормированиеДокументов.ПолучитьМассивДокументовДляУдаления(Регламент, МассивДокументов);
	КонецЕсли;
	
	Если ОбрабатываемыеДокументы.Количество() = 0 Тогда
		
		// сформируем и вернем "фиктивный" запрос, т.к.
		// использовать тот же самый способ,
		// что и для случая, когда документы есть не получится 
		// (потому что будет пустой состав типов)
		Запрос = Новый Запрос("ВЫБРАТЬ NULL КАК Документ, Ложь КАК Проведен, ДАТАВРЕМЯ(1,1,1) КАК Дата ГДЕ ЛОЖЬ");
		Возврат Запрос.Выполнить();
		
	КонецЕсли;	
	
	// Для отбора документов по статусу (не проведенные, не помеченные на удаление) 
	// выполним запрос, при этом соединение с таблицами документов будет выполняться неявно.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсходнаяТаблица.Документ
	|ПОМЕСТИТЬ ОтобранныеДокументы
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтобранныеДокументы.Документ,
	|	ОтобранныеДокументы.Документ.Проведен КАК Проведен,
	|	ОтобранныеДокументы.Документ.Дата КАК Дата,
	|	ПРЕДСТАВЛЕНИЕ(ОтобранныеДокументы.Документ) //Чтобы попало в кэш представлений
	|ИЗ
	|	ОтобранныеДокументы КАК ОтобранныеДокументы
	|ГДЕ (НЕ ОтобранныеДокументы.Документ."+?(Режим = "ПРОВЕДЕНИЕ", "Проведен", "ПометкаУдаления")+")
	|УПОРЯДОЧИТЬ ПО 
	|	Дата"
	);
	
	// Получим таблицу со списком обрабатываемых документов, для передачи её в запрос
	
	// Состав типов документа будет ограничен теми типами, значения которых фактически присутствуют в списке документов
	// Для того, чтобы неявных соединений было не больше, чем нужно.
	МассивТипов = ПолучитьТипыДокументов(ОбрабатываемыеДокументы);
	
	ИсходнаяТаблица	= Новый ТаблицаЗначений;
	ИсходнаяТаблица.Колонки.Добавить("Документ", Новый ОписаниеТипов(МассивТипов));
	Для Каждого Документ Из ОбрабатываемыеДокументы Цикл
		ИсходнаяТаблица.Добавить().Документ = Документ;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("Режим", 			 Режим);
	
	Возврат Запрос.Выполнить();
		
КонецФункции

// Удаляет учтенные документы.
// Список документов, требующих удаления, уточняется у регламента.
//
// Параметры
//  Регламент - экземпляр регламента (возвращаемый функцией ПолучитьЭкземплярРегламента())
//  УчтенныеДокументы - Массив со списком учтенных документов 
//               или 
//               - таблица значений со списком учтенных документов. 
//                 Колонки:
//		           Документ - ссылка на документ
//		           Проведен - булево, в колонку будет установлен признак проведения документа до удаления
//  Ошибка - в параметр будет вовращен текст ошибки (если операция будет прервана из-за ошибки)
//  ОстанавливатьсяПриОшибках - булево, признак того что при обнаружении ошибок следует прервать обработку документов
//  УдаленыДокументы - в него будет возвращено булево 
//			     - требуется ли логикой регламента удаление конкретных 
//			     учтенных документов
// Возвращаемое значение
//  Истина - все документы удалены без ошибок
Функция УдалитьУчтенныеДокументы(Регламент, УчтенныеДокументы, ОстанавливатьсяПриОшибках = Истина, Ошибка = "", УдаленыДокументы=Ложь) Экспорт
	
	Если ТипЗнч(УчтенныеДокументы) = Тип("ТаблицаЗначений") Тогда
		МассивДокументов = УчтенныеДокументы.ВыгрузитьКолонку("Документ");
	Иначе
		МассивДокументов = УчтенныеДокументы;
	КонецЕсли;
		
	ДокументыДляУдаления	= ПолучитьРезультатЗапросаДокументов(Регламент, МассивДокументов, "Удаление").Выбрать();
	
	Если ДокументыДляУдаления.Количество() = 0 Тогда
		УдаленыДокументы = Ложь;
		Возврат Истина;
	КонецЕсли;
	
	УдаленыДокументы 	= Истина;
	
	//В случае ошибок - вернем Ложь
	БезОшибок 			= Истина;
	
	#Если Клиент Тогда
	//Если документов больше двух, то покажем индикатор процесса
	Если ДокументыДляУдаления.Количество()>2 Тогда
		ФормаИндикатора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		ФормаИндикатора.МаксимальноеЗначение		= ДокументыДляУдаления.Количество();
		ФормаИндикатора.КомментарийОбработкиДанных	= "Удаление учтенных документов";
		ФормаИндикатора.НаименованиеОбработкиДанных	= "Формирование документов";
		ФормаИндикатора.Открыть();
	Иначе
		ФормаИндикатора = Неопределено;
	КонецЕсли;
	#КонецЕсли
	
	//Удаление документов
	Пока ДокументыДляУдаления.Следующий() Цикл
		
		//Запомним текущее состояние документа
		Если ТипЗнч(УчтенныеДокументы) = Тип("ТаблицаЗначений") Тогда
			Для Каждого ДанныеСтроки Из УчтенныеДокументы.НайтиСтроки(Новый Структура("Документ", ДокументыДляУдаления.Документ)) Цикл
			
				ДанныеСтроки.Проведен = ДокументыДляУдаления.Проведен;
			
			КонецЦикла;
		КонецЕсли;
		
		//Установим пометку удаления
		ПредставлениеУдаляемогоДокумента 	= "" + ДокументыДляУдаления.Документ;
		Сообщение 							= "Ошибка при пометке на удаление документа " + ПредставлениеУдаляемогоДокумента + ": ";
		Попытка
			ОбъектДокумента 	= ДокументыДляУдаления.Документ.ПолучитьОбъект();
			// В документах подсистемы ОперативныйУчетПроизводства обойдем проверку завершенных смен
			Если ТипЗнч(ДокументыДляУдаления.Документ) = Тип("ДокументСсылка.ОтчетМастераСмены") 
				ИЛИ ТипЗнч(ДокументыДляУдаления.Документ) = Тип("ДокументСсылка.ОтчетОСоставеСмены") Тогда
				ОбъектДокумента.мРазрешенОбходПроверкиЗапретаРедактированияЗакрытыхСмен = Истина;
			КонецЕсли;
			ОбъектДокумента.УстановитьПометкуУдаления(Истина);
		Исключение
			Ошибка = Ошибка + Сообщение + ОписаниеОшибки() + Символы.ПС;
			БезОшибок = Ложь;
			Если ОстанавливатьсяПриОшибках Тогда
				Прервать;
			КонецЕсли;
		КонецПопытки;
		
		//Обновим индикатор выполнения
		#Если Клиент Тогда
		Если ФормаИндикатора <> Неопределено Тогда
			ФормаИндикатора.КомментарийЗначения	= ПредставлениеУдаляемогоДокумента;
			ФормаИндикатора.Значение 			= ФормаИндикатора.Значение + 1;
			ОбработкаПрерыванияПользователя();
		КонецЕсли;
		#КонецЕсли
		
	КонецЦикла;
	
	#Если Клиент Тогда
	Если ФормаИндикатора <> Неопределено Тогда
		ФормаИндикатора.Закрыть();
	КонецЕсли;
	#КонецЕсли	
	
	Возврат БезОшибок;
	
КонецФункции

// Функция проведения сформированных документов.
// Список документов, требующих проведения, уточняется у регламента.
//
// Параметры
//  Регламент - экземпляр регламента (возвращаемый функцией ПолучитьЭкземплярРегламента())
//  МассивДокументов - массив со ссылками на документы
//  ОстанавливатьсяПриОшибках - булево, признак того что при обнаружении ошибок следует прервать обработку документов
//  Ошибка - в параметр будет вовращен текст ошибки (если операция будет прервана из-за ошибки)
//  МассивНепроведенныхДокументов - массив, в который будут записаны документы которые не удалось провести
// Возвращаемое значение
//  Истина - все документы проведены.
Функция ПровестиСформированныеДокументы(Регламент, МассивДокументов, ОстанавливатьсяПриОшибках = Истина, Ошибка = "", МассивНепроведенныеДокументы = Неопределено) Экспорт
	
	ДокументыДляПроведения	= ПолучитьРезультатЗапросаДокументов(Регламент, МассивДокументов, "Проведение").Выбрать();
	МассивНепроведенныеДокументы = Новый Массив();
	//В случае ошибок - вернем Ложь, чтобы задача не могла считаться выполненной.
	БезОшибок = Истина;
	
	#Если Клиент Тогда
	//Если документов больше двух, то покажем индикатор процесса
	Если ДокументыДляПроведения.Количество()>2 Тогда
		ФормаИндикатора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		ФормаИндикатора.МаксимальноеЗначение		= ДокументыДляПроведения.Количество();
		ФормаИндикатора.КомментарийОбработкиДанных	= "Проведение документов";
		ФормаИндикатора.НаименованиеОбработкиДанных	= "Формирование документов";
		ФормаИндикатора.Открыть();
	Иначе
		ФормаИндикатора = Неопределено;
	КонецЕсли;
	#КонецЕсли
	
	Пока (НЕ ОстанавливатьсяПриОшибках ИЛИ БезОшибок ИЛИ НЕ ТранзакцияАктивна()) И ДокументыДляПроведения.Следующий() Цикл
		//внутри транзакции после первой ошибки прекращаем выполнение
		
		ПредставлениеПроводимогоДокумента 	= ""+ДокументыДляПроведения.Документ;
		Сообщение 							= "Ошибка при проведении документа " + ПредставлениеПроводимогоДокумента + ": ";
		Попытка
			ОбъектДокумента 	= ДокументыДляПроведения.Документ.ПолучитьОбъект();
			//Проводим всегда неоперативно, так как оперативно факты были отражены ранее.
			ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			БезОшибок = Ложь;
			Ошибка = Ошибка + Сообщение + ОписаниеОшибки() + Символы.ПС;
			МассивНепроведенныеДокументы.Добавить(ДокументыДляПроведения.Документ);
		КонецПопытки;
		
		//Обновим индикатор выполнения
		#Если Клиент Тогда
		Если ФормаИндикатора <> Неопределено Тогда
			ФормаИндикатора.КомментарийЗначения	= ПредставлениеПроводимогоДокумента;
			ФормаИндикатора.Значение 			= ФормаИндикатора.Значение + 1;
			ОбработкаПрерыванияПользователя();
		КонецЕсли;
		#КонецЕсли
		
	КонецЦикла;
	
	#Если Клиент Тогда
	Если ФормаИндикатора <> Неопределено Тогда
		ФормаИндикатора.Закрыть();
	КонецЕсли;
	#КонецЕсли	
	
	Возврат БезОшибок;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАСШИРЯЕМЫЕ ФУНКЦИИ РЕГЛАМЕНТОВ

// Определяет дату окончания следующего периода формирования документов
// 
// Параметры
//  Регламент    - экземпляр регламента (возвращаемый функцией ПолучитьЭкземплярРегламента())
//  ДатаНачалаПериода - дата начала периода, 
//                      которая может быть использована для расчета даты окончания.
//                      Может быть получена функцией 
//                      ПолучитьДатуНачалаСледующегоПериодаФормированияДокументов()
//
// Возвращаемое значение
//  Дата. Если не удалось определить дату окончания периода, то будет возвращена пустая дата.
//
Функция ПолучитьДатуОкончанияПериодаФормированияДокументов(Регламент, ДатаНачалаПериода)
	
	Если ТипЗнч(Регламент) = Тип("СправочникСсылка.НастройкиФормированияДокументовВыпускаПродукции") Тогда
		Возврат РегламентФормированияДокументовВыпуска_ПолучитьДатуОкончанияПериодаФормированияДокументов(Регламент);
	ИначеЕсли ТипЗнч(Регламент) = Тип("СправочникСсылка.НастройкиФормированияДокументовПоОрдерам") Тогда
		Возврат РегламентФормированияДокументовПоОрдерам_ПолучитьДатуОкончанияПериодаФормированияДокументов(Регламент);
	Иначе
		//Возвращаем структуру, по которой новое задание не будет создано
		Возврат '0001-01-01';
	КонецЕсли;
	
КонецФункции

// Выполняет создание, заполнение и запись документов
//
// Параметры
//  Регламент    - экземпляр регламента (возвращаемый функцией ПолучитьЭкземплярРегламента())
//	ДатаНачала   - дата начала выборки документов
//	ДатаОкончания- дата окончания выборки документов
//  Ошибка       - в параметр будет возвращен текст ошибки (если формирование документов завершится с ошибкой)
//	СформированныеДокументы - в параметр будет возвращен массив сформированных документов
//	УчтенныеДокументы       - в параметр будет возвращен массив учтенных документов (т.е. тех, по данным которых сформированы документы).
//
// Возвращаемое значение
//  Истина - сформировано без ошибок
//  Ложь   - при формировании документов произошли ошибки
//
Функция СформироватьДокументы(Регламент, ДатаНачала, ДатаОкончания, Ошибка = "", СформированныеДокументы=Неопределено, УчтенныеДокументы=Неопределено) Экспорт
	
	// Формируем документы
	Если ТипЗнч(Регламент) = Тип("СправочникСсылка.НастройкиФормированияДокументовВыпускаПродукции") Тогда
		
		Возврат РегламентФормированияДокументовВыпуска_СформироватьДокументы(Регламент, ДатаНачала, ДатаОкончания, Ошибка, СформированныеДокументы, УчтенныеДокументы);
	ИначеЕсли ТипЗнч(Регламент) = Тип("СправочникСсылка.НастройкиФормированияДокументовПоОрдерам") Тогда
		Возврат РегламентФормированияДокументовПоОрдерам_СформироватьДокументы(Регламент, ДатаНачала, ДатаОкончания, Ошибка, СформированныеДокументы, УчтенныеДокументы);
	Иначе
		
		СформированныеДокументы = Новый Массив();
		УчтенныеДокументы		= Новый Массив();
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Возвращает массив документов, входящих в переданный массив сформированных по данному регламенту 
//документов (ПроверяемыеДокументы), которые требуют проведения в соответствии с логикой 
//отражения операций по данному регламенту.
Функция ПолучитьМассивДокументовДляПроведения(Регламент, ПроверяемыеДокументы) Экспорт
	
	Если ТипЗнч(Регламент) = Тип("СправочникСсылка.НастройкиФормированияДокументовВыпускаПродукции") Тогда
		
		Возврат РегламентФормированияДокументовВыпуска_ПолучитьМассивДокументовДляПроведения(Регламент, ПроверяемыеДокументы);
	ИначеЕсли ТипЗнч(Регламент) = Тип("СправочникСсылка.НастройкиФормированияДокументовПоОрдерам") Тогда
		Возврат ПроверяемыеДокументы;
	Иначе
		
		//Вернем значение по-умолчанию
		Возврат Новый Массив;
		
	КонецЕсли;
	
КонецФункции

// Возвращает массив документов, входящих в переданный массив учтенных данным регламентом 
//документов (ПроверяемыеДокументы), которые требуют удаления в соответствии с логикой 
//отражения операций по данному регламенту.
Функция ПолучитьМассивДокументовДляУдаления(Регламент, ПроверяемыеДокументы) Экспорт
	
	Если ТипЗнч(Регламент) = Тип("СправочникСсылка.НастройкиФормированияДокументовВыпускаПродукции") Тогда
		
		Возврат РегламентФормированияДокументовВыпуска_ПолучитьМассивДокументовДляУдаления(Регламент, ПроверяемыеДокументы);
	ИначеЕсли ТипЗнч(Регламент) = Тип("СправочникСсылка.НастройкиФормированияДокументовПоОрдерам") Тогда
		Возврат ПроверяемыеДокументы;
	Иначе
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
КонецФункции


// Возвращает булево - признак того, что удалять учтенные документы необходимо в транзакции
// 
Функция УдалятьИПроводитьДокументыВТранзакции(Регламент) 
	
	Если ТипЗнч(Регламент) = Тип("СправочникСсылка.НастройкиФормированияДокументовПоОрдерам") Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ТипЗнч(Регламент) = Тип("СправочникСсылка.НастройкиФормированияДокументовВыпускаПродукции") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
