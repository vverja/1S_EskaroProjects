////////////////////////////////////////////////////////////////////////////////
// РАБОТА С РЕГЛАМЕНТНЫМ ЗАДАНИЕМ В ДИАЛОГЕ ФОРМЫ

// Управляет выводом представления расписания
//
// Параметры
//  Форма - форма, на которой находятся реквизиты связанные с расписанием.
//          Форма обязательно должна содержать: 
//          - реквизит ПредставлениеРасписания - Тип: Строка
//          - экспортную переменную Расписание
//
Процедура НастроитьПредставлениеРасписания(Форма) Экспорт
	
	Если Форма.Расписание = Неопределено Тогда
		
		Форма.ПредставлениеРасписания = "<Ввести расписание>";
		
	Иначе
		
		Форма.ПредставлениеРасписания = "Выполнять: " + СокрЛП(Форма.Расписание);
		
	КонецЕсли;
	
КонецПроцедуры // НастроитьПредставлениеРасписания()


#Если Клиент Тогда 

// Выполняет редактирование расписания регламентного задания
//
// Параметры
//  Форма - форма, на которой находятся реквизиты связанные с расписанием.
//          Форма обязательно должна содержать: 
//          - экспортную переменную Расписание
//
Процедура РедактироватьРасписаниеРегламентногоЗадания(Форма) Экспорт
	
	СтароеРасписание = Форма.Расписание;
	РасписаниеНеопределено = (Форма.Расписание = Неопределено);
	Если РасписаниеНеопределено Тогда
		
		Форма.Расписание = Новый РасписаниеРегламентногоЗадания;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Форма.Расписание);
	
	Если Диалог.ОткрытьМодально() Тогда
		
		Форма.Расписание = Диалог.Расписание;
		Форма.Модифицированность = Истина;
		
		НастроитьПредставлениеРасписания(Форма);
		
	Иначе
		
		Если РасписаниеНеопределено Тогда
			Форма.Расписание = Неопределено; // ничего не поменяли
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РедактироватьРасписаниеРегламентногоЗадания()

// Очищает расписание при снятии флага ФормироватьДокументыАвтоматически
//
// Параметры
//  Форма - форма, на которой находятся реквизиты связанные с расписанием.
//          Форма обязательно должна содержать: 
//          - реквизит ФормироватьДокументыАвтоматически
//          - экспортную переменную Расписание
//
Функция ПриИзмененииФлагаФормироватьДокументыАвтоматически(Форма) Экспорт
	НужноУдалитьРегламентноеЗадание = Ложь;
	Если НЕ Форма.ФормироватьДокументыАвтоматически Тогда
		
		Если Форма.Расписание <> Неопределено Тогда
			// Уточним, не надо ли удалить регламентное задание
			Ответ = Вопрос("Очистить расписание?",
			РежимДиалогаВопрос.ДаНет,
			,//таймаут
			КодВозвратаДиалога.Нет,
			"Удаление расписания"
			);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				НужноУдалитьРегламентноеЗадание = Истина;
				Форма.Расписание = Неопределено;
				НастроитьПредставлениеРасписания(Форма);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НужноУдалитьРегламентноеЗадание;
КонецФункции // ПриИзмененииФлагаФормироватьДокументыАвтоматически()

#КонецЕсли


#Если ТолстыйКлиентОбычноеПриложение ИЛИ Сервер Тогда 
	
// Получает расписание регламентного задания
//
// Параметры
//  РегламентноеЗадание - ссылка на регламентное задание
//
Функция ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗадание) Экспорт
	
	Если ПустаяСтрока(РегламентноеЗадание) Тогда
		
		// Расписание по-умолчанию
		
		Возврат Неопределено;
			
	КонецЕсли;
	
	СвойстваРегламентногоЗадания = Новый Структура("Расписание");
	
	Если ПолныеПрава.ПрочитатьРегламентноеЗадание(Новый УникальныйИдентификатор(РегламентноеЗадание), СвойстваРегламентногоЗадания,"Ошибка при чтении расписания") Тогда
		
		// Расписание передается внутри ХранилищеЗначения, чтобы его можно было передать с сервера
		Возврат СвойстваРегламентногоЗадания.Расписание.Получить();
		
	КонецЕсли;
	
	// Расписание по-умолчанию
	Возврат Неопределено;
			
КонецФункции // ПолучитьРасписаниеРегламентногоЗадания()	
	
// Удаляет соответствующее регламентное задание при записи справочника с настройками
//
// Параметры
//  ЭтотОбъект - справочник настроек, 
//  ЗаголовокСообщения - строка, содержащая заголовок для сообщений об ошибках,
//  Отказ - булево, в случае ошибки устанавливается в Истина
//
Процедура УдалитьРегламентноеЗаданиеПриЗаписиНастройки(ЭтотОбъект,ЗаголовокСообщения,Отказ) Экспорт
	// Обрабатываем удаление регламентного задания
	Если НЕ ЭтотОбъект.ФормироватьДокументыАвтоматически Тогда
		Если НЕ ПустаяСтрока(ЭтотОбъект.РегламентноеЗадание) Тогда
			
			СообщениеОбОшибке 	= "Ошибка при удалении регламентного задания";
			
			Если ПолныеПрава.УдалитьРегламентноеЗадание(
				Новый УникальныйИдентификатор(ЭтотОбъект.РегламентноеЗадание), 
				СообщениеОбОшибке, 
				ЗаголовокСообщения) Тогда
				
				ЭтотОбъект.РегламентноеЗадание = "";
				
			Иначе
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УдалитьРегламентноеЗаданиеПриЗаписиНастройки()

// Изменяет расписание соответствующего регламентного задания при записи справочника с настройками
//
// Параметры
//  ЭтотОбъект - справочник настроек, 
//  Расписание - расписание, которое необходимо установить, 
//  ЗаголовокСообщения - строка, содержащая заголовок для сообщений об ошибках,
//  Отказ - булево, в случае ошибки устанавливается в Истина
//
Процедура ИзменитьРегламентноеЗаданиеПриЗаписиНастройки(ЭтотОбъект,Расписание,ЗаголовокСообщения,Отказ) Экспорт
	// Обрабатываем расписание регл. задания
	Если Расписание = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задано расписание.", Отказ, ЗаголовокСообщения);
		Возврат;
	КонецЕсли;
	
	СвойстваРегламентногоЗадания = Новый Структура();
	СвойстваРегламентногоЗадания.Вставить("Расписание", Новый ХранилищеЗначения(Расписание)); 
	
	Если НЕ ПолныеПрава.ИзменитьРегламентноеЗадание(
		Новый УникальныйИдентификатор(ЭтотОбъект.РегламентноеЗадание), 
		СвойстваРегламентногоЗадания, 
		"Ошибка при записи расписания", 
		ЗаголовокСообщения) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
КонецПроцедуры // ИзменитьРегламентноеЗаданиеПриЗаписиНастройки()	

Процедура ВывестиПризнакОтраженияВУчетеУчетВФормуСписка(ОформленияСтрок, ИмяТипа, УпрУчет=Истина, РеглУчет=Истина) Экспорт
	МассивЭлементов = новый Массив;
	Соответствие = новый Соответствие;
	Для каждого Строка из ОформленияСтрок цикл
		МассивЭлементов.Добавить(Строка.ДанныеСтроки.Ссылка);
		Соответствие.Вставить(Строка.ДанныеСтроки.Ссылка, Строка)
	КонецЦикла;
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|Ссылка,
	|ВЫБОР КОГДА ВидОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете)
	|ТОГДА ИСТИНА
	|ИНАЧЕ ЛОЖЬ
	|КОНЕЦ КАК ОтражатьВУправленческомУчете,
	|ВЫБОР КОГДА ВидОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете)
	|ТОГДА ИСТИНА
	|ИНАЧЕ ЛОЖЬ
	|КОНЕЦ КАК ОтражатьВРегламентированномУчете	
	|ИЗ Справочник." + ИмяТипа + "
	|ГДЕ Ссылка в (&МассивЭлементов)";
	
	Запрос.УстановитьПараметр("МассивЭлементов",МассивЭлементов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		Если УпрУчет Тогда
			Соответствие.Получить(Выборка.Ссылка).Ячейки.ОтражатьВУправленческомУчете.УстановитьФлажок(Выборка.ОтражатьВУправленческомУчете);
		КонецЕсли;
		Если РеглУчет Тогда
			Соответствие.Получить(Выборка.Ссылка).Ячейки.ОтражатьВРегламентированномУчете.УстановитьФлажок(Выборка.ОтражатьВРегламентированномУчете);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С РЕГЛАМЕНТНЫМ ЗАДАНИЕМ МОДУЛЬ СПРАВОЧНИКА НАСТРОЕК

#Если НЕ ТонкийКлиент Тогда

// Устанавливает параметры регламентного задания
// соответствующие реквизитам элемента
//
// Параметры
//	ЭтотОбъект - элемент справочника настроек,
//  Отказ - значение параметра будет установлено в Истина, если при выполнении операций
//          с регламентным заданием произошла ошибка и оно может не соответствовать 
//          реквизитам элемента
Процедура НастроитьРегламентноеЗадание(ЭтотОбъект, Отказ)
	
	Заголовок 			= ЭтотОбъект.ЗаголовокПриЗаписи();
	СообщениеОбОшибке 	= "Ошибка при записи регламентного задания";
	УИД = ЭтотОбъект.Ссылка.УникальныйИдентификатор();

	СвойстваРегламентногоЗадания = Новый Структура();
	СвойстваРегламентногоЗадания.Вставить("Использование");
	СвойстваРегламентногоЗадания.Вставить("Параметры");
	СвойстваРегламентногоЗадания.Вставить("Наименование");
	СвойстваРегламентногоЗадания.Вставить("Ключ");
	
	Если НЕ ПолныеПрава.ПрочитатьРегламентноеЗадание(
		Новый УникальныйИдентификатор(ЭтотОбъект.РегламентноеЗадание),
		СвойстваРегламентногоЗадания,
		СообщениеОбОшибке,
		Заголовок) Тогда
		
		// Идентификатор РегламентноеЗадание не должен быть пустым
		// а само регл. задание должно существовать.
		// Это обеспечивается в обработчике события ПередЗаписью().
	
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Проверим, что свойства - правильные, 
	// записывать задание будем только в случае, если их нужно менять
	Если  СвойстваРегламентногоЗадания.Параметры.Количество() = 1 
		И СвойстваРегламентногоЗадания.Параметры[0]  = ЭтотОбъект.Ссылка
		И СвойстваРегламентногоЗадания.Наименование  = ЭтотОбъект.Наименование
		И СвойстваРегламентногоЗадания.Ключ 		 = "" + УИД
		И СвойстваРегламентногоЗадания.Использование = Истина Тогда
		// Все нормально
		Возврат;
	КонецЕсли;
		
	// Будем записывать новые настройки
	ПараметрыРегламентногоЗадания = Новый Массив();
	ПараметрыРегламентногоЗадания.Добавить(ЭтотОбъект.Ссылка);
	
	СвойстваРегламентногоЗадания.Использование = Истина;
	СвойстваРегламентногоЗадания.Параметры     = ПараметрыРегламентногоЗадания;
	СвойстваРегламентногоЗадания.Наименование  = ЭтотОбъект.Наименование;
	// Одновременно может выполняться только одно регл. задание для минимизации конфликтов
	// Для этого устанавливаем ключ
	СвойстваРегламентногоЗадания.Ключ 		   = "" + УИД; 

	Если НЕ ПолныеПрава.ИзменитьРегламентноеЗадание(
		Новый УникальныйИдентификатор(ЭтотОбъект.РегламентноеЗадание), 
		СвойстваРегламентногоЗадания, 
		СообщениеОбОшибке,
		Заголовок) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // НастроитьРегламентноеЗадание()

// Обеспечивает, что регламентное задание, связанное с элементом справочника,
// не используется
// 
// Параметры
//	ЭтотОбъект - элемент справочника настроек
Процедура ОтключитьИспользованиеРегламентногоЗадания(ЭтотОбъект)
		
	Если ПустаяСтрока(ЭтотОбъект.РегламентноеЗадание) Тогда
		// Не создавалось регламентное задания, связанное с элементом справочника.
		Возврат;
	КонецЕсли;
	
	// Регл. задание по этому элементу справочника создавалось.
	// Проверим, возможно оно еще используется.
	// В этом случае его надо выключить.
	
	СвойстваРегламентногоЗадания = Новый Структура();
	СвойстваРегламентногоЗадания.Вставить("Использование");
	
	Если НЕ ПолныеПрава.ПрочитатьРегламентноеЗадание(
		Новый УникальныйИдентификатор(ЭтотОбъект.РегламентноеЗадание), 
		СвойстваРегламентногоЗадания) Тогда
		// Регл. задания уже нет
		Возврат;
	КонецЕсли;
			
	Если СвойстваРегламентногоЗадания.Использование <> Истина Тогда
		// Регл. задание отключено
		Возврат;
	КонецЕсли;
	
	// Использование регл. задания надо отключить
	СвойстваРегламентногоЗадания.Использование = Ложь;
	ПолныеПрава.ИзменитьРегламентноеЗадание(
		Новый УникальныйИдентификатор(ЭтотОбъект.РегламентноеЗадание), 
		СвойстваРегламентногоЗадания);

КонецПроцедуры // ОтключитьИспользованиеРегламентногоЗадания()

// Удаляет регламентное задание, связанное с элементом справочника
//
// Параметры
//	ЭтотОбъект - элемент справочника настроек,
//  Отказ - значение параметра будет установлено в Истина, если при удалении задания произошла ошибка
Процедура УдалитьРегламентноеЗаданиеСвязанноеСНастройкой(ЭтотОбъект, Отказ)
	
	Если ПустаяСтрока(ЭтотОбъект.РегламентноеЗадание) Тогда
		// Не создавалось регламентное задания, связанное с элементом справочника.
		Возврат;
	КонецЕсли;
	
	// Регл. задание по этому элементу справочника создавалось.
	// Его надо удалить.
	// Без удаления регл. задания удалить элемент справочника нельзя.
	
	Заголовок 			= "Удаление настройки """ + ЭтотОбъект.Наименование + """";
	СообщениеОбОшибке 	= "Ошибка при удалении регламентного задания";
	
	Если НЕ ПолныеПрава.УдалитьРегламентноеЗадание(
		Новый УникальныйИдентификатор(ЭтотОбъект.РегламентноеЗадание), 
		СообщениеОбОшибке, 
		Заголовок) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // УдалитьРегламентноеЗадание()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ В МОДУЛЯХ СПРАВОЧНИКОВ РЕГЛАМЕНТНЫХ НАСТРОЕК

// Обработчик события ПередЗаписью
// Выполняются проверки - можно записать элемент или нет.
// При необходимости создается регламентное задание
Процедура ПередЗаписьюНастроекРегламентныхПроцедур(Источник, Отказ) Экспорт
	
	Если Источник.ЭтоГруппа ИЛИ Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления Тогда
		Источник.ФормироватьДокументыАвтоматически = Ложь;
		Возврат;
	КонецЕсли;
	
	// Запрещена запись элемента с пустым наименованием. Проверяем отдельно, 
	// т.к. наименование - это основное представление, в т.ч. в сообщениях об ошибке.
	// Текст сообщения - по аналогии с незаполненной датой документа.
	Если ПустаяСтрока(Источник.Наименование) Тогда
		Заголовок = "Запись настройки "; // без наименования, т.к. оно пустое
		ОбщегоНазначения.СообщитьОбОшибке("Не задано наименование",	Отказ, Заголовок);
	КонецЕсли;
	
	// Проверим заполнение реквизитов
	Заголовок = Источник.ЗаголовокПриЗаписи();
	Отказ = Отказ ИЛИ НЕ Источник.РеквизитыЗаполнены(Заголовок);
	
	// Проверим корректность регламентного задания
	// Важно: с одним элементом справочника могут быть связаны несколько регл. заданий.
	// Но только с одним из них поддерживается манипулирование через справочник.
	// Ссылка на это регл. задание хранится в справочнике.
	
	// Если настройка поддерживает использования регл.задания, то оно должно существовать
	// и ссылка на него должна быть указана в реквизите РегламентноеЗадание.
	
	Если Источник.ФормироватьДокументыАвтоматически Тогда
		
		Отказ = Отказ ИЛИ НЕ ПолныеПрава.ОбеспечитьРегламентноеЗадание(Источник.ИмяРегламентногоЗадания(), Источник.РегламентноеЗадание, "Ошибка при создании регламентного задания", Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНастроекРегламентныхПроцедур()

// Обработчик события ПриЗаписи
// Проверим, что параметры регламентного задания соответствуют настройкам регламента
Процедура ПриЗаписиНастроекРегламентныхПроцедур(Источник, Отказ) Экспорт
	
	Если Источник.ЭтоГруппа ИЛИ Источник.ОбменДанными.Загрузка ИЛИ Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, что параметры регламентного задания соответствуют настройкам регламента
	Если Источник.ФормироватьДокументыАвтоматически Тогда
		
		НастроитьРегламентноеЗадание(Источник, Отказ);
		
	Иначе
		
		ОтключитьИспользованиеРегламентногоЗадания(Источник);
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписиНастроекРегламентныхПроцедур()

// Обработчик события ПередУдалением
// При удалении элемента справочника удалим и связанное с ним регламентное задание
Процедура ПередУдалениемНастроекРегламентныхПроцедур(Источник, Отказ) Экспорт
	
	Если Источник.ЭтоГруппа ИЛИ Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьРегламентноеЗаданиеСвязанноеСНастройкой(Источник, Отказ);

КонецПроцедуры // ПередУдалениемНастроекРегламентныхПроцедур()

// Обработчик события ПриКопировании
// Новый элемент должен использовать свое регламентное задание
Процедура ПриКопированииНастроекРегламентныхПроцедур(Источник, ОбъектКопирования) Экспорт
	
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	// Новый элемент должен использовать свое регламентное задание
	Источник.РегламентноеЗадание = "";

КонецПроцедуры // ПриКопированииНастроекРегламентныхПроцедур()

#КонецЕсли
