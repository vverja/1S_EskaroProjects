
#Область СлужебныйПрограммныйИнтерфейс
Процедура ФормированиеПакетаЛогистическихДокументов(Заказ, Отказ) Экспорт
	
	ДоговорКонтрагентаНПТ = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию(Лев("НПТ - " + Заказ.ДоговорКонтрагента.Наименование, 50),,,Заказ.Контрагент);
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагентаНПТ) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если ЕстьЗадолженность(Заказ, ДоговорКонтрагентаНПТ) И НЕ Заказ.ОтключитьКонтрольВзаиморасчетов Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 	
	
	СформироватьРезерв(Заказ, Отказ);	
		
КонецПроцедуры
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
Процедура ВыгрузитьЧек(Резерв, ТабСтрокаНомерЧека, Отказ) Экспорт
	ДоговорКонтрагентаНПТ = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию(Лев("НПТ - " + Резерв.Заказ.ДоговорКонтрагента.Наименование, 50),,,Резерв.Заказ.Контрагент);
	НомерЧекаВОфициальнойБазе = ТабСтрокаНомерЧека;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагентаНПТ) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если ЕстьЗадолженность(Резерв.Заказ, ДоговорКонтрагентаНПТ) И НЕ Резерв.Заказ.ОтключитьКонтрольВзаиморасчетов Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Индикатор = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	Индикатор.НаименованиеОбработкиДанных = "Выгрузка чека в Колор";
	Индикатор.КомментарийОбработкиДанных  = "Начало";
	Индикатор.КомментарийЗначения         = "Процесс:";
	Индикатор.МаксимальноеЗначение        = 100;
	Индикатор.Открыть();
	
	ПроверитьКонтрагента(Резерв.Контрагент, Отказ);
	Если Отказ Тогда
		Индикатор.Закрыть();
		Возврат;
	КонецЕсли; 
	
	ТоварнаяЧасть = ПолучитьТоварнуюЧастьЧека(Резерв);
	
	МассивЧеков = РазбитьНаЧекиПоМаксимальнойСумме(ТоварнаяЧасть, Резерв.Заказ);
	Если МассивЧеков = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	Подключение = ПолучитьПодключениеКСервернойБД();
	Индикатор.КомментарийОбработкиДанных  = "Подключаемся к Колор";

	Если Подключение = Неопределено Тогда
		Индикатор.Закрыть();
		Возврат;
	КонецЕсли; 
	Индикатор.Значение = 10;
	
	Если НЕ ПустаяСтрока(НомерЧекаВОфициальнойБазе) Тогда
		Индикатор.КомментарийОбработкиДанных  = "Проверяем наличие чека в Колор";
		ПроверитьНаНаличиеЧекаВБазеКолор(Подключение, НомерЧекаВОфициальнойБазе, ПолучитьВремяПоЗаказу(Резерв.Заказ), Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		НомерЧекаВОфициальнойБазе = "";
		УдалитьВсеСвязанныеДокументы(Резерв.Заказ, Отказ);
	КонецЕсли;		 	
	КодСкладаОтгрузки =  Резерв.Заказ.СкладГруппа.Код;
	СтруктураРеквизитовКолора = ПолучитьСтруктуруРеквизитовКолор(Подключение, КодСкладаОтгрузки);
	Если СтруктураРеквизитовКолора = Неопределено Тогда
		Сообщить("В базе Колор, в регистре соответствий нет данных по данному складу " + Резерв.Заказ.СкладГруппа);
		Индикатор.Закрыть();
		Возврат;
	КонецЕсли; 
	
	Индикатор.Значение = 20;
	ИтераторСчетчика = Цел(60 / МассивЧеков.Количество());
	Индикатор.КомментарийОбработкиДанных  = "Выгружаем чеки";
	
	
	Для каждого МассивСтрокЧека Из МассивЧеков Цикл
		Подключение.НачатьТранзакцию();
		КомЧек = Подключение.Документы.ЧекККМ.СоздатьДокумент();
		ЗаполнитьЧекОбычнымиДанными(Подключение, Резерв, КомЧек, СтруктураРеквизитовКолора);	
		ЗаполнитьДисконтнуюКартуПоКонтрагенту(Подключение, Резерв.Контрагент, КомЧек, Отказ);
		Если НЕ Отказ Тогда
			Индикатор.КомментарийОбработкиДанных  = "Заполняем чек данными";
			ЗаполнитьТабличнуюЧастьЧекаДанными(Подключение, КомЧек, МассивСтрокЧека, Отказ);				
		Иначе
			Индикатор.Закрыть();
			Возврат;
		КонецЕсли;
		Если НЕ Отказ Тогда
			Индикатор.КомментарийОбработкиДанных  = "Формируем финансовые документы";
			ФормированиеПакетаФинансовыхДОкументов(Резерв.Заказ, МассивСтрокЧека, Отказ);				
		Иначе
			Индикатор.Закрыть();
			Возврат;
		КонецЕсли;
	
		Если НЕ Отказ Тогда
			Индикатор.КомментарийОбработкиДанных  = "Формируем переоценку в Колор";
			СформироватьПереоценку(Подключение, Резерв.Заказ, МассивСтрокЧека, СтруктураРеквизитовКолора, Отказ); 
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			Индикатор.КомментарийОбработкиДанных  = "Формируем перемещение и внутренний заказ";
			СсылкаНаПеремещение = СформироватьПеремещениеИВнутреннийЗаказ(Резерв.Заказ, МассивСтрокЧека, Отказ);	
		Иначе
			Индикатор.Закрыть();
			Возврат;
		КонецЕсли;
				
		Если НЕ Отказ Тогда
			Попытка
				КомЧек.Записать();
				НомерЧекаВОфициальнойБазе = НомерЧекаВОфициальнойБазе + КомЧек.Номер + ";" ;
				Индикатор.КомментарийОбработкиДанных  = "Чек записан";
				Подключение.ЗафиксироватьТранзакцию();
			Исключение
				Сообщить(ОписаниеОшибки());
				Отказ = Истина;
				Индикатор.Закрыть();
				Подключение.ОтменитьТранзакцию();
				Возврат;			
			КонецПопытки;
			
			ВыгрузитьПеремещение(Подключение, СсылкаНаПеремещение, КомЧек.Номер, СтруктураРеквизитовКолора, Отказ);
			
			Индикатор.Значение = Индикатор.Значение + ИтераторСчетчика;	
		КонецЕсли; 
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		Индикатор.КомментарийОбработкиДанных  = "Формируем корректировку заказа";	
		СоздатьКорректировкуЗаказа(Резерв.Заказ, ТоварнаяЧасть, Отказ);				
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Чек выгружен";
		Сообщение.Сообщить(); 
		Индикатор.Значение = 100;
		ТабСтрокаНомерЧека = НомерЧекаВОфициальнойБазе;
	КонецЕсли; 	
	Подключение = Неопределено;	
	Индикатор.Закрыть();	
КонецПроцедуры
#КонецОбласти

Функция ПолучитьТоварнуюЧастьЧека(Знач Резерв)
	
	Перем Запрос, ТоварнаяЧасть;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыВРезервеНаСкладах.Номенклатура,
	|	ЗаказПокупателяТовары.ЕдиницаИзмерения,
	|	ТоварыВРезервеНаСкладах.Количество,
	|	ЗаказПокупателяТовары.Коэффициент,
	|	ЗаказПокупателяТовары.Цена,
	|	ЗаказПокупателяТовары.ПроцентАвтоматическихСкидок,
	|	ЗаказПокупателяТовары.ПроцентСкидкиНаценки,
	|	ТоварыВРезервеНаСкладах.Количество * ЗаказПокупателяТовары.Цена - ТоварыВРезервеНаСкладах.Количество * ЗаказПокупателяТовары.Цена * (ЗаказПокупателяТовары.ПроцентАвтоматическихСкидок + ЗаказПокупателяТовары.ПроцентСкидкиНаценки) / 100 КАК Сумма
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах КАК ТоварыВРезервеНаСкладах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|		ПО ТоварыВРезервеНаСкладах.ДокументРезерва = ЗаказПокупателяТовары.Ссылка
	|			И ТоварыВРезервеНаСкладах.Номенклатура = ЗаказПокупателяТовары.Номенклатура
	|ГДЕ
	|	ТоварыВРезервеНаСкладах.Регистратор = &Регистратор";
	Запрос.УстановитьПараметр("Регистратор", Резерв);
	ТоварнаяЧасть = Запрос.Выполнить().Выгрузить();
	Возврат ТоварнаяЧасть;

КонецФункции


Процедура СформироватьРезерв(Заказ, Отказ)
	Документ = Документы.РезервированиеТоваров.СоздатьДокумент();
	Документ.Дата = ПолучитьВремяПоЗаказу(Заказ);
	Документ.Заполнить(Заказ);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВидимостьСерии",     Ложь);
	Параметры.Вставить("Авторезервирование", Истина);
	Параметры.Вставить("Авторазмещение",     Истина);
	Параметры.Вставить("СтратегияАвторезервированияПоЗаказам", Перечисления.СтратегииАвторезервированияНоменклатуры.СначалаНаСкладахПотомВЗаказахПоставщикам);

	Параметры.Вставить("Заказ", Заказ);
	Параметры.Вставить("РезервированиеТоваров", истина);
	Параметры.Вставить("РезервироватьПоСериям",ложь);

	УправлениеЗаказами.Заказ_ЗаполнитьТабличныеЧастиВозможнымРазмещением(Параметры, Документ.Товары, Документ.ВозвратнаяТара);
	МассивСтрокДляУдаления = Новый Массив;
	Для каждого СтрокаТовара Из Документ.Товары Цикл
		Если СтрокаТовара.НовоеРазмещение <> Заказ.СкладГруппа Тогда
			 МассивСтрокДляУдаления.Добавить(СтрокаТовара);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого СтрокаУдаления Из МассивСтрокДляУдаления Цикл
		Документ.Товары.Удалить(СтрокаУдаления);	
	КонецЦикла; 
	
	Попытка
		Документ.Записать(РежимЗаписиДокумента.Проведение);	
		Форма = Документ.ПолучитьФорму("ФормаДокумента");
		Форма.Открыть();
	Исключение
		Отказ = Истина;
	    Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	
КонецПроцедуры

Функция РазбитьНаЧекиПоМаксимальнойСумме(ТоварнаяЧасть, Заказ, МаксимальнаяСуммаЧека = 50000)
	МассивСтрокТЧ = Новый Массив;
	МассивЧеков = Новый Массив;
	ОстатокОтбора = МаксимальнаяСуммаЧека;
	Для каждого СтрокаТЧ Из ТоварнаяЧасть Цикл
		Если СтрокаТЧ.Сумма > МаксимальнаяСуммаЧека Тогда
			Если СтрокаТЧ.Количество = 1 Тогда
				Сообщить("Данный чек нельзя разбить на несколько т.к. его сумма больше 50000");							
				Возврат Неопределено;
			КонецЕсли;			
			ОбъединитьМассивы(МассивЧеков, ПреобразоватьСтрокуПриСуммаБольшеМаксимальной(ТоварнаяЧасть, Заказ, СтрокаТЧ));
			Продолжить;
		КонецЕсли; 
		ОстатокОтбора = ОстатокОтбора - СтрокаТЧ.Сумма;
		Если ОстатокОтбора < 0 Тогда
			ОстатокОтбора = МаксимальнаяСуммаЧека - СтрокаТЧ.Сумма;
			МассивЧеков.Добавить(МассивСтрокТЧ);
			МассивСтрокТЧ = Новый Массив;
		КонецЕсли; 
		МассивСтрокТЧ.Добавить(СтрокаТЧ);		
	КонецЦикла; 
	МассивЧеков.Добавить(МассивСтрокТЧ);
	Возврат МассивЧеков;
КонецФункции

Функция ПреобразоватьСтрокуПриСуммаБольшеМаксимальной(ТоварнаяЧасть, Заказ, СтрокаТЧ)
	МассивСтрокТЧ = Новый Массив;
	МассивЧеков = Новый Массив;
	СуммаЕдиницы = СтрокаТЧ.Сумма/СтрокаТЧ.Количество;
	КоличествоВЧеке = 0;
	СуммаЧека = СуммаЕдиницы;			
	Счетчик = 1;
	ОбщаяСуммаЧеков = 0;
	Пока ОбщаяСуммаЧеков < СтрокаТЧ.Сумма Цикл
		Пока Истина Цикл					
			СуммаЧека = СуммаЕдиницы *(КоличествоВЧеке + 1);					
			Если СуммаЧека > 50000 Тогда
				Прервать;	
			ИначеЕсли Окр(ОбщаяСуммаЧеков + СуммаЧека) >= СтрокаТЧ.Сумма Тогда 
				КоличествоВЧеке = КоличествоВЧеке + 1;	
				Прервать;
			Иначе
				КоличествоВЧеке = КоличествоВЧеке + 1;	
			КонецЕсли; 
		КонецЦикла;	
		ОбщаяСуммаЧеков  = Окр(ОбщаяСуммаЧеков + СуммаЧека, 2);
		Если Счетчик = 1 Тогда
			СтрокаТЧ.Количество = КоличествоВЧеке;
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, Заказ);
			МассивСтрокТЧ.Добавить(СтрокаТЧ);	
		Иначе
			НС = ТоварнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ);
			НС.Количество = КоличествоВЧеке;
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НС, Заказ);
			МассивСтрокТЧ.Добавить(НС);
		КонецЕсли;
		МассивЧеков.Добавить(МассивСтрокТЧ);
		МассивСтрокТЧ = Новый Массив;
		Счетчик = Счетчик + 1;
		КоличествоВЧеке = 0;
	КонецЦикла; 
КонецФункции
 

//Прилитает ком объект
//Заполняем обычными данными
Процедура ЗаполнитьЧекОбычнымиДанными(Подключение, Резерв, КомЧек, СтруктураРеквизитовКолора)
	КомЧек.Дата = ПолучитьВремяПоЗаказу(Резерв.Заказ);
	КомЧек.ВидОперации = Подключение.Перечисления.ВидыОперацийЧекККМ.Продажа;
	КомЧек.Организация = СтруктураРеквизитовКолора.Организация;
	КомЧек.Склад = СтруктураРеквизитовКолора.Склад;  
	КомЧек.КассаККМ = СтруктураРеквизитовКолора.КассаККМ;
	КомЧек.ТипЦен = СтруктураРеквизитовКолора.ТипЦен;
	//ЗаполнитьЗначенияСвойств(КомЧек, СтруктураРеквизитовКолора);
	КомЧек.Ответственный = Подключение.Справочники.Пользователи.НайтиПоКоду(ПараметрыСеанса.ТекущийПользователь.Код); 	
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьЧекаДанными(Подключение, КомЧек, ТоварнаяЧасть, Отказ)
	Для каждого СтрокаТоварнойЧасти Из ТоварнаяЧасть Цикл
		НС = КомЧек.Товары.Добавить();		
		Номенклатура = Подключение.Справочники.Номенклатура.НайтиПоКоду(СтрокаТоварнойЧасти.Номенклатура.Код);
		
		Если Номенклатура = Неопределено Тогда
			Сообщить("" +  СтрокаТоварнойЧасти.Номенклатура + " не найдена в официальной базе!");
			Отказ = Истина;
			Возврат;	
		КонецЕсли; 
		НС.Номенклатура = Номенклатура;
		НС.Количество = СтрокаТоварнойЧасти.Количество;
		НС.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
		НС.Коэффициент = Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		НС.Цена = СтрокаТоварнойЧасти.Цена;
		НС.ПроцентСкидкиНаценки = СтрокаТоварнойЧасти.ПроцентСкидкиНаценки + СтрокаТоварнойЧасти.ПроцентАвтоматическихСкидок;
		НС.РегистрацияПродажи = Истина;
		
		Подключение.ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НС, КомЧек);
	КонецЦикла; 
	ЗаполнитьОплату(Подключение, КомЧек);
КонецПроцедуры

Процедура ЗаполнитьОплату(Подключение, Комчек)
	НСОплата = КомЧек.Оплата.Добавить();			
	НСОплата.ВидОплаты = Подключение.Справочники.ВидыОплатЧекаККМ.Наличные;
	НСОплата.Сумма = КомЧек.Товары.Итог("Сумма");
КонецПроцедуры

Процедура ЗаполнитьДисконтнуюКартуПоКонтрагенту(Подключение, КонтрагентУПП, КомЧек, Отказ)
	ВладелецКарты = Неопределено;
	Если НЕ ПустаяСтрока(КонтрагентУПП.ИНН) Тогда
		ВладелецКарты = Подключение.Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", КонтрагентУПП.ИНН);
	Иначе
		ВладелецКарты = Подключение.Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ", КонтрагентУПП.КодПоЕДРПОУ);
	КонецЕсли; 
	
	Если ПустаяСтрока(ВладелецКарты.Code) Тогда
		Сообщить("Не найден Контрагент в при поиске дисконтной карты!");
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	Запрос = Подключение.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформационныеКарты.Ссылка КАК Карта
	               |ИЗ
	               |	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	               |ГДЕ
	               |	ИнформационныеКарты.ВладелецКарты.Код = &ВладелецКарты";
	Запрос.УстановитьПараметр("ВладелецКарты", ВладелецКарты.Code);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КомЧек.ДисконтнаяКарта = Выборка.Карта;			
	Иначе
		Отказ = Истина;
		Сообщить("Не найдена дисконтная карта!");
	КонецЕсли; 	
КонецПроцедуры

Функция СформироватьПеремещениеИВнутреннийЗаказ(Заказ, ТоварнаяЧасть, Отказ)
	ВнутреннийЗаказ = СформироватьВнутреннийЗаказ(Заказ, ТоварнаяЧасть, Отказ);
	Если НЕ Отказ Тогда
		Возврат СформироватьПеремещение(ВнутреннийЗаказ, Отказ);		
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция СформироватьВнутреннийЗаказ(Заказ, ТоварнаяЧасть, Отказ)
	Внутренний = Документы.ВнутреннийЗаказ.СоздатьДокумент();
	
	Внутренний.Дата = Заказ.ДатаОтгрузки+1;
	Внутренний.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад;	
	Внутренний.ДатаОтгрузки	= Заказ.ДатаОтгрузки;	
	Внутренний.ДокументОснование = Заказ;
	
	РозничныйСклад = ПолучитьРозничныйСкладПоОсновному(Заказ.СкладГруппа);
	
	Если РозничныйСклад = Неопределено Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли; 
	
	Внутренний.Заказчик	= РозничныйСклад;
	Внутренний.Контрагент = Заказ.Контрагент; 
	Внутренний.Организация = Заказ.Организация;
	Внутренний.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	Внутренний.Подразделение = Заказ.Подразделение;
	Внутренний.ТипЦен = Заказ.ТипЦен;
	
	Для каждого СтрокаТЧ Из ТоварнаяЧасть Цикл
		НС = Внутренний.Товары.Добавить();			
		ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ);
	КонецЦикла; 
	Попытка
		Внутренний.Записать(РежимЗаписиДокумента.Проведение);		
	Исключение		
	    Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "" + ОписаниеОшибки();
		Сообщение.Сообщить(); 		
		Отказ = Истина;
		Возврат Неопределено;
	КонецПопытки; 
	Возврат Внутренний.Ссылка;	
КонецФункции

Функция СформироватьПеремещение(ВнутреннийЗаказ, Отказ)
	Перемещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
	Перемещение.СкладОтправитель = ВнутреннийЗаказ.ДокументОснование.СкладГруппа;
	Перемещение.Заполнить(ВнутреннийЗаказ);	
	Перемещение.Дата = ВнутреннийЗаказ.Дата+3;
	Перемещение.Выгружен = Истина;
	Перемещение.РазрешитьЗаписьВыгруженного = Истина;
	Попытка
		Перемещение.Записать(РежимЗаписиДокумента.Проведение);	
		Возврат Перемещение.Ссылка;
	Исключение
	    Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат Неопределено;
	КонецПопытки;	
КонецФункции

Процедура СформироватьПереоценку(Подключение, Заказ, ТоварнаяЧасть, СтруктураРеквизитовКолора, Отказ)
	Дата = Заказ.ДатаОтгрузки + 2;
	
	Переоценка = Документы.ПереоценкаТоваровВРознице.СоздатьДокумент();	
	Переоценка.Дата = Дата;
	Переоценка.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВРознице;
	Переоценка.Организация = Заказ.Организация;
	Переоценка.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Переоценка.Подразделение =  Заказ.Подразделение;
	Переоценка.Склад = ПолучитьРозничныйСкладПоОсновному(Заказ.СкладГруппа);
	
	Для каждого СтрокаТовара Из ТоварнаяЧасть Цикл
		НС = Переоценка.Товары.Добавить();
		НС.Номенклатура = СтрокаТовара.Номенклатура;
		НС.Количество = СтрокаТовара.Количество;
		НС.ЕдиницаИзмерения = СтрокаТовара.Номенклатура.ЕдиницаХраненияОстатков;
		НС.Коэффициент = СтрокаТовара.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		НС.ЦенаВРознице = СтрокаТовара.Цена;
	КонецЦикла;
	
	Попытка
		Переоценка.Записать(РежимЗаписиДокумента.Проведение);	
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецПопытки;	
	
	Переоценка = Подключение.Документы.ПереоценкаТоваровВРознице.СоздатьДокумент();
	
	Переоценка.Дата = Дата;
	Переоценка.ВидОперации = Подключение.Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВРознице;
	Переоценка.Организация = СтруктураРеквизитовКолора.Организация;
	Переоценка.Ответственный = Подключение.Справочники.Пользователи.НайтиПоКоду(ПараметрыСеанса.ТекущийПользователь.Код);
	Переоценка.Подразделение =  СтруктураРеквизитовКолора.ПодразделениеОрганизации;
	Переоценка.Склад = СтруктураРеквизитовКолора.Склад;
	
	Для каждого СтрокаТовара Из ТоварнаяЧасть Цикл
		НС = Переоценка.Товары.Добавить();
		Номенклатура = Подключение.Справочники.Номенклатура.НайтиПоКоду(СтрокаТовара.Номенклатура.Код);
		Если Номенклатура = Неопределено Тогда
			Сообщить("" +  СтрокаТовара.Номенклатура + " не найдена в официальной базе!");
			Отказ = Истина;
			Возврат;	
		КонецЕсли; 
		НС.Номенклатура = Номенклатура;
		НС.Количество = СтрокаТовара.Количество;
		НС.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
		НС.Коэффициент = Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		НС.ЦенаВРознице = СтрокаТовара.Цена;
	КонецЦикла;
	
	Попытка
		Переоценка.Записать(Подключение.РежимЗаписиДокумента.Проведение);	
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецПопытки;	
КонецПроцедуры

Процедура ФормированиеПакетаФинансовыхДОкументов(Заказ, МассивСтрокЧека, Отказ)
	РКО = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	
	ДоговорКонтрагентаНПТ = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию(Лев("НПТ - " + Заказ.ДоговорКонтрагента.Наименование, 50),,,Заказ.Контрагент);
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагентаНПТ) Тогда
		Отказ = Истина;
		Сообщить("Не найден договор в НПТ!");
		Возврат;
	КонецЕсли; 
	РКО.Дата = ПолучитьВремяПоЗаказу(Заказ);
	РКО.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("980");
	РКО.ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ;
	РКО.ВидОперации	= Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателюНал;
	РКО.Выдать = ДоговорКонтрагентаНПТ.Владелец.Наименование;
	РКО.ДоговорКонтрагента = ДоговорКонтрагентаНПТ;
	РКО.Касса = Справочники.Кассы.НайтиПоКоду("000000333"); //Касса НПТ
	РКО.Контрагент = ДоговорКонтрагентаНПТ.Владелец;
	РКО.НазначениеДенежныхСредств = Справочники.НазначенияНаличныхДенежныхСредств.Прочее;
	//РКО.НомерОрдера
	РКО.Оплачено = Истина;
	РКО.Организация = Справочники.Организации.НайтиПоКоду("ЭК-000002");
	РКО.Основание = "Договір: " +  ДоговорКонтрагентаНПТ.Наименование;
	РКО.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	РКО.ОтражатьВБухгалтерскомУчете	= Истина;
	РКО.ОтражатьВУправленческомУчете = Истина;
	РКО.ОтражатьПоЗатратам = Ложь;
	РКО.ОтраженоВОперУчете = Истина;
	РКО.Подразделение = Заказ.Подразделение;
	
	Сумма = 0;
	Для каждого СтрокаМассива Из МассивСтрокЧека  Цикл
		Сумма = Сумма + СтрокаМассива.Сумма;
	КонецЦикла; 
	РКО.СуммаДокумента = Сумма;
	
	
	Расшифровка = РКО.РасшифровкаПлатежа.Добавить();
	Расшифровка.ДоговорКонтрагента = ДоговорКонтрагентаНПТ;
	Расшифровка.Сделка = Заказ;	
	Расшифровка.КурсВзаиморасчетов = 1;
	Расшифровка.СуммаПлатежа = Сумма;
	Расшифровка.КратностьВзаиморасчетов	= 1;
	Расшифровка.СуммаВзаиморасчетов = Сумма;
	Расшифровка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	СуммаНДС = 0;
	Для каждого СтрокаМассива Из МассивСтрокЧека  Цикл
		СуммаНДС = СуммаНДС + СтрокаМассива.Сумма*0.2;
	КонецЦикла;
	
	Расшифровка.СуммаНДС = Окр(СуммаНДС, 2); 
	Расшифровка.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000003");
	Расшифровка.СчетУчетаРасчетовСКонтрагентом	= ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПокупателями;
	Расшифровка.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПокупателями; 
	Расшифровка.Проект = ДоговорКонтрагентаНПТ.ОсновнойПроект;
		
	Попытка
		РКО.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	    Отказ = Истина;
		Сообщить("РКО не создано " + Символы.ПС + ОписаниеОшибки()); 
	КонецПопытки; 
КонецПроцедуры
    
Функция КонвертацияЗаказаВЧек(Резерв) 
	Возврат ПолучитьСтруктуруИзДокумента(Резерв);	
КонецФункции 

//Конвертирует любой документ в структуру
Функция ПолучитьСтруктуруИзДокумента(Документ) Экспорт
	Результат = Новый Структура;
	Схема = Документ.Метаданные();
	Для каждого Реквизит Из Схема.Реквизиты Цикл
		Результат.Вставить(Реквизит.Имя, Документ [Реквизит.Имя]); 
	КонецЦикла; 
	
	Табчасти = Схема.ТабличныеЧасти;
	Для каждого ТабЧасть Из Табчасти Цикл
		Результат.Вставить(ТабЧасть.Имя, Документ [ТабЧасть.Имя].Выгрузить()); 
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПолучитьПодключениеКСервернойБД()	
	Параметры = "Srvr=""dataserv"";Ref=""color"";Usr=""ДляОбмена"";Pwd=""22121981"";";
	V83COMConnector = Новый COMОбъект("V83.COMConnector");
	Попытка
		Возврат V83COMConnector.Connect(Параметры);
	Исключение
		Предупреждение ("Ошибка подключения!");
		Возврат Неопределено;
	КонецПопытки;	
КонецФункции
 
Функция ЕстьЗадолженность(СсылкаНаЗаказ, ДоговорКонтрагента)
	ДатаОтгрузки = ПолучитьВремяПоЗаказу(СсылкаНаЗаказ);
		
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		Если НЕ РольДоступна("ПроведениеПлатежныхДокументовБезКонтроляПоРД") И ДоговорКонтрагента.КонтролироватьСуммуЗадолженности Тогда
			
			// Контроль общей суммы задолженности по договору 
			ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");					
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
			Запрос.УстановитьПараметр("НаДату", ДатаОтгрузки);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВзаиморасчетыПоДоговору.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&НаДату, ДоговорКонтрагента = &ДоговорКонтрагента) КАК ВзаиморасчетыПоДоговору
			|
			|ДЛЯ ИЗМЕНЕНИЯ";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				СуммаВзаиморасчетовОстаток = ?(Выборка.СуммаВзаиморасчетовОстаток= NULL, 0, Выборка.СуммаВзаиморасчетовОстаток);
				ДокументОбъект = СсылкаНаЗаказ.ПолучитьОбъект();
				
				СуммаВзаиморасчетовПоДокументу = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СсылкаНаЗаказ.СуммаДокумента, 
				СсылкаНаЗаказ.ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов, 
				ЗаполнениеДокументов.КурсДокумента(ДокументОбъект,ВалютаРегламентированногоУчета), СсылкаНаЗаказ.КурсВзаиморасчетов, 
				ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), СсылкаНаЗаказ.КратностьВзаиморасчетов);
				
				Валюта = ?(ДоговорКонтрагента.ВалютаВзаиморасчетов = NULL, "", ДоговорКонтрагента.ВалютаВзаиморасчетов);
				СуммаЗадолженности =  СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоДокументу;
				Если СуммаЗадолженности > ДоговорКонтрагента.ДопустимаяСуммаЗадолженности Тогда
					Сообщить("Сумма задолженности " + СуммаЗадолженности + " грн., превышает допустимую " + ДоговорКонтрагента.ДопустимаяСуммаЗадолженности + " грн");
					Возврат Истина;	
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("НаДату", ДатаОтгрузки);
	
	// Выбирает дату самого раннего документа из остатков по договору
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента,
	|	МИНИМУМ(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата) КАК ДатаПервогоДокумента
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(&НаДату, ДоговорКонтрагента = &ДоговорКонтрагента) КАК ВзаиморасчетыПоДокументамОстатки
	|ГДЕ
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки";
	
	РезультатЗапр = Запрос.Выполнить();
	
	Выборка = РезультатЗапр.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ДопустимоеЧислоДнейЗадолженности = ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
		
		Если Константы.СпособКонтроляДнейЗадолженности.Получить() = Перечисления.СпособыКонтроляДнейЗадолженности.ПоКалендарнымДням Тогда
			РазницаДатВСекундах = (СсылкаНаЗаказ.Дата - Выборка.ДатаПервогоДокумента);
			
			РазницаДней = Цел(РазницаДатВСекундах/(24 * 60 * 60));
		Иначе
			РазницаДней = ЗаполнениеДокументов.ЧислоРабочихДней(Выборка.ДатаПервогоДокумента, СсылкаНаЗаказ.Дата);
		КонецЕсли;
		
		Если РазницаДней > ДопустимоеЧислоДнейЗадолженности Тогда
			Сообщить("Дни задолженности " + РазницаДней + " дня, превышают допустимые " + ДопустимоеЧислоДнейЗадолженности + " дней");
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Процедура СоздатьКорректировкуЗаказа(Заказ, ТоварнаяЧасть, Отказ)
	Корректировка = Документы.КорректировкаЗаказаПокупателя.СоздатьДокумент();
	Корректировка.Дата = ПолучитьВремяПоЗаказу(Заказ);
	Корректировка.Заполнить(Заказ);	
	ТЗ = Корректировка.Товары.Выгрузить(Новый Структура("Размещение", ПолучитьРозничныйСкладПоОсновному(Заказ.СкладГруппа)));
	Корректировка.Товары.Загрузить(ТЗ);
	Попытка
		Корректировка.Записать(РежимЗаписиДокумента.Проведение);	
	Исключение
	    Сообщить(ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки; 		
КонецПроцедуры
   
Функция ПолучитьСтруктуруРеквизитовКолор(Подключение, КодСклада)
	НЗ = Подключение.РегистрыСведений.СоответствиеСкладаМагазина.СоздатьНаборЗаписей();
	НЗ.Отбор.КодСкладаУПП.Установить(КодСклада);
	НЗ.Прочитать();
	Если НЗ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Ответ = Новый Структура;
	Ответ.Вставить("Организация",НЗ.Get(0).Организация);
	Ответ.Вставить("ПодразделениеОрганизации", НЗ.Get(0).ПодразделениеОрганизации);
	Ответ.Вставить("Склад", НЗ.Get(0).Склад);
	Ответ.Вставить("КассаККМ", НЗ.Get(0).КассаККМ);
	Ответ.Вставить("ТипЦен", НЗ.Get(0).ТипЦен);
	Возврат Ответ;
КонецФункции

Функция ПолучитьРозничныйСкладПоОсновному(ОсновнойСклад)
	НЗ = РегистрыСведений.СоответствиеСкладаИМагазина.СоздатьНаборЗаписей();
	НЗ.Отбор.ОсновнойСклад.Установить(ОсновнойСклад);
	НЗ.Прочитать();
	Если НЗ.Количество() = 0 Тогда
		Сообщить("Не найдено соответствие розничного склада, складу " + ОсновнойСклад);		
		Возврат Неопределено;
	КонецЕсли; 	
	
	Возврат НЗ[0].СкладМагазин;
КонецФункции
 
Функция ОбъединитьМассивы(Массив1, Массив2)
	Для каждого Элемент Из Массив2 Цикл
		Массив1.Добавить(Элемент);
	КонецЦикла; 	
	Возврат Массив1;
КонецФункции
 
Процедура ПроверитьКонтрагента(Контрагент, Отказ)
	Если ПустаяСтрока(Контрагент.ИНН) И ПустаяСтрока(Контрагент.КодПоЕДРПОУ) 
		Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "У контрагента отсутствует ИНН или Код по ЕДРПОУ!";
		Сообщение.Сообщить(); 
		Отказ = Истина;	
	Иначе
		Попытка
			ИНН = Число(?(Контрагент.ИНН = "","0",Контрагент.ИНН));
			КодПоЕДРПОУ = Число(Контрагент.КодПоЕДРПОУ);	
		Исключение
		    Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "У контрагента не числовой ИНН """ 
								+ Контрагент.ИНН + """ или Код по ЕДРПОУ """ 
								+ Контрагент.КодПоЕДРПОУ + """";
			Сообщение.Сообщить(); 
			Отказ = Истина;	
		КонецПопытки; 		
	КонецЕсли; 		
КонецПроцедуры
 
Процедура ПроверитьНаНаличиеЧекаВБазеКолор(Подключение, НомерЧека, ДатаЧека, Отказ)
	Номера = Подключение.ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(НомерЧека, ";");
	Подключение.НачатьТранзакцию();
	Запрос = Подключение.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЧекККМ.Ссылка
	               |ИЗ
	               |	Документ.ЧекККМ КАК ЧекККМ
	               |ГДЕ
	               |	ЧекККМ.Номер В(&Номер)";
	Запрос.УстановитьПараметр("Номер", Номера);
	//Запрос.УстановитьПараметр("Дата", ДатаЧека);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл		 
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Объект.ЧекПробитНаККМ Тогда
			Отказ = Истина;		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Чек " + Объект.Код + " фискализирован. Выгружать нельзя";
			Сообщение.Сообщить();
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Объект.Удалить();		
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеТоваров.Ссылка КАК Документ
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |ГДЕ
	               |	ПеремещениеТоваров.Комментарий ПОДОБНО ""%"" + &НомерЧека + ""%""";
	Для каждого Номер Из Номера Цикл
		Если ПустаяСтрока(Номер) Тогда
			Продолжить;
		КонецЕсли; 
		Запрос.УстановитьПараметр("НомерЧека", Номер);
		Выборка = Запрос.Выполнить().Выбрать();	
		Если Выборка.Следующий() Тогда		 
			Объект = Выборка.Документ.ПолучитьОбъект();
			Объект.Удалить();		
		КонецЕсли;
	КонецЦикла; 
	Подключение.ЗафиксироватьТранзакцию();
КонецПроцедуры
   
Процедура УдалитьВсеСвязанныеДокументы(Заказ, Отказ)
	СсылкаНаЗаказ = Заказ.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СвязанныеДокументы.Ссылка КАК Документ
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&СсылкаНаЗаказ) КАК СвязанныеДокументы";
	Запрос.УстановитьПараметр("СсылкаНаЗаказ", СсылкаНаЗаказ);
	Выборка = Запрос.Выполнить().Выбрать();
	Попытка
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
				Запрос.УстановитьПараметр("СсылкаНаЗаказ", Выборка.Документ);
				ВыборкаПеремещений = Запрос.Выполнить().Выбрать(); 
				Пока ВыборкаПеремещений.Следующий() Цикл
					Перемещение = ВыборкаПеремещений.Документ.ПолучитьОбъект();
					Перемещение.Удалить();
				КонецЦикла; 
				ВнутреннийЗаказ = Выборка.Документ.ПолучитьОбъект();
				ВнутреннийЗаказ.Удалить();
			ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.РезервированиеТоваров") И Выборка.Документ.Проведен Тогда 
				Продолжить;
			ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.КорректировкаЗаказаПокупателя") Тогда 
				Если Выборка.Документ.Товары.Количество() > 0 
					И НЕ ЗначениеЗаполнено(Выборка.Документ.Товары[0].Размещение)  Тогда
					//в случае если корректировка создана вручную ее надо оставить
					Продолжить;
				Иначе
					УдалитьОбъект(Выборка.Документ);
				КонецЕсли; 
			Иначе
				//Объект = Выборка.Документ.ПолучитьОбъект();
				//Если Объект <> Неопределено Тогда
				//	Объект.Удалить();	
				//КонецЕсли; 	
				УдалитьОбъект(Выборка.Документ);
			КонецЕсли; 
		КонецЦикла;  	
	Исключение
	    Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить(); 
		Отказ = Истина;
	КонецПопытки; 
КонецПроцедуры

Процедура УдалитьОбъект(СсылкаНаОбъект)
	Объект = СсылкаНаОбъект.ПолучитьОбъект();
	Если Объект <> Неопределено Тогда
		Объект.Удалить();	
	КонецЕсли; 
КонецПроцедуры
 

Процедура ВыгрузитьПеремещение(Подключение, СсылкаНаПеремещение, НомерЧекаВОфициальнойБазе, СтруктураРеквизитовКолора, Отказ)
	Подключение.НачатьТранзакцию();
	Перемещение = Подключение.Документы.ПеремещениеТоваров.СоздатьДокумент();
	Перемещение.Дата = СсылкаНаПеремещение.Дата;
	Перемещение.ВидОперации = Подключение.Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	Перемещение.Комментарий = НомерЧекаВОфициальнойБазе; 
	Перемещение.Организация = СтруктураРеквизитовКолора.Организация;
	Перемещение.Ответственный = Подключение.Справочники.Пользователи.НайтиПоКоду(ПараметрыСеанса.ТекущийПользователь.Код); 	
	Перемещение.ОтражатьВБухгалтерскомУчете = Истина;
	Перемещение.ОтражатьВУправленческомУчете = Истина;
	Перемещение.СкладОтправитель = ПолучитьСкладПоСоответствиюВКолор(Подключение, СсылкаНаПеремещение.СкладОтправитель);
	Перемещение.СкладПолучатель = СтруктураРеквизитовКолора.Склад;
	Для каждого СтрокаТЧ Из СсылкаНаПеремещение.Товары Цикл
		НС = Перемещение.Товары.Добавить();
		Номенклатура = Подключение.Справочники.Номенклатура.НайтиПоКоду(СтрокаТЧ.Номенклатура.Код);		
		Если Номенклатура = Неопределено Тогда
			Сообщить("" +  СтрокаТЧ.Номенклатура + " не найдена в официальной базе!");
			Отказ = Истина;
			Возврат;	
		КонецЕсли;
		НС.Номенклатура = Номенклатура;
		НС.ЕдиницаИзмерения = НС.Номенклатура.ЕдиницаХраненияОстатков;
		НС.Коэффициент = НС.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		НС.Количество = СтрокаТЧ.Количество;
		НС.Цена = СтрокаТЧ.Цена;
		НС.СчетУчетаБУ = Подключение.ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТЧ.СчетУчетаБУ.Код);
		НС.НовыйСчетУчетаБУ  = Подключение.ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТЧ.НовыйСчетУчетаБУ.Код);
		НС.Качество = Подключение.Справочники.Качество.Новый;
		НС.НалоговоеНазначение = Подключение.Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
	КонецЦикла; 
	Попытка
		Перемещение.Записать(Подключение.РежимЗаписиДокумента.Проведение);	
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Отказ = Истина;
		Подключение.ОтменитьТранзакцию();
		ВОзврат;
	КонецПопытки; 
	Подключение.ЗафиксироватьТранзакцию();
КонецПроцедуры
 
Функция ПолучитьСкладПоСоответствиюВКолор(Подключение, СкладОтправитель)
	Запрос = Подключение.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответсвиеСкладов.СкладОф
	|ИЗ
	|	РегистрСведений.СоответсвиеСкладов КАК СоответсвиеСкладов
	|ГДЕ
	|	СоответсвиеСкладов.Код = &Код";
	Запрос.УстановитьПараметр("Код", СкладОтправитель.Код);
	Выборка = Запрос.Выполнить().Выбрать();	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СкладОф;
	КонецЕсли; 
	Возврат Неопределено;
КонецФункции

Функция ПолучитьВремяПоЗаказу(Заказ)
	ДатаЗаказа 		= Заказ.Дата;
	ДатаОтгрузки 	= Заказ.ДатаОтгрузки;
	Если НЕ ЗначениеЗаполнено(ДатаЗаказа) ИЛИ  НЕ ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		Возврат Дата(1,1,1);
	КонецЕсли; 
	Возврат ДатаОтгрузки + Час(ДатаЗаказа)*3600 + Минута(ДатаЗаказа)*60 + Секунда(ДатаЗаказа);
КонецФункции
 