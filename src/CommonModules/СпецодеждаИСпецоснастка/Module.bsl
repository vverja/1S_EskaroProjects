



///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СПИСАНИЯ ПАРТИЙ МАТЕРИАЛОВ

// Добавляет строку в ТаблицуСообщений
//
// Параметры
//    ТипУчета – Тип: Строка –  тип учета (1.Упр, 2.Бух, 3.Нал)
//                 
//    ОсталосьСписать – Тип: Число – Сколько не списано по партиям
//                 
//    СтрокаТЧ – Тип: Строка таблицы значений – строка табличной части
//                 
//    ТаблицаСообщений – Тип: ТаблицаЗначений – таблица сообщений
//                 
//
Процедура ДобавитьИнформациюДляСообщений(ТипУчета, ОсталосьСписать, СтрокаТЧ, ТаблицаСообщений)

	НоваяСтрока = ТаблицаСообщений.Добавить();
	НоваяСтрока.НомерСтрокиДокумента = СтрокаТЧ.НомерСтрокиДокумента;
	НоваяСтрока.ТипУчета             = ТипУчета;
	НоваяСтрока.ОсталосьСписать      = ОсталосьСписать;
	НоваяСтрока.СтрокаТаблицы        = СтрокаТЧ;

КонецПроцедуры // ДобавитьИнформациюДляСообщений()

// Процедура очищает значения структуры ключевых полей
// 
Процедура ОчиститьЗначенияСтруктурыКлючевыхПолей(СтруктураКлючевыхПолей)

	Для каждого КлючЗначение Из СтруктураКлючевыхПолей Цикл
	
		СтруктураКлючевыхПолей.Вставить(КлючЗначение.Ключ, Неопределено);	
	
	КонецЦикла;	

КонецПроцедуры // ОчиститьЗначенияСтруктурыКлючевыхПолей()

// Функция проверяет, изменились ли ключевые поля в строке табличной части
// по отношению к текущим значениям. Если изменились то изменяет текущие значения
//
// Параметры
// 	СтрокаТЧ  – Тип:Строка таблицы значений – строка для проверки 
//                 
//  СтруктураКлючевыхПолей  – Тип: Структура – структура текущих значений
//                 
//
// Возвращаемое значение:
//   Тип: Булево  –  Истина, если изменились поля
//
Функция ИзменилисьКлючевыеПоля(СтрокаТЧ, СтруктураКлючевыхПолей)

	Результат = Ложь;
	
	Для каждого КлючЗначение Из СтруктураКлючевыхПолей Цикл
		
		ИмяКолонки = КлючЗначение.Ключ;
		
		Если СтрокаТЧ[ИмяКолонки] <> КлючЗначение.Значение Тогда
			
			 СтруктураКлючевыхПолей.Вставить(ИмяКолонки, СтрокаТЧ[ИмяКолонки]);
			 Результат = Истина;
			
		КонецЕсли;			
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ИзменилисьКлючевыеПоля()

// Копирует строку таблицы значений
//
Процедура СкопироватьСтроку(СтрокаОткуда, СтрокаКуда, КоличествоКолонок)

	Для Н = 0 По КоличествоКолонок - 1 Цикл
	
		СтрокаКуда[Н] = СтрокаОткуда[Н];	
	
	КонецЦикла;	

КонецПроцедуры // СкопироватьСтроку()

// Заполняет строку таблицы движения необходимыми значениями для списания партии
//
Процедура СписатьПартиюМатериалов(КоэфСписания, СтруктураОстатков, ТипУчета, СтрокаТЧ, 
	                              Выборка, ТаблицаДвижений, Проводки)
    // Заполнение полей списания
    СтрокаРасхода = ТаблицаДвижений.Добавить();
	
	СтрокаРасхода.Активность  = Истина;
	СтрокаРасхода.Период      = СтрокаТЧ.Период;
	СтрокаРасхода.ВидДвижения = ВидДвиженияНакопления.Расход;
	
	Если ТипУчета = "2.Бух" Тогда
		СтрокаРасхода.Организация = СтрокаТЧ.Организация;	
	КонецЕсли;
	
	СтрокаРасхода.Подразделение              = ?(ТипУчета = "1.Упр", СтрокаТЧ.Подразделение, СтрокаТЧ.ПодразделениеОрганизации);
	СтрокаРасхода.Номенклатура               = Выборка.Номенклатура;
	СтрокаРасхода.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
	СтрокаРасхода.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
	СтрокаРасхода.ФизЛицо                    = Выборка.ФизЛицо;
	СтрокаРасхода.СхемаНазначенияИспользования    = Выборка.СхемаНазначенияИспользования;
	СтрокаРасхода.СпособОтраженияРасходов    = Выборка.СпособОтраженияРасходов;
	СтрокаРасхода.СрокПолезногоИспользования = Выборка.СрокПолезногоИспользования;
	СтрокаРасхода.Качество                   = Выборка.Качество;
	СтрокаРасхода.ДокументПередачи           = Выборка.ДокументПередачи;
	СтрокаРасхода.ДокументОприходования      = Выборка.ДокументОприходования;
	
	СтрокаРасхода.КодОперации          = СтрокаТЧ.КодОперации;
	СтрокаРасхода.СписаниеПартий       = Истина;
	СтрокаРасхода.НомерСтрокиДокумента = СтрокаТЧ.НомерСтрокиДокумента;
	
	Если ТипУчета = "2.Бух" Тогда
		
		СтрокаРасхода.НалоговоеНазначение             = Выборка.НалоговоеНазначение;
		СтрокаРасхода.НалоговоеНазначениеПоФакту      = Выборка.НалоговоеНазначение;
		
	КонецЕсли;
	
	Для каждого КлючЗначение Из СтруктураОстатков Цикл
		
		ИмяПоля                = КлючЗначение.Ключ;
		СтрокаРасхода[ИмяПоля] = КоэфСписания * КлючЗначение.Значение;
		СтруктураОстатков.Вставить(ИмяПоля, КлючЗначение.Значение - СтрокаРасхода[ИмяПоля]); 
	
	КонецЦикла;
	
	// Особенности поведения, зависимые от вида операции
	Если СтрокаТЧ.КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатации Тогда
		
		СтрокаПрихода = ТаблицаДвижений.Добавить();
		СкопироватьСтроку(СтрокаРасхода, СтрокаПрихода, ТаблицаДвижений.Колонки.Количество());
		
		СхемаНазначенияИспользованияНовое = СтрокаТЧ.СхемаНазначенияИспользованияНовое;
		
		СтрокаПрихода.ВидДвижения             = ВидДвиженияНакопления.Приход;
		СтрокаПрихода.Подразделение           = ?(ТипУчета = "1.Упр", СтрокаТЧ.ПодразделениеКуда, СтрокаТЧ.ПодразделениеОрганизацииКуда);
		СтрокаПрихода.ФизЛицо                 = СтрокаТЧ.ФизЛицоКуда;
		СтрокаПрихода.СхемаНазначенияИспользования 	= СхемаНазначенияИспользованияНовое;
		СтрокаПрихода.СпособОтраженияРасходов 		= СтрокаТЧ.СпособОтраженияРасходовНовое;
		СтрокаПрихода.СрокПолезногоИспользования 	= СтрокаТЧ.СрокПолезногоИспользованияНовое;
		СтрокаПрихода.Качество                		= СтрокаТЧ.КачествоНовое;
		
		Если (ТипУчета = "2.Бух") И (Выборка.ВидМатериала <> Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет) Тогда
		
			Если  Выборка.СхемаНазначенияИспользования <> СхемаНазначенияИспользованияНовое Тогда
				// возможно нужны корректировочные проводки
				
				СчетПередачиБУНовый = СхемаНазначенияИспользованияНовое.СчетПередачиБУ;
				
				Если Выборка.СчетПередачиБУ <> СчетПередачиБУНовый Тогда
					
					СуммаПроводки = СтрокаПрихода.Стоимость;
					
					// проводка нужна даже если СуммаПроводки = 0,
					// потому что есть количество
					Проводка = Проводки.Добавить();
					
					Проводка.Период       = СтрокаТЧ.Период;
					Проводка.Содержание   = "Перемещение в эксплуатации";
					Проводка.НомерЖурнала = "СО";
					Проводка.Организация  = СтрокаТЧ.Организация;
					Проводка.Сумма        = СуммаПроводки;
					
					Проводка.СуммаНУДт = СтрокаПрихода.СтоимостьНУ;
					Проводка.НалоговоеНазначениеДт = СтрокаПрихода.НалоговоеНазначение;
					
					Проводка.СчетДт = СчетПередачиБУНовый;
					
					Если Проводка.СчетДт.Количественный Тогда
						
						Проводка.КоличествоДт = СтрокаПрихода.Количество;
						
					КонецЕсли;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаПрихода.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизации", СтрокаПрихода.ФизЛицо);
					
					Проводка.СуммаНУКт = СтрокаПрихода.СтоимостьНУ;
					Проводка.НалоговоеНазначениеКт = СтрокаПрихода.НалоговоеНазначение;
					
					Проводка.СчетКт = Выборка.СчетПередачиБУ;
					
					Если Проводка.СчетКт.Количественный Тогда
						
						Проводка.КоличествоКт = СтрокаРасхода.Количество;
						
					КонецЕсли;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаРасхода.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизации", СтрокаРасхода.ФизЛицо);
					
				КонецЕсли;
				
				СчетАмортизацииБУНовый = СхемаНазначенияИспользованияНовое.СчетАмортизацииБУ;
				
				Если Выборка.СчетАмортизацииБУ <> СчетАмортизацииБУНовый Тогда
					
					СуммаПроводки = СтрокаПрихода.Стоимость;
					
					// проводка нужна даже если СуммаПроводки = 0,
					// потому что есть количество
					Проводка = Проводки.Добавить();
					
					Проводка.Период       = СтрокаТЧ.Период;
					Проводка.Содержание   = "Перемещение в эксплуатации";
					Проводка.НомерЖурнала = "СО";
					Проводка.Организация  = СтрокаТЧ.Организация;
					Проводка.Сумма        = СуммаПроводки;
					
					Проводка.СуммаНУДт = СтрокаПрихода.СтоимостьНУ;
					Проводка.НалоговоеНазначениеДт = СтрокаПрихода.НалоговоеНазначение;
					
					Проводка.СчетДт = Выборка.СчетАмортизацииБУ;
					
					Если Проводка.СчетДт.Количественный Тогда
						
						Проводка.КоличествоДт = СтрокаРасхода.Количество;
						
					КонецЕсли;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаРасхода.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизации", СтрокаРасхода.ФизЛицо);
					
					Проводка.СуммаНУКт = СтрокаПрихода.СтоимостьНУ;
					Проводка.НалоговоеНазначениеКт = СтрокаПрихода.НалоговоеНазначение;
					
					Проводка.СчетКт = СчетАмортизацииБУНовый;
					
					Если Проводка.СчетКт.Количественный Тогда
						
						Проводка.КоличествоКт = СтрокаПрихода.Количество;
						
					КонецЕсли;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаПрихода.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизации", СтрокаПрихода.ФизЛицо);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаТЧ.КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатации Тогда
		
		// Нужно погасить амортизацию для необоротных активов
		Если (ТипУчета = "2.Бух") И Выборка.ВидМатериала <> Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет Тогда
			
			СуммаПроводки = СтрокаРасхода.Стоимость;
				
			// проводка нужна даже если СуммаПроводки = 0,
			// потому что есть количество
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = СтрокаТЧ.Период;
			Проводка.Содержание   = "Списание из эксплуатации";
			Проводка.НомерЖурнала = "СО";
			Проводка.Организация  = СтрокаТЧ.Организация;
			Проводка.Сумма        = СуммаПроводки;
			
			Проводка.СуммаНУДт = СтрокаРасхода.СтоимостьНУ;
			Проводка.НалоговоеНазначениеДт = СтрокаРасхода.НалоговоеНазначение;
			
			Проводка.СчетДт = Выборка.СчетАмортизацииБУ;
			
			Если Проводка.СчетДт.Количественный Тогда
				
				Проводка.КоличествоДт = СтрокаРасхода.Количество;
				
			КонецЕсли;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаРасхода.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизации", СтрокаРасхода.ФизЛицо);
			
			Проводка.СуммаНУКт = СтрокаРасхода.СтоимостьНУ;
			Проводка.НалоговоеНазначениеКт = СтрокаРасхода.НалоговоеНазначение;
			
			Проводка.СчетКт = Выборка.СчетПередачиБУ;
			
			Если Проводка.СчетКт.Количественный Тогда
				
				Проводка.КоличествоКт = СтрокаРасхода.Количество;
				
			КонецЕсли;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаРасхода.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизации", СтрокаРасхода.ФизЛицо);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СписатьПартиюМатериалов()

// Заполняет структуру остатков по выборке
//
Процедура ЗаполнитьСтруктуруОстатков(СтруктураОстатков, ЭтоНалоговыйУчет, Выборка)

	СтруктураОстатков.Вставить("Количество", Выборка.Количество);
	СтруктураОстатков.Вставить("Стоимость" , Выборка.Стоимость);
	
	Если ЭтоНалоговыйУчет Тогда
		
		СтруктураОстатков.Вставить("СтоимостьНУ"  , Выборка.СтоимостьНУ);
		СтруктураОстатков.Вставить("НДСКредит"  , Выборка.НДСКредит);
		СтруктураОстатков.Вставить("НДСВходящий", Выборка.НДСВходящий);
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтруктуруОстатков()

// Производит заполнение таблицы движений для загрузки в набор движений
//
Процедура ПроизвестиСписаниеМатериалов(ТипУчета, СтруктураКлючевыхПолей, Выборка, 
	                                   ТаблицаДвижений, ТаблицаДокумента, ТаблицаСообщений, Проводки = Неопределено)

	СтруктураОстатков = Новый Структура;
	ЭтоНалоговыйУчет  = (ТипУчета = "2.Бух");
	ОчиститьЗначенияСтруктурыКлючевыхПолей(СтруктураКлючевыхПолей);
	
	//Обход таблицы документа и списание партий
	Для каждого СтрокаТЧ Из ТаблицаДокумента Цикл
		
		ОсталосьСписать = СтрокаТЧ.Количество;
	
		Если ИзменилисьКлючевыеПоля(СтрокаТЧ, СтруктураКлючевыхПолей) Тогда
			
			// Сброс выборки. Это несколько замедляет работу, но более надежно
			Выборка.Сбросить();
			
			Если НЕ Выборка.НайтиСледующий(СтруктураКлючевыхПолей) Тогда
				
				// Нет необходимых остатков
				ДобавитьИнформациюДляСообщений(ТипУчета, ОсталосьСписать, СтрокаТЧ, ТаблицаСообщений);
				СтруктураОстатков.Очистить();
				СтруктураОстатков.Вставить("Количество", 0);
				Продолжить;
				
			КонецЕсли;
			
			ЗаполнитьСтруктуруОстатков(СтруктураОстатков, ЭтоНалоговыйУчет, Выборка);
			
		КонецЕсли;
		
		Пока ОсталосьСписать > 0 Цикл
			
			Остаток = СтруктураОстатков.Количество;
			
			Если Остаток <= 0 Тогда
				
				Если НЕ Выборка.НайтиСледующий(СтруктураКлючевыхПолей) Тогда
					
					// Нет необходимых остатков
					ДобавитьИнформациюДляСообщений(ТипУчета, ОсталосьСписать, СтрокаТЧ, ТаблицаСообщений);
					Прервать;
					
				КонецЕсли;
				
				ЗаполнитьСтруктуруОстатков(СтруктураОстатков, ЭтоНалоговыйУчет, Выборка);
				
			Иначе
				
				Если ОсталосьСписать < Остаток Тогда
					// Все количество спишется с текущей партии
					
					КоэфСписания    = ОсталосьСписать / Остаток;
					ОсталосьСписать = 0;
					
				Иначе
					// Остаток меньше или равен тому, что нужно списать
					// списываем все
					КоэфСписания = 1;
					ОсталосьСписать = ОсталосьСписать - Остаток;
					
				КонецЕсли;	
				
				СписатьПартиюМатериалов(КоэфСписания, СтруктураОстатков, ТипУчета, СтрокаТЧ, Выборка, ТаблицаДвижений, Проводки);
			
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаДвижений.Сортировать("ВидДвижения Убыв, НомерСтрокиДокумента");

КонецПроцедуры // ПроизвестиСписаниеМатериалов()

// Процедура проводит переданный документ по учету партий материалов
//
// Параметры
//  ОбрабатываемыйДокумент - ДокументСсылка - проводимый документ
//  ТаблицаДокумента – ТаблицаЗначение – содержит движения документа по
//	                                     по регистру СписанныеМатериалыИзЭксплуатации
//
Процедура ДвижениеПартийМатериалов(ОбрабатываемыйДокумент, ТаблицаДокумента, Заголовок) Экспорт
	
	Если ТаблицаДокумента.Количество() = 0 Тогда
		
		//Нечего делать
		Возврат;
	 	
	КонецЕсли;
	
	// Заполнение необходимых переменных
	ПерваяСтрока =  ТаблицаДокумента[0];
	
	ОтражатьВУправленческомУчете = ПерваяСтрока.ОтражатьВУправленческомУчете;
	ОтражатьВБухгалтерскомУчете  = ПерваяСтрока.ОтражатьВБухгалтерскомУчете;
	
	Подразделение                = ПерваяСтрока.Подразделение;
	ПодразделениеОрганизации     = ПерваяСтрока.ПодразделениеОрганизации;
	
	УказыватьДокументПередачи    = ПерваяСтрока.УказыватьДокументПередачи;
	
	// вызов процедуры возможен и без проведения документа,
	// поэтому наборы записей должны быть в любом случае для очистки движений документа
	
	// управленческий учет
	НаборЗаписейУУ = РегистрыНакопления.ПартииМатериаловВЭксплуатации.СоздатьНаборЗаписей();
	НаборЗаписейУУ.Отбор.Регистратор.Значение = ОбрабатываемыйДокумент;
	
	// бухгалтерский учет
	НаборЗаписейБУ = РегистрыНакопления.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет.СоздатьНаборЗаписей();
	НаборЗаписейБУ.Отбор.Регистратор.Значение = ОбрабатываемыйДокумент;
	
	ПроводкиБУ     = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	ПроводкиБУ.Отбор.Регистратор.Значение = ОбрабатываемыйДокумент;
	
	// Создание таблицы сообщений.
	// Эта таблица будет накопливать информацию для сообщений пользователю
	// Списание партий не всегда будет совпадать с порядком следования                            
	// строк в документе, а сообщения  пользователю удобно получать
	// в этом порядке
	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("НомерСтрокиДокумента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
	ТаблицаСообщений.Колонки.Добавить("ТипУчета"            , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(5)));
	ТаблицаСообщений.Колонки.Добавить("ОсталосьСписать"     , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаСообщений.Колонки.Добавить("СтрокаТаблицы");
	
	// Создание структуры ключевых измерений
	СтруктураКлючевыхПолей = Новый Структура;
	СтруктураКлючевыхПолей.Вставить("Номенклатура");
	СтруктураКлючевыхПолей.Вставить("ХарактеристикаНоменклатуры");
	СтруктураКлючевыхПолей.Вставить("СерияНоменклатуры");
	СтруктураКлючевыхПолей.Вставить("СхемаНазначенияИспользования");
	СтруктураКлючевыхПолей.Вставить("СпособОтраженияРасходов");
	СтруктураКлючевыхПолей.Вставить("СрокПолезногоИспользования");
	СтруктураКлючевыхПолей.Вставить("ФизЛицо");

	Если УказыватьДокументПередачи Тогда
		
		СтруктураКлючевыхПолей.Вставить("ДокументПередачи");
		
	КонецЕсли;
	
	// Создание строки ключевых колонок для таблицы
	СтрокаКолонок = "";
	Разделитель   = "";
	
	Для каждого КлючЗначение Из СтруктураКлючевыхПолей Цикл
	
		СтрокаКолонок = СтрокаКолонок + Разделитель + КлючЗначение.Ключ;
		Разделитель = ",";
	
	КонецЦикла;
	
	// Создание запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаДату"                  , ОбрабатываемыйДокумент.МоментВремени());
	Запрос.УстановитьПараметр("Регистратор"             , ОбрабатываемыйДокумент);
	Запрос.УстановитьПараметр("Подразделение"           , Подразделение);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
	
	// Создание фильтра для остатков регистра
	СтрокаФильтра  = "";
	Разделитель    = Символы.ПС + " И ";
	
	Для каждого КлючЗначение Из СтруктураКлючевыхПолей Цикл
		
		ИмяПеременной = КлючЗначение.Ключ;
		МассивОтбора  = ТаблицаДокумента.ВыгрузитьКолонку(ИмяПеременной);
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОтбора);
		
		Если МассивОтбора.Количество() = 1 Тогда
			
			СтрокаФильтра = СтрокаФильтра + Разделитель 
							+ ИмяПеременной + " = &" + ИмяПеременной;
			Запрос.УстановитьПараметр(ИмяПеременной, МассивОтбора[0]);
			
		Иначе
			
			СтрокаФильтра = СтрокаФильтра + Разделитель 
							+ ИмяПеременной + " В (&" + ИмяПеременной + ")";
			Запрос.УстановитьПараметр(ИмяПеременной, МассивОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Партии.ТипУчета                                              КАК ТипУчета,
	|	СписанныеМатериалы.Номенклатура                              КАК Номенклатура,
	|	СписанныеМатериалы.ХарактеристикаНоменклатуры                КАК ХарактеристикаНоменклатуры,
	|	СписанныеМатериалы.СерияНоменклатуры                         КАК СерияНоменклатуры,
	|	СписанныеМатериалы.ФизЛицо                                   КАК ФизЛицо,
	|	СписанныеМатериалы.СхемаНазначенияИспользования              КАК СхемаНазначенияИспользования,
	|	СписанныеМатериалы.СпособОтраженияРасходов              	 КАК СпособОтраженияРасходов,
	|	СписанныеМатериалы.СрокПолезногоИспользования              	 КАК СрокПолезногоИспользования,
	|	СписанныеМатериалы.Качество                                  КАК Качество,
	|	СписанныеМатериалы.СхемаНазначенияИспользования.ВидМатериала      КАК ВидМатериала,
	|	СписанныеМатериалы.СхемаНазначенияИспользования.СчетПередачиБУ    КАК СчетПередачиБУ,
	|	СписанныеМатериалы.СхемаНазначенияИспользования.СчетАмортизацииБУ КАК СчетАмортизацииБУ,
	|	Партии.ДокументПередачи                                      КАК ДокументПередачи,
	|	Партии.ДокументОприходования                                 КАК ДокументОприходования," + ?(ОтражатьВБухгалтерскомУчете, "
	|	Партии.НалоговоеНазначение                                   КАК НалоговоеНазначение,
	|	Партии.НДСВходящий                                           КАК НДСВходящий,
	|	Партии.НДСКредит                                             КАК НДСКредит,", "") + "
	|	Партии.Количество                                            КАК Количество,
	|	Партии.Стоимость                                             КАК Стоимость,
	|	Партии.СтоимостьНУ                                           КАК СтоимостьНУ
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СписанныеМатериалы.Номенклатура               КАК Номенклатура,
	|		СписанныеМатериалы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СписанныеМатериалы.СерияНоменклатуры          КАК СерияНоменклатуры,
	|		СписанныеМатериалы.ФизЛицо                    КАК ФизЛицо,
	|		СписанныеМатериалы.СхемаНазначенияИспользования    КАК СхемаНазначенияИспользования,
	|		СписанныеМатериалы.СпособОтраженияРасходов 	  КАК СпособОтраженияРасходов,
	|		СписанныеМатериалы.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|		СписанныеМатериалы.Качество                   КАК Качество
	|	ИЗ
	|		РегистрСведений.СписанныеМатериалыИзЭксплуатации КАК СписанныеМатериалы
	|	ГДЕ
	|		СписанныеМатериалы.Регистратор = &Регистратор) КАК СписанныеМатериалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|		(" + ?(ОтражатьВУправленческомУчете, "
	|		ВЫБРАТЬ
	|			""1.Упр""                           КАК ТипУчета,
	|			ПартииУУ.Номенклатура               КАК Номенклатура,
	|			ПартииУУ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ПартииУУ.СерияНоменклатуры          КАК СерияНоменклатуры,
	|			ПартииУУ.ФизЛицо                    КАК ФизЛицо,
	|			ПартииУУ.СхемаНазначенияИспользования    КАК СхемаНазначенияИспользования,
	|			ПартииУУ.СпособОтраженияРасходов 	КАК СпособОтраженияРасходов,
	|			ПартииУУ.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|			ПартииУУ.Качество                   КАК Качество,
	|			ПартииУУ.ДокументПередачи           КАК ДокументПередачи,
	|			ПартииУУ.ДокументОприходования      КАК ДокументОприходования," + ?(ОтражатьВБухгалтерскомУчете, "
	|			NULL                                КАК НалоговоеНазначение,
	|			NULL                                КАК НДСВходящий,
	|			NULL                                КАК НДСКредит,", "") + "
	|			ПартииУУ.КоличествоОстаток          КАК Количество,
	|			ПартииУУ.СтоимостьОстаток           КАК Стоимость,
	|			0           						КАК СтоимостьНУ
	|		ИЗ
	|			РегистрНакопления.ПартииМатериаловВЭксплуатации.Остатки(&НаДату, 
	|			                  Подразделение = &Подразделение " + СтрокаФильтра + ") КАК ПартииУУ", "")
	        + ?(ОтражатьВУправленческомУчете И ОтражатьВБухгалтерскомУчете, "
	|		
	|		ОБЪЕДИНИТЬ ВСЕ", "") + ?(ОтражатьВБухгалтерскомУчете, "
	|		
	|		ВЫБРАТЬ
	|			""2.Бух""                           КАК ТипУчета,
	|			ПартииБУ.Номенклатура               КАК Номенклатура,
	|			ПартииБУ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ПартииБУ.СерияНоменклатуры          КАК СерияНоменклатуры,
	|			ПартииБУ.ФизЛицо                    КАК ФизЛицо,
	|			ПартииБУ.СхемаНазначенияИспользования    КАК СхемаНазначенияИспользования,
	|			ПартииБУ.СпособОтраженияРасходов 	КАК СпособОтраженияРасходов,
	|			ПартииБУ.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|			ПартииБУ.Качество                   КАК Качество,
	|			ПартииБУ.ДокументПередачи           КАК ДокументПередачи,
	|			ПартииБУ.ДокументОприходования      КАК ДокументОприходования," + ?(ОтражатьВБухгалтерскомУчете, "
	|			ПартииБУ.НалоговоеНазначение                                КАК НалоговоеНазначение,
	|			ПартииБУ.НДСВходящийОстаток                                 КАК НДСВходящий,
	|			ПартииБУ.НДСКредитОстаток                                КАК НДСКредит,", "") + "
	|			ПартииБУ.КоличествоОстаток          КАК Количество,
	|			ПартииБУ.СтоимостьОстаток           КАК Стоимость,
	|			ПартииБУ.СтоимостьНУОстаток         КАК СтоимостьНУ
	|		ИЗ
	|			РегистрНакопления.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет.Остатки(&НаДату, 
	|			                  Подразделение = &ПодразделениеОрганизации " + СтрокаФильтра + ") КАК ПартииБУ", "") + "
	|		) КАК Партии
	|		ПО СписанныеМатериалы.Номенклатура                  = Партии.Номенклатура
	|			И СписанныеМатериалы.ХарактеристикаНоменклатуры = Партии.ХарактеристикаНоменклатуры
	|			И СписанныеМатериалы.СерияНоменклатуры          = Партии.СерияНоменклатуры
	|			И СписанныеМатериалы.ФизЛицо                    = Партии.ФизЛицо
	|			И СписанныеМатериалы.СхемаНазначенияИспользования    = Партии.СхемаНазначенияИспользования
	|			И СписанныеМатериалы.СпособОтраженияРасходов    = Партии.СпособОтраженияРасходов
	|			И СписанныеМатериалы.СрокПолезногоИспользования = Партии.СрокПолезногоИспользования
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипУчета,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	СхемаНазначенияИспользования,
	|	СпособОтраженияРасходов,
	|	СрокПолезногоИспользования,
	|	ФизЛицо,
	|	Качество,
	|	Партии.ДокументПередачи.МоментВремени,
	|	Партии.ДокументОприходования.МоментВремени
	|ИТОГИ ПО
	|	ТипУчета";
	ВыборкаПоТипамУчета = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Сортировка таблицы документа
	// Это необходимо на тот случай, если в документе
	// есть строки с повторяющимися ключевыми полями
	ТаблицаДокумента.Сортировать(СтрокаКолонок);
	
	Если ОтражатьВУправленческомУчете Тогда
		
		Если ВыборкаПоТипамУчета.НайтиСледующий("1.Упр", "ТипУчета") Тогда
			
			Выборка             = ВыборкаПоТипамУчета.Выбрать();
			ТаблицаДвиженийУУ   = НаборЗаписейУУ.Выгрузить();
			ПроизвестиСписаниеМатериалов("1.Упр", СтруктураКлючевыхПолей, Выборка, 
	                                     ТаблицаДвиженийУУ, ТаблицаДокумента, ТаблицаСообщений);
			НаборЗаписейУУ.Загрузить(ТаблицаДвиженийУУ);
			
		Иначе
			// списывать нечего
			
			ОбщегоНазначения.СообщитьОбОшибке("Упр. учет: По партиям ничего не списано, из-за отсутствия соответствующих остатков", , Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		Если ВыборкаПоТипамУчета.НайтиСледующий("2.Бух", "ТипУчета") Тогда
			
			СтруктураКлючевыхПолей.Вставить("НалоговоеНазначение");
			
			Выборка             = ВыборкаПоТипамУчета.Выбрать();
			ТаблицаДвиженийБУ   = НаборЗаписейБУ.Выгрузить();
			ПроизвестиСписаниеМатериалов("2.Бух", СтруктураКлючевыхПолей, Выборка, 
	                                     ТаблицаДвиженийБУ, ТаблицаДокумента, ТаблицаСообщений, ПроводкиБУ);
			НаборЗаписейБУ.Загрузить(ТаблицаДвиженийБУ);
			
		Иначе
			// списывать нечего
			
			ОбщегоНазначения.СообщитьОбОшибке("Бух. учет: По партиям ничего не списано, из-за отсутствия соответствующих остатков", , Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запись движений
	// Если документ не отражается в каком-либо виде учета,
	// то его движения все равно должны обнулиться.
	НаборЗаписейУУ.Записать();
	НаборЗаписейБУ.Записать();
	ПроводкиБУ.Записать();
	
	// выод сообщений об ошибках
	Если ТаблицаСообщений.Количество() > 0 Тогда
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			// Ранее сообщения не выводились
			
			ОбщегоНазначения.СообщитьОбОшибке(Заголовок);
			
		КонецЕсли;
		
		ТаблицаСообщений.Сортировать("НомерСтрокиДокумента, ТипУчета");
		ТекущийНомерСтроки = 0;
		
		Для каждого СтрокаСообщений Из ТаблицаСообщений Цикл
		
			Если ТекущийНомерСтроки <> СтрокаСообщений.НомерСтрокиДокумента Тогда
				
				ТекущийНомерСтроки = СтрокаСообщений.НомерСтрокиДокумента;
				СтрокаТЧ           = СтрокаСообщений.СтрокаТаблицы;
				ЕдиницаИзмерения   = СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков;
				Заголовок = "Строка номер " + ТекущийНомерСтроки 
				            + Символы.ПС + УправлениеЗапасами.ПредставлениеНоменклатуры(Строка(СтрокаТЧ.Номенклатура),
							                                         Строка(СтрокаТЧ.ХарактеристикаНоменклатуры),
																	 Строка(СтрокаТЧ.СерияНоменклатуры))
						    + ", " + СтрокаТЧ.СхемаНазначенияИспользования + ", " + СтрокаТЧ.ФизЛицо + ", "
							+ СтрокаТЧ.Качество + ":";
				
			КонецЕсли;	
			
			ОбщегоНазначения.СообщитьОбОшибке(Символы.Таб + Сред(СтрокаСообщений.ТипУчета, 3) + " учет: Не списано по партиям "
			                 + СтрокаСообщений.ОсталосьСписать + " " + ЕдиницаИзмерения, , Заголовок);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДвижениеПартийМатериалов()

// Функция возвращает счета учета малоценных активов по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаМалоценныхАктивовИзРегистраСведений(Организация, Номенклатура) Экспорт
	СтруктураВозврата = Новый Структура("СпособОтраженияРасходов, СхемаНазначенияИспользования, СрокПолезногоИспользования, 
										|ПринадлежностьНоменклатуры"); 

	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	МассивНоменклатура	 = Новый Массив();
	МассивВидНоменклатуры= Новый Массив();
	МассивОрганизация	 = Новый Массив();
	
	МассивОрганизация.Добавить(Справочники.Организации.ПустаяСсылка());

	МассивНоменклатура.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	МассивНоменклатура.Добавить(Справочники.ВидыНоменклатуры.ПустаяСсылка());
	МассивНоменклатура.Добавить(НЕОПРЕДЕЛЕНО);
		
	МассивНоменклатура.Добавить(Номенклатура);
	СписокГрупп = ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Номенклатура);
	Для каждого Элемент Из СписокГрупп Цикл
		МассивНоменклатура.Добавить(Элемент);
	КонецЦикла;
	
	МассивНоменклатура.Добавить(Номенклатура.ВидНоменклатуры);
	МассивОрганизация.Добавить(Организация);
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",        МассивОрганизация);
	Запрос.УстановитьПараметр("Номенклатура",       МассивНоменклатура);
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВид",			Справочники.ВидыНоменклатуры.ПустаяСсылка());
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетаУчетаМалоценныхАктивов.Организация КАК Организация,
	|	ВЫБОР КОГДА СчетаУчетаМалоценныхАктивов.Номенклатура ССЫЛКА Справочник.Номенклатура ТОГДА
	|		СчетаУчетаМалоценныхАктивов.Номенклатура ИНАЧЕ &ПустаяНоменклатура КОНЕЦ КАК Номенклатура,
	|	ВЫБОР КОГДА СчетаУчетаМалоценныхАктивов.Номенклатура ССЫЛКА Справочник.Номенклатура ТОГДА
	|		СчетаУчетаМалоценныхАктивов.Номенклатура.ЭтоГруппа ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЭтоГруппа,
	|	ВЫБОР КОГДА СчетаУчетаМалоценныхАктивов.Номенклатура ССЫЛКА Справочник.ВидыНоменклатуры ТОГДА
	|		СчетаУчетаМалоценныхАктивов.Номенклатура ИНАЧЕ &ПустойВид КОНЕЦ КАК ВидНоменклатуры,
	|	СчетаУчетаМалоценныхАктивов.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	СчетаУчетаМалоценныхАктивов.СхемаНазначенияИспользования КАК СхемаНазначенияИспользования,
	|	СчетаУчетаМалоценныхАктивов.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	СчетаУчетаМалоценныхАктивов.ПринадлежностьНоменклатуры КАК ПринадлежностьНоменклатуры
	|ИЗ
	|	РегистрСведений.СчетаУчетаМалоценныхАктивов КАК СчетаУчетаМалоценныхАктивов
	|	
	|ГДЕ
	|	СчетаУчетаМалоценныхАктивов.Организация В (&Организация)
	|	И СчетаУчетаМалоценныхАктивов.Номенклатура В (&Номенклатура)";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Колонки.Добавить("Глубина");
	Для Каждого Строка Из ТаблицаЗапроса Цикл
		Если Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Строка.Глубина = 0;
		Иначе
			Строка.Глубина = СтрДлина(Строка.Номенклатура.ПолныйКод());
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапроса.Сортировать("Глубина Убыв, ВидНоменклатуры Убыв, Организация Убыв");

	Если ТаблицаЗапроса.Количество() > 0 Тогда

		СведенияОСчетах = ТаблицаЗапроса[0];

		СтруктураВозврата.СпособОтраженияРасходов 		= СведенияОСчетах.СпособОтраженияРасходов;
		СтруктураВозврата.СхемаНазначенияИспользования 	= СведенияОСчетах.СхемаНазначенияИспользования;
		СтруктураВозврата.СрокПолезногоИспользования 	= СведенияОСчетах.СрокПолезногоИспользования;
		СтруктураВозврата.ПринадлежностьНоменклатуры 	= СведенияОСчетах.ПринадлежностьНоменклатуры;

	КонецЕсли;

	Возврат СтруктураВозврата;

КонецФункции // ПолучитьСчетаУчетаНоменклатурыИзРегистраСведений()
