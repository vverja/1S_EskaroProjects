////////////////////////////////////////////////////////////////////////////////
//
// ОПРЕДЕЛЕНИЕ СЧЕТОВ УЧЕТА НОМЕНКЛАТУРЫ ИЗ НАСТРОЕК
//

// Подготавливает текст запроса для получения актуального документа УстановкаПараметровУчетаНоменклатуры
// 
// Параметры
//  СтруктураДополнительныхПолей - Структура. Если передана, то в текст запроса будут включены и другие поля документа, кроме ссылки.
//                                 Ключи структуры - имена полей, а значения - путь к реквизитам документа. 
//                                 Значения могут опускаться, если путь совпадает с именем поля.
//
// Возвращаемое значение 
//  Строка, текст запроса
//
Функция ПолучитьТекстЗапросаДокументУстановкиПараметровУчетаНоменклатуры(СтруктураДополнительныхПолей = Неопределено, ИмяВременнойТаблицы = "")
	
	// дополним текст запроса дополнительными полями
	ДополнительныеПоля = "";
	Если СтруктураДополнительныхПолей <> Неопределено Тогда
		Для Каждого Поле Из СтруктураДополнительныхПолей Цикл
			ДополнительныеПоля = ДополнительныеПоля + ", УстановкаПараметровУчетаНоменклатуры." + ?(ПустаяСтрока(Поле.Значение), Поле.Ключ, Поле.Значение) + " КАК " + Поле.Ключ + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УстановкаПараметровУчетаНоменклатуры.Ссылка  КАК Ссылка
	|"	+ ДополнительныеПоля + "
	|"  +  ?(ЗначениеЗаполнено(ИмяВременнойТаблицы), "ПОМЕСТИТЬ " + ИмяВременнойТаблицы, "") + "
	|ИЗ
	|	Документ.УстановкаПараметровУчетаНоменклатуры КАК УстановкаПараметровУчетаНоменклатуры
	|
	|ГДЕ
	|	УстановкаПараметровУчетаНоменклатуры.Проведен
	|	И (УстановкаПараметровУчетаНоменклатуры.Дата <= &Дата
	|			ИЛИ &Дата = ДАТАВРЕМЯ(1, 1, 1))
	|
	|УПОРЯДОЧИТЬ ПО
	|	УстановкаПараметровУчетаНоменклатуры.Дата УБЫВ,
	|	Ссылка УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Возвращает текст запроса, которым можно получить данные действующих счетов учета
//по данным документа УстановкаПараметровУчетаНоменклатуры
Функция ПолучитьТекстЗапросаСчетовУчетаНоменклатуры()
		
	//Запрос может использоваться 
	// - для получения счетов с целью их подстановки в документы и таблицы используемые в ходе формирования движений по регистру
	// - (планируется) формирования текста запроса для получения данных документа при проведении (для производственных документов)
	// - (планируется) для формирования отчета о настройках счетов, показывающих как (где именно) выполнена действующая настройка, 
	//		например, для конкретной номенклатуры
	
	ТекстЗапроса = ПолучитьТекстЗапросаДокументУстановкиПараметровУчетаНоменклатуры(,"ДействующийДокументУстановкиПараметровУчетаНоменклатуры")
		+ ";" + Символы.ПС;
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВидНоменклатуры
	|ПОМЕСТИТЬ ДанныеНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеНоменклатуры.Номенклатура КАК Номенклатура,
	|	УстановкаПараметровУчетаНоменклатурыСчетаУчетаНоменклатуры.Организация,
	|	УстановкаПараметровУчетаНоменклатурыСчетаУчетаНоменклатуры.Номенклатура КАК НоменклатураНастройки,
	|	УстановкаПараметровУчетаНоменклатурыСчетаУчетаНоменклатуры.НомерСтроки КАК НомерСтроки,
	|	""Товары"" КАК ИмяТабличнойЧасти,
	|	УстановкаПараметровУчетаНоменклатурыСчетаУчетаНоменклатуры.СчетУчетаБУ,
	|	УстановкаПараметровУчетаНоменклатурыСчетаУчетаНоменклатуры.НалоговоеНазначение,
	|	УстановкаПараметровУчетаНоменклатурыСчетаУчетаНоменклатуры.НалоговоеНазначениеДоходовИЗатрат,
	|	УстановкаПараметровУчетаНоменклатурыСчетаУчетаНоменклатуры.ОпределятьИзНГЗатрат,
	|	УстановкаПараметровУчетаНоменклатурыСчетаУчетаНоменклатуры.ПринадлежностьНоменклатуры,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетЗатрат
	|
	|ПОМЕСТИТЬ ДанныеСчетов
	|ИЗ
	|	Документ.УстановкаПараметровУчетаНоменклатуры.СчетаУчетаНоменклатуры КАК УстановкаПараметровУчетаНоменклатурыСчетаУчетаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО (УстановкаПараметровУчетаНоменклатурыСчетаУчетаНоменклатуры.Номенклатура = Неопределено 
	|				ИЛИ УстановкаПараметровУчетаНоменклатурыСчетаУчетаНоменклатуры.Номенклатура = ДанныеНоменклатуры.ВидНоменклатуры
	|				ИЛИ УстановкаПараметровУчетаНоменклатурыСчетаУчетаНоменклатуры.Номенклатура = ДанныеНоменклатуры.Номенклатура
	|				)
	|			И ДанныеНоменклатуры.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДействующийДокументУстановкиПараметровУчетаНоменклатуры
	|		ПО (ДействующийДокументУстановкиПараметровУчетаНоменклатуры.Ссылка = УстановкаПараметровУчетаНоменклатурыСчетаУчетаНоменклатуры.Ссылка)
	|ГДЕ
	|	(УстановкаПараметровУчетаНоменклатурыСчетаУчетаНоменклатуры.Организация = &Организация
	|			ИЛИ УстановкаПараметровУчетаНоменклатурыСчетаУчетаНоменклатуры.Организация = Значение(Справочник.Организации.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеНоменклатурыУслуг.Номенклатура КАК Номенклатура,
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Организация,
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Номенклатура,
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.НомерСтроки,
	|	""Услуги"",
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.НалоговоеНазначение,
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.НалоговоеНазначениеДоходовИЗатрат,
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.ОпределятьИзНГЗатрат,
	|	Значение(Перечисление.ПринадлежностьНоменклатуры.ПустаяСсылка),
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.СчетЗатрат
	|ИЗ
	|	Документ.УстановкаПараметровУчетаНоменклатуры.ПараметрыУчетаУслуг КАК УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеНоменклатуры КАК ДанныеНоменклатурыУслуг
	|		ПО (УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Номенклатура = Неопределено 
	|				ИЛИ УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Номенклатура = ДанныеНоменклатурыУслуг.ВидНоменклатуры
	|				ИЛИ УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Номенклатура = ДанныеНоменклатурыУслуг.Номенклатура
	|				)
	|			И ДанныеНоменклатурыУслуг.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДействующийДокументУстановкиПараметровУчетаНоменклатуры
	|		ПО (ДействующийДокументУстановкиПараметровУчетаНоменклатуры.Ссылка = УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Ссылка)
	|ГДЕ
	|	(УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Организация = &Организация
	|			ИЛИ УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Организация = Значение(Справочник.Организации.ПустаяСсылка))
	|
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСчетов.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДанныеСчетов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ДанныеСчетов.НоменклатураНастройки = НЕОПРЕДЕЛЕНО
	|				ТОГДА 2
	|			КОГДА ДанныеСчетов.НоменклатураНастройки ССЫЛКА Справочник.ВидыНоменклатуры
	|				ТОГДА 4
	|			ИНАЧЕ 6
	|		КОНЕЦ) КАК Приоритет,
	|	ДанныеСчетов.НомерСтроки КАК НомерСтроки,
	|	ДанныеСчетов.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти
	|ПОМЕСТИТЬ Приоритеты
	|ИЗ
	|	ДанныеСчетов КАК ДанныеСчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСчетов.Номенклатура,
	|	ДанныеСчетов.НомерСтроки,
	|	ДанныеСчетов.ИмяТабличнойЧасти
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСчетов.Номенклатура,
	|	ДанныеСчетов.СчетУчетаБУ,
	|	ДанныеСчетов.НоменклатураНастройки,
	|	ДанныеСчетов.НомерСтроки,
	|	ДанныеСчетов.ИмяТабличнойЧасти,
	|	ДанныеСчетов.Организация,
	|	Приоритеты.Приоритет,
	|	ДанныеСчетов.НалоговоеНазначение,
	|	ДанныеСчетов.НалоговоеНазначениеДоходовИЗатрат,
    |	ДанныеСчетов.ОпределятьИзНГЗатрат,     
	|	ДанныеСчетов.ПринадлежностьНоменклатуры,
	|	ДанныеСчетов.СчетЗатрат
	|ИЗ
	|	ДанныеСчетов КАК ДанныеСчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приоритеты КАК Приоритеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Приоритеты.Номенклатура КАК Номенклатура,
	|				МАКСИМУМ(Приоритеты.Приоритет) КАК Приоритет
	|			ИЗ
	|				Приоритеты КАК Приоритеты
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Приоритеты.Номенклатура) КАК МаксимальныеПриоритеты
	|			ПО Приоритеты.Номенклатура = МаксимальныеПриоритеты.Номенклатура
	|				И Приоритеты.Приоритет = МаксимальныеПриоритеты.Приоритет
	|		ПО ДанныеСчетов.Номенклатура = Приоритеты.Номенклатура
	|			И ДанныеСчетов.НомерСтроки = Приоритеты.НомерСтроки
	|			И ДанныеСчетов.ИмяТабличнойЧасти = Приоритеты.ИмяТабличнойЧасти"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует временную таблицу ДанныеНастроекПараметровУчета содержащую параметры учета услуг
// 
// Параметры
//  МенеджерВременныхТаблиц - менеджер должен содержать временную таблицу ДанныеНоменклатуры содержащую список услуг,
//  Организация - ссылка на организацию или массив организаций, по которым нужно получить параметры учета,
//  Дата - дата на которую нужно получить параметры учета
//
Процедура СформироватьТаблицуПараметровУчетаУслуг(МенеджерВременныхТаблиц, Организация, Дата) Экспорт
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеНоменклатурыУслуг.Номенклатура КАК Номенклатура,
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Организация,
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Номенклатура КАК НоменклатураНастройки,
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.НомерСтроки КАК НомерСтроки,
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Подразделение,
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.ПодразделениеОрганизации,
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.НоменклатурнаяГруппа,
	|" + ?(РасширеннаяАналитикаУчета.УчитыватьПродажиПоЗаказамПокупателей(), 
		   "УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.ВестиУчетЗатратПоЗаказам КАК ВестиУчетЗатратПоЗаказам,", 
		   "ЛОЖЬ КАК ВестиУчетЗатратПоЗаказам,") + "
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.СчетЗатрат,
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.НалоговоеНазначение,
	|	УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.ОпределятьИзНГЗатрат
	|ПОМЕСТИТЬ ДанныеСчетов
	|ИЗ
	|	Документ.УстановкаПараметровУчетаНоменклатуры.ПараметрыУчетаУслуг КАК УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеНоменклатуры КАК ДанныеНоменклатурыУслуг
	|		ПО (УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Номенклатура = Неопределено 
	|				ИЛИ УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Номенклатура = ДанныеНоменклатурыУслуг.ВидНоменклатуры
	|				ИЛИ УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Номенклатура = ДанныеНоменклатурыУслуг.Номенклатура
	|				)
	|			И ДанныеНоменклатурыУслуг.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)	
	|ГДЕ
	|	(УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Организация В (&Организация)
	|			ИЛИ УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Организация = Значение(Справочник.Организации.ПустаяСсылка))
	|	И УстановкаПараметровУчетаНоменклатурыПараметрыУчетаУслуг.Ссылка В
	|			("+ПолучитьТекстЗапросаДокументУстановкиПараметровУчетаНоменклатуры()+")
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСчетов.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДанныеСчетов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ДанныеСчетов.НоменклатураНастройки = НЕОПРЕДЕЛЕНО
	|				ТОГДА 2
	|			КОГДА ДанныеСчетов.НоменклатураНастройки ССЫЛКА Справочник.ВидыНоменклатуры
	|				ТОГДА 4
	|			ИНАЧЕ 6
	|		КОНЕЦ) КАК Приоритет,
	|	ДанныеСчетов.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Приоритеты
	|ИЗ
	|	ДанныеСчетов КАК ДанныеСчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСчетов.Номенклатура,
	|	ДанныеСчетов.НомерСтроки
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСчетов.Номенклатура КАК Номенклатура,
	|	ДанныеСчетов.Подразделение КАК Подразделение,
	|	ДанныеСчетов.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ДанныеСчетов.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ДанныеСчетов.ВестиУчетЗатратПоЗаказам КАК ВестиУчетЗатратПоЗаказам,
	|	ДанныеСчетов.СчетЗатрат КАК СчетЗатрат,
	|	ДанныеСчетов.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ДанныеСчетов.ОпределятьИзНГЗатрат КАК ОпределятьИзНГЗатрат,
	|	ДанныеСчетов.НоменклатураНастройки,
	|	ДанныеСчетов.НомерСтроки,
	|	ДанныеСчетов.Организация,
	|	Приоритеты.Приоритет
	|ПОМЕСТИТЬ ДанныеНастроекПараметровУчета
	|ИЗ
	|	ДанныеСчетов КАК ДанныеСчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приоритеты КАК Приоритеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Приоритеты.Номенклатура КАК Номенклатура,
	|				МАКСИМУМ(Приоритеты.Приоритет) КАК Приоритет
	|			ИЗ
	|				Приоритеты КАК Приоритеты
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Приоритеты.Номенклатура) КАК МаксимальныеПриоритеты
	|			ПО Приоритеты.Номенклатура = МаксимальныеПриоритеты.Номенклатура
	|				И Приоритеты.Приоритет = МаксимальныеПриоритеты.Приоритет
	|		ПО ДанныеСчетов.Номенклатура = Приоритеты.Номенклатура
	|			И ДанныеСчетов.НомерСтроки = Приоритеты.НомерСтроки";
	
	Запрос.УстановитьПараметр("Дата",Дата);
	
	Если ТипЗНЧ(Организация) = Тип("СправочникСсылка.Организации") Тогда
		МассивОрганизаций = Новый Массив;
		МассивОрганизаций.Добавить(Организация);
		Запрос.УстановитьПараметр("Организация",МассивОрганизаций);
	Иначе
		Запрос.УстановитьПараметр("Организация",Организация);
	КонецЕсли;	
	
	Запрос.Выполнить();
	
КонецПроцедуры	

//Инициализирует структуру для хранения значений счетов учета номенклатуры.
//Структура описывает все возможные счета учета, действующие для одинаковой номенклатуры в разных ситуациях.
Функция ПодготовитьСтруктуруСчетовУчета()
	
	//Имена ключей выбраны по соответствию реквизитам документов
	//В комментариях - ключи аналогичного значения в структуре, возвращаемой функцией ПолучитьСчетаУчетаНоменклатурыИзРегистраСведений()
	
	СтруктураСчетовУчета = Новый Структура();
	
	//Основной балансовый счет учета
	СтруктураСчетовУчета.Вставить("СчетУчетаБУ",					       ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	
	// Счет учета затрат (для услуг)
	СтруктураСчетовУчета.Вставить("СчетЗатрат",					    	   ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	СтруктураСчетовУчета.Вставить("СхемаРеализации",				       Справочники.СхемыРеализации.ПустаяСсылка());
	СтруктураСчетовУчета.Вставить("НалоговоеНазначение",			       Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка());
	СтруктураСчетовУчета.Вставить("НалоговоеНазначениеДоходовИЗатрат",	   Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка());
	
	СтруктураСчетовУчета.Вставить("ПереданныеСобственныеБУ",                ПланыСчетов.Хозрасчетный.ТоварыНаКомиссии);		
	СтруктураСчетовУчета.Вставить("ПринятыеСчетУчетаБУ",	                ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию);	
    СтруктураСчетовУчета.Вставить("ПереданныеПринятыеБУ",	                ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссиюНаСубкомиссии);	
	СтруктураСчетовУчета.Вставить("СчетУчетаБУРозницы",		                ПланыСчетов.Хозрасчетный.ТоварыВТорговле);	
	СтруктураСчетовУчета.Вставить("СчетУчетаПереданногоСырья",	            ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
	СтруктураСчетовУчета.Вставить("СчетУчетаМатериалыВЭксплуатации",        ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураСчетовУчета.Вставить("СчетУчетаДавСырья",                      ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку);
	СтруктураСчетовУчета.Вставить("СчетУчетаПродукцииИзДавальческогоСырья", ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
	СтруктураСчетовУчета.Вставить("СчетУчетаДавСырьяВПроизводстве",         ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве);
	СтруктураСчетовУчета.Вставить("ОпределятьИзНГЗатрат",                   Ложь); 
	
	СтруктураСчетовУчета.Вставить("СчетУчетаБланковСтрогогоУчета",          ПланыСчетов.Хозрасчетный.БланкиСтрогогоУчета);
	
	СтруктураСчетовУчета.Вставить("ХозяйственнаяСитуация",          "");
	
	
	
	СтруктураСчетовУчета.Вставить("ПринадлежностьНоменклатуры",					    Перечисления.ПринадлежностьНоменклатуры.ПустаяСсылка());
	
	Возврат СтруктураСчетовУчета;
	
КонецФункции

// Возвращает структуру счетов учета для указанной номенклатуры.
// Таблица должна быть подготовлена заранее функцией ПолучитьСчетаУчетаНоменклатурыИзДокумента()
Функция ПолучитьСтруктуруСчетовУчета(Номенклатура, ТаблицаСчетовУчета, ХозяйственнаяСитуация)
	
	СтруктураСчетовУчета 	= ПодготовитьСтруктуруСчетовУчета();
	
	УстановленныеСчета 		= ТаблицаСчетовУчета.Найти(Номенклатура, "Номенклатура");
	
	СтруктураСчетовУчета.ХозяйственнаяСитуация = ХозяйственнаяСитуация;
	
	Если УстановленныеСчета <> Неопределено Тогда
	
		//Дополним установленными счетами
		СтруктураСчетовУчета.СчетУчетаБУ    				= УстановленныеСчета.СчетУчетаБУ;
		
		СтруктураСчетовУчета.ПринадлежностьНоменклатуры 	   = УстановленныеСчета.ПринадлежностьНоменклатуры;
		СтруктураСчетовУчета.СчетЗатрат    				       = УстановленныеСчета.СчетЗатрат;
		СтруктураСчетовУчета.НалоговоеНазначение               = УстановленныеСчета.НалоговоеНазначение;
		СтруктураСчетовУчета.НалоговоеНазначениеДоходовИЗатрат = УстановленныеСчета.НалоговоеНазначениеДоходовИЗатрат;
		СтруктураСчетовУчета.ОпределятьИзНГЗатрат               = УстановленныеСчета.ОпределятьИзНГЗатрат;
		//Счета, зависящие от установленных		
		
		Если Не УстановленныеСчета.Номенклатура.Услуга Тогда
			
			Если ЗначениеЗаполнено(УстановленныеСчета.СчетУчетаБУ) Тогда			
				Если УстановленныеСчета.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы) или УстановленныеСчета.СчетУчетаБУ = (ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы) Тогда
					СтруктураСчетовУчета.СхемаРеализации = Справочники.СхемыРеализации.ПроизводственныеЗапасы;
				ИначеЕсли УстановленныеСчета.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Полуфабрикаты) или УстановленныеСчета.СчетУчетаБУ=(ПланыСчетов.Хозрасчетный.Полуфабрикаты) Тогда
					СтруктураСчетовУчета.СхемаРеализации = Справочники.СхемыРеализации.ПроизводственныеЗапасы;
				ИначеЕсли УстановленныеСчета.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ГотоваяПродукция) или УстановленныеСчета.СчетУчетаБУ=(ПланыСчетов.Хозрасчетный.ГотоваяПродукция) Тогда
					СтруктураСчетовУчета.СхемаРеализации = Справочники.СхемыРеализации.Продукция;  
				ИначеЕсли УстановленныеСчета.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.МалоценныеИБыстроизнашивающиесяПредметы) или УстановленныеСчета.СчетУчетаБУ = (ПланыСчетов.Хозрасчетный.МалоценныеИБыстроизнашивающиесяПредметы) Тогда
					СтруктураСчетовУчета.СхемаРеализации = Справочники.СхемыРеализации.Товары;
				ИначеЕсли УстановленныеСчета.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары) Тогда
					СтруктураСчетовУчета.СхемаРеализации = Справочники.СхемыРеализации.Товары;  
				ИначеЕсли  УстановленныеСчета.СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.КапитальныеИнвестиции) или УстановленныеСчета.СчетУчетаБУ = (ПланыСчетов.Хозрасчетный.КапитальныеИнвестиции) Тогда
					СтруктураСчетовУчета.СхемаРеализации = Справочники.СхемыРеализации.Товары; 
				КонецЕсли;
			КонецЕсли; 
		Иначе
			СтруктураСчетовУчета.СхемаРеализации = Справочники.СхемыРеализации.Услуги;		
		КонецЕсли;  	
		
		
		//Если основной счет учета запасов - забалансовый, 
		//то он будет использоваться в качестве счета учета принятых товаров.
		Если ЗабалансовыйСчет(СтруктураСчетовУчета.СчетУчетаБУ) Тогда 
			СтруктураСчетовУчета.ПринятыеСчетУчетаБУ = СтруктураСчетовУчета.СчетУчетаБУ;
			СтруктураСчетовУчета.СчетУчетаДавСырья  = СтруктураСчетовУчета.СчетУчетаБУ;
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат СтруктураСчетовУчета;
	
КонецФункции

// Функция возвращает счета учета номенклатуры по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаНоменклатурыИзРегистраСведений(Организация, Номенклатура, Склад = Неопределено)
	
	СтруктураВозврата = Новый Структура("СчетУчетаБУ, СчетУчетаВРозницеБУ, СчетУчетаЗабалансовыйБУ, СчетУчетаПередачиБУ, СчетУчетаПередачиЗабалансовыйБУ,
										|СхемаРеализации, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат,
										|ПринадлежностьНоменклатуры"); 

	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	МассивСклад			 = Новый Массив();
	МассивНоменклатура	 = Новый Массив();
	МассивВидНоменклатуры= Новый Массив();
	МассивОрганизация	 = Новый Массив();
	
	МассивСклад.Добавить(Справочники.Склады.ПустаяСсылка());
	МассивОрганизация.Добавить(Справочники.Организации.ПустаяСсылка());

	МассивНоменклатура.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	МассивНоменклатура.Добавить(Справочники.ВидыНоменклатуры.ПустаяСсылка());
	МассивНоменклатура.Добавить(НЕОПРЕДЕЛЕНО);
		
	МассивНоменклатура.Добавить(Номенклатура);
	СписокГрупп = ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Номенклатура);
	Для каждого Элемент Из СписокГрупп Цикл
		МассивНоменклатура.Добавить(Элемент);
	КонецЦикла;
	
	МассивНоменклатура.Добавить(Номенклатура.ВидНоменклатуры);
	МассивОрганизация.Добавить(Организация);
	МассивСклад.Добавить(Склад); 
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",        МассивОрганизация);
	Запрос.УстановитьПараметр("Номенклатура",       МассивНоменклатура);
	Запрос.УстановитьПараметр("Склад",			    МассивСклад);
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВид",			Справочники.ВидыНоменклатуры.ПустаяСсылка());
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетаУчетаНоменклатуры.Организация КАК Организация,
	|	ВЫБОР КОГДА СчетаУчетаНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура ТОГДА
	|		СчетаУчетаНоменклатуры.Номенклатура ИНАЧЕ &ПустаяНоменклатура КОНЕЦ КАК Номенклатура,
	|	ВЫБОР КОГДА СчетаУчетаНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура ТОГДА
	|		СчетаУчетаНоменклатуры.Номенклатура.ЭтоГруппа ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЭтоГруппа,
	|	ВЫБОР КОГДА СчетаУчетаНоменклатуры.Номенклатура ССЫЛКА Справочник.ВидыНоменклатуры ТОГДА
	|		СчетаУчетаНоменклатуры.Номенклатура ИНАЧЕ &ПустойВид КОНЕЦ КАК ВидНоменклатуры,
	|	СчетаУчетаНоменклатуры.Склад КАК Склад,
	|	СчетаУчетаНоменклатуры.СчетУчетаБУ КАК СчетУчетаБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаВРозницеБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаЗабалансовыйБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиЗабалансовыйБУ,
	|	СчетаУчетаНоменклатуры.СхемаРеализации,
	|	СчетаУчетаНоменклатуры.НалоговоеНазначение,
	|	СчетаУчетаНоменклатуры.НалоговоеНазначениеДоходовИЗатрат,
	|	СчетаУчетаНоменклатуры.ПринадлежностьНоменклатуры КАК ПринадлежностьНоменклатуры
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|	
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Организация В (&Организация)
	|	И СчетаУчетаНоменклатуры.Номенклатура В (&Номенклатура) 
	|	И СчетаУчетаНоменклатуры.Склад В (&Склад)";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Колонки.Добавить("Глубина");
	Для Каждого Строка Из ТаблицаЗапроса Цикл
		Если Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Строка.Глубина = 0;
		Иначе
			Строка.Глубина = СтрДлина(Строка.Номенклатура.ПолныйКод());
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапроса.Сортировать("Глубина Убыв, ВидНоменклатуры Убыв, Склад Убыв, Организация Убыв");

	Если ТаблицаЗапроса.Количество() > 0 Тогда

		СведенияОСчетах = ТаблицаЗапроса[0];

		Если НЕ Номенклатура.Услуга Тогда

			СтруктураВозврата.СчетУчетаБУ        = СведенияОСчетах.СчетУчетаБУ;
			СтруктураВозврата.СчетУчетаВРозницеБУ    = СведенияОСчетах.СчетУчетаВРозницеБУ;
			СтруктураВозврата.СчетУчетаЗабалансовыйБУ= СведенияОСчетах.СчетУчетаЗабалансовыйБУ;
			СтруктураВозврата.СчетУчетаПередачиБУ    = СведенияОСчетах.СчетУчетаПередачиБУ;
			СтруктураВозврата.СчетУчетаПередачиЗабалансовыйБУ = СведенияОСчетах.СчетУчетаПередачиЗабалансовыйБУ;
			
		КонецЕсли;

		СтруктураВозврата.СхемаРеализации  = СведенияОСчетах.СхемаРеализации;
		СтруктураВозврата.НалоговоеНазначение = СведенияОСчетах.НалоговоеНазначение;
		СтруктураВозврата.НалоговоеНазначениеДоходовИЗатрат = СведенияОСчетах.НалоговоеНазначениеДоходовИЗатрат;
		СтруктураВозврата.ПринадлежностьНоменклатуры = СведенияОСчетах.ПринадлежностьНоменклатуры;

	КонецЕсли;

	Возврат СтруктураВозврата;

КонецФункции // ПолучитьСчетаУчетаНоменклатурыИзРегистраСведений()

//Возвращает таблицу значений с данными счетов для указанной номенклатуры, полученных из документа УстановкаПараметровУчетаНоменклатуры.
//
Функция ПолучитьСчетаУчетаНоменклатурыИзДокумента(Организация, Дата, СписокНоменклатуры)
	
	ТекстЗапроса = ПолучитьТекстЗапросаСчетовУчетаНоменклатуры();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Дата",				Дата);
	Запрос.УстановитьПараметр("СписокНоменклатуры",	СписокНоменклатуры);
	
	ТаблицаУстановленныхСчетов = Запрос.Выполнить().Выгрузить();
	ТаблицаУстановленныхСчетов.Индексы.Добавить("Номенклатура");
	
	Возврат ТаблицаУстановленныхСчетов;
	
КонецФункции


//Возвращает структуру счетов для указанной номенклатуры. 
//Возвращаются все счета, определенные для номенклатуры, для всех хозяйственных ситуаций.
//В дальнейшем планируется сделать эту функцию не-экспортной.
Функция ПолучитьСчетаУчетаНоменклатурыИзНастроек(Организация, Номенклатура, Склад, Дата, ХозяйственнаяСитуация = "") Экспорт

	Если ИспользоватьОпределениеСчетовПриПроведенииДокументов(Дата) Тогда
		
		УстановленныеСчета 		= ПолучитьСчетаУчетаНоменклатурыИзДокумента(Организация, Дата, Номенклатура);
		СтруктураСчетовУчета	= ПолучитьСтруктуруСчетовУчета(Номенклатура, УстановленныеСчета, ХозяйственнаяСитуация);
		
	Иначе
		
		СтруктураСчетовУчета = ПодготовитьСтруктуруСчетовУчета(); // Будет подготовлена структура с значениями счетов по умолчанию
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			УстановленныеСчета	 = ПолучитьСчетаУчетаНоменклатурыИзРегистраСведений(Организация, Номенклатура, Склад);
			
			//Возьмем значения из полученной структуры "старого образца"
			// - совпадающие по ключам
			ЗаполнитьЗначенияСвойств(СтруктураСчетовУчета, УстановленныеСчета);
			
			СтруктураСчетовУчета.ХозяйственнаяСитуация = ХозяйственнаяСитуация;
			
			// - не совпадающие по ключам
			СтруктураСчетовУчета.СчетУчетаБУРозницы 				= УстановленныеСчета.СчетУчетаВРозницеБУ;
	        СтруктураСчетовУчета.ПринятыеСчетУчетаБУ 				= УстановленныеСчета.СчетУчетаЗабалансовыйБУ;
			СтруктураСчетовУчета.ПереданныеСобственныеБУ 			= УстановленныеСчета.СчетУчетаПередачиБУ;
	        СтруктураСчетовУчета.ПереданныеПринятыеБУ 				= УстановленныеСчета.СчетУчетаПередачиЗабалансовыйБУ;
	        СтруктураСчетовУчета.СчетУчетаПереданногоСырья			= УстановленныеСчета.СчетУчетаПередачиБУ;
			СтруктураСчетовУчета.СчетУчетаМатериалыВЭксплуатации	= УстановленныеСчета.СчетУчетаПередачиЗабалансовыйБУ;
	        СтруктураСчетовУчета.СчетУчетаДавСырья                  = УстановленныеСчета.СчетУчетаЗабалансовыйБУ;
			СтруктураСчетовУчета.СчетУчетаПродукцииИзДавальческогоСырья = УстановленныеСчета.СчетУчетаБУ;
			СтруктураСчетовУчета.СчетУчетаДавСырьяВПроизводстве     = УстановленныеСчета.СчетУчетаЗабалансовыйБУ;
			СтруктураСчетовУчета.СчетУчетаБланковСтрогогоУчета      = УстановленныеСчета.СчетУчетаЗабалансовыйБУ;

		
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат СтруктураСчетовУчета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// ОБЩИЕ ПРОЦЕДУРЫ РАБОТЫ СО СЧЕТАМИ В ДОКУМЕНТАХ
//

//Возвращает признак использования определения счетов при проведении документов на указанную дату
//Если значение параметра Дата не заполнено, то возвращается признак на "сейчас".
Функция ИспользоватьОпределениеСчетовПриПроведенииДокументов(Дата=Неопределено) Экспорт
	
	ДатаНачала = глЗначениеПеременной("ДатаНачалаОпределенияСчетовПриПроведенииДокументов");
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		//возвращаем состояние режима на "сейчас", т.е. включен режим или нет "вообще", без учета даты.
		Возврат ДатаНачала <> неопределено;
	Иначе
		Если ДатаНачала = неопределено или ДатаНачала>Дата Тогда
			//Режим для этой даты не используется
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

//Возвращает дату, с которой действует режим "Счета учета номенклатуры определяются при проведении документа".
//Возвращает Неопределено, если режим не установлен.
//
//Параметры:
//
//	ИсключитьДокумент - ссылка на документ УстановкаПараметровУчетаНоменклатуры, который не надо учитывать при определении даты начала действия режима.
Функция ПолучитьДатуПервогоДокументаУстановкиСчетовУчетаНоменклатуры(ИсключитьДокумент=неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|				УстановкаПараметровУчетаНоменклатуры.Дата КАК Дата
	|			ИЗ
	|				Документ.УстановкаПараметровУчетаНоменклатуры КАК УстановкаПараметровУчетаНоменклатуры
	|			ГДЕ
	|				УстановкаПараметровУчетаНоменклатуры.Проведен И (&Ссылка=Неопределено ИЛИ УстановкаПараметровУчетаНоменклатуры.Ссылка<>&Ссылка)
	|			УПОРЯДОЧИТЬ ПО
	|				УстановкаПараметровУчетаНоменклатуры.Дата ВОЗР";
	Запрос.УстановитьПараметр("Ссылка",ИсключитьДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Дата;
	КонецЕсли;

КонецФункции

// Возвращает таблицу, описывающую реквизиты табличной части (или документа, если ИмяТабличнойЧасти - пустое),
// используемые для указания счетов учета и связанные реквизиты.
// Данные получает из макета "СчетаУчетаВДокументах"
// Параметры:
//  ИмяДокумента       - имя документа
//  ИмяТабличнойЧасти  - имя табличной части
Функция ПолучитьРеквизитыСчетовУчета(ИмяДокумента, ИмяТабличнойЧасти)
	
	Макет = ПолучитьОбщийМакет("СчетаУчетаВДокументах");
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Макет.Область("ОписаниеСчетовУчета"));
	
	// Установим отборы
	УстановитьОтборПоПолю(ПостроительЗапроса, "Документ",       ИмяДокумента);
	УстановитьОтборПоПолю(ПостроительЗапроса, "ТабличнаяЧасть", ИмяТабличнойЧасти);
	
	// Возвращаем таблицу значений с отобранными из макета данными 
	ПостроительЗапроса.Выполнить();
	Возврат ПостроительЗапроса.Результат.Выгрузить();
	
КонецФункции

// Устанавливает отбор на равенство по полю построителя запроса
//
Процедура УстановитьОтборПоПолю(ПостроительЗапроса, ИмяПоляОтбора, ЗначениеОтбора)
	
	ПолеДокумент 		= ПостроительЗапроса.ДоступныеПоля.Добавить(ИмяПоляОтбора, ИмяПоляОтбора);
	ПолеДокумент.Отбор 	= Истина;
	
	ЭлементОтбора		= ПостроительЗапроса.Отбор.Добавить(ИмяПоляОтбора);
	ЭлементОтбора.Установить(ЗначениеОтбора);
	
КонецПроцедуры

//Возвращает структуру, содержащую список имен реквизитов, 
//используемых для указания счетов налогового учета и связанных реквизитов
Функция ПолучитьРеквизитыСчетовНалоговогоУчета()
	
	Возврат Новый Структура(
	"НалоговоеНазначение,
	|НалоговоеНазначениеДоходовИЗатрат,
    |ВидНалоговойДеятельности");  

КонецФункции	

// Возвращает структуру, содержащую список имен реквизитов - счетов затрат
// В качестве Значений содержатся данные об источниках заполнения счетов:
// ключ структуры, возвращаемой ПолучитьСчетаУчетаСтатьиЗатрат()
Функция РеквизитыСчетаЗатрат()
	
	РеквизитыСчетаЗатрат	= Новый Структура();
	РеквизитыСчетаЗатрат.Вставить("СчетЗатрат",   "СчетУчетаБУ");
	
	Возврат РеквизитыСчетаЗатрат;
	
КонецФункции


//Возвращает признак "Забалансовый" переданного счета учета
//
Функция ЗабалансовыйСчет(Счет)
	
	Возврат Счет.Забалансовый;
	
КонецФункции

//Функция проверяет, выполняется ли для переданного значения счета условие балансовости,
//которое должно применяться для этого реквизита в данной хоз.ситуации.
//Возвращает Истина, если счет соответствует условию.
//Параметры
//	Значение 				- проверяемое значение счета
//	ДанныеРеквизита			- строка таблицы значений с данными макета СчетаУчетаВДокументах
//	ХозяйственнаяСитуация	- строка, описывающая отражаемую хозяйственную ситуацию (имя одной из колонок раздела "Хозяйственные ситуации" в макете СчетаУчетаВДокументах)
//	ДолженБытьЗабалансовым	- переменная, в которую будет возвращено требование к счету
//								Истина 			- счет должен быть забалансовым
//								Ложь			- счет должен быть балансовым
//								Неопределено	- проверка не требуется или не может быть выполнена
Функция ПроверитьБалансовостьСчета(Значение, ДанныеРеквизита, ХозяйственнаяСитуация, ДолженБытьЗабалансовым = Неопределено)
	
	ДолженБытьЗабалансовым = Неопределено;
	
	Если ПустаяСтрока(ДанныеРеквизита.Забалансовый) Тогда
		Возврат Истина; //не требуется проверка
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Истина; //нечего проверять
	КонецЕсли;
		
	Если ВРег(ДанныеРеквизита.Забалансовый)="ДА" Тогда
		ДолженБытьЗабалансовым 	= Истина;
	ИначеЕсли ВРег(ДанныеРеквизита.Забалансовый)="НЕТ" Тогда
		ДолженБытьЗабалансовым 	= Ложь;
	Иначе
		//Задана структура хозяйственных операций, при которых счет должен быть забалансовым
		СтруктураСитуаций 		= Новый Структура(ДанныеРеквизита.Забалансовый);
		ДолженБытьЗабалансовым 	= СтруктураСитуаций.Свойство(ХозяйственнаяСитуация);
	КонецЕсли;
	
	Возврат ЗабалансовыйСчет(Значение) = ДолженБытьЗабалансовым;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// ЗАПОЛНЕНИЕ СЧЕТОВ УЧЕТА В ДОКУМЕНТАХ
//

//Возвращает таблицу значений с информацией о том, какие склады нужно использовать для определения счетов учета в документе
//Параметры:
//		Объект - ДокументОбъект
//		ТаблицаРеквизитов - таблица с данными макета СчетаУчетаВДокументах
Функция ПодготовитьТаблицуСкладов(Объект, ТаблицаРеквизитов)
	
	//Подготовим таблицу с информацией о складах
	ТаблицаСкладов = ТаблицаРеквизитов.Скопировать();
	ТаблицаСкладов.Свернуть("СкладШапки, СкладТабличнойЧасти, ПриходныйОрдерШапки, ПриходныйОрдерТабличнойЧасти");
	ТаблицаСкладов.Колонки.Добавить("Склад", 			Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаСкладов.Колонки.Добавить("СкладДокумента", 	Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаСкладов.Колонки.Добавить("Розничный",		Новый ОписаниеТипов("Булево"));
	
	Для Каждого ДанныеСтроки Из ТаблицаСкладов Цикл
		Если ПоступлениеПоОрдеру(ДанныеСтроки, Объект) Тогда
			//склад берем из ордера
			Если ЗначениеЗаполнено(ДанныеСтроки.ПриходныйОрдерТабличнойЧасти) Тогда
				//Склад надо взять из ордера в строке табличной части, когда будем обходить по строкам. 
				//Чтобы это обозначить, оставляем склад пустым.
				//На случай, если в строке ордер не заполнен, - зафиксируем склад по ордеру шапки.
				ДанныеСтроки.СкладДокумента = Объект[ДанныеСтроки.ПриходныйОрдерШапки].Склад;
			ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.СкладШапки) Тогда
				//Склад берем всегда из ордера шапки.
				ДанныеСтроки.Склад 		= Объект[ДанныеСтроки.ПриходныйОрдерШапки].Склад;
				Если ТипЗнч(ДанныеСтроки.Склад) = Тип("СправочникСсылка.Склады") И ЗначениеЗаполнено(ДанныеСтроки.Склад) Тогда
					ДанныеСтроки.Розничный	= ДанныеСтроки.Склад.ВидСклада <> Перечисления.ВидыСкладов.Оптовый;
				Иначе
					ДанныеСтроки.Розничный	= Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Если ЗначениеЗаполнено(ДанныеСтроки.СкладШапки) И
				(НЕ ЗначениеЗаполнено(ДанныеСтроки.СкладТабличнойЧасти) 
				ИЛИ Объект.мУказаниеСкладовВТЧ=Истина) //если есть склад в табличной части, то объект должен иметь такую экспортную переменную 
			Тогда 
				//Склад берем из шапки документа.
				ДанныеСтроки.Склад 		= Объект[ДанныеСтроки.СкладШапки];
				
				Если ТипЗнч(ДанныеСтроки.Склад) = Тип("СправочникСсылка.Склады") И ЗначениеЗаполнено(ДанныеСтроки.Склад) Тогда
					ДанныеСтроки.Розничный	= ДанныеСтроки.Склад.ВидСклада <> Перечисления.ВидыСкладов.Оптовый;
				Иначе
					ДанныеСтроки.Розничный	= Ложь;
				КонецЕсли;
				
			Иначе
				//Склад надо взять из строки табличной части, когда будем обходить по строкам. Чтобы это обозначить, оставляем склад пустым.
				Если ЗначениеЗаполнено(ДанныеСтроки.СкладШапки) Тогда
					//На случай, если в строке склад не заполнен, - зафиксируем склад шапки.
					ДанныеСтроки.СкладДокумента = Объект[ДанныеСтроки.СкладШапки];
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСкладов;
	
КонецФункции

// Устанавливает значения счетов учета номенклатуры в переданной строке табличной части или "шапке" документа.
// Также заполняются значения субконто, зависящие от установленных счетов.
//
// Параметры:
//	ЗаполняемыйОбъект 		- строка табличной части, строка таблицы значений, структура шапки документа или ДокументОбъект
//	ТаблицаРеквизитов 		- таблица, возвращаемая функцией ПолучитьРеквизитыСчетовУчета() и содержащая сведения о заполняемых реквизитах
//	СтруктураСчетовУчета 	- структура, содержащая значения счетов
//	ХозяйственнаяСитуация	- строка, описывающая отражаемую хозяйственную ситуацию (имя одной из колонок раздела "Хозяйственные ситуации" в макете СчетаУчетаВДокументах)
//	ДанныеСклада 			- строка таблицы, возвращаемой функцией ПодготовитьТаблицуСкладов() Если значение передано, то будут заполнены только те счета, которые соответствуют переданным складам.
//	РозничныйСклад			- флаг, показывающий что нужно заменять счета учета на счета в рознице. 
//								Может быть равен Неопределено, если для заполнения передается СтруктураШапкиДокумента или СтрокаТабличнойЧасти. 
//								В этом случае переданная для заполнения структура должна содержать информацию о виде склада, см. описание функции НуженРозничныйСчет()
//	Перезаполнять			- если Ложь, то будут заполнены только незаполненные значения
Процедура УстановитьСчетаУчета(ЗаполняемыйОбъект, ТаблицаРеквизитов, СтруктураСчетовУчета, ХозяйственнаяСитуация, СтруктураШапкиДокумента = Неопределено, ДанныеСклада = Неопределено, РозничныйСклад=Неопределено, ЗаполнятьБУ=Истина, Перезаполнять=Ложь, ЗаполнятьКлоныКолонок=Истина, Объект = Неопределено)

	Если ТипЗнч(ЗаполняемыйОбъект) = Тип("ДокументОбъект.КомплектацияНоменклатуры") Тогда	
	    СтруктураШапкиДокумента = ЗаполняемыйОбъект;
	КонецЕсли;	
	
	// Определим, работаем с отбором реквизитов по складам или нет
	Если ДанныеСклада = Неопределено Тогда
		
		СтрокиРеквизитов = ТаблицаРеквизитов;
		
	Иначе
		
		КлючОтбора = Новый Структура("СкладШапки,СкладТабличнойЧасти");
		ЗаполнитьЗначенияСвойств(КлючОтбора, ДанныеСклада);
		
		СтрокиРеквизитов = ТаблицаРеквизитов.НайтиСтроки(КлючОтбора)
		
	КонецЕсли;
	
	// Заполняем выбранные по складам реквизиты
	
	СчетаНУ			        = ПолучитьРеквизитыСчетовНалоговогоУчета();
	РеквизитыСчетаЗатрат    = РеквизитыСчетаЗатрат();
	
	// Ключи 	- имена реквизитов субконто, 
	// Значения 	- структуры с ключами 
	//		"Счет" 			- имя счета, к которому относится субконто
	//		"Номенклатура" 	- имя реквизита номенклатуры, 
	//							по которому определяется субконто НоменклатурнаяГруппа.
	//							Берется из макета, может быть пустым.
	
	
	
	
	
	Для Каждого ДанныеРеквизита Из СтрокиРеквизитов Цикл
		
		Реквизит = ДанныеРеквизита.Реквизит;
		
		Если Реквизит = "ПринадлежностьНоменклатуры" Тогда
			
			// Заполняем реквизит вне зависимости от флагов отражения в учетах
			
		Иначе
			
			
		КонецЕсли;
		
		Если НЕ Перезаполнять И ЗначениеЗаполнено(ЗаполняемыйОбъект[Реквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		// Определим источник значения
		ИсточникСчета = ДанныеРеквизита[ХозяйственнаяСитуация];
		Если НЕ ЗначениеЗаполнено(ИсточникСчета) Тогда
			// Для "обычных" ситуаций - источник совпадает с именем реквизита
			ИсточникСчета = Реквизит;
		КонецЕсли;
		
		// Cчета затрат могли быть определены ранее. В этом случае их не заполняем.
		//
		// Счета не будут определены ранее, если затраты относятся на статью с характером "Прочее"
		// В этом случае для услуг попробуем их заполнить.
		Если РеквизитыСчетаЗатрат.Свойство(ИсточникСчета)
			И ЗначениеЗаполнено(ЗаполняемыйОбъект[Реквизит]) Тогда
			// Счета были определены ранее
			Продолжить;
		КонецЕсли;
		
		
		
		
		// Получим значение счета из источника
		Если ЗначениеЗаполнено(ИсточникСчета) И СтруктураСчетовУчета.Свойство(ИсточникСчета) Тогда
			 ЗначениеСчета = СтруктураСчетовУчета[ИсточникСчета];
		КонецЕсли;
		
		// Не допускаем указания неправильного счета
		Если ПроверитьБалансовостьСчета(ЗначениеСчета, ДанныеРеквизита, ХозяйственнаяСитуация) Тогда
			// счет правильный
			ЗаполняемыйОбъект[Реквизит] = ЗначениеСчета;
		КонецЕсли; 		
		
		Если НЕ ЗначениеЗаполнено(ЗаполняемыйОбъект[Реквизит]) Тогда
        	Продолжить;
		КонецЕсли;
		
		// Далее выполняем действия только если смогли определить счет
		
		// При необходимости заменим счет учета на счет розницы
		Если НЕ ПустаяСтрока(ДанныеРеквизита.Розница) 
			И НуженРозничныйСчет(ЗаполняемыйОбъект, ДанныеРеквизита, РозничныйСклад) Тогда
			
			ЗаполняемыйОбъект[Реквизит] = СтруктураСчетовУчета[ДанныеРеквизита.Розница];
			
		КонецЕсли;
		
		Если Реквизит = "СхемаРеализации" И ТипЗнч(ЗаполняемыйОбъект) = Тип("СтрокаТаблицыЗначений") Тогда
			ЗаполняемыйОбъект.СчетДоходовБУ        = СтруктураСчетовУчета.СхемаРеализации.СчетДоходов;
			ЗаполняемыйОбъект.СубконтоДоходовБУ1   = СтруктураСчетовУчета.СхемаРеализации.СубконтоДоходов1;
			ЗаполняемыйОбъект.СубконтоДоходовБУ2   = СтруктураСчетовУчета.СхемаРеализации.СубконтоДоходов2;
			ЗаполняемыйОбъект.СубконтоДоходовБУ3   = СтруктураСчетовУчета.СхемаРеализации.СубконтоДоходов3; 
			ЗаполняемыйОбъект.СчетРасходовБУ       = СтруктураСчетовУчета.СхемаРеализации.СчетСебестоимости;
			ЗаполняемыйОбъект.СубконтоРасходовБУ1  = СтруктураСчетовУчета.СхемаРеализации.СубконтоСебестоимости1;
			ЗаполняемыйОбъект.СубконтоРасходовБУ2  = СтруктураСчетовУчета.СхемаРеализации.СубконтоСебестоимости2;
			ЗаполняемыйОбъект.СубконтоРасходовБУ3  = СтруктураСчетовУчета.СхемаРеализации.СубконтоСебестоимости3; 
		КонецЕсли;	
		
		Если Реквизит = "НалоговоеНазначение" Тогда 
			
			// для полученых в переработку или от комитента не заполняем налоговые назначения, более того, их необходимо очистить, если они были заполнены ранее
			Если СтруктураСчетовУчета.ХозяйственнаяСитуация = "ПолученоВПереработку" ИЛИ СтруктураСчетовУчета.ХозяйственнаяСитуация = "ПолученоОтКомитента" Тогда
				ЗаполняемыйОбъект.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
				Продолжить;
			КонецЕсли;
			
			Если ИспользоватьОпределениеСчетовПриПроведенииДокументов(СтруктураШапкиДокумента.Дата) Тогда 
				// перепрописуем НалоговоеНазначение НДС только если есть флаг ОпределятьИзНГЗатрат, в других случаях - то, что по умолчанию
				Если СтруктураСчетовУчета.ОпределятьИзНГЗатрат Тогда
					НалоговоеНазначениеНГ = ЗаполняемыйОбъект.Номенклатура.НоменклатурнаяГруппаЗатрат.НалоговоеНазначение;
					Если ЗначениеЗаполнено(НалоговоеНазначениеНГ) Тогда
						ЗаполняемыйОбъект.НалоговоеНазначение = НалоговоеНазначениеНГ;
					КонецЕсли; 
				Иначе 
					//Ничего не делаем, берём из установок по умолчанию
				КонецЕсли;
				
				// установим ВидНалоговойДеятельности и ВидДеятельностиНДС 
				Попытка
					ЗаполняемыйОбъект.ВидНалоговойДеятельности  = ЗаполняемыйОбъект.НалоговоеНазначение.ВидНалоговойДеятельности;
				Исключение
					// 
				КонецПопытки;
					
				Попытка
					ЗаполняемыйОбъект.ВидДеятельностиНДС  = ЗаполняемыйОбъект.НалоговоеНазначение.ВидДеятельностиНДС;
				Исключение
					// 
				КонецПопытки;
				
			КонецЕсли;  	
			
		КонецЕсли;  
		
		
		Если Реквизит = "НалоговоеНазначениеДоходовИЗатрат" Тогда 
			
			// для полученых в переработку или от комитента не заполняем налоговые назначения, более того, их необходимо очистить, если они были заполнены ранее
			Если СтруктураСчетовУчета.ХозяйственнаяСитуация = "ПолученоВПереработку" ИЛИ СтруктураСчетовУчета.ХозяйственнаяСитуация = "ПолученоОтКомитента" Тогда
				ЗаполняемыйОбъект.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
				Продолжить;
			КонецЕсли;
			
			Если ДанныеРеквизита.ПоступлениеИлиРеализация = "УслугиСобственнымПодразделениям" Тогда
				НалоговоеНазначениеНДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
			Иначе
				Попытка
					НалоговоеНазначениеНДС = ЗаполняемыйОбъект.НалоговоеНазначение;
				Исключение
					НалоговоеНазначениеНДС = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
				КонецПопытки; 
			КонецЕсли;
			
			НалоговоеНазначениеЗатрат = ЗаполняемыйОбъект.НалоговоеНазначениеДоходовИЗатрат;
			
			Если ИспользоватьОпределениеСчетовПриПроведенииДокументов(СтруктураШапкиДокумента.Дата) Тогда 
				
				Лев = НЕ ТипЗнч(ЗаполняемыйОбъект) = Тип("СтрокаТаблицыЗначений");
				
				ЗаказТЧ    = ИмяРеквизитаЗаказ(ДанныеРеквизита.ЗаказТабличнойЧасти, Лев);
				ЗаказШапки = ИмяРеквизитаЗаказ(ДанныеРеквизита.ЗаказШапки, Лев);
				
				
				Если ДанныеРеквизита.ПоступлениеИлиРеализация = "Поступление" Тогда   
					
					Если ЗаказТЧ <> "" И ЗначениеЗаполнено(ЗаполняемыйОбъект[ЗаказТЧ]) И (ТипЗнч(ЗаполняемыйОбъект[ЗаказТЧ]) = Тип("ДокументСсылка.ЗаказПокупателя") или ТипЗнч(ЗаполняемыйОбъект[ЗаказТЧ]) = Тип("ДокументСсылка.ЗаказНаПроизводство")) И ЗначениеЗаполнено(ЗаполняемыйОбъект[ЗаказТЧ].НалоговоеНазначение) Тогда
						НалоговоеНазначениеНДС = ЗаполняемыйОбъект[ЗаказТЧ].НалоговоеНазначение;
					ИначеЕсли ЗаказШапки <> "" И ЗначениеЗаполнено(СтруктураШапкиДокумента[ЗаказШапки]) И (ТипЗнч(СтруктураШапкиДокумента[ЗаказШапки]) = Тип("ДокументСсылка.ЗаказПокупателя") или ТипЗнч(СтруктураШапкиДокумента[ЗаказШапки]) = Тип("ДокументСсылка.ЗаказНаПроизводство")) И ЗначениеЗаполнено(СтруктураШапкиДокумента[ЗаказШапки].НалоговоеНазначение) Тогда
						НалоговоеНазначениеНДС = СтруктураШапкиДокумента[ЗаказШапки].НалоговоеНазначение;
					ИначеЕсли СтруктураСчетовУчета.ОпределятьИзНГЗатрат Тогда
						НалоговоеНазначениеНГ = ЗаполняемыйОбъект.Номенклатура.НоменклатурнаяГруппаЗатрат.НалоговоеНазначение;
						Если ЗначениеЗаполнено(НалоговоеНазначениеНГ) Тогда
							НалоговоеНазначениеНДС = НалоговоеНазначениеНГ;
						КонецЕсли; 
					Иначе 
						//Ничего не делаем, берём из установок по умолчанию
					КонецЕсли;
					
				ИначеЕсли ДанныеРеквизита.ПоступлениеИлиРеализация = "Реализация" Тогда
					
					Если ЗаказТЧ <> "" И ЗначениеЗаполнено(ЗаполняемыйОбъект[ЗаказТЧ]) И (ТипЗнч(ЗаполняемыйОбъект[ЗаказТЧ]) = Тип("ДокументСсылка.ЗаказПокупателя") или ТипЗнч(ЗаполняемыйОбъект[ЗаказТЧ]) = Тип("ДокументСсылка.ЗаказНаПроизводство")) И ЗначениеЗаполнено(ЗаполняемыйОбъект[ЗаказТЧ].НалоговоеНазначение) Тогда
						
						НалоговоеНазначениеНДС = ЗаполняемыйОбъект[ЗаказТЧ].НалоговоеНазначение;
						
					ИначеЕсли ЗаказШапки <> "" И ЗначениеЗаполнено(СтруктураШапкиДокумента[ЗаказШапки]) И (ТипЗнч(СтруктураШапкиДокумента[ЗаказШапки]) = Тип("ДокументСсылка.ЗаказПокупателя") или ТипЗнч(СтруктураШапкиДокумента[ЗаказШапки]) = Тип("ДокументСсылка.ЗаказНаПроизводство"))  И ЗначениеЗаполнено(СтруктураШапкиДокумента[ЗаказШапки].НалоговоеНазначение) Тогда	
						
						НалоговоеНазначениеНДС = СтруктураШапкиДокумента[ЗаказШапки].НалоговоеНазначение;
						
					Иначе  
						//Ничего не делаем, берём из установок по умолчанию
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
						
			Если ДанныеРеквизита.ПоступлениеИлиРеализация = "ТребованиеНакладная" 
				ИЛИ ДанныеРеквизита.Документ = "ОтчетПроизводстваЗаСмену" И ДанныеРеквизита.ТабличнаяЧасть = "Продукция"
				Тогда
				Если ЗаказТЧ = Неопределено Тогда
					ЗаказТЧ = "Заказ";
				КонецЕсли; 
				// определяем налоговое назначение по заказу затрат, НГ, подразделению
				СтруктураПараметров = Новый Структура("Заказ, НоменклатурнаяГруппа, ПодразделениеОрганизации", ЗаполняемыйОбъект[ЗаказТЧ], ЗаполняемыйОбъект.НоменклатурнаяГруппа, СтруктураШапкиДокумента.ПодразделениеОрганизации);
				НалоговоеНазначениеПоЗаказу = УправлениеЗатратами.ОпределитьНалоговоеНазначение(СтруктураПараметров);
				Если ЗначениеЗаполнено(НалоговоеНазначениеПоЗаказу) Тогда
					НалоговоеНазначениеНДС = НалоговоеНазначениеПоЗаказу;
				КонецЕсли; 
			КонецЕсли;
			
			// в зависимости от группы налогового назначения, определенной по счету затрат
			// заполняем НалоговоеНазначениеДоходовИЗатрат равным НалоговоеНазначениеНДС или НалоговоеНазначениеЗатрат
			Попытка
				
				Если ДанныеРеквизита.ПоступлениеИлиРеализация = "УслугиСобственнымПодразделениям" Тогда
					ЗаполняемыйОбъектСубконто1 = Неопределено;
					ЗаполняемыйОбъектСубконто2 = Неопределено;
					ЗаполняемыйОбъектСубконто3 = Неопределено;
				Иначе
					ЗаполняемыйОбъектСубконто1 = ЗаполняемыйОбъект.Субконто1;
					ЗаполняемыйОбъектСубконто2 = ЗаполняемыйОбъект.Субконто2;
					ЗаполняемыйОбъектСубконто3 = ЗаполняемыйОбъект.Субконто3;
				КонецЕсли;
				
				ГруппаНалоговыхНазначений = НалоговыйУчетПовтИсп.ОпределитьГруппуНалоговогоНазначенияЗатрат(
												ЗаполняемыйОбъект.СчетЗатрат, 
												ЗаполняемыйОбъектСубконто1, 
												ЗаполняемыйОбъектСубконто2, 
												ЗаполняемыйОбъектСубконто3
				);
				
				Если ГруппаНалоговыхНазначений = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС Тогда
					ЗаполняемыйОбъект.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеНДС;
				ИначеЕсли ГруппаНалоговыхНазначений = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат Тогда
					Если НалоговыйУчетПовтИсп.ПолучитьГруппуНалоговогоНазначения(НалоговоеНазначениеЗатрат) = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоходовИЗатрат Тогда
						ЗаполняемыйОбъект.НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначениеЗатрат;
					Иначе
						ЗаполняемыйОбъект.НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
					КонецЕсли; 
				КонецЕсли; 
				
			Исключение
				// 
			КонецПопытки; 	
			
			// установим ВидНалоговойДеятельности и ВидДеятельностиНДС 
			Попытка
				ЗаполняемыйОбъект.ВидНалоговойДеятельностиДоходовИЗатрат  = ЗаполняемыйОбъект.НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности;
			Исключение
				// 
			КонецПопытки;
			
			Попытка
				ЗаполняемыйОбъект.ВидДеятельностиНДСДоходовИЗатрат  = ЗаполняемыйОбъект.НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС;
			Исключение
				// 
			КонецПопытки;
			
			
		КонецЕсли;  
		
	КонецЦикла;
	
	
	// Заполняем клоны колонок
	Если ЗаполнятьКлоныКолонок Тогда
		Для Каждого ДанныеРеквизита Из ТаблицаРеквизитов Цикл
			Если ЗначениеЗаполнено(ДанныеРеквизита.КлоныКолонок) Тогда
				Для Каждого ДанныеКлона Из Новый Структура(ДанныеРеквизита.КлоныКолонок) Цикл
					Если НЕ Перезаполнять И ЗначениеЗаполнено(ЗаполняемыйОбъект[ДанныеКлона.Ключ]) Тогда
						Продолжить;
					КонецЕсли;
					ЗаполняемыйОбъект[ДанныеКлона.Ключ] = ЗаполняемыйОбъект[ДанныеРеквизита.Реквизит];
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значения счетов учета затрат в переданной строке табличной части или "шапке" документа.
// 
// Параметры:
//  ЗаполняемыйОбъект       - строка табличной части, строка таблицы значений, структура шапки документа или ДокументОбъект
//  ТаблицаРеквизитов       - таблица, возвращаемая функцией ПолучитьРеквизитыСчетовУчета() и содержащая сведения о заполняемых реквизитах объекта
//  СтруктураШапкиДокумента - структура шапки документа или ДокументОбъект, 		источник данных для определения счетов
//  ДанныеСтроки            - строка табличной части или строка таблицы значений, 	источник данных для определения счетов
//  Перезаполнять           - если Ложь, то будут заполнены только незаполненные значения
Процедура УстановитьСчетаЗатрат(ЗаполняемыйОбъект, ТаблицаРеквизитов, ХозяйственнаяСитуация, СтруктураШапкиДокумента, ДанныеСтроки=Неопределено, Перезаполнять=Ложь)
	
	// Определим, какие реквизиты будем заполнять.
	// Ключ - "каноническое" имя источника данных для заполнения, 
	// значение - ключ структуры, возвращаемой ПолучитьСчетаУчетаСтатьиЗатрат()
	ИсточникиЗаполнения	= РеквизитыСчетаЗатрат();
	
	// Определим, какие реквизиты будут источником для определения счетов
	//  - в виде строки
	РеквизитыИсточникаОпределенияСчетов = "ПодразделениеШапки,СтатьяЗатратШапки";
	Если ДанныеСтроки <> Неопределено Тогда
		РеквизитыИсточникаОпределенияСчетов = РеквизитыИсточникаОпределенияСчетов + ",ПодразделениеТабличнойЧасти,СтатьяЗатратТабличнойЧасти";
	КонецЕсли;
	
	// Определим реквизиты, которые относятся к счетам учета затрат. Составим таблицу с данными таких реквизитов - часть таблицы ТаблицаРеквизитов.
	ТаблицаЗаполняемыхРеквизитов = Новый ТаблицаЗначений();
	ТаблицаЗаполняемыхРеквизитов.Колонки.Добавить("Реквизит"); // Имя реквизита
	ТаблицаЗаполняемыхРеквизитов.Колонки.Добавить("Источник"); // Источник заполнения, ключ структуры, возвращаемой ПолучитьСчетаУчетаСтатьиЗатрат()
	// Также в колонки таблицы добавим данные об источнике определения счета
	Для Каждого ИмяИсточника Из Новый Структура(РеквизитыИсточникаОпределенияСчетов) Цикл
		ТаблицаЗаполняемыхРеквизитов.Колонки.Добавить(ИмяИсточника.Ключ);
	КонецЦикла;
	
	// Заполнение таблицы с данными только о счетах затрат
	Для Каждого СтрокаТаблицыРеквизитов Из ТаблицаРеквизитов Цикл
		
		Источник = ""; // Источник заполнения счета затрат для данной строки
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыРеквизитов[ХозяйственнаяСитуация])         // 1 случай: имя реквизита совпадает с счетом затрат. Исключение для хоз. ситуации не задано.
		   И ИсточникиЗаполнения.Свойство(СтрокаТаблицыРеквизитов.Реквизит, Источник)
		 ИЛИ ЗначениеЗаполнено(СтрокаТаблицыРеквизитов[ХозяйственнаяСитуация])            // 2 случай: для хоз. ситуации задан счет затрат
		   И ИсточникиЗаполнения.Свойство(СтрокаТаблицыРеквизитов[ХозяйственнаяСитуация], Источник) Тогда
			//если не перезаполняем, то будем добавлять только незаполненные
			Если Перезаполнять ИЛИ НЕ ЗначениеЗаполнено(ЗаполняемыйОбъект[СтрокаТаблицыРеквизитов.Реквизит]) Тогда
				// Перенесем строку в новую "маленькую" таблицу
				НоваяСтрока = ТаблицаЗаполняемыхРеквизитов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРеквизитов);
				НоваяСтрока.Источник = Источник;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаЗаполняемыхРеквизитов.Количество() = 0 Тогда
		//ничего не надо заполнять
		Возврат;
	КонецЕсли;
	
	// Для одного объекта может понадобиться получать счета затрат в разных ситуациях: 
	// значения разных реквизитов со счетами могут зависеть от значений разных реквизитов шапки и табличной части.
	// Поэтому составим перечень сочетаний таких реквизитов и для каждого из сочетаний будем определять значения счетов.
	ИсточникиОпределенияСчетов = ТаблицаЗаполняемыхРеквизитов.Скопировать();
	ИсточникиОпределенияСчетов.Свернуть(РеквизитыИсточникаОпределенияСчетов);
	
	СтруктураОтбора = Новый Структура(РеквизитыИсточникаОпределенияСчетов); // Также используется для определения перечня используемых реквизитов источника.
	
	Для Каждого ИсточникОпределенияСчетов Из ИсточникиОпределенияСчетов Цикл
		
		// Счет затрат зависит от подразделения и статьи затрат
		
		// Подразделение
		Если СтруктураОтбора.Свойство("ПодразделениеТабличнойЧасти") // Этот источник может не использоваться, если заполнение только по шапке.
		   И ЗначениеЗаполнено(ИсточникОпределенияСчетов["ПодразделениеТабличнойЧасти"]) Тогда
			Подразделение = ДанныеСтроки[ИсточникОпределенияСчетов["ПодразделениеТабличнойЧасти"]];
		ИначеЕсли ЗначениеЗаполнено(ИсточникОпределенияСчетов["ПодразделениеШапки"]) Тогда
			Подразделение = СтруктураШапкиДокумента[ИсточникОпределенияСчетов["ПодразделениеШапки"]];
		Иначе
			Подразделение = Неопределено;
		КонецЕсли;
		
		// Статья затрат
		Если СтруктураОтбора.Свойство("СтатьяЗатратТабличнойЧасти") // Этот источник может не использоваться, если заполнение только по шапке.
		   И ЗначениеЗаполнено(ИсточникОпределенияСчетов["СтатьяЗатратТабличнойЧасти"]) Тогда
			СтатьяЗатрат = ДанныеСтроки[ИсточникОпределенияСчетов["СтатьяЗатратТабличнойЧасти"]];
		ИначеЕсли ЗначениеЗаполнено(ИсточникОпределенияСчетов["СтатьяЗатратШапки"]) Тогда
			СтатьяЗатрат = СтруктураШапкиДокумента[ИсточникОпределенияСчетов["СтатьяЗатратШапки"]];
		Иначе
			СтатьяЗатрат = Неопределено;
		КонецЕсли;
		
		// Определяем счета затрат
		СчетаУчета = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(Подразделение, СтатьяЗатрат);
		
		// Заполняем счета затрат в реквизиты с обрабатываемым источником заполнения 
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ИсточникОпределенияСчетов);
		РеквизитыДляЗаполнения = ТаблицаЗаполняемыхРеквизитов.НайтиСтроки(СтруктураОтбора);
		Для Каждого Реквизит Из РеквизитыДляЗаполнения Цикл
			ЗаполняемыйОбъект[Реквизит.Реквизит] = СчетаУчета[Реквизит.Источник]; // Реквизит.Источник - это СчетУчетаБУ или НалоговоеНазначение, имя ключа структуры, возвращаемой УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат()
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


// Подготавливает структуру счетов расчетов с контрагентов по данным настроек
// Используется в функциях ЗаполнитьСтруктуруСчетовУчетаШапки() модулей документов.
// Непосредственное получение данных о счетах выполняется в БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом()
//
// Параметры:
//  Организация,
//  Контрагент,
//  ДоговорКонтрагента  - условия, для которых будут получены настройки счетов учета расчетов.
//  СтруктураРеквизитов - структура
//   ключи - имена реквизитов,
//   значения - имена соответствующих им настроек (см. БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом().
//
// Возвращаемое значение:
//  Структура. Ключи - имена реквизитов, значения - значения, установленные в настройке счетов учета расчетов.
//  Структура содержит только ключи, для которых выполнены настройки:
//  - если настройки не выполнены, то структура не будет содержать ключ
//  - если выполнена настройка и в настройке указано пустое значение - то структура будет
//    содержать соответствующий ключ с пустым значением.
Функция ЗаполнитьСтруктуруСчетовРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента, СтруктураРеквизитов) Экспорт
	
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	
	СтруктураВозврата = Новый Структура();
	Для Каждого Реквизит Из СтруктураРеквизитов Цикл
		Если СчетаУчета.Свойство(Реквизит.Значение) Тогда
			Если СчетаУчета[Реквизит.Значение] <> Неопределено Тогда // т.е. найдена подходящая настройка
				СтруктураВозврата.Вставить(Реквизит.Ключ, СчетаУчета[Реквизит.Значение]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

//ЗАПОЛНЕНИЕ для режима, когда НЕ используется определение счетов при проведении документов

// Определяет, надо ли заполнять счета учета при вводе документов
//
// Параметры 
//  Дата - дата документа
//
// Возвращаемое значение
//  Истина - заполнять счета учета в документе требуется
//  Ложь   - заполнять счета учета в документе НЕ требуется
Функция ЗаполнятьСчетаУчетаВДокументах(Дата) Экспорт
	
	Если НЕ ИспользоватьОпределениеСчетовПриПроведенииДокументов(Дата) Тогда
		// Счета берем из регистра сведений, заполняем в документах всегда
		Возврат Истина;
	КонецЕсли;
	
	// Проверим, стоит ли флаг ЗаполнятьСчетаУчетаВДокументах в предыдущем документе УстановкаПараметровУчетаНоменклатуры
	Запрос = Новый Запрос(ПолучитьТекстЗапросаДокументУстановкиПараметровУчетаНоменклатуры(Новый Структура("ЗаполнятьСчетаУчетаВДокументах")));
	Запрос.УстановитьПараметр("Дата", Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		// Такое может быть, только если в другом сеансе изменили документ УстановкаПараметровУчетаНоменклатуры,
		// т.к. если ИспользоватьОпределениеСчетовПриПроведенииДокументов() = Истина, то документ до этой даты должен быть.
		Возврат Ложь; //Все равно корректно заполнить не сможем
	Иначе
		Возврат Выборка.ЗаполнятьСчетаУчетаВДокументах;
	КонецЕсли;
	
КонецФункции

//Заполняет счета учета номенклатуры и затрат в строке табличной части или табличной части.
//Параметры:
//	ДанныеТабличнойЧасти 		- строка табличной части или табличная часть
//	Объект				 		- ДокументОбъект
//	ЗаполнятьВЛюбомРежиме		- счета учета будут заполнены независимо от режима "Определять счета при проведении".
Процедура ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабличнойЧасти, ДанныеТабличнойЧасти, Объект, ЗаполнятьБУ=Истина, ЗаполнятьСчетаЗатрат=Истина, ЗаполнятьСчетаНоменклатуры=Истина, ЗаполнятьВЛюбомРежиме=Ложь) Экспорт
	
	Если НЕ ЗаполнятьВЛюбомРежиме И НЕ ЗаполнятьСчетаУчетаВДокументах(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеТабличнойЧасти) = Тип("СтрокаТаблицыЗначений") ИЛИ ТипЗнч(ДанныеТабличнойЧасти) = Тип("ТаблицаЗначений") Тогда
		//Процедура должна вызываться для табличной части или строки табличной части
		Возврат;
	КонецЕсли;
	
	ИмяДокумента = Объект.Метаданные().Имя;
	
	//Получим список заполняемых реквизитов
	ТаблицаРеквизитов 				= ПолучитьРеквизитыСчетовУчета(ИмяДокумента, ИмяТабличнойЧасти);
	
	Если ТаблицаРеквизитов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСкладов					= ПодготовитьТаблицуСкладов(Объект, ТаблицаРеквизитов);
	
	//Приведем данные к одинаковому виду (завернем строку в массив)
	ПередалиТабличнуюЧасть = (ТипЗнч(ДанныеТабличнойЧасти) = ТипЗнч(Объект[ИмяТабличнойЧасти]));
	Если ПередалиТабличнуюЧасть Тогда
		СтрокиТабличнойЧасти = ДанныеТабличнойЧасти;
	Иначе
		СтрокиТабличнойЧасти = Новый Массив();
		СтрокиТабличнойЧасти.Добавить(ДанныеТабличнойЧасти);
	КонецЕсли;

	//По реквизитам документа определим хозяйственную ситуацию
	ХозяйственнаяСитуацияДокумента	= ОпределитьХозяйственнуюСитуациюПоДокументу(ИмяТабличнойЧасти, ИмяДокумента, Объект);
	
	//Счета учета берутся из регистра сведений
	
	//Собственно заполнение счетов
	Для Каждого ДанныеСтроки Из СтрокиТабличнойЧасти Цикл
		
		ХозяйственнаяСитуация 	= ОпределитьХозяйственнуюСитуациюПоСтроке(ИмяТабличнойЧасти, ИмяДокумента, Объект, ДанныеСтроки, ХозяйственнаяСитуацияДокумента);
			
		Если ЗаполнятьСчетаЗатрат Тогда
			УстановитьСчетаЗатрат(
				ДанныеСтроки, 
				ТаблицаРеквизитов, 
				ХозяйственнаяСитуация, 
				Объект, 
				ДанныеСтроки, 
				Истина); // При интерактивном заполнении перезаполняем уже заполненные счета
		КонецЕсли;
		
		Если ЗаполнятьСчетаНоменклатуры Тогда
			
			
			//Определим склады по строке табличной части
			Для Каждого ДанныеСклада Из ТаблицаСкладов Цикл
				Если ЗначениеЗаполнено(ДанныеСклада.Склад) Тогда
					
					//Данные одинаковые для всех строк табличной части, возьмем их из таблицы складов
					Склад 		= ДанныеСклада.Склад;
					Розничный	= ДанныеСклада.Розничный;
					
				Иначе
					
					//Для каждой строки может быть свой склад. 
					
					Если ЗначениеЗаполнено(ДанныеСклада.ПриходныйОрдерТабличнойЧасти) И ПоступлениеПоОрдеру(ДанныеСклада, Объект) Тогда
						//Склад берем из ордера в строке.
						Склад 		= ДанныеСтроки[ДанныеСклада.ПриходныйОрдерТабличнойЧасти].Склад;
					ИначеЕсли ЗначениеЗаполнено(ДанныеСклада.СкладТабличнойЧасти) Тогда 
						//Склад берем из строки.
						Склад 		= ДанныеСтроки[ДанныеСклада.СкладТабличнойЧасти];
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Склад) Тогда
						//Возьмем склад из шапки документа
						Склад 		= ДанныеСклада.СкладДокумента;
					КонецЕсли;
					
					Если ТипЗнч(Склад) = Тип("СправочникСсылка.Склады") И ЗначениеЗаполнено(Склад) Тогда
						Розничный	= Склад.ВидСклада <> Перечисления.ВидыСкладов.Оптовый;
					Иначе
						Розничный	= Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				//Счета учета зависят от склада
				СтруктураСчетовУчета	= ПолучитьСчетаУчетаНоменклатурыИзНастроек(Объект.Организация, ДанныеСтроки.Номенклатура, Склад, Объект.Дата, ХозяйственнаяСитуация);
				
				//Установим счета учета для данной комбинации складов
                УстановитьСчетаУчета(ДанныеСтроки, ТаблицаРеквизитов, СтруктураСчетовУчета, ХозяйственнаяСитуация, Объект, ДанныеСклада, Розничный, ЗаполнятьБУ, Истина, Ложь);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

//Заполняет счета учета номенклатуры и затрат в "шапке" документа.
//Параметры:
//	Объект				 		- ДокументОбъект
//	РеквизитНоменклатура 		- имя реквизита шапки, содержащего номенклатуру, для которой определяются счета учета;
//									Значение субконто НоменклатурнаяГруппа определяются по имени реквизита, заданного в макете в колонке "Номенклатура"
//	ЗаполнятьВЛюбомРежиме		- счета учета будут заполнены независимо от режима "Определять счета при проведении".
Процедура ЗаполнитьСчетаУчетаШапки(Объект, ЗаполнятьБУ,  ЗаполнятьСчетаЗатрат=Истина, ЗаполнятьСчетаНоменклатуры=Истина, РеквизитНоменклатура=Неопределено, ЗаполнятьВЛюбомРежиме=Ложь) Экспорт
	
	Если НЕ ЗаполнятьБУ Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗаполнятьВЛюбомРежиме И НЕ ЗаполнятьСчетаУчетаВДокументах(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДокумента = Объект.Метаданные().Имя;
	
	//Получим список заполняемых реквизитов
	ТаблицаРеквизитов 		= ПолучитьРеквизитыСчетовУчета(ИмяДокумента, "");
	
	//По реквизитам документа определим хозяйственную ситуацию
	ХозяйственнаяСитуация = ОпределитьХозяйственнуюСитуациюПоДокументу("", ИмяДокумента, Объект);
	
	//Собственно заполнение счетов
	Если ЗаполнятьСчетаЗатрат Тогда
		УстановитьСчетаЗатрат(
			Объект, 
			ТаблицаРеквизитов, 
			ХозяйственнаяСитуация, 
			Объект,
			,        // Данных строки - нет, вызывается для шапки документа
			Истина); // При интерактивном заполнении перезаполняем уже заполненные счета
	КонецЕсли;
	
	Если ЗаполнятьСчетаНоменклатуры Тогда
		ТаблицаСкладов			= ПодготовитьТаблицуСкладов(Объект, ТаблицаРеквизитов);
		Номенклатура			= ?(РеквизитНоменклатура = Неопределено, Неопределено, Объект[РеквизитНоменклатура]);
		
		Для Каждого ДанныеСклада Из ТаблицаСкладов Цикл
			СтруктураСчетовУчета	= ПолучитьСчетаУчетаНоменклатурыИзНастроек(Объект.Организация, Номенклатура, ДанныеСклада.Склад, Объект.Дата, ХозяйственнаяСитуация);
			УстановитьСчетаУчета(Объект, ТаблицаРеквизитов, СтруктураСчетовУчета, ХозяйственнаяСитуация, , ДанныеСклада, ДанныеСклада.Розничный, ЗаполнятьБУ,  Истина, Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
			
КонецПроцедуры


//ЗАПОЛНЕНИЕ для режима, когда ИСПОЛЬЗУЕТСЯ определение счетов при проведении документов

//Заполняет счета учета в переданной таблице значений с данными табличной части.
//
//Параметры:
//	ДанныеТабличнойЧасти  - таблица значений
Процедура ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти(ИмяТабличнойЧасти, ДанныеТабличнойЧасти, СтруктураШапкиДокумента) Экспорт
	
	Если ДанныеТабличнойЧасти.Количество()=0 Тогда
		//Пустую таблицу заполнять не будем
		Возврат;
	КонецЕсли;
	
	Если НЕ ИспользоватьОпределениеСчетовПриПроведенииДокументов(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДокумента = СтруктураШапкиДокумента.ВидДокумента;
	
	// Получим список заполняемых и контролируемых реквизитов
	ТаблицаРеквизитов 		= ПолучитьРеквизитыСчетовУчета	(ИмяДокумента, ИмяТабличнойЧасти);
	
	СтруктураОбязательныхПолей = ПолучитьСтруктуруПроверяемыхСчетовУчета(ТаблицаРеквизитов, СтруктураШапкиДокумента);
	
	Если НЕ СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете") ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		// Если не указано отражение в БУ, то счета не нужно заполнять.
		
		// Могут быть реквизиты, которые заполняются, даже если документ не отражается в бухгалтерском учете
		Если ТаблицаРеквизитов.Найти("ПринадлежностьНоменклатуры", "Реквизит") = Неопределено Тогда
			// Если таких реквизитов в этой табличной части нет - то ничего не делаем
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// дозаполним значения счетов учета
	// По реквизитам документа определим хозяйственную операцию
	ХозяйственнаяСитуацияДокумента = ОпределитьХозяйственнуюСитуациюПоДокументу(ИмяТабличнойЧасти, ИмяДокумента, СтруктураШапкиДокумента);

	УстановленныеСчета 		= ПолучитьСчетаУчетаНоменклатурыИзДокумента(
								СтруктураШапкиДокумента.Организация,
								СтруктураШапкиДокумента.Дата,
								ДанныеТабличнойЧасти.ВыгрузитьКолонку("Номенклатура")
								);

	Для Каждого ДанныеСтроки Из ДанныеТабличнойЧасти Цикл 			
		
		
		ХозяйственнаяСитуация 	= ОпределитьХозяйственнуюСитуациюПоСтроке(ИмяТабличнойЧасти, ИмяДокумента, СтруктураШапкиДокумента, ДанныеСтроки, ХозяйственнаяСитуацияДокумента);
		
		//Счета затрат
		УстановитьСчетаЗатрат(ДанныеСтроки, ТаблицаРеквизитов, ХозяйственнаяСитуация, СтруктураШапкиДокумента, ДанныеСтроки);
		
		
		//Счета номенклатуры
		СтруктураСчетовУчета	= ПолучитьСтруктуруСчетовУчета(ДанныеСтроки.Номенклатура, УстановленныеСчета, ХозяйственнаяСитуация);
        УстановитьСчетаУчета(ДанныеСтроки, ТаблицаРеквизитов, СтруктураСчетовУчета, ХозяйственнаяСитуация, СтруктураШапкиДокумента); 
		
	КонецЦикла;
	
КонецПроцедуры

//Заполняет счета учета в переданной структуре (СтруктуреШапкиДокумента).
//
//Параметры:
//	РеквизитНоменклатура - имя реквизита шапки, содержащего номенклатуру, для которой определяются счета учета;
//	Значение субконто НоменклатурнаяГруппа определяются по имени реквизита, заданного в макете в колонке "Номенклатура"
Процедура ЗаполнитьПриПроведенииСчетаУчетаШапки(СтруктураШапкиДокумента, РеквизитНоменклатура = Неопределено) Экспорт
	
	Если НЕ СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете") ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		//Если не указано отражение в БУ, то счета не нужно заполнять.
		Возврат;
	КонецЕсли;
	
	Если НЕ ИспользоватьОпределениеСчетовПриПроведенииДокументов(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
		
	ИмяДокумента = СтруктураШапкиДокумента.ВидДокумента;
	
	//Получим список заполняемых и контролируемых реквизитов
	ТаблицаРеквизитов 		= ПолучитьРеквизитыСчетовУчета	(ИмяДокумента, "");
	
	//дозаполним значения счетов учета
	//По реквизитам документа определим хозяйственную операцию
	ХозяйственнаяСитуация = ОпределитьХозяйственнуюСитуациюПоДокументу("", ИмяДокумента, СтруктураШапкиДокумента);
	
	УстановитьСчетаЗатрат(СтруктураШапкиДокумента, ТаблицаРеквизитов, ХозяйственнаяСитуация, СтруктураШапкиДокумента);
	
	Номенклатура			= ?(ЗначениеЗаполнено(РеквизитНоменклатура), СтруктураШапкиДокумента[РеквизитНоменклатура], Неопределено);
	СтруктураСчетовУчета	= ПолучитьСчетаУчетаНоменклатурыИзНастроек(СтруктураШапкиДокумента.Организация, Номенклатура, , СтруктураШапкиДокумента.Дата, ХозяйственнаяСитуация);
	
	УстановитьСчетаУчета(СтруктураШапкиДокумента, ТаблицаРеквизитов, СтруктураСчетовУчета, ХозяйственнаяСитуация);
	
КонецПроцедуры

//Заполняет счета учета в переданной таблице значений с данными табличной части и проверяет их заполнение.
//
Процедура ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти(ИмяТабличнойЧасти, ДанныеТабличнойЧасти, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	//Заполним счета учета
	ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти(ИмяТабличнойЧасти, ДанныеТабличнойЧасти, СтруктураШапкиДокумента);
	
	//Выполним проверку счетов учета
	ПроверитьСчетаУчетаТабличнойЧасти(ИмяТабличнойЧасти, ДанныеТабличнойЧасти, СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

//Заполняет счета учета в переданной структуре (СтруктуреШапкиДокумента) и проверяет их заполнение.
//
Процедура ЗаполнитьИПроверитьЗаполнениеСчетовУчетаШапки(СтруктураШапкиДокумента, Отказ, Заголовок, РеквизитНоменклатура = Неопределено) Экспорт
	
	//Заполняем счета учета
	ЗаполнитьПриПроведенииСчетаУчетаШапки(СтруктураШапкиДокумента, РеквизитНоменклатура);
	
	//Выполним проверку счетов учета
	ПроверитьСчетаУчетаШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//
// ПРОВЕРКА СЧЕТОВ УЧЕТА В ДОКУМЕНТАХ
//

//Выдает сообщение об ошибке и устанавливает Отказ = Истина.
//Параметры:
//	Ошибка				- 	строка, содержащая текст сообщения об ошибке. Может содержать служебный символ #
//	Реквизит			- 	КлючИЗначение, содержащее Имя реквизита и его представление.
//							Представлением реквизита будет заменен символ # в тексте сообщения об ошибке.
//	НомерСтроки 		- 	Номер строки табличной части для выдачи в сообщении;
//	ПредставлениеТабличнойЧасти, МетаданныеРеквизиты 
//						- 	кэш метаданных (инициализируется в этой процедуре).
//	
Процедура СообщитьОбОшибкеЗаполненияСчетовУчетаТабличнойЧасти(Ошибка, Реквизит = Неопределено,
													НомерСтроки, ИмяДокумента, ИмяТабличнойЧасти,
													Отказ, Заголовок,
													ПредставлениеТабличнойЧасти = Неопределено, МетаданныеРеквизиты = Неопределено)
	
	//Подготовим метаданные для получения представления реквизитов для выдачи сообщения.
	Если ПредставлениеТабличнойЧасти = Неопределено Тогда
		ПредставлениеТабличнойЧасти = Метаданные.Документы[ИмяДокумента].ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	КонецЕсли;

	Если МетаданныеРеквизиты = Неопределено Тогда
		МетаданныеРеквизиты = Метаданные.Документы[ИмяДокумента].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	КонецЕсли;

	СтрокаНачалаСообщенияОбОшибке = "В строке №"+СокрЛП(НомерСтроки)+" табличной части """+ПредставлениеТабличнойЧасти+""": ";

	Если Реквизит <> Неопределено Тогда
		
		//Добавим название реквизита
		
		ПредставлениеРеквизита = СокрЛП(МетаданныеРеквизиты[Реквизит].Представление());
		
		Ошибка = СтрЗаменить(Ошибка, "#", ПредставлениеРеквизита);
		
	КонецЕсли;

	//Сообщаем
	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Ошибка, Отказ, Заголовок);
	
КонецПроцедуры

//Возвращает структуру реквизитов, подлежащих проверке в табличной части или шапке документа
//
//Параметры:
//	РеквизитыСчетовУчета	- таблица, возвращаемая функцией ПолучитьРеквизитыСчетовУчета() и содержащая сведения о проверяемых реквизитах и условиях проверки
Функция ПолучитьСтруктуруПроверяемыхСчетовУчета(РеквизитыСчетовУчета, СтруктураШапкиДокумента)
	
	РеквизитыСчетовНалоговогоУчета 	= ПолучитьРеквизитыСчетовНалоговогоУчета();
	
	СтруктураРеквизитов = Новый Структура();
	
	МассивНеОбязательных = Новый Массив;
	
	Для Каждого Реквизит Из РеквизитыСчетовУчета Цикл
		
		
			Если ПустаяСтрока(Реквизит.УсловияЗаполнения) Тогда
				//Этот реквизит должен быть заполнен в этом документе без доп. условий
				СтруктураРеквизитов.Вставить(Реквизит.Реквизит);
			Иначе
				//Проверяем условия заполнения
				УсловиеПроверки = Истина;
				
				Выполнить("УсловиеПроверки = " + Реквизит.УсловияЗаполнения);
				
				Если УсловиеПроверки Тогда
					//Этот реквизит должен быть заполнен в этом документе
					СтруктураРеквизитов.Вставить(Реквизит.Реквизит);
				Иначе	
					// Если реквизит не обязателен к заполнению - исключаем его полностью из таблицы проверяемых и заполняемых счетов учета
					МассивНеОбязательных.Добавить(Реквизит);
				КонецЕсли;
			КонецЕсли;
		
	КонецЦикла;
	
	// Если реквизит не должен заполнятся - исключаем его полностью из таблицы проверяемых и заполняемых счетов учета
	Для Каждого Реквизит Из МассивНеОбязательных Цикл
		РеквизитыСчетовУчета.Удалить(Реквизит);
	КонецЦикла; 
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

//Выполняет проверку счета на заполненность
//
Функция ПроверитьЗаполненностьСчета(СтрокаТаблицы, Реквизит, Услуга, ХозяйственнаяСитуация, УсловияДопустимостиПустыхСчетов)
	
	Возврат 
	ЗначениеЗаполнено(СтрокаТаблицы[Реквизит])
	ИЛИ
	//некоторые поля не обязательны для услуг
	Услуга И УсловияДопустимостиПустыхСчетов.СчетаКоторыеМожноНеЗаполнятьДляУслуг.Свойство(Реквизит)
	
	
	ИЛИ 
	//налоговые назначения можно не заполнять для принятых в переработку
	ХозяйственнаяСитуация = "ПолученоВПереработку" И (Реквизит = "НалоговоеНазначение" ИЛИ Реквизит = "НалоговоеНазначениеДоходовИЗатрат") 
	
КонецФункции

//Возвращает предопределенные значения, описывающие условия, в которых не требуется проверки счетов
//
Процедура ПолучитьКонстантыПроверкиСчетов(УсловияДопустимостиПустыхСчетов, ОпциональныеПоля)
	
	//ОПИСАНЫ СИТУАЦИИ, КОГДА СЧЕТА МОГУТ БЫТЬ ПУСТЫМИ
	УсловияДопустимостиПустыхСчетов = Новый Структура();
	
	//Некоторые счета можно не заполнять для услуг
	УсловияДопустимостиПустыхСчетов.Вставить(
		"СчетаКоторыеМожноНеЗаполнятьДляУслуг", 
		Новый Структура("Счет, СчетУчетаБУ, ПринятыеСчетУчетаБУ"));
	
	
	
	//УсловияДопустимостиПустыхСчетов.Вставить(
	//	"СчетаДляКоторыхМожноНеЗаполнятьСтатьюПриростаУбыли", 
	//	
	//	
	//	Новый Структура("Счет, СчетУчетаБУ, ПринятыеСчетУчетаБУ"));
		
		
	
	
	//ОПИСАН НАБОР ОПЦИОНАЛЬНЫХ ПОЛЕЙ (т.е. когда одно из полей набора обязательно должно быть заполнено)
	//проверяем отдельно.
	ОпциональныеПоля = Новый Массив();
	//Массив содержит все возможные наборы опциональных полей, не важно, присутствуют они в данном документе или нет.
	//Для каждого набора опциональных полей структуру, содержащую ключи:
	//	СтрокаСообщенияОбОшибке - текст, выводимый если ни одно из полей набора не заполнено;
	//	СтруктураПолей			- структура, перечень опциональных полей.
	
	ОпциональныеПоля.Добавить(Новый Структура("СтруктураПолей, СтрокаСообщенияОбОшибке",
	    Новый Структура("СчетУчетаБУ,ПринятыеСчетУчетаБУ"),
		"Не заполнены счета учета"
		));
	
	ОпциональныеПоля.Добавить(Новый Структура("СтруктураПолей, СтрокаСообщенияОбОшибке",
	    Новый Структура("НовыйСчетУчетаБУ,НовыйПринятыеСчетУчетаБУ"),
		"Не заполнены новые счета учета"
		));
	
	
	ОпциональныеПоля.Добавить(Новый Структура("СтруктураПолей, СтрокаСообщенияОбОшибке",
	    Новый Структура("ПереданныеСобственныеБУ,ПереданныеПринятыеБУ"),
		"Не заполнены счета учета переданные"
		));
	
		
	
КонецПроцедуры

//Выполняет проверку заполнения счетов номенклатуры в табличной части документа.
//Выдает сообщение пользователю и устанавливает Отказ=Истина в случае не заполненных реквизитов.
//Параметры:
//	ИмяТабличнойЧасти				- имя проверяемой табличной чати;
//	ДанныеТабличнойЧасти			- проверяемая таблица с данными табличной части;
//	ИмяДокумента 					- имя документа;
//	СтруктураШапкиДокумента			- структура реквизитов шапки документа, по данным которой могут применяться условия -
//									  проверять заполнение реквизита или нет;
//	Заголовок						- заголовок для выдачи сообщения об ошибке;
//	Отказ 							- в случае ошибки (не заполненных реквизитов) будет установлен в Истина.
Процедура ПроверитьСчетаУчетаТабличнойЧасти(ИмяТабличнойЧасти, ДанныеТабличнойЧасти, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	Если НЕ СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете") ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		//Если не указано отражение в БУ, то счета могут быть не заполнены.
		Возврат;
	КонецЕсли;
	
	Если ДанныеТабличнойЧасти.Количество()=0 Тогда
		//Пустую таблицу проверять не будем
		Возврат;
	КонецЕсли;
	
	ИмяДокумента = СтруктураШапкиДокумента.ВидДокумента;
	
	РеквизитыСчетовУчета = ПолучитьРеквизитыСчетовУчета(ИмяДокумента, ИмяТабличнойЧасти);
	
	Если РеквизитыСчетовУчета.Количество() = 0 Тогда
		//Работа со счетами в этой табличной части не предусмотрена
		Возврат;
	КонецЕсли;
	
	//Инициализируем значения переменных
	ПредставлениеТабличнойЧасти 	= Неопределено;
	МетаданныеРеквизиты         	= Неопределено;
	УсловияДопустимостиПустыхСчетов = Неопределено;
	ОпциональныеПоля 				= Неопределено;
	ПолучитьКонстантыПроверкиСчетов(УсловияДопустимостиПустыхСчетов, ОпциональныеПоля);
		
	//Определим перечень проверяемых полей
	СтруктураОбязательныхПолей = ПолучитьСтруктуруПроверяемыхСчетовУчета(РеквизитыСчетовУчета, СтруктураШапкиДокумента);
	
	//Приведем состав опциональных полей в соответствии с структурой проверяемых в данный момент реквизитов
	КоличествоСтрок = ОпциональныеПоля.Количество();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		НаборПолей = ОпциональныеПоля[КоличествоСтрок - НомерСтроки];
		
		//Поля должны быть все в переданной структуре.
		
		ВсеПоля = Истина;
		Для Каждого Поле Из НаборПолей.СтруктураПолей Цикл
			
			ВсеПоля = ВсеПоля И СтруктураОбязательныхПолей.Свойство(Поле.Ключ);
			
		КонецЦикла;
		
		Если НЕ ВсеПоля Тогда
			
			//уберем это опциональное поле
			
			ОпциональныеПоля.Удалить(КоличествоСтрок - НомерСтроки);
			
		Иначе
			
			//уберем поля набора из "обычной" проверки
			
			Для Каждого Поле Из НаборПолей.СтруктураПолей Цикл
				СтруктураОбязательныхПолей.Удалить(Поле.Ключ);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Получим хозяйственную ситуацию документа
	ХозяйственнаяСитуацияДокумента = ОпределитьХозяйственнуюСитуациюПоДокументу(ИмяТабличнойЧасти, ИмяДокумента, СтруктураШапкиДокумента);
	
	//Проверяем, есть ли услуги в табличной части
	КолонкаУслуга = ДанныеТабличнойЧасти.Колонки.Найти("Услуга");
	Если КолонкаУслуга = Неопределено Тогда
		ЕстьУслуги = Ложь;
	Иначе
		ЕстьУслуги = КолонкаУслуга.ТипЗначения.СодержитТип(Тип("Булево"));
	КонецЕсли;
	
	//Цикл по строкам табличной части.
	Для Каждого СтрокаТаблицы Из ДанныеТабличнойЧасти Цикл
		
		//поля таблицы имеют составной тип, обычно содержат NULL
		Услуга   				= ЕстьУслуги И СтрокаТаблицы.Услуга = Истина;
		
		ХозяйственнаяСитуация 	= ОпределитьХозяйственнуюСитуациюПоСтроке(ИмяТабличнойЧасти, ИмяДокумента, СтруктураШапкиДокумента, СтрокаТаблицы, ХозяйственнаяСитуацияДокумента);
		
		// Цикл по проверяемым "одиночным" полям
		
		//ПРОВЕРЯЕМ ЗАПОЛНЕННОСТЬ ПОЛЕЙ
		
		Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			
			// для полученых в переработку или от комитента налоговые назначения не надо заполнять
			Если КлючЗначение.Ключ = "НалоговоеНазначение" И (ХозяйственнаяСитуация = "ПолученоВПереработку" ИЛИ ХозяйственнаяСитуация = "ПолученоОтКомитента") Тогда
				Продолжить;
			КонецЕсли;
			
			// заполнение НалоговоеНазначениеДоходовИЗатрат здесь не проверяем, проверка происходит в
			// НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений или в модулях документов
			Если КлючЗначение.Ключ = "НалоговоеНазначениеДоходовИЗатрат"Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПроверитьЗаполненностьСчета(СтрокаТаблицы, КлючЗначение.Ключ, Услуга, ХозяйственнаяСитуация, УсловияДопустимостиПустыхСчетов) Тогда
			
				СообщитьОбОшибкеЗаполненияСчетовУчетаТабличнойЧасти("Не заполнен ""#""!" , КлючЗначение.Ключ, СтрокаТаблицы.НомерСтроки, ИмяДокумента, ИмяТабличнойЧасти, Отказ, Заголовок, ПредставлениеТабличнойЧасти, МетаданныеРеквизиты);
			
			КонецЕсли;//не заполнен реквизит
			
		КонецЦикла;//цикл по проверяемым полям
		
		// Цикл по проверяемым наборам опциональных полей
		
		Для Каждого НаборПолей Из ОпциональныеПоля Цикл
			
			ЕстьЗаполненные = Ложь; //надо определить, есть ли хоть одно заполненное поле
			
			Для Каждого Поле Из НаборПолей.СтруктураПолей Цикл
				
				Если ПроверитьЗаполненностьСчета(СтрокаТаблицы, Поле.Ключ, Услуга, ХозяйственнаяСитуация, УсловияДопустимостиПустыхСчетов) Тогда
					ЕстьЗаполненные = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЕстьЗаполненные Тогда
				
				СообщитьОбОшибкеЗаполненияСчетовУчетаТабличнойЧасти(НаборПолей.СтрокаСообщенияОбОшибке,, СтрокаТаблицы.НомерСтроки, ИмяДокумента, ИмяТабличнойЧасти, Отказ, Заголовок, ПредставлениеТабличнойЧасти, МетаданныеРеквизиты);
				
			КонецЕсли;
				
		КонецЦикла;
		
		//ПРОВЕРЯЕМ ПРАВИЛЬНОСТЬ СЧЕТОВ (БАЛАНСОВОСТЬ)
		Для Каждого Реквизит Из РеквизитыСчетовУчета Цикл

			Значение = СтрокаТаблицы[Реквизит.Реквизит];
			
			ДолженБытьЗабалансовым = Неопределено;
			Если НЕ ПроверитьБалансовостьСчета(Значение, Реквизит, ХозяйственнаяСитуация, ДолженБытьЗабалансовым) Тогда
				//Сообщим об ошибке
				СообщитьОбОшибкеЗаполненияСчетовУчетаТабличнойЧасти(
				"""#"" должен быть "+?(ДолженБытьЗабалансовым,"за","")+"балансовым" , Реквизит.Реквизит, СтрокаТаблицы.НомерСтроки, ИмяДокумента, ИмяТабличнойЧасти, Отказ, Заголовок, ПредставлениеТабличнойЧасти, МетаданныеРеквизиты);
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;//цикл по строкам
		
КонецПроцедуры

//Выполняет проверку заполнения счетов номенклатуры в шапке документа.
//Выдает сообщение пользователю и устанавливает Отказ=Истина в случае не заполненных реквизитов.
//Параметры:
//	СтруктураШапкиДокумента			- структура реквизитов шапки документа;
//	Заголовок						- заголовок для выдачи сообщения об ошибке;
//	Отказ 							- в случае ошибки (не заполненных реквизитов) будет установлен в Истина.
Процедура ПроверитьСчетаУчетаШапки(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	Если НЕ СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете") ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		//Если не указано отражение в БУ, то счета могут быть не заполнены.
		Возврат;
	КонецЕсли;
	
	ИмяДокумента = СтруктураШапкиДокумента.ВидДокумента;
	
	РеквизитыСчетовУчета = ПолучитьРеквизитыСчетовУчета(ИмяДокумента, "");
	
	Если РеквизитыСчетовУчета.Количество()=0 тогда
		//в шапке этого документа не обрабатываются счета учета
		Возврат;
	КонецЕсли;
	
	СтруктураОбязательныхПолей = ПолучитьСтруктуруПроверяемыхСчетовУчета(РеквизитыСчетовУчета, СтруктураШапкиДокумента);
	
	//Подготовим константы
	//ОпциональныеПоля не используем
	УсловияДопустимостиПустыхСчетов = Неопределено;
	ПолучитьКонстантыПроверкиСчетов(УсловияДопустимостиПустыхСчетов, Неопределено);
	
	//Получим данные о хозяйственной ситуации
	Услуга   				= СтруктураОбязательныхПолей.Свойство("Услуга") И СтруктураОбязательныхПолей.Услуга;
	ХозяйственнаяСитуация 	= ОпределитьХозяйственнуюСитуациюПоДокументу("", ИмяДокумента, СтруктураШапкиДокумента);
		
	//Проверим каждое из полей
	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

		Если НЕ ПроверитьЗаполненностьСчета(СтруктураШапкиДокумента, КлючЗначение.Ключ, Услуга, ХозяйственнаяСитуация, УсловияДопустимостиПустыхСчетов) Тогда
		
			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				ПредставлениеРеквизита = Метаданные.Документы[ИмяДокумента].Реквизиты[КлючЗначение.Ключ].Представление();
				СтрокаСообщения = "Не заполнен """ + СокрЛП(ПредставлениеРеквизита) + """!";
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		
		КонецЕсли;//не заполнен реквизит
		
	КонецЦикла;
	
КонецПроцедуры

//НАБОР ФУНКЦИЙ ДЛЯ ОПРЕДЕЛЕНИЯ ТЕКУЩЕЙ ХОЗЯЙСТВЕННОЙ СИТУАЦИИ, ОТРАЖАЕМОЙ ДОКУМЕНТОМ

//Возвращает строку - наименование хозяйственной ситуации, определенное по шапке документа
//Возвращает пустую строку, если хозяйственную ситуацию нужно определять по строке.
//Параметры:
//		СтруктураШапкиДокумента - структура или ДокументОбъект
Функция ОпределитьХозяйственнуюСитуациюПоДокументу(ИмяТабличнойЧасти, ИмяДокумента, СтруктураШапкиДокумента)
	
	Если ИмяДокумента = "ВозвратТоваровПоставщику" Тогда
		
		Если		ПроверитьВидОперации(СтруктураШапкиДокумента, "ИзПереработки") Тогда
			
			Возврат "ПолученоВПереработку";
			
		ИначеЕсли	ПроверитьДоговорСКомитентом(СтруктураШапкиДокумента) Тогда
			
			Возврат "ПолученоОтКомитента";
			
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "ВозвратТоваровПоставщикуИзНТТ" Тогда
		
		Если	ПроверитьДоговорСКомитентом(СтруктураШапкиДокумента) Тогда
			
			Возврат "ПолученоОтКомитента";
			
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "ЗаказПокупателя" Тогда
		
		Если		ПроверитьВидОперации(СтруктураШапкиДокумента, "Переработка") Тогда
			
			Возврат "ПолученоВПереработку";
			
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "КомплектацияНоменклатуры" Тогда
		
		Если		ПроверитьВидОперации(СтруктураШапкиДокумента, "ПоступлениеОтПереработчика") Тогда
			Если ПустаяСтрока(ИмяТабличнойЧасти) И СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Разборка
				//для шапки документа хозоперация "передано в переработку" возвращается для Разборки
				ИЛИ
				НЕ ПустаяСтрока(ИмяТабличнойЧасти) И СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка
				//для табличной части - для сборки
				Тогда
				
				Возврат "ПереданоВПереработку";
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИмяТабличнойЧасти) 
		   И ПроверитьВидОперации(СтруктураШапкиДокумента, "ВыпускПродукции")
		   И СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка
		Тогда
			Возврат ""; //хоз. ситуация будет определяться для каждой строки документа
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "КорректировкаЗаказаПокупателя" Тогда
		
		Если ТипЗнч(СтруктураШапкиДокумента) = Тип("ДокументОбъект.КорректировкаЗаказаПокупателя") Тогда
			Объект = СтруктураШапкиДокумента.ЗаказПокупателя; //значения реквизитов берем из заказа
		Иначе
			Объект = СтруктураШапкиДокумента; //структура шапки строится по заказу
		КонецЕсли;
		
		Если		ПроверитьВидОперации(Объект, "Переработка") Тогда
			
			Возврат "ПолученоВПереработку";
			
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "ОприходованиеМатериаловИзПроизводства" Тогда
		
		Возврат "";//хоз. ситуация будет определяться для каждой строки документа
		
	ИначеЕсли ИмяДокумента = "ОтчетПроизводстваЗаСмену" И ИмяТабличнойЧасти = "ВозвратныеОтходы" Тогда
		
		Возврат "";//хоз. ситуация будет определяться для каждой строки документа
			
	ИначеЕсли ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда
		
		Если		ПроверитьВидОперации(СтруктураШапкиДокумента, "ВПереработку") Тогда
			
			Возврат "ПолученоВПереработку";
			
		ИначеЕсли	ПроверитьДоговорСКомитентом(СтруктураШапкиДокумента) Тогда
			
			Возврат "ПолученоОтКомитента";
			
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "ПоступлениеТоваровУслугВНТТ" Тогда
		
		Если	ПроверитьДоговорСКомитентом(СтруктураШапкиДокумента) Тогда
			
			Возврат "ПолученоОтКомитента";
			
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "ТребованиеНакладная" Тогда
		
		Возврат ""; //хоз. ситуация будет определяться для каждой строки документа
		
	ИначеЕсли ИмяДокумента = "ПередачаТоваров" Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
			
			Возврат "ПолученоВПереработку";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "Другое";
	
КонецФункции

//Возвращает строку - наименование хозяйственной ситуации, определенное по строке документа.
//Параметры:
//		СтруктураШапкиДокумента - структура или ДокументОбъект
//		ДанныеСтроки - строка табличной части или таблицы значений
Функция ОпределитьХозяйственнуюСитуациюПоСтроке(ИмяТабличнойЧасти, ИмяДокумента, СтруктураШапкиДокумента, ДанныеСтроки, ХозяйственнаяСитуация)
	
	Если НЕ ПустаяСтрока(ХозяйственнаяСитуация) Тогда
		
		Возврат ХозяйственнаяСитуация;
		
	ИначеЕсли ИмяДокумента = "КомплектацияНоменклатуры" Тогда
		
		Если ПроверитьСтатусМатериальныхЗатратПереработка(ДанныеСтроки) Тогда
			
			Возврат "ПолученоВПереработку";
			
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "ОприходованиеМатериаловИзПроизводства" Тогда
		
		Если ПроверитьСтатусМатериальныхЗатратПереработка(ДанныеСтроки) Тогда
			
			Возврат "ПолученоВПереработку";
			
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "ОтчетПроизводстваЗаСмену" Тогда
		
		Если ПроверитьСтатусМатериальныхЗатратПереработка(ДанныеСтроки) Тогда
			
			Возврат "ПолученоВПереработку";
			
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "ТребованиеНакладная" Тогда
		
		Если ПроверитьСтатусМатериальныхЗатратПереработка(ДанныеСтроки) Тогда
			
			Возврат "ПолученоВПереработку";
			
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "ПередачаТоваров" Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
			
			Возврат "ПолученоВПереработку";
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат "Другое";
	
КонецФункции

//Возвращает Истина, если в документе установлен вид операции с переданным именем.
//Параметры:
//		СтруктураШапкиДокумента - структура или ДокументОбъект
//		ВидОперации				- строка, имя значения перечисления
Функция	ПроверитьВидОперации(СтруктураШапкиДокумента, ВидОперации)
	
	//Порядок обращения не отличается от того, передана структура шапки или документ-объект
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления[СтруктураШапкиДокумента.ВидОперации.Метаданные().Имя][ВидОперации] Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Возвращает Истина, если в строке установлена статья затрат со статусом ПринятыеВПереработку.
//Параметры:
//		ДанныеСтроки - строка табличной части или таблицы значений
//		Для строки табличы значений 	- должна быть колонка "СтатусМатериальныхЗатрат".
//		Для строки табличной части   	- должна быть колонка "СтатьяЗатрат"
Функция ПроверитьСтатусМатериальныхЗатратПереработка(ДанныеСтроки)
	
	Если ТипЗнч(ДанныеСтроки)=Тип("СтрокаТаблицыЗначений") Тогда
		Возврат ДанныеСтроки.СтатусМатериальныхЗатрат 				= Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку;
	Иначе
		Возврат ДанныеСтроки.СтатьяЗатрат.СтатусМатериальныхЗатрат 	= Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку;
	КонецЕсли;
	
КонецФункции

//Возвращает Истина, если в документе установлен договор с видом "с комитентом".
//Параметры:
//		СтруктураШапкиДокумента - структура или ДокументОбъект
//			Если передана структура, то она должна содержать свойство ВидДоговора
//		ИмяРеквизита			- строка, имя реквизита с договором.
Функция	ПроверитьДоговорСКомитентом(СтруктураШапкиДокумента, ИмяРеквизита = "ДоговорКонтрагента")
	
	//Для структуры - должно быть свойство "ВидДоговора".
	//Для объекта - реквизит передается в шапке, вид получается через точку
	
	Если ТипЗнч(СтруктураШапкиДокумента) = Тип("Структура") Тогда
		Если СтруктураШапкиДокумента.Свойство("ВидДоговора") Тогда
			Возврат СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если ТипЗнч(СтруктураШапкиДокумента[ИмяРеквизита]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Возврат СтруктураШапкиДокумента[ИмяРеквизита].ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

//Возвращает Истина, если требуется установить счет учета товаров в рознице.
//Параметры:
//		ЗаполняемыйОбъект 	- структура или ДокументОбъект или строка таблицы значений или строка табличной части.
//		ДанныеРеквизита		- строка таблицы значений с данными макета СчетаУчетаВДокументах
//		РозничныйСклад 		- булево, принадлежность склада к розничным.
//			Если передана структура или строка табличной части, то значение параметра РозничныйСклад должно быть Неопределено.
Функция НуженРозничныйСчет(ЗаполняемыйОбъект, ДанныеРеквизита, РозничныйСклад)
	
	//Если РозничныйСклад = Неопределено, то считаем, что передали на заполнение структуру или строку таблицы значений
	
    //ИЗМЕНЕНО Верескул Игорь(Начало 21.04.2018
    //Если ЗаполняемыйОбъект[ДанныеРеквизита.Реквизит] <> ПланыСчетов.Хозрасчетный.ТоварыНаСкладе Тогда
    //	Возврат Ложь;
    //КонецЕсли;
    //Окончание)Верескул Игорь 
    
		
	//Для объекта/табличной части возьмем признак розницы из таблицы складов
	Если РозничныйСклад <> Неопределено Тогда
		Возврат РозничныйСклад;
	КонецЕсли;
	
	//Для определения розничного склада и подстановки счета учета розницы,
	//заполняемая таблица табличной части или структура шапки должна 
	//содержать колонку (свойство) с видом склада.
	
	//Колонка должна называться "ВидСклада" либо иметь вид "СкладВидСклада", где Склад - 
	//это имя реквизита "Склад" табличной части или имя реквизита "Склад" шапки 
	//(если имя реквизита табличной части не заполнено).
	
	ИмяКолонки 			= ?(ПустаяСтрока(ДанныеРеквизита.СкладТабличнойЧасти),ДанныеРеквизита.СкладШапки,ДанныеРеквизита.СкладТабличнойЧасти);
	
	Если ПустаяСтрока(ИмяКолонки) Тогда
		
		ИмяКолонки 	= "ВидСклада";
		
	Иначе
		
		ИмяКолонки = ИмяКолонки + "ВидСклада";
		
		Если ТипЗнч(ЗаполняемыйОбъект) = Тип("СтрокаТаблицыЗначений") Тогда
			
			Если ЗаполняемыйОбъект.Владелец().Колонки.Найти(ИмяКолонки)=Неопределено Тогда
				Если ЗаполняемыйОбъект.Владелец().Колонки.Найти("ВидСклада")=Неопределено Тогда
					Возврат Ложь; //нет подходящей колонки таблицы значений
				Иначе
					ИмяКолонки = "ВидСклада";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗаполняемыйОбъект) = Тип("Структура") Тогда
			
			Если НЕ ЗаполняемыйОбъект.Свойство(ИмяКолонки) Тогда
				Если НЕ ЗаполняемыйОбъект.Свойство("ВидСклада") Тогда
					Возврат Ложь; //нет подходящего свойства структуры
				Иначе
					ИмяКолонки = "ВидСклада";
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			//такие объекты здесь не обрабатываются. 
			//Для них розничный склад может быть определен только по строке таблицы складов (ДанныеСклада)
			Возврат Ложь; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ЗаполняемыйОбъект[ИмяКолонки]) = Тип("ПеречислениеСсылка.ВидыСкладов") И ЗначениеЗаполнено(ЗаполняемыйОбъект[ИмяКолонки]) Тогда
	
		Возврат ЗаполняемыйОбъект[ИмяКолонки] <> Перечисления.ВидыСкладов.Оптовый;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

//Возвращает Истина, если в документе вид поступления - ПоОрдеру.
//Параметры:
//		ДанныеРеквизита - строка таблицы значений с данными макета СчетаУчетаВДокументах
//		Объект 			- ДокументОбъект
Функция ПоступлениеПоОрдеру(ДанныеРеквизита, Объект)
	
	Возврат 
		//1 условие - в таблице реквизитов указано, что ордер для определения счетов может использоваться
		(ЗначениеЗаполнено(ДанныеРеквизита.ПриходныйОрдерТабличнойЧасти) ИЛИ ЗначениеЗаполнено(ДанныеРеквизита.ПриходныйОрдерШапки))
		И
		//2 условие - вид поступления должен быть "по ордеру"
		Объект.Метаданные().Реквизиты.Найти("ВидПоступления")<>Неопределено И Объект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
	
КонецФункции

//Возвращает номенклатурную группу, к которой принадлежит номенклатура в строке.
//Если передана строка таблицы значений, то она должна содержать колонку НоменклатурнаяГруппа.
//Параметры:
//		ИмяРеквизита - Строка, имя реквизита, хранящего Номенклатуру
//		ДанныеСтроки - строка таблицы значений или табличной части.
Функция ОпределитьНоменклатурнуюГруппу(ДанныеСтроки, ИмяРеквизита)
	
	//Для таблицы обращаемся к реквизиту с "НоменклатурнаяГруппа",
	//для табличной части - обращаемся через точку
	
	Если ТипЗнч(ДанныеСтроки)=Тип("СтрокаТаблицыЗначений") Тогда
		Возврат ДанныеСтроки.НоменклатурнаяГруппа;
	Иначе
		Возврат ДанныеСтроки[ИмяРеквизита].НоменклатурнаяГруппа;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// РАБОТА СО СЧЕТАМИ УЧЕТА В ФОРМАХ ДОКУМЕНТОВ
//
#Если Клиент Тогда
	
// Устанавливает видимость, автоотметку незаполненного, пропуск при вводе полей с данными счетов учета номенклатуры и затрат.
// Не управляет видимостью надписей к полям.
//
// Параметры:
//  ИмяДокумента						- имя документа
//  ЭлементыФормы						- передаются для работы со счетами шапки (когда есть счета шапки и надо управлять полями, соответствующими счетам шапки)
//  ТабличныеЧасти						- структура, ключи - имена табличных частей, значения - колонки соответствующих табличных полей;
//  ПоказыватьВДокументахСчетаУчета		- булево, пользовательская настройка видимости реквизитов. Если передано Неопределено - то видимость не меняется.
//  ОтражатьВБухгалтерскомУчете,
//  ОтражатьВНалоговомУчете,
//  ЕстьНДС							    - булево 
//  ЕстьНалогНаПрибыль					- булево 
Процедура УстановитьСвойстваПолейСчетов(Дата, ИмяДокумента, ЭлементыФормы, ТабличныеЧасти, ПоказыватьВДокументахСчетаУчета, ОтражатьВБухгалтерскомУчете, ЕстьНДС=Истина, ЕстьНалогНаПрибыль=Истина) Экспорт
	
	//Список налоговых счетов
	СчетаНУ = ПолучитьРеквизитыСчетовНалоговогоУчета();
	
	СчетаНДСИлиПрибыль = Новый Структура(
	"НалоговоеНазначение, 
	|НалоговоеНазначениеДоходовИЗатрат");  
	
	СчетаПрибыль = Новый Структура;

	СчетаНДС = Новый Структура("СчетУчетаНДС"); 
		
	ИспользоватьОпределениеСчетовПриПроведенииДокументов = ИспользоватьОпределениеСчетовПриПроведенииДокументов(Дата);
	
	//Шапка
	Если ЭлементыФормы<>Неопределено Тогда
		ТаблицаРеквизитов 	= ПолучитьРеквизитыСчетовУчета(ИмяДокумента, "");
		Для Каждого ДанныеСчета Из ТаблицаРеквизитов Цикл
		
			Счет = ДанныеСчета.Реквизит;
			
			//Получим поле ввода
			Поле = ЭлементыФормы.Найти(Счет);
			Если Поле = Неопределено ИЛИ ТипЗнч(Поле) <> Тип("ПолеВвода") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПоказыватьВДокументахСчетаУчета <> Неопределено Тогда
				//Видимость колонки (зависит от флажков отнесения к учетам)
				УсловиеВидимостиСчета = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
				Если СчетаНДСИлиПрибыль.Свойство(Счет) Тогда
					УсловиеВидимостиСчета = УсловиеВидимостиСчета И (ЕстьНДС ИЛИ ЕстьНалогНаПрибыль);
				ИначеЕсли СчетаНДС.Свойство(Счет) Тогда
					УсловиеВидимостиСчета = УсловиеВидимостиСчета И ЕстьНДС;
				ИначеЕсли СчетаПрибыль.Свойство(Счет) Тогда
					УсловиеВидимостиСчета = УсловиеВидимостиСчета И ЕстьНалогНаПрибыль;
				КонецЕсли; 
				
				Поле.Видимость = УсловиеВидимостиСчета;
			КонецЕсли;
			
			//Пропуск при вводе установим и автоотметку незаполненного уберем, если включен режим определения при проведении.
			Если Не ОтражатьВБухгалтерскомУчете ИЛИ ИспользоватьОпределениеСчетовПриПроведенииДокументов Тогда
				Поле.ПропускатьПриВводе 		= Истина;
				Поле.ОтметкаНезаполненного 		= Ложь;
				Поле.АвтоотметкаНезаполненного 	= Ложь;
				Поле.АвтоВыборНезаполненного    = Ложь;

			Иначе
				
				Если ВРЕГ(ДанныеСчета.УсловияЗаполнения)<>"ЛОЖЬ" Тогда
					Поле.АвтоВыборНезаполненного   = Истина;
					Поле.АвтоотметкаНезаполненного = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	//Табличные части
	Для Каждого ДанныеТабличнойЧасти Из ТабличныеЧасти Цикл
		
		ТаблицаРеквизитов 	= ПолучитьРеквизитыСчетовУчета(ИмяДокумента, ДанныеТабличнойЧасти.Ключ);
		Для Каждого ДанныеСчета Из ТаблицаРеквизитов Цикл
		
			Счет = ДанныеСчета.Реквизит;
			
			Если Счет = "ПринадлежностьНоменклатуры" Тогда
				Продолжить; // Свойствами колонки ПринадлежностьНоменклатуры управляет РаботаСДиалогами.УстановитьВидимостьПринадлежностиНоменклатуры()
			КонецЕсли;
			
			// Получим колонку табличного поля
			Колонка = ДанныеТабличнойЧасти.Значение.Найти(Счет);
			Если Колонка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПоказыватьВДокументахСчетаУчета <> Неопределено Тогда
				//Видимость колонки
				УсловиеВидимостиСчета = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
				Если СчетаНДСИлиПрибыль.Свойство(Счет) Тогда
					УсловиеВидимостиСчета = УсловиеВидимостиСчета И (ЕстьНДС ИЛИ ЕстьНалогНаПрибыль);
				ИначеЕсли СчетаНДС.Свойство(Счет) Тогда
					УсловиеВидимостиСчета = УсловиеВидимостиСчета И ЕстьНДС;
				ИначеЕсли СчетаПрибыль.Свойство(Счет) Тогда
					УсловиеВидимостиСчета = УсловиеВидимостиСчета И ЕстьНалогНаПрибыль;
					// СтатьяПриростаУбылиЗапасов для расширенной аналитики определяем по счету учета, на форме не выводим
					УсловиеДоступностиСчета = НЕ УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата);
					УсловиеВидимостиСчета = УсловиеВидимостиСчета И УсловиеДоступностиСчета;
					
					Колонка.Доступность = УсловиеДоступностиСчета;
				КонецЕсли; 
				ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонка, УсловиеВидимостиСчета);
				
			КонецЕсли; 		
			
			//Пропуск при вводе установим и автоотметку незаполненного уберем, если включен режим определения при проведении.
			Если Не ОтражатьВБухгалтерскомУчете ИЛИ ИспользоватьОпределениеСчетовПриПроведенииДокументов Тогда
				
				Колонка.ПропускатьПриВводе 								= Истина;
				Колонка.АвтоотметкаНезаполненного 						= Ложь;
				Если Колонка.ЭлементУправления <> Неопределено И ТипЗнч(Колонка.ЭлементУправления) <> Тип("Флажок") Тогда
				    Колонка.ЭлементУправления.ОтметкаНезаполненного 		= Ложь;
				    Колонка.ЭлементУправления.АвтоотметкаНезаполненного 	= Ложь; 		
				    Колонка.ЭлементУправления.АвтоВыборНезаполненного    	= Ложь;
				КонецЕсли; 				
								
			Иначе
				
				Если ВРЕГ(ДанныеСчета.УсловияЗаполнения)<>"ЛОЖЬ" Тогда
					Колонка.АвтоотметкаНезаполненного 						= Истина;
                    Если Колонка.ЭлементУправления <> Неопределено И ТипЗнч(Колонка.ЭлементУправления) <> Тип("Флажок") Тогда
						 Колонка.ЭлементУправления.АвтоотметкаНезаполненного 	= Истина;
						 Колонка.ЭлементУправления.АвтоВыборНезаполненного    	= Истина;
                    Конецесли;					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

// Определяет уместность интерактивного заполнения счетов, задает вопрос, заполняет счета.
// Параметры:
//  Объект       - ДокументОбъект
//	ЕстьСчетаВШапке	
//               - булево, определяет поддерживается ли работа со счетами шапки документа, не обслуживаемыми этим модулем (например, счета расчетов);
//                 Если передана Истина, то документ должен иметь метод ЗаполнитьСтруктуруСчетовУчетаШапки();
//                 Будет проверено, отличаются ли текущие счета в шапке со счетами по-умолчанию, 
//                 возвращаемыми методом ЗаполнитьСтруктуруСчетовУчетаШапки(), 
//				   и если отличается - выдан запрос пользователю на перезаполнение счетов.
//	СтруктураТабличныхЧастей	 
//               - структура или соответствие, ключи которого - имена обрабатываемых табличных частей.
//                 В соответствии допускается передавать в качестве ключа пустую строку, что обозначает шапку документа.
//                 В качестве значения элемента структуры указывается ЛОЖЬ для табличных частей, 
//                 заполнение счетов в которых методом ЗаполнитьСчетаУчетаВТабЧасти() не поддерживается
//                 (например, если табличная часть содержит счета учета расчетов).
//                 Если в структуре переданы значения, отличные от Ложь, то документ должен иметь метод ЗаполнитьСчетаУчетаВТабЧасти()
//	ЗаполнятьБУ,
//									
// Возвращаемое значение
//  Истина       - какое-либо перезаполнение производилось 
//                 или 
//                 должно было производиться, но не производилось (например, 
//                 заполнение табличной части "Объекты строительства", заполнение счетов в которой 
//                 не выполняется унифицированным механизмом).
//
Функция ИнтерактивноПерезаполнитьСчетаУчета(Объект, ЕстьСчетаВШапке, СтруктураТабличныхЧастей, ЗаполнятьБУ) Экспорт

	Если ЗаполнятьБУ <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнятьСчетаУчетаВДокументах = ЗаполнятьСчетаУчетаВДокументах(Объект.Дата);
	
	НадоЗаполнять 				= Ложь;
	ТабличныеЧастиДляЗаполнения = Новый Массив;
	ЕстьНеунифицированныеТЧ 	= Ложь;
	
	// Вопрос для заполненных табличных частей задаем всегда, если счета заполняются не при проведении документа.
	// В одном и том же документе могут быть счета учета заполняемые как в при заполнении, так и при проведении документа,
	// информация об этом - в значениях структуры табличных частей (ЛОЖЬ обозначает, что заполняются не при проведении).
	Для Каждого ДанныеТЧ Из СтруктураТабличныхЧастей Цикл
		
		Если ПустаяСтрока(ДанныеТЧ.Ключ) ИЛИ Объект[ДанныеТЧ.Ключ].Количество()>0 Тогда
			Если ДанныеТЧ.Значение = ЛОЖЬ Тогда
				ЕстьНеунифицированныеТЧ = Истина;
			ИначеЕсли ЗаполнятьСчетаУчетаВДокументах Тогда
				ТабличныеЧастиДляЗаполнения.Добавить(ДанныеТЧ.Ключ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	НадоЗаполнять = ЕстьНеунифицированныеТЧ ИЛИ ТабличныеЧастиДляЗаполнения.Количество()>0;
	
	НадоСпрашивать= НадоЗаполнять; // Будем спрашивать пользователя, (1) если решили, что будем заполнять табличные части или счета номенклатуры и затрат в шапке
	// (2) если есть чем заполнить остальные счета шапки (например - счета расчетов) (см. далее)
	
	Если ЕстьСчетаВШапке Тогда // Такие, как счета расчетов
		
		СтруктураСчетовШапки = Объект.ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина); // параметры ЗаполнитьСтруктуруСчетовУчетаШапки() должны быть булевого типа
		
		//Проверим, надо ли менять/заполнять счета в шапке
		Если НЕ НадоЗаполнять Тогда 
		
			// Проверим, есть ли в шапке значения, не соответствующие значениям по-умолчанию
			// Если они есть, то будем спрашивать пользователя.
			Для Каждого ДанныеСчета Из СтруктураСчетовШапки Цикл
				
				НадоЗаполнять = НадоЗаполнять ИЛИ Объект[ДанныеСчета.Ключ] <> ДанныеСчета.Значение;
				
				Если НадоЗаполнять И ЗначениеЗаполнено(Объект[ДанныеСчета.Ключ]) Тогда
					НадоСпрашивать = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ НадоЗаполнять Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Зададим вопрос
	Если НадоСпрашивать И НЕ РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ЗаполнятьБУ) Тогда 
		// ответили "НЕ надо перезаполнить счета"
		Возврат Ложь;
	КонецЕсли;
	
	// Заполним шапку
	Если ЕстьСчетаВШапке Тогда
		ЗаполнитьЗначенияСвойств(Объект, СтруктураСчетовШапки);
	КонецЕсли;
	
	// Заполним "унифицированные" табличные части
	Для Каждого ИмяТЧ Из ТабличныеЧастиДляЗаполнения Цикл
		
		Если ПустаяСтрока(ИмяТЧ) Тогда
			
			Объект.ЗаполнитьСчетаУчетаВШапке();
			
		Иначе
			
			Объект.ЗаполнитьСчетаУчетаВТабЧасти(Объект[ИмяТЧ], ИмяТЧ, ЗаполнятьБУ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Так как пользователь ответил, что надо перезаполнять счета, то вернем Истина
	Возврат Истина;
	
КонецФункции
#КонецЕсли

Функция ИмяРеквизитаЗаказ(Заказ, ЛеваяЧасть)
	
	Если Не Найти(Заказ, "/")Тогда
		Возврат Заказ;
	ИначеЕсли ЛеваяЧасть Тогда	
		Возврат	Лев(Заказ, Найти(Заказ, "/") - 1);
	Иначе
		Возврат	Прав(Заказ, СтрДлина(Заказ) - Найти(Заказ, "/"));
	КонецЕсли;  	
	
КонецФункции // ()
