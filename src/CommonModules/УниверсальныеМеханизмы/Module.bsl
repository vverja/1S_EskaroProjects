
Процедура ПометитьНаУдалениеДополнительнуюИнформациюОбъекта(ОбъектВладелец, Отказ, ШапкаОшибки) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", ОбъектВладелец);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХранилищеДополнительнойИнформации.Ссылка,
	|	ХранилищеДополнительнойИнформации.Объект
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И (НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ, ШапкаОшибки);
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВНЕШНИХ КОМПОНЕНТ
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Функция добавляет внешнюю компоненту в регистр сведений
//
Функция ДобавлениеВнешнейКомпоненты(ИсходныйФайл, ДвоичныеДанные = Неопределено, СообщатьОРезултате = Истина) Экспорт
	
	ФайлНаДиске = Новый Файл(ИсходныйФайл);
	
	Если ДвоичныеДанные = Неопределено Тогда
	
		Если НЕ ФайлНаДиске.Существует() Тогда
			Сообщить("- Исходный файл отсутствует на диске: " + ИсходныйФайл);
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			ДвоичныеДанные = Новый ДвоичныеДанные(ФайлНаДиске.ПолноеИмя);
				
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("- " + ОписаниеОшибки());
			Возврат  Ложь;
				
		КонецПопытки;
		
		ДатаИзмененияФайла = ФайлНаДиске.ПолучитьВремяИзменения();
		
	Иначе
		ДатаИзмененияФайла = ТекущаяДата();
		
	КонецЕсли;
		
	НаборЗаписей = РегистрыСведений.ВнешниеКомпоненты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяФайла.Установить(ФайлНаДиске.Имя);
	НаборЗаписей.Прочитать();
	
	Если Не НаборЗаписей.Количество() = 0 Тогда
		ПрошлаяДатаИзмененияФайла = НаборЗаписей[0].ДатаИзмененияФайла;
		НаборЗаписей.Очистить();
		
	Иначе
		ПрошлаяДатаИзмененияФайла = Неопределено;
		
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	Запись.ИмяФайла           = ФайлНаДиске.Имя;
	Запись.ДатаИзмененияФайла = ДатаИзмененияФайла;
	
	Запись.ХранилищеФайла     = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных());
		
	Попытка
		НаборЗаписей.Записать();
		Если ПрошлаяДатаИзмененияФайла = Неопределено Тогда 
			Сообщение = "Добавлена внешняя компонента: " + ФайлНаДиске.Имя + " (версия от " + ДатаИзмененияФайла + ")";
			
		Иначе
			Сообщение = "Изменена версия внешней компоненты: " + ФайлНаДиске.Имя + " (с версии от: " + ПрошлаяДатаИзмененияФайла + "  на версию от: " + ДатаИзмененияФайла + ")";
			
		КонецЕсли;
		Если СообщатьОРезултате Тогда
			Сообщить(Сообщение);
		КонецЕсли;
	
	Исключение
		Если СообщатьОРезултате Тогда
			ОбщегоНазначения.СообщитьОбОшибке("- " + ОписаниеОшибки());
		КонецЕсли;
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ДобавлениеВнешнейКомпоненты()

// Проверяет правильность заполнения Ф.И.О.
//
Функция ФИОНаписаноПоРусски(Знач СтрокаПараметр)
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);
	
	СписокДопустимыхЗначений = Новый Соответствие;
	СписокДопустимыхЗначений.Вставить(КодСимвола(" "), " ");
	СписокДопустимыхЗначений.Вставить(КодСимвола("-"), "-");
	СписокДопустимыхЗначений.Вставить(КодСимвола("ё"), "ё");
	СписокДопустимыхЗначений.Вставить(КодСимвола("Ё"), "Ё");
	
	КодА = КодСимвола("А");
	КодЯ = КодСимвола("я");
	
	Для Сч = 1 По СтрДлина(СтрокаПараметр) Цикл
		
		Код = КодСимвола(СтрокаПараметр, Сч);
		
		Если ((Код >= КодА) И (Код <= КодЯ)) ИЛИ (СписокДопустимыхЗначений.Получить(Код) <> Неопределено) Тогда
			Продолжить;
			
		Иначе
			Возврат 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // ФИОНаписаноВерно()




///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ДОПОЛНИТЕЛЬНЫХ ПЕЧАТНЫХ ФОРМ И ОБРАБОТОК
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

# Если Клиент Тогда
	
//Процедура открывает список выбора внешних обработок
Процедура ОткрытьСписокВнешнихОбработок() Экспорт
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
КонецПроцедуры // () 

//Процедура открывает список выбора внешних отчетов
Процедура ОткрытьСписокВнешнихОтчетов() Экспорт
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
КонецПроцедуры // ()

//Процедура открывает список выбора внешних печатных форм
Процедура ОткрытьСписокВнешнихПечатныхФорм() Экспорт
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
КонецПроцедуры // ОткрытьСписокВнешнихПечатныхФорм 

//Процедура открывает список выбора внешних обработок заполнения табличных частей
Процедура ОткрытьСписокВнешнихОбработокЗаполненияТабличныхЧастей() Экспорт
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
КонецПроцедуры // ОткрытьСписокВнешнихОбработокЗаполненияТабличныхЧастей 

Процедура ОткрытьСписокВнешнихОбработокПодключаемыхКОтчету() Экспорт
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.ВнешняяОбработкаПодключаемаяКОтчету;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();	
КонецПроцедуры // ОткрытьСписокВнешнихОбработокПодключаемыхКОтчету
 

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДОПОЛНИТЕЛЬНЫМИ КНОПКАМИ

// Функция инициализирует дерево дополнительных кнопок
//	Параметры:
//		Нет
// Возвращаемое значение:
//		Тип: ДереваЗначений.
Функция ИнициализироватьДеревоДополнительныхКнопок()
	
	ДеревоКнопок = Новый ДеревоЗначений;
	
	//Если ИмяКнопки = Неопределено, создается разделитель
	//Если Дерево имеет подчиненные, то 
	
	ДеревоКнопок.Колонки.Добавить("Имя");
	ДеревоКнопок.Колонки.Добавить("ТипКнопки");
	ДеревоКнопок.Колонки.Добавить("Текст");
	ДеревоКнопок.Колонки.Добавить("Подсказка");
	ДеревоКнопок.Колонки.Добавить("Картинка");
	ДеревоКнопок.Колонки.Добавить("Действие");
	ДеревоКнопок.Колонки.Добавить("Пометка");
	
	ДеревоКнопок.Колонки.Добавить("ИзменяетДанные");
	
	//Остальные свойства кнопки
	
	ДеревоКнопок.Колонки.Добавить("Расшифровка");
	
	Возврат ДеревоКнопок;
	
КонецФункции // ()

// Функция добавляет новую строку в дерево кнопок
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, в который необходимо добавить новое описание кнопки
//	< Имя > (обязательный)
//		Тип: Строка. Имя создаваемой кнопки;
//	< ТипКнопки > (по умолчанию «Действие»)
//		Тип: ТипКнопкиКоманднойПанели. Тип создаваемой кнопки (Кнопка, разделитель, подменю);
//	< Текст > (по умолчанию пустая строка)
//		Тип: Строка. Текст кнопки.
//	< Текст > (по умолчанию пустая строка)
//		Тип: Строка. Текст кнопки.
//	< Действие > (по умолчанию «Не Определено»)
//		Тип: Действие. Действие кнопки (процедура должна быть описана в форме объекта, на который навешивается подменю).
//	< Расшифровка > (по умолчанию не определено)
//		Тип: Произвольный.
//	< Пометка > (по умолчанию «Ложь»)
//		Тип: Булево.
//	< Подсказка > (по умолчанию пустая строка)
//		Тип: Строка. Подсказка создаваемой кнопки.
//	< Картинка > (по умолчанию «Не Определено»)
//		Тип: Картинка. Картинка создаваемой кнопки.
// Возвращаемое значение:
//		Тип: СтрокаДереваЗначений.
Функция ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, Имя, Знач ТипКнопки = Неопределено ,Текст = "", Действие = Неопределено, Расшифровка = Неопределено, Пометка = Ложь, Подсказка = "", Картинка = Неопределено, Позиция = Неопределено, ИзменяетДанные = Ложь)
	
	Если ТипКнопки = Неопределено Тогда
	
		ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		
	КонецЕсли;
	Если Позиция = Неопределено Тогда
		СтрокаКнопки         = СтрокаПодменю.Строки.Добавить();
	Иначе
		СтрокаКнопки         = СтрокаПодменю.Строки.Вставить(Позиция);
	КонецЕсли;
	
	СтрокаКнопки.Имя                = Имя;
	СтрокаКнопки.ТипКнопки          = ТипКнопки;
	СтрокаКнопки.Текст              = Текст;
	СтрокаКнопки.Действие           = Действие;
	СтрокаКнопки.Картинка           = Картинка;
	СтрокаКнопки.Подсказка          = Подсказка;
	СтрокаКнопки.Пометка            = Пометка;
	СтрокаКнопки.ИзменяетДанные     = ИзменяетДанные;
	
	СтрокаКнопки.Расшифровка = Расшифровка;
	
	Возврат СтрокаКнопки;
	
КонецФункции

// Процедура формирует подменю по дереву значений
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, по данным которого необходимо построить подменю.
//	< Подменю> (обязательный)
//		Тип: Элемент командной панели «Кнопка» типа «Подменю». На которой необходимо сформировать новое подменю.
//	< Очищать> (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли очищать переданное подменю.
//	< ДобавлятьРазделительВНачало > (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли добавить в начало подменю разделитель.
Процедура СформироватьПодменю(СтрокаПодменю, Подменю, Очищать = Ложь, ДобавлятьРазделительВНачало = Ложь) Экспорт
	
	Строки = СтрокаПодменю.Строки;
	Кнопки = Подменю.Кнопки;
	
	Если Очищать Тогда
		Кнопки.Очистить();
	
	КонецЕсли; 
	
	Если ДобавлятьРазделительВНачало и Строки.Количество() > 0 Тогда
		Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
	
	КонецЕсли; 
	
	Для каждого СтрокаКнопки Из Строки Цикл
		
		Кнопка = Кнопки.Добавить(СтрокаКнопки.Имя,СтрокаКнопки.ТипКнопки, СтрокаКнопки.Текст, СтрокаКнопки.Действие);
		
		Если СтрокаКнопки.Строки.Количество() > 0 Тогда
			
			СформироватьПодменю(СтрокаКнопки, Подменю, Ложь, Ложь)
			
		КонецЕсли; 
		
		Если Не СтрокаКнопки.Картинка = Неопределено Тогда
			
			Кнопка.Картинка  = СтрокаКнопки.Картинка;
		
		КонецЕсли; 
		
		Кнопка.Подсказка      = СтрокаКнопки.Подсказка;
		Кнопка.Пометка        = СтрокаКнопки.Пометка;
		Кнопка.ИзменяетДанные = СтрокаКнопки.ИзменяетДанные;
		
		//Остальные свойства кнопки
		
	КонецЦикла; 
	

КонецПроцедуры

// Процедура формирует подменю по дереву значений
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, по данным которого необходимо построить подменю.
//	< Подменю> (обязательный)
//		Тип: Элемент командной панели «Кнопка» типа «Подменю». На которой необходимо сформировать новое подменю.
//	< Очищать> (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли очищать переданное подменю.
//	< ДобавлятьРазделительВНачало > (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли добавить в начало подменю разделитель.
Процедура СформироватьИерархическоеПодменю(СтрокаПодменю, Подменю, Очищать = Ложь, ДобавлятьРазделительВНачало = Ложь) Экспорт
	
	Строки = СтрокаПодменю.Строки;
	Кнопки = Подменю.Кнопки;
	
	Если Очищать Тогда
		Кнопки.Очистить();
	
	КонецЕсли; 
	
	Если ДобавлятьРазделительВНачало и Строки.Количество() > 0 Тогда
		Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
	
	КонецЕсли; 
	
	Для Каждого СтрокаКнопки Из Строки Цикл
		
		Кнопка = Кнопки.Добавить(СтрокаКнопки.Имя,СтрокаКнопки.ТипКнопки, СтрокаКнопки.Текст, СтрокаКнопки.Действие);
		
		Если СтрокаКнопки.Строки.Количество() > 0 Тогда
			
			СформироватьИерархическоеПодменю(СтрокаКнопки, Подменю, Ложь, Ложь)
			
		КонецЕсли; 
		
		Если Не СтрокаКнопки.Картинка = Неопределено Тогда
			
			Кнопка.Картинка  = СтрокаКнопки.Картинка;
		
		КонецЕсли; 
		
		Кнопка.Подсказка      = СтрокаКнопки.Подсказка;
		Кнопка.Пояснение      = СтрокаКнопки.Подсказка;
		Кнопка.Пометка        = СтрокаКнопки.Пометка;
		Кнопка.ИзменяетДанные = СтрокаКнопки.ИзменяетДанные;
		
		//Остальные свойства кнопки
		
	КонецЦикла; 
	

КонецПроцедуры   //СформироватьИерархическоеПодменю


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ ВНЕШНИМИ ОБРАБОТКАМИ ПОДКЛЮЧАЕМЫЕ К ОТЧЕТАМ

// Функция возвращает результат выполнения внешней обработки подключаемой к отчету
//
// Описание:
//		Обмен данными с внешней обработкой осуществляется через реквизит «ДополнительныеПараметры» 
//		внешней обработки. Для работы обработки в качестве внешней, подключаемой к отчету, 
//		реквизит «ДополнительныеПараметры» должен иметь следующую структуру:
//			- Отчет - ОтчетОбъект, из которого осуществляется вызов внешней обработки
//			- ТекстСообщения -  строка, содержащая текст, который следует выводить в предопределенное место в табличном поле отчета после выполнения обработки. Каждая новая строка выводится в отдельной ячейке. Если ТекстСообщения пустой, то в табличное поле ничего не выводиться.
//			- Отказ - флаг, определяющий необходимость дальнейшего построения отчета
//
Функция ВыполнитьОбработкуПодключаемуюКОтчету(СтрокаКнопки, Отчет, ТабличныйДокумент) Экспорт
	Перем СсылкаНаВнешнююОбработку;
	
	// Получить ссылку на внешнюю обработку
	СсылкаНаВнешнююОбработку = СтрокаКнопки.Ссылка;
	
	Результат = Неопределено;
	
	Если ТипЗНЧ(СсылкаНаВнешнююОбработку) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		ОбъектВнешнейФормы = СсылкаНаВнешнююОбработку.ПолучитьОбъект();
		
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней обработки. Возможно обработка была удалена", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
		
		ИмяФайла = КаталогВременныхФайлов() + "PlugEpf.tmp";
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		
		Попытка
			
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			
		Исключение
			Сообщить("Ошибка исполнения внешней обработки подключаемой к отчету."+Символы.ПС+ОписаниеОшибки(), СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецПопытки;
		
		// Обмен данными с внешней обработкой осуществляется через реквизит «ДополнительныеПараметры» 
		// Реквизит "ДополнительныеПараметры" должен иметь следующую структуру:
		//	- Отчет - ОтчетОбъект, из которого осуществляется вызов внешней обработки
		//	- ТабличныйДокумент - ТабличныйДокумент, в который осуществляется вывод отчета
		//	- Отказ - флаг, определяющий необходимость дальнейшего построения отчета
		ДополнительныеПараметры = Новый Структура("Отчет, ТабличныйДокумент, Отказ", Отчет, ТабличныйДокумент, Ложь);
		
		Попытка
			
			Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
			Обработка.Инициализировать();
			Результат = Обработка.ДополнительныеПараметры;
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Обработка не выполнена!");
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ВыполнитьОбработкуПодключаемуюКОтчету

// Функция возвращает таблицу обработок, подключаемых к отчету
//
// Параметры:
//	ИмяМетаданныхОбъекта				- <Строка>, полное имя метаданных объекта
//
Функция ПолучитьСписокОбработокПодключаемыхКОтчету(ИмяМетаданныхОбъекта) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВнешниеОбработкиПринадлежность.ПредставлениеКнопки, """") <> """"
	|			ТОГДА ВнешниеОбработкиПринадлежность.ПредставлениеКнопки
	|		ИНАЧЕ ВнешниеОбработкиПринадлежность.Ссылка.Наименование
	|	КОНЕЦ КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.СпособЗапуска КАК СпособЗапуска,
	|	""ВнешняяОбработка"" + ВнешниеОбработкиПринадлежность.Ссылка.Код КАК Идентификатор
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.МетаданныеОбъекта = &МетаданныеОбъекта
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВнешниеОбработкиПринадлежность.НомерСтроки";

	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ВнешняяОбработкаПодключаемаяКОтчету);
	Запрос.УстановитьПараметр("МетаданныеОбъекта", ИмяМетаданныхОбъекта);
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("СпособЗапуска");
	
	Возврат Результат;
	
КонецФункции // ПолучитьСписокОбработокПодключаемыхКОтчету()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ЧАСТЕЙ ИЗ ВНЕШНИХ ОБРАБОТОК

// Процедура формирует дерево кнопок для подменю "Заполнить"
//
Функция ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка, Действие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка,
	|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВнешниеОбработкиПринадлежность.ПредставлениеКнопки, """") <> """" ТОГДА ВнешниеОбработкиПринадлежность.ПредставлениеКнопки
	|		ИНАЧЕ ВнешниеОбработкиПринадлежность.Ссылка.Наименование
	|	КОНЕЦ КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.ТабличнаяЧастьИмя КАК ТабличнаяЧастьИмя
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.МетаданныеОбъекта = &МетаданныеОбъекта
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьИмя
	|ИТОГИ ПО
	|	ТабличнаяЧастьИмя";
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();
	
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("МетаданныеОбъекта", "Документ." + МетаданныеОбъекта.Имя);
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("МетаданныеОбъекта", "Справочник." + МетаданныеОбъекта.Имя);
	ИначеЕсли Метаданные.Отчеты.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("МетаданныеОбъекта", "Отчет." + МетаданныеОбъекта.Имя);
	Иначе
		Возврат ДеревоКнопок;
	КонецЕсли;
	
	НомерКнопки = 0;
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		СтрокаПодменю = ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, Выборка.ТабличнаяЧастьИмя, , , , , , , , , Истина);
		ВыборкаДействий            = Выборка.Выбрать();
		
		Пока ВыборкаДействий.Следующий() Цикл
			
			НомерКнопки = НомерКнопки + 1;
			
			СтруктураРасшифровки = Новый Структура("СсылкаНаВнешнююОбработку, ДополнительныеПараметрыОбработки", ВыборкаДействий.Ссылка, ВыборкаДействий.ДополнительныеПараметрыОбработки.Получить());
			
			ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, "ЗаполнениеТЧ"+НомерКнопки, ТипКнопкиКоманднойПанели.Действие, ВыборкаДействий.Наименование, Действие , СтруктураРасшифровки, , , , , Истина);
			
		КонецЦикла;
	КонецЦикла;
	
	
	Возврат ДеревоКнопок;
	
КонецФункции // () 

// Процедура - обработчик нажатия любой из дополнительных кнопок заполнения табличных частей
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
Процедура ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(СтрокаКнопки,ЭтотОбъект) Экспорт
	
	Перем СсылкаНаВнешнююОбработку;
	Перем ДополнительныеПараметры;
	
	// Получить ссылку на внешнюю обработку
	СтрокаКнопки.Расшифровка.Свойство("СсылкаНаВнешнююОбработку", СсылкаНаВнешнююОбработку);
	
	// Получить дополнительные параметры внешней обработки
	СтрокаКнопки.Расшифровка.Свойство("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	
	Если ТипЗНЧ(СсылкаНаВнешнююОбработку) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = СсылкаНаВнешнююОбработку.ПолучитьОбъект();
		
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней обработки заполнения табличной части документа. Возможно обработка была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Попытка
			
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			
			// Передать внешней обработке дополнительные параметры
			Если ДополнительныеПараметры <> Неопределено Тогда
				
				// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
				Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
					Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			Сообщить("Ошибка исполнения внешней обработки табличной части документа."+Символы.ПС+ОписаниеОшибки(), СтатусСообщения.Важное);
			Возврат;
		КонецПопытки;
		
		Попытка
			Обработка.Инициализировать(ЭтотОбъект, СтрокаКнопки.Родитель.Имя, СтрокаКнопки.Родитель.Расшифровка);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Заполнение ТЧ не произведено!");
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует подменю "Заполнить" у ТЧ по дереву значений
//
Процедура СформироватьПодменюЗаполненияТЧПоДеревуКнопок(ДеревоКнопок,СоответствиеТЧ) Экспорт
	
	Для Каждого КлючИЗначение Из СоответствиеТЧ Цикл
		
		ИмяТабличнойЧасти = КлючИЗначение.Ключ.Данные;
		
		СтрокаПодменю = ДеревоКнопок.Строки.Найти(ИмяТабличнойЧасти, "Имя");
		
		Если СтрокаПодменю <> Неопределено Тогда
			
			// Табличное поле
			СтрокаПодменю.Расшифровка = КлючИЗначение.Ключ;
			
			ПодменюИлиКоманднаяПанель = КлючИЗначение.Значение;
			
			Если ТипЗНЧ(ПодменюИлиКоманднаяПанель) = Тип("КоманднаяПанель") Тогда
					
				ПодменюИлиКоманднаяПанель = ПодменюИлиКоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Подменю,"Заполнить");
					
			КонецЕсли;
			СформироватьИерархическоеПодменю(СтрокаПодменю, ПодменюИлиКоманднаяПанель,Ложь,Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьПодменюЗаполненияТЧПоДеревуКнопок()

// Процедура формирует подменю "Заполнить" для соответствия ТЧ
Функция СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Действие) Экспорт	
	
	КнопкиЗаполненияТЧ = ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Действие);
	СформироватьПодменюЗаполненияТЧПоДеревуКнопок(КнопкиЗаполненияТЧ,СоответствиеТЧ);
	
	Возврат КнопкиЗаполненияТЧ;
	
КонецФункции // СформироватьПодменюЗаполненияТЧ()

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ

// Процедура открывает общую форму выбора печатных форм. Выводит на печать документ.
//
// Параметры:
//  Объект - объект медаданных
//  ФормаВладелец - владелец ФормаВыбораПечатныхФорм
//
Процедура ОткрытьФормуВыбораПечатныхФормОбъекта(Объект, ФормаВладелец) Экспорт
	
	// Открыть форму выбора печатных форм
	Форма = ПолучитьОбщуюФорму("ФормаВыбораПечатныхФорм", ФормаВладелец, Объект);
	
	Если Форма.ОткрытьМодально() <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Печать макета объекта
	Для каждого СтрокаКнопки Из Форма.ЭлементыФормы.ДеревоМакетовПечати.ВыделенныеСтроки Цикл
	
		Расшифровка = СтрокаКнопки.Расшифровка;
		
		Если ТипЗнч(Расшифровка) = Тип("Структура") и Расшифровка.ВидПечатнойФормы = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма Тогда
			ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, Расшифровка);
			ЭтоДокумент = Метаданные.Документы.Содержит(Объект.Метаданные());
			НапечататьДокумент(ТабДокумент, 0, Форма.НаПринтер, ?(ЭтоДокумент, ОбщегоНазначения.СформироватьЗаголовокДокумента(Объект), Строка(Объект)), Объект.Ссылка);
		Иначе
			Объект.Печать(Расшифровка, 0, Форма.НаПринтер);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ОткрытьФормуВыбораПечатныхФормОбъекта()


// Функция заполняет начальные параметры построителю отчета, который
//  используется для настройки отбора в мезанизме подключения внешних печатных форм.
//
// Параметры
//  ИмяТаблицы     - Строка, имя таблицы БД к которой необходимо определить запрос
//  СинонимТаблицы - Строка, синоним таблицы БД к которой необходимо определить запрос
//
// Возвращаемое значение:
//   ПостроительОтчета
//
Функция ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицы, СинонимТаблицы) Экспорт

	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	" + ИмяТаблицы + " КАК Объект
	|ГДЕ
	|	Объект.Ссылка = &Ссылка
	|{ГДЕ
	|	Объект.Ссылка.*}
	|";
	
	ПолеОбъекта = ПостроительОтчета.ДоступныеПоля.Найти("Ссылка");
	ПолеОбъекта.Представление = ?(НЕ ЗначениеЗаполнено(СинонимТаблицы), ИмяТаблицы, СинонимТаблицы);
	
	Возврат ПостроительОтчета;

КонецФункции // ()

Функция ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоКнопок) Экспорт
	
	ИмяМакетаПоУмолчанию = ВосстановитьЗначение(ИмяМетаданных+ "МакетПечати");
	
	Если ИмяМакетаПоУмолчанию = Ложь или ДеревоКнопок.Строки.Количество() = 0 Тогда
		
		СтрокаПоУмолчанию = Неопределено;
		
	Иначе
		
		СтрокаПоУмолчанию = ДеревоКнопок.Строки.Найти(ИмяМакетаПоУмолчанию,"Текст");
		
		Если СтрокаПоУмолчанию = Неопределено Тогда
			
			СтрокаПоУмолчанию = ДеревоКнопок.Строки[0];
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПоУмолчанию;
	
КонецФункции // ()

// Функция формирует дерево макетов печати объекта метаданных.
//
// Параметры:
//  СсылкаОбъекта - Ссылка объекта метаданных
//  ВнутренниеПечатныеФормы - ТаблицаЗначений, Структура
//  Действие - Действие кнопки (процедура должна быть описана в форме объекта, на который навешивается подменю).
//  ДействиеУстановитьПечатьПоУмолчанию - Действие кнопки по умолчанию (процедура должна быть описана в форме объекта, на который навешивается подменю).
//  ДобавлятьВДеревоРазделительИПечатьПоУмолчанию - булево,
//  ПредставлениеПечатнойФормы - Строка, Наименование элемента справочника ВнешниеОбработки
//
// Возвращаемое значение
//  ДеревоКнопок - ДеревоЗначений
//
Функция ПолучитьДеревоМакетовПечати(СсылкаОбъекта, ВнутренниеПечатныеФормы, Действие = Неопределено, ДействиеУстановитьПечатьПоУмолчанию = Неопределено, ДобавлятьВДеревоРазделительИПечатьПоУмолчанию = Истина, ПредставлениеПечатнойФормы = Неопределено) Экспорт
	
	// Сформировать структуру дерева
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();
	
	// Добавить в дерево встроенные печатные формы
	ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие, ДобавлятьВДеревоРазделительИПечатьПоУмолчанию, ПредставлениеПечатнойФормы);
	
	// Добавить в дерево дополнительные печатные формы из Справочник.ДополнительныеПечатныеФормы
	ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоКнопок, СсылкаОбъекта, Действие, ВнутренниеПечатныеФормы, ДобавлятьВДеревоРазделительИПечатьПоУмолчанию, ПредставлениеПечатнойФормы);
	
	// Получить имя макета печати по умолчанию
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(СсылкаОбъекта.Метаданные().Имя ,ДеревоКнопок);
	
	// Для подменю Печать объекта: установить пометку кнопки печати по умолчанию
	Если НЕ СтрокаПоУмолчанию = Неопределено Тогда
		СтрокаПоУмолчанию.Пометка = Истина;
	КонецЕсли;
	
	// Добавит печать по умолчанию
	Если ДобавлятьВДеревоРазделительИПечатьПоУмолчанию И ДеревоКнопок.Строки.Количество() > 0 Тогда
		
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
		
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, "ПечатьПоУмолчанию", ТипКнопкиКоманднойПанели.Действие, "По умолчанию...", ДействиеУстановитьПечатьПоУмолчанию, "ПечатьПоУмолчанию");
		
	КонецЕсли;
	
	Возврат ДеревоКнопок;
	
КонецФункции // ПолучитьДеревоМакетовПечати()

// Процедура Устанавливает кнопку "Печать по умолчанию"
//
Процедура УстановитьПечатьПоУмолчанию(ПечатьПоУмолчанию, КоманднаяПанель, ДеревоМакетов, ИмяМетаданных, ДействиеПечатьПоУмолчанию) Экспорт

	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоМакетов);

	Если СтрокаПоУмолчанию = Неопределено Тогда
		Если ПечатьПоУмолчанию <> Неопределено Тогда
			КоманднаяПанель.Кнопки.Удалить(ПечатьПоУмолчанию);
			ПечатьПоУмолчанию = Неопределено;
		КонецЕсли;

	Иначе
		ИмяКнопки = "КнопкаПечатьПоУмолчанию";

		Если ПечатьПоУмолчанию = Неопределено Тогда
			Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
				КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Вставить(0,ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			Иначе
				КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Добавить(ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			КонецЕсли;

			Если ДеревоМакетов.Строки.Количество() > 1 Тогда
				ПечатьПоУмолчанию.Подсказка	= "Печать по умолчанию";
				ПечатьПоУмолчанию.Картинка	= Новый Картинка;
			Иначе
				ПечатьПоУмолчанию.Подсказка	= "Вывести на печать";
				ПечатьПоУмолчанию.Картинка	= БиблиотекаКартинок.Печать;
			КонецЕсли;
			
			ПечатьПоУмолчанию.Доступность	= Истина;
			ПечатьПоУмолчанию.Отображение	= ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		КонецЕсли;
		
		ПечатьПоУмолчанию.Текст				= СтрокаПоУмолчанию.Текст;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает Подменю "Печать" 
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
//    ДополнительныеКнопки : Структура дополнительных кнопок
Процедура УстановитьПодменюПечати(ПодменюПечати, КоманднаяПанель, ДеревоМакетов) Экспорт

	Если ДеревоМакетов.Строки.Количество() > 1 Тогда
		ИмяПодменю = "ПодменюПечати";

		Если ПодменюПечати = Неопределено Тогда
			Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
				КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
				ПодменюПечати = КоманднаяПанель.Кнопки.Вставить(0,ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
			Иначе
				КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
				ПодменюПечати = КоманднаяПанель.Кнопки.Добавить(ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
			КонецЕсли;

			ПодменюПечати.Подсказка = "Меню выбора печатных форм";
		КонецЕсли;
		
	Иначе
		Если ПодменюПечати <> Неопределено Тогда
			КоманднаяПанель.Кнопки.Удалить(ПодменюПечати);
			ПодменюПечати = Неопределено;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик нажатия любой из дополнительных кнопок печати
//
// Параметры:
//  Форма       : Форма, вызвавшая процедуру
//
Процедура ПечатьПоДополнительнойКнопке(УдалитьДеревоМакетов, Объект, Форма = Неопределено, ТекстКнопки) Экспорт
	
	Если Не Форма = Неопределено Тогда
		Если Не РаботаСДиалогами.ПроверитьМодифицированностьВФорме(Объект,Форма) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоДокумент = Метаданные.Документы.Содержит(Объект.Метаданные());
	
	
	Попытка
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетовПечати = ПолучитьДеревоМакетовПечати(Объект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаКнопки = ДеревоМакетовПечати.Строки.Найти(ТекстКнопки,"Текст");
	
	Если СтрокаКнопки = Неопределено Тогда
		
		Предупреждение("Печать не доступна. Изменился набор реквизитов!");
		Возврат;
		
	КонецЕсли;
	
	Расшифровка = СтрокаКнопки.Расшифровка;
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, Расшифровка);
		НапечататьДокумент(ТабДокумент, , , ?(ЭтоДокумент, ОбщегоНазначения.СформироватьЗаголовокДокумента(Объект), Строка(Объект)));
		
	Иначе
		
		Объект.Печать(СтрокаКнопки.Имя, 0);
		
	КонецЕсли;
	
КонецПроцедуры // ПечатьПоДополнительнойКнопке()

Процедура ПечатьПоДополнительнойКнопкеВСписке(УдалитьДеревоМакетов, Объект, Форма = Неопределено, ТекстКнопки) Экспорт
	Если Не Форма = Неопределено Тогда
		Если Не РаботаСДиалогами.ПроверитьМодифицированностьВФорме(Объект,Форма) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетовПечати = ПолучитьДеревоМакетовПечати(Объект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаКнопки = ДеревоМакетовПечати.Строки.Найти(ТекстКнопки,"Текст");
	
	Если СтрокаКнопки = Неопределено Тогда
		
		Предупреждение("Печать не доступна. Изменился набор реквизитов!");
		Возврат;
		
	КонецЕсли;
	
	НаПринтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПечатьДокументовБезПредварительногоПросмотра") = Истина;
	
	Расшифровка = СтрокаКнопки.Расшифровка;
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, Расшифровка);
		НапечататьДокумент(ТабДокумент, 0, НаПринтер, Строка(Объект), Объект.Ссылка);
	Иначе
		Объект.Печать(Расшифровка, 0, НаПринтер);
	КонецЕсли;

КонецПроцедуры


// Процедура назначает макет по умолчанию
//
Функция НазначитьКнопкуПечатиПоУмолчанию(ДеревоМакетов, ИмяМетаданных) Экспорт
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоМакетов);
	
	СписокМакетов = Новый СписокЗначений;
	
	Для Каждого Строка Из ДеревоМакетов.Строки Цикл
	
		Если Строка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие и Не Строка.Расшифровка = "ПечатьПоУмолчанию" Тогда
			
			СписокМакетов.Добавить(Строка.Текст,,СтрокаПоУмолчанию = Строка);
			
		КонецЕсли; 
		
	
	КонецЦикла; 
	
	ФормаВыбораПечатнойФормыПоУмолчанию = ПолучитьОбщуюФорму("ФормаВыбораПечатнойФормыПоУмолчанию");
	ФормаВыбораПечатнойФормыПоУмолчанию.СписокВыбораПечатнойФормы = СписокМакетов;
	
	МакетПоУмолчанию = ФормаВыбораПечатнойФормыПоУмолчанию.ОткрытьМодально();
	
	Если МакетПоУмолчанию = "" Тогда
		СохранитьЗначение(ИмяМетаданных + "МакетПечати", Неопределено);
		
	ИначеЕсли Не МакетПоУмолчанию = Неопределено Тогда
		СохранитьЗначение(ИмяМетаданных + "МакетПечати", МакетПоУмолчанию);
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

// Функция получает ТабличныйДокумент для печати из внешней печатной формы.
//
// Параметры
//  Ссылка         - Ссылка, для которой необходимо напечатать документ
//  ДвоичныеДанные - ДвоичныеДанные, внешняя обработка для печати
//
// Возвращаемое значение:
//   ТабличныйДокумент
//
Функция НапечататьВнешнююФорму(Ссылка, ИсточникМакета) Экспорт
	
	Перем ДополнительныеПараметры;
	
	ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.Принадлежность[ИсточникМакета.НомерСтроки - 1].ХранилищеВнешнейОбработки.Получить();
	
	// Получить дополнительные параметры внешней обработки
	ИсточникМакета.Свойство("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.ХранилищеВнешнейОбработки.Получить();
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	Попытка
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		
		// Передать внешней обработке дополнительные параметры
		Если ДополнительныеПараметры <> Неопределено Тогда
			
			// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
			Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
				Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент = Обработка.Печать();
		УдалитьФайлы(ИмяФайла);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось сформировать внешнюю печатную форму!");
	КонецПопытки;
	
	Возврат ТабДокумент;

КонецФункции

// Процедура дополняет таблицу печатных форма (ТаблицаМакетов) объекта
// из справочника "Дополнительные печатные формы"
//
// Параметры:
//  ДеревоМакетов - Дерево значений
//  СсылкаОбъекта - Ссылка объекта метаданных
//  Действие - Действие. Действие кнопки (процедура должна быть описана в форме объекта, на который навешивается подменю)
//  ВнутренниеПечатныеФормы - ТаблицаЗначений, Структура
//  ДобавлятьВДеревоРазделительИПечатьПоУмолчанию - булево
//  ПредставлениеПечатнойФормы - Строка, Наименование элемента справочника ВнешниеОбработки
//
Процедура ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоМакетов, СсылкаОбъекта, Действие, ВнутренниеПечатныеФормы, ДобавлятьВДеревоРазделительИПечатьПоУмолчанию = Истина, ПредставлениеПечатнойФормы = Неопределено)
	
	СтрокиДерева = ДеревоМакетов.Строки;
	Если ТипЗнч(СсылкаОбъекта) = Тип("ОбъектМетаданных") Тогда
		Возврат;
	КонецЕсли; 
	
	МетаданныеОбъекта = СсылкаОбъекта.Метаданные();
	
	Запрос = Новый Запрос;
	Если ПредставлениеПечатнойФормы = Неопределено Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
		|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
		|	ВнешниеОбработкиПринадлежность.Ссылка.Наименование КАК Наименование,
		|	ВнешниеОбработкиПринадлежность.НастройкиПостроителяДляОтбора КАК НастройкиПостроителяДляОтбора,
		|	ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма КАК ЗаменяемаяПечатнаяФорма,
		|	ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки КАК ВидОбработки,
		|	ВнешниеОбработкиПринадлежность.НомерСтроки
		|ИЗ
		|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
		|ГДЕ
		|	ВнешниеОбработкиПринадлежность.МетаданныеОбъекта = &МетаданныеОбъекта
		|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработкиПечатнаяФорма
		|	И (НЕ ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма ССЫЛКА Справочник.ВнешниеОбработки)
		|	И (НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВнешниеОбработкиПринадлежность.НомерСтроки
		|ИТОГИ ПО
		|	ЗаменяемаяПечатнаяФорма,
		|	Ссылка";
		
	Иначе
		Если СтрокиДерева.Количество() Тогда
			ВставкаВЗапрос = "ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма = &ЗаменяемаяПечатнаяФорма";
			Запрос.УстановитьПараметр("ЗаменяемаяПечатнаяФорма", СтрокиДерева[0].Имя);
		Иначе
			ВставкаВЗапрос = "ВнешниеОбработкиПринадлежность.Ссылка.Наименование = &ПредставлениеПечатнойФормы";
		КонецЕсли; 
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
		|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
		|	ВнешниеОбработкиПринадлежность.Ссылка.Наименование КАК Наименование,
		|	ВнешниеОбработкиПринадлежность.НастройкиПостроителяДляОтбора КАК НастройкиПостроителяДляОтбора,
		|	ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма КАК ЗаменяемаяПечатнаяФорма,
		|	ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки КАК ВидОбработки,
		|	ВнешниеОбработкиПринадлежность.НомерСтроки
		|ИЗ
		|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
		|ГДЕ
		|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
		|	И ВнешниеОбработкиПринадлежность.МетаданныеОбъекта = &МетаданныеОбъекта
		|	И (ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработкиПечатнаяФорма)
		|	И " + ВставкаВЗапрос + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВнешниеОбработкиПринадлежность.НомерСтроки
		|ИТОГИ ПО
		|	ЗаменяемаяПечатнаяФорма,
		|	Ссылка";
		
		Запрос.УстановитьПараметр("ПредставлениеПечатнойФормы", ПредставлениеПечатнойФормы);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидОбработкиПечатнаяФорма", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("МетаданныеОбъекта", "Документ." + МетаданныеОбъекта.Имя);
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("МетаданныеОбъекта", "Справочник." + МетаданныеОбъекта.Имя);
	ИначеЕсли Метаданные.Отчеты.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("МетаданныеОбъекта", "Отчет." + МетаданныеОбъекта.Имя);
	Иначе
		Возврат;
	КонецЕсли;
	
	БылРазделитель = Не СтрокиДерева.Количество() ;
	
	ВыборкаЗаменяемыхФорм = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаменяемыхФорм.Следующий() Цикл
		
		ЭтоЗаменяемаяФорма = ЗначениеЗаполнено(ВыборкаЗаменяемыхФорм.ЗаменяемаяПечатнаяФорма);
		НаименованиеПечатнойФормы = "";
		Если ЭтоЗаменяемаяФорма Тогда
			
			Если ТипЗНЧ(ВнутренниеПечатныеФормы) = Тип("ТаблицаЗначений") Тогда
				СтрокаВнутреннейПечатнойФормы = ВнутренниеПечатныеФормы.Найти(ВыборкаЗаменяемыхФорм.ЗаменяемаяПечатнаяФорма, "Имя");
				Если СтрокаВнутреннейПечатнойФормы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НаименованиеПечатнойФормы = СтрокаВнутреннейПечатнойФормы.Заголовок;
			//Это заглушка для совместимости со старыми документами.
			ИначеЕсли ТипЗНЧ(ВнутренниеПечатныеФормы) = Тип("Структура") Тогда
				Если Не ВнутренниеПечатныеФормы.Свойство(ВыборкаЗаменяемыхФорм.ЗаменяемаяПечатнаяФорма, НаименованиеПечатнойФормы) Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли; 
			
		КонецЕсли;
		ПодменятьВстроеннуюФорму = Истина;
		ВыборкаСсылок = ВыборкаЗаменяемыхФорм.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСсылок.Следующий() Цикл
			
			Если Не ЭтоЗаменяемаяФорма Тогда
				НаименованиеПечатнойФормы = ВыборкаСсылок.Наименование;
			КонецЕсли;
			
			Выборка = ВыборкаСсылок.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				// Проверим, удовлетворяет ли подключаемый отчет указанным в нем условиям
				НастройкиПостроителя = Выборка.НастройкиПостроителяДляОтбора.Получить();
				Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
					ПостроительОтчета = ИнициализироватьПостроительДопПечатныхФорм(МетаданныеОбъекта.ПолноеИмя(), МетаданныеОбъекта.Представление());
					ПостроительОтчета.Параметры.Вставить("Ссылка", СсылкаОбъекта);
					ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
					ПостроительОтчета.Выполнить();
					Если ПостроительОтчета.Результат.Пустой() Тогда
						Продолжить;
					КонецЕсли;
					Подсказка = ", Отбор: " + Строка(ПостроительОтчета.Отбор);
				Иначе
					Подсказка = "";
				КонецЕсли;
				
				СтруктураРасшифровки = Новый Структура("ВидПечатнойФормы, СсылкаНаВнешнююОбработку, ЗаменяемаяПечатнаяФорма, НомерСтроки, ДополнительныеПараметрыОбработки", Выборка.ВидОбработки,ВыборкаСсылок.Ссылка, Выборка.ЗаменяемаяПечатнаяФорма, Выборка.НомерСтроки, Выборка.ДополнительныеПараметрыОбработки.Получить());
				
				Если ЭтоЗаменяемаяФорма Тогда
					
					Подсказка = "Печатная форма заменена подключаемой" + Подсказка;
					
					Если ПодменятьВстроеннуюФорму Тогда
						СтрокаДерева = СтрокиДерева.Найти(Выборка.ЗаменяемаяПечатнаяФорма, "Имя");
						Если СтрокаДерева = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						ПодменятьВстроеннуюФорму = Ложь;
						СтрокаДерева.Расшифровка = СтруктураРасшифровки;
						СтрокаДерева.Подсказка = Подсказка;
						
						Если ПредставлениеПечатнойФормы = Неопределено Тогда
							Продолжить;
						Иначе
							Возврат;
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					
					Если ДобавлятьВДеревоРазделительИПечатьПоУмолчанию и Не БылРазделитель Тогда
						ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
						БылРазделитель = Истина;
					КонецЕсли;
					Подсказка = "Подключаемая печатная форма" + Подсказка;
					
				КонецЕсли;
				
				ПолноеНаименованиеПечатнойФормы = НаименованиеПечатнойФормы;
				СуществующаяСтрока = СтрокиДерева.Найти(ПолноеНаименованиеПечатнойФормы, "Текст");
				Счетчик = 1;
				Пока Не СуществующаяСтрока = Неопределено Цикл
					Счетчик = Счетчик + 1;
					ПолноеНаименованиеПечатнойФормы = НаименованиеПечатнойФормы + "(" + Счетчик + ")";
					ИндексСтрокиДереваЗаменяемойПечатнойФормы = ?(ЭтоЗаменяемаяФорма, СтрокиДерева.Индекс(СуществующаяСтрока) + 1,Неопределено);
					СуществующаяСтрока = СтрокиДерева.Найти(ПолноеНаименованиеПечатнойФормы, "Текст");
				КонецЦикла; 
				
				ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Действие, ПолноеНаименованиеПечатнойФормы, Действие, СтруктураРасшифровки, , Подсказка, , , );
				
				Если Не ПредставлениеПечатнойФормы = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьВДеревоМакетовДополнительныеФормы()

// Процедура добавляет в дерево кнопок макетов встроенные печатные формы.
//
// Параметры:
//  ДеревоМакетов - Дерево значений
//  ВнутренниеПечатныеФормы - ТаблицаЗначений, Структура
//  Действие - Действие. Действие кнопки (процедура должна быть описана в форме объекта, на который навешивается подменю)
//  ДобавлятьВДеревоРазделительИПечатьПоУмолчанию - булево
//  ПредставлениеПечатнойФормы - Строка, Наименование элемента справочника ВнешниеОбработки
//
Процедура ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие, ДобавлятьВДеревоРазделительИПечатьПоУмолчанию = Истина, ПредставлениеПечатнойФормы = Неопределено)
	
	Если ТипЗНЧ(ВнутренниеПечатныеФормы) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого Строка Из ВнутренниеПечатныеФормы Цикл
			Если ПустаяСтрока(Строка.Имя) Тогда
				
				Если ДобавлятьВДеревоРазделительИПечатьПоУмолчанию Тогда
					ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, , ТипКнопкиКоманднойПанели.Разделитель);
				КонецЕсли;
				
			ИначеЕсли ПредставлениеПечатнойФормы = Неопределено или ПредставлениеПечатнойФормы = Строка.Заголовок Тогда
				
				СтруктураРасшифровки = Новый Структура("ВидПечатнойФормы, ЗаменяемаяПечатнаяФорма, ИмяМакета, МакетОбщий", Неопределено, Строка.Имя, Строка.ИмяМакета, Строка.МакетОбщий);
				ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, Строка.Имя, ТипКнопкиКоманднойПанели.Действие, Строка.Заголовок, Действие, СтруктураРасшифровки,,"Встроенная печатная форма");
				
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗНЧ(ВнутренниеПечатныеФормы) = Тип("Структура") Тогда
		
		//Это заглушка для совместимости со старыми документами
		Для Каждого КлючИЗначение Из ВнутренниеПечатныеФормы Цикл
			
			Если КлючИЗначение.Значение = Неопределено Тогда
				
				Если ДобавлятьВДеревоРазделительИПечатьПоУмолчанию Тогда
					ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, , ТипКнопкиКоманднойПанели.Разделитель);
				КонецЕсли;
				
			ИначеЕсли ПредставлениеПечатнойФормы = Неопределено или ПредставлениеПечатнойФормы = КлючИЗначение.Значение Тогда
				
				ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, КлючИЗначение.Ключ, ТипКнопкиКоманднойПанели.Действие, КлючИЗначение.Значение, Действие, КлючИЗначение.Ключ,,"Встроенная печатная форма");
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВДеревоМакетовВстроенныеФормы()


Функция НапечататьДокументПоУмолчанию(Объект, КоличествоЭкземпляров = 0, НаПринтер = Ложь) Экспорт
	
	Если Метаданные.Документы.Содержит(Объект.Метаданные()) и Объект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить и Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Объект.Проведен) Тогда
		Сообщить("Недостаточно полномочий для печати непроведенного документа!"); 
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетов = ПолучитьДеревоМакетовПечати(Объект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(Объект.Метаданные().Имя, ДеревоМакетов);
	
	Если СтрокаПоУмолчанию = Неопределено Тогда
		
		Сообщить("Печать по умолчанию не определена!"); 
		Возврат Ложь;
		
	КонецЕсли;
	
	Расшифровка = СтрокаПоУмолчанию.Расшифровка;
	Если ТипЗнч(Расшифровка) = Тип("Структура") и Расшифровка.ВидПечатнойФормы = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма Тогда
		Если Не РаботаСДиалогами.ПроверитьМодифицированность(Объект) Тогда
			Возврат Ложь;
		КонецЕсли;
		ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, Расшифровка);
		ЭтоДокумент = Метаданные.Документы.Содержит(Объект.Метаданные());
		НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ?(ЭтоДокумент, ОбщегоНазначения.СформироватьЗаголовокДокумента(Объект.Ссылка), Строка(Объект)), Объект.Ссылка);
	Иначе
		Объект.Печать(Расшифровка, КоличествоЭкземпляров, НаПринтер);
	КонецЕсли;
	Возврат Истина;
	
КонецФункции 

// Печатает документ полученный по нажатию кнопки в форме списка
//
// Параметры
//  Документ - документ,который нужно отпечатать
//
Процедура НапечататьДокументИзФормыСписка(Объект) Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаПринтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПечатьДокументовБезПредварительногоПросмотра") = Истина;
	Если Не НапечататьДокументПоУмолчанию(Объект, 0, НаПринтер) Тогда
		Предупреждение("Операция не выполнена");
	КонецЕсли; 
	
КонецПроцедуры // НапечататьДокументИзФормыСписка()

// Функция выводит на печать табличный документ.
// Открывает форму Печати документов, хаполняет печатный документ формы.
//
// Параметры:
//  ПечДокумент - ТабличныйДокумент
//  КоличествоЭкземпляров - число
//  НаПринтер - булево
//  Заголовок - строка, заголовок формы печати
//  Ссылка - Ссылка объекта печати
//
Функция НапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Заголовок = "", Ссылка = Неопределено) Экспорт

	Если ПечДокумент = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;

	// Получить необходимое количество копий
	Если КоличествоЭкземпляров > 0 Тогда
		ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
	КонецЕсли;

	Если НЕ ПечДокумент.АвтоМасштаб
	   И НЕ ЗначениеЗаполнено(ПечДокумент.ИмяПринтера) Тогда
		ПечДокумент.АвтоМасштаб = Истина;
	КонецЕсли;

	Если ТипЗнч(НаПринтер) = Тип("Булево") Тогда
		Если НаПринтер Тогда
			ПечДокумент.Вывод = ИспользованиеВывода.Разрешить;
			ПечДокумент.Напечатать();
		Иначе
			ФормаПечати = ПолучитьОбщуюФорму("ПечатьДокументов",, Новый УникальныйИдентификатор);
			ФормаПечати.ОбъектПечати     = Ссылка;
			ФормаПечати.ПечатныйДокумент = ПечДокумент;
			ФормаПечати.Заголовок        = Заголовок;
			ФормаПечати.Защита           = УправлениеДопПравамиПользователей.ЗащитаТаблиц();
			ФормаПечати.Открыть();
			Возврат ФормаПечати;
		КонецЕсли;
	ИначеЕсли ТипЗнч(НаПринтер) = Тип("Массив") Тогда
		ПечДокумент.Вывод = ИспользованиеВывода.Разрешить;
		ПечДокумент.Напечатать();

		НаПринтер.Добавить(ПечДокумент);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // НапечататьДокумент()

// Функция проверят наличие печатных форм у документа (внутренних и внешних).
//
// Параметры:
//  Объект - ДокументОбъект
//
// Возвращаемое значение:
//  Булево - Истина в случае если у документа есть печатные формы.
//
Функция ЕстьПечатныеФормы(Объект) Экспорт
	
	ВстроенныйПечатныеФормы = Неопределено;
	
	Попытка
		ВстроенныйПечатныеФормы = Объект.ПолучитьСтруктуруПечатныхФорм();
	Исключение
	КонецПопытки;
	
	Если ТипЗнч(ВстроенныйПечатныеФормы) = Тип("Структура") И ВстроенныйПечатныеФормы.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	ВнешниеПечатныеФормы = 0;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |КОЛИЧЕСТВО(ВнешниеОбработкиПринадлежность.Ссылка) КАК ВнешниеПечатныеФормы
	               |ИЗ
	               |Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	               |ГДЕ
	               |	ВнешниеОбработкиПринадлежность.МетаданныеОбъекта= &МетаданныеОбъекта
	               |	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработкиПечатнаяФорма
	               |	И (НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("ВидОбработкиПечатнаяФорма", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("МетаданныеОбъекта",  "Документ." + МетаданныеОбъекта.Имя);
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("МетаданныеОбъекта", "Справочник." + МетаданныеОбъекта.Имя);
	ИначеЕсли Метаданные.Отчеты.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("МетаданныеОбъекта", "Отчет." + МетаданныеОбъекта.Имя);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	ВнешниеПечатныеФормы =  Выборка.ВнешниеПечатныеФормы;
	
	
	Если (ВстроенныйПечатныеФормы = Неопределено ИЛИ ВстроенныйПечатныеФормы.Количество() = 0)
		И ВнешниеПечатныеФормы = 0 Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции // ЕстьПечатныеФормы()

# КонецЕсли



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С НАСТРОЙКАМИ

#Если Клиент Тогда

Функция ВосстановлениеНастроек(СтруктураНастройки) Экспорт
	
	ФормаУправленияНастройками = РегистрыСведений.СохраненныеНастройки.ПолучитьФорму("ФормаУправленияНастройками");
	ФормаУправленияНастройками.мВосстановлениеНастройки = Истина;
	ФормаУправленияНастройками.мСтруктураНастройки = СтруктураНастройки;
	
	Результат = ФормаУправленияНастройками.ОткрытьМодально();
	СтруктураНастройки = ФормаУправленияНастройками.мСтруктураНастройки;
	Возврат Результат;
	
КонецФункции // ВосстановитьНастройки()

Функция СохранениеНастроек(СтруктураНастройки) Экспорт
	
	ФормаУправленияНастройками = РегистрыСведений.СохраненныеНастройки.ПолучитьФорму("ФормаУправленияНастройками");
	ФормаУправленияНастройками.мВосстановлениеНастройки = Ложь;
	ФормаУправленияНастройками.мСтруктураНастройки = СтруктураНастройки;
	
	Результат = ФормаУправленияНастройками.ОткрытьМодально();
	СтруктураНастройки = ФормаУправленияНастройками.мСтруктураНастройки;
	Возврат Результат;
	
КонецФункции // СохранитьНастройки()

#КонецЕсли

Функция ПолучитьНастройку(СтруктураНастройки) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь = &Пользователь
	|	И СохраненныеНастройки.НаименованиеНастройки = &НаименованиеНастройки");
	
	Если СтруктураНастройки.Свойство("Пользователь") Тогда
					
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
					
	Иначе
					
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
					
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
	Запрос.УстановитьПараметр("НаименованиеНастройки", СтруктураНастройки.НаименованиеНастройки);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
			
		Возврат Ложь;
			
	Иначе
			
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		СтруктураНастройки.Вставить("СохраненнаяНастройка", ВыборкаИзРезультатаЗапроса.СохраненнаяНастройка.Получить());
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", ВыборкаИзРезультатаЗапроса.ИспользоватьПриОткрытии);
		СтруктураНастройки.Вставить("СохранятьАвтоматически", ВыборкаИзРезультатаЗапроса.СохранятьАвтоматически);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПолучитьНастройку()

Функция ПолучитьНастройки(СтруктураНастройки, ПолучитьНастройкиВсехПользователей = Ложь, ПолучитьГрупповыеНастройки = Ложь, ПолучитьОбщиеНастройки = Ложь) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически,
	|	0 КАК ВидНастройки
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь = &Пользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически,
	|	1
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь <> &Пользователь
	|	И СохраненныеНастройки.Пользователь ССЫЛКА Справочник.Пользователи
	|	И &НастройкиВсехПользователей = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически,
	|	2
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И ВЫРАЗИТЬ(СохраненныеНастройки.Пользователь КАК Справочник.ГруппыПользователей).ПользователиГруппы.Пользователь = &Пользователь
	|	И &ГрупповыеНастройки = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически,
	|	3
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь = НЕОПРЕДЕЛЕНО
	|	И &ОбщиеНастройки = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидНастройки,
	|	НаименованиеНастройки");
	
	Если СтруктураНастройки.Свойство("Пользователь") И ЗначениеЗаполнено(СтруктураНастройки.Пользователь) Тогда
					
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
					
	Иначе
					
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
					
	КонецЕсли;
			
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
	Запрос.УстановитьПараметр("НастройкиВсехПользователей", ПолучитьНастройкиВсехПользователей);
	Запрос.УстановитьПараметр("ГрупповыеНастройки", ПолучитьГрупповыеНастройки);
	Запрос.УстановитьПараметр("ОбщиеНастройки", ПолучитьОбщиеНастройки);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьНастройки()
	
Функция ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.НаименованиеНастройки КАК НаименованиеНастройки,
	|	ВложенныйЗапрос.СохраненнаяНастройка КАК СохраненнаяНастройка,
	|	ВложенныйЗапрос.СохранятьАвтоматически КАК СохранятьАвтоматически
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
	|		СохраненныеНастройки.СохраненнаяНастройка КАК СохраненнаяНастройка,
	|		СохраненныеНастройки.СохранятьАвтоматически КАК СохранятьАвтоматически,
	|		0 КАК ВидНастройки
	|	ИЗ
	|		РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|	ГДЕ
	|		СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|		И СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
	|		И СохраненныеНастройки.Пользователь = &Пользователь
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		СохраненныеНастройки.НаименованиеНастройки,
	|		СохраненныеНастройки.СохраненнаяНастройка,
	|		СохраненныеНастройки.СохранятьАвтоматически,
	|		1
	|	ИЗ
	|		РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|	ГДЕ
	|		СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|		И СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
	|		И ВЫРАЗИТЬ(СохраненныеНастройки.Пользователь КАК Справочник.ГруппыПользователей).ПользователиГруппы.Пользователь = &Пользователь
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		СохраненныеНастройки.НаименованиеНастройки,
	|		СохраненныеНастройки.СохраненнаяНастройка,
	|		СохраненныеНастройки.СохранятьАвтоматически,
	|		2
	|	ИЗ
	|		РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|	ГДЕ
	|		СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|		И СохраненныеНастройки.Пользователь = НЕОПРЕДЕЛЕНО
	|		И СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ВидНастройки");
	
	Если СтруктураНастройки.Свойство("Пользователь") И ЗначениеЗаполнено(СтруктураНастройки.Пользователь) Тогда
					
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
					
	Иначе
					
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
					
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
		
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
			
		Возврат Ложь;
			
	Иначе
			
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		СтруктураНастройки.Вставить("НаименованиеНастройки", ВыборкаИзРезультатаЗапроса.НаименованиеНастройки);
		СтруктураНастройки.Вставить("СохраненнаяНастройка", ВыборкаИзРезультатаЗапроса.СохраненнаяНастройка.Получить());
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Истина);
		СтруктураНастройки.Вставить("СохранятьАвтоматически", ВыборкаИзРезультатаЗапроса.СохранятьАвтоматически);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПолучитьНастройкуИспользоватьПриОткрытии()

Функция СохранитьНастройку(СтруктураНастройки, СтруктураЗаменяемойНастройки = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураНастройки.Свойство("ИспользоватьПриОткрытии") И СтруктураНастройки.ИспользоватьПриОткрытии = Истина Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки
		|ИЗ
		|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
		|	И СохраненныеНастройки.Пользователь = &Пользователь
		|	И СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|	И СохраненныеНастройки.НаименованиеНастройки <> &НаименованиеНастройки");
		
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
		Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
		Запрос.УстановитьПараметр("НаименованиеНастройки", СтруктураНастройки.НаименованиеНастройки);
		
		РезультаЗапроса = Запрос.Выполнить();
		
		Если РезультаЗапроса.Пустой() = Ложь Тогда
			
			МенеджерЗаписи = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
			
			Выборка = РезультаЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				МенеджерЗаписи.Пользователь = Выборка.Пользователь;
				МенеджерЗаписи.ИмяОбъекта = Выборка.ИмяОбъекта;
				МенеджерЗаписи.НаименованиеНастройки = Выборка.НаименованиеНастройки;
				
				МенеджерЗаписи.Прочитать();
				
				Если МенеджерЗаписи.Выбран() Тогда
					
					МенеджерЗаписи.ИспользоватьПриОткрытии = Ложь;
					МенеджерЗаписи.Записать();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	МенеджерЗаписи = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
		
	Если СтруктураЗаменяемойНастройки <> Неопределено Тогда
		
		МенеджерЗаписи.Пользователь = СтруктураЗаменяемойНастройки.Пользователь;
		МенеджерЗаписи.ИмяОбъекта = СтруктураЗаменяемойНастройки.ИмяОбъекта;
		МенеджерЗаписи.НаименованиеНастройки = СтруктураЗаменяемойНастройки.НаименованиеНастройки;
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписи.НаименованиеНастройки = СтруктураНастройки.НаименованиеНастройки;
			
			Если СтруктураНастройки.Свойство("СохраненнаяНастройка") Тогда
				
				МенеджерЗаписи.СохраненнаяНастройка = Новый ХранилищеЗначения(СтруктураНастройки.СохраненнаяНастройка, Новый СжатиеДанных(9));
				
			КонецЕсли;
			
			Если СтруктураНастройки.Свойство("ИспользоватьПриОткрытии") Тогда
						
				МенеджерЗаписи.ИспользоватьПриОткрытии = СтруктураНастройки.ИспользоватьПриОткрытии;
						
			КонецЕсли;
					
			Если СтруктураНастройки.Свойство("СохранятьАвтоматически") Тогда
						
				МенеджерЗаписи.СохранятьАвтоматически = СтруктураНастройки.СохранятьАвтоматически;
						
			КонецЕсли;
				
		Иначе
				
			Возврат Ложь;
				
		КонецЕсли;
		
	Иначе
		
		МенеджерЗаписи.Пользователь = СтруктураНастройки.Пользователь;
		МенеджерЗаписи.ИмяОбъекта = СтруктураНастройки.ИмяОбъекта;
		МенеджерЗаписи.НаименованиеНастройки = СтруктураНастройки.НаименованиеНастройки;
		МенеджерЗаписи.СохраненнаяНастройка = Новый ХранилищеЗначения(СтруктураНастройки.СохраненнаяНастройка, Новый СжатиеДанных(9));
		
		Если СтруктураНастройки.Свойство("ИспользоватьПриОткрытии") Тогда
					
			МенеджерЗаписи.ИспользоватьПриОткрытии = СтруктураНастройки.ИспользоватьПриОткрытии;
					
		КонецЕсли;
				
		Если СтруктураНастройки.Свойство("СохранятьАвтоматически") Тогда
					
			МенеджерЗаписи.СохранятьАвтоматически = СтруктураНастройки.СохранятьАвтоматически;
					
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
		
	Возврат Истина;
	
КонецФункции // СохранитьНастройку()

Функция УдалитьНастройку(СтруктураНастройки) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
		
	МенеджерЗаписи.Пользователь = СтруктураНастройки.Пользователь;
	МенеджерЗаписи.ИмяОбъекта = СтруктураНастройки.ИмяОбъекта;
	МенеджерЗаписи.НаименованиеНастройки = СтруктураНастройки.НаименованиеНастройки;
	
	МенеджерЗаписи.Прочитать();
		
	Если МенеджерЗаписи.Выбран() Тогда
			
		МенеджерЗаписи.Удалить();
			
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // УдалитьНастройку()

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА РАБОТЫ С УНИВЕРСАЛЬНЫМ ПОИСКОМ ДАННЫХ
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


// Процедура снимает отборы у списка номенклатуры, которые были установлены из ЭУ "быстрых" отборов на форме.
// 
Процедура СнятьБыстрыеОтборыДанных(ОбъектДанных, СписокОтборов)

	Если ТипЗнч(СписокОтборов) = Тип("СписокЗначений") тогда
		
		Для Каждого ЭлементСписка Из СписокОтборов Цикл
			
			Попытка
				ОбъектДанных.Отбор[ЭлементСписка.Значение].Использование = Ложь;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		// принудительно убираем ограничение по ссылке
		ОбъектДанных.Отбор["Ссылка"].Использование = Ложь;
	
	Иначе
		
		Попытка
			ОбъектДанных.Отбор[СписокОтборов].Использование = Ложь;
		Исключение
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает отборы у списка номенклатуры, которые были установлены из ЭУ "быстрых" отборов на форме.
// 
Процедура УстановитьБыстрыйОтборДанных(ОбъектДанных, Знач ЗначениеОтбора = "", Знач ИмяОтбораДанных = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяОтбораДанных) тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбъектДанных.Отбор[ИмяОтбораДанных].Использование = ЗначениеЗаполнено(ЗначениеОтбора);
	Исключение
		// может быть передано поле которого нет в отборах
		Возврат;
	КонецПопытки;
	
	Если ОбъектДанных.Отбор[ИмяОтбораДанных].Использование Тогда
		
		ОбъектДанных.Отбор[ИмяОтбораДанных].ВидСравнения  = ВидСравнения.Содержит;
		ОбъектДанных.Отбор[ИмяОтбораДанных].Значение = ЗначениеОтбора;
		
	КонецЕсли;

КонецПроцедуры

// процедура снимает все отборы посика по полям
Процедура ОчиститьОтборыПоискаПоПолям(Список, СписокБыстрыхОтборовПоРеквизитам, СписокПолейПоиска) Экспорт
	
	СнятьБыстрыеОтборыДанных(Список, СписокБыстрыхОтборовПоРеквизитам);
	СписокПолейПоиска = Неопределено;
	Список.Обновить();
	
КонецПроцедуры

//функция возвращает настройку поиска по имени
Функция ПолучитьПараметрыНастройкиПоискаПоИмени(Знач СоответствиеИмяКнопокИОтборов, Знач ТипОбъектовПоиска, Знач ИмяНастройки,
	Знач ПользовательНастройкиОбмена, Знач НастройкаОтбораДанных) Экспорт
	
	ИмяОбъектаНастройки = ПолучитьИмяОбъектаНастройки(ТипОбъектовПоиска);
				
	Если ПустаяСтрока(ИмяОбъектаНастройки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// нужно получить настройку поиска по имени
	ЗначениеСоответсвия = СоответствиеИмяКнопокИОтборов.Получить(ИмяНастройки);
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("ИмяОбъекта", ИмяОбъектаНастройки);

	
	Если ЗначениеСоответсвия = Неопределено тогда
		
		// в соответствии не нашли нужных параметров
		СтруктураНастройки.Вставить("Пользователь", ПользовательНастройкиОбмена);
		СтруктураНастройки.Вставить("НаименованиеНастройки", НастройкаОтбораДанных);
	Иначе	
				
		СтруктураНастройки.Вставить("Пользователь", ЗначениеСоответсвия.Пользователь);
		СтруктураНастройки.Вставить("НаименованиеНастройки", ЗначениеСоответсвия.ИмяНастройки);
	
	КонецЕсли;
            			
	НастройкаНайдена = ПолучитьНастройку(СтруктураНастройки);
					
	Если НЕ НастройкаНайдена Тогда
		
		СтруктураНастройки = Неопределено;
		
	КонецЕсли;
	
	Возврат СтруктураНастройки;
	
КонецФункции

#Если Клиент Тогда

Функция ВыполнитьИнтерактивныйПоискОбъектовВСписке(ТипОбъектовПоиска, СписокПоиска, ТабличноеПолеПоиска,
	Знач НеИспользуемыеПараметрыОтбора = Неопределено, Знач НастройкаПоиска = Неопределено, 
	РезультирующееДеревоПоиска = Неопределено, СтрокаПоискаДанных = "",
	Знач ФормаВладелец = Неопределено) Экспорт
	
	Если СписокПоиска = Неопределено 
		ИЛИ ТабличноеПолеПоиска = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// отборов в списке может и не быть
	ДанныеНеИспользуемыеПараметрыОтбора = Неопределено;
	Если НеИспользуемыеПараметрыОтбора <> Неопределено Тогда
		ДанныеНеИспользуемыеПараметрыОтбора = НеИспользуемыеПараметрыОтбора.Скопировать();		
	КонецЕсли;
	
	ДополнительныйОтбор = СписокПоиска.Отбор;
		
	ОбработкаУниверсальногоПоиска = Обработки.УниверсальныйПоискОбъектов.Создать();
	ОбработкаУниверсальногоПоиска.НастройкаПоискаДанных = НастройкаПоиска;
	
	СписокНайденныхОбъектов = ОбработкаУниверсальногоПоиска.ВыполнитьИнтерактивныйПоискОбъектов(ТипОбъектовПоиска, Ложь, ДополнительныйОтбор,
		ДанныеНеИспользуемыеПараметрыОтбора, РезультирующееДеревоПоиска, СтрокаПоискаДанных, ФормаВладелец);
	
	Если СписокНайденныхОбъектов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// нужно для всех неиспользуемых отборов убрать признак использования
	Если ДанныеНеИспользуемыеПараметрыОтбора <> Неопределено Тогда
		
		Для Каждого СтрокаДанныхОтбора Из ДанныеНеИспользуемыеПараметрыОтбора Цикл 
			
			Попытка
				СписокПоиска.Отбор[СтрокаДанныхОтбора.Значение].Использование = Ложь;
			Исключение
				
			КонецПопытки;
			
		КонецЦикла;
			
	КонецЕсли;
		
	СписокПоиска.Отбор.Ссылка.Использование = Истина;
	СписокПоиска.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	СписокПоиска.Отбор.Ссылка.Значение = СписокНайденныхОбъектов;
	
	ТабличноеПолеПоиска.НастройкаОтбора.Ссылка.Доступность = Истина;
	
	Если ТабличноеПолеПоиска.ИерархическийПросмотр Тогда
		ОтветНаВопрос = Вопрос("Для удобства поиска рекомендуется снять режим иерархического просмотра. Снять?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			ТабличноеПолеПоиска.ИерархическийПросмотр = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецЕсли

//Функция возвращает нименованеи объекта настройки
Функция ПолучитьИмяОбъектаНастройки(ТипОбъектовПоиска) Экспорт
	
	Если ТипОбъектовПоиска = Неопределено Тогда
		Возврат "";
	КонецЕсли;
		
	МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипОбъектовПоиска);	
	
	Возврат "ОбработкаОбъект.УниверсальныйПоискОбъектов.СправочникСсылка." + МетаданныеСправочника.Имя;
	
КонецФункции

//процедура скрывает колонки в табличном документе
//поиск колонок происходит в указанной области по указанному тексту заголовка колонки
Процедура СкрытьКолонкиВТабличномДокументе(ТабДокумент, ТекстКолонки, ШиринаКолонки=1, ИмяОбластиШапки="") Экспорт
	Попытка
		Если ИмяОбластиШапки="" Тогда
			ОбластьШапкиМест = ТабДокумент.НайтиТекст(ТекстКолонки,,,истина);
		Иначе	
			ОбластьШапкиМест = ТабДокумент.НайтиТекст(ТекстКолонки,,ТабДокумент.Области[ИмяОбластиШапки],истина);
		КонецЕсли;
		
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ОбластьШапкиМест <> неопределено Тогда
		ОбластьМест = ТабДокумент.Область(,ОбластьШапкиМест.Лево,,ОбластьШапкиМест.Лево + ШиринаКолонки-1);
		ОбластьМест.Видимость = ложь;
	КонецЕсли;

КонецПроцедуры



// Функция склоняет переданую фразу
// Параметры:
//  Фраза (обязательный), тип строка
//   Параметр должен содержать фразу. Каждое слово фразы будет просклонено отдельно
//
//  Падеж (обязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
Функция Просклонять(Компонента, Знач Фраза = "", Падеж = 1, Результат, Пол = Неопределено) Экспорт
	
	Если Компонента = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = "";
	
	#Если Клиент Тогда
		
	МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Фраза, " ");
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		Если ПустаяСтрока(СтрокаМассива) ИЛИ НЕ ФИОНаписаноПоРусски(СтрокаМассива) Тогда
			Результат = Результат + СтрокаМассива + " ";
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
				Результат = Результат + Компонента.Просклонять(СтрокаМассива, Падеж, 1) + " ";
				
			ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
				Результат = Результат + Компонента.Просклонять(СтрокаМассива, Падеж, 2) + " ";
				
			Иначе
				Результат = Результат + Компонента.Просклонять(СтрокаМассива, Падеж) + " ";
				
			КонецЕсли;
			
		Исключение
			Результат = Фраза;
			Возврат Ложь;
			
		КонецПопытки;
			
	КонецЦикла;
	
	Результат = СокрЛП(Результат);
	
	Возврат Истина;
	
	#Иначе
		
	Возврат Ложь;
	
	#КонецЕсли
	
КонецФункции // Просклонять()

// Функция склоняет Фамилию, Имя и Отчество
// Параметры:
//  Фамилия, Имя, Отчество (обязательный), тип строка
//   Параметры должены содержать фамилию, имя и отчество в именительном падеже единственного числа.
//   Строка должна состоять только из букв русского алфавита, пробелов и дефисов. 
//   Внутри фамилии, имени, отчества пробелов быть не должно.
//   Двойные и тройные имена и фамилии должны писаться через дефис. Имена и отчества должны быть полные
//
//  Падеж (обязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
//  Пол (необязательный), тип ПеречислениеСсылка.ПолФизическихЛиц
//   Данный параметр предназначен для разрешения возможных неоднозначностей, например, имя Карен Акопян
//   может принадлежать и мужчине, и женщине, и в зависимости от этого склоняться или не склоняться.
//   В остальных случаях рекомендуется опускать этот параметр.
//
Функция ПросклонятьФамилиюИмяОтчество(Компонента, Знач Фамилия = "", Знач Имя = "", Знач Отчество = "", Падеж = 1, Пол = Неопределено, Результат = "", СообщениеОбОшибке = "") Экспорт
	
	Если Компонента = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФамилияНовая	= Фамилия;
	ИмяНовое		= Имя;
	ОтчествоНовое	= Отчество;
	
	Результат = Фамилия + " " + Имя + " " + Отчество;
	
	// Двойные и тройные ФИО, если указаны с пробелами, исправим на использование дефиса
	НужноИсправитьФамилию	= Найти(Фамилия, " ") > 0;
	НужноИсправитьИмя		= Найти(Имя, " ") > 0;
	НужноИсправитьОтчество	= Найти(Отчество, " ") > 0;
	Если НужноИсправитьФамилию Тогда
		ФамилияНовая = СтрЗаменить(Фамилия, " ", "-");
	КонецЕсли;
	Если НужноИсправитьИмя Тогда
		ИмяНовое = СтрЗаменить(Имя, " ", "-");
	КонецЕсли;
	Если НужноИсправитьОтчество Тогда
		ОтчествоНовое = СтрЗаменить(Отчество, " ", "-");
	КонецЕсли;
	
	ФИО = ФамилияНовая + " " + ИмяНовое + " " + ОтчествоНовое;
	
	Если ПустаяСтрока(ФИО) Тогда
		СообщениеОбОшибке = "Строка с ФИО не должна быть пустая.";
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ФИОНаписаноПоРусски(ФИО) Тогда
		СообщениеОбОшибке = "Строка с ФИО должна состоять только из букв русского алфавита, пробелов и дефисов.";
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрЧислоВхождений(ФИО, " ") > 3 Тогда
		СообщениеОбОшибке = "Фамилия, имя и отчество должны разделяться пробелами. Внутри фамилии, имени, отчества пробелов быть не должно.";
		Возврат Ложь;
	КонецЕсли;
	
	#Если Клиент Тогда
		
	Попытка
		Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
			Результат = Компонента.Просклонять(ФИО, Падеж, 1);
				
		ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
			Результат = Компонента.Просклонять(ФИО, Падеж, 2);
				
		Иначе
			Результат = Компонента.Просклонять(ФИО, Падеж);
				
		КонецЕсли;
		
		// Вернем пробелы в составные ФИО обратно, если до этого их изменили
		Если НужноИсправитьФамилию ИЛИ НужноИсправитьИмя ИЛИ НужноИсправитьОтчество Тогда
			
			МассивФИО = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Результат, " ");
			
			Результат = "";
			
			ИндексФИО = 0;
			
			Если Не ПустаяСтрока(Фамилия) Тогда
				ФамилияНовая = МассивФИО[ИндексФИО];
				ИндексФИО = ИндексФИО + 1;
				
				Если НужноИсправитьФамилию Тогда
					
					Если СтрЧислоВхождений(Фамилия, "-") > 0 Тогда
						
						МассивФамилия = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ФамилияНовая, "-");
						ФамилияНовая = МассивФамилия[0];
						ИндексФамилия = 1;
						
						Пока Истина Цикл
							
							ПозПробел = Найти(Фамилия, " ");
							ПозДефис  = Найти(Фамилия, "-");
							
							Если ПозПробел = ПозДефис Тогда
								Прервать;
							КонецЕсли;
							
							Если (ПозДефис = 0) ИЛИ (ПозПробел > 0) И (ПозПробел < ПозДефис) Тогда
								ФамилияНовая = ФамилияНовая + " ";
								Фамилия = Сред(Фамилия, ПозПробел+1);
								
							ИначеЕсли (ПозПробел = 0) ИЛИ (ПозДефис > 0) И (ПозДефис < ПозПробел) Тогда
								ФамилияНовая = ФамилияНовая + "-";
								Фамилия = Сред(Фамилия, ПозДефис+1);
								
							КонецЕсли;
							
							ФамилияНовая = ФамилияНовая + МассивФамилия[ИндексФамилия];
							ИндексФамилия = ИндексФамилия + 1;
							
						КонецЦикла;
						
					Иначе
						ФамилияНовая = СтрЗаменить(ФамилияНовая, "-", " ");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Результат = Результат + ФамилияНовая;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(Имя) Тогда
				ИмяНовое = МассивФИО[ИндексФИО];
				ИндексФИО = ИндексФИО + 1;
				
				Если НужноИсправитьИмя Тогда
					
					Если СтрЧислоВхождений(Имя, "-") > 0 Тогда
						
						МассивИмя = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяНовое, "-");
						ИмяНовое = МассивИмя[0];
						ИндексИмя = 1;
						
						Пока Истина Цикл
							
							ПозПробел = Найти(Имя, " ");
							ПозДефис  = Найти(Имя, "-");
							
							Если ПозПробел = ПозДефис Тогда
								Прервать;
							КонецЕсли;
							
							Если (ПозДефис = 0) ИЛИ (ПозПробел > 0) И (ПозПробел < ПозДефис) Тогда
								ИмяНовое = ИмяНовое + " ";
								Имя = Сред(Имя, ПозПробел+1);
								
							ИначеЕсли (ПозПробел = 0) ИЛИ (ПозДефис > 0) И (ПозДефис < ПозПробел) Тогда
								ИмяНовое = ИмяНовое + "-";
								Имя = Сред(Имя, ПозДефис+1);
								
							КонецЕсли;
							
							ИмяНовое = ИмяНовое + МассивИмя[ИндексИмя];
							ИндексИмя = ИндексИмя + 1;
							
						КонецЦикла;
						
					Иначе
						ИмяНовое = СтрЗаменить(ИмяНовое, "-", " ");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Результат = СокрЛП(Результат + " " + ИмяНовое);
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(Отчество) Тогда
				ОтчествоНовое = МассивФИО[ИндексФИО];
				ИндексФИО = ИндексФИО + 1;
				
				Если НужноИсправитьОтчество Тогда
					
					Если СтрЧислоВхождений(Отчество, "-") > 0 Тогда
						
						МассивОтчество = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ОтчествоНовое, "-");
						ОтчествоНовое = МассивОтчество[0];
						ИндексОтчество = 1;
						
						Пока Истина Цикл
							
							ПозПробел = Найти(Отчество, " ");
							ПозДефис  = Найти(Отчество, "-");
							
							Если ПозПробел = ПозДефис Тогда
								Прервать;
							КонецЕсли;
							
							Если (ПозДефис = 0) ИЛИ (ПозПробел > 0) И (ПозПробел < ПозДефис) Тогда
								ОтчествоНовое = ОтчествоНовое + " ";
								Отчество = Сред(Отчество, ПозПробел+1);
								
							ИначеЕсли (ПозПробел = 0) ИЛИ (ПозДефис > 0) И (ПозДефис < ПозПробел) Тогда
								ОтчествоНовое = ОтчествоНовое + "-";
								Отчество = Сред(Отчество, ПозДефис+1);
								
							Иначе
								Прервать;
								
							КонецЕсли;
							
							ОтчествоНовое = ОтчествоНовое + МассивОтчество[ИндексОтчество];
							ИндексОтчество = ИндексОтчество + 1;
							
						КонецЦикла;
						
					Иначе
						ОтчествоНовое = СтрЗаменить(ОтчествоНовое, "-", " ");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Результат = СокрЛП(Результат + " " + ОтчествоНовое);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
		
	КонецПопытки;
	
	#Иначе
	
	Возврат Ложь;
	
	#КонецЕсли
	
КонецФункции // ПросклонятьФамилиюИмяОтчество()

// Функция склоняет ФИО
// Параметры:
//  ФИО (обязательный), тип строка
//   Параметр должен содержать фамилию, имя и отчество в именительном падеже единственного числа.
//   Строка должна состоять только из букв русского алфавита, пробелов и дефисов. Фамилия, имя и отчество
//   должны разделяться пробелами. Внутри фамилии, имени, отчества пробелов быть не должно.
//   Допустимы следующие сочетания фамилии, имени и отчества: ФИО, ИОФ, ИО, ИФ, ФИ, Ф, И, О.
//   Двойные и тройные имена и фамилии должны писаться через дефис. Имена и отчества должны быть полные
//
//  Падеж (обязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
//  Пол (необязательный), тип ПеречислениеСсылка.ПолФизическихЛиц
//   Данный параметр предназначен для разрешения возможных неоднозначностей, например, имя Карен Акопян
//   может принадлежать и мужчине, и женщине, и в зависимости от этого склоняться или не склоняться.
//   В остальных случаях рекомендуется опускать этот параметр.
//
Функция ПросклонятьФИО(Компонента, Знач ФИО = "", Падеж = 1, Пол = Неопределено, Результат = "", СообщениеОбОшибке = "") Экспорт
	
	Если Компонента = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = ФИО;
	
	Если ПустаяСтрока(ФИО) Тогда
		СообщениеОбОшибке = "Строка с ФИО не должна быть пустой.";
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ФИОНаписаноПоРусски(ФИО) Тогда
		СообщениеОбОшибке = "Строка с ФИО должна состоять только из букв русского алфавита, пробелов и дефисов.";
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрЧислоВхождений(ФИО, " ") > 3 Тогда
		СообщениеОбОшибке = "Фамилия, имя и отчество должны разделяться пробелами. Внутри фамилии, имени и отчества пробелов быть не должно.";
		Возврат Ложь;
	КонецЕсли;
	
	#Если Клиент Тогда
		
	Попытка
		Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
			Результат = Компонента.Просклонять(ФИО, Падеж, 1);
				
		ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
			Результат = Компонента.Просклонять(ФИО, Падеж, 2);
				
		Иначе
			Результат = Компонента.Просклонять(ФИО, Падеж);
				
		КонецЕсли;
		
	Исключение
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
		
	#Иначе
	
	Возврат Ложь;
	
	#КонецЕсли
	
КонецФункции // ПросклонятьФИО()


