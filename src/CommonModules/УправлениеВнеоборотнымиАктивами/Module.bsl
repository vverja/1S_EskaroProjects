
// Возвращает сведения об ОС на дату
// 
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  ДатаСведений	    - Дата
//  Организация		    - СправочникСсылка.Организации
//
Функция ПолучитьСведенияОбОС(ОсновноеСредство,ДатаСведений,Организация = Неопределено, ВидУчета = "Упр") Экспорт
	
	ЗапросСведений  = Новый Запрос;
	
	Если ВидУчета  = "Бух" и (ЗначениеЗаполнено(Организация)) тогда
		
		НазваниеРегистраПервоначальныхСведений        = "ПервоначальныеСведенияОСБухгалтерскийУчет";
		НазваниеРегистраПараметровАмортизации         = "ПараметрыАмортизацииОСБухгалтерскийУчет";                  
		НазваниеРегистраМестонахожденияОС 	          = "МестонахождениеОСБухгалтерскийУчет";        
		НазваниеРегистраСпособыОтраженияАмортизацииОС = "СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет";
		
		ТекстУсловия  	   = "&ДатаСведений, Организация = &Организация И ОсновноеСредство = &ОсновноеСредство";
		СтрокиСчетов	   = "	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
		                	  |	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,";
		СоединениеПоСчетам = "		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних("+ТекстУсловия+") КАК СчетаБухгалтерскогоУчетаОС
							  |		ПО ПервоначальныеСведенияОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство";
	    ИнвентарныйНомер   = "	ПервоначальныеСведенияОС.ИнвентарныйНомер КАК ИнвентарныйНомер,";
		ЗапросСведений.УстановитьПараметр("Организация",Организация);
		СтрокаОрганизация  = "  МестонахождениеОС.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		                     |  МестонахождениеОС.Организация.Наименование       КАК ОрганизацияНаименование,";
		
	ИначеЕсли ВидУчета  = "Упр" тогда
		
		НазваниеРегистраПервоначальныхСведений        = "ПервоначальныеСведенияОС";
		НазваниеРегистраПараметровАмортизации         = "ПараметрыАмортизацииОС";
		НазваниеРегистраМестонахожденияОС 	          = "МестонахождениеОС";
		НазваниеРегистраСпособыОтраженияАмортизацииОС = "СпособыОтраженияРасходовПоАмортизацииОС";
		
		ТекстУсловия  	   = "&ДатаСведений, ОсновноеСредство = &ОсновноеСредство";
	    ИнвентарныйНомер   = "	ПервоначальныеСведенияОС.ОсновноеСредство.Код КАК ИнвентарныйНомер,";
		СоединениеПоСчетам = "";
		СтрокаОрганизация  = "";
		
	ИначеЕсли ВидУчета  = "Нал" тогда	
		
		Возврат Неопределено;
		
	Иначе
		// передан непонятный параметр ничего не возвращаем
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЗапросСведений.УстановитьПараметр("ДатаСведений", ДатаСведений);
	ЗапросСведений.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);

	ЗапросСведений.Текст =" 
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОС.СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОС.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОС.Период,
	|	ПараметрыАмортизацииОС.СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОС.ЛиквидационнаяСтоимость,                                              
	|" + СтрокиСчетов
	   + ИнвентарныйНомер
	   + СтрокаОрганизация + "
	|	МестонахождениеОС.Местонахождение,
	|	МестонахождениеОС.МОЛ,                                                                        
	|	МестонахождениеОС.Местонахождение.Наименование КАК Подразделение,
	|	ПервоначальныеСведенияОС.СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОС.ОсновноеСредство,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.Модель КАК Модель,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеПолное,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.Наименование КАК Наименование,
	|	ПервоначальныеСведенияОС.ОсновноеСредство.Изготовитель КАК ИзготовительОС,
	|	НаправленияАмортизацииОС.СпособыОтраженияРасходовПоАмортизации.Код КАК НаправленияАмортизацииКод
	|ИЗ
	|	РегистрСведений."+НазваниеРегистраПервоначальныхСведений+".СрезПоследних("+ТекстУсловия+") КАК ПервоначальныеСведенияОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраПараметровАмортизации+".СрезПоследних("+ТекстУсловия+") КАК ПараметрыАмортизацииОС
	|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = ПараметрыАмортизацииОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраМестонахожденияОС+".СрезПоследних("+ТекстУсловия+") КАК МестонахождениеОС
	|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраСпособыОтраженияАмортизацииОС+".СрезПоследних("+ТекстУсловия+") КАК НаправленияАмортизацииОС
	|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = НаправленияАмортизацииОС.ОсновноеСредство
	|"+СоединениеПоСчетам;
	
	РезультатЗапроса = ЗапросСведений.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
	     Возврат Неопределено;
	Иначе
		 ТекущиеСведенияОС = РезультатЗапроса.Выбрать();
		 ТекущиеСведенияОС.Следующий();
		 Возврат ТекущиеСведенияОС;
	КонецЕсли;
	
КонецФункции //ПолучитьСведенияОбОС

// Функция определяет фактический срок использования актива (в месяцах)
// исходя из даты принятия актива к учету и даты выбытия
//
// Параметры:
//   ДатаПринятияКУчету - дата принятия актива к учету
//   ДатаВыбытия - дата выбытия актива
//
// Возвращаемое значение:
//   Число месяцев.
//
Функция ОпределитьФактическийСрокИспользования(ДатаПринятияКУчету, ДатаВыбытия) Экспорт
	
	КоличествоЛет     = Год(ДатаВыбытия) - Год(ДатаПринятияКУчету);
	КоличествоМесяцев = Месяц(ДатаВыбытия) - Месяц(ДатаПринятияКУчету);
	
	Возврат КоличествоЛет * 12 + КоличествоМесяцев;
	
КонецФункции // ОпределитьФактическийСрокИспользования()

#Если Клиент Тогда

// Процедура выполняет открытие журнала документов с отбором по основному средству.
// Вызывается из ПоказататьДокументыПоОС()
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОсновныеСредства - Основное средство по которому установить отбор
//
Процедура ОткрытьДокументыПоОдномуОС(ОсновноеСредство)

		ФормаСписка = ЖурналыДокументов.ДокументыПоОС.ПолучитьФорму(,, ОсновноеСредство.УникальныйИдентификатор());
		
		Если ОсновноеСредство.ЭтоГруппа Тогда
			
			ФормаСписка.ЖурналДокументовСписок.Отбор.ДокументыПоОС.Значение      = ОсновноеСредство;
			ФормаСписка.ЖурналДокументовСписок.Отбор.ДокументыПоОС.Использование = Истина;
			ФормаСписка.ЖурналДокументовСписок.Отбор.ДокументыПоОС.ВидСравнения  = ВидСравнения.ВИерархии;
			
		Иначе
			
			ФормаСписка.ЖурналДокументовСписок.Отбор.ДокументыПоОС.Установить(ОсновноеСредство);;
			
		КонецЕсли;
	
	ФормаСписка.Открыть();

КонецПроцедуры // ОткрытьДокументыПоОдномуОС()

// Процедура выполняет открытие журнала документов с отбором по основному средству.
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОсновныеСредства или массив - Основное средство по которому установить отбор
//
Процедура ПоказататьДокументыПоОС(ОсновноеСредство) Экспорт
		
	Если ТипЗнч(ОсновноеСредство) = Тип("Массив") Тогда
		
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ОсновноеСредство);
		
		КоличествоОС = ОсновноеСредство.Количество();
		
		Если КоличествоОС = 1 Тогда
			
			// Отбор по одному
			ОткрытьДокументыПоОдномуОС(ОсновноеСредство[0]);
			
		ИначеЕсли КоличествоОС > 1 Тогда
			
			// нужно дать пользователю выбрать
			СписокОС = Новый СписокЗначений;
			
			Для каждого Элемент Из ОсновноеСредство Цикл
				
				СписокОС.Добавить(Элемент, "" + Элемент + " (" + Элемент.Код + ")");					
				
			КонецЦикла;	
			
			СписокОС.ОтметитьЭлементы();
			
			// удаление не отмеченных
			Для Н = 1 По КоличествоОС Цикл
				
				Элемент = СписокОС[КоличествоОС - Н];
				
				Если НЕ Элемент.Пометка Тогда
					
					СписокОС.Удалить(Элемент);
					
				КонецЕсли;
				
			КонецЦикла;
			
			КоличествоОС = СписокОС.Количество();
			
			Если КоличествоОС = 1 Тогда
				
				// Отбор по одному
				ОткрытьДокументыПоОдномуОС(СписокОС[0].Значение);
				
			ИначеЕсли КоличествоОС > 1 Тогда
				
				// Отбор списком
				ФормаСписка = ЖурналыДокументов.ДокументыПоОС.ПолучитьФорму(,, Новый УникальныйИдентификатор());
				
				ФормаСписка.ЖурналДокументовСписок.Отбор.ДокументыПоОС.Использование = Истина;
				ФормаСписка.ЖурналДокументовСписок.Отбор.ДокументыПоОС.ВидСравнения  = ВидСравнения.ВСписке;
				ФормаСписка.ЖурналДокументовСписок.Отбор.ДокументыПоОС.Значение.ЗагрузитьЗначения(СписокОС.ВыгрузитьЗначения());
				
			    ФормаСписка.Открыть()
				
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОткрытьДокументыПоОдномуОС(ОсновноеСредство)
		
	КонецЕсли;

КонецПроцедуры // ПоказататьДокументыПоОС()

#КонецЕсли


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПРОВЕРКИ СОСТОЯНИЙ И СОБЫТИЙ ОС

// Проверяет правильность заполнения событий в шапке документов ОС
// Параметры
//  Событие (Перечисление ВыдыСобытийОС): вид события
//  ВидыСобытий (Перечисление ВыдыСобытийОС,СписокЗначений): правильные события
//  ПредставлениеРеквизита: Представление проверяемого реквизита
//  Отказ : отказ от проведения документа
//
Процедура ПроверкаЗаполненияСобытий(Событие,ВидыСобытий,ПредставлениеРеквизита,Отказ) Экспорт
	
	ПравильноеСобытие = Истина;
	Если ВидыСобытий <> Неопределено Тогда
		Если ЗначениеЗаполнено(Событие) тогда
			Если ТипЗнч(ВидыСобытий) = Тип("СписокЗначений") Тогда
				ПравильноеСобытие = ВидыСобытий.НайтиПоЗначению(Событие)<>Неопределено;
			Иначе
				ПравильноеСобытие = Событие = ВидыСобытий;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПравильноеСобытие тогда
		
		СтрокаСообщения = "Неправильное значение реквизита шапки """ + СокрЛП(ПредставлениеРеквизита) + """!";
		Сообщить(СтрокаСообщения,СтатусСообщения.Важное);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры// ПроверкаЗаполненияСобытий()

// Функция возвращает соответствие значений перечисления Виды событий ОС
// значениям перечисления СостоянияОС
Функция ПолучитьСоответствиеСобытийСостояниямОС()
	
	СоответствиеСобытийСостояниям = Новый Соответствие;
	СоответствиеСобытийСостояниям.Вставить(Перечисления.СостоянияОС.ВведеноВЭксплуатацию,Перечисления.ВидыСобытийОС.ВводВЭксплуатацию);
	СоответствиеСобытийСостояниям.Вставить(Перечисления.СостоянияОС.ПринятоКУчету,Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	СоответствиеСобытийСостояниям.Вставить(Перечисления.СостоянияОС.СнятоСУчета,Перечисления.ВидыСобытийОС.Списание);
	
	Возврат СоответствиеСобытийСостояниям;
	
КонецФункции

// Проверяет возможность принятия к учету ОС по управленческому и регламентированному учету. 
// Используется документами ВводНачальныхОстатковОС и ПринятиеКУчетуОС
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  Дата				- Дата, дата принятия к учету
//  Отказ 				- Булево
//  Организация		    - СправочникСсылка.Организации. Если значение = неопределено - упр. учет.
Процедура ПроверитьВозможностьПринятияКУчетуОС(ОсновноеСредство,Дата,Отказ,Организация = Неопределено) Экспорт
	
	Если Организация  = Неопределено тогда
		// упр. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОС";
		НазваниеРегистраСобытий   	= "РегистрСведений.СобытияОС";
		УсловиеОрганизацииСостояний = "";
		УсловиеОрганизацииСобытий	= "";
	Иначе // бух. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОСОрганизаций";
		НазваниеРегистраСобытий   	= "РегистрСведений.СобытияОСОрганизаций";
		УсловиеОрганизацииСостояний = "И СостоянияОС.Организация = &Организация ";
		УсловиеОрганизацииСобытий	= "СобытияОС.Организация = &Организация И ";
	КонецЕсли;
	
	ЗапросСостоянийИСобытий = Новый Запрос;
	
	
	ЗапросСостоянийИСобытий.Текст =    "ВЫБРАТЬ
									   |    СостоянияОС.Регистратор КАК Регистратор,
						               |	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
						               |	СостоянияОС.Состояние КАК Состояние,
									   |	NULL КАК Событие,
									   |	СостоянияОС.ДатаСостояния КАК Дата
						               |ИЗ
						               |	"+НазваниеРегистраСостояний+" КАК СостоянияОС
						               |
						               |ГДЕ
									   |	(СостоянияОС.Состояние = &СостояниеПринятоКУчету 
									   |	ИЛИ СостоянияОС.Состояние = &СостояниеСнятоСУчета 
									   |	И СостоянияОС.ДатаСостояния <= &Дата 
									   |	ИЛИ СостоянияОС.Состояние = &СостояниеВведеноВЭксплуатацию 
									   |	И СостоянияОС.ДатаСостояния <= &Дата) 
									   |	"+УсловиеОрганизацииСостояний+" 
									   |	И СостоянияОС.ОсновноеСредство = &ОсновноеСредство
						               |
						               |ОБЪЕДИНИТЬ
						               |
						               |ВЫБРАТЬ
									   |	СобытияОС.Регистратор,
						               |	СобытияОС.ОсновноеСредство,
									   |	NULL,
						               |	СобытияОС.Событие.ВидСобытияОС,
									   |	СобытияОС.Период
						               |ИЗ
						               |	"+НазваниеРегистраСобытий+" КАК СобытияОС
						               |
						               |ГДЕ
						               |	СобытияОС.ОсновноеСредство = &ОсновноеСредство И
									   | 	"+УсловиеОрганизацииСобытий+"
						               |	СобытияОС.Событие.ВидСобытияОС <> &ВидСобытияПрочее
									   |	И СобытияОС.Период < &Дата
									   |";
									   
	ЗапросСостоянийИСобытий.УстановитьПараметр("Дата",Дата);
	ЗапросСостоянийИСобытий.УстановитьПараметр("ОсновноеСредство",ОсновноеСредство);
	ЗапросСостоянийИСобытий.УстановитьПараметр("ВидСобытияПрочее",Перечисления.ВидыСобытийОС.Прочее);
	ЗапросСостоянийИСобытий.УстановитьПараметр("СостояниеСнятоСУчета",Перечисления.СостоянияОС.СнятоСУчета);
	ЗапросСостоянийИСобытий.УстановитьПараметр("СостояниеВведеноВЭксплуатацию",Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	ЗапросСостоянийИСобытий.УстановитьПараметр("СостояниеПринятоКУчету",Перечисления.СостоянияОС.ПринятоКУчету);
	Если Организация <> Неопределено тогда
		ЗапросСостоянийИСобытий.УстановитьПараметр("Организация",Организация);
	КонецЕсли;
	
	Результат = ЗапросСостоянийИСобытий.Выполнить();
	
	Если Не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		СтрокаСообщения = "Для основного средства <"+ОсновноеСредство.Наименование;
		Если Организация<> Неопределено тогда
			СтрокаСообщения = СтрокаСообщения +"> в организации <"+Строка(Организация);
		КонецЕсли;
		СтрокаСообщения = СтрокаСообщения + "> уже зафиксированы состояния или события:";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
		Пока Выборка.Следующий() Цикл
			СтрокаСообщения = "";
			Если Выборка.Состояние <> NULL тогда
				СтрокаСообщения = СтрокаСообщения + "состояние <"+Строка(Выборка.Состояние)
			ИначеЕсли Выборка.Событие <> NULL тогда
				СтрокаСообщения = СтрокаСообщения + "событие <"+Строка(Выборка.Событие)
			КонецЕсли;
			СтрокаСообщения = СтрокаСообщения+"> документ <"+Строка(Выборка.Регистратор);
			СтрокаСообщения = СтрокаСообщения + ">. Дата : "+Формат(Выборка.Дата,"ДФ=dd.MM.yyyy"); 
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность снятия с учета ОС по управленческому и регламентированному учету. 
// Используется документами ВводНачальныхОстатковОС и ПринятиеКУчетуОС
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  Дата				- Дата, дата снятия с учета
//  Отказ 				- Булево
//  Организация		    - СправочникСсылка.Организации. Если значение = неопределено - упр. учет.
Процедура ПроверитьВозможностьСнятияСУчета(ОсновноеСредство,Дата,Отказ,Организация = Неопределено) Экспорт
	
	Если Организация  = Неопределено тогда
		// упр. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОС";
		НазваниеРегистраСобытий   	= "РегистрСведений.СобытияОС";
		УсловиеОрганизацииСостояний = "";
		УсловиеОрганизацииСобытий	= "";
	Иначе // бух. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОСОрганизаций";
		НазваниеРегистраСобытий   	= "РегистрСведений.СобытияОСОрганизаций";
		УсловиеОрганизацииСостояний = "И СостоянияОС.Организация = &Организация ";
		УсловиеОрганизацииСобытий	= "СобытияОС.Организация = &Организация И ";
	КонецЕсли;
	
	ЗапросСостоянийИСобытий = Новый Запрос;
	
	ЗапросСостоянийИСобытий.Текст =    "ВЫБРАТЬ
									   |    СостоянияОС.Регистратор КАК Регистратор,
						               |	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
						               |	СостоянияОС.Состояние КАК Состояние,
									   |	СостоянияОС.ДатаСостояния КАК Дата
						               |ИЗ
						               |	"+НазваниеРегистраСостояний+" КАК СостоянияОС
						               |
						               |ГДЕ
						               |	(СостоянияОС.ОсновноеСредство = &ОсновноеСредство И
									   |     СостоянияОС.Состояние <> &СостояниеСнятоСУчета
									   | 	"+УсловиеОрганизацииСостояний+"
									   |	)
									   |	ИЛИ 
									   |	(СостоянияОС.Состояние = &СостояниеСнятоСУчета И
						               |	 СостоянияОС.ОсновноеСредство = &ОсновноеСредство И
									   |	 СостоянияОС.ДатаСостояния <= &Дата
									   | 	"+УсловиеОрганизацииСостояний+"
									   |	)
									   |";
									   
	ЗапросСостоянийИСобытий.УстановитьПараметр("Дата",Дата);
	ЗапросСостоянийИСобытий.УстановитьПараметр("ОсновноеСредство",ОсновноеСредство);
	ЗапросСостоянийИСобытий.УстановитьПараметр("СостояниеСнятоСУчета",Перечисления.СостоянияОС.СнятоСУчета);
	Если Организация <> Неопределено тогда
		ЗапросСостоянийИСобытий.УстановитьПараметр("Организация",Организация);
	КонецЕсли;
	
	Результат = ЗапросСостоянийИСобытий.Выполнить();
	
	Если Результат.Пустой() тогда
		СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> не принималось ";
		Если Организация<> Неопределено тогда
			СтрокаСообщения = СтрокаСообщения +"к бухгалтерскому учету в организации <"+Строка(Организация) +">";
		Иначе
			СтрокаСообщения = СтрокаСообщения +"к управленческому учету";
		КонецЕсли;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ);
	Иначе	
		Выборка = Результат.Выбрать();
		Если Организация = Неопределено тогда
			СтрокаВидаУчета = "управленческо";
		Иначе
			СтрокаВидаУчета = "бухгалтерско";
		КонецЕсли;			
		Пока Выборка.Следующий() Цикл
			СтрокаСообщения = Неопределено;
			Если Выборка.Состояние = Перечисления.СостоянияОС.ПринятоКУчету и Выборка.Дата > Дата тогда
				
				СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> принято к "+ СтрокаВидаУчета +"му учету";
				
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОС.СнятоСУчета тогда
				
				СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> снято с "+ СтрокаВидаУчета +"го учета";
				
			КонецЕсли;			
			Если СтрокаСообщения <> Неопределено тогда
				Если Организация <> Неопределено тогда
					СтрокаСообщения = СтрокаСообщения +" в организации <"+Строка(Организация)+">";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения+" документ <"+Строка(Выборка.Регистратор)
								  + ">. Дата: "+Формат(Выборка.Дата,"ДФ=dd.MM.yyyy"); 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры//ПроверитьВозможностьСнятияСУчета

// Проверяет возможность изменения состояния  ОС по управленческому и регламентированному учету. 
// Используется документами ВводНачальныхОстатковОС и ПринятиеКУчетуОС
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  Дата				- Дата, дата изменения состояния
//  Отказ 				- Булево
//  Организация		    - СправочникСсылка.Организации. Если значение = неопределено - упр. учет.
Процедура ПроверитьВозможностьИзмененияСостоянияОС(ОсновноеСредство,Дата,Событие,Отказ,Организация = Неопределено) Экспорт
	
	Если Организация  = Неопределено тогда
		// упр. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОС";
		УсловиеОрганизацииСостояний = "";
	Иначе // бух. учет
		НазваниеРегистраСостояний 	= "РегистрСведений.СостоянияОСОрганизаций";
		УсловиеОрганизацииСостояний = "И СостоянияОС.Организация = &Организация ";
	КонецЕсли;
	
	ЗапросСостоянийИСобытий = Новый Запрос;
	
	ЗапросСостоянийИСобытий.Текст =    "ВЫБРАТЬ
									   |    СостоянияОС.Регистратор КАК Регистратор,
						               |	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
						               |	СостоянияОС.Состояние КАК Состояние,
									   |	СостоянияОС.ДатаСостояния КАК Дата
						               |ИЗ
						               |	"+НазваниеРегистраСостояний+" КАК СостоянияОС
						               |
						               |ГДЕ
						               |	(СостоянияОС.ОсновноеСредство = &ОсновноеСредство И
									   |     СостоянияОС.Состояние <> &СостояниеСнятоСУчета
									   | 	"+УсловиеОрганизацииСостояний+"
									   |	)
									   |	ИЛИ 
									   |	(СостоянияОС.Состояние = &СостояниеСнятоСУчета И
						               |	 СостоянияОС.ОсновноеСредство = &ОсновноеСредство И
									   |	 СостоянияОС.ДатаСостояния <= &Дата
									   | 	"+УсловиеОрганизацииСостояний+"
									   |	)
									   |";
									   
	ЗапросСостоянийИСобытий.УстановитьПараметр("Дата",Дата);
	ЗапросСостоянийИСобытий.УстановитьПараметр("ОсновноеСредство",ОсновноеСредство);
	ЗапросСостоянийИСобытий.УстановитьПараметр("СостояниеСнятоСУчета",Перечисления.СостоянияОС.СнятоСУчета);
	Если Организация <> Неопределено тогда
		ЗапросСостоянийИСобытий.УстановитьПараметр("Организация",Организация);
	КонецЕсли;
	
	Результат = ЗапросСостоянийИСобытий.Выполнить();
	
	Если Результат.Пустой() тогда
		СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> не принималось к учету";
		Если Организация<> Неопределено тогда
			СтрокаСообщения = СтрокаСообщения +" в организации <"+Строка(Организация) +">";
		КонецЕсли;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ);
	Иначе	
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаСообщения = Неопределено;
			Если Выборка.Состояние = Перечисления.СостоянияОС.ВведеноВЭксплуатацию и 
				Событие.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию тогда
				СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> уже введено в эксплуатацию";
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОС.ПринятоКУчету и Выборка.Дата > Дата тогда
				СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> принято к учету";
			ИначеЕсли Выборка.Состояние = Перечисления.СостоянияОС.СнятоСУчета тогда
				СтрокаСообщения = "Основное средство <"+ОсновноеСредство.Наименование+"> снято с учета";
			КонецЕсли;			
			Если СтрокаСообщения <> Неопределено тогда
				Если Организация <> Неопределено тогда
					СтрокаСообщения = СтрокаСообщения +" в организации <"+Строка(Организация)+">";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения+" документ <"+Строка(Выборка.Регистратор)+
								  ">. Дата: "+Формат(Выборка.Дата,"ДФ=dd.MM.yyyy"); 
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры состояния ОС 
// 
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  Состояние			- Перечисление.ВидыСостоянийОС
//  УпрУчет				- Булево, Учет, 
//  Организация		    - СправочникСсылка.Организации
// Возвращаемое значение структура с полями:
//	Дата,НомерДок,ИмяДок,Сумма,Регистратор
//
Функция ПолучитьАтрибутыСостоянияОС(ОС, Состояние, УпрУчет = Истина, Организация =  Неопределено) Экспорт 
	
	РегистрСобытий 	 = "СобытияОС";
	РегистрСостояний = "СостоянияОС";
	СуммаЗатрат 	 = "СуммаЗатрат";
	
	Если НЕ УпрУчет тогда
		
		РегистрСобытий 	 = РегистрСобытий   + "Организаций";
		РегистрСостояний = РегистрСостояний + "Организаций";
		СуммаЗатрат 	 = СуммаЗатрат		+ "БУ";
		
	КонецЕсли;
		
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	"+РегистрСостояний+".Регистратор.Ссылка КАК Регистратор,
	|	"+РегистрСостояний+".ОсновноеСредство,
	|	"+РегистрСостояний+".Состояние,
	|	ЕСТЬNULL("+РегистрСостояний+".ДатаСостояния, ДАТАВРЕМЯ(1,1,1)) КАК ДатаСостояния,
	|	"+РегистрСобытий+".Событие,
	|	"+РегистрСобытий+".НомерДокумента,
	|	"+РегистрСобытий+".НазваниеДокумента,
	|	ЕСТЬNULL("+РегистрСобытий+"."+СуммаЗатрат+", 0) КАК Сумма
	|ИЗ
	|	РегистрСведений."+РегистрСостояний+" КАК "+РегистрСостояний+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+РегистрСобытий+" КАК "+РегистрСобытий+"
	|		ПО "+РегистрСостояний+".Регистратор = "+РегистрСобытий+".Регистратор 
	|		И "+РегистрСостояний+".ОсновноеСредство = "+РегистрСобытий+".ОсновноеСредство 
	|ГДЕ
	|		"+РегистрСостояний+".ОсновноеСредство = &ОсновноеСредство 
	|		И "+РегистрСостояний+".Состояние = &Состояние 
	|		И "+РегистрСобытий+".Событие.ВидСобытияОС в (&ВидСобытияОС)";
	
	ЗапросСостоянияОС = Новый Запрос;
	ЗапросСостоянияОС.УстановитьПараметр("Состояние",Состояние);
	СоответствиеСобытийСостояниям = ПолучитьСоответствиеСобытийСостояниямОС();
	ВидСобытия = Новый Массив;
	Событие    = СоответствиеСобытийСостояниям.Получить(Состояние);
	ВидСобытия.Добавить(Событие);
	Если Событие = Перечисления.ВидыСобытийОС.Списание тогда
		 ВидСобытия.Добавить(Перечисления.ВидыСобытийОС.Передача);
	КонецЕсли;

	ЗапросСостоянияОС.УстановитьПараметр("ВидСобытияОС",ВидСобытия);
	ЗапросСостоянияОС.УстановитьПараметр("ОсновноеСредство",ОС);
	Если Не УпрУчет тогда
		ЗапросСостоянияОС.УстановитьПараметр("Организация",Организация);
		ТекстЗапроса= ТекстЗапроса+"
		|   И  "+РегистрСобытий+".Организация	= &Организация
		|   И  "+РегистрСостояний+".Организация = &Организация";
	КонецЕсли;
	
	ЗапросСостоянияОС.Текст	= ТекстЗапроса;
		
	ВыборкаСостояний = ЗапросСостоянияОС.Выполнить().Выбрать();
	СтруктураСостояния = Новый Структура;
	
	Если ВыборкаСостояний.Следующий() тогда
		
		СтруктураСостояния.Вставить( "Дата"        , ВыборкаСостояний.ДатаСостояния);
		СтруктураСостояния.Вставить( "ИмяДок"      , ВыборкаСостояний.НазваниеДокумента);
		СтруктураСостояния.Вставить( "НомерДок"    , ВыборкаСостояний.НомерДокумента);
		СтруктураСостояния.Вставить( "Сумма"	   , ВыборкаСостояний.Сумма);
		СтруктураСостояния.Вставить( "Регистратор" , ВыборкаСостояний.Регистратор);
		
	Иначе	                                              
		
		СтруктураСостояния.Вставить( "Дата"		   , '00010101000000');
		СтруктураСостояния.Вставить( "ИмяДок"	   , "");
		СтруктураСостояния.Вставить( "НомерДок"	   , "");
		СтруктураСостояния.Вставить( "Сумма"	   , 0);
		СтруктураСостояния.Вставить( "Регистратор" , Неопределено);
		
	КонецЕсли;	
	
	Возврат СтруктураСостояния;
	
КонецФункции

// Возвращает из справочника событий ОС первую найденную запись с заданным видом события,
// иначе возвращает пустую ссылку на справочник
//
// Параметры
//  ВидСобытия (Перечисление ВидыСобытийОС): вид события
//
// Возвращаемое значение:
//   элемент справочника событий ОС
//
Функция ПолучитьСобытиеПоОСИзСправочника(ВидСобытия) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСобытияОС", ВидСобытия);
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Ссылка,
	|	ВидСобытияОС
	|ИЗ
	|	Справочник.СобытияОС КАК СобытияОС
	|
	|ГДЕ
	|	ВидСобытияОС = &ВидСобытияОС";
	ТаблицаСобытий = Запрос.Выполнить().Выгрузить();

	Если ТаблицаСобытий.Количество() = 1 Тогда // Если однозначно определили
		Возврат ТаблицаСобытий[0].Ссылка;

	Иначе
		Возврат Справочники.СобытияОС.ПустаяСсылка();

	КонецЕсли;

КонецФункции // ПолучитьСобытиеОСИзСправочника()


#Если Клиент Тогда
	
// Процедура выполняет стандартные действия при начале выбора события ОС в формах документов.
//
// Параметры:
//  ЭлементФормы                      - элемент формы документа, который надо заполнить; 
//  ВидыСобытий                       - вид состояний ОС для отбора, значение перечисления ВидыСобытитйОС;
//  СтандартнаяОбработка              - булево, признак выполнения стандартной (системной) обработки события,
//
Процедура НачалоВыбораЗначенияСобытияОС(ЭлементФормы, ВидыСобытий, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.СобытияОС.ПолучитьФормуВыбора(,ЭлементФормы,);

	Если ВидыСобытий <> Неопределено Тогда

		// Оставим в выборе только "правильные" состояния
		Если ТипЗнч(ВидыСобытий) = Тип("СписокЗначений") Тогда
			ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.ВСписке;
		Иначе
			ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.Равно;
		КонецЕсли;

		ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.Значение         = ВидыСобытий;
		ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.Использование    = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСобытияОС.Доступность = Ложь;

	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСобытияОС()
	
// Процедура выполняет действия при изменении события ОС в формах документов.
// Необходима для проверки разрешенных событий, если пользователь воспользовался 
// быстрым выбором в реквизите.
//
// Параметры:
//  ЭлементФормы  - элемент формы документа, который надо заполнить; 
//  ВидыСостояний - СписокЗначений или значение перечисления ВидыСобытийОС - разрешенные виды событий ОС;
//
Процедура ПриИзмененииЗначенияСобытияОС(ЭлементФормы, ВидыСобытий) Экспорт

	Если (ВидыСобытий <> Неопределено) И (ЗначениеЗаполнено(ЭлементФормы.Значение)) Тогда
		
		ВыбранныйВидСобытия = ЭлементФормы.Значение.ВидСобытияОС;
		Отказ = Ложь;
		
		Если ТипЗнч(ВидыСобытий) = Тип("СписокЗначений") Тогда
			
			Отказ = (ВидыСобытий.НайтиПоЗначению(ВыбранныйВидСобытия) = Неопределено);
			
		Иначе
			
			Отказ = (ВидыСобытий <> ВыбранныйВидСобытия);
			
		КонецЕсли;
		
		Если Отказ Тогда
			
			Сообщить("В данном контексте можно выбирать только события с видом: """ 
			         + ВидыСобытий + """.", СтатусСообщения.Важное);
			ЭлементФормы.Значение = Справочники.СобытияОС.ПустаяСсылка();
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // НачалоВыбораЗначенияСобытияОС()

#КонецЕсли

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АМОРТИЗАЦИИ

Функция ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, График, ДатаРасчета, ТипГодовой = Неопределено)

	КоэффициентАмортизации = 0;

	СтрокаТЧ = ТаблицаГрафиков.Найти(График, "График");
	Если СтрокаТЧ = Неопределено Тогда
		Возврат 0;
	КонецЕсли;

	Если ТипГодовой = Неопределено Тогда

		СуммаВсех   = СтрокаТЧ.СуммаКоэффициентов;
		СуммаОдного = СтрокаТЧ["Коэффициент" + Месяц(ДатаРасчета)];

	Иначе

		Если ТипГодовой = ТипЗнч(График) Тогда

			СуммаВсех   = СтрокаТЧ.СуммаКоэффициентов;
			СуммаОдного = СтрокаТЧ["Коэффициент" + Месяц(ДатаРасчета)];

		Иначе

			ТаблицаМесяцев = СтрокаТЧ.ТаблицаМесяцев;
			СтрокаМесяца   = ТаблицаМесяцев.Найти(НачалоМесяца(ДатаРасчета), "МесяцРасчета");

			СуммаВсех      = ТаблицаМесяцев.Итог("Коэффициент");
			СуммаОдного    = ?(СтрокаМесяца = Неопределено, 0, СтрокаМесяца.Коэффициент);

		КонецЕсли;

	КонецЕсли;

	КоэффициентАмортизации = СуммаОдного / ?(СуммаВсех = 0 ИЛИ СуммаВсех = NULL, 1, СуммаВсех);

	Возврат КоэффициентАмортизации;

КонецФункции // ПолучитьКоэффициентАмортизацииИзГрафика()

// Получает сводную таблицу графиков - годовых и индивидуальных одним запросом для оптимального чтения данных 
Функция ПолучитьТаблицуГрафиков()

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка КАК График,
	|	Коэффициент1,
	|	Коэффициент2,
	|	Коэффициент3,
	|	Коэффициент4,
	|	Коэффициент5,
	|	Коэффициент6,
	|	Коэффициент7,
	|	Коэффициент8,
	|	Коэффициент9,
	|	Коэффициент10,
	|	Коэффициент11,
	|	Коэффициент12,
	|	Коэффициент1 + Коэффициент2 + Коэффициент3 + Коэффициент4 + Коэффициент5 + Коэффициент6 + Коэффициент7 + Коэффициент8 + Коэффициент9 + Коэффициент10 + Коэффициент11 + Коэффициент12 КАК СуммаКоэффициентов,
	|	ПУСТАЯТАБЛИЦА.(
	|		КАК График,
	|		КАК МесяцРасчета,
	|		КАК Коэффициент
	|	) КАК ТаблицаМесяцев
	|ИЗ
	|	Справочник.ГодовыеГрафикиАмортизацииОС КАК ГодовыеГрафикиАмортизацииОС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	График.(
	|		Ссылка,
	|		Месяц,
	|		Коэффициент
	|	)
	|ИЗ
	|	Справочник.ИндивидуальныеГрафикиАмортизации КАК ИндивидуальныеГрафикиАмортизации";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуГрафиков


// Расчитывает сумму амортизации по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииРегл(ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина, Отказ = Ложь) Экспорт       

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета"           , Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчета"     		, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизации"    	, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Местонахождение"		, Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаАмортизации.Колонки.Добавить("Амортизация"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАмортизации.Колонки.Добавить("АмортизацияНУ"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАмортизации.Колонки.Добавить("НалоговоеНазначение"	, Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто"			, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));
	ТаблицаАмортизации.Колонки.Добавить("Метод_50_50"			, Новый ОписаниеТипов("Булево"));

	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоГода",		НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоКвартала",	НачалоКвартала(ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("ГраницаНачалоПериода",	Новый Граница(НачалоМесяца(ДатаРасчета),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КонецПериода",	КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("ГраницаКонецПериода",	Новый Граница(КонецМесяца(ДатаРасчета),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Период",           ДатаРасчета);
	Запрос.УстановитьПараметр("НачалоПериода200911" , Дата(2009,11,01));
	Запрос.УстановитьПараметр("СостояниеВвода", Перечисления.СостоянияОС.ВведеноВЭксплуатацию);	
	
	СписокУпрощенныхМетодов = Новый Массив(3);
	СписокУпрощенныхМетодов[0] = Перечисления.СпособыНачисленияАмортизацииОС._100;
	СписокУпрощенныхМетодов[1] = Перечисления.СпособыНачисленияАмортизацииОС._50_50;
	
	Запрос.УстановитьПараметр("СписокУпрощенныхМетодов", СписокУпрощенныхМетодов);
	Запрос.УстановитьПараметр("СостояниеВвода", Перечисления.СостоянияОС.ВведеноВЭксплуатацию);	
		
	ТекстУсловия = ?( ОсновноеСредство = Неопределено, "", " И ОсновноеСредство В (&ОсновноеСредство) ");

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ
	|	СнятыеСУчета
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета) И
	|	СостоянияОСОрганизаций.ДатаСостояния < &Период И
	|	СостоянияОСОрганизаций.Организация = &Организация " + ТекстУсловия + "
	|;
	|
	
	|ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ЕСТЬNULL(НачислениеАмортизации.НачислятьАмортизацию, ЛОЖЬ) 			КАК НачислятьАмортизацию,
	|	ЕСТЬNULL(НачислениеАмортизацииНУ.НачислятьАмортизацию, ЛОЖЬ) 		КАК НачислятьАмортизациюНУ,
	|	ЕСТЬNULL(НачислениеАмортизацииНаКонец.НачислятьАмортизацию, ЛОЖЬ) 	КАК НачислятьАмортизациюНаКонец,
	|	ЕСТЬNULL(НачислениеАмортизацииНУНаКонец.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизациюНУНаКонец
	|ПОМЕСТИТЬ
	|   СписокОС
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		            &ГраницаНачалоПериода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + " И ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СнятыеСУчета)) КАК НачислениеАмортизации
	|		ПО ОсновныеСредства.Ссылка = НачислениеАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		            &ГраницаКонецПериода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + " И ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СнятыеСУчета)) КАК НачислениеАмортизацииНаКонец
	|		ПО ОсновныеСредства.Ссылка = НачислениеАмортизацииНаКонец.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(
	|		            &ГраницаКонецПериода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + " И ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СнятыеСУчета)) КАК НачислениеАмортизацииНУНаКонец
	|		ПО ОсновныеСредства.Ссылка = НачислениеАмортизацииНУНаКонец.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|					&ГраницаКонецПериода, Организация = &Организация 
	|					" + ТекстУсловия + " И ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СнятыеСУчета)) КАК ПервоначальныеСведенияОС
	|		ПО ОсновныеСредства.Ссылка = ПервоначальныеСведенияОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(
	|		            &ГраницаНачалоПериода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + " И ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СнятыеСУчета)) КАК НачислениеАмортизацииНУ
	|		ПО ОсновныеСредства.Ссылка = НачислениеАмортизацииНУ.ОсновноеСредство
	|ГДЕ
	|	(НачислениеАмортизации.НачислятьАмортизацию
	|			ИЛИ НачислениеАмортизацииНУ.НачислятьАмортизацию)
	|	ИЛИ (НачислениеАмортизацииНаКонец.НачислятьАмортизацию И ПервоначальныеСведенияОС.СпособНачисленияАмортизации В (&СписокУпрощенныхМетодов))
	|;
	
	

	
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство  			КАК ОсновноеСредство,
	|	СостоянияОС.ДатаСостояния  				КАК ДатаСостояния
	|ПОМЕСТИТЬ
	|   СписокОСПринятыхВТекущемМесяце
	|ИЗ	
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		            &КонецПериода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + ") КАК НачислениеАмортизации
	|	ПО НачислениеАмортизации.Организация = СостоянияОС.Организация
	|		И НачислениеАмортизации.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|		И (НачислениеАмортизации.НачислятьАмортизацию)
	|		И СостоянияОС.Состояние = &СостояниеВвода
	|		И (СостоянияОС.ДатаСостояния МЕЖДУ &НачалоПериода И &КонецПериода)
	|		И (СостоянияОС.ДатаСостояния > &НачалоПериода200911)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	СписокОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СписокОС.ОсновноеСредство.ПодлежитАмортизации                                      КАК ПодлежитАмортизации,
	|	СписокОС.НачислятьАмортизациюНУ                                     				КАК НачислятьАмортизациюНУ,
	|	СписокОС.НачислятьАмортизациюНаКонец                                     			КАК НачислятьАмортизациюНаКонец,
	|	СписокОС.НачислятьАмортизациюНУНаКонец                                     			КАК НачислятьАмортизациюНУНаКонец,
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию           КАК НачислятьАмортизациюНаНачало,
	|	ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ИнвентарныйНомер 		   КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПараметрВыработки           КАК ПараметрВыработки,
	|	ПервоначальныеСведенияНалоговыйУчетСрезПоследних.НалоговаяГруппаОС                 КАК НалоговаяГруппаОС
	|ПОМЕСТИТЬ
	|   СписокАмортизируемыхОС
	|ИЗ 
	|	СписокОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ГраницаНачалоПериода,
	|			Организация = &Организация " + ТекстУсловия + ") КАК НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&ГраницаКонецПериода, Организация = &Организация " + ТекстУсловия + "
	|			) КАК ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|			&ГраницаКонецПериода, Организация = &Организация " + ТекстУсловия + "
	|			) КАК ПервоначальныеСведенияНалоговыйУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияНалоговыйУчетСрезПоследних.ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокАмортизируемыхОС.ОсновноеСредство                                       КАК ОсновноеСредство,
	|	СписокАмортизируемыхОС.ОсновноеСредство.Код                                   КАК Код,
	|	СписокАмортизируемыхОС.ОсновноеСредство.ПодлежитАмортизации                   КАК ПодлежитАмортизации,
	|	ЕСТЬNULL(СписокАмортизируемыхОС.НачислятьАмортизациюНаНачало, ЛОЖЬ)           КАК НачислятьАмортизациюНаНачало,
	|	СписокАмортизируемыхОС.СпособНачисленияАмортизации                            КАК СпособНачисленияАмортизации,
	|	СписокАмортизируемыхОС.ИнвентарныйНомер                            			  КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(СтоимостьОС.АмортизацияОстаток, 0)                                   КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьОстаток, 0)                                     КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(Амортизация.АмортизацияОборот, 0)                                    КАК АмортизацияОборот,
	|	ЕСТЬNULL(СтоимостьНаНачалоГода.СтоимостьОстаток, 0) 
	|		- ЕСТЬNULL(СтоимостьНаНачалоГода.АмортизацияОстаток, 0)                   КАК СтоимостьНаНачалоГода,
	|	ЕСТЬNULL(СтоимостьОС.АмортизацияНУОстаток, 0)                                   КАК АмортизацияКонечныйОстатокНУ,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьНУОстаток, 0)                                     КАК СтоимостьКонечныйОстатокНУ,
	|	ЕСТЬNULL(Амортизация.АмортизацияНУОборот, 0)                                    КАК АмортизацияОборотНУ,
	|	ЕСТЬNULL(СтоимостьНаНачалоГода.СтоимостьНУОстаток, 0) 
	|		- ЕСТЬNULL(СтоимостьНаНачалоГода.АмортизацияНУОстаток, 0)                   КАК СтоимостьНаНачалоГодаНУ,
	//|	ЕСТЬNULL(СтоимостьНаНачалоКвартала.СтоимостьОстаток, 0) 
	//|		- ЕСТЬNULL(СтоимостьНаНачалоКвартала.АмортизацияОстаток, 0)               КАК СтоимостьНаНачалоКвартала,
	|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0)                              КАК ТекущийОбъемПродукцииРабот,
	|	ГрафикиАмортизацииСрезПоследних.ГрафикАмортизации                             КАК ГрафикАмортизации,
	|	СпособыОтраженияРасходовПоАмортизацииБУ.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации,
	|	ПараметрыАмортизацииСрезПоследних.СрокИспользованияДляВычисленияАмортизации   КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииСрезПоследнихНУ.СрокИспользованияДляВычисленияАмортизации   КАК СрокИспользованияДляВычисленияАмортизацииНУ,
	|	ВЫБОР
	|		КОГДА СписокАмортизируемыхОС.СпособНачисленияАмортизации В (&СписокУпрощенныхМетодов)
	|			ТОГДА ПараметрыАмортизацииДляМалоценных.СтоимостьДляВычисленияАмортизации
	|		ИНАЧЕ ПараметрыАмортизацииСрезПоследних.СтоимостьДляВычисленияАмортизации
	|	КОНЕЦ                                                                         КАК СтоимостьДляВычисленияАмортизации,
	|	ВЫБОР
	|		КОГДА СписокАмортизируемыхОС.СпособНачисленияАмортизации В (&СписокУпрощенныхМетодов)
	|			ТОГДА ПараметрыАмортизацииДляМалоценныхНУ.СтоимостьДляВычисленияАмортизации
	|		ИНАЧЕ ПараметрыАмортизацииСрезПоследнихНУ.СтоимостьДляВычисленияАмортизации
	|	КОНЕЦ                                                                         КАК СтоимостьДляВычисленияАмортизацииНУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.ЛиквидационнаяСтоимость, 0)        КАК ЛиквидационнаяСтоимость,
	|	ПараметрыАмортизацииСрезПоследних.Период                                      КАК Период,
	|	ПараметрыАмортизацииСрезПоследнихНУ.Период                                    КАК ПериодНУ,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета                                          КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации                          КАК СчетНачисленияАмортизации,
	|	СостоянияОС.ДатаСостояния                                                     КАК ДатаВводаВЭксплуатацию,
	|	МестонахождениеОС.Местонахождение                                             КАК Местонахождение,
	|	НалоговыеНазначенияОС.НалоговоеНазначение                                     КАК НалоговоеНазначение,
	|	ЕСТЬNULL(СписокАмортизируемыхОС.НачислятьАмортизациюНУ, ЛОЖЬ)                 КАК НачислятьАмортизациюНУ,
	|	ЕСТЬNULL(СписокАмортизируемыхОС.НачислятьАмортизациюНУНаКонец, ЛОЖЬ)          КАК НачислятьАмортизациюНУНаКонец
	|ИЗ
	|	СписокАмортизируемыхОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.СтоимостьОСБухгалтерскийУчет.Остатки(&ГраницаКонецПериода,
	|		                  Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК СтоимостьОС
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.СтоимостьОСБухгалтерскийУчет.Обороты(&ГраницаНачалоПериода, &ГраницаКонецПериода, ,
	|		                  Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК Амортизация
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = Амортизация.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, 
	|		                Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК ГрафикиАмортизацииСрезПоследних
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ГрафикиАмортизацииСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		                &КонецПериода, Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)
	|		                ) КАК СпособыОтраженияРасходовПоАмортизацииБУ
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииБУ.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ВыработкаОС.Обороты(&НачалоПериода, &КонецПериода, ,
	|		                  ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК ВыработкаОСОбороты
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство И СписокАмортизируемыхОС.ПараметрВыработки = ВыработкаОСОбороты.ПараметрВыработки
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ГраницаНачалоПериода,
	|		                Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК ПараметрыАмортизацииСрезПоследних
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ПараметрыАмортизацииСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ГраницаКонецПериода,
	|		                Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК ПараметрыАмортизацииДляМалоценных
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ПараметрыАмортизацииДляМалоценных.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&ГраницаНачалоПериода,
	|	                    Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК ПараметрыАмортизацииСрезПоследнихНУ
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ПараметрыАмортизацииСрезПоследнихНУ.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&ГраницаКонецПериода,
	|		                Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК ПараметрыАмортизацииДляМалоценныхНУ
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ПараметрыАмортизацииДляМалоценныхНУ.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.НалоговыеНазначенияОС.СрезПоследних(&ГраницаКонецПериода,
	|		                Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК НалоговыеНазначенияОС
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = НалоговыеНазначенияОС.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&КонецПериода,
	|		                Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК СчетаБухгалтерскогоУчетаОС
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.СтоимостьОСБухгалтерскийУчет.Остатки(&НачалоГода,
	|		                  Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)
	|		                  ) КАК СтоимостьНаНачалоГода
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = СтоимостьНаНачалоГода.ОсновноеСредство
	//|	ЛЕВОЕ СОЕДИНЕНИЕ
	//|		РегистрНакопления.СтоимостьОСБухгалтерскийУчет.Остатки(&НачалоКвартала,
	//|		                  Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)
	//|		                  ) КАК СтоимостьНаНачалоКвартала
	//|	ПО СписокАмортизируемыхОС.ОсновноеСредство = СтоимостьНаНачалоКвартала.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
	|		ПО СписокАмортизируемыхОС.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|			И (СостоянияОС.Организация = &Организация)
	|			И (СостоянияОС.Состояние = &СостояниеВвода)
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(&ГраницаНачалоПериода,
	|			Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК НачислениеАмортизацииОСНалоговыйУчетСрезПоследних
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			                &КонецПериода, Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК МестонахождениеОС
	|		ПО СписокАмортизируемыхОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СписокОСПринятыхВТекущемМесяце.ОсновноеСредство 								КАК ОсновноеСредство,
	|	СписокОСПринятыхВТекущемМесяце.ОсновноеСредство.Код                             КАК Код,
	|	СписокОСПринятыхВТекущемМесяце.ОсновноеСредство.ПодлежитАмортизации             КАК ПодлежитАмортизации,
	|	Истина                           												КАК НачислятьАмортизациюНаНачало,
	|	ПервоначальныеСведения.СпособНачисленияАмортизации                            	КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведения.ИнвентарныйНомер                            			  	КАК ИнвентарныйНомер,
	|	0                   															КАК АмортизацияКонечныйОстаток,
	|	ПараметрыАмортизации.СтоимостьДляВычисленияАмортизации							КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(Амортизация.АмортизацияОборот, 0)                                    	КАК АмортизацияОборот,
	|	0                   															КАК СтоимостьНаНачалоГода,
	|	0											                                    КАК АмортизацияКонечныйОстатокНУ,
	|	ПараметрыАмортизацииНУ.СтоимостьДляВычисленияАмортизации						КАК СтоимостьКонечныйОстатокНУ,
	|	ЕСТЬNULL(Амортизация.АмортизацияНУОборот, 0)                                    КАК АмортизацияОборотНУ,
	|	0                   															КАК СтоимостьНаНачалоГодаНУ,
	//|	0                   															КАК СтоимостьНаНачалоКвартала,
	|	ЕСТЬNULL(ВыработкаОС.КоличествоОборот, 0)                              			КАК ТекущийОбъемПродукцииРабот,
	|	NULL                             												КАК ГрафикАмортизации,
	|	СпособыОтраженияРасходов.СпособыОтраженияРасходовПоАмортизации 					КАК СпособыОтраженияРасходовПоАмортизации,
	|	ПараметрыАмортизации.СрокИспользованияДляВычисленияАмортизации   				КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииНУ.СрокИспользованияДляВычисленияАмортизации   				КАК СрокИспользованияДляВычисленияАмортизацииНУ,
	|	ПараметрыАмортизации.СтоимостьДляВычисленияАмортизации							КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииНУ.СтоимостьДляВычисленияАмортизации						КАК СтоимостьДляВычисленияАмортизацииНУ,
	|	ЕСТЬNULL(ПараметрыАмортизации.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) 	КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизации.ЛиквидационнаяСтоимость, 0)        				КАК ЛиквидационнаяСтоимость,
	|	ПараметрыАмортизации.Период                                      				КАК Период,
	|	ПараметрыАмортизацииНУ.Период                                      				КАК ПериодНУ,
	|	СчетаБухгалтерскогоУчета.СчетУчета                                          	КАК СчетУчета,
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации                          	КАК СчетНачисленияАмортизации,
	|	NULL                             												КАК ДатаВводаВЭксплуатацию,
	|	МестонахождениеОС.Местонахождение                                             	КАК Местонахождение,
	|	НалоговыеНазначенияОС.НалоговоеНазначение                                       КАК НалоговоеНазначение,
	|	ЕСТЬNULL(НачислениеАмортизацииНУ.НачислятьАмортизацию, ЛОЖЬ)        			КАК НачислятьАмортизациюНУ,
	|	ЕСТЬNULL(НачислениеАмортизацииНУ.НачислятьАмортизацию, ЛОЖЬ)        			КАК НачислениеАмортизацииНУНаКонец
	|ИЗ
	|	СписокОСПринятыхВТекущемМесяце
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПервых(
	|		            &НачалоПериода,
	|		            Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)
	|		            ) КАК ПервоначальныеСведения
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрНакопления.ВыработкаОС.Обороты(
	|			                  &НачалоПериода,
	|			                  &КонецПериода, ,
	|			                  ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК ВыработкаОС
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
	|			И ПервоначальныеСведения.ПараметрВыработки = ВыработкаОС.ПараметрВыработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПервых(
	|	                    &НачалоПериода,
	|	                    Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК ПараметрыАмортизации
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = ПараметрыАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПервых(
	|	                    &НачалоПериода,
	|	                    Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК ПараметрыАмортизацииНУ
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = ПараметрыАмортизацииНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.НалоговыеНазначенияОС.СрезПоследних(&ГраницаКонецПериода,
	|		                Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК НалоговыеНазначенияОС
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = НалоговыеНазначенияОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(&ГраницаКонецПериода,
	|			Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК НачислениеАмортизацииНУ
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = НачислениеАмортизацииНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.СтоимостьОСБухгалтерскийУчет.Обороты(&ГраницаНачалоПериода, &ГраницаКонецПериода, ,
	|		   	               Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК Амортизация
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = Амортизация.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПервых(
	|		                    &НачалоПериода,
	|		                    Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК СпособыОтраженияРасходов
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = СпособыОтраженияРасходов.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПервых(
	|		                    &НачалоПериода,
	|		                    Организация = &Организация
	|		                    И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК СчетаБухгалтерскогоУчета
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = СчетаБухгалтерскогоУчета.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПервых(
	|			                &НачалоПериода, Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК МестонахождениеОС
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	| ГДЕ ПервоначальныеСведения.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Производственный)
	|";
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТипГодовой  = Тип ("СправочникСсылка.ГодовыеГрафикиАмортизацииОС");

	ТаблицаГрафиков = ПолучитьТаблицуГрафиков();

	Пока ВыборкаПоОС.Следующий() Цикл

		ТекстСообщения = "Бух. расчет амортизации: для основного средства " + СокрЛП(ВыборкаПоОС.ОсновноеСредство)
		               + " (" + СокрЛП(ВыборкаПоОС.Код) + "), инв. № " + СокрЛП(ВыборкаПоОС.ИнвентарныйНомер);
					   
		ТекстСообщенияОС = "Бух. расчет амортизации: основное средство " + СокрЛП(ВыборкаПоОС.ОсновноеСредство)
		               + " (" + СокрЛП(ВыборкаПоОС.Код) + "), инв. № " + СокрЛП(ВыборкаПоОС.ИнвентарныйНомер);
					   
		Если НЕ ВыборкаПоОС.ПодлежитАмортизации Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияОС + " не подлежит амортизации!"
								   + Символы.ПС + Символы.Таб 
								   + "(Не установлен соответствующий флаг в элементе справочника ""Основные средства"")");
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ВыборкаПоОС.НачислятьАмортизациюНаНачало <> Истина 
			И ВыборкаПоОС.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС._50_50
			И ВыборкаПоОС.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС._100 
			И НЕ ВыборкаПоОС.НачислятьАмортизациюНУ 
			Тогда
		
			// Для всех способов кроме 50-50 и 100 начисление амортизации должно быть "включено" на начала месяца.
			Продолжить;
		
		КонецЕсли; 

		Если (ВыборкаПоОС.АмортизацияОборот <> 0) И (ВыборкаПоОС.АмортизацияОборот <> Null) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьИнформацию(ТекстСообщения + " амортизация в этом месяце уже начислялась");
				
			КонецЕсли;
			
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " не указан способ амортизации",
								 Отказ);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;

		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС._50_50
			ИЛИ ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС._100 Тогда

	 		НачислятьАмортизацию 	= Истина;
			НачислятьАмортизациюНУ 	= ВыборкаПоОС.НачислятьАмортизациюНУНаКонец;
			
		Иначе	
	 		НачислятьАмортизацию 	= ВыборкаПоОС.НачислятьАмортизациюНаНачало;
			НачислятьАмортизациюНУ 	= ВыборкаПоОС.НачислятьАмортизациюНУ;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) И НачислятьАмортизацию Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " стоимость равна 0",
								 Отказ);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизацииНУ) И НачислятьАмортизациюНУ Тогда
			
			НачислятьАмортизациюНУ = Ложь;	
			
		КонецЕсли;	
		
		СуммаАмортизации = 0;
		СуммаАмортизацииНУ = 0;
		
		Метод_50_50      = Ложь;
		
		
		СтоимостьДляВычисленияАмортизации 			= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации);
		ЛиквидационнаяСтоимость						= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.ЛиквидационнаяСтоимость);
		АмортизируемаяСтоимость	 					= СтоимостьДляВычисленияАмортизации - ЛиквидационнаяСтоимость;
		
		СрокИспользованияДляВычисленияАмортизации	= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации);
		
		СтоимостьДляВычисленияАмортизацииНУ 		= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.СтоимостьДляВычисленияАмортизацииНУ);
		АмортизируемаяСтоимостьНУ	 				= СтоимостьДляВычисленияАмортизацииНУ - ЛиквидационнаяСтоимость;
		
		СрокИспользованияДляВычисленияАмортизацииНУ	= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизацииНУ);
		
		ТекущийОбъемПродукцииРабот					= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.ТекущийОбъемПродукцииРабот);
		ОбъемПродукцииРаботДляВычисленияАмортизации	= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации);
		
		АмортизацияКонечныйОстаток					= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.АмортизацияКонечныйОстаток);
		СтоимостьКонечныйОстаток					= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.СтоимостьКонечныйОстаток);
		ОстаточнаяСтоимость                         = СтоимостьКонечныйОстаток - АмортизацияКонечныйОстаток;
		
		АмортизацияКонечныйОстатокНУ				= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.АмортизацияКонечныйОстатокНУ);
		СтоимостьКонечныйОстатокНУ					= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.СтоимостьКонечныйОстатокНУ);
		ОстаточнаяСтоимостьНУ                       = СтоимостьКонечныйОстатокНУ - АмортизацияКонечныйОстатокНУ;
		
		ДатаВводаВЭксплуатацию                      = ВыборкаПоОС.ДатаВводаВЭксплуатацию;
		
		Если ВыборкаПоОС.ДатаВводаВЭксплуатацию = NULL Тогда
	    	ДатаВводаВЭксплуатациюНУ 				= NULL;
		Иначе	
			ДатаВводаВЭксплуатациюНУ 				= Макс(ВыборкаПоОС.ДатаВводаВЭксплуатацию, '20110331');
		КонецЕсли;	
		
		Если (ЛиквидационнаяСтоимость <> 0) 
		   И (ЛиквидационнаяСтоимость >= ОстаточнаяСтоимость) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьИнформацию(Локализация.СтрШаблон(НСтр("ru='Бух. расчет амортизации: остаточная стоимость основного средства ¤1¤ достигла ликвидационной <¤2¤>, амортизация не начислена.';uk='Бух. розрахунок амортизації: залишкова вартість основного засобу ¤1¤ досягла ліквідаційної <¤2¤>, амортизація не нарахована.'"), ВыборкаПоОС.ОсновноеСредство, ЛиквидационнаяСтоимость));
				
			КонецЕсли;
			
            Продолжить;
			
		КонецЕсли;
		
		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный Тогда

			Если НачислятьАмортизацию Тогда 
				
				Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
										 + ВыборкаПоОС.СпособНачисленияАмортизации 
										 + " не указан срок полезного использования!", 
										 Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				СуммаГодовойАмортизации = АмортизируемаяСтоимость / СрокИспользованияДляВычисленияАмортизации * 12;

				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
					
					СуммаАмортизации   = СуммаГодовойАмортизации / 12;

				Иначе
					
					КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, 
					                                                                 ВыборкаПоОС.ГрафикАмортизации, 
																					 ДатаРасчета,
																					 ТипГодовой);
					СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;

				КонецЕсли;
				
			КонецЕсли;	

			Если НачислятьАмортизациюНУ Тогда 
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
										 + ВыборкаПоОС.СпособНачисленияАмортизации 
										 + " не указан срок полезного использования (НУ)!", 
										 Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				СуммаГодовойАмортизацииНУ = АмортизируемаяСтоимостьНУ / СрокИспользованияДляВычисленияАмортизацииНУ * 12;

				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
					
					СуммаАмортизацииНУ   = СуммаГодовойАмортизацииНУ / 12;

				Иначе
					
					КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, 
					                                                                 ВыборкаПоОС.ГрафикАмортизации, 
																					 ДатаРасчета,
																					 ТипГодовой);
					СуммаАмортизацииНУ        = СуммаГодовойАмортизацииНУ * КоэффициентАмортизации;

				КонецЕсли;
				
			КонецЕсли;	
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда

			Если ОбъемПродукцииРаботДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
									 + ВыборкаПоОС.СпособНачисленияАмортизации 
									 + " не указан предполагаемый объем выработки!",
									 Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			СуммаАмортизации = АмортизируемаяСтоимость * ТекущийОбъемПродукцииРабот / ОбъемПродукцииРаботДляВычисленияАмортизации;
			
			СуммаАмортизацииНУ = АмортизируемаяСтоимостьНУ * ТекущийОбъемПродукцииРабот / ОбъемПродукцииРаботДляВычисленияАмортизации;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка Тогда

			Если ЛиквидационнаяСтоимость = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
									 + ВыборкаПоОС.СпособНачисленияАмортизации 
									 + " не указана ликвидационная стоимость!", 
									 Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
									 + ВыборкаПоОС.СпособНачисленияАмортизации 
									 + " не указан срок полезного использования!", 
									 Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
				
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
				
			Иначе
				
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
				
			КонецЕсли;
			
			СтоимостьИтоговая = ОбщегоНазначения.ПреобразоватьВЧисло(СтоимостьИтоговая);
			
 			Если ДатаВводаВЭксплуатацию = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Бух. расчет амортизации: для основного средства ¤1¤ при расчете по способу ¤2¤ не определилась дата ввода в эксплуатацию!';uk='Бух. розрахунок амортизації: для основного засобу ¤1¤ при розрахунку способом ¤2¤ не визначилася дата уведення в експлуатацію!'"),
					                           ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации), Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			РазностьЛет = Год(ДатаРасчета) - Год(ДатаВводаВЭксплуатацию);
			
			Если РазностьЛет > 0 Тогда
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации 
				                                   - РазностьЛет * 12
				                                   + Месяц(ДатаВводаВЭксплуатацию)
												   
			ИначеЕсли СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации;
												   
			Иначе
				
				ОсталосьЭксплуатироватьВЭтомГоду = 0;
												   
			КонецЕсли;
													   
			Если (ОсталосьЭксплуатироватьВЭтомГоду < 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
				
				// Последний год применяем прямолинейный метод
				
				СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
				
			ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
				
				СуммаГодовойАмортизации = СтоимостьИтоговая * (1 - Pow(ЛиквидационнаяСтоимость / СтоимостьДляВычисленияАмортизации,
				                                                       12 / СрокИспользованияДляВычисленияАмортизации));
																	   
			Иначе // Срок использования исчерпан
				
				СуммаГодовойАмортизации = 0;
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(Локализация.СтрШаблон(НСтр("ru='Бух. расчет амортизации: для основного средства ¤1¤ при расчете по способу ¤2¤ срок использования исчерпан!';uk='Бух. розрахунок амортизації: для основного засобу ¤1¤ при розрахунку способом ¤2¤ строк використання вичерпаний!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации));
					
				КонецЕсли;
				
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
				
			Иначе
				
				КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков,
				                                                                 ВыборкаПоОС.ГрафикАмортизации,
																				 ДатаРасчета,
																				 ТипГодовой);
				СуммаАмортизации       = СуммаГодовойАмортизации * КоэффициентАмортизации;
				
			КонецЕсли;

			Если НачислятьАмортизациюНУ Тогда
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
										 + ВыборкаПоОС.СпособНачисленияАмортизации 
										 + " не указан срок полезного использования (НУ)!", 
										 Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				Если Год(ВыборкаПоОС.ПериодНУ) = Год(ДатаРасчета) Тогда
					
					СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизацииНУ;
					
				Иначе
					
					СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГодаНУ;
					
				КонецЕсли;
				
				СтоимостьИтоговая = ОбщегоНазначения.ПреобразоватьВЧисло(СтоимостьИтоговая);
				
	 			Если ДатаВводаВЭксплуатациюНУ = NULL Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Нал. расчет амортизации: для основного средства ¤1¤ при расчете по способу ¤2¤ не определилась дата ввода в эксплуатацию!';uk='Бух. розрахунок амортизації: для основного засобу ¤1¤ при розрахунку способом ¤2¤ не визначилася дата уведення в експлуатацію!'"),
						                           ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации), Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				РазностьЛет = Год(ДатаРасчета) - Год(ДатаВводаВЭксплуатациюНУ);
				
				Если РазностьЛет > 0 Тогда
					
					ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизацииНУ 
					                                   - РазностьЛет * 12
					                                   + Месяц(ДатаВводаВЭксплуатациюНУ)
													   
				ИначеЕсли СрокИспользованияДляВычисленияАмортизацииНУ < 12 Тогда											   
					
					ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизацииНУ;
													   
				Иначе
					
					ОсталосьЭксплуатироватьВЭтомГоду = 0;
													   
				КонецЕсли;
														   
				Если (ОсталосьЭксплуатироватьВЭтомГоду < 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
					
					// Последний год применяем прямолинейный метод
					
					СуммаГодовойАмортизацииНУ = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
					
				ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
					
					СуммаГодовойАмортизацииНУ = СтоимостьИтоговая * (1 - Pow(ЛиквидационнаяСтоимость / СтоимостьДляВычисленияАмортизацииНУ,
					                                                       12 / СрокИспользованияДляВычисленияАмортизацииНУ));
																		   
				Иначе // Срок использования исчерпан
					
					СуммаГодовойАмортизацииНУ = 0;
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(Локализация.СтрШаблон(НСтр("ru='Нал. расчет амортизации: для основного средства ¤1¤ при расчете по способу ¤2¤ срок использования исчерпан!';uk='Бух. розрахунок амортизації: для основного засобу ¤1¤ при розрахунку способом ¤2¤ строк використання вичерпаний!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации));
						
					КонецЕсли;
					
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
					
					СуммаАмортизацииНУ   = СуммаГодовойАмортизацииНУ / 12;
					
				Иначе
					
					КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков,
					                                                                 ВыборкаПоОС.ГрафикАмортизации,
																					 ДатаРасчета,
																					 ТипГодовой);
					СуммаАмортизацииНУ       = СуммаГодовойАмортизацииНУ * КоэффициентАмортизации;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка Тогда
			
			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
									 + ВыборкаПоОС.СпособНачисленияАмортизации 
									 + " не указан срок полезного использования!", 
									 Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			Если СрокИспользованияДляВычисленияАмортизации <= 24 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Бух. расчет амортизации: для основного средства ¤1¤ при расчете по способу ¤2¤ указан срок полезного использования <¤3¤> мес.!"
					"Для корректного начисления амортизации срок использования должен быть более 24 месяца.';uk='Бух. розрахунок амортизації: для основного засобу ¤1¤ при розрахунку способом ¤2¤ зазначений строк корисного використання <¤3¤> міс.!"
					"Для коректного нарахування амортизації строк використання повинен бути більше 24 місяців.'"),
					ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации, СрокИспользованияДляВычисленияАмортизации),);
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
				
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
				
			Иначе
				
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
				
			КонецЕсли;
			
			СтоимостьИтоговая = ОбщегоНазначения.ПреобразоватьВЧисло(СтоимостьИтоговая);
			
			Если ДатаВводаВЭксплуатацию = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Бух. расчет амортизации: для основного средства ¤1¤ при расчете по способу ¤2¤ не определилась дата ввода в эксплуатацию!';uk='Бух. розрахунок амортизації: для основного засобу ¤1¤ при розрахунку способом ¤2¤ не визначилася дата уведення в експлуатацію!'"),
					                           ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации), Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			РазностьЛет = Год(ДатаРасчета) - Год(ДатаВводаВЭксплуатацию);
			
			Если РазностьЛет > 0 Тогда
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации 
				                                   - РазностьЛет * 12
				                                   + Месяц(ДатаВводаВЭксплуатацию)
												   
			ИначеЕсли СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации;
												   
			Иначе
				
				ОсталосьЭксплуатироватьВЭтомГоду = 0;
												   
			КонецЕсли;
			
			Если (ОсталосьЭксплуатироватьВЭтомГоду <= 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
				
				// Последний год применяем прямолинейный метод
				
				СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
				
			ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
				
				СуммаГодовойАмортизации = 2 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / СрокИспользованияДляВычисленияАмортизации * 12;
				
			Иначе // Срок использования исчерпан
				
				СуммаГодовойАмортизации = 0;
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(Локализация.СтрШаблон(НСтр("ru='Бух. расчет амортизации: для основного средства ¤1¤ при расчете по способу ¤2¤ срок использования исчерпан!';uk='Бух. розрахунок амортизації: для основного засобу ¤1¤ при розрахунку способом ¤2¤ строк використання вичерпаний!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации));
					
				КонецЕсли;
			
			КонецЕсли;
			
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
				
			Иначе
				
				КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков,
				                                                                 ВыборкаПоОС.ГрафикАмортизации,
																				 ДатаРасчета,
																				 ТипГодовой);
				СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;
				
			КонецЕсли;
			
			
			Если НачислятьАмортизациюНУ Тогда
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
										 + ВыборкаПоОС.СпособНачисленияАмортизации 
										 + " не указан срок полезного использования (НУ)!", 
										 Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ <= 24 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Нал. расчет амортизации: для основного средства ¤1¤ при расчете по способу ¤2¤ указан срок полезного использования <¤3¤> мес.!"
						"Для корректного начисления амортизации срок использования должен быть более 24 месяца.';uk='Бух. розрахунок амортизації: для основного засобу ¤1¤ при розрахунку способом ¤2¤ зазначений строк корисного використання <¤3¤> міс.!"
						"Для коректного нарахування амортизації строк використання повинен бути більше 24 місяців.'"),
						ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации, СрокИспользованияДляВычисленияАмортизацииНУ),);
						
					КонецЕсли;
					
				КонецЕсли; 
				
				Если Год(ВыборкаПоОС.ПериодНУ) = Год(ДатаРасчета) Тогда
					
					СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизацииНУ;
					
				Иначе
					
					СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГодаНУ;
					
				КонецЕсли;
				
				СтоимостьИтоговая = ОбщегоНазначения.ПреобразоватьВЧисло(СтоимостьИтоговая);
				
				Если ДатаВводаВЭксплуатациюНУ = NULL Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Нал. расчет амортизации: для основного средства ¤1¤ при расчете по способу ¤2¤ не определилась дата ввода в эксплуатацию!';uk='Бух. розрахунок амортизації: для основного засобу ¤1¤ при розрахунку способом ¤2¤ не визначилася дата уведення в експлуатацію!'"),
						                           ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации), Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				РазностьЛет = Год(ДатаРасчета) - Год(ДатаВводаВЭксплуатациюНУ);
				
				Если РазностьЛет > 0 Тогда
					
					ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизацииНУ 
					                                   - РазностьЛет * 12
					                                   + Месяц(ДатаВводаВЭксплуатациюНУ)
													   
				ИначеЕсли СрокИспользованияДляВычисленияАмортизацииНУ < 12 Тогда											   
					
					ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизацииНУ;
													   
				Иначе
					
					ОсталосьЭксплуатироватьВЭтомГоду = 0;
													   
				КонецЕсли;
				
				Если (ОсталосьЭксплуатироватьВЭтомГоду <= 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
					
					// Последний год применяем прямолинейный метод
					
					СуммаГодовойАмортизацииНУ = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
					
				ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
					
					СуммаГодовойАмортизацииНУ = 2 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / СрокИспользованияДляВычисленияАмортизацииНУ * 12;
					
				Иначе // Срок использования исчерпан
					
					СуммаГодовойАмортизацииНУ = 0;
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(Локализация.СтрШаблон(НСтр("ru='Нал. расчет амортизации: для основного средства ¤1¤ при расчете по способу ¤2¤ срок использования исчерпан!';uk='Бух. розрахунок амортизації: для основного засобу ¤1¤ при розрахунку способом ¤2¤ строк використання вичерпаний!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации));
						
					КонецЕсли;
				
				КонецЕсли;
				
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
					
					СуммаАмортизацииНУ   = СуммаГодовойАмортизацииНУ / 12;
					
				Иначе
					
					КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков,
					                                                                 ВыборкаПоОС.ГрафикАмортизации,
																					 ДатаРасчета,
																					 ТипГодовой);
					СуммаАмортизацииНУ        = СуммаГодовойАмортизацииНУ * КоэффициентАмортизации;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный Тогда

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
									 + ВыборкаПоОС.СпособНачисленияАмортизации 
									 + " не указан срок полезного использования!", 
									 Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			Если ДатаВводаВЭксплуатацию = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьИнформацию(ТекстСообщения + " при расчете по способу " 
									   + ВыборкаПоОС.СпособНачисленияАмортизации 
									   +  " не определилась дата ввода в эксплуатацию!");
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			ЧислоЛетПользования       = Макс(1,СрокИспользованияДляВычисленияАмортизации / 12);
			ЧислоЛетПользования       = ЧислоЛетПользования + ?(ЧислоЛетПользования 
			                                                    - Цел(ЧислоЛетПользования) = 0, 0, 1); // округляем к наибольшему целому
			
			ГодИспользования          = Год(ДатаРасчета) - Год(ДатаВводаВЭксплуатацию) + 1;
			
			Если Месяц(ДатаВводаВЭксплуатацию) >= Месяц(ДатаРасчета) Тогда
				
				ГодИспользования	  = ГодИспользования - 1;
				
			КонецЕсли; 

			СуммаГодовойАмортизации   = АмортизируемаяСтоимость * (ЧислоЛетПользования - ГодИспользования + 1)
					/ (ЧислоЛетПользования * (ЧислоЛетПользования + 1) / 2 );
										  
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				
				СуммаАмортизации = СуммаГодовойАмортизации / 12;

			Иначе
				
				КоэффициентАмортизации  = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков,
				                                                                  ВыборкаПоОС.ГрафикАмортизации,
																				  ДатаРасчета,
																				  ТипГодовой);
				СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;

			КонецЕсли;
			
			Если НачислятьАмортизациюНУ Тогда
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
										 + ВыборкаПоОС.СпособНачисленияАмортизации 
										 + " не указан срок полезного использования (НУ)!", 
										 Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				Если ДатаВводаВЭксплуатациюНУ = NULL Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьИнформацию(ТекстСообщения + " при расчете по способу " 
										   + ВыборкаПоОС.СпособНачисленияАмортизации 
										   +  " не определилась дата ввода в эксплуатацию!");
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;

				ЧислоЛетПользования       = Макс(1,СрокИспользованияДляВычисленияАмортизацииНУ / 12);
				ЧислоЛетПользования       = ЧислоЛетПользования + ?(ЧислоЛетПользования 
				                                                    - Цел(ЧислоЛетПользования) = 0, 0, 1); // округляем к наибольшему целому
				
				ГодИспользования          = Год(ДатаРасчета) - Год(ДатаВводаВЭксплуатациюНУ) + 1;
				
				Если Месяц(ДатаВводаВЭксплуатациюНУ) >= Месяц(ДатаРасчета) Тогда
					
					ГодИспользования	  = ГодИспользования - 1;
					
				КонецЕсли; 

				СуммаГодовойАмортизацииНУ   = АмортизируемаяСтоимостьНУ * (ЧислоЛетПользования - ГодИспользования + 1)
						/ (ЧислоЛетПользования * (ЧислоЛетПользования + 1) / 2 );
											  
				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
					
					СуммаАмортизацииНУ = СуммаГодовойАмортизацииНУ / 12;

				Иначе
					
					КоэффициентАмортизации  = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков,
					                                                                  ВыборкаПоОС.ГрафикАмортизации,
																					  ДатаРасчета,
																					  ТипГодовой);
					СуммаАмортизацииНУ        = СуммаГодовойАмортизацииНУ * КоэффициентАмортизации;

				КонецЕсли;
				
			КонецЕсли;

			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС._50_50 Тогда
			
			Если АмортизацияКонечныйОстаток = 0 Тогда
				
				// При первом начислении амортизации (при вводе в эксплуатацию) - 50%
				// Оставшиеся 50% будут начислены в документах списания
				СуммаАмортизации = АмортизируемаяСтоимость / 2;
				
				
			КонецЕсли;
			
			
			Если АмортизацияКонечныйОстатокНУ = 0 Тогда
				
				// При первом начислении амортизации (при вводе в эксплуатацию) - 50%
				// Оставшиеся 50% будут начислены в документах списания
				СуммаАмортизацииНУ = АмортизируемаяСтоимостьНУ / 2;
				
			КонецЕсли;
			
			Метод_50_50 = Истина;
			
			ЛиквидационнаяСтоимость = 0;
				
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС._100 Тогда

			// При первом же начислении амортизации - 100%
			// Стоимость всегда должна быть полностью амортизирована
			СуммаАмортизации = ОстаточнаяСтоимость;
			
			СуммаАмортизацииНУ = ОстаточнаяСтоимостьНУ;
			
			
			Если СуммаАмортизации <= 0 И СуммаАмортизацииНУ <= 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЛиквидационнаяСтоимость = 0;
			
		Иначе 
			
			Если ВыдаватьСообщения  Тогда
			
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения 
								 + " установлен способ расчета амортизации, не поддерживаемый в регламентированном учете (" 
								 + ВыборкаПоОС.СпособНачисленияАмортизации +  ")!", 
								 Отказ);
			
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;

		Если НачислятьАмортизацию Тогда
			СуммаАмортизации = Макс(0, Мин(СуммаАмортизации, ОстаточнаяСтоимость - ЛиквидационнаяСтоимость));
		Иначе
			СуммаАмортизации = 0;
		КонецЕсли;

		Если НачислятьАмортизациюНУ Тогда
			СуммаАмортизацииНУ = Макс(0, Мин(СуммаАмортизацииНУ, ОстаточнаяСтоимостьНУ - ЛиквидационнаяСтоимость));
		Иначе	
			СуммаАмортизацииНУ = 0;
		КонецЕсли;	
		
		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОбъектУчета            = ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоОС.СпособыОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.НалоговоеНазначение 	 = ВыборкаПоОС.НалоговоеНазначение;
		СтрокаАмортизации.Местонахождение 		 = ВыборкаПоОС.Местонахождение;
    	СтрокаАмортизации.СчетУчета	             = ВыборкаПоОС.СчетУчета;
    	СтрокаАмортизации.СчетАмортизации	     = ВыборкаПоОС.СчетНачисленияАмортизации;
    	СтрокаАмортизации.Амортизация            = СуммаАмортизации;
    	СтрокаАмортизации.АмортизацияНУ          = СуммаАмортизацииНУ;
		СтрокаАмортизации.ИмяСубконто            = "ОсновныеСредства";
    	СтрокаАмортизации.Метод_50_50            = Метод_50_50;
		

		
		Если СуммаАмортизации = 0 И ВыдаватьСообщения И Не Метод_50_50 Тогда
			
			ОбщегоНазначения.СообщитьИнформацию(ТекстСообщения + " амортизация равна 0");
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииРегл()


// Расчитывает сумму амортизации по указаному основному средству по упр учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииУпр(ДатаРасчета,ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина, Отказ = Ложь) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета");
	ТаблицаАмортизации.Колонки.Добавить("Амортизация", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", 	Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Местонахождение", 			Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТаблицаАмортизации.Колонки.Добавить("Метод_50_50"			, 	Новый ОписаниеТипов("Булево"));

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоГода",    		НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоКвартала",		НачалоКвартала(ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  		КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("ОсновноеСредство", 	ОсновноеСредство);
	
	СписокУпрощенныхМетодов = Новый Массив(2);
	СписокУпрощенныхМетодов[0] = Перечисления.СпособыНачисленияАмортизацииОС._100;
	СписокУпрощенныхМетодов[1] = Перечисления.СпособыНачисленияАмортизацииОС._50_50;
	Запрос.УстановитьПараметр("СписокУпрощенныхМетодов", СписокУпрощенныхМетодов);
	Запрос.УстановитьПараметр("СостояниеВвода", Перечисления.СостоянияОС.ВведеноВЭксплуатацию);	
	
	УсловиеПоОС = ?( ОсновноеСредство = Неопределено, "", " ОсновноеСредство В (&ОсновноеСредство) ");

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство                     КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОССрезПоследних.ПараметрВыработки                    КАК ПараметрВыработки,
	|	ПервоначальныеСведенияОССрезПоследних.СпособНачисленияАмортизации          КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОССрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость
	|ПОМЕСТИТЬ
	|   ПервоначальныеСведенияОССрезПоследних
	|ИЗ	
	|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&КонецПериода, " + УсловиеПоОС + ") КАК ПервоначальныеСведенияОССрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииСрезПервых.ОсновноеСредство                   КАК ОсновноеСредство,
	|	НачислениеАмортизацииСрезПервых.НачислятьАмортизацию               КАК НачислятьАмортизацию,
	|	НачислениеАмортизацииСрезПервых.НачислятьАмортизациюВТекущемМесяце КАК НачислятьАмортизациюВТекущемМесяце,
	|	НачислениеАмортизацииСрезПервых.Период                             КАК Период
	|ПОМЕСТИТЬ
	|   СрезПервых
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОС.СрезПоследних(&НачалоПериода, " + УсловиеПоОС + ") КАК НачислениеАмортизацииСрезПервых
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииСрезПоследних.ОсновноеСредство                   КАК ОсновноеСредство,
	|	НачислениеАмортизацииСрезПоследних.НачислятьАмортизацию               КАК НачислятьАмортизацию,
	|	НачислениеАмортизацииСрезПоследних.НачислятьАмортизациюВТекущемМесяце КАК НачислятьАмортизациюВТекущемМесяце,
	|	НачислениеАмортизацииСрезПоследних.Период                             КАК Период
	|ПОМЕСТИТЬ
	|   СрезПоследних
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОС.СрезПоследних(&КонецПериода, " + УсловиеПоОС + ") КАК НачислениеАмортизацииСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство  			КАК ОсновноеСредство,
	|	СрезПервых.НачислятьАмортизацию                         			КАК НачалоНачислятьАмортизацию,
	|	ЕСТЬNULL(СрезПоследних.НачислятьАмортизацию, ЛОЖЬ) 					КАК КонецНачислятьАмортизацию,
	|	ЕСТЬNULL(СрезПоследних.НачислятьАмортизациюВТекущемМесяце, ЛОЖЬ) 	КАК КонецНачислятьВТекущемМесяце
	|ПОМЕСТИТЬ
	|   СписокАмортизируемыхОС
	|ИЗ	
	|	ПервоначальныеСведенияОССрезПоследних
	|	ЛЕВОЕ СОЕДИНЕНИЕ СрезПервых
	|	ПО СрезПервых.ОсновноеСредство = ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СрезПоследних
	|	ПО СрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияОстаткиИОбороты.ОсновноеСредство                                                                                             КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияОстаткиИОбороты.СтоимостьНачальныйОстаток, 0) - ЕСТЬNULL(АмортизацияОстаткиИОбороты.АмортизацияНачальныйОстаток, 0) КАК СтоимостьНаНачалоГода
	|ПОМЕСТИТЬ
	|   АмортизацияОстаткиИОбороты
	|ИЗ
	|	РегистрНакопления.СтоимостьОС.ОстаткиИОбороты(&НачалоГода,,,, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК АмортизацияОстаткиИОбороты
	|;
	|
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияКварталОстаткиИОбороты.ОсновноеСредство                                                                                             КАК ОсновноеСредство,
	|	ЕСТЬNULL(АмортизацияКварталОстаткиИОбороты.СтоимостьНачальныйОстаток, 0) - ЕСТЬNULL(АмортизацияКварталОстаткиИОбороты.АмортизацияНачальныйОстаток, 0) КАК СтоимостьНаНачалоКвартала
	|ПОМЕСТИТЬ
	|   АмортизацияКварталОстаткиИОбороты
	|ИЗ
	|	РегистрНакопления.СтоимостьОС.ОстаткиИОбороты(&НачалоКвартала,,,, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК АмортизацияКварталОстаткиИОбороты
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НормыНалоговойАмортизацииНаНачало.ГруппаОС 							КАК ГруппаОС,
	|	ЕСТЬNULL(НормыНалоговойАмортизацииНаНачало.Норма, 0) 				КАК Норма,
	|	ЕСТЬNULL(СведенияОГруппахНаНачало.МинимальнаяСтоимостьОбъекта, 0) 	КАК МинимальнаяСтоимостьОбъекта
	|ПОМЕСТИТЬ
	|   НалоговыеСведенияГруппОСНаНачало
	|ИЗ	
	| 	РегистрСведений.НормыНалоговойАмортизацииОсновныхСредств.СрезПоследних(&НачалоПериода, ) КАК НормыНалоговойАмортизацииНаНачало
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОГруппахОсновныхСредствНалоговыйУчет.СрезПоследних(&НачалоПериода, ) КАК СведенияОГруппахНаНачало
	|	ПО НормыНалоговойАмортизацииНаНачало.ГруппаОС = СведенияОГруппахНаНачало.ГруппаОС
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НормыНалоговойАмортизации.ГруппаОС 							КАК ГруппаОС,
	|	ЕСТЬNULL(НормыНалоговойАмортизации.Норма, 0) 				КАК Норма,
	|	ЕСТЬNULL(СведенияОГруппах.МинимальнаяСтоимостьОбъекта, 0) 	КАК МинимальнаяСтоимостьОбъекта
	|ПОМЕСТИТЬ
	|   НалоговыеСведенияГруппОС
	|ИЗ	
	| 	РегистрСведений.НормыНалоговойАмортизацииОсновныхСредств.СрезПоследних(&КонецПериода, ) КАК НормыНалоговойАмортизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОГруппахОсновныхСредствНалоговыйУчет.СрезПоследних(&НачалоПериода, ) КАК СведенияОГруппах
	|	ПО НормыНалоговойАмортизации.ГруппаОС = СведенияОГруппах.ГруппаОС
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНУСрезПоследних.ОсновноеСредство 			КАК ОсновноеСредство,
	|	ЕСТЬNULL(НалоговыеСведенияГруппОС.Норма, 0) 						КАК НормаНалоговойАмортизации,
	|	ЕСТЬNULL(НалоговыеСведенияГруппОС.МинимальнаяСтоимостьОбъекта, 0) 	КАК МинимальнаяСтоимостьОбъекта
	|ПОМЕСТИТЬ
	|   ПервоначальныеСведенияОСНУСрезПоследних
	|ИЗ	
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&КонецПериода, " + УсловиеПоОС + ") КАК ПервоначальныеСведенияОСНУСрезПоследних
	|	ЛЕВОЕ СОЕДИНЕНИЕ НалоговыеСведенияГруппОС
	|	ПО ПервоначальныеСведенияОСНУСрезПоследних.НалоговаяГруппаОС = НалоговыеСведенияГруппОС.ГруппаОС
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНУНаНачалоСрезПоследних.ОсновноеСредство 			КАК ОсновноеСредство,
	|	ЕСТЬNULL(НалоговыеСведенияГруппОСНаНачало.Норма, 0) 						КАК НормаНалоговойАмортизации,
	|	ЕСТЬNULL(НалоговыеСведенияГруппОСНаНачало.МинимальнаяСтоимостьОбъекта, 0) 	КАК МинимальнаяСтоимостьОбъекта
	|ПОМЕСТИТЬ
	|   ПервоначальныеСведенияОСНУНаНачалоСрезПоследних
	|ИЗ	
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&НачалоПериода, " + УсловиеПоОС + ") КАК ПервоначальныеСведенияОСНУНаНачалоСрезПоследних
	|	ЛЕВОЕ СОЕДИНЕНИЕ НалоговыеСведенияГруппОСНаНачало
	|	ПО ПервоначальныеСведенияОСНУНаНачалоСрезПоследних.НалоговаяГруппаОС = НалоговыеСведенияГруппОСНаНачало.ГруппаОС
	|;
	|
	|
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтоимостьОС.ОсновноеСредство                        КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОС.АмортизацияКонечныйОстаток, 0) КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьОС.АмортизацияОборот, 0)          КАК АмортизацияОборот,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьКонечныйОстаток, 0)   КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьНачальныйОстаток, 0)  КАК СтоимостьНачальныйОстаток
	|ПОМЕСТИТЬ
	|   СтоимостьОС
	|ИЗ
	|	РегистрНакопления.СтоимостьОС.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК СтоимостьОС
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиАмортизацииСрезПоследних.ОсновноеСредство  КАК ОсновноеСредство,
	|	ГрафикиАмортизацииСрезПоследних.ГрафикАмортизации КАК ГрафикАмортизации                                      
	|ПОМЕСТИТЬ
	|   ГрафикиАмортизацииСрезПоследних
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОС.СрезПоследних(&КонецПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК ГрафикиАмортизацииСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство                      КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ
	|   СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&КонецПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииСрезПоследних.ОсновноеСредство                                         КАК ОсновноеСредство,
	|	ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце                                  КАК ПрименитьВТекущемМесяце,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0)   КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.СтоимостьДляВычисленияАмортизации, 0)           КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.ЛиквидационнаяСтоимость, 0)           		   КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизацииСрезПоследних.Период                                                   КАК Период
	|ПОМЕСТИТЬ
	|   ПараметрыАмортизацииСрезПоследних
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОС.СрезПоследних(&КонецПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК ПараметрыАмортизацииСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиАмортизацииСрезПоследнихНачалоМесяца.ОсновноеСредство  КАК ОсновноеСредство,
	|	ГрафикиАмортизацииСрезПоследнихНачалоМесяца.ГрафикАмортизации КАК ГрафикАмортизации                                      
	|ПОМЕСТИТЬ
	|   ГрафикиАмортизацииСрезПоследнихНачалоМесяца
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОС.СрезПоследних(&НачалоПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК ГрафикиАмортизацииСрезПоследнихНачалоМесяца
	|;
	|
	|
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОССрезПоследних.ОсновноеСредство  	КАК ОсновноеСредство,
	|	МестонахождениеОССрезПоследних.Местонахождение 		КАК Местонахождение                                      
	|ПОМЕСТИТЬ
	|   МестонахождениеОССрезПоследних
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(&КонецПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК МестонахождениеОССрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОССрезПоследнихНачалоМесяца.ОсновноеСредство  	КАК ОсновноеСредство,
	|	МестонахождениеОССрезПоследнихНачалоМесяца.Местонахождение 		КАК Местонахождение                                      
	|ПОМЕСТИТЬ
	|   МестонахождениеОССрезПоследнихНачалоМесяца
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(&НачалоПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК МестонахождениеОССрезПоследнихНачалоМесяца
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство  	КАК ОсновноеСредство,
	|	СостоянияОС.ДатаСостояния 		КАК ДатаСостояния                                      
	|ПОМЕСТИТЬ
	|   СостоянияОС
	|ИЗ
	|	РегистрСведений.СостоянияОС КАК СостоянияОС
	|ГДЕ
	|	СостоянияОС.Состояние = &СостояниеВвода
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииОС.Период                             КАК ДатаПервойАмортизации,
	|	НачислениеАмортизацииОС.ОсновноеСредство                   КАК ОсновноеСредство,
	|	НачислениеАмортизацииОС.НачислятьАмортизациюВТекущемМесяце КАК НачислятьАмортизациюВПервомМесяце
	|ПОМЕСТИТЬ
	|	ПервоеНачислениеАмортизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(НачислениеАмортизацииОС.Период)  КАК Период,
	|			НачислениеАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.НачислениеАмортизацииОС КАК НачислениеАмортизацииОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокАмортизируемыхОС
	|		ПО НачислениеАмортизацииОС.ОсновноеСредство = СписокАмортизируемыхОС.ОсновноеСредство
	|        И НачислениеАмортизацииОС.НачислятьАмортизацию = Истина
	|	СГРУППИРОВАТЬ ПО НачислениеАмортизацииОС.ОсновноеСредство) КАК ДатыПервойАмортизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОС КАК НачислениеАмортизацииОС
	|	ПО ДатыПервойАмортизации.ОсновноеСредство = НачислениеАмортизацииОС.ОсновноеСредство 
	|	 И ДатыПервойАмортизации.Период = НачислениеАмортизацииОС.Период
	|;
	|
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца.ОсновноеСредство                      КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ
	|   СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&НачалоПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииСрезПоследнихНачалоМесяца.ОсновноеСредство                                         КАК ОсновноеСредство,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследнихНачалоМесяца.СрокИспользованияДляВычисленияАмортизации, 0)   КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследнихНачалоМесяца.СтоимостьДляВычисленияАмортизации, 0)           КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследнихНачалоМесяца.ЛиквидационнаяСтоимость, 0)           		   КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследнихНачалоМесяца.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации
	|ПОМЕСТИТЬ
	|   ПараметрыАмортизацииСрезПоследнихНачалоМесяца
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОС.СрезПоследних(&НачалоПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК ПараметрыАмортизацииСрезПоследнихНачалоМесяца
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаОСОбороты.ОсновноеСредство              КАК ОсновноеСредство,
	|	ВыработкаОСОбороты.ПараметрВыработки             КАК ПараметрВыработки,
	|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК ОбъемВыработки
	|ПОМЕСТИТЬ
	|	ВыработкаОС
	|ИЗ
	|	РегистрНакопления.ВыработкаОС.Обороты(&НачалоПериода, &КонецПериода,, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)
	|	И ПараметрВыработки В (ВЫБРАТЬ ПараметрВыработки ИЗ ПервоначальныеСведенияОССрезПоследних)) КАК ВыработкаОСОбороты
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииСрезПоследних.ОсновноеСредство                   КАК ОсновноеСредство,
	|	НачислениеАмортизацииСрезПоследних.НачислятьАмортизациюВТекущемМесяце КАК НачислятьАмортизациюВТекущемМесяце
	|ПОМЕСТИТЬ
	|	НачислениеАмортизацииСрезПоследних
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОС.СрезПоследних(&КонецПериода, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокАмортизируемыхОС)) КАК НачислениеАмортизацииСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИСТИНА)                                          КАК ИзменениеНачислАморт,
	|	НачислениеАмортизацииОС.ОсновноеСредство                              КАК ОсновноеСредство,
	|	НачислениеАмортизацииСрезПоследних.НачислятьАмортизациюВТекущемМесяце КАК НачислятьВТекМесяце
	|ПОМЕСТИТЬ
	|	ИзменениеПризнакаАмортизации
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОС КАК НачислениеАмортизацииОС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачислениеАмортизацииСрезПоследних
	|	ПО НачислениеАмортизацииОС.ОсновноеСредство = НачислениеАмортизацииСрезПоследних.ОсновноеСредство
	|ГДЕ
	|	НачислениеАмортизацииОС.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|СГРУППИРОВАТЬ ПО
	|	НачислениеАмортизацииОС.ОсновноеСредство,
	|	НачислениеАмортизацииСрезПоследних.НачислятьАмортизациюВТекущемМесяце
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокАмортизируемыхОС.ОсновноеСредство                           КАК ОсновноеСредство,
	|	ПРЕДСТАВЛЕНИЕ(СписокАмортизируемыхОС.ОсновноеСредство)            КАК ОсновноеСредствоПредставление,
	|	СписокАмортизируемыхОС.ОсновноеСредство.Код                       КАК Код,
	|	СписокАмортизируемыхОС.ОсновноеСредство.ПодлежитАмортизации 	  КАК ПодлежитАмортизации,
	|	СписокАмортизируемыхОС.НачалоНачислятьАмортизацию                 КАК НачалоНачислятьАмортизацию,
	|	СписокАмортизируемыхОС.КонецНачислятьАмортизацию                  КАК КонецНачислятьАмортизацию,
	|	СписокАмортизируемыхОС.КонецНачислятьВТекущемМесяце               КАК КонецНачислятьВТекущемМесяце,
	|	СтоимостьОС.АмортизацияКонечныйОстаток                            КАК АмортизацияКонечныйОстаток,
	|	СтоимостьОС.АмортизацияОборот                                     КАК АмортизацияОборот,
	|	СтоимостьОС.СтоимостьКонечныйОстаток                              КАК СтоимостьКонечныйОстаток, 
	|	СтоимостьОС.СтоимостьНачальныйОстаток                             КАК СтоимостьНачальныйОстаток, 
	|	АмортизацияОстаткиИОбороты.СтоимостьНаНачалоГода                  КАК СтоимостьНаНачалоГода,
	|
	|	АмортизацияКварталОстаткиИОбороты.СтоимостьНаНачалоКвартала 	  КАК СтоимостьНаНачалоКвартала,
	|
	|	ПервоначальныеСведенияОССрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ВЫБОР 
	|		КОГДА ПервоначальныеСведенияОССрезПоследних.СпособНачисленияАмортизации В (&СписокУпрощенныхМетодов)
	|		ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК УпрощенныйМетодНачисленияАмортизации,
	|	ПервоначальныеСведенияОССрезПоследних.ПервоначальнаяСтоимость     КАК ПервоначальнаяСтоимость,
	|	ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце         КАК ПрименитьВТекущемМесяце,
	|	ПараметрыАмортизацииСрезПоследних.Период                          КАК Период,
	|
// параметры зависящие от ПрименитьВТекущемМесяце	
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
	|		ТОГДА ГрафикиАмортизацииСрезПоследних.ГрафикАмортизации                                        
	|		ИНАЧЕ ГрафикиАмортизацииСрезПоследнихНачалоМесяца.ГрафикАмортизации 
	|	КОНЕЦ КАК ГрафикАмортизации,
	|
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце  ИЛИ ПервоначальныеСведенияОССрезПоследних.СпособНачисленияАмортизации В (&СписокУпрощенныхМетодов) 
	|		ТОГДА СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации
	|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца.СпособыОтраженияРасходовПоАмортизации 
	|	КОНЕЦ КАК СпособыОтраженияРасходовПоАмортизации,
	|
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
	|		ТОГДА ПараметрыАмортизацииСрезПоследних.СрокИспользованияДляВычисленияАмортизации
	|		ИНАЧЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца.СрокИспользованияДляВычисленияАмортизации 
	|	КОНЕЦ КАК СрокИспользованияДляВычисленияАмортизации,
	|
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце ИЛИ ПервоначальныеСведенияОССрезПоследних.СпособНачисленияАмортизации В (&СписокУпрощенныхМетодов) 
	|		ТОГДА ПараметрыАмортизацииСрезПоследних.СтоимостьДляВычисленияАмортизации
	|		ИНАЧЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца.СтоимостьДляВычисленияАмортизации 
	|	КОНЕЦ КАК СтоимостьДляВычисленияАмортизации,
	|
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
	|		ТОГДА ПараметрыАмортизацииСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации
	|		ИНАЧЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца.ОбъемПродукцииРаботДляВычисленияАмортизации 
	|	КОНЕЦ КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|
	|
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
	|		ТОГДА ПараметрыАмортизацииСрезПоследних.ЛиквидационнаяСтоимость
	|		ИНАЧЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца.ЛиквидационнаяСтоимость 
	|	КОНЕЦ КАК ЛиквидационнаяСтоимость,
	|
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце  ИЛИ ПервоначальныеСведенияОССрезПоследних.СпособНачисленияАмортизации В (&СписокУпрощенныхМетодов) 
	|		ТОГДА МестонахождениеОССрезПоследних.Местонахождение                                        
	|		ИНАЧЕ МестонахождениеОССрезПоследнихНачалоМесяца.Местонахождение 
	|	КОНЕЦ КАК Местонахождение,
	|
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
	|		ТОГДА ПервоначальныеСведенияОСНУСрезПоследних.НормаНалоговойАмортизации
	|		ИНАЧЕ ПервоначальныеСведенияОСНУНаНачалоСрезПоследних.НормаНалоговойАмортизации 
	|	КОНЕЦ КАК НормаНалоговойАмортизации,
	|
	|	ВЫБОР 
	|		КОГДА ПараметрыАмортизацииСрезПоследних.ПрименитьВТекущемМесяце 
	|		ТОГДА ПервоначальныеСведенияОСНУСрезПоследних.МинимальнаяСтоимостьОбъекта
	|		ИНАЧЕ ПервоначальныеСведенияОСНУНаНачалоСрезПоследних.МинимальнаяСтоимостьОбъекта 
	|	КОНЕЦ КАК МинимальнаяСтоимостьОбъекта,
	|
	|
	|
// конец параметры зависящие от ПрименитьВТекущемМесяце	
	|
	|	ВыработкаОС.ОбъемВыработки                                  КАК ТекущийОбъемПродукцииРабот,
	|
	|	СостоянияОС.ДатаСостояния                                   	КАК ДатаВводаВЭксплуатацию,
	|	ПервоеНачислениеАмортизации.ДатаПервойАмортизации 				КАК ДатаПервойАмортизации,
	|	ПервоеНачислениеАмортизации.НачислятьАмортизациюВПервомМесяце 	КАК НачислятьАмортизациюВПервомМесяце,
	|
	|	ВЫБОР КОГДА ИзменениеПризнакаАмортизации.ИзменениеНачислАморт ЕСТЬ NULL ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		ИзменениеПризнакаАмортизации.ИзменениеНачислАморт
	|	КОНЕЦ КАК ИзменениеНачислАморт,
	|	ВЫБОР КОГДА ИзменениеПризнакаАмортизации.НачислятьВТекМесяце ЕСТЬ NULL ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		ИзменениеПризнакаАмортизации.НачислятьВТекМесяце
	|	КОНЕЦ КАК НачислятьВТекМесяце
	|ИЗ
	|	СписокАмортизируемыхОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОстаткиИОбороты
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = АмортизацияОстаткиИОбороты.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОС
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияКварталОстаткиИОбороты
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = АмортизацияКварталОстаткиИОбороты.ОсновноеСредство
	|
	|
// начало параметры зависящие от "применить в текущем месяце"
	|	ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиАмортизацииСрезПоследних
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ГрафикиАмортизацииСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОССрезПоследних
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииСрезПоследних
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ПараметрыАмортизацииСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиАмортизацииСрезПоследнихНачалоМесяца
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ГрафикиАмортизацииСрезПоследнихНачалоМесяца.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследнихНачалоМесяца.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииСрезПоследнихНачалоМесяца
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ПараметрыАмортизацииСрезПоследнихНачалоМесяца.ОсновноеСредство	
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОССрезПоследних
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОССрезПоследнихНачалоМесяца
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = МестонахождениеОССрезПоследнихНачалоМесяца.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСНУСрезПоследних
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ПервоначальныеСведенияОСНУСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСНУНаНачалоСрезПоследних
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ПервоначальныеСведенияОСНУНаНачалоСрезПоследних.ОсновноеСредство
	|
// конец параметры зависящие от "применить в текущем месяце"
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаОС
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОС
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПервоеНачислениеАмортизации КАК ПервоеНачислениеАмортизации
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ПервоеНачислениеАмортизации.ОсновноеСредство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ИзменениеПризнакаАмортизации
	|	ПО СписокАмортизируемыхОС.ОсновноеСредство = ИзменениеПризнакаАмортизации.ОсновноеСредство
	|";
	
	
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТипГодовой  = Тип ("СправочникСсылка.ГодовыеГрафикиАмортизацииОС");

	ТаблицаГрафиков = ПолучитьТаблицуГрафиков();

	Пока ВыборкаПоОС.Следующий() Цикл
		
		// Если были изменения флага начисления амортизации, то анализируем
		// признак необходимости начисления амортизации в текущем месяце.
		Если ВыборкаПоОС.ИзменениеНачислАморт Тогда
			Если Не ВыборкаПоОС.НачислятьВТекМесяце И Не ВыборкаПоОС.УпрощенныйМетодНачисленияАмортизации Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если ВыборкаПоОС.КонецНачислятьВТекущемМесяце = Истина Тогда
				Если ВыборкаПоОС.КонецНачислятьАмортизацию = NULL 
				 ИЛИ ВыборкаПоОС.КонецНачислятьАмортизацию = Ложь Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли (ВыборкаПоОС.КонецНачислятьВТекущемМесяце = Ложь) 
				    И (ВыборкаПоОС.НачалоНачислятьАмортизацию = NULL) Тогда 
					Продолжить;
			ИначеЕсли ВыборкаПоОС.КонецНачислятьВТекущемМесяце = Ложь Тогда
				Если ВыборкаПоОС.КонецНачислятьАмортизацию = Ложь Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли (ВыборкаПоОС.КонецНачислятьВТекущемМесяце = NULL) 
				    И (ВыборкаПоОС.КонецНачислятьАмортизацию = NULL) Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		
		ТекстСообщения = "Упр. расчет амортизации: для основного средства " 
				                   + ВыборкаПоОС.ОсновноеСредствоПредставление + " (" + СокрЛП(ВыборкаПоОС.Код) + ")";
								   
		ТекстСообщенияОС = "Упр. расчет амортизации: основное средство " 
				                   + ВыборкаПоОС.ОсновноеСредствоПредставление + " (" + СокрЛП(ВыборкаПоОС.Код) + ")";
								   
		Если НЕ ВыборкаПоОС.ПодлежитАмортизации Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияОС + " не подлежит амортизации!");
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;

		Если (ВыборкаПоОС.АмортизацияОборот <> 0) И (ВыборкаПоОС.АмортизацияОборот <> Null) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьИнформацию(ТекстСообщения + " амортизация в этом месяце уже начислялась");
				
			КонецЕсли;
			
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " не указан способ амортизации",
								 Отказ);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " стоимость равна 0",
								 Отказ);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		СуммаАмортизации = 0;
		
		Метод_50_50      = Ложь;
		
		СтоимостьДляВычисленияАмортизации 			= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации);
		ЛиквидационнаяСтоимость						= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.ЛиквидационнаяСтоимость);
		АмортизируемаяСтоимость	 					= СтоимостьДляВычисленияАмортизации - ЛиквидационнаяСтоимость;
		СрокИспользованияДляВычисленияАмортизации	= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации);
		ТекущийОбъемПродукцииРабот					= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.ТекущийОбъемПродукцииРабот);
		ОбъемПродукцииРаботДляВычисленияАмортизации	= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации);
		НормаНалоговойАмортизации					= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.НормаНалоговойАмортизации);
		
		АмортизацияКонечныйОстаток					= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.АмортизацияКонечныйОстаток);
		СтоимостьКонечныйОстаток					= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоОС.СтоимостьКонечныйОстаток);
		ОстаточнаяСтоимость                         = СтоимостьКонечныйОстаток - АмортизацияКонечныйОстаток;
		НачислятьАмортизациюВПервомМесяце	        = (ВыборкаПоОС.НачислятьАмортизациюВПервомМесяце = Истина);
		ДатаВводаВЭксплуатацию                      = ВыборкаПоОС.ДатаВводаВЭксплуатацию;
	
		Если НачислятьАмортизациюВПервомМесяце И (ДатаВводаВЭксплуатацию <> Null) Тогда
			
			//Дата ввода в эксплуатацию для срока использования
			//сдвигается на месяц назад
			
			ДатаВводаВЭксплуатацию = ДобавитьМесяц(ВыборкаПоОС.ДатаВводаВЭксплуатацию, -1);
			
		КонецЕсли;
		
		Если (ЛиквидационнаяСтоимость <> 0) 
		   И (ЛиквидационнаяСтоимость >= ОстаточнаяСтоимость) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьИнформацию(Локализация.СтрШаблон(НСтр("ru='Упр. расчет амортизации: остаточная стоимость основного средства ¤1¤ достигла ликвидационной <¤2¤>, амортизация не начислена.';uk='Упр. розрахунок амортизації: залишкова вартість основного засобу ¤1¤ досягла ліквідаційної <¤2¤>, амортизація не нарахована.'"), ВыборкаПоОС.ОсновноеСредствоПредставление, ЛиквидационнаяСтоимость));
				
			КонецЕсли;
			
            Продолжить;
			
		КонецЕсли;
		
		
		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный Тогда

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
									 + ВыборкаПоОС.СпособНачисленияАмортизации 
									 + " не указан срок полезного использования!",
									 Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			СуммаГодовойАмортизации = АмортизируемаяСтоимость / СрокИспользованияДляВычисленияАмортизации * 12;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;

			Иначе
				
				КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков,
				                                                                 ВыборкаПоОС.ГрафикАмортизации,
																				 ДатаРасчета, 
																				 ТипГодовой);
				СуммаАмортизации       = СуммаГодовойАмортизации * КоэффициентАмортизации;

			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда

			Если ОбъемПродукцииРаботДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
									 + ВыборкаПоОС.СпособНачисленияАмортизации 
									 + " не указан предполагаемый объем выработки!",
									 Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			СуммаАмортизации = АмортизируемаяСтоимость * ТекущийОбъемПродукцииРабот / ОбъемПродукцииРаботДляВычисленияАмортизации;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка Тогда

			Если ЛиквидационнаяСтоимость = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
									 + ВыборкаПоОС.СпособНачисленияАмортизации 
									 + " не указана ликвидационная стоимость!",
									 Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если СтоимостьДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
									 + ВыборкаПоОС.СпособНачисленияАмортизации 
									 + " не указана первоначальная стоимость!",
									 Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
									 + ВыборкаПоОС.СпособНачисленияАмортизации 
									 + " не указан срок полезного использования!",
									 Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
				
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
				
			Иначе
				
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
				
			КонецЕсли;
			
			СтоимостьИтоговая = ОбщегоНазначения.ПреобразоватьВЧисло(СтоимостьИтоговая);
			
 			Если ДатаВводаВЭксплуатацию = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения
					                 + " при расчете по способу " + ВыборкаПоОС.СпособНачисленияАмортизации
							         + " не определилась дата ввода в эксплуатацию!", Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			РазностьЛет = Год(ДатаРасчета) - Год(ДатаВводаВЭксплуатацию);
			
			Если РазностьЛет > 0 Тогда
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации 
				                                   - РазностьЛет * 12
				                                   + Месяц(ДатаВводаВЭксплуатацию)
												   
			ИначеЕсли СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации;
												   
			Иначе
				
				ОсталосьЭксплуатироватьВЭтомГоду = 0;
												   
			КонецЕсли;
													   
			Если (ОсталосьЭксплуатироватьВЭтомГоду < 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
				
				// Последний год применяем прямолинейный метод
				
				СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
				
			ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
				
				СуммаГодовойАмортизации = СтоимостьИтоговая * (1 - Pow(ЛиквидационнаяСтоимость / СтоимостьДляВычисленияАмортизации,
				                                                       12 / СрокИспользованияДляВычисленияАмортизации));
																	   
			Иначе // Срок использования исчерпан
				
				СуммаГодовойАмортизации = 0;
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(Локализация.СтрШаблон(НСтр("ru='Упр. расчет амортизации: для основного средства ¤1¤ при расчете по способу ¤2¤ срок использования исчерпан!';uk='Упр. розрахунок амортизації: для основного засобу ¤1¤ при розрахунку способом ¤2¤ строк використання вичерпаний!'"), ВыборкаПоОС.ОсновноеСредствоПредставление, ВыборкаПоОС.СпособНачисленияАмортизации));
					
				КонецЕсли;
				
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
				
			Иначе
				
				КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, 
				                                                                 ВыборкаПоОС.ГрафикАмортизации,
																				 ДатаРасчета, 
																				 ТипГодовой);
				СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;
				
			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка Тогда
			
			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
									 + ВыборкаПоОС.СпособНачисленияАмортизации 
									 + " не указан срок полезного использования!", 
									 Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			Если СрокИспользованияДляВычисленияАмортизации <= 24 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Упр. расчет амортизации: для основного средства ¤1¤ при расчете по способу ¤2¤ указан срок полезного использования <¤3¤> мес.!"
					"Для корректного начисления амортизации срок использования должен быть более 24 месяца.';uk='Упр. розрахунок амортизації: для основного засобу ¤1¤ при розрахунку способом ¤2¤ зазначений строк корисного використання <¤3¤> міс.!"
					"Для коректного нарахування амортизації строк використання повинен бути більше 24 місяців.'"),
					ВыборкаПоОС.ОсновноеСредствоПредставление, ВыборкаПоОС.СпособНачисленияАмортизации, СрокИспользованияДляВычисленияАмортизации),);
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
				
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
			Иначе
				
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
				
			КонецЕсли;
			
			СтоимостьИтоговая = ОбщегоНазначения.ПреобразоватьВЧисло(СтоимостьИтоговая);
			
			Если ДатаВводаВЭксплуатацию = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(Локализация.СтрШаблон(НСтр("ru='Упр. расчет амортизации: для основного средства ¤1¤ при расчете по способу ¤2¤ не определилась дата ввода в эксплуатацию!';uk='Упр. розрахунок амортизації: для основного засобу ¤1¤ при розрахунку способом ¤2¤ не визначилася дата уведення в експлуатацію!'"), ВыборкаПоОС.ОсновноеСредствоПредставление, ВыборкаПоОС.СпособНачисленияАмортизации));
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			РазностьЛет = Год(ДатаРасчета) - Год(ДатаВводаВЭксплуатацию);
			
			Если РазностьЛет > 0 Тогда
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации 
				                                   - РазностьЛет * 12
				                                   + Месяц(ДатаВводаВЭксплуатацию)
												   
			ИначеЕсли СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации;
												   
			Иначе
				
				ОсталосьЭксплуатироватьВЭтомГоду = 0;
												   
			КонецЕсли;
			
			Если (ОсталосьЭксплуатироватьВЭтомГоду <= 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
				
				// Последний год применяем прямолинейный метод
				
				СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
				
			ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
				
				СуммаГодовойАмортизации = 2 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / СрокИспользованияДляВычисленияАмортизации * 12;
				
			Иначе // Срок использования исчерпан
				
				СуммаГодовойАмортизации = 0;
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(Локализация.СтрШаблон(НСтр("ru='Упр. расчет амортизации: для основного средства ¤1¤ при расчете по способу ¤2¤ срок использования исчерпан!';uk='Упр. розрахунок амортизації: для основного засобу ¤1¤ при розрахунку способом ¤2¤ строк використання вичерпаний!'"), ВыборкаПоОС.ОсновноеСредствоПредставление, ВыборкаПоОС.СпособНачисленияАмортизации));
					
				КонецЕсли;
			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
				
			Иначе
				
				КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, 
				                                                                 ВыборкаПоОС.ГрафикАмортизации,
																				 ДатаРасчета,
																				 ТипГодовой);
				СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;
				
			КонецЕсли;
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный Тогда

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " 
									 + ВыборкаПоОС.СпособНачисленияАмортизации + " не указан срок полезного использования!",
									 Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			Если ДатаВводаВЭксплуатацию = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьИнформацию(ТекстСообщения + " при расчете по способу " + ВыборкаПоОС.СпособНачисленияАмортизации +  " не определилась дата ввода в эксплуатацию!");
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			ЧислоЛетПользования       = Макс(1, СрокИспользованияДляВычисленияАмортизации / 12);
			ЧислоЛетПользования       = ЧислоЛетПользования 
			                            + ?(ЧислоЛетПользования - Цел(ЧислоЛетПользования) = 0, 0, 1); // округляем к наибольшему целому
			
			ГодИспользования          = Год(ДатаРасчета) - Год(ДатаВводаВЭксплуатацию) + 1;
			
			Если Месяц(ДатаВводаВЭксплуатацию) >= Месяц(ДатаРасчета) Тогда
				
				ГодИспользования	  = ГодИспользования - 1;
				
			КонецЕсли; 

			СуммаГодовойАмортизации   = АмортизируемаяСтоимость * (ЧислоЛетПользования - ГодИспользования + 1)
					                    / (ЧислоЛетПользования * (ЧислоЛетПользования + 1) / 2 );
										  
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				
				СуммаАмортизации = СуммаГодовойАмортизации / 12;

			Иначе
				
				КоэффициентАмортизации  = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, 
				                                                                  ВыборкаПоОС.ГрафикАмортизации, 
				                                                                  ДатаРасчета, 
																				  ТипГодовой);
				СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;

			КонецЕсли;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда

			КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета, ТипГодовой);

			СуммаАмортизации = АмортизируемаяСтоимость * КоэффициентАмортизации;

		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Налоговый Тогда
			
			// с 01.04.2011 этого метода не должно быть
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " указан способ " 
								 + ВыборкаПоОС.СпособНачисленияАмортизации + " , который не используется!",
								 Отказ);
				
			КонецЕсли;
			
			Продолжить;
			


		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС._50_50 Тогда
			
			Если АмортизацияКонечныйОстаток = 0 Тогда
				
				// При первом начислении амортизации (при вводе в эксплуатацию) - 50%
				// Оставшиеся 50% будут начислены в документах списания
				СуммаАмортизации = АмортизируемаяСтоимость / 2;
				
				
			КонецЕсли;
			
			Метод_50_50 = Истина;
			
			ЛиквидационнаяСтоимость = 0;
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС._100 Тогда

			// При первом же начислении амортизации - 100%
			// Стоимость всегда должна быть полностью амортизирована
			СуммаАмортизации = ОстаточнаяСтоимость;
			
			Если СуммаАмортизации <= 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЛиквидационнаяСтоимость = 0;
			
		Иначе 
			
			Если ВыдаватьСообщения Тогда
			
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения
				                 + " установлен способ расчета амортизации, не поддерживаемый в управленческом учете (" 
								 + ВыборкаПоОС.СпособНачисленияАмортизации +  ")!", Отказ);
			
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;

 		СуммаАмортизации = Макс(0, Мин(СуммаАмортизации, ОстаточнаяСтоимость - ЛиквидационнаяСтоимость));

		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОбъектУчета			 = ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоОС.СпособыОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.Местонахождение 		 = ВыборкаПоОС.Местонахождение;
		СтрокаАмортизации.Амортизация            = СуммаАмортизации;
    	СтрокаАмортизации.Метод_50_50            = Метод_50_50;

		Если СуммаАмортизации = 0 И ВыдаватьСообщения И Не Метод_50_50 Тогда
			
			ОбщегоНазначения.СообщитьИнформацию(ТекстСообщения + " амортизация равна 0");
			
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииУпр()

//Получает бухгалтерскую аналитику в зависимости от переданной статьи затрат
//
// Параметры
//
//
// Возвращаемое значение
//  Структура со значениями субконто
//
Функция ПолучитьАналитикуСчетаЗатрат(СчетЗатрат,ПодразделениеОрганизации,СтатьяЗатрат,НоменклатурнаяГруппа,ОбъектСтроительства,ЗнСубконто1, ЗнСубконто2, ЗнСубконто3) Экспорт
	
	СтруктураПолей = Новый Структура;

	Субконто1 = Неопределено;
	Субконто2 = Неопределено;
	Субконто3 = Неопределено;

	ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, СтатьяЗатрат);
	
	Если (ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы)
	 ИЛИ (ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве) Тогда

		Субконто1 = ПодразделениеОрганизации;
		Субконто2 = НоменклатурнаяГруппа;
		Субконто3 = СтатьяЗатрат;

	ИначеЕсли (ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы) 
		  ИЛИ (ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы) Тогда

		Субконто1 = ПодразделениеОрганизации;
		Субконто2 = СтатьяЗатрат;

	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда

		Субконто1 = ОбъектСтроительства;
		Субконто2 = СтатьяЗатрат;

	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт 
		ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы Тогда

		Субконто1 = СтатьяЗатрат;
		Субконто2 = ПодразделениеОрганизации;

	Иначе

		Субконто1 = ЗнСубконто1;
		Субконто2 = ЗнСубконто2;
		Субконто3 = ЗнСубконто3;

	КонецЕсли;

	СтруктураПолей.Вставить("Субконто1", Субконто1);
	СтруктураПолей.Вставить("Субконто2", Субконто2);
	СтруктураПолей.Вставить("Субконто3", Субконто3);

	Возврат СтруктураПолей;

КонецФункции

//Функция получает таблицу значений с указанием списка ОС и сумм амортизации
//возвращает таблицу значений с распределенными значениями амортизации
//
Функция ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ДокОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента) Экспорт

	Если ДокОбъект.Метаданные().Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
		ДатаРасчета = КонецМесяца(ДокОбъект.ПериодРегистрации);
	Иначе
		ДатаРасчета = ДокОбъект.Дата;
	КонецЕсли; 

	// определим структуру выходной таблицы
	ТабЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();

	МассивКоэф = Новый Массив;

	// цикл по Объектам из ТабАмортизации
	Для Каждого СтрокаТЗ Из ТабАмортизации Цикл
		Если СтрокаТЗ.Амортизация = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.НаправлениеАмортизации) Тогда
			Сообщить("В Упр. учете для объекта "+ СтрокаТЗ.ОбъектУчета+" не указан способ отражения расходов по амортизации",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если СтрокаТЗ.НаправлениеАмортизации.Способы.Количество() = 0 Тогда
			Сообщить("В Упр. учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в списке способов отражения расходов по амортизации нет записей",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		МассивКоэф.Очистить();
		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
			МассивКоэф.Добавить(СтрокаНапр.Коэффициент);
		КонецЦикла;

		МассивСумм = ОбщегоНазначения.РаспределитьПропорционально( СтрокаТЗ.Амортизация, МассивКоэф, 2);
		Если МассивСумм = Неопределено Тогда
			Сообщить("В Упр. учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения расходов по амортизации не проставлены коэффициенты",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если МассивСумм.Количество() <> МассивКоэф.Количество() Тогда
			Сообщить("В Упр. учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения расходов по амортизации есть нулевые коэффициенты",СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл

			Если ЗначениеЗаполнено(СтрокаНапр.Подразделение) Тогда
				Подразделение           = СтрокаНапр.Подразделение;
			Иначе	
				// получаем по местонахождению объекта
				Подразделение           = СтрокаТЗ.Местонахождение;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
				Сообщить("В Упр. учете для объекта "+ СтрокаТЗ.ОбъектУчета+" не указано подразделение ни при принятии к учету, ни в способах отражения расходов. Необходимо заполнить подразделение и перепровести документ.",СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока = ТабЗатрат.Добавить();
			
			НоваяСтрока.Подразделение           = Подразделение;
			НоваяСтрока.СтатьяЗатрат            = СтрокаНапр.СтатьяЗатрат;
			НоваяСтрока.НоменклатурнаяГруппа    = СтрокаНапр.НоменклатурнаяГруппа;
			НоваяСтрока.ОбъектСтроительства     = СтрокаНапр.ОбъектСтроительства;
			НоваяСтрока.Продукция               = СтрокаНапр.Продукция;
			НоваяСтрока.Проект                  = СтрокаНапр.Проект;
			НоваяСтрока.ХарактеристикаПродукции = СтрокаНапр.ХарактеристикаПродукции;
			НоваяСтрока.СерияПродукции          = СтрокаНапр.СерияПродукции;
			НоваяСтрока.СпособРаспределенияЗатратНаВыпуск = СтрокаТЗ.НаправлениеАмортизации.СпособРаспределенияЗатратНаВыпуск;
			НоваяСтрока.Сумма                   = МассивСумм[СтрокаНапр.НомерСтроки - 1];

		КонецЦикла;

	КонецЦикла;

	УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
		СтруктураШапкиДокумента,
		ТабЗатрат,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);

	
	Возврат ТабЗатрат;

КонецФункции // ПолучитьРаспределениеАмортизацииПоНаправлениямУпр()

//Функция получает таблицу значений с указанием списка ОС и сумм амортизации
//возвращает таблицу значений с распределенными значениями амортизации
//Параметры входной таблицы значений:
// - ОС
//
//
//Параметры выходной таблицы значений:
// - "ОсновноеСредство"
//
Функция ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ДокОбъект, 
	                                                          Отказ,
															  Заголовок,
															  ТабАмортизации,
															  СтруктураШапкиДокумента,
															  НомерЖурнала) Экспорт

	ТипУчета = "Бух.";
	Ремонт   = (Тип("ДокументОбъект.РемонтОС") = ТипЗнч(ДокОбъект)) ИЛИ (Тип("ДокументОбъект.МодернизацияОС") = ТипЗнч(ДокОбъект));   
	Улучшение = (Тип("ДокументОбъект.РемонтОС") = ТипЗнч(ДокОбъект)) ИЛИ (Тип("ДокументОбъект.МодернизацияОС") = ТипЗнч(ДокОбъект));   
	
	Если ДокОбъект.Метаданные().Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
		ДатаРасчета = КонецМесяца(ДокОбъект.ПериодРегистрации);
	Иначе
		ДатаРасчета = ДокОбъект.Дата;
	КонецЕсли; 

	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ДатаРасчета);
	
	// определим структуру выходной таблицы
	ТабЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	ТабЗатрат.Колонки.Добавить("СчетАмортизации");
	ТабЗатрат.Колонки.Добавить("ИмяСубконто");
	ТабЗатрат.Колонки.Добавить("ОбъектУчета");

	МассивКоэф = Новый Массив;

	// цикл по Объектам из ТабАмортизации
	Для Каждого СтрокаТЗ Из ТабАмортизации Цикл
		
		Если СтрокаТЗ.Амортизация = 0 И СтрокаТЗ.АмортизацияНУ = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.НаправлениеАмортизации) Тогда
			
			Сообщить("В "+ТипУчета+" учете для объекта "+ СтрокаТЗ.ОбъектУчета+" не указаны способы отражения расходов по амортизации",СтатусСообщения.Важное);
			Продолжить;
			
		КонецЕсли;

		Если СтрокаТЗ.НаправлениеАмортизации.Способы.Количество() = 0 Тогда
			
			Сообщить("В "+ТипУчета+" учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения затрат по амортизации нет записей",СтатусСообщения.Важное);
			Продолжить;
			
		КонецЕсли;

		МассивКоэф.Очистить();
		
		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
			
			МассивКоэф.Добавить(СтрокаНапр.Коэффициент);
			
		КонецЦикла;

		МассивСумм = ОбщегоНазначения.РаспределитьПропорционально( СтрокаТЗ.Амортизация, МассивКоэф, 2);
		
		МассивСуммНУ = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЗ.АмортизацияНУ, МассивКоэф, 2);
		
		Если МассивСумм = Неопределено И МассивСуммНУ = Неопределено Тогда
			
			Сообщить("В "+ТипУчета+" учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения расходов по амортизации не проставлены коэффициенты",СтатусСообщения.Важное);
			Продолжить;
			
		КонецЕсли;

		Если (МассивСумм <> Неопределено И МассивСумм.Количество() <> МассивКоэф.Количество()) И (МассивСуммНУ <> Неопределено И МассивСуммНУ.Количество() <> МассивКоэф.Количество()) Тогда
			
			Сообщить("В "+ТипУчета+" учете для объекта "+ СтрокаТЗ.ОбъектУчета+" в способах отражения затрат по амортизации есть нулевые коэффициенты",СтатусСообщения.Важное);
			Продолжить;
			
		КонецЕсли;

		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл

			Если ЗначениеЗаполнено(СтрокаНапр.ПодразделениеОрганизации) Тогда
				ПодразделениеОрганизации 	= СтрокаНапр.ПодразделениеОрганизации;
			Иначе	
				// получаем по местонахождению объекта
				ПодразделениеОрганизации 	= СтрокаТЗ.Местонахождение;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
				Если СтрокаТЗ.НаправлениеАмортизации <> Справочники.СпособыОтраженияРасходовПоАмортизации.ВременнаяРазницаОСНа01042011 Тогда
					Сообщить("В "+ТипУчета+" учете для объекта "+ СтрокаТЗ.ОбъектУчета+" не указано подразделение ни при принятии к учету, ни в способах отражения расходов. Необходимо заполнить подразделение и перепровести документ.",СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;	
			КонецЕсли;	
			
			НоваяСтрока = ТабЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНапр);
			
			НоваяСтрока.ПодразделениеОрганизации 	= ПодразделениеОрганизации;
			
			НоваяСтрока.ОбъектУчета              = СтрокаТЗ.ОбъектУчета;
			НоваяСтрока.СчетАмортизации          = СтрокаТЗ.СчетАмортизации;
			НоваяСтрока.ИмяСубконто              = СтрокаТЗ.ИмяСубконто;

			Если Улучшение Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаНапр.СтатьяЗатратНаУлучшениеОС) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Для объекта ¤1¤ в способе отражения затрат по амортизации и улучшению не указана статья затрат на улучшение ОС';uk=""Для об'єкта ¤1¤ у способах відображення витрат по амортизації є нульові коефіцієнти"""), СтрокаТЗ.ОбъектУчета), Отказ,, СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;	
				
				НоваяСтрока.СтатьяЗатрат = СтрокаНапр.СтатьяЗатратНаУлучшениеОС;
				
				Если ТипЗнч(НоваяСтрока.Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
					НоваяСтрока.Субконто1 = СтрокаНапр.СтатьяЗатратНаУлучшениеОС;
				ИначеЕсли ТипЗнч(НоваяСтрока.Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда	
					НоваяСтрока.Субконто2 = СтрокаНапр.СтатьяЗатратНаУлучшениеОС;
				ИначеЕсли ТипЗнч(НоваяСтрока.Субконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда	
					НоваяСтрока.Субконто3 = СтрокаНапр.СтатьяЗатратНаУлучшениеОС;
				КонецЕсли;	
				
			КонецЕсли; 

			НоваяСтрока.Сумма 		= ?(МассивСумм = Неопределено, 0, МассивСумм[СтрокаНапр.НомерСтроки - 1]);				
			
			НоваяСтрока.СуммаНал 	= ?(МассивСуммНУ = Неопределено, 0, МассивСуммНУ[СтрокаНапр.НомерСтроки - 1]);				
			
			НоваяСтрока.СпособРаспределенияЗатратНаВыпуск = СтрокаТЗ.НаправлениеАмортизации.СпособРаспределенияЗатратНаВыпуск;
			
			НоваяСтрока.СуммаБух = НоваяСтрока.Сумма;
			

			НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат 	= СтрокаНапр.НалоговоеНазначениеДоходовИЗатрат;
			НоваяСтрока.НалоговоеНазначение 				= СтрокаТЗ.НалоговоеНазначение;
			

			СтрокаСообщенияДоп = " (Способ отражения: """ + СтрокаТЗ.НаправлениеАмортизации + """, строка №" + СтрокаНапр.НомерСтроки + ")";

//	 		Если НоваяСтрока.СуммаНУ <> 0 Тогда
				Если Улучшение Тогда
					// при наличии ошибки документ не проводится
					ПроверитьСоответствиеНалоговогоНазначенияАмортизации(СтрокаТЗ.ОбъектУчета, НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат, НоваяСтрока.НалоговоеНазначение, Отказ, СтрокаСообщенияДоп);
				Иначе	
					ПроверитьСоответствиеНалоговогоНазначенияАмортизации(СтрокаТЗ.ОбъектУчета, НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат, НоваяСтрока.НалоговоеНазначение, , СтрокаСообщенияДоп);
				КонецЕсли;	
//	 		КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;


	ВремСтруктураШапкиДокумента = Новый Структура;
	
	Для каждого Строка Из СтруктураШапкиДокумента Цикл

		Если Строка.Ключ = "ОтражатьВНалоговомУчете" Тогда 
			Если ИспользоватьРасширеннуюАналитику Тогда			
			  	ВремСтруктураШапкиДокумента.Вставить(Строка.Ключ, Истина);
				Если Ремонт Тогда
			  		ВремСтруктураШапкиДокумента.Вставить(Строка.Ключ, Ложь);
				КонецЕсли;	
			Иначе
				ВремСтруктураШапкиДокумента.Вставить(Строка.Ключ, Ложь);
			КонецЕсли;	
		ИначеЕсли Строка.Ключ <> "ВалютаДокумента" Тогда
		  	
		  	ВремСтруктураШапкиДокумента.Вставить(Строка.Ключ,Строка.Значение);
		  	
		КонецЕсли;

	КонецЦикла;

	УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
		ВремСтруктураШапкиДокумента,
		ТабЗатрат,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
	);

	//формирование проводок
	Проводки = ДокОбъект.Движения.Хозрасчетный;

	Для каждого СтрокаЗатрат из ТабЗатрат Цикл

		Проводка = Проводки.Добавить();

		Проводка.Период       = ДатаРасчета;
		Проводка.НомерЖурнала = НомерЖурнала;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = СтрокаЗатрат.Сумма;

		Проводка.СуммаНУДт 				= СтрокаЗатрат.СуммаНал;
		Проводка.НалоговоеНазначениеДт 	= СтрокаЗатрат.НалоговоеНазначениеДоходовИЗатрат;
		
		Проводка.СчетДт = СтрокаЗатрат.СчетЗатрат;
		
		ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаЗатрат.СчетЗатрат);

		Если ПроизводственныеРасходы Тогда
			БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаЗатрат.СтатьяЗатрат);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, "Подразделения",        СтрокаЗатрат.ПодразделениеОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаЗатрат.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаЗатрат.ОбъектСтроительства);
		Иначе	
			БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 1, СтрокаЗатрат.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 2, СтрокаЗатрат.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 3, СтрокаЗатрат.Субконто3);
		КонецЕсли;
		
		Проводка.СуммаНУКт 				= СтрокаЗатрат.СуммаНал;
		Проводка.НалоговоеНазначениеКт 	= СтрокаЗатрат.НалоговоеНазначение;

		Проводка.СчетКт = СтрокаЗатрат.СчетАмортизации;
		
		Если Ремонт Тогда
			
			Проводка.Содержание = "Ремонт """ + СтрокаЗатрат.ОбъектУчета + """";
			БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетАмортизации, Проводка.СубконтоКт, СтрокаЗатрат.ИмяСубконто, СтруктураШапкиДокумента.ОбъектСтроительства);
			
		Иначе
			
			Проводка.Содержание = "Начислена амортизация";
			БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетАмортизации, Проводка.СубконтоКт, СтрокаЗатрат.ИмяСубконто, СтрокаЗатрат.ОбъектУчета);
			
		КонецЕсли;

	КонецЦикла;
	
	// Отражение амортизации на 09 счете
	
	Если НЕ Ремонт Тогда
		
		СуммаПроводки = ТабЗатрат.Итог("Сумма");
		
		Если СуммаПроводки <> 0 Тогда
			
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = ДатаРасчета;
			Проводка.Содержание   = "Накопление амортизационных отчислений";
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СуммаПроводки;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.АмортизационныеОтчисления;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТабЗатрат;

КонецФункции // ПолучитьРаспределениеАмортизацииПоНаправлениямРегл()

Процедура ПроверитьСоответствиеНалоговогоНазначенияАмортизации(ОбъектУчета, НалоговоеНазначениеЗатрат, НалоговоеНазначениеОбъекта, Отказ = Ложь, СтрокаСообщенияДоп = "") 
	
	НехозДеятельностьНДС = (НалоговоеНазначениеОбъекта = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
	НехозДеятельностьНКУ = (НалоговоеНазначениеЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
	
	НалоговоеНазначениеЗатратНДСное = НалоговоеНазначениеЗатрат.ГруппаНалоговогоНазначения = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС;
	
	Если НЕ ЗначениеЗаполнено(НалоговоеНазначениеЗатрат) Тогда
		
		СтрокаСообщения = "Не заполнено налоговое назначение амортизации" + СтрокаСообщенияДоп;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ);			
		
		
	ИначеЕсли НЕ ЗначениеЗаполнено(НалоговоеНазначениеОбъекта) Тогда
		
		СтрокаСообщения = "Не заполнено налоговое назначение объекта";
		//ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ);			
		
	ИначеЕсли НалоговоеНазначениеЗатрат = НалоговоеНазначениеОбъекта Тогда
		
		
	ИначеЕсли НЕ НалоговоеНазначениеЗатратНДСное Тогда 
		
		Если НехозДеятельностьНДС <> НехозДеятельностьНКУ Тогда
			
			СтрокаСообщения = Локализация.СтрШаблон(НСтр("ru = 'Налоговое назначение объекта ¤1¤ <¤2¤> не соответствует налоговому назначению амортизации (<¤3¤>)'; uk = 'Налоговое назначение объекта ¤1¤ <¤2¤> не соответствует налоговому назначению амортизации (<¤3¤>)'"), ОбъектУчета, НалоговоеНазначениеОбъекта, НалоговоеНазначениеЗатрат) + СтрокаСообщенияДоп;
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ);			
			
		КонецЕсли;
		
	Иначе
		
		// НалоговоеНазначениеЗатратНДСное = Истина
		Если НалоговоеНазначениеОбъекта = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
			
			Если НалоговоеНазначениеЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				
				СтрокаСообщения = Локализация.СтрШаблон(НСтр("ru = 'Налоговое назначение объекта ¤1¤ <¤2¤> не соответствует налоговому назначению амортизации (<¤3¤>)'; uk = 'Налоговое назначение объекта ¤1¤ <¤2¤> не соответствует налоговому назначению амортизации (<¤3¤>)'"), ОбъектУчета, НалоговоеНазначениеОбъекта, НалоговоеНазначениеЗатрат) + СтрокаСообщенияДоп;
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ);			
				
			КонецЕсли;
			
		ИначеЕсли НалоговоеНазначениеОбъекта = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая Тогда
			
			Если НалоговоеНазначениеЗатрат <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая Тогда	
				
				СтрокаСообщения = Локализация.СтрШаблон(НСтр("ru = 'Налоговое назначение объекта ¤1¤ <¤2¤> не соответствует налоговому назначению амортизации (<¤3¤>)'; uk = 'Налоговое назначение объекта ¤1¤ <¤2¤> не соответствует налоговому назначению амортизации (<¤3¤>)'"), ОбъектУчета, НалоговоеНазначениеОбъекта, НалоговоеНазначениеЗатрат) + СтрокаСообщенияДоп;
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ);			
				
			КонецЕсли; 
			
		ИначеЕсли НалоговоеНазначениеЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая 
			  ИЛИ НалоговоеНазначениеЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
			  
			  // здесь НалоговоеНазначениеОбъекта - не обл. НДС (хоз или не хоз)
			  
			  СтрокаСообщения = Локализация.СтрШаблон(НСтр("ru = 'Налоговое назначение объекта ¤1¤ <¤2¤> не соответствует налоговому назначению амортизации (<¤3¤>)'; uk = 'Налоговое назначение объекта ¤1¤ <¤2¤> не соответствует налоговому назначению амортизации (<¤3¤>)'"), ОбъектУчета, НалоговоеНазначениеОбъекта, НалоговоеНазначениеЗатрат) + СтрокаСообщенияДоп;
			  ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ);			
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСоответствиеНалоговогоНазначенияАмортизации

Процедура ПроверитьСоответствиеНалоговогоНазначенияОбъектов(ОбъектУчетаКт, ОбъектУчетаДт, НалоговоеНазначениеКт, НалоговоеНазначениеДт, Отказ = Ложь, Заголовок = "") Экспорт
	
	СтрокаОбъектУчетаКт = "";
	Если ТипЗнч(ОбъектУчетаКт) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
		СтрокаОбъектУчетаКт = НСтр("ru='объекта строительства';uk='объекта строительства'");
	ИначеЕсли ТипЗнч(ОбъектУчетаКт) = Тип("СправочникСсылка.Номенклатура") Тогда	
		СтрокаОбъектУчетаКт = НСтр("ru='оборудования';uk='обладнання'");
	КонецЕсли;	

	СтрокаОбъектУчетаДт = "";
	
	Если ТипЗнч(ОбъектУчетаДт) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
		СтрокаОбъектУчетаДт = НСтр("ru='объекта строительства';uk='объекта строительства'");
	ИначеЕсли ТипЗнч(ОбъектУчетаДт) = Тип("СправочникСсылка.Номенклатура") Тогда	
		СтрокаОбъектУчетаДт = НСтр("ru='оборудования';uk='обладнання'");
	Иначе	
		СтрокаОбъектУчетаДт = НСтр("ru='основного средства';uk='основного средства'");
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(НалоговоеНазначениеКт) Тогда
		
		Возврат;
		
	ИначеЕсли НалоговоеНазначениеДт = НалоговоеНазначениеКт Тогда
		
		Возврат;
		
	ИначеЕсли НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
			
		Если  НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая
			И НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность Тогда
			СтрокаСообщения = Локализация.СтрШаблон(НСтр("ru='Налоговое назначение ¤1¤ <¤2¤> не соответствует налоговому назначению ¤3¤ <¤4¤>';uk='Налоговое назначение ¤1¤ <¤2¤> не соответствует налоговому назначению ¤3¤ <¤4¤>'"), СтрокаОбъектУчетаКт, НалоговоеНазначениеКт, СтрокаОбъектУчетаДт, НалоговоеНазначениеДт);
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);			
		КонецЕсли;
		
	ИначеЕсли НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая Тогда
		
		Если  НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая Тогда
			СтрокаСообщения = Локализация.СтрШаблон(НСтр("ru='Налоговое назначение ¤1¤ <¤2¤> не соответствует налоговому назначению ¤3¤ <¤4¤>';uk='Налоговое назначение ¤1¤ <¤2¤> не соответствует налоговому назначению ¤3¤ <¤4¤>'"), СтрокаОбъектУчетаКт, НалоговоеНазначениеКт, СтрокаОбъектУчетаДт, НалоговоеНазначениеДт);
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);			
		КонецЕсли;
		
	ИначеЕсли     (НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально)
			  ИЛИ (НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая)
				Тогда
		// здесь НалоговоеНазначениеКт - не обл. НДС (хоз или не хоз)
		
		СтрокаСообщения = Локализация.СтрШаблон(НСтр("ru='Налоговое назначение ¤1¤ <¤2¤> не соответствует налоговому назначению ¤3¤ <¤4¤>';uk='Налоговое назначение ¤1¤ <¤2¤> не соответствует налоговому назначению ¤3¤ <¤4¤>'"), СтрокаОбъектУчетаКт, НалоговоеНазначениеКт, СтрокаОбъектУчетаДт, НалоговоеНазначениеДт);
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);			
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСоответствиеНалоговогоНазначенияОбъектов

Процедура ПроверитьСоответствиеНалоговогоНазначенияАмортизацииОбъекта(ОбъектУчета, СпособОтраженияРасходовПоАмортизации, НалоговоеНазначение, Отказ = Ложь, Заголовок = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(СпособОтраженияРасходовПоАмортизации) Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаНапр Из СпособОтраженияРасходовПоАмортизации.Способы Цикл
		
		СтрокаСообщенияДоп = " (Способ отражения: """ + СпособОтраженияРасходовПоАмортизации + """, строка №" + СтрокаНапр.НомерСтроки + ")";
		
		ПроверитьСоответствиеНалоговогоНазначенияАмортизации(ОбъектУчета, СтрокаНапр.НалоговоеНазначениеДоходовИЗатрат, НалоговоеНазначение, Отказ, СтрокаСообщенияДоп);
		
	КонецЦикла;	
		
КонецПроцедуры // ПроверитьСоответствиеНалоговогоНазначенияОбъектов



///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА АМОРТИЗАЦИИ НМА

// Расчитывает сумму амортизации по указаному Нематериальному активу по упр учету
//
// Параметры
//  НематериальныйАктив                         - СправочникСсылка.НематериальныеАктивы - НА, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   ТаблицаЗначений начисленной амортизации
//
Функция РасчетАмортизацииНМАУпр(ДатаРасчета, НематериальныйАктив = Неопределено,
	                                ВыдаватьСообщения = Истина, Отказ = Ложь) Экспорт


	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета"           , Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Амортизация"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАмортизации.Колонки.Добавить("Местонахождение", 			Новый ОписаниеТипов("СправочникСсылка.Подразделения"));

	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоГода",    НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоКвартала",	НачалоКвартала(ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("ГраницаНачалоПериода",	Новый Граница(НачалоМесяца(ДатаРасчета),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериода200911" , Дата(2009,11,01));
	Запрос.УстановитьПараметр("СостояниеВвода", Перечисления.ВидыСостоянийНМА.ПринятКУчету);
	
	Если НематериальныйАктив = Неопределено Тогда
		
		ТекстУсловия 	= "";
		ТекстУсловияГДЕ = "";
		
	Иначе
		
		Запрос.УстановитьПараметр("СписокНМА", НематериальныйАктив);
		ТекстУсловия 	= "НематериальныйАктив В (&СписокНМА)";
		ТекстУсловияГДЕ = "И НачислениеАмортизации.НематериальныйАктив В (&СписокНМА)";
		
	КонецЕсли;
	
	Запрос.Текст =
	"
	|ВЫБРАТЬ
	|	СостоянияНМА.НематериальныйАктив  			КАК НематериальныйАктив,
	|	СостоянияНМА.Период  						КАК ДатаСостояния
	|ПОМЕСТИТЬ
	|   СписокНМАПринятыхВТекущемМесяце
	|ИЗ	
	|	РегистрСведений.СостоянияНМА КАК СостоянияНМА
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
	|		            &КонецПериода,
	|		            " + ТекстУсловия + ") КАК НачислениеАмортизации
	|	ПО НачислениеАмортизации.НематериальныйАктив = СостоянияНМА.НематериальныйАктив
	|		И (НачислениеАмортизации.НачислятьАмортизацию)
	|		И СостоянияНМА.Состояние = &СостояниеВвода
	|		И (СостоянияНМА.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|		И (СостоянияНМА.Период > &НачалоПериода200911)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ПервоначальныеСведения.НематериальныйАктив                         КАК НематериальныйАктив,
	|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведения.НематериальныйАктив) 		   КАК НематериальныйАктивПредставление,
	|	ПервоначальныеСведения.НематериальныйАктив.Код 					   КАК Код,
	|	ПервоначальныеСведения.НачислятьАмортизацию                        КАК НачислятьАмортизацию,
	|	ПервоначальныеСведения.СпособНачисленияАмортизации                 КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведения.СрокПолезногоИспользования                  КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимость                     КАК СтоимостьДляВычисленияАмортизации,
	|	ПервоначальныеСведения.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведения.ЛиквидационнаяСтоимость                     КАК ЛиквидационнаяСтоимость,
	|	ПервоначальныеСведения.Период                                      КАК Период,
	|	ЕСТЬNULL(СтоимостьНМА.СтоимостьОстаток, 0)                                          
	|		- ЕСТЬNULL(СтоимостьНМА.АмортизацияОстаток, 0) 					   КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьНачалоГода.СтоимостьОстаток, 0) 
	|		- ЕСТЬNULL(СтоимостьНачалоГода.АмортизацияОстаток, 0)          	   КАК СтоимостьНаНачалоГода,
	|	ЕСТЬNULL(СтоимостьНачалоКвартала.СтоимостьОстаток, 0) 
	|		- ЕСТЬNULL(СтоимостьНачалоКвартала.АмортизацияОстаток, 0)          КАК СтоимостьНаНачалоКвартала,
	|	ЕСТЬNULL(ВыработкаНМА.КоличествоОборот, 0)                         КАК ТекущийОбъемПродукцииРабот,
	|	СпособыОтраженияРасходов.СпособОтраженияРасходов                   КАК СпособыОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(Амортизация.АмортизацияОборот, 0)                         КАК АмортизацияОборот,
	|	МестонахождениеНМА.Местонахождение                                 КАК Местонахождение,
	|	ПерваяАмортизация.ДатаПервойАмортизации                            КАК ДатаПервойАмортизации
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
	|		            &ГраницаНачалоПериода,
	|		            " + ТекстУсловия + ") КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ                                                                              
	|			РегистрНакопления.ВыработкаНМА.Обороты(
	|			                  &НачалоПериода,
	|			                  &КонецПериода, ,
	|			                  " + ТекстУсловия + ") КАК ВыработкаНМА
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ВыработкаНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.СтоимостьНМА.Остатки(&КонецПериода, " + ТекстУсловия + ") КАК СтоимостьНМА
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СтоимостьНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрНакопления.СтоимостьНМА.Остатки(
	|			                  &НачалоГода, " + ТекстУсловия + ") КАК СтоимостьНачалоГода
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СтоимостьНачалоГода.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрНакопления.СтоимостьНМА.Остатки(
	|			                  &НачалоКвартала, " + ТекстУсловия + ") КАК СтоимостьНачалоКвартала
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СтоимостьНачалоКвартала.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМА.СрезПоследних(
	|		                    &НачалоПериода,
	|		                    " + ТекстУсловия + ") КАК СпособыОтраженияРасходов
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СпособыОтраженияРасходов.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.СтоимостьНМА.Обороты(&НачалоПериода, 
	|			                  &КонецПериода, , " + ТекстУсловия + ") КАК Амортизация
	|		ПО ПервоначальныеСведения.НематериальныйАктив = Амортизация.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.МестонахождениеНМА.СрезПоследних(
	|			                &КонецПериода, " + ТекстУсловия + ") КАК МестонахождениеНМА
	|		ПО ПервоначальныеСведения.НематериальныйАктив = МестонахождениеНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			(ВЫБРАТЬ
	|				НачислениеАмортизации.НематериальныйАктив КАК НематериальныйАктив,
	|				МИНИМУМ(НачислениеАмортизации.Период)  КАК ДатаПервойАмортизации
	|			ИЗ
	|				РегистрСведений.ПервоначальныеСведенияНМА КАК НачислениеАмортизации
	|			ГДЕ
	|				НачислениеАмортизации.НачислятьАмортизацию
	|				" + ТекстУсловияГде + "
	|		
	|			СГРУППИРОВАТЬ ПО
	|				НачислениеАмортизации.НематериальныйАктив) КАК ПерваяАмортизация
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ПерваяАмортизация.НематериальныйАктив
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив                 КАК НематериальныйАктив,
	|	ПРЕДСТАВЛЕНИЕ(СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив) 	КАК НематериальныйАктивПредставление,
	|	СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив.Код 			КАК Код,
	|	ПервоначальныеСведения.НачислятьАмортизацию                        	КАК НачислятьАмортизацию,
	|	ПервоначальныеСведения.СпособНачисленияАмортизации                 	КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведения.СрокПолезногоИспользования                  	КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимость                     	КАК СтоимостьДляВычисленияАмортизации,
	|	ПервоначальныеСведения.ОбъемПродукцииРаботДляВычисленияАмортизации 	КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведения.ЛиквидационнаяСтоимость                     	КАК ЛиквидационнаяСтоимость,
	|	ПервоначальныеСведения.Период                                      	КАК Период,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимость 						КАК СтоимостьКонечныйОстаток,
	|	0          	   														КАК СтоимостьНаНачалоГода,
	|	0          															КАК СтоимостьНаНачалоКвартала,
	|	ЕСТЬNULL(ВыработкаНМА.КоличествоОборот, 0)                         	КАК ТекущийОбъемПродукцииРабот,
	|	СпособыОтраженияРасходов.СпособОтраженияРасходов                   	КАК СпособыОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(Амортизация.АмортизацияОборот, 0)                         	КАК АмортизацияОборот,
	|	МестонахождениеНМА.Местонахождение                                 	КАК Местонахождение,
	|	NULL                            									КАК ДатаПервойАмортизации
	|ИЗ
	|	СписокНМАПринятыхВТекущемМесяце
	|	ЛЕВОЕ СОЕДИНЕНИЕ                                                                              
	|		РегистрСведений.ПервоначальныеСведенияНМА.СрезПервых(
	|			&НачалоПериода,
	|		    НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК ПервоначальныеСведения
	|	ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = ПервоначальныеСведения.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ                                                                              
	|		РегистрНакопления.ВыработкаНМА.Обороты(
	|	        &НачалоПериода,
	|	        &КонецПериода, ,
	|	        НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК ВыработкаНМА
	|	ПО ПервоначальныеСведения.НематериальныйАктив = ВыработкаНМА.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМА.СрезПервых(
	|	                    &НачалоПериода,
	|	                    НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК СпособыОтраженияРасходов
	|	ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = СпособыОтраженияРасходов.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.СтоимостьНМА.Обороты(&НачалоПериода, 
	|		                  &КонецПериода, , НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК Амортизация
	|	ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = Амортизация.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.МестонахождениеНМА.СрезПервых(
	|		                &НачалоПериода, НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК МестонахождениеНМА
	|	ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = МестонахождениеНМА.НематериальныйАктив
	| ГДЕ ПервоначальныеСведения.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.Производственный)
	|";
	ВыборкаПоНМА = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоНМА.Следующий() Цикл
		
		ПредставлениеНМА = СокрЛП(ВыборкаПоНМА.НематериальныйАктивПредставление)+ " (" + СокрЛП(ВыборкаПоНМА.Код) + ")";
		ТекстСообщения = "Упр. расчет амортизации: для нематериального актива " + ПредставлениеНМА;
		
		ТекстСообщенияНМА = "Упр. расчет амортизации: нематериальный актив " + ПредставлениеНМА;
		
		ТекстСообщенияПоСпособу = "Упр. расчет амортизации: для нематериального актива " + ПредставлениеНМА + " при расчете по способу " + ВыборкаПоНМА.СпособНачисленияАмортизации;
		
		Если НЕ ВыборкаПоНМА.НачислятьАмортизацию  Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияНМА + " не подлежит амортизации.");
				
			КонецЕсли;

			Продолжить;
			
		КонецЕсли;
		
		Если (ВыборкаПоНМА.АмортизацияОборот > 0) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьИнформацию(ТекстСообщения + " амортизация в этом месяце уже начислялась.");
				
			КонецЕсли;
			
			Продолжить; // по указанному НМА в этом месяце уже начисляли амортизацию 
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СпособНачисленияАмортизации) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьИнформацию(ТекстСообщения + " не указан способ амортизации.");
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьИнформацию(ТекстСообщения + " стоимость для вычисления амортизации равна 0.");
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		СуммаАмортизации = 0;
		
		СтоимостьДляВычисленияАмортизации 			= ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации;
		ЛиквидационнаяСтоимость						= ВыборкаПоНМА.ЛиквидационнаяСтоимость;
		АмортизируемаяСтоимость	 					= СтоимостьДляВычисленияАмортизации - ЛиквидационнаяСтоимость;
		СрокИспользованияДляВычисленияАмортизации	= ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации;
		ТекущийОбъемПродукцииРабот					= ВыборкаПоНМА.ТекущийОбъемПродукцииРабот;
		ОбъемПродукцииРаботДляВычисленияАмортизации	= ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации;
		ДатаПервойАмортизации                       = ВыборкаПоНМА.ДатаПервойАмортизации;
		
		СтоимостьКонечныйОстаток					= ВыборкаПоНМА.СтоимостьКонечныйОстаток;
		
		Если (ЛиквидационнаяСтоимость <> 0) 
		   И (ЛиквидационнаяСтоимость >= СтоимостьКонечныйОстаток) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьИнформацию(Локализация.СтрШаблон("Упр. расчет амортизации: остаточная стоимость нематериального актива ¤1¤ достигла ликвидационной <¤2¤>, амортизация не начислена.",
				                             ВыборкаПоНМА.НематериальныйАктив, ЛиквидационнаяСтоимость));
											 
			КонецЕсли;
			
            Продолжить;
			
		КонецЕсли;
		
		Если ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Прямолинейный Тогда

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияПоСпособу + " не указан срок полезного использования");
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			СуммаАмортизации = АмортизируемаяСтоимость / СрокИспользованияДляВычисленияАмортизации;

		ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный Тогда

			Если ОбъемПродукцииРаботДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияПоСпособу + " не указан предполагаемый объем выработки.");
									 
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			СуммаАмортизации = АмортизируемаяСтоимость * ТекущийОбъемПродукцииРабот / ОбъемПродукцииРаботДляВычисленияАмортизации;

		ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшенияОстатка Тогда

			Если ЛиквидационнаяСтоимость = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияПоСпособу + " не указана ликвидационная стоимость.");
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияПоСпособу + " не указан срок полезного использования.");
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если Год(ВыборкаПоНМА.Период) = Год(ДатаРасчета) Тогда
				
				СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации;
				
			Иначе
				
				СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьНаНачалоГода;
				
			КонецЕсли;
			
			Если ДатаПервойАмортизации = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияПоСпособу + " не определилась дата ввода в эксплуатацию.");
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			РазностьЛет = Год(ДатаРасчета) - Год(ДатаПервойАмортизации);
			
			Если РазностьЛет > 0 Тогда
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации 
				                                   - РазностьЛет * 12
				                                   + Месяц(ДатаПервойАмортизации)
			ИначеЕсли СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации;
												   
			Иначе
				
				ОсталосьЭксплуатироватьВЭтомГоду = 0;
												   
			КонецЕсли;
			
			Если (ОсталосьЭксплуатироватьВЭтомГоду < 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
				
				// Последний год применяем прямолинейный метод
				
				СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
				
			ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
				
				СуммаГодовойАмортизации = СтоимостьИтоговая * (1 - Pow(ЛиквидационнаяСтоимость / СтоимостьДляВычисленияАмортизации,
				                                                       12 / СрокИспользованияДляВычисленияАмортизации));
				
			Иначе // Срок использования исчерпан
				
				СуммаГодовойАмортизации = 0;
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияПоСпособу + " срок использования исчерпан.");
					
				КонецЕсли;
			
			КонецЕсли;
			
			СуммаАмортизации  = СуммаГодовойАмортизации / 12;

		ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УскоренногоУменьшенияОстатка Тогда
			
			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияПоСпособу + " не указан срок полезного использования.");
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			Если СрокИспользованияДляВычисленияАмортизации <= 24 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон("Упр. расчет амортизации: для нематериального актива ¤1¤ при расчете по способу ¤2¤ указан срок полезного использования <¤3¤> мес.!"
"Для корректного начисления амортизации срок использования должен быть более 24 месяца.",
					ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации, СрокИспользованияДляВычисленияАмортизации),);
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Год(ВыборкаПоНМА.Период) = Год(ДатаРасчета) Тогда
				
				СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации;
				
			Иначе
				
				СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьНаНачалоГода;
				
			КонецЕсли;
			
			Если ДатаПервойАмортизации = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияПоСпособу + " не определилась дата ввода в эксплуатацию.");
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			РазностьЛет = Год(ДатаРасчета) - Год(ДатаПервойАмортизации);
			
			Если РазностьЛет > 0 Тогда
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации 
				                                   - РазностьЛет * 12
				                                   + Месяц(ДатаПервойАмортизации)
												   
			ИначеЕсли СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации;
												   
			Иначе
				
				ОсталосьЭксплуатироватьВЭтомГоду = 0;
												   
			КонецЕсли;
			
			Если (ОсталосьЭксплуатироватьВЭтомГоду <= 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
				
				// Последний год применяем прямолинейный метод
				
				СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
				
			ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
				
				СуммаГодовойАмортизации = 2 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / СрокИспользованияДляВычисленияАмортизации * 12;
				
			Иначе // Срок использования исчерпан
				
				СуммаГодовойАмортизации = 0;
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияПоСпособу + " срок использования исчерпан.");
					
				КонецЕсли;
			
			КонецЕсли;
			
			СуммаАмортизации  = СуммаГодовойАмортизации / 12;
			
		ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Кумулятивный Тогда

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияПоСпособу + " не указан срок полезного использования.");
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			Если ДатаПервойАмортизации = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияПоСпособу + " не определилась дата первой амортизации.");
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			ЧислоЛетПользования       = Макс(1,СрокИспользованияДляВычисленияАмортизации / 12);
			ЧислоЛетПользования       = ЧислоЛетПользования + ?(ЧислоЛетПользования 
			                                                    - Цел(ЧислоЛетПользования) = 0, 0, 1); // округляем к наибольшему целому
			
			ГодИспользования          = Год(ДатаРасчета) - Год(ДатаПервойАмортизации) + 1;
			
			Если Месяц(ДатаПервойАмортизации) >= Месяц(ДатаРасчета) Тогда
				
				ГодИспользования	  = ГодИспользования - 1;
				
			КонецЕсли; 

			СуммаГодовойАмортизации   = АмортизируемаяСтоимость * (ЧислоЛетПользования - ГодИспользования + 1)
					/ (ЧислоЛетПользования * (ЧислоЛетПользования + 1) / 2 );
				
			СуммаАмортизации = СуммаГодовойАмортизации / 12;
	
		Иначе 
			
			Если ВыдаватьСообщения  Тогда
			
				ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон("Упр. расчет амортизации: для нематериального актива ¤1¤ установлен способ расчета амортизации, не поддерживаемый в бухгалтерском учете (¤2¤)!", ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации), 
								 Отказ);
			
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;

		СуммаАмортизации  = Макс(0, Мин(СуммаАмортизации, СтоимостьКонечныйОстаток - ЛиквидационнаяСтоимость));

		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОбъектУчета            = ВыборкаПоНМА.НематериальныйАктив;
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоНМА.СпособыОтраженияРасходовПоАмортизации;
    	СтрокаАмортизации.Амортизация            = СуммаАмортизации;
		СтрокаАмортизации.Местонахождение 		 = ВыборкаПоНМА.Местонахождение;

		Если СуммаАмортизации = 0 И ВыдаватьСообщения Тогда
			
			ОбщегоНазначения.СообщитьИнформацию(ТекстСообщения + " амортизация равна 0.");
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииНМАУпр()

// Расчитывает сумму амортизации по указаному Нематериальному активу по бух/нал учету
//
// Параметры
//  НематериальныйАктив                         - СправочникСсылка.НематериальныеАктивы - НА, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   ТаблицаЗначений начисленной амортизации
//
Функция РасчетАмортизацииНМАРегл(ДатаРасчета, Организация, НематериальныйАктив = Неопределено, ВыдаватьСообщения = Истина, Отказ = Ложь) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета"           , Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчета"     		, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизации"    	, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",            Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Амортизация"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАмортизации.Колонки.Добавить("АмортизацияНУ"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАмортизации.Колонки.Добавить("НалоговоеНазначение"	, Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаАмортизации.Колонки.Добавить("Местонахождение", 			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоГода",		НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("ГраницаНачалоПериода",	Новый Граница(НачалоМесяца(ДатаРасчета),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",	КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Списан",	        Перечисления.ВидыСостоянийНМА.Списан);
	Запрос.УстановитьПараметр("НачалоПериода200911" , Дата(2009,11,01));
	Запрос.УстановитьПараметр("СостояниеВвода", Перечисления.ВидыСостоянийНМА.ПринятКУчету);
	
	Если НематериальныйАктив = Неопределено Тогда
		
		ТекстУсловия          = "";
		ТекстУсловияВыработки = "";
		
	Иначе
		
		Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
		ТекстУсловия          = "И НематериальныйАктив В (&НематериальныйАктив)";
		ТекстУсловияВыработки = "НематериальныйАктив В (&НематериальныйАктив)";
		
	КонецЕсли;

	Запрос.Текст = 
	"
	|ВЫБРАТЬ
	|	СостоянияНМА.НематериальныйАктив  			КАК НематериальныйАктив,
	|	СостоянияНМА.Период  						КАК ДатаСостояния
	|ПОМЕСТИТЬ
	|   СписокНМАПринятыхВТекущемМесяце
	|ИЗ	
	|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМА
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|		            &КонецПериода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + ") КАК НачислениеАмортизации
	|	ПО НачислениеАмортизации.Организация = СостоянияНМА.Организация
	|		И НачислениеАмортизации.НематериальныйАктив = СостоянияНМА.НематериальныйАктив
	|		И (НачислениеАмортизации.НачислятьАмортизацию)
	|		И СостоянияНМА.Состояние = &СостояниеВвода
	|		И (СостоянияНМА.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|		И (СостоянияНМА.Период > &НачалоПериода200911)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ПервоначальныеСведения.НематериальныйАктив                         КАК НематериальныйАктив,
	|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведения.НематериальныйАктив) 		   КАК НематериальныйАктивПредставление,
	|	ПервоначальныеСведения.НематериальныйАктив.Код 					   КАК Код,
	|	ПервоначальныеСведения.НачислятьАмортизацию                        КАК НачислятьАмортизацию,
	|	ПервоначальныеСведения.СпособНачисленияАмортизации                 КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимость                     КАК СтоимостьДляВычисленияАмортизации,
	|	ПервоначальныеСведения.СрокПолезногоИспользования                  КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНУ.ПервоначальнаяСтоимость, 0)      КАК СтоимостьДляВычисленияАмортизацииНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНУ.СрокПолезногоИспользования, 0)   КАК СрокИспользованияДляВычисленияАмортизацииНУ,
	|	ПервоначальныеСведения.ЛиквидационнаяСтоимость                     КАК ЛиквидационнаяСтоимость,
	|	ПервоначальныеСведения.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведения.Период                                      КАК Период,
	|	ЕСТЬNULL(Амортизация.АмортизацияКонечныйОстаток, 0)                КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(Амортизация.АмортизацияОборот, 0)                         КАК АмортизацияОборот,
	|	ЕСТЬNULL(Амортизация.СтоимостьКонечныйОстаток, 0)                  КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(ВыработкаНМА.КоличествоОборот, 0)                         КАК ТекущийОбъемПродукцииРабот,
	|	ЕСТЬNULL(АмортизацияОстатки.СтоимостьОстаток, 0)
	|	          - ЕСТЬNULL(АмортизацияОстатки.АмортизацияОстаток, 0)     КАК СтоимостьНаНачалоГода,
	|	ПервоначальныеСведенияНУ.Период                                    КАК ПериодНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНУ.НачислятьАмортизацию, ЛОЖЬ)      КАК НачислятьАмортизациюНУ,
	|	ПервоначальныеСведенияНУ.НалоговаяГруппаОС                         КАК НалоговаяГруппаОС,
	|	ПервоначальныеСведенияНУ.НалоговоеНазначение                       КАК НалоговоеНазначение,
	|	ЕСТЬNULL(Амортизация.АмортизацияНУКонечныйОстаток, 0)              КАК АмортизацияКонечныйОстатокНУ,
	|	ЕСТЬNULL(Амортизация.АмортизацияНУОборот, 0)                       КАК АмортизацияОборотНУ,
	|	ЕСТЬNULL(Амортизация.СтоимостьНУКонечныйОстаток, 0)                КАК СтоимостьКонечныйОстатокНУ,
	|	ЕСТЬNULL(АмортизацияОстатки.СтоимостьНУОстаток, 0)
	|	          - ЕСТЬNULL(АмортизацияОстатки.АмортизацияНУОстаток, 0)   КАК СтоимостьНаНачалоГодаНУ,
	|	ПервоеНачислениеАмортизации.ДатаПервойАмортизации                  КАК ДатаПервойАмортизации,
	|	СпособыОтраженияРасходов.СпособОтраженияРасходов                   КАК СпособыОтраженияРасходовПоАмортизации,
	|	МестонахождениеНМА.Местонахождение                                 КАК Местонахождение,
	|	СчетаБухгалтерскогоУчета.СчетУчета                                 КАК СчетУчета,
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации                 КАК СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&ГраницаНачалоПериода,
	|	                Организация = &Организация И НематериальныйАктив В 
	|	                (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	                 	СостояниеНМА.НематериальныйАктив
	|	                 ИЗ	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(&НачалоПериода,
	|	                 	                Организация = &Организация " + ТекстУсловия + ") КАК СостояниеНМА
	|	                 ГДЕ
	|	                 	СостояниеНМА.Состояние <> &Списан))
	|	                КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&ГраницаНачалоПериода,
	|		                                   Организация = &Организация " + ТекстУсловия + ")
	|		                                   КАК ПервоначальныеСведенияНУ
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ПервоначальныеСведенияНУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМАБухгалтерскийУчет.ОстаткиИОбороты(
	|		                                   &НачалоПериода, &КонецПериода, , ,
	|		                                   Организация = &Организация " + ТекстУсловия + ")
	|		                                   КАК Амортизация
	|		ПО ПервоначальныеСведения.НематериальныйАктив = Амортизация.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМАБухгалтерскийУчет.Остатки(&НачалоГода,
	|		                                   Организация = &Организация " + ТекстУсловия + ")
	|		                                   КАК АмортизацияОстатки
	|		ПО ПервоначальныеСведения.НематериальныйАктив = АмортизацияОстатки.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|		                                 &НачалоПериода, Организация = &Организация " + ТекстУсловия + ")
	|		                                 КАК СпособыОтраженияРасходов
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СпособыОтраженияРасходов.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&НачалоПериода,
	|		                                 Организация = &Организация " + ТекстУсловия + ")
	|		                                 КАК СчетаБухгалтерскогоУчета
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СчетаБухгалтерскогоУчета.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|		(ВЫБРАТЬ
	|			ПервоначальныеСведенияОНМА.НематериальныйАктив КАК НематериальныйАктив,
	|			МИНИМУМ(ПервоначальныеСведенияОНМА.Период)     КАК ДатаПервойАмортизации
	|		ИЗ
	|			РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет КАК ПервоначальныеСведенияОНМА
	|		
	|		ГДЕ
	|			ПервоначальныеСведенияОНМА.Организация = &Организация И
	|			ПервоначальныеСведенияОНМА.НачислятьАмортизацию
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПервоначальныеСведенияОНМА.НематериальныйАктив) КАК ПервоеНачислениеАмортизации
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ПервоеНачислениеАмортизации.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(
	|			                &КонецПериода, Организация = &Организация " + ТекстУсловия + ") КАК МестонахождениеНМА
	|		ПО ПервоначальныеСведения.НематериальныйАктив = МестонахождениеНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрНакопления.ВыработкаНМА.Обороты(&НачалоПериода, &КонецПериода, ,
	|			                  " + ТекстУсловияВыработки + ") КАК ВыработкаНМА
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ВыработкаНМА.НематериальныйАктив
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив 				КАК НематериальныйАктив,
	|	ПРЕДСТАВЛЕНИЕ(СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив) 	КАК НематериальныйАктивПредставление,
	|	СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив.Код 			КАК Код,
	|	ПервоначальныеСведения.НачислятьАмортизацию                        	КАК НачислятьАмортизацию,
	|	ПервоначальныеСведения.СпособНачисленияАмортизации                 	КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимость                     	КАК СтоимостьДляВычисленияАмортизации,
	|	ПервоначальныеСведения.СрокПолезногоИспользования                  	КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНУ.ПервоначальнаяСтоимость, 0)       КАК СтоимостьДляВычисленияАмортизацииНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНУ.СрокПолезногоИспользования, 0)    КАК СрокИспользованияДляВычисленияАмортизацииНУ,
	|	ПервоначальныеСведения.ЛиквидационнаяСтоимость                     	КАК ЛиквидационнаяСтоимость,
	|	ПервоначальныеСведения.ОбъемПродукцииРаботДляВычисленияАмортизации 	КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведения.Период                                      	КАК Период,
	|	ЕСТЬNULL(Амортизация.АмортизацияКонечныйОстаток, 0)                 КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(Амортизация.АмортизацияОборот, 0)                          КАК АмортизацияОборот,
	|	ЕСТЬNULL(Амортизация.СтоимостьКонечныйОстаток, 0)                   КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(ВыработкаНМА.КоличествоОборот, 0)                          КАК ТекущийОбъемПродукцииРабот,
	|	0                  													КАК СтоимостьНаНачалоГода,
	|	ПервоначальныеСведенияНУ.Период                                    КАК ПериодНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНУ.НачислятьАмортизацию, ЛОЖЬ)      КАК НачислятьАмортизациюНУ,
	|	ПервоначальныеСведенияНУ.НалоговаяГруппаОС                         КАК НалоговаяГруппаОС,
	|	ПервоначальныеСведенияНУ.НалоговоеНазначение                       КАК НалоговоеНазначение,
	|	ЕСТЬNULL(Амортизация.АмортизацияНУКонечныйОстаток, 0)               КАК АмортизацияКонечныйОстатокНУ,
	|	ЕСТЬNULL(Амортизация.АмортизацияНУОборот, 0)                        КАК АмортизацияОборотНУ,
	|	ЕСТЬNULL(Амортизация.СтоимостьНУКонечныйОстаток, 0)                 КАК СтоимостьКонечныйОстатокНУ,
	|	0                  													КАК СтоимостьНаНачалоГодаНУ,
	|	NULL                  												КАК ДатаПервойАмортизации,
	|	СпособыОтраженияРасходов.СпособОтраженияРасходов                   	КАК СпособыОтраженияРасходовПоАмортизации,
	|	МестонахождениеНМА.Местонахождение                                 	КАК Местонахождение,
	|	СчетаБухгалтерскогоУчета.СчетУчета                                 	КАК СчетУчета,
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации                 	КАК СчетНачисленияАмортизации
	|ИЗ
	|	СписокНМАПринятыхВТекущемМесяце
	|	ЛЕВОЕ СОЕДИНЕНИЕ                                                                              
	|		РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПервых(
	|			&НачалоПериода,
	|		    Организация = &Организация
	|		    И НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК ПервоначальныеСведения
	|	ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = ПервоначальныеСведения.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&ГраницаНачалоПериода,
	|		                                   Организация = &Организация И НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце))
	|		                                   КАК ПервоначальныеСведенияНУ
	|		ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = ПервоначальныеСведенияНУ.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ                                                                              
	|		РегистрНакопления.ВыработкаНМА.Обороты(
	|	        &НачалоПериода,
	|	        &КонецПериода, ,
	|	        НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК ВыработкаНМА
	|	ПО ПервоначальныеСведения.НематериальныйАктив = ВыработкаНМА.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПервых(
	|	                    &НачалоПериода,
	|	                    Организация = &Организация
	|	                    И НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК СпособыОтраженияРасходов
	|	ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = СпособыОтраженияРасходов.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМАБухгалтерскийУчет.ОстаткиИОбороты(
	|	                                   &НачалоПериода, &КонецПериода, , ,
	|	                                   Организация = &Организация И НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце))
	|	                                   КАК Амортизация
	|	ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = Амортизация.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПервых(
	|	                    &НачалоПериода,
	|	                    Организация = &Организация
	|	                    И НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК СчетаБухгалтерскогоУчета
	|	ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = СчетаБухгалтерскогоУчета.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПервых(
	|		                &НачалоПериода, Организация = &Организация И НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК МестонахождениеНМА
	|	ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = МестонахождениеНМА.НематериальныйАктив
	| ГДЕ ПервоначальныеСведения.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.Производственный)
	|";
	ВыборкаПоНА = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоНА.Следующий() Цикл

		ПредставлениеНМА = СокрЛП(ВыборкаПоНА.НематериальныйАктивПредставление)+ " (" + СокрЛП(ВыборкаПоНА.Код) + ")";
		ТекстСообщения = "Бух. расчет амортизации: для нематериального актива " + ПредставлениеНМА;
		ТекстСообщенияНМА = "Бух. расчет амортизации: нематериальный актив " + ПредставлениеНМА;
		
		ТекстСообщенияНУ = "Бух. расчет амортизации: для нематериального актива " + ПредставлениеНМА;
		ТекстСообщенияНМАНУ = "Бух. расчет амортизации: нематериальный актив " + ПредставлениеНМА;
		
		Если НЕ ВыборкаПоНА.НачислятьАмортизацию  Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияНМА + " не подлежит амортизации.");
				
			КонецЕсли;

			Продолжить;
			
		КонецЕсли;

		Если (ВыборкаПоНА.АмортизацияОборот <> 0) И (ВыборкаПоНА.АмортизацияОборот <> Null)  Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьИнформацию(ТекстСообщения + " амортизация в этом месяце уже начислялась");
				
			КонецЕсли;

			// по указанному НА в этом месяце уже начисляли амортизацию 
			Продолжить;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоНА.СпособНачисленияАмортизации) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " не указан способ амортизации", Отказ);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоНА.СтоимостьДляВычисленияАмортизации) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " стоимость равна 0", Отказ);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;

		НачислятьАмортизациюНУ 	= ВыборкаПоНА.НачислятьАмортизациюНУ;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоНА.СтоимостьДляВычисленияАмортизацииНУ) И НачислятьАмортизациюНУ Тогда
			
			НачислятьАмортизациюНУ = Ложь;	
			
		КонецЕсли;	
		
		
		СуммаАмортизации 	= 0;
		СуммаАмортизацииНУ 	= 0;
		
		СтоимостьДляВычисленияАмортизации 			= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоНА.СтоимостьДляВычисленияАмортизации);
		ЛиквидационнаяСтоимость						= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоНА.ЛиквидационнаяСтоимость);
		АмортизируемаяСтоимость	 					= СтоимостьДляВычисленияАмортизации - ЛиквидационнаяСтоимость;
		СрокИспользованияДляВычисленияАмортизации	= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоНА.СрокИспользованияДляВычисленияАмортизации);
		
		СтоимостьДляВычисленияАмортизацииНУ 		= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоНА.СтоимостьДляВычисленияАмортизацииНУ);
		АмортизируемаяСтоимостьНУ	 				= СтоимостьДляВычисленияАмортизацииНУ - ЛиквидационнаяСтоимость;
		СрокИспользованияДляВычисленияАмортизацииНУ	= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоНА.СрокИспользованияДляВычисленияАмортизацииНУ);
		
		ТекущийОбъемПродукцииРабот					= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоНА.ТекущийОбъемПродукцииРабот);
		ОбъемПродукцииРаботДляВычисленияАмортизации	= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоНА.ОбъемПродукцииРаботДляВычисленияАмортизации);
		ДатаПервойАмортизации                       = ВыборкаПоНА.ДатаПервойАмортизации;
		
		Если ВыборкаПоНА.ДатаПервойАмортизации = NULL Тогда
	    	ДатаПервойАмортизацииНУ 				= NULL;
		Иначе	
			ДатаПервойАмортизацииНУ 				= Макс(ВыборкаПоНА.ДатаПервойАмортизации, '20110331');
		КонецЕсли;	
		
		АмортизацияКонечныйОстаток					= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоНА.АмортизацияКонечныйОстаток);
		СтоимостьКонечныйОстаток					= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоНА.СтоимостьКонечныйОстаток);
		ОстаточнаяСтоимость                         = СтоимостьКонечныйОстаток - АмортизацияКонечныйОстаток;
		
		АмортизацияКонечныйОстатокНУ				= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоНА.АмортизацияКонечныйОстатокНУ);
		СтоимостьКонечныйОстатокНУ					= ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоНА.СтоимостьКонечныйОстатокНУ);
		ОстаточнаяСтоимостьНУ                       = СтоимостьКонечныйОстатокНУ - АмортизацияКонечныйОстатокНУ;
		
		Если (ЛиквидационнаяСтоимость <> 0) 
		   И (ЛиквидационнаяСтоимость >= ОстаточнаяСтоимость) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ОбщегоНазначения.СообщитьИнформацию(Локализация.СтрШаблон(НСтр("ru='Бух. расчет амортизации: остаточная стоимость нематериального актива ¤1¤ достигла ликвидационной <¤2¤>, амортизация не начислена.';uk='Бух. розрахунок амортизації: залишкова вартість нематеріального активу ¤1¤ досягла ліквідаційної <¤2¤>, амортизація не нарахована.'"), 
							ПредставлениеНМА, ЛиквидационнаяСтоимость));
				
			КонецЕсли;
			
            Продолжить;
			
		КонецЕсли;
		
		Если ВыборкаПоНА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Прямолинейный Тогда

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " + ВыборкаПоНА.СпособНачисленияАмортизации + " не указан срок полезного использования!", Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			СуммаАмортизации   = АмортизируемаяСтоимость / СрокИспользованияДляВычисленияАмортизации;
			
			Если НачислятьАмортизациюНУ Тогда
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияНУ + " при расчете по способу " + ВыборкаПоНА.СпособНачисленияАмортизации + " не указан срок полезного использования!", Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				СуммаАмортизацииНУ  = АмортизируемаяСтоимостьНУ / СрокИспользованияДляВычисленияАмортизацииНУ;
			КонецЕсли;	

		ИначеЕсли ВыборкаПоНА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный Тогда

			Если ОбъемПродукцииРаботДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " + ВыборкаПоНА.СпособНачисленияАмортизации + " не указан предполагаемый объем выработки!", Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			СуммаАмортизации = АмортизируемаяСтоимость * ТекущийОбъемПродукцииРабот / ОбъемПродукцииРаботДляВычисленияАмортизации;
			
			СуммаАмортизацииНУ = АмортизируемаяСтоимостьНУ * ТекущийОбъемПродукцииРабот / ОбъемПродукцииРаботДляВычисленияАмортизации;

		ИначеЕсли ВыборкаПоНА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшенияОстатка Тогда

			Если ЛиквидационнаяСтоимость = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " + ВыборкаПоНА.СпособНачисленияАмортизации + " не указана ликвидационная стоимость!", Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если СтоимостьДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " + ВыборкаПоНА.СпособНачисленияАмортизации + " не указана первоначальная стоимость!", Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " + ВыборкаПоНА.СпособНачисленияАмортизации + " не указан срок полезного использования!", Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если Год(ВыборкаПоНА.Период) = Год(ДатаРасчета) Тогда
				
				СтоимостьИтоговая = СтоимостьДляВычисленияАмортизации;
				
			Иначе
				
				СтоимостьИтоговая = ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоНА.СтоимостьНаНачалоГода);
				
			КонецЕсли;
			
 			Если ДатаПервойАмортизации = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Бух. расчет амортизации: для нематериального актива ¤1¤ при расчете по способу ¤2¤ не определилась дата первой амортизации!';uk='Бух. розрахунок амортизації: для нематеріального активу ¤1¤ при розрахунку способом ¤2¤ не визначилася дата першої амортизації!'"),
					                           ПредставлениеНМА, ВыборкаПоНА.СпособНачисленияАмортизации), Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			РазностьЛет = Год(ДатаРасчета) - Год(ДатаПервойАмортизации);
			
			Если РазностьЛет > 0 Тогда
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации 
				                                   - РазностьЛет * 12
				                                   + Месяц(ДатаПервойАмортизации)
												   
			ИначеЕсли СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации;
												   
			Иначе
				
				ОсталосьЭксплуатироватьВЭтомГоду = 0;
												   
			КонецЕсли;
													   
			Если (ОсталосьЭксплуатироватьВЭтомГоду < 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
				
				// Последний год применяем прямолинейный метод
				
				СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
				
			ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
				
				СуммаГодовойАмортизации = СтоимостьИтоговая * (1 - Pow(ЛиквидационнаяСтоимость / СтоимостьДляВычисленияАмортизации,
				                                                       12 / СрокИспользованияДляВычисленияАмортизации));
																	   
			Иначе // Срок использования исчерпан
				
				СуммаГодовойАмортизации = 0;
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(Локализация.СтрШаблон(НСтр("ru='Бух. расчет амортизации: для нематериального актива ¤1¤ при расчете по способу ¤2¤ срок использования исчерпан!';uk='Бух. розрахунок амортизації: для нематеріального активу ¤1¤ при розрахунку способом ¤2¤ строк використання вичерпаний!'"),
					                        ПредставлениеНМА, ВыборкаПоНА.СпособНачисленияАмортизации));
					
				КонецЕсли;
				
			КонецЕсли;

			СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			
			
			Если НачислятьАмортизациюНУ Тогда
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияНУ + " при расчете по способу " + ВыборкаПоНА.СпособНачисленияАмортизации + " не указан срок полезного использования!", Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				Если Год(ВыборкаПоНА.ПериодНУ) = Год(ДатаРасчета) Тогда
					
					СтоимостьИтоговая = СтоимостьДляВычисленияАмортизацииНУ;
					
				Иначе
					
					СтоимостьИтоговая = ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоНА.СтоимостьНаНачалоГодаНУ);
					
				КонецЕсли;
				
	 			Если ДатаПервойАмортизацииНУ = NULL Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Нал. расчет амортизации: для нематериального актива ¤1¤ при расчете по способу ¤2¤ не определилась дата первой амортизации!';uk='Под. розрахунок амортизації: для нематеріального активу ¤1¤ при розрахунку способом ¤2¤ не визначилася дата першої амортизації!'"),
						                           ПредставлениеНМА, ВыборкаПоНА.СпособНачисленияАмортизации), Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				РазностьЛет = Год(ДатаРасчета) - Год(ДатаПервойАмортизацииНУ);
				
				Если РазностьЛет > 0 Тогда
					
					ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизацииНУ 
					                                   - РазностьЛет * 12
					                                   + Месяц(ДатаПервойАмортизацииНУ)
													   
				ИначеЕсли СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
					
					ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизацииНУ;
													   
				Иначе
					
					ОсталосьЭксплуатироватьВЭтомГоду = 0;
													   
				КонецЕсли;
														   
				Если (ОсталосьЭксплуатироватьВЭтомГоду < 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
					
					// Последний год применяем прямолинейный метод
					
					СуммаГодовойАмортизацииНУ = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
					
				ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
					
					СуммаГодовойАмортизацииНУ = СтоимостьИтоговая * (1 - Pow(ЛиквидационнаяСтоимость / СтоимостьДляВычисленияАмортизацииНУ,
					                                                       12 / СрокИспользованияДляВычисленияАмортизацииНУ));
																		   
				Иначе // Срок использования исчерпан
					
					СуммаГодовойАмортизацииНУ = 0;
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(Локализация.СтрШаблон(НСтр("ru='Нал. расчет амортизации: для нематериального актива ¤1¤ при расчете по способу ¤2¤ срок использования исчерпан!';uk='Бух. розрахунок амортизації: для нематеріального активу ¤1¤ при розрахунку способом ¤2¤ строк використання вичерпаний!'"),
						                        ПредставлениеНМА, ВыборкаПоНА.СпособНачисленияАмортизации));
						
					КонецЕсли;
					
				КонецЕсли;

				СуммаАмортизацииНУ   = СуммаГодовойАмортизацииНУ / 12;
				
			КонецЕсли;

		ИначеЕсли ВыборкаПоНА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УскоренногоУменьшенияОстатка Тогда
			
			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " + ВыборкаПоНА.СпособНачисленияАмортизации + " не указан срок полезного использования!", Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			Если СрокИспользованияДляВычисленияАмортизации <= 24 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Бух. расчет амортизации: для нематериального актива ¤1¤ при расчете по способу ¤2¤ указан срок полезного использования <¤3¤> мес.!"
					"Для корректного начисления амортизации срок использования должен быть более 24 месяца.';uk='Бух. розрахунок амортизації: для нематеріального активу ¤1¤ при розрахунку способом ¤2¤ зазначений строк корисного використання <¤3¤> міс.!"
					"Для коректного нарахування амортизації строк використання повинен бути більше 24 місяців.'"),
					ПредставлениеНМА, ВыборкаПоНА.СпособНачисленияАмортизации, СрокИспользованияДляВычисленияАмортизации),);
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Год(ВыборкаПоНА.Период) = Год(ДатаРасчета) Тогда
				
				СтоимостьИтоговая = СтоимостьДляВычисленияАмортизации;
				
			Иначе
				
				СтоимостьИтоговая = ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоНА.СтоимостьНаНачалоГода);
				
			КонецЕсли;
			
			Если ДатаПервойАмортизации = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Бух. расчет амортизации: для нематериального актива ¤1¤ при расчете по способу ¤2¤ не определилась дата первой амортизации!';uk='Бух. розрахунок амортизації: для нематеріального активу ¤1¤ при розрахунку способом ¤2¤ не визначилася дата першої амортизації!'"),
					                           ПредставлениеНМА, ВыборкаПоНА.СпособНачисленияАмортизации), Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			РазностьЛет = Год(ДатаРасчета) - Год(ДатаПервойАмортизации);
			
			Если РазностьЛет > 0 Тогда
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации 
				                                   - РазностьЛет * 12
				                                   + Месяц(ДатаПервойАмортизации)
												   
			ИначеЕсли СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации;
												   
			Иначе
				
				ОсталосьЭксплуатироватьВЭтомГоду = 0;
												   
			КонецЕсли;
			
			Если (ОсталосьЭксплуатироватьВЭтомГоду <= 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
				
				// Последний год применяем прямолинейный метод
				
				СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
				
			ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
				
				СуммаГодовойАмортизации = 2 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / СрокИспользованияДляВычисленияАмортизации * 12;
				
			Иначе // Срок использования исчерпан
				
				СуммаГодовойАмортизации = 0;
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(Локализация.СтрШаблон(НСтр("ru='Бух. расчет амортизации: для нематериального актива ¤1¤ при расчете по способу ¤2¤ срок использования исчерпан!';uk='Бух. розрахунок амортизації: для нематеріального активу ¤1¤ при розрахунку способом ¤2¤ строк використання вичерпаний!'"),
					                       ПредставлениеНМА, ВыборкаПоНА.СпособНачисленияАмортизации));
					
				КонецЕсли;
			
			КонецЕсли;
			
			СуммаАмортизации   = СуммаГодовойАмортизации / 12;
			
			
			Если НачислятьАмортизациюНУ Тогда
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияНУ + " при расчете по способу " + ВыборкаПоНА.СпособНачисленияАмортизации + " не указан срок полезного использования!", Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ <= 24 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Нал. расчет амортизации: для нематериального актива ¤1¤ при расчете по способу ¤2¤ указан срок полезного использования <¤3¤> мес.!"
						"Для корректного начисления амортизации срок использования должен быть более 24 месяца.';uk='Под. розрахунок амортизації: для нематеріального активу ¤1¤ при розрахунку способом ¤2¤ зазначений строк корисного використання <¤3¤> міс.!"
						"Для коректного нарахування амортизації строк використання повинен бути більше 24 місяців.'"),
						ПредставлениеНМА, ВыборкаПоНА.СпособНачисленияАмортизации, СрокИспользованияДляВычисленияАмортизацииНУ),);
						
					КонецЕсли;
					
				КонецЕсли; 
				
				Если Год(ВыборкаПоНА.ПериодНУ) = Год(ДатаРасчета) Тогда
					
					СтоимостьИтоговая = СтоимостьДляВычисленияАмортизацииНУ;
					
				Иначе
					
					СтоимостьИтоговая = ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаПоНА.СтоимостьНаНачалоГодаНУ);
					
				КонецЕсли;
				
				Если ДатаПервойАмортизацииНУ = NULL Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон(НСтр("ru='Нал. расчет амортизации: для нематериального актива ¤1¤ при расчете по способу ¤2¤ не определилась дата первой амортизации!';uk='Бух. розрахунок амортизації: для нематеріального активу ¤1¤ при розрахунку способом ¤2¤ не визначилася дата першої амортизації!'"),
						                           ПредставлениеНМА, ВыборкаПоНА.СпособНачисленияАмортизации), Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				РазностьЛет = Год(ДатаРасчета) - Год(ДатаПервойАмортизацииНУ);
				
				Если РазностьЛет > 0 Тогда
					
					ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизацииНУ 
					                                   - РазностьЛет * 12
					                                   + Месяц(ДатаПервойАмортизацииНУ)
													   
				ИначеЕсли СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
					
					ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизацииНУ;
													   
				Иначе
					
					ОсталосьЭксплуатироватьВЭтомГоду = 0;
													   
				КонецЕсли;
				
				Если (ОсталосьЭксплуатироватьВЭтомГоду <= 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
					
					// Последний год применяем прямолинейный метод
					
					СуммаГодовойАмортизацииНУ = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
					
				ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
					
					СуммаГодовойАмортизацииНУ = 2 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / СрокИспользованияДляВычисленияАмортизацииНУ * 12;
					
				Иначе // Срок использования исчерпан
					
					СуммаГодовойАмортизацииНУ = 0;
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(Локализация.СтрШаблон(НСтр("ru='Нал. расчет амортизации: для нематериального актива ¤1¤ при расчете по способу ¤2¤ срок использования исчерпан!';uk='Бух. розрахунок амортизації: для нематеріального активу ¤1¤ при розрахунку способом ¤2¤ строк використання вичерпаний!'"),
						                       ПредставлениеНМА, ВыборкаПоНА.СпособНачисленияАмортизации));
						
					КонецЕсли;
				
				КонецЕсли;
				
				СуммаАмортизацииНУ   = СуммаГодовойАмортизацииНУ / 12;
				
			КонецЕсли;
			
		ИначеЕсли ВыборкаПоНА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Кумулятивный Тогда

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " при расчете по способу " + ВыборкаПоНА.СпособНачисленияАмортизации + " не указан срок полезного использования!", Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			Если ДатаПервойАмортизации = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					ОбщегоНазначения.СообщитьИнформацию(ТекстСообщения + " при расчете по способу " + ВыборкаПоНА.СпособНачисленияАмортизации +  " не определилась дата первой амортизации!");
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			ЧислоЛетПользования       = Макс(1, СрокИспользованияДляВычисленияАмортизации / 12);
			ЧислоЛетПользования       = ЧислоЛетПользования + ?(ЧислоЛетПользования - Цел(ЧислоЛетПользования) = 0, 0, 1); // округляем к наибольшему целому
			
			ГодИспользования          = Год(ДатаРасчета) - Год(ДатаПервойАмортизации) + 1;
			
			Если Месяц(ДатаПервойАмортизации) >= Месяц(ДатаРасчета) Тогда
				
				ГодИспользования	  = ГодИспользования - 1;
				
			КонецЕсли; 

			СуммаГодовойАмортизации   = АмортизируемаяСтоимость * (ЧислоЛетПользования - ГодИспользования + 1)
					/ (ЧислоЛетПользования * (ЧислоЛетПользования + 1) / 2 );
										  
			СуммаАмортизации = СуммаГодовойАмортизации / 12;
			
			Если НачислятьАмортизациюНУ Тогда
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияНУ + " при расчете по способу " + ВыборкаПоНА.СпособНачисленияАмортизации + " не указан срок полезного использования!", Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				Если ДатаПервойАмортизацииНУ = NULL Тогда
					
					Если ВыдаватьСообщения Тогда
						
						ОбщегоНазначения.СообщитьИнформацию(ТекстСообщенияНУ + " при расчете по способу " + ВыборкаПоНА.СпособНачисленияАмортизации +  " не определилась дата первой амортизации!");
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;

				ЧислоЛетПользования       = Макс(1, СрокИспользованияДляВычисленияАмортизацииНУ / 12);
				ЧислоЛетПользования       = ЧислоЛетПользования + ?(ЧислоЛетПользования - Цел(ЧислоЛетПользования) = 0, 0, 1); // округляем к наибольшему целому
				
				ГодИспользования          = Год(ДатаРасчета) - Год(ДатаПервойАмортизацииНУ) + 1;
				
				Если Месяц(ДатаПервойАмортизацииНУ) >= Месяц(ДатаРасчета) Тогда
					
					ГодИспользования	  = ГодИспользования - 1;
					
				КонецЕсли; 

				СуммаГодовойАмортизацииНУ   = АмортизируемаяСтоимостьНУ * (ЧислоЛетПользования - ГодИспользования + 1)
						/ (ЧислоЛетПользования * (ЧислоЛетПользования + 1) / 2 );
											  
				СуммаАмортизацииНУ = СуммаГодовойАмортизацииНУ / 12;
				
			КонецЕсли;	

		Иначе 
			
			Если ВыдаватьСообщения  Тогда
			
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " установлен способ расчета амортизации, не поддерживаемый в бухгалтерском учете (" + ВыборкаПоНА.СпособНачисленияАмортизации +  ")!", Отказ);
			
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;

 		СуммаАмортизации = Макс(0, Мин(СуммаАмортизации, ОстаточнаяСтоимость - ЛиквидационнаяСтоимость));

		Если НачислятьАмортизациюНУ Тогда
	 		СуммаАмортизацииНУ = Макс(0, Мин(СуммаАмортизацииНУ, ОстаточнаяСтоимостьНУ - ЛиквидационнаяСтоимость));
		Иначе	
			СуммаАмортизацииНУ = 0;
		КонецЕсли;	
		
		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОбъектУчета            = ВыборкаПоНА.НематериальныйАктив;
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоНА.СпособыОтраженияРасходовПоАмортизации;
    	СтрокаАмортизации.СчетУчета	             = ВыборкаПоНА.СчетУчета;
    	СтрокаАмортизации.СчетАмортизации	     = ВыборкаПоНА.СчетНачисленияАмортизации;
		СтрокаАмортизации.ИмяСубконто            = "НематериальныеАктивы";
    	СтрокаАмортизации.Амортизация            = СуммаАмортизации;
    	СтрокаАмортизации.АмортизацияНУ          = СуммаАмортизацииНУ;
		СтрокаАмортизации.НалоговоеНазначение 	 = ВыборкаПоНА.НалоговоеНазначение;
		СтрокаАмортизации.Местонахождение 		 = ВыборкаПоНА.Местонахождение;

		Если СуммаАмортизации = 0 И ВыдаватьСообщения Тогда
			
			ОбщегоНазначения.СообщитьИнформацию(ТекстСообщения + " амортизация равна 0");
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииНМАБухРегл()


// Процедура дополняет табличную часть колонками
// СчетУчетаБУ, СчетНачисленияАмортизацииБУ,
// ВидНалоговойДеятельности_НМА  для нематериальных активов. 
//
// Параметры
//  ДатаДока                     – Тип: Дата, МоментВремени, Граница – Дата, на которую получать результаты
//                 
//  ТекОрганизация               – Тип: СправочникСсылка.Организации – Организация
//                 
//  ТаблицаПоНМА                  – Тип: ТаблицаЗначений – Таблица, в которую необходимо добавить колонки
//                 
//  СтруктураШапкиДокумента      – Тип: Структура - параметры документа
//                 
//  Отказ                        – Тип: Булево – признак отказа
//                 
//  Заголовок                    – Тип: Строка – заголовок вызывающего документа,
//                                               для сообщения об ошибке
//                 
//  ИмяКолонкиНМА                 – Тип: Строка – Наименование колонки, в которой содержаться нематериальные активы
//                 
//
Процедура ДополнитьТабличнуюЧастьСведениямиОбНМАБухНалогРегл(ДатаДока, ТекОрганизация, ТаблицаПоНМА, 
	                                                         СтруктураШапкиДокумента, Отказ, Заголовок,
														     ИмяКолонкиНМА = "НематериальныйАктив") Экспорт
	
	ТаблицаПоНМА.Колонки.Добавить("СчетУчетаБУ"                , Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаПоНМА.Колонки.Добавить("СчетНачисленияАмортизацииБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ЕстьНалоговыйУчет = (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС);
	
		
	 	ТаблицаПоНМА.Колонки.Добавить("ВидНалоговойДеятельности_НМА", Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговойДеятельности"));
		ТаблицаПоНМА.Колонки.Добавить("НалоговоеНазначение_НМА"		, Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		ТаблицаПоНМА.Колонки.Добавить("НалоговаяГруппаОС"           , Новый ОписаниеТипов("СправочникСсылка.НалоговыеГруппыОсновныхСредств"));
		
	
	СписокНМА = ТаблицаПоНМА.ВыгрузитьКолонку(ИмяКолонкиНМА);
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", ТекОрганизация);
	Запрос.УстановитьПараметр("ТекДата",        ДатаДока);
	Запрос.УстановитьПараметр("СписокНМА",       СписокНМА);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаУчетаБУ.НематериальныйАктив                  КАК НМА_БУ,
	|	СчетаУчетаБУ.СчетУчета                            КАК СчетУчетаБУ,
	|	СчетаУчетаБУ.СчетНачисленияАмортизации            КАК СчетНачисленияАмортизацииБУ" + ?(ЕстьНалоговыйУчет, ",
	|	ПервоначальныеСведенияНУ.НематериальныйАктив      КАК НМА_НУ,
	|	ПервоначальныеСведенияНУ.НалоговоеНазначение 	  КАК НалоговоеНазначение_НМА,
	|	ПервоначальныеСведенияНУ.НалоговоеНазначение.ВидНалоговойДеятельности КАК ВидНалоговойДеятельности_НМА,
	|	ПервоначальныеСведенияНУ.НалоговаяГруппаОС        КАК НалоговаяГруппаОС", "") + "
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&ТекДата,
	|	                Организация = &ТекОрганизация И НематериальныйАктив В (&СписокНМА))
	|	                КАК СчетаУчетаБУ" + ?(ЕстьНалоговыйУчет, ",
	|	   
	|		ПОЛНОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	|		                    &ТекДата, Организация = &ТекОрганизация 
	|		                    И НематериальныйАктив В (&СписокНМА))
	|		                    КАК ПервоначальныеСведенияНУ
	|		ПО СчетаУчетаБУ.НематериальныйАктив = ПервоначальныеСведенияНУ.НематериальныйАктив", "");
	ТаблицаСведенийНМА  = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из ТаблицаПоНМА Цикл
		
		ТекНМА =  СтрокаТЧ[ИмяКолонкиНМА];
		Колонки = ?(ЕстьНалоговыйУчет, "НМА_БУ, НМА_НУ", "НМА_БУ");
		СтрокаСведений = ТаблицаСведенийНМА.Найти(ТекНМА, Колонки);	
		
		Если СтрокаСведений = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + (ТаблицаПоНМА.Индекс(СтрокаТЧ) + 1) + "." + Символы.ПС + Символы.Таб
							 + "Регл. учет: По нематериальному активу """ + ТекНМА + """ и организации """ + ТекОрганизация + """ нет информации"
							 + Символы.ПС + Символы.Таб + "в регистрах сведений:"
							 + Символы.ПС + Символы.Таб + """Счета бухгалтерского учета нематериальных активов""" + ?(ЕстьНалоговыйУчет, ""
							 + Символы.ПС + Символы.Таб + """Первоначальные сведения о НМА (налоговый учет)""", "")
							 + Символы.ПС + Символы.Таб + "Возможно, оно не принято к учету.", Отказ, Заголовок);
			Продолжить
			
		КонецЕсли;
		
		СчетУчетаБУ = СтрокаСведений.СчетУчетаБУ;
		
		Если НЕ ЗначениеЗаполнено(СчетУчетаБУ) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + (ТаблицаПоНМА.Индекс(СтрокаТЧ) + 1) + "." + Символы.ПС + Символы.Таб
							+ "Бух. учет: По нематериальному активу """ + ТекНМА + """ и организации """ + ТекОрганизация + """ не заполнен счет учета "
							+ Символы.ПС + Символы.Таб + "в регистре сведений ""Счета бухгалтерского учета нематериальных активов""", Отказ, Заголовок);
			
		Иначе
			
			СтрокаТЧ.СчетУчетаБУ = СчетУчетаБУ;
			
		КонецЕсли;
		
		СчетНачисленияАмортизацииБУ = СтрокаСведений.СчетНачисленияАмортизацииБУ;
		
		Если НЕ ЗначениеЗаполнено(СчетНачисленияАмортизацииБУ) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + (ТаблицаПоНМА.Индекс(СтрокаТЧ) + 1) + "." + Символы.ПС + Символы.Таб
							+ "Бух. учет: По нематериальному активу """ + ТекНМА + """ и организации """ + ТекОрганизация + """ не заполнен счет начисления амортизации"
							+ Символы.ПС + Символы.Таб + "в регистре сведений ""Счета бухгалтерского учета нематериальных активов""", Отказ, Заголовок);
			
		Иначе
			
			СтрокаТЧ.СчетНачисленияАмортизацииБУ = СчетНачисленияАмортизацииБУ;
			
		КонецЕсли;
			
		Если ЕстьНалоговыйУчет Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаСведений.НМА_НУ) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Строка " + (ТаблицаПоНМА.Индекс(СтрокаТЧ) + 1) + "." + Символы.ПС + Символы.Таб
								 + "Налог. учет: По нематериальному активу """ + ТекНМА + """ и организации """ + ТекОрганизация + """ нет информации"
								 + Символы.ПС + Символы.Таб + "в регистре сведений:"
								 + Символы.ПС + Символы.Таб + """Первоначальные сведения о НМА (налоговый учет)"""
								 + Символы.ПС + Символы.Таб + "Возможно, оно не принято к учету.", Отказ, Заголовок);
				Продолжить;
				
			КонецЕсли;
			
			ВидНалоговойДеятельности_НМА = СтрокаСведений.ВидНалоговойДеятельности_НМА;
			НалоговоеНазначение_НМА = СтрокаСведений.НалоговоеНазначение_НМА;
			
			Если НЕ ЗначениеЗаполнено(НалоговоеНазначение_НМА) Тогда
				
					//Вид налоговой деятельности должен быть заполнен обязательно
					ОбщегоНазначения.СообщитьОбОшибке("Строка " + (ТаблицаПоНМА.Индекс(СтрокаТЧ) + 1) + "." + Символы.ПС + Символы.Таб
									 + "Налог. учет: По нематериальному активу """ + ТекНМА + """ и организации """ + ТекОрганизация + """ не заполнено налоговое назначение"
									 + Символы.ПС + Символы.Таб + "в регистре сведений ""Первоначальные сведения о НМА (налоговый учет)""", Отказ, Заголовок);
				
			Иначе
									 
				СтрокаТЧ.ВидНалоговойДеятельности_НМА = ВидНалоговойДеятельности_НМА;
					
			КонецЕсли;
			
			СтрокаТЧ.НалоговоеНазначение_НМА = НалоговоеНазначение_НМА;
			
			СтрокаТЧ.НалоговаяГруппаОС = СтрокаСведений.НалоговаяГруппаОС;

		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры // ДополнитьТабличнуюЧастьСведениямиОбНМАБухНалогРегл()

// Заполняет табличную часть нематериальных активов следующими значениями:
// (Имя колонки нематериальный активов должно быть "НематериальныйАктив")
//
// 	Бухгалтерский учет:
//	 	СтоимостьБУ;
//	 	АмортизацияБУ;
//	 	АмортизацияЗаМесяцБУ;
//
// 	Налоговый учет:
//	 	СтоимостьНУ;
//	 	АмортизацияНУ;
//	 	АмортизацияЗаМесяцНУ;
//
// Параметры
//
//  ДатаРасчета                   - Дата - Дата расчета амортизации
//
//  НМА                            – Табличная часть – табличная часть документа для заполнения
//                 
//  ТекОрганизация                – Тип: СправочникСсылка.Организации – Организация
//                 
//  ОтражатьВБухгалтерскомУчете   – Булево 
//                 
//  ОтражатьВНалоговомУчете       – Булево 
//                 
//  ДатаИтогов                    – Дата, МоментВремени, Граница - дата получения итогов 
//                 
Процедура ЗаполнитьТабличнуюЧастьНематериальныхАктивов(ДатаРасчета, НМА, ТекОрганизация, 
												ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, ДатаИтогов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", ТекОрганизация);
	Запрос.УстановитьПараметр("ДатаИтогов",     ДатаИтогов);
	
	СписокНМА = НМА.ВыгрузитьКолонку("НематериальныйАктив");
	Запрос.УстановитьПараметр("СписокНМА",          СписокНМА);
	Запрос.УстановитьПараметр("ВидСубконто1",       ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Запрос.УстановитьПараметр("СчетНМА",            ПланыСчетов.Налоговый.ПервоначальнаяСтоимостьНМА);
	Запрос.УстановитьПараметр("СчетАмортизацииНМА", ПланыСчетов.Налоговый.АмортизацияНМА);
	Запрос.Текст = "ВЫБРАТЬ
	               |	АмортизацияНМА_УУ.НематериальныйАктив КАК НМА_УУ,
	               |	АмортизацияНМА_УУ.СтоимостьОстаток КАК СтоимостьУУ,
	               |	АмортизацияНМА_УУ.АмортизацияОстаток КАК АмортизацияУУ,
	               |	АмортизацияНМА.НематериальныйАктив КАК НМА_БУ,
	               |	АмортизацияНМА.СтоимостьОстаток КАК СтоимостьБУ,
	               |	АмортизацияНМА.АмортизацияОстаток КАК АмортизацияБУ,
	               |	АмортизацияНМА.СтоимостьНУОстаток КАК СтоимостьНУ,
	               |	АмортизацияНМА.АмортизацияНУОстаток КАК АмортизацияНУ
	               |ИЗ
	               |	РегистрНакопления.СтоимостьНМАБухгалтерскийУчет.Остатки(
	               |			&ДатаИтогов,
	               |			Организация = &ТекОрганизация
	               |				И НематериальныйАктив В (&СписокНМА)) КАК АмортизацияНМА
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА.Остатки(&ДатаИтогов, НематериальныйАктив В (&СписокНМА)) КАК АмортизацияНМА_УУ
	               |		ПО (АмортизацияНМА_УУ.НематериальныйАктив = АмортизацияНМА.НематериальныйАктив)";
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество()>0 Тогда
		
		Если ОтражатьВУправленческомУчете Тогда
			
			ТаблицаАмортизацииУпр = РасчетАмортизацииНМАУпр(ДатаРасчета, СписокНМА);
			
		КонецЕсли;	
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			
			ТаблицаАмортизацииБух = РасчетАмортизацииНМАРегл(ДатаРасчета, ТекОрганизация, СписокНМА);
			
		КонецЕсли;
		
		Для каждого Строка Из НМА Цикл
			
			СтрокаТЗ = ТЗ.Найти(Строка.НематериальныйАктив, "НМА_УУ, НМА_БУ");
			
			Если СтрокаТЗ = Неопределено Тогда
				
				//управленческий учет
				Строка.СтоимостьУУ          = 0;
				Строка.АмортизацияУУ        = 0;
				Строка.АмортизацияЗаМесяцУУ = 0;
				
				//бухгалтерский учет
				Строка.СтоимостьБУ          = 0;
				Строка.АмортизацияБУ        = 0;
				Строка.АмортизацияЗаМесяцБУ = 0;
				
				//налоговый учет
				Строка.СтоимостьНУ          = 0;
				Строка.АмортизацияНУ        = 0;
				Строка.АмортизацияЗаМесяцНУ = 0;
				
			Иначе
				// В соответствующие поля строки запишем данные из запроса
				
				//управленческий учет
				Если ОтражатьВУправленческомУчете Тогда
					
					Строка.СтоимостьУУ          = СтрокаТЗ.СтоимостьУУ;
					Строка.АмортизацияУУ        = СтрокаТЗ.АмортизацияУУ;
					СтрокаТаблицаАмортизацииУпр = ТаблицаАмортизацииУпр.Найти(Строка.НематериальныйАктив, "ОбъектУчета");
					Строка.АмортизацияЗаМесяцУУ = ?(СтрокаТаблицаАмортизацииУпр = Неопределено, 0, СтрокаТаблицаАмортизацииУпр.Амортизация);
					
				Иначе
					
					Строка.СтоимостьУУ          = 0;
					Строка.АмортизацияУУ        = 0;
					Строка.АмортизацияЗаМесяцУУ = 0;
					
				КонецЕсли;
				
				//бухгалтерский учет
				Если ОтражатьВБухгалтерскомУчете Тогда
					
					Строка.СтоимостьБУ          = СтрокаТЗ.СтоимостьБУ;
					Строка.АмортизацияБУ        = СтрокаТЗ.АмортизацияБУ;
					СтрокаТаблицаАмортизацииБух = ТаблицаАмортизацииБух.Найти(Строка.НематериальныйАктив, "ОбъектУчета");
					Строка.АмортизацияЗаМесяцБУ = ?(СтрокаТаблицаАмортизацииБух = Неопределено, 0, СтрокаТаблицаАмортизацииБух.Амортизация);
					
					//налоговый учет
					Строка.СтоимостьНУ          = СтрокаТЗ.СтоимостьНУ;
					Строка.АмортизацияНУ        = СтрокаТЗ.АмортизацияНУ;
					Строка.АмортизацияЗаМесяцНУ = ?(СтрокаТаблицаАмортизацииБух = Неопределено, 0, СтрокаТаблицаАмортизацииБух.АмортизацияНУ);
					
				Иначе
					
					Строка.СтоимостьБУ          = 0;
					Строка.АмортизацияБУ        = 0;
					Строка.АмортизацияЗаМесяцБУ = 0;
					
					//налоговый учет
					Строка.СтоимостьНУ          = 0;
					Строка.АмортизацияНУ        = 0;
					Строка.АмортизацияЗаМесяцНУ = 0;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Сообщить("Данные для заполнения отсутствуют.");
		
	КонецЕсли;
	
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьНематериальныхАктивов()

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ НМА

// Поцедура проверяет дублирование состояний НМА. 
// Если определенное состояние было установлено ранее, устанавливать его второй раз нельзя (в пределах одной организации)
Процедура ПроверкаДублированияЗаписейСостоянийНМАУпр(Период, ТаблицаЗаписей,Отказ,Заголовок) Экспорт
	
	Если ТаблицаЗаписей.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	НаборСостояний = Новый Массив();
	НМА_ПоСостояниям  = Новый Массив();
	Для каждого Состояние из Перечисления.ВидыСостоянийНМА Цикл
		НаборСостояний.Добавить(Состояние);
		НМА_ПоСостояниям.Добавить(Новый массив());
	КонецЦикла;
	
	Для Каждого ТекЗапись из ТаблицаЗаписей Цикл
		
		Для А = 1 по НаборСостояний.количество() Цикл
			Если ТекЗапись.Состояние = НаборСостояний[А-1] тогда	
				НМА_ПоСостояниям[А-1].Добавить(ТекЗапись.НематериальныйАктив);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекущийРегистратор = ТаблицаЗаписей.Отбор.Регистратор.Значение;
	
	Для А = 1 по НаборСостояний.Количество() Цикл
		Если НМА_ПоСостояниям[А-1].Количество()>0 тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияНМАСрезПоследних.НематериальныйАктив,
			|	СостоянияНМАСрезПоследних.Регистратор
			|ИЗ
			|	РегистрСведений.СостоянияНМА.СрезПоследних(
			|		&Период,
			|		НематериальныйАктив В (&НематериальныеАктивы)
			|		    И Состояние = &Состояние
			|		    И (НЕ Регистратор = &ТекущийРегистратор)) КАК СостоянияНМАСрезПоследних";

			Запрос.УстановитьПараметр("Состояние",	НаборСостояний[А-1]);
			Запрос.УстановитьПараметр("НематериальныеАктивы",НМА_ПоСостояниям[А-1]);
			Запрос.УстановитьПараметр("ТекущийРегистратор",ТекущийРегистратор);
			Запрос.УстановитьПараметр("Период",новый МоментВремени(Период,ТекущийРегистратор));

			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл
				ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон("Для НМА <¤1¤> уже зафиксировано состояние <¤2¤> по управленческому учету"
" документом <¤3¤>. Дата состояния: ¤4¤", Строка(Выборка.НематериальныйАктив), Строка(НаборСостояний[А-1]), Строка(Выборка.Регистратор), Формат(Выборка.Регистратор.Дата,"ДФ=dd.MM.yyyy"))
									,Отказ,Заголовок);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Поцедура проверяет дублирование состояний НМА. 
// Если определенное состояние было установлено ранее, устанавливать его второй раз нельзя (в пределах одной организации)
Процедура ПроверкаДублированияЗаписейСостоянийНМА(Организация, Период, ТаблицаЗаписей,Отказ,Заголовок) Экспорт
	
	Если ТаблицаЗаписей.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	НаборСостояний = Новый Массив();
	НМА_ПоСостояниям  = Новый Массив();
	Для каждого Состояние из Перечисления.ВидыСостоянийНМА Цикл
		НаборСостояний.Добавить(Состояние);
		НМА_ПоСостояниям.Добавить(Новый массив());
	КонецЦикла;
	
	Для Каждого ТекЗапись из ТаблицаЗаписей Цикл
		
		Для А = 1 по НаборСостояний.количество() Цикл
			Если ТекЗапись.Состояние = НаборСостояний[А-1] тогда	
				НМА_ПоСостояниям[А-1].Добавить(ТекЗапись.НематериальныйАктив);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекущийРегистратор = ТаблицаЗаписей.Отбор.Регистратор.Значение;
	
	Для А = 1 по НаборСостояний.Количество() Цикл
		Если НМА_ПоСостояниям[А-1].Количество()>0 тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив,
			|	СостоянияНМАОрганизацийСрезПоследних.Регистратор
			|ИЗ
			|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
			|		&Период,
			|		Организация = &Организация
			|		    И НематериальныйАктив В (&НематериальныеАктивы)
			|		    И Состояние = &Состояние
			|		    И (НЕ Регистратор = &ТекущийРегистратор)) КАК СостоянияНМАОрганизацийСрезПоследних";

			Запрос.УстановитьПараметр("Организация",Организация );
			Запрос.УстановитьПараметр("Состояние",	НаборСостояний[А-1]);
			Запрос.УстановитьПараметр("НематериальныеАктивы",НМА_ПоСостояниям[А-1]);
			Запрос.УстановитьПараметр("ТекущийРегистратор",ТекущийРегистратор);
			Запрос.УстановитьПараметр("Период",новый МоментВремени(Период,ТекущийРегистратор));

			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл
				ОбщегоНазначения.СообщитьОбОшибке(Локализация.СтрШаблон("Для НМА <¤1¤> в организации <¤2¤> уже зафиксировано состояние <¤3¤> по бухгалтерскому учету"
" документом <¤4¤>. Дата состояния: ¤5¤", Строка(Выборка.НематериальныйАктив), Строка(Организация), Строка(НаборСостояний[А-1]), Строка(Выборка.Регистратор), Формат(Выборка.Регистратор.Дата,"ДФ=dd.MM.yyyy"))
									,Отказ,Заголовок);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ПРОДАЖИ ОС И НМА


// Устанавливает НалоговаяГруппаОС 
// по значению СчетУчетаБУ 
// или по значению СчетУчетаБУВнеоборотногоАктива
//
Процедура УстановитьНалоговуюГруппуОС(СчетУчетаБУ, НалоговаяГруппаОС) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		Возврат;
	КонецЕсли;	
	
	ПланХозрасчетный = ПланыСчетов.Хозрасчетный;
	
	Счет10   = ПланХозрасчетный.ОсновныеСредства;
	
	Счет101 	= ПланХозрасчетный.ЗемельныеУчастки;
	Счет102 	= ПланХозрасчетный.КапитальныеЗатратыПоУлучшениюЗемель;
	Счет103 	= ПланХозрасчетный.ДомаИСооружения;
	Счет104 	= ПланХозрасчетный.МашиныИОборудование;
	Счет105 	= ПланХозрасчетный.ТранспортныеСредства;
	Счет106 	= ПланХозрасчетный.ИнструментыПриборыИИнвентарь;
	Счет107 	= ПланХозрасчетный.Животные;
	Счет108 	= ПланХозрасчетный.МноголетниеНасаждения;
	Счет109 	= ПланХозрасчетный.ДругиеОсновныеСредстваГруппа;
	
	Счет111 	= ПланХозрасчетный.БиблиотечныеФонды;
	Счет112 	= ПланХозрасчетный.МалоценныеНеоборотныеМатериальныеАктивы;
	Счет113 	= ПланХозрасчетный.ВременныеНетитульныеСооружения;
	Счет114 	= ПланХозрасчетный.ПриродныеРесурсы;
	Счет115 	= ПланХозрасчетный.ИнвентарнаяТара;
	Счет116 	= ПланХозрасчетный.ПредметыПроката;
	Счет117 	= ПланХозрасчетный.ДругиеНеоборотныеМатериальныеАктивы;
	Счет16 		= ПланХозрасчетный.ДолгосрочныеБиологическиеАктивы;
	
	Если СчетУчетаБУ.ПринадлежитЭлементу(Счет101) ИЛИ СчетУчетаБУ = Счет101 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа1;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет102) ИЛИ СчетУчетаБУ = Счет102 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа2;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет103) ИЛИ СчетУчетаБУ = Счет103 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа3;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет104) ИЛИ СчетУчетаБУ = Счет104 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа4;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет105) ИЛИ СчетУчетаБУ = Счет105 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа5;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет106) ИЛИ СчетУчетаБУ = Счет106 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа6;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет107) ИЛИ СчетУчетаБУ = Счет107 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа7;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет108) ИЛИ СчетУчетаБУ = Счет108 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа8;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет109) ИЛИ СчетУчетаБУ.ПринадлежитЭлементу(Счет117) ИЛИ СчетУчетаБУ = Счет109 ИЛИ СчетУчетаБУ = Счет117 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа9;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет111) ИЛИ СчетУчетаБУ = Счет111 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа10;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет112) ИЛИ СчетУчетаБУ = Счет112 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа11;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет113) ИЛИ СчетУчетаБУ = Счет113 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа12;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет114) ИЛИ СчетУчетаБУ = Счет114 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа13;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет115) ИЛИ СчетУчетаБУ = Счет115 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа14;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет116) ИЛИ СчетУчетаБУ = Счет116 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа15;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет16) ИЛИ СчетУчетаБУ = Счет116 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа16;
	КонецЕсли;	
			

КонецПроцедуры // УстановитьНалоговуюГруппуОС()

// Устанавливает НалоговаяГруппаНМА 
// по значению СчетУчетаБУ 
// или по значению СчетУчетаБУВнеоборотногоАктива
//
Процедура УстановитьНалоговуюГруппуНМА(СчетУчетаБУ, НалоговаяГруппаОС) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		Возврат;
	КонецЕсли;	
	
	ПланХозрасчетный = ПланыСчетов.Хозрасчетный;
	
	Счет12   = ПланХозрасчетный.НематериальныеАктивы;
	
	Счет121 	= ПланХозрасчетный.ПраваНаИспользованиеПриродныхРесурсов;
	Счет122 	= ПланХозрасчетный.ПраваНаИспользованиеИмущества;
	Счет123 	= ПланХозрасчетный.ПраваНаЗнакиДляТоваровИУслуг;
	Счет124 	= ПланХозрасчетный.ПраваНаОбъектыПромышленнойСобственности;
	Счет125 	= ПланХозрасчетный.АвторскиеИСмежныеСНимиПрава;
	Счет127 	= ПланХозрасчетный.ДругиеНематериальныеАктивы;
	
	Если СчетУчетаБУ.ПринадлежитЭлементу(Счет121) ИЛИ СчетУчетаБУ = Счет121 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.НМАГруппа1;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет122) ИЛИ СчетУчетаБУ = Счет122 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.НМАГруппа2;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет123) ИЛИ СчетУчетаБУ = Счет123 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.НМАГруппа3;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет124) ИЛИ СчетУчетаБУ = Счет124 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.НМАГруппа4;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет125) ИЛИ СчетУчетаБУ = Счет125 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.НМАГруппа5;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет127) ИЛИ СчетУчетаБУ = Счет127 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.НМАГруппа6;
	КонецЕсли;	
			
КонецПроцедуры // УстановитьНалоговуюГруппуНМА()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура дополняет табличную часть колонками
// СчетУчетаБУ, СчетНачисленияАмортизацииБУ, СчетУчетаНУ, СтатьяАмортизации,
// НалоговаяГруппаОС, Пообъектно, УчитываетсяКакЗапасНУ
// ВидНалоговойДеятельности_ОС и(или) ВидДеятельностиНДС_ОС для основных средств. 
//
// Параметры
//  ДатаДока                     – Тип: Дата, МоментВремени, Граница – Дата, на которую получать результаты
//                 
//  ТекОрганизация               – Тип: СправочникСсылка.Организации – Организация
//                 
//  ТаблицаПоОС                  – Тип: ТаблицаЗначений – Таблица, в которую необходимо добавить колонки
//                 
//  СтруктураШапкиДокумента      – Тип: Структура - параметры документа
//                 
//  Отказ                        – Тип: Булево – признак отказа
//                 
//  Заголовок                    – Тип: Строка – заголовок вызывающего документа,
//                                               для сообщения об ошибке
//                 
//  ИмяКолонкиОсновногоСредства  – Тип: Строка – Наименование колонки, в которой содержаться основные средства
//                 
//
Процедура ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл(ДатаДока, ТекОрганизация, ТаблицаПоОС,
	                                                         СтруктураШапкиДокумента, Отказ, Заголовок,
														     ИмяКолонкиОсновногоСредства = "ОсновноеСредство") Экспорт
	
	ТаблицаПоОС.Колонки.Добавить("СчетУчетаБУ",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаПоОС.Колонки.Добавить("СчетНачисленияАмортизацииБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаПоОС.Колонки.Добавить("НаправлениеБУ"              , Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	
	ЕстьНалогНаПрибыль      = СтруктураШапкиДокумента.ЕстьНалогНаПрибыль;
	ЕстьНДС                 = СтруктураШапкиДокумента.ЕстьНДС;
	ЕстьНалоговыйУчет		= ЕстьНалогНаПрибыль ИЛИ ЕстьНДС;
	
		
		ТаблицаПоОС.Колонки.Добавить("НалоговоеНазначение_ОС",      Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		ТаблицаПоОС.Колонки.Добавить("ВидНалоговойДеятельности_ОС", Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговойДеятельности"));
		ТаблицаПоОС.Колонки.Добавить("НалоговаяГруппаОС",           Новый ОписаниеТипов("СправочникСсылка.НалоговыеГруппыОсновныхСредств"));
		ТаблицаПоОС.Колонки.Добавить("ВидДеятельностиНДС_ОС",       Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиНДС"));
		
	
	ВидНалоговойДеятельностиНеоблагаемая = Справочники.ВидыНалоговойДеятельности.НеОблагаемая;
	
	СписокОС = ТаблицаПоОС.ВыгрузитьКолонку(ИмяКолонкиОсновногоСредства);
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", ТекОрганизация);
	Запрос.УстановитьПараметр("ТекДата",        ДатаДока);
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство          КАК ОС_БУ,
	               |	СчетаБухгалтерскогоУчетаОС.СчетУчета                 КАК СчетУчетаБУ,
	               |	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	               |	СпособыОтраженияБУ.СпособыОтраженияРасходовПоАмортизации КАК НаправлениеБУ" + ?(ЕстьНалоговыйУчет, ",
	               |	ПервоначальныеСведенияОС_НУ.ОсновноеСредство         КАК ОС_НУ,
	               |	ПервоначальныеСведенияОС_НУ.НалоговаяГруппаОС        КАК НалоговаяГруппаОС,
	               |	НачислениеАмортизациНУ.НачислятьАмортизацию          КАК НачислятьАмортизациюНУ,
				   |	НалоговыеНазначенияОС.НалоговоеНазначение 			 			   КАК НалоговоеНазначение_ОС,
	               |	НалоговыеНазначенияОС.НалоговоеНазначение.ВидНалоговойДеятельности КАК ВидНалоговойДеятельности_ОС,
	               |	НалоговыеНазначенияОС.НалоговоеНазначение.ВидДеятельностиНДС       КАК ВидДеятельностиНДС_ОС", "") + "
	               |ИЗ
	               |	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ТекДата, 
				   |	                Организация = &ТекОрганизация И ОсновноеСредство В (&СписокОС)
				   |	                ) КАК СчетаБухгалтерскогоУчетаОС
	               |			ЛЕВОЕ СОЕДИНЕНИЕ 
				   |				РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
				   |				                &ТекДата, Организация = &ТекОрганизация И 
				   |				                ОсновноеСредство В (&СписокОС)) КАК СпособыОтраженияБУ
	               |			ПО СчетаБухгалтерскогоУчетаОС.ОсновноеСредство = СпособыОтраженияБУ.ОсновноеСредство
				   |" + ?(ЕстьНалоговыйУчет, "
				   |	
	               |		ПОЛНОЕ СОЕДИНЕНИЕ 
				   |			РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
				   |			                &ТекДата, Организация = &ТекОрганизация И ОсновноеСредство В (&СписокОС)
				   |			                ) КАК ПервоначальныеСведенияОС_НУ
				   |	
	               |			ЛЕВОЕ СОЕДИНЕНИЕ 
				   |				РегистрСведений.НалоговыеНазначенияОС.СрезПоследних(
				   |				                &ТекДата, Организация = &ТекОрганизация И 
				   |				                ОсновноеСредство В (&СписокОС)) КАК НалоговыеНазначенияОС
	               |			ПО ПервоначальныеСведенияОС_НУ.ОсновноеСредство = НалоговыеНазначенияОС.ОсновноеСредство
				   |	                                                                                                   
	               |			ЛЕВОЕ СОЕДИНЕНИЕ 
				   |				РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(
				   |				                &ТекДата, Организация = &ТекОрганизация И 
				   |				                ОсновноеСредство В (&СписокОС)) КАК НачислениеАмортизациНУ
	               |			ПО ПервоначальныеСведенияОС_НУ.ОсновноеСредство = НачислениеАмортизациНУ.ОсновноеСредство
				   |	
	               |		ПО СчетаБухгалтерскогоУчетаОС.ОсновноеСредство = ПервоначальныеСведенияОС_НУ.ОсновноеСредство", "");
	
	ТаблицаСведенийОС  = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОс =  СтрокаТЧ[ИмяКолонкиОсновногоСредства];
		Колонки = ?(ЕстьНалоговыйУчет, "ОС_БУ, ОС_НУ", "ОС_БУ");
		СтрокаСведений = ТаблицаСведенийОС.Найти(ТекОс, Колонки);	
		
		Если СтрокаСведений = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + (ТаблицаПоОС.Индекс(СтрокаТЧ) + 1) + "." + Символы.ПС + Символы.Таб
							 + "Регл. учет: По основному средству """ + ТекОс + """ и организации """ + ТекОрганизация + """ нет информации"
							 + Символы.ПС + Символы.Таб + "в регистрах сведений:"
							 + Символы.ПС + Символы.Таб + """Счета бухгалтерского учета основных средств""" + ?(ЕстьНалоговыйУчет, ""
							 + Символы.ПС + Символы.Таб + """Первоначальные сведения об основных средствах (налоговый учет)"""
							 + Символы.ПС + Символы.Таб + """Налоговые назначения ОС""", "") 
							 + Символы.ПС + Символы.Таб + "Возможно, оно не принято к учету.", Отказ, Заголовок);
			Продолжить
			
		КонецЕсли;
		
		СчетУчетаБУ = СтрокаСведений.СчетУчетаБУ;
		
		Если НЕ ЗначениеЗаполнено(СчетУчетаБУ) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + (ТаблицаПоОС.Индекс(СтрокаТЧ) + 1) + "." + Символы.ПС + Символы.Таб
							+ "Бух. учет: По основному средству """ + ТекОс + """ и организации """ + ТекОрганизация + """ не заполнен счет учета "
							+ Символы.ПС + Символы.Таб + "в регистре сведений ""Счета бухгалтерского учета основных средств""", Отказ, Заголовок);
			
		Иначе
			
			СтрокаТЧ.СчетУчетаБУ = СчетУчетаБУ;
			
		КонецЕсли;
		
		НаправлениеБУ = СтрокаСведений.НаправлениеБУ;
		
		// Направление будет проверяться при распределении амортизации,
		// поэтому сообщения не выдаются
		Если ЗначениеЗаполнено(НаправлениеБУ) Тогда
			
			СтрокаТЧ.НаправлениеБУ = НаправлениеБУ;
			
		КонецЕсли;
		
		СчетНачисленияАмортизацииБУ = СтрокаСведений.СчетНачисленияАмортизацииБУ;
		
		Если НЕ ЗначениеЗаполнено(СчетНачисленияАмортизацииБУ) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка " + (ТаблицаПоОС.Индекс(СтрокаТЧ) + 1) + "." + Символы.ПС + Символы.Таб
							+ "Бух. учет: По основному средству """ + ТекОс + """ и организации """ + ТекОрганизация + """ не заполнен счет начисления амортизации"
							+ Символы.ПС + Символы.Таб + "в регистре сведений ""Счета бухгалтерского учета основных средств""", Отказ, Заголовок);
			
		Иначе
			
			СтрокаТЧ.СчетНачисленияАмортизацииБУ = СчетНачисленияАмортизацииБУ;
			
		КонецЕсли;
			
			
		Если ЕстьНалогНаПрибыль ИЛИ ЕстьНДС Тогда
			
			НалоговоеНазначение_ОС      = СтрокаСведений.НалоговоеНазначение_ОС;
			ВидНалоговойДеятельности_ОС = СтрокаСведений.ВидНалоговойДеятельности_ОС;
			
			Если НЕ ЗначениеЗаполнено(НалоговоеНазначение_ОС) Тогда
				
				//НалоговоеНазначение_ОС должен быть заполнен обязательно
				ОбщегоНазначения.СообщитьОбОшибке("Строка " + (ТаблицаПоОС.Индекс(СтрокаТЧ) + 1) + "." + Символы.ПС + Символы.Таб
				                 + "Налог. учет: По Основному средству """ + ТекОс + """ и организации """ + ТекОрганизация + """ не заполнено налоговое назначение"
				                 + Символы.ПС + Символы.Таб + "в регистре сведений ""Налоговые назначения ОС""", Отказ, Заголовок);
				
			Иначе
				
				СтрокаТЧ.НалоговоеНазначение_ОС 		= НалоговоеНазначение_ОС;
				СтрокаТЧ.ВидНалоговойДеятельности_ОС 	= ВидНалоговойДеятельности_ОС;
				
			КонецЕсли;
			
			
			Если ЕстьНалогНаПрибыль Тогда
				
				НалоговаяГруппаОС = СтрокаСведений.НалоговаяГруппаОС;
				
				Если НЕ ЗначениеЗаполнено(НалоговаяГруппаОС) Тогда
					
					//ОбщегоНазначения.СообщитьОбОшибке("Строка " + (ТаблицаПоОС.Индекс(СтрокаТЧ) + 1) + "." + Символы.ПС + Символы.Таб
					//				 + "Налог. учет: По основному средству """ + ТекОс + """ и организации """ + ТекОрганизация + """ не заполнена налоговая группа"
					//				 + Символы.ПС + Символы.Таб + "в регистре сведений ""Первоначальные сведения об основных средствах (налоговый учет)""", Отказ, Заголовок);
					
				Иначе
					
					СтрокаТЧ.НалоговаяГруппаОС = НалоговаяГруппаОС;
					
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	

КонецПроцедуры // ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл()

// Заполняет табличную часть основных средств следующими значениями:
// (Имя колонки основных средств должно быть "ОсновноеСредство")
//
// 	Управленческий учет:
//	 	Стоимость;
//	 	Амортизация;
//	 	АмортизацияЗаМесяц;
//
// 	Бухгалтерский учет:
//	 	СтоимостьБУ;
//	 	АмортизацияБУ;
//	 	АмортизацияЗаМесяцБУ;
//
// 	Налоговый учет:
//	 	СтоимостьНУ;
//	 	АмортизацияЗаМесяцНУ;
//
// Параметры
//
//  ДатаРасчета                   - Дата - Дата расчета амортизации
//
//  ОС                            – Табличная часть – табличная часть документа для заполнения
//                 
//  ТекОрганизация                – Тип: СправочникСсылка.Организации – Организация
//                 
//  ОтражатьВУправленческомУчете  – Булево 
//                 
//  ОтражатьВБухгалтерскомУчете   – Булево 
//                 
//  ОтражатьВНалоговомУчете       – Булево 
//                 
//  ДатаИтогов                    – Дата, МоментВремени, Граница - дата получения итогов 
//                 
Процедура ЗаполнитьТабличнуюЧастьОсновныхСредств(ДатаРасчета, ОС, ТекОрганизация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, 
	                                             ОтражатьВНалоговомУчете, ДатаИтогов = Неопределено) Экспорт
												 
	Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(ТекОрганизация) Тогда

		ОбщегоНазначения.СообщитьИнформацию("Для заполнения табличной части по данным регламентированного учета"
		                    + "необходимо указать организацию");
		Возврат
		
	КонецЕсли;
	
	Если ДатаИтогов = Неопределено Тогда
		ДатаИтогов = ДатаРасчета;
	КонецЕсли;	
	
	// Для компактной записи вводятся 
	// новые переменные
	УУ = ОтражатьВУправленческомУчете;
	БУ = ОтражатьВБухгалтерскомУчете;
	НУ = ОтражатьВНалоговомУчете;
												 
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);
	Запрос.УстановитьПараметр("ДатаИтогов",  ДатаИтогов);
	
	Запрос.УстановитьПараметр("ВнешнийИсточник", ОС);
	Запрос.УстановитьПараметр("ВидСубконто1", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство    КАК ОсновноеСредство,
	|	СтоимостьУУ.ОсновноеСредство         КАК ОС_УУ,
	|	СтоимостьУУ.СтоимостьОстаток         КАК Стоимость,
	|	СтоимостьУУ.АмортизацияОстаток       КАК Амортизация,
	|	СтоимостьБУ.ОсновноеСредство         КАК ОС_БУ,
	|	СтоимостьБУ.СтоимостьОстаток         КАК СтоимостьБУ,
	|	СтоимостьБУ.АмортизацияОстаток       КАК АмортизацияБУ,
	|	СтоимостьБУ.СтоимостьНУОстаток       КАК СтоимостьНУ,
	|	СтоимостьБУ.АмортизацияНУОстаток     КАК АмортизацияНУ
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.Остатки(&ДатаИтогов, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СтоимостьУУ
	|	ПО ОсновныеСредства.ОсновноеСредство = СтоимостьУУ.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОСБухгалтерскийУчет.Остатки(
	|		                      &ДатаИтогов,
	|		                      ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)
	|			                  И Организация = &Организация) КАК СтоимостьБУ
	|	ПО ОсновныеСредства.ОсновноеСредство = СтоимостьБУ.ОсновноеСредство";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда
		
		СписокОС = ТЗ.ВыгрузитьКолонку("ОсновноеСредство");
		
		Если ОтражатьВУправленческомУчете Тогда
			
			ТаблицаАмортизацииУпр = РасчетАмортизацииУпр(ДатаРасчета, СписокОС);
			
		КонецЕсли;
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			
			ТаблицаАмортизацииБух = РасчетАмортизацииРегл(ДатаРасчета, ТекОрганизация, СписокОС);
			
		КонецЕсли;
		
		Для каждого Строка Из ОС Цикл
			
			СтрокаТЗ = ТЗ.Найти(Строка.ОсновноеСредство,"ОС_БУ,ОС_УУ");

			Если СтрокаТЗ = Неопределено Тогда
				
				//управленческий учет
				Строка.Стоимость          = 0;
				Строка.Амортизация        = 0;
				Строка.АмортизацияЗаМесяц = 0;
				
				//бухгалтерский учет
				Строка.СтоимостьБУ          = 0;
				Строка.АмортизацияБУ        = 0;
				Строка.АмортизацияЗаМесяцБУ = 0;
				
				//налоговый учет
				Строка.СтоимостьНУ          = 0;
				Строка.АмортизацияНУ        = 0;
				Строка.АмортизацияЗаМесяцНУ = 0;
				
			Иначе
				// В соответствующие поля строки запишем данные из запроса
				
				//управленческий учет
				Если ОтражатьВУправленческомУчете Тогда
					
					Строка.Стоимость            = СтрокаТЗ.Стоимость;
					Строка.Амортизация          = СтрокаТЗ.Амортизация;
					СтрокаТаблицаАмортизацииУпр = ТаблицаАмортизацииУпр.Найти(Строка.ОсновноеСредство, "ОбъектУчета");
					
					Если СтрокаТаблицаАмортизацииУпр = Неопределено Тогда
						
						Строка.АмортизацияЗаМесяц = 0;
						
					Иначе
						
						Если СтрокаТаблицаАмортизацииУпр.Метод_50_50 Тогда
							
							Строка.АмортизацияЗаМесяц = СтрокаТЗ.Стоимость - СтрокаТЗ.Амортизация;
							
						Иначе
							
							Строка.АмортизацияЗаМесяц = СтрокаТаблицаАмортизацииУпр.Амортизация;
							
						КонецЕсли;
						
					КонецЕсли;
					
					
				Иначе
					
					Строка.Стоимость          = 0;
					Строка.Амортизация        = 0;
					Строка.АмортизацияЗаМесяц = 0;
					
				КонецЕсли;
				
				//бухгалтерский учет
				Если ОтражатьВБухгалтерскомУчете Тогда
					
					Строка.СтоимостьБУ          = СтрокаТЗ.СтоимостьБУ;
					Строка.АмортизацияБУ        = СтрокаТЗ.АмортизацияБУ;
					
					Строка.СтоимостьНУ          = СтрокаТЗ.СтоимостьНУ;
					Строка.АмортизацияНУ        = СтрокаТЗ.АмортизацияНУ;
					
					СтрокаТаблицаАмортизацииБух = ТаблицаАмортизацииБух.Найти(Строка.ОсновноеСредство, "ОбъектУчета");
					
					Если СтрокаТаблицаАмортизацииБух = Неопределено Тогда
						
						Строка.АмортизацияЗаМесяцБУ = 0;
						Строка.АмортизацияЗаМесяцНУ = 0;
						
					Иначе
						
						Если СтрокаТаблицаАмортизацииБух.Метод_50_50 Тогда
							
							Строка.АмортизацияЗаМесяцБУ = СтрокаТЗ.СтоимостьБУ - СтрокаТЗ.АмортизацияБУ;
							Строка.АмортизацияЗаМесяцНУ = СтрокаТЗ.СтоимостьНУ - СтрокаТЗ.АмортизацияНУ;
							
						Иначе
							
							Строка.АмортизацияЗаМесяцБУ = СтрокаТаблицаАмортизацииБух.Амортизация;
							Строка.АмортизацияЗаМесяцНУ = СтрокаТаблицаАмортизацииБух.АмортизацияНУ;
							
						КонецЕсли;
						
					КонецЕсли;
					
					
				Иначе
					
					Строка.СтоимостьБУ          = 0;
					Строка.АмортизацияБУ        = 0;
					Строка.АмортизацияЗаМесяцБУ = 0;
					
					Строка.СтоимостьНУ          = 0;
					Строка.АмортизацияНУ        = 0;
					Строка.АмортизацияЗаМесяцНУ = 0;
					
				КонецЕсли;
				
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначения.СообщитьИнформацию("Данные для заполнения отсутствуют.");
		
	КонецЕсли;
	
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьОсновныхСредств()

// Проверяет табличную часть на наличие в ней списанных Основных средств
// (Имя колонки основных средств должно быть "ОсновноеСредство")
//
// Параметры
//  ДатаДока                     - Тип: Дата - дата, на которую проверять
//
//  ТекОрганизация               – Тип: СправочникСсылка.Организации – Организация
//                 
//  ТаблицаПоОС                  – Тип: ТаблицаЗначений – ТаблицаЗначений
//                                                        Основные средства, которой нужно проверять
//
//  ОтражатьВУправленческомУчете – Тип: Булево 
//                 
//  ОтражатьВБухгалтерскомУчете  – Тип: Булево 
//
//  Отказ                        – Тип: Булево – признак отказа
//                 
//  Заголовок                    – Тип: Строка – заголовок вызывающего документа,
//                                               для сообщения об ошибке
//
Процедура ПроверитьНаСписанность(ДатаДока, ТекОрганизация, ТаблицаПоОС, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете,
	                             Отказ, Заголовок) Экспорт
								 
	Если (НЕ ОтражатьВУправленческомУчете и Не ОтражатьВБухгалтерскомУчете) ИЛИ Отказ Тогда
									 
		Возврат
		
	КонецЕсли;								 
								 
	Упр      = ОтражатьВУправленческомУчете;						 
	Бухг     = ОтражатьВБухгалтерскомУчете;						 
    СписокОС = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("НаДату"     , ДатаДока);
	Запрос.УстановитьПараметр("СписокОС"   , СписокОС);
	Запрос.УстановитьПараметр("Списано"    , Перечисления.СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);
	Запрос.Текст = 
	"ВЫБРАТЬ" + ?(Упр, "
	|	СостояниеОС_УУ.ОсновноеСредство КАК ОС_УУ" + ?(Бухг, ",", ""), "") + ?(Бухг, "
	|	СостояниеОС_БУ.ОсновноеСредство КАК ОС_БУ", "") + "
	|ИЗ" + ?(Упр, "
	|	(ВЫБРАТЬ
	|		СостоянияОС.ОсновноеСредство КАК ОсновноеСредство
	|	ИЗ
	|		РегистрСведений.СостоянияОС КАК СостоянияОС
	|	ГДЕ
	|		СостоянияОС.ОсновноеСредство В(&СписокОС)
	|		И СостоянияОС.Состояние = &Списано
	|		И СостоянияОС.ДатаСостояния <= &НаДату) КАК СостояниеОС_УУ" + ?(Бухг, "
	|		ПОЛНОЕ СОЕДИНЕНИЕ", ""), "") + ?(Бухг, "
	|			(ВЫБРАТЬ
	|				СостоянияОС.ОсновноеСредство КАК ОсновноеСредство
	|			ИЗ
	|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
	|			ГДЕ
	|				СостоянияОС.Организация = &Организация
	|				И СостоянияОС.ОсновноеСредство В(&СписокОС)
	|				И СостоянияОС.Состояние = &Списано
	|				И СостоянияОС.ДатаСостояния <= &НаДату) КАК СостояниеОС_БУ" + ?(Упр, "
	|		ПО СостояниеОС_УУ.ОсновноеСредство = СостояниеОС_БУ.ОсновноеСредство", ""), "");
	ТаблицаСписанных = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаСписанных.Количество() > 0 Тогда
		
		Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
			ТекОС           = СтрокаТЧ.ОсновноеСредство;
			СписокКолонок   = ?(Упр, "ОС_УУ", "") + ?(Бухг, ?(Упр, ", ", "") + "ОС_БУ", "");
			СтрокаСписанных = ТаблицаСписанных.Найти(ТекОС, СписокКолонок);
			
			Если СтрокаСписанных <> Неопределено Тогда
				
				Если ОтражатьВУправленческомУчете и СтрокаСписанных.ОС_УУ <> Null Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("Строка " + (ТаблицаПоОС.Индекс(СтрокаТЧ) + 1) + "." + Символы.ПС + Символы.Таб
									+ "Упр. учет: Основное средство """ + ТекОс + """ уже снято с учета!", Отказ, Заголовок);
					
				КонецЕсли;
				
				Если ОтражатьВБухгалтерскомУчете  и СтрокаСписанных.ОС_БУ <> Null Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("Строка " + (ТаблицаПоОС.Индекс(СтрокаТЧ) + 1) + "." + Символы.ПС + Символы.Таб
									+ "Бухг. учет: Основное средство """ + ТекОс + """ организации """ + ТекОрганизация + """ уже снято с учета!",
									Отказ, Заголовок);
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры // ПроверитьНаСписанность()

// Проверяет дублирование НМА или ОС в табличной части документа
//
// Параметры
//  ТабличнаяЧасть       – Тип: ТаблицаЗначений, ТабличнаяЧасть – Табличная часть документа. 
//                                             
//  ИмяКолонки           – Тип: Строка – Имя колонки, в которой содержится ОС или НМА
//                 
//  ПредставлениеКолонки – Тип: Строка – Представление колонки, в которой содержится ОС или НМА.
//                                       Для сообщений об ошибках
//                 
//  Отказ                – Тип: Булево – признак отказа
//                 
//  Заголовок            – Тип: Строка – заголовок вызывающего документа,
//                                               для сообщения об ошибке
//                 
Процедура ПроверитьДублированиеОСиНМАвТабличнойЧасти(ТабличнаяЧасть, ИмяКолонки, ПредставлениеКолонки, Отказ, Заголовок) Экспорт

	Если ТабличнаяЧасть.Количество() <= 1 Тогда
		
		Возврат
		
	КонецЕсли;
	
	Сообщение = "Дублируется " + ПредставлениеКолонки + """";
	
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		
		ТЗ = ТабличнаяЧасть.Скопировать();
		
	Иначе
		
		ТЗ = ТабличнаяЧасть.Выгрузить();
		
	КонецЕсли;

	Пока ТЗ.Количество() > 0 Цикл
		
		Элемент         = ТЗ[0][ИмяКолонки];
		СтруктураОтбора = Новый Структура(ИмяКолонки, Элемент);
		МассивСтрок     = ТЗ.НайтиСтроки(СтруктураОтбора);
		ЕстьДубли       = (МассивСтрок.Количество() > 1);
		НомераСтрок     = "";
		Разделитель     = "";
		
		Для каждого СтрокаТЧ Из МассивСтрок Цикл
		
			НомераСтрок = НомераСтрок + Разделитель + СтрокаТЧ.НомерСтроки;
			Разделитель = ", ";
			ТЗ.Удалить(СтрокаТЧ);
		
		КонецЦикла;
		
		Если ЕстьДубли Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке(Сообщение + Элемент + """ в строках: " + НомераСтрок, Отказ, Заголовок);
			
		КонецЕсли;
	
	КонецЦикла;	
	
КонецПроцедуры // ПроверитьДублированиеОСиНМАвТабличнойЧасти()

// Проверяет были ли подобные документы в указанном периоде.
// Проверка осуществляется по реквизиту "ПериодРегистрации"
// и с учетом "ОтражатьВ...". Процедура используется для 
// документов "АмортизацияОС" и "АмортизацияНМА".
//
// Параметры
// 	СтруктураШапкиДокумента – Тип: Структура – структура шапки документа
//                 
//  ОС                      – Тип: Булево – Признак того, что это амортизация ОС
//                 
//
Процедура ПроверитьДублиДокументовВПериоде(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	Упр = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	Бух = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	
	// ставим заглушку
	Если НЕ (Упр Или Бух) Тогда
		Возврат;	
	КонецЕсли;	
	
	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"      , СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка"           , СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", СтруктураШапкиДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("НачПериода"       , НачалоКвартала(СтруктураШапкиДокумента.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонПериода"       , КонецКвартала(СтруктураШапкиДокумента.ПериодРегистрации));
	
	ВидДока = СтруктураШапкиДокумента.Ссылка.Метаданные().Имя;
	
	Запрос.Текст = ?(Упр, "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""Упр. учет""             КАК ТипУчета,
	|	ПРЕДСТАВЛЕНИЕ(Док.Ссылка) КАК Документ
	|ИЗ
	|	Документ." + ВидДока + " КАК Док
	|ГДЕ
	|	Док.ПериодРегистрации = &ПериодРегистрации
	|	И Док.Проведен
	|	И (НЕ Док.Ссылка = &Ссылка)
	|	И Док.ОтражатьВУправленческомУчете
	|	И Док.Организация = &Организация", "") + ?(Упр И Бух, "
	|
	|ОБЪЕДИНИТЬ ВСЕ", "") + ?(Бух, "
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""Бух. учет""             КАК ТипУчета,
	|	ПРЕДСТАВЛЕНИЕ(Док.Ссылка) КАК Документ
	|ИЗ
	|	Документ." + ВидДока + " КАК Док
	|ГДЕ
	|	Док.ПериодРегистрации = &ПериодРегистрации
	|	И Док.Проведен
	|	И (НЕ Док.Ссылка = &Ссылка)
	|	И Док.ОтражатьВБухгалтерскомУчете
	|	И Док.Организация = &Организация", "");

	Выборка   = Запрос.Выполнить().Выбрать();
	
	Период = Формат(СтруктураШапкиДокумента.ПериодРегистрации, "ДФ='MMMM yyyy'") + " года";
	
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначения.СообщитьОбОшибке(Выборка.ТипУчета + ":" + Символы.ПС + Символы.Таб 
		                 + "Для периода регистрации <" +  Период + ">"
		                 + Символы.ПС + Символы.Таб + "уже есть документ <" 
						 + Выборка.Документ + ">"
						 + Символы.ПС + Символы.Таб + "аналогичный текущему.",
						 Отказ, Заголовок);
	
	КонецЦикла;

КонецПроцедуры // ПроверитьДублиДокументовВПериоде()

// Проверяет наличие одинаковых значений в колонке табличной части.
//
Процедура ПроверитьДубли(Таблица, ПредставлениеТаблицы, ИмяКолонки, ПредставлениеКолонки, Отказ, Заголовок) Экспорт
	
	ТаблицаДублей = Таблица.Скопировать();
	
	// Подсчитываем количество повторений.
	ТаблицаДублей.Колонки.Добавить("КоличествоПовторений");
	ТаблицаДублей.ЗаполнитьЗначения(1, "КоличествоПовторений");
	ТаблицаДублей.Свернуть(ИмяКолонки, "КоличествоПовторений");
	
	// Если количество повторений > 1, выдаем сообщение об ошибке.
	Если ?(ТаблицаДублей.Количество() > 0, ТаблицаДублей.Итог("КоличествоПовторений") / ТаблицаДублей.Количество(), 0) > 1 Тогда
		
		ТекстСообщенияОбОшибке = "";
		
		Таблица.Индексы.Добавить(ИмяКолонки);
		
		// Цикл по каждому найденному повторению.
		Для Каждого СтрокаТаблицыДублей Из ТаблицаДублей Цикл
			
			Если СтрокаТаблицыДублей.КоличествоПовторений = 1 Тогда
				Продолжить; // повторений нет.
			КонецЕсли;
			
			// Добавим перевод строки, если требуется.
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + ?(НЕ ЗначениеЗаполнено(ТекстСообщенияОбОшибке), "", "
			                                                                            |");
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + "В строках №№ ";
															  
			// Выводим номера строк.
			СписокНомеровСтрок = "";
			МассивСтрок = Таблица.НайтиСтроки(Новый Структура(ИмяКолонки, СтрокаТаблицыДублей[ИмяКолонки]));
			Для Каждого Строка Из МассивСтрок Цикл
				СписокНомеровСтрок = СписокНомеровСтрок + ?(НЕ ЗначениеЗаполнено(СписокНомеровСтрок), "", ", ") + Строка.НомерСтроки;
			КонецЦикла;
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + СписокНомеровСтрок 
			                       + " табличной части """ + ПредставлениеТаблицы + """ в колонке """ + ПредставлениеКолонки + """ указано одинаковое значение.";
			
		КонецЦикла;
														  
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДубли()


// Функция расчитывает стоимость объекта строительства по разным видам учета
// Возвращает структуру со значениями стоимостей по видам учета, поля:
//- СтоимостьУУ
// - СтоимостьБУ
// - СтоимостьБУХоз
// - СтоимостьНУ
// - СтоимостьНУХоз
//
Функция РассчитатьСтоимостьОбъектаСтроительства(ОтражатьВУправленческомУчете,ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,
												СчетУчетаБУВнеоборотногоАктива, ОбъектСтроительства, Организация, Период = Неопределено) Экспорт

	СтруктураСтоимость = Новый Структура;
	СтруктураСтоимость.Вставить("СтоимостьУУ",0);
	СтруктураСтоимость.Вставить("СтоимостьБУ",0);
	СтруктураСтоимость.Вставить("СтоимостьНУ",0);

	Если НЕ ЗначениеЗаполнено(ОбъектСтроительства) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран объект строительства");
		Возврат СтруктураСтоимость;
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбрана организация");
		Возврат СтруктураСтоимость;
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(СчетУчетаБУВнеоборотногоАктива) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран счет бухгалтерского учета объекта строительства");
		Возврат СтруктураСтоимость;
	КонецЕсли;
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Период);
		
	Если ИспользоватьРасширеннуюАналитику Тогда
		ПериодГраница = Новый Граница (КонецМесяца(Период), ВидГраницы.Включая);
	Иначе	
		ПериодГраница = Новый Граница (Период, ВидГраницы.Включая);
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период", 				ПериодГраница);
		Запрос.УстановитьПараметр("ОбъектСтроительства", 	ОбъектСтроительства);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтроительствоОбъектовОсновныхСредствОстатки.СуммаОстаток КАК Стоимость
		|ИЗ
		|	РегистрНакопления.СтроительствоОбъектовОсновныхСредств.Остатки(&Период, ОбъектСтроительства = &ОбъектСтроительства) КАК СтроительствоОбъектовОсновныхСредствОстатки";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			СтруктураСтоимость.СтоимостьУУ = РезультатЗапроса.Выгрузить()[0].Стоимость;
		КонецЕсли;
		
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период", 				ПериодГраница);
		Запрос.УстановитьПараметр("ОбъектСтроительства", 	ОбъектСтроительства);
		Запрос.УстановитьПараметр("Организация", 			Организация);
		Запрос.УстановитьПараметр("СчетУчетаБУ",          	СчетУчетаБУВнеоборотногоАктива);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтроительствоОбъектовОсновныхСредствРегл.СтоимостьОстаток КАК СтоимостьБУ,
		|	СтроительствоОбъектовОсновныхСредствРегл.СтоимостьНУОстаток КАК СтоимостьНУ
		|ИЗ
		|	РегистрНакопления.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.Остатки(
		|			&Период,
		|			ОбъектСтроительства = &ОбъектСтроительства И СчетУчета = &СчетУчетаБУ
		|				И Организация = &Организация) КАК СтроительствоОбъектовОсновныхСредствРегл";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			СтруктураСтоимость.СтоимостьБУ = РезультатЗапроса.Выгрузить()[0].СтоимостьБУ;
			СтруктураСтоимость.СтоимостьНУ = РезультатЗапроса.Выгрузить()[0].СтоимостьНУ;
		КонецЕсли;
		
	КонецЕсли;

	Возврат СтруктураСтоимость;

КонецФункции


// Функция возвращает счета учета по выбранному объекту
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Объект      - ... строительства по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета 
// 
Функция ПолучитьСчетаУчетаОбъектовСтроительства(Организация, Объект) Экспорт

	Результат = Новый Структура("СчетУчетаБУ, СчетУчетаНДС, НалоговоеНазначение");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ПустойОбъект",      Справочники.ОбъектыСтроительства.ПустаяСсылка());
	Запрос.УстановитьПараметр("Объект",            Объект);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	1 КАК Приоритет,
	|	СчетБухгалтерскогоУчета    КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС,
	|	НалоговоеНазначение   	   КАК НалоговоеНазначение
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &Организация И
	|	ОбъектСтроительства = &Объект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	2,
	|	СчетБухгалтерскогоУчета    КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС,
	|	НалоговоеНазначение   	   КАК НалоговоеНазначение
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &Организация И
	|	ОбъектСтроительства = &ПустойОбъект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	3,
	|	СчетБухгалтерскогоУчета    КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС,
	|	НалоговоеНазначение   	   КАК НалоговоеНазначение
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &ПустаяОрганизация И
	|	ОбъектСтроительства = &Объект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	4,
	|	СчетБухгалтерскогоУчета    КАК СчетУчетаБУ,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС,
	|	НалоговоеНазначение   	   КАК НалоговоеНазначение
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &ПустаяОрганизация И
	|	ОбъектСтроительства = &ПустойОбъект
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Результат.СчетУчетаБУ                 = Выборка.СчетУчетаБУ;
		Результат.СчетУчетаНДС                = Выборка.СчетУчетаНДС;
		Результат.НалоговоеНазначение         = Выборка.НалоговоеНазначение;

	КонецЕсли;

	Возврат Результат;

КонецФункции //ПолучитьСчетаУчетаОбъектовСтроительства()

Процедура ОткрытьФормуВыбораНМА(ВидОбъектаУчета, СтандартнаяОбработка, Владелец, Ключ = неопределено,ВыбратьНесколькоЗначений = Ложь) Экспорт

	Форма = Справочники.НематериальныеАктивы.ПолучитьФормуВыбора("ФормаВыбора", Владелец, Ключ);
	ЭлементОтбора = Форма.СправочникСписок.Отбор.ВидОбъектаУчета;
	ЭлементОтбора.Значение = ВидОбъектаУчета;
	ЭлементОтбора.Использование = Истина;
	Если не ВыбратьНесколькоЗначений тогда
		Форма.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Владелец.Значение;
		Форма.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	КонецЕсли;
	Форма.Открыть();
	Форма.ЗакрыватьПриВыборе = не ВыбратьНесколькоЗначений;
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФОРМАМИ

Процедура НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации(ЭлементФормы, Организация = Неопределено, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбора          = Справочники.СпособыОтраженияРасходовПоАмортизации.ПолучитьФормуВыбора(,ЭлементФормы,);

	Если НЕ Организация = Неопределено Тогда
		// Оставим в выборе только записи с организацией из документа и те, в которых организация вообще не указана
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.Добавить(Организация);
		СписокОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение         = СписокОрганизаций;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование    = Истина;

	КонецЕсли;
    ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ЭлементФормы.Значение;
	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации()
