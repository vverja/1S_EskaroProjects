////////////////////////////////////////////////////////////////////////////////
//
// Проверка дополнительных прав выполняется путем вызова функции, относящейся к этому праву.
// Для нового дополнительного права должна быть создана отдельная функция.
//
////////////////////////////////////////////////////////////////////////////////

// Функция возвращает значение, которое означает, что право разрешено
//
Функция ПолучитьЗначениеРазрешенногоПрава(Право)
	
	Если Право = ПланыВидовХарактеристик.ПраваПользователей.КонтролироватьПревышениеОбъемЗаказаПриОтгрузке Тогда
		Результат = Ложь;
	ИначеЕсли Право = ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа Тогда
		Результат = Неопределено;
	Иначе
		Результат = Истина;
	КонецЕсли; 

	Возврат Результат;

КонецФункции // ЗначениеРазрешенногоПрава

// Функция возвращает список значений права, установленных для пользователя или группы пользователя.
// Если нет установленных прав , то возвращается значение по умолчанию
//
// Параметры:
//  Право               - право, для которого определяются значения
//  ЗначениеПоУмолчанию - значение по умолчанию для передаваемого права (возвращается в случае
//                        отсутствия значений в регистре сведений)
//  Пользователь		- пользователь
//
// Возвращаемое значение:
//  Список всех значений, установленных для пользователя или группы пользователя
//
Функция ПрочитатьЗначениеПраваПользователя(Право, ЗначениеПоУмолчанию, Пользователь)
	
	ВозвращаемыеЗначения = Новый Массив;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Пользователь"     , Пользователь);
	Запрос.УстановитьПараметр("ПравоПользователя", Право);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	РегистрЗначениеПрав.Значение
	               |ИЗ
	               |	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК РегистрЗначениеПрав
	               |ГДЕ
	               |	РегистрЗначениеПрав.Право = &ПравоПользователя
	               |	И РегистрЗначениеПрав.Пользователь В
	               |			(ВЫБРАТЬ
	               |				ПользователиГруппы.Ссылка КАК Ссылка
	               |			ИЗ
	               |				Справочник.ГруппыПользователей.ПользователиГруппы КАК ПользователиГруппы
	               |			ГДЕ
	               |				ПользователиГруппы.Пользователь = &Пользователь
	               |		
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |			ВЫБРАТЬ
	               |				ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	               |		
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |			ВЫБРАТЬ
	               |				&Пользователь)";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() = 0 Тогда
		ВозвращаемыеЗначения.Добавить(ЗначениеПоУмолчанию);
	Иначе
		Пока Выборка.Следующий() Цикл
			ВозвращаемыеЗначения.Добавить(Выборка.Значение);
		КонецЦикла;
	КонецЕсли;

	Возврат ВозвращаемыеЗначения;

КонецФункции // ПрочитатьЗначениеПраваПользователя()

// Функция возвращает значение дополнительного права профиля пользователя
//
//	Параметры:
//  	Право               - право, наличие которого проверяется (Тип ПВХ.ПраваПользователей)
//  	ЗначениеПоУмолчанию - значение по умолчанию для передаваемого права (возвращается в случае
//                        	отсутствия значений в регистре сведений). Тип - булево
//
//	Возвращаемое значение: массив значений права
//
Функция ПолучитьЗначениеПраваПользователя(Право, ЗначениеПоУмолчанию) Экспорт
	
	КэшДополнительныхПрав = глЗначениеПеременной("ЗначенияДополнительныхПравПользователя");
	
	МассивЗначенийПрава = КэшДополнительныхПрав[Право];
	
	Если МассивЗначенийПрава = Неопределено Тогда
		МассивЗначенийПрава = Новый Массив;
		
		Если РольДоступна("ПолныеПрава") Тогда
			ЗначениеПрава = ПолучитьЗначениеРазрешенногоПрава(Право);
			МассивЗначенийПрава.Добавить(ЗначениеПрава);
		Иначе
			ОбъектПрав = глЗначениеПеременной("ПрофильПолномочийПользователя");
			Если ЗначениеЗаполнено(ОбъектПрав) Тогда
				Запрос = Новый Запрос;
				
				Запрос.УстановитьПараметр("ОбъектПрав", ОбъектПрав);
				Запрос.УстановитьПараметр("ПравоПользователя",   Право);
				
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	РегистрЗначениеПрав.Значение КАК Значение
				|ИЗ
				|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК РегистрЗначениеПрав
				|ГДЕ
				|	РегистрЗначениеПрав.Право = &ПравоПользователя
				|	И РегистрЗначениеПрав.Пользователь = &ОбъектПрав";
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					ЗначениеПрава = Выборка.Значение;
				Иначе
					ЗначениеПрава = ЗначениеПоУмолчанию;
				КонецЕсли;
				МассивЗначенийПрава.Добавить(ЗначениеПрава);
			Иначе
				ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");	
				МассивЗначенийПрава = ПрочитатьЗначениеПраваПользователя(Право, ЗначениеПоУмолчанию, ТекущийПользователь);
			КонецЕсли;
		КонецЕсли; 
		
		КэшДополнительныхПрав[Право] = МассивЗначенийПрава;
		
		#Если Сервер Тогда
			глЗначениеПеременнойУстановить("ЗначенияДополнительныхПравПользователя", КэшДополнительныхПрав, Истина);
		#КонецЕсли
	КонецЕсли;
	
	Возврат МассивЗначенийПрава;
	
КонецФункции

//Функция проверяет наличие дополнительного права пользователя
//Функция предназначена для работы с дополнительными правами, имеющими значение типа Булево
//Параметры:
//  Право               - право, наличие которого проверяется (Тип ПВХ.ПраваПользователей)
//  ЗначениеПоУмолчанию - значение по умолчанию для передаваемого права (возвращается в случае
//                        отсутствия значений в регистре сведений). Тип - булево
//Возвращаемое значение: Булево (Истина, если право у пользователя есть)
Функция ПравоЕстьУПользователя(Право, ЗначениеПоУмолчанию)
	
	МассивЗначенийПрава = ПолучитьЗначениеПраваПользователя(Право, ЗначениеПоУмолчанию);
	
	Возврат МассивЗначенийПрава.Найти(Истина) <> Неопределено;
	
КонецФункции

// Функция возвращает право печатать непроведенные документы.
//
// Параметры:
//  Проведен     - признак проведен ли документ (если документ не проводной,
//                 то либо параметр опускается, либо равен Истина)
//
// Возвращаемое значение:
//  Истина - если можно печатать, иначе Ложь.
//
Функция РазрешитьПечатьНепроведенныхДокументов(Проведен = Истина) Экспорт

	Если Проведен Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПечатьНепроведенныхДокументов, Ложь);
	
КонецФункции // РазрешитьПечатьНепроведенныхДокументов()

// Функция возвращает право проводить документы в рознице с нулевой ценой
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Истина - если можно проводить документы в рознице с нулевой ценой
//
Функция РазрешитьНулевыеЦеныВРознице() Экспорт

	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНулевыеЦеныВРознице, Ложь);

КонецФункции // РазрешитьНулевыеЦеныВРознице()

// Функция возвращает право закрывать смену в рознице
//
// Параметры:
//
// Возвращаемое значение:
//  Истина - если можно закрывать смену в рознице.
//
Функция РазрешитьЗакрытиеСмены() Экспорт

	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЗакрытиеСмены, Ложь);

КонецФункции // РазрешитьЗакрытиеСмены()

// Функция возвращает право аннулировать чеки в рознице
//
// Параметры:
//
// Возвращаемое значение:
//  Истина - если можно аннулировать чеки в рознице.
//
Функция РазрешитьАннулированиеЧека() Экспорт

	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьАннулированиеЧека, Ложь);

КонецФункции // РазрешитьАннулированиеЧека()

// Функция возвращает право получать отчет о смене без гашения в рознице
//
// Параметры:
//
// Возвращаемое значение:
//  Истина - если можно получать отчет о смене без гашения в рознице.
//
Функция РазрешитьОтчетОСменеБезГашения() Экспорт

	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтчетОСменеБезГашения, Ложь);

КонецФункции // РазрешитьОтчетОСменеБезГашения()

// Функция возвращает право создания чека возврата в рознице
//
// Параметры:
//
// Возвращаемое значение:
//  Истина - если можно создавать чек возврата в рознице.
//
Функция РазрешитьЧекВозврата() Экспорт

	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЧекВозврата, Ложь);

КонецФункции // РазрешитьЧекВозврата()

// Функция возвращает право назначения ручных скидок в рознице
//
// Параметры:
//
// Возвращаемое значение:
//  Истина - если можно создавать чек возврата в рознице.
//
Функция РазрешитьНазначениеРучныхСкидок() Экспорт

	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНазначениеРучныхСкидок, Ложь);

КонецФункции // РазрешитьНазначениеРучныхСкидок()

// Функция возвращает право проводить документы "Реализация товаров" с нулевой ценой
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Истина - если можно проводить документ "Реализация товаров" с нулевой ценой
//
Функция РазрешитьНулевыеЦеныВОпте() Экспорт

	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНулевыеЦеныВОпте, Ложь);

КонецФункции // РазрешитьНулевыеЦеныВОпте()

// Функция возвращает признак защищать таблицу от редактирования или нет.
//
// Возвращаемое значение:
//  Истина - если таблицу необходимо защитить от редактирования, иначе Ложь.
//
Функция ЗащитаТаблиц() Экспорт
	
	Возврат НЕ ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеТаблиц, Ложь);

КонецФункции // ЗащитаТаблиц()

// Функция возвращает признак можно ли пользователю изменять цены в расходных накладных или нет.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если можно менять цены, иначе Ложь.
//
Функция РазрешитьРедактированиеЦенВДокументах() Экспорт

	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеЦенВДокументах, Ложь);

КонецФункции // РазрешитьРедактированиеЦенВДокументах()

 // Функция возвращает право изменять пользователя в календаре пользователя
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Истина - если можно изменять пользователя в календаря пользователя
//
Функция РазрешитьИзменениеПользователяВКалендареПользователя() Экспорт

	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменениеПользователяВКалендареПользователя, Ложь);

КонецФункции // РазрешитьИзменениеПользователяВКалендареПользователя()

 // Функция возвращает право редактировать КИ в списке
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Истина - если можно редактировать КИ в списке
//
Функция РазрешитьРедактированиеКИвСписке() Экспорт

	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРедактированиеКИвСписке, Ложь);

КонецФункции // ЗапретитьРедактированиеКИвСписке()

// Функция возвращает нужно ли рассчитывать долг при открытии форм.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если нужно рассчитывать, иначе Ложь.
//
Функция РассчитыватьДолгПриОткрытииФорм() Экспорт

	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РассчитыватьДолгПриОткрытииФорм, Истина);

КонецФункции // РассчитыватьДолгПриОткрытииФорм()

// Функция возвращает признак можно ли превышать остаток товаров по организации при отпуске товаров.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если разрешено превышать остаток, иначе Ложь.
//
Функция РазрешеноПревышениеОстаткаТоваровОрганизации(Организация = Неопределено) Экспорт
	
	ОтражатьВРеглУчете = ?(НЕ ЗначениеЗаполнено(Организация), Ложь, Организация.ОтражатьВРегламентированномУчете);
	Если НЕ ОтражатьВРеглУчете Тогда
		Возврат истина;
	КонецЕсли;
	
	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеОстаткаТоваровОрганизации, Ложь);

КонецФункции // РазрешеноПревышениеОстаткаТоваровОрганизации()

// Функция возвращает признак можно ли превышать объем заказа при отпуске товаров.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если разрешено превышать остаток, иначе Ложь.
//
Функция РазрешеноПревышениеОбъемаЗаказаПриОтгрузке() Экспорт

	Возврат НЕ ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.КонтролироватьПревышениеОбъемЗаказаПриОтгрузке, Ложь);

КонецФункции // РазрешеноПревышениеОбъемаЗаказаПриОтгрузке()

// Функция возвращает признак разрешено ли превышение контролируемых значений по бюджетам пользователям.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если разрешено превышать контролируемые значения, иначе Ложь.
//
Функция РазрешеноПревышениеКонтролируемыхЗначенийПоБюджетам() Экспорт

	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеКонтролируемыхЗначенийПоБюджетам,Ложь);

КонецФункции // РазрешеноПревышениеКонтролируемыхЗначенийПоБюджетам()

// Процедура проверяет цены товаров (услуг) на допустимость для данного пользователя
//
// Параметры:
//  ДокументОбъект     - документ; 
//  ИмяТабличнойЧасти  - строка, имя табличной части, которую надо проверять, 
//  Отказ              - признак отказа от проведения документа
//
Процедура ПроверитьДопустимостьЦенОтпуска(ДокументОбъект, ИмяТабличнойЧасти, Отказ) Экспорт

	Если РольДоступна("ПолныеПрава") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
    МетаданныеТабЧастиДокумента = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
	ИмяДокумента = МетаданныеДокумента.Имя;
	ЕстьХарактеристикаНоменклатуры = МетаданныеТабЧастиДокумента.Реквизиты.Найти("ХарактеристикаНоменклатуры") <> Неопределено;

	ДополнительныеПоля         = "";
	ЛевоеСоединение            = "";
	ПоляДляОбъединенияЗапросов = "";

	СписокФильтров = ПравоНеОтпускатьТоварСЦенойНижеОпределенногоТипа();
	
	НомерТипаЦен = 0;
	
	Для Каждого ТипЦены Из СписокФильтров Цикл
		Если НЕ ЗначениеЗаполнено(ТипЦены) Тогда

			// Если хотя бы для одного набора прав не задан тип цен, ниже которого нельзя продавать,
			// то значит можно продавать по любой цене.
			Возврат;
		КонецЕсли;

		НомерТипаЦен = НомерТипаЦен + 1;

		Запрос.УстановитьПараметр("ДатаСреза", ДокументОбъект.Дата);
		Запрос.УстановитьПараметр("ЦенаВключаетНДС" + НомерТипаЦен, ТипЦены.ЦенаВключаетНДС);

		Если ТипЦены.Рассчитывается Тогда
			Запрос.УстановитьПараметр("ТипЦен" + НомерТипаЦен, ТипЦены.БазовыйТипЦен);
			Запрос.УстановитьПараметр("ТипЦенДинамический" + НомерТипаЦен, ТипЦены);
			Запрос.УстановитьПараметр("Коэффициент" + НомерТипаЦен, ТипЦены.ПроцентСкидкиНаценки);
		Иначе
			Запрос.УстановитьПараметр("ТипЦен" + НомерТипаЦен, ТипЦены);
			Запрос.УстановитьПараметр("Коэффициент" + НомерТипаЦен, 0);
		КонецЕсли;

		ЛевоеСоединение = ЛевоеСоединение + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ТипЦен = &ТипЦен" + НомерТипаЦен + ") КАК ЦеныКомпании" + НомерТипаЦен + "
		|	ПО ЦеныКомпании" + НомерТипаЦен + ".Номенклатура = Док.Номенклатура";
		Если ЕстьХарактеристикаНоменклатуры Тогда
			Запрос.УстановитьПараметр("ПустаяХарактеристикаНоменклатуры" , Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			ЛевоеСоединение = ЛевоеСоединение + "
			|	И
			|	ЦеныКомпании" + НомерТипаЦен + ".ХарактеристикаНоменклатуры = Док.ХарактеристикаНоменклатуры
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ТипЦен = &ТипЦен" + НомерТипаЦен + ") КАК ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + "
			|	ПО ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".Номенклатура = Док.Номенклатура
			|	И
			|	ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".ХарактеристикаНоменклатуры = &ПустаяХарактеристикаНоменклатуры
			|";

			ДополнительныеПоля = ДополнительныеПоля + "," + "
			|	&ЦенаВключаетНДС" + НомерТипаЦен +" КАК ЦенаВключаетНДС" + НомерТипаЦен +",
			|	&Коэффициент" + НомерТипаЦен +" КАК ПроцентСкидкиНаценкиИзСправочника" + НомерТипаЦен +",
			|	ВЫБОР КОГДА ЦеныКомпании" + НомерТипаЦен + ".Цена ЕСТЬ NULL ТОГДА
			|		ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".Цена 
			|	ИНАЧЕ ЦеныКомпании" + НомерТипаЦен + ".Цена КОНЕЦ  КАК Цена" + НомерТипаЦен;
			Если ТипЦены.Рассчитывается Тогда
				ДополнительныеПоля = ДополнительныеПоля + "," + "
				|	ВЫБОР КОГДА ЦеныКомпании" + НомерТипаЦен + ".Цена ЕСТЬ NULL ТОГДА
				|		ВложенныйЗапросБезХарактеристики" + НомерТипаЦен +".ПроцентСкидкиНаценкиБезХарактеристики
				|	ИНАЧЕ ВложенныйЗапрос" + НомерТипаЦен +".ПроцентСкидкиНаценки КОНЕЦ  КАК ПроцентСкидкиНаценки" + НомерТипаЦен;
			КонецЕсли;
			ДополнительныеПоля = ДополнительныеПоля + "," + "
			|	ВЫБОР КОГДА ЦеныКомпании" + НомерТипаЦен + ".Цена ЕСТЬ NULL ТОГДА
			|		ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".Валюта 
			|	ИНАЧЕ ЦеныКомпании" + НомерТипаЦен + ".Валюта КОНЕЦ КАК Цена" + НомерТипаЦен + "Валюта,
			|	ВЫБОР КОГДА ЦеныКомпании" + НомерТипаЦен + ".Цена ЕСТЬ NULL ТОГДА
			|		ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".ЕдиницаИзмерения 
			|	ИНАЧЕ ЦеныКомпании" + НомерТипаЦен + ".ЕдиницаИзмерения КОНЕЦ КАК Цена" + НомерТипаЦен + "Единица
			|";

		Иначе
			ДополнительныеПоля = ДополнительныеПоля + "," + "
			|	&ЦенаВключаетНДС" + НомерТипаЦен +" КАК ЦенаВключаетНДС" + НомерТипаЦен;

			Если ТипЦены.Рассчитывается Тогда
				ДополнительныеПоля = ДополнительныеПоля + "," + "
				|	ЦеныКомпании" + НомерТипаЦен + ".Цена * (1 + ВложенныйЗапрос" + НомерТипаЦен +".ПроцентСкидкиНаценки / 100) КАК Цена"   + НомерТипаЦен + ",
				|	ЦеныКомпании" + НомерТипаЦен + ".Валюта КАК Цена" + НомерТипаЦен + "Валюта,
				|	ЦеныКомпании" + НомерТипаЦен + ".ЕдиницаИзмерения КАК Цена" + НомерТипаЦен + "Единица";
			Иначе
				ДополнительныеПоля = ДополнительныеПоля + "," + "
				|	ЦеныКомпании" + НомерТипаЦен + ".Цена КАК Цена"   + НомерТипаЦен + ",
				|	ЦеныКомпании" + НомерТипаЦен + ".Валюта КАК Цена" + НомерТипаЦен + "Валюта,
				|	ЦеныКомпании" + НомерТипаЦен + ".ЕдиницаИзмерения КАК Цена" + НомерТипаЦен + "Единица";
			КонецЕсли;

		КонецЕсли;
		Если ТипЦены.Рассчитывается Тогда
			ЛевоеСоединение = ЛевоеСоединение + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|		ДинамическиеЦеныКомпании" + НомерТипаЦен + ".ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
			|		ДинамическиеЦеныКомпании" + НомерТипаЦен + ".Номенклатура КАК Номенклатура";
			Если ЕстьХарактеристикаНоменклатуры Тогда
				ЛевоеСоединение = ЛевоеСоединение + ",
				|		ДинамическиеЦеныКомпании" + НомерТипаЦен + ".ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры";
			КонецЕсли;
			ЛевоеСоединение = ЛевоеСоединение + "
			|		ИЗ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ТипЦен = &ТипЦенДинамический" + НомерТипаЦен + "
			|		) КАК ДинамическиеЦеныКомпании" + НомерТипаЦен;

			ЛевоеСоединение = ЛевоеСоединение + "
			|	)КАК ВложенныйЗапрос" + НомерТипаЦен +"
			|	ПО ЦеныКомпании" + НомерТипаЦен + ".Номенклатура = ВложенныйЗапрос" + НомерТипаЦен +".Номенклатура";
			Если ЕстьХарактеристикаНоменклатуры Тогда
				ЛевоеСоединение = ЛевоеСоединение + "
				|	И ЦеныКомпании" + НомерТипаЦен + ".ХарактеристикаНоменклатуры = ВложенныйЗапрос" + НомерТипаЦен +".ХарактеристикаНоменклатуры";
			КонецЕсли;
			Если ЕстьХарактеристикаНоменклатуры Тогда
				ЛевоеСоединение = ЛевоеСоединение + "
				|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|		ДинамическиеЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".Номенклатура КАК Номенклатура,
				|		ДинамическиеЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".ПроцентСкидкиНаценки
				|		КАК ПроцентСкидкиНаценкиБезХарактеристики
				|		ИЗ
				|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ТипЦен = &ТипЦенДинамический" + НомерТипаЦен + "
				|		) КАК ДинамическиеЦеныКомпанииБезХарактеристики" + НомерТипаЦен;

				ЛевоеСоединение = ЛевоеСоединение + "
				|	)КАК ВложенныйЗапросБезХарактеристики" + НомерТипаЦен +"
				|	ПО ЦеныКомпании" + НомерТипаЦен + ".Номенклатура = ВложенныйЗапрос" + НомерТипаЦен +".Номенклатура";
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРегламентированногоУчета);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	"+?(МетаданныеТабЧастиДокумента.Реквизиты.Найти("ЕдиницаИзмерения") <> Неопределено,"Док.ЕдиницаИзмерения", "Док.Номенклатура.ЕдиницаХраненияОстатков")+" КАК ЕдиницаИзмерения,
	|	"+?(МетаданныеТабЧастиДокумента.Реквизиты.Найти("СтавкаНДС") <> Неопределено,"Док.СтавкаНДС,", "")+"
	|	ВЫБОР КОГДА Количество = 0 ТОГДА Док.Цена ИНАЧЕ Док.Сумма/Док.Количество КОНЕЦ КАК Цена,
	|	"+?(МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено,"Док.Ссылка.ВалютаДокумента", "&ВалютаРеглУчета")
	+" КАК ВалютаДокумента,
	|	Док.НомерСтроки
	|" + ДополнительныеПоля + "
	|
	|ИЗ 
	|	Документ." + ИмяДокумента + "."+ИмяТабличнойЧасти+" КАК Док
	|" + ЛевоеСоединение + "
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО Док.НомерСтроки 
	|";

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	ПроверилиНаличиеЦенВЗапросе = Ложь;

	СоответствиеКурсыВалют = Новый Соответствие;
	
	ЕстьРеквизитУчитыватьНДС = МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено;
	ЕстьСуммаВключаетНДС = МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено;
	ЕстьРеквизитТабЧастиСтавкаНДС = МетаданныеТабЧастиДокумента.Реквизиты.Найти("СтавкаНДС") <> Неопределено;


	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 

		Если НЕ ПроверилиНаличиеЦенВЗапросе Тогда
			Если РезультатЗапроса.Колонки.Найти("Цена") <> Неопределено Тогда

				ПроверилиНаличиеЦенВЗапросе = Истина;

			Иначе

				Возврат;

			КонецЕсли;
		КонецЕсли;

		НомерТипаЦен = 1;

		ЦенаТовара   = ?(НЕ ЗначениеЗаполнено(Выборка.Цена), 0, Окр(Выборка.Цена,2));
		ВалютаТовара = Выборка.ВалютаДокумента;

		Если СоответствиеКурсыВалют[ВалютаТовара] = Неопределено Тогда
			СтруктураКурсаЦеныТовара             = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаТовара, ДокументОбъект.Дата);
			КурсЦеныТовара                       = СтруктураКурсаЦеныТовара.Курс;
			КратностьЦеныТовара                  = СтруктураКурсаЦеныТовара.Кратность;
			СоответствиеКурсыВалют[ВалютаТовара] = СтруктураКурсаЦеныТовара;
		Иначе
			СтруктураКурсаЦеныТовара = СоответствиеКурсыВалют[ВалютаТовара];
			КурсЦеныТовара           = СтруктураКурсаЦеныТовара.Курс;
			КратностьЦеныТовара      = СтруктураКурсаЦеныТовара.Кратность;
		КонецЕсли;

		МинимальнаяЦена = 0;

		Пока НомерТипаЦен <> 0 Цикл

			Если РезультатЗапроса.Колонки.Найти("Цена" + НомерТипаЦен) <> Неопределено
			   И РезультатЗапроса.Колонки.Найти("Цена" + НомерТипаЦен + "Валюта") <> Неопределено
			   И РезультатЗапроса.Колонки.Найти("Цена" + НомерТипаЦен + "Единица") <> Неопределено Тогда

				ЦенаПроверки    = Выборка["Цена" + НомерТипаЦен];
				ВалютаПроверки  = Выборка["Цена" + НомерТипаЦен + "Валюта"];
				ЕдиницаПроверки = Выборка["Цена" + НомерТипаЦен + "Единица"];
				ЦенаВключаетНДС = Выборка["ЦенаВключаетНДС" + НомерТипаЦен];

				// Считаем, что если не задана цена или валюта цены
				// (нет цены данного типа для данной номенклатуры), то
				// проверка прошла
				Если НЕ ЗначениеЗаполнено(ВалютаПроверки)
				 Или НЕ ЗначениеЗаполнено(ЦенаПроверки) Тогда
					МинимальнаяЦена = 0;
					Прервать; 
				КонецЕсли;

				Если РезультатЗапроса.Колонки.Найти("ПроцентСкидкиНаценки" + НомерТипаЦен) <> Неопределено Тогда
					ПроцентСкидкиНаценки = Выборка["ПроцентСкидкиНаценки" + НомерТипаЦен];
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ПроцентСкидкиНаценки)
				   И РезультатЗапроса.Колонки.Найти("ПроцентСкидкиНаценкиИзСправочника" + НомерТипаЦен) <> Неопределено Тогда
					ПроцентСкидкиНаценки = Выборка["ПроцентСкидкиНаценкиИзСправочника" + НомерТипаЦен];
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ПроцентСкидкиНаценки) Тогда
					ПроцентСкидкиНаценки = 0;
				КонецЕсли;

				ЦенаПроверки = Окр(ЦенаПроверки * (1 + ПроцентСкидкиНаценки / 100), 2);

				Если СоответствиеКурсыВалют[ВалютаПроверки] = Неопределено Тогда
					СтруктураКурсаЦеныПроверки             = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаПроверки, ДокументОбъект.Дата);
					КурсЦеныПроверки                       = СтруктураКурсаЦеныПроверки.Курс;
					КратностьЦеныПроверки                  = СтруктураКурсаЦеныПроверки.Кратность;
					СоответствиеКурсыВалют[ВалютаПроверки] = СтруктураКурсаЦеныПроверки;
				Иначе
					СтруктураКурсаЦеныПроверки = СоответствиеКурсыВалют[ВалютаПроверки];
					КурсЦеныПроверки           = СтруктураКурсаЦеныПроверки.Курс;
					КратностьЦеныПроверки      = СтруктураКурсаЦеныПроверки.Кратность;
				КонецЕсли;

				ЦенаПроверки = Ценообразование.ПересчитатьЦенуПриИзмененииЕдиницы(ЦенаПроверки, ЕдиницаПроверки, Выборка.ЕдиницаИзмерения);

				ПересчитаннаяЦенаПроверки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ЦенаПроверки,
																	   ВалютаПроверки,        ВалютаТовара,
																	   КурсЦеныПроверки,      КурсЦеныТовара,
																	   КратностьЦеныПроверки, КратностьЦеныТовара);

				ПересчитаннаяЦенаПроверки = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(ПересчитаннаяЦенаПроверки,
																					 Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
																					// ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
																					 ЦенаВключаетНДС,
																					 ЕстьРеквизитУчитыватьНДС 
																					 И ДокументОбъект.УчитыватьНДС, 
																					 ЕстьСуммаВключаетНДС 
																					 И ДокументОбъект.СуммаВключаетНДС, 
																					 ?(ЕстьРеквизитТабЧастиСтавкаНДС,
																					 Ценообразование.ПолучитьСтавкуНДС(Выборка.СтавкаНДС),0));

				ПересчитаннаяЦенаПроверки = Окр(ПересчитаннаяЦенаПроверки, 2);

				МинимальнаяЦена = ?(НомерТипаЦен = 1, ПересчитаннаяЦенаПроверки, Мин(МинимальнаяЦена, ПересчитаннаяЦенаПроверки));

				Если МинимальнаяЦена = 0 Тогда
					НомерТипаЦен = 0;
				Иначе
					НомерТипаЦен = НомерТипаЦен + 1;
				КонецЕсли;

			Иначе

				НомерТипаЦен = 0;

			КонецЕсли;

		КонецЦикла;

		Если МинимальнаяЦена > ЦенаТовара Тогда
			ТекстСообщения = "Строка "      + Выборка.НомерСтроки + ": "
					+ "Для товара " + Выборка.Номенклатура
					+ Символы.ПС + "    цена за единицу ниже порогового значения (цена: "
					+ Формат(ЦенаТовара, "ЧДЦ=2; ЧН=0") + " " + ВалютаТовара
					+ ", минимальное значение: "
					+ Формат(МинимальнаяЦена, "ЧДЦ=2; ЧН=0") + " " + ВалютаТовара
					+ ")";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьДопустимостьЦенОтпуска()

// Функция возвращает признак можно ли превышать остаток товаров на складе при отпуске товаров.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если разрешено превышать остаток, иначе Ложь.
//
Функция РазрешеноПревышениеОстаткаТоваровНаСкладе() Экспорт

	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеОстаткаТоваровНаСкладе, Ложь);

КонецФункции // РазрешеноПревышениеОстаткаТоваровНаСкладе()

// Функция возвращает признак разрешено ли отражать документы в регл учете
//
Функция РазрешеноОтражениеВРеглУчете() Экспорт
	
	// В управляемом режиме отражение документов в учете производиться в соответствии с общими настройками.
	// Каждый пользователь в каждом первичном документе не управляет отражением его в учете.
	// В связи с этим для управляемого режима отдельное право на отражение в учете не используется
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		ЕстьПраво = Истина;
	Иначе
		ЕстьПраво = ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтражатьВРеглУчете, Ложь);
	КонецЕсли;
	
	Возврат ЕстьПраво;

КонецФункции // РазрешеноОтражениеВРеглУчете

// Функция возвращает признак, разрешено ли редактировать разрешение превышения лимита отпуска материалов
//
Функция РазрешеноРедактированиеРазрешенияПревышенияЛимитаОтпускаМатериалов() Экспорт
	
	Возврат ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеРазрешенияПревышенияЛимитаОтпускаМатериалов, Ложь);

КонецФункции // РазрешеноРедактированиеРазрешенияПревышенияЛимитаОтпускаМатериалов

Функция ПравоНеОтпускатьТоварСЦенойНижеОпределенногоТипа() Экспорт

	ЗначениеПрава = ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа, Неопределено);	
	
	Возврат ЗначениеПрава;
	
КонецФункции // ПравоНеОтпускатьТоварСЦенойНижеОпределенногоТипа

// Функция возвращает признак, разрешено ли проведение без контроля взаиморсчетов
//
Функция ПравоРазрешитьПроведениеБезКонтроляВзаиморасчетов() Экспорт
	
	ЗначениеПрава = ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПроведениеБезКонтроляВзаиморасчетов, Истина);
	
	Возврат ЗначениеПрава;
	
КонецФункции

// Функция возвращает признак, разрешено ли проводить ППИ без заявки
//
Функция ПравоРазрешитьПроведениеПлатежаБезЗаявки() Экспорт

	ЗначениеПрава = ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПроведениеПлатежаБезЗаявки, Истина);
	
	Возврат ЗначениеПрава;

КонецФункции

// Функция возвращает признак разрешено ли превышать свободный остаток денежных средств
//
Функция ПравоРазрешитьПревышениеСвободногоОстаткаДС() Экспорт

	ЗначениеПрава = ПравоЕстьУПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеСвободногоОстаткаДС, Истина);
	
	Возврат ЗначениеПрава;

КонецФункции

// Возвращает наличие прав для администрирования пользователей
//
Функция ЕстьПравоАдминистрированияПользователей(ПользовательИБ = Неопределено) Экспорт
	
	Если ПользовательИБ = Неопределено Тогда
		ЕстьПраво = (РольДоступна("ПолныеПрава") 
						ИЛИ РольДоступна("АдминистраторПользователей"));
	Иначе
		ЕстьПраво = (ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава)
						ИЛИ ПользовательИБ.Роли.Содержит(Метаданные.Роли.АдминистраторПользователей));
	КонецЕсли; 
	
	Возврат ЕстьПраво;

КонецФункции // ЕстьПравоАдминистрированияПользователей

#Если Клиент Тогда
	
// Копирует значения доп.прав
//
// Параметры:
//		ТаблицаДопПрав	- <Таблица значений>, колонки "Право", "Значение". 
//						Содержит доп.права, которые нужно скопировать
//		СписокПрофилей	- <Массив>, содержит ссылки на профили для которых нужно скопировать доп.права
//
Процедура КопироватьДополнительныеПрава(ТаблицаДопПрав, СписокПрофилей) Экспорт

	Если ТаблицаДопПрав.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПрофильСсылка Из СписокПрофилей Цикл
		                            
		Если ПрофильСсылка.ЭтоГруппа Тогда			
			Продолжить;
		КонецЕсли;
		
		ЕстьПолныеПрава = ПрофильСсылка.СоставРолей.Найти("ПолныеПрава", "ИмяРоли") <> Неопределено;
		Если ЕстьПолныеПрава Тогда
			ОбщегоНазначения.Сообщение("Профиль содержит роль ""Полные права"". Доп.права не скопированы. "+ ПрофильСсылка, Перечисления.ВидыСообщений.ВажнаяИнформация, "Копирование доп.прав", ПрофильСсылка);
			
			Продолжить;
		КонецЕсли; 
		
		Для каждого СтрокаТаблицыДопПрав Из ТаблицаДопПрав Цикл
			МенеджерЗаписиДопПрав = РегистрыСведений.ЗначенияДополнительныхПравПользователя.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписиДопПрав.Пользователь = ПрофильСсылка;
			МенеджерЗаписиДопПрав.Право        = СтрокаТаблицыДопПрав.Право;
			МенеджерЗаписиДопПрав.Значение     = СтрокаТаблицыДопПрав.Значение;
			
			МенеджерЗаписиДопПрав.Записать();
		КонецЦикла; 
		
		ОбщегоНазначения.Сообщение("Выполнено копирование доп.прав для профиля: " + ПрофильСсылка, Перечисления.ВидыСообщений.Информация, "Копирование доп.прав", ПрофильСсылка);
	КонецЦикла; 
	
КонецПроцедуры //
 	
	
#КонецЕсли
