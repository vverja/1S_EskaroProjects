///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ЗАДАЧ

// Процедура заполняет реквизиты адресации у задачи
//
Процедура ЗаписатьАдресациюЗадачи(Задача, Организация, РольИИсполнитель) Экспорт
	
	Если Константы.РазделятьЗадачиПоОрганизациям.Получить() Тогда
		Задача.Организация	= Организация;
	КонецЕсли;
	
	Если Константы.РазделятьЗадачиПоРолямИсполнителей.Получить() Тогда
		Задача.Роль			= РольИИсполнитель;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывает алгоритмы формирования задач для каждого вида задачи
//
Процедура СформироватьСписокЗадач() Экспорт
	
	// Получение списка нужных видов задач
	ЗапросНужныхВидовЗадач = Новый Запрос;
	ЗапросНужныхВидовЗадач.Текст =
	"ВЫБРАТЬ
	|	ВидыЗадачПользователей.Ссылка КАК ВидЗадачиПользователей
	|ИЗ
	|	Справочник.ВидыЗадачПользователей КАК ВидыЗадачПользователей
	|ГДЕ
	|	(НЕ ВидыЗадачПользователей.ПометкаУдаления)
	|	И ВидыЗадачПользователей.Использование";
	
	ВыборкаЗапросаВидовЗадач = ЗапросНужныхВидовЗадач.Выполнить().Выбрать();
	
	// Подготовка общих данных
	ВремяФормированияЗадач = ТекущаяДата();
	
	Если День(ВремяФормированияЗадач) < 20 Тогда
		АктуальныйПериодРегистрации = НачалоМесяца(ДобавитьМесяц(ВремяФормированияЗадач, -1));
	Иначе
		АктуальныйПериодРегистрации = НачалоМесяца(ВремяФормированияЗадач);
	КонецЕсли;
	
	// Организации нужно обрабатывать все
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Ссылка КАК ГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СписокОрганизаций			= Выгрузка.ВыгрузитьКолонку("Ссылка");
	СписокГоловныхОрганизаций	= Выгрузка.ВыгрузитьКолонку("ГоловнаяОрганизация");
	
	ЕстьЗадачиВозвратНаРаботу			= Ложь;
	ЕстьЗадачиКадровоеПеремещение		= Ложь;
	ЕстьЗадачиОценкаИспытательногоСрока	= Ложь;
	
	// Обход выборки запроса и заполнение задач по видам
	Пока ВыборкаЗапросаВидовЗадач.Следующий() Цикл
		
		Если    (ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.ВозвратНаРаботу) Тогда
			ЕстьЗадачиВозвратНаРаботу			= Истина;
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.ДеньРождения Тогда
			ДобавитьЗадачиДниРождения(ВремяФормированияЗадач);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.КадровоеПеремещение Тогда
			ЕстьЗадачиКадровоеПеремещение		= Истина;
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.НачислениеПоКадровомуДокументу Тогда
			ДобавитьЗадачиНачислениеПоКадровомуДокументу(ВремяФормированияЗадач, СписокОрганизаций);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.ОценкаИспытательногоСрока Тогда
			ЕстьЗадачиОценкаИспытательногоСрока	= Истина;
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.ОтражениеЗарплатыВУчете Тогда
			ДобавитьЗадачиОтражениеЗарплатыВУчете(АктуальныйПериодРегистрации);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.ОшибкиПриемаПоОсновномуМестуРаботы Тогда
			ДобавитьЗадачиОшибкиПриемаПоОсновномуМестуРаботы(ВремяФормированияЗадач);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.ОшибкиПриемаПоСовместительству Тогда
			ДобавитьЗадачиОшибкиПриемаПоСовместительству(ВремяФормированияЗадач);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.Перезаполнение Тогда
			ДобавитьЗадачиПерезаполнение(АктуальныйПериодРегистрации);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.Перерасчет Тогда
			ДобавитьЗадачиПерерасчет(АктуальныйПериодРегистрации, СписокГоловныхОрганизаций);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.ПриемНаРаботу Тогда
			ДобавитьЗадачиПриемНаРаботу(ВремяФормированияЗадач, СписокГоловныхОрганизаций);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.ПроизводственныйКалендарь Тогда
			ДобавитьЗадачиПроизводственныйКалендарь(ВремяФормированияЗадач);
			
		ИначеЕсли ВыборкаЗапросаВидовЗадач.ВидЗадачиПользователей = Справочники.ВидыЗадачПользователей.РасчетЗарплаты Тогда
			ДобавитьЗадачиРасчетЗарплаты(АктуальныйПериодРегистрации);
			
		Иначе
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьЗадачиНамеченныеСобытияПоПерсоналу(ВремяФормированияЗадач, СписокГоловныхОрганизаций, ЕстьЗадачиВозвратНаРаботу, ЕстьЗадачиКадровоеПеремещение, ЕстьЗадачиОценкаИспытательногоСрока);
	
	// Удалим выполненные задачи 3х месячной давности
	Запрос.УстановитьПараметр("АктуальныйПериодРегистрации",	АктуальныйПериодРегистрации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК Задачи
	|ГДЕ
	|	Задачи.Выполнена
	|	И Задачи.Дата < ДОБАВИТЬКДАТЕ(&АктуальныйПериодРегистрации, МЕСЯЦ, -3)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Выборка.Ссылка.ПолучитьОбъект().Удалить();
	КонецЦикла;
	
	// Изменение Константы ДатаАктуальностиЗадач
	Константы.ДатаАктуальностиЗадач.Установить(ВремяФормированияЗадач);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ЗАДАЧ ЗАРПЛАТНО-КАДРОВОЙ ФУНКЦИОНАЛЬНОСТИ

Процедура ДобавитьЗадачиДниРождения(ВремяФормированияЗадач)
	
	ЗапросДляДнейРождения = Новый Запрос;
	ЗапросДляДнейРождения.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения)) КАК Период,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Наименование КАК Наименование,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Ссылка,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол КАК Пол,
	|	ВЫБОР
	|		КОГДА (ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения)) / 5 = (ВЫРАЗИТЬ((ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения)) / 5 КАК ЧИСЛО(4, 0)))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДополнительныеДанные,
	|	РаботникиОрганизацийСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних КАК РаботникиОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Задачи.ОбъектЗадачи КАК ФизЛицо
	|		ИЗ
	|			Задача.ЗадачаИсполнителя КАК Задачи
	|		ГДЕ
	|			Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.ДеньРождения)) КАК Существующие
	|		ПО (Существующие.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо)
	|ГДЕ
	|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И РаботникиОрганизацийСрезПоследних.Сотрудник.ВидДоговора В(ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор))
	|	И ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения)) >= ДОБАВИТЬКДАТЕ(&ВремяФормированияЗадач, ДЕНЬ, -5)
	|	И ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения, ГОД, ГОД(&ВремяФормированияЗадач) - ГОД(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения)) <= ДОБАВИТЬКДАТЕ(&ВремяФормированияЗадач, ДЕНЬ, 5)
	|	И РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.ДатаРождения <> ДАТАВРЕМЯ(1, 1, 1)
	|	И Существующие.ФизЛицо ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Наименование";
	
	ЗапросДляДнейРождения.Параметры.Вставить("ВремяФормированияЗадач", ВремяФормированияЗадач);
	ВыборкаДнейРождения = ЗапросДляДнейРождения.Выполнить().Выбрать();
	
	Пока ВыборкаДнейРождения.Следующий() Цикл
		ФИОСотрудника = СокрЛП(ВыборкаДнейРождения.Наименование);
		
		Если ВыборкаДнейРождения.ДополнительныеДанные Тогда
			НаименованиеЗадачи = "Поздравить " + Формат(ВыборкаДнейРождения.Период, "ДФ=""д ММММ""") + " с юбилеем сотрудника " + ФИОСотрудника;
		Иначе
			НаименованиеЗадачи = "Поздравить " + Формат(ВыборкаДнейРождения.Период, "ДФ=""д ММММ""") + " с днем рождения сотрудника " + ФИОСотрудника;
		КонецЕсли;
		
		ЗадачаДнейРождения = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаДнейРождения.Дата			= НачалоДня(ВыборкаДнейРождения.Период);
		ЗадачаДнейРождения.ВидЗадачи	= Справочники.ВидыЗадачПользователей.ДеньРождения;
		ЗадачаДнейРождения.ОбъектЗадачи	= ВыборкаДнейРождения.Ссылка;
		ЗадачаДнейРождения.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаДнейРождения, ВыборкаДнейРождения.Организация, Справочники.РолиИсполнителей.Кадровик);
		ЗадачаДнейРождения.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиНамеченныеСобытияПоПерсоналу(ВремяФормированияЗадач, МассивОрганизаций, ЕстьЗадачиВозвратНаРаботу, ЕстьЗадачиКадровоеПеремещение, ЕстьЗадачиОценкаИспытательногоСрока)
	
	Если НЕ ЕстьЗадачиВозвратНаРаботу И НЕ ЕстьЗадачиКадровоеПеремещение И НЕ ЕстьЗадачиОценкаИспытательногоСрока Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачала		= ОбщегоНазначения.ДобавитьИнтервал(ВремяФормированияЗадач,Перечисления.Периодичность.Месяц, -1);
	ДатаОкончания	= ОбщегоНазначения.ДобавитьИнтервал(ВремяФормированияЗадач,Перечисления.Периодичность.Неделя, 1);
	
	Результат = Обработки.ПоказНамеченныхСобытийПоПерсоналу.Создать().СформироватьЗапрос(МассивОрганизаций, ДатаНачала, ДатаОкончания);
	ТаблицаНамеченныхСобытий = Результат.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНамеченныхСобытий",	ТаблицаНамеченныхСобытий);
	
	// необходимо сделать условие на запрос, что бы не получать ненужные задачи
	УсловиеНаЗадачи = "";
	Если	НЕ ЕстьЗадачиКадровоеПеремещение = ЕстьЗадачиВозвратНаРаботу
	ИЛИ		НЕ ЕстьЗадачиОценкаИспытательногоСрока = ЕстьЗадачиВозвратНаРаботу Тогда
		ОграничениеНаЗадачи = "";
		Если НЕ ЕстьЗадачиКадровоеПеремещение = ЕстьЗадачиВозвратНаРаботу Тогда
			ОграничениеНаЗадачи = "ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.Перемещение)";
		КонецЕсли;
		Если НЕ ЕстьЗадачиОценкаИспытательногоСрока = ЕстьЗадачиВозвратНаРаботу Тогда
			Если НЕ ПустаяСтрока(ОграничениеНаЗадачи) Тогда
				ОграничениеНаЗадачи = ОграничениеНаЗадачи + ",";
			КонецЕсли;
			ОграничениеНаЗадачи = ОграничениеНаЗадачи + "ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.РезультатИспытательногоСрока)";
		КонецЕсли;
		
		УсловиеНаЗадачи = "ГДЕ ("+?(ЕстьЗадачиВозвратНаРаботу, "НЕ ", "") + "ТаблицаНамеченныхСобытий.ПланируемоеСобытие В ("+ОграничениеНаЗадачи+"))";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНамеченныхСобытий.ПланируемоеСобытие,
	|	ТаблицаНамеченныхСобытий.ДатаИзменения,
	|	ТаблицаНамеченныхСобытий.Сотрудник,
	|	ТаблицаНамеченныхСобытий.СотрудникНаименование,
	|	ТаблицаНамеченныхСобытий.Организация,
	|	ТаблицаНамеченныхСобытий.Подразделение,
	|	ТаблицаНамеченныхСобытий.Должность,
	|	ВЫБОР
	|		КОГДА ТаблицаНамеченныхСобытий.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.Перемещение)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.КадровоеПеремещение)
	|		КОГДА ТаблицаНамеченныхСобытий.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.РезультатИспытательногоСрока)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.ОценкаИспытательногоСрока)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.ВозвратНаРаботу)
	|	КОНЕЦ КАК ВидЗадачи
	|ПОМЕСТИТЬ ВТ_НамеченныеСобытия
	|ИЗ
	|	&ТаблицаНамеченныхСобытий КАК ТаблицаНамеченныхСобытий
	|
	|"+УсловиеНаЗадачи+"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НамеченныеСобытия.ПланируемоеСобытие,
	|	НамеченныеСобытия.ДатаИзменения,
	|	НамеченныеСобытия.СотрудникНаименование,
	|	НамеченныеСобытия.ВидЗадачи,
	|	НамеченныеСобытия.Сотрудник,
	|	НамеченныеСобытия.Организация,
	|	НамеченныеСобытия.Подразделение,
	|	НамеченныеСобытия.Должность
	|ИЗ
	|	ВТ_НамеченныеСобытия КАК НамеченныеСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
	|		ПО НамеченныеСобытия.Сотрудник = Задачи.ОбъектЗадачи
	|			И НамеченныеСобытия.ДатаИзменения = Задачи.Дата
	|			И НамеченныеСобытия.ВидЗадачи = Задачи.ВидЗадачи
	|ГДЕ
	|	Задачи.Ссылка ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ФИОСотрудника = СокрЛП(Выборка.СотрудникНаименование);
		
		НаименованиеЗадачи = "";
		Если Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.Заболевание Тогда
			НаименованиеЗадачи	= "Выздоровление сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.Командировка Тогда
			НаименованиеЗадачи	= "Возврат из командировки сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтгулВСчетЕжегодногоОтпуска Тогда
			НаименованиеЗадачи	= "Возврат из отгула сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтпускБезСохраненияЗарплаты Тогда
			НаименованиеЗадачи	= "Возврат из отпуска за свой счет сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтпускЕжегодный Тогда
			НаименованиеЗадачи	= "Возврат из ежегодного отпуска сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтпускПоУходуЗаРебенком Тогда
			НаименованиеЗадачи	= "Возврат из отпуска по уходу за ребенком сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтпускПрочий Тогда
			НаименованиеЗадачи	= "Возврат из прочего отпуска сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтпускУчебный Тогда
			НаименованиеЗадачи	= "Возврат из учебного отпуска сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтпускУчебныйНеоплачиваемый Тогда
			НаименованиеЗадачи	= "Возврат из учебного неоплачиваемого отпуска сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.ОтсутствуетПоНевыясненнойПричине Тогда
			НаименованиеЗадачи	= "Возврат после прогула сотрудника " + ФИОСотрудника;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.Перемещение Тогда
			НаименованиеЗадачи	= "Переместить сотрудника " + ФИОСотрудника + " в подразделение " + Выборка.Подразделение + " на должность " + Выборка.Должность;
		ИначеЕсли Выборка.ПланируемоеСобытие = Перечисления.НамеченныеСобытияПоПерсоналу.РезультатИспытательногоСрока Тогда
			НаименованиеЗадачи	= "Оценить испытательный срок сотрудника " + ФИОСотрудника;
		КонецЕсли;
		
		ЗадачаПоПерсоналу = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаПоПерсоналу.Дата			= НачалоДня(Выборка.ДатаИзменения);
		ЗадачаПоПерсоналу.ВидЗадачи		= Выборка.ВидЗадачи;
		ЗадачаПоПерсоналу.ОбъектЗадачи	= Выборка.Сотрудник;
		ЗадачаПоПерсоналу.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаПоПерсоналу, Выборка.Организация, Справочники.РолиИсполнителей.Кадровик);
		ЗадачаПоПерсоналу.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиПриемНаРаботу(ВремяФормированияЗадач, МассивОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.Ссылка.Наименование КАК Наименование,
	|	СотрудникиОрганизаций.Ссылка.Физлицо.Пол КАК Пол,
	|	СотрудникиОрганизаций.Организация КАК Организация
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних КАК РаботникиОрганизаций
	|		ПО (РаботникиОрганизаций.Сотрудник = СотрудникиОрганизаций.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Задачи.ОбъектЗадачи КАК Сотрудник
	|		ИЗ
	|			Задача.ЗадачаИсполнителя КАК Задачи
	|		ГДЕ
	|			Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.ПриемНаРаботу)) КАК Существующие
	|		ПО (Существующие.Сотрудник = СотрудникиОрганизаций.Ссылка)
	|ГДЕ
	|	(НЕ СотрудникиОрганизаций.ЭтоГруппа)
	|	И (НЕ СотрудникиОрганизаций.ПометкаУдаления)
	|	И СотрудникиОрганизаций.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор))
	|	И РаботникиОрганизаций.Сотрудник ЕСТЬ NULL
	|	И Существующие.Сотрудник ЕСТЬ NULL
	|	И СотрудникиОрганизаций.Актуальность";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ФИОСотрудника = СокрЛП(Выборка.Наименование);
		
		НаименованиеЗадачи = "Принять на работу сотрудника " + ФИОСотрудника;
		
		ЗадачаПоПерсоналу = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаПоПерсоналу.Дата			= НачалоДня(ВремяФормированияЗадач);
		ЗадачаПоПерсоналу.ВидЗадачи		= Справочники.ВидыЗадачПользователей.ПриемНаРаботу;
		ЗадачаПоПерсоналу.ОбъектЗадачи	= Выборка.Сотрудник;
		ЗадачаПоПерсоналу.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаПоПерсоналу, Выборка.Организация, Справочники.РолиИсполнителей.Кадровик);
		ЗадачаПоПерсоналу.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиОшибкиПриемаПоОсновномуМестуРаботы(ВремяФормированияЗадач)
	
	ЗапросОшибокПеремещений = Новый Запрос;
	ЗапросОшибокПеремещений.Текст =
	"ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка,
	|	Ошибки.Пол КАК Пол,
	|	Ошибки.Наименование КАК Наименование,
	|	Ошибки.Организация КАК Организация,
	|	Ошибки.Период КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОшибкиОМР.Физлицо КАК Ссылка,
	|		ОшибкиОМР.Физлицо.Пол КАК Пол,
	|		ОшибкиОМР.Физлицо.Наименование КАК Наименование,
	|		NULL КАК Организация,
	|		NULL КАК НаименованиеОрганизации,
	|		&ВремяФормированияЗадач КАК Период
	|	ИЗ
	|		РегистрСведений.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботыОшибки КАК ОшибкиОМР
	|	ГДЕ
	|		(НЕ ОшибкиОМР.Физлицо.Наименование ЕСТЬ NULL )) КАК Ошибки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Задачи.ОбъектЗадачи КАК ФизЛицо
	|		ИЗ
	|			Задача.ЗадачаИсполнителя КАК Задачи
	|		ГДЕ
	|			Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.ОшибкиПриемаПоОсновномуМестуРаботы)) КАК Существующие
	|		ПО (Существующие.ФизЛицо = Ошибки.Ссылка)
	|ГДЕ
	|	Существующие.ФизЛицо ЕСТЬ NULL ";
	ЗапросОшибокПеремещений.Параметры.Вставить("ВремяФормированияЗадач", ВремяФормированияЗадач);
	ВыборкаОшибокПеремещений = ЗапросОшибокПеремещений.Выполнить().Выбрать();
	
	Пока ВыборкаОшибокПеремещений.Следующий() Цикл
		
		ФИОСотрудника = СокрЛП(ВыборкаОшибокПеремещений.Наименование);
		
		НаименованиеЗадачи = "Ошибки в документах приема по основному месту работы у сотрудника " + ФИОСотрудника;
		
		ЗадачаОшибокПеремещений = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаОшибокПеремещений.Дата			= НачалоДня(ВыборкаОшибокПеремещений.Период);
		ЗадачаОшибокПеремещений.ВидЗадачи		= Справочники.ВидыЗадачПользователей.ОшибкиПриемаПоОсновномуМестуРаботы;
		ЗадачаОшибокПеремещений.ОбъектЗадачи	= ВыборкаОшибокПеремещений.Ссылка;
		ЗадачаОшибокПеремещений.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаОшибокПеремещений, ВыборкаОшибокПеремещений.Организация, Справочники.РолиИсполнителей.Кадровик);
		ЗадачаОшибокПеремещений.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиОшибкиПриемаПоСовместительству(ВремяФормированияЗадач)
	
	ЗапросОшибокПеремещений = Новый Запрос;
	ЗапросОшибокПеремещений.Текст =
	"ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка,
	|	Ошибки.Пол КАК Пол,
	|	Ошибки.Наименование КАК Наименование,
	|	Ошибки.Организация КАК Организация,
	|	Ошибки.Период КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОшибкиСовм.Физлицо КАК Ссылка,
	|		ОшибкиСовм.Физлицо.Пол КАК Пол,
	|		ОшибкиСовм.Физлицо.Наименование КАК Наименование,
	|		ОшибкиСовм.Организация КАК Организация,
	|		ОшибкиСовм.Организация.Наименование КАК НаименованиеОрганизации,
	|		&ВремяФормированияЗадач КАК Период
	|	ИЗ
	|		РегистрСведений.ПериодыРаботыРаботниковОрганизацийПоСовместительствуОшибки КАК ОшибкиСовм
	|	ГДЕ
	|		(НЕ ОшибкиСовм.Физлицо.Наименование ЕСТЬ NULL )) КАК Ошибки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Задачи.ОбъектЗадачи КАК ФизЛицо
	|		ИЗ
	|			Задача.ЗадачаИсполнителя КАК Задачи
	|		ГДЕ
	|			Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.ОшибкиПриемаПоСовместительству)) КАК Существующие
	|		ПО (Существующие.ФизЛицо = Ошибки.Ссылка)
	|ГДЕ
	|	Существующие.ФизЛицо ЕСТЬ NULL ";
	ЗапросОшибокПеремещений.Параметры.Вставить("ВремяФормированияЗадач", ВремяФормированияЗадач);
	ВыборкаОшибокПеремещений = ЗапросОшибокПеремещений.Выполнить().Выбрать();
	
	Пока ВыборкаОшибокПеремещений.Следующий() Цикл
		
		ФИОСотрудника = СокрЛП(ВыборкаОшибокПеремещений.Наименование);
		
		НаименованиеЗадачи = "Ошибки в документах приема по совместительству у сотрудника " + ФИОСотрудника;
		
		ЗадачаОшибокПеремещений = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаОшибокПеремещений.Дата			= НачалоДня(ВыборкаОшибокПеремещений.Период);
		ЗадачаОшибокПеремещений.ВидЗадачи		= Справочники.ВидыЗадачПользователей.ОшибкиПриемаПоСовместительству;
		ЗадачаОшибокПеремещений.ОбъектЗадачи	= ВыборкаОшибокПеремещений.Ссылка;
		ЗадачаОшибокПеремещений.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаОшибокПеремещений, ВыборкаОшибокПеремещений.Организация, Справочники.РолиИсполнителей.Кадровик);
		ЗадачаОшибокПеремещений.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиПерезаполнение(АктуальныйПериодРегистрации)
	
	ЗапросПерезаполнения = Новый Запрос;
	ЗапросПерезаполнения.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыеНачисления.ОбъектЗаполнения КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ПлановыеНачисления.ОбъектЗаполнения) КАК Наименование,
	|	ПлановыеНачисления.Организация КАК Организация,
	|	ПлановыеНачисления.ПериодРегистрации КАК Период
	|ИЗ
	|	РегистрСведений.ЗаполнениеПлановыхНачислений КАК ПлановыеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Задачи.ОбъектЗадачи КАК ОбъектЗаполнения
	|		ИЗ
	|			Задача.ЗадачаИсполнителя КАК Задачи
	|		ГДЕ
	|			Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.Перезаполнение)) КАК Существующие
	|		ПО (Существующие.ОбъектЗаполнения = ПлановыеНачисления.ОбъектЗаполнения)
	|ГДЕ
	|	ПлановыеНачисления.ПериодРегистрации >= &АктуальныйПериодРегистрации
	|	И Существующие.ОбъектЗаполнения ЕСТЬ NULL ";
								
	ЗапросПерезаполнения.Параметры.Вставить("АктуальныйПериодРегистрации", АктуальныйПериодРегистрации);
	ВыборкаПерезаполнения = ЗапросПерезаполнения.Выполнить().Выбрать();
	
	Пока ВыборкаПерезаполнения.Следующий() Цикл
		
		НаименованиеЗадачи = "Перезаполнить и перерассчитать " +СокрЛП(ВыборкаПерезаполнения.Наименование);
		
		ЗадачаПерезаполнения = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаПерезаполнения.Дата			= НачалоДня(ВыборкаПерезаполнения.Период);
		ЗадачаПерезаполнения.ВидЗадачи		= Справочники.ВидыЗадачПользователей.Перезаполнение;
		ЗадачаПерезаполнения.ОбъектЗадачи	= ВыборкаПерезаполнения.Ссылка;
		ЗадачаПерезаполнения.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаПерезаполнения, ВыборкаПерезаполнения.Организация, Справочники.РолиИсполнителей.Расчетчик);
		ЗадачаПерезаполнения.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиПерерасчет(АктуальныйПериодРегистрации, МассивОрганизаций)
	
	Результат = Обработки.ПерерасчетЗарплатыОрганизаций.Создать().СформироватьЗапрос(МассивОрганизаций, АктуальныйПериодРегистрации);
	ТаблицаПерерасчетов = Результат.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаПерерасчетов",	ТаблицаПерерасчетов);
	Запрос.УстановитьПараметр("АктуальныйПериодРегистрации", АктуальныйПериодРегистрации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПерерасчетов.Наименование,
	|	ТаблицаПерерасчетов.ПериодРегистрации,
	|	ТаблицаПерерасчетов.Документ,
	|	ТаблицаПерерасчетов.Организация
	|ПОМЕСТИТЬ ВТ_Перерасчеты
	|ИЗ
	|	&ТаблицаПерерасчетов КАК ТаблицаПерерасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Перерасчеты.Наименование,
	|	Перерасчеты.ПериодРегистрации,
	|	Перерасчеты.Документ,
	|	Перерасчеты.Организация
	|ИЗ
	|	ВТ_Перерасчеты КАК Перерасчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
	|		ПО Перерасчеты.Документ = Задачи.ОбъектЗадачи
	|			И (Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.Перерасчет))
	|			И (НАЧАЛОПЕРИОДА(Задачи.Дата, ДЕНЬ) = Перерасчеты.ПериодРегистрации)
	|ГДЕ
	|	Задачи.Ссылка ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеЗадачи = "Перерассчитать " + СокрЛП(Выборка.Наименование);
		
		ЗадачаПерерасчета = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаПерерасчета.Дата			= НачалоДня(Выборка.ПериодРегистрации);
		ЗадачаПерерасчета.ВидЗадачи		= Справочники.ВидыЗадачПользователей.Перерасчет;
		ЗадачаПерерасчета.ОбъектЗадачи	= Выборка.Документ;
		ЗадачаПерерасчета.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаПерерасчета, Выборка.Организация, Справочники.РолиИсполнителей.Расчетчик);
		ЗадачаПерерасчета.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиПроизводственныйКалендарь(ВремяФормированияЗадач)
	
	ПервыйГод	= Год(ДобавитьМесяц(ВремяФормированияЗадач, -1));
	ВторойГод	= Год(ДобавитьМесяц(ВремяФормированияЗадач, 1));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Календарь.Год КАК Год
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК Календарь
	|ГДЕ
	|	Календарь.Год МЕЖДУ &ПервыйГод И &ВторойГод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задачи.ОбъектЗадачи
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК Задачи
	|ГДЕ
	|	Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.ПроизводственныйКалендарь)
	|	И Задачи.ОбъектЗадачи МЕЖДУ &ПервыйГод И &ВторойГод";
	
	Запрос.УстановитьПараметр("ПервыйГод",	ПервыйГод);
	Запрос.УстановитьПараметр("ВторойГод",	ВторойГод);
	
	Результат = Запрос.Выполнить();
	
	ДваГода = ПервыйГод <> ВторойГод;
	
	ЗаполнятьПервыйГод	= Результат.Пустой();
	ЗаполнятьВторойГод	= Результат.Пустой() И ДваГода;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Год = ПервыйГод Тогда
			ЗаполнятьПервыйГод	= Ложь;
		КонецЕсли;
		Если Выборка.Год = ВторойГод И ДваГода Тогда
			ЗаполнятьВторойГод	= Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполнятьПервыйГод Тогда
		НаименованиеЗадачи = "Заполнить производственный календарь за " + Формат(ПервыйГод,"ЧЦ=4; ЧГ=0") + " год";;
		
		ЗадачаКалендаря = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаКалендаря.Дата			= Дата(ПервыйГод, 1, 1);
		ЗадачаКалендаря.ВидЗадачи		= Справочники.ВидыЗадачПользователей.ПроизводственныйКалендарь;
		ЗадачаКалендаря.ОбъектЗадачи	= ПервыйГод;
		ЗадачаКалендаря.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаКалендаря, Справочники.Организации.ПустаяСсылка(), Справочники.РолиИсполнителей.ПустаяСсылка());
		ЗадачаКалендаря.Записать();
	КонецЕсли;
	
	Если ЗаполнятьВторойГод Тогда
		НаименованиеЗадачи = "Заполнить производственный календарь за " + Формат(ВторойГод,"ЧЦ=4; ЧГ=0") + " год";;
		
		ЗадачаКалендаря = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаКалендаря.Дата			= Дата(ВторойГод, 1, 1);
		ЗадачаКалендаря.ВидЗадачи		= Справочники.ВидыЗадачПользователей.ПроизводственныйКалендарь;
		ЗадачаКалендаря.ОбъектЗадачи	= ВторойГод;
		ЗадачаКалендаря.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаКалендаря, Справочники.Организации.ПустаяСсылка(), Справочники.РолиИсполнителей.ПустаяСсылка());
		ЗадачаКалендаря.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗадачиРасчетЗарплаты(АктуальныйПериодРегистрации)
	
	ЗапросРасчетаЗарплаты = Новый Запрос;
	ЗапросРасчетаЗарплаты.Текст =
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(&АктуальныйПериодРегистрации, МЕСЯЦ) КАК Период,
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(НачислениеЗарплатыРаботникамОрганизаций.Ссылка) КАК Ссылка,
	|			НачислениеЗарплатыРаботникамОрганизаций.Организация КАК Организация
	|		ИЗ
	|			Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций
	|		ГДЕ
	|			НачислениеЗарплатыРаботникамОрганизаций.ПериодРегистрации = &АктуальныйПериодРегистрации
	|			И (НЕ НачислениеЗарплатыРаботникамОрганизаций.ПометкаУдаления)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НачислениеЗарплатыРаботникамОрганизаций.Организация) КАК НачислениеЗарплатыРаботникамОрганизаций
	|		ПО Организации.Ссылка = НачислениеЗарплатыРаботникамОрганизаций.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Задачи.ОбъектЗадачи КАК Организация,
	|			Задачи.Дата КАК Дата
	|		ИЗ
	|			Задача.ЗадачаИсполнителя КАК Задачи
	|		ГДЕ
	|			Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.РасчетЗарплаты)) КАК Существующие
	|		ПО (Существующие.Организация = Организации.Ссылка)
	|			И (Существующие.Дата = КОНЕЦПЕРИОДА(&АктуальныйПериодРегистрации, МЕСЯЦ))
	|ГДЕ
	|	(НЕ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					Документ.НачислениеЗарплатыРаботникамОрганизаций КАК Док
	|				ГДЕ
	|					Док.Организация = Организации.Ссылка
	|					И Док.Проведен
	|					И Док.ПериодРегистрации = &АктуальныйПериодРегистрации))
	|	И Существующие.Организация ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	НаименованиеОрганизации";
	
	ЗапросРасчетаЗарплаты.Параметры.Вставить("АктуальныйПериодРегистрации", АктуальныйПериодРегистрации);
	Выборка = ЗапросРасчетаЗарплаты.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеОрганизации = "";
		Если Не ПустаяСтрока(Выборка.НаименованиеОрганизации) Тогда
			НаименованиеОрганизации = " по " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации ") + СокрЛП(Выборка.НаименованиеОрганизации);
		КонецЕсли;
		НаименованиеЗадачи = "Начислить зарплату за " + Формат(Выборка.Период, "ДФ='ММММ'") + НаименованиеОрганизации;
		
		ЗадачаРасчетаЗарплаты = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаРасчетаЗарплаты.Дата			= КонецДня(Выборка.Период);
		ЗадачаРасчетаЗарплаты.ВидЗадачи		= Справочники.ВидыЗадачПользователей.РасчетЗарплаты;
		ЗадачаРасчетаЗарплаты.ОбъектЗадачи	= Выборка.Организация;
		ЗадачаРасчетаЗарплаты.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаРасчетаЗарплаты, Выборка.Организация, Справочники.РолиИсполнителей.Расчетчик);
		ЗадачаРасчетаЗарплаты.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачиНачислениеПоКадровомуДокументу(ВремяФормированияЗадач, СписокОрганизаций)
	
	ДатаНачала		= НачалоМесяца(ВремяФормированияЗадач);
	ДатаОкончания	= КонецМесяца(ВремяФормированияЗадач);
	
	Для Каждого Организация из СписокОрганизаций Цикл
	
		АнализНеявок = Обработки.АнализНеявок.Создать();
		АнализНеявок.ДатаНачала = ДатаНачала;
		АнализНеявок.ДатаОкончания = ДатаОкончания;
		АнализНеявок.Организация = Организация;
		АнализНеявок.Автозаполнение();
				
		ТаблицаНеявок = АнализНеявок.Неявки;
		

		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаНеявок",	ТаблицаНеявок);
		Запрос.УстановитьПараметр("Организация",	Организация);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаНеявок.КадровыйДокумент,
		|	ТаблицаНеявок.ДатаОкончания,
		|	&Организация КАК Организация
		|ПОМЕСТИТЬ ВТ_Неявки
		|ИЗ
		|	&ТаблицаНеявок КАК ТаблицаНеявок
		|ГДЕ
		|	(НЕ ТаблицаНеявок.ДатаОкончания ЕСТЬ NULL )
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Неявки.КадровыйДокумент,
		|	ВТ_Неявки.Организация
		|ИЗ
		|	ВТ_Неявки КАК ВТ_Неявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
		|		ПО ВТ_Неявки.КадровыйДокумент = Задачи.ОбъектЗадачи
		|			И (Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.НачислениеПоКадровомуДокументу))
		|ГДЕ
		|	Задачи.Ссылка ЕСТЬ NULL ";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НаименованиеЗадачи = "Рассчитать документ " + Выборка.КадровыйДокумент;
			
			ЗадачаРасчетаЗарплаты = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			ЗадачаРасчетаЗарплаты.Дата			= КонецДня(ВремяФормированияЗадач);
			ЗадачаРасчетаЗарплаты.ВидЗадачи		= Справочники.ВидыЗадачПользователей.НачислениеПоКадровомуДокументу;
			ЗадачаРасчетаЗарплаты.Наименование	= НаименованиеЗадачи;
			ЗадачаРасчетаЗарплаты.ОбъектЗадачи	= Выборка.КадровыйДокумент;
			ЗаписатьАдресациюЗадачи(ЗадачаРасчетаЗарплаты, Выборка.Организация, Справочники.РолиИсполнителей.Расчетчик);
			ЗадачаРасчетаЗарплаты.Записать();
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьЗадачиОтражениеЗарплатыВУчете(АктуальныйПериодРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(&АктуальныйПериодРегистрации, МЕСЯЦ) КАК Период,
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	ДокОтражениеЗПвУчете.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ОтражениеЗП.Ссылка) КАК Ссылка,
	|			ОтражениеЗП.Организация КАК Организация
	|		ИЗ
	|			Документ.ОтражениеЗарплатыВРеглУчете КАК ОтражениеЗП
	|		ГДЕ
	|			ОтражениеЗП.ПериодРегистрации = &АктуальныйПериодРегистрации
	|			И (НЕ ОтражениеЗП.ПометкаУдаления)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОтражениеЗП.Организация) КАК ДокОтражениеЗПвУчете
	|		ПО Организации.Ссылка = ДокОтражениеЗПвУчете.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Задачи.ОбъектЗадачи КАК Организация,
	|			Задачи.Дата КАК Дата
	|		ИЗ
	|			Задача.ЗадачаИсполнителя КАК Задачи
	|		ГДЕ
	|			Задачи.ВидЗадачи = ЗНАЧЕНИЕ(Справочник.ВидыЗадачПользователей.ОтражениеЗарплатыВУчете)) КАК Существующие
	|		ПО (Существующие.Организация = Организации.Ссылка)
	|			И (Существующие.Дата = КОНЕЦПЕРИОДА(&АктуальныйПериодРегистрации, МЕСЯЦ))
	|ГДЕ
	|	(НЕ 2 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					2
	|				ИЗ
	|					Документ.ОтражениеЗарплатыВРеглУчете КАК ДокЕСН
	|				ГДЕ
	|					ДокЕСН.Организация = Организации.Ссылка
	|					И ДокЕСН.Проведен
	|					И ДокЕСН.ПериодРегистрации = &АктуальныйПериодРегистрации))
	|	И Существующие.Организация ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	НаименованиеОрганизации";
	
	Запрос.Параметры.Вставить("АктуальныйПериодРегистрации", АктуальныйПериодРегистрации);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеОрганизации = "";
		Если Не ПустаяСтрока(Выборка.НаименованиеОрганизации) Тогда
			НаименованиеОрганизации = " по " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации ") + СокрЛП(Выборка.НаименованиеОрганизации);
		КонецЕсли;
		НаименованиеЗадачи = "Отразить в учете зарплату за " + Формат(Выборка.Период, "ДФ='ММММ'") + НаименованиеОрганизации;
		
		ЗадачаРасчетаЗарплаты = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаРасчетаЗарплаты.Дата			= КонецДня(Выборка.Период);
		ЗадачаРасчетаЗарплаты.ВидЗадачи		= Справочники.ВидыЗадачПользователей.ОтражениеЗарплатыВУчете;
		ЗадачаРасчетаЗарплаты.ОбъектЗадачи	= Выборка.Организация;
		ЗадачаРасчетаЗарплаты.Наименование	= НаименованиеЗадачи;
		ЗаписатьАдресациюЗадачи(ЗадачаРасчетаЗарплаты, Выборка.Организация, Справочники.РолиИсполнителей.Расчетчик);
		ЗадачаРасчетаЗарплаты.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает список видов договоров, для использования
// в процедурах генерации задач
//
// Для ЗУП некоторые строчки необходимо закоментировать
//
Функция ВернутьВидыДоговоров(ВернутьГражданских, ВернутьВоенных) Экспорт
	
	СтрокаДоговора = "";
	
	Если ВернутьГражданских Тогда
		СтрокаДоговора = СтрокаДоговора + "ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)";
	КонецЕсли;
	
	Возврат СтрокаДоговора;
	
КонецФункции

