////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ФОРМИРУЮЩИЕ ТЕКСТЫ СООБЩЕНИЙ ОБ ОШИБКАХ ПРОВЕДЕНИЯ

// Формирует стандартный текст сообщения при ошибках проведения, когда не хватает остатка в регистре.
//
// Параметры: 
//  ТекстСообщения - Исходный текст выводимого сообщения.
//  Остаток        - Текущий остаток ресурса в регистре.
//  Требуется      - Требуемый остаток ресурса в регистре.
//  ЕИ             - Единица измерения ресурса (единица измерения, валюта и т.д.).
//  Отказ          - Флаг отказа в проведении докумета,
//  Заголовок      - Заголовок начала серии сообщений об ошибках проведения (не обязательный).
//
Процедура ОшибкаНетОстатка(ТекстСообщения, Остаток, Требуется, ЕИ, Отказ, Заголовок="") Экспорт

	ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + Символы.ПС + Символы.Таб +
					   "Не хватает " + ?(Остаток > 0 , Требуется - Остаток, Требуется) + " " + ЕИ +
					   "; Остаток " + Остаток + " " + ЕИ +
					   "; Требуется " + Требуется + " " + ЕИ, Отказ, Заголовок);

КонецПроцедуры // ОшибкаНетОстатка()

// Формирует строку представления номенклатуры с учетом характеристики и серий.
//
// Параметры
//  НоменклатураПредставление   - представление номенклатуры.
//  ХарактеристикаПредставление - представление характеристики.
//  СерияПредставление          - представление серии.
//
// Возвращаемое значение
//  Строка с представлением номенклатуры.
//
Функция ПредставлениеНоменклатуры(НоменклатураПредставление, ХарактеристикаПредставление = "", 
	                                 СерияПредставление = "") Экспорт

	СтрПредставление = """" + СокрЛП(НоменклатураПредставление) + """";

	Если ЗначениеЗаполнено(ХарактеристикаПредставление)Тогда

		СтрПредставление = СтрПредставление + " / """ + СокрЛП(ХарактеристикаПредставление) + """";

	КонецЕсли;

	Если ЗначениеЗаполнено(СерияПредставление) Тогда

		СтрПредставление = СтрПредставление + " (""" + СокрЛП(СерияПредставление) + """)";

	КонецЕсли;

	Возврат СтрПредставление;

КонецФункции // ПредставлениеНоменклатуры()

// Заполняет структуру полей стандартными для табличной части "Товары" колонками.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруПолейТовары() Экспорт

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"		, "Номенклатура.ВидНоменклатуры.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям", "Номенклатура.ВестиПартионныйУчетПоСериям");

	Возврат СтруктураПолей;

КонецФункции // СформироватьСтруктуруПолейТовары()

// Заполняет структуру полей стандартными для табличной части "Товары" колонками,
// обязательными к заполнению в документах.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруОбязательныхПолейТовары() Экспорт

	Возврат Новый Структура("Номенклатура, Количество, Сумма");
	
КонецФункции // СформироватьСтруктуруОбязательныхПолейТовары()

// Заполняет структуру полей стандартными для табличной части "Возвратная тара" колонками.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруПолейТара() Экспорт

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("БланкСтрогогоУчета"		, "Номенклатура.ВидНоменклатуры.БланкСтрогогоУчета");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");

	Возврат СтруктураПолей;

КонецФункции // СформироватьСтруктуруПолейТара()

// Заполняет структуру полей стандартными для табличной части "Возвратная тара" колонками,
// обязательными к заполнению в документах.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруОбязательныхПолейТара() Экспорт

	Возврат Новый Структура("Номенклатура, Количество, Сумма");

КонецФункции // СформироватьСтруктуруОбязательныхПолейТара()

// Формирует структуру дерева значений, содержащего имена полей, которые
// нужно заполнить в запросе по шапке документа.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Дерево значений.
//
Функция СформироватьДеревоПолейЗапросаПоШапке()  Экспорт

	ДеревоПолейЗапросаПоШапке = Новый ДеревоЗначений;

	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	
	ДеревоПолейЗапросаПоШапке.Колонки.Добавить("Объект"   , ОписаниеТиповСтрока);
	ДеревоПолейЗапросаПоШапке.Колонки.Добавить("Поле"     , ОписаниеТиповСтрока);
	ДеревоПолейЗапросаПоШапке.Колонки.Добавить("Псевдоним", ОписаниеТиповСтрока);
	
	Возврат ДеревоПолейЗапросаПоШапке;

КонецФункции // СформироватьДеревоПолейЗапросаПоШапке()

// Вставляет строку в дерево полей запроса по шапке, если ее там еще нет,
// если есть, то ничего не делает.
//
// Параметры:
//  ДеревоПолейЗапросаПоШапке - дерево значений, содержащего имена полей, 
//                              которые нужно заполнить в запросе по шапке документа, 
//  ИмяОбъекта                - строка, имя объекта (справочник, регистр и т.д.), 
//  ИмяПоля                   - строка, имя поля объекта,
//  ИмяПсевдонима             - строка, имя псевдонима в запросе поля объекта (необязательный).
//
Процедура ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, ИмяОбъекта, ИмяПоля, ИмяПсевдонима = Неопределено) Экспорт

	// Поищем нужную строку.
	// Вначале ищем объект.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти(ИмяОбъекта, "Объект");

	Если СтрокаОбъекта = Неопределено Тогда // нужно добавить.
		
		СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Добавить();
		СтрокаОбъекта.Объект    = ИмяОбъекта;
		СтрокаОбъекта.Поле      = ИмяПоля;
		СтрокаОбъекта.Псевдоним = ИмяПсевдонима;


	КонецЕсли;

	// Ищем поле.
	СтрокаПоля = СтрокаОбъекта.Строки. Найти(ИмяПоля,"Поле");

	Если СтрокаПоля = Неопределено Тогда // нужно добавить

		СтрокаПоля = СтрокаОбъекта.Строки.Добавить();

		СтрокаПоля.Поле      = ИмяПоля;
		СтрокаПоля.Псевдоним = ИмяПсевдонима;

	КонецЕсли;

	// Ищем псевдоним.
	СтрокаПоля = СтрокаОбъекта.Строки.Найти( ИмяПсевдонима, "Псевдоним");

	Если СтрокаПоля = Неопределено Тогда // нужно добавить

		СтрокаПоля = СтрокаОбъекта.Строки.Добавить();

		СтрокаПоля.Поле      = ИмяПоля;
		СтрокаПоля.Псевдоним = ИмяПсевдонима;

	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВДеревоПолейЗапросаПоШапке()

// Формирует запрос на дополнительные параметры, нужные при проведении документа.
//
// Параметры: 
//  ДокументОбъект                 - объект проводимого документа, 
//  ДеревоПолейЗапросаПоШапке      - дерево значений, содержащего имена полей, 
//                                   которые нужно заполнить в запросе по шапке документа.
//  СтруктураШапкиДокумента        - структура, содержащая значения реквизитов, относящихся к шапке документа,
//                                   необходимых для его проведения.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Дополненная по результату запроса структура СтруктураШапкиДокумента.
//
Функция СформироватьЗапросПоДеревуПолей(ДокументОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета)  Экспорт

	СтрокиЗапроса           = "";
	НуженКурсВалютыУпрУчета = Ложь;
	НужнаУчетнаяПолитика    = Ложь;
	НужнаНастройкаСпособовВеденияУправленческогоПартионногоУчета = Ложь;
	
	ДокументОбъектМетаданные = ДокументОбъект.Метаданные();
	
	Для каждого СтрокаОбъекта Из ДеревоПолейЗапросаПоШапке.Строки Цикл
		Объект = СтрокаОбъекта.Объект;
		// Обрабатываются реквизиты Сделки, РасчетногоДокумента
		//	Если значение заполнено - значение приводится к типу, соответствующему типу реквизита в метаданных документа
		//	Если значение не заполнено - значение реквизита принимается равным NULL
		Если Объект = "Сделка" ИЛИ Объект = "РасчетныйДокумент" Тогда
			Если ЗначениеЗаполнено(ДокументОбъект[Объект]) Тогда
				ОбъектМетаданные = ДокументОбъект[Объект].Метаданные();
			Иначе
				ОбъектМетаданные = Неопределено;
			КонецЕсли;
			
			Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл
				Если ОбъектМетаданные = Неопределено 
					ИЛИ ОбъектМетаданные.Реквизиты.Найти(СокрЛП(СтрокаПоля.Поле)) = Неопределено  Тогда
					ИмяОбъекта = "NULL";
				Иначе
					ИмяОбъекта = "ВЫРАЗИТЬ(Док."+Объект+" КАК Документ." + ОбъектМетаданные.Имя + ")." + СокрЛП(СтрокаПоля.Поле);
				КонецЕсли;	
				СтрокиЗапроса = СтрокиЗапроса + ",
				|	" + ИмяОбъекта +
				?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));
			КонецЦикла;
		// Обрабатываются константы
		ИначеЕсли Объект = "Константы" Тогда
			Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл
                //Особым образом обрабатывается получение курса валюты управленческого учета:
				//	извлекается не из констант, а из регистра сведений КурсыВалют
				Если СтрокаПоля.Поле = "КурсВалютыУправленческогоУчета" Тогда

					СтрокиЗапроса = СтрокиЗапроса + ",
						|	КурсыВалютыУпрУчетаСрезПоследних.Курс КАК КурсВалютыУправленческогоУчета";					
						
					//Кроме курса валюты, нужно получить и кратность валюты	
					СтрокиЗапроса = СтрокиЗапроса + ",
						|	КурсыВалютыУпрУчетаСрезПоследних.Кратность КАК КратностьВалютыУправленческогоУчета";
						
						
					НуженКурсВалютыУпрУчета = Истина; //признак необходимости получения курса валюты упр. учета

				Иначе

					СтрокиЗапроса = СтрокиЗапроса + ",
					|	Константы." + СокрЛП(СтрокаПоля.Поле) +
					?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

				КонецЕсли;

			КонецЦикла;
			
			//Поле "НеУказанКурсВалюты" будет использоваться для контроля наличия курса валюты
            Если НуженКурсВалютыУпрУчета Тогда
				СтрокиЗапроса = СтрокиЗапроса + ",
					| 	ВЫБОР КОГДА КурсыВалютыУпрУчетаСрезПоследних.Период ЕСТЬ NULL
					|		ТОГДА ИСТИНА
					|		ИНАЧЕ ЛОЖЬ
					|	КОНЕЦ КАК НеУказанКурсВалюты";
			КонецЕсли; 

		// Обрабатываются параметры учетной политики
		ИначеЕсли Объект = "УчетнаяПолитика" Тогда
			Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл
				ИмяПоля = СокрЛП(СтрокаПоля.Поле);
				// Некоторые параметры учетной политики обрабатываются особым образом:
				//	Извлекаются не запросом из регистра УчетнаяПолитика, а с помощью специальных процедур
				Если ИмяПоля = "СписыватьПартииПриПроведенииДокументов" Тогда
					ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
					СтруктураШапкиДокумента.Вставить(ИмяПоля, ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументов);
				ИначеЕсли ИмяПоля = "ВестиПартионныйУчетПоСкладам" Тогда
					ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
					СтруктураШапкиДокумента.Вставить(ИмяПоля, ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладам);
				ИначеЕсли ИмяПоля = "ВедениеУчетаПоПроектам" Тогда
					СтруктураШапкиДокумента.Вставить(ИмяПоля, УправлениеПроектами.ВедениеУчетаПоПроектам());
				ИначеЕсли ИмяПоля = "ВедениеУчетаЗатратПоПроектам" Тогда
					СтруктураШапкиДокумента.Вставить(ИмяПоля, УправлениеПроектами.ВедениеУчетаЗатратПоПроектам());
				Иначе	
					НужнаУчетнаяПолитика = Истина;	//Признак необходимости получения учетной политики			
					СтрокиЗапроса = СтрокиЗапроса + ",
					|	УчетнаяПолитикаСрезПоследних." + ИмяПоля +
						?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));
				КонецЕсли;		
			КонецЦикла;
			
			// Поле "НеУказаныПараметрыУчетнойПолитики" будет использоваться для контроля наличия учетной политики
			Если НужнаУчетнаяПолитика Тогда
				СтрокиЗапроса = СтрокиЗапроса + ",
					| 	ВЫБОР КОГДА УчетнаяПолитикаСрезПоследних.Период ЕСТЬ NULL 
					|		ТОГДА ИСТИНА
					|		ИНАЧЕ ЛОЖЬ
					|	КОНЕЦ КАК НеУказаныПараметрыУчетнойПолитики";
			КонецЕсли; 
			
		// Обрабатываются параметры настройки способов ведения управленческого партионного учета
		ИначеЕсли Объект = "НастройкаСпособовВеденияУправленческогоПартионногоУчета" Тогда
			НужнаНастройкаСпособовВеденияУправленческогоПартионногоУчета = Истина;
			
			Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл
				//Для параметра СпособВеденияПартионногоУчетаПоОрганизации
				//	пустое значение приводится к значению Перечисление.СпособыВеденияПартионногоУчетаПоОрганизациям.ПоКомпанииВЦелом
				Если СокрЛП(СтрокаПоля.Поле) = "СпособВеденияПартионногоУчетаПоОрганизации" Тогда
					СтрокиЗапроса = СтрокиЗапроса + ",
					|	ЕСТЬNULL(НастройкаСпособовВеденияУправленческогоПартионногоУчетаСрезПоследних." + СокрЛП(СтрокаПоля.Поле) +
						", ЗНАЧЕНИЕ(Перечисление.СпособыВеденияПартионногоУчетаПоОрганизациям.ПоКомпанииВЦелом)) КАК "+
						?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), СокрЛП(СтрокаПоля.Поле), СокрЛП(СтрокаПоля.Псевдоним));
				Иначе		
					СтрокиЗапроса = СтрокиЗапроса + ",
					|	НастройкаСпособовВеденияУправленческогоПартионногоУчетаСрезПоследних." + СокрЛП(СтрокаПоля.Поле) +
						?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));
				КонецЕсли;
			КонецЦикла;
				
		ИначеЕсли Объект = "NULL" Тогда
			//Особым образом обрабатывается значение NULL
			//	Значение NULL используется, если некоторому значению в структуре шапки требуется 
			//	явно присвоить значение  NULL
			Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл
				СтрокиЗапроса = СтрокиЗапроса + ",
				|	NULL"+?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));
			КонецЦикла	
		Иначе
			//Обрабатываются реквизиты, которые называются точно так же, как реквизиты шапки документа
			Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл
				СтрокиЗапроса = СтрокиЗапроса + ",
				|	Док."+Объект+"."+ СокрЛП(СтрокаПоля.Поле)+
				?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));
			КонецЦикла	

		КонецЕсли; 
	
	КонецЦикла; 
	Запрос = Новый Запрос;

	// Надо добавить константу ВалютаРегламнтированногоУчета
	НужнаВалюта = СтруктураШапкиДокумента.Свойство("ВалютаДокумента");
	СтрокиЗапроса = СтрокиЗапроса + ",
	|
	|	Константы.ВалютаРегламентированногоУчета     КАК ВалютаРегламентированногоУчета,
	|	КурсыВалютыРеглУчетаСрезПоследних.Курс       КАК КурсВалютыРегламентированногоУчета,
	|	КурсыВалютыРеглУчетаСрезПоследних.Кратность  КАК КратностьВалютыРегламентированногоУчета"
	+ ?(НужнаВалюта, ",
	|
	|	Док.ВалютаДокумента                          КАК ВалютаДокумента,
	|	КурсыВалютыДокументаСрезПоследних.Курс       КАК КурсВалютыДокумента,
	|	КурсыВалютыДокументаСрезПоследних.Кратность  КАК КратностьВалютыДокумента", "");
	
	СтрокаЗапросаКурсыВалютыРеглУчета = "
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДвиженийДокумента,) КАК КурсыВалютыРеглУчетаСрезПоследних
	|	ПО Константы.ВалютаРегламентированногоУчета = КурсыВалютыРеглУчетаСрезПоследних.Валюта"
	 + ?(НужнаВалюта, ",
	| 
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДвиженийДокумента, Валюта = &ВалютаДокумента) КАК КурсыВалютыДокументаСрезПоследних
	|	ПО ИСТИНА", "");
	
	Если НуженКурсВалютыУпрУчета Тогда
		СтрокаЗапросаКурсВалютыУпрУчета = "
		|
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДвиженийДокумента,Валюта = &ВалютаУправленческогоУчета) КАК КурсыВалютыУпрУчетаСрезПоследних
		|	ПО Истина";
		
	
	Иначе
		СтрокаЗапросаКурсВалютыУпрУчета = "";
	КонецЕсли;
	
    Если НужнаНастройкаСпособовВеденияУправленческогоПартионногоУчета Тогда
       СтрокаЗапросаУчетнойПолитикиПоОрганизациям = "
	    |
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаСпособовВеденияУправленческогоПартионногоУчета.СрезПоследних(&ДатаДокумента,Организация = &ОрганизацияДокумента) КАК НастройкаСпособовВеденияУправленческогоПартионногоУчетаСрезПоследних
		|	ПО Истина";
		
		Запрос.УстановитьПараметр("ОрганизацияДокумента" , ДокументОбъект.Организация);

   Иначе
	   СтрокаЗапросаУчетнойПолитикиПоОрганизациям = "";
   КонецЕсли;
   
   Если НужнаУчетнаяПолитика Тогда
	   	СтрокаЗапросаУчетнойПолитики = "
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаДокумента,) КАК УчетнаяПолитикаСрезПоследних
		|	ПО Истина";

   Иначе
	   СтрокаЗапросаУчетнойПолитики = "";
   КонецЕсли;
   

	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + Сред(СтрокиЗапроса, 2) + "
	                | ИЗ 
	                |      Документ." + ДокументОбъектМетаданные.Имя + " КАК Док
					|      ,Константы"+ 					
					СтрокаЗапросаУчетнойПолитикиПоОрганизациям + 
					СтрокаЗапросаКурсыВалютыРеглУчета +
	                СтрокаЗапросаКурсВалютыУпрУчета + 
	                СтрокаЗапросаУчетнойПолитики + "
	                |     ГДЕ Док.Ссылка = &ДокументСсылка";

					
	// Установим параметры запроса.
	ДатаДокумента = ?(ДокументОбъектМетаданные.Реквизиты.Найти("ПериодРегистрации") <> Неопределено, КонецМесяца(ДокументОбъект.ПериодРегистрации), ДокументОбъект.Дата);
	ВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента"  , ДатаДокумента);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета" , ВалютаУправленческогоУчета);
	
	ДатаДвиженийДокумента = ДатаДокумента;
	Если  СтруктураШапкиДокумента.Свойство("ДатаОплаты")
		И СтруктураШапкиДокумента.Свойство("Оплачено")  Тогда
		Если  ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) И СтруктураШапкиДокумента.Оплачено = Истина Тогда
			ДатаДвиженийДокумента = СтруктураШапкиДокумента.ДатаОплаты;
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаДвиженийДокумента"  , ДатаДвиженийДокумента);
	
	Если НужнаВалюта Тогда
		Запрос.УстановитьПараметр("ВалютаДокумента", ДокументОбъект.ВалютаДокумента);
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		// Сформировать структуру шапки
		Для Каждого Колонка из РезультатЗапроса.Колонки Цикл
			СтруктураШапкиДокумента.Вставить(Колонка.Имя, Неопределено);
		КонецЦикла;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		// Проверить, что были получены необходимые данные
		ТекстОшибки = "";
		Если НужнаУчетнаяПолитика
			И Выборка.НеУказаныПараметрыУчетнойПолитики Тогда
			
			ТекстОшибки = Символы.ПС+"Не указаны параметры учетной политики (управленческий учет) на " + Формат(ДатаДокумента, "ДЛФ=DD");
		КонецЕсли;
		
		Если НуженКурсВалютыУпрУчета 
			И Выборка.НеУказанКурсВалюты Тогда
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + "Не указан курс валюты (" + ВалютаУправленческогоУчета + ") на " + Формат(ДатаДокумента, "ДЛФ=DD");
		КонецЕсли;
		
		Если ТекстОшибки <> "" Тогда
			//исключим самый первый символ ПС
			ТекстОшибки = Прав(ТекстОшибки, стрДлина(ТекстОшибки)-1);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		// Сформировать структуру шапки
		Для Каждого Колонка из РезультатЗапроса.Колонки Цикл
			СтруктураШапкиДокумента.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("ВалютаДокумента") Тогда
		Если ДокументОбъектМетаданные.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
			СтруктураШапкиДокумента.Вставить("КурсДокумента", 		ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
			СтруктураШапкиДокумента.Вставить("КратностьДокумента", 	ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // СформироватьЗапросПоДеревуПолей()

// Проверяет, что в табличной части нет услуг.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетУслуг(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт
    Перем ПредставлениеТабличнойЧасти;
	
	Если (НЕ ТаблицаЗначений = Неопределено) И (ТаблицаЗначений.Количество() > 0) Тогда
		// Цикл по строкам таблицы значений.
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

			Если СтрокаТаблицы.Услуга=истина И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда   // СтрокаТаблицы.Услуга может иметь значение Неопределено в случае если не заполнена номенклатура
				Если ПредставлениеТабличнойЧасти = неопределено Тогда
					ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
				КонецЕсли;	
				
				ТекстОшибки = НСтр("ru = 'В строке номер ""%НомерСтроки%"" табличной части ""%ПредставлениеТабличнойЧасти%"": содержится услуга. Услуг здесь быть не должно!'");
					 
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
					 
				ТекстПоля = ОбщегоНазначенияКлиентСервер.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "Номенклатура");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, ТекстПоля,, Отказ);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Цикл по строкам табличной части документа.
		Для каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
			Если СтрокаТаблицы.Номенклатура.Услуга И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда   
				Если ПредставлениеТабличнойЧасти = неопределено Тогда
					ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
				КонецЕсли;	
				ТекстОшибки = НСтр("ru = 'В строке номер ""%НомерСтроки%"" табличной части ""%ПредставлениеТабличнойЧасти%"": содержится услуга. Услуг здесь быть не должно!'");
					 
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
					 
				ТекстПоля = ОбщегоНазначенияКлиентСервер.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "Номенклатура");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, ТекстПоля,, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверитьЧтоНетУслуг()

// Проверяет, что в табличной части нет услуг.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетТоваров(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт
    Перем ПредставлениеТабличнойЧасти;

	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		Если СтрокаТаблицы.Услуга=ложь И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда  // СтрокаТаблицы.Услуга может иметь значение Неопределено в случае если не заполнена номенклатура
                Если ПредставлениеТабличнойЧасти = неопределено Тогда
					ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
				КонецЕсли;	

				ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		             """ табличной части """ + ПредставлениеТабличнойЧасти + """: содержится номенклатура, не являющаяся услугой. " +
				     "Здесь могут быть только услуги!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоНетТоваров()

// Проверяет, что в табличной части нет наборов.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетНаборов(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт
    Перем ПредставлениеТабличнойЧасти;

	Если (НЕ ТаблицаЗначений = Неопределено) И (ТаблицаЗначений.Количество() > 0) Тогда
		// Цикл по строкам таблицы значений.
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

			Если СтрокаТаблицы.Набор=истина И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)      // СтрокаТаблицы.Набор может иметь значение Неопределено в случае если не заполнена номенклатура
				И ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура")  Тогда
                Если ПредставлениеТабличнойЧасти = неопределено Тогда
					ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
				КонецЕсли;	
				ТекстОшибки = НСтр("ru = 'В строке номер ""%НомерСтроки%"" табличной части ""%ПредставлениеТабличнойЧасти%"": содержится набор-пакет. Наборов-пакетов здесь быть не должно!'");
					 
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
					 
				ТекстПоля = ОбщегоНазначенияКлиентСервер.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "Номенклатура");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, ТекстПоля,, Отказ);

			КонецЕсли;

		КонецЦикла;
	Иначе
		// Цикл по строкам табличной части документа.
		Для каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
			Если СтрокаТаблицы.Номенклатура.Набор И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)   
				И ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура")  Тогда
                Если ПредставлениеТабличнойЧасти = неопределено Тогда
					ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
				КонецЕсли;
				ТекстОшибки = НСтр("ru = 'В строке номер ""%НомерСтроки%"" табличной части ""%ПредставлениеТабличнойЧасти%"": содержится набор-пакет. Наборов-пакетов здесь быть не должно!'");
					 
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
				
				ТекстПоля = ОбщегоНазначенияКлиентСервер.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "Номенклатура");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, ТекстПоля,, Отказ);

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверитьЧтоНетНаборов()

// Проверяет, что в табличной части нет комплектов.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак комплекта
//  Отказ             - флаг отказа в проведении.
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетКомплектов(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт
    Перем ПредставлениеТабличнойЧасти;

	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

			Если СтрокаТаблицы.Комплект = истина И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) И    //// СтрокаТаблицы.Комплект может иметь значение Неопределено в случае если не заполнена номенклатура
				ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура")   Тогда
                Если ПредставлениеТабличнойЧасти = неопределено Тогда
					ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
				КонецЕсли;	
				ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                """ табличной части """ + ПредставлениеТабличнойЧасти + """: содержится набор-комплект. " +
				        "Наборов-комплектов здесь быть не должно!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоНетКомплектов()

// Проверяет, что в размещение, указанное в табиличной части, не на складе НТТ.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоСкладНеНТТ(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок, ИмяВидаСкладаРазмещения = "ВидСкладаРазмещения") Экспорт
    Перем ПредставлениеТабличнойЧасти;

	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		Если СтрокаТаблицы[ИмяВидаСкладаРазмещения] = Перечисления.ВидыСкладов.НТТ Тогда
                Если ПредставлениеТабличнойЧасти = неопределено Тогда
					ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
				КонецЕсли;	

				ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		           """ табличной части """ + ПредставлениеТабличнойЧасти + """: содержится размещение по НТТ. " +
				   "Такого быть не должно!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоСкладНеНТТ()

//Проверяет, что склад указанный в шапке документа - оптовый
//Параметры:
//	СтруктураШапкиДокумента - структура шапки документа, подготовленная при проведении
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения
//  ИмяСклада				- имя ключа структуры, в котором хранится склад
//	ИмяВидаСклада			- имя ключа структуры, в котором хранится вид склада
Процедура ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок, ИмяСклада = "Склад", ИмяВидаСклада = "ВидСклада") Экспорт
	Перем ВидСклада;
	
	//Если склад не указан, не имеет смысла проверять вид склада
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента[ИмяСклада]) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяВидаСклада = "" Тогда
		ВидСклада = СтруктураШапкиДокумента[ИмяСклада].ВидСклада;
	Иначе
		ВидСклада = СтруктураШапкиДокумента[ИмяВидаСклада];
	КонецЕсли;
	
	Если ВидСклада <> Перечисления.ВидыСкладов.Оптовый Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе можно указывать только оптовый склад!", Отказ, Заголовок);
	КонецЕсли;
КонецПроцедуры

// Проверяет, что в табличной части нет номенклатуры, учет которой ведется по характеристикам.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак учет по характеристикам
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетНоменклатурыСХарактеристиками(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт
    Перем ПредставлениеТабличнойЧасти;

	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		Если СтрокаТаблицы.ВестиУчетПоХарактеристикам=истина И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда //СтрокаТаблицы.ВестиУчетПоХарактеристикам может принимать значение Неопределено если не заполнена номенклатура
                 Если ПредставлениеТабличнойЧасти = неопределено Тогда
					ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
				КонецЕсли;	
				ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                """ табличной части """ + ПредставлениеТабличнойЧасти + """: содержится номенклатура, по которой ведется учет по характеристикам. " +
				        "По возвратной таре не ведется учет по характеристикам!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоНетНоменклатурыСХарактеристиками()


// Корректирует структуру обязательных полей в зависимости от настроек пользователей.
//
// Параметры:
//  СтруктураОбязательныхПолей - корректируемая структура обязательных полей,
//  ВидСклада                  - вид склада (необязательный).
//
Процедура КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, ВидСклада = Неопределено) Экспорт
	

	РазрешитьНулевыеСуммыИЦены = Ложь;
	Если ВидСклада = Перечисления.ВидыСкладов.Оптовый
	 Или НЕ ЗначениеЗаполнено(ВидСклада) Тогда
		РазрешитьНулевыеСуммыИЦены = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВОпте();
	ИначеЕсли (ВидСклада = Перечисления.ВидыСкладов.Розничный) Или (ВидСклада = Перечисления.ВидыСкладов.НТТ) Тогда
		РазрешитьНулевыеСуммыИЦены = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();
	КонецЕсли;

	Если РазрешитьНулевыеСуммыИЦены Тогда
		Если СтруктураОбязательныхПолей.Свойство("Сумма") Тогда
			СтруктураОбязательныхПолей.Удалить("Сумма");
		КонецЕсли;
		Если СтруктураОбязательныхПолей.Свойство("Цена") Тогда
			СтруктураОбязательныхПолей.Удалить("Цена");
		КонецЕсли;
		Если СтруктураОбязательныхПолей.Свойство("ЦенаВРознице") Тогда
			СтруктураОбязательныхПолей.Удалить("ЦенаВРознице");
		КонецЕсли;
		Если СтруктураОбязательныхПолей.Свойство("ЦенаНоминальная") Тогда
			СтруктураОбязательныхПолей.Удалить("ЦенаНоминальная");
		КонецЕсли;
		Если СтруктураОбязательныхПолей.Свойство("СуммаНоминальная") Тогда
			СтруктураОбязательныхПолей.Удалить("СуммаНоминальная");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КорректировкаСтруктурыОбязательныхПолей()

// По переданной структуре полей формирует запрос по табличной части документа.
//
// Параметры: 
//  ДокументОбъект        - объект проводимого документа, 
//  ИмяТабличнойЧасти     - строка, имя табличной части,
//  СтруктураПолей        - структура, ключ структуры содержит псевдоним поля запроса, значение - строку запроса,
//  СтруктураСложныхПолей - структура, ключ структуры содержит псевдоним поля запроса, значение - строку запроса,
//                          необязательный параметр, служит для передачи конструкций типа "ВЫБОР" и т.д.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураПолей,
                                            СтруктураПростыхПолей = Неопределено, СтруктураСложныхПолей = Неопределено) Экспорт
 	Запрос = Новый Запрос;

	ТекстЗапроса = "";
	
	ДокументМетаданные = ДокументОбъект.Метаданные();

	Для Каждого Реквизит Из СтруктураПолей Цикл

		ТекстЗапроса  = ТекстЗапроса + ",
		|Док." + Реквизит.Значение + 
		" КАК " + СокрЛП(Реквизит.Ключ);

	КонецЦикла;
	
	ТекстСоединение="";
	
 	Если ТипЗнч(СтруктураПростыхПолей) = Тип("Структура") Тогда // Добавим к запросу конструкции.
 		НомерПараметра = 0;
 		Для Каждого Элемент Из СтруктураПростыхПолей Цикл
 			Если НЕ ЗначениеЗаполнено(Элемент.Ключ) Тогда
 				Продолжить;
 			КонецЕсли;
 			НомерПараметра = НомерПараметра + 1;

			ТекстЗапроса  = ТекстЗапроса + ",
 			| &ПараметрЗапроса" + НомерПараметра + " КАК " + СокрЛП(Элемент.Ключ);
 			Запрос.УстановитьПараметр("ПараметрЗапроса" + НомерПараметра, Элемент.Значение);

		КонецЦикла;

	КонецЕсли;

	Если ТипЗнч(СтруктураСложныхПолей) = Тип("Структура") Тогда // Добавим к запросу конструкции.
		
		Для Каждого Элемент Из СтруктураСложныхПолей Цикл
			
			ТекстЗапроса  = ТекстЗапроса + ",
			| " + Элемент.Значение + 
			" КАК " + СокрЛП(Элемент.Ключ);
			
		КонецЦикла;
		
		Если СтруктураСложныхПолей.Свойство("Проект") Тогда
			
			ТекстСоединение="
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(&ДатаДок, НоменклатураПроекта В (ВЫБРАТЬ Номенклатура ИЗ Документ." + ДокументМетаданные.Имя + "."+ СокрЛП(ИмяТабличнойЧасти) + " ГДЕ Ссылка = &ДокументСсылка)) КАК ПроектыНоменклатуры
			|ПО Док.Номенклатура=ПроектыНоменклатуры.НоменклатураПроекта";
			
			Запрос.УстановитьПараметр("ДатаДок",ДокументОбъект.Дата);
			
			
		КонецЕсли;
		
	КонецЕсли;
		
	Запрос.Текст = "ВЫБРАТЬ 
				| Док.НомерСтроки " + ТекстЗапроса + "
				| ИЗ 
				|      Документ." + ДокументМетаданные.Имя + "."+ СокрЛП(ИмяТабличнойЧасти) + 
				" КАК Док"+ТекстСоединение+" 
				|     ГДЕ Док.Ссылка = &ДокументСсылка
				| УПОРЯДОЧИТЬ ПО 
				| 		Док.НомерСтроки";


	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);
	
	Если ДокументОбъект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ Док.Ссылка = &ДокументСсылка", "ГДЕ ЛОЖЬ");
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоТабличнойЧасти()

// Возвращает таблицу остатков по сериям на заданом складе в заданной организации, для склада с видом НТТ.
Функция ПолучитьТаблицуОстатковПоСериямДляНТТ(СкладДоговор, МассивНоменклатуры,КонДата)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Новый",        Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("КонДата",      КонДата);

    Если ТипЗнч(СкладДоговор) = Тип("Массив") Тогда
		МассивСклады = СкладДоговор;
	Иначе
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(СкладДоговор);
	КонецЕсли;
	Запрос.УстановитьПараметр("Склад",              МассивСклады);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладахОстатки.Номенклатура                                     КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
	|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры                                КАК СерияНоменклатуры,
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры.СрокГодности                   КАК СрокГодности,
	|	ПРЕДСТАВЛЕНИЕ(ТоварыНаСкладахОстатки.СерияНоменклатуры)                 КАК СерияНоменклатурыПредставление,
	|	&Новый                                         							КАК Качество,
	|	ТоварыНаСкладахОстатки.Склад                                            КАК Склад,
	|	ТоварыНаСкладахОстатки.ЦенаВРознице									 	КАК Цена,
	|	Сумма(ТоварыНаСкладахОстатки.КоличествоОстаток)                         КАК Остаток, 
	|	0                                                                		КАК ОстатокКПередаче
	|ИЗ
	|	РегистрНакопления.ТоварыВНТТ.Остатки(&КонДата, Склад В (&Склад)
	|	   И Номенклатура В (&Номенклатура)) ТоварыНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры,
	|	ТоварыНаСкладахОстатки.Склад,
	|   ТоварыНаСкладахОстатки.ЦенаВРознице	
	|";
    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаПоСкладам = РезультатЗапроса.Выгрузить();
    ТаблицаПоСкладам.Сортировать("Номенклатура, ХарактеристикаНоменклатуры, СрокГодности,СерияНоменклатурыПредставление");

	Возврат ТаблицаПоСкладам;

КонецФункции

// Возвращает таблицу остатков по сериям на заданом складе в заданной организации.
// Используется при заполении по кнопке "Заполнить и провести" в документах, списывающих товары.
//
// Параметры:
//  Склад              - склад, на котором получаются остатки,
//  Организация        - организация, по которой получаются остатки
//  МассивНоменклатуры - массив, содержащий номенклатуру, по которой необходимо получить остатки
//
Функция ПолучитьТаблицуОстатковПоСериям(СкладДоговор, Организация, МассивНоменклатуры, Комиссионер = Неопределено, НТТ = Ложь, ТаблицаРезервовПоСериям=неопределено,КонДата=неопределено) Экспорт

	Если НТТ Тогда
		Возврат ПолучитьТаблицуОстатковПоСериямДляНТТ(СкладДоговор, МассивНоменклатуры,?(КонДата=неопределено,Дата("00010101000000"),КонДата));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Новый",        Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("КонДата",      ?(КонДата=неопределено,Дата("00010101000000"),КонДата));
	
	Если Комиссионер = Неопределено Тогда
		Если ТипЗнч(СкладДоговор) = Тип("Массив") Тогда
			МассивСклады = СкладДоговор;
		Иначе
			МассивСклады = Новый Массив;
			МассивСклады.Добавить(СкладДоговор);
		КонецЕсли;
		
		ИмяРегистра = "ТоварыНаСкладах";
		
		Запрос.УстановитьПараметр("Комиссионер",        Справочники.Контрагенты.ПустаяСсылка());
		Запрос.УстановитьПараметр("Склад",              МассивСклады);
	Иначе
		ИмяРегистра = "ТоварыПереданные";
		Запрос.УстановитьПараметр("Комиссионер",        Комиссионер);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", СкладДоговор);
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Справочники.Склады.ПустаяСсылка());
		Запрос.УстановитьПараметр("Склад",              МассивСклады);
	КонецЕсли;
	МожноПревышатьОстатокПоОрганизации=УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровОрганизации(Организация);
	КонтролироватьОстатокПоОрганизацииПоСкладу = ложь;
	СтруктураУП = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(ТекущаяДата(), Ложь);
	Если ЗначениеЗаполнено(СтруктураУП) Тогда
		КонтролироватьОстатокПоОрганизацииПоСкладу = СтруктураУП.ВестиУчетТоваровОрганизацийВРазрезеСкладов;
	КонецЕсли;
		
	ТекстЗапросаПоОрганизации = "
	|ВЫБРАТЬ 
	|   истина 						   								   КАК флОстатокОрганизации,
	|	ТоварыОрганизацийОстатки.Номенклатура                          КАК Номенклатура,
	|	ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры            КАК ХарактеристикаНоменклатуры,
	|	ТоварыОрганизацийОстатки.СерияНоменклатуры                     КАК СерияНоменклатуры,
	|	ТоварыОрганизацийОстатки.СерияНоменклатуры.СрокГодности        КАК СрокГодности,
	|	ПРЕДСТАВЛЕНИЕ(ТоварыОрганизацийОстатки.СерияНоменклатуры)      КАК СерияНоменклатурыПредставление,
	|	ТоварыОрганизацийОстатки.Качество                              КАК Качество,
	|	ТоварыОрганизацийОстатки.Склад                                 КАК Склад,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток                     КАК Остаток,
	|	ТоварыКПередачеОрганизацийОрганизацийОстатки.КоличествоОстаток КАК ОстатокКПередаче
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&КонДата,
	|"+ ?(МожноПревышатьОстатокПоОрганизации, "", "		    Организация                = &Организация
	|		  И") + " Номенклатура               В (&Номенклатура)
	|		  И Комиссионер                = &Комиссионер
	|	  	  "+?(КонтролироватьОстатокПоОрганизацииПоСкладу,"И Склад В (&Склад)","")+"
	|	) КАК ТоварыОрганизацийОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПередачеОрганизаций.Остатки(&КонДата,
	|"+ ?(МожноПревышатьОстатокПоОрганизации,"","		    Организация                = &Организация
	|		  И") + " Номенклатура               В (&Номенклатура)
	|	  	  "+?(КонтролироватьОстатокПоОрганизацииПоСкладу,"И Склад В (&Склад)","")+"
	|	) КАК ТоварыКПередачеОрганизацийОрганизацийОстатки
	|ПО
	|	ТоварыОрганизацийОстатки.Номенклатура                 = ТоварыКПередачеОрганизацийОрганизацийОстатки.Номенклатура
	|	И ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры = ТоварыКПередачеОрганизацийОрганизацийОстатки.ХарактеристикаНоменклатуры
	|	И ТоварыОрганизацийОстатки.СерияНоменклатуры          = ТоварыКПередачеОрганизацийОрганизацийОстатки.СерияНоменклатуры
	|	И ТоварыОрганизацийОстатки.Организация = ТоварыКПередачеОрганизацийОрганизацийОстатки.Организация
	|	И ТоварыОрганизацийОстатки.Качество                   = ТоварыКПередачеОрганизацийОрганизацийОстатки.Качество
	|	И ТоварыОрганизацийОстатки.Склад                      = ТоварыКПередачеОрганизацийОрганизацийОстатки.Склад";

	Если Комиссионер = Неопределено Тогда
		Если ИмяРегистра = "ТоварыНаСкладах" Тогда
			ТекстЗапросаСклады = "
			|(ВЫБРАТЬ
			|	ТоварыНаСкладахОстатки.Номенклатура,
			|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
			|	ТоварыНаСкладахОстатки.СерияНоменклатуры,
			|	ТоварыНаСкладахОстатки.Качество,
			|	ТоварыНаСкладахОстатки.Склад,
			|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТоварыНаСкладах.Номенклатура,
			|		ТоварыНаСкладах.ХарактеристикаНоменклатуры,
			|		ТоварыНаСкладах.СерияНоменклатуры,
			|		ТоварыНаСкладах.Качество,
			|		ТоварыНаСкладах.Склад,
			|		ТоварыНаСкладах.КоличествоОстаток
			|	ИЗ
			|		РегистрНакопления.ТоварыНаСкладах.Остатки(&КонДата, Склад В (&Склад)
			|		   И Номенклатура В (&Номенклатура)) ТоварыНаСкладах
			|	ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|		ТоварыВРознице.Номенклатура,
			|		ТоварыВРознице.ХарактеристикаНоменклатуры,
			|		ТоварыВРознице.СерияНоменклатуры,
			|		ТоварыВРознице.Качество,
			|		ТоварыВРознице.Склад,
			|		ТоварыВРознице.КоличествоОстаток
			|	ИЗ
			|		РегистрНакопления.ТоварыВРознице.Остатки(&КонДата, Склад В (&Склад)
			|		   И Номенклатура В (&Номенклатура)) ТоварыВРознице
			|	) КАК ТоварыНаСкладахОстатки
			|	СГРУППИРОВАТЬ ПО
			|		ТоварыНаСкладахОстатки.Номенклатура,
			|		ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
			|		ТоварыНаСкладахОстатки.СерияНоменклатуры,
			|		ТоварыНаСкладахОстатки.Качество,
			|		ТоварыНаСкладахОстатки.Склад
			|) ТоварыНаСкладахОстатки
			|";
		Иначе
			ТекстЗапросаСклады = "
			|	РегистрНакопления.ТоварыПереданные.Остатки(&КонДата, Номенклатура В (&Номенклатура)) КАК ТоварыНаСкладахОстатки
			|";
		КонецЕсли;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.флОстатокОрганизации 							 КАК флОстатокОрганизации,
		|	ВложенныйЗапрос.Номенклатура                                     КАК Номенклатура,
		|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.СерияНоменклатуры                                КАК СерияНоменклатуры,
		|	ВложенныйЗапрос.СерияНоменклатуры.СрокГодности                   КАК СрокГодности,
		|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.СерияНоменклатуры)	  			 КАК СерияНоменклатурыПредставление,
		|	ВложенныйЗапрос.Качество                                         КАК Качество,
		|	ВложенныйЗапрос.Склад                                            КАК Склад,
		|	МИНИМУМ(ВложенныйЗапрос.Остаток)                                 КАК Остаток," 
		+ ?(ИмяРегистра = "ТоварыНаСкладах", "
		|	МИНИМУМ(ВложенныйЗапрос.ОстатокКПередаче)                        КАК ОстатокКПередаче", "
		|	0                                                                КАК ОстатокКПередаче") + "
		|ИЗ
		|	(ВЫБРАТЬ
		|	ложь 												  КАК флОстатокОрганизации,
		|	ТоварыНаСкладахОстатки.Номенклатура                   КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры     КАК ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладахОстатки.СерияНоменклатуры              КАК СерияНоменклатуры,
		|	ТоварыНаСкладахОстатки.СерияНоменклатуры.СрокГодности КАК СрокГодности,
		|	ПРЕДСТАВЛЕНИЕ(ТоварыНаСкладахОстатки.СерияНоменклатуры) КАК СерияНоменклатурыПредставление,
		|	"+ ?(ИмяРегистра = "ТоварыНаСкладах", "ТоварыНаСкладахОстатки.Качество", "&Новый") + " КАК Качество,
		|	"+ ?(ИмяРегистра <> "ТоварыПереданные", "ТоварыНаСкладахОстатки.Склад",     "NULL")  + " КАК Склад,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток              КАК Остаток,"
		+ ?(ИмяРегистра = "ТоварыНаСкладах", "
		|	ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток     КАК ОстатокКПередаче", "
		|	0                                                     КАК ОстатокКПередаче") + "
		|ИЗ
		|" + ТекстЗапросаСклады + ?(ИмяРегистра = "ТоварыНаСкладах","
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&КонДата,
		|		Склад В (&Склад)
		|	  И Номенклатура               В (&Номенклатура)
		|	) КАК ТоварыКПередачеСоСкладовОстатки
		|ПО
		|	ТоварыНаСкладахОстатки.Номенклатура               = ТоварыКПередачеСоСкладовОстатки.Номенклатура
		|	И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
		|	И ТоварыНаСкладахОстатки.СерияНоменклатуры          = ТоварыКПередачеСоСкладовОстатки.СерияНоменклатуры
		|	И ТоварыНаСкладахОстатки.Качество                   = ТоварыКПередачеСоСкладовОстатки.Качество
		|", "
		|") + "
		|ОБЪЕДИНИТЬ ВСЕ
		|"
		+ ТекстЗапросаПоОрганизации + ") КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.флОстатокОрганизации,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.СерияНоменклатуры,
		|	ВложенныйЗапрос.Качество,
		|	ВложенныйЗапрос.Склад
		|";

	Иначе
		
		Запрос.Текст = СтрЗаменить(ТекстЗапросаПоОрганизации,"ВЫБРАТЬ","ВЫБРАТЬ РАЗРЕШЕННЫЕ");
		
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	// Таблица остатков по организации
	ТаблицаПоОрганизации = РезультатЗапроса.Выгрузить();
	
	Если Комиссионер = Неопределено Тогда
		Сч = 0;
		Пока Сч < ТаблицаПоОрганизации.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоОрганизации.Получить(Сч);
			Если не СтрокаТаблицы.флОстатокОрганизации Тогда
				ТаблицаПоОрганизации.Удалить(СтрокаТаблицы);
			Иначе
				Если ЗначениеЗаполнено(СтрокаТаблицы.ОстатокКПередаче) Тогда
					СтрокаТаблицы.Остаток = Макс(СтрокаТаблицы.Остаток - СтрокаТаблицы.ОстатокКПередаче,0);
				КонецЕсли;
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;

		// Таблица остатков на складах
		ТаблицаПоСкладам = РезультатЗапроса.Выгрузить();
		Сч = 0;
		Пока Сч < ТаблицаПоСкладам.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоСкладам.Получить(Сч);
			Если СтрокаТаблицы.флОстатокОрганизации Тогда
				ТаблицаПоСкладам.Удалить(СтрокаТаблицы);
			Иначе
				Если ЗначениеЗаполнено(СтрокаТаблицы.ОстатокКПередаче) Тогда
					СтрокаТаблицы.Остаток = СтрокаТаблицы.Остаток - СтрокаТаблицы.ОстатокКПередаче;
				КонецЕсли;
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;

		// Корректировка остатков склада
		Если не МожноПревышатьОстатокПоОрганизации Тогда
			Для Каждого СтрокаОрганизации ИЗ ТаблицаПоОрганизации Цикл

				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура",               СтрокаОрганизации.Номенклатура);
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаОрганизации.ХарактеристикаНоменклатуры);
				СтруктураПоиска.Вставить("СерияНоменклатуры",          СтрокаОрганизации.СерияНоменклатуры);
				СтруктураПоиска.Вставить("Качество",                   СтрокаОрганизации.Качество);
				Если КонтролироватьОстатокПоОрганизацииПоСкладу и ЗначениеЗаполнено(СтрокаОрганизации.Склад) Тогда
					СтруктураПоиска.Вставить("Склад",                   СтрокаОрганизации.Склад);
				КонецЕсли;
				
				СтрокиПоСкладам      = ТаблицаПоСкладам.НайтиСтроки(СтруктураПоиска);
				ОстатокПоОрганизации = ?(НЕ ЗначениеЗаполнено(СтрокаОрганизации.Остаток), 0, СтрокаОрганизации.Остаток);

				Для Каждого СтрокаСклада Из СтрокиПоСкладам Цикл

					ОстатокПоСкладу      = ?(НЕ ЗначениеЗаполнено(СтрокаСклада.Остаток), 0, СтрокаСклада.Остаток);
					МинимальныйОстаток   = Мин(ОстатокПоСкладу, ОстатокПоОрганизации);
					МинимальныйОстаток   = ?(МинимальныйОстаток < 0, 0, МинимальныйОстаток);
					ОстатокПоОрганизации = ОстатокПоОрганизации - МинимальныйОстаток;
					СтрокаСклада.Остаток = МинимальныйОстаток;

				КонецЦикла;
			КонецЦикла;
			//удаление строк из остатков по складам, для которых вообще нет остатков по организации
			Для каждого СтрокаСклада из ТаблицаПоСкладам цикл
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура",               СтрокаСклада.Номенклатура);
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаСклада.ХарактеристикаНоменклатуры);
				СтруктураПоиска.Вставить("СерияНоменклатуры",          СтрокаСклада.СерияНоменклатуры);
				СтруктураПоиска.Вставить("Качество",                   СтрокаСклада.Качество);
				Если КонтролироватьОстатокПоОрганизацииПоСкладу Тогда
					СтруктураПоиска.Вставить("Склад",                   СтрокаСклада.Склад);
				КонецЕсли;
				
	            СтрокиПоОрганизации      = ТаблицаПоОрганизации.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоОрганизации.Количество()=0 Тогда
					СтрокаСклада.Остаток = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаПоСкладам.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, СрокГодности, СерияНоменклатурыПредставление, Качество, Склад", "Остаток");
		
		Если глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании") Тогда
			//для учета серий товара, зарезервированных под конкретный заказ покупателя, необходимо следующее:
			//1) В любом случае - из доступного остатка по серии на складе исключить резерв по серии под заказ покупателя
			//2) Если списание происходит из резерва по заказу покупателя - подобрать серии, которые зарезервированы под заказ покупателя 
			//		(заполнить предназначенную для этого таблицу ТаблицаРезервовПоСериям)
			ЗапросРезервы = новый Запрос;
			ЗапросРезервы.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|Номенклатура,
			|ХарактеристикаНоменклатуры,
			|СерияНоменклатуры,
			|СерияНоменклатуры.СрокГодности  КАК СрокГодности,
			|ПРЕДСТАВЛЕНИЕ(СерияНоменклатуры) КАК СерияНоменклатурыПредставление,
			|Склад,
			|&Новый КАК Качество,
			|ДокументРезерва,
			|КоличествоОстаток КАК Остаток
			|ИЗ
			|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&КонДата,Склад В (&Склад)
			|	  И Номенклатура  В (&Номенклатура)
			|	  И ВЫРАЗИТЬ(ДокументРезерва КАК ДОкумент.ЗаказПокупателя).ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей = истина
			|							 ) КАК РезервыПоСерии
			|ГДЕ КоличествоОстаток>0";
			ЗапросРезервы.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
			ЗапросРезервы.УстановитьПараметр("Новый",        Справочники.Качество.Новый);
            ЗапросРезервы.УстановитьПараметр("Склад",        МассивСклады);
			ЗапросРезервы.УстановитьПараметр("КонДата",      ?(КонДата=неопределено,Дата("00010101000000"),КонДата));

			РезультатЗапроса = ЗапросРезервы.Выполнить();
			
			//этап1 - уменьшение свободного остатка по серии на количество серии в резерве под заказ
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() цикл
				//уменьшение остатка на количество резерва
				нстр = ТаблицаПоСкладам.Добавить();
				ЗаполнитьЗначенияСвойств(нстр, Выборка);
				нстр.Остаток = (-1)*Выборка.Остаток;
			КонецЦикла;
			ТаблицаПоСкладам.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, СрокГодности, СерияНоменклатурыПредставление, Качество, Склад", "Остаток");
            //удалим строки с пустым остатком
			КоличествоСтрок = ТаблицаПоСкладам.Количество();
			
			Для а=1 по КоличествоСтрок цикл
				Если ТаблицаПоСкладам[КоличествоСтрок-а].Остаток<=0 Тогда
					ТаблицаПоСкладам.Удалить(КоличествоСтрок-а);
				КонецЕсли;
			КонецЦикла;
			
			//этап2 - при необходимости готовим таблицу с данными по зарезервированным сериям номенклатуры
			Если ТаблицаРезервовПоСериям<>неопределено Тогда
				ТаблицаРезервовПоСериям =  РезультатЗапроса.Выгрузить();
			КонецЕсли;
			
		КонецЕсли;

		ТаблицаСерий = ТаблицаПоСкладам.Скопировать();
		
	Иначе
		ТаблицаПоОрганизации.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, СрокГодности, СерияНоменклатурыПредставление, Качество", "Остаток");
		ТаблицаСерий = ТаблицаПоОрганизации.Скопировать();
	КонецЕсли;
	
	ТаблицаСерий.Сортировать("Номенклатура, ХарактеристикаНоменклатуры, СрокГодности, СерияНоменклатурыПредставление");

	Возврат ТаблицаСерий;

КонецФункции // ПолучитьТаблицуОстатковПоСериям()

// Возвращает таблицу остатков по сериям на заданом складе в заданной организации.
// Используется при заполении по кнопке "Заполнить и провести" в документах, списывающих товары.
//
// Параметры:
//  МассивСклады       - массив, склады, на котором получаются остатки.
//  Организация        - организация, по которой получаются остатки.
//  МассивНоменклатуры - массив, содержащий номенклатуру, по которой необходимо получить остатки.
//
Функция ПолучитьТаблицуСвободныхОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры) Экспорт

	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры,
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры.СрокГодности КАК СрокГодности,
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры.Представление КАК СерияНоменклатурыПредставление,
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток, 0) КАК Остаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|		,
	|		Номенклатура В (&Номенклатура)
	|			И Склад В (&Склад)
	|			И Качество = &НовоеКачество) КАК ТоварыНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	|		,
	|		Номенклатура В (&Номенклатура)
	|		    И Склад В (&Склад)) КАК ТоварыВРезервеНаСкладахОстатки
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	|			И ТоварыНаСкладахОстатки.СерияНоменклатуры = ТоварыВРезервеНаСкладахОстатки.СерияНоменклатуры
	|			И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
	|			И ТоварыНаСкладахОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(
	|		,
	|		Номенклатура В (&Номенклатура)
	|			И Склад В (&Склад)
	|			И Качество = &НовоеКачество) КАК ТоварыКПередачеСоСкладовОстатки
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыКПередачеСоСкладовОстатки.Номенклатура
	|			И ТоварыНаСкладахОстатки.СерияНоменклатуры = ТоварыКПередачеСоСкладовОстатки.СерияНоменклатуры
	|			И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
	|			И ТоварыНаСкладахОстатки.Склад = ТоварыКПередачеСоСкладовОстатки.Склад
	|УПОРЯДОЧИТЬ ПО ТоварыНаСкладахОстатки.Номенклатура,СрокГодности,СерияНоменклатурыПредставление";
	
	Запрос.УстановитьПараметр("Склад", МассивСклады);
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	Запрос.УстановитьПараметр("НовоеКачество", Справочники.Качество.Новый);
	
	Возврат(Запрос.Выполнить().Выгрузить());	

КонецФункции // ПолучитьТаблицуСвободныхОстатковПоСериям()

// Если установлено использование расширенной аналитики выводит сообщение о том, что не рекомендуется пользоваться отчетом
//
// Параметры:
//  ИмяОтчета       - строка, содержит имя отчета из которого вызывается процедура.
//
Процедура СообщитьОВозможностиИспользованияОтчетаПоРегиструПартий(ИмяОтчета) Экспорт
	Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") Тогда
		ДатаНачалаИспользованияРасширеннойАналитики = Формат(глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат"),"ДЛФ=DD");
		ОбщегоНазначения.Сообщение("Использование отчета """ + ИмяОтчета + """ не поддерживается, 
		|т.к. в настройках учета установлено использование расширенной аналитики учета затрат начиная с  " + ДатаНачалаИспользованияРасширеннойАналитики + ".
		|Не рекомендуется формировать отчет за период позже " + ДатаНачалаИспользованияРасширеннойАналитики);
	КонецЕсли;	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РЕЗЕРВИРОВАНИЯ

Процедура СообщитьОНедостаткеТовара(Требуется, Свободно = 0, ВРезерве = 0, КПередаче = 0, КПолучению = 0, Отказ, Заголовок="", Склад = "", ЗаказПоставщику = "", Номенклатура = "", Характеристика = "", Серия = "", Качество = "", ЕИ = "", СтрокаСообщения = "") Экспорт

	Если СтрокаСообщения = "" Тогда
		Если ВРезерве > 0 ИЛИ КПередаче > 0 Тогда
			СтрокаСообщения = "Свободного остатка ";
		Иначе
			СтрокаСообщения = "Остатка ";
		КонецЕсли;
	КонецЕсли;

	СтрокаСообщения = СтрокаСообщения + Номенклатура + Характеристика + Серия;
	СтрокаСообщения = СтрокаСообщения + ?(Качество = "", "", " с качеством " + Качество);
	Если ЗаказПоставщику <> "" И Склад <> "" Тогда
		СтрокаСообщения = СтрокаСообщения + " в заказах поставщикам на склад " + Склад + " недостаточно для размещения.";
	ИначеЕсли ЗаказПоставщику <> "" Тогда
		СтрокаСообщения = СтрокаСообщения + " заказанного по документу " + ЗаказПоставщику + " недостаточно для размещения.";
	ИначеЕсли Склад <> "" Тогда
		СтрокаСообщения = СтрокаСообщения + " на складе " + Склад + " недостаточно.";
	КонецЕсли;

	ОшибкаНетОстатка(СтрокаСообщения, Свободно , Требуется, ЕИ, Отказ, Заголовок);

	Если КПередаче > 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("К передаче " + КПередаче + " " + ЕИ, , Заголовок, СтатусСообщения.Информация);
	КонецЕсли;
	Если ВРезерве > 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Зарезервировано " + ВРезерве + " " + ЕИ, , Заголовок, СтатусСообщения.Информация);
	КонецЕсли;
	Если КПолучению > 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("К получению "+ КПолучению + " "+ ЕИ, , Заголовок, СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНедостаткеТовара()

////////////////////////////////////////////////////////////////////////////////
// Процедура формирует массив типов цен по помеченным элементам списка значений
процедура СформироватьМассивБазовыхТиповЦен(СписокТиповЦен, МассивТиповЦен, МассивРассчитываемыхЦен, ВсеТипыЦен = Ложь)
	
	МассивТиповЦен.Очистить();
	МассивРассчитываемыхЦен.Очистить();
	Для Каждого Элемент Из СписокТиповЦен Цикл
		Если Элемент.Пометка ИЛИ ВсеТипыЦен Тогда
			
			ТипБазЭлемента = Элемент.Ссылка;
			// может уже этот тип есть в массиве
			ИндексЭлемента = ОбщегоНазначения.ВернутьИндексВМассиве(МассивТиповЦен, ТипБазЭлемента);
			
			Если (ИндексЭлемента = -1) Тогда
				МассивТиповЦен.Добавить(ТипБазЭлемента);
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция по типы цены СправочникСсылка.ТипыЦенНоменклатуры определяет префикс имени колонки
Функция ОпределитьПрефиксИмениКолонки(ТаблицаПоиска, ТипЦены)
	
	Если (ТаблицаПоиска = Неопределено) Тогда
		Возврат "";
	Иначе
		Элемент = ТаблицаПоиска.Найти(ТипЦены, "Ссылка");
		Возврат Элемент.Префикс;
	КонецЕсли;	
	
КонецФункции

// Процедура создает в дереве необходимые для работы колонки сумм 
//с определенным префиксов в наименовании
Процедура СоздатьКолонкиСуммДерево(Дерево, Префикс)
	
	Дерево.Колонки.Добавить(Префикс + "Цена"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Дерево.Колонки.Добавить(Префикс + "ВалютаЦены"      , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Дерево.Колонки.Добавить(Префикс + "ЦенаНоменклатуры", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Дерево.Колонки.Добавить(Префикс + "КурсВалюты"      , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,4)));
	Дерево.Колонки.Добавить(Префикс + "КратностьВалюты" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	Дерево.Колонки.Добавить(Префикс + "ЕдиницаЦены"     , Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	Дерево.Колонки.Добавить(Префикс + "ФлагЦены"        , Новый ОписаниеТипов("Булево"));

КонецПроцедуры
 
// Функция по параметру ТаблицаПоиска создает дерево и в нем нужные колонки
Функция СоздатьКолонкиДереваОстатков(ТаблицаПоиска = Неопределено, ВсеТипыЦен = Ложь) Экспорт
	
	ДеревоОстатков = Новый ДеревоЗначений;
	
	МассивБазовыхТиповЦен = Новый Массив;
	МассивРассчитываемыхЦен = Новый Массив;
	СформироватьМассивБазовыхТиповЦен(ТаблицаПоиска, МассивБазовыхТиповЦен, МассивРассчитываемыхЦен, ВсеТипыЦен);

	ДеревоОстатков.Колонки.Добавить("ХарактеристикаСклад", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры,СправочникСсылка.Склады"));
	ДеревоОстатков.Колонки.Добавить("МестоХранения"      , Новый ОписаниеТипов("Строка"));
	ДеревоОстатков.Колонки.Добавить("Общий"              , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ДеревоОстатков.Колонки.Добавить("Свободный"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ДеревоОстатков.Колонки.Добавить("СвободныйОжидаемый" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ДеревоОстатков.Колонки.Добавить("ВРезерве"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	// Тут колонки добавляются в том порядке в котором они идут в списке типов цен
	Если МассивБазовыхТиповЦен.Количество() > 0 Тогда
		
		// колонки для Каждого типа цены
		Для Каждого Элемент Из МассивБазовыхТиповЦен Цикл
			ПрефиксИмени = ОпределитьПрефиксИмениКолонки(ТаблицаПоиска, Элемент);
			СоздатьКолонкиСуммДерево(ДеревоОстатков, ПрефиксИмени);
		КонецЦикла;
		
		Для Каждого Элемент Из МассивРассчитываемыхЦен Цикл
			ПрефиксИмени = ОпределитьПрефиксИмениКолонки(ТаблицаПоиска, Элемент);
			СоздатьКолонкиСуммДерево(ДеревоОстатков, ПрефиксИмени);
		КонецЦикла;

	КонецЕсли; 
	
	Возврат ДеревоОстатков;
	
КонецФункции

// Процедура перекачивает поля сумм выборки в нужные колонки
Процедура ЗаполнитьПоляСумм(СтрокаДерева, Выборка, СписокЦенОстатков, КурсыВалют)

	// если цены не заданы - то ничего не делаем
	Если НЕ ЗначениеЗаполнено(Выборка.ТипЦен) Тогда
		Возврат
	КонецЕсли;

	// в зависимости от типа цен помещаем данные в нужные колонки
	ПрефиксКолонки = ОпределитьПрефиксИмениКолонки(СписокЦенОстатков, Выборка.ТипЦен);

	Если ЗначениеЗаполнено(ПрефиксКолонки) Тогда

		ПолученнаяЦена = 0;
		ПолученнаяЦена = Ценообразование.ОкруглитьЦену(Выборка.Цена, Выборка.ТипЦен.ПорядокОкругления, Выборка.ТипЦен.ОкруглятьВБольшуюСторону);

		СтрокаДерева[ПрефиксКолонки + "ВалютаЦены"]          = Выборка.Валюта;
		СтрокаДерева[ПрефиксКолонки + "ЦенаНоменклатуры"]    = ПолученнаяЦена;

		СтруктураВалюты = ВернутьСтруктуруКурсВалюты(КурсыВалют, Выборка.Валюта);
		Если СтруктураВалюты <> Неопределено Тогда
			СтрокаДерева[ПрефиксКолонки + "КурсВалюты"]          = СтруктураВалюты.Курс;
			СтрокаДерева[ПрефиксКолонки + "КратностьВалюты"]     = СтруктураВалюты.Кратность;
		КонецЕсли;

		СтрокаДерева[ПрефиксКолонки + "ЕдиницаЦены"]         = Выборка.ЕдиницаЦены;
		СтрокаДерева[ПрефиксКолонки + "ФлагЦены"]            = Выборка.ФлагЦены;
		
	КонецЕсли;

КонецПроцедуры

// Процедура перекачивает поля остатков выборки в нужные колонки
Процедура ЗаполнитьПоляОстатков(СтрокаДерева, Выборка)
	
	СтрокаДерева.Общий               = Выборка.КоличествоОстаток;
	СтрокаДерева.Свободный           = Выборка.КоличествоСвободныйОстаток;
	СтрокаДерева.СвободныйОжидаемый  = ?(Выборка.КоличествоСвободныйОстатокВЗаказахПоставщикам > 0,Выборка.КоличествоСвободныйОстатокВЗаказахПоставщикам,СтрокаДерева.СвободныйОжидаемый);
	СтрокаДерева.ВРезерве            = Выборка.КоличествоВРезерве;
	
КонецПроцедуры

// Процедура инициализирует поля остатков - нули им присваивает
Процедура ИнициализироватьПоляОстатков(СтрокаДерева)
	
	СтрокаДерева.Общий               = 0;
	СтрокаДерева.Свободный           = 0;
	СтрокаДерева.ВРезерве            = 0;
	
КонецПроцедуры

// Процедура добавляет текущие остатки выборки к тем, которые имеются
Процедура ДополнитьПоляОстатков(СтрокаДерева, Выборка)
	
	СтрокаДерева.Общий               = СтрокаДерева.Общий + Выборка.КоличествоОстаток;
	СтрокаДерева.Свободный           = СтрокаДерева.Свободный + Выборка.КоличествоСвободныйОстаток;
	СтрокаДерева.СвободныйОжидаемый  = СтрокаДерева.СвободныйОжидаемый + Выборка.КоличествоСвободныйОстатокВЗаказахПоставщикам;
	СтрокаДерева.ВРезерве            = СтрокаДерева.ВРезерве + Выборка.КоличествоВРезерве;
	
КонецПроцедуры

// Процедура заполняет строку характеристики товара по выборе
Процедура ЗаполнитьХарактеристикуТовара(СтрокаДерева, Выборка)
	
	СтрокаДерева.ХарактеристикаСклад = Выборка.ХарактеристикаНоменклатуры;
	СтрокаДерева.СвободныйОжидаемый = Выборка.КоличествоСвободныйОстатокВЗаказахПоставщикам;
	ИнициализироватьПоляОстатков(СтрокаДерева);
	
КонецПроцедуры


//Функция для Элемента формирует префикс
Функция СформироватьПрефиксДляЭлемента(Элемент)
	
	ПрефиксИмени = "А" + Элемент.УникальныйИдентификатор(); 
	ЗначениеПрефикса = СтрЗаменить(ПрефиксИмени, "-", "_");

	Возврат ЗначениеПрефикса;
	
КонецФункции

// Функция формирует таблицу списока типов цен и дополнительной информации и них
функция ЗаполнитьСписокТиповЦенДляПолученияОстатков() Экспорт
	
	СписокЦенОстатков = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ТипыЦенНоменклатуры.Ссылка,
	 |	ТипыЦенНоменклатуры.Наименование,
	 |  Выразить(" + """1""" + " КАК Строка(100))	Префикс,
	 |	ТипыЦенНоменклатуры.БазовыйТипЦен,
	 |	ТипыЦенНоменклатуры.Рассчитывается,
	 |	ТипыЦенНоменклатуры.ПроцентСкидкиНаценки,
	 |	ТипыЦенНоменклатуры.ОкруглятьВБольшуюСторону,
	 |	ТипыЦенНоменклатуры.ПорядокОкругления,
	 |	Ложь Пометка
	 |ИЗ
	 |	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	 |";
	 
	СписокЦенОстатков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Элемент Из СписокЦенОстатков Цикл 
		Элемент.Префикс = СформироватьПрефиксДляЭлемента(Элемент.Ссылка);
	КонецЦикла;
	
	Возврат СписокЦенОстатков;
	
КонецФункции

// Функция возвращает структуру курса валюты
Функция ВернутьСтруктуруКурсВалюты(ДанныеКурсов, Валюта) Экспорт
	
	СтруктураКурса = ДанныеКурсов[Валюта];
	
	Если СтруктураКурса = Неопределено Тогда
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ТекущаяДата());
        ДанныеКурсов.Вставить(Валюта, СтруктураКурса);
	КонецЕсли;
	
	Возврат  СтруктураКурса;
	
КонецФункции

// Процедура формирует дерево остатков номенклатуры на складах в разрезе характеристик номенклатуры
//
// Параметры
//  Номенклатура     - СправочникСсылка.Номенклатура, номенклатурная позиция, для которой необходимо рассчитать остатки
//  ОтображатьСклады - Булево, признак расчета остатков по складам
//  СписокЦенОстатков - таблица для расчета сложных типов цен
//
// Возвращаемое значение:
//   ДеревоЗначений, структура дерева описана в процедуре
//   для Каждого типа цен будет создана своя колонка куда и будет помещена соответсвующая сумма
//
Процедура ПолучитьДеревоОстатковНоменклатуры(ДеревоОстатков, Номенклатура, ОтображатьСклады, 
											СписокЦенОстатков = Неопределено, ВсеТипыЦен = Ложь, 
											КурсыВалют, СписокСкладов = Неопределено) Экспорт
	ДеревоОстатков.Строки.Очистить();
		
	ТипыЦен = Новый Массив;
	МассивРассчитываемыхЦен = Новый Массив;
	СформироватьМассивБазовыхТиповЦен(СписокЦенОстатков, ТипыЦен, МассивРассчитываемыхЦен, ВсеТипыЦен);

	ПолучатьЦены = (ТипыЦен.Количество() > 0);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Номенклатура"        , Номенклатура);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСклад"         , Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТипыЦен"             , ТипыЦен);
	Если ЗначениеЗаполнено(СписокСкладов) Тогда
		Запрос.УстановитьПараметр("Склады"       	, СписокСкладов);	
	КонецЕсли;
	
	ОграничениеПоСкладу = ?(НЕ ЗначениеЗаполнено(СписокСкладов), "", " И Склад В (&Склады) " );
	
	ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		ХарактеристикиНоменклатуры.Ссылка 				 		  КАК ХарактеристикаНоменклатуры
		|		" + ?(ОтображатьСклады,", ВложенныйЗапрос.Склад КАК Склад, АдресныйСклад.МестоХранения КАК МестоХранения","") + "
		|		, ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстаток, 0) 		  КАК КоличествоОстаток
		|		, ЕСТЬNULL(ВложенныйЗапрос.КоличествоСвободныйОстаток, 0) КАК КоличествоСвободныйОстаток
		|		, ЕСТЬNULL(ВложенныйЗапрос.КоличествоВРезерве, 0) 		  КАК КоличествоВРезерве
		|		, 0 													  КАК КоличествоСвободныйОстатокВЗаказахПоставщикам
		|";
		
	Если ПолучатьЦены Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	,
			|	Цены.ФлагУсловийПоставки  КАК ФлагЦены,
			|	ЕСТЬNULL(Цены.Цена, 0.00) КАК Цена,
			|	Цены.Валюта               КАК Валюта,
			|	Цены.ЕдиницаИзмерения     КАК ЕдиницаЦены,
			|	1                         КАК КурсВалюты,
			|	1                         КАК КратностьВалюты,
			|	Цены.ТипЦен               КАК ТИПЦЕН
			|";
		КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
		|	ИЗ
		|	(
		|		ВЫБРАТЬ
		|			ХарактеристикиНоменклатуры.Ссылка   КАК Ссылка,
		|			ХарактеристикиНоменклатуры.Владелец КАК Владелец
		|		ИЗ
		|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ГДЕ
		|			ХарактеристикиНоменклатуры.Владелец = &Номенклатура
		|
		|		ОБЪЕДИНИТЬ
		|
		|		ВЫБРАТЬ
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|			&Номенклатура КАК Владелец
		|
		|		) КАК ХарактеристикиНоменклатуры
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		ВложенныйЗапрос.ХарактеристикаНоменклатуры                     КАК ХарактеристикаНоменклатуры
		|		" + ?(ОтображатьСклады,", ВложенныйЗапрос.Склад ","") + "
		|		, СУММА(ВложенныйЗапрос.ТоварыНаСкладахОстатки 
		|				+ ВложенныйЗапрос.ТоварыВРозницеОстатки 
		|				+ ВложенныйЗапрос.ТоварыВНТТОстатки)                   КАК КоличествоОстаток
		|		, СУММА(ВложенныйЗапрос.ТоварыНаСкладахОстатки
		|				+ ВложенныйЗапрос.ТоварыВРозницеОстатки
		|				+ ВложенныйЗапрос.ТоварыВНТТОстатки
		|				- ВложенныйЗапрос.ТоварыВРезервеСкладахОстатки
		|				- ВложенныйЗапрос.ТоварыКПередачеСоСкладовОстатки)     КАК КоличествоСвободныйОстаток
		|		, СУММА(ВложенныйЗапрос.ТоварыВРезервеСкладахОстатки)          КАК КоличествоВРезерве
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры          КАК ХарактеристикаНоменклатуры
		|			, ТоварыНаСкладахОстатки.Склад                             КАК Склад
		|			, ТоварыНаСкладахОстатки.КоличествоОстаток                 КАК ТоварыНаСкладахОстатки
		|			, 0                                                        КАК ТоварыВРозницеОстатки
		|			, 0                                                        КАК ТоварыВНТТОстатки
		|			, 0                                                        КАК ТоварыВРезервеСкладахОстатки
		|			, 0                                                        КАК ТоварыКПередачеСоСкладовОстатки
		|		ИЗ
		|			РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура = &Номенклатура" + ОграничениеПоСкладу + ") КАК ТоварыНаСкладахОстатки
					
		|		ОБЪЕДИНИТЬ ВСЕ
				
		|		ВЫБРАТЬ
		|			ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры           КАК ХарактеристикаНомнклатуры
		|			, ТоварыВРозницеОстатки.Склад                              КАК Склад
		|			, 0                                                        КАК ТоварыНаСкладахОстатки
		|			, ТоварыВРозницеОстатки.КоличествоОстаток                  КАК ТоварыВРозницеОстатки
		|			, 0                                                        КАК ТоварыВНТТОстатки
		|			, 0                                                        КАК ТоварыВРезервеСкладахОстатки
		|			, 0                                                        КАК ТоварыКПередачеСоСкладовОстатки
		|		ИЗ
		|			РегистрНакопления.ТоварыВРознице.Остатки(, Номенклатура = &Номенклатура" + ОграничениеПоСкладу + ") КАК ТоварыВРозницеОстатки
					
		|		ОБЪЕДИНИТЬ ВСЕ
				
		|		ВЫБРАТЬ
		|			ТоварыВНТТОстатки.ХарактеристикаНоменклатуры               КАК ХарактеристикаНоменклатуры
		|			, ТоварыВНТТОстатки.Склад                                  КАК Склад
		|			, 0                                                        КАК ТоварыНаСкладахОстаток
		|			, 0                                                        КАК ТоварыВРозницеОстатки
		|			, ТоварыВНТТОстатки.КоличествоОстаток                      КАК ТоварыВНТТОстатки
		|			, 0                                                        КАК ТоварыВРезервеСкладахОстатки
		|			, 0                                                        КАК ТоварыКПередачеСоСкладовОстатки
		|		ИЗ
		|			РегистрНакопления.ТоварыВНТТ.Остатки(, Номенклатура = &Номенклатура" + ОграничениеПоСкладу + ") КАК ТоварыВНТТОстатки
					
		|		ОБЪЕДИНИТЬ ВСЕ
				
		|		ВЫБРАТЬ
		|			ТоварыВРезервеСкладахОстатки.ХарактеристикаНоменклатуры    КАК ХарактеристикаНоменклатуры
		|			, ТоварыВРезервеСкладахОстатки.Склад                       КАК Склад
		|			, 0                                                        КАК ТоварыНаСкладахОстатки
		|			, 0                                                        КАК ТоварыВРозницеОстатки
		|			, 0                                                        КАК ТоварыВНТТОстатки
		|			, ТоварыВРезервеСкладахОстатки.КоличествоОстаток           КАК ТоварыВРезервеСкладахОстатки
		|			, 0                                                        КАК ТоварыКПередачеСоСкладовОстатки
		|		ИЗ
		|			РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Номенклатура = &Номенклатура" + ОграничениеПоСкладу + ") КАК ТоварыВРезервеСкладахОстатки
					
		|		ОБЪЕДИНИТЬ ВСЕ
				
		|		ВЫБРАТЬ
		|			ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|			, ТоварыКПередачеСоСкладовОстатки.Склад                    КАК Склад
		|			, 0                                                        КАК ТоварыНаСкладахОстатки
		|			, 0                                                        КАК ТоварыВРозницеОстатки
		|			, 0                                                        КАК ТоварыВНТТОстатки
		|			, 0                                                        КАК ТоварыВРезервеСкладахОстатки
		|			, ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток        КАК ТоварыКПередачеСоСкладовОстатки
		|		ИЗ
		|			РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(, Номенклатура = &Номенклатура" + ОграничениеПоСкладу + ") КАК ТоварыКПередачеСоСкладовОстатки
					
		|		) КАК ВложенныйЗапрос
		|	СГРУППИРОВАТЬ ПО ВложенныйЗапрос.ХарактеристикаНоменклатуры " + ?(ОтображатьСклады,", ВложенныйЗапрос.Склад","") + "
		|	) КАК ВложенныйЗапрос
		|ПО ХарактеристикиНоменклатуры.Ссылка = ВложенныйЗапрос.ХарактеристикаНоменклатуры
		|";
	Если ОтображатьСклады Тогда
		ОграничениеЗапросаПоСкладу = ?(НЕ ЗначениеЗаполнено(СписокСкладов), "", Символы.ПС + "И МестаХраненияНоменклатуры.Склад В (&Склады) " );
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
		|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения,
		|	МестаХраненияНоменклатуры.Склад КАК Склад,
		|	МестаХраненияНоменклатуры.Номенклатура КАК Номенклатура,
		|	МестаХраненияНоменклатуры.Приоритет КАК Приоритет
		|ИЗ
		|	РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
		|ГДЕ
		|	МестаХраненияНоменклатуры.Номенклатура = &Номенклатура "+ ОграничениеЗапросаПоСкладу + " ) КАК АдресныйСклад
		|	ПО
		|		АдресныйСклад.Склад = ВложенныйЗапрос.Склад
		|";
	
	КонецЕсли;
	Если ПолучатьЦены Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|(
		|ВЫБРАТЬ ЦеныНаБазовыйТип.Номенклатура,
		| 		ЦеныНаБазовыйТип.ХарактеристикаНоменклатуры,
		|		ВЫБОР	КОГДА ЦеныНаБазовыйТип.Рассчитывается
		|				ТОГДА
		|					ВЫБОР	КОГДА ЦеныНаБазовыйТип.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|							ТОГДА ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00) + ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00) * (ЦеныНаБазовыйТип.ПроцентСкидкиНаценки /100)
		|							ИНАЧЕ ЕСТЬNULL(ЦенаПоДиапазону.Цена, 0.00)
		|					КОНЕЦ
		|				ИНАЧЕ ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00)
		|		КОНЕЦ КАК Цена,
		|		ВЫБОР 	КОГДА ЦеныНаБазовыйТип.Рассчитывается
		|				ТОГДА
		|					ВЫБОР 	КОГДА ЦеныНаБазовыйТип.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|							ТОГДА ЦеныНаБазовыйТип.Валюта
		|							ИНАЧЕ ЦенаПоДиапазону.Валюта
		|						КОНЕЦ
		|				ИНАЧЕ ЦеныНаБазовыйТип.Валюта
		|		КОНЕЦ КАК Валюта,
		|		ВЫБОР	КОГДА ЦеныНаБазовыйТип.Рассчитывается
		|				ТОГДА
		|					ВЫБОР	КОГДА ЦеныНаБазовыйТип.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|							ТОГДА ЦеныНаБазовыйТип.ЕдиницаИзмерения
		|							ИНАЧЕ ЦенаПоДиапазону.ЕдиницаИзмерения
		|					КОНЕЦ
		|				ИНАЧЕ ЦеныНаБазовыйТип.ЕдиницаИзмерения
		|		КОНЕЦ КАК ЕдиницаИзмерения,
		|		ЛОЖЬ КАК ФлагУсловийПоставки,
		|		ЦеныНаБазовыйТип.Рассчитывается,
		|		ЦеныНаБазовыйТип.ТипЦенБазовыйДинамический КАК ТипЦен
		| ИЗ
		|(
		|	ВЫБРАТЬ
		|		НоменклатураХарактеристикаТипЦены.Номенклатура,
		|		НоменклатураХарактеристикаТипЦены.ХарактеристикаНоменклатуры,
		|		ВЫБОР 	КОГДА НоменклатураХарактеристикаТипЦены.Рассчитывается
		|				ТОГДА 	ВЫБОР 	КОГДА ЕСТЬNULL(КурсВалют.Кратность, 0.00) = 0 ИЛИ ЕСТЬNULL(КурсВалютДинамическийТип.Курс, 0.00) = 0
		|								ТОГДА 0.00
		|								ИНАЧЕ ЕСТЬNULL(ЕСТЬNULL(ЦеныНоменклатуры.Цена, ЦеныНоменклатурыПустаяХарактеристика.Цена), 0.00)
		|									  * ЕСТЬNULL(КурсВалют.Курс, 0.00)
		|									  * ЕСТЬNULL(КурсВалютДинамическийТип.Кратность, 0.00)
		|									  / КурсВалют.Кратность
		|									  / КурсВалютДинамическийТип.Курс
		|						КОНЕЦ
		|				ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, ЦеныНоменклатурыПустаяХарактеристика.Цена)
		|		КОНЕЦ КАК Цена,
		|		ВЫБОР 	КОГДА НоменклатураХарактеристикаТипЦены.Рассчитывается
		|				ТОГДА 	ВЫБОР 	КОГДА ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.СпособРасчетаЦены, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.СпособРасчетаЦены) ЕСТЬ NULL
		|				                ТОГДА ТипЦенНоменклаутры.СпособРасчетаЦены
		|				                ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.СпособРасчетаЦены, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.СпособРасчетаЦены)
		|				        КОНЕЦ
		|				ИНАЧЕ NULL
		|		КОНЕЦ КАК СпособРасчета,
		|		ВЫБОР 	КОГДА НоменклатураХарактеристикаТипЦены.Рассчитывается
		|				ТОГДА 	ВЫБОР 	КОГДА ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.ПроцентСкидкиНаценки, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.ПроцентСкидкиНаценки) ЕСТЬ NULL
		|				                ТОГДА ТипЦенНоменклаутры.ПроцентСкидкиНаценки
		|				                ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.ПроцентСкидкиНаценки, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.ПроцентСкидкиНаценки)
		|				        КОНЕЦ
		|				ИНАЧЕ NULL
		|		КОНЕЦ КАК ПроцентСкидкиНаценки,
		|		ВЫБОР 	КОГДА НоменклатураХарактеристикаТипЦены.Рассчитывается
		|				ТОГДА ЕСТЬNULL(ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.Валюта, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.Валюта), ТипЦенНоменклаутры.ВалютаЦены)
		|				ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Валюта, ЦеныНоменклатурыПустаяХарактеристика.Валюта)
		|		КОНЕЦ КАК Валюта,
		|		КурсВалютДинамическийТип.Валюта КАК ВалютаДинамическийТип,
		|		ЕСТЬNULL(ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения, ЦеныНоменклатурыПустаяХарактеристика.ЕдиницаИзмерения), НоменклатураХарактеристикаТипЦены.ЕдиницаХраненияОстатков) КАК ЕдиницаИзмерения,
		|		НоменклатураХарактеристикаТипЦены.ТипЦен,
		|		НоменклатураХарактеристикаТипЦены.ТипЦенБазовыйДинамический,
		|		НоменклатураХарактеристикаТипЦены.Рассчитывается
		|	ИЗ
		|	(
		|		ВЫБРАТЬ
		|			НоменклатураХарактеристикаТипЦены.Номенклатура,
		|			НоменклатураХарактеристикаТипЦены.ХарактеристикаНоменклатуры,
		|			НоменклатураХарактеристикаТипЦены.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
		|			ВЫБОР 	КОГДА СпрТипЦены.Рассчитывается
		|					ТОГДА СпрТипЦены.БазовыйТипЦен
		|					ИНАЧЕ СпрТипЦены.Ссылка
		|			КОНЕЦ КАК ТипЦен,
		|			СпрТипЦены.Ссылка КАК ТипЦенБазовыйДинамический,
		|			СпрТипЦены.Рассчитывается
		|		ИЗ
		|		(
		|			ВЫБРАТЬ НоменклатураХарактеристика.Номенклатура,
		|					НоменклатураХарактеристика.ХарактеристикаНоменклатуры,
		|					СпрНомеклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
		|					сТипыЦенНоменклатуры.Ссылка КАК ТипЦен
		|			ИЗ
		|			(
		|				ВЫБРАТЬ	
		|					Характеристики.Владелец КАК Номенклатура,
		|					Характеристики.Ссылка КАК ХарактеристикаНоменклатуры
		|				ИЗ
		|					Справочник.ХарактеристикиНоменклатуры КАК Характеристики
		|					ГДЕ Характеристики.Владелец = &Номенклатура
		|				ОБЪЕДИНИТЬ
		|				ВЫБРАТЬ 
		|						&Номенклатура КАК Номенклатура,
		|						ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
		|			) КАК НоменклатураХарактеристика
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|				Справочник.Номенклатура КАК СпрНомеклатура
		|			ПО
		|				СпрНомеклатура.Ссылка = НоменклатураХарактеристика.Номенклатура
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|				Справочник.ТипыЦенНоменклатуры КАК сТипыЦенНоменклатуры
		|			ПО ИСТИНА
		|			ГДЕ
		|				сТипыЦенНоменклатуры.Ссылка В (&ТипыЦен)
		|		) КАК НоменклатураХарактеристикаТипЦены
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Справочник.ТипыЦенНоменклатуры КАК СпрТипЦены
		|		ПО
		|			СпрТипЦены.Ссылка = НоменклатураХарактеристикаТипЦены.ТипЦен
		|	) КАК НоменклатураХарактеристикаТипЦены
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ЦеныНоменклатуры
		|	ПО
		|		ЦеныНоменклатуры.Номенклатура = НоменклатураХарактеристикаТипЦены.Номенклатура
		|		И ЦеныНоменклатуры.ХарактеристикаНоменклатуры = НоменклатураХарактеристикаТипЦены.ХарактеристикаНоменклатуры
		|		И ЦеныНоменклатуры.ТипЦен = НоменклатураХарактеристикаТипЦены.ТипЦен
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыПустаяХарактеристика
		|	ПО
		|		ЦеныНоменклатурыПустаяХарактеристика.Номенклатура = НоменклатураХарактеристикаТипЦены.Номенклатура
		|		И ЦеныНоменклатурыПустаяХарактеристика.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		И ЦеныНоменклатурыПустаяХарактеристика.ТипЦен = НоменклатураХарактеристикаТипЦены.ТипЦен
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыДинамическийТип
		|	ПО
		|		ЦеныНоменклатурыДинамическийТип.Номенклатура = НоменклатураХарактеристикаТипЦены.Номенклатура
		|		И ЦеныНоменклатурыДинамическийТип.ХарактеристикаНоменклатуры = НоменклатураХарактеристикаТипЦены.ХарактеристикаНоменклатуры
		|		И ЦеныНоменклатурыДинамическийТип.ТипЦен = НоменклатураХарактеристикаТипЦены.ТипЦенБазовыйДинамический
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип
		|	ПО
		|		ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.Номенклатура = НоменклатураХарактеристикаТипЦены.Номенклатура
		|		И ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		И ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.ТипЦен = НоменклатураХарактеристикаТипЦены.ТипЦенБазовыйДинамический
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсВалют
		|	ПО
		|		КурсВалют.Валюта = ЕСТЬNULL(ЦеныНоменклатуры.Валюта, ЦеныНоменклатурыПустаяХарактеристика.Валюта)
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.ТипыЦенНоменклатуры КАК ТипЦенНоменклаутры
		|	ПО 
		|		ТипЦенНоменклаутры.Ссылка = НоменклатураХарактеристикаТипЦены.ТипЦенБазовыйДинамический
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсВалютДинамическийТип
		|	ПО
		|		КурсВалютДинамическийТип.Валюта = 	ВЫБОР 	КОГДА НоменклатураХарактеристикаТипЦены.Рассчитывается И ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.Валюта, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.Валюта) ЕСТЬ NULL
		|													ТОГДА ТипЦенНоменклаутры.ВалютаЦены
		|													ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.Валюта, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.Валюта)
		|											КОНЕЦ
		|) КАК ЦеныНаБазовыйТип
		|//Динамический тип цен
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|(
		|	ВЫБРАТЬ
		|	        ДинамическийТипЦен.Номенклатура
		|	      , ДинамическийТипЦен.ХарактеристикаНоменклатуры
		|	      , ДинамическийТипЦен.ДинамическийТип КАК БазовыйТипЦен
		|	      , ДинамическийТипЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|	      , ЕСТЬNULL(ЦенаПоДиапазону.Цена, 0.00) КАК Цена
		|	      , ЦенаПоДиапазону.Валюта
		|	ИЗ
		|	(
		|		ВЫБРАТЬ  ЦенаДляРасчетаДиапазона.Номенклатура,
		|			ЦенаДляРасчетаДиапазона.ХарактеристикаНоменклатуры,		
		|	  		ЦенаДляРасчетаДиапазона.ДинамическийТип,
		|	  		МИНИМУМ(ЦенаПоДиапазону.Валюта) КАК Валюта,
		|	  		МИНИМУМ(ЦенаДляРасчетаДиапазона.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	  		МИНИМУМ(ЦенаПоДиапазону.ВерхняяГраница) КАК Цена
		|	ИЗ
		|	(
		|		ВЫБРАТЬ
		|			НомеклатураХарактеристикаТип.Номенклатура КАК Номенклатура,
		|			НомеклатураХарактеристикаТип.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			ЕСТЬNULL(ЕСТЬNULL(ЦеныБазовые.Цена, ЦеныБазовыеПустаяХарактеристика.Цена), 0.00) КАК Цена,
		|			ЕСТЬNULL(ЦеныБазовые.ТипЦен, ЦеныБазовыеПустаяХарактеристика.ТипЦен) КАК ДинамическийТип,
		|			ЕСТЬNULL(ЦеныБазовые.ЕдиницаИзмерения, ЦеныБазовыеПустаяХарактеристика.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
		|		ИЗ
		|		(
		|			ВЫБРАТЬ	
		|				Характеристики.Владелец КАК Номенклатура,
		|				Характеристики.Ссылка КАК ХарактеристикаНоменклатуры
		|			ИЗ
		|				Справочник.ХарактеристикиНоменклатуры КАК Характеристики
		|			ГДЕ Характеристики.Владелец = &Номенклатура
		|			ОБЪЕДИНИТЬ
		|			ВЫБРАТЬ 
		|					&Номенклатура КАК Номенклатура,
		|					ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
		|		) КАК НомеклатураХарактеристикаТип
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура И (НЕ ТипЦен.Рассчитывается И ТипЦен В (&ТипыЦен))) КАК ЦеныБазовые
		|		ПО
		|			ЦеныБазовые.Номенклатура = НомеклатураХарактеристикаТип.Номенклатура
		|			И ЦеныБазовые.ХарактеристикаНоменклатуры = НомеклатураХарактеристикаТип.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура И (НЕ ТипЦен.Рассчитывается И ТипЦен В (&ТипыЦен))) КАК ЦеныБазовыеПустаяХарактеристика
		|		ПО
		|			ЦеныБазовыеПустаяХарактеристика.Номенклатура = НомеклатураХарактеристикаТип.Номенклатура
		|			И ЦеныБазовыеПустаяХарактеристика.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		ГДЕ
		|			НЕ ЕСТЬNULL(ЦеныБазовые.ТипЦен, ЦеныБазовыеПустаяХарактеристика.ТипЦен) ЕСТЬ NULL
		|	) КАК ЦенаДляРасчетаДиапазона
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	(
		|		ВЫБРАТЬ  Диапазон.Валюта
		|				,ТипыЦен.БазовыйТипЦен КАК ТипЦен
		|				, Диапазон.Цена
		|				, Диапазон.ВерхняяГраница
		|		ИЗ
		|			РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата,) КАК Диапазон 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(	
		|			ВЫБРАТЬ	ТипЦен
		|					, МАКСИМУМ(Период) КАК Период
		|			ИЗ РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, ) КАК Диапазон 
		|			СГРУППИРОВАТЬ ПО Диапазон.ТипЦен
		|		) КАК Диапазон2
		|		ПО Диапазон2.ТипЦен = Диапазон.ТипЦен И Диапазон2.Период = Диапазон.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Справочник.ТипыЦенНоменклатуры КАК ТипыЦен
		|		ПО
		|			ТипыЦен.Ссылка = Диапазон.ТипЦен
		|	) КАК ЦенаПоДиапазону
		|	ПО
		|		ЦенаПоДиапазону.ТипЦен = ЦенаДляРасчетаДиапазона.ДинамическийТип
		|		И ЦенаПоДиапазону.ВерхняяГраница > ЦенаДляРасчетаДиапазона.Цена
		|	ГДЕ
		|		НЕ ЦенаПоДиапазону.ВерхняяГраница ЕСТЬ NULL	
		|	СГРУППИРОВАТЬ ПО ЦенаДляРасчетаДиапазона.ДинамическийТип
		|					, ЦенаДляРасчетаДиапазона.ХарактеристикаНоменклатуры
		|					, ЦенаДляРасчетаДиапазона.Номенклатура	
							
		|	) КАК ДинамическийТипЦен
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(	
		|		ВЫБРАТЬ  Диапазон.Валюта
		|				, ТипыЦен.БазовыйТипЦен КАК ТипЦен
		|				, Диапазон.Цена
		|				, Диапазон.ВерхняяГраница
		|		ИЗ
		|			РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата,) КАК Диапазон 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Справочник.ТипыЦенНоменклатуры КАК ТипыЦен
		|		ПО
		|			ТипыЦен.Ссылка = Диапазон.ТипЦен
		|	) КАК ЦенаПоДиапазону
		|	ПО
		|		ЦенаПоДиапазону.ТипЦен = ДинамическийТипЦен.ДинамическийТип
		|		И ЦенаПоДиапазону.ВерхняяГраница = ДинамическийТипЦен.Цена
		|) КАК ЦенаПоДиапазону
		|ПО
		|	ЦенаПоДиапазону.БазовыйТипЦен = ЦеныНаБазовыйТип.ТипЦен
		|	И ЦенаПоДиапазону.Номенклатура = ЦеныНаБазовыйТип.Номенклатура
		|	И ЦенаПоДиапазону.ХарактеристикаНоменклатуры = ЦеныНаБазовыйТип.ХарактеристикаНоменклатуры
		|ГДЕ
		|	ВЫБОР	КОГДА ЦеныНаБазовыйТип.Рассчитывается
		|			ТОГДА
		|				ВЫБОР 	КОГДА ЦеныНаБазовыйТип.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|						ТОГДА ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00) + ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00) * (ЦеныНаБазовыйТип.ПроцентСкидкиНаценки /100)
		|						ИНАЧЕ ЕСТЬNULL(ЦенаПоДиапазону.Цена, 0.00)
		|				КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00)
		|	КОНЕЦ > 0
		|) КАК Цены
		|ПО
		|	Цены.Номенклатура = ХарактеристикиНоменклатуры.Владелец
		|	И Цены.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.Ссылка
		|";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
		|		ОБЪЕДИНИТЬ ВСЕ
				
		|		ВЫБРАТЬ
		|			ЗаказаныйТовар.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|			 " + ?(ОтображатьСклады,", ""НеВыводить"" КАК Склад, ""НеВыводить"" КАК МестоХранения ","") + "
		|			, 0 КАК КоличествоОстаток
		|			, 0 КАК КоличествоСвободныйОстаток
		|			, 0 КАК КоличествоВРезерве
		|			, ЗаказаныйТовар.КоличествоОстаток КАК КоличествоСвободныйОстатокВЗаказахПоставщикам";
		Если ПолучатьЦены Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	,
			|	0  КАК ФлагЦены,
			|	0 КАК Цена,
			|	0 КАК Валюта,
			|	0 КАК ЕдиницаЦены,
			|	0 КАК КурсВалюты,
			|	0 КАК КратностьВалюты,
			|	NULL КАК ТИПЦЕН";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|		ИЗ
		|			(
		|				ВЫБРАТЬ
		|					ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|					СУММА(ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток
		|				ИЗ
		|					РегистрНакопления.ЗаказыПоставщикам.Остатки(, Номенклатура = &Номенклатура) КАК ЗаказыПоставщикамОстатки
		|				ЛЕВОЕ СОЕДИНЕНИЕ
		|					РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, Номенклатура = &Номенклатура) КАК РазмещениеЗаказовПокупателейОстатки
		|				ПО
		|					РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику = ЗаказыПоставщикамОстатки.ЗаказПоставщику
		|					И ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовПокупателейОстатки.Номенклатура
		|					И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры
		|				СГРУППИРОВАТЬ ПО
		|					ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры
		|			) КАК ЗаказаныйТовар
		|		ГДЕ ЕСТЬNULL(ЗаказаныйТовар.КоличествоОстаток , 0.00) > 0
		|";

	Если ОтображатьСклады Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	УПОРЯДОЧИТЬ ПО
		|		ХарактеристикаНоменклатуры,
		|		Склад
		|		//,АдресныйСклад.Приоритет
		|	ИТОГИ 	СУММА(КоличествоСвободныйОстатокВЗаказахПоставщикам) ПО
		|	ХарактеристикаНоменклатуры,
		|	Склад,
		|	МестоХранения
		|";
	Иначе	
		ТекстЗапроса = ТекстЗапроса + "
		|	УПОРЯДОЧИТЬ ПО
		|		ХарактеристикаНоменклатуры, КоличествоСвободныйОстатокВЗаказахПоставщикам Убыв
		| ";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	// ничего не выбрали - нечего и обрабатывать
	Если РезультатЗапроса.Пустой() Тогда
		
		СтрокаХарактеристика = ДеревоОстатков.Строки.Добавить();
	
	КонецЕсли;
	
		
	Если ОтображатьСклады Тогда
		
		// отображение результатов с итогами по Характеристикам и Складам
		ВыборкаХарактеристика = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ХарактеристикаНоменклатуры");
		Пока ВыборкаХарактеристика.Следующий() Цикл
			
			СтрокаХарактеристика = ДеревоОстатков.Строки.Добавить();
			ЗаполнитьХарактеристикуТовара(СтрокаХарактеристика, ВыборкаХарактеристика);
						
			ВыборкаСклад = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
			Пока ВыборкаСклад.Следующий() Цикл
				Если ВыборкаСклад.Склад = "НеВыводить" Тогда
					продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаСклад.Склад) Тогда
					СтрокаСклад = СтрокаХарактеристика.Строки.Добавить();
					СтрокаСклад.ХарактеристикаСклад = ВыборкаСклад.Склад;
				КонецЕсли;
				
				ПервыйПроходМестХранения = Истина;
				
				ВыборкаМестаХранения = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "МестоХранения");
				Пока ВыборкаМестаХранения.Следующий() Цикл
					
					Если ПервыйПроходМестХранения Тогда
						ВыборкаДетальных = ВыборкаМестаХранения.Выбрать();
						Если ВыборкаДетальных.Следующий() Тогда
							
							// остатки везде одинаковые
							Если ЗначениеЗаполнено(ВыборкаСклад.Склад) Тогда
								ЗаполнитьПоляОстатков(СтрокаСклад, ВыборкаДетальных);
								
								// для итогов еще более верхнего уровня дополняем суммы
								ДополнитьПоляОстатков(СтрокаХарактеристика, ВыборкаДетальных);
							КонецЕсли;
							
							// в разрезе цен заполняем
							Если ПолучатьЦены Тогда
								ЗаполнитьПоляСумм(СтрокаХарактеристика, ВыборкаДетальных, СписокЦенОстатков, КурсыВалют);
								Пока ВыборкаДетальных.Следующий() Цикл
									Если ПолучатьЦены Тогда
										ЗаполнитьПоляСумм(СтрокаХарактеристика, ВыборкаДетальных, СписокЦенОстатков, КурсыВалют);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаМестаХранения.МестоХранения) Тогда
						СтрокаСклад.МестоХранения = ?(ПустаяСтрока(СтрокаСклад.МестоХранения), "", СтрокаСклад.МестоХранения + "; ") + ВыборкаМестаХранения.МестоХранения;
					КонецЕсли;
					
					ПервыйПроходМестХранения = Ложь;
				КонецЦикла;
				
			КонецЦикла;
		
		КонецЦикла;
		
	Иначе
		ТекущаяХарактеристикаНоменклатуры = Неопределено;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.КоличествоСвободныйОстатокВЗаказахПоставщикам > 0 Тогда
				СтрокаХарактеристика = ДеревоОстатков.Строки.Добавить();
			Иначе
				Если ТекущаяХарактеристикаНоменклатуры <> Выборка.ХарактеристикаНоменклатуры Тогда
					СтрокаХарактеристика = ДеревоОстатков.Строки.Добавить();
				КонецЕсли;
			КонецЕсли;
			
			СтрокаХарактеристика.ХарактеристикаСклад = Выборка.ХарактеристикаНоменклатуры;
			ЗаполнитьПоляОстатков(СтрокаХарактеристика, Выборка);
			
			Если ПолучатьЦены Тогда
				ЗаполнитьПоляСумм(СтрокаХарактеристика, Выборка, СписокЦенОстатков, КурсыВалют);
			КонецЕсли;
			
			ТекущаяХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ПолучитьНовДеревоОстатковНоменклатуры()

// Процедура формирует дерево остатков номенклатуры на складах в разрезе характеристик номенклатуры по данным регистра "СвободныеОстатки"
//
// Параметры
//  Номенклатура     - СправочникСсылка.Номенклатура, номенклатурная позиция, для которой необходимо рассчитать остатки
//  ОтображатьСклады - Булево, признак расчета остатков по складам
//  СписокЦенОстатков - таблица для расчета сложных типов цен
//
// Возвращаемое значение:
//   ДеревоЗначений, структура дерева описана в процедуре
//   для Каждого типа цен будет создана своя колонка куда и будет помещена соответсвующая сумма
//
Процедура ПолучитьДеревоОстатковНоменклатурыСвободныеОстатки(ДеревоОстатков, Номенклатура, ОтображатьСклады, 
											СписокЦенОстатков = Неопределено, ВсеТипыЦен = Ложь, 
											КурсыВалют, СписокСкладов = Неопределено) Экспорт
	ДеревоОстатков.Строки.Очистить();
		
	ТипыЦен = Новый Массив;
	МассивРассчитываемыхЦен = Новый Массив;
	СформироватьМассивБазовыхТиповЦен(СписокЦенОстатков, ТипыЦен, МассивРассчитываемыхЦен, ВсеТипыЦен);

	ПолучатьЦены = (ТипыЦен.Количество() > 0);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура"        , Номенклатура);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСклад"         , Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТипыЦен"             , ТипыЦен);
	Если ЗначениеЗаполнено(СписокСкладов) Тогда
		Запрос.УстановитьПараметр("Склады"       	, СписокСкладов);	
	КонецЕсли;
	
	ОграничениеПоСкладу = ?(НЕ ЗначениеЗаполнено(СписокСкладов), "", " И Склад В (&Склады) " );
	
	ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		ХарактеристикиНоменклатуры.Ссылка               КАК ХарактеристикаНоменклатуры
		|		" + ?(ОтображатьСклады,", ВложенныйЗапрос.Склад КАК Склад, АдресныйСклад.МестоХранения КАК МестоХранения","") + "
		|		, ВложенныйЗапрос.КоличествоОстаток             КАК КоличествоОстаток
		|		, ВложенныйЗапрос.КоличествоСвободныйОстаток    КАК КоличествоСвободныйОстаток
		|		, ВложенныйЗапрос.КоличествоВРезерве            КАК КоличествоВРезерве
		|		, 0                                             КАК КоличествоСвободныйОстатокВЗаказахПоставщикам
		|";
		
		Если ПолучатьЦены Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	,
			|	Цены.ФлагУсловийПоставки  КАК ФлагЦены,
			|	ЕСТЬNULL(Цены.Цена, 0.00) КАК Цена,
			|	Цены.Валюта               КАК Валюта,
			|	Цены.ЕдиницаИзмерения     КАК ЕдиницаЦены,
			|	1                         КАК КурсВалюты,
			|	1                         КАК КратностьВалюты,
			|	Цены.ТипЦен               КАК ТИПЦЕН
			|";
		КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
		|	ИЗ
		|	(
		|		ВЫБРАТЬ
		|			ХарактеристикиНоменклатуры.Ссылка   КАК Ссылка,
		|			ХарактеристикиНоменклатуры.Владелец КАК Владелец
		|		ИЗ
		|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ГДЕ
		|			ХарактеристикиНоменклатуры.Владелец = &Номенклатура
		|
		|		ОБЪЕДИНИТЬ
		|
		|		ВЫБРАТЬ
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|			&Номенклатура КАК Владелец
		|
		|		) КАК ХарактеристикиНоменклатуры
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		ВложенныйЗапрос.ХарактеристикаНоменклатуры                     КАК ХарактеристикаНоменклатуры
		|		" + ?(ОтображатьСклады,", ВложенныйЗапрос.Склад ","") + "

		//Полный остаток состоит из свободного на оптовых и розничных складах + резерв + к передаче + НТТ
		|		, СУММА(ВложенныйЗапрос.СвободныеОстатки 
		|				+ ВложенныйЗапрос.ТоварыВНТТОстатки
		|				+ ВложенныйЗапрос.ТоварыВРезервеСкладахОстатки
		|				+ ВложенныйЗапрос.ТоварыКПередачеСоСкладовОстатки)     КАК КоличествоОстаток
		
		//В свободный остаток необходимо включать остаток в НТТ
		|		, СУММА(ВложенныйЗапрос.СвободныеОстатки
		|				+ ВложенныйЗапрос.ТоварыВНТТОстатки)				   КАК КоличествоСвободныйОстаток

		|		, СУММА(ВложенныйЗапрос.ТоварыВРезервеСкладахОстатки)          КАК КоличествоВРезерве
		|	ИЗ
		|		(ВЫБРАТЬ
		|			СвободныеОстатки.ХарактеристикаНоменклатуры          	   КАК ХарактеристикаНоменклатуры
		|			, СвободныеОстатки.Склад                             	   КАК Склад
		|			, СвободныеОстатки.КоличествоОстаток                 	   КАК СвободныеОстатки
		|			, 0                                                        КАК ТоварыВНТТОстатки
		|			, 0                                                        КАК ТоварыВРезервеСкладахОстатки
		|			, 0                                                        КАК ТоварыКПередачеСоСкладовОстатки
		|		ИЗ
		|			РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура = &Номенклатура" + ОграничениеПоСкладу + ") КАК СвободныеОстатки
        |
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ТоварыВНТТОстатки.ХарактеристикаНоменклатуры               КАК ХарактеристикаНоменклатуры
		|			, ТоварыВНТТОстатки.Склад                                  КАК Склад
		|			, 0                                                        КАК СвободныеОстатки
		|			, ТоварыВНТТОстатки.КоличествоОстаток                      КАК ТоварыВНТТОстатки
		|			, 0                                                        КАК ТоварыВРезервеСкладахОстатки
		|			, 0                                                        КАК ТоварыКПередачеСоСкладовОстатки
		|		ИЗ
		|			РегистрНакопления.ТоварыВНТТ.Остатки(, Номенклатура = &Номенклатура" + ОграничениеПоСкладу + ") КАК ТоварыВНТТОстатки
		
		|		ОБЪЕДИНИТЬ ВСЕ
				
		|		ВЫБРАТЬ
		|			ТоварыВРезервеСкладахОстатки.ХарактеристикаНоменклатуры    КАК ХарактеристикаНоменклатуры
		|			, ТоварыВРезервеСкладахОстатки.Склад                       КАК Склад
		|			, 0                                                        КАК СвободныеОстатки
		|			, 0                                                        КАК ТоварыВНТТОстатки
		|			, ТоварыВРезервеСкладахОстатки.КоличествоОстаток           КАК ТоварыВРезервеСкладахОстатки
		|			, 0                                                        КАК ТоварыКПередачеСоСкладовОстатки
		|		ИЗ
		|			РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Номенклатура = &Номенклатура" + ОграничениеПоСкладу + ") КАК ТоварыВРезервеСкладахОстатки
		|			
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|			, ТоварыКПередачеСоСкладовОстатки.Склад                    КАК Склад
		|			, 0                                                        КАК СвободныеОстатки
		|			, 0                                                        КАК ТоварыВНТТОстатки
		|			, 0                                                        КАК ТоварыВРезервеСкладахОстатки
		|			, ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток        КАК ТоварыКПередачеСоСкладовОстатки
		|		ИЗ
		|			РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(, Номенклатура = &Номенклатура" + ОграничениеПоСкладу + ") КАК ТоварыКПередачеСоСкладовОстатки
					
		|		) КАК ВложенныйЗапрос
		|	СГРУППИРОВАТЬ ПО ВложенныйЗапрос.ХарактеристикаНоменклатуры " + ?(ОтображатьСклады,", ВложенныйЗапрос.Склад","") + "
		|	) КАК ВложенныйЗапрос
		|ПО ХарактеристикиНоменклатуры.Ссылка = ВложенныйЗапрос.ХарактеристикаНоменклатуры
		|";
	Если ОтображатьСклады Тогда
		ОграничениеЗапросаПоСкладу = ?(НЕ ЗначениеЗаполнено(СписокСкладов), "", Символы.ПС + "И МестаХраненияНоменклатуры.Склад В (&Склады) " );
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
		|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения,
		|	МестаХраненияНоменклатуры.Склад КАК Склад,
		|	МестаХраненияНоменклатуры.Номенклатура КАК Номенклатура,
		|	МестаХраненияНоменклатуры.Приоритет КАК Приоритет
		|ИЗ
		|	РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
		|ГДЕ
		|	МестаХраненияНоменклатуры.Номенклатура = &Номенклатура "+ ОграничениеЗапросаПоСкладу + " ) КАК АдресныйСклад
		|	ПО
		|		АдресныйСклад.Склад = ВложенныйЗапрос.Склад
		|";
	
	КонецЕсли;
	Если ПолучатьЦены Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|(
		|ВЫБРАТЬ ЦеныНаБазовыйТип.Номенклатура,
		| 		ЦеныНаБазовыйТип.ХарактеристикаНоменклатуры,
		|		ВЫБОР	КОГДА ЦеныНаБазовыйТип.Рассчитывается
		|				ТОГДА
		|					ВЫБОР	КОГДА ЦеныНаБазовыйТип.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|							ТОГДА ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00) + ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00) * (ЦеныНаБазовыйТип.ПроцентСкидкиНаценки /100)
		|							ИНАЧЕ ЕСТЬNULL(ЦенаПоДиапазону.Цена, 0.00)
		|					КОНЕЦ
		|				ИНАЧЕ ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00)
		|		КОНЕЦ КАК Цена,
		|		ВЫБОР 	КОГДА ЦеныНаБазовыйТип.Рассчитывается
		|				ТОГДА
		|					ВЫБОР 	КОГДА ЦеныНаБазовыйТип.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|							ТОГДА ЦеныНаБазовыйТип.Валюта
		|							ИНАЧЕ ЦенаПоДиапазону.Валюта
		|						КОНЕЦ
		|				ИНАЧЕ ЦеныНаБазовыйТип.Валюта
		|		КОНЕЦ КАК Валюта,
		|		ВЫБОР	КОГДА ЦеныНаБазовыйТип.Рассчитывается
		|				ТОГДА
		|					ВЫБОР	КОГДА ЦеныНаБазовыйТип.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|							ТОГДА ЦеныНаБазовыйТип.ЕдиницаИзмерения
		|							ИНАЧЕ ЦенаПоДиапазону.ЕдиницаИзмерения
		|					КОНЕЦ
		|				ИНАЧЕ ЦеныНаБазовыйТип.ЕдиницаИзмерения
		|		КОНЕЦ КАК ЕдиницаИзмерения,
		|		ЛОЖЬ КАК ФлагУсловийПоставки,
		|		ЦеныНаБазовыйТип.Рассчитывается,
		|		ЦеныНаБазовыйТип.ТипЦенБазовыйДинамический КАК ТипЦен
		| ИЗ
		|(
		|	ВЫБРАТЬ
		|		НоменклатураХарактеристикаТипЦены.Номенклатура,
		|		НоменклатураХарактеристикаТипЦены.ХарактеристикаНоменклатуры,
		|		ВЫБОР 	КОГДА НоменклатураХарактеристикаТипЦены.Рассчитывается
		|				ТОГДА 	ВЫБОР 	КОГДА ЕСТЬNULL(КурсВалют.Кратность, 0.00) = 0 ИЛИ ЕСТЬNULL(КурсВалютДинамическийТип.Курс, 0.00) = 0
		|								ТОГДА 0.00
		|								ИНАЧЕ ЕСТЬNULL(ЕСТЬNULL(ЦеныНоменклатуры.Цена, ЦеныНоменклатурыПустаяХарактеристика.Цена), 0.00)
		|									  * ЕСТЬNULL(КурсВалют.Курс, 0.00)
		|									  * ЕСТЬNULL(КурсВалютДинамическийТип.Кратность, 0.00)
		|									  / КурсВалют.Кратность
		|									  / КурсВалютДинамическийТип.Курс
		|						КОНЕЦ
		|				ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, ЦеныНоменклатурыПустаяХарактеристика.Цена)
		|		КОНЕЦ КАК Цена,
		|		ВЫБОР 	КОГДА НоменклатураХарактеристикаТипЦены.Рассчитывается
		|				ТОГДА 	ВЫБОР 	КОГДА ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.СпособРасчетаЦены, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.СпособРасчетаЦены) ЕСТЬ NULL
		|				                ТОГДА ТипЦенНоменклаутры.СпособРасчетаЦены
		|				                ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.СпособРасчетаЦены, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.СпособРасчетаЦены)
		|				        КОНЕЦ
		|				ИНАЧЕ NULL
		|		КОНЕЦ КАК СпособРасчета,
		|		ВЫБОР 	КОГДА НоменклатураХарактеристикаТипЦены.Рассчитывается
		|				ТОГДА 	ВЫБОР 	КОГДА ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.ПроцентСкидкиНаценки, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.ПроцентСкидкиНаценки) ЕСТЬ NULL
		|				                ТОГДА ТипЦенНоменклаутры.ПроцентСкидкиНаценки
		|				                ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.ПроцентСкидкиНаценки, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.ПроцентСкидкиНаценки)
		|				        КОНЕЦ
		|				ИНАЧЕ NULL
		|		КОНЕЦ КАК ПроцентСкидкиНаценки,
		|		ВЫБОР 	КОГДА НоменклатураХарактеристикаТипЦены.Рассчитывается
		|				ТОГДА ЕСТЬNULL(ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.Валюта, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.Валюта), ТипЦенНоменклаутры.ВалютаЦены)
		|				ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Валюта, ЦеныНоменклатурыПустаяХарактеристика.Валюта)
		|		КОНЕЦ КАК Валюта,
		|		КурсВалютДинамическийТип.Валюта КАК ВалютаДинамическийТип,
		|		ЕСТЬNULL(ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения, ЦеныНоменклатурыПустаяХарактеристика.ЕдиницаИзмерения), НоменклатураХарактеристикаТипЦены.ЕдиницаХраненияОстатков) КАК ЕдиницаИзмерения,
		|		НоменклатураХарактеристикаТипЦены.ТипЦен,
		|		НоменклатураХарактеристикаТипЦены.ТипЦенБазовыйДинамический,
		|		НоменклатураХарактеристикаТипЦены.Рассчитывается
		|	ИЗ
		|	(
		|		ВЫБРАТЬ
		|			НоменклатураХарактеристикаТипЦены.Номенклатура,
		|			НоменклатураХарактеристикаТипЦены.ХарактеристикаНоменклатуры,
		|			НоменклатураХарактеристикаТипЦены.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
		|			ВЫБОР 	КОГДА СпрТипЦены.Рассчитывается
		|					ТОГДА СпрТипЦены.БазовыйТипЦен
		|					ИНАЧЕ СпрТипЦены.Ссылка
		|			КОНЕЦ КАК ТипЦен,
		|			СпрТипЦены.Ссылка КАК ТипЦенБазовыйДинамический,
		|			СпрТипЦены.Рассчитывается
		|		ИЗ
		|		(
		|			ВЫБРАТЬ НоменклатураХарактеристика.Номенклатура,
		|					НоменклатураХарактеристика.ХарактеристикаНоменклатуры,
		|					СпрНомеклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
		|					сТипыЦенНоменклатуры.Ссылка КАК ТипЦен
		|			ИЗ
		|			(
		|				ВЫБРАТЬ	
		|					Характеристики.Владелец КАК Номенклатура,
		|					Характеристики.Ссылка КАК ХарактеристикаНоменклатуры
		|				ИЗ
		|					Справочник.ХарактеристикиНоменклатуры КАК Характеристики
		|					ГДЕ Характеристики.Владелец = &Номенклатура
		|				ОБЪЕДИНИТЬ
		|				ВЫБРАТЬ 
		|						&Номенклатура КАК Номенклатура,
		|						ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
		|			) КАК НоменклатураХарактеристика
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|				Справочник.Номенклатура КАК СпрНомеклатура
		|			ПО
		|				СпрНомеклатура.Ссылка = НоменклатураХарактеристика.Номенклатура
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|				Справочник.ТипыЦенНоменклатуры КАК сТипыЦенНоменклатуры
		|			ПО ИСТИНА
		|			ГДЕ
		|				сТипыЦенНоменклатуры.Ссылка В (&ТипыЦен)
		|		) КАК НоменклатураХарактеристикаТипЦены
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Справочник.ТипыЦенНоменклатуры КАК СпрТипЦены
		|		ПО
		|			СпрТипЦены.Ссылка = НоменклатураХарактеристикаТипЦены.ТипЦен
		|	) КАК НоменклатураХарактеристикаТипЦены
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура) КАК ЦеныНоменклатуры
		|	ПО
		|		ЦеныНоменклатуры.Номенклатура = НоменклатураХарактеристикаТипЦены.Номенклатура
		|		И ЦеныНоменклатуры.ХарактеристикаНоменклатуры = НоменклатураХарактеристикаТипЦены.ХарактеристикаНоменклатуры
		|		И ЦеныНоменклатуры.ТипЦен = НоменклатураХарактеристикаТипЦены.ТипЦен
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыПустаяХарактеристика
		|	ПО
		|		ЦеныНоменклатурыПустаяХарактеристика.Номенклатура = НоменклатураХарактеристикаТипЦены.Номенклатура
		|		И ЦеныНоменклатурыПустаяХарактеристика.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		И ЦеныНоменклатурыПустаяХарактеристика.ТипЦен = НоменклатураХарактеристикаТипЦены.ТипЦен
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыДинамическийТип
		|	ПО
		|		ЦеныНоменклатурыДинамическийТип.Номенклатура = НоменклатураХарактеристикаТипЦены.Номенклатура
		|		И ЦеныНоменклатурыДинамическийТип.ХарактеристикаНоменклатуры = НоменклатураХарактеристикаТипЦены.ХарактеристикаНоменклатуры
		|		И ЦеныНоменклатурыДинамическийТип.ТипЦен = НоменклатураХарактеристикаТипЦены.ТипЦенБазовыйДинамический
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип
		|	ПО
		|		ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.Номенклатура = НоменклатураХарактеристикаТипЦены.Номенклатура
		|		И ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		И ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.ТипЦен = НоменклатураХарактеристикаТипЦены.ТипЦенБазовыйДинамический
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.КурсыВалют.СрезПоследних() КАК КурсВалют
		|	ПО
		|		КурсВалют.Валюта = ЕСТЬNULL(ЦеныНоменклатуры.Валюта, ЦеныНоменклатурыПустаяХарактеристика.Валюта)
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.ТипыЦенНоменклатуры КАК ТипЦенНоменклаутры
		|	ПО 
		|		ТипЦенНоменклаутры.Ссылка = НоменклатураХарактеристикаТипЦены.ТипЦенБазовыйДинамический
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.КурсыВалют.СрезПоследних() КАК КурсВалютДинамическийТип
		|	ПО
		|		КурсВалютДинамическийТип.Валюта = 	ВЫБОР 	КОГДА НоменклатураХарактеристикаТипЦены.Рассчитывается И ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.Валюта, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.Валюта) ЕСТЬ NULL
		|													ТОГДА ТипЦенНоменклаутры.ВалютаЦены
		|													ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.Валюта, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.Валюта)
		|											КОНЕЦ
		|) КАК ЦеныНаБазовыйТип
		|//Динамический тип цен
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|(
		|	ВЫБРАТЬ
		|	        ДинамическийТипЦен.Номенклатура
		|	      , ДинамическийТипЦен.ХарактеристикаНоменклатуры
		|	      , ДинамическийТипЦен.ДинамическийТип КАК БазовыйТипЦен
		|	      , ДинамическийТипЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|	      , ЕСТЬNULL(ЦенаПоДиапазону.Цена, 0.00) КАК Цена
		|	      , ЦенаПоДиапазону.Валюта
		|	ИЗ
		|	(
		|		ВЫБРАТЬ  ЦенаДляРасчетаДиапазона.Номенклатура,
		|			ЦенаДляРасчетаДиапазона.ХарактеристикаНоменклатуры,		
		|	  		ЦенаДляРасчетаДиапазона.ДинамическийТип,
		|	  		МИНИМУМ(ЦенаПоДиапазону.Валюта) КАК Валюта,
		|	  		МИНИМУМ(ЦенаДляРасчетаДиапазона.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	  		МИНИМУМ(ЦенаПоДиапазону.ВерхняяГраница) КАК Цена
		|	ИЗ
		|	(
		|		ВЫБРАТЬ
		|			НомеклатураХарактеристикаТип.Номенклатура КАК Номенклатура,
		|			НомеклатураХарактеристикаТип.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			ЕСТЬNULL(ЕСТЬNULL(ЦеныБазовые.Цена, ЦеныБазовыеПустаяХарактеристика.Цена), 0.00) КАК Цена,
		|			ЕСТЬNULL(ЦеныБазовые.ТипЦен, ЦеныБазовыеПустаяХарактеристика.ТипЦен) КАК ДинамическийТип,
		|			ЕСТЬNULL(ЦеныБазовые.ЕдиницаИзмерения, ЦеныБазовыеПустаяХарактеристика.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
		|		ИЗ
		|		(
		|			ВЫБРАТЬ	
		|				Характеристики.Владелец КАК Номенклатура,
		|				Характеристики.Ссылка КАК ХарактеристикаНоменклатуры
		|			ИЗ
		|				Справочник.ХарактеристикиНоменклатуры КАК Характеристики
		|			ГДЕ Характеристики.Владелец = &Номенклатура
		|			ОБЪЕДИНИТЬ
		|			ВЫБРАТЬ 
		|					&Номенклатура КАК Номенклатура,
		|					ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
		|		) КАК НомеклатураХарактеристикаТип
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура И (НЕ ТипЦен.Рассчитывается И ТипЦен В (&ТипыЦен))) КАК ЦеныБазовые
		|		ПО
		|			ЦеныБазовые.Номенклатура = НомеклатураХарактеристикаТип.Номенклатура
		|			И ЦеныБазовые.ХарактеристикаНоменклатуры = НомеклатураХарактеристикаТип.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура И (НЕ ТипЦен.Рассчитывается И ТипЦен В (&ТипыЦен))) КАК ЦеныБазовыеПустаяХарактеристика
		|		ПО
		|			ЦеныБазовыеПустаяХарактеристика.Номенклатура = НомеклатураХарактеристикаТип.Номенклатура
		|			И ЦеныБазовыеПустаяХарактеристика.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		ГДЕ
		|			НЕ ЕСТЬNULL(ЦеныБазовые.ТипЦен, ЦеныБазовыеПустаяХарактеристика.ТипЦен) ЕСТЬ NULL
		|	) КАК ЦенаДляРасчетаДиапазона
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	(
		|		ВЫБРАТЬ  Диапазон.Валюта
		|				,ТипыЦен.БазовыйТипЦен КАК ТипЦен
		|				, Диапазон.Цена
		|				, Диапазон.ВерхняяГраница
		|		ИЗ
		|			РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(,) КАК Диапазон 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(	
		|			ВЫБРАТЬ	ТипЦен
		|					, МАКСИМУМ(Период) КАК Период
		|			ИЗ РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(, ) КАК Диапазон 
		|			СГРУППИРОВАТЬ ПО Диапазон.ТипЦен
		|		) КАК Диапазон2
		|		ПО Диапазон2.ТипЦен = Диапазон.ТипЦен И Диапазон2.Период = Диапазон.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Справочник.ТипыЦенНоменклатуры КАК ТипыЦен
		|		ПО
		|			ТипыЦен.Ссылка = Диапазон.ТипЦен
		|	) КАК ЦенаПоДиапазону
		|	ПО
		|		ЦенаПоДиапазону.ТипЦен = ЦенаДляРасчетаДиапазона.ДинамическийТип
		|		И ЦенаПоДиапазону.ВерхняяГраница > ЦенаДляРасчетаДиапазона.Цена
		|	ГДЕ
		|		НЕ ЦенаПоДиапазону.ВерхняяГраница ЕСТЬ NULL	
		|	СГРУППИРОВАТЬ ПО ЦенаДляРасчетаДиапазона.ДинамическийТип
		|					, ЦенаДляРасчетаДиапазона.ХарактеристикаНоменклатуры
		|					, ЦенаДляРасчетаДиапазона.Номенклатура	
							
		|	) КАК ДинамическийТипЦен
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(	
		|		ВЫБРАТЬ  Диапазон.Валюта
		|				, ТипыЦен.БазовыйТипЦен КАК ТипЦен
		|				, Диапазон.Цена
		|				, Диапазон.ВерхняяГраница
		|		ИЗ
		|			РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(,) КАК Диапазон 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Справочник.ТипыЦенНоменклатуры КАК ТипыЦен
		|		ПО
		|			ТипыЦен.Ссылка = Диапазон.ТипЦен
		|	) КАК ЦенаПоДиапазону
		|	ПО
		|		ЦенаПоДиапазону.ТипЦен = ДинамическийТипЦен.ДинамическийТип
		|		И ЦенаПоДиапазону.ВерхняяГраница = ДинамическийТипЦен.Цена
		|) КАК ЦенаПоДиапазону
		|ПО
		|	ЦенаПоДиапазону.БазовыйТипЦен = ЦеныНаБазовыйТип.ТипЦен
		|	И ЦенаПоДиапазону.Номенклатура = ЦеныНаБазовыйТип.Номенклатура
		|	И ЦенаПоДиапазону.ХарактеристикаНоменклатуры = ЦеныНаБазовыйТип.ХарактеристикаНоменклатуры
		|ГДЕ
		|	ВЫБОР	КОГДА ЦеныНаБазовыйТип.Рассчитывается
		|			ТОГДА
		|				ВЫБОР 	КОГДА ЦеныНаБазовыйТип.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|						ТОГДА ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00) + ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00) * (ЦеныНаБазовыйТип.ПроцентСкидкиНаценки /100)
		|						ИНАЧЕ ЕСТЬNULL(ЦенаПоДиапазону.Цена, 0.00)
		|				КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00)
		|	КОНЕЦ > 0
		|) КАК Цены
		|ПО
		|	Цены.Номенклатура = ХарактеристикиНоменклатуры.Владелец
		|	И Цены.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.Ссылка
		|";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
		|		ОБЪЕДИНИТЬ ВСЕ
				
		|		ВЫБРАТЬ
		|			ЗаказаныйТовар.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|			 " + ?(ОтображатьСклады,", ""НеВыводить"" КАК Склад, ""НеВыводить"" КАК МестоХранения ","") + "
		|			, 0 КАК КоличествоОстаток
		|			, 0 КАК КоличествоСвободныйОстаток
		|			, 0 КАК КоличествоВРезерве
		|			, ЗаказаныйТовар.КоличествоОстаток КАК КоличествоСвободныйОстатокВЗаказахПоставщикам";
		Если ПолучатьЦены Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	,
			|	0  КАК ФлагЦены,
			|	0 КАК Цена,
			|	0 КАК Валюта,
			|	0 КАК ЕдиницаЦены,
			|	0 КАК КурсВалюты,
			|	0 КАК КратностьВалюты,
			|	NULL КАК ТИПЦЕН";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|				, СУММА(ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0.00)
		|						-
		|						ЕСТЬNULL(РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток,0.00)
		|				) 	КАК КоличествоОстаток
		|			ИЗ
		|				РегистрНакопления.ЗаказыПоставщикам.Остатки(, Номенклатура = &Номенклатура) КАК ЗаказыПоставщикамОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ
		|				РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, Номенклатура = &Номенклатура) КАК РазмещениеЗаказовПокупателейОстатки
		|			ПО
		|				РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику = ЗаказыПоставщикамОстатки.ЗаказПоставщику
		|				СГРУППИРОВАТЬ ПО ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры
		|			) КАК ЗаказаныйТовар
		|		ГДЕ ЕСТЬNULL(ЗаказаныйТовар.КоличествоОстаток , 0.00) > 0
		|";

	Если ОтображатьСклады Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	УПОРЯДОЧИТЬ ПО
		|		ХарактеристикаНоменклатуры,
		|		Склад
		|		//,АдресныйСклад.Приоритет
		|	ИТОГИ 	СУММА(КоличествоСвободныйОстатокВЗаказахПоставщикам) ПО
		|	ХарактеристикаНоменклатуры,
		|	Склад,
		|	МестоХранения
		|";
	Иначе	
		ТекстЗапроса = ТекстЗапроса + "
		|	УПОРЯДОЧИТЬ ПО
		|		ХарактеристикаНоменклатуры, КоличествоСвободныйОстатокВЗаказахПоставщикам Убыв
		| ";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	// ничего не выбрали - нечего и обрабатывать
	Если РезультатЗапроса.Пустой() Тогда
		
		СтрокаХарактеристика = ДеревоОстатков.Строки.Добавить();
	
	КонецЕсли;
	
		
	Если ОтображатьСклады Тогда
		
		// отображение результатов с итогами по Характеристикам и Складам
		ВыборкаХарактеристика = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ХарактеристикаНоменклатуры");
		Пока ВыборкаХарактеристика.Следующий() Цикл
			
			СтрокаХарактеристика = ДеревоОстатков.Строки.Добавить();
			ЗаполнитьХарактеристикуТовара(СтрокаХарактеристика, ВыборкаХарактеристика);
						
			ВыборкаСклад = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
			Пока ВыборкаСклад.Следующий() Цикл
				Если ВыборкаСклад.Склад = "НеВыводить" Тогда
					продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаСклад.Склад) Тогда
					СтрокаСклад = СтрокаХарактеристика.Строки.Добавить();
					СтрокаСклад.ХарактеристикаСклад = ВыборкаСклад.Склад;
				КонецЕсли;
				
				ПервыйПроходМестХранения = Истина;
				
				ВыборкаМестаХранения = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "МестоХранения");
				Пока ВыборкаМестаХранения.Следующий() Цикл
					
					Если ПервыйПроходМестХранения Тогда
						ВыборкаДетальных = ВыборкаМестаХранения.Выбрать();
						Если ВыборкаДетальных.Следующий() Тогда
							
							// остатки везде одинаковые
							Если ЗначениеЗаполнено(ВыборкаСклад.Склад) Тогда
								ЗаполнитьПоляОстатков(СтрокаСклад, ВыборкаДетальных);
								
								// для итогов еще более верхнего уровня дополняем суммы
								ДополнитьПоляОстатков(СтрокаХарактеристика, ВыборкаДетальных);
							КонецЕсли;
							
							// в разрезе цен заполняем
							Если ПолучатьЦены Тогда
								ЗаполнитьПоляСумм(СтрокаХарактеристика, ВыборкаДетальных, СписокЦенОстатков, КурсыВалют);
								Пока ВыборкаДетальных.Следующий() Цикл
									Если ПолучатьЦены Тогда
										ЗаполнитьПоляСумм(СтрокаХарактеристика, ВыборкаДетальных, СписокЦенОстатков, КурсыВалют);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаМестаХранения.МестоХранения) Тогда
						СтрокаСклад.МестоХранения = ?(ПустаяСтрока(СтрокаСклад.МестоХранения), "", СтрокаСклад.МестоХранения + "; ") + ВыборкаМестаХранения.МестоХранения;
					КонецЕсли;
					
					ПервыйПроходМестХранения = Ложь;
				КонецЦикла;
				
			КонецЦикла;
		
		КонецЦикла;
		
	Иначе
		ТекущаяХарактеристикаНоменклатуры = Неопределено;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.КоличествоСвободныйОстатокВЗаказахПоставщикам > 0 Тогда
				СтрокаХарактеристика = ДеревоОстатков.Строки.Добавить();
			Иначе
				Если ТекущаяХарактеристикаНоменклатуры <> Выборка.ХарактеристикаНоменклатуры Тогда
					СтрокаХарактеристика = ДеревоОстатков.Строки.Добавить();
				КонецЕсли;
			КонецЕсли;
			
			СтрокаХарактеристика.ХарактеристикаСклад = Выборка.ХарактеристикаНоменклатуры;
			ЗаполнитьПоляОстатков(СтрокаХарактеристика, Выборка);
			
			Если ПолучатьЦены Тогда
				ЗаполнитьПоляСумм(СтрокаХарактеристика, Выборка, СписокЦенОстатков, КурсыВалют);
			КонецЕсли;
			
			ТекущаяХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ПолучитьНовДеревоОстатковНоменклатуры()
// Функция возвращает массив префиксов тех колонок сумм которые будут выведены
Функция ПолучитьСписокПрефиксовВыводимыхСумм(СписокЦенОстатков)Экспорт 
	
	СписокПрефиксовЦен = Новый СписокЗначений;
	
	Если СписокЦенОстатков = Неопределено Тогда
		Возврат СписокПрефиксовЦен;
	КонецЕсли;
	
	Для Каждого Элемент Из СписокЦенОстатков Цикл
		
		Если Элемент.Пометка Тогда
			
			СписокПрефиксовЦен.Добавить(Элемент.Префикс, Элемент.Наименование);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат  СписокПрефиксовЦен;
КонецФункции

// Процедура пересчитывает суммы номенклатуры из одной валюты в другую
Процедура ПересчитатьОстаткиВВалюте(ДеревоОстатков, СписокПрефиксовЦен, СтруктураКурса, ВВалютеЦены, ВалютаЦены) Экспорт
	
	// определяем курс и кратность валюты
	Если НЕ ВВалютеЦены И ЗначениеЗаполнено(ВалютаЦены) Тогда
		КурсВалюты      = СтруктураКурса.Курс;
		КратностьВалюты = СтруктураКурса.Кратность;
	КонецЕсли;
 	
	Для Каждого СтрокаДерева Из ДеревоОстатков.Строки Цикл
		
		Для Каждого Префикс Из СписокПрефиксовЦен Цикл
			
			СтрокаПрефикса = Префикс.Значение;
			Если ВВалютеЦены Тогда
				СтрокаДерева[СтрокаПрефикса + "Цена"] = СтрокаДерева[СтрокаПрефикса + "ЦенаНоменклатуры"];
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаДерева[СтрокаПрефикса + "ВалютаЦены"]) ИЛИ НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
					СтрокаДерева[СтрокаПрефикса + "Цена"] = 0;
				Иначе
					СтрокаДерева[СтрокаПрефикса + "Цена"] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДерева[СтрокаПрефикса + "ЦенаНоменклатуры"], 
																				СтрокаДерева[СтрокаПрефикса + "ВалютаЦены"], 
																				ВалютаЦены, 
																				СтрокаДерева[СтрокаПрефикса + "КурсВалюты"], 
																				КурсВалюты, 
																				СтрокаДерева[СтрокаПрефикса + "КратностьВалюты"], 
																				КратностьВалюты);
				КонецЕсли; 
																			
			КонецЕсли; 
			
		КонецЦикла;
	
	КонецЦикла; 

КонецПроцедуры

// Процедура из структуры заполняет параметры
Процедура ПолучитьПараметрыДокументаИзСтруктуры(СтруктурЗначений, ТипЦен,
												СпособЗаполненияЦен, Номенклатура, Количество, КоличествоМест, Характеристика,
												ВалютаЦены, Цена, ЕдиницаИзмерения) Экспорт
	Перем СписокПрефиксовЦен;
	
	// Получим параметры подбора из структуры подбора.
	СтруктурЗначений.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	СтруктурЗначений.Свойство("Номенклатура"    , Номенклатура);
	СтруктурЗначений.Свойство("Количество"      , Количество);
	СтруктурЗначений.Свойство("КоличествоМест"  , КоличествоМест);
	СтруктурЗначений.Свойство("Характеристика"  , Характеристика);
	Если Характеристика = Неопределено Тогда
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;

	СтруктурЗначений.Свойство("СписокПрефиксовЦен"  , СписокПрефиксовЦен);
	
	Если СписокПрефиксовЦен <> Неопределено Тогда 
		// может быть передано несколько типов цен
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			ПрефиксЦены = СформироватьПрефиксДляЭлемента(ТипЦен);
	
			СтруктурЗначений.Свойство(ПрефиксЦены + "ВалютаЦены"      , ВалютаЦены);
	        СтруктурЗначений.Свойство(ПрефиксЦены + "Цена"            , Цена);
			СтруктурЗначений.Свойство(ПрефиксЦены + "ЕдиницаИзмерения", ЕдиницаИзмерения);
			
		КонецЕсли;
		
	Иначе	
		
	    СтруктурЗначений.Свойство("ВалютаЦены"      , ВалютаЦены);
	    СтруктурЗначений.Свойство("Цена"            , Цена);
		СтруктурЗначений.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);

	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков	
	КонецЕсли;

КонецПроцедуры


// Процедура восстанавливает флажки у выделенных элементов списка типов цен
Процедура ВосстановитьФлажкиТиповЦен(СписокТиповЦен, СохраненныйСписок) Экспорт
	
	Если СписокТиповЦен = Неопределено Или СохраненныйСписок = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого Элемент Из СписокТиповЦен Цикл
		СтрокаОтмеченная = СохраненныйСписок.НайтиПоЗначению(Элемент.Префикс);	
		
		Элемент.Пометка = (СтрокаОтмеченная <> Неопределено);
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет список типов цен, оставляет выделенными те элементы, что и были выделены до этого
Процедура ОбновитьСписокТиповЦен(СписокТиповЦен, СписокВыделенныхЭлементов)  Экспорт
	
	// восстанавливаем выделенные элементы у СписокЦенОстатков
	СписокТиповЦен = ЗаполнитьСписокТиповЦенДляПолученияОстатков();
	Если СписокВыделенныхЭлементов <> Неопределено Тогда
		
		ВосстановитьФлажкиТиповЦен(СписокТиповЦен, СписокВыделенныхЭлементов);
				
	КонецЕсли;	
	
КонецПроцедуры

// Процедура устанавливает порядок следования списка типов цен
Процедура УпорядочитьСписокТиповЦен(СписокТиповЦен, ПорядокСледованияЦен) Экспорт
	
	Если (СписокТиповЦен = Неопределено) Или (ПорядокСледованияЦен = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	НомерОчередногоТипаЦен = 0;
	Для Каждого ЭлементПорядка Из ПорядокСледованияЦен Цикл
		
		СтрокаТипаЦены = СписокТиповЦен.Найти(ЭлементПорядка, "Ссылка");
		Если СтрокаТипаЦены = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекущийИндекс = СписокТиповЦен.Индекс(СтрокаТипаЦены);
		Если ТекущийИндекс <> НомерОчередногоТипаЦен Тогда
			СписокТиповЦен.Сдвинуть(СтрокаТипаЦены, НомерОчередногоТипаЦен - ТекущийИндекс);
		КонецЕсли;
				
		НомерОчередногоТипаЦен = НомерОчередногоТипаЦен + 1;
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет и упорядочивает список типов цен
Процедура ОбновитьИУпорядочитьСписокТиповЦен(СписокТиповЦен) Экспорт
	
	СписокВыделенныхЭлементов = ПолучитьСписокПрефиксовВыводимыхСумм(СписокТиповЦен);
	ПорядокСледованияТиповЦен = Новый Массив;
	ПорядокСледованияТиповЦен = СписокТиповЦен.ВыгрузитьКолонку("Ссылка");

	ОбновитьСписокТиповЦен(СписокТиповЦен, СписокВыделенныхЭлементов);
    УпорядочитьСписокТиповЦен(СписокТиповЦен, ПорядокСледованияТиповЦен);
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБСЛУЖИВАНИЯ КОМПЛЕКТУЮЩИХ

// Формирует копию таблицы значений, с заменой "комплекта" на "комплектующие".
//
// Параметры:
//  ТаблицаИсточник         - таблица значений источник, содержащая комплекты,
//  ДокументОбъект          – объект редактируемого документа,
//  СтруктураШапкиДокумента - структура шапки документа.
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция СформироватьТаблицуКомплектующих(ТаблицаИсточник, ДокументОбъект, СтруктураШапкиДокумента = Неопределено) Экспорт

	ТаблицаРезультат   = ТаблицаИсточник.Скопировать();
	ТаблицаРезультат.Колонки.Добавить("НоменклатураКомплекта");
	ТаблицаРезультат.Колонки.Добавить("ХарактеристикаКомплекта");
	ТаблицаРезультат.Колонки.Добавить("КоличествоКомплекта");
	ЕстьЦенаВРознице = ТаблицаРезультат.Колонки.Найти("ЦенаВРознице") <> Неопределено;
	Если ЕстьЦенаВРознице Тогда
		ТаблицаРезультат.Колонки.ЦенаВРознице.Имя = "Цена";
	КонецЕсли;
	ТаблицаРезультат.Колонки.Добавить("СчетУчетаБУКомплекта");
	ТаблицаРезультат.Колонки.Добавить("СкладКомплекта");
	Если ТаблицаРезультат.Колонки.Найти("Качество") <> Неопределено Тогда
		ТаблицаРезультат.Колонки.Добавить("КачествоКомплекта");
	КонецЕсли; 

	НайденныеКомплекты = ТаблицаРезультат.НайтиСтроки(Новый Структура("Комплект", Истина));
	//НайденныеСпецПредложения = ТаблицаРезультат.НайтиСтроки(Новый Структура("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.СпецПредложение));

	//Для Каждого СпецПредложение Из НайденныеСпецПредложения Цикл
	//	НайденныеКомплекты.Добавить(СпецПредложение);
	//КонецЦикла;

	Если НайденныеКомплекты.Количество() > 0 Тогда
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		ИмяДокумента        = МетаданныеДокумента.Имя;
		ЕстьСерия           = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры",            МетаданныеДокумента, "СоставНабора");
		ЕстьСклад           = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Склад",                        МетаданныеДокумента, "СоставНабора");
		ЕстьКачество        = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество",                     МетаданныеДокумента, "СоставНабора");
		ЕстьСпособСписания  = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СпособСписанияОстаткаТоваров", МетаданныеДокумента, "СоставНабора");
		ЕстьСебестоимость   = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Себестоимость",                МетаданныеДокумента, "СоставНабора");
		
		ЕстьСчетУчетаБУ     = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаБУ",                  МетаданныеДокумента, "СоставНабора");
		ЕстьПринятыеСчетУчетаБУ = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПринятыеСчетУчетаБУ", 		МетаданныеДокумента, "СоставНабора");
		
		СписокКомплектов = Новый СписокЗначений;
		Для Каждого СтрокаКомплект Из НайденныеКомплекты Цикл
			СписокКомплектов.Добавить(СтрокаКомплект.КлючСтроки);
		КонецЦикла;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПарДокументСсылка",   ДокументОбъект.Ссылка);
		Запрос.УстановитьПараметр("ПарСписокКомплектов", СписокКомплектов);

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Док.КлючСтроки                                           КАК КлючСтроки,
		|	Док.Номенклатура                                         КАК Номенклатура,
		|	Док.Номенклатура.ВестиПартионныйУчетПоСериям             КАК ВестиПартионныйУчетПоСериям,
		|	Док.ХарактеристикаНоменклатуры                           КАК ХарактеристикаНоменклатуры,
		|" + ?(ЕстьСчетУчетаБУ,    "Док.СчетУчетаБУ                  КАК СчетУчетаБУ,",            		 "") + "
		|" + ?(ЕстьПринятыеСчетУчетаБУ, "Док.ПринятыеСчетУчетаБУ     КАК ПринятыеСчетУчетаБУ,",          "") + "
		|" + ?(ЕстьСерия,          "Док.СерияНоменклатуры            КАК СерияНоменклатуры,",            "") + "
		|" + ?(ЕстьСклад,          "Док.Склад                        КАК Склад,
		|						    Док.Склад.ВидСклада              КАК ВидСклада,",                    "") + "
		|" + ?(ЕстьКачество,       "Док.Качество                     КАК Качество,",                     "") + "
		|" + ?(ЕстьСпособСписания, "Док.СпособСписанияОстаткаТоваров КАК СпособСписанияОстаткаТоваров,", "") + "
		|" + ?(ЕстьСебестоимость,  "Док.Себестоимость                КАК Себестоимость,",                "") + "
		|	Док.Количество                                           КАК Количество,
		|	Док.Количество * 
		|		Док.ЕдиницаИзмерения.Коэффициент /
		|		Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоличествоХранения,
		|	Док.ЕдиницаИзмерения                                     КАК ЕдиницаИзмерения,
		|	Док.Цена                                     			 КАК Цена
		|
		|ИЗ
		|	Документ." + ИмяДокумента + ".СоставНабора КАК Док
		|
		|ГДЕ
		|	Док.Ссылка = &ПарДокументСсылка
		|	И Док.КлючСтроки В (&ПарСписокКомплектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.КлючСтроки
		|
		|";

		РезультатЗапроса     = Запрос.Выполнить();
		ТаблицаКомплектующих = РезультатЗапроса.Выгрузить();
        КолекцияРаспределяемыхПоказателей = Новый Структура("Цена", 0);		
		
		Для Каждого СтрокаКомплект Из НайденныеКомплекты Цикл
			НайденныеКомплектующие = ТаблицаКомплектующих.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаКомплект.КлючСтроки));
			
			БазаЦены = 0;
			Для Каждого СтрокаКомплектующая Из НайденныеКомплектующие Цикл
				БазаЦены = БазаЦены + (СтрокаКомплектующая.Цена * СтрокаКомплектующая.Количество);
			КонецЦикла;
			Если НЕ ТаблицаРезультат.Колонки.Найти("Количество") = Неопределено Тогда
				КоличествоКомплекта = СтрокаКомплект.Количество;
			Иначе
				КоличествоКомплекта = СтрокаКомплект.КоличествоДок;
			КонецЕсли;	
			КолекцияРаспределяемыхПоказателей = Новый Структура("Цена", 0);
			РапределеноЦены		  = 0;
			
			Для Каждого СтрокаКомплектующая Из НайденныеКомплектующие Цикл
				НоваяСтрока = ТаблицаРезультат.Добавить();

				Для Сч = 1 По ТаблицаРезультат.Колонки.Количество() Цикл
					Индекс     = Сч - 1;
					ИмяКолонки = ТаблицаРезультат.Колонки[Индекс].Имя;

					
									
					Если ИмяКолонки = "ДокументПартии"                ИЛИ
					     ИмяКолонки = "ДокументПолучения"             ИЛИ
					     ИмяКолонки = "ОрганизацияДокументаПолучения" ИЛИ
					     ИмяКолонки = "НомерСтроки"                   ИЛИ
					     ИмяКолонки = "Услуга"                        ИЛИ
					     ИмяКолонки = "Набор"                         Тогда
						НоваяСтрока.Установить(Индекс, СтрокаКомплект.Получить(Индекс));

					ИначеЕсли ИмяКолонки = "СерияНоменклатуры"
					        И ЕстьСерия Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаКомплектующая.СерияНоменклатуры) Тогда
							НоваяСтрока.Установить(Индекс, СтрокаКомплект.Получить(Индекс));
						Иначе
							НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.СерияНоменклатуры);
						КонецЕсли;

					ИначеЕсли ИмяКолонки = "Склад"
					        И ЕстьСклад Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаКомплектующая.Склад) Тогда
							НоваяСтрока.Установить(Индекс, СтрокаКомплект.Получить(Индекс));
						Иначе
							НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.Склад);
						КонецЕсли;

					ИначеЕсли ИмяКолонки = "ВидСклада"
					        И ЕстьСклад Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаКомплектующая.ВидСклада) Тогда
							НоваяСтрока.Установить(Индекс, СтрокаКомплект.Получить(Индекс));
						Иначе
							НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.ВидСклада);
						КонецЕсли;

					ИначеЕсли ИмяКолонки = "Качество"
					        И ЕстьКачество Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаКомплектующая.Качество) Тогда
							НоваяСтрока.Установить(Индекс, СтрокаКомплект.Получить(Индекс));
						Иначе
							НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.Качество);
						КонецЕсли;

					ИначеЕсли ИмяКолонки = "СпособСписанияОстаткаТоваров"
					        И ЕстьСпособСписания Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаКомплектующая.СпособСписанияОстаткаТоваров) Тогда
							НоваяСтрока.Установить(Индекс, СтрокаКомплект.Получить(Индекс));
						Иначе
							НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.СпособСписанияОстаткаТоваров);
						КонецЕсли;

					ИначеЕсли ИмяКолонки = "Номенклатура" Тогда
						НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.Номенклатура);

					ИначеЕсли ИмяКолонки = "ХарактеристикаНоменклатуры" Тогда
						НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.ХарактеристикаНоменклатуры);
						
					ИначеЕсли ИмяКолонки = "СчетУчетаБУ" Тогда
						НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.СчетУчетаБУ);
						
					ИначеЕсли ИмяКолонки = "ПринятыеСчетУчетаБУ" Тогда
						НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.ПринятыеСчетУчетаБУ);
						
					ИначеЕсли ИмяКолонки = "ЕдиницаИзмерения" Тогда
						НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.ЕдиницаИзмерения);

					ИначеЕсли ИмяКолонки = "Комплект" Тогда
						НоваяСтрока.Установить(Индекс, Ложь);

					ИначеЕсли ИмяКолонки = "Количество" Тогда
						НоваяСтрока.Установить(Индекс, СтрокаКомплект.Количество * СтрокаКомплектующая.КоличествоХранения);

					ИначеЕсли ИмяКолонки = "КоличествоДок" Тогда
						НоваяСтрока.Установить(Индекс, СтрокаКомплект.КоличествоДок * СтрокаКомплектующая.Количество);

					ИначеЕсли ИмяКолонки = "МинусКоличество" Тогда
						НоваяСтрока.Установить(Индекс, - (СтрокаКомплект.КоличествоДок * СтрокаКомплектующая.КоличествоХранения));

					ИначеЕсли ИмяКолонки = "МинусСебестоимость"
					        И ЕстьСебестоимость Тогда
						Себестоимость= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаКомплектующая.Себестоимость,
						               СтруктураШапкиДокумента.ВалютаДокумента,
						               СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
						               СтруктураШапкиДокумента.КурсДокумента,
						               СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
						               СтруктураШапкиДокумента.КратностьДокумента,
						               СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
						НоваяСтрока.Установить(Индекс, - (Себестоимость * СтрокаКомплект.КоличествоДок * СтрокаКомплектующая.Количество));

					ИначеЕсли ИмяКолонки = "НоменклатураКомплекта" Тогда
						НоваяСтрока.НоменклатураКомплекта = СтрокаКомплект.Номенклатура;
					ИначеЕсли ИмяКолонки = "ХарактеристикаКомплекта" Тогда
						НоваяСтрока.ХарактеристикаКомплекта = СтрокаКомплект.ХарактеристикаНоменклатуры;
					ИначеЕсли ИмяКолонки = "КоличествоКомплекта" Тогда
						НоваяСтрока.КоличествоКомплекта = КоличествоКомплекта;
						КоличествоКомплекта = 0;
					ИначеЕсли ЕстьСчетУчетаБУ И ИмяКолонки = "СчетУчетаБУКомплекта" Тогда
						НоваяСтрока.СчетУчетаБУКомплекта = СтрокаКомплект.СчетУчетаБУ;
					ИначеЕсли ЕстьСклад И ИмяКолонки = "СкладКомплекта" Тогда
						НоваяСтрока.СкладКомплекта = СтрокаКомплект.Склад;
					ИначеЕсли ЕстьКачество И ИмяКолонки = "КачествоКомплекта" Тогда
						НоваяСтрока.КачествоКомплекта = СтрокаКомплект.Качество;
					Иначе 
												
						НовоеЗначение = СтрокаКомплект.Получить(Индекс);
						Если (ТипЗнч(НовоеЗначение) = Тип("Число")) Тогда
							
							ТочностьВКолонке = ТаблицаРезультат.Колонки.Получить(Индекс).ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
							
							РапределеноПоказателя = 0;
							КолекцияРаспределяемыхПоказателей.Свойство(ИмяКолонки, РапределеноПоказателя);
							РапределеноПоказателя = ?(НЕ ЗначениеЗаполнено(РапределеноПоказателя), 0, РапределеноПоказателя);
							
							НовоеЗначение = ?((БазаЦены - РапределеноЦены) = 0, 0, (НовоеЗначение - РапределеноПоказателя) * (СтрокаКомплектующая.Цена * СтрокаКомплектующая.Количество) / (БазаЦены - РапределеноЦены));
							НовоеЗначение = Окр(НовоеЗначение, ТочностьВКолонке, 1);
							
							КолекцияРаспределяемыхПоказателей.Вставить(ИмяКолонки, НовоеЗначение + РапределеноПоказателя);
							
							
						Конецесли;
						НоваяСтрока.Установить(Индекс, НовоеЗначение);
					КонецЕсли;
				КонецЦикла;
								
				РапределеноЦены =  (СтрокаКомплектующая.Цена * СтрокаКомплектующая.Количество) + РапределеноЦены;
				
			КонецЦикла;

			//Проверим остаток распределения числовых колонок
			Если ЗначениеЗаполнено(НоваяСтрока) Тогда
				Для Каждого ЧисловойПоказатель Из КолекцияРаспределяемыхПоказателей Цикл
					ИмяКолонки 				= ЧисловойПоказатель.Ключ;
					РапределеноПоказателя 	= ЧисловойПоказатель.Значение;
					ВсегоКРаспределению		= СтрокаКомплект[ИмяКолонки];
					ОшибкаОкругления		= ВсегоКРаспределению - РапределеноПоказателя;
					Если НЕ ОшибкаОкругления = 0 Тогда
						НоваяСтрока[ИмяКолонки] = НоваяСтрока[ИмяКолонки] + ОшибкаОкругления;
					КонецЕсли;
				КонецЦикла;				
			КонецЕсли;
			
			ТаблицаРезультат.Удалить(СтрокаКомплект);
		КонецЦикла;
		
	КонецЕсли;
	Если ЕстьЦенаВРознице Тогда
		ТаблицаРезультат.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

	Возврат ТаблицаРезультат;

КонецФункции // СформироватьТаблицуКомплектующих()

// Функция формирует значение нового ключа строки табличной части.
//
// Параметры:
//  ДокументОбъект – объект редактируемого документа,
//  ИмяТЧ          – имя табличной части объекта.
//
Функция ПолучитьНовыйКлючСтроки(ДокументОбъект, ИмяТЧ = "Товары") Экспорт

	Если ДокументОбъект[ИмяТЧ].Количество() = 0 Тогда
		МаксКлюч = 1;
	Иначе
		// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
		// рассчитывается от максимального существующего значения.
		СписокКлючей = Новый СписокЗначений;
		СписокКлючей.ЗагрузитьЗначения(ДокументОбъект[ИмяТЧ].ВыгрузитьКолонку("КлючСтроки"));
		СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		МаксКлюч = СписокКлючей[0].Значение + 1;
	КонецЕсли;

	Возврат МаксКлюч;

КонецФункции // УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи()

// Функция получает таблицу значений с "комплектующими".
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуКомплектующих(СтрокаТабличнойЧасти, ДатаДокумента = Неопределено)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарНоменклатура",   СтрокаТабличнойЧасти.Номенклатура);
	Запрос.УстановитьПараметр("ПарХарактеристика", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("ПарКлючСтроки",     СтрокаТабличнойЧасти.КлючСтроки);

	Если ДатаДокумента <> Неопределено Тогда
		Запрос.УстановитьПараметр("Дата", ДатаДокумента);

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СпецПредложения.Комплектующая КАК Номенклатура,
		|	СпецПредложения.ХарактеристикаКомплектующей КАК ХарактеристикаНоменклатуры,
		|	СпецПредложения.Количество КАК Количество,
		|	СпецПредложения.Комплектующая.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	&ПарКлючСтроки КАК КлючСтроки,
		|	0 КАК Цена
		|ИЗ
		|	(ВЫБРАТЬ
		|		СкидкиНатуральные.СпецПредложение КАК СпецПредложение,
		|		СкидкиНатуральные.ХарактеристикаСпецПредложения КАК ХарактеристикаСпецПредложения,
		|		МАКСИМУМ(СкидкиНатуральные.Регистратор) КАК Регистратор
		|	ИЗ
		|		РегистрСведений.СкидкиНоменклатурыНатуральные.СрезПоследних(&Дата) КАК СкидкиНатуральные
		|	ГДЕ
		|		СкидкиНатуральные.СпецПредложение = &ПарНоменклатура
		|	  И СкидкиНатуральные.ХарактеристикаСпецПредложения = &ПарХарактеристика
		|	СГРУППИРОВАТЬ ПО
		|		СпецПредложение,
		|		ХарактеристикаСпецПредложения
		|	) КАК СкидкиНатуральные
		|СОЕДИНЕНИЕ
		|	РегистрСведений.СпецПредложения КАК СпецПредложения
		|	ПО СкидкиНатуральные.Регистратор = СпецПредложения.Регистратор
		|	И СкидкиНатуральные.СпецПредложение = СпецПредложения.Номенклатура
		|	И СкидкиНатуральные.ХарактеристикаСпецПредложения = СпецПредложения.ХарактеристикаНоменклатуры
		|";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегКомплектующие.Комплектующая               КАК Номенклатура,
		|	РегКомплектующие.ХарактеристикаКомплектующей КАК ХарактеристикаНоменклатуры,
		|	РегКомплектующие.Количество                  КАК Количество,
		|	РегКомплектующие.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
		|	&ПарКлючСтроки                               КАК КлючСтроки
		|ИЗ
		|	РегистрСведений.КомплектующиеНоменклатуры КАК РегКомплектующие
		|ГДЕ
		|	РегКомплектующие.Номенклатура = &ПарНоменклатура
		| И РегКомплектующие.ХарактеристикаНоменклатуры = &ПарХарактеристика
		|УПОРЯДОЧИТЬ ПО
		|	РегКомплектующие.Комплектующая,
		|	РегКомплектующие.ХарактеристикаКомплектующей
		|";
	КонецЕсли;

	РезультатЗапроса     = Запрос.Выполнить();
	ТаблицаКомплектующих = РезультатЗапроса.Выгрузить();

	//Если ДокументОбъект <> Неопределено Тогда
	//	ВалютаДокумента = ОбщегоНазначения.ПолучитьРеквизитШапки("ВалютаДокумента", ДокументОбъект, МетаданныеДокумента, ДокументОбъект.мВалютаРегламентированногоУчета);
	//	ДоговорКонтрагента = ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ДокументОбъект, МетаданныеДокумента);
	//	УсловиеПродаж = ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ДокументОбъект, МетаданныеДокумента);

	//	Для Каждого СтрокаТЗ Из ТаблицаКомплектующих Цикл
	//		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ДокументОбъект.мВалютаРегламентированногоУчета);
	//		СтрокаТЗ.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
	//		   СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, ДокументОбъект.ТипЦен,
	//		   ВалютаДокумента, , , , ДоговорКонтрагента, УсловиеПродаж);
	//	КонецЦикла;
	//КонецЕсли;

	Возврат ТаблицаКомплектующих;

КонецФункции // ПолучитьТаблицуКомплектующих()

// Очистить состав набора в документе
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура ОчиститьСоставНабора(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ТабличнаяЧасть = ДокументОбъект.СоставНабора;

	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСтроки", СтрокаТабличнойЧасти.КлючСтроки);

	МассивЭлементов = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	КолвоЭлементов  = МассивЭлементов.Количество();
	
	СерНомераНабора = ДокументОбъект.Метаданные().ТабличныеЧасти.Найти("СерийныеНомераСоставНабора");
	Если СерНомераНабора <> Неопределено Тогда
		Для Каждого Элемент Из МассивЭлементов Цикл
			Если Элемент.КлючСвязи <> 0 Тогда
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("КлючСвязи", Элемент.КлючСвязи);
				СерийныеНомера = ДокументОбъект.СерийныеНомераСоставНабора.НайтиСтроки(СтруктураПоиска);
				Для Каждого СерийныйНомер Из СерийныеНомера Цикл
					ДокументОбъект.СерийныеНомераСоставНабора.Удалить(СерийныйНомер);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
		ТабличнаяЧасть.Удалить(МассивЭлементов[КолвоЭлементов - ОбратныйИндекс]);
	КонецЦикла;

КонецПроцедуры // ОчиститьСоставНабора()

// Добавить состав набора в документ
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура ДобавитьСоставНабора(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// Очистим состав набора.
	ОчиститьСоставНабора(СтрокаТабличнойЧасти, ДокументОбъект);

	Если Не СтрокаТабличнойЧасти.Номенклатура.Комплект Тогда
		Возврат;
	КонецЕсли;

	МетаданныеДокументы = Метаданные.Документы;

	ДокументыПродажи = Новый Соответствие;
	ДокументыПродажи.Вставить(МетаданныеДокументы["ЗаказПокупателя"]           , 0);
	ДокументыПродажи.Вставить(МетаданныеДокументы["ВозвратТоваровОтПокупателя"], 0);
	ДокументыПродажи.Вставить(МетаданныеДокументы["РеализацияТоваровУслуг"]    , 0);
	ДокументыПродажи.Вставить(МетаданныеДокументы["СчетНаОплатуПокупателю"]    , 0);
	ДокументыПродажи.Вставить(МетаданныеДокументы["ЧекККМ"]                    , 1);
	ДокументыПродажи.Вставить(МетаданныеДокументы["ОтчетОРозничныхПродажах"]   , 1);

	ТекДокументПродажи = ДокументыПродажи[ДокументОбъект.Метаданные()];

	Если ТекДокументПродажи = Неопределено Тогда
		ТекСпецПредложение = Ложь;
	Иначе
		ВидРеализации = ?(ТекДокументПродажи = 0, Перечисления.ВидыСкидок.Оптовая, Перечисления.ВидыСкидок.Розничная);

		ТекСпецПредложение = Ценообразование.ЭтоСпецПредложение(ДокументОбъект.Дата, СтрокаТабличнойЧасти.Номенклатура,
		   СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		   Ценообразование.ПолучитьМассивПолучателейСкидки(ВидРеализации, ДокументОбъект));
	КонецЕсли;

	Если ТекСпецПредложение Тогда
		ТаблицаКомплектующих = ПолучитьТаблицуКомплектующих(СтрокаТабличнойЧасти, ДокументОбъект.Дата);
	Иначе
		ТаблицаКомплектующих = ПолучитьТаблицуКомплектующих(СтрокаТабличнойЧасти);
	КонецЕсли;

	ТабличнаяЧасть = ДокументОбъект.СоставНабора;
	СтуктураПоиска = Новый Структура;

	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ТаблицаКомплектующих Цикл
		СтуктураПоиска.Вставить("Номенклатура"              , СтрокаТаблицы.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("ЕдиницаИзмерения"          , СтрокаТаблицы.ЕдиницаИзмерения);
		СтуктураПоиска.Вставить("КлючСтроки"                , СтрокаТаблицы.КлючСтроки);

		МассивСтрок = ТабличнаяЧасть.НайтиСтроки(СтуктураПоиска);

		Если МассивСтрок.Количество() > 0 Тогда
			НоваяСтрока            = МассивСтрок[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + СтрокаТаблицы.Количество;
		Иначе
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);

			Если ТекДокументПродажи <> Неопределено Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьЦенуПродажиТабЧасти(НоваяСтрока, ДокументОбъект, ДокументОбъект.мВалютаРегламентированногоУчета);
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаБУ", ДокументОбъект.Метаданные(), "СоставНабора") Тогда
					ДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "СоставНабора", ДокументОбъект.ОтражатьВБухгалтерскомУчете);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ДобавитьСоставНабора()

// Заполнить состав набора на основании
//
// Параметры:
//  ДокументОбъект    - объект редактируемого документа,
//  ДокументОснование - объект документа основания,
//
Процедура ЗаполнитьСоставНабораПоОснованию(ДокументОбъект, ДокументОснование, ПоискПоКлючу = Ложь) Экспорт

	Если ДокументОбъект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МетаданныеДокумента   = ДокументОбъект.Метаданные();
	МетаданныеОснования   = ДокументОснование.Метаданные();
	ОснованиеЕстьСерия    = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеОснования, "Товары");
	ДокументЕстьСерия     = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеДокумента, "Товары");
	ДокументСоставНабора  = ДокументОбъект.СоставНабора;
	ОснованиеСоставНабора = ДокументОснование.СоставНабора;
	ОснованиеТовар        = ДокументОснование.Товары;
	КолонкиСоставаНабора  = ДокументСоставНабора.Выгрузить().Колонки;

	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ДокументОбъект.Товары Цикл
		Если СтрокаТаблицы.КлючСтроки = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               СтрокаТаблицы.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("ЕдиницаИзмерения",           СтрокаТаблицы.ЕдиницаИзмерения);

		Если ПоискПоКлючу Тогда
			СтуктураПоиска.Вставить("КлючСтроки",             СтрокаТаблицы.КлючСтроки);
		Иначе
			СтуктураПоиска.Вставить("Цена",                   СтрокаТаблицы.Цена);
		КонецЕсли;

		Если ОснованиеЕстьСерия
		   И ДокументЕстьСерия Тогда
			СтуктураПоиска.Вставить("СерияНоменклатуры",      СтрокаТаблицы.СерияНоменклатуры);
		КонецЕсли;

		МассивСтрок = ОснованиеТовар.НайтиСтроки(СтуктураПоиска);

		Если МассивСтрок.Количество() > 0 Тогда
			СтуктураПоиска = Новый Структура;
			СтуктураПоиска.Вставить("КлючСтроки", МассивСтрок[0].КлючСтроки);
			МассивСтрок = ОснованиеСоставНабора.НайтиСтроки(СтуктураПоиска);

			Для Каждого Строка Из МассивСтрок Цикл
				НоваяСтрока            = ДокументСоставНабора.Добавить();
				НоваяСтрока.КлючСтроки = СтрокаТаблицы.КлючСтроки;

				Для Сч = 1 По КолонкиСоставаНабора.Количество() Цикл
					ИмяКолонки = КолонкиСоставаНабора[Сч - 1].Имя;

					Если ИмяКолонки <> "КлючСтроки"
					   И ИмяКолонки <> "НомерСтроки" Тогда

						Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(ИмяКолонки, МетаданныеДокумента, "СоставНабора")
						   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(ИмяКолонки, МетаданныеОснования, "СоставНабора") Тогда
							НоваяСтрока[ИмяКолонки] = Строка[ИмяКолонки];
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСоставНабораПоОснованию()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЕДЕНИЯ УПРАВЛЕНЧЕСКОГО ПАРТИОННОГО УЧЕТА ПО ОРГАНИЗАЦИЯМ

Функция ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация, СпособВеденияПартионногоУчетаПоОрганизации) Экспорт
	Если СпособВеденияПартионногоУчетаПоОрганизации = Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.ПоТекущейОрганизации Тогда
		Возврат Организация;
	ИначеЕсли СпособВеденияПартионногоУчетаПоОрганизации = Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.ПоГоловнойОрганизации Тогда	
		Если НЕ Организация.Пустая() Тогда
			Возврат Организация.ГоловнаяОрганизация;
		Иначе
			Возврат Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
КонецФункции	

Функция ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, Дата) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НастройкаСпособовВеденияУправленческогоПартионногоУчетаСрезПоследних.СпособВеденияПартионногоУчетаПоОрганизации
	                      |ИЗ
	                      |	РегистрСведений.НастройкаСпособовВеденияУправленческогоПартионногоУчета.СрезПоследних(&Дата, Организация = &Организация) КАК НастройкаСпособовВеденияУправленческогоПартионногоУчетаСрезПоследних
	                      |");
	Запрос.УстановитьПараметр("Дата",Дата);					  
	Запрос.УстановитьПараметр("Организация",Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.ПоКомпанииВЦелом;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СпособВеденияПартионногоУчетаПоОрганизации;
	КонецЕсли;	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРАЦИЯ В ПОСЛЕДОВАТЕЛЬНОСТЯХ

Процедура ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ДокументОбъект, Дата, Организация = Неопределено, Упр=Ложь, Бух = Ложь, СпособВеденияПартионногоУчетаПоОрганизации=Неопределено) Экспорт
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности") Тогда
		ТаблицаСтаройРегистрацииВПоследовательности = ДокументОбъект.ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности;
	Иначе
		ТаблицаСтаройРегистрацииВПоследовательности = Неопределено;
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчетаНаСервере(ДокументОбъект.Ссылка, Дата, Организация, Упр, Бух, СпособВеденияПартионногоУчетаПоОрганизации, ТаблицаСтаройРегистрацииВПоследовательности);
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПОЛУЧЕНИЯ ИНФОРМАЦИИ О СЕБЕСТОИМОСТИ ДЛЯ ПЕЧАТНЫХ ФОРМ И ОБРАБОТОК ЗАПОЛНЕНИЯ

// Функция возвращает способ расчета себестоимости в формах 
//
// Параметры:
//  Дата - дата, на которую получается способ расчета ,
//  Организация - ссылка на организацию, по которой получается способ расчета
//
// Возвращаемое значение:
//  Перечисление СпособыРасчетаСебестоимостиВФормах - содержит требуемый способ расчета
//
Функция ПолучитьСпособРасчетаСебестоимостиВФормах(Дата, Организация)
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	Организации.Ссылка,
	                      |	ВЫБОР
	                      |		КОГДА УстановкаПараметровУчетаНоменклатурыСпособыРасчетаСебестоимостиВФормах.СпособРасчета ЕСТЬ NULL 
	                      |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиВФормах.ПоДаннымБухгалтерскогоУчета)
	                      |		ИНАЧЕ УстановкаПараметровУчетаНоменклатурыСпособыРасчетаСебестоимостиВФормах.СпособРасчета
	                      |	КОНЕЦ КАК СпособРасчета
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УстановкаПараметровУчетаНоменклатуры.СпособыРасчетаСебестоимостиВФормах КАК УстановкаПараметровУчетаНоменклатурыСпособыРасчетаСебестоимостиВФормах
	                      |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |				МАКСИМУМ(УстановкаПараметровУчетаНоменклатуры.Дата) КАК Дата
	                      |			ИЗ
	                      |				Документ.УстановкаПараметровУчетаНоменклатуры КАК УстановкаПараметровУчетаНоменклатуры
	                      |			ГДЕ
	                      |				УстановкаПараметровУчетаНоменклатуры.Дата <= &Дата
	                      |				И УстановкаПараметровУчетаНоменклатуры.Проведен) КАК ВложенныйЗапрос
	                      |			ПО (ВложенныйЗапрос.Дата = УстановкаПараметровУчетаНоменклатурыСпособыРасчетаСебестоимостиВФормах.Ссылка.Дата)
	                      |		ПО (Организации.Ссылка = УстановкаПараметровУчетаНоменклатурыСпособыРасчетаСебестоимостиВФормах.Организация
	                      |				ИЛИ УстановкаПараметровУчетаНоменклатурыСпособыРасчетаСебестоимостиВФормах.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	                      |ГДЕ
	                      |	Организации.Ссылка = &Организация
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВЫБОР
	                      |		КОГДА Организации.Ссылка = УстановкаПараметровУчетаНоменклатурыСпособыРасчетаСебестоимостиВФормах.Организация
	                      |			ТОГДА 0
	                      |		ИНАЧЕ 1
	                      |	КОНЕЦ");
	Запрос.УстановитьПараметр("Дата",Дата); 					  
	Запрос.УстановитьПараметр("Организация",Организация); 					  
	
	Выборка = Запрос.Выполнить().Выбрать();;
	Выборка.Следующий();
	СпособРасчета = Выборка.СпособРасчета;
	
	//Если ипользуется расширенная аналитика в режиме отличном от "Упр. и регл. учет" то себестоимость по данным упр. учета получать нельзя
	Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
	  И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата) 
	  И (СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиВФормах.ПоДаннымУправленческогоУчета)
	  И НЕ ИспользуетсяУправленческийУчетЗатрат() Тогда
		  СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиВФормах.ПоДаннымБухгалтерскогоУчета;
	КонецЕсли;	  
	  
	Возврат СпособРасчета;
	
КонецФункции	

// Процедура - 	дополняет запрос информацией о затратах по данным расширенной аналитики
// Параметры:
//  ДокументСсылка - ссылка на документ,
//  Запрос - запрос, который нужно дополнять,
//  ВидУчета - строка, содержащую "Упр" для упр. учета и "Регл" для регламентированного учета,
//  КоэффициентПересчетаВВалюту - число, коэффициент предназначен для пересчета из валюты упр. учета в валюту регл. учета
//
Процедура ДополнитьЗапросЗатратамиРасширеннаяАналитика(ДокументСсылка, Запрос, ВидУчета, КоэффициентПересчетаВВалюту)
	ИспользоватьОпределениеСчетовПриПроведенииДокументов = СчетаУчетаВДокументах.ИспользоватьОпределениеСчетовПриПроведенииДокументов(ДокументСсылка.Дата);
	
	//Для этого режима доступны данные обоих учетов
	Если ВидУчета = "Упр" Тогда
		ИмяРегистра = "УчетЗатрат";
	Иначе
		ИмяРегистра = "УчетЗатратРегл";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалюту", КоэффициентПересчетаВВалюту);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ДокументСсылка.Дата));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ДокументСсылка.Дата));
	
	СтруктураИзмерений = Новый Структура("Организация, СчетУчета, Склад, Затрата, ХарактеристикаЗатраты, СерияЗатраты, Качество, СтатусПартии");
	РасширеннаяАналитикаУчета.ПолучитьИспользуемыеИзмерения(СтруктураИзмерений, ИмяРегистра = "УчетЗатрат");
	
	Если Найти(Запрос.Текст,"ТаблицаСебестоимостиОбороты") <> 0 Тогда
		СтруктраИзмеренийЗатрат = Новый Структура();
		
		СтруктраИзмеренийЗатрат.Вставить("Организация",	?(СтруктураИзмерений.Организация,"КлючАналитикаВидаУчета.Организация","""Не используется"""));
		СтруктраИзмеренийЗатрат.Вставить("СчетУчета",	?(СтруктураИзмерений.СчетУчета
							И НЕ ИспользоватьОпределениеСчетовПриПроведенииДокументов,"КлючАналитикаВидаУчета.СчетУчета","""Не используется"""));
		СтруктраИзмеренийЗатрат.Вставить("Склад",		?(СтруктураИзмерений.Склад,"КлючАналитикаВидаУчета.Склад","""Не используется"""));
		
		СтруктраИзмеренийЗатрат.Вставить("Номенклатура", 				?(СтруктураИзмерений.Затрата,"КлючАналитикаУчетаЗатрат.Затрата","""Не используется"""));
		СтруктраИзмеренийЗатрат.Вставить("ХарактеристикаНоменклатуры", 	?(СтруктураИзмерений.ХарактеристикаЗатраты,"КлючАналитикаУчетаЗатрат.ХарактеристикаЗатраты","""Не используется"""));
		СтруктраИзмеренийЗатрат.Вставить("СерияНоменклатуры", 			?(СтруктураИзмерений.СерияЗатраты,"КлючАналитикаУчетаЗатрат.СерияЗатраты","""Не используется"""));
		СтруктраИзмеренийЗатрат.Вставить("Качество", 					?(СтруктураИзмерений.Качество,"КлючАналитикаУчетаЗатрат.Качество","""Не используется"""));
		
		СтруктраИзмеренийЗатрат.Вставить("СтатусПартии", ?(СтруктураИзмерений.СтатусПартии,"КлючАналитикаУчетаПартий.СтатусПартии","""Не используется"""));
		
		//Добавим только те поля и группировки, которые используются в основном запросе
		СписокПолей = "";
		СписокГруппировок = "";
		Для Каждого ТекущееИзмерение Из СтруктраИзмеренийЗатрат Цикл
			Если Найти(Запрос.Текст,"ТаблицаСебестоимостиОбороты." + ТекущееИзмерение.Ключ) <> 0 Тогда
				
				Если ТекущееИзмерение.Ключ = "СерияНоменклатуры" Тогда
					ТекущееПоле	= "ВЫБОР КОГДА " + СтруктраИзмеренийЗатрат.Номенклатура + ".ВестиПартионныйУчетПоСериям 
					|	ТОГДА " + ТекущееИзмерение.Значение + "
					|	ИНАЧЕ ""Не используется""
					|	КОНЕЦ";
				Иначе
					ТекущееПоле	= ТекущееИзмерение.Значение;
				КонецЕсли;	
				
				СписокПолей = СписокПолей + ",
				|	" + ТекущееПоле + " КАК " + ТекущееИзмерение.Ключ;
				
				Если ТекущееПоле <> """Не используется""" Тогда
					СписокГруппировок = СписокГруппировок + ",
					|	" + ТекущееПоле;
				КонецЕсли;	
			КонецЕсли;
		КонецЦИкла;	
				
		ТекстЗапросаПоЗатратам = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                         |	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		                         |	СУММА(ВложенныйЗапрос.Стоимость*&КоэффициентПересчетаВВалюту) КАК Стоимость,
								 |	ВложенныйЗапрос.Регистратор" + СписокПолей + "
		                         |ПОМЕСТИТЬ ТаблицаСебестоимостиОбороты
		                         |ИЗ
		                         |	(ВЫБРАТЬ
		                         |		УчетЗатрат.АналитикаВидаУчета КАК АналитикаВидаУчета,
		                         |		УчетЗатрат.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
		                         |		УчетЗатрат.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
		                         |		УчетЗатрат.АналитикаРаспределенияЗатрат КАК АналитикаРаспределенияЗатрат,
		                         |		СУММА(УчетЗатрат.Количество) КАК Количество,
		                         |		СУММА(ВЫБОР КОГДА УчетЗатратОбороты.КоличествоРасход = 0
								 |			ТОГДА 0
								 |			ИНАЧЕ УчетЗатрат.Количество*УчетЗатратОбороты.СтоимостьРасход/УчетЗатратОбороты.КоличествоРасход
								 |			КОНЕЦ) КАК Стоимость,
		                         |		УчетЗатрат.Регистратор КАК Регистратор
		                         |	ИЗ
		                         |		РегистрНакопления." + ИмяРегистра + " КАК УчетЗатрат
		                         |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления." + ИмяРегистра + ".Обороты(&НачалоМесяца, &КонецМесяца, , ) КАК УчетЗатратОбороты
		                         |			ПО УчетЗатрат.АналитикаВидаУчета = УчетЗатратОбороты.АналитикаВидаУчета
		                         |				И УчетЗатрат.АналитикаУчетаЗатрат = УчетЗатратОбороты.АналитикаУчетаЗатрат
		                         |				И УчетЗатрат.АналитикаУчетаПартий = УчетЗатратОбороты.АналитикаУчетаПартий
		                         |				И УчетЗатрат.АналитикаРаспределенияЗатрат = УчетЗатратОбороты.АналитикаРаспределенияЗатрат
		                         |	ГДЕ
		                         |		УчетЗатрат.Регистратор = &Регистратор
								 |		И УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		                         |	
		                         |	СГРУППИРОВАТЬ ПО
		                         |		УчетЗатрат.АналитикаВидаУчета,
		                         |		УчетЗатрат.АналитикаУчетаЗатрат,
		                         |		УчетЗатрат.АналитикаУчетаПартий,
		                         |		УчетЗатрат.АналитикаРаспределенияЗатрат,
		                         |		УчетЗатрат.Регистратор) КАК ВложенныйЗапрос
		                         |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК КлючАналитикаВидаУчета
		                         |		ПО ВложенныйЗапрос.АналитикаВидаУчета = КлючАналитикаВидаУчета.Ссылка
		                         |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК КлючАналитикаУчетаЗатрат
		                         |		ПО ВложенныйЗапрос.АналитикаУчетаЗатрат = КлючАналитикаУчетаЗатрат.Ссылка
		                         |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК КлючАналитикаУчетаПартий
		                         |		ПО ВложенныйЗапрос.АналитикаУчетаПартий = КлючАналитикаУчетаПартий.Ссылка
		                         |
		                         |СГРУППИРОВАТЬ ПО
		                         |	ВложенныйЗапрос.Регистратор" + СписокГруппировок;
		
									 
	КонецЕсли;
	
	Если ТекстЗапросаПоЗатратам <> "" Тогда
	
		Запрос.Текст = ТекстЗапросаПоЗатратам + "
		|;
		|" + Запрос.Текст;
	КонецЕсли;	
	
		
КонецПроцедуры	

// Процедура - 	дополняет запрос информацией о затратах по данным партионного учета
// Параметры:
//  ДокументСсылка - ссылка на документ,
//  Запрос - запрос, который нужно дополнять,
//  ВидУчета - строка, содержащую "Упр" для упр. учета и "Регл" для регламентированного учета,
//  КоэффициентПересчетаВВалюту - число, коэффициент предназначен для пересчета из валюты упр. учета в валюту регл. учета
//
Процедура ДополнитьЗапросЗатратамиПартионныйУчет(ДокументСсылка, Запрос, ВидУчета, КоэффициентПересчетаВВалюту)
	
	ИспользоватьОпределениеСчетовПриПроведенииДокументов = СчетаУчетаВДокументах.ИспользоватьОпределениеСчетовПриПроведенииДокументов(ДокументСсылка.Дата);
	
	ТекстЗапросаПоЗатратам = "";
	
	Если ВидУчета = "Упр" Тогда
		ИмяРегистра = "ПартииТоваровНаСкладах";
	Иначе
		ИмяРегистра = "ПартииТоваровНаСкладахБухгалтерскийУчет";
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалюту", КоэффициентПересчетаВВалюту);	
	
	Если Найти(Запрос.Текст,"ТаблицаСебестоимостиОбороты") <> 0 Тогда
		
		МассивИзмеренийЗатрат = Новый Массив();
		МассивИзмеренийЗатрат.Добавить("Организация");
		МассивИзмеренийЗатрат.Добавить("Номенклатура");
		МассивИзмеренийЗатрат.Добавить("СчетУчета");
		МассивИзмеренийЗатрат.Добавить("Склад");
		МассивИзмеренийЗатрат.Добавить("ДокументОприходования");
		МассивИзмеренийЗатрат.Добавить("ХарактеристикаНоменклатуры");
		МассивИзмеренийЗатрат.Добавить("СерияНоменклатуры");
		МассивИзмеренийЗатрат.Добавить("Заказ");
		МассивИзмеренийЗатрат.Добавить("Качество");
		МассивИзмеренийЗатрат.Добавить("СтатусПартии");
		
		//Добавим только те поля и группировки, которые используются в основном запросе
		СписокПолей = "";
		СписокГруппировок = "";
		Для Каждого ТекущееИзмерение Из МассивИзмеренийЗатрат Цикл
			
			Если (Найти(Запрос.Текст,"ТаблицаСебестоимостиОбороты." + ТекущееИзмерение) <> 0) Тогда
				Если Метаданные.РегистрыНакопления[ИмяРегистра].Измерения.Найти(ТекущееИзмерение) = Неопределено Тогда
					//В данном регистре такого измерения нет
					ТекущееПоле = """Не используется""";
				Иначе	
					Если ТекущееИзмерение = "СерияНоменклатуры" Тогда
						ТекущееПоле = "ВЫБОР КОГДА ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям 
						|	ТОГДА ПартииТоваровНаСкладах.СерияНоменклатуры
						|	ИНАЧЕ ""Не используется""
						|	КОНЕЦ";
					ИначеЕсли ТекущееИзмерение = "СчетУчета"
					  И ((ВидУчета = "Упр")
					    ИЛИ (ИспользоватьОпределениеСчетовПриПроведенииДокументов)) Тогда
						
						ТекущееПоле = """Не используется""";
						
					Иначе	
						ТекущееПоле = "ПартииТоваровНаСкладах." + ТекущееИзмерение;
					КонецЕсли;	
				КонецЕсли;	
				
				СписокПолей = СписокПолей + ",
				|	" + ТекущееПоле + " КАК " + ТекущееИзмерение;
				
				
				СписокГруппировок = СписокГруппировок + ",
				|	"+ ТекущееПоле;
				
			КонецЕсли;
		КонецЦИкла;	
			
		ТекстЗапросаПоЗатратам = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                         |	СУММА(ПартииТоваровНаСкладах.Количество) КАК Количество,
		                         |	СУММА(ПартииТоваровНаСкладах.Стоимость*&КоэффициентПересчетаВВалюту) КАК Стоимость,
								 |	ПартииТоваровНаСкладах.Регистратор" + СписокПолей + " 
		                         |ПОМЕСТИТЬ ТаблицаСебестоимостиОбороты
		                         |ИЗ
		                         |	РегистрНакопления." + ИмяРегистра + " КАК ПартииТоваровНаСкладах
		                         |ГДЕ
		                         |	ПартииТоваровНаСкладах.Регистратор = &Регистратор
								 |	И ПартииТоваровНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		                         |
		                         |СГРУППИРОВАТЬ ПО
								 |	ПартииТоваровНаСкладах.Регистратор" + СписокГруппировок;
								 
	КонецЕсли;
	
	Если ТекстЗапросаПоЗатратам <> "" Тогда
	
		Запрос.Текст = ТекстЗапросаПоЗатратам + "
		|;
		|" + Запрос.Текст;
	КонецЕсли;	
		
КонецПроцедуры	

// Процедура - 	дополняет запрос информацией о затратах по типу цен
// Параметры:
//  ДокументСсылка - ссылка на документ,
//  Запрос - запрос, который нужно дополнять,
//  ТипЦен - тип цен из которого нужно получать себестоимость.
//
Процедура ДополнитьЗапросЗатратамиПоТипуЦен(ДокументСсылка, Запрос, ТипЦен)
	
	ТекстЗапросаПоЗатратам = "";
	
	Запрос.УстановитьПараметр("ТипЦен",ТипЦен);
	Запрос.УстановитьПараметр("Дата", ДокументСсылка.Дата);
	
	Если Найти(Запрос.Текст,"ТаблицаСебестоимостиОбороты") <> 0 Тогда
		
		ТекстЗапросаПоЗатратам = "ВЫБРАТЬ
						|			ЦеныНоменклатуры.Номенклатура,
						|			ЦеныНоменклатуры.ХарактеристикаНоменклатуры,
						|			(ЦеныНоменклатуры.Цена 
						|			* ЕСТЬNULL(КурсыВалют.Курс, 0)
						|			* (ВЫБОР КОГДА ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL 
						|					ИЛИ ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент = 0 ТОГДА
						|				1
						|			ИНАЧЕ
						|				ЦеныНоменклатуры.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / 
						|				ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент
						|			КОНЕЦ)
						|			* ЕСТЬNULL(КурсВалютыУчета.Кратность, 1)
						|			/ ( ЕСТЬNULL(КурсВалютыУчета.Курс, 1)
						|				* (ВЫБОР КОГДА КурсыВалют.Кратность ЕСТЬ NULL ИЛИ КурсыВалют.Кратность = 0 Тогда
						|					1
						|				ИНАЧЕ 
						|					КурсыВалют.Кратность
						|				КОНЕЦ) 
						|				)
						|			) КАК Стоимость,
						|			1 КАК Количество,
						|			&Регистратор КАК Регистратор,
						|			""Не используется"" КАК СерияНоменклатуры,
						|			""Не используется"" КАК Качество,
						|			""Не используется"" КАК СчетУчета
						|ПОМЕСТИТЬ ТаблицаСебестоимостиОбороты
						|			ИЗ
						|				РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата,
						|					ТипЦен = &ТипЦен) КАК ЦеныНоменклатуры
						|				
						|				ЛЕВОЕ СОЕДИНЕНИЕ
						|					РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалют
						|				ПО 
						|					КурсыВалют.Валюта = ЦеныНоменклатуры.Валюта
						|				
						|				ЛЕВОЕ СОЕДИНЕНИЕ
						|					РегистрСведений.КурсыВалют.СрезПоследних(&Дата, 
						|						ВАЛЮТА В (
						|							ВЫБРАТЬ
						|								Константы.ВалютаРегламентированногоУчета
						|							ИЗ
						|								Константы КАК Константы
						|							)
						|						) КАК КурсВалютыУчета
						|				ПО ИСТИНА";
		
	КонецЕсли;
	
	Если ТекстЗапросаПоЗатратам <> "" Тогда
	
		Запрос.Текст = ТекстЗапросаПоЗатратам + "
		|;
		|" + Запрос.Текст;
	КонецЕсли;	
		
КонецПроцедуры

// Функция возвращает таблицу для обработок заполнения и печатных форм дополненную информацией о себестоимости 
//
// Параметры:
//  ДокументСсылка - ссылка на документ,
//  ТекстЗапроса - текст запроса получающего данные для обработки заполнения или печатной формы,
//  СтруктраПараметров - структура, содержащая параметры запроса
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит результат выполнения переданного запроса
//
Функция ПолучитьТаблицуЗатратДляПечатиИЗаполненияДокументов(ДокументСсылка, ТекстЗапроса, СтруктраПараметров) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого ТекущийПараметр Из СтруктраПараметров Цикл
		Запрос.УстановитьПараметр(ТекущийПараметр.Ключ, ТекущийПараметр.Значение);
	КонецЦикла;	
	
	СпособРасчета = ПолучитьСпособРасчетаСебестоимостиВФормах(ДокументСсылка.Дата, ДокументСсылка.Организация);
	Если ТипЗНЧ(СпособРасчета) = Тип("ПеречислениеСсылка.СпособыРасчетаСебестоимостиВФормах") Тогда
		Если СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиВФормах.ПоДаннымБухгалтерскогоУчета ТОгда
			ВидУчета = "Регл";
			КоэффициентПересчетаВВалюту = 1;
		Иначе
			ВидУчета = "Упр";
			ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
			ВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
			СтруктраКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,ДокументСсылка.Дата); 
			КоэффициентПересчетаВВалюту = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(1, ВалютаУправленческогоУчета,
		                                                 ВалютаРегламентированногоУчета,
		                                                 СтруктраКурса.Курс, СтруктраКурса.Кратность);
			
		КонецЕсли;
		
		Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		  И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ДокументСсылка.Дата) Тогда
			ДополнитьЗапросЗатратамиРасширеннаяАналитика(ДокументСсылка, Запрос, ВидУчета, КоэффициентПересчетаВВалюту);
		Иначе
			ДополнитьЗапросЗатратамиПартионныйУчет(ДокументСсылка, Запрос, ВидУчета, КоэффициентПересчетаВВалюту);
		КонецЕсли;	
	Иначе
		ДополнитьЗапросЗатратамиПоТипуЦен(ДокументСсылка, Запрос, СпособРасчета);
	КонецЕсли;	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРУЮЩИЕ ДВИЖЕНИЯ ПО ПРИНЯТЫМ ТМЦ ДЛЯ РА

// Процедура - 	обработчик подписки на событие
//  Движения - коллекция движений документа.
//
Процедура ПриПроведенииРасширеннаяАналитикаЗапасовУчетПринятыхТМЦОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если ИспользуетсяРасширеннаяАналитикаУчета(Источник.Дата)
	 И Источник.ДополнительныеСвойства.Свойство("СтруктураШапкиДокумента")
	 И Источник.ДополнительныеСвойства.Свойство("СтруктураТабличныхЧастей") Тогда
	
		СтруктураИсточника = Новый Структура();
		СтруктураИсточника.Вставить("мСтруктураШапкиДокумента",Источник.ДополнительныеСвойства.СтруктураШапкиДокумента);
		СтруктураИсточника.Вставить("мСтруктураТабличныхЧастей",Источник.ДополнительныеСвойства.СтруктураТабличныхЧастей);
		СтруктураИсточника.Вставить("Ссылка",Источник.Ссылка);
		СтруктураИсточника.Вставить("Дата",Источник.Дата);
		
		СтруктураИсточника.Вставить("ОтражатьВУправленческомУчете", Истина);
		СтруктураИсточника.Вставить("ОтражатьВБухгалтерскомУчете",Ложь);
		
		ЗаполнитьЗначенияСвойств(СтруктураИсточника, Источник);
		
		Если Источник.Движения.Хозрасчетный.Модифицированность() Тогда
			Источник.Движения.Хозрасчетный.Записать(Ложь);
		КонецЕсли;	
		Если Источник.Движения.Налоговый.Модифицированность() Тогда
			Источник.Движения.Налоговый.Записать(Ложь);
		КонецЕсли;	
		
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоУчетуПринятыхТМЦ(СтруктураИсточника, Отказ, РежимПроведения);	
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, КопироватьТаблицу = Ложь) Экспорт
	Если ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата) Тогда
		Если КопироватьТаблицу Тогда
			Возврат ТаблицаПоТоварам.Скопировать(ТаблицаПоТоварам.НайтиСтроки(Новый Структура("ПринадлежностьНоменклатуры", Перечисления.ПринадлежностьНоменклатуры.ПустаяСсылка())));
		Иначе	
			Возврат ТаблицаПоТоварам.НайтиСтроки(Новый Структура("ПринадлежностьНоменклатуры", Перечисления.ПринадлежностьНоменклатуры.ПустаяСсылка()));
		КонецЕсли;	
	Иначе
		Если КопироватьТаблицу Тогда
			Возврат ТаблицаПоТоварам.Скопировать();
		Иначе	
			Возврат ТаблицаПоТоварам;
		КонецЕсли;	
	КонецЕсли;	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура контролирует лимиты возвратной тары, передаваемой покупателю по переданному документу
// и его табличной части. В случае превышения лимита выставляется флаг отказа и выдается сообщение.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  СтруктураШапкиДокумента - структура, содержащая значения "через точку" ссылочных реквизитов по шапке документа,
//  Отказ             - флаг отказа в проведении,
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура КонтрольЛимитовВозвратнойТарыПоставщика(ДокументОбъект, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	ИмяТабличнойЧасти  = "ВозвратнаяТара";
	Если ДокументОбъект.ВозвратнаяТара.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДокумента       = ДокументОбъект.Метаданные().Имя;
	ИмяТаблицы         = ИмяДокумента + "." + СокрЛП(ИмяТабличнойЧасти);

	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ
	|	Документ." + ИмяТаблицы +"
	|ГДЕ Ссылка = &ДокументСсылка";


	Запрос = Новый Запрос;

	// Установим параметры запроса
	//Ссылка извлекается из ДокументОбъект
	//Значение СтрукрураШапкиДокумента.Ссылка использовать нельзя, 
	//	т.к. для документа КорректировкаЗаказаПоставщику там хранится ссылка на корректируемый заказ
	Запрос.УстановитьПараметр("ДокументСсылка",          ДокументОбъект.Ссылка);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента",   СтруктураШапкиДокумента.ДоговорКонтрагента); 
	
	Запрос.УстановитьПараметр("СтатусПолучения",         Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);

	Запрос.Текст = "
	|ВЫБРАТЬ // Запрос, контролирующий остатки на складах
	|	Док.Номенклатура.Представление                         КАК НоменклатураПредставление,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков			   КАК ЕдиницаХраненияОстатков,
	|	СУММА(Док.Количество)                                  КАК ДокументКоличество, 
	|	ЕСТЬNULL(МАКСИМУМ(Остатки.КоличествоОстаток), 0)       КАК ОстатокКоличество,
	|	МИНИМУМ(Лимиты.ЛимитПоставщика)                        КАК Лимит 
	|   
	|ИЗ 
	|	Документ." + ИмяТаблицы + " КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПолученные.Остатки(,
	|		Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ")
	|	И ДоговорКонтрагента = &ДоговорКонтрагента
	|	И СтатусПолучения       = &СтатусПолучения
	|	) КАК Остатки
	|ПО 
	|	Док.Номенклатура        = Остатки.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЛимитыВозвратнойТары.СрезПоследних(,
	|		Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ")
	|	И ДоговорКонтрагента = &ДоговорКонтрагента
	|	) КАК Лимиты
	|ПО 
	|	Док.Номенклатура                = Лимиты.Номенклатура
	|
	|ГДЕ
	|	Док.Ссылка  =  &ДокументСсылка
	|	И Док.Количество > 0
	|	И НЕ Лимиты.ЛимитПоставщика ЕСТЬ NULL
	|	И Лимиты.ЛимитПоставщика > 0
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	Док.Номенклатура
	|
	|ИМЕЮЩИЕ ЕСТЬNULL(МАКСИМУМ(Остатки.КоличествоОстаток), 0) + СУММА(Док.Количество) > МИНИМУМ(Лимиты.ЛимитПоставщика)
	|
	|ДЛЯ ИЗМЕНЕНИЯ РегистрНакопления.ТоварыПолученные.Остатки // Блокирующие чтение таблицы остатков регистра для разрешения коллизий многопользовательской работы
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаСообщения = "По " + 
		ПредставлениеНоменклатуры(Выборка.НоменклатураПредставление, "", "") +
		" по договору """ + СокрЛП(СтруктураШапкиДокумента.ДоговорКонтрагента) + """ превышен лимит возвратной тары.";

		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения + Символы.ПС + Символы.Таб +
						   "Лимит " + (Выборка.Лимит) + " " + Выборка.ЕдиницаХраненияОстатков +
						   "; Получено ранее " + Выборка.ОстатокКоличество + " " + Выборка.ЕдиницаХраненияОстатков +
						   "; Заказано " + Выборка.ДокументКоличество + " " + Выборка.ЕдиницаХраненияОстатков, Ложь);

	КонецЦикла;

КонецПроцедуры // КонтрольЛимитовВозвратнойТарыПоставщика()

Функция ОпределитьДоступностьРеквизитаДокументПоступленияВВозвратах(ДокументОбъект) Экспорт
	Если ДокументОбъект.ОтражатьВУправленческомУчете Тогда
		УчетнаяПолитикаУпр = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(ДокументОбъект.Дата, Ложь);
		Если ЗначениеЗаполнено(УчетнаяПолитикаУпр)
		И УчетнаяПолитикаУпр.СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументОбъект.ОтражатьВБухгалтерскомУчете Тогда
		УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДокументОбъект.Дата, ДокументОбъект.Организация, Ложь);
		Если ЗначениеЗаполнено(УчетнаяПолитикаРегл)
		  И УчетнаяПолитикаРегл.СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции	

Процедура ПриПроведенииРасширеннаяАналитикаЗапасовИзменениеСостоянияОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если ИспользуетсяРасширеннаяАналитикаУчета(Источник.Дата)
	 И Источник.ДополнительныеСвойства.Свойство("СтруктураШапкиДокумента")
	 И Источник.ДополнительныеСвойства.Свойство("СтруктураТабличныхЧастей") Тогда
	
		СтруктураИсточника = Новый Структура();
		СтруктураИсточника.Вставить("мСтруктураШапкиДокумента",Источник.ДополнительныеСвойства.СтруктураШапкиДокумента);
		СтруктураИсточника.Вставить("мСтруктураТабличныхЧастей",Источник.ДополнительныеСвойства.СтруктураТабличныхЧастей);
		СтруктураИсточника.Вставить("Ссылка",Источник.Ссылка);
		СтруктураИсточника.Вставить("Дата",Источник.Дата);
		
		СтруктураИсточника.Вставить("ОтражатьВУправленческомУчете", Истина);
		СтруктураИсточника.Вставить("ОтражатьВБухгалтерскомУчете",Ложь);
		
		ЗаполнитьЗначенияСвойств(СтруктураИсточника, Источник);
		
		ТипДокумента = ТипЗНЧ(Источник.Ссылка);
		
		Если ОтложенноеПроведениеДокументов.ИспользуетсяОтложенноеПроведение(Источник.ДополнительныеСвойства.СтруктураШапкиДокумента)
		 И Источник.ДополнительныеСвойства.Свойство("ЭтапПроведения") Тогда
		 	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			  ИЛИ ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				//Для документов ПоступлениеТоваровУслуг и АвансовыйОтчет формируем движения по затратам при обычном проведении и не формируем при допроведении 
			Иначе 
				Если Источник.ДополнительныеСвойства.ЭтапПроведения = "Проведение" Тогда
					//документ поддерживает отложенное проведение, и проводится пользователем в обычном режиме (т.е. только по УУ)
					//движения по затратам не формируем
					Возврат;
				ИначеЕсли Источник.ДополнительныеСвойства.ЭтапПроведения = "Допроведение" ТОгда
					//документ допроводится
					СтруктураИсточника.мСтруктураШапкиДокумента.ОтражатьВУправленческомУчете = Источник.ОтражатьВУправленческомУчете;
				КонецЕсли;	
			КонецЕсли;	
        КонецЕсли;
		
		#Если Сервер Тогда

			СтруктураИсточника.Вставить("Движения",Источник.Движения);
				
		#Иначе
				
			СтруктураИсточника.Вставить("Движения",Новый Структура());
			
		#КонецЕсли
		
		УправлениеЗапасамиРасширеннаяаналитика.РасширеннаяАналитикаЗапасовИзменениеСостояния(СтруктураИсточника, Отказ, РежимПроведения);
	КонецЕсли;	

КонецПроцедуры

// Функция определяет применяется ли для документа расширенная аналитика
//
// Параметры:
//  ДатаДокумента - дата документа
//
// Возвращаемое значение:
//  Булево - Истина, если расширенная аналитика применяется
//
Функция ИспользуетсяРасширеннаяАналитикаУчета(ДатаДокумента=Неопределено) Экспорт
	Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И ((НЕ ЗначениеЗаполнено(ДатаДокумента))
		  ИЛИ (НачалоДня(глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат"))<=НачалоДня(ДатаДокумента))) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции //ИспользуетсяРасширеннаяАналитикаУчета()	

// Функция определяет используется ли управленческий учет затрат
// 
// Возвращаемое значение: булево
Функция ИспользуетсяУправленческийУчетЗатрат() Экспорт
	
	Возврат глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет;
	
КонецФункции

// Процедура - обработчик события ПриЗаписи для документов которые не имеет смысл проводить по упр. учету для некоторых режимов расширенной аналитики
//
Процедура ПриЗаписиДокументовПоУпрУчетуРАПриЗаписи(Источник, Отказ) Экспорт
	Если НЕ Источник.ОбменДанными.Загрузка Тогда
		Если ИспользуетсяРасширеннаяАналитикаУчета(Источник.Дата) Тогда
			РежимРА = глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");
			Если РежимРА = Перечисления.РежимыИспользованияРасширеннойАналитики.РегламентированныйУчет
			  ИЛИ РежимРА = Перечисления.РежимыИспользованияРасширеннойАналитики.РегламентированныйУчетСДополнительнойАналитикой Тогда
				Если (ТипЗНЧ(Источник.Ссылка) = Тип("ДокументСсылка.ОтражениеЗарплатыВУпрУчете")
				  ИЛИ (Источник.ОтражатьВУправленческомУчете
				  	И (НЕ Источник.ОтражатьВБухгалтерскомУчете)))
				  И Источник.Проведен Тогда  
					
					Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Источник);
				    				  
				    ОбщегоНазначения.Сообщение(Заголовок + "
					|Установлен режим использования расширенной аналитики: " + РежимРА + ".
					|Для этого режима не имеет смысл проводить документы """ + Источник.Метаданные().Синоним + """ только по управленческому учету",СтатусСообщения.Внимание);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
	
// Проверяет, что в табличной части нет бланков строгого учета.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетБланковСтрогогоУчета(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	Если (НЕ ТаблицаЗначений = Неопределено) И (ТаблицаЗначений.Количество() > 0) Тогда

		// Цикл по строкам таблицы значений.
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
                                                              
			Если ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
			   И НЕ СтрокаТаблицы.Номенклатура.Пустая()	
			   И  СтрокаТаблицы.Номенклатура.ВидНоменклатуры.БланкСтрогогоУчета Тогда

				ТекстОшибки = НСтр("ru = 'В строке номер ""%НомерСтроки%"" табличной части ""%ПредставлениеТабличнойЧасти%"": содержится бланк строгого учета. Бланков строгого учета здесь быть не должно!'");
					 
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
					 
				ТекстПоля = ОбщегоНазначенияКлиентСервер.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "Номенклатура");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, ТекстПоля,, Отказ);

			КонецЕсли;

		КонецЦикла;
		
	Иначе		
		
		// Цикл по строкам табличной части документа.
		Для каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
               И НЕ СтрокаТаблицы.Номенклатура.Пустая()
			   И  СтрокаТаблицы.Номенклатура.ВидНоменклатуры.БланкСтрогогоУчета Тогда

				ТекстОшибки = НСтр("ru = 'В строке номер ""%НомерСтроки%"" табличной части ""%ПредставлениеТабличнойЧасти%"": содержится бланк строгого учета. Бланков строгого учета здесь быть не должно!'");
					 
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
				
				ТекстПоля = ОбщегоНазначенияКлиентСервер.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "Номенклатура");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, ТекстПоля,, Отказ);

			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЧтоНетБланковСтрогогоУчета()

// Проверяет, что в табличной части нет НЕ бланков строгого учета.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетНЕБланковСтрогогоУчета(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	Если (НЕ ТаблицаЗначений = Неопределено) И (ТаблицаЗначений.Количество() > 0) Тогда
		
		// Цикл по строкам таблицы значений.
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

			СтрокаНачалаСообщенияОбОшибке = Локализация.СтрШаблон("В строке номер ""¤1¤"" табличной части ""¤2¤"": ", СокрЛП(СтрокаТаблицы.НомерСтроки), ПредставлениеТабличнойЧасти);

			Если ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
			   И НЕ СтрокаТаблицы.Номенклатура.Пустая()
			   И Не СтрокаТаблицы.Номенклатура.ВидНоменклатуры.БланкСтрогогоУчета Тогда

				ТекстОшибки = НСтр("ru = 'В строке номер ""%НомерСтроки%"" табличной части ""%ПредставлениеТабличнойЧасти%"": содержится номенклатура, не являющаяся бланком строгого учета. Здесь могут быть только бланки строгого учета!'");
					 
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
					 
				ТекстПоля = ОбщегоНазначенияКлиентСервер.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "Номенклатура");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, ТекстПоля,, Отказ);

			КонецЕсли;
			
		КонецЦикла;
		
	Иначе		
		
		// Цикл по строкам табличной части документа.
		Для каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
			   И НЕ СтрокаТаблицы.Номенклатура.Пустая() 
			   И Не СтрокаТаблицы.Номенклатура.ВидНоменклатуры.БланкСтрогогоУчета Тогда

				ТекстОшибки = НСтр("ru = 'В строке номер ""%НомерСтроки%"" табличной части ""%ПредставлениеТабличнойЧасти%"": содержится номенклатура, не являющаяся бланком строгого учета. Здесь могут быть только бланки строгого учета!'");
					 
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
				
				ТекстПоля = ОбщегоНазначенияКлиентСервер.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТабличнойЧасти, СтрокаТаблицы.НомерСтроки, "Номенклатура");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, ТекстПоля,, Отказ);

			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ НАЧАЛЬНЫХ ОСТАТКОВ РЕГИСТРА ТоварыОрганизацийРегл

// Функция заполняет регистр ТоварыОрганизацийРегл данными регистров-оснований на дату
// Начальные остатки регистра ТоварыОрганизацийРегл записываются документом "Корректировка записей регистров"
//
// Возвращаемое значение:
//	<булево> - Ложь, если возникла ошибка, иначе Истина
//
Функция ЗаполнитьРегистрТоварыОрганизацийРеглНаНачалоПериода(НачалоПериода)

	// Остатки берем на конец предыдущего дня
	ДатаОстатков = КонецДня(НачалоПериода - 1);
	
	// Изменим дату начала, чтобы выполнить движения
	// при выходе из функции восстановим ее
	МенеджерЗаписиДатаНачала = Константы.ДатаНачалаИспользованияРегистраТоварыОрганизацийРегл.СоздатьМенеджерЗначения();
	МенеджерЗаписиДатаНачала.Прочитать();
	ДатаНачалаТекущееЗначение = МенеджерЗаписиДатаНачала.Значение;
	МенеджерЗаписиДатаНачала.Значение = ДатаОстатков;
	МенеджерЗаписиДатаНачала.Записать();
	
	ДокОбъект = Неопределено;
	
	ЕстьДвижения            = Ложь;
	ОшибкаПриЗаписиДвижений = Ложь;
	
	
	Если ИспользуетсяРасширеннаяАналитикаУчета(НачалоПериода) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьЗапросОстаткиРАУЗ();
		Запрос.УстановитьПараметр("ГраницаПериода", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
		
		ТаблицаОстатков = ОбработатьТаблицуОстатковРАУЗ(Запрос.Выполнить().Выгрузить());
		
	Иначе	
	
		Запрос = Новый Запрос;
		
		Запрос.Текст = ПолучитьЗапросОстаткиТрадиционныйУчет();
		
		Запрос.УстановитьПараметр("ГраницаПериода", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);
		Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
		
		ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;	
	
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		ЕстьДвижения            = Истина;
		
		// Создадим и запишем документ КорректировкаЗаписейРегистров
		
		ДокументКорректировкиЗаписейРегистров = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
		ДокументКорректировкиЗаписейРегистров.Дата = ДатаОстатков;
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументКорректировкиЗаписейРегистров);
		ДокументКорректировкиЗаписейРегистров.Комментарий = "Ввод остатков по регистру ""Товары организаций (регл)""";
		
		НоваяСтрока = ДокументКорректировкиЗаписейРегистров.ТаблицаРегистровНакопления.Добавить();
		НоваяСтрока.Имя = "ТоварыОрганизацийРегл";
		НоваяСтрока.Представление = "Товары организаций (регл)"; 
		
		ДокументКорректировкиЗаписейРегистров.Записать(РежимЗаписиДокумента.Запись);
		
		НаборТоварыОрганизацийРегл = РегистрыНакопления.ТоварыОрганизацийРегл.СоздатьНаборЗаписей();
		НаборТоварыОрганизацийРегл.Отбор.Регистратор.Установить(ДокументКорректировкиЗаписейРегистров.Ссылка);
		
		ТаблицаДвижений = НаборТоварыОрганизацийРегл.ВыгрузитьКолонки();

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОстатков, ТаблицаДвижений);
		
		НаборТоварыОрганизацийРегл.мПериод            = ДатаОстатков;
		НаборТоварыОрганизацийРегл.мТаблицаДвижений   = ТаблицаДвижений;

		НаборТоварыОрганизацийРегл.ВыполнитьПриход();
		
		ОшибкаПриЗаписиДвижений = Ложь;
		
		Попытка
			НаборТоварыОрганизацийРегл.Записать(Ложь);
		Исключение
			ОшибкаПриЗаписиДвижений = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки()); 
			ВызватьИсключение "Операция не выполнена";
		КонецПопытки;	
		
		Если ОшибкаПриЗаписиДвижений Тогда
			
			ДокументКорректировкиЗаписейРегистров.Удалить();
			
			МенеджерЗаписиДатаНачала.Значение = ДатаНачалаТекущееЗначение;
			МенеджерЗаписиДатаНачала.Записать();
			
			Возврат Ложь;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ЕстьДвижения Тогда
		ОбщегоНазначения.СообщитьОСостоянииИзмененияНастройки("Использовать регистр ТоварыОрганизацийРегл", "Сформированы начальные остатки по регистру ""Товары организаций (регл)""", "на дату: " + НачалоПериода + ", документ: " + ДокументКорректировкиЗаписейРегистров.Ссылка, 1);
	КонецЕсли;
	
	МенеджерЗаписиДатаНачала.Значение = ДатаНачалаТекущееЗначение;
	МенеджерЗаписиДатаНачала.Записать();
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьРегистрТоварыОрганизацийРеглНаНачалоПериода

Функция ЗаполнитьРегистрТоварыОрганизацийРегл(ДатаНачала, ВыполнятьВТранзакции = Ложь) Экспорт

	Если ДатаНачала = '000101010000' Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	РегистрыНакопления.ТоварыОрганизацийРегл.УстановитьИспользованиеИтогов(Ложь);
	
	ТранзакцияОткрыта = Ложь;
	Если ВыполнятьВТранзакции И НЕ ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ТранзакцияОткрыта = Истина;
	КонецЕсли; 
	
	Если НЕ ЗаполнитьРегистрТоварыОрганизацийРеглНаНачалоПериода(ДатаНачала) Тогда
		// Если при выполнении функции произошли ошибки - отменим транзакцию
		Если ТранзакцияОткрыта Тогда
			ОтменитьТранзакцию();
		КонецЕсли;	
		РегистрыНакопления.ТоварыОрганизацийРегл.УстановитьИспользованиеИтогов(Истина);
		Возврат Ложь;
	КонецЕсли;
	
	// При установке признака использования итогов производится пересчет всех итогов
	Если ТранзакцияОткрыта Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
	РегистрыНакопления.ТоварыОрганизацийРегл.УстановитьИспользованиеИтогов(Истина);

	Возврат Истина;
	
КонецФункции // ЗаполнитьРегистрТоварыОрганизацийРегл

// Функция формирует текст запроса по регистрам "Партии товаров на складах", "Партии товаров переданные".
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросОстаткиТрадиционныйУчет()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	0 КАК РазделУчета,	
	|	Организация КАК Организация,
	|	Номенклатура КАК Номенклатура,
	|	&ПустойКонтрагент КАК Комиссионер,
	|	ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры КАК СерияНоменклатуры,
	|	Качество КАК Качество,
	|	Склад КАК Склад,
	|	СчетУчета КАК СчетУчетаБУ,
	|	СчетУчета.Забалансовый КАК Забалансовый,
	|	НалоговоеНазначение КАК НалоговоеНазначение,
	|
	|	КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(&ГраницаПериода,
	|	) КАК ПартииТоваровНаСкладах
	|
	|ОБЪЕДИНИТЬ ВСЕ
 	|
	|ВЫБРАТЬ
	|	1 КАК РазделУчета,	
	|	Организация КАК Организация,
	|	Номенклатура КАК Номенклатура,
	|	ДоговорКонтрагента.Владелец КАК Комиссионер,
	|	ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	&ПустаяСерия КАК СерияНоменклатуры,
	|	&КачествоНовый КАК Качество,
	|	&ПустойСклад КАК Склад,
	|	СчетУчета КАК СчетУчетаБУ,
	|	СчетУчета.Забалансовый КАК Забалансовый,
	|	НалоговоеНазначение КАК НалоговоеНазначение,
	|
	|	КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданныеБухгалтерскийУчет.Остатки(&ГраницаПериода,
	|	) КАК ПартииТоваровПереданные
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|
	|	РазделУчета
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросОстаткиТрадиционныйУчет()

// Функция формирует текст запроса по регистрам "Учет затрат (регл) по разделам учета МПЗ, Товары отгруженные
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ПолучитьЗапросОстаткиРАУЗ()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МПЗ) ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК РазделУчета,
	|	РегистрАналитикаВидаУчета.Организация КАК Организация,
	|	РегистрАналитикаУчетаЗатрат.Затрата КАК Номенклатура,
	|	РегистрАналитикаУчетаПартий.Комиссионер КАК Комиссионер,
	|	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК ХарактеристикаНоменклатуры,
	|	РегистрАналитикаУчетаЗатрат.СерияЗатраты КАК СерияНоменклатуры,
	|	РегистрАналитикаУчетаЗатрат.Качество КАК Качество,
	|	РегистрАналитикаВидаУчета.Склад КАК Склад,
	|	РегистрАналитикаВидаУчета.СчетУчета КАК СчетУчетаБУ,
	|	РегистрАналитикаВидаУчета.НалоговоеНазначение КАК НалоговоеНазначение,
	|
	|	СУММА(УчетЗатратРегл.КоличествоНУОстаток) КАК КоличествоНУ,
	|	СУММА(УчетЗатратРегл.КоличествоОстаток) КАК Количество
	|
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл.Остатки(&ГраницаПериода,
	|		АналитикаВидаУчета В (
	|			ВЫБРАТЬ
	|				Ссылка
	|			ИЗ
	|				РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|			ГДЕ
	|				РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МПЗ)
	|				ИЛИ РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ТоварыОтгруженные)
	|			)
	|	) КАК УчетЗатратРегл
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|	ПО
	|   	УчетЗатратРегл.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|	ПО
	|   	УчетЗатратРегл.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	|	ПО
	|   	УчетЗатратРегл.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	ВЫБОР КОГДА РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МПЗ) ТОГДА 0 ИНАЧЕ 1 КОНЕЦ,
	|	РегистрАналитикаВидаУчета.Организация,
	|	РегистрАналитикаУчетаЗатрат.Затрата,
	|	РегистрАналитикаУчетаПартий.Комиссионер,
	|	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты,
	|	РегистрАналитикаУчетаЗатрат.СерияЗатраты,
	|	РегистрАналитикаУчетаЗатрат.Качество,
	|	РегистрАналитикаВидаУчета.Склад,
	|	РегистрАналитикаВидаУчета.СчетУчета,
	|	РегистрАналитикаВидаУчета.НалоговоеНазначение
	|
	|УПОРЯДОЧИТЬ ПО
	|
	|	РазделУчета
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапросОстаткиРАУЗ()

Функция ОбработатьТаблицуОстатковРАУЗ(ТаблицаОстатков)

	ТаблицаРезультат = ТаблицаОстатков.СкопироватьКолонки();
	
	Для Каждого СтрокаОстатки Из ТаблицаОстатков Цикл
		КоличествоТолькоБУ = СтрокаОстатки.Количество - СтрокаОстатки.КоличествоНУ;
		КоличествоБУНУ = СтрокаОстатки.Количество - КоличествоТолькоБУ;
		Если КоличествоБУНУ > 0 Тогда
			СтрокаРезультат  = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаОстатки);
			СтрокаРезультат.Количество = КоличествоБУНУ;
		КонецЕсли;
		Если КоличествоТолькоБУ > 0 Тогда
			СтрокаРезультат  = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаОстатки);
			СтрокаРезультат.Количество = КоличествоТолькоБУ;
			СтрокаРезультат.КоличествоНУ = 0;
			СтрокаРезультат.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЕсли; 
	КонецЦикла; 
	
	
	Возврат ТаблицаРезультат;
	
КонецФункции // ОбработатьТаблицуОстатковРАУЗ()	

