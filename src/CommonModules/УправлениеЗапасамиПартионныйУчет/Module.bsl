// Функция формирует соответствие организации и способа ведения партионного учета по организации.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//
// Возвращаемое значение:
//   Соответствие – Соответствие организации и способа ведения партионного учета по организации
//
Функция ПодготовитьСоответствиеСпособыВеденияПартионногоУчетаПоОрганизациям(СтруктураШапкиДокумента) Экспорт
	
	Соответствие = Новый Соответствие;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат Соответствие;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.ДокументВыпуска.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции КАК ВыпускПродукции
	|	
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.КодОперации <> &ВыпускПродукцииПоФиксированнойСтоимости
	|";
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);
	Запрос.УстановитьПараметр("ВыпускПродукцииПоФиксированнойСтоимости", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СпособВеденияПартионногоУчетаПоОрганизации = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(
				Выборка.Организация,
				СтруктураШапкиДокумента.мНачДата
			);
			Соответствие.Вставить(Выборка.Организация, СпособВеденияПартионногоУчетаПоОрганизации);
			
		КонецЦикла;
		
	КонецЕсли;

	Возврат Соответствие;
	
КонецФункции // ПодготовитьСоответствиеСпособыВеденияПартионногоУчетаПоОрганизациям()

Функция КомиссионныйТовар(СчетУчета) Экспорт

	Комиссионный = Ложь;
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
	     Возврат Ложь;
	КонецЕсли; 
	
	Если ТипЗнч(СчетУчета) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Комиссионный = СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссиюВсего);
		
	ИначеЕсли ТипЗнч(СчетУчета) = Тип("ПланСчетовСсылка.Налоговый") Тогда
		Комиссионный = Ложь;

	КонецЕсли; 
	
	Возврат Комиссионный;

КонецФункции // КомиссионныйТовар()

// Процедура считывает указанный реквизит объекта по ссылке без чтения всего объекта
//
Функция ПрочитатьРеквизитДокумента(ИмяРеквизита, ДокументСсылка)
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка));
		
		Если МетаданныеДокумента <> Неопределено Тогда
			
			Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита)<>Неопределено Тогда
				
				Запрос = Новый Запрос("Выбрать "+ИмяРеквизита+" Из Документ."+МетаданныеДокумента.Имя+" ГДЕ Ссылка = &Ссылка");
				Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					
					Возврат Выборка[ИмяРеквизита];
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСтруктруУчетнойПолитикиДляПроведенияПоПартиям(Упр = Истина, Бух = Истина, Меж = Истина)
	СтруктраУчетнойПолитики = Новый Структура();
	
	Если Упр Тогда
		СтруктраУчетнойПолитики.Вставить("Упр",Новый Структура());
		
		//Параметры необходимые для универсального проведения по партиям (совпадают для всех учетов)
		СтруктраУчетнойПолитики.Упр.Вставить("СпособОценкиМПЗ","УчетнаяПолитика.СпособОценкиМПЗ");
		СтруктраУчетнойПолитики.Упр.Вставить("СписыватьПартииПриПроведенииДокументов","Константы.СписыватьПартииПриПроведенииДокументов");
		СтруктраУчетнойПолитики.Упр.Вставить("ВестиПартионныйУчетПоСкладам","Константы.ВестиПартионныйУчетПоСкладам");
		СтруктраУчетнойПолитики.Упр.Вставить("СтратегияСписанияПоСтатусам","Константы.СтратегияСписанияПартийТоваровПоСтатусам");
		СтруктраУчетнойПолитики.Упр.Вставить("УчетЗатратПоЗаказамНаПроизводство","УчетнаяПолитика.УчетЗатратПоЗаказамНаПроизводство");
		
		//Параметры специфичные для упр. учета
		СтруктраУчетнойПолитики.Упр.Вставить("СпособВеденияПартионногоУчетаПоОрганизации","НастройкаСпособовВеденияУправленческогоПартионногоУчета.СпособВеденияПартионногоУчетаПоОрганизации");
		СтруктраУчетнойПолитики.Упр.Вставить("НеВключатьНДСВСтоимостьПартий","УчетнаяПолитика.НеВключатьНДСВСтоимостьПартий");
	КонецЕсли;
	
	Если Бух Тогда
		//Для Бух учета
		СтруктраУчетнойПолитики.Вставить("Бух",Новый Структура());
		
		//Параметры необходимые для универсального проведения по партиям (совпадают для всех учетов)
		СтруктраУчетнойПолитики.Бух.Вставить("СпособОценкиМПЗ",							"УчетнаяПолитикаОрганизаций.СпособОценкиМПЗ");
		СтруктраУчетнойПолитики.Бух.Вставить("СписыватьПартииПриПроведенииДокументов",	"Константы.СписыватьПартииПриПроведенииДокументовБух");
		СтруктраУчетнойПолитики.Бух.Вставить("ВестиПартионныйУчетПоСкладам",			"Константы.ВестиПартионныйУчетПоСкладамРегл");         
		СтруктраУчетнойПолитики.Бух.Вставить("СтратегияСписанияПоСтатусам",				"Константы.СтратегияСписанияПартийТоваровПоСтатусам");
		СтруктраУчетнойПолитики.Бух.Вставить("УчетЗатратПоЗаказамНаПроизводство",		"УчетнаяПолитикаОрганизаций.УчетЗатратПоЗаказамНаПроизводство");
		
		//Параметры специфичные для нал. учета
		СтруктраУчетнойПолитики.Бух.Вставить("ЕстьНалогНаПрибыль","УчетнаяПолитикаОрганизаций.СхемаНалогообложения.НалогНаПрибыль");
		СтруктраУчетнойПолитики.Бух.Вставить("ЕстьНДС","УчетнаяПолитикаОрганизаций.СхемаНалогообложения.НДС");
	
	КонецЕсли;
		
	Если Меж Тогда
		СтруктраУчетнойПолитики.Вставить("Меж",Новый Структура());
		
		//Параметры необходимые для универсального проведения по партиям (совпадают для всех учетов)
		СтруктраУчетнойПолитики.Меж.Вставить("СпособОценкиМПЗ","УчетнаяПолитикаОрганизаций.СпособОценкиМПЗ");
		СтруктраУчетнойПолитики.Меж.Вставить("ВестиПартионныйУчетПоСкладам","Константы.ВестиПартионныйУчетПоСкладамРегл");
		СтруктраУчетнойПолитики.Меж.Вставить("СтратегияСписанияПоСтатусам","Константы.СтратегияСписанияПартийТоваровПоСтатусам");
		СтруктраУчетнойПолитики.Меж.Вставить("УчетЗатратПоЗаказамНаПроизводство","УчетнаяПолитикаОрганизаций.УчетЗатратПоЗаказамНаПроизводство");
	КонецЕсли;
	
	Возврат СтруктраУчетнойПолитики;
КонецФункции	

// Возвращает таблицу значений с данными учетной политики для всех организаций
// Данные берутся на заданный момент времени 
//
// Параметры:
//	Момент времени, дата
//
// Возварщаемое значение: 
//	Таблица значений
//
Функция ПолучитьУчетнуюПолитику(МоментКон, Упр = Истина, Бух = Истина, Меж = Истина, Организация = Неопределено) Экспорт	
	
	Если НЕ (Упр ИЛИ Бух ИЛИ Меж) Тогда	
		Возврат Новый Структура();
	КонецЕсли;	
	
	СтруктраУчетнойПолитики = ПолучитьСтруктруУчетнойПолитикиДляПроведенияПоПартиям(Упр, Бух, Меж);
	
	ТекстЗапроса = "ВЫБРАТЬ";
	ТекстСписокТаблиц = "
	|ИЗ";
	Для Каждого ВидУчета Из СтруктраУчетнойПолитики Цикл
		Для Каждого ПараметрУчетнойПолитики Из СтруктраУчетнойПолитики[ВидУчета.Ключ] Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	" + ПараметрУчетнойПолитики.Значение + " КАК " + ПараметрУчетнойПолитики.Ключ + "_" + ВидУчета.Ключ + ",";
			
			ИмяТаблицы = Лев(ПараметрУчетнойПолитики.Значение,Найти(ПараметрУчетнойПолитики.Значение,".")-1);
			
			Если Найти(ТекстСписокТаблиц,"КАК " + ИмяТаблицы) = 0 Тогда
				//Такой таблицы еще нет
				Если ИмяТаблицы = "Константы" Тогда
					ТекстСписокТаблиц = ТекстСписокТаблиц + "
					|	Константы КАК Константы,";
				ИначеЕсли ИмяТаблицы = "УчетнаяПолитика" Тогда
					ТекстСписокТаблиц = ТекстСписокТаблиц + "
					|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаСреза,) КАК УчетнаяПолитика,";	
				ИначеЕсли ИмяТаблицы = "УчетнаяПолитикаОрганизаций" Тогда
					ТекстСписокТаблиц = ТекстСписокТаблиц + "
					|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&ДатаСреза,Организация = &Организация) КАК УчетнаяПолитикаОрганизаций,";	
				ИначеЕсли ИмяТаблицы = "НастройкаСпособовВеденияУправленческогоПартионногоУчета" Тогда
					Если ЗначениеЗаполнено(Организация) Тогда
						//Если способ ведения управленческого партионного учета не задан, то используется способ "ПоКомпанииВЦелом"
						ТекстСписокТаблиц = ТекстСписокТаблиц + "
						|(ВЫБРАТЬ ПЕРВЫЕ 1
						|	НастройкаСпособовВеденияУправленческогоПартионногоУчета.Организация,
						|	НастройкаСпособовВеденияУправленческогоПартионногоУчета.СпособВеденияПартионногоУчетаПоОрганизации
						|ИЗ (
						|ВЫБРАТЬ
						|	НастройкаСпособовВеденияУправленческогоПартионногоУчета.Организация,
						|	НастройкаСпособовВеденияУправленческогоПартионногоУчета.СпособВеденияПартионногоУчетаПоОрганизации
						|ИЗ
						|	РегистрСведений.НастройкаСпособовВеденияУправленческогоПартионногоУчета.СрезПоследних(&ДатаСреза,Организация = &Организация) КАК НастройкаСпособовВеденияУправленческогоПартионногоУчета
						|ОБЪЕДИНИТЬ ВСЕ
						|ВЫБРАТЬ
						|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
						|	ЗНАЧЕНИЕ(Перечисление.СпособыВеденияПартионногоУчетаПоОрганизациям.ПоКомпанииВЦелом)) КАК НастройкаСпособовВеденияУправленческогоПартионногоУчета
						|УПОРЯДОЧИТЬ ПО Организация УБЫВ) КАК НастройкаСпособовВеденияУправленческогоПартионногоУчета,";	
					Иначе
						//Если организация не заполнена, то считаем что учет ведется по компании в целом
						ТекстСписокТаблиц = ТекстСписокТаблиц + "
						|	(ВЫБРАТЬ ЗНАЧЕНИЕ(Перечисление.СпособыВеденияПартионногоУчетаПоОрганизациям.ПоКомпанииВЦелом) КАК СпособВеденияПартионногоУчетаПоОрганизации) КАК НастройкаСпособовВеденияУправленческогоПартионногоУчета,";	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;		
		КонецЦикла;
	КонецЦИкла;
	
	//Удалим последнюю запятую
	ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);
	ТекстСписокТаблиц = Лев(ТекстСписокТаблиц,СтрДлина(ТекстСписокТаблиц)-1);
	
	Запрос = Новый Запрос(ТекстЗапроса + ТекстСписокТаблиц); 
	Запрос.УстановитьПараметр("Организация",Организация);
	
	Если ТипЗнч(МоментКон) = Тип("Дата") Тогда
		Запрос.УстановитьПараметр("ДатаСреза", МоментКон);
	ИначеЕсли ТипЗнч(МоментКон) = Тип("МоментВремени") Тогда
		Запрос.УстановитьПараметр("ДатаСреза", МоментКон.Дата);
	ИначеЕсли ТипЗнч(МоментКон) = Тип("Граница") Тогда
		Если ТипЗнч(МоментКон.Значение) = Тип("Дата") Тогда
			Запрос.УстановитьПараметр("ДатаСреза", МоментКон.Значение);
		ИначеЕсли ТипЗнч(МоментКон.Значение) = Тип("МоментВремени") Тогда
			Запрос.УстановитьПараметр("ДатаСреза", МоментКон.Значение.Дата);
		Иначе
			Запрос.УстановитьПараметр("ДатаСреза", '00010101');
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ДатаСреза", '00010101');
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура();
	Для Каждого ВидУчета Из СтруктраУчетнойПолитики Цикл
		Результат.Вставить(ВидУчета.Ключ, Новый Структура());
		Для Каждого ПараметрУчетнойПолитики Из СтруктраУчетнойПолитики[ВидУчета.Ключ] Цикл
			Результат[ВидУчета.Ключ].Вставить(ПараметрУчетнойПолитики.Ключ, Выборка[ПараметрУчетнойПолитики.Ключ + "_" + ВидУчета.Ключ]);
		КонецЦикла;	
	КонецЦикла;		
	
	Возврат Результат;
	
КонецФункции // ПолучитьУчетнуюПолитику()

// Читает заданные в структуре реквизиты объекта, переданного ссылкой
//
Процедура ПолучитьРеквизитыОбъекта(ДокументСсылка, СтруктураРеквизитов) Экспорт
	
	ТипДок = ТипЗнч(ДокументСсылка);
	МетаДок = Метаданные.НайтиПоТипу(ТипДок);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипДок) тогда
		НазваниеТаблицы = "Справочник."+МетаДок.Имя;
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипДок) тогда
		НазваниеТаблицы = "Документ."+МетаДок.Имя;
	Иначе
		Возврат;
	КонецЕсли;
		
	Если МетаДок <> Неопределено Тогда
		
		СтрРеквизиты = "";
		Для Каждого Элемент Из СтруктураРеквизитов Цикл
			СтрРеквизиты = СтрРеквизиты +", "+Элемент.Ключ;
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	" + Сред(СтрРеквизиты, 2) +"
		|ИЗ
		|	"+НазваниеТаблицы+"
		|
		|ГДЕ
		|	Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Для Каждого Элемент Из СтруктураРеквизитов Цикл
				СтруктураРеквизитов.Вставить(Элемент.Ключ, Выборка[Элемент.Ключ]);
			КонецЦикла
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает параметр учетной политики для заданной организации по заданному учету
// Перед использованием функции должна быть заполнена таблица параметров учетной политики
//
// Параметры:
//	ИмяПараметра - Строка, имя запрашиваемого параметра учетной политики,
//	Учет         - Может принимать три значения: "Упр", "Бух", "Нал", "Меж". Задает учет
//	СтруктураПараметров - структура, содержащая все общие параметры.
//
// Возвращаемое значение: 
//	Значение учетной политики
//
Функция ПолучитьПараметрУчетнойПолитикиПартионногоУчета(ИмяПараметра, Учет, СтруктураПараметров) Экспорт
	
	УчетнаяПолитика = Неопределено;
	СтрокаУчетнойПолитики = Неопределено;
	ЗначениеПараметраУчетнойПолитики = Неопределено;
	
	Если СтруктураПараметров.Свойство("УчетнаяПолитика",УчетнаяПолитика)
 	  И ТипЗНЧ(УчетнаяПолитика) = Тип("Структура")
	  И УчетнаяПолитика.Свойство(Учет, СтрокаУчетнойПолитики)
	  И СтрокаУчетнойПолитики.Свойство(ИмяПараметра,ЗначениеПараметраУчетнойПолитики) Тогда
		Возврат ЗначениеПараметраУчетнойПолитики;
	Иначе	
		//Ошибка может возникать только если в функцию передана неверно заполненная структура, содержащая учетную политику
		ОбщегоНазначения.СообщитьОбОшибке("Не задан параметр учетной политики """ +ИмяПараметра+ """ "+Учет+" учета"+"!");
		СтруктураПараметров.Вставить("Отказ", Истина);
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции // ПолучитьПараметрУчетнойПолитикиПартионногоУчета()

// Объект Описание типов с одним типом Подразделения
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Объект Описание типов с типом Подразделения
//
Функция ПолучитьОписаниеТиповПодразделения()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

// Объект Описание типов с типами - заказами
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Объект Описание типов с типом ЗаказПокупателя
//
Функция ПолучитьОписаниеТиповЗаказ()

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);

КонецФункции // ПолучитьОписаниеТиповЗаказ()

// Преобразует код операции в направление списания
//
// Параметры:
//	КодОперации   - код операции по регистру партий
//	СтатьяЗатрат  - статья затрат, определяющая направление списания в производство.
//
// Возвращаемое значение:
//	Направление списания.
//
Функция ПолучитьНаправлениеСписанияПоКодуОперации(КодОперации, СтатьяЗатрат = Неопределено, СчетЗатрат = Неопределено) Экспорт	
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	Если КодОперации=КодыОпераций.Реализация 
		ИЛИ КодОперации=КодыОпераций.РеализацияКомиссия
		ИЛИ КодОперации=КодыОпераций.РеализацияРозница
		ИЛИ КодОперации=КодыОпераций.ВозвратОтПокупателя 
		ИЛИ КодОперации=КодыОпераций.ВозвратОтПокупателяТекущийМесяц Тогда
		
		НаправлениеСписания = "СебестоимостьПродаж";
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеПартийВПроизводствоОперативно Тогда
		
		НаправлениеСписания = "ПроизводственныеРасходы";
		
	ИначеЕсли КодОперации=КодыОпераций.ПередачаВПереработку
		ИЛИ КодОперации=КодыОпераций.ПередачаНаКомиссию Тогда
		
		НаправлениеСписания = "Переданные";
		
	ИначеЕсли КодОперации = КодыОпераций.ПеремещениеМеждуСкладами
		ИЛИ КодОперации   = КодыОпераций.КорректировкаСерийИХарактеристик
		ИЛИ КодОперации   = КодыОпераций.КорректировкаКачества
		ИЛИ КодОперации   = КодыОпераций.РезервированиеПодЗаказ
		ИЛИ КодОперации   = КодыОпераций.СнятиеРезерваПодЗаказ
		ИЛИ КодОперации   = КодыОпераций.ПереоценкаПринятыхНаКомиссию
		ИЛИ КодОперации   = КодыОпераций.ВозвратОтПереработчика 
		ИЛИ КодОперации   = КодыОпераций.ВозвратОтКомиссионера
		ИЛИ КодОперации   = КодыОпераций.Комплектация 
		ИЛИ КодОперации   = КодыОпераций.ИзменениеНалоговогоНазначенияЗапасов
		
		Тогда
		
		НаправлениеСписания = "НаСкладах";
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаВложенияВоВнеоборотныеАктивы
		ИЛИ КодОперации=КодыОпераций.ПередачаОборудованияВМонтаж Тогда
		
		НаправлениеСписания = "ВложенияВоВнеоборотныеАктивы";
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаЗатраты 
	   ИЛИ КодОперации=КодыОпераций.СписаниеПартийПереданныхВПроизводство
	   ИЛИ КодОперации=КодыОпераций.ПереоценкаКупленных
	   			Тогда
		
		Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			
			ХарактерЗатрат = СтатьяЗатрат.ХарактерЗатрат;
			
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
	
				НаправлениеСписания = "АдминистративныеРасходы";
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
				
				НаправлениеСписания = "ВложенияВоВнеоборотныеАктивы";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
				
				НаправлениеСписания = "ОбщепроизводственныеРасходы";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				
				НаправлениеСписания = "ПроизводственныеРасходы";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт Тогда
				
				НаправлениеСписания = "РасходыНаСбыт";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы Тогда
				
				НаправлениеСписания = "ПрочиеОперационныеРасходы";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы Тогда
			
				НаправлениеСписания = "ТранспортноЗаготовительныеРасходы";
				
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
				
				НаправлениеСписания = "Затраты";
				
			Иначе
				
				НаправлениеСписания = "";
				
			КонецЕсли;
		Иначе
			
			НаправлениеСписания = "";
			
		КонецЕсли;
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаСтроительствоОбъектовОС
	   ИЛИ КодОперации=КодыОпераций.ПринятиеКУчетуОС Тогда
		
		НаправлениеСписания = "СтоимостьОСПриПринятииКУчету";
		
	ИначеЕсли КодОперации=КодыОпераций.ПринятиеКУчетуОССоСписаниемНаЗатраты Тогда
	
		НаправлениеСписания = "ЗатратыПриПринятииКУчету";
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаБрак Тогда
		
		НаправлениеСписания = "БракВПроизводстве";
		
	ИначеЕсли КодОперации=КодыОпераций.ПередачаМатериаловВЭксплуатацию Тогда
		
		НаправлениеСписания = "ПартииМатериаловВЭксплуатации";
		
	Иначе 
		
		НаправлениеСписания = "";
		
	КонецЕсли;
	
	// Для регламентированного учета направление списания определяется 
	// по счету затрат если он задан
	Если (ЗначениеЗаполнено(СчетЗатрат)) 
	  И ((КодОперации = КодыОпераций.СписаниеПартийВПроизводствоОперативно)
	    ИЛИ (КодОперации = КодыОпераций.СписаниеНаБрак) 
		ИЛИ (КодОперации = КодыОпераций.СписаниеНаВложенияВоВнеоборотныеАктивы)
		ИЛИ (КодОперации = КодыОпераций.СписаниеНаЗатраты)
		ИЛИ (КодОперации = КодыОпераций.СписаниеПартийПереданныхВПроизводство)) Тогда
		
		ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, СтатьяЗатрат);
		
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
	
			НаправлениеСписания = "АдминистративныеРасходы";
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
				
			НаправлениеСписания = "ОбщепроизводственныеРасходы";
			
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт Тогда
				
				НаправлениеСписания = "РасходыНаСбыт";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы Тогда
			
				НаправлениеСписания = "ТранспортноЗаготовительныеРасходы";
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы Тогда
				
				НаправлениеСписания = "ПрочиеОперационныеРасходы";
				
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
				
			НаправлениеСписания = "БракВПроизводстве";
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
				
			НаправлениеСписания = "ВложенияВоВнеоборотныеАктивы";
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				
			НаправлениеСписания = "ПроизводственныеРасходы";
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
				
			НаправлениеСписания = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НаправлениеСписания;
	
КонецФункции // ПолучитьНаправлениеСписанияПоКодуОперации(КодОперации)

// Возвращает строковое описание регистра-источника для заданного кода операции
//
// Параметры:
//	КодОперации   - код операции по регистру партий
//
// Возвращаемое значение:
//	Источник списания.
//
Функция ПолучитьИсточникПоКодуОперации(КодОперации)
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	Если КодОперации = КодыОпераций.Реализация
		ИЛИ КодОперации = КодыОпераций.РеализацияРозница
		ИЛИ КодОперации = КодыОпераций.ПередачаНаКомиссию 
		ИЛИ КодОперации = КодыОпераций.ВозвратПоставщику
		ИЛИ КодОперации = КодыОпераций.Комплектация
		ИЛИ КодОперации = КодыОпераций.КорректировкаСерийИХарактеристик
		ИЛИ КодОперации = КодыОпераций.КорректировкаКачества
		ИЛИ КодОперации = КодыОпераций.ПередачаТарыКонтрагенту
		ИЛИ КодОперации = КодыОпераций.ПеремещениеМеждуСкладами
		ИЛИ КодОперации = КодыОпераций.ПереоценкаПринятыхНаКомиссию
		ИЛИ КодОперации = КодыОпераций.РезервированиеПодЗаказ
		ИЛИ КодОперации = КодыОпераций.СнятиеРезерваПодЗаказ
		ИЛИ КодОперации = КодыОпераций.СписаниеНаЗатраты
		ИЛИ КодОперации = КодыОпераций.СписаниеПоИнвентаризации
		ИЛИ КодОперации = КодыОпераций.СписаниеПоОрдеру
		ИЛИ КодОперации = КодыОпераций.ПереоценкаКупленных
		ИЛИ КодОперации = КодыОпераций.ИзменениеНалоговогоНазначенияЗапасов

	Тогда
	
		Возврат "НаСкладах";
	КонецЕсли;
	
	Если КодОперации = КодыОпераций.ВозвратОтКомиссионера
		ИЛИ КодОперации = КодыОпераций.РеализацияКомиссия
		ИЛИ КодОперации = КодыОпераций.ВозвратОтПереработчика
		ИЛИ КодОперации = КодыОпераций.СписаниеПартийПереданныхВПроизводство
		
	Тогда
		Возврат "Переданные";
	КонецЕсли;
	
	Возврат "НаСкладах"; // По умолчанию
	
КонецФункции // ПолучитьИсточникПоКоду()

// Общая процедура для добавления записей в набор записей с сопутствующими действиями.
// Добавляет строку в таблицу движений, инкрементирует номер последней строки,
// устанавливает признак модифицированности.
//
Функция ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров) Экспорт

	Движение = СтруктураПараметров["ТаблицаДвижений" + ИмяРегистра].Добавить();
	
	// Увеличим счетчик движений на 1:
	СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра] = СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра]+1;
	
	// Устанавливаем флаг модификации
	СтруктураПараметров["ИзмененыДвижения"+ИмяРегистра] = Истина;

	Возврат Движение;

КонецФункции

// Создает наборы записей по регистрам управленческого учета
//
// Параметры:
//	Нет.
//
Процедура СоздатьНаборыЗаписейУпр(СтруктураПараметров)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете Тогда
	
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладахУпр",    РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровПереданныеУпр",   РегистрыНакопления.ПартииТоваровПереданные.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНезавершенноеПроизводствоУпр", РегистрыНакопления.НезавершенноеПроизводство.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияЗатратыУпр",                   РегистрыНакопления.Затраты.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПродажиСебестоимость",       РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияСтроительствоОбъектовОсновныхСредствУпр", РегистрыНакопления.СтроительствоОбъектовОсновныхСредств.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств", РегистрыНакопления.ЗатратыНаСтроительствоОбъектовОсновныхСредств.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияСтоимостьОСУпр", РегистрыНакопления.СтоимостьОС.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияБракВПроизводствеУпр", РегистрыНакопления.БракВПроизводстве.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПартииМатериаловВЭксплуатацииУпр",       РегистрыНакопления.ПартииМатериаловВЭксплуатации.СоздатьНаборЗаписей());
		
		// Учет реализации принятых на комиссию товаров для отчета комитенту
		СтруктураПараметров.Вставить("ДвиженияРеализованныеТовары",            РегистрыНакопления.РеализованныеТовары.СоздатьНаборЗаписей());
		
	КонецЕсли;
	
КонецПроцедуры // СоздатьНаборыЗаписейУпр()

// Создает наборы записей по регистрам бухгалтерского и налогового учета
//
// Параметры:
//	Нет.
//
Процедура СоздатьНаборыЗаписейРегл(СтруктураПараметров)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладахБух",   РегистрыНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровПереданныеБух",  РегистрыНакопления.ПартииТоваровПереданныеБухгалтерскийУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНезавершенноеПроизводствоБух",РегистрыНакопления.НезавершенноеПроизводствоБухгалтерскийУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияЗатратыБух",                  РегистрыНакопления.ЗатратыБухгалтерскийУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияСтоимостьОСБух",              РегистрыНакопления.СтоимостьОСБухгалтерскийУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияБракВПроизводствеБух", РегистрыНакопления.БракВПроизводствеБухгалтерскийУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПартииМатериаловВЭксплуатацииБух",    РегистрыНакопления.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияСтроительствоОбъектовОсновныхСредствБух", РегистрыНакопления.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияКорректировкиПартииТоваровНал",	РегистрыНакопления.КорректировкиПартииТоваровНалоговыйУчет.СоздатьНаборЗаписей());
		
		// Проводки
		СтруктураПараметров.Вставить("ДвиженияХозрасчетный",                РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей());
		
	КонецЕсли;
	
КонецПроцедуры // СоздатьНаборыЗаписейРегл()

// Создает наборы записей по регистрам международного учета
//
// Параметры:
//	Нет.
//
Процедура СоздатьНаборыЗаписейМеж(СтруктураПараметров)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете Тогда
	
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладахМеж", РегистрыНакопления.ПартииТоваровНаСкладахМеждународныйУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПартииТоваровПереданныеМеж",РегистрыНакопления.ПартииТоваровПереданныеМеждународныйУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНезавершенноеПроизводствоМеж",  РегистрыНакопления.НезавершенноеПроизводствоМеждународныйУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияБракВПроизводствеМеж", РегистрыНакопления.БракВПроизводствеМеждународныйУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияПартииМатериаловВЭксплуатацииМеж",  РегистрыНакопления.ПартииМатериаловВЭксплуатацииМеждународныйУчет.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияЗатратыМеж",  РегистрыНакопления.ЗатратыМеждународныйУчет.СоздатьНаборЗаписей());
		
		// Проводки
		СтруктураПараметров.Вставить("ДвиженияМеждународный",             РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей());
		
	КонецЕсли;
	
КонецПроцедуры // СоздатьНаборыЗаписейУпр()

// Создает наборы записей для заданных учетов.
//
Процедура СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания = Неопределено, Регистратор =Неопределено ) Экспорт
	
	СоздатьНаборыЗаписейУпр(СтруктураПараметров);
	
	СоздатьНаборыЗаписейРегл(СтруктураПараметров);
	
	СоздатьНаборыЗаписейМеж(СтруктураПараметров);
	
КонецПроцедуры

// Подготовка наборов записей по регистрам Упр учета к добавлению в них строк
//
// Параметры:
//	Нет.
//
Процедура ПодготовитьНаборыЗаписейУпр(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи)
	
	ОтражатьВУправленческомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете;
	
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровНаСкладахУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровПереданныеУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНезавершенноеПроизводствоУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПродажиСебестоимость", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияСтроительствоОбъектовОсновныхСредствУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияСтоимостьОСУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияБракВПроизводствеУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияРеализованныеТовары", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииМатериаловВЭксплуатацииУпр", Ложь);
	
	Если ОтражатьВУправленческомУчете Тогда
		
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Очистить();
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Очистить();
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияНезавершенноеПроизводствоУпр.Очистить();
		СтруктураПараметров.ДвиженияНезавершенноеПроизводствоУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияЗатратыУпр.Очистить();
		СтруктураПараметров.ДвиженияЗатратыУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияПродажиСебестоимость.Очистить();
		СтруктураПараметров.ДвиженияПродажиСебестоимость.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредствУпр.Очистить();
		СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредствУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств.Очистить();
		СтруктураПараметров.ДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияСтоимостьОСУпр.Очистить();
		СтруктураПараметров.ДвиженияСтоимостьОСУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияБракВПроизводствеУпр.Очистить();
		СтруктураПараметров.ДвиженияБракВПроизводствеУпр.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииУпр.Отбор.Регистратор.Установить(Регистратор);
		
		// Таблицы движений:
		
		// Для партий на складах
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладахУпр", СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Очистить();
		
		// Служебные колонки	
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		// Валюты и курсы - для пересчета
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("ВалютаДокумента");
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КурсДокумента");
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КратностьДокумента");
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		// Количество поступления - для комплектации
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровНаСкладах", Регистратор));
		ИначеЕсли СтруктураПараметров.Свойство("УчитыватьСуществующиеСтрокиДвиженийПартийТоваров") И СтруктураПараметров.УчитыватьСуществующиеСтрокиДвиженийПартийТоваров Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровНаСкладах", Регистратор,,Истина));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахУпр", 0);
		КонецЕсли;
		
		// Для партий товаров переданных
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровПереданныеУпр", СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Очистить();
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("Заказ", ПолучитьОписаниеТиповЗаказ());		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		// Валюты и курсы - для пересчета
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("ВалютаДокумента");
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КурсДокумента");
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КратностьДокумента");
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		// Количество поступления - для комплектации
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровПереданные", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеУпр", 0);
		КонецЕсли;
		
		// Для товаров, переданных в производство
		СтруктураПараметров.Вставить("ТаблицаДвиженийНезавершенноеПроизводствоУпр", СтруктураПараметров.ДвиженияНезавершенноеПроизводствоУпр.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоУпр.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводство", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводство", Регистратор,"РегистрНакопления",Истина));
		КонецЕсли;
		
		// Для товаров, списанных на затраты
		СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыУпр", СтруктураПараметров.ДвиженияЗатратыУпр.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийЗатратыУпр.Очистить();
		
		Если Не ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("Затраты", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыУпр", 0);
		КонецЕсли;
		
		// Для МПЗ, списанных на себестоимость продаж
		СтруктураПараметров.Вставить("ТаблицаДвиженийПродажиСебестоимость", СтруктураПараметров.ДвиженияПродажиСебестоимость.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПродажиСебестоимость.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПродажиСебестоимость", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПродажиСебестоимость", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПродажиСебестоимость", 0);
		КонецЕсли;
		
		// Для строительства объектов ОС
		СтруктураПараметров.Вставить("ТаблицаДвиженийСтроительствоОбъектовОсновныхСредствУпр", СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредствУпр.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтроительствоОбъектовОсновныхСредствУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("СтроительствоОбъектовОсновныхСредств", Регистратор));
		Иначе 
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтроительствоОбъектовОсновныхСредствУпр", 0);
		КонецЕсли;

		СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыНаСтроительствоОбъектовОсновныхСредств", СтруктураПараметров.ДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыНаСтроительствоОбъектовОсновныхСредств", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ЗатратыНаСтроительствоОбъектовОсновныхСредств", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыНаСтроительствоОбъектовОсновныхСредств", 0);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийСтоимостьОСУпр", СтруктураПараметров.ДвиженияСтоимостьОСУпр.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда 
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтоимостьОСУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("СтоимостьОС", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтоимостьОСУпр", 0);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийБракВПроизводствеУпр", СтруктураПараметров.ДвиженияБракВПроизводствеУпр.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда 
			СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("БракВПроизводстве", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеУпр", 0);
		КонецЕсли;
		
		СтруктураПараметров.ДвиженияРеализованныеТовары.Очистить();
		СтруктураПараметров.ДвиженияРеализованныеТовары.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.Вставить("ТаблицаДвиженийРеализованныеТовары", СтруктураПараметров.ДвиженияРеализованныеТовары.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийРеализованныеТовары.Очистить();
		СтруктураПараметров.Вставить("ТекНомерСтрокиРеализованныеТовары", 0);
		
		// Для метериалов, переданных в эксплуатацию
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииМатериаловВЭксплуатацииУпр", СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииУпр.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииУпр.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииМатериаловВЭксплуатации", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииУпр", 0);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьНаборыЗаписейУпр()

// Подготовка наборов записей по регистрам бух и нал учета к добавлению в них строк
//
// Параметры:
//	Нет.
//
Процедура ПодготовитьНаборыЗаписейРегл(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи)
	
	ОтражатьВБухгалтерскомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете;
	
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровНаСкладахБух", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровПереданныеБух", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНезавершенноеПроизводствоБух", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыБух", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияХозрасчетный", Ложь);
	
	СтруктураПараметров.Вставить("ИзмененыДвиженияСтоимостьОСБух", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияБракВПроизводствеБух", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииМатериаловВЭксплуатацииБух", Ложь);
	
	СтруктураПараметров.Вставить("ИзмененыДвиженияСтроительствоОбъектовОсновныхСредствБух", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияКорректировкиПартииТоваровНал", Ложь);
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Бухгалтерские
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахБух.Очистить();
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеБух.Очистить();
		
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахБух.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеБух.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНезавершенноеПроизводствоБух.Очистить();
		СтруктураПараметров.ДвиженияНезавершенноеПроизводствоБух.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияЗатратыБух.Очистить();
		СтруктураПараметров.ДвиженияЗатратыБух.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияСтоимостьОСБух.Очистить();
		СтруктураПараметров.ДвиженияСтоимостьОСБух.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияБракВПроизводствеБух.Очистить();
		СтруктураПараметров.ДвиженияБракВПроизводствеБух.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииБух.Очистить();
		СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииБух.Отбор.Регистратор.Установить(Регистратор);
		
		Если Не ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииМатериаловВЭксплуатацииБухгалтерскийУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииБух", 0);
		КонецЕсли;
		
		
		// Таблицы значений с движениями
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладахБух", СтруктураПараметров.ДвиженияПартииТоваровНаСкладахБух.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Очистить();
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровПереданныеБух", СтруктураПараметров.ДвиженияПартииТоваровПереданныеБух.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Очистить();
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		// Количество поступления - для комплектации
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		СтруктураПараметров.ДвиженияХозрасчетный.Очистить();
		СтруктураПараметров.ДвиженияХозрасчетный.Отбор.Регистратор.Установить(Регистратор);
		
		Если Не ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровНаСкладахБухгалтерскийУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахБух", 0);
		КонецЕсли;
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("Заказ", ПолучитьОписаниеТиповЗаказ());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		// Количество поступления - для комплектации
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровПереданныеБухгалтерскийУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеБух", 0);
		КонецЕсли;
		
		// Для МПЗ, переданных в производство
		СтруктураПараметров.Вставить("ТаблицаДвиженийНезавершенноеПроизводствоБух", СтруктураПараметров.ДвиженияНезавершенноеПроизводствоБух.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоБух.Очистить();
		
		Если Не ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводствоБухгалтерскийУчет", Регистратор));
			СтруктураПараметров.Вставить("НачНомерСтрокиНезавершенноеПроизводствоБух", СтруктураПараметров.ТекНомерСтрокиНезавершенноеПроизводствоБух);
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводствоБухгалтерскийУчет", Регистратор,"РегистрНакопления",Истина));
			СтруктураПараметров.Вставить("НачНомерСтрокиНезавершенноеПроизводствоБух", СтруктураПараметров.ТекНомерСтрокиНезавершенноеПроизводствоБух);
		КонецЕсли;
		
		// Для товаров, списанных на затраты
		СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыБух", СтруктураПараметров.ДвиженияЗатратыБух.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийЗатратыБух.Очистить();
		
		Если Не ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ЗатратыБухгалтерскийУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыБух", 0);
		КонецЕсли;
		

		СтруктураПараметров.Вставить("ТаблицаДвиженийСтоимостьОСБух", СтруктураПараметров.ДвиженияСтоимостьОСБух.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтоимостьОСБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("СтоимостьОСБухгалтерскийУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиСтоимостьОСБух", 0);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийБракВПроизводствеБух", СтруктураПараметров.ДвиженияБракВПроизводствеБух.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда 
			СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("БракВПроизводствеБухгалтерскийУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеБух", 0);
		КонецЕсли;		
		
		// Для материалов, переданных в эксплуатацию
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииМатериаловВЭксплуатацииБух", СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииБух.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииБух.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииМатериаловВЭксплуатацииБухгалтерскийУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииБух", 0);
		КонецЕсли;
		
		СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредствБух.Очистить();
		СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредствБух.Отбор.Регистратор.Установить(Регистратор);
		  
		СтруктураПараметров.Вставить("ТаблицаДвиженийСтроительствоОбъектовОсновныхСредствБух",         СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредствБух.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийСтроительствоОбъектовОсновныхСредствБух.Очистить();	
		
		Если НЕ ЗамещатьПриЗаписи Тогда
		  	СтруктураПараметров.Вставить("ТекНомерСтрокиСтроительствоОбъектовОсновныхСредствБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет", Регистратор));
		  Иначе
		 	СтруктураПараметров.Вставить("ТекНомерСтрокиСтроительствоОбъектовОсновныхСредствБух", 0);
		КонецЕсли;
		
		СтруктураПараметров.ДвиженияКорректировкиПартииТоваровНал.Очистить();
		СтруктураПараметров.ДвиженияКорректировкиПартииТоваровНал.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийКорректировкиПартииТоваровНал", СтруктураПараметров.ДвиженияКорректировкиПартииТоваровНал.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийКорректировкиПартииТоваровНал.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиКорректировкиПартииТоваровНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("КорректировкиПартииТоваровНалоговыйУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиКорректировкиПартииТоваровНал", 0);
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Подготовка наборов записей по регистрам бух и нал учета к добавлению в них строк
//
// Параметры:
//	Нет.
//
Процедура ПодготовитьНаборыЗаписейМеж(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи)
	
	ОтражатьВМеждународномУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете;
	
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровНаСкладахМеж", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровПереданныеМеж", ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНезавершенноеПроизводствоМеж", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияМеждународный", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияБракВПроизводствеМеж", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииМатериаловВЭксплуатацииМеж", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыМеж", Ложь);
	
	Если ОтражатьВМеждународномУчете Тогда
		
		// Международные
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахМеж.Очистить();
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеМеж.Очистить();
		
		СтруктураПараметров.ДвиженияПартииТоваровНаСкладахМеж.Отбор.Регистратор.Установить(Регистратор);
		СтруктураПараметров.ДвиженияПартииТоваровПереданныеМеж.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНезавершенноеПроизводствоМеж.Очистить();
		СтруктураПараметров.ДвиженияНезавершенноеПроизводствоМеж.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияБракВПроизводствеМеж.Очистить();
		СтруктураПараметров.ДвиженияБракВПроизводствеМеж.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияЗатратыМеж.Очистить();
		СтруктураПараметров.ДвиженияЗатратыМеж.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииМеж.Отбор.Регистратор.Установить(Регистратор);
		
		// Таблицы значений с движениями
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладахМеж", СтруктураПараметров.ДвиженияПартииТоваровНаСкладахМеж.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Очистить();
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровПереданныеМеж", СтруктураПараметров.ДвиженияПартииТоваровПереданныеМеж.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Очистить();
		
		СтруктураПараметров.ДвиженияМеждународный.Очистить();
		СтруктураПараметров.ДвиженияМеждународный.Отбор.Регистратор.Установить(Регистратор);
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		// Количество поступления - для комплектации
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровНаСкладахМеждународныйУчет", Регистратор));
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("Заказ", ПолучитьОписаниеТиповЗаказ());
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
		
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		// Количество поступления - для комплектации
		СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		
		СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровПереданныеМеждународныйУчет", Регистратор));
		
		// Для МПЗ, переданных в производство
		СтруктураПараметров.Вставить("ТаблицаДвиженийНезавершенноеПроизводствоМеж", СтруктураПараметров.ДвиженияНезавершенноеПроизводствоМеж.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоМеж.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводствоМеждународныйУчет", Регистратор));
		ИначеЕсли СтруктураПараметров.Свойство("Регистратор") И ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.СписаниеМПЗМеждународный") Тогда
		    СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводствоМеждународныйУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводствоМеждународныйУчет", Регистратор,"РегистрНакопления",Истина));
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийБракВПроизводствеМеж", СтруктураПараметров.ДвиженияБракВПроизводствеМеж.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда 
			СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("БракВПроизводствеМеждународныйУчет", Регистратор));
		ИначеЕсли СтруктураПараметров.Свойство("Регистратор") И ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.СписаниеМПЗМеждународный") Тогда
		    СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("БракВПроизводствеМеждународныйУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеМеж", 0);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыМеж", СтруктураПараметров.ДвиженияЗатратыМеж.Выгрузить());
		
		Если НЕ ЗамещатьПриЗаписи Тогда 
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ЗатратыМеждународныйУчет", Регистратор));
		ИначеЕсли СтруктураПараметров.Свойство("Регистратор") И ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.СписаниеМПЗМеждународный") Тогда
		    СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ЗатратыМеждународныйУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыМеж", 0);
		КонецЕсли;
		
		// Для метериалов, переданных в эксплуатацию
		СтруктураПараметров.Вставить("ТаблицаДвиженийПартииМатериаловВЭксплуатацииМеж", СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииМеж.Выгрузить());
		СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииМеж.Очистить();
		
		Если НЕ ЗамещатьПриЗаписи Тогда
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииМатериаловВЭксплуатацииМеждународныйУчет", Регистратор));
		ИначеЕсли СтруктураПараметров.Свойство("Регистратор") И ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.СписаниеМПЗМеждународный") Тогда
		    СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииМатериаловВЭксплуатацииМеждународныйУчет", Регистратор));
		Иначе
			СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииМеж", 0);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Подготавливает параметры, необходимые для работы с наборами записей для заданных учетов.
//
Процедура ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи = Истина, ИзмененыДвижения = Истина) Экспорт
	
	СтруктураПараметров.Вставить("Период",         Период);
	СтруктураПараметров.Вставить("Регистратор",    Регистратор);
	
	ПодготовитьНаборыЗаписейУпр(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи);
	ПодготовитьНаборыЗаписейРегл(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи);
	ПодготовитьНаборыЗаписейМеж(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи);
	
	// Установим флаги модифицированности для наборов записей всех регистров, 
	// для которых документ является регистратором
	// и по которым у документа есть движения
	// для того, чтобы набор записей был перезаписан 
	// При вызове из обработки проведение по регистрам НДС модифицированность не устанавливаем
	
	ТаблицаДвиженийРегистратора = ПолныеПрава.ОпределитьНаличиеДвиженийПоРегистратору(Регистратор);
	Для каждого СтрокаДвижения из ТаблицаДвиженийРегистратора цикл
		ПозицияТочки = Найти(СтрокаДвижения.Имя,"."); 
		ВидРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки -1);
		Если ВидРегистра = "РегистрСведений" Тогда
			Продолжить;
		КонецЕсли;
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки+1));
		
		Если ВидРегистра = "РегистрНакопления" Тогда
			Если Найти(ИмяРегистра, "БухгалтерскийУчет") тогда
				Если НЕ СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете тогда 
					Продолжить;
				КонецЕсли;
				ИмяРегистра = СтрЗаменить(ИмяРегистра,"БухгалтерскийУчет","Бух");
				
				
			ИначеЕсли Найти(ИмяРегистра, "НалоговыйУчет") тогда
				Если НЕ СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете тогда 	
					Продолжить;
				КонецЕсли;
				
				ИмяРегистра = СтрЗаменить(ИмяРегистра,"НалоговыйУчет","Нал");
				
			ИначеЕсли Найти(ИмяРегистра, "МеждународныйУчет") тогда
				Если НЕ СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете тогда 
					Продолжить;
				КонецЕсли;
				ИмяРегистра = СтрЗаменить(ИмяРегистра,"МеждународныйУчет","Меж");
				
			Иначе
				Если НЕ СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете тогда 
					Продолжить;
				КонецЕсли;
				ИмяРегистра = ИмяРегистра + "Упр";
			КонецЕсли;
		КонецЕсли;
		ИмяФлагаМодифицированности = "ИзмененыДвижения" + ИмяРегистра;
		Если СтруктураПараметров.Свойство(ИмяФлагаМодифицированности) тогда
			СтруктураПараметров[ИмяФлагаМодифицированности] = Истина;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПодготовитьНаборыЗаписей

// Записывет набор записей в базу данных.
//
Процедура ЗаписатьДвижения(ДвиженияРегистра, ТаблицаДвиженийРегистра, Замещать)

	// При замещении нужно удалять записи, сформированные прошлым списанием партий (СписаниеПартий=Истина),
	// если у регистра есть реквизит СписаниеПартий, то нужно удалить строки с Истина
	
	ДМ = ДвиженияРегистра.Метаданные();
	ЕстьРеквизитСписаниеПартий = (ДМ.Реквизиты.Найти("СписаниеПартий") <> Неопределено);
	
	Если Замещать И ЕстьРеквизитСписаниеПартий Тогда
		
		Если ТаблицаДвиженийРегистра=Неопределено Тогда
			ТаблицаДвиженийРегистра = ДвиженияРегистра.Выгрузить();
		КонецЕсли;
		
		// Установим УБ (эксклюзивную) перед чтением набора записей
		Если глЗначениеПеременной("ИспользоватьБлокировкуДанных")  Тогда
			Если Метаданные.РегистрыНакопления.Содержит(ДМ) Тогда
				ТипТаблицы = "РегистрНакопления";
			Иначе
				// Запись движений по бухгалтерскому или налоговому ПУ
				ТипТаблицы = "РегистрБухгалтерии";
			КонецЕсли;
			СтруктураПараметровБлокировки = Новый Структура(
				"ТипТаблицы,ИмяТаблицы"
				,ТипТаблицы
				,ДМ.Имя + ".НаборЗаписей");
				
			СтруктураЗначенийБлокировки = Новый Структура("Регистратор", ДвиженияРегистра.Отбор.Регистратор.Значение);
			
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки,СтруктураЗначенийБлокировки,, Ложь, "");
		КонецЕсли;
		
		ДвиженияРегистра.Прочитать();
		
		Инд = ДвиженияРегистра.Количество();
		Пока Инд >0 Цикл
			Инд = Инд - 1;
			Если ДвиженияРегистра[Инд].СписаниеПартий Тогда
				ДвиженияРегистра.Удалить(Инд);
			КонецЕсли;
		КонецЦикла;

		// Заполним параметр "Списание партий"
		ТаблицаДвиженийРегистра.ЗаполнитьЗначения(Истина, "СписаниеПартий");
		
		ОбщегоНазначения.ДобавитьСтрокиВНаборЗаписей(ДвиженияРегистра, ТаблицаДвиженийРегистра);
		
		Если ДвиженияРегистра.Отбор.Регистратор.Значение <> Неопределено Тогда
		  	ДвиженияРегистра.Записать(Истина);		
		КонецЕсли; 
		
	Иначе
		
		Если ТаблицаДвиженийРегистра<>Неопределено Тогда
			
			// Заполним параметр "Списание партий"
			Если ЕстьРеквизитСписаниеПартий Тогда
				ТаблицаДвиженийРегистра.ЗаполнитьЗначения(Истина, "СписаниеПартий");
			КонецЕсли;
			
			ОбщегоНазначения.ДобавитьСтрокиВНаборЗаписей(ДвиженияРегистра, ТаблицаДвиженийРегистра);
		КонецЕсли;
		
		Если ДвиженияРегистра.Отбор.Регистратор.Значение <> Неопределено Тогда
		  	ДвиженияРегистра.Записать(Замещать);
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры//ЗаписатьДвижения

// Запись движений по упр. учету
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьДвиженияДокументаУпр(СтруктураПараметров, ТаблицаСписания, Замещать)
	
	ОтражатьВУправленческомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете;
	
	Если ОтражатьВУправленческомУчете Тогда
		
		// Управленческий учет
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровНаСкладахУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровПереданныеУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНезавершенноеПроизводствоУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНезавершенноеПроизводствоУпр, 
			СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПродажиСебестоимость Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПродажиСебестоимость, 
			СтруктураПараметров.ТаблицаДвиженийПродажиСебестоимость, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияЗатратыУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыУпр, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияСтроительствоОбъектовОсновныхСредствУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредствУпр, 
			СтруктураПараметров.ТаблицаДвиженийСтроительствоОбъектовОсновныхСредствУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыНаСтроительствоОбъектовОсновныхСредств, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияСтоимостьОСУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияСтоимостьОСУпр, 
			СтруктураПараметров.ТаблицаДвиженийСтоимостьОСУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияБракВПроизводствеУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияБракВПроизводствеУпр, 
			СтруктураПараметров.ТаблицаДвиженийБракВПроизводствеУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииМатериаловВЭксплуатацииУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииУпр, 
			СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииУпр, Замещать);
			
		КонецЕсли;
		
		// Для отчета комитенту
		Если СтруктураПараметров.ИзмененыДвиженияРеализованныеТовары Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияРеализованныеТовары, 
			СтруктураПараметров.ТаблицаДвиженийРеализованныеТовары, Замещать);
			
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры // ЗаписатьДвиженияДокументаУпр()

// Запись движений по бух и нал учету
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьДвиженияДокументаРегл(СтруктураПараметров, ТаблицаСписания, Замещать)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
		
		// Бухгалтерский учет
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровНаСкладахБух Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровНаСкладахБух, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровПереданныеБух Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровПереданныеБух, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНезавершенноеПроизводствоБух Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНезавершенноеПроизводствоБух, 
			СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоБух, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияХозрасчетный Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияХозрасчетный, Неопределено, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияЗатратыБух Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыБух, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыБух, Замещать);
			
		КонецЕсли;
		

		Если СтруктураПараметров.ИзмененыДвиженияСтоимостьОСБух Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияСтоимостьОСБух, 
			СтруктураПараметров.ТаблицаДвиженийСтоимостьОСБух, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияБракВПроизводствеБух Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияБракВПроизводствеБух, 
			СтруктураПараметров.ТаблицаДвиженийБракВПроизводствеБух, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииМатериаловВЭксплуатацииБух Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииБух, 
			СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииБух, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияСтроительствоОбъектовОсновныхСредствБух Тогда
		  	
		  	ЗаписатьДвижения(СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредствБух, 
		  	СтруктураПараметров.ТаблицаДвиженийСтроительствоОбъектовОсновныхСредствБух, Замещать);
		  
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияКорректировкиПартииТоваровНал Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияКорректировкиПартииТоваровНал,
			СтруктураПараметров.ТаблицаДвиженийКорректировкиПартииТоваровНал, Замещать);
	
		КонецЕсли;

	КонецЕсли;
	
	
КонецПроцедуры

// Запись движений по меж учету
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьДвиженияДокументаМеж(СтруктураПараметров, ТаблицаСписания, Замещать)
	
	ОтражатьВМеждународномУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете;
	
	Если ОтражатьВМеждународномУчете Тогда
		
		// Международный учет
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровНаСкладахМеж Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровНаСкладахМеж, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровПереданныеМеж Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровПереданныеМеж, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНезавершенноеПроизводствоМеж Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНезавершенноеПроизводствомеж, 
			СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоМеж, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияМеждународный Тогда
			
			СтруктураПараметров.ДвиженияМеждународный.Записать(Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияБракВПроизводствеМеж Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияБракВПроизводствеМеж, 
			СтруктураПараметров.ТаблицаДвиженийБракВПроизводствеМеж, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияЗатратыМеж Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыМеж, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыМеж, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииМатериаловВЭксплуатацииМеж Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииМеж, 
			СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииМеж, Замещать);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-вход для записи движений документа в базу данных
//
Процедура ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, Замещать = Истина) Экспорт

	// Управленческий учет
	ЗаписатьДвиженияДокументаУпр(СтруктураПараметров, ТаблицаСписания, Замещать);
	
	// Бухгалтерский и налоговый учет
	ЗаписатьДвиженияДокументаРегл(СтруктураПараметров, ТаблицаСписания, Замещать);
	
	// Международный учет
	ЗаписатьДвиженияДокументаМеж(СтруктураПараметров, ТаблицаСписания, Замещать);
	
	// Запись наборов записей регистров, сформированных во внешних процедурах.
	// Используется при погашении стоимости спецодежды, спецоснастки и инвентаря.
	Если СтруктураПараметров.Свойство("НаборыЗаписейРегистров") Тогда
		УправлениеЗатратамиДвиженияПоРегистрам.ЗаписатьНаборыЗаписейРегистров(СтруктураПараметров.НаборыЗаписейРегистров);
	КонецЕсли;
	
КонецПроцедуры// ЗаписатьДвиженияДокумента()

// Приведение таблицы списания к требуемому виду
//
Процедура ПодготовитьТаблицуСписания(СтруктураПараметров, ТаблицаСписания, Упр, Бух) Экспорт
	
	Если ТаблицаСписания.Колонки.Найти("ВестиПартионныйУчетПоСериям") = Неопределено Тогда
		
		// Получим данные о признаках ведения учета по сериям, установленным для номенклатуры
		МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
		МассивНоменклатуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка,
		|	Номенклатура.ВестиПартионныйУчетПоСериям
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)");
		
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Выборка = Запрос.Выполнить().Выбрать();
		
		// Данные из запроса поместим в соответствие
		Соотв = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			Соотв.Вставить(Выборка.Ссылка, Выборка.ВестиПартионныйУчетПоСериям);
		КонецЦикла;
		
		// Заполним колонку "ВестиПартионныйУчетПоСериям" значениями из соответствия
		ТаблицаСписания.Колонки.Добавить("ВестиПартионныйУчетПоСериям", Новый ОписаниеТипов("Булево"));
		Для Каждого Строка Из ТаблицаСписания Цикл
			Строка.ВестиПартионныйУчетПоСериям = Соотв[Строка.Номенклатура];
		КонецЦикла;
	КонецЕсли;
	
	
	// Приведем к виду со всеми колонками
	Если ТаблицаСписания.Колонки.Найти("ОтражатьВУправленческомУчете") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("ОтражатьВУправленческомУчете", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаСписания.Колонки.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаСписания.Колонки.Найти("ОтражатьВМеждународномУчете") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("ОтражатьВМеждународномУчете", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаСписания.Колонки.Найти("ИсточникПоКодуОперации") <> Неопределено Тогда
		// Таблица строк получена запросом к регистру СписанныеТовары		
		СтруктураПараметров.Вставить("ЕстьНаСкладах", ТаблицаСписания.Найти("НаСкладах", "ИсточникПоКодуОперации") <> Неопределено);
		СтруктураПараметров.Вставить("ЕстьПереданные", ТаблицаСписания.Найти("Переданные", "ИсточникПоКодуОперации") <> Неопределено);
		
	Иначе	
		
		// Таблица строк получена из документа		
		ТаблицаСписания.Колонки.Добавить("ИсточникПоКодуОперации");
		ЕстьНаСкладах = Ложь;
		ЕстьПереданные = Ложь;		
		Для Каждого СтрокаСписания Из ТаблицаСписания Цикл
			СтрокаСписания.ИсточникПоКодуОперации = ПолучитьИсточникПоКодуОперации(СтрокаСписания.КодОперацииПартииТоваров);
			Если Не ЕстьНаСкладах И СтрокаСписания.ИсточникПоКодуОперации = "НаСкладах" Тогда
				ЕстьНаСкладах=Истина;
			ИначеЕсли НЕ ЕстьПереданные И СтрокаСписания.ИсточникПоКодуОперации = "Переданные" Тогда
				ЕстьПереданные=Истина;
			КонецЕсли;			
			
			СтрокаСписания.ОтражатьВУправленческомУчете = Упр И СтрокаСписания.ОтражатьВУправленческомУчете;
			СтрокаСписания.ОтражатьВБухгалтерскомУчете  = Бух И СтрокаСписания.ОтражатьВБухгалтерскомУчете;
			
		КонецЦикла;
		СтруктураПараметров.Вставить("ЕстьНаСкладах", ЕстьНаСкладах);
		СтруктураПараметров.Вставить("ЕстьПереданные", ЕстьПереданные);
	КонецЕсли;
	
	
КонецПроцедуры //ПодготовитьТаблицуСписания

/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЯ (КРЕДИТ)

// Структура отбора партий по упр учету заполняется нужными значениями
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета, СписыватьПустыеСерии)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		СтруктураОтбора.Вставить("Номенклатура",               СтрокаДокумента.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
		
		Если РегистрУчета="НаСкладах" Тогда
			
			// Дополнительно отбираются пустые серии на случай, если партионный учет по сериям был включен после проведения
			// документов оприходования. В этом случае серия не прописалась в регистры "ПартииТоваров"
			// Контроль остатков серии произведен по регистру "ТоварыНаСкладах"
			Если СписыватьПустыеСерии тогда
				СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
			Иначе
				// Серии не отбираются при резервировании т.к. в заказах нет серий
				Если СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
				   И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ Тогда
				
					СтруктураОтбора.Вставить("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтруктуруОтбораУпр()

// Структура отбора партий по регл учету заполняется нужными значениями
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьСтруктуруОтбораРегл(СтруктураОтбора, СтрокаДокумента, РегистрУчета, СписыватьПустыеСерии)
	
	// Бух
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураОтбора.Вставить("Номенклатура",               СтрокаДокумента.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
		СтруктураОтбора.Вставить("Организация",                СтрокаДокумента.Организация);
		
		
		Если РегистрУчета="НаСкладах" Тогда
			
			// Дополнительно отбираются пустые серии на случай, если партионный учет по сериям был включен после проведения
			// документов оприходования. В этом случае серия не прописалась в регистры "ПартииТоваров"
			// Контроль остатков серии произведен по регистру "ТоварыНаСкладах"
			Если СписыватьПустыеСерии тогда
				СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
			Иначе
				// Серии не отбираются при резервировании т.к. в заказах нет серий
				Если СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
				   И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ Тогда
				
					СтруктураОтбора.Вставить("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;//Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда

КонецПроцедуры // ЗаполнитьСтруктуруОтбораРегл()

// Структура отбора партий по меж учету заполняется нужными значениями
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьСтруктуруОтбораМеж(СтруктураОтбора, СтрокаДокумента, РегистрУчета, СписыватьПустыеСерии)
	
	// Меж
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		
		СтруктураОтбора.Вставить("СчетУчета",                  СтрокаДокумента.СчетУчетаМУ);
		СтруктураОтбора.Вставить("Номенклатура",               СтрокаДокумента.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
		СтруктураОтбора.Вставить("Организация",                СтрокаДокумента.Организация);
		
		Если РегистрУчета="НаСкладах" Тогда
			
			// Дополнительно отбираются пустые серии на случай, если партионный учет по сериям был включен после проведения
			// документов оприходования. В этом случае серия не прописалась в регистры "ПартииТоваров"
			// Контроль остатков серии произведен по регистру "ТоварыНаСкладах"
			Если СписыватьПустыеСерии тогда
				СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
			Иначе
				// Серии не отбираются при резервировании т.к. в заказах нет серий
				Если СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
				   И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ Тогда
					СтруктураОтбора.Вставить("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтруктуруОтбораМеж()

// Возвращает имя соответствующего регистра для строки по упр учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Если ВидРегистра="ПартииТоваров" Тогда
			ИмяРегистра = ВидРегистра + РегистрУчета + "Упр";
		Иначе
			ИмяРегистра = ВидРегистра + "Упр";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, "ПартииТоваров", РегистрУчета, СтрокаДокумента)

// Возвращает имя соответствующего регистра для строки по регл учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьПолучитьИмяРегистраРегл(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента)
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если ВидРегистра="ПартииТоваров" Тогда
			ИмяРегистра = ВидРегистра + РегистрУчета + "Бух";
		Иначе
			ИмяРегистра = ВидРегистра + "Бух";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПолучитьИмяРегистраРегл(ИмяРегистра, "ПартииТоваров", РегистрУчета, СтрокаДокумента)

// Возвращает имя соответствующего регистра для строки по межд учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьПолучитьИмяРегистраМеж(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента)
	
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		Если ВидРегистра="ПартииТоваров" Тогда
			ИмяРегистра = ВидРегистра + РегистрУчета + "Меж";
		Иначе
			ИмяРегистра = ВидРегистра + "Меж";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, "ПартииТоваров", РегистрУчета, СтрокаДокумента)

// Заполняет поля записи списания по упр учету
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПоляЗаписиСписанияУпр(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
		
		Если РегистрУчета="НаСкладах" Тогда
			Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;
			Движение.Склад 			        = СтрокаПартии.Склад;
			Движение.Заказ  				= СтрокаПартии.Заказ;
			Движение.Качество  				= СтрокаПартии.Качество;
			
		Иначе // Если РегистрУчета="Переданные" Тогда
			
			Движение.ДоговорКонтрагента	    = СтрокаПартии.ДоговорКонтрагента;
			Движение.ДокументПередачи		= СтрокаПартии.ДокументПередачи;
			
		КонецЕсли;
		
		Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;
		
		Движение.СтатусПартии		    = СтрокаПартии.СтатусПартии;
		
		// Реквизиты
		Движение.Подразделение	        = СтрокаДокумента.Подразделение;
		
		Если РегистрУчета="Переданные" Тогда
			Движение.СтатусПередачи		= СтрокаПартии.СтатусПередачи;
		КонецЕсли;
		
		// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
		
		// Номер строки, по которой списана партия
		// Используется при возврате товаров от покупателя, ордерной схеме поступления,
		// механизмом корректировки стоимости списания 
		Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;
		
		
		// Сумма выручки в валюте документа - для отчета комитенту
		Движение.СуммаВыручки = Окр(СтрокаДокумента.СуммаЗадолженности*КоэффПоступления, 2);
		// Валюты и курсы - для пересчета
		Движение.ВалютаДокумента = СтрокаДокумента.ВалютаДокумента;
		Движение.КурсДокумента = СтрокаДокумента.КурсДокумента;
		Движение.КратностьДокумента = СтрокаДокумента.КратностьДокумента;
		
		СтрокаДокумента.СуммаЗадолженности = СтрокаДокумента.СуммаЗадолженности - Движение.СуммаВыручки;
		
		// Количество поступления - для комплектации
		Движение.КоличествоПоступление    = Окр(СтрокаДокумента.КоличествоПоступление*КоэффПоступления, 3);
		СтрокаДокумента.КоличествоПоступление = СтрокаДокумента.КоличествоПоступление - Движение.КоличествоПоступление;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоляЗаписиСписанияУпр()

// Заполняет поля записи списания по регл учету
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПоляЗаписиСписанияРегл(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления, КоэффСписанияВалютный)
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
		
		Если РегистрУчета="НаСкладах" Тогда
			Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;
			Движение.Склад 			        = СтрокаПартии.Склад;
			Движение.Заказ  				= СтрокаПартии.Заказ;
			Движение.Качество  				= СтрокаПартии.Качество;
			
		Иначе // Если РегистрУчета="Переданные" Тогда
			
			Движение.ДоговорКонтрагента	    = СтрокаПартии.ДоговорКонтрагента;
			Движение.ДокументПередачи		= СтрокаПартии.ДокументПередачи;
			
		КонецЕсли;
		
		Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;
		
		Движение.СчетУчета		        = СтрокаПартии.СчетУчета;

		Движение.НалоговоеНазначение 			= СтрокаПартии.НалоговоеНазначение;
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.НалоговоеНазначениеПоФакту) Тогда
			Движение.НалоговоеНазначениеПоФакту = СтрокаПартии.НалоговоеНазначение;
		Иначе
			Движение.НалоговоеНазначениеПоФакту = СтрокаДокумента.НалоговоеНазначениеПоФакту;
		КонецЕсли;
		
		Движение.Организация	        = СтрокаДокумента.Организация;
		
		// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
		
		// Номер строки, по которой списана партия
		// Используется при возврате товаров от покупателя, ордерной схеме поступления,
		// механизмом корректировки стоимости списания 
		Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;
		
		Движение.СуммаВыручкиБУ     = Окр(СтрокаДокумента.СуммаЗадолженностиБУ * КоэффПоступления, 2);
		// Сумма задолженности
		Если Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику тогда
			// Для учета отклонений в стоимости при возврате поставщику
			Движение.ВалютнаяСуммаЗадолженностиБУ = Окр(Движение.Стоимость * КоэффСписанияВалютный, 2);
		Иначе
			Движение.ВалютнаяСуммаЗадолженностиБУ   = Окр(СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ * КоэффПоступления, 2);
			СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ = СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ - Движение.ВалютнаяСуммаЗадолженностиБУ;
		КонецЕсли;

		Движение.СтоимостьНУ        = Окр(СтрокаПартии.СтоимостьНУ  * КоэффСписания,2,1);
		Движение.НДСВходящий	    = Окр(СтрокаПартии.НДСВходящий  * КоэффСписания,2,1);
		Движение.НДСКредит		    = Окр(СтрокаПартии.НДСКредит  	* КоэффСписания,2,1);
		СтрокаПартии.СтоимостьНУ    = СтрокаПартии.СтоимостьНУ 		- Движение.СтоимостьНУ;
		СтрокаПартии.НДСВходящий 	= СтрокаПартии.НДСВходящий 	    - Движение.НДСВходящий;
		СтрокаПартии.НДСКредит		= СтрокаПартии.НДСКредит	    - Движение.НДСКредит;

		Движение.СуммаУценки	    = Окр(СтрокаПартии.СуммаУценки  * КоэффСписания,2,1);	
		СтрокаПартии.СуммаУценки 	= СтрокаПартии.СуммаУценки 		- Движение.СуммаУценки;

		// СтоимостьПоступление для учета отклонений в стоимости при реализации тары
		Движение.СтоимостьПоступление = Окр(СтрокаДокумента.СтоимостьПоступлениеБУ * КоэффПоступления, 2);
		
		// Уменьшим сумму в исх. строке
		СтрокаДокумента.СуммаЗадолженностиБУ = СтрокаДокумента.СуммаЗадолженностиБУ - Движение.СуммаВыручкиБУ;
		
		// Количество поступления - для комплектации
		Движение.КоличествоПоступление    = Окр(СтрокаДокумента.КоличествоПоступление*КоэффПоступления, 3);
		СтрокаДокумента.КоличествоПоступление = СтрокаДокумента.КоличествоПоступление - Движение.КоличествоПоступление;
		
	КонецЕсли;
	
	
КонецПроцедуры // ЗаполнитьПоляЗаписиСписанияРегл()

// Заполняет поля записи списания по межд учету
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПоляЗаписиСписанияМеж(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления)
	
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
		
		Если РегистрУчета="НаСкладах" Тогда
			Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;
			Движение.Склад 			        = СтрокаПартии.Склад;
			Движение.Заказ  				= СтрокаПартии.Заказ;
			Движение.Качество  				= СтрокаПартии.Качество;
			
		Иначе // Если РегистрУчета="Переданные" Тогда
			
			Движение.ДоговорКонтрагента	    = СтрокаПартии.ДоговорКонтрагента;
			Движение.ДокументПередачи		= СтрокаПартии.ДокументПередачи;
			
		КонецЕсли;
		
		Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;
		
		Движение.СчетУчета  		    = СтрокаПартии.СчетУчета;
		
		// Реквизиты
		Движение.Организация	        = СтрокаДокумента.Организация;
		
		// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
		
		// Номер строки, по которой списана партия
		// Используется при возврате товаров от покупателя, ордерной схеме поступления,
		// механизмом корректировки стоимости списания 
		Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;
		
		// Количество поступления - для комплектации
		Движение.КоличествоПоступление    = Окр(СтрокаДокумента.КоличествоПоступление*КоэффПоступления, 3);
		СтрокаДокумента.КоличествоПоступление = СтрокаДокумента.КоличествоПоступление - Движение.КоличествоПоступление;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоляЗаписиСписанияМеж()

// Возвращает текст содержащий вид табличной части
//
Функция ТекстСтрокиДокумента(СтрокаДокумента)

	Если ЗначениеЗаполнено(СтрокаДокумента.ВидТабличнойЧасти)Тогда
		
		ТекстСтрокиДокумента = ", табличная часть """ + Строка(СтрокаДокумента.ВидТабличнойЧасти)+"""";
		
	Иначе
		ТекстСтрокиДокумента =  " ";
		
	КонецЕсли;
	
	Возврат ТекстСтрокиДокумента;

КонецФункции // ТекстСтрокиДокумента()

// Сообщает о нехватке партии в управленческом учете
//
// Параметры:
//	СтрокаДокумента.
//
Процедура СообщитьОНехваткеПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	//Коновалова 13022013 +
	ПараметрыСеанса.ОтменитьСписаниеПоПартиям = Истина;
	//Коновалова 13022013 -

	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		СтрокаСообщения = "Управленческий учет. ";
		
		Если РегистрУчета = "НаСкладах" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
			+ ?(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров), ", со склада: " + СтрокаДокумента.Склад, "");
			
		ИначеЕсли РегистрУчета = "Переданные" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ", по договору " + СтрокаДокумента.ДоговорКонтрагента;
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Отказ", Истина);
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНехваткеПартииУпр()

// Сообщает о нехватке партии в регл учете
//
// Параметры:
//	СтрокаДокумента.
//
Процедура СообщитьОНехваткеПартииРегл(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	//Коновалова 13022013 +
	ПараметрыСеанса.ОтменитьСписаниеПоПартиям = Истина;
	//Коновалова 13022013 -
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтрокаСообщения = "Бухгалтерский учет. ";
		
		Если РегистрУчета = "НаСкладах" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
			+ ", счета учета " + СтрокаДокумента.СчетУчетаБУ + ", " + СтрокаДокумента.ПринятыеСчетУчетаБУ
			+ ", налоговое назначение "+ СтрокаДокумента.НалоговоеНазначениеПоФакту
			+ ?(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров), ", со склада: " + СтрокаДокумента.Склад, "");
			
		ИначеЕсли РегистрУчета = "Переданные" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ", счета учета " + СтрокаДокумента.СчетУчетаБУ + ", " + СтрокаДокумента.ПринятыеСчетУчетаБУ
			+ ", налоговое назначение "+ СтрокаДокумента.НалоговоеНазначениеПоФакту
			+ ", по договору " + СтрокаДокумента.ДоговорКонтрагента;
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Отказ", Истина);
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНехваткеПартииРегл()

// Сообщает о нехватке партии в меж учете
//
// Параметры:
//	СтрокаДокумента.
//
Процедура СообщитьОНехваткеПартииМеж(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		
		СтрокаСообщения = "Учет по МСФО. ";
		
		Если РегистрУчета = "НаСкладах" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
			+ ", счет учета " + СтрокаДокумента.СчетУчетаМУ
			+ ?(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров), ", со склада: " + СтрокаДокумента.Склад, "");
			
		ИначеЕсли РегистрУчета = "Переданные" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ", счет учета " + СтрокаДокумента.СчетУчетаМУ
			+ ", по договору " + СтрокаДокумента.ДоговорКонтрагента;
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Отказ", Истина);
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНехваткеПартииРегл()


// Сообщает о нехватке партии в управленческом учете
//
// Параметры:
//	СтрокаДокумента.
//
Процедура СообщитьОНеполномСписанииУказаннойПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	//Коновалова 13022013 +
	ПараметрыСеанса.ОтменитьСписаниеПоПартиям = Истина;
	//Коновалова 13022013 -
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		СтрокаСообщения = "Управленческий учет. ";

		СтрокаСообщения = СтрокаСообщения +
		"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
		+ "По указанному документу поступления товаров " + СтрокаДокумента.ДокументПартии + " партия не была списана полностью" + Символы.ПС
		+ " товар " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "");
			
		Сообщить(СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНехваткеПартииУпр()

// Сообщает о нехватке партии в регл учете
//
// Параметры:
//	СтрокаДокумента.
//
Процедура СообщитьОНеполномСписанииУказаннойПартииРегл(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	//Коновалова 13022013 +
	ПараметрыСеанса.ОтменитьСписаниеПоПартиям = Истина;
	//Коновалова 13022013 -
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтрокаСообщения = "Бухгалтерский учет. ";
		
		СтрокаСообщения = СтрокаСообщения +
		"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
		+ "По указанному документу поступления товаров " + СтрокаДокумента.ДокументПартии + " партия не была списана полностью" + Символы.ПС 
		+ " товар " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "");
		
		Сообщить(СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНехваткеПартииРегл()

// Сообщает о нехватке партии в меж учете
//
// Параметры:
//	СтрокаДокумента.
//
Процедура СообщитьОНеполномСписанииУказаннойПартииМеж(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		
		СтрокаСообщения = "Учет по МСФО. ";
		
		СтрокаСообщения = СтрокаСообщения +
		"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
		+ "По указанному документу поступления товаров " + СтрокаДокумента.ДокументПартии + " партия не была списана полностью" + Символы.ПС 
		+ " товар " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "");
		
		Сообщить(СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНехваткеПартииРегл()



// Общие

// Возвращает имя соответствующего регистра для строки
//
// Параметры:
//	Нет.
//
Функция ПолучитьИмяРегистра(ВидРегистра, РегистрУчета, СтрокаДокумента)
	
	ИмяРегистра ="";
	ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента);
	ПолучитьПолучитьИмяРегистраРегл(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента);
	ПолучитьПолучитьИмяРегистраМеж(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента);
	
	Возврат ИмяРегистра;
	
КонецФункции // ПолучитьИмяРегистра("ПартииТоваров", РегистрУчета, СтрокаДокумента)

// Отбирает в партиях строки соответствующие значениям обрабатываемой строки
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив строк
//
Функция ОтобратьСтрокиПартий(ТаблицаПартий, СтрокаДокумента, РегистрУчета) Экспорт
	
	// Структура отбор строк партий
	СтруктураОтбора = Новый Структура;
	
	ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Ложь);
	ЗаполнитьСтруктуруОтбораРегл(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Ложь);
	ЗаполнитьСтруктуруОтбораМеж(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Ложь);
	
	МассивСтрок = ТаблицаПартий.НайтиСтроки(СтруктураОтбора);
	
	// Для регистров "ПартииТоваровНаСкладах"...
	// Если серия заполнена - попытаемся отобрать дополнительно пустые серии
	// Если серия в документе не заполнена - пустые серии уже отобраны
	// Для переданных товаров учет по сериям не ведется.
	Если РегистрУчета ="НаСкладах" тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатуры) тогда
			
			// Серии не отбираются при резервировании т.к. в заказах нет серий
			Если СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
			   И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ Тогда
			
				ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Истина);
				ЗаполнитьСтруктуруОтбораРегл(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Истина);
				ЗаполнитьСтруктуруОтбораМеж(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Истина);
				
				МассивСтрокСПустымиСериями = ТаблицаПартий.НайтиСтроки(СтруктураОтбора);
				
				Для каждого Элемент из МассивСтрокСПустымиСериями Цикл
					МассивСтрок.Добавить(Элемент);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивСтрок;
	
КонецФункции // ОтобратьСтрокиПартий()

// Заполняет поля записи списания
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПоляЗаписиСписания(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления, КоэффСписанияВалютный)
	
	ЗаполнитьПоляЗаписиСписанияУпр(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления);
	ЗаполнитьПоляЗаписиСписанияРегл(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления, КоэффСписанияВалютный);
	ЗаполнитьПоляЗаписиСписанияМеж(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления);
	
КонецПроцедуры // ЗаполнитьПоляЗаписиСписания()


// Списание со склада по строке
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
// Возвращаемое значение:
//   ТаблицаЗначений   – таблица списанных партий
//
Процедура СписаниеПартий(СтрокаДокумента, СтруктураПараметров, РегистрУчета)
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	// Партии для данного учета
	ИмяРегистра = ПолучитьИмяРегистра("ПартииТоваров", РегистрУчета, СтрокаДокумента);
	
	// Если нет регистра, по которому списываем, тогда пропускаем
	Если ИмяРегистра="" Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоПартий = СтруктураПараметров["Дерево"+ИмяРегистра];
	
	СтруктураИзмерений = СтруктураПараметров[ИмяРегистра + "СтруктураИзмерений"];
	ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистра + "ТаблицаОстатков"];
	
	СтрокаДереваПартий = ДеревоПартий.Строки.Найти(СтрокаДокумента.НомерСтрокиДокумента, "НомерСтрокиДокумента");
	
	// Подлежащее погашению при списании Количество
	
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
	
	// В строке может быть указана стоимость поступления, если затем товар будет оприходован с другой стоимостью
	СтоимостьПоступлениеОсталосьПогасить = 0;
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		СтоимостьПоступлениеОсталосьПогасить = СтрокаДокумента.СтоимостьПоступление;
	КонецЕсли;
	

	КоэффСписанияВалютный = 0;
	
	// Валютная задолженность при возврате товаров поставщику должна списываться пропорционально стоимости
	Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику 
	   И СтрокаДокумента.СуммаЗадолженностиБУ <> 0 тогда
		КоэффСписанияВалютный = СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ/СтрокаДокумента.СуммаЗадолженностиБУ;
	Иначе
	КонецЕсли;

	КоличествоСписанноеПоДокументуПартии = 0;
	
	Если СтрокаДереваПартий <> Неопределено Тогда
		
		Для Каждого СтрокаПартииРаспределения ИЗ СтрокаДереваПартий.Строки Цикл
			
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий);
			
			// Количество по строке больше 0
			Если НЕ СтрокаПартии.Количество > 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/СтрокаПартии.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДокумента.ДокументПартии) И (СтрокаПартии.ДокументОприходования = СтрокаДокумента.ДокументПартии) Тогда
				КоличествоСписанноеПоДокументуПартии = КоличествоСписанноеПоДокументуПартии + Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
			КонецЕсли;	
			
			// Добавим новую строку
			Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров);
			
			// Свойства
			Движение.Период 	 = СтрокаДокумента.Период;
			Движение.Регистратор = СтрокаДокумента.Регистратор;
			Движение.Активность  = Истина;
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.Номенклатура = СтрокаПартии.Номенклатура;
			Движение.Организация = СтруктураПараметров.ОрганизацияУпр;
			
			// Ресурсы 
			Движение.Количество	= Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
			Движение.Стоимость	= Окр(СтрокаПартии.Стоимость  * КоэффСписания,2,1);
			
			// При возврате товаров поставщику необходимо сформировать проводки на разницу между суммой строки документа 
			// и стоимостью партий, списанных по строке документа
			Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете  Тогда
				Если СтрокаДокумента.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара Тогда
					СтруктураПараметров.СтоимостьСписанияТараБУ = СтруктураПараметров.СтоимостьСписанияТараБУ + Движение.Стоимость;
				Иначе
					СтруктураПараметров.СтоимостьСписанияБУ = СтруктураПараметров.СтоимостьСписанияБУ + Движение.Стоимость;
				КонецЕсли;
			КонецЕсли; 
			
			Если Движение.Количество < КоличествоОсталосьПогасить Тогда
				КоэффПоступления = Движение.Количество / КоличествоОсталосьПогасить;
			Иначе
				КоэффПоступления = 1;
			КонецЕсли;
			
			// Вспомогательное поле, не являющееся ресурсом, но используемое
			// для формирования записей по переоценке принятого на комиссию.
			Движение.СтоимостьПоступление = СтоимостьПоступлениеОсталосьПогасить * КоэффПоступления;
			СтоимостьПоступлениеОсталосьПогасить = СтоимостьПоступлениеОсталосьПогасить - Движение.СтоимостьПоступление;
			
			// Реквизиты
			Движение.КодОперации	= СтрокаДокумента.КодОперацииПартииТоваров;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
			
			СтрокаПартии.Количество = СтрокаПартии.Количество - Движение.Количество;
			СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - Движение.Стоимость;
			
			// Заполнение полей, специфических для учета
			ЗаполнитьПоляЗаписиСписания(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления, КоэффСписанияВалютный);
			
			// При возврате товаров поставщику необходимо сформировать проводки на разницу между суммой строки документа 
			// и стоимостью партий, списанных по строке документа
			Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете  Тогда
				Если СтрокаДокумента.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара Тогда
					СтруктураПараметров.СтоимостьСписанияТараБУВал = СтруктураПараметров.СтоимостьСписанияТараБУВал + Движение.ВалютнаяСуммаЗадолженностиБУ;
				Иначе
					СтруктураПараметров.СтоимостьСписанияБУВал = СтруктураПараметров.СтоимостьСписанияБУВал + Движение.ВалютнаяСуммаЗадолженностиБУ;
				КонецЕсли;
			КонецЕсли; 
			
			ПодготовитьДанныеДляВыполненияДвиженийПоРезульататамСписания(СтруктураПараметров, Движение, СтрокаПартии, СтрокаДокумента,РегистрУчета
			,"Списание", неопределено , Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	// Товара не хватило
	
	Если (КоличествоОсталосьПогасить > 0) Тогда
	  	СообщитьОНехваткеПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	Иначе
		Если ЗначениеЗаполнено(СтрокаДокумента.ДокументПартии) 
		  И (СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику)
 	  	  И (КоличествоСписанноеПоДокументуПартии < СтрокаДокумента.Количество) Тогда
			СообщитьОНеполномСписанииУказаннойПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // СписаниеПартий()

// Сообщение о нехватке партий
//
// Параметры:
//	Нет.
//
Процедура СообщитьОНехваткеПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	СообщитьОНехваткеПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	
	СообщитьОНехваткеПартииРегл(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	
	СообщитьОНехваткеПартииМеж(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	
КонецПроцедуры // СообщитьОНехваткеПартии()

// Сообщение о неполном списании явно указанной партии
//
// Параметры:
//	Нет.
//
Процедура СообщитьОНеполномСписанииУказаннойПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	СообщитьОНеполномСписанииУказаннойПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	
	СообщитьОНеполномСписанииУказаннойПартииРегл(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	
	СообщитьОНеполномСписанииУказаннойПартииМеж(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	
КонецПроцедуры // СообщитьОНехваткеПартии()

Функция ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ, ПсевдонимТаблицы)
	флПоСредней = ложь;
	Если ТипЗнч(СпособОценкиМПЗ)=Тип("Строка") И ВРег(СпособОценкиМПЗ) = "ПО СРЕДНЕЙ" Тогда
		флПоСредней = истина;
	КонецЕсли;
	Если флПоСредней Тогда
		стрПолеВыборки 		= "";
		стрПолеСортировки 	= "";
	Иначе
		стрПолеВыборки 		= ПсевдонимТаблицы+".ДокументОприходования.Дата КАК ДокументОприходованияДата,";
		стрПолеСортировки 	= "ДокументОприходованияДата"+ ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",";
	КонецЕсли;
	Возврат новый Структура("ДокОприходованияДата_Выбор,ДокОприходованияДата_Сортировка",стрПолеВыборки,стрПолеСортировки);
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ,ВЫПОЛНЯЕМЫЕ ПО РЕЗУЛЬТАТУ СПИСАНИЯ

// Отражение продажи комиссионного товара
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтруктураПараметров, ТаблицаСписания)
	
	МассивДокументов = Новый Массив;
	
	КодОперации = Перечисления.КодыОперацийПартииТоваров;
	
	Для Сч=1 По 2 Цикл
		
		// Первый раз движения по партиям на складах, второй - по партиям на комиссии
		Если Сч=1 Тогда
			
			ТаблицаСписанныхПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Скопировать();
			СписаноИз = "НаСкладах";
			
		Иначе
			ТаблицаСписанныхПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Скопировать();
			СписаноИз = "Переданные";
		КонецЕсли;
		
		// Из таблицы удалим движения, не относящиеся к продаже купленных товаров
		Инд=0;
		Пока Инд<ТаблицаСписанныхПартий.Количество() Цикл
			Строка = ТаблицаСписанныхПартий[Инд];
			
			// Товар должен быть комиссионным и списываться (операции определенных типов)
			Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию 
				
				И ( Строка.КодОперации = КодОперации.Реализация
				ИЛИ Строка.КодОперации = КодОперации.РеализацияРозница
				ИЛИ Строка.КодОперации = КодОперации.РеализацияКомиссия
				ИЛИ Строка.КодОперации = КодОперации.СписаниеНаЗатраты
				ИЛИ Строка.КодОперации = КодОперации.СписаниеПоИнвентаризации
				ИЛИ Строка.КодОперации = КодОперации.Комплектация
				ИЛИ Строка.КодОперации = КодОперации.ВозвратОтПокупателя
				ИЛИ Строка.КодОперации = КодОперации.ВозвратОтПокупателяТекущийМесяц
				
				)Тогда
				
				Инд = Инд+1;
				МассивДокументов.Добавить(Строка.ДокументОприходования);
			Иначе
				ТаблицаСписанныхПартий.Удалить(Инд);
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаСписанныхПартий.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ПолныеПрава.ПолучитьПараметрыДокументовОприходования(МассивДокументов, СтруктураПараметров.Период);
		
		СоотвДок = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			СоотвДок.Вставить(Выборка.Ссылка, Новый Структура("ДоговорПоставки, ВедениеВзаиморасчетов, Сделка, Ссылка, Валюта, Курс, Кратность", Выборка.ДоговорПоставки, Выборка.ВедениеВзаиморасчетов, Выборка.Сделка, Выборка.Ссылка, Выборка.Валюта, Выборка.Курс, Выборка.Кратность));
		КонецЦикла;	
			
		ДоговорПоставки        = Выборка.ДоговорПоставки;
		ВалютаДоговораПоставки = Выборка.Валюта;
		
		ВалютаУпр = Неопределено;
		КурсВалютыУпр = 0;
		КратностьВалютыУпр = 0;
		
		Для Каждого Движение Из ТаблицаСписанныхПартий Цикл
			
			ДвижениеРТ = ДобавитьДвижениеВСтруктуруПараметров("РеализованныеТовары", СтруктураПараметров);
			ДвижениеРТ.Период = СтруктураПараметров.Период;
			
			Если Движение.КодОперации = КодОперации.ВозвратОтПокупателя Тогда
				ДвижениеРТ.ВидДвижения = Движение.ВидДвижения;
				ДвижениеРТ.Количество  = -Движение.Количество;
				
			Иначе
				Если Движение.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
					ДвижениеРТ.ВидДвижения = ВидДвиженияНакопления.Приход;
				Иначе
					ДвижениеРТ.ВидДвижения = ВидДвиженияНакопления.Расход;
				КонецЕсли;
				ДвижениеРТ.Количество = Движение.Количество;
			КонецЕсли;
			
			ДвижениеРТ.Номенклатура = Движение.Номенклатура;
			ДвижениеРТ.ХарактеристикаНоменклатуры = Движение.ХарактеристикаНоменклатуры;
			
			Если ЗначениеЗаполнено(ТаблицаСписания[0].ПоступлениеПриходныйОрдер) Тогда
				//Это корректировка ордерной партии, возмем серию из движений
				ДвижениеРТ.СерияНоменклатуры = Движение.СерияНоменклатуры;
			Иначе	
				// серия номенклатуры в реализованных товарах должна совпадать со списанными товарами
				ДвижениеРТ.СерияНоменклатуры = ТаблицаСписания[Движение.НомерСтрокиСписанныхТоваров-1].СерияНоменклатуры;
			КонецЕсли;	

			ДвижениеРТ.ДокументПоставки	 = Движение.ДокументОприходования;

			
			СтруктураДок = СоотвДок[Движение.ДокументОприходования];
			
			Если СтруктураДок <> Неопределено Тогда
				ДвижениеРТ.ДоговорКонтрагента = СтруктураДок.ДоговорПоставки;
				
				Если СтруктураДок.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
					ИЛИ СтруктураДок.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
					
						Если ЗначениеЗаполнено(СтруктураДок.Сделка) Тогда
							ДвижениеРТ.Сделка = СтруктураДок.Сделка;
						Иначе
							ДвижениеРТ.Сделка = Неопределено;
						КонецЕсли;	
				КонецЕсли;
				
				Если Движение.СуммаВыручки<>0 Тогда
					// Пересчет выручки в валюту взаиморасчетов с комитентом
					ДвижениеРТ.Выручка = 
					МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Движение.СуммаВыручки, 
					Движение.ВалютаДокумента, СтруктураДок.Валюта, 
					Движение.КурсДокумента, СтруктураДок.Курс, 
					Движение.КратностьДокумента, СтруктураДок.Кратность);

				Иначе // по стоимости принятия на комиссию
					
					Если ВалютаУпр = Неопределено Тогда
						ВалютаУпр = глЗначениеПеременной("ВалютаУправленческогоУчета");
						СтруктураКурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Движение.Период, Новый Структура("Валюта", ВалютаУпр));
						КурсВалютыУпр = СтруктураКурсВалюты.Курс;
						КратностьВалютыУпр = СтруктураКурсВалюты.Кратность;
					КонецЕсли;
					
					ДвижениеРТ.Выручка = 
					МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Движение.Стоимость, 
					ВалютаУпр, СтруктураДок.Валюта, 
					КурсВалютыУпр, СтруктураДок.Курс, 
					КратностьВалютыУпр, СтруктураДок.Кратность);
				КонецЕсли;
				
				Если Движение.КодОперации = КодОперации.ВозвратОтПокупателя Тогда
					ДвижениеРТ.Выручка = -ДвижениеРТ.Выручка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтрокаДокумента, СтруктураПараметров, Движение)()

// Связанные со списанием движения по упр учету
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьСвязанныеДвиженияУпр(СтрокаДокумента, СтруктураПараметров, Движение)
	
	Если СтрокаДокумента.ОтражатьвУправленческомУчете Тогда
		Если СтрокаДокумента.НеСписывать И НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером 
		   И ( СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Реализация Или
				СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту) Тогда
				
			ОприходоватьТоварПринятыйНаОтветственноеХранениеУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВыполнитьСвязанныеДвиженияУпр()

/////////////////////////////////////////////////////////////////////////////////
// КОРРЕСПОНДИРУЮЩИЕ СПИСАНИЮ ДВИЖЕНИЯ (ДЕБЕТ)

//Ответственное хранение

//Процедура ОприходоватьТоварПринятыйНаОтветственноеХранение(СтрокаДокумента, СтруктураПараметров, Строка)

//	ОприходоватьТоварПринятыйНаОтветственноеХранениеУпр(СтрокаДокумента, СтруктураПараметров, Строка);
//	ОприходоватьТоварПринятыйНаОтветственноеХранениеБух(СтрокаДокумента, СтруктураПараметров, Строка);
//	
//КонецПроцедуры//ОприходоватьТоварПринятыйНаОтветственноеХранение

Процедура ОприходоватьТоварПринятыйНаОтветственноеХранениеУпр(СтрокаДокумента, СтруктураПараметров, Строка)

	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		Учет = "Упр";
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(Движение,Строка);
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ОтложеннаяОтгрузка;
	
	Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
		
		Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТараОтложеннаяОтгрузка;
	Иначе
			
		Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.КупленныйОтложеннаяОтгрузка;
	КонецЕсли;

КонецПроцедуры//ОприходоватьТоварПринятыйНаОтветственноеХранение


Процедура ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка)
	
	// Свойства из основного движения
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	
	// Свойства кор. движения
	Движение.Активность  = Истина;
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
КонецПроцедуры

// Движение по себестоимости продаж
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СписаниеНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Строка, ТипЗаписи = "Прямая")

	Если СтрокаДокумента.ВедениеУчетаПоПроектам Тогда
		
		// Создадим таблицу значений для передачи в ОтразитьДвиженияПоПроектам
		
		ТаблицаПоТоварам = Новый ТаблицаЗначений;
		
		Для каждого Колонка ИЗ СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки Цикл
			
			ТаблицаПоТоварам.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
			
		КонецЦикла;
		
		Если НЕ (ТипЗнч(СтрокаДокумента.Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам") 
		   И СтрокаДокумента.Проект.МетодРаспределения <> Перечисления.МетодыРаспределенияПоПроектам.РегламентнымДокументом) Тогда
		
			ТаблицаПоТоварам.Колонки.Добавить("Проект");
			ТаблицаПоТоварам.ЗаполнитьЗначения(СтрокаДокумента.Проект,"Проект");
			
		КонецЕсли;
		
		ТаблицаПоТоварам.Колонки.Добавить("СтоимостьБезСкидок",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		НоваяСтрока = ТаблицаПоТоварам.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
		ТаблицаДвижений = Новый ТаблицаЗначений;
		
		Для каждого Колонка ИЗ СтруктураПараметров.ТаблицаДвиженийПродажиСебестоимость.Колонки Цикл
			
			ТаблицаДвижений.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
			
		КонецЦикла;
		
		ТаблицаДвижений.Колонки.Добавить("Заказ");
		
		ТаблицаДвижений.Колонки.Добавить("СтатусПартии");
		
		ТаблицаДвижений.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		ТаблицаДвижений.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		ТаблицаДвижений.Колонки.Добавить("НомерКорСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));

		УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоТоварам,ТаблицаДвижений,СтрокаДокумента.Проект,СтруктураПараметров.Период,"Продажи");
		
		НуженНомерКорСтроки = Истина;
		Для Каждого Движение из ТаблицаДвижений Цикл
			СформироватьДвиженияСписанияНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи);
			Если НуженНомерКорСтроки тогда
				НуженНомерКорСтроки = Ложь;
				Строка.НомерКорСтроки = СтруктураПараметров.ТекНомерСтрокиПродажиСебестоимость;
			КонецЕсли;
		КонецЦикла;
		
		Возврат;

	КонецЕсли;

	СформироватьДвиженияСписанияНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Строка, ТипЗаписи);

КонецПроцедуры // СписаниеНаСебестоимостьПродажУпр()

Процедура СформироватьДвиженияСписанияНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Строка, ТипЗаписи = "Прямая")
	
	// Возвратная тара не двигается по ПродажиСебестоимость
	Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
		Возврат;
	КонецЕсли; 
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПродажиСебестоимость", СтруктураПараметров);
	
	Если ТипЗаписи = "Сторно" Тогда
		КоэффициентСторно = -1;
	Иначе
		КоэффициентСторно = 1;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Движение,Строка);
	
	Движение.Активность = Истина;
	
	Движение.Организация = СтруктураПараметров.ОрганизацияУпр;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания) Тогда
		
		Движение.ЗаказПокупателя = СтрокаДокумента.ЗаказСписания;
		
	ИначеЕсли ЗначениеЗаполнено(Строка.Заказ) Тогда
		
		Движение.ЗаказПокупателя = Строка.Заказ;
		
	Иначе
		
		Движение.ЗаказПокупателя = Неопределено;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураКомплекта) Тогда
	
		Движение.Номенклатура = СтрокаДокумента.НоменклатураКомплекта;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаКомплекта) Тогда
	
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаКомплекта;
	
	КонецЕсли;	
	
	Движение.Подразделение = СтрокаДокумента.Подразделение;
	
	Если (ЗначениеЗаполнено(СтрокаДокумента.НоменклатураКомплекта)) И (НЕ СтрокаДокумента.Количество = 0) Тогда
		Движение.Количество = КоэффициентСторно*СтрокаДокумента.КоличествоКомплекта*Строка.Количество/СтрокаДокумента.Количество;
	Иначе
		Движение.Количество = КоэффициентСторно*Строка.Количество;
	КонецЕсли;
	
	Если НЕ Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию Тогда
		Движение.Стоимость  = КоэффициентСторно*Строка.Стоимость;
	Иначе
		Если ЗначениеЗаполнено(СтрокаДокумента.ВалютаДокумента) Тогда
			
			ВалютаУпр = глЗначениеПеременной("ВалютаУправленческогоУчета");
			СтруктураКурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Движение.Период, Новый Структура("Валюта", ВалютаУпр));
			КурсВалютыУпр = СтруктураКурсВалюты.Курс;
			КратностьВалютыУпр = СтруктураКурсВалюты.Кратность;
			
			НеВключатьНДСВСтоимостьПартий = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("НеВключатьНДСВСтоимостьПартий", "Упр", СтруктураПараметров);
			НеВключатьНДСВСтоимостьПартий = ?(НеВключатьНДСВСтоимостьПартий = Неопределено, Ложь, НеВключатьНДСВСтоимостьПартий);
			Если НеВключатьНДСВСтоимостьПартий Тогда
				ВалютаРегл = глЗначениеПеременной("ВалютаРегламентированногоУчета");
				СуммаИсключаемогоНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаНДСВыручкиБУ, 
				ВалютаРегл, ВалютаУпр, 
				1, КурсВалютыУпр,
				1, КратностьВалютыУпр);
			Иначе
				СуммаИсключаемогоНДС = 0;
			КонецЕсли;	
			
			Движение.Стоимость = КоэффициентСторно*
			МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаВыручки, 
			СтрокаДокумента.ВалютаДокумента, ВалютаУпр, 
			СтрокаДокумента.КурсДокумента, КурсВалютыУпр,
			СтрокаДокумента.КратностьДокумента, КратностьВалютыУпр) - СуммаИсключаемогоНДС;
			
		Иначе	
			
			НеВключатьНДСВСтоимостьПартий = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("НеВключатьНДСВСтоимостьПартий", "Упр", СтруктураПараметров);
			НеВключатьНДСВСтоимостьПартий = ?(НеВключатьНДСВСтоимостьПартий = Неопределено, Ложь, НеВключатьНДСВСтоимостьПартий);
			Если НеВключатьНДСВСтоимостьПартий Тогда
				ВалютаУпр = глЗначениеПеременной("ВалютаУправленческогоУчета");
				СтруктураКурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Движение.Период, Новый Структура("Валюта", ВалютаУпр));
				КурсВалютыУпр = СтруктураКурсВалюты.Курс;
				КратностьВалютыУпр = СтруктураКурсВалюты.Кратность;
				
				ВалютаРегл = глЗначениеПеременной("ВалютаРегламентированногоУчета");
				СуммаИсключаемогоНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаНДСВыручкиБУ, 
				ВалютаРегл, ВалютаУпр, 
				1, КурсВалютыУпр,
				1, КратностьВалютыУпр);
			Иначе
				СуммаИсключаемогоНДС = 0;
			КонецЕсли;	
			
			Движение.Стоимость = КоэффициентСторно*Строка.СуммаВыручки - СуммаИсключаемогоНДС;
			
		КонецЕсли;	
	КонецЕсли;
	
	Строка.НомерКорСтроки = СтруктураПараметров.ТекНомерСтрокиПродажиСебестоимость;
	
КонецПроцедуры//СформироватьДвиженияСписанияНаСебестоимостьПродажУпр()

// Склад

Процедура ЗаполнитьСериюВДвижении(СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров)
	
	Если СтрокаДокумента.ВестиПартионныйУчетПоСериям И НЕ СтрокаДокумента.СкладПолучатель.НеВестиУчетПоСериям тогда
		
		// Если задана новая серия или установлен флаг изменить серию - подставляем ее
		Если ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатурыНовая) Или СтрокаДокумента.ИзменитьСерию Тогда
			
			Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;
			
		Иначе
			
			// Серия номенклатуры в движении списания есть, только если списано со склада 
			Если СписаноИз = "НаСкладах" Тогда
			
				Движение.СерияНоменклатуры	= Строка.СерияНоменклатуры;
				
			КонецЕсли;
			// При возврате товара от комиссионера или переработчика серия есть в строке документа
			Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера  
			   ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтПереработчика Тогда
				
				Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатуры;
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		Движение.СерияНоменклатуры	= Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры//ЗаполнитьСериюВДвижении()

// Поступление товаров на склад
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеНаСкладУпр(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	// Измерения
	ЗаполнитьСкладВДвижении(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров, СписаноИз);
	
	Движение.Номенклатура 	= Строка.Номенклатура;
	
	Движение.Организация 	= Строка.Организация;
	
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	
	// Если задана новая характеристика или установлен флаг изменить характеристику, подставляем ее
	Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Или СтрокаДокумента.ИзменитьХарактеристику Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		
	КонецЕсли;
	
	ЗаполнитьСериюВДвижении(СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров);
	
	// Качество номенклатуры в движении есть только, если списано со склада
	Если СписаноИз = "НаСкладах" Тогда
		
		Движение.Качество	= Строка.Качество;
	КонецЕсли;
	
	// Если задано новое качество, подставляем его
	Если ЗначениеЗаполнено(СтрокаДокумента.КачествоНовое) Тогда
		
		Движение.Качество = СтрокаДокумента.КачествоНовое;
	КонецЕсли;
	
	// Вместо пустого качества - новый
	Если НЕ ЗначениеЗаполнено(Движение.Качество) Тогда
		Движение.Качество = Справочники.Качество.Новый;
	КонецЕсли;
	
	Движение.ДокументОприходования = Строка.ДокументОприходования;
	
	Если НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера И 
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаСерийИХарактеристик И
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаКачества 
		Тогда
	
		Движение.Заказ	= ?(ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания), СтрокаДокумента.ЗаказСписания, Неопределено);
	
	КонецЕсли;
	
	Движение.СтатусПартии = Строка.СтатусПартии;
	
	// Новая номенклатура-для комплектации: меняется все
	// Аналогично обрабатывается включение оборудования в состав МПЗ
	Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая) Тогда
		
		Движение.Номенклатура = СтрокаДокумента.НоменклатураНовая;
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;
		
		СпособОценкиМПЗ = ВРег(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", Учет, СтруктураПараметров));
		Если СпособОценкиМПЗ <> "ПО СРЕДНЕЙ" тогда
			Движение.ДокументОприходования	= СтрокаДокумента.ДокументОприходованияНовый;
		Иначе
			Движение.ДокументОприходования	= Неопределено;
		КонецЕсли;

		// Комплект(ующее) приходуется со статусом партии, указанным в документе
		// Если значение не заполнено - статус партии "купленный"
		// Статус партии "по ордеру" не меняем
		Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация 
		Тогда
			Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.ПоОрдеру Тогда
				Движение.СтатусПартии = Строка.СтатусПартии;
			Иначе	
				Если ЗначениеЗаполнено(СтрокаДокумента.СтатусПартииНовый) тогда
					Движение.СтатусПартии = СтрокаДокумента.СтатусПартииНовый;
				Иначе
					Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	// Ресурсы
	Движение.Количество	= Строка.Количество;
	Движение.Стоимость	= Строка.Стоимость;
	
	// Новое количество-для комплектации
	Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация Тогда 
		Если Строка.Количество < 0 Тогда
			Движение.Количество	= -Строка.КоличествоПоступление;
		Иначе	
			Движение.Количество	= Строка.КоличествоПоступление;
		КонецЕсли;	
	КонецЕсли;
	
	// Оприходование может быть с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость = Строка.СтоимостьПоступление;
		
	КонецЕсли;

	// Реквизиты
	Движение.КодОперации  = СтрокаДокумента.КодОперацииПартииТоваров;

	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровНаСкладах"+Учет];
	
КонецПроцедуры//ПоступлениеНаСкладУпр()

// Поступление товаров на склад
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура ПоступлениеНаСкладБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка, Корректировка = Ложь)
	
	Учет = "Бух";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	// Измерения
	ЗаполнитьСкладВДвижении(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров, СписаноИз);
	
	Движение.Номенклатура 	= Строка.Номенклатура;
	
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	
	// Если задана новая характеристика или установлен флаг изменить характеристику, подставляем ее
	Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Или СтрокаДокумента.ИзменитьХарактеристику Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		
	КонецЕсли;
	
	ЗаполнитьСериюВДвижении(СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров);
	
	// Качество номенклатуры в движении есть только, если списано со склада
	Если СписаноИз = "НаСкладах" Тогда
		
		Движение.Качество	= Строка.Качество;
	КонецЕсли;
	
	// Если задано новое качество, подставляем его
	Если ЗначениеЗаполнено(СтрокаДокумента.КачествоНовое) Тогда
		
		Движение.Качество	= СтрокаДокумента.КачествоНовое;
	КонецЕсли;
	
	// Вместо пустого качества - новый
	Если НЕ ЗначениеЗаполнено(Движение.Качество) Тогда
		
		Движение.Качество = Справочники.Качество.Новый;
		
	КонецЕсли;
	
	Движение.ДокументОприходования = Строка.ДокументОприходования;
	
	Если НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера И 
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаСерийИХарактеристик И
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаКачества 
		Тогда
	
		Движение.Заказ	= ?(ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания), СтрокаДокумента.ЗаказСписания, Неопределено);
	
	КонецЕсли;
	
	// Если счет не изменился, может быть указан только счет учета
	Если ЗначениеЗаполнено(СтрокаДокумента.КорСчетБУ) Тогда
		Движение.СчетУчета = СтрокаДокумента.КорСчетБУ;
	Иначе
		Движение.СчетУчета = СтрокаДокумента.СчетУчетаБУ;
	КонецЕсли;
	
	// Если списан принятый на комиссию товар, то он приходуется на специально указанный счет
	Если ((ТипЗНЧ(СтрокаДокумента) = Тип("СтрокаТаблицыЗначений")) И (НЕ СтрокаДокумента.Владелец().Колонки.Найти("ПринятыеСчетУчетаБУ") = Неопределено))
	  ИЛИ ((ТипЗНЧ(СтрокаДокумента) = Тип("Структура")) И СтрокаДокумента.Свойство("ПринятыеСчетУчетаБУ"))	Тогда
		Если Строка.СчетУчета=СтрокаДокумента.ПринятыеСчетУчетаБУ Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.ПринятыеКорСчетБУ) Тогда
				Движение.СчетУчета = СтрокаДокумента.ПринятыеКорСчетБУ;
			Иначе
				Движение.СчетУчета = СтрокаДокумента.ПринятыеСчетУчетаБУ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтрокаДокумента.НалоговоеНазначениеНовое) Тогда
		Движение.НалоговоеНазначение 			= СтрокаДокумента.НалоговоеНазначениеНовое;
	Иначе
		Движение.НалоговоеНазначение 			= Строка.НалоговоеНазначение;
	КонецЕсли;
	
	Движение.Организация = СтрокаДокумента.Организация;
	
	// Новая номенклатура-для комплектации: меняется все
	Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая) Тогда
		
		Движение.Номенклатура= СтрокаДокумента.НоменклатураНовая;
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;
		
		СпособОценкиМПЗ = ВРег(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", Учет, СтруктураПараметров));
		Если СпособОценкиМПЗ <> "ПО СРЕДНЕЙ" тогда
			Движение.ДокументОприходования	= СтрокаДокумента.ДокументОприходованияНовый;
		Иначе
			Движение.ДокументОприходования	= Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.НалоговоеНазначениеНовое) Тогда
			Движение.НалоговоеНазначение 			= СтрокаДокумента.НалоговоеНазначениеНовое;
		Иначе
			Движение.НалоговоеНазначение 			= Строка.НалоговоеНазначение;
		КонецЕсли;
		
		
	КонецЕсли;
	
	// Ресурсы
	Если Не Корректировка Тогда
		Движение.СуммаУценки			= Строка.СуммаУценки;
	КонецЕсли;
	Движение.Количество	= Строка.Количество;
	Движение.Стоимость	= Строка.Стоимость;
	
	Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ПереоценкаПринятыхНаКомиссию Тогда
		// Значения в ресурсах СтоимостьНУ, НДСВходящий и НДСКредит оставим без изменений
		Движение.СтоимостьНУ = Строка.СтоимостьНУ
	Иначе
		Движение.СтоимостьНУ = НалоговыйУчет.ОпределитьСтоимостьНУ(Движение.НалоговоеНазначение, Строка.СтоимостьНУ);
	КонецЕсли;
	Движение.НДСВходящий	= Строка.НДСВходящий;
	Движение.НДСКредит		= Строка.НДСКредит;
	
	// Новое количество-для комплектации
	Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация Тогда 
		Движение.Количество	= Строка.КоличествоПоступление;
	КонецЕсли;
	
	// Оприходование может быть с новой стоимостью
	Если ((ТипЗНЧ(СтрокаДокумента) = Тип("СтрокаТаблицыЗначений")) И (НЕ СтрокаДокумента.Владелец().Колонки.Найти("СтоимостьПоступление") = Неопределено))
	  ИЛИ ((ТипЗНЧ(СтрокаДокумента) = Тип("Структура")) И СтрокаДокумента.Свойство("СтоимостьПоступление")) Тогда
		Если Строка.СтоимостьПоступление<>0 Тогда
			
			Движение.Стоимость = Строка.СтоимостьПоступление;
			
			
		КонецЕсли;
	КонецЕсли;	

	// Реквизиты
	Движение.КодОперации  = СтрокаДокумента.КодОперацииПартииТоваров;
						
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровНаСкладах"+Учет];
	
КонецПроцедуры//ПоступлениеНаСкладБух

// Поступление товаров на склад
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеНаСкладМеж(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Меж";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность = Истина;
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	// Измерения
	ЗаполнитьСкладВДвижении(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров, СписаноИз);		
	
	Движение.Номенклатура 	= Строка.Номенклатура;
	
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	
	// Если задана новая характеристика или установлен флаг изменить характеристику, подставляем ее
	Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Или СтрокаДокумента.ИзменитьХарактеристику Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		
	КонецЕсли;
	
	ЗаполнитьСериюВДвижении(СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров);
	
	// Качество номенклатуры в движении есть только, если списано со склада
	Если СписаноИз = "НаСкладах" Тогда
		
		Движение.Качество	= Строка.Качество;
	КонецЕсли;
	
	// Если задана новыя качество, подставляем его
	Если ЗначениеЗаполнено(СтрокаДокумента.КачествоНовое) Тогда
		
		Движение.Качество	= СтрокаДокумента.КачествоНовое;
	КонецЕсли;
	
	// Вместо пустого качества - новый
	Если НЕ ЗначениеЗаполнено(Движение.Качество) Тогда
		Движение.Качество	= Справочники.Качество.Новый;
	КонецЕсли;
	
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	Если НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера И 
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаСерийИХарактеристик И
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаКачества 
		Тогда
	
		Движение.Заказ	= ?(ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания), СтрокаДокумента.ЗаказСписания, Неопределено);
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.КорСчетМУ) Тогда
		Движение.СчетУчета	= СтрокаДокумента.КорСчетМУ;
	Иначе
		Движение.СчетУчета	= СтрокаДокумента.СчетУчетаМУ;
	КонецЕсли;
	
	Движение.Организация        = СтрокаДокумента.Организация;
	
	// Новая номенклатура-для комплектации: меняется все
	Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая) Тогда
		
		Движение.Номенклатура= СтрокаДокумента.НоменклатураНовая;
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;
		
		СпособОценкиМПЗ = ВРег(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", Учет, СтруктураПараметров));
		Если СпособОценкиМПЗ <> "ПО СРЕДНЕЙ" тогда
			Движение.ДокументОприходования	= СтрокаДокумента.ДокументОприходованияНовый;
		Иначе
			Движение.ДокументОприходования	= Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Ресурсы
	Движение.Количество	= Строка.Количество;
	Движение.Стоимость	= Строка.Стоимость;
	
	// Новое количество-для комплектации
	Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация Тогда 
		Движение.Количество	= Строка.КоличествоПоступление;
	КонецЕсли;
	
	// Оприходование может быть с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость		= Строка.СтоимостьПоступление;
		
	КонецЕсли;

	// Реквизиты
	Движение.КодОперации  = СтрокаДокумента.КодОперацииПартииТоваров;
						
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровНаСкладах"+Учет];
	
КонецПроцедуры//ПоступлениеНаСкладМеж

//Процедура изменяет вид склада в движениях по партионным регистрам 
Процедура ЗаполнитьСкладВДвижении(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров, СписаноИз)
	Если ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", Учет, СтруктураПараметров) = Истина Тогда
		// Если движение по заказу на переработку, то склад может не заполняться
		ВидЗаказа = ПрочитатьРеквизитДокумента("ВидОперации", СтрокаДокумента.ЗаказСписания);

		Если ВидЗаказа = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			// В движении склад не заполняется в двух случаях: 
			// - либо поступление - не со склада
			// - либо поступление - со склада, но исходный склад не заполнен
			Если НЕ (СписаноИз = "НаСкладах") ИЛИ НЕ ЗначениеЗаполнено(Строка.Склад) Тогда
				Движение.Склад	= Неопределено;
				Возврат;
			КонецЕсли
		КонецЕсли;
		
		// Если задан новый склад поступления, подставляем его
		Если ЗначениеЗаполнено(СтрокаДокумента.СкладПолучатель) Тогда
			Движение.Склад 	= СтрокаДокумента.СкладПолучатель;
		ИначеЕсли СписаноИз = "НаСкладах" Тогда
		// Склад в движении есть, только если списано со склада
		
			Движение.Склад	= Строка.Склад;
		Иначе
			Движение.Склад 	= СтрокаДокумента.Склад;
		КонецЕсли;
	Иначе
		Движение.Склад      = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Переданные на комиссию

// Поступление товаров отданных
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеПереданныхУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период                 = Строка.Период;
	Движение.Регистратор            = Строка.Регистратор;
	Движение.Активность				= Истина;
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	Движение.Номенклатура 			= Строка.Номенклатура;
	Движение.Организация 			= Строка.Организация;
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	Движение.СтатусПартии	    = Строка.СтатусПартии;
	Движение.СтатусПередачи		= СтрокаДокумента.СтатусПередачи;
	
	Движение.ДоговорКонтрагента	= СтрокаДокумента.ДоговорКонтрагента;
	Движение.ДокументПередачи   	= СтрокаДокумента.ДокументПередачи;
	
	// Ресурсы
	Движение.Количество				= Строка.Количество;
		
	Движение.Стоимость	= Строка.Стоимость;
	
	// Оприходование с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость			= Строка.СтоимостьПоступление;
		
	КонецЕсли;
	
	// Реквизиты
	Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;
						
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровПереданные"+Учет];

КонецПроцедуры

// Поступление товаров отданных
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеПереданныхБух(СтрокаДокумента, СтруктураПараметров, Строка, Корректировка = Ложь)
	
	Учет = "Бух";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период                 = Строка.Период;
	Движение.Регистратор            = Строка.Регистратор;
	Движение.Активность				= Истина;
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	Движение.Номенклатура 			= Строка.Номенклатура;
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	// Если счет не изменился, может быть указан только счет учета
	
	Если Строка.СчетУчета = СтрокаДокумента.СчетУчетаБУ Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.КорСчетБУ) Тогда
			Движение.СчетУчета		= СтрокаДокумента.КорСчетБУ;
		Иначе
			Движение.СчетУчета		= СтрокаДокумента.СчетУчетаБУ;
		КонецЕсли;
		
	ИначеЕсли Строка.СчетУчета = СтрокаДокумента.ПринятыеСчетУчетаБУ Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.ПринятыеКорСчетБУ) Тогда
			Движение.СчетУчета		= СтрокаДокумента.ПринятыеКорСчетБУ;
		КонецЕсли;
		
	КонецЕсли;
	
	Движение.НалоговоеНазначение = Строка.НалоговоеНазначение;
	
	Движение.Организация        = СтрокаДокумента.Организация;
	
	Движение.ДоговорКонтрагента	= СтрокаДокумента.ДоговорКонтрагента;
	Движение.ДокументПередачи   	= СтрокаДокумента.ДокументПередачи;
	
	// Ресурсы
	Если НЕ Корректировка Тогда
		Движение.СуммаУценки		= Строка.СуммаУценки;
	КонецЕсли;
	Движение.Количество	 = Строка.Количество;
		
	Движение.Стоимость	 = Строка.Стоимость;
	
	Движение.СтоимостьНУ = Строка.СтоимостьНУ;
	Движение.НДСВходящий = Строка.НДСВходящий;
	Движение.НДСКредит   = Строка.НДСКредит;
	
	// Оприходование с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость			= Строка.СтоимостьПоступление;
		
		
	КонецЕсли;
	
	// Реквизиты
	Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;
						
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровПереданные"+Учет];

КонецПроцедуры

// Поступление товаров отданных
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеПереданныхМеж(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Меж";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период                 = Строка.Период;
	Движение.Регистратор            = Строка.Регистратор;
	Движение.Активность				= Истина;
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	Движение.Номенклатура 			= Строка.Номенклатура;
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.КорСчетМУ) Тогда
		Движение.СчетУчета		= СтрокаДокумента.КорСчетМУ;
	Иначе
		Движение.СчетУчета		= СтрокаДокумента.СчетУчетаМУ;
	КонецЕсли;
	
	Движение.Организация        = СтрокаДокумента.Организация;
	
	Движение.ДоговорКонтрагента	= СтрокаДокумента.ДоговорКонтрагента;
	Движение.ДокументПередачи   	= СтрокаДокумента.ДокументПередачи;
	
	// Ресурсы
	Движение.Количество				= Строка.Количество;
		
	Движение.Стоимость	= Строка.Стоимость;
	
	// Оприходование с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость			= Строка.СтоимостьПоступление;
		
	КонецЕсли;
	
	// Реквизиты
	Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;
						
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровПереданные"+Учет];

КонецПроцедуры

// Списание на постоянные затраты

// Поступление товаров на постоянные затраты
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Проект = СтрокаДокумента.Проект;

	Если СтрокаДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда

		Если ТипЗнч(Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам")
		   И Проект.МетодРаспределения = Перечисления.МетодыРаспределенияПоПроектам.ПриПроведенииДокументов Тогда
			
			// Создадим таблицу значений для передачи в РаспределитьЗатратыПоПроектам

			ТаблицаДвижений = Новый ТаблицаЗначений;

			Для каждого Колонка ИЗ СтруктураПараметров.ТаблицаДвиженийЗатратыУпр.Колонки Цикл

				ТаблицаДвижений.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);

			КонецЦикла;

			НоваяСтрока = ТаблицаДвижений.Добавить();

			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.Сумма = Строка.Стоимость;

			ТаблицаДвижений.Колонки.Добавить("НомерКорСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
			ТаблицаДвижений.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

			УправлениеПроектами.РаспределитьЗатратыПоПроектам(ТаблицаДвижений,НоваяСтрока, НоваяСтрока.Сумма, СтрокаДокумента.Проект,СтруктураПараметров.Период);

			НуженНомерКорСтроки = Истина;
			Для Каждого Движение из ТаблицаДвижений Цикл
				Движение.Стоимость = Движение.Сумма;
				СформироватьДвиженияСписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Движение, Движение.Проект);
				Если НуженНомерКорСтроки тогда
					НуженНомерКорСтроки = Ложь;
					Строка.НомерКорСтроки = СтруктураПараметров.ТекНомерСтрокиПродажиСебестоимость;
				КонецЕсли;
			КонецЦикла;

			Возврат;

		КонецЕсли;

	КонецЕсли;

	Если НЕ СтрокаДокумента.ВедениеУчетаПоПроектам тогда
		Проект = Неопределено;
	КонецЕсли;

	СформироватьДвиженияСписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Строка, Проект);

КонецПроцедуры//СписаниеНаПостоянныеЗатратыУпр

Процедура СформироватьДвиженияСписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Строка, Проект)

	//Смартис Лиманчук начало 10.04.2013
	//при списании товаров на подотчетника не делаем движений по регистру Затраты
	Если ТипЗнч(СтрокаДокумента.Регистратор) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		Если СтрокаДокумента.Регистратор.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукцияЧерезПодотчет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//Смартис Лиманчук окончание 10.04.2013
	
	Учет = "Упр";

	Движение = ДобавитьДвижениеВСтруктуруПараметров("Затраты"+Учет, СтруктураПараметров);

	// Свойства
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);

	Движение.Проект 				= Проект;

	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, , СтруктураПараметров);

	// Ресурсы
	Движение.Сумма				    = Строка.Стоимость;

	ЗаполнитьЗначенияСвойств(Строка, Новый Структура("НомерКорСтроки",СтруктураПараметров["ТекНомерСтрокиЗатраты"+Учет]));

КонецПроцедуры // СформироватьДвиженияСписаниеНаПостоянныеЗатратыУпр


// Поступление товаров на постоянные затраты
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СписаниеНаПостоянныеЗатратыБух(СтрокаДокумента, СтруктураПараметров, Строка)

	//Смартис Лиманчук начало 10.04.2013
	//при списании товаров на подотчетника не делаем движений по регистру Затраты бух
	Если ТипЗнч(СтрокаДокумента.Регистратор) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		Если СтрокаДокумента.Регистратор.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукцияЧерезПодотчет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//Смартис Лиманчук окончание 10.04.2013
	
	Учет = "Бух";

	Движение = ДобавитьДвижениеВСтруктуруПараметров("Затраты"+Учет, СтруктураПараметров);

	// Свойства
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);

	Движение.Подразделение	= СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета		= СтрокаДокумента.КорСчетБУ;
	
	Движение.НалоговоеНазначение 	    = СтрокаДокумента.НалоговоеНазначениеНовое;

	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);

	// Ресурсы
	Движение.Сумма	= Строка.Стоимость;
	
	Движение.СуммаНУ		= НалоговыйУчет.ОпределитьСтоимостьНУ(Движение.НалоговоеНазначение, Строка.СтоимостьНУ);
	Движение.НДСВходящий	= Строка.НДСВходящий;
	Движение.НДСКредит		= Строка.НДСКредит;
	

	// Реквизиты
	ЗаполнитьЗначенияСвойств(Строка, Новый Структура("НомерКорСтроки",СтруктураПараметров["ТекНомерСтрокиЗатраты"+Учет]));

КонецПроцедуры // СписаниеНаПостоянныеЗатратыБух

// Поступление товаров на постоянные затраты
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СписаниеНаПостоянныеЗатратыМеж(СтрокаДокумента, СтруктураПараметров, Строка)

	Учет = "Меж";

	Движение = ДобавитьДвижениеВСтруктуруПараметров("Затраты"+Учет, СтруктураПараметров);

	// Свойства
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);

	Движение.Подразделение	= СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета		= СтрокаДокумента.КорСчетМУ;

	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);

	// Ресурсы
	Движение.Сумма	= Строка.Стоимость;

	// Реквизиты
	ЗаполнитьЗначенияСвойств(Строка, Новый Структура("НомерКорСтроки",СтруктураПараметров["ТекНомерСтрокиЗатраты"+Учет]));

КонецПроцедуры // СписаниеНаПостоянныеЗатратыМеж

// Списание в производство

Процедура ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, Организация = Неопределено, СтруктураПараметров)
	
	УчетЗатратПоЗаказамНаПроизводство = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("УчетЗатратПоЗаказамНаПроизводство", Учет, СтруктураПараметров);

	// Заказ списания
	ЗаказСписания = Неопределено;
	Если ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания) Тогда
		Если ТипЗнч(СтрокаДокумента.ЗаказСписания) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ЗаказСписания = СтрокаДокумента.ЗаказСписания;
		ИначеЕсли ТипЗнч(СтрокаДокумента.ЗаказСписания) = Тип("ДокументСсылка.ЗаказНаПроизводство") И УчетЗатратПоЗаказамНаПроизводство Тогда
			ЗаказСписания = СтрокаДокумента.ЗаказСписания;
		КонецЕсли;
	КонецЕсли;
	
	Движение.Заказ = ЗаказСписания;

КонецПроцедуры // ЗаполнитьЗаказВДвижении

// Поступление товаров в незавершенное производство
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура ПоступлениеВПроизводствоУпр(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("НезавершенноеПроизводство"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность = Истина;
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	Движение.Подразделение 			= СтрокаДокумента.Подразделение;
	Движение.НоменклатурнаяГруппа 	= СтрокаДокумента.НоменклатурнаяГруппа;
	
	Движение.СтатьяЗатрат 			= СтрокаДокумента.СтатьяЗатрат;
	
	Движение.Затрата				= Строка.Номенклатура;
	Движение.ХарактеристикаЗатраты  = Строка.ХарактеристикаНоменклатуры;
	
	СтруктураРеквизитов = Новый Структура("ВестиУчетПоСериямВНЗП");
	ПолучитьРеквизитыОбъекта(Строка.Номенклатура, СтруктураРеквизитов);
	
	Если СтруктураРеквизитов.ВестиУчетПоСериямВНЗП Тогда
		Движение.СерияЗатраты = СтрокаДокумента.СерияНоменклатуры;
	КонецЕсли;
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, Неопределено, СтруктураПараметров);
	
	// Ресурсы
	Движение.Количество = Строка.Количество;
	
	Движение.Стоимость	= Строка.Стоимость;
	
	// Реквизиты
	Движение.КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно; 
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиНезавершенноеПроизводство"+Учет];
	
КонецПроцедуры // ПоступлениеВПроизводствоУпр

// Поступление товаров в незавершенное производство
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура ПоступлениеВПроизводствоБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Бух";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("НезавершенноеПроизводство"+Учет, СтруктураПараметров);
	
	// Свойства
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);
	
	Движение.Подразделение 			= СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета              = СтрокаДокумента.КорСчетБУ;
	
	Движение.НалоговоеНазначение 	    = СтрокаДокумента.НалоговоеНазначениеНовое;
	
	Движение.Затрата				= Строка.Номенклатура;
	Движение.ХарактеристикаЗатраты  = Строка.ХарактеристикаНоменклатуры;
	
	СтруктураРеквизитов = Новый Структура("ВестиУчетПоСериямВНЗП");
	ПолучитьРеквизитыОбъекта(Строка.Номенклатура, СтруктураРеквизитов);
	
	Если СтруктураРеквизитов.ВестиУчетПоСериямВНЗП Тогда
		Движение.СерияЗатраты = СтрокаДокумента.СерияНоменклатуры;
	КонецЕсли;
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);
	
	// Ресурсы
	Движение.Количество = Строка.Количество;
	
	Движение.Стоимость = Строка.Стоимость;
	
	Движение.СтоимостьНУ	= НалоговыйУчет.ОпределитьСтоимостьНУ(Движение.НалоговоеНазначение, Строка.СтоимостьНУ);
	Движение.НДСВходящий	= Строка.НДСВходящий;
	Движение.НДСКредит		= Строка.НДСКредит;
	
	// Реквизиты
	Движение.КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно; 
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиНезавершенноеПроизводство"+Учет];
	
КонецПроцедуры // ПоступлениеВПроизводствоБух

// Поступление товаров в незавершенное производство
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура ПоступлениеВПроизводствоМеж(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Меж";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("НезавершенноеПроизводство"+Учет, СтруктураПараметров);
	
	// Свойства
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);
	
	Движение.Подразделение			= СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета				= СтрокаДокумента.КорСчетМУ;
	
	Движение.Затрата				= Строка.Номенклатура;
	Движение.ХарактеристикаЗатраты	= Строка.ХарактеристикаНоменклатуры;
	
	СтруктураРеквизитов = Новый Структура("ВестиУчетПоСериямВНЗП");
	ПолучитьРеквизитыОбъекта(Строка.Номенклатура, СтруктураРеквизитов);
	
	Если СтруктураРеквизитов.ВестиУчетПоСериямВНЗП Тогда
		Движение.СерияЗатраты = СтрокаДокумента.СерияНоменклатуры;
	КонецЕсли;
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);
	
	// Ресурсы
	Движение.Количество = Строка.Количество;
	
	Движение.Стоимость = Строка.Стоимость;
	
	// Реквизиты
	Движение.КодОперации  = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиНезавершенноеПроизводство"+Учет];
	
КонецПроцедуры // ПоступлениеВПроизводствоМеж

// Списание на брак

Процедура ЗаполнитьОбщиеСвойстваСписанияНаБрак(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров)

	// Сначала заполним свойства называющиеся так же, как в строке документа
	ЗаполнитьЗначенияСвойств(Движение,СтрокаДокумента);
	
	// Свойства с отличающимся названием
	Движение.ХарактеристикаПродукции = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
	Движение.СерияПродукции			 = СтрокаДокумента.СерияНоменклатурыНовая;
	
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);
	// Свойства из основного движения
	Движение.Сумма       = Строка.Стоимость;

	// Реквизиты
	Движение.КодОперации = Перечисления.КодыОперацийБракВПроизводстве.СписаниеПартийВПроизводствоОперативно; 
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиБракВПроизводстве"+Учет];

КонецПроцедуры // ЗаполнитьОбщиеСвойстваСписанияНаБрак

// Списание на брак
//
// Параметры
//
Процедура СписаниеНаБракУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("БракВПроизводстве"+Учет, СтруктураПараметров);
	
	ЗаполнитьОбщиеСвойстваСписанияНаБрак(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров );
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, , СтруктураПараметров);
	
КонецПроцедуры // СписаниеНаБракУпр

// Списание на брак
//
// Параметры
//
Процедура СписаниеНаБракБух(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Бух";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("БракВПроизводстве"+Учет, СтруктураПараметров);
	
	ЗаполнитьОбщиеСвойстваСписанияНаБрак(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров);
	
	Движение.Подразделение	= СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета		= СтрокаДокумента.КорСчетБУ;
	
	Движение.НалоговоеНазначение 	    = СтрокаДокумента.НалоговоеНазначениеНовое;
	
	
	Движение.СуммаНУ		= НалоговыйУчет.ОпределитьСтоимостьНУ(Движение.НалоговоеНазначение, Строка.СтоимостьНУ);
	Движение.НДСВходящий	= Строка.НДСВходящий;
	Движение.НДСКредит		= Строка.НДСКредит;
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);

КонецПроцедуры // СписаниеНаБракБух

// Списание на брак
//
// Параметры
//
Процедура СписаниеНаБракМеж(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Меж";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("БракВПроизводстве"+Учет, СтруктураПараметров);
	
	ЗаполнитьОбщиеСвойстваСписанияНаБрак(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров);
	
	Движение.Подразделение	= СтрокаДокумента.ПодразделениеОрганизации;
	Движение.СчетУчета		= СтрокаДокумента.КорСчетМУ;
	
	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);

КонецПроцедуры // СписаниеНаБракМеж

// Вложения во внеоборотные активы

// Вложения в объекты внеоборотных активов 
//
// Параметры
//
Процедура ВложенияВоВнеоборотныеАктивыУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	// Движение по регистру накопления стоимости объектов строительства
	Движение = ДобавитьДвижениеВСтруктуруПараметров("СтроительствоОбъектовОсновныхСредствУпр", СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность = Истина;
	
	Движение.ВидДвижения         = ВидДвиженияНакопления.Приход;
	
	Движение.ОбъектСтроительства = СтрокаДокумента.ОбъектСтроительства;
	
	Движение.Сумма				 = Строка.Стоимость;
	
	// Реквизиты
	//Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиСтроительствоОбъектовОсновныхСредств"];
	
	// Движение по регистру учета оборота затрат
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ЗатратыНаСтроительствоОбъектовОсновныхСредств", СтруктураПараметров);
	
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность = Истина;
	
	Движение.ОбъектСтроительства = СтрокаДокумента.ОбъектСтроительства;
	Движение.СтатьяЗатрат        = СтрокаДокумента.СтатьяЗатрат;
	
	Движение.Сумма				 = Строка.Стоимость;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиЗатратыНаСтроительствоОбъектовОсновныхСредств"];
	
	// Реквизиты
	
КонецПроцедуры

// Списание на амортизацию

Процедура СписаниеНаАмортизациюУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("СтоимостьОС"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.ОсновноеСредство = СтрокаДокумента.ОсновноеСредство;
	
	Если Учет = "Бух"
		ИЛИ Учет = "Нал" Тогда
		
		Движение.Организация  = СтрокаДокумента.Организация;
		Движение.ВидОперации  = Перечисления.ВидыСобытийОС.ПринятиеКУчету;
		
	КонецЕсли;
	
	Движение.Стоимость = Строка.Стоимость;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиСтоимостьОС"+Учет];
	
КонецПроцедуры

Процедура СписаниеНаАмортизациюБух(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Бух";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("СтоимостьОС"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.ОсновноеСредство = СтрокаДокумента.ОсновноеСредство;
	
	Движение.Организация  = СтрокаДокумента.Организация;
	Движение.ВидОперации  = Перечисления.ВидыСобытийОС.ПринятиеКУчету;
	
	Движение.Стоимость = Строка.Стоимость;
	Движение.СтоимостьНУ = Строка.СтоимостьНУ;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиСтоимостьОС"+Учет];
	
КонецПроцедуры

// Передача материалов в эксплуатацию

Процедура ПередачаМатериаловВЭксплуатациюУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	ИмяРегистра = "ПартииМатериаловВЭксплуатации"+ "Упр";
	
	// Измерение ФизЛицо в регистрах партии материалов в эксплуатации обязательно для 
	// заполнения.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ФизЛицо) Тогда
	
		Возврат;
	
	КонецЕсли; 
	Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.Подразделение           = СтрокаДокумента.Подразделение;
	Движение.Номенклатура            = Строка.Номенклатура;
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	Движение.СерияНоменклатуры       = Строка.СерияНоменклатуры;
	
	Движение.Качество				 = Строка.Качество;
	Движение.ДокументОприходования   = Строка.ДокументОприходования;
	
	Движение.ДокументПередачи        = СтрокаДокумента.ДокументПередачи;
	Движение.ФизЛицо                 = СтрокаДокумента.ФизЛицо;
	Движение.СхемаНазначенияИспользования 	= СтрокаДокумента.СхемаНазначенияИспользования;
	Движение.СпособОтраженияРасходов 		= СтрокаДокумента.СпособОтраженияРасходов;
	Движение.СрокПолезногоИспользования 	= СтрокаДокумента.СрокПолезногоИспользования;
	
	Движение.Количество = Строка.Количество;
	
	Движение.Стоимость  = Строка.Стоимость;
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра];
	
КонецПроцедуры // ПередачаМатериаловВЭксплуатациюУпр()

Процедура ПередачаМатериаловВЭксплуатациюБух(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Бух";

	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ФизЛицо) Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииМатериаловВЭксплуатации"+ Учет, СтруктураПараметров);
	
	// Свойства
	ЗаполнитьЗначенияСвойств(Движение, Строка);
	
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);
	
	Движение.Подразделение           = СтрокаДокумента.ПодразделениеОрганизации;
	Движение.Качество				 = Строка.Качество;
	Движение.ДокументОприходования   = Строка.ДокументОприходования;
	
	Движение.ДокументПередачи        = СтрокаДокумента.ДокументПередачи;
	Движение.ФизЛицо                 = СтрокаДокумента.ФизЛицо;
	Движение.СхемаНазначенияИспользования 	= СтрокаДокумента.СхемаНазначенияИспользования;
	Движение.СпособОтраженияРасходов 		= СтрокаДокумента.СпособОтраженияРасходов;
	Движение.СрокПолезногоИспользования 	= СтрокаДокумента.СрокПолезногоИспользования;
	
	Движение.НалоговоеНазначение  = СтрокаДокумента.НалоговоеНазначениеНовое;
	
	Движение.СтоимостьНУ			 = НалоговыйУчет.ОпределитьСтоимостьНУ(Движение.НалоговоеНазначение, Строка.СтоимостьНУ);
	Движение.НДСВходящий			 = Строка.НДСВходящий;
	Движение.НДСКредит				 = Строка.НДСКредит;
	
	
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииМатериаловВЭксплуатации"+ Учет];

КонецПроцедуры // ПередачаМатериаловВЭксплуатациюБух()

Процедура ПередачаМатериаловВЭксплуатациюМеж(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Меж";
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ФизЛицо) Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииМатериаловВЭксплуатации"+ Учет, СтруктураПараметров);

	ЗаполнитьЗначенияСвойств(Движение, Строка);
	
	ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);

	Движение.Подразделение           = СтрокаДокумента.ПодразделениеОрганизации;
	Движение.ДокументПередачи        = СтрокаДокумента.ДокументПередачи;
	Движение.ФизЛицо                 = СтрокаДокумента.ФизЛицо;
	Движение.СхемаНазначенияИспользования 	= СтрокаДокумента.СхемаНазначенияИспользования;
	Движение.СпособОтраженияРасходов 		= СтрокаДокумента.СпособОтраженияРасходов;
	Движение.СрокПолезногоИспользования 	= СтрокаДокумента.СрокПолезногоИспользования;

	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииМатериаловВЭксплуатации"+ Учет];

КонецПроцедуры // ПередачаМатериаловВЭксплуатациюМеж()

// Общая процедура поступления: маршрутизирует алгоритм поступления
//
Процедура ВыполнитьКорДвижениеУпр(СписаноИз, ПриходоватьВ, СтрокаДокумента, СтруктураПараметров, Движение) Экспорт
			
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		// Общие для всех учетов алгоритмы
		Если ПриходоватьВ = "НаСкладах" Тогда
			
			ПоступлениеНаСкладУпр(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "Переданные" Тогда
			
			ПоступлениеПереданныхУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "СебестоимостьПродаж" Тогда
			СписаниеНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Движение);			
		ИначеЕсли ПриходоватьВ = "ПроизводственныеРасходы" Тогда
			
			ПоступлениеВПроизводствоУпр(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "БракВПроизводстве" Тогда
			
			СписаниеНаБракУпр(СтрокаДокумента, СтруктураПараметров, Движение);
		
		ИначеЕсли ПриходоватьВ = "ВложенияВоВнеоборотныеАктивы" Тогда
			
			ВложенияВоВнеоборотныеАктивыУпр(СтрокаДокумента, СтруктураПараметров, Движение);
		
		ИначеЕсли ПриходоватьВ = "ОбщепроизводственныеРасходы"
			ИЛИ ПриходоватьВ = "АдминистративныеРасходы" 
			ИЛИ ПриходоватьВ = "РасходыНаСбыт"
			ИЛИ ПриходоватьВ = "ПрочиеОперационныеРасходы"
			ИЛИ ПриходоватьВ = "ТранспортноЗаготовительныеРасходы"
			ИЛИ ПриходоватьВ = "Затраты" Тогда
			
			СписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "СтоимостьОСПриПринятииКУчету" Тогда
			
			СписаниеНаАмортизациюУпр(СтрокаДокумента, СтруктураПараметров, Движение);
		
		ИначеЕсли ПриходоватьВ = "ПартииМатериаловВЭксплуатации" Тогда
			
			ПередачаМатериаловВЭксплуатациюУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Общая процедура поступления: маршрутизирует алгоритм поступления
//
Процедура ВыполнитьКорДвижениеРегл(СписаноИз, ПриходоватьВ, СтрокаДокумента, СтруктураПараметров, Движение, Корректировка = Ложь) Экспорт
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
			
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		// Общие для всех учетов алгоритмы
		Если ПриходоватьВ = "НаСкладах" Тогда
			
			ПоступлениеНаСкладБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение, Корректировка);
			
		ИначеЕсли ПриходоватьВ = "Переданные" Тогда
			
			ПоступлениеПереданныхБух(СтрокаДокумента, СтруктураПараметров, Движение, Корректировка);
			
		ИначеЕсли ПриходоватьВ = "ПроизводственныеРасходы" Тогда
			
			ПоступлениеВПроизводствоБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "БракВПроизводстве" Тогда
			
			СписаниеНаБракБух(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
		Если ПриходоватьВ = "ОбщепроизводственныеРасходы"
			ИЛИ ПриходоватьВ = "АдминистративныеРасходы" 
			ИЛИ ПриходоватьВ = "РасходыНаСбыт"
			ИЛИ ПриходоватьВ = "ТранспортноЗаготовительныеРасходы"
			ИЛИ ПриходоватьВ = "ПрочиеОперационныеРасходы" Тогда
			
			СписаниеНаПостоянныеЗатратыБух(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "СтоимостьОСПриПринятииКУчету" Тогда
			
			СписаниеНаАмортизациюБух(СтрокаДокумента, СтруктураПараметров, Движение);
			
		
		ИначеЕсли ПриходоватьВ = "ПартииМатериаловВЭксплуатации" Тогда
			
			ПередачаМатериаловВЭксплуатациюБух(СтрокаДокумента, СтруктураПараметров, Движение);
			

		ИначеЕсли ПриходоватьВ = "ВложенияВоВнеоборотныеАктивы" Тогда
			
			ВложенияВоВнеоборотныеАктивыБух(СтрокаДокумента, СтруктураПараметров, Движение);
			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Общая процедура поступления: маршрутизирует алгоритм поступления
//
Процедура ВыполнитьКорДвижениеМеж(СписаноИз, ПриходоватьВ, СтрокаДокумента, СтруктураПараметров, Движение) Экспорт
			
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		
		// Общие для всех учетов алгоритмы
		Если ПриходоватьВ = "НаСкладах" Тогда
			
			ПоступлениеНаСкладМеж(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "Переданные" Тогда
			
			ПоступлениеПереданныхМеж(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "ПроизводственныеРасходы" Тогда
			
			ПоступлениеВПроизводствоМеж(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "БракВПроизводстве" Тогда
			
			СписаниеНаБракМеж(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "ПартииМатериаловВЭксплуатации" Тогда
			
			ПередачаМатериаловВЭксплуатациюМеж(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
				
		Если ПриходоватьВ = "ОбщепроизводственныеРасходы"
			ИЛИ ПриходоватьВ = "АдминистративныеРасходы" 
			ИЛИ ПриходоватьВ = "РасходыНаСбыт"
			ИЛИ ПриходоватьВ = "ПрочиеОперационныеРасходы" Тогда
			
			СписаниеНаПостоянныеЗатратыМеж(СтрокаДокумента, СтруктураПараметров, Движение);
			
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Общие

////////////////////////////////////////////////////////////////////////////////
// СПЕЦИФИЧЕСКИЕ ПРОЦЕДУРЫ ДВИЖЕНИЯ ПАРТИЙ ДЛЯ ОПРЕДЕЛЕННЫХ ВИДОВ ДОКУМЕНТОВ

// Процедуры, обслуживающие возврат товара от покупателя
// Возврат товара от комиссионера обслуживается общим случаем списания партий товаров
Процедура ПолучитьТаблицуПартийПринятыхНаОтветственноеХранение(СтруктураПараметров, ДокументПартии, СтрУчет)
	
	Запрос = Новый Запрос;
	Если СтрУчет = "Управленческий" Тогда
	
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
		               |	ПартииТоваровНаСкладах.Склад КАК Склад,
		               |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
		               |	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
		               |	ПартииТоваровНаСкладах.СтатусПартии КАК СтатусПартии,
		               |	ПартииТоваровНаСкладах.Заказ КАК Заказ,
		               |	ПартииТоваровНаСкладах.Качество КАК Качество,
		               |	СУММА(ВЫБОР
		               |			КОГДА ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
		               |				ТОГДА ПартииТоваровНаСкладах.Количество
		               |			ИНАЧЕ -ПартииТоваровНаСкладах.Количество
		               |		КОНЕЦ) КАК Количество,
		               |	СУММА(ВЫБОР
		               |			КОГДА ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
		               |				ТОГДА ПартииТоваровНаСкладах.Стоимость
		               |			ИНАЧЕ -ПартииТоваровНаСкладах.Стоимость
		               |		КОНЕЦ) КАК Стоимость,
					   |	ПартииТоваровНаСкладах.Организация
		               |ИЗ
		               |	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		               |ГДЕ
		               |	ПартииТоваровНаСкладах.КодОперации = &КодОперации
		               |	И (ПартииТоваровНаСкладах.ДокументДвижения = &ДокументПартии
		               |			ИЛИ ПартииТоваровНаСкладах.Регистратор = &ДокументПартии)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПартииТоваровНаСкладах.Номенклатура,
		               |	ПартииТоваровНаСкладах.Склад,
		               |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
		               |	ПартииТоваровНаСкладах.СерияНоменклатуры,
		               |	ПартииТоваровНаСкладах.ДокументОприходования,
		               |	ПартииТоваровНаСкладах.СтатусПартии,
		               |	ПартииТоваровНаСкладах.Заказ,
		               |	ПартииТоваровНаСкладах.Качество,
					   |	ПартииТоваровНаСкладах.Организация";
					   
	ИначеЕсли СтрУчет = "Бухгалтерский" тогда

		Запрос.Текст = "ВЫБРАТЬ
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.Номенклатура КАК Номенклатура,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.Склад КАК Склад,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.СерияНоменклатуры КАК СерияНоменклатуры,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументОприходования КАК ДокументОприходования,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.Заказ КАК Заказ,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.Качество КАК Качество,
		               |	СУММА(ВЫБОР
		               |			КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.ВидДвижения = &ВидДвиженияПриход
		               |				ТОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.Количество
		               |			ИНАЧЕ -ПартииТоваровНаСкладахБухгалтерскийУчет.Количество
		               |		КОНЕЦ) КАК Количество,
		               |	СУММА(ВЫБОР
		               |			КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.ВидДвижения = &ВидДвиженияПриход
		               |				ТОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.Стоимость
		               |			ИНАЧЕ -ПартииТоваровНаСкладахБухгалтерскийУчет.Стоимость
		               |		КОНЕЦ) КАК Стоимость,
		               |	СУММА(ВЫБОР
		               |			КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.ВидДвижения = &ВидДвиженияПриход
		               |				ТОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.СтоимостьНУ
		               |			ИНАЧЕ -ПартииТоваровНаСкладахБухгалтерскийУчет.СтоимостьНУ
		               |		КОНЕЦ) КАК СтоимостьНУ,
		               |	СУММА(ВЫБОР
		               |			КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.ВидДвижения = &ВидДвиженияПриход
		               |				ТОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.НДСВходящий
		               |			ИНАЧЕ -ПартииТоваровНаСкладахБухгалтерскийУчет.НДСВходящий
		               |		КОНЕЦ) КАК НДСВходящий,
		               |	СУММА(ВЫБОР
		               |			КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.ВидДвижения = &ВидДвиженияПриход
		               |				ТОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.НДСКредит 
		               |			ИНАЧЕ -ПартииТоваровНаСкладахБухгалтерскийУчет.НДСКредит
		               |		КОНЕЦ) КАК НДСКредит,
					   |	ПартииТоваровНаСкладахБухгалтерскийУчет.НалоговоеНазначение,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.СчетУчета,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.Организация
		               |ИЗ
		               |	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладахБухгалтерскийУчет
		               |ГДЕ
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.КодОперации = &КодОперации
		               |	И (ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументДвижения = &ДокументПартии
		               |			ИЛИ ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор = &ДокументПартии)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.Номенклатура,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.Склад,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.ХарактеристикаНоменклатуры,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.СерияНоменклатуры,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументОприходования,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.Заказ,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.Качество,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.СчетУчета,
					   |	ПартииТоваровНаСкладахБухгалтерскийУчет.НалоговоеНазначение,
		               |	ПартииТоваровНаСкладахБухгалтерскийУчет.Организация";
					   
	Иначе
		Возврат;
	
	КонецЕсли; 
				   
	Запрос.УстановитьПараметр("КодОперации", Перечисления.КодыОперацийПартииТоваров.ОтложеннаяОтгрузка);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ДокументПартии", ДокументПартии);
	
	СтруктураПараметров.Вставить("ТаблицаПартийПринятыхНаОтветственноеХранение"+СтрУчет,Запрос.Выполнить().Выгрузить());


КонецПроцедуры//ПолучитьТаблицуПартийПринятыхНаОтветственноеХранение()

// Определяет параметры возврата 
//
Процедура ПолучитьПараметрыВозвратаОтПокупателя(СтрокаДокумента, СтруктураПараметров, ИмяРегистраПартии, СтрУчет, ВестиПУПоСкладам, НаборОснование)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахУпр";
		ВестиПУПоСкладам  = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров);
		СтрУчет			  = "Управленческий";
		НаборОснование	  = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
		
	ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахБух";
		ВестиПУПоСкладам  = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров);
		СтрУчет			  = "Бухгалтерский";
		НаборОснование	  = РегистрыНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.СоздатьНаборЗаписей();
		
	ИначеЕсли СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахМеж";
		ВестиПУПоСкладам  = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Меж", СтруктураПараметров);
		СтрУчет			  = "Международный";
		НаборОснование	  = РегистрыНакопления.ПартииТоваровНаСкладахМеждународныйУчет.СоздатьНаборЗаписей();
		
	КонецЕсли;
	
КонецПроцедуры//ПолучитьПараметрыВозвратаОтПокупателя

// Возвращает таблицу партий товаров, которую можно оприходовать документом "Возврат товаров от покупателя"
//
Функция ПолучитьТаблицуЗаписейОснованияВозврата(СтрокаДокумента, СтруктураПараметров, ДокументПартии, НаборОснование, СтрУчет, ИмяРегистраПартии)
	
	// Партии, которые можно вернуть, получаем при первом вызове и помещаем в структуру параметров
	// Затем до конца обработки документа используем таблицы значений из структуры параметров
	ТаблицаЗаписейОснования = Неопределено;
	ТаблицыПартийВозврата = Неопределено;
	
	// В табличной части возврата от покупателя может быть указано произвольное количество документов партии
	Если СтруктураПараметров.Свойство("ТаблицыПартийВозврата"+СтрУчет,ТаблицыПартийВозврата) тогда
		ТаблицаЗаписейОснования = ТаблицыПартийВозврата.Получить(ДокументПартии.УникальныйИдентификатор());
		Если ТаблицаЗаписейОснования <> Неопределено тогда
			Возврат ТаблицаЗаписейОснования;
		КонецЕсли;
	КонецЕсли;
	
	КодыОпераций = СтруктураПараметров.КодыОпераций;
	
	// Если указан партиеобразующий документ, данные берутся из него
	Если Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах.Измерения.ДокументОприходования.Тип.СодержитТип(ТипЗнч(ДокументПартии)) Тогда
		
		// Для сообщения о нехватке партии
		
		СтруктураПараметров.Вставить("СтрокаСообщенияНеНайдено", "Не найдено поступление ");
		СтруктураПараметров.Вставить("СтрокаСообщенияДокументПартии", ", по документу партии ");
		// 
		Если ТипЗнч(ДокументПартии)=Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") тогда
			
			// Движения поступления выполнены с неправильной себестоимостью
			// Правильная себестоимость известна только в конце месяца после расчета себестоимости выпуска
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДокументВыпуска",ДокументПартии);
			Запрос.УстановитьПараметр("КодОперации",Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад);
			Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
				ЗаполнитьЗапросВозвратПоПоступлениюУпр(Запрос);
			ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ЗаполнитьЗапросВозвратПоПоступлениюБух(Запрос);
			Иначе// Международный
				ЗаполнитьЗапросВозвратПоПоступлениюМеж(Запрос);
			КонецЕсли;
			
			ТаблицаЗаписейОснования = Запрос.Выполнить().Выгрузить();
		
		Иначе
			
			Если СтрокаДокумента.ОтражатьВУправленческомУчете 
			   И ТипЗнч(ДокументПартии)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			   Тогда
				// выберем движения документа партии по регистру "ПартииТоваров" за исключением сторнирующих движений
				ЗапросПоДокументуПартии = Новый Запрос;
				ЗапросПоДокументуПартии.Текст =  "ВЫБРАТЬ
				|	ПартииТоваровНаСкладах.Период,
				|	ПартииТоваровНаСкладах.Регистратор,
				|	ПартииТоваровНаСкладах.Организация,
				|	ПартииТоваровНаСкладах.Номенклатура,
				|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
				|	ПартииТоваровНаСкладах.СерияНоменклатуры,
				|	ПартииТоваровНаСкладах.ДокументОприходования,
				|	ПартииТоваровНаСкладах.СтатусПартии,
				|	ПартииТоваровНаСкладах.Заказ,
				|	ПартииТоваровНаСкладах.Качество,
				|	ПартииТоваровНаСкладах.Количество,
				|	ПартииТоваровНаСкладах.Стоимость
				|ИЗ
				|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
				|ГДЕ
				|	ПартииТоваровНаСкладах.СтатусПартии <> &СтатусПартии
				|	И ПартииТоваровНаСкладах.Регистратор = &Регистратор";
				
				ЗапросПоДокументуПартии.УстановитьПараметр("СтатусПартии",Перечисления.СтатусыПартийТоваров.ПоОрдеру);
				ЗапросПоДокументуПартии.УстановитьПараметр("Регистратор",ДокументПартии);
				ТаблицаЗаписейОснования = ЗапросПоДокументуПартии.Выполнить().Выгрузить();
			Иначе
				НаборОснование.Отбор.Регистратор.Установить(ДокументПартии);
				НаборОснование.Прочитать();
				ТаблицаЗаписейОснования = НаборОснование.Выгрузить();
			КонецЕсли;
		КонецЕсли;
		
		// Если указан документ списания, данные о партиях берутся из него
	Иначе
		// Для сообщения о нехватке партии
		СтруктураПараметров.Вставить("СтрокаСообщенияНеНайдено", "Не найдено ");
		СтруктураПараметров.Вставить("СтрокаСообщенияДокументПартии",  ", списанного документом ");
		
		// Движения реализации могут быть выполнены с неточной или нерассчитанной себестоимостью
		// Кроме того в управленческом учете при ордерной схеме движения реализации может выполнять поступление
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидДвиженияРасход",ВидДвиженияНакопления.Расход);
		МассивРеализация = Новый Массив;
		МассивРеализация.Добавить(КодыОпераций.ПередачаТарыКонтрагенту);
		МассивРеализация.Добавить(КодыОпераций.Реализация);
		МассивРеализация.Добавить(КодыОпераций.РеализацияКомиссия);
		МассивРеализация.Добавить(КодыОпераций.РеализацияРозница);
		
		Запрос.УстановитьПараметр("КодыСписание",МассивРеализация);
		Запрос.УстановитьПараметр("Регистратор",ДокументПартии);
		// Возврат не может быть раньше реализации
		Запрос.УстановитьПараметр("Период",СтруктураПараметров.Период);
		
		Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
			ЗаполнитьЗапросПоВозвратуУпр(Запрос);
		ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
			ЗаполнитьЗапросПоВозвратуБух(Запрос);
		Иначе// Международный
			ЗаполнитьЗапросПоВозвратуМеж(Запрос);
		КонецЕсли;
		
		ТаблицаЗаписейОснования = Запрос.Выполнить().Выгрузить();
		
		ПолучитьТаблицуПартийПринятыхНаОтветственноеХранение(СтруктураПараметров, ДокументПартии, СтрУчет);
		
	КонецЕсли;//Если Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах.Измерения.ДокументОприходования.Тип.СодержитТип(ТипЗнч(ДокументПартии)) Тогда
	
	// В полученной таблице найдем партии, которые уже возвращались другими возвратами
	ТаблицаЗаписейОснования = ПодготовитьТаблицуЗаписейОснования(ТаблицаЗаписейОснования, СтруктураПараметров, ДокументПартии, СтрУчет);
	
	Если НЕ СтруктураПараметров.Свойство("ТаблицыПартийВозврата"+СтрУчет,ТаблицыПартийВозврата) тогда
		ТаблицыПартийВозврата = Новый Соответствие;
	КонецЕсли;
	
	ТаблицыПартийВозврата.Вставить(ДокументПартии.УникальныйИдентификатор(),ТаблицаЗаписейОснования);
	
	СтруктураПараметров.Вставить("ТаблицыПартийВозврата"+СтрУчет,ТаблицыПартийВозврата);
	
	Возврат ТаблицаЗаписейОснования;
	
КонецФункции// ПолучитьТаблицуЗаписейОснованияВозврата()

Процедура ЗаполнитьЗапросПоВозвратуУпр(Запрос)

Запрос.Текст = "ВЫБРАТЬ
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.СтатусПартии,
               |	Подзапрос.Заказ,
               |	СУММА(Подзапрос.Количество) КАК Количество,
               |	СУММА(Подзапрос.Стоимость) КАК Стоимость,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
			   |	Подзапрос.Организация
               |ИЗ
               |	(ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
               |		ПартииТоваровНаСкладах.СтатусПартии КАК СтатусПартии,
               |		ПартииТоваровНаСкладах.Заказ КАК Заказ,
               |		ПартииТоваровНаСкладах.Количество КАК Количество,
               |		ПартииТоваровНаСкладах.Стоимость КАК Стоимость,
               |		0 КАК СтоимостьПоступление,
               |		ПартииТоваровНаСкладах.КодОперации КАК КодОперацииПартииТоваров,
               |		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
               |		ПартииТоваровНаСкладах.Период КАК Период,
               |		ПартииТоваровНаСкладах.Качество КАК Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
			   |		ПартииТоваровНаСкладах.Организация КАК Организация
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.Регистратор = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период
               |	
               |	ОБЪЕДИНИТЬ ВСЕ
               |	
               |	ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования,
               |		ПартииТоваровНаСкладах.СтатусПартии,
               |		ПартииТоваровНаСкладах.Заказ,
               |		ПартииТоваровНаСкладах.Количество,
               |		ПартииТоваровНаСкладах.Стоимость,
               |		0,
               |		ПартииТоваровНаСкладах.КодОперации,
               |		ПартииТоваровНаСкладах.ДокументДвижения,
               |		ПартииТоваровНаСкладах.ДокументДвиженияПериод,
               |		ПартииТоваровНаСкладах.Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям,
			   |		ПартииТоваровНаСкладах.Организация КАК Организация
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.ДокументДвижения = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период) КАК Подзапрос
               |
               |СГРУППИРОВАТЬ ПО
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.СтатусПартии,
               |	Подзапрос.Заказ,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
			   |	Подзапрос.Организация
			   |УПОРЯДОЧИТЬ ПО
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.СтатусПартии,
               |	Подзапрос.Заказ,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
			   |	Подзапрос.Организация"
			   

КонецПроцедуры // ЗаполнитьЗапросПоВозвратуУпр(Запрос)()

Процедура ЗаполнитьЗапросПоВозвратуБух(Запрос)

Запрос.Текст = "ВЫБРАТЬ
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.Заказ,
               |	СУММА(Подзапрос.Количество) КАК Количество,
               |	СУММА(Подзапрос.Стоимость) КАК Стоимость,
               |	СУММА(Подзапрос.СтоимостьНУ) КАК СтоимостьНУ,
               |	СУММА(Подзапрос.НДСВходящий) КАК НДСВходящий,
               |	СУММА(Подзапрос.НДСКредит) КАК НДСКредит,
               |	СУММА(Подзапрос.СуммаУценки) КАК СуммаУценки,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
               |	Подзапрос.СчетУчета,
               |	Подзапрос.НалоговоеНазначение,
               |	Подзапрос.Организация
               |ИЗ
               |	(ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
               |		ПартииТоваровНаСкладах.Заказ КАК Заказ,
               |		ПартииТоваровНаСкладах.Количество КАК Количество,
               |		ПартииТоваровНаСкладах.Стоимость КАК Стоимость,
               |		ПартииТоваровНаСкладах.СтоимостьНУ КАК СтоимостьНУ,
               |		ПартииТоваровНаСкладах.НДСВходящий КАК НДСВходящий,
               |		ПартииТоваровНаСкладах.НДСКредит КАК НДСКредит,
               |		ПартииТоваровНаСкладах.СуммаУценки,
               |		0 КАК СтоимостьПоступление,
               |		ПартииТоваровНаСкладах.КодОперации КАК КодОперацииПартииТоваров,
               |		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
               |		ПартииТоваровНаСкладах.Период КАК Период,
               |		ПартииТоваровНаСкладах.Качество КАК Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
               |		ПартииТоваровНаСкладах.СчетУчета КАК СчетУчета,
               |		ПартииТоваровНаСкладах.НалоговоеНазначение КАК НалоговоеНазначение,
               |		ПартииТоваровНаСкладах.Организация КАК Организация
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.Регистратор = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период
               |	
               |	ОБЪЕДИНИТЬ ВСЕ
               |	
               |	ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования,
               |		ПартииТоваровНаСкладах.Заказ,
               |		ПартииТоваровНаСкладах.Количество,
               |		ПартииТоваровНаСкладах.Стоимость,
               |		ПартииТоваровНаСкладах.СтоимостьНУ,
               |		ПартииТоваровНаСкладах.НДСВходящий,
               |		ПартииТоваровНаСкладах.НДСКредит,
               |		ПартииТоваровНаСкладах.СуммаУценки,
               |		0,
               |		ПартииТоваровНаСкладах.КодОперации,
               |		ПартииТоваровНаСкладах.ДокументДвижения,
               |		ПартииТоваровНаСкладах.ДокументДвиженияПериод,
               |		ПартииТоваровНаСкладах.Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям,
               |		ПартииТоваровНаСкладах.СчетУчета,
               |		ПартииТоваровНаСкладах.НалоговоеНазначение,
               |		ПартииТоваровНаСкладах.Организация
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.ДокументДвижения = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период) КАК Подзапрос
               |
               |СГРУППИРОВАТЬ ПО
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.Заказ,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
               |	Подзапрос.СчетУчета,
			   |	Подзапрос.НалоговоеНазначение,
               |	Подзапрос.Организация
			   |УПОРЯДОЧИТЬ ПО
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.Заказ,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
               |	Подзапрос.СчетУчета,
			   |	Подзапрос.НалоговоеНазначение,
               |	Подзапрос.Организация"
			   

КонецПроцедуры // ЗаполнитьЗапросПоВозвратуБух(Запрос)

Процедура ЗаполнитьЗапросПоВозвратуМеж(Запрос)

Запрос.Текст = "ВЫБРАТЬ
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.Заказ,
               |	СУММА(Подзапрос.Количество) КАК Количество,
               |	СУММА(Подзапрос.Стоимость) КАК Стоимость,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
               |	Подзапрос.СчетУчета,
               |	Подзапрос.Организация
               |ИЗ
               |	(ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
               |		ПартииТоваровНаСкладах.Заказ КАК Заказ,
               |		ПартииТоваровНаСкладах.Количество КАК Количество,
               |		ПартииТоваровНаСкладах.Стоимость КАК Стоимость,
               |		0 КАК СтоимостьПоступление,
               |		ПартииТоваровНаСкладах.КодОперации КАК КодОперацииПартииТоваров,
               |		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
               |		ПартииТоваровНаСкладах.Период КАК Период,
               |		ПартииТоваровНаСкладах.Качество КАК Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
               |		ПартииТоваровНаСкладах.СчетУчета КАК СчетУчета,
               |		ПартииТоваровНаСкладах.Организация КАК Организация
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.Регистратор = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период
               |	
               |	ОБЪЕДИНИТЬ ВСЕ
               |	
               |	ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования,
               |		ПартииТоваровНаСкладах.Заказ,
               |		ПартииТоваровНаСкладах.Количество,
               |		ПартииТоваровНаСкладах.Стоимость,
               |		0,
               |		ПартииТоваровНаСкладах.КодОперации,
               |		ПартииТоваровНаСкладах.ДокументДвижения,
               |		ПартииТоваровНаСкладах.ДокументДвиженияПериод,
               |		ПартииТоваровНаСкладах.Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям,
               |		ПартииТоваровНаСкладах.СчетУчета,
               |		ПартииТоваровНаСкладах.Организация
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.ДокументДвижения = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период) КАК Подзапрос
               |
               |СГРУППИРОВАТЬ ПО
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.Заказ,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
               |	Подзапрос.СчетУчета,
               |	Подзапрос.Организация"

КонецПроцедуры // ЗаполнитьЗапросПоВозвратуМеж

Процедура ЗаполнитьЗапросВозвратПоПоступлениюУпр(Запрос)
	Запрос.Текст = "ВЫБРАТЬ
	|	ВыпускПродукции.Продукция КАК Номенклатура,
	|	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаНоменклатуры,
	|	ВыпускПродукции.СерияПродукции КАК СерияНоменклатуры,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.СтатусПартии,
	|	СУММА(ВыпускПродукции.Количество) КАК Количество,
	|	СУММА(ВыпускПродукции.Стоимость) КАК Стоимость,
	|	ВыпускПродукции.ДокументВыпуска КАК ДокументОприходования,
	|	ВыпускПродукции.ДокументВыпуска.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.КодОперации = &КодОперации
	|	И ВыпускПродукции.ДокументВыпуска = &ДокументВыпуска
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.СтатусПартии,
	|	ВыпускПродукции.ДокументВыпуска";
КонецПроцедуры//ЗаполнитьЗапросВозвратПоПоступлениюУпр

Процедура ЗаполнитьЗапросВозвратПоПоступлениюБух(Запрос)
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВыпускПродукции.Продукция КАК Номенклатура,
	               |	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаНоменклатуры,
	               |	ВыпускПродукции.СерияПродукции КАК СерияНоменклатуры,
	               |	ВыпускПродукции.Заказ,
	               |	СУММА(ВыпускПродукции.Количество) КАК Количество,
	               |	СУММА(ВыпускПродукции.Стоимость) КАК Стоимость,
				   |    0 КАК СуммаУценки,
				   |	СУММА(ВыпускПродукции.СтоимостьНУ) КАК СтоимостьНУ,
				   |	СУММА(ВыпускПродукции.НДСВходящий) КАК НДСВходящий,
				   |	СУММА(ВыпускПродукции.НДСКредит) КАК НДСКредит,
	               |	ВыпускПродукции.ДокументВыпуска КАК ДокументОприходования,
	               |	ВыпускПродукции.СчетДт КАК СчетУчета,
				   |	ВыпускПродукции.НалоговоеНазначение КАК НалоговоеНазначение,
	               |	ВыпускПродукции.Подразделение.Владелец КАК Организация
	               |ИЗ
	               |	РегистрНакопления.ВыпускПродукцииБухгалтерскийУчет КАК ВыпускПродукции
	               |ГДЕ
	               |	ВыпускПродукции.КодОперации = &КодОперации
	               |	И ВыпускПродукции.ДокументВыпуска = &ДокументВыпуска
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВыпускПродукции.Продукция,
	               |	ВыпускПродукции.ХарактеристикаПродукции,
	               |	ВыпускПродукции.СерияПродукции,
	               |	ВыпускПродукции.Заказ,
	               |	ВыпускПродукции.ДокументВыпуска,
	               |	ВыпускПродукции.СчетДт,
				   |	ВыпускПродукции.НалоговоеНазначение,
	               |	ВыпускПродукции.Подразделение.Владелец";
КонецПроцедуры//ЗаполнитьЗапросВозвратПоПоступлениюБух

Процедура ЗаполнитьЗапросВозвратПоПоступлениюМеж(Запрос)
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВыпускПродукции.Продукция КАК Номенклатура,
	               |	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаНоменклатуры,
	               |	ВыпускПродукции.СерияПродукции КАК СерияНоменклатуры,
	               |	ВыпускПродукции.Заказ,
	               |	СУММА(ВыпускПродукции.Количество) КАК Количество,
	               |	СУММА(ВыпускПродукции.Стоимость) КАК Стоимость,
	               |	ВыпускПродукции.ДокументВыпуска КАК ДокументОприходования,
	               |	ВыпускПродукции.СчетДт КАК СчетУчета,
	               |	ВыпускПродукции.Подразделение.Владелец КАК Организация
	               |ИЗ
	               |	РегистрНакопления.ВыпускПродукцииМеждународныйУчет КАК ВыпускПродукции
	               |ГДЕ
	               |	ВыпускПродукции.КодОперации = &КодОперации
	               |	И ВыпускПродукции.ДокументВыпуска = &ДокументВыпуска
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВыпускПродукции.Продукция,
	               |	ВыпускПродукции.ХарактеристикаПродукции,
	               |	ВыпускПродукции.СерияПродукции,
	               |	ВыпускПродукции.Заказ,
	               |	ВыпускПродукции.ДокументВыпуска,
	               |	ВыпускПродукции.СчетДт,
	               |	ВыпускПродукции.Подразделение.Владелец";
КонецПроцедуры//ЗаполнитьЗапросВозвратПоПоступлениюМеж

// Корректирует таблицу основания с учетом ранее проведенных возвратов
// Таблица основания корректируется либо по документу поступления, либо по документу реализации
// Ситуация, когда есть возвраты и по документу поступления и по документу реализации не обслуживается
//
Функция ПодготовитьТаблицуЗаписейОснования(ТаблицаЗаписейОснования, СтруктураШапкиДокумента, ДокументПартии, СтрУчет)
	
	ЗапросПоВозвратам = Новый Запрос;
	
	ЗапросПоВозвратам.Текст = "ВЫБРАТЬ
	                          |	ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
	                          |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                          |	ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
							  |	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	                          |	ВЫБОР
	                          |		КОГДА ПартииТоваровНаСкладах.КодОперации = &ВозвратТекущегоМесяца
	                          |			ТОГДА -ПартииТоваровНаСкладах.Количество
	                          |		ИНАЧЕ ПартииТоваровНаСкладах.Количество
	                          |	КОНЕЦ КАК Количество,
	                          |	ВЫБОР
	                          |		КОГДА ПартииТоваровНаСкладах.КодОперации = &ВозвратТекущегоМесяца
	                          |			ТОГДА -ПартииТоваровНаСкладах.Стоимость
	                          |		ИНАЧЕ ПартииТоваровНаСкладах.Стоимость
							  |	КОНЕЦ КАК Стоимость,
							  
	                          |	ПартииТоваровНаСкладах.НомерСтрокиСписанныхТоваров
	                          |ИЗ
	                          |	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	                          |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
	                          |			ПО СписанныеТовары.Регистратор = ПартииТоваровНаСкладах.Регистратор
	                          |				И (СписанныеТовары.ДокументПартии = &ДокументПартии)
	                          |				И СписанныеТовары.НомерСтроки = ПартииТоваровНаСкладах.НомерСтрокиСписанныхТоваров
	                          |		ПО ПартииТоваровНаСкладах.Регистратор = ВозвратТоваровОтПокупателя.Ссылка
	                          |ГДЕ
	                          |	ВозвратТоваровОтПокупателя.Товары.ДокументПартии = &ДокументПартии
	                          |	И ВозвратТоваровОтПокупателя.МоментВремени > &МоментНач
	                          |	И ВозвратТоваровОтПокупателя.МоментВремени < &МоментКон";
	
	ЗапросПоВозвратам.УстановитьПараметр("ДокументПартии",ДокументПартии);
	
	СтруктураРеквизитовДокумента = Новый Структура("Дата");
	ПолучитьРеквизитыОбъекта(ДокументПартии, СтруктураРеквизитовДокумента);
	МоментНач = Новый МоментВремени(СтруктураРеквизитовДокумента.Дата,ДокументПартии);
	МоментКон = Новый МоментВремени(СтруктураШапкиДокумента.Период,СтруктураШапкиДокумента.Регистратор);
	
	ЗапросПоВозвратам.УстановитьПараметр("МоментНач",МоментНач);
	ЗапросПоВозвратам.УстановитьПараметр("МоментКон",МоментКон);
	ЗапросПоВозвратам.УстановитьПараметр("ВозвратТекущегоМесяца", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц);
	
	// Изменим текст запроса, если учет отличается от управленческого
	Если СтрУчет <> "Управленческий" тогда
		ЗапросПоВозвратам.Текст = СтрЗаменить(ЗапросПоВозвратам.Текст,".ПартииТоваровНаСкладах",".ПартииТоваровНаСкладах"+СтрУчет+"Учет");
	КонецЕсли;
	
	РезультатЗапроса = ЗапросПоВозвратам.Выполнить();
	Если Не РезультатЗапроса.Пустой() тогда
		
		ТаблицаВозвратов = РезультатЗапроса.Выгрузить();
		// Уменьшим количество и стоимость в таблице основания
		Для каждого Строка Из ТаблицаЗаписейОснования цикл
			
			// Отберем строки
			СтруктураОтбора = Новый Структура;

			СтруктураОтбора.Вставить("Номенклатура",               Строка.Номенклатура);
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
			СтруктураОтбора.Вставить("СерияНоменклатуры", Строка.СерияНоменклатуры);
			СтруктураОтбора.Вставить("ДокументОприходования", Строка.ДокументОприходования);
						
			НайденныеСтроки = ТаблицаВозвратов.НайтиСтроки(СтруктураОтбора);
			
			// Дополнительно отберем строки с пустыми сериями 
			Если Строка.СерияНоменклатуры <> Справочники.СерииНоменклатуры.ПустаяСсылка() тогда
				
				СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
					
				НайденныеСтрокиСПустымиСериями = ТаблицаВозвратов.НайтиСтроки(СтруктураОтбора);
						
				Для каждого Элемент из НайденныеСтрокиСПустымиСериями Цикл
					НайденныеСтроки.Добавить(Элемент);
				КонецЦикла;
			КонецЕсли;

			Для каждого НайденнаяСтрока из НайденныеСтроки цикл
				Строка.Количество = Строка.Количество - НайденнаяСтрока.Количество;
				Строка.Стоимость  = Строка.Стоимость - НайденнаяСтрока.Стоимость;					
				
				НайденнаяСтрока.Количество = 0;
				НайденнаяСтрока.Стоимость = 0;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаЗаписейОснования;
	
КонецФункции // ПодготовитьТаблицуЗаписейОснования

// Выполняет движения документа возврат товаров от покупателя
//
Процедура ВыполнитьДвиженияВозврата(СтруктураПараметров, СтрокаДокумента, Строка, ИмяРегистраПартии, 
									ВестиПУПоСкладам, ДокументПартии, КоличествоОсталосьПогасить, КоэффСписания)
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистраПартии, СтруктураПараметров);
	
	КачествоНовый = Справочники.Качество.Новый;

	// Свойства
	Движение.Период      = СтрокаДокумента.Период;
	Движение.Регистратор = СтрокаДокумента.Регистратор;
	Движение.Активность = Истина;
	
	// Возврат текущего месяца может быть с неизвестной стоимостью
	// например, если возвращается продукция
	// в этом случае он учитывается как сторно расхода 
	// и обрабатывается корректировкой стоимости списания как расход
	ВозвратТекущегоМесяца = КонецМесяца(ДокументПартии.Дата) = КонецМесяца(СтруктураПараметров.Период);
	Если ВозвратТекущегоМесяца тогда
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		КоэффициентСторно    = -1;
		ТипЗаписи = "Прямая";
	Иначе	
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		КоэффициентСторно    = 1;
		ТипЗаписи = "Сторно";
	КонецЕсли;
	
	// Измерения
	Если ВестиПУПоСкладам Тогда
		
		Движение.Склад	= СтрокаДокумента.Склад;
		
		// Если задан новый склад поступления, подставляем его
		Если ЗначениеЗаполнено(СтрокаДокумента.СкладПолучатель) Тогда
			Движение.Склад	= СтрокаДокумента.СкладПолучатель;
			
		КонецЕсли;
		
	Иначе
		
		Движение.Склад      = Неопределено;
	КонецЕсли;
	
	Движение.Номенклатура	= СтрокаДокумента.Номенклатура;
	Движение.Организация = Строка.Организация;
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Движение.СтатусПартии = Строка.СтатусПартии;
	ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете тогда
				
		Если КомиссионныйТовар(Строка.СчетУчета) тогда
			Движение.СчетУчета   = СтрокаДокумента.ПринятыеКорСчетБУ;
		Иначе
			Движение.СчетУчета   = СтрокаДокумента.СчетУчетаБУ;
		КонецЕсли;
		
		Движение.НалоговоеНазначение  		= Строка.НалоговоеНазначение;
		
	КонецЕсли;
	
	Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатуры;
	
	// Если партионный учет по сериям не ведется - серии в регистре "партии товаров на складах" нет
	Если СтрокаДокумента.ВестиПартионныйУчетПоСериям тогда
		Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатуры;
	КонецЕсли;
	
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	Движение.Качество = СтрокаДокумента.Качество;
	
	Если НЕ ЗначениеЗаполнено(Движение.Качество) Тогда
		Движение.Качество = КачествоНовый;
	КонецЕсли;
	
	// Ресурсы
	ПогашаемоеКоличество = Окр(Строка.Количество * КоэффСписания,3,1);
	ПогашаемаяСтоимость  = Окр(Строка.Стоимость * КоэффСписания,2,1);
	Движение.Количество  = КоэффициентСторно*ПогашаемоеКоличество;
	Движение.Стоимость   = КоэффициентСторно*ПогашаемаяСтоимость;
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Движение.СтоимостьНУ	= КоэффициентСторно*Окр(Строка.СтоимостьНУ * КоэффСписания,2,1);
		Движение.НДСВходящий	= КоэффициентСторно*Окр(Строка.НДСВходящий * КоэффСписания,2,1);
		Движение.НДСКредит		= КоэффициентСторно*Окр(Строка.НДСКредит   * КоэффСписания,2,1);
		Движение.СуммаУценки	= КоэффициентСторно*Окр(Строка.СуммаУценки * КоэффСписания,2,1);
		
	КонецЕсли;
	
	// Реквизиты
	Если ВозвратТекущегоМесяца тогда
		Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц;
	Иначе
		Движение.КодОперации = СтрокаДокумента.КодОперацииПартииТоваров;
	КонецЕсли;
	
	Если ПогашаемоеКоличество < КоличествоОсталосьПогасить Тогда
		КоэффПоступления = ПогашаемоеКоличество / КоличествоОсталосьПогасить;
	Иначе
		КоэффПоступления = 1;
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		// Сумма выручки в валюте документа - для отчета комитенту		
		Движение.СуммаВыручки = КоэффициентСторно*Окр(СтрокаДокумента.СуммаЗадолженности*КоэффПоступления, 2);
		// Валюты и курсы - для пересчета
		Движение.ВалютаДокумента = СтрокаДокумента.ВалютаДокумента;
		Движение.КурсДокумента = СтрокаДокумента.КурсДокумента;
		Движение.КратностьДокумента = СтрокаДокумента.КратностьДокумента;
	ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете тогда
		Движение.СуммаВыручкиБУ     = Окр(СтрокаДокумента.СуммаЗадолженностиБУ*КоэффПоступления, 2);
		Движение.ВалютнаяСуммаЗадолженностиБУ   = Окр(СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ*КоэффПоступления, 2);
				
		// Уменьшим сумму в исх. строке
		СтрокаДокумента.СуммаЗадолженностиБУ = СтрокаДокумента.СуммаЗадолженностиБУ - Движение.СуммаВыручкиБУ;
		СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ = СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ - Движение.ВалютнаяСуммаЗадолженностиБУ;
	КонецЕсли;
	
	СтрокаДокумента.СуммаЗадолженности = СтрокаДокумента.СуммаЗадолженности - Движение.СуммаВыручки;
	
	КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - ПогашаемоеКоличество;
	
	Строка.Количество = Строка.Количество - ПогашаемоеКоличество;
	Строка.Стоимость  = Строка.Стоимость  - ПогашаемаяСтоимость;
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Строка.СтоимостьНУ 	= Строка.СтоимостьНУ - КоэффициентСторно * Движение.СтоимостьНУ;
		Строка.НДСВходящий 	= Строка.НДСВходящий - КоэффициентСторно * Движение.НДСВходящий;
		Строка.НДСКредит 	= Строка.НДСКредит   - КоэффициентСторно * Движение.НДСКредит;
		Строка.СуммаУценки 	= Строка.СуммаУценки - КоэффициентСторно * Движение.СуммаУценки;
		
	КонецЕсли; 

	// Номер строки, по которой списана партия
	// Используется при возврате товаров от покупателя, ордерной схеме поступления,
	// механизмом корректировки стоимости списания 
	Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;
	
	// Списание на себестоимость продаж (сторно)
	Если ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров) = "СебестоимостьПродаж" Тогда
		
		Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
			СписаниеНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
	ПодготовитьДанныеДляВыполненияДвиженийПоРезульататамСписания(СтруктураПараметров, Движение, Неопределено, СтрокаДокумента,Неопределено
	,"Возврат", Неопределено , ТипЗаписи);
	
	
Конецпроцедуры//ВыполнитьДвиженияВозврата


// Поступление товаров по возврату от покупателя
//
Процедура ПоступлениеВозвратОтПокупателя(СтрокаДокумента, СтруктураПараметров)
	
	ДокументПартии = СтрокаДокумента.ДокументПартии;
	
	Если НЕ ЗначениеЗаполнено(ДокументПартии) Тогда
		
		// Если документ - отчет о розничных продажах, то в нем не указывается исх документ продажи, а выбирается ближайший предыдущий:
		
		Если ТипЗнч(СтрокаДокумента.Регистратор) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			
			ДокументПартии = ПредыдущийДокументРеализации(СтрокаДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Возврат без указания документа партии обрабатывается в модуле документа
	Если НЕ ЗначениеЗаполнено(ДокументПартии) Тогда
		Возврат;
	КонецЕсли;

	ИмяРегистраПартии = Неопределено;
	СтрУчет			  = Неопределено;
	ВестиПУПоСкладам  = Неопределено;
	НаборОснование	  = Неопределено;
	
	ПолучитьПараметрыВозвратаОтПокупателя(СтрокаДокумента, СтруктураПараметров, ИмяРегистраПартии, СтрУчет, ВестиПУПоСкладам, НаборОснование);
	
	ТаблицаЗаписейОснования = ПолучитьТаблицуЗаписейОснованияВозврата (СтрокаДокумента,
																	  СтруктураПараметров,
																	  ДокументПартии,
																	  НаборОснование,
																	  СтрУчет,
																	  ИмяРегистраПартии);
	
	НайденныеСтроки = ОтобратьСтрокиПартий(ТаблицаЗаписейОснования, СтрокаДокумента, "НаСкладах");
			
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если КоличествоОсталосьПогасить <=0 Тогда
			Прервать;
		КонецЕсли;
			
		Если Строка.Количество <=0 Тогда
			Продолжить;
		КонецЕсли;
			
		Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
			КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;
		
		ВыполнитьДвиженияВозврата(СтруктураПараметров, СтрокаДокумента, Строка, ИмяРегистраПартии, 
									ВестиПУПоСкладам, ДокументПартии, КоличествоОсталосьПогасить, КоэффСписания);
			
	КонецЦикла;


	// Товара не хватило
	
	Если (КоличествоОсталосьПогасить > 0) Тогда	
		
		//Коновалова 13022013 +
		ПараметрыСеанса.ОтменитьСписаниеПоПартиям = Истина;
		//Коновалова 13022013 -
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрУчет + " учет. Документ " + СтрокаДокумента.Регистратор + ", строка :" + СтрокаДокумента.НомерСтроки + Символы.ПС
		+ СтруктураПараметров.СтрокаСообщенияНеНайдено + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
		+ " товара " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
		+ СтруктураПараметров.СтрокаСообщенияДокументПартии + ДокументПартии);
			
		СтруктураПараметров.Вставить("Отказ", Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ПоступлениеВозвратОтПокупателя

// Снятие резерва по заказам покупателей при закрытии заказов
//
Процедура СнятиеРезервовПоЗаказамПокупателей(СтрокаДокумента, СтруктураПараметров)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахУпр";
		ВестиПУПоСкладам =ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров);
		СтрУчет="Управленческий";
		
	ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахБух";
		ВестиПУПоСкладам =ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров);
		СтрУчет="Бухгалтерский";
		
	ИначеЕсли СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахМеж";
		ВестиПУПоСкладам =ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Меж", СтруктураПараметров);
		СтрУчет="Международный";
		
	КонецЕсли;
	
	// Партии для данного учета
	ДеревоПартий = СтруктураПараметров["Дерево"+ИмяРегистраПартии];
	ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистраПартии + "ТаблицаОстатков"];
	СтрокаДереваПартий = ДеревоПартий.Строки.Найти(СтрокаДокумента.НомерСтрокиДокумента, "НомерСтрокиДокумента");
	СтруктураИзмерений = СтруктураПараметров[ИмяРегистраПартии + "СтруктураИзмерений"];
	
	Если СтрокаДереваПартий <> Неопределено Тогда
		
		Для Каждого СтрокаПартииРаспределения ИЗ СтрокаДереваПартий.Строки Цикл
			
			СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий);
			
			// 1. Списание
			Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистраПартии, СтруктураПараметров);
			
			ЗаполнитьЗначенияСвойств(Движение,СтрокаПартии);
			
			// Свойства
			Движение.Период			= СтрокаДокумента.Период;
			Движение.Регистратор	= СтрокаДокумента.Регистратор;
			Движение.Активность		= Истина;
			Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
			
			Если СтрУчет="Управленческий" Тогда
				Движение.Организация = СтруктураПараметров.ОрганизацияУпр;
			КонецЕсли;	
			
			// Реквизиты
			// Специфические разрезы для разных видов учета
			Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
				Движение.Подразделение = СтрокаДокумента.Подразделение;
			КонецЕсли;
			
			Движение.КодОперации	= СтрокаДокумента.КодОперацииПартииТоваров;
			
			СтрокаПартии.Количество = 0;
			СтрокаПартии.Стоимость  = 0;
			
			Строка   = Движение;
			
			// 2. Поступление
			Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистраПартии, СтруктураПараметров);
			
			ЗаполнитьЗначенияСвойств(Движение,Строка);
			
			// Свойства
			Движение.ВидДвижения  = ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.Заказ		  = Неопределено;
			
			Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтроки"+ИмяРегистраПартии];
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СнятиеРезервовПоЗаказамПокупателей()

Функция ПолучитьТаблицуСписанияРасходнымОрдером(СтрокаДокумента, СтруктураПараметров) Экспорт

	ТаблицыСписанияРасходнымОрдером = Неопределено;
	ТаблицаСписанияРасходнымОрдером = Неопределено;
	
	// Отборы по видам учета
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		СтрУчет = "Упр";
	ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтрУчет = "Бух";
	ИначеЕсли СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		СтрУчет = "Меж";
	Иначе
		// Строка документа не отражается ни в одном учете
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ТаблицыСписанияРасходнымОрдером",ТаблицыСписанияРасходнымОрдером) тогда
		ТаблицаСписанияРасходнымОрдером = ТаблицыСписанияРасходнымОрдером.Получить(СтрУчет);
		Если ТаблицаСписанияРасходнымОрдером <> Неопределено тогда
			Возврат ТаблицаСписанияРасходнымОрдером;
		КонецЕсли;
	КонецЕсли;
	
	// Сначала получим таблицу исходного документа
	Запрос = Новый Запрос;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""СписаниеПартийРасходнымОрдером1"" КАК QuieryId ";
	
	Ресурсы = Метаданные.РегистрыСведений.СписанныеТовары.Ресурсы;
	
	Для каждого Ресурс Из Ресурсы Цикл
		
		Запрос.Текст = 	Запрос.Текст + ",
		|	"+ Ресурс.Имя;
		
	КонецЦикла; 
	
	Запрос.Текст = 	Запрос.Текст + ",
	|	Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	Период,
	|	НомерСтроки
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|
	|ГДЕ
	|	Регистратор=&Регистратор
	|";
	
	// Отборы по видам учета
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Запрос.Текст = 	Запрос.Текст + " И (ОтражатьВУправленческомУчете)";
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Запрос.Текст = 	Запрос.Текст + " И (ОтражатьВБухгалтерскомУчете)";
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		Запрос.Текст = 	Запрос.Текст + " И (ОтражатьВМеждународномУчете)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Регистратор", СтрокаДокумента.ОсновнойДокумент);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаДокумента.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);

	
	ТаблицаСписанияРасходнымОрдером=Запрос.Выполнить().Выгрузить();
	
	ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.ОтражатьВМеждународномУчете, "ОтражатьВМеждународномУчете");
	
	СтруктураПараметров.Вставить("ОсновнойДокумент",СтрокаДокумента.ОсновнойДокумент);
	
	// Если записей по исх. документу нет
	Если ТаблицаСписанияРасходнымОрдером.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""СписаниеПартийРасходнымОрдером2"" КАК QuieryId,
	|	Строки.Регистратор,
	|	Строки.Период,
	|	Строки.НомерСтроки,
	|	СУММА(Строки.Количество) КАК Количество,
	|	Строки.Номенклатура,
	|	Строки.СерияНоменклатуры,
	|	Строки.ХарактеристикаНоменклатуры,
	|	Строки.Склад
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|ГДЕ
	|	Строки.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Строки.ОсновнойДокумент = &ОсновнойДокумент
	|	И Строки.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Строки.Регистратор,
	|	Строки.Период,
	|	Строки.НомерСтроки,
	|	Строки.Номенклатура,
	|	Строки.СерияНоменклатуры,
	|	Строки.ХарактеристикаНоменклатуры,
	|	Строки.Склад";
	
	// Отборы по видам учета
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Запрос.Текст = 	СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ (ОтражатьВУправленческомУчете) И ");
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Запрос.Текст = 	СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ (ОтражатьВБухгалтерскомУчете) И ");
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		Запрос.Текст = 	СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ (ОтражатьВМеждународномУчете) И ");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач", ТаблицаСписанияРасходнымОрдером[0].Период);
	Запрос.УстановитьПараметр("ДатаКон", СтрокаДокумента.Период);
	Запрос.УстановитьПараметр("ОсновнойДокумент", СтрокаДокумента.ОсновнойДокумент);
	Запрос.УстановитьПараметр("Регистратор", СтрокаДокумента.Регистратор);
	
	ТаблицаОрдеров = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.Период, "Период");
	
	// Пересчет сумм, уже списанных другими расходными ордерами
	Для каждого СтрокаСписания Из ТаблицаСписанияРасходнымОрдером Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры, Склад",
										СтрокаСписания.Номенклатура,
										СтрокаСписания.СерияНоменклатуры,
										СтрокаСписания.ХарактеристикаНоменклатуры,
										СтрокаСписания.Склад
										);
		МассивСтрокОрдеров = ТаблицаОрдеров.НайтиСтроки(СтруктураПоиска);
			
		// Серия может быть указана в документе реализации и в ордере или только в ордере
		Если СтрокаДокумента.ВестиПартионныйУчетПоСериям И ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатуры)Тогда
				
			СтруктураПоиска.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
			МассивСтрокСПустойСерией = ТаблицаОрдеров.НайтиСтроки(СтруктураПоиска);
				
			Для каждого Элемент Из МассивСтрокСПустойСерией Цикл
				
				МассивСтрокОрдеров.Добавить(Элемент);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого СтрокаОрдера Из МассивСтрокОрдеров Цикл
			
			Если СтрокаОрдера.Количество <=0  Тогда
			
				Продолжить;
			
			КонецЕсли; 
			
			// В накладной и в ордере один и тот же товар может быть в разных строках
			Если СтрокаСписания.Количество > СтрокаОрдера.Количество Тогда
				// полностью списали количество по строке ордера
				КоэффСписания = СтрокаОрдера.Количество/СтрокаСписания.Количество;
				КоэффСписанияОрдера = 1;
			Иначе
				// полностью списали количество по строке накладной
				КоэффСписанияОрдера = СтрокаСписания.Количество/СтрокаОрдера.Количество;
				КоэффСписания = 1;
			КонецЕсли;
			
			КоличествоСписанияОрдера = Окр(КоэффСписанияОрдера * СтрокаОрдера.Количество,3);

			СтрокаСписания.Количество = СтрокаСписания.Количество - КоличествоСписанияОрдера;
			СтрокаОрдера.Количество   = СтрокаОрдера.Количество - КоличествоСписанияОрдера;
	
			СтрокаСписания.СуммаЗадолженностиБУ     = СтрокаСписания.СуммаЗадолженностиБУ - Окр(КоэффСписания * СтрокаСписания.СуммаЗадолженностиБУ, 2);
			СтрокаСписания.СуммаЗадолженности       = СтрокаСписания.СуммаЗадолженности -Окр(СтрокаСписания.СуммаЗадолженности *КоэффСписания,2);
			СтрокаСписания.КорВалютнаяСуммаЗадолженностиБУ = СтрокаСписания.КорВалютнаяСуммаЗадолженностиБУ -Окр(СтрокаСписания.КорВалютнаяСуммаЗадолженностиБУ*КоэффСписания,2);
			СтрокаСписания.СтоимостьПоступление   = СтрокаСписания.СтоимостьПоступление - Окр(КоэффСписания * СтрокаСписания.СтоимостьПоступление, 2);
			СтрокаСписания.СтоимостьПоступлениеБУ = СтрокаСписания.СтоимостьПоступлениеБУ - Окр(КоэффСписания * СтрокаСписания.СтоимостьПоступлениеБУ, 2);
		
		КонецЦикла;
	
	КонецЦикла;
	
	Если НЕ СтруктураПараметров.Свойство("ТаблицыСписанияРасходнымОрдером",ТаблицыСписанияРасходнымОрдером) тогда
		ТаблицыСписанияРасходнымОрдером = Новый Соответствие;
	КонецЕсли;
	
	ТаблицыСписанияРасходнымОрдером.Вставить(СтрУчет,ТаблицаСписанияРасходнымОрдером);
	
	СтруктураПараметров.Вставить("ТаблицыСписанияРасходнымОрдером",ТаблицыСписанияРасходнымОрдером);
	
	Возврат ТаблицаСписанияРасходнымОрдером;

КонецФункции // ПолучитьТаблицуСписанияРасходнымОрдером()

// Списание партий ордерного склада
// Обслуживаются документы:
// 1.Расходный ордер на товары
// 2 Приходный ордер на товары с видом операции "перемещение"
// 3 Поступление товаров и услуг в НТТ с видом операции "перемещение"
// Параметры СтрокаДокумента - 
// СтруктураПараметров - структура, хранящая основные переменные
Процедура СписаниеПартийОрдерныйСклад(СтрокаДокумента, СтруктураПараметров)
	
	// Отложенная отгрузка отражается только в бухгалтерском и управленческом учете
	Если СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.РасходныйОрдерНаТовары")И
	   НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером И
	   НЕ (СтрокаДокумента.ОтражатьВУправленческомУчете ИЛИ СтрокаДокумента.ОтражатьВБухгалтерскомУчете)
		   
		   Тогда
		   
	   
	   Возврат;
	КонецЕсли;
	
	ТаблицаСписанияРасходнымОрдером = ПолучитьТаблицуСписанияРасходнымОрдером(СтрокаДокумента, СтруктураПараметров);
	
	// Если записей по исх. документу нет
	Если ТаблицаСписанияРасходнымОрдером = Неопределено Или ТаблицаСписанияРасходнымОрдером.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры",
									СтрокаДокумента.Номенклатура,
									СтрокаДокумента.СерияНоменклатуры,
									СтрокаДокумента.ХарактеристикаНоменклатуры
									);
									
	// В расходном ордере склад должен совпадать со складом в табличной части основного документа
	Если СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.РасходныйОрдерНаТовары") тогда

		СтруктураПоиска.Вставить("Склад", СтрокаДокумента.Склад);

	КонецЕсли;

	МассивСтрокСписания = ТаблицаСписанияРасходнымОрдером.НайтиСтроки(СтруктураПоиска);
	
	// Серия может быть указана в документе реализации или в ордере
	Если СтрокаДокумента.ВестиПартионныйУчетПоСериям И ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатуры)Тогда
		
		СтруктураПоиска.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
		МассивСтрокСПустойСерией = ТаблицаСписанияРасходнымОрдером.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Элемент Из МассивСтрокСПустойСерией Цикл
		
			МассивСтрокСписания.Добавить(Элемент);
		
		КонецЦикла;
	
	КонецЕсли;
	
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
	
	Для Каждого Строка Из МассивСтрокСписания Цикл
		
		Если КоличествоОсталосьПогасить <=0 Тогда
			Прервать;
		КонецЕсли;
		
		Если Строка.Количество <=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
			КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;

		// Заполнение параметров
		// Список свойств, не заполняющихся в строке ордера по строке реализации
		СписокИсключаемыхСвойств = "СерияНоменклатуры, Количество, ОсновнойДокумент, ВидТабличнойЧасти,
									  |НомерСтрокиДокумента, Период, Регистратор";

		Если СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.РасходныйОрдерНаТовары") тогда
			СписокИсключаемыхСвойств = СписокИсключаемыхСвойств +",Склад";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, Строка,,СписокИсключаемыхСвойств);
		
		ПогашаемоеКоличество = Окр(КоэффСписания * Строка.Количество, 3);
		
		СтрокаДокумента.СуммаЗадолженности     = Окр(КоэффСписания * Строка.СуммаЗадолженности, 2);
		СтрокаДокумента.СуммаЗадолженностиБУ     = Окр(КоэффСписания * Строка.СуммаЗадолженностиБУ, 2);
		СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ = Окр(КоэффСписания * Строка.КорВалютнаяСуммаЗадолженностиБУ, 2);
		СтрокаДокумента.СтоимостьПоступление   = Окр(КоэффСписания * Строка.СтоимостьПоступление, 2);
		СтрокаДокумента.СтоимостьПоступлениеБУ = Окр(КоэффСписания * Строка.СтоимостьПоступлениеБУ, 2);
		СтрокаДокумента.Количество = ПогашаемоеКоличество;
		
		Если НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером 
		   И ( СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Реализация Или
				СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту) Тогда
			
			СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ОтложеннаяОтгрузка;
			
			Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
				СтрокаДокумента.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.МатериальныеЦенностиНаОтветственномХранении;
				
			ИначеЕсли СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
				
				Для СчетчикСтатуса =1 По 4 Цикл
					Если СтрокаДокумента["ДопустимыйСтатус"+СчетчикСтатуса] = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
						СтрокаДокумента["ДопустимыйСтатус"+СчетчикСтатуса] = Перечисления.СтатусыПартийТоваров.ВозвратнаяТараОтложеннаяОтгрузка;
					Иначе
						СтрокаДокумента["ДопустимыйСтатус"+СчетчикСтатуса] = Перечисления.СтатусыПартийТоваров.КупленныйОтложеннаяОтгрузка;
					КонецЕсли; 
				КонецЦикла; 
				
			КонецЕсли; 
		КонецЕсли; 
		
		СписаниеПартий(СтрокаДокумента, СтруктураПараметров, "НаСкладах");
		
		КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - ПогашаемоеКоличество;
		
		Строка.Количество             = Строка.Количество - ПогашаемоеКоличество;
		Строка.СуммаЗадолженности     = Строка.СуммаЗадолженности - Окр(КоэффСписания * Строка.СуммаЗадолженности, 2);
		Строка.СуммаЗадолженностиБУ   = Строка.СуммаЗадолженностиБУ - Окр(КоэффСписания * Строка.СуммаЗадолженностиБУ, 2);
		
		Строка.КорВалютнаяСуммаЗадолженностиБУ = Строка.КорВалютнаяСуммаЗадолженностиБУ - Окр(КоэффСписания * Строка.КорВалютнаяСуммаЗадолженностиБУ, 2);
		Строка.СтоимостьПоступление   = Строка.СтоимостьПоступление - Окр(КоэффСписания * Строка.СтоимостьПоступление, 2);
		Строка.СтоимостьПоступлениеБУ = Строка.СтоимостьПоступлениеБУ - Окр(КоэффСписания * Строка.СтоимостьПоступлениеБУ, 2);
		
	КонецЦикла;
	
	// Товара не хватило
	Если (КоличествоОсталосьПогасить > 0) Тогда
		СтрУчет = "Упр";
		Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СтрУчет = "Бух";
		ИначеЕсли СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
			СтрУчет = "Меж";
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрУчет + " учет. Документ " + СтрокаДокумента.Регистратор + Символы.ПС
		+ "Не найдено в документе списания "+ СтрокаДокумента.ОсновнойДокумент+ " "+ КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
		+ " товара " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, ""));
			
		СтруктураПараметров.Вставить("Отказ", Истина);
		
	КонецЕсли;
	
	// Теперь отметим все выполненные движения как принадлежащие документу реализации:
	СтруктураРеквизитовДокумента = Новый Структура("Дата");
	ПолучитьРеквизитыОбъекта(СтрокаДокумента.ОсновнойДокумент, СтруктураРеквизитовДокумента);
		
	Для Каждого Элемент Из СтруктураПараметров Цикл
				
		// В каждой таблице движений заполним реквизиты ДокументДвижения и ДокументДвиженияПериод
		Если Лев(Элемент.Ключ,15) = "ТаблицаДвижений" Тогда
			Если ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
				Если Элемент.Значение.Колонки.Найти("ДокументДвижения")<>Неопределено Тогда
					Элемент.Значение.ЗаполнитьЗначения(СтрокаДокумента.ОсновнойДокумент, "ДокументДвижения");
				КонецЕсли;
				Если Элемент.Значение.Колонки.Найти("ДокументДвиженияПериод")<>Неопределено Тогда
					Элемент.Значение.ЗаполнитьЗначения(СтруктураРеквизитовДокумента.Дата, "ДокументДвиженияПериод");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла;

КонецПроцедуры // СписаниеПартийОрдерныйСклад()

// Общие

// Возвращает таблицу документов
//
// Параметры
//ДокументСписания 
//Упр 
//Бух 
//Нал 
// Возвращаемое значение:
//   Таблица строк документа
//
Функция ПолучитьТаблицуСтрокДокументов(ДокументСписания=Неопределено, Упр = Истина, Бух = Истина) Экспорт
	
	// Общая часть запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСписания", ДокументСписания);
		
	Запрос.УстановитьПараметр("ВозвратОтКомиссионера", Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера);
	Запрос.УстановитьПараметр("РеализацияКомиссия", Перечисления.КодыОперацийПартииТоваров.РеализацияКомиссия);
	Запрос.УстановитьПараметр("ВозвратОтПереработчика", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика);
	Запрос.УстановитьПараметр("СписаниеПартийПереданныхВПроизводство", Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство);
	
	Запрос.УстановитьПараметр("Упр", Упр);
	Запрос.УстановитьПараметр("Бух", Бух);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""ПолучитьТаблицуСтрокДокументов"" КАК QuieryId ";
	
	Ресурсы = Метаданные.РегистрыСведений.СписанныеТовары.Ресурсы;
	
	Для каждого Ресурс Из Ресурсы Цикл
		
		Запрос.Текст = 	Запрос.Текст + ",
		|	"+ Ресурс.Имя;
		
	КонецЦикла; 
	
	Запрос.Текст = 	Запрос.Текст + ",
	|	Регистратор,
	|	Период,
	|	НомерСтроки,
	|	НомерСтрокиДокумента,
	|	Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ВЫБОР
	|	КОГДА
	|	КодОперацииПартииТоваров = &ВозвратОтКомиссионера
	|	ИЛИ КодОперацииПартииТоваров = &РеализацияКомиссия
	|	ИЛИ КодОперацииПартииТоваров = &ВозвратОтПереработчика
	|	ИЛИ КодОперацииПартииТоваров = &СписаниеПартийПереданныхВПроизводство
	|	ТОГДА ""Переданные""
	|	ИНАЧЕ
	|	""НаСкладах""
	|	КОНЕЦ КАК ИсточникПоКодуОперации
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки";
	
	Если ДокументСписания <> Неопределено Тогда
	
		Запрос.Текст = Запрос.Текст+ "
		|ГДЕ
		|	Строки.Регистратор = &ДокументСписания";
	
	КонецЕсли; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВУправленческомУчете", "(ОтражатьВУправленческомУчете И &Упр) КАК ОтражатьВУправленческомУчете");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВБухгалтерскомУчете", "(ОтражатьВБухгалтерскомУчете И &Бух) КАК ОтражатьВБухгалтерскомУчете");
	
	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();

КонецФункции//ПолучитьТаблицуСтрокДокументов

// Добавление остатков по партионному учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстатки(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация)
	
	ПолучитьОстаткиУпр(СтруктураПараметров, ТаблицаСписания, МоментКон);
	
	ПолучитьОстаткиРегл(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация);
	
	ПолучитьОстаткиМеж(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация);
	
КонецПроцедуры // ПолучитьОстатки()

/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ СПИСАНИЯ

// Дополнительные движения по результату списания партий
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДопДвиженияПоРезультатуСписания(СтруктураПараметров, ТаблицаСписания)
	
	Если ТаблицаСписания.Найти(Перечисления.КодыОперацийПартииТоваров.ПередачаМатериаловВЭксплуатацию, "КодОперацииПартииТоваров") <> Неопределено Тогда
	 	ПроцедурыПогашенияСтоимости.ПогашениеСтоимостиПриПередачеВЭксплуатацию(СтруктураПараметров, СтруктураПараметров.ТаблицаСписанныхПартий);
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьвУправленческомУчете Тогда
		ВыполнитьДопДвиженияПоРезультатуСписанияУпр(СтруктураПараметров, ТаблицаСписания);
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьвБухгалтерскомУчете Тогда
		ВыполнитьДопДвиженияПоРезультатуСписанияРегл(СтруктураПараметров, ТаблицаСписания);
	КонецЕсли;	
	
	//Добавлен алгоритм формирование корр движений
	Если СтруктураПараметров.ЕстьСтрокиОтражатьвМеждународномУчете Тогда
		ВыполнитьДопДвиженияПоРезультатуСписанияМеж(СтруктураПараметров, ТаблицаСписания);
	КонецЕсли;		
	
КонецПроцедуры // ВыполнитьДопДвиженияПоРезультатуСписания()

// Запускает формирование движений по результату списания партий в упр учете
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДопДвиженияПоРезультатуСписанияУпр(СтруктураПараметров, ТаблицаСписания)
	
	//Добавлен алгоритм формирование корр движений
	Для Каждого СтрокаСписания Из СтруктураПараметров.ТаблицаСписанныхПартий Цикл
		
		Если СтрокаСписания.ВидОперации = "Списание" Тогда
			НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаСписания.КодОперацииПартииТоваров, СтрокаСписания.СтатьяЗатрат);
			ВыполнитьКорДвижениеУпр(СтрокаСписания.РегистрУчета, НаправлениеСписания , СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
		КонецЕсли;	
		
		ВыполнитьСвязанныеДвиженияУпр(СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
			
	КонецЦикла;
	
	// Запись данных о реализованных товаррах
	ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтруктураПараметров, ТаблицаСписания);
		
КонецПроцедуры // ВыполнитьДопДвиженияПоРезультатуСписанияУпр()

// Запускает формирование движений по результату списания партий в регл учете
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДопДвиженияПоРезультатуСписанияРегл(СтруктураПараметров, ТаблицаСписания) 

	//Добавлен алгоритм формирование корр движений
	Для Каждого СтрокаСписания Из СтруктураПараметров.ТаблицаСписанныхПартий Цикл
		
		Если СтрокаСписания.ВидОперации = "Списание" Тогда
			Если СтрокаСписания.ОтражатьВБухгалтерскомУчете Тогда
				СчетЗатрат = СтрокаСписания.КорСчетБУ;			
			КонецЕсли;
						
			НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаСписания.КодОперацииПартииТоваров, СтрокаСписания.СтатьяЗатрат, СчетЗатрат);
			ВыполнитьКорДвижениеРегл(СтрокаСписания.РегистрУчета, НаправлениеСписания,СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
			
			
			// Формирование проводок по бух учету
				УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СписаниеНаСчет(СтрокаСписания.РегистрУчета, СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение,,НаправлениеСписания);
			
		ИначеЕсли СтрокаСписания.ВидОперации = "Возврат" Тогда
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СписаниеНаСчет("", СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение, СтрокаСписания.ТипЗаписи);
		ИначеЕсли СтрокаСписания.ВидОперации = "СписаниеПринятыхНаОтветственноеХранение" Тогда
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СписаниеНаСчет(СтрокаСписания.СписаноИз, СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
		КонецЕсли;	
		
		Если СтруктураПараметров.ФормироватьПроводкиПоСписаниюТМЦ Тогда
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ВыполнитьСвязанныеДвиженияРегл(СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
		КонецЕсли;	
	КонецЦикла;	
	


	Если ((ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")) И (НЕ СтруктураПараметров.Регистратор.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки))
	  ИЛИ ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
	    Если СтруктураПараметров.ФормироватьПроводкиПоСписаниюТМЦ Тогда
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СформироватьПроводкиОтклоненийВСтоимостиПриВозвратеПоставщику(СтруктураПараметров);
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры // ВыполнитьДопДвиженияПоРезультатуСписанияРегл()


// Запускает формирование движений по результату списания партий в упр учете
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДопДвиженияПоРезультатуСписанияМеж(СтруктураПараметров, ТаблицаСписания)
	
	//Добавлен алгоритм формирование корр движений
	Для Каждого СтрокаСписания Из СтруктураПараметров.ТаблицаСписанныхПартий Цикл
	
		Если СтрокаСписания.ВидОперации = "Списание" Тогда
			// Заполнение полей, специфических для учета
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокМежд.ВыполнитьСвязанныеДвиженияМеж(СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
			
			НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаСписания.КодОперацииПартииТоваров, СтрокаСписания.СтатьяЗатрат);
			ВыполнитьКорДвижениеМеж(СтрокаСписания.РегистрУчета, НаправлениеСписания, СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
			
			// Формирование проводок по меж учету
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокМежд.СписаниеНаСчетМеж(СтрокаСписания.РегистрУчета, СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
		КонецЕсли;	
		
		УправлениеЗапасамиПартионныйУчетФормированиеПроводокМежд.ВыполнитьСвязанныеДвиженияМеж(СтрокаСписания, СтруктураПараметров, СтрокаСписания.Движение);
	КонецЦикла;	

КонецПроцедуры // ВыполнитьДопДвиженияПоРезультатуСписанияУпр()


/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ СПИСАНИЯ

// СтруктураПараметров - основная переменная модуля, передается в бОльшую часть процедур и функций,
// содержит бОльшую часть параметров, нужных для проведения по партиям
Процедура ДополнитьСтруктуруПараметров(СтруктураПараметров, ТаблицаСписания) 
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете Тогда
		СтруктураПараметров.Вставить("СпособОценкиМПЗУпр", Строка(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", "Упр",  СтруктураПараметров)));		
		СтруктураПараметров.Вставить("СтратегияСтатусПартииУпр",  ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СтратегияСписанияПоСтатусам", "Упр", СтруктураПараметров));
		СтруктураПараметров.Вставить("ВестиПартионныйУчетПоСкладамУпр", ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров));
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
		СтруктураПараметров.Вставить("СпособОценкиМПЗБух", Строка(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", "Бух", СтруктураПараметров)));		
		СтруктураПараметров.Вставить("СтратегияСтатусПартииБух",  ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СтратегияСписанияПоСтатусам", "Бух", СтруктураПараметров));
		СтруктураПараметров.Вставить("ВестиПартионныйУчетПоСкладамБух", ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров));
		СтруктураПараметров.Вставить("СтоимостьСписанияБУ", 0);
		СтруктураПараметров.Вставить("СуммаЗадолженностиБУ", 0);
		СтруктураПараметров.Вставить("СтоимостьСписанияТараБУ", 0);
		СтруктураПараметров.Вставить("СуммаЗадолженностиТараБУ", 0);
		СтруктураПараметров.Вставить("СтоимостьСписанияБУВал", 0);
		СтруктураПараметров.Вставить("СуммаЗадолженностиБУВал", 0);
		СтруктураПараметров.Вставить("СтоимостьСписанияТараБУВал", 0);
		СтруктураПараметров.Вставить("СуммаЗадолженностиТараБУВал", 0);
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете Тогда
		СтруктураПараметров.Вставить("СпособОценкиМПЗМеж", Строка(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", "Меж", СтруктураПараметров)));		
		СтруктураПараметров.Вставить("СтратегияСтатусПартииМеж",  ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СтратегияСписанияПоСтатусам", "Меж", СтруктураПараметров));
		СтруктураПараметров.Вставить("ВестиПартионныйУчетПоСкладамМеж", ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Меж", СтруктураПараметров));
	КонецЕсли;
	
	СтруктураПараметров.Вставить("КэшПоВидамСубконто", Новый Соответствие);
	
	// От значения этой константы зависит будет ли партия списана на забалансовый счет документом списания
	// при списании по ордеру
	СтруктураПараметров.Вставить("СписыватьПартииРасходнымОрдером",Константы.СписыватьПартииРасходнымОрдером.Получить());	
	СтруктураПараметров.Вставить("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании",глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании"));

КонецПроцедуры//ДополнитьСтруктуруПараметров(СтруктураПараметров)

Функция ПодготовитьСтруктуруТаблицыСписания(СтруктураПараметров, ТаблицаСписания)
	
	ТаблицаСписанныхПартий = Новый ТаблицаЗначений();
	
	// Определение состава колонок 
	СписокКодовОпераций = Новый СписокЗначений;
	СписокКодовОпераций.ЗагрузитьЗначения(ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("КодОперацииПартииТоваров")));

	
	СтруктураКолонокТаблицыСписания = Новый Структура();
	СтруктураКолонокТаблицыСписания.Вставить("ОтражатьВУправленческомУчете");
	СтруктураКолонокТаблицыСписания.Вставить("ОтражатьВБухгалтерскомУчете");
	СтруктураКолонокТаблицыСписания.Вставить("ОтражатьВМеждународномУчете");
	
	СтруктураКолонокТаблицыСписания.Вставить("НомерСтрокиДокумента");
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете Тогда
		ОпределитьСоставКолонокТаблицаСписанныхПартийУпр(СтруктураПараметров, СписокКодовОпераций,СтруктураКолонокТаблицыСписания);
	КонецЕсли;	
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
		УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ОпределитьСоставКолонокТаблицаСписанныхПартийБух(СтруктураПараметров, СписокКодовОпераций,СтруктураКолонокТаблицыСписания);
		
 
		
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете Тогда
		УправлениеЗапасамиПартионныйУчетФормированиеПроводокМежд.ОпределитьСоставКолонокТаблицаСписанныхПартийМеж(СтруктураПараметров, СписокКодовОпераций,СтруктураКолонокТаблицыСписания);
	КонецЕсли;	
	
	// Подготовка структуры таблицы
	КолонкиТаблицыСписания = ТаблицаСписания.Колонки;
	ПриоритетныеКолонкиТаблицыСписания = "";
	Для каждого Колонка из СтруктураКолонокТаблицыСписания Цикл
		
		ТипЗначения = Неопределено;
		
		Если не КолонкиТаблицыСписания.Найти(Колонка.Ключ) = неопределено тогда
			ТипЗначения = КолонкиТаблицыСписания.Найти(Колонка.Ключ).ТипЗначения;
			ПриоритетныеКолонкиТаблицыСписания = ПриоритетныеКолонкиТаблицыСписания + "," + Колонка.Ключ;
		Иначе
			ТипЗначения = Колонка.Значение;
		КонецЕсли;
		
		Если ТипЗначения = Неопределено Тогда
			// Тип не объявлен
		ИначеЕсли ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Разрядность = ТипЗначения.КвалификаторыЧисла.Разрядность;
			РазрядностьДробнойЧасти = ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
			
			ТипЗначения = Новый ОписаниеТипов(ТипЗначения,,,КвалификаторЧисла);
		КонецЕсли;
		
		ТаблицаСписанныхПартий.Колонки.Добавить(Колонка.Ключ, ТипЗначения);
	КонецЦикла;
	
	Если ТаблицаСписанныхПартий.Колонки.Найти("РегистрУчета") = Неопределено Тогда
		ТаблицаСписанныхПартий.Колонки.Добавить("РегистрУчета");
	КонецЕсли;
	Если ТаблицаСписанныхПартий.Колонки.Найти("Движение") = Неопределено Тогда
		ТаблицаСписанныхПартий.Колонки.Добавить("Движение");
	КонецЕсли; 
	
	Если не ПустаяСтрока(ПриоритетныеКолонкиТаблицыСписания) Тогда
		ПриоритетныеКолонкиТаблицыСписания = Сред(ПриоритетныеКолонкиТаблицыСписания,2);
	КонецЕсли; 
	СтруктураПараметров.Вставить("ПриоритетныеКолонкиТаблицыСписания", ПриоритетныеКолонкиТаблицыСписания);
	
	Возврат ТаблицаСписанныхПартий;
	
КонецФункции

Процедура ПодготовитьДанныеДляВыполненияДвиженийПоРезульататамСписания(СтруктураПараметров, Движение, СтрокаПартии, СтрокаДокумента,РегистрУчета
	,ВидОперации, СписаноИз, ТипЗаписи, СтрокаСписанныхТоваров = Неопределено)
	
	ТаблицаСписанныхПартий = СтруктураПараметров.ТаблицаСписанныхПартий;
	НоваяСтрока = ТаблицаСписанныхПартий.Добавить();
	
	// Заполнение по строке партии
	Если НЕ СтрокаПартии = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПартии);
	КонецЕсли;	
	
	// Заполнение по строке движения, возможно изменение одного части значений
	Если НЕ Движение = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Движение);
	КонецЕсли;	

	// Максимальный приоритет по строке документа
	Если НЕ СтрокаДокумента = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
	КонецЕсли;	
	
	Если СтрокаСписанныхТоваров <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСписанныхТоваров);
	КонецЕсли;	
	
	НоваяСтрока.Движение = Движение;
	
	//Дополнить служебной информацией 
	ЗаполнитьЗначенияСвойств(НоваяСтрока,
	Новый структура("ВидОперации, СписаноИз, ТипЗаписи, РегистрУчета", ВидОперации, СписаноИз, ТипЗаписи, РегистрУчета));
	
КонецПроцедуры

//
// Параметры 
// ТаблицаСписания - таблица значений полученная из регистра Списанные товары
// МоментКон	   - момент времени проведения документа
// Останавливаться - останавливать проведение по партиям на первом документе, который не провелся по партиям
// ПроведениеОстановлено - признак того что проведение остановлено для обработки проведение по партиям
Процедура ВыполнитьСписание(СтруктураПараметров, ТаблицаСписания, МоментКон, Останавливаться = Ложь, ПроведениеОстановлено = Ложь )
	
	//Коновалова 13022013 +
	ПараметрыСеанса.ОтменитьСписаниеПоПартиям = Ложь;
	//Коновалова 13022013 -
	
	Организация = ТаблицаСписания[0].Организация;
	
	СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВУправленческомУчете")<>Неопределено);
	СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВБухгалтерскомУчете")<>Неопределено);
	СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВМеждународномУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВМеждународномУчете")<>Неопределено);
	
	СтруктураПараметров.Вставить("Организация", Организация);
	
	ДополнитьСтруктуруПараметров(СтруктураПараметров, ТаблицаСписания);
	
	СтруктураПараметров.Вставить("КодыОпераций",Перечисления.КодыОперацийПартииТоваров);
	
	Если ЗначениеЗаполнено(ТаблицаСписания[0].ОсновнойДокумент) Тогда
		
		СтруктураПараметров.Вставить("ОсновнойДокумент",ТаблицаСписания[0].ОсновнойДокумент);
		
	КонецЕсли;
		
	// Подготовка наборов записей
	ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ТаблицаСписания[0].Период, ТаблицаСписания[0].Регистратор, Истина);
	
	СтруктураПараметров.Вставить("ТипЗначенияРегистратора", ТипЗнч(ТаблицаСписания[0].Регистратор));
	
	СтруктураПараметров.Вставить("ТаблицаСписанныхПартий",ПодготовитьСтруктуруТаблицыСписания(СтруктураПараметров, ТаблицаСписания));
	
	// Для закрытия заказов покупателей дерево остатков партий должно получаться особым способом
	Если СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей") тогда
		СтруктураПараметров.Вставить("ЗакрытиеЗаказовПокупателей");
	КонецЕсли;
	
	// В некоторых случаях получать остатки не нужно
	ТребуетсяПолучитьОстатки = Истина;
	
	// Ордерная схема поступления
	Если СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
	   Или СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.АвансовыйОтчет") 
	   Или СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки")  тогда
		
		ТребуетсяПолучитьОстатки = Ложь;
		
	// Возврат товаров от покупателя (возврат от комиссионера обрабатывается основным алгоритмом списания
	// фактически являясь частным случаем перемещения товаров)
	ИначеЕсли СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		ТребуетсяПолучитьОстатки = НЕ ТаблицаСписания[0].КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтПокупателя;
	
	КонецЕсли;

	Если ТребуетсяПолучитьОстатки Тогда
	
		// Добавление в структуру остатков по партионному учету
		ПолучитьОстатки(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация);
	КонецЕсли;
	
	ОбрабатываемыйДокумент = Неопределено;
	
	СтруктураВидовУчета = Новый Структура("ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВМеждународномУчете");
	
	СтрокаДокумента = Новый Структура;
	Для Каждого Колонка ИЗ ТаблицаСписания.Колонки Цикл
		СтрокаДокумента.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыСписания Из ТаблицаСписания Цикл
		
		ОбрабатываемыйДокумент = СтрокаТаблицыСписания.Регистратор;
		
		// Строка не обрабатывается при списании
		Если НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером И 
			( СтрокаТаблицыСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Реализация Или
				СтрокаТаблицыСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту)
		   Тогда
			// Для документа "Реализация товаров и услуг" реализована возможность списывать партии при 
			// проведении документа, даже если вид передачи = "по ордеру"
			// В этом случае партия списывается за баланс и окончательное списание осуществляется ордером
			НеСписывать = Ложь;
		Иначе
			НеСписывать = СтрокаТаблицыСписания.НеСписывать;
		КонецЕсли;
		
		Если НеСписывать Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаЗадолженностиБУ = СтрокаТаблицыСписания.СуммаЗадолженностиБУ;
		
		// Для учета отклонений при возврате товаров поставщику требуется общая сумма задолженности БУ
		Если СтрокаТаблицыСписания.ОтражатьВБухгалтерскомУчете Тогда
			Если СтрокаТаблицыСписания.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара Тогда
				СтруктураПараметров.СуммаЗадолженностиТараБУ = СтруктураПараметров.СуммаЗадолженностиТараБУ + СуммаЗадолженностиБУ;
				СтруктураПараметров.СуммаЗадолженностиТараБУВал = СтруктураПараметров.СуммаЗадолженностиТараБУВал + СтрокаТаблицыСписания.КорВалютнаяСуммаЗадолженностиБУ
			Иначе
				СтруктураПараметров.СуммаЗадолженностиБУ = СтруктураПараметров.СуммаЗадолженностиБУ + СуммаЗадолженностиБУ;	
				СтруктураПараметров.СуммаЗадолженностиБУВал = СтруктураПараметров.СуммаЗадолженностиБУВал + СтрокаТаблицыСписания.КорВалютнаяСуммаЗадолженностиБУ
			КонецЕсли; 
		КонецЕсли;
		
		// Номер строки, по которой списана партия
		// Используется при возврате товаров от покупателя, ордерной схеме поступления,
		// механизмом корректировки стоимости списания 
		СтруктураПараметров.Вставить("НомерСтрокиСписанныхТоваров",СтрокаТаблицыСписания.НомерСтроки);
		
		ЗаполнитьЗначенияСвойств(СтруктураВидовУчета, СтрокаТаблицыСписания);
		
		
		
		Для Каждого КлючИЗначение ИЗ СтруктураВидовУчета Цикл
			Если КлючИЗначение.Значение Тогда
				

		ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТаблицыСписания);
		
				Шаблон = Новый Структура("ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВМеждународномУчете", Ложь, Ложь, Ложь);
				Шаблон[КлючИЗначение.Ключ] = ИСТИНА;
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, Шаблон);
				
				
				// Специфические случаи списания :
				
				// 1. Возврат от покупателя
				Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтПокупателя Тогда
					
					ПоступлениеВозвратОтПокупателя(СтрокаДокумента, СтруктураПараметров);
					
					// 2. Поступление товаров по ордеру: корректировка предыдущих списаний
				ИначеЕсли ЗначениеЗаполнено(СтрокаДокумента.ПоступлениеПриходныйОрдер) Тогда
					
					Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
						ПоступлениеТоваровПоОрдеруУпр(СтрокаДокумента, СтруктураПараметров);
					КонецЕсли;
					
					// 3. Закрытие заказов
				ИначеЕсли ТипЗнч(СтрокаДокумента.Регистратор)=Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей") Тогда
					
					СнятиеРезервовПоЗаказамПокупателей(СтрокаДокумента, СтруктураПараметров);
					
					// 4. Документ, в котором указываются данные, которых нет в документе списания:
					// - Списание партий по расходному ордеру
					// - Перемещение партий по приходному ордеру
				ИначеЕсли ЗначениеЗаполнено(СтрокаДокумента.ОсновнойДокумент) Тогда
					
					СписаниеПартийОрдерныйСклад(СтрокаДокумента, СтруктураПараметров);

				// 5. Регламентная переоценка запасов по БУ
				ИначеЕсли ТипЗнч(СтрокаДокумента.Регистратор)=Тип("ДокументСсылка.РегламентнаяПереоценкаЗапасов") Тогда
						
					Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
						// переоценка сейчас выполняется только по бухгалтерскому учету
						РегламентнаяПереоценкаЗапасов(СтрокаДокумента, СтруктураПараметров);
					КонецЕсли;

					// Общий случай списания
				Иначе
					
					// Сначала обрабатывается списание
					СписаниеПартий(СтрокаДокумента, СтруктураПараметров, СтрокаДокумента.ИсточникПоКодуОперации);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		СтрокаДокумента.СуммаЗадолженностиБУ = СуммаЗадолженностиБУ;
		
		
		ТаблицаСписанныхПартийПоТекущейСтроке = СтруктураПараметров.ТаблицаСписанныхПартий.НайтиСтроки(Новый Структура("НомерСтрокиДокумента", СтрокаДокумента.НомерСтрокиДокумента));
		Для Каждого ТекущаяСтрокаСписанныхПартий Из ТаблицаСписанныхПартийПоТекущейСтроке Цикл
			ТекущаяСтрокаСписанныхПартий.СуммаЗадолженностиБУ = СуммаЗадолженностиБУ;
		КонецЦикла;	
		
	КонецЦикла; 
	
	Если СтруктураПараметров.Свойство("ТаблицыСписанияРасходнымОрдером") тогда
		СтруктураПараметров.Удалить("ТаблицыСписанияРасходнымОрдером");
	КонецЕсли;
	
	Если Не ОбрабатываемыйДокумент = Неопределено Тогда
		
		// Дополнительные движения по результату списания документом определенных партий
		ВыполнитьДопДвиженияПоРезультатуСписания(СтруктураПараметров, ТаблицаСписания);
		
		// Если задан параметр останавливаться при нехватке партий и партий не хватило - прекратим проведение
		
		//Коновалова 13022013 +
		Останавливаться = ПараметрыСеанса.ОтменитьСписаниеПоПартиям;
		//Коновалова 13022013 -
		
		Если Останавливаться И СтруктураПараметров.Отказ тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Проведение по партиям остановлено ",СтруктураПараметров.Отказ);
			ПроведениеОстановлено = Истина;
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(ОбрабатываемыйДокумент)= Тип("ДокументСсылка.СписаниеМПЗМеждународный") Тогда
			ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, Ложь);
		Иначе
			ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, Истина);  		
		КонецЕсли; 			
				
		Если ТипЗнч(ОбрабатываемыйДокумент)= Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
				
				
		КонецЕсли;
			
		#Если Клиент Тогда
			Состояние("Проведен документ " + ОбрабатываемыйДокумент);
		#КонецЕсли
	КонецЕсли;
	
	
КонецПроцедуры//ВыполнитьСписание()

// Сдвиг ГП расчетов по реализации
//
Процедура СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизацииНазад(СтруктураПараметров, ТаблицаСписания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоРеализацииОрганизации.МоментВремени
	|ИЗ
	|	Последовательность.РасчетыПоРеализацииОрганизации.Границы КАК РасчетыПоРеализацииОрганизации
	|ГДЕ
	|	РасчетыПоРеализацииОрганизации.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", ТаблицаСписания[0].Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МоментВремениДокумента = Новый МоментВремени(СтруктураПараметров.Период, СтруктураПараметров.Регистратор);
	
	Если Выборка.Следующий() Тогда
		
		// Граница переносится назад, если документ проводится задним числом
		Если МоментВремениДокумента.Сравнить(Выборка.МоментВремени) = -1 Тогда
			Последовательности.РасчетыПоРеализацииОрганизации.УстановитьГраницу(МоментВремениДокумента, Новый Структура("Организация", ТаблицаСписания[0].Организация));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры// СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизацииНазад

// 
//
Функция ОпределитьНеобходимостьСдвигаГраницы(ДокументМоментВремени, Учет, Отбор = Неопределено, СписыватьПартииПриПроведенииДокументов = Ложь)
	
	// Границу последовательности можно сдвигать вперед только если между границей
	// и документом нет других документов в последовательности
	// Исключения - регламентные документы
	// Регламентные документы могут располагаться в последней секунде месяца
	// одновременно с другими документами и иметь момент времени меньше,
	// чем документы списания, находящиеся в той же секунде
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Последовательность.Регистратор
	               |ИЗ
	               |	Последовательность.ПартионныйУчет КАК Последовательность
	               |ГДЕ
				   |    Организация =&Организация
	               |	И Последовательность.МоментВремени > &Граница
	               |	И Последовательность.МоментВремени < &Документ
	               |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска)
	               |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров)
				   |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену)
				   |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг)
				   |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.ПоступлениеТоваровИзПереработки)
				   |	И (НЕ Последовательность.Регистратор = &Регистратор)";
	
	Если Учет = "Упр" Тогда

		ГраницаМоментВремени = Последовательности.ПартионныйУчет.ПолучитьГраницу(Отбор);

	ИначеЕсли Учет = "Бух" ИЛИ Учет = "Нал" Тогда

		ГраницаМоментВремени = Последовательности.ПартионныйУчетБУ.ПолучитьГраницу(Отбор);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПартионныйУчет", "ПартионныйУчетБУ");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Отбор.Организация);
	Запрос.УстановитьПараметр("Граница", ГраницаМоментВремени);
	Запрос.УстановитьПараметр("Документ", ДокументМоментВремени);
	Запрос.УстановитьПараметр("Регистратор", ДокументМоментВремени.Ссылка);
	
	Если ГраницаМоментВремени = Неопределено ИЛИ ГраницаМоментВремени.Дата = '00010101' Тогда
		Возврат Истина;
	ИначеЕсли СписыватьПартииПриПроведенииДокументов И (ГраницаМоментВремени.Дата > ДокументМоментВремени.Дата) Тогда
		Возврат Ложь;
	Иначе	
		Возврат Запрос.Выполнить().Пустой();
	КонецЕсли;	
	
КонецФункции 

// 
//
Функция ОпределитьНаличиеПоследующихДокументовВПоследовательности(ДокументМоментВремени, Учет, Отбор = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Последовательность.Регистратор
	               |ИЗ
	               |	Последовательность.ПартионныйУчет КАК Последовательность
	               |ГДЕ
				   |    Организация =&Организация
	               |	И Последовательность.МоментВремени > &Документ
	               |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска)
	               |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров)
				   |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену)
				   |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг)
				   |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.ПоступлениеТоваровИзПереработки)
				   |	И (НЕ Последовательность.Регистратор = &Регистратор)";
	
	Если Учет = "Бух" ИЛИ Учет = "Нал" Тогда

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПартионныйУчет", "ПартионныйУчетБУ");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Отбор.Организация);
	Запрос.УстановитьПараметр("Документ", ДокументМоментВремени);
	Запрос.УстановитьПараметр("Регистратор", ДокументМоментВремени.Ссылка);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ПОСТУПЛЕНИЯ НЕОТФАКТУРОВАННЫХ ТОВАРОВ

Процедура ПоступлениеТоваровПоОрдеруУпр(СтрокаДокумента, СтруктураПараметров)
	
	Если НЕ СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	Ссылка = СтрокаДокумента.Регистратор;

	ПриходныйОрдер = СтрокаДокумента.ПоступлениеПриходныйОрдер;
	
	Если Не ТипЗнч(ПриходныйОрдер) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросДатаОрдера = Новый Запрос("ВЫБРАТЬ Дата ИЗ Документ.ПриходныйОрдерНаТовары ГДЕ Ссылка = &Ссылка");
	ЗапросДатаОрдера.УстановитьПараметр("Ссылка", ПриходныйОрдер);
	Выборка = ЗапросДатаОрдера.Выполнить().Выбрать();
	Выборка.Следующий();
	
	// Дата начала обработки
	ДатаНач = Выборка.Дата;
	
	// Дата конца обработки
	ДатаКон = СтрокаДокумента.Период;
	
	// Партии, поступившие по накладной
	ЗапросПартии = Новый Запрос;
	
	ЗапросПартии.УстановитьПараметр("Регистратор", Ссылка);
	ЗапросПартии.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	ЗапросПартии.УстановитьПараметр("ПоОрдеру", Перечисления.СтатусыПартийТоваров.ПоОрдеру);
	
	ЗапросПартии.Текст = 
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ПартииТоваровНаСкладах.Заказ,
	|	СУММА(ПартииТоваровНаСкладах.Количество) КАК Количество,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость,
	|	СУММА(ПартииТоваровНаСкладах.Количество) КАК КоличествоДляВозврата,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК СтоимостьДляВозврата,
	|	ПартииТоваровНаСкладах.Качество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|ГДЕ
	|	ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
	|	И ПартииТоваровНаСкладах.СтатусПартии <> &ПоОрдеру
	|	И ПартииТоваровНаСкладах.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Качество";
	
	ТабПартий = ЗапросПартии.Выполнить().Выгрузить();
	
	МассивНоменклатуры = ТабПартий.ВыгрузитьКолонку("Номенклатура");
	
	МассивНоменклатуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	// Пустая таблица
	ТабПартийПеред = Новый ТаблицаЗначений;
	ТабПартийПеред.Колонки.Добавить("Номенклатура");
	ТабПартийПеред.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТабПартийПеред.Колонки.Добавить("ДокументОприходования");
	ТабПартийПеред.Колонки.Добавить("ДоговорКонтрагента");
	ТабПартийПеред.Колонки.Добавить("ДокументПередачи");
	ТабПартийПеред.Колонки.Добавить("СтатусПартии");
	ТабПартийПеред.Колонки.Добавить("СтатусПередачи");
	ТабПартийПеред.Колонки.Добавить("Количество");
	ТабПартийПеред.Колонки.Добавить("Стоимость");
	
	// Запрос для определения количества строк в регистре партий:
	
	Если СтруктураПараметров.ТекНомерСтрокиПартииТоваровНаСкладахУпр = 0 Тогда
	
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	МАКСИМУМ(ПартииТоваровНаСкладах.НомерСтроки) КАК НомерСтроки
		               |ИЗ
		               |	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		               |ГДЕ
		               |	ПартииТоваровНаСкладах.Регистратор = &Регистратор";
		Запрос.УстановитьПараметр("Регистратор", Ссылка);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			СтруктураПараметров.ТекНомерСтрокиПартииТоваровНаСкладахУпр = Выборка.НомерСтроки;
		КонецЕсли;
	КонецЕсли;	
	
	// Запрос по списанию партий ордеров:
	
	Запрос = Новый Запрос;
	
	МассивРеализация = Новый Массив;
	МассивРеализация.Добавить(КодыОпераций.Реализация);
	МассивРеализация.Добавить(КодыОпераций.РеализацияРозница);
	МассивРеализация.Добавить(КодыОпераций.РеализацияКомиссия);
	МассивРеализация.Добавить(КодыОпераций.ВозвратОтПокупателяТекущийМесяц);
	Запрос.УстановитьПараметр("КодыСписаниеНаСебестоимость", МассивРеализация);
	
	МассивСписаниеНаПереданные = Новый Массив;
	МассивСписаниеНаПереданные.Добавить(КодыОпераций.ПередачаНаКомиссию);
	МассивСписаниеНаПереданные.Добавить(КодыОпераций.ПередачаВПереработку);
	
	Запрос.УстановитьПараметр("КодыСписаниеНаПереданные",МассивСписаниеНаПереданные);
	
	Запрос.УстановитьПараметр("КодыСписаниеНаЗатраты", КодыОпераций.СписаниеНаЗатраты);
	
	МассивПеремещениеСклад= Новый Массив;
	МассивПеремещениеСклад.Добавить(КодыОпераций.ПеремещениеМеждуСкладами);
	МассивПеремещениеСклад.Добавить(КодыОпераций.ПереоценкаПринятыхНаКомиссию);
	МассивПеремещениеСклад.Добавить(КодыОпераций.КорректировкаСерийИХарактеристик);
	МассивПеремещениеСклад.Добавить(КодыОпераций.КорректировкаКачества);
	МассивПеремещениеСклад.Добавить(КодыОпераций.РезервированиеПодЗаказ);
	МассивПеремещениеСклад.Добавить(КодыОпераций.СнятиеРезерваПодЗаказ);
	МассивПеремещениеСклад.Добавить(КодыОпераций.ИзменениеНалоговогоНазначенияЗапасов);
	
	Запрос.УстановитьПараметр("КодыПеремещениеСклад", МассивПеремещениеСклад);
	
	МассивСписаниеНаСклад = Новый Массив;
	МассивСписаниеНаСклад.Добавить(КодыОпераций.ВозвратОтКомиссионера);
	МассивСписаниеНаСклад.Добавить(КодыОпераций.ВозвратОтПереработчика);
	Запрос.УстановитьПараметр("КодыСписаниеНаСклад", МассивСписаниеНаСклад);
	
	Запрос.УстановитьПараметр("МассивДокументовОприходования", ПриходныйОрдер);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("КодОперацииСписаниеПоОрдеру", Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру);
	
	Запрос.УстановитьПараметр("КодыСписаниеПартийВПроизводство", КодыОпераций.СписаниеПартийВПроизводствоОперативно);
	Запрос.УстановитьПараметр("КодКомплектация", КодыОпераций.Комплектация);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НаСкладах"" КАК СписаноИз,
	|	Источник.Период КАК Период,
	|	Источник.Регистратор КАК Регистратор,
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	СУММА(Источник.Количество) КАК Количество,
	|	СУММА(Источник.Стоимость) КАК Стоимость,
	|	Источник.КодОперации,
	|	ВЫБОР
	|		КОГДА НЕ Переданные.СтатусПередачи ЕСТЬ NULL 
	|			ТОГДА Переданные.СтатусПередачи
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатусПередачи,
	|	ВЫБОР
	|		КОГДА НЕ Переданные.ДокументПередачи ЕСТЬ NULL 
	|			ТОГДА Переданные.ДокументПередачи
	|		КОГДА НЕ МатериалыВЭксплуатации.ДокументПередачи ЕСТЬ NULL 
	|			ТОГДА МатериалыВЭксплуатации.ДокументПередачи
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПередачи,
	|	Переданные.ДоговорКонтрагента,
	|	Переданные.КодОперации КАК КодОперацииПартииТоваровПереданные,
	|	НаСкладахПоступление.Склад КАК СкладПолучатель,
	|	НаСкладахПоступление.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыНовая,
	|	НаСкладахПоступление.СерияНоменклатуры КАК СерияНоменклатурыНовая,
	|	Источник.КодОперации КАК КодОперацииПартииТоваров,
	|	Источник.НомерКорСтроки,
	|	ВЫБОР
	|		КОГДА НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL 
	|			ТОГДА Затраты.СтатьяЗатрат
	|		КОГДА НЕ НезавершенноеПроизводство.СтатьяЗатрат ЕСТЬ NULL 
	|			ТОГДА НезавершенноеПроизводство.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL 
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		КОГДА НЕ НезавершенноеПроизводство.НоменклатурнаяГруппа ЕСТЬ NULL 
	|			ТОГДА НезавершенноеПроизводство.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА НЕ Затраты.Подразделение ЕСТЬ NULL 
	|			ТОГДА Затраты.Подразделение
	|		КОГДА НЕ Себестоимость.Подразделение ЕСТЬ NULL 
	|			ТОГДА Себестоимость.Подразделение
	|		КОГДА НЕ НезавершенноеПроизводство.Подразделение ЕСТЬ NULL 
	|			ТОГДА НезавершенноеПроизводство.Подразделение
	|		КОГДА НЕ МатериалыВЭксплуатации.Подразделение ЕСТЬ NULL 
	|			ТОГДА МатериалыВЭксплуатации.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ Затраты.Заказ ЕСТЬ NULL 
	|			ТОГДА Затраты.Заказ
	|		КОГДА НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL 
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		КОГДА НЕ НаСкладахПоступление.Заказ ЕСТЬ NULL 
	|			ТОГДА НаСкладахПоступление.Заказ
	|		КОГДА НЕ НезавершенноеПроизводство.Заказ ЕСТЬ NULL 
	|			ТОГДА НезавершенноеПроизводство.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗаказСписания,
	|	0 КАК СтоимостьПоступление,
	|	Источник.Качество,
	|	НаСкладахПоступление.Качество КАК КачествоНовое,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ВЫБОР
	|		КОГДА НЕ МатериалыВЭксплуатации.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА МатериалыВЭксплуатации.ФизЛицо
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА НЕ МатериалыВЭксплуатации.СхемаНазначенияИспользования ЕСТЬ NULL 
	|			ТОГДА МатериалыВЭксплуатации.СхемаНазначенияИспользования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СхемаНазначенияИспользования,
	|	ВЫБОР
	|		КОГДА НЕ МатериалыВЭксплуатации.СпособОтраженияРасходов ЕСТЬ NULL 
	|			ТОГДА МатериалыВЭксплуатации.СпособОтраженияРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СпособОтраженияРасходов,
	|	ВЫБОР
	|		КОГДА НЕ МатериалыВЭксплуатации.СрокПолезногоИспользования ЕСТЬ NULL 
	|			ТОГДА МатериалыВЭксплуатации.СрокПолезногоИспользования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СрокПолезногоИспользования,
	|	ВЫБОР
	|		КОГДА НЕ ИсточникДляКомплектации.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ИсточникДляКомплектации.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатураНовая,
	|	ВЫБОР
	|		КОГДА НЕ ИсточникДляКомплектации.ДокументОприходования ЕСТЬ NULL 
	|			ТОГДА ИсточникДляКомплектации.ДокументОприходования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОприходованияНовый,
	|	ЕСТЬNULL(ИсточникДляКомплектации.Количество, 0) КАК КоличествоПоступление,
	|	Источник.НомерСтрокиСписанныхТоваров КАК НомерСтрокиСписанныхТоваров,
	|	СписанныеТовары.ВалютаДокумента КАК ВалютаДокумента,
	|	СписанныеТовары.КурсДокумента КАК КурсДокумента,
	|	СписанныеТовары.КратностьДокумента КАК КратностьДокумента,
	|	СписанныеТовары.НоменклатураКомплекта КАК НоменклатураКомплекта,
	|	СписанныеТовары.ХарактеристикаКомплекта КАК ХарактеристикаКомплекта,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ СписанныеТовары.Количество = 0
	|				ТОГДА СписанныеТовары.КоличествоКомплекта * Источник.Количество / СписанныеТовары.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоКомплекта,
	|	СписанныеТовары.СуммаЗадолженности КАК СуммаВыручки,
	|	СписанныеТовары.Проект КАК Проект,
	|	ЕСТЬNULL(СписанныеТовары.ВедениеУчетаПоПроектам, ЛОЖЬ) КАК ВедениеУчетаПоПроектам
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданные КАК Переданные
	|		ПО Источник.Регистратор = Переданные.Регистратор
	|			И Источник.НомерКорСтроки = Переданные.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаПереданные))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Затраты КАК Затраты
	|		ПО Источник.Регистратор = Затраты.Регистратор
	|			И Источник.НомерКорСтроки = Затраты.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаЗатраты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК Себестоимость
	|		ПО Источник.Регистратор = Себестоимость.Регистратор
	|			И Источник.НомерКорСтроки = Себестоимость.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаСебестоимость))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК НаСкладахПоступление
	|		ПО Источник.Регистратор = НаСкладахПоступление.Регистратор
	|			И Источник.НомерКорСтроки = НаСкладахПоступление.НомерСтроки
	|			И (Источник.КодОперации В (&КодыПеремещениеСклад))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НезавершенноеПроизводство КАК НезавершенноеПроизводство
	|		ПО Источник.Регистратор = НезавершенноеПроизводство.Регистратор
	|			И Источник.НомерКорСтроки = НезавершенноеПроизводство.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеПартийВПроизводство))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииМатериаловВЭксплуатации КАК МатериалыВЭксплуатации
	|		ПО Источник.Регистратор = МатериалыВЭксплуатации.Регистратор
	|			И Источник.НомерКорСтроки = МатериалыВЭксплуатации.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК ИсточникДляКомплектации
	|		ПО Источник.Регистратор = ИсточникДляКомплектации.Регистратор
	|			И Источник.НомерКорСтроки = ИсточникДляКомплектации.НомерСтроки
	|			И (Источник.КодОперации В (&КодКомплектация))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ПО Источник.Регистратор = СписанныеТовары.Регистратор
	|			И Источник.НомерСтрокиСписанныхТоваров = СписанныеТовары.НомерСтроки
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.КодОперации <> &КодОперацииСписаниеПоОрдеру
	|	И Источник.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Период,
	|	Источник.Регистратор,
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	Источник.КодОперации,
	|	ВЫБОР
	|		КОГДА НЕ Переданные.СтатусПередачи ЕСТЬ NULL 
	|			ТОГДА Переданные.СтатусПередачи
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Переданные.ДокументПередачи ЕСТЬ NULL 
	|			ТОГДА Переданные.ДокументПередачи
	|		КОГДА НЕ МатериалыВЭксплуатации.ДокументПередачи ЕСТЬ NULL 
	|			ТОГДА МатериалыВЭксплуатации.ДокументПередачи
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Переданные.ДоговорКонтрагента,
	|	Переданные.КодОперации,
	|	НаСкладахПоступление.Склад,
	|	НаСкладахПоступление.ХарактеристикаНоменклатуры,
	|	НаСкладахПоступление.СерияНоменклатуры,
	|	Источник.НомерКорСтроки,
	|	ВЫБОР
	|		КОГДА НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL 
	|			ТОГДА Затраты.СтатьяЗатрат
	|		КОГДА НЕ НезавершенноеПроизводство.СтатьяЗатрат ЕСТЬ NULL 
	|			ТОГДА НезавершенноеПроизводство.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL 
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		КОГДА НЕ НезавершенноеПроизводство.НоменклатурнаяГруппа ЕСТЬ NULL 
	|			ТОГДА НезавершенноеПроизводство.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Затраты.Подразделение ЕСТЬ NULL 
	|			ТОГДА Затраты.Подразделение
	|		КОГДА НЕ Себестоимость.Подразделение ЕСТЬ NULL 
	|			ТОГДА Себестоимость.Подразделение
	|		КОГДА НЕ НезавершенноеПроизводство.Подразделение ЕСТЬ NULL 
	|			ТОГДА НезавершенноеПроизводство.Подразделение
	|		КОГДА НЕ МатериалыВЭксплуатации.Подразделение ЕСТЬ NULL 
	|			ТОГДА МатериалыВЭксплуатации.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ Затраты.Заказ ЕСТЬ NULL 
	|			ТОГДА Затраты.Заказ
	|		КОГДА НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL 
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		КОГДА НЕ НаСкладахПоступление.Заказ ЕСТЬ NULL 
	|			ТОГДА НаСкладахПоступление.Заказ
	|		КОГДА НЕ НезавершенноеПроизводство.Заказ ЕСТЬ NULL 
	|			ТОГДА НезавершенноеПроизводство.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Источник.Качество,
	|	НаСкладахПоступление.Качество,
	|	ВЫБОР
	|		КОГДА НЕ МатериалыВЭксплуатации.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА МатериалыВЭксплуатации.ФизЛицо
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ МатериалыВЭксплуатации.СхемаНазначенияИспользования ЕСТЬ NULL 
	|			ТОГДА МатериалыВЭксплуатации.СхемаНазначенияИспользования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ МатериалыВЭксплуатации.СпособОтраженияРасходов ЕСТЬ NULL 
	|			ТОГДА МатериалыВЭксплуатации.СпособОтраженияРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ МатериалыВЭксплуатации.СрокПолезногоИспользования ЕСТЬ NULL 
	|			ТОГДА МатериалыВЭксплуатации.СрокПолезногоИспользования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	ВЫБОР
	|		КОГДА НЕ ИсточникДляКомплектации.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ИсточникДляКомплектации.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ИсточникДляКомплектации.ДокументОприходования ЕСТЬ NULL 
	|			ТОГДА ИсточникДляКомплектации.ДокументОприходования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ЕСТЬNULL(ИсточникДляКомплектации.Количество, 0),
	|	Источник.НомерСтрокиСписанныхТоваров,
	|	СписанныеТовары.ВалютаДокумента,
	|	СписанныеТовары.КурсДокумента,
	|	СписанныеТовары.КратностьДокумента,
	|	СписанныеТовары.НоменклатураКомплекта,
	|	СписанныеТовары.ХарактеристикаКомплекта,
	|	СписанныеТовары.СуммаЗадолженности,
	|	СписанныеТовары.Проект,
	|	СписанныеТовары.ВедениеУчетаПоПроектам,
	|	Источник.КодОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Переданные"",
	|	Источник.Период,
	|	Источник.Регистратор,
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	НаСкладах.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	НаСкладах.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	НаСкладах.Заказ,
	|	СУММА(Источник.Количество),
	|	СУММА(Источник.Стоимость),
	|	Источник.КодОперации,
	|	Источник.СтатусПередачи,
	|	Источник.ДокументПередачи,
	|	Источник.ДоговорКонтрагента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	НаСкладах.КодОперации,
	|	Источник.НомерКорСтроки,
	|	NULL,
	|	NULL,
	|	Себестоимость.Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL 
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	NULL,
	|	NULL,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданные КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК НаСкладах
	|		ПО Источник.Регистратор = НаСкладах.Регистратор
	|			И Источник.НомерКорСтроки = НаСкладах.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаСклад))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК Себестоимость
	|		ПО Источник.Регистратор = Себестоимость.Регистратор
	|			И Источник.НомерКорСтроки = Себестоимость.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаСебестоимость))
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	Источник.ДоговорКонтрагента,
	|	Источник.ДокументПередачи,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.СтатусПередачи,
	|	НаСкладах.Склад,
	|	НаСкладах.СерияНоменклатуры,
	|	НаСкладах.Заказ,
	|	Источник.Период,
	|	Источник.Регистратор,
	|	Источник.КодОперации,
	|	НаСкладах.КодОперации,
	|	Источник.НомерКорСтроки,
	|	ВЫБОР
	|		КОГДА НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL 
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Себестоимость.Подразделение,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ Источник.Номенклатура В (&МассивНоменклатуры)
	|	И Источник.ДокументОприходования В (&МассивДокументовОприходования) И ");
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// Пустые колонки для совместимости со структурой регистра СписанныеТовары
	ТаблицаЗапроса.Колонки.Добавить("СтатусПартииНовый");
	ТаблицаЗапроса.Колонки.Добавить("ОтражатьВУправленческомУчете", Новый ОписаниеТипов("Булево"));
	ТаблицаЗапроса.Колонки.Добавить("ОтражатьВБухгалтерскомУчете",  Новый ОписаниеТипов("Булево"));
	ТаблицаЗапроса.Колонки.Добавить("ОтражатьВМеждународномУчете",  Новый ОписаниеТипов("Булево"));
	ТаблицаЗапроса.Колонки.Добавить("ВидТабличнойЧасти");
	ТаблицаЗапроса.Колонки.Добавить("ЗаказПартии");
	
	ТаблицаЗапроса.ЗаполнитьЗначения(Истина, "ОтражатьВУправленческомУчете");

	ТаблицаЗапроса.Колонки.Добавить("ИзменитьСерию", Новый ОписаниеТипов("Булево"));
	ТаблицаЗапроса.Колонки.Добавить("ИзменитьХарактеристику", Новый ОписаниеТипов("Булево"));
	
	Если ТаблицаЗапроса.Количество() = 0 тогда
		Возврат;
	КонецЕсли;


	СтруктураПараметров.Вставить("ТаблицаПартииТоваровНаСкладах"+"Упр", ТабПартий);
	СтруктураПараметров.Вставить("ТаблицаПартииТоваровПереданные"+"Упр", ТабПартийПеред);
	
	НачНомерНаСкладах = 0;
	Если Не СтруктураПараметров.Свойство("МинНомерСтрокиПартииТоваровНаСкладахУпр",НачНомерНаСкладах) тогда
		НачНомерНаСкладах = СтруктураПараметров.ТекНомерСтрокиПартииТоваровНаСкладахУпр;
		СтруктураПараметров.Вставить("МинНомерСтрокиПартииТоваровНаСкладахУпр", НачНомерНаСкладах);
	КонецЕсли;
	
	НачНомерПереданные = 0;
	Если Не СтруктураПараметров.Свойство("МинНомерСтрокиПартииТоваровПереданныеУпр",НачНомерПереданные) тогда
		НачНомерПереданные = СтруктураПараметров.ТекНомерСтрокиПартииТоваровПереданныеУпр;
		СтруктураПараметров.Вставить("МинНомерСтрокиПартииТоваровПереданныеУпр", НачНомерПереданные);
	КонецЕсли;
	//Смартис Коршиков  21.09.15
	  Индекс=1;
	 //Смартис Коршиков  21.09.15


	Для Каждого ВыборкаДвижений ИЗ ТаблицаЗапроса Цикл
	    
		// Сторно списания по ордеру
		Если ВыборкаДвижений.СписаноИз = "НаСкладах" Тогда
			СтруктураПоиска = Новый Структура(
			"Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Заказ, Качество",
			ВыборкаДвижений.Номенклатура,
			ВыборкаДвижений.ХарактеристикаНоменклатуры,
			ВыборкаДвижений.СерияНоменклатуры,
			ВыборкаДвижений.Заказ,
			ВыборкаДвижений.Качество
			);
			Если ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров) Тогда
				СтруктураПоиска.Вставить("Склад",ВыборкаДвижений.Склад);
			КонецЕсли;
			
			НайденныеСтроки = СтруктураПараметров["ТаблицаПартииТоваровНаСкладах"+"Упр"].НайтиСтроки(СтруктураПоиска);
			
			КоличествоОсталосьПогасить = ВыборкаДвижений.Количество;
			
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если ВыборкаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц тогда
					
					Количество = Строка.КоличествоДляВозврата;
					Стоимость  = Строка.СтоимостьДляВозврата;

				Иначе

					Количество = Строка.Количество;
					Стоимость  = Строка.Стоимость;

				КонецЕсли;
				
				Если Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
		
				Если Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				// Ресурсы 
				Количество	= Окр(Количество * КоэффСписания,3,1);
				Стоимость	= Окр(Стоимость  * КоэффСписания,2,1);
				
				// Сторно старого движения
				Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+"Упр", СтруктураПараметров);

				ЗаполнитьЗначенияСвойств(Движение, ВыборкаДвижений);
				
				Движение.Период = СтрокаДокумента.Период;
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.Количество   = -Количество;
				Движение.Стоимость    = 0;
				НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(ВыборкаДвижений.КодОперации, ВыборкаДвижений.СтатьяЗатрат);
				
				// Аналогичную корректировку выполним для корреспондирующего движения
				ВыполнитьКорДвижениеУпр("НаСкладах", НаправлениеСписания, ВыборкаДвижений, СтруктураПараметров, Движение);
				
				// Заполним в КорДвижении дополнительные поля
				Если НаправлениеСписания = "Переданные" тогда
					КорДвижение = СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр[Движение.НомерКорСтроки -1- НачНомерПереданные];
					КорДвижение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
					КорДвижение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				КонецЕсли;
				
				// Новое движение
				Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+"Упр", СтруктураПараметров);
				
				ЗаполнитьЗначенияСвойств(Движение, ВыборкаДвижений);
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				Движение.Период       = СтрокаДокумента.Период;
				
				Если НЕ ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров) Тогда
					Движение.Склад = Неопределено;
				КонецЕсли;				
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.ДокументОприходования = Строка.ДокументОприходования;
				Движение.СтатусПартии = Строка.СтатусПартии;
				
				Движение.Количество   = Количество;
				Движение.Стоимость    = Стоимость;
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
				
				Если ВыборкаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц тогда
					
					Строка.КоличествоДляВозврата = Строка.КоличествоДляВозврата - Движение.Количество;
					Строка.СтоимостьДляВозврата  = Строка.СтоимостьДляВозврата  - Движение.Стоимость;
					
				Иначе
					
					Строка.Количество = Строка.Количество - Движение.Количество;
					Строка.Стоимость  = Строка.Стоимость  - Движение.Стоимость; 
					
				//   //Смартис Коршиков  21.09.15
				//	Попытка
				//		РегистраторП = ТаблицаЗапроса.Получить(Индекс).Регистратор;
				//		
				//		РегистраторН=истина;
				//	Исключение
				//		РегистраторН = Ложь;
				//	КонецПопытки;
				//	Если   ТаблицаЗапроса.Количество() > 1 и РегистраторН тогда 
				//		Если ТипЗНЧ(ТаблицаЗапроса.Получить(Индекс).Регистратор) <> Тип ("ДокументСсылка.ПоступлениеТоваровУслуг")  тогда
				//			НоваяСтрока =  ТабПартий.Добавить();
				//			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				//			//НоваяСтрока.Количество = мин(ТаблицаЗапроса.Получить(Индекс).Количество, Количество);
				//			НоваяСтрока.Количество = ТаблицаЗапроса.Получить(Индекс).Количество;
				//			//НоваяСтрока.Стоимость = Окр(НоваяСтрока.Количество * (Движение.Стоимость/Движение.Количество),2,1);
				//			НоваяСтрока.Стоимость = Окр(ТаблицаЗапроса.Получить(Индекс).Количество * (Движение.Стоимость/Движение.Количество),2,1);
				//			НоваяСтрока.КоличествоДляВозврата = ТаблицаЗапроса.Получить(Индекс).Количество;
				//			НоваяСтрока.СтоимостьДляВозврата = Окр(ТаблицаЗапроса.Получить(Индекс).Количество * (Движение.Стоимость/Движение.Количество),2,1);
				//			НоваяСтрока.Склад =  ТаблицаЗапроса.Получить(Индекс).Склад;	
				//		КонецЕсли;
				//	КонецЕсли;
				//	Индекс=Индекс+1;
				//  //Смартис Коршиков  21.09.15
				КонецЕсли;
				
				// Аналогичную корректировку выполним для корреспондирующего движения
				ВыполнитьКорДвижениеУпр("НаСкладах", НаправлениеСписания, ВыборкаДвижений, СтруктураПараметров, Движение);
				// Заполним в КорДвижении дополнительные поля
				Если НаправлениеСписания = "Переданные" тогда
					КорДвижение = СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр[Движение.НомерКорСтроки -1- НачНомерПереданные];
					КорДвижение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
					КорДвижение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
					// Если движение привело к поступлению в партии товаров переданные - надо увеличить остаток с соответствующим статусом партии
					НоваяСтрокаПереданных = СтруктураПараметров["ТаблицаПартииТоваровПереданные"+"Упр"].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПереданных,ВыборкаДвижений);
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПереданных,Движение);
				КонецЕсли;
		
			КонецЦикла;
			
		ИначеЕсли ВыборкаДвижений.СписаноИз = "Переданные" Тогда	
			
			СтруктураПоиска = Новый Структура(
			"Номенклатура, ХарактеристикаНоменклатуры, ДоговорКонтрагента, ДокументПередачи, СтатусПередачи",
			ВыборкаДвижений.Номенклатура,
			ВыборкаДвижений.ХарактеристикаНоменклатуры,
			ВыборкаДвижений.ДоговорКонтрагента,
			ВыборкаДвижений.ДокументПередачи,
			ВыборкаДвижений.СтатусПередачи,
			);
			
			СтруктураПоиска.Вставить("СтатусПередачи", ВыборкаДвижений.СтатусПередачи);
			
			НайденныеСтроки = СтруктураПараметров["ТаблицаПартииТоваровПереданные"+"Упр"].НайтиСтроки(СтруктураПоиска);
			
			КоличествоОсталосьПогасить = ВыборкаДвижений.Количество;
			
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
		
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				// Ресурсы 
				Количество	= Окр(Строка.Количество * КоэффСписания,3,1);
				Стоимость	= Окр(Строка.Стоимость  * КоэффСписания,2,1);
				
				// Сторно старого движения
				Движение              = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+"Упр", СтруктураПараметров);
				
				ЗаполнитьЗначенияСвойств(Движение,ВыборкаДвижений);
				
				Движение.Период       = СтрокаДокумента.Период;
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.Количество   = -Количество;
				Движение.Стоимость    = 0;
				
				// Код операции партии товаров должен совпадать с кодом операции
				ВыборкаДвижений.КодОперацииПартииТоваров = ВыборкаДвижений.КодОперации;
				
				// Аналогичную корректировку выполним для корреспондирующего движения
				НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(ВыборкаДвижений.КодОперации, ВыборкаДвижений.СтатьяЗатрат);
				ВыполнитьКорДвижениеУпр("Переданные",НаправлениеСписания, ВыборкаДвижений, СтруктураПараметров, Движение);
				
				// Заполним в КорДвижении дополнительные поля
				Если НаправлениеСписания = "НаСкладах" тогда
					КорДвижение = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр[Движение.НомерКорСтроки -1- НачНомерНаСкладах];
					КорДвижение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
					КорДвижение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				КонецЕсли;
				
				// Новое движение
				Движение              = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+"Упр", СтруктураПараметров);
				
				ЗаполнитьЗначенияСвойств(Движение,ВыборкаДвижений);
				
				Движение.Период       = СтрокаДокумента.Период;
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.ДокументОприходования = Строка.ДокументОприходования;
				Движение.СтатусПартии  = Строка.СтатусПартии;
				
				Движение.Количество   = Количество;
				Движение.Стоимость    = Стоимость;
				
				// Уменьшение погашаемого количества
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
				
				Строка.Количество = Строка.Количество - Движение.Количество;
				Строка.Стоимость  = Строка.Стоимость  - Движение.Стоимость;
				
				// Аналогичную корректировку выполним для корреспондирующего движения
				ВыполнитьКорДвижениеУпр("Переданные", НаправлениеСписания, ВыборкаДвижений, СтруктураПараметров, Движение);
				
				// Заполним в КорДвижении дополнительные поля
				Если НаправлениеСписания = "НаСкладах" тогда
					КорДвижение = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр[Движение.НомерКорСтроки -1- НачНомерНаСкладах];
					КорДвижение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
					КорДвижение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПоступлениеТоваровПоОрдеруУпр

Процедура СдвинутьГраницуПоследовательности(ИмяПоследовательности, ДокументМоментВремени, Учет, Отбор, СписыватьПартииПриПроведенииДокументов)
	СдвигатьГраницу = ОпределитьНеобходимостьСдвигаГраницы(ДокументМоментВремени, Учет, Отбор, СписыватьПартииПриПроведенииДокументов);

	Если СдвигатьГраницу Тогда
		Последовательности[ИмяПоследовательности].УстановитьГраницу(ДокументМоментВремени, Отбор);
	
		Набор = Последовательности[ИмяПоследовательности].СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ДокументМоментВремени.Ссылка);
		Если ЗначениеЗаполнено(Набор.Отбор.Регистратор.Значение) ТОгда
		
			Если ДокументМоментВремени.Ссылка.Проведен Тогда
				ДокументПроведенВХронологическойПоследовательности = (НЕ СписыватьПартииПриПроведенииДокументов) ИЛИ ОпределитьНаличиеПоследующихДокументовВПоследовательности(ДокументМоментВремени, Учет, Отбор);
				
				Если ДокументПроведенВХронологическойПоследовательности Тогда
					Набор.Прочитать();
					Для Каждого ТекСтрока Из Набор Цикл
						ТекСтрока.ПроведенВХронологическойПоследовательности = Истина;
					КонецЦикла;
					Набор.Записать();
				КонецЕсли;	
			Иначе
				Набор.Записать();//Удалим не проведенный документ из таблицы регистрации в последовательности
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры	

Процедура УстановкаГраницыПоследовательности(ЗакрытиеЗаказовПокупателей, ТаблицаСписания, Учет, ДокументМоментВремени, КорректировкаСтоимостиСписания=Ложь, СписыватьПартииПриПроведенииДокументовУпр) Экспорт
	
	ИмяПоследовательности = "ПартионныйУчет";
	Если Учет = "Упр" тогда
		ИмяПоследовательности = ИмяПоследовательности;
	ИначеЕсли Учет = "Бух" тогда
		ИмяПоследовательности = ИмяПоследовательности + "БУ";
	КонецЕсли;
	
	Если ЗакрытиеЗаказовПокупателей Тогда

		СписокОрганизаций = ТаблицаСписания.ВыгрузитьКолонку("Организация");

		//СписокОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
		Для Каждого Организация Из СписокОрганизаций Цикл
			Если Учет = "Упр" Тогда
				СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, ДокументМоментВремени);				
				Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ), Ложь);
			Иначе	
				Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", Организация, Ложь);
			КонецЕсли;	
			СдвинутьГраницуПоследовательности(ИмяПоследовательности, ДокументМоментВремени, Учет, Отбор, СписыватьПартииПриПроведенииДокументовУпр);
		КонецЦикла;

	ИначеЕсли НЕ ЗакрытиеЗаказовПокупателей Тогда

		Если КорректировкаСтоимостиСписания Тогда
			Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", Справочники.Организации.ПустаяСсылка(), Ложь);
		Иначе	
			Если Учет = "Упр" Тогда
				СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации( ДокументМоментВремени.Ссылка.Организация, ДокументМоментВремени);				
				Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(ДокументМоментВремени.Ссылка.Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ), Ложь);
			Иначе
				Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", ДокументМоментВремени.Ссылка.Организация, Ложь);
			КонецЕсли;
		КонецЕсли;	

		СдвинутьГраницуПоследовательности(ИмяПоследовательности, ДокументМоментВремени, Учет, Отбор, СписыватьПартииПриПроведенииДокументовУпр);

	КонецЕсли;
	
КонецПроцедуры // УстановкаГраницыПоследовательности()

// Процедура-вход для всех документов. Проводит переданный документ по учету партий товаров
//
// Параметры
//  ОбрабатываемыйДокумент - проводимый документ
//
Процедура ДвижениеПартийТоваров(ОбрабатываемыйДокумент, ТаблицаСписания = Неопределено,
								КоличествоСтрокВДокументе = 0, ЗНАЧ Упр = Истина,
								ЗНАЧ Бух = Истина, 
								Останавливаться = Ложь, ПроведениеОстановлено = Ложь,
								ДокументМоментВремени = Неопределено, СписаниеВыполняетсяОбработкой = Ложь,
								СтруктураНаборовЗаписей = Неопределено,
								ФормироватьПроводки = Неопределено, УчетнаяПолитика = Неопределено, УчитыватьСуществующиеСтрокиДвиженийПартийТоваров = Ложь) Экспорт
								
	СтруктураДата = Новый Структура("Дата");
	ПолучитьРеквизитыОбъекта(ОбрабатываемыйДокумент, СтруктураДата);
	ИспользоватьРасширеннуюАналитику = Ложь;							
	ДатаСравненияРАУЗ = СтруктураДата.Дата;
	Если ДокументМоментВремени <> Неопределено Тогда
		ДатаСравненияРАУЗ = ДокументМоментВремени.Дата;
	КонецЕсли; 
	Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
	 И глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ДатаСравненияРАУЗ Тогда
		Возврат;
	КонецЕсли;
							
	ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");							
								
	Если НЕ СписаниеВыполняетсяОбработкой Тогда
		Упр = Упр И ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументов;
		Бух = Бух И ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух;
	КонецЕсли;								
	
	СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(ОбрабатываемыйДокумент.Организация, ОбрабатываемыйДокумент.Дата);
	Упр = Упр И (НЕ СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется);
								
	// Если не переданы строки документа, выбираем из базы.
	Если ТаблицаСписания = Неопределено Тогда
		
		// Таблица строк документов списания
		ТаблицаСписания = ПолучитьТаблицуСтрокДокументов(ОбрабатываемыйДокумент, Упр, Бух);
		
	КонецЕсли;
	
	КоличествоСтрокВДокументе = ТаблицаСписания.Количество();
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИспользоватьРасширеннуюАналитику",ИспользоватьРасширеннуюАналитику);
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		СтруктураПараметров.Вставить("ФормироватьПроводкиПоСписаниюТМЦ", ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух);
	Иначе
		СтруктураПараметров.Вставить("ФормироватьПроводкиПоСписаниюТМЦ", Истина);
	КонецЕсли;	
	
	Если СписаниеВыполняетсяОбработкой  Тогда
		Если НЕ ФормироватьПроводки = Неопределено ТОгда
			СтруктураПараметров.Вставить("ФормироватьПроводкиПоСписаниюТМЦ", ФормироватьПроводки);
		КонецЕсли;
	КонецЕсли;	
	
	Если ДокументМоментВремени = Неопределено Тогда
		ДокументМоментВремени = Новый МоментВремени(СтруктураДата.Дата, ОбрабатываемыйДокумент);
	КонецЕсли; 
	
	Если КоличествоСтрокВДокументе > 0 Тогда
		
		СтруктураПараметров.Вставить("ТекстСообщений", "");
		
		СтруктураПараметров.Вставить("Отказ", Ложь);
		
		СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВУправленческомУчете")<>Неопределено);
		СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВБухгалтерскомУчете")<>Неопределено);
		СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВМеждународномУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВМеждународномУчете")<>Неопределено);
		
		Если НЕ (Упр ИЛИ Бух ИЛИ СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете) Тогда
			Возврат;
		КонецЕсли;	
		
		//Получение учетной политики
		Если УчетнаяПолитика = Неопределено Тогда
			СтруктураПараметров.Вставить("УчетнаяПолитика", ПолучитьУчетнуюПолитику(ДокументМоментВремени, 
															СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете И Упр, 
															(СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете  И Бух) ИЛИ СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете, 
															СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете, ОбрабатываемыйДокумент.Организация));
															
			Если СтруктураПараметров.УчетнаяПолитика = Неопределено Тогда												
				Возврат;
			КонецЕсли;	
		Иначе
			СтруктураПараметров.Вставить("УчетнаяПолитика", УчетнаяПолитика);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ОбрабатываемыйДокумент.Организация) И СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете И Упр Тогда
			СпособВеденияПартионногоУчетаПоОрганизации = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособВеденияПартионногоУчетаПоОрганизации", "Упр", СтруктураПараметров);
			СтруктураПараметров.Вставить("ОрганизацияУпр", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(ОбрабатываемыйДокумент.Организация,СпособВеденияПартионногоУчетаПоОрганизации));
		Иначе
			СтруктураПараметров.Вставить("ОрганизацияУпр", ОбрабатываемыйДокумент.Организация);
		КонецЕсли;			
														
		Если СтруктураНаборовЗаписей = Неопределено Тогда
		
			// Движения - наборы записей по регистрам
			СоздатьНаборыЗаписей(СтруктураПараметров);
			
		Иначе
			
			Для каждого Элемент Из СтруктураНаборовЗаписей Цикл

				СтруктураПараметров.Вставить(Элемент.Ключ, Элемент.Значение);
	
			КонецЦикла;
		
		КонецЕсли; 
		
		
		ПодготовитьТаблицуСписания(СтруктураПараметров, ТаблицаСписания, Упр, Бух);

		Строка0 = ТаблицаСписания[0];
		
		Если НЕ ЗначениеЗаполнено(Строка0.Регистратор) Тогда
			ТаблицаСписания.ЗаполнитьЗначения(ОбрабатываемыйДокумент, "Регистратор");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка0.Период) Тогда
			ТаблицаСписания.ЗаполнитьЗначения(СтруктураДата.Дата, "Период");
		КонецЕсли;
		
		СтруктураПараметров.Вставить("УчитыватьСуществующиеСтрокиДвиженийПартийТоваров", УчитыватьСуществующиеСтрокиДвиженийПартийТоваров);
		
		ВыполнитьСписание(СтруктураПараметров, ТаблицаСписания, ДокументМоментВремени, Останавливаться, ПроведениеОстановлено);
		
	КонецЕсли;
	
	// Сдвиг границы последовательности осуществляется только при онлайновом списании партий
	// либо из обработки проведение по партиям.
	ЗакрытиеЗаказовПокупателей = ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей");
	КорректировкаСтоимостиСписания = ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.КорректировкаСтоимостиСписанияТоваров");
	
	Если НЕ СписаниеВыполняетсяОбработкой Тогда
	
		Если Упр Тогда
			УстановкаГраницыПоследовательности(ЗакрытиеЗаказовПокупателей, ТаблицаСписания, "Упр", ДокументМоментВремени, КорректировкаСтоимостиСписания, ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументов);
		КонецЕсли;
		
		Если Бух Тогда
			
			УстановкаГраницыПоследовательности(ЗакрытиеЗаказовПокупателей, ТаблицаСписания, "Бух", ДокументМоментВремени, КорректировкаСтоимостиСписания, ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух);
			
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры // ДвижениеПартийТоваров()

Функция ПолучитьСписокДокументовПоПоследовательности(ИмяПоследовательности,МоментВремениНачало, ДатаОкончания, МаксимальноеКоличествоДокументовВВыборке=1000, Организации=Неопределено) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ " + Формат(МаксимальноеКоличествоДокументовВВыборке,"ЧГ=") + "
	                      |	ТаблицаПоследовательности.Период КАК Дата,
						  |	ТаблицаПоследовательности.Регистратор КАК Ссылка,
						  |	ТаблицаПоследовательности.Организация КАК Организация
	                      |ИЗ
	                      |	Последовательность." + ИмяПоследовательности + " КАК ТаблицаПоследовательности
						  |ГДЕ
						  |	ТаблицаПоследовательности.Период <= &ДатаКон
						  |	И (ТаблицаПоследовательности.Период > &Период
						  |	ИЛИ ((ТаблицаПоследовательности.Период = &Период) И (ТаблицаПоследовательности.Регистратор > &Регистратор)))");
	Если ЗначениеЗаполнено(Организации) Тогда 					  
		Запрос.Текст = Запрос.Текст + "
	                      |	И ТаблицаПоследовательности.Организация В (&Организации)";
		Запрос.УстановитьПараметр("Организации",Организации);
	КонецЕсли;	
	Запрос.Текст = Запрос.Текст + "						  
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ТаблицаПоследовательности.Период,
						  |	ТаблицаПоследовательности.Регистратор";
	Запрос.УстановитьПараметр("ДатаКон",ДатаОкончания);					  
	Запрос.УстановитьПараметр("Период",МоментВремениНачало.Дата);					  
	Запрос.УстановитьПараметр("Регистратор",МоментВремениНачало.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ОСТАТКОВ ИЗ РЕГИСТРОВ ПАРТИЙ

// Упр

Процедура ЗаполнитьЗапросПартийНаСкладахУпр(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ)
	
	ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегистрСведений.СписанныеТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ 
	|	СписанныеТоварыНоменклатура
	|ИЗ
	|	РегистрСведений.СписанныеТовары
	|ГДЕ
	|	РегистрСведений.СписанныеТовары.Регистратор = &Ссылка
	|
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегистрСведений.СписанныеТовары.Склад КАК Склад
	|ПОМЕСТИТЬ 
	|	СписанныеТоварыСклады
	|ИЗ
	|	РегистрСведений.СписанныеТовары
	|ГДЕ
	|	РегистрСведений.СписанныеТовары.Регистратор = &Ссылка
	|
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	СписанныеТовары.ДокументПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО И ПартииТоваровНаСкладах.ДокументОприходования ссылка Документ.ПриходныйОрдерНаТовары
	|			ТОГДА 1
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|  				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования И ПартииТоваровНаСкладах.ДокументОприходования ссылка Документ.ПриходныйОрдерНаТовары
	| 					ТОГДА 1
	|  				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|   				ТОГДА 0
	|				ИНАЧЕ  1 
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	//|	ВЫБОР
	//|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	//|			ТОГДА 0
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	//|					ТОГДА 0
	//|				ИНАЧЕ 1
	//|			КОНЕЦ
	//|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	//Смартис Коршиков  21.09.15	
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СтатусПартии = &НаКомиссию
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии
	//|	ВЫБОР
	//|		КОГДА ПартииТоваровНаСкладах.СтатусПартии = &Купленный
	//|			ТОГДА 0
	//|		КОГДА ПартииТоваровНаСкладах.СтатусПартии = &НаКомиссию
	//|			ТОГДА 2
	//|		ИНАЧЕ 1
	//|	КОНЕЦ КАК ЧислоСтатусПартии
	//Смартис Коршиков  21.09.15
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|		&Дат, Организация = &Организация И
	|		Номенклатура В
	|		    (ВЫБРАТЬ
	|		        СписанныеТоварыНоменклатура.Номенклатура
	|		    ИЗ
	|		        СписанныеТоварыНоменклатура)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В 
	|		    (ВЫБРАТЬ
	|		        СписанныеТоварыСклады.Склад
	|		    ИЗ
	|		        СписанныеТоварыСклады) ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|		ПО СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.ДопустимыйСтатус1 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус2 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус3 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус4 <> &ПустойСтатус
	|					ТОГДА ПартииТоваровНаСкладах.СтатусПартии = &ПустойСтатус
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииПоОрдеру
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус1
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус2
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус3
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус4
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|	
	|		И (ВЫБОР
	|			КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|							ТОГДА ВЫБОР
	|									КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|										ТОГДА ЛОЖЬ
	|									ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|								КОНЕЦ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОНЕЦ)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента";
	

КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахУпр()

Процедура ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателей(Запрос)

	Запрос.Текст ="ВЫБРАТЬ
	              |	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	              |	ПартииТоваровНаСкладах.Номенклатура,
	              |	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	              |	ПартииТоваровНаСкладах.Склад,
	              |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	              |	ПартииТоваровНаСкладах.СерияНоменклатуры,
	              |	ПартииТоваровНаСкладах.Качество,
	              |	ПартииТоваровНаСкладах.Заказ,
	              |	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	              |	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	              |	ПартииТоваровНаСкладах.СтатусПартии
	              |ИЗ
	              |	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	              |		&Дат, Организация = &Организация И
	              |		Номенклатура В
	              |		    (ВЫБРАТЬ
	              |		        РегистрСведений.СписанныеТовары.Номенклатура
	              |		    ИЗ
	              |		        РегистрСведений.СписанныеТовары
	              |		    ГДЕ
	              |		        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)) КАК ПартииТоваровНаСкладах
	              |		ПО СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	              |			И СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	              |			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	              |			И СписанныеТовары.ЗаказПартии = ПартииТоваровНаСкладах.Заказ
	              |ГДЕ
	              |	СписанныеТовары.Регистратор = &Ссылка
	              |ИТОГИ ПО
	              |	НомерСтрокиДокумента";
	

КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахУпрДляЗакрытияЗаказовПокупателей()

Процедура ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиУпр(Запрос, ВестиПартионныйУчетПоСкладам)

	Запрос.Текст ="ВЫБРАТЬ
	              |	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	              |	ПартииТоваровНаСкладах.Номенклатура,
	              |	ПартииТоваровНаСкладах.Склад,
	              |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	              |	ПартииТоваровНаСкладах.СерияНоменклатуры,
				  |	ПартииТоваровНаСкладах.ДокументОприходования,
	              |	ПартииТоваровНаСкладах.Качество,
	              |	ПартииТоваровНаСкладах.Заказ,
	              |	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	              |	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	              |	ПартииТоваровНаСкладах.СтатусПартии
	              |ИЗ
	              |	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	              |		&Дат, Организация = &Организация И
	              |		Номенклатура В
	              |		        (ВЫБРАТЬ
	              |		            РегистрСведений.СписанныеТовары.Номенклатура
	              |		        ИЗ
	              |		            РегистрСведений.СписанныеТовары
	              |		        ГДЕ
	              |		            РегистрСведений.СписанныеТовары.Регистратор = &ОсновнойДокумент)
	              |" + ?(ВестиПартионныйУчетПоСкладам, "
	              |		И (Склад В 
	              |		    (ВЫБРАТЬ
	              |		        РегистрСведений.СписанныеТовары.Склад
	              |		    ИЗ
	              |		        РегистрСведений.СписанныеТовары
	              |		    ГДЕ
	              |		        РегистрСведений.СписанныеТовары.Регистратор = &ОсновнойДокумент) ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	              |		ПО СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	              |			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	              |			И (ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	              |				ИЛИ СписанныеТовары.Качество = &ПустоеКачество)
	              |			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	              |			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	              |				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	              |			И (ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииВозвратнаяТараОтложеннаяОтгрузка
				  |				ИЛИ ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииКупленныйОтложеннаяОтгрузка)
				  |ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
				  |ПО (СписанныеТоварыОрдера.Регистратор = &Ссылка)
				  |И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
				  |И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры "
				  + ?(ВестиПартионныйУчетПоСкладам,"
				  |И (ВЫБОР
				  |	КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
				  |		ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
				  |	ИНАЧЕ ИСТИНА
				  |КОНЕЦ) ","")+"
				  |И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
				  |	ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
				  
				  |ГДЕ
	              |	СписанныеТовары.Регистратор = &ОсновнойДокумент
	              |ИТОГИ ПО
	              |	СписанныеТоварыОрдера.НомерСтрокиДокумента";
	
	Запрос.УстановитьПараметр("СтатусПартииВозвратнаяТараОтложеннаяОтгрузка", Перечисления.СтатусыПартийТоваров.ВозвратнаяТараОтложеннаяОтгрузка);
	Запрос.УстановитьПараметр("СтатусПартииКупленныйОтложеннаяОтгрузка", Перечисления.СтатусыПартийТоваров.КупленныйОтложеннаяОтгрузка);

КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиУпр()

Процедура ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеУпр(Запрос,ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ)
    ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказСписания = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СтатусПартии = &НаКомиссию
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|		&Дат, Организация = &Организация И
	|		Номенклатура В
	|		    (ВЫБРАТЬ
	|		        РегистрСведений.СписанныеТовары.Номенклатура
	|		    ИЗ
	|		        РегистрСведений.СписанныеТовары
	|		    ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В 
	|		    (ВЫБРАТЬ
	|		        РегистрСведений.СписанныеТовары.Склад
	|		    ИЗ
	|		        РегистрСведений.СписанныеТовары
	|		    ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &ОсновнойДокумент) ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|		ПО СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.ДопустимыйСтатус1 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус2 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус3 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус4 <> &ПустойСтатус
	|					ТОГДА ПартииТоваровНаСкладах.СтатусПартии = &ПустойСтатус
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииПоОрдеру
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус1
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус2
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус3
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус4
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|	
	|		И (ВЫБОР
	|			КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|							ТОГДА ВЫБОР
	|									КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|										ТОГДА ЛОЖЬ
	|									ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|								КОНЕЦ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОНЕЦ)
	|		И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
	|				ИЛИ СписанныеТовары.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
	|		ПО (СписанныеТоварыОрдера.Регистратор = &Ссылка)
	|			И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
	|			И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|					ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента";

КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеУпр()

Функция ПолучитьДеревоПартийНаСкладахУпр (МоментКон, СтруктураПараметров)

	Запрос = Новый Запрос;
	
	ОсновнойДокумент = Неопределено;
	СтруктураПараметров.Свойство("ОсновнойДокумент",ОсновнойДокумент);
	
	Регистратор = СтруктураПараметров.Регистратор;
	СпособОценкиМПЗ = СтруктураПараметров.СпособОценкиМПЗУпр;
	СтратегияСтатусПартии = СтруктураПараметров.СтратегияСтатусПартииУпр;
	ВестиПартионныйУчетПоСкладам = СтруктураПараметров.ВестиПартионныйУчетПоСкладамУпр;

	// Для повышения быстродействия остатки партий получаются различными способами 
	Если СтруктураПараметров.Свойство("ЗакрытиеЗаказовПокупателей") Тогда
		ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателей(Запрос);
		
	ИначеЕсли ОсновнойДокумент <> Неопределено И НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером
		И ТипЗнч(ОсновнойДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг")тогда
		// Списание расходным ордером товара реализованного и принятого на ответственное хранение (отложенная отгрузка)
		ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиУпр(Запрос, ВестиПартионныйУчетПоСкладам);
	
	ИначеЕсли ОсновнойДокумент <> Неопределено тогда
		// Списание партий по ордерной схеме: 
		// - Списание партий по расходному ордеру
		// - Перемещение партий по приходному ордеру
		// - Перемещение партий поступлением товаров и услуг в НТТ
		// Движения реализации выполняет расходный ордер, движения перемещения выполняет приходный ордер
		ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеУпр(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ);
		
	Иначе
		// Общий случай списания
		ЗаполнитьЗапросПартийНаСкладахУпр(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ);
		Если НЕ СтруктураПараметров.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры",
			"ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
			|ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &КодРезервирование");
			Запрос.УстановитьПараметр("КодРезервирование" , СтруктураПараметров.КодыОпераций.РезервированиеПодЗаказ)
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСтатус", Перечисления.СтатусыПартийТоваров.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтатусПартииПоОрдеру", Перечисления.СтатусыПартийТоваров.ПоОрдеру);	
	Запрос.УстановитьПараметр("ПустоеКачество", Справочники.Качество.ПустаяСсылка());
	Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ОрганизацияУпр);
	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	
	Если  ОсновнойДокумент <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОсновнойДокумент", ОсновнойДокумент);
	Иначе
		Запрос.УстановитьПараметр("ОсновнойДокумент", Регистратор);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дат", МоментКон);
	
	Запрос.УстановитьПараметр("НаКомиссию", Перечисления.СтатусыПартийТоваров.НаКомиссию);
	//Смартис Коршиков  21.09.15
	//ИЗМЕНЕНО Верескул Игорь(Начало 21.04.2021
	//Отменено из-за движений по НПТ
	Запрос.УстановитьПараметр("Купленный", Перечисления.СтатусыПартийТоваров.Купленный);
	//Окончание)Верескул Игорь 
	//Смартис Коршиков  21.09.15
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

КонецФункции//ПолучитьДеревоПартийНаСкладахУпр

Функция ПолучитьДеревоПартийПереданныеУпр(МоментКон, Регистратор, ДоговорКонтрагента, СпособОценкиМПЗ, СтратегияСтатусПартии)
    ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровПереданные");

	Запрос = Новый Запрос;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи.Заказ КАК ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.КоличествоОстаток КАК Количество,
	|	ПартииТоваровПереданные.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровПереданные.СтатусПартии,
	|	ПартииТоваровПереданные.СтатусПередачи,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.СтатусПартии = &НаКомиссию
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровПереданные.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.ДокументПередачи = СписанныеТовары.ДокументПередачи
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоДокументПередачи
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданные.Остатки(&Дат,	
	|																					Номенклатура В
	|																					    (ВЫБРАТЬ
	|																					        РегистрСведений.СписанныеТовары.Номенклатура
	|																					    ИЗ
	|																					        РегистрСведений.СписанныеТовары
	|																					    ГДЕ
	|																					        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)" +
																						?(ДоговорКонтрагента = Неопределено, "", "
	|																					 	И ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|																				) КАК ПартииТоваровПереданные
	|		ПО СписанныеТовары.Номенклатура = ПартииТоваровПереданные.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровПереданные.ХарактеристикаНоменклатуры
	|			И (ПартииТоваровПереданные.СтатусПартии = &ПустойСтатус
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = &СтатусПартииПоОрдеру
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус1
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус2
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус3
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус4)
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.КодОперацииПартииТоваров = &СписаниеПартийПереданныхВПроизводство
	|						ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &ВозвратОтПереработчика
	|					ТОГДА СписанныеТовары.ЗаказПартии = ПартииТоваровПереданные.ДокументПередачи.Заказ
	|							ИЛИ ПартииТоваровПереданные.ДокументПередачи.Заказ = &ЗаказПоставщикуПустаяСсылка
	|								И СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоДокументПередачи,
	|	ЧислоДокументОприходования,
	|	ЧислоСтатусПартии " + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, "Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента";
	
	Запрос.УстановитьПараметр("ПустойСтатус", Перечисления.СтатусыПартийТоваров.ПустаяСсылка());	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Дат", МоментКон);
	Запрос.УстановитьПараметр("НаКомиссию", Перечисления.СтатусыПартийТоваров.НаКомиссию);	
	Запрос.УстановитьПараметр("СписаниеПартийПереданныхВПроизводство", Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство);
	Запрос.УстановитьПараметр("ВозвратОтПереработчика", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика);
	Запрос.УстановитьПараметр("СтатусПартииПоОрдеру", Перечисления.СтатусыПартийТоваров.ПоОрдеру);
	Запрос.УстановитьПараметр("ЗаказПоставщикуПустаяСсылка", Документы.ЗаказПоставщику.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
 
КонецФункции

// Бух

Процедура ЗаполнитьЗапросПартийНаСкладахБух(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ)
	
	ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрСведений.СписанныеТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ 
	|	СписанныеТоварыНоменклатура
	|ИЗ
	|	РегистрСведений.СписанныеТовары
	|ГДЕ
	|	РегистрСведений.СписанныеТовары.Регистратор = &Ссылка
	|
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрСведений.СписанныеТовары.Склад КАК Склад
	|ПОМЕСТИТЬ 
	|	СписанныеТоварыСклады
	|ИЗ
	|	РегистрСведений.СписанныеТовары
	|ГДЕ
	|	РегистрСведений.СписанныеТовары.Регистратор = &Ссылка
	|
	|;
	|
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СтоимостьНУОстаток КАК СтоимостьНУ,
	|	ПартииТоваровНаСкладах.НДСВходящийОстаток КАК НДСВходящий,
	|	ПартииТоваровНаСкладах.НДСКредитОстаток КАК НДСКредит,
	|	ПартииТоваровНаСкладах.СуммаУценкиОстаток КАК СуммаУценки,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.НалоговоеНазначение,
	|	ПартииТоваровНаСкладах.Организация,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	//смартис Суслов 29.10.15
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	//|	ВЫБОР
	//|	КОГДА ПартииТоваровНаСкладах.СчетУчета = &Продукция
	//|		ТОГДА 2
	//|	КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	//|			ТОГДА 1
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК ЧислоСтатусПартии,
	// смартис Суслов 29.10.15
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказСписания = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		    И Номенклатура В
	|		    (ВЫБРАТЬ
	|		        СписанныеТоварыНоменклатура.Номенклатура
	|		    ИЗ
	|		        СписанныеТоварыНоменклатура)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В 
	|		    (ВЫБРАТЬ
	|		        СписанныеТоварыСклады.Склад
	|		    ИЗ
	|		        СписанныеТоварыСклады) ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|		ПО ПартииТоваровНаСкладах.Организация = СписанныеТовары.Организация
	|			И ПартииТоваровНаСкладах.Номенклатура = СписанныеТовары.Номенклатура
	|			И ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.СчетУчетаБУ
	|				ИЛИ ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ)
	|			И (ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.СчетУчета.НалоговыйУчет
	|                   	ТОГДА ПартииТоваровНаСкладах.НалоговоеНазначение = СписанныеТовары.НалоговоеНазначениеПоФакту
	|                   ИНАЧЕ
	|                       ПартииТоваровНаСкладах.НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
	|              КОНЕЦ)
	|	
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|								ТОГДА ВЫБОР
	|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|									КОНЕЦ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			КОНЕЦ)
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента";	
	

КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахБух()

Процедура ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателейБух(Запрос)
	
		Запрос.Текст ="ВЫБРАТЬ
		              |	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		              |	ПартииТоваровНаСкладах.Номенклатура,
		              |	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,		              
		              |	ПартииТоваровНаСкладах.Склад,
		              |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
		              |	ПартииТоваровНаСкладах.СерияНоменклатуры,
		              |	ПартииТоваровНаСкладах.Качество,
		              |	ПартииТоваровНаСкладах.Заказ,
		              |	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
		              |	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
		              |	ПартииТоваровНаСкладах.СтоимостьНУОстаток КАК СтоимостьНУ,
		              |	ПартииТоваровНаСкладах.НДСВходящийОстаток КАК НДСВходящий,
		              |	ПартииТоваровНаСкладах.НДСКредитОстаток КАК НДСКредит,
					  |	ПартииТоваровНаСкладах.СуммаУценкиОстаток КАК СуммаУценки,
		              |	ПартииТоваровНаСкладах.СчетУчета,
		              |	ПартииТоваровНаСкладах.НалоговоеНазначение,
		              |	ПартииТоваровНаСкладах.Организация
		              |ИЗ
		              |	РегистрСведений.СписанныеТовары КАК СписанныеТовары
		              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(&Дат, ) КАК ПартииТоваровНаСкладах
		              |		ПО СписанныеТовары.Организация = ПартииТоваровНаСкладах.Организация
		              |			И СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
		              |			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
		              |			И СписанныеТовары.ЗаказПартии = ПартииТоваровНаСкладах.Заказ
		              |ГДЕ
		              |	СписанныеТовары.Регистратор = &Ссылка
		              |ИТОГИ ПО
		              |	НомерСтрокиДокумента";

КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателейБух()

Процедура ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиБух(Запрос, ВестиПартионныйУчетПоСкладам)

	Запрос.Текст ="ВЫБРАТЬ
	              |	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	              |	ПартииТоваровНаСкладах.Номенклатура,
	              |	ПартииТоваровНаСкладах.Склад,
	              |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	              |	ПартииТоваровНаСкладах.СерияНоменклатуры,
				  |	ПартииТоваровНаСкладах.ДокументОприходования,
	              |	ПартииТоваровНаСкладах.Качество,
	              |	ПартииТоваровНаСкладах.Заказ,
	              |	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	              |	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	              |	ПартииТоваровНаСкладах.СтоимостьНУОстаток КАК СтоимостьНУ,
	              |	ПартииТоваровНаСкладах.НДСВходящийОстаток КАК НДСВходящий,
	              |	ПартииТоваровНаСкладах.НДСКредитОстаток КАК НДСКредит,
				  |	ПартииТоваровНаСкладах.СуммаУценкиОстаток КАК СуммаУценки,
	              |	ПартииТоваровНаСкладах.СчетУчета,
		          |	ПартииТоваровНаСкладах.НалоговоеНазначение
	              |ИЗ
	              |	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
	              |		&Дат,
				  |		Организация = &Организация
	              |		И Номенклатура В
	              |		        (ВЫБРАТЬ
	              |		            РегистрСведений.СписанныеТовары.Номенклатура
	              |		        ИЗ
	              |		            РегистрСведений.СписанныеТовары
	              |		        ГДЕ
	              |		            РегистрСведений.СписанныеТовары.Регистратор = &ОсновнойДокумент)
	              |" + ?(ВестиПартионныйУчетПоСкладам, "
	              |		И (Склад В 
	              |		    (ВЫБРАТЬ
	              |		        РегистрСведений.СписанныеТовары.Склад
	              |		    ИЗ
	              |		        РегистрСведений.СписанныеТовары
	              |		    ГДЕ
	              |		        РегистрСведений.СписанныеТовары.Регистратор = &ОсновнойДокумент) ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	              |		ПО СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	              |			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	              |			И (ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	              |				ИЛИ СписанныеТовары.Качество = &ПустоеКачество)
	              |			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	              |			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	              |				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
				  |ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
				  |ПО (СписанныеТоварыОрдера.Регистратор = &Ссылка)
				  |И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
				  |И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры "
				  + ?(ВестиПартионныйУчетПоСкладам,"
				  |И (ВЫБОР
				  |	КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
				  |		ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
				  |	ИНАЧЕ ИСТИНА
				  |КОНЕЦ) ","")+"
				  |И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
				  |	ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	              |ГДЕ
	              |	СписанныеТовары.Регистратор = &ОсновнойДокумент
	              |	И ПартииТоваровНаСкладах.СчетУчета = &СчетУчета
	              |ИТОГИ ПО
	              |	СписанныеТоварыОрдера.НомерСтрокиДокумента";
	
	Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.МатериальныеЦенностиНаОтветственномХранении);

КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиБух

Процедура ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеБух(Запрос,ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ)
    ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");

	Запрос.Текст ="ВЫБРАТЬ
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СтоимостьНУОстаток КАК СтоимостьНУ,
	|	ПартииТоваровНаСкладах.НДСВходящийОстаток КАК НДСВходящий,
	|	ПартииТоваровНаСкладах.НДСКредитОстаток КАК НДСКредит,
  	|	ПартииТоваровНаСкладах.СуммаУценкиОстаток КАК СуммаУценки,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.НалоговоеНазначение,
	|	ПартииТоваровНаСкладах.Организация,
	|	ВЫБОР
	|		КОГДА СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказСписания = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		    И Номенклатура В
	|		        (ВЫБРАТЬ
	|		            РегистрСведений.СписанныеТовары.Номенклатура
	|		        ИЗ
	|		            РегистрСведений.СписанныеТовары
	|		        ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В 
	|		    (ВЫБРАТЬ
	|		        РегистрСведений.СписанныеТовары.Склад
	|		    ИЗ
	|		        РегистрСведений.СписанныеТовары
	|		    ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &ОсновнойДокумент) ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|		ПО ПартииТоваровНаСкладах.Организация = СписанныеТовары.Организация
	|			И ПартииТоваровНаСкладах.Номенклатура = СписанныеТовары.Номенклатура
	|			И ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.СчетУчетаБУ
	|				ИЛИ ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ)
	|           И ПартииТоваровНаСкладах.НалоговоеНазначение = СписанныеТовары.НалоговоеНазначениеПоФакту
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|								ТОГДА ВЫБОР
	|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|									КОНЕЦ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			КОНЕЦ)
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
	|				ИЛИ СписанныеТовары.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
	|			ПО (СписанныеТоварыОрдера.Регистратор = &Ссылка)
	|				И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
	|				И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|				И (ВЫБОР
	|					КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|						ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|					ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента";	
	

КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеБух()

Функция ПолучитьДеревоПартийНаСкладахБух(МоментКон, Организация, СтруктураПараметров)

	Запрос = Новый Запрос;
	
	ОсновнойДокумент = Неопределено;
	СтруктураПараметров.Свойство("ОсновнойДокумент",ОсновнойДокумент);
	
	Регистратор = СтруктураПараметров.Регистратор;
	СпособОценкиМПЗ = СтруктураПараметров.СпособОценкиМПЗБух;
	СтратегияСтатусПартии = СтруктураПараметров.СтратегияСтатусПартииБух;
	ВестиПартионныйУчетПоСкладам = СтруктураПараметров.ВестиПартионныйУчетПоСкладамБух;
	
	// Для повышения быстродействия остатки партий получаются различными способами в зависимости от 
	// типа документа
	Если СтруктураПараметров.Свойство("ЗакрытиеЗаказовПокупателей") Тогда
		ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателейБух(Запрос);
		
	ИначеЕсли ОсновнойДокумент <> Неопределено И НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером
		И ТипЗнч(ОсновнойДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг")тогда
		// Списание расходным ордером товара реализованного и принятого на ответственное хранение (отложенная отгрузка)
		ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиБух(Запрос, ВестиПартионныйУчетПоСкладам);
	
	ИначеЕсли ОсновнойДокумент <> Неопределено тогда
		// Списание партий по ордерной схеме: 
		// - Списание партий по расходному ордеру
		// - Перемещение партий по приходному ордеру
		// Движения реализации выполняет расходный ордер, движения перемещения выполняет приходный ордер
		ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеБух(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ);
	
	Иначе
		// Общий случай списания
		ЗаполнитьЗапросПартийНаСкладахБух(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ);
		Если НЕ СтруктураПараметров.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры",
			"ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
			|ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &КодРезервирование");
			Запрос.УстановитьПараметр("КодРезервирование" , СтруктураПараметров.КодыОпераций.РезервированиеПодЗаказ)
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеКачество", Справочники.Качество.ПустаяСсылка());
	Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	
	Если  ОсновнойДокумент <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОсновнойДокумент", ОсновнойДокумент);
	Иначе
		Запрос.УстановитьПараметр("ОсновнойДокумент", Регистратор);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дат", МоментКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	//Смартис Суслов  21.09.15
	Запрос.УстановитьПараметр("Продукция", ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	//Смартис Суслов  21.09.15
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
 
КонецФункции

Функция ПолучитьДеревоПартийПереданныеБух(МоментКон, Регистратор, Организация, ДоговорКонтрагента, СпособОценкиМПЗ, СтратегияСтатусПартии)
    ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровПереданные");
	Запрос = Новый Запрос;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи.Заказ КАК ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.КоличествоОстаток КАК Количество,
	|	ПартииТоваровПереданные.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровПереданные.СтоимостьНУОстаток КАК СтоимостьНУ, 
	|	ПартииТоваровПереданные.НДСВходящийОстаток КАК НДСВходящий,  
	|	ПартииТоваровПереданные.НДСКредитОстаток КАК НДСКредит,
  	|	ПартииТоваровПереданные.СуммаУценкиОстаток КАК СуммаУценки,
	|	ПартииТоваровПереданные.СчетУчета,
	|	ПартииТоваровПереданные.НалоговоеНазначение, 
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровПереданные.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.ДокументПередачи = СписанныеТовары.ДокументПередачи
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоДокументПередачи
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданныеБухгалтерскийУчет.Остатки(&Дат,	
	|																					Номенклатура В
	|																					    (ВЫБРАТЬ
	|																					        РегистрСведений.СписанныеТовары.Номенклатура
	|																					    ИЗ
	|																					        РегистрСведений.СписанныеТовары
	|																					    ГДЕ
	|																					        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)" +
																						?(ДоговорКонтрагента = Неопределено, "", "
	|																					 	И ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|																				) КАК ПартииТоваровПереданные
	|		ПО СписанныеТовары.Номенклатура = ПартииТоваровПереданные.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровПереданные.ХарактеристикаНоменклатуры
	|			И (ПартииТоваровПереданные.СчетУчета = СписанныеТовары.СчетУчетаБУ
	|						ИЛИ ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ)	
	|			И (ПартииТоваровПереданные.НалоговоеНазначение = СписанныеТовары.НалоговоеНазначениеПоФакту)
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.КодОперацииПартииТоваров = &СписаниеПартийПереданныхВПроизводство
	|						ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &ВозвратОтПереработчика
	|					ТОГДА СписанныеТовары.ЗаказПартии = ПартииТоваровПереданные.ДокументПередачи.Заказ
	|							ИЛИ ПартииТоваровПереданные.ДокументПередачи.Заказ = &ЗаказПоставщикуПустаяСсылка
	|								И СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоДокументПередачи,
	|	ЧислоДокументОприходования,
	|	ЧислоСтатусПартии " + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, "Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента";
	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Дат", МоментКон);
	Запрос.УстановитьПараметр("СписаниеПартийПереданныхВПроизводство", Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство);
	Запрос.УстановитьПараметр("ВозвратОтПереработчика", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЗаказПоставщикуПустаяСсылка", Документы.ЗаказПоставщику.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
 
КонецФункции//ПолучитьДеревоПартийПереданныеБух

// Меж

Функция ПолучитьДеревоПартийНаСкладахМеж(МоментКон, Регистратор, Организация, СпособОценкиМПЗ, СтратегияСтатусПартии, ВестиПартионныйУчетПоСкладам, ОсновнойДокумент = Неопределено)
    ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказСписания = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		    И Номенклатура В
	|		        (ВЫБРАТЬ
	|		            РегистрСведений.СписанныеТовары.Номенклатура
	|		        ИЗ
	|		            РегистрСведений.СписанныеТовары
	|		        ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И Склад В 
	|		    (ВЫБРАТЬ
	|		        РегистрСведений.СписанныеТовары.Склад
	|		    ИЗ
	|		        РегистрСведений.СписанныеТовары
	|		    ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &ОсновнойДокумент)", "") + ") КАК ПартииТоваровНаСкладах
	|		ПО ПартииТоваровНаСкладах.Организация = СписанныеТовары.Организация
	|			И ПартииТоваровНаСкладах.Номенклатура = СписанныеТовары.Номенклатура
	|			И ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад", "") + "
	|			И ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.СчетУчетаМУ
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|								ТОГДА ВЫБОР
	|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|									КОНЕЦ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			КОНЕЦ)
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента";	
		
	
	Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеКачество", Справочники.Качество.ПустаяСсылка());
	Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);
	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	
	Если  ОсновнойДокумент <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОсновнойДокумент", ОсновнойДокумент);
	Иначе
		Запрос.УстановитьПараметр("ОсновнойДокумент", Регистратор);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дат", МоментКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
 
КонецФункции//ПолучитьДеревоПартийНаСкладахМеж

Функция ПолучитьДеревоПартийПереданныеМеж(МоментКон, Регистратор, Организация, ДоговорКонтрагента, СпособОценкиМПЗ, СтратегияСтатусПартии)
    ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровПереданные");

	Запрос = Новый Запрос;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи.Заказ КАК ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.КоличествоОстаток КАК Количество,
	|	ПартииТоваровПереданные.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровПереданные.СчетУчета,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровПереданные.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.ДокументПередачи = СписанныеТовары.ДокументПередачи
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоДокументПередачи
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданныеМеждународныйУчет.Остатки(&Дат,	
	|																					Номенклатура В
	|																					    (ВЫБРАТЬ
	|																					        РегистрСведений.СписанныеТовары.Номенклатура
	|																					    ИЗ
	|																					        РегистрСведений.СписанныеТовары
	|																					    ГДЕ
	|																					        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)" +
																						?(ДоговорКонтрагента = Неопределено, "", "
	|																					 	И ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|																				) КАК ПартииТоваровПереданные
	|		ПО СписанныеТовары.Номенклатура = ПартииТоваровПереданные.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровПереданные.ХарактеристикаНоменклатуры
	|			И (ПартииТоваровПереданные.СчетУчета = СписанныеТовары.СчетУчетаБУ
	|						ИЛИ ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ)	
	|			И ВЫБОР
	|			КОГДА СписанныеТовары.КодОперацииПартииТоваров = &СписаниеПартийПереданныхВПроизводство
	|					ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &ВозвратОтПереработчика
	|				ТОГДА СписанныеТовары.ЗаказПартии = ПартииТоваровПереданные.ДокументПередачи.Заказ
	|				ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоДокументПередачи,
	|	ЧислоДокументОприходования,
	|	ЧислоСтатусПартии " + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, "Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента";
	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Дат", МоментКон);
	Запрос.УстановитьПараметр("СписаниеПартийПереданныхВПроизводство", Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство);
	Запрос.УстановитьПараметр("ВозвратОтПереработчика", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
 
КонецФункции//ПолучитьДеревоПартийПереданныеБух

// Упр

// Остатки партий на складах по упр.учету
//
// Параметры:
//	СтруктураПараметров
//	МоментКон
//
Процедура ПолучитьОстаткиПартийНаСкладахУпр(СтруктураПараметров, МоментКон)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете Тогда
		
		СтруктураПараметров.Вставить("ДеревоПартииТоваровНаСкладахУпр", 
			ПолучитьДеревоПартийНаСкладахУпр (МоментКон,СтруктураПараметров));
		
		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		
		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахУпр" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахУпр" + "ТаблицаОстатков", ТаблицаОстатковПартий);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиПартийНаСкладахУпр()

Процедура ПолучитьОстаткиПартийПереданныхУпр(СтруктураПараметров, МоментКон, ДоговорКонтрагента)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете Тогда
		СтруктураПараметров.Вставить("ДеревоПартииТоваровПереданныеУпр", ПолучитьДеревоПартийПереданныеУпр(МоментКон, СтруктураПараметров.Регистратор, ДоговорКонтрагента, СтруктураПараметров.СпособОценкиМПЗУпр, СтруктураПараметров.СтратегияСтатусПартииУпр));
		
		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровПереданные.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		
		СтруктураПараметров.Вставить("ПартииТоваровПереданныеУпр" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровПереданныеУпр" + "ТаблицаОстатков", ТаблицаОстатковПартий);
	
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиПартийПереданныхУпр()

// Регл

// Остатки партий на складах по регл.учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиПартийНаСкладахРегл(СтруктураПараметров, МоментКон, Организация)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПараметров.Вставить("ДеревоПартииТоваровНаСкладахБух",
			ПолучитьДеревоПартийНаСкладахБух (МоментКон, Организация, СтруктураПараметров));
		
		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		
		ТаблицаОстатковПартий.Колонки.Добавить("СуммаУценки");
		ТаблицаОстатковПартий.Колонки.Добавить("СтоимостьНУ");
		ТаблицаОстатковПартий.Колонки.Добавить("НДСВходящий");
		ТаблицаОстатковПартий.Колонки.Добавить("НДСКредит");

		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахБух" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахБух" + "ТаблицаОстатков", ТаблицаОстатковПартий);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиПартийНаСкладахРегл()

// Остатки партий переданных по регл.учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиПартийПереданныхРегл(СтруктураПараметров, МоментКон, Организация, ДоговорКонтрагента)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
		СтруктураПараметров.Вставить("ДеревоПартииТоваровПереданныеБух", ПолучитьДеревоПартийПереданныеБух(МоментКон, СтруктураПараметров.Регистратор, Организация, ДоговорКонтрагента, СтруктураПараметров.СпособОценкиМПЗБух, СтруктураПараметров.СтратегияСтатусПартииБух));		

		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровПереданныеБухгалтерскийУчет.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		
		ТаблицаОстатковПартий.Колонки.Добавить("СтоимостьНУ");
		ТаблицаОстатковПартий.Колонки.Добавить("НДСВходящий");
		ТаблицаОстатковПартий.Колонки.Добавить("НДСКредит");
		ТаблицаОстатковПартий.Колонки.Добавить("СуммаУценки");
		
		
		СтруктураПараметров.Вставить("ПартииТоваровПереданныеБух" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровПереданныеБух" + "ТаблицаОстатков", ТаблицаОстатковПартий);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиПартийПереданныхРегл()

// Меж

// Остатки партий на складах по меж.учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиПартийНаСкладахМеж(СтруктураПараметров, МоментКон,  Организация)
	
	// Таблицы остатков партий
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете Тогда
		
		ОсновнойДокумент = Неопределено;
		СтруктураПараметров.Свойство("ОсновнойДокумент",ОсновнойДокумент);

		СтруктураПараметров.Вставить("ДеревоПартииТоваровНаСкладахМеж", 
			ПолучитьДеревоПартийНаСкладахМеж (МоментКон, 
											   СтруктураПараметров.Регистратор,
											   Организация,
											   СтруктураПараметров.СпособОценкиМПЗМеж,
											   СтруктураПараметров.СтратегияСтатусПартииМеж,
											   СтруктураПараметров.ВестиПартионныйУчетПоСкладамМеж,
											   ОсновнойДокумент));
		
		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровНаСкладахМеждународныйУчет.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		
		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахМеж" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахМеж" + "ТаблицаОстатков", ТаблицаОстатковПартий);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиПартийНаСкладахМеж()

// Остатки партий переданных по меж.учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиПартийПереданныхМеж(СтруктураПараметров, МоментКон, Организация, ДоговорКонтрагента)
	
	// Таблицы остатков партий
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете Тогда
		СтруктураПараметров.Вставить ("ДеревоПартииТоваровПереданныеМеж", 
			ПолучитьДеревоПартийПереданныеМеж (МоментКон,
											   СтруктураПараметров.Регистратор,
											   Организация,
											   ДоговорКонтрагента,
											   СтруктураПараметров.СпособОценкиМПЗМеж,
											   СтруктураПараметров.СтратегияСтатусПартииМеж));		

		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровПереданныеМеждународныйУчет.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		
		СтруктураПараметров.Вставить("ПартииТоваровПереданныеМеж" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровПереданныеМеж" + "ТаблицаОстатков", ТаблицаОстатковПартий);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиПартийПереданныхМеж()

// Получение остатков по упр. учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиУпр(СтруктураПараметров, ТаблицаСписания, МоментКон)
	
	// По партионному учету остатки берутся из двух регистров
		
	Если СтруктураПараметров.ЕстьНаСкладах Тогда
		
		ПолучитьОстаткиПартийНаСкладахУпр(СтруктураПараметров, МоментКон);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьПереданные Тогда
		
		ПолучитьОстаткиПартийПереданныхУпр(СтруктураПараметров, МоментКон,ТаблицаСписания[0].ДоговорКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиУпр()

// Получение остатков по регл. учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиРегл(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация)
	
	//// По партионному учету остатки берутся из двух регистров
	Если СтруктураПараметров.ЕстьНаСкладах Тогда
		
		ПолучитьОстаткиПартийНаСкладахРегл(СтруктураПараметров, МоментКон, Организация);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьПереданные Тогда
		
		ПолучитьОстаткиПартийПереданныхРегл(СтруктураПараметров, МоментКон, Организация, ТаблицаСписания[0].ДоговорКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиРегл()

// Получение остатков по меж. учету
//
// Параметры:
//	Нет.
//
 Процедура ПолучитьОстаткиМеж(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация)
	
	//// По партионному учету остатки берутся из двух регистров
	Если СтруктураПараметров.ЕстьНаСкладах Тогда
		
		ПолучитьОстаткиПартийНаСкладахМеж(СтруктураПараметров, МоментКон, Организация);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьПереданные Тогда
		
		ПолучитьОстаткиПартийПереданныхМеж(СтруктураПараметров, МоментКон, Организация, ТаблицаСписания[0].ДоговорКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиРегл()

Функция ПолучитьСтрокуОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий)
	
	ЗаполнитьЗначенияСвойств(СтруктураИзмерений, СтрокаПартииРаспределения);
	МассивСтрок = ТаблицаОстатковПартий.НайтиСтроки(СтруктураИзмерений);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТаблицы = ТаблицаОстатковПартий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаПартииРаспределения);
	Иначе
		СтрокаТаблицы = МассивСтрок[0];
	КонецЕсли;
	
	Возврат СтрокаТаблицы;
		
Конецфункции

// ПОЛУЧЕНИЕ ОСТАТКОВ ИЗ РЕГИСТРОВ ПАРТИЙ
////////////////////////////////////////////////////////////////////////////////


Процедура ВыполнитьВосстановлениеНаСервере (ДатаКонцаОбработки,
										   Организация,
										   ОтражатьВУправленческомУчете,
										   ОтражатьВБухгалтерскомУчете,
										   Останавливаться,
										   МаксимальноеКоличествоДокументовВТранзакции,
										   МаксимальноеКоличествоСтрокВТранзакции,
										   ФормироватьПроводки) Экспорт

	ЗаполнениеДокументов.ВыполнитьВосстановление (ДатаКонцаОбработки,
						Организация,
						ОтражатьВУправленческомУчете,
						ОтражатьВБухгалтерскомУчете,
						Останавливаться,
						МаксимальноеКоличествоДокументовВТранзакции,
						МаксимальноеКоличествоСтрокВТранзакции,						
						ФормироватьПроводки);

КонецПроцедуры //ВыполнитьВосстановлениеНаСервере
					
Процедура ЗаписатьДокументНаСервере(ДокументСсылка, РежимЗаписи) Экспорт

	Попытка
	
		ДокументСсылка.ПолучитьОбъект().Записать(РежимЗаписи);
	
	Исключение
	
	КонецПопытки; 

КонецПроцедуры//ЗаписатьДокументНаСервере

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ, ФОРМИРУЮЩИЕ СТРУКТУРУ ДАННЫХ ДЛЯ УПР. УЧЕТА

Процедура ОпределитьСоставКолонокТаблицаСписанныхПартийОбщихДляВсехВидовУчета(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок) Экспорт
	СтруктураКолонок.Вставить("Организация");
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Склад");
	СтруктураКолонок.Вставить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	СтруктураКолонок.Вставить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СтруктураКолонок.Вставить("КодОперацииПартииТоваров");
	СтруктураКолонок.Вставить("КодОперации"); // из движений
	СтруктураКолонок.Вставить("СписаноИз");
	СтруктураКолонок.Вставить("ТипЗаписи");
	СтруктураКолонок.Вставить("ВидОперации");
	СтруктураКолонок.Вставить("СерияНоменклатуры");
	СтруктураКолонок.Вставить("ХарактеристикаНоменклатуры");
	
	СтруктураКолонок.Вставить("ДоговорКонтрагента");
	
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("НоменклатурнаяГруппа");
	СтруктураКолонок.Вставить("ИзменитьСклад");
	СтруктураКолонок.Вставить("СкладПолучатель");
	СтруктураКолонок.Вставить("СтоимостьПоступление");
	СтруктураКолонок.Вставить("КоличествоПоступление");
	СтруктураКолонок.Вставить("НоменклатураНовая");
	СтруктураКолонок.Вставить("ДокументОприходованияНовый");
	СтруктураКолонок.Вставить("ХарактеристикаНоменклатурыНовая");
	СтруктураКолонок.Вставить("СерияНоменклатурыНовая");
	СтруктураКолонок.Вставить("КачествоНовое");
	СтруктураКолонок.Вставить("ПодразделениеОрганизации");
	СтруктураКолонок.Вставить("СтатьяЗатрат");
	СтруктураКолонок.Вставить("ДокументОприходования");	
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("ОсновноеСредство");
	СтруктураКолонок.Вставить("ДокументПередачи");
	СтруктураКолонок.Вставить("СхемаНазначенияИспользования");
	СтруктураКолонок.Вставить("СпособОтраженияРасходов");
	СтруктураКолонок.Вставить("СрокПолезногоИспользования");
	СтруктураКолонок.Вставить("Регистратор");
	
	СтруктураКолонок.Вставить("НеСписывать");
	СтруктураКолонок.Вставить("Продукция");
	СтруктураКолонок.Вставить("ЗаказСписания");
	
	СтруктураКолонок.Вставить("ИзменитьХарактеристику");
	СтруктураКолонок.Вставить("ИзменитьСерию");
	СтруктураКолонок.Вставить("ВестиПартионныйУчетПоСериям");
	
	СтруктураКолонок.Вставить("СуммаЗадолженностиБУ");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("НДСВключенВСтоимость");
	СтруктураКолонок.Вставить("СуммаБезНДС");
	СтруктураКолонок.Вставить("СчетУчетаНДС");
	СтруктураКолонок.Вставить("КорВалютнаяСуммаЗадолженностиБУ");

	
	СтруктураКолонок.Вставить("НомерСтрокиДокумента");
КонецПроцедуры	

Процедура ОпределитьСоставКолонокТаблицаСписанныхПартийУпр(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок)
	
	ОпределитьСоставКолонокТаблицаСписанныхПартийОбщихДляВсехВидовУчета(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок);
	
	КодыОпераций = СтруктураПараметров.КодыОпераций;
	// Колонки базовые
	
	СтруктураКолонок.Вставить("ВедениеУчетаПоПроектам");
	
	СтруктураКолонок.Вставить("НоменклатураКомплекта");
	СтруктураКолонок.Вставить("ХарактеристикаКомплекта");
	СтруктураКолонок.Вставить("КоличествоКомплекта");
	
	СтруктураКолонок.Вставить("Подразделение");
	СтруктураКолонок.Вставить("Проект");
	СтруктураКолонок.Вставить("ОбъектСтроительства");
		
	СтруктураКолонок.Вставить("ВалютаДокумента");
	СтруктураКолонок.Вставить("КурсДокумента");
	СтруктураКолонок.Вставить("КратностьДокумента");
	
	СтруктураКолонок.Вставить("СтатусПартииНовый");
    СтруктураКолонок.Вставить("СтатусПередачи");

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРИХОДНЫЕ ДВИЖЕНИЯ

Процедура ВыполнитьПриходПоРегистрамПартий(ТаблицаСтаройРегистрацииВПоследовательности, СтруктураШапкиДокумента, Отказ=Ложь, ТаблицаПоТоварам=Неопределено, ТаблицаПоТаре=Неопределено, ТаблицаПоОборудованию_ТаблицаПоКомплектам=Неопределено, ЗНАЧ Упр=Ложь, ЗНАЧ Бух=Ложь) Экспорт
	
	Перем  КопияТаблицаПоТоварам, КопияТаблицаПоТаре, КопияТаблицаПоОборудованию_ТаблицаПоКомплектам;
	
	Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
	  И глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ ИЛИ НЕ (Упр ИЛИ Бух) Тогда
		Возврат;
	КонецЕсли;
	
	//сохранение таблиц в копии
	Если ТаблицаПоТоварам<>неопределено Тогда
		КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();
	КонецЕсли;
	Если ТаблицаПоТаре<>неопределено Тогда
		КопияТаблицаПоТаре	= ТаблицаПоТаре.Скопировать();
	КонецЕсли;
	Если ТаблицаПоОборудованию_ТаблицаПоКомплектам<>неопределено Тогда
		КопияТаблицаПоОборудованию_ТаблицаПоКомплектам 	= ТаблицаПоОборудованию_ТаблицаПоКомплектам.Скопировать();
	КонецЕсли;

	ТипРегистратора = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);
	Если ТипРегистратора = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, ТаблицаПоОборудованию_ТаблицаПоКомплектам, Упр, Бух, ТаблицаСтаройРегистрацииВПоследовательности);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, КопияТаблицаПоОборудованию_ТаблицаПоКомплектам, Упр, Бух, ТаблицаСтаройРегистрацииВПоследовательности);
		КонецЕсли;	
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Если НЕ СтруктураШапкиДокумента.БезПраваПродажи Тогда
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника
				ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика
				ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПокупателя 
				ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ИзПереработки Тогда
					ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, Неопределено, Упр, Ложь, ТаблицаСтаройРегистрацииВПоследовательности);
			КонецЕсли;
		КонецЕсли;		
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, Неопределено, Упр, Бух, ТаблицаСтаройРегистрацииВПоследовательности);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.Оборудование Тогда
			ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, Неопределено, Неопределено, КопияТаблицаПоТоварам, Упр, Бух, ТаблицаСтаройРегистрацииВПоследовательности);	
		Иначе
			ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, Неопределено, Неопределено, Упр, Бух, ТаблицаСтаройРегистрацииВПоследовательности);
		КонецЕсли;	
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		Если НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ВнутреннееПеремещение Тогда
			ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, Неопределено, Упр, Бух, ТаблицаСтаройРегистрацииВПоследовательности);
		КонецЕсли;		
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, Неопределено, Упр, Бух, ТаблицаСтаройРегистрацииВПоследовательности);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ГТДИмпорт") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, неопределено, ТаблицаПоОборудованию_ТаблицаПоКомплектам, Упр, Бух, ТаблицаСтаройРегистрацииВПоследовательности);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, неопределено, Неопределено, Упр, Бух, ТаблицаСтаройРегистрацииВПоследовательности);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам,неопределено, КопияТаблицаПоОборудованию_ТаблицаПоКомплектам, Упр, Бух, ТаблицаСтаройРегистрацииВПоследовательности);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки") Тогда
		ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, Неопределено, КопияТаблицаПоТаре, Неопределено, Упр, Бух, ТаблицаСтаройРегистрацииВПоследовательности);
	Иначе
		ОбщегоНазначения.Сообщение("Не удалось сформировать движения по партиям");
	КонецЕсли;
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЕ ПРИХОДНЫЕ ДВИЖЕНИЯ

Функция ОпределитьКодОперацииПартийТоваров(ТипДокумента, ВидОперации = Неопределено, ВидДоговора = Неопределено)
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		//Смартис Лиманчук начало 02.10.2012
		//Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
		Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссияНал) Тогда
		//Смартис Лиманчук окончание 02.10.2012
			Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				Возврат Перечисления.КодыОперацийПартииТоваров.ПоступлениеНаКомиссию;
			Иначе
				Возврат Перечисления.КодыОперацийПартииТоваров.Поступление;
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.ПоступлениеВПереработку;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.ПоступлениеОборудования;
		//Смартис Лиманчук начало 05.12.2012
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.ПоступлениеОборудования;
		//Смартис Лиманчук окончание 05.12.2012
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда	
		Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера
		Иначе
			Возврат Неопределено;
		КонецЕсли;		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Возврат Перечисления.КодыОперацийПартииТоваров.Поступление;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		Возврат Перечисления.КодыОперацийПартииТоваров.Оприходование;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Возврат Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика 
		  И ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.ПоступлениеНаКомиссию;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.Поступление
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ВнутреннееПеремещение Тогда
			Возврат Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами;	
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
		Возврат Перечисления.КодыОперацийПартииТоваров.ВозвратТарыОтКонтрагента;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") ИЛИ ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов")  Тогда
		Возврат Перечисления.КодыОперацийПартииТоваров.ПоступлениеДопРасходов;
	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции	

// Функция создает таблицу для формирования сторнирующих движений по рег. Партии товаров на складах, в случае поступления по ордеру
//     СтруктураПараметров - дополнительные параметры, предусмотрены если ПриходныйОрдер указывается только в шапке (для документа ВозвратПереданныхТоваров)
Функция СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТабТовары, СтруктураПараметров)
    Перем мПриходныйОрдер, мСклад, мЕстьСерияНоменклатуры;
	
	СтруктураПараметров.Свойство("ПриходныйОрдер",мПриходныйОрдер);
	СтруктураПараметров.Свойство("Склад",мСклад);
	Если мПриходныйОрдер<>неопределено Тогда
		Если мПриходныйОрдер.БезПраваПродажи Тогда
			ТаблицаПартииПоОрдерам = ТабТовары.СкопироватьКолонки();
			ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");

			Возврат ТаблицаПартииПоОрдерам;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаПартииПоОрдерам = ТабТовары.Скопировать();
	ТаблицаПартииПоОрдерам.Колонки[СтруктураПараметров.ИмяРеквизитаКоличество].Имя = "КоличествоСтарое";
    ТаблицаПартииПоОрдерам.Колонки.Добавить("Количество"); //у старой колонки может быть запрет на указание отрицательных чисел
	ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");
	Если ТаблицаПартииПоОрдерам.Колонки.Найти("Склад") = неопределено Тогда
		ТаблицаПартииПоОрдерам.Колонки.Добавить("Склад");
	КонецЕсли;

	мЕстьСерияНоменклатуры = ТаблицаПартииПоОрдерам.Колонки.Найти("СерияНоменклатуры") <> неопределено;		
	Сч = 0;
	Пока Сч < ТаблицаПартииПоОрдерам.Количество() Цикл
	
		СтрокаТаблицы = ТаблицаПартииПоОрдерам.Получить(Сч);
		Если мПриходныйОрдер = неопределено Тогда
			Если СтрокаТаблицы.БезПраваПродажи = Истина Тогда
				ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Документ оприходования - приходный ордрер
		СтрокаТаблицы.ДокументОприходования = ?(мПриходныйОрдер=неопределено,СтрокаТаблицы.ДокументПолучения,мПриходныйОрдер);
		СтрокаТаблицы.Склад                 = ?(мСклад=неопределено,СтрокаТаблицы.ДокументПолучения.Склад,мСклад);
		СтрокаТаблицы.Количество            = - СтрокаТаблицы.КоличествоСтарое;
		Если НЕ ТаблицаПартииПоОрдерам.Колонки.Найти("Заказ") = Неопределено Тогда
			СтрокаТаблицы.Заказ                	= Неопределено;
		КонецЕсли;	
		
		Если мЕстьСерияНоменклатуры Тогда
			// Если партионный учет по сериям не ведется, то надо очистить серию
			Если НЕ ТаблицаПартииПоОрдерам.Колонки.Найти("ВестиПартионныйУчетПоСериям") = Неопределено Тогда
				ВестиПартионныйУчетПоСериям = СтрокаТаблицы.ВестиПартионныйУчетПоСериям;
			Иначе
				ВестиПартионныйУчетПоСериям = СтрокаТаблицы.Номенклатура.ВестиПартионныйУчетПоСериям;
			КонецЕсли;
			Если НЕ ВестиПартионныйУчетПоСериям Тогда
				СтрокаТаблицы.СерияНоменклатуры = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаПартииПоОрдерам;
	
КонецФункции // СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТаблицаПоТоварам)

// По виду договора определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПриходаПоВидуДоговора(СтруктураШапкиДокумента) 

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом ИЛИ
		СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
	Иначе
		Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
	КонецЕсли;
		
	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПриходаПоВидуДоговора()

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента) Экспорт

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();
	ТипДокумента = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
		//Смартис Лиманчук начало 02.10.2012
		 ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссияНал 
		//Смартис Лиманчук окончание 02.10.2012
		 ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства 
		 //Смартис Лиманчук начало 18.01.2013
		 ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительстваНал 
		 //Смартис Лиманчук окончание 18.01.2013
		 //Смартис Лиманчук начало 05.12.2012
		 ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал
		 //Смартис Лиманчук окончание 05.12.2012
		 ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда

		 	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
			Иначе
				Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
			КонецЕсли;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.БланкиСтрогогоУчета Тогда
			Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда

			Статус = Перечисления.СтатусыПартийТоваров.ВПереработку; 
		КонецЕсли;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")    
	  ИЛИ ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров")
	  ИЛИ ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров")
      ИЛИ ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт")
	  ИЛИ ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") 
	  ИЛИ ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") //Для данного типа документа статус присвоим "Фиктивно" - он заполнится из таблиц документа
	  Тогда
		Статус = Перечисления.СтатусыПартийТоваров.Купленный;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда    
		Статус = ОпределитьСтатусПартииПриходаПоВидуДоговора(СтруктураШапкиДокумента);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда    
		Статус = Перечисления.СтатусыПартийТоваров.ПоОрдеру;		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда	
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом ИЛИ
			СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
		Иначе
			Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
		КонецЕсли;
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка() Тогда

		ОбщегоНазначения.Сообщение("Для документа """ +
		СтруктураШапкиДокумента.Ссылка + """ не удалось определить статус партии товаров!", СтатусСообщения.Важное); 
		
	КонецЕсли; 

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПриходаУпр()

Процедура ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(ТаблицаТЧ, ТаблицаДвижений, СтатусПартии, ВестиПартионныйУчетПоСкладам, СпособОценкиМПЗ, СтруктураШапкиДокумента, ВидУчета)
	ТипДокумента =  ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);

	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		
		Если ВидУчета = "УправленческийУчет" Тогда
			//Статус партии может быть указан в табличной части документа - ОприходованиеТоваров, ОприходованиеМатериаловИзПроизводства. Тогда его не надо заполнять
			Если ТаблицаТЧ.Колонки.Найти("СтатусПартии") = Неопределено Тогда  
				СтрокаДвижений.СтатусПартии          = СтатусПартии;
			КонецЕсли;
		ИначеЕсли ВидУчета = "БухгалтерскийУчет" Тогда
			СтрокаДвижений.СчетУчета   = СтрокаТЧ.СчетУчетаБУ;
			СтрокаДвижений.НалоговоеНазначение   	   = СтрокаТЧ.НалоговоеНазначение;
			
		КонецЕсли;
		
		// Если партионный учет по сериям не ведется, то надо очистить серию
		Если СтатусПартии <> Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
			Если НЕ ТаблицаТЧ.Колонки.Найти("ВестиПартионныйУчетПоСериям") = Неопределено Тогда
				ВестиПартионныйУчетПоСериям = СтрокаТЧ.ВестиПартионныйУчетПоСериям;
			Иначе
				ВестиПартионныйУчетПоСериям = СтрокаТЧ.Номенклатура.ВестиПартионныйУчетПоСериям;
			КонецЕсли;
			Если НЕ ВестиПартионныйУчетПоСериям Тогда
				СтрокаДвижений.СерияНоменклатуры = Неопределено;
			КонецЕсли;	
		КонецЕсли;
		
		Если ВестиПартионныйУчетПоСкладам Тогда
			Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
				Если СтрокаТЧ.ВидЗаказаПокупателя = Перечисления.ВидыОперацийЗаказПокупателя.Переработка
					И СтрокаТЧ.СтатусПартии <> Перечисления.СтатусыПартийТоваров.Купленный
					И СтрокаТЧ.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.Собственные Тогда
					ПолуфабрикатыИзДавальческогоСырья = Истина;
				Иначе
					ПолуфабрикатыИзДавальческогоСырья = Ложь;
				КонецЕсли;
				Если Не ПолуфабрикатыИзДавальческогоСырья Тогда
					СтрокаДвижений.Склад = СтруктураШапкиДокумента.Склад;
				Иначе
					СтрокаДвижений.Склад = Неопределено;
				КонецЕсли;
            ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
                //Для данного типа документа склад в движениях не заполняем: 
				//  В документе есть индивидуальная логика распределения доп расходов
				//	по складам на основе данных партиеобразующих документов
			ИначеЕсли (НЕ СтруктураШапкиДокумента.Свойство("ВидПоступления")) ИЛИ (СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад) Тогда
				Если ТаблицаТЧ.Колонки.Найти("Склад") = Неопределено Тогда
					СтрокаДвижений.Склад = СтруктураШапкиДокумента.Склад;
				Иначе	
					СтрокаДвижений.Склад = СтрокаТЧ.Склад;
				КонецЕсли;	
			ИначеЕсли СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				Если ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
					СтрокаДвижений.Склад = СтруктураШапкиДокумента.СкладОрдер.Склад;
				Иначе
					Если СтрокаТЧ.БезПраваПродажи Тогда
						СтрокаДвижений.Склад = СтрокаТЧ.Склад;
					Иначе	
						СтрокаДвижений.Склад = СтрокаТЧ.ДокументПолучения.Склад;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		Иначе
			СтрокаДвижений.Склад = Неопределено;
		КонецЕсли;
		
		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		Если (ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
		  И	(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку 
		  	//Смартис Лиманчук начало 05.12.2012
		    ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал
			//Смартис Лиманчук окончание 05.12.2012
		    ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование) Тогда
			СтрокаДвижений.Заказ = СтруктураШапкиДокумента.Сделка;
		Иначе
			СтрокаДвижений.Заказ = неопределено;
			Заказ = неопределено;
			ОбособленныйУчет = ?(ТаблицаТЧ.Колонки.Найти("ОбособленныйУчетТоваровПоЗаказамПокупателей") = Неопределено,NULL,СтрокаТЧ.ОбособленныйУчетТоваровПоЗаказамПокупателей);
			Если ТаблицаТЧ.Колонки.Найти("ЗаказПокупателя") <> Неопределено Тогда
				Заказ = СтрокаТЧ.ЗаказПокупателя;
			ИначеЕсли  ТаблицаТЧ.Колонки.Найти("ЗаказРезерв") <> Неопределено Тогда
				Заказ = СтрокаТЧ.ЗаказРезерв;
	
			ИначеЕсли  ТаблицаТЧ.Колонки.Найти("Заказ") <> Неопределено Тогда
				Заказ = СтрокаТЧ.Заказ;
			КонецЕсли;
			Если Заказ <> неопределено И ОбособленныйУчет=истина И ЗначениеЗаполнено(Заказ) И ТипЗнч(Заказ)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаДвижений.Заказ = Заказ;
			КонецЕсли;		
		КонецЕсли;
			
			
		Если Не СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней 
		 ИЛИ ((ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
		   И (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом))
		   ИЛИ ((ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ"))
		   И (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом))
		 ИЛИ ((ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт"))
		   И (СтрокаТЧ.СтатусПартии = Перечисления.СтатусыПартийТоваров.Оборудование))
		   ИЛИ СтатусПартии = Перечисления.СтатусыПартийТоваров.Оборудование
		 ИЛИ (ТаблицаТЧ.Колонки.Найти("СтатусПартии") <> Неопределено И СтрокаТЧ.СтатусПартии = Перечисления.СтатусыПартийТоваров.Оборудование) // оборудование всегда учитывается по документам оприходования
		Тогда 
		Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") 
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
				СтрокаДвижений.ДокументОприходования = СтрокаТЧ.ДокументОприходования;
			Иначе
				СтрокаДвижений.ДокументОприходования = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
		Иначе
			Если ТипДокумента = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
				СтрокаДвижений.ДокументОприходования = СтруктураШапкиДокумента.Ссылка;
			Иначе	
				СтрокаДвижений.ДокументОприходования = неопределено;
			КонецЕсли;	
		КонецЕсли;

		//Для данного документа КодОперации указывается в табличной части документа
		Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
			СтрокаДвижений.КодОперации = СтрокаТЧ.КодОперацииПартии;
		КонецЕсли;

	КонецЦикла;

	
КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе()

Процедура РассчитатьСуммыДляПартионныхРегистров(СтруктураШапкиДокумента, СтруктТаблицДокумента,ТаблицыДанныхДокумента, ВидУчета, ТипДокумента)
	
	Если ВидУчета = "УправленческийУчет" Тогда
		Если СтруктТаблицДокумента.Свойство("ТаблицаПоТоварам") Тогда
			Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
				
				Для Каждого СтрокаТаблицы Из СтруктТаблицДокумента.ТаблицаПоТоварам Цикл
					СтрокаТД = ТаблицыДанныхДокумента.ТаблицаПоТоварам[СтруктТаблицДокумента.ТаблицаПоТоварам.Индекс(СтрокаТаблицы)];
					
					СтрокаТД.Стоимость = СтрокаТаблицы.СуммаУпр;
                КонецЦикла;
            КонецЕсли;
		КонецЕсли; //Если СтруктТаблицДокумента.Свойство("ТаблицаПоТоварам") Тогда
		
		Если СтруктТаблицДокумента.Свойство("ТаблицаПоТаре") ТОгда
			Если ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
            КонецЕсли;
		КонецЕсли; //Если СтруктТаблицДокумента.Свойство("ТаблицаПоТаре") ТОгда
		
	ИначеЕсли ВидУчета = "БухгалтерскийУчет" Тогда
		
		Если СтруктТаблицДокумента.Свойство("ТаблицаПоТоварам") Тогда
			Для Каждого СтрокаТаблицы Из СтруктТаблицДокумента.ТаблицаПоТоварам Цикл
				СтрокаТД = ТаблицыДанныхДокумента.ТаблицаПоТоварам[СтруктТаблицДокумента.ТаблицаПоТоварам.Индекс(СтрокаТаблицы)];
				Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
					
					СтрокаТД.Стоимость      = СтрокаТаблицы.СуммаРегл;
					СтрокаТД.СтоимостьНУ    = СтрокаТаблицы.СуммаНУ;
					СтрокаТД.НДСВходящий 	= СтрокаТаблицы.НДСВходящий;
					СтрокаТД.НДСКредит 		= СтрокаТаблицы.НДСКредит;
					
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					
					СтрокаТД.Стоимость      = СтрокаТаблицы.Себестоимость * СтрокаТаблицы.Количество;
					СтрокаТД.СтоимостьНУ    = СтрокаТаблицы.СебестоимостьНУ * СтрокаТаблицы.Количество;
					СтрокаТД.НДСВходящий 	= ?(СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = 0, 0, ОКР(СтрокаТаблицы.НДС * (СтрокаТД.Стоимость / СтрокаТаблицы.ПроводкиСуммаБезНДСРегл),2));
					СтрокаТД.НДСКредит 		= ?(СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = 0, 0, ОКР(СтрокаТаблицы.ПроводкиСуммаНДСКредит * (СтрокаТД.Стоимость / СтрокаТаблицы.ПроводкиСуммаБезНДСРегл),2));
					
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
	                СтрокаТД.Стоимость      = СтрокаТаблицы.ПроводкиСуммаБезНДС;
					СтрокаТД.СтоимостьНУ	= СтрокаТаблицы.СтоимостьНУ;
					СтрокаТД.НДСВходящий 	= СтрокаТаблицы.НДС;
					СтрокаТД.НДСКредит 		= СтрокаТаблицы.ПроводкиСуммаНДСКредит;
					
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
					Если СтрокаТаблицы.СчетУчетаБУ.Забалансовый Тогда
						СтрокаТД.Стоимость = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл + СтрокаТаблицы.ПроводкиСуммаНДСРегл;
					Иначе
						СтрокаТД.Стоимость = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
					КонецЕсли;	
					СтрокаТД.СтоимостьНУ	= СтрокаТаблицы.СтоимостьНУ;
					СтрокаТД.НДСВходящий 	= СтрокаТаблицы.СуммаНДСРегл;
					СтрокаТД.НДСКредит 		= СтрокаТаблицы.ПроводкиСуммаНДСРегл;
					

				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
					СтрокаТД.Стоимость = СтрокаТаблицы.СуммаБух;
					СтрокаТД.СтоимостьНУ = СтрокаТаблицы.СуммаНал;
				Иначе
					// общий случай
					СтрокаТД.Стоимость      = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
					СтрокаТД.СтоимостьНУ	= СтрокаТаблицы.СтоимостьНУ;
					СтрокаТД.НДСВходящий 	= СтрокаТаблицы.СуммаНДСРегл;
					СтрокаТД.НДСКредит 		= СтрокаТаблицы.ПроводкиСуммаНДСРегл;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; //Если СтруктТаблицДокумента.Свойство("ТаблицаПоТоварам") Тогда
	
		// ТАРА Рассчитаем суммы перед записью в регистр
		Если СтруктТаблицДокумента.Свойство("ТаблицаПоТаре") ТОгда
			Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") ИЛИ ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
				Для Каждого СтрокаТаблицы Из СтруктТаблицДокумента.ТаблицаПоТаре Цикл
					СтрокаТД = ТаблицыДанныхДокумента.ТаблицаПоТаре[СтруктТаблицДокумента.ТаблицаПоТаре.Индекс(СтрокаТаблицы)];
					СтрокаТД.Стоимость      = СтрокаТаблицы.Себестоимость * СтрокаТаблицы.Количество;
					СтрокаТД.СтоимостьНУ    = СтрокаТаблицы.СебестоимостьНУ * СтрокаТаблицы.Количество;
					СтрокаТД.НДСВходящий 	= ?(СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = 0, 0, ОКР(СтрокаТаблицы.НДС * (СтрокаТД.Стоимость / СтрокаТаблицы.ПроводкиСуммаБезНДСРегл),2));
					СтрокаТД.НДСКредит 		= ?(СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = 0, 0, ОКР(СтрокаТаблицы.ПроводкиСуммаНДСКредит * (СтрокаТД.Стоимость / СтрокаТаблицы.ПроводкиСуммаБезНДСРегл),2));
				КонецЦикла;
			Иначе
				Для Каждого СтрокаТаблицы Из СтруктТаблицДокумента.ТаблицаПоТаре Цикл
					СтрокаТД = ТаблицыДанныхДокумента.ТаблицаПоТаре[СтруктТаблицДокумента.ТаблицаПоТаре.Индекс(СтрокаТаблицы)];
					СтрокаТД.Стоимость = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
					СтрокаТД.СтоимостьНУ	= СтрокаТаблицы.СтоимостьНУ;
					СтрокаТД.НДСВходящий 	= СтрокаТаблицы.СуммаНДСРегл;
					СтрокаТД.НДСКредит 		= СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				КонецЦикла;
			КонецЕсли;  //Если ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
		КонецЕсли;	

		// ОБОРУДОВАНИЕ Рассчитаем суммы перед записью в регистр
		Если СтруктТаблицДокумента.Свойство("ТаблицаПоОборудованию") Тогда
			Для Каждого СтрокаТаблицы Из СтруктТаблицДокумента.ТаблицаПоОборудованию Цикл
				СтрокаТД = ТаблицыДанныхДокумента.ТаблицаПоОборудованию[СтруктТаблицДокумента.ТаблицаПоОборудованию.Индекс(СтрокаТаблицы)];
				Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
					СтрокаТД.Стоимость = СтрокаТаблицы.СуммаРегл;
					СтрокаТД.СтоимостьНУ = СтрокаТаблицы.СуммаРегл;
	            Иначе
					СтрокаТД.Стоимость = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
					СтрокаТД.СтоимостьНУ	= СтрокаТаблицы.СтоимостьНУ;
					СтрокаТД.НДСВходящий 	= СтрокаТаблицы.СуммаНДСРегл;
					СтрокаТД.НДСКредит 		= СтрокаТаблицы.ПроводкиСуммаНДСРегл;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли; //Если СтруктТаблицДокумента.Свойство("ТаблицаПоОборудованию") Тогда
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПодготовитьТаблицыДокументаПриВозврате(СтруктураШапкиДокумента,СтруктТаблицДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоКомплектам, ВидУчета);
	Если ТаблицаПоТаре<>неопределено Тогда
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",ТаблицаПоТаре.Скопировать());
		СтруктТаблицДокумента.ТаблицаПоТаре.Колонки.КоличествоДок.Имя = "Количество";
	КонецЕсли;
	Если ВидУчета = "Упр" ТОгда
		Если ТаблицаПоКомплектам <> Неопределено Тогда
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоКомплектам.Скопировать());
		КонецЕсли;	
		
		СтруктТаблицДокумента.ТаблицаПоТаре.Колонки.ПлюсСебестоимость.Имя = "Стоимость";
		Если ТаблицаПоТоварам <> Неопределено Тогда
			СтруктТаблицДокумента.ТаблицаПоТоварам.Колонки.ПлюсСебестоимость.Имя = "Стоимость";
			СтруктТаблицДокумента.ТаблицаПоТоварам.Колонки.КоличествоДок.Имя = "Количество";
		КонецЕсли;		
	Иначе
		Если ТаблицаПоТоварам <> Неопределено Тогда
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам.Скопировать());
		КонецЕсли;
	КонецЕсли;	
	
	Для Каждого ТекущаяТаблица Из СтруктТаблицДокумента Цикл
		Если Найти(ТекущаяТаблица.Ключ,"Сторно")>0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаПоТоварамПартии = ТекущаяТаблица.Значение;
		Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Сч = 0;
			Пока Сч < ТаблицаПоТоварамПартии.Количество() Цикл
				СтрокаТаблицы = ТаблицаПоТоварамПартии.Получить(Сч);
				Если (НЕ ТаблицаПоТоварамПартии.Колонки.Найти("ДокументПартии") = Неопределено)
				  И ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии) Тогда
					ТаблицаПоТоварамПартии.Удалить(СтрокаТаблицы);
				Иначе 
					Сч = Сч + 1;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры	


Процедура ВыполнитьПриходПоРегистрамПартийПоВидуУчета(СтруктураШапкиДокумента, УчетнаяПолитика, КодОперацииПартииТоваров, Отказ, СтруктТаблицДокумента, Движения, ВидУчета)
	
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	
	СуффиксРегистра = ?(ВидУчета = "УправленческийУчет","",ВидУчета);
	Движения.Вставить("ПартииТоваровНаСкладах"+СуффиксРегистра,РегистрыНакопления["ПартииТоваровНаСкладах" + СуффиксРегистра].СоздатьНаборЗаписей());
	Движения["ПартииТоваровНаСкладах"+СуффиксРегистра].Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения["ПартииТоваровНаСкладах"+СуффиксРегистра], СтруктТаблицДокумента);
	Если ВидУчета = "УправленческийУчет" Тогда
		ВестиПартионныйУчетПоСкладам = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам;
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации));
	Иначе
		ВестиПартионныйУчетПоСкладам = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", СтруктураШапкиДокумента.Организация);
		//Смартис Лиманчук начало 18.01.2013
		//ИЗМЕНЕНО Верескул Игорь(Начало 14.12.2020		
		Если СтруктураШапкиДокумента.Дата >= Дата("20210101") Тогда
			НаличнаяОрганизация = Константы.НПТ.Получить();
		Иначе
			НаличнаяОрганизация = Константы.КрафтКолор.Получить();
		КонецЕсли;

		Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", НаличнаяОрганизация);
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительстваНал Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", НаличнаяОрганизация);
			КонецЕсли;
		КонецЕсли;
		//Смартис Лиманчук окончание 18.01.2013
	КонецЕсли;
	
	РассчитатьСуммыДляПартионныхРегистров(СтруктураШапкиДокумента, СтруктТаблицДокумента,ТаблицыДанныхДокумента, ВидУчета, ТипДокумента);

	СписокТаблицДокумента = "";
	// Заполнить недостающие поля.
	Если СтруктТаблицДокумента.Свойство("ТаблицаПоТоварам") Тогда												
		СписокТаблицДокумента = СписокТаблицДокумента + ?(СписокТаблицДокумента = "","",", ") + "ТаблицаПоТоварам";
	    ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(СтруктТаблицДокумента.ТаблицаПоТоварам, 
														ТаблицыДанныхДокумента["ТаблицаПоТоварам"], 
														ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), 
														ВестиПартионныйУчетПоСкладам, 
														УчетнаяПолитика[ВидУчета].СпособОценкиМПЗ, 
														СтруктураШапкиДокумента, 
														ВидУчета);
	КонецЕсли;													
	Если СтруктТаблицДокумента.Свойство("ТаблицаПоОборудованию") Тогда												
		СписокТаблицДокумента = СписокТаблицДокумента + ?(СписокТаблицДокумента = "","",", ") + "ТаблицаПоОборудованию";
		ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(СтруктТаблицДокумента.ТаблицаПоОборудованию, 
														ТаблицыДанныхДокумента["ТаблицаПоОборудованию"], 
														Перечисления.СтатусыПартийТоваров.Оборудование, 
														ВестиПартионныйУчетПоСкладам, 
														УчетнаяПолитика[ВидУчета].СпособОценкиМПЗ, 
														СтруктураШапкиДокумента, 
														ВидУчета);
	КонецЕсли;													
	Если СтруктТаблицДокумента.Свойство("ТаблицаПоТаре") Тогда
		СписокТаблицДокумента = СписокТаблицДокумента + ?(СписокТаблицДокумента = "","",", ") + "ТаблицаПоТаре";
		ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(СтруктТаблицДокумента.ТаблицаПоТаре, 
														ТаблицыДанныхДокумента["ТаблицаПоТаре"], 
														?(ТипДокумента=Тип("ДокументСсылка.ПриходныйОрдерНаТовары"),Перечисления.СтатусыПартийТоваров.ПоОрдеру,Перечисления.СтатусыПартийТоваров.ВозвратнаяТара), 
														ВестиПартионныйУчетПоСкладам, 
														УчетнаяПолитика[ВидУчета].СпособОценкиМПЗ, 
														СтруктураШапкиДокумента, 
														ВидУчета);
	КонецЕсли;	
	Если ТипДокумента <> Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда	//Документ ОприходованиеМатериаловИзПроизводства содержит код операции в табличной части
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперации", КодОперацииПартииТоваров, СписокТаблицДокумента);
	КонецЕсли;
	Если ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
		//для данных документов качество для товаров указывается в табличной части, его не требуется изменять.
		//Необходимо заполнить только качество для тары, если она есть
		Если СтруктТаблицДокумента.Свойство("ТаблицаПоТаре") Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
		КонецЕсли;
	Иначе
		//Установить качество Новый для всех таблиц
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый);
	КонецЕсли;
	
	// Заполнить таблицу для сторнирующих движений по партиям товаров на складах для поступления по ордеру
	Если СтруктураШапкиДокумента.Свойство("ВидПоступления")
	  И (СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру)
	  И (ВидУчета = "УправленческийУчет") Тогда
	  	СписокТаблицДокументаСторно = "";
		  Для каждого Таблица из СтруктТаблицДокумента цикл
			  Если Найти(Таблица.Ключ,"Сторно")>0 Тогда
				  СписокТаблицДокументаСторно = СписокТаблицДокументаСторно+?(СписокТаблицДокументаСторно = "","",", ")+Таблица.Ключ
			  КонецЕсли;
		  КонецЦикла;
		  
		Если НЕ ВестиПартионныйУчетПоСкладам Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено, СписокТаблицДокументаСторно);  
		КонецЕсли;	
		  
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ПоОрдеру, СписокТаблицДокументаСторно);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Стоимость",    0, СписокТаблицДокументаСторно);
				
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперации",  Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, СписокТаблицДокументаСторно);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, СписокТаблицДокументаСторно);

	КонецЕсли;
		
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения["ПартииТоваровНаСкладах"+СуффиксРегистра], ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, СтруктураШапкиДокумента.Дата);	
	
КонецПроцедуры

Процедура ПодготовитьТаблицуТоваров_ГТДИмпорт(ТаблицаДвижений, ВидУчета)
	Если ТаблицаДвижений.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;
		ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");
	Инд=0;
	Пока Инд<ТаблицаДвижений.Количество() Цикл
		Если (НЕ ЗначениеЗаполнено(ТаблицаДвижений[Инд].ДокументОприходования) И ВидУчета="УправленческийУчет") ИЛИ
			НЕ ЗначениеЗаполнено(ТаблицаДвижений[Инд].Номенклатура) ИЛИ
			((ВидУчета="БухгалтерскийУчет" ИЛИ ВидУчета="НалоговыйУчет") И ТаблицаДвижений[Инд].Сумма=0) 
			Тогда
			ТаблицаДвижений.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьТаблицы_ПоступлениеДопРасходов(СтруктураТаблиц, ВидУчета)
	Для каждого Таблица из СтруктураТаблиц цикл
		ТаблицаДвижений = Таблица.Значение;
		ИмяТаблицы = Таблица.Ключ;
		Если ТаблицаДвижений.Количество()=0 Тогда 
			Продолжить;
		КонецЕсли;
		ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");
		Если ВидУчета="УправленческийУчет" И ИмяТаблицы="ТаблицаПоТоварам" Тогда
			Инд=0;
			Пока Инд<ТаблицаДвижений.Количество() Цикл
				Если НЕ ЗначениеЗаполнено(ТаблицаДвижений[Инд].ДокументОприходования) Тогда
					ТаблицаДвижений.Удалить(Инд);
				Иначе
					Инд=Инд+1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьПриходПоРегиструПродажиСебестоимость(СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента)
	
	// ТОВАРЫ ПО РЕГИСТРУ ПродажиСебестоимость
	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Движения.Вставить("ПродажиСебестоимость",РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей());
		Движения.ПродажиСебестоимость.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		
		НаборДвижений = Движения.ПродажиСебестоимость;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийПродажиСебестоимость = НаборДвижений.ВыгрузитьКолонки();
		
		ТаблицаДвижений = ТаблицаДвиженийПродажиСебестоимость.Скопировать();
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СтруктТаблицДокумента.ТаблицаПоТоварам, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка ,"ДокументОприходования");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Подразделение, "Подразделение");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		ТаблицаДвижений.ЗаполнитьЗначения(УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации), "Организация");
		
		Для Каждого СтрокаТаблицыДвижений Из ТаблицаДвижений Цикл
			СтрокаТаблицыДвижений.Стоимость = -СтрокаТаблицыДвижений.Стоимость;
			СтрокаТаблицыДвижений.Количество = -СтрокаТаблицыДвижений.Количество;
		КонецЦикла;	
		
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.ВыполнитьДвижения();
	КонецЕсли;  //Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
	
КонецПроцедуры	

Процедура ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ=Ложь, ТаблицаПоТоварам=Неопределено, ТаблицаПоТаре=Неопределено, ТаблицаПоОборудованию=Неопределено, Упр=Ложь, Бух=Ложь, ТаблицаСтаройРегистрацииВПоследовательности)
      	
	Движения = Новый Структура();
	ТипДокумента = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);
	// Определим код операции движений по регистру партий
	КодОперацииПартииТоваров = ОпределитьКодОперацииПартийТоваров(ТипДокумента, 
																	?(СтруктураШапкиДокумента.Свойство("ВидОперации"),СтруктураШапкиДокумента.ВидОперации,Неопределено), 
																	?(СтруктураШапкиДокумента.Свойство("ВидДоговора"),СтруктураШапкиДокумента.ВидДоговора,Неопределено));
	
	//Получение учетных политик
	УчетнаяПолитика = Новый Структура();
	
	// ТОВАРЫ, ТАРА И ОБОРУДОВАНИЕ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
	СтруктТаблицДокумента = Новый Структура;
	Если НЕ ТаблицаПоТоварам = Неопределено И
		//Приход товаров по документу ВозвратПереданныхТоваров в данном модуле не выполняется, 
		//	может быть только сторнирование ордерных партий
		ТипДокумента <> Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",      ТаблицаПоТоварам);
	КонецЕсли;	
	
	Если НЕ ТаблицаПоОборудованию = Неопределено Тогда
		Если НЕ ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда //Для документа ВозвратТоваровОтПокупателя в таблице ТаблицаПоОборудованию передается таблица по комплектам
			СтруктТаблицДокумента.Вставить("ТаблицаПоОборудованию", ТаблицаПоОборудованию);
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ТаблицаПоТаре = Неопределено Тогда
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",         ТаблицаПоТаре);
	КонецЕсли;	
	
	СпособВеденияПартионногоУчетаПоОрганизации = неопределено;
	Если Упр Тогда
		ПараметрыУчетнойПолитикиУпр = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента.Дата);
        Если НЕ ЗначениеЗаполнено(ПараметрыУчетнойПолитикиУпр) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
		УчетнаяПолитика.Вставить("УправленческийУчет", ПараметрыУчетнойПолитикиУпр);
		
		СпособВеденияПартионногоУчетаПоОрганизации = СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации;
		Если СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации <> Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется Тогда
			// Создать таблицу для сторнирующих движений по партиям товаров на складах для поступления по ордеру
			Если СтруктураШапкиДокумента.Свойство("ВидПоступления")
			  И (СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру) Тогда
			  
			    струПараметры = новый Структура;
				струПараметры.Вставить("ИмяРеквизитаКоличество", "Количество");
				Если ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
					струПараметры.Вставить("ПриходныйОрдер", СтруктураШапкиДокумента.СкладОрдер);
					струПараметры.Вставить("Склад", СтруктураШапкиДокумента.СкладОрдер.Склад);
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					струПараметры.Вставить("ИмяРеквизитаКоличество", "КоличествоДок");
				КонецЕсли;
				Если НЕ ТаблицаПоТоварам = Неопределено Тогда
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварамСторно",      СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТаблицаПоТоварам,струПараметры));
				КонецЕсли;
				Если НЕ ТаблицаПоТаре = Неопределено Тогда
					СтруктТаблицДокумента.Вставить("ТаблицаПоТареСторно",         СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТаблицаПоТаре,струПараметры));
				КонецЕсли;
				Если НЕ ТаблицаПоОборудованию = Неопределено И НЕ ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					СтруктТаблицДокумента.Вставить("ТаблицаПоОборудованиюСторно", СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТаблицаПоОборудованию, струПараметры));
				КонецЕсли;	
			КонецЕсли;

			Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				ПодготовитьТаблицыДокументаПриВозврате(СтруктураШапкиДокумента, СтруктТаблицДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, "Упр");
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
				ПодготовитьТаблицыДокументаПриВозврате(СтруктураШапкиДокумента, СтруктТаблицДокумента, Неопределено, ТаблицаПоТаре, Неопределено, "Упр");
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
				ПодготовитьТаблицуТоваров_ГТДИмпорт(СтруктТаблицДокумента.ТаблицаПоТоварам,"УправленческийУчет");
				ПодготовитьТаблицуТоваров_ГТДИмпорт(СтруктТаблицДокумента.ТаблицаПоОборудованию,"УправленческийУчет");
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				ПодготовитьТаблицы_ПоступлениеДопРасходов(СтруктТаблицДокумента,"УправленческийУчет");	
	        КонецЕсли;


			ВыполнитьПриходПоРегистрамПартийПоВидуУчета(СтруктураШапкиДокумента, УчетнаяПолитика, КодОперацииПартииТоваров, Отказ, СтруктТаблицДокумента, Движения, "УправленческийУчет");
			
			//удалим из структуры таблиц таблицы Сторно, чтобы они не попали в движения по БУ и НУ
			Если СтруктТаблицДокумента.Свойство("ТаблицаПоТоварамСторно") Тогда
				СтруктТаблицДокумента.Удалить("ТаблицаПоТоварамСторно");
			КонецЕсли;
			Если СтруктТаблицДокумента.Свойство("ТаблицаПоТареСторно") Тогда
				СтруктТаблицДокумента.Удалить("ТаблицаПоТареСторно");
			КонецЕсли;
	        Если СтруктТаблицДокумента.Свойство("ТаблицаПоОборудованиюСторно") Тогда
				СтруктТаблицДокумента.Удалить("ТаблицаПоОборудованиюСторно");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если Бух Тогда
		ПарамерыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		Если НЕ ЗначениеЗаполнено(ПарамерыУчетнойПолитикиРегл) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	Если Бух Тогда
		УчетнаяПолитика.Вставить("БухгалтерскийУчет", ПарамерыУчетнойПолитикиРегл);
		
		Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ПодготовитьТаблицыДокументаПриВозврате(СтруктураШапкиДокумента, СтруктТаблицДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, "Регл");
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
			ПодготовитьТаблицыДокументаПриВозврате(СтруктураШапкиДокумента, СтруктТаблицДокумента, Неопределено, ТаблицаПоТаре, Неопределено, "Регл");
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			ПодготовитьТаблицы_ПоступлениеДопРасходов(СтруктТаблицДокумента,"БухгалтерскийУчет");
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
			ПодготовитьТаблицуТоваров_ГТДИмпорт(СтруктТаблицДокумента.ТаблицаПоТоварам,"БухгалтерскийУчет");
			ПодготовитьТаблицуТоваров_ГТДИмпорт(СтруктТаблицДокумента.ТаблицаПоОборудованию,"БухгалтерскийУчет");
		КонецЕсли;	
		
		Если КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеНаКомиссию Тогда
	        // При поступлении комиссионного товара от комитента налоговое назначение всегда пусто,
			// так же как и на забалансовых счетах, на которых эти товары учитываются
			Если СтруктТаблицДокумента.ТаблицаПоТоварам.Колонки.Найти("НалоговоеНазначение") <> Неопределено Тогда
				СтруктТаблицДокумента.ТаблицаПоТоварам.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(), "НалоговоеНазначение");
			КонецЕсли
		КонецЕсли;		

		ВыполнитьПриходПоРегистрамПартийПоВидуУчета(СтруктураШапкиДокумента, УчетнаяПолитика, КодОперацииПартииТоваров, Отказ, СтруктТаблицДокумента, Движения, "БухгалтерскийУчет");
		
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Если СтруктураШапкиДокумента.Свойство("ДопроведениеДокумента") Тогда
			Если СтруктураШапкиДокумента.ДопроведениеДокумента
			  И СтруктураШапкиДокумента.Ссылка.ОтражатьВУправленческомУчете	Тогда
				ВыполнитьПриходПоРегиструПродажиСебестоимость(СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента);
			КонецЕсли;	
		Иначе
			Если Упр Тогда
				ВыполнитьПриходПоРегиструПродажиСебестоимость(СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Для Каждого ТекущееДвижение Из Движения Цикл
		Если ТекущееДвижение.Значение.Модифицированность() Тогда
			ТекущееДвижение.Значение.Записать(Ложь);
		КонецЕсли;
	КонецЦИкла;	
	ЗарегистрироватьДокументВПоследовательностяхПартионногоУчетаНаСервере(
		СтруктураШапкиДокумента.Ссылка, 
		СтруктураШапкиДокумента.Дата, 
		СтруктураШапкиДокумента.Организация, 
		Упр, 
		Бух, 
		СпособВеденияПартионногоУчетаПоОрганизации,
		ТаблицаСтаройРегистрацииВПоследовательности);
		
	//Сдвигаем границу последовательности	
	ПараметрыСписанияПартий = глЗначениеПеременной("ПараметрыПартионногоУчета");
	ДокументМоментВремени = Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка);
	
	Если ПараметрыСписанияПартий.СписыватьПартииПриПроведенииДокументов И Упр Тогда
		СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(СтруктураШапкиДокумента.Организация, ДокументМоментВремени);				
		Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(СтруктураШапкиДокумента.Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ), Ложь);
		СдвинутьГраницуПоследовательности("ПартионныйУчет", ДокументМоментВремени, "Упр", Отбор, Истина);	
	КонецЕсли;
	
	Если ПараметрыСписанияПартий.СписыватьПартииПриПроведенииДокументовБух И Бух Тогда
		Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", СтруктураШапкиДокумента.Организация, Ложь);
		СдвинутьГраницуПоследовательности("ПартионныйУчетБУ", ДокументМоментВремени, "Бух", Отбор, Истина);		
	КонецЕсли;	
	
КонецПроцедуры	



//ПРОВОДКИ ПО ПОСТУПЛЕНИЮ ТМЦ

//Процедура для формирования проводок по поступлению ТМЦ для переданного документа. Вызывается из документов поступления ТМЦ
//	Готовит входные параметры для процедуры СформироватьПроводкиВсеВидыУчета исходя из типа документа
// Параметры
//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
//  Отказ  								– булево – признак отказа
//  ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства
//										– ТаблицаЗначений – таблицы документа по которым необходимо сформировать проводки
//  Бух, Нал							– булево – признаки формирования проводок по БУ и НУ
Процедура СформироватьПроводкиПоПоступлениюТМЦ(СтруктураШапкиДокумента, Отказ=Ложь, ТаблицаПоТоварам=Неопределено, ТаблицаПоТаре=Неопределено, ТаблицаПоУслугам=неопределено, ТаблицаПоОборудованию_ТаблицаПоКомплектам=Неопределено, ТаблицаПоОбъектамСтроительства=неопределено, Бух=Ложь) Экспорт
	Перем  КопияТаблицаПоТоварам, КопияТаблицаПоТаре, КопияТаблицаПоОборудованию_ТаблицаПоКомплектам;
	
	Если Отказ ИЛИ НЕ Бух Тогда
		Возврат;
	КонецЕсли;
	
	//сохранение таблиц в копии
	Если ТаблицаПоТоварам<>неопределено Тогда
		КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();
	КонецЕсли;
	Если ТаблицаПоТаре<>неопределено Тогда
		Если ТипЗнч(ТаблицаПоТаре)=Тип("ТаблицаЗначений") Тогда
			КопияТаблицаПоТаре	= ТаблицаПоТаре.Скопировать();
		Иначе // может быть передана табличная часть - только для документа ВозвратПереданныхТоваров
			КопияТаблицаПоТаре	= ТаблицаПоТаре.Выгрузить();

		КонецЕсли;
		
	КонецЕсли;
	Если ТаблицаПоОборудованию_ТаблицаПоКомплектам<>неопределено Тогда
		КопияТаблицаПоОборудованию_ТаблицаПоКомплектам 	= ТаблицаПоОборудованию_ТаблицаПоКомплектам.Скопировать();
	КонецЕсли;
	Если ТаблицаПоУслугам<>неопределено Тогда
		КопияТаблицаПоУслугам = ТаблицаПоУслугам.Скопировать();
	КонецЕсли;
    Если ТаблицаПоОбъектамСтроительства<>неопределено Тогда
		КопияТаблицаПоОбъектамСтроительства = ТаблицаПоОбъектамСтроительства.Скопировать();
	КонецЕсли;

	ТипРегистратора = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);

	Если ТипРегистратора = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, КопияТаблицаПоУслугам, , , Бух);
    ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
		СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, , КопияТаблицаПоТаре, , , , Бух);
    ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, , , , Бух);
    ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, , , , , Бух);
    ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.Оборудование Тогда
			СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, , , , КопияТаблицаПоТоварам , , Бух);
		Иначе
			СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, , , , , Бух);
		КонецЕсли;	
   	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, , , , , Бух);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, КопияТаблицаПоУслугам, КопияТаблицаПоОборудованию_ТаблицаПоКомплектам, КопияТаблицаПоОбъектамСтроительства, Бух);
	ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, КопияТаблицаПоУслугам, , , Бух);
	Иначе
		ОбщегоНазначения.Сообщение("Не удалось сформировать проводки по поступлению ТМЦ");
	КонецЕсли;

КонецПроцедуры

//Процедура для формирования проводок по поступлению ТМЦ. 
//	Готовит входные параметры для процедуры СформироватьПроводкиПоВидуУчета исходя из признаков отражения в учете
//	Выполняет запись заполненной структуры движений
// Параметры
//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
//  Отказ  								– булево – признак отказа
//  ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства
//										– ТаблицаЗначений – таблицы документа по которым необходимо сформировать проводки
//  Бух, Нал							– булево – признаки формирования проводок по БУ и НУ
Процедура СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ=Ложь, ТаблицаПоТоварам=Неопределено, ТаблицаПоТаре=Неопределено, ТаблицаПоУслугам=неопределено, ТаблицаПоОборудованию=Неопределено, ТаблицаПоОбъектамСтроительства = неопределено, Бух=Ложь)
	Движения = Новый Структура();
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	СтруктТаблицДокумента = Новый Структура;
	Если НЕ ТаблицаПоТоварам = Неопределено  Тогда
		СтруктТаблицДокумента.Вставить("Товары",      ТаблицаПоТоварам);
	КонецЕсли;	
	
	Если НЕ ТаблицаПоОборудованию = Неопределено Тогда
		СтруктТаблицДокумента.Вставить("Оборудование", ТаблицаПоОборудованию);
	КонецЕсли;
	
	Если НЕ ТаблицаПоТаре = Неопределено Тогда
		СтруктТаблицДокумента.Вставить("Тара",         ТаблицаПоТаре);
	КонецЕсли;	

	Если НЕ ТаблицаПоОбъектамСтроительства = Неопределено Тогда
		СтруктТаблицДокумента.Вставить("ОбъектыСтроительства",         ТаблицаПоОбъектамСтроительства);
	КонецЕсли;	
	
	Если НЕ ТаблицаПоУслугам = Неопределено Тогда
		СтруктТаблицДокумента.Вставить("Услуги",         ТаблицаПоУслугам);
	КонецЕсли;	

	Если Бух Тогда
		СформироватьПроводкиПоВидуУчета(СтруктураШапкиДокумента, Отказ, СтруктТаблицДокумента, Движения, "БухгалтерскийУчет");
	КонецЕсли;
	
	Для Каждого ТекущееДвижение Из Движения Цикл
		Если ТекущееДвижение.Значение.Модифицированность() Тогда
			ТекущееДвижение.Значение.Записать(Ложь);
		КонецЕсли;
	КонецЦИкла;	

КонецПроцедуры

//Процедура для формирования проводок по поступлению ТМЦ. 
//	Готовит входные параметры для процедуры СформироватьПроводкиПоТабличнойЧастиПоВидуУчета исходя из вида учета и таблиц документа
// Параметры
//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
//  Отказ  								– булево – признак отказа
//  СтруктТаблицДокумента               – Структура – содержит таблицы документа по которым необходимо сформировать проводки
//  Движения               				– Структура – содержит коллекции движений по проводкам Бух и Нал
//  ВидУчета							– Строка ("БухгалтерскийУчет" или "НалоговыйУчет") Вид учета по которому необходимо сформировать движения
Процедура СформироватьПроводкиПоВидуУчета(СтруктураШапкиДокумента, Отказ, СтруктТаблицДокумента, Движения, ВидУчета)
	Перем ИмяРегистраБухгалтерии;
	ИмяРегистраБухгалтерии = ?(ВидУчета="БухгалтерскийУчет","Хозрасчетный","Налоговый");
	
	
	Движения.Вставить(ИмяРегистраБухгалтерии,РегистрыБухгалтерии[ИмяРегистраБухгалтерии].СоздатьНаборЗаписей());
	Движения[ИмяРегистраБухгалтерии].Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);

	Для каждого ТабЧасть из СтруктТаблицДокумента цикл
		ИмяТабЧасти = ТабЧасть.Ключ;
		ТаблицаТЧ = ТабЧасть.Значение;
		Если ТаблицаТЧ.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПараметрыПроводок = ПолучитьПараметрыПроводок(СтруктураШапкиДокумента,ИмяТабЧасти, ВидУчета);
		Если СтруктураПараметрыПроводок.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;

		СформироватьПроводкиПоТабличнойЧастиПоВидуУчета(Движения, СтруктураПараметрыПроводок, СтруктураШапкиДокумента, ИмяТабЧасти, ТаблицаТЧ, ВидУчета);
	КонецЦикла;
	
КонецПроцедуры

//Функция для расчета сумм в проводки. 
// Параметры
//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
//  СтрокаТаблицы  						– Строка таблицы значений - Строка , на основании которой формируется проводка
//  ИмяТЧ               				– Строка – содержит имя табличной части по которой формируется проводка
// Возвращаемое значение:
//  Структура, содержащая рассчитанные суммы. Элементы структуры: 
//		Стоимость,НДС,СтоимостьВал,НДСВал - есть всегда, могут быть равными 0
//      СтоимостьНУ - появляется в некоторых случаях если стоимость нал отличается от стоимости бух
Функция РассчитатьСуммыПроводок(СтруктураШапкиДокумента, СтрокаТаблицы, ИмяТЧ)
	
	СтруктураСуммы = Новый Структура("Стоимость,СтоимостьНУ,НДС,СтоимостьВал,НДСВал",0,0,0,0,0);
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	
	Если ИмяТЧ = "Тара" И ТипДокумента <> Тип("ДокументСсылка.ВозвратПереданныхТоваров") И ТипДокумента <> Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.ПроводкиСуммаБезНДСВал);
		СтруктураСуммы.Вставить("Стоимость",    СтрокаТаблицы.ПроводкиСуммаБезНДСРегл);
		СтруктураСуммы.Вставить("СтоимостьНУ",  СтрокаТаблицы.СтоимостьНУ);
		Возврат СтруктураСуммы;
	КонецЕсли;
	
	СчетУчетаБУЗабалансовый = ложь;
	Если ИмяТЧ = "Товары" и (
		ТипДокумента =  Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
		ТипДокумента =  Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") ИЛИ
		ТипДокумента =  Тип("ДокументСсылка.ПоступлениеДопРасходов") ИЛИ
		ТипДокумента =  Тип("ДокументСсылка.АвансовыйОтчет")
		) Тогда
		СчетУчетаБУЗабалансовый = СтрокаТаблицы.СчетУчетаБУ.Забалансовый;
	КонецЕсли;
	
	Если ТипДокумента =  Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
	    СтруктураСуммы.Вставить("СтоимостьВал",     СтрокаТаблицы.ПроводкиСуммаБезНДСВал);
		СтруктураСуммы.Вставить("Стоимость",        СтрокаТаблицы.ПроводкиСуммаБезНДСРегл);
		СтруктураСуммы.Вставить("СтоимостьНУ",      СтрокаТаблицы.СтоимостьНУ);
	
	    СтруктураСуммы.Вставить("НДС",              СтрокаТаблицы.ПроводкиСуммаНДСРегл);		
		СтруктураСуммы.Вставить("НДСВал",           СтрокаТаблицы.ПроводкиСуммаНДСВал);

		СтруктураСуммы.Вставить("СуммаНоминальная", СтрокаТаблицы.ПроводкиСуммаНоминальная);
		
	ИначеЕсли ТипДокумента =  Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
	    СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.ПроводкиСуммаБезНДСВал);
		СтруктураСуммы.Вставить("Стоимость",СтрокаТаблицы.ПроводкиСуммаБезНДСРегл);
		СтруктураСуммы.Вставить("СтоимостьНУ", СтрокаТаблицы.СтоимостьНУ);
	
	    СтруктураСуммы.Вставить("НДС",СтрокаТаблицы.ПроводкиСуммаНДСРегл);		
		СтруктураСуммы.Вставить("НДСВал",СтрокаТаблицы.ПроводкиСуммаНДСВал);
		
	ИначеЕсли ТипДокумента =  Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
        СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.ПроводкиСуммаБезНДСВал);
		СтруктураСуммы.Вставить("Стоимость",СтрокаТаблицы.ПроводкиСуммаБезНДСРегл);
		СтруктураСуммы.Вставить("СтоимостьНУ", СтрокаТаблицы.СтоимостьНУ);
	
	    СтруктураСуммы.Вставить("НДС",СтрокаТаблицы.ПроводкиСуммаНДСРегл);		
		СтруктураСуммы.Вставить("НДСВал",СтрокаТаблицы.ПроводкиСуммаНДСВал);
	ИначеЕсли ТипДокумента =  Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда

		СтруктураСуммы.Вставить("Стоимость",    -СтрокаТаблицы.Себестоимость * СтрокаТаблицы.КоличествоДок);	
		СтруктураСуммы.Вставить("СтоимостьНУ",  -СтрокаТаблицы.СебестоимостьНУ * СтрокаТаблицы.КоличествоДок);
		СтруктураСуммы.Вставить("СтоимостьВал", -СтрокаТаблицы.Себестоимость * СтрокаТаблицы.КоличествоДок / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента);
		
	ИначеЕсли ТипДокумента =  Тип("ДокументСсылка.АвансовыйОтчет") Тогда

		СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.ПроводкиСуммаБезНДСВал);
		СтруктураСуммы.Вставить("Стоимость",    СтрокаТаблицы.ПроводкиСуммаБезНДСРегл);
		СтруктураСуммы.Вставить("СтоимостьНУ",  СтрокаТаблицы.СтоимостьНУ);
	    СтруктураСуммы.Вставить("НДС",          СтрокаТаблицы.ПроводкиСуммаНДСРегл);		
		СтруктураСуммы.Вставить("НДСВал",       СтрокаТаблицы.ПроводкиСуммаНДСВал);
		
		
	ИначеЕсли ТипДокумента =  Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
		
		СтруктураСуммы.Вставить("Стоимость",    -СтрокаТаблицы.Себестоимость * СтрокаТаблицы.КоличествоДок);	
		СтруктураСуммы.Вставить("СтоимостьНУ",  -СтрокаТаблицы.СебестоимостьНУ * СтрокаТаблицы.КоличествоДок);
		СтруктураСуммы.Вставить("СтоимостьВал", -СтрокаТаблицы.Себестоимость * СтрокаТаблицы.КоличествоДок / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента);
		
	ИначеЕсли ТипДокумента =  Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
        СтруктураСуммы.Вставить("Стоимость", СтрокаТаблицы.СтоимостьРегл);
		СтруктураСуммы.Вставить("СтоимостьНУ", СтрокаТаблицы.СтоимостьНал);
		
	ИначеЕсли ТипДокумента =  Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
	    СтруктураСуммы.Вставить("Стоимость",   СтрокаТаблицы.СуммаРегл);
		СтруктураСуммы.Вставить("СтоимостьНУ", СтрокаТаблицы.СуммаНУ);
	КонецЕсли;
	
	Возврат СтруктураСуммы;
КонецФункции

//Процедура для заполнения счета в проводке. 
// Параметры
//  СтруктураПараметры  						– Структура – содержит исходные параметры формирования проводок
//  Проводка  							– запись регистра бухгалтерии – заполняемая проводка
//  флДебет               				– булево – содержит признак какой счет заполнять (дебета или кредита)
//  ИсточникШапка               		– Структура – содержит структуру шапки документа
//  ИсточникТабЧасть					- Строка табличной части - содержит строку табличной части по данным которой заполняется проводка
Процедура ЗаполнитьСчетПроводки(СтруктураПараметры, Проводка, флДебет, ИсточникШапка, ИсточникТабЧасть)
	Если флДебет Тогда
		ИмяСчета = "СчетДт";
		Если СтруктураПараметры.ИсточникДанныхДт="Ш" Тогда
			Источник = ИсточникШапка;
		Иначе
			Источник = ИсточникТабЧасть;
		КонецЕсли;
	Иначе
		ИмяСчета = "СчетКт";
		Если СтруктураПараметры.ИсточникДанныхКт="Ш" Тогда
			Источник = ИсточникШапка;
		Иначе
			Источник = ИсточникТабЧасть;
		КонецЕсли;
	КонецЕсли;
	мСчет = СтруктураПараметры[ИмяСчета];
	Если ТипЗнч(мСчет)=Тип("Строка") Тогда
		Проводка[ИмяСчета] = Источник[мСчет];   //счет получается из источника данных по имени реквизита заданного в параметрах
	Иначе
		Проводка[ИмяСчета] = мСчет; 			//значение счета задано явно в параметрах
	КонецЕсли;
КонецПроцедуры

//Процедура для заполнения аналитики в проводке. 
// Параметры
//  СтруктураПараметры  						– Структура – содержит исходные параметры формирования проводок
//  Проводка  							– запись регистра бухгалтерии – заполняемая проводка
//  флДебет               				– булево – содержит признак какой счет заполнять (дебета или кредита)
//  ИсточникШапка               		– Структура – содержит Структурактуру шапки документа
//  ИсточникТабЧасть					- Строка табличной части - содержит строку табличной части по данным которой заполняется проводка
//  СкладПроводок						- Справочник ссылка Склады - содержит склад которым нужно заполнить проводку
Процедура ЗаполнитьАналитикуПроводки(СтруктураПараметры, Проводка, флДебет, ИсточникШапка, ИсточникТабЧасть, СкладПроводок)
	Если флДебет Тогда
		ИмяСчета = "СчетДт";
		ИмяСубконто = "СубконтоДт";
		Если СтруктураПараметры.ИсточникДанныхДт="Ш" Тогда
			Источник = ИсточникШапка;
		Иначе
			Источник = ИсточникТабЧасть;
		КонецЕсли;
	Иначе
		ИмяСчета = "СчетКт";
		ИмяСубконто = "СубконтоКт";
		Если СтруктураПараметры.ИсточникДанныхКт="Ш" Тогда
			Источник = ИсточникШапка;
		Иначе
			Источник = ИсточникТабЧасть;
		КонецЕсли;
	КонецЕсли;
	Ном = 1;
	Для каждого элт из СтруктураПараметры[ИмяСубконто] цикл
		ВидСубконто = элт.Ключ;
		Если Найти(ВидСубконто,"Номер")>0 Тогда //в параметрах задан не имя, а номер субконто
			ВидСубконто = Ном;
		КонецЕсли;
		
		Если ТипЗнч(Элт.Значение)=Тип("Строка") Тогда
			Если Элт.Значение = "#Склад#" Тогда 
				ЗначениеСубконто = СкладПроводок; //значение субконто заполняется складом
			ИначеЕсли Элт.Значение = "#СделкаРегл#" Тогда
				ЗначениеСубконто = ИсточникТабЧасть["СделкаРегл"]	
			ИначеЕсли Элт.Значение = "#СтатьяЗатратСхемыРеализации#" Тогда
				ЗначениеСубконто = БухгалтерскийУчетПовтИсп.ОпределитьСтатьюЗатратСхемыРеализации(ИсточникТабЧасть["СубконтоРасходовБУ1"], ИсточникТабЧасть["СубконтоРасходовБУ2"], ИсточникТабЧасть["СубконтоРасходовБУ3"]);
			Иначе
				ЗначениеСубконто = Источник[элт.Значение]; //значение субконто заполняется значением реквизита источника
			КонецЕсли;
		Иначе
			ЗначениеСубконто = элт.Значение;
		КонецЕсли;
		Ном = Ном + 1;
		БухгалтерскийУчет.УстановитьСубконто(Проводка[ИмяСчета], Проводка[ИмяСубконто], ВидСубконто, ЗначениеСубконто);
	КонецЦикла;

КонецПроцедуры

//Процедура для заполнения налогового назначения в проводке. 
// Параметры
//  СтруктураПараметры  				– Структура – содержит исходные параметры формирования проводок
//  Проводка  							– запись регистра бухгалтерии – заполняемая проводка
//  флДебет               				– булево – содержит признак какое налоговое назначение заполнять (дебета или кредита)
//  ИсточникШапка               		– Структура – содержит структуру шапки документа
//  ИсточникТабЧасть					- Строка табличной части - содержит строку табличной части по данным которой заполняется проводка
Процедура ЗаполнитьНалоговоеНазначениеПроводки(СтруктураПараметры, Проводка, флДебет, ИсточникШапка, ИсточникТабЧасть)
	Если флДебет Тогда
		ИмяНалоговогоНазначения = "НалоговоеНазначениеДт";
		Если СтруктураПараметры.ИсточникДанныхДт="Ш" Тогда
			Источник = ИсточникШапка;
		Иначе
			Источник = ИсточникТабЧасть;
		КонецЕсли;
	Иначе
		ИмяНалоговогоНазначения = "НалоговоеНазначениеКт";
		Если СтруктураПараметры.ИсточникДанныхКт="Ш" Тогда
			Источник = ИсточникШапка;
		Иначе
			Источник = ИсточникТабЧасть;
		КонецЕсли;
	КонецЕсли;
	мНалоговоеНазначение = СтруктураПараметры[ИмяНалоговогоНазначения];
	Если ТипЗнч(мНалоговоеНазначение)=Тип("Строка") Тогда
		Проводка[ИмяНалоговогоНазначения] = Источник[мНалоговоеНазначение]; //налоговое назначение получается из источника данных по имени реквизита заданного в параметрах
	Иначе
		Проводка[ИмяНалоговогоНазначения] = мНалоговоеНазначение; 			//значение налогового назначения задано явно в параметрах
	КонецЕсли;
КонецПроцедуры


//Процедура для формирования проводок по поступлению ТМЦ. 
//	Создает проводки по указанной табличной части по переданному виду учета
// Параметры
//  Движения               				– Структура – содержит коллекции движений по проводкам Бух и Нал
//  СтруктураПараметрыПроводок               – Структура – содержит исходные параметры для формирования проводок
//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
//  ИмяТЧ  								– Строка 	– имя табличной части для которой формируются проводки
//  ТаблицаТЧ  							– ТаблицаЗначений 	– данные табличной части для которой формируются проводки 
//  ВидУчета							– Строка ("БухгалтерскийУчет" или "НалоговыйУчет") Вид учета по которому необходимо сформировать движения
Процедура СформироватьПроводкиПоТабличнойЧастиПоВидуУчета(Движения, СтруктураПараметрыПроводок, СтруктураШапкиДокумента, ИмяТЧ, ТаблицаТЧ, ВидУчета)
	
	Перем СтруктураПараметрыПроводокСторно;
	
	Проводки = Движения["Хозрасчетный"];
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	
	ИспользованиеРА = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);
	
	Если ТаблицаТЧ.Колонки.Найти("БланкСтрогогоУчета") = Неопределено Тогда
		ТаблицаТЧ.Колонки.Добавить("БланкСтрогогоУчета");
		ТаблицаТЧ.ЗаполнитьЗначения(Ложь, "БланкСтрогогоУчета");
	КонецЕсли; 
	
	Для каждого СтрокаТЧ из ТаблицаТЧ цикл
		//1. Проводки по поступлению ТМЦ
		Если СтруктураПараметрыПроводок.Свойство("ПриходТМЦ") Тогда
			Если СтруктураШапкиДокумента.Дата >= Дата("20210101") Тогда
				НаличнаяОрганизация = Константы.НПТ.Получить();
			Иначе
				НаличнаяОрганизация = Константы.КрафтКолор.Получить();
			КонецЕсли;
			Проводка = Проводки.Добавить();
			Проводка.Период = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			//Смартис Лиманчук начало 12.12.2012
			Если СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет" Тогда
				Если СтруктураШапкиДокумента.НаличныйРасчет ИЛИ СтруктураШапкиДокумента.ПоИнвентаризации Тогда
					Проводка.Организация = НаличнаяОрганизация;
				КонецЕсли;
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссияНал И ИмяТЧ = "Услуги" Тогда
				Проводка.Организация = НаличнаяОрганизация;
			//Смартис Лиманчук начало 25.12.2012
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал Тогда
				Проводка.Организация = НаличнаяОрганизация;
			//Смартис Лиманчук окончание 25.12.2012
			//Смартис Лиманчук начало 18.01.2013
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительстваНал Тогда
				Проводка.Организация = НаличнаяОрганизация;
			//Смартис Лиманчук окончание 18.01.2013
			КонецЕсли;
			//Смартис Лиманчук окончание 12.12.2012
			
			СтруктураПриходТМЦ = СтруктураПараметрыПроводок.ПриходТМЦ; 
			
			//определим склад для заполнения проводок
			СкладПроводок = Справочники.Склады.ПустаяСсылка();
			Если ИмяТЧ<>"Услуги" И ИмяТЧ<>"ОбъектыСтроительства" Тогда
				Если СтруктураПриходТМЦ.Свойство("Склад") Тогда
					Если ТипЗнч(СтруктураПриходТМЦ.Склад.ИмяРеквСклад)=Тип("Строка") Тогда
						Если СтруктураПриходТМЦ.Склад.СкладВШапке Тогда
							СкладПроводок = СтруктураШапкиДокумента[СтруктураПриходТМЦ.Склад.ИмяРеквСклад];
						Иначе
							СкладПроводок = СтрокаТЧ[СтруктураПриходТМЦ.Склад.ИмяРеквСклад];
						КонецЕсли;
					Иначе
						СкладПроводок = СтруктураПриходТМЦ.Склад.ИмяРеквСклад;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			//Дебет
			Если (ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") ИЛИ ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров"))
				 И СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда 
				//счет дебета не заполняется
			Иначе
				ЗаполнитьСчетПроводки(СтруктураПриходТМЦ, Проводка, истина, СтруктураШапкиДокумента, СтрокаТЧ);
				ЗаполнитьАналитикуПроводки(СтруктураПриходТМЦ, Проводка, истина, СтруктураШапкиДокумента, СтрокаТЧ, СкладПроводок);
				ЗаполнитьНалоговоеНазначениеПроводки(СтруктураПриходТМЦ, Проводка, истина, СтруктураШапкиДокумента, СтрокаТЧ);
			КонецЕсли;
			//Количество Дт
			Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") ИЛИ (ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") И ИмяТЧ = "Тара") Тогда	
			     // не заполняем к-во дт при возврате товаров
			ИначеЕсли ИмяТЧ<>"Услуги" Тогда
				Проводка.КоличествоДт            = БухгалтерскийУчет.КоличествоВПроводку(Проводка.СчетДт, СтрокаТЧ.Количество);
			КонецЕсли;
			
			//Заполнение контрагента если счет учета - забалансовый
			флСчетУчетаЗабалансовый = ложь;
			Если Проводка.СчетДт.Забалансовый Тогда
				
				Если ВидУчета = "БухгалтерскийУчет"
				  И УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата) Тогда				
				  	//При использовании расширенной аналитики склад на забалансовых счетах не заполняется
					ЗаполнитьАналитикуПроводки(СтруктураПриходТМЦ, Проводка, Истина, СтруктураШапкиДокумента, СтрокаТЧ, Справочники.Склады.ПустаяСсылка());
				КонецЕсли;	
				
				флСчетУчетаЗабалансовый = истина;

				// Для БУ аналитика Контрагенты используется на многих забалансовых счетах
				Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
					ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") ИЛИ
					ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") ИЛИ 
					ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
					БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТЧ.Поставщик);
	
				КонецЕсли;
			КонецЕсли;
			
			//Кредит
	
			//Заполнение счета и аналитики кредита
			Если флСчетУчетаЗабалансовый Тогда
				//счет и аналитика кредита не заполняется
			Иначе
				ЗаполнитьСчетПроводки(СтруктураПриходТМЦ, Проводка, ложь, СтруктураШапкиДокумента, СтрокаТЧ);
				ЗаполнитьАналитикуПроводки(СтруктураПриходТМЦ, Проводка, ложь, СтруктураШапкиДокумента, СтрокаТЧ, СкладПроводок);
				ЗаполнитьНалоговоеНазначениеПроводки(СтруктураПриходТМЦ, Проводка, ложь, СтруктураШапкиДокумента, СтрокаТЧ);
			КонецЕсли;
			
			//Заполнение контрагента в аналитике кредита при возврате товаров на забалансовый счет
			Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
				И ИмяТЧ = "Товары"
				И Проводка.СчетКт.Забалансовый Тогда
				флСчетУчетаЗабалансовый = истина;
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			КонецЕсли;	
			
			//Количество Кт
			Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
				Если ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") ИЛИ (ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") И ИмяТЧ = "Тара") Тогда	
					Проводка.КоличествоКт = БухгалтерскийУчет.КоличествоВПроводку(Проводка.СчетКт, -СтрокаТЧ.КоличествоДок);
				ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
					Проводка.КоличествоКт = БухгалтерскийУчет.КоличествоВПроводку(Проводка.СчетКт, СтрокаТЧ.Количество);
				КонецЕсли;
			КонецЕсли;
			
			СтруктураСуммыВПроводки = РассчитатьСуммыПроводок(СтруктураШапкиДокумента, СтрокаТЧ, ИмяТЧ);

			Проводка.Сумма = СтруктураСуммыВПроводки.Стоимость;
			Если СтруктураСуммыВПроводки.Свойство("СтоимостьНУ") Тогда
				Проводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СтруктураСуммыВПроводки.СтоимостьНУ);
				Проводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СтруктураСуммыВПроводки.СтоимостьНУ);
			Иначе
				Проводка.СуммаНУДт = 0;	
				Проводка.СуммаНУКт = 0;	
			КонецЕсли;	
			
			Если ВидУчета = "БухгалтерскийУчет" И Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента[СтруктураПриходТМЦ.ВалютаКт];
				Проводка.ВалютнаяСуммаКт = СтруктураСуммыВПроводки.СтоимостьВал;
			КонецЕсли;
			Проводка.Содержание = СтруктураПриходТМЦ.СодержаниеПроводки;
			Если СтрокаТЧ.БланкСтрогогоУчета = Истина Тогда // в колонке не всегда булево
			  	Проводка.Содержание = Проводка.Содержание + " БСУ";
			 КонецЕсли;
			Проводка.НомерЖурнала = СтруктураПриходТМЦ.НомерЖурнала;

			//частные случаи
			Если (ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ 
				ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") ИЛИ
				ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")) Тогда
				//- заполнение аналитики по поступлению услуг
				Если ИмяТЧ = "Услуги" Тогда
					Если ТипДокумента <> Тип("ДокументСсылка.АвансовыйОтчет")  Тогда
						//заполнение содержания проводки по содержанию услуги для документов ПТиУ и ПТиУ в НТТ
						Проводка.Содержание = СтрокаТЧ.Содержание;
                    КонецЕсли;

					ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(Проводка.СчетДт);
					Если ПроизводственныеРасходы Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтрокаТЧ.ПодразделениеОрганизации);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТЧ.СтатьяЗатрат);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТЧ.ОбъектСтроительства);
					Иначе
						
						ИмяКолонкиСубконто = "Субконто";
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ[ИмяКолонкиСубконто+"1"]);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ[ИмяКолонкиСубконто+"2"]);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ[ИмяКолонкиСубконто+"3"]);
						
					КонецЕсли;
					
					//Смартис Лиманчук начало 11.12.2012
					////Смартис Лиманчук начало 03.12.2012
					//Если ТипДокумента <> Тип("ДокументСсылка.АвансовыйОтчет") И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссияНал Тогда
					//	Проводка.СчетДт          = ПланыСчетов.Хозрасчетный.РасходыНаСбыт;
					//	Проводка.СубконтоДт.Очистить();
					//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтруктураШапкиДокумента.СтатьяЗатратДляКрафт);
					//	СписокПодразделений = РаботаСДиалогамиСервер.ПолучитьСписокПодразделенийОрганизаций(СтруктураШапкиДокумента.Подразделение,СтруктураШапкиДокумента.Организация);
					//	Если СписокПодразделений.Количество()>0 Тогда
					//		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СписокПодразделений[0].Значение);
					//	КонецЕсли;
					//КонецЕсли;
					////Смартис Лиманчук окончание 03.12.2012
					//Смартис Лиманчук окончание 11.12.2012
					
				КонецЕсли;
				
				//Смартис Лиманчук начало 03.12.2012
				Если ТипДокумента <> Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Если ИмяТЧ = "Товары" И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссияНал 
						//Верескул
						//Исключаем из этогого НПТ
						И СтруктураШапкиДокумента.Организация <> Константы.НПТ.Получить()
						Тогда
						//заменяем аналитику по кредиту
						ДоговорКрафт = СтруктураШапкиДокумента.Организация.ДоговорОрганизацияПродаетКрафту;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", ДоговорКрафт.Владелец);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", ДоговорКрафт);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки", Неопределено);
					КонецЕсли;
				КонецЕсли;
				//Смартис Лиманчук окончание 03.12.2012
				
				//Смартис Лиманчук начало 05.04.2013
				Если ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") И ИмяТЧ = "Услуги" И СтруктураШапкиДокумента.ПоИнвентаризации Тогда
					
					ЕстьЗарплата = Ложь;
					
					Если Проводка.Сумма < 0  Тогда
					
						//переворачиваем проводку
						
						СчетТранзит = Проводка.СчетДт;
						ВалютаТранзит = Проводка.ВалютаДт;
						НалоговоеНазначениеТранзит = Проводка.НалоговоеНазначениеДт;
						ВалютнаяСуммаТранзит = -Проводка.ВалютнаяСуммаДт;
						КоличествоТранзит = -Проводка.КоличествоДт;
						СуммаНУТранзит = -Проводка.СуммаНУДт;
						
						СтруктураСубконтоДт = Новый Структура;
						Для каждого Стр Из Проводка.СубконтоДт Цикл
							Если Стр.Ключ.Код = "00000000002" Тогда //сотрудника берем из шапки документа
								СтруктураСубконтоДт.Вставить("С"+Стр.Ключ.Код, СтруктураШапкиДокумента.ФизЛицо);
								ЕстьЗарплата = Истина;
							Иначе	
								СтруктураСубконтоДт.Вставить("С"+Стр.Ключ.Код, Стр.Значение);
							КонецЕсли;
						КонецЦикла;
						
						СтруктураСубконтоКт = Новый Структура;
						Для каждого Стр Из Проводка.СубконтоКт Цикл
							Если Стр.Ключ.Код = "00000000002" Тогда //сотрудника берем из шапки документа
								СтруктураСубконтоКт.Вставить("С"+Стр.Ключ.Код, СтруктураШапкиДокумента.ФизЛицо);
								ЕстьЗарплата = Истина;
							Иначе	
								СтруктураСубконтоКт.Вставить("С"+Стр.Ключ.Код, Стр.Значение);
							КонецЕсли;
						КонецЦикла;
						
						Проводка.СчетДт = Проводка.СчетКт;
						Проводка.ВалютаДт = Проводка.ВалютаКт;
						Проводка.НалоговоеНазначениеДт = Проводка.НалоговоеНазначениеКт;
						Проводка.ВалютнаяСуммаДт = -Проводка.ВалютнаяСуммаКт;
						Проводка.КоличествоДт = -Проводка.КоличествоКт;
						Проводка.СуммаНУДт = -Проводка.СуммаНУКт;
						
						Проводка.СубконтоДт.Очистить();
						Для каждого Стр Из СтруктураСубконтоКт Цикл
							ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоКоду(Сред(Стр.Ключ,2));
							Проводка.СубконтоДт.Вставить(ВидСубк,Стр.Значение);
						КонецЦикла;
						
						Проводка.СчетКт = СчетТранзит;
						Проводка.ВалютаКт = ВалютаТранзит;
						Проводка.НалоговоеНазначениеКт = НалоговоеНазначениеТранзит;
						Проводка.ВалютнаяСуммаКт = ВалютнаяСуммаТранзит;
						Проводка.КоличествоКт = КоличествоТранзит;
						Проводка.СуммаНУКт = СуммаНУТранзит;
							
						Проводка.СубконтоКт.Очистить();
						Для каждого Стр Из СтруктураСубконтоДт Цикл
							ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НайтиПоКоду(Сред(Стр.Ключ,2));
							Проводка.СубконтоКт.Вставить(ВидСубк,Стр.Значение);
						КонецЦикла;
						
						Проводка.Сумма = -Проводка.Сумма;
					
					Иначе
					
						Для каждого Стр Из Проводка.СубконтоДт Цикл
							Если Стр.Ключ.Код = "00000000002" Тогда //сотрудника берем из шапки документа
								ЕстьЗарплата = Истина;
								Проводка.СубконтоДт.Вставить(Стр.Ключ,СтруктураШапкиДокумента.ФизЛицо);
							КонецЕсли;
						КонецЦикла;
						Для каждого Стр Из Проводка.СубконтоКт Цикл
							Если Стр.Ключ.Код = "00000000002" Тогда //сотрудника берем из шапки документа
								ЕстьЗарплата = Истина;
								Проводка.СубконтоКт.Вставить(Стр.Ключ,СтруктураШапкиДокумента.ФизЛицо);
							КонецЕсли;
						КонецЦикла;
					
					КонецЕсли;
					
				КонецЕсли;
				//Смартис Лиманчук окончание 05.04.2013
				
				Если Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию
				  И ИспользованиеРА	Тогда
					// При использовании РА проводка по счету 0241 делается по пустому складу
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Справочники.Склады.ПустаяСсылка());
				КонецЕсли;	
				
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
				УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(Проводка, СтрокаТЧ, СтруктураШапкиДокумента, "Дт");
				ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СтатьяЗатрат);
				
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы
					   И ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
					
					Проводка.Сумма  = - Проводка.Сумма;
					Проводка.КоличествоКт = - Проводка.КоличествоКт;
					Проводка.СуммаНУДт  = - Проводка.СуммаНУДт;
					Проводка.СуммаНУКт  = - Проводка.СуммаНУКт;
				Иначе
					Проводка.Сумма        = - Проводка.Сумма;
					Проводка.КоличествоДт = - Проводка.КоличествоДт;
					Проводка.КоличествоКт = - Проводка.КоличествоКт;
					Проводка.СуммаНУДт    = - Проводка.СуммаНУДт;
					Проводка.СуммаНУКт    = - Проводка.СуммаНУКт;
					
				КонецЕсли;
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				Проводка.КоличествоДт = 0;
				//Смартис Лиманчук начало 23.01.2013
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизацииНал Тогда
					//заменяем аналитику по кредиту
					ДоговорКрафт = СтруктураШапкиДокумента.Организация.ДоговорОрганизацияПродаетКрафту;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", ДоговорКрафт.Владелец);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", ДоговорКрафт);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки", Неопределено);
				КонецЕсли;
				//Смартис Лиманчук окончание 23.01.2013
			КонецЕсли;
			
			// Обработка бланков строгого учета - доп. проводка для БСУ по счету СчетУчетаЗабалансовыйБУ и по номинальной стоимости
			Если ВидУчета = "БухгалтерскийУчет" И ИмяТЧ = "Товары" И СтрокаТЧ.БланкСтрогогоУчета = Истина Тогда // в колонке не всегда булево
				
				Проводка = Проводки.Добавить();
				Проводка.Период = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				
				Проводка.Содержание   = СтруктураПриходТМЦ.СодержаниеПроводки + " БСУ";
				Проводка.НомерЖурнала = СтруктураПриходТМЦ.НомерЖурнала;
				
				Проводка.СчетДт       = СтрокаТЧ.СчетУчетаЗабалансовыйБУ;
					
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СкладПроводок);
					
				Проводка.КоличествоДт = БухгалтерскийУчет.КоличествоВПроводку(Проводка.СчетДт, СтрокаТЧ.Количество);
				Проводка.Сумма 		  = СтрокаТЧ.СуммаНоминальная;
				
			КонецЕсли;		
			
			//Смартис Лиманчук начало 04.12.2012
			Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
				Если ИмяТЧ = "Товары" 
					И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссияНал 
					//Верескул
					//Исключил из проводок по Крафту НПТ
					И СтруктураШапкиДокумента.Организация <> Константы.НПТ.Получить()
					Тогда
					//добавляем свои проводки
					
					ДоговорОрганизацияКрафт = СтруктураШапкиДокумента.Организация.ДоговорОрганизацияПродаетКрафту;
					ДоговорКрафтОрганизация = СтруктураШапкиДокумента.Организация.ДоговорКрафтПокупаетУОрганизации;
					
					//1
					
					Проводка = Проводки.Добавить();
					Проводка.Период = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					
					Проводка.Содержание   = СтруктураПриходТМЦ.СодержаниеПроводки + " БСУ";
					Проводка.НомерЖурнала = СтруктураПриходТМЦ.НомерЖурнала;
					Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПоставщиками;
					//Верескул: исключить НПТ
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ДоговорОрганизацияКрафт.Владелец);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ДоговорОрганизацияКрафт);
					
					//Смартис Лиманчук начало 24.01.2013
					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.СчетДт          = ПланыСчетов.Хозрасчетный.РасчетыСИностраннымиПоставщиками;
						Проводка.ВалютаДт        = СтруктураШапкиДокумента[СтруктураПриходТМЦ.ВалютаКт];
						Проводка.ВалютнаяСуммаДт = СтруктураСуммыВПроводки.СтоимостьВал;
					КонецЕсли;
					//Смартис Лиманчук окончание 24.01.2013
					
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты;
					
					Проводка.Сумма 		  = СтруктураСуммыВПроводки.Стоимость;
					
					//2
					Проводка = Проводки.Добавить();
					Проводка.Период = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = ДоговорКрафтОрганизация.Организация;
					
					Проводка.Содержание   = СтруктураПриходТМЦ.СодержаниеПроводки + " БСУ";
					Проводка.НомерЖурнала = СтруктураПриходТМЦ.НомерЖурнала;
					
					Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПокупателями;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ДоговорКрафтОрганизация.Владелец);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ДоговорКрафтОрганизация);
					
					//Смартис Лиманчук начало 24.01.2013
					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.СчетДт          = ПланыСчетов.Хозрасчетный.РасчетыСИностраннымиПокупателями;
						Проводка.ВалютаДт        = СтруктураШапкиДокумента[СтруктураПриходТМЦ.ВалютаКт];
						Проводка.ВалютнаяСуммаДт = СтруктураСуммыВПроводки.СтоимостьВал;
					КонецЕсли;
					//Смартис Лиманчук окончание 24.01.2013
					
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПоставщиками;
					ЗаполнитьАналитикуПроводки(СтруктураПриходТМЦ, Проводка, ложь, СтруктураШапкиДокумента, СтрокаТЧ, СкладПроводок);
					
					//Смартис Лиманчук начало 24.01.2013
					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.РасчетыСИностраннымиПоставщиками;
						Проводка.ВалютаКт        = СтруктураШапкиДокумента[СтруктураПриходТМЦ.ВалютаКт];
						Проводка.ВалютнаяСуммаКт = СтруктураСуммыВПроводки.СтоимостьВал;
					КонецЕсли;
					//Смартис Лиманчук окончание 24.01.2013
					
					Проводка.Сумма 		  = СтруктураСуммыВПроводки.Стоимость;
					
					//3
					Проводка = Проводки.Добавить();
					Проводка.Период = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = ДоговорКрафтОрганизация.Организация;
					
					Проводка.Содержание   = СтруктураПриходТМЦ.СодержаниеПроводки + " БСУ";
					Проводка.НомерЖурнала = СтруктураПриходТМЦ.НомерЖурнала;
					
					Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты;
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПокупателями;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", ДоговорКрафтОрганизация.Владелец);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", ДоговорКрафтОрганизация);
					
					//Смартис Лиманчук начало 24.01.2013
					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.РасчетыСИностраннымиПокупателями;
						Проводка.ВалютаКт        = СтруктураШапкиДокумента[СтруктураПриходТМЦ.ВалютаКт];
						Проводка.ВалютнаяСуммаКт = СтруктураСуммыВПроводки.СтоимостьВал;
					КонецЕсли;
					//Смартис Лиманчук окончание 24.01.2013
					
					Проводка.Сумма 		  = СтруктураСуммыВПроводки.Стоимость;
					
				КонецЕсли;
				
			//Смартис Лиманчук начало 23.01.2013
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				Если ИмяТЧ = "Товары" И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизацииНал Тогда
					//добавляем свои проводки
					
					ДоговорОрганизацияКрафт = СтруктураШапкиДокумента.Организация.ДоговорОрганизацияПродаетКрафту;
					ДоговорКрафтОрганизация = СтруктураШапкиДокумента.Организация.ДоговорКрафтПокупаетУОрганизации;
					
					//1
					Проводка = Проводки.Добавить();
					Проводка.Период = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = ДоговорКрафтОрганизация.Организация;
					
					Проводка.Содержание   = СтруктураПриходТМЦ.СодержаниеПроводки + " БСУ";
					Проводка.НомерЖурнала = СтруктураПриходТМЦ.НомерЖурнала;
					
					Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПокупателями;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ДоговорКрафтОрганизация.Владелец);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ДоговорКрафтОрганизация);
					
					//Смартис Лиманчук начало 25.01.2013
					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.СчетДт          = ПланыСчетов.Хозрасчетный.РасчетыСИностраннымиПокупателями;
						Проводка.ВалютаДт        = СтруктураШапкиДокумента[СтруктураПриходТМЦ.ВалютаКт];
						Проводка.ВалютнаяСуммаДт = СтруктураСуммыВПроводки.СтоимостьВал;
					КонецЕсли;
					//Смартис Лиманчук окончание 25.01.2013
					
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ДоходОтРеализацииРаботИУслуг;
					//ЗаполнитьАналитикуПроводки(СтруктураПриходТМЦ, Проводка, ложь, СтруктураШапкиДокумента, СтрокаТЧ, СкладПроводок);
					
					Проводка.Сумма 		  = СтруктураСуммыВПроводки.Стоимость;
					
					//2
					Проводка = Проводки.Добавить();
					Проводка.Период = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = ДоговорКрафтОрганизация.Организация;
					
					Проводка.Содержание   = СтруктураПриходТМЦ.СодержаниеПроводки + " БСУ";
					Проводка.НомерЖурнала = СтруктураПриходТМЦ.НомерЖурнала;
					
					Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.РасходыНаСбыт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", Константы.СтатьяЗатратДляКрафт.Получить());
					//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтруктураШапкиДокумента.);
					
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПоставщиками;
	                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
	                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					//Смартис Лиманчук начало 25.01.2013
					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.РасчетыСИностраннымиПоставщиками;
						Проводка.ВалютаКт        = СтруктураШапкиДокумента[СтруктураПриходТМЦ.ВалютаКт];
						Проводка.ВалютнаяСуммаКт = СтруктураСуммыВПроводки.СтоимостьВал;
					КонецЕсли;
					//Смартис Лиманчук окончание 25.01.2013
					
					Проводка.Сумма 		  = СтруктураСуммыВПроводки.Стоимость;
					
				КонецЕсли;
			//Смартис Лиманчук окончание 23.01.2013
			
			КонецЕсли;
			//Смартис Лиманчук окончание 04.12.2012
			
		КонецЕсли;
	Конеццикла;
	
КонецПроцедуры // СформироватьПроводкиПоТабличнойЧастиПоВидуУчета

//Функция для получения структуры исходных параметров для формирования проводок. 
// Параметры
//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
//  ИмяТабЧасти               			– Строка – содержит имя табличной части по которой формируется проводка
//  ВидУчета							– Строка ("БухгалтерскийУчет" или "НалоговыйУчет") Вид учета по которому необходимо сформировать движения
// Возвращаемое значение:
//  Структура, содержащая исходные параметры формирования проводок. Элементы структуры: 
//		ПриходТМЦ 				- Структура параметров для формирования проводок по поступлению ТМЦ
//			Элементы структуры:
//				СодержаниеПроводки, НомерЖурнала - строки для заполнения соответствующих реквизитов проводок
//				СчетДт - строка, имя реквизита для заполнения счета дебета
//				Склад - структура, содержит данные для извлечения склада: СкладВШапке (булево), ИмяРеквСклад (строка)
//				СчетКт - строка, имя реквизита для заполнения счета дебета. МОжет также содержать явную ссылку на счет
//				ВалютаКт - строка, имя реквизита для заполнения валюты
//				СубконтоДт - структура, содержит данные для заполнения аналитики дебета: 
//						Ключ - строка, может содержать 
//							1) вид субконто (напр. "Номенклатура") 
//							2) номер субконто (тогда будет "Номер1" или "Номер2")
//						Значение может содержать 
//							1) строка: имя реквизита - источник данных для заполнения субконто 
//							2) ключевая строка "#Склад" - признак того что в это субконто нужно заполнить склад.
//								Склад в этом случае определяется так, как описано в элементе структуры Склад
//							3) конкретное значение для заполнения аналитики
//				СубконтоКт - структура, содержит данные для заполнения аналитики кредита. Содержимое аналогично СубкотноДт 
//				ИсточникДанныхДт - строка, содержит сведения откуда брать данные для заполнения счета и аналитики дебета:
//					"Ш" - из шапки (по структуре шапки документа), "ТЧ" - из табличной части (по данным таблицы документа)
//				ИсточникДанныхКт - строка, содержит сведения откуда брать данные для заполнения счета и аналитики кредита:
//					"Ш" - из шапки (по структуре шапки документа), "ТЧ" - из табличной части (по данным таблицы документа)
//
Функция ПолучитьПараметрыПроводок(СтруктураШапкиДокумента,ИмяТабЧасти, ВидУчета)
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	
	СуффиксУчета = "БУ";
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	СтруктураПараметрыПроводок = новый Структура;
	
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если ИмяТабЧасти = "Услуги" И НЕ
			(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
			//Смартис Лиманчук начало 02.10.2012
		 или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссияНал 
			//Смартис Лиманчук окончание 02.10.2012
		 или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства
		 //Смартис Лиманчук начало 18.01.2013
		 или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительстваНал
		 //Смартис Лиманчук окончание 18.01.2013
		 //Смартис Лиманчук начало 05.12.2012
		 или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал
		 //Смартис Лиманчук окончание 05.12.2012
		 или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование) Тогда
		    //не нужно формировать проводки - возвращаем пустую структуру
		 	Возврат СтруктураПараметрыПроводок;
		 
         КонецЕсли;
	 КонецЕсли;
	 
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") И 
		ИмяТабЧасти = "Услуги" И СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика Тогда
		//не нужно формировать проводки - возвращаем пустую структуру
		Возврат СтруктураПараметрыПроводок;
    КонецЕсли;
	
	Если  ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда 
		Если ИмяТабЧасти = "Товары" И СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			//не нужно формировать проводки - возвращаем пустую структуру
			Возврат СтруктураПараметрыПроводок;
		КонецЕсли;
	КонецЕсли;  	
	
	//параметры проводок по приходу ТМЦ
	СтруктураПриходТМЦ = новый Структура;
	СтруктураАналитикаКт = новый Структура;
	Если ИмяТабЧасти = "Оборудование" Тогда
		СтруктураПриходТМЦ.Вставить("СодержаниеПроводки",?(ВидУчета = "НалоговыйУчет","Оприходовано оборудование","Затраты на приобретение ОС"));
		СтруктураПриходТМЦ.Вставить("НомерЖурнала","ОС");
	ИначеЕсли ИмяТабЧасти = "ОбъектыСтроительства" Тогда
		СтруктураПриходТМЦ.Вставить("СодержаниеПроводки",?(ВидУчета = "НалоговыйУчет","Оприходованы ТМЦ","Затраты на приобретение объектов строительства"));
		СтруктураПриходТМЦ.Вставить("НомерЖурнала","");
	ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
	    СтруктураПриходТМЦ.Вставить("СодержаниеПроводки","Прочие поступления");
		СтруктураПриходТМЦ.Вставить("НомерЖурнала","");
	Иначе	
		СтруктураПриходТМЦ.Вставить("СодержаниеПроводки","Оприходованы ТМЦ");	
		СтруктураПриходТМЦ.Вставить("НомерЖурнала","");
	КонецЕсли;
	
	СтруктураПриходТМЦ.Вставить("СчетДт","СчетУчета"+СуффиксУчета);
		
    СтруктураПриходТМЦ.Вставить("Склад",новый Структура("СкладВШапке,ИмяРеквСклад",истина,"Склад"));
	
	СтруктураПриходТМЦ.Вставить("НалоговоеНазначениеДт", "НалоговоеНазначение");
	СтруктураПриходТМЦ.Вставить("НалоговоеНазначениеКт", Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка());

	СтруктураАналитикаДт = новый Структура;
	Если ИмяТабЧасти = "ОбъектыСтроительства" Тогда
		СтруктураАналитикаДт.Вставить("ОбъектыСтроительства","ОбъектСтроительства");
		СтруктураАналитикаДт.Вставить("СтатьиЗатрат","СтатьяЗатрат");
	ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
		СтруктураПриходТМЦ.Вставить("СчетДт","СчетЗатрат");
		//субконто зависит от статьи затрат в ТЧ, поэтому параметры здесь не заполняем
	Иначе
		СтруктураАналитикаДт.Вставить("Номенклатура","Номенклатура");
		СтруктураАналитикаДт.Вставить("Склады","#Склад#");
	КонецЕсли;	
	
    ИсточникДанныхКредит = "Ш";
	ИсточникДанныхДебет = "ТЧ";

	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		
		Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		 	СтруктураПриходТМЦ.Вставить("Склад",новый Структура("СкладВШапке,ИмяРеквСклад",ложь,?(СтруктураШапкиДокумента.ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад,"Склад","ПриходныйОрдерСклад")));
		КонецЕсли;
		
		Если ИмяТабЧасти = "Тара"	Тогда
			СтруктураПриходТМЦ.Вставить("СчетКт","СчетУчетаРасчетовПоТаре");
        Иначе
     		СтруктураПриходТМЦ.Вставить("СчетКт","СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
		
		Если ИмяТабЧасти = "Услуги" Тогда
			СтруктураПриходТМЦ.Вставить("НалоговоеНазначениеДт", "НалоговоеНазначениеДоходовИЗатрат");
		КонецЕсли;	
		
		СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");
		СтруктураАналитикаКт.Вставить("Договоры","ДоговорКонтрагента");
		СтруктураАналитикаКт.Вставить("Сделки","#СделкаРегл#");
		
		СтруктураПриходТМЦ.Вставить("ВалютаКт","ВалютаВзаиморасчетов");
		
	ИначеЕсли  ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		ИсточникДанныхКредит = "ТЧ";

		СтруктураПриходТМЦ.Вставить("Склад",новый Структура("СкладВШапке,ИмяРеквСклад",ложь,"Склад"));
        СтруктураПриходТМЦ.Вставить("ВалютаКт","ВалютаДокумента");
		
		СтруктураПриходТМЦ.Вставить("СчетДт", "СчетРасходов"+СуффиксУчета);
		СтруктураПриходТМЦ.Вставить("НалоговоеНазначениеДт", "НалоговоеНазначениеДоходовИЗатрат");
		СтруктураАналитикаДт = Новый Структура("НоменклатурныеГруппы", "НоменклатурнаяГруппа");
		СтруктураАналитикаДт.Вставить("СтатьиЗатрат", "#СтатьяЗатратСхемыРеализации#");
		
		СтруктураПриходТМЦ.Вставить("СчетКт", "СчетУчета"+СуффиксУчета);
		СтруктураПриходТМЦ.Вставить("НалоговоеНазначениеКт", "НалоговоеНазначение");
		СтруктураАналитикаКт.Вставить("Номенклатура","Номенклатура");
		СтруктураАналитикаКт.Вставить("Склады","#Склад#");

		Если ИмяТабЧасти = "Товары" Тогда
           	СтруктураПриходТМЦ.Вставить("СодержаниеПроводки","Возврат товаров от покупателя");
		ИначеЕсли ИмяТабЧасти = "Тара" Тогда
			СтруктураПриходТМЦ.Вставить("СодержаниеПроводки","Возврат тары от покупателя");
		КонецЕсли;
		
	ИначеЕсли  ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		СтруктураПриходТМЦ.Вставить("ВалютаКт","ВалютаДокумента");

		Если ИмяТабЧасти = "Товары" ИЛИ ИмяТабЧасти = "Тара" Тогда
			СтруктураПриходТМЦ.Вставить("Склад",новый Структура("СкладВШапке,ИмяРеквСклад",ложь,?(СтруктураШапкиДокумента.ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад,"СкладПроводок","ПриходныйОрдерСклад")));
		КонецЕсли;
		
		Если ИмяТабЧасти = "Товары" или ИмяТабЧасти = "Услуги" Тогда
			
			СтруктураПриходТМЦ.Вставить("СчетКт", ?(СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета,ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте,ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте));
			СтруктураАналитикаКт.Вставить("РаботникиОрганизации","ФизЛицо");
			
		ИначеЕсли ИмяТабЧасти = "Тара" Тогда
			
			СтруктураПриходТМЦ.Вставить("СчетКт", "СчетУчетаРасчетовПоТаре");   				
			СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");
			СтруктураАналитикаКт.Вставить("Договоры","ДоговорКонтрагента");
			СтруктураАналитикаКт.Вставить("Сделки","#СделкаРегл#");
			ИсточникДанныхКредит = "ТЧ";
			
		КонецЕсли;
		
		Если ИмяТабЧасти = "Услуги" Тогда
			СтруктураПриходТМЦ.Вставить("НалоговоеНазначениеДт", "НалоговоеНазначениеДоходовИЗатрат");
		КонецЕсли;	
		
	
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
		
		ИсточникДанныхКредит = "ТЧ";

		СтруктураПриходТМЦ.Вставить("Склад",новый Структура("СкладВШапке,ИмяРеквСклад", Истина,"Склад"));
        СтруктураПриходТМЦ.Вставить("ВалютаКт","ВалютаДокумента");

		СтруктураПриходТМЦ.Вставить("СодержаниеПроводки","Возврат переданной тары");
		
		СтруктураПриходТМЦ.Вставить("СчетДт", "СчетРасходов"+СуффиксУчета);
		СтруктураПриходТМЦ.Вставить("НалоговоеНазначениеДт", "НалоговоеНазначениеДоходовИЗатрат");
		СтруктураАналитикаДт = новый Структура("НоменклатурныеГруппы", "НоменклатурнаяГруппа");
		СтруктураАналитикаДт.Вставить("СтатьиЗатрат", "#СтатьяЗатратСхемыРеализации#");
		
		СтруктураПриходТМЦ.Вставить("СчетКт", "СчетУчета"+СуффиксУчета);
		СтруктураПриходТМЦ.Вставить("НалоговоеНазначениеКт", "НалоговоеНазначение");
		СтруктураАналитикаКт.Вставить("Номенклатура","Номенклатура");
		СтруктураАналитикаКт.Вставить("Склады","#Склад#");

	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы Тогда
			СтруктураПриходТМЦ.Вставить("СодержаниеПроводки", "Оприходованы материалы");
		Иначе
			СтруктураПриходТМЦ.Вставить("СодержаниеПроводки", "Оприходованы возвратные отходы");
		КонецЕсли;	

		СтруктураПриходТМЦ.Вставить("СчетДт", "СчетЗатрат");
    	СтруктураПриходТМЦ.Вставить("СчетКт", "Счет");
		СтруктураПриходТМЦ.Вставить("НалоговоеНазначениеКт", "НалоговоеНазначение");
		
		СтруктураАналитикаКт.Вставить("Номенклатура","Номенклатура");
		СтруктураАналитикаКт.Вставить("Склады","#Склад#");
		СтруктураАналитикаДт.Вставить("Контрагенты","Контрагент");
    	СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");
		
		ИсточникДанныхКредит = "ТЧ";
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		СтруктураПриходТМЦ.Вставить("СодержаниеПроводки","Доп. расходы при поступлении товаров");
		СтруктураПриходТМЦ.Вставить("Склад",новый Структура("СкладВШапке,ИмяРеквСклад",ложь,"Склад"));

		СтруктураПриходТМЦ.Вставить("СчетКт","СчетУчетаРасчетовСКонтрагентом");
		СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");
		СтруктураАналитикаКт.Вставить("Договоры","ДоговорКонтрагента");
		СтруктураАналитикаКт.Вставить("Сделки","#СделкаРегл#");
		
		СтруктураПриходТМЦ.Вставить("ВалютаКт","ВалютаДокумента");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		
		СтруктураПриходТМЦ.Вставить("СчетКт","СчетКт");
		СтруктураПриходТМЦ.Вставить("НалоговоеНазначениеКт", "НалоговоеНазначениеДоходовИЗатрат");
		
		СтруктураАналитикаКт.Вставить("Номер1","СубконтоКт1");
		СтруктураАналитикаКт.Вставить("Номер2","СубконтоКт2");
		СтруктураАналитикаКт.Вставить("Номер3","СубконтоКт3");
		
	КонецЕсли;
	
	СтруктураПриходТМЦ.Вставить("СубконтоДт",СтруктураАналитикаДт);
	СтруктураПриходТМЦ.Вставить("СубконтоКт",СтруктураАналитикаКт);
	СтруктураПриходТМЦ.Вставить("ИсточникДанныхДт",ИсточникДанныхДебет);
	СтруктураПриходТМЦ.Вставить("ИсточникДанныхКт",ИсточникДанныхКредит);

	СтруктураПараметрыПроводок.Вставить("ПриходТМЦ", СтруктураПриходТМЦ);
	
	Возврат СтруктураПараметрыПроводок;
	
КонецФункции // ПолучитьПараметрыПроводок

//Смартис Лиманчук начало 08.04.2013
Функция НайтиСотрудника(СтруктураШапкиДокумента) Экспорт

	СтруктураСотрудника = Новый Структура("Сотрудник,Организация");
	
	ТекстОшибки = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Физлицо", СтруктураШапкиДокумента.Физлицо);

	Запрос.Текст = "ВЫБРАТЬ Сотрудник,Организация ИЗ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, )
	               |ГДЕ Сотрудник.Физлицо = &Физлицо И ЗанимаемыхСтавок > 0
	               |УПОРЯДОЧИТЬ ПО Сотрудник.ВидЗанятости УБЫВ";

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
		СтруктураСотрудника.Сотрудник = Выборка.Сотрудник;
		СтруктураСотрудника.Организация = Выборка.Организация;
		Возврат СтруктураСотрудника;
	Иначе
		ТекстОшибки = "Для МОЛ "+СтруктураШапкиДокумента.Физлицо+" не найден работающий сотрудник!";
	КонецЕсли;

	Запрос.Текст = "ВЫБРАТЬ Сотрудник,Организация ИЗ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, )
	               |ГДЕ Сотрудник.Физлицо = &Физлицо
	               |УПОРЯДОЧИТЬ ПО Сотрудник.ВидЗанятости УБЫВ";

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
		СтруктураСотрудника.Сотрудник = Выборка.Сотрудник;
		СтруктураСотрудника.Организация = Выборка.Организация;
	Иначе
		СтруктураСотрудника.Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
		СтруктураСотрудника.Организация = Справочники.Организации.ПустаяСсылка();
		ТекстОшибки = "Для МОЛ "+СтруктураШапкиДокумента.Физлицо+" не найден сотрудник!";
	КонецЕсли;
	
	Если ТекстОшибки <> "" Тогда
		Сообщить(ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураСотрудника;
	
КонецФункции // НайтиСотрудника()
//Смартис Лиманчук окончание 08.04.2013

////////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕНИЕ ДОП РАСХОДОВ НА ПРИОБРЕТЕНИЕ

// Упр

// Распределение за период доп расходов на поступление товаров
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьРаспределениеДопРасходов(ДатаНачалаВосстановления, ДатаКонцаОбработки, СтОтборОстатков = Неопределено, Документ=Неопределено, ДатаДокумента=Неопределено) Экспорт
	
	// Остатки нераспределенных доп.расходов
	Если ТипЗнч(СтОтборОстатков) = Тип("Структура") Тогда
		ТабОстатков = РегистрыНакопления.ДопРасходыНаПриобретениеТоваров.Остатки(ДатаКонцаОбработки, СтОтборОстатков);
	Иначе
		ТабОстатков = РегистрыНакопления.ДопРасходыНаПриобретениеТоваров.Остатки(ДатаКонцаОбработки);
	КонецЕсли;
	
	// Поступление партий
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Парт.Номенклатура,
	|	Парт.Склад,
	|	Парт.ХарактеристикаНоменклатуры,
	|	Парт.СерияНоменклатуры,
	|	Парт.ДокументОприходования,
	|	Парт.СтатусПартии,
	|	Парт.Заказ,
	|	Парт.Качество,
	|	СУММА(Парт.Количество) КАК Количество,
	//|	СУММА(Парт.Стоимость) КАК Стоимость,
	|	Парт.Регистратор
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Парт
	|
	|ГДЕ
	|	Парт.КодОперации В(&СписокКодыОперации) И
	|	Парт.ВидДвижения = &ВидДвижения И
	|	Парт.Период МЕЖДУ &ДатаНач И &ДатаКон И
	|	Парт.Номенклатура В(&Номенклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	Парт.Номенклатура,
	|	Парт.Склад,
	|	Парт.ХарактеристикаНоменклатуры,
	|	Парт.СерияНоменклатуры,
	|	Парт.ДокументОприходования,
	|	Парт.СтатусПартии,
	|	Парт.Заказ,
	|	Парт.Качество,
	|	Парт.Регистратор");
	
	
	СписокКодыОперации = Новый Массив;
	СписокКодыОперации.Добавить(Перечисления.КодыОперацийПартииТоваров.Поступление);
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачалаВосстановления);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКонцаОбработки);
	Запрос.УстановитьПараметр("СписокКодыОперации", СписокКодыОперации);
	Запрос.УстановитьПараметр("Номенклатура", ТабОстатков.ВыгрузитьКолонку("Номенклатура"));
	
	ТабПоступлений = Запрос.Выполнить().Выгрузить();
	ТабПоступлений.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для Каждого СтрокаОстатка Из ТабОстатков Цикл
		
		НайдСтроки = ТабПоступлений.НайтиСтроки(Новый Структура(
		"Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", 
		СтрокаОстатка.Номенклатура, 
		СтрокаОстатка.ХарактеристикаНоменклатуры,
		СтрокаОстатка.СерияНоменклатуры));
		
		// База распределения - количество
		ВсегоКоличество = 0;
		Для Каждого Строка Из НайдСтроки Цикл
			ВсегоКоличество = ВсегоКоличество + Строка.Количество;
		КонецЦикла;
		
		СуммаРаспределить  = СтрокаОстатка.Сумма;
		КоличествоосталосьПогасить = ВсегоКоличество;
		
		Для Каждого Строка Из НайдСтроки Цикл
			
			Если НЕ (КоличествоосталосьПогасить > 0) Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = 1;
			Иначе
				КоэффСписания = Строка.Количество/КоличествоосталосьПогасить;
			КонецЕсли;
			
			Строка.Стоимость = СуммаРаспределить * КоэффСписания;
			
			КоличествоосталосьПогасить = КоличествоосталосьПогасить - Строка.Количество;
			
			СуммаРаспределить = СуммаРаспределить - Строка.Стоимость;
		КонецЦикла;
		
	КонецЦикла;
	
	// Запись в регистр
	Если Документ<>Неопределено Тогда
		
		// Партии
		НаборЗаписей = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Регистратор.Установить(Документ);
		
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабПоступлений, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеДопРасходов, "КодОперации");
		
		НаборЗаписей.мПериод = ДатаДокумента;
		
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
		
		НаборЗаписей.ВыполнитьПриход();
		
		НаборЗаписей.Записать();
		
		// Доп расходы
		НаборЗаписей = РегистрыНакопления.ДопРасходыНаПриобретениеТоваров.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Регистратор.Установить(Документ);
		
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		
		// Стоимостью является сумма
		ТабПоступлений.Колонки.Стоимость.Имя = "Сумма";
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабПоступлений, ТаблицаДвижений);
		
		НаборЗаписей.мПериод = ДатаДокумента;
		
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
		
		НаборЗаписей.ВыполнитьРасход();
		
		НаборЗаписей.Записать();
	КонецЕсли;

	
КонецПроцедуры // ВыполнитьРаспределениеДопРасходов(ДатаНачалаВосстановления, ДатаКонцаОбработки)

// Функция определяет признак ведения суммового учета по складам на конкретном счете учета.
//
Функция ВедетсяСуммовойУчетПоСкладам(Счет) Экспорт

	УчетПоСкладам = Ложь;

	СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто");

	Если СтрокаВидаСубконто <> Неопределено Тогда
		УчетПоСкладам = СтрокаВидаСубконто.Суммовой;
	КонецЕсли;

	Возврат УчетПоСкладам;

КонецФункции // ВедетсяСуммовойУчетПоСкладам()

// Функция применяется при необходимости получить сведения о параметрах партионного учета.
//
// Параметры:
// нет.
//
// Возвращаемое значение - структура, содержащая константы относящиеся к параметрам партионного учета. 
//
Функция ПолучитьПараметрыПартионногоУчета() Экспорт
	
	СтруктураПараметровПартионногоУчета = Новый Структура();
	СтруктураПараметровПартионногоУчета.Вставить("СписыватьПартииПриПроведенииДокументов",Константы.СписыватьПартииПриПроведенииДокументов.Получить());
	СтруктураПараметровПартионногоУчета.Вставить("СписыватьПартииПриПроведенииДокументовБух",Константы.СписыватьПартииПриПроведенииДокументовБух.Получить());
	СтруктураПараметровПартионногоУчета.Вставить("СписыватьПартииПриПроведенииДокументовНал",СтруктураПараметровПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух);
	СтруктураПараметровПартионногоУчета.Вставить("СтратегияСписанияПартийТоваровПоСтатусам",Константы.СтратегияСписанияПартийТоваровПоСтатусам.Получить());
	СтруктураПараметровПартионногоУчета.Вставить("ВестиПартионныйУчетПоСкладам",Константы.ВестиПартионныйУчетПоСкладам.Получить());
	СтруктураПараметровПартионногоУчета.Вставить("ВестиПартионныйУчетПоСкладамРегл",Константы.ВестиПартионныйУчетПоСкладамРегл.Получить());
	
	Возврат СтруктураПараметровПартионногоУчета;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРАЦИЯ В ПОСЛЕДОВАТЕЛЬНОСТЯХ

Процедура ЗарегистрироватьДокументВПоследовательностяхПартионногоУчетаНаСервере(Ссылка, Дата, Организация = Неопределено, Упр=Ложь, Бух = Ложь, СпособВеденияПартионногоУчетаПоОрганизации=Неопределено, ТаблицаСтаройРегистрацииВПоследовательности = Неопределено) Экспорт
	
	ТаблицаПоследовательностейДляРегистрации = Новый ТаблицаЗначений();
	ТаблицаПоследовательностейДляРегистрации.Колонки.Добавить("ИмяПоследовательности");
	ТаблицаПоследовательностейДляРегистрации.Колонки.Добавить("Организация");
	
	
	Если Упр Тогда
		
		Если СпособВеденияПартионногоУчетаПоОрганизации = Неопределено Тогда
			СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, Дата);
		Иначе
			СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = СпособВеденияПартионногоУчетаПоОрганизации;
		КонецЕсли;	
		
		Если СпособВеденияПартионногоУчетаПоОрганизацииДляУУ <> Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется Тогда
			НоваяСтрока = ТаблицаПоследовательностейДляРегистрации.Добавить();
			НоваяСтрока.ИмяПоследовательности = "ПартионныйУчет";
			НоваяСтрока.Организация = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ);
		КонецЕсли;
	КонецЕсли;	
	
	Если Бух Тогда
		НоваяСтрока = ТаблицаПоследовательностейДляРегистрации.Добавить();
		НоваяСтрока.ИмяПоследовательности = "ПартионныйУчетБУ";
		НоваяСтрока.Организация = Организация;
	КонецЕсли;	
	
	
	Если ТаблицаСтаройРегистрацииВПоследовательности <> Неопределено
	  И ТаблицаСтаройРегистрацииВПоследовательности.Количество() > 0 Тогда
		//Документ перепроводиться и уже был зарегистрирован в последовательности ранее  
		СдвинутьГраницуПоследовательностиНазад(Дата, Ссылка, ТаблицаСтаройРегистрацииВПоследовательности, ТаблицаПоследовательностейДляРегистрации);
	КонецЕсли;
		
	Для Каждого ТекущееСостояние Из ТаблицаПоследовательностейДляРегистрации Цикл
		//В таблице значений может быть только по одной строке на каждую последовательность
		НаборЗаписейПоследовательности = Последовательности[ТекущееСостояние.ИмяПоследовательности].СоздатьНаборЗаписей();
		НаборЗаписейПоследовательности.Отбор.Регистратор.Установить(Ссылка);
		НоваяЗапись = НаборЗаписейПоследовательности.Добавить();
		НоваяЗапись.Период      = Дата;
		НоваяЗапись.Организация = ТекущееСостояние.Организация;
		НоваяЗапись.Регистратор = Ссылка;
		НаборЗаписейПоследовательности.Записать();
	КонецЦикла;	
		
КонецПроцедуры	

Процедура УдалитьРегистрациюДокументаВПоследовательностяхНаСервере(ДокументСсылка, ПроверятьДвижения,ТаблицаСтаройРегистрацииВПоследовательности)Экспорт
	// получение списка последовательностей в которых зарегистрирован документ
	Если ПроверятьДвижения Тогда
		ТаблицаРегистраций = ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументСсылка);
		Для Каждого СтрокаТаблицыРегистрацииВПоследовательности Из ТаблицаРегистраций Цикл
			НаборЗаписейРегистрацииВПоследовательности = Последовательности[СтрокаТаблицыРегистрацииВПоследовательности.Имя].СоздатьНаборЗаписей();  
			НаборЗаписейРегистрацииВПоследовательности.Отбор.Регистратор.Установить(ДокументСсылка);
			Если СтрокаТаблицыРегистрацииВПоследовательности.Имя = "ПартионныйУчет"  
			  ИЛИ СтрокаТаблицыРегистрацииВПоследовательности.Имя = "ПартионныйУчетБУ" Тогда
				НаборЗаписейРегистрацииВПоследовательности.Прочитать();
				Для Каждого ЗаписьВПоследовательности Из НаборЗаписейРегистрацииВПоследовательности Цикл
					НоваяЗаписьРегистрации = ТаблицаСтаройРегистрацииВПоследовательности.Добавить();
					НоваяЗаписьРегистрации.ИмяПоследовательности = СтрокаТаблицыРегистрацииВПоследовательности.Имя;
					НоваяЗаписьРегистрации.Организация = ЗаписьВПоследовательности.Организация;
					НоваяЗаписьРегистрации.Период = ЗаписьВПоследовательности.Период;
				КонецЦикла;	
				НаборЗаписейРегистрацииВПоследовательности.Очистить();
			КонецЕсли;	
			НаборЗаписейРегистрацииВПоследовательности.Записать();
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры//УдалитьРегистрациюДокументаВПоследовательностях

Функция ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументСсылка)
	ТекстЗапроса = "";	
	
	КоллекцияПоследовательностей = Метаданные.Последовательности;
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Для Каждого Последовательность ИЗ КоллекцияПоследовательностей Цикл
		Если Последовательность.Документы.Содержит(МетаданныеДокумента) Тогда
			// в запросе получаем имена последовательностей, в которых документ зарегистрирован
			ТекстЗапроса = ТекстЗапроса + "
			|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ """ + Последовательность.Имя 
			+  """ КАК Имя ИЗ " + Последовательность.ПолноеИмя()  
			+ " ГДЕ Регистратор = &Регистратор";
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений();
	Иначе	
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		
		Возврат ТаблицаЗапроса;
	КонецЕсли;	
	
КонецФункции//ОпределитьНаличиеРегистрацииДокументаВПоследовательности

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ "ПАРТИИ ТОВАРОВ НА СКЛАДАХ"

// Процедура формирует движения по регистру "Партии товаров на складах".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	КодОперацииПартииТоваров - ПеречислениеСсылка.КодыОперацийПартииТоваров - Код операции
//	Количество - Число - Количество номенклатуры
//	Стоимость - Число - Учетная стоимость выпуска
//	ПостояннаяРазница - Число - Учетная стоимость выпуска в части постоянной разницы
//	ВременнаяРазница - Число - Учетная стоимость выпуска в части временной разницы
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	НаборЗаписейПартииТоваровНаСкладах - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Партии товаров на складах".
//
Процедура СформироватьСтрокуДвиженияПоРегиструПартииТоваровНаСкладах(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	КодОперацииПартииТоваров,
	Количество,
	Стоимость,
	СтоимостьНУ,
	НДСВходящий,
	НДСКредит,
	ВидОтраженияВУчете,
	НаборЗаписейПартииТоваровНаСкладах
	) Экспорт
	
	Если Количество = 0 
	   И Стоимость = 0
	   И СтоимостьНУ = 0
	   И НДСВходящий = 0
	   И НДСКредит = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Партии товаров на складах" должны быть заполнены измерения:
	//	- Номенклатура,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Склад - заполняется, если ведется суммовой учет по складам
	//		склад не заполняется для продукции, выпущенной из давальческого сырья (при указании заказа покупателя: переработка),
	//	- ХарактеристикаНоменклатуры,
	//	- СерияНоменклатуры - заполняется, если ведется партионный учет по сериям,
	//	- ДокументОприходования - заполняется, если не используется способ списания МПЗ "По средней",
	//	- СтатусПартии - заполняется только при отражении документа в управленческом учете,
	//	- Заказ - заполняется, если в заказе покупателя указан договор с установленным флажком "Вести учет товаров по заказам покупателей"
	//		или если указан заказ покупателя: переработка.
	//	- Качество.
	//
	// В движениях должны быть заполнены реквизиты:
	//	- КодОперации - записывается код операции "Выпуск по операции стоимость",
	//	- ДокументДвижения - документ, движения которого корректируются по фактической стоимости.
	
	// Сформируем движение по регистру "Партии товаров на складах".
	НоваяСтрока = НаборЗаписейПартииТоваровНаСкладах.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	Если Не СтрокаВыборки.ВестиПартионныйУчетПоСериям Тогда
		НоваяСтрока.СерияНоменклатуры = Неопределено;
	КонецЕсли;

	// Заполнение заказа зависит от вида отражения в учете.
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		
		ОрганизацияУпр = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(
			СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации
		);
		НоваяСтрока.Организация = ОрганизацияУпр;
		
		Если КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру Тогда
			НоваяСтрока.ДокументОприходования = СтрокаВыборки.ПриходныйОрдер;
			
		ИначеЕсли Не СтруктураШапкиДокумента.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
			НоваяСтрока.ДокументОприходования = СтрокаВыборки.ДокументВыпуска;
			
		КонецЕсли;
		
		Если КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру Тогда
			НоваяСтрока.СтатусПартии = Перечисления.СтатусыПартийТоваров.ПоОрдеру;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаВыборки.СтатусПартии) Тогда
			НоваяСтрока.СтатусПартии = СтрокаВыборки.СтатусПартии;
			
		Иначе
			НоваяСтрока.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
			
		КонецЕсли;
		
		Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам
		   И (Не СтрокаВыборки.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка
			ИЛИ КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзПроизводстваРасч
			ИЛИ КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзПроизводстваФикс
			ИЛИ КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВыпускПродукцииФиксНаСклад)
		Тогда
			НоваяСтрока.Склад = СтрокаВыборки.СкладПолучатель;
		КонецЕсли;
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		  
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		
		Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл
		   И (Не СтрокаВыборки.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка
			ИЛИ КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзПроизводстваРасч
			ИЛИ КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзПроизводстваФикс
			ИЛИ КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВыпускПродукцииФиксНаСклад)
		Тогда
			НоваяСтрока.Склад = СтрокаВыборки.СкладПолучатель;
		КонецЕсли;
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
			НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;
			
			Если Не СтруктураШапкиДокумента.СпособОценкиМПЗБух = Перечисления.СпособыОценки.ПоСредней Тогда
				НоваяСтрока.ДокументОприходования = СтрокаВыборки.ДокументВыпуска;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаВыборки.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка
	 ИЛИ СтрокаВыборки.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
		НоваяСтрока.Заказ = СтрокаВыборки.ЗаказРезерв;
	Иначе
		НоваяСтрока.Заказ = Неопределено;
	КонецЕсли;
	
	НоваяСтрока.КодОперации = КодОперацииПартииТоваров;
	НоваяСтрока.ДокументДвижения = СтрокаВыборки.ДокументВыпуска;
	НоваяСтрока.СписаниеПартий = Истина;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Стоимость = Стоимость;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете 
		И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СтоимостьНУ = СтоимостьНУ;
		НоваяСтрока.НДСВходящий = НДСВходящий;
		НоваяСтрока.НДСКредит   = НДСКредит;
		Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(); 
			НоваяСтрока.СтоимостьНУ = 0;
			НоваяСтрока.НДСВходящий = 0;
			НоваяСтрока.НДСКредит   = 0;
		КонецЕсли;	
	КонецЕсли;	
	
	
КонецПроцедуры // СформироватьСтрокуДвиженияПоРегиструПартииТоваровНаСкладах()



Процедура УдалитьЗабалансовыеСуммы(ТаблицаЗначений)
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТаблицаЗначений.Колонки.Найти("Забалансовый") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Забалансовый", Истина);
	НайденныеСтроки = ТаблицаЗначений.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТаблицаЗначений.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОРРЕКТИРОВКИ НАЛОГОВОГО КРЕДИТА И ВАЛОВЫХ РАСХОДОВ

// Нал

Функция ЭтоВложенияВОбъектыСтроительства(СтрокаДокумента) Экспорт

	Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаВложенияВоВнеоборотныеАктивы 
	 ИЛИ СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаОборудованияВМонтаж Тогда			
		
		Возврат Истина; 
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 
		
КонецФункции // ЭтоВложенияВОбъектыСтроительства()

Функция ПолучитьМассивКодыОперацийВыбытиеПартий()
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	КодыОперацийВыбытиеПартий = Новый Массив;	
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.ВозвратПоставщику);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.Комплектация);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.Реализация);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.СписаниеПоИнвентаризации);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.СписаниеПоОрдеру);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.РеализацияКомиссия);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.ПередачаМатериаловВЭксплуатацию);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.РеализацияРозница);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.ПередачаТарыКонтрагенту);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.ПринятиеКУчетуОС);
// ЭтоВложенияВОбъектыСтроительства()
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.СписаниеНаВложенияВоВнеоборотныеАктивы);
	
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.ПередачаНаКомиссию);
	
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.СписаниеПартийВПроизводствоОперативно);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.СписаниеНаЗатраты);
	КодыОперацийВыбытиеПартий.Добавить(КодыОпераций.СписаниеНаБрак);
	
	Возврат КодыОперацийВыбытиеПартий;

КонецФункции // ПолучитьМассивКодыОперацийВыбытиеПартий()
 
Функция ЭтоВыбытиеПартий(СтрокаДокумента) Экспорт

	КодыОперацийВыбытиеПартий = ПолучитьМассивКодыОперацийВыбытиеПартий();
	Для каждого КодОперации Из КодыОперацийВыбытиеПартий Цикл
		Если СтрокаДокумента.КодОперацииПартииТоваров = КодОперации Тогда
			Возврат Истина; 
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь; 
	
		
КонецФункции // ЭтоВыбытиеПартий()

Функция ПолучитьМассивКодыОперацийПеремещение()
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	КодыОперацийПеремещение = Новый Массив;	
	КодыОперацийПеремещение.Добавить(КодыОпераций.ПеремещениеМеждуСкладами);
	
	КодыОперацийПеремещение.Добавить(КодыОпераций.СписаниеПартийВПроизводствоОперативно);
	КодыОперацийПеремещение.Добавить(КодыОпераций.СписаниеНаВложенияВоВнеоборотныеАктивы);
	КодыОперацийПеремещение.Добавить(КодыОпераций.ПередачаОборудованияВМонтаж);
	
	Возврат КодыОперацийПеремещение;

КонецФункции // ПолучитьМассивКодыОперацийВыбытиеПартий()

// Корректировка кредита по НДС при использовании партий
Процедура КорректировкаНалоговогоКредитаПриИспользованииПартий(СтрокаДокумента, СтруктураПараметров, ДвижениеТовары) Экспорт
	
	Если НЕ СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураКорректировкаНДСКредит = НалоговыйУчет.ПолучитьСуммуКорректировкиНалоговогоКредита(
		ДвижениеТовары.НалоговоеНазначение,
		ДвижениеТовары.НалоговоеНазначениеПоФакту,
		ДвижениеТовары.НДСВходящий,
		ДвижениеТовары.НДСКредит,
		ДвижениеТовары.Стоимость
	);
		
	Если НЕ СтруктураКорректировкаНДСКредит.ЕстьКорректировки Тогда
		Возврат;
	КонецЕсли; 	
		
	КорректировкаНДСКредит        = СтруктураКорректировкаНДСКредит.КорректировкаНДСКредит;
	НДСКредитПоФакту              = СтруктураКорректировкаНДСКредит.НДСКредитПоФакту;
	СуммаКорректировкиСтоимость   = СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимость;
	СуммаКорректировкиСтоимостьНУ = СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимостьНУ;
	
	// движения по регистру КорректировкиПартииТоваровНалоговыйУчет делаем всегда, даже если сумма = 0, необходимо правильно заполнить количество
	
	// добавим движение в регистр КорректировкиПартииТоваровНал
	Движение = ДобавитьДвижениеВСтруктуруПараметров("КорректировкиПартииТоваровНал", СтруктураПараметров);
	
	// Свойства
	Движение.Период			= СтруктураПараметров.Период;
	Движение.Регистратор	= СтруктураПараметров.Регистратор;
	Движение.Активность		= Истина;
	
	Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
	
	// Измерения
	Движение.Номенклатура 				= ДвижениеТовары.Номенклатура;
	Движение.ХарактеристикаНоменклатуры = ДвижениеТовары.ХарактеристикаНоменклатуры;
	Движение.Организация 				= ДвижениеТовары.Организация;
	Движение.ДокументОприходования 		= ДвижениеТовары.ДокументОприходования;
	
	Движение.НалоговоеНазначение 		= ДвижениеТовары.НалоговоеНазначение;
	Если ДвижениеТовары.НалоговоеНазначениеПоФакту = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
	    Движение.НалоговоеНазначениеПоФакту = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
	Иначе
		Движение.НалоговоеНазначениеПоФакту = ДвижениеТовары.НалоговоеНазначениеПоФакту;	
	КонецЕсли; 
	
	// Ресурсы
	Движение.НДСКредит 		  = ДвижениеТовары.НДСКредит;
	Движение.Количество		  = ДвижениеТовары.Количество;
	Движение.НДСКредитПоФакту = НДСКредитПоФакту;
	// Реквизиты
	Движение.НомерКорСтроки = СтруктураПараметров.ТекНомерСтрокиКорректировкиПартииТоваровНал;
	Движение.СписаниеПартий = Истина;
	
	Движение.КодОперации = Перечисления.КодыОперацийКорректировкиИспользованияНалоговыйУчет.ПредполагаемаяКорректрировка;
	
	// отcторнируем стоимость БУ и НУ, а также НДСКредит на сумму корректировки НДС по кор. регистрам
	Если КорректировкаНДСКредит <> 0 Тогда
		
		СохранитьКоличество 	= 	ДвижениеТовары.Количество;
		СохранитьСтоимость 		= 	ДвижениеТовары.Стоимость;
		СохранитьСтоимостьНУ	= 	ДвижениеТовары.СтоимостьНУ;
		СохранитьНДСВходящий 	= 	ДвижениеТовары.НДСВходящий;
		СохранитьНДСКредит 		= 	ДвижениеТовары.НДСКредит;
		
		СохранитьКоличествоПоступление = СтрокаДокумента.КоличествоПоступление;
		
		ДвижениеТовары.Количество   = 0;
		ДвижениеТовары.Стоимость    = СуммаКорректировкиСтоимость;
		ДвижениеТовары.СтоимостьНУ	= СуммаКорректировкиСтоимостьНУ;
		ДвижениеТовары.НДСВходящий	= 0;
		// НДСКредит сторнируем всегда
		ДвижениеТовары.НДСКредит	= + КорректировкаНДСКредит;
		
		СтрокаДокумента.КоличествоПоступление = 0;
		
		
		КорректировкаСтоимости.ВыполнитьКорДвижение(ПолучитьИсточникПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров), СтрокаДокумента, СтруктураПараметров, ДвижениеТовары, Истина);
		
		// Вернем сохранённые значения 
		ДвижениеТовары.Количество	= СохранитьКоличество;
		ДвижениеТовары.Стоимость	= СохранитьСтоимость;
		ДвижениеТовары.СтоимостьНУ	= СохранитьСтоимостьНУ;
		ДвижениеТовары.НДСВходящий	= СохранитьНДСВходящий;
		ДвижениеТовары.НДСКредит	= СохранитьНДСКредит;
		
		СтрокаДокумента.КоличествоПоступление = СохранитьКоличествоПоступление;
		
	КонецЕсли; 
	
	// отcторнируем стоимость БУ и НУ на сумму корректировки НДС по проводкам БУ
	// сторнируем только когда восстанавливаем НДС
	Если СтруктураКорректировкаНДСКредит.ВосстановлениеНДС Тогда
		
		Если ЗначениеЗаполнено(СтрокаДокумента.КорСчетБУ) Тогда
			
			// сделаем корректировочную проводку на сумму НК, по бухгалтерскому учету
			Проводка = СтруктураПараметров["ДвиженияХозрасчетный"].Добавить();
			
			Проводка.Период        = СтруктураПараметров.Период;
			Проводка.Регистратор   = СтруктураПараметров.Регистратор;
			Проводка.Активность    = Истина;
			Проводка.Организация   = СтрокаДокумента.Организация;
			
			Проводка.СписаниеПартий= Истина;
			
			// проводка вида Кт Кор. счет запасов Кт 6443 Сторно
			Проводка.СчетДт    	   = СтрокаДокумента.КорСчетБУ;
			Проводка.СчетКт        = ПланыСчетов.Хозрасчетный.КорректировкиНалоговогоКредита;
			
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ЗаполнитьСубконтоПоСписаниюТоваровРегл(Проводка, СтрокаДокумента, ДвижениеТовары, СтруктураПараметров, "Бух");
			
			Проводка.Сумма         = СуммаКорректировкиСтоимость;
			Проводка.СуммаНУДт     = СуммаКорректировкиСтоимостьНУ;
			
			Проводка.НалоговоеНазначениеДт  = ДвижениеТовары.НалоговоеНазначениеПоФакту;
			
			Проводка.Содержание    = "Корректировка налогового кредита при использовании запасов";
			
			Проводка.НомерЖурнала  = "";
			
			СтруктураПараметров["ИзмененыДвиженияХозрасчетный"] = Истина;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // КорректировкаНалоговогоКредитаПриИспользованииПартий

Процедура ВложенияВоВнеоборотныеАктивыБух(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Бух";
	
	Если Строка.Стоимость = 0 И Строка.СтоимостьНУ = 0 И Строка.НДСВходящий = 0 И Строка.НДСКредит = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Движение по регистру накопления стоимости объектов строительства
	Движение = ДобавитьДвижениеВСтруктуруПараметров("СтроительствоОбъектовОсновныхСредствБух", СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность = Истина;
	
	Движение.ВидДвижения         = ВидДвиженияНакопления.Приход;
	
	Движение.Организация 		 = Строка.Организация;
	Движение.ОбъектСтроительства = СтрокаДокумента.ОбъектСтроительства;
	Движение.СчетУчета           = СтрокаДокумента.КорСчетБУ;
	Движение.НалоговоеНазначение = СтрокаДокумента.НалоговоеНазначениеНовое;
		
	Движение.Стоимость   = Строка.Стоимость;
	Движение.СтоимостьНУ = НалоговыйУчет.ОпределитьСтоимостьНУ(Движение.НалоговоеНазначение, Строка.СтоимостьНУ);
	Движение.НДСВходящий = Строка.НДСВходящий;
	Движение.НДСКредит 	 = Строка.НДСКредит;
	
	// Реквизиты
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиСтроительствоОбъектовОсновныхСредствБух"];
	
КонецПроцедуры //ВложенияВоВнеоборотныеАктивыБух 


////////////////////////////////////////////////////////////////////////////////
// СПЕЦИФИЧЕСКИЕ ПРОЦЕДУРЫ ДВИЖЕНИЯ ПАРТИЙ ДЛЯ ОПРЕДЕЛЕННЫХ ВИДОВ ДОКУМЕНТОВ

//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Предыдущий документ реализации
//
Функция ПредыдущийДокументРеализации(СтрокаДокумента)
	
	
	// Ищем документ того же типа, выписанный с того же склада
	ТипДок = ТипЗнч(СтрокаДокумента.Регистратор);
	
	МетаДок = Метаданные.НайтиПоТипу(ТипДок);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписанныеТовары.Регистратор
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|
	|ГДЕ
	|	СписанныеТовары.Номенклатура = &Номенклатура И
	|	СписанныеТовары.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры И
	|	СписанныеТовары.СерияНоменклатуры = &СерияНоменклатуры И
	|	СписанныеТовары.Склад = &Склад И
	|	СписанныеТовары.Количество >= &Количество И
	|	СписанныеТовары.КодОперацииПартииТоваров = ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.РеализацияРозница) И 
	|	СписанныеТовары.Период < &Период И
	|	(СписанныеТовары.Регистратор ССЫЛКА Документ."+МетаДок.Имя+")
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписанныеТовары.Период УБЫВ");
	
	Запрос.УстановитьПараметр("Номенклатура", СтрокаДокумента.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
	Запрос.УстановитьПараметр("Склад", СтрокаДокумента.Склад);
	Запрос.УстановитьПараметр("Количество", СтрокаДокумента.Количество);
	Запрос.УстановитьПараметр("Период", СтрокаДокумента.Период);
	Запрос.УстановитьПараметр("Регистратор", СтрокаДокумента.Регистратор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Регистратор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПредыдущийДокументРеализации()

// Переоценка товаров по бухгалтерскому учету
//
Процедура РегламентнаяПереоценкаЗапасов(СтрокаДокумента, СтруктураПараметров)
	
	
	Учет = "Бух";
	
	НоваяЦена = СтрокаДокумента.СтоимостьПоступлениеБУ;
	КоличествоПереоценено = 0;
	
	// Партии для данного учета
	ИмяРегистра = ПолучитьИмяРегистра("ПартииТоваров", "НаСкладах", СтрокаДокумента);
	
	// Если нет регистра, по которому списываем, тогда пропускаем
	Если ИмяРегистра="" Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоПартий = СтруктураПараметров["Дерево"+ИмяРегистра];
	
	СтруктураИзмерений = СтруктураПараметров[ИмяРегистра + "СтруктураИзмерений"];
	ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистра + "ТаблицаОстатков"];
	
	СтрокаДереваПартий = ДеревоПартий.Строки.Найти(СтрокаДокумента.НомерСтрокиДокумента, "НомерСтрокиДокумента");
	
	Если СтрокаДереваПартий <> Неопределено Тогда
		
		Для Каждого СтрокаПартииРаспределения ИЗ СтрокаДереваПартий.Строки Цикл
			
			СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий);
			
			// Количество по строке больше 0
			Если НЕ СтрокаПартии.Количество > 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			//Проверим, нужно ли переоценивать
			НоваяСтоимость = СтрокаПартии.Количество * НоваяЦена;
			
			СуммаУценкиИзменение = СтрокаПартии.Стоимость - НоваяСтоимость; // расчитаем сумму уценки
			Если СуммаУценкиИзменение < 0 Тогда
				// если это сторно уценки, то его можно сделать на меньшую из двух сумм
				// накопленная сумма уценки по данной партии и суммой на которую выполняется сторнирование уценки
				
				СуммаУценкиИзменение = - Мин(СтрокаПартии.СуммаУценки,-СуммаУценкиИзменение)
			КонецЕсли;
			
			Если СуммаУценкиИзменение = 0 Тогда
				// нет смысла переоценивать
				Продолжить;
			КонецЕсли; 
			
			КоличествоПереоценено = КоличествоПереоценено + СтрокаПартии.Количество;
			// Добавим новую строку
		
			// 1. Списание
			Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров);
		
			// Свойства
			Движение.Период 				= СтрокаДокумента.Период;
			Движение.Регистратор 			= СтрокаДокумента.Регистратор;
			Движение.Активность 			= Истина;
			Движение.ВидДвижения 			= ВидДвиженияНакопления.Расход;
			
			// Заполнение полей, специфических для учета
			
			Движение.Номенклатура 			= СтрокаПартии.Номенклатура;
			Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
			Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;
			Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;
			Движение.Склад 			        = СтрокаПартии.Склад;
			Движение.Заказ  				= СтрокаПартии.Заказ;
			Движение.Качество  				= СтрокаПартии.Качество;
			
			Движение.СчетУчета		= СтрокаПартии.СчетУчета;
			Движение.Организация	= СтрокаПартии.Организация;
			
			// Ресурсы 
			Движение.Количество	= СтрокаПартии.Количество;
			Движение.Стоимость	= СтрокаПартии.Стоимость;
			
			Движение.СуммаУценки	= СтрокаПартии.СуммаУценки;
		
			// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
			Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;
		
			// Реквизиты
			Движение.СписаниеПартий 	= Истина;
			
			Движение.КодОперации			= СтрокаДокумента.КодОперацииПартииТоваров;
		
			// "вычтем" списанные суммы
			СтрокаПартии.Количество = 0;
			СтрокаПартии.Стоимость  = 0;
			
			СтрокаПартии.СуммаУценки = 0;
		
			// Движение приход
			
			Строка = Движение;
			
			Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
			
			// Свойства
			Движение.Период 				= СтрокаДокумента.Период;
			Движение.Регистратор 			= СтрокаДокумента.Регистратор;
			Движение.Активность 			= Истина;
			Движение.ВидДвижения 			= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.Номенклатура 			= Строка.Номенклатура;
			Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			Движение.СерияНоменклатуры 		= Строка.СерияНоменклатуры;
			Движение.ДокументОприходования	= Строка.ДокументОприходования;
			Движение.Склад 			        = Строка.Склад;
			Движение.Заказ  				= Строка.Заказ;
			Движение.Качество  				= Строка.Качество;
			
			Движение.СчетУчета		= Строка.СчетУчета;
			Движение.Организация	= Строка.Организация;
				
			// Ресурсы 
			Движение.Количество	= Строка.Количество;
			Движение.Стоимость	= НоваяСтоимость;
			
			Движение.СуммаУценки = Строка.СуммаУценки + СуммаУценкиИзменение;
				
			// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
			Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;
			
			// Реквизиты
			Движение.СписаниеПартий 	= Истина;
			Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;
			
			Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровНаСкладах"+Учет];
		
			// ещё нужно выполнить проводки по списанию на затраты
			СохранитьКоличество = Строка.Количество;
			СохранитьСтоимость = Строка.Стоимость;
			
			Строка.Количество = 0;
			Строка.Стоимость  = СуммаУценкиИзменение;
		
			ДобавленноеДвижениеЗатраты = Неопределено;
			ДобавленнаяПроводка = Неопределено;
			
			СписыватьИз  = ПолучитьИсточникПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров);
			ПриходоватьВ = ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров, СтрокаДокумента.СтатьяЗатрат);
			
			Если ПриходоватьВ = "ОбщепроизводственныеРасходы" 
				ИЛИ ПриходоватьВ = "АдминистративныеРасходы"
				ИЛИ ПриходоватьВ = "РасходыНаСбыт"
				ИЛИ ПриходоватьВ = "ПрочиеОперационныеРасходы" Тогда
			
				СписаниеНаПостоянныеЗатратыБух(СтрокаДокумента, СтруктураПараметров, Строка);
				
				// берем последнюю строку
				ДобавленноеДвижениеЗатраты = СтруктураПараметров.ТаблицаДвиженийЗатратыБух[СтруктураПараметров.ТаблицаДвиженийЗатратыБух.Количество()-1];
				
			КонецЕсли; 		
		
			// Формирование проводки по бух учету
			УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СписаниеНаСчетБух(СписыватьИз, СтрокаДокумента, СтруктураПараметров, Строка);
			
			// берем последнюю строку
			ДобавленнаяПроводка = СтруктураПараметров.ДвиженияХозрасчетный[СтруктураПараметров.ДвиженияХозрасчетный.Количество()-1];
		
			// Переоценка регламентная, поэтому затраты нужно сразу списать на 
			// результаты деятельности
			
			Если НЕ ДобавленноеДвижениеЗатраты = Неопределено Тогда
			
				Движение = ДобавитьДвижениеВСтруктуруПараметров("Затраты"+Учет, СтруктураПараметров);
				
				// Свойства
				Движение.Период      = ДобавленноеДвижениеЗатраты.Период;
				Движение.Регистратор = ДобавленноеДвижениеЗатраты.Регистратор;
				Движение.Активность  = ДобавленноеДвижениеЗатраты.Активность;
				
				Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
				
				Движение.Подразделение 			= ДобавленноеДвижениеЗатраты.Подразделение;
				Движение.НоменклатурнаяГруппа 	= ДобавленноеДвижениеЗатраты.НоменклатурнаяГруппа;
				Движение.СчетУчета              = ДобавленноеДвижениеЗатраты.СчетУчета;
				Движение.СтатьяЗатрат 			= ДобавленноеДвижениеЗатраты.СтатьяЗатрат;
				Движение.Заказ  				= ДобавленноеДвижениеЗатраты.Заказ;
				
				// Ресурсы
				Движение.Сумма				    = ДобавленноеДвижениеЗатраты.Сумма;
				
				// Реквизиты
				Движение.СписаниеПартий 		= Истина;
				Движение.КодОперации		    = ДобавленноеДвижениеЗатраты.КодОперации; 
				
				Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиЗатраты"+Учет];
			
			КонецЕсли; 
			
			Если НЕ ДобавленнаяПроводка = Неопределено Тогда
			
				Проводка = СтруктураПараметров["ДвиженияХозрасчетный"].Добавить();
		
				Проводка.Период        = ДобавленнаяПроводка.Период;
				Проводка.Регистратор   = ДобавленнаяПроводка.Регистратор;
				Проводка.Активность    = ДобавленнаяПроводка.Активность;
				Проводка.Организация   = ДобавленнаяПроводка.Организация;
				
				Проводка.СписаниеПартий = Истина;
				
				Проводка.СчетДт    	   = ПланыСчетов.Хозрасчетный.РезультатОперационнойДеятельности;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения"       , СтрокаДокумента.ПодразделениеОрганизации);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаДокумента.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат"        , СтрокаДокумента.СтатьяЗатрат);
				
				//счет затрат 
				Проводка.СчетКт        = ДобавленнаяПроводка.СчетДт;
				
				Для каждого ВидСубконто Из ДобавленнаяПроводка.СчетДт.ВидыСубконто Цикл
				
					Проводка.СубконтоКт[ВидСубконто.ВидСубконто] = ДобавленнаяПроводка.СубконтоДт[ВидСубконто.ВидСубконто];
				
				КонецЦикла; 
				
				Проводка.Сумма         = ДобавленнаяПроводка.Сумма;
				
				Проводка.Содержание    = "Списание прочих операционных расходов";
			
			КонецЕсли; 
			
			// вернём в движении по партиям всё обратно
			Строка.Количество = СохранитьКоличество;
			Строка.Стоимость  = СохранитьСтоимость;
		
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоПереоценено = 0 Тогда
		// нужно сообщить об ошибке  
		ОбщегоНазначения.СообщитьОбОшибке(""+Учет+" учет. Документ " + СтрокаДокумента.Регистратор + ", строка :" + СтрокаДокумента.НомерСтроки + Символы.ПС
		+ "Не выполнена переоценка товара " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
		+ ", качество: " + СтрокаДокумента.Качество
		+ ?(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", Учет, СтруктураПараметров) = Истина, ", по складу: " + СтрокаДокумента.Склад, "")
		+ ", счет учета " + СтрокаДокумента.СчетУчетаБУ
		);
		СтруктураПараметров.Вставить("Отказ", Истина);
	
	КонецЕсли; 
КонецПроцедуры // РегламентнаяПереоценкаЗапасов()

Процедура СдвинутьГраницуПоследовательностиНазад(Дата, Ссылка, ТаблицаСтаройРегистрацииВПоследовательности, ТаблицаПоследовательностейДляРегистрации = Неопределено) Экспорт
	Для Каждого ТекущееСтароеСостояние Из ТаблицаСтаройРегистрацииВПоследовательности Цикл
		Если Дата > ТекущееСтароеСостояние.Период  //Дата документа при перепроведении увеличилась
		  ИЛИ ТаблицаПоследовательностейДляРегистрации = Неопределено //Отмена проведения документа
		  ИЛИ ТаблицаПоследовательностейДляРегистрации.НайтиСтроки(Новый Структура("ИмяПоследовательности, Организация", ТекущееСтароеСостояние.ИмяПоследовательности, ТекущееСтароеСостояние.Организация)).Количество() = 0//Изменились организация или признаки отражения в учете
		Тогда
			//Состояние изменилось, нужно передвинуть границу последовательности на старое состояние
			ОтборГраницы = Новый Структура("Организация, ПроведенВХронологическойПоследовательности",ТекущееСтароеСостояние.Организация, Ложь);
			СтараяГраница = Последовательности[ТекущееСтароеСостояние.ИмяПоследовательности].ПолучитьГраницу(ОтборГраницы);
			Если СтараяГраница.Сравнить(Новый МоментВремени(ТекущееСтароеСостояние.Период, Ссылка)) = 1 Тогда
				Последовательности[ТекущееСтароеСостояние.ИмяПоследовательности].УстановитьГраницу(ТекущееСтароеСостояние.Период,ОтборГраницы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
