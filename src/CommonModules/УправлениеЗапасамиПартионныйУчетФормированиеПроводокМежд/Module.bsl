////////////////////////////////////////////////////////////////////////////////
// ТЕХНОЛОГИЧЕСКИЕ

Процедура ЗаполнитьСубконтоПоСписаниюТоваровМежд(Проводка, СтрокаДокумента, Движение, СтруктураПараметров)
	Если СтрокаДокумента.ОтражатьВМеждународномУчете
		
		Тогда
		
		ВидСубконтоНоменклатура         = ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Номенклатура;
		ВидСубконтоНоменклатурныеГруппы = ПланыВидовХарактеристик.ВидыСубконтоМеждународные.НоменклатурныеГруппы;
		ВидСубконтоСклады       = ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Склады;
		ВидСубконтоПодразделения= ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Подразделения;
		ВидСубконтоСтатьиЗатрат = ПланыВидовХарактеристик.ВидыСубконтоМеждународные.СтатьиЗатрат;
		ВидСубконтоДоговоры     = ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Договоры;
		ВидСубконтоКонтрагенты  = ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты;
		
		// Заполняем дебет:
		Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
			
			Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
				
				Если ВидСубконто.ВидСубконто = ВидСубконтоНоменклатура Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);
					
					Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая) Тогда
						
						Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.НоменклатураНовая);
						
					КонецЕсли;
					
				ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоПодразделения Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ПодразделениеОрганизации);
					
				ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСклады Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);
					
					Если ЗначениеЗаполнено(СтрокаДокумента.СкладПолучатель) Тогда
						
						Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СкладПолучатель);
						
					КонецЕсли;
					
				ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСтатьиЗатрат Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СтатьяЗатрат);
					
				ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоНоменклатурныеГруппы Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.НоменклатурнаяГруппа);
					
				ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоДоговоры Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);
					
				ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКонтрагенты Тогда
					
					Контрагент = Неопределено;
					
					Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
						Контрагент = УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ПолучитьКонтрагентаИзДоговора(СтрокаДокумента.ДоговорКонтрагента, СтруктураПараметров);
					КонецЕсли;
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, Контрагент);
					
				КонецЕсли;
				
				Если Метаданные.НайтиПоТипу(ТипЗнч(Проводка.СчетДт)) = Метаданные.ПланыСчетов.Международный Тогда
					
					УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СтрокаДокумента.КорСубконтоМУ1, СтрокаДокумента.КорСубконтоМУ2, СтрокаДокумента.КорСубконтоМУ3,, СтруктураПараметров);
					
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Заполняем кредит
		Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
			
			Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
				
				Если ВидСубконто.ВидСубконто = ВидСубконтоНоменклатура Тогда
					
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);
					
				ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоПодразделения Тогда
					
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ПодразделениеОрганизации);
					
				ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСклады Тогда
					
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);
					
				ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСтатьиЗатрат Тогда
					
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СтатьяЗатрат);
					
				ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоДоговоры Тогда
					
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);
					
				ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКонтрагенты Тогда
					
					Контрагент = Неопределено;
					
					Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
						Контрагент = УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ПолучитьКонтрагентаИзДоговора(СтрокаДокумента.ДоговорКонтрагента, СтруктураПараметров);
					КонецЕсли;
					
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, Контрагент);
					
				КонецЕсли;
				
				Если Метаданные.НайтиПоТипу(ТипЗнч(Проводка.СчетКт)) = Метаданные.ПланыСчетов.Международный Тогда
					
					УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СтрокаДокумента.КорСубконтоМУ1, СтрокаДокумента.КорСубконтоМУ2, СтрокаДокумента.КорСубконтоМУ3, Истина, СтруктураПараметров);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
		
КонецПроцедуры//ЗаполнитьСубконтоПоСписаниюТоваровМежд()


// Связанные со списанием движжения по международному учету
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьСвязанныеДвиженияМеж(СтрокаДокумента, СтруктураПараметров, Движение) Экспорт
	
	Если СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		
		// Обработка
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьСвязанныеДвиженияМеж()

////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПО СЧЕТАМ БУХ УЧЕТА

// Меж

// Формирование проводок по списанию на счет по международному учету
//
// Параметры:
//	Нет.
//
Процедура СписаниеНаСчетМеж(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи = "Прямая") Экспорт
	
	Если НЕ СтрокаДокумента.ОтражатьВМеждународномУчете Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистра = "Международный";
	
	Проводка = СтруктураПараметров["Движения"+ИмяРегистра].Добавить();
	
	Количество = Движение.Количество;
	Сумма      = Движение.Стоимость;
	
	Если СписаноИз = "Переданные" 
		И Движение.СтоимостьПоступление<>0 Тогда		 
		Сумма = Движение.СтоимостьПоступление;		
	КонецЕсли;
	
	Если ТипЗаписи = "Сторно" Тогда
		Количество = - Количество;
		Сумма      = - Сумма;
	КонецЕсли;
	
	
	Проводка.Период        = Движение.Период;
	Проводка.Регистратор   = СтруктураПараметров.Регистратор;
	Проводка.Активность    = Истина;
	Проводка.Организация   = СтрокаДокумента.Организация;
	
	Проводка.СчетКт        = Движение.СчетУчета;
	
	// Не заполняем счет кредита, если дебет и кредит балансовый и забалансовый
	Если ЗначениеЗаполнено(СтрокаДокумента.КорСчетМУ)
		И Проводка.СчетКт.Забалансовый = СтрокаДокумента.КорСчетМУ.Забалансовый Тогда
		
		Проводка.СчетДт    = СтрокаДокумента.КорСчетМУ;
		
		// Для перемещения счет кредита не задается
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаДокумента.КорСчетМУ)
		И УправлениеЗапасамиПартионныйУчет.ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартиитоваров, СтрокаДокумента.СтатьяЗатрат) =  "НаСкладах" Тогда
		
		Проводка.СчетДт    = Проводка.СчетКт;
		
	КонецЕсли;
	
	ЗаполнитьСубконтоПоСписаниюТоваровМежд(Проводка, СтрокаДокумента, Движение, СтруктураПараметров);
	
	Проводка.Сумма         = Сумма;
	
	Если Проводка.СчетКт.Количественный Тогда
		Проводка.КоличествоКт  = Количество;
	КонецЕсли;
	
	// Количество
	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
		
		Если Проводка.СчетДт.Количественный Тогда
			
			Проводка.КоличествоДт  = Количество;
			
			// Новое количество-для комплектации
			Если Движение.КоличествоПоступление<>0 Тогда 
				Проводка.КоличествоДт	= Движение.КоличествоПоступление;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Проводка.Содержание    = Строка(Движение.КодОперации);
	
	//Проводка.НомерЖурнала  = ПолучитьНомерЖурналаМУПоКоду(СтрокаДокумента);
		
	
	// Проверка добавленных проводок
	НеДобавлять = Ложь;
	
	// Проводки с одинаковыми субсчетами и субконто не добавляем:
	Если Проводка.СчетДт = Проводка.СчетКт Тогда 
		
		НеДобавлять = Проводка.КоличествоДт = Проводка.КоличествоКт;
		
		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
			
			НеДобавлять = НеДобавлять И (Проводка.СубконтоДт[ВидСубконто.ВидСубконто] = Проводка.СубконтоКт[ВидСубконто.ВидСубконто]);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику 
		И УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СчетВИерархии(Движение.СчетУчета, ПланыСчетов.Международный.ТараИТарныеМатериалы, СтруктураПараметров)
		Тогда
		НеДобавлять = Истина;
	КонецЕсли;
	
	    // Проводки с нулевой суммой и количеством не добавляем
    НеДобавлять = НеДобавлять ИЛИ (Проводка.Сумма=0 И Проводка.КоличествоДт=0 И Проводка.КоличествоКт=0);
	
	// Незаконченные проводки с балансовыми счетами не добавляем
	НеДобавлять = НеДобавлять ИЛИ 
	(   НЕ Проводка.СчетДт.Забалансовый И НЕ ЗначениеЗаполнено(Проводка.СчетКт)	
	ИЛИ НЕ Проводка.СчетКт.Забалансовый И НЕ ЗначениеЗаполнено(Проводка.СчетДт));
	
	// Проводки не добавляем к не регистрируемым в регистре документам
	НеДобавлять = НеДобавлять ИЛИ СтруктураПараметров["Движения"+ИмяРегистра].Отбор.Регистратор.Значение = Неопределено;
	
	// Задалансовые счета с разными суммами поступления и списания:
	// две  проводки без корреспонденции
	Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПереоценкаПринятыхНаКомиссию
		И Проводка.СчетДт.Забалансовый И Проводка.СчетКт.Забалансовый
		И СтрокаДокумента.СтоимостьПоступлениеБУ<>0 Тогда
		
		НеДобавлять = Ложь;
		
		ПерваяПроводка = Проводка;
		
		ВтораяПроводка = СтруктураПараметров["Движения"+ИмяРегистра].Добавить();
		
		ВтораяПроводка.Период        = СтруктураПараметров.Период;
		ВтораяПроводка.Регистратор   = СтруктураПараметров.Регистратор;
		ВтораяПроводка.Активность    = Истина;
		
		ВтораяПроводка.СчетДт        = ПерваяПроводка.СчетДт;
		
		ВтораяПроводка.Сумма         = СтрокаДокумента.СтоимостьПоступлениеБУ;
		
		Если ВтораяПроводка.СчетДт.Количественный Тогда
			ВтораяПроводка.КоличествоДт  = Количество;
		КонецЕсли;
		
		ВтораяПроводка.Организация   = СтрокаДокумента.Организация;
		
		// Перенос субконто
		Для каждого ВидСубконто Из ВтораяПроводка.СчетДт.ВидыСубконто Цикл
			
			ВтораяПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто,  ПерваяПроводка.СубконтоДт[ВидСубконто.ВидСубконто]);
			
		КонецЦикла; 
		
		ВтораяПроводка.Содержание    = ПерваяПроводка.Содержание;
		ВтораяПроводка.НомерЖурнала  = ПерваяПроводка.НомерЖурнала;
		
		// Очистка первой проводки
		ПерваяПроводка.СчетДт = Неопределено;
		ПерваяПроводка.СубконтоДт.Очистить();
		ПерваяПроводка.КоличествоДт = 0;
		
		// Нужно устанавливать в зависимости от кода операции
		//ПерваяПроводка.НомерЖурнала  = ПолучитьНомерЖурналаБУПоКоду(СтрокаДокумента);
		
		// Проводка для указания корреспонденции в регистре
		Проводка = ВтораяПроводка;
		
	КонецЕсли;
	
	// В случае, если проводку добавлять не нужно, удаляем ее из движений
	Если НеДобавлять Тогда
		
		// Удаляем добавленную строку
		СтруктураПараметров["Движения"+ИмяРегистра].Удалить(Проводка);
		
		// Если проводки не добавляются, тогда выход без изменения
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров["ИзмененыДвижения"+ИмяРегистра] = Истина;
	
	// В реквизиты движения регистра занесем счет списания
	Движение.КорСчет      = Проводка.СчетДт;
	
	Сч = 0;
	Для Каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		Если ЗначениеЗаполнено(Проводка.СубконтоДт[ВидСубконто.ВидСубконто]) тогда
			Движение["КорСубконто"+Сч] = Проводка.СубконтоДт[ВидСубконто.ВидСубконто];
		Иначе
			Движение["КорСубконто"+Сч] = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СписаниеНаСчетМеж()


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ, ФОРМИРУЮЩИЕ СТРУКТУРУ ДАННЫХ ДЛЯ ПЕРЕДАЧИ В МЕЖД. УЧЕТ

Процедура ОпределитьСоставКолонокТаблицаСписанныхПартийМеж(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок) Экспорт
	
	УправлениеЗапасамиПартионныйУчет.ОпределитьСоставКолонокТаблицаСписанныхПартийОбщихДляВсехВидовУчета(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок);
	
	КодыОпераций = СтруктураПараметров.КодыОпераций;
	// Колонки базовые
	СтруктураКолонок.Вставить("СчетУчета");
	
	СтруктураКолонок.Вставить("СчетДоходовБУ");
	СтруктураКолонок.Вставить("СчетРасходовБУ");
	СтруктураКолонок.Вставить("СчетУчетаБУ");
	СтруктураКолонок.Вставить("ПринятыеСчетУчетаБУ");
	
	СтруктураКолонок.Вставить("КорСчетМУ");
	СтруктураКолонок.Вставить("ПринятыеКорСчетБУ");
	СтруктураКолонок.Вставить("КорСубконтоМУ1");
	СтруктураКолонок.Вставить("КорСубконтоМУ2");
	СтруктураКолонок.Вставить("КорСубконтоМУ3");
	
	СтруктураКолонок.Вставить("СтатьяДоходовИРасходов");

	// Колонки по набору условий
	Если не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.Реализация ) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.РеализацияРозница) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.РеализацияКомиссия) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратПоставщику) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПередачаТарыКонтрагенту) = неопределено
		Тогда

		СтруктураКолонок.Вставить("КорСчетЗадолженностиБУ");
		СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ1");
		СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ2");
		СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ3");
		СтруктураКолонок.Вставить("ВалютнаяСуммаЗадолженностиБУ");
		СтруктураКолонок.Вставить("КорВалютаЗадолженностиБУ");
		СтруктураКолонок.Вставить("СуммаВыручкиБУ");
		СтруктураКолонок.Вставить("СуммаНДСВыручкиБУ");
	КонецЕсли;
КонецПроцедуры
