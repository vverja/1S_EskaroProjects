////////////////////////////////////////////////////////////////////////////////
// ТЕХНОЛОГИЧЕСКИЕ


// Процедура считывает контрагента договора по ссылке без чтения всего объекта
//
Функция ПолучитьКонтрагентаИзДоговора(ДоговорКонтрагента, СтруктураПараметров) Экспорт
	
	Если ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
			СтруктураПараметров.Вставить("КонтрагентИзДоговораКонтрагента",ДоговорКонтрагента.Владелец);
			Возврат СтруктураПараметров.КонтрагентИзДоговораКонтрагента;
			
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Процедура считывает контрагента из документа по ссылке без чтения всего объекта
//
Функция ПолучитьКонтрагентаИзДокументаОприходования(ДокументОприходования)
	
	// Получаем контрагента из документа партии
	Если ЗначениеЗаполнено(ДокументОприходования) Тогда
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ДокументОприходования));
		
		Если МетаданныеДокумента <> Неопределено Тогда
			Если МетаданныеДокумента.Реквизиты.Найти("Контрагент")<>Неопределено Тогда
				
				Запрос = Новый Запрос("Выбрать Контрагент Из Документ."+МетаданныеДокумента.Имя+" ГДЕ Ссылка = &Ссылка");
				Запрос.УстановитьПараметр("Ссылка", ДокументОприходования);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					
					Возврат Выборка.Контрагент;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


// Проверяет, что счет является субсчетом
//
// Параметры:
//	Проверяемый счет, Счет-родитель, общая структура параметров.
//
// Возвращаемое значение:
//	
//
Функция СчетВИерархии(ПроверяемыйСчет, СчетРодитель, СтруктураПараметров) Экспорт
	
	Перем СоотвИерархияСчетов;
	
	Если НЕ ЗначениеЗаполнено(ПроверяемыйСчет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// В свойстве СоотвИерархияСчетов кэшируются данные об иерархии счетов
	Если НЕ СтруктураПараметров.Свойство("СоотвИерархияСчетов", СоотвИерархияСчетов) Тогда
		СоотвИерархияСчетов = Новый Соответствие;
		СтруктураПараметров.Вставить("СоотвИерархияСчетов", СоотвИерархияСчетов);
	КонецЕсли;
	
	// Иерархия для каждого отдельного счета
	СоотвИерархия = СоотвИерархияСчетов[СчетРодитель];
	
	Если ТипЗнч(СоотвИерархия) <> Тип("Соответствие") Тогда
		СоотвИерархия = Новый Соответствие;
		
		// Определим иерархию счетов
		ИмяПланаСчетов = ПроверяемыйСчет.Метаданные().Имя;
		
		ЗапросСчета = Новый Запрос(
		"ВЫБРАТЬ
		|	ПланСчетовРегистра.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов."+ИмяПланаСчетов+" КАК ПланСчетовРегистра
		|
		|ГДЕ
		|	ПланСчетовРегистра.Ссылка В ИЕРАРХИИ (&Ссылка)
		|");
		
		ЗапросСчета.УстановитьПараметр("Ссылка", СчетРодитель);
		
		ВыборкаСчета = ЗапросСчета.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		Пока ВыборкаСчета.Следующий() Цикл
			СоотвИерархия.Вставить(ВыборкаСчета.Ссылка, ВыборкаСчета.Ссылка);
		КонецЦикла;
		
		СоотвИерархияСчетов.Вставить(СчетРодитель, СоотвИерархия);
	КонецЕсли;
	
	// Собственно проверка
	Возврат НЕ (СоотвИерархия[ПроверяемыйСчет] = Неопределено);
	
КонецФункции // СчетВИерархии()

Функция ВидСубконтоСодержитТип(СтруктураПараметров, ВидСубконто, ТипЗнчСубконто)
	
	Если НЕ СтруктураПараметров.Свойство("КэшПоВидамСубконто") Тогда
		Результат = ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнчСубконто);
		Возврат Результат;
	КонецЕсли;
	
	Кэш = СтруктураПараметров.КэшПоВидамСубконто;
	КэшПоВиду = Кэш[ВидСубконто];
	Если КэшПоВиду = Неопределено Тогда
		КэшПоВиду = Новый Соответствие;
		Кэш.Вставить(ВидСубконто, КэшПоВиду);
	КонецЕсли;
	
	Результат = КэшПоВиду[ТипЗнчСубконто];
	ЕСли Результат = НЕопределено Тогда
		Результат = ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнчСубконто);
		КэшПоВиду.Вставить(ТипЗнчСубконто, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции//ВидСубконтоСодержитТип

Процедура ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Субконто, ЗначениеСубконто1, ЗначениеСубконто2=Неопределено, ЗначениеСубконто3=Неопределено, ЗаполнятьТолькоПустые = Ложь, СтруктураПараметров) Экспорт
	
	Если ЗаполнятьТолькоПустые Тогда // в этом режиме заполняются только пустые
		Если ЗначениеЗаполнено(Субконто[ВидСубконто.Видсубконто]) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТипЗнчСубконто1 = ТипЗнч(ЗначениеСубконто1);
	ТипЗнчСубконто2 = ТипЗнч(ЗначениеСубконто2);
	ТипЗнчСубконто3 = ТипЗнч(ЗначениеСубконто3);
	
	Если ЗначениеЗаполнено(ЗначениеСубконто1) И ВидСубконтоСодержитТип(СтруктураПараметров, ВидСубконто, ТипЗнчСубконто1) Тогда
				
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто1);
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеСубконто2) И ВидСубконтоСодержитТип(СтруктураПараметров, ВидСубконто, ТипЗнчСубконто2) Тогда
		
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто2);
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеСубконто3) И ВидСубконтоСодержитТип(СтруктураПараметров, ВидСубконто, ТипЗнчСубконто3) Тогда
		
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто3);
		
	КонецЕсли;
	
КонецПроцедуры//ЗаполнитьСубконтоПоРеквизитам

Процедура ЗаполнитьСубконтоПоСписаниюТоваровРегл(Проводка, СтрокаДокумента, Движение, СтруктураПараметров, ВидУчета) Экспорт
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете И (ВидУчета = "Бух") тогда
		
		КорСубконто1 = СтрокаДокумента.КорСубконтоБУ1;
		КорСубконто2 = СтрокаДокумента.КорСубконтоБУ2;
		КорСубконто3 = СтрокаДокумента.КорСубконтоБУ3;		
		
		СчетТоварыПринятые    = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссиюВсего;
		
		
		
	КонецЕсли;	
	
	ВидСубконтоНоменклатура = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	ВидСубконтоНоменклатурныеГруппы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	ВидСубконтоСклады       = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	ВидСубконтоПодразделения= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения;
	ВидСубконтоСтатьиЗатрат = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	ВидСубконтоДоговоры     = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	ВидСубконтоКонтрагенты  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоКомиссионеры = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Комиссионеры;
	ВидСубконтоВидыНалоговойДеятельности = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыНалоговойДеятельности;
	ВидСубконтоСтатьиНалоговогоУчета = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговогоУчета;
	ВидСубконтоСтатьиНалоговыхДеклараций = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций;
	
	// Заполняем дебет:
	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
		
		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
			
			Если Движение.КодОперации <> Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера Тогда
			
				ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, КорСубконто1, КорСубконто2, КорСубконто3, , СтруктураПараметров);
				
				Если Проводка.СубконтоДт[ВидСубконто.ВидСубконто] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			
			КонецЕсли;
			
			Если ВидСубконто.ВидСубконто = ВидСубконтоНоменклатура Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);
				
				Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая) Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.НоменклатураНовая);
					
				КонецЕсли;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоПодразделения Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ПодразделениеОрганизации);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСклады Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);
				
				Если ЗначениеЗаполнено(СтрокаДокумента.СкладПолучатель) ИЛИ СтрокаДокумента.ИзменитьСклад Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СкладПолучатель);
					
				КонецЕсли;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСтатьиЗатрат Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СтатьяЗатрат);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоНоменклатурныеГруппы Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.НоменклатурнаяГруппа) Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.НоменклатурнаяГруппа);
					
				КонецЕсли;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоДоговоры Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКонтрагенты Тогда
				
				Контрагент = Неопределено;
				
				// Для товаров принятых субконто Контрагент - это комитент
				Если СчетВИерархии(Проводка.СчетДт, СчетТоварыПринятые, СтруктураПараметров) Тогда
					
					Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
						Если Движение<>Неопределено Тогда
							Контрагент = ПолучитьКонтрагентаИзДокументаОприходования(Движение.ДокументОприходования);
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
						Контрагент = ПолучитьКонтрагентаИзДоговора(СтрокаДокумента.ДоговорКонтрагента, СтруктураПараметров);
					КонецЕсли;
					
				КонецЕсли;
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, Контрагент);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКомиссионеры Тогда
				
				Комиссионер = Неопределено;
				
				Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
					Комиссионер = ПолучитьКонтрагентаИзДоговора(СтрокаДокумента.ДоговорКонтрагента, СтруктураПараметров);
				КонецЕсли;
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, Комиссионер);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоВидыНалоговойДеятельности Тогда
						
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, Движение.НалоговоеНазначение.ВидНалоговойДеятельности);
				
				Если ЗначениеЗаполнено(СтрокаДокумента.ВидНалоговойДеятельностиПоФакту) Тогда
				  	
				  	Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ВидНалоговойДеятельностиПоФакту);
				  			
				КонецЕсли;
				
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСтатьиНалоговогоУчета ИЛИ
					  ВидСубконто.ВидСубконто = ВидСубконтоСтатьиНалоговыхДеклараций Тогда
							
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СтатьяПриростаУбылиЗапасов);
							
				Если ЗначениеЗаполнено(СтрокаДокумента.СтатьяПриростаУбылиЗапасовНовая) Тогда
								
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СтатьяПриростаУбылиЗапасовНовая);
								
				КонецЕсли;

			КонецЕсли;
			
			Если Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера Тогда

				ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, КорСубконто1, КорСубконто2, КорСубконто3, Истина, СтруктураПараметров);

			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполняем кредит
	Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
		
		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
			
			Если ВидСубконто.ВидСубконто = ВидСубконтоНоменклатура Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоПодразделения Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ПодразделениеОрганизации);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСклады Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСтатьиЗатрат Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СтатьяЗатрат);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоНоменклатурныеГруппы Тогда
					
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.НоменклатурнаяГруппа);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоДоговоры Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКонтрагенты Тогда
				
				Контрагент = Неопределено;
				
				// Для товаров принятых субконто Контрагент - это комитент
				Если СчетВИерархии(Проводка.СчетКт, СчетТоварыПринятые, СтруктураПараметров) Тогда
					
					Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
						Если Движение<>Неопределено Тогда
							Контрагент = ПолучитьКонтрагентаИзДокументаОприходования(Движение.ДокументОприходования);
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
						Контрагент = ПолучитьКонтрагентаИзДоговора(СтрокаДокумента.ДоговорКонтрагента, СтруктураПараметров);
					КонецЕсли;
					
				КонецЕсли;
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, Контрагент);
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКомиссионеры Тогда
				
				Комиссионер = Неопределено;
				
				Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
					Комиссионер = ПолучитьКонтрагентаИзДоговора(СтрокаДокумента.ДоговорКонтрагента, СтруктураПараметров);
				КонецЕсли;
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, Комиссионер);
				
					
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСтатьиНалоговогоУчета ИЛИ
					  ВидСубконто.ВидСубконто = ВидСубконтоСтатьиНалоговыхДеклараций Тогда
					
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, Движение.СтатьяПриростаУбылиЗапасов);
					
			КонецЕсли;
			
			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, КорСубконто1, КорСубконто2, КорСубконто3, Истина , СтруктураПараметров);
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры//ЗаполнитьСубконтоПоСписаниюТоваровРегл

/////////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ,ВЫПОЛНЯЕМЫЕ ПО РЕЗУЛЬТАТУ СПИСАНИЯ
// Связанные со списанием движения по бух и нал учету
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьСвязанныеДвиженияРегл(СтрокаДокумента, СтруктураПараметров, Движение) Экспорт	
	
	Если СтрокаДокумента.ОтражатьвБухгалтерскомУчете Тогда
		
		КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
		
		Если СтрокаДокумента.НеСписывать И НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером 
		   И ( СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Реализация Или				
				СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту) Тогда				
			ОприходоватьТоварПринятыйНаОтветственноеХранениеБух(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
		// Корректировки использования
		Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ИзменениеНалоговогоНазначенияЗапасов 
			ИЛИ СтрокаДокумента.КорректироватьПартииНУ 
			Тогда			
		
			УправлениеЗапасамиПартионныйУчет.КорректировкаНалоговогоКредитаПриИспользованииПартий(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьСвязанныеДвиженияРегл()

//Ответственное хранение
Процедура ОприходоватьТоварПринятыйНаОтветственноеХранениеБух(СтрокаДокумента, СтруктураПараметров, Строка) Экспорт

	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Учет = "Бух";
	Иначе
		Возврат;
	КонецЕсли;
	
	Движение = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(Движение,Строка);
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ОтложеннаяОтгрузка;
	
	Движение.СчетУчета = ПланыСчетов.Хозрасчетный.МатериальныеЦенностиНаОтветственномХранении;
	
	// В бухгалтерском учете партия принятая на ответственное 
	//хранение учитывается по стоимости реализации
	Движение.Стоимость = Строка.СуммаВыручкиБУ;
	
	Проводка = СтруктураПараметров.ДвиженияХозрасчетный.Добавить();
	
	Проводка.Период        = СтруктураПараметров.Период;
	Проводка.Регистратор   = СтруктураПараметров.Регистратор;
	Проводка.Активность    = Истина;
	Проводка.Организация   = СтрокаДокумента.Организация;
		
	Проводка.Сумма  = Движение.СуммаВыручкиБУ; // Сумма выручки по бух. учету
	
	Проводка.СчетДт = Движение.СчетУчета;
	
	Проводка.КоличествоДт = Движение.Количество;
	
	Проводка.Содержание = Строка(Движение.КодОперации);
	
	ЗаполнитьСубконтоПоСписаниюТоваровРегл(Проводка, СтрокаДокумента, Движение, СтруктураПараметров, Учет);
	
	СтруктураПараметров.ИзмененыДвиженияХозрасчетный = Истина;
	
КонецПроцедуры//ОприходоватьТоварПринятыйНаОтветственноеХранение

////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПО СЧЕТАМ БУХ УЧЕТА

// Регл

// Содержание проводки для бухгалтерского и налогового учета
Функция ПолучитьСодержаниеПроводки(СтрокаДокумента, СтруктураПараметров, Актив = "", Учет = "Бух") Экспорт 
	
	КодыОпераций = СтруктураПараметров.КодыОпераций;
	НазваниеАктива = ?(Актив = "" Или Актив = Неопределено, "", ?(Учет = "Бух", БухгалтерскийУчет.ПолучитьНазваниеОбъекта(Актив), "ТМЦ") + " ");
	
	Если СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.РеализацияУслугПоПереработке") тогда
		СодержаниеПроводки = "Реализация услуг по переработке";
	ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеПартийВПроизводствоОперативно тогда
		СодержаниеПроводки = "Списание " + НазваниеАктива + "в производство ";
	ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаБрак тогда
		СодержаниеПроводки = "Списание " + НазваниеАктива + "на брак ";
	ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаВложенияВоВнеоборотныеАктивы тогда
		СодержаниеПроводки = "Списание " + НазваниеАктива + "внеоборотные активы ";
	ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаЗатраты тогда
		СодержаниеПроводки = "Списание " + НазваниеАктива + "на затраты ";
	ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеПоИнвентаризации тогда
		СодержаниеПроводки = "Списание " + НазваниеАктива + " (недостача)";
	ИначеЕсли СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеПартийПереданныхВПроизводство тогда 
		СодержаниеПроводки = "Списание " + НазваниеАктива + "в производство (переработка)";
	Иначе
		СодержаниеПроводки = Строка(СтрокаДокумента.КодОперацииПартииТоваров);
		Если СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту 
			И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.ИзменениеНалоговогоНазначенияЗапасов
			Тогда
			СодержаниеПроводки = СодержаниеПроводки + " " + НазваниеАктива;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат СодержаниеПроводки;
	
КонецФункции//ПолучитьСодержаниеПроводки

// Формирование проводок по отклонению в стоимости тары для бухгалтерского и налогового учета 
Процедура СформироватьПроводкуОтклоненияВСтоимостиТары(СтрокаДокумента, Проводка, Движение, СтруктураПараметров, ИмяРегистра )
	
	Возврат;
	
	// Проводка по передаче тары (при проведении документа реализации)
	Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту 
		И Проводка.КоличествоКт>0
		И (НЕ Проводка.СчетКт.Забалансовый И ИмяРегистра = "Хозрасчетный")
		Тогда
		
		Себестоимость = Проводка.Сумма;
		СтоимостьПередачи = Движение.СтоимостьПоступление;
		
		// Задолженность по новой (залоговой) стоимости
		Проводка.Сумма = СтоимостьПередачи;
		
		// Если стоимость передачи не равна себестоимости - добавим проводку по начислению разницы на прочие доходы/расходы
		ПерваяПроводка = Проводка;
		
		Если СтоимостьПередачи <> Себестоимость Тогда
			
			ВтораяПроводка = СтруктураПараметров["Движения"+ИмяРегистра].Добавить();
			
			ВтораяПроводка.Период        = СтруктураПараметров.Период;
			ВтораяПроводка.Регистратор   = СтруктураПараметров.Регистратор;
			ВтораяПроводка.Активность    = Истина;
			
			Если Себестоимость > СтоимостьПередачи Тогда
				ВтораяПроводка.СчетДт    = СтрокаДокумента.СчетРасходовБУ;

				Для каждого ВидСубконто Из ВтораяПроводка.СчетДт.ВидыСубконто Цикл
					ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, ВтораяПроводка.СубконтоДт, СтрокаДокумента.СубконтоРасходовБУ1 , СтрокаДокумента.СубконтоРасходовБУ2, СтрокаДокумента.СубконтоРасходовБУ3, , СтруктураПараметров);
				КонецЦикла;

				ВтораяПроводка.Сумма = Себестоимость - СтоимостьПередачи;
				
				ВтораяПроводка.СчетКт = ПерваяПроводка.СчетКт;
				Для каждого ВидСубконто Из ВтораяПроводка.СчетКт.ВидыСубконто Цикл
					ВтораяПроводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто,  ПерваяПроводка.СубконтоКт[ВидСубконто.ВидСубконто]);
				КонецЦикла;
				
			Иначе
				ВтораяПроводка.СчетКт    = СтрокаДокумента.СчетДоходовБУ;
				
				Для каждого ВидСубконто Из ВтораяПроводка.СчетКт.ВидыСубконто Цикл
					ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, ВтораяПроводка.СубконтоКт, СтрокаДокумента.СубконтоДоходовБУ1, СтрокаДокумента.СубконтоДоходовБУ2, СтрокаДокумента.СубконтоДоходовБУ3, , СтруктураПараметров);
				КонецЦикла;

				ВтораяПроводка.Сумма = СтоимостьПередачи-Себестоимость;
				
				ВтораяПроводка.СчетДт = ПерваяПроводка.СчетКт;
				
				Для каждого ВидСубконто Из ВтораяПроводка.СчетДт.ВидыСубконто Цикл
					ВтораяПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто,  ПерваяПроводка.СубконтоКт[ВидСубконто.ВидСубконто]);
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВтораяПроводка.СчетКт) Или НЕ ЗначениеЗаполнено(ВтораяПроводка.СчетДт) тогда
				
				СтрокаСообщения = "Документ " + СтрокаДокумента.Регистратор + ". Не заполнены значения счетов учета доходов и расходов." + Символы.ПС
				+ "Проводка по отклонению в стоимости тары для номенклатуры " + СтрокаДокумента.Номенклатура 
				+ " не сформирована.";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
				
				СтруктураПараметров["Движения"+ИмяРегистра].Удалить(ВтораяПроводка);
				
			Иначе
				ВтораяПроводка.Организация   = СтрокаДокумента.Организация;
				
				ВтораяПроводка.Содержание    = ПерваяПроводка.Содержание;
				ВтораяПроводка.НомерЖурнала  = ПерваяПроводка.НомерЖурнала;
				
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Формирование проводок по списанию на счет по бухгалтерскому учету
Процедура СписаниеНаСчетБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи = "Прямая") Экспорт
	
	Если НЕ СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистра = "Хозрасчетный";
	
	Проводка = СтруктураПараметров["Движения"+ИмяРегистра].Добавить();
	
	Количество = Движение.Количество;
	Сумма      = Движение.Стоимость;
	
	
	НалоговоеНазначениеКт        = Движение.НалоговоеНазначение;
	Если ЗначениеЗаполнено(СтрокаДокумента.НалоговоеНазначениеНовое) Тогда
		НалоговоеНазначениеДт    = СтрокаДокумента.НалоговоеНазначениеНовое;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаДокумента.НалоговоеНазначениеНовое)
		И УправлениеЗапасамиПартионныйУчет.ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров, СтрокаДокумента.СтатьяЗатрат) = "НаСкладах" Тогда
		НалоговоеНазначениеДт    = НалоговоеНазначениеКт;
	КонецЕсли;
	СуммаНУ = Движение.СтоимостьНУ;
	
	Если СписаноИз = "Переданные" 
		И Движение.СтоимостьПоступление<>0 Тогда
		Сумма = Движение.СтоимостьПоступление;
	КонецЕсли;
	
	Если ТипЗаписи = "Сторно" Тогда
		Количество = - Количество;
		Сумма      = - Сумма;
		СуммаНУ    = - СуммаНУ;
	КонецЕсли;
	
	Проводка.Период        = СтруктураПараметров.Период;
	Проводка.Регистратор   = СтруктураПараметров.Регистратор;
	Проводка.Активность    = Истина;
	Проводка.Организация   = СтрокаДокумента.Организация;
	
	Проводка.СчетКт        = Движение.СчетУчета;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.КорСчетБУ)
		И Проводка.СчетКт.Забалансовый = СтрокаДокумента.КорСчетБУ.Забалансовый Тогда
		
		Проводка.СчетДт    = СтрокаДокумента.КорСчетБУ;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаДокумента.КорСчетБУ)
		И УправлениеЗапасамиПартионныйУчет.ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартиитоваров, СтрокаДокумента.СтатьяЗатрат) = "НаСкладах" Тогда
		
		Проводка.СчетДт    = Проводка.СчетКт;
		
	КонецЕсли;
	
	Проводка.НалоговоеНазначениеДт    = НалоговоеНазначениеДт;
	Проводка.НалоговоеНазначениеКт    = НалоговоеНазначениеКт;
	
	// Перемещение комиссионных товаров
	Если НЕ СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя тогда
		Если Проводка.СчетКт.Забалансовый
			И (ЗначениеЗаполнено(СтрокаДокумента.ПринятыеКорСчетБУ)) Тогда
			
			Проводка.СчетДт    = СтрокаДокумента.ПринятыеКорСчетБУ;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Проводка.СчетДт.Валютный Тогда
			
		Проводка.ВалютаДт		 = СтрокаДокумента.КорВалютаЗадолженностиБУ;
		Проводка.ВалютнаяСуммаДт = Движение.ВалютнаяСуммаЗадолженностиБУ;
			
	КонецЕсли;
	
	ЗаполнитьСубконтоПоСписаниюТоваровРегл(Проводка, СтрокаДокумента, Движение, СтруктураПараметров, "Бух");
	
	//Смартис Лиманчук начало 19.12.2012
	Попытка
		Если СтруктураПараметров.Регистратор.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссияНал Тогда
			ДоговорОрганизацияКрафт = СтрокаДокумента.Организация.ДоговорОрганизацияПродаетКрафту;
			ДоговорКрафтОрганизация = СтрокаДокумента.Организация.ДоговорКрафтПокупаетУОрганизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ДоговорОрганизацияКрафт.Владелец);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ДоговорОрганизацияКрафт);
		КонецЕсли;
	Исключение
	КонецПопытки;
	//Смартис Лиманчук окончание 19.12.2012
	
	//Смартис Лиманчук начало 30.01.2013
	Попытка
		Если СтруктураПараметров.Регистратор.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукцияЧерезПодотчет Тогда
			Проводка.СчетДт    = ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты;
			Проводка.СубконтоДт.Очистить();
		КонецЕсли;
	Исключение
	КонецПопытки;
	//Смартис Лиманчук окончание 30.01.2013
	
	// Сумма в перемещении должна быть только если ведется партионный учет по складам
	// или если товар перемещается на другой счет
	// или на другое налоговое назначение
	Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами 
	   И Не УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров) 
	   И Проводка.СчетДт = Проводка.СчетКт И Проводка.НалоговоеНазначениеДт = Проводка.НалоговоеНазначениеКт Тогда
			
		Проводка.Сумма = 0;
		Проводка.СуммаНУДт = 0;
		Проводка.СуммаНУКт = 0;
		
	Иначе
		
		Проводка.Сумма = Сумма;
		Проводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СуммаНУ);
		Проводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СуммаНУ);
		
	КонецЕсли;
	
	Если Проводка.СчетКт.Количественный Тогда
		Проводка.КоличествоКт  = Количество;
	КонецЕсли;
	
	// Количество
	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
		
		Если Проводка.СчетДт.Количественный  Тогда
			
			Проводка.КоличествоДт  = Количество;
			
			// Новое количество-для комплектации
			Если Движение.КоличествоПоступление<>0 Тогда 
				
				Проводка.КоличествоДт	= Движение.КоличествоПоступление;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Проводка.Содержание = ПолучитьСодержаниеПроводки(СтрокаДокумента, СтруктураПараметров, Проводка.СчетКт);
	
	
	// Проверка добавленных проводок
	НеДобавлять = Ложь;
	
	// Проводки с одинаковыми субсчетами, налоговыми назначениями и субконто не добавляем:
	Если Проводка.СчетДт = Проводка.СчетКт И Проводка.НалоговоеНазначениеДт = Проводка.НалоговоеНазначениеКт Тогда 
		
		НеДобавлять = Проводка.КоличествоДт = Проводка.КоличествоКт;
		
		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
			
			СубконтоСовпадают = Проводка.СубконтоДт[ВидСубконто.ВидСубконто] = Проводка.СубконтоКт[ВидСубконто.ВидСубконто];
			
			НеДобавлять = НеДобавлять И СубконтоСовпадают;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проводки с нулевой суммой и количеством не добавляем
	НеДобавлять = НеДобавлять ИЛИ (Проводка.Сумма=0 И Проводка.СуммаНУДт=0 И Проводка.СуммаНУКт=0 И Проводка.КоличествоДт=0 И Проводка.КоличествоКт=0);
	
	// Незаконченные проводки с балансовыми счетами не добавляем
	НеДобавлять = НеДобавлять ИЛИ 
	(   НЕ Проводка.СчетДт.Забалансовый И НЕ ЗначениеЗаполнено(Проводка.СчетКт)	
	ИЛИ НЕ Проводка.СчетКт.Забалансовый И НЕ ЗначениеЗаполнено(Проводка.СчетДт));
	
	// Проводки не добавляем к не регистрируемым в регистре документам
	НеДобавлять = НеДобавлять ИЛИ СтруктураПараметров["Движения"+ИмяРегистра].Отбор.Регистратор.Значение = Неопределено;
	
	
	// Забалансовые счета с разными суммами поступления и списания:
	// две  проводки без корреспонденции
	Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПереоценкаПринятыхНаКомиссию
		И Проводка.СчетДт.Забалансовый И Проводка.СчетКт.Забалансовый
		И Движение.СтоимостьПоступление<>0 Тогда
		
		НеДобавлять = Ложь;
		
		ПерваяПроводка = Проводка;
		
		ВтораяПроводка = СтруктураПараметров["Движения"+ИмяРегистра].Добавить();
		
		ВтораяПроводка.Период        = СтруктураПараметров.Период;
		ВтораяПроводка.Регистратор   = СтруктураПараметров.Регистратор;
		ВтораяПроводка.Активность    = Истина;
		
		ВтораяПроводка.СчетДт        = ПерваяПроводка.СчетДт;
		
		ВтораяПроводка.Сумма         = Движение.СтоимостьПоступление;
		
		Если ВтораяПроводка.СчетДт.Количественный Тогда
			ВтораяПроводка.КоличествоДт  = Количество;
		КонецЕсли;
		
		ВтораяПроводка.Организация   = СтрокаДокумента.Организация;
		
		// Перенос субконто
		Для каждого ВидСубконто Из ВтораяПроводка.СчетДт.ВидыСубконто Цикл
			
			ВтораяПроводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто,  ПерваяПроводка.СубконтоДт[ВидСубконто.ВидСубконто]);
			
		КонецЦикла; 
		
		ВтораяПроводка.Содержание    = ПерваяПроводка.Содержание;
		ВтораяПроводка.НомерЖурнала  = ПерваяПроводка.НомерЖурнала;
		
		// Очистка первой проводки
		ПерваяПроводка.СчетДт = Неопределено;
		ПерваяПроводка.СубконтоДт.Очистить();
		ПерваяПроводка.КоличествоДт = 0;
		
		// Нужно устанавливать в зависимости от кода операции
		ПерваяПроводка.НомерЖурнала  = "";
		
		// Проводка для указания корреспонденции в регистре
		Проводка = ВтораяПроводка;
		
	КонецЕсли;
	
	// В случае, если проводку добавлять не нужно, удаляем ее из движений
	Если НеДобавлять Тогда
		
		// Удаляем добавленную строку
		СтруктураПараметров["Движения"+ИмяРегистра].Удалить(Проводка);
		
		// Если проводки не добавляются, тогда выход без изменения
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров["ИзмененыДвижения"+ИмяРегистра] = Истина;
	
	// В реквизиты движения регистра занесем счет списания
	Движение.КорСчет      = Проводка.СчетДт;
	// В реквизиты движения регистра занесем налоговое назначение списания
	Движение.НалоговоеНазначениеПоФакту = Проводка.НалоговоеНазначениеДт;
	
	Сч = 0;
	Для Каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
		
		Сч = Сч+1;
		
		Если ЗначениеЗаполнено(Проводка.СубконтоДт[ВидСубконто.ВидСубконто]) тогда
			Движение["КорСубконто"+Сч] = Проводка.СубконтоДт[ВидСубконто.ВидСубконто];
		Иначе
			Движение["КорСубконто"+Сч] = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СписаниеНаСчетБух()

// Списание партии на счет бухгалтерского учета
Процедура СписаниеНаСчет(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи = "Прямая", ПриходоватьВ = Неопределено) Экспорт
	
	Если СтруктураПараметров.ФормироватьПроводкиПоСписаниюТМЦ Тогда
		СписаниеНаСчетБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи);
		
		//Смартис Лиманчук начало 19.12.2012
		//дополнительные проводки, если делается возврат поставщику (нал)
		Если НЕ СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Если СтруктураПараметров.Регистратор.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссияНал Тогда
				Возврат;
			КонецЕсли;
		Исключение
			Возврат;
		КонецПопытки;
		
		ДоговорОрганизацияКрафт = СтрокаДокумента.Организация.ДоговорОрганизацияПродаетКрафту;
		ДоговорКрафтОрганизация = СтрокаДокумента.Организация.ДоговорКрафтПокупаетУОрганизации;
		Если СтруктураПараметров.Период >= Дата("20210101") Тогда
			КрафтКолор = Константы.НПТ.Получить();
		Иначе
			КрафтКолор = Константы.КрафтКолор.Получить();
		КонецЕсли;
		// КрафтКолор= Константы.КрафтКолор.Получить();
		
		Проводки = СтруктураПараметров["ДвиженияХозрасчетный"];
		
		//1
		Проводка = Проводки.Добавить();
		Проводка.Активность    = Истина;
		Проводка.Регистратор   = СтруктураПараметров.Регистратор;
		Проводка.Период        = СтруктураПараметров.Период;
		Проводка.Организация   = КрафтКолор;//СтрокаДокумента.Организация;
		Проводка.Сумма 		   = Движение.Стоимость;
		
		Проводка.СчетДт        = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПоставщиками;
		ЗаполнитьСубконтоПоСписаниюТоваровРегл(Проводка, СтрокаДокумента, Движение, СтруктураПараметров, "Бух");
		
		//Смартис Лиманчук начало 25.01.2013
		Если СтрокаДокумента.КорСчетБУ.Валютный Тогда
			Проводка.СчетДт          = ПланыСчетов.Хозрасчетный.РасчетыСИностраннымиПоставщиками;
			Проводка.ВалютаДт        = СтрокаДокумента.КорВалютаЗадолженностиБУ;
			Проводка.ВалютнаяСуммаДт = СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ;
		КонецЕсли;
		//Смартис Лиманчук окончание 25.01.2013
			
		Проводка.СчетКт        = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПокупателями;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", ДоговорКрафтОрганизация.Владелец);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", ДоговорКрафтОрганизация);
		
		//Смартис Лиманчук начало 25.01.2013
		Если СтрокаДокумента.КорСчетБУ.Валютный Тогда
			Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.РасчетыСИностраннымиПокупателями;
			Проводка.ВалютаКт        = СтрокаДокумента.КорВалютаЗадолженностиБУ;
			Проводка.ВалютнаяСуммаКт = СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ;
		КонецЕсли;
		//Смартис Лиманчук окончание 25.01.2013
					
		Проводка.Содержание = ПолучитьСодержаниеПроводки(СтрокаДокумента, СтруктураПараметров, Проводка.СчетКт);
		
		//2
		Проводка = Проводки.Добавить();
		Проводка.Активность    = Истина;
		Проводка.Регистратор   = СтруктураПараметров.Регистратор;
		Проводка.Период        = СтруктураПараметров.Период;
		Проводка.Организация   = КрафтКолор;//СтрокаДокумента.Организация;
		Проводка.Сумма 		   = Движение.Стоимость;
		
		Проводка.СчетДт        = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПокупателями;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ДоговорКрафтОрганизация.Владелец);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ДоговорКрафтОрганизация);
		
		//Смартис Лиманчук начало 25.01.2013
		Если СтрокаДокумента.КорСчетБУ.Валютный Тогда
			Проводка.СчетДт          = ПланыСчетов.Хозрасчетный.РасчетыСИностраннымиПокупателями;
			Проводка.ВалютаДт        = СтрокаДокумента.КорВалютаЗадолженностиБУ;
			Проводка.ВалютнаяСуммаДт = СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ;
		КонецЕсли;
		//Смартис Лиманчук окончание 25.01.2013
		
		Проводка.СчетКт        = ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты;
		
		Проводка.Содержание = ПолучитьСодержаниеПроводки(СтрокаДокумента, СтруктураПараметров, Проводка.СчетКт);
		
		//3
		Проводка = Проводки.Добавить();
		Проводка.Активность    = Истина;
		Проводка.Регистратор   = СтруктураПараметров.Регистратор;
		Проводка.Период        = СтруктураПараметров.Период;
		Проводка.Организация   = СтрокаДокумента.Организация;
		Проводка.Сумма 		   = Движение.Стоимость;
		
		Проводка.СчетДт        = ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты;
		
		Проводка.СчетКт        = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПоставщиками;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", ДоговорОрганизацияКрафт.Владелец);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", ДоговорОрганизацияКрафт);
		
		//Смартис Лиманчук начало 25.01.2013
		Если СтрокаДокумента.КорСчетБУ.Валютный Тогда
			Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.РасчетыСИностраннымиПоставщиками;
			Проводка.ВалютаКт        = СтрокаДокумента.КорВалютаЗадолженностиБУ;
			Проводка.ВалютнаяСуммаКт = СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ;
		КонецЕсли;
		//Смартис Лиманчук окончание 25.01.2013
					
		Проводка.Содержание = ПолучитьСодержаниеПроводки(СтрокаДокумента, СтруктураПараметров, Проводка.СчетКт);
		
		//Смартис Лиманчук окончание 19.12.2012
		
	КонецЕсли;	
	
КонецПроцедуры//СписаниеНаСчет


////////////////////////////////////////////////////////////////////////////////
// ПРОВОДКИ ПО БУХ УЧЕТУ, ЗАВИСЯЩИЕ ОТ ТОГО, КАКИЕ ПАРТИИ СПИСАНЫ

// Формирование проводок по начислению задолженности перед комитентом
//
Процедура НачислитьЗадолженностьПередКомитентом(СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи = "Прямая")
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	Если ТипЗаписи = "Сторно" Тогда
		КоэффициентСторно = -1;
	Иначе
		КоэффициентСторно = 1;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Контрагент,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетовСКомитентом
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Движение.ДокументОприходования);
	
	ВыборкаПринятиеНаКомиссию = Запрос.Выполнить().Выбрать();
	Если ВыборкаПринятиеНаКомиссию.Следующий() Тогда 
		
		Если ЗначениеЗаполнено(ВыборкаПринятиеНаКомиссию.СчетУчетаРасчетовСКонтрагентом) Тогда
			
			Проводка = СтруктураПараметров["ДвиженияХозрасчетный"].Добавить();
			
			Проводка.Период        = СтруктураПараметров.Период;
			Проводка.Регистратор   = СтруктураПараметров.Регистратор;
			Проводка.Активность    = Истина;
			Проводка.Организация   = СтрокаДокумента.Организация;
			
			Проводка.СчетКт        = ВыборкаПринятиеНаКомиссию.СчетУчетаРасчетовСКонтрагентом;
			Проводка.СубконтоКт.Контрагенты = ВыборкаПринятиеНаКомиссию.Контрагент;
			Проводка.СубконтоКт.Договоры    = ВыборкаПринятиеНаКомиссию.ДоговорКонтрагента;
			
			Проводка.СчетДт        = СтрокаДокумента.КорСчетЗадолженностиБУ;
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт      = СтрокаДокумента.КорВалютаЗадолженностиБУ;
				Проводка.ВалютнаяСуммаДт = КоэффициентСторно*Движение.ВалютнаяСуммаЗадолженностиБУ;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
			
				Если СтрокаДокумента.КорВалютаЗадолженностиБУ = ВыборкаПринятиеНаКомиссию.ВалютаРасчетовСКомитентом тогда

					//Если валюта расчетов с комитентом совпадает с валютой расчетов по договору, считаем что и курсы совпадают.
					Проводка.ВалютаКт        = СтрокаДокумента.КорВалютаЗадолженностиБУ;
					Проводка.ВалютнаяСуммаКт = Проводка.ВалютнаяСуммаДт;

				Иначе

					мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");
					
					ДанныеОВалютеРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(ВыборкаПринятиеНаКомиссию.ВалютаРасчетовСКомитентом,СтруктураПараметров.Период);

					Проводка.ВалютаКт        = ВыборкаПринятиеНаКомиссию.ВалютаРасчетовСКомитентом;
					Проводка.ВалютнаяСуммаКт = КоэффициентСторно*МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Движение.СуммаВыручкиБУ
												,мВалютаРегламентированногоУчета,ВыборкаПринятиеНаКомиссию.ВалютаРасчетовСКомитентом
												,1,ДанныеОВалютеРасчетовСКомитентом.Курс
												,1,ДанныеОВалютеРасчетовСКомитентом.Кратность);

				КонецЕсли;
											
			КонецЕсли;
			
			Проводка.Сумма = КоэффициентСторно*Движение.СуммаВыручкиБУ;
			
			// При списании по инвентаризации начисляется задолженность на сумму поступления
			Если СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеПоИнвентаризации Тогда
				
				Проводка.Сумма         = КоэффициентСторно*Движение.Стоимость;
				
			КонецЕсли;
			
			//Проводка.НомерЖурнала  = ПолучитьНомерЖурналаБУПоКоду(СтрокаДокумента);
			
			КорСубконто1 = СтрокаДокумента.КорСубконтоЗадолженностиБУ1;
			КорСубконто2 = СтрокаДокумента.КорСубконтоЗадолженностиБУ2;
			КорСубконто3 = СтрокаДокумента.КорСубконтоЗадолженностиБУ3;
			
			ТипЗнчКорСубконто1 = ТипЗнч(КорСубконто1);
			ТипЗнчКорСубконто2 = ТипЗнч(КорСубконто2);
			ТипЗнчКорСубконто3 = ТипЗнч(КорСубконто3);
			
			Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
				
				ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, КорСубконто1, КорСубконто2, КорСубконто3, , СтруктураПараметров);
				
			КонецЦикла;
			
			СтруктураПараметров["ИзмененыДвиженияХозрасчетный"] = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры//НачислитьЗадолженностьПередКомитентом

// Формирование проводок по начислению дохода от реализации товаров по бух и нал учету,
// Используется в случаях, когда при реализации может быть списан как собственный, так и комиссионный товар
//
Процедура НачислитьДоходОтРеализации(СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи = "Прямая")
	
	Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Учет="Бух";
	КонецЕсли;
	
	Если Учет = "Бух" Тогда 
		ИмяРегистра = "Хозрасчетный";
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЗаписи = "Сторно" Тогда
		КоэффициентСторно = -1;
	Иначе
		КоэффициентСторно = 1;
	КонецЕсли;
	
	// Для проверки добавленных проводок
	НеДобавлять = Ложь;
	
	Проводка = СтруктураПараметров["Движения"+ИмяРегистра].Добавить();
	
	Проводка.Период        = СтруктураПараметров.Период;
	Проводка.Регистратор   = СтруктураПараметров.Регистратор;
	Проводка.Активность    = Истина;
	Проводка.Организация   = СтрокаДокумента.Организация;
	
	Проводка.Содержание = ПолучитьСодержаниеПроводки(СтрокаДокумента, СтруктураПараметров, Проводка.СчетКт);
	
	Если Учет="Бух" Тогда
		
		Проводка.Сумма  = КоэффициентСторно*Движение.СуммаВыручкиБУ; // Сумма выручки по бух. учету
		
		Проводка.СчетДт = СтрокаДокумента.КорСчетЗадолженностиБУ;
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = СтрокаДокумента.КорВалютаЗадолженностиБУ;
			Проводка.ВалютнаяСуммаДт = КоэффициентСторно*Движение.ВалютнаяСуммаЗадолженностиБУ;
		КонецЕсли;
		
		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СтрокаДокумента.КорСубконтоЗадолженностиБУ1, СтрокаДокумента.КорСубконтоЗадолженностиБУ2, СтрокаДокумента.КорСубконтоЗадолженностиБУ3, , СтруктураПараметров);
		КонецЦикла;
		
		Проводка.СчетКт = СтрокаДокумента.СчетДоходовБУ;
		
		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
			
			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СтрокаДокумента.КорСубконтоБУ1, СтрокаДокумента.КорСубконтоБУ2, , , СтруктураПараметров);
			Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаДокумента.СтавкаНДС)) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СтавкаНДС);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверка добавленных проводок
	
	Если Проводка.Сумма = 0 Тогда
		НеДобавлять = Истина;
	КонецЕсли;
	
	// Незаконченные проводки с балансовыми счетами не добавляем
	НеДобавлять = НеДобавлять ИЛИ 
	(   НЕ Проводка.СчетДт.Забалансовый И НЕ ЗначениеЗаполнено(Проводка.СчетКт)	
	ИЛИ НЕ Проводка.СчетКт.Забалансовый И НЕ ЗначениеЗаполнено(Проводка.СчетДт));
	
	// В случае, если проводку добавлять не нужно, удаляем ее из движений
	Если НеДобавлять Тогда
		
		// Удаляем добавленную строку
		СтруктураПараметров["Движения"+ИмяРегистра].Удалить(Проводка);
		
		// Если проводки не добавляются, тогда выход без изменения
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров["ИзмененыДвижения"+ИмяРегистра] = Истина;
	
КонецПроцедуры // НачислитьДоходОтРеализации()

Процедура СформироватьПроводкиОтклоненийВСтоимостиПриВозвратеПоставщику(СтруктураПараметров) Экспорт

	СтоимостьСписания = 0;
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
	
		Если НЕ СтруктураПараметров.Свойство("СтоимостьСписанияБУ",СтоимостьСписания) Тогда
		
			Возврат;
		
		КонецЕсли;
		
		СформироватьПроводкиОтклоненийВСтоимостиПриВозвратеБух(СтруктураПараметров, СтоимостьСписания);
	КонецЕсли;

КонецПроцедуры // СформироватьПроводкиОтклоненийВСтоимостиПриВозврате

Процедура СформироватьПроводкиОтклоненийВСтоимостиПриВозвратеБух(СтруктураПараметров, СтоимостьСписания) 

	СуммаОтклонения = СтруктураПараметров.СуммаЗадолженностиБУ - СтруктураПараметров.СтоимостьСписанияБУ;
	СуммаОтклоненияТара = СтруктураПараметров.СуммаЗадолженностиТараБУ - СтруктураПараметров.СтоимостьСписанияТараБУ;
	
	СуммаОтклоненияВал = СтруктураПараметров.СуммаЗадолженностиБУВал - СтруктураПараметров.СтоимостьСписанияБУВал;
	СуммаОтклоненияТараВал = СтруктураПараметров.СуммаЗадолженностиТараБУВал - СтруктураПараметров.СтоимостьСписанияТараБУВал;
	
	Если СуммаОтклонения = 0 И СуммаОтклоненияВал = 0 И 
		 СуммаОтклоненияТара = 0 И СуммаОтклоненияТараВал = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Смартис Лиманчук начало 18.12.2012 (Корректировка Черный А.В. 02.08.2013)
	МожноПроводить = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Группа2") ИЛИ РольДоступна("УправлениеСкладскойЛогистикой");
	СтрокаСообщения = "Бухгалтерский учет. Документ " + СтруктураПараметров.Регистратор + ". При списании товаров возникает отклонение от стоимости, указанной в документе." + Символы.ПС
	+ "Сумма списания " + СтруктураПараметров.СтоимостьСписанияБУ + ", сумма в документе " + СтруктураПараметров.СуммаЗадолженностиБУ + "." + ?(МожноПроводить, " Создана проводка на сумму отклонения.", " Недостаточно прав на проведение документа.");
	ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	Если НЕ МожноПроводить Тогда
		СтруктураПараметров.Отказ = Истина;
		ПараметрыСеанса.ОтменитьСписаниеПоПартиям = Истина;
		Возврат;
	КонецЕсли;
	//Смартис Лиманчук окончание 18.12.2012
	
	СтруктураРеквизитов = ПолучитьСтруктуруШапкиДокументаПоСсылке(СтруктураПараметров.Регистратор);
	
	Если СтруктураРеквизитов.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// отклонения по товарам в проводках не отражаются, просто сообщим 
		Если НЕ СуммаОтклонения = 0  ИЛИ НЕ СуммаОтклоненияВал = 0 Тогда
			СтрокаСообщения = "Бухгалтерский учет. Документ " + СтруктураПараметров.Регистратор + ". При списании партий принятых на комиссию товаров возникает отклонение от стоимости, указанной в документе." + Символы.ПС
			+ "Сумма списания " + СтруктураПараметров.СтоимостьСписанияБУ + ", сумма в документе " + СтруктураПараметров.СуммаЗадолженностиБУ + " .";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
		КонецЕсли;
		Если СуммаОтклоненияТара = 0 И СуммаОтклоненияТараВал = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
		
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитов.СчетУчетаЗатрат) Или НЕ ЗначениеЗаполнено(СтруктураРеквизитов.СчетУчетаДоходов) Тогда
		СтрокаСообщения = "Бухгалтерский учет. Документ " + СтруктураПараметров.Регистратор + ". Не заполнены значения счетов учета доходов и расходов." + Символы.ПС
		+ "Проводка по отклонению в стоимости не сформирована.";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
		Возврат;
	
	КонецЕсли;
	
	Если (НЕ СуммаОтклонения = 0 ИЛИ НЕ СуммаОтклоненияВал = 0) И 
		 НЕ СтруктураРеквизитов.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		 
		//По товарам 
		СчетУчетаРасчетов = СтруктураРеквизитов.СчетУчетаРасчетовСКонтрагентом;
		
		Проводка = СтруктураПараметров.ДвиженияХозрасчетный.Добавить();
		
		Проводка.Период        = СтруктураПараметров.Период;
		Проводка.Регистратор   = СтруктураПараметров.Регистратор;
		Проводка.Активность    = Истина;
		//---------------smts Суслов---------------- сделаем последние пожелания по быстрому и некрасиво
		//Проводка.Организация   = СтруктураРеквизитов.Организация;
		Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И СтруктураПараметров.Регистратор.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссияНал Тогда
			Если СтруктураПараметров.Период >= Дата("20210101") Тогда
				КрафтКолор = Константы.НПТ.Получить();
			Иначе
				КрафтКолор = Константы.КрафтКолор.Получить();
			КонецЕсли;
			Проводка.Организация   = КрафтКолор;//Справочники.Организации.НайтиПоКоду("000000003");
		Иначе		
			Проводка.Организация   = СтруктураРеквизитов.Организация;
		КонецЕсли;
		//----------------- закончили-----------------------------------------------
		
		Проводка.Содержание = "Отклонение в стоимости номенклатуры";
			
		// Если стоимость списанных партий меньше стоимости по документу
		Если СуммаОтклонения > 0 Тогда
			Проводка.СчетДт = СчетУчетаРасчетов;
			Проводка.СчетКт = СтруктураРеквизитов.СчетУчетаДоходов;
			Проводка.Сумма  = СуммаОтклонения;
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураРеквизитов.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СуммаОтклоненияВал;
			КонецЕсли;
			Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
				ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СтруктураРеквизитов.ДоходыСубконто1 , СтруктураРеквизитов.ДоходыСубконто2, СтруктураРеквизитов.ДоходыСубконто3, , СтруктураПараметров);
			КонецЦикла;
			Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
				ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СтруктураРеквизитов.ДоговорКонтрагента, СтруктураРеквизитов.Контрагент, , , СтруктураПараметров);
			КонецЦикла;
		Иначе
		// Если стоимость списанных партий больше стоимости по документу
			Проводка.СчетКт = СчетУчетаРасчетов;
			Проводка.СчетДт = СтруктураРеквизитов.СчетУчетаЗатрат;
			Проводка.Сумма  = -СуммаОтклонения;
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураРеквизитов.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = -СуммаОтклоненияВал;
			КонецЕсли;
			Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
				ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СтруктураРеквизитов.ЗатратыСубконто1 , СтруктураРеквизитов.ЗатратыСубконто2, СтруктураРеквизитов.ЗатратыСубконто3, , СтруктураПараметров);
			КонецЦикла;
			Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
				ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СтруктураРеквизитов.ДоговорКонтрагента, СтруктураРеквизитов.Контрагент, , , СтруктураПараметров);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СуммаОтклоненияТара = 0 ИЛИ НЕ СуммаОтклоненияТараВал = 0 Тогда
		//По таре
		СчетУчетаРасчетов = СтруктураРеквизитов.СчетУчетаРасчетовПоТаре;
		
		Проводка = СтруктураПараметров.ДвиженияХозрасчетный.Добавить();
		
		Проводка.Период        = СтруктураПараметров.Период;
		Проводка.Регистратор   = СтруктураПараметров.Регистратор;
		Проводка.Активность    = Истина;
		Проводка.Организация   = СтруктураРеквизитов.Организация;
		
		Проводка.Содержание = "Отклонение в стоимости возвратной тары";
			
		// Если стоимость списанных партий меньше стоимости по документу
		Если СуммаОтклоненияТара > 0 Тогда
			Проводка.СчетДт = СчетУчетаРасчетов;
			Проводка.СчетКт = СтруктураРеквизитов.СчетУчетаДоходов;
			Проводка.Сумма  = СуммаОтклоненияТара;
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураРеквизитов.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СуммаОтклоненияТараВал;
			КонецЕсли;
			Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
				ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СтруктураРеквизитов.ДоходыСубконто1 , СтруктураРеквизитов.ДоходыСубконто2, СтруктураРеквизитов.ДоходыСубконто3, , СтруктураПараметров);
			КонецЦикла;
			Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
				ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СтруктураРеквизитов.ДоговорКонтрагента, СтруктураРеквизитов.Контрагент, , , СтруктураПараметров);
			КонецЦикла;
		Иначе
		// Если стоимость списанных партий больше стоимости по документу
			Проводка.СчетКт = СчетУчетаРасчетов;
			Проводка.СчетДт = СтруктураРеквизитов.СчетУчетаЗатрат;
			Проводка.Сумма  = -СуммаОтклоненияТара;
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураРеквизитов.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = -СуммаОтклоненияТараВал;
			КонецЕсли;
			Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
				ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СтруктураРеквизитов.ЗатратыСубконто1 , СтруктураРеквизитов.ЗатратыСубконто2, СтруктураРеквизитов.ЗатратыСубконто3, , СтруктураПараметров);
			КонецЦикла;
			Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
				ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СтруктураРеквизитов.ДоговорКонтрагента, СтруктураРеквизитов.Контрагент, , , СтруктураПараметров);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров["ИзмененыДвиженияХозрасчетный"] = Истина;

КонецПроцедуры // СформироватьПроводкиОтклоненийВСтоимостиПриВозврате


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ, ФОРМИРУЮЩИЕ СТРУКТУРУ ДАННЫХ ДЛЯ ПЕРЕДАЧИ В РЕГЛ. УЧЕТ

Процедура ОпределитьСоставКолонокТаблицаСписанныхПартийБух(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок) Экспорт
	
	УправлениеЗапасамиПартионныйУчет.ОпределитьСоставКолонокТаблицаСписанныхПартийОбщихДляВсехВидовУчета(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок);
	
	КодыОпераций = СтруктураПараметров.КодыОпераций;
	// Колонки базовые
	СтруктураКолонок.Вставить("СчетУчета");
	
	СтруктураКолонок.Вставить("СчетДоходовБУ");  
	СтруктураКолонок.Вставить("СчетРасходовБУ"); 
	СтруктураКолонок.Вставить("СчетУчетаБУ");    
	СтруктураКолонок.Вставить("ПринятыеСчетУчетаБУ"); 
	
	СтруктураКолонок.Вставить("КорСчетБУ"); 
	СтруктураКолонок.Вставить("ПринятыеКорСчетБУ"); 
	СтруктураКолонок.Вставить("КорСубконтоБУ1");
	СтруктураКолонок.Вставить("КорСубконтоБУ2");
	СтруктураКолонок.Вставить("КорСубконтоБУ3");
	
	СтруктураКолонок.Вставить("СубконтоДоходовБУ1");
	СтруктураКолонок.Вставить("СубконтоДоходовБУ2");
	СтруктураКолонок.Вставить("СубконтоДоходовБУ3");
	СтруктураКолонок.Вставить("СубконтоРасходовБУ1");
	СтруктураКолонок.Вставить("СубконтоРасходовБУ2");
	СтруктураКолонок.Вставить("СубконтоРасходовБУ3");
	
	СтруктураКолонок.Вставить("СуммаУценки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	
	
	
	СтруктураКолонок.Вставить("СуммаВыручкиБУ");
	СтруктураКолонок.Вставить("КоличествоПоступление");
	СтруктураКолонок.Вставить("СтоимостьПоступлениеБУ");
	
	
	СтруктураКолонок.Вставить("ОбъектСтроительства");
	СтруктураКолонок.Вставить("НалоговоеНазначение");
	СтруктураКолонок.Вставить("НалоговоеНазначениеПоФакту");
	СтруктураКолонок.Вставить("НалоговоеНазначениеНовое");
	
	СтруктураКолонок.Вставить("КорректироватьПартииНУ");
	
	СтруктураКолонок.Вставить("СтоимостьНУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СтруктураКолонок.Вставить("НДСВходящий", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СтруктураКолонок.Вставить("НДСКредит", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	
	// Колонки по набору условий
	Если не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.Реализация ) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.РеализацияРозница) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.РеализацияКомиссия) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратПоставщику) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПередачаТарыКонтрагенту) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ОтложеннаяОтгрузка) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПокупателя) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.СписаниеПоИнвентаризации) = неопределено
		ИЛИ не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.СписаниеПоОрдеру) = неопределено
		Тогда
		СтруктураКолонок.Вставить("КорСчетЗадолженностиБУ");
		СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ1");
		СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ2");
		СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ3");
		СтруктураКолонок.Вставить("ВалютнаяСуммаЗадолженностиБУ");
		СтруктураКолонок.Вставить("КорВалютаЗадолженностиБУ");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруШапкиДокументаПоСсылке(Знач Ссылка) Экспорт

	Перем СтруктураКорректировкиЗаказа;
	
	МетаданныеДокумента = Ссылка.Метаданные();

	Если МетаданныеДокумента.Имя = "РасходныйОрдерНаТовары" Тогда

		СтруктураДокументаПередачи = Новый Структура("ДокументПередачи");
		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураДокументаПередачи);
		МетаданныеДокумента = СтруктураДокументаПередачи.ДокументПередачи.Метаданные();
		Ссылка = СтруктураДокументаПередачи.ДокументПередачи;
		
	ИначеЕсли МетаданныеДокумента.Имя = "ПриходныйОрдерНаТовары" Тогда

		СтруктураДокументаПеремещения = Новый Структура("ДокументПеремещения");
		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураДокументаПеремещения);
		МетаданныеДокумента = СтруктураДокументаПеремещения.ДокументПеремещения.Метаданные();
		Ссылка = СтруктураДокументаПеремещения.ДокументПеремещения;
		
	ИначеЕсли МетаданныеДокумента.Имя = "КорректировкаЗаказаПокупателя" 
		ИЛИ МетаданныеДокумента.Имя = "ИзменениеЗаказаПокупателя" Тогда
		
		СтруктураКорректировкиЗаказа = Новый Структура("ЗаказПокупателя, Ссылка, Дата, Номер");
		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураКорректировкиЗаказа);
		МетаданныеДокумента = СтруктураКорректировкиЗаказа.ЗаказПокупателя.Метаданные();
		Ссылка = СтруктураКорректировкиЗаказа.ЗаказПокупателя;

	КонецЕсли;

	СтруктураШапкиДокумента = Новый Структура;

	СтруктураШапкиДокумента.Вставить("Ссылка");
	СтруктураШапкиДокумента.Вставить("Дата");
	СтруктураШапкиДокумента.Вставить("Номер");

	Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
		СтруктураШапкиДокумента.Вставить(Реквизит.Имя);
	КонецЦикла;

	УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка, СтруктураШапкиДокумента);

	Если СтруктураКорректировкиЗаказа <> Неопределено тогда
		
		СтруктураШапкиДокумента.Вставить("Ссылка" , СтруктураКорректировкиЗаказа.Ссылка);
		СтруктураШапкиДокумента.Вставить("Дата"   , СтруктураКорректировкиЗаказа.Дата);
		СтруктураШапкиДокумента.Вставить("Номер"  , СтруктураКорректировкиЗаказа.Номер);

	КонецЕсли;

	Если СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента") тогда

		СтруктураДоговора = Новый Структура ("ВидДоговора,
											 |ВалютаВзаиморасчетов");

		УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураШапкиДокумента.ДоговорКонтрагента, СтруктураДоговора);
		СтруктураШапкиДокумента.Вставить("ВидДоговора", СтруктураДоговора.ВидДоговора);
		СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов", СтруктураДоговора.ВалютаВзаиморасчетов);
		
	Иначе

		СтруктураШапкиДокумента.Вставить("ВидДоговора", Неопределено);

	КонецЕсли;

	
	Если НЕ СтруктураШапкиДокумента.Свойство("УчитыватьНДС") Тогда

		СтруктураШапкиДокумента.Вставить("УчитыватьНДС", Истина);

	КонецЕсли;

	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);	
	СтруктураШапкиДокумента.Вставить("ВидДокумента",  МетаданныеДокумента.Имя);
	
	ВидПоступления = Неопределено;
	Если СтруктураШапкиДокумента.Свойство("ВидПоступления",ВидПоступления) тогда
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру тогда
			СтруктураСклада = Новый Структура("СкладОрдер");
			УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураСклада);
			
			СтруктураСкладаОрдера = Новый Структура("Склад");
			УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураСклада.СкладОрдер,СтруктураСкладаОрдера);
			
			СтруктураШапкиДокумента.Вставить("СкладПриходногоОрдера",СтруктураСкладаОрдера.Склад);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции

