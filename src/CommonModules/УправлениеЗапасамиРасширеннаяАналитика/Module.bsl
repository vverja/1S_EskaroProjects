////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает список кодов операций для документа
//
// Параметры:
//  Документ - ссылка на документ, для которого нужно определить код операции,
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа,
//  ИмяТабличнойЧасти - имя табличной части, для которой определяется код операции,
//  ИмяДокумента - переменная, в которую возвращается строковое представление имени документа.
//
// Возвращаемое значение:
//  Структра, содержащая список кодов операций.
//
Функция ПолучитьКодОперацииПоДокументу(Документ, СтруктураШапкиДокумента, ИмяТабличнойЧасти, ИмяДокумента = "")
	СтруктураКодовОпераций = Новый Структура();
	ИмяДокумента = "";
	// Важно: перечисления, описанные в этой функции должны быть в составе типов колонки
	// "КодОперации" таблицы значений "ТаблицаДляФормированияДвижений", формируемой в ПодготовитьТаблицуДляФормированияДвижений() 
	// В противном случае не будет заполнен код операции в регистре.
	ИмяПеречисления = "КодыОперацийПартииТоваров"; 
	
	Если ТипЗНЧ(Документ) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ИмяДокумента = "ОтчетОРозничныхПродажах";
		СтруктураКодовОпераций.Вставить("Реализация");
		
		Если ИмяТабличнойЧасти = "ТаблицаПоКомплектам" Тогда
            СтруктураКодовОпераций.Вставить("Комплектация");			
		КонецЕсли;	
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ИмяДокумента = "РеализацияТоваровУслуг";
		Если ИмяТабличнойЧасти = "ТаблицаПоТоварам" Тогда	
			Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				СтруктураКодовОпераций.Вставить("РеализацияКомиссия");
			Иначе	
				СтруктураКодовОпераций.Вставить("Реализация");
			КонецЕсли;	
		ИначеЕсли ИмяТабличнойЧасти = "ТаблицаПоТаре" Тогда	
			СтруктураКодовОпераций.Вставить("ПередачаТарыКонтрагенту");
		ИначеЕсли ИмяТабличнойЧасти = "ТаблицаПоКомплектам" Тогда
            СтруктураКодовОпераций.Вставить("Комплектация");			
		КонецЕсли;
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		ИмяДокумента = "ОприходованиеТоваров";
		СтруктураКодовОпераций.Вставить("Оприходование");
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ИмяДокумента = "ПоступлениеДопРасходов";
		СтруктураКодовОпераций.Вставить("ПоступлениеДопРасходов");
		
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ИмяДокумента = "ПеремещениеТоваров";
		СтруктураКодовОпераций.Вставить("ПеремещениеМеждуСкладами");
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		ИмяДокумента = "ТребованиеНакладная";
		СтруктураКодовОпераций.Вставить("СписаниеПартийВПроизводствоОперативно");
		СтруктураКодовОпераций.Вставить("СписаниеНаСтроительствоОбъектовОС");
		СтруктураКодовОпераций.Вставить("СписаниеНаЗатраты");
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		ИмяДокумента = "ОтчетПроизводстваЗаСмену";
		СтруктураКодовОпераций.Вставить("ВыпускПоОперацииСтоимость");
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ИмяДокумента = "ВозвратТоваровОтПокупателя";
		Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СтруктураКодовОпераций.Вставить("ВозвратОтКомиссионера");
		ИначеЕсли ИмяТабличнойЧасти = "ТаблицаПоТоварам" Тогда	
			СтруктураКодовОпераций.Вставить("ВозвратОтПокупателя");
			СтруктураКодовОпераций.Вставить("Реализация");
		ИначеЕсли ИмяТабличнойЧасти = "ТаблицаПоТаре" Тогда	
			СтруктураКодовОпераций.Вставить("ВозвратТарыОтКонтрагента");
			СтруктураКодовОпераций.Вставить("Реализация");
		ИначеЕсли ИмяТабличнойЧасти = "ТаблицаПоКомплектам" Тогда
            СтруктураКодовОпераций.Вставить("Комплектация");			
		КонецЕсли;
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда
		ИмяДокумента = "ПоступлениеТоваровУслуг";	
		Если Документ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком или
			 Документ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			Если НЕ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
				Если Документ.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
					СтруктураКодовОпераций.Вставить("Поступление");
				Иначе
					СтруктураКодовОпераций.Вставить("ПоступлениеПоОрдеру");
				КонецЕсли;	
			КонецЕсли;
		Иначе
			СтруктураКодовОпераций.Вставить("ПоступлениеНаКомиссию");
		КонецЕсли;
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки")) Тогда
		ИмяДокумента = "ПоступлениеТоваровИзПереработки";
		СтруктураКодовОпераций.Вставить("Поступление");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")) Тогда
		ИмяДокумента = "ВозвратТоваровПоставщику";
		Если Документ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			Если Документ.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
				//Смартис Лиманчук начало 19.12.2012
			  ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссияНал
				//Смартис Лиманчук окончание 19.12.2012
			  ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда	
			  	Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
					СтруктураКодовОпераций.Вставить("ВозвратПоставщику");
				КонецЕсли;	
			КонецЕсли;
		Иначе
			СтруктураКодовОпераций.Вставить("ВозвратКомитенту");
		КонецЕсли;	
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.КорректировкаСерийИХарактеристикТоваров")) Тогда
		ИмяДокумента = "КорректировкаСерийИХарактеристикТоваров";
		СтруктураКодовОпераций.Вставить("КорректировкаСерийИХарактеристик");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.КорректировкаКачестваТоваров")) Тогда
		ИмяДокумента = "КорректировкаКачестваТоваров";
		СтруктураКодовОпераций.Вставить("КорректировкаКачества");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) Тогда
		ИмяДокумента = "ОтчетКомиссионераОПродажах";
		СтруктураКодовОпераций.Вставить("Реализация");
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.КомплектацияНоменклатуры")) Тогда
		ИмяДокумента = "КомплектацияНоменклатуры";
		Если Документ.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
			СтруктураКодовОпераций.Вставить("Комплектация");
		ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции Тогда	
			СтруктураКодовОпераций.Вставить("СписаниеПартийВПроизводствоОперативно");
		ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика Тогда	
			СтруктураКодовОпераций.Вставить("СписаниеПартийПереданныхВПроизводство");
		КонецЕсли;
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.АвансовыйОтчет"))	Тогда
		ИмяДокумента = "АвансовыйОтчет";
		Если Документ.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
			СтруктураКодовОпераций.Вставить("Поступление");
		Иначе
			СтруктураКодовОпераций.Вставить("ПоступлениеПоОрдеру");
		КонецЕсли;
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию"))	Тогда
		ИмяДокумента = "ПередачаМатериаловВЭксплуатацию";
		ИмяПеречисления = "КодыОперацийПартииМатериаловВЭксплуатации";
		СтруктураКодовОпераций.Вставить("СписаниеПартийВЭксплуатацию");

	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПеремещениеМатериаловВЭксплуатации"))	Тогда
		ИмяДокумента = "ПеремещениеМатериаловВЭксплуатации";
		ИмяПеречисления = "КодыОперацийПартииМатериаловВЭксплуатации";
		СтруктураКодовОпераций.Вставить("ПеремещениеВЭксплуатации");

	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.СписаниеМатериаловИзЭксплуатации"))	Тогда
		ИмяДокумента = "СписаниеМатериаловИзЭксплуатации";
		ИмяПеречисления = "КодыОперацийПартииМатериаловВЭксплуатации";
		СтруктураКодовОпераций.Вставить("СписаниеИзЭксплуатации");
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПередачаТоваров"))	Тогда
		ИмяДокумента = "ПередачаТоваров";
		Если Документ.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
			СтруктураКодовОпераций.Вставить("ПередачаВПереработку");
		ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
			СтруктураКодовОпераций.Вставить("ПередачаИзПереработки");
		КонецЕсли;	
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПолучениеУслугПоПереработке"))	Тогда
		ИмяДокумента = "ПолучениеУслугПоПереработке";
		СтруктураКодовОпераций.Вставить("СписаниеПартийПереданныхВПроизводство");
		СтруктураКодовОпераций.Вставить("СписаниеНаСтроительствоОбъектовОС");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ВозвратПереданныхТоваров"))	Тогда
		ИмяДокумента = "ВозвратПереданныхТоваров";
		Если ИмяТабличнойЧасти = "ТаблицаПоТоварам" Тогда	
			СтруктураКодовОпераций.Вставить("ВозвратОтПереработчика");
		ИначеЕсли ИмяТабличнойЧасти = "ТаблицаПоТаре" Тогда	
			СтруктураКодовОпераций.Вставить("ВозвратТарыОтКонтрагента");
			СтруктураКодовОпераций.Вставить("Реализация");
		КонецЕсли;	
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ГТДИмпорт"))	Тогда
		ИмяДокумента = "ГТДИмпорт";
		СтруктураКодовОпераций.Вставить("ПоступлениеДопРасходов");
		
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.СписаниеТоваров"))	Тогда
		ИмяДокумента = "СписаниеТоваров";
		СтруктураКодовОпераций.Вставить("СписаниеПоИнвентаризации");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПринятиеКУчетуОС"))	Тогда
		ИмяДокумента = "ПринятиеКУчетуОС";
		СтруктураКодовОпераций.Вставить("ПринятиеКУчетуОС");
		
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПередачаОборудованияВМонтаж"))	Тогда
		ИмяДокумента = "ПередачаОборудованияВМонтаж";
		СтруктураКодовОпераций.Вставить("ПередачаОборудованияВМонтаж");
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ"))	Тогда
		ИмяДокумента = "ПоступлениеТоваровУслугВНТТ";
		Если Документ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			СтруктураКодовОпераций.Вставить("Поступление");
		Иначе	
			СтруктураКодовОпераций.Вставить("ПоступлениеНаКомиссию");
		КонецЕсли;	
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		ИмяДокумента = "ВозвратТоваровПоставщикуИзНТТ";
		Если Документ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			СтруктураКодовОпераций.Вставить("ВозвратПоставщику");
		Иначе
			СтруктураКодовОпераций.Вставить("ВозвратКомитенту");
		КонецЕсли;	
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		ИмяДокумента = "РеализацияУслугПоПереработке";
		СтруктураКодовОпераций.Вставить("Реализация");
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ВводНачальныхОстатковМатериаловВЭксплуатации") Тогда
		ИмяДокумента = "ВводНачальныхОстатковМатериаловВЭксплуатации";
		ИмяПеречисления = "КодыОперацийПартииМатериаловВЭксплуатации";		
		СтруктураКодовОпераций.Вставить("СписаниеПартийВЭксплуатацию");		
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ВыпускПродукции") Тогда
		ИмяДокумента    = "ВыпускПродукции";
		ИмяПеречисления = "КодыОперацийВыпускПродукции";
		
		СтруктураКодовОпераций.Вставить("ВыпускПродукцииФиксНаСклад");
		СтруктураКодовОпераций.Вставить("ОприходованиеНЗП");
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.УслугиСобственнымПодразделениям") Тогда
		ИмяДокумента    = "УслугиСобственнымПодразделениям";
		ИмяПеречисления = "КодыОперацийВыпускПродукции";
		
		СтруктураКодовОпераций.Вставить("ВыпускПродукцииФиксВнутрУслугиНаПроизводство");
		СтруктураКодовОпераций.Вставить("ОприходованиеНЗП");
		
	ИначеЕсли ТипЗНЧ(Документ) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		ИмяДокумента = "ОприходованиеМатериаловИзПроизводства";
		
		Если Документ.ВидОперации = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы Тогда
			ИмяПеречисления = "КодыОперацийВыпускПродукции";	
			СтруктураКодовОпераций.Вставить("ВозвратМатериаловИзПроизводстваФикс");
			СтруктураКодовОпераций.Вставить("ВозвратМатериаловИзПроизводстваРасч");
		Иначе
			ИмяПеречисления = "КодыОперацийЗатратыНаВыпускПродукции";	
			СтруктураКодовОпераций.Вставить("ОтрицательныеЗатраты");
			СтруктураКодовОпераций.Вставить("ФактСебестоимостьБракВПроизводстве");
		КонецЕсли;	
		
	ИначеЕсли (ТипЗНЧ(Документ) = Тип("ДокументСсылка.ИзменениеНалоговогоНазначенияЗапасов")) Тогда
		ИмяДокумента = "ИзменениеНалоговогоНазначенияЗапасов";
		СтруктураКодовОпераций.Вставить("ИзменениеНалоговогоНазначенияЗапасов");
	КонецЕсли;
	
	Для Каждого ТекущийКодОперации Из СтруктураКодовОпераций Цикл
		СтруктураКодовОпераций.Вставить(ТекущийКодОперации.Ключ, Перечисления[ИмяПеречисления][ТекущийКодОперации.Ключ]);
	КонецЦикла;	
	
	Если НЕ СтруктураКодовОпераций.Количество() = 0 Тогда
		Возврат СтруктураКодовОпераций;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции //ПолучитьКодОперацииПоДокументу()

// Функция возвращает структуру наборов записей в зависимости от видов учета, в которых отражается данный документ
//
// Параметры:
//  Источник - документ, для которого определяются наборы записей,
//
// Возвращаемое значение:
//  Структура, содержащая список наборов записей.
//
Функция ПолучитьСтруктуруНаборовЗаписейПоВидамУчета(Источник)
	СтруктураНаборов = Новый Структура();
	Если Источник.мСтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Если УправлениеЗапасами.ИспользуетсяУправленческийУчетЗатрат() Тогда
			Если ТипЗНЧ(Источник.Движения) = Тип("Структура") Тогда
				Если НЕ Источник.Движения.Свойство("УчетЗатрат") Тогда
					Источник.Движения.Вставить("УчетЗатрат", РегистрыНакопления.УчетЗатрат.СоздатьНаборЗаписей());
					Источник.Движения.УчетЗатрат.Отбор.Регистратор.Установить(Источник.Ссылка);
				КонецЕсли;
			КонецЕсли;	
			
			СтруктураНаборов.Вставить("УчетЗатрат", Источник.Движения.УчетЗатрат);
		КонецЕсли;	
	КонецЕсли;
	
	Если Источник.мСтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если ТипЗНЧ(Источник.Движения) = Тип("Структура") Тогда
			Если НЕ Источник.Движения.Свойство("УчетЗатратРегл") Тогда
				Источник.Движения.Вставить("УчетЗатратРегл", РегистрыНакопления.УчетЗатратРегл.СоздатьНаборЗаписей());
				Источник.Движения.УчетЗатратРегл.Отбор.Регистратор.Установить(Источник.Ссылка);
			КонецЕсли;
		КонецЕсли;	
		
		СтруктураНаборов.Вставить("УчетЗатратРегл", Источник.Движения.УчетЗатратРегл);
	КонецЕсли;
	Возврат СтруктураНаборов;	
КонецФункции //ПолучитьСтруктуруНаборовЗаписейПоВидамУчета()	

// Процедура дополняет структуру шапки документа дополнительными полями, необходимыми для проведения по регистрам УчетЗатрат и УчетЗатратРегл
//
// Параметры:
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа.
//
Процедура ДополнитьСтруктуруШапкиДополнительнымиПолямиУчетаЗатрат(СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
		СтруктураШапкиДокумента.Вставить("ОрганизацияУправленческийУчет",УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(СтруктураШапкиДокумента.Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ));
	КонецЕсли;
	
	
КонецПроцедуры //ДополнитьСтруктуруШапкиДополнительнымиПолямиУчетаЗатрат()	

// Процедура очищает, в таблице "Результат" колонки, которые не должны заполняться в соответствии с настройками учетной политики
//
// Параметры:
//  ИмяРегистра - имя регистра "УчетЗатрат" или "УчетЗатратРегл" по которому будут выполняться движения,
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа,
//  Результат - таблица значений, по которой будут формироваться движения по регистру,
//  НаборСтрокТабличнойЧасти - массив строк исходной табличной части документа, по которому была сформирована таблица "Результат".
//
Процедура ОчиститьКолонкиВСоответствииСНастройкамиУчетнойПолитики(ИмяРегистра, СтруктураШапкиДокумента, Результат, НаборСтрокТабличнойЧасти)
	//Очистим склад
	УчетнаяПолитика = глЗначениеПеременной("ПараметрыПартионногоУчета");
	Если ИмяРегистра = "УчетЗатрат" Тогда
		ВестиПартионныйУчетПоСкладам = УчетнаяПолитика.ВестиПартионныйУчетПоСкладам;
	Иначе
		ВестиПартионныйУчетПоСкладам = УчетнаяПолитика.ВестиПартионныйУчетПоСкладамРегл;
	КонецЕсли;
	Если НЕ ВестиПартионныйУчетПоСкладам Тогда
		Результат.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;	
	
	//Очистим серию
	НомерТекущейСтроки = 0;
	Для Каждого ТекущаяСтрока Из НаборСтрокТабличнойЧасти Цикл
		Если Результат[НомерТекущейСтроки].РазделУчета = Перечисления.РазделыУчета.Затраты Тогда
			Если ТекущаяСтрока.Владелец().Колонки.Найти("ВестиУчетПоСериямВНЗП") <> Неопределено Тогда
				ВестиПартионныйУчетПоСериям = ТекущаяСтрока.ВестиУчетПоСериямВНЗП;
			ИначеЕсли ЗначениеЗаполнено(Результат[НомерТекущейСтроки].Затрата) Тогда
				ВестиПартионныйУчетПоСериям = Результат[НомерТекущейСтроки].Затрата.ВестиУчетПоСериямВНЗП;
			Иначе
				ВестиПартионныйУчетПоСериям = Ложь;
			КонецЕсли;
		Иначе	
			Если (НЕ ТекущаяСтрока.Владелец().Колонки.Найти("ВестиПартионныйУчетПоСериям") = Неопределено)
			  И (ЗначениеЗаполнено(ТекущаяСтрока.ВестиПартионныйУчетПоСериям)) Тогда
				ВестиПартионныйУчетПоСериям = ТекущаяСтрока.ВестиПартионныйУчетПоСериям;
			ИначеЕсли ЗначениеЗаполнено(Результат[НомерТекущейСтроки].Затрата) Тогда
				ВестиПартионныйУчетПоСериям = Результат[НомерТекущейСтроки].Затрата.ВестиПартионныйУчетПоСериям;
			Иначе
				ВестиПартионныйУчетПоСериям = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ВестиПартионныйУчетПоСериям Тогда
			Результат[НомерТекущейСтроки].СерияЗатраты = Неопределено;
		КонецЕсли;	
		НомерТекущейСтроки = НомерТекущейСтроки + 1;	
	КонецЦикла	
КонецПроцедуры //ОчиститьКолонкиВСоответствииСНастройкамиУчетнойПолитики	

// Функция выполняет общие для всех документов проверки на необходимость формировать движения по строке документа
//
// Параметры:
//  СтрокаДокумента - строка таблицы значений,
//  ТабличнаяЧасть - таблица значений
//
// Возвращаемое значение:
//  Булево, если движения формировать нужно, то Истина.
//
Функция ПроверитьНеобходимостьФормированияДвиженийПоСтрокеДокумента(СтрокаДокумента, ТабличнаяЧасть)
	//По принятым МПЗ движения по регистрам учета затрат не формируются
	Если ТабличнаяЧасть.Колонки.Найти("ПринадлежностьНоменклатуры") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.ПринадлежностьНоменклатуры) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТабличнаяЧасть.Колонки.Найти("СтатусМатериальныхЗатрат") <> Неопределено Тогда
		Если СтрокаДокумента.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТабличнаяЧасть.Колонки.Найти("СтатьяЗатрат") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СтатьяЗатрат)
		  И СтрокаДокумента.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции //ПроверитьНеобходимостьФормированияДвиженийПоСтрокеДокумента() 	

// Функция возвращает таблицу значений в соответствии правилам преобразования
//
// Параметры:
//
//	Шаблон						- mxl документ, содержащий правила преобразования. Хранить такой Шаблон предлагается в метаданных для каждого регистра. Образец такого шаблона представлен в приложении 1.
//	СтруктураШапкиДокумента		- структра в которой закэшированы параметры шапки
//	ТабличнаяЧасть				- таблица значений, содержащая нужную табличную часть из переменной СтруктураТабличныхЧастей.
//	ИмяПравилаПреобразования	- строка, содержащая имя правила (ключ) по которому будет производиться поиск в шаблоне.
//
Функция ПолучитьСтруктуруДанныхВСоответствииСШаблоном(ИмяРегистра, СтруктураШапкиДокумента, ТабличнаяЧасть, ИмяПравилаПреобразования)
    Перем ЗначениеКолонки;
	
	Шаблон = РегистрыНакопления[ИмяРегистра].ПолучитьМакет("ПараметрыФормированияДвижений");
	
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(Шаблон.Область("ПравилаПреобразования"));
    ПЗ.Выполнить();
	
	ВсеПравилаПреобразования = ПЗ.Результат.Выгрузить();
	ПравилаПреобразования = ВсеПравилаПреобразования.Найти(ИмяПравилаПреобразования, "ИмяПравилаПреобразования");
	
	Если ПравилаПреобразования = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ТекстСтрокаДокумента = НРег("СтрокаДокумента.");
	ДлинаТекстСтрокаДокумента = СтрДлина(ТекстСтрокаДокумента);
	
	// Получим список колонок табличной части
	КолонкиТабличнойЧасти = "";
	СписокКолонокТабличнойЧасти = Новый СписокЗначений;
	СтруктураЗначенийСвойств = Новый Структура;
	
	НаборСтрокТабличнойЧасти = Новый Массив();
	Для Каждого СтрокаДокумента Из ТабличнаяЧасть Цикл
		Если ПроверитьНеобходимостьФормированияДвиженийПоСтрокеДокумента(СтрокаДокумента, ТабличнаяЧасть) Тогда
			Если ПустаяСтрока(ПравилаПреобразования.УсловиеОтбораСтрок) Тогда
				НаборСтрокТабличнойЧасти.Добавить(СтрокаДокумента);
			Иначе	
				УсловиеПроверки = Истина;
				Выполнить("УсловиеПроверки = " + ПравилаПреобразования.УсловиеОтбораСтрок);
				Если УсловиеПроверки Тогда
					 НаборСтрокТабличнойЧасти.Добавить(СтрокаДокумента);
				 КонецЕсли;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;
	
	Если НаборСтрокТабличнойЧасти.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	//Составим список колонок результирующей таблицы, которые можно получить из исходной переименованием
	Для каждого КолонкаПравилПреобразования Из ВсеПравилаПреобразования.Колонки Цикл
		
		СтруктураЗначенийСвойств.Вставить(КолонкаПравилПреобразования.Имя);
		
		Правило = НРег(ПравилаПреобразования[КолонкаПравилПреобразования.Имя]);
		
		Если Лев(Правило, ДлинаТекстСтрокаДокумента) = ТекстСтрокаДокумента Тогда
			ИмяКолонкиТабличнойЧасти = Сред(Правило, ДлинаТекстСтрокаДокумента + 1);
			Если СписокКолонокТабличнойЧасти.НайтиПоЗначению(ИмяКолонкиТабличнойЧасти) = Неопределено Тогда
				КолонкиТабличнойЧасти = КолонкиТабличнойЧасти + "," + ИмяКолонкиТабличнойЧасти;
			КонецЕсли; 
			СписокКолонокТабличнойЧасти.Добавить(ИмяКолонкиТабличнойЧасти, КолонкаПравилПреобразования.Имя);
		КонецЕсли; 
		
	КонецЦикла;	
	
	// На основании полученного списка колонок табличной части скопируем табличную часть.
	Если КолонкиТабличнойЧасти = "" Тогда
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("СтрокаИсходнойТаблицы");
		Для Каждого СтрокаДокумента Из НаборСтрокТабличнойЧасти Цикл
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.СтрокаИсходнойТаблицы = СтрокаДокумента;
		КонецЦикла;	
	Иначе
		КолонкиТабличнойЧасти = Сред(КолонкиТабличнойЧасти, 2);
		
		Результат = ТабличнаяЧасть.СкопироватьКолонки(КолонкиТабличнойЧасти);
		Результат.Колонки.Добавить("СтрокаИсходнойТаблицы");
		Для Каждого СтрокаДокумента Из НаборСтрокТабличнойЧасти Цикл
			 НоваяСтрока = Результат.Добавить();
			 НоваяСтрока.СтрокаИсходнойТаблицы = СтрокаДокумента;
			 ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
		КонецЦИкла;	
		
		//Переименуем колонки в копии табличной части
		Для каждого КолонкаТабличнойЧасти Из СписокКолонокТабличнойЧасти Цикл
			Если Результат.Колонки.Найти(КолонкаТабличнойЧасти.Значение) <> Неопределено Тогда
				Результат.Колонки[КолонкаТабличнойЧасти.Значение].Имя = КолонкаТабличнойЧасти.Представление;
			КонецЕсли;
		КонецЦикла;
		
		// Если в копии табличной части нет нужной колонки (возможно при соответствии многие-к-одному)
		// скопируем аналогичную колонку
		Для каждого КолонкаТабличнойЧасти Из СписокКолонокТабличнойЧасти Цикл
			Если Результат.Колонки.Найти(КолонкаТабличнойЧасти.Представление) = Неопределено Тогда
				Правило = НРег(ПравилаПреобразования[КолонкаТабличнойЧасти.Представление]);
				ИмяКолонкиТабличнойЧасти = Сред(Правило, ДлинаТекстСтрокаДокумента + 1);
				Результат.Колонки.Добавить(КолонкаТабличнойЧасти.Представление, ТабличнаяЧасть.Колонки[ИмяКолонкиТабличнойЧасти].ТипЗначения);
				Для Каждого СтрокаРезультата Из Результат Цикл
					СтрокаРезультата[КолонкаТабличнойЧасти.Представление] = СтрокаРезультата.СтрокаИсходнойТаблицы[ИмяКолонкиТабличнойЧасти];
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	// Заполним остальные колонки данными (из шапки, значения перечисления и т.п.)
	МассивТипов = Новый Массив;	
	Для каждого КолонкаПравилПреобразования Из ВсеПравилаПреобразования.Колонки Цикл
		Если (Нрег(КолонкаПравилПреобразования.Имя) = Нрег("ИмяПравилаПреобразования"))
		  ИЛИ (Нрег(КолонкаПравилПреобразования.Имя) = Нрег("УсловиеОтбораСтрок")) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Результат.Колонки.Найти(КолонкаПравилПреобразования.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Правило = НРег(ПравилаПреобразования[КолонкаПравилПреобразования.Имя]);
		Если ПустаяСтрока(Правило) Тогда
			Результат.Колонки.Добавить(КолонкаПравилПреобразования.Имя);
			Продолжить;
		КонецЕсли;
		
		Результат.Колонки.Добавить(КолонкаПравилПреобразования.Имя);
		НомерСтрокиНабораСтрокТЧ = 0;
		Для Каждого СтрокаДокумента Из НаборСтрокТабличнойЧасти Цикл
			Выполнить("ЗначениеКолонки = " + Правило);
			Результат[НомерСтрокиНабораСтрокТЧ][КолонкаПравилПреобразования.Имя] = ЗначениеКолонки;
			НомерСтрокиНабораСтрокТЧ = НомерСтрокиНабораСтрокТЧ + 1;
		КонецЦикла;
	КонецЦикла;
	
	//Очистим колонки в соответствии с настройками учетной политики
	ОчиститьКолонкиВСоответствииСНастройкамиУчетнойПолитики(ИмяРегистра, СтруктураШапкиДокумента, Результат, НаборСтрокТабличнойЧасти);
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтруктуруДанныхВСоответствииСШаблоном


// Преобразует характер затрат в направление списания
//
// Параметры:
//	ХарактерЗатрат - характер затрат, определяющая направление списания в производство.
//
// Возвращаемое значение:
//	Направление списания.
//
Функция ПолучитьНаправлениеСписанияПоХарактеруЗатрат(ХарактерЗатрат,ВидОтраженияВУчете)
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
		Возврат "ВложенияВоВнеоборотныеАктивы";
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
			Возврат "НаПроизводство";
		Иначе
			Возврат "Прочие";
		КонецЕсли;	
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.НеУчитываемыеВУправленческомУчете Тогда
		Возврат "Прочие";
	Иначе
		Возврат "НаПроизводство";
	КонецЕсли;
КонецФункции	

// Преобразует статью в направление списания
// Применяется только для упр. учета
//
// Параметры:
//	КодОперации   - код операции по регистру партий
//	СтатьяЗатрат  - статья затрат, определяющая направление списания в производство.
//
// Возвращаемое значение:
//	Направление списания.
//
Функция ПолучитьНаправлениеСписанияПоСтатьеЗатрат(СтатьяЗатрат)
	Если ЗначениеЗаполнено(СтатьяЗатрат) ТОгда
		ХарактерЗатрат  = СтатьяЗатрат.ХарактерЗатрат;
	Иначе
		ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
	КонецЕсли;	
	Возврат ПолучитьНаправлениеСписанияПоХарактеруЗатрат(ХарактерЗатрат, Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);
КонецФункции	

// Преобразует счет учета в направление списания
// Применяется только для регл. учета
//
// Параметры:
//	КодОперации   - код операции по регистру партий
//	СтатьяЗатрат  - статья затрат, определяющая направление списания в производство.
//
// Возвращаемое значение:
//	Направление списания.
//
Функция ПолучитьНаправлениеСписанияПоСчетуУчета(СтатьяЗатрат = Неопределено, СчетЗатрат = Неопределено)
	ХарактерЗатрат  = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, СтатьяЗатрат);
	Возврат ПолучитьНаправлениеСписанияПоХарактеруЗатрат(ХарактерЗатрат, Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете);
КонецФункции	

// Формирует движения по корректировкам по курсам зачетам авансов
//
// Параметры:
//	ДокументПоступления   	- ссылка на документ, движения которого нужно корректировать
//  Коэфф - Коэффициент корректировки
//  ВидУчета - строка, принимающая следующие значения "Бух" и "Нал".
//
//
Процедура СформироватьДвиженияПоПереоценкеТоваров(ДокументПоступления, Коэфф, ВидУчета) Экспорт
	
	НаборЗаписей = РегистрыНакопления.УчетЗатратРегл.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументПоступления);
	НаборЗаписей.Прочитать();
	
	КодОперации = ?(ВидУчета = "Бух", Перечисления.КодыОперацийПартииТоваров.ПереоценкаВалютныхАвансовБУ, Перечисления.КодыОперацийПартииТоваров.ПереоценкаВалютныхАвансовНУ);
	
	СчетчикЦикла = НаборЗаписей.Количество();
	Пока СчетчикЦикла > 0 Цикл
		СчетчикЦикла = СчетчикЦикла - 1;
		Если НаборЗаписей[СчетчикЦикла].КодОперации = КодОперации Тогда
			НаборЗаписей.Удалить(СчетчикЦикла);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДвижений    = НаборЗаписей.Выгрузить();
	КоличествоДвижений = НаборЗаписей.Количество();
	
	Для ТекСтрока = 0 по КоличествоДвижений - 1 Цикл
		
		СтрокаДвижения = ТаблицаДвижений[ТекСтрока];
		
		Если СтрокаДвижения.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПереоценкаВалютныхАвансовБУ 
			ИЛИ СтрокаДвижения.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПереоценкаВалютныхАвансовНУ Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяЗапись = НаборЗаписей.Добавить();
		БухгалтерскийУчетРасчетовСКонтрагентами.ДополнитьЗаписьРегистраПоСтрокеТаблицы(НоваяЗапись, СтрокаДвижения, ТаблицаДвижений);
		
		НоваяЗапись.Количество   = 0;
		НоваяЗапись.КоличествоНУ = 0;
		
		НоваяЗапись.Стоимость     = НоваяЗапись.Стоимость * Коэфф;
		НоваяЗапись.СтоимостьНУ   = НоваяЗапись.СтоимостьНУ * Коэфф;
		НоваяЗапись.НДСВходящий   = НоваяЗапись.НДСВходящий * Коэфф;
		НоваяЗапись.НДСКредит     = НоваяЗапись.НДСКредит* Коэфф;
		
		НоваяЗапись.КодОперации = КодОперации;
		
	КонецЦикла;	
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры


Функция ПолучитьНалоговоеНазначениеЗапасов(СтрокаДокумента)
	Если СтрокаДокумента.РазрешитьРаспределяемоеНалоговоеНазначениеЗапасов Тогда
		Возврат Справочники.НалоговыеНазначенияАктивовИЗатрат.Распределяемое;
	Иначе
		Возврат СтрокаДокумента.НалоговоеНазначение; 
	КонецЕсли; 
КонецФункции		

// Процедура удаляет мутабельные значения из параметра "Источник"
//
// Параметры:
//	Источник  - структура.
Процедура ПодготовитьИсточникДляВозвратаКлиенту(Источник)
	Если ТипЗНЧ(Источник) = Тип("Структура") Тогда
		Источник.Движения = Новый Структура();
	КонецЕсли;	
КонецПроцедуры

// Процедура записывает наборы записей в базу данных
//
// Параметры:
//	Движения  - структура наборов записей.
Процедура ЗаписатьСтруктуруДвиженийВБазуДанных(Движения)
	//Запись движений в БД
	Для Каждого ТекущийНабор Из Движения Цикл
		Если ТекущийНабор.Значение.Модифицированность() Тогда
			ТекущийНабор.Значение.Записать(Ложь);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ФОРМИРОВАНИЕ ДВИЖЕНИЙ ПО АНАЛИТИЧЕСКИМ РЕГИСТРАМ

// Функция возвращает структуру содержащую реквизиты ключа аналитики
//
// Параметры:
//  ИмяКлючаАналитики - строка, содержащая имя ключа аналитики,
//  КлючАналитики - ссылка, на ключ аналитики,
//  СтруктураКлючиАналитики - структура, содержащая кэш по ключам аналитики.
//
// Возвращаемое значение:
//  Структура содержащая аналитику.
//
Функция ПолучитьАналитикуПоКлючуАналитики(ИмяКлючаАналитики, КлючАналитики, СтруктураКлючиАналитики)
	//Попробуем получить данные из кэша
	Если (НЕ СтруктураКлючиАналитики = Неопределено) И СтруктураКлючиАналитики.Свойство(ИмяКлючаАналитики) Тогда
		СтрокаАналитики = СтруктураКлючиАналитики[ИмяКлючаАналитики].Найти(КлючАналитики,"КлючАналитики");
	Иначе
		СтрокаАналитики = Неопределено;
	КонецЕсли;	
	
	//Если не получилось, получим из БД
	Если СтрокаАналитики = Неопределено Тогда
		//Извлекаем данные из регистра
		Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений." + ИмяКлючаАналитики + " КАК Аналитика ГДЕ Аналитика.Ссылка = &КлючАналитики");
		Запрос.УстановитьПараметр("КлючАналитики",КлючАналитики);
		ТаблицаАналитики = Запрос.Выполнить().Выгрузить();
		Если ТаблицаАналитики.Количество() > 0 Тогда
			СтрокаАналитики = ТаблицаАналитики[0];
		КонецЕсли;
	КонецЕсли;	
	Возврат СтрокаАналитики; 
КонецФункции //ПолучитьАналитикуПоКлючуАналитики()	

// Процедура заполняет значения свойств в структуре "Получатель" по схеме
//
// Параметры:
//  Получатель - структура, которая формируется в результате выполнения процедуры,
//  Источник - структура, содержащая исходную информацию,
//  Схема - структура, соответствие полей структуры "Источник" и структуры "Получатель".
//
Процедура ЗаполнитьЗначенияСвойствПоСхеме(Получатель,Источник,Схема)
	Для Каждого ТекущийЭлементСхемы Из Схема Цикл
		Если НЕ Источник.Владелец().Колонки.Найти(ТекущийЭлементСхемы.Ключ) = Неопределено Тогда
			Если ТекущийЭлементСхемы.Значение = Неопределено Тогда
				ИмяПоляПолучателя = ТекущийЭлементСхемы.Ключ;
			Иначе
				ИмяПоляПолучателя = ТекущийЭлементСхемы.Значение;
			КонецЕсли;
			Получатель[ИмяПоляПолучателя] = Источник[ТекущийЭлементСхемы.Ключ];
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры	//ЗаполнитьЗначенияСвойствПоСхеме()

// Процедура добавляет и заполняет в таблице затрат колонки по реквизитам свернутым в ключах аналитики
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  СтруктураАналитики - структура, содержащая список разворачиваемых колонок,
//  Отказ - булево, признак возникновения ошибки,
//  СтруктураКлючиАналитики - структура, кэш по ключам аналитики,
//  КорАналитика - булево, признак того что аналитику нужно разворачивать из кор. аналитики.
//
Процедура ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаЗатрат, СтруктураАналитики, Отказ=Ложь, СтруктураКлючиАналитики=Неопределено, КорАналитика = Ложь) Экспорт
	
	Если КорАналитика Тогда
		ПрефиксКолонок = "Кор";
	Иначе
		ПрефиксКолонок = "";
	КонецЕсли;	
	
	//Добавляем дополнительные колонки в таблицу затрат
	Для Каждого ЭлементСтруктурыАналитики Из СтруктураАналитики Цикл
		Если ЭлементСтруктурыАналитики.Значение = Неопределено Тогда
			ИмяПоляПолучателя = ЭлементСтруктурыАналитики.Ключ;
		Иначе
			ИмяПоляПолучателя = ЭлементСтруктурыАналитики.Значение;
		КонецЕсли;
		
		Если ТаблицаЗатрат.Колонки.Найти(ИмяПоляПолучателя) = Неопределено Тогда
			ТаблицаЗатрат.Колонки.Добавить(ИмяПоляПолучателя);
		КонецЕсли;
	КонецЦикла;	
	
	//Заполняем новые колонки в таблице затрат
	Для Каждого ТекущаяСтрока Из ТаблицаЗатрат Цикл
		АналитикаВидаУчета = ПолучитьАналитикуПоКлючуАналитики("АналитикаВидаУчета", ТекущаяСтрока[ПрефиксКолонок + "АналитикаВидаУчета"], СтруктураКлючиАналитики);
		Если НЕ АналитикаВидаУчета = Неопределено Тогда
			ЗаполнитьЗначенияСвойствПоСхеме(ТекущаяСтрока,АналитикаВидаУчета,СтруктураАналитики);		
		КонецЕсли;
		
		АналитикаУчетаПрочихЗатрат = ПолучитьАналитикуПоКлючуАналитики("АналитикаУчетаПрочихЗатрат", ТекущаяСтрока[ПрефиксКолонок + "АналитикаВидаУчета"], СтруктураКлючиАналитики);
		Если НЕ АналитикаУчетаПрочихЗатрат = Неопределено Тогда
			ЗаполнитьЗначенияСвойствПоСхеме(ТекущаяСтрока,АналитикаУчетаПрочихЗатрат,СтруктураАналитики);		
		КонецЕсли;		
		 
		АналитикаУчетаЗатрат = ПолучитьАналитикуПоКлючуАналитики("АналитикаУчетаЗатрат", ТекущаяСтрока[ПрефиксКолонок + "АналитикаУчетаЗатрат"], СтруктураКлючиАналитики);
		Если НЕ АналитикаУчетаЗатрат = Неопределено Тогда
			ЗаполнитьЗначенияСвойствПоСхеме(ТекущаяСтрока,АналитикаУчетаЗатрат,СтруктураАналитики);		
		КонецЕсли;	
		
		АналитикаУчетаПартий = ПолучитьАналитикуПоКлючуАналитики("АналитикаУчетаПартий", ТекущаяСтрока[ПрефиксКолонок + "АналитикаУчетаПартий"], СтруктураКлючиАналитики);
		Если НЕ АналитикаУчетаПартий = Неопределено Тогда
			ЗаполнитьЗначенияСвойствПоСхеме(ТекущаяСтрока,АналитикаУчетаПартий,СтруктураАналитики);		
		КонецЕсли;
		
		АналитикаРаспределенияЗатрат = ПолучитьАналитикуПоКлючуАналитики("АналитикаРаспределенияЗатрат", ТекущаяСтрока[ПрефиксКолонок + "АналитикаРаспределенияЗатрат"], СтруктураКлючиАналитики);
		Если НЕ АналитикаРаспределенияЗатрат = Неопределено Тогда
			ЗаполнитьЗначенияСвойствПоСхеме(ТекущаяСтрока,АналитикаРаспределенияЗатрат,СтруктураАналитики);				
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры //ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой()	

// Функция возвращает таблицу для формирования движений по регистру ПродажиСебестоимость
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  СтруктураКлючиАналитики - структура, содержащая кэш по ключам аналитики.
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуДвиженийПоРегиструПродажиСебестоимость(ТаблицаЗатрат,СтруктураКлючиАналитики)
	
	Если ТипЗНЧ(ТаблицаЗатрат) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСписания = ТаблицаЗатрат.СкопироватьКолонки();
	Иначе
		ТаблицаСписания = ТаблицаЗатрат.ВыгрузитьКолонки();
	КонецЕсли;
	
	Для Каждого СтрокаДвижений Из ТаблицаЗатрат Цикл
		
		// Возвратная тара не двигается по ПродажиСебестоимость
		АналитикаУчетаПартий = ПолучитьАналитикуПоКлючуАналитики("АналитикаУчетаПартий", СтрокаДвижений["АналитикаУчетаПартий"], СтруктураКлючиАналитики);
		СтатусПартии = АналитикаУчетаПартий.СтатусПартии;
		Если СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
			Продолжить;
		КонецЕсли; 
		
		Если (ТаблицаСписания.Колонки.Найти("ВидДвижения") = Неопределено
		  ИЛИ СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход)
		  И (СтрокаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.Реализация
		  ИЛИ СтрокаДвижений.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги)
		Тогда
		  
		    НоваяСтрока = ТаблицаСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
			
		КонецЕсли;	
		
		Если (ТаблицаСписания.Колонки.Найти("ВидДвижения") = Неопределено
		  ИЛИ СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Приход)
		  И СтрокаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя Тогда
		  
			НоваяСтрока = ТаблицаСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
			
			НоваяСтрока.Количество = -НоваяСтрока.Количество;
			НоваяСтрока.Стоимость = -НоваяСтрока.Стоимость;
			
		КонецЕсли;		
	КонецЦикла;	
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		СтруктураАналитики = Новый Структура();
	
		СтруктураАналитики.Вставить("Организация");
		СтруктураАналитики.Вставить("Подразделение");
		СтруктураАналитики.Вставить("Проект");
		СтруктураАналитики.Вставить("Затрата", "Номенклатура");
		СтруктураАналитики.Вставить("ХарактеристикаЗатраты", "ХарактеристикаНоменклатуры");
		СтруктураАналитики.Вставить("Заказ", "ЗаказПокупателя");

		Отказ = Ложь;
		
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, СтруктураАналитики, Отказ, СтруктураКлючиАналитики);
		
		ТаблицаСписания.Свернуть("Организация,Подразделение,Проект,Номенклатура,ХарактеристикаНоменклатуры,ЗаказПокупателя","Стоимость,Количество");
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
		Возврат ТаблицаСписания;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции //ПолучитьТаблицуДвиженийПоРегиструПродажиСебестоимость()

// Функция возвращает таблицу для формирования движений по регистру ПараметрыАмортизацииОС
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  СтруктураКлючиАналитики - структура, содержащая кэш по ключам аналитики,
//  ДатаДокумента - дата, на которую будут формироваться движения,
//  ВидОтраженияВУчете - перечисление, определяет вид учета по которому будут формироваться движения.
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуДвиженийПоРегиструПараметрыАмортизацииОС(ТаблицаЗатрат,СтруктураКлючиАналитики,ДатаДокумента, ВидОтраженияВУчете)
	
	Если ТипЗНЧ(ТаблицаЗатрат) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСписания = ТаблицаЗатрат.СкопироватьКолонки();
	Иначе
		ТаблицаСписания = ТаблицаЗатрат.ВыгрузитьКолонки();
	КонецЕсли;
	
	Для Каждого СтрокаДвижений Из ТаблицаЗатрат Цикл
		Если (ТаблицаСписания.Колонки.Найти("ВидДвижения") = Неопределено
		  ИЛИ СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход)
		  И СтрокаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОС Тогда
		  
		    НоваяСтрока = ТаблицаСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
			
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		Отказ = Ложь;
		ТаблицаСписания.Колонки.Добавить("ОрганизацияНовая",Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаСписания.Колонки.Добавить("ОсновноеСредство",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Организация","ОрганизацияНовая"), Отказ, СтруктураКлючиАналитики);
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Субконто1","ОсновноеСредство"), Отказ, СтруктураКлючиАналитики,Истина);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
			СтрокаСтоимостьНУ = " ТЗ.СтоимостьНУ, ";
			ТаблицаСписания.Свернуть("ОрганизацияНовая,ОсновноеСредство","Стоимость, СтоимостьНУ, Количество");
		Иначе
			СтрокаСтоимостьНУ = "";
			ТаблицаСписания.Свернуть("ОрганизацияНовая,ОсновноеСредство","Стоимость,Количество");
		КонецЕсли;	
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТЗ.ОрганизацияНовая КАК Справочник.Организации) КАК Организация,
		|	ВЫРАЗИТЬ(ТЗ.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство,
		|	ТЗ.Количество,
		|" + СтрокаСтоимостьНУ + "
		|	ТЗ.Стоимость
		|ПОМЕСТИТЬ ТаблицаКорректировкиСтоимостиОС
		|ИЗ	&ТаблицаЗначений КАК ТЗ";
		Запрос.УстановитьПараметр("ТаблицаЗначений",ТаблицаСписания);
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ
		|	&ДатаДокумента КАК Период,
		|	//ДляБухУчета	ТаблицаКорректировкиСтоимостиОС.Организация,
		|	//ДляНалУчета	ТаблицаКорректировкиСтоимостиОС.Организация,
		|
		|	ПараметрыАмортизацииОС.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
		|	//ДляУпрУчета ПараметрыАмортизацииОС.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
		|	//ДляБухУчета ПараметрыАмортизацииОС.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
		|	ПараметрыАмортизацииОС.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
		|
		|	//ДляУпрУчета ПараметрыАмортизацииОС.СтоимостьДляВычисленияАмортизации + ТаблицаКорректировкиСтоимостиОС.Стоимость КАК   СтоимостьДляВычисленияАмортизации,
		|	//ДляБухУчета ПараметрыАмортизацииОС.СтоимостьДляВычисленияАмортизации + ТаблицаКорректировкиСтоимостиОС.Стоимость КАК   СтоимостьДляВычисленияАмортизации,
		|	//ДляНалУчета ПараметрыАмортизацииОС.СтоимостьДляВычисленияАмортизации + ТаблицаКорректировкиСтоимостиОС.СтоимостьНУ КАК СтоимостьДляВычисленияАмортизации,
		|
		|	//ДляУпрУчета ПараметрыАмортизацииОС.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
		|	//ДляБухУчета ПараметрыАмортизацииОС.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
		|
		|	//ДляУпрУчета ПараметрыАмортизацииОС.ПрименитьВТекущемМесяце КАК ПрименитьВТекущемМесяце,
		|
		|	//ДляУпрУчета ПараметрыАмортизацииОС.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|	//ДляБухУчета ПараметрыАмортизацииОС.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
		|
		|	ТаблицаКорректировкиСтоимостиОС.ОсновноеСредство
		|
		|ИЗ	ТаблицаКорректировкиСтоимостиОС КАК ТаблицаКорректировкиСтоимостиОС
	 	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОС%СуффиксУчета%.СрезПоследних(&ДатаДокумента, (ОсновноеСредство
		|																									//ДляБухУчета, Организация
		|																									//ДляНалУчета, Организация
		|																					) В (ВЫБРАТЬ ОсновноеСредство
		|																									//ДляБухУчета, Организация
		|																									//ДляНалУчета, Организация
		|																					ИЗ ТаблицаКорректировкиСтоимостиОС)) КАК ПараметрыАмортизацииОС
		|ПО ПараметрыАмортизацииОС.ОсновноеСредство = ТаблицаКорректировкиСтоимостиОС.ОсновноеСредство
		|//ДляБухУчета	И ПараметрыАмортизацииОС.Организация = ТаблицаКорректировкиСтоимостиОС.Организация
		|//ДляНалУчета	И ПараметрыАмортизацииОС.Организация = ТаблицаКорректировкиСтоимостиОС.Организация
		|";

		Запрос.УстановитьПараметр("ДатаДокумента",ДатаДокумента);
		
		Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		Иначе	
		    Возврат Результат.Выгрузить();
		КонецЕсли;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции //ПолучитьТаблицуДвиженийПоРегиструПараметрыАмортизацииОС()

// Функция возвращает таблицу для формирования движений по регистру ПервоначальныеСведенияОС
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  СтруктураКлючиАналитики - структура, содержащая кэш по ключам аналитики,
//  ДатаДокумента - дата, на которую будут формироваться движения,
//  ВидОтраженияВУчете - перечисление, определяет вид учета по которому будут формироваться движения.
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуДвиженийПоРегиструПервоначальныеСведенияОС(ТаблицаЗатрат,СтруктураКлючиАналитики,ДатаДокумента, ВидОтраженияВУчете)
	
	Если ТипЗНЧ(ТаблицаЗатрат) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСписания = ТаблицаЗатрат.СкопироватьКолонки();
	Иначе
		ТаблицаСписания = ТаблицаЗатрат.ВыгрузитьКолонки();
	КонецЕсли;
	
	Для Каждого СтрокаДвижений Из ТаблицаЗатрат Цикл
		Если (ТаблицаСписания.Колонки.Найти("ВидДвижения") = Неопределено
		  ИЛИ СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход)
		  И СтрокаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОС Тогда
		  
		    НоваяСтрока = ТаблицаСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
			
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		Отказ = Ложь;
		ТаблицаСписания.Колонки.Добавить("ОрганизацияНовая",Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаСписания.Колонки.Добавить("ОсновноеСредство",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Организация","ОрганизацияНовая"), Отказ, СтруктураКлючиАналитики);
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Субконто1","ОсновноеСредство"), Отказ, СтруктураКлючиАналитики,Истина);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
			СтрокаСтоимостьНУ = " ТЗ.СтоимостьНУ, ";
			ТаблицаСписания.Свернуть("ОрганизацияНовая,ОсновноеСредство","Стоимость, СтоимостьНУ, Количество");
		Иначе
			СтрокаСтоимостьНУ = "";
			ТаблицаСписания.Свернуть("ОрганизацияНовая,ОсновноеСредство","Стоимость,Количество");
		КонецЕсли;	
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТЗ.ОрганизацияНовая КАК Справочник.Организации) КАК Организация,
		|	ВЫРАЗИТЬ(ТЗ.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство,
		|	ТЗ.Количество,
		|" + СтрокаСтоимостьНУ + "
		|	ТЗ.Стоимость
		|ПОМЕСТИТЬ ТаблицаКорректировкиСтоимостиОС
		|ИЗ	&ТаблицаЗначений КАК ТЗ";
		Запрос.УстановитьПараметр("ТаблицаЗначений",ТаблицаСписания);
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ
		|	&ДатаДокумента КАК Период,
		|
		|	//ДляБухУчета	ТаблицаКорректировкиСтоимостиОС.Организация,
		|	//ДляНалУчета	ТаблицаКорректировкиСтоимостиОС.Организация,
		|
		|	//ДляБухУчета	ПервоначальныеСведенияОС.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|
		|	//ДляУпрУчета	ПервоначальныеСведенияОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|	//ДляБухУчета	ПервоначальныеСведенияОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
		|
		|	//ДляУпрУчета	ПервоначальныеСведенияОС.ПервоначальнаяСтоимость 	+ ТаблицаКорректировкиСтоимостиОС.Стоимость   КАК ПервоначальнаяСтоимость,
		|	//ДляБухУчета	ПервоначальныеСведенияОС.ПервоначальнаяСтоимость 	+ ТаблицаКорректировкиСтоимостиОС.Стоимость   КАК ПервоначальнаяСтоимость,
		|	//ДляНалУчета	ПервоначальныеСведенияОС.ПервоначальнаяСтоимостьНУ 	+ ТаблицаКорректировкиСтоимостиОС.СтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
		|
		|	//ДляУпрУчета	ПервоначальныеСведенияОС.ПараметрВыработки КАК ПараметрВыработки,
		|	//ДляБухУчета	ПервоначальныеСведенияОС.ПараметрВыработки КАК ПараметрВыработки,
		|
		|	//ДляНалУчета	ПервоначальныеСведенияОС.НалоговаяГруппаОС КАК НалоговаяГруппаОС,
		|	//ДляНалУчета	ПервоначальныеСведенияОС.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходов,
		|
		|	ТаблицаКорректировкиСтоимостиОС.ОсновноеСредство
		|
		|ИЗ	ТаблицаКорректировкиСтоимостиОС КАК ТаблицаКорректировкиСтоимостиОС
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС%СуффиксУчета%.СрезПоследних(&ДатаДокумента, (ОсновноеСредство
		|																									//ДляБухУчета, Организация
		|																									//ДляНалУчета, Организация
		|																					) В (ВЫБРАТЬ ОсновноеСредство
		|																									//ДляБухУчета, Организация
		|																									//ДляНалУчета, Организация
		|																					ИЗ ТаблицаКорректировкиСтоимостиОС)) КАК ПервоначальныеСведенияОС
		|ПО ПервоначальныеСведенияОС.ОсновноеСредство = ТаблицаКорректировкиСтоимостиОС.ОсновноеСредство
		|//ДляБухУчета	И ПервоначальныеСведенияОС.Организация = ТаблицаКорректировкиСтоимостиОС.Организация
		|//ДляНалУчета	И ПервоначальныеСведенияОС.Организация = ТаблицаКорректировкиСтоимостиОС.Организация
		|";

		Запрос.УстановитьПараметр("ДатаДокумента",ДатаДокумента);
		
		Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		Иначе	
		    Возврат Результат.Выгрузить();
		КонецЕсли;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции //ПолучитьТаблицуДвиженийПоРегиструПервоначальныеСведенияОС()

// Функция возвращает таблицу для формирования движений по регистрам ЗатратыНаСтроительствоОбъектовОсновныхСредств и СтроительствоОбъектовОсновныхСредств
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  СтруктураКлючиАналитики - структура, содержащая кэш по ключам аналитики.
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств(ТаблицаЗатрат,СтруктураКлючиАналитики)
	
	Если ТипЗНЧ(ТаблицаЗатрат) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСписания = ТаблицаЗатрат.СкопироватьКолонки();
	Иначе
		ТаблицаСписания = ТаблицаЗатрат.ВыгрузитьКолонки();
	КонецЕсли;
	
	Для Каждого СтрокаДвижений Из ТаблицаЗатрат Цикл
		Если (ТаблицаСписания.Колонки.Найти("ВидДвижения") = Неопределено
		  ИЛИ СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход)
		  И (СтрокаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПередачаОборудованияВМонтаж
		    ИЛИ СтрокаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.СписаниеНаСтроительствоОбъектовОС
			ИЛИ СтрокаДвижений.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты) Тогда
			НоваяСтрока = ТаблицаСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		Отказ = Ложь;
		
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Организация"), Отказ, СтруктураКлючиАналитики);
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("ОбъектСтроительства, Субконто1","ОбъектСтроительства","СтатьяЗатрат"), Отказ, СтруктураКлючиАналитики,Истина);
		
		ТаблицаСписания.Свернуть("Организация,ОбъектСтроительства, СтатьяЗатрат, КодОперации","Стоимость");
		
		ТаблицаСписания.Колонки.Стоимость.Имя = "Сумма";
		
		СчетчикЦикла = 0;
		Пока СчетчикЦикла < ТаблицаСписания.Количество() Цикл
			Если ((ТаблицаСписания[СчетчикЦикла].КодОперации <> Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты)
				ИЛИ	(ЗначениеЗаполнено(ТаблицаСписания[СчетчикЦикла].СтатьяЗатрат) 
					И (ТаблицаСписания[СчетчикЦикла].СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы))) 
			  И ТаблицаСписания[СчетчикЦикла].Сумма <> 0 Тогда
				СчетчикЦикла = СчетчикЦикла + 1;
			Иначе
				ТаблицаСписания.Удалить(СчетчикЦикла);
			КонецЕсли;
		КонецЦикла;	
		
		ТаблицаСписания.Свернуть("Организация,ОбъектСтроительства, СтатьяЗатрат","Сумма");
		
		Если Отказ  ИЛИ ТаблицаСписания.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;	
		Возврат ТаблицаСписания;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции //ПолучитьТаблицуДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств()

Функция ПолучитьТаблицуДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредствБУ(ТаблицаЗатрат,СтруктураКлючиАналитики)
	
	Если ТипЗНЧ(ТаблицаЗатрат) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСписания = ТаблицаЗатрат.СкопироватьКолонки();
	Иначе
		ТаблицаСписания = ТаблицаЗатрат.ВыгрузитьКолонки();
	КонецЕсли;
	
	Для Каждого СтрокаДвижений Из ТаблицаЗатрат Цикл
		Если (ТаблицаСписания.Колонки.Найти("ВидДвижения") = Неопределено
		  ИЛИ СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход)
		  И (СтрокаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПередачаОборудованияВМонтаж
			ИЛИ СтрокаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.СписаниеНаСтроительствоОбъектовОС
			ИЛИ СтрокаДвижений.КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты) Тогда
			НоваяСтрока = ТаблицаСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		Отказ = Ложь;
		
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Организация"), Отказ, СтруктураКлючиАналитики);
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("ОбъектСтроительства, СчетУчета, НалоговоеНазначение, Субконто1","ОбъектСтроительства","СчетУчета","НалоговоеНазначение","СтатьяЗатрат"), Отказ, СтруктураКлючиАналитики,Истина);
		
		ТаблицаСписания.Свернуть("Организация, ОбъектСтроительства, СчетУчета, НалоговоеНазначение, СтатьяЗатрат, КодОперации",
								 "Стоимость, СтоимостьНУ, НДСВходящий,НДСКредит");
		
		
		СчетчикЦикла = 0;
		Пока СчетчикЦикла < ТаблицаСписания.Количество() Цикл
			Если ((ТаблицаСписания[СчетчикЦикла].КодОперации <> Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты)
				ИЛИ	(ЗначениеЗаполнено(ТаблицаСписания[СчетчикЦикла].СтатьяЗатрат) 
					И (ТаблицаСписания[СчетчикЦикла].СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы))) 
			  И ТаблицаСписания[СчетчикЦикла].Стоимость <> 0 Тогда
				СчетчикЦикла = СчетчикЦикла + 1;
			Иначе
				ТаблицаСписания.Удалить(СчетчикЦикла);
			КонецЕсли;
		КонецЦикла;	
		
		ТаблицаСписания.Свернуть("Организация, ОбъектСтроительства, СчетУчета, НалоговоеНазначение, СтатьяЗатрат",
								 "Стоимость, СтоимостьНУ, НДСВходящий, НДСКредит");
		
		Если Отказ  ИЛИ ТаблицаСписания.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;	
		Возврат ТаблицаСписания;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции // ПолучитьТаблицуДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредствБУ()

// Функция возвращает таблицу для формирования движений по регистру СтоимостьОС
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  СтруктураКлючиАналитики - структура, содержащая кэш по ключам аналитики,
//  ВидОтраженияВУчете - вид отражения в учете
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуДвиженийПоРегиструСтоимостьОС(ТаблицаЗатрат, СтруктураКлючиАналитики, ВидОтраженияВУчете)
	
	Если ТипЗНЧ(ТаблицаЗатрат) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСписания = ТаблицаЗатрат.СкопироватьКолонки();
	Иначе
		ТаблицаСписания = ТаблицаЗатрат.ВыгрузитьКолонки();
	КонецЕсли;
	
	Для Каждого СтрокаДвижений Из ТаблицаЗатрат Цикл
		Если (ТаблицаСписания.Колонки.Найти("ВидДвижения") = Неопределено
		  ИЛИ СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход)
		  И СтрокаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОС Тогда
			НоваяСтрока = ТаблицаСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
			
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		Отказ = Ложь;
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Организация"), Отказ, СтруктураКлючиАналитики);
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Субконто1","ОсновноеСредство"), Отказ, СтруктураКлючиАналитики,Истина);
		
			
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
		

	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда	
		ТаблицаСписания.Свернуть("Организация, ОсновноеСредство",
		                         "Стоимость, СтоимостьНУ, Количество");
	Иначе
		ТаблицаСписания.Свернуть("Организация, ОсновноеСредство",
		                         "Стоимость, Количество");
	КонецЕсли;	
		
		Возврат ТаблицаСписания;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции //ПолучитьТаблицуДвиженийПоРегиструСтоимостьОС()

// Функция возвращает таблицу для формирования движений по регистру ОССписанныеНаЗатраты
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  СтруктураКлючиАналитики - структура, содержащая кэш по ключам аналитики.
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуДвиженийПоРегиструОССписанныеНаЗатраты(ТаблицаЗатрат,СтруктураКлючиАналитики)
	Если ТипЗНЧ(ТаблицаЗатрат) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСписания = ТаблицаЗатрат.СкопироватьКолонки();
	Иначе
		ТаблицаСписания = ТаблицаЗатрат.ВыгрузитьКолонки();
	КонецЕсли;
	
	Для Каждого СтрокаДвижений Из ТаблицаЗатрат Цикл
		Если (ТаблицаСписания.Колонки.Найти("ВидДвижения") = Неопределено
		  ИЛИ СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход)
		  И СтрокаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОССоСписаниемНаЗатраты Тогда
			НоваяСтрока = ТаблицаСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДвижений);
			
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблицаСписания.Количество() > 0 Тогда
		Отказ = Ложь;
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Организация"), Отказ, СтруктураКлючиАналитики);
		ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, Новый Структура("Субконто1","ОсновноеСредство"), Отказ, СтруктураКлючиАналитики,Истина);
		
			
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		ТаблицаСписания.Свернуть("Организация,ОсновноеСредство","Стоимость");
		
		Возврат ТаблицаСписания;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции //ПолучитьТаблицуДвиженийПоРегиструОССписанныеНаЗатраты()

// Процедура формирует движения по аналитическим регистрам, по результатам движений по регистрам УчетЗатрат и УчетЗатратРегл
//
// Параметры:
//  ТаблицаЗатрат - таблица затрат,
//  Регистратор - ссылка на документ, который формирует движения по регистрам,
//  Отказ - булево, признак возникновения ошибки,
//  Период - дата формирования движений,
//  СтруктураКлючиАналитики - структура, кэш по ключам аналитики,
//  Движения - коллекция наборов записей регистров,
//  ВидОтраженияВУчете 
//
Процедура СформироватьДвиженияПоАналитическимРегистрам(
	ТаблицаЗатрат,
	Регистратор,
	Отказ=Ложь,
	Период,
	СтруктураКлючиАналитики,
	Движения, 
	ВидОтраженияВУчете) Экспорт
	
	СтруктруаНаборовЗаписей = Новый Соответствие();
	
	
	ТаблицаДвиженийПоРегиструСтоимостьОС = ПолучитьТаблицуДвиженийПоРегиструСтоимостьОС(ТаблицаЗатрат,СтруктураКлючиАналитики, ВидОтраженияВУчете);
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		ТаблицаДвиженийПоРегиструПродажиСебестоимость = ПолучитьТаблицуДвиженийПоРегиструПродажиСебестоимость(ТаблицаЗатрат,СтруктураКлючиАналитики);
		ТаблицаДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств = ПолучитьТаблицуДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств(ТаблицаЗатрат,СтруктураКлючиАналитики);
		ТаблицаДвиженийПоРегиструПараметрыАмортизацииОС = ПолучитьТаблицуДвиженийПоРегиструПараметрыАмортизацииОС(ТаблицаЗатрат,СтруктураКлючиАналитики, Период, Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);
		ТаблицаДвиженийПоРегиструПервоначальныеСведенияОС = ПолучитьТаблицуДвиженийПоРегиструПервоначальныеСведенияОС(ТаблицаЗатрат,СтруктураКлючиАналитики, Период, Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);

		Если НЕ ТаблицаДвиженийПоРегиструПродажиСебестоимость = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ПродажиСебестоимость")) Тогда
				Движения.Вставить("ПродажиСебестоимость",РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей());
				Движения.ПродажиСебестоимость.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.ПродажиСебестоимость, ТаблицаДвиженийПоРегиструПродажиСебестоимость);
		КонецЕсли;
		
		Если НЕ ТаблицаДвиженийПоРегиструСтоимостьОС = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("СтоимостьОС")) Тогда
				Движения.Вставить("СтоимостьОС",РегистрыНакопления.СтоимостьОС.СоздатьНаборЗаписей());
				Движения.СтоимостьОС.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.СтоимостьОС, ТаблицаДвиженийПоРегиструСтоимостьОС);
		КонецЕсли;
		
		
		Если НЕ ТаблицаДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ЗатратыНаСтроительствоОбъектовОсновныхСредств")) Тогда
				Движения.Вставить("ЗатратыНаСтроительствоОбъектовОсновныхСредств",РегистрыНакопления.ЗатратыНаСтроительствоОбъектовОсновныхСредств.СоздатьНаборЗаписей());
				Движения.ЗатратыНаСтроительствоОбъектовОсновныхСредств.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			СтруктруаНаборовЗаписей.Вставить(Движения.ЗатратыНаСтроительствоОбъектовОсновныхСредств, ТаблицаДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств);
			
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("СтроительствоОбъектовОсновныхСредств")) Тогда
				Движения.Вставить("СтроительствоОбъектовОсновныхСредств",РегистрыНакопления.СтроительствоОбъектовОсновныхСредств.СоздатьНаборЗаписей());
				Движения.СтроительствоОбъектовОсновныхСредств.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			СтруктруаНаборовЗаписей.Вставить(Движения.СтроительствоОбъектовОсновныхСредств, ТаблицаДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредств);
		КонецЕсли;
		
		Если НЕ ТаблицаДвиженийПоРегиструПараметрыАмортизацииОС = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ПараметрыАмортизацииОС")) Тогда
				Движения.Вставить("ПараметрыАмортизацииОС",РегистрыСведений.ПараметрыАмортизацииОС.СоздатьНаборЗаписей());
				Движения.ПараметрыАмортизацииОС.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.ПараметрыАмортизацииОС, ТаблицаДвиженийПоРегиструПараметрыАмортизацииОС);
		КонецЕсли;
		
		Если НЕ ТаблицаДвиженийПоРегиструПервоначальныеСведенияОС = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ПервоначальныеСведенияОС")) Тогда
				Движения.Вставить("ПервоначальныеСведенияОС",РегистрыСведений.ПервоначальныеСведенияОС.СоздатьНаборЗаписей());
				Движения.ПервоначальныеСведенияОС.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.ПервоначальныеСведенияОС, ТаблицаДвиженийПоРегиструПервоначальныеСведенияОС);			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		
		ТаблицаДвиженийПоРегиструПараметрыАмортизацииОСБухгалтерскийУчет   = ПолучитьТаблицуДвиженийПоРегиструПараметрыАмортизацииОС(ТаблицаЗатрат,СтруктураКлючиАналитики, Период, Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете); 
		ТаблицаДвиженийПоРегиструПервоначальныеСведенияОСБухгалтерскийУчет = ПолучитьТаблицуДвиженийПоРегиструПервоначальныеСведенияОС(ТаблицаЗатрат,СтруктураКлючиАналитики, Период, Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете);
		
		ТаблицаДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредствБУ = ПолучитьТаблицуДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредствБУ(ТаблицаЗатрат, СтруктураКлючиАналитики);
		
		ТаблицаДвиженийПоРегиструПараметрыАмортизацииОСНалоговыйУчет    = ПолучитьТаблицуДвиженийПоРегиструПараметрыАмортизацииОС(ТаблицаЗатрат,СтруктураКлючиАналитики, Период, Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете); 
		ТаблицаДвиженийПоРегиструПервоначальныеСведенияОСНалоговыйУчет  = ПолучитьТаблицуДвиженийПоРегиструПервоначальныеСведенияОС(ТаблицаЗатрат,СтруктураКлючиАналитики, Период, Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете);
		
		
		Если НЕ ТаблицаДвиженийПоРегиструСтоимостьОС = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("СтоимостьОСБухгалтерскийУчет")) Тогда
				Движения.Вставить("СтоимостьОСБухгалтерскийУчет",РегистрыНакопления.СтоимостьОСБухгалтерскийУчет.СоздатьНаборЗаписей());
				Движения.СтоимостьОСБухгалтерскийУчет.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.СтоимостьОСБухгалтерскийУчет, ТаблицаДвиженийПоРегиструСтоимостьОС);
			
		КонецЕсли;
		
		
		
		Если НЕ ТаблицаДвиженийПоРегиструПараметрыАмортизацииОСБухгалтерскийУчет = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ПараметрыАмортизацииОСБухгалтерскийУчет")) Тогда
				Движения.Вставить("ПараметрыАмортизацииОСБухгалтерскийУчет",РегистрыСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СоздатьНаборЗаписей());
				Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.ПараметрыАмортизацииОСБухгалтерскийУчет, ТаблицаДвиженийПоРегиструПараметрыАмортизацииОСБухгалтерскийУчет);
		КонецЕсли;		
		
		Если НЕ ТаблицаДвиженийПоРегиструПараметрыАмортизацииОСНалоговыйУчет = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ПараметрыАмортизацииОСНалоговыйУчет")) Тогда
				Движения.Вставить("ПараметрыАмортизацииОСНалоговыйУчет",РегистрыСведений.ПараметрыАмортизацииОСНалоговыйУчет.СоздатьНаборЗаписей());
				Движения.ПараметрыАмортизацииОСНалоговыйУчет.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.ПараметрыАмортизацииОСНалоговыйУчет, ТаблицаДвиженийПоРегиструПараметрыАмортизацииОСНалоговыйУчет);
		КонецЕсли;		
		
		
		Если НЕ ТаблицаДвиженийПоРегиструПервоначальныеСведенияОСБухгалтерскийУчет = Неопределено Тогда
			Если ТипЗНЧ(Движения) = Тип("Структура") И 
			  (НЕ Движения.Свойство("ПервоначальныеСведенияОСБухгалтерскийУчет")) Тогда
				Движения.Вставить("ПервоначальныеСведенияОСБухгалтерскийУчет",РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СоздатьНаборЗаписей());
				Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Отбор.Регистратор.Установить(Регистратор);
			КонецЕсли;
			
			СтруктруаНаборовЗаписей.Вставить(Движения.ПервоначальныеСведенияОСБухгалтерскийУчет, ТаблицаДвиженийПоРегиструПервоначальныеСведенияОСБухгалтерскийУчет);					
		КонецЕсли;	
		
	  	Если НЕ ТаблицаДвиженийПоРегиструПервоначальныеСведенияОСНалоговыйУчет = Неопределено Тогда
	  		Если ТипЗНЧ(Движения) = Тип("Структура") И 
	  		  (НЕ Движения.Свойство("ПервоначальныеСведенияОСНалоговыйУчет")) Тогда
	  			Движения.Вставить("ПервоначальныеСведенияОСНалоговыйУчет",РегистрыСведений.ПервоначальныеСведенияОСНалоговыйУчет.СоздатьНаборЗаписей());
	  			Движения.ПервоначальныеСведенияОСНалоговыйУчет.Отбор.Регистратор.Установить(Регистратор);
	  		КонецЕсли;
	  		
	  		СтруктруаНаборовЗаписей.Вставить(Движения.ПервоначальныеСведенияОСНалоговыйУчет, ТаблицаДвиженийПоРегиструПервоначальныеСведенияОСНалоговыйУчет);
	  	КонецЕсли;
		
		
		Если НЕ ТаблицаДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредствБУ = Неопределено Тогда
		  	Если ТипЗНЧ(Движения) = Тип("Структура") И 
		  	  (НЕ Движения.Свойство("СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет")) Тогда
		  			Движения.Вставить("СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет",РегистрыНакопления.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.СоздатьНаборЗаписей());
		  		Движения.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.Отбор.Регистратор.Установить(Регистратор);
		  	КонецЕсли;
		  	СтруктруаНаборовЗаписей.Вставить(Движения.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет, ТаблицаДвиженийПоРегиструЗатратыНаСтроительствоОбъектовОсновныхСредствБУ);
		КонецЕсли;

	КонецЕсли;	
	
	Для Каждого ЭлементСоответствия Из СтруктруаНаборовЗаписей Цикл
		ТекущийНабор = ЭлементСоответствия.Ключ;
		ТекущаяТаблицаДвижений = ЭлементСоответствия.Значение;
		
		ТаблицаДвижений = ТекущийНабор.ВыгрузитьКолонки();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТекущаяТаблицаДвижений, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения( Период, "Период");
		ТаблицаДвижений.ЗаполнитьЗначения( Истина, "Активность");
		
		ТекущийНабор.Загрузить(ТаблицаДвижений);
		
		ТекущийНабор.Записать(Ложь);
     КонецЦикла;
			
КонецПроцедуры //СформироватьДвиженияПоАналитическимРегистрам()



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ФОРМИРОВАНИЕ ПРОВОДОК


Функция СформироватьСторноПроводку(КодОперации)
	
	Если КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч 
		ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс
		
		Тогда
		
		Возврат Истина;
	
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции // СформироватьСторноПроводку()
 
// Функция определяет наличие реквизита в строке движения
//
// Параметры:
//  Движение - строка таблицы значений, набора записей или структура,
//  Реквизит - строка - имя реквизита.
//
// Возвращаемое значение:
//  Булево - признак наличия реквизита в строке движения
//
Функция ЕстьРеквизитВТаблицеДвижений(Движение,Реквизит)
	Если ТипЗНЧ(Движение) = Тип("Структура") Тогда
		Возврат Движение.Свойство(Реквизит);
	Иначе
		Возврат (Движение.Владелец().Колонки.Найти(Реквизит) <> Неопределено)
	КонецЕсли;	
КонецФункции	

// Процедура заполняет аналитику (счета и субконто) в проводке по переданной структуре
//
// Параметры:
//  Проводка - запись регистра бухгалтерии,
//  СтрокаДокумента - структра, содержащая данные для записи в регистр,
//  СтруктураПараметров - структура, содержащая структуру наборов записей и важные реквизиты шапки документа,
//  ВидУчета - строка, принимающая следующие значения "Бух" и "Нал".
//
Процедура ЗаполнитьСубконтоПоСписаниюТоваровРеглРасширеннаяАналитика(Проводка, СтрокаДокумента, СтруктураПараметров, ВидУчета)
	
	Если ВидУчета = "Бух" тогда
		
		СчетТоварыПринятые    = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию;
		СуффиксУчетаДляСубконто = "";
		
	КонецЕсли;	
	
	ВидСубконтоНоменклатура = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	ВидСубконтоНоменклатурныеГруппы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	ВидСубконтоСклады       = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	ВидСубконтоПодразделения= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения;
	ВидСубконтоСтатьиЗатрат = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	ВидСубконтоДоговоры     = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	ВидСубконтоКонтрагенты  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоКомиссионеры = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Комиссионеры;
	ВидСубконтоОбъектыСтроительства = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства;
	ВидСубконтоОсновныеСредства = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
	
	ВидСубконтоСтатьиДоходов = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов;
	
	// Заполняем дебет:
	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
		НомерСубконто = 0;
		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
			НомерСубконто = НомерСубконто + 1;
			СубконтоЗаполнено = Ложь;
			Если ВидСубконто.ВидСубконто = ВидСубконтоНоменклатура Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Затрата);
				
				Если ЗначениеЗаполнено(СтрокаДокумента.КорЗатрата) Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.КорЗатрата);
					СубконтоЗаполнено = Истина;
					
				КонецЕсли;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоПодразделения Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.КорПодразделениеОрганизации);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСклады Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СкладПолучатель);
				
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСтатьиЗатрат Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.КорСтатьяЗатрат) Тогда
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.КорСтатьяЗатрат);
					СубконтоЗаполнено = Истина;
				КонецЕсли;	
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоНоменклатурныеГруппы Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.КорНоменклатурнаяГруппа) Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.КорНоменклатурнаяГруппа);
					СубконтоЗаполнено = Истина;
					
				КонецЕсли;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоДоговоры Тогда
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.КорДоговорКомиссионера);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоОбъектыСтроительства Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.КорОбъектСтроительства) Тогда
					
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.КорОбъектСтроительства);
					СубконтоЗаполнено = Истина;
					
				КонецЕсли;	
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКонтрагенты Тогда
				
				Контрагент = Неопределено;
				
				// Для товаров принятых субконто Контрагент - это комитент
				Если УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СчетВИерархии(Проводка.СчетДт, СчетТоварыПринятые, СтруктураПараметров) Тогда
					
					Если ЗначениеЗаполнено(СтрокаДокумента.КорДоговорКомитента) Тогда
						Контрагент = СтрокаДокумента.КорДоговорКомитента.Владелец;
					Иначе
						Контрагент = Справочники.Контрагенты.ПустаяСсылка();
					КонецЕсли;	
					
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаДокумента.КорКомиссионер) Тогда
						Контрагент = СтрокаДокумента.КорКомиссионер;
					Иначе
						Контрагент = Справочники.Контрагенты.ПустаяСсылка();
					КонецЕсли;					
					
				КонецЕсли;
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, Контрагент);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКомиссионеры Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.КорКомиссионер) Тогда
					Комиссионер = СтрокаДокумента.КорКомиссионер;
				Иначе
					Комиссионер = Справочники.Контрагенты.ПустаяСсылка();
				КонецЕсли;									
				
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, Комиссионер);
				СубконтоЗаполнено = Истина;
				
	
			КонецЕсли;
			
			Если НЕ СубконтоЗаполнено Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента["КорСубконто" + СуффиксУчетаДляСубконто + Строка(НомерСубконто)]) ТОгда
					//Если указано субконто с нужным номером
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента["КорСубконто" + СуффиксУчетаДляСубконто + Строка(НомерСубконто)]);
				Иначе
					//Проверим по типу другие субконто
					Для СчетчикСубконто = 1 По 3 Цикл
						Если НЕ СчетчикСубконто = НомерСубконто
						  И	ЗначениеЗаполнено(СтрокаДокумента["КорСубконто" + СуффиксУчетаДляСубконто + Строка(СчетчикСубконто)])
						  И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗНЧ(СтрокаДокумента["КорСубконто" + СуффиксУчетаДляСубконто + Строка(СчетчикСубконто)])) Тогда
							  Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента["КорСубконто" + СуффиксУчетаДляСубконто + Строка(СчетчикСубконто)]);
							  Прервать;
						КонецЕсли;
					КонецЦикла;	  
				КонецЕсли
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполняем кредит
	Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
		
		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
			
			СубконтоЗаполнено = Ложь;
			
			Если ВидСубконто.ВидСубконто = ВидСубконтоНоменклатура Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Затрата);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоПодразделения Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ПодразделениеОрганизации);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСклады Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСтатьиЗатрат Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СтатьяЗатрат);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоНоменклатурныеГруппы Тогда
					
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.НоменклатурнаяГруппа);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоДоговоры Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКомиссионера);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКонтрагенты Тогда
				
				Контрагент = Неопределено;
				
				// Для товаров принятых субконто Контрагент - это комитент
				Если УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СчетВИерархии(Проводка.СчетКт, СчетТоварыПринятые, СтруктураПараметров) Тогда
					
					Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорКомитента) Тогда
						Контрагент = СтрокаДокумента.ДоговорКомитента.Владелец;
					Иначе
						Контрагент = Справочники.Контрагенты.ПустаяСсылка();
					КонецЕсли;						
					
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаДокумента.Комиссионер) Тогда
						Контрагент = СтрокаДокумента.Комиссионер;
					Иначе
						Контрагент = Справочники.Контрагенты.ПустаяСсылка();
					КонецЕсли;						
					
				КонецЕсли;
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, Контрагент);
				СубконтоЗаполнено = Истина;
				
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоКомиссионеры Тогда
				
				Если ЗначениеЗаполнено(СтрокаДокумента.Комиссионер) Тогда
					Комиссионер = СтрокаДокумента.Комиссионер;
				Иначе
					Комиссионер = Справочники.Контрагенты.ПустаяСсылка();
				КонецЕсли;						

				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, Комиссионер);
				СубконтоЗаполнено = Истина;
				
			
			
			ИначеЕсли ВидСубконто.ВидСубконто = ВидСубконтоСтатьиДоходов Тогда
				
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.СтатьяДоходов);
				СубконтоЗаполнено = Истина;
				
			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры //ЗаполнитьСубконтоПоСписаниюТоваровРеглРасширеннаяАналитика()

// Функция определяет идентичность корреспонденций дебета и кредита
//
// Параметры:
//  Проводка - запись регистра бухгалтерии.
//
// Возвращаемое значение:
//  Булево - признак идентичности аналитики дебета и кредита
//
Функция СовпадаетАналитикаДтКт(Проводка)
	
	
	Если Проводка.СчетДт = Проводка.СчетКт 
	  И Проводка.НалоговоеНазначениеДт = Проводка.НалоговоеНазначениеКт 
	  И Проводка.КоличествоКт = Проводка.КоличествоДт Тогда
		
		АналитикаСовпадает = Истина;
		
		Для Каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
			
			СубконтоДт = Проводка.СубконтоДт[ВидСубконто.ВидСубконто];
			СубконтоКт = Проводка.СубконтоКт[ВидСубконто.ВидСубконто];
			
			Если (ЗначениеЗаполнено(СубконтоДт) ИЛИ ЗначениеЗаполнено(СубконтоКт))
			   И СубконтоДт <> СубконтоКт
			Тогда
				АналитикаСовпадает = Ложь;
				Прервать;
			КонецЕсли;

		КонецЦикла;
	Иначе
		АналитикаСовпадает = Ложь;
	КонецЕсли;
	
	Возврат АналитикаСовпадает;
	
КонецФункции // СовпадаетАналитикаДтКт()	

// Процедура добавляет проводку в регистр
//
// Параметры:
//  СтруктураПараметров - структура, содержащая структуру наборов записей и важные реквизиты шапки документа,
//  ИмяРегистра - имя регистра, в который нужно добавить проводку,
//  Движение - структра, содержащая данные строки движения по регистру УчетЗатратРегл,
//  КэшПоИерархииСчетов - структура, содержащая кэш по иерархии счетов,
//  Сумма - сумма проводки,
//  ВидУчета - перечисление ВидыУчетаПоПБУ18 (указывается только для проводок по нал. учету).
//
Процедура ДобавитьПроводку(СтруктураПараметров, ИмяРегистра, Движение,КэшПоИерархииСчетов, Сумма, СуммаНУ, СуммаНУПолучатель, СуммаВидУчета = Неопределено) Экспорт
	//Проверим, чтобы не было проводки между балансовым и забалансовым счетом
	Если ИмяРегистра = "Хозрасчетный" И
	  ((ЗначениеЗаполнено(Движение.СчетУчета) И Движение.СчетУчета.Забалансовый
	  И ЗначениеЗаполнено(Движение.КорСчетУчета) И НЕ Движение.КорСчетУчета.Забалансовый)
	  ИЛИ (ЗначениеЗаполнено(Движение.КорСчетУчета) И Движение.КорСчетУчета.Забалансовый
	  И ЗначениеЗаполнено(Движение.СчетУчета) И НЕ Движение.СчетУчета.Забалансовый)) Тогда
	  	Отказ = Ложь;
		Заголовок = "Проведение документа """ + СокрЛП(СтруктураПараметров.Ссылка) + """: ";
		ОбщегоНазначения.СообщитьОбОшибке("Корреспонденция между балансовыми и забалансовыми счетами не допустима!
		|Проводка Дт " + Движение.СчетУчета + " Кт " + Движение.КорСчетУчета + " сформирована не будет",Отказ, Заголовок);
		Возврат;
	КонецЕсли;	
	
	Проводка = СтруктураПараметров.Движения[ИмяРегистра].Добавить();
	
	Если ИмяРегистра = "Хозрасчетный" Тогда
		Количество = Движение.Количество;
	КонецЕсли;	
	
	
	Проводка.Период        = СтруктураПараметров.Дата;
	Проводка.Регистратор   = СтруктураПараметров.Ссылка;
	Проводка.Активность    = Истина;
	Проводка.Организация   = Движение.Организация;
	
	Если ИмяРегистра = "Хозрасчетный" Тогда
		Проводка.СчетКт    	= Движение.СчетУчета;
		Проводка.СчетДт		= Движение.КорСчетУчета;
		ЗаполнитьСубконтоПоСписаниюТоваровРеглРасширеннаяАналитика(Проводка, Движение, КэшПоИерархииСчетов, "Бух");
		Проводка.НалоговоеНазначениеКт = Движение.НалоговоеНазначение;
		Проводка.НалоговоеНазначениеДт = Движение.КорНалоговоеНазначение;
	
	КонецЕсли;	
	
	Проводка.Сумма = Сумма;
	
	Проводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СуммаНУ);
	Проводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СуммаНУПолучатель);
	
	
	// Количество
	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
		
		Если Проводка.СчетДт.Количественный  Тогда
			
			Если ИмяРегистра = "Хозрасчетный" Тогда
				Если ЕстьРеквизитВТаблицеДвижений(Движение,"КоличествоПолучатель") Тогда
					Проводка.КоличествоДт  = Движение.КоличествоПолучатель;
				Иначе
					Проводка.КоличествоДт  = Движение.Количество;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Если Проводка.СчетДт.Валютный  Тогда
			Если ЕстьРеквизитВТаблицеДвижений(Движение,"СуммаВал") Тогда
				Проводка.ВалютнаяСуммаДт  = Движение.СуммаВал;
			КонецЕсли;	
			Если ЕстьРеквизитВТаблицеДвижений(Движение,"Валюта") Тогда
				Проводка.ВалютаДт  = Движение.Валюта;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
		
		Если Проводка.СчетКт.Количественный Тогда
	  		Проводка.КоличествоКт  = Количество;
		КонецЕсли;	
	
		Если Проводка.СчетКт.Валютный  Тогда
			Если ЕстьРеквизитВТаблицеДвижений(Движение,"СуммаВал") Тогда
				Проводка.ВалютнаяСуммаКт  = Движение.СуммаВал;
			КонецЕсли;	
			Если ЕстьРеквизитВТаблицеДвижений(Движение,"Валюта") Тогда
				Проводка.ВалютаКт  = Движение.Валюта;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	//Удалим проводки с одинаковой корреспонденцией или нулевыми суммами и количеством
	Если СовпадаетАналитикаДтКт(Проводка)
	  ИЛИ ((Проводка.Сумма = 0) И (Проводка.СуммаНУДт = 0) И (Проводка.СуммаНУКт = 0) И (Проводка.КоличествоДт = 0) И (Проводка.КоличествоКт = 0))
	  //ИЛИ (ИмяРегистра = "Хозрасчетный" И ((НЕ ЗначениеЗаполнено(Проводка.СчетДт)) ИЛИ (НЕ ЗначениеЗаполнено(Проводка.СчетКт)))) Тогда
	  ИЛИ (ИмяРегистра = "Хозрасчетный" И ((НЕ ЗначениеЗаполнено(Проводка.СчетДт)) ИЛИ (НЕ ЗначениеЗаполнено(Проводка.СчетКт))))
	  Тогда
		СтруктураПараметров.Движения[ИмяРегистра].Удалить(Проводка);
		Возврат;
	КонецЕсли;	
	
	СтруктураПараметровДляСодержания = Новый Структура("КодыОпераций, ТипЗначенияРегистратора",Перечисления.КодыОперацийПартииТоваров, ТипЗНЧ(СтруктураПараметров.Ссылка));
	СтрокаДвиженияДляСодержания = Новый Структура("КодОперацииПартииТоваров", Движение.КодОперации);
	Проводка.Содержание = УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ПолучитьСодержаниеПроводки(СтрокаДвиженияДляСодержания, СтруктураПараметровДляСодержания);
	
	Если СформироватьСторноПроводку(Движение.КодОперации) Тогда
		
		// вместо "обычной" провдоки формируем сторно проводку. Как правило необходимо для возвратов типа 201-231, когда необходимо отсторнировать оборот по 8 классу
		// дебет и кредит меняются местами
		масСубконто = новый Соответствие;
		Для каждого элт из Проводка.СубконтоДт цикл
			масСубконто.Вставить(элт.Ключ, элт.Значение);
		КонецЦикла;
		
		СтруктураДебет = новый Структура("Счет, Субконто, Количество, НалоговоеНазначение, СуммаНУ", Проводка.СчетДт, масСубконто, Проводка.КоличествоДт, Проводка.НалоговоеНазначениеДт, Проводка.СуммаНУДт);
		
		Проводка.СчетДт = Проводка.СчетКт;
		Проводка.КоличествоДт = Проводка.КоличествоКт;
		Проводка.СубконтоДт.Очистить();
		Для каждого элт из Проводка.СубконтоКт цикл
			Проводка.СубконтоДт.Вставить(элт.Ключ, Элт.Значение);
		КонецЦикла;
		Проводка.НалоговоеНазначениеДт = Проводка.НалоговоеНазначениеКт;
		Проводка.СуммаНУДт = Проводка.СуммаНУКт;
		
		Проводка.СчетКт = СтруктураДебет.Счет;
		Проводка.КоличествоКт = СтруктураДебет.Количество;
		Проводка.СубконтоКт.Очистить();
		Для каждого элт из СтруктураДебет.Субконто цикл
			Проводка.СубконтоКт.Вставить(элт.Ключ, Элт.Значение);
		КонецЦикла;
		Проводка.НалоговоеНазначениеКт = СтруктураДебет.НалоговоеНазначение;
		Проводка.СуммаНУКт = СтруктураДебет.СуммаНУ;
		
		// к-во и суммы - сторно
		Проводка.КоличествоДт = -Проводка.КоличествоДт;
		Проводка.КоличествоКт = -Проводка.КоличествоКт;
		Проводка.Сумма        = -Проводка.Сумма;
		Проводка.СуммаНУДт    = -Проводка.СуммаНУДт;
		Проводка.СуммаНУКт    = -Проводка.СуммаНУКт;
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Функция определяет, надо ли для переданного документа формировать проводки по выпуску 
// на основании движений по регистру УчетЗатратРегл, либо они были сформированы ранее.
//
// Движения ряда документов по разделу выпуск формируются в процедуре
// УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска()
// Одновременно формируются и проводки.
// 
// Параметры:
//  Ссылка - ссылка на документ, для которого надо определить момент формирования движений
//
// Возвращаемое значение: булево
//
Функция	ПроводкиПоВыпускуФормируютсяОдновременноСДвижениями(Ссылка)
	
	// Список типов документов, движения по выпуску которых формируются в модуле УправлениеПроизводствомДвиженияПоРегистрам
	МассивТиповДокументов = Новый Массив(); 
	
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.КомплектацияНоменклатуры"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.КорректировкаНЗП"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ОприходованиеНЗП"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.СписаниеНЗП"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства"));

	Если МассивТиповДокументов.Найти(ТипЗнч(Ссылка)) = Неопределено Тогда
		// По этому документу проводки по выпуску формируются отдельно от движений по УчетЗатратРегл
		Возврат Ложь;
	Иначе
		// По этому документу проводки уже сформированы (одновременно с движениями по УчетЗатратРегл)
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура формирует проводки, по результатам проведения по регистру УчетЗатратРегл
//
// Параметры:
//  СтруктураПараметров - структура, содержащая структуру наборов записей и важные реквизиты шапки документа,
//  ТаблицаСписания - таблица расходных движений по регистру УчетЗатратРегл,
//  ТаблицаОприходования - таблица приходных движений по регистру УчетЗатратРегл,
//  Отказ - булево, признак возникновения ошибки в процедуре,
//  СтруктураКлючиАналитики - структура, для кэширования ключей аналитики,
//  ПолучатьАналитикуИзТаблицыСписания - булево, признак того, что аналитику не нужно разворачивать из ключей, а можно получить напрямую из таблицы ТаблицаСписания.
//
Процедура СформироватьПроводкиПоРезультатамСписания(СтруктураПараметров, ТаблицаСписания, ТаблицаОприходования = Неопределено, Отказ=Ложь, СтруктураКлючиАналитики, ПолучатьАналитикуИзТаблицыСписания = Ложь) Экспорт
	
	Если ПолучатьАналитикуИзТаблицыСписания Тогда
		ПрефиксКорАналитики = "Кор";
	Иначе
		ПрефиксКорАналитики = "";
	КонецЕсли;	
	
	Если НЕ ПолучатьАналитикуИзТаблицыСписания Тогда
	
		//Формирование аналитики дебета
		СтруктураАналитики = Новый Структура();
		
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"Затрата", "КорЗатрата");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"СчетУчета","КорСчетУчета");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"СтатьяЗатрат","КорСтатьяЗатрат");	
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"ОбъектСтроительства","КорОбъектСтроительства");	
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"НоменклатурнаяГруппа", "КорНоменклатурнаяГруппа");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"ПодразделениеОрганизации", "КорПодразделениеОрганизации");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"ДоговорКомиссионера", "КорДоговорКомиссионера");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"Комиссионер", "КорКомиссионер");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"Субконто1", "КорСубконто1");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"Субконто2", "КорСубконто2");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"Субконто3", "КорСубконто3");
		СтруктураАналитики.Вставить(ПрефиксКорАналитики+"НалоговоеНазначение", "КорНалоговоеНазначение");
		
		Если НЕ ПолучатьАналитикуИзТаблицыСписания Тогда
			ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, СтруктураАналитики, Отказ, СтруктураКлючиАналитики,Истина);
			СтруктураАналитики = Новый Структура();
		КонецЕсли;	
		
		//Формирование аналитики кредита
		СтруктураАналитики = Новый Структура();
		
		СтруктураАналитики.Вставить("Организация");
		СтруктураАналитики.Вставить("СчетУчета");
		СтруктураАналитики.Вставить("Затрата", "Затрата");
		СтруктураАналитики.Вставить("ДоговорКомитента");
		СтруктураАналитики.Вставить("Комиссионер");
		СтруктураАналитики.Вставить("ДоговорКомиссионера");
		СтруктураАналитики.Вставить("РазделУчета");
		СтруктураАналитики.Вставить("СтатьяЗатрат","СтатьяЗатрат");	
		СтруктураАналитики.Вставить("ОбъектСтроительства","ОбъектСтроительства");	
		СтруктураАналитики.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
		СтруктураАналитики.Вставить("ПодразделениеОрганизации", "ПодразделениеОрганизации");
		СтруктураАналитики.Вставить("НалоговоеНазначение", "НалоговоеНазначение");
		
		
		Если НЕ ПолучатьАналитикуИзТаблицыСписания Тогда
			ЗаполнитьТаблицуДвиженийПоЗатратамАналитикой(ТаблицаСписания, СтруктураАналитики, Отказ, СтруктураКлючиАналитики);
		КонецЕсли;	
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	КэшПоИерархииСчетов = Новый Структура();
	
	ПроводкиПоВыпускуУжеСформированы = ПроводкиПоВыпускуФормируютсяОдновременноСДвижениями(СтруктураПараметров.Ссылка);
	
	Для Каждого Движение Из ТаблицаСписания Цикл
		
		Если ПроводкиПоВыпускуУжеСформированы И Движение.РазделУчета = Перечисления.РазделыУчета.Выпуск Тогда
			Продолжить;
		КонецЕсли;	
		
		//Проводка по БУ
		Если СтруктураПараметров.ОтражатьВБухгалтерскомУчете Тогда
			ДобавитьПроводку(СтруктураПараметров,"Хозрасчетный",Движение,КэшПоИерархииСчетов, Движение.Стоимость, Движение.СтоимостьНУ, Движение.СтоимостьНУПолучатель);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры //СформироватьПроводкиПоРезультатамСписания()	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ФОРМИРОВАНИЕ ДОПОЛНИТЕЛЬНЫХ ДВИЖЕНИЙ ПО ЗАТРАТАМ

Процедура СформироватьДополнительныеДвиженияПоРегистрамУчетаЗатрат(Источник,СтруктураНаборовЗаписейПоВидамУчета,ТаблицаДляФормированияДвиженийПоРегистру)  
	//Передача материалов в эксплуатацию
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Период", Источник.Дата);
		СтруктураПараметров.Вставить("Регистратор", Источник.Ссылка);
		СтруктураПараметров.Вставить("Организация", Источник.мСтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете", Источник.ОтражатьВУправленческомУчете);
		СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете", Источник.ОтражатьВБухгалтерскомУчете);
		
		СтруктураПараметров.Вставить("НаборыЗаписейРегистров", СтруктураНаборовЗаписейПоВидамУчета);
		
		ПроцедурыПогашенияСтоимости.ПогашениеСтоимостиПриПередачеВЭксплуатацию(
			СтруктураПараметров,
			ТаблицаДляФормированияДвиженийПоРегистру
		);


		// Дополнительно кроме "оборотных" движений по разделу учета "Погашенная стоимость" формируем приходные 
		// движения по разделу учета  "Передача материалов в эксплуатацию"
		СтруктураШапкиДокумента = Источник.мСтруктураШапкиДокумента;
		
		Для Каждого СтрокаТаблицы Из ТаблицаДляФормированияДвиженийПоРегистру Цикл 
			
			ВидОтраженияВУчете = ?(СтрокаТаблицы.ИмяРегистра = "УчетЗатратРегл", Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете, Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);
			
			СформироватьДвиженияПоПередачеМатериаловВЭксплуатацию(
				СтруктураШапкиДокумента,
				СтруктураШапкиДокумента.Дата,
				СтрокаТаблицы.АналитикаВидаУчета,
				СтрокаТаблицы.АналитикаУчетаЗатрат,
				СтрокаТаблицы.АналитикаУчетаПартий,
				СтрокаТаблицы.АналитикаРаспределенияЗатрат,
				СтрокаТаблицы.КорАналитикаВидаУчета,
				СтрокаТаблицы.КорАналитикаУчетаЗатрат,						
				СтрокаТаблицы.КорАналитикаУчетаПартий,
				СтрокаТаблицы.КорАналитикаРаспределенияЗатрат,
				ВидОтраженияВУчете,
				СтруктураНаборовЗаписейПоВидамУчета[СтрокаТаблицы.ИмяРегистра],
				СтрокаТаблицы.Количество,
				СтрокаТаблицы.КоличествоНУ,
				СтрокаТаблицы.Стоимость,
				СтрокаТаблицы.СтоимостьНУ,
				СтрокаТаблицы.НДСВходящий,
				СтрокаТаблицы.НДСКредит
			);
			
		КонецЦикла; 
			
		
		
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРУЮЩИЕ ДВИЖЕНИЯ ПО ПРИНЯТЫМ ТМЦ ДЛЯ РА

// Функция формирует структуру, содержащую наборы записей бухгалтерских регистров
//
Функция ПолучитьСтрутркуДвиженийПоБухгалтерскимРегистрам(Регистратор)
	Движения = Новый Структура();
	Движения.Вставить("Хозрасчетный",РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей());
	Движения.Хозрасчетный.Отбор.Регистратор.Установить(Регистратор);
	Возврат Движения;
КонецФункции	

// Процедура - 	формирует движения по принятым товарам по документу ОтчетКомитентуОПродажах для расширенной аналитики
// Параметры:
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа,
//  ТаблицаПоТоварам - таблица значений, соответствующая табличной части,
//
Процедура СформироватьДвиженияПоОтчетуКомитенту(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Движения = ПолучитьСтрутркуДвиженийПоБухгалтерскимРегистрам(СтруктураШапкиДокумента.Ссылка);
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Контрагент, СтруктураШапкиДокумента.ДоговорКонтрагента);
		
		//Определим дату первого поступления на комиссию, за которое отчитываемся
		ДатаПервогоПоступления = СтруктураШапкиДокумента.Дата;
		ДатаПереходаНаРасширеннуюАналитику = глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");
		Для Каждого ТекущаяСтрока Из ТаблицаПоТоварам Цикл
			//Определим дату самого раннего поступления
			Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументПоставки) Тогда
				Если ТекущаяСтрока.ДокументПоставки.Дата < ДатаПервогоПоступления Тогда
					ДатаПервогоПоступления = ТекущаяСтрока.ДокументПоставки.Дата;
				КонецЕсли;
			Иначе
				Если ДатаПереходаНаРасширеннуюАналитику < ДатаПервогоПоступления Тогда
					ДатаПервогоПоступления = ДатаПереходаНаРасширеннуюАналитику;
				КонецЕсли;	
			КонецЕсли;	
			
			//Закрытие счета 0241
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			
			СебестоимостьБУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущаяСтрока.СуммаПоступления
										,СтруктураШапкиДокумента.ВалютаВзаиморасчетов,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
										,СтруктураШапкиДокумента.КурсВзаиморасчетов,1
										,СтруктураШапкиДокумента.КратностьВзаиморасчетов,1);
			
			Проводка.Сумма = СебестоимостьБУ;
			Проводка.КоличествоКт = ТекущаяСтрока.Количество;
			
			Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", ТекущаяСтрока.Номенклатура);
			
			Проводка.Содержание = "Реализация";
		КонецЦикла;	
			
		//Переформируем проводки по счету расчетов с комитентом
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
		                      |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
		                      |	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт2,
		                      |	ХозрасчетныйОборотыДтКт.ВалютаДт КАК ВалютаДт,
		                      |	ХозрасчетныйОборотыДтКт.ВалютнаяСуммаОборотДт,
		                      |	ХозрасчетныйОборотыДтКт.СуммаОборот
		                      |ИЗ
		                      |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		                      |			&ДатаПервогоПоступления,
		                      |			&ТекущаяДата,
		                      |			,
		                      |			,
		                      |			,
		                      |			СчетКт = &СчетРасчетовСКомитентом,
		                      |			,
		                      |			Организация = &Организация
		                      |				И СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ХозрасчетныйОборотыДтКт
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	СчетДт,
		                      |	СубконтоДт1,
		                      |	СубконтоДт2,
		                      |	ВалютаКт");
	    Запрос.УстановитьПараметр("ДатаПервогоПоступления",ДатаПервогоПоступления);
		Запрос.УстановитьПараметр("СчетРасчетовСКомитентом",СтруктураШапкиДокумента.СчетДоходовПоВознаграждениюБУ);
		Запрос.УстановитьПараметр("ТекущаяДата",СтруктураШапкиДокумента.Дата);
		Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
		
		СуммыВыручки = ТаблицаПоТоварам.Итог("Выручка");
		СуммыВыручкиБУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммыВыручки
									,СтруктураШапкиДокумента.ВалютаВзаиморасчетов,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
									,СтруктураШапкиДокумента.КурсВзаиморасчетов,1
									,СтруктураШапкиДокумента.КратностьВзаиморасчетов,1);
		
		ТаблицаРеализованныхТоваровКомитента = Запрос.Выполнить().Выгрузить();
		Для Каждого ТекущаяСтрока Из ТаблицаРеализованныхТоваровКомитента Цикл
			Если СуммыВыручкиБУ = 0 Тогда
				Прервать;
			КонецЕсли;
			
			СуммаКСторнированию = Мин(ТекущаяСтрока.СуммаОборот, СуммыВыручкиБУ);
			
			// Сторнирующая проводка
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			//Проводка.Содержание 			= ?(СтрокаТЧ.СписаниеПартий, "Выручка (без распределения товаров по партиям)" , "Выручка от реализации услуг");
			Проводка.СписаниеПартий         = Истина;
			Проводка.Сумма = -СуммаКСторнированию;
			
			Проводка.СчетДт                 = ТекущаяСтрока.СчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ТекущаяСтрока.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ТекущаяСтрока.СубконтоДт2);
			
			Если ТекущаяСтрока.СчетДт.Валютный Тогда
				Проводка.ВалютаДт           = ТекущаяСтрока.ВалютаДт;
				Проводка.ВалютнаяСуммаДт	= ТекущаяСтрока.ВалютнаяСуммаОборотДт;
			КонецЕсли; 
			
			Проводка.СчетКт                 = СтруктураШапкиДокумента.СчетДоходовПоВознаграждениюБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоДоходовБУ3);
			
			// Корректная проводка
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			//Проводка.Содержание 			= ?(СтрокаТЧ.СписаниеПартий, "Выручка (без распределения товаров по партиям)" , "Выручка от реализации услуг");
			Проводка.СписаниеПартий         = Истина;
			Проводка.Сумма = СуммаКСторнированию;
			
			
			Проводка.СчетДт                 = ТекущаяСтрока.СчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ТекущаяСтрока.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ТекущаяСтрока.СубконтоДт2);
			
			Если ТекущаяСтрока.СчетДт.Валютный Тогда
				Проводка.ВалютаДт           = ТекущаяСтрока.ВалютаДт;
				Проводка.ВалютнаяСуммаДт	= ТекущаяСтрока.ВалютнаяСуммаОборотДт;
			КонецЕсли; 
			
			Проводка.СчетКт                 = СчетаУчета.СчетРасчетовСКомитентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			СуммыВыручкиБУ = СуммыВыручкиБУ - СуммаКСторнированию;
			
		КонецЦикла;
		
		ЗаписатьСтруктуруДвиженийВБазуДанных(Движения);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоОтчетуКомитенту()

// Процедура - 	формирует движения по принятым в переработку материалам по документу РеализацияУслугПоПереработке для расширенной аналитики
// Параметры:
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа,
//  ТаблицаПоТоварам - таблица значений, соответствующая табличной части,
//
Процедура СформироватьДвиженияПоРеализацииУслугПоПереработке(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Движения = ПолучитьСтрутркуДвиженийПоБухгалтерскимРегистрам(СтруктураШапкиДокумента.Ссылка);
		
		Для Каждого ТекущаяСтрока Из ТаблицаПоТоварам Цикл
			//Закрытие счета 0221
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			
			СебестоимостьБУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущаяСтрока.Сумма
										,СтруктураШапкиДокумента.ВалютаВзаиморасчетов,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
										,СтруктураШапкиДокумента.КурсВзаиморасчетов,1
										,СтруктураШапкиДокумента.КратностьВзаиморасчетов,1);
			
			Проводка.Сумма = 0;
			Проводка.КоличествоКт = -ТекущаяСтрока.Количество;
			Проводка.КоличествоДт = -ТекущаяСтрока.Количество;
			
			Проводка.СчетДт                 = ТекущаяСтрока.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", ТекущаяСтрока.Номенклатура);
			
			Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", ТекущаяСтрока.Номенклатура);
			
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			
			Проводка.Сумма = СебестоимостьБУ;
			Проводка.КоличествоКт = ТекущаяСтрока.Количество;
			Проводка.КоличествоДт = ТекущаяСтрока.Количество;
			
			Проводка.СчетДт                 = ТекущаяСтрока.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", ТекущаяСтрока.Номенклатура);
			
			Проводка.СчетКт                 = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", ТекущаяСтрока.Номенклатура);
		КонецЦикла;	
		
		ЗаписатьСтруктуруДвиженийВБазуДанных(Движения);
		
	КонецЕсли;    	
КонецПроцедуры	

// Процедура - 	формирует движения реализации принятого на комиссию товара для расширенной аналитики
// Параметры:
//  СтруктураШапкиДокумента - структура содержащая реквизиты шапки документа,
//  СтруктураТабличныхЧастей - структура, содержащая табличные части документа,
//  Ссылка - ссылка на документ,
//  Движения - коллекция движений документа,
//  ЕстьБезналичныеРасчеты - булево.
//
Процедура СформироватьДвиженияПоРеализацииПринятогоНаКомисииюТовара(СтруктураШапкиДокумента, СтруктураТабличныхЧастей, Ссылка, Движения, ЕстьБезналичныеРасчеты)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		  //Сформируем движения по реализованным товарам комитента
		
		НаборДвиженийРеализованныеТовары = Движения.РеализованныеТовары;
		НаборДвиженийПродажиСебестоимость = Движения.ПродажиСебестоимость;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийРеализованныеТовары = НаборДвиженийРеализованныеТовары.Выгрузить();
		ТаблицаДвиженийПродажиСебестоимость = НаборДвиженийПродажиСебестоимость.Выгрузить();
		
		// Заполним таблицу движений.
		Для Каждого ТекущаяСтрока Из СтруктураТабличныхЧастей.ТаблицаПоТоварам Цикл
			
			Если ТекущаяСтрока.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый Тогда
				Если ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					Количество = ТекущаяСтрока.МинусКоличество;
					Выручка = ТекущаяСтрока.СтоимостьПродажи;
				Иначе	
					Если ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
						Выручка = ТекущаяСтрока.СтоимостьБезСкидок;
					Иначе	
						Выручка = ТекущаяСтрока.Стоимость;
					КонецЕсли;						
					Количество = ТекущаяСтрока.Количество;
				КонецЕсли;	
				
				//Движения по регистру РеализованныеТовары				
				СтрокаДвижений = ТаблицаДвиженийРеализованныеТовары.Добавить();
				СтрокаДвижений.Номенклатура = ТекущаяСтрока.Номенклатура;
				СтрокаДвижений.ХарактеристикаНоменклатуры = ТекущаяСтрока.ХарактеристикаНоменклатуры;
				СтрокаДвижений.СерияНоменклатуры = ТекущаяСтрока.СерияНоменклатуры;
				СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
				
				СтрокаДвижений.Количество = Количество;
				СтрокаДвижений.Выручка = Выручка;
				
				//Движения по регистру ПродажиСебестоимость
				СтрокаДвижений = ТаблицаДвиженийПродажиСебестоимость.Добавить();
				СтрокаДвижений.Номенклатура = ТекущаяСтрока.Номенклатура;
				СтрокаДвижений.ХарактеристикаНоменклатуры = ТекущаяСтрока.ХарактеристикаНоменклатуры;
				Если СтруктураТабличныхЧастей.ТаблицаПоТоварам.Колонки.Найти("ЗаказПокупателя") <> Неопределено Тогда
					СтрокаДвижений.ЗаказПокупателя = ТекущаяСтрока.ЗаказПокупателя;
				ИначеЕсли СтруктураШапкиДокумента.Свойство("Сделка") Тогда	
					СтрокаДвижений.ЗаказПокупателя = СтруктураШапкиДокумента.Сделка;
				КонецЕсли;	
				СтрокаДвижений.Проект = СтруктураШапкиДокумента.Проект;
				СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
				СтрокаДвижений.Подразделение = СтруктураШапкиДокумента.Подразделение;
				
				СтрокаДвижений.Количество = Количество;
				СтрокаДвижений.Стоимость = Выручка;	
				
			КонецЕсли;
		КонецЦикла;	
			
		НаборДвиженийРеализованныеТовары.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвиженийРеализованныеТовары.мТаблицаДвижений = ТаблицаДвиженийРеализованныеТовары;
		НаборДвиженийРеализованныеТовары.ВыполнитьПриход();
		
		НаборДвиженийПродажиСебестоимость.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвиженийПродажиСебестоимость.мТаблицаДвижений = ТаблицаДвиженийПродажиСебестоимость;
		НаборДвиженийПродажиСебестоимость.ВыполнитьДвижения();
	КонецЕсли;	
	                              
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Возврат;
		
		//Сформируем проводки по принятому товару
		Если ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			Если ЕстьБезналичныеРасчеты Тогда
				СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
			Иначе
				СчетДт = ПланыСчетов.Хозрасчетный.КассаОрганизации;
			КонецЕсли;
		Иначе
			СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;	
		
		Если СчетДт.Валютный Тогда
			СписокВалютныхСумм = ", СуммаБезНДСВал, СуммаНДСВал";
		Иначе
			СписокВалютныхСумм = "";
		КонецЕсли;	
		
		ТаблицаВыручкиДляБУ = СтруктураТабличныхЧастей.ТаблицаПоТоварам.Скопировать(Новый Структура("ПринадлежностьНоменклатуры", Перечисления.ПринадлежностьНоменклатуры.Принятый), 
		"СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, СубконтоРасходовБУ1, СубконтоРасходовБУ2, СубконтоРасходовБУ3, СуммаБезНДСРегл, СуммаНДСРегл"+СписокВалютныхСумм);
		ТаблицаВыручкиДляБУ.Колонки.Добавить("СписаниеПартий", Новый ОписаниеТипов("Булево"));
		ТаблицаВыручкиДляБУ.Свернуть("СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, СубконтоРасходовБУ1, СубконтоРасходовБУ2, СубконтоРасходовБУ3, СписаниеПартий", "СуммаБезНДСРегл, СуммаНДСРегл"+СписокВалютныхСумм);
		Для каждого СтрокаТЧ из ТаблицаВыручкиДляБУ Цикл
			
			// Выручка
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			//Проводка.Содержание 			= ?(СтрокаТЧ.СписаниеПартий, "Выручка (без распределения товаров по партиям)" , "Выручка от реализации услуг");
			Проводка.СписаниеПартий         = СтрокаТЧ.СписаниеПартий;
			Если ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				Проводка.Сумма = -(СтрокаТЧ.СуммаБезНДСРегл + СтрокаТЧ.СуммаНДСРегл);
			Иначе	
				Проводка.Сумма = СтрокаТЧ.СуммаБезНДСРегл + СтрокаТЧ.СуммаНДСРегл;
			КонецЕсли;	
			
			Проводка.СчетДт                 = СчетДт;
			Если СтруктураШапкиДокумента.Свойство("Контрагент") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			КонецЕсли;	
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт           = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт	= СтрокаТЧ.СуммаБезНДСВал + СтрокаТЧ.СуммаНДСВал;
			КонецЕсли; 
			
			Проводка.СчетКт                 = СтрокаТЧ.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТЧ.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТЧ.СубконтоДоходовБУ3);
		КонецЦикла;			
	КонецЕсли;	
	
КонецПроцедуры //СформироватьДвиженияПоРеализацииПринятогоНаКомисииюТовара 	

// Процедура - 	формирует движения по передаче принятых для переработки материалов в производство для расширенной аналитики
// Параметры:
//  СтруктураШапкиДокумента - структура содержащая реквизиты шапки документа,
//  СтруктураТабличныхЧастей - структура, содержащая табличные части документа,
//  Ссылка - ссылка на документ,
//  Движения - коллекция движений документа.
//
Процедура СформироватьДвиженияПоПередачеДавальческихМатериаловВПроизводство(СтруктураШапкиДокумента, СтруктураТабличныхЧастей, Ссылка, Движения)
	
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
			ТаблицаСписания = СтруктураТабличныхЧастей.ТаблицаПоТоварам.Скопировать(Новый Структура("ПринадлежностьНоменклатуры", Перечисления.ПринадлежностьНоменклатуры.Принятый), "Номенклатура, СчетУчетаБУ, Количество");
		Иначе//Комплектация
			ТаблицаСписания = СтруктураТабличныхЧастей.ТаблицаПоКомплектующим.Скопировать(Новый Структура("ПринадлежностьНоменклатуры", Перечисления.ПринадлежностьНоменклатуры.Принятый), "Номенклатура, СчетУчетаБУ, Количество");
		КонецЕсли;
		
		ТаблицаСписания.Свернуть("Номенклатура, СчетУчетаБУ", "Количество");
		
		Для каждого СтрокаТЧ из ТаблицаСписания Цикл
			
			// Выручка
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			Проводка.СписаниеПартий         = Истина;
			Проводка.Сумма = 0;
			Проводка.КоличествоДт = СтрокаТЧ.Количество;
			Проводка.КоличествоКт = СтрокаТЧ.Количество;
			
			Проводка.СчетДт                 = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве;
			Проводка.СчетКт                 = СтрокаТЧ.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
			
		КонецЦикла;			
	КонецЕсли;	
	
КонецПроцедуры	

// Процедура - 	формирует движения по возврату принятых для переработки материалов давальцу 
// и возврату товаров принятых на комиссию для расширенной аналитики
// Параметры:
//  СтруктураШапкиДокумента - структура содержащая реквизиты шапки документа,
//  СтруктураТабличныхЧастей - структура, содержащая табличные части документа,
//  Ссылка - ссылка на документ,
//  Движения - коллекция движений документа.
//
Процедура СформироватьДвиженияВозвратаПринятыхМатериалов(СтруктураШапкиДокумента, СтруктураТабличныхЧастей, Ссылка, Движения, ВидОперации)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Для Каждого ТекущаяСтрока Из СтруктураТабличныхЧастей.ТаблицаПоТоварам Цикл
			// Закрытие счета 0221, 0241
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период                 = СтруктураШапкиДокумента.Дата;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			
			СебестоимостьБУ = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущаяСтрока.Сумма
										,СтруктураШапкиДокумента.ВалютаВзаиморасчетов,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета
										,СтруктураШапкиДокумента.КурсВзаиморасчетов,1
										,СтруктураШапкиДокумента.КратностьВзаиморасчетов,1);
			
			Проводка.Сумма = СебестоимостьБУ;
			Проводка.КоличествоКт = ТекущаяСтрока.Количество;
			Проводка.Содержание = "Возврат поставщику";
			
			Проводка.СчетКт = ТекущаяСтрока.СчетУчетаБУ;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", ТекущаяСтрока.Номенклатура);			
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

// Процедура - 	обработчик подписки на событие
//  Движения - коллекция движений документа.
//
Процедура СформироватьДвиженияПоУчетуПринятыхТМЦ(Источник, Отказ, РежимПроведения) Экспорт
	
	СтруктураШапкиДокумента = Источник.мСтруктураШапкиДокумента;
	СтруктураТабличныхЧастей = Источник.мСтруктураТабличныхЧастей;
	Ссылка = Источник.Ссылка;
	
    Движения = ПолучитьСтрутркуДвиженийПоБухгалтерскимРегистрам(Ссылка);
	
	Если ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
	  ИЛИ ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")	
	  ИЛИ ((ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
	  ИЛИ ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"))
	  И (СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)) Тогда	
		  Если ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			  ЕстьБезналичныеРасчеты = СтруктураШапкиДокумента.ЕстьБезналичныеРасчеты;
		Иначе
			ЕстьБезналичныеРасчеты = Ложь;
		КонецЕсли;
		
		Движения.Вставить("РеализованныеТовары",РегистрыНакопления.РеализованныеТовары.СоздатьНаборЗаписей());
		Движения.РеализованныеТовары.Отбор.Регистратор.Установить(Ссылка);
		Движения.Вставить("ПродажиСебестоимость",РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей());
		Движения.ПродажиСебестоимость.Отбор.Регистратор.Установить(Ссылка);	
		
		СформироватьДвиженияПоРеализацииПринятогоНаКомисииюТовара(СтруктураШапкиДокумента, СтруктураТабличныхЧастей, Ссылка, Движения, ЕстьБезналичныеРасчеты);
	ИначеЕсли ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ТребованиеНакладная")
	  ИЛИ ((ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры")) И (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции)) Тогда
		СформироватьДвиженияПоПередачеДавальческихМатериаловВПроизводство(СтруктураШапкиДокумента, СтруктураТабличныхЧастей, Ссылка, Движения);
	ИначеЕсли ТипЗНЧ(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
	  И (Ссылка.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
	    //Смартис Лиманчук начало 19.12.2012
		ИЛИ (Ссылка.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссияНал
		  И СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
		//Смартис Лиманчук окончание 19.12.2012
		ИЛИ (Ссылка.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
		  И СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом))Тогда
		  
		СформироватьДвиженияВозвратаПринятыхМатериалов(СтруктураШапкиДокумента, СтруктураТабличныхЧастей, Ссылка, Движения, Источник.Ссылка.ВидОперации);
	КонецЕсли;	
	
	//Запись движений в БД
	ЗаписатьСтруктуруДвиженийВБазуДанных(Движения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ ОБСЛУЖИВАНИЯ ФУНКЦИЙ УЧЕТА ЗАТРАТ

Процедура РасчетЦеныНоменклатурыНаСервере(Настройка, ВызываетсяИзФормыНастройки = Ложь) Экспорт
	МодульРегламентныхЗаданий.РасчетЦеныНоменклатуры(Настройка, ВызываетсяИзФормыНастройки);
КонецПроцедуры	

Процедура РасчитатьЦенуНоменклатуры(СтруктураПараметров, ТекстЗапроса, ПараметрыЗапроса) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураПараметров.НастройкаРасчетаСебестоимости) Тогда
		//Сначала расчитаем себестоимость	
		
		СтруктураПараметровРасчетаСебестоимости = Новый Структура("Организация, ВидОтраженияВУчете, Задержка");
		ЗаполнитьЗначенияСвойств(СтруктураПараметровРасчетаСебестоимости, СтруктураПараметров.НастройкаРасчетаСебестоимости);
		
		СтруктураПараметровРасчетаСебестоимости.Вставить("ВыполняемыеДействия", СтруктураПараметров.НастройкаРасчетаСебестоимости.ВыполняемыеДействия.Выгрузить());
		
		РасчитатьСебестоимость(СтруктураПараметровРасчетаСебестоимости);
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	
	Для каждого ОписаниеПараметраЗапроса из ПараметрыЗапроса Цикл
				   
		   Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Ключ, ОписаниеПараметраЗапроса.Значение);
		   
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ТекущаяДата()));
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Если СтруктураПараметров.СоздаватьНовыйДокумент Тогда
			ДокументОбъект = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
			ДокументОбъект.Дата = НачалоДня(ТекущаяДата());
			СтрокаСТипомЦен = ДокументОбъект.ТипыЦен.Добавить();
			СтрокаСТипомЦен.ТипЦен = СтруктураПараметров.ТипЦен;
        Иначе
		
			ЗапросПоДокументам = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                                  |	УстановкаЦенНоменклатурыТипыЦен.Ссылка
			                                  |ИЗ
			                                  |	Документ.УстановкаЦенНоменклатуры.ТипыЦен КАК УстановкаЦенНоменклатурыТипыЦен
			                                  |ГДЕ
			                                  |	УстановкаЦенНоменклатурыТипыЦен.Ссылка.Проведен
			                                  |	И УстановкаЦенНоменклатурыТипыЦен.Ссылка.Дата = &ДатаНачала
			                                  |	И УстановкаЦенНоменклатурыТипыЦен.ТипЦен = &ТипЦен");
			ЗапросПоДокументам.УстановитьПараметр("ТипЦен",СтруктураПараметров.ТипЦен);
			ЗапросПоДокументам.УстановитьПараметр("ДатаНачала",НачалоМесяца(ТекущаяДата()));
			
			Выборка = ЗапросПоДокументам.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Если ДокументОбъект.ТипыЦен.Количество() > 1 Тогда
					ВызватьИсключение("В документе " + ДокументОбъект.Ссылка + " используется более одного типа цен. Документ не перезаполнен");
				КонецЕсли;	
			Иначе
				ДокументОбъект = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
				ДокументОбъект.Дата = НачалоМесяца(ТекущаяДата());
				СтрокаСТипомЦен = ДокументОбъект.ТипыЦен.Добавить();
				СтрокаСТипомЦен.ТипЦен = СтруктураПараметров.ТипЦен;
			КонецЕсли;
		КонецЕсли;	
		
		Если СтруктураПараметров.ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
			Валюта = глЗначениеПеременной("ВалютаУправленческогоУчета");
		Иначе
			Валюта = глЗначениеПеременной("ВалютаРегламентированногоУчета");
		КонецЕсли;
		
		ДокументОбъект.Товары.Очистить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Номенклатура) ТОгда
				Если СтруктураПараметров.ПорядокФормированияЦены = 0 Тогда
					Цена = ?(Выборка.КоличествоРасход=0,0,Выборка.СтоимостьРасход/Выборка.КоличествоРасход);
				Иначе
					Цена = ?(Выборка.КоличествоПриход=0,0,Выборка.СтоимостьПриход/Выборка.КоличествоПриход);
				КонецЕсли;
				Цена = Ценообразование.ОкруглитьЦену(Цена, СтруктураПараметров.ТипЦен.ПорядокОкругления, СтруктураПараметров.ТипЦен.ОкруглятьВБольшуюСторону);
				Если Цена <> 0 Тогда
					НоваяСтрока = ДокументОбъект.Товары.Добавить();
					НоваяСтрока.Номенклатура = Выборка.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
					НоваяСтрока.Валюта = Валюта;
					НоваяСтрока.ТипЦен = СтруктураПараметров.ТипЦен;
					НоваяСтрока.Цена = Цена;
					НоваяСтрока.ИндексСтрокиТаблицыЦен = НоваяСтрока.НомерСтроки-1;
					НоваяСтрока.СпособРасчетаЦены = СтруктураПараметров.ТипЦен.СпособРасчетаЦены;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
КонецПроцедуры	

Процедура РасчитатьСебестоимость(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	РасчетСебестоимостиВыпуска.Ссылка
	                      |ИЗ
	                      |	Документ.РасчетСебестоимостиВыпуска КАК РасчетСебестоимостиВыпуска
	                      |ГДЕ
	                      |	РасчетСебестоимостиВыпуска.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	                      |	И РасчетСебестоимостиВыпуска.Проведен
	                      |	И РасчетСебестоимостиВыпуска.Организация = &Организация
	                      |	И РасчетСебестоимостиВыпуска.ОтражатьВУправленческомУчете = &ОтражатьВУправленческомУчете
	                      |	И РасчетСебестоимостиВыпуска.ОтражатьВБухгалтерскомУчете = &ОтражатьВБухгалтерскомУчете
						  |УПОРЯДОЧИТЬ ПО
						  |	Дата, Ссылка");
						  
	ДатаДокумента = ДобавитьМесяц(ТекущаяДата(), - СтруктураПараметров.Задержка);					  
	Запрос.УстановитьПараметр("Дата",ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	
	Если СтруктураПараметров.ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете ТОгда
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете = Ложь;
	Иначе	
		ОтражатьВУправленческомУчете = Ложь;
		ОтражатьВБухгалтерскомУчете = Истина;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОтражатьВУправленческомУчете", ОтражатьВУправленческомУчете);
	Запрос.УстановитьПараметр("ОтражатьВБухгалтерскомУчете", ОтражатьВБухгалтерскомУчете);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() ТОгда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.РасчетСебестоимостиВыпуска.СоздатьДокумент();
		ДокументОбъект.Дата = ДатаДокумента;
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(ДатаДокумента);
		ДокументОбъект.Организация = СтруктураПараметров.Организация;
		ДокументОбъект.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
		ДокументОбъект.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
	КонецЕсли;	
	
	ДокументОбъект.ВыполняемыеДействия.Загрузить(СтруктураПараметров.ВыполняемыеДействия);
	
	Если ДокументОбъект.Проведен Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе	
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Отказ = Ложь;
	
	//Переменная используется при проведении документа. Т.к. вне транзакции могут проводиться только непроведенные документы, то движения очищать не нужно
	ДокументОбъект.мУдалятьДвижения = Ложь;
	
	ДокументОбъект.ОбработкаПроведения(Отказ,РежимПроведенияДокумента.Неоперативный);
	
	Если Не Отказ Тогда
		//Если при выполнении процедуры ОбработкаПроведения() были добавлены движения в коллекцию Движения, то их нужно записать
		Для Каждого ТекущееДвижение Из ДокументОбъект.Движения Цикл
			Если ТекущееДвижение.Модифицированность() ТОгда
				ТекущееДвижение.Записать();
			КонецЕсли;
		КонецЦикла;	
		
		ДокументОбъект.Проведен = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;	
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ОСНОВНЫЕ ПРОЦЕДУРЫ

// Функция инициализирует структуру таблицы списания затрат
//
Функция ПодготовитьТаблицуДляФормированияДвижений(СтруктураНаборовЗаписейПоВидамУчета, Источник)
	
	ТаблицаДляФормированияДвижений = Новый ТаблицаЗначений();
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ИмяРегистра", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(15)));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ВыполнятьСписание", Новый ОписаниеТипов("Булево"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ВыполнятьОприходование", Новый ОписаниеТипов("Булево"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ВыполнятьДвижениеСписание", Новый ОписаниеТипов("Булево"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ВыполнятьДвижениеОприходование", Новый ОписаниеТипов("Булево"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ФормироватьПроводки", Новый ОписаниеТипов("Булево"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("РассчитыватьСуммы", Новый ОписаниеТипов("Булево"));
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("АналитикаВидаУчета", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиВидаУчета"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("АналитикаУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("АналитикаУчетаПартий", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаПартий"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("АналитикаРаспределенияЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиРаспределенияЗатрат"));
	
	ОписаниеТиповКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	ОписаниеТиповСтоимость = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("Количество", ОписаниеТиповКоличество);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КоличествоНУ", ОписаниеТиповКоличество);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("Стоимость", ОписаниеТиповСтоимость);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("СтоимостьНУ", ОписаниеТиповСтоимость);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("НДСВходящий", ОписаниеТиповСтоимость);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("НДСКредит", ОписаниеТиповСтоимость);
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КоличествоПолучатель", ОписаниеТиповКоличество);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КоличествоНУПолучатель", ОписаниеТиповКоличество);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("СтоимостьПолучатель", ОписаниеТиповСтоимость);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("СтоимостьНУПолучатель", ОписаниеТиповСтоимость);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("НДСВходящийПолучатель", ОписаниеТиповСтоимость);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("НДСКредитПолучатель", ОписаниеТиповСтоимость);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КодыОперацийПартииТоваров"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КодыОперацийПартииМатериаловВЭксплуатации"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КодыОперацийВыпускПродукции"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КодыОперацийЗатратыНаВыпускПродукции"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КодОперации", Новый ОписаниеТипов(МассивТипов));
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КорАналитикаВидаУчета", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиВидаУчета, СправочникСсылка.КлючиАналитикиУчетаПрочихЗатрат"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КорАналитикаУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КорАналитикаУчетаПартий", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаПартий"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("КорАналитикаРаспределенияЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиРаспределенияЗатрат"));
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ХарактерЗатрат", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерЗатрат"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ВидЗатрат", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗатрат"));
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДляФормированияДвижений.Колонки.Добавить("СуммаВал", ОписаниеТиповСтоимость);
	ТаблицаДляФормированияДвижений.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));

	
	Если СтруктураНаборовЗаписейПоВидамУчета.Свойство("УчетЗатратРегл") Тогда
		//Дополнительные реквизиты, которые могут не отражаться в регистре "Учет затрат организаций" (в случае если не ведется партионный учет по складам) 
		//но нужны для формирования проводок
		ТаблицаДляФормированияДвижений.Колонки.Добавить("СкладПолучатель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;	
	
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию")
	Тогда
		ТаблицаДляФормированияДвижений.Колонки.Добавить("ОтражатьВУправленческомУчете", Новый ОписаниеТипов("Булево"));
		ТаблицаДляФормированияДвижений.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", Новый ОписаниеТипов("Булево"));
		ТаблицаДляФормированияДвижений.Колонки.Добавить("ОтражатьВНалоговомУчете", Новый ОписаниеТипов("Булево"));
		ТаблицаДляФормированияДвижений.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СписаниеМатериаловИзЭксплуатации"));
		ТаблицаДляФормированияДвижений.Колонки.Добавить("СпособОтраженияРасходов", Новый ОписаниеТипов(МассивТипов));
		
		ТаблицаДляФормированияДвижений.Колонки.Добавить("СчетУчетаБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	КонецЕсли;
	
	ТаблицаДляФормированияДвижений.Колонки.Добавить("ДатаДокументаПартии", Новый ОписаниеТипов("Дата"));
	
	Возврат ТаблицаДляФормированияДвижений;
	
КонецФункции	

// Процедура заполняет строку в таблице списания затрат
//
Процедура ЗаполнитьСтрокуВТаблицеДляФормированияДвижений(
	ТаблицаДляФормированияДвижений,
	ТекущаяСтрокаСписания,
	ТекущаяСтрокаОприходования,
	ИмяРегистра,
	КодОперацииПартийТоваров,
	Источник,
	АналитикаВидаУчета,
	АналитикаУчетаЗатрат,
	АналитикаУчетаПартий,
	АналитикаРаспределенияЗатрат,
	АналитикаВидаУчетаПолучатель,
	АналитикаУчетаЗатратПолучатель,
	АналитикаУчетаПартийПолучатель,
	АналитикаРаспределенияЗатратПолучатель
	)
						
	НоваяСтрока = ТаблицаДляФормированияДвижений.Добавить();					
	
	НоваяСтрока.ИмяРегистра = ИмяРегистра;
	НоваяСтрока.ВыполнятьСписание = (НЕ ТекущаяСтрокаСписания = Неопределено);
	НоваяСтрока.ВыполнятьДвижениеСписание = ?(НоваяСтрока.ВыполнятьСписание, ТекущаяСтрокаСписания.ВыполнятьДвижение,Ложь);
	НоваяСтрока.ВыполнятьОприходование = (НЕ ТекущаяСтрокаОприходования = Неопределено);
	НоваяСтрока.ВыполнятьДвижениеОприходование = ?(НоваяСтрока.ВыполнятьОприходование, ТекущаяСтрокаОприходования.ВыполнятьДвижение,Ложь);
	Если НЕ ТекущаяСтрокаСписания = Неопределено Тогда
		НоваяСтрока.РассчитыватьСуммы = ТекущаяСтрокаСписания.РассчитыватьСуммы;
	Иначе
		НоваяСтрока.РассчитыватьСуммы = Истина;
	КонецЕсли;	
	
	Если КодОперацииПартийТоваров = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеПартийВЭксплуатацию Тогда	
		НоваяСтрока.ФормироватьПроводки = Истина; // так как в макете для документа ПередачаМатериаловВЭксплуатацию значение = Ложь
	Иначе
		НоваяСтрока.ФормироватьПроводки = НоваяСтрока.ВыполнятьДвижениеСписание;
	КонецЕсли;
	
	НоваяСтрока.КодОперации = КодОперацииПартийТоваров;
						
	//Кэширование информации для последующего формирования проводок
	НоваяСтрока.АналитикаВидаУчета = АналитикаВидаУчета;
	НоваяСтрока.АналитикаУчетаЗатрат = АналитикаУчетаЗатрат;
	НоваяСтрока.АналитикаУчетаПартий = АналитикаУчетаПартий;
	НоваяСтрока.АналитикаРаспределенияЗатрат = АналитикаРаспределенияЗатрат;
	
	НоваяСтрока.КорАналитикаВидаУчета = АналитикаВидаУчетаПолучатель;
	НоваяСтрока.КорАналитикаУчетаЗатрат = АналитикаУчетаЗатратПолучатель;
	НоваяСтрока.КорАналитикаУчетаПартий = АналитикаУчетаПартийПолучатель;
	НоваяСтрока.КорАналитикаРаспределенияЗатрат = АналитикаРаспределенияЗатратПолучатель;
	
	Если НЕ ТекущаяСтрокаСписания = Неопределено Тогда
		Если ИмяРегистра = "УчетЗатратРегл" Тогда
			НоваяСтрока.Склад = ТекущаяСтрокаСписания.СкладДляФормированияПроводок;
			НоваяСтрока.СуммаВал = ТекущаяСтрокаСписания.СуммаВал;
			НоваяСтрока.Валюта = ТекущаяСтрокаСписания.Валюта;
		КонецЕсли;	
	
		НоваяСтрока.Количество = ТекущаяСтрокаСписания.Количество;
		НоваяСтрока.Стоимость = ТекущаяСтрокаСписания.Стоимость;
		НоваяСтрока.КоличествоНУ = ТекущаяСтрокаСписания.КоличествоНУ;
		НоваяСтрока.Стоимость = ТекущаяСтрокаСписания.Стоимость;
		НоваяСтрока.СтоимостьНУ = ТекущаяСтрокаСписания.СтоимостьНУ;
		НоваяСтрока.НДСВходящий = ТекущаяСтрокаСписания.НДСВходящий;
		НоваяСтрока.НДСКредит = ТекущаяСтрокаСписания.НДСКредит;
		
		// Запомним движения для расчета погашенной стоимости.
		Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию")
		Тогда
			НоваяСтрока.Номенклатура = ТекущаяСтрокаСписания.Затрата;
			НоваяСтрока.СпособОтраженияРасходов = ТекущаяСтрокаСписания.СпособОтраженияРасходов;
			
			Если ИмяРегистра = "УчетЗатратРегл" Тогда
				НоваяСтрока.СчетУчетаБУ = ТекущаяСтрокаСписания.СчетУчета;
				
				НоваяСтрока.ОтражатьВБухгалтерскомУчете = Истина;
			Иначе
				НоваяСтрока.ОтражатьВУправленческомУчете = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
		
	Если НЕ ТекущаяСтрокаОприходования = Неопределено Тогда
		Если ИмяРегистра = "УчетЗатратРегл" Тогда
			НоваяСтрока.СкладПолучатель = ТекущаяСтрокаОприходования.СкладДляФормированияПроводок;
		КонецЕсли;	
			
		НоваяСтрока.ХарактерЗатрат = ТекущаяСтрокаОприходования.ХарактерЗатрат;
		НоваяСтрока.ВидЗатрат = ТекущаяСтрокаОприходования.ВидЗатрат;
		
		НоваяСтрока.КоличествоПолучатель = ТекущаяСтрокаОприходования.Количество;
		НоваяСтрока.СтоимостьПолучатель = ТекущаяСтрокаОприходования.Стоимость;
		НоваяСтрока.КоличествоНУПолучатель = ТекущаяСтрокаОприходования.КоличествоНУ;
		НоваяСтрока.СтоимостьПолучатель = ТекущаяСтрокаОприходования.Стоимость;
		НоваяСтрока.СтоимостьНУПолучатель = ТекущаяСтрокаОприходования.СтоимостьНУ;
		НоваяСтрока.НДСВходящийПолучатель = ТекущаяСтрокаОприходования.НДСВходящий;
		НоваяСтрока.НДСКредитПолучатель = ТекущаяСтрокаОприходования.НДСКредит;
		
		Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			НоваяСтрока.ДатаДокументаПартии = ТекущаяСтрокаОприходования.СтрокаИсходнойТаблицы.ДокументОприходования.Дата;
		КонецЕсли;	
	КонецЕсли;	
			
КонецПроцедуры	

// Функция возвращает значения ресурса для записи в регистр по налоговому учету. 
// Если документ по налоговому учету не проводиться, то в соответствующие ресурсы всегда должен писаться 0
// 
// Параметры:
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа,
//  СтароеЗначениеРесурса - значение ресурса которое нужно писать в регистр, если документ проводиться по НУ.
//  
// Возвращаемое значение:
//  значение ресурса для записи в регистр.		
//
Функция ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, СтароеЗначениеРесурса)
	Возврат СтароеЗначениеРесурса;
КонецФункции	

// Процедура добавляет движения в регистры учета затрат
// 
// Параметры:
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа,
//  ТекущаяСтрока - строка таблицы значений, описывающая затрату,
//  ТекущийНабор - набор записей, в который добавляются записи по затратам.
//
Процедура СформироватьДвиженияПоСтрокеДляСписания(СтруктураШапкиДокумента,ТекущаяСтрока,ТекущийНабор)
	
		
	//Формирование расходных движений по регистру УчетЗатрат или УчетЗатратРегл
	Если ТекущаяСтрока.ВыполнятьСписание И ТекущаяСтрока.ВыполнятьДвижениеСписание Тогда					
	  
		  РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			ТекущаяСтрока.АналитикаВидаУчета, // АналитикаВидаУчета
			ТекущаяСтрока.АналитикаУчетаЗатрат, // АналитикаУчетаЗатрат
			ТекущаяСтрока.АналитикаУчетаПартий, // АналитикаУчетаПартий
			ТекущаяСтрока.АналитикаРаспределенияЗатрат, // АналитикаУчетаВыпуска
			ТекущаяСтрока.КорАналитикаВидаУчета, // КорАналитикаВидаУчета
			ТекущаяСтрока.КорАналитикаУчетаЗатрат, // КорАналитикаУчетаЗатрат
			ТекущаяСтрока.КорАналитикаУчетаПартий, // КорАналитикаУчетаПартий
			ТекущаяСтрока.КорАналитикаРаспределенияЗатрат, // КорАналитикаУчетаВыпуска
			ВидДвиженияНакопления.Расход,
			ТекущаяСтрока.КодОперации,
			ТекущаяСтрока.Количество,
			ТекущаяСтрока.Стоимость,
			ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.КоличествоНУ),
			ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.СтоимостьНУ),
			ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.НДСВходящий),
			ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.НДСКредит),
			ТекущийНабор
		);
		
		Если ТекущаяСтрока.ИмяРегистра = "УчетЗатратРегл" Тогда 
			// расчет и движения по корректировкам использования в НУ
			БылиКорректировкиНУ = УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоКорректировкамИспользованияНУ(
				СтруктураШапкиДокумента,
				СтруктураШапкиДокумента.Дата,
				ТекущаяСтрока.АналитикаВидаУчета,
				ТекущаяСтрока.АналитикаУчетаЗатрат,						
				ТекущаяСтрока.АналитикаУчетаПартий,
				ТекущаяСтрока.АналитикаРаспределенияЗатрат,
				ТекущаяСтрока.КорАналитикаВидаУчета,
				ТекущаяСтрока.КорАналитикаУчетаЗатрат,						
				ТекущаяСтрока.КорАналитикаУчетаПартий,
				ТекущаяСтрока.КорАналитикаРаспределенияЗатрат,
				ТекущийНабор,
				ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.Стоимость),
				ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.НДСВходящий),
				ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.НДСКредит),
				, // НалоговоеНазначение
				ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.КоличествоНУ)
				);
		Иначе
			БылиКорректировкиНУ = Ложь;	
		КонецЕсли;			
	
	КонецЕсли;
	
	Если ТекущаяСтрока.ВыполнятьОприходование И ТекущаяСтрока.ВыполнятьДвижениеОприходование Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ХарактерЗатрат) Тогда
			УчетЗатратПоНоменклатуре = РасширеннаяАналитикаУчета.УчитыватьЗатратыПоНоменклатуре(
				ТекущаяСтрока.ХарактерЗатрат,
				ТекущаяСтрока.ВидЗатрат
			);
		Иначе
			УчетЗатратПоНоменклатуре = Истина;
		КонецЕсли;
	
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			ТекущаяСтрока.КорАналитикаВидаУчета, // АналитикаВидаУчета
			ТекущаяСтрока.КорАналитикаУчетаЗатрат, // АналитикаУчетаЗатрат
			ТекущаяСтрока.КорАналитикаУчетаПартий, // АналитикаУчетаПартий
			ТекущаяСтрока.КорАналитикаРаспределенияЗатрат, // АналитикаУчетаВыпуска
			ТекущаяСтрока.АналитикаВидаУчета, // КорАналитикаВидаУчета
			ТекущаяСтрока.АналитикаУчетаЗатрат, // КорАналитикаУчетаЗатрат
			ТекущаяСтрока.АналитикаУчетаПартий, // КорАналитикаУчетаПартий
			ТекущаяСтрока.АналитикаРаспределенияЗатрат, // КорАналитикаУчетаВыпуска
			ВидДвиженияНакопления.Приход,
			ТекущаяСтрока.КодОперации,
			?(УчетЗатратПоНоменклатуре, ТекущаяСтрока.КоличествоПолучатель, 0),
			ТекущаяСтрока.СтоимостьПолучатель,
			?(УчетЗатратПоНоменклатуре, ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.КоличествоНУПолучатель), 0),
			ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.СтоимостьНУПолучатель),
			ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.НДСВходящийПолучатель),
			ПолучитьРесурсДляНалоговогоУчета(СтруктураШапкиДокумента, ТекущаяСтрока.НДСКредитПолучатель),
			ТекущийНабор,
			ТекущаяСтрока.ДатаДокументаПартии
		);
	КонецЕсли;
КонецПроцедуры	

// Процедура расчитывает стоимость списания по затратам
// Параметры:
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа,
//  ТаблицаДляФормированияДвижений - таблица значений, содержащая перечень списываемых затрат,
//  СтруктураНаборовЗаписейПоВидамУчета - структура, содержащая перечень регистров, по которым производиться списание.
//
Процедура ЗаполнитьСуммыВДвижениях(СтруктураШапкиДокумента, ТаблицаДляФормированияДвижений, СтруктураНаборовЗаписейПоВидамУчета, СтруктураКлючиАналитики)
	
	Для Каждого ТекущийНаборЗаписей Из СтруктураНаборовЗаписейПоВидамУчета Цикл
		ИмяРегистраУчетаЗатрат = ТекущийНаборЗаписей.Ключ;
		
		//Определим способ расчета себестоимости
	    Если ИмяРегистраУчетаЗатрат = "УчетЗатрат" Тогда
			УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента.Дата);
			ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
			ТекстУчета = "управленческому";
		Иначе	
			УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
			ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете;
			ТекстУчета = "регламентированному";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитика)
		  ИЛИ УчетнаяПолитика.СпособРасчетаСебестоимостиВыпускаПоОперациям = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоНулевойСтоимости	Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ТаблицаДляФормированияДвижений.Колонки.Найти("ИдентификаторСтроки") = Неопределено Тогда
			//Пронумеруем строки
			ТаблицаДляФормированияДвижений.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0)));
			Для Каждого ТекущаяСтрока Из ТаблицаДляФормированияДвижений Цикл
				ТекущаяСтрока.ИдентификаторСтроки = ТаблицаДляФормированияДвижений.Индекс(ТекущаяСтрока);
			КонецЦикла;	
		КонецЕсли;
		
		СпособРасчетаСебестоимостиСписанияМПЗ = УчетнаяПолитика.СпособРасчетаСебестоимостиВыпускаПоОперациям;
		
		//Для документов выпуска определяем себестоимость только по плановым ценам или нулевой стоимости
		ТипДокумента = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);
		Если ТипДокумента = Тип("ДокументСсылка.УслугиСобственнымПодразделениям")
		 ИЛИ ТипДокумента = Тип("ДокументСсылка.ВыпускПродукции") Тогда
			Если  СпособРасчетаСебестоимостиСписанияМПЗ = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПрямымЗатратам Тогда
				СпособРасчетаСебестоимостиСписанияМПЗ = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПлановойСебестоимости;
			КонецЕсли;	
		КонецЕсли;	
		
		//Подготовим таблицу списанных товаров
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		Запрос.Текст = "ВЫБРАТЬ
				   |	ТЗ.ИдентификаторСтроки КАК НомерСтроки,
	               |	ТЗ.АналитикаВидаУчета,
				   |	ТЗ.АналитикаУчетаЗатрат,
				   |	ТЗ.АналитикаУчетаПартий,
				   |	ТЗ.АналитикаРаспределенияЗатрат
	               |ПОМЕСТИТЬ ТаблицаСписания
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |ГДЕ
	               |	ТЗ.ВыполнятьСписание = ИСТИНА
				   |	И ТЗ.РассчитыватьСуммы
				   |	И ТЗ.ИмяРегистра = """ + ИмяРегистраУчетаЗатрат + """";
		Запрос.УстановитьПараметр("ТЗ", ТаблицаДляФормированияДвижений);
		
		Запрос.Выполнить();
		
		Если СпособРасчетаСебестоимостиСписанияМПЗ = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПрямымЗатратам Тогда
			Запрос.Текст = "ВЫБРАТЬ
                      |	ТаблицаСписания.НомерСтроки,
					  |
                      |	//ДляРеглУчета ВЫБОР КОГДА ЕСТЬNULL(УчетЗатратОстатки.КоличествоНУОстаток,0) = 0 
					  |	//ДляРеглУчета ТОГДА 0
					  |	//ДляРеглУчета ИНАЧЕ ЕСТЬNULL(УчетЗатратОстатки.СтоимостьНУОстаток,0) / ЕСТЬNULL(УчетЗатратОстатки.КоличествоНУОстаток,0)
					  |	//ДляРеглУчета КОНЕЦ КАК ЦенаНУ,
					  |
                      |	//ДляРеглУчета ВЫБОР КОГДА ЕСТЬNULL(УчетЗатратОстатки.КоличествоНУОстаток,0) = 0 
					  |	//ДляРеглУчета ТОГДА 0
					  |	//ДляРеглУчета ИНАЧЕ ЕСТЬNULL(УчетЗатратОстатки.НДСВходящийОстаток,0) / ЕСТЬNULL(УчетЗатратОстатки.КоличествоНУОстаток,0)
					  |	//ДляРеглУчета КОНЕЦ КАК ЦенаНДСВходящий,					  
					  |
                      |	//ДляРеглУчета ВЫБОР КОГДА ЕСТЬNULL(УчетЗатратОстатки.КоличествоНУОстаток,0) = 0 
					  |	//ДляРеглУчета ТОГДА 0
					  |	//ДляРеглУчета ИНАЧЕ ЕСТЬNULL(УчетЗатратОстатки.НДСКредитОстаток,0) / ЕСТЬNULL(УчетЗатратОстатки.КоличествоНУОстаток,0)
					  |	//ДляРеглУчета КОНЕЦ КАК ЦенаНДСКредит,
					  |
                      |	ВЫБОР КОГДА ЕСТЬNULL(УчетЗатратОстатки.КоличествоОстаток,0) = 0 
					  |	ТОГДА 0
					  |	ИНАЧЕ ЕСТЬNULL(УчетЗатратОстатки.СтоимостьОстаток,0) / ЕСТЬNULL(УчетЗатратОстатки.КоличествоОстаток,0)
					  |	КОНЕЦ КАК Цена
					  |ИЗ
					  |	ТаблицаСписания КАК ТаблицаСписания
					  |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетЗатрат%СуффиксРегл%.Остатки(
					  |			&ДатаДокумента,
					  |			(АналитикаВидаУчета, АналитикаРаспределенияЗатрат, АналитикаУчетаЗатрат, АналитикаУчетаПартий)
					  |			В (ВЫБРАТЬ ТаблицаСписания.АналитикаВидаУчета, ТаблицаСписания.АналитикаРаспределенияЗатрат, ТаблицаСписания.АналитикаУчетаЗатрат, ТаблицаСписания.АналитикаУчетаПартий ИЗ ТаблицаСписания КАК ТаблицаСписания)) КАК УчетЗатратОстатки
					  |	ПО 	УчетЗатратОстатки.АналитикаВидаУчета = ТаблицаСписания.АналитикаВидаУчета
					  |		И УчетЗатратОстатки.АналитикаРаспределенияЗатрат = ТаблицаСписания.АналитикаРаспределенияЗатрат
					  |		И УчетЗатратОстатки.АналитикаУчетаЗатрат = ТаблицаСписания.АналитикаУчетаЗатрат
					  |		И УчетЗатратОстатки.АналитикаУчетаПартий = ТаблицаСписания.АналитикаУчетаПартий";
					  
		ИначеЕсли СпособРасчетаСебестоимостиСписанияМПЗ = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПлановойСебестоимости Тогда	
					  
			Запрос.Текст = "ВЫБРАТЬ 
						| РегистрАналитикаУчетаЗатрат.Затрата КАК Номенклатура, 
						| РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК ХарактеристикаНоменклатуры 
						|ПОМЕСТИТЬ ОтборПоНоменклатуре
						|ИЗ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
						|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСписания КАК ТаблицаСписания
						|ПО РегистрАналитикаУчетаЗатрат.Ссылка  = ТаблицаСписания.АналитикаУчетаЗатрат
						|ОБЪЕДИНИТЬ ВСЕ
						|ВЫБРАТЬ 
						| РегистрАналитикаРаспределенияЗатрат.Продукция, 
						| РегистрАналитикаРаспределенияЗатрат.ХарактеристикаПродукции 
						|ИЗ РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
						|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСписания КАК ТаблицаСписания
						|ПО РегистрАналитикаРаспределенияЗатрат.Ссылка  = ТаблицаСписания.АналитикаРаспределенияЗатрат
						|
						|;
						|
						|ВЫБРАТЬ
						|			ЦеныНоменклатуры.Номенклатура,
						|			ЦеныНоменклатуры.ХарактеристикаНоменклатуры,
						|			(ЦеныНоменклатуры.Цена 
						|			* ЕСТЬNULL(КурсыВалют.Курс, 0)
						|			* (ВЫБОР КОГДА ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL 
						|					ИЛИ ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент = 0 ТОГДА
						|				1
						|			ИНАЧЕ
						|				ЦеныНоменклатуры.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / 
						|				ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент
						|			КОНЕЦ)
						|			* ЕСТЬNULL(КурсВалютыУчета.Кратность, 1)
						|			/ ( ЕСТЬNULL(КурсВалютыУчета.Курс, 1)
						|				* (ВЫБОР КОГДА КурсыВалют.Кратность ЕСТЬ NULL ИЛИ КурсыВалют.Кратность = 0 Тогда
						|					1
						|				ИНАЧЕ 
						|					КурсыВалют.Кратность
						|				КОНЕЦ) 
						|				)
						|			) КАК Цена
						|ПОМЕСТИТЬ ТаблицаЦен
						|			ИЗ
						|				РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента,
						|					ТипЦен В (
						|						ВЫБРАТЬ
						|							Константы.ТипЦенПлановойСебестоимостиНоменклатуры
						|						ИЗ
						|							Константы КАК Константы
						|						)
						|					И (Номенклатура, ХарактеристикаНоменклатуры) В 
						|						(ВЫБРАТЬ ОтборПоНоменклатуре.Номенклатура, ОтборПоНоменклатуре.ХарактеристикаНоменклатуры 
						|						ИЗ ОтборПоНоменклатуре КАК ОтборПоНоменклатуре)
						|       	
						|					) КАК ЦеныНоменклатуры
						|				
						|				ЛЕВОЕ СОЕДИНЕНИЕ
						|					РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента) КАК КурсыВалют
						|				ПО 
						|					КурсыВалют.Валюта = ЦеныНоменклатуры.Валюта
						|				
						|				ЛЕВОЕ СОЕДИНЕНИЕ
						|					РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, 
						|						ВАЛЮТА В (
						|							ВЫБРАТЬ
						|								//ДляУпрУчета Константы.ВалютаУправленческогоУчета 
						|								//ДляРеглУчета Константы.ВалютаРегламентированногоУчета
						|							ИЗ
						|								Константы КАК Константы
						|							)
						|						) КАК КурсВалютыУчета
						|				ПО ИСТИНА
			            |
						|;
						|
						|ВЫБРАТЬ
						|	ТаблицаСписания.НомерСтроки,
						|	//ДляРеглУчета ЕСТЬNULL(ТаблицаЦенПоЗатратам.Цена,0) + ЕСТЬNULL(ТаблицаЦенПоВыпуску.Цена,0) КАК ЦенаНУ,
						|	//ДляРеглУчета 0 КАК ЦенаНДСВходящий,					  
						|	//ДляРеглУчета 0 КАК ЦенаНДСКредит,					  
						|	ЕСТЬNULL(ТаблицаЦенПоЗатратам.Цена,0) + ЕСТЬNULL(ТаблицаЦенПоВыпуску.Цена,0) КАК Цена,
						|	РегистрАналитикаРаспределенияЗатрат.Продукция,
						|	ТаблицаЦенПоВыпуску.Цена
						|ИЗ
						|	ТаблицаСписания КАК ТаблицаСписания
						|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
						|	ПО РегистрАналитикаВидаУчета.Ссылка = ТаблицаСписания.АналитикаВидаУчета
						|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
						|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦен КАК ТаблицаЦенПоЗатратам
						|		ПО 	ТаблицаЦенПоЗатратам.Номенклатура = РегистрАналитикаУчетаЗатрат.Затрата
						|			И ТаблицаЦенПоЗатратам.ХарактеристикаНоменклатуры = РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты
						|	ПО РегистрАналитикаУчетаЗатрат.Ссылка = ТаблицаСписания.АналитикаУчетаЗатрат
						|	   И РегистрАналитикаВидаУчета.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Выпуск)
						|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
						|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦен КАК ТаблицаЦенПоВыпуску
						|		ПО 	ТаблицаЦенПоВыпуску.Номенклатура = РегистрАналитикаРаспределенияЗатрат.Продукция
						|			И ТаблицаЦенПоВыпуску.ХарактеристикаНоменклатуры = РегистрАналитикаРаспределенияЗатрат.ХарактеристикаПродукции
						|	ПО РегистрАналитикаРаспределенияЗатрат.Ссылка = ТаблицаСписания.АналитикаРаспределенияЗатрат
						|	   И РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Выпуск)
						|";
						
					  
		КонецЕсли;
		Запрос.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(Запрос.Текст, ВидОтраженияВУчете);			
		Запрос.УстановитьПараметр("ДатаДокумента",СтруктураШапкиДокумента.Дата);					  			
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].Стоимость = ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].Количество * Выборка.Цена;
				ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].СтоимостьПолучатель = ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].Стоимость;
				
				Если СпособРасчетаСебестоимостиСписанияМПЗ = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПрямымЗатратам
				  И ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].Стоимость = 0 Тогда
					Если (ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
					  И ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].КодОперации = Перечисления.КодыОперацийПартииТоваров.Реализация) Тогда
						//Возврат на основании реализации, сообщение не выдаем, т.к. себестоимость будет корректироваться до себестоимости из реализации  
					Иначе	
						ОбщегоНазначения.Сообщение(
							"Для номенклатуры """ + ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].АналитикаУчетаЗатрат + """ движения сформировались без суммовой оценки по "+ ТекстУчета + " учету",СтатусСообщения.Внимание,
							"Проведение документа """ + СокрЛП(СтруктураШапкиДокумента.Ссылка) + """: ");
					КонецЕсли;		
				КонецЕсли;	
				
				Если ИмяРегистраУчетаЗатрат = "УчетЗатратРегл" Тогда
					ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].СтоимостьНУ = ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].КоличествоНУ * Выборка.ЦенаНУ;
					КлючАналитикиПолучатель = ПолучитьАналитикуПоКлючуАналитики("АналитикаВидаУчета", ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].КорАналитикаВидаУчета, СтруктураКлючиАналитики);
					Если КлючАналитикиПолучатель <> Неопределено Тогда
						НалоговоеНазначениеПолучатель = КлючАналитикиПолучатель.НалоговоеНазначение;
						ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].СтоимостьНУПолучатель = НалоговыйУчет.ОпределитьСтоимостьНУ(НалоговоеНазначениеПолучатель, ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].СтоимостьНУ);
					Иначе
						ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].СтоимостьНУПолучатель = ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].СтоимостьНУ;
					КонецЕсли; 
					
					Если СпособРасчетаСебестоимостиСписанияМПЗ = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПлановойСебестоимости Тогда	
						
						НалоговоеНазначение           = ПолучитьАналитикуПоКлючуАналитики("АналитикаВидаУчета", ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].АналитикаВидаУчета, СтруктураКлючиАналитики).НалоговоеНазначение;

						Если НалоговыйУчетПовтИсп.ПолучитьВидНалоговойДеятельностиНалоговогоНазначения(НалоговоеНазначение) <> Справочники.ВидыНалоговойДеятельности.НеОблагаемая Тогда
							ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].НДСВходящий = ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].Стоимость * 0.2;
						Иначе
							ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].НДСВходящий = 0;
						КонецЕсли;	
						
						Если (НалоговыйУчетПовтИсп.ПолучитьВидДеятельностиНДСНалоговогоНазначения(НалоговоеНазначение) <> Перечисления.ВидыДеятельностиНДС.Необлагаемая 
							 И НалоговыйУчетПовтИсп.ПолучитьВидНалоговойДеятельностиНалоговогоНазначения(НалоговоеНазначение) <> Справочники.ВидыНалоговойДеятельности.НеОблагаемая) Тогда
							ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].НДСКредит = ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].Стоимость * 0.2;
						Иначе
							ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].НДСКредит = 0;
						КонецЕсли;	
						
					Иначе
						
						ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].НДСВходящий = ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].КоличествоНУ * Выборка.ЦенаНДСВходящий;
						ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].НДСКредит = ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].КоличествоНУ * Выборка.ЦенаНДСКредит;
						
					КонецЕсли;	
					ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].НДСВходящийПолучатель = ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].НДСВходящий;
					ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].НДСКредитПолучатель   = ТаблицаДляФормированияДвижений[Выборка.НомерСтроки].НДСКредит;
					
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;			
	КонецЦикла;
КонецПроцедуры	

// Процедура сворачивает таблицу для формирования движений по регистрам учета затрат
// Параметры:
//  ТаблицаДляФормированияДвижений - таблица значений для формирования движений.
//
Процедура СвернутьТаблицуДляФормированияДвижений(ТаблицаДляФормированияДвижений)
	СписокСуммируемыхКолонок = "Количество, КоличествоНУ, Стоимость, СтоимостьНУ, НДСВходящий, НДСКредит, КоличествоПолучатель, КоличествоНУПолучатель, СтоимостьПолучатель, СтоимостьНУПолучатель, НДСВходящийПолучатель, НДСКредитПолучатель,";
	СписокКолонокДляГруппировки = "";
	Для Каждого ТекущаяКолонка Из ТаблицаДляФормированияДвижений.Колонки Цикл
		Если Найти(СписокСуммируемыхКолонок,ТекущаяКолонка.Имя+",") = 0 Тогда
			СписокКолонокДляГруппировки = СписокКолонокДляГруппировки + ТекущаяКолонка.Имя+",";
		КонецЕсли;
	КонецЦикла;	
	
	//Удалим последнюю запятую
	СписокСуммируемыхКолонок = Лев(СписокСуммируемыхКолонок, СтрДлина(СписокСуммируемыхКолонок)-1);
	СписокКолонокДляГруппировки = Лев(СписокКолонокДляГруппировки, СтрДлина(СписокКолонокДляГруппировки)-1);
	
	ТаблицаДляФормированияДвижений.Свернуть(СписокКолонокДляГруппировки,СписокСуммируемыхКолонок);
	
	//Удалим движения с одинаковой аналитикой источника и получателя
	НомерТекущейСтроки = 0;
	Пока НомерТекущейСтроки < ТаблицаДляФормированияДвижений.Количество() Цикл
	    ТекущаяСтрока = ТаблицаДляФормированияДвижений[НомерТекущейСтроки];
		Если ТекущаяСтрока.АналитикаВидаУчета = ТекущаяСтрока.КорАналитикаВидаУчета
		  И ТекущаяСтрока.АналитикаРаспределенияЗатрат = ТекущаяСтрока.КорАналитикаРаспределенияЗатрат
		  И ТекущаяСтрока.АналитикаУчетаЗатрат = ТекущаяСтрока.КорАналитикаУчетаЗатрат
		  И ТекущаяСтрока.АналитикаУчетаПартий = ТекущаяСтрока.КорАналитикаУчетаПартий 
		  И ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоПолучатель Тогда
		  Если ТаблицаДляФормированияДвижений.Колонки.Найти("Склад") <> Неопределено
			И ТаблицаДляФормированияДвижений.Колонки.Найти("СкладПолучатель") <> Неопределено  
			И ТекущаяСтрока.Склад <> ТекущаяСтрока.СкладПолучатель Тогда
			  //Это перемещение между складами когда партионный учет по складам не ведется, строки нужно оставить для формирования проводки
			  ТекущаяСтрока.ВыполнятьДвижениеОприходование = Ложь;
			  ТекущаяСтрока.ВыполнятьДвижениеСписание = Ложь;
			  НомерТекущейСтроки = НомерТекущейСтроки + 1;
		  Иначе			  
			ТаблицаДляФормированияДвижений.Удалить(НомерТекущейСтроки);
		  КонецЕсли;	
		Иначе
			НомерТекущейСтроки = НомерТекущейСтроки + 1;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

// Процедура - 	обработчик, вызывается подпиской на событие "ПриПроведенииРасширеннаяАналитикаЗапасовИзменениеСостояния".
//				Содержит общий алгоритм формриования движений по регистрам "Учет затрат" и "Учет затрат организаций"
// Параметры:
//  Источник - структура или ДокументОбъект, содержащая реквизиты необходимы для проведения по затратам,
//  Отказ - флаг, устанавливается в случае если произошла ошибка,
//  РежимПроведения - режим проведения документа.
//
Процедура РасширеннаяАналитикаЗапасовИзменениеСостояния(Источник, Отказ, РежимПроведения) Экспорт
	
	ДополнитьСтруктуруШапкиДополнительнымиПолямиУчетаЗатрат(Источник.мСтруктураШапкиДокумента);
	
	СтруктураНаборовЗаписейПоВидамУчета = ПолучитьСтруктуруНаборовЗаписейПоВидамУчета(Источник);
	
	//Создадим таблицу значений, в которой будет кэшироваться информация для последующего формирования проводок
	ТаблицаДляФормированияДвижений = ПодготовитьТаблицуДляФормированияДвижений(СтруктураНаборовЗаписейПоВидамУчета, Источник);
		
	Для Каждого ТекущаяТабличнаяЧасть Из Источник.мСтруктураТабличныхЧастей Цикл
		
		//Ести в табличной части нет строк, то пропускаем
		Если ТекущаяТабличнаяЧасть.Значение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		//Определение списка кодов операций
		СтроковоеПредставлениеКодаОперации = "";
		ИмяДокумента = "";
		СтруктураКодовОперацийПартийТоваров = ПолучитьКодОперацииПоДокументу(Источник.Ссылка, Источник.мСтруктураШапкиДокумента, ТекущаяТабличнаяЧасть.Ключ, ИмяДокумента);
		Если СтруктураКодовОперацийПартийТоваров = Неопределено Тогда
			ОбщегоНазначения.Сообщение("Документ " + Источник.Ссылка + ". Операция не поддерживается в режиме использования расширенной аналитики и не будет учтена при расчете себестоимости");
			ПодготовитьИсточникДляВозвратаКлиенту(Источник);
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекущийКодОперацииПартийТоваров Из СтруктураКодовОперацийПартийТоваров Цикл
			
			КодОперацииПартийТоваров = ТекущийКодОперацииПартийТоваров.Значение;
			СтроковоеПредставлениеКодаОперации = ТекущийКодОперацииПартийТоваров.Ключ;
			
			Для Каждого ТекущийНабор Из СтруктураНаборовЗаписейПоВидамУчета Цикл
				СтруктураКлючиАналитики = Новый Структура;
				ОсновнаяТаблицаДляФормированияДвижений = Неопределено;
				
				Если ТекущийНабор.Ключ = "УчетЗатрат" Тогда
					ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
				Иначе
					ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете;
				КонецЕсли;
				
				// Получение таблицы для формирования расходных движений по регистру				
				ТаблицаДанныхДляСписания = ПолучитьСтруктуруДанныхВСоответствииСШаблоном(
					ТекущийНабор.Ключ, 
					Источник.мСтруктураШапкиДокумента, 
					ТекущаяТабличнаяЧасть.Значение, 
					ИмяДокумента + "." + СтроковоеПредставлениеКодаОперации + "." + ТекущаяТабличнаяЧасть.Ключ + ".Источник");
					
				Если НЕ ТаблицаДанныхДляСписания = Неопределено Тогда
					ОсновнаяТаблицаДляФормированияДвижений = ТаблицаДанныхДляСписания;
				КонецЕсли;	
				
				// Получение таблицы для формирования приходных движений по регистру
				ТаблицаДанныхДляОприходования = ПолучитьСтруктуруДанныхВСоответствииСШаблоном(
					ТекущийНабор.Ключ, 
					Источник.мСтруктураШапкиДокумента, 
					ТекущаяТабличнаяЧасть.Значение, 
					ИмяДокумента + "." + СтроковоеПредставлениеКодаОперации + "." + ТекущаяТабличнаяЧасть.Ключ + ".Получатель");
				
				Если НЕ ТаблицаДанныхДляОприходования = Неопределено Тогда
					Если ОсновнаяТаблицаДляФормированияДвижений = Неопределено Тогда
						ОсновнаяТаблицаДляФормированияДвижений = ТаблицаДанныхДляОприходования;
					КонецЕсли;	
				КонецЕсли;	
				
				// Проверка необходимости формирования движений
				Если ОсновнаяТаблицаДляФормированияДвижений = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				
				СтруктураДанныхДляПеремещения = Новый Структура();
				Для Каждого ТекущаяСтрока Из ОсновнаяТаблицаДляФормированияДвижений Цикл
					
					Если ТаблицаДанныхДляСписания = Неопределено Тогда
						
						//Это внешнее поступление
						//Определение аналитики поступления
						ТекущаяСтрокаОприходования = ТекущаяСтрока;
						АналитикаВидаУчета = Неопределено;
						АналитикаУчетаЗатрат = Неопределено;
						АналитикаУчетаПартий = Неопределено;
						АналитикаРаспределенияЗатрат = Неопределено;
						
						АналитикаВидаУчетаПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаВидаУчета,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
						АналитикаУчетаЗатратПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
						АналитикаУчетаПартийПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаУчетаПартий,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
						АналитикаРаспределенияЗатратПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
					Иначе
						//Это или списание или перемещение
						//Определение аналитики списания
						АналитикаВидаУчета = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаВидаУчета,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
						АналитикаУчетаЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
						АналитикаУчетаПартий = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаУчетаПартий,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
						АналитикаРаспределенияЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
							Источник.мСтруктураШапкиДокумента,
							ТекущаяСтрока,
							Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
							ВидОтраженияВУчете,
							СтруктураКлючиАналитики
						);
						
						Если НЕ ТаблицаДанныхДляОприходования = Неопределено Тогда
							
							//Это перемещение
							//Определение аналитики поступления
							ТекущаяСтрокаОприходования = ТаблицаДанныхДляОприходования.Получить(ОсновнаяТаблицаДляФормированияДвижений.Индекс(ТекущаяСтрока));
							
							Если ТекущаяСтрокаОприходования.ИспользоватьАналитикуВидаУчета Тогда
								АналитикаВидаУчетаПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
									Источник.мСтруктураШапкиДокумента,
									ТекущаяСтрокаОприходования,
									Перечисления.КлючиАналитики.АналитикаВидаУчета,
									ВидОтраженияВУчете,
									СтруктураКлючиАналитики
								);
							Иначе	
								АналитикаВидаУчетаПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
									Источник.мСтруктураШапкиДокумента,
									ТекущаяСтрокаОприходования,
									Перечисления.КлючиАналитики.АналитикаУчетаПрочихЗатрат,
									ВидОтраженияВУчете,
									СтруктураКлючиАналитики
								);
							КонецЕсли;
							
							АналитикаУчетаЗатратПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
								Источник.мСтруктураШапкиДокумента,
								ТекущаяСтрокаОприходования,
								Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
								ВидОтраженияВУчете,
								СтруктураКлючиАналитики
							);
							АналитикаУчетаПартийПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
								Источник.мСтруктураШапкиДокумента,
								ТекущаяСтрокаОприходования,
								Перечисления.КлючиАналитики.АналитикаУчетаПартий,
								ВидОтраженияВУчете,
								СтруктураКлючиАналитики
							);
							АналитикаРаспределенияЗатратПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
								Источник.мСтруктураШапкиДокумента,
								ТекущаяСтрокаОприходования,
								Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
								ВидОтраженияВУчете,
								СтруктураКлючиАналитики
							);
						Иначе
							//Аналитика поступления - пустая
							АналитикаВидаУчетаПолучатель = Неопределено;
							АналитикаУчетаЗатратПолучатель = Неопределено;
							АналитикаУчетаПартийПолучатель = Неопределено;
							АналитикаРаспределенияЗатратПолучатель = Неопределено;
						КонецЕсли;
					КонецЕсли;	
					
					ЗаполнитьСтрокуВТаблицеДляФормированияДвижений(ТаблицаДляФормированияДвижений,
						?(ТаблицаДанныхДляСписания = Неопределено, Неопределено, ТекущаяСтрока),
						?(ТаблицаДанныхДляОприходования = Неопределено, Неопределено, ТекущаяСтрокаОприходования),
						ТекущийНабор.Ключ,
						КодОперацииПартийТоваров,
						Источник,
						АналитикаВидаУчета,
						АналитикаУчетаЗатрат,
						АналитикаУчетаПартий,
						АналитикаРаспределенияЗатрат,
						АналитикаВидаУчетаПолучатель,
						АналитикаУчетаЗатратПолучатель,
						АналитикаУчетаПартийПолучатель,
						АналитикаРаспределенияЗатратПолучатель);
					
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
	
	//Формирование движений по регистрам учета затрат и подготовка таблицы проводок
	СвернутьТаблицуДляФормированияДвижений(ТаблицаДляФормированияДвижений);
	ТаблицаДляФормированияПроводок = ТаблицаДляФормированияДвижений.СкопироватьКолонки();
	ЗаполнитьСуммыВДвижениях(Источник.мСтруктураШапкиДокумента,ТаблицаДляФормированияДвижений, СтруктураНаборовЗаписейПоВидамУчета, СтруктураКлючиАналитики);
	
	Для Каждого ТекущийНабор Из СтруктураНаборовЗаписейПоВидамУчета Цикл
		ТаблицаДляФормированияДвиженийПоРегистру = ТаблицаДляФормированияДвижений.НайтиСтроки(Новый Структура("ИмяРегистра",ТекущийНабор.Ключ));
				
		Для Каждого ТекущаяСтрока Из ТаблицаДляФормированияДвиженийПоРегистру Цикл
			СформироватьДвиженияПоСтрокеДляСписания(Источник.мСтруктураШапкиДокумента,ТекущаяСтрока,ТекущийНабор.Значение);
			
			Если ТекущийНабор.Ключ = "УчетЗатратРегл"
			   И ТекущаяСтрока.ВыполнятьСписание
			   И ТекущаяСтрока.ФормироватьПроводки
			Тогда
				НоваяСтрока = ТаблицаДляФормированияПроводок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтрока);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЦикла;	
	
	//формирование движений по управленческим аналитическим регистрам
	Если СтруктураНаборовЗаписейПоВидамУчета.Свойство("УчетЗатрат") Тогда
		СформироватьДвиженияПоАналитическимРегистрам(
					СтруктураНаборовЗаписейПоВидамУчета.УчетЗатрат,
					Источник.Ссылка,
					Отказ,
					Источник.Дата,
					СтруктураКлючиАналитики,
					Источник.Движения,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);
	КонецЕсли;				
	
	//формирование движений по регламентированным аналитическим регистрам
	Если СтруктураНаборовЗаписейПоВидамУчета.Свойство("УчетЗатратРегл") Тогда
		
		СформироватьДвиженияПоАналитическимРегистрам(
					СтруктураНаборовЗаписейПоВидамУчета.УчетЗатратРегл,
					Источник.Ссылка,
					Отказ,
					Источник.Дата,
					СтруктураКлючиАналитики,
					Источник.Движения,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете);
					
		СформироватьДвиженияПоАналитическимРегистрам(
					СтруктураНаборовЗаписейПоВидамУчета.УчетЗатратРегл,
					Источник.Ссылка,
					Отказ,
					Источник.Дата,
					СтруктураКлючиАналитики,
					Источник.Движения,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете);
					
	КонецЕсли;				
	
	//формирование дополнительных движений по регистрам учета затрат
	СформироватьДополнительныеДвиженияПоРегистрамУчетаЗатрат(
		Источник, 
		СтруктураНаборовЗаписейПоВидамУчета, 
		ТаблицаДляФормированияДвижений
	);  
	
	//Формирование проводок
	Если НЕ СтруктураНаборовЗаписейПоВидамУчета.Свойство("УчетЗатратРегл") = Неопределено 
	  И ТаблицаДляФормированияПроводок.Количество() > 0	Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете",Источник.ОтражатьВБухгалтерскомУчете);
		СтруктураПараметров.Вставить("Дата",Источник.Дата);
		СтруктураПараметров.Вставить("Ссылка",Источник.Ссылка);
		
		
		СтруктураПараметров.Вставить("Движения",Новый Структура());
		
		Если СтруктураПараметров.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураПараметров.Движения.Вставить("Хозрасчетный",РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей());
			СтруктураПараметров.Движения.Хозрасчетный.Отбор.Регистратор.Установить(СтруктураПараметров.Ссылка);
		КонецЕсли;
		
		СформироватьПроводкиПоРезультатамСписания(СтруктураПараметров, ТаблицаДляФормированияПроводок,, Отказ, СтруктураКлючиАналитики);				
		
		Для Каждого Движение Из СтруктураПараметров.Движения Цикл
			Если Движение.Значение.Модифицированность()
			  И Движение.Значение.Количество() > 0 Тогда
				Движение.Значение.Записать(Ложь);
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;
	
	//Запись движений в БД
	ЗаписатьСтруктуруДвиженийВБазуДанных(СтруктураНаборовЗаписейПоВидамУчета);
	
	СформироватьДвиженияПоРеглВзаиморасчетамВВалюте(Источник);
	
	ПодготовитьИсточникДляВозвратаКлиенту(Источник);	
	
КонецПроцедуры //ПриПроведенииРасширеннаяАналитикаЗапасовИзменениеСостоянияОбработкаПроведения()


Функция СформироватьДвиженияПоКорректировкамИспользованияНУ(
	СтруктураПараметров,
	Период,
	АналитикаВидаУчета,
	АналитикаУчетаЗатрат,
	АналитикаУчетаПартий,
	АналитикаРаспределенияЗатрат,
	КорАналитикаВидаУчета,
	КорАналитикаУчетаЗатрат,						
	КорАналитикаУчетаПартий,
	КорАналитикаРаспределенияЗатрат,
	НаборЗаписейУчетЗатратРегл,
	СтоимостьБУ,
	НДСВходящий,
	НДСКредит,
	НалоговоеНазначение = Неопределено,
	Количество = 0
	) Экспорт
	
	Если СтоимостьБУ = 0 И НДСВходящий = 0 И НДСКредит = 0 И Количество = 0 Тогда
		Возврат Ложь;			                   
	КонецЕсли; 
	
	БылиКорректировкиНУ = Ложь;	
	
	Запрос = Новый Запрос();
	
	// получим необходимые значения из аналитики
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РегистрАналитикаВидаУчета.Организация, Неопределено) КАК Организация,
	|	ЕСТЬNULL(РегистрАналитикаВидаУчета.ПодразделениеОрганизации, Неопределено) КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(РегистрАналитикаВидаУчета.СчетУчета, Неопределено) КАК СчетУчета,
	|	ЕСТЬNULL(РегистрАналитикаВидаУчета.Склад, Неопределено) КАК Склад,
	|	ЕСТЬNULL(РегистрАналитикаВидаУчета.РазделУчета, Неопределено) КАК РазделУчета,
	|	РегистрАналитикаВидаУчета.НалоговоеНазначение
	|	ИЗ РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|		ГДЕ РегистрАналитикаВидаУчета.Ссылка = &АналитикаВидаУчета
	|";
	
	Запрос.УстановитьПараметр("АналитикаВидаУчета", АналитикаВидаУчета);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если НалоговоеНазначение = Неопределено Тогда
		НалоговоеНазначение = Выборка.НалоговоеНазначение;
	КонецЕсли;
	
	РазделУчета         = Выборка.РазделУчета;
	СчетУчета           = Выборка.СчетУчета;
	Организация         = Выборка.Организация;
	Подразделение       = Выборка.ПодразделениеОрганизации;
	Склад               = Выборка.Склад;
	
	ИспользуетсяАналитикаПрочихЗатрат = Ложь;
	
	Если ТипЗнч(КорАналитикаВидаУчета) = Тип("СправочникСсылка.КлючиАналитикиУчетаПрочихЗатрат") Тогда
		ИспользуетсяАналитикаПрочихЗатрат = Истина;
		// получим необходимые значения из кор. аналитики учета прочих затрат
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(РегистрКорАналитикаУчетаПрочихЗатрат.Организация, Неопределено) КАК Организация,
		|	ЕСТЬNULL(РегистрКорАналитикаУчетаПрочихЗатрат.СчетУчета, Неопределено) КАК СчетУчета,
		|	ЕСТЬNULL(РегистрКорАналитикаУчетаПрочихЗатрат.ОбъектСтроительства, Неопределено) КАК ОбъектСтроительства,
		|	ЕСТЬNULL(РегистрКорАналитикаУчетаПрочихЗатрат.НалоговоеНазначение, Неопределено) КАК НалоговоеНазначениеПоФакту
		|	ИЗ РегистрСведений.АналитикаУчетаПрочихЗатрат КАК РегистрКорАналитикаУчетаПрочихЗатрат
		|		ГДЕ РегистрКорАналитикаУчетаПрочихЗатрат.Ссылка = &КорАналитикаВидаУчета
		|";
	Иначе
		// получим необходимые значения из кор. аналитики вида учета
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(РегистрКорАналитикаВидаУчета.Организация, Неопределено) КАК Организация,
		|	ЕСТЬNULL(РегистрКорАналитикаВидаУчета.ПодразделениеОрганизации, Неопределено) КАК ПодразделениеОрганизации,
		|	ЕСТЬNULL(РегистрКорАналитикаВидаУчета.СчетУчета, Неопределено) КАК СчетУчета,
		|	ЕСТЬNULL(РегистрКорАналитикаВидаУчета.Склад, Неопределено) КАК Склад,
		|	ЕСТЬNULL(РегистрКорАналитикаВидаУчета.РазделУчета, Неопределено) КАК РазделУчета,
		|	ЕСТЬNULL(РегистрКорАналитикаВидаУчета.НалоговоеНазначение, Неопределено) КАК НалоговоеНазначениеПоФакту
		|	ИЗ РегистрСведений.АналитикаВидаУчета КАК РегистрКорАналитикаВидаУчета
		|		ГДЕ РегистрКорАналитикаВидаУчета.Ссылка = &КорАналитикаВидаУчета
		|";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("КорАналитикаВидаУчета", КорАналитикаВидаУчета);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	НалоговоеНазначениеПоФакту      = Выборка.НалоговоеНазначениеПоФакту;
	КорОрганизация                  = Выборка.Организация;
	КорСчетУчета                    = Выборка.СчетУчета;
	
	Если ИспользуетсяАналитикаПрочихЗатрат Тогда
		КорРазделУчета                  = Неопределено;
		КорПодразделение                = Неопределено;
		КорСклад                        = Неопределено;
		КорОбъектСтроительства          = Выборка.ОбъектСтроительства;
		КорИмяРегистраКорректировки     = "КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет";
	Иначе	
		КорРазделУчета                  = Выборка.РазделУчета;
		КорПодразделение                = Выборка.ПодразделениеОрганизации;
		КорСклад                        = Выборка.Склад;
		КорОбъектСтроительства          = Неопределено;
	КонецЕсли;	
	
	
	СтруктураКорректировкаНДСКредит = НалоговыйУчет.ПолучитьСуммуКорректировкиНалоговогоКредита(
		НалоговоеНазначение,
		НалоговоеНазначениеПоФакту,
		НДСВходящий,
		НДСКредит,
		СтоимостьБУ
	);
	
	Если НЕ СтруктураКорректировкаНДСКредит.ЕстьКорректировки Тогда
		Возврат Ложь;
	КонецЕсли; 	
	
	КорректировкаНДСКредит        = ОКР(СтруктураКорректировкаНДСКредит.КорректировкаНДСКредит, 2);
	НДСКредитПоФакту              = ОКР(СтруктураКорректировкаНДСКредит.НДСКредитПоФакту, 2);
	СуммаКорректировкиСтоимость   = ОКР(СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимость, 2);
	СуммаКорректировкиСтоимостьНУ = ОКР(СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимостьНУ, 2);
	
	
	
	// получим необходимые значения из аналитик
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РегистрАналитикаУчетаЗатрат.СтатьяЗатрат, Неопределено) КАК СтатьяЗатрат,
	|	ЕСТЬNULL(РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты, Неопределено) КАК ХарактеристикаЗатраты,
	|	ЕСТЬNULL(РегистрАналитикаУчетаЗатрат.Затрата, Неопределено) КАК Затрата
	|	ИЗ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|		ГДЕ РегистрАналитикаУчетаЗатрат.Ссылка = &АналитикаУчетаЗатрат
	|";
	
	Запрос.УстановитьПараметр("АналитикаУчетаЗатрат", АналитикаУчетаЗатрат);
	Результат = Запрос.Выполнить();
	
	СтатьяЗатрат          = Неопределено;
	Затрата               = Неопределено;
	ХарактеристикаЗатраты = Неопределено;
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			СтатьяЗатрат          = Выборка.СтатьяЗатрат;
			Затрата               = Выборка.Затрата;
			ХарактеристикаЗатраты = Выборка.ХарактеристикаЗатраты;
		КонецЕсли;
	КонецЕсли;	
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РегистрКорАналитикаУчетаЗатрат.СтатьяЗатрат, Неопределено) КАК СтатьяЗатрат,
	|	ЕСТЬNULL(РегистрКорАналитикаУчетаЗатрат.ХарактеристикаЗатраты, Неопределено) КАК ХарактеристикаЗатраты,
	|	ЕСТЬNULL(РегистрКорАналитикаУчетаЗатрат.Затрата, Неопределено) КАК Затрата
	|	ИЗ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрКорАналитикаУчетаЗатрат
	|		ГДЕ РегистрКорАналитикаУчетаЗатрат.Ссылка = &КорАналитикаУчетаЗатрат
	|";
	
	Запрос.УстановитьПараметр("КорАналитикаУчетаЗатрат", КорАналитикаУчетаЗатрат);
	Результат = Запрос.Выполнить();
	
	КорСтатьяЗатрат          = Неопределено;
	КорЗатрата               = Неопределено;
	КорХарактеристикаЗатраты = Неопределено;
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			КорСтатьяЗатрат          = Выборка.СтатьяЗатрат;
			КорЗатрата               = Выборка.Затрата;
			КорХарактеристикаЗатраты = Выборка.ХарактеристикаЗатраты;
		КонецЕсли;
	КонецЕсли;	
	
	// получим необходимые значения из аналитик
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РегистрАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа, Неопределено) КАК НоменклатурнаяГруппа,
	|	ЕСТЬNULL(РегистрАналитикаРаспределенияЗатрат.Продукция, Неопределено) КАК Продукция
	|	ИЗ РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
	|		ГДЕ РегистрАналитикаРаспределенияЗатрат.Ссылка = &АналитикаРаспределенияЗатрат
	|";
	
	Запрос.УстановитьПараметр("АналитикаРаспределенияЗатрат", АналитикаРаспределенияЗатрат);
	Результат = Запрос.Выполнить();
	НоменклатурнаяГруппа = Неопределено;
	Продукция = Неопределено;
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
			Продукция            = Выборка.Продукция;
		КонецЕсли;
	КонецЕсли;	
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РегистрКорАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа, Неопределено) КАК НоменклатурнаяГруппа,
	|	ЕСТЬNULL(РегистрКорАналитикаРаспределенияЗатрат.Продукция, Неопределено) КАК Продукция
	|	ИЗ РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрКорАналитикаРаспределенияЗатрат
	|		ГДЕ РегистрКорАналитикаРаспределенияЗатрат.Ссылка = &КорАналитикаРаспределенияЗатрат
	|";
	
	Запрос.УстановитьПараметр("КорАналитикаРаспределенияЗатрат", КорАналитикаРаспределенияЗатрат);
	Результат = Запрос.Выполнить();
	КорНоменклатурнаяГруппа = Неопределено;
	КорПродукция = Неопределено;
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			КорНоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
			КорПродукция            = Выборка.Продукция;
		КонецЕсли;
	КонецЕсли;	
	
	Если РазделУчета = Перечисления.РазделыУчета.Выпуск Тогда 
		СтатьяЗатрат          = КорСтатьяЗатрат;
		Затрата               = КорЗатрата;
		ХарактеристикаЗатраты = КорХарактеристикаЗатраты;
	КонецЕсли; 
	
	
	Если КорректировкаНДСКредит <> 0 Тогда
	
		// Формирование движений по регистру Корректировки*НалоговыйУчет 
		
		Если РазделУчета = Перечисления.РазделыУчета.МПЗ Тогда
			ИмяРегистраКорректировки = "КорректировкиПартииТоваровНалоговыйУчет";
			СодержаниеПроводки = "запасов";
		ИначеЕсли РазделУчета = Перечисления.РазделыУчета.Затраты ИЛИ РазделУчета = Перечисления.РазделыУчета.Выпуск ИЛИ РазделУчета = Перечисления.РазделыУчета.ЗатратыНаВыпуск Тогда
			// в зависимости от характера затрат
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетУчета, СтатьяЗатрат);
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				ИмяРегистраКорректировки = "КорректировкиНезавершенноеПроизводствоНалоговыйУчет";
				СодержаниеПроводки = "НЗП";
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда	
				ИмяРегистраКорректировки = "КорректировкиБракВПроизводствеНалоговыйУчет";
				СодержаниеПроводки = "затрат на брак";
			Иначе
				ИмяРегистраКорректировки = "КорректировкиЗатратыНалоговыйУчет";
				СодержаниеПроводки = "затрат";
			КонецЕсли; 
		КонецЕсли; 
		
		Если КорРазделУчета = Перечисления.РазделыУчета.МПЗ Тогда
			КорИмяРегистраКорректировки = "КорректировкиПартииТоваровНалоговыйУчет";
			СодержаниеПроводки = "запасов";
		ИначеЕсли КорРазделУчета = Перечисления.РазделыУчета.Затраты ИЛИ КорРазделУчета = Перечисления.РазделыУчета.Выпуск ИЛИ КорРазделУчета = Перечисления.РазделыУчета.ЗатратыНаВыпуск Тогда
			// в зависимости от характера затрат
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(КорСчетУчета, КорСтатьяЗатрат);
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				КорИмяРегистраКорректировки = "КорректировкиНезавершенноеПроизводствоНалоговыйУчет";
				СодержаниеПроводки = "НЗП";
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда	
				КорИмяРегистраКорректировки = "КорректировкиБракВПроизводствеНалоговыйУчет";
				СодержаниеПроводки = "затрат на брак";
			Иначе
				КорИмяРегистраКорректировки = "КорректировкиЗатратыНалоговыйУчет";
				СодержаниеПроводки = "затрат";
			КонецЕсли; 
		КонецЕсли; 
		
		
		НаборЗаписейКорректировкиНалоговыйУчет = РегистрыНакопления[ИмяРегистраКорректировки].СоздатьНаборЗаписей();
		НаборЗаписейКорректировкиНалоговыйУчет.Отбор.Регистратор.Установить(СтруктураПараметров.Ссылка);
		
		НоваяСтрока = НаборЗаписейКорректировкиНалоговыйУчет.Добавить();
		
		НоваяСтрока.Активность  = Истина;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Период      = Период;
		
		НоваяСтрока.Организация = Организация;
		
		НоваяСтрока.НалоговоеНазначение       		 = НалоговоеНазначение;		
		НоваяСтрока.НалоговоеНазначениеПоФакту       = НалоговоеНазначениеПоФакту;
		
		Если ИмяРегистраКорректировки = "КорректировкиПартииТоваровНалоговыйУчет" И НалоговоеНазначениеПоФакту = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
		    НоваяСтрока.НалоговоеНазначениеПоФакту = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
		Иначе
			НоваяСтрока.НалоговоеНазначениеПоФакту = НалоговоеНазначениеПоФакту;	
		КонецЕсли; 
		
		НоваяСтрока.НДСКредит                       = НДСКредит;
		НоваяСтрока.НДСКредитПоФакту                = НДСКредит + КорректировкаНДСКредит;
					
		НоваяСтрока.КодОперации = Перечисления.КодыОперацийКорректировкиИспользованияНалоговыйУчет.ПредполагаемаяКорректрировка;
		
		Если ИмяРегистраКорректировки = "КорректировкиНезавершенноеПроизводствоНалоговыйУчет" Тогда
			НоваяСтрока.СтатьяЗатрат = СтатьяЗатрат;
			Если НЕ ЗначениеЗаполнено(Затрата) Тогда
				Затрата = Неопределено; 
			КонецЕсли;
			НоваяСтрока.Затрата = Затрата;
		ИначеЕсли ИмяРегистраКорректировки = "КорректировкиБракВПроизводствеНалоговыйУчет" ИЛИ ИмяРегистраКорректировки = "КорректировкиЗатратыНалоговыйУчет" Тогда
			НоваяСтрока.СтатьяЗатрат = СтатьяЗатрат;
		ИначеЕсли ИмяРегистраКорректировки = "КорректировкиПартииТоваровНалоговыйУчет" Тогда
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.Номенклатура = Затрата;
			НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаЗатраты;
		КонецЕсли; 
		
		// Запишем набор
		НаборЗаписейКорректировкиНалоговыйУчет.Записать(Ложь);
		
	КонецЕсли; 	
	
	// отcторнируем стоимость БУ и НУ на сумму корректировки НДС по проводкам БУ
	// сторнируем только когда восстанавливаем НДС
	Если СтруктураКорректировкаНДСКредит.ВосстановлениеНДС Тогда
		
		// Формирование проводок БУ по корректировке налогового кредита
		РегистрБухгалтерииХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		РегистрБухгалтерииХозрасчетный.Отбор.Регистратор.Установить(СтруктураПараметров.Ссылка);

		НоваяПроводка = РегистрБухгалтерииХозрасчетный.Добавить();
		НоваяПроводка.Организация = Организация;
		НоваяПроводка.Активность = Истина;
		НоваяПроводка.Период = Период;
		НоваяПроводка.Содержание  = "Корректировка налогового кредита по использованию " + СодержаниеПроводки;
		
		// проводка вида Кт Кор. счет запасов Кт 6443 Сторно
		
		НоваяПроводка.СчетДт = КорСчетУчета;
		
		НоваяПроводка.Сумма         = СуммаКорректировкиСтоимость;
		НоваяПроводка.СуммаНУДт     = СуммаКорректировкиСтоимостьНУ;
			
		НоваяПроводка.НалоговоеНазначениеДт  = НалоговоеНазначениеПоФакту;
		
		
		Если КорИмяРегистраКорректировки = "КорректировкиНезавершенноеПроизводствоНалоговыйУчет" 
			 ИЛИ КорИмяРегистраКорректировки = "КорректировкиБракВПроизводствеНалоговыйУчет" 
			 ИЛИ КорИмяРегистраКорректировки = "КорректировкиЗатратыНалоговыйУчет" 
				Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения"       , КорПодразделение);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", КорНоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         КорСтатьяЗатрат);
		ИначеЕсли КорИмяРегистраКорректировки = "КорректировкиПартииТоваровНалоговыйУчет" Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура" , КорЗатрата);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады"       , КорСклад);
		ИначеЕсли КорИмяРегистраКорректировки = "КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет" Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "ОбъектыСтроительства" , КорОбъектСтроительства);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         КорСтатьяЗатрат);
		КонецЕсли;	
		// со счета корректировок
		НоваяПроводка.СчетКт = ПланыСчетов.Хозрасчетный.КорректировкиНалоговогоКредита;
		РегистрБухгалтерииХозрасчетный.Записать(Ложь);
		
	КонецЕсли;
	
	// отcторнируем стоимость БУ и НУ, а также НДСКредит на сумму корректировки НДС по кор. регистрам
	Если КорректировкаНДСКредит <> 0 ИЛИ СуммаКорректировкиСтоимость <> 0 ИЛИ СуммаКорректировкиСтоимостьНУ <> 0 Тогда
		
		БылиКорректировкиНУ = Истина;
		
		Если КорИмяРегистраКорректировки  <> "КорректировкиСтроительствоОбъектовОсновныхСредствНалоговыйУчет" Тогда
			// Формирование приходных движений по регистру УчетЗатратРегл по кор. аналитике учета на сумму корректировок
			
			НоваяСтрока = НаборЗаписейУчетЗатратРегл.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.Регистратор = СтруктураПараметров.Ссылка;
			
			НоваяСтрока.АналитикаВидаУчета           = КорАналитикаВидаУчета;
			НоваяСтрока.АналитикаУчетаЗатрат         = КорАналитикаУчетаЗатрат;
			НоваяСтрока.АналитикаУчетаПартий         = КорАналитикаУчетаПартий;
			НоваяСтрока.АналитикаРаспределенияЗатрат = КорАналитикаРаспределенияЗатрат;
			
			НоваяСтрока.Стоимость   = СуммаКорректировкиСтоимость;
			НоваяСтрока.СтоимостьНУ = СуммаКорректировкиСтоимостьНУ;
			НоваяСтрока.НДСВходящий = 0;
			НоваяСтрока.НДСКредит   = + КорректировкаНДСКредит;
			
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрока.КодОперации = Перечисления.КодыОперацийПартииТоваров.КорректировкиНУ;
			
		Иначе
			// Формирование приходных движений по регистру СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет по кор. аналитике учета на сумму корректировок
			
			НаборЗаписейСтроительствоОбъектовОсновныхСредствБухгалтерскийУчет = РегистрыНакопления.СтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.СоздатьНаборЗаписей();
			НаборЗаписейСтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.Отбор.Регистратор.Установить(СтруктураПараметров.Ссылка);
			НаборЗаписейСтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.Прочитать();
			
			НоваяСтрока = НаборЗаписейСтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.Регистратор = СтруктураПараметров.Ссылка;
			
			НоваяСтрока.Организация         = Организация;
			НоваяСтрока.СчетУчета           = КорСчетУчета;
			НоваяСтрока.НалоговоеНазначение = НалоговоеНазначениеПоФакту;
			НоваяСтрока.ОбъектСтроительства = КорОбъектСтроительства;
			
			НоваяСтрока.Стоимость   = СуммаКорректировкиСтоимость;
			НоваяСтрока.СтоимостьНУ = СуммаКорректировкиСтоимостьНУ;
			НоваяСтрока.НДСВходящий = 0;
			НоваяСтрока.НДСКредит   = + КорректировкаНДСКредит;
			
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			НаборЗаписейСтроительствоОбъектовОсновныхСредствБухгалтерскийУчет.Записать();
			
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат БылиКорректировкиНУ;

КонецФункции // СформироватьДвиженияПоКорректировкамИспользованияНУ

Функция СформироватьДвиженияПоПередачеМатериаловВЭксплуатацию(
	СтруктураПараметров,
	Период,
	АналитикаВидаУчета,
	АналитикаУчетаЗатрат,
	АналитикаУчетаПартий,
	АналитикаРаспределенияЗатрат,
	КорАналитикаВидаУчета,
	КорАналитикаУчетаЗатрат,						
	КорАналитикаУчетаПартий,
	КорАналитикаРаспределенияЗатрат,
	ВидОтраженияВУчете,
	НаборЗаписейУчетЗатрат,
	Количество,
	КоличествоНУ,
	Сумма,
	СуммаНУ,
	НДСВходящий,
	НДСКредит
	) Экспорт
	
	
	Если Сумма = 0 И СуммаНУ = 0 И НДСВходящий = 0 И НДСКредит = 0 Тогда
		Возврат Ложь;			                   
	КонецЕсли; 
	
	БылиКорректировки = Ложь;
	
	СтруктураАналитики = Новый Структура("РазделУчета, Организация, ПодразделениеОрганизации, Подразделение, СчетУчета, СчетУчетаНУ, Проект, Склад, НалоговоеНазначение");
	
	// получим необходимые значения из аналитик
	СтрокаАналитика = ПолучитьАналитикуПоКлючуАналитики("АналитикаВидаУчета", АналитикаВидаУчета, Неопределено);
	
	Если СтрокаАналитика = Неопределено ИЛИ СтрокаАналитика.РазделУчета <> Перечисления.РазделыУчета.МПЗ Тогда 
		Возврат Ложь;	                   
	КонецЕсли; 
	
	// получим необходимые значения из кор. аналитики
	СтрокаКорАналитика = ПолучитьАналитикуПоКлючуАналитики("АналитикаВидаУчета", КорАналитикаВидаУчета, Неопределено);
	Если СтрокаКорАналитика = Неопределено ИЛИ СтрокаКорАналитика.РазделУчета <> Перечисления.РазделыУчета.ПогашеннаяСтоимость Тогда 
		Возврат Ложь;	                   
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(СтруктураАналитики, СтрокаКорАналитика);
	
	// заменяем раздел учета "Погашенная стоимость" на "Материалы в эксплуатации"
	СтруктураАналитики.РазделУчета = Перечисления.РазделыУчета.МатериалыВЭксплуатации;
	СтруктураАналитики.Склад  = Неопределено;
	
	// для МБП также очищаем и счет, при списании малоценки МБП счета нет
	СтрокаКорАналитикаУчетаПартий = ПолучитьАналитикуПоКлючуАналитики("АналитикаУчетаПартий", КорАналитикаУчетаПартий, Неопределено);
	Если СтрокаКорАналитикаУчетаПартий <> Неопределено И СтрокаКорАналитикаУчетаПартий.СхемаНазначенияИспользования.ВидМатериала = Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет Тогда 
		СтруктураАналитики.СчетУчета  = Неопределено;
	КонецЕсли; 
	
	КорАналитикаВидаУчетаНовая = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураПараметров,
		СтруктураАналитики,
		Перечисления.КлючиАналитики.АналитикаВидаУчета,
		ВидОтраженияВУчете
	);
	
	// Формирование приходных движений по регистру УчетЗатрат* по кор. аналитике учета 
	НоваяСтрока = НаборЗаписейУчетЗатрат.Добавить();
	НоваяСтрока.Период = Период;
	НоваяСтрока.Регистратор = СтруктураПараметров.Ссылка;
	
	НоваяСтрока.АналитикаВидаУчета           = КорАналитикаВидаУчетаНовая;
	НоваяСтрока.АналитикаУчетаЗатрат         = КорАналитикаУчетаЗатрат;
	НоваяСтрока.АналитикаУчетаПартий         = КорАналитикаУчетаПартий;
	НоваяСтрока.АналитикаРаспределенияЗатрат = КорАналитикаРаспределенияЗатрат;
	
	НоваяСтрока.Стоимость   = Сумма;
	НоваяСтрока.Количество  = Количество;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
		НоваяСтрока.КоличествоНУ  = КоличествоНУ;
		НоваяСтрока.СтоимостьНУ = СуммаНУ;
		НоваяСтрока.НДСВходящий = НДСВходящий;
		НоваяСтрока.НДСКредит   = НДСКредит;
	КонецЕсли; 
	
	
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеПартийВЭксплуатацию;
	
	Возврат Истина;

КонецФункции // СформироватьДвиженияПоПередачеМатериаловВЭксплуатацию

Функция СформироватьДвиженияПоРеглВзаиморасчетамВВалюте(Источник)
	 
	Ссылка = Источник.Ссылка;
	СтруктураШапкиДокумента = Источник.мСтруктураШапкиДокумента;
	
	
	НаборДвиженийКоэффициентыЗачетаАванса = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(Ссылка, РегистрыСведений.КоэффициентыЗачетаАванса, Истина);
	Если НаборДвиженийКоэффициентыЗачетаАванса = Неопределено ИЛИ НаборДвиженийКоэффициентыЗачетаАванса.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	КоэффициентыЗачетаАванса = НаборДвиженийКоэффициентыЗачетаАванса[0];
	
	Если КоэффициентыЗачетаАванса.СуммаСНДСБУ = 0 Тогда
		КоэфБУ = 0;
	Иначе
		КоэфБУ = КоэффициентыЗачетаАванса.СуммоваяРазницаБУ / КоэффициентыЗачетаАванса.СуммаСНДСБУ;
	КонецЕсли; 
	
	Если КоэфБУ <> 0 Тогда
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоПереоценкеТоваров(Ссылка, КоэфБУ, "Бух");
	КонецЕсли; 
	
	Если КоэффициентыЗачетаАванса.СуммаСНДСНУ = 0 Тогда
		КоэфНУ = 0;
	Иначе
		КоэфНУ = КоэффициентыЗачетаАванса.КурсоваяРазницаНУ / КоэффициентыЗачетаАванса.СуммаСНДСНУ;
	КонецЕсли; 
	
	Если КоэфНУ <> 0 Тогда
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоПереоценкеТоваров(Ссылка, КоэфНУ, "Нал");
	КонецЕсли; 
	
	Возврат Истина;
 
 КонецФункции // СформироватьДвиженияПоРеглВзаиморасчетамВВалюте()
  
// Возвращает структуру для формирования ключа аналитики учета затрат. Дополняет исходную структуру полем ХарактерЗатрат
//
Функция ПолучитьСтруктуруДляФормированияКлючаАналитикиУчетаЗатрат(ВидОтраженияВУчете, Колонки, Выборка)
	СтруктураДляФормированияКлючаУчетаАналитикиЗатрат = Новый Структура();
	Для Каждого ТекущаяКолонка Из Колонки Цикл
		СтруктураДляФормированияКлючаУчетаАналитикиЗатрат.Вставить(ТекущаяКолонка.Имя,Выборка[ТекущаяКолонка.Имя]);
	КонецЦикла;	
	Если Колонки.Найти("СтатьяЗатрат") <> Неопределено И Выборка.РазделУчета <> Перечисления.РазделыУчета.Наработка Тогда
		Если (Колонки.Найти("ХарактерЗатрат") = Неопределено)
		  ИЛИ (НЕ ЗначениеЗаполнено(Выборка.ХарактерЗатрат)) Тогда
			Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
				Если ЗначениеЗаполнено(Выборка.СтатьяЗатрат) Тогда
					СтруктураДляФормированияКлючаУчетаАналитикиЗатрат.Вставить("ХарактерЗатрат",Выборка.СтатьяЗатрат.ХарактерЗатрат);
				КонецЕсли;
			Иначе
				Если Колонки.Найти("СчетУчета") <> Неопределено Тогда 
					СтруктураДляФормированияКлючаУчетаАналитикиЗатрат.Вставить("ХарактерЗатрат",УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(Выборка.СчетУчета, Выборка.СтатьяЗатрат));
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	Возврат СтруктураДляФормированияКлючаУчетаАналитикиЗатрат;
КонецФункции	

// Возвращает структуру для формирования ключа аналитики вида учета. Дополняет исходную структуру полем СчетУчетаНУ
//
Функция ПолучитьСтруктуруДляФормированияКлючаАналитикиВидаУчета(ВидОтраженияВУчете, Колонки, Выборка)
		
	СтруктураДляФормированияКлючаАналитикиВидаУчета = Новый Структура();
	Для Каждого ТекущаяКолонка Из Колонки Цикл
		СтруктураДляФормированияКлючаАналитикиВидаУчета.Вставить(ТекущаяКолонка.Имя,Выборка[ТекущаяКолонка.Имя]);
	КонецЦикла;	
	Возврат СтруктураДляФормированияКлючаАналитикиВидаУчета;
КонецФункции

// Процедура ввода остатков по регистрам "Учет затрат" и "Учет затрат (бухгалтерский и налоговый учет)".
// Используется при включении использования расширенной аналитики учета из обработки настройки параметров учета (начиная с версии 1.2.10).
//
// Параметры:
//	Запрос - Запрос - Запрос по остаткам
//	ДатаДокумента - Дата - Дата документа ввода остатков
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//
Процедура СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета(СтруктураШапкиДокумента, ТаблицаОбъединенная, ДатаДокумента, ВидДвижения) Экспорт

    ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете;

	ИмяРегистра = "УчетЗатратРегл";
	ПредставлениеРегистра = "Учет затрат (бухгалтерский и налоговый учет)";
	
	ПредставлениеВидаУчета = "бухгалтерский и налоговый учет";
	
	СтруктураКлючиАналитики = Новый Структура();
	
	НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
		
	Для Каждого Выборка Из ТаблицаОбъединенная Цикл
		
		СтруктураДляФормированияКлючаАналитикиВидаУчета = ПолучитьСтруктуруДляФормированияКлючаАналитикиВидаУчета(ВидОтраженияВУчете, ТаблицаОбъединенная.Колонки, Выборка);
		АналитикаВидаУчетаПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
			СтруктураШапкиДокумента,
			СтруктураДляФормированияКлючаАналитикиВидаУчета,
			Перечисления.КлючиАналитики.АналитикаВидаУчета,
			ВидОтраженияВУчете,
			СтруктураКлючиАналитики
		);
		СтруктураДляФормированияКлючаУчетаАналитикиЗатрат = ПолучитьСтруктуруДляФормированияКлючаАналитикиУчетаЗатрат(ВидОтраженияВУчете, ТаблицаОбъединенная.Колонки, Выборка);
		АналитикаУчетаЗатратПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
			СтруктураШапкиДокумента,
			СтруктураДляФормированияКлючаУчетаАналитикиЗатрат,
			Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
			ВидОтраженияВУчете,
			СтруктураКлючиАналитики
		);
		АналитикаУчетаПартийПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
			СтруктураШапкиДокумента,
			Выборка,
			Перечисления.КлючиАналитики.АналитикаУчетаПартий,
			ВидОтраженияВУчете,
			СтруктураКлючиАналитики
		);
		АналитикаРаспределенияЗатратПолучатель = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
			СтруктураШапкиДокумента,
			Выборка,
			Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
			ВидОтраженияВУчете,
			СтруктураКлючиАналитики
		);
		
		СтруктураСумм = Новый Структура("Количество, КоличествоНУ, Стоимость, СтоимостьНУ, НДСВходящий, НДСКредит",0,0,0,0,0,0);
		
		ЗаполнитьЗначенияСвойств(СтруктураСумм,Выборка);
		
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			АналитикаВидаУчетаПолучатель, // АналитикаВидаУчета
			АналитикаУчетаЗатратПолучатель, // АналитикаУчетаЗатрат
			АналитикаУчетаПартийПолучатель, // АналитикаУчетаПартий
			АналитикаРаспределенияЗатратПолучатель, // АналитикаУчетаВыпуска
			Неопределено, // КорАналитикаВидаУчета
			Неопределено, // КорАналитикаУчетаЗатрат
			Неопределено, // КорАналитикаУчетаПартий
			Неопределено, // КорАналитикаУчетаВыпуска
			ВидДвижения,
			Неопределено,
			СтруктураСумм.Количество,
			СтруктураСумм.Стоимость,
			СтруктураСумм.КоличествоНУ,
			СтруктураСумм.СтоимостьНУ,
			СтруктураСумм.НДСВходящий,
			СтруктураСумм.НДСКредит,
			НаборЗаписей
		);
	КонецЦикла;
	
	Если НаборЗаписей.Модифицированность() Тогда
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
		
КонецПроцедуры // СформироватьДвиженияПоРегиструУчетЗатратПоРазделуУчета()	


