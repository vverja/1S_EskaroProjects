// Функция возвращает структуру значений по умолчанию для передаваемого пользователя и массива настроек.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - текущий пользователь программы
//  МассивНастроек - Массив - признаки, для которых возвращаются значения по умолчанию
//
// Возвращаемое значение:
//  Структура - структура значений по умолчанию.
//
Функция ПолучитьСтруктуруЗначенийПоУмолчанию(Пользователь, МассивНастроек) Экспорт
	
	СтруктураЗначений = Новый Структура;
	
	Если Пользователь = глЗначениеПеременной("глТекущийПользователь") Тогда	
		
		КэшНастроекПользователей = глЗначениеПеременной("ЗначенияНастроекПользователей");
		
		Для Каждого Настройка Из МассивНастроек Цикл
			
			НастройкаСсылка = ПланыВидовХарактеристик.НастройкиПользователей[Настройка];
			ЗначениеНастройки = КэшНастроекПользователей[НастройкаСсылка];
			
			Если ЗначениеНастройки = Неопределено Тогда
				
				ЗначениеНастройки = ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка);
				КэшНастроекПользователей[НастройкаСсылка] = ЗначениеНастройки;
								
			КонецЕсли;
			
			СтруктураЗначений.Вставить(Настройка, ЗначениеНастройки);
			
		КонецЦикла;
		
		#Если НЕ Клиент И НЕ ВнешнееСоединение Тогда
			// На сервере cохраним значение в КЭШе
			// В других случаях значение получено "по ссылке", сохранять не требуется
			глЗначениеПеременнойУстановить("ЗначенияНастроекПользователей", КэшНастроекПользователей);
		#КонецЕсли
		
	Иначе
		
		Для Каждого Настройка Из МассивНастроек Цикл
			
			ЗначениеНастройки = ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка);
			СтруктураЗначений.Вставить(Настройка, ЗначениеНастройки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураЗначений;
	
КонецФункции // ПолучитьСтруктуруЗначенийПоУмолчанию()

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Пользователь, Настройка) Экспорт

	Если Пользователь = глЗначениеПеременной("глТекущийПользователь") Тогда		
		НастройкаСсылка = ПланыВидовХарактеристик.НастройкиПользователей[Настройка];		
		КэшНастроекПользователей = глЗначениеПеременной("ЗначенияНастроекПользователей");
		ЗначениеНастройки = КэшНастроекПользователей[НастройкаСсылка];
		Если ЗначениеНастройки = Неопределено Тогда
			ЗначениеНастройки = ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка);
			КэшНастроекПользователей[НастройкаСсылка] = ЗначениеНастройки;
			#Если НЕ Клиент И НЕ ВнешнееСоединение Тогда
				// На сервере cохраним значение в КЭШе
				// В других случаях значение получено "по ссылке", сохранять не требуется
				глЗначениеПеременнойУстановить("ЗначенияНастроекПользователей", КэшНастроекПользователей, Истина);
			#КонецЕсли
		КонецЕсли;	
		Возврат ЗначениеНастройки;		
	КонецЕсли;
	
	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка);

КонецФункции // ПолучитьЗначениеПоУмолчанию()

// Функция возвращает значение по умолчанию и значения реквизитов данного значения для передаваемого пользователя, настройки и списка реквизитов.
//
// Параметры:
//  Пользователь - пользователь или шаблон настроек
//  Настройка    - имя настройки или ссылка, для которой возвращается значение по умолчанию
//	СписокПолей  - список значений, содержащий имена реквизитов значения настройки, которые необходимо получить
//
// Возвращаемое значение:
//  Элемент выборки запроса либо структура (в случае пустой выборки).
//
Функция ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка, СписокПолей = Неопределено) Экспорт
	
	Если ТипЗнч(Настройка) = Тип("Строка") Тогда
		НастройкаСсылка = ПланыВидовХарактеристик.НастройкиПользователей[Настройка];
	Иначе
		НастройкаСсылка = Настройка;
	КонецЕсли; 
	
	//В управляемом режиме для обычных пользователей документы отражаются во всех учетах (вне зависимости от настроек пользователя)
	Если НастройкаСсылка = ПланыВидовХарактеристик.НастройкиПользователей.ОтражатьДокументыВУправленческомУчете
	  ИЛИ НастройкаСсылка = ПланыВидовХарактеристик.НастройкиПользователей.ОтражатьДокументыВБухгалтерскомУчете
	  ИЛИ НастройкаСсылка = ПланыВидовХарактеристик.НастройкиПользователей.ОтражатьДокументыВНалоговомУчете Тогда
		Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение
	  	  И ((НЕ РольДоступна("ОтражениеВРегламентированномУчете"))
		    ИЛИ (НЕ РольДоступна("ПолныеПрава"))) Тогда
    		Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	НастройкаТипЗнч = НастройкаСсылка.ТипЗначения;
	НастройкаТипЗнчСправочник = Справочники.ТипВсеСсылки().СодержитТип(НастройкаТипЗнч.Типы()[0]);
	Если НастройкаТипЗнчСправочник Тогда
		МетаданныеТипаНастройки = Метаданные.НайтиПоТипу(НастройкаТипЗнч.Типы()[0]);
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка"   , НастройкаСсылка);	
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначениеНастроекПользователя.Значение КАК Значение";
	
	Если СписокПолей <> Неопределено И НастройкаТипЗнчСправочник Тогда
		
		СправочникИмя = МетаданныеТипаНастройки.Имя;
		
		Для каждого Элемент из СписокПолей цикл
			
			ИмяРеквизита = Элемент.Значение;
			Представление = Элемент.Представление;
			Если ПустаяСтрока(Представление) Тогда
				Представление = ИмяРеквизита;
			КонецЕсли;
				
			Запрос.Текст = Запрос.Текст + ",
			|ВЫРАЗИТЬ(ЗначениеНастроекПользователя.Значение КАК Справочник." + СправочникИмя + ")." + ИмяРеквизита + "  КАК " + Представление;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "		
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК ЗначениеНастроекПользователя
	|		ПО (ЗначениеНастроекПользователя.Настройка = &Настройка)
	|			И (ЗначениеНастроекПользователя.Пользователь = &Пользователь)
	|
	|ГДЕ
	|	Пользователи.Ссылка = &Пользователь";
		
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если СписокПолей = Неопределено Тогда
		ПустоеЗначение = НастройкаТипЗнч.ПривестиЗначение();
	Иначе
		ПустоеЗначение = новый Структура("Значение", НастройкаТипЗнч.ПривестиЗначение());
		Для каждого ЭлементСписка из СписокПолей цикл
			ПустоеЗначение.Вставить(?(ПустаяСтрока(ЭлементСписка.Представление), ЭлементСписка.Значение, ЭлементСписка.Представление));
		КонецЦикла;				
	КонецЕсли;
	
	Если Выборка.Количество() = 0 Тогда
		Если Настройка = "ОткрыватьПриЗапускеСписокТекущихЗадачПользователя" Тогда
			Возврат Ложь;
			
		ИначеЕсли Настройка = "КодировкаПисьмаЭлектроннойПочтыПоУмолчанию" Тогда
			Возврат "utf-8";
			
		ИначеЕсли Настройка = "ЗапрашиватьПодтверждениеПриЗакрытии" Тогда
			Возврат Ложь;
		ИначеЕсли Настройка = "ВыводитьСообщенияВПанельКомментариев" Тогда
			Возврат истина;
		КонецЕсли;
		
		Возврат ПустоеЗначение;
		
	ИначеЕсли Выборка.Следующий() Тогда
	
		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Если Настройка = "ОткрыватьПриЗапускеСписокТекущихЗадачПользователя" Тогда
				Возврат Ложь;
				
			ИначеЕсли Настройка = "КодировкаПисьмаЭлектроннойПочтыПоУмолчанию" Тогда
				Возврат "utf-8";
				
			ИначеЕсли Настройка = "ЗапрашиватьПодтверждениеПриЗакрытии" Тогда
				Возврат Ложь;
			ИначеЕсли Настройка = "ВыводитьСообщенияВПанельКомментариев" Тогда
				Возврат истина;
			КонецЕсли;
			
			Возврат ПустоеЗначение;
		КонецЕсли;		
		
		Если НастройкаТипЗнчСправочник И ПараметрыДоступа("Чтение", МетаданныеТипаНастройки, "Ссылка").ОграничениеУсловием Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 1 ИЗ Справочник." + МетаданныеТипаНастройки.Имя + " ГДЕ Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", Выборка.Значение);
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				Возврат ПустоеЗначение;
			КонецЕсли;
		КонецЕсли;		
		
		Если СписокПолей = Неопределено Тогда
			Возврат Выборка.Значение;
		Иначе
			ЗаполнитьЗначенияСвойств(ПустоеЗначение, Выборка);
			Возврат ПустоеЗначение;
		КонецЕсли;	
		
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;	
	
КонецФункции // ПолучитьЗначениеПоУмолчаниюПользователя()

Функция ПользовательОпределен() Экспорт
	
	ОписаниеОшибкиОпределенияПользователя = "";
	
	Если Не ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
		ОписаниеОшибкиОпределенияПользователя = "Пользователь не был найден в справочнике пользователей.
			|Вход в программу возможен только при наличии пользователя в справочнике 
			|или при наличии роли ""Полные права""";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеОшибкиОпределенияПользователя) Тогда
		#Если Клиент Тогда
			Предупреждение(ОписаниеОшибкиОпределенияПользователя);
			Возврат Ложь;
		#Иначе
			ВызватьИсключение ОписаниеОшибкиОпределенияПользователя;
		#КонецЕсли
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПОЛЬЗОВАТЕЛЯМИ ИБ

// Функция по имени ищет пользователя ИБ
//
// Параметры:
//	ИмяПользователя - строка по которой ищется пользователь ИБ
//	
//
Функция НайтиПользователяИБ(ИмяПользователя) Экспорт
	
	Если ИмяПользователя = "НеАвторизован" Тогда
		ПользовательИБ = Неопределено
	Иначе
		// ищем пользователя ИБ по имени
		Попытка
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
		Исключение
			ПользовательИБ = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ПользовательИБ;
	
КонецФункции

// Процедура заполняет роли пользователя ИБ
// 
// Параметры:
//			ПользовательИБ	- <ПользовательИнформационнойБазы>
//			СоставРолей		- <Массив> или Неопределено, содержит названия ролей
//								Если передано Неопределено, то пользователю будет назначена только роль Пользователь
//
Процедура ЗаполнитьРолиПользователяИБ(ПользовательИБ, СоставРолей)

	ПользовательИБ.Роли.Очистить();	
	
	Если СоставРолей <> Неопределено Тогда
		Для каждого ИмяРоли Из СоставРолей Цикл
			РольКонфигурации = Метаданные.Роли.Найти(ИмяРоли);
			Если РольКонфигурации = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПользовательИБ.Роли.Добавить(РольКонфигурации);
		КонецЦикла; 
	КонецЕсли; 
	
	Если НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.Пользователь)
		И НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
		// Роль "Пользователь" назначается всем
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.Пользователь);
	КонецЕсли; 
	
КонецПроцедуры //

// Процедура изменяет данные пользователя ИБ
// Вызывается при записи профиля или при записи пользователя
// У пользователя должно быть право для администрирования пользователей
//
// Параметры:
//  ИмяПользователя	- Строка, Имя пользователя ИБ
//	СтруктураДанных - Структура, может содержать
//						- Имя - Строка
//						- ПолноеИмя - Строка
//						- ПользовательОС - Строка
//						- Пароль - Строка
//						- ЗапрещеноИзменятьПароль - Булево
//						- АутентификацияСтандартная - Булево
//						- ПоказыватьВСпискеВыбора - Булево
//						- АутентификацияОС - Булево
//  					- ОсновнойИнтерфейс - Строка
//  					- Язык - Строка
//  					- СоставРолей - Массив, список ролей (названия)
//
Процедура ИзменитьДанныеПользователяИБ(ИмяПользователя, СтруктураДанных, СоздатьЕслиОтсутствует = Ложь) Экспорт
	
	ЕстьПравоАдминистрированияПользователей = УправлениеДопПравамиПользователей.ЕстьПравоАдминистрированияПользователей();
	
	Если НЕ ЕстьПравоАдминистрированияПользователей Тогда 
		ВызватьИсключение "Недостаточно прав для изменения ролей пользователя!";
	КонецЕсли; 
	
	ПользовательИБ = УправлениеПользователями.НайтиПользователяИБ(СокрЛП(ИмяПользователя));
		
	Если ПользовательИБ = Неопределено Тогда
		Если СоздатьЕслиОтсутствует  Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		Иначе
			Возврат
		КонецЕсли; 
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Имя") Тогда
		ПользовательИБ.Имя = СтруктураДанных.Имя;
	КонецЕсли;
	Если СтруктураДанных.Свойство("ПолноеИмя") Тогда
		ПользовательИБ.ПолноеИмя = СтруктураДанных.ПолноеИмя;
	КонецЕсли;
	Если СтруктураДанных.Свойство("ПользовательОС") Тогда
		ПользовательИБ.ПользовательОС = СтруктураДанных.ПользовательОС;
	КонецЕсли;
	Если СтруктураДанных.Свойство("Пароль") Тогда
		ПользовательИБ.Пароль = СтруктураДанных.Пароль;
	КонецЕсли;
	Если СтруктураДанных.Свойство("ЗапрещеноИзменятьПароль") Тогда
		ПользовательИБ.ЗапрещеноИзменятьПароль = СтруктураДанных.ЗапрещеноИзменятьПароль;
	КонецЕсли;
	Если СтруктураДанных.Свойство("АутентификацияСтандартная") Тогда
		ПользовательИБ.АутентификацияСтандартная = СтруктураДанных.АутентификацияСтандартная;
	КонецЕсли;
	Если СтруктураДанных.Свойство("ПоказыватьВСпискеВыбора") Тогда
		ПользовательИБ.ПоказыватьВСпискеВыбора = СтруктураДанных.ПоказыватьВСпискеВыбора;
	КонецЕсли;
	Если СтруктураДанных.Свойство("АутентификацияОС") Тогда
		ПользовательИБ.АутентификацияОС = СтруктураДанных.АутентификацияОС;
	КонецЕсли;
	Если СтруктураДанных.Свойство("РежимЗапуска") Тогда
		ПользовательИБ.РежимЗапуска = СтруктураДанных.РежимЗапуска;
	КонецЕсли;
	
	// Изменение состава ролей
	Если СтруктураДанных.Свойство("СоставРолей") Тогда
		ЗаполнитьРолиПользователяИБ(ПользовательИБ, СтруктураДанных.СоставРолей);
	КонецЕсли; 
	
	Если СтруктураДанных.Свойство("ОсновнойИнтерфейс") Тогда
		ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(СтруктураДанных.ОсновнойИнтерфейс);
		Если ОсновнойИнтерфейс <> Неопределено Тогда
			ПользовательИБ.ОсновнойИнтерфейс = ОсновнойИнтерфейс;
		КонецЕсли;
	КонецЕсли; 
	
	Если СтруктураДанных.Свойство("Язык") Тогда
		Язык = Метаданные.Языки.Найти(СтруктураДанных.Язык);
		Если Язык <> Неопределено Тогда
			ПользовательИБ.Язык = Язык;
		КонецЕсли;
	КонецЕсли; 
	
	ПользовательИБ.Записать();
	
КонецПроцедуры // ИзменитьДанныеПользователяИБ

#Если Клиент Тогда

// Процедура открывает форму групповой обработки объектов
//
// Параметры:
//		ЗначенияСвойств	- <Структура>, содержит имя свойства (реквизит пользователя) и его значение
//
//
Процедура ОткрытьГрупповуюОбработкуПользователей(ЗначенияСвойств = Неопределено) Экспорт

	ГрупповаяОбработкаОбъектов = Обработки.ГрупповаяОбработкаОбъектов.Создать();
	
	ДоступныеТипы = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	ГрупповаяОбработкаОбъектов.УстановитьДоступныеТипы(ДоступныеТипы);
	
	ГрупповаяОбработкаОбъектов.ВыводитьСообщенияОбОбработанныхОбъектах = Истина;
	
	// Ограничим реквизиты, которые можно изменить
	ГрупповаяОбработкаОбъектов.ОграничитьДоступныеСвойства = Истина;
	ГрупповаяОбработкаОбъектов.СписокДоступныхСвойств.Добавить("ПрофильПолномочийПользователя");
	ГрупповаяОбработкаОбъектов.СписокДоступныхСвойств.Добавить("КоманднаяПанельПользователя");
	
	ФормаОбработки = ГрупповаяОбработкаОбъектов.ПолучитьФорму();
	
	// Установим заголовок и спрячем страницу настройки
	ФормаОбработки.Заголовок = "Групповая обработка пользователей";
	ФормаОбработки.ЭлементыФормы.ОсновнаяПанель.Страницы.Настройка.Видимость = Ложь;
	ФормаОбработки.Открыть();
	
	Если ЗначенияСвойств <> Неопределено Тогда
		ГрупповаяОбработкаОбъектов.УстановитьЗначенияСвойств(ЗначенияСвойств);
	КонецЕсли;	
	
КонецПроцедуры //

// Процедура проверяет активность пользователей в ИБ
// и выводит сообщение, если есть активные пользователи
//
Процедура ИнформироватьОбИзмененииНастроекАктивныхПользователей(ТаблицаПользователей, ТекстСообщенияОбИзменениях)

	МассивПользователей = Новый Массив;
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	НомерТекущегоСоединения = НомерСоединенияИнформационнойБазы();
	
	Для каждого Соединение ИЗ МассивСоединений Цикл					
		Если Соединение <> Неопределено 
			И Соединение.ИмяПриложения <> "Designer" 
			И Соединение.НомерСоединения <> НомерТекущегоСоединения
			И Соединение.Пользователь <> Неопределено
			И ТаблицаПользователей.Найти(Соединение.Пользователь.Имя, "Код") <> Неопределено Тогда
			
			МассивПользователей.Добавить(Соединение.Пользователь.Имя);
		КонецЕсли;		
	КонецЦикла;			
	
	Если МассивПользователей.Количество() > 0 Тогда
		Сообщить("Были изменены " + ТекстСообщенияОбИзменениях + " пользователей, которые в данный момент работают с ИБ");
		СписокПользователей = "";
		Для Каждого Пользователь ИЗ МассивПользователей Цикл
			СписокПользователей = СписокПользователей + ?(СписокПользователей = "", "(", " ;") + Пользователь;
		КонецЦикла;
		СписокПользователей = СписокПользователей + ")";
		Сообщить(СписокПользователей);			
		Сообщить("Для них новые значения вступят в силу только после перезапуска их сеанса работы с программой");
	КонецЕсли;
	
КонецПроцедуры // ИнформироватьОбИзмененииНастроекАктивныхПользователей

#КонецЕсли

// Процедура выводит сообщение, если изменены настройки доп прав активных пользователей
//
Процедура ИнформироватьОбИзмененииНастроекДопПрав(НаборЗаписей) Экспорт
	
	#Если Клиент Тогда
		
	ПрофильПолномочий = глЗначениеПеременной("ПрофильПолномочийПользователя");
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	МассивПрофилей = Новый Массив;
	МассивПользователей = Новый Массив;
	
	ТипЗнчПрофильПолномочий = Тип("СправочникСсылка.ПрофилиПолномочийПользователей");
	ТипЗнчГруппаПользователей = Тип("СправочникСсылка.ГруппыПользователей");

	Для Каждого Запись Из НаборЗаписей Цикл
			
		Если ТипЗнч(Запись.Пользователь) = ТипЗнчПрофильПолномочий Тогда
			Если МассивПрофилей.Найти(Запись.Пользователь) = Неопределено Тогда
				МассивПрофилей.Добавить(Запись.Пользователь);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Запись.Пользователь) = ТипЗнчГруппаПользователей Тогда
			Для каждого СтрокаТЧ Из Запись.Пользователь.ПользователиГруппы Цикл
				МассивПользователей.Добавить(СтрокаТЧ.Пользователь);
			КонецЦикла;
		Иначе
			Если МассивПользователей.Найти(Запись.Пользователь) = Неопределено Тогда
				МассивПользователей.Добавить(Запись.Пользователь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивПрофилей.Количество() > 0 ИЛИ МассивПользователей.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Пользователи.Код КАК Код
		               |ИЗ
		               |	Справочник.Пользователи КАК Пользователи
		               |ГДЕ
		               |	Пользователи.Ссылка <> &ТекущийПользователь
		               |	И (Пользователи.ПрофильПолномочийПользователя В (&МассивПрофилей)
		               |			ИЛИ Пользователи.Ссылка В (&МассивПользователей))
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Код";
					   
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		Запрос.УстановитьПараметр("МассивПрофилей", МассивПрофилей);
		Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
		
		ТаблицаПользователей = Запрос.Выполнить().Выгрузить();
		ТаблицаПользователей.Индексы.Добавить("Код");
		
		Для каждого СтрокаПользователя Из ТаблицаПользователей Цикл
			СтрокаПользователя.Код = СокрЛП(СтрокаПользователя.Код);			
		КонецЦикла;		
		
		ТекстСообщенияОбИзменениях = "значения дополнительных прав";
		ИнформироватьОбИзмененииНастроекАктивныхПользователей(ТаблицаПользователей, ТекстСообщенияОбИзменениях);
		
	КонецЕсли;
	
	#КонецЕсли
		
КонецПроцедуры // ИнформироватьОбИзмененииНастроекДопПрав

// Процедура выводит сообщение, если изменены настройки активных пользователей
//
Процедура ИнформироватьОбИзмененииНастроекПользователя(НаборЗаписей) Экспорт
	
	#Если Клиент Тогда
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	МассивПользователей = Новый Массив;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если МассивПользователей.Найти(Запись.Пользователь) = Неопределено Тогда
			МассивПользователей.Добавить(Запись.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
		
	Если МассивПользователей.Количество() > 0 Тогда
		// Для пользователей настройки которых изменились проверим наличие подключения к ИБ
		
		// Сформируем таблицу содержащую имена пользователей ИБ
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Пользователи.Код КАК Код,
		               |	Пользователи.Ссылка
		               |ИЗ
		               |	Справочник.Пользователи КАК Пользователи
		               |ГДЕ
		               |	Пользователи.Ссылка В(&МассивПользователей)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Код";
		Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
		
		ТаблицаПользователей = Новый ТаблицаЗначений;
		ТаблицаПользователей.Колонки.Добавить("Код");
		ТаблицаПользователей.Индексы.Добавить("Код");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл			
			Если Выборка.Ссылка = ТекущийПользователь Тогда
				// Текущего пользователя пропускаем
				Продолжить;
			КонецЕсли;
			СтрокаПользователя = ТаблицаПользователей.Добавить();
			СтрокаПользователя.Код = СокрЛП(Выборка.Код);			
		КонецЦикла;		
		
		ТекстСообщенияОбИзменениях = "значения настроек";
		ИнформироватьОбИзмененииНастроекАктивныхПользователей(ТаблицаПользователей, ТекстСообщенияОбИзменениях);
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры // ИнформироватьОбИзмененииНастроекПользователя

// Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого записывается значение по умолчанию
//  Значение     - значение по умолчанию
//
// Возвращаемое значение:
//  Нет
//
Процедура УстановитьЗначениеПоУмолчанию(Пользователь, Настройка, Значение) Экспорт
	
	СсылкаНастройки = ПланыВидовХарактеристик.НастройкиПользователей[Настройка];
	МенеджерЗаписи = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Настройка = СсылкаНастройки;
	МенеджерЗаписи.Значение = Значение;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры // ПолучитьЗначениеПоУмолчанию()

Функция ПолучитьТаблицуСоответствияРолейГруппам()

	ТаблицаСоответствияРолейГруппам = Новый ТаблицаЗначений;
	ТаблицаСоответствияРолейГруппам.Колонки.Добавить("ИмяРоли");
	ТаблицаСоответствияРолейГруппам.Колонки.Добавить("ИмяГруппы");
	ТаблицаСоответствияРолейГруппам.Колонки.Добавить("Несамостоятельная");
	
	МакетОписаниеРолейКонфигурации = ПолучитьОбщийМакет("ОписаниеРолейКонфигурации");
	ОбластьСписокРолей = МакетОписаниеРолейКонфигурации.ПолучитьОбласть("ОписаниеРолей");
	Для Сч = 1 По ОбластьСписокРолей.ВысотаТаблицы Цикл
		СтрокаТаблицы = ТаблицаСоответствияРолейГруппам.Добавить();
		СтрокаТаблицы.ИмяРоли         = ОбластьСписокРолей.Область(Сч,1,Сч,1).Текст;
		СтрокаТаблицы.ИмяГруппы       = ОбластьСписокРолей.Область(Сч,2,Сч,2).Текст;
		СтрокаТаблицы.Несамостоятельная = ОбластьСписокРолей.Область(Сч,3,Сч,3).Текст;
	КонецЦикла;
	
	Возврат ТаблицаСоответствияРолейГруппам;
	
КонецФункции // 

// Функция возвращает список ролей конфигурации
//
Функция ПолучитьСписокРолейКонфигурации(ПолучитьОписаниеРолей = Ложь) Экспорт

	СписокРолейКонфигурации = Новый ТаблицаЗначений;
	СписокРолейКонфигурации.Колонки.Добавить("ИмяРоли", Новый ОписаниеТипов("Строка"));
	СписокРолейКонфигурации.Колонки.Добавить("ПредставлениеРоли", Новый ОписаниеТипов("Строка"));
	СписокРолейКонфигурации.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0)));
	
	
	Если ПолучитьОписаниеРолей Тогда
		СписокРолейКонфигурации.Колонки.Добавить("ИмяГруппы", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
		СписокРолейКонфигурации.Колонки.Добавить("Несамостоятельная", Новый ОписаниеТипов("Булево"));
		
		ТаблицаСоответствияРолейГруппам = ПолучитьТаблицуСоответствияРолейГруппам();
	КонецЕсли;
	
	Сч = 0;
	Для каждого МетаРоль Из Метаданные.Роли Цикл
		Если МетаРоль.Имя = "Пользователь" Тогда
			Продолжить;
		КонецЕсли; 
		НоваяРоль = СписокРолейКонфигурации.Добавить();
		НоваяРоль.ИмяРоли = МетаРоль.Имя;
		НоваяРоль.Порядок = Сч;
		Если ПустаяСтрока(МетаРоль.Синоним) Тогда
			НоваяРоль.ПредставлениеРоли = НоваяРоль.ИмяРоли;
		Иначе
			НоваяРоль.ПредставлениеРоли = МетаРоль.Синоним;
		КонецЕсли; 
		
		Если ПолучитьОписаниеРолей Тогда
			СтрокаТаблицы = ТаблицаСоответствияРолейГруппам.Найти(НоваяРоль.ИмяРоли, "ИмяРоли");
			Если СтрокаТаблицы <> Неопределено Тогда
				ИмяГруппы = СтрокаТаблицы.ИмяГруппы;
				Несамостоятельная = (НЕ ПустаяСтрока(СтрокаТаблицы.Несамостоятельная));
			Иначе
				// Ошибка в описании ролей!
				ИмяГруппы = "Сервисные"; 
				Несамостоятельная = Ложь;
			КонецЕсли; 
			
			НоваяРоль.ИмяГруппы         = ИмяГруппы;
			НоваяРоль.Несамостоятельная = Несамостоятельная;
		КонецЕсли;
		
		Сч = Сч + 1;
	КонецЦикла;	
	
	Возврат СписокРолейКонфигурации;
	
КонецФункции // ПолучитьСписокРолейКонфигурации

// Функция возвращает список групп пользователя
//
Функция ПолучитьСписокГруппПользователя(Пользователь, ПолучитьПредставление = Ложь) Экспорт
	
	СписокГруппПользователя = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	
	Если ПолучитьПредставление Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ГруппыПользователей.Ссылка КАК ГруппаПользователей,
			|	ГруппыПользователей.Представление КАК ГруппаПользователейПредставление
			|ИЗ
			|	Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей КАК ГруппыПользователей
			|		ПО ГруппыПользователейПользователиГруппы.Ссылка = ГруппыПользователей.Ссылка
			|ГДЕ
			|	ГруппыПользователейПользователиГруппы.Пользователь = &Пользователь";
	Иначе		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ГруппыПользователейПользователиГруппы.Ссылка КАК ГруппаПользователей
			|ИЗ
			|	Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
			|ГДЕ
			|	ГруппыПользователейПользователиГруппы.Пользователь = &Пользователь";
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Пользователь", Пользователь); 
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПолучитьПредставление Тогда
			СписокГруппПользователя.Добавить(Выборка.ГруппаПользователей, Выборка.ГруппаПользователейПредставление);
		Иначе
			СписокГруппПользователя.Добавить(Выборка.ГруппаПользователей);
		КонецЕсли; 
	КонецЦикла;
	
	Возврат СписокГруппПользователя;

КонецФункции // ПолучитьСписокГруппПользователя
 
