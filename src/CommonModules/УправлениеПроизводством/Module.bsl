////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ЗАКАЗАМИ

// Функция возвращает флаг использования заказов на производство.
//
Функция УчетЗатратПоЗаказамНаПроизводство(Дата, Организация = Неопределено, Учет = "Упр")
	
	УчетЗатратПоЗаказамНаПроизводство = Ложь;
	Если Учет = "Упр" Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата, Ложь);
		Если ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			УчетЗатратПоЗаказамНаПроизводство = УчетнаяПолитика.УчетЗатратПоЗаказамНаПроизводство;
		КонецЕсли;
	Иначе
		УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
		Если ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
			УчетЗатратПоЗаказамНаПроизводство = УчетнаяПолитикаБух.УчетЗатратПоЗаказамНаПроизводство;
		КонецЕсли;
	КонецЕсли;

	Возврат УчетЗатратПоЗаказамНаПроизводство;
		
КонецФункции // УчетЗатратПоЗаказамНаПроизводство()

// Функция определяет заказ для учета производственных затрат и выпуска продукции.
//
Функция ПолучитьЗаказДляУчетаЗатрат(Заказ, ЗаказНаПроизводство = Неопределено, УчетЗатратПоЗаказамНаПроизводство, ИспользоватьЗаказыНаПроизводство = Неопределено) Экспорт
	
	Если ИспользоватьЗаказыНаПроизводство = Неопределено Тогда
		ИспользоватьЗаказыНаПроизводство = УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство();
	КонецЕсли;
	
	ЗаказДляЗатрат = Неопределено;
	Если ЗначениеЗаполнено(Заказ) 
	   И ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаказДляЗатрат = Заказ;
	ИначеЕсли ЗначениеЗаполнено(Заказ)
	   И ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказНаПроизводство") И УчетЗатратПоЗаказамНаПроизводство Тогда
		ЗаказДляЗатрат = Заказ;
	ИначеЕсли ИспользоватьЗаказыНаПроизводство
		И ЗначениеЗаполнено(ЗаказНаПроизводство) И УчетЗатратПоЗаказамНаПроизводство Тогда
		ЗаказДляЗатрат = ЗаказНаПроизводство;
	КонецЕсли;
	
	Возврат ЗаказДляЗатрат;
	
КонецФункции // ПолучитьЗаказДляУчетаЗатрат()

// Процедура движения по регистру "Заказы на производство".
//
Процедура ДвижениеПоЗаказамНаПроизводство(ДокументОбъект, ТаблицаПоТоварам, ИмяТабличнойЧасти, СтруктураШапкиДокумента, РежимПроведения, Отказ, Заголовок) Экспорт
	
	ТаблицаПоЗаказам = ТаблицаПоТоварам.Скопировать();

	КолвоЭлементов = ТаблицаПоЗаказам.Количество();
	ЕстьКачество   = ТаблицаПоЗаказам.Колонки.Найти("Качество") <> Неопределено;
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
	
   		СтрокаТаблицы = ТаблицаПоЗаказам[КолвоЭлементов - ОбратныйИндекс];
  
		Если ТипЗнч(СтрокаТаблицы.ЗаказНаПроизводство) <> Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			ТаблицаПоЗаказам.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказНаПроизводство) Тогда
			ТаблицаПоЗаказам.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		Если ЕстьКачество И СтрокаТаблицы.Качество <> Справочники.Качество.Новый И НЕ СтрокаТаблицы.Номенклатура.Услуга Тогда
			ТаблицаПоЗаказам.Удалить(СтрокаТаблицы);
		КонецЕсли;

	КонецЦикла;
	
	Если ТаблицаПоЗаказам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений = ДокументОбъект.Движения.ЗаказыНаПроизводство;
	
	// Проверка остатков
	НаборДвижений.КонтрольОстатков(ДокументОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоЗаказам, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Подразделение, "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидВоспроизводства, "ВидВоспроизводства");
	
	НаборДвижений.мПериод          = ДокументОбъект.Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьРасход();
	
	// Чтобы процедура погашение потребностей по производственным заказам могла определить факт
	// закрытия заказа на производство, и в этом случае выполнить полное погашение потребностей по заказу на производство
	НаборДвижений.Записать(Ложь);
	
КонецПроцедуры // ДвижениеПоЗаказамНаПроизводство()

// Процедура управляет видмостью ячеек ЗаказВыпуск, ЗаказРезерв в строке таб.части
//
Процедура ВидимостьЯчеекЗаказы(Элемент, ИспользоватьЗаказы, ИспользоватьНаправленияВыпуска, ИспользоватьНаработку, ДанныеСтроки, ОформлениеСтроки) Экспорт
    //Значение параметра ИспользоватьНаправленияВыпуска пока не используется, оставлен временно на всякий случай
	// Если заказы не используем все колонки должны быть погашены в процедуре установке видимости.
	
	Если ИспользоватьЗаказы Тогда
	
		Если ОформлениеСтроки.Ячейки.Найти("Заказы") <> Неопределено Тогда
			ОформлениеСтроки.Ячейки.Заказы.Видимость      = Ложь;
			ОформлениеСтроки.Ячейки.Заказы.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если ИспользоватьНаработку = Неопределено Тогда
			ФлагВыпуск = Истина;
		ИначеЕсли ОформлениеСтроки.Ячейки.Найти("ВидВыпуска") = Неопределено Тогда
			ФлагВыпуск = Ложь;
		Иначе
			ФлагВыпуск = истина;
		КонецЕсли;
		
		Если Элемент.Имя = "ВозвратныеОтходы" Тогда
			//Возвратные отходы всегда приходуются на склад
			ФлагРезерв = истина;
		Иначе	
			Если ИспользоватьНаработку<>Неопределено Тогда
				ФлагРезерв = НЕ (ИспользоватьНаработку И ДанныеСтроки.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка);
			Иначе
				ФлагРезерв = истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОформлениеСтроки.Ячейки.Найти("ЗаказВыпуска") <> Неопределено Тогда
			ОформлениеСтроки.Ячейки.ЗаказВыпуска.Видимость      =    ФлагВыпуск;
			ОформлениеСтроки.Ячейки.ЗаказВыпуска.ТолькоПросмотр = НЕ ФлагВыпуск;
		КонецЕсли;
		Если ОформлениеСтроки.Ячейки.Найти("ЗаказРезерв") <> Неопределено Тогда
			ОформлениеСтроки.Ячейки.ЗаказРезерв .Видимость      =    ФлагРезерв;
			ОформлениеСтроки.Ячейки.ЗаказРезерв .ТолькоПросмотр = НЕ ФлагРезерв;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВидимостьЯчеекЗаказы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ СО СПЕЦИФИКАЦИЯМИ НОМЕНКЛАТУРЫ

// Процедура устанавлавает спецификацию номенклатуры по умолчанию
//
Процедура УстановитьСпецификациюПоУмолчанию(Номенклатура, Спецификация, ДатаДок, Подразделение = неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Спецификация = Справочники.СпецификацииНоменклатуры.ПустаяСсылка();

	Иначе
		Спецификация = ОпределитьСпецификациюПоУмолчанию(Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ДатаДок, Подразделение);

	КонецЕсли;

КонецПроцедуры // УстановитьСпецификациюПоУмолчанию()

// Функция возвращает признак использования вида спецификации, в зависимости от установки в конфигурации
// признака использования только сборочных спецификаций.
//
Функция ИспользоватьВидСпецификации(ИспользоватьТолькоСборочныеСпецификации) Экспорт
	
	Если ТипЗнч(ИспользоватьТолькоСборочныеСпецификации) = Тип("Булево") Тогда
		Возврат Не ИспользоватьТолькоСборочныеСпецификации;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ИспользоватьВидСпецификации()

// Делает спецификацию основной для выходных изделий
//
// Параметры:
//	Спецификация	- <СправочникСсылка.СпецификацииНоменклатуры>, спецификация, которую требуется сделать основной
//	ДатаЗаписи		- <Дата>, дата начиная с которой спецификация будет основной
//	Номенклатура	- <СправочникСсылка.Номенклатура>, выходное изделение для которого спецификация будет основной,
//						если не указано, то спецификация будет основной для всех выходных изделий
//
Процедура ЗаписатьОсновнуюСпецификацию(Спецификация, ДатаЗаписи, Номенклатура = Неопределено) Экспорт

	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СпецификацииНоменклатурыВыходныеИзделия.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	СпецификацииНоменклатурыВыходныеИзделия.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК СпецификацииНоменклатурыВыходныеИзделия
	               |ГДЕ
	               |	СпецификацииНоменклатурыВыходныеИзделия.Ссылка = &СпецификацияНоменклатуры";
	
	Если Номенклатура <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
				|	И СпецификацииНоменклатурыВыходныеИзделия.Номенклатура = &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	КонецЕсли;  
			
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СпецификацияНоменклатуры", Спецификация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = РегистрыСведений.ОсновныеСпецификацииНоменклатуры.СоздатьМенеджерЗаписи();
		НоваяЗапись.Период                     = ДатаЗаписи;
		НоваяЗапись.Номенклатура               = Выборка.Номенклатура;
		НоваяЗапись.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяЗапись.СпецификацияНоменклатуры   = Спецификация;
		НоваяЗапись.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры //

////////////////////////////////////////////////////////////////////////////////

// Функция возвращает имя элемента перечисления
// Параметры:
//		ЗначПеречисления - значение перечисления
// Возврат:
//		Имя элемента перечисления в метаданных
//
Функция ПолучитьИмяЭлементаПеречисления(Знач ЭлементПеречисления) Экспорт

	Если НЕ ЗначениеЗаполнено(ЭлементПеречисления) Тогда
		Возврат "";

	Иначе
		МетаОбъект = ЭлементПеречисления.Метаданные();

		Возврат МетаОбъект.ЗначенияПеречисления[Перечисления[МетаОбъект.Имя].Индекс(ЭлементПеречисления)].Имя;

	КонецЕСли;

КонецФункции // ПолучитьИмяЭлементаПеречисления()

// Функция ДокументыВПериоде()
//
// Возвращает массив документов в периоде, соответствующем
// дате переданного документа и того же типа.
// Данную функцию можно использовать, например для проверки
// уникальности документа данного типа в указанном периоде
// Выбираются проведенные и не помеченые на удаление документы.
// Переданный в качестве параметра документ не попадает в выборку.
//
//	Параметры:
//		Док - документ
//  	Периодичность - период интервала. Например
//			Док.Дата = '15.01.2004', периодичность = "Месяц", тогда
//			будут выбиратся документы за январь 2004 года.
//	  		Возможные значения периодичности = "Год", "Квартал", "Месяц", "Неделя", "День"
//	  		По умолчанию - "Месяц"
//  	СтруктРеквизитов - структура в которой в качестве ключа - имя реквизита
//			документа, в качестве значения - значение, которое должен содержать реквизит документа.
//			Будут выбираться документы в которых значение реквизита совпадает с указанным
//		 	значением.
//
//	Возврат:
//		Массив документов.
Функция ДокументыВПериоде(Док, Периодичность = "Месяц", СтруктРеквизитов = Неопределено) Экспорт

	Перем НачДата;
	Перем КонДата;
	Перем Запрос;

	МетаданныеДокумента = Док.Метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("ПериодРегистрации") <> Неопределено Тогда
		ДатаПериода = Док.ПериодРегистрации;
	Иначе
		ДатаПериода = Док.Дата;
	КонецЕсли; 
	
	// определим период в котором будем искать
	Если Периодичность = "Год" Тогда
		НачДата = НачалоГода(ДатаПериода);
		КонДата = КонецГода (ДатаПериода);
	ИначеЕсли Периодичность = "Квартал" Тогда
		НачДата = НачалоКвартала(ДатаПериода);
		КонДата = КонецКвартала (ДатаПериода);
	ИначеЕсли Периодичность = "Месяц"   Тогда
		НачДата = НачалоМесяца(ДатаПериода);
		КонДата = КонецМесяца (ДатаПериода);
	ИначеЕсли Периодичность = "Неделя"  Тогда
		НачДата = НачалоНедели(ДатаПериода);
		КонДата = КонецНедели (ДатаПериода);
	ИначеЕсли Периодичность = "День"  Тогда
		НачДата = НачалоДня(ДатаПериода);
		КонДата = КонецДня (ДатаПериода);
	ИначеЕсли Периодичность = "Произвольно" Тогда
		НачДата = СтруктРеквизитов["_НачДата"];
		КонДата = СтруктРеквизитов["_КонДата"];
		СтруктРеквизитов.Удалить("_НачДата");
		СтруктРеквизитов.Удалить("_КонДата");

	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Неверное значение параметра ""Периодичность"": " + Периодичность + "!");
		Возврат Новый Массив;

	КонецЕсли;

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Док
	|
	|ИЗ
	|   Документ." + МетаданныеДокумента.Имя + " КАК Док
	|
	|ГДЕ
	|   Док.Дата МЕЖДУ &НачДата И &КонДата И
	|   Док.Проведен И НЕ Док.ПометкаУдаления И
	|   НЕ Док.Ссылка = &ДокСсылка";

	Запрос = Новый Запрос;

	Если Не СтруктРеквизитов = Неопределено Тогда

		Для Каждого Ключ Из СтруктРеквизитов Цикл
			Запрос.УстановитьПараметр(Ключ.Ключ, Ключ.Значение);
			ТекстЗапроса = ТекстЗапроса + " И
				|Док." + Ключ.Ключ + " = &" + Ключ.Ключ;
		КонецЦикла;

	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("НачДата",   НачДата);
	Запрос.УстановитьПараметр("КонДата",   КонДата);
	Запрос.УстановитьПараметр("ДокСсылка", Док.Ссылка);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Док");

КонецФункции // ДокументыВПериоде()

// Функция копирует структуру одной таблицы значений в новую таблицу значений
// Параметры:
// 		ТабШаблон - таблица структуру которой мы копируем
//      ИменаКол  - имена колонок, разделенные запятыми, которые надо скопировать
//                  необязателен. По умолчанию - все колонки
//
// Возврат:
//		Таблица значений соответствующей структуры
//
Функция КопироватьСтруктуруТаблицыЗначений(ТабШаблон, ИменаКол = "", ТабПриемник = Неопределено) Экспорт

	Если ТабПриемник = Неопределено Тогда
		ТабКопия = Новый ТаблицаЗначений;
	Иначе
		ТабКопия = ТабПриемник;
	КонецЕсли;

	Если ПустаяСтрока(ИменаКол) Тогда
		Для Каждого Кол Из ТабШаблон.Колонки Цикл
			// Из типа колонки исключаем тип NULL
			ТабКопия.Колонки.Добавить(Кол.Имя, Новый ОписаниеТипов(Кол.ТипЗначения,, "NULL"));
		КонецЦикла;
	Иначе
		СтруктКолонок = Новый Структура(ИменаКол);
		Для Каждого Элем Из СтруктКолонок Цикл
			Кол = ТабШаблон.Колонки[Элем.Ключ];
			ТабКопия.Колонки.Добавить(Кол.Имя, Новый ОписаниеТипов(Кол.ТипЗначения,, "NULL"));
		КонецЦикла;
	КонецЕсли;

	Возврат ТабКопия;

КонецФункции // КопироватьСтруктуруТаблицыЗначений()

// Функция возвращает признак "Только обороты" для указанного вида субконто на счете.
// Возвращает значение "Истина", если на счете для субконто установлен признак "Только обороты".
//
Функция ПроверитьСубконтоНаОборотное(Счет, ИмяСубконто) Экспорт
	
	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда
		Если ИмяСубконто > Счет.ВидыСубконто.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		ВидСубк = Счет.ВидыСубконто[ИмяСубконто - 1].ВидСубконто;
	Иначе
		Если ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Международный") Тогда
			ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоМеждународные[ИмяСубконто];
		Иначе
			ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто];
		КонецЕсли;
	КонецЕсли;
	
	ВидыСубконтоСтрока = Счет.ВидыСубконто.Найти(ВидСубк);
	
	Если ВидыСубконтоСтрока = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ВидыСубконтоСтрока.ТолькоОбороты;
	КонецЕсли;
	
КонецФункции // ПроверитьСубконтоНаОборотное()

// Функция формирует список счетов (с субсчетами, без счетов - групп)
//
//		Параметры: ТипУчета - тип учет, возможные значения
//						"Бух" - счета хорасчетного плана счетов
//                 СчетаСтрокой - список счетов. Строка разделенная запятыми ","
//				   Позволяет указывать любые счета. Значение по умолчанию:
//					"15, 20, 23, 24, 25, 26, 28, 36, 37, 63, 65, 91, 92, 93, 94", если тип учета "Бух"
//		Возврат: Список значений со счетами.
//
Функция ПолучитьЗатратныеСчета(ТипУчета, Знач СчетаСтрокой = "", БезГрупп = Ложь) Экспорт

	Если ТипУчета = "Бух" Тогда

		ПланСчетов    = ПланыСчетов.Хозрасчетный;
		ПланСчетовСтр = "Хозрасчетный";
		Если ПустаяСтрока(СчетаСтрокой) Тогда
			СчетаСтрокой = "15, 20, 23, 24, 25, 26, 27, 28, 36, 37, 63, 65, 91, 92, 93, 94";
			ИсключаемыеСубСчетаСтрокой = "375";
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	МассивСчетов = Новый Массив;
	СчетаСтрокой = СтрЗаменить(СчетаСтрокой, " ", "");
	Пока Не ПустаяСтрока(СчетаСтрокой) Цикл

		Поз = Найти(СчетаСтрокой, ",");
		Если Поз = 0 Тогда
			Код = СчетаСтрокой;
			СчетаСтрокой = "";
		Иначе
			Код = Лев(СчетаСтрокой, Поз - 1);
			СчетаСтрокой = Сред(СчетаСтрокой, Поз + 1);
		КонецЕсли;

		Счет = ПланСчетов.НайтиПоКоду(Код);
		Если НЕ ЗначениеЗаполнено(Счет) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не найден счет с кодом """ + Код + """ (план счетов - " + ПланСчетов + ")");
			Продолжить;
		КонецЕсли;

		МассивСчетов.Добавить(Счет);

	КонецЦикла;
	
	МассивИсключаемыхСубСчетов = Новый Массив;
	ИсключаемыеСубСчетаСтрокой = СтрЗаменить(ИсключаемыеСубСчетаСтрокой, " ", "");
	Пока Не ПустаяСтрока(ИсключаемыеСубСчетаСтрокой) Цикл
		
		Поз = Найти(ИсключаемыеСубСчетаСтрокой, ",");
		Если Поз = 0 Тогда
			Код = ИсключаемыеСубСчетаСтрокой;
			ИсключаемыеСубСчетаСтрокой = "";
		Иначе
			Код = Лев(ИсключаемыеСубСчетаСтрокой, Поз - 1);
			ИсключаемыеСубСчетаСтрокой = Сред(ИсключаемыеСубСчетаСтрокой, Поз + 1);
		КонецЕсли;
		
		Счет = ПланСчетов.НайтиПоКоду(Код);
		Если НЕ ЗначениеЗаполнено(Счет) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не найден счет с кодом """ + Код + """ (план счетов - " + ПланСчетов + ")");
			Продолжить;
		КонецЕсли;
		
		МассивИсключаемыхСубСчетов.Добавить(Счет);
		
	КонецЦикла;
	

	Если БезГрупп Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.Код    КАК КодСчета
		|ИЗ
		|	ПланСчетов.%ПланСчетов% КАК Хозрасчетный
		|ГДЕ
		|	(Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетов) И Хозрасчетный.Ссылка НЕ В (
		| 	ВЫБРАТЬ
		|		Хозрасчетный.Родитель
		|	ИЗ
		|		ПланСчетов.%ПланСчетов% КАК Хозрасчетный
		|	ГДЕ
		|		Хозрасчетный.Родитель <> &ПустСчет))";
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.Код    КАК КодСчета
		|ИЗ
		|	ПланСчетов.%ПланСчетов% КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетов)
		|	И НЕ Хозрасчетный.Ссылка В (&МассивИсключаемыхСубСчетов)";
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%ПланСчетов%", ПланСчетовСтр);

	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("МассивИсключаемыхСубСчетов", МассивИсключаемыхСубСчетов);	
	Запрос.УстановитьПараметр("ПустСчет",     ПланыСчетов.Хозрасчетный.ПустаяСсылка());

	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));

	Возврат СписокСчетов;

КонецФункции // ПолучитьЗатратныеСчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ ПО ОСТАТКАМ

// Подготавливает (заполняет) шапку документа для передачи объекта в общую процедуру
// заполнения остатками затрат.
//
// Вызывается из команд заполнения табличной части данными по определенному виду учета
// (без учета флагов в шапке документа)
//
// Параметры
//  ВидУчета - вид учета, данными которого надо заполнять документ
//           - Неопределено, если надо заполнять данным всех видов учета
//  РеквизитыДоИзменения - в эту переменную будет возвращена структура со значениями
//             реквизитов шапки до изменения в этой процедуре
Процедура ПодготовитьШапкуДокументаДляЗаполненияОстаткамиЗатрат(Объект, ВидУчета, РеквизитыДоИзменения) Экспорт
	
	// В процедуру заполнения по остаткам затрат следует передавать документ-объект
	// с реквизитами, заполненными особым образом.
	// Для того, чтобы не потерять значения реквизитов, запомним их,
	// после вызова процедуры заполнения - восстановим.
	РеквизитыДоИзменения = Новый Структура();
	РеквизитыДоИзменения.Вставить("ОтражатьВУправленческомУчете");
	РеквизитыДоИзменения.Вставить("ОтражатьВБухгалтерскомУчете");
	РеквизитыДоИзменения.Вставить("ПодразделениеОрганизации");
	ЗаполнитьЗначенияСвойств(РеквизитыДоИзменения, Объект);
	
	ЗаполнениеДаннымиУпрУчета  = (ВидУчета = Неопределено) ИЛИ (ВидУчета = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);
	ЗаполнениеДаннымиРеглУчета = ВидУчета <> Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
	
	Объект.ОтражатьВУправленческомУчете = ЗаполнениеДаннымиУпрУчета;
	Объект.ОтражатьВБухгалтерскомУчете  = ЗаполнениеДаннымиРеглУчета;
	
	Если ЗаполнениеДаннымиРеглУчета Тогда
		
		// Подразделение организации должно быть заполнено
		Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
			Объект.ПодразделениеОрганизации     = УправлениеЗатратами.ПолучитьПодразделениеОрганизации(
				Объект.Организация, 
				Объект.Подразделение, 
				Истина);
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует текст запроса по остаткам незавершенного производства.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаПоОстаткамЗатратРасширеннаяАналитика()
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		//ДляУпрУчета 3 КАК ИндексУчета,
	|		//ДляБухУчета 2 КАК ИндексУчета,
	|		ВЫБОР КОГДА ЕСТЬNULL(РегистрАналитикаУчетаЗатрат.Затрата, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	| 			ТОГДА РегистрАналитикаУчетаЗатрат.СпособРаспределенияЗатрат
	| 		ИНАЧЕ
	|       	РегистрАналитикаУчетаЗатрат.Затрата
	| 		КОНЕЦ КАК Затрата,
	|		РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты,
	|		РегистрАналитикаУчетаЗатрат.СерияЗатраты,
	|		РегистрАналитикаУчетаЗатрат.СтатьяЗатрат,
	|		
	|		РегистрАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|		РегистрАналитикаУчетаПартий.Заказ,
	|		
	|		РегистрАналитикаУчетаЗатрат.Затрата.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		РегистрАналитикаУчетаЗатрат.Затрата.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|
	|		ЕСТЬNULL(РегламентныеДокументы.ЕстьРасчетСебестоимостиВыпуска, Ложь) КАК ЕстьРасчетСебестоимостиВыпуска,
	|		
	|		//ДляУпрУчета Неопределено КАК СчетЗатрат,
	|		//ДляУпрУчета Неопределено КАК НалоговоеНазначение,
	|		
	|		//ДляБухУчета РегистрАналитикаВидаУчета.СчетУчета КАК СчетЗатрат,
	|		//ДляБухУчета РегистрАналитикаВидаУчета.НалоговоеНазначение КАК НалоговоеНазначение,
	|		
	|		//ДляУпрУчета СУММА(УчетЗатрат.КоличествоОстаток) КАК Количество,
	|		//ДляУпрУчета СУММА(0) КАК КоличествоБух,
	|		//ДляУпрУчета СУММА(0) КАК КоличествоНал,
	|
	|		//ДляБухУчета СУММА(0) КАК Количество,
	|		//ДляБухУчета СУММА(УчетЗатрат.КоличествоОстаток) КАК КоличествоБух,
	|		//ДляБухУчета СУММА(УчетЗатрат.КоличествоНУОстаток) КАК КоличествоНал,
	|
	|		//ДляУпрУчета СУММА(УчетЗатрат.СтоимостьОстаток) КАК Сумма,
	|		//ДляУпрУчета СУММА(0) КАК СуммаБух,
	|		//ДляУпрУчета СУММА(0) КАК СуммаНДС,
	|		//ДляУпрУчета СУММА(0) КАК СуммаНДСКредит,
	|		//ДляУпрУчета СУММА(0) КАК СуммаНал
	|		
	|		//ДляБухУчета СУММА(0) КАК Сумма,
	|		//ДляБухУчета СУММА(УчетЗатрат.СтоимостьОстаток) КАК СуммаБух,
	|		//ДляБухУчета СУММА(УчетЗатрат.НДСВходящийОстаток) КАК СуммаНДС,
	|		//ДляБухУчета СУММА(УчетЗатрат.НДСКредитОстаток) КАК СуммаНДСКредит,
	|		//ДляБухУчета СУММА(УчетЗатрат.СтоимостьНУОстаток) КАК СуммаНал
	|		
	|	ИЗ
	|		РегистрНакопления.УчетЗатрат%СуффиксРегл%.Остатки(&КонГраница, 
	|			АналитикаВидаУчета В (
	|				ВЫБРАТЬ
	|					Ссылка
	|				ИЗ
	|					РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|				ГДЕ
	|					РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты)
	|					//ДляУпрУчета И Подразделение = &Подразделение
	|					//ДляРеглУчета И Организация = &Организация
	|					//ДляРеглУчета И ПодразделениеОрганизации = &ПодразделениеОрганизации
	|				)
	|			И АналитикаУчетаЗатрат В (
	|				ВЫБРАТЬ
	|					Ссылка
	|				ИЗ
	|					РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|				ГДЕ
	|					ХарактерЗатрат = ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ПроизводственныеРасходы)
	|					//Материальные И Затрата.ВидНоменклатуры.ТипНоменклатуры <> &Услуга
	|					//Материальные И СтатьяЗатрат.ВидЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыЗатрат.Материальные)
	|					//Материальные И Не СтатьяЗатрат.СтатусМатериальныхЗатрат В (&СтатусыМатериальныхЗатрат)
	|					//Нематериальные И СтатьяЗатрат.ВидЗатрат <> ЗНАЧЕНИЕ(Перечисление.ВидыЗатрат.Материальные)
	|					//ЕстьСтатьяЗатрат И СтатьяЗатрат = &СтатьяЗатрат
	|				)
	|			//ЕстьЗаказ И АналитикаУчетаПартий В (
	|			//ЕстьЗаказ 	ВЫБРАТЬ
	|			//ЕстьЗаказ 		Ссылка
	|			//ЕстьЗаказ 	ИЗ
	|			//ЕстьЗаказ 		РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	|			//ЕстьЗаказ 	ГДЕ
	|			//ЕстьЗаказ 		Заказ = &Заказ
	|			//ЕстьЗаказ 	)
	|			
	|		) КАК УчетЗатрат
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|		ПО
	|			УчетЗатрат.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|		ПО
	|			УчетЗатрат.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
	|		ПО
	|			УчетЗатрат.АналитикаРаспределенияЗатрат = РегистрАналитикаРаспределенияЗатрат.Ссылка
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	|		ПО
	|			УчетЗатрат.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ	ПЕРВЫЕ 1
	|			УчетЗатрат.Регистратор,
	|			Истина КАК ЕстьРасчетСебестоимостиВыпуска
	|		ИЗ
	|			РегистрНакопления.УчетЗатрат%СуффиксРегл% КАК УчетЗатрат
	|		ГДЕ
	|			УчетЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|			И УчетЗатрат.Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска
	|			И УчетЗатрат.АналитикаВидаУчета В (
	|				ВЫБРАТЬ
	|					Ссылка
	|				ИЗ
	|					РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|				ГДЕ
	|					//ДляУпрУчета Истина
	|					//ДляРеглУчета Организация = &Организация
	|				)
	|		
	|		) КАК РегламентныеДокументы
	|	ПО
	|		Истина
	|СГРУППИРОВАТЬ ПО
	|		ВЫБОР КОГДА ЕСТЬNULL(РегистрАналитикаУчетаЗатрат.Затрата, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	| 			ТОГДА РегистрАналитикаУчетаЗатрат.СпособРаспределенияЗатрат
	| 		ИНАЧЕ
	|       	РегистрАналитикаУчетаЗатрат.Затрата
	| 		КОНЕЦ,
	|		РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты,
	|		РегистрАналитикаУчетаЗатрат.СерияЗатраты,
	|		РегистрАналитикаУчетаЗатрат.СтатьяЗатрат,
	|		
	|		РегистрАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|		РегистрАналитикаУчетаПартий.Заказ,
	|		
	|		РегистрАналитикаУчетаЗатрат.Затрата.ЕдиницаХраненияОстатков,
	|		РегистрАналитикаУчетаЗатрат.Затрата.ЕдиницаХраненияОстатков.Коэффициент,
	|
	|		ЕСТЬNULL(РегламентныеДокументы.ЕстьРасчетСебестоимостиВыпуска, Ложь)
	|		
	|		//ДляБухУчета , РегистрАналитикаВидаУчета.СчетУчета,
	|		//ДляБухУчета РегистрАналитикаВидаУчета.НалоговоеНазначение
    |";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоОстаткамЗатратРасширеннаяАналитика()

// Функция формирует текст запроса по остаткам незавершенного производства.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаПоОстаткамНЗП()
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		//ДляУпрУчета 3 КАК ИндексУчета,
	|		//ДляБухУчета 2 КАК ИндексУчета,
	|		НезавершенноеПроизводство.Затрата,
	|		НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|		НезавершенноеПроизводство.СерияЗатраты,
	|		НезавершенноеПроизводство.СтатьяЗатрат,
	|		НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|		НезавершенноеПроизводство.Заказ,
	|		
	|		НезавершенноеПроизводство.Затрата.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		НезавершенноеПроизводство.Затрата.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|		
	|		ЕСТЬNULL(РегламентныеДокументы.ЕстьРасчетСебестоимостиВыпуска, Ложь) КАК ЕстьРасчетСебестоимостиВыпуска,
	|		
	|		//ДляУпрУчета Неопределено КАК СчетЗатрат,
	|		//ДляУпрУчета Неопределено КАК НалоговоеНазначение,
	|		
	|		//ДляБухУчета НезавершенноеПроизводство.СчетУчета КАК СчетЗатрат,
	|		//ДляБухУчета НезавершенноеПроизводство.НалоговоеНазначение КАК НалоговоеНазначение,
	|		
	|		//ДляУпрУчета (НезавершенноеПроизводство.КоличествоОстаток -
	|		//ДляУпрУчета ЕСТЬNULL(ЗатратыНаВыпуск.Количество, 0) -
	|		//ДляУпрУчета ЕСТЬNULL(ЗатратыНаВыпускНаработка.Количество, 0)) КАК Количество,
	|		//ДляУпрУчета 0 КАК КоличествоБух,
	|		//ДляУпрУчета 0 КАК КоличествоНал,
	|
	|		//ДляБухУчета 0 КАК Количество,
	|		//ДляБухУчета (НезавершенноеПроизводство.КоличествоОстаток -
	|		//ДляБухУчета ЕСТЬNULL(ЗатратыНаВыпуск.Количество, 0) -
	|		//ДляБухУчета ЕСТЬNULL(ЗатратыНаВыпускНаработка.Количество, 0)) КАК КоличествоБух,
	|		//ДляБухУчета (НезавершенноеПроизводство.КоличествоОстаток -
	|		//ДляБухУчета ЕСТЬNULL(ЗатратыНаВыпуск.Количество, 0) -
	|		//ДляБухУчета ЕСТЬNULL(ЗатратыНаВыпускНаработка.Количество, 0)) КАК КоличествоНал,
	|
	|		//ДляУпрУчета ВЫБОР КОГДА НезавершенноеПроизводство.КоличествоОстаток = 0 ТОГДА
	|		//ДляУпрУчета 		НезавершенноеПроизводство.СтоимостьОстаток -
	|		//ДляУпрУчета 		ЕСТЬNULL(ЗатратыНаВыпуск.Сумма, 0) -
	|		//ДляУпрУчета 		ЕСТЬNULL(ЗатратыНаВыпускНаработка.Сумма, 0)
	|		//ДляУпрУчета ИНАЧЕ
	|		//ДляУпрУчета 		(НезавершенноеПроизводство.КоличествоОстаток -
	|		//ДляУпрУчета 		ЕСТЬNULL(ЗатратыНаВыпуск.Количество, 0) -
	|		//ДляУпрУчета 		ЕСТЬNULL(ЗатратыНаВыпускНаработка.Количество, 0)) *
	|		//ДляУпрУчета 		НезавершенноеПроизводство.СтоимостьОстаток / НезавершенноеПроизводство.КоличествоОстаток
	|		//ДляУпрУчета КОНЕЦ КАК Сумма,
	|		//ДляУпрУчета 0 КАК СуммаБух,
	|		//ДляУпрУчета 0 КАК СуммаНДС,
	|		//ДляУпрУчета 0 КАК СуммаНДСКредит,
	|		//ДляУпрУчета 0 КАК СуммаНал 
	|		
	|		//ДляБухУчета 0 КАК Сумма,
	|		//ДляБухУчета ВЫБОР КОГДА НезавершенноеПроизводство.КоличествоОстаток = 0 ТОГДА
	|		//ДляБухУчета 		НезавершенноеПроизводство.СтоимостьОстаток -
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпуск.Сумма, 0) -
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпускНаработка.Сумма, 0)
	|		//ДляБухУчета ИНАЧЕ
	|		//ДляБухУчета 		(НезавершенноеПроизводство.КоличествоОстаток -
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпуск.Количество, 0) -
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпускНаработка.Количество, 0)) *
	|		//ДляБухУчета 		НезавершенноеПроизводство.СтоимостьОстаток / НезавершенноеПроизводство.КоличествоОстаток
	|		//ДляБухУчета КОНЕЦ КАК СуммаБух,
	|
	|		//ДляБухУчета ВЫБОР КОГДА НезавершенноеПроизводство.КоличествоОстаток = 0 ТОГДА
	|		//ДляБухУчета 		НезавершенноеПроизводство.НДСВходящийОстаток -
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпуск.НДСВходящий, 0) - 
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпускНаработка.НДСВходящий, 0)
	|		//ДляБухУчета ИНАЧЕ
	|		//ДляБухУчета 		(НезавершенноеПроизводство.КоличествоОстаток -
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпуск.Количество, 0) - 
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпускНаработка.Количество, 0)) *
	|		//ДляБухУчета 		НезавершенноеПроизводство.НДСВходящийОстаток / НезавершенноеПроизводство.КоличествоОстаток
	|		//ДляБухУчета КОНЕЦ КАК СуммаНДС, 	
	|
	|		//ДляБухУчета ВЫБОР КОГДА НезавершенноеПроизводство.КоличествоОстаток = 0 ТОГДА
	|		//ДляБухУчета 		НезавершенноеПроизводство.НДСКредитОстаток -
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпуск.НДСКредит, 0) - 
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпускНаработка.НДСКредит, 0)
	|		//ДляБухУчета ИНАЧЕ
	|		//ДляБухУчета 		(НезавершенноеПроизводство.КоличествоОстаток -
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпуск.Количество, 0) - 
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпускНаработка.Количество, 0)) *
	|		//ДляБухУчета 		НезавершенноеПроизводство.НДСКредитОстаток / НезавершенноеПроизводство.КоличествоОстаток
	|		//ДляБухУчета КОНЕЦ КАК СуммаНДСКредит, 	
	|
	|		//ДляБухУчета ВЫБОР КОГДА НезавершенноеПроизводство.КоличествоОстаток = 0 ТОГДА
	|		//ДляБухУчета 		НезавершенноеПроизводство.СтоимостьНУОстаток -
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпуск.СуммаНУ, 0) -
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпускНаработка.СуммаНУ, 0)
	|		//ДляБухУчета ИНАЧЕ
	|		//ДляБухУчета 		(НезавершенноеПроизводство.КоличествоОстаток -
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпуск.Количество, 0) -
	|		//ДляБухУчета 		ЕСТЬNULL(ЗатратыНаВыпускНаработка.Количество, 0)) *
	|		//ДляБухУчета 		НезавершенноеПроизводство.СтоимостьНУОстаток / НезавершенноеПроизводство.КоличествоОстаток
	|		//ДляБухУчета КОНЕЦ КАК СуммаНал
	|		
	|	ИЗ
	|		РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&КонГраница, 
	|			//ДляУпрУчета Подразделение = &Подразделение
	|			//ДляРеглУчета Организация = &Организация
	|			//ДляРеглУчета И Подразделение = &ПодразделениеОрганизации
	|			//Материальные И СтатьяЗатрат.ВидЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыЗатрат.Материальные)
	|			//Материальные И Затрата.ВидНоменклатуры.ТипНоменклатуры <> &Услуга
	|			//Материальные И Не СтатьяЗатрат.СтатусМатериальныхЗатрат В (&СтатусыМатериальныхЗатрат)
	|			//Нематериальные И СтатьяЗатрат.ВидЗатрат <> ЗНАЧЕНИЕ(Перечисление.ВидыЗатрат.Материальные)
	|			//ЕстьСтатьяЗатрат И СтатьяЗатрат = &СтатьяЗатрат
	|			//ЕстьЗаказ И Заказ = &Заказ
	|			И Не Затрата ССЫЛКА Перечисление.ХарактерЗатрат
	|		) КАК НезавершенноеПроизводство
	|																					   
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ЗатратыНаВыпуск.Затрата,
	|			ЗатратыНаВыпуск.СерияЗатраты,
	|			ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|			ЗатратыНаВыпуск.СтатьяЗатрат,
	|			ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|			ЗатратыНаВыпуск.ЗаказНЗП,
	|			//ДляБухУчета ЗатратыНаВыпуск.СчетУчета,
	|			//ДляБухУчета ЗатратыНаВыпуск.НалоговоеНазначение,
	|			СУММА(ЗатратыНаВыпуск.Количество) КАК Количество,
	|			//ДляБухУчета СУММА(ЗатратыНаВыпуск.СуммаНУ) КАК СуммаНУ,
	|			//ДляБухУчета СУММА(ЗатратыНаВыпуск.НДСВходящий) КАК НДСВходящий,
	|			//ДляБухУчета СУММА(ЗатратыНаВыпуск.НДСКредит) КАК НДСКредит,
	|			СУММА(ЗатратыНаВыпуск.Сумма) КАК Сумма
	|		ИЗ
	|			РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|		ГДЕ
	|			ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|			//ДляУпрУчета И (ЗатратыНаВыпуск.Подразделение = &Подразделение
	|			//ДляУпрУчета 	ИЛИ ЗатратыНаВыпуск.ПодразделениеНЗП = &Подразделение)
	|			//ДляРеглУчета И Организация = &Организация
	|			//ДляРеглУчета И (ЗатратыНаВыпуск.Подразделение = &ПодразделениеОрганизации
	|			//ДляРеглУчета 	ИЛИ ЗатратыНаВыпуск.ПодразделениеНЗП = &ПодразделениеОрганизации)
	|			//Материальные И ЗатратыНаВыпуск.СтатьяЗатрат.ВидЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыЗатрат.Материальные)
	|			//Материальные И Не ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат В (&СтатусыМатериальныхЗатрат)
	|			//Нематериальные И ЗатратыНаВыпуск.СтатьяЗатрат.ВидЗатрат <> ЗНАЧЕНИЕ(Перечисление.ВидыЗатрат.Материальные)
	|			И ЗатратыНаВыпуск.Регистратор  <> &ТекДок
	|			И ЗатратыНаВыпуск.КодОперации В(&КодыОпераций)
	|			//ЕстьСтатьяЗатрат И ЗатратыНаВыпуск.СтатьяЗатрат = &СтатьяЗатрат
	|			//ЕстьЗаказ И ЗатратыНаВыпуск.ЗаказНЗП = &Заказ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			//ДляБухУчета ЗатратыНаВыпуск.СчетУчета,
	|			//ДляБухУчета ЗатратыНаВыпуск.НалоговоеНазначение,
	|			ЗатратыНаВыпуск.Затрата,
	|			ЗатратыНаВыпуск.СерияЗатраты,
	|			ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|			ЗатратыНаВыпуск.СтатьяЗатрат,
	|			ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП,
	|			ЗатратыНаВыпуск.ЗаказНЗП
	|		) КАК ЗатратыНаВыпуск
	|
	|	ПО 
	|		НезавершенноеПроизводство.Затрата = ЗатратыНаВыпуск.Затрата
	|		И НезавершенноеПроизводство.ХарактеристикаЗатраты = ЗатратыНаВыпуск.ХарактеристикаЗатраты
	|		И НезавершенноеПроизводство.СерияЗатраты = ЗатратыНаВыпуск.СерияЗатраты
	|		И НезавершенноеПроизводство.СтатьяЗатрат = ЗатратыНаВыпуск.СтатьяЗатрат
	|		И НезавершенноеПроизводство.НоменклатурнаяГруппа = ЗатратыНаВыпуск.НоменклатурнаяГруппаНЗП
	|		И НезавершенноеПроизводство.Заказ = ЗатратыНаВыпуск.ЗаказНЗП
	|		//ДляБухУчета И НезавершенноеПроизводство.СчетУчета = ЗатратыНаВыпуск.СчетУчета
	|		//ДляБухУчета И НезавершенноеПроизводство.НалоговоеНазначение = ЗатратыНаВыпуск.НалоговоеНазначение 
	|									
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ВЫБОР КОГДА ЗатратыНаВыпускНаработка.Затрата = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА
	|				Неопределено
	|			ИНАЧЕ
	|				ЗатратыНаВыпускНаработка.Затрата
	|			КОНЕЦ КАК Затрата,
	|			ЗатратыНаВыпускНаработка.СерияЗатраты,
	|			ЗатратыНаВыпускНаработка.ХарактеристикаЗатраты,
	|			ЗатратыНаВыпускНаработка.СтатьяЗатрат,
	|			ЗатратыНаВыпускНаработка.НоменклатурнаяГруппаНЗП,
	|			ЗатратыНаВыпускНаработка.ЗаказНЗП,
	|			//ДляРеглУчета ЗатратыНаВыпускНаработка.СчетУчета,
	|			//ДляРеглУчета ЗатратыНаВыпускНаработка.НалоговоеНазначение,
	|			ЗатратыНаВыпускНаработка.КоличествоОстаток КАК Количество,
	|			//ДляБухУчета ЗатратыНаВыпускНаработка.СуммаНУОстаток КАК СуммаНУ,
	|			//ДляБухУчета ЗатратыНаВыпускНаработка.НДСВходящийОстаток КАК НДСВходящий,
	|			//ДляБухУчета ЗатратыНаВыпускНаработка.НДСКредитОстаток КАК НДСКредит,
	|			ЗатратыНаВыпускНаработка.СуммаОстаток КАК Сумма
	|		ИЗ
	|			РегистрНакопления.ЗатратыНаВыпускПродукцииНаработка%СуффиксУчета%.Остатки(&КонГраница, 
	|				//ДляУпрУчета (Подразделение = &Подразделение
	|				//ДляУпрУчета 	ИЛИ ПодразделениеНЗП = &Подразделение)
	|				//ДляРеглУчета Организация = &Организация
	|				//ДляРеглУчета И (Подразделение = &ПодразделениеОрганизации
	|				//ДляРеглУчета 	ИЛИ ПодразделениеНЗП = &ПодразделениеОрганизации)
	|				//Материальные И СтатьяЗатрат.ВидЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыЗатрат.Материальные)
	|				//Материальные И Затрата.ВидНоменклатуры.ТипНоменклатуры <> &Услуга
	|				//Материальные И Не СтатьяЗатрат.СтатусМатериальныхЗатрат В (&СтатусыМатериальныхЗатрат)
	|				//Нематериальные И СтатьяЗатрат.ВидЗатрат <> ЗНАЧЕНИЕ(Перечисление.ВидыЗатрат.Материальные)
	|				//ЕстьСтатьяЗатрат И СтатьяЗатрат = &СтатьяЗатрат
	|				//ЕстьЗаказ И Заказ = &Заказ
	|			) КАК ЗатратыНаВыпускНаработка
	|		
	|		) КАК ЗатратыНаВыпускНаработка
	|
	|	ПО 
	|		НезавершенноеПроизводство.Затрата = ЗатратыНаВыпускНаработка.Затрата
	|		И НезавершенноеПроизводство.ХарактеристикаЗатраты = ЗатратыНаВыпускНаработка.ХарактеристикаЗатраты
	|		И НезавершенноеПроизводство.СерияЗатраты = ЗатратыНаВыпускНаработка.СерияЗатраты
	|		И НезавершенноеПроизводство.СтатьяЗатрат = ЗатратыНаВыпускНаработка.СтатьяЗатрат
	|		И НезавершенноеПроизводство.НоменклатурнаяГруппа = ЗатратыНаВыпускНаработка.НоменклатурнаяГруппаНЗП
	|		И НезавершенноеПроизводство.Заказ = ЗатратыНаВыпускНаработка.ЗаказНЗП
	|		//ДляБухУчета И НезавершенноеПроизводство.СчетУчета = ЗатратыНаВыпускНаработка.СчетУчета
	|		//ДляБухУчета И НезавершенноеПроизводство.НалоговоеНазначение = ЗатратыНаВыпускНаработка.НалоговоеНазначение 
	|		
	|	
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ	ПЕРВЫЕ 1
	|			НезавершенноеПроизводство.Регистратор,
	|			Истина КАК ЕстьРасчетСебестоимостиВыпуска
	|		ИЗ
	|			РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета% КАК НезавершенноеПроизводство
	|		ГДЕ
	|			НезавершенноеПроизводство.Период МЕЖДУ &НачДата И &КонДата
	|			И НезавершенноеПроизводство.Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска
	|			//ДляРеглУчета И НезавершенноеПроизводство.Организация = &Организация
	|		) КАК РегламентныеДокументы
	|	ПО
	|		Истина
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоОстаткамНЗП()

// Процедура устанавливает параметры запроса по остаткам незавершенного производства.
//
// Параметры:
//
Процедура УстановитьПараметрыЗапросаПоОстаткамНезавершенногоПроизводства(
	ДокументОбъект,
	МетаданныеДокумента,
	ИсключатьУслуги,
	ИсключатьДавальческоеСырье,
	ТолькоОтрицательныеОстатки,
	ТолькоВозвратныеОтходы,
	ЕстьЗаказ,
	ЕстьСтатьяЗатрат,
	Запрос
	)
	
	ЕстьДатаНачалаПериода = (МетаданныеДокумента.Реквизиты.Найти("ДатаНачалаПериода") <> Неопределено);
	НачДата = ?(ЕстьДатаНачалаПериода И ЗначениеЗаполнено(ДокументОбъект.ДатаНачалаПериода), 
		ДокументОбъект.ДатаНачалаПериода, 
		НачалоМесяца(ДокументОбъект.Дата));
	КонДата = УправлениеЗатратами.ПолучитьДатуДляЗапроса(ДокументОбъект, МетаданныеДокумента);
		
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонДата, ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Подразделение", ДокументОбъект.Подразделение);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ДокументОбъект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ТекДок", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Услуга", ?(ИсключатьУслуги, Перечисления.ТипыНоменклатуры.Услуга, Неопределено));	
	
	Знак = ?(ТолькоОтрицательныеОстатки ИЛИ ТолькоВозвратныеОтходы, -1, 1);
	Запрос.УстановитьПараметр("Знак", Знак);
	Если ЕстьЗаказ Тогда
		Запрос.УстановитьПараметр("Заказ", ДокументОбъект.Заказ);
	КонецЕсли;
	
	Если ЕстьСтатьяЗатрат Тогда
		Запрос.УстановитьПараметр("СтатьяЗатрат", ДокументОбъект.СтатьяЗатрат);
	КонецЕсли;
	
	МассивСтатусовМатериальныхЗатрат = Новый Массив;
	Если Не ТолькоВозвратныеОтходы Тогда
		МассивСтатусовМатериальныхЗатрат.Добавить(Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы);
	Иначе
		МассивСтатусовМатериальныхЗатрат.Добавить(Перечисления.СтатусыМатериальныхЗатратНаПроизводство.Собственные);
	КонецЕсли;
	Если ИсключатьДавальческоеСырье Тогда
		МассивСтатусовМатериальныхЗатрат.Добавить(Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку);
	КонецЕсли;
	Запрос.УстановитьПараметр("СтатусыМатериальныхЗатрат", МассивСтатусовМатериальныхЗатрат);
	Запрос.УстановитьПараметр("СтатусМатериальныхЗатратПринятые", Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку);
	
	
	МассивКодовОпераций = Новый Массив;
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч);
	Если ТолькоВозвратныеОтходы Тогда
		МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КодыОпераций", МассивКодовОпераций);
	
КонецПроцедуры // УстановитьПараметрыЗапросаПоОстаткамНезавершенногоПроизводства()

// Функция формирует запрос по остаткам незавершенного производства.
//
// Параметры:
//	ДокументОбъект,
//	МетаданныеДокумента,
//	МатериальныеЗатраты,
//	ИсключатьУслуги,
//	ИсключатьДавальческоеСырье,
//	ТолькоОтрицательныеОстатки,
//	ТолькоВозвратныеОтходы,
//	ЕстьЗаказ,
//	ЕстьСтатьяЗатрат
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьЗапросПоОстаткамНезавершенногоПроизводства(
	ДокументОбъект,
	МетаданныеДокумента,
	МатериальныеЗатраты,
	ИсключатьУслуги,
	ИсключатьДавальческоеСырье,
	ТолькоОтрицательныеОстатки,
	ТолькоВозвратныеОтходы,
	ЕстьЗаказ,
	ЕстьСтатьяЗатрат
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НезавершенноеПроизводство.ЕстьРасчетСебестоимостиВыпуска,
	|	НезавершенноеПроизводство.Затрата КАК Номенклатура,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты КАК ХарактеристикаНоменклатуры,
	|	НезавершенноеПроизводство.СерияЗатраты КАК СерияНоменклатуры,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ КАК Заказ,
	|	
	|	НезавершенноеПроизводство.ЕдиницаИзмерения,
	|	НезавершенноеПроизводство.Коэффициент,
	|	
	|	НезавершенноеПроизводство.СчетЗатрат,
	|	НезавершенноеПроизводство.НалоговоеНазначение,
	|	
	|	&Знак * НезавершенноеПроизводство.Количество КАК Количество,
	|	&Знак * НезавершенноеПроизводство.КоличествоБух КАК КоличествоБух,
    |	&Знак * НезавершенноеПроизводство.КоличествоНал КАК КоличествоНал,	
	|	
	|	&Знак * НезавершенноеПроизводство.Сумма КАК Сумма,
	|	&Знак * НезавершенноеПроизводство.СуммаБух КАК СуммаБух,
	|	&Знак * НезавершенноеПроизводство.СуммаНДС КАК СуммаНДС,
	|	&Знак * НезавершенноеПроизводство.СуммаНДСКредит КАК СуммаНДСКредит,
	|	&Знак * НезавершенноеПроизводство.СуммаНал КАК СуммаНал 
	|	
	|ИЗ (
	|
	|	//ДляУпрУчета //ТекстЗапросаПоОстаткамНезавершенногоПроизводстваУУ
	|	//ДляУпрУчета //ДляБухУчета ОБЪЕДИНИТЬ ВСЕ
	|	//ДляБухУчета //ТекстЗапросаПоОстаткамНезавершенногоПроизводстваБУ
	|	) КАК НезавершенноеПроизводство
	|
	|СГРУППИРОВАТЬ ПО
	|	НезавершенноеПроизводство.ЕстьРасчетСебестоимостиВыпуска,
	|	НезавершенноеПроизводство.Затрата,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	
	|	НезавершенноеПроизводство.ЕдиницаИзмерения,
	|	НезавершенноеПроизводство.Коэффициент,
	|	
	|	НезавершенноеПроизводство.СчетЗатрат,
	|	НезавершенноеПроизводство.НалоговоеНазначение,
	|	НезавершенноеПроизводство.ИндексУчета,
	|	
	|	НезавершенноеПроизводство.Количество,
	|	НезавершенноеПроизводство.КоличествоБух,
    |	НезавершенноеПроизводство.КоличествоНал,  	
	|	
	|	НезавершенноеПроизводство.Сумма,
	|	НезавершенноеПроизводство.СуммаБух,
	|	НезавершенноеПроизводство.СуммаНДС,
	|	НезавершенноеПроизводство.СуммаНДСКредит,
	|	НезавершенноеПроизводство.СуммаНал  
	|		
	|//ТолькоОтрицательныеОстатки ИМЕЮЩИЕ (НезавершенноеПроизводство.Количество < 0
	|//ТолькоОтрицательныеОстатки 	ИЛИ НезавершенноеПроизводство.КоличествоБух < 0
	|//ТолькоОтрицательныеОстатки 	ИЛИ НезавершенноеПроизводство.КоличествоНал < 0) 	
	|
	|УПОРЯДОЧИТЬ ПО
	|	НезавершенноеПроизводство.ИндексУчета
	|
	|ИТОГИ 
	|	МАКСИМУМ(ЕстьРасчетСебестоимостиВыпуска),
	|	СУММА(Количество),
	|	СУММА(КоличествоБух),
	|	СУММА(КоличествоНал),
	|	СУММА(Сумма),
	|	СУММА(СуммаБух),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаНДСКредит),
	|	СУММА(СуммаНал)
	|ПО
	|	НезавершенноеПроизводство.Затрата,
	|	//Материальные НезавершенноеПроизводство.ХарактеристикаЗатраты,
	|	//Материальные НезавершенноеПроизводство.СерияЗатраты,
	|	НезавершенноеПроизводство.СтатьяЗатрат,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ,
	|	//Материальные НезавершенноеПроизводство.ЕдиницаИзмерения,
	|	//Материальные НезавершенноеПроизводство.Коэффициент,
	|	НезавершенноеПроизводство.СчетЗатрат
	|";
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ДокументОбъект.Дата);
		
	Если ИспользоватьРасширеннуюАналитику Тогда
		РежимИспользованияРасширеннойАналитики = глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");
		
		Если Не МатериальныеЗатраты Тогда
			ИспользоватьДанныеУправленческогоУчета = Истина;
			ИспользоватьДанныеБухгалтерскогоУчета  = Истина;
			
		ИначеЕсли РежимИспользованияРасширеннойАналитики = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет
		   И ДокументОбъект.ОтражатьВУправленческомУчете
		Тогда
			ИспользоватьДанныеУправленческогоУчета = Истина;
			ИспользоватьДанныеБухгалтерскогоУчета  = ДокументОбъект.ОтражатьВБухгалтерскомУчете;
			
		Иначе
			ИспользоватьДанныеУправленческогоУчета = Ложь;
			ИспользоватьДанныеБухгалтерскогоУчета  = Истина;
		КонецЕсли;
		
		ИспользоватьДанныеНалоговогоУчета = Ложь;
	Иначе
		ИспользоватьДанныеУправленческогоУчета = ДокументОбъект.ОтражатьВУправленческомУчете;
		ИспользоватьДанныеБухгалтерскогоУчета  = ДокументОбъект.ОтражатьВБухгалтерскомУчете;
	КонецЕсли;
		
	Если ИспользоватьДанныеУправленческогоУчета Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляУпрУчета", "");
	КонецЕсли;
	
	Если ИспользоватьДанныеБухгалтерскогоУчета Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляБухУчета", "");
	КонецЕсли;
	
			
	Если ИспользоватьРасширеннуюАналитику Тогда
		ТекстЗапросаПоОстаткамНЗП = СформироватьТекстЗапросаПоОстаткамЗатратРасширеннаяАналитика();
	Иначе
		ТекстЗапросаПоОстаткамНЗП = СформироватьТекстЗапросаПоОстаткамНЗП();
	КонецЕсли;
	
	Если ИспользоватьДанныеУправленческогоУчета Тогда
		ТекстЗапросаПоОстаткам = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
			ТекстЗапросаПоОстаткамНЗП,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
		);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"//ТекстЗапросаПоОстаткамНезавершенногоПроизводстваУУ",
			ТекстЗапросаПоОстаткам
		);
	КонецЕсли;
	
	Если ИспользоватьДанныеБухгалтерскогоУчета Тогда
		ТекстЗапросаПоОстаткам = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
			ТекстЗапросаПоОстаткамНЗП,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
		);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"//ТекстЗапросаПоОстаткамНезавершенногоПроизводстваБУ",
			ТекстЗапросаПоОстаткам
		);
	КонецЕсли;
	

	
	Если ТолькоОтрицательныеОстатки Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТолькоОтрицательныеОстатки", "");
	КонецЕсли;
	
	Если ЕстьЗаказ Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ЕстьЗаказ", "");
	КонецЕсли;
	
	Если ЕстьСтатьяЗатрат Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ЕстьСтатьяЗатрат", "");
	КонецЕсли;
	
	Если МатериальныеЗатраты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//Материальные", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//Нематериальные", "");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапросаПоОстаткамНезавершенногоПроизводства(
		ДокументОбъект,
		МетаданныеДокумента,
		ИсключатьУслуги,
		ИсключатьДавальческоеСырье,
		ТолькоОтрицательныеОстатки,
		ТолькоВозвратныеОтходы,
		ЕстьЗаказ,
		ЕстьСтатьяЗатрат,
		Запрос
	);
	
	Возврат Запрос;
	
КонецФункции // СформироватьТекстЗапросаПоОстаткамНезавершенногоПроизводства()

// Процедура формирует таблицу остатков материалов в незавершенном производстве.
//
Процедура ЗаполнитьМатериалыПоОстаткамНЗП(
	ДокОбъект, 
	ТаблицаМатериалы,
	ЕстьСумма = Ложь,
	ЕстьЕдиницаИзмерения = Ложь,
	ЕстьЕдиницаИзмеренияМест = Ложь,
	ИсключатьДавальческоеСырье = Ложь,
	ТолькоОтрицательныеОстатки = Ложь,
	ИсключатьУслуги = Ложь,
	ТолькоВозвратныеОтходы = Ложь
	) Экспорт
	
	ОтражатьВУправленческомУчете = ДокОбъект.ОтражатьВУправленческомУчете;
	ОтражатьВБухгалтерскомУчете  = ДокОбъект.ОтражатьВБухгалтерскомУчете;
	
	Если НЕ ОтражатьВУправленческомУчете 
	   И НЕ ОтражатьВБухгалтерскомУчете Тогда
		ОбщегоНазначения.Сообщение("Документ не отражается ни в одном виде учета!
			|Заполнение не может быть выполнено!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокОбъект.Метаданные();
	ЕстьЗаказ = (МетаданныеДокумента.Реквизиты.Найти("Заказ") <> Неопределено);
	Если ЕстьЗаказ И НЕ ЗначениеЗаполнено(ДокОбъект.Заказ) Тогда
		ЕстьЗаказ = Ложь;
	КонецЕсли;
	
	ЕстьНомГруппа = Истина;
	// Если это таб.часть документа то поищем в метаданных.
	Если НЕ ТипЗнч(ТаблицаМатериалы) = Тип("ТаблицаЗначений") Тогда
		Если НЕ Метаданные.НайтиПоТипу(ТипЗнч(ТаблицаМатериалы)) = Неопределено Тогда
			ЕстьНомГруппа = НЕ Метаданные.НайтиПоТипу(ТипЗнч(ТаблицаМатериалы)).Реквизиты.Найти("НоменклатурнаяГруппа") = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьВводитьСтатьиЗатратПоСтрокам = (МетаданныеДокумента.Реквизиты.Найти("ВводитьСтатьиЗатратПоСтрокам") <> Неопределено);
	Если ЕстьВводитьСтатьиЗатратПоСтрокам 
	   И Не ДокОбъект.ВводитьСтатьиЗатратПоСтрокам Тогда
		ЕстьСтатьяЗатрат = Истина;
	Иначе
		ЕстьСтатьяЗатрат = Ложь;
	КонецЕсли;
	
	ТабЧастьДокумента = ТаблицаМатериалы;
	Если НЕ ТипЗнч(ТаблицаМатериалы) = Тип("ТаблицаЗначений") Тогда
		ТабЧастьДокумента = ТаблицаМатериалы.Выгрузить();
	КонецЕсли;
	ЕстьСчетЗатрат = НЕ ТабЧастьДокумента.Колонки.Найти("СчетЗатрат") = Неопределено;
	ЕстьЗаказНаПроизводство = Не ТабЧастьДокумента.Колонки.Найти("ЗаказНаПроизводство") = Неопределено;
	ЕстьСуммаНал = Не ТабЧастьДокумента.Колонки.Найти("СуммаНал") = Неопределено;
	ЕстьСуммаНДС = НЕ ТабЧастьДокумента.Колонки.Найти("СуммаНДС") = Неопределено;
	ЕстьНалоговоеНазначение = НЕ ТабЧастьДокумента.Колонки.Найти("НалоговоеНазначение") = Неопределено;
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(ДокОбъект.Дата, Ложь);
	Если ЗначениеЗаполнено(УчетнаяПолитика) Тогда
		НеВключатьНДСВЗатраты = УчетнаяПолитика.НеВключатьНДСВЗатраты;
	Иначе
		НеВключатьНДСВЗатраты = Истина;
	КонецЕсли;
	
	
	Запрос = СформироватьЗапросПоОстаткамНезавершенногоПроизводства(
		ДокОбъект,
		МетаданныеДокумента,
		Истина, // МатериальныеЗатраты
		ИсключатьУслуги,
		ИсключатьДавальческоеСырье,
		ТолькоОтрицательныеОстатки,
		ТолькоВозвратныеОтходы,
		ЕстьЗаказ,
		ЕстьСтатьяЗатрат
	);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	ЕстьРасчетСебестоимостиВыпуска = Ложь;
	
	ОбходПоЗатратам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоЗатратам.Следующий() Цикл
		
		Если Не ЕстьРасчетСебестоимостиВыпуска Тогда
			ЕстьРасчетСебестоимостиВыпуска = ОбходПоЗатратам.ЕстьРасчетСебестоимостиВыпуска;
		КонецЕсли;
		
		ОбходПоХарактеристикам = ОбходПоЗатратам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоХарактеристикам.Следующий() Цикл
			ОбходПоСериям = ОбходПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоСериям.Следующий() Цикл
				ОбходПоСтатьямЗатрат = ОбходПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ОбходПоСтатьямЗатрат.Следующий() Цикл
					ОбходПоНомГруппам = ОбходПоСтатьямЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ОбходПоНомГруппам.Следующий() Цикл
						ОбходПоЗаказам = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ОбходПоЗаказам.Следующий() Цикл
							ОбходПоЕдИзм = ОбходПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ОбходПоЕдИзм.Следующий() Цикл
								ОбходПоКоэф = ОбходПоЕдИзм.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								Пока ОбходПоКоэф.Следующий() Цикл
									
									
									ВсегоКоличество = ОбходПоКоэф.Количество;
									ВсегоСумма = ОбходПоКоэф.Сумма;
									
									ОбходПоСчету = ОбходПоКоэф.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
									Пока ОбходПоСчету.Следующий() Цикл
										
										ВсегоКоличествоБух = ОбходПоСчету.КоличествоБух;
										ВсегоСуммаБух = ОбходПоСчету.СуммаБух;
										Курс = ?(ВсегоСумма <> 0, ВсегоСуммаБух / ВсегоСумма, 0);
										
										ВсегоСуммаНал = ОбходПоСчету.СуммаНал;
										
										Обход = ОбходПоСчету.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
										
										Пока Обход.Следующий() Цикл
											
											Если ОтражатьВБухгалтерскомУчете Тогда
												ТекКоличество = Обход.КоличествоБух;
											Иначе
												ТекКоличество = Обход.Количество;
											КонецЕсли;
											
											Если ТекКоличество <= 0 Тогда
												Продолжить;
											КонецЕсли;
											
											ТекСумма    = Окр(?(ВсегоКоличество <> 0, ТекКоличество * ВсегоСумма / ВсегоКоличество, 0), 2, 1);
											ТекСуммаБух = Окр(?(ВсегоКоличествоБух <> 0, ТекКоличество * ВсегоСуммаБух / ВсегоКоличествоБух, 0), 2, 1);
											ТекСуммаНал = Окр(?(ВсегоКоличествоБух <> 0, ТекКоличество * ВсегоСуммаНал / ВсегоКоличествоБух, 0), 2, 1);
											
											Если ТекСуммаБух > ВсегоСуммаБух Тогда
												ТекСуммаБух = ВсегоСуммаБух;
											КонецЕсли;
											Если ТекСуммаНал > ВсегоСуммаНал Тогда
												ТекСуммаНал = ВсегоСуммаНал;
											КонецЕсли;
											
											ВсегоСуммаБух = ВсегоСуммаБух - ТекСуммаБух;
											ВсегоСуммаНал = ВсегоСуммаНал - ТекСуммаНал;
													
											ТекСумма      = ?(Курс <> 0, Окр(ТекСуммаБух / Курс, 2, 1), ВсегоСумма);
											Если ТекСумма > ВсегоСумма Тогда
												ТекСумма = ВсегоСумма;
											КонецЕсли;
											ВсегоСумма    = ВсегоСумма - ТекСумма;
											
											ВсегоКоличество = ВсегоКоличество - ТекКоличество;
											ВсегоКоличествоБух = ВсегоКоличествоБух - ТекКоличество;
		
											Если ТекКоличество = 0 Тогда
												Продолжить;
											КонецЕсли;
																					
											НоваяСтрока = ТаблицаМатериалы.Добавить();
											ЗаполнитьЗначенияСвойств(НоваяСтрока, Обход);
											
											
											Если ЕстьЕдиницаИзмеренияМест Тогда
												ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ДокОбъект, Ложь);
											КонецЕсли;
											
											НоваяСтрока.Количество 				   = ТекКоличество;
											
											Если ЕстьСумма Тогда
												НоваяСтрока.Сумма   			   = ТекСумма;
												НоваяСтрока.СуммаРегл 			   = ТекСуммаБух;
												
												Если ОтражатьВУправленческомУчете Тогда
													НоваяСтрока.Цена				   = ?(НоваяСтрока.Количество <> 0, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
												Иначе
													НоваяСтрока.Цена				   = ?(НоваяСтрока.Количество <> 0, НоваяСтрока.СуммаРегл / НоваяСтрока.Количество, 0);
												КонецЕсли;
												
											КонецЕсли;
											
											Если ЕстьСуммаНал Тогда
												НоваяСтрока.СуммаНал 			   = ТекСуммаНал;
											КонецЕсли;
											
										КонецЦикла; // по детальным записям
										
										Если ОтражатьВБухгалтерскомУчете И ВсегоКоличествоБух > 0 Тогда
											
											ТекСумма = Окр(?(ВсегоКоличество <> 0, ВсегоКоличествоБух * ВсегоСумма / ВсегоКоличество, 0), 2, 1);
											
											ВсегоКоличество = ВсегоКоличество - ВсегоКоличествоБух;
											ВсегоСумма = ВсегоСумма - ТекСумма;
										
											НоваяСтрока = ТаблицаМатериалы.Добавить();
											ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбходПоСчету);
											Если ЕстьЕдиницаИзмеренияМест Тогда
												ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ДокОбъект, Ложь);
											КонецЕсли;
											НоваяСтрока.Количество 				   = ВсегоКоличествоБух;
											Если ЕстьСумма Тогда
												НоваяСтрока.Сумма   			   = ТекСумма;
												НоваяСтрока.СуммаРегл 			   = ВсегоСуммаБух;
												
												Если ОтражатьВУправленческомУчете Тогда
													НоваяСтрока.Цена			   = ?(НоваяСтрока.Количество <> 0, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
												Иначе
													НоваяСтрока.Цена			   = ?(НоваяСтрока.Количество <> 0, НоваяСтрока.СуммаРегл / НоваяСтрока.Количество, 0);
												КонецЕсли;
											КонецЕсли;
											
										КонецЕсли;
										
									КонецЦикла; // по счетам учета
									
									Если ОтражатьВУправленческомУчете И ВсегоКоличество > 0 Тогда
											
										НоваяСтрока = ТаблицаМатериалы.Добавить();
										ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбходПоКоэф);
										Если ЕстьЕдиницаИзмеренияМест Тогда
											ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ДокОбъект, Ложь);
										КонецЕсли;
										НоваяСтрока.Количество 				   = ВсегоКоличество;
										Если ЕстьСумма Тогда
											НоваяСтрока.Сумма   			   = ВсегоСумма;
											НоваяСтрока.Цена				   = ?(НоваяСтрока.Количество <> 0, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
										КонецЕсли;
										
										Если ОтражатьВБухгалтерскомУчете Тогда
										
											Если ЕстьСумма Тогда
												НоваяСтрока.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(
													НоваяСтрока.Сумма, 
													ВалютаРегламентированногоУчета, 
													ВалютаУправленческогоУчета, 
													ДокОбъект.Дата
												);
											КонецЕсли;
											
											Если ЕстьСуммаНал Тогда
												НоваяСтрока.СуммаНал = НоваяСтрока.СуммаРегл;
											КонецЕсли;
										
											Если ЕстьСчетЗатрат Тогда
												УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(
													НоваяСтрока, 
													ДокОбъект.ПодразделениеОрганизации, 
													НоваяСтрока.СтатьяЗатрат
												);
											КонецЕсли;
											
										КонецЕсли;
										
									КонецЕсли;
									
								КонецЦикла; // по коэф.
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ЕстьРасчетСебестоимостиВыпуска Тогда
		ОбщегоНазначения.Сообщение("За текущий месяц проведен документ ""Расчет себестоимости выпуска"".
			|Заполнение по остаткам может быть выполнено неправильно!", СтатусСообщения.Внимание);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьМатериалыПоОстаткамНЗП()

// Процедура формирует таблицу остатков нематериальных затрат в незавершенном производстве.
Процедура ЗаполнитьПрочиеЗатратыПоОстаткамНЗП(ДокОбъект, ТаблицаПрочиеЗатраты, ДопПараметры = Неопределено) Экспорт
	
	ОтражатьВУправленческомУчете = ДокОбъект.ОтражатьВУправленческомУчете;
	ОтражатьВБухгалтерскомУчете  = ДокОбъект.ОтражатьВБухгалтерскомУчете;
	
	Если НЕ ОтражатьВУправленческомУчете
	   И НЕ ОтражатьВБухгалтерскомУчете Тогда
		ОбщегоНазначения.Сообщение("Документ не отражается ни в одном виде учета!" + Символы.ПС + "Заполнение не может быть выполнено!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокОбъект.Метаданные();
	ЕстьДатаОкончанияПериода = (МетаданныеДокумента.Реквизиты.Найти("ДатаОкончанияПериода") <> Неопределено);
	ЕстьЗаказ = (МетаданныеДокумента.Реквизиты.Найти("Заказ") <> Неопределено);
	Если ЕстьЗаказ Тогда 
		Если НЕ ЗначениеЗаполнено(ДокОбъект.Заказ)  Тогда
			ЕстьЗаказ = Ложь;
		ИначеЕсли ТипЗнч(ДокОбъект.Заказ)<>Тип("ДокументСсылка.ЗаказПокупателя") И
			ТипЗнч(ДокОбъект.Заказ)<>Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			ЕстьЗаказ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// В этой процедуре заполняем, если характер - "ПроизводственныеРасходы"
	// Если не требуется заполнять производственными расходами,
	// то прерываем выполнение процедуры.
	Если НЕ ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("ХарЗатрат") Тогда
			ХарактерЗатрат = ДопПараметры.ХарЗатрат;
			
			Если ТипЗнч(ХарактерЗатрат) = Тип("Массив") Тогда
				// В качестве ХарактерЗатрат может быть передан массив.
				// Заполнение выполняем, только если массив содержит характер затрат ПроизводственныеРасходы
				Если ХарактерЗатрат.Найти(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы) = Неопределено Тогда
					Возврат;
				КонецЕсли;
			ИначеЕсли ХарактерЗатрат <> Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда 
				// Передан не массив и не ПроизводственныеРасходы
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ЕстьСчетЗатрат          = НЕ ТаблицаПрочиеЗатраты.Колонки.Найти("СчетЗатрат") = Неопределено;
	ЕстьНалоговоеНазначение = НЕ ТаблицаПрочиеЗатраты.Колонки.Найти("НалоговоеНазначение") = Неопределено;
	ЕстьСуммаРегл           = НЕ ТаблицаПрочиеЗатраты.Колонки.Найти("СуммаРегл") = Неопределено;
	ЕстьСуммаНал            = НЕ ТаблицаПрочиеЗатраты.Колонки.Найти("СуммаНал") = Неопределено;
	ЕстьСуммаНДС            = НЕ ТаблицаПрочиеЗатраты.Колонки.Найти("СуммаНДС") = Неопределено;
	
	ЕстьНалоговоеНазначениеДоходовИЗатрат = НЕ ТаблицаПрочиеЗатраты.Колонки.Найти("НалоговоеНазначениеДоходовИЗатрат") = Неопределено;
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(ДокОбъект.Дата, Ложь);
	Если ЗначениеЗаполнено(УчетнаяПолитика) Тогда
		НеВключатьНДСВЗатраты = УчетнаяПолитика.НеВключатьНДСВЗатраты;
	Иначе
		НеВключатьНДСВЗатраты = Истина;
	КонецЕсли;

	Запрос = СформироватьЗапросПоОстаткамНезавершенногоПроизводства(
		ДокОбъект,
		МетаданныеДокумента,
		Ложь, // МатериальныеЗатраты
		Ложь, // ИсключатьУслуги,
		Ложь, // ИсключатьДавальческоеСырье,
		Ложь, // ТолькоОтрицательныеОстатки,
		Ложь, // ТолькоВозвратныеОтходы,
		ЕстьЗаказ,
		Ложь // ЕстьСтатьяЗатрат
	);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРасчетСебестоимостиВыпуска = Ложь;
	
	ОбходПоЗатратам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоЗатратам.Следующий() Цикл
		
		Если Не ЕстьРасчетСебестоимостиВыпуска Тогда
			ЕстьРасчетСебестоимостиВыпуска = ОбходПоЗатратам.ЕстьРасчетСебестоимостиВыпуска;
		КонецЕсли;
		
		ОбходПоСтатьямЗатрат = ОбходПоЗатратам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоСтатьямЗатрат.Следующий() Цикл
			ОбходПоНомГруппам = ОбходПоСтатьямЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоНомГруппам.Следующий() Цикл
				ОбходПоЗаказам = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ОбходПоЗаказам.Следующий() Цикл
									
					ВсегоСумма 		= ?(ОбходПоЗаказам.Сумма = NULL, 0, ОбходПоЗаказам.Сумма);
					ВсегоСуммаРегл 	= ?(ОбходПоЗаказам.СуммаБух = NULL, 0, ОбходПоЗаказам.СуммаБух);
					Курс = ?(ВсегоСумма <> 0, ВсегоСуммаРегл / ВсегоСумма, 0);
					
					ОбходПоСчету = ОбходПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ОбходПоСчету.Следующий() Цикл
						
						Если (НЕ ЗначениеЗаполнено(ОбходПоСчету.СчетЗатрат)) И (НЕ ЗначениеЗаполнено(ОбходПоСчету.НалоговоеНазначение)) Тогда	
							Продолжить;
						КонецЕсли;
						
						ВсегоСуммаБух = ?(ОбходПоСчету.СуммаБух = NULL, 0, ОбходПоСчету.СуммаБух);
						ВсегоСуммаНал = ?(ОбходПоСчету.СуммаНал = NULL, 0, ОбходПоСчету.СуммаНал);
						ВсегоСуммаНДС = ?(ОбходПоСчету.СуммаНДС = NULL, 0, ОбходПоСчету.СуммаНДС);
						ВсегоСуммаНДСКредит = ?(ОбходПоСчету.СуммаНДСКредит = NULL, 0, ОбходПоСчету.СуммаНДСКредит);
					
						Обход = ОбходПоСчету.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока Обход.Следующий() Цикл
											
							ТекСумма    = 0;
							ТекСуммаБух = 0;
							ТекСуммаНал = 0;
							ТекСуммаНДС = 0;
							ТекСуммаНДСКредит = 0;
							
							
							ТекСуммаБух       = Обход.СуммаБух;
							ТекСуммаНал       = Обход.СуммаНал;
							ТекСуммаНДС       = Обход.СуммаНДС;
							ТекСуммаНДСКредит = Обход.СуммаНДСКредит;
							
							Если ТекСуммаБух > ВсегоСуммаБух Тогда
								ТекСуммаБух = ВсегоСуммаБух;
							КонецЕсли;
							Если ТекСуммаНал > ВсегоСуммаНал Тогда
								ТекСуммаНал = ВсегоСуммаНал;
							КонецЕсли;
							Если ТекСуммаНДС > ВсегоСуммаНДС Тогда
								ТекСуммаНДС = ВсегоСуммаНДС;
							КонецЕсли;
							Если ТекСуммаНДСКредит > ВсегоСуммаНДСКредит Тогда
								ТекСуммаНДСКредит = ВсегоСуммаНДСКредит;
							КонецЕсли;
							
							ВсегоСуммаБух       = ВсегоСуммаБух - ТекСуммаБух;
							ВсегоСуммаНал       = ВсегоСуммаНал - ТекСуммаНал;
							ВсегоСуммаНДС       = ВсегоСуммаНДС - ТекСуммаНДС;
							ВсегоСуммаНДСКредит = ВсегоСуммаНДСКредит - ТекСуммаНДСКредит;
							
							
							ТекСумма = ?(Курс <> 0, Окр(ТекСуммаБух / Курс, 2, 1), 0);
							
							Если ТекСумма > ВсегоСумма Тогда
								ТекСумма = ВсегоСумма;
							КонецЕсли;
							ВсегоСумма    = ВсегоСумма - ТекСумма;
									
							Если ТекСумма = 0 И ТекСуммаБух = 0 И ТекСуммаНал = 0 И ТекСуммаНДС = 0 И ТекСуммаНДСКредит = 0 Тогда	
								Продолжить;
							КонецЕсли;
											
							НоваяСтрока = ТаблицаПрочиеЗатраты.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Обход);
							
							Если ТипЗнч(Обход.Номенклатура) = Тип("СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск") Тогда
								НоваяСтрока.СпособРаспределенияЗатратНаВыпуск = Обход.Номенклатура;
							КонецЕсли;
								
							Если ЕстьСуммаРегл И ОтражатьВБухгалтерскомУчете Тогда
								НоваяСтрока.СуммаРегл = ТекСуммаБух;
							КонецЕсли;
							Если ОтражатьВУправленческомУчете Тогда
								НоваяСтрока.Сумма = ТекСумма;
							КонецЕсли;
							
							Если ОтражатьВБухгалтерскомУчете
							   И ЕстьСчетЗатрат
							   И Не ЗначениеЗаполнено(НоваяСтрока.СчетЗатрат)
							Тогда
								УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(НоваяСтрока, ДокОбъект.ПодразделениеОрганизации, НоваяСтрока.СтатьяЗатрат);
							КонецЕсли;
								
							Если ЕстьСуммаНал Тогда
								НоваяСтрока.СуммаНал = ТекСуммаНал;
							КонецЕсли;
							
							Если ЕстьСуммаНДС Тогда
							    НоваяСтрока.СуммаНДС       = ТекСуммаНДС;
								НоваяСтрока.СуммаНДСКредит = ТекСуммаНДСКредит;
							КонецЕсли; 
							
							Если ЕстьНалоговоеНазначение Тогда
								НоваяСтрока.НалоговоеНазначение = Обход.НалоговоеНазначение;
							КонецЕсли; 
							
							Если ЕстьНалоговоеНазначениеДоходовИЗатрат Тогда
								НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = Обход.НалоговоеНазначение;
							КонецЕсли; 

															
						КонецЦикла; // по детальным записям
						
						Если ОтражатьВБухгалтерскомУчете И (ВсегоСуммаБух > 0 ИЛИ ВсегоСуммаНал > 0 ИЛИ ВсегоСуммаНДС > 0 ИЛИ ВсегоСуммаНДСКредит > 0) Тогда	
								
							НоваяСтрока = ТаблицаПрочиеЗатраты.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбходПоСчету);
							
							Если ТипЗнч(ОбходПоСчету.Номенклатура) = Тип("СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск") Тогда
								НоваяСтрока.СпособРаспределенияЗатратНаВыпуск = ОбходПоСчету.Номенклатура;
							КонецЕсли;
							
							Если ЕстьСуммаРегл Тогда
								НоваяСтрока.СуммаРегл = ВсегоСуммаБух;
							КонецЕсли;
							Если ЕстьСуммаНал Тогда
								НоваяСтрока.СуммаНал = ВсегоСуммаНал;
							КонецЕсли;
							Если ЕстьСуммаНДС Тогда
							    НоваяСтрока.СуммаНДС       = ВсегоСуммаНДС;
								НоваяСтрока.СуммаНДСКредит = ВсегоСуммаНДСКредит;
							КонецЕсли; 
							
								
						КонецЕсли;
						
								
					КонецЦикла; // по счетам учета
					
					Если ОтражатьВУправленческомУчете И ВсегоСумма > 0 Тогда
							
						НоваяСтрока = ТаблицаПрочиеЗатраты.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбходПоЗаказам);
						
						Если ТипЗнч(ОбходПоЗатратам.Номенклатура) = Тип("СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск") Тогда
							НоваяСтрока.СпособРаспределенияЗатратНаВыпуск = ОбходПоЗаказам.Номенклатура;
						КонецЕсли;
						
						НоваяСтрока.Сумма = ВсегоСумма;
						Если ЕстьСуммаРегл Тогда
							НоваяСтрока.СуммаРегл = 0;
						КонецЕсли;
						Если ЕстьСуммаНал Тогда
							НоваяСтрока.СуммаНал = 0;
						КонецЕсли;
						Если ЕстьСуммаНДС Тогда
						    НоваяСтрока.СуммаНДС       = 0;
							НоваяСтрока.СуммаНДСКредит = 0;
						КонецЕсли; 
						
						Если ОтражатьВБухгалтерскомУчете И ЕстьСчетЗатрат Тогда
							УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(НоваяСтрока, ДокОбъект.ПодразделениеОрганизации, НоваяСтрока.СтатьяЗатрат);
						КонецЕсли;
						
						
					КонецЕсли;
						
				КонецЦикла; // по затрате
			КонецЦикла; // по номенклатурной группе
		КонецЦикла; // по заказам
	КонецЦикла; // по статье затрат
	
	Если ЕстьРасчетСебестоимостиВыпуска Тогда
		ОбщегоНазначения.Сообщение("За текущий месяц проведен документ ""Расчет себестоимости выпуска"".
			|Заполнение по остаткам может быть выполнено неправильно!", СтатусСообщения.Внимание);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПрочиеЗатратыПоОстаткамНЗП()

// Процедура формирует таблицу остатков нематериальных затрат в затратах.
Процедура ЗаполнитьПрочиеЗатратыПоОстаткамЗатрат(ДокОбъект, ТаблицаПрочиеЗатраты, ДопПараметры = Неопределено) Экспорт
	
		
	УпрУчет = ДокОбъект.ОтражатьВУправленческомУчете;
	БухУчет = ДокОбъект.ОтражатьВБухгалтерскомУчете;
	Если НЕ (УпрУчет ИЛИ БухУчет) Тогда	
		Возврат;
	КонецЕсли;
	
	МетаДок = ДокОбъект.Метаданные();
	Если МетаДок.Реквизиты.Найти("Заказ") = Неопределено Тогда
		УслПоЗаказу = "";
	Иначе
		Заказ = ДокОбъект.Заказ;
		УслПоЗаказу = ?(НЕ ЗначениеЗаполнено(Заказ), "", " И Заказ = &Заказ");
	КонецЕсли;
	
	УслПоХарЗатрат  = "";
	МассивХарЗатрат = Неопределено;
	МассивСчетаЗатрат_БУ = Неопределено;
	ЕстьЗаполнениеПоОстаткам = Истина;   	
	Если НЕ ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("ХарЗатрат") Тогда
			УслПоСчетуЗатратБУ  = " И СчетУчета В ИЕРАРХИИ(&СчетаЗатратБУ) ";
			УслПоХарЗатрат  = " И СтатьяЗатрат.ХарактерЗатрат В(&ХарЗатрат) ";
			
			МассивХарЗатрат = ДопПараметры["ХарЗатрат"];
			МассивСчетаЗатрат_БУ = Новый Массив;
			
			Для каждого ТекЭлемент из МассивХарЗатрат Цикл
				Если ТекЭлемент = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
					МассивСчетаЗатрат_БУ.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
					
				ИначеЕсли ТекЭлемент = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
					МассивСчетаЗатрат_БУ.Добавить(ПланыСчетов.Хозрасчетный.ИзготовлениеОсновныхСредств);
					МассивСчетаЗатрат_БУ.Добавить(ПланыСчетов.Хозрасчетный.ИзготовлениеДругихНеоборотныхМатериальныхАктивов);
					
					
				ИначеЕсли ТекЭлемент = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы Тогда
				  	МассивСчетаЗатрат_БУ.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельностиГруппа);
				ИначеЕсли ТекЭлемент = Перечисления.ХарактерЗатрат.РасходыНаСбыт Тогда
					МассивСчетаЗатрат_БУ.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаСбыт);
					
				ИначеЕсли ТекЭлемент = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
					МассивСчетаЗатрат_БУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
				ИначеЕсли ТекЭлемент = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
					МассивСчетаЗатрат_БУ.Добавить(ПланыСчетов.Хозрасчетный.АдминистративныеРасходы);
				КонецЕсли;	
			КонецЦикла;
			Если МассивСчетаЗатрат_БУ.Количество() = 0 Тогда
				ЕстьЗаполнениеПоОстаткам = Ложь;
			КонецЕсли; 		
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ДокОбъект.Дата);
		
	Если ИспользоватьРасширеннуюАналитику
	   И ЕстьЗаполнениеПоОстаткам
	Тогда
		#Если Клиент Тогда
		Предупреждение("Заполнение не производственных затрат по остаткам не поддерживается при использовании расширенной аналитики учета затрат!");
		#КонецЕсли
		Возврат;
	КонецЕсли; 	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗапросОстаткиЗатрат.Подразделение        	КАК Подразделение,
	|	ЗапросОстаткиЗатрат.СтатьяЗатрат         	КАК СтатьяЗатрат,
	|	ЗапросОстаткиЗатрат.НоменклатурнаяГруппа 	КАК НоменклатурнаяГруппа,
	|	ЗапросОстаткиЗатрат.Заказ                	КАК Заказ,
	|	ЗапросОстаткиЗатрат.Проект               	КАК Проект,
	|	ЗапросОстаткиЗатрат.Продукция            	КАК Продукция,
	|	ЗапросОстаткиЗатрат.ХарактеристикаПродукции	КАК ХарактеристикаПродукции,
	|	ЗапросОстаткиЗатрат.СерияПродукции          КАК СерияПродукции,
	|	ЗапросОстаткиЗатрат.СчетЗатрат             	КАК СчетЗатрат,
	|	ЗапросОстаткиЗатрат.НалоговоеНазначение     КАК НалоговоеНазначение,
	|	СУММА(ЗапросОстаткиЗатрат.СуммаБух) 	    КАК СуммаБух,
	|	СУММА(ЗапросОстаткиЗатрат.СуммаНал)         КАК СуммаНал,
	|	СУММА(ЗапросОстаткиЗатрат.СуммаНДС)         КАК СуммаНДС,
	|	СУММА(ЗапросОстаткиЗатрат.СуммаНДСКредит)   КАК СуммаНДСКредит,
	|	СУММА(ЗапросОстаткиЗатрат.Сумма)         	КАК Сумма
	|ИЗ (
	|";
	
	Если УпрУчет Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	РегЗатратыУпр.Подразделение        КАК Подразделение,
		|	РегЗатратыУпр.СтатьяЗатрат         КАК СтатьяЗатрат,
		|	РегЗатратыУпр.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	РегЗатратыУпр.Заказ                КАК Заказ,
		|	РегЗатратыУпр.Проект               КАК Проект,
		|	NULL                               КАК Продукция,
		|	NULL                               КАК ХарактеристикаПродукции,
		|	NULL                               КАК СерияПродукции,
		|	3                                  КАК ИндексУчета,
		|	Неопределено                       КАК СчетЗатрат,
		|	Неопределено                       КАК НалоговоеНазначение,
		|	0                                  КАК СуммаБух,
		|	0                                  КАК СуммаНал,
		|	0                                  КАК СуммаНДС,
		|	0                                  КАК СуммаНДСКредит,
		|	РегЗатратыУпр.СуммаОстаток         КАК Сумма
		|ИЗ
		|	РегистрНакопления.Затраты.Остатки(
		|		&КонДата,
		|		Подразделение = &Подр " + УслПоЗаказу + УслПоХарЗатрат + "
		|		) КАК РегЗатратыУпр
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РегБракУпр.Подразделение,
		|	РегБракУпр.СтатьяЗатрат,
		|	РегБракУпр.НоменклатурнаяГруппа,
		|	РегБракУпр.Заказ,
		|	NULL,
		|	РегБракУпр.Продукция,
		|	РегБракУпр.ХарактеристикаПродукции,
		|	РегБракУпр.СерияПродукции,
		|	3                                  КАК ИндексУчета,
		|	Неопределено, // СчетЗатрат
		|	Неопределено, // НалоговоеНазначение
		|	0, // СуммаБух 
		|	0, // СуммаНал
		|	0, // СуммаНДС
		|	0                                  КАК СуммаНДСКредит,
		|	РегБракУпр.СуммаОстаток // Сумма
		|ИЗ
		|	РегистрНакопления.БракВПроизводстве.Остатки(
		|		&КонДата,
		|		Подразделение = &Подр " + УслПоЗаказу + УслПоХарЗатрат + "
		|		) КАК РегБракУпр
		|";
	КонецЕсли;
	
	Если УпрУчет И БухУчет Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|
			|	ОБЪЕДИНИТЬ ВСЕ 
			|";
	КонецЕсли;
	
	Если БухУчет Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	РегЗатратыБух.Подразделение        КАК Подразделение,
		|	РегЗатратыБух.СтатьяЗатрат         КАК СтатьяЗатрат,
		|	РегЗатратыБух.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	РегЗатратыБух.Заказ                КАК Заказ,
		|	NULL							   КАК Проект,
		|	NULL                               КАК Продукция,
		|	NULL                               КАК ХарактеристикаПродукции,
		|	NULL                               КАК СерияПродукции,
		|	2                                  КАК ИндексУчета,
		|	РегЗатратыБух.СчетУчета            КАК СчетЗатрат,
		|	РегЗатратыБух.НалоговоеНазначение  КАК НалоговоеНазначение,
		|	РегЗатратыБух.СуммаОстаток         КАК СуммаБух,
		|	РегЗатратыБух.СуммаНУОстаток       КАК СуммаНал,
		|	РегЗатратыБух.НДСВходящийОстаток   КАК СуммаНДС,
		|	РегЗатратыБух.НДСКредитОстаток     КАК СуммаНДСКредит,
		|	0                                  КАК Сумма
		|ИЗ
		|	РегистрНакопления.ЗатратыБухгалтерскийУчет.Остатки(
		|		&КонДата,
		|		Подразделение = &ПодрОрг " + УслПоЗаказу + УслПоСчетуЗатратБУ + "
		|		) КАК РегЗатратыБух
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РегБракБух.Подразделение,
		|	РегБракБух.СтатьяЗатрат,
		|	РегБракБух.НоменклатурнаяГруппа,
		|	РегБракБух.Заказ,
		|	NULL,
		|	РегБракБух.Продукция,
		|	РегБракБух.ХарактеристикаПродукции,
		|	РегБракБух.СерияПродукции,
		|	2                                  КАК ИндексУчета,
		|	РегБракБух.СчетУчета,
		|	РегБракБух.НалоговоеНазначение     КАК НалоговоеНазначение,
		|	РегБракБух.СуммаОстаток            КАК СуммаБух,
		|	РегБракБух.СуммаНУОстаток          КАК СуммаНал,
		|	РегБракБух.НДСВходящийОстаток      КАК СуммаНДС,
		|	РегБракБух.НДСКредитОстаток        КАК СуммаНДСКредит,
		|	0                                  КАК Сумма
		|ИЗ
		|	РегистрНакопления.БракВПроизводствеБухгалтерскийУчет.Остатки(
		|		&КонДата,
		|		Подразделение = &ПодрОрг " + УслПоЗаказу + УслПоСчетуЗатратБУ + "
		|		) КАК РегБракБух
		|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|) КАК ЗапросОстаткиЗатрат
	|
	|
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапросОстаткиЗатрат.Подразделение,
	|	ЗапросОстаткиЗатрат.СтатьяЗатрат,
	|	ЗапросОстаткиЗатрат.НоменклатурнаяГруппа,
	|	ЗапросОстаткиЗатрат.Заказ,
	|	ЗапросОстаткиЗатрат.Проект,
	|	ЗапросОстаткиЗатрат.Продукция,
	|	ЗапросОстаткиЗатрат.ХарактеристикаПродукции,
	|	ЗапросОстаткиЗатрат.СерияПродукции,
	|	ЗапросОстаткиЗатрат.СчетЗатрат,
	|	ЗапросОстаткиЗатрат.НалоговоеНазначение,
	|	ЗапросОстаткиЗатрат.ИндексУчета
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ЗапросОстаткиЗатрат.ИндексУчета,
	|	СтатьяЗатрат,
	|	НоменклатурнаяГруппа,
	|	Заказ,
	|	Продукция,
	|	ХарактеристикаПродукции,
	|	СерияПродукции
	|
	|ИТОГИ
	|	СУММА(СуммаБух),
	|	СУММА(СуммаНал),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаНДСКредит),
	|	СУММА(Сумма)
	|ПО
	|	ЗапросОстаткиЗатрат.СтатьяЗатрат,
	|	ЗапросОстаткиЗатрат.НоменклатурнаяГруппа,
	|	ЗапросОстаткиЗатрат.Заказ,
	|	ЗапросОстаткиЗатрат.Продукция,
	|	ЗапросОстаткиЗатрат.ХарактеристикаПродукции,
	|	ЗапросОстаткиЗатрат.СерияПродукции,
	|	ЗапросОстаткиЗатрат.СчетЗатрат
	|";
	
	Запрос = Новый Запрос;
	Дата = УправлениеЗатратами.ПолучитьДатуДляЗапроса(ДокОбъект);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",      Новый Граница(Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Подр",         ДокОбъект.Подразделение);
	Запрос.УстановитьПараметр("ПодрОрг", 	  ДокОбъект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Заказ",        ?(НЕ ЗначениеЗаполнено(Заказ), Неопределено, Заказ));
	Запрос.УстановитьПараметр("ХарЗатрат",    МассивХарЗатрат);
	Запрос.УстановитьПараметр("СчетаЗатратБУ",МассивСчетаЗатрат_БУ);
	Запрос.УстановитьПараметр("ТекДок",       ДокОбъект.Ссылка);

	МассивКодовОпераций = Новый Массив;
	МассивКодовОпераций.Добавить( Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	Запрос.УстановитьПараметр( "КодыОпераций", МассивКодовОпераций);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьСчетЗатрат = НЕ ТаблицаПрочиеЗатраты.Колонки.Найти("СчетЗатрат") = Неопределено;
	ЕстьСуммаРегл  = НЕ ТаблицаПрочиеЗатраты.Колонки.Найти("СуммаРегл") = Неопределено;
	ЕстьСуммаНал   = НЕ ТаблицаПрочиеЗатраты.Колонки.Найти("СуммаНал") = Неопределено;
	ЕстьСуммаНДС   = НЕ ТаблицаПрочиеЗатраты.Колонки.Найти("СуммаНДС") = Неопределено;
	ЕстьНалоговоеНазначение = НЕ ТаблицаПрочиеЗатраты.Колонки.Найти("НалоговоеНазначениеДоходовИЗатрат") = Неопределено;
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата, Ложь);
	Если ЗначениеЗаполнено(УчетнаяПолитика) Тогда
		НеВключатьНДСВЗатраты = УчетнаяПолитика.НеВключатьНДСВЗатраты;
	Иначе
		НеВключатьНДСВЗатраты = Истина;
	КонецЕсли;
	
	ОбходПоСтатьям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоСтатьям.Следующий() Цикл
	  ОбходПоГруппам = ОбходПоСтатьям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	  Пока ОбходПоГруппам.Следующий() Цикл
		ОбходПоЗаказам = ОбходПоГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоЗаказам.Следующий() Цикл
		  ОбходПоПродукции = ОбходПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		  Пока ОбходПоПродукции.Следующий() Цикл
			ОбходПоХарПрод = ОбходПоПродукции.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоХарПрод.Следующий() Цикл
			  ОбходПоСерПрод = ОбходПоХарПрод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			  Пока ОбходПоСерПрод.Следующий() Цикл
				  
				ВсегоСумма 		= ?(ОбходПоСерПрод.Сумма    = NULL, 0, ОбходПоСерПрод.Сумма);
				ВсегоСуммаБух   = ?(ОбходПоСерПрод.СуммаБух = NULL, 0, ОбходПоСерПрод.СуммаБух);
				
				
				Курс = ?(ВсегоСумма <> 0, ВсегоСуммаБух / ВсегоСумма, 0);
				
				ОбходПоСчету = ОбходПоСерПрод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ОбходПоСчету.Следующий() Цикл
					
				 	Если НЕ ЗначениеЗаполнено(ОбходПоСчету.СчетЗатрат) Тогда
						Продолжить;
					КонецЕсли;
					
					ВсегоСуммаБух = ?(ОбходПоСчету.СуммаБух = NULL, 0, ОбходПоСчету.СуммаБух);
					ВсегоСуммаНал = ?(ОбходПоСчету.СуммаНал = NULL, 0, ОбходПоСчету.СуммаНал);
					ВсегоСуммаНДС = ?(ОбходПоСчету.СуммаНДС = NULL, 0, ОбходПоСчету.СуммаНДС);
					ВсегоСуммаНДСКредит = ?(ОбходПоСчету.СуммаНДСКредит = NULL, 0, ОбходПоСчету.СуммаНДСКредит);
					
					Обход = ОбходПоСчету.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока Обход.Следующий() Цикл
						
						ТекСуммаБух       = Обход.СуммаБух;
						ТекСуммаНал       = Обход.СуммаНал;
						ТекСуммаНДС       = Обход.СуммаНДС;
						ТекСуммаНДСКредит = Обход.СуммаНДСКредит;
						
						Если ТекСуммаБух > ВсегоСуммаБух Тогда
							ТекСуммаБух = ВсегоСуммаБух;
						КонецЕсли;
						Если ТекСуммаНал > ВсегоСуммаНал Тогда
							ТекСуммаНал = ВсегоСуммаНал;
						КонецЕсли;
						Если ТекСуммаНДС > ВсегоСуммаНДС Тогда
							ТекСуммаНДС = ВсегоСуммаНДС;
						КонецЕсли;
						Если ТекСуммаНДСКредит > ВсегоСуммаНДСКредит Тогда
							ТекСуммаНДСКредит = ВсегоСуммаНДСКредит;
						КонецЕсли;
						
						ВсегоСуммаБух       = ВсегоСуммаБух - ТекСуммаБух;
						ВсегоСуммаНал       = ВсегоСуммаНал - ТекСуммаНал;
						ВсегоСуммаНДС       = ВсегоСуммаНДС - ТекСуммаНДС;
						ВсегоСуммаНДСКредит = ВсегоСуммаНДСКредит - ТекСуммаНДСКредит;
						
						ТекСумма = ?(Курс <> 0, Окр(ТекСуммаБух / Курс, 2, 1), 0);
						
						Если ТекСумма > ВсегоСумма Тогда
							ТекСумма = ВсегоСумма;
						КонецЕсли;
						ВсегоСумма    = ВсегоСумма - ТекСумма;
								
						Если ТекСумма = 0 И ТекСуммаБух = 0 И ТекСуммаНал = 0 И ТекСуммаНДС = 0 И ТекСуммаНДСКредит = 0 Тогда	
							Продолжить;
						КонецЕсли;
																
						НоваяСтрока = ТаблицаПрочиеЗатраты.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Обход);
						
						Если БухУчет Тогда
							Если ЕстьСуммаРегл Тогда
								НоваяСтрока.СуммаРегл = ТекСуммаБух;
							КонецЕсли;		
							Если ЕстьСуммаНал Тогда
								НоваяСтрока.СуммаНал  = ТекСуммаНал;
							КонецЕсли;		
							Если ЕстьСуммаНДС Тогда
								НоваяСтрока.СуммаНДС       = ТекСуммаНДС;
								НоваяСтрока.СуммаНДСКредит = ТекСуммаНДСКредит;
							КонецЕсли;
							Если ЕстьНалоговоеНазначение Тогда
								НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = Обход.НалоговоеНазначение;
							КонецЕсли;				
						КонецЕсли;
						
						Если УпрУчет Тогда
							НоваяСтрока.Сумма = ТекСумма;
						КонецЕсли;
			    
					КонецЦикла;  // по детальным записям
			
					Если БухУчет И (ВсегоСуммаБух > 0 ИЛИ ВсегоСуммаНал > 0 ИЛИ ВсегоСуммаНДС > 0 ИЛИ ВсегоСуммаНДСКредит > 0) Тогда	
	
							
						НоваяСтрока = ТаблицаПрочиеЗатраты.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбходПоСчету);
						
						Если ЕстьСуммаРегл Тогда
							НоваяСтрока.СуммаРегл = ВсегоСуммаБух;
						КонецЕсли;		
						Если ЕстьСуммаНал Тогда
							НоваяСтрока.СуммаНал  = ВсегоСуммаНал;
						КонецЕсли;		
						Если ЕстьСуммаНДС Тогда
							НоваяСтрока.СуммаНДС       = ВсегоСуммаНДС;
							НоваяСтрока.СуммаНДСКредит = ВсегоСуммаНДСКредит;
						КонецЕсли;
						
						Если ЕстьНалоговоеНазначение Тогда
							НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = ОбходПоСчету.НалоговоеНазначение;
						КонецЕсли;				
						
						
						ТекСумма      = ?(Курс <> 0, Окр(ВсегоСуммаБух / Курс, 2, 1), 0);
						
						Если ТекСумма > ВсегоСумма Тогда
							ТекСумма = ВсегоСумма;
						КонецЕсли;
						ВсегоСумма    = ВсегоСумма - ТекСумма;
						Если УпрУчет Тогда
							НоваяСтрока.Сумма = ТекСумма;
						КонецЕсли;
														
					КонецЕсли;
				
				КонецЦикла;  // по счетам учета
			
				Если УпрУчет И ВсегоСумма > 0 Тогда
							
					НоваяСтрока = ТаблицаПрочиеЗатраты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбходПоСерПрод);
					
					НоваяСтрока.Сумма = ВсегоСумма;
					
					Если БухУчет И ЕстьСчетЗатрат Тогда
						УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(НоваяСтрока, ДокОбъект.ПодразделениеОрганизации, НоваяСтрока.СтатьяЗатрат);
					КонецЕсли;
						
				КонецЕсли;

			  КонецЦикла; // по сериям продукции
			КонецЦикла; // по характеристикам продукции
		  КонецЦикла; // по продукции
		КонецЦикла; // по заказам
	  КонецЦикла; // по ном. группам
	КонецЦикла; // по статьям затрат
	
КонецПроцедуры // ЗаполнитьПрочиеЗатратыПоОстаткамЗатрат()

// Процедура формирует таблицу остатков материалов по данным инвентаризации НЗП.
//
// Параметры:
//	ДокОбъект - ДокументОбъект - Текущий документ
//	ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа
//	ДокИнвентаризация - ДокументСсылка.ИнвентаризацияНЗП - Документ инвентаризации
//  ТолькоОтрицательныеОстатки - Булево - Заполнять только отрицательными остатками
//  ЕстьСумма - Булево - В табличной части есть реквизит "Сумма"
//	
Процедура ЗаполнитьМатериалыПоИнвентаризацииНЗП(
	ДокОбъект, 
	ТабличнаяЧасть, 
	ДокИнвентаризация, 
	ТолькоОтрицательныеОстатки = Ложь,
	ЕстьСумма = Истина
	) Экспорт
	
	ТаблицаМатериалы = ТабличнаяЧасть.Выгрузить();
	
	ЗаполнитьМатериалыПоОстаткамНЗП(
		ДокОбъект, 
		ТаблицаМатериалы, 
		ЕстьСумма,
		Истина, // ЕстьЕдиницаИзмерения
		Ложь // ЕстьЕдиницаИзмеренияМест
	);
	
	ОтражатьВУправленческомУчете = ДокОбъект.ОтражатьВУправленческомУчете;
	ОтражатьВБухгалтерскомУчете  = ДокОбъект.ОтражатьВБухгалтерскомУчете;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокИнв.Номенклатура КАК Номенклатура,
	|	ДокИнв.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ДокИнв.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ДокИнв.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ДокИнв.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	ДокИнв.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ДокИнв.Заказ КАК Заказ,
	|	ДокИнв.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ДокИнв.СчетЗатрат КАК СчетЗатрат,
	|	ДокИнв.НалоговоеНазначение          КАК НалоговоеНазначение,
	|	ДокИнв.Количество КАК КоличествоИнв,
	|	ИСТИНА КАК ЕстьИнвентаризация
	|ИЗ
	|	Документ.ИнвентаризацияНЗП.Материалы КАК ДокИнв
	|
	|ГДЕ
	|	ДокИнв.Ссылка = &ДокИнв
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокИнв.НомерСтроки";
		
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр( "ДокИнв",      ДокИнвентаризация);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаМатериалы.Колонки.Добавить("КоличествоИнв", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаМатериалы.Колонки.Добавить("ЕстьИнвентаризация", Новый ОписаниеТипов("Булево"));
	Если Не ЕстьСумма Тогда
		ТаблицаМатериалы.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаМатериалы.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаМатериалы.Колонки.Добавить("СуммаНал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаМатериалы.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаМатериалы.Колонки.Добавить("СуммаНДСКредит", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	КонецЕсли;	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса, ТаблицаМатериалы);
	
	ЕстьНалоговоеНазначение = НЕ ТаблицаМатериалы.Колонки.Найти("НалоговоеНазначение") = Неопределено;
	СверткаНалоговоеНазначение = ?(ЕстьНалоговоеНазначение, ",НалоговоеНазначение", "");
	
	ТаблицаМатериалы.Свернуть("
		|Номенклатура, 
		|ХарактеристикаНоменклатуры, 
		|СерияНоменклатуры, 
		|ЕдиницаИзмерения, 
		|ЕдиницаИзмеренияМест, 
		|Коэффициент, 
		|НоменклатурнаяГруппа, 
		|Заказ, 
		|СтатьяЗатрат, 
		|СчетЗатрат " + СверткаНалоговоеНазначение + "
		|", 
		"Количество, КоличествоМест, Сумма, СуммаРегл, СуммаНал, СуммаНДС, СуммаНДСКредит, КоличествоИнв, ЕстьИнвентаризация");
	ТаблицаМатериалы.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	КолвоЭлементов = ТаблицаМатериалы.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
   		СтрокаТаблицы = ТаблицаМатериалы[КолвоЭлементов - ОбратныйИндекс];
		
		Если ТолькоОтрицательныеОстатки Тогда
			КоличествоОстаток = СтрокаТаблицы.КоличествоИнв - СтрокаТаблицы.Количество;
		Иначе
			КоличествоОстаток = СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоИнв;
		КонецЕсли;
		Если КоличествоОстаток <= 0 ИЛИ Не СтрокаТаблицы.ЕстьИнвентаризация Тогда
      		ТаблицаМатериалы.Удалить(СтрокаТаблицы);
		Иначе
			Если СтрокаТаблицы.Количество <> 0 Тогда
				СтрокаТаблицы.Сумма 	= КоличествоОстаток * СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
				СтрокаТаблицы.СуммаРегл = КоличествоОстаток * СтрокаТаблицы.СуммаРегл / СтрокаТаблицы.Количество;
				СтрокаТаблицы.СуммаНал = КоличествоОстаток * СтрокаТаблицы.СуммаНал / СтрокаТаблицы.Количество;
				СтрокаТаблицы.СуммаНДС = КоличествоОстаток * СтрокаТаблицы.СуммаНДС / СтрокаТаблицы.Количество;
				СтрокаТаблицы.СуммаНДСКредит = КоличествоОстаток * СтрокаТаблицы.СуммаНДСКредит / СтрокаТаблицы.Количество;
				СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
			КонецЕсли;
			СтрокаТаблицы.Количество = КоличествоОстаток;
		КонецЕсли;

	КонецЦикла;
	
	ТабличнаяЧасть.Загрузить(ТаблицаМатериалы);
		
КонецПроцедуры // ЗаполнитьМатериалыПоИнвентаризацииНЗП()

// Процедура формирует таблицу остатков нематериальных затрат по данным инвентаризации НЗП.
//
Процедура ЗаполнитьПрочиеЗатратыПоИнвентаризацииНЗП(ДокОбъект, ТабличнаяЧасть) Экспорт
	
	ТаблицаПрочиеЗатраты = ТабличнаяЧасть.Выгрузить();
	
	ЗаполнитьПрочиеЗатратыПоОстаткамНЗП(ДокОбъект, ТаблицаПрочиеЗатраты);
	
	ОтражатьВУправленческомУчете = ДокОбъект.ОтражатьВУправленческомУчете;
	ОтражатьВБухгалтерскомУчете  = ДокОбъект.ОтражатьВБухгалтерскомУчете;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИнвентаризацияНЗП.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВЫБОР КОГДА ИнвентаризацияНЗП.Заказ = &ПустойЗаказПокупателя 
	|		  ИЛИ ИнвентаризацияНЗП.Заказ = &ПустойЗаказНаПроизводство ТОГДА
	|		Неопределено
	|	КОГДА ИнвентаризацияНЗП.Заказ ССЫЛКА Документ.ЗаказНаПроизводство ТОГДА
	|		ВЫБОР КОГДА &ИспользоватьЗаказыНаПроизводство И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|			ИнвентаризацияНЗП.Заказ
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ИнвентаризацияНЗП.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ИнвентаризацияНЗП.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ИнвентаризацияНЗП.СпособРаспределенияЗатратНаВыпуск КАК СпособРаспределенияЗатратНаВыпуск,
	|	ВЫБОР КОГДА &ОтражатьВБухгалтерскомУчете ТОГДА
	|		ИнвентаризацияНЗП.СчетЗатрат
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК СчетЗатрат,
	|	ВЫБОР КОГДА &ОтражатьВБухгалтерскомУчете ТОГДА
	|		ИнвентаризацияНЗП.НалоговоеНазначение 
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК НалоговоеНазначение,
	|	ИнвентаризацияНЗП.Сумма								КАК СуммаИнв,
	|	ИнвентаризацияНЗП.СуммаРегл							КАК СуммаИнвРегл,
	|	ИнвентаризацияНЗП.СуммаНал							КАК СуммаИнвНал,
	|	ИнвентаризацияНЗП.СуммаНДС							КАК СуммаИнвНДС,
	|	ИнвентаризацияНЗП.СуммаНДСКредит					КАК СуммаИнвНДСКредит,
	|	Истина												КАК ЕстьИнвентаризация
	|ИЗ
	|	Документ.ИнвентаризацияНЗП.ПрочиеЗатраты КАК ИнвентаризацияНЗП
	|
	|ГДЕ
	|	ИнвентаризацияНЗП.Ссылка = &ИнвентаризацияНЗП
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатурнаяГруппа,
	|	Заказ,
	|	СтатьяЗатрат,
	|	СпособРаспределенияЗатратНаВыпуск,
	|	СчетЗатрат,
	|	НалоговоеНазначение 
	|";
		
	Если ОтражатьВБухгалтерскомУчете Тогда
		УчетЗатратПоЗаказамНаПроизводство = УчетЗатратПоЗаказамНаПроизводство(ДокОбъект.Дата, ДокОбъект.Организация, "Бух");
	Иначе
		УчетЗатратПоЗаказамНаПроизводство = УчетЗатратПоЗаказамНаПроизводство(ДокОбъект.Дата);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИнвентаризацияНЗП", 					ДокОбъект.ДокументИнвентаризация);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", 				Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказНаПроизводство", 			Документы.ЗаказНаПроизводство.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИспользоватьЗаказыНаПроизводство", 	УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство());
	Запрос.УстановитьПараметр("УчетЗатратПоЗаказамНаПроизводство", 	УчетЗатратПоЗаказамНаПроизводство);
	Запрос.УстановитьПараметр("ОтражатьВБухгалтерскомУчете", 		ОтражатьВБухгалтерскомУчете);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПрочиеЗатраты.Колонки.Добавить("СуммаИнв", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаПрочиеЗатраты.Колонки.Добавить("СуммаИнвРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаПрочиеЗатраты.Колонки.Добавить("СуммаИнвНал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаПрочиеЗатраты.Колонки.Добавить("СуммаИнвНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаПрочиеЗатраты.Колонки.Добавить("СуммаИнвНДСКредит", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаПрочиеЗатраты.Колонки.Добавить("ЕстьИнвентаризация", Новый ОписаниеТипов("Булево"));
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса, ТаблицаПрочиеЗатраты);
	
	ЕстьНалоговоеНазначение = НЕ ТаблицаПрочиеЗатраты.Колонки.Найти("НалоговоеНазначение") = Неопределено;
	ТаблицаПрочиеЗатраты.Свернуть("НоменклатурнаяГруппа, Заказ, СтатьяЗатрат, СпособРаспределенияЗатратНаВыпуск, СчетЗатрат" + ?(ЕстьНалоговоеНазначение, ",НалоговоеНазначение", ""), 
							"Сумма, СуммаРегл, СуммаНал, СуммаНДС, СуммаНДСКредит, СуммаИнв, СуммаИнвРегл, СуммаИнвНДС, СуммаИнвНДСКредит, ЕстьИнвентаризация");
	
	КолвоЭлементов = ТаблицаПрочиеЗатраты.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
   		СтрокаТаблицы = ТаблицаПрочиеЗатраты[КолвоЭлементов - ОбратныйИндекс];
		
		СуммаОстаток = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаИнв;
		СуммаОстатокРегл = 0;
		СуммаОстатокНал = 0;
		СуммаОстатокНДС = 0;
		СуммаОстатокНДСКредит = 0;
		Если ОтражатьВБухгалтерскомУчете Тогда
			СуммаОстатокРегл = СтрокаТаблицы.СуммаРегл - СтрокаТаблицы.СуммаИнвРегл;
			СуммаОстатокНал = СтрокаТаблицы.СуммаНал - СтрокаТаблицы.СуммаИнвНал;
		  	СуммаОстатокНДС = СтрокаТаблицы.СуммаНДС - СтрокаТаблицы.СуммаИнвНДС;
			СуммаОстатокНДСКредит = СтрокаТаблицы.СуммаНДСКредит - СтрокаТаблицы.СуммаИнвНДСКредит;
		КонецЕсли;
		Если (СуммаОстаток <= 0 И СуммаОстатокРегл <= 0  И СуммаОстатокНал <= 0 И СуммаОстатокНДС <= 0 И СуммаОстатокНДСКредит <= 0) ИЛИ Не СтрокаТаблицы.ЕстьИнвентаризация Тогда
      		ТаблицаПрочиеЗатраты.Удалить(СтрокаТаблицы);
		Иначе
			СтрокаТаблицы.Сумма 	= СуммаОстаток;
			СтрокаТаблицы.СуммаРегл = СуммаОстатокРегл;
			СтрокаТаблицы.СуммаНал 	= СуммаОстатокНал;
			СтрокаТаблицы.СуммаНДС	= СуммаОстатокНДС;
			СтрокаТаблицы.СуммаНДСКредит = СуммаОстатокНДСКредит;
		КонецЕсли;

	КонецЦикла;
	
	ТабличнаяЧасть.Загрузить(ТаблицаПрочиеЗатраты);
		
КонецПроцедуры // ЗаполнитьПрочиеЗатратыПоИнвентаризацииНЗП()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ ПО ВЫПУСКУ ПРОДУКЦИИ

// Функция формирует текст запроса по выпуску продукции и услуг.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаПоВыпускуРасширеннаяАналитика()
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		//ДляУпрУчета 3 КАК ИндексУчета,
	|		//ДляБухУчета 2 КАК ИндексУчета,
	|		РегистрАналитикаРаспределенияЗатрат.Продукция,
	|		РегистрАналитикаРаспределенияЗатрат.ХарактеристикаПродукции,
	|		РегистрАналитикаРаспределенияЗатрат.СерияПродукции,
	|		РегистрАналитикаРаспределенияЗатрат.Спецификация,
	|		РегистрАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|		РегистрАналитикаУчетаПартий.Заказ,
	|		
	|		//ДляУпрУчета Неопределено КАК СчетЗатрат,
	|		//ДляУпрУчета Неопределено КАК НалоговоеНазначение,
	|
	|		//ДляБухУчета РегистрАналитикаВидаУчета.СчетУчета КАК СчетЗатрат,
	|		//ДляБухУчета РегистрАналитикаВидаУчета.НалоговоеНазначение КАК НалоговоеНазначение,
	|
	|		//ДляУпрУчета ВыпускПродукции.КоличествоПриход КАК Количество,
	|		//ДляУпрУчета 0 КАК КоличествоБух,
	|		//ДляУпрУчета 0 КАК КоличествоНал
	|
	|		//ДляБухУчета 0 КАК Количество,
	|		//ДляБухУчета ВыпускПродукции.КоличествоПриход КАК КоличествоБух,
	|		//ДляБухУчета ВыпускПродукции.КоличествоПриход КАК КоличествоНал
	|
	|	ИЗ
	|		РегистрНакопления.УчетЗатрат%СуффиксРегл%.Обороты(&НачГраница, &КонГраница, Период,
	|			АналитикаВидаУчета В (
	|				ВЫБРАТЬ
	|					Ссылка
	|				ИЗ
	|					РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|				ГДЕ
	|					(&ВидВыпуска = ЗНАЧЕНИЕ(Перечисление.ВидыВыпуска.Наработка)
	|					И РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Наработка)
	|					)
	|					ИЛИ 
	|					(&ВидВыпуска <> ЗНАЧЕНИЕ(Перечисление.ВидыВыпуска.Наработка)
	|					И РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Выпуск)
	|					)
	|					//ДляУпрУчета И Подразделение = &Подразделение
	|					//ДляРеглУчета И ПодразделениеОрганизации = &ПодразделениеОрганизации
	|				)
	|			//ЕстьЗаказ И АналитикаУчетаПартий В (
	|			//ЕстьЗаказ 	ВЫБРАТЬ
	|			//ЕстьЗаказ 		Ссылка
	|			//ЕстьЗаказ 	ИЗ
	|			//ЕстьЗаказ 		РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	|			//ЕстьЗаказ 	ГДЕ
	|			//ЕстьЗаказ 		Заказ = &Заказ
	|			//ЕстьЗаказ 	)
	|			
	|		) КАК ВыпускПродукции
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|		ПО
	|			ВыпускПродукции.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
	|		ПО
	|			ВыпускПродукции.АналитикаРаспределенияЗатрат = РегистрАналитикаРаспределенияЗатрат.Ссылка
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	|		ПО
	|			ВыпускПродукции.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуРасширеннаяАналитика()

// Функция формирует текст запроса по выпуску продукции и услуг.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаПоВыпуску()
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		//ДляУпрУчета 3 КАК ИндексУчета,
	|		//ДляБухУчета 2 КАК ИндексУчета,
	|		ВыпускПродукции.Продукция,
	|		ВыпускПродукции.ХарактеристикаПродукции,
	|		ВыпускПродукции.СерияПродукции,
	|		ВыпускПродукции.Спецификация,
	|		ВыпускПродукции.НоменклатурнаяГруппа,
	|		ВыпускПродукции.Заказ,
	|		
	|		//ДляУпрУчета Неопределено КАК СчетЗатрат,
	|		//ДляУпрУчета Неопределено КАК НалоговоеНазначение,
	|
	|		//ДляБухУчета ВыпускПродукции.СчетУчетаНЗП КАК СчетЗатрат,
	|		//ДляБухУчета ВыпускПродукции.НалоговоеНазначение КАК НалоговоеНазначение,
	|
	|		//ДляУпрУчета ВыпускПродукции.Количество КАК Количество,
    |		//ДляУпрУчета 0 КАК КоличествоБух, 
	|		//ДляУпрУчета 0 КАК КоличествоНал   	
	|
	|		//ДляБухУчета 0 КАК Количество,
	|		//ДляБухУчета ВыпускПродукции.Количество КАК КоличествоБух,
	|		//ДляБухУчета ВыпускПродукции.Количество КАК КоличествоНал
	|
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукции%СуффиксУчета% КАК ВыпускПродукции
	|
	|	ГДЕ
	|		ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|		И ВыпускПродукции.КодОперации В (&КодыОпераций)
	|		//ДляУпрУчета И ВыпускПродукции.Подразделение = &Подразделение
	|		//ДляРеглУчета И ВыпускПродукции.Подразделение = &ПодразделениеОрганизации
	|		//ЕстьЗаказ И ВыпускПродукции.Заказ = &Заказ
    |";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпуску()

// Функция формирует текст запроса по выпуску продукции и услуг.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаПоВыпускуНаработка()
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		//ДляУпрУчета 3 КАК ИндексУчета,
	|		//ДляБухУчета 2 КАК ИндексУчета,
	|		ВыпускПродукции.Продукция,
	|		ВыпускПродукции.ХарактеристикаПродукции,
	|		Неопределено КАК СерияПродукции,
	|		Неопределено КАК Спецификация,
	|		ВыпускПродукции.НоменклатурнаяГруппа,
	|		ВыпускПродукции.Заказ,
	|		
	|		Неопределено КАК СчетЗатрат,
	|		Неопределено КАК НалоговоеНазначение,
	|		
	|		//ДляУпрУчета ВыпускПродукции.КоличествоОстаток КАК Количество,
	|		//ДляУпрУчета 0 КАК КоличествоБух,
	|		//ДляУпрУчета 0 КАК КоличествоНал  	
	|
	|		//ДляБухУчета 0 КАК Количество,
	|		//ДляБухУчета ВыпускПродукции.КоличествоОстаток КАК КоличествоБух,
	|		//ДляБухУчета ВыпускПродукции.КоличествоОстаток КАК КоличествоНал
	| 	
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукцииНаработка.Остатки(&КонДата, 
	|			//ДляУпрУчета Подразделение = &Подразделение
	|			//ДляРеглУчета Подразделение = &ПодразделениеОрганизации
	|			//ЕстьЗаказ И Заказ = &Заказ
	|		) КАК ВыпускПродукции
    |";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуНаработка()

// Функция формирует запрос по выпуску продукции и услуг.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ
//	МетаданныеДокумента - Метаданные - Метаданные документа
//	ВидВыпуска - ПеречислениеСсылка.ВидыВыпуска - Вид выпуска
//	ЕстьДатаНачалаПериода - Булево - Есть Дата начала периода в шапке документа
//	ЕстьДатаОкончанияПериода - Булево - Есть Дата окончания периода в шапке документа
//	ЕстьЗаказ - Булево - Есть заказ в шапке документа
//
// Возвращаемое значение:
//	Запрос - Запрос по выпуску продукции и услуг
//
Функция СформироватьЗапросПоВыпуску(
	ДокументОбъект,
	МетаданныеДокумента,
	ВидВыпуска,
	ЕстьДатаНачалаПериода,
	ЕстьДатаОкончанияПериода,
	ЕстьЗаказ
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВыпускПродукции.Продукция КАК Номенклатура,
	|	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаНоменклатуры,
	|	ВыпускПродукции.СерияПродукции КАК СерияНоменклатуры,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Заказ,
	|	
	|	ВыпускПродукции.Продукция.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ВыпускПродукции.Продукция.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	
	|	ВыпускПродукции.СчетЗатрат,
	|	ВыпускПродукции.НалоговоеНазначение,
	|	
	|	СУММА(ВыпускПродукции.Количество) КАК Количество,
	|	СУММА(ВыпускПродукции.КоличествоБух) КАК КоличествоБух,
	|	СУММА(ВыпускПродукции.КоличествоНал) КАК КоличествоНал
	|	
	|ИЗ (
	|
	|	//ДляУпрУчета //ТекстЗапросаПоВыпускуПродукцииУУ
	|	//ДляУпрУчета //ДляБухУчета ОБЪЕДИНИТЬ ВСЕ
	|	//ДляБухУчета //ТекстЗапросаПоВыпускуПродукцииБУ
	|	) КАК ВыпускПродукции
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Заказ,
	|	
	|	ВыпускПродукции.Продукция.ЕдиницаХраненияОстатков,
	|	ВыпускПродукции.Продукция.ЕдиницаХраненияОстатков.Коэффициент,
	|	
	|	ВыпускПродукции.ИндексУчета,
	|	ВыпускПродукции.СчетЗатрат,
	|	ВыпускПродукции.НалоговоеНазначение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыпускПродукции.ИндексУчета,
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.СчетЗатрат,
	|	ВыпускПродукции.НалоговоеНазначение 
	|
	|ИТОГИ 
	|	СУММА(Количество), СУММА(КоличествоБух), СУММА(КоличествоНал)  
	|ПО
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Спецификация,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.СчетЗатрат
	|";
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ДокументОбъект.Дата);
		
	Если ИспользоватьРасширеннуюАналитику Тогда
		РежимИспользованияРасширеннойАналитики = глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");
		
		Если РежимИспользованияРасширеннойАналитики = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет
		   И ДокументОбъект.ОтражатьВУправленческомУчете
		Тогда
			ИспользоватьДанныеУправленческогоУчета = Истина;
			ИспользоватьДанныеБухгалтерскогоУчета  = ДокументОбъект.ОтражатьВБухгалтерскомУчете;
		Иначе
			ИспользоватьДанныеУправленческогоУчета = Ложь;
			ИспользоватьДанныеБухгалтерскогоУчета  = Истина;
		КонецЕсли;
		
		ИспользоватьДанныеНалоговогоУчета = Ложь; 	
	Иначе
		ИспользоватьДанныеУправленческогоУчета = ДокументОбъект.ОтражатьВУправленческомУчете;
		ИспользоватьДанныеБухгалтерскогоУчета  = ДокументОбъект.ОтражатьВБухгалтерскомУчете;
	КонецЕсли;
		
	Если ИспользоватьДанныеУправленческогоУчета Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляУпрУчета", "");
	КонецЕсли;
	
	Если ИспользоватьДанныеБухгалтерскогоУчета Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляБухУчета", "");
	КонецЕсли;
	
	
	Если ИспользоватьРасширеннуюАналитику Тогда
		ТекстЗапросаПоВыпускуСКомментариями = СформироватьТекстЗапросаПоВыпускуРасширеннаяАналитика();
	Иначе
		Если ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
			ТекстЗапросаПоВыпускуСКомментариями = СформироватьТекстЗапросаПоВыпускуНаработка();
		Иначе
			ТекстЗапросаПоВыпускуСКомментариями = СформироватьТекстЗапросаПоВыпуску();
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьДанныеУправленческогоУчета Тогда
		ТекстЗапросаПоВыпуску = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
			ТекстЗапросаПоВыпускуСКомментариями,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
		);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"//ТекстЗапросаПоВыпускуПродукцииУУ",
			ТекстЗапросаПоВыпуску
		);
	КонецЕсли;
	
	Если ИспользоватьДанныеБухгалтерскогоУчета Тогда
		ТекстЗапросаПоВыпуску = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаПоВыпускуСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
		);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"//ТекстЗапросаПоВыпускуПродукцииБУ",
		ТекстЗапросаПоВыпуску
		);
	КонецЕсли;
	
	
	Если ЕстьЗаказ Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ЕстьЗаказ", "");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	НачДата = ?(ЕстьДатаНачалаПериода И ЗначениеЗаполнено(ДокументОбъект.ДатаНачалаПериода), 
		ДокументОбъект.ДатаНачалаПериода, 
		НачалоМесяца(ДокументОбъект.Дата));
	КонДата = УправлениеЗатратами.ПолучитьДатуДляЗапроса(ДокументОбъект, МетаданныеДокумента);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("НачГраница", Новый Граница(НачДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Подразделение",  ДокументОбъект.Подразделение);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ДокументОбъект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Заказ", ?(ЕстьЗаказ И ЗначениеЗаполнено(ДокументОбъект.Заказ), ДокументОбъект.Заказ, Неопределено));
	Запрос.УстановитьПараметр("ВидВыпуска", ВидВыпуска);
	
	МассивКодовОпераций= Новый Массив;
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаСчет);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад);
	
	Запрос.УстановитьПараметр("КодыОпераций", МассивКодовОпераций);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоВыпуску()

// Процедура формирует таблицу выпуска продукции.
//
// Параметры:
//	ДокОбъект - ДокументОбъект - Документ
//	ТаблицаПродукция - ТаблицаЗначений - Табличная часть документа
//	ВидВыпуска - ПеречислениеСсылка.ВидыВыпуска - Вид выпуска
//
Процедура ЗаполнитьПродукциюПоВыпуску(
	ДокОбъект, 
	ТаблицаПродукция,
	ВидВыпуска = Неопределено
	) Экспорт
	
	ОтражатьВУправленческомУчете = ДокОбъект.ОтражатьВУправленческомУчете;
	ОтражатьВБухгалтерскомУчете  = ДокОбъект.ОтражатьВБухгалтерскомУчете;
	
	Если Не ОтражатьВУправленческомУчете И Не ОтражатьВБухгалтерскомУчете Тогда
		#Если Клиент Тогда
		ОбщегоНазначения.Сообщение("Документ не отражается ни в одном виде учета!" + Символы.ПС + "Заполнение не может быть выполнено!", СтатусСообщения.Внимание);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокОбъект.Метаданные();
	ЕстьДатаНачалаПериода = (МетаданныеДокумента.Реквизиты.Найти("ДатаНачалаПериода") <> Неопределено);
	ЕстьДатаОкончанияПериода = (МетаданныеДокумента.Реквизиты.Найти("ДатаОкончанияПериода") <> Неопределено);
	Если МетаданныеДокумента.Реквизиты.Найти("Заказ") <> Неопределено Тогда
		ЕстьЗаказ = ЗначениеЗаполнено(ДокОбъект.Заказ);
	Иначе
		ЕстьЗаказ = Ложь;
	КонецЕсли;
	
	Запрос = СформироватьЗапросПоВыпуску(
		ДокОбъект,
		МетаданныеДокумента,
		ВидВыпуска,
		ЕстьДатаНачалаПериода,
		ЕстьДатаОкончанияПериода,
		ЕстьЗаказ
	);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПродукция.Колонки.Найти("ЕдиницаИзмерения") = Неопределено Тогда
		ТаблицаПродукция.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	КонецЕсли;
	Если ТаблицаПродукция.Колонки.Найти("СчетЗатрат") = Неопределено Тогда
		ТаблицаПродукция.Колонки.Добавить("СчетЗатрат", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	КонецЕсли;
	Если ТаблицаПродукция.Колонки.Найти("НалоговоеНазначение") = Неопределено Тогда
	  	ТаблицаПродукция.Колонки.Добавить("НалоговоеНазначение", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		СчетаУчетаЗатрат = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ДокОбъект.ПодразделениеОрганизации, Неопределено);
		СчетЗатрат = СчетаУчетаЗатрат.СчетУчетаБУ;
	Иначе
		СчетЗатрат = Неопределено;
	КонецЕсли;
	
	ОбходПоПродукции = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоПродукции.Следующий() Цикл
		ОбходПоХарактеристикам = ОбходПоПродукции.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоХарактеристикам.Следующий() Цикл
			ОбходПоСериям = ОбходПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоСериям.Следующий() Цикл
				ОбходПоСпецификациям = ОбходПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ОбходПоСпецификациям.Следующий() Цикл
					ОбходПоНомГруппам = ОбходПоСпецификациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ОбходПоНомГруппам.Следующий() Цикл
						ОбходПоЗаказам = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ОбходПоЗаказам.Следующий() Цикл
							
							ВсегоКоличество = ОбходПоЗаказам.Количество;
							
							ОбходПоСчету = ОбходПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ОбходПоСчету.Следующий() Цикл
								
								ВсегоКоличествоБух = ОбходПоСчету.КоличествоБух;
								
								Обход = ОбходПоСчету.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								
								Пока Обход.Следующий() Цикл
									
									Если ОтражатьВБухгалтерскомУчете Тогда
										ТекКоличество = Обход.КоличествоБух;
									Иначе
										ТекКоличество = Обход.Количество;
									КонецЕсли;
									
									Если ТекКоличество = 0 Тогда
										Продолжить;
									КонецЕсли;
									
									
									ВсегоКоличество    = ВсегоКоличество - ТекКоличество;
									ВсегоКоличествоБух = ВсегоКоличествоБух - ТекКоличество;
									
									НоваяСтрока = ТаблицаПродукция.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, Обход);
									НоваяСтрока.Количество 	= ТекКоличество;
									
									Если ОтражатьВБухгалтерскомУчете Тогда
										НоваяСтрока.СчетЗатрат = Обход.СчетЗатрат;
										НоваяСтрока.НалоговоеНазначение = Обход.НалоговоеНазначение;
									КонецЕсли;
									
								КонецЦикла; // по детальным записям
								
								Если ОтражатьВБухгалтерскомУчете И ВсегоКоличествоБух > 0 Тогда
									
									ВсегоКоличество = ВсегоКоличество - ВсегоКоличествоБух;
									
									НоваяСтрока = ТаблицаПродукция.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбходПоСчету);
									НоваяСтрока.Количество = ВсегоКоличествоБух;
									
								КонецЕсли;
								
							КонецЦикла; // по счетам учета
							
							Если ОтражатьВУправленческомУчете И ВсегоКоличество > 0 Тогда
								
								НоваяСтрока = ТаблицаПродукция.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбходПоЗаказам);
								НоваяСтрока.Количество = ВсегоКоличество; 								 
								Если ОтражатьВБухгалтерскомУчете Тогда
									НоваяСтрока.СчетЗатрат = СчетЗатрат;
								КонецЕсли;								
							КонецЕсли;
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПродукциюПоВыпуску()

// Процедура формирует таблицу остатков наработанной продукции.
//
Процедура ЗаполнитьПродукциюПоВыпускуНаработка(ДокОбъект, ТаблицаПродукция) Экспорт
	
	ЗаполнитьПродукциюПоВыпуску(
		ДокОбъект, 
		ТаблицаПродукция,
		Перечисления.ВидыВыпуска.Наработка
	);
	
КонецПроцедуры // ЗаполнитьПродукциюПоВыпускуНаработка()

// Процедура формирует таблицу затрат на выпуск.
//
Процедура ЗаполнитьМатериалыПоЗатратамНаВыпуск(ДокОбъект, ТаблицаЗатратНаВыпуск) Экспорт
	
	ОтражатьВУправленческомУчете = ДокОбъект.ОтражатьВУправленческомУчете;
	ОтражатьВБухгалтерскомУчете  = ДокОбъект.ОтражатьВБухгалтерскомУчете;
	
	Заказ = ДокОбъект.Заказ;
	
	ЕстьЗаказ = ЗначениеЗаполнено(Заказ);
	
	Если ЕстьЗаказ Тогда
		УсловиеЗаказ = "И ВыпускПродукции.Заказ = &Заказ";
		УсловиеЗаказБух = "И ВыпускПродукцииБух.Заказ = &Заказ";
	Иначе
		УсловиеЗаказ = "";
		УсловиеЗаказБух = "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗатратыНаВыпуск.Продукция			    КАК Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|	ЗатратыНаВыпуск.СерияПродукции 		    КАК СерияПродукции,
	|	ЗатратыНаВыпуск.Спецификация 		 	КАК Спецификация,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа    КАК НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.Заказ 				    КАК Заказ,
	|	ЗатратыНаВыпуск.СтатьяЗатрат 			КАК СтатьяЗатрат,
	|	
	|	ЗатратыНаВыпуск.Затрата			        КАК Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты   КАК ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты 		    КАК СерияЗатраты,
	|	
	|	ЗатратыНаВыпуск.СчетЗатрат 	        КАК СчетЗатрат,
	|	ЗатратыНаВыпуск.НалоговоеНазначение КАК НалоговоеНазначение,
	|	
	|	СУММА(ЗатратыНаВыпуск.Количество)    КАК Количество,
	|	СУММА(ЗатратыНаВыпуск.КоличествоБух) КАК КоличествоБух
	|	
	|ИЗ (
	|";
	
	Если ОтражатьВУправленческомУчете Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|	ВЫБРАТЬ
	|		ЗатратыНаВыпуск.Продукция			    КАК Продукция,
	|		ЗатратыНаВыпуск.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|		ЗатратыНаВыпуск.СерияПродукции 		    КАК СерияПродукции,
	|		ЗатратыНаВыпуск.Спецификация 		 	КАК Спецификация,
	|		ЗатратыНаВыпуск.НоменклатурнаяГруппа    КАК НоменклатурнаяГруппа,
	|		ЗатратыНаВыпуск.Заказ 			        КАК Заказ,
	|		ЗатратыНаВыпуск.СтатьяЗатрат 			КАК СтатьяЗатрат,
	|		
	|		ЗатратыНаВыпуск.Затрата			        КАК Затрата,
	|		ЗатратыНаВыпуск.ХарактеристикаЗатраты   КАК ХарактеристикаЗатраты,
	|		ЗатратыНаВыпуск.СерияЗатраты 		    КАК СерияЗатраты,
	|		
	|		0 КАК СчетЗатрат,
	|		0 КАК НалоговоеНазначение,
	|		
	|		ЗатратыНаВыпуск.Количество	КАК Количество,
	|		0 						   	КАК КоличествоБух
	|	ИЗ
	|		РегистрНакопления.ЗатратыНаВыпускПродукции КАК ЗатратыНаВыпуск
	|	ГДЕ
	|		ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|		И ЗатратыНаВыпуск.КодОперации В (&КодыОпераций)
	|		И ЗатратыНаВыпуск.Подразделение = &Подразделение
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗатратыНаВыпускНаработка.Продукция			    	КАК Продукция,
	|		ЗатратыНаВыпускНаработка.ХарактеристикаПродукции 	КАК ХарактеристикаПродукции,
	|		РегВыпуск.СерияПродукции 		    				КАК СерияПродукции,
	|		РегВыпуск.Спецификация 		 						КАК Спецификация,
	|		ЗатратыНаВыпускНаработка.НоменклатурнаяГруппа    	КАК НоменклатурнаяГруппа,
	|		ЗатратыНаВыпускНаработка.Заказ 			        	КАК Заказ,
	|		ЗатратыНаВыпускНаработка.СтатьяЗатрат 				КАК СтатьяЗатрат,
	|		
	|		ЗатратыНаВыпускНаработка.Затрата			        КАК Затрата,
	|		ЗатратыНаВыпускНаработка.ХарактеристикаЗатраты   	КАК ХарактеристикаЗатраты,
	|		ЗатратыНаВыпускНаработка.СерияЗатраты 		    	КАК СерияЗатраты,
	|		
	|		0 КАК СчетЗатрат,
	|		0 КАК НалоговоеНазначение,
	|		
	|		ЗатратыНаВыпускНаработка.КоличествоОстаток	КАК Количество,
	|		0 						   					КАК КоличествоБух
	|	ИЗ
	|		РегистрНакопления.ЗатратыНаВыпускПродукцииНаработка.Остатки(&КонДата, Подразделение = &Подразделение) КАК ЗатратыНаВыпускНаработка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			РегВыпуск.Продукция               КАК Продукция,
	|			РегВыпуск.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|			РегВыпуск.СерияПродукции          КАК СерияПродукции,
	|			РегВыпуск.Спецификация            КАК Спецификация,
	|			РегВыпуск.НоменклатурнаяГруппа    КАК НоменклатурнаяГруппа,
	|			РегВыпуск.Заказ                   КАК Заказ,
	|			СУММА(РегВыпуск.КоличествоДоделка)КАК Количество
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции КАК РегВыпуск
	|		ГДЕ
	|			РегВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|			И РегВыпуск.Подразделение = &Подразделение
	|			И РегВыпуск.КоличествоДоделка <> 0
	|		СГРУППИРОВАТЬ ПО
	|			РегВыпуск.НоменклатурнаяГруппа,
	|			РегВыпуск.Продукция,
	|			РегВыпуск.ХарактеристикаПродукции,
	|			РегВыпуск.СерияПродукции,
	|			РегВыпуск.Спецификация,
	|			РегВыпуск.Заказ
	|		) КАК РегВыпуск
	|	ПО  
	|		ЗатратыНаВыпускНаработка.НоменклатурнаяГруппа      = РегВыпуск.НоменклатурнаяГруппа
	|		И ЗатратыНаВыпускНаработка.Продукция               = РегВыпуск.Продукция
	|		И ЗатратыНаВыпускНаработка.ХарактеристикаПродукции = РегВыпуск.ХарактеристикаПродукции
	|		И ЗатратыНаВыпускНаработка.Заказ                   = РегВыпуск.Заказ
	|";
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете И ОтражатьВБухгалтерскомУчете Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|																					   
	|ОБЪЕДИНИТЬ																					   
	|";
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|	ВЫБРАТЬ
	|		ЗатратыНаВыпускБух.Продукция			   КАК Продукция,
	|		ЗатратыНаВыпускБух.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|		ЗатратыНаВыпускБух.СерияПродукции 		   КАК СерияПродукции,
	|		ЗатратыНаВыпускБух.Спецификация 		   КАК Спецификация,
	|		ЗатратыНаВыпускБух.НоменклатурнаяГруппа    КАК НоменклатурнаяГруппа,
	|		ЗатратыНаВыпускБух.Заказ 			       КАК Заказ,
	|		ЗатратыНаВыпускБух.СтатьяЗатрат 		   КАК СтатьяЗатрат,
	|		
	|		ЗатратыНаВыпускБух.Затрата			       КАК Затрата,
	|		ЗатратыНаВыпускБух.ХарактеристикаЗатраты   КАК ХарактеристикаЗатраты,
	|		ЗатратыНаВыпускБух.СерияЗатраты 		   КАК СерияЗатраты,
	|		
	|		ЗатратыНаВыпускБух.СчетУчета КАК СчетЗатрат,
	|		ЗатратыНаВыпускБух.НалоговоеНазначение КАК НалоговоеНазначение,
	|		
	|		0						      КАК Количество,
	|		ЗатратыНаВыпускБух.Количество КАК КоличествоБух
	|	ИЗ
	|		РегистрНакопления.ЗатратыНаВыпускПродукцииБухгалтерскийУчет КАК ЗатратыНаВыпускБух
	|	ГДЕ
	|		ЗатратыНаВыпускБух.Период МЕЖДУ &НачДата И &КонДата
	|		И ЗатратыНаВыпускБух.КодОперации В (&КодыОпераций)
	|		И ЗатратыНаВыпускБух.Подразделение = &ПодразделениеОрганизации
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗатратыНаВыпускНаработка.Продукция			    	КАК Продукция,
	|		ЗатратыНаВыпускНаработка.ХарактеристикаПродукции 	КАК ХарактеристикаПродукции,
	|		РегВыпуск.СерияПродукции 		    				КАК СерияПродукции,
	|		РегВыпуск.Спецификация 		 						КАК Спецификация,
	|		ЗатратыНаВыпускНаработка.НоменклатурнаяГруппа    	КАК НоменклатурнаяГруппа,
	|		ЗатратыНаВыпускНаработка.Заказ 			        	КАК Заказ,
	|		ЗатратыНаВыпускНаработка.СтатьяЗатрат 				КАК СтатьяЗатрат,
	|		
	|		ЗатратыНаВыпускНаработка.Затрата			        КАК Затрата,
	|		ЗатратыНаВыпускНаработка.ХарактеристикаЗатраты   	КАК ХарактеристикаЗатраты,
	|		ЗатратыНаВыпускНаработка.СерияЗатраты 		    	КАК СерияЗатраты,
	|		
	|		ЗатратыНаВыпускНаработка.СчетУчета КАК СчетЗатрат,
	|		ЗатратыНаВыпускНаработка.НалоговоеНазначение КАК НалоговоеНазначение,
	|		
	|		0											КАК Количество,
	|		ЗатратыНаВыпускНаработка.КоличествоОстаток	КАК КоличествоБух
	|	ИЗ
	|		РегистрНакопления.ЗатратыНаВыпускПродукцииНаработкаБухгалтерскийУчет.Остатки(&КонДата, Подразделение = &ПодразделениеОрганизации) КАК ЗатратыНаВыпускНаработка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			РегВыпуск.Продукция               КАК Продукция,
	|			РегВыпуск.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|			РегВыпуск.СерияПродукции          КАК СерияПродукции,
	|			РегВыпуск.Спецификация            КАК Спецификация,
	|			РегВыпуск.НоменклатурнаяГруппа    КАК НоменклатурнаяГруппа,
	|			РегВыпуск.Заказ                   КАК Заказ,
	|			СУММА(РегВыпуск.КоличествоДоделка)КАК Количество
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукцииБухгалтерскийУчет КАК РегВыпуск
	|		ГДЕ
	|			РегВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|			И РегВыпуск.Подразделение = &ПодразделениеОрганизации
	|			И РегВыпуск.КоличествоДоделка <> 0
	|		СГРУППИРОВАТЬ ПО
	|			РегВыпуск.НоменклатурнаяГруппа,
	|			РегВыпуск.Продукция,
	|			РегВыпуск.ХарактеристикаПродукции,
	|			РегВыпуск.СерияПродукции,
	|			РегВыпуск.Спецификация,
	|			РегВыпуск.Заказ
	|		) КАК РегВыпуск
	|	ПО  
	|		ЗатратыНаВыпускНаработка.НоменклатурнаяГруппа      = РегВыпуск.НоменклатурнаяГруппа
	|		И ЗатратыНаВыпускНаработка.Продукция               = РегВыпуск.Продукция
	|		И ЗатратыНаВыпускНаработка.ХарактеристикаПродукции = РегВыпуск.ХарактеристикаПродукции
	|		И ЗатратыНаВыпускНаработка.Заказ                   = РегВыпуск.Заказ
	|";
	КонецЕсли;
	
	
	ТекстЗапроса = ТекстЗапроса + "
	|	) КАК ЗатратыНаВыпуск
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|	ЗатратыНаВыпуск.СерияПродукции,
	|	ЗатратыНаВыпуск.Спецификация,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.Заказ,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|
	|	ЗатратыНаВыпуск.СчетЗатрат,
	|	ЗатратыНаВыпуск.НалоговоеНазначение
	|		
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|	ЗатратыНаВыпуск.СерияПродукции,
	|	ЗатратыНаВыпуск.Спецификация,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.Заказ,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	
	|	ЗатратыНаВыпуск.СчетЗатрат,
	|	ЗатратыНаВыпуск.НалоговоеНазначение
	|		
	|ИТОГИ СУММА(Количество), СУММА(КоличествоБух) ПО
	|	ЗатратыНаВыпуск.Продукция,
	|	ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|	ЗатратыНаВыпуск.СерияПродукции,
	|	ЗатратыНаВыпуск.Спецификация,
	|	ЗатратыНаВыпуск.НоменклатурнаяГруппа,
	|	ЗатратыНаВыпуск.Заказ,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	ЗатратыНаВыпуск.СчетЗатрат
    |";
	
	Запрос = Новый Запрос;
	
	Дата = УправлениеЗатратами.ПолучитьДатуДляЗапроса(ДокОбъект);
		
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачДата",                  	НачалоМесяца(ДокОбъект.Дата));
	Запрос.УстановитьПараметр("КонДата",                  	Дата);
	Запрос.УстановитьПараметр("Подразделение",            	ДокОбъект.Подразделение);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", 	ДокОбъект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Заказ",      			   	?(НЕ ЗначениеЗаполнено(Заказ), Неопределено, Заказ));
	
	МассивКодовОпераций= Новый Массив;
	МассивКодовОпераций.Добавить( Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	Запрос.УстановитьПараметр( "КодыОпераций", МассивКодовОпераций);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбходПоПродукции = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоПродукции.Следующий() Цикл
		ОбходПоХарактеристикам = ОбходПоПродукции.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоХарактеристикам.Следующий() Цикл
			ОбходПоСериям = ОбходПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоСериям.Следующий() Цикл
				ОбходПоСпецификациям = ОбходПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ОбходПоСпецификациям.Следующий() Цикл
					ОбходПоНомГруппам = ОбходПоСпецификациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ОбходПоНомГруппам.Следующий() Цикл
						ОбходПоЗаказам = ОбходПоНомГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ОбходПоЗаказам.Следующий() Цикл
							ОбходПоСтатьям = ОбходПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ОбходПоСтатьям.Следующий() Цикл
								ОбходПоЗатратам = ОбходПоСтатьям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								Пока ОбходПоЗатратам.Следующий() Цикл
									ОбходПоХарактеристикамЗатрат = ОбходПоЗатратам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
									Пока ОбходПоХарактеристикамЗатрат.Следующий() Цикл
										ОбходПоСериямЗатрат = ОбходПоХарактеристикамЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
										Пока ОбходПоСериямЗатрат.Следующий() Цикл
									
											ВсегоКоличество = ОбходПоСтатьям.Количество;
													
											ОбходПоСчету = ОбходПоСтатьям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
											Пока ОбходПоСчету.Следующий() Цикл
												
												ВсегоКоличествоБух = ОбходПоСчету.КоличествоБух;
														
												Обход = ОбходПоСчету.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
												Пока Обход.Следующий() Цикл
													
													Если ОтражатьВБухгалтерскомУчете Тогда	
														ТекКоличество = Обход.КоличествоБух;
													Иначе
														ТекКоличество = Обход.Количество;
													КонецЕсли;
													
													Если ТекКоличество = 0 Тогда
														Продолжить;
													КонецЕсли;
													
													
													ВсегоКоличество = ВсегоКоличество - ТекКоличество;
													ВсегоКоличествоБух = ВсегоКоличествоБух - ТекКоличество;
												
													НоваяСтрока = ТаблицаЗатратНаВыпуск.Добавить();
													НоваяСтрока.Продукция               = Обход.Продукция;
													НоваяСтрока.ХарактеристикаПродукции = Обход.ХарактеристикаПродукции;
													НоваяСтрока.СерияПродукции          = Обход.СерияПродукции;
													
													НоваяСтрока.Номенклатура               = Обход.Затрата;
													НоваяСтрока.ХарактеристикаНоменклатуры = Обход.ХарактеристикаЗатраты;
													НоваяСтрока.СерияНоменклатуры          = Обход.СерияЗатраты;
													
													НоваяСтрока.НоменклатурнаяГруппа 	= Обход.НоменклатурнаяГруппа;
													НоваяСтрока.Заказ                	= Обход.Заказ;
													НоваяСтрока.Спецификация 			= Обход.Спецификация;
													НоваяСтрока.СтатьяЗатрат 			= Обход.СтатьяЗатрат;
													НоваяСтрока.Количество 				= ТекКоличество;
													
													Если ОтражатьВБухгалтерскомУчете Тогда
														НоваяСтрока.СчетЗатрат = Обход.СчетЗатрат;
														НоваяСтрока.НалоговоеНазначение = Обход.НалоговоеНазначение;
													КонецЕсли;
													
												КонецЦикла; // по детальным записям
													
												Если ОтражатьВБухгалтерскомУчете И ВсегоКоличествоБух > 0 Тогда
													
													ВсегоКоличество = ВсегоКоличество - ВсегоКоличествоБух;
												
													НоваяСтрока = ТаблицаЗатратНаВыпуск.Добавить();
													НоваяСтрока.Продукция               = ОбходПоСчету.Продукция;
													НоваяСтрока.ХарактеристикаПродукции = ОбходПоСчету.ХарактеристикаПродукции;
													НоваяСтрока.СерияПродукции          = ОбходПоСчету.СерияПродукции;
													
													НоваяСтрока.Номенклатура               = ОбходПоСчету.Затрата;
													НоваяСтрока.ХарактеристикаНоменклатуры = ОбходПоСчету.ХарактеристикаЗатраты;
													НоваяСтрока.СерияНоменклатуры          = ОбходПоСчету.СерияЗатраты;
													
													НоваяСтрока.НоменклатурнаяГруппа 	= ОбходПоСчету.НоменклатурнаяГруппа;
													НоваяСтрока.Заказ                	= ОбходПоСчету.Заказ;
													НоваяСтрока.Спецификация 			= ОбходПоСчету.Спецификация;
													НоваяСтрока.СтатьяЗатрат 			= ОбходПоСчету.СтатьяЗатрат;
													НоваяСтрока.Количество 				= ВсегоКоличествоБух;
													
												КонецЕсли;
													
											КонецЦикла; // по счетам учета
											
											Если ОтражатьВУправленческомУчете И ВсегоКоличество > 0 Тогда
													
												НоваяСтрока = ТаблицаЗатратНаВыпуск.Добавить();
												НоваяСтрока.Продукция               = ОбходПоСтатьям.Продукция;
												НоваяСтрока.ХарактеристикаПродукции = ОбходПоСтатьям.ХарактеристикаПродукции;
												НоваяСтрока.СерияПродукции          = ОбходПоСтатьям.СерияПродукции;
												
												НоваяСтрока.Номенклатура               = ОбходПоСтатьям.Затрата;
												НоваяСтрока.ХарактеристикаНоменклатуры = ОбходПоСтатьям.ХарактеристикаЗатраты;
												НоваяСтрока.СерияНоменклатуры          = ОбходПоСтатьям.СерияЗатраты;
												
												НоваяСтрока.НоменклатурнаяГруппа 	= ОбходПоСтатьям.НоменклатурнаяГруппа;
												НоваяСтрока.Заказ                	= ОбходПоСтатьям.Заказ;
												НоваяСтрока.Спецификация 			= ОбходПоСтатьям.Спецификация;
												НоваяСтрока.СтатьяЗатрат 			= ОбходПоСтатьям.СтатьяЗатрат;
												НоваяСтрока.Количество 				= ВсегоКоличество;
												
											КонецЕсли;
											
										КонецЦикла; // по сериям затрат
									КонецЦикла; // по характеристикам затрат
								КонецЦикла; // по затратам
							КонецЦикла; // по статьям затрат
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьМатериалыПоЗатратамНаВыпуск()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ЧАСТЕЙ ПО СПЕЦИФИКАЦИЯМ

// Процедура заполняет табличную часть "Материалы" по спецификациям, указанным в табличной части "Продукция".
//
Процедура ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТаблицаПродукция, СтруктураДопКолонок, Отбор, ДатаСпецификации, КоличествоУровнейРазузлования = 1, ПараметрыВыпускаПродукции = Неопределено) Экспорт
	
	ТабличнаяЧастьПродукция = Новый ТаблицаЗначений;
	ТабличнаяЧастьПродукция.Колонки.Добавить("Номенклатура");
	ТабличнаяЧастьПродукция.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТабличнаяЧастьПродукция.Колонки.Добавить("ЕдиницаИзмерения");
	ТабличнаяЧастьПродукция.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	ТабличнаяЧастьПродукция.Колонки.Добавить("Спецификация");
	ТабличнаяЧастьПродукция.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТабличнаяЧастьПродукция.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	ДопКолонки = "";
	
	Для каждого ДопКолонка из СтруктураДопКолонок Цикл
		
		Если ТабличнаяЧастьПродукция.Колонки.Найти(ДопКолонка.Ключ) = Неопределено Тогда
			
			ТабличнаяЧастьПродукция.Колонки.Добавить(ДопКолонка.Ключ);
			ДопКолонки = ДопКолонки + ", " + ДопКолонка.Ключ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродукция, ТабличнаяЧастьПродукция);
	ТабличнаяЧастьПродукция.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Спецификация, Коэффициент, КлючСвязи" + ДопКолонки, "Количество");
	
	Параметры = Новый Структура("ПараметрыВыпуска, КоличествоУровнейРазузлования, ДатаСпецификации, Отбор, РазмещатьВСопутствующихИзделиях");
	Параметры.Отбор = Отбор;
	Параметры.РазмещатьВСопутствующихИзделиях = Истина;
	
	РезультатРазузлования = Новый Структура("ИсходныеКомплектующие");
	
	ИндексПоследнейСтроки = 0;
	
	Для каждого СтрокаТабличнойЧасти из ТабличнаяЧастьПродукция Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) ИЛИ СтрокаТабличнойЧасти.Количество = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураИсточник = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, Количество, Спецификация");
		ЗаполнитьЗначенияСвойств(СтруктураИсточник, СтрокаТабличнойЧасти);
		
		ПараметрыВыпуска = Новый Соответствие;
		
		Если ПараметрыВыпускаПродукции <> Неопределено И СтрокаТабличнойЧасти.КлючСвязи <> 0 Тогда
			
			Для каждого ПараметрВыпуска из ПараметрыВыпускаПродукции Цикл
				
				Если ПараметрВыпуска.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи Тогда
					
					ПараметрыВыпуска.Вставить(ПараметрВыпуска.ВидПараметра.Наименование, ПараметрВыпуска.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Параметры.ПараметрыВыпуска = ПараметрыВыпуска;
		Параметры.КоличествоУровнейРазузлования = КоличествоУровнейРазузлования;
		Параметры.ДатаСпецификации = ДатаСпецификации;
		
		МассивОшибок = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(СтруктураИсточник, РезультатРазузлования, Параметры);
		
		Если МассивОшибок.Количество() > 0 Тогда
			
			Для каждого Ошибка из МассивОшибок Цикл
				
				ОбщегоНазначения.Сообщение("Ошибка: " + Ошибка.Причина, Ошибка.СтатусОшибки);
				ОбщегоНазначения.Сообщение(" Спецификация: " + Ошибка.Спецификация);
				ОбщегоНазначения.Сообщение(" Номер строки: " + Ошибка.НомерСтроки);
				ОбщегоНазначения.Сообщение(" Описание ошибки: " + Ошибка.ОписаниеОшибки);
			
			КонецЦикла;
			
		КонецЕсли;
		
		ИсходныеКомплектующие = РезультатРазузлования.ИсходныеКомплектующие;
		
		Если ИндексПоследнейСтроки = 0 Тогда
			
			Для каждого ДопКолонка из СтруктураДопКолонок Цикл
				
				Если ИсходныеКомплектующие.Колонки.Найти(ДопКолонка.Ключ) = Неопределено Тогда
					
					ИсходныеКомплектующие.Колонки.Добавить(ДопКолонка.Ключ);
					
				КонецЕсли;
				
			КонецЦикла;

		КонецЕсли;
		
		Пока ИндексПоследнейСтроки < ИсходныеКомплектующие.Количество() Цикл
			
			Для каждого ДопКолонка из СтруктураДопКолонок Цикл
				
				ИсходныеКомплектующие[ИндексПоследнейСтроки][ДопКолонка.Ключ] = СтрокаТабличнойЧасти[ДопКолонка.Ключ];
				
			КонецЦикла;
			
			ИндексПоследнейСтроки = ИндексПоследнейСтроки + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если РезультатРазузлования.ИсходныеКомплектующие <> Неопределено Тогда
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ИсходныеКомплектующие, ТабличнаяЧастьМатериалы);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьМатериалыПоСпецификациям()

// Процедура заполняет табличную часть "Материалы" по спецификациям, указанным в табличной части "Продукция".
//
Процедура ЗаполнитьВозвратныеОтходыПоСпецификациям(ТабличнаяЧастьВозвратныеОтходы, ТаблицаПродукция, СтруктураДопКолонок, Отбор, ДатаСпецификации, КоличествоУровнейРазузлования = 1, ПараметрыВыпускаПродукции = Неопределено) Экспорт
	
	ТабличнаяЧастьПродукция = Новый ТаблицаЗначений;
	ТабличнаяЧастьПродукция.Колонки.Добавить("Номенклатура");
	ТабличнаяЧастьПродукция.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТабличнаяЧастьПродукция.Колонки.Добавить("ЕдиницаИзмерения");
	ТабличнаяЧастьПродукция.Колонки.Добавить("Коэффициент",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	ТабличнаяЧастьПродукция.Колонки.Добавить("Спецификация");
	ТабличнаяЧастьПродукция.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТабличнаяЧастьПродукция.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	ДопКолонки = "";
	
	Для каждого ДопКолонка из СтруктураДопКолонок Цикл
		
		Если ТабличнаяЧастьПродукция.Колонки.Найти(ДопКолонка.Ключ) = Неопределено Тогда
			
			ТабличнаяЧастьПродукция.Колонки.Добавить(ДопКолонка.Ключ);
			ДопКолонки = ДопКолонки + ", " + ДопКолонка.Ключ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродукция, ТабличнаяЧастьПродукция);
	ТабличнаяЧастьПродукция.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Спецификация, Коэффициент, КлючСвязи" + ДопКолонки, "Количество");
	
	Параметры = Новый Структура("ПараметрыВыпуска, КоличествоУровнейРазузлования, ДатаСпецификации, Отбор, РазмещатьВСопутствующихИзделиях");
	Параметры.Отбор = Отбор;
	Параметры.РазмещатьВСопутствующихИзделиях = Истина;
	
	РезультатРазузлования = Новый Структура("ВозвратныеОтходы");
	
	ИндексПоследнейСтроки = 0;
	
	Для каждого СтрокаТабличнойЧасти из ТабличнаяЧастьПродукция Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) ИЛИ СтрокаТабличнойЧасти.Количество = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураИсточник = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, Количество, Спецификация");
		ЗаполнитьЗначенияСвойств(СтруктураИсточник, СтрокаТабличнойЧасти);
		
		ПараметрыВыпуска = Новый Соответствие;
		
		Если ПараметрыВыпускаПродукции <> Неопределено И СтрокаТабличнойЧасти.КлючСвязи <> 0 Тогда
			
			Для Каждого ПараметрВыпуска Из ПараметрыВыпускаПродукции Цикл
				
				Если ПараметрВыпуска.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи Тогда
					
					ПараметрыВыпуска.Вставить(ПараметрВыпуска.ВидПараметра.Наименование, ПараметрВыпуска.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Параметры.ПараметрыВыпуска = ПараметрыВыпуска;
		Параметры.КоличествоУровнейРазузлования = КоличествоУровнейРазузлования;
		Параметры.ДатаСпецификации = ДатаСпецификации;
		
		МассивОшибок = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(СтруктураИсточник, РезультатРазузлования, Параметры);
		
		Если МассивОшибок.Количество() > 0 Тогда
			
			Для каждого Ошибка из МассивОшибок Цикл
				
				ОбщегоНазначения.Сообщение("Ошибка: " + Ошибка.Причина, Ошибка.СтатусОшибки);
				ОбщегоНазначения.Сообщение(" Спецификация: " + Ошибка.Спецификация);
				ОбщегоНазначения.Сообщение(" Номер строки: " + Ошибка.НомерСтроки);
				ОбщегоНазначения.Сообщение(" Описание ошибки: " + Ошибка.ОписаниеОшибки);
			
			КонецЦикла;
			
		КонецЕсли;
		
		ВозвратныеОтходы = РезультатРазузлования.ВозвратныеОтходы;
		
		Если ИндексПоследнейСтроки = 0 Тогда
			
			Для каждого ДопКолонка из СтруктураДопКолонок Цикл
				
				Если ВозвратныеОтходы.Колонки.Найти(ДопКолонка.Ключ) = Неопределено Тогда
					
					ВозвратныеОтходы.Колонки.Добавить(ДопКолонка.Ключ);
					
				КонецЕсли;
				
			КонецЦикла;

		КонецЕсли;
		
		Пока ИндексПоследнейСтроки < ВозвратныеОтходы.Количество() Цикл
			
			Для каждого ДопКолонка из СтруктураДопКолонок Цикл
				
				ВозвратныеОтходы[ИндексПоследнейСтроки][ДопКолонка.Ключ] = СтрокаТабличнойЧасти[ДопКолонка.Ключ];
				
			КонецЦикла;
			
			ИндексПоследнейСтроки = ИндексПоследнейСтроки + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если РезультатРазузлования.ВозвратныеОтходы <> Неопределено Тогда
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратныеОтходы, ТабличнаяЧастьВозвратныеОтходы);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВозвратныеОтходыПоСпецификациям()

// Функция получает таблицу материлов по спецификации, указанной при подборе.
//
Функция ПолучитьМатериалыПоСпецификации(Спецификация, Количество, Отбор, ДатаСпецификации, ИспользоватьТолькоСборочныеСпецификации, КоличествоУровнейРазузлования = 1) Экспорт
	
	Параметры = Новый Структура("ПараметрыВыпуска, КоличествоУровнейРазузлования, ДатаСпецификации, Отбор");
	Параметры.Отбор = Отбор;
	
	
	Если НЕ ЗначениеЗаполнено(Спецификация) ИЛИ Количество = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	РезультатРазузлования = Новый Структура("ИсходныеКомплектующие");
		
	СтруктураИсточник = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, Количество, Спецификация");
	
	Если Не ИспользоватьВидСпецификации(ИспользоватьТолькоСборочныеСпецификации)
	 ИЛИ Спецификация.ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная Тогда
	   
		Если Спецификация.ВыходныеИзделия.Количество() > 0 Тогда
	   		СтруктураИсточник.Вставить("Номенклатура", 					Спецификация.ВыходныеИзделия[0].Номенклатура);
			СтруктураИсточник.Вставить("ХарактеристикаНоменклатуры", 	Спецификация.ВыходныеИзделия[0].ХарактеристикаНоменклатуры);
			СтруктураИсточник.Вставить("ЕдиницаИзмерения", 				Спецификация.ВыходныеИзделия[0].ЕдиницаИзмерения);
			СтруктураИсточник.Вставить("Коэффициент", 					Спецификация.ВыходныеИзделия[0].ЕдиницаИзмерения.Коэффициент);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураИсточник.Вставить("Количество",   Количество);
	СтруктураИсточник.Вставить("Спецификация", Спецификация);
	
	РезультатРазузлования = Новый Структура;
	РезультатРазузлования.Вставить("ИсходныеКомплектующие");
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДатаСпецификации", 				ДатаСпецификации);
	Параметры.Вставить("КоличествоУровнейРазузлования", КоличествоУровнейРазузлования);
	Параметры.Вставить("Отбор", 						Отбор);
		
	МассивОшибок = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(СтруктураИсточник, РезультатРазузлования, Параметры);
		
	Если МассивОшибок.Количество() > 0 Тогда
			
		Для каждого Ошибка из МассивОшибок Цикл
				
			ОбщегоНазначения.Сообщение("Ошибка: " + Ошибка.Причина, Ошибка.СтатусОшибки);
			ОбщегоНазначения.Сообщение(" Спецификация: " + Ошибка.Спецификация);
			ОбщегоНазначения.Сообщение(" Номер строки: " + Ошибка.НомерСтроки);
			ОбщегоНазначения.Сообщение(" Описание ошибки: " + Ошибка.ОписаниеОшибки);
			
		КонецЦикла;
			
	КонецЕсли;
		
	Если РезультатРазузлования.ИсходныеКомплектующие = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ИсходныеКомплектующие = РезультатРазузлования.ИсходныеКомплектующие;
	
	Возврат ИсходныеКомплектующие;
			
КонецФункции // ПолучитьМатериалыПоСпецификации()

// Процедура заполнения документов выпуска по спецификации
//
Процедура ЗаполнитьПоСпецификации(ДокументОбъект, ПараметрыСвязиСтрокТЧ, Спецификация = Неопределено, Количество = 1) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
		
	СтруктураИсточник = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, Количество, Спецификация");
	
	мИспользоватьТолькоСборочныеСпецификации = глЗначениеПеременной("ИспользоватьТолькоСборочныеСпецификации");
	
	Если Не ИспользоватьВидСпецификации(мИспользоватьТолькоСборочныеСпецификации)
	 ИЛИ Спецификация.ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная Тогда
	   
		Если Спецификация.ВыходныеИзделия.Количество() > 0 Тогда
			СтруктураИсточник.Вставить("Номенклатура", 					Спецификация.ВыходныеИзделия[0].Номенклатура);
	   		СтруктураИсточник.Вставить("ХарактеристикаНоменклатуры", 	Спецификация.ВыходныеИзделия[0].ХарактеристикаНоменклатуры);
			СтруктураИсточник.Вставить("ЕдиницаИзмерения", 				Спецификация.ВыходныеИзделия[0].ЕдиницаИзмерения);
			СтруктураИсточник.Вставить("Коэффициент", 					Спецификация.ВыходныеИзделия[0].ЕдиницаИзмерения.Коэффициент);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураИсточник.Вставить("Количество",   Количество);
	СтруктураИсточник.Вставить("Спецификация", Спецификация);
	
	РезультатРазузлования = Новый Структура;
	РезультатРазузлования.Вставить("ИсходныеКомплектующие");
	РезультатРазузлования.Вставить("ВыходныеИзделия");
	РезультатРазузлования.Вставить("ВозвратныеОтходы");
	
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДатаСпецификации", ДокументОбъект.Дата);
	Параметры.Вставить("КоличествоУровнейРазузлования", 1);
	Параметры.Вставить("Отбор", Отбор);
	
	РазузлованиеНоменклатуры.РазузловатьНоменклатуру(СтруктураИсточник, РезультатРазузлования, Параметры);
	
	ИсходныеКомплектующие = РезультатРазузлования.ИсходныеКомплектующие;
	ВыходныеИзделия       = РезультатРазузлования.ВыходныеИзделия;
	ТабОтходы             = РезультатРазузлования.ВозвратныеОтходы;
		
	Для Каждого Изделие Из ВыходныеИзделия Цикл
		
		Если НЕ ЗначениеЗаполнено(Изделие.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяДокумента = "АктОбОказанииПроизводственныхУслуг" Тогда
			НоваяСтрока = ДокументОбъект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Изделие);
			НоваяСтрока.ВесовойКоэффициент   = ?(Изделие.ДоляСтоимости = 0, 1, Изделие.ДоляСтоимости);
			НоваяСтрока.НоменклатурнаяГруппа = Изделие.Номенклатура.НоменклатурнаяГруппа;
			
			СчетаУчетаЗатрат = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ДокументОбъект.ПодразделениеОрганизации, Неопределено);
				
			НоваяСтрока.СчетЗатрат   = ?( ДокументОбъект.ОтражатьВБухгалтерскомУчете, СчетаУчетаЗатрат.СчетУчетаБУ, 0);
			
			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ДокументОбъект);
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(НоваяСтрока, ДокументОбъект, мВалютаРегламентированногоУчета); 
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ДокументОбъект);
			ДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Услуги", ДокументОбъект.ОтражатьВБухгалтерскомУчете);
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(НоваяСтрока, ДокументОбъект);
			
		Иначе
			НоваяСтрока = ДокументОбъект.Продукция.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Изделие);
			
			НоваяСтрока.ДоляСтоимости   	 = ?(Изделие.ДоляСтоимости = 0, 1, Изделие.ДоляСтоимости);
			
			Если ИмяДокумента = "ОтчетПроизводстваЗаСмену" Тогда
				НоваяСтрока.ВидВыпуска        	 = Перечисления.ВидыВыпуска.Выпуск;
				НоваяСтрока.Качество          	 = Справочники.Качество.Новый;
				НоваяСтрока.СтатусПартии 		 = Перечисления.СтатусыПартийТоваров.Продукция;
			
				НоваяСтрока.НаправлениеВыпуска = НоваяСтрока.Номенклатура.НаправлениеВыпуска;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.НаправлениеВыпуска) Тогда
					Если НоваяСтрока.Номенклатура.Услуга Тогда
						НоваяСтрока.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаЗатраты;
					Иначе
						НоваяСтрока.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаСклад;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Продукция", ДокументОбъект.ОтражатьВБухгалтерскомУчете);
		КонецЕсли;
		
		НоваяСтрока.Коэффициент = Изделие.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.Спецификация = Спецификация;
			
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ДокументОбъект);
		
		//заполняем параметры выпуска
		Если ИмяДокумента = "АктОбОказанииПроизводственныхУслуг" Тогда
			ИмяТабличнойЧасти = "Услуги";
		Иначе
			ИмяТабличнойЧасти = "Продукция";
		КонецЕсли;
		
		Для каждого ТекПараметр из Спецификация.ПараметрыВыпускаПродукции Цикл
			НоваяСтрокаПараметры = ДокументОбъект.ПараметрыВыпускаПродукции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПараметры, ТекПараметр);
			
			УчетСерийныхНомеров.ПроверитьМаксЗначениеКлюча(ПараметрыСвязиСтрокТЧ, ДокументОбъект, ИмяТабличнойЧасти);
			МаксКлюч = ПараметрыСвязиСтрокТЧ[ИмяТабличнойЧасти].СвободныйКлюч; // берется текущее «свободное» значение ключа
			ПараметрыСвязиСтрокТЧ[ИмяТабличнойЧасти].СвободныйКлюч = МаксКлюч + 1; // после чего «свободное» значение увеличивается на единицу
			ПараметрыСвязиСтрокТЧ[ИмяТабличнойЧасти].ФлагМодификации = Истина; // устанавливаем признак  модифицированности
			
			НоваяСтрокаПараметры.КлючСвязи = МаксКлюч;
			НоваяСтрока.КлючСвязи = МаксКлюч;
		КонецЦикла;
	КонецЦикла;
	
	Если ДокументОбъект.ИспользоватьМатериалы Тогда
		
		Для Каждого Комплектующая Из ИсходныеКомплектующие Цикл
			
			НоваяСтрока = ДокументОбъект.Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Комплектующая);
			
			НоваяСтрока.Коэффициент      	 = Комплектующая.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрока.Спецификация  		 = Спецификация;
			
			Если ИмяДокумента = "ОтчетПроизводстваЗаСмену" Тогда
				НоваяСтрока.ВидВыпуска       	 = Перечисления.ВидыВыпуска.Выпуск;
			КонецЕсли;
			
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ДокументОбъект, Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ИспользоватьВозвратныеОтходы") <> Неопределено и ДокументОбъект.ИспользоватьВозвратныеОтходы Тогда
		
		ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
		ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
		ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
		ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
		
		Для Каждого СтрокаОтходы Из ТабОтходы Цикл
			
			НоваяСтрока = ДокументОбъект.ВозвратныеОтходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтходы);
			
			НоваяСтрока.Коэффициент  = СтрокаОтходы.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрока.Спецификация = Спецификация;
			НоваяСтрока.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
			
			Если ИмяДокумента = "ОтчетПроизводстваЗаСмену" Тогда
				НоваяСтрока.ВидВыпуска        = Перечисления.ВидыВыпуска.Выпуск;
			КонецЕсли;
			
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ДокументОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"ВозвратныеОтходы");
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ДокументОбъект);
			
			ДокументОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, 
																  "ВозвратныеОтходы", 
																  ДокументОбъект.ОтражатьВБухгалтерскомУчете);
		КонецЦикла;
		
	КонецЕсли;

	
	Если МетаданныеДокумента.Реквизиты.Найти("ИспользоватьТехнологическиеОперации") <> Неопределено и ДокументОбъект.ИспользоватьТехнологическиеОперации Тогда
		ТабТехОпер = ДокументОбъект.ПолучитьТехОперации(Спецификация);
	Иначе
		ТабТехОпер = Неопределено;
	КонецЕсли;
	Если Не ТабТехОпер = Неопределено Тогда
		
		КурсУпр = МодульВалютногоУчета.ПолучитьКурсВалюты( мВалютаУправленческогоУчета,     ДокументОбъект.Дата);
		КурсБух = МодульВалютногоУчета.ПолучитьКурсВалюты( мВалютаРегламентированногоУчета, ДокументОбъект.Дата);
		
		Для Каждого СтрокаОпер Из ТабТехОпер Цикл
			
			ТехОпер = СтрокаОпер.ТехОперация;
			
		
			НоваяСтрока = ДокументОбъект.ТехнологическиеОперации.Добавить();
			НоваяСтрока.ТехнологическаяОперация = СтрокаОпер.ТехОперация;
			НоваяСтрока.Количество              = СтрокаОпер.Количество * Количество;
			НоваяСтрока.ВидВыпуска              = Перечисления.ВидыВыпуска.Выпуск;
			НоваяСтрока.НоменклатурнаяГруппа    = ТехОпер.ОсновнаяНоменклатурнаяГруппа;
			НоваяСтрока.СтатьяЗатрат            = ТехОпер.ОсновнаяСтатьяЗатратНаПроизводство;
			
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(
				НоваяСтрока,
				ДокументОбъект.ПодразделениеОрганизации,
				НоваяСтрока.СтатьяЗатрат);
			
			// Расчет стоимости тех. операции
			НоваяСтрока.Валюта                  = ?(НЕ ЗначениеЗаполнено(ТехОпер.Валюта), мВалютаУправленческогоУчета, ТехОпер.Валюта);
			НоваяСтрока.Расценка                = ТехОпер.Расценка;
			
			КурсВал = МодульВалютногоУчета.ПолучитьКурсВалюты( НоваяСтрока.Валюта, ДокументОбъект.Дата);
			
			НоваяСтрока.СуммаВВалютеРасценки    = СтрокаОпер.Количество * Количество * ТехОпер.Расценка;
			НоваяСтрока.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.СуммаВВалютеРасценки,
				НоваяСтрока.Валюта,
				мВалютаУправленческогоУчета,
				КурсВал.Курс,
				КурсУпр.Курс,
				КурсВал.Кратность,
				КурсУпр.Кратность);
				
			НоваяСтрока.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.СуммаВВалютеРасценки,
				НоваяСтрока.Валюта,
				мВалютаРегламентированногоУчета,
				КурсВал.Курс,
				КурсБух.Курс,
				КурсВал.Кратность,
				КурсБух.Кратность);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ЧАСТЕЙ РАСПРЕДЕНИЯ

// Процедура заполняет табличную часть "Распределение материалов" по данным табличных частей "Материалы" и "Продукция".
//
Процедура ЗаполнитьРаспределениеМатериаловНаПродукцию(СтруктураШапкиДокумента, Материалы, ТаблицаПродукция, РаспределениеМатериалов, СтруктураДопКолонок, Отбор, ПараметрыВыпускаПродукции = Неопределено, ЭтоВозвратныеОтходы = Ложь) Экспорт
	
	Перем ИспользоватьЗаказы;
	Перем ИспользоватьНаработку;
	Перем РаспределятьПропорциональноКоличеству;
	Перем ИспользоватьАналитикуНЗП;
	
	ИспользуютсяХарактеристикиНоменклатуры = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
	ОтражатьВБухгалтерскомУчете = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	ДатаСпецификации = СтруктураШапкиДокумента.Дата;
	
	Если НЕ СтруктураШапкиДокумента.Свойство("ИспользоватьЗаказы", ИспользоватьЗаказы) Тогда
		
		ИспользоватьЗаказы = Истина;
		
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.Свойство("ИспользоватьНаработку", ИспользоватьНаработку) Тогда
		
		ИспользоватьНаработку = Истина;
		
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.Свойство("РаспределятьПропорциональноКоличеству", РаспределятьПропорциональноКоличеству) Тогда
		
		РаспределятьПропорциональноКоличеству = Ложь;
		
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.Свойство("ИспользоватьАналитикуНЗП", ИспользоватьАналитикуНЗП) Тогда
		
		ИспользоватьАналитикуНЗП = Ложь;
		
	КонецЕсли;
	
	ТабличнаяЧастьПродукция = Новый ТаблицаЗначений;
	ТабличнаяЧастьПродукция.Колонки.Добавить("Номенклатура");
	ТабличнаяЧастьПродукция.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТабличнаяЧастьПродукция.Колонки.Добавить("СерияНоменклатуры");
	ТабличнаяЧастьПродукция.Колонки.Добавить("ЕдиницаИзмерения");
	ТабличнаяЧастьПродукция.Колонки.Добавить("Коэффициент",	ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10, 3));
	ТабличнаяЧастьПродукция.Колонки.Добавить("Спецификация");
	ТабличнаяЧастьПродукция.Колонки.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	ТабличнаяЧастьПродукция.Колонки.Добавить("КлючСвязи", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 0));
	
	ДопКолонки = "";
	
	Для каждого ДопКолонка из СтруктураДопКолонок Цикл
		
		Если ТабличнаяЧастьПродукция.Колонки.Найти(ДопКолонка.Ключ) = Неопределено Тогда
			
			ТабличнаяЧастьПродукция.Колонки.Добавить(ДопКолонка.Ключ);
			ДопКолонки = ДопКолонки + ", " + ДопКолонка.Ключ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаИсточник = ТабличнаяЧастьПродукция.СкопироватьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродукция, ТабличнаяЧастьПродукция);
	ТабличнаяЧастьПродукция.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ЕдиницаИзмерения, Спецификация, Коэффициент, КлючСвязи" + ДопКолонки, "Количество");
	
	ТаблицаМатериалыПродукция = Новый ТаблицаЗначений;
	ТаблицаМатериалыПродукция.Колонки.Добавить("Номенклатура");
	ТаблицаМатериалыПродукция.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаМатериалыПродукция.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаМатериалыПродукция.Колонки.Добавить("Количество");
	ТаблицаМатериалыПродукция.Колонки.Добавить("Продукция");
	ТаблицаМатериалыПродукция.Колонки.Добавить("ХарактеристикаПродукции");
	ТаблицаМатериалыПродукция.Колонки.Добавить("Спецификация");
	
	МассивТиповЗаказа = Новый Массив;
	МассивТиповЗаказа.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТиповЗаказа.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	
	ТаблицаПотребностей = Новый ТаблицаЗначений;
	ТаблицаПотребностей.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПотребностей.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПотребностей.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаПотребностей.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
	ТаблицаПотребностей.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаПотребностей.Колонки.Добавить("Заказ", Новый ОписаниеТипов(МассивТиповЗаказа));
	ТаблицаПотребностей.Колонки.Добавить("ЗаказВыпуска", Новый ОписаниеТипов(МассивТиповЗаказа));
	ТаблицаПотребностей.Колонки.Добавить("Материал", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПотребностей.Колонки.Добавить("ХарактеристикаМатериала", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПотребностей.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТаблицаПотребностей.Колонки.Добавить("ВидВыпуска", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыВыпуска"));
	ТаблицаПотребностей.Колонки.Добавить("СчетЗатрат", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаПотребностей.Колонки.Добавить("НалоговоеНазначение", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаПотребностей.Колонки.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаПотребностей.Колонки.Добавить("КоличествоМатериала", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаПотребностей.Колонки.Добавить("ДоляСтоимости", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаИсточник.Колонки.Добавить("НомерСтрокиПродукция", Новый ОписаниеТипов("Число"));
	
	Для каждого ДопКолонка из СтруктураДопКолонок Цикл
		
		Если ТаблицаПотребностей.Колонки.Найти(ДопКолонка.Ключ) = Неопределено Тогда
			
			ТаблицаПотребностей.Колонки.Добавить(ДопКолонка.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоВозвратныеОтходы Тогда
		
		РезультатРазузлования = Новый Структура("ВозвратныеОтходы");
		
	Иначе
		
		РезультатРазузлования = Новый Структура("Потребности");
		
	КонецЕсли;
	
	Параметры = Новый Массив;
	
	Для каждого СтрокаТабличнойЧасти из ТабличнаяЧастьПродукция Цикл
		
		// Добавим строку продукции в таблицу потребностей.
		НоваяСтрока = ТаблицаПотребностей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		НоваяСтрока.Количество = СтрокаТабличнойЧасти.Количество * ?(СтрокаТабличнойЧасти.Коэффициент <> 0, СтрокаТабличнойЧасти.Коэффициент, 1);
		НоваяСтрока.Заказ = ?(НЕ ЗначениеЗаполнено(НоваяСтрока.Заказ), Неопределено, НоваяСтрока.Заказ);
		НоваяСтрока.ЗаказВыпуска = ?(НЕ ЗначениеЗаполнено(НоваяСтрока.ЗаказВыпуска), Неопределено, НоваяСтрока.ЗаказВыпуска);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) ИЛИ СтрокаТабличнойЧасти.Количество = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаИсточник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		НоваяСтрока.НомерСтрокиПродукция = ТабличнаяЧастьПродукция.Индекс(СтрокаТабличнойЧасти);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			
		КонецЕсли;
		
		ПараметрыВыпуска = Новый Соответствие;
		
		Если ПараметрыВыпускаПродукции <> Неопределено И СтрокаТабличнойЧасти.КлючСвязи <> 0 Тогда
			
			Для каждого ПараметрВыпуска из ПараметрыВыпускаПродукции Цикл
				
				Если ПараметрВыпуска.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи Тогда
					
					ПараметрыВыпуска.Вставить(ПараметрВыпуска.ВидПараметра.Наименование, ПараметрВыпуска.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыТекущейСтроки = Новый Структура("ПараметрыВыпуска, КоличествоУровнейРазузлования, ДатаСпецификации, Отбор, РазмещатьВСопутствующихИзделиях");
		ПараметрыТекущейСтроки.Отбор = Отбор;
		ПараметрыТекущейСтроки.РазмещатьВСопутствующихИзделиях = Истина;
		
		ПараметрыТекущейСтроки.ПараметрыВыпуска = ПараметрыВыпуска;
		ПараметрыТекущейСтроки.КоличествоУровнейРазузлования = 1;
		ПараметрыТекущейСтроки.ДатаСпецификации = ДатаСпецификации;
		
		Параметры.Добавить(ПараметрыТекущейСтроки);
		
	КонецЦикла;
		
	МассивОшибок = РазузлованиеНоменклатуры.ПолучитьПотребность(ТаблицаИсточник, РезультатРазузлования, Параметры);
	
	Если МассивОшибок.Количество() > 0 Тогда
		
		Для каждого Ошибка из МассивОшибок Цикл
			
			ОбщегоНазначения.Сообщение("Ошибка: " + Ошибка.Причина, Ошибка.СтатусОшибки);
			ОбщегоНазначения.Сообщение(" Спецификация: " + Ошибка.Спецификация);
			ОбщегоНазначения.Сообщение(" Номер строки: " + Ошибка.НомерСтроки);
			ОбщегоНазначения.Сообщение(" Описание ошибки: " + Ошибка.ОписаниеОшибки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Потребности = ?(ЭтоВозвратныеОтходы, РезультатРазузлования.ВозвратныеОтходы, РезультатРазузлования.Потребности);
	
	Если Потребности = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЭтоВозвратныеОтходы Тогда
	
		// Добавим возможные аналоги материалов.
		Для ИндексСтроки = 0 по Потребности.Количество() - 1 Цикл
			
			Потребность = Потребности[ИндексСтроки];
			
			ТаблицаМатериалыПродукция.Очистить();
			
			НоваяСтрока = ТаблицаМатериалыПродукция.Добавить();
			НоваяСтрока.Номенклатура = Потребность.Материал;
			НоваяСтрока.ХарактеристикаНоменклатуры = Потребность.ХарактеристикаМатериала;
			НоваяСтрока.ЕдиницаИзмерения = Потребность.ЕдиницаИзмеренияМатериала;
			НоваяСтрока.Количество = Потребность.КоличествоМатериала;
			НоваяСтрока.Продукция = Потребность.Номенклатура;
			НоваяСтрока.ХарактеристикаПродукции = Потребность.ХарактеристикаНоменклатуры;
			НоваяСтрока.Спецификация = Потребность.Спецификация;
			
			ТаблицаАналогов = УправлениеПланированием.ПолучитьАналогиНоменклатуры(ТаблицаМатериалыПродукция);
			
			Для каждого СтрокаАналога из ТаблицаАналогов Цикл
				
				НоваяСтрока = Потребности.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Потребность);
				
				НоваяСтрока.Материал = СтрокаАналога.Аналог;
				НоваяСтрока.ХарактеристикаМатериала = СтрокаАналога.ХарактеристикаАналога;
				НоваяСтрока.КоличествоМатериала = СтрокаАналога.КоличествоАналога;
				
			КонецЦикла;
					
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ДопКолонка из СтруктураДопКолонок Цикл
		
		Если Потребности.Колонки.Найти(ДопКолонка.Ключ) = Неопределено Тогда
			
			Потребности.Колонки.Добавить(ДопКолонка.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти из ТаблицаИсточник Цикл
		
		НайденныеСтрокиПотребности = Потребности.НайтиСтроки(Новый Структура("ИндексСтрокиИсточника", ТаблицаИсточник.Индекс(СтрокаТабличнойЧасти)));
		
		Для каждого НайденнаяСтрокаПотребности из НайденныеСтрокиПотребности Цикл
		
			Для каждого ДопКолонка из СтруктураДопКолонок Цикл
				
				ЗначениеКолонки = СтрокаТабличнойЧасти[ДопКолонка.Ключ];
				
				Если ДопКолонка.Ключ = "Заказ" ИЛИ ДопКолонка.Ключ = "ЗаказВыпуска" Тогда
					
					ЗначениеКолонки = ?(ЗначениеЗаполнено(ЗначениеКолонки), ЗначениеКолонки, Неопределено);
					
				КонецЕсли;
				
				НайденнаяСтрокаПотребности[ДопКолонка.Ключ] = ЗначениеКолонки;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Потребности, ТаблицаПотребностей);
	
	ТаблицаПотребностей.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Спецификация,
		|Материал, ХарактеристикаМатериала, СтатьяЗатрат, ВидВыпуска, Заказ, ЗаказВыпуска" + ДопКолонки, "Количество, КоличествоМатериала");
		
	Колонки = ТаблицаПотребностей.Колонки;
	Колонки.Номенклатура.Имя = "Продукция";
	Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаПродукции";
	Колонки.СерияНоменклатуры.Имя = "СерияПродукции";
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаПотребностей);
	
	Отбор = ПостроительЗапроса.Отбор;
	Отбор.Добавить("Материал");
	Отбор.Добавить("ХарактеристикаМатериала");
	Отбор.Добавить("Спецификация");
	Отбор.Добавить("НоменклатурнаяГруппа");
	Отбор.Добавить("Заказ");
	Отбор.Добавить("ЗаказВыпуска");
	Отбор.Добавить("ВидВыпуска");
	Отбор.Добавить("СчетЗатрат");
	Отбор.Добавить("СтатьяЗатрат");
	Отбор.Добавить("НалоговоеНазначение", "НалоговоеНазначение");
	
	
	Отбор.Материал.Использование = Истина;
	Отбор.ХарактеристикаМатериала.Использование = ИспользуютсяХарактеристикиНоменклатуры;
	
	МассивКоэф = Новый Массив;
	
	ТаблицаМатериалы = Материалы.Выгрузить();
	ТаблицаМатериалыКонтроль = ТаблицаМатериалы.Скопировать();
	
	ЕстьНоменклатурнаяГруппа = Истина;
	ЕстьПодразделениеНЗП = Истина;
	Колонки = ТаблицаМатериалы.Колонки;
	
	Если Колонки.Найти("НоменклатурнаяГруппа") = Неопределено Тогда
		
		Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
		ЕстьНоменклатурнаяГруппа = Ложь;
		
	КонецЕсли;
	
	Если Колонки.Найти("ПодразделениеНЗП") = Неопределено Тогда
		
		ЕстьПодразделениеНЗП = Ложь;
		
	КонецЕсли;
	
	Если Колонки.Найти("ВидВыпуска") = Неопределено Тогда
		
		Колонки.Добавить("ВидВыпуска", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыВыпуска"));
		
	КонецЕсли;
	
	Если Колонки.Найти("Спецификация") = Неопределено Тогда
		
		Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
		
	КонецЕсли;
	
	Если Колонки.Найти("Заказ") = Неопределено Тогда
		
		Колонки.Добавить("Заказ", Новый ОписаниеТипов(МассивТиповЗаказа));
		
	КонецЕсли;
	
	Если Колонки.Найти("ЗаказВыпуска") = Неопределено Тогда
		
		Колонки.Добавить("ЗаказВыпуска", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
		
	КонецЕсли;
	
	Если Колонки.Найти("СчетЗатрат") = Неопределено Тогда
		
		Колонки.Добавить("СчетЗатрат", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		
	КонецЕсли;
	
	Если Колонки.Найти("НалоговоеНазначение") = Неопределено Тогда
	  	
	 	Колонки.Добавить("НалоговоеНазначение", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		
	КонецЕсли;
	
	// Определим признаки заполнения доп. колонок.
	ЕстьАналитикаНЗП = Ложь;
	ЕстьЕдиницаИзмерения = Ложь;
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РаспределениеМатериаловНаВыпуск") Тогда
		
		ЕстьАналитикаНЗП = Истина;
		ИспользоватьАналитикуНЗП = Истина;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		
		ЕстьАналитикаНЗП = СтруктураШапкиДокумента.ИспользоватьАналитикуНЗП;
		
	ИначеЕсли ЭтоВозвратныеОтходы И ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки") Тогда
		
		ЕстьЕдиницаИзмерения = Ложь;
		
	Иначе
		
		ЕстьЕдиницаИзмерения = Истина;
		
	КонецЕсли;
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РаспределениеМатериаловНаВыпуск") ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		
		ЕстьЕдиницаИзмерения = Истина;
		
	КонецЕсли;
	
	Если РаспределятьПропорциональноКоличеству Тогда
		ИмяРеквизитаДляДоли = "Количество";
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		
		Если ТаблицаПродукция.Итог("ВесовойКоэффициент") > 0 Тогда
			
			ИмяРеквизитаДляДоли = "ВесовойКоэффициент";
			
		Иначе
			
			ИмяРеквизитаДляДоли = "Количество";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РаспределениеМатериаловНаВыпуск") Тогда
		
		ИмяРеквизитаДляДоли = "Количество";
		
	Иначе
		
		Если ТаблицаПродукция.Итог("ДоляСтоимости") > 0 Тогда
			
			ИмяРеквизитаДляДоли = "ДоляСтоимости";
			
		Иначе
			
			ИмяРеквизитаДляДоли = "Количество";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоВозвратныеОтходыПоступлениеТоваровИзПереработки = Ложь;
	Если ЭтоВозвратныеОтходы И ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки") Тогда
		ЭтоВозвратныеОтходыПоступлениеТоваровИзПереработки = Истина;
	КонецЕсли;	
	
	Для каждого СтрокаМатериала из ТаблицаМатериалы Цикл
		
		Отбор.Заказ.Значение = ?(НЕ ЗначениеЗаполнено(СтрокаМатериала.Заказ), Неопределено, СтрокаМатериала.Заказ);
		Отбор.Заказ.Использование = ИспользоватьЗаказы И (Не ЕстьАналитикаНЗП ИЛИ ЗначениеЗаполнено(СтрокаМатериала.Заказ));
		
		Отбор.ЗаказВыпуска.Значение = ?(НЕ ЗначениеЗаполнено(СтрокаМатериала.ЗаказВыпуска) ИЛИ ТипЗнч(СтрокаМатериала.ЗаказВыпуска) <> Тип("ДокументСсылка.ЗаказНаПроизводство"), Неопределено, СтрокаМатериала.ЗаказВыпуска);
		Отбор.ЗаказВыпуска.Использование = ИспользоватьЗаказы;
		
		Отбор.ВидВыпуска.Значение = СтрокаМатериала.ВидВыпуска;
		Отбор.ВидВыпуска.Использование = ИспользоватьНаработку И ЗначениеЗаполнено(СтрокаМатериала.ВидВыпуска);
		
		Отбор.НоменклатурнаяГруппа.Значение = СтрокаМатериала.НоменклатурнаяГруппа;
		Отбор.НоменклатурнаяГруппа.Использование = ИспользоватьАналитикуНЗП И ((НЕ ЕстьАналитикаНЗП И ЕстьНоменклатурнаяГруппа) ИЛИ ЗначениеЗаполнено(СтрокаМатериала.НоменклатурнаяГруппа));
			
		Отбор.СчетЗатрат.Значение = СтрокаМатериала.СчетЗатрат;
		
		Отбор.СтатьяЗатрат.Значение = СтрокаМатериала.СтатьяЗатрат;
		Отбор.СтатьяЗатрат.Использование = Истина;
		
		Отбор.НалоговоеНазначение.Значение = СтрокаМатериала.НалоговоеНазначение;
		
		Если СтрокаМатериала.СтатьяЗатрат.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			
			Отбор.СчетЗатрат.Использование = ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(СтрокаМатериала.СчетЗатрат);
			Отбор.НалоговоеНазначение.Использование = ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(СтрокаМатериала.НалоговоеНазначение);
			
		Иначе
			
			Отбор.СчетЗатрат.Использование = Ложь;
			Отбор.НалоговоеНазначение.Использование = Ложь;
			
		КонецЕсли;
			
		// Если для материала указана спецификация, то распределяем по строкам табличной части "Продукция" с учетом потребностей.
		Если ЗначениеЗаполнено(СтрокаМатериала.Спецификация) Тогда
			
			Отбор.Спецификация.Использование = Истина;
			Отбор.Спецификация.Значение = СтрокаМатериала.Спецификация;
			
		// Если для материала спецификация не указана, то распределяем по потребностям в исходных комплектующих.
		Иначе
			
			Отбор.Спецификация.Использование = Ложь;
			
		КонецЕсли;
		
		Отбор.Материал.Значение = СтрокаМатериала.Номенклатура;
		Отбор.ХарактеристикаМатериала.Значение = СтрокаМатериала.ХарактеристикаНоменклатуры;
		
		РаспределятьПоДолеСтоимости = Ложь;
		
		ПостроительЗапроса.Выполнить();
		РезультатЗапроса = ПостроительЗапроса.Результат;
		
		Если РезультатЗапроса.Пустой() Тогда
			
			// Если не удалось распределить материалы по конкретной статья затрат,
			// то распределяем без учета статьи затрат.
			Отбор.СтатьяЗатрат.Использование = Ложь;
			
			ПостроительЗапроса.Выполнить();
			РезультатЗапроса = ПостроительЗапроса.Результат;
		
			Если РезультатЗапроса.Пустой() Тогда
				
				// Если не удалось распределить материал, и для материала указана спецификация, 
				// то распределяем по строкам табличной части "Продукция" без учета потребностей.
				Если ЗначениеЗаполнено(СтрокаМатериала.Спецификация) Тогда
					
					Отбор.Спецификация.Значение = СтрокаМатериала.Спецификация;
					
				// Если не удалось распределить материал, и для материала не указана спецификация,
				// распределяем его по продукции, для которой не указана спецификация.
				Иначе
					
					Отбор.Спецификация.Значение = Справочники.СпецификацииНоменклатуры.ПустаяСсылка();
					
				КонецЕсли;
				
				Отбор.Спецификация.Использование = Истина;
						
				Отбор.Материал.Значение = Справочники.Номенклатура.ПустаяСсылка();
				Отбор.ХарактеристикаМатериала.Значение = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
						
				РаспределятьПоДолеСтоимости = Истина;
					
				ПостроительЗапроса.Выполнить();
				РезультатЗапроса = ПостроительЗапроса.Результат;
					
				Если РезультатЗапроса.Пустой() Тогда
					
					// Если не удалось распределить материал, то распределим его по всей продукции.
					Отбор.Спецификация.Использование = Ложь;
					
					ПостроительЗапроса.Выполнить();
					РезультатЗапроса = ПостроительЗапроса.Результат;
					
					Если РезультатЗапроса.Пустой() Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		МассивКоэф.Очистить();
		Обход = РезультатЗапроса.Выбрать();
		
		Пока Обход.Следующий() Цикл
			
			Если РаспределятьПоДолеСтоимости Тогда
				
				МассивКоэф.Добавить(Обход[ИмяРеквизитаДляДоли]);
				
			Иначе
				
				МассивКоэф.Добавить(Обход.КоличествоМатериала);
				
			КонецЕсли;
			
		КонецЦикла;
		
		МассивКоличества = ОбщегоНазначения.РаспределитьПропорционально(СтрокаМатериала.Количество, МассивКоэф, 3);
		
		Если МассивКоличества = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТаблицаМатериалыКонтроль = ТаблицаМатериалыКонтроль[СтрокаМатериала.НомерСтроки - 1];
		
		К = 0;
		Обход.Сбросить();
		
		Пока Обход.Следующий() Цикл
			
			НоваяСтрока = РаспределениеМатериалов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Обход);
			
			НоваяСтрока.Номенклатура = СтрокаМатериала.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаМатериала.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры = СтрокаМатериала.СерияНоменклатуры;
			НоваяСтрока.СтатьяЗатрат = СтрокаМатериала.СтатьяЗатрат;
			
			Если ЕстьЕдиницаИзмерения Тогда
				
				НоваяСтрока.ЕдиницаИзмерения = СтрокаМатериала.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент	= СтрокаМатериала.Коэффициент;
				
			КонецЕсли;
			
			Если ЕстьАналитикаНЗП Тогда
				
				НоваяСтрока.НоменклатурнаяГруппаНЗП	= СтрокаМатериала.НоменклатурнаяГруппа;
				НоваяСтрока.ЗаказНЗП = СтрокаМатериала.Заказ;
				
			КонецЕсли;
			
			Если ЕстьПодразделениеНЗП Тогда
				
				НоваяСтрока.ПодразделениеНЗП = СтрокаМатериала.ПодразделениеНЗП;
				НоваяСтрока.ПодразделениеОрганизацииНЗП = СтрокаМатериала.ПодразделениеОрганизацииНЗП;
				
			КонецЕсли;
			
			НоваяСтрока.Количество = МассивКоличества[К];
			
			СтрокаТаблицаМатериалыКонтроль.Количество = СтрокаТаблицаМатериалыКонтроль.Количество - НоваяСтрока.Количество;
			
			Если ЭтоВозвратныеОтходыПоступлениеТоваровИзПереработки Тогда
				НоваяСтрока.Количество = НоваяСтрока.Количество * СтрокаМатериала.Коэффициент;
			КонецЕсли;	
			
			К = К + 1;

		КонецЦикла;
		
	КонецЦикла;
	
	#Если Клиент Тогда
		
		ПредставлениеДокумента = "Заполнение документа: " + СокрЛП(СтруктураШапкиДокумента.Ссылка);
		ТекстНазвание = ?(ЭтоВозвратныеОтходы, " возвратного отхода """, " материала """);
		
		Для каждого СтрокаМатериалыКонтроль из ТаблицаМатериалыКонтроль Цикл
			
			Если СтрокаМатериалыКонтроль.Количество > 0 Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось распределить " + СтрокаМатериалыКонтроль.Количество + " " + СтрокаМатериалыКонтроль.Номенклатура.ЕдиницаХраненияОстатков + ТекстНазвание + СтрокаМатериалыКонтроль.Номенклатура + """ (строка № " + СтрокаМатериалыКонтроль.НомерСтроки + ")", Ложь, ПредставлениеДокумента);
				
			КонецЕсли;
			
		КонецЦикла;
		
	#КонецЕсли
	
КонецПроцедуры // ЗаполнитьРаспределениеМатериаловНаПродукцию()

// Процедура заполняет табличную часть "Распределение возвратных отходов" по данным табличных частей "Возвратные отходы" и "Продукция".
//
Процедура ЗаполнитьРаспределениеВозвратныхОтходовНаПродукцию(СтруктураШапкиДокумента, ВозвратныеОтходы, ТаблицаПродукция, РаспределениеВозвратныхОтходов, СтруктураДопКолонок, Отбор, ПараметрыВыпускаПродукции = Неопределено) Экспорт
	
	ЗаполнитьРаспределениеМатериаловНаПродукцию(СтруктураШапкиДокумента, ВозвратныеОтходы, ТаблицаПродукция, РаспределениеВозвратныхОтходов, СтруктураДопКолонок, Отбор, ПараметрыВыпускаПродукции, Истина);
		
КонецПроцедуры // ЗаполнитьРаспределениеВозвратныхОтходовНаПродукцию()

// Функция получает таблицу технологических операций, применяемых для выпуска продукции по указанным спецификациям.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ТаблицаПродукции - ТаблицаЗначений - Таблица выпущенной продукции документа
//
Функция ПолучитьТаблицуТехнологическихОпераций(
	СтруктураШапкиДокумента,
	ТаблицаПродукции
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВидВыпуска,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	НоменклатурнаяГруппа,
	|	Спецификация,
	|	Заказ,
	|	СчетЗатрат,
	|	НалоговоеНазначение,
	|	ЕдиницаИзмерения,
	|	Коэффициент,
	|	ДоляСтоимости,	
	|	Количество
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаПродукции КАК ТаблицаПродукции
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ВидВыпуска,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.ХарактеристикаНоменклатуры,
	|	ТаблицаДокумента.СерияНоменклатуры,
	|	ТаблицаДокумента.НоменклатурнаяГруппа,
	|	ТаблицаДокумента.Спецификация,
	|	ТаблицаДокумента.Заказ,
	|	ТаблицаДокумента.СчетЗатрат,
	|	ТаблицаДокумента.НалоговоеНазначение,
	|	ТаблицаДокумента.ДоляСтоимости,
	|
	|	ЕСТЬNULL(Маршрут.ТехнологическаяОперация, Неопределено) КАК ТехнологическаяОперация,
	|	СУММА(		
	|		ЕСТЬNULL(Маршрут.Количество, 1) *
	|		ТаблицаДокумента.Количество * 
	|		ВЫБОР КОГДА Не ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|			И ТаблицаДокумента.Коэффициент <> 0
	|		ТОГДА 
	|			ТаблицаДокумента.Коэффициент / ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|		ИНАЧЕ
	|			1
	|		КОНЕЦ
	|	) КАК Количество
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ТехнологическиеКартыСпецификацийПланирования.СрезПоследних(&КонДата,
	|			Спецификация В (
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Спецификация
	|				ИЗ
	|                  	ТаблицаДокумента КАК ТаблицаДокумента
	|				)
	|		) КАК РегистрТехнологическиеКарты
	|	ПО
	|		ТаблицаДокумента.Спецификация = РегистрТехнологическиеКарты.Спецификация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ТехнологическиеКартыПроизводства.Маршрут КАК Маршрут
	|	ПО
	|		Маршрут.Ссылка = РегистрТехнологическиеКарты.ТехнологическаяКарта
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ВидВыпуска,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.ХарактеристикаНоменклатуры,
	|	ТаблицаДокумента.СерияНоменклатуры,
	|	ТаблицаДокумента.НоменклатурнаяГруппа,
	|	ТаблицаДокумента.Спецификация,
	|	ТаблицаДокумента.Заказ,
	|	ТаблицаДокумента.СчетЗатрат,
	|	ТаблицаДокумента.НалоговоеНазначение,
	|	ТаблицаДокумента.Коэффициент,
	|	ТаблицаДокумента.ДоляСтоимости,
	|	Маршрут.ТехнологическаяОперация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.ВидВыпуска,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.ХарактеристикаНоменклатуры,
	|	ТаблицаДокумента.СерияНоменклатуры,
	|	ТаблицаДокумента.НоменклатурнаяГруппа,
	|	ТаблицаДокумента.Спецификация,
	|	ТаблицаДокумента.Заказ,
	|	ТаблицаДокумента.СчетЗатрат,
	|	ТаблицаДокумента.НалоговоеНазначение,
	|	ТаблицаДокумента.Коэффициент,
	|	ТаблицаДокумента.ДоляСтоимости,
	|	Маршрут.ТехнологическаяОперация
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ТаблицаДокумента
	|
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата", Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ТаблицаПродукции", ТаблицаПродукции);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТехнологическихОпераций = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаТехнологическихОпераций;
	
КонецФункции // ПолучитьТаблицуТехнологическихОпераций()

// Процедура заполняет табличную часть "Распределение прочих затрат" по данным табличных частей "Прочие затраты" и "Продукция".
//
Процедура ЗаполнитьРаспределениеПрочихЗатратНаПродукцию(СтруктураШапкиДокумента, ПрочиеЗатраты, Продукция, РаспределениеПрочихЗатрат) Экспорт
	
	Перем ИспользоватьЗаказы, ИспользоватьНаработку, РаспределятьПропорциональноКоличеству;
	
	ОтражатьВУправленческомУчете = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	ОтражатьВБухгалтерскомУчете = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	
	Если Не СтруктураШапкиДокумента.Свойство("ИспользоватьЗаказы", ИспользоватьЗаказы) Тогда
		ИспользоватьЗаказы = Истина;
	КонецЕсли;
	Если Не СтруктураШапкиДокумента.Свойство("ИспользоватьНаработку", ИспользоватьНаработку) Тогда
		ИспользоватьНаработку = Ложь;
	КонецЕсли;
	Если Не СтруктураШапкиДокумента.Свойство("РаспределятьПропорциональноКоличеству", РаспределятьПропорциональноКоличеству) Тогда
		РаспределятьПропорциональноКоличеству = Ложь;
	КонецЕсли;
	Если Не СтруктураШапкиДокумента.Свойство("ИспользоватьРасширеннуюАналитику") Тогда
		ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
			И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата);
			
		СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ОтражатьВУправленческомУчете", 	ОтражатьВУправленческомУчете);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете", 	ОтражатьВБухгалтерскомУчете);
	СтруктураПараметров.Вставить("ОтражатьВМеждународномУчете", 	Ложь);
	СтруктураПараметров.Вставить("Организация", 					СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Подразделение", 					СтруктураШапкиДокумента.Подразделение);
	СтруктураПараметров.Вставить("ПодразделениеОрганизации", 		СтруктураШапкиДокумента.ПодразделениеОрганизации);
	
	СтруктураПараметров.Вставить("Дата", КонецМесяца(СтруктураШапкиДокумента.Дата));
	СтруктураПараметров.Вставить("БазаРаспределенияЗатрат");
	СтруктураПараметров.Вставить("ПоказательБазыРаспределения");
	СтруктураПараметров.Вставить("ТипЦен");
	СтруктураПараметров.Вставить("РаспределятьНаСобственнуюПродукцию");
	СтруктураПараметров.Вставить("РаспределятьНаПродукциюИзДавальческогоСырья");
	СтруктураПараметров.Вставить("РаспределятьНаПродукциюСтороннегоПереработчика");
	СтруктураПараметров.Вставить("РаспределятьНаНаработку");
	СтруктураПараметров.Вставить("ИзменитьНаКоэффициент");
	СтруктураПараметров.Вставить("Коэффициент");
	СтруктураПараметров.Вставить("ИзменитьНаПроцент");
	СтруктураПараметров.Вставить("Процент");
	СтруктураПараметров.Вставить("ОкруглитьДо");
	СтруктураПараметров.Вставить("ПорядокОкругления");
	СтруктураПараметров.Вставить("СпособРаспределенияЗатрат");
	СтруктураПараметров.Вставить("ОсновноеСырье");
	СтруктураПараметров.Вставить("ТипФильтраПриРаспределенииЗатратНаВыпуск");
	СтруктураПараметров.Вставить("Фильтры");
	
	СтруктураПараметров.Вставить("СтатьяЗатрат");
    СтруктураПараметров.Вставить("Фильтры");
	СтруктураПараметров.Вставить("ЕстьБазаРаспределенияПоСтоимости",ложь);
    СтруктураПараметров.Вставить("ЕстьБазаПоОбъемуПродаж",ложь);

	ТаблицаПродукцииФильтр = Продукция.Выгрузить();
	Если ТаблицаПродукцииФильтр.Колонки.Найти("ХарактеристикаНоменклатуры") = Неопределено Тогда
		ТаблицаПродукцииФильтр.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;

	ТаблицаПродукцииФильтр.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "");
	ТаблицаПродукцииФильтр.Колонки.Номенклатура.Имя = "Продукция";
	ТаблицаПродукцииФильтр.Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаПродукции";
	
	// Формирование списка продукции.
	МассивПродукции = ТаблицаПродукцииФильтр.ВыгрузитьКолонку("Продукция");
	СтруктураПараметров.Вставить("МассивПродукции", МассивПродукции);
	
	// Формирование списка характеристик.
	МассивХарактеристик = ТаблицаПродукцииФильтр.ВыгрузитьКолонку("ХарактеристикаПродукции");
	СтруктураПараметров.Вставить("МассивХарактеристик", МассивХарактеристик);
	
	// Формирование таблицы номенклатурных групп.
	ТаблицаНоменклатурныхГруппФильтр = Продукция.Выгрузить();
	ТаблицаНоменклатурныхГруппФильтр.Свернуть("НоменклатурнаяГруппа", "");
	
	ТаблицаПрочиеЗатраты = ПрочиеЗатраты.Выгрузить();
	Если ТаблицаПрочиеЗатраты.Колонки.Найти("СпособРаспределенияЗатратНаВыпуск") = Неопределено Тогда
		ТаблицаПрочиеЗатраты.Колонки.Добавить("СпособРаспределенияЗатратНаВыпуск", Новый ОписаниеТипов("СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск"));
	КонецЕсли;
	
	ТаблицаПрочиеЗатраты.Свернуть("СпособРаспределенияЗатратНаВыпуск, СтатьяЗатрат", "");
	
	// В таблице необходимо оставить статьи затрат, распределяемые по нормативам.
	Для Каждого Строка Из ТаблицаПрочиеЗатраты Цикл
		Если Строка.СпособРаспределенияЗатратНаВыпуск.БазаРаспределенияЗатрат <> Перечисления.БазыРаспределенияЗатрат.ПоНормативам Тогда
			Строка.СтатьяЗатрат = Неопределено;
		КонецЕсли;
	КонецЦикла;
	ТаблицаПрочиеЗатраты.Свернуть("СпособРаспределенияЗатратНаВыпуск, СтатьяЗатрат", "");
	ТаблицаПрочиеЗатраты.Колонки.Добавить("Фильтры", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаПрочиеЗатраты.Колонки.Добавить("ТипФильтраПриРаспределенииЗатратНаВыпуск", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыФильтровПриРаспределенииЗатратНаВыпуск"));

	КоличествоСтрокПрочиеЗатраты = ТаблицаПрочиеЗатраты.Количество();
	Для ОбратныйИндекс = 1 По КоличествоСтрокПрочиеЗатраты цикл
		Строка = ТаблицаПрочиеЗатраты[КоличествоСтрокПрочиеЗатраты - ОбратныйИндекс];
		СпособРаспределенияЗатрат = Строка.СпособРаспределенияЗатратНаВыпуск;
		
		Если НЕ ЗначениеЗаполнено(СпособРаспределенияЗатрат) Тогда
			ТаблицаПрочиеЗатраты.Удалить(Строка);
			Продолжить;
		КонецЕсли;
		Если не СтруктураПараметров.ЕстьБазаРаспределенияПоСтоимости И
			(СпособРаспределенияЗатрат.БазаРаспределенияЗатрат = Перечисления.БазыРаспределенияЗатрат.ПоСтоимостиЗатрат
			ИЛИ СпособРаспределенияЗатрат.БазаРаспределенияЗатрат = Перечисления.БазыРаспределенияЗатрат.ПоОсновномуСырью
			) Тогда
			СтруктураПараметров.ЕстьБазаРаспределенияПоСтоимости = истина
		КонецЕсли;
		Если не СтруктураПараметров.ЕстьБазаПоОбъемуПродаж И
			(СпособРаспределенияЗатрат.БазаРаспределенияЗатрат = Перечисления.БазыРаспределенияЗатрат.ПоОбъемуПродаж
			ИЛИ СпособРаспределенияЗатрат.ПоказательБазыРаспределения = Перечисления.ВидыПоказателейБазыРаспределения.ФактическаяЦенаРеализации
			) Тогда
			СтруктураПараметров.ЕстьБазаПоОбъемуПродаж = истина
		КонецЕсли;

		СпособРаспределенияФильтры = СпособРаспределенияЗатрат.Фильтры.Выгрузить();
		Если СпособРаспределенияФильтры.Количество() > 0 Тогда
			КолвоЭлементов = СпособРаспределенияФильтры.Количество();
			Для ОбратныйИндексФильтры = 1 По КолвоЭлементов Цикл
   				СтрокаТаблицыФильтры = СпособРаспределенияФильтры[КолвоЭлементов - ОбратныйИндексФильтры];
  
				Если СпособРаспределенияЗатрат.ТипФильтраПриРаспределенииЗатратНаВыпуск = Перечисления.ТипыФильтровПриРаспределенииЗатратНаВыпуск.Продукция Тогда
					Если ТаблицаПродукцииФильтр.Найти(СтрокаТаблицыФильтры.Продукция, "Продукция") = Неопределено Тогда
						СпособРаспределенияФильтры.Удалить(СтрокаТаблицыФильтры);
					КонецЕсли;
				ИначеЕсли СпособРаспределенияЗатрат.ТипФильтраПриРаспределенииЗатратНаВыпуск = Перечисления.ТипыФильтровПриРаспределенииЗатратНаВыпуск.НоменклатурныеГруппы Тогда
					Если ТаблицаНоменклатурныхГруппФильтр.Найти(СтрокаТаблицыФильтры.НоменклатурнаяГруппа, "НоменклатурнаяГруппа") = Неопределено Тогда
						СпособРаспределенияФильтры.Удалить(СтрокаТаблицыФильтры);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			// Если все заданные фильтры по продукции и номенклатурной группе удалены, расчет базы производить не нужно.
			Если СпособРаспределенияФильтры.Количество() = 0 Тогда
				ТаблицаПрочиеЗатраты.Удалить(Строка);
				Продолжить;
			КонецЕсли;

			Строка.Фильтры										= СпособРаспределенияФильтры.Скопировать();
			Строка.ТипФильтраПриРаспределенииЗатратНаВыпуск 	= СпособРаспределенияЗатрат.ТипФильтраПриРаспределенииЗатратНаВыпуск;
		Иначе
			Строка.Фильтры										= ТаблицаПродукцииФильтр.Скопировать();
			Строка.ТипФильтраПриРаспределенииЗатратНаВыпуск 	= Перечисления.ТипыФильтровПриРаспределенииЗатратНаВыпуск.Продукция;
		КонецЕсли;//Если СпособРаспределенияФильтры.Количество() > 0 Тогда
	КонецЦикла;
	
	ТаблицаБазыРаспределения = ПроцедурыРасчетаБазыРаспределенияЗатрат.СформироватьТаблицуБазыРаспределенияЗатрат(
			СтруктураШапкиДокумента,
			СтруктураПараметров, 
			ТаблицаПрочиеЗатраты
		);
  
	РаспределениеПрочихЗатрат.Очистить();
	ТаблицаПрочиеЗатраты = ПрочиеЗатраты.Выгрузить();
	ТаблицаРаспределениеПрочихЗатрат = РаспределениеПрочихЗатрат.Выгрузить();
	
	ЕстьКолонкаПродукция = ТаблицаРаспределениеПрочихЗатрат.Колонки.Найти("Продукция") <> Неопределено;
	ЕстьТехнологическаяОперация = ТаблицаПрочиеЗатраты.Колонки.Найти("ТехнологическаяОперация") <> Неопределено;
	
	Если ЕстьТехнологическаяОперация Тогда
		ТаблицаПродукции = ПолучитьТаблицуТехнологическихОпераций(
			СтруктураШапкиДокумента,
			Продукция.Выгрузить()
		);
	Иначе
		ТаблицаПродукции = Продукция.Выгрузить();
	КонецЕсли;
	
	Если ЕстьКолонкаПродукция Тогда
		
		Если ТаблицаПродукции.Колонки.Найти("Продукция") <> Неопределено Тогда
			ТаблицаПродукции.Колонки.Удалить("Продукция");
		КонецЕсли;
		Если ТаблицаПродукции.Колонки.Найти("ХарактеристикаПродукции") <> Неопределено Тогда
			ТаблицаПродукции.Колонки.Удалить("ХарактеристикаПродукции");
		КонецЕсли;
		Если ТаблицаПродукции.Колонки.Найти("СерияПродукции") <> Неопределено Тогда
			ТаблицаПродукции.Колонки.Удалить("СерияПродукции");
		КонецЕсли;
		
		ТаблицаПродукции.Колонки.Номенклатура.Имя = "Продукция";
		Если ТаблицаПродукции.Колонки.Найти("ХарактеристикаНоменклатуры") <> Неопределено Тогда
			ТаблицаПродукции.Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаПродукции";
		КонецЕсли;
		Если ТаблицаПродукции.Колонки.Найти("СерияНоменклатуры") <> Неопределено Тогда
			ТаблицаПродукции.Колонки.СерияНоменклатуры.Имя = "СерияПродукции";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаПродукции.Колонки.Найти("ДоляСтоимости") <> Неопределено
	   И ТаблицаПродукции.Итог("ДоляСтоимости") > 0
	Тогда
		ТаблицаПродукции.Колонки.ДоляСтоимости.Имя = "База";
		
	ИначеЕсли ТаблицаПродукции.Колонки.Найти("ВесовойКоэффициент") <> Неопределено
		И ТаблицаПродукции.Итог("ВесовойКоэффициент") > 0
		И Не РаспределятьПропорциональноКоличеству
	Тогда
		ТаблицаПродукции.Колонки.ВесовойКоэффициент.Имя = "База";
	Иначе
		ТаблицаПродукции.Колонки.Количество.Имя = "База";
	КонецЕсли;
	
	ТаблицаПродукции.Колонки.Добавить("БазаОстатокНЗП");
	Если ТаблицаПродукции.Колонки.Найти("ВидВыпуска") = Неопределено Тогда
		ТаблицаПродукции.Колонки.Добавить("ВидВыпуска",	Новый ОписаниеТипов("ПеречислениеСсылка.ВидыВыпуска"));
		ТаблицаПродукции.ЗаполнитьЗначения(Перечисления.ВидыВыпуска.Выпуск, "ВидВыпуска");
		
	ИначеЕсли Не ИспользоватьНаработку Тогда
		ТаблицаПродукции.ЗаполнитьЗначения(Перечисления.ВидыВыпуска.Выпуск, "ВидВыпуска");
		
	КонецЕсли;
	
	Если ТаблицаПродукции.Колонки.Найти("Заказ") = Неопределено Тогда
		МассивТиповЗаказа = Новый Массив;
		МассивТиповЗаказа.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		МассивТиповЗаказа.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
		ТаблицаПродукции.Колонки.Добавить("Заказ", Новый ОписаниеТипов(МассивТиповЗаказа));
	КонецЕсли;
	ТаблицаПродукции.Колонки.Добавить("СпособРаспределенияЗатрат", 		Новый ОписаниеТипов("СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск"));
	ТаблицаПродукции.Колонки.Добавить("ОтражатьВУправленческомУчете", 	Новый ОписаниеТипов("Булево"));
	ТаблицаПродукции.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", 	Новый ОписаниеТипов("Булево"));
	ТаблицаПродукции.Колонки.Добавить("БазаРегл",						Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
	
	МассивБаза = ТаблицаПродукции.ВыгрузитьКолонку("База");
	ТаблицаПродукции.ЗагрузитьКолонку(МассивБаза, "БазаРегл");
	
	ТаблицаПродукции.ЗаполнитьЗначения(Справочники.СпособыРаспределенияЗатратНаВыпуск.ПустаяСсылка(), "СпособРаспределенияЗатрат");
	ТаблицаПродукции.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, 	"ОтражатьВУправленческомУчете");
	ТаблицаПродукции.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете, 	"ОтражатьВБухгалтерскомУчете");
	
	Для каждого СтрокаТабличнойЧасти из ТаблицаПродукции Цикл
		СтрокаТабличнойЧасти.Заказ = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ), Неопределено, СтрокаТабличнойЧасти.Заказ);
	КонецЦикла;
		
	Если ТаблицаБазыРаспределения = Неопределено Тогда
		ТаблицаБазыРаспределения = ТаблицаПродукции.Скопировать();
	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродукции, ТаблицаБазыРаспределения);
	КонецЕсли;
	
	Если ТаблицаБазыРаспределения.Колонки.Найти("ТехнологическаяОперация") = Неопределено Тогда
		ТаблицаБазыРаспределения.Колонки.Добавить("ТехнологическаяОперация",	Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	КонецЕсли;
	
	МассивКоэфУУ = Новый Массив;
	МассивКоэфБУ = Новый Массив;
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаБазыРаспределения);
	
	Отбор = ПостроительЗапроса.Отбор;
	Отбор.Добавить("СпособРаспределенияЗатрат");
	Отбор.Добавить("НоменклатурнаяГруппа");
	Отбор.Добавить("Заказ");
	Отбор.Добавить("ВидВыпуска");
	Отбор.Добавить("ТехнологическаяОперация");
	
	Отбор.ВидВыпуска.Использование = Истина;
	
	// Определим признаки заполнения доп. колонок.
	ЕстьАналитикаНЗП = Ложь;
	ИмяРеквизитаДляДоли = "ДоляСтоимости";
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РаспределениеПрочихЗатрат") Тогда
		ЕстьАналитикаНЗП = Истина;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")
		И СтруктураШапкиДокумента.ИспользоватьАналитикуНЗП
	Тогда
		ЕстьАналитикаНЗП = ТаблицаРаспределениеПрочихЗатрат.Колонки.Найти("ЗаказНЗП") <> Неопределено;
	КонецЕсли;
	
	ЕстьПодразделениеНЗП = ТаблицаПрочиеЗатраты.Колонки.Найти("ПодразделениеНЗП") <> Неопределено;
	ЕстьСпособРаспределенияЗатратНаВыпуск = ТаблицаПрочиеЗатраты.Колонки.Найти("СпособРаспределенияЗатратНаВыпуск") <> Неопределено;
	ЕстьСчетЗатрат = ТаблицаПрочиеЗатраты.Колонки.Найти("СчетЗатрат") <> Неопределено;
	ЕстьНалоговоеНазначение = ТаблицаПрочиеЗатраты.Колонки.Найти("НалоговоеНазначение") <> Неопределено;
	ЕстьСуммаРегл = ТаблицаПрочиеЗатраты.Колонки.Найти("СуммаРегл") <> Неопределено;
	ЕстьСуммаНал = ТаблицаПрочиеЗатраты.Колонки.Найти("СуммаНал") <> Неопределено;
	ЕстьСуммаНДС = ТаблицаПрочиеЗатраты.Колонки.Найти("СуммаНДС") <> Неопределено;
	
	Для Каждого Строка Из ПрочиеЗатраты Цикл
		
		Если Строка.Сумма = 0 
		   И (ЕстьСуммаРегл И Строка.СуммаРегл = 0 ИЛИ Не ЕстьСуммаРегл) 
		   И (ЕстьСуммаНал  И Строка.СуммаНал = 0  ИЛИ Не ЕстьСуммаНал)
		   И (ЕстьСуммаНДС  И (Строка.СуммаНДС = 0 ИЛИ Строка.СуммаНДСКредит = 0) ИЛИ Не ЕстьСуммаНДС) 
		   Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЕстьСпособРаспределенияЗатратНаВыпуск Тогда
			Отбор.СпособРаспределенияЗатрат.Значение = Строка.СпособРаспределенияЗатратНаВыпуск;
			Отбор.СпособРаспределенияЗатрат.Использование = Истина;
		КонецЕсли;
		
		Отбор.Заказ.Значение					= ?(НЕ ЗначениеЗаполнено(Строка.Заказ), Неопределено, Строка.Заказ);
		Отбор.Заказ.Использование 				= ИспользоватьЗаказы И (Не ЕстьАналитикаНЗП ИЛИ ЗначениеЗаполнено(Строка.Заказ));
		
		Отбор.ВидВыпуска.Значение				= ?(ИспользоватьНаработку, Строка.ВидВыпуска, Перечисления.ВидыВыпуска.Выпуск);
		Отбор.ВидВыпуска.Использование			= ИспользоватьНаработку;
		
		Отбор.НоменклатурнаяГруппа.Значение		= Строка.НоменклатурнаяГруппа;
		Отбор.НоменклатурнаяГруппа.Использование = Не ЕстьАналитикаНЗП ИЛИ ЗначениеЗаполнено(Строка.НоменклатурнаяГруппа);
		
		Если ЕстьТехнологическаяОперация Тогда
			Отбор.ТехнологическаяОперация.Значение = Строка.ТехнологическаяОперация;
			Отбор.ТехнологическаяОперация.Использование = ЗначениеЗаполнено(Строка.ТехнологическаяОперация);
		КонецЕсли;
			
		ПостроительЗапроса.Выполнить();
		РезультатЗапроса = ПостроительЗапроса.Результат;
		
		Если РезультатЗапроса.Пустой() Тогда
			
			// Если распределяются технологические операции, попробуем распределить без учета технологических карт.
			Если ЕстьТехнологическаяОперация Тогда
				
				Отбор.ТехнологическаяОперация.Использование = Ложь;
				
				ПостроительЗапроса.Выполнить();
				РезультатЗапроса = ПостроительЗапроса.Результат;
				
				Если РезультатЗапроса.Пустой() Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		МассивКоэфУУ.Очистить();
		МассивКоэфБУ.Очистить();
		
		Обход = РезультатЗапроса.Выбрать();
		Пока Обход.Следующий() Цикл
			
			База 		= ?(Обход.База = Неопределено, 0, Обход.База);
			БазаРегл	= ?(Обход.БазаРегл = Неопределено, 0, Обход.БазаРегл);
			
			// Распределение на наработку в документе не производится.
			Если НЕ ИспользоватьНаработку И Обход.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
				МассивКоэфУУ.Добавить(0);
				МассивКоэфБУ.Добавить(0);
				Продолжить;
			КонецЕсли;
			
			Если ОтражатьВУправленческомУчете И Обход.ОтражатьВУправленческомУчете Тогда
				МассивКоэфУУ.Добавить(База);
			Иначе
				МассивКоэфУУ.Добавить(0);
			КонецЕсли;
			Если ОтражатьВБухгалтерскомУчете И Обход.ОтражатьВБухгалтерскомУчете
			   И (ЕстьСчетЗатрат И Обход.СчетЗатрат = Строка.СчетЗатрат 
				  ИЛИ Не ЕстьСчетЗатрат)
			   И (ЕстьНалоговоеНазначение И Обход.НалоговоеНазначение = Строка.НалоговоеНазначение 
				  ИЛИ Не ЕстьНалоговоеНазначение)
			Тогда
				МассивКоэфБУ.Добавить(БазаРегл);
			Иначе
				МассивКоэфБУ.Добавить(0);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивКоэфУУ.Количество() = 0 И МассивКоэфБУ.Количество() = 0 Тогда	
			Продолжить;
		КонецЕсли;
		
		МассивСуммУпр = ОбщегоНазначения.РаспределитьПропорционально(Строка.Сумма,     МассивКоэфУУ, 2);
		Если ЕстьСуммаРегл Тогда
			МассивСуммБух = ОбщегоНазначения.РаспределитьПропорционально(Строка.СуммаРегл, МассивКоэфБУ, 2);
		Иначе
			МассивСуммБух = Неопределено;
		КонецЕсли;
		Если ЕстьСуммаНал Тогда
		  	МассивСуммНал = ОбщегоНазначения.РаспределитьПропорционально(Строка.СуммаНал,  МассивКоэфБУ, 2);
		Иначе
		  	МассивСуммНал = Неопределено;
		КонецЕсли;
		Если ЕстьСуммаНДС Тогда   
			МассивСуммНДС = ОбщегоНазначения.РаспределитьПропорционально(Строка.СуммаНДС, МассивКоэфБУ, 2);
			МассивСуммНДСКредит = ОбщегоНазначения.РаспределитьПропорционально(Строка.СуммаНДСКредит, МассивКоэфБУ, 2);
		Иначе
			МассивСуммНДС = Неопределено;
			МассивСуммНДСКредит = Неопределено;
		КонецЕсли; 
		
		
		Если МассивСуммУпр = Неопределено И МассивСуммБух = Неопределено И МассивСуммНал  = Неопределено И МассивСуммНДС = Неопределено И МассивСуммНДСКредит = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицаПрочиеЗатраты = ТаблицаПрочиеЗатраты[Строка.НомерСтроки - 1];
		
		К = -1;
		ТекущийСчетЗатрат = Неопределено;
		ТекущееНалоговоеНазначение = Неопределено;
		Обход.Сбросить();
		Пока Обход.Следующий() Цикл
			
			К = К + 1;
			
			Если (МассивСуммУпр = Неопределено ИЛИ МассивСуммУпр[К] = 0)
			   И (МассивСуммБух = Неопределено ИЛИ МассивСуммБух[К] = 0) 
			   И (МассивСуммНал = Неопределено ИЛИ МассивСуммНал[К] = 0) 
			   И (МассивСуммНДС = Неопределено ИЛИ МассивСуммНДС[К] = 0) 
			   И (МассивСуммНДСКредит = Неопределено ИЛИ МассивСуммНДСКредит[К] = 0) 
			   Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаРаспределениеПрочихЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Обход);
			
			НоваяСтрока.СтатьяЗатрат = Строка.СтатьяЗатрат;
			Если ЕстьСпособРаспределенияЗатратНаВыпуск Тогда
				НоваяСтрока.СпособРаспределенияЗатратНаВыпуск = Строка.СпособРаспределенияЗатратНаВыпуск;
			КонецЕсли;
			Если ЕстьТехнологическаяОперация Тогда
				НоваяСтрока.ТехнологическаяОперация = Строка.ТехнологическаяОперация;
			КонецЕсли;
			
			Если ЕстьАналитикаНЗП Тогда
				НоваяСтрока.НоменклатурнаяГруппаНЗП	= Строка.НоменклатурнаяГруппа;
				НоваяСтрока.ЗаказНЗП				= Строка.Заказ;
			КонецЕсли;
			
			Если ЕстьПодразделениеНЗП Тогда
				НоваяСтрока.ПодразделениеНЗП = Строка.ПодразделениеНЗП;
				НоваяСтрока.ПодразделениеОрганизацииНЗП = Строка.ПодразделениеОрганизацииНЗП;
			КонецЕсли;
			
			Если ОтражатьВБухгалтерскомУчете Тогда
				НоваяСтрока.СчетЗатрат   		= ?(НЕ ЗначениеЗаполнено(Обход.СчетЗатрат), ТекущийСчетЗатрат, Обход.СчетЗатрат);
				ТекущийСчетЗатрат 				= Обход.СчетЗатрат;
				НоваяСтрока.НалоговоеНазначение	= ?(НЕ ЗначениеЗаполнено(Обход.НалоговоеНазначение), ТекущееНалоговоеНазначение, Обход.НалоговоеНазначение);
				ТекущееНалоговоеНазначение		= Обход.НалоговоеНазначение;
			КонецЕсли;
			
			
			Если Не МассивСуммУпр = Неопределено Тогда
				НоваяСтрока.Сумма = МассивСуммУпр[К];
			Иначе
				НоваяСтрока.Сумма = 0;
			КонецЕсли;
			Если ЕстьСуммаРегл Тогда
				Если Не МассивСуммБух = Неопределено Тогда
					НоваяСтрока.СуммаРегл = МассивСуммБух[К];
				Иначе
					НоваяСтрока.СуммаРегл = 0;
				КонецЕсли;
			КонецЕсли;
			Если ЕстьСуммаНал Тогда
			  	Если Не МассивСуммНал = Неопределено Тогда
			  		НоваяСтрока.СуммаНал = МассивСуммНал[К];
			  	Иначе
			  		НоваяСтрока.СуммаНал = 0;
			  	КонецЕсли;
			 КонецЕсли;
			Если ЕстьСуммаНДС Тогда   
				Если Не МассивСуммНДС = Неопределено Тогда
					НоваяСтрока.СуммаНДС = МассивСуммНДС[К];
				Иначе
					НоваяСтрока.СуммаНДС = 0;
				КонецЕсли;
				Если Не МассивСуммНДСКредит = Неопределено Тогда
					НоваяСтрока.СуммаНДСКредит = МассивСуммНДСКредит[К];
				Иначе
					НоваяСтрока.СуммаНДСКредит = 0;
				КонецЕсли;
			КонецЕсли; 
			
			СтрокаТаблицаПрочиеЗатраты.Сумма = СтрокаТаблицаПрочиеЗатраты.Сумма - НоваяСтрока.Сумма;
			Если ЕстьСуммаРегл Тогда
				СтрокаТаблицаПрочиеЗатраты.СуммаРегл = СтрокаТаблицаПрочиеЗатраты.СуммаРегл - НоваяСтрока.СуммаРегл;
			КонецЕсли;
			Если ЕстьСуммаНал Тогда
			  	СтрокаТаблицаПрочиеЗатраты.СуммаНал = СтрокаТаблицаПрочиеЗатраты.СуммаНал - НоваяСтрока.СуммаНал;
			КонецЕсли;
			Если ЕстьСуммаНДС Тогда
				СтрокаТаблицаПрочиеЗатраты.СуммаНДС = СтрокаТаблицаПрочиеЗатраты.СуммаНДС - НоваяСтрока.СуммаНДС;
				СтрокаТаблицаПрочиеЗатраты.СуммаНДСКредит = СтрокаТаблицаПрочиеЗатраты.СуммаНДСКредит - НоваяСтрока.СуммаНДСКредит;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
	КолонкиРаспределениеПрочихЗатрат = "";
	Для Каждого Колонка Из ТаблицаРаспределениеПрочихЗатрат.Колонки Цикл
		Если  Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "Сумма" 
		 ИЛИ Колонка.Имя = "СуммаРегл" ИЛИ Колонка.Имя = "СуммаНал" ИЛИ Колонка.Имя = "СуммаНДС" ИЛИ Колонка.Имя = "СуммаНДСКредит" Тогда
			Продолжить;
		КонецЕсли;
		КолонкиРаспределениеПрочихЗатрат = КолонкиРаспределениеПрочихЗатрат + 
								?(ПустаяСтрока(КолонкиРаспределениеПрочихЗатрат), "", ", ") + Колонка.Имя;
	КонецЦикла;
	
	ТаблицаРаспределениеПрочихЗатрат.Свернуть(КолонкиРаспределениеПрочихЗатрат, "Сумма" + ?(ЕстьСуммаРегл, ", СуммаРегл", "") + ?(ЕстьСуммаНал, ", СуммаНал", "") + ?(ЕстьСуммаНДС, ", СуммаНДС, СуммаНДСКредит", ""));
	РаспределениеПрочихЗатрат.Загрузить(ТаблицаРаспределениеПрочихЗатрат);
	
	#Если Клиент Тогда
		ПредставлениеДокумента = "Заполнение документа: " + СокрЛП(СтруктураШапкиДокумента.Ссылка);
		Для Каждого Строка Из ТаблицаПрочиеЗатраты Цикл
			ТекстСообщения = "";
			Если ОтражатьВУправленческомУчете И Строка.Сумма > 0 Тогда
				ТекстСообщения = "Не удалось распределить сумму: " + Строка.Сумма + ", по статье затрат: """ + Строка.СтатьяЗатрат + """ (строка № " + Строка.НомерСтроки + ")";
			КонецЕсли;
			Если ОтражатьВБухгалтерскомУчете И ЕстьСуммаРегл И Строка.СуммаРегл > 0 Тогда
				Если Не ПустаяСтрока(ТекстСообщения) Тогда
					ТекстСообщения = ТекстСообщения + Символы.ПС;
				КонецЕсли;
				ТекстСообщения = ТекстСообщения + "Не удалось распределить сумму (БУ): " + Строка.СуммаРегл + ", по статье затрат: """ + Строка.СтатьяЗатрат + """ (строка № " + Строка.НомерСтроки + ")";
			КонецЕсли;
			Если ОтражатьВБухгалтерскомУчете И ЕстьСуммаНал И Строка.СуммаНал > 0 Тогда
			  	Если Не ПустаяСтрока(ТекстСообщения) Тогда
			  		ТекстСообщения = ТекстСообщения + Символы.ПС;
			  	КонецЕсли;
			  	ТекстСообщения = ТекстСообщения + "Не удалось распределить сумму (НУ): " + Строка.СуммаНал + ", по статье затрат: """ + Строка.СтатьяЗатрат + """ (строка № " + Строка.НомерСтроки + ")";
			КонецЕсли;
			Если ОтражатьВБухгалтерскомУчете И ЕстьСуммаНДС И (Строка.СуммаНДС > 0 ИЛИ Строка.СуммаНДСКредит > 0) Тогда
				Если Не ПустаяСтрока(ТекстСообщения) Тогда
					ТекстСообщения = ТекстСообщения + Символы.ПС;
				КонецЕсли;
				Если Строка.СуммаНДС > 0 Тогда   
					ТекстСообщения = ТекстСообщения + "Не удалось распределить сумму НДС: " + Строка.СуммаНДС + ", по статье затрат: """ + Строка.СтатьяЗатрат + """ (строка № " + Строка.НомерСтроки + ")";	                   
					ТекстСообщения = ТекстСообщения + Символы.ПС;
				КонецЕсли;
				Если Строка.СуммаНДСКредит > 0 Тогда   
					ТекстСообщения = ТекстСообщения + "Не удалось распределить сумму НДС (кредит): " + Строка.СуммаНДСКредит + ", по статье затрат: """ + Строка.СтатьяЗатрат + """ (строка № " + Строка.НомерСтроки + ")";
				КонецЕсли;
			КонецЕсли;
			Если Не ПустаяСтрока(ТекстСообщения) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, ПредставлениеДокумента);
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
КонецПроцедуры // ЗаполнитьРаспределениеПрочихЗатратНаПродукцию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ

// Процедура проверяет, что указаны производственные подразделения.
//
Процедура ПроверитьПроизводственныеПодразделения(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Подразделение)
		   И СтруктураШапкиДокумента.Подразделение.ВидПодразделения<>Перечисления.ВидыПодразделений.ОсновноеПроизводство
		   И СтруктураШапкиДокумента.Подразделение.ВидПодразделения<>Перечисления.ВидыПодразделений.ВспомогательноеПроизводство Тогда
		   
		    ОбщегоНазначения.СообщитьОбОшибке("В шапке документа должно быть указано подразделение с видом ""Основное производство"" или ""Вспомогательное производство""!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ПодразделениеОрганизации)
		   И СтруктураШапкиДокумента.ПодразделениеОрганизации.ВидПодразделения<>Перечисления.ВидыПодразделений.ОсновноеПроизводство
		   И СтруктураШапкиДокумента.ПодразделениеОрганизации.ВидПодразделения<>Перечисления.ВидыПодразделений.ВспомогательноеПроизводство Тогда
		   
		    ОбщегоНазначения.СообщитьОбОшибке("В шапке документа должно быть указано подразделение организации с видом ""Основное производство"" или ""Вспомогательное производство""!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что количество доделка не превышает количество выпуск.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьКоличествоДоделка(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если СтрокаТаблицы.Количество<СтрокаТаблицы.КоличествоДоделка Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " доделка больше количества выпуска. ", Отказ, Заголовок);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоНетУслуг)

// Процедура проверяет допустимость использования статьи затрат
// в документе
//
//	Параметры:
//		ТабЧасть - табличная часть документа
//		ИмяРеквСтатьяЗатрат - имя реквизита в котором содержится статья затрат
//		ВидСтатьиЗатрат - строка с видом допустимых статей затрат
//			Возможные значения:
//				"Материальные" - в документе могут быть только мат. статьи затрат
//				"Нематериальные" - в документе могут быть только не мат. статьи затрат
//		Отказ - флаг ошибки
//		Заголовок - текст сообщения
//
Процедура ПроверитьСтатьиЗатрат(ТабЧасть, ИмяРеквСтатьяЗатрат, ВидСтатьиЗатрат, Отказ, Заголовок) Экспорт

	ИмяТабЧасти = Метаданные.НайтиПоТипу(ТипЗнч(ТабЧасть)).Представление();
	
	ЕстьСумма = (Метаданные.НайтиПоТипу(ТипЗнч(ТабЧасть)).Реквизиты.Найти("Сумма") <> Неопределено);

	Для Каждого СтрокаТЧ Из ТабЧасть Цикл

		СтатЗатрат = СтрокаТЧ[ИмяРеквСтатьяЗатрат];

		Если ВидСтатьиЗатрат = "Нематериальные" Тогда
			Если СтатЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Укажите статью затрат с нематериальным видом затрат (таб.часть """ + ИмяТабЧасти + """ строка № " + СтрокаТЧ.НомерСтроки + ")", Отказ, Заголовок);
			КонецЕсли;

		ИначеЕсли ВидСтатьиЗатрат = "Материальные" Тогда
			Если Не СтатЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Укажите статью затрат с видом затрат ""Материальные"" (таб.часть """ + ИмяТабЧасти + """ строка № " + СтрокаТЧ.НомерСтроки + ")", Отказ, Заголовок);
			КонецЕсли;

		ИначеЕсли ВидСтатьиЗатрат = "Производственные" Тогда
			Если Не СтатЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
			   И (Не ЕстьСумма ИЛИ ЕстьСумма И СтрокаТЧ.Сумма <> 0) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Укажите статью затрат с характером затрат ""Производственные расходы"" (таб.часть """ + ИмяТабЧасти + """ строка № " + СтрокаТЧ.НомерСтроки + ")", Отказ, Заголовок);
			КонецЕсли;

		ИначеЕсли ВидСтатьиЗатрат = "Непроизводственные" Тогда
			Если СтатЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
			   И (Не ЕстьСумма ИЛИ ЕстьСумма И СтрокаТЧ.Сумма <> 0) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Укажите статью затрат с характером затрат отличным от ""Производственные расходы"" (таб.часть """ + ИмяТабЧасти + """ строка № " + СтрокаТЧ.НомерСтроки + ")", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьСтатьиЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ЛИМИТАМИ ОТПУСКА МАТЕРИАЛОВ

// Функция возвращает флаг использования лимитов отпуска заказов.
//
Функция ИспользоватьЛимитыОтпускаМатериалов(Сообщать = Ложь) Экспорт
	
	Флаг = Константы.ИспользоватьЛимитыОтпускаМатериалов.Получить();
	Если Не Флаг И Сообщать Тогда
		ОбщегоНазначения.Сообщение("Использование лимитов отпуска материалов в данной конфигурации отключено.", СтатусСообщения.ОченьВажное);
	КонецЕсли;
	
	Возврат Флаг;
	
КонецФункции // ИспользоватьЛимитыОтпускаМатериалов

// Процедура добавляет в переданную таблицу признаки использования лимитов отпуска материалов.
//
Процедура ПолучитьИспользованиеЛимитовОтпускаМатериалов(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаТоваров) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяДокумента        = МетаданныеДокумента.Имя;
	ИмяТаблицы          = ИмяДокумента + "." + СокрЛП(ИмяТабличнойЧасти);
	
	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ
	|	Документ." + ИмяТаблицы +"
	|ГДЕ Ссылка = &ДокументСсылка";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЛимитыОтпуска.Номенклатура					КАК Номенклатура,
	|	ЛимитыОтпуска.ХарактеристикаНоменклатуры	КАК ХарактеристикаНоменклатуры,
	|	ЛимитыОтпуска.Подразделение           		КАК Подразделение,
	|	ЛимитыОтпуска.Склад							КАК Склад,
	|	1	КАК КонтролироватьЛимит
	|ИЗ
	|	РегистрСведений.ЛимитыОтпускаМатериалов.СрезПоследних(&КонДата,
	|														Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ")
	|														И КонтролироватьЛимит
	|														) КАК ЛимитыОтпуска
	|УПОРЯДОЧИТЬ ПО
	|	ЛимитыОтпуска.Номенклатура,
	|	ЛимитыОтпуска.ХарактеристикаНоменклатуры,
	|	ЛимитыОтпуска.Подразделение,
	|	ЛимитыОтпуска.Склад
	|";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата",        КонецДня(ДокументОбъект.Дата));
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();;
	
	ТаблицаТоваров.Колонки.Добавить("КонтролироватьЛимит",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0)));
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса, ТаблицаТоваров);
	ТаблицаТоваров.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Подразделение, Склад", "КонтролироватьЛимит, Отпущено, ОтпущеноСверхЛимита"); 
	
КонецПроцедуры // ПолучитьИспользованиеЛимитовОтпускаМатериалов()

// Возвращает результат запроса для формирования движений по регистру ЛимитноЗаборныеКарты.
// Запросом получаются из документа данные о движении материалов, по которым в регистре
// сведений ЛимитыОтпускаМатериалов указана необходимость контролировать лимит.
//
// Параметры
//  ДокументОбъект - объект документа: ТребованиеНакладная или ОприходованиеМатериаловИзПроизводства
// 
// Возвращаемое значение
//  Результат запроса
Функция СформироватьЗапросЛимитыОтпускаМатериаловПоТабличнойЧасти(ДокументОбъект) Экспорт
	
	// Используются разные запросы, для разных документов т.к. 
	//  - в документе ТребованиеНакладная склад указывается в табличной части
	//  - из документа ТребованиеНакладная получаем значения для заполнения ресурсов
	//    Отпущено и ОтпущеноСверхЛимита, 
	//    а из документа ОприходованиеМатериаловИзПроизводства - ресурса Возвращено
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ТребованиеНакладная") Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
		|	ТабличнаяЧасть.Склад КАК Склад,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
		|	Количество * Коэффициент / ЕдиницаИзмерения.Коэффициент КАК Отпущено,
		|	ОтпущеноСверхЛимита * Коэффициент / ЕдиницаИзмерения.Коэффициент КАК ОтпущеноСверхЛимита
		|ИЗ
		|	Документ.ТребованиеНакладная.Материалы КАК ТабличнаяЧасть
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
		|	ВЫБРАТЬ
		|		ЛимитыОтпуска.Номенклатура 					КАК ЛимитыНоменклатура,
		|		ЛимитыОтпуска.ХарактеристикаНоменклатуры 	КАК ЛимитыХарактеристикаНоменклатуры,
		|		ЛимитыОтпуска.Склад 						КАК ЛимитыСклад,
		|		МАКСИМУМ(ЛимитыОтпуска.КонтролироватьЛимит) КАК КонтролироватьЛимит
		|   ИЗ
		|		РегистрСведений.ЛимитыОтпускаМатериалов.СрезПоследних(&ДатаДок,
		| 		  (Подразделение,Склад,Номенклатура,ХарактеристикаНоменклатуры) 
		| 		  В (ВЫБРАТЬ
		|				ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
		|				ТабличнаяЧасть.Склад КАК Склад,
		|				ТабличнаяЧасть.Номенклатура,
		|				ТабличнаяЧасть.ХарактеристикаНоменклатуры
		|			ИЗ
		|				Документ.ТребованиеНакладная.Материалы КАК ТабличнаяЧасть
		|			ГДЕ
		|				ТабличнаяЧасть.Ссылка = &Ссылка)
		| 		) КАК ЛимитыОтпуска
		|	СГРУППИРОВАТЬ ПО
		|		ЛимитыОтпуска.Номенклатура,
		|		ЛимитыОтпуска.ХарактеристикаНоменклатуры,
		|		ЛимитыОтпуска.Склад
		|	ИМЕЮЩИЕ 
		|		МАКСИМУМ(ЛимитыОтпуска.КонтролироватьЛимит) = ИСТИНА ) КАК ЛимитыОтпуска
		|	ПО 
		|		ТабличнаяЧасть.Номенклатура 				= ЛимитыОтпуска.ЛимитыНоменклатура
		|		И ТабличнаяЧасть.ХарактеристикаНоменклатуры = ЛимитыОтпуска.ЛимитыХарактеристикаНоменклатуры
		|		И ТабличнаяЧасть.Склад                      = ЛимитыОтпуска.ЛимитыСклад
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТабличнаяЧасть.НомерСтроки
		|";
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОприходованиеМатериаловИзПроизводства") Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
		|	ТабличнаяЧасть.Ссылка.Склад КАК Склад,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
		|	Количество * Коэффициент / ЕдиницаИзмерения.Коэффициент КАК Возвращено
		|ИЗ
		|	Документ.ОприходованиеМатериаловИзПроизводства.Материалы КАК ТабличнаяЧасть
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
		|	ВЫБРАТЬ
		|		ЛимитыОтпуска.Номенклатура 					КАК ЛимитыНоменклатура,
		|		ЛимитыОтпуска.ХарактеристикаНоменклатуры 	КАК ЛимитыХарактеристикаНоменклатуры,
		|		ЛимитыОтпуска.Склад 						КАК ЛимитыСклад,
		|		МАКСИМУМ(ЛимитыОтпуска.КонтролироватьЛимит) КАК КонтролироватьЛимит
		|   ИЗ
		|		РегистрСведений.ЛимитыОтпускаМатериалов.СрезПоследних(&ДатаДок,
		| 		  (Подразделение,Склад,Номенклатура,ХарактеристикаНоменклатуры) 
		| 		  В (ВЫБРАТЬ
		|				ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
		|				ТабличнаяЧасть.Ссылка.Склад КАК Склад,
		|				ТабличнаяЧасть.Номенклатура,
		|				ТабличнаяЧасть.ХарактеристикаНоменклатуры
		|			ИЗ
		|				Документ.ОприходованиеМатериаловИзПроизводства.Материалы КАК ТабличнаяЧасть
		|			ГДЕ
		|				ТабличнаяЧасть.Ссылка = &Ссылка)
		| 		) КАК ЛимитыОтпуска
		|	СГРУППИРОВАТЬ ПО
		|		ЛимитыОтпуска.Номенклатура,
		|		ЛимитыОтпуска.ХарактеристикаНоменклатуры,
		|		ЛимитыОтпуска.Склад
		|	ИМЕЮЩИЕ 
		|		МАКСИМУМ(ЛимитыОтпуска.КонтролироватьЛимит) = ИСТИНА ) КАК ЛимитыОтпуска
		|	ПО 
		|		ТабличнаяЧасть.Номенклатура 				= ЛимитыОтпуска.ЛимитыНоменклатура
		|		И ТабличнаяЧасть.ХарактеристикаНоменклатуры = ЛимитыОтпуска.ЛимитыХарактеристикаНоменклатуры
		|		И ТабличнаяЧасть.Ссылка.Склад               = ЛимитыОтпуска.ЛимитыСклад
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТабличнаяЧасть.НомерСтроки
		|";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Выполняем запрос
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДатаДок",	ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("Ссылка",		ДокументОбъект.Ссылка);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ПЕРЕД ЗАПИСЬЮ ДОКУМЕНТОВ

// Процедура заполняет статью затрат по реквизитам шапки документа во всех строках 
// заданной табличной части.
//
Процедура ЗаполнитьСтатьюЗатратВСтрокахТабЧасти(ДокументОбъект, ТабЧасть) Экспорт
	
	Для Каждого СтрокаТабличнойЧасти из ТабЧасть Цикл
		Если СтрокаТабличнойЧасти.СтатьяЗатрат <> ДокументОбъект.СтатьяЗатрат Тогда
			СтрокаТабличнойЧасти.СтатьяЗатрат = ДокументОбъект.СтатьяЗатрат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСтатьюЗатратВСтрокахТабЧасти()

// Функция определяет спецификацию по умолчанию для номенклатуры, характеристики и подразделения
// на указанную дату
//
// Параметры
//  Номенклатура               - СправочникСсылка.Номенклатура: номенклатура, спецификацию которой 
//                               требуется определить
//  ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры: характеристика номенклатуры,
//                               спецификацию которой требуется определить
//  Момент                     - Дата: момент времени, на который определяется спецификация
//  Подразделение              - СправочникСсылка.Подразделения: подразделение, для которого
//                  	         требуется определить спецификацию
//
// Возвращаемое значение:
//   Справочники.СпецификацииНоменклатуры - спецификация, определенная для указанного сочетания параметров как основная
//
Функция ОпределитьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, Момент, Подразделение = Неопределено, Кэш = Неопределено) Экспорт

	Перем Спецификация;
	
	ИспользоватьКэш = (Кэш <> Неопределено);
	
	Если ИспользоватьКэш Тогда
		
		СпецификацииПоУмолчанию = Кэш.СпецификацииПоУмолчанию.НайтиСтроки(Новый Структура("Момент, Номенклатура, ХарактеристикаНоменклатуры, Подразделение", НачалоДня(?(ТипЗнч(Момент) = Тип("Дата"), Момент, ТекущаяДата())), Номенклатура, ХарактеристикаНоменклатуры, Подразделение));
		
		Если СпецификацииПоУмолчанию.Количество() > 0 Тогда
			
			Возврат СпецификацииПоУмолчанию[0].Спецификация;
			
		КонецЕсли;
		
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОсновныеСпецификацииНоменклатуры.СпецификацияНоменклатуры КАК СпецификацияНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры КАК СпецификацияНоменклатуры,
	|		1 КАК Приоритет
	|	ИЗ
	|		РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Номенклатура = &Номенклатура
	|					И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|					И Подразделение = &Подразделение) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
	|		2
	|	ИЗ
	|		РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Номенклатура = &Номенклатура
	|					И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|					И Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
	|		3
	|	ИЗ
	|		РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Номенклатура = &Номенклатура
	|					И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
	|		4
	|	ИЗ
	|		РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Номенклатура = &Номенклатура
	|					И ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
	|		5
	|	ИЗ
	|		РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних) КАК ОсновныеСпецификацииНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновныеСпецификацииНоменклатуры.Приоритет");

	Запрос.УстановитьПараметр("Дата", ?(ТипЗнч(Момент) = Тип("Дата"), Момент, ТекущаяДата()));
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ?(ХарактеристикаНоменклатуры = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ХарактеристикаНоменклатуры));
	Запрос.УстановитьПараметр("Подразделение", ?(Подразделение = Неопределено, Справочники.Подразделения.ПустаяСсылка(), Подразделение));

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Спецификация = Выборка.СпецификацияНоменклатуры;
		
	КонецЕсли;
	
	Если ИспользоватьКэш Тогда

		НоваяСтрокаКэша = Кэш.СпецификацииПоУмолчанию.Добавить();
		
		НоваяСтрокаКэша.Момент = НачалоДня(?(ТипЗнч(Момент) = Тип("Дата"), Момент, ТекущаяДата()));
		НоваяСтрокаКэша.Номенклатура = Номенклатура;
		НоваяСтрокаКэша.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		НоваяСтрокаКэша.Подразделение = Подразделение;
		НоваяСтрокаКэша.Спецификация = Спецификация;
		
	КонецЕсли;

	Возврат Спецификация;

КонецФункции // ОпределитьСпецификациюПоУмолчанию()





////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ФОРМАМИ
#Если Клиент Тогда
	
//Процедура открывает форму выбора справочника Подразделения либо ПодразделенияОрганизации с отбором по производственным подразделениям
//
Процедура ОткрытьФормуВыбораПроизводственногоПодразделения(Элемент, СтандартнаяОбработка, ПодразделениеОрганизации = Ложь) Экспорт
	ТаблицаОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокВидовПодразделений = Новый СписокЗначений();
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя 		 = "ВидПодразделения";
	НоваяСтрока.ВидСравнения = ВидСравнения.ВСписке;
	НоваяСтрока.Значение 	 = СписокВидовПодразделений;
	
	Если ПодразделениеОрганизации Тогда
		РаботаСДиалогами.НачалоВыбораПодразделенияОрганизации(ТаблицаОтбора, Элемент, СтандартнаяОбработка);	
	Иначе
		РаботаСДиалогами.НачалоВыбораПодразделения(ТаблицаОтбора, Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры
 
#КонецЕсли

Процедура ЗаполнитьЦенуСуммуСтроки(Стр,НовСтр)

	//находим заказ на производство
	Заказ2 = Стр.ЗаказВыпуска;
	
	//находим заказ покупателя
	Заказ1 = Заказ2.Продукция[0].Заказ;
	
	//находим приходную накладную
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ Ссылка ИЗ Документ.ПоступлениеТоваровУслуг
		|ГДЕ Сделка = &Заказ И Проведен И Комментарий ПОДОБНО &Комментарий";
		
	Запрос.УстановитьПараметр("Заказ", Заказ1);
	Запрос.УстановитьПараметр("Комментарий", Заказ2.Номер);

	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Сообщить("Не найден документ поступления материала "+Стр.Номенклатура+"! Цена материала не определена!");
		Возврат;
	КонецЕсли;	
	
	СуммаПоДокументу = 0;
	КоличествоПоДокументу = 0;
	Найдено = Ложь;
	Для каждого СтрДок Из Выборка.Ссылка.Товары Цикл
		Если СтрДок.Номенклатура = Стр.Номенклатура Тогда
			СуммаПоДокументу = СуммаПоДокументу + СтрДок.Сумма;
			КоличествоПоДокументу = КоличествоПоДокументу + СтрДок.Количество;
			Найдено = Истина;
		КонецЕсли;
	КонецЦикла;
	
    Если Найдено Тогда
		ТекЦена = СуммаПоДокументу / КоличествоПоДокументу;
		НовСтр.Цена = ТекЦена;
		НовСтр.Сумма = ТекЦена * НовСтр.Количество;
		Возврат;
	КонецЕсли;
	Сообщить("В документе "+Выборка.Ссылка+" не найдены данные по материалу "+Стр.Номенклатура+"! Цена материала не определена!");
	
КонецПроцедуры

Функция ВернутьДокументПолуфабриката(СерияНоменклатуры, НаДату)

	//находим документ производства полуфабриката
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОтчетПроизводстваЗаСменуПродукция.Ссылка
	                      |ИЗ
	                      |	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
	                      |ГДЕ
	                      |	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Проведен
	                      |	И ОтчетПроизводстваЗаСменуПродукция.СерияНоменклатуры = &СерияНоменклатуры
	                      |	И ОтчетПроизводстваЗаСменуПродукция.Ссылка.Дата < &НаДату");
							
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	
	Результат = Запрос.Выполнить();
	тзРез = Результат.Выгрузить();
	
	Если тзРез.Количество() = 0 Тогда
		Сообщить("Не найден документ производства полуфабриката "+СерияНоменклатуры.Владелец+"! Табличная часть по материалам по этому полуфабрикату заполнена не будет!");
		Возврат Неопределено;
	Иначе
		Возврат тзРез[тзРез.Количество() - 1].Ссылка;
	КонецЕсли;
//	Док = Неопределено;
//	Пока Выборка.Следующий() Цикл
//		Док = Выборка.Ссылка; 	
//	КонецЦикла;
//	
//	
//	Если Выборка.Следующий() Тогда
//		//РезСтруктура = Новый Структура("Документ, Количество",
//		Возврат Новый Структура("Документ, Количество", Выборка.Ссылка, Выборка.Количество());
//	КонецЕсли;

////временно контроль снимается
//	//Сообщить("Не найден документ производства полуфабриката "+СерияНоменклатуры.Владелец+"! Заполнение табличной части по материалам невозможно!");
//	Сообщить("Не найден документ производства полуфабриката "+СерияНоменклатуры.Владелец+"! Табличная часть по материалам по этому полуфабрикату заполнена не будет!");
//	Возврат Неопределено;
	
КонецФункции // ВернутьДокументПолуфабриката()

Функция ВернутьТаблицуМатериалов(док, ИсхДок = Неопределено, ТекЗаказНаПроизводство = Неопределено)

	Таб = док.Материалы.Выгрузить();
	Таб.Очистить();
	Таб.Свернуть("Номенклатура,ЕдиницаИзмерения,Коэффициент,Количество,СерияНоменклатуры","");
	Таб.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,4)));
	Таб.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,4)));
	
	ТабИсточник = док.Материалы.Выгрузить();
	ТабИсточник.Свернуть("Номенклатура,ЕдиницаИзмерения,Коэффициент,СерияНоменклатуры,ЗаказВыпуска","Количество");
	
	Для каждого Стр Из ТабИсточник Цикл
		
		Если Стр.Номенклатура.ВидВоспроизводства <> Перечисления.ВидыВоспроизводстваНоменклатуры.Производство Тогда
			//материал, переносим как есть
			НовСтр = Таб.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Стр);
			ЗаполнитьЦенуСуммуСтроки(Стр,НовСтр);
		ИначеЕсли НЕ ЗначениеЗаполнено(Стр.СерияНоменклатуры) Тогда
			//невозможно определить, как был изготовлен полуфабрикат
			Сообщить("В документе "+док.Ссылка+" не указана серия полуфабриката "+Стр.Номенклатура+"! Заполнение табличной части по материалам невозможно!");
			Возврат Неопределено;
		Иначе
			
			ДокПолуфабриката = ВернутьДокументПолуфабриката(Стр.СерияНоменклатуры, ТекЗаказНаПроизводство.Дата+61);
			Если ДокПолуфабриката = Неопределено Тогда
				//временно контроль снимается
				Продолжить;
			КонецЕсли;
			СтрокаПолуфабриката = ДокПолуфабриката.Продукция.Найти(Стр.Номенклатура,"Номенклатура");
			Если СтрокаПолуфабриката = Неопределено Тогда
				Сообщить("В документе "+ДокПолуфабриката+" не найдены данные по полуфабрикату "+Стр.Номенклатура+"! Заполнение табличной части по материалам невозможно!");
				Возврат Неопределено;
			КонецЕсли;
			Ответ = ВернутьТаблицуМатериалов(ДокПолуфабриката,,ТекЗаказНаПроизводство);
			Если Ответ = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТоварыОрганизацийОстатки.КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.ТоварыОрганизаций.Остатки(
			|			&НаДату,
			|			Номенклатура = &Номенклатура
			|				И Организация = &Организация
			|				И СерияНоменклатуры = &СерияНоменклатуры) КАК ТоварыОрганизацийОстатки";
			
			Запрос.УстановитьПараметр("НаДату", ТекЗаказНаПроизводство.Дата+61);
			Запрос.УстановитьПараметр("Номенклатура", Стр.Номенклатура);
			Запрос.УстановитьПараметр("Организация", ДокПолуфабриката.Организация);
			Запрос.УстановитьПараметр("СерияНоменклатуры", Стр.СерияНоменклатуры);
			тзОстаткиТовара = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрОтвет Из Ответ Цикл
				
				НовСтр = Таб.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,СтрОтвет);
				НовСтр.СерияНоменклатуры = Стр.СерияНоменклатуры;
				Коэф = ?(Стр.Количество=СтрокаПолуфабриката.Количество, 1, Стр.Количество / СтрокаПолуфабриката.Количество);
				
				Если ИсхДок <> Неопределено И тзОстаткиТовара.Количество() > 0 И тзОстаткиТовара[0].КоличествоОстаток = 0 Тогда
					Запрос = Новый Запрос;
					Если ТипЗнч(ИсхДок) = Тип("ДокументОбъект.РеализацияУслугПоПереработке")
						ИЛИ ТипЗнч(ИсхДок) = Тип("ДокументОбъект.ПолучениеУслугПоПереработке")
						ИЛИ ТипЗнч(ИсхДок) = Тип("ДокументОбъект.ПоступлениеТоваровИзПереработки") Тогда
						Запрос.Текст =
						"ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	ОтчетПроизводстваЗаСменуМатериалы.ЗаказВыпуска
						|ПОМЕСТИТЬ ЗаказыНаПроизводство
						|ИЗ
						|	Документ.ОтчетПроизводстваЗаСмену.Материалы КАК ОтчетПроизводстваЗаСменуМатериалы
						|ГДЕ
						|	ОтчетПроизводстваЗаСменуМатериалы.Ссылка.Проведен
						|	И ОтчетПроизводстваЗаСменуМатериалы.Ссылка.Дата < &НаДату
						|	И ОтчетПроизводстваЗаСменуМатериалы.СерияНоменклатуры = &СерияНоменклатуры
						|	И ОтчетПроизводстваЗаСменуМатериалы.Номенклатура = &Полуфабрикат
						|	И НАЧАЛОПЕРИОДА(ОтчетПроизводстваЗаСменуМатериалы.Ссылка.Дата, ГОД) = НАЧАЛОПЕРИОДА(&НаДату, ГОД)
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ЕстьNull(СУММА(ПолучениеУслугПоПереработкеИспользованныеМатериалы.Количество), 0) КАК КоличествоОстаток
						|ИЗ
						|	Документ.ПолучениеУслугПоПереработке.ИспользованныеМатериалы КАК ПолучениеУслугПоПереработкеИспользованныеМатериалы
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаказыНаПроизводство КАК ЗаказыНаПроизводство
						|		ПО (ПОДСТРОКА(ПолучениеУслугПоПереработкеИспользованныеМатериалы.Ссылка.Комментарий, 1, 11) = ЗаказыНаПроизводство.ЗаказВыпуска.Номер)
						|ГДЕ
						|	ПолучениеУслугПоПереработкеИспользованныеМатериалы.Ссылка.Проведен
						|	И ПолучениеУслугПоПереработкеИспользованныеМатериалы.Ссылка.Дата < &НаДату
						|	И ПолучениеУслугПоПереработкеИспользованныеМатериалы.Номенклатура = &Материал
						|	И НАЧАЛОПЕРИОДА(ПолучениеУслугПоПереработкеИспользованныеМатериалы.Ссылка.Дата, ГОД) = НАЧАЛОПЕРИОДА(&НаДату, ГОД)";
						
						Запрос.УстановитьПараметр("Полуфабрикат", Стр.Номенклатура);
						Запрос.УстановитьПараметр("Материал", СтрОтвет.Номенклатура);
						Запрос.УстановитьПараметр("СерияНоменклатуры", Стр.СерияНоменклатуры);
					Иначе
						НовСтр.Количество = НовСтр.Количество * Коэф;
						НовСтр.Сумма = НовСтр.Сумма * Коэф;
						Продолжить;
					КонецЕсли;
					
					Запрос.УстановитьПараметр("НаДату", ТекЗаказНаПроизводство.Дата+62);
					Запрос.УстановитьПараметр("ДоговорКонтрагента", ИсхДок.ДоговорКонтрагента);
					Запрос.УстановитьПараметр("Контрагент", ИсхДок.Контрагент);
					Запрос.УстановитьПараметр("Организация", ИсхДок.Организация);
					Запрос.УстановитьПараметр("Номенклатура", СтрОтвет.Номенклатура);
					тзРезультат = Запрос.Выполнить().Выгрузить();
					
					Если тзРезультат.Количество() = 0 Тогда
						Сообщить("Не удалось получить остаток переданного товара """ + СтрОтвет.Номенклатура + """!");
						Возврат Неопределено;
					Иначе
						НовСтр.Количество = СтрОтвет.Количество - тзРезультат[0].КоличествоОстаток;
						НовСтр.Сумма = НовСтр.Сумма * Коэф;
					КонецЕсли;
				Иначе
					НовСтр.Количество = НовСтр.Количество * Коэф;
					НовСтр.Сумма = НовСтр.Сумма * Коэф;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Таб;

КонецФункции // ВернутьТаблицуМатериалов(Таб,док)()

Функция ЗаполнитьТаблицуМатериалов(Заказ1,Заказ2,ИсхДок = Неопределено, ТекЗаказНаПроизводство = Неопределено)

	//находим производство
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ Ссылка, ЗаказРезерв ИЗ Документ.ОтчетПроизводстваЗаСмену.Продукция
		|ГДЕ ЗаказВыпуска=&ЗаказВыпуска И ЗаказРезерв=&ЗаказРезерв И Ссылка.Проведен
		|СГРУППИРОВАТЬ ПО Ссылка, ЗаказРезерв";
	
	Запрос.УстановитьПараметр("ЗаказВыпуска", Заказ1);
	Запрос.УстановитьПараметр("ЗаказРезерв", Заказ2);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		док = Выборка.Ссылка;
	Иначе
		Сообщить("Не обнаружен отчет по производству по документу "+Заказ1+"! Заполнение табличной части по материалам невозможно!");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ВернутьТаблицуМатериалов(док, ИсхДок, ТекЗаказНаПроизводство);

КонецФункции

Функция ПерезаполнитьМатериалыВРеализацииИПолученииУслугПоПереработке(Отказ, ЗаказНаПроизводство, ЗаказПоставщику, ЗаказПокупателя)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
	Запрос.УстановитьПараметр("Комментарий", ЗаказНаПроизводство.Номер);
	
	// Реализация услуг по переработке
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Ссылка
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Сделка = &ЗаказПокупателя
	|	И РеализацияУслугПоПереработке.Проведен
	|	И РеализацияУслугПоПереработке.Комментарий ПОДОБНО &Комментарий";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		док = Выборка.Ссылка.ПолучитьОбъект();
	Иначе	
		Сообщить("Не удалось найти документ реализации услуг по переработке");
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Ответ = ЗаполнитьТаблицуМатериалов(ЗаказНаПроизводство,ЗаказПокупателя, док, ЗаказНаПроизводство);
	Если Ответ = Неопределено Тогда
		Сообщить("Не удалось заполнить таблицу материалов документа ""Реализация услуг по переработке""!");
		Отказ = Истина;
		Возврат Ложь;
	Иначе
		Ответ.ЗаполнитьЗначения(Неопределено,"СерияНоменклатуры");
		док.ИспользованныеМатериалы.Очистить();
		док.ИспользованныеМатериалы.Загрузить(Ответ);
	КонецЕсли;
	
	Для каждого НовСтр Из док.ИспользованныеМатериалы Цикл
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НовСтр, док);
		СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
		док.Контрагент, док.ТипЦен, док.ДоговорКонтрагента, док.Дата, док.ВалютаДокумента, док.УчитыватьНДС, док.СуммаВключаетНДС);
		док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НовСтр, "ИспользованныеМатериалы", Истина);
		НовСтр.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве;
	КонецЦикла;
	
	Попытка
		док.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
		Возврат Ложь;
	КонецПопытки;
	
	// Получение услуг по переработке
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПолучениеУслугПоПереработке.Ссылка
	|ИЗ
	|	Документ.ПолучениеУслугПоПереработке КАК ПолучениеУслугПоПереработке
	|ГДЕ
	|	ПолучениеУслугПоПереработке.Заказ = &ЗаказПоставщику
	|	И ПолучениеУслугПоПереработке.Комментарий ПОДОБНО &Комментарий
	|	И ПолучениеУслугПоПереработке.Проведен";
	
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		док = Выборка.Ссылка.ПолучитьОбъект();
		//док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе	
		Сообщить("Не удалось найти документ получения услуг по переработке");
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;		
	
	док.ИспользованныеМатериалы.Загрузить(Ответ);
	
	Для каждого НовСтр Из док.ИспользованныеМатериалы Цикл
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НовСтр, док);
		СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
		док.Контрагент, док.ТипЦен, док.ДоговорКонтрагента, док.Дата, док.ВалютаДокумента, док.УчитыватьНДС, док.СуммаВключаетНДС);
		НовСтр.НоменклатурнаяГруппа = НовСтр.Номенклатура.НоменклатурнаяГруппаЗатрат;
		НовСтр.СтатьяЗатрат 		= Справочники.СтатьиЗатрат.НайтиПоКоду("100000512");
		НовСтр.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
		НовСтр.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
		НовСтр.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
	КонецЦикла;
	
	Попытка
		док.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Процедура ПослеПроведенияПередачиТоваровОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.ЭтоСозданиеПакета Тогда
		Источник.ЭтоСозданиеПакета = Ложь;
		Источник.Записать(РежимЗаписиДокумента.Запись);
	ИначеЕсли Источник.Проведен И Источник.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
		Набор = Источник.Движения.ПартииТоваровНаСкладахБухгалтерскийУчет;
		Набор.Прочитать();
		ТабСтоимость = Набор.Выгрузить(,"Стоимость,НомерСтрокиСписанныхТоваров");
		ТабСтоимость.Свернуть("НомерСтрокиСписанныхТоваров","Стоимость");
		Модифицирован = Ложь;
		
		Для каждого Стр Из Источник.Товары Цикл
			СтрСтоимость = ТабСтоимость.Найти(Стр.НомерСтроки,"НомерСтрокиСписанныхТоваров");
			Если СтрСтоимость = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ Стр.Сумма = СтрСтоимость.Стоимость Тогда
				Стр.Сумма = СтрСтоимость.Стоимость;
				Стр.Цена = Стр.Сумма / ?(Стр.Количество=0,1,Стр.Количество);
				Модифицирован = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Модифицирован Тогда
			Попытка
				Источник.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Источник.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
			
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаказНаПроизводствоПродукция.Заказ,
			|	ЗаказНаПроизводствоПродукция.Ссылка КАК ЗаказНаПроизводство
			|ИЗ
			|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
			|ГДЕ
			|	ЗаказНаПроизводствоПродукция.Ссылка.Номер = &Номер
			|	И НАЧАЛОПЕРИОДА(ЗаказНаПроизводствоПродукция.Ссылка.Дата, ДЕНЬ) = &НачалоДня
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказНаПроизводствоПродукция.Заказ,
			|	ЗаказНаПроизводствоПродукция.Ссылка";
			
			Запрос.УстановитьПараметр("НачалоДня", НачалоДня(Источник.Дата));
			Запрос.УстановитьПараметр("Номер", СокрЛП(Источник.Комментарий));
			
			тзРезультат = Запрос.Выполнить().Выгрузить();
			Если тзРезультат.Количество() = 0 Тогда
				Сообщить("Не удалось определить заказ по документу");
				Отказ = Истина;
				Возврат;
			ИначеЕсли тзРезультат.Количество() > 1 Тогда
				Сообщить("Получено несколько заказов по документу передачи");
				Отказ = Истина;
				Возврат;
			Иначе
				ЗаказПокупателя = тзРезультат[0].Заказ;
				ЗаказПоставщику = ЗаказПокупателя.ДокументОснование;
				ЗаказНаПроизводство = тзРезультат[0].ЗаказНаПроизводство;
			КонецЕсли;
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗаказНаПроизводствоПродукция.Номенклатура
			|ИЗ
			|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
			|ГДЕ
			|	ЗаказНаПроизводствоПродукция.Ссылка = &ЗаказНаПроизводство
			|	И ЗаказНаПроизводствоПродукция.Номенклатура.СтатьяЗатрат = &СтатьяЗатратПолуфабрикатыВПроизводстве
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказНаПроизводствоПродукция.Номенклатура";
			
			СтатьяЗатратПолуфабрикатыВПроизводстве = Справочники.СтатьиЗатрат.НайтиПоКоду("100000509");
			Если СтатьяЗатратПолуфабрикатыВПроизводстве = Справочники.СтатьиЗатрат.ПустаяСсылка() Тогда
				Сообщить("Не удалось найти статью затрат ""Полуфабрикаты в производстве (ПО)"" по коду ""100000509""");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
			Запрос.УстановитьПараметр("СтатьяЗатратПолуфабрикатыВПроизводстве", СтатьяЗатратПолуфабрикатыВПроизводстве);
			
			ЭтоПолуфабрикат = (Запрос.Выполнить().Выгрузить().Количество() > 0);
			
			// Поступление товаров и услуг
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПоступлениеТоваровУслуг.Ссылка
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
			|ГДЕ
			|	ПоступлениеТоваровУслуг.Сделка = &ЗаказПокупателя
			|	И ПоступлениеТоваровУслуг.Проведен
			|	И ПоступлениеТоваровУслуг.Комментарий ПОДОБНО &Комментарий";
			
			Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
			Запрос.УстановитьПараметр("Комментарий", СокрЛП(Источник.Комментарий));
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				док = Выборка.Ссылка.ПолучитьОбъект();
			Иначе	
				Сообщить("Не удалось найти документ поступления в переработку");
				Отказ = Истина;
				Возврат;
			КонецЕсли;		
			
			док.Товары.Очистить();
			Для каждого Стр Из Источник.Товары Цикл
				//Если Стр.Номенклатура.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство Тогда
				//	Продолжить;
				//КонецЕсли;
				НовСтр = док.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Стр);
				////Если ТабСтоимость<>Неопределено Тогда
				//	СтрСтоимость = ТабСтоимость.Найти(НовСтр.НомерСтроки,"НомерСтрокиСписанныхТоваров");
				//	//Если СтрСтоимость = Неопределено Тогда
				//	//	Продолжить;
				//	//КонецЕсли;
				//	НовСтр.Сумма = СтрСтоимость.Стоимость;
				//	НовСтр.Цена = НовСтр.Сумма/?(НовСтр.Количество=0,1,НовСтр.Количество);
				////КонецЕсли;
				СтрСтоимость = ТабСтоимость.Найти(НовСтр.НомерСтроки,"НомерСтрокиСписанныхТоваров");
				Если СтрСтоимость = Неопределено Тогда
					Сообщить("Внутренняя ошибка код: А01, обратитесь к разработчику");
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				//Если НЕ Стр.Сумма = СтрСтоимость.Стоимость Тогда
					НовСтр.Сумма = СтрСтоимость.Стоимость;
					НовСтр.Цена = НовСтр.Сумма / ?(НовСтр.Количество=0,1,НовСтр.Количество);
				//КонецЕсли;
				СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти("Товары", НовСтр, док, Истина);
			КонецЦикла;
	
			Попытка
				док.Записать(РежимЗаписиДокумента.Проведение);
				//Состояние("Проведен документ: " + док);
			Исключение
				док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Сообщить(ОписаниеОшибки());
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
			// Требование-накладная
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТребованиеНакладнаяМатериалы.Ссылка
			|ИЗ
			|	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
			|ГДЕ
			|	ТребованиеНакладнаяМатериалы.Ссылка.ДокументОснование = &ЗаказНаПроизводство
			|	И ТребованиеНакладнаяМатериалы.Заказ = &ЗаказПокупателя
			|	И ТребованиеНакладнаяМатериалы.Ссылка.Проведен
			|
			|СГРУППИРОВАТЬ ПО
			|	ТребованиеНакладнаяМатериалы.Ссылка";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				док = Выборка.Ссылка.ПолучитьОбъект();
			Иначе	
				Сообщить("Не удалось найти документ ""Требование-накладная""");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Попытка
				док.Записать(РежимЗаписиДокумента.Проведение);
				//Состояние("Проведен документ: " + док);
			Исключение
				док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Сообщить(ОписаниеОшибки());
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
			// Отчет производства за смену
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтчетПроизводстваЗаСменуПродукция.Ссылка,
			|	ОтчетПроизводстваЗаСменуПродукция.ЗаказРезерв
			|ИЗ
			|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
			|ГДЕ
			|	ОтчетПроизводстваЗаСменуПродукция.ЗаказВыпуска = &ЗаказНаПроизводство
			|	И ОтчетПроизводстваЗаСменуПродукция.ЗаказРезерв = &ЗаказПокупателя
			|	И ОтчетПроизводстваЗаСменуПродукция.Ссылка.Проведен
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетПроизводстваЗаСменуПродукция.Ссылка,
			|	ОтчетПроизводстваЗаСменуПродукция.ЗаказРезерв";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				док = Выборка.Ссылка.ПолучитьОбъект();
			Иначе	
				Сообщить("Не удалось найти документ ""Отчет производства за смену""");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Попытка
				док.Записать(РежимЗаписиДокумента.Проведение);
				//Состояние("Проведен документ: " + док);
			Исключение
				док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Сообщить(ОписаниеОшибки());
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
			
			Если ЭтоПолуфабрикат Тогда
				ДокументВыпускаПФ = док.Ссылка;
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ОтчетПроизводстваЗаСменуПродукция.Номенклатура,
				|	ОтчетПроизводстваЗаСменуПродукция.СерияНоменклатуры
				|ПОМЕСТИТЬ ВыпущенноеСырье
				|ИЗ
				|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
				|ГДЕ
				|	ОтчетПроизводстваЗаСменуПродукция.Ссылка = &ДокументВыпускаПФ
				|	И НЕ ОтчетПроизводстваЗаСменуПродукция.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
				|
				|СГРУППИРОВАТЬ ПО
				|	ОтчетПроизводстваЗаСменуПродукция.СерияНоменклатуры,
				|	ОтчетПроизводстваЗаСменуПродукция.Номенклатура
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ОтчетПроизводстваЗаСменуМатериалы.Ссылка КАК ДокументВыпуска,
				|	ОтчетПроизводстваЗаСменуМатериалы.Заказ КАК ЗаказПокупателя,
				|	ОтчетПроизводстваЗаСменуМатериалы.Заказ.ДокументОснование КАК ЗаказПоставщику,
				|	ОтчетПроизводстваЗаСменуМатериалы.ЗаказВыпуска КАК ЗаказНаПроизводство
				|ИЗ
				|	Документ.ОтчетПроизводстваЗаСмену.Материалы КАК ОтчетПроизводстваЗаСменуМатериалы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыпущенноеСырье КАК ВыпущенноеСырье
				|		ПО ОтчетПроизводстваЗаСменуМатериалы.Номенклатура = ВыпущенноеСырье.Номенклатура
				|			И ОтчетПроизводстваЗаСменуМатериалы.СерияНоменклатуры = ВыпущенноеСырье.СерияНоменклатуры
				|
				|СГРУППИРОВАТЬ ПО
				|	ОтчетПроизводстваЗаСменуМатериалы.Ссылка,
				|	ОтчетПроизводстваЗаСменуМатериалы.Заказ,
				|	ОтчетПроизводстваЗаСменуМатериалы.ЗаказВыпуска,
				|	ОтчетПроизводстваЗаСменуМатериалы.Заказ.ДокументОснование
				|
				|УПОРЯДОЧИТЬ ПО
				|	ОтчетПроизводстваЗаСменуМатериалы.Ссылка.МоментВремени";
				
				Запрос.УстановитьПараметр("ДокументВыпускаПФ", ДокументВыпускаПФ);
				
				тзРезультат = Запрос.Выполнить().Выгрузить();
				
				Для каждого стрТЗ Из тзРезультат Цикл
					Успешно = ПерезаполнитьМатериалыВРеализацииИПолученииУслугПоПереработке(Отказ, стрТЗ.ЗаказНаПроизводство, стрТЗ.ЗаказПоставщику, стрТЗ.ЗаказПокупателя);
					Если НЕ Успешно Тогда
						Возврат;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				Успешно = ПерезаполнитьМатериалыВРеализацииИПолученииУслугПоПереработке(Отказ, ЗаказНаПроизводство, ЗаказПоставщику, ЗаказПокупателя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

