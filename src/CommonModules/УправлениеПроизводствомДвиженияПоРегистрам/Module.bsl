////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕДЕНИЯ ДОКУМЕНТА "ПЕРЕНОС ЗАТРАТ НА ПРОИЗВОДСТВО (МЕЖДУНАРОДНЫЙ)"

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕСЧЕТА СУММЫ В ВАЛЮТУ МЕЖДУНАРОДНОГО УЧЕТА

// Функция получает курс валюты регламентированного учета.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	Период - Дата - Дата курса
//
// Возвращаемое значение:
//	Число - Курс валюты
//
Функция ПолучитьКурсВалютыРегл(
	СтруктураШапкиДокумента,
	Период
	)
	
	КурсыВалютыРегл = СтруктураШапкиДокумента.КурсыВалютыРегл;
	
	Курс = КурсыВалютыРегл.Получить(Период);
	Если Курс = Неопределено Тогда
		
		Курс = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Период).Курс;
		КурсыВалютыРегл.Вставить(Период, Курс);
		
	КонецЕсли;
	
	Возврат Курс;
	
КонецФункции // ПолучитьКурсВалютыРегл()

// Функция получает курс валюты международного учета.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	Период - Дата - Дата курса
//
// Возвращаемое значение:
//	Число - Курс валюты
//
Функция ПолучитьКурсВалютыМежд(
	СтруктураШапкиДокумента,
	Период
	)
	
	КурсыВалютыМежд = СтруктураШапкиДокумента.КурсыВалютыМежд;
	
	Курс = КурсыВалютыМежд.Получить(Период);
	Если Курс = Неопределено Тогда
		
		Курс = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаМеждународногоУчета, Период).Курс;
		КурсыВалютыМежд.Вставить(Период, Курс);
		
	КонецЕсли;
	
	Возврат Курс;
	
КонецФункции // ПолучитьКурсВалютыМежд()

// Функция пересчитывает сумму из валюты регламентированного учета в валюту международного учета.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	Сумма - Число - Сумма в валюте регламентированного учета
//	Период - Дата - Дата операции
//
// Возвращаемое значение:
//	Число - Сумма в валюте международного учета
//
Функция ПолучитьСуммуВВалютеМеждународногоУчета(
	СтруктураШапкиДокумента,
	Сумма, 
	Знач Период
	)
	
	Если СтруктураШапкиДокумента.ВалютаМеждународногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
		СуммаМежд = Сумма;
	Иначе
		Период = НачалоДня(Период);
		
		СуммаМежд = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			Сумма, 
			СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
			СтруктураШапкиДокумента.ВалютаМеждународногоУчета, 
			ПолучитьКурсВалютыРегл(СтруктураШапкиДокумента, Период), 
			ПолучитьКурсВалютыМежд(СтруктураШапкиДокумента, Период), 
			СтруктураШапкиДокумента.КратностьВалютыРегл, 
			СтруктураШапкиДокумента.КратностьВалютыМежд);
	КонецЕсли;
	
	Возврат СуммаМежд;
	
КонецФункции // ПолучитьСуммуВВалютеМеждународногоУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОЛУЧЕНИЯ СЧЕТА МЕЖДУНАРОДНОГО УЧЕТА

// Функция получает счет межд. учета соответствующий счету бух. учета
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	СчетБух - ПланСчетовСсылка.Хозрасчетный - Счет бух. учета
//
// Возвращаемое значение:
//	ПланСчетовСсылка.Международный - Счет межд. учета
//
Функция ПолучитьСчетМежд(
	СтруктураШапкиДокумента,
	Знач СчетБух
	)
	
	СоответствиеСчетаМежд = СтруктураШапкиДокумента.СоответствиеСчетаМежд;
	
	СчетМежд = СоответствиеСчетаМежд.Получить(СчетБух);
	Если СчетМежд = Неопределено Тогда
		
		СчетМежд = МеждународныйУчет.ПреобразоватьСчетаБУвСчетМСФО(СчетБух, , , , СтруктураШапкиДокумента.ПериодКонец).Счет;
		СоответствиеСчетаМежд.Вставить(СчетБух, СчетМежд);
		
	КонецЕсли;
	
	Возврат СчетМежд;
	
КонецФункции // ПолучитьСчетМежд()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕНОСА ДВИЖЕНИЙ ПО РЕГИСТРУ "НЕЗАВЕРШЕННОЕ ПРОИЗВОДСТВО"

// Функция формирует запрос по регистру "Незавершенное производство (бухгалтерский учет)".
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//
// Возвращаемое значение:
//	Запрос - Запрос по регистру "Незавершенное производство (бухгалтерский учет)"
//
Функция СформироватьЗапросПоРегиструНезавершенноеПроизводство(
	СтруктураШапкиДокумента
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*,
	|	НезавершенноеПроизводство.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат
	|ИЗ
	|	РегистрНакопления.НезавершенноеПроизводствоБухгалтерскийУчет КАК НезавершенноеПроизводство
	|
	|ГДЕ
	|	НезавершенноеПроизводство.Организация = &Организация
	|	И НезавершенноеПроизводство.Период МЕЖДУ &ПериодНачало И &ПериодКонец
	|	И НезавершенноеПроизводство.Активность
	|	И НезавершенноеПроизводство.СтатьяЗатрат.ВидЗатрат <> &Амортизация
	|	И НезавершенноеПроизводство.КодОперации В (&КодыОпераций)
	|	И Не НезавершенноеПроизводство.Регистратор ССЫЛКА Документ.ТребованиеНакладная
	|	И Не НезавершенноеПроизводство.Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	НезавершенноеПроизводство.Регистратор,
	|	НезавершенноеПроизводство.НомерСтроки
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПериодНачало", СтруктураШапкиДокумента.ПериодНачало);
	Запрос.УстановитьПараметр("ПериодКонец", СтруктураШапкиДокумента.ПериодКонец);
	Запрос.УстановитьПараметр("Амортизация", Перечисления.ВидыЗатрат.Амортизация);
	
	КодыОпераций = Новый Массив;
	КодыОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПрочихЗатратВПроизводство);
	КодыОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.ВозвратМатериаловИзПроизводстваФикс);
	КодыОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.ВнутренниеУслугиНаПроизводство);
	КодыОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.УслугиКонтрагентаНаПроизводство);
	КодыОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеНЗПФикс);
	КодыОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.ОтрицательныеЗатраты);
	КодыОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.ОприходованиеНЗП);
	КодыОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.ОприходованиеНЗПФикс);
	КодыОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс);
	КодыОпераций.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.ПустаяСсылка());
	Запрос.УстановитьПараметр("КодыОпераций", КодыОпераций);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоРегиструНезавершенноеПроизводство()

// Процедура формирует движения по регистру "Незавершенное производство (международный учет)"
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//	СчетУчета - ПланСчетовСсылка.Международный - Счет межд. учета
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство (Межд)"
//
Процедура СформироватьДвиженияПоРегиструНезавершенноеПроизводствоМежд(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СчетУчета,
	НаборЗаписейНезавершенноеПроизводство
	)
	
	Стоимость = ПолучитьСуммуВВалютеМеждународногоУчета(
		СтруктураШапкиДокумента,
		СтрокаВыборки.Стоимость, 
		СтрокаВыборки.Период
	);
	Если Стоимость = 0
	   И СтрокаВыборки.Количество = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Незавершенное производство (международный учет)" должны быть заполнены измерения:
	//	- Организация,
	//	- Подразделение,
	//	- СчетУчета,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Затрата - всегда заполняется в случае указания статей затрат с видом затрат "Материальные",
	//		для нематериальных статей затрат должен заполнятся способ распределения затрат.
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты - заполняется, если ведется учет по сериям в НЗП.
	
	НоваяСтрока = НаборЗаписейНезавершенноеПроизводство.Добавить();
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	НоваяСтрока.СчетУчета = СчетУчета;
	НоваяСтрока.Стоимость = Стоимость;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейНезавершенноеПроизводство.Количество() = 1000 Тогда
		НаборЗаписейНезавершенноеПроизводство.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНезавершенноеПроизводствоМежд()

// Процедура переносит движения по регистру "Незавершенное производство" в межд. учет
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//
Процедура ПеренестиДвиженияПоРегиструНезавершенноеПроизводствоМежд(
	СтруктураШапкиДокумента
	) 
	
	Запрос = СформироватьЗапросПоРегиструНезавершенноеПроизводство(СтруктураШапкиДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНаборыЗаписей = Новый Структура;
	
	ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
		СтруктураШапкиДокумента, 
		"НезавершенноеПроизводствоМеждународныйУчет", 
		СтруктураНаборыЗаписей
	);
	Если Не ПолученНаборЗаписей Тогда
		Возврат;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные 
		   И Выборка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СчетУчетаМежд = ПолучитьСчетМежд(
			СтруктураШапкиДокумента,
			Выборка.СчетУчета
		);
		
		Если ЗначениеЗаполнено(СчетУчетаМежд) Тогда
			
			СформироватьДвиженияПоРегиструНезавершенноеПроизводствоМежд(
				СтруктураШапкиДокумента,
				Выборка,
				СчетУчетаМежд,
				СтруктураНаборыЗаписей.НезавершенноеПроизводствоМеждународныйУчет
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураНаборыЗаписей.НезавершенноеПроизводствоМеждународныйУчет.Модифицированность() Тогда
		СтруктураНаборыЗаписей.НезавершенноеПроизводствоМеждународныйУчет.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ПеренестиДвиженияПоРегиструНезавершенноеПроизводствоМежд()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕНОСА ДВИЖЕНИЙ ПО РЕГИСТРУ "ЗАТРАТЫ"

// Функция формирует запрос по регистру "Затраты (бухгалтерский учет)".
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//
// Возвращаемое значение:
//	Запрос - Запрос по регистру "Затраты (бухгалтерский учет)"
//
Функция СформироватьЗапросПоРегиструЗатраты(
	СтруктураШапкиДокумента
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрНакопления.ЗатратыБухгалтерскийУчет КАК Затраты
	|
	|ГДЕ
	|	Затраты.Организация = &Организация
	|	И Затраты.Период МЕЖДУ &ПериодНачало И &ПериодКонец
	|	И Затраты.Активность
	|	И Затраты.СтатьяЗатрат.ВидЗатрат <> &Амортизация
	|	И Затраты.КодОперации В (&КодыОпераций)
	|	И Не Затраты.Регистратор ССЫЛКА Документ.ТребованиеНакладная
	|	И Не Затраты.Регистратор ССЫЛКА Документ.СписаниеТоваров
	|	И Не Затраты.Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	Затраты.Регистратор,
	|	Затраты.НомерСтроки
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПериодНачало", СтруктураШапкиДокумента.ПериодНачало);
	Запрос.УстановитьПараметр("ПериодКонец", СтруктураШапкиДокумента.ПериодКонец);
	Запрос.УстановитьПараметр("Амортизация", Перечисления.ВидыЗатрат.Амортизация);
	
	КодыОпераций = Новый Массив;
	КодыОпераций.Добавить(Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты);
	КодыОпераций.Добавить(Перечисления.КодыОперацийЗатраты.ВнутренниеУслугиНаПостоянныеЗатраты);
	КодыОпераций.Добавить(Перечисления.КодыОперацийЗатраты.УслугиКонтрагентаНаПостоянныеЗатраты);
	КодыОпераций.Добавить(Перечисления.КодыОперацийЗатраты.ПустаяСсылка());
	Запрос.УстановитьПараметр("КодыОпераций", КодыОпераций);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоРегиструЗатраты()

// Процедура формирует движения по регистру "Затраты (международный учет)"
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//	СчетУчета - ПланСчетовСсылка.Международный - Счет межд. учета
//	НаборЗаписейЗатраты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты (Межд)"
//
Процедура СформироватьДвиженияПоРегиструЗатратыМежд(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СчетУчета,
	НаборЗаписейЗатраты
	)
	
	Сумма = ПолучитьСуммуВВалютеМеждународногоУчета(
		СтруктураШапкиДокумента,
		СтрокаВыборки.Сумма, 
		СтрокаВыборки.Период
	);
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты (международный учет)" должны быть заполнены измерения:
	//	- Организация,
	//	- Подразделение,
	//	- СчетУчета,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ.
	
	НоваяСтрока = НаборЗаписейЗатраты.Добавить();
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	НоваяСтрока.СчетУчета = СчетУчета;
	НоваяСтрока.Сумма = Сумма;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатраты.Количество() = 1000 Тогда
		НаборЗаписейЗатраты.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыМежд()

// Процедура переносит движения по регистру "Затраты" в межд. учет
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//
Процедура ПеренестиДвиженияПоРегиструЗатратыМежд(
	СтруктураШапкиДокумента
	) 
	
	Запрос = СформироватьЗапросПоРегиструЗатраты(СтруктураШапкиДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНаборыЗаписей = Новый Структура;
	
	ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
		СтруктураШапкиДокумента, 
		"ЗатратыМеждународныйУчет", 
		СтруктураНаборыЗаписей
	);
	Если Не ПолученНаборЗаписей Тогда
		Возврат;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СчетУчетаМежд = ПолучитьСчетМежд(
			СтруктураШапкиДокумента,
			Выборка.СчетУчета
		);
		
		Если ЗначениеЗаполнено(СчетУчетаМежд) Тогда
		
			СформироватьДвиженияПоРегиструЗатратыМежд(
				СтруктураШапкиДокумента,
				Выборка,
				СчетУчетаМежд,
				СтруктураНаборыЗаписей.ЗатратыМеждународныйУчет
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураНаборыЗаписей.ЗатратыМеждународныйУчет.Модифицированность() Тогда
		СтруктураНаборыЗаписей.ЗатратыМеждународныйУчет.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ПеренестиДвиженияПоРегиструЗатратыМежд()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕНОСА ДВИЖЕНИЙ ПО РЕГИСТРУ "БРАК В ПРОИЗВОДСТВЕ"

// Функция формирует запрос по регистру "Брак в производстве (бухгалтерский учет)".
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//
// Возвращаемое значение:
//	Запрос - Запрос по регистру "Брак в производстве (бухгалтерский учет)"
//
Функция СформироватьЗапросПоРегиструБракВПроизводстве(
	СтруктураШапкиДокумента
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрНакопления.БракВПроизводствеБухгалтерскийУчет КАК БракВПроизводстве
	|
	|ГДЕ
	|	БракВПроизводстве.Организация = &Организация
	|	И БракВПроизводстве.Период МЕЖДУ &ПериодНачало И &ПериодКонец
	|	И БракВПроизводстве.Активность
	|	И БракВПроизводстве.СтатьяЗатрат.ВидЗатрат <> &Амортизация
	|	И БракВПроизводстве.КодОперации В (&КодыОпераций)
	|	И Не БракВПроизводстве.Регистратор ССЫЛКА Документ.ТребованиеНакладная
	|	И Не БракВПроизводстве.Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	БракВПроизводстве.Регистратор,
	|	БракВПроизводстве.НомерСтроки
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПериодНачало", СтруктураШапкиДокумента.ПериодНачало);
	Запрос.УстановитьПараметр("ПериодКонец", СтруктураШапкиДокумента.ПериодКонец);
	Запрос.УстановитьПараметр("Амортизация", Перечисления.ВидыЗатрат.Амортизация);
	
	КодыОпераций = Новый Массив;
	КодыОпераций.Добавить(Перечисления.КодыОперацийБракВПроизводстве.ПрочиеПостоянныеЗатраты);
	КодыОпераций.Добавить(Перечисления.КодыОперацийБракВПроизводстве.ВнутренниеУслугиНаПостоянныеЗатраты);
	КодыОпераций.Добавить(Перечисления.КодыОперацийБракВПроизводстве.УслугиКонтрагентаНаПостоянныеЗатраты);
	КодыОпераций.Добавить(Перечисления.КодыОперацийБракВПроизводстве.ПустаяСсылка());
	Запрос.УстановитьПараметр("КодыОпераций", КодыОпераций);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоРегиструБракВПроизводстве()

// Процедура формирует движения по регистру "Брак в производстве (международный учет)"
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//	СчетУчета - ПланСчетовСсылка.Международный - Счет межд. учета
//	НаборЗаписейБракВПроизводстве - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Брак в производстве (Межд)"
//
Процедура СформироватьДвиженияПоРегиструБракВПроизводствеМежд(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СчетУчета,
	НаборЗаписейБракВПроизводстве
	)
	
	Сумма = ПолучитьСуммуВВалютеМеждународногоУчета(
		СтруктураШапкиДокумента,
		СтрокаВыборки.Сумма, 
		СтрокаВыборки.Период
	);
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;

	
	// В движениях по регистру "Брак в производстве (международный учет)" должны быть заполнены измерения:
	//	- Организация,
	//	- Подразделение,
	//	- СчетУчета,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции.
	
	НоваяСтрока = НаборЗаписейБракВПроизводстве.Добавить();
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	НоваяСтрока.СчетУчета = СчетУчета;
	НоваяСтрока.Сумма = Сумма;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейБракВПроизводстве.Количество() = 1000 Тогда
		НаборЗаписейБракВПроизводстве.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструБракВПроизводствеМежд()

// Процедура переносит движения по регистру "Брак в производстве" в межд. учет
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//
Процедура ПеренестиДвиженияПоРегиструБракВПроизводствеМежд(
	СтруктураШапкиДокумента
	) 
	
	Запрос = СформироватьЗапросПоРегиструБракВПроизводстве(СтруктураШапкиДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНаборыЗаписей = Новый Структура;
	
	ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
		СтруктураШапкиДокумента, 
		"БракВПроизводствеМеждународныйУчет", 
		СтруктураНаборыЗаписей
	);
	Если Не ПолученНаборЗаписей Тогда
		Возврат;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СчетУчетаМежд = ПолучитьСчетМежд(
			СтруктураШапкиДокумента,
			Выборка.СчетУчета
		);
		
		Если ЗначениеЗаполнено(СчетУчетаМежд) Тогда
		
			СформироватьДвиженияПоРегиструБракВПроизводствеМежд(
				СтруктураШапкиДокумента,
				Выборка,
				СчетУчетаМежд,
				СтруктураНаборыЗаписей.БракВПроизводствеМеждународныйУчет
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураНаборыЗаписей.БракВПроизводствеМеждународныйУчет.Модифицированность() Тогда
		СтруктураНаборыЗаписей.БракВПроизводствеМеждународныйУчет.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ПеренестиДвиженияПоРегиструБракВПроизводствеМежд()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕНОСА ДВИЖЕНИЙ ПО РЕГИСТРУ "ЗАТРАТЫ НА ВЫПУСК ПРОДУКЦИИ"

// Функция формирует запрос по регистру "Затраты на выпуск продукции (бухгалтерский учет)".
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//
// Возвращаемое значение:
//	Запрос - Запрос по регистру "Затраты на выпуск продукции (бухгалтерский учет)"
//
Функция СформироватьЗапросПоРегиструЗатратыНаВыпускПродукции(
	СтруктураШапкиДокумента
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*,
	|	СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукцииБухгалтерскийУчет КАК ЗатратыНаВыпуск
	|
	|ГДЕ
	|	ЗатратыНаВыпуск.Организация = &Организация
	|	И ЗатратыНаВыпуск.Период МЕЖДУ &ПериодНачало И &ПериодКонец
	|	И ЗатратыНаВыпуск.Активность
	|	И Не ЗатратыНаВыпуск.Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗатратыНаВыпуск.Регистратор,
	|	ЗатратыНаВыпуск.НомерСтроки
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПериодНачало", СтруктураШапкиДокумента.ПериодНачало);
	Запрос.УстановитьПараметр("ПериодКонец", СтруктураШапкиДокумента.ПериодКонец);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоРегиструЗатратыНаВыпускПродукции()

// Процедура формирует движения по регистру "Затраты на выпуск продукции (международный учет)"
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//	СчетУчета - ПланСчетовСсылка.Международный - Счет межд. учета
//	НаборЗаписейЗатратыНаВыпуск - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты на выпуск продукции (Межд)"
//
Процедура СформироватьДвиженияПоРегиструЗатратыНаВыпускМежд(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СчетУчета,
	НаборЗаписейЗатратыНаВыпуск
	)
	
	// В движениях по регистру "Затраты на выпуск продукции (международный учет)" должны быть заполнены измерения:
	//	- Организация,
	//	- Подразделение,
	//	- СчетУчета
	//	- НоменклатурнаяГруппа,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции,
	//	- Спецификация,
	//	- Заказ,
	//	- ДокументВыпуска,
	//
	//	- СтатьяЗатрат,
	//	- Затрата,
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты,
	//	- НоменклатурнаяГруппаНЗП,
	//	- ЗаказНЗП,
	//	- ПодразделениеНЗП.
	
	НоваяСтрока = НаборЗаписейЗатратыНаВыпуск.Добавить();
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	НоваяСтрока.СчетУчета = СчетУчета;
	
	НоваяСтрока.Сумма = ПолучитьСуммуВВалютеМеждународногоУчета(
		СтруктураШапкиДокумента,
		СтрокаВыборки.Сумма, 
		СтрокаВыборки.Период
	);

	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейЗатратыНаВыпуск.Количество() = 1000 Тогда
		НаборЗаписейЗатратыНаВыпуск.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыНаВыпускМежд()

// Процедура переносит движения по регистру "Затраты на выпуск продукции" в межд. учет
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//
Процедура ПеренестиДвиженияПоРегиструЗатратыНаВыпускМежд(
	СтруктураШапкиДокумента
	) 
	
	Запрос = СформироватьЗапросПоРегиструЗатратыНаВыпускПродукции(СтруктураШапкиДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНаборыЗаписей = Новый Структура;
	
	ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
		СтруктураШапкиДокумента, 
		"ЗатратыНаВыпускПродукцииМеждународныйУчет", 
		СтруктураНаборыЗаписей
	);
	Если Не ПолученНаборЗаписей Тогда
		Возврат;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СчетУчетаМежд = ПолучитьСчетМежд(
			СтруктураШапкиДокумента,
			Выборка.СчетУчета
		);
		
		Если ЗначениеЗаполнено(СчетУчетаМежд) Тогда
		
			СформироватьДвиженияПоРегиструЗатратыНаВыпускМежд(
				СтруктураШапкиДокумента,
				Выборка,
				СчетУчетаМежд,
				СтруктураНаборыЗаписей.ЗатратыНаВыпускПродукцииМеждународныйУчет
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураНаборыЗаписей.ЗатратыНаВыпускПродукцииМеждународныйУчет.Модифицированность() Тогда
		СтруктураНаборыЗаписей.ЗатратыНаВыпускПродукцииМеждународныйУчет.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ПеренестиДвиженияПоРегиструЗатратыНаВыпускМежд()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕНОСА ДВИЖЕНИЙ ПО РЕГИСТРУ "ВЫПУСК ПРОДУКЦИИ"

// Функция формирует запрос по регистру "Выпуск продукции (бухгалтерский учет)".
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//
// Возвращаемое значение:
//	Запрос - Запрос по регистру "Выпуск продукции (бухгалтерский учет)"
//
Функция СформироватьЗапросПоРегиструВыпускПродукции(
	СтруктураШапкиДокумента
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииБухгалтерскийУчет КАК ВыпускПродукции
	|
	|ГДЕ
	|	ВыпускПродукции.Организация = &Организация
	|	И ВыпускПродукции.Период МЕЖДУ &ПериодНачало И &ПериодКонец
	|	И ВыпускПродукции.Активность
	|	И Не ВыпускПродукции.Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыпускПродукции.Регистратор,
	|	ВыпускПродукции.НомерСтроки
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПериодНачало", СтруктураШапкиДокумента.ПериодНачало);
	Запрос.УстановитьПараметр("ПериодКонец", СтруктураШапкиДокумента.ПериодКонец);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоРегиструВыпускПродукции()

// Процедура формирует движения по регистру "Выпуск продукции (международный учет)"
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//	СчетУчетаНЗП - ПланСчетовСсылка.Международный - Счет межд. учета
//	НаборЗаписейВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Выпуск продукции (Межд)"
//
Процедура СформироватьДвиженияПоРегиструВыпускПродукцииМежд(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СчетУчетаНЗП,
	НаборЗаписейВыпускПродукции
	)
	
	// В движениях по регистру "Выпуск продукции (международный учет)" должны быть заполнены измерения:
	//	- Организация,
	//	- Подразделение,
	//	- НоменклатурнаяГруппа,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции,
	//	- Спецификация,
	//	- Заказ,
	//	- ДокументВыпуска,
	//	- Качество,
	//
	//	- КодОперации,
	//	- ПодразделениеПолучатель,
	//	- ЗаказПолучатель,
	//	- СтатьяЗатратПолучатель,
	//	- НоменклатурнаяГруппаПолучатель,
	//	- СкладПолучатель,
	//	- СчетДт,
	//	- СубконтоДт1,
	//	- СубконтоДт2,
	//	- СубконтоДт3,
	//	- СчетУчетаНЗП,
	//	- ПродукцияПолучатель,
	//	- ХарактеристикаПродукцииПолучатель,
	//	- СерияПродукцииПолучатель,
	//	- ВариантВыпускаПродукции.
	
	НоваяСтрока = НаборЗаписейВыпускПродукции.Добавить();
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	НоваяСтрока.СчетУчетаНЗП = СчетУчетаНЗП;
	
	НоваяСтрока.СчетДт = ПолучитьСчетМежд(
		СтруктураШапкиДокумента,
		СтрокаВыборки.СчетДт
	);
	
	НоваяСтрока.Стоимость = 0;
		
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейВыпускПродукции.Количество() = 1000 Тогда
		НаборЗаписейВыпускПродукции.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструВыпускПродукцииМежд()

// Процедура переносит движения по регистру "Выпуск продукции" в межд. учет
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//
Процедура ПеренестиДвиженияПоРегиструВыпускПродукцииМежд(
	СтруктураШапкиДокумента
	) 
	
	Запрос = СформироватьЗапросПоРегиструВыпускПродукции(СтруктураШапкиДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНаборыЗаписей = Новый Структура;
	
	ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
		СтруктураШапкиДокумента, 
		"ВыпускПродукцииМеждународныйУчет", 
		СтруктураНаборыЗаписей
	);
	Если Не ПолученНаборЗаписей Тогда
		Возврат;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СчетУчетаМежд = ПолучитьСчетМежд(
			СтруктураШапкиДокумента,
			Выборка.СчетУчетаНЗП
		);
		
		Если ЗначениеЗаполнено(СчетУчетаМежд) Тогда
		
			СформироватьДвиженияПоРегиструВыпускПродукцииМежд(
				СтруктураШапкиДокумента,
				Выборка,
				СчетУчетаМежд,
				СтруктураНаборыЗаписей.ВыпускПродукцииМеждународныйУчет
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураНаборыЗаписей.ВыпускПродукцииМеждународныйУчет.Модифицированность() Тогда
		СтруктураНаборыЗаписей.ВыпускПродукцииМеждународныйУчет.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ПеренестиДвиженияПоРегиструВыпускПродукцииМежд()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕНОСА ДВИЖЕНИЙ ПО РЕГИСТРАМ

// Процедура переносит движения по производственнымрегистрам в межд. учет
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Структура реквизитов документа
//
Процедура ПеренестиДвиженияПоПроизводственнымРегистрамМеждународныйУчет(
	СтруктураШапкиДокумента
	) Экспорт
	
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ВалютаМеждународногоУчета = глЗначениеПеременной("ВалютаМеждународногоУчета");
	
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("ВалютаМеждународногоУчета", ВалютаМеждународногоУчета);
	
	КратностьВалютыРегл = МодульВалютногоУчета.ПолучитьКурсВалюты(
		СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
		СтруктураШапкиДокумента.ПериодНачало).Кратность;
		
	КратностьВалютыМежд = МодульВалютногоУчета.ПолучитьКурсВалюты(
		СтруктураШапкиДокумента.ВалютаМеждународногоУчета, 
		СтруктураШапкиДокумента.ПериодНачало).Кратность;
	
	СтруктураШапкиДокумента.Вставить("КратностьВалютыРегл", КратностьВалютыРегл);
	СтруктураШапкиДокумента.Вставить("КратностьВалютыМежд", КратностьВалютыМежд);
	СтруктураШапкиДокумента.Вставить("КурсыВалютыРегл", Новый Соответствие);
	СтруктураШапкиДокумента.Вставить("КурсыВалютыМежд", Новый Соответствие);
	СтруктураШапкиДокумента.Вставить("СоответствиеСчетаМежд", Новый Соответствие);
	
	ПеренестиДвиженияПоРегиструНезавершенноеПроизводствоМежд(СтруктураШапкиДокумента);
	ПеренестиДвиженияПоРегиструЗатратыМежд(СтруктураШапкиДокумента);
	ПеренестиДвиженияПоРегиструБракВПроизводствеМежд(СтруктураШапкиДокумента);
	ПеренестиДвиженияПоРегиструЗатратыНаВыпускМежд(СтруктураШапкиДокумента);
	ПеренестиДвиженияПоРегиструВыпускПродукцииМежд(СтруктураШапкиДокумента);
	
КонецПроцедуры // ПеренестиДвиженияПоПроизводственнымРегистрамМеждународныйУчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ НАКОПЛЕНИЯ "ЗАТРАТЫ НА ВЫПУСК ПРОДУКЦИИ"

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДГОТОВКИ ТЕКСТА ЗАПРОСА ДЛЯ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ НАКОПЛЕНИЯ "ЗАТРАТЫ НА ВЫПУСК ПРОДУКЦИИ"

// Формирует текст запроса для документа "Акт об оказании производственных услуг"
// для табличной части "Распределение материалов" 
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаДляДокументаАктОбОказанииПроизводственныхУслуг()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.Ссылка.Организация			КАК Организация,
	|	Док.Ссылка.Подразделение		КАК Подразделение,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|
	|	Док.НомерСтроки,
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|	Док.Продукция,
	|	Неопределено КАК ХарактеристикаПродукции,
	|	Неопределено КАК СерияПродукции,
	|	Док.Спецификация,
	|
	|	Док.Номенклатура,
	|	Док.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	Док.ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА Док.Номенклатура.ВестиУчетПоСериямВНЗП ТОГДА
	|		Док.СерияНоменклатуры
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияНоменклатуры,
	|	Док.НоменклатурнаяГруппа,
	|	Док.СтатьяЗатрат,
	|
	|	Док.СчетЗатрат,
	|	Док.СчетЗатрат КАК СчетУчета,	
	|	Док.НалоговоеНазначение КАК НалоговоеНазначение,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|	Док.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|
	|	Док.Ссылка.Подразделение КАК ПодразделениеНЗП,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизацииНЗП,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Ссылка.Сделка ССЫЛКА Документ.ЗаказПокупателя И Док.Ссылка.Сделка <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Ссылка.Сделка
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.ЗаказВыпуска ССЫЛКА Документ.ЗаказНаПроизводство И Док.ЗаказВыпуска <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.ЗаказВыпуска
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Ссылка.Сделка ССЫЛКА Документ.ЗаказПокупателя И Док.Ссылка.Сделка <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Ссылка.Сделка
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.ЗаказВыпуска ССЫЛКА Документ.ЗаказНаПроизводство И Док.ЗаказВыпуска <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.ЗаказВыпуска
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Ссылка.Сделка ССЫЛКА Документ.ЗаказПокупателя И Док.Ссылка.Сделка <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Ссылка.Сделка
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.ЗаказВыпуска ССЫЛКА Документ.ЗаказНаПроизводство И Док.ЗаказВыпуска <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.ЗаказВыпуска
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗП,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Ссылка.Сделка ССЫЛКА Документ.ЗаказПокупателя И Док.Ссылка.Сделка <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Ссылка.Сделка
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.ЗаказВыпуска ССЫЛКА Документ.ЗаказНаПроизводство И Док.ЗаказВыпуска <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.ЗаказВыпуска
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗПРегл,
	|
	|	Неопределено КАК ТипСтоимости,
	|	Неопределено КАК КодОперации,
	|
	|	Док.Количество * Док.Коэффициент /Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
	|	0 КАК Сумма,
	|	0 КАК СуммаРегл,
	|	0 КАК НДСВходящий,	
	|	0 КАК НДСКредит,
	|	0 КАК СуммаНал
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг.РаспределениеМатериалов КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Ссылка.ИспользоватьМатериалы
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляДокументаАктОбОказанииПроизводственныхУслуг()

// Формирует текст запроса для документа "Акт об оказании производственных услуг"
// для табличной части "Распределение прочих затрат" 
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаДляДокументаАктОбОказанииПроизводственныхУслугПрочие()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.Ссылка.Организация			КАК Организация,
	|	Док.Ссылка.Подразделение		КАК Подразделение,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|
	|	Док.НомерСтроки,
	|	&ВидВыпускаВыпуск 	КАК ВидВыпуска,
	|	Док.Номенклатура 	КАК Продукция,
	|	Неопределено 		КАК ХарактеристикаПродукции,
	|	Неопределено 		КАК СерияПродукции,
	|	Док.Спецификация,
	|
	|	Док.СпособРаспределенияЗатратНаВыпуск,
	|	Док.НоменклатурнаяГруппа,
	|	Док.СтатьяЗатрат,
	|
	|	Док.СчетЗатрат,
	|	Док.СчетЗатрат КАК СчетУчета,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначение,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|	Док.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|
	|	Док.Ссылка.Подразделение КАК ПодразделениеНЗП,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизацииНЗП,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗП,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗПРегл,
	|
	|	Неопределено КАК ТипСтоимости,
	|	Неопределено КАК КодОперации,
	|
	|	Док.Сумма 		КАК Сумма,
	|	Док.СуммаРегл 	КАК СуммаРегл,
	|	Док.СуммаНДС    КАК НДСВходящий,	
	|	Док.СуммаНДСКредит КАК НДСКредит,
	|	Док.СуммаНал 	КАК СуммаНал
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг.РаспределениеПрочихЗатрат КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Ссылка.ИспользоватьПрочиеЗатраты
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляДокументаАктОбОказанииПроизводственныхУслуг()

// Формирует текст запроса для документа "Поступление товаров из переработки"
// для табличных частей "Распределение материалов" или "Распределение возвратных отходов".
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаДляДокументаПоступлениеТоваровИзПереработки(ИмяТабличнойЧасти)
	
	Если ИмяТабличнойЧасти = "РаспределениеМатериалов" Тогда
		ТекстУсловиеИспользовать = "И Док.Ссылка.ИспользоватьМатериалы";
		ТекстКоличество = "Док.Количество * Док.Коэффициент /Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент";
	Иначе
		ТекстУсловиеИспользовать = "И Док.Ссылка.ИспользоватьВозвратныеОтходы";
		ТекстКоличество = "Док.Количество";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.Ссылка.Организация			КАК Организация,
	|	Док.Ссылка.Подразделение		КАК Подразделение,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|
	|	Док.НомерСтроки,
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|	Док.Продукция,
	|	Док.ХарактеристикаПродукции,
	|	Док.СерияПродукции,
	|	Док.Спецификация,
	|
	|	Док.Номенклатура,
	|	Док.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	Док.ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА Док.Номенклатура.ВестиУчетПоСериямВНЗП ТОГДА
	|		Док.СерияНоменклатуры
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияНоменклатуры,
	|	Док.НоменклатурнаяГруппа,
	|	Док.СтатьяЗатрат,
	|
	|	Док.СчетЗатрат,
	|	Док.СчетЗатрат КАК СчетУчета,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначение, 
	|	Док.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|	Док.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|
	|	Док.Ссылка.Подразделение КАК ПодразделениеНЗП,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизацииНЗП,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗП,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗПРегл,
	|
	|	Неопределено КАК ТипСтоимости,
	|	Неопределено КАК КодОперации,
	|
	|	" + ТекстКоличество + " КАК Количество,
	|	0 КАК НДСВходящий,	
	|	0 КАК НДСКредит,
	|	0 КАК Сумма,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаНал
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ПоступлениеТоваровИзПереработки." + ИмяТабличнойЧасти + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	" + ТекстУсловиеИспользовать + "
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляДокументаПоступлениеТоваровИзПереработки()

// Формирует текст запроса для документа "Поступление товаров из переработки"
// для табличных частей "Распределение прочих затрат".
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаДляДокументаПоступлениеТоваровИзПереработкиПрочие()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.Ссылка.Организация			КАК Организация,
	|	Док.Ссылка.Подразделение		КАК Подразделение,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|
	|	Док.НомерСтроки,
	|	&ВидВыпускаВыпуск 				КАК ВидВыпуска,
	|	Док.Номенклатура 				КАК Продукция,
	|	Док.ХарактеристикаНоменклатуры 	КАК ХарактеристикаПродукции,
	|	Док.СерияНоменклатуры 			КАК СерияПродукции,
	|	Док.Спецификация,
	|
	|	Док.СпособРаспределенияЗатратНаВыпуск,
	|	Док.НоменклатурнаяГруппа,
	|	Док.СтатьяЗатрат,
	|
	|	Док.СчетЗатрат,
	|	Док.СчетЗатрат КАК СчетУчета,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначение, 
	|	Док.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|	Док.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|
	|	Док.Ссылка.Подразделение КАК ПодразделениеНЗП,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизацииНЗП,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗП,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗПРегл,
	|
	|	Неопределено КАК ТипСтоимости,
	|	Неопределено КАК КодОперации,
	|
	|	Док.Сумма 		КАК Сумма,
	|	Док.СуммаРегл 	КАК СуммаРегл,
	|	Док.СуммаНДС    КАК НДСВходящий,	
	|	Док.СуммаНДСКредит КАК НДСКредит,
	|	Док.СуммаНал	КАК СуммаНал
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ПоступлениеТоваровИзПереработки.РаспределениеПрочихЗатрат КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Ссылка.ИспользоватьПрочиеЗатраты
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляДокументаПоступлениеТоваровИзПереработкиПрочие()

// Формирует текст запроса для документа "Отчет производства за смену"
// для табличных частей "Распределение материалов" или "Распределение возвратных отходов".
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаДляДокументаОтчетПроизводстваЗаСмену(ИмяТабличнойЧасти)
	
	Если ИмяТабличнойЧасти = "РаспределениеМатериалов" Тогда
		ТекстУсловиеИспользовать = "И Док.Ссылка.ИспользоватьМатериалы";
	Иначе
		ТекстУсловиеИспользовать = "И Док.Ссылка.ИспользоватьВозвратныеОтходы";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.Ссылка.Организация			КАК Организация,
	|	Док.Ссылка.Подразделение		КАК Подразделение,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|
	|	Док.НомерСтроки,
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьНаработку ТОГДА
	|		Док.ВидВыпуска
	|	ИНАЧЕ
	|		&ВидВыпускаВыпуск		
	|	КОНЕЦ КАК ВидВыпуска,
	|	Док.Продукция,
	|	Док.ХарактеристикаПродукции,
	|	Док.СерияПродукции,
	|	Док.Спецификация,
	|
	|	Док.Номенклатура,
	|	Док.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	Док.ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА Док.Номенклатура.ВестиУчетПоСериямВНЗП ТОГДА
	|		Док.СерияНоменклатуры
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияНоменклатуры,
	|	Док.НоменклатурнаяГруппа,
	|	Док.СтатьяЗатрат,
	|
	|	Док.СчетЗатрат,
	|	Док.СчетЗатрат КАК СчетУчета,
	|
	|	Док.НалоговоеНазначение КАК НалоговоеНазначение,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьАналитикуНЗП ТОГДА
	|		Док.НоменклатурнаяГруппаНЗП 
	|	ИНАЧЕ
	|		Док.НоменклатурнаяГруппа
	|	КОНЕЦ КАК НоменклатурнаяГруппаНЗП,
	|
	|	ВЫБОР КОГДА Док.ПодразделениеНЗП = &ПустоеПодразделение ИЛИ Не Док.Ссылка.ИспользоватьПодразделенияНЗП ТОГДА
	|		Док.Ссылка.Подразделение
	|	ИНАЧЕ
	|		Док.ПодразделениеНЗП
	|	КОНЕЦ КАК ПодразделениеНЗП,
	|
	|	ВЫБОР КОГДА Док.ПодразделениеОрганизацииНЗП = &ПустоеПодразделениеОрганизации ИЛИ Не Док.Ссылка.ИспользоватьПодразделенияНЗП ТОГДА
	|		Док.Ссылка.ПодразделениеОрганизации
	|	ИНАЧЕ
	|		Док.ПодразделениеОрганизацииНЗП
	|	КОНЕЦ КАК ПодразделениеОрганизацииНЗП,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы 
	|			И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|			И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы 
	|			И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И Док.Заказ <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы 
	|			И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|			И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы 
	|			И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И Док.Заказ <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.ЗаказНЗП ССЫЛКА Документ.ЗаказПокупателя
	|			И Док.ЗаказНЗП <> &ПустойЗаказПокупателя ТОГДА
	|		Док.ЗаказНЗП
	|
	|	КОГДА Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.ЗаказНЗП ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И Док.ЗаказНЗП <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.ЗаказНЗП
	|
	|	КОГДА Не Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|			И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|
	|	КОГДА Не Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И Док.Заказ <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗП,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.ЗаказНЗП ССЫЛКА Документ.ЗаказПокупателя 
	|			И Док.ЗаказНЗП <> &ПустойЗаказПокупателя ТОГДА
	|		Док.ЗаказНЗП
	|
	|	КОГДА Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.ЗаказНЗП ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И Док.ЗаказНЗП <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.ЗаказНЗП
	|
	|	КОГДА Не Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|			И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|
	|	КОГДА Не Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И Док.Заказ <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗПРегл,
	|
	|	Неопределено КАК ТипСтоимости,
	|	Неопределено КАК КодОперации,
	|
	|	Док.Количество * Док.Коэффициент /Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
	|	0 КАК Сумма,
	|	0 КАК СуммаРегл,
	|	0 КАК НДСВходящий,
	|	0 КАК НДСКредит,
	|	0 КАК СуммаНал
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену." + ИмяТабличнойЧасти + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	" + ТекстУсловиеИспользовать + "
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляДокументаОтчетПроизводстваЗаСмену()

// Формирует текст запроса для документа "Отчет производства за смену"
// для табличных частей "Распределение прочих затрат".
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаДляДокументаОтчетПроизводстваЗаСменуПрочие()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.Ссылка.Организация			КАК Организация,
	|	Док.Ссылка.Подразделение		КАК Подразделение,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|
	|	Док.НомерСтроки,
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьНаработку ТОГДА
	|		Док.ВидВыпуска
	|	ИНАЧЕ
	|		&ВидВыпускаВыпуск		
	|	КОНЕЦ КАК ВидВыпуска,
	|	Док.Продукция,
	|	Док.ХарактеристикаПродукции,
	|	Док.СерияПродукции,
	|	Док.Спецификация,
	|
	|	Док.СпособРаспределенияЗатратНаВыпуск,
	|	Док.НоменклатурнаяГруппа,
	|	Док.СтатьяЗатрат,
	|
	|	Док.СчетЗатрат,
	|	Док.СчетЗатрат КАК СчетУчета,
	|
	|	Док.НалоговоеНазначение КАК НалоговоеНазначение,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьАналитикуНЗП ТОГДА
	|		Док.НоменклатурнаяГруппаНЗП 
	|	ИНАЧЕ
	|		Док.НоменклатурнаяГруппа
	|	КОНЕЦ КАК НоменклатурнаяГруппаНЗП,
	|
	|	ВЫБОР КОГДА Док.ПодразделениеНЗП = &ПустоеПодразделение ИЛИ Не Док.Ссылка.ИспользоватьПодразделенияНЗП ТОГДА
	|		Док.Ссылка.Подразделение
	|	ИНАЧЕ
	|		Док.ПодразделениеНЗП
	|	КОНЕЦ КАК ПодразделениеНЗП,
	|
	|	ВЫБОР КОГДА Док.ПодразделениеОрганизацииНЗП = &ПустоеПодразделениеОрганизации ИЛИ Не Док.Ссылка.ИспользоватьПодразделенияНЗП ТОГДА
	|		Док.Ссылка.ПодразделениеОрганизации
	|	ИНАЧЕ
	|		Док.ПодразделениеОрганизацииНЗП
	|	КОНЕЦ КАК ПодразделениеОрганизацииНЗП,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.ЗаказНЗП ССЫЛКА Документ.ЗаказПокупателя
	|			И Док.ЗаказНЗП <> &ПустойЗаказПокупателя ТОГДА
	|		Док.ЗаказНЗП
	|
	|	КОГДА Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.ЗаказНЗП ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И Док.ЗаказНЗП <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.ЗаказНЗП
	|
	|	КОГДА Не Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|			И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|
	|	КОГДА Не Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И Док.Заказ <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗП,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.ЗаказНЗП ССЫЛКА Документ.ЗаказПокупателя 
	|			И Док.ЗаказНЗП <> &ПустойЗаказПокупателя ТОГДА
	|		Док.ЗаказНЗП
	|
	|	КОГДА Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.ЗаказНЗП ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И Док.ЗаказНЗП <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.ЗаказНЗП
	|
	|	КОГДА Не Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|			И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|
	|	КОГДА Не Док.Ссылка.ИспользоватьАналитикуНЗП 
	|			И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И Док.Заказ <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗПРегл,
	|
	|	Неопределено КАК ТипСтоимости,
	|	Неопределено КАК КодОперации,
	|
	|	Док.Сумма 		КАК Сумма,
	|	Док.СуммаРегл 	КАК СуммаРегл,
	|	Док.СуммаНДС    КАК НДСВходящий,	
	|	Док.СуммаНДСКредит КАК НДСКредит,
	|	Док.СуммаНал	КАК СуммаНал
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.РаспределениеПрочихЗатрат КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Ссылка.ИспользоватьПрочиеЗатраты
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляДокументаОтчетПроизводстваЗаСменуПрочие()

// Формирует текст запроса для документа "Отчет производства за смену"
// для табличных частей "Распределение тех. операций".
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаДляДокументаОтчетПроизводстваЗаСменуТехОперации()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.Ссылка.Организация			КАК Организация,
	|	Док.Ссылка.Подразделение		КАК Подразделение,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|
	|	Док.НомерСтроки,
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьНаработку ТОГДА
	|		Док.ВидВыпуска
	|	ИНАЧЕ
	|		&ВидВыпускаВыпуск		
	|	КОНЕЦ КАК ВидВыпуска,
	|	Док.Номенклатура 				КАК Продукция,
	|	Док.ХарактеристикаНоменклатуры 	КАК ХарактеристикаПродукции,
	|	Док.СерияНоменклатуры 			КАК СерияПродукции,
	|	Док.Спецификация,
	|
	|	Неопределено КАК СпособРаспределенияЗатратНаВыпуск,
	|	Док.НоменклатурнаяГруппа,
	|	Док.СтатьяЗатрат,
	|
	|	Док.СчетЗатрат,
	|	Док.СчетЗатрат КАК СчетУчета,
	|
	|	Док.НалоговоеНазначение КАК НалоговоеНазначение,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|	Док.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|
	|	ВЫБОР КОГДА Док.ПодразделениеНЗП = &ПустоеПодразделение ИЛИ Не Док.Ссылка.ИспользоватьПодразделенияНЗП ТОГДА
	|		Док.Ссылка.Подразделение
	|	ИНАЧЕ
	|		Док.ПодразделениеНЗП
	|	КОНЕЦ КАК ПодразделениеНЗП,
	|
	|	ВЫБОР КОГДА Док.ПодразделениеОрганизацииНЗП = &ПустоеПодразделениеОрганизации ИЛИ Не Док.Ссылка.ИспользоватьПодразделенияНЗП ТОГДА
	|		Док.Ссылка.ПодразделениеОрганизации
	|	ИНАЧЕ
	|		Док.ПодразделениеОрганизацииНЗП
	|	КОНЕЦ КАК ПодразделениеОрганизацииНЗП,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗП,
	|
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Ссылка.ИспользоватьЗаказы И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗПРегл,
	|
	|	Неопределено КАК ТипСтоимости,
	|	Неопределено КАК КодОперации,
	|
	|	Док.Сумма 		КАК Сумма,
	|	Док.СуммаРегл 	КАК СуммаРегл,
	|	0 КАК НДСВходящий,
	|	0 КАК НДСКредит,
	|	Док.СуммаРегл 	КАК СуммаНал
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.РаспределениеТехнологическихОпераций КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Ссылка.ИспользоватьТехнологическиеОперации
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляДокументаОтчетПроизводстваЗаСменуТехОперации()

// Формирует текст запроса для документа "Распределение материалов на выпуск"
// для табличных частей "Распределение материалов" или "Распределение возвратных отходов".
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаДляДокументаРаспределениеМатериаловНаВыпуск(ИмяТабличнойЧасти)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.Ссылка.Организация			КАК Организация,
	|	Док.Ссылка.Подразделение		КАК Подразделение,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|
	|	Док.НомерСтроки,
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьНаработку ТОГДА
	|		Док.ВидВыпуска
	|	ИНАЧЕ
	|		&ВидВыпускаВыпуск		
	|	КОНЕЦ КАК ВидВыпуска,
	|	Док.Продукция,
	|	Док.ХарактеристикаПродукции,
	|	Док.СерияПродукции,
	|	Док.Спецификация,
	|
	|	Док.Номенклатура,
	|	Док.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	Док.ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА Док.Номенклатура.ВестиУчетПоСериямВНЗП ТОГДА
	|		Док.СерияНоменклатуры
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияНоменклатуры,
	|	Док.НоменклатурнаяГруппа,
	|	Док.СтатьяЗатрат,
	|
	|	Док.СчетЗатрат,
	|	Док.СчетЗатрат КАК СчетУчета,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначение,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|	Док.НоменклатурнаяГруппаНЗП,
	|
	|	ВЫБОР КОГДА Док.ПодразделениеНЗП = &ПустоеПодразделение ИЛИ Не Док.Ссылка.ИспользоватьПодразделенияНЗП ТОГДА
	|		Док.Ссылка.Подразделение
	|	ИНАЧЕ
	|		Док.ПодразделениеНЗП
	|	КОНЕЦ КАК ПодразделениеНЗП,
	|
	|	ВЫБОР КОГДА Док.ПодразделениеОрганизацииНЗП = &ПустоеПодразделениеОрганизации ИЛИ Не Док.Ссылка.ИспользоватьПодразделенияНЗП ТОГДА
	|		Док.Ссылка.ПодразделениеОрганизации
	|	ИНАЧЕ
	|		Док.ПодразделениеОрганизацииНЗП
	|	КОНЕЦ КАК ПодразделениеОрганизацииНЗП,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|	ВЫБОР КОГДА Док.ЗаказНЗП ССЫЛКА Документ.ЗаказПокупателя И Док.ЗаказНЗП <> &ПустойЗаказПокупателя ТОГДА
	|		Док.ЗаказНЗП
	|	КОГДА Док.ЗаказНЗП ССЫЛКА Документ.ЗаказНаПроизводство И Док.ЗаказНЗП <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.ЗаказНЗП
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗП,
	|
	|	ВЫБОР КОГДА Док.ЗаказНЗП ССЫЛКА Документ.ЗаказПокупателя И Док.ЗаказНЗП <> &ПустойЗаказПокупателя ТОГДА
	|		Док.ЗаказНЗП
	|	КОГДА Док.ЗаказНЗП ССЫЛКА Документ.ЗаказНаПроизводство И Док.ЗаказНЗП <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.ЗаказНЗП
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗПРегл,
	|
	|	Неопределено КАК ТипСтоимости,
	|	Неопределено КАК КодОперации,
	|
	|	Док.Количество * Док.Коэффициент /Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
	|	0 КАК Сумма,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаНал,
	|	0 КАК НДСВходящий,	
	|	0 КАК НДСКредит
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.РаспределениеМатериаловНаВыпуск." + ИмяТабличнойЧасти + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляДокументаРаспределениеМатериаловНаВыпуск()

// Формирует текст запроса для документа "Распределение прочих затрат"
// для табличной части "Затраты на продукцию"
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаДляДокументаРаспределениеПрочихЗатрат()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.Ссылка.Организация			КАК Организация,
	|	Док.Ссылка.Подразделение		КАК Подразделение,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|
	|	Док.НомерСтроки,
	|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьНаработку ТОГДА
	|		Док.ВидВыпуска
	|	ИНАЧЕ
	|		&ВидВыпускаВыпуск		
	|	КОНЕЦ КАК ВидВыпуска,
	|	Док.Продукция,
	|	Док.ХарактеристикаПродукции,
	|	Док.СерияПродукции,
	|	Док.Спецификация,
	|
	|	Док.СпособРаспределенияЗатратНаВыпуск,
	|	Док.НоменклатурнаяГруппа,
	|	Док.СтатьяЗатрат,
	|
	|	Док.СчетЗатрат,
	|	Док.СчетЗатрат КАК СчетУчета,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначение,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|	Док.НоменклатурнаяГруппаНЗП,
	|
	|	ВЫБОР КОГДА Док.ПодразделениеНЗП = &ПустоеПодразделение ИЛИ Не Док.Ссылка.ИспользоватьПодразделенияНЗП ТОГДА
	|		Док.Ссылка.Подразделение
	|	ИНАЧЕ
	|		Док.ПодразделениеНЗП
	|	КОНЕЦ КАК ПодразделениеНЗП,
	|
	|	ВЫБОР КОГДА Док.ПодразделениеОрганизацииНЗП = &ПустоеПодразделениеОрганизации ИЛИ Не Док.Ссылка.ИспользоватьПодразделенияНЗП ТОГДА
	|		Док.Ссылка.ПодразделениеОрганизации
	|	ИНАЧЕ
	|		Док.ПодразделениеОрганизацииНЗП
	|	КОНЕЦ КАК ПодразделениеОрганизацииНЗП,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|	ВЫБОР КОГДА Док.ЗаказНЗП ССЫЛКА Документ.ЗаказПокупателя И Док.ЗаказНЗП <> &ПустойЗаказПокупателя ТОГДА
	|		Док.ЗаказНЗП
	|	КОГДА Док.ЗаказНЗП ССЫЛКА Документ.ЗаказНаПроизводство И Док.ЗаказНЗП <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.ЗаказНЗП
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗП,
	|
	|	ВЫБОР КОГДА Док.ЗаказНЗП ССЫЛКА Документ.ЗаказПокупателя И Док.ЗаказНЗП <> &ПустойЗаказПокупателя ТОГДА
	|		Док.ЗаказНЗП
	|	КОГДА Док.ЗаказНЗП ССЫЛКА Документ.ЗаказНаПроизводство И Док.ЗаказНЗП <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.ЗаказНЗП
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗПРегл,
	|
	|	Неопределено КАК ТипСтоимости,
	|	Неопределено КАК КодОперации,
	|
	|	Док.Сумма,
	|	Док.СуммаРегл,
	|	Док.СуммаНал КАК СуммаНал,
	|	Док.СуммаНДС КАК НДСВходящий,	
	|	Док.СуммаНДСКредит КАК НДСКредит
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.РаспределениеПрочихЗатрат.ЗатратыНаПродукцию КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляДокументаРаспределениеПрочихЗатрат()

// Формирует текст запроса для документа "КомплектацияНоменклатуры".
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаДляДокументаКомплектацияНоменклатуры(ВидКомплектации)
	
	Если ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Док.Ссылка.Организация			КАК Организация,
		|	Док.Ссылка.Подразделение		КАК Подразделение,
		|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|
		|	Док.НомерСтроки,
		|	&ВидВыпускаВыпуск КАК ВидВыпуска,		
		|	Док.Ссылка.Номенклатура  КАК Продукция,
		|	Док.Ссылка.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
		|	Док.Ссылка.СерияНоменклатуры КАК СерияПродукции,
		|	Док.Ссылка.Спецификация,
		|
		|	Док.Номенклатура,
		|	Док.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
		|	Док.ХарактеристикаНоменклатуры,
		|	ВЫБОР КОГДА Док.Номенклатура.ВестиУчетПоСериямВНЗП ТОГДА
		|		Док.СерияНоменклатуры
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК СерияНоменклатуры,
		|	Док.Ссылка.НоменклатурнаяГруппа,
		|	Док.СтатьяЗатрат,
		|
		|	Док.Ссылка.СчетЗатрат,
		|	Док.Ссылка.СчетЗатрат КАК СчетУчета,
		|
		|	Док.Ссылка.НалоговоеНазначение КАК НалоговоеНазначение,
		|	Док.Ссылка.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
		|	Истина КАК НеКорректироватьНУ,
		|
		|	Док.Ссылка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
		|	Док.Ссылка.Подразделение КАК ПодразделениеНЗП,
		|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизацииНЗП,
		|
		|	ВЫБОР КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Ссылка.Заказ <> &ПустойЗаказПокупателя ТОГДА
		|		Док.Ссылка.Заказ
		|	КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Ссылка.Заказ <> &ПустойЗаказНаПроизводство
		|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
		|		Док.Ссылка.Заказ
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК Заказ,
		|
		|	ВЫБОР КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Ссылка.Заказ <> &ПустойЗаказПокупателя ТОГДА
		|		Док.Ссылка.Заказ
		|	КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Ссылка.Заказ <> &ПустойЗаказНаПроизводство
		|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
		|		Док.Ссылка.Заказ
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК ЗаказРегл,
		|
		|	ВЫБОР КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Ссылка.Заказ <> &ПустойЗаказПокупателя ТОГДА
		|		Док.Ссылка.Заказ
		|	КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Ссылка.Заказ <> &ПустойЗаказНаПроизводство
		|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
		|		Док.Ссылка.Заказ
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК ЗаказНЗП,
		|
		|	ВЫБОР КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Ссылка.Заказ <> &ПустойЗаказПокупателя ТОГДА
		|		Док.Ссылка.Заказ
		|	КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Ссылка.Заказ <> &ПустойЗаказНаПроизводство
		|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
		|		Док.Ссылка.Заказ
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК ЗаказНЗПРегл,
		|
		|	Неопределено КАК ТипСтоимости,
		|	Неопределено КАК КодОперации,
		|
		|	Док.Количество * Док.Коэффициент /Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
	 	|	0 КАК НДСВходящий,	
	 	|	0 КАК НДСКредит,
		|	0 КАК Сумма,
		|	0 КАК СуммаРегл,
		|	0 КАК СуммаНал
		|
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	Документ.КомплектацияНоменклатуры.Комплектующие КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка
		|";
		
	Иначе
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Док.Ссылка.Организация			КАК Организация,
		|	Док.Ссылка.Подразделение		КАК Подразделение,
		|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
		|
		|	Док.НомерСтроки,
		|	&ВидВыпускаВыпуск КАК ВидВыпуска,		
		|	Док.Номенклатура  КАК Продукция,
		|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
		|	Док.СерияНоменклатуры КАК СерияПродукции,
		|	Док.Ссылка.Спецификация,
		|
		|	Док.Ссылка.Номенклатура,
		|	Док.Ссылка.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
		|	Док.Ссылка.ХарактеристикаНоменклатуры,
		|	ВЫБОР КОГДА Док.Ссылка.Номенклатура.ВестиУчетПоСериямВНЗП ТОГДА
		|		Док.Ссылка.СерияНоменклатуры
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК СерияНоменклатуры,
		|	Док.Ссылка.НоменклатурнаяГруппа,
		|	Док.Ссылка.СтатьяЗатрат,
		|
		|	Док.Ссылка.СчетЗатрат,
		|	Док.Ссылка.СчетЗатрат КАК СчетУчета,
		|
		|	Док.НалоговоеНазначение КАК НалоговоеНазначение,
		|	Док.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
		|	Истина КАК НеКорректироватьНУ,
		|
		|	Док.Ссылка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
		|	Док.Ссылка.Подразделение КАК ПодразделениеНЗП,
		|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизацииНЗП,
		|
		|	ВЫБОР КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Ссылка.Заказ <> &ПустойЗаказПокупателя ТОГДА
		|		Док.Ссылка.Заказ
		|	КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Ссылка.Заказ <> &ПустойЗаказНаПроизводство
		|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
		|		Док.Ссылка.Заказ
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК Заказ,
		|
		|	ВЫБОР КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Ссылка.Заказ <> &ПустойЗаказПокупателя ТОГДА
		|		Док.Ссылка.Заказ
		|	КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Ссылка.Заказ <> &ПустойЗаказНаПроизводство
		|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
		|		Док.Ссылка.Заказ
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК ЗаказРегл,
		|
		|	ВЫБОР КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Ссылка.Заказ <> &ПустойЗаказПокупателя ТОГДА
		|		Док.Ссылка.Заказ
		|	КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Ссылка.Заказ <> &ПустойЗаказНаПроизводство
		|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
		|		Док.Ссылка.Заказ
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК ЗаказНЗП,
		|
		|	ВЫБОР КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Ссылка.Заказ <> &ПустойЗаказПокупателя ТОГДА
		|		Док.Ссылка.Заказ
		|	КОГДА Док.Ссылка.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Ссылка.Заказ <> &ПустойЗаказНаПроизводство
		|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
		|		Док.Ссылка.Заказ
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК ЗаказНЗПРегл,
		|
		|	Неопределено КАК ТипСтоимости,
		|	Неопределено КАК КодОперации,
		|
		|	Док.ДоляСтоимости,
		|	Док.Ссылка.Количество * Док.Ссылка.Коэффициент /Док.Ссылка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент * Док.ДоляСтоимости / &СуммаДолейСтоимости КАК Количество,
		|	0 КАК Сумма,
		|	0 КАК СуммаРегл,
		|	0 КАК СуммаНал,
	 	|	0 КАК НДСВходящий,	
	 	|	0 КАК НДСКредит
		|
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	Документ.КомплектацияНоменклатуры.Комплектующие КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка
		|";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для документа "Корректировка НЗП".
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаДляДокументаКорректировкаНЗП()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.Ссылка.Организация			КАК Организация,
	|	Док.Ссылка.Подразделение		КАК Подразделение,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|
	|	Док.НомерСтроки,
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|	Док.Номенклатура КАК Продукция,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	Док.СерияНоменклатуры КАК СерияПродукции,
	|	&ПустаяСпецификация КАК Спецификация,
	|
	|	Док.Номенклатура,
	|	Док.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	Док.ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА Док.Номенклатура.ВестиУчетПоСериямВНЗП ТОГДА
	|		Док.СерияНоменклатуры
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияНоменклатуры,
	|	Док.НоменклатурнаяГруппа,
	|	Док.СтатьяЗатрат,
	|
	|	Док.СчетЗатрат,
	|	Док.СчетЗатрат КАК СчетУчета,
	|	Док.НалоговоеНазначение           КАК НалоговоеНазначение,
	|	Док.НалоговоеНазначениеПолучатель КАК НалоговоеНазначениеПолучатель,
	|	Ложь КАК НеКорректироватьНУ,
	|
	|	Док.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|
	|	Док.Ссылка.Подразделение КАК ПодразделениеНЗП,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизацииНЗП,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗП,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗПРегл,
	|
	|	Док.Ссылка.ТипСтоимости КАК ТипСтоимости,
	|	Неопределено КАК КодОперации,
	|
	|	Док.Количество * Док.Коэффициент /Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
	|	Док.Сумма,
	|	Док.СуммаРегл,
	|	Док.СуммаНал,
	|	Док.СуммаНДС КАК НДСВходящий,	
	|	Док.СуммаНДСКредит КАК НДСКредит     
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.КорректировкаНЗП.Материалы КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляДокументаКорректировкаНЗП()

// Формирует текст запроса для документа "Оприходование НЗП".
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаДляДокументаОприходованиеНЗП()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.Ссылка.Организация			КАК Организация,
	|	Док.Ссылка.Подразделение		КАК Подразделение,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|
	|	Док.НомерСтроки,
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|	Док.Номенклатура КАК Продукция,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	Док.СерияНоменклатуры КАК СерияПродукции,
	|	&ПустаяСпецификация КАК Спецификация,
	|
	|	Док.Номенклатура,
	|	Док.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	Док.ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА Док.Номенклатура.ВестиУчетПоСериямВНЗП ТОГДА
	|		Док.СерияНоменклатуры
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияНоменклатуры,
	|	Док.НоменклатурнаяГруппа,
	|	Док.СтатьяЗатрат,
	|
	|	Док.СчетЗатрат,
	|	Док.СчетЗатрат КАК СчетУчета,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначение,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|	Док.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|
	|	Док.Ссылка.Подразделение КАК ПодразделениеНЗП,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизацииНЗП,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗП,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗПРегл,
	|
	|	Док.Ссылка.ТипСтоимости КАК ТипСтоимости,
	|	Неопределено КАК КодОперации,
	|
	|	Док.Количество * Док.Коэффициент /Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
	|	Док.Сумма,
	|	Док.СуммаРегл,
	|	Док.СуммаНал КАК СуммаНал,
	|	Док.СуммаНДС КАК НДСВходящий,	
	|	Док.СуммаНДСКредит КАК НДСКредит   
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ОприходованиеНЗП.Материалы КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Ссылка.ТипСтоимости <> ЗНАЧЕНИЕ(Перечисление.ВидыНормативнойСтоимостиПроизводства.Фиксированная)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляДокументаОприходованиеНЗП()

// Формирует текст запроса для документа "Списание НЗП".
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаДляДокументаСписаниеНЗП()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.Ссылка.Организация			КАК Организация,
	|	Док.Ссылка.Подразделение		КАК Подразделение,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|
	|	Док.НомерСтроки,
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|	Док.Номенклатура КАК Продукция,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	Док.СерияНоменклатуры КАК СерияПродукции,
	|	&ПустаяСпецификация КАК Спецификация,
	|
	|	Док.Номенклатура,
	|	Док.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	Док.ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА Док.Номенклатура.ВестиУчетПоСериямВНЗП ТОГДА
	|		Док.СерияНоменклатуры
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияНоменклатуры,
	|	Док.НоменклатурнаяГруппа,
	|	Док.СтатьяЗатрат,
	|
	|	Док.СчетЗатрат,
	|	Док.СчетЗатрат КАК СчетУчета,
	|
	|
	|   Док.НалоговоеНазначение КАК НалоговоеНазначение,
	|	
	|	Док.Ссылка.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначениеПолучатель,
	|	
	|	Ложь КАК НеКорректироватьНУ,
	|
	|	Док.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|
	|	Док.Ссылка.Подразделение КАК ПодразделениеНЗП,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизацииНЗП,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗП,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗПРегл,
	|
	|	Док.Ссылка.ТипСтоимости КАК ТипСтоимости,
	|	Неопределено КАК КодОперации,
	|
	|	Док.Количество * Док.Коэффициент /Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
	|	Док.Сумма,
	|	Док.СуммаРегл,
	|	Док.СуммаНал КАК СуммаНал,
	|	Док.СуммаНДС КАК НДСВходящий,	
	|	Док.СуммаНДСКредит КАК НДСКредит  
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.СписаниеНЗП.Материалы КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляДокументаСписаниеНЗП()

// Формирует текст запроса для документа "Оприходование материалов из производства".
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаДляДокументаОприходованиеМатериалов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.Ссылка.Организация			КАК Организация,
	|	Док.Ссылка.Подразделение		КАК Подразделение,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизации,
	|
	|	Док.НомерСтроки,
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|	Док.Номенклатура КАК Продукция,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	Док.СерияНоменклатуры КАК СерияПродукции,
	|	&ПустаяСпецификация КАК Спецификация,
	|
	|	Док.Номенклатура,
	|	Док.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	Док.ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА Док.Номенклатура.ВестиУчетПоСериямВНЗП ТОГДА
	|		Док.СерияНоменклатуры
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияНоменклатуры,
	|	Док.НоменклатурнаяГруппа,
	|	Док.СтатьяЗатрат,
	|
	|	Док.СчетЗатрат,
	|	Док.СчетЗатрат КАК СчетУчета,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначение,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|	Док.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНЗП,
	|
	|	Док.Ссылка.Подразделение КАК ПодразделениеНЗП,
	|	Док.Ссылка.ПодразделениеОрганизации	КАК ПодразделениеОрганизацииНЗП,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗП,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство И Док.Заказ <> &ПустойЗаказНаПроизводство
	|		  И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказНЗПРегл,
	|
	|	Док.ТипСтоимости,
	|	ВЫБОР КОГДА Док.ТипСтоимости = ЗНАЧЕНИЕ(Перечисление.ВидыНормативнойСтоимостиПроизводства.Фиксированная) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч)
	|	КОНЕЦ КАК КодОперации,
	|
	|	Док.Количество * Док.Коэффициент /Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
	|	Док.Сумма,
	|	Док.СуммаРегл,
	|	Док.СуммаНал КАК СуммаНал,
	|	Док.СуммаНДС КАК НДСВходящий,	
	|	Док.СуммаНДСКредит КАК НДСКредит  
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ОприходованиеМатериаловИзПроизводства.Материалы КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Док.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляДокументаОприходованиеМатериалов()

// Процедура формирует временную таблицу документа.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ТекстЗапросаДокумент - Строка - Текст запроса
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//
Процедура СформироватьВременнуюТаблицуДокумента(
	СтруктураШапкиДокумента,
	ТекстЗапросаДокумент,
	МенеджерВременныхТаблиц
	)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДокумент;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапроса(
		СтруктураШапкиДокумента,
		Запрос
	);
	Запрос.Выполнить();
	
	РасширеннаяАналитикаУчета.ПоказатьВременнуюТаблицу(
		СтруктураШапкиДокумента,
		МенеджерВременныхТаблиц,
		"ТаблицаДокумента"
	);
	
КонецПроцедуры // СформироватьВременнуюТаблицуДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ

// Процедура формирует строку движения по регистру "Затраты на выпуск продукции".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  Количество - Число - Количество затрат
//  Сумма - Число - Сумма затрат
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	НаборЗаписейЗатратыНаВыпуск - ТаблицаЗначений - Таблица движений регистра накопления "Затраты на выпуск".
//
Процедура СформироватьСтрокуДвиженияПоРегиструЗатратыНаВыпускПродукции(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Количество,
	Сумма,
	СуммаНУ,
	НДСВходящий,
	НДСКредит,
	ВидОтраженияВУчете,
	НаборЗаписейЗатратыНаВыпуск
	)
	
	Если Количество = 0
	   И Сумма = 0
	   И СуммаНУ = 0
	   И НДСВходящий = 0
	   И НДСКредит = 0
	   Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты на выпуск" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или международном учете,
	//	- НоменклатурнаяГруппа,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- СерияПродукции,
	//	- Спецификация,
	//	- Заказ,
	//	- ДокументВыпуска,
	//
	//	- СтатьяЗатрат,
	//	- Затрата,
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты,
	//	- НоменклатурнаяГруппаНЗП,
	//	- ЗаказНЗП,
	//	- ПодразделениеНЗП,
	
	НоваяСтрока = НаборЗаписейЗатратыНаВыпуск.Добавить();
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	// Заполнение заказа зависит от вида отражения в учете.
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		
		НоваяСтрока.Подразделение = СтрокаВыборки.Подразделение;
		НоваяСтрока.ПодразделениеНЗП = СтрокаВыборки.ПодразделениеНЗП;
		НоваяСтрока.Заказ = СтрокаВыборки.Заказ;
		НоваяСтрока.ЗаказНЗП = СтрокаВыборки.ЗаказНЗП;
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
	 
	 	НоваяСтрока.Организация = СтрокаВыборки.Организация;
	 	НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеОрганизации;
		НоваяСтрока.ПодразделениеНЗП = СтрокаВыборки.ПодразделениеОрганизацииНЗП;
		НоваяСтрока.Заказ = СтрокаВыборки.ЗаказРегл;
		НоваяСтрока.ЗаказНЗП = СтрокаВыборки.ЗаказНЗПРегл;
		
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетЗатрат;
	КонецЕсли;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Сумма = Сумма;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		
		НоваяСтрока.НалоговоеНазначениеПоФакту = СтрокаВыборки.НалоговоеНазначениеПолучатель; 
		
		НоваяСтрока.СуммаНУ     = СуммаНУ;
		НоваяСтрока.НДСВходящий = НДСВходящий;
		НоваяСтрока.НДСКредит   = НДСКредит;
		
		Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			// Давальческое сырье не отражается в движениях регистра по налоговому учету.
			НоваяСтрока.НалоговоеНазначение       = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(); 
			НоваяСтрока.СуммаНУ = 0;
			НоваяСтрока.НДСВходящий = 0;
			НоваяСтрока.НДСКредит   = 0;
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры // СформироватьСтрокуДвиженияПоРегиструЗатратыНаВыпускПродукции()

// Процедура формирует движения по регистру "Затраты на выпуск продукции".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	Количество - Число - Количество затрат
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегистрамЗатратыНаВыпускПродукции(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Количество,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ИмяРегистра = "ЗатратыНаВыпускПродукции";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьСтрокуДвиженияПоРегиструЗатратыНаВыпускПродукции(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Количество,
			СтрокаВыборки.СуммаУУ,
			0, // СуммаНУ 
			0, // НДСВходящий 
			0, // НДСКредит 
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистра = "ЗатратыНаВыпускПродукцииБухгалтерскийУчет";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьСтрокуДвиженияПоРегиструЗатратыНаВыпускПродукции(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Количество,
			СтрокаВыборки.СуммаБУ,
			СтрокаВыборки.СуммаНУ, 
			СтрокаВыборки.НДСВходящий, 
			СтрокаВыборки.НДСКредит, 
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
		
		СуммаКорректировкиНалоговогоКредита = 0;
		Если НЕ СтрокаВыборки.НеКорректироватьНУ Тогда
			//  Необходимо для документа КорректировкаНЗП и других документов, которые могут корректировать налоговые назначения при проведении
			//  Кроме всех корректировок необходимо здесь откорректировать и суммы в ЗатратыНаВыпускБУ
			НалоговоеНазначение        = СтрокаВыборки.НалоговоеНазначение;
			НалоговоеНазначениеПоФакту = СтрокаВыборки.НалоговоеНазначениеПолучатель;
			
			СтруктураКорректировкаНДСКредит = НалоговыйУчет.ПолучитьСуммуКорректировкиНалоговогоКредита(
				НалоговоеНазначение,
				НалоговоеНазначениеПоФакту,
				СтрокаВыборки.НДСВходящий,
				СтрокаВыборки.НДСКредит,
				СтрокаВыборки.СуммаБУ
			);
			
			Если НЕ СтруктураКорректировкаНДСКредит.ЕстьКорректировки Тогда
				СуммаКорректировкиНалоговогоКредита = 0;
				СуммаКорректировкиСтоимость         = 0;
				СуммаКорректировкиСтоимостьНУ       = 0;
			Иначе
				СуммаКорректировкиНалоговогоКредита = СтруктураКорректировкаНДСКредит.КорректировкаНДСКредит;	
				СуммаКорректировкиСтоимость         = СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимость;
				СуммаКорректировкиСтоимостьНУ       = СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимостьНУ;
				
			КонецЕсли; 	
			
		КонецЕсли;

		Если СуммаКорректировкиНалоговогоКредита <> 0 Тогда
			
			СформироватьСтрокуДвиженияПоРегиструЗатратыНаВыпускПродукции(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				0,
				СуммаКорректировкиСтоимость,   // Стоимость   
				СуммаКорректировкиСтоимостьНУ, // СтоимостьНУ    
				0, // НДСВходящий 
				+ СуммаКорректировкиНалоговогоКредита, // НДСКредит 
				Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
				СтруктураНаборыЗаписей[ИмяРегистра]
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры // СформироватьДвиженияПоРегистрамЗатратыНаВыпускПродукции()

// Процедура формирует строку движения по регистру "Затраты на выпуск продукции (наработка)".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//  Количество - Число - Количество затрат
//  Сумма - Число - Сумма затрат
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	НаборЗаписейЗатратыНаВыпуск - ТаблицаЗначений - Таблица движений регистра накопления "Затраты на выпуск (наработка)".
//
Процедура СформироватьСтрокуДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработка(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Количество,
	Сумма,
	СуммаНУ,
	НДСВходящий,
	НДСКредит,
	ВидОтраженияВУчете,
	НаборЗаписейЗатратыНаВыпуск
	)
	
	Если Количество = 0
		И СуммаНУ = 0 
		И НДСВходящий = 0 
		И НДСКредит = 0 
		И Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Затраты на выпуск (наработка)" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или международном учете,
	//	- НоменклатурнаяГруппа,
	//	- Продукция,
	//	- ХарактеристикаПродукции,
	//	- Заказ,
	//
	//	- СтатьяЗатрат,
	//	- Затрата,
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты,
	//	- НоменклатурнаяГруппаНЗП,
	//	- ЗаказНЗП,
	//	- ПодразделениеНЗП,
	
	НоваяСтрока = НаборЗаписейЗатратыНаВыпуск.Добавить();
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.Активность = Истина;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	// Заполнение заказа зависит от вида отражения в учете.
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		
		НоваяСтрока.Подразделение = СтрокаВыборки.Подразделение;
		НоваяСтрока.ПодразделениеНЗП = СтрокаВыборки.ПодразделениеНЗП;
		НоваяСтрока.Заказ = СтрокаВыборки.Заказ;
		НоваяСтрока.ЗаказНЗП = СтрокаВыборки.ЗаказНЗП;
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
	 
	 	НоваяСтрока.Организация = СтрокаВыборки.Организация;
	 	НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеОрганизации;
		НоваяСтрока.ПодразделениеНЗП = СтрокаВыборки.ПодразделениеОрганизацииНЗП;
		НоваяСтрока.Заказ = СтрокаВыборки.ЗаказРегл;
		НоваяСтрока.ЗаказНЗП = СтрокаВыборки.ЗаказНЗПРегл;
		
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетЗатрат;
	КонецЕсли;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Сумма = Сумма;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		
		НоваяСтрока.НалоговоеНазначениеПоФакту = СтрокаВыборки.НалоговоеНазначениеПолучатель; 
		
		НоваяСтрока.СуммаНУ     = СуммаНУ;
		НоваяСтрока.НДСВходящий = НДСВходящий;
		НоваяСтрока.НДСКредит   = НДСКредит;
	КонецЕсли;
	

КонецПроцедуры // СформироватьСтрокуДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработка()

// Процедура формирует движения по регистру "Затраты на выпуск продукции (наработка)".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегистрамЗатратыНаВыпускПродукцииНаработка(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ИмяРегистра = "ЗатратыНаВыпускПродукцииНаработка";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьСтрокуДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработка(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтрокаВыборки.Количество,
			СтрокаВыборки.СуммаУУ,
			0, // СуммаНУ,
			0, // НДСВходящий,
			0, // НДСКредит,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистра = "ЗатратыНаВыпускПродукцииНаработкаБухгалтерскийУчет";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьСтрокуДвиженияПоРегиструЗатратыНаВыпускПродукцииНаработка(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтрокаВыборки.Количество,
			СтрокаВыборки.СуммаБУ,
			СтрокаВыборки.СуммаНУ,
			СтрокаВыборки.НДСВходящий,
			СтрокаВыборки.НДСКредит,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегистрамЗатратыНаВыпускПродукцииНаработка()

//////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ПО РАСПРЕДЕЛЕНИЮ ЗАТРАТ ПРИ РАСШИРЕННОЙ АНАЛИТИКЕ

// Процедура формирует движения по регистрам "Учет затрат" (распределение на выпуск).
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура ДвиженияПоРегистрамРаспределениеЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей)
	
	МассивКодовОпераций = Новый Массив;
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗПФикс);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПФикс);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП);
	
	// Для операций корректировки НЗП движение по распределению затрат не формируется.
	Если МассивКодовОпераций.Найти(СтрокаВыборки.КодОперации) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//По материалам принятым в переработку движения по регистрам учета затрат не формируются
	Если ОпределитьСтатусМатериальныхЗатратВПереработку(СтрокаВыборки) Тогда
		Возврат;
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И СтруктураШапкиДокумента.ОтражатьЗатратыВУпрУчете
	Тогда
		
		ИмяРегистра = "УчетЗатрат";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		АналитикаВидаУчета = Неопределено;
		АналитикаУчетаЗатрат = Неопределено;
		АналитикаУчетаПартий = Неопределено;
		АналитикаРаспределенияЗатрат = Неопределено;
		КорАналитикаВидаУчета = Неопределено;
		КорАналитикаУчетаПартий = Неопределено;
		КорАналитикаРаспределенияЗатрат = Неопределено;
		
		ПолучитьАналитикуРаспределенияЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			СтруктураКлючиАналитики,
			АналитикаВидаУчета,
			АналитикаУчетаЗатрат,
			АналитикаУчетаПартий,
			АналитикаРаспределенияЗатрат,
			КорАналитикаВидаУчета,
			КорАналитикаУчетаПартий,
			КорАналитикаРаспределенияЗатрат
		);

		// Движения "Расход" по исходной аналитике.
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			КорАналитикаВидаУчета,
			АналитикаУчетаЗатрат,
			КорАналитикаУчетаПартий,
			КорАналитикаРаспределенияЗатрат,
			АналитикаВидаУчета, // КорАналитикаВидаУчета
			АналитикаУчетаЗатрат, // КорАналитикаУчетаЗатрат
			АналитикаУчетаПартий, // КорАналитикаУчетаПартий
			АналитикаРаспределенияЗатрат, // КорАналитикаРаспределенияЗатрат
			ВидДвиженияНакопления.Расход,
			СтрокаВыборки.КодОперации,
			СтрокаВыборки.Количество,
			СтрокаВыборки.СуммаУУ,
			0, // КоличествоНУ,
			0, // СтоимостьНУ,
			0, // НДСВходящий
			0, // НДСКредит
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
		// Движения "Приход" по новой аналитике.
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			АналитикаВидаУчета,
			АналитикаУчетаЗатрат,
			АналитикаУчетаПартий,
			АналитикаРаспределенияЗатрат,
			КорАналитикаВидаУчета,
			АналитикаУчетаЗатрат,
			КорАналитикаУчетаПартий,
			КорАналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Приход,
			СтрокаВыборки.КодОперации,
			СтрокаВыборки.Количество,
			СтрокаВыборки.СуммаУУ,
			0, // КоличествоНУ,
			0, // СтоимостьНУ,
			0, // НДСВходящий
			0, // НДСКредит
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистра = "УчетЗатратРегл";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		АналитикаВидаУчета = Неопределено;
		АналитикаУчетаЗатрат = Неопределено;
		АналитикаУчетаПартий = Неопределено;
		АналитикаРаспределенияЗатрат = Неопределено;
		КорАналитикаВидаУчета = Неопределено;
		КорАналитикаУчетаПартий = Неопределено;
		КорАналитикаРаспределенияЗатрат = Неопределено;
		
		ПолучитьАналитикуРаспределенияЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			СтруктураКлючиАналитики,
			АналитикаВидаУчета,
			АналитикаУчетаЗатрат,
			АналитикаУчетаПартий,
			АналитикаРаспределенияЗатрат,
			КорАналитикаВидаУчета,
			КорАналитикаУчетаПартий,
			КорАналитикаРаспределенияЗатрат
		);
		
		КоличествоНУ = СтрокаВыборки.Количество;
		СтоимостьНУ  = СтрокаВыборки.СуммаНУ;
		НДСВходящий  = СтрокаВыборки.НДСВходящий;
		НДСКредит    = СтрокаВыборки.НДСКредит;

		// Движения "Расход" по исходной аналитике.
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			КорАналитикаВидаУчета,
			АналитикаУчетаЗатрат,
			КорАналитикаУчетаПартий,
			КорАналитикаРаспределенияЗатрат,
			АналитикаВидаУчета, // КорАналитикаВидаУчета
			АналитикаУчетаЗатрат, // КорАналитикаУчетаЗатрат
			АналитикаУчетаПартий, // КорАналитикаУчетаПартий
			АналитикаРаспределенияЗатрат, // КорАналитикаРаспределенияЗатрат
			ВидДвиженияНакопления.Расход,
			СтрокаВыборки.КодОперации,
			СтрокаВыборки.Количество,
			СтрокаВыборки.СуммаБУ,
			КоличествоНУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит, 
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
		// Движения "Приход" по новой аналитике.
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			АналитикаВидаУчета,
			АналитикаУчетаЗатрат,
			АналитикаУчетаПартий,
			АналитикаРаспределенияЗатрат,
			КорАналитикаВидаУчета,
			АналитикаУчетаЗатрат,
			КорАналитикаУчетаПартий,
			КорАналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Приход,
			СтрокаВыборки.КодОперации,
			СтрокаВыборки.Количество,
			СтрокаВыборки.СуммаБУ,
			КоличествоНУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит, 
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
				
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамРаспределениеЗатрат()

// Процедура получает ключи аналитики для распределения затрат.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете для получения ключа аналитики
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//
// Выходные параметры:
//	АналитикаВидаУчета - СправочникСсылка.КлючиАналитикиВидаУчета - Ключ аналитики
//	АналитикаУчетаЗатрат - СправочникСсылка.КлючиАналитикиУчетаЗатрат - Ключ аналитики
//	АналитикаУчетаПартий - СправочникСсылка.КлючиАналитикиУчетаПартий - Ключ аналитики
//	АналитикаРаспределенияЗатрат - СправочникСсылка.КлючиАналитикиРаспределенияЗатрат - Ключ аналитики
//	КорАналитикаВидаУчета - СправочникСсылка.КлючиАналитикиВидаУчета - Ключ аналитики
//	КорАналитикаУчетаПартий - СправочникСсылка.КлючиАналитикиУчетаПартий - Ключ аналитики
//	КорАналитикаРаспределенияЗатрат - СправочникСсылка.КлючиАналитикиРаспределенияЗатрат - Ключ аналитики
//
Процедура ПолучитьАналитикуРаспределенияЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВидОтраженияВУчете,
	СтруктураКлючиАналитики,
	АналитикаВидаУчета,
	АналитикаУчетаЗатрат,
	АналитикаУчетаПартий,
	АналитикаРаспределенияЗатрат,
	КорАналитикаВидаУчета,
	КорАналитикаУчетаПартий,
	КорАналитикаРаспределенияЗатрат
	)
	
	СтруктураПараметров = Новый Структура;
	Если СтрокаВыборки.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск Тогда
		СтруктураПараметров.Вставить("РазделУчета", Перечисления.РазделыУчета.ЗатратыНаВыпуск);
		
	ИначеЕсли СтрокаВыборки.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
		СтруктураПараметров.Вставить("РазделУчета", Перечисления.РазделыУчета.ЗатратыПоНаработке);
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Подразделение", СтрокаВыборки.Подразделение);
	СтруктураПараметров.Вставить("Организация", СтрокаВыборки.Организация);
	СтруктураПараметров.Вставить("ПодразделениеОрганизации", СтрокаВыборки.ПодразделениеОрганизации);
	СтруктураПараметров.Вставить("СчетУчета", СтрокаВыборки.СчетУчета);
	
	
	СтруктураПараметров.Вставить("НалоговоеНазначение", СтрокаВыборки.НалоговоеНазначение);

	АналитикаВидаУчета = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаВидаУчета,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатьяЗатрат", СтрокаВыборки.СтатьяЗатрат);
	СтруктураПараметров.Вставить("ХарактерЗатрат", Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	
	Если СтрокаВыборки.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
		
		СтруктураПараметров.Вставить("Затрата", СтрокаВыборки.Затрата);
		СтруктураПараметров.Вставить("ХарактеристикаЗатраты", СтрокаВыборки.ХарактеристикаЗатраты);
		
		Если СтрокаВыборки.ВестиУчетПоСериямВНЗП Тогда
			СтруктураПараметров.Вставить("СерияЗатраты", СтрокаВыборки.СерияЗатраты);
		КонецЕсли;
		
	Иначе
		
		СтруктураПараметров.Вставить("СпособРаспределенияЗатрат", СтрокаВыборки.СпособРаспределенияЗатрат);
		
	КонецЕсли;
	
	АналитикаУчетаЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
	
	СтруктураПараметров = Новый Структура;
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		СтруктураПараметров.Вставить("Заказ", СтрокаВыборки.Заказ);
	
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураПараметров.Вставить("Заказ", СтрокаВыборки.ЗаказРегл);
		
	КонецЕсли;
	
	АналитикаУчетаПартий = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаУчетаПартий,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НоменклатурнаяГруппа", СтрокаВыборки.НоменклатурнаяГруппа);
	СтруктураПараметров.Вставить("Продукция", СтрокаВыборки.Продукция);
	СтруктураПараметров.Вставить("ХарактеристикаПродукции", СтрокаВыборки.ХарактеристикаПродукции);
	СтруктураПараметров.Вставить("СерияПродукции", СтрокаВыборки.СерияПродукции);
	СтруктураПараметров.Вставить("Спецификация", СтрокаВыборки.Спецификация);

	АналитикаРаспределенияЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РазделУчета", Перечисления.РазделыУчета.Затраты);
	
	Если СтрокаВыборки.ПодразделениеНЗП = Неопределено Тогда
		СтруктураПараметров.Вставить("Подразделение", СтрокаВыборки.Подразделение);
	Иначе
		СтруктураПараметров.Вставить("Подразделение", СтрокаВыборки.ПодразделениеНЗП);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Организация", СтрокаВыборки.Организация);
	СтруктураПараметров.Вставить("СчетУчета", СтрокаВыборки.СчетУчета);
	
	Если СтрокаВыборки.ПодразделениеОрганизацииНЗП = Неопределено Тогда
		СтруктураПараметров.Вставить("ПодразделениеОрганизации", СтрокаВыборки.ПодразделениеОрганизации);
	Иначе
		СтруктураПараметров.Вставить("ПодразделениеОрганизации", СтрокаВыборки.ПодразделениеОрганизацииНЗП);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НалоговоеНазначение", СтрокаВыборки.НалоговоеНазначение);
		
	КорАналитикаВидаУчета = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаВидаУчета,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
	
	СтруктураПараметров = Новый Структура;
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		СтруктураПараметров.Вставить("Заказ", СтрокаВыборки.ЗаказНЗП);
	
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураПараметров.Вставить("Заказ", СтрокаВыборки.ЗаказНЗПРегл);
		
	КонецЕсли;
	
	КорАналитикаУчетаПартий = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаУчетаПартий,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НоменклатурнаяГруппа", СтрокаВыборки.НоменклатурнаяГруппаНЗП);
	
	Если ТипЗнч(СтрокаВыборки.ДокументВыпуска) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		СтруктураПараметров.Вставить("Продукция", СтрокаВыборки.Продукция);
		СтруктураПараметров.Вставить("ХарактеристикаПродукции", СтрокаВыборки.ХарактеристикаПродукции);
		СтруктураПараметров.Вставить("СерияПродукции", СтрокаВыборки.СерияПродукции);
		СтруктураПараметров.Вставить("Спецификация", СтрокаВыборки.Спецификация);
	КонецЕсли;

	КорАналитикаРаспределенияЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
		
КонецПроцедуры // ПолучитьАналитикуРаспределенияЗатрат()

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РАСПРЕДЕЛЕНИЮ МАТЕРИАЛОВ

// Функция определяет код операции для регистра "Затраты на выпуск продукции" по реквизитам документа.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//
// Возвращаемое значение:
//  ПеречислениеСсылка.КодыОперацийВыпускПродукции – код операции выпуска продукции
//
Функция ПолучитьКодОперацииЗатратыНаВыпуск(
	СтруктураШапкиДокумента
	)
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаНЗП") Тогда
		Если СтруктураШапкиДокумента.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Рассчитывается Тогда
			КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПРасч;
		Иначе
			КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.КорректировкаНЗПФикс;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеНЗП") Тогда
		КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОприходованиеНЗП;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.СписаниеНЗП") Тогда
		Если СтруктураШапкиДокумента.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Рассчитывается Тогда
			КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗП;
		Иначе
			КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.СписаниеНЗПФикс;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч;
		
	Иначе
		КодОперации = Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты;
		
	КонецЕсли;
	
	Возврат КодОперации;

КонецФункции // ПолучитьКодОперацииЗатратыНаВыпуск()

// Функция формирует текст запроса по табличной части "Распределение материалов".
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаПоРаспределениюМатериалов()
	
	ТекстЗапроса = "
	|//ТекстТаблицаСтоимостиУпр
	|//ТекстТаблицаСтоимостиРегл
	|
	|ВЫБРАТЬ
	|	Док.*,
	|	Док.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	Док.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	Неопределено КАК СпособРаспределенияЗатрат,
	|	Док.Номенклатура КАК Затрата,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	Док.СерияНоменклатуры КАК СерияЗатраты,
	|	ВЫБОР КОГДА Док.КодОперации <> Неопределено ТОГДА
	|		Док.КодОперации 
	|	ИНАЧЕ
	|   	&ПрямыеЗатраты
	|	КОНЕЦ КАК КодОперации,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|		И Док.Заказ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.Переработка)
	|	ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыВыпускаПродукции.ПродукцияИзДавальческогоСырья)
	|	ИНАЧЕ
	|      	Неопределено
	|	КОНЕЦ КАК ВариантВыпускаПродукции,
	|
	|	&Ссылка КАК ДокументВыпуска,
	|
	|	//ПрямыеЗатратыУУ	ВЫБОР КОГДА Док.ТипСтоимости = ЗНАЧЕНИЕ(Перечисление.ВидыНормативнойСтоимостиПроизводства.Фиксированная) ТОГДА
	|	//ПрямыеЗатратыУУ		Док.Сумма
	|	//ПрямыеЗатратыУУ 	КОГДА ТаблицаСтоимостиЗатратУУ.КоличествоОстаток = 0
	|	//ПрямыеЗатратыУУ			ИЛИ ТаблицаСтоимостиЗатратУУ.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|	//ПрямыеЗатратыУУ		0
	|	//ПрямыеЗатратыУУ	ИНАЧЕ
	|	//ПрямыеЗатратыУУ		Док.Количество *
	|	//ПрямыеЗатратыУУ		ТаблицаСтоимостиЗатратУУ.СтоимостьОстаток /
	|	//ПрямыеЗатратыУУ		ТаблицаСтоимостиЗатратУУ.КоличествоОстаток
	|	//ПрямыеЗатратыУУ	КОНЕЦ КАК СуммаУУ,
	|
	|	//ПрямыеЗатратыБУ	ВЫБОР КОГДА Док.ТипСтоимости = ЗНАЧЕНИЕ(Перечисление.ВидыНормативнойСтоимостиПроизводства.Фиксированная) ТОГДА
	|	//ПрямыеЗатратыБУ		Док.СуммаРегл
	|	//ПрямыеЗатратыБУ 	КОГДА ТаблицаСтоимостиЗатратРегл.КоличествоОстаток = 0
	|	//ПрямыеЗатратыБУ			ИЛИ ТаблицаСтоимостиЗатратРегл.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|	//ПрямыеЗатратыБУ		0
	|	//ПрямыеЗатратыБУ	ИНАЧЕ
	|	//ПрямыеЗатратыБУ		Док.Количество *
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.СтоимостьОстаток /
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.КоличествоОстаток
	|	//ПрямыеЗатратыБУ	КОНЕЦ КАК СуммаБУ,
	|
	|	//ПрямыеЗатратыБУ	ВЫБОР КОГДА Док.ТипСтоимости = ЗНАЧЕНИЕ(Перечисление.ВидыНормативнойСтоимостиПроизводства.Фиксированная) ТОГДА
	|	//ПрямыеЗатратыБУ		Док.СуммаНал
	|	//ПрямыеЗатратыБУ 	КОГДА ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток = 0
	|	//ПрямыеЗатратыБУ			ИЛИ ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток ЕСТЬ NULL ТОГДА
	|	//ПрямыеЗатратыБУ		0
	|	//ПрямыеЗатратыБУ	ИНАЧЕ
	|	//ПрямыеЗатратыБУ		Док.Количество *
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.СтоимостьНУОстаток /
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток
	|	//ПрямыеЗатратыБУ	КОНЕЦ КАК СуммаНУ,
	|
	|	//ПрямыеЗатратыБУ	ВЫБОР КОГДА Док.ТипСтоимости = ЗНАЧЕНИЕ(Перечисление.ВидыНормативнойСтоимостиПроизводства.Фиксированная) ТОГДА
	|	//ПрямыеЗатратыБУ		Док.НДСВходящий 
	|	//ПрямыеЗатратыБУ 	КОГДА ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток = 0
	|	//ПрямыеЗатратыБУ			ИЛИ ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток ЕСТЬ NULL ТОГДА
	|	//ПрямыеЗатратыБУ		0
	|	//ПрямыеЗатратыБУ	ИНАЧЕ
	|	//ПрямыеЗатратыБУ		Док.Количество *
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.НДСВходящийОстаток /
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток
	|	//ПрямыеЗатратыБУ	КОНЕЦ КАК НДСВходящий,
	|
	|
	|	//ПрямыеЗатратыБУ	ВЫБОР КОГДА Док.ТипСтоимости = ЗНАЧЕНИЕ(Перечисление.ВидыНормативнойСтоимостиПроизводства.Фиксированная) ТОГДА
	|	//ПрямыеЗатратыБУ		Док.НДСКредит 
	|	//ПрямыеЗатратыБУ 	КОГДА ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток = 0
	|	//ПрямыеЗатратыБУ			ИЛИ ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток ЕСТЬ NULL ТОГДА
	|	//ПрямыеЗатратыБУ		0
	|	//ПрямыеЗатратыБУ	ИНАЧЕ
	|	//ПрямыеЗатратыБУ		Док.Количество *
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.НДСКредитОстаток /
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток
	|	//ПрямыеЗатратыБУ	КОНЕЦ КАК НДСКредит,
	|
	|
	|	//ФиксСтоимость		Док.Сумма КАК СуммаУУ,
	|	//ФиксСтоимость		Док.СуммаРегл КАК СуммаБУ,
	|	//ФиксСтоимость		Док.СуммаНал КАК СуммаНУ,
	|	//ФиксСтоимость		Док.НДСВходящий КАК НДСВходящий,
	|	//ФиксСтоимость		Док.НДСКредит КАК НДСКредит,
	|
	|	//ПоНулевойУУ 		0 КАК СуммаУУ,
	|	//ПоНулевойБУ 		0 КАК СуммаБУ,
	|	//ПоНулевойБУ 		0 КАК СуммаНУ,
	|	//ПоНулевойБУ 		0 КАК НДСВходящий,
	|	//ПоНулевойБУ 		0 КАК НДСКредит,
	|
	|	Док.Количество
	|
	|ИЗ 
	|	ТаблицаДокумента КАК Док
	|
	|	//ПрямыеЗатратыУУ	ЛЕВОЕ СОЕДИНЕНИЕ 
	|	//ПрямыеЗатратыУУ		ТаблицаСтоимостиЗатрат КАК ТаблицаСтоимостиЗатратУУ
	|	//ПрямыеЗатратыУУ	ПО 
	|	//ПрямыеЗатратыУУ		Док.Номенклатура = ТаблицаСтоимостиЗатратУУ.Затрата
	|	//ПрямыеЗатратыУУ		И Док.ХарактеристикаНоменклатуры = ТаблицаСтоимостиЗатратУУ.ХарактеристикаЗатраты
	|	//ПрямыеЗатратыУУ		И Док.СерияНоменклатуры = ТаблицаСтоимостиЗатратУУ.СерияЗатраты
	|	//ПрямыеЗатратыУУ		И Док.СтатьяЗатрат = ТаблицаСтоимостиЗатратУУ.СтатьяЗатрат
	|	//ПрямыеЗатратыУУ		И Док.НоменклатурнаяГруппаНЗП = ТаблицаСтоимостиЗатратУУ.НоменклатурнаяГруппа
	|	//ПрямыеЗатратыУУ		И Док.ЗаказНЗП = ТаблицаСтоимостиЗатратУУ.Заказ
	|	//ПрямыеЗатратыУУ		И Док.ПодразделениеНЗП = ТаблицаСтоимостиЗатратУУ.Подразделение
	|
	|	//ПрямыеЗатратыБУ	ЛЕВОЕ СОЕДИНЕНИЕ 
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл КАК ТаблицаСтоимостиЗатратРегл
	|	//ПрямыеЗатратыБУ	ПО 
	|	//ПрямыеЗатратыБУ		Док.Номенклатура = ТаблицаСтоимостиЗатратРегл.Затрата
	|	//ПрямыеЗатратыБУ		И Док.ХарактеристикаНоменклатуры = ТаблицаСтоимостиЗатратРегл.ХарактеристикаЗатраты
	|	//ПрямыеЗатратыБУ		И Док.СерияНоменклатуры = ТаблицаСтоимостиЗатратРегл.СерияЗатраты
	|	//ПрямыеЗатратыБУ		И Док.СтатьяЗатрат = ТаблицаСтоимостиЗатратРегл.СтатьяЗатрат
	|	//ПрямыеЗатратыБУ		И Док.НоменклатурнаяГруппаНЗП = ТаблицаСтоимостиЗатратРегл.НоменклатурнаяГруппа
	|	//ПрямыеЗатратыБУ		И Док.ЗаказНЗПРегл = ТаблицаСтоимостиЗатратРегл.ЗаказРегл
	|	//ПрямыеЗатратыБУ		И (Док.СчетЗатрат = ТаблицаСтоимостиЗатратРегл.СчетУчета
	|	//ПрямыеЗатратыБУ			ИЛИ ТаблицаСтоимостиЗатратРегл.СчетУчета = Неопределено)
	|	//ПрямыеЗатратыБУ		И (Док.НалоговоеНазначение = ТаблицаСтоимостиЗатратРегл.НалоговоеНазначение
	|	//ПрямыеЗатратыБУ			ИЛИ ТаблицаСтоимостиЗатратРегл.НалоговоеНазначение = Неопределено)
	|	//ПрямыеЗатратыБУ		И Док.ПодразделениеОрганизацииНЗП = ТаблицаСтоимостиЗатратРегл.ПодразделениеОрганизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоРаспределениюМатериалов()

// Функция заменяет комментарии в тексте запроса в зависимости от отражения в учете.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ИмяТабличнойЧасти - Строка - Имя табличной части документа
//  ИсходныхТекстЗапроса – Строка – Текст запроса
//
// Возвращаемое значение:
//   Строка – Текст запроса, в котором заменены комментарии.
//
Функция ЗаменитьКомментарииВТекстеЗапросаПоРаспределениюМатериалов(
	СтруктураШапкиДокумента,
	ИмяТабличнойЧасти,
	ИсходныйТекстЗапроса
	)
	
	ТекстЗапроса = ИсходныйТекстЗапроса;
				
	Если СтруктураШапкиДокумента.РасчетПоПрямымЗатратамУпр Тогда
		ТекстЗапросаТаблицаСтоимости = СформироватьТекстЗапросаТаблицыСтоимостиЗатрат(
			СтруктураШапкиДокумента,
			ИмяТабличнойЧасти
		);
		ТекстЗапросаТаблицаСтоимости = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
			ТекстЗапросаТаблицаСтоимости,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
		);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстТаблицаСтоимостиУпр", ТекстЗапросаТаблицаСтоимости);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПрямыеЗатратыУУ", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПоНулевойУУ", "");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.РасчетПоПрямымЗатратамРегл Тогда
		ТекстЗапросаТаблицаСтоимости = СформироватьТекстЗапросаТаблицыСтоимостиЗатрат(
			СтруктураШапкиДокумента,
			ИмяТабличнойЧасти
		);
		ТекстЗапросаТаблицаСтоимости = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
			ТекстЗапросаТаблицаСтоимости,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
		);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстТаблицаСтоимостиРегл", ТекстЗапросаТаблицаСтоимости);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПрямыеЗатратыБУ", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПоНулевойБУ", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции // ЗаменитьКомментарииВТекстеЗапросаПоРаспределениюМатериалов()

// Процедура устанавливает параметры запроса.
//
// Параметры:
//	СтруктураШапкиДокумента – Структура - Реквизиты документа
//	Запрос - Запрос - Запрос по распределению
//
Процедура УстановитьПараметрыЗапроса(
	СтруктураШапкиДокумента,
	Запрос
	)
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("КонДата", Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказНаПроизводство", Документы.ЗаказНаПроизводство.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.Подразделения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделениеОрганизации", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСпецификация", Справочники.СпецификацииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСпособРаспределения", Справочники.СпособыРаспределенияЗатратНаВыпуск.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидВыпускаВыпуск", Перечисления.ВидыВыпуска.Выпуск);
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Запрос.УстановитьПараметр("УчетЗатратПоЗаказамНаПроизводство", СтруктураШапкиДокумента.УчетЗатратПоЗаказамНаПроизводство);
	Иначе
		Запрос.УстановитьПараметр("УчетЗатратПоЗаказамНаПроизводство", Ложь);
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Запрос.УстановитьПараметр("УчетЗатратПоЗаказамНаПроизводствоРегл", СтруктураШапкиДокумента.УчетЗатратПоЗаказамНаПроизводствоРегл);
	Иначе
		Запрос.УстановитьПараметр("УчетЗатратПоЗаказамНаПроизводствоРегл", Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДокумента = "КомплектацияНоменклатуры" Тогда
		Запрос.УстановитьПараметр("СуммаДолейСтоимости", СтруктураШапкиДокумента.СуммаДолейСтоимости);
	КонецЕсли;
	
	КодОперацииЗатратыНаВыпуск = ПолучитьКодОперацииЗатратыНаВыпуск(СтруктураШапкиДокумента);
	Запрос.УстановитьПараметр("ПрямыеЗатраты", КодОперацииЗатратыНаВыпуск);
	Запрос.УстановитьПараметр("ОтрицательныеЗатраты", Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты);
	
КонецПроцедуры // УстановитьПараметрыЗапроса()

// Процедура формирует движения по табличной части "Распределение материалов".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по регламентированному учету
//
// Возвращаемое значение:
//   Строка – Текст запроса
//
Функция СформироватьЗапросПоРаспределениюМатериалов(
	СтруктураШапкиДокумента, 
	УчетнаяПолитика,
	УчетнаяПолитикаБух
	)
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		Если СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
			ИмяТабличнойЧасти = "Комплектующие";
		Иначе
			ИмяТабличнойЧасти = "";
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаНЗП")
		ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеНЗП")
		ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.СписаниеНЗП")
		ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства")
	Тогда
		ИмяТабличнойЧасти = "Материалы";
	Иначе
		ИмяТабличнойЧасти = "РаспределениеМатериалов";
	КонецЕсли;
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоРаспределениюМатериалов();
	
	ТекстЗапроса = ЗаменитьКомментарииВТекстеЗапросаПоРаспределениюМатериалов(
		СтруктураШапкиДокумента,
		ИмяТабличнойЧасти,
		ТекстЗапросаСКомментариями
	);
			
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапроса(
		СтруктураШапкиДокумента,
		Запрос
	);
	
	Возврат Запрос;	
		
КонецФункции // СформироватьЗапросПоРаспределениюМатериалов()

// Процедура формирует движения по табличной части "Распределение материалов".
//
// Параметры:
//	СтруктураШапкиДокумента – Структура - Реквизиты документа
//  ТекстЗапросаДокумент – Строка – Текст запроса по документу
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по регламентированному учету
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРаспределениюМатериалов(
	СтруктураШапкиДокумента, 
	ТекстЗапросаДокумент,
	УчетнаяПолитика,
	УчетнаяПолитикаБух,
	СтруктураНаборыЗаписей
	)
	
	Если ПустаяСтрока(ТекстЗапросаДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СформироватьВременнуюТаблицуДокумента(
		СтруктураШапкиДокумента,
		ТекстЗапросаДокумент,
		МенеджерВременныхТаблиц
	);
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		СформироватьТаблицуАналитики(
			СтруктураШапкиДокумента,
			МенеджерВременныхТаблиц
		);
	КонецЕсли;
	
	Запрос = СформироватьЗапросПоРаспределениюМатериалов(
		СтруктураШапкиДокумента, 
		УчетнаяПолитика,
		УчетнаяПолитикаБух
	);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РасширеннаяАналитикаУчета.ПоказатьВременнуюТаблицу(
		СтруктураШапкиДокумента,
		МенеджерВременныхТаблиц,
		"ТаблицаДокумента"
	);
	
	Если СтруктураШапкиДокумента.РасчетПоПрямымЗатратамУпр Тогда
		РасширеннаяАналитикаУчета.ПоказатьВременнуюТаблицу(
			СтруктураШапкиДокумента,
			МенеджерВременныхТаблиц,
			"ТаблицаСтоимостиЗатрат"
		);
	КонецЕсли;
	Если СтруктураШапкиДокумента.РасчетПоПрямымЗатратамРегл Тогда
		РасширеннаяАналитикаУчета.ПоказатьВременнуюТаблицу(
			СтруктураШапкиДокумента,
			МенеджерВременныхТаблиц,
			"ТаблицаСтоимостиЗатратРегл"
		);
	КонецЕсли;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	Если ТипДокумента = Тип("ДокументСсылка.КомплектацияНоменклатуры")
	   И СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Разборка
	Тогда
		РаспределятьПоДолеСтоимости = Истина;
		СуммаДолейСтоимости = СтруктураШапкиДокумента.СуммаДолейСтоимости;
		Если СтруктураШапкиДокумента.КоэффициентЕдиницыХранения <> 0 Тогда
			ВсегоКоличество = СтруктураШапкиДокумента.Количество * СтруктураШапкиДокумента.Коэффициент / СтруктураШапкиДокумента.КоэффициентЕдиницыХранения;
		Иначе
			ВсегоКоличество = СтруктураШапкиДокумента.Количество;
		КонецЕсли;
	Иначе
		РаспределятьПоДолеСтоимости = Ложь;
	КонецЕсли;
	
	СтруктураКлючиАналитики = Новый Структура;
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если РаспределятьПоДолеСтоимости Тогда
			Количество = Окр(Выборка.ДоляСтоимости * ВсегоКоличество / СуммаДолейСтоимости, 3, 1);
			СуммаДолейСтоимости = СуммаДолейСтоимости - Выборка.ДоляСтоимости;
			ВсегоКоличество = ВсегоКоличество - Количество;
		Иначе
			Количество = Выборка.Количество;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
			ДвиженияПоРегистрамРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				Выборка,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
			);
		ИначеЕсли Выборка.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск Тогда
			
			СформироватьДвиженияПоРегистрамЗатратыНаВыпускПродукции(
				СтруктураШапкиДокумента,
				Выборка,
				Количество,
				СтруктураНаборыЗаписей
			);
		ИначеЕсли Выборка.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
			
			СформироватьДвиженияПоРегистрамЗатратыНаВыпускПродукцииНаработка(
				СтруктураШапкиДокумента,
				Выборка,
				СтруктураНаборыЗаписей
			);
		Иначе
			
			ОбщегоНазначения.СообщитьОбОшибке(
				"Не указан вид выпуска. Движения по затратам на выпуск не сформированы!
				|Процедура <СформироватьДвиженияПоРаспределениюМатериалов>");
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // СформироватьДвиженияПоРаспределениюМатериалов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РАСПРЕДЕЛЕНИЮ ВОЗВРАТНЫХ ОТХОДОВ

// Функция формирует текст запроса по табличной части "Распределение возвратных отходов".
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаПоРаспределениюВозвратныхОтходов()
	
	ТекстЗапроса = "
	|//ТекстТаблицаСтоимостиУпр
	|//ТекстТаблицаСтоимостиРегл
	|
	|ВЫБРАТЬ
	|	Док.*,
	|	Док.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	Док.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	Неопределено КАК СпособРаспределенияЗатрат,
	|	Док.Номенклатура КАК Затрата,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	Док.СерияНоменклатуры КАК СерияЗатраты,
	|	&ОтрицательныеЗатраты КАК КодОперации,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|		И Док.Заказ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.Переработка)
	|	ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыВыпускаПродукции.ПродукцияИзДавальческогоСырья)
	|	ИНАЧЕ
	|      	Неопределено
	|	КОНЕЦ КАК ВариантВыпускаПродукции,
	|
	|	&Ссылка КАК ДокументВыпуска,
	|
	|	//ПрямыеЗатратыУУ 	ВЫБОР КОГДА ТаблицаСтоимостиЗатратУУ.КоличествоОстаток = 0
	|	//ПрямыеЗатратыУУ			ИЛИ ТаблицаСтоимостиЗатратУУ.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|	//ПрямыеЗатратыУУ		0
	|	//ПрямыеЗатратыУУ	ИНАЧЕ
	|	//ПрямыеЗатратыУУ		- Док.Количество *
	|	//ПрямыеЗатратыУУ		ТаблицаСтоимостиЗатратУУ.СтоимостьОстаток /
	|	//ПрямыеЗатратыУУ		ТаблицаСтоимостиЗатратУУ.КоличествоОстаток
	|	//ПрямыеЗатратыУУ	КОНЕЦ КАК СуммаУУ,
	|
	|	//ПрямыеЗатратыБУ 	ВЫБОР КОГДА ТаблицаСтоимостиЗатратРегл.КоличествоОстаток = 0
	|	//ПрямыеЗатратыБУ			ИЛИ ТаблицаСтоимостиЗатратРегл.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|	//ПрямыеЗатратыБУ		0
	|	//ПрямыеЗатратыБУ	ИНАЧЕ
	|	//ПрямыеЗатратыБУ		- Док.Количество *
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.СтоимостьОстаток /
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.КоличествоОстаток
	|	//ПрямыеЗатратыБУ	КОНЕЦ КАК СуммаБУ,
	|
	|	//ПрямыеЗатратыБУ 	ВЫБОР КОГДА ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток = 0
	|	//ПрямыеЗатратыБУ			ИЛИ ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток ЕСТЬ NULL ТОГДА
	|	//ПрямыеЗатратыБУ		0
	|	//ПрямыеЗатратыБУ	ИНАЧЕ
	|	//ПрямыеЗатратыБУ		- Док.Количество *
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.СтоимостьНУОстаток /
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток
	|	//ПрямыеЗатратыБУ	КОНЕЦ КАК СуммаНУ,
	|
	|	//ПрямыеЗатратыБУ 	ВЫБОР КОГДА ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток = 0
	|	//ПрямыеЗатратыБУ			ИЛИ ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток ЕСТЬ NULL ТОГДА
	|	//ПрямыеЗатратыБУ		0
	|	//ПрямыеЗатратыБУ	ИНАЧЕ
	|	//ПрямыеЗатратыБУ		- Док.Количество *
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.НДСВходящийОстаток /
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток
	|	//ПрямыеЗатратыБУ	КОНЕЦ КАК НДСВходящий,
	|
	|	//ПрямыеЗатратыБУ 	ВЫБОР КОГДА ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток = 0
	|	//ПрямыеЗатратыБУ			ИЛИ ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток ЕСТЬ NULL ТОГДА
	|	//ПрямыеЗатратыБУ		0
	|	//ПрямыеЗатратыБУ	ИНАЧЕ
	|	//ПрямыеЗатратыБУ		- Док.Количество *
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.НДСКредитОстаток /
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл.КоличествоНУОстаток
	|	//ПрямыеЗатратыБУ	КОНЕЦ КАК НДСКредит,
	|
	|	//ФиксСтоимость		- Док.Сумма КАК СуммаУУ,
	|	//ФиксСтоимость		- Док.СуммаРегл КАК СуммаБУ,
	|	//ФиксСтоимость		- Док.СуммаНал КАК СуммаНУ,
	|	//ФиксСтоимость		- Док.НДСВходящий КАК НДСВходящий,
	|	//ФиксСтоимость		- Док.НДСКредит КАК НДСКредит,
	|
	|	//ПоНулевойУУ 		0 КАК СуммаУУ,
	|	//ПоНулевойБУ 		0 КАК СуммаБУ,
	|	//ПоНулевойБУ 		0 КАК СуммаНУ,
	|	//ПоНулевойБУ 		0 КАК НДСВходящий,
	|	//ПоНулевойБУ 		0 КАК НДСКредит,
	|
	|	- Док.Количество КАК Количество
	|
	|ИЗ 
	|	ТаблицаДокумента КАК Док
	|
	|	//ПрямыеЗатратыУУ	ЛЕВОЕ СОЕДИНЕНИЕ 
	|	//ПрямыеЗатратыУУ		ТаблицаСтоимостиЗатрат КАК ТаблицаСтоимостиЗатратУУ
	|	//ПрямыеЗатратыУУ	ПО 
	|	//ПрямыеЗатратыУУ		Док.Номенклатура = ТаблицаСтоимостиЗатратУУ.Затрата
	|	//ПрямыеЗатратыУУ		И Док.ХарактеристикаНоменклатуры = ТаблицаСтоимостиЗатратУУ.ХарактеристикаЗатраты
	|	//ПрямыеЗатратыУУ		И Док.СерияНоменклатуры = ТаблицаСтоимостиЗатратУУ.СерияЗатраты
	|	//ПрямыеЗатратыУУ		И Док.СтатьяЗатрат = ТаблицаСтоимостиЗатратУУ.СтатьяЗатрат
	|	//ПрямыеЗатратыУУ		И Док.НоменклатурнаяГруппаНЗП = ТаблицаСтоимостиЗатратУУ.НоменклатурнаяГруппа
	|	//ПрямыеЗатратыУУ		И Док.ЗаказНЗП = ТаблицаСтоимостиЗатратУУ.Заказ
	|	//ПрямыеЗатратыУУ		И Док.ПодразделениеНЗП = ТаблицаСтоимостиЗатратУУ.Подразделение
	|
	|	//ПрямыеЗатратыБУ	ЛЕВОЕ СОЕДИНЕНИЕ 
	|	//ПрямыеЗатратыБУ		ТаблицаСтоимостиЗатратРегл КАК ТаблицаСтоимостиЗатратРегл
	|	//ПрямыеЗатратыБУ	ПО 
	|	//ПрямыеЗатратыБУ		Док.Номенклатура = ТаблицаСтоимостиЗатратРегл.Затрата
	|	//ПрямыеЗатратыБУ		И Док.ХарактеристикаНоменклатуры = ТаблицаСтоимостиЗатратРегл.ХарактеристикаЗатраты
	|	//ПрямыеЗатратыБУ		И Док.СерияНоменклатуры = ТаблицаСтоимостиЗатратРегл.СерияЗатраты
	|	//ПрямыеЗатратыБУ		И Док.СтатьяЗатрат = ТаблицаСтоимостиЗатратРегл.СтатьяЗатрат
	|	//ПрямыеЗатратыБУ		И Док.НоменклатурнаяГруппаНЗП = ТаблицаСтоимостиЗатратРегл.НоменклатурнаяГруппа
	|	//ПрямыеЗатратыБУ		И Док.ЗаказНЗПРегл = ТаблицаСтоимостиЗатратРегл.ЗаказРегл
	|	//ПрямыеЗатратыБУ		И (Док.СчетЗатрат = ТаблицаСтоимостиЗатратРегл.СчетУчета
	|	//ПрямыеЗатратыБУ			ИЛИ ТаблицаСтоимостиЗатратРегл.СчетУчета = Неопределено)
	|	//ПрямыеЗатратыБУ		И Док.ПодразделениеОрганизацииНЗП = ТаблицаСтоимостиЗатратРегл.ПодразделениеОрганизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоРаспределениюВозвратныхОтходов()

// Процедура формирует движения по табличной части "Распределение возвратных отходов".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//
// Возвращаемое значение:
//   Строка – Текст запроса
//
Функция СформироватьЗапросПоРаспределениюВозвратныхОтходов(
	СтруктураШапкиДокумента
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоРаспределениюВозвратныхОтходов();
	
	ТекстЗапроса = ЗаменитьКомментарииВТекстеЗапросаПоРаспределениюМатериалов(
		СтруктураШапкиДокумента,
		"РаспределениеВозвратныхОтходов",
		ТекстЗапросаСКомментариями
	);
			
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапроса(
		СтруктураШапкиДокумента,
		Запрос
	);
	
	Возврат Запрос;	
		
КонецФункции // СформироватьЗапросПоРаспределениюВозвратныхОтходов()

// Процедура формирует движения по табличной части "Распределение возвратных отходов".
//
// Параметры:
//	СтруктураШапкиДокумента – Структура - Реквизиты документа
//  ТекстЗапросаДокумент – Строка – Текст запроса по документу
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по регламентированному учету
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРаспределениюВозвратныхОтходов(
	СтруктураШапкиДокумента, 
	ТекстЗапросаДокумент,
	УчетнаяПолитика,
	УчетнаяПолитикаБух,
	СтруктураНаборыЗаписей
	)
	
	Если ПустаяСтрока(ТекстЗапросаДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СформироватьВременнуюТаблицуДокумента(
		СтруктураШапкиДокумента,
		ТекстЗапросаДокумент,
		МенеджерВременныхТаблиц
	);
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		СформироватьТаблицуАналитики(
			СтруктураШапкиДокумента,
			МенеджерВременныхТаблиц
		);
	КонецЕсли;
	
	Запрос = СформироватьЗапросПоРаспределениюВозвратныхОтходов(СтруктураШапкиДокумента);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если СтруктураШапкиДокумента.РасчетПоПрямымЗатратамУпр Тогда
		РасширеннаяАналитикаУчета.ПоказатьВременнуюТаблицу(
			СтруктураШапкиДокумента,
			МенеджерВременныхТаблиц,
			"ТаблицаСтоимостиЗатрат"
		);
	КонецЕсли;
	Если СтруктураШапкиДокумента.РасчетПоПрямымЗатратамРегл Тогда
		РасширеннаяАналитикаУчета.ПоказатьВременнуюТаблицу(
			СтруктураШапкиДокумента,
			МенеджерВременныхТаблиц,
			"ТаблицаСтоимостиЗатратРегл"
		);
	КонецЕсли;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКлючиАналитики = Новый Структура;
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
			ДвиженияПоРегистрамРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				Выборка,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
			);
		ИначеЕсли Выборка.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск Тогда
			
			СформироватьДвиженияПоРегистрамЗатратыНаВыпускПродукции(
				СтруктураШапкиДокумента,
				Выборка,
				Выборка.Количество,
				СтруктураНаборыЗаписей
			);
		ИначеЕсли Выборка.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
			
			СформироватьДвиженияПоРегистрамЗатратыНаВыпускПродукцииНаработка(
				СтруктураШапкиДокумента,
				Выборка,
				СтруктураНаборыЗаписей
			);
		Иначе
			
			ОбщегоНазначения.СообщитьОбОшибке(
				"Не указан вид выпуска. Движения по затратам на выпуск не сформированы!
				|Процедура <СформироватьДвиженияПоРаспределениюВозвратныхОтходов>");
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // СформироватьДвиженияПоРаспределениюВозвратныхОтходов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РАСПРЕДЕЛЕНИЮ ПРОЧИХ ЗАТРАТ

// Функция формирует текст запроса по табличной части "Распределение прочих затрат".
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаПоРаспределениюПрочихЗатрат()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.*,
	|	Док.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	Док.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	Док.СпособРаспределенияЗатратНаВыпуск КАК СпособРаспределенияЗатрат,
	|	ВЫБОР КОГДА Док.СпособРаспределенияЗатратНаВыпуск <> &ПустойСпособРаспределения ТОГДА
	|		Док.СпособРаспределенияЗатратНаВыпуск
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Затрата,
	|	&ПрямыеЗатраты КАК КодОперации,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|		И Док.Заказ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.Переработка)
	|	ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыВыпускаПродукции.ПродукцияИзДавальческогоСырья)
	|	ИНАЧЕ
	|      	Неопределено
	|	КОНЕЦ КАК ВариантВыпускаПродукции,
	|
	|	&Ссылка КАК ДокументВыпуска,
	|
	|	Док.Сумма КАК СуммаУУ,
	|	Док.СуммаРегл КАК СуммаБУ,
	|	Док.СуммаНал КАК СуммаНУ,
	|	Док.НДСВходящий КАК НДСВходящий,
	|	Док.НДСКредит КАК НДСКредит,
	|	0 КАК Количество
	|
	|ИЗ 
	|	ТаблицаДокумента КАК Док
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоРаспределениюПрочихЗатрат()

// Процедура формирует движения по табличной части "Распределение прочих затрат".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//  ТекстЗапросаДокумент – Строка – Текст запроса по документу
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по регламентированному учету
//
// Возвращаемое значение:
//   Строка – Текст запроса
//
Функция СформироватьЗапросПоРаспределениюПрочихЗатрат(
	СтруктураШапкиДокумента, 
	ТекстЗапросаДокумент,
	УчетнаяПолитика,
	УчетнаяПолитикаБух
	)
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоРаспределениюПрочихЗатрат();
	
	ТекстЗапроса = ЗаменитьКомментарииВТекстеЗапросаПоРаспределениюМатериалов(
		СтруктураШапкиДокумента,
		"",
		ТекстЗапросаСКомментариями
	);
			
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапроса(
		СтруктураШапкиДокумента,
		Запрос
	);
	
	Возврат Запрос;	
		
КонецФункции // СформироватьЗапросПоРаспределениюПрочихЗатрат()

// Процедура формирует движения по табличной части "Распределение прочих затрат".
//
// Параметры:
//	СтруктураШапкиДокумента – Структура - Реквизиты документа
//  ТекстЗапросаДокумент – Строка – Текст запроса по документу
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по регламентированному учету
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРаспределениюПрочихЗатрат(
	СтруктураШапкиДокумента, 
	ТекстЗапросаДокумент,
	УчетнаяПолитика,
	УчетнаяПолитикаБух,
	СтруктураНаборыЗаписей
	)
	
	Если ПустаяСтрока(ТекстЗапросаДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СформироватьВременнуюТаблицуДокумента(
		СтруктураШапкиДокумента,
		ТекстЗапросаДокумент,
		МенеджерВременныхТаблиц
	);
	Запрос = СформироватьЗапросПоРаспределениюПрочихЗатрат(
		СтруктураШапкиДокумента, 
		ТекстЗапросаДокумент,
		УчетнаяПолитика,
		УчетнаяПолитикаБух
	);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКлючиАналитики = Новый Структура;
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
			ДвиженияПоРегистрамРаспределениеЗатрат(
				СтруктураШапкиДокумента,
				Выборка,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
			);
		ИначеЕсли Выборка.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск Тогда
			
			СформироватьДвиженияПоРегистрамЗатратыНаВыпускПродукции(
				СтруктураШапкиДокумента,
				Выборка,
				0, // Количество
				СтруктураНаборыЗаписей
			);
		ИначеЕсли Выборка.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
			
			СформироватьДвиженияПоРегистрамЗатратыНаВыпускПродукцииНаработка(
				СтруктураШапкиДокумента,
				Выборка,
				СтруктураНаборыЗаписей
			);
		Иначе
			
			ОбщегоНазначения.СообщитьОбОшибке(
				"Не указан вид выпуска. Движения по затратам на выпуск не сформированы!
				|Процедура <СформироватьДвиженияПоРаспределениюПрочихЗатрат>");
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // СформироватьДвиженияПоРаспределениюПрочихЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ТЕКСТА ЗАПРОСА ДЛЯ ОПРЕДЕЛЕНИЯ СТОИМОСТИ ЗАТРАТ

// Процедура формирования временной таблицы "ТаблицаАналитики".
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//
Процедура СформироватьТаблицуАналитики(
	СтруктураШапкиДокумента,
	МенеджерВременныхТаблиц
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрАналитикаВидаУчета.Ссылка КАК АналитикаВидаУчета,
	|	РегистрАналитикаВидаУчетаРегл.Ссылка КАК АналитикаВидаУчетаРегл,
	|	РегистрАналитикаУчетаЗатрат.Ссылка КАК АналитикаУчетаЗатрат,
	|	РегистрАналитикаРаспределенияЗатрат.Ссылка КАК АналитикаРаспределенияЗатрат,
	|	РегистрАналитикаУчетаПартий.Ссылка КАК АналитикаУчетаПартий,
	|	
	|	РегистрАналитикаВидаУчета.Подразделение,
	|	РегистрАналитикаВидаУчетаРегл.ПодразделениеОрганизации,
	|	
	|	РегистрАналитикаУчетаЗатрат.Затрата,
	|	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты,
	|	РегистрАналитикаУчетаЗатрат.СерияЗатраты,
	|	РегистрАналитикаУчетаЗатрат.СтатьяЗатрат,
	|	
	|	РегистрАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	РегистрАналитикаУчетаПартий.Заказ,
	|
	|	РегистрАналитикаВидаУчетаРегл.СчетУчета,
	|	РегистрАналитикаВидаУчетаРегл.НалоговоеНазначение КАК НалоговоеНазначение
	|	
	|ПОМЕСТИТЬ ТаблицаАналитики
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|	ПО
	|		РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты)
	|		И РегистрАналитикаВидаУчета.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		И ТаблицаДокумента.ПодразделениеНЗП = РегистрАналитикаВидаУчета.Подразделение
	|		И РегистрАналитикаВидаУчета.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|		И РегистрАналитикаВидаУчета.НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
	|		И РегистрАналитикаВидаУчета.Проект = Неопределено
	|		И РегистрАналитикаВидаУчета.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчетаРегл
	|	ПО
	|		РегистрАналитикаВидаУчетаРегл.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты)
	|		И ТаблицаДокумента.Организация = РегистрАналитикаВидаУчетаРегл.Организация
	|		И ТаблицаДокумента.ПодразделениеОрганизацииНЗП = РегистрАналитикаВидаУчетаРегл.ПодразделениеОрганизации
	|		И ТаблицаДокумента.СчетУчета = РегистрАналитикаВидаУчетаРегл.СчетУчета
	|		И ТаблицаДокумента.НалоговоеНазначение = РегистрАналитикаВидаУчетаРегл.НалоговоеНазначение
	|		И РегистрАналитикаВидаУчетаРегл.Проект = Неопределено
	|		И РегистрАналитикаВидаУчетаРегл.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|	ПО
	|		ТаблицаДокумента.СтатьяЗатрат = РегистрАналитикаУчетаЗатрат.СтатьяЗатрат
	|		И ТаблицаДокумента.Номенклатура = РегистрАналитикаУчетаЗатрат.Затрата
	|		И ТаблицаДокумента.ХарактеристикаНоменклатуры = РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты
	|		И ТаблицаДокумента.СерияНоменклатуры = РегистрАналитикаУчетаЗатрат.СерияЗатраты
	|		И РегистрАналитикаУчетаЗатрат.ХарактерЗатрат = ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ПроизводственныеРасходы)
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
	|	ПО
	|		ТаблицаДокумента.НоменклатурнаяГруппаНЗП = РегистрАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа
	|		И РегистрАналитикаРаспределенияЗатрат.Продукция = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И РегистрАналитикаРаспределенияЗатрат.ХарактеристикаПродукции = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		И РегистрАналитикаРаспределенияЗатрат.СерияПродукции = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		И РегистрАналитикаРаспределенияЗатрат.Спецификация = ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка)
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	|	ПО
	|		(ТаблицаДокумента.Заказ = РегистрАналитикаУчетаПартий.Заказ
	|		ИЛИ ТаблицаДокумента.ЗаказНЗП = РегистрАналитикаУчетаПартий.Заказ)
	|		И РегистрАналитикаУчетаПартий.ДоговорКомитента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		И РегистрАналитикаУчетаПартий.ДоговорКомиссионера = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		И РегистрАналитикаУчетаПартий.ДокументПередачи = НЕОПРЕДЕЛЕНО
	|		И РегистрАналитикаУчетаПартий.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|		И РегистрАналитикаУчетаПартий.СхемаНазначенияИспользования = ЗНАЧЕНИЕ(Справочник.СхемыНазначенияИспользования.ПустаяСсылка)
	|		И РегистрАналитикаУчетаПартий.СпособОтраженияРасходов = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка)
	|		И РегистрАналитикаУчетаПартий.СрокПолезногоИспользования = 0
	|		И РегистрАналитикаУчетаПартий.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ПустаяСсылка)
	|		
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();

	РасширеннаяАналитикаУчета.ПоказатьВременнуюТаблицу(
		СтруктураШапкиДокумента,
		МенеджерВременныхТаблиц,
		"ТаблицаАналитики"
	);
	
КонецПроцедуры // СформироватьТаблицуАналитики()

// Формирует текст запроса для определения стоимости материалов или стоимости возвратных отходов.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ИмяТабличнойЧасти - Строка - Имя табличной части документа
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаТаблицыСтоимостиЗатрат(
	СтруктураШапкиДокумента,
	ИмяТабличнойЧасти
	)
	
	ИмяДокумента = СтруктураШапкиДокумента.ИмяДокумента;
	
	Если (ИмяДокумента = "ПоступлениеТоваровИзПереработки" ИЛИ ИмяДокумента = "ОтчетПроизводстваЗаСмену")
	   И ИмяТабличнойЧасти = "РаспределениеВозвратныхОтходов" Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Док.Ссылка.Подразделение,
		|	Док.Ссылка.ПодразделениеОрганизации,
		|	Док.Номенклатура КАК Затрата,
		|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
		|	Док.СерияНоменклатуры КАК СерияЗатраты,
		|	Док.СтатьяЗатрат,
		|	Док.НоменклатурнаяГруппа,
		|
		|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы 
		|	  И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя 
		|	  И Док.Заказ <> &ПустойЗаказПокупателя 
		|	ТОГДА
		|		Док.Заказ
		|	КОГДА Док.Ссылка.ИспользоватьЗаказы 
		|		И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
		|		И Док.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
		|		И &УчетЗатратПоЗаказамНаПроизводство
		|	ТОГДА
		|		Док.Заказ
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК Заказ,
		|
		|	ВЫБОР КОГДА Док.Ссылка.ИспользоватьЗаказы 
		|	  И Док.Заказ ССЫЛКА Документ.ЗаказПокупателя 
		|	  И Док.Заказ <> &ПустойЗаказПокупателя 
		|	ТОГДА
		|		Док.Заказ
		|	КОГДА Док.Ссылка.ИспользоватьЗаказы 
		|		И Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
		|		И Док.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
		|		И &УчетЗатратПоЗаказамНаПроизводствоРегл 
		|	ТОГДА
		|		Док.Заказ
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК ЗаказРегл,
		|
		|	Док.СчетЗатрат КАК СчетУчета,
		|	Док.НалоговоеНазначение КАК НалоговоеНазначение,
		|
		|	//ДляРеглУчета СУММА(Док.СуммаРегл) КАК СтоимостьНУОстаток,
		|	//ДляРеглУчета СУММА(Док.Количество * Док.Коэффициент /Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК КоличествоНУОстаток,
		|	//ДляРеглУчета СУММА(0) КАК НДСВходящийОстаток,
		|	//ДляРеглУчета СУММА(0) КАК НДСКредитОстаток,
		|
		|	//ДляУпрУчета СУММА(Док.Сумма) КАК СтоимостьОстаток,
		|	//ДляРеглУчета СУММА(Док.СуммаРегл) КАК СтоимостьОстаток,
		|	СУММА(Док.Количество * Док.Коэффициент /Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК КоличествоОстаток
		|
		|ПОМЕСТИТЬ ТаблицаСтоимостиЗатрат%СуффиксРегл%
		|ИЗ
		|	Документ.%ИмяДокумента%.ВозвратныеОтходы КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	Док.Ссылка,
		|	Док.СчетЗатрат,
		|	Док.НалоговоеНазначение,
		|	Док.Номенклатура,
		|	Док.ХарактеристикаНоменклатуры,
		|	Док.СерияНоменклатуры,
		|	Док.СтатьяЗатрат,
		|	Док.НоменклатурнаяГруппа,
		|	Док.Заказ
		|;
		|////////////////////////////////////////////////////////////////////////////
		|
		|";
		
	ИначеЕсли СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаАналитики.Подразделение,
		|	ТаблицаАналитики.ПодразделениеОрганизации,
		|	
		|	ТаблицаАналитики.Затрата,
		|	ТаблицаАналитики.ХарактеристикаЗатраты,
		|	ТаблицаАналитики.СерияЗатраты,
		|	ТаблицаАналитики.СтатьяЗатрат,
		|	
		|	ТаблицаАналитики.НоменклатурнаяГруппа,
		|	ТаблицаАналитики.Заказ КАК Заказ%СуффиксРегл%,
		|
		|	ТаблицаАналитики.СчетУчета,
		|	ТаблицаАналитики.НалоговоеНазначение,
		|
		|	//ДляРеглУчета СУММА(
		|	//ДляРеглУчета 	ВЫБОР КОГДА ТаблицаАналитики.НалоговоеНазначение <> Неопределено ТОГДА
		|	//ДляРеглУчета 		УчетЗатрат.СтоимостьНУОстаток
		|	//ДляРеглУчета 	ИНАЧЕ
		|	//ДляРеглУчета 		0
		|	//ДляРеглУчета 	КОНЕЦ
		|	//ДляРеглУчета ) КАК СтоимостьНУОстаток,
		|
		|	//ДляРеглУчета СУММА(
		|	//ДляРеглУчета 	ВЫБОР КОГДА ТаблицаАналитики.НалоговоеНазначение <> Неопределено ТОГДА
		|	//ДляРеглУчета 		УчетЗатрат.НДСВходящийОстаток
		|	//ДляРеглУчета 	ИНАЧЕ
		|	//ДляРеглУчета 		0
		|	//ДляРеглУчета 	КОНЕЦ
		|	//ДляРеглУчета ) КАК НДСВходящийОстаток,
		|
		|	//ДляРеглУчета СУММА(
		|	//ДляРеглУчета 	ВЫБОР КОГДА ТаблицаАналитики.НалоговоеНазначение <> Неопределено ТОГДА
		|	//ДляРеглУчета 		УчетЗатрат.НДСКредитОстаток
		|	//ДляРеглУчета 	ИНАЧЕ
		|	//ДляРеглУчета 		0
		|	//ДляРеглУчета 	КОНЕЦ
		|	//ДляРеглУчета ) КАК НДСКредитОстаток,
		|
		|	//ДляРеглУчета СУММА(
		|	//ДляРеглУчета 	ВЫБОР КОГДА ТаблицаАналитики.НалоговоеНазначение <> Неопределено ТОГДА
		|	//ДляРеглУчета 		УчетЗатрат.КоличествоНУОстаток
		|	//ДляРеглУчета 	ИНАЧЕ
		|	//ДляРеглУчета 		0
		|	//ДляРеглУчета 	КОНЕЦ
		|	//ДляРеглУчета ) КАК КоличествоНУОстаток,
		|
		|	СУММА(УчетЗатрат.СтоимостьОстаток) КАК СтоимостьОстаток,
		|	СУММА(УчетЗатрат.КоличествоОстаток) КАК КоличествоОстаток
		|
		|ПОМЕСТИТЬ ТаблицаСтоимостиЗатрат%СуффиксРегл%
		|ИЗ
		|	РегистрНакопления.УчетЗатрат%СуффиксРегл%.Остатки(&КонДата, 
		|		(
		|		АналитикаВидаУчета,
		|		АналитикаУчетаЗатрат,
		|		АналитикаРаспределенияЗатрат,
		|		АналитикаУчетаПартий
		|		) В (
		|			ВЫБРАТЬ
		|				//ДляУпрУчета АналитикаВидаУчета,
		|				//ДляРеглУчета АналитикаВидаУчетаРегл,
		|				АналитикаУчетаЗатрат,
		|				АналитикаРаспределенияЗатрат,
		|				АналитикаУчетаПартий
		|			ИЗ
		|				ТаблицаАналитики
		|			)
		|	
		|	) КАК УчетЗатрат
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		ТаблицаАналитики КАК ТаблицаАналитики
		|	ПО
		|		//ДляУпрУчета УчетЗатрат.АналитикаВидаУчета = ТаблицаАналитики.АналитикаВидаУчета
		|		//ДляРеглУчета УчетЗатрат.АналитикаВидаУчета = ТаблицаАналитики.АналитикаВидаУчетаРегл
		|		И УчетЗатрат.АналитикаУчетаЗатрат = ТаблицаАналитики.АналитикаУчетаЗатрат
		|		И УчетЗатрат.АналитикаРаспределенияЗатрат = ТаблицаАналитики.АналитикаРаспределенияЗатрат
		|		И УчетЗатрат.АналитикаУчетаПартий = ТаблицаАналитики.АналитикаУчетаПартий
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаАналитики.Подразделение,
		|	ТаблицаАналитики.ПодразделениеОрганизации,
		|	
		|	ТаблицаАналитики.Затрата,
		|	ТаблицаАналитики.ХарактеристикаЗатраты,
		|	ТаблицаАналитики.СерияЗатраты,
		|	ТаблицаАналитики.СтатьяЗатрат,
		|	
		|	ТаблицаАналитики.НоменклатурнаяГруппа,
		|	ТаблицаАналитики.Заказ,
		|	ТаблицаАналитики.СчетУчета,
		|	ТаблицаАналитики.НалоговоеНазначение
		|;
		|////////////////////////////////////////////////////////////////////////////
		|
        |";
		
	Иначе
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	НезавершенноеПроизводство.Подразделение,
		|	//ДляРеглУчета НезавершенноеПроизводство.Подразделение КАК ПодразделениеОрганизации,
		|	
		|	НезавершенноеПроизводство.Затрата,
		|	НезавершенноеПроизводство.ХарактеристикаЗатраты,
		|	НезавершенноеПроизводство.СерияЗатраты,
		|	НезавершенноеПроизводство.СтатьяЗатрат,
		|	
		|	НезавершенноеПроизводство.НоменклатурнаяГруппа,
		|	НезавершенноеПроизводство.Заказ КАК Заказ%СуффиксРегл%,
		|
		|	//ДляРеглУчета НезавершенноеПроизводство.СчетУчета,
		|	//ДляРеглУчета НезавершенноеПроизводство.НалоговоеНазначение,
		|
		|	//ДляРеглУчета НезавершенноеПроизводство.СтоимостьНУОстаток КАК СтоимостьНУОстаток,
		|	//ДляРеглУчета НезавершенноеПроизводство.КоличествоОстаток  КАК КоличествоНУОстаток,
		|	//ДляРеглУчета НезавершенноеПроизводство.НДСВходящийОстаток КАК НДСВходящийОстаток,
		|	//ДляРеглУчета НезавершенноеПроизводство.НДСКредитОстаток   КАК НДСКредитОстаток,
		|
		|	НезавершенноеПроизводство.СтоимостьОстаток,
		|	НезавершенноеПроизводство.КоличествоОстаток
		|
		|ПОМЕСТИТЬ ТаблицаСтоимостиЗатрат%СуффиксРегл%
		|ИЗ
		|	РегистрНакопления.НезавершенноеПроизводство%СуффиксУчета%.Остатки(&КонДата, 
		|		(
		|		//ДляРеглУчета Организация,
		|		Подразделение,
		|		//ДляРеглУчета СчетУчета,
		|		//ДляРеглУчета НалоговоеНазначение,
		|		СтатьяЗатрат,
		|		НоменклатурнаяГруппа,
		|		Заказ,
		|		Затрата,
		|		ХарактеристикаЗатраты,
		|		СерияЗатраты
		|		) В (
		|			ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				//ДляУпрУчета ПодразделениеНЗП,
		|				//ДляРеглУчета Организация,
		|				//ДляРеглУчета ПодразделениеОрганизацииНЗП,
		|				//ДляРеглУчета СчетУчета,
		|				//ДляРеглУчета НалоговоеНазначение,
		|				СтатьяЗатрат,
		|				НоменклатурнаяГруппаНЗП,
		|				//ДляУпрУчета ЗаказНЗП,
		|				//ДляРеглУчета ЗаказНЗПРегл,
		|				Номенклатура,
		|				ХарактеристикаНоменклатуры,
		|				СерияНоменклатуры
		|			ИЗ
		|				ТаблицаДокумента
		|			)
		|	
		|	) КАК НезавершенноеПроизводство
		|
		|;
		|////////////////////////////////////////////////////////////////////////////
		|
        |";

	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ИмяДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТабличнойЧасти%", ИмяДокумента + ?(ИмяТабличнойЧасти = "", "", ".") + ИмяТабличнойЧасти);

	Возврат ТекстЗапроса
	
КонецФункции // СформироватьТекстЗапросаТаблицыСтоимостиЗатрат()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ НАКОПЛЕНИЯ "ЗАТРАТЫ НА ВЫПУСК ПРОДУКЦИИ"

// Процедура дополняет структуру шапки документа.
//
// Параметры:
//	УчетнаяПолитика - Структура - Параметры учетной политики по упр. учету
//	УчетнаяПолитикаРегл - Структура - Параметры учетной политики по регл. учету
//
// Выходные параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	
Процедура ДополнитьСтруктуруШапкиДокументаНастройкиУчетаЗатратНаВыпуск(
	УчетнаяПолитика, 
	УчетнаяПолитикаРегл,
	СтруктураШапкиДокумента
	)
	
	Если Не СтруктураШапкиДокумента.Свойство("ИспользоватьРасширеннуюАналитику") Тогда
		ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
			И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата);
		СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
	   И Не СтруктураШапкиДокумента.Свойство("ОтражатьЗатратыВУпрУчете")
	Тогда
		РежимИспользованияРасширеннойАналитики = глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");
		СтруктураШапкиДокумента.Вставить("ОтражатьЗатратыВУпрУчете", (РежимИспользованияРасширеннойАналитики = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет));
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.Свойство("УчетЗатратПоЗаказамНаПроизводство") Тогда
		Если ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			СтруктураШапкиДокумента.Вставить("УчетЗатратПоЗаказамНаПроизводство", УчетнаяПолитика.УчетЗатратПоЗаказамНаПроизводство);
		Иначе
			СтруктураШапкиДокумента.Вставить("УчетЗатратПоЗаказамНаПроизводство", Истина);
		КонецЕсли;
	КонецЕсли;
		
	Если Не СтруктураШапкиДокумента.Свойство("УчетЗатратПоЗаказамНаПроизводствоРегл") Тогда
		Если ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
			СтруктураШапкиДокумента.Вставить("УчетЗатратПоЗаказамНаПроизводствоРегл", УчетнаяПолитикаРегл.УчетЗатратПоЗаказамНаПроизводство);
		Иначе
			СтруктураШапкиДокумента.Вставить("УчетЗатратПоЗаказамНаПроизводствоРегл", Истина);
		КонецЕсли;
	КонецЕсли;
	
	РасчетПоПрямымЗатратамУпр = Ложь;
	РасчетПоПрямымЗатратамРегл = Ложь;
		
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаНЗП")
	 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеНЗП")
	 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.СписаниеНЗП")
	 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства")
	Тогда
		РасчетПоПрямымЗатратамУпр = Истина;
		РасчетПоПрямымЗатратамРегл = Истина;
	Иначе
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			РасчетПоПрямымЗатратамУпр = (УчетнаяПолитика.СпособРасчетаСебестоимостиВыпускаПоОперациям = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПрямымЗатратам);
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			РасчетПоПрямымЗатратамРегл = (УчетнаяПолитикаРегл.СпособРасчетаСебестоимостиВыпускаПоОперациям = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПрямымЗатратам);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("РасчетПоПрямымЗатратамУпр", РасчетПоПрямымЗатратамУпр);
	СтруктураШапкиДокумента.Вставить("РасчетПоПрямымЗатратамРегл", РасчетПоПрямымЗатратамРегл);
	
КонецПроцедуры // ДополнитьСтруктуруШапкиДокументаНастройкиУчетаЗатратНаВыпуск()

// Процедура формирует движения по регистру накопления "Затраты на выпуск продукции" по всем видам учета.
//
Процедура СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукции(
	СтруктураШапкиДокумента, 
	ИмяДокумента = "", 
	УчетнаяПолитика, 
	УчетнаяПолитикаБух
	) Экспорт
	
	Если Не СтруктураШапкиДокумента.Свойство("ИмяДокумента") Тогда
		СтруктураШапкиДокумента.Вставить("ИмяДокумента", ИмяДокумента);
	КонецЕсли;
	
	ДополнитьСтруктуруШапкиДокументаНастройкиУчетаЗатратНаВыпуск(
		УчетнаяПолитика, 
		УчетнаяПолитикаБух,
		СтруктураШапкиДокумента
	);

	ТекстЗапросаРаспределениеМатериалов = "";
	ТекстЗапросаРаспределениеВозвратныхОтходов = "";
	ТекстЗапросаРаспределениеПрочихЗатрат = "";
	ТекстЗапросаРаспределениеТехОпераций = "";
	
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	Если ТипДокумента = Тип("ДокументСсылка.РаспределениеМатериаловНаВыпуск") Тогда
		ТекстЗапросаРаспределениеМатериалов = СформироватьТекстЗапросаДляДокументаРаспределениеМатериаловНаВыпуск("РаспределениеМатериалов");
		ТекстЗапросаРаспределениеВозвратныхОтходов = СформироватьТекстЗапросаДляДокументаРаспределениеМатериаловНаВыпуск("РаспределениеВозвратныхОтходов");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РаспределениеПрочихЗатрат") Тогда
		ТекстЗапросаРаспределениеПрочихЗатрат = СформироватьТекстЗапросаДляДокументаРаспределениеПрочихЗатрат();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		Если СтруктураШапкиДокумента.ИспользоватьМатериалы Тогда
			ТекстЗапросаРаспределениеМатериалов = СформироватьТекстЗапросаДляДокументаАктОбОказанииПроизводственныхУслуг();
		КонецЕсли;
		Если СтруктураШапкиДокумента.ИспользоватьПрочиеЗатраты Тогда
			ТекстЗапросаРаспределениеПрочихЗатрат = СформироватьТекстЗапросаДляДокументаАктОбОказанииПроизводственныхУслугПрочие();
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки") Тогда
		Если СтруктураШапкиДокумента.ИспользоватьМатериалы Тогда
			ТекстЗапросаРаспределениеМатериалов = СформироватьТекстЗапросаДляДокументаПоступлениеТоваровИзПереработки("РаспределениеМатериалов");
		КонецЕсли;
		Если СтруктураШапкиДокумента.ИспользоватьВозвратныеОтходы Тогда
			ТекстЗапросаРаспределениеВозвратныхОтходов = СформироватьТекстЗапросаДляДокументаПоступлениеТоваровИзПереработки("РаспределениеВозвратныхОтходов");
		КонецЕсли;
		Если СтруктураШапкиДокумента.ИспользоватьПрочиеЗатраты Тогда
			ТекстЗапросаРаспределениеПрочихЗатрат = СформироватьТекстЗапросаДляДокументаПоступлениеТоваровИзПереработкиПрочие();
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		Если СтруктураШапкиДокумента.ИспользоватьМатериалы Тогда
			ТекстЗапросаРаспределениеМатериалов = СформироватьТекстЗапросаДляДокументаОтчетПроизводстваЗаСмену("РаспределениеМатериалов");
		КонецЕсли;
		Если СтруктураШапкиДокумента.ИспользоватьВозвратныеОтходы Тогда
			ТекстЗапросаРаспределениеВозвратныхОтходов = СформироватьТекстЗапросаДляДокументаОтчетПроизводстваЗаСмену("РаспределениеВозвратныхОтходов");
		КонецЕсли;
		Если СтруктураШапкиДокумента.ИспользоватьПрочиеЗатраты Тогда
			ТекстЗапросаРаспределениеПрочихЗатрат = СформироватьТекстЗапросаДляДокументаОтчетПроизводстваЗаСменуПрочие();
		КонецЕсли;
		Если СтруктураШапкиДокумента.ИспользоватьТехнологическиеОперации Тогда
			ТекстЗапросаРаспределениеТехОпераций = СформироватьТекстЗапросаДляДокументаОтчетПроизводстваЗаСменуТехОперации();
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		ТекстЗапросаРаспределениеМатериалов = СформироватьТекстЗапросаДляДокументаКомплектацияНоменклатуры(СтруктураШапкиДокумента.ВидКомплектации);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаНЗП") Тогда
		ТекстЗапросаРаспределениеМатериалов = СформироватьТекстЗапросаДляДокументаКорректировкаНЗП();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеНЗП") Тогда
		ТекстЗапросаРаспределениеМатериалов = СформироватьТекстЗапросаДляДокументаОприходованиеНЗП();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеНЗП") Тогда
		ТекстЗапросаРаспределениеМатериалов = СформироватьТекстЗапросаДляДокументаСписаниеНЗП();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		
		// При РАУЗ движения формируются в подписке на событие ПриПроведенииРасширеннаяАналитикаЗапасовИзменениеСостояния
		Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапросаРаспределениеМатериалов = СформироватьТекстЗапросаДляДокументаОприходованиеМатериалов();
		
	Иначе
		Возврат;
	КонецЕсли;
	
	СтруктураНаборыЗаписей = Новый Структура;
	
	// Формирование движений по табличной части "Распределение материалов".
	СформироватьДвиженияПоРаспределениюМатериалов(
		СтруктураШапкиДокумента, 
		ТекстЗапросаРаспределениеМатериалов,
		УчетнаяПолитика,
		УчетнаяПолитикаБух,
		СтруктураНаборыЗаписей
	);
	
	// Формирование движений по табличной части "Распределение возвратных отходов".
	Если Не ПустаяСтрока(ТекстЗапросаРаспределениеВозвратныхОтходов) Тогда
		СформироватьДвиженияПоРаспределениюВозвратныхОтходов(
			СтруктураШапкиДокумента, 
			ТекстЗапросаРаспределениеВозвратныхОтходов,
			УчетнаяПолитика,
			УчетнаяПолитикаБух,
			СтруктураНаборыЗаписей
		);
	КонецЕсли;
	
	// Формирование движений по табличной части "Распределение прочих затрат".
	Если Не ПустаяСтрока(ТекстЗапросаРаспределениеПрочихЗатрат) Тогда
		СформироватьДвиженияПоРаспределениюПрочихЗатрат(
			СтруктураШапкиДокумента, 
			ТекстЗапросаРаспределениеПрочихЗатрат,
			УчетнаяПолитика,
			УчетнаяПолитикаБух,
			СтруктураНаборыЗаписей
		);
	КонецЕсли;
	
	// Формирование движений по табличной части "Распределение тех. операций".
	Если Не ПустаяСтрока(ТекстЗапросаРаспределениеТехОпераций) Тогда
		СформироватьДвиженияПоРаспределениюПрочихЗатрат(
			СтруктураШапкиДокумента, 
			ТекстЗапросаРаспределениеТехОпераций,
			УчетнаяПолитика,
			УчетнаяПолитикаБух,
			СтруктураНаборыЗаписей
		);
	КонецЕсли;
	
	Если СтруктураНаборыЗаписей.Количество() > 0 Тогда
		УправлениеЗатратамиДвиженияПоРегистрам.ЗаписатьНаборыЗаписейРегистров(
			СтруктураНаборыЗаписей
			);
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукции()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО ВЫПУСКУ ПРОДУКЦИИ И НАПРАВЛЕНИЯМ ВЫПУСКА

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ НАКОПЛЕНИЯ "ВЫПУСК ПРОДУКЦИИ"

// Функция заменяет комментарии в тексте запроса в зависимости от отражения в учете.
//
// Параметры
//  ИсходныхТекстЗапроса – Строка – Текст запроса.
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//
// Возвращаемое значение:
//   Строка – Текст запроса, в котором заменены комментарии.
//
Функция ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
	ИсходныйТекстЗапроса,
	ВидОтраженияВУчете
	)
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		ТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "%СуффиксУчета%", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СуффиксОрганизаций%", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СуффиксРегл%", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляУпрУчета", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтоимостьПродукции", "СтоимостьПродукцииУУ");
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		ТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, "%СуффиксУчета%", "БухгалтерскийУчет");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СуффиксОрганизаций%", "Организаций");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СуффиксРегл%", "Регл");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляРеглУчета", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДляБухУчета", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтоимостьПродукции", "СтоимостьПродукцииБУ");
		
		
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции // ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска()

// Формирует текст запроса для реквизита "Заказ".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаДляРеквизитаЗаказ()
	
	ТекстЗапроса = "
	|		ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|				И ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|				И ТабличнаяЧасть.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) ТОГДА
	|			ТабличнаяЧасть.Заказ
	|		КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|				И ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И ТабличнаяЧасть.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|				//ДляУпрУчета И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|				//ДляРеглУчета И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|			ТабличнаяЧасть.Заказ
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляРеквизитаЗаказ()

// Формирует текст запроса для реквизита "ЗаказПолучатель".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаДляРеквизитаЗаказПолучатель()
	
	ТекстЗапроса = "
	|		ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|				И ТабличнаяЧасть.ЗаказПолучатель ССЫЛКА Документ.ЗаказПокупателя 
	|				И ТабличнаяЧасть.ЗаказПолучатель <> &ПустойЗаказПокупателя ТОГДА
	|			ТабличнаяЧасть.ЗаказПолучатель
	|		КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|				И ТабличнаяЧасть.ЗаказПолучатель ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И ТабличнаяЧасть.ЗаказПолучатель <> &ПустойЗаказНаПроизводство
	|				//ДляУпрУчета И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|				//ДляРеглУчета И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|			ТабличнаяЧасть.ЗаказПолучатель
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляРеквизитаЗаказПолучатель()

// Формирует текст запроса для реквизита "Заказ" документа "Корректировка НЗП.
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаДляРеквизитаЗаказКорректировкаНЗП()
	
	ТекстЗапроса = "
	|		ВЫБОР КОГДА ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|				И ТабличнаяЧасть.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|			ТабличнаяЧасть.Заказ
	|		КОГДА ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И ТабличнаяЧасть.Заказ <> &ПустойЗаказНаПроизводство
	|				//ДляУпрУчета И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|				//ДляРеглУчета И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|			ТабличнаяЧасть.Заказ
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляРеквизитаЗаказКорректировкаНЗП()

// Формирует текст запроса для реквизита "ЗаказПолучатель" документа "Корректировка НЗП".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаДляРеквизитаЗаказПолучательКорректировкаНЗП()
	
	ТекстЗапроса = "
	|		ВЫБОР КОГДА ТабличнаяЧасть.ЗаказПолучатель ССЫЛКА Документ.ЗаказПокупателя 
	|				И ТабличнаяЧасть.ЗаказПолучатель <> &ПустойЗаказПокупателя ТОГДА
	|			ТабличнаяЧасть.ЗаказПолучатель
	|		КОГДА ТабличнаяЧасть.ЗаказПолучатель ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И ТабличнаяЧасть.ЗаказПолучатель <> &ПустойЗаказНаПроизводство
	|				//ДляУпрУчета И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|				//ДляРеглУчета И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|			ТабличнаяЧасть.ЗаказПолучатель
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляРеквизитаЗаказПолучательКорректировкаНЗП()

// Процедура устанавливает параметры запросов по выпуску продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету
//	Запрос - Запрос - Запрос по выпуску продукции.
//
Процедура УстановитьПараметрыЗапросаПоВыпускуПродукции(
	СтруктураШапкиДокумента,
	УчетнаяПолитика,
	УчетнаяПолитикаБух,
	Запрос
	)
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("ВидВыпускаВыпуск", Перечисления.ВидыВыпуска.Выпуск);
	Запрос.УстановитьПараметр("ВидВыпускаНаработка", Перечисления.ВидыВыпуска.Наработка);
	
	Запрос.УстановитьПараметр("СтатусМатериальныхЗатратПринятые", Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку);
	Запрос.УстановитьПараметр("ПустойЗаказНаПроизводство", Документы.ЗаказНаПроизводство.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойПроект", Справочники.Проекты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСпецификация", Справочники.СпецификацииНоменклатуры.ПустаяСсылка());
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Запрос.УстановитьПараметр("УчетЗатратПоЗаказамНаПроизводство", УчетнаяПолитика.УчетЗатратПоЗаказамНаПроизводство);
	Иначе
		Запрос.УстановитьПараметр("УчетЗатратПоЗаказамНаПроизводство", Ложь);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Запрос.УстановитьПараметр("УчетЗатратПоЗаказамНаПроизводствоРегл", УчетнаяПолитикаБух.УчетЗатратПоЗаказамНаПроизводство);
	Иначе
		Запрос.УстановитьПараметр("УчетЗатратПоЗаказамНаПроизводствоРегл", Ложь);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("НаправлениеВыпускаНаСклад", Перечисления.НаправленияВыпуска.НаСклад);
	Запрос.УстановитьПараметр("НаправлениеВыпускаНаЗатраты", Перечисления.НаправленияВыпуска.НаЗатраты);
	Запрос.УстановитьПараметр("НаправлениеВыпускаНаЗатратыСписок", Перечисления.НаправленияВыпуска.НаЗатратыСписок);
	
	Запрос.УстановитьПараметр("ВидПоступленияНаСклад", Перечисления.ВидыПоступленияТоваров.НаСклад);
	Запрос.УстановитьПараметр("ВидПоступленияПоОрдеру", Перечисления.ВидыПоступленияТоваров.ПоОрдеру);
	Запрос.УстановитьПараметр("СтатусПартииПродукция", Перечисления.СтатусыПартийТоваров.Продукция);
	Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);
	
	Запрос.УстановитьПараметр("КодОперацииВыпускПродукцииНаСклад", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад);
	
	Запрос.УстановитьПараметр("ВидОперацииПереработка", Перечисления.ВидыОперацийЗаказПокупателя.Переработка);
	
	Запрос.УстановитьПараметр("ПродукцияИзДавальческогоСырья", Перечисления.ВариантыВыпускаПродукции.ПродукцияИзДавальческогоСырья);
	Запрос.УстановитьПараметр("СобственнаяПродукция", Перечисления.ВариантыВыпускаПродукции.СобственнаяПродукция);
	Запрос.УстановитьПараметр("ПродукцияСтороннегоПереработчика", Перечисления.ВариантыВыпускаПродукции.ПродукцияСтороннегоПереработчика);
	
КонецПроцедуры // УстановитьПараметрыЗапросаПоВыпускуПродукции()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ТЕКСТОВ ЗАПРОСОВ ДЛЯ ДОКУМЕНТОВ ВЫПУСКА

// Формирует текст запроса по табличной части "Продукция" документа "Отчет производства за смену".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоПродукцииОтчетПроизводстваЗаСмену()
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		ТабличнаяЧасть.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|		ТабличнаяЧасть.СерияНоменклатуры,
	|		ТабличнаяЧасть.Спецификация,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		//ТекстЗапросаЗаказУпр
	|		//ТекстЗапросаЗаказРегл
	|		
	|		СУММА(
	|			Количество * 
	|			ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|						И Коэффициент <> 0 ТОГДА 
	|				Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|			ИНАЧЕ
	|				1
	|			КОНЕЦ
	|		) КАК Количество
	|	ИЗ	
	|		Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ТабличнаяЧасть
	|		
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		И (ТабличнаяЧасть.ВидВыпуска = &ВидВыпускаВыпуск
	|			И ТабличнаяЧасть.Ссылка.ИспользоватьНаработку
	|			ИЛИ
	|			Не ТабличнаяЧасть.Ссылка.ИспользоватьНаработку)
	|		
	|	СГРУППИРОВАТЬ ПО
	|		ТабличнаяЧасть.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|		ТабличнаяЧасть.СерияНоменклатуры,
	|		ТабличнаяЧасть.Спецификация,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		//СгруппироватьТекстЗапросаЗаказУпр
	|		//СгруппироватьТекстЗапросаЗаказРегл
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказ();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СгруппироватьТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + ",");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СгруппироватьТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл);

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПродукцииОтчетПроизводстваЗаСмену()

// Формирует текст запроса по табличной части "Продукция" документа "Поступление товаров из переработки".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоПродукцииПоступлениеТоваровИзПереработки()
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		ТабличнаяЧасть.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|		ТабличнаяЧасть.СерияНоменклатуры,
	|		ТабличнаяЧасть.Спецификация,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		//ТекстЗапросаЗаказУпр
	|		//ТекстЗапросаЗаказРегл
	|		
	|		СУММА(
	|			Количество * 
	|			ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|						И Коэффициент <> 0 ТОГДА 
	|				Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|			ИНАЧЕ
	|				1
	|			КОНЕЦ
	|		) КАК Количество
	|	ИЗ	
	|		Документ.ПоступлениеТоваровИзПереработки.Продукция КАК ТабличнаяЧасть
	|		
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		
	|	СГРУППИРОВАТЬ ПО
	|		ТабличнаяЧасть.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|		ТабличнаяЧасть.СерияНоменклатуры,
	|		ТабличнаяЧасть.Спецификация,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		//СгруппироватьТекстЗапросаЗаказУпр
	|		//СгруппироватьТекстЗапросаЗаказРегл
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказ();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СгруппироватьТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + ",");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СгруппироватьТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл);

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПродукцииПоступлениеТоваровИзПереработки()

// Формирует текст запроса для документа "Комплектация номенклатуры (сборка)".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоПродукцииКомплектацияНоменклатурыСборка()
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		Док.НоменклатурнаяГруппа,
	|		Док.Номенклатура,
	|		Док.ХарактеристикаНоменклатуры,
	|		Док.СерияНоменклатуры,
	|		Док.Спецификация,
	|		Док.НалоговоеНазначение,
	|		
	|		ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|				И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|			Док.Заказ
	|		КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И Док.Заказ <> &ПустойЗаказНаПроизводство
	|				И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|			Док.Заказ
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ КАК Заказ,
	|		
	|		ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|				И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|			Док.Заказ
	|		КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И Док.Заказ <> &ПустойЗаказНаПроизводство
	|				И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|			Док.Заказ
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ КАК ЗаказРегл,
	|		
	|		СУММА(
	|			Количество * 
	|			ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|						И Коэффициент <> 0 ТОГДА 
	|				Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|			ИНАЧЕ
	|				1
	|			КОНЕЦ
	|		) КАК Количество
	|	ИЗ	
	|		Документ.КомплектацияНоменклатуры КАК Док
	|		
	|	ГДЕ
	|		Док.Ссылка = &Ссылка
	|		
	|	СГРУППИРОВАТЬ ПО
	|		Док.НоменклатурнаяГруппа,
	|		Док.Номенклатура,
	|		Док.ХарактеристикаНоменклатуры,
	|		Док.СерияНоменклатуры,
	|		Док.Спецификация,
	|		Док.НалоговоеНазначение,
	|		
	|		ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|				И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|			Док.Заказ
	|		КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И Док.Заказ <> &ПустойЗаказНаПроизводство
	|				И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|			Док.Заказ
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ,
	|		
	|		ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|				И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|			Док.Заказ
	|		КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И Док.Заказ <> &ПустойЗаказНаПроизводство
	|				И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|			Док.Заказ
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ
	|";
		
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПродукцииКомплектацияНоменклатурыСборка()

// Формирует текст запроса для документа "Комплектация номенклатуры (разборка)".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоПродукцииКомплектацияНоменклатурыРазборка()
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		ТабличнаяЧасть.Ссылка.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|		ТабличнаяЧасть.СерияНоменклатуры,
	|		ТабличнаяЧасть.Ссылка.Спецификация,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|				И ТабличнаяЧасть.Ссылка.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|			ТабличнаяЧасть.Ссылка.Заказ
	|		КОГДА ТабличнаяЧасть.Ссылка.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И ТабличнаяЧасть.Ссылка.Заказ <> &ПустойЗаказНаПроизводство
	|				И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|			ТабличнаяЧасть.Ссылка.Заказ
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ КАК Заказ,
	|		
	|		ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|				И ТабличнаяЧасть.Ссылка.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|			ТабличнаяЧасть.Ссылка.Заказ
	|		КОГДА ТабличнаяЧасть.Ссылка.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И ТабличнаяЧасть.Ссылка.Заказ <> &ПустойЗаказНаПроизводство
	|				И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|			ТабличнаяЧасть.Ссылка.Заказ
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ КАК ЗаказРегл,
	|		
	|		СУММА(
	|			Количество * 
	|			ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|						И Коэффициент <> 0 ТОГДА 
	|				Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|			ИНАЧЕ
	|				1
	|			КОНЕЦ
	|		) КАК Количество
	|	ИЗ	
	|		Документ.КомплектацияНоменклатуры.Комплектующие КАК ТабличнаяЧасть
	|		
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		
	|	СГРУППИРОВАТЬ ПО
	|		ТабличнаяЧасть.Ссылка.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|		ТабличнаяЧасть.СерияНоменклатуры,
	|		ТабличнаяЧасть.Ссылка.Спецификация,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		
	|		ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|				И ТабличнаяЧасть.Ссылка.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|			ТабличнаяЧасть.Ссылка.Заказ
	|		КОГДА ТабличнаяЧасть.Ссылка.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И ТабличнаяЧасть.Ссылка.Заказ <> &ПустойЗаказНаПроизводство
	|				И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|			ТабличнаяЧасть.Ссылка.Заказ
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ,
	|		
	|		ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|				И ТабличнаяЧасть.Ссылка.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|			ТабличнаяЧасть.Ссылка.Заказ
	|		КОГДА ТабличнаяЧасть.Ссылка.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И ТабличнаяЧасть.Ссылка.Заказ <> &ПустойЗаказНаПроизводство
	|				И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|			ТабличнаяЧасть.Ссылка.Заказ
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ
	|";
		
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПродукцииКомплектацияНоменклатурыРазборка()

// Формирует текст запроса по табличной части "Услуги" документа "Акт об оказании производственных услуг".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоПродукцииАктОбОказанииПроизводственныхУслуг()
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		ТабличнаяЧасть.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		&ПустаяХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		&ПустаяСерияНоменклатуры КАК СерияНоменклатуры,
	|		ТабличнаяЧасть.Спецификация,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|				И ТабличнаяЧасть.Ссылка.Сделка ССЫЛКА Документ.ЗаказПокупателя 
	|				И ТабличнаяЧасть.Ссылка.Сделка <> &ПустойЗаказПокупателя ТОГДА
	|			ТабличнаяЧасть.Ссылка.Сделка
	|		КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|				И ТабличнаяЧасть.ЗаказВыпуска ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И ТабличнаяЧасть.ЗаказВыпуска <> &ПустойЗаказНаПроизводство
	|				И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|			ТабличнаяЧасть.ЗаказВыпуска
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ КАК Заказ,
	|		
	|		ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|				И ТабличнаяЧасть.Ссылка.Сделка ССЫЛКА Документ.ЗаказПокупателя 
	|				И ТабличнаяЧасть.Ссылка.Сделка <> &ПустойЗаказПокупателя ТОГДА
	|			ТабличнаяЧасть.Ссылка.Сделка
	|		КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|				И ТабличнаяЧасть.ЗаказВыпуска ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И ТабличнаяЧасть.ЗаказВыпуска <> &ПустойЗаказНаПроизводство
	|				И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|			ТабличнаяЧасть.ЗаказВыпуска
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ КАК ЗаказРегл,
	|		
	|		СУММА(
	|			Количество * 
	|			ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|						И Коэффициент <> 0 ТОГДА 
	|				Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|			ИНАЧЕ
	|				1
	|			КОНЕЦ
	|		) КАК Количество
	|	ИЗ	
	|		Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК ТабличнаяЧасть
	|		
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		
	|	СГРУППИРОВАТЬ ПО
	|		ТабличнаяЧасть.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.Спецификация,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|				И ТабличнаяЧасть.Ссылка.Сделка ССЫЛКА Документ.ЗаказПокупателя 
	|				И ТабличнаяЧасть.Ссылка.Сделка <> &ПустойЗаказПокупателя ТОГДА
	|			ТабличнаяЧасть.Ссылка.Сделка
	|		КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|				И ТабличнаяЧасть.ЗаказВыпуска ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И ТабличнаяЧасть.ЗаказВыпуска <> &ПустойЗаказНаПроизводство
	|				И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|			ТабличнаяЧасть.ЗаказВыпуска
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ,
	|		
	|		ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|				И ТабличнаяЧасть.Ссылка.Сделка ССЫЛКА Документ.ЗаказПокупателя 
	|				И ТабличнаяЧасть.Ссылка.Сделка <> &ПустойЗаказПокупателя ТОГДА
	|			ТабличнаяЧасть.Ссылка.Сделка
	|		КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|				И ТабличнаяЧасть.ЗаказВыпуска ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И ТабличнаяЧасть.ЗаказВыпуска <> &ПустойЗаказНаПроизводство
	|				И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|			ТабличнаяЧасть.ЗаказВыпуска
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПродукцииАктОбОказанииПроизводственныхУслуг()

// Формирует текст запроса по табличной части "Материалы" документа "Корректировка незавершенного производства".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоПродукцииКорректировкаНЗП()
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		ТабличнаяЧасть.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|		ТабличнаяЧасть.СерияНоменклатуры,
	|		&ПустаяСпецификация КАК Спецификация,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		//ТекстЗапросаЗаказУпр
	|		//ТекстЗапросаЗаказРегл
	|		
	|		СУММА(
	|			Количество * 
	|			ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|						И Коэффициент <> 0 ТОГДА 
	|				Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|			ИНАЧЕ
	|				1
	|			КОНЕЦ
	|		) КАК Количество
	|	ИЗ	
	|		Документ.КорректировкаНЗП.Материалы КАК ТабличнаяЧасть
	|		
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		
	|	СГРУППИРОВАТЬ ПО
	|		ТабличнаяЧасть.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|		ТабличнаяЧасть.СерияНоменклатуры,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		//СгруппироватьТекстЗапросаЗаказУпр
	|		//СгруппироватьТекстЗапросаЗаказРегл
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказКорректировкаНЗП();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями, 
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями, 
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СгруппироватьТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + ",");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СгруппироватьТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл);

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПродукцииКорректировкаНЗП()

// Формирует текст запроса по табличной части "Материалы" документа "Оприходование незавершенного производства".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоПродукцииОприходованиеНЗП()
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		ТабличнаяЧасть.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|		ТабличнаяЧасть.СерияНоменклатуры,
	|		&ПустаяСпецификация КАК Спецификация,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		//ТекстЗапросаЗаказУпр
	|		//ТекстЗапросаЗаказРегл
	|		
	|		СУММА(
	|			Количество * 
	|			ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|						И Коэффициент <> 0 ТОГДА 
	|				Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|			ИНАЧЕ
	|				1
	|			КОНЕЦ
	|		) КАК Количество
	|	ИЗ	
	|		Документ.ОприходованиеНЗП.Материалы КАК ТабличнаяЧасть
	|		
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		
	|	СГРУППИРОВАТЬ ПО
	|		ТабличнаяЧасть.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|		ТабличнаяЧасть.СерияНоменклатуры,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		//СгруппироватьТекстЗапросаЗаказУпр
	|		//СгруппироватьТекстЗапросаЗаказРегл
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказКорректировкаНЗП();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СгруппироватьТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + ",");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СгруппироватьТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл);

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПродукцииОприходованиеНЗП()

// Формирует текст запроса по табличной части "Материалы" документа "Списание незавершенного производства".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоПродукцииСписаниеНЗП()
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		ТабличнаяЧасть.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|		ТабличнаяЧасть.СерияНоменклатуры,
	|		&ПустаяСпецификация КАК Спецификация,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		//ТекстЗапросаЗаказУпр
	|		//ТекстЗапросаЗаказРегл
	|		
	|		СУММА(
	|			Количество * 
	|			ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|						И Коэффициент <> 0 ТОГДА 
	|				Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|			ИНАЧЕ
	|				1
	|			КОНЕЦ
	|		) КАК Количество
	|	ИЗ	
	|		Документ.СписаниеНЗП.Материалы КАК ТабличнаяЧасть
	|		
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		
	|	СГРУППИРОВАТЬ ПО
	|		ТабличнаяЧасть.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|		ТабличнаяЧасть.СерияНоменклатуры,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		//СгруппироватьТекстЗапросаЗаказУпр
	|		//СгруппироватьТекстЗапросаЗаказРегл
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказКорректировкаНЗП();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СгруппироватьТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + ",");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СгруппироватьТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл);

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПродукцииСписаниеНЗП()

// Формирует текст запроса по табличной части "Материалы" документа "Оприходование материалов из производства".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоПродукцииОприходованиеМатериалов()
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		ТабличнаяЧасть.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|		ТабличнаяЧасть.СерияНоменклатуры,
	|		&ПустаяСпецификация КАК Спецификация,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		//ТекстЗапросаЗаказУпр
	|		//ТекстЗапросаЗаказРегл
	|		
	|		СУММА(
	|			Количество * 
	|			ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|						И Коэффициент <> 0 ТОГДА 
	|				Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|			ИНАЧЕ
	|				1
	|			КОНЕЦ
	|		) КАК Количество
	|	ИЗ	
	|		Документ.ОприходованиеМатериаловИзПроизводства.Материалы КАК ТабличнаяЧасть
	|		
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		И ТабличнаяЧасть.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы)
	|		
	|	СГРУППИРОВАТЬ ПО
	|		ТабличнаяЧасть.НоменклатурнаяГруппа,
	|		ТабличнаяЧасть.Номенклатура,
	|		ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|		ТабличнаяЧасть.СерияНоменклатуры,
	|		ТабличнаяЧасть.НалоговоеНазначение,
	|		
	|		//СгруппироватьТекстЗапросаЗаказУпр
	|		//СгруппироватьТекстЗапросаЗаказРегл
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказКорректировкаНЗП();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СгруппироватьТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + ",");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СгруппироватьТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл);

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПродукцииОприходованиеМатериалов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ЗАПРОСОВ ПО ВЫПУЩЕННОЙ ПРОДУКЦИИ И УЧЕТНОЙ СТОИМОСТИ

// Формирует текст запроса по регистру "Затраты на выпуск продукции".
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//
// Возвращаемое значение:
//   Строка – Текст запроса по регистру "Затраты на выпуск продукции"
//
Функция СформироватьТекстЗапросаПоЗатратамНаВыпускДокумента(
	СтруктураШапкиДокумента
	)
	
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		
		ТекстЗапроса = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			РегистрАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа,
		|			РегистрАналитикаРаспределенияЗатрат.Продукция,
		|			РегистрАналитикаРаспределенияЗатрат.ХарактеристикаПродукции,
		|			РегистрАналитикаРаспределенияЗатрат.СерияПродукции,
		|			РегистрАналитикаРаспределенияЗатрат.Спецификация,
		|			РегистрАналитикаУчетаПартий.Заказ,
		|			
		|			//ДляУпрУчета НастройкиАналитикиУчетаХарактеристика.УправленческийУчет КАК УчетХарактеристик,
		|			//ДляРеглУчета НастройкиАналитикиУчетаХарактеристика.РегламентированныйУчет КАК УчетХарактеристик,
		|			//ДляУпрУчета НастройкиАналитикиУчетаСерия.УправленческийУчет КАК УчетСерий,
		|			//ДляРеглУчета НастройкиАналитикиУчетаСерия.РегламентированныйУчет КАК УчетСерий,
		|
		|			//ДляБухУчета УчетЗатрат.СтоимостьНУПриход КАК СуммаНУ,
		|			//ДляБухУчета УчетЗатрат.НДСВходящийПриход КАК НДСВходящий,
		|			//ДляБухУчета УчетЗатрат.НДСКредитПриход КАК НДСКредит,
		|
		|			//ДляБухУчета УчетЗатрат.СтоимостьПриход КАК Сумма
		|			//ДляУпрУчета УчетЗатрат.СтоимостьПриход КАК Сумма
		|		ИЗ
		|			РегистрНакопления.УчетЗатрат%СуффиксРегл%.Обороты(&КонДата, &КонДата, Регистратор,  
		|				АналитикаВидаУчета В (
		|					ВЫБРАТЬ
		|						Ссылка
		|					ИЗ
		|                   	РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
		|					ГДЕ
		|						РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ЗатратыНаВыпуск)
		|						ИЛИ РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ЗатратыПоНаработке)
		|					)
		|				И АналитикаУчетаЗатрат Не В (
		|					ВЫБРАТЬ
		|						Ссылка
		|					ИЗ
		|                   	РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаВидаУчета
		|					ГДЕ
		|						РегистрАналитикаВидаУчета.СтатьяЗатрат.СтатусМатериальныхЗатрат 
		|							= ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
		|					)
		|				) КАК УчетЗатрат
		|		
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|				РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
		|			ПО
		|				УчетЗатрат.АналитикаРаспределенияЗатрат = РегистрАналитикаРаспределенияЗатрат.Ссылка
		|		
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|				РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
		|			ПО
		|				УчетЗатрат.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка
		|
		|			ЛЕВОЕ СОЕДИНЕНИЕ
		|				Справочник.НастройкиАналитикиУчета КАК НастройкиАналитикиУчетаХарактеристика
		|			ПО
		|				НастройкиАналитикиУчетаХарактеристика.Ссылка = ЗНАЧЕНИЕ(Справочник.НастройкиАналитикиУчета.ХарактеристикаПродукции)
		|				
		|			ЛЕВОЕ СОЕДИНЕНИЕ
		|				Справочник.НастройкиАналитикиУчета КАК НастройкиАналитикиУчетаСерия
		|			ПО
		|				НастройкиАналитикиУчетаСерия.Ссылка = ЗНАЧЕНИЕ(Справочник.НастройкиАналитикиУчета.СерияПродукции)
        |
		|		ГДЕ
		|			УчетЗатрат.Регистратор = &Ссылка
		|
		|		) КАК СтоимостьПродукции
		|	ПО 
		|	 	ТабличнаяЧасть.НоменклатурнаяГруппа = СтоимостьПродукции.НоменклатурнаяГруппа
		|		И ТабличнаяЧасть.Номенклатура = СтоимостьПродукции.Продукция
		|		И (Не СтоимостьПродукции.УчетХарактеристик
		|			ИЛИ 
		|			(СтоимостьПродукции.УчетХарактеристик
		|			И ТабличнаяЧасть.ХарактеристикаНоменклатуры = СтоимостьПродукции.ХарактеристикаПродукции))
		|		И (Не СтоимостьПродукции.УчетСерий
		|			ИЛИ 
		|			(СтоимостьПродукции.УчетСерий
		|			И ТабличнаяЧасть.СерияНоменклатуры = СтоимостьПродукции.СерияПродукции))
		|		И ТабличнаяЧасть.Спецификация = СтоимостьПродукции.Спецификация
		|		//ДляУпрУчета И ТабличнаяЧасть.Заказ = СтоимостьПродукции.Заказ
		|		//ДляРеглУчета И ТабличнаяЧасть.ЗаказРегл = СтоимостьПродукции.Заказ
		|";
		
	Иначе
	
		ТекстЗапроса = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			ЗатратыНаВыпускПродукции.Продукция,
		|			ЗатратыНаВыпускПродукции.ХарактеристикаПродукции,
		|			ЗатратыНаВыпускПродукции.СерияПродукции,
		|			ЗатратыНаВыпускПродукции.Спецификация,
		|			ЗатратыНаВыпускПродукции.Заказ,
		|			ЗатратыНаВыпускПродукции.НоменклатурнаяГруппа,
		|
		|			//ДляРеглУчета СУММА(ЗатратыНаВыпускПродукции.СуммаНУ) КАК СуммаНУ,
		|			//ДляРеглУчета СУММА(ЗатратыНаВыпускПродукции.НДСВходящий) КАК НДСВходящий,
		|			//ДляРеглУчета СУММА(ЗатратыНаВыпускПродукции.НДСКредит) КАК НДСКредит,
		|
		|			СУММА(ЗатратыНаВыпускПродукции.Сумма) КАК Сумма
		|		ИЗ
		|			РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпускПродукции
		|		ГДЕ
		|			ЗатратыНаВыпускПродукции.Регистратор = &Ссылка
		|			И ЗатратыНаВыпускПродукции.СтатьяЗатрат.СтатусМатериальныхЗатрат <> &СтатусМатериальныхЗатратПринятые
		|
		|		СГРУППИРОВАТЬ ПО
		|			ЗатратыНаВыпускПродукции.НоменклатурнаяГруппа,
		|			ЗатратыНаВыпускПродукции.Продукция,
		|			ЗатратыНаВыпускПродукции.ХарактеристикаПродукции,
		|			ЗатратыНаВыпускПродукции.СерияПродукции,
		|			ЗатратыНаВыпускПродукции.Спецификация,
		|			ЗатратыНаВыпускПродукции.Заказ
		|			
		|		) КАК СтоимостьПродукции
		|	ПО 
		|	 	ТабличнаяЧасть.НоменклатурнаяГруппа = СтоимостьПродукции.НоменклатурнаяГруппа
		|		И ТабличнаяЧасть.Номенклатура = СтоимостьПродукции.Продукция
		|		И ТабличнаяЧасть.ХарактеристикаНоменклатуры = СтоимостьПродукции.ХарактеристикаПродукции
		|		И ТабличнаяЧасть.СерияНоменклатуры = СтоимостьПродукции.СерияПродукции
		|		И ТабличнаяЧасть.Спецификация = СтоимостьПродукции.Спецификация
		|		//ДляУпрУчета И ТабличнаяЧасть.Заказ = СтоимостьПродукции.Заказ
		|		//ДляРеглУчета И ТабличнаяЧасть.ЗаказРегл = СтоимостьПродукции.Заказ
		|";
		
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаПоЗатратамНаВыпускДокумента()

// Формирует текст запроса по продукции из документа выпуска.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ИмяДокумента - Строка - Имя документа
//
// Возвращаемое значение:
//   Строка – Текст запроса
//
Функция СформироватьТекстЗапросаПоПродукцииДокумента(
	СтруктураШапкиДокумента,
	ИмяДокумента
	)
	
	ТекстЗапроса = "
	|	И Номенклатура В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Номенклатура
	|		ИЗ
	|			ИмяТаблицы КАК Документ
	|		ГДЕ
	|			Документ.Ссылка = &Ссылка
	|		)
	|";
	
	Если ИмяДокумента = "ОтчетПроизводстваЗаСмену" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"ИмяТаблицы", 
			"Документ.ОтчетПроизводстваЗаСмену.Продукция");
		
	ИначеЕсли ИмяДокумента = "ПоступлениеТоваровИзПереработки" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"ИмяТаблицы", 
			"Документ.ПоступлениеТоваровИзПереработки.Продукция");
		
	ИначеЕсли ИмяДокумента = "КомплектацияНоменклатуры" Тогда
		Если СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"ИмяТаблицы", 
				"Документ.КомплектацияНоменклатуры");
			
		ИначеЕсли СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Разборка Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"ИмяТаблицы", 
				"Документ.КомплектацияНоменклатуры.Комплектующие");
		Иначе
			Возврат "";
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "АктОбОказанииПроизводственныхУслуг" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"ИмяТаблицы", 
			"Документ.АктОбОказанииПроизводственныхУслуг.Услуги");
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПродукцииДокумента()

// Формирует текст запроса по регистру сведений "Цены номенклатуры".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ИмяДокумента - Строка - Имя документа
//
// Возвращаемое значение:
//   Строка – Текст запроса по регистру "Цены номенклатура"
//
Функция СформироватьТекстЗапросаПоЦенамНоменклатуры(
	СтруктураШапкиДокумента,
	ИмяДокумента
	)
	
	ТекстЗапроса = "
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ЦеныНоменклатуры.Номенклатура,
	|			ЦеныНоменклатуры.ХарактеристикаНоменклатуры,
	|			(ЦеныНоменклатуры.Цена 
	|			* ЕСТЬNULL(КурсыВалют.Курс, 0)
	|			* (ВЫБОР КОГДА ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL 
	|					ИЛИ ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент = 0 ТОГДА
	|				1
	|			ИНАЧЕ
	|				ЦеныНоменклатуры.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / 
	|				ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент
	|			КОНЕЦ)
	|			* ЕСТЬNULL(КурсВалютыУчета.Кратность, 1)
	|			/ ( ЕСТЬNULL(КурсВалютыУчета.Курс, 1)
	|				* (ВЫБОР КОГДА КурсыВалют.Кратность ЕСТЬ NULL ИЛИ КурсыВалют.Кратность = 0 Тогда
	|					1
	|				ИНАЧЕ 
	|					КурсыВалют.Кратность
	|				КОНЕЦ) 
	|				)
	|			) КАК Цена
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&КонДата,
	|				ТипЦен В (
	|					ВЫБРАТЬ
	|						Константы.ТипЦенПлановойСебестоимостиНоменклатуры
	|					ИЗ
	|						Константы КАК Константы
	|					)
	|				//ТекстЗапросаПоПродукцииДокумента
	|
	|				) КАК ЦеныНоменклатуры
	|				
	|			ЛЕВОЕ СОЕДИНЕНИЕ
	|				РегистрСведений.КурсыВалют.СрезПоследних(&КонДата) КАК КурсыВалют
	|			ПО 
	|				КурсыВалют.Валюта = ЦеныНоменклатуры.Валюта
	|				
	|			ЛЕВОЕ СОЕДИНЕНИЕ
	|				РегистрСведений.КурсыВалют.СрезПоследних(&КонДата, 
	|					ВАЛЮТА В (
	|						ВЫБРАТЬ
	|							//ДляУпрУчета Константы.ВалютаУправленческогоУчета 
	|							//ДляРеглУчета Константы.ВалютаРегламентированногоУчета
	|						ИЗ
	|							Константы КАК Константы
	|						)
	|					) КАК КурсВалютыУчета
	|			ПО ИСТИНА
	|		) КАК СтоимостьПродукции
	|	ПО 
	|		ТабличнаяЧасть.Номенклатура = СтоимостьПродукции.Номенклатура
	|		И ТабличнаяЧасть.ХарактеристикаНоменклатуры = СтоимостьПродукции.ХарактеристикаНоменклатуры
	|";
	
	ТекстЗапросаПоПродукцииДокумента = СформироватьТекстЗапросаПоПродукцииДокумента(
		СтруктураШапкиДокумента,
		ИмяДокумента
		);
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаПоПродукцииДокумента", ТекстЗапросаПоПродукцииДокумента);

	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаПоЦенамНоменклатуры()

// Функция формирует полный текст запроса по выпущенной продукции и учетной стоимости продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ИмяДокумента - Строка - Имя документа
//	ТекстЗапросаПоТабличнойЧастиПродукция - Строка - Текст запроса по табличной части документа
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету.
//
// Возвращаемое значение:
//   Запрос – Запрос по выпущенной продукции и учетной стоимости продукции.
//
Функция СформироватьТекстЗапросаПоВыпущеннойПродукцииИУчетнойСтоимости(
	СтруктураШапкиДокумента,
	ИмяДокумента,
	ТекстЗапросаПоТабличнойЧастиПродукция,
	УчетнаяПолитика,
	УчетнаяПолитикаБух
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	ТабличнаяЧасть.Спецификация,
	|	ТабличнаяЧасть.Заказ,
	|	ТабличнаяЧасть.ЗаказРегл,
	| 	
	|	//УчетнаяСтоимостьУУ СУММА( ЕСТЬNULL(СтоимостьПродукцииУУ.Сумма, 0) ) КАК СтоимостьУУ,
	|
	|	//УчетнаяСтоимостьБУ СУММА( ЕСТЬNULL(СтоимостьПродукцииБУ.Сумма, 0) ) КАК СтоимостьБУ,
	|	//УчетнаяСтоимостьБУ СУММА( ЕСТЬNULL(СтоимостьПродукцииБУ.СуммаНУ, 0) ) КАК СтоимостьНУ,
	|	//УчетнаяСтоимостьБУ СУММА( ЕСТЬNULL(СтоимостьПродукцииБУ.НДСВходящий, 0) ) КАК НДСВходящий,
	|	//УчетнаяСтоимостьБУ СУММА( ЕСТЬNULL(СтоимостьПродукцииБУ.НДСКредит, 0) ) КАК НДСКредит,
	| 	
	|	//ПлановаяСтоимостьУУ СУММА( ЕСТЬNULL(СтоимостьПродукцииУУ.Цена, 0) * ТабличнаяЧасть.Количество) КАК СтоимостьУУ,
	|	//ПлановаяСтоимостьБУ СУММА( ЕСТЬNULL(СтоимостьПродукцииБУ.Цена, 0) * ТабличнаяЧасть.Количество) КАК СтоимостьБУ,
	|	//ПлановаяСтоимостьБУ СУММА( ЕСТЬNULL(СтоимостьПродукцииБУ.Цена, 0) * ТабличнаяЧасть.Количество) КАК СтоимостьНУ,	
	|
	|	//ПлановаяСтоимостьБУ СУММА (ВЫБОР КОГДА ТабличнаяЧасть.НалоговоеНазначение.ВидНалоговойДеятельности <> ЗНАЧЕНИЕ(Справочник.ВидыНалоговойДеятельности.НеОблагаемая) ТОГДА
	|	//ПлановаяСтоимостьБУ 	ЕСТЬNULL(СтоимостьПродукцииБУ.Цена, 0) * ТабличнаяЧасть.Количество * 0.2
	|	//ПлановаяСтоимостьБУ ИНАЧЕ
	|	//ПлановаяСтоимостьБУ 	0
	|	//ПлановаяСтоимостьБУ КОНЕЦ) КАК НДСВходящий,
	|
	|	//ПлановаяСтоимостьБУ СУММА (ВЫБОР КОГДА ТабличнаяЧасть.НалоговоеНазначение.ВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) И ТабличнаяЧасть.НалоговоеНазначение.ВидНалоговойДеятельности <> ЗНАЧЕНИЕ(Справочник.ВидыНалоговойДеятельности.НеОблагаемая) ТОГДА
	|	//ПлановаяСтоимостьБУ 	ЕСТЬNULL(СтоимостьПродукцииБУ.Цена, 0) * ТабличнаяЧасть.Количество * 0.2
	|	//ПлановаяСтоимостьБУ ИНАЧЕ
	|	//ПлановаяСтоимостьБУ 	0
	|	//ПлановаяСтоимостьБУ КОНЕЦ) КАК НДСКредит,
	|
	|	//НулеваяСтоимостьУУ 0 КАК СтоимостьУУ,
	|
	|	//НулеваяСтоимостьБУ 0 КАК СтоимостьБУ,
	|	//НулеваяСтоимостьБУ 0 КАК СтоимостьНУ,
	|	//НулеваяСтоимостьБУ 0 КАК НДСВходящий,
	|	//НулеваяСтоимостьБУ 0 КАК НДСКредит,
	|
	|	СУММА(ТабличнаяЧасть.Количество) КАК Количество
	|	
	|ИЗ (
	|
	|//ТекстЗапросаПоТабличнойЧастиПродукция
	|
	|	) КАК ТабличнаяЧасть
	|
	|//СоединениеТекстЗапросаПоСтоимостиПродукцииУУ
	|
	|//СоединениеТекстЗапросаПоСтоимостиПродукцииБУ
	|
	|СГРУППИРОВАТЬ ПО
	// |	//ПлановаяСтоимостьБУ ТабличнаяЧасть.НалоговоеНазначение,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	ТабличнаяЧасть.Спецификация,
	|	ТабличнаяЧасть.Заказ,
	|	ТабличнаяЧасть.ЗаказРегл
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	ТабличнаяЧасть.Спецификация,
	|	ТабличнаяЧасть.Заказ,
	|	ТабличнаяЧасть.ЗаказРегл
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаПоТабличнойЧастиПродукция", ТекстЗапросаПоТабличнойЧастиПродукция);
	
	ТекстЗапросаПоСтоимостиПродукцииСКомментариями = СформироватьТекстЗапросаПоЗатратамНаВыпускДокумента(СтруктураШапкиДокумента);
	ТекстЗапросаПоЦенамНоменклатурыСКомментариями = СформироватьТекстЗапросаПоЦенамНоменклатуры(
		СтруктураШапкиДокумента,
		ИмяДокумента
		);
		
	РасчетПоПрямымЗатратамУУ = Ложь;
	РасчетПоПрямымЗатратамБУ = Ложь;
		
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаНЗП")
	 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеНЗП")
	 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.СписаниеНЗП")
	 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства")
	Тогда
		РасчетПоПрямымЗатратамУУ = Истина;
		РасчетПоПрямымЗатратамБУ = Истина;
	Иначе
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			РасчетПоПрямымЗатратамУУ = (УчетнаяПолитика.СпособРасчетаСебестоимостиВыпускаПоОперациям = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПрямымЗатратам);
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			РасчетПоПрямымЗатратамБУ = (УчетнаяПолитикаБух.СпособРасчетаСебестоимостиВыпускаПоОперациям = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПрямымЗатратам);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Если РасчетПоПрямымЗатратамУУ Тогда
			
			ТекстЗапросаПоСтоимостиПродукцииУУ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
				ТекстЗапросаПоСтоимостиПродукцииСКомментариями,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
			);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СоединениеТекстЗапросаПоСтоимостиПродукцииУУ", ТекстЗапросаПоСтоимостиПродукцииУУ);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УчетнаяСтоимостьУУ", "");
			
		ИначеЕсли УчетнаяПолитика.СпособРасчетаСебестоимостиВыпускаПоОперациям 
			= Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПлановойСебестоимости Тогда
			
			ТекстЗапросаПоЦенамНоменклатурыУУ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
				ТекстЗапросаПоЦенамНоменклатурыСКомментариями,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
			);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СоединениеТекстЗапросаПоСтоимостиПродукцииУУ", ТекстЗапросаПоЦенамНоменклатурыУУ);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПлановаяСтоимостьУУ", "");
			
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//НулеваяСтоимостьУУ", "");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если РасчетПоПрямымЗатратамБУ Тогда
			
			ТекстЗапросаПоСтоимостиПродукцииБУ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
				ТекстЗапросаПоСтоимостиПродукцииСКомментариями,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
			);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СоединениеТекстЗапросаПоСтоимостиПродукцииБУ", ТекстЗапросаПоСтоимостиПродукцииБУ);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УчетнаяСтоимостьБУ", "");
			
		ИначеЕсли УчетнаяПолитикаБух.СпособРасчетаСебестоимостиВыпускаПоОперациям 
			= Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПлановойСебестоимости Тогда
			
			ТекстЗапросаПоЦенамНоменклатурыБУ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
				ТекстЗапросаПоЦенамНоменклатурыСКомментариями,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
			);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СоединениеТекстЗапросаПоСтоимостиПродукцииБУ", ТекстЗапросаПоЦенамНоменклатурыБУ);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПлановаяСтоимостьБУ", "");
			
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//НулеваяСтоимостьБУ", "");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпущеннойПродукцииИУчетнойСтоимости()

// Функция формирует запрос по выпущенной продукции и учетной стоимости продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ИмяДокумента - Строка - Имя документа
//	ТекстЗапросаПоТабличнойЧастиПродукция - Строка - Текст запроса по табличной части документа
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету.
//
// Возвращаемое значение:
//   Запрос – Запрос по выпущенной продукции и учетной стоимости продукции.
//
Функция СформироватьЗапросПоВыпущеннойПродукцииИУчетнойСтоимости(
	СтруктураШапкиДокумента,
	ИмяДокумента,
	ТекстЗапросаПоТабличнойЧастиПродукция,
	УчетнаяПолитика,
	УчетнаяПолитикаБух
	)
	
	Запрос = Новый Запрос;
	
	Если Не ПустаяСтрока(ТекстЗапросаПоТабличнойЧастиПродукция) Тогда
	
		ТекстЗапроса = СформироватьТекстЗапросаПоВыпущеннойПродукцииИУчетнойСтоимости(
			СтруктураШапкиДокумента,
			ИмяДокумента,
			ТекстЗапросаПоТабличнойЧастиПродукция,
			УчетнаяПолитика,
			УчетнаяПолитикаБух
			);
			
		Запрос.Текст = ТекстЗапроса;
		
		УстановитьПараметрыЗапросаПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			УчетнаяПолитика,
			УчетнаяПолитикаБух,
			Запрос
			);
			
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоВыпущеннойПродукцииИУчетнойСтоимости()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ЗАПРОСОВ ПО НАПРАВЛЕНИЯМ ВЫПУСКА ПРОДУКЦИИ

// Формирует текст запроса по табличной части "Продукция" документа "Отчет производства за смену".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииНаработкаОтчетПроизводстваЗаСмену()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТабличнаяЧасть.ВидВыпуска,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	ТабличнаяЧасть.Спецификация,
	|	ТабличнаяЧасть.СчетЗатрат,
	|
	|	ТабличнаяЧасть.НалоговоеНазначение,
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|		
	|	//ТекстЗапросаЗаказУпр
	|	//ТекстЗапросаЗаказРегл
	|
	|	ТабличнаяЧасть.Номенклатура КАК Продукция,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияПродукции,
	|
	|	Неопределено КАК Проект,
	|	&КодОперацииВыпускПродукцииНаСклад КАК КодОперации,
	|
	|	ВЫБОР КОГДА ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ТабличнаяЧасть.Заказ.ВидОперации = &ВидОперацииПереработка ТОГДА
	|		&ПродукцияИзДавальческогоСырья
	|	ИНАЧЕ
	|      	&СобственнаяПродукция
	|	КОНЕЦ КАК ВариантВыпускаПродукции,
	|		
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|		
	|	(КоличествоДоделка * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК КоличествоДоделка
	|ИЗ	
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ТабличнаяЧасть
	|	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.ВидВыпуска = &ВидВыпускаНаработка
	|	И ТабличнаяЧасть.Ссылка.ИспользоватьНаработку
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказ();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииНаработкаОтчетПроизводстваЗаСмену()

// Формирует текст запроса по табличной части "Продукция" документа "Отчет производства за смену".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииНаСкладОтчетПроизводстваЗаСмену()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	ТабличнаяЧасть.Спецификация,
	|	ТабличнаяЧасть.СчетЗатрат,
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|		
	|	//ТекстЗапросаЗаказУпр
	|	//ТекстЗапросаЗаказРегл
	|
	|	ТабличнаяЧасть.Номенклатура КАК Продукция,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияПродукции,
	|
	|	ТабличнаяЧасть.Ссылка КАК ДокументВыпуска,
	|	Неопределено КАК СтатусМатериальныхЗатрат,
	|	&ВидПоступленияНаСклад КАК ВидПоступления,
	|	ТабличнаяЧасть.Ссылка.Склад КАК СкладПолучатель,
	|	Неопределено КАК ПриходныйОрдер,
	|	Ложь КАК БезПраваПродажи,
	|	ТабличнаяЧасть.ЗаказРезерв,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.ВидЗаказа, Неопределено) КАК ВнутреннийЗаказВидЗаказа,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.Заказчик, Неопределено) КАК ВнутреннийЗаказЗаказчик,
	|	ТабличнаяЧасть.ЗаказРезерв КАК ЗаказПолучатель,
	|	ТабличнаяЧасть.ЗаказРезерв КАК ЗаказПолучательРегл,
	|
	|	ТабличнаяЧасть.ЗаказРезерв.ВидОперации КАК ВидОперации,
	|	ЕСТЬNULL(
	|		ТабличнаяЧасть.ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|		Ложь
	|	) КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|
	|	ТабличнаяЧасть.Качество,
	|	ТабличнаяЧасть.СтатусПартии,
	|
	|	ТабличнаяЧасть.Счет КАК СчетДт,
	|	ТабличнаяЧасть.Счет.Количественный КАК СчетДтКоличественный,
	|
	|	Неопределено КАК ПодразделениеПолучатель,
	|	Неопределено КАК ПодразделениеОрганизацииПолучатель,
	|	
	|	Неопределено КАК Проект,
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьНаработку ТОГДА
	|		ТабличнаяЧасть.ВидВыпуска
	|	ИНАЧЕ
	|		&ВидВыпускаВыпуск
	|	КОНЕЦ КАК ВидВыпуска,
	|
	|	ВЫБОР КОГДА ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ТабличнаяЧасть.Заказ.ВидОперации = &ВидОперацииПереработка ТОГДА
	|		&ПродукцияИзДавальческогоСырья
	|	ИНАЧЕ
	|      	&СобственнаяПродукция
	|	КОНЕЦ КАК ВариантВыпускаПродукции,
	|		
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|		
	|	(КоличествоДоделка * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК КоличествоДоделка
	|ИЗ	
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ТабличнаяЧасть
	|		
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И Не ТабличнаяЧасть.Номенклатура.Услуга
	|	И (ТабличнаяЧасть.НаправлениеВыпуска = &НаправлениеВыпускаНаСклад
	|		И ТабличнаяЧасть.Ссылка.ИспользоватьНаправленияВыпуска
	|		ИЛИ
	|		Не ТабличнаяЧасть.Ссылка.ИспользоватьНаправленияВыпуска)
	|	И (ТабличнаяЧасть.ВидВыпуска = &ВидВыпускаВыпуск
	|		И ТабличнаяЧасть.Ссылка.ИспользоватьНаработку
	|		ИЛИ
	|		Не ТабличнаяЧасть.Ссылка.ИспользоватьНаработку)
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказ();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииНаСкладОтчетПроизводстваЗаСмену()

// Формирует текст запроса по табличной части "Продукция" документа "Отчет производства за смену".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииНаЗатратыОтчетПроизводстваЗаСмену()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.Услуга КАК Услуга,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.Номенклатура.ВестиОперативныйУчетОстатковНЗП КАК ВестиОперативныйУчетОстатковНЗП,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	ТабличнаяЧасть.Спецификация,
	|	ТабличнаяЧасть.СчетЗатрат,
	|
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТабличнаяЧасть.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|	ТабличнаяЧасть.Номенклатура КАК Затрата,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияЗатраты,
	|	Неопределено КАК СпособРаспределенияЗатрат,
	|		
	|	//ТекстЗапросаЗаказУпр
	|	//ТекстЗапросаЗаказРегл
	|
	|	ТабличнаяЧасть.Номенклатура КАК Продукция,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияПродукции,
	|
	|	ТабличнаяЧасть.СтатьяЗатратПолучатель КАК СтатьяЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатратПолучатель.ХарактерЗатрат КАК ХарактерЗатрат,
	|	ТабличнаяЧасть.Ссылка КАК ДокументВыпуска,
	|	ТабличнаяЧасть.ПодразделениеПолучатель,
	|	ТабличнаяЧасть.ПодразделениеОрганизацииПолучатель,
	|	ТабличнаяЧасть.НоменклатурнаяГруппаПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатратПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатратПолучатель.ВидЗатрат КАК ВидЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатратПолучатель.ХарактерЗатрат КАК ХарактерЗатратПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатратПолучатель.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	ТабличнаяЧасть.КонечнаяПродукция,
	|	ТабличнаяЧасть.ЗаказВыпуска,
	|		
	|	//ТекстЗапросаЗаказПолучательУпр
	|	//ТекстЗапросаЗаказПолучательРегл
	|		
	|	ТабличнаяЧасть.Продукция КАК ПродукцияПолучатель,
	|	ТабличнаяЧасть.ХарактеристикаПродукции КАК ХарактеристикаПродукцииПолучатель,
	|	ТабличнаяЧасть.СерияПродукции КАК СерияПродукцииПолучатель,
	|		
	|	ТабличнаяЧасть.СчетЗатратПолучатель КАК СчетДт,
	|	ТабличнаяЧасть.СчетЗатратПолучатель.Количественный КАК СчетДтКоличественный,
	|
	|	ТабличнаяЧасть.Субконто1,
	|	ТабличнаяЧасть.Субконто2,
	|	ТабличнаяЧасть.Субконто3,
	|
	|	ТабличнаяЧасть.Субконто1 КАК СубконтоДт1,
	|	ТабличнаяЧасть.Субконто2 КАК СубконтоДт2,
	|	ТабличнаяЧасть.Субконто3 КАК СубконтоДт3,
	|
	|	ТабличнаяЧасть.ОбъектСтроительства,
	|	ТабличнаяЧасть.Проект,
	|
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьНаработку ТОГДА
	|		ТабличнаяЧасть.ВидВыпуска
	|	ИНАЧЕ
	|		&ВидВыпускаВыпуск
	|	КОНЕЦ КАК ВидВыпуска,
	|
	|	ВЫБОР КОГДА ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ТабличнаяЧасть.Заказ.ВидОперации = &ВидОперацииПереработка ТОГДА
	|		&ПродукцияИзДавальческогоСырья
	|	ИНАЧЕ
	|      	&СобственнаяПродукция
	|	КОНЕЦ КАК ВариантВыпускаПродукции,
	|		
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|		
	|	(КоличествоДоделка * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК КоличествоДоделка
	|ИЗ	
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ТабличнаяЧасть
	|	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.НаправлениеВыпуска = &НаправлениеВыпускаНаЗатраты
	|	И ТабличнаяЧасть.Ссылка.ИспользоватьНаправленияВыпуска
	|	И (ТабличнаяЧасть.ВидВыпуска = &ВидВыпускаВыпуск
	|		И ТабличнаяЧасть.Ссылка.ИспользоватьНаработку
	|		ИЛИ
	|		Не ТабличнаяЧасть.Ссылка.ИспользоватьНаработку)
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказ();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказПолучатель();
	ТекстЗапросаДляРеквизитаЗаказПолучатель = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказПолучательРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказПолучательУпр", ТекстЗапросаДляРеквизитаЗаказПолучатель + " КАК ЗаказПолучатель,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказПолучательРегл", ТекстЗапросаДляРеквизитаЗаказПолучательРегл + " КАК ЗаказПолучательРегл,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииНаЗатратыОтчетПроизводстваЗаСмену()

// Формирует текст запроса по табличной части "Направления списания" документа "Отчет производства за смену".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииНаЗатратыСписокОтчетПроизводстваЗаСмену()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТабличнаяЧастьПродукция.НомерСтроки,
	|	ТабличнаяЧастьПродукция.НоменклатурнаяГруппа,
	|	ТабличнаяЧастьПродукция.Номенклатура,
	|	ТабличнаяЧастьПродукция.Номенклатура.Услуга КАК Услуга,
	|	ТабличнаяЧастьПродукция.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧастьПродукция.Номенклатура.ВестиОперативныйУчетОстатковНЗП КАК ВестиОперативныйУчетОстатковНЗП,
	|	ТабличнаяЧастьПродукция.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧастьПродукция.СерияНоменклатуры,
	|	ТабличнаяЧастьПродукция.Спецификация,
	|	ТабличнаяЧастьПродукция.СчетЗатрат,
	|	ТабличнаяЧастьПродукция.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТабличнаяЧасть.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|	
	|	ТабличнаяЧастьПродукция.Номенклатура КАК Затрата,
	|	ТабличнаяЧастьПродукция.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ТабличнаяЧастьПродукция.СерияНоменклатуры КАК СерияЗатраты,
	|	Неопределено КАК СпособРаспределенияЗатрат,
	|
	|	ТабличнаяЧастьПродукция.КонечнаяПродукция,
	|	ТабличнаяЧастьПродукция.ЗаказВыпуска,	
	|	
	|	//ТекстЗапросаЗаказУпр
	|	//ТекстЗапросаЗаказРегл
	|
	|	ТабличнаяЧастьПродукция.Номенклатура КАК Продукция,
	|	ТабличнаяЧастьПродукция.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	ТабличнаяЧастьПродукция.СерияНоменклатуры КАК СерияПродукции,
	|
	|	ТабличнаяЧасть.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	|	ТабличнаяЧасть.Ссылка КАК ДокументВыпуска,
	|	ТабличнаяЧасть.Подразделение КАК ПодразделениеПолучатель,
	|	ТабличнаяЧасть.ПодразделениеОрганизации КАК ПодразделениеОрганизацииПолучатель,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатрат КАК СтатьяЗатратПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатратПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	
	|	//ТекстЗапросаЗаказПолучательУпр
	|	//ТекстЗапросаЗаказПолучательРегл
	|		
	|	ТабличнаяЧасть.Продукция КАК ПродукцияПолучатель,
	|	ТабличнаяЧасть.ХарактеристикаПродукции КАК ХарактеристикаПродукцииПолучатель,
	|	ТабличнаяЧасть.СерияПродукции КАК СерияПродукцииПолучатель,
	|		
	|	ТабличнаяЧасть.СчетЗатрат КАК СчетДт,
	|	ТабличнаяЧасть.СчетЗатрат.Количественный КАК СчетДтКоличественный,
	|
	|	ТабличнаяЧасть.Субконто1,
	|	ТабличнаяЧасть.Субконто2,
	|	ТабличнаяЧасть.Субконто3,
	|
	|	ТабличнаяЧасть.Субконто1 КАК СубконтоДт1,
	|	ТабличнаяЧасть.Субконто2 КАК СубконтоДт2,
	|	ТабличнаяЧасть.Субконто3 КАК СубконтоДт3,
	|
	|	ТабличнаяЧасть.ОбъектСтроительства,
	|	ТабличнаяЧасть.Проект,
	|
	|	ВЫБОР КОГДА ТабличнаяЧастьПродукция.Ссылка.ИспользоватьНаработку ТОГДА
	|		ТабличнаяЧастьПродукция.ВидВыпуска
	|	ИНАЧЕ
	|		&ВидВыпускаВыпуск
	|	КОНЕЦ КАК ВидВыпуска,
	|
	|	ВЫБОР КОГДА ТабличнаяЧастьПродукция.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ТабличнаяЧастьПродукция.Заказ.ВидОперации = &ВидОперацииПереработка ТОГДА
	|		&ПродукцияИзДавальческогоСырья
	|	ИНАЧЕ
	|	   &СобственнаяПродукция
	|	КОНЕЦ КАК ВариантВыпускаПродукции,
	|		
	|	(ТабличнаяЧастьПродукция.Количество * 
	|	ВЫБОР КОГДА Не ТабличнаяЧастьПродукция.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И ТабличнаяЧастьПродукция.Коэффициент <> 0 ТОГДА 
	|		ТабличнаяЧастьПродукция.Коэффициент /ТабличнаяЧастьПродукция.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|		
	|	(ТабличнаяЧастьПродукция.КоличествоДоделка * 
	|	ВЫБОР КОГДА Не ТабличнаяЧастьПродукция.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И ТабличнаяЧастьПродукция.Коэффициент <> 0 ТОГДА 
	|		ТабличнаяЧастьПродукция.Коэффициент /ТабличнаяЧастьПродукция.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК КоличествоДоделка,
	|	НаправленияСписанияВсего.СуммаКоэффициент,
	|	ТабличнаяЧасть.КлючСвязи,
	|	ТабличнаяЧасть.Коэффициент
	|ИЗ	
	|	Документ.ОтчетПроизводстваЗаСмену.НаправленияСписания КАК ТабличнаяЧасть
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ТабличнаяЧасть.Ссылка КАК Ссылка,
	|			ТабличнаяЧасть.НомерСтроки,
	|			ТабличнаяЧасть.КлючСвязи,
	|			ТабличнаяЧасть.НоменклатурнаяГруппа,
	|			ТабличнаяЧасть.Заказ,
	|			ТабличнаяЧасть.Номенклатура,
	|			ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|			ТабличнаяЧасть.СерияНоменклатуры,
	|			ТабличнаяЧасть.Спецификация,
	|			ТабличнаяЧасть.СчетЗатрат,
	|			ТабличнаяЧасть.НалоговоеНазначение,
	|			ТабличнаяЧасть.ВидВыпуска,
	|			ТабличнаяЧасть.КонечнаяПродукция,
	|			ТабличнаяЧасть.ЗаказВыпуска,
	|			ТабличнаяЧасть.Коэффициент,
	|			ТабличнаяЧасть.Количество,
	|			ТабличнаяЧасть.КоличествоДоделка
	|		ИЗ
	|			Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ТабличнаяЧасть
	|		ГДЕ
	|			ТабличнаяЧасть.Ссылка = &Ссылка
	|			И ТабличнаяЧасть.Ссылка.ИспользоватьНаправленияВыпуска
	|			И ТабличнаяЧасть.НаправлениеВыпуска = &НаправлениеВыпускаНаЗатратыСписок
	|			И (ТабличнаяЧасть.ВидВыпуска = &ВидВыпускаВыпуск
	|				И ТабличнаяЧасть.Ссылка.ИспользоватьНаработку
	|				ИЛИ
	|				Не ТабличнаяЧасть.Ссылка.ИспользоватьНаработку)
	|			
	|		) КАК ТабличнаяЧастьПродукция
	|	ПО
	|		ТабличнаяЧастьПродукция.КлючСвязи = ТабличнаяЧасть.КлючСвязи
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ТабличнаяЧасть.КлючСвязи,
	|			СУММА(ТабличнаяЧасть.Коэффициент) КАК СуммаКоэффициент
	|		ИЗ
	|			Документ.ОтчетПроизводстваЗаСмену.НаправленияСписания КАК ТабличнаяЧасть
	|		ГДЕ
	|			ТабличнаяЧасть.Ссылка = &Ссылка
	|			И ТабличнаяЧасть.Коэффициент <> 0
	|			И ТабличнаяЧасть.Ссылка.ИспользоватьНаправленияВыпуска
	|		СГРУППИРОВАТЬ ПО
	|			ТабличнаяЧасть.КлючСвязи
	|			
	|		) КАК НаправленияСписанияВсего
	|	ПО
	|		НаправленияСписанияВсего.КлючСвязи = ТабличнаяЧасть.КлючСвязи
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Коэффициент <> 0
	|	И ТабличнаяЧасть.Ссылка.ИспользоватьНаправленияВыпуска
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьПродукция.НомерСтроки
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказ();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказПолучательУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК ЗаказПолучатель,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказПолучательРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказПолучательРегл,");
	
	ТекстЗапросаДляРеквизитаЗаказ = СтрЗаменить(ТекстЗапросаДляРеквизитаЗаказ, "ТабличнаяЧасть", "ТабличнаяЧастьПродукция");
	ТекстЗапросаДляРеквизитаЗаказРегл = СтрЗаменить(ТекстЗапросаДляРеквизитаЗаказРегл, "ТабличнаяЧасть", "ТабличнаяЧастьПродукция");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииНаЗатратыСписокОтчетПроизводстваЗаСмену()

// Формирует текст запроса по табличной части "Продукция" документа "Поступление товаров из переработки".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииНаСкладПоступлениеТоваровИзПереработки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	ТабличнаяЧасть.Спецификация,
	|	ТабличнаяЧасть.СчетЗатрат,
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|		
	|	//ТекстЗапросаЗаказУпр
	|	//ТекстЗапросаЗаказРегл
	|
	|	ТабличнаяЧасть.Номенклатура КАК Продукция,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияПродукции,
	|
	|	ТабличнаяЧасть.Ссылка КАК ДокументВыпуска,
	|	Неопределено КАК СтатусМатериальныхЗатрат,
	|	ТабличнаяЧасть.Ссылка.ВидПоступления КАК ВидПоступления,
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ВидПоступления = &ВидПоступленияНаСклад Тогда
	|		ТабличнаяЧасть.Ссылка.СкладОрдер
	|	КОГДА ТабличнаяЧасть.Ссылка.ВидПоступления = &ВидПоступленияПоОрдеру Тогда
	|		ТабличнаяЧасть.Ссылка.СкладОрдер.Склад
	|	ИНАЧЕ
	|		ТабличнаяЧасть.Ссылка.СкладОрдер
	|	КОНЕЦ КАК СкладПолучатель,
	|	ТабличнаяЧасть.Ссылка.СкладОрдер КАК ПриходныйОрдер,
	|	ЕСТЬNULL(ТабличнаяЧасть.Ссылка.СкладОрдер.БезПраваПродажи, Ложь) КАК БезПраваПродажи,
	|
	|	ТабличнаяЧасть.ЗаказРезерв,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.ВидЗаказа, Неопределено) КАК ВнутреннийЗаказВидЗаказа,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.Заказчик, Неопределено) КАК ВнутреннийЗаказЗаказчик,
	|	ТабличнаяЧасть.ЗаказРезерв КАК ЗаказПолучатель,
	|	ТабличнаяЧасть.ЗаказРезерв КАК ЗаказПолучательРегл,
	|
	|	ТабличнаяЧасть.ЗаказРезерв.ВидОперации КАК ВидОперации,
	|	ЕСТЬNULL(
	|		ТабличнаяЧасть.ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|		Ложь
	|	) КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|
	|	ТабличнаяЧасть.Качество,
	|	&СтатусПартииПродукция КАК СтатусПартии,
	|
	|	ТабличнаяЧасть.Счет КАК СчетДт,
	|	ТабличнаяЧасть.Счет.Количественный КАК СчетДтКоличественный,
	|
	|	Неопределено КАК ПодразделениеПолучатель,
	|	Неопределено КАК ПодразделениеОрганизацииПолучатель,
	|	
	|	Неопределено КАК Проект,
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|	&ПродукцияСтороннегоПереработчика КАК ВариантВыпускаПродукции,
	|		
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|		
	|	0 КАК КоличествоДоделка
	|ИЗ	
	|	Документ.ПоступлениеТоваровИзПереработки.Продукция КАК ТабличнаяЧасть
	|		
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И Не ТабличнаяЧасть.Номенклатура.Услуга
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказ();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииНаСкладПоступлениеТоваровИзПереработки()

// Формирует текст запроса для документа "Комплектация номенклатуры (сборка)".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииНаСкладКомплектацияНоменклатурыСборка()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Док.Организация КАК Организация,
	|	Док.Подразделение КАК Подразделение,
	|	Док.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	0 КАК НомерСтроки,
	|	Док.НоменклатурнаяГруппа,
	|	Док.Номенклатура,
	|	Док.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	Док.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Спецификация,
	|	Док.СчетЗатрат,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначение,
	|	Док.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|		
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|			И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И Док.Заказ <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|		
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|			И Док.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		Док.Заказ
	|	КОГДА Док.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И Док.Заказ <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		Док.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|	Док.Номенклатура КАК Продукция,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	Док.СерияНоменклатуры КАК СерияПродукции,
	|
	|	Док.Ссылка КАК ДокументВыпуска,
	|	Неопределено КАК СтатусМатериальныхЗатрат,
	|	&ВидПоступленияНаСклад КАК ВидПоступления,
	|	Док.Склад КАК СкладПолучатель,
	|	Неопределено КАК ПриходныйОрдер,
	|	Ложь КАК БезПраваПродажи,
	|	Док.ЗаказРезерв,
	|	ЕСТЬNULL(Док.ЗаказРезерв.ВидЗаказа, Неопределено) КАК ВнутреннийЗаказВидЗаказа,
	|	ЕСТЬNULL(Док.ЗаказРезерв.Заказчик, Неопределено) КАК ВнутреннийЗаказЗаказчик,
	|	Док.ЗаказРезерв КАК ЗаказПолучатель,
	|	Док.ЗаказРезерв КАК ЗаказПолучательРегл,
	|
	|	Док.ЗаказРезерв.ВидОперации КАК ВидОперации,
	|	ЕСТЬNULL(
	|		Док.ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|		Ложь
	|	) КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|
	|	&КачествоНовый КАК Качество,
	|	Док.СтатусПартии,
	|
	|	Док.СчетУчетаБУ КАК СчетДт,
	|	Док.СчетУчетаБУ.Количественный КАК СчетДтКоличественный,
	|
	|	Неопределено КАК ПодразделениеПолучатель,
	|	Неопределено КАК ПодразделениеОрганизацииПолучатель,
	|	
	|	Неопределено КАК Проект,
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|
	|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И Док.Заказ.ВидОперации = &ВидОперацииПереработка ТОГДА
	|		&ПродукцияИзДавальческогоСырья
	|	КОГДА Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика) ТОГДА
	|		&ПродукцияСтороннегоПереработчика
	|	ИНАЧЕ
	|      	&СобственнаяПродукция
	|	КОНЕЦ КАК ВариантВыпускаПродукции,
	|		
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|		
	|	0 КАК КоличествоДоделка
	|ИЗ	
	|	Документ.КомплектацияНоменклатуры КАК Док
	|		
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И Не Док.Номенклатура.Услуга
	|		
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказ();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииНаСкладКомплектацияНоменклатурыСборка()

// Формирует текст запроса для документа "Комплектация номенклатуры (разборка)".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииНаСкладКомплектацияНоменклатурыРазборка()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.Ссылка.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	ТабличнаяЧасть.Ссылка.Спецификация,
	|	ТабличнаяЧасть.Ссылка.СчетЗатрат,
	|	ТабличнаяЧасть.Ссылка.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТабличнаяЧасть.Ссылка.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|		
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|			И ТабличнаяЧасть.Ссылка.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		ТабличнаяЧасть.Ссылка.Заказ
	|	КОГДА ТабличнаяЧасть.Ссылка.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И ТабличнаяЧасть.Ссылка.Заказ <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		ТабличнаяЧасть.Ссылка.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|		
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|			И ТабличнаяЧасть.Ссылка.Заказ <> &ПустойЗаказПокупателя ТОГДА
	|		ТабличнаяЧасть.Ссылка.Заказ
	|	КОГДА ТабличнаяЧасть.Ссылка.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И ТабличнаяЧасть.Ссылка.Заказ <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		ТабличнаяЧасть.Ссылка.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|	ТабличнаяЧасть.Номенклатура КАК Продукция,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияПродукции,
	|
	|	ТабличнаяЧасть.Ссылка КАК ДокументВыпуска,
	|	Неопределено КАК СтатусМатериальныхЗатрат,
	|	&ВидПоступленияНаСклад КАК ВидПоступления,
	|	ТабличнаяЧасть.Ссылка.Склад КАК СкладПолучатель,
	|	Неопределено КАК ПриходныйОрдер,
	|	Ложь КАК БезПраваПродажи,
	|	ТабличнаяЧасть.Ссылка.ЗаказРезерв,
	|	ЕСТЬNULL(ТабличнаяЧасть.Ссылка.ЗаказРезерв.ВидЗаказа, Неопределено) КАК ВнутреннийЗаказВидЗаказа,
	|	ЕСТЬNULL(ТабличнаяЧасть.Ссылка.ЗаказРезерв.Заказчик, Неопределено) КАК ВнутреннийЗаказЗаказчик,
	|	ТабличнаяЧасть.Ссылка.ЗаказРезерв КАК ЗаказПолучатель,
	|	ТабличнаяЧасть.Ссылка.ЗаказРезерв КАК ЗаказПолучательРегл,
	|
	|	ТабличнаяЧасть.Ссылка.ЗаказРезерв.ВидОперации КАК ВидОперации,
	|	ЕСТЬNULL(
	|		ТабличнаяЧасть.Ссылка.ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|		Ложь
	|	) КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|
	|	&КачествоНовый КАК Качество,
	|	ТабличнаяЧасть.СтатусПартии,
	|
	|	ТабличнаяЧасть.СчетУчетаБУ КАК СчетДт,
	|	ТабличнаяЧасть.СчетУчетаБУ.Количественный КАК СчетДтКоличественный,
	|
	|	Неопределено КАК ПодразделениеПолучатель,
	|	Неопределено КАК ПодразделениеОрганизацииПолучатель,
	|	
	|	Неопределено КАК Проект,
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ТабличнаяЧасть.Ссылка.Заказ.ВидОперации = &ВидОперацииПереработка ТОГДА
	|		&ПродукцияИзДавальческогоСырья
	|	КОГДА ТабличнаяЧасть.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика) ТОГДА
	|		&ПродукцияСтороннегоПереработчика
	|	ИНАЧЕ
	|      	&СобственнаяПродукция
	|	КОНЕЦ КАК ВариантВыпускаПродукции,
	|		
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|		
	|	0 КАК КоличествоДоделка
	|ИЗ	
	|	Документ.КомплектацияНоменклатуры.Комплектующие КАК ТабличнаяЧасть
	|		
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И Не ТабличнаяЧасть.Номенклатура.Услуга
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказ();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииНаСкладКомплектацияНоменклатурыРазборка()

// Формирует текст запроса по табличной части "Услуги" документа "Акт об оказании производственных услуг".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоВыпускуВнешниеУслугиАктОбОказанииПроизводственныхУслуг()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	&ПустаяХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	&ПустаяСерияНоменклатуры КАК СерияНоменклатуры,
	|	ТабличнаяЧасть.Спецификация,
	|	ТабличнаяЧасть.СчетЗатрат,
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ ТОГДА ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность) ИНАЧЕ ТабличнаяЧасть.НалоговоеНазначениеДоходовИЗатрат КОНЕЦ КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|		
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|			И ТабличнаяЧасть.Ссылка.Сделка ССЫЛКА Документ.ЗаказПокупателя 
	|			И ТабличнаяЧасть.Ссылка.Сделка <> &ПустойЗаказПокупателя ТОГДА
	|		ТабличнаяЧасть.Ссылка.Сделка
	|	КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|			И ТабличнаяЧасть.ЗаказВыпуска ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И ТабличнаяЧасть.ЗаказВыпуска <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		ТабличнаяЧасть.ЗаказВыпуска
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|		
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|			И ТабличнаяЧасть.Ссылка.Сделка ССЫЛКА Документ.ЗаказПокупателя 
	|			И ТабличнаяЧасть.Ссылка.Сделка <> &ПустойЗаказПокупателя ТОГДА
	|		ТабличнаяЧасть.Ссылка.Сделка
	|	КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|			И ТабличнаяЧасть.ЗаказВыпуска ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И ТабличнаяЧасть.ЗаказВыпуска <> &ПустойЗаказНаПроизводство
	|			И &УчетЗатратПоЗаказамНаПроизводствоРегл ТОГДА
	|		ТабличнаяЧасть.ЗаказВыпуска
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ЗаказРегл,
	|
	|	ТабличнаяЧасть.Номенклатура КАК Продукция,
	|	Неопределено КАК ХарактеристикаПродукции,
	|	Неопределено КАК СерияПродукции,
	|
	|	ТабличнаяЧасть.Ссылка КАК ДокументВыпуска,
	|	Неопределено КАК СтатусМатериальныхЗатрат,
	|	Неопределено КАК ЗаказПолучатель,
	|	Неопределено КАК ЗаказПолучательРегл,
	|		
	|	ТабличнаяЧасть.СхемаРеализации.СчетСебестоимости КАК СчетДт,
	|	ТабличнаяЧасть.СхемаРеализации.СчетСебестоимости.Количественный КАК СчетДтКоличественный,
	|	ТабличнаяЧасть.Номенклатура.НоменклатурнаяГруппа КАК СубконтоДт1,
	|	ТабличнаяЧасть.СхемаРеализации.СубконтоСебестоимости2 КАК СубконтоДт2,
	|	ТабличнаяЧасть.СхемаРеализации.СубконтоСебестоимости3 КАК СубконтоДт3,
	|
	|	Неопределено КАК ПодразделениеПолучатель,
	|	Неопределено КАК ПодразделениеОрганизацииПолучатель,
	|
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|	&СобственнаяПродукция КАК ВариантВыпускаПродукции,
	|
	|	Неопределено КАК ОбъектСтроительства,
	|	ЕСТЬNULL(ПроектыНоменклатуры.Проект, &ПустойПроект) КАК Проект,
	|		
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|		
	|	(КоличествоДоделка * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК КоличествоДоделка
	|ИЗ	
	|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК ТабличнаяЧасть
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(&КонДата, 
	|			НоменклатураПроекта В (
	|				ВЫБРАТЬ 
	|					Номенклатура 
	|				ИЗ 
	|					Документ.АктОбОказанииПроизводственныхУслуг.Услуги 
	|				ГДЕ 
	|					Ссылка = &Ссылка
	|				)
	|		) КАК ПроектыНоменклатуры
	|	ПО 
	|		ТабличнаяЧасть.Номенклатура = ПроектыНоменклатуры.НоменклатураПроекта
	|	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуВнешниеУслугиАктОбОказанииПроизводственныхУслуг()

// Формирует текст запроса по табличной части "Материалы" документа "Корректировка незавершенного производства".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииКорректировкаНЗП()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.Услуга КАК Услуга,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.Номенклатура.ВестиОперативныйУчетОстатковНЗП КАК ВестиОперативныйУчетОстатковНЗП,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	&ПустаяСпецификация КАК Спецификация,
	|	ТабличнаяЧасть.СчетЗатрат,
	|	ТабличнаяЧасть.НалоговоеНазначение           КАК НалоговоеНазначение,
	|	ТабличнаяЧасть.НалоговоеНазначениеПолучатель КАК НалоговоеНазначениеПолучатель,
	|	Ложь КАК НеКорректироватьНУ,
	|
	|	ТабличнаяЧасть.Номенклатура КАК Затрата,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияЗатраты,
	|	Неопределено КАК СпособРаспределенияЗатрат,
	|		
	|	//ТекстЗапросаЗаказУпр
	|	//ТекстЗапросаЗаказРегл
	|
	|	ТабличнаяЧасть.Номенклатура КАК Продукция,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияПродукции,
	|
	|	ТабличнаяЧасть.СтатьяЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	|	ТабличнаяЧасть.Ссылка КАК ДокументВыпуска,
	|	ТабличнаяЧасть.ПодразделениеПолучатель,
	|	ТабличнаяЧасть.ПодразделениеОрганизацииПолучатель,
	|	ТабличнаяЧасть.НоменклатурнаяГруппаПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатратПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатратПолучатель.ВидЗатрат КАК ВидЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатратПолучатель.ХарактерЗатрат КАК ХарактерЗатратПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатратПолучатель.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	Неопределено КАК КонечнаяПродукция,
	|	Неопределено КАК ЗаказВыпуска,
	|		
	|	//ТекстЗапросаЗаказПолучательУпр
	|	//ТекстЗапросаЗаказПолучательРегл
	|		
	|	Неопределено КАК ПродукцияПолучатель,
	|	Неопределено КАК ХарактеристикаПродукцииПолучатель,
	|	Неопределено КАК СерияПродукцииПолучатель,
	|		
	|	ТабличнаяЧасть.СчетЗатратПолучатель КАК СчетДт,
	|	ТабличнаяЧасть.СчетЗатратПолучатель.Количественный КАК СчетДтКоличественный,
	|
	|	Неопределено КАК Субконто1,
	|	Неопределено КАК Субконто2,
	|	Неопределено КАК Субконто3,
	|
	|	Неопределено КАК СубконтоДт1,
	|	Неопределено КАК СубконтоДт2,
	|	Неопределено КАК СубконтоДт3,
	|	Неопределено КАК ОбъектСтроительства,
	|	Неопределено КАК Проект,
	|
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|	&СобственнаяПродукция КАК ВариантВыпускаПродукции,
	|
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|	0 КАК КоличествоДоделка,
	|	Сумма КАК СтоимостьУУ,
	|	СуммаРегл КАК СтоимостьБУ,
	|	СуммаНал  КАК СтоимостьНУ,
	|	ТабличнаяЧасть.СуммаНДС КАК НДСВходящий,	
	|	ТабличнаяЧасть.СуммаНДСКредит КАК НДСКредит
	|
	|ИЗ	
	|	Документ.КорректировкаНЗП.Материалы КАК ТабличнаяЧасть
	|	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказКорректировкаНЗП();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказПолучательКорректировкаНЗП();
	ТекстЗапросаДляРеквизитаЗаказПолучатель = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказПолучательРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказПолучательУпр", ТекстЗапросаДляРеквизитаЗаказПолучатель + " КАК ЗаказПолучатель,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказПолучательРегл", ТекстЗапросаДляРеквизитаЗаказПолучательРегл + " КАК ЗаказПолучательРегл,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииКорректировкаНЗП()

// Формирует текст запроса по табличной части "Материалы" документа "Оприходование незавершенного производства".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииОприходованиеНЗП()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.Услуга КАК Услуга,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.Номенклатура.ВестиОперативныйУчетОстатковНЗП КАК ВестиОперативныйУчетОстатковНЗП,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	&ПустаяСпецификация КАК Спецификация,
	|	ТабличнаяЧасть.СчетЗатрат,
	|
	|	ТабличнаяЧасть.Ссылка.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначение,
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|	ТабличнаяЧасть.Номенклатура КАК Затрата,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияЗатраты,
	|	Неопределено КАК СпособРаспределенияЗатрат,
	|		
	|	//ТекстЗапросаЗаказУпр
	|	//ТекстЗапросаЗаказРегл
	|
	|	ТабличнаяЧасть.Номенклатура КАК Продукция,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияПродукции,
	|
	|	ТабличнаяЧасть.СтатьяЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	|	ТабличнаяЧасть.Ссылка КАК ДокументВыпуска,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК ПодразделениеПолучатель,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизацииПолучатель,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатрат КАК СтатьяЗатратПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатратПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	Неопределено КАК КонечнаяПродукция,
	|	Неопределено КАК ЗаказВыпуска,
	|		
	|	//ТекстЗапросаЗаказПолучательУпр
	|	//ТекстЗапросаЗаказПолучательРегл
	|		
	|	Неопределено КАК ПродукцияПолучатель,
	|	Неопределено КАК ХарактеристикаПродукцииПолучатель,
	|	Неопределено КАК СерияПродукцииПолучатель,
	|		
	|	ТабличнаяЧасть.СчетЗатрат КАК СчетДт,
	|	ТабличнаяЧасть.СчетЗатрат.Количественный КАК СчетДтКоличественный,
	|
	|	ТабличнаяЧасть.Ссылка.СчетКт КАК СчетКт,
	|
	|	ТабличнаяЧасть.Ссылка.СубконтоКт1 КАК Субконто1,
	|	ТабличнаяЧасть.Ссылка.СубконтоКт2 КАК Субконто2,
	|	ТабличнаяЧасть.Ссылка.СубконтоКт3 КАК Субконто3,
	|
	|	ТабличнаяЧасть.Ссылка.СубконтоКт1 КАК СубконтоДт1,
	|	ТабличнаяЧасть.Ссылка.СубконтоКт2 КАК СубконтоДт2,
	|	ТабличнаяЧасть.Ссылка.СубконтоКт3 КАК СубконтоДт3,
	|
	|	Неопределено КАК ОбъектСтроительства,
	|	Неопределено КАК Проект,
	|
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|	&СобственнаяПродукция КАК ВариантВыпускаПродукции,
	|
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|	0 КАК КоличествоДоделка,
	|	Сумма КАК СтоимостьУУ,
	|	СуммаРегл КАК СтоимостьБУ,
	|
	|	СуммаНал КАК СтоимостьНУ,
	|	ТабличнаяЧасть.СуммаНДС КАК НДСВходящий,	
	|	ТабличнаяЧасть.СуммаНДСКредит КАК НДСКредит
	|
	|ИЗ	
	|	Документ.ОприходованиеНЗП.Материалы КАК ТабличнаяЧасть
	|	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка               
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказКорректировкаНЗП();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказПолучательУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК ЗаказПолучатель,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказПолучательРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказПолучательРегл,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииОприходованиеНЗП()

// Формирует текст запроса по табличной части "Материалы" документа "Списание незавершенного производства".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииСписаниеНЗП()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.Услуга КАК Услуга,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.Номенклатура.ВестиОперативныйУчетОстатковНЗП КАК ВестиОперативныйУчетОстатковНЗП,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	&ПустаяСпецификация КАК Спецификация,
	|	ТабличнаяЧасть.СчетЗатрат,
	|
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТабличнаяЧасть.Ссылка.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначениеПолучатель,
	|	Ложь КАК НеКорректироватьНУ,
	|
	|	ТабличнаяЧасть.Номенклатура КАК Затрата,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияЗатраты,
	|	Неопределено КАК СпособРаспределенияЗатрат,
	|		
	|	//ТекстЗапросаЗаказУпр
	|	//ТекстЗапросаЗаказРегл
	|
	|	ТабличнаяЧасть.Номенклатура КАК Продукция,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияПродукции,
	|
	|	ТабличнаяЧасть.СтатьяЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	|	ТабличнаяЧасть.Ссылка КАК ДокументВыпуска,
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ОтражатьПоЗатратам ТОГДА ТабличнаяЧасть.Ссылка.ПодразделениеЗатраты ИНАЧЕ Неопределено КОНЕЦ КАК ПодразделениеПолучатель,
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ОтражатьПоЗатратам ТОГДА ТабличнаяЧасть.Ссылка.ПодразделениеОрганизацииЗатраты ИНАЧЕ Неопределено КОНЕЦ КАК ПодразделениеОрганизацииПолучатель,
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ОтражатьПоЗатратам ТОГДА ТабличнаяЧасть.Ссылка.НоменклатурнаяГруппа ИНАЧЕ Неопределено КОНЕЦ КАК НоменклатурнаяГруппаПолучатель,
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ОтражатьПоЗатратам ТОГДА ТабличнаяЧасть.Ссылка.СтатьяЗатрат ИНАЧЕ Неопределено КОНЕЦ КАК СтатьяЗатратПолучатель,
	|
	|	ТабличнаяЧасть.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	ВЫБОР 
	|	    КОГДА ТабличнаяЧасть.Ссылка.ОтражатьПоЗатратам
	|	    ТОГДА ТабличнаяЧасть.Ссылка.СтатьяЗатрат.ХарактерЗатрат                                                 
	|	    ИНАЧЕ НЕОПРЕДЕЛЕНО
    |	КОНЕЦ КАК ХарактерЗатратПолучатель,   
	|	ТабличнаяЧасть.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	Неопределено КАК КонечнаяПродукция,
	|	Неопределено КАК ЗаказВыпуска,
	|
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ОтражатьПоЗатратам ТОГДА ТабличнаяЧасть.Ссылка.Заказ ИНАЧЕ Неопределено КОНЕЦ КАК ЗаказПолучатель,
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ОтражатьПоЗатратам ТОГДА ТабличнаяЧасть.Ссылка.Заказ ИНАЧЕ Неопределено КОНЕЦ КАК ЗаказПолучательРегл,
	|		
	|	Неопределено КАК ПродукцияПолучатель,
	|	Неопределено КАК ХарактеристикаПродукцииПолучатель,
	|	Неопределено КАК СерияПродукцииПолучатель,
	|		
	|	ТабличнаяЧасть.Ссылка.СчетДт КАК СчетДт,
	|	ТабличнаяЧасть.Ссылка.СчетДт.Количественный КАК СчетДтКоличественный,
	|
	|	ТабличнаяЧасть.СчетЗатрат КАК СчетКт,
	|
	|	ТабличнаяЧасть.Ссылка.СубконтоДт1 КАК Субконто1,
	|	ТабличнаяЧасть.Ссылка.СубконтоДт2 КАК Субконто2,
	|	ТабличнаяЧасть.Ссылка.СубконтоДт3 КАК Субконто3,
	|
	|	ТабличнаяЧасть.Ссылка.СубконтоДт1 КАК СубконтоДт1,
	|	ТабличнаяЧасть.Ссылка.СубконтоДт2 КАК СубконтоДт2,
	|	ТабличнаяЧасть.Ссылка.СубконтоДт3 КАК СубконтоДт3,
	|
	|	Неопределено КАК ОбъектСтроительства,
	|	 ТабличнаяЧасть.Ссылка.Проект КАК Проект,  
	|
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|	&СобственнаяПродукция КАК ВариантВыпускаПродукции,
	|
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|	0 КАК КоличествоДоделка,
	|	Сумма КАК СтоимостьУУ,
	|	СуммаРегл КАК СтоимостьБУ,
	|	СуммаНал  КАК СтоимостьНУ,
	|	ТабличнаяЧасть.СуммаНДС КАК СуммаНДС,	
	|	ТабличнаяЧасть.СуммаНДС КАК НДСВходящий,
	|	ТабличнаяЧасть.СуммаНДСКредит КАК НДСКредит   
	|
	|ИЗ	
	|	Документ.СписаниеНЗП.Материалы КАК ТабличнаяЧасть
	|	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказКорректировкаНЗП();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказПолучательУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК ЗаказПолучатель,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказПолучательРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказПолучательРегл,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииСписаниеНЗП()

// Формирует текст запроса по табличной части "Материалы" документа "Оприходование материалов из производства".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииОприходованиеМатериалов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка) КАК Спецификация,
	|	ТабличнаяЧасть.СчетЗатрат,
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|		
	|	//ТекстЗапросаЗаказУпр
	|	//ТекстЗапросаЗаказРегл
	|
	|	ТабличнаяЧасть.Номенклатура КАК Продукция,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияПродукции,
	|
	|	ТабличнаяЧасть.СтатьяЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	ТабличнаяЧасть.Ссылка КАК ДокументВыпуска,
	|
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК ПодразделениеПолучатель,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизацииПолучатель,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатрат КАК СтатьяЗатратПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатратПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	Неопределено КАК СпособРаспределенияЗатрат,
	|		
	|	&ВидПоступленияНаСклад КАК ВидПоступления,
	|	ТабличнаяЧасть.Ссылка.Склад КАК СкладПолучатель,
	|	Неопределено КАК ПриходныйОрдер,
	|	Ложь КАК БезПраваПродажи,
	|	ТабличнаяЧасть.ЗаказРезерв,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.ВидЗаказа, Неопределено) КАК ВнутреннийЗаказВидЗаказа,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.Заказчик, Неопределено) КАК ВнутреннийЗаказЗаказчик,
	|	ТабличнаяЧасть.ЗаказРезерв КАК ЗаказПолучатель,
	|	ТабличнаяЧасть.ЗаказРезерв КАК ЗаказПолучательРегл,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.Контрагент, Неопределено) КАК Контрагент,
	|
	|	ТабличнаяЧасть.ЗаказРезерв.ВидОперации КАК ВидОперации,
	|	ЕСТЬNULL(
	|		ТабличнаяЧасть.ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|		Ложь
	|	) КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|
	|	ТабличнаяЧасть.Качество,
	|	ТабличнаяЧасть.СтатусВозврата КАК СтатусПартии,
	|
	|	ТабличнаяЧасть.Счет КАК СчетДт,
	|	ТабличнаяЧасть.Счет.Количественный КАК СчетДтКоличественный,
	|
	|	Неопределено КАК Проект,
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|	Неопределено КАК ВариантВыпускаПродукции,
	|	ТабличнаяЧасть.ТипСтоимости,
	|		
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|	0 КАК КоличествоДоделка,
	|	Сумма КАК СтоимостьУУ,
	|	СуммаРегл КАК СтоимостьБУ,
	|	СуммаНал КАК СтоимостьНУ,
	|	ТабличнаяЧасть.СуммаНДС КАК НДСВходящий,	
	|	ТабличнаяЧасть.СуммаНДСКредит КАК НДСКредит 	
	|ИЗ	
	|	Документ.ОприходованиеМатериаловИзПроизводства.Материалы КАК ТабличнаяЧасть
	|		
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И Не ТабличнаяЧасть.Номенклатура.Услуга
	|	И ТабличнаяЧасть.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы)
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказКорректировкаНЗП();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииОприходованиеМатериалов()

// Формирует текст запроса по табличной части "Материалы" документа "Оприходование материалов из производства".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоВыпускуПродукцииОприходованиеМатериаловЗатраты()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.Услуга КАК Услуга,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.Номенклатура.ВестиОперативныйУчетОстатковНЗП КАК ВестиОперативныйУчетОстатковНЗП,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка) КАК Спецификация,
	|	ТабличнаяЧасть.СчетЗатрат,
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|		
	|	//ТекстЗапросаЗаказУпр
	|	//ТекстЗапросаЗаказРегл
	|
	|	ТабличнаяЧасть.Номенклатура КАК Продукция,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияПродукции,
	|
	|	ТабличнаяЧасть.СтатьяЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	ТабличнаяЧасть.Ссылка КАК ДокументВыпуска,
	|
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК ПодразделениеПолучатель,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизацииПолучатель,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатрат КАК СтатьяЗатратПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатратПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	Неопределено КАК СпособРаспределенияЗатрат,
	|		
	|	ТабличнаяЧасть.Продукция КАК ПродукцияПолучатель,
	|	ТабличнаяЧасть.ХарактеристикаПродукции КАК ХарактеристикаПродукцииПолучатель,
	|	ТабличнаяЧасть.СерияПродукции КАК СерияПродукцииПолучатель,
	|	Неопределено КАК КонечнаяПродукция,
	|	Неопределено КАК ЗаказВыпуска,
	|		
	|	//ТекстЗапросаЗаказПолучательУпр
	|	//ТекстЗапросаЗаказПолучательРегл
	|
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.ВидЗаказа, Неопределено) КАК ВнутреннийЗаказВидЗаказа,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.Заказчик, Неопределено) КАК ВнутреннийЗаказЗаказчик,
	|
	|	ТабличнаяЧасть.СчетЗатрат КАК СчетДт,
	|	ТабличнаяЧасть.СчетЗатрат.Количественный КАК СчетДтКоличественный,
	|
	|	Неопределено КАК Субконто1,
	|	Неопределено КАК Субконто2,
	|	Неопределено КАК Субконто3,
	|
	|	Неопределено КАК СубконтоДт1,
	|	Неопределено КАК СубконтоДт2,
	|	Неопределено КАК СубконтоДт3,
	|
	|	ТабличнаяЧасть.ОбъектСтроительства,
	|	ТабличнаяЧасть.Проект,
	|
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|	Неопределено КАК ВариантВыпускаПродукции,
	|	ТабличнаяЧасть.ТипСтоимости,
	|		
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|	0 КАК КоличествоДоделка,
	|	Сумма КАК СтоимостьУУ,
	|	СуммаРегл КАК СтоимостьБУ,
	|	СуммаНал КАК СтоимостьНУ,
	|	ТабличнаяЧасть.СуммаНДС КАК НДСВходящий,	
	|	ТабличнаяЧасть.СуммаНДСКредит КАК НДСКредит 	
	|ИЗ	
	|	Документ.ОприходованиеМатериаловИзПроизводства.Материалы КАК ТабличнаяЧасть
	|		
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И Не ТабличнаяЧасть.Номенклатура.Услуга
	|	И ТабличнаяЧасть.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы)
	|	И ТабличнаяЧасть.ТипСтоимости = ЗНАЧЕНИЕ(Перечисление.ВидыНормативнойСтоимостиПроизводства.Фиксированная)
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказКорректировкаНЗП();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказПолучательУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК ЗаказПолучатель,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказПолучательРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказПолучательРегл,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВыпускуПродукцииОприходованиеМатериаловЗатраты()

// Функция формирует запрос по выпуску продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ТекстЗапросаПоВыпускуПродукции - Строка - Текст запроса по табличной части документа
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету
//
// Возвращаемое значение:
//	Запрос - Запрос по выпуску продукции.
//
Функция СформироватьЗапросПоВыпускуПродукции(
	СтруктураШапкиДокумента,
	ТекстЗапросаПоВыпускуПродукции,
	УчетнаяПолитика,
	УчетнаяПолитикаБух
	)
	
	Запрос = Новый Запрос;
	
	Если Не ПустаяСтрока(ТекстЗапросаПоВыпускуПродукции) Тогда
		
		Запрос.Текст = ТекстЗапросаПоВыпускуПродукции;
		
		УстановитьПараметрыЗапросаПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			УчетнаяПолитика,
			УчетнаяПолитикаБух,
			Запрос
			);
			
	КонецЕсли;
		
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоВыпускуПродукции()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ЗАПРОСОВ ПО ВОЗВРАТНЫМ ОТХОДАМ

// Формирует текст запроса по табличной части "Возвратные отходы" документа "Отчет производства за смену".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоТабличнойЧастиВозвратныеОтходыОтчетПроизводстваЗаСмену()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.Услуга КАК Услуга,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	ТабличнаяЧасть.Спецификация,
	|	ТабличнаяЧасть.СчетЗатрат,
	|
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|	ТабличнаяЧасть.Номенклатура КАК Затрата,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияЗатраты,
	|	Неопределено КАК СпособРаспределенияЗатрат,
	|		
	|	//ТекстЗапросаЗаказУпр
	|	//ТекстЗапросаЗаказРегл
	|		
	|	ТабличнаяЧасть.Номенклатура КАК Продукция,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияПродукции,
	|
	|	ТабличнаяЧасть.Ссылка КАК ДокументВыпуска,
	|	&ВидПоступленияНаСклад КАК ВидПоступления,
	|	ТабличнаяЧасть.Ссылка.СкладОтходов КАК СкладПолучатель,
	|	Неопределено КАК ПриходныйОрдер,
	|	Ложь КАК БезПраваПродажи,
	|	ТабличнаяЧасть.ЗаказРезерв,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.ВидЗаказа, Неопределено) КАК ВнутреннийЗаказВидЗаказа,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.Заказчик, Неопределено) КАК ВнутреннийЗаказЗаказчик,
	|	ТабличнаяЧасть.Заказ КАК ЗаказПолучатель,
	|	ТабличнаяЧасть.Заказ КАК ЗаказПолучательРегл,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.Контрагент, Неопределено) КАК Контрагент,
	|
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК ПодразделениеПолучатель,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизацииПолучатель,
	|
	|	ТабличнаяЧасть.ЗаказРезерв.ВидОперации КАК ВидОперации,
	|	ЕСТЬNULL(
	|		ТабличнаяЧасть.ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|		Ложь
	|	) КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|
	|	&КачествоНовый КАК Качество,
	|	ТабличнаяЧасть.СтатусПартии,
	|
	|	ТабличнаяЧасть.Счет КАК СчетДт,
	|	ТабличнаяЧасть.Счет.Количественный КАК СчетДтКоличественный,
	|
	|	ТабличнаяЧасть.СтатьяЗатрат КАК СтатьяЗатратПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаПолучатель,
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|
	|	Неопределено КАК ПродукцияПолучатель,
	|	Неопределено КАК ХарактеристикаПродукцииПолучатель,
	|	Неопределено КАК СерияПродукцииПолучатель,
	|	Неопределено КАК Проект,
	|
	|	ВЫБОР КОГДА ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ТабличнаяЧасть.Заказ.ВидОперации = &ВидОперацииПереработка ТОГДА
	|		&ПродукцияИзДавальческогоСырья
	|	ИНАЧЕ
	|      	&СобственнаяПродукция
	|	КОНЕЦ КАК ВариантВыпускаПродукции,
	|		
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|	0 КАК КоличествоДоделка,
	|	ТабличнаяЧасть.Сумма КАК СтоимостьУУ,
	|	ТабличнаяЧасть.СуммаРегл КАК СтоимостьБУ,
	|	0 КАК НДСВходящий,	
	|	0 КАК НДСКредит,	
	|	ТабличнаяЧасть.СуммаРегл КАК СтоимостьНУ
	|		
	|ИЗ	
	|	Документ.ОтчетПроизводстваЗаСмену.ВозвратныеОтходы КАК ТабличнаяЧасть
	|		
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Ссылка.ИспользоватьВозвратныеОтходы
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказ();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоТабличнойЧастиВозвратныеОтходыОтчетПроизводстваЗаСмену()

// Формирует текст запроса по табличной части "Возвратные отходы" документа "Поступление товаров из переработки".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоТабличнойЧастиВозвратныеОтходыПоступлениеТоваровИзПереработки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.Услуга КАК Услуга,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	ТабличнаяЧасть.Спецификация,
	|	ТабличнаяЧасть.СчетЗатрат,
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|	ТабличнаяЧасть.Номенклатура КАК Затрата,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияЗатраты,
	|	Неопределено КАК СпособРаспределенияЗатрат,
	|		
	|	//ТекстЗапросаЗаказУпр
	|	//ТекстЗапросаЗаказРегл
	|
	|	ТабличнаяЧасть.Номенклатура КАК Продукция,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияПродукции,
	|		
	|	ТабличнаяЧасть.Ссылка КАК ДокументВыпуска,
	|	ТабличнаяЧасть.Ссылка.ВидПоступления КАК ВидПоступления,
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ВидПоступления = &ВидПоступленияНаСклад Тогда
	|		ТабличнаяЧасть.Ссылка.СкладОтходов
	|	КОГДА ТабличнаяЧасть.Ссылка.ВидПоступления = &ВидПоступленияПоОрдеру Тогда
	|		ТабличнаяЧасть.Ссылка.СкладОрдер.Склад
	|	ИНАЧЕ
	|		ТабличнаяЧасть.Ссылка.СкладОтходов
	|	КОНЕЦ КАК СкладПолучатель,
	|	ТабличнаяЧасть.Ссылка.СкладОрдер КАК ПриходныйОрдер,
	|	ЕСТЬNULL(ТабличнаяЧасть.Ссылка.СкладОрдер.БезПраваПродажи, Ложь) КАК БезПраваПродажи,
	|	ТабличнаяЧасть.ЗаказРезерв,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.ВидЗаказа, Неопределено) КАК ВнутреннийЗаказВидЗаказа,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.Заказчик, Неопределено) КАК ВнутреннийЗаказЗаказчик,
	|	ТабличнаяЧасть.Заказ КАК ЗаказПолучатель,
	|	ТабличнаяЧасть.Заказ КАК ЗаказПолучательРегл,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.Контрагент, Неопределено) КАК Контрагент,
	|
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК ПодразделениеПолучатель,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизацииПолучатель,
	|
	|	ТабличнаяЧасть.ЗаказРезерв.ВидОперации КАК ВидОперации,
	|	ЕСТЬNULL(
	|		ТабличнаяЧасть.ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|		Ложь
	|	) КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|
	|	&КачествоНовый КАК Качество,
	|	ТабличнаяЧасть.СтатусПартии,
	|
	|	ТабличнаяЧасть.Счет КАК СчетДт,
	|	ТабличнаяЧасть.Счет.Количественный КАК СчетДтКоличественный,
	|
	|	ТабличнаяЧасть.СтатьяЗатрат КАК СтатьяЗатратПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаПолучатель,
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|
	|	Неопределено КАК ПродукцияПолучатель,
	|	Неопределено КАК ХарактеристикаПродукцииПолучатель,
	|	Неопределено КАК СерияПродукцииПолучатель,
	|	Неопределено КАК Проект,
	|
	|	ВЫБОР КОГДА ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ТабличнаяЧасть.Заказ.ВидОперации = &ВидОперацииПереработка ТОГДА
	|		&ПродукцияИзДавальческогоСырья
	|	ИНАЧЕ
	|      	&СобственнаяПродукция
	|	КОНЕЦ КАК ВариантВыпускаПродукции,
	|		
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|	0 КАК КоличествоДоделка,
	|	ТабличнаяЧасть.Сумма КАК СтоимостьУУ,
	|	ТабличнаяЧасть.СуммаРегл КАК СтоимостьБУ,
	|	0 КАК НДСВходящий,	
	|	0 КАК НДСКредит,	
	|	ТабличнаяЧасть.СуммаРегл КАК СтоимостьНУ
	|		
	|ИЗ	
	|	Документ.ПоступлениеТоваровИзПереработки.ВозвратныеОтходы КАК ТабличнаяЧасть
	|		
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Ссылка.ИспользоватьВозвратныеОтходы
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказ();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоТабличнойЧастиВозвратныеОтходыПоступлениеТоваровИзПереработки()

// Формирует текст запроса по табличной части "Материалы" документа "Оприходование материалов из производства".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоВозвратнымОтходамОприходованиеМатериалов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|
	|	ТабличнаяЧасть.НоменклатурнаяГруппа,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Номенклатура.Услуга КАК Услуга,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка) КАК Спецификация,
	|	ТабличнаяЧасть.СчетЗатрат,
	|
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТабличнаяЧасть.НалоговоеНазначение КАК НалоговоеНазначениеПолучатель,
	|	Истина КАК НеКорректироватьНУ,
	|
	|	ТабличнаяЧасть.Номенклатура КАК Затрата,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияЗатраты,
	|	Неопределено КАК СпособРаспределенияЗатрат,
	|		
	|	//ТекстЗапросаЗаказУпр
	|	//ТекстЗапросаЗаказРегл
	|
	|	ТабличнаяЧасть.Номенклатура КАК Продукция,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаПродукции,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияПродукции,
	|		
	|	ТабличнаяЧасть.Ссылка КАК ДокументВыпуска,
	|	&ВидПоступленияНаСклад КАК ВидПоступления,
	|	ТабличнаяЧасть.Ссылка.Склад КАК СкладПолучатель,
	|	Неопределено КАК ПриходныйОрдер,
	|	Ложь КАК БезПраваПродажи,
	|	ТабличнаяЧасть.ЗаказРезерв,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.ВидЗаказа, Неопределено) КАК ВнутреннийЗаказВидЗаказа,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.Заказчик, Неопределено) КАК ВнутреннийЗаказЗаказчик,
	|	ТабличнаяЧасть.Заказ КАК ЗаказПолучатель,
	|	ТабличнаяЧасть.Заказ КАК ЗаказПолучательРегл,
	|	ЕСТЬNULL(ТабличнаяЧасть.ЗаказРезерв.Контрагент, Неопределено) КАК Контрагент,
	|
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК ПодразделениеПолучатель,
	|	ТабличнаяЧасть.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизацииПолучатель,
	|
	|	ТабличнаяЧасть.ЗаказРезерв.ВидОперации КАК ВидОперации,
	|	ЕСТЬNULL(
	|		ТабличнаяЧасть.ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|		Ложь
	|	) КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|
	|	ТабличнаяЧасть.Качество,
	|	ТабличнаяЧасть.СтатусВозврата КАК СтатусПартии,
	|
	|	ТабличнаяЧасть.Счет КАК СчетДт,
	|	ТабличнаяЧасть.Счет.Количественный КАК СчетДтКоличественный,
	|
	|	ТабличнаяЧасть.СтатьяЗатрат КАК СтатьяЗатратПолучатель,
	|	ТабличнаяЧасть.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	|	ТабличнаяЧасть.СтатьяЗатрат.СтатусМатериальныхЗатрат КАК СтатусМатериальныхЗатрат,
	|	ТабличнаяЧасть.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаПолучатель,
	|	&ВидВыпускаВыпуск КАК ВидВыпуска,
	|
	|	Неопределено КАК ПродукцияПолучатель,
	|	Неопределено КАК ХарактеристикаПродукцииПолучатель,
	|	Неопределено КАК СерияПродукцииПолучатель,
	|	Неопределено КАК Проект,
	|
	|	ВЫБОР КОГДА ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ТабличнаяЧасть.Заказ.ВидОперации = &ВидОперацииПереработка ТОГДА
	|		&ПродукцияИзДавальческогоСырья
	|	ИНАЧЕ
	|      	&СобственнаяПродукция
	|	КОНЕЦ КАК ВариантВыпускаПродукции,
	|	ТабличнаяЧасть.ТипСтоимости,
	|		
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество,
	|	0 КАК КоличествоДоделка,
	|	ТабличнаяЧасть.Сумма КАК СтоимостьУУ,
	|	ТабличнаяЧасть.СуммаРегл КАК СтоимостьБУ,
	|	ТабличнаяЧасть.СуммаНал КАК СтоимостьНУ,
	|	ТабличнаяЧасть.СуммаНДС КАК НДСВходящий,	
	|	ТабличнаяЧасть.СуммаНДСКредит КАК НДСКредит
	|		
	|ИЗ	
	|	Документ.ОприходованиеМатериаловИзПроизводства.Материалы КАК ТабличнаяЧасть
	|		
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОприходованиеМатериаловИзПроизводства.ВозвратныеОтходы)
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказКорректировкаНЗП();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	ТекстЗапросаДляРеквизитаЗаказРегл = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями,
		Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказРегл", ТекстЗапросаДляРеквизитаЗаказРегл + " КАК ЗаказРегл,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоВозвратнымОтходамОприходованиеМатериалов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ЗАПРОСА КОЭФФИЦИЕНТОВ РАСПРЕДЕЛЕНИЮ ПО ПРОЕКТАМ

// Функция формирует запрос по коэффициентам распределения по проектам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ВыборкаПоВыпускуПродукции - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса по выпуску продукции
//
// Возвращаемое значение:
//	Запрос - Запрос по коэффициентам распределения по проектам.
//
Функция СформироватьЗапросПоКоэффициентамРаспределенияПоПроектам(
	СтруктураШапкиДокумента,
	ВыборкаПоВыпускуПродукции
	)
	
	Запрос = Новый Запрос;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
	   
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	РаспределениеПоПроектам.ВидРаспределения,
		|	РаспределениеПоПроектам.Проект,
		|	РаспределениеПоПроектам.ДоляРаспределения
		|ИЗ
		|	РегистрСведений.РаспределениеПоПроектам.СрезПоследних(&КонМесяца, 
		|		ВидРаспределения В (&МассивВидовРаспределения)
		|	) КАК РаспределениеПоПроектам
		|ГДЕ
		|	РаспределениеПоПроектам.ВидРаспределения.МетодРаспределения = ЗНАЧЕНИЕ(Перечисление.МетодыРаспределенияПоПроектам.ПриПроведенииДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаспределениеПоПроектам.ВидРаспределения,
		|	РаспределениеПоПроектам.Проект
		|";
	
		МассивВидовРаспределения = Новый Массив;
		МассивВидовРаспределения.Добавить(СтруктураШапкиДокумента.Проект);
		
		ВыборкаПоВыпускуПродукции.Сбросить();
		Пока ВыборкаПоВыпускуПродукции.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаПоВыпускуПродукции.Проект)
			   И ТипЗнч(ВыборкаПоВыпускуПродукции.Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам")
			Тогда
				МассивВидовРаспределения.Добавить(ВыборкаПоВыпускуПродукции.Проект);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("МассивВидовРаспределения", МассивВидовРаспределения);
		Запрос.УстановитьПараметр("КонМесяца", КонецМесяца(СтруктураШапкиДокумента.Дата));
		
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL
		|";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоКоэффициентамРаспределенияПоПроектам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ "ВЫПУСК ПРОДУКЦИИ"


// Процедура формирует движения по регистру "Выпуск продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат
//	КодОперацииВыпускПродукции - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции
//	Количество - Число - Количество выпуска
//	КоличествоДоделка - Число - Количество выпуска (доделка)
//	Стоимость - Число - Учетная стоимость выпуска
//	ВременнаяРазница - Число - Учетная стоимость выпуска в части временной разницы
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	НаборЗаписейВыпускПродукции - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Выпуск продукции".
//
Процедура СформироватьСтрокуДвиженияПоРегиструВыпускПродукции(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатрат,
	КодОперацииВыпускПродукции,
	Количество,
	КоличествоДоделка,
	Стоимость,
	СтоимостьНУ,
	НДСВходящий,
	НДСКредит,
	ВидОтраженияВУчете,
	НаборЗаписейВыпускПродукции
	)
	
	Если Количество = 0 И КоличествоДоделка = 0 И Стоимость = 0 И СтоимостьНУ = 0 И НДСВходящий = 0 И НДСКредит = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	
	// Сформируем движение по регистру "Выпуск продукции".
	НоваяСтрока = НаборЗаписейВыпускПродукции.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	// Заполнение заказа зависит от вида отражения в учете.
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		
		НоваяСтрока.Подразделение = СтруктураШапкиДокумента.Подразделение;
		НоваяСтрока.Заказ = СтрокаВыборки.Заказ;
		
		ЗаказПолучатель = СтрокаВыборки.ЗаказПолучатель;
		ПодразделениеПолучатель = СтрокаВыборки.ПодразделениеПолучатель;
		
		НоваяСтрока.КоличествоДоделка = КоличествоДоделка;
		НоваяСтрока.Стоимость = Стоимость;
		
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
	 
	 	НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
	 	НоваяСтрока.Подразделение = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		НоваяСтрока.Заказ = СтрокаВыборки.ЗаказРегл;
		
		ЗаказПолучатель = СтрокаВыборки.ЗаказПолучательРегл;
		ПодразделениеПолучатель = СтрокаВыборки.ПодразделениеОрганизацииПолучатель;
		
	КонецЕсли;
	
	// Для возвратных отходов не заполняем реквизиты аналитики - получателя.
	Если КодОперацииВыпускПродукции = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости Тогда
		
		НоваяСтрока.ПодразделениеПолучатель = Неопределено;
		НоваяСтрока.ЗаказПолучатель = СтрокаВыборки.ЗаказРезерв;
		НоваяСтрока.СтатьяЗатратПолучатель = Неопределено;
		
	Иначе
		
		НоваяСтрока.ПодразделениеПолучатель = ПодразделениеПолучатель;
		НоваяСтрока.ЗаказПолучатель = ЗаказПолучатель;
		
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		
		Если КодОперацииВыпускПродукции = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП Тогда
			НоваяСтрока.СчетДт = СтрокаВыборки.СчетКт;
		Иначе
			НоваяСтрока.СчетДт = СтрокаВыборки.СчетДт;
		КонецЕсли;
		НоваяСтрока.СчетУчетаНЗП = СтрокаВыборки.СчетЗатрат;
		
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие
		   И НоваяСтрока.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства)
		Тогда
			НоваяСтрока.СубконтоДт1 = СтрокаВыборки.ПодразделениеОрганизацииПолучатель;
			НоваяСтрока.СубконтоДт2 = СтрокаВыборки.НоменклатурнаяГруппаПолучатель;
			НоваяСтрока.СубконтоДт3 = СтрокаВыборки.СтатьяЗатратПолучатель;
		   
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
			НоваяСтрока.СубконтоДт1 = СтрокаВыборки.СубконтоДт1;
			НоваяСтрока.СубконтоДт2 = СтрокаВыборки.СубконтоДт2;
			НоваяСтрока.СубконтоДт3 = СтрокаВыборки.СубконтоДт3;
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			НоваяСтрока.СубконтоДт1 = СтрокаВыборки.ОбъектСтроительства;
			НоваяСтрока.СубконтоДт2 = СтрокаВыборки.СтатьяЗатратПолучатель;
			НоваяСтрока.ОбъектСтроительства = СтрокаВыборки.ОбъектСтроительства;
			НоваяСтрока.СтатьяЗатратПолучатель = СтрокаВыборки.СтатьяЗатратПолучатель;
			
		КонецЕсли;
		
		НоваяСтрока.НалоговоеНазначение           = СтрокаВыборки.НалоговоеНазначение;
		НоваяСтрока.НалоговоеНазначениеПолучатель = СтрокаВыборки.НалоговоеНазначениеПолучатель;
		
		НоваяСтрока.КоличествоДоделка = КоличествоДоделка;
		НоваяСтрока.Стоимость   = Стоимость;
		НоваяСтрока.СтоимостьНУ = СтоимостьНУ;
		НоваяСтрока.НДСВходящий = НДСВходящий;
		НоваяСтрока.НДСКредит   = НДСКредит;
		
		Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			// Давальческое сырье не отражается в движениях регистра по налоговому учету.
			НоваяСтрока.НалоговоеНазначение       = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(); 
			НоваяСтрока.НалоговоеНазначениеПолучатель = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(); 
			НоваяСтрока.СтоимостьНУ = 0;
			НоваяСтрока.НДСВходящий = 0;
			НоваяСтрока.НДСКредит   = 0;
		КонецЕсли;	
		
		
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
		ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.НомерСтрокиДокумента = СтрокаВыборки.НомерСтроки;
	КонецЕсли;
	
	НоваяСтрока.КодОперации = КодОперацииВыпускПродукции;
	НоваяСтрока.Количество = Количество;
	
КонецПроцедуры // СформироватьСтрокуДвиженияПоРегиструВыпускПродукции()

// Процедура формирует движения по регистру "Выпуск продукции".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	ХарактерЗатратУУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат по управленческому учету
//	ХарактерЗатратБУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат по бухгалтерскому учету
//	ХарактерЗатратНУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат по налоговому учету
//	КодОперацииВыпускПродукцииУУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по управленческому учету
//	КодОперацииВыпускПродукцииБУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по бухгалтерскому учету
//	КодОперацииВыпускПродукцииНУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по налоговому учету
//	Количество - Число - Количество выпуска
//	КоличествоДоделка - Число - Количество выпуска (доделка)
//	СтоимостьУУ - Число - Учетная стоимость по управленческому учету
//	СтоимостьБУ - Число - Учетная стоимость по бухгалтерскому учету
//	СтоимостьНУ - Число - Учетная стоимость по налоговому учету
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегистрамВыпускПродукции(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатратУУ,
	ХарактерЗатратБУ,
	ХарактерЗатратНУ,
	КодОперацииВыпускПродукцииУУ,
	КодОперацииВыпускПродукцииБУ,
	КодОперацииВыпускПродукцииНУ,
	Количество,
	КоличествоДоделка,
	СтоимостьУУ,
	СтоимостьБУ,
	СтоимостьНУ,
	НДСВходящий,
	НДСКредит,
	СтруктураНаборыЗаписей
	)
	
	// Для оприходования НЗП по фиксированной стоимости движения не формируем.
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеНЗП")
	   И СтруктураШапкиДокумента.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная
	Тогда
		Возврат;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ИмяРегистра = "ВыпускПродукции";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьСтрокуДвиженияПоРегиструВыпускПродукции(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			ХарактерЗатратУУ,
			КодОперацииВыпускПродукцииУУ,
			Количество,
			КоличествоДоделка,
			СтоимостьУУ,
			0, // СтоимостьНУ
			0, // НДСВходящий 
			0, // НДСКредит 
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистра = "ВыпускПродукцииБухгалтерскийУчет";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьСтрокуДвиженияПоРегиструВыпускПродукции(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			ХарактерЗатратБУ,
			КодОперацииВыпускПродукцииБУ,
			Количество,
			КоличествоДоделка,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегистрамВыпускПродукции()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ "ВЫПУСК ПРОДУКЦИИ (НАРАБОТКА)"

// Процедура формирует движения по регистру "Выпуск продукции (наработка)".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	Количество - Число - Количество выпуска
//	КоличествоДоделка - Число - Количество выпуска (доделка)
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	НаборЗаписейВыпускПродукцииНаработка - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Выпуск продукции (наработка)".
//
Процедура СформироватьСтрокуДвиженияПоРегиструВыпускПродукцииНаработка(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Количество,
	КоличествоДоделка,
	ВидОтраженияВУчете,
	НаборЗаписейВыпускПродукцииНаработка
	)
	
	
	
	// Для вида выпуска "Наработка" движения формируем только, если количество выпуска
	// больше количества доделки.
	Если СтрокаВыборки.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка
	   И Количество <= КоличествоДоделка Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем движение по регистру "Выпуск продукции (наработка)".
	НоваяСтрока = НаборЗаписейВыпускПродукцииНаработка.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	Если СтрокаВыборки.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Количество = Количество - КоличествоДоделка;
		
	ИначеЕсли СтрокаВыборки.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск Тогда
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
		НоваяСтрока.Количество = КоличествоДоделка;
		
	КонецЕсли;
	
	// Заполнение заказа зависит от вида отражения в учете.
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		
		НоваяСтрока.Подразделение = СтруктураШапкиДокумента.Подразделение;
		НоваяСтрока.Заказ = СтрокаВыборки.Заказ;
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда 
	 
	 	НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
	 	НоваяСтрока.Подразделение = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		НоваяСтрока.Заказ = СтрокаВыборки.ЗаказРегл;
		
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СчетУчетаНЗП = СтрокаВыборки.СчетЗатрат;
		
		НоваяСтрока.НалоговоеНазначение = СтрокаВыборки.НалоговоеНазначение;
		
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьСтрокуДвиженияПоРегиструВыпускПродукцииНаработка()

// Процедура формирует движения по регистру "Выпуск продукции (наработка)".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	Количество - Число - Количество выпуска
//	КоличествоДоделка - Число - Количество выпуска (доделка)
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегистрамВыпускПродукцииНаработка(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Количество,
	КоличествоДоделка,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ИмяРегистра = "ВыпускПродукцииНаработка";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьСтрокуДвиженияПоРегиструВыпускПродукцииНаработка(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Количество,
			КоличествоДоделка,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистра = "ВыпускПродукцииНаработкаБухгалтерскийУчет";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьСтрокуДвиженияПоРегиструВыпускПродукцииНаработка(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Количество,
			КоличествоДоделка,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегистрамВыпускПродукцииНаработка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРА ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ УЧЕТА ТОВАРОВ НА СКЛАДАХ

// Процедура формирует движения по регистру "Товары на складах".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	ХарактерЗатратУУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для целей управленческого учета
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегиструТоварыНаСкладах(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И СтрокаВыборки.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		
		ИмяРегистра = "ТоварыНаСкладах";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		// Сформируем движение по регистру "Товары на складах".
		НоваяСтрока = СтруктураНаборыЗаписей.ТоварыНаСкладах.Добавить();
		НоваяСтрока.Активность = Истина;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
		
		НоваяСтрока.Склад = СтрокаВыборки.СкладПолучатель;
		НоваяСтрока.КодОперации = Перечисления.КодыОперацийТоварыНаСкладах.ВыпускПродукцииФиксНаСклад;
		
	КонецЕсли;
		
КонецПроцедуры // СформироватьДвиженияПоРегиструТоварыНаСкладах()

// Процедура формирует движения по регистру "Товары организаций".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегиструТоварыОрганизаций(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.Свойство("ОтражатьВРегламентированномУчете") Тогда
		ОтражатьВРегламентированномУчете = СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете;
	Иначе
		ОтражатьВРегламентированномУчете = Истина;
		ОбщегоНазначения.Сообщение("В структуре шапки документа нет значения ""ОтражатьВРегламентированномУчете"". Документ: " 
			+ СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;
	
	Если ОтражатьВРегламентированномУчете
	   И СтрокаВыборки.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
	
		ИмяРегистра = "ТоварыОрганизаций";
			
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
			
		// Сформируем движение по регистру "Товары организаций".
		НоваяСтрока = СтруктураНаборыЗаписей.ТоварыОрганизаций.Добавить();
		НоваяСтрока.Активность = Истина;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
		
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
			
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			НоваяСтрока.Склад = Неопределено;
		Иначе
			НоваяСтрока.Склад = СтрокаВыборки.СкладПолучатель;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // СформироватьДвиженияПоРегиструТоварыОрганизаций()

// Процедура формирует движения по регистру "Товары организаций (регл)".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегиструТоварыОрганизацийРегл(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.Свойство("ОтражатьВРегламентированномУчете") Тогда
		ОтражатьВРегламентированномУчете = СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете;
	Иначе
		ОтражатьВРегламентированномУчете = Истина;
		ОбщегоНазначения.Сообщение("В структуре шапки документа нет значения ""ОтражатьВРегламентированномУчете"". Документ: " 
			+ СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете") И НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда	
		Возврат;
	КонецЕсли;	
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	
	Если ОтражатьВРегламентированномУчете
	   И СтрокаВыборки.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
	
		ИмяРегистра = "ТоварыОрганизацийРегл";
			
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
			
		// Сформируем движение по регистру "Товары организаций (регл)".
		НоваяСтрока = СтруктураНаборыЗаписей.ТоварыОрганизацийРегл.Добавить();
		НоваяСтрока.Активность = Истина;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
		
		НоваяСтрока.СчетУчетаБУ         = СтрокаВыборки.СчетДт;
		
		Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда	
			НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();	
		ИначеЕсли ЗначениеЗаполнено(СтрокаВыборки.НалоговоеНазначениеПолучатель) Тогда
			НоваяСтрока.НалоговоеНазначение = СтрокаВыборки.НалоговоеНазначениеПолучатель;	
		Иначе
			НоваяСтрока.НалоговоеНазначение = СтрокаВыборки.НалоговоеНазначение;
		КонецЕсли; 
		
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
			
		Если (Не ВестиПартионныйУчетПоСкладамРегл) ИЛИ (СтрокаВыборки.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка) Тогда
			НоваяСтрока.Склад = Неопределено;
		Иначе
			НоваяСтрока.Склад = СтрокаВыборки.СкладПолучатель;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // СформироватьДвиженияПоРегиструТоварыОрганизацийРегл()

// Процедура формирует движения по регистру "Товары в резерве на складах".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	ХарактерЗатратУУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для целей управленческого учета
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегиструТоварыВРезервеНаСкладах(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И ЗначениеЗаполнено(СтрокаВыборки.ЗаказРезерв) Тогда
	   
	    // Если указан внутренний заказ, то резервирование под заказ выполяется только, если
		// склад документа не равен складу внутреннего заказ.
		Если СтрокаВыборки.ВнутреннийЗаказВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад
		   И СтрокаВыборки.ВнутреннийЗаказЗаказчик = СтрокаВыборки.СкладПолучатель Тогда
			Возврат;
		КонецЕсли;
		
		ИмяРегистра = "ТоварыВРезервеНаСкладах";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		// Сформируем движение по регистру "Товары в резерве на складах".
		НоваяСтрока = СтруктураНаборыЗаписей.ТоварыВРезервеНаСкладах.Добавить();
		НоваяСтрока.Активность = Истина;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
		
		НоваяСтрока.Склад = СтрокаВыборки.СкладПолучатель;
		НоваяСтрока.ДокументРезерва = СтрокаВыборки.ЗаказРезерв;
		
	КонецЕсли;
		
КонецПроцедуры // СформироватьДвиженияПоРегиструТоварыВРезервеНаСкладах()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРА ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ ПРОДАЖИ СЕБЕСТОИМОСТЬ

// Процедура формирует движения по регистру "Продажи себестоимость".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	Проект - СправочникСсылка.Проекты - Проект
//	Количество - Число - Количество продукции
//	Сумма - Число - Учетная стоимость продукции
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьСтрокуДвиженияПоРегиструПродажиСебестоимость(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Проект,
	Количество,
	Сумма,
	СтруктураНаборыЗаписей
	)
	
	Если Количество = 0
	   И Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ИмяРегистра = "ПродажиСебестоимость";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		// В движениях по регистру "Продажи себестоимость" должны быть заполнены измерения:
		//	- Номенклатура
		//	- ХарактеристикаНоменклатуры
		//	- ЗаказПокупателя
		//	- ДокументОприходования
		//	- Подразделение
		//	- Проект
		//
		// Ресурсы:
		//	- Количество
		//	- Стоимость
		
		// Сформируем движение по регистру "Продажи себестоимость".
		НоваяСтрока = СтруктураНаборыЗаписей.ПродажиСебестоимость.Добавить();
		НоваяСтрока.Активность = Истина;
		НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
		
		НоваяСтрока.Номенклатура = СтрокаВыборки.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаВыборки.ХарактеристикаНоменклатуры;
		
		НоваяСтрока.ЗаказПокупателя = СтрокаВыборки.Заказ;
		НоваяСтрока.ДокументОприходования = СтруктураШапкиДокумента.Ссылка;
		НоваяСтрока.Подразделение = СтруктураШапкиДокумента.Подразделение;
		НоваяСтрока.Проект = Проект;
		
		НоваяСтрока.Количество = Количество;
		НоваяСтрока.Стоимость = Сумма;
		
	КонецЕсли;
		
КонецПроцедуры // СформироватьСтрокуДвиженияПоРегиструПродажиСебестоимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ "ЗАКАЗЫ НА ОБСЛУЖИВАНИЕ ОС"

// Процедура формирует движения по регистру "Заказы на обслуживание ОС".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	ХарактерЗатратУУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для целей управленческого учета
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегиструЗаказыНаОбслуживаниеОС(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И ЗначениеЗаполнено(СтрокаВыборки.ЗаказВыпуска)
	   И ТипЗнч(СтрокаВыборки.ЗаказВыпуска) = Тип("ДокументСсылка.ЗаказНаОбслуживаниеОС")
	   И ТипЗнч(СтрокаВыборки.КонечнаяПродукция) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		
		ИмяРегистра = "ЗаказыНаОбслуживаниеОС";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		// В движениях по регистру "Заказы на обслуживание ОС" должны быть заполнены измерения:
		//	- Заказ - Заказ на обслуживание ОС
		//	- ОсновноеСредство
		//	- Номенклатура - услуга по обслуживанию ОС.
		
		// Сформируем движение по регистру "Заказы на обслуживание ОС".
		НоваяСтрока = СтруктураНаборыЗаписей.ЗаказыНаОбслуживаниеОС.Добавить();
		НоваяСтрока.Активность = Истина;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
		НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
		
		НоваяСтрока.Заказ = СтрокаВыборки.ЗаказВыпуска;
		НоваяСтрока.ОсновноеСредство = СтрокаВыборки.КонечнаяПродукция;
		НоваяСтрока.Номенклатура = СтрокаВыборки.Номенклатура;
		НоваяСтрока.Количество = СтрокаВыборки.Количество;
		
	КонецЕсли;
		
КонецПроцедуры // СформироватьДвиженияПоРегиструЗаказыНаОбслуживаниеОС()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ "ПАРТИИ ТОВАРОВ НА СКЛАДАХ"

// Процедура формирует движения по регистру "Партии товаров на складах".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	КодОперацииПартииТоваров - ПеречислениеСсылка.КодыОперацийПартииТоваров - Код операции
//	СтоимостьУУ - Число - Учетная стоимость по управленческому учету
//	СтоимостьБУ - Число - Учетная стоимость по бухгалтерскому учету
//	СтоимостьНУ - Число - Учетная стоимость по налоговому учету
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегистрамПартииТоваровНаСкладах(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	КодОперацииПартииТоваров,
	СтоимостьУУ,
	СтоимостьБУ,
	СтоимостьНУ,
	НДСВходящий,
	НДСКредит,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И Не СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации = Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется
	Тогда
		
		ИмяРегистра = "ПартииТоваровНаСкладах";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		УправлениеЗапасамиПартионныйУчет.СформироватьСтрокуДвиженияПоРегиструПартииТоваровНаСкладах(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			КодОперацииПартииТоваров,
			СтрокаВыборки.Количество,
			СтоимостьУУ,
			0, // СтоимостьНУ
			0, // НДСВходящий
			0, // НДСКредит
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
		// При поступлении по ордеру с правом продажи сторнируем сформированные ордерные партии.
		Если СтрокаВыборки.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру
		   И Не СтрокаВыборки.БезПраваПродажи
		Тогда
			УправлениеЗапасамиПартионныйУчет.СформироватьСтрокуДвиженияПоРегиструПартииТоваровНаСкладах(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру,
				- СтрокаВыборки.Количество,
				0, // СтоимостьУУ,
				0, // СтоимостьНУ
				0, // НДСВходящий
				0, // НДСКредит
				Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
				СтруктураНаборыЗаписей[ИмяРегистра]
			);
		КонецЕсли;
		
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистра = "ПартииТоваровНаСкладахБухгалтерскийУчет";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		УправлениеЗапасамиПартионныйУчет.СформироватьСтрокуДвиженияПоРегиструПартииТоваровНаСкладах(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			КодОперацииПартииТоваров,
			СтрокаВыборки.Количество,
			СтоимостьБУ,
			СтоимостьНУ, 
			НДСВходящий,
			НДСКредит,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегистрамПартииТоваровНаСкладах()

Процедура ПровестиДокументПоПроизводственнымРегистрам(ДокументСсылка, Упр, Бух, ПроведениеОстановлено = Ложь) Экспорт
	
	Если ((ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену"))
	  ИЛИ (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"))
	  ИЛИ (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки"))
	  ИЛИ ((ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры"))
		И ((ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции)
		  ИЛИ (ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика)))) 
	  И (Бух ИЛИ Упр) Тогда
	
		//Очистим движения по партионным регистрам
		Если (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену"))
		  ИЛИ (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"))
		  ИЛИ ((ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки"))
			И (ДокументСсылка.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад)) Тогда
					    
			СтруктураПараметров = Новый Структура();
			ТаблицаСписания = Новый ТаблицаЗначений();
						
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете",Упр);
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете",Бух);
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВМеждународномУчете",Ложь);
						
							
			УправлениеЗапасамиПартионныйУчет.СоздатьНаборыЗаписей(СтруктураПараметров);
			УправлениеЗапасамиПартионныйУчет.ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ДокументСсылка.Дата, ДокументСсылка);
			УправлениеЗапасамиПартионныйУчет.ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания);
		ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки"))
		  И (ДокументСсылка.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру)
		  И Бух Тогда	
			СтруктураПараметров = Новый Структура();
			ТаблицаСписания = Новый ТаблицаЗначений();
						
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете",Ложь);
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете",Бух);
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВМеждународномУчете",Ложь);
						
							
			УправлениеЗапасамиПартионныйУчет.СоздатьНаборыЗаписей(СтруктураПараметров);
			УправлениеЗапасамиПартионныйУчет.ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ДокументСсылка.Дата, ДокументСсылка);
			УправлениеЗапасамиПартионныйУчет.ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания);
		ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры"))
		  И ПроведениеОстановлено	
		  И Бух Тогда	
			СтруктураПараметров = Новый Структура();
			ТаблицаСписания = Новый ТаблицаЗначений();
						
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете",Ложь);
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете",Бух);
			СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВМеждународномУчете",Ложь);
						
							
			УправлениеЗапасамиПартионныйУчет.СоздатьНаборыЗаписей(СтруктураПараметров);
			УправлениеЗапасамиПартионныйУчет.ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ДокументСсылка.Дата, ДокументСсылка);
			УправлениеЗапасамиПартионныйУчет.ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания);
		КонецЕсли;
			  
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Заголовок = "";
		СтруктураШапкиДокумента = Неопределено;
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		
		СтруктураШапкиДокумента.ОтражатьВУправленческомУчете = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И Упр;
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Бух;
		
		УчетнаяПолитикаПолученаУспешно = Истина;
		УчетнаяПолитика = Неопределено;
		УчетнаяПолитикаРегл = Неопределено;
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента.Дата);
			Если УчетнаяПолитика = Неопределено Тогда
				УчетнаяПолитикаПолученаУспешно = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
			Если УчетнаяПолитикаРегл = Неопределено Тогда
				УчетнаяПолитикаПолученаУспешно = Ложь;
			Иначе
				СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль", УчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
				СтруктураШапкиДокумента.Вставить("ЕстьНДС", 		   УчетнаяПолитикаРегл.ЕстьНДС);
			КонецЕсли;
		КонецЕсли;
				
		Если УчетнаяПолитикаПолученаУспешно Тогда
			СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукции(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидДокумента, УчетнаяПолитика, УчетнаяПолитикаРегл);
			СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидДокумента, УчетнаяПолитика, УчетнаяПолитикаРегл, Истина);
		Иначе
			Сообщить("Не удалось сформировать движения по затратам для документа " + ДокументСсылка);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ "НЕЗАВЕРШЕННОЕ ПРОИЗВОДСТВО"

// Процедура заполняет значения ресурсов регистров учета затрат.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	Стоимость - Число - Учетная стоимость выпуска
//	ПостояннаяРазница - Число - Учетная стоимость выпуска в части постоянной разницы
//	ВременнаяРазница - Число - Учетная стоимость выпуска в части временной разницы
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	ИмяРесурсаСтоимость - Строка - Имя для ресурса стоимости
//	СтрокаДвижения - СтрокаТаблицыЗначений - Текущая строка движения по регистру. 
//
Процедура ЗаполнитьЗначенияРесурсовРегистра(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Стоимость,
	СтоимостьНУ,
	НДСВходящий,
	НДСКредит,
	ВидОтраженияВУчете,
	ИмяРесурсаСтоимость,
	ИмяРесурсаСтоимостьНУ,
	СтрокаДвижения)
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		СтрокаДвижения[ИмяРесурсаСтоимость] = Стоимость;
	
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		СтрокаДвижения[ИмяРесурсаСтоимость]   = Стоимость;
		СтрокаДвижения[ИмяРесурсаСтоимостьНУ] = НалоговыйУчет.ОпределитьСтоимостьНУ(СтрокаДвижения.НалоговоеНазначение, СтоимостьНУ);
		СтрокаДвижения.НДСВходящий            = НДСВходящий;
		СтрокаДвижения.НДСКредит              = НДСКредит;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьЗначенияРесурсовРегистра()

// Процедура формирует движения по регистру "Незавершенное производство".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	КодОперацииНезавершенноеПроизводство - ПеречислениеСсылка.КодыОперацийНезавершенноеПроизводство - Код операции
//	Количество - Число - Количество выпуска
//	Стоимость - Число - Учетная стоимость выпуска
//	ПостояннаяРазница - Число - Учетная стоимость выпуска в части постоянной разницы
//	ВременнаяРазница - Число - Учетная стоимость выпуска в части временной разницы
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	ВидДвижения - ВидДвиженияНакопления - Вид движения
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство".
//
Процедура СформироватьСтрокуДвиженияПоРегиструНезавершенноеПроизводство(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	КодОперацииНезавершенноеПроизводство,
	Количество,
	Стоимость,
	СтоимостьНУ,
	НДСВходящий,
	НДСКредит,
	ВидОтраженияВУчете,
	ВидДвижения,
	НаборЗаписейНезавершенноеПроизводство
	)
	
	Если Количество = 0
	   И Стоимость = 0
	   И СтоимостьНУ = 0
	   И НДСВходящий = 0
	   И НДСКредит = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Незавершенное производство" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Затрата - всегда заполняется в случае указания статей затрат с видом затрат "Материальные",
	//		для нематериальных статей затрат должен заполнятся способ распределения затрат.
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты - заполняется, если ведется учет по сериям в НЗП.
	
	// Сформируем движение по регистру "Незавершенное производство".
	НоваяСтрока = НаборЗаписейНезавершенноеПроизводство.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	
	// Заполнение подразделения и заказа зависит от вида отражения в учете.
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		
		НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеПолучатель;
		Заказ = СтрокаВыборки.ЗаказПолучатель;
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
	 
	 	НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
	 	НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеОрганизацииПолучатель;
		Заказ = СтрокаВыборки.ЗаказПолучательРегл;
		
	КонецЕсли;
	
	НоваяСтрока.Заказ = ?(ЗначениеЗаполнено(Заказ), Заказ, Неопределено);
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		Если КодОперацииНезавершенноеПроизводство = Перечисления.КодыОперацийНезавершенноеПроизводство.ОтрицательныеЗатраты Тогда
			НоваяСтрока.СчетУчета = СтрокаВыборки.СчетЗатрат;
			НоваяСтрока.НалоговоеНазначение = СтрокаВыборки.НалоговоеНазначение;
		Иначе
			НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;
			НоваяСтрока.НалоговоеНазначение = СтрокаВыборки.НалоговоеНазначениеПолучатель;
		КонецЕсли;
		
		
	КонецЕсли;
	
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатратПолучатель;
	НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппаПолучатель;
	
	Если СтрокаВыборки.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
		
		Если КодОперацииНезавершенноеПроизводство = Перечисления.КодыОперацийНезавершенноеПроизводство.ОтрицательныеЗатраты Тогда
			НоваяСтрока.Количество = - Количество;
		Иначе
			НоваяСтрока.Количество = Количество;
		КонецЕсли;
		
		НоваяСтрока.Затрата = СтрокаВыборки.Номенклатура;
		
		Если Не СтрокаВыборки.Услуга Тогда
		
			НоваяСтрока.ХарактеристикаЗатраты = СтрокаВыборки.ХарактеристикаНоменклатуры;
			
			Если СтрокаВыборки.ВестиУчетПоСериямВНЗП Тогда
				НоваяСтрока.СерияЗатраты = СтрокаВыборки.СерияНоменклатуры;
			Иначе
				НоваяСтрока.СерияЗатраты = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(СтрокаВыборки.СпособРаспределенияЗатрат) Тогда
			НоваяСтрока.Затрата = СтрокаВыборки.СпособРаспределенияЗатрат;
		Иначе
			НоваяСтрока.Затрата = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.Свойство("КодОперацииНЗП") Тогда
		НоваяСтрока.КодОперации = СтруктураШапкиДокумента.КодОперацииНЗП;
	Иначе
		НоваяСтрока.КодОперации = КодОперацииНезавершенноеПроизводство;
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.Свойство("СписаниеПартий") Тогда
		НоваяСтрока.СписаниеПартий = СтруктураШапкиДокумента.СписаниеПартий;
	Иначе
		НоваяСтрока.СписаниеПартий = Истина;
	КонецЕсли;
	
	Если КодОперацииНезавершенноеПроизводство = Перечисления.КодыОперацийНезавершенноеПроизводство.ОтрицательныеЗатраты Тогда
		ЗаполнитьЗначенияРесурсовРегистра(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			- Стоимость,
			- СтоимостьНУ,
			- НДСВходящий,
			- НДСКредит,
			ВидОтраженияВУчете,
			"Стоимость",
			"СтоимостьНУ",
			НоваяСтрока
			);
			
	Иначе
		ЗаполнитьЗначенияРесурсовРегистра(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Стоимость,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			ВидОтраженияВУчете,
			"Стоимость",
			"СтоимостьНУ",
			НоваяСтрока
			);
			
	КонецЕсли;
		
КонецПроцедуры // СформироватьСтрокуДвиженияПоРегиструНезавершенноеПроизводство()

// Процедура формирует движения по регистру "Незавершенное производство".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	ХарактерЗатратУУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для целей управленческого учета
//	ХарактерЗатратБУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для целей бухгалтерского учета
//	ХарактерЗатратНУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для целей налогового учета
//	КодОперацииНезавершенноеПроизводство - ПеречислениеСсылка.КодыОперацийНезавершенноеПроизводство - Код операции
//	Количество - Число - Количество выпуска
//	СтоимостьУУ - Число - Учетная стоимость по управленческому учету
//	СтоимостьБУ - Число - Учетная стоимость по бухгалтерскому учету
//	СтоимостьНУ - Число - Учетная стоимость по налоговому учету
//	ПостояннаяРазница - Число - Учетная стоимость в части постоянной разницы
//	ВременнаяРазница - Число - Учетная стоимость в части временной разницы
//	ВидДвижения - ВидДвиженияНакопления - Вид движения
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегистрамНезавершенноеПроизводство(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатратУУ,
	ХарактерЗатратБУ,
	ХарактерЗатратНУ,
	КодОперацииНезавершенноеПроизводство,
	Количество,
	СтоимостьУУ,
	СтоимостьБУ,
	СтоимостьНУ,
	НДСВходящий,
	НДСКредит,
	ВидДвижения,
	СтруктураНаборыЗаписей,
	СуммаКорректировкиНалоговогоКредита = 0
	) Экспорт
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И ХарактерЗатратУУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы	Тогда
		
		ИмяРегистра = "НезавершенноеПроизводство";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьСтрокуДвиженияПоРегиструНезавершенноеПроизводство(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			КодОперацииНезавершенноеПроизводство,
			Количество,
			СтоимостьУУ,
			0, // СтоимостьНУ
			0, // НДСВходящий
			0, // НДСКредит
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			ВидДвижения,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	   И ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы	Тогда
		
		ИмяРегистра = "НезавершенноеПроизводствоБухгалтерскийУчет";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьСтрокуДвиженияПоРегиструНезавершенноеПроизводство(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			КодОперацииНезавершенноеПроизводство,
			Количество,
			СтоимостьБУ,
			СтоимостьНУ, 
			НДСВходящий,
			НДСКредит,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			ВидДвижения,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
		
		СформироватьДвиженияПоКорректировкамИспользованияЗатратНУ(
		  	"НезавершенноеПроизводствоБухгалтерскийУчет",
		  	СтруктураШапкиДокумента,
		  	СтрокаВыборки,
			СтоимостьБУ,
		  	НДСВходящий,
		  	НДСКредит,
		  	ВидДвижения,
		  	СтруктураНаборыЗаписей,
		  	КодОперацииНезавершенноеПроизводство,
		  	СуммаКорректировкиНалоговогоКредита
		);
		
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегистрамНезавершенноеПроизводство()

// Процедура формирует движение расход по регистру "Незавершенное производство".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	КодОперацииНезавершенноеПроизводство - ПеречислениеСсылка.КодыОперацийНезавершенноеПроизводство - Код операции
//	Количество - Число - Количество выпуска
//	Стоимость - Число - Учетная стоимость выпуска
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Незавершенное производство".
//
Процедура СформироватьСтрокуРасходПоРегиструНезавершенноеПроизводство(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	КодОперацииНезавершенноеПроизводство,
	Количество,
	Стоимость,
	СтоимостьНУ,
	НДСВходящий,
	НДСКредит,
	ВидОтраженияВУчете,
	НаборЗаписейНезавершенноеПроизводство
	)
	
	// В движениях по регистру "Незавершенное производство" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ,
	//	- Затрата - всегда заполняется в случае указания статей затрат с видом затрат "Материальные",
	//		для нематериальных статей затрат должен заполнятся способ распределения затрат.
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты - заполняется, если ведется учет по сериям в НЗП.
	
	// Сформируем движение по регистру "Незавершенное производство".
	НоваяСтрока = НаборЗаписейНезавершенноеПроизводство.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	
	// Заполнение подразделения и заказа зависит от вида отражения в учете.
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		
		НоваяСтрока.Подразделение = СтруктураШапкиДокумента.Подразделение;
		Заказ = СтрокаВыборки.Заказ;
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
	 
	 	НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
	 	НоваяСтрока.Подразделение = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		Заказ = СтрокаВыборки.ЗаказРегл;
		
	КонецЕсли;
	
	НоваяСтрока.Заказ = ?(ЗначениеЗаполнено(Заказ), Заказ, Неопределено);
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетЗатрат;
		НоваяСтрока.НалоговоеНазначение = СтрокаВыборки.НалоговоеНазначение;
		
	КонецЕсли;
	
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатрат;
	НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппа;
	
	Если СтрокаВыборки.СтатьяЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда  
		
		НоваяСтрока.Количество = Количество;
		НоваяСтрока.Затрата = СтрокаВыборки.Номенклатура;
		
		Если Не СтрокаВыборки.Услуга Тогда
		
			НоваяСтрока.ХарактеристикаЗатраты = СтрокаВыборки.ХарактеристикаНоменклатуры;
			
			Если СтрокаВыборки.ВестиУчетПоСериямВНЗП Тогда
				НоваяСтрока.СерияЗатраты = СтрокаВыборки.СерияНоменклатуры;
			Иначе
				НоваяСтрока.СерияЗатраты = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	НоваяСтрока.КодОперации = КодОперацииНезавершенноеПроизводство;
	НоваяСтрока.СписаниеПартий = Истина;
	
	ЗаполнитьЗначенияРесурсовРегистра(
		СтруктураШапкиДокумента,
		СтрокаВыборки,
		Стоимость,
		СтоимостьНУ,
		НДСВходящий,
		НДСКредит,
		ВидОтраженияВУчете,
		"Стоимость",
		"СтоимостьНУ",
		НоваяСтрока
		);
		
КонецПроцедуры // СформироватьСтрокуРасходПоРегиструНезавершенноеПроизводство()

// Процедура формирует движения расход по регистру "Незавершенное производство".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	ХарактерЗатратУУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для целей управленческого учета
//	ХарактерЗатратБУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для целей бухгалтерского учета
//	ХарактерЗатратНУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для целей налогового учета
//	КодОперацииНезавершенноеПроизводство - ПеречислениеСсылка.КодыОперацийНезавершенноеПроизводство - Код операции
//	Количество - Число - Количество выпуска
//	СтоимостьУУ - Число - Учетная стоимость по управленческому учету
//	СтоимостьБУ - Число - Учетная стоимость по бухгалтерскому учету
//	СтоимостьНУ - Число - Учетная стоимость по налоговому учету
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияРасходПоРегиструНезавершенноеПроизводство(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатратУУ,
	ХарактерЗатратБУ,
	ХарактерЗатратНУ,
	КодОперацииНезавершенноеПроизводство,
	Количество,
	СтоимостьУУ,
	СтоимостьБУ,
	СтоимостьНУ,
	НДСВходящий,
	НДСКредит,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И ХарактерЗатратУУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы	Тогда
		
		ИмяРегистра = "НезавершенноеПроизводство";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьСтрокуРасходПоРегиструНезавершенноеПроизводство(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			КодОперацииНезавершенноеПроизводство,
			Количество,
			СтоимостьУУ,
			0, // СтоимостьНУ
			0, // НДСВходящий
			0, // НДСКредит
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	   И ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы	Тогда
		
		ИмяРегистра = "НезавершенноеПроизводствоБухгалтерскийУчет";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьСтрокуРасходПоРегиструНезавершенноеПроизводство(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			КодОперацииНезавершенноеПроизводство,
			Количество,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияРасходПоРегиструНезавершенноеПроизводство()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ "ЗАТРАТЫ"

// Процедура формирует движения по регистру "Затраты".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	Проект - СправочникСсылка.Проекты или СправочникСсылка.ВидыРаспределенияПоПроектам - Проект для учета затрат
//	Стоимость - Число - Учетная стоимость выпуска
//	ПостояннаяРазница - Число - Учетная стоимость выпуска в части постоянной разницы
//	ВременнаяРазница - Число - Учетная стоимость выпуска в части временной разницы
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	ВидДвижения - ВидДвиженияНакопления - Вид движения
//	НаборЗаписейЗатраты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты".
//
Процедура СформироватьСтрокуДвиженияПоРегиструЗатраты(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Проект,
	Сумма,
	СуммаНУ,
	НДСВходящий,
	НДСКредит,
	ВидОтраженияВУчете,
	ВидДвижения,
	НаборЗаписейЗатраты
	)
	
	Если Сумма = 0
			И СуммаНУ = 0
			И НДСВходящий = 0
			И НДСКредит = 0
	Тогда
		Возврат;
	КонецЕсли; 
	
	// В движениях по регистру "Затраты" должны быть заполнены измерения:
	//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или налоговом или международном учете,
	//	- СтатьяЗатрат,
	//	- НоменклатурнаяГруппа,
	//	- Заказ
	//	- Проект
	
	// Сформируем движение по регистру "Затраты".
	НоваяСтрока = НаборЗаписейЗатраты.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	//Для некоторых видов документов движения по регистру могут формироваться датой оплаты а не датой документа
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
		ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
		НоваяСтрока.Период = УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.ДатаОплаты);
	Иначе
		НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	КонецЕсли;
	
	// Заполнение подразделения и заказа зависит от вида отражения в учете.
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		
		НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеПолучатель;
		НоваяСтрока.Проект = ?(ЗначениеЗаполнено(Проект), Проект, Неопределено);
		Заказ = СтрокаВыборки.ЗаказПолучатель;
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
	 
	 	НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
	 	НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеОрганизацииПолучатель;
		Заказ = СтрокаВыборки.ЗаказПолучательРегл;
		
	КонецЕсли;
	
	НоваяСтрока.Заказ = ?(ЗначениеЗаполнено(Заказ), Заказ, Неопределено);
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;
		
		
		НоваяСтрока.НалоговоеНазначение = СтрокаВыборки.НалоговоеНазначениеПолучатель; 
	КонецЕсли;
	
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатратПолучатель;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	   И СтрокаВыборки.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
		НоваяСтрока.НоменклатурнаяГруппа = Неопределено;
	Иначе
		НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппаПолучатель;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("КодОперации") Тогда
		НоваяСтрока.КодОперации = СтруктураШапкиДокумента.КодОперации;
	Иначе
		НоваяСтрока.КодОперации = Перечисления.КодыОперацийЗатраты.ВнутренниеУслугиНаПостоянныеЗатраты;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("СписаниеПартий") Тогда
		НоваяСтрока.СписаниеПартий = СтруктураШапкиДокумента.СписаниеПартий;
	Иначе
		НоваяСтрока.СписаниеПартий = Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияРесурсовРегистра(
		СтруктураШапкиДокумента,
		СтрокаВыборки,
		Сумма,
		СуммаНУ,
		НДСВходящий,
		НДСКредит,
		ВидОтраженияВУчете,
		"Сумма",
		"СуммаНУ",
		НоваяСтрока
		);
	
КонецПроцедуры // СформироватьСтрокуДвиженияПоРегиструЗатраты()

// Функция проверяет характер затрат на необходимость отражения в регистре "Затраты".
//
// Параметры
//	ХарактерЗатрат – ПеречислениеСсылка.ХарактерЗатрат – Проверяемый характер затрат
//
// Возвращаемое значение:
//	Булево – Истина - расходы отражаются в регистре "Затраты",
//			 Ложь - расходы не отражаются в регистре "Затраты".
//
Функция ПроверитьХарактерЗатратДляРегистраЗатраты(ХарактерЗатрат, ОтражатьВУправленческомУчете = Ложь)
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
	 ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы
	 ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы
	 ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт
     ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы
	Тогда
		ОтражатьВРегистреЗатраты = Истина;
		
	ИначеЕсли ОтражатьВУправленческомУчете
		    И ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
		ОтражатьВРегистреЗатраты = Истина;
		
	Иначе
		ОтражатьВРегистреЗатраты = Ложь;
		
	КонецЕсли;
	
	Возврат ОтражатьВРегистреЗатраты;

КонецФункции // ПроверитьХарактерЗатратДляРегистраЗатраты()

// Процедура формирует движения по регистру "Затраты".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	КодОперацииВыпускПродукцииУУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по управленческому учету
//	КодОперацииВыпускПродукцииБУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по бухгалтерскому учету
//	КодОперацииВыпускПродукцииНУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по налоговому учету
//	СтоимостьУУ - Число - Учетная стоимость по управленческому учету
//	СтоимостьБУ - Число - Учетная стоимость по бухгалтерскому учету
//	СтоимостьНУ - Число - Учетная стоимость по налоговому учету
//	ВидДвижения - ВидДвиженияНакопления - Вид движения
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегистрамЗатраты(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатратУУ,
	ХарактерЗатратБУ,
	ХарактерЗатратНУ,
	СтоимостьУУ,
	СтоимостьБУ,
	СтоимостьНУ,
	НДСВходящий,
	НДСКредит,
	ВидДвижения,
	СтруктураНаборыЗаписей,
	СуммаКорректировкиНалоговогоКредита = 0
	) Экспорт
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И ПроверитьХарактерЗатратДляРегистраЗатраты(ХарактерЗатратУУ, Истина) Тогда
		
		ИмяРегистра = "Затраты";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		РаспределитьСуммуЗатратПоПроектам(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтоимостьУУ,
			ВидДвижения,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);

	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДокумента <> "СписаниеНЗП" или (СтруктураШапкиДокумента.ВидДокумента = "СписаниеНЗП" И СтруктураШапкиДокумента.ОтражатьПоЗатратам) Тогда
		
		//Смартис Лиманчук начало 08.04.2013
		Если НЕ СтруктураШапкиДокумента.Свойство("ПоИнвентаризации") Тогда
			ПроверятьХарактерЗатратБУ = Истина;
		ИначеЕсли НЕ СтруктураШапкиДокумента.ПоИнвентаризации Тогда
			ПроверятьХарактерЗатратБУ = Истина;
		Иначе
			ПроверятьХарактерЗатратБУ = Ложь;
		КонецЕсли;
		//Смартис Лиманчук окончание 08.04.2013
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		   //Смартис Лиманчук начало 08.04.2013
		   //И ПроверитьХарактерЗатратДляРегистраЗатраты(ХарактерЗатратБУ) Тогда
		   И (ПроверитьХарактерЗатратДляРегистраЗатраты(ХарактерЗатратБУ) ИЛИ НЕ ПроверятьХарактерЗатратБУ) Тогда
		   //Смартис Лиманчук окончание 08.04.2013
			
			ИмяРегистра = "ЗатратыБухгалтерскийУчет";
			
			ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
				СтруктураШапкиДокумента, 
				ИмяРегистра,
				СтруктураНаборыЗаписей
			);
			Если Не ПолученНаборЗаписей Тогда
				Возврат;
			КонецЕсли;
			
			СформироватьСтрокуДвиженияПоРегиструЗатраты(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				Неопределено, // Проект
				СтоимостьБУ,
				СтоимостьНУ,
				НДСВходящий,
				НДСКредит,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
				ВидДвижения,
				СтруктураНаборыЗаписей[ИмяРегистра]
			);
			
			СформироватьДвиженияПоКорректировкамИспользованияЗатратНУ(
				"ЗатратыБухгалтерскийУчет",
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СтоимостьБУ,
				НДСВходящий,
				НДСКредит,
				ВидДвижения,
				СтруктураНаборыЗаписей
			);
			
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры // СформироватьДвиженияПоРегистрамЗатраты()

Процедура СформироватьДвиженияПоКорректировкамИспользованияЗатратНУ(
	ИмяРегистраЗатраты,
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	СтоимостьБУ, 
	НДСВходящий,
	НДСКредит,
	ВидДвижения,
	СтруктураНаборыЗаписей, 
	КодОперации = Неопределено,
	СуммаКорректировкиНалоговогоКредита = 0
	)
	
	СуммаКорректировкиНалоговогоКредита = 0;
	
	Если СтрокаВыборки.НеКорректироватьНУ Тогда
		Возврат;
	КонецЕсли;
	
	НалоговоеНазначение        = СтрокаВыборки.НалоговоеНазначение;
	НалоговоеНазначениеПоФакту = СтрокаВыборки.НалоговоеНазначениеПолучатель;
	
	СтруктураКорректировкаНДСКредит = НалоговыйУчет.ПолучитьСуммуКорректировкиНалоговогоКредита(
		НалоговоеНазначение,
		НалоговоеНазначениеПоФакту,
		НДСВходящий,
		НДСКредит, 
		СтоимостьБУ
	);
	
	Если НЕ СтруктураКорректировкаНДСКредит.ЕстьКорректировки Тогда
		Возврат;
	КонецЕсли; 	
	
	СуммаКорректировкиНалоговогоКредита = СтруктураКорректировкаНДСКредит.КорректировкаНДСКредит;
	НДСКредитПоФакту                    = СтруктураКорректировкаНДСКредит.НДСКредитПоФакту;
	СуммаКорректировкиСтоимость         = СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимость;
	СуммаКорректировкиСтоимостьНУ       = СтруктураКорректировкаНДСКредит.СуммаКорректировкиСтоимостьНУ;
	
	Если ИмяРегистраЗатраты = "НезавершенноеПроизводствоБухгалтерскийУчет" Тогда
		ИмяРегистраКорректировки = "КорректировкиНезавершенноеПроизводствоНалоговыйУчет";
		СодержаниеПроводки = "НЗП";
	ИначеЕсли ИмяРегистраЗатраты = "БракВПроизводствеБухгалтерскийУчет" Тогда
		ИмяРегистраКорректировки = "КорректировкиБракВПроизводствеНалоговыйУчет";
		СодержаниеПроводки = "затрат на брак";
	ИначеЕсли ИмяРегистраЗатраты = "ЗатратыБухгалтерскийУчет" Тогда
		ИмяРегистраКорректировки = "КорректировкиЗатратыНалоговыйУчет";
		СодержаниеПроводки = "затрат";
	Иначе
		Возврат;
	КонецЕсли; 

	// Формирование движений по регистру Корректировки*НалоговыйУчет 
	ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
		СтруктураШапкиДокумента, 
		ИмяРегистраКорректировки,
		СтруктураНаборыЗаписей
	);
	
	Если Не ПолученНаборЗаписей Тогда
		Возврат;
	КонецЕсли;
		
	НоваяСтрока = СтруктураНаборыЗаписей[ИмяРегистраКорректировки].Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	
	НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
	
	НоваяСтрока.НалоговоеНазначение       		 = НалоговоеНазначение;		
	НоваяСтрока.НалоговоеНазначениеПоФакту       = НалоговоеНазначениеПоФакту;
	
	НоваяСтрока.НДСКредит                       = НДСКредит;
	НоваяСтрока.НДСКредитПоФакту                = НДСКредитПоФакту;
				
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийКорректировкиИспользованияНалоговыйУчет.ПредполагаемаяКорректрировка;
	
	Если ИмяРегистраКорректировки = "КорректировкиНезавершенноеПроизводствоНалоговыйУчет" Тогда
		НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатратПолучатель;
		НоваяСтрока.Затрата = СтрокаВыборки.Затрата;
	ИначеЕсли ИмяРегистраКорректировки = "КорректировкиБракВПроизводствеНалоговыйУчет" ИЛИ ИмяРегистраКорректировки = "КорректировкиЗатратыНалоговыйУчет" Тогда
		НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатратПолучатель;
	КонецЕсли; 
	
	// отcторнируем стоимость БУ и НУ, а также НДСКредит на сумму корректировки НДС по кор. регистрам
	Если СуммаКорректировкиНалоговогоКредита <> 0 Тогда
				
		// Формирование приходных движений по регистрам затрат в БУ на суммы корректировок
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистраЗатраты,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		Если ИмяРегистраЗатраты = "НезавершенноеПроизводствоБухгалтерскийУчет" Тогда
			
			СформироватьСтрокуДвиженияПоРегиструНезавершенноеПроизводство(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				КодОперации,
				0, // Количество
				СуммаКорректировкиСтоимость,   // Стоимость
				СуммаКорректировкиСтоимостьНУ, // СтоимостьНУ
				0, // НДСВходящий
				+ СуммаКорректировкиНалоговогоКредита, // НДСКредит
				Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
				ВидДвижения,
				СтруктураНаборыЗаписей[ИмяРегистраЗатраты]
			);
			
		ИначеЕсли ИмяРегистраЗатраты = "БракВПроизводствеБухгалтерскийУчет" Тогда
			
			СформироватьСтрокуДвиженияПоРегиструБракВПроизводстве(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СуммаКорректировкиСтоимость,   // Стоимость
				СуммаКорректировкиСтоимостьНУ, // СтоимостьНУ
				0, // НДСВходящий
				+ СуммаКорректировкиНалоговогоКредита, // НДСКредит
				Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
				ВидДвижения,
				СтруктураНаборыЗаписей[ИмяРегистраЗатраты]
			);
			
		ИначеЕсли ИмяРегистраЗатраты = "ЗатратыБухгалтерскийУчет" Тогда
			
			СформироватьСтрокуДвиженияПоРегиструЗатраты(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				Неопределено, // Проект
				СуммаКорректировкиСтоимость,   // Стоимость
				СуммаКорректировкиСтоимостьНУ, // СтоимостьНУ
				0, // НДСВходящий
				+ СуммаКорректировкиНалоговогоКредита, // НДСКредит
				Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
				ВидДвижения,
				СтруктураНаборыЗаписей[ИмяРегистраЗатраты]
			);
			
		КонецЕсли;	
	КонецЕсли;	
	
	// отcторнируем стоимость БУ и НУ на сумму корректировки НДС по проводкам БУ
	// сторнируем только когда восстанавливаем НДС
	Если СтруктураКорректировкаНДСКредит.ВосстановлениеНДС Тогда
			
		ИмяРегистра = "Хозрасчетный";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		НоваяПроводка = СтруктураНаборыЗаписей[ИмяРегистра].Добавить();
		
		НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Активность = Истина;
		НоваяПроводка.Период = СтруктураШапкиДокумента.Дата;
		НоваяПроводка.Содержание  = "Корректировка налогового кредита по использованию " + СодержаниеПроводки;
		
		// проводка вида Кт Кор. счет запасов Кт 6443 Сторно
		
		НоваяПроводка.СчетДт = СтрокаВыборки.СчетДт;		
		
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения"       , СтрокаВыборки.ПодразделениеОрганизацииПолучатель);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппаПолучатель);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         СтрокаВыборки.СтатьяЗатратПолучатель);
		
		НоваяПроводка.Сумма         = СуммаКорректировкиСтоимость;
		НоваяПроводка.СуммаНУДт     = СуммаКорректировкиСтоимостьНУ;
			
		НоваяПроводка.НалоговоеНазначениеДт  = НалоговоеНазначениеПоФакту;
			
		// со счета корректировок
		НоваяПроводка.СчетКт = ПланыСчетов.Хозрасчетный.КорректировкиНалоговогоКредита;
			
		
	КонецЕсли;	
		
КонецПроцедуры // СформироватьДвиженияПоКорректировкамИспользованияЗатратНУ
	
Процедура СформироватьДвиженияПоКорректировкамИспользованияЗатратНУРасширеннаяАналитика(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатратБУ,
	ХарактерЗатратНУ,
	СтоимостьБУ,
	НДСВходящий,
	НДСКредит,
	ВидДвижения,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	) Экспорт
	
	
	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(СтрокаВыборки.НалоговоеНазначение) И (СтрокаВыборки.НалоговоеНазначение <> СтрокаВыборки.НалоговоеНазначениеПолучатель) И (НЕ СтрокаВыборки.НеКорректироватьНУ)) Тогда	
	    Возврат;
	КонецЕсли;
		
	АналитикаВидаУчета = Неопределено;
	АналитикаУчетаЗатрат = Неопределено;
	АналитикаУчетаПартий = Неопределено;
	АналитикаРаспределенияЗатрат = Неопределено;
	УчетЗатратПоНоменклатуре = Истина;
	УчетЗатратПоПроектам = Ложь;
	
	РасширеннаяАналитикаУчета.ПолучитьАналитикуОтраженияЗатрат(
		СтруктураШапкиДокумента,
		СтрокаВыборки,
		Неопределено, //  Проект,
		ХарактерЗатратБУ,
		ХарактерЗатратНУ,
		Неопределено, // КодОперации
		Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете,
		СтруктураКлючиАналитики,
		АналитикаВидаУчета,
		АналитикаУчетаЗатрат,
		АналитикаУчетаПартий,
		АналитикаРаспределенияЗатрат,
		УчетЗатратПоНоменклатуре,
		УчетЗатратПоПроектам
	);
	
	БылиКорректировкиНУ = УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоКорректировкамИспользованияНУ(
		СтруктураШапкиДокумента,
		СтруктураШапкиДокумента.Дата,
		АналитикаВидаУчета,
		АналитикаУчетаЗатрат,
		АналитикаУчетаПартий,
		АналитикаРаспределенияЗатрат,
		АналитикаВидаУчета,
		АналитикаУчетаЗатрат,
		АналитикаУчетаПартий,
		АналитикаРаспределенияЗатрат,
		СтруктураНаборыЗаписей.УчетЗатратРегл,
		СтоимостьБУ,
		НДСВходящий,
		НДСКредит,
		СтрокаВыборки.НалоговоеНазначение // принудительно показываем, что НалоговоеНазначение - отправитель отличается, так как кор. аналитику здесь достать возможности нет
	);
		
КонецПроцедуры // СформироватьДвиженияПоКорректировкамИспользованияЗатратНУРасширеннаяАналитика

// Процедура выполняет распределение затрат по проектам.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	Стоимость - Число - Стоимость затрат
//	ВидДвижения - ВидДвиженияНакопления - Вид движения
//	НаборЗаписейЗатраты - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Затраты".
//
Процедура РаспределитьСуммуЗатратПоПроектам(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Стоимость,
	ВидДвижения,
	НаборЗаписейЗатраты
	)
	
	Если Не СтруктураШапкиДокумента.ВедениеУчетаЗатратПоПроектам Тогда
		Проект = Справочники.Проекты.ПустаяСсылка();
	ИначеЕсли СтруктураШапкиДокумента.Свойство("Проект")
		И ЗначениеЗаполнено(СтруктураШапкиДокумента.Проект)
	Тогда
		Проект = СтруктураШапкиДокумента.Проект;
	Иначе
		Проект = СтрокаВыборки.Проект;
	КонецЕсли;
	
	ВсегоБазаРаспределения = 0;
	Если ЗначениеЗаполнено(Проект)
	   И ТипЗнч(Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам")
	Тогда
		
		МассивСтрок = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьМассивРаспределенияПоПроектам(
			СтруктураШапкиДокумента,
			Проект
		);
		
		МассивКоэф = Новый Массив;
		
		Для Каждого Строка Из МассивСтрок Цикл
			МассивКоэф.Добавить(Строка.ДоляРаспределения);
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + Строка.ДоляРаспределения;
		КонецЦикла;
		
		Если ВсегоБазаРаспределения = 0 Тогда
			ОбщегоНазначения.Сообщение("Не удалось выполнить распределение затрат по виду распределения """ + Проект + """", СтатусСообщения.Внимание);
			Проект = Справочники.Проекты.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
			
	Если ВсегоБазаРаспределения <> 0 Тогда
			
		МассивСтоимость = ОбщегоНазначения.РаспределитьПропорционально(Стоимость, МассивКоэф, 2);
		
		Индекс = 0;
		Для Каждого Строка Из МассивСтрок Цикл
			
			Сумма = ?(МассивСтоимость = Неопределено, 0, МассивСтоимость[Индекс]);
			
			СформироватьСтрокуДвиженияПоРегиструЗатраты(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				Строка.Проект,
				Сумма,
				0, // СуммаНУ
				0, // НДСВходящий
				0, // НДСКредит
				Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
				ВидДвижения,
				НаборЗаписейЗатраты
			);
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	Иначе
		
		СформироватьСтрокуДвиженияПоРегиструЗатраты(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Проект,
			Стоимость,
			0, // СуммаНУ
			0, // НДСВходящий
			0, // НДСКредит
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			ВидДвижения,
			НаборЗаписейЗатраты
		);
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьСуммуЗатратПоПроектам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ "МАТЕРИАЛЫ В ПРОИЗВОДСТВЕ"

// Процедура формирует движения по регистру "Материалы в производстве".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	ХарактерЗатратУУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для целей управленческого учета
//	Количество - Число - Количество выпуска
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегиструМатериалыВПроизводстве(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатратУУ,
	Количество,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И ХарактерЗатратУУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
	   И СтрокаВыборки.ВестиОперативныйУчетОстатковНЗП Тогда
		
		ИмяРегистра = "МатериалыВПроизводстве";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		// Сформируем движение по регистру "Материалы в производстве".
		НоваяСтрока = СтруктураНаборыЗаписей.МатериалыВПроизводстве.Добавить();
		НоваяСтрока.Активность = Истина;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
		
		НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеПолучатель;
		НоваяСтрока.Заказ = СтрокаВыборки.ЗаказПолучатель;
		НоваяСтрока.Затрата = СтрокаВыборки.Номенклатура;
		НоваяСтрока.ХарактеристикаЗатраты = СтрокаВыборки.ХарактеристикаНоменклатуры;
		
		Если СтрокаВыборки.ВестиУчетПоСериямВНЗП Тогда
			НоваяСтрока.СерияЗатраты = СтрокаВыборки.СерияНоменклатуры;
		Иначе
			НоваяСтрока.СерияЗатраты = Неопределено;
		КонецЕсли;
		
		НоваяСтрока.Количество = Количество;
			
		НоваяСтрока.КодОперации = Перечисления.КодыОперацийМатериалыВПроизводстве.СписаниеПартийВПроизводствоОперативно;
		
	КонецЕсли;
		
КонецПроцедуры // СформироватьДвиженияПоРегиструМатериалыВПроизводстве()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ "БРАК В ПРОИЗВОДСТВЕ"

// Процедура формирует движения по регистру "Брак в производстве".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	Стоимость - Число - Учетная стоимость выпуска
//	ПостояннаяРазница - Число - Учетная стоимость выпуска в части постоянной разницы
//	ВременнаяРазница - Число - Учетная стоимость выпуска в части временной разницы
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	ВидДвижения - ВидДвиженияНакопления - Вид движения
//	НаборЗаписейБракВПроизводстве - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Брак в производстве".
//
Процедура СформироватьСтрокуДвиженияПоРегиструБракВПроизводстве(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Сумма,
	СуммаНУ,
	НДСВходящий,
	НДСКредит,
	ВидОтраженияВУчете,
	ВидДвижения,
	НаборЗаписейБракВПроизводстве
	)
	
	Если Сумма = 0
		И СуммаНУ = 0
		И НДСВходящий = 0
		И НДСКредит = 0
	Тогда
		Возврат;
	КонецЕсли; 
	
	// Сформируем движение по регистру "Брак в производстве".
	НоваяСтрока = НаборЗаписейБракВПроизводстве.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	
	// Заполнение подразделения и заказа зависит от вида отражения в учете.
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		
		НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеПолучатель;
		Заказ = СтрокаВыборки.ЗаказПолучатель;
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
	 
	 	НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
	 	НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеОрганизацииПолучатель;
		Заказ = СтрокаВыборки.ЗаказПолучательРегл;
		
	КонецЕсли;
	
	НоваяСтрока.Заказ = ?(ЗначениеЗаполнено(Заказ), Заказ, Неопределено);
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;
		НоваяСтрока.НалоговоеНазначение      = СтрокаВыборки.НалоговоеНазначениеПолучатель;
	КонецЕсли;
	
	НоваяСтрока.СтатьяЗатрат = СтрокаВыборки.СтатьяЗатратПолучатель;
	НоваяСтрока.НоменклатурнаяГруппа = СтрокаВыборки.НоменклатурнаяГруппаПолучатель;
	
	НоваяСтрока.Продукция = СтрокаВыборки.ПродукцияПолучатель;
	НоваяСтрока.ХарактеристикаПродукции = СтрокаВыборки.ХарактеристикаПродукцииПолучатель;
	НоваяСтрока.СерияПродукции = СтрокаВыборки.СерияПродукцииПолучатель;
	
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийБракВПроизводстве.ВнутренниеУслугиНаПостоянныеЗатраты;
	Если СтруктураШапкиДокумента.Свойство("СписаниеПартий") Тогда
		НоваяСтрока.СписаниеПартий = СтруктураШапкиДокумента.СписаниеПартий;
	Иначе
		НоваяСтрока.СписаниеПартий = Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияРесурсовРегистра(
		СтруктураШапкиДокумента,
		СтрокаВыборки,
		Сумма,
		СуммаНУ,
		НДСВходящий,
		НДСКредит,
		ВидОтраженияВУчете,
		"Сумма",
		"СуммаНУ",
		НоваяСтрока
		);
	
КонецПроцедуры // СформироватьСтрокуДвиженияПоРегиструБракВПроизводстве()

// Процедура формирует движения по регистру "Брак в производстве".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	КодОперацииВыпускПродукцииУУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по управленческому учету
//	КодОперацииВыпускПродукцииБУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по бухгалтерскому учету
//	КодОперацииВыпускПродукцииНУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по налоговому учету
//	СтоимостьУУ - Число - Учетная стоимость по управленческому учету
//	СтоимостьБУ - Число - Учетная стоимость по бухгалтерскому учету
//	СтоимостьНУ - Число - Учетная стоимость по налоговому учету
//	ПостояннаяРазница - Число - Учетная стоимость в части постоянной разницы
//	ВременнаяРазница - Число - Учетная стоимость в части временной разницы
//	ВидДвижения - ВидДвиженияНакопления - Вид движения
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегистрамБракВПроизводстве(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатратУУ,
	ХарактерЗатратБУ,
	ХарактерЗатратНУ,
	СтоимостьУУ,
	СтоимостьБУ,
	СтоимостьНУ,
	НДСВходящий,
	НДСКредит,
	ВидДвижения,
	СтруктураНаборыЗаписей,
	СуммаКорректировкиНалоговогоКредита = 0
	) Экспорт
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И ХарактерЗатратУУ = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
		
		ИмяРегистра = "БракВПроизводстве";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьСтрокуДвиженияПоРегиструБракВПроизводстве(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтоимостьУУ,
			0, // СтоимостьНУ
			0, // НДСВходящий
			0, // НДСКредит
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			ВидДвижения,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	   И ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
		
		ИмяРегистра = "БракВПроизводствеБухгалтерскийУчет";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьСтрокуДвиженияПоРегиструБракВПроизводстве(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтоимостьБУ,
	  		СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			ВидДвижения,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
		СформироватьДвиженияПоКорректировкамИспользованияЗатратНУ(
		  	"БракВПроизводствеНалоговыйУчет",
		 	СтруктураШапкиДокумента,
		  	СтрокаВыборки,
			СтоимостьБУ,
		  	НДСВходящий,
		  	НДСКредит,
		  	ВидДвижения,
		 	СтруктураНаборыЗаписей
		);
		
	КонецЕсли;
	
	
КонецПроцедуры // СформироватьДвиженияПоРегистрамБракВПроизводстве()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ БУХГАЛТЕРИИ

// Функция проверяет заполнение счета затрат и счета дебета выпуска продукции.
//
// Параметры
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса
//	СчетЗатрат - ПланыСчетов.Хозрасчетный или ПланыСчетов.Налоговый - Текущий счет затрат
//	СчетДт - ПланыСчетов.Хозрасчетный или ПланыСчетов.Налоговый - Текущий счет выпуска
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//
// Возвращаемое значение:
//   Булево – 	Истина - проверка прошла успешно,
//				Ложь - обнаружены ошибки заполнения счетов. 
//
Функция ПроверитьСчетЗатратИСчетДебетаПоВидуОтраженияВУчете(
	СтрокаВыборки,
	СчетЗатрат, 
	СчетДт,
	ВидОтраженияВУчете
	)
	
	ПроверкаПройдена = Истина;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		ТекстОтраженияВУчете = "по бухгалтерскому учету";
			
		
	Иначе
		ТекстОтраженияВУчете = "";
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетДт) Тогда
		   
		ОбщегоНазначения.Сообщение("Не указан счет дебета выпуска продукции (услуг) " + ТекстОтраженияВУчете + ":
		|Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + "
		|Продукция: " + СтрокаВыборки.Продукция + ", " + 
			СтрокаВыборки.ХарактеристикаПродукции + ", " + 
			СтрокаВыборки.СерияПродукции + "
		|Заказ: " + СтрокаВыборки.Заказ + "
		|Спецификация: " + СтрокаВыборки.Спецификация + "
		|Проводка по выпуску продукции (услуг) не сформирована!
		|", СтатусСообщения.Важное);
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(СчетЗатрат) Тогда
		   
		ОбщегоНазначения.Сообщение("Не указан счет затрат выпуска продукции (услуг) " + ТекстОтраженияВУчете + ":
		|Номенклатурная группа: " + СтрокаВыборки.НоменклатурнаяГруппа + "
		|Продукция: " + СтрокаВыборки.Продукция + ", " + 
			СтрокаВыборки.ХарактеристикаПродукции + ", " + 
			СтрокаВыборки.СерияПродукции + "
		|Заказ: " + СтрокаВыборки.Заказ + "
		|Спецификация: " + СтрокаВыборки.Спецификация + "
		|Проводка по выпуску продукции (услуг) не сформирована!
		|", СтатусСообщения.Важное);
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
	
	
	Возврат ПроверкаПройдена;

КонецФункции // ПроверитьСчетЗатратИСчетДебетаПоВидуОтраженияВУчете()

// Процедура формирует проводку по выпуску продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа
//  Сумма - Число - Сумма проводки
//  ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - характер затрат, по которому отражается списание продукции на расходы
//	КодОперации - ПеречислениеСсылка.КодыОперацийВыпускПродукции - код операции выпуска продукции
//  СтрокаОбхода - ОбходРезультатаЗапроса - Текущая строка обхода результата запроса
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету
//	СоответствиеКодОперацииСодержание - Соответствие - Соответствие кода операции выпуска и содержания проводки
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьПроводкуПоРегиструБухгалтерии(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатрат,
	КодОперации,
	ВидОтраженияВУчете,
	Сумма,
	СуммаНУ,
	УчетнаяПолитикаБух,
	СоответствиеКодОперацииСодержание,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		
		СчетДт     = СтрокаВыборки.СчетДт;
		СчетЗатрат = СтрокаВыборки.СчетЗатрат;
		
		НалоговоеНазначениеДт = СтрокаВыборки.НалоговоеНазначениеПолучатель;
		НалоговоеНазначениеКт = СтрокаВыборки.НалоговоеНазначение;
			
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Не определено формирование проводки по виду отражения в учете: """ + ВидОтраженияВУчете + """.
			|Процедура <СформироватьПроводкуПоРегиструБухгалтерии>");
		Возврат;
			
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		Если Не ПроверитьСчетЗатратИСчетДебетаПоВидуОтраженияВУчете(СтрокаВыборки, СчетЗатрат, СчетДт, ВидОтраженияВУчете) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		КоличествоДт = ?(СтрокаВыборки.СчетДтКоличественный, СтрокаВыборки.Количество, 0);
	КонецЕсли;
	
	Если Сумма = 0 И СуммаНУ = 0 И КоличествоДт = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		
		Если КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад
		 ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги
		 ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты
		 ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство
		 ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаСчет
		Тогда
		 
			НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
			НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
			НоваяПроводка.Активность = Истина;
			НоваяПроводка.Период = СтруктураШапкиДокумента.Дата;
			НоваяПроводка.Содержание = ПроцедурыРасчетаСебестоимостиВыпуска.ПолучитьСодержаниеПроводкиПоКодуОперации(КодОперации, СоответствиеКодОперацииСодержание);
			НоваяПроводка.СписаниеПартий = Истина;
			
			НоваяПроводка.Сумма = Сумма;
			
			НоваяПроводка.СчетДт = СчетДт;
			НоваяПроводка.КоличествоДт = КоличествоДт;
			
			НоваяПроводка.НалоговоеНазначениеДт = НалоговоеНазначениеДт;
			НоваяПроводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(НалоговоеНазначениеДт, СуммаНУ);
			
			Если КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад Тогда
				
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", СтрокаВыборки.Продукция);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады", СтрокаВыборки.СкладПолучатель);
				
			ИначеЕсли КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги Тогда	
				
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаВыборки.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаВыборки.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаВыборки.СубконтоДт3);
				
					
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
				ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве
				ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт
				ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
				ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы
				ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы
				Тогда
				
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтрокаВыборки.ПодразделениеОрганизацииПолучатель);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппаПолучатель);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие 
				ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы 
				Тогда
				
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаВыборки.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаВыборки.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаВыборки.СубконтоДт3);
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
				
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "ОбъектыСтроительства", СтрокаВыборки.ОбъектСтроительства);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
				
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке("Не определено заполнение субконто в проводке по счету: """ + СтрокаВыборки.СчетДт + """.
				|Процедура <СформироватьПроводкуПоРегиструБухгалтерии>");
				
			КонецЕсли;
			
			СчетКт = СчетЗатрат;
					
			НоваяПроводка.СчетКт = СчетКт;
			
			НоваяПроводка.НалоговоеНазначениеКт = НалоговоеНазначениеКт;
			НоваяПроводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(НалоговоеНазначениеКт, СуммаНУ);
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтруктураШапкиДокумента.ПодразделениеОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
			
		ИначеЕсли КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч
			  ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс Тогда
			  
			НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
			НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
			НоваяПроводка.Активность = Истина;
			НоваяПроводка.Период = СтруктураШапкиДокумента.Дата;
			НоваяПроводка.Содержание = ПроцедурыРасчетаСебестоимостиВыпуска.ПолучитьСодержаниеПроводкиПоКодуОперации(КодОперации, СоответствиеКодОперацииСодержание);
			НоваяПроводка.СписаниеПартий = Истина;
			
			НоваяПроводка.Сумма = Сумма;
			
			НоваяПроводка.СчетДт = СчетДт;
			НоваяПроводка.КоличествоДт = КоличествоДт;
			
			НоваяПроводка.НалоговоеНазначениеДт = НалоговоеНазначениеДт;
			НоваяПроводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеДт, СуммаНУ);
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтрокаВыборки.ПодразделениеОрганизацииПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппаПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
			
			НоваяПроводка.СчетКт = СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтруктураШапкиДокумента.ПодразделениеОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатрат);
			
			НоваяПроводка.НалоговоеНазначениеКт = НалоговоеНазначениеКт;
			НоваяПроводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеКт, СуммаНУ);
			
			
		ИначеЕсли КодОперации = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП Тогда
			  
			НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
			НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
			НоваяПроводка.Активность = Истина;
			НоваяПроводка.Период = СтруктураШапкиДокумента.Дата;
			НоваяПроводка.Содержание = ПроцедурыРасчетаСебестоимостиВыпуска.ПолучитьСодержаниеПроводкиПоКодуОперации(КодОперации, СоответствиеКодОперацииСодержание);
			НоваяПроводка.СписаниеПартий = Истина;
			
			НоваяПроводка.Сумма = Сумма;
			
			НоваяПроводка.СчетДт = СчетЗатрат;
			НоваяПроводка.КоличествоДт = КоличествоДт;
			
			НоваяПроводка.НалоговоеНазначениеДт = НалоговоеНазначениеДт;
			НоваяПроводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеДт, СуммаНУ);
			
			
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтрокаВыборки.ПодразделениеОрганизацииПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппаПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
			
			СчетКт = СтрокаВыборки.СчетКт;
			
			НоваяПроводка.СчетКт = СчетКт;
			
			НоваяПроводка.НалоговоеНазначениеКт = НалоговоеНазначениеКт;
			НоваяПроводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеКт, СуммаНУ);
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 1, СтрокаВыборки.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 2, СтрокаВыборки.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 3, СтрокаВыборки.СубконтоДт3);
			
		ИначеЕсли КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП
			ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс
		Тогда
			  
			НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
			НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
			НоваяПроводка.Активность = Истина;
			НоваяПроводка.Период = СтруктураШапкиДокумента.Дата;
			НоваяПроводка.Содержание = ПроцедурыРасчетаСебестоимостиВыпуска.ПолучитьСодержаниеПроводкиПоКодуОперации(КодОперации, СоответствиеКодОперацииСодержание);
			НоваяПроводка.СписаниеПартий = Истина;
			
			НоваяПроводка.Сумма = Сумма;
			
			НоваяПроводка.СчетДт = СчетДт;
			НоваяПроводка.КоличествоДт = КоличествоДт;
			
			НоваяПроводка.НалоговоеНазначениеДт = НалоговоеНазначениеДт;
			НоваяПроводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеДт, СуммаНУ);
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаВыборки.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаВыборки.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаВыборки.СубконтоДт3);
			
			НоваяПроводка.СчетКт = СчетЗатрат;
			
			НоваяПроводка.НалоговоеНазначениеКт = НалоговоеНазначениеКт;
			НоваяПроводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеКт, СуммаНУ);
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтруктураШапкиДокумента.ПодразделениеОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатрат);
			
		ИначеЕсли КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости Тогда
			
			НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
			НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
			НоваяПроводка.Активность = Истина;
			НоваяПроводка.Период = СтруктураШапкиДокумента.Дата;
			НоваяПроводка.Содержание = ПроцедурыРасчетаСебестоимостиВыпуска.ПолучитьСодержаниеПроводкиПоКодуОперации(КодОперации, СоответствиеКодОперацииСодержание);
			НоваяПроводка.СписаниеПартий = Истина;
			
			Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы Тогда
				// По возвратным отходам - проводка вида 201-231 сторно, для того, чтобы были сторно обороты по 8 классу
				
				НоваяПроводка.Сумма = -Сумма;
				
				НоваяПроводка.СчетКт = СчетДт;
				НоваяПроводка.КоличествоКт = -КоличествоДт;
				
				НоваяПроводка.НалоговоеНазначениеКт = НалоговоеНазначениеДт;
				НоваяПроводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеКт, -СуммаНУ);
				
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Номенклатура", СтрокаВыборки.Продукция);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Склады", СтрокаВыборки.СкладПолучатель);
				
				НоваяПроводка.СчетДт = СчетЗатрат;
				
				НоваяПроводка.НалоговоеНазначениеДт = НалоговоеНазначениеКт;
				НоваяПроводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеДт, -СуммаНУ);
				
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтруктураШапкиДокумента.ПодразделениеОрганизации);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
				
			Иначе	
			
				НоваяПроводка.Сумма = Сумма;
				
				НоваяПроводка.СчетДт = СчетДт;
				НоваяПроводка.КоличествоДт = КоличествоДт;
				
				НоваяПроводка.НалоговоеНазначениеДт = НалоговоеНазначениеДт;
				НоваяПроводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеДт, СуммаНУ);
				
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", СтрокаВыборки.Продукция);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады", СтрокаВыборки.СкладПолучатель);
				Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Контрагенты", СтрокаВыборки.Контрагент);
				КонецЕсли;
				
				Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку
				   И КодОперации <> Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости	
				Тогда
					НоваяПроводка.СчетКт = СчетЗатрат;
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Номенклатура", СтрокаВыборки.Продукция);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Контрагенты", СтрокаВыборки.Контрагент);
					
				ИначеЕсли СтрокаВыборки.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
					НоваяПроводка.СчетКт = СчетЗатрат;
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения", СтруктураШапкиДокумента.ПодразделениеОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
				КонецЕсли;
				
				НоваяПроводка.НалоговоеНазначениеКт = НалоговоеНазначениеКт;
				НоваяПроводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеКт, СуммаНУ);
				
			КонецЕсли;	
			
		ИначеЕсли КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч
			ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс
		Тогда
			
			НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
			НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
			НоваяПроводка.Активность = Истина;
			НоваяПроводка.Период = СтруктураШапкиДокумента.Дата;
			НоваяПроводка.Содержание = ПроцедурыРасчетаСебестоимостиВыпуска.ПолучитьСодержаниеПроводкиПоКодуОперации(КодОперации, СоответствиеКодОперацииСодержание);
			НоваяПроводка.СписаниеПартий = Истина;
			
			НоваяПроводка.Сумма = - Сумма;
			
			
			
			Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
				НоваяПроводка.СчетДт = СчетЗатрат;
				НоваяПроводка.КоличествоДт = БухгалтерскийУчет.КоличествоВПроводку(СчетЗатрат, - КоличествоДт);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", СтрокаВыборки.Продукция);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Контрагенты", СтрокаВыборки.Контрагент);
				
			ИначеЕсли СтрокаВыборки.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
				НоваяПроводка.СчетДт = СчетЗатрат;
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения", СтруктураШапкиДокумента.ПодразделениеОрганизации);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаВыборки.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат", СтрокаВыборки.СтатьяЗатратПолучатель);
			КонецЕсли;
			
			НоваяПроводка.НалоговоеНазначениеДт = НалоговоеНазначениеКт;
			НоваяПроводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеДт, -СуммаНУ);
			
			НоваяПроводка.СчетКт = СчетДт;
			НоваяПроводка.КоличествоКт = - КоличествоДт;
			
			НоваяПроводка.НалоговоеНазначениеКт = НалоговоеНазначениеДт;
			НоваяПроводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(НоваяПроводка.НалоговоеНазначениеКт, -СуммаНУ);
			
			
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Номенклатура", СтрокаВыборки.Продукция);
			Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
			  И НоваяПроводка.СчетКт.Забалансовый Тогда
			    //При использовании расширенной аналитики учет материалов принятых в переработку в разрезе складов не ведется
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Склады", Справочники.Склады.ПустаяСсылка());  
			Иначе	
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Склады", СтрокаВыборки.СкладПолучатель);
			КонецЕсли;	
			Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Контрагенты", СтрокаВыборки.Контрагент);
			КонецЕсли;
			
			
		// Выдача сообщения об ошибке по коду операции, который не предусмотрен в процедуре.
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Не сформирована проводка по коду операции: """ + КодОперации + """.
				|Процедура <СформироватьПроводкуПоРегиструБухгалтерии>");
			
		КонецЕсли;
		
		Если СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			// Давальческое сырье не отражается в движениях регистра по налоговому учету.
			НоваяПроводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(); 
			НоваяПроводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(); 
			НоваяПроводка.СуммаНУДт = 0;
			НоваяПроводка.СуммаНУКт = 0;
		КонецЕсли;	
	
	КонецЕсли;
		
КонецПроцедуры // СформироватьПроводкуПоРегиструБухгалтерии()

// Процедура формирует движения по регистру бухгалтерии "Хозрасчетный".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	СтоимостьБУ - Число - Учетная стоимость по бухгалтерскому учету
//	СтоимостьНУ - Число - Учетная стоимость по налоговому учету
//	ХарактерЗатратБУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для целей бухгалтерского учета
//	КодОперацииВыпускПродукцииБУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по бухгалтерскому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету
//	СоответствиеКодОперацииСодержание - Соответствие - Соответствие кода операции выпуска и содержания проводки
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегиструБухгалтерии(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ХарактерЗатратБУ,
	КодОперацииВыпускПродукцииБУ,
	СтоимостьБУ,
	СтоимостьНУ,
	УчетнаяПолитикаБух,
	СоответствиеКодОперацииСодержание,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистра = "Хозрасчетный";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьПроводкуПоРегиструБухгалтерии(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			ХарактерЗатратБУ,
			КодОперацииВыпускПродукцииБУ,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			СтоимостьБУ,
			СтоимостьНУ,
			УчетнаяПолитикаБух,
			СоответствиеКодОперацииСодержание,
			СтруктураНаборыЗаписей[ИмяРегистра]
			);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструБухгалтерии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО ВЫПУСКУ ПРОДУКЦИИ

// Процедура формирует движений по выпуску продукции (наработка).
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	РезультатЗапросаПоВыпуску - РезультатЗапроса - Результат запроса по выпуску продукции
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияВыпускПродукцииНаработка(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоВыпуску,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	)
	
	ВыборкаПоВыпускуПродукции = РезультатЗапросаПоВыпуску.Выбрать();
	Пока ВыборкаПоВыпускуПродукции.Следующий() Цикл
		
		Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
			
			ДвиженияПоРегистрамУчетЗатратВыпускПродукцииНаработка(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции,
				ВыборкаПоВыпускуПродукции.Количество,
				ВыборкаПоВыпускуПродукции.КоличествоДоделка,
				0, // СтоимостьУУ,
				0, // СтоимостьБУ,
				0, // СтоимостьНУ,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
			);
		Иначе
		
			СформироватьДвиженияПоРегистрамВыпускПродукцииНаработка(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции,
				ВыборкаПоВыпускуПродукции.Количество,
				ВыборкаПоВыпускуПродукции.КоличествоДоделка,
				СтруктураНаборыЗаписей
			);
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры // СформироватьДвиженияВыпускПродукцииНаработка()

// Функция получает массив строк распредедения по проектам для строки выпуска продукции.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//
// Возвращаемое значение:
//	Массив - Массив строк базы распределения
//
Функция ПолучитьМассивРаспределенияВыпускаПродукцииПоПроектам(
	СтруктураШапкиДокумента,
	СтрокаВыборки
	)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	 ИЛИ Не СтруктураШапкиДокумента.ВедениеУчетаЗатратПоПроектам
	Тогда
		Проект = Справочники.Проекты.ПустаяСсылка();
	ИначеЕсли СтруктураШапкиДокумента.Свойство("Проект")
		И ЗначениеЗаполнено(СтруктураШапкиДокумента.Проект)
	Тогда
		Проект = СтруктураШапкиДокумента.Проект;
	Иначе
		Проект = СтрокаВыборки.Проект;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проект)
	   И ТипЗнч(Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам")
	Тогда
		МассивСтрок = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьМассивРаспределенияПоПроектам(
			СтруктураШапкиДокумента,
			Проект
		);
		
	Иначе
		МассивСтрок = Новый Массив;
				
	КонецЕсли;
			
	Возврат МассивСтрок;
	
КонецФункции // ПолучитьМассивРаспределенияВыпускаПродукцииПоПроектам()

// Процедура формирует движения по выпуску продукции.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ВыборкаПоВыпускуПродукции - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	ХарактерЗатратУУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат по управленческому учету
//	ХарактерЗатратБУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат по бухгалтерскому учету
//	ХарактерЗатратНУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат по налоговому учету
//	КодОперацииВыпускПродукцииУУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по управленческому учету
//	КодОперацииВыпускПродукцииБУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по бухгалтерскому учету
//	КодОперацииВыпускПродукцииНУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по налоговому учету
//	Количество - Число - Количество выпуска
//	КоличествоДоделка - Число - Количество выпуска (доделка)
//	СтоимостьУУ - Число - Учетная стоимость по управленческому учету
//	СтоимостьБУ - Число - Учетная стоимость по бухгалтерскому учету
//	СтоимостьНУ - Число - Учетная стоимость по налоговому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету
//	СоответствиеКодОперацииСодержание - Соответствие - Соответствие кода операции выпуска и содержания проводки
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоВыпускуПродукции(
	СтруктураШапкиДокумента,
	ВыборкаПоВыпускуПродукции,
	ХарактерЗатратУУ,
	ХарактерЗатратБУ,
	ХарактерЗатратНУ,
	КодОперацииВыпускПродукцииУУ,
	КодОперацииВыпускПродукцииБУ,
	КодОперацииВыпускПродукцииНУ,
	Количество,
	КоличествоДоделка,
	СтоимостьУУ,
	СтоимостьБУ,
	СтоимостьНУ,
	НДСВходящий,
	НДСКредит,
	УчетнаяПолитикаБух,
	СоответствиеКодОперацииСодержание,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		
		Если КоличествоДоделка > 0
		   И Количество <> 0
		Тогда
			КоличествоВыпуск = Макс(Количество - КоличествоДоделка, 0);
			СтоимостьВыпускУУ = КоличествоВыпуск * СтоимостьУУ / Количество;
			СтоимостьВыпускБУ = КоличествоВыпуск * СтоимостьБУ / Количество;
			СтоимостьВыпускНУ = КоличествоВыпуск * СтоимостьНУ / Количество;
			НДСВходящийВыпускНУ = КоличествоВыпуск * НДСВходящий / Количество;
			НДСКредитВыпускНУ = КоличествоВыпуск * НДСКредит / Количество;
			
			СтоимостьДоделкаУУ = СтоимостьУУ - СтоимостьВыпускУУ;
			СтоимостьДоделкаБУ = СтоимостьБУ - СтоимостьВыпускБУ;
			СтоимостьДоделкаНУ = СтоимостьНУ - СтоимостьВыпускНУ;
			НДСВходящийДоделкаНУ = НДСВходящий - НДСВходящийВыпускНУ;
			НДСКредитДоделкаНУ = НДСКредит - НДСКредитВыпускНУ;
			
		Иначе
			КоличествоВыпуск = Количество;
			СтоимостьВыпускУУ = СтоимостьУУ;
			СтоимостьВыпускБУ = СтоимостьБУ;
			СтоимостьВыпускНУ = СтоимостьНУ;
			НДСВходящийВыпускНУ = НДСВходящий;
			НДСКредитВыпускНУ = НДСКредит;
			
			СтоимостьНаработкаУУ = 0;
			СтоимостьНаработкаБУ = 0;
			СтоимостьНаработкаНУ = 0;
			НДСВходящийНаработкаНУ = 0;
			НДСКредитНаработкаНУ = 0;
		КонецЕсли;
		
		// Получим массив строк для распределения выпуска продукции по проектам.
		МассивСтрокБазыРаспределения = ПолучитьМассивРаспределенияВыпускаПродукцииПоПроектам(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции
		);
		
		Если КоличествоВыпуск > 0 Тогда
			ДвиженияПоРегистрамВыпускПродукцииИУслуг(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции,
				Перечисления.ВидыВыпуска.Выпуск,
				МассивСтрокБазыРаспределения,
				КодОперацииВыпускПродукцииУУ,
				КодОперацииВыпускПродукцииБУ,
				КоличествоВыпуск,
				СтоимостьВыпускУУ,
				СтоимостьВыпускБУ,
				СтоимостьВыпускНУ,
				НДСВходящийВыпускНУ,
				НДСКредитВыпускНУ,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
			);
		КонецЕсли;
		
		Если КоличествоДоделка > 0 Тогда
			ДвиженияПоРегистрамВыпускПродукцииИУслуг(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции,
				Перечисления.ВидыВыпуска.Наработка,
				МассивСтрокБазыРаспределения,
				КодОперацииВыпускПродукцииУУ,
				КодОперацииВыпускПродукцииБУ,
				КоличествоДоделка,
				СтоимостьДоделкаУУ,
				СтоимостьДоделкаБУ,
				СтоимостьДоделкаНУ,
				НДСВходящийДоделкаНУ,
				НДСКредитДоделкаНУ,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
			);
		КонецЕсли;
		
	Иначе
				
		СформироватьДвиженияПоРегистрамВыпускПродукции(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			ХарактерЗатратУУ,
			ХарактерЗатратБУ,
			ХарактерЗатратНУ,
			КодОперацииВыпускПродукцииУУ,
			КодОперацииВыпускПродукцииБУ,
			КодОперацииВыпускПродукцииНУ,
			Количество,
			КоличествоДоделка,
			СтоимостьУУ,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			СтруктураНаборыЗаписей
		);
				
		Если КоличествоДоделка > 0 Тогда
						
			СформироватьДвиженияПоРегистрамВыпускПродукцииНаработка(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции,
				Количество,
				КоличествоДоделка,
				СтруктураНаборыЗаписей
			);
						
		КонецЕсли;
		
	КонецЕсли;

	СформироватьДвиженияПоРегиструБухгалтерии(
		СтруктураШапкиДокумента,
		ВыборкаПоВыпускуПродукции,
		ХарактерЗатратБУ,
		КодОперацииВыпускПродукцииБУ,
		СтоимостьБУ,
		СтоимостьНУ,
		УчетнаяПолитикаБух,
		СоответствиеКодОперацииСодержание,
		СтруктураНаборыЗаписей
	);
	
КонецПроцедуры // СформироватьДвиженияПоВыпускуПродукции(

// Процедура формирует движения по выпуску продукции на склад.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ВыборкаПоВыпускуПродукции - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	КодОперацииВыпускПродукции - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции
//	КодОперацииПартииТоваров - ПеречислениеСсылка.КодыОперацийПартииТоваров - Код операции
//	СтоимостьУУ - Число - Учетная стоимость по управленческому учету
//	СтоимостьБУ - Число - Учетная стоимость по бухгалтерскому учету
//	СтоимостьНУ - Число - Учетная стоимость по налоговому учету
//	ПроведениеПоПартиям - Булево - Признак вызова процедуры при восстановлении последовательности партионного учета
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоВыпускуПродукцииНаСклад(
	СтруктураШапкиДокумента,
	ВыборкаПоВыпускуПродукции,
	КодОперацииВыпускПродукции,
	КодОперацииПартииТоваров,
	СтоимостьУУ,
	СтоимостьБУ,
	СтоимостьНУ,
	НДСВходящий,
	НДСКредит,
	ПроведениеПоПартиям,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		
		Количество = ВыборкаПоВыпускуПродукции.Количество;
		КоличествоДоделка = ВыборкаПоВыпускуПродукции.КоличествоДоделка;
		
		Если КоличествоДоделка > 0
		   И Количество <> 0
		Тогда
			КоличествоВыпуск = Макс(Количество - КоличествоДоделка, 0);
			СтоимостьВыпускУУ = КоличествоВыпуск * СтоимостьУУ / Количество;
			СтоимостьВыпускБУ = КоличествоВыпуск * СтоимостьБУ / Количество;
			СтоимостьВыпускНУ = КоличествоВыпуск * СтоимостьНУ / Количество;
			НДСВходящийВыпускНУ = КоличествоВыпуск * НДСВходящий / Количество;
			НДСКредитВыпускНУ = КоличествоВыпуск * НДСКредит / Количество;
			
			СтоимостьДоделкаУУ = СтоимостьУУ - СтоимостьВыпускУУ;
			СтоимостьДоделкаБУ = СтоимостьБУ - СтоимостьВыпускБУ;
			СтоимостьДоделкаНУ = СтоимостьНУ - СтоимостьВыпускНУ;
			НДСВходящийДоделкаНУ = НДСВходящий - НДСВходящийВыпускНУ;
			НДСКредитДоделкаНУ = НДСКредит - НДСКредитВыпускНУ;
		Иначе
			КоличествоВыпуск = Количество;
			СтоимостьВыпускУУ = СтоимостьУУ;
			СтоимостьВыпускБУ = СтоимостьБУ;
			СтоимостьВыпускНУ = СтоимостьНУ;
			НДСВходящийВыпускНУ = НДСВходящий;
			НДСКредитВыпускНУ = НДСКредит;
			
			СтоимостьНаработкаУУ = 0;
			СтоимостьНаработкаБУ = 0;
			СтоимостьНаработкаНУ = 0;
			НДСВходящийНаработкаНУ = 0;
			НДСКредитНаработкаНУ = 0;
			
		КонецЕсли;

		Если КоличествоВыпуск > 0 Тогда
			ДвиженияПоРегистрамУчетЗатратВыпускПродукции(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции,
				Перечисления.ВидыВыпуска.Выпуск,
				Новый Массив,
				КодОперацииВыпускПродукции,
				КодОперацииВыпускПродукции,
				КоличествоВыпуск,
				СтоимостьВыпускУУ,
				СтоимостьВыпускБУ,
				СтоимостьВыпускНУ,
				НДСВходящийВыпускНУ,
				НДСКредитВыпускНУ,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
			);
		КонецЕсли;
		
		Если КоличествоДоделка > 0 Тогда
			ДвиженияПоРегистрамУчетЗатратВыпускПродукции(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции,
				Перечисления.ВидыВыпуска.Наработка,
				Новый Массив,
				КодОперацииВыпускПродукции,
				КодОперацииВыпускПродукции,
				КоличествоДоделка,
				СтоимостьДоделкаУУ,
				СтоимостьДоделкаБУ,
				СтоимостьДоделкаНУ,
				НДСВходящийДоделкаНУ,
				НДСКредитДоделкаНУ,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
			);
		КонецЕсли;
		
	Иначе
	
		СформироватьДвиженияПоРегистрамПартииТоваровНаСкладах(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			КодОперацииПартииТоваров,
			СтоимостьУУ,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			СтруктураНаборыЗаписей
			);
			
	КонецЕсли;
	
		
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И Не ПроведениеПоПартиям Тогда
			
		СформироватьДвиженияПоРегиструТоварыНаСкладах(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			СтруктураНаборыЗаписей
			);
		
		СформироватьДвиженияПоРегиструТоварыВРезервеНаСкладах(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			СтруктураНаборыЗаписей
			);
			
	КонецЕсли;
		
	Если Не ПроведениеПоПартиям Тогда
		СформироватьДвиженияПоРегиструТоварыОрганизаций(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			СтруктураНаборыЗаписей
			);
			
		СформироватьДвиженияПоРегиструТоварыОрганизацийРегл(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			СтруктураНаборыЗаписей
			);
			
	КонецЕсли;

	
КонецПроцедуры // СформироватьДвиженияПоВыпускуПродукцииНаСклад()

// Процедура формирует движения по регистрам учета затрат.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ВыборкаПоВыпускуПродукции - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	ХарактерЗатратУУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для целей управленческого учета
//	ХарактерЗатратБУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для целей бухгалтерского учета
//	ХарактерЗатратНУ - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат для целей налогового учета
//	КодОперацииВыпускПродукцииУУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по управленческому учету
//	КодОперацииВыпускПродукцииБУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по бухгалтерскому учету
//	Количество - Число - Количество выпуска
//	КоличествоДоделка - Число - Количество выпуска (доделка)
//	СтоимостьУУ - Число - Учетная стоимость по управленческому учету
//	СтоимостьБУ - Число - Учетная стоимость по бухгалтерскому учету
//	СтоимостьНУ - Число - Учетная стоимость по налоговому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету
//	ПроведениеПоПартиям - Булево - Признак вызова процедуры при восстановлении последовательности партионного учета
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоВыпускуПродукцииНаЗатраты(
	СтруктураШапкиДокумента,
	ВыборкаПоВыпускуПродукции,
	ХарактерЗатратУУ,
	ХарактерЗатратБУ,
	ХарактерЗатратНУ,
	КодОперацииВыпускПродукцииУУ,
	КодОперацииВыпускПродукцииБУ,
	Количество,
	КоличествоДоделка,
	СтоимостьУУ,
	СтоимостьБУ,
	СтоимостьНУ,
	НДСВходящий,
	НДСКредит,
	УчетнаяПолитикаБух,
	ПроведениеПоПартиям,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей,
	СуммаКорректировкиНалоговогоКредита = 0
	)
	
	// Документ "Оприходование материалов из производства" при использовании расширенной аналитики в данной процедуре
	// обрабатывать не нужно, все движения сформированы ранее.
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
	   И ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства")
	Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		
		Если КоличествоДоделка > 0
		   И Количество <> 0
		Тогда
			КоличествоВыпуск = Макс(Количество - КоличествоДоделка, 0);
			СтоимостьВыпускУУ = КоличествоВыпуск * СтоимостьУУ / Количество;
			СтоимостьВыпускБУ = КоличествоВыпуск * СтоимостьБУ / Количество;
			СтоимостьВыпускНУ = КоличествоВыпуск * СтоимостьНУ / Количество;
			НДСВходящийВыпускНУ = КоличествоВыпуск * НДСВходящий / Количество;
			НДСКредитВыпускНУ 	= КоличествоВыпуск * НДСКредит / Количество;
			
			СтоимостьДоделкаУУ = СтоимостьУУ - СтоимостьВыпускУУ;
			СтоимостьДоделкаБУ = СтоимостьБУ - СтоимостьВыпускБУ;
			СтоимостьДоделкаНУ = СтоимостьНУ - СтоимостьВыпускНУ;
			НДСВходящийДоделкаНУ = НДСВходящий - НДСВходящийВыпускНУ;
			НДСКредитДоделкаНУ   = НДСКредит - НДСКредитВыпускНУ;
			
		Иначе
			КоличествоВыпуск = Количество;
			СтоимостьВыпускУУ = СтоимостьУУ;
			СтоимостьВыпускБУ = СтоимостьБУ;
			СтоимостьВыпускНУ = СтоимостьНУ;
			НДСВходящийВыпускНУ = НДСВходящий;
			НДСКредитВыпускНУ   = НДСКредит;
			
			СтоимостьНаработкаУУ = 0;
			СтоимостьНаработкаБУ = 0;
			СтоимостьНаработкаНУ = 0;
			НДСВходящийНаработкаНУ = 0;
			НДСКредитНаработкаНУ = 0;
		КонецЕсли;
		
		// Получим массив строк для распределения выпуска продукции по проектам.
		МассивСтрокБазыРаспределения = ПолучитьМассивРаспределенияВыпускаПродукцииПоПроектам(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции
		);
		
		Если КоличествоВыпуск > 0 Тогда
			ДвиженияПоРегистрамУчетЗатратВыпускПродукции(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции,
				Перечисления.ВидыВыпуска.Выпуск,
				МассивСтрокБазыРаспределения,
				КодОперацииВыпускПродукцииУУ,
				КодОперацииВыпускПродукцииБУ,
				КоличествоВыпуск,
				СтоимостьВыпускУУ,
				СтоимостьВыпускБУ,
				СтоимостьВыпускНУ,
				НДСВходящийВыпускНУ,
				НДСКредитВыпускНУ,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
			);
		КонецЕсли;
		
		Если КоличествоДоделка > 0 Тогда
			ДвиженияПоРегистрамУчетЗатратВыпускПродукции(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции,
				Перечисления.ВидыВыпуска.Наработка,
				МассивСтрокБазыРаспределения,
				КодОперацииВыпускПродукцииУУ,
				КодОперацииВыпускПродукцииБУ,
				КоличествоДоделка,
				СтоимостьДоделкаУУ,
				СтоимостьДоделкаБУ,
				СтоимостьДоделкаНУ,
				НДСВходящийДоделкаНУ,
				НДСКредитДоделкаНУ,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
			);
		КонецЕсли;

	Иначе
		
		КодОперацииНезавершенноеПроизводство = ПолучитьКодОперацииНезавершенноеПроизводство(СтруктураШапкиДокумента);
	
		// Сформируем расход по регистру "Незавершенное производство" для документа по фиксированной стоимости.
		Если (ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаНЗП")
			 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.СписаниеНЗП"))
		   И СтруктураШапкиДокумента.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
		   
		    ХарактерЗатратРасход = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
			
			СформироватьДвиженияРасходПоРегиструНезавершенноеПроизводство(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции,
				ХарактерЗатратРасход,
				ХарактерЗатратРасход,
				ХарактерЗатратРасход,
				КодОперацииНезавершенноеПроизводство,
				Количество,
				СтоимостьУУ,
				СтоимостьБУ,
				СтоимостьНУ,
				НДСВходящий,
				НДСКредит,
				СтруктураНаборыЗаписей
			);
				
		КонецЕсли;
		
		Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
			ВидДвижения = ВидДвиженияНакопления.Расход;
		Иначе
			ВидДвижения = ВидДвиженияНакопления.Приход;
		КонецЕсли;
		
		СформироватьДвиженияПоРегистрамНезавершенноеПроизводство(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			ХарактерЗатратУУ,
			ХарактерЗатратБУ,
			ХарактерЗатратНУ,
			КодОперацииНезавершенноеПроизводство,
			Количество,
			СтоимостьУУ,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			ВидДвижения,
			СтруктураНаборыЗаписей,
			СуммаКорректировкиНалоговогоКредита
		);
		
		СформироватьДвиженияПоРегистрамЗатраты(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			ХарактерЗатратУУ,
			ХарактерЗатратБУ,
			ХарактерЗатратНУ,
			СтоимостьУУ,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			ВидДвижения,
			СтруктураНаборыЗаписей,
			СуммаКорректировкиНалоговогоКредита
		);
			
		СформироватьДвиженияПоРегистрамБракВПроизводстве(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			ХарактерЗатратУУ,
			ХарактерЗатратБУ,
			ХарактерЗатратНУ,
			СтоимостьУУ,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			ВидДвижения,
			СтруктураНаборыЗаписей,
			СуммаКорректировкиНалоговогоКредита
		);
		
	КонецЕсли;
	
	Если Не ПроведениеПоПартиям
	   И ТипЗнч(СтруктураШапкиДокумента.Ссылка) <> Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства")
	Тогда
		СформироватьДвиженияПоРегиструМатериалыВПроизводстве(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			ХарактерЗатратУУ,
			Количество,
			СтруктураНаборыЗаписей
		);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СформироватьДвиженияПоРегиструЗаказыНаОбслуживаниеОС(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			СтруктураНаборыЗаписей
		);
		
		УправлениеЗатратамиДвиженияПоРегистрам.СформироватьДвиженияПоРегистрамУчетаЗатратНаСтроительствоОС(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			ХарактерЗатратУУ,
			СтоимостьУУ,
			ХарактерЗатратБУ,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			ВидДвиженияНакопления.Приход,
			СтруктураНаборыЗаписей
		);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоВыпускуПродукцииНаЗатраты()

// Процедура формирует движений по отражению возвратных отходов.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	РезультатЗапросаПоВыпуску - РезультатЗапроса - Результат запроса по выпуску продукции
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету
//	ПроведениеПоПартиям - Булево - Признак вызова процедуры при восстановлении последовательности партионного учета
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоВозвратнымОтходам(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоВыпуску,
	УчетнаяПолитика,
	УчетнаяПолитикаБух,
	ПроведениеПоПартиям,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	)
	
	Перем СоответствиеКодОперацииСодержание;
	
	ВыборкаПоВыпускуПродукции = РезультатЗапросаПоВыпуску.Выбрать();
	Пока ВыборкаПоВыпускуПродукции.Следующий() Цикл
		
		Количество = ВыборкаПоВыпускуПродукции.Количество;
		СтоимостьУУ = ВыборкаПоВыпускуПродукции.СтоимостьУУ;
		СтоимостьБУ = ВыборкаПоВыпускуПродукции.СтоимостьБУ;
		СтоимостьНУ = ВыборкаПоВыпускуПродукции.СтоимостьНУ;
		НДСВходящий  = ВыборкаПоВыпускуПродукции.НДСВходящий;
		НДСКредит  = ВыборкаПоВыпускуПродукции.НДСКредит;
		
		КодОперацииВыпускПродукции = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости;
		
		СформироватьДвиженияПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			Неопределено, // ХарактерЗатратУУ,
			Неопределено, // ХарактерЗатратБУ,
			Неопределено, // ХарактерЗатратНУ,
			КодОперацииВыпускПродукции,
			КодОперацииВыпускПродукции,
			КодОперацииВыпускПродукции,
			Количество,
			0,
			СтоимостьУУ,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			УчетнаяПолитикаБух,
			СоответствиеКодОперацииСодержание,
			СтруктураКлючиАналитики,
			СтруктураНаборыЗаписей
		);

		КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВыпускПродукцииФиксНаСклад;
		
		СформироватьДвиженияПоВыпускуПродукцииНаСклад(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			КодОперацииВыпускПродукции,
			КодОперацииПартииТоваров,
			СтоимостьУУ,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			ПроведениеПоПартиям,
			СтруктураКлючиАналитики,
			СтруктураНаборыЗаписей
		);
		
		
		Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
			
			КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.ОтрицательныеЗатраты;
			
			ДвиженияПоРегистрамУчетЗатратВыпускПродукции(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции,
				Перечисления.ВидыВыпуска.Выпуск,
				Новый Массив,
				КодОперации,
				КодОперации,
				- Количество,
				- СтоимостьУУ,
				- СтоимостьБУ,
				- СтоимостьНУ,
				-НДСВходящий,
				-НДСКредит,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
			);
		Иначе
					
			ХарактерЗатратУУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
			ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
			ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
			
			КодОперацииНезавершенноеПроизводство = Перечисления.КодыОперацийНезавершенноеПроизводство.ОтрицательныеЗатраты;
			
			СформироватьДвиженияПоРегистрамНезавершенноеПроизводство(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции,
				ХарактерЗатратУУ,
				ХарактерЗатратБУ,
				ХарактерЗатратНУ,
				КодОперацииНезавершенноеПроизводство,
				ВыборкаПоВыпускуПродукции.Количество,
				СтоимостьУУ,
				СтоимостьБУ,
				СтоимостьНУ,
				НДСВходящий,
				НДСКредит,
				ВидДвиженияНакопления.Приход,
				СтруктураНаборыЗаписей
				);
				
		КонецЕсли;
			
	КонецЦикла; 
	
КонецПроцедуры // СформироватьДвиженияПоВозвратнымОтходам()

// Процедура выполняет распределение учетной стоимости продукции по выпуску на склад.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ВыборкаПоВыпускуПродукцииНаСклад - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса по выпуску продукции на склад
//	СтруктураПоиска - Структура - Структура отбора выборки результата запроса
//	ВсегоКоличество - Число - Общее количество выпущенной продукции
//	ВсегоСтоимостьУУ - Число - Общая стоимость выпущенной продукции по управленческому учету
//	ВсегоСтоимостьБУ - Число - Общая стоимость выпущенной продукции по бухгалтерскому учету
//	ВсегоСтоимостьНУ - Число - Общая стоимость выпущенной продукции по налоговому учету
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету
//	ПроведениеПоПартиям - Булево - Признак вызова процедуры при восстановлении последовательности партионного учета
//	СоответствиеКодОперацииСодержание - Соответствие - Соответствие кода операции выпуска и содержания проводки
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура РаспределитьУчетнуюСтоимостьВыпускПродукцииНаСклад(
	СтруктураШапкиДокумента,
	ВыборкаПоВыпускуПродукции,
	СтруктураПоиска,
	ВсегоКоличество,
	ВсегоСтоимостьУУ,
	ВсегоСтоимостьБУ,
	ВсегоСтоимостьНУ,
	ВсегоНДСВходящий,
	ВсегоНДСКредит,
	УчетнаяПолитика,
	УчетнаяПолитикаБух,
	ПроведениеПоПартиям,
	СоответствиеКодОперацииСодержание,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	)
	
	ВыборкаПоВыпускуПродукции.Сбросить();
	Пока ВыборкаПоВыпускуПродукции.НайтиСледующий(СтруктураПоиска) Цикл
				
		Количество = ВыборкаПоВыпускуПродукции.Количество;
		Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства")
		   И ВыборкаПоВыпускуПродукции.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная
		Тогда
			СтоимостьУУ = ВыборкаПоВыпускуПродукции.СтоимостьУУ;
			СтоимостьБУ = ВыборкаПоВыпускуПродукции.СтоимостьБУ;
			СтоимостьНУ = ВыборкаПоВыпускуПродукции.СтоимостьНУ;
			НДСВходящий = ВыборкаПоВыпускуПродукции.НДСВходящий;
			НДСКредит   = ВыборкаПоВыпускуПродукции.НДСКредит;
			
		ИначеЕсли ВсегоКоличество <> 0 Тогда
			СтоимостьУУ = Окр(Количество * ВсегоСтоимостьУУ / ВсегоКоличество, 2, 1);
			СтоимостьБУ = Окр(Количество * ВсегоСтоимостьБУ / ВсегоКоличество, 2, 1);
			СтоимостьНУ = Окр(Количество * ВсегоСтоимостьНУ / ВсегоКоличество, 2, 1);
			НДСВходящий = Окр(Количество * ВсегоНДСВходящий / ВсегоКоличество, 2, 1);
			НДСКредит 	= Окр(Количество * ВсегоНДСКредит / ВсегоКоличество, 2, 1);
						
			ВсегоКоличество = ВсегоКоличество - Количество;
			ВсегоСтоимостьУУ = ВсегоСтоимостьУУ - СтоимостьУУ;
			ВсегоСтоимостьБУ = ВсегоСтоимостьБУ - СтоимостьБУ;
			ВсегоСтоимостьНУ = ВсегоСтоимостьНУ - СтоимостьНУ;
			ВсегоНДСВходящий = ВсегоНДСВходящий - НДСВходящий;
			ВсегоНДСКредит   = ВсегоНДСКредит - НДСКредит;
		Иначе
			СтоимостьУУ = 0;
			СтоимостьБУ = 0;
			СтоимостьНУ = 0;
			НДСВходящий = 0;
			НДСКредит   = 0;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
			КодОперацииВыпускПродукции = ПолучитьКодОперацииПоРеквизитамДокумента(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции
			);
		Иначе
			КодОперацииВыпускПродукции = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад;
		КонецЕсли;
		
		СформироватьДвиженияПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			Неопределено, // ХарактерЗатратУУ,
			Неопределено, // ХарактерЗатратБУ,
			Неопределено, // ХарактерЗатратНУ,
			КодОперацииВыпускПродукции,
			КодОперацииВыпускПродукции,
			КодОперацииВыпускПродукции,
			Количество,
			ВыборкаПоВыпускуПродукции.КоличествоДоделка,
			СтоимостьУУ,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			УчетнаяПолитикаБух,
			СоответствиеКодОперацииСодержание,
			СтруктураКлючиАналитики,
			СтруктураНаборыЗаписей
		);
		
		КодОперацииПартииТоваров = ПолучитьКодОперацииПартииТоваров(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции
		);
		
		СформироватьДвиженияПоВыпускуПродукцииНаСклад(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			КодОперацииВыпускПродукции,
			КодОперацииПартииТоваров,
			СтоимостьУУ,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			ПроведениеПоПартиям,
			СтруктураКлючиАналитики,
			СтруктураНаборыЗаписей
		);
												
	КонецЦикла;
	
КонецПроцедуры // РаспределитьУчетнуюСтоимостьВыпускПродукцииНаСклад()

// Функция определяет код операции выпуска продукции по характеру затрат.
//
// Параметры
//  ХарактерЗатрат – ПеречислениеСсылка.ХарактерЗатрат – Характер затрат
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//
// Возвращаемое значение:
//  ПеречислениеСсылка.КодыОперацийВыпускПродукции – код операции выпуска продукции
//
Функция ПолучитьКодОперацииПоХарактеруЗатрат(
	ХарактерЗатрат,
	ВидОтраженияВУчете
	)
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство;
		
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие
		И ВидОтраженияВУчете <> Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	Тогда
		КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаСчет;
		
	Иначе	
		КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты;
		
	КонецЕсли;
	
	Возврат КодОперации;

КонецФункции // ПолучитьКодОперацииПоХарактеруЗатрат()

// Функция определяет код операции выпуска продукции по реквизитам документа.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки
//
// Возвращаемое значение:
//  ПеречислениеСсылка.КодыОперацийВыпускПродукции – код операции выпуска продукции
//
Функция ПолучитьКодОперацииПоРеквизитамДокумента(
	СтруктураШапкиДокумента,
	СтрокаВыборки = Неопределено
	)
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаНЗП") Тогда
		Если СтруктураШапкиДокумента.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Рассчитывается Тогда
			КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч;
		Иначе
			КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеНЗП") Тогда
		КодОперации = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.СписаниеНЗП") Тогда
		Если СтруктураШапкиДокумента.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Рассчитывается Тогда
			КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП;
		Иначе
			КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		Если СтрокаВыборки.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Рассчитывается Тогда
			КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч;
		Иначе
			КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс;
		КонецЕсли;
		
	Иначе
		КодОперации = Перечисления.КодыОперацийВыпускПродукции.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат КодОперации;

КонецФункции // ПолучитьКодОперацииПоРеквизитамДокумента()

// Функция определяет код операции для регистра "Незавершенное производство".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//
// Возвращаемое значение:
//  ПеречислениеСсылка.КодыОперацийВыпускПродукции – код операции выпуска продукции
//
Функция ПолучитьКодОперацииНезавершенноеПроизводство(
	СтруктураШапкиДокумента
	) Экспорт
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаНЗП") Тогда
		КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.КорректировкаНЗПФикс;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеНЗП") Тогда
		Если СтруктураШапкиДокумента.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Рассчитывается Тогда
			КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.ОприходованиеНЗП;
		Иначе
			КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.ОприходованиеНЗПФикс;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.СписаниеНЗП") Тогда
		КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеНЗПФикс;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.ВозвратМатериаловИзПроизводстваФикс;
		
	Иначе
		КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.ВнутренниеУслугиНаПроизводство;
		
	КонецЕсли;
	
	Возврат КодОперации;

КонецФункции // ПолучитьКодОперацииНезавершенноеПроизводство()

// Функция определяет код операции партий товаров по реквизитам документа.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки
//
// Возвращаемое значение:
//  ПеречислениеСсылка.КодыОперацийПартииТоваров – код операции выпуска продукции
//
Функция ПолучитьКодОперацииПартииТоваров(
	СтруктураШапкиДокумента,
	СтрокаВыборки
	)
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		Если СтрокаВыборки.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Рассчитывается Тогда
			КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзПроизводстваРасч;
		Иначе
			КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзПроизводстваФикс;
		КонецЕсли;
		
	Иначе
		КодОперации = Перечисления.КодыОперацийПартииТоваров.ВыпускПоОперацииСтоимость;
		
	КонецЕсли;
	
	Возврат КодОперации;

КонецФункции // ПолучитьКодОперацииПартииТоваров()

// Процедура выполняет распределение учетной стоимости продукции по выпуску на затраты.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ВыборкаПоВыпускуПродукцииНаСклад - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса по выпуску продукции на склад
//	СтруктураПоиска - Структура - Структура отбора выборки результата запроса
//	ВсегоКоличество - Число - Общее количество выпущенной продукции
//	ВсегоСтоимостьУУ - Число - Общая стоимость выпущенной продукции по управленческому учету
//	ВсегоСтоимостьБУ - Число - Общая стоимость выпущенной продукции по бухгалтерскому учету
//	ВсегоСтоимостьНУ - Число - Общая стоимость выпущенной продукции по налоговому учету
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету
//	ПроведениеПоПартиям - Булево - Признак вызова процедуры при восстановлении последовательности партионного учета
//	СоответствиеКодОперацииСодержание - Соответствие - Соответствие кода операции выпуска и содержания проводки
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура РаспределитьУчетнуюСтоимостьВыпускПродукцииНаЗатраты(
	СтруктураШапкиДокумента,
	ВыборкаПоВыпускуПродукции,
	СтруктураПоиска,
	ВсегоКоличество,
	ВсегоСтоимостьУУ,
	ВсегоСтоимостьБУ,
	ВсегоСтоимостьНУ,
	ВсегоНДСВходящий,
	ВсегоНДСКредит,
	УчетнаяПолитика,
	УчетнаяПолитикаБух,
	ПроведениеПоПартиям,
	СоответствиеКодОперацииСодержание,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	)
	
	ВыборкаПоВыпускуПродукции.Сбросить();
	Пока ВыборкаПоВыпускуПродукции.НайтиСледующий(СтруктураПоиска) Цикл
				
		Количество = ВыборкаПоВыпускуПродукции.Количество;
		Если (ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеНЗП")
			 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаНЗП")
			 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.СписаниеНЗП"))
		   И СтруктураШапкиДокумента.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная
		Тогда
			СтоимостьУУ = ВыборкаПоВыпускуПродукции.СтоимостьУУ;
			СтоимостьБУ = ВыборкаПоВыпускуПродукции.СтоимостьБУ;
			СтоимостьНУ = ВыборкаПоВыпускуПродукции.СтоимостьНУ;
			НДСВходящий = ВыборкаПоВыпускуПродукции.НДСВходящий;
			НДСКредит 	= ВыборкаПоВыпускуПродукции.НДСКредит;
			
		ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства")
		   И ВыборкаПоВыпускуПродукции.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная
		Тогда
			СтоимостьУУ = ВыборкаПоВыпускуПродукции.СтоимостьУУ;
			СтоимостьБУ = ВыборкаПоВыпускуПродукции.СтоимостьБУ;
			СтоимостьНУ = ВыборкаПоВыпускуПродукции.СтоимостьНУ;
			НДСВходящий = ВыборкаПоВыпускуПродукции.НДСВходящий;
			НДСКредит 	= ВыборкаПоВыпускуПродукции.НДСКредит;
			
		ИначеЕсли ВсегоКоличество <> 0 Тогда
			СтоимостьУУ = Окр(Количество * ВсегоСтоимостьУУ / ВсегоКоличество, 2, 1);
			СтоимостьБУ = Окр(Количество * ВсегоСтоимостьБУ / ВсегоКоличество, 2, 1);
			СтоимостьНУ = Окр(Количество * ВсегоСтоимостьНУ / ВсегоКоличество, 2, 1);
			НДСВходящий = Окр(Количество * ВсегоНДСВходящий / ВсегоКоличество, 2, 1);
			НДСКредит 	= Окр(Количество * ВсегоНДСКредит / ВсегоКоличество, 2, 1);
						
			ВсегоКоличество = ВсегоКоличество - Количество;
			ВсегоСтоимостьУУ = ВсегоСтоимостьУУ - СтоимостьУУ;
			ВсегоСтоимостьБУ = ВсегоСтоимостьБУ - СтоимостьБУ;
			ВсегоСтоимостьНУ = ВсегоСтоимостьНУ - СтоимостьНУ;
			ВсегоНДСВходящий = ВсегоНДСВходящий - НДСВходящий;
			ВсегоНДСКредит   = ВсегоНДСКредит - НДСКредит;
		Иначе
			СтоимостьУУ = 0;
			СтоимостьБУ = 0;
			СтоимостьНУ = 0;
			НДСВходящий = 0;
			НДСКредит 	= 0;
		КонецЕсли;
		
		ХарактерЗатратУУ = ВыборкаПоВыпускуПродукции.ХарактерЗатратПолучатель;
		ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(ВыборкаПоВыпускуПродукции.СчетДт, ВыборкаПоВыпускуПродукции.СтатьяЗатратПолучатель);
		ХарактерЗатратНУ = ХарактерЗатратБУ;
		
		Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаНЗП")
		 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеНЗП")
		 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.СписаниеНЗП")
		 ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства")
		Тогда
			КодОперацииВыпускПродукции = ПолучитьКодОперацииПоРеквизитамДокумента(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции
			);
            КодОперацииВыпускПродукцииУУ = КодОперацииВыпускПродукции;
			КодОперацииВыпускПродукцииБУ = КодОперацииВыпускПродукции;
			КодОперацииВыпускПродукцииНУ = КодОперацииВыпускПродукции;
		Иначе
			КодОперацииВыпускПродукцииУУ = ПолучитьКодОперацииПоХарактеруЗатрат(
				ХарактерЗатратУУ,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
			);
			КодОперацииВыпускПродукцииБУ = ПолучитьКодОперацииПоХарактеруЗатрат(
				ХарактерЗатратБУ,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
			);
			КодОперацииВыпускПродукцииНУ = КодОперацииВыпускПродукцииБУ;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) <> Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
			СформироватьДвиженияПоВыпускуПродукции(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции,
				ХарактерЗатратУУ,
				ХарактерЗатратБУ,
				ХарактерЗатратНУ,
				КодОперацииВыпускПродукцииУУ,
				КодОперацииВыпускПродукцииБУ,
				КодОперацииВыпускПродукцииНУ,
				ВыборкаПоВыпускуПродукции.Количество,
				ВыборкаПоВыпускуПродукции.КоличествоДоделка,
				СтоимостьУУ,
				СтоимостьБУ,
				СтоимостьНУ,
				НДСВходящий,
				НДСКредит,
				УчетнаяПолитикаБух,
				СоответствиеКодОперацииСодержание,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
			);
		КонецЕсли;
		
		СуммаКорректировкиНалоговогоКредита = 0;
		
		СформироватьДвиженияПоВыпускуПродукцииНаЗатраты(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			ХарактерЗатратУУ,
			ХарактерЗатратБУ,
			ХарактерЗатратНУ,
			КодОперацииВыпускПродукцииУУ,
			КодОперацииВыпускПродукцииБУ,
			Количество,
			ВыборкаПоВыпускуПродукции.КоличествоДоделка,
			СтоимостьУУ,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			УчетнаяПолитикаБух,
			ПроведениеПоПартиям,
			СтруктураКлючиАналитики,
			СтруктураНаборыЗаписей,
			СуммаКорректировкиНалоговогоКредита
		);
		
		
		Если СуммаКорректировкиНалоговогоКредита <> 0 Тогда
			
			// стоимость сторнируем только когда восстанавливаем НДС, то есть сумма корректировки НДС > 0
			// НДСКредит двигаем всегда
			Если СуммаКорректировкиНалоговогоКредита > 0 Тогда
	 			СуммаКорректировкиСтоимость   = - СуммаКорректировкиНалоговогоКредита;
				СуммаКорректировкиСтоимостьНУ = - СуммаКорректировкиНалоговогоКредита;
			Иначе
	 			СуммаКорректировкиСтоимость = 0;
				СуммаКорректировкиСтоимостьНУ = 0;
			КонецЕсли;
			
			СформироватьДвиженияПоВыпускуПродукции(
		 		СтруктураШапкиДокумента,
		 		ВыборкаПоВыпускуПродукции,
		  		ХарактерЗатратУУ,
		 		ХарактерЗатратБУ,
		  		ХарактерЗатратНУ,
		  		КодОперацииВыпускПродукцииУУ,
		  		КодОперацииВыпускПродукцииБУ,
		  		КодОперацииВыпускПродукцииНУ,
		  		0, // Количество,
		   		0, // КоличествоДоделка,
		  		0, // СтоимостьУУ
		  		СуммаКорректировкиСтоимость, // СтоимостьБУ,
		  		СуммаКорректировкиСтоимостьНУ, // СтоимостьНУ,
		  		0, // НДСВходящий,
		  		+СуммаКорректировкиНалоговогоКредита, // НДСКредит,
		  		УчетнаяПолитикаБух,
		  		СоответствиеКодОперацииСодержание,
		  		СтруктураКлючиАналитики,
		  		СтруктураНаборыЗаписей
		 	);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // РаспределитьУчетнуюСтоимостьВыпускПродукцииНаЗатраты()

// Процедура выполняет распределение учетной стоимости продукции по выпуску на затраты (списком).
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ВыборкаПоВыпускуПродукцииНаСклад - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса по выпуску продукции на склад
//	СтруктураПоиска - Структура - Структура отбора выборки результата запроса
//	ВсегоКоличество - Число - Общее количество выпущенной продукции
//	ВсегоСтоимостьУУ - Число - Общая стоимость выпущенной продукции по управленческому учету
//	ВсегоСтоимостьБУ - Число - Общая стоимость выпущенной продукции по бухгалтерскому учету
//	ВсегоСтоимостьНУ - Число - Общая стоимость выпущенной продукции по налоговому учету
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету
//	ПроведениеПоПартиям - Булево - Признак вызова процедуры при восстановлении последовательности партионного учета
//	СоответствиеКодОперацииСодержание - Соответствие - Соответствие кода операции выпуска и содержания проводки
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура РаспределитьУчетнуюСтоимостьВыпускПродукцииНаЗатратыСписок(
	СтруктураШапкиДокумента,
	ВыборкаПоВыпускуПродукции,
	СтруктураПоиска,
	ВсегоКоличество,
	ВсегоСтоимостьУУ,
	ВсегоСтоимостьБУ,
	ВсегоСтоимостьНУ,
	ВсегоНДСВходящий,
	ВсегоНДСКредит,
	УчетнаяПолитика,
	УчетнаяПолитикаБух,
	ПроведениеПоПартиям,
	СоответствиеКодОперацииСодержание,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	)
	
	ТекущийКлючСвязи = 0;
	ВыборкаПоВыпускуПродукции.Сбросить();
	Пока ВыборкаПоВыпускуПродукции.НайтиСледующий(СтруктураПоиска) Цикл
		
		Если ВыборкаПоВыпускуПродукции.Коэффициент = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущийКлючСвязи <> ВыборкаПоВыпускуПродукции.КлючСвязи Тогда
			СуммаКоэффициент = ?(ВыборкаПоВыпускуПродукции.СуммаКоэффициент <> 0, ВыборкаПоВыпускуПродукции.СуммаКоэффициент, 1);
			КоличествоВыпуска = ВыборкаПоВыпускуПродукции.Количество;
			КоличествоВыпускаДоделка = ВыборкаПоВыпускуПродукции.КоличествоДоделка;
			
			ТекущийКлючСвязи = ВыборкаПоВыпускуПродукции.КлючСвязи;
		КонецЕсли;
		
		Если СуммаКоэффициент = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Количество = Окр(КоличествоВыпуска * ВыборкаПоВыпускуПродукции.Коэффициент / СуммаКоэффициент, 3, 1);
		КоличествоДоделка = Окр(КоличествоВыпускаДоделка * ВыборкаПоВыпускуПродукции.Коэффициент / СуммаКоэффициент, 3, 1);
		
		КоличествоВыпуска = КоличествоВыпуска - Количество;
		КоличествоВыпускаДоделка = КоличествоВыпускаДоделка - КоличествоДоделка;
		СуммаКоэффициент = СуммаКоэффициент - ВыборкаПоВыпускуПродукции.Коэффициент;
		
		Если ВсегоКоличество <> 0 Тогда
			СтоимостьУУ = Окр(Количество * ВсегоСтоимостьУУ / ВсегоКоличество, 2, 1);
			СтоимостьБУ = Окр(Количество * ВсегоСтоимостьБУ / ВсегоКоличество, 2, 1);
			СтоимостьНУ = Окр(Количество * ВсегоСтоимостьНУ / ВсегоКоличество, 2, 1);
			НДСВходящий = Окр(Количество * ВсегоНДСВходящий / ВсегоКоличество, 2, 1);
			НДСКредит 	= Окр(Количество * ВсегоНДСКредит / ВсегоКоличество, 2, 1);
						
			ВсегоКоличество = ВсегоКоличество - Количество;
			ВсегоСтоимостьУУ = ВсегоСтоимостьУУ - СтоимостьУУ;
			ВсегоСтоимостьБУ = ВсегоСтоимостьБУ - СтоимостьБУ;
			ВсегоСтоимостьНУ = ВсегоСтоимостьНУ - СтоимостьНУ;
			ВсегоНДСВходящий = ВсегоНДСВходящий - НДСВходящий;
			ВсегоНДСКредит   = ВсегоНДСКредит - НДСКредит;
		Иначе
			СтоимостьУУ = 0;
			СтоимостьБУ = 0;
			СтоимостьНУ = 0;
			НДСВходящий = 0;
			НДСКредит 	= 0;
		КонецЕсли;
		
		ХарактерЗатратУУ = ВыборкаПоВыпускуПродукции.ХарактерЗатратПолучатель;
		ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(ВыборкаПоВыпускуПродукции.СчетДт, ВыборкаПоВыпускуПродукции.СтатьяЗатратПолучатель);
		ХарактерЗатратНУ = ХарактерЗатратБУ;
		
		КодОперацииВыпускПродукцииУУ = ПолучитьКодОперацииПоХарактеруЗатрат(
			ХарактерЗатратУУ,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
		);
		КодОперацииВыпускПродукцииБУ = ПолучитьКодОперацииПоХарактеруЗатрат(
			ХарактерЗатратБУ,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
		);
		КодОперацииВыпускПродукцииНУ = КодОперацииВыпускПродукцииБУ;
				
		СформироватьДвиженияПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			ХарактерЗатратУУ,
			ХарактерЗатратБУ,
			ХарактерЗатратНУ,
			КодОперацииВыпускПродукцииУУ,
			КодОперацииВыпускПродукцииБУ,
			КодОперацииВыпускПродукцииНУ,
			Количество,
			КоличествоДоделка,
			СтоимостьУУ,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			УчетнаяПолитикаБух,
			СоответствиеКодОперацииСодержание,
			СтруктураКлючиАналитики,
			СтруктураНаборыЗаписей
		);
		
		СформироватьДвиженияПоВыпускуПродукцииНаЗатраты(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			ХарактерЗатратУУ,
			ХарактерЗатратБУ,
			ХарактерЗатратНУ,
			КодОперацииВыпускПродукцииУУ,
			КодОперацииВыпускПродукцииБУ,
			Количество,
			КоличествоДоделка,
			СтоимостьУУ,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			УчетнаяПолитикаБух,
			ПроведениеПоПартиям,
			СтруктураКлючиАналитики,
			СтруктураНаборыЗаписей
		);
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьУчетнуюСтоимостьВыпускПродукцииНаЗатратыСписок()

// Процедура выполняет распределение себестоимости по проектам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по выпуску продукции
//	ВыборкаРаспределениеПоПроектам - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса распределения по проектам
//	Стоимость - Число - Стоимость выпущенной продукции по управленческому учету
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура РаспределитьУчетнуюСтоимостьПоПроектам(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВыборкаРаспределениеПоПроектам,
	Стоимость,
	СтруктураНаборыЗаписей
	)
	
	Если Не СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
		Проект = Справочники.Проекты.ПустаяСсылка();
	ИначеЕсли ЗначениеЗаполнено(СтруктураШапкиДокумента.Проект) Тогда
		Проект = СтруктураШапкиДокумента.Проект;
	Иначе
		Проект = СтрокаВыборки.Проект;
	КонецЕсли;
	
	ВсегоБазаРаспределения = 0;
	Если ТипЗнч(Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам") Тогда
		
		СтруктураПоиска = Новый Структура("ВидРаспределения", Проект);
		
		МассивКоэф = Новый Массив;
		
		ВыборкаРаспределениеПоПроектам.Сбросить();
		Пока ВыборкаРаспределениеПоПроектам.НайтиСледующий(СтруктураПоиска) Цикл
			МассивКоэф.Добавить(ВыборкаРаспределениеПоПроектам.ДоляРаспределения);
			ВсегоБазаРаспределения = ВсегоБазаРаспределения + ВыборкаРаспределениеПоПроектам.ДоляРаспределения;
		КонецЦикла;
		
		Если ВсегоБазаРаспределения = 0 Тогда
			ОбщегоНазначения.Сообщение("Не удалось выполнить распределение себестоимости продаж по виду распределения """ + Проект + """", СтатусСообщения.Внимание);
			Проект = Справочники.Проекты.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
			
	Если ВсегоБазаРаспределения <> 0 Тогда
			
		МассивКоличество = ОбщегоНазначения.РаспределитьПропорционально(СтрокаВыборки.Количество, МассивКоэф, 3);
		МассивСтоимость = ОбщегоНазначения.РаспределитьПропорционально(Стоимость, МассивКоэф, 2);
		
		Индекс = 0;
		ВыборкаРаспределениеПоПроектам.Сбросить();
		Пока ВыборкаРаспределениеПоПроектам.НайтиСледующий(СтруктураПоиска) Цикл
			
			Количество = ?(МассивКоличество = Неопределено, 0, МассивКоличество[Индекс]);
			Сумма      = ?(МассивСтоимость = Неопределено, 0, МассивСтоимость[Индекс]);
			
			СформироватьСтрокуДвиженияПоРегиструПродажиСебестоимость(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ВыборкаРаспределениеПоПроектам.Проект,
				Количество,
				Сумма,
				СтруктураНаборыЗаписей
			);
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	Иначе
		
		СформироватьСтрокуДвиженияПоРегиструПродажиСебестоимость(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Проект,
			СтрокаВыборки.Количество,
			Стоимость,
			СтруктураНаборыЗаписей
		);
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьУчетнуюСтоимостьПоПроектам()

// Процедура выполняет распределение учетной стоимости продукции по выпуску на внешние услуги.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ВыборкаПоВыпускуПродукцииНаСклад - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса по выпуску продукции на склад
//	ВыборкаРаспределениеПоПроектам - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса по коэффициентам распределения по проектам
//	СтруктураПоиска - Структура - Структура отбора выборки результата запроса
//	ВсегоКоличество - Число - Общее количество выпущенной продукции
//	ВсегоСтоимостьУУ - Число - Общая стоимость выпущенной продукции по управленческому учету
//	ВсегоСтоимостьБУ - Число - Общая стоимость выпущенной продукции по бухгалтерскому учету
//	ВсегоСтоимостьНУ - Число - Общая стоимость выпущенной продукции по налоговому учету
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету
//	СоответствиеКодОперацииСодержание - Соответствие - Соответствие кода операции выпуска и содержания проводки
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура РаспределитьУчетнуюСтоимостьВыпускНаВнешниеУслуги(
	СтруктураШапкиДокумента,
	ВыборкаПоВыпускуПродукции,
	ВыборкаРаспределениеПоПроектам,
	СтруктураПоиска,
	ВсегоКоличество,
	ВсегоСтоимостьУУ,
	ВсегоСтоимостьБУ,
	ВсегоСтоимостьНУ,
	ВсегоНДСВходящий,
	ВсегоНДСКредит,
	УчетнаяПолитика,
	УчетнаяПолитикаБух,
	СоответствиеКодОперацииСодержание,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	)
	
	ВыборкаПоВыпускуПродукции.Сбросить();
	Пока ВыборкаПоВыпускуПродукции.НайтиСледующий(СтруктураПоиска) Цикл
				
		Количество = ВыборкаПоВыпускуПродукции.Количество;
		Если ВсегоКоличество <> 0 Тогда
			СтоимостьУУ = Окр(Количество * ВсегоСтоимостьУУ / ВсегоКоличество, 2, 1);
			СтоимостьБУ = Окр(Количество * ВсегоСтоимостьБУ / ВсегоКоличество, 2, 1);
			СтоимостьНУ = Окр(Количество * ВсегоСтоимостьНУ / ВсегоКоличество, 2, 1);
			НДСВходящий = Окр(Количество * ВсегоНДСВходящий / ВсегоКоличество, 2, 1);
			НДСКредит 	= Окр(Количество * ВсегоНДСКредит / ВсегоКоличество, 2, 1);
						
			ВсегоКоличество = ВсегоКоличество - Количество;
			ВсегоСтоимостьУУ = ВсегоСтоимостьУУ - СтоимостьУУ;
			ВсегоСтоимостьБУ = ВсегоСтоимостьБУ - СтоимостьБУ;
			ВсегоСтоимостьНУ = ВсегоСтоимостьНУ - СтоимостьНУ;
			ВсегоНДСВходящий = ВсегоНДСВходящий - НДСВходящий;
			ВсегоНДСКредит   = ВсегоНДСКредит - НДСКредит;
		Иначе
			СтоимостьУУ = 0;
			СтоимостьБУ = 0;
			СтоимостьНУ = 0;
			НДСВходящий = 0;
			НДСКредит 	= 0;
		КонецЕсли;
		
		КодОперацииВыпускПродукции = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги;
		
		СформироватьДвиженияПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ВыборкаПоВыпускуПродукции,
			Неопределено, // ХарактерЗатратУУ,
			Неопределено, // ХарактерЗатратБУ,
			Неопределено, // ХарактерЗатратНУ,
			КодОперацииВыпускПродукции,
			КодОперацииВыпускПродукции,
			КодОперацииВыпускПродукции,
			ВыборкаПоВыпускуПродукции.Количество,
			ВыборкаПоВыпускуПродукции.КоличествоДоделка,
			СтоимостьУУ,
			СтоимостьБУ,
			СтоимостьНУ,
			НДСВходящий,
			НДСКредит,
			УчетнаяПолитикаБух,
			СоответствиеКодОперацииСодержание,
			СтруктураКлючиАналитики,
			СтруктураНаборыЗаписей
		);
		
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			
			РаспределитьУчетнуюСтоимостьПоПроектам(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукции,
				ВыборкаРаспределениеПоПроектам,
				СтоимостьУУ,
				СтруктураНаборыЗаписей
			);
			
		КонецЕсли;
								
	КонецЦикла;
		
КонецПроцедуры // РаспределитьУчетнуюСтоимостьВыпускНаВнешниеУслуги()

// Процедура выполняет распределение учетной стоимости продукции по направлением выпуска.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	РезультатЗапросаПоУчетнойСтоимости - РезультатЗапроса - Результ запроса по учетной стоимости продукции
//	ТекстЗапросаПоВыпускуПродукцииНаСклад - Строка - Текст запроса по выпуску продукции на склад
//	ТекстЗапросаПоВыпускуПродукцииНаЗатраты - Строка - Текст запроса по выпуску продукции со списанием на затраты
//	ТекстЗапросаПоВыпускуПродукцииНаЗатратыСписок - Строка - Текст запроса по выпуску продукции со списанием на затраты (списком)
//	ТекстЗапросаПоВыпускуВнешниеУслуги - Строка - Текст запроса по выпуску на внешние услуги
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету
//	ПроведениеПоПартиям - Булево - Признак вызова процедуры при восстановлении последовательности партионного учета
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура РаспределитьУчетнуюСтоимостьПоНаправлениямВыпуска(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоУчетнойСтоимости,
	ТекстЗапросаПоВыпускуПродукцииНаСклад,
	ТекстЗапросаПоВыпускуПродукцииНаЗатраты,
	ТекстЗапросаПоВыпускуПродукцииНаЗатратыСписок,
	ТекстЗапросаПоВыпускуВнешниеУслуги,
	УчетнаяПолитика,
	УчетнаяПолитикаБух,
	ПроведениеПоПартиям,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	)
	
	Перем СоответствиеКодОперацииСодержание;
	
	ЕстьВыпускНаСклад = Не ПустаяСтрока(ТекстЗапросаПоВыпускуПродукцииНаСклад);
	ЕстьВыпускНаЗатраты = Не ПустаяСтрока(ТекстЗапросаПоВыпускуПродукцииНаЗатраты);
	ЕстьВыпускНаЗатратыСписок = Не ПустаяСтрока(ТекстЗапросаПоВыпускуПродукцииНаЗатратыСписок);
	ЕстьВыпускНаВнешниеУслуги = Не ПустаяСтрока(ТекстЗапросаПоВыпускуВнешниеУслуги);
	
	// Формирование запроса по выпуску продукции на склад.
	Если ЕстьВыпускНаСклад Тогда
		ЗапросПоВыпускуНаСклад = СформироватьЗапросПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ТекстЗапросаПоВыпускуПродукцииНаСклад,
			УчетнаяПолитика,
			УчетнаяПолитикаБух
			);
		
		РезультатЗапросаПоВыпускуПродукцииНаСклад = ЗапросПоВыпускуНаСклад.Выполнить();
		Если Не РезультатЗапросаПоВыпускуПродукцииНаСклад.Пустой() Тогда
			ВыборкаПоВыпускуПродукцииНаСклад = РезультатЗапросаПоВыпускуПродукцииНаСклад.Выбрать();
		КонецЕсли;
	КонецЕсли;
	
	// Формирование запроса по выпуску продукции со списанием на затраты.
	Если ЕстьВыпускНаЗатраты Тогда
		ЗапросПоВыпускуНаЗатраты = СформироватьЗапросПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ТекстЗапросаПоВыпускуПродукцииНаЗатраты,
			УчетнаяПолитика,
			УчетнаяПолитикаБух
			);
		
		РезультатЗапросаПоВыпускуПродукцииНаЗатраты = ЗапросПоВыпускуНаЗатраты.Выполнить();
		Если Не РезультатЗапросаПоВыпускуПродукцииНаЗатраты.Пустой() Тогда
			ВыборкаПоВыпускуПродукцииНаЗатраты = РезультатЗапросаПоВыпускуПродукцииНаЗатраты.Выбрать();
		КонецЕсли;
	КонецЕсли;
	
	// Формирование запроса по выпуску продукции со списанием на затраты (списком).
	Если ЕстьВыпускНаЗатратыСписок Тогда
		ЗапросПоВыпускуНаЗатратыСписок = СформироватьЗапросПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ТекстЗапросаПоВыпускуПродукцииНаЗатратыСписок,
			УчетнаяПолитика,
			УчетнаяПолитикаБух
			);
		
		РезультатЗапросаПоВыпускуПродукцииНаЗатратыСписок = ЗапросПоВыпускуНаЗатратыСписок.Выполнить();
		Если Не РезультатЗапросаПоВыпускуПродукцииНаЗатратыСписок.Пустой() Тогда
			ВыборкаПоВыпускуПродукцииНаЗатратыСписок = РезультатЗапросаПоВыпускуПродукцииНаЗатратыСписок.Выбрать();
		КонецЕсли;
	КонецЕсли;
	
	// Формирование запроса по выпуску на внешние услуги.
	Если ЕстьВыпускНаВнешниеУслуги Тогда
		ЗапросПоВыпускуНаВнешниеУслуги = СформироватьЗапросПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ТекстЗапросаПоВыпускуВнешниеУслуги,
			УчетнаяПолитика,
			УчетнаяПолитикаБух
			);
		
		РезультатЗапросаПоВыпускуНаВнешниеУслуги = ЗапросПоВыпускуНаВнешниеУслуги.Выполнить();
		Если Не РезультатЗапросаПоВыпускуНаВнешниеУслуги.Пустой() Тогда
			ВыборкаПоВыпускуНаВнешниеУслуги = РезультатЗапросаПоВыпускуНаВнешниеУслуги.Выбрать();
			
			ЗапросРаспределениеПоПроектам = СформироватьЗапросПоКоэффициентамРаспределенияПоПроектам(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуНаВнешниеУслуги
			);
			РезультатЗапросаРаспределениеПоПроектам = ЗапросРаспределениеПоПроектам.Выполнить();
			ВыборкаРаспределениеПоПроектам = РезультатЗапросаРаспределениеПоПроектам.Выбрать();
		КонецЕсли;
	КонецЕсли; 
		
	ВыборкаПоУчетнойСтоимости = РезультатЗапросаПоУчетнойСтоимости.Выбрать();
	Пока ВыборкаПоУчетнойСтоимости.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НоменклатурнаяГруппа", ВыборкаПоУчетнойСтоимости.НоменклатурнаяГруппа);
		СтруктураПоиска.Вставить("Номенклатура", ВыборкаПоУчетнойСтоимости.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ВыборкаПоУчетнойСтоимости.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("СерияНоменклатуры", ВыборкаПоУчетнойСтоимости.СерияНоменклатуры);
		СтруктураПоиска.Вставить("Спецификация", ВыборкаПоУчетнойСтоимости.Спецификация);
		СтруктураПоиска.Вставить("Заказ", ВыборкаПоУчетнойСтоимости.Заказ);
		СтруктураПоиска.Вставить("ЗаказРегл", ВыборкаПоУчетнойСтоимости.ЗаказРегл);
		
		ВсегоКоличество = ВыборкаПоУчетнойСтоимости.Количество;
		
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			ВсегоСтоимостьУУ = ВыборкаПоУчетнойСтоимости.СтоимостьУУ;
		Иначе
			ВсегоСтоимостьУУ = 0;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			ВсегоСтоимостьБУ = ВыборкаПоУчетнойСтоимости.СтоимостьБУ;
			ВсегоСтоимостьНУ = ВыборкаПоУчетнойСтоимости.СтоимостьНУ;
			ВсегоНДСВходящий = ВыборкаПоУчетнойСтоимости.НДСВходящий;
			ВсегоНДСКредит   = ВыборкаПоУчетнойСтоимости.НДСКредит;
		Иначе
			ВсегоСтоимостьБУ = 0;
			ВсегоСтоимостьНУ = 0;
			ВсегоНДСВходящий = 0;
			ВсегоНДСКредит   = 0;
		КонецЕсли;
		
		// Распределим учетную стоимость по выпуску продукции на склад.
		Если ЕстьВыпускНаСклад И Не РезультатЗапросаПоВыпускуПродукцииНаСклад.Пустой() Тогда
			
			РаспределитьУчетнуюСтоимостьВыпускПродукцииНаСклад(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукцииНаСклад,
				СтруктураПоиска,
				ВсегоКоличество,
				ВсегоСтоимостьУУ,
				ВсегоСтоимостьБУ,
				ВсегоСтоимостьНУ,
				ВсегоНДСВходящий,
				ВсегоНДСКредит,
				УчетнаяПолитика,
				УчетнаяПолитикаБух,
				ПроведениеПоПартиям,
				СоответствиеКодОперацииСодержание,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
				);
			
		КонецЕсли;
			
		// Распределим учетную стоимость по выпуску продукции на затраты.
		Если ЕстьВыпускНаЗатраты И Не РезультатЗапросаПоВыпускуПродукцииНаЗатраты.Пустой() Тогда
			
			РаспределитьУчетнуюСтоимостьВыпускПродукцииНаЗатраты(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукцииНаЗатраты,
				СтруктураПоиска,
				ВсегоКоличество,
				ВсегоСтоимостьУУ,
				ВсегоСтоимостьБУ,
				ВсегоСтоимостьНУ,
				ВсегоНДСВходящий,
				ВсегоНДСКредит,
				УчетнаяПолитика,
				УчетнаяПолитикаБух,
				ПроведениеПоПартиям,
				СоответствиеКодОперацииСодержание,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
				);
			
		КонецЕсли;
			
		// Распределим учетную стоимость по выпуску продукции на затраты.
		Если ЕстьВыпускНаЗатратыСписок И Не РезультатЗапросаПоВыпускуПродукцииНаЗатратыСписок.Пустой() Тогда
			
			РаспределитьУчетнуюСтоимостьВыпускПродукцииНаЗатратыСписок(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуПродукцииНаЗатратыСписок,
				СтруктураПоиска,
				ВсегоКоличество,
				ВсегоСтоимостьУУ,
				ВсегоСтоимостьБУ,
				ВсегоСтоимостьНУ,
				ВсегоНДСВходящий,
				ВсегоНДСКредит,
				УчетнаяПолитика,
				УчетнаяПолитикаБух,
				ПроведениеПоПартиям,
				СоответствиеКодОперацииСодержание,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
				);
			
		КонецЕсли;
			
		// Распределим учетную стоимость по выпуску на внешние услуги.
		Если ЕстьВыпускНаВнешниеУслуги И Не РезультатЗапросаПоВыпускуНаВнешниеУслуги.Пустой() Тогда
			
			РаспределитьУчетнуюСтоимостьВыпускНаВнешниеУслуги(
				СтруктураШапкиДокумента,
				ВыборкаПоВыпускуНаВнешниеУслуги,
				ВыборкаРаспределениеПоПроектам,
				СтруктураПоиска,
				ВсегоКоличество,
				ВсегоСтоимостьУУ,
				ВсегоСтоимостьБУ,
				ВсегоСтоимостьНУ,
				ВсегоНДСВходящий,
				ВсегоНДСКредит,
				УчетнаяПолитика,
				УчетнаяПолитикаБух,
				СоответствиеКодОперацииСодержание,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
				);
			
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры // РаспределитьУчетнуюСтоимостьПоНаправлениямВыпуска()

// Процедура дополняет структуру шапки документа новыми значениями.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету
//
Процедура ДополнитьСтруктуруШапкиДокументаНастройкиУчета(
	СтруктураШапкиДокумента,
	УчетнаяПолитика,
	УчетнаяПолитикаБух
	)
	
	Если Не СтруктураШапкиДокумента.Свойство("ВестиПартионныйУчетПоСкладам")
	   И СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	Тогда
		ВестиПартионныйУчетПоСкладам = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам;
		СтруктураШапкиДокумента.Вставить("ВестиПартионныйУчетПоСкладам", ВестиПартионныйУчетПоСкладам);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.Свойство("ВестиПартионныйУчетПоСкладамРегл")
	   И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	Тогда
		ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
		СтруктураШапкиДокумента.Вставить("ВестиПартионныйУчетПоСкладамРегл", ВестиПартионныйУчетПоСкладамРегл);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.Свойство("ВедениеУчетаЗатратПоПроектам")
		И СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	Тогда
		СтруктураШапкиДокумента.Вставить("ВедениеУчетаЗатратПоПроектам", УправлениеПроектами.ВедениеУчетаЗатратПоПроектам());
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.Свойство("СпособОценкиМПЗ")
	   И СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	Тогда
		Если ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗ", УчетнаяПолитика.СпособОценкиМПЗ);
		Иначе
			СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗ");
		КонецЕсли;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.Свойство("СпособОценкиМПЗБух")
	   И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	Тогда
		Если ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
			СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗБух", УчетнаяПолитикаБух.СпособОценкиМПЗ);
		Иначе
			СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗБух");
		КонецЕсли;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.Свойство("ЕстьНалогНаПрибыль")
		И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	Тогда
		Если ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль", УчетнаяПолитикаБух.ЕстьНалогНаПрибыль);
		Иначе
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.Свойство("ЕстьНДС")
		И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	Тогда
		Если ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
			СтруктураШапкиДокумента.Вставить("ЕстьНДС", УчетнаяПолитикаБух.ЕстьНДС);
		Иначе
			СтруктураШапкиДокумента.Вставить("ЕстьНДС", Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруШапкиДокументаНастройкиУчета()

// Процедура формирует движения по выпуску продукции по всем видам учета.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ИмяДокумента - Строка - Имя документа
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//	УчетнаяПолитикаБух - Структура - Учетная политика по бухгалтерскому учету
//	ПроведениеПоПартиям - Булево - Признак вызова процедуры при восстановлении последовательности партионного учета
//
Процедура СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска(
	СтруктураШапкиДокумента, 
	ИмяДокумента = "", 
	УчетнаяПолитика, 
	УчетнаяПолитикаБух,
	ПроведениеПоПартиям = Ложь
	) Экспорт
	
	ТекстЗапросаПоТабличнойЧастиПродукция = "";
	ТекстЗапросаПоВыпускуПродукцииНаработка = "";
	ТекстЗапросаПоВыпускуПродукцииНаСклад = "";
	ТекстЗапросаПоВыпускуПродукцииНаЗатраты = "";
	ТекстЗапросаПоВыпускуПродукцииНаЗатратыСписок = "";
	ТекстЗапросаПоВыпускуВнешниеУслуги = "";
	ТекстЗапросаПоТабличнойЧастиВозвратныеОтходы = "";
	
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	Если ТипДокумента = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		ТекстЗапросаПоТабличнойЧастиПродукция = СформироватьТекстЗапросаПоПродукцииОтчетПроизводстваЗаСмену();
		ТекстЗапросаПоВыпускуПродукцииНаработка = СформироватьТекстЗапросаПоВыпускуПродукцииНаработкаОтчетПроизводстваЗаСмену();
		ТекстЗапросаПоВыпускуПродукцииНаСклад = СформироватьТекстЗапросаПоВыпускуПродукцииНаСкладОтчетПроизводстваЗаСмену();
		ТекстЗапросаПоВыпускуПродукцииНаЗатраты = СформироватьТекстЗапросаПоВыпускуПродукцииНаЗатратыОтчетПроизводстваЗаСмену();
		ТекстЗапросаПоВыпускуПродукцииНаЗатратыСписок = СформироватьТекстЗапросаПоВыпускуПродукцииНаЗатратыСписокОтчетПроизводстваЗаСмену();
		ТекстЗапросаПоТабличнойЧастиВозвратныеОтходы = СформироватьТекстЗапросаПоТабличнойЧастиВозвратныеОтходыОтчетПроизводстваЗаСмену();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки") Тогда
		ТекстЗапросаПоТабличнойЧастиПродукция = СформироватьТекстЗапросаПоПродукцииПоступлениеТоваровИзПереработки();
		ТекстЗапросаПоВыпускуПродукцииНаСклад = СформироватьТекстЗапросаПоВыпускуПродукцииНаСкладПоступлениеТоваровИзПереработки();
		ТекстЗапросаПоТабличнойЧастиВозвратныеОтходы = СформироватьТекстЗапросаПоТабличнойЧастиВозвратныеОтходыПоступлениеТоваровИзПереработки();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		Если СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Сборка Тогда
			ТекстЗапросаПоТабличнойЧастиПродукция = СформироватьТекстЗапросаПоПродукцииКомплектацияНоменклатурыСборка();
			ТекстЗапросаПоВыпускуПродукцииНаСклад = СформироватьТекстЗапросаПоВыпускуПродукцииНаСкладКомплектацияНоменклатурыСборка();
			
		ИначеЕсли СтруктураШапкиДокумента.ВидКомплектации = Перечисления.ВидыКомплектации.Разборка Тогда
			ТекстЗапросаПоТабличнойЧастиПродукция = СформироватьТекстЗапросаПоПродукцииКомплектацияНоменклатурыРазборка();
			ТекстЗапросаПоВыпускуПродукцииНаСклад = СформироватьТекстЗапросаПоВыпускуПродукцииНаСкладКомплектацияНоменклатурыРазборка();
			
		Иначе
			ОбщегоНазначения.Сообщение("Не определено формирование движений по выпуску продукции для вида комплектации: " + СтруктураШапкиДокумента.ВидКомплектации);
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		ТекстЗапросаПоТабличнойЧастиПродукция = СформироватьТекстЗапросаПоПродукцииАктОбОказанииПроизводственныхУслуг();
		ТекстЗапросаПоВыпускуВнешниеУслуги = СформироватьТекстЗапросаПоВыпускуВнешниеУслугиАктОбОказанииПроизводственныхУслуг();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаНЗП") Тогда
		ТекстЗапросаПоТабличнойЧастиПродукция = СформироватьТекстЗапросаПоПродукцииКорректировкаНЗП();
		ТекстЗапросаПоВыпускуПродукцииНаЗатраты = СформироватьТекстЗапросаПоВыпускуПродукцииКорректировкаНЗП();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеНЗП") Тогда
		ТекстЗапросаПоТабличнойЧастиПродукция = СформироватьТекстЗапросаПоПродукцииОприходованиеНЗП();
		ТекстЗапросаПоВыпускуПродукцииНаЗатраты = СформироватьТекстЗапросаПоВыпускуПродукцииОприходованиеНЗП();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеНЗП") Тогда
		ТекстЗапросаПоТабличнойЧастиПродукция = СформироватьТекстЗапросаПоПродукцииСписаниеНЗП();
		ТекстЗапросаПоВыпускуПродукцииНаЗатраты = СформироватьТекстЗапросаПоВыпускуПродукцииСписаниеНЗП();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		
		// При РАУЗ движения формируются в подписке на событие ПриПроведенииРасширеннаяАналитикаЗапасовИзменениеСостояния
		Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапросаПоТабличнойЧастиПродукция = СформироватьТекстЗапросаПоПродукцииОприходованиеМатериалов();
		ТекстЗапросаПоВыпускуПродукцииНаСклад = СформироватьТекстЗапросаПоВыпускуПродукцииОприходованиеМатериалов();
		ТекстЗапросаПоВыпускуПродукцииНаЗатраты = СформироватьТекстЗапросаПоВыпускуПродукцииОприходованиеМатериаловЗатраты();
		ТекстЗапросаПоТабличнойЧастиВозвратныеОтходы = СформироватьТекстЗапросаПоВозвратнымОтходамОприходованиеМатериалов();
		
	Иначе
		ОбщегоНазначения.Сообщение("Не определено формирование движений по выпуску продукции для документа: " + ИмяДокумента);
		Возврат;
	КонецЕсли;
	
	ДополнитьСтруктуруШапкиДокументаНастройкиУчета(
		СтруктураШапкиДокумента,
		УчетнаяПолитика,
		УчетнаяПолитикаБух
	);
		
	СтруктураНаборыЗаписей = Новый Структура;
	СтруктураКлючиАналитики = Новый Структура;
	
	// Формирование запроса по выпуску продукции (наработка).
	Если Не ПустаяСтрока(ТекстЗапросаПоВыпускуПродукцииНаработка) Тогда
		
		ЗапросПоВыпускуНаработка = СформироватьЗапросПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ТекстЗапросаПоВыпускуПродукцииНаработка,
			УчетнаяПолитика,
			УчетнаяПолитикаБух
			);
			
		РезультатЗапросаПоВыпускуНаработка = ЗапросПоВыпускуНаработка.Выполнить();
			
		Если Не РезультатЗапросаПоВыпускуНаработка.Пустой() Тогда
			СформироватьДвиженияВыпускПродукцииНаработка(
				СтруктураШапкиДокумента,
				РезультатЗапросаПоВыпускуНаработка,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
				);
		КонецЕсли;
			
	КонецЕсли;
	
	// Формирование запроса по выпущенной продукции и учетной стоимости продукции.
	Если Не ПустаяСтрока(ТекстЗапросаПоТабличнойЧастиПродукция) Тогда
		ЗапросПоУчетнойСтоимости = СформироватьЗапросПоВыпущеннойПродукцииИУчетнойСтоимости(
			СтруктураШапкиДокумента,
			ИмяДокумента,
			ТекстЗапросаПоТабличнойЧастиПродукция,
			УчетнаяПолитика,
			УчетнаяПолитикаБух
		);
	Иначе
		Возврат;
	КонецЕсли;
		
	РезультатЗапросаПоУчетнойСтоимости = ЗапросПоУчетнойСтоимости.Выполнить();
	Если Не РезультатЗапросаПоУчетнойСтоимости.Пустой() Тогда
		
		РаспределитьУчетнуюСтоимостьПоНаправлениямВыпуска(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоУчетнойСтоимости,
			ТекстЗапросаПоВыпускуПродукцииНаСклад,
			ТекстЗапросаПоВыпускуПродукцииНаЗатраты,
			ТекстЗапросаПоВыпускуПродукцииНаЗатратыСписок,
			ТекстЗапросаПоВыпускуВнешниеУслуги,
			УчетнаяПолитика,
			УчетнаяПолитикаБух,
			ПроведениеПоПартиям,
			СтруктураКлючиАналитики,
			СтруктураНаборыЗаписей
			);
			
	КонецЕсли;
		
	// Формирование запроса по возвратным отходам.
	Если Не ПустаяСтрока(ТекстЗапросаПоТабличнойЧастиВозвратныеОтходы) Тогда
		ЗапросПоВозвратнымОтходам = СформироватьЗапросПоВыпускуПродукции(
			СтруктураШапкиДокумента,
			ТекстЗапросаПоТабличнойЧастиВозвратныеОтходы,
			УчетнаяПолитика,
			УчетнаяПолитикаБух
			);
			
		РезультатЗапросаПоВозвратнымОтходам = ЗапросПоВозвратнымОтходам.Выполнить();
			
		Если Не РезультатЗапросаПоВозвратнымОтходам.Пустой() Тогда
			СформироватьДвиженияПоВозвратнымОтходам(
				СтруктураШапкиДокумента,
				РезультатЗапросаПоВозвратнымОтходам,
				УчетнаяПолитика,
				УчетнаяПолитикаБух,
				ПроведениеПоПартиям,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
				);
		КонецЕсли;
			
	КонецЕсли;
		
	Если СтруктураНаборыЗаписей.Количество() > 0 Тогда
		УправлениеЗатратамиДвиженияПоРегистрам.ЗаписатьНаборыЗаписейРегистров(
			СтруктураНаборыЗаписей
			);
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска()


// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ПО ВЫПУСКУ ПРИ РАСШИРЕННОЙ АНАЛИТИКЕ

// Процедура получает ключи аналитики для направления выпуска продукции.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	ВидВыпуска - ПеречислениеСсылка.ВидыВыпуска - Вид выпуска
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете для получения ключа аналитики
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//
// Выходные параметры:
//	АналитикаВидаУчета - СправочникСсылка.КлючиАналитикиВидаУчета - Ключ аналитики
//	АналитикаРаспределенияЗатрат - СправочникСсылка.КлючиАналитикиРаспределенияЗатрат - Ключ аналитики
//	АналитикаУчетаПартий - СправочникСсылка.КлючиАналитикиУчетаПартий - Ключ аналитики
//
Процедура ПолучитьАналитикуУчетаВыпуска(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВидВыпуска,
	ВидОтраженияВУчете,
	СтруктураКлючиАналитики,
	АналитикаВидаУчета,
	АналитикаРаспределенияЗатрат,
	АналитикаУчетаПартий
	) Экспорт
	
	АналитикаВидаУчета = Неопределено;
	АналитикаУчетаВыпуска = Неопределено;
	АналитикаУчетаЗатрат = Неопределено;
	
	СтруктураПараметров = Новый Структура;
	Если ВидВыпуска = Перечисления.ВидыВыпуска.Наработка Тогда
		СтруктураПараметров.Вставить("РазделУчета", Перечисления.РазделыУчета.Наработка);
	Иначе
		СтруктураПараметров.Вставить("РазделУчета", Перечисления.РазделыУчета.Выпуск);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Подразделение", СтрокаВыборки.Подразделение);
	СтруктураПараметров.Вставить("Организация", СтрокаВыборки.Организация);
	СтруктураПараметров.Вставить("ПодразделениеОрганизации", СтрокаВыборки.ПодразделениеОрганизации);
	СтруктураПараметров.Вставить("СчетУчета", СтрокаВыборки.СчетЗатрат);
	
	СтруктураПараметров.Вставить("НалоговоеНазначение", СтрокаВыборки.НалоговоеНазначение);
	
	АналитикаВидаУчета = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаВидаУчета,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НоменклатурнаяГруппа", СтрокаВыборки.НоменклатурнаяГруппа);
	СтруктураПараметров.Вставить("Продукция", СтрокаВыборки.Продукция);
	СтруктураПараметров.Вставить("ХарактеристикаПродукции", СтрокаВыборки.ХарактеристикаПродукции);
	СтруктураПараметров.Вставить("СерияПродукции", СтрокаВыборки.СерияПродукции);
	СтруктураПараметров.Вставить("Спецификация", СтрокаВыборки.Спецификация);
	
	АналитикаРаспределенияЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
		
	СтруктураПараметров = Новый Структура;
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		СтруктураПараметров.Вставить("Заказ", СтрокаВыборки.Заказ);
	Иначе
		СтруктураПараметров.Вставить("Заказ", СтрокаВыборки.ЗаказРегл);
	КонецЕсли;
	
	АналитикаУчетаПартий = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаУчетаПартий,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
	
КонецПроцедуры // ПолучитьАналитикуУчетаВыпуска()

// Процедура формирует движения по регистрам "Учет затрат" (отражение выпуска продукции).
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	ВидВыпуска - ПеречислениеСсылка.ВидыВыпуска - Вид выпуска
//	МассивСтрокБазыРаспределения - Массив - Массив строк базы распределения по проектам
//	КодОперацииВыпускПродукцииУУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по управленческому учету
//	КодОперацииВыпускПродукцииБУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по бухгалтерскому учету
//	Количество - Число - Количество затрат
//	СтоимостьУУ - Число - Учетная стоимость по управленческому учету
//	СтоимостьБУ - Число - Учетная стоимость по бухгалтерскому учету
//	СтоимостьНУ - Число - Учетная стоимость по налоговому учету
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура ДвиженияПоРегистрамУчетЗатратВыпускПродукции(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВидВыпуска,
	МассивСтрокБазыРаспределения,
	КодОперацииВыпускПродукцииУУ,
	КодОперацииВыпускПродукцииБУ,
	Знач Количество,
	Знач СтоимостьУУ,
	Знач СтоимостьБУ,
	Знач СтоимостьНУ,
	Знач НДСВходящийНУ,
	Знач НДСКредитНУ,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	)
	
	МассивКодовКорректировки = Новый Массив;
	МассивКодовКорректировки.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП);
	МассивКодовКорректировки.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс);
	МассивКодовКорректировки.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	МассивКодовКорректировки.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	МассивКодовКорректировки.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч);
	МассивКодовКорректировки.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс);
	
	КодыОперацийБезКорАналитики = Новый Массив;
	КодыОперацийБезКорАналитики.Добавить(Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП);
	КодыОперацийБезКорАналитики.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	КодыОперацийБезКорАналитики.Добавить(Перечисления.КодыОперацийНезавершенноеПроизводство.ОтрицательныеЗатраты);
	
	// По материалам принятым в переработку движения по регистрам учета затрат не формируются.
	ВыпускМатериаловПринятыхВПереработку = ОпределитьСтатусМатериальныхЗатратВПереработку(СтрокаВыборки);
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И СтруктураШапкиДокумента.ОтражатьЗатратыВУпрУчете
	   И НЕ ВыпускМатериаловПринятыхВПереработку
	Тогда
		
		ИмяРегистра = "УчетЗатрат";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		АналитикаВидаУчета = Неопределено;
		АналитикаУчетаЗатрат = Неопределено;
		АналитикаУчетаПартий = Неопределено;
		АналитикаРаспределенияЗатрат = Неопределено;
		УчетЗатратПоНоменклатуре = Истина;
		УчетЗатратПоПроектам = Ложь;
		
		ПолучитьАналитикуНаправленияВыпуска(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			КодОперацииВыпускПродукцииУУ,
			СтруктураКлючиАналитики,
			АналитикаВидаУчета,
			АналитикаУчетаЗатрат,
			АналитикаУчетаПартий,
			АналитикаРаспределенияЗатрат,
			УчетЗатратПоНоменклатуре,
			УчетЗатратПоПроектам
		);
		
		КорАналитикаВидаУчета = Неопределено;
		КорАналитикаУчетаЗатрат = Неопределено;
		КорАналитикаРаспределенияЗатрат = Неопределено;
		КорАналитикаУчетаПартий = Неопределено;
		КорУчетЗатратПоНоменклатуре = Истина;
		
		Если МассивКодовКорректировки.Найти(КодОперацииВыпускПродукцииУУ) <> Неопределено Тогда
			ПолучитьАналитикуУчетаЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
				СтруктураКлючиАналитики,
				КорАналитикаВидаУчета,
				КорАналитикаУчетаЗатрат,
				КорАналитикаРаспределенияЗатрат,
				КорАналитикаУчетаПартий,
				КорУчетЗатратПоНоменклатуре
			);
		ИначеЕсли КодыОперацийБезКорАналитики.Найти(КодОперацииВыпускПродукцииУУ) = Неопределено Тогда
			ПолучитьАналитикуУчетаВыпуска(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ВидВыпуска,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
				СтруктураКлючиАналитики,
				КорАналитикаВидаУчета,
				КорАналитикаРаспределенияЗатрат,
				КорАналитикаУчетаПартий
			);
		КонецЕсли;

		Если УчетЗатратПоПроектам
		   И МассивСтрокБазыРаспределения.Количество() > 0
		Тогда
			РаспределитьСуммуВыпускаПоПроектам(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				МассивСтрокБазыРаспределения,
				АналитикаВидаУчета,
				АналитикаУчетаЗатрат,
				АналитикаУчетаПартий,
				АналитикаРаспределенияЗатрат,
				КорАналитикаВидаУчета,
				КорАналитикаУчетаЗатрат,
				КорАналитикаУчетаПартий,
				КорАналитикаРаспределенияЗатрат,
				ВидДвиженияНакопления.Приход,
				КодОперацииВыпускПродукцииУУ,
				?(УчетЗатратПоНоменклатуре, Количество, 0),
				СтоимостьУУ,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей[ИмяРегистра]
			);
		Иначе
			РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
				СтруктураШапкиДокумента,
				АналитикаВидаУчета,
				АналитикаУчетаЗатрат,
				АналитикаУчетаПартий,
				АналитикаРаспределенияЗатрат,
				КорАналитикаВидаУчета,
				КорАналитикаУчетаЗатрат,
				КорАналитикаУчетаПартий,
				КорАналитикаРаспределенияЗатрат,
				ВидДвиженияНакопления.Приход,
				КодОперацииВыпускПродукцииУУ,
				?(УчетЗатратПоНоменклатуре, Количество, 0),
				СтоимостьУУ,
				0, // КоличествоНУ,
				0, // СтоимостьНУ,
				0, // НДСВходящий
				0, // НДСКредит
				СтруктураНаборыЗаписей[ИмяРегистра]
			);
		КонецЕсли;
		
		Если МассивКодовКорректировки.Найти(КодОперацииВыпускПродукцииУУ) <> Неопределено Тогда
			РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
				СтруктураШапкиДокумента,
				КорАналитикаВидаУчета,
				КорАналитикаУчетаЗатрат,
				КорАналитикаУчетаПартий,
				КорАналитикаРаспределенияЗатрат,
				АналитикаВидаУчета,
				АналитикаУчетаЗатрат,
				АналитикаУчетаПартий,
				АналитикаРаспределенияЗатрат,
				ВидДвиженияНакопления.Расход,
				КодОперацииВыпускПродукцииУУ,
				?(КорУчетЗатратПоНоменклатуре, Количество, 0),
				СтоимостьУУ,
				0, // КоличествоНУ,
				0, // СтоимостьНУ,
				0, // НДСВходящий
				0, // НДСКредит
				СтруктураНаборыЗаписей[ИмяРегистра]
			);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	   И НЕ ВыпускМатериаловПринятыхВПереработку
	Тогда
		
		ИмяРегистра = "УчетЗатратРегл";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		АналитикаВидаУчета = Неопределено;
		АналитикаУчетаЗатрат = Неопределено;
		АналитикаУчетаПартий = Неопределено;
		АналитикаРаспределенияЗатрат = Неопределено;
		УчетЗатратПоНоменклатуре = Истина;
		УчетЗатратПоПроектам = Ложь;
		
		Если НЕ (КодОперацииВыпускПродукцииБУ = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс И СтруктураШапкиДокумента.ВидДокумента = "СписаниеНЗП" И НЕ СтруктураШапкиДокумента.ОтражатьПоЗатратам) Тогда
			
			ПолучитьАналитикуНаправленияВыпуска(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
				КодОперацииВыпускПродукцииУУ,
				СтруктураКлючиАналитики,
				АналитикаВидаУчета,
				АналитикаУчетаЗатрат,
				АналитикаУчетаПартий,
				АналитикаРаспределенияЗатрат,
				УчетЗатратПоНоменклатуре,
				УчетЗатратПоПроектам
			);
			
		КонецЕсли;
		
		КорАналитикаВидаУчета = Неопределено;
		КорАналитикаУчетаЗатрат = Неопределено;
		КорАналитикаРаспределенияЗатрат = Неопределено;
		КорАналитикаУчетаПартий = Неопределено;
		КорУчетЗатратПоНоменклатуре = Истина;
		
		Если МассивКодовКорректировки.Найти(КодОперацииВыпускПродукцииБУ) <> Неопределено Тогда
			ПолучитьАналитикуУчетаЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
				СтруктураКлючиАналитики,
				КорАналитикаВидаУчета,
				КорАналитикаУчетаЗатрат,
				КорАналитикаРаспределенияЗатрат,
				КорАналитикаУчетаПартий,
				КорУчетЗатратПоНоменклатуре
			);
		ИначеЕсли КодыОперацийБезКорАналитики.Найти(КодОперацииВыпускПродукцииБУ) = Неопределено Тогда
			ПолучитьАналитикуУчетаВыпуска(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				ВидВыпуска,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
				СтруктураКлючиАналитики,
				КорАналитикаВидаУчета,
				КорАналитикаРаспределенияЗатрат,
				КорАналитикаУчетаПартий
			);
		КонецЕсли;
		
		КоличествоНУ = Количество;	

		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			АналитикаВидаУчета,
			АналитикаУчетаЗатрат,
			АналитикаУчетаПартий,
			АналитикаРаспределенияЗатрат,
			КорАналитикаВидаУчета,
			КорАналитикаУчетаЗатрат,
			КорАналитикаУчетаПартий,
			КорАналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Приход,
			КодОперацииВыпускПродукцииБУ,
			?(УчетЗатратПоНоменклатуре, Количество, 0),
			СтоимостьБУ,
			?(УчетЗатратПоНоменклатуре, КоличествоНУ, 0),
			СтоимостьНУ,
			НДСВходящийНУ,
			НДСКредитНУ,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
		Если МассивКодовКорректировки.Найти(КодОперацииВыпускПродукцииБУ) <> Неопределено Тогда
			РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
				СтруктураШапкиДокумента,
				КорАналитикаВидаУчета,
				КорАналитикаУчетаЗатрат,
				КорАналитикаУчетаПартий,
				КорАналитикаРаспределенияЗатрат,
				АналитикаВидаУчета,
				АналитикаУчетаЗатрат,
				АналитикаУчетаПартий,
				АналитикаРаспределенияЗатрат,
				ВидДвиженияНакопления.Расход,
				КодОперацииВыпускПродукцииБУ,
				?(КорУчетЗатратПоНоменклатуре, Количество, 0),
				СтоимостьБУ,
				?(КорУчетЗатратПоНоменклатуре, КоличествоНУ, 0),
				СтоимостьНУ,
				НДСВходящийНУ,
				НДСКредитНУ,
				СтруктураНаборыЗаписей[ИмяРегистра]
			);
			
		КонецЕсли;
		
		Если КодыОперацийБезКорАналитики.Найти(КодОперацииВыпускПродукцииБУ) = Неопределено Тогда
			
			// расчет и движения по корректировкам использования в НУ
		  	БылиКорректировкиНУ = УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоКорректировкамИспользованияНУ(
		  		СтруктураШапкиДокумента,
		  		СтруктураШапкиДокумента.Дата,
		  		КорАналитикаВидаУчета,
		  		КорАналитикаУчетаЗатрат,						
		  		КорАналитикаУчетаПартий,
		  		КорАналитикаРаспределенияЗатрат,
		  		АналитикаВидаУчета,
		  		АналитикаУчетаЗатрат,						
		  		АналитикаУчетаПартий,
		  		АналитикаРаспределенияЗатрат,
		  		СтруктураНаборыЗаписей[ИмяРегистра],
				СтоимостьБУ,
		  		НДСВходящийНУ,
		  		НДСКредитНУ,
		  		, // НалоговоеНазначение
		  		КоличествоНУ
		  	);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУчетЗатратВыпускПродукции()

// Процедура формирует движения по регистрам "Учет затрат" (отражение выпуска продукции по наработке).
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	Количество - Число - Количество продукции
//	КоличествоДоделка - Число - Количество продукции (доделка)
//	СтоимостьУУ - Число - Учетная стоимость по управленческому учету
//	СтоимостьБУ - Число - Учетная стоимость по бухгалтерскому учету
//	СтоимостьНУ - Число - Учетная стоимость по налоговому учету
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура ДвиженияПоРегистрамУчетЗатратВыпускПродукцииНаработка(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Знач Количество,
	Знач КоличествоДоделка,
	Знач СтоимостьУУ,
	Знач СтоимостьБУ,
	Знач СтоимостьНУ,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	)
	
	// Для вида выпуска "Наработка" движения формируем только, если количество выпуска
	// больше количества доделки.
	Если СтрокаВыборки.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка
	   И Количество <= КоличествоДоделка Тогда
		Возврат;
	КонецЕсли;
	
	Количество = Макс(Количество - КоличествоДоделка, 0);
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И СтруктураШапкиДокумента.ОтражатьЗатратыВУпрУчете
	Тогда
		
		ИмяРегистра = "УчетЗатрат";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		АналитикаВидаУчета = Неопределено;
		АналитикаРаспределенияЗатрат = Неопределено;
		АналитикаУчетаПартий = Неопределено;
		
		ПолучитьАналитикуУчетаВыпуска(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Перечисления.ВидыВыпуска.Наработка,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			СтруктураКлючиАналитики,
			АналитикаВидаУчета,
			АналитикаРаспределенияЗатрат,
			АналитикаУчетаПартий
		);

		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			АналитикаВидаУчета,
			Неопределено, // АналитикаУчетаЗатрат,
			АналитикаУчетаПартий,
			АналитикаРаспределенияЗатрат,
			Неопределено, // КорАналитикаВидаУчета,
			Неопределено, // КорАналитикаУчетаЗатрат,
			Неопределено, // КорАналитикаУчетаПартий,
			Неопределено, // КорАналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Приход,
			Неопределено, // КодОперации
			Количество,
			СтоимостьУУ,
			0, // КоличествоНУ,
			0, // СтоимостьНУ,
			0, // НДСВходящий
			0, // НДСКредит
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			АналитикаВидаУчета,
			Неопределено, // АналитикаУчетаЗатрат,
			АналитикаУчетаПартий,
			АналитикаРаспределенияЗатрат,
			Неопределено, // КорАналитикаВидаУчета,
			Неопределено, // КорАналитикаУчетаЗатрат,
			Неопределено, // КорАналитикаУчетаПартий,
			Неопределено, // КорАналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Расход,
			Неопределено, // КодОперации
			КоличествоДоделка,
			0, // СтоимостьУУ,
			0, // КоличествоНУ,
			0, // СтоимостьНУ,
			0, // НДСВходящий
			0, // НДСКредит
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистра = "УчетЗатратРегл";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		АналитикаВидаУчета = Неопределено;
		АналитикаРаспределенияЗатрат = Неопределено;
		АналитикаУчетаПартий = Неопределено;
		
		ПолучитьАналитикуУчетаВыпуска(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Перечисления.ВидыВыпуска.Наработка,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			СтруктураКлючиАналитики,
			АналитикаВидаУчета,
			АналитикаРаспределенияЗатрат,
			АналитикаУчетаПартий
		);
		
		
		КоличествоНУ = Количество;
		КоличествоДоделкаНУ = КоличествоДоделка;

		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			АналитикаВидаУчета,
			Неопределено, // АналитикаУчетаЗатрат,
			АналитикаУчетаПартий,
			АналитикаРаспределенияЗатрат,
			Неопределено, // КорАналитикаВидаУчета,
			Неопределено, // КорАналитикаУчетаЗатрат,
			Неопределено, // КорАналитикаУчетаПартий,
			Неопределено, // КорАналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Приход,
			Неопределено, // КодОперации
			Количество,
			СтоимостьБУ,
			КоличествоНУ,
			СтоимостьНУ,
			0, // НДСВходящий
			0, // НДСКредит
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			АналитикаВидаУчета,
			Неопределено, // АналитикаУчетаЗатрат,
			АналитикаУчетаПартий,
			АналитикаРаспределенияЗатрат,
			Неопределено, // КорАналитикаВидаУчета,
			Неопределено, // КорАналитикаУчетаЗатрат,
			Неопределено, // КорАналитикаУчетаПартий,
			Неопределено, // КорАналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Расход,
			Неопределено, // КодОперации
			КоличествоДоделка,
			0, // СтоимостьБУ,
			КоличествоДоделкаНУ,
			0, // СтоимостьНУ,
			0, // НДСВходящий
			0, // НДСКредит
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУчетЗатратВыпускПродукцииНаработка()

// Процедура формирует движения по регистрам "Выпуск продукции и услуг".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	ВидВыпуска - ПеречислениеСсылка.ВидыВыпуска - Вид выпуска
//	МассивСтрокБазыРаспределения - Массив - Массив строк базы распределения по проектам
//	КодОперацииВыпускПродукцииУУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по управленческому учету
//	КодОперацииВыпускПродукцииБУ - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции по бухгалтерскому учету
//	Количество - Число - Количество выпуска
//	СтоимостьУУ - Число - Учетная стоимость по управленческому учету
//	СтоимостьБУ - Число - Учетная стоимость по бухгалтерскому учету
//	СтоимостьНУ - Число - Учетная стоимость по налоговому учету
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура ДвиженияПоРегистрамВыпускПродукцииИУслуг(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВидВыпуска,
	МассивСтрокБазыРаспределения,
	КодОперацииВыпускПродукцииУУ,
	КодОперацииВыпускПродукцииБУ,
	Знач Количество,
	Знач СтоимостьУУ,
	Знач СтоимостьБУ,
	Знач СтоимостьНУ,
	Знач НДСВходящийНУ,
	Знач НДСКредитНУ,
	СтруктураКлючиАналитики,
	СтруктураНаборыЗаписей
	)
	
	ИсключаемыеКодыОпераций = Новый Массив;
	ИсключаемыеКодыОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП);
	ИсключаемыеКодыОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч);
	ИсключаемыеКодыОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс);
	ИсключаемыеКодыОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	ИсключаемыеКодыОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч);
	ИсключаемыеКодыОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс);
	ИсключаемыеКодыОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП);
	ИсключаемыеКодыОпераций.Добавить(Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс);
	
	Если ИсключаемыеКодыОпераций.Найти(КодОперацииВыпускПродукцииУУ) <> Неопределено
	 ИЛИ ИсключаемыеКодыОпераций.Найти(КодОперацииВыпускПродукцииБУ) <> Неопределено
	Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И СтруктураШапкиДокумента.ОтражатьЗатратыВУпрУчете
	Тогда
		
		АналитикаВидаУчета = Неопределено;
		АналитикаУчетаПродукции = Неопределено;
		АналитикаУчетаПартий = Неопределено;
		
		ПолучитьАналитикуУчетаВыпуска(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			ВидВыпуска,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			СтруктураКлючиАналитики,
			АналитикаВидаУчета,
			АналитикаУчетаПродукции,
			АналитикаУчетаПартий
		);
		
		КорАналитикаВидаУчета = Неопределено;
		КорАналитикаУчетаЗатрат = Неопределено;
		КорАналитикаУчетаПартий = Неопределено;
		КорАналитикаРаспределенияЗатрат = Неопределено;
		УчетЗатратПоНоменклатуре = Истина;
		УчетЗатратПоПроектам = Ложь;
		
		ПолучитьАналитикуНаправленияВыпуска(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			КодОперацииВыпускПродукцииУУ,
			СтруктураКлючиАналитики,
			КорАналитикаВидаУчета,
			КорАналитикаУчетаЗатрат,
			КорАналитикаУчетаПартий,
			КорАналитикаРаспределенияЗатрат,
			УчетЗатратПоНоменклатуре,
			УчетЗатратПоПроектам
		);
		
		ИмяРегистра = "УчетЗатрат";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		// Движения "Приход" по аналитике выпуска.
		Если ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск Тогда
			РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
				СтруктураШапкиДокумента,
				АналитикаВидаУчета,
				Неопределено, // АналитикаУчетаЗатрат,
				АналитикаУчетаПартий,
				АналитикаУчетаПродукции,
				Неопределено, // КорАналитикаВидаУчета,
				Неопределено, // КорАналитикаУчетаЗатрат,
				Неопределено, // КорАналитикаУчетаПартий,
				Неопределено, // КорАналитикаРаспределенияЗатрат,
				ВидДвиженияНакопления.Приход,
				Неопределено, // КодОперации
				Количество,
				СтоимостьУУ,
				0, // КоличествоНУ,
				0, // СтоимостьНУ,
				0, // НДСВходящий,
				0, // НДСКредит,
				СтруктураНаборыЗаписей[ИмяРегистра]
			);
		КонецЕсли;
		
		// Движения "Расход" по аналитике выпуска.
		Если УчетЗатратПоПроектам
		   И МассивСтрокБазыРаспределения.Количество() > 0
		Тогда
			РаспределитьСуммуВыпускаПоПроектам(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				МассивСтрокБазыРаспределения,
				АналитикаВидаУчета,
				Неопределено, // АналитикаУчетаЗатрат,
				АналитикаУчетаПартий,
				АналитикаУчетаПродукции,
				КорАналитикаВидаУчета,
				КорАналитикаУчетаЗатрат,
				КорАналитикаУчетаПартий,
				КорАналитикаРаспределенияЗатрат,
				ВидДвиженияНакопления.Расход,
				КодОперацииВыпускПродукцииУУ,
				Количество,
				СтоимостьУУ,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей[ИмяРегистра]
			);
		Иначе   
			РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
				СтруктураШапкиДокумента,
				АналитикаВидаУчета,
				Неопределено, // АналитикаУчетаЗатрат,
				АналитикаУчетаПартий,
				АналитикаУчетаПродукции,
				КорАналитикаВидаУчета,
				КорАналитикаУчетаЗатрат,
				КорАналитикаУчетаПартий,
				КорАналитикаРаспределенияЗатрат,
				ВидДвиженияНакопления.Расход,
				КодОперацииВыпускПродукцииУУ,
				Количество,
				СтоимостьУУ,
				0, // КоличествоНУ,
				0, // СтоимостьНУ,
				0, // НДСВходящий,
				0, // НДСКредит,
				СтруктураНаборыЗаписей[ИмяРегистра]
			);
		КонецЕсли;
				
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		АналитикаВидаУчета = Неопределено;
		АналитикаУчетаПродукции = Неопределено;
		АналитикаУчетаПартий = Неопределено;
		
		ПолучитьАналитикуУчетаВыпуска(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			ВидВыпуска,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			СтруктураКлючиАналитики,
			АналитикаВидаУчета,
			АналитикаУчетаПродукции,
			АналитикаУчетаПартий
		);
		
		КорАналитикаВидаУчета = Неопределено;
		КорАналитикаУчетаЗатрат = Неопределено;
		КорАналитикаУчетаПартий = Неопределено;
		КорАналитикаРаспределенияЗатрат = Неопределено;
		УчетЗатратПоНоменклатуре = Истина;
		УчетЗатратПоПроектам = Ложь;
		
		ПолучитьАналитикуНаправленияВыпуска(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			КодОперацииВыпускПродукцииБУ,
			СтруктураКлючиАналитики,
			КорАналитикаВидаУчета,
			КорАналитикаУчетаЗатрат,
			КорАналитикаУчетаПартий,
			КорАналитикаРаспределенияЗатрат,
			УчетЗатратПоНоменклатуре,
			УчетЗатратПоПроектам
		);
		
		ИмяРегистра = "УчетЗатратРегл";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		КоличествоНУ = Количество;
		
		// Движения "Приход" по аналитике выпуска.
		Если ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск Тогда
			РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
				СтруктураШапкиДокумента,
				АналитикаВидаУчета,
				Неопределено, // АналитикаУчетаЗатрат,
				АналитикаУчетаПартий,
				АналитикаУчетаПродукции,
				Неопределено, // КорАналитикаВидаУчета,
				Неопределено, // КорАналитикаУчетаЗатрат,
				Неопределено, // КорАналитикаУчетаПартий,
				Неопределено, // КорАналитикаРаспределенияЗатрат,
				ВидДвиженияНакопления.Приход,
				Неопределено, // КодОперации
				Количество,
				СтоимостьБУ,
				КоличествоНУ,
				СтоимостьНУ,
				НДСВходящийНУ,
				НДСКредитНУ,
				СтруктураНаборыЗаписей[ИмяРегистра]
			);
		КонецЕсли;
		
		// Движения "Расход" по аналитике выпуска.
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			АналитикаВидаУчета,
			Неопределено, // АналитикаУчетаЗатрат,
			АналитикаУчетаПартий,
			АналитикаУчетаПродукции,
			КорАналитикаВидаУчета,
			КорАналитикаУчетаЗатрат,
			КорАналитикаУчетаПартий,
			КорАналитикаРаспределенияЗатрат,
			ВидДвиженияНакопления.Расход,
			КодОперацииВыпускПродукцииБУ,
			Количество,
			СтоимостьБУ,
			КоличествоНУ,
			СтоимостьНУ,
			НДСВходящийНУ,
			НДСКредитНУ,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);

	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамВыпускПродукцииИУслуг()


// Процедура получает ключи аналитики для направления выпуска продукции.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете для получения ключа аналитики
//	КодОперации - ПеречислениеСсылка.КодыОперацийВыпускПродукции - Код операции
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//
// Выходные параметры:
//	КорАналитикаВидаУчета - СправочникСсылка.КлючиАналитикиВидаУчета - Ключ аналитики
//	КорАналитикаУчетаЗатрат - СправочникСсылка.КлючиАналитикиУчетаЗатрат - Ключ аналитики
//	КорАналитикаУчетаПартий - СправочникСсылка.КлючиАналитикиУчетаПартий - Ключ аналитики
//	КорАналитикаРаспределенияЗатрат - СправочникСсылка.КлючиАналитикиРаспределенияЗатрат - Ключ аналитики
//	УчетЗатратПоНоменклатуре - Булево - Признак учета затрат по номенклатуре
//	УчетЗатратПоПроектам - Булево - Признак учета затрат по проектам
//
Процедура ПолучитьАналитикуНаправленияВыпуска(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВидОтраженияВУчете,
	КодОперации,
	СтруктураКлючиАналитики,
	КорАналитикаВидаУчета,
	КорАналитикаУчетаЗатрат,
	КорАналитикаУчетаПартий,
	КорАналитикаРаспределенияЗатрат,
	УчетЗатратПоНоменклатуре,
	УчетЗатратПоПроектам
	)
	
	КорАналитикаВидаУчета = Неопределено;
	КорАналитикаУчетаЗатрат = Неопределено;
	КорАналитикаУчетаПартий = Неопределено;
	КорАналитикаРаспределенияЗатрат = Неопределено;
	УчетЗатратПоНоменклатуре = Истина;
	
	Если КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты Тогда
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(
				СтрокаВыборки.СчетДт, 
				СтрокаВыборки.СтатьяЗатратПолучатель
			);
		Иначе
			ХарактерЗатрат = СтрокаВыборки.ХарактерЗатрат;
		КонецЕсли;
		
	ИначеЕсли КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.ОтрицательныеЗатраты Тогда
		ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы;
		
	КонецЕсли;
	
	Если КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад
	 ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости
	 ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваРасч
	 ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВозвратМатериаловИзПроизводстваФикс
	Тогда
	
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("РазделУчета", Перечисления.РазделыУчета.МПЗ);
		СтруктураПараметров.Вставить("Организация", СтрокаВыборки.Организация);
		СтруктураПараметров.Вставить("СчетУчета", СтрокаВыборки.СчетДт);
		
		СтруктураПараметров.Вставить("НалоговоеНазначение", СтрокаВыборки.НалоговоеНазначение);
				
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
			Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
				СтруктураПараметров.Вставить("Склад", СтрокаВыборки.СкладПолучатель);
			КонецЕсли;
		
		ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
			Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладамРегл Тогда
				СтруктураПараметров.Вставить("Склад", СтрокаВыборки.СкладПолучатель);
			КонецЕсли;
			
		КонецЕсли;
	
		КорАналитикаВидаУчета = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
			СтруктураШапкиДокумента,
			СтруктураПараметров,
			Перечисления.КлючиАналитики.АналитикаВидаУчета,
			ВидОтраженияВУчете,
			СтруктураКлючиАналитики
		);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Затрата", СтрокаВыборки.Продукция);
		СтруктураПараметров.Вставить("ХарактеристикаЗатраты", СтрокаВыборки.ХарактеристикаПродукции);
		Если СтрокаВыборки.ВестиПартионныйУчетПоСериям Тогда
			СтруктураПараметров.Вставить("СерияЗатраты", СтрокаВыборки.СерияПродукции);
		КонецЕсли;
		СтруктураПараметров.Вставить("Качество", СтрокаВыборки.Качество);
		
		КорАналитикаУчетаЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
			СтруктураШапкиДокумента,
			СтруктураПараметров,
			Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
			ВидОтраженияВУчете,
			СтруктураКлючиАналитики
		);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Заказ", Неопределено); // Обособленный учет на складе по заказам не поддерживается
		СтруктураПараметров.Вставить("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный); // Статус партии пишем фиксированный.
		
		КорАналитикаУчетаПартий = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
			СтруктураШапкиДокумента,
			СтруктураПараметров,
			Перечисления.КлючиАналитики.АналитикаУчетаПартий,
			ВидОтраженияВУчете,
			СтруктураКлючиАналитики
		);
		
		СтруктураПараметров = Новый Структура;
		
		КорАналитикаРаспределенияЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
			СтруктураШапкиДокумента,
			СтруктураПараметров,
			Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
			ВидОтраженияВУчете,
			СтруктураКлючиАналитики
		);
		
	ИначеЕсли (КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты
		  ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство
		  ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.ОприходованиеНЗП
		  ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПРасч
		  ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.КорректировкаНЗПФикс
		  ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗП
		  ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.СписаниеНЗПФикс
		  ИЛИ КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.ОтрицательныеЗатраты
		  )
		    И ХарактерЗатрат <> Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы
	Тогда
	
		РасширеннаяАналитикаУчета.ПолучитьАналитикуОтраженияЗатрат(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтрокаВыборки.Проект,
			ХарактерЗатрат,
			ХарактерЗатрат, // ХарактерЗатратНУ
			КодОперации,
			ВидОтраженияВУчете,
			СтруктураКлючиАналитики,
			КорАналитикаВидаУчета,
			КорАналитикаУчетаЗатрат,
			КорАналитикаУчетаПартий,
			КорАналитикаРаспределенияЗатрат,
			УчетЗатратПоНоменклатуре,
			УчетЗатратПоПроектам
		);
		
	ИначеЕсли КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаСчет
		  ИЛИ КодОперации = Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги
		  ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы
	Тогда
		
		СтруктураПараметров = Новый Структура;
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			СтруктураПараметров.Вставить("ОбъектСтроительства", СтрокаВыборки.ОбъектСтроительства);
			СтруктураПараметров.Вставить("Субконто1", СтрокаВыборки.СтатьяЗатратПолучатель);
		КонецЕсли;
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураПараметров.Вставить("СчетУчета", СтрокаВыборки.СчетДт);
			СтруктураПараметров.Вставить("НалоговоеНазначение", СтрокаВыборки.НалоговоеНазначениеПолучатель);
			
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
				СтруктураПараметров.Вставить("Субконто1", СтрокаВыборки.ОбъектСтроительства);
				СтруктураПараметров.Вставить("Субконто2", СтрокаВыборки.СтатьяЗатратПолучатель);
			Иначе
				СтруктураПараметров.Вставить("Субконто1", СтрокаВыборки.СубконтоДт1);
				СтруктураПараметров.Вставить("Субконто2", СтрокаВыборки.СубконтоДт2);
				СтруктураПараметров.Вставить("Субконто3", СтрокаВыборки.СубконтоДт3);
			КонецЕсли;
		КонецЕсли;
	
		КорАналитикаВидаУчета = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
			СтруктураШапкиДокумента,
			СтруктураПараметров,
			Перечисления.КлючиАналитики.АналитикаУчетаПрочихЗатрат,
			ВидОтраженияВУчете,
			СтруктураКлючиАналитики
		);
		
	КонецЕсли;

КонецПроцедуры // ПолучитьАналитикуНаправленияВыпуска()

// Процедура получает ключи аналитики для аналитики учета затрат.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете для получения ключа аналитики
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//
// Выходные параметры:
//	АналитикаВидаУчета - СправочникСсылка.КлючиАналитикиВидаУчета - Ключ аналитики
//	АналитикаУчетаЗатрат - СправочникСсылка.КлючиАналитикиУчетаЗатрат - Ключ аналитики
//	АналитикаРаспределенияЗатрат - СправочникСсылка.КлючиАналитикиРаспределенияЗатрат - Ключ аналитики
//	АналитикаУчетаПартий - СправочникСсылка.КлючиАналитикиУчетаПартий - Ключ аналитики
//	УчетЗатратПоНоменклатуре - Булево - Признак учета затрат по номенклатуре
//
Процедура ПолучитьАналитикуУчетаЗатрат(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ВидОтраженияВУчете,
	СтруктураКлючиАналитики,
	АналитикаВидаУчета,
	АналитикаУчетаЗатрат,
	АналитикаРаспределенияЗатрат,
	АналитикаУчетаПартий,
	УчетЗатратПоНоменклатуре
	)
	
	АналитикаВидаУчета = Неопределено;
	АналитикаУчетаЗатрат = Неопределено;
	АналитикаРаспределенияЗатрат = Неопределено;
	АналитикаУчетаПартий = Неопределено;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РазделУчета", Перечисления.РазделыУчета.Затраты);
	
	СтруктураПараметров.Вставить("Организация", СтрокаВыборки.Организация);
	СтруктураПараметров.Вставить("Подразделение", СтрокаВыборки.Подразделение);
	СтруктураПараметров.Вставить("ПодразделениеОрганизации", СтрокаВыборки.ПодразделениеОрганизации);
	СтруктураПараметров.Вставить("СчетУчета", СтрокаВыборки.СчетЗатрат);
	
	СтруктураПараметров.Вставить("НалоговоеНазначение", СтрокаВыборки.НалоговоеНазначение);
		
	АналитикаВидаУчета = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаВидаУчета,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
	 ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
	Тогда
		ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(
			СтрокаВыборки.СчетЗатрат, 
			СтрокаВыборки.СтатьяЗатрат
		);
	Иначе
		ХарактерЗатрат = СтрокаВыборки.ХарактерЗатрат;
	КонецЕсли;
	
	УчетЗатратПоНоменклатуре = РасширеннаяАналитикаУчета.УчитыватьЗатратыПоНоменклатуре(
		ХарактерЗатрат,
		СтрокаВыборки.ВидЗатрат
	);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатьяЗатрат", СтрокаВыборки.СтатьяЗатрат);
	СтруктураПараметров.Вставить("Затрата", СтрокаВыборки.Продукция);
	СтруктураПараметров.Вставить("ХарактеристикаЗатраты", СтрокаВыборки.ХарактеристикаПродукции);
	СтруктураПараметров.Вставить("СерияЗатраты", СтрокаВыборки.СерияПродукции);
	СтруктураПараметров.Вставить("ХарактерЗатрат", ХарактерЗатрат);
	Если СтрокаВыборки.Владелец().Колонки.Найти("ВестиУчетПоСериямВНЗП") <> Неопределено Тогда
		СтруктураПараметров.Вставить("ВестиУчетПоСериямВНЗП", СтрокаВыборки.ВестиУчетПоСериямВНЗП);
	КонецЕсли; 
	
	АналитикаУчетаЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаУчетаЗатрат,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НоменклатурнаяГруппа", СтрокаВыборки.НоменклатурнаяГруппа);
	
	АналитикаРаспределенияЗатрат = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаРаспределенияЗатрат,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
	
	СтруктураПараметров = Новый Структура;
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		СтруктураПараметров.Вставить("Заказ", СтрокаВыборки.Заказ);
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
		ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
	Тогда
		СтруктураПараметров.Вставить("Заказ", СтрокаВыборки.ЗаказРегл);
	КонецЕсли;
	
	АналитикаУчетаПартий = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
		СтруктураШапкиДокумента,
		СтруктураПараметров,
		Перечисления.КлючиАналитики.АналитикаУчетаПартий,
		ВидОтраженияВУчете,
		СтруктураКлючиАналитики
	);
	
КонецПроцедуры // ПолучитьАналитикуУчетаЗатрат()

// Процедура выполняет распределение затрат по проектам.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	МассивСтрок - Массив - Массив строк базы распределения по проектам
//	АналитикаВидаУчета - СправочникСсылка.КлючиАналитикиВидаУчета - Ключ аналитики
//	АналитикаУчетаЗатрат - СправочникСсылка.КлючиАналитикиУчетаЗатрат - Ключ аналитики
//	АналитикаУчетаПартий - СправочникСсылка.КлючиАналитикиУчетаПартий - Ключ аналитики
//	АналитикаУчетаПродукции - СправочникСсылка.КлючиАналитикиРаспределенияЗатрат - Ключ аналитики
//	КорАналитикаВидаУчета - СправочникСсылка.КлючиАналитикиВидаУчета - Ключ аналитики
//	КорАналитикаУчетаЗатрат - СправочникСсылка.КлючиАналитикиУчетаЗатрат - Ключ аналитики
//	КорАналитикаУчетаПартий - СправочникСсылка.КлючиАналитикиУчетаПартий - Ключ аналитики
//	КорАналитикаРаспределенияЗатрат - СправочникСсылка.КлючиАналитикиРаспределенияЗатрат - Ключ аналитики
//	ВидДвижения - ВидДвиженияНакопления - Вид движения
//	КодОперации - ПеречислениеСсылка.КодыОпераций - Код операции
//	КоличествоУУ - Число - Количество выпуска
//	СтоимостьУУ - Число - Учетная стоимость по управленческому учету
//	СтруктураКлючиАналитики - Структура - Структура с таблицами ключей аналитики для кэширования данных
//	НаборЗаписейУчетЗатрат - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "УчетЗатрат".
//
Процедура РаспределитьСуммуВыпускаПоПроектам(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	МассивСтрок,
	АналитикаВидаУчета,
	АналитикаУчетаЗатрат,
	АналитикаУчетаПартий,
	АналитикаУчетаПродукции,
	КорАналитикаВидаУчета,
	КорАналитикаУчетаЗатрат,
	КорАналитикаУчетаПартий,
	КорАналитикаРаспределенияЗатрат,
	ВидДвижения,
	КодОперации,
	КоличествоУУ,
	СтоимостьУУ,
	СтруктураКлючиАналитики,
	НаборЗаписейУчетЗатрат
	)
	
	МассивКоэф = Новый Массив;
	
	ВсегоБазаРаспределения = 0;
	Для Каждого Строка Из МассивСтрок Цикл
		МассивКоэф.Добавить(Строка.ДоляРаспределения);
		ВсегоБазаРаспределения = ВсегоБазаРаспределения + Строка.ДоляРаспределения;
	КонецЦикла;
	
	Если ВсегоБазаРаспределения = 0 Тогда
		ВидРаспределения = МассивСтрок[0].ВидРаспределения;
		ОбщегоНазначения.Сообщение("Не удалось выполнить распределение затрат по виду распределения """ + ВидРаспределения + """", СтатусСообщения.Внимание);
	КонецЕсли;
		
	Если ВсегоБазаРаспределения <> 0 Тогда
			
		МассивКоличество = ОбщегоНазначения.РаспределитьПропорционально(КоличествоУУ, МассивКоэф, 2);
		МассивСтоимость = ОбщегоНазначения.РаспределитьПропорционально(СтоимостьУУ, МассивКоэф, 2);
		
		Индекс = 0;
		Для Каждого Строка Из МассивСтрок Цикл
			
			РасширеннаяАналитикаУчета.ПолучитьАналитикуОтраженияЗатрат(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				Строка.Проект,
				СтрокаВыборки.ХарактерЗатрат,
				Неопределено, // ХарактерЗатратНУ
				КодОперации,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
				СтруктураКлючиАналитики,
				?(ВидДвижения = ВидДвиженияНакопления.Приход, АналитикаВидаУчета, КорАналитикаВидаУчета),
				Неопределено, // КорАналитикаУчетаЗатрат,
				Неопределено, // КорАналитикаУчетаПартий,
				Неопределено, // КорАналитикаРаспределенияЗатрат,
				Неопределено, // УчетЗатратПоНоменклатуре,
				Неопределено // УчетЗатратПоПроектам
			);
			
			Количество = ?(МассивСтоимость = Неопределено, 0, МассивКоличество[Индекс]);
			Стоимость = ?(МассивСтоимость = Неопределено, 0, МассивСтоимость[Индекс]);
			
			РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
				СтруктураШапкиДокумента,
				АналитикаВидаУчета,
				АналитикаУчетаЗатрат,
				АналитикаУчетаПартий,
				АналитикаУчетаПродукции,
				КорАналитикаВидаУчета,
				КорАналитикаУчетаЗатрат,
				КорАналитикаУчетаПартий,
				КорАналитикаРаспределенияЗатрат,
				ВидДвижения,
				КодОперации,
				Количество,
				Стоимость,
				0, // КоличествоНУ,
				0, // СтоимостьНУ,
				0, // НДСВходящий,
				0, // НДСКредит,
				НаборЗаписейУчетЗатрат
			);
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	Иначе
		
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоРегиструУчетЗатрат(
			СтруктураШапкиДокумента,
			АналитикаВидаУчета,
			АналитикаУчетаЗатрат,
			АналитикаУчетаПартий,
			АналитикаУчетаПродукции,
			КорАналитикаВидаУчета,
			КорАналитикаУчетаЗатрат,
			КорАналитикаУчетаПартий,
			КорАналитикаРаспределенияЗатрат,
			ВидДвижения,
			КодОперации,
			КоличествоУУ,
			СтоимостьУУ,
			0, // КоличествоНУ,
			0, // СтоимостьНУ,
			0, // НДСВходящий,
			0, // НДСКредит,
			НаборЗаписейУчетЗатрат
		);
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьСуммуВыпускаПоПроектам()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ НАКОПЛЕНИЯ "МАТЕРИАЛЫ В ПРОИЗВОДСТВЕ"

// Формирует текст запроса по табличной части "Материалы" документа "Отчет производства за смену".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоМатериаламОтчетПроизводстваЗаСмену()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ТабличнаяЧасть.ПодразделениеНЗП = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка) 
	|		ИЛИ Не ТабличнаяЧасть.Ссылка.ИспользоватьПодразделенияНЗП
	|	ТОГДА
	|		ТабличнаяЧасть.Ссылка.Подразделение
	|	ИНАЧЕ
	|		ТабличнаяЧасть.ПодразделениеНЗП
	|	КОНЕЦ КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.Номенклатура КАК Затрата,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияЗатраты,
	|		
	|	//ТекстЗапросаЗаказУпр
	|
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество
	|		
	|//Поместить ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ	
	|	Документ.ОтчетПроизводстваЗаСмену.Материалы КАК ТабличнаяЧасть
	|	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Ссылка.ИспользоватьМатериалы
	|	И ТабличнаяЧасть.Номенклатура.ВестиОперативныйУчетОстатковНЗП
	|		
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказ();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями, 
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
	);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоМатериаламОтчетПроизводстваЗаСмену()

// Формирует текст запроса по табличной части "Материалы" документа "Поступление товаров из переработки".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоМатериаламПоступлениеТоваровИзПереработки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.Номенклатура КАК Затрата,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияЗатраты,
	|		
	|	//ТекстЗапросаЗаказУпр
	|
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество
	|		
	|//Поместить ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ	
	|	Документ.ПоступлениеТоваровИзПереработки.Материалы КАК ТабличнаяЧасть
	|	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Ссылка.ИспользоватьМатериалы
	|	И ТабличнаяЧасть.Номенклатура.ВестиОперативныйУчетОстатковНЗП
	|		
	|";
	
	ТекстЗапросаСКомментариями = СформироватьТекстЗапросаДляРеквизитаЗаказ();
	ТекстЗапросаДляРеквизитаЗаказ = ЗаменитьКомментарииВТекстеЗапросаПоОтражениюВыпуска(
		ТекстЗапросаСКомментариями, 
		Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
		);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаЗаказУпр", ТекстЗапросаДляРеквизитаЗаказ + " КАК Заказ,");
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоМатериаламПоступлениеТоваровИзПереработки()

// Формирует текст запроса по табличной части "Материалы" документа "Акт об оказании производственных услуг".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоМатериаламАктОбОказанииПроизводственныхУслуг()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.Номенклатура КАК Затрата,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияЗатраты,
	|		
	|	ВЫБОР КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|			И ТабличнаяЧасть.Ссылка.Сделка ССЫЛКА Документ.ЗаказПокупателя 
	|			И ТабличнаяЧасть.Ссылка.Сделка <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) ТОГДА
	|		ТабличнаяЧасть.Ссылка.Сделка
	|	КОГДА ТабличнаяЧасть.Ссылка.ИспользоватьЗаказы 
	|			И ТабличнаяЧасть.ЗаказВыпуска ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И ТабличнаяЧасть.ЗаказВыпуска <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|			И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		ТабличнаяЧасть.ЗаказВыпуска
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество
	|		
	|//Поместить ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ	
	|	Документ.АктОбОказанииПроизводственныхУслуг.Материалы КАК ТабличнаяЧасть
	|	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Ссылка.ИспользоватьМатериалы
	|	И ТабличнаяЧасть.Номенклатура.ВестиОперативныйУчетОстатковНЗП
	|		
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоМатериаламАктОбОказанииПроизводственныхУслуг()

// Формирует текст запроса по табличной части "Материалы" документа "Корректировка НЗП".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоМатериаламКорректировкаНЗП()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.Номенклатура КАК Затрата,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияЗатраты,
	|		
	|	ВЫБОР КОГДА ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|			И ТабличнаяЧасть.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) ТОГДА
	|		ТабличнаяЧасть.Заказ
	|	КОГДА ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И ТабличнаяЧасть.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|			И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		ТабличнаяЧасть.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество
	|		
	|//Поместить ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ	
	|	Документ.КорректировкаНЗП.Материалы КАК ТабличнаяЧасть
	|	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Номенклатура.ВестиОперативныйУчетОстатковНЗП
	|		
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоМатериаламКорректировкаНЗП()

// Формирует текст запроса по табличной части "Материалы" документа "Списание НЗП".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоМатериаламСписаниеНЗП()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.Номенклатура КАК Затрата,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияЗатраты,
	|		
	|	ВЫБОР КОГДА ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|			И ТабличнаяЧасть.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) ТОГДА
	|		ТабличнаяЧасть.Заказ
	|	КОГДА ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И ТабличнаяЧасть.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|			И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		ТабличнаяЧасть.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество
	|		
	|//Поместить ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ	
	|	Документ.СписаниеНЗП.Материалы КАК ТабличнаяЧасть
	|	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Номенклатура.ВестиОперативныйУчетОстатковНЗП
	|		
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоМатериаламСписаниеНЗП()

// Формирует текст запроса по табличной части "Материалы" документа "Оприходование материалов из производства".
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоМатериаламОприходованиеМатериаловИзПроизводства()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура.ВестиУчетПоСериямВНЗП КАК ВестиУчетПоСериямВНЗП,
	|	ТабличнаяЧасть.Номенклатура КАК Затрата,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК СерияЗатраты,
	|		
	|	ВЫБОР КОГДА ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказПокупателя 
	|			И ТабличнаяЧасть.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) ТОГДА
	|		ТабличнаяЧасть.Заказ
	|	КОГДА ТабличнаяЧасть.Заказ ССЫЛКА Документ.ЗаказНаПроизводство 
	|			И ТабличнаяЧасть.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|			И &УчетЗатратПоЗаказамНаПроизводство ТОГДА
	|		ТабличнаяЧасть.Заказ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК Заказ,
	|
	|	(Количество * 
	|	ВЫБОР КОГДА Не Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL 
	|				И Коэффициент <> 0 ТОГДА 
	|		Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ
	|	) КАК Количество
	|		
	|//Поместить ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ	
	|	Документ.ОприходованиеМатериаловИзПроизводства.Материалы КАК ТабличнаяЧасть
	|	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Номенклатура.ВестиОперативныйУчетОстатковНЗП
	|	И ТабличнаяЧасть.СтатьяЗатрат.ХарактерЗатрат = ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ПроизводственныеРасходы)
	|	И ТабличнаяЧасть.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы)
	|		
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоМатериаламОприходованиеМатериаловИзПроизводства()

// Функция формирует текст запроса по табличной части "Материалы".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ФормироватьВременнуюТаблицу - Булево - Признак формирования временной таблицы
//
// Возвращаемое значение:
//   Строка – Текст запроса.
//
Функция СформироватьТекстЗапросаПоМатериалам(
	СтруктураШапкиДокумента,
	ФормироватьВременнуюТаблицу = Ложь
	) Экспорт
	
	ТекстЗапросаПоМатериалам = "";
	ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);
	Если ТипДокумента = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		ТекстЗапросаПоМатериалам = СформироватьТекстЗапросаПоМатериаламОтчетПроизводстваЗаСмену();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки") Тогда
		ТекстЗапросаПоМатериалам = СформироватьТекстЗапросаПоМатериаламПоступлениеТоваровИзПереработки();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		ТекстЗапросаПоМатериалам = СформироватьТекстЗапросаПоМатериаламАктОбОказанииПроизводственныхУслуг();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаНЗП") Тогда
		ТекстЗапросаПоМатериалам = СформироватьТекстЗапросаПоМатериаламКорректировкаНЗП();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеНЗП") Тогда
		ТекстЗапросаПоМатериалам = СформироватьТекстЗапросаПоМатериаламСписаниеНЗП();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		ТекстЗапросаПоМатериалам = СформироватьТекстЗапросаПоМатериаламОприходованиеМатериаловИзПроизводства();
		
	КонецЕсли;
	
	Если ФормироватьВременнуюТаблицу Тогда
		ТекстЗапросаПоМатериалам = СтрЗаменить(ТекстЗапросаПоМатериалам, "//Поместить", "");
	Иначе
		ТекстЗапросаПоМатериалам = ТекстЗапросаПоМатериалам + "
		|УПОРЯДОЧИТЬ ПО
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.ХарактеристикаНоменклатуры,
		|	ТабличнаяЧасть.СерияНоменклатуры
		|";
	КонецЕсли;
	
	Возврат ТекстЗапросаПоМатериалам;
	
КонецФункции // СформироватьТекстЗапросаПоМатериалам()

// Функция формирует запрос по материалам.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ТекстЗапросаПоМатериалам - Строка - Текст запроса по табличной части документа
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//
// Возвращаемое значение:
//	Запрос - Запрос по материалам.
//
Функция СформироватьЗапросПоМатериалам(
	СтруктураШапкиДокумента,
	ТекстЗапросаПоМатериалам,
	УчетнаяПолитика
	)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоМатериалам;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("УчетЗатратПоЗаказамНаПроизводство", УчетнаяПолитика.УчетЗатратПоЗаказамНаПроизводство);
		
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоВыпускуПродукции()

// Процедура формирует движение по регистру "Материалы в производстве".
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	КодОперации - ПеречислениеСсылка.КодыОперацийМатериалыВПроизводстве - Код операции
//	НаборЗаписейМатериалыВПроизводстве - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Материалы в производстве".
//
Процедура СформироватьДвиженияРасходПоРегиструМатериалыВПроизводстве(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	КодОперации,
	НаборЗаписейМатериалыВПроизводстве
	)
	
	// В движениях по регистру "Материалы в производстве" должны быть заполнены измерения:
	//	- Подразделение,
	//	- Заказ,
	//	- Затрата,
	//	- ХарактеристикаЗатраты,
	//	- СерияЗатраты - заполняется, если ведется учет по сериям в незавершенном производстве
	
	НоваяСтрока = НаборЗаписейМатериалыВПроизводстве.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	
	Если СтрокаВыборки.ВестиУчетПоСериямВНЗП Тогда
		НоваяСтрока.СерияЗатраты = СтрокаВыборки.СерияЗатраты;
	Иначе
		НоваяСтрока.СерияЗатраты = Неопределено;
	КонецЕсли;
	
	НоваяСтрока.КодОперации = КодОперации;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейМатериалыВПроизводстве.Количество() = 1000 Тогда
		НаборЗаписейМатериалыВПроизводстве.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияРасходПоРегиструМатериалыВПроизводстве()

// Функция определяет код операции для регистра "Материалы в производстве".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//
// Возвращаемое значение:
//  ПеречислениеСсылка.КодыОперацийВыпускПродукции – код операции выпуска продукции
//
Функция ПолучитьКодОперацииМатериалыВПроизводстве(
	СтруктураШапкиДокумента
	)
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаНЗП") Тогда
		КодОперации = Перечисления.КодыОперацийМатериалыВПроизводстве.КорректировкаНЗП;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеНЗП") Тогда
		КодОперации = Перечисления.КодыОперацийМатериалыВПроизводстве.ОприходованиеНЗП;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.СписаниеНЗП") Тогда
		Если СтруктураШапкиДокумента.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Рассчитывается Тогда
			КодОперации = Перечисления.КодыОперацийМатериалыВПроизводстве.СписаниеНЗПРасч;
		Иначе
			КодОперации = Перечисления.КодыОперацийМатериалыВПроизводстве.СписаниеНЗПФикс;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") Тогда
		КодОперации = Перечисления.КодыОперацийМатериалыВПроизводстве.ВозвратИзПроизводства;
		
	Иначе
		КодОперации = Перечисления.КодыОперацийМатериалыВПроизводстве.СписаниеПоПрямымЗатратам;
		
	КонецЕсли;
	
	Возврат КодОперации;

КонецФункции // ПолучитьКодОперацииМатериалыВПроизводстве()

// Процедура формирует движения по материалам.
//
// Параметры
//  СтруктураШапкиДокумента – Структура – Реквизиты документа
//	РезультатЗапросаПоМатериалам - РезультатЗапроса - Результат запроса по материалам
//
Процедура СформироватьДвиженияПоМатериалам(
	СтруктураШапкиДокумента,
	РезультатЗапросаПоМатериалам
	)
	
	СтруктураНаборыЗаписей = Новый Структура;
	
	ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
		СтруктураШапкиДокумента, 
		"МатериалыВПроизводстве", 
		СтруктураНаборыЗаписей
	);
	Если Не ПолученНаборЗаписей Тогда
		Возврат;
	КонецЕсли;
	
	КодОперацииМатериалыВПроизводстве = ПолучитьКодОперацииМатериалыВПроизводстве(СтруктураШапкиДокумента);
	
	ВыборкаПоМатериалам = РезультатЗапросаПоМатериалам.Выбрать();
	Пока ВыборкаПоМатериалам.Следующий() Цикл
		
		СформироватьДвиженияРасходПоРегиструМатериалыВПроизводстве(
			СтруктураШапкиДокумента,
			ВыборкаПоМатериалам,
			КодОперацииМатериалыВПроизводстве,
			СтруктураНаборыЗаписей.МатериалыВПроизводстве
		);
		
	КонецЦикла;
	
	Если СтруктураНаборыЗаписей.МатериалыВПроизводстве.Модифицированность() Тогда
		СтруктураНаборыЗаписей.МатериалыВПроизводстве.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоМатериалам()

// Процедура формирует движения по регистру "Материалы в производстве".
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	УчетнаяПолитика - Структура - Учетная политика по управленческому учету
//
Процедура СформироватьДвиженияПоМатериаламВПроизводстве(
	СтруктураШапкиДокумента, 
	УчетнаяПолитика
	) Экспорт
	
	ТекстЗапросаПоМатериалам = СформироватьТекстЗапросаПоМатериалам(СтруктураШапкиДокумента);
		
	Если ПустаяСтрока(ТекстЗапросаПоМатериалам) Тогда
		ОбщегоНазначения.Сообщение("Не определено формирование движений по материалам в производстве для документа: " + СтруктураШапкиДокумента.Ссылка);
		Возврат;
	КонецЕсли;
	
	ЗапросПоМатериалам = СформироватьЗапросПоМатериалам(
		СтруктураШапкиДокумента,
		ТекстЗапросаПоМатериалам,
		УчетнаяПолитика
	);
	
	РезультатЗапросаПоМатериалам = ЗапросПоМатериалам.Выполнить();
		
	Если Не РезультатЗапросаПоМатериалам.Пустой() Тогда
		
		СформироватьДвиженияПоМатериалам(
			СтруктураШапкиДокумента,
			РезультатЗапросаПоМатериалам
		);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоМатериаламВПроизводстве()


// Функция определяет используется ли статус материальных затрат "Принятые в переработку"
//
// Параметры:
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки 
//
// Возвращаемое значение:
//	Булево, Истина если СтатусМатериальныхЗатрат = ПринятыеВПереработку
//
Функция ОпределитьСтатусМатериальныхЗатратВПереработку(СтрокаВыборки)
	Возврат ((СтрокаВыборки.Владелец().Колонки.Найти("СтатусМатериальныхЗатрат") <> Неопределено)
				И (СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку))	
			ИЛИ ((СтрокаВыборки.Владелец().Колонки.Найти("СтатьяЗатрат") <> Неопределено)
				И ЗначениеЗаполнено(СтрокаВыборки.СтатьяЗатрат)	
				И (СтрокаВыборки.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку));		
КонецФункции // ОпределитьСтатусМатериальныхЗатратВПереработку()	


