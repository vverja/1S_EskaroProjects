
// Процедура проверяет корректность информационной карты. Если тип карты некорректен, то он очищается,
// и выдается соответствующее сообщение.
//
// Параметры:
//  ИнформационнаяКарта - информационная карта, который нужно проверить.
//  ТипКарты - нужный тип карты.
//
Процедура ПроверитьКорректностьИнформационнойКарты(ИнформационнаяКарта, ТипКарты) Экспорт

	Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
		Если ИнформационнаяКарта.ТипКарты <> ТипКарты Тогда
			Сообщить("В данном контексте можно выбирать только дисконтные карты.");
			ИнформационнаяКарта = Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьКорректностьИнформационнойКарты()

// Процедура открывает форму выбора справочника "ИнформационныеКарты" с переданным отбором по типу информационной карты.
//
// Параметры:
//  ЭлементФормы - элемент формы, в котором инициирован выбор.
//  ТипКарты - нужный тип карты.
//  СтандартнаяОбработка - Флаг стандартной обработки выбора. Здесь сбрасывается.
//
Процедура НачалоВыбораИнформационнойКарты(ЭлементФормы, ТипКарты, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	ФормаВыбора = Справочники.ИнформационныеКарты.ПолучитьФормуВыбора(, ЭлементФормы);
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ЭлементФормы.ВыборГруппИЭлементов;
	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Установить(ТипКарты);
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ТипКарты.Доступность = Ложь;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ЭлементФормы.Значение;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораИнформационнойКарты()

// Процедура проверяет тип оплаты в строках переданной ТЧ.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа.
//  ИмяТабличнойЧасти - имя ТЧ документа.
//  ТаблицаЗначений - таблица значений или ТЧ, в которой нужно выполнить проверку.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибке проведения.
//  ТипОплаты - нужный тип оплаты.
//
Процедура ПроверитьКорректностьТипаОплатыВТЧ(ДокументОбъект, ИмяТабличнойЧасти,
             ТаблицаЗначений, Отказ, Заголовок, ТипОплаты) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	СтрокаОкончанияСообщенияОбОшибке = "Выбран вид оплаты неверного типа!";

	СтруктураСложныхКритериев = Новый Структура;
	СтруктураСложныхКритериев.Вставить("ТипОплаты", ВидСравнения.НеРавно);

	Выборка = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаЗначений, Новый Структура("ТипОплаты", ТипОплаты),
	   СтруктураСложныхКритериев).Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Выборка.НомерСтроки)
		   + """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаОкончанияСообщенияОбОшибке,
		                    Отказ, Заголовок);
	КонецЦикла;

КонецПроцедуры // ПроверитьКорректностьТипаОплатыВТЧ()

// Процедура проверяет корректность вида оплаты. Если вид оплаты некорректен, то он очищается,
// и выдается соответствующее сообщение.
//
// Параметры:
//  ВидОплаты - Вид оплаты, который нужно проверить.
//  ТипОплаты - Нужный тип оплаты.
//
Процедура ПроверитьКорректностьВидаОплаты(ВидОплаты, ТипОплаты) Экспорт

	Если ЗначениеЗаполнено(ВидОплаты) Тогда
		Если ВидОплаты.ТипОплаты <> ТипОплаты Тогда
			Сообщить("В данном контексте можно выбирать только вид оплаты с типом """ + ТипОплаты + """.");
			ВидОплаты = Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьКорректностьВидаОплаты()

// Процедура открывает форму выбора справочника "ВидыОплатЧекаККМ" с переданным отбором по типу оплаты.
//
// Параметры:
//  ЭлементФормы - элемент формы, в котором инициирован выбор.
//  ТипОплаты - нужный тип оплаты.
//  СтандартнаяОбработка - Флаг стандартной обработки выбора. Здесь сбрасывается.
//
Процедура НачалоВыбораВидаОплатыЧекаККМ(ЭлементФормы, ТипОплаты, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	ФормаВыбора = Справочники.ВидыОплатЧекаККМ.ПолучитьФормуВыбора(, ЭлементФормы);
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ЭлементФормы.ВыборГруппИЭлементов;
	ЭлементОтбора = ФормаВыбора.СправочникСписок.Отбор.ТипОплаты;
	Если ТипЗнч(ТипОплаты) = Тип("СписокЗначений") Тогда
		ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
		ЭлементОтбора.Значение = ТипОплаты;
		ЭлементОтбора.Использование = Истина;
	Иначе
		ЭлементОтбора.Установить(ТипОплаты);
	КонецЕсли;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ТипОплаты.Доступность = Ложь;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ЭлементФормы.Значение;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораВидаОплатыЧекаККМ()

// Функция возвращает в виде соответствия тарифы торговой уступки по договору эквайринга.
//
// Параметры:
//  ДоговорЭквайринга - нужный договор эквайринга.
//
// Возвращаемое значение:
//  Соответствие - соответствие тарифов торговой уступки.
//
Функция СформироватьСоответствиеТарифовЭквайринг(ДоговорЭквайринга) Экспорт

	СоответствиеТарифов = Новый Соответствие;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Тарифы.ВидОплаты КАК ВидОплаты,
	|	Тарифы.ПроцентТорговойУступки КАК ПроцентТорговойУступки
	|ИЗ
	|	Справочник.ДоговорыЭквайринга.ТарифыЗаРасчетноеОбслуживание КАК Тарифы
	|ГДЕ
	|	Тарифы.Ссылка = &ДоговорЭквайринга
	|");

	Запрос.УстановитьПараметр("ДоговорЭквайринга", ДоговорЭквайринга);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеТарифов.Вставить(Выборка.ВидОплаты, Выборка.ПроцентТорговойУступки);
	КонецЦикла;

	Возврат СоответствиеТарифов;

КонецФункции // СформироватьСоответствиеТарифовЭквайринг()

// Функция возвращает процент торговой уступки для переданных
// договора эквайринга и вида оплаты.
//
// Параметры:
//  ДоговорЭквайринга - договор эквайринга, по которому нужно получить % торговой уступки.
//  ВидОплаты - вид оплаты, для которого  нужно получить % торговой уступки.
//
// Возвращаемое значение:
//  Число. Процент торговой уступки. 0 - если не найден.
//
Функция ПолучитьПроцентТорговойУступки(ДоговорЭквайринга, ВидОплаты) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Тарифы.ПроцентТорговойУступки КАК ПроцентТорговойУступки
	|ИЗ
	|	Справочник.ДоговорыЭквайринга.ТарифыЗаРасчетноеОбслуживание КАК Тарифы
	|ГДЕ
	|	Тарифы.Ссылка = &ДоговорЭквайринга
	|	И Тарифы.ВидОплаты = &ВидОплаты
	|");
		
	Запрос.УстановитьПараметр("ДоговорЭквайринга", ДоговорЭквайринга);
	Запрос.УстановитьПараметр("ВидОплаты", ВидОплаты);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроцентТорговойУступки = Выборка.ПроцентТорговойУступки;
	Иначе
		ПроцентТорговойУступки = 0;
	КонецЕсли;

	Возврат ПроцентТорговойУступки;

КонецФункции // ПолучитьПроцентТорговойУступки()

// Получает продажную цену по переданным параметрам.
//
// Параметры:
//  ДатаЦен - дата, на которую нужно получить цену.
//  Номенклатура - номенклатура, для которой нужно получить цену.
//  ХарактеристикаНоменклатуры - характеристика номенклатуры, для которой нужно получить цену.
//  Склад - склад, на котором нужно получить цену.
//
// Возвращаемое значение:
//  Число - найденная цена. Если цена не найдена - возвращается 0.
//
Функция ПолучитьПродажнуюЦену(ДатаЦен, Номенклатура, ХарактеристикаНоменклатуры, Склад,
                              УсловиеПродаж = Неопределено) Экспорт

	ПродажнаяЦена = 0;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Ценообразование.ПолучитьАктуальнуюДатуРасчетаЦен(ДатаЦен));
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристики", Ценообразование.ПолучитьМассивХарактеристик(ХарактеристикаНоменклатуры));
	Запрос.УстановитьПараметр("Склад", Склад);

	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныПродажные.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныАТТ.СрезПоследних(&Дата, Склад = &Склад
	|	   И Номенклатура = &Номенклатура
	|	   И ХарактеристикаНоменклатуры В (&Характеристики)) КАК ЦеныПродажные
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныПродажные.ХарактеристикаНоменклатуры УБЫВ
	|";

	Запрос.Текст = ТекстЗапроса;

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПродажнаяЦена = Выборка.Цена;

		Ценообразование.ИзменитьЦенуПоУсловиюПродаж(ДатаЦен, Номенклатура, УсловиеПродаж, ПродажнаяЦена);
	КонецЕсли;

	Возврат ПродажнаяЦена;

КонецФункции // ПолучитьПродажнуюЦену()

// Процедура проверяет в строках с видом склада "Розничный" заполнено ли поле "СуммаПродажная".
//
// Параметры:
//  ДокументОбъект - объект проводимого документа.
//  ИмяТабличнойЧасти - имя ТЧ документа.
//  ТаблицаЗначений - таблица значений или ТЧ, в которой нужно выполнить проверку.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибке проведения.
//  ИмяКолонкиВидСклада - название колонки, содержащей вид склада.
//
Процедура ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ДокументОбъект, ИмяТабличнойЧасти,
             ТаблицаЗначений, Отказ, Заголовок, ИмяКолонкиВидСклада = Неопределено) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	СтруктураКритериев = Новый Структура;
	СтруктураКритериев.Вставить("СуммаПродажная", 0);

	Если ИмяКолонкиВидСклада <> Неопределено Тогда
		СтруктураКритериев.Вставить(ИмяКолонкиВидСклада, Перечисления.ВидыСкладов.Розничный);
	КонецЕсли;

	СтрокаОкончанияСообщенияОбОшибке = "Не задана цена АТТ." + Символы.ПС + "Необходимо выполнить переоценку!";

	НайденныеСтроки = ТаблицаЗначений.НайтиСтроки(СтруктураКритериев);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(НайденнаяСтрока.НомерСтроки)
		   + """ табличной части """ + ПредставлениеТабличнойЧасти + """ для номенклатуры """
		   + СокрЛП(НайденнаяСтрока.Номенклатура) + """ на складе """ + СокрЛП(НайденнаяСтрока.Склад) + """: ";

		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаОкончанияСообщенияОбОшибке,
		                    Отказ, Заголовок);
	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная()

// Процедура заполняет в переданной ТЧ колонку "СуммаПродажная".
//
// Параметры:
//  ТаблицаТоваров - таблица значений или ТЧ, в которой нужно колонку "СуммаПродажная" заполнить.
//  ТаблицаПоЦенам - таблица значений, содержащая продажные цены.
//  ИмяКолонкиВидСклада - название колонки, содержащей вид склада.
//
Процедура ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, ИмяКолонкиВидСклада = Неопределено, ИмяКолонкиКоличество = "Количество") Экспорт

	ЕстьХарактеристика = (ТаблицаТоваров.Колонки.Найти("ХарактеристикаНоменклатуры") <> Неопределено);

	Если ЕстьХарактеристика Тогда
		СтрокаИндексов = "Номенклатура, Склад, ХарактеристикаНоменклатуры";
	Иначе
		СтрокаИндексов = "Номенклатура, Склад";
	КонецЕсли;

	ТаблицаПоЦенам.Индексы.Добавить(СтрокаИндексов);

	СтруктураПоискаЦены = Новый Структура;
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ВидСкладаРозничный = Перечисления.ВидыСкладов.Розничный;

	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если ИмяКолонкиВидСклада = Неопределено
		 Или СтрокаТаблицы[ИмяКолонкиВидСклада] = ВидСкладаРозничный Тогда
			СтруктураПоискаЦены.Вставить("Склад", СтрокаТаблицы.Склад);
			СтруктураПоискаЦены.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);

			Если ЕстьХарактеристика Тогда
				СтруктураПоискаЦены.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);

				СтрокаЦен = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТаблицаПоЦенам, СтруктураПоискаЦены);
				Если СтрокаЦен = Неопределено Тогда
					Если СтрокаТаблицы.ХарактеристикаНоменклатуры <> ПустаяХарактеристика Тогда
						СтруктураПоискаЦены.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристика);

						СтрокаЦен = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТаблицаПоЦенам, СтруктураПоискаЦены);
						Если СтрокаЦен <> Неопределено Тогда
							СтрокаТаблицы.СуммаПродажная = СтрокаЦен.Цена * СтрокаТаблицы[ИмяКолонкиКоличество];
						КонецЕсли;
					КонецЕсли;
				Иначе
					СтрокаТаблицы.СуммаПродажная = СтрокаЦен.Цена * СтрокаТаблицы[ИмяКолонкиКоличество];
				КонецЕсли;
			Иначе
				СтрокаЦен = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТаблицаПоЦенам, СтруктураПоискаЦены);
				Если СтрокаЦен <> Неопределено Тогда
					СтрокаТаблицы.СуммаПродажная = СтрокаЦен.Цена * СтрокаТаблицы[ИмяКолонкиКоличество];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьКолонкуСуммаПродажная()

// Определяет наличие розничного склада в переданной ТЧ.
//
// Параметры:
//  ТаблицаТоваров - таблица значений или ТЧ.
//  ИмяКолонкиСклад - название колонки, содержащей склад.
//  ИмяКолонкиВидСклада - название колонки, содержащей вид склада.
//
// Возвращаемое значение:
//  Булево - Истина, если в переданной ТЧ есть розничный склад.
//
Функция ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, ИмяКолонкиСклад, ИмяКолонкиВидСклада) Экспорт

	Если ТаблицаТоваров.Колонки.Найти(ИмяКолонкиСклад) = Неопределено
	 Или ТаблицаТоваров.Колонки.Найти(ИмяКолонкиВидСклада) = Неопределено Тогда
		ЕстьРозничныйСклад = Ложь;
	Иначе
		ЕстьРозничныйСклад = (ТаблицаТоваров.Найти(Перечисления.ВидыСкладов.Розничный, ИмяКолонкиВидСклада) <> Неопределено);
	КонецЕсли;

	Возврат ЕстьРозничныйСклад;

КонецФункции // ОпределитьНаличиеРозничногоСклада()

// Выполняет запрос по продажным ценам по переданным параметрам.
//
// Параметры:
//  ДатаЦен - дата, на которую нужно получить цены.
//  СписокСкладов - список складов, по которым нужно получить цены.
//  СписокНоменклатуры - список номенклатуры, для которой нужно получить цены.
//
// Возвращаемое значение:
//  РезультатЗапроса - результат выполненого запроса по продажным ценам.
//
Функция СформироватьЗапросПоПродажнымЦенам(ДатаЦен, СписокСкладов, СписокНоменклатуры) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ДатаЦен);
	Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЦеныПродажные.Склад КАК Склад,
	|	ЦеныПродажные.Номенклатура КАК Номенклатура,
	|	ЦеныПродажные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЦеныПродажные.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныАТТ.СрезПоследних(&Дата, Склад В (&СписокСкладов)
	|	   И Номенклатура В (&СписокНоменклатуры)) КАК ЦеныПродажные
	|";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоПродажнымЦенам()

// Рассчитывает величину розничной цены по цене поставки и проценту розничной наценки.
// Розничная цена всегда в гривнях и со всеми налогами. 
// Получается из цены поставки, увеличенной на процент розничной наценки, 
// пересчитанной в гривни, увеличенной при необходимости на величину налогов, 
// округленной по параметрам округления розничного типа цен.
//
// Параметры: 
//  ЦенаПоставки                   - число, цена поставки, по которой надо рассчитать розничную цену;
//  ВалютаПоставки                 - ссылка на справочник, определяет валюту цены поставки,
//                                   из которой надо рассчитать розничную цену;
//  КурсПоставки                   - число, курс валюты, в которой задана цена поставки;
//  КратностьПоставки              - число, кратность валюты, в которой задана цена поставки;
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ПроцентРозничнойНаценки        - число, процент розничной наценки на цену поставки;
//  ЦенаПоставкиВключаетНДС        - булево, признак того, что в цену поставки включен НДС;
//  СтавкаНДС                      - число, определяет ставку НДС в цене поставки;
//  ТипЦенРозничнойТорговли        - ссылка на справочник, определяет тип розничной цены.
//  ЕдиницаЦены                    - ссылка на элемент справочника "Единицы измерения",
//                                   определяет для какой единицы указана цена,
//  ЕдиницаХранения                - ссылка на элемент справочника "Единицы измерения",
//                                   определяет единицу хранения номенклатуры,
// 
// Возвращаемое значение:
//  Рассчитанное значение розничной цены.
//
Функция РассчитатьРозничнуюЦену(ЦенаПоставки, ВалютаПоставки, КурсПоставки,КратностьПоставки,
	                            ВалютаРегламентированногоУчета, ПроцентРозничнойНаценки,
	                            ЦенаПоставкиВключаетНДС, СтавкаНДС,
	                            ТипЦенРозничнойТорговли, ЕдиницаЦены, ЕдиницаХранения) Экспорт

	// Увеличиваем на процент розничной наценки.
	РозничнаяЦена = ЦенаПоставки * (100 + ПроцентРозничнойНаценки) / 100;

	// Пересчитаем цену из единицы цены в единицу хранения остатков.
	РозничнаяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииЕдиницы(РозничнаяЦена, ЕдиницаЦены, ЕдиницаХранения);

	// Пересчитываем в гривни.
	РозничнаяЦена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(РозничнаяЦена, ВалютаПоставки,
	                                           ВалютаРегламентированногоУчета, КурсПоставки, 1, КратностьПоставки);

	// Увеличиваем при необходимости на величину налогов (розничная цена всегда с налогами)
	РозничнаяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(РозничнаяЦена,
	                Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
	                ЦенаПоставкиВключаетНДС, Истина, Истина, СтавкаНДС);

	// Округляем по параметрам округления розничного типа цен.
	Если НЕ ЗначениеЗаполнено(ТипЦенРозничнойТорговли) Тогда
		ПорядокОкругления        = Перечисления.ПорядкиОкругления.Окр0_01;
		ОкруглятьВБольшуюСторону = Ложь;
	Иначе
		ПорядокОкругления        = ТипЦенРозничнойТорговли.ПорядокОкругления;
		ОкруглятьВБольшуюСторону = ТипЦенРозничнойТорговли.ОкруглятьВБольшуюСторону
	КонецЕсли;
	РозничнаяЦена = Ценообразование.ОкруглитьЦену(РозничнаяЦена, ПорядокОкругления, ОкруглятьВБольшуюСторону);

	Возврат РозничнаяЦена;

КонецФункции // РассчитатьРозничнуюЦену()

// Позволяет получить остатки и цены Товаров в рознице
//
// Параметры: 
//  Номенклатура               - ссылка на элемент справочника "Номенклатура", для которого надо получить цены и остаток,
//  ХарактеристикаНоменклатуры - ссылка на элемент справочника "ХарактеристикиНоменклатуры", для которого надо получить цены и остаток,
//  Склад                      - ссылка на элемент справочника "СкладыКомпании", для которого надо получить цены и остаток,
//  Дата                       - дата, на которую надо получить цены и остаток.
//
// Возвращаемое значение:
//  Таблица значений, содержащая найденные цены и остатки.
//
Функция ПолучитьОстаткиИЦеныВРознице(Номенклатура, ХарактеристикаНоменклатуры, Склад = Неопределено,
	                                 Дата = Неопределено)

	// В качестве оперативных остатков берем текущие.
	ДатаОстатков = Дата;
	Если Дата <> Неопределено Тогда
		ДатаОстатков = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата)
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"                      , ДатаОстатков);
	Запрос.УстановитьПараметр("Номенклатура"              , Номенклатура);
	Запрос.УстановитьПараметр("Склад"                     , Склад);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ?(ХарактеристикаНоменклатуры = Неопределено,
	                          Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ХарактеристикаНоменклатуры));

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОстаткиТоваровКомпанииОстатки.КоличествоОстаток,
	|	ОстаткиТоваровКомпанииОстатки.ЦенаВРознице
	|ИЗ
	|	РегистрНакопления.ТоварыВНТТ.Остатки(&Дата, Номенклатура = &Номенклатура "
	+ ?(НЕ ЗначениеЗаполнено(Склад),"", "И Склад = &Склад") + "
	|	И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|	И (ЦенаВРознице > 0)) КАК ОстаткиТоваровКомпанииОстатки";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьОстаткиИЦеныВРознице()

// Формирует список розничных цен для заданных позиций номенклатуры и характеристики на выбранном складе
// на заданную дату.
//
// Параметры:
//  Номенклатура               - ссылка на справочник, позиция номенклатуры, 
//                               для которой надо получить розничну цену;
//  Единица                    - ссылка на справочник, единица измерения в которую надо 
//                               пересчитать цену и количество остатка;
//  ХарактеристикаНоменклатуры - ссылка на справочник, характеристика номенклатуры, 
//                               для которой надо получить розничну цену;
//  СкладКомпании              - ссылка на справочник, розничный склад компании на котором надо получить
//                               розничную цену и остаток;
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  Дата                       - дата, на которую нужна цена в рознице;
//  Валюта                     - валюта, в которую необходимо пересчитать цены;
//  Курс                       - курс валюты для пересчета цен;
//  Кратность                  - кратность валюты для пересчета цен.
//
// Возвращаемое значение:
// Число, выбраное значение розничной цены.
//
Функция СформироватьСписокРозничныхЦен(Номенклатура, Единица, ХарактеристикаНоменклатуры, СкладКомпании,
                                       ВалютаРегламентированногоУчета, Дата = Неопределено,
                                       Валюта = Неопределено, Курс = Неопределено, Кратность = Неопределено,
                                       УчитыватьНДС = Ложь, СуммаВключаетНДС = Ложь, СтавкаНДС = 0) Экспорт

	СписокЦен = Новый СписокЗначений;
	ТаблицаРозничныхЦен = ПолучитьОстаткиИЦеныВРознице(Номенклатура, ХарактеристикаНоменклатуры,
	                                                   СкладКомпании, Дата);

	Для Каждого СтрокаТаблицы Из ТаблицаРозничныхЦен Цикл
		Цена = Ценообразование.ПересчитатьЦенуПриИзмененииЕдиницы(СтрокаТаблицы.ЦенаВРознице,
		                                          Номенклатура.ЕдиницаХраненияОстатков, Единица);

		// Надо как-то предупредить о нулевом коэффициенте.
		Если Единица.Коэффициент = 0 Тогда
			СтрокаОстатка = "Нулевой коэффициент единицы";
		Иначе
			СтрокаОстатка = СокрЛП(СтрокаТаблицы.КоличествоОстаток * Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / Единица.Коэффициент);
		КонецЕсли;

		Если Валюта <> Неопределено И Валюта <> ВалютаРегламентированногоУчета Тогда
			Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена, ВалютаРегламентированногоУчета, Валюта, 1, Курс, 1, Кратность);
		КонецЕсли;

		Если УчитыватьНДС = Истина Тогда
			СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, СпособЗаполненияЦен, Истина,
			       УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС);
		КонецЕсли;

		СписокЦен.Добавить(Цена, ОбщегоНазначения.ФорматСумм(Цена) + " (" + СтрокаОстатка + " " + СокрЛП(Единица) + ")");
	КонецЦикла;

	Возврат СписокЦен;

КонецФункции // СформироватьСписокРозничныхЦен()

// Функция возвращает розничную цену для требуемой номенклатуры,
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//  Номенклатура                   - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ХарактеристикаНоменклатуры     - ссылка на элемент справочника "ХарактеристикиНоменклатуры", для которого надо получить цену,
//  Склад                          - ссылка на элемент справочника "Склады компании", определяет склад
//                                   для которого надо получить цену,
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  Дата                           - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения               - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить 
//                                   цену, если не заполнен, то заполняется единицей цены
//  Валюта                         - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                                   если заполнен, то заполняется валютой цены
//  Курс                           - число, курс требуемой валюты, если не заполнен, берется курс из регистра 
//                                   сведений "Курсы валют".
//  Кратность                      - число, кратность требуемой валюты, если не заполнена, берется курс из регистра 
//                                   сведений "Курсы валют".
//
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьРозничнуюЦену(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, Склад, ВалютаРегламентированногоУчета,
                              Дата = Неопределено, ЕдиницаИзмерения = Неопределено,
                              Валюта = Неопределено, Курс = 0, Кратность = 1) Экспорт

	// Если дата не заполнена, возьмем рабочую дату.
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда

		// Для услуг в качестве розничной цены используется цена компании по заданному в настройках типу цен.
		Если Номенклатура.Услуга Тогда
			ПолученнаяЦена = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, , Склад.ТипЦенРозничнойТорговли, Дата, ЕдиницаИзмерения, Валюта, Курс, Кратность);
			ЕдиницаЦены    = ЕдиницаИзмерения;
			ВалютаЦены     = Валюта;
		Иначе // для товаров розничная цена достается из регистра "ТоварыВНТТ" по значению измерения "ЦенаВРознице".
			ТаблицаРозничныхЦен = ПолучитьОстаткиИЦеныВРознице(Номенклатура, ХарактеристикаНоменклатуры,
			                                                   Склад, Дата);
			Если ТаблицаРозничныхЦен.Количество() = 0 Тогда // нет розничных цен
				ПолученнаяЦена = 0;
			Иначе
				ПолученнаяЦена = ТаблицаРозничныхЦен[0].ЦенаВРознице; // берем первую розничную цену
			КонецЕсли;

			ЕдиницаЦены = Номенклатура.ЕдиницаХраненияОстатков; // розничные цены задаются в базовых единицах
			ВалютаЦены  = ВалютаРегламентированногоУчета; // розничные цены задаются в валюте регл. учета
		КонецЕсли;
	Иначе
		ПолученнаяЦена = ПолучитьПродажнуюЦену(Дата, Номенклатура, ХарактеристикаНоменклатуры, Склад);

		ЕдиницаЦены = Номенклатура.ЕдиницаХраненияОстатков; // розничные цены задаются в базовых единицах
		ВалютаЦены  = ВалютаРегламентированногоУчета; // розничные цены задаются в валюте регл. учета
	КонецЕсли;

	ПолученнаяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииЕдиницы(ПолученнаяЦена, ЕдиницаЦены, ЕдиницаИзмерения);
	ПолученнаяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, ВалютаЦены, Валюта, Курс, Кратность, Дата);

	Возврат ПолученнаяЦена;

КонецФункции // ПолучитьРозничнуюЦену()

// Определяет есть ли в данном документе склад - НТТ,
// для которого надо указывать цену в рознице.
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа.
//
// Возвращаемое значение:
//  Ссылка на розничный склад, если нет розничного склада, то Неопределено.
//
Функция ЕстьНТТВДокументе(ДокументОбъект) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если МетаданныеДокумента.Реквизиты.Найти("СкладПолучатель") <> Неопределено Тогда
		Склад = ДокументОбъект.СкладПолучатель;
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("Склад") <> Неопределено Тогда
		Склад = ДокументОбъект.Склад;
	Иначе
		Возврат Неопределено; // нет склада, будем считать, что не розничный
	КонецЕсли;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		Возврат Склад;
	Иначе
		Возврат Неопределено; // нет розничного склада
	КонецЕсли;

КонецФункции // ЕстьНТТВДокументе()

// Функция по префиксу пердприятия и номеру товара предприятия возвращает штрихкод EAN-13 без контрольного символа
// номер предприятия - строка
// номер товара - Строка
// СтрокаНомераТовара - преобразованный к строке номер товара предприятия с дополняющими нулями
Функция ПолучитьШтрихКодПоПредприятияюИНомеруТовара(Знач НомерПредприятия, Знач НомерТовара, СтрокаНомераТовара) Экспорт
	
	СтрокаНомераТовара = СтрЗаменить(Строка(НомерТовара), Символы.НПП, "");
	КоличествоДополняющихНулей = 12 - СтрДлина(НомерПредприятия) - СтрДлина(СтрокаНомераТовара);
	Для Сч = 1 По КоличествоДополняющихНулей Цикл
		СтрокаНомераТовара = "0" + СтрокаНомераТовара;	
	КонецЦикла;
	
	Возврат  НомерПредприятия + СтрокаНомераТовара;
	
КонецФункции

// Функция определяет доступное значение кода для заданного регистра сведений
//
// Параметры
//  ИмяРегистра – <Строка> 
//              – имя регистра сведений, для которого определяется
//                доступное значение кода
//
// Возвращаемое значение:
//   <Число>    – значение, которое может быть использовано для новой
//                записи регистра сведений в качестве кода
//
Функция ПолучитьНовыйКодДляРегистраСведений(ИмяРегистра) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Регистр.Код), 0) КАК Код
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК Регистр");

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.Код + 1;

КонецФункции // ПолучитьНовыйКодДляРегистраСведений()

// Функция возвращает штрихкод для требуемой номенклатуры, 
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//  ТипШтрихкода                   - ссылка на элемент плана видов характеристик "ТипыШтрихкодов",
//  Владелец                       - ссылка на элемент справочника "Номенклатура",
//  ЕдиницаИзмерения               - ссылка на элемент справочника "Единицы измерения", определяет
//                                   для какой единицы надо получить штрихкод,
//  ХарактеристикаНоменклатуры     - ссылка на элемент справочника "Характеристики номенклатуры", определяет
//                                   для какой характеристики надо получить штрихкод,
//  СерияНоменклатуры              - ссылка на элемент справочника "Характеристики номенклатуры", определяет
//                                   для какой характеристики надо получить штрихкод,
//  КачествоНоменклатуры           - ссылка на элемент справочника "Характеристики номенклатуры", определяет
//                                   для какой характеристики надо получить штрихкод.
//
// Возвращаемое значение:
//  Строка таблицы значений - результата запроса.
//
Функция ПолучитьШтрихКод(Владелец, ЕдиницаИзмерения = Неопределено, ХарактеристикаНоменклатуры = Неопределено,
	                     СерияНоменклатуры = Неопределено, Качество = Неопределено) Экспорт

	Если ЕдиницаИзмерения = Неопределено Тогда
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;

	Если ХарактеристикаНоменклатуры = Неопределено Тогда
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;

	Если СерияНоменклатуры = Неопределено Тогда
		СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
	КонецЕсли;

	Если Качество = Неопределено Тогда
		Качество = Справочники.Качество.ПустаяСсылка();
	КонецЕсли;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегШтрихкоды.ТипШтрихкода,
	|	РегШтрихкоды.Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК РегШтрихкоды
	|ГДЕ
	|	РегШтрихкоды.Владелец = &Владелец
	|	И РегШтрихкоды.ЕдиницаИзмерения = &ЕдиницаИзмерения
	|	И РегШтрихкоды.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|	И РегШтрихкоды.СерияНоменклатуры = &СерияНоменклатуры
	|	И РегШтрихкоды.Качество = &Качество
	|");

	Запрос.УстановитьПараметр("Владелец"                  , Владелец);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения"          , ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("СерияНоменклатуры"         , СерияНоменклатуры);
	Запрос.УстановитьПараметр("Качество"                  , Качество);

	Выборка = Запрос.Выполнить().Выгрузить();

	Если Выборка.Количество() > 0 Тогда
		ПолученныйШтрихкод = Выборка[0];
	Иначе
		ПолученныйШтрихкод = Неопределено;
	КонецЕсли;

	Возврат ПолученныйШтрихкод;

КонецФункции // ПолучитьШтрихКод()

// Функция по международному сокращению возвращает является ли эта единица измерения весовой или нет
Функция ПолучитьПоМеждународномуСокращениюЭтоВесоваяЕдиница(Знач МеждународноеСокращение) Экспорт
	
	Если ПустаяСтрока(МеждународноеСокращение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Макет = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
	ОбластьВесоваяЕдиница			= Макет.Области.ВесоваяЕдиница;
	ОбластьМеждународноеСокращение	= Макет.Области.МеждународноеСокращение;

	// пробегаем по всему адресному классификатору и заполняем международное сокращение
	Для Сч = 2 По Макет.ВысотаТаблицы Цикл
		
		ТекущееСокращение = Макет.Область(Сч, ОбластьМеждународноеСокращение.Лево, Сч, ОбластьМеждународноеСокращение.Право).Текст;
		
		Если ТекущееСокращение = МеждународноеСокращение Тогда
			// нашли нужное сокращение
			ЗначениеВесовогоТовара = Макет.Область(Сч, ОбластьВесоваяЕдиница.Лево, Сч, ОбластьВесоваяЕдиница.Право).Текст;
			
			Если (ЗначениеВесовогоТовара = "+") Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	// так и не нашли нужное нам сокращение
	Возврат Ложь;

КонецФункции

// процедура добавляет в классификатор единиц измерения
// элемент с определенным международным сокращением
Функция СоздатьНовыйЭлементКлассификаторЕдиницИзмерения(Знач МеждународноеСокращение)
	
	Макет = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
	ОбластьКодЧисловой         = Макет.Области.КодЧисловой;
	ОбластьНаименованиеПолное  = Макет.Области.НаименованиеПолное;
	ОбластьНаименованиеКраткое = Макет.Области.НаименованиеКраткое;
	ОбластьМеждународноеСокращение = Макет.Области.МеждународноеСокращение;

	// пробегаем по всему адресному классификатору и заполняем международное сокращение
	Для Сч = 2 По Макет.ВысотаТаблицы Цикл
		
		ТекущееСокращение = Макет.Область(Сч, ОбластьМеждународноеСокращение.Лево, Сч, ОбластьМеждународноеСокращение.Право).Текст;
		
		Если ТекущееСокращение = МеждународноеСокращение Тогда 
			
			КодЧисловой = Макет.Область(Сч, ОбластьКодЧисловой.Лево, Сч, ОбластьКодЧисловой.Право).Текст;
			НаименованиеКраткое = Макет.Область(Сч, ОбластьНаименованиеКраткое.Лево, Сч, ОбластьНаименованиеКраткое.Право).Текст;
			НаименованиеПолное = Макет.Область(Сч, ОбластьНаименованиеПолное.Лево, Сч, ОбластьНаименованиеПолное.Право).Текст;			
			Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(КодЧисловой);
			
			// запоминаем будем мы создавать элемент или  менять текущий
			НужноСоздавать = Ссылка.Пустая(); 
			Если НужноСоздавать Тогда
				Объект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
				Объект.Код = КодЧисловой;
				Объект.Наименование = НаименованиеКраткое;
				Объект.НаименованиеПолное = НаименованиеПолное;
			Иначе
				Объект = Ссылка.ПолучитьОбъект();
			КонецЕсли;

			Объект.МеждународноеСокращение = МеждународноеСокращение;
			Объект.Записать();
			
			Если НужноСоздавать Тогда
				Сообщить("Создан новый классификатор единиц измерения: " + Строка(Объект.Ссылка));
			Иначе
				Сообщить("Изменено международное сокращение у классификатора единиц измерения: " + Строка(Объект.Ссылка));
			КонецЕсли;
			
			Возврат Объект.Ссылка;
		
		КонецЕсли;
	    		
	КонецЦикла;
	
	Возврат Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	
КонецФункции

// функция находит классификатор единиц измерения по мехдународному сокращению
// в случае его отсутствия создает новый элемент
Функция НайтиИлиСоздатьКлассификаторЕдиницИзмеренияПоМеждународномуСокращению(Знач МеждународноеСокращение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(МеждународноеСокращение) Тогда
		Возврат Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоРеквизиту("МеждународноеСокращение", МеждународноеСокращение);
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаПоКлассификатору) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не найден классификатор единиц измерения с международным сокращением: " + МеждународноеСокращение);
		ЕдиницаПоКлассификатору = СоздатьНовыйЭлементКлассификаторЕдиницИзмерения(МеждународноеСокращение);
	КонецЕсли;
	
	Возврат ЕдиницаПоКлассификатору;
	
КонецФункции


#Если Клиент Тогда
// Процедура выполняет печать этикеток из переданного доумента.
//
// Параметры:
//  Док - ссылка на документ, из которго нужно напечатать этикетки.
//  ИмяКолонкиЦена - имя колонки, в которой содержится цена.
//
Процедура НапечататьЭтикеткиИзДокумента(Док, ИмяКолонкиЦена = Неопределено) Экспорт

	МетаданныеДокумента = Док.Метаданные();

	ИмяДокумента = МетаданныеДокумента.Имя;

	ЕстьЦена             = (ИмяКолонкиЦена <> Неопределено);
	ЕстьХарактеристика   = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, "Товары");
	ЕстьСерия            = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеДокумента, "Товары");
	ЕстьКачество         = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, "Товары");
	ЕстьЕдиницаИзмерения = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, "Товары");

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Количество КАК Количество,
	|	Док.Характеристика КАК Характеристика,
	|	Док.Серия КАК Серия,
	|	Док.Качество КАК Качество,
	|	Док.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Док.Цена КАК Цена,
	|	" + ?(ЕстьЦена, "&Валюта", "ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)") + " КАК Валюта,
	|	РегШК.ТипШтрихкода КАК ТипШтрихкода,
	|	РегШК.Штрихкод КАК Штрихкод
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Номенклатура КАК Номенклатура,
	|		Док.Количество КАК Количество,
	|		" + ?(ЕстьХарактеристика, "Док.ХарактеристикаНоменклатуры", "ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)") + " КАК Характеристика,
	|		" + ?(ЕстьСерия, "Док.СерияНоменклатуры", "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)") + " КАК Серия,
	|		" + ?(ЕстьКачество, "Док.Качество", "ЗНАЧЕНИЕ(Справочник.Качество.Новый)") + " КАК Качество,
	|		" + ?(ЕстьЕдиницаИзмерения, "Док.ЕдиницаИзмерения", "Док.Номенклатура.ЕдиницаХраненияОстатков") + " КАК ЕдиницаИзмерения,
	|		" + ?(ЕстьЦена, "Док." + ИмяКолонкиЦена, "0") + " КАК Цена
	|	ИЗ
	|		Документ." + ИмяДокумента + ".Товары КАК Док
	|	ГДЕ
	|		Док.Ссылка = &Док
	|	) КАК Док
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.Штрихкоды КАК РегШК
	|ПО
	|	РегШК.Владелец = Док.Номенклатура
	|	И РегШК.ЕдиницаИзмерения = Док.ЕдиницаИзмерения
	|	И РегШК.ХарактеристикаНоменклатуры = Док.Характеристика
	|	И РегШК.СерияНоменклатуры = Док.Серия
	|	И РегШК.Качество = Док.Качество
	|");

	Запрос.УстановитьПараметр("Док", Док);

	Если ЕстьЦена Тогда
		Запрос.УстановитьПараметр("Валюта", глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	КонецЕсли;

	ПечатьЭтикеток(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // НапечататьЭтикеткиИзДокумента()

// Печать этикеток со штрихкодом
//
Процедура ПечатьЭтикеток(Товары = Неопределено) Экспорт

	Попытка
		КомпонентШК = Новый COMОбъект("V8.Barcod.1");
	Исключение
		Сообщить("Компонента 1С:Печать штрихкодов не установлена на данном компьютере!", СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;

	ФормаОбработкиЭтикеток = Обработки.ПечатьЭтикеток.Создать().ПолучитьФорму();
	Если ТипЗнч(Товары) = Тип ("ТаблицаЗначений") Тогда
		ФормаОбработкиЭтикеток.мВнешняяТаблицаТоваров = Товары;
	ИначеЕсли ТипЗнч(Товары) = Тип ("СправочникСсылка.Номенклатура") Тогда
		ФормаОбработкиЭтикеток.мВнешнийЭлементНоменклатуры = Товары;
	КонецЕсли;

	ФормаОбработкиЭтикеток.Открыть();

КонецПроцедуры // ПечатьЭтикеток()

// Проверяет необходимость открытия формы "РегистрацияПродаж" документа "ЧекККМ.
//
Процедура ЗапускИнтерфейсаКассира(ТекущийПользователь, ВключенИнтерфейсКассира, СерверТО) Экспорт
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

	Если ПользовательИБ <> Неопределено
	   И ПользовательИБ.ОсновнойИнтерфейс <> Неопределено
	   И ПользовательИБ.ОсновнойИнтерфейс.Имя = "ИнтерфейсКассира" Тогда //Задействуем интерфейс кассира

		ВключенИнтерфейсКассира = Истина;
		Администратор = Ложь;
		Кассир = Ложь;

		Для каждого ТекИнтерфейс Из ГлавныйИнтерфейс Цикл
			ТекИнтерфейс.Переключаемый = Ложь;
			ТекИнтерфейс.Видимость     = Ложь;
		КонецЦикла;
		ИнтерфейсКассира = ГлавныйИнтерфейс.ИнтерфейсКассира;
		ИнтерфейсКассира.Переключаемый = Истина;
		ИнтерфейсКассира.Видимость     = Истина;

		Если РольДоступна("АдминистраторККМ")
		 Или РольДоступна("АдминистраторККМСОграничениемПравДоступа")Тогда //Администратор

			Администратор = Истина;

		ИначеЕсли РольДоступна("ОператорККМ")
		      Или РольДоступна("ОператорККМСОграничениемПравДоступа") Тогда //Кассир

			Кассир = Истина;

		КонецЕсли;

		Отказ = Ложь;
		Причина = "";
		КассаККМ = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяКассаККМ");
		Если КассаККМ = Справочники.КассыККМ.ПустаяСсылка() Тогда
			Предупреждение("Для пользователя """+ ТекущийПользователь+""" не выбрана касса по умолчанию!");
			Отказ = Истина;
			Причина = "Не выбрана касса по умолчанию";
		КонецЕсли;

		Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойСклад");
		Если Склад = Неопределено
		 Или Склад = Справочники.Склады.ПустаяСсылка() Тогда
			Предупреждение("Для пользователя """+ ТекущийПользователь+""" не выбран склад по умолчанию!");
			Отказ = Истина;
			Причина = "Не выбран склад по умолчанию";
		КонецЕсли;
		ФР = Неопределено;

		Если Не Отказ Тогда
			МассивФР = СерверТО.ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор, КассаККМ);

			Если МассивФР.Количество() <> 0 Тогда
				Если Склад.НомерСекции = 0 Тогда
					Предупреждение("У склада: """ + Склад + """не указан номер секции!");
					Отказ = Истина;
					Причина = "У склада не указан номер секции";
				КонецЕсли;
					
			Иначе
				Предупреждение("У кассы: """ + КассаККМ + """, для компьютера: """ + ИмяКомпьютера() + """, фискальный регистратор не установлен!");
				Отказ = Истина;
				Причина = "У кассы не установлен ФР";
			КонецЕсли;
		КонецЕсли;

		Если Не Отказ Тогда

			Документы.ЧекККМ.СоздатьДокумент().ПолучитьФорму("ФормаРегистрацииПродаж",).Открыть();

		ИначеЕсли Администратор Тогда

			Предупреждение("Зайдите с правами администратора кассы.");
			Если Причина = "ФР не подключен" 
			 Или Причина = "ТО не подключено" 
			 Или Причина = "У кассы не установлен ФР" Тогда
				ФормаПодключенияОборудования = Обработки.ТОНастройка.ПолучитьФорму();
				ФормаПодключенияОборудования.Открыть();
			КонецЕсли;
			ЗавершитьРаботуСистемы();

		ИначеЕсли Кассир Тогда

			Если Причина = "ФР не подключен" 
			 Или Причина = "ТО не подключено" 
			 Или Причина = "У кассы не установлен ФР" Тогда
				Предупреждение("Зайдите с правами администратора кассы.");
			КонецЕсли;

			ЗавершитьРаботуСистемы();

		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Возвращает значение типа штрихкода для использования в ЭУ
// "1С:Печать штрихкодов"
//
// Параметры
// 	ТипКода -	ПланыВидовХарактеристик.ТипыШтрихкодов - тип, значение для которого
//				нужно получить
//
// Возвращаемое значение:
//   Число, которое может быть присвоено свойству ЭУ "ТипКода"
//
Функция ПолучитьЗначениеТипаШтрихкодаДляЭУ(ТипКода) Экспорт
	Перем Значение;
	
	Если ТипКода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8 Тогда
		Значение = 0;
	ИначеЕсли ТипКода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
		Значение = 1;
	ИначеЕсли ТипКода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда
		Значение = 2;
	ИначеЕсли ТипКода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code39 Тогда
		Значение = 3;
	ИначеЕсли ТипКода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code128 Тогда
		Значение = 4;
	Иначе
		Значение = -1;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции // ПолучитьЗначениеТипаШтрихкодаДляЭУ()

// Процедура осуществляет ввод документа "ПереоценкаТоваровВРознице" на основании прихода товара.
// Вызывается из форм документов поступления.
//
// Параметры:
//  ДокументОбъект - объект документа, вызвавшего процедуру.
//  ФормаДокумента - форма документа, вызвавшего процедуру.
//
Процедура ВвестиПереоценкуНаОснованииПрихода(ДокументОбъект, ФормаДокумента) Экспорт

	Если ДокументОбъект.Товары.Количество() = 0 Тогда
		Предупреждение("Не заполнена табличная часть ""Товары"".");
		Возврат;
	КонецЕсли;

	Если ДокументОбъект.Модифицированность() Тогда
		Ответ = Вопрос("Перед выполнением переоценки документ необходимо записать." + Символы.ПС +
		               "Записать?", РежимДиалогаВопрос.ДаНет);

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;

		Если ДокументОбъект.Проведен Тогда
			Попытка
				ФормаДокумента.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
			Исключение
				Ответ = Вопрос("Не удалось провести документ." + Символы.ПС +
				               "Отменить проведение и записать?", РежимДиалогаВопрос.ДаНет);

				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;

				ФормаДокумента.ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
			КонецПопытки;
		Иначе
			ФормаДокумента.ЗаписатьВФорме();
		КонецЕсли;
	КонецЕсли;

	ОбъектПереоценки = Документы.ПереоценкаТоваровВРознице.СоздатьДокумент();
	ОбъектПереоценки.Заполнить(ДокументОбъект.Ссылка);

	ФормаПереоценки = ОбъектПереоценки.ПолучитьФорму();
	ФормаПереоценки.ПараметрОснование = ДокументОбъект.Ссылка;
	ФормаПереоценки.Открыть();

КонецПроцедуры // ВвестиПереоценкуНаОснованииПрихода()
#КонецЕсли
