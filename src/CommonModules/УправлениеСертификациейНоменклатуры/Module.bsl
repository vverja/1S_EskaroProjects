// Функция возвращает флаг использования подсистемы сертификации номенклатуры
//
Функция ИспользоватьСертификациюНоменклатуры(Сообщать = Ложь) Экспорт
	
	Флаг = Константы.ИспользоватьСерииНоменклатуры.Получить();
	Если НЕ Флаг И Сообщать Тогда
		ОбщегоНазначения.Сообщение
				("Для использования подсистемы ""Сертификация"" необходимо включить использование серий номенклатуры.
				|Включить использование серий номенклатуры можно в форме ""Настройка параметров учета"" в разделе ""Учет товаров""", СтатусСообщения.ОченьВажное);

	КонецЕсли;
	
	Возврат Флаг;
	
КонецФункции // ИспользоватьСертификациюНоменклатуры()

// Процедура принимает табличную часть "Товары" или "Материалы" документа вида
// "ПоступлениеТоваровУслуг" или "ТребованиеНакладная" соответственно
//
// Процедура проверяет серии номенклатуры на наличие сертификата и, в случае его отсутствия,
// выводит сообщение. При отсутствии внутренней сертификации, инициируется отмена проведения документа.
//
Процедура ПроверитьНаСертификацию( МассивСерий, КонДата, Отказ, Заголовок) Экспорт

	Если МассивСерий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьСертификациюНоменклатуры() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СпрСерииНоменклатуры.Ссылка КАК СерияНоменклатуры,
		|	ПРЕДСТАВЛЕНИЕ(СпрСерииНоменклатуры.Ссылка) КАК Серия,
		|	ПРЕДСТАВЛЕНИЕ(СпрСерииНоменклатуры.Владелец) КАК Номенклатура,
		|	СпрСерииНоменклатуры.Владелец.ТребуетсяВнешняяСертификация КАК ФлагВнешнСертификации,
		|	СпрСерииНоменклатуры.Владелец.ТребуетсяВнутренняяСертификация КАК ФлагВнутрСертификации,
		|	РегСертификация.СертификатВнешн,
		|	РегСертификация.ДатаНачалаВнешн,
		|	РегСертификация.ДатаОкончанияВнешн,
		|	РегСертификация.СертификатВнутр,
		|	РегСертификация.ДатаНачалаВнутр,
		|	РегСертификация.ДатаОкончанияВнутр,
		|	РегСертификация.ВидСертификата
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СпрСерииНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СертификацияНоменклатуры.СерияНоменклатуры КАК СерияНоменклатуры,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА СертификацияНоменклатуры.ВидСертификата = &ВнешнСертификат
		|						ТОГДА СертификацияНоменклатуры.СостояниеСертификации
		|				КОНЕЦ) КАК СертификатВнешн,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА СертификацияНоменклатуры.ВидСертификата = &ВнешнСертификат
		|						ТОГДА СертификацияНоменклатуры.ДатаНачала
		|				КОНЕЦ) КАК ДатаНачалаВнешн,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА СертификацияНоменклатуры.ВидСертификата = &ВнешнСертификат
		|						ТОГДА СертификацияНоменклатуры.ДатаОкончания
		|				КОНЕЦ) КАК ДатаОкончанияВнешн,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА СертификацияНоменклатуры.ВидСертификата = &ВнутрСертификат
		|						ТОГДА СертификацияНоменклатуры.СостояниеСертификации
		|				КОНЕЦ) КАК СертификатВнутр,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА СертификацияНоменклатуры.ВидСертификата = &ВнутрСертификат
		|						ТОГДА СертификацияНоменклатуры.ДатаНачала
		|				КОНЕЦ) КАК ДатаНачалаВнутр,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА СертификацияНоменклатуры.ВидСертификата = &ВнутрСертификат
		|						ТОГДА СертификацияНоменклатуры.ДатаОкончания
		|				КОНЕЦ) КАК ДатаОкончанияВнутр,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СертификацияНоменклатуры.ВидСертификата) КАК ВидСертификата
		|		ИЗ
		|			РегистрСведений.СертификацияНоменклатуры КАК СертификацияНоменклатуры
		|		ГДЕ
		|			СертификацияНоменклатуры.СерияНоменклатуры В(&МассивСерий)
		|			И СертификацияНоменклатуры.СостояниеСертификации = &ЕстьСертификат
		|			И (СертификацияНоменклатуры.СерияНоменклатуры.Владелец.ТребуетсяВнешняяСертификация
		|						И СертификацияНоменклатуры.ВидСертификата = &ВнешнСертификат
		|						И (СертификацияНоменклатуры.ДатаНачала <= &КонДата
		|							ИЛИ СертификацияНоменклатуры.ДатаНачала = &ПустДата)
		|						И (СертификацияНоменклатуры.ДатаОкончания >= &КонДата
		|							ИЛИ СертификацияНоменклатуры.ДатаОкончания = &ПустДата)
		|					ИЛИ СертификацияНоменклатуры.СерияНоменклатуры.Владелец.ТребуетсяВнутренняяСертификация
		|						И СертификацияНоменклатуры.ВидСертификата = &ВнутрСертификат
		|						И (СертификацияНоменклатуры.ДатаНачала <= &КонДата
		|							ИЛИ СертификацияНоменклатуры.ДатаНачала = &ПустДата)
		|						И (СертификацияНоменклатуры.ДатаОкончания >= &КонДата
		|							ИЛИ СертификацияНоменклатуры.ДатаОкончания = &ПустДата))
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СертификацияНоменклатуры.СерияНоменклатуры) КАК РегСертификация
		|		ПО СпрСерииНоменклатуры.Ссылка = РегСертификация.СерияНоменклатуры
		|ГДЕ
		|	СпрСерииНоменклатуры.Ссылка В(&МассивСерий)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата",         КонДата);
	Запрос.УстановитьПараметр( "ПустДата",        '00010101000000');
	Запрос.УстановитьПараметр( "МаксДата",        '39991231235959');
	Запрос.УстановитьПараметр( "МассивСерий",     МассивСерий);
	Запрос.УстановитьПараметр( "ЕстьСертификат",  Перечисления.СостоянияСертификацииНоменклатуры.Есть);
	Запрос.УстановитьПараметр( "ВнешнСертификат", Перечисления.ВидыСертификацииНоменклатуры.ВнешняяСертификация);
	Запрос.УстановитьПараметр( "ВнутрСертификат", Перечисления.ВидыСертификацииНоменклатуры.ВнутренняяСертификация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Обход = РезультатЗапроса.Выбрать();
		Пока Обход.Следующий() Цикл
			// Проверка на Истина т.к. возможно значение NULL
			Если Обход.ФлагВнутрСертификации = Истина
			И Не Обход.СертификатВнутр = Перечисления.СостоянияСертификацииНоменклатуры.Есть Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Номенклатура """ + Обход.Номенклатура + """ серия: """ + Обход.Серия + """" + Символы.ПС + "    Нет внутренней сертификации", Отказ, Заголовок);
			КонецЕсли;
			Если Обход.ФлагВнешнСертификации = Истина
			И Не Обход.СертификатВнешн = Перечисления.СостоянияСертификацииНоменклатуры.Есть Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Номенклатура: """ + Обход.Номенклатура + """ серия: """ + Обход.Серия + """" + Символы.ПС + "    Нет внешней сертификации", Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаСертификацию()

// Функция возвращает общее количество (в единицах хранения остатков) номенклатуры,
// поступившей по серии.
//
Функция ПолучитьОбщееКоличествоПоступленияПоСериям(Серия) Экспорт
	
	Колич = 0;
	ТекстЗапроса = "
	|ВЫБРАТЬ Сумма(Количество) КАК Колич
	|ИЗ
	|	(ВЫБРАТЬ
	| 			Количество
	|	ИЗ 	
	|			Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|			Ссылка.Проведен   И  Ссылка.ОтражатьВУправленческомУчете И
	//Смартис Лиманчук начало 02.10.2012
	//|			(Ссылка.ВидОперации = &ВидОперации)  И
	|			(Ссылка.ВидОперации = &ВидОперации ИЛИ Ссылка.ВидОперации = &ВидОперации2)  И
	//Смартис Лиманчук окончание 02.10.2012
	|			(СерияНоменклатуры = &Серия)
	|	ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ
	|			Количество
	|	ИЗ 	
	|			Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСмену
	|	ГДЕ
	|			Ссылка.Проведен   И   Ссылка.ОтражатьВУправленческомУчете И
	|			(СерияНоменклатуры = &Серия)) ЗакупкаПроизводство
	|";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Серия",Серия);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
	//Смартис Лиманчук начало 02.10.2012
	Запрос.УстановитьПараметр("ВидОперации2", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссияНал);
	//Смартис Лиманчук окончание 02.10.2012
	ТабЗапроса = Запрос.Выполнить().Выгрузить();
	Если ТабЗапроса.Количество() > 0 Тогда
		Колич = ТабЗапроса.Итог("Колич");
	КонецЕсли;	
    Возврат Колич
КонецФункции

// Функция возвращает поставщика указанной серии
// Если поставок по серии не было, возвращается пустая строка.
//
Функция ПолучитьПоставщикаСерии(Серия) Экспорт

	//Клиент = "";
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагент
	|ИЗ 	
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТУ 
	|ГДЕ
	|	Проведен   И  ОтражатьВУправленческомУчете И
	//Смартис Лиманчук начало 02.10.2012
	//|	(ВидОперации = &ВидОперации)  И
	|	(ВидОперации = &ВидОперации ИЛИ ВидОперации = &ВидОперации2)  И
	//Смартис Лиманчук окончание 02.10.2012
	|	(ПоступлениеТУ.Товары.СерияНоменклатуры = &Серия)
	|";	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр( "Серия",       Серия);
	Запрос.УстановитьПараметр( "ВидОперации", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
	//Смартис Лиманчук начало 02.10.2012
	Запрос.УстановитьПараметр( "ВидОперации2", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссияНал);
	//Смартис Лиманчук окончание 02.10.2012
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ?( РезультатЗапроса.Пустой(), "", РезультатЗапроса.Выгрузить()[0].Контрагент);
	
КонецФункции	

// Функция возвращает ссылку на нормативный документ по номенклатуре и серии
// Серию можно не указывать
//
Функция ПолучитьНормативныйДокумент(НоменклатураСсылка, СерияСсылка = 0) Экспорт
	
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|   4 КАК А,
	//|	ДокументыСертификации.НормативныйДокумент
	//|ИЗ
	//|	РегистрСведений.НормативныеДокументыСертификацииНоменклатуры КАК ДокументыСертификации
	//|
	//|ГДЕ
	//|	ДокументыСертификации.Номенклатура = &НоменклатураСсылка И
	//|	ДокументыСертификации.СерияНоменклатуры = &СерияСсылка
	//|
	//|ОБЪЕДИНИТЬ
	//|
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|   3 КАК А,
	//|	ДокументыСертификации.НормативныйДокумент
	//|ИЗ
	//|	РегистрСведений.НормативныеДокументыСертификацииНоменклатуры КАК ДокументыСертификации
	//|
	//|ГДЕ
	//|	ДокументыСертификации.СерияНоменклатуры = &СерияСсылка И
	//|	&СерияСсылка <> &СерияПустаяСсылка
	//|
	//|ОБЪЕДИНИТЬ
	//|
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|   2 КАК А,
	//|	ДокументыСертификации.НормативныйДокумент
	//|ИЗ
	//|	РегистрСведений.НормативныеДокументыСертификацииНоменклатуры КАК ДокументыСертификации
	//|
	//|ГДЕ
	//|	ДокументыСертификации.Номенклатура = &НоменклатураСсылка
	//|
	//|ОБЪЕДИНИТЬ
	//|
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|   1 КАК А,
	//|	ДокументыСертификации.НормативныйДокумент
	//|ИЗ
	//|	РегистрСведений.НормативныеДокументыСертификацииНоменклатуры КАК ДокументыСертификации
	//|
	//|ГДЕ
	//|	ДокументыСертификации.Номенклатура = &НоменклатураПустаяСсылка И
	//|	ДокументыСертификации.СерияНоменклатуры = &СерияПустаяСсылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	1 КАК Порядок,
		|	РегНормативныеДок.Номенклатура,
		|	РегНормативныеДок.СерияНоменклатуры,
		|	РегНормативныеДок.НормативныйДокумент
		|ИЗ
		|	РегистрСведений.НормативныеДокументыСертификацииНоменклатуры КАК РегНормативныеДок
		|ГДЕ
		|	РегНормативныеДок.СерияНоменклатуры = &Серия
		|	И РегНормативныеДок.СерияНоменклатуры <> &ПустСерия
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	2,
		|	РегНормативныеДок.Номенклатура,
		|	РегНормативныеДок.СерияНоменклатуры,
		|	РегНормативныеДок.НормативныйДокумент
		|ИЗ
		|	РегистрСведений.НормативныеДокументыСертификацииНоменклатуры КАК РегНормативныеДок
		|ГДЕ
		|	РегНормативныеДок.Номенклатура = &Номенклатура
		|	И РегНормативныеДок.Номенклатура <> &ПустНоменклатура
		|	И РегНормативныеДок.СерияНоменклатуры = &ПустСерия
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	
	Запрос.УстановитьПараметр( "Номенклатура",     НоменклатураСсылка);
	Запрос.УстановитьПараметр( "Серия",            СерияСсылка);
	Запрос.УстановитьПараметр( "ПустСерия",        Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр( "ПустНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ?( РезультатЗапроса.Пустой(),
		Справочники.НормативныеДокументыСертификацииНоменклатуры.ПустаяСсылка(),
		РезультатЗапроса.Выгрузить()[0].НормативныйДокумент);
	
КонецФункции

// Функция возвращает строку, содержащую номер аттестата аккредитации
// и период действия, - для вывода на печать
Функция ПолучитьАттестатАккредитации(КонтрагентСсылка, Дата, КодЯзыка = "ru") Экспорт

	Набор = РегистрыСведений.АккредитацияОргановСертификацииНоменклатуры.СоздатьНаборЗаписей();
	Набор.Отбор.Контрагент.Значение = КонтрагентСсылка;
	Набор.Отбор.Контрагент.Использование = истина;
	
	Набор.Прочитать();
	
	//должен быть найден первый аттестат, который подходит и по дате начала, и по дате окончания
	Для каждого запись Из Набор Цикл
		Если (запись.Период <= Дата) и (запись.ДатаОкончания >= Дата) Тогда
			Возврат "" + НСтр("ru='Аттестат аккредитации Госстандарт Украины';uk='Атестат акредитації Держстандарт України'",КодЯзыка)
							   + Символы.ПС + "№ " + СокрЛП(запись.НомерАттестата) + НСтр("ru=' от ';uk=' від '",КодЯзыка) 
							   + Формат(запись.период,"ДЛФ = Д") + НСтр("ru=' действителен до ';uk=' дійсний до '",КодЯзыка)
								 + Формат(запись.ДатаОкончания,"ДЛФ = Д");

			
		КонецЕсли;
	КонецЦикла;
	Возврат  "" + НСтр("ru=' НЕТ ИНФОРМАЦИИ ';uk=' НЕМАЄ ІНФОРМАЦІЇ '",КодЯзыка)+ Символы.ПС 
							+ НСтр("ru=' ОБ АТТЕСТАТЕ АККРЕДИТАЦИИ! ';uk=' ПРО АТЕСТАТ АКРЕДИТАЦІЇ '",КодЯзыка);
КонецФункции

// Функция выдает список пар "серия-номенклатура" из табличной части документа,
// отбираются только те пары, по которым имеет смысл формировать заявку на сертификацию.
//
// Функция возвращает истину, если пара выбрана, иначе - ложь
//
// ТабличнаяЧастьОснования - ссылка на табличную часть, содержащую реквизиты Номенклатура и СерияНоменклатуры
// НужнаВнешняяСертификация - принимается признак учета пар, которым необходима внешняя сертификация,
//		сюда возвращается признак необходимости внешней сертификации для выбранной пары
// НужнаВнутренняяСертификация - принимается признак учета пар, которым необходима внутренняя сертификация,
//		сюда возвращается признак необходимости внутренней сертификации для выбранной пары
//
Функция ВыбратьСериюИзДокументаОснования(ТабличнаяЧастьОснования,НужнаВнешняяСертификация,НужнаВнутренняяСертификация, Номенклатура, СерияНоменклатуры, Цель) Экспорт
	
	ТаблицаВыбора = Новый ТаблицаЗначений;
	ТаблицаВыбора.Колонки.Добавить("Номенклатура");
	ТаблицаВыбора.Колонки.Добавить("СерияНоменклатуры");
	ТаблицаВыбора.Колонки.Добавить("Внутренняя"); //истина - внутренняя, ложь - внешняя
	Для каждого стр Из ТабличнаяЧастьОснования Цикл
		Для внутренняя = ложь по истина Цикл
			Если не НужнаВнутренняяСертификация и внутренняя Тогда
				Продолжить;
			КонецЕсли;
			Если не НужнаВнешняяСертификация и не внутренняя Тогда
				Продолжить;
			КонецЕсли;
			Если НужнаСертификацияДляСерии(стр.Номенклатура, стр.СерияНоменклатуры, внутренняя, Цель) Тогда
				Новстр = ТаблицаВыбора.Добавить();
				Новстр.Номенклатура = стр.Номенклатура;
				Новстр.СерияНоменклатуры = стр.СерияНоменклатуры;
				Новстр.Внутренняя = внутренняя;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если ТаблицаВыбора.Количество() = 0 Тогда
		#Если Клиент Тогда
		Предупреждение("Документ-основание не содержит ТМЦ, подлежащих сертификации!");
		#КонецЕсли
		Возврат ложь;
	КонецЕсли;
	СписокВыбора = Новый СписокЗначений;
	Для каждого стр из ТаблицаВыбора Цикл
		СписокВыбора.Добавить(СокрЛП(стр.Номенклатура.Наименование) + " ("+ СокрЛП(стр.СерияНоменклатуры.Наименование) + ") " +
		?(стр.внутренняя,"внутр.","внеш."));
	КонецЦикла;
	ВыбЭлем = СписокВыбора.ВыбратьЭлемент("Выберите серию для сертификации...");
	Если ВыбЭлем = Неопределено Тогда
		Возврат ложь;
	КонецЕсли;
	ИндексЭлемента = СписокВыбора.Индекс(ВыбЭлем);
	Номенклатура = ТаблицаВыбора[ИндексЭлемента].Номенклатура;
	СерияНоменклатуры = ТаблицаВыбора[ИндексЭлемента].СерияНоменклатуры;
	НужнаВнешняяСертификация = не ТаблицаВыбора[ИндексЭлемента].внутренняя;
	НужнаВнутренняяСертификация = ТаблицаВыбора[ИндексЭлемента].внутренняя;
	Возврат истина;
		
КонецФункции

// Функция проверяет состояние сертификации на текущий момент по серии.
// Возвращает истину, если нет даже заявки на сертификацию
//
// Внутренняя - признак того, является ли сертификация внутренней. Если нет, то внешняя.
// Цель - цель вызова - для определения, что вводится: заявка или сертификация
Функция НужнаСертификацияДляСерии(Номенклатура, СерияНоменклатуры, Внутренняя, Цель)
	
	Если НЕ ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		Возврат ложь;
	КонецЕсли;
	Если Внутренняя и не Номенклатура.ТребуетсяВнутренняяСертификация Тогда
		Возврат ложь;
	КонецЕсли;
	Если не Внутренняя и не Номенклатура.ТребуетсяВнешняяСертификация Тогда
		Возврат ложь;
	КонецЕсли;
	Отбор = Новый Структура;
	Отбор.Вставить( "СерияНоменклатуры", СерияНоменклатуры);
	
	Если не Внутренняя Тогда
		Отбор.Вставить( "ВидСертификата",   Перечисления.ВидыСертификацииНоменклатуры.ВнешняяСертификация);
		ЗначениеРесурсов = РегистрыСведений.СертификацияНоменклатуры.ПолучитьПоследнее(,Отбор);
	Иначе
		Отбор.Вставить( "ВидСертификата",   Перечисления.ВидыСертификацииНоменклатуры.ВнутренняяСертификация);
		ЗначениеРесурсов = РегистрыСведений.СертификацияНоменклатуры.ПолучитьПоследнее(,Отбор);
	КонецЕсли;
	
	ЗначениеСертификации = ЗначениеРесурсов.СостояниеСертификации;
	Если Цель = "Заявка" Тогда
		Возврат (ЗначениеСертификации <> Перечисления.СостоянияСертификацииНоменклатуры.Заявка) и 
			(ЗначениеСертификации <> Перечисления.СостоянияСертификацииНоменклатуры.Есть)
	Иначе
		Возврат ЗначениеСертификации <> Перечисления.СостоянияСертификацииНоменклатуры.Есть
	КонецЕсли;	

КонецФункции

Функция ПолучитьДатуЗавершенияПроизводстваСерии(СерияНоменклатуры) Экспорт
	ДатаЗавершения = '00010101';
	Запрос = Новый Запрос("
	|ВЫБРАТЬ  ПЕРВЫЕ 1
	|	Дата
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену   ОтчетПроизводстваЗаСмену
	|ГДЕ
	|	Проведен И ОтражатьВУправленческомУчете И
	|	(ОтчетПроизводстваЗаСмену.Продукция.СерияНоменклатуры = &Серия)
	|УПОРЯДОЧИТЬ По 
	|	Дата убыв");
	Запрос.УстановитьПараметр("Серия",СерияНоменклатуры);
	ТабЗапроса = Запрос.Выполнить().Выгрузить();
	Если ТабЗапроса.Количество() > 0 Тогда
		Возврат ТабЗапроса[0].Дата;
	КонецЕсли; 

КонецФункции // ПолучитьДатуЗавершенияПроизводстваСерии()

// Функция получает данные о сертификате серии
//
Функция ПолучитьСведенияОСертификате(Серия, ВидСертификации, КонДата) Экспорт
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СертификацияНоменклатуры.ДатаСертификата,
		|	СертификацияНоменклатуры.НомерСертификата,
		|	СертификацияНоменклатуры.ДатаНачала,
		|	СертификацияНоменклатуры.ДатаОкончания,
		|	ВЫБОР
		|		КОГДА СертификацияНоменклатуры.ДатаОкончания = &ПустДата
		|			ТОГДА &ДатаМакс
		|		ИНАЧЕ СертификацияНоменклатуры.ДатаОкончания
		|	КОНЕЦ КАК ДатаСортКон,
		|	ВЫБОР
		|		КОГДА СертификацияНоменклатуры.ДатаНачала = &ПустДата
		|			ТОГДА &ДатаМакс
		|		ИНАЧЕ СертификацияНоменклатуры.ДатаНачала
		|	КОНЕЦ КАК ДатаСортНач,
		|	СертификацияНоменклатуры.Регистратор КАК Регистратор,
		|	СертификацияНоменклатуры.Период КАК Период
		|ИЗ
		|	РегистрСведений.СертификацияНоменклатуры КАК СертификацияНоменклатуры
		|ГДЕ
		|	(СертификацияНоменклатуры.ДатаНачала <= &КонДата
		|			ИЛИ СертификацияНоменклатуры.ДатаНачала = &ПустДата)
		|	И (СертификацияНоменклатуры.ДатаОкончания >= &КонДата
		|			ИЛИ СертификацияНоменклатуры.ДатаОкончания = &ПустДата)
		|	И СертификацияНоменклатуры.СерияНоменклатуры = &Серия
		|	И СертификацияНоменклатуры.ВидСертификата = &ВидСертификата
		|	И СертификацияНоменклатуры.СостояниеСертификации = &Состояние
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСортКон УБЫВ,
		|	ДатаСортНач УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр( "Серия",          Серия);
	Запрос.УстановитьПараметр( "ВидСертификата", ВидСертификации);
	Запрос.УстановитьПараметр( "КонДата",        НачалоДня(КонДата));
	Запрос.УстановитьПараметр( "Состояние",      Перечисления.СостоянияСертификацииНоменклатуры.Есть);
	Запрос.УстановитьПараметр( "ДатаМакс",       Дата("39991231235959"));
	Запрос.УстановитьПараметр( "ПустДата",       Дата("00010101000000"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Структ = Новый Структура;
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Структ.Вставить( "ДатаСертификата",  '00010101');
		Структ.Вставить( "НомерСертификата", "");
		Структ.Вставить( "ДатаНачала",       '00010101');
		Структ.Вставить( "ДатаОкончания",    '00010101');
		Структ.Вставить( "Регистратор",      Неопределено);
		Структ.Вставить( "Период",           '00010101');
		
	Иначе
		
		Обход = РезультатЗапроса.Выбрать();
		Обход.Следующий();
		
		Структ.Вставить( "ДатаСертификата",  Обход.ДатаСертификата);
		Структ.Вставить( "НомерСертификата", Обход.НомерСертификата);
		Структ.Вставить( "ДатаНачала",       Обход.ДатаНачала);
		Структ.Вставить( "ДатаОкончания",    Обход.ДатаОкончания);
		Структ.Вставить( "Регистратор",      Обход.Регистратор);
		Структ.Вставить( "Период",           Обход.Период);
		
	КонецЕсли;
	
	Возврат Структ;
	
КонецФункции // ПолучитьСведенияОСертификате()