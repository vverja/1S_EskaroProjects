#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//	КодЯзыка		- на каком языке выводить описание
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина, КодЯзыка = "ru") Экспорт
		
	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,ЮридическийАдрес,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КоррСчет";
	КонецЕсли;

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	
	СоответствиеПараметров.Вставить("ПолноеНаименование",		НСтр("ru=' ';uk=' '",КодЯзыка));
	СоответствиеПараметров.Вставить("КодПоЕДРПОУ", 				НСтр("ru='код по ЕГРПОУ ';uk='код за ЄДРПОУ '",КодЯзыка));
	СоответствиеПараметров.Вставить("КодПоДРФО", 				НСтр("ru='код по ГРФЛ ';uk='код за ДРФО '",КодЯзыка));
	СоответствиеПараметров.Вставить("ИНН",						НСтр("ru='ИНН ';uk='ІПН '",КодЯзыка));
	СоответствиеПараметров.Вставить("НомерСвидетельства", 		НСтр("ru='№ свид. ';uk='№ свід.  '",КодЯзыка));
	СоответствиеПараметров.Вставить("ЮридическийАдрес",			НСтр("ru='юр. адрес: ';uk='юр. адреса: '",КодЯзыка));
	СоответствиеПараметров.Вставить("ФактическийАдрес",			НСтр("ru='адрес: ';uk='адреса: '",КодЯзыка));
	СоответствиеПараметров.Вставить("Телефоны",					НСтр("ru='тел.: ';uk='тел.: '",КодЯзыка));
	СоответствиеПараметров.Вставить("НомерСчета",				НСтр("ru='р/с ';uk='р/р '",КодЯзыка));
	СоответствиеПараметров.Вставить("Банк",               		НСтр("ru='в банке ';uk='у банку '",КодЯзыка));
	СоответствиеПараметров.Вставить("МФО",                		НСтр("ru= 'МФО ';uk='МФО '",КодЯзыка));
	СоответствиеПараметров.Вставить("ПлательщикНалогаНаПрибыль",НСтр("ru=' ';uk=' '",КодЯзыка));

	НоваяСтрока = Ложь;
	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			
			Если ИмяПараметра = "/" Тогда
				НоваяСтрока = Истина;
				Продолжить;
			КонецЕсли; 

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если ПустаяСтрока(Результат)Тогда 
					// это первый параметр, выведем префикс с большой буквы
					Префикс = ВРег(Лев(Префикс,1)) + Сред(Префикс,2);
				ИначеЕсли НоваяСтрока Тогда
					Результат = Результат + "," +Символы.ПС;
					НоваяСтрока = Ложь;
				Иначе
					Результат = Результат + ", " 
				КонецЕсли; 
				

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
				Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат СокрЛП(Результат);

КонецФункции // ОписаниеОрганизации()

// Представление незаполненой даты в печатных формах документов.
//
// Параметры
//
// Возвращаемое значение:
//   Строка   - "___"_________20__ г.
//
Функция ПустаяДатаВПечатнойФорме() Экспорт

	Возврат """___""_________20__ г."

КонецФункции // ПустаяДатаВПечатнойФорме()

// Функция собирает фамилию, имя и отчество физ. лица на указанную дату
//
// Параметры: 
//  ФизЛицо.    - физ. лицо, для которго необходимо получить данные
//  ДатаПериода - дата получения сведений
//
// Возвращаемое значение:
//  Структура с данными.
//
Функция ФамилияИмяОтчество(ФизЛицо, ДатаПериода) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарФизЛицо",     ФизЛицо);
	Запрос.УстановитьПараметр("ПарДатаПериода", ДатаПериода);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Фамилия,
	|	Имя,
	|	Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ПарДатаПериода, ФизЛицо = &ПарФизЛицо)
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Результат = Новый Структура("Фамилия, Имя, Отчество");

	Результат.Фамилия  = ?(НЕ ЗначениеЗаполнено(Шапка.Фамилия),  "", Шапка.Фамилия);
	Результат.Имя      = ?(НЕ ЗначениеЗаполнено(Шапка.Имя),      "", Шапка.Имя);
	Результат.Отчество = ?(НЕ ЗначениеЗаполнено(Шапка.Отчество), "", Шапка.Отчество);

	Возврат Результат;

КонецФункции // ФамилияИмяОтчество()

// Формирует описание серий и характеристик ТМЦ для печати
//
// Параметры
//  Выборка  – <ВыборкаИзРезультатаЗапроса > – Исходные данные
//
// Возвращаемое значение:
//   Строка - Описание серий и характеристик ТМЦ
//
Функция ПредставлениеСерий(Выборка) Экспорт

	Результат = "(";

	Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
		Результат = Результат + Выборка.Характеристика;
		Результат = СтрЗаменить(Результат, "<>", "");
	КонецЕсли;

	Если ЗначениеЗаполнено(Выборка.Серия) Тогда
		Результат = ?(Результат = "(", Результат, Результат + "; ");
		Результат = Результат + Выборка.Серия;
		Результат = СтрЗаменить(Результат,  "(<>", "(");
		Результат = СтрЗаменить(Результат, "; <>",  "");
	КонецЕсли;

	Результат = Результат + ")";

	Возврат ?(Результат = "()", "", " " + Результат);

КонецФункции // ПредставлениеСерий()

// Стандартная для данной конфигурации функция форматирования прописи количества
//
// Параметры: 
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество, КодЯзыка = "ru") Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, десятая, десятых, десятых, м, 1';uk='ціла ,цілих ,цілих , ж, десята, десятих, десятих, м, 1'",КодЯзыка);
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, сотая, сотых, сотых, м, 2';uk='ціла ,цілих ,цілих , ж, сота, сотих, сотих, м, 2'",КодЯзыка);
	Иначе
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3';uk='ціла ,цілих ,цілих , ж, тисячна, тисячних, тисячних, м, 3'",КодЯзыка);
	КонецЕсли;
	
	Возврат ЧислоПрописью(Количество,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыка), ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

Функция ПечатьРасчетаСреднегоЗаработка(ДокументСсылка, ДатаСобытия, ПродолжительностьРасчетногоПериода, ОписаниеОплачиваемогоПериода, СпособРасчета, Знач ИспользоватьСреднеЧасовойЗаработок = Неопределено, СписокСоставляющихСреднегоЗаработка = Неопределено, ВыводитьЗаголовок = Истина, ОтражатьДолюВремени = Истина, СтруктураПоказателей = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Новый ТабличныйДокумент
	КонецЕсли;
	
	Попытка
		МетаданныеДокумента = ДокументСсылка.Метаданные();
		ИмяИсточникаДанных = МетаданныеДокумента.Имя;
	Исключение
		Возврат Новый ТабличныйДокумент
	КонецПопытки;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетСреднегоЗаработка";
	
	Макет = ПолучитьОбщийМакет("РасчетСреднегоЗаработка");
	
	СекцияШапка = Макет.ПолучитьОбласть("Шапка");
	СекцияЗаголовокНачислений = Макет.ПолучитьОбласть("ЗаголовокНачислений");
	СекцияЗаголовокРабочегоМеста = Макет.ПолучитьОбласть("ЗаголовокРабочегоМеста");
	СекцияМесячныйЗаработок = Макет.ПолучитьОбласть("МесячныйЗаработок");
	СекцияСерединаОтчета = Макет.ПолучитьОбласть("СерединаОтчета");
	СекцияДоляВремени = Макет.ПолучитьОбласть("ДоляВремени");
	СекцияЗаголовокПремий = Макет.ПолучитьОбласть("ЗаголовокПремий");
	СекцияПремии = Макет.ПолучитьОбласть("Премии");
	СекцияПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Запрос = Новый Запрос;
	
	Организация = ДокументСсылка.Организация;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			ДокументСсылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",		ДатаСобытия);
	Запрос.УстановитьПараметр("Сотрудник",				ДокументСсылка.Сотрудник);
	Запрос.УстановитьПараметр("Физлицо",				ДокументСсылка.Сотрудник.Физлицо);
	Запрос.УстановитьПараметр("ИспользоватьСреднеЧасовойЗаработок" , ИспользоватьСреднеЧасовойЗаработок);

	Если ИспользоватьСреднеЧасовойЗаработок = Неопределено Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("СпособРегистрацииВремени") <> Неопределено Тогда
			ТекстПоляИспользоватьСреднеЧасовойЗаработок = "
			|	ВЫБОР
			|		КОГДА Документ.СпособРегистрацииВремени = ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены) 
			|			ИЛИ ВЫБОР
			|					КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
			|							И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|						ТОГДА ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
			|					ИНАЧЕ ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) 
			|				КОНЕЦ			
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИспользоватьСреднеЧасовойЗаработок"
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке Тогда
			// Решение Верховного Суда РФ от 13.07.2006 № ГКПИ06-637
			ТекстПоляИспользоватьСреднеЧасовойЗаработок = "
			|	Ложь КАК ИспользоватьСреднеЧасовойЗаработок"  
		Иначе
			ТекстПоляИспользоватьСреднеЧасовойЗаработок = "
			|ВЫБОР
			|	КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
			|			И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
			|	ИНАЧЕ ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) 
			|КОНЕЦ КАК ИспользоватьСреднеЧасовойЗаработок"
		КонецЕсли;
	Иначе
		ТекстПоляИспользоватьСреднеЧасовойЗаработок ="
		|	&ИспользоватьСреднеЧасовойЗаработок КАК ИспользоватьСреднеЧасовойЗаработок"
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Представление,
	|	Документ.Ссылка,
	|	Документ.Сотрудник,
	|	Документ.Сотрудник.Физлицо КАК Физлицо,
	|	Документ.Организация,
	|	ВЫРАЗИТЬ(Документ.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НаименованиеОрганизации,
	|	ЕСТЬNULL(ФИОФизлица.Фамилия + "" "" + ФИОФизлица.Имя + "" "" + ФИОФизлица.Отчество, Документ.Сотрудник.Наименование) КАК ФИОРаботника,
	|	Документ.Сотрудник.Код КАК ТабельныйНомер,"
	+ ТекстПоляИспользоватьСреднеЧасовойЗаработок + "
	|ИЗ
	|	Документ." + ИмяИсточникаДанных + " КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаНачалаСобытия, ФизЛицо = &ФизЛицо) КАК ФИОФизлица
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Документ.Ссылка = &ДокументСсылка";

	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если ИспользоватьСреднеЧасовойЗаработок = Неопределено Тогда
			ИспользоватьСреднеЧасовойЗаработок = Выборка.ИспользоватьСреднеЧасовойЗаработок;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СекцияШапка.Параметры,Выборка);
	КонецЕсли;
	
	Если ВыводитьЗаголовок Тогда
		СекцияШапка.Параметры.Представление = ОбщегоНазначения.СформироватьЗаголовокДокумента(ДокументСсылка,МетаданныеДокумента.Синоним);
		СекцияШапка.Параметры.ОписаниеОплачиваемогоПериода = ОписаниеОплачиваемогоПериода;
		СекцияШапка.Параметры.ДатаНачалаРасчетногоПериода = Формат(ДобавитьМесяц(НачалоМесяца(ДатаСобытия), - ПродолжительностьРасчетногоПериода),"ДФ=dd.MM.yyyy");
		СекцияШапка.Параметры.ДатаОкончанияРасчетногоПериода = Формат(НачалоДня(НачалоМесяца(ДатаСобытия) - 1),"ДФ=dd.MM.yyyy");
		СекцияШапка.Параметры.СпособРасчета = ?(СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС,СпособРасчета);
	
		ТабДокумент.Вывести(СекцияШапка);
	КонецЕсли;
	
	Если СписокСоставляющихСреднегоЗаработка = Неопределено Тогда
		СписокСоставляющихСреднегоЗаработка = Новый Массив(5); 
		Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке 
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
			Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка
			Тогда
			СписокСоставляющихСреднегоЗаработка = Новый Массив(13); 
			СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
			СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
			СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии;
			СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
			СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
			СписокСоставляющихСреднегоЗаработка[5] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые;
			СписокСоставляющихСреднегоЗаработка[6] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые;
			СписокСоставляющихСреднегоЗаработка[7] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые;
			СписокСоставляющихСреднегоЗаработка[8] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямНеИндексируемые;
			СписокСоставляющихСреднегоЗаработка[9] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые;
			СписокСоставляющихСреднегоЗаработка[10] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые;
			СписокСоставляющихСреднегоЗаработка[11] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые;
			СписокСоставляющихСреднегоЗаработка[12] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет Тогда
			СписокСоставляющихСреднегоЗаработка = Новый Массив(5); 
			СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий;
			СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий;
			СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий;
			СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий;
			СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий;
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Тогда
			СписокСоставляющихСреднегоЗаработка = Новый Массив(10); 
			СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий;
			СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий;
			СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий;
			СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий;
			СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий;
			СписокСоставляющихСреднегоЗаработка[5] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
			СписокСоставляющихСреднегоЗаработка[6] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
			СписокСоставляющихСреднегоЗаработка[7] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
			СписокСоставляющихСреднегоЗаработка[8] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
			СписокСоставляющихСреднегоЗаработка[9] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ;
		КонецЕсли;
	КонецЕсли;
	
	ОсновнойЗаработок = Новый Массив(4);
	ОсновнойЗаработок[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
	ОсновнойЗаработок[1] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
	ОсновнойЗаработок[2] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий;
	ОсновнойЗаработок[3] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые;
	
	ФиксированныеПремии = Новый Массив(6);
	ФиксированныеПремии[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
	ФиксированныеПремии[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
	ФиксированныеПремии[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии;
	ФиксированныеПремии[3] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
	ФиксированныеПремии[4] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые;
	ФиксированныеПремии[5] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые;
	
	ПоФиксПремиям = Новый Массив(3);
	ПоФиксПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
	ПоФиксПремиям[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
	
	ПоПремиям = Новый Массив(8);
	ПоПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
	ПоПремиям[1] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
	ПоПремиям[2] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий;
	ПоПремиям[3] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий;
	ПоПремиям[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий;
	ПоПремиям[5] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий;
	ПоПремиям[6] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые;
	ПоПремиям[7] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые;

	ПоФиксПремиямНеИндексируемые = Новый Массив(4);
	ПоФиксПремиямНеИндексируемые[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремии;
	ПоФиксПремиямНеИндексируемые[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
	ПоФиксПремиямНеИндексируемые[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые;
	ПоФиксПремиямНеИндексируемые[3] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые;

	Индексируемые = Новый Массив(7);
	Индексируемые[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые;
	Индексируемые[1] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые;
	Индексируемые[2] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииИндексируемые;
	Индексируемые[3] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиям;
	Индексируемые[4] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
	Индексируемые[5] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
	Индексируемые[6] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремии;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("СпособРасчета", СпособРасчета);
	Запрос.УстановитьПараметр("ИспользоватьСреднеЧасовойЗаработок", ИспользоватьСреднеЧасовойЗаработок);
	Запрос.УстановитьПараметр("СписокСоставляющихСреднегоЗаработка", СписокСоставляющихСреднегоЗаработка);
	Запрос.УстановитьПараметр("Индексируемые",						Индексируемые);
	Запрос.УстановитьПараметр("ОсновнойЗаработок",					ОсновнойЗаработок);
	Запрос.УстановитьПараметр("ОсновнойЗаработокНеиндексируемый",	ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые);
	Запрос.УстановитьПараметр("ПоФиксПремиям",						ПоФиксПремиям);
	Запрос.УстановитьПараметр("ПоПремиям",							ПоПремиям);
	Запрос.УстановитьПараметр("ВсеФиксированныеПремии",				ФиксированныеПремии);
	Запрос.УстановитьПараметр("ПоФиксПремиямНеИндексируемые",		ПоФиксПремиямНеИндексируемые);
	Запрос.УстановитьПараметр("РасчетныйПериодНачало",				ДобавитьМесяц(НачалоМесяца(ДатаСобытия), - ПродолжительностьРасчетногоПериода));
	Запрос.УстановитьПараметр("РасчетныйПериодОкончание",			НачалоДня(НачалоМесяца(ДатаСобытия) - 1));
	
	// по окончательным данным проведенного документа
	// собираем итоговые данные и рассчитываем средний заработок
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 1
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ПорядокЗаписей,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|					КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|						ТОГДА 1
	|					ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|				КОНЕЦ
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА РасчетСреднегоЗаработка.Результат
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоЗаработка,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ВсеФиксированныеПремии)
	|			ТОГДА РасчетСреднегоЗаработка.Результат
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФиксПремий,
	|	ВЫБОР
	|		КОГДА (РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|				ИЛИ РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый))
	|				И РасчетСреднегоЗаработка.Сотрудник = &Сотрудник
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользоватьСреднеЧасовойЗаработок
	|						ТОГДА РасчетСреднегоЗаработка.ОтработаноЧасов
	|					ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноДней
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоДнейРасчетногоПериода,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособий)
	|			ТОГДА РасчетСреднегоЗаработка.Результат
	|		КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
	|					ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|								ТОГДА 1
	|							ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|						КОНЕЦ
	|				КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиям)
	|					ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|								ТОГДА 1
	|							ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|						КОНЕЦ * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.НормаПоПятидневке = 0
	|								ТОГДА 0
	|							ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноПоПятидневке / РасчетСреднегоЗаработка.НормаПоПятидневке
	|						КОНЕЦ
	|				КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиямНеИндексируемые)
	|					ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.НормаПоПятидневке = 0
	|								ТОГДА 0
	|							ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноПоПятидневке / РасчетСреднегоЗаработка.НормаПоПятидневке
	|						КОНЕЦ
	|				ИНАЧЕ РасчетСреднегоЗаработка.Результат
	|			КОНЕЦ * ВЫБОР
	|				КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев > РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка
	|					ТОГДА РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка / РасчетСреднегоЗаработка.ЧислоМесяцев
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ВсегоУчтеноПремий,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ВсеФиксированныеПремии)
	|			ТОГДА РасчетСреднегоЗаработка.ОтработаноПоПятидневке
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоДнейОтработано,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ВсеФиксированныеПремии)
	|			ТОГДА РасчетСреднегоЗаработка.НормаПоПятидневке
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоДнейПоНорме,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработокНеиндексируемый)
	|			ТОГДА 0
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособий)
	|			ТОГДА ""-""
	|		КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиям)
	|					ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|								ТОГДА 1
	|							ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|						КОНЕЦ
	|				КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
	|					ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|							КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|								ТОГДА 1
	|							ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|						КОНЕЦ
	|				ИНАЧЕ РасчетСреднегоЗаработка.Результат
	|			КОНЕЦ / РасчетСреднегоЗаработка.ЧислоМесяцев
	|	КОНЕЦ КАК МесячнаяЧастьПремий,
	|	НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, МЕСЯЦ) КАК МесяцРасчетногоПериода,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&Индексируемые)
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетСреднегоЗаработка.КоэффициентИндексации < 1
	|						ТОГДА 1
	|					ИНАЧЕ РасчетСреднегоЗаработка.КоэффициентИндексации
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоэффициентИндексации,
	|	РасчетСреднегоЗаработка.Результат,
	|	ВЫБОР
	|		КОГДА РасчетСреднегоЗаработка.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособий)
	|			ТОГДА 0
	|		ИНАЧЕ РасчетСреднегоЗаработка.ЧислоМесяцев
	|	КОНЕЦ КАК МесяцевПремии,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Наименование
	|	КОНЕЦ + ""; "" + ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность.Наименование
	|	КОНЕЦ КАК РабочееМесто,
	|	РасчетСреднегоЗаработка.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РасчетСреднегоЗаработка.Сотрудник.ВидЗанятости, РасчетСреднегоЗаработка.Регистратор.Сотрудник.ВидЗанятости) = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|			ТОГДА ""По внутр. совм-ву""
	|		ИНАЧЕ ""Основное рабочее место""
	|	КОНЕЦ КАК ВидЗанятости
	|ИЗ
	|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаНачалаСобытия,
	|				Сотрудник В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							РасчетСреднегоЗаработка.Сотрудник
	|						ИЗ
	|							РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
	|						ГДЕ
	|							РасчетСреднегоЗаработка.Регистратор = &Регистратор)
	|					И Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацийСрезПоследних
	|		ПО РасчетСреднегоЗаработка.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	|ГДЕ
	|	РасчетСреднегоЗаработка.Регистратор = &Регистратор
	|	И РасчетСреднегоЗаработка.СпособРасчета = &СпособРасчета
	|	И (РасчетСреднегоЗаработка.Результат <> 0
	|			ИЛИ РасчетСреднегоЗаработка.ОтработаноДней <> 0
	|			ИЛИ РасчетСреднегоЗаработка.ОтработаноЧасов <> 0)
	|	И РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода = &РасчетныйПериодНачало
	|	И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода = &РасчетныйПериодОкончание
	|	И РасчетСреднегоЗаработка.ВидРасчета В(&СписокСоставляющихСреднегоЗаработка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЗаписей,
	|	РасчетСреднегоЗаработка.БазовыйПериодНачало
	|ИТОГИ
	|	СУММА(ВсегоЗаработка),
	|	СУММА(ФиксПремий),
	|	СУММА(ВсегоДнейРасчетногоПериода),
	|	СУММА(ВсегоУчтеноПремий),
	|	МАКСИМУМ(ВсегоДнейОтработано),
	|	МАКСИМУМ(ВсегоДнейПоНорме)
	|ПО
	|	ОБЩИЕ,
	|	Сотрудник";
	
	Результат = Запрос.Выполнить();
	
	СтруктураПоказателей = Новый Структура("
	|ВсегоДнейРасчетногоПериода,
	|ВсегоЗаработка,
	|ВсегоУчтеноПремий,
	|ОбщийЗаработок, 
	|Средний",0,0,0,0,0);
	
	Если Не Результат.Пустой() Тогда
		
		// уточним названия колонок и показателей
		Если ИспользоватьСреднеЧасовойЗаработок Тогда
			СекцияЗаголовокРабочегоМеста.Параметры.ЕдиницаИзмерения = "часов";
			СекцияДоляВремени.Параметры.ЕдиницаИзмерения = "часов";
			СекцияПодвал.Параметры.ЕдиницаИзмерения = "часов";
			СекцияПодвал.Параметры.ОписаниеЗаработка = "Среднечасовой";
		Иначе
			СекцияЗаголовокРабочегоМеста.Параметры.ЕдиницаИзмерения = "дней";
			СекцияДоляВремени.Параметры.ЕдиницаИзмерения = "дней";
			СекцияПодвал.Параметры.ЕдиницаИзмерения = "дней";
			СекцияПодвал.Параметры.ОписаниеЗаработка = "Среднедневной";
		КонецЕсли;
		СтруктураИтоговПоРабочемуМесту = Новый Структура("
		|ВсегоДнейРасчетногоПериода,
		|ВсегоЗаработка,
		|ВсегоДнейОтработано,
		|ВсегоДнейПоНорме,
		|ДоляВремени",0,0,0,0,0);
		
		ВыводитьЗаголовокРабочегоМеста = Истина;
		ВыводитьИтогиПредыдущегоРабочегоМеста = Ложь;
		ТабДокумент.Вывести(СекцияЗаголовокНачислений);
		
		// Формирование раздела по начислениям за расчетный период по рабочим местам
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
				
				//заполнение итогами по расчету среднего заработка
				ЗаполнитьЗначенияСвойств(СтруктураПоказателей,Выборка);
				ОтражатьДолюВремени = ОтражатьДолюВремени И Выборка.ФиксПремий <> 0;
				
				СтруктураПоказателей.ОбщийЗаработок = Формат(Выборка.ВсегоЗаработка + Выборка.ВсегоУчтеноПремий, "ЧЦ=17; ЧДЦ=4; ЧН=-");
				СтруктураПоказателей.Средний = Окр(?(СтруктураПоказателей.ВсегоДнейРасчетногоПериода = 0,0, (Выборка.ВсегоЗаработка + Выборка.ВсегоУчтеноПремий) / СтруктураПоказателей.ВсегоДнейРасчетногоПериода),2);
				
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
				Если ВыводитьИтогиПредыдущегоРабочегоМеста Тогда // итоги предыдущего р.м.
					ЗаполнитьЗначенияСвойств(СекцияСерединаОтчета.Параметры,СтруктураИтоговПоРабочемуМесту);
					ТабДокумент.Вывести(СекцияСерединаОтчета);
					Если ОтражатьДолюВремени Тогда
						ЗаполнитьЗначенияСвойств(СекцияДоляВремени.Параметры,СтруктураИтоговПоРабочемуМесту);
						ТабДокумент.Вывести(СекцияДоляВремени);
					КонецЕсли;
				Иначе
					ВыводитьИтогиПредыдущегоРабочегоМеста = Истина;
				КонецЕсли;
				
				// заполнение итогами по очередному р.м.
				ЗаполнитьЗначенияСвойств(СтруктураИтоговПоРабочемуМесту,Выборка);
				СтруктураИтоговПоРабочемуМесту.ДоляВремени = ?(СтруктураИтоговПоРабочемуМесту.ВсегоДнейПоНорме = 0,0, Формат(СтруктураИтоговПоРабочемуМесту.ВсегоДнейОтработано / СтруктураИтоговПоРабочемуМесту.ВсегоДнейПоНорме,"ЧДЦ=10"));
				ВыводитьЗаголовокРабочегоМеста = Истина;
				
			ИначеЕсли Выборка.ПорядокЗаписей <> 3 Тогда
				Если ВыводитьЗаголовокРабочегоМеста Тогда
					ВыводитьЗаголовокРабочегоМеста = Ложь;
					ЗаполнитьЗначенияСвойств(СекцияЗаголовокРабочегоМеста.Параметры,Выборка);
					ТабДокумент.Вывести(СекцияЗаголовокРабочегоМеста);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СекцияМесячныйЗаработок.Параметры,Выборка);
				ТабДокумент.Вывести(СекцияМесячныйЗаработок);
			КонецЕсли;
		КонецЦикла;
		Если ВыводитьЗаголовокРабочегоМеста Тогда
			ТабДокумент.Вывести(СекцияЗаголовокРабочегоМеста);
		КонецЕсли;
		// итоги последнего по порядку р.м.
		ЗаполнитьЗначенияСвойств(СекцияСерединаОтчета.Параметры,СтруктураИтоговПоРабочемуМесту);
		ТабДокумент.Вывести(СекцияСерединаОтчета);
		Если ОтражатьДолюВремени Тогда
			ЗаполнитьЗначенияСвойств(СекцияДоляВремени.Параметры,СтруктураИтоговПоРабочемуМесту);
			ТабДокумент.Вывести(СекцияДоляВремени);
		КонецЕсли;
		
		// Формирование раздела по начисленным премиям
		ТабДокумент.Вывести(СекцияЗаголовокПремий);
		ВыводитьПустуюСтрокуПремии = Истина;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись И Выборка.ПорядокЗаписей = 3 Тогда
				ЗаполнитьЗначенияСвойств(СекцияПремии.Параметры,Выборка);
				СекцияПремии.Параметры.МесяцРасчетногоПериода = Формат(СекцияПремии.Параметры.МесяцРасчетногоПериода,"ДФ='ММММ гггг ""г.""'");
				СекцияПремии.Параметры.МесяцевПремии = ?(ЗначениеЗаполнено(СекцияПремии.Параметры.МесяцевПремии), "; за " + СекцияПремии.Параметры.МесяцевПремии + " мес.","");
				ТабДокумент.Вывести(СекцияПремии);
				ВыводитьПустуюСтрокуПремии = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если ВыводитьПустуюСтрокуПремии Тогда
			СекцияПремии.Область(1,2,1,2).Текст = "";
			ТабДокумент.Вывести(СекцияПремии);
		КонецЕсли;
		
		// Итоги по расчету среднего заработка
		ЗаполнитьЗначенияСвойств(СекцияПодвал.Параметры,СтруктураПоказателей);
		ТабДокумент.Вывести(СекцияПодвал);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьРасчетаСреднегоЗаработка	

// Копирует упорядочивания из элемента структуры настройки СКД в отчет
//
// Параметры:
//  Настройка - настройки схемы компоновки данных
//
Процедура ПеренестиПорядокВОтчет(Настройки) Экспорт
	
	Если Настройки.Структура.Количество() <> 0 тогда
		
		Если ТипЗнч(Настройки.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") тогда
			
			Если Настройки.Структура[0].Строки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Строки[0]);
				
			КонецЕсли;
			
			Если Настройки.Структура[0].Колонки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Колонки[0]);
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Колонки[1]);
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Колонки[2]);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Настройки.Структура[0]) = Тип("ГруппировкаТаблицыКомпоновкиДанных") тогда
			
			ПеренестиПорядок(Настройки, Настройки.Структура[0].Строки[0]);
			
		ИначеЕсли ТипЗнч(Настройки.Структура[0]) = Тип("ДиаграммаКомпоновкиДанных") тогда
			
			Если Настройки.Структура[0].Серии.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Серии[0]);
				
			КонецЕсли;
			
			Если Настройки.Структура[0].Точки.Количество() <> 0 тогда
				
				ПеренестиПорядок(Настройки, Настройки.Структура[0].Точки[0]);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПеренестиВсеУпорядочиванияВОтчет()

// Копирует упорядочивания из группировки объекта в отчет
//
// Параметры:
//  Настройка - настройки схемы компоновки данных
//  Структура - структура настройки компоновки данных
//
Процедура ПеренестиПорядок(Настройки, Структура)
	
	ТиповыеОтчеты.СкопироватьЭлементы(Настройки.Порядок, Структура.Порядок, , ложь);
	
	Структура.Порядок.Элементы.Очистить();
	
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Если Структура.Структура.Количество() <> 0 тогда
		ПеренестиПорядок(Настройки, Структура.Структура[0]);
	КонецЕсли;
	
КонецПроцедуры //ПеренестиУпорядочивание()

// Устанавливает отбор при выбор подразддления организации или сотрудника органиазации в отборе СКД
// 
// Параметры:
//  Элемент              - элемент выбора
//  КомпоновщикНастроек  - компоновщик настроек
//  ПоляОрганизаций      - поля СКД, в которых назначается отбор по организации
//  Объект               - отчет
//  СтандартнаяОбработка - признак стандартной обработки
//
Процедура ПодставитьОтборОрганизации(Элемент, КомпоновщикНастроек, ПоляОрганизаций = Неопределено, Объект, СтандартнаяОбработка, КогоВыбирать = 0) Экспорт
	
	СписокПолеОргаинзация = Новый СписокЗначений;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("ПолеКомпоновкиДанных") тогда
		СписокПолеОргаинзация.Добавить(ПоляОрганизаций);
	КонецЕсли;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("СписокЗначений") тогда
		СписокПолеОргаинзация = ПоляОрганизаций;
	КонецЕсли;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("Массив") тогда
		СписокПолеОргаинзация.ЗагрузитьЗначения(ПоляОрганизаций);
	КонецЕсли;
	
	Организация = Неопределено;
	
	Для каждого ЭлементОтбора из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если СписокПолеОргаинзация.НайтиПоЗначению(ЭлементОтбора.ЛевоеЗначение) <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Организации") тогда
			
			Организация = ЭлементОтбора.ПравоеЗначение;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Организация <> Неопределено тогда
		
		Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") тогда
			
			Элемент.ВыборПоВладельцу = Организация;
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СотрудникиОрганизаций") тогда
			
			ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Объект, Истина, ОбщегоНазначения.ПолучитьРабочуюДату(), ОбщегоНазначения.ГоловнаяОрганизация(Организация), КогоВыбирать, СтандартнаяОбработка, Элемент.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПодставитьОтборОрганизации()

// Возвращает значение истина если за, переданный период заполнен регламетированный производственный календарь
//
// Параметры:
//
//  НачалоПериода - дата начала периода
//  КонецПериода - дата конца периода
//
Функция ЗаполненРегламентированныйПроизводственныйКалендарь(НачалоПериода, КонецПериода) Экспорт
	
	ТЗ = "ВЫБРАТЬ
	     |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	     |ИЗ
	     |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	     |ГДЕ
	     |	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И &КонецПериода";
		 
	Запрос = Новый Запрос(ТЗ);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции  //ЗаполненРегламентированныйПроизводственныйКалендарь()

// Формируется текст плательщика или получателя для печатной формы платежного документа
//
// Параметры
//  ТекстНаименования  	– <строка> – значение реквизита документа, если реквизит заполнен, он и выводится на печать
//  ВладелецСчета  		– <СправочникСсылка.Организации>/<СправочникСсылка.Контрагенты> – владелец банковского счета
//  БанковскийСчет		– <СправочникСсылка.БанковскиеСчета> – банковский счет плательщика или получателя
//  ВидОперации			– <Перечисление.ВидыОперацийППИсходящее> – вид операции документа
//
// Возвращаемое значение:
//   <Строка>			– наименование плательщика или получателя, которое будет выводиться в печатной форме платежного документа
//
Функция СформироватьТекстНаименованияПлательшикаПолучателя(ТекстНаименования, ВладелецСчета, БанковскийСчет, ВидОперации = Неопределено) 
	
	ТекстРезультат = ТекстНаименования;
	Если ПустаяСтрока(ТекстРезультат) Тогда
		
		Если ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Организации") 
		  И ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога 
		  И НЕ ПустаяСтрока(ВладелецСчета.НаименованиеПлательщикаПриПеречисленииНалогов) Тогда
		  
			ТекстРезультат = ВладелецСчета.НаименованиеПлательщикаПриПеречисленииНалогов;
			
		Иначе
			
			ТекстРезультат = ?(ПустаяСтрока(ВладелецСчета.НаименованиеПолное), 
			                   ВладелецСчета.Наименование, ВладелецСчета.НаименованиеПолное);

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстРезультат;
	
КонецФункции // СформироватьТекстНаименованияПлательшикаПолучателя()

// Формирует значения по умолчанию реквизитов плательщика и получателя для банковских платежных документов
//
// Параметры
//  Плательщик  		– <СправочникСсылка.Организации>/<СправочникСсылка.Контрагенты> – плательщик, владелец банковского счета
//  СчетПлательщика		– <СправочникСсылка.БанковскиеСчета> – банковский счет плательщика
//  Получатель  		– <СправочникСсылка.Организации>/<СправочникСсылка.Контрагенты> – получатель, владелец банковского счета
//  СчетПолучателя		– <СправочникСсылка.БанковскиеСчета> – банковский счет получателя
//  ВидОперации			– <Перечисление.ВидыОпераций...> – вид операции документа
//
// Возвращаемое значение:
//   <Структура>		– структура строковых реквизитов плательщика и получателя
//						  ключи структуры: 
//							ТекстПлательщика, ИННПлательщика, КПППлательщика, 
//							ТекстПолучателя, ИННПолучателя, КПППолучателя
//							НаименованиеБанкаПлательщика, НомерСчетаПлательщика, БикБанкаПлательщика, СчетБанкаПлательщика 
//							НаименованиеБанкаПолучателя, НомерСчетаПолучателя, БикБанкаПолучателя, СчетБанкаПолучателя
//
Функция СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(Плательщик, СчетПлательщика, Получатель, СчетПолучателя, ВидОперации) Экспорт

	ЗначенияРеквизитов = Новый Структура;
	
	ЗначенияРеквизитов.Вставить("ТекстПлательщика", СформироватьТекстНаименованияПлательшикаПолучателя(
	                            "", Плательщик, СчетПлательщика, ВидОперации));
	
									
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		ВладелецСчетаПолучателя = Плательщик;
		СтруктураКодыОрганизаций = Новый Структура("Организация", ВладелецСчетаПолучателя);
		СтруктураКодыОрганизаций = РегистрыСведений.КодыОрганизации.ПолучитьПоследнее(, СтруктураКодыОрганизаций);
		ЗначенияРеквизитов.Вставить("КодПоЕДРПОУПолучателя", СтруктураКодыОрганизаций.КодПоЕДРПОУ);
	Иначе
		ВладелецСчетаПолучателя = Получатель;
		ЗначенияРеквизитов.Вставить("КодПоЕДРПОУПолучателя", ВладелецСчетаПолучателя.КодПоЕДРПОУ);
	КонецЕсли;
	
	ЗначенияРеквизитов.Вставить("ТекстПолучателя", СформироватьТекстНаименованияПлательшикаПолучателя(
	                            "", ВладелецСчетаПолучателя, СчетПолучателя, ВидОперации));
	
	БанкПлательщика             = СчетПлательщика.Банк;
	ЗначенияРеквизитов.Вставить("НаименованиеБанкаПлательщика", БанкПлательщика.Наименование + " " + БанкПлательщика.Город);
	ЗначенияРеквизитов.Вставить("НомерСчетаПлательщика", СчетПлательщика.НомерСчета);
	ЗначенияРеквизитов.Вставить("МФОБанкаПлательщика", БанкПлательщика.Код);
	ЗначенияРеквизитов.Вставить("СчетБанкаПлательщика", БанкПлательщика.КоррСчет);
									
	БанкПолучателя             = СчетПолучателя.Банк;
	ЗначенияРеквизитов.Вставить("НаименованиеБанкаПолучателя", БанкПолучателя.Наименование + " " + БанкПолучателя.Город);
	ЗначенияРеквизитов.Вставить("НомерСчетаПолучателя", СчетПолучателя.НомерСчета);
	ЗначенияРеквизитов.Вставить("МФОБанкаПолучателя", БанкПолучателя.Код);
	ЗначенияРеквизитов.Вставить("СчетБанкаПолучателя", БанкПолучателя.КоррСчет);
									
	Возврат ЗначенияРеквизитов;
	
КонецФункции //СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ

// Получает из текущих настроек пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
// Если не найдено, то берется первый макет в структуре макетов печатных форм,
// и сохраняется в настройках пользователя.
//
// Параметры: 
//  ИмяОбъекта          - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  ФормаДиалога        - форма редактируемого объекта,
//  СоответствиеМакетов - соответствие, содержащее названия (ключ) и имена (значение) 
//                        макетов печатных форм документа
//
Процедура СоздатьКнопкиПечати(ДокументОбъект, ФормаДокумента) Экспорт

	Попытка
		СтруктураВнутреннихПечатныхФорм = ДокументОбъект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(ДокументОбъект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаПоУмолчанию = УниверсальныеМеханизмы.ПолучитьСтрокуДереваМакетовПоУмолчанию(ДокументОбъект.Метаданные().Имя, ДеревоМакетов);
	
	Если ДеревоМакетов.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПанельКнопок = ФормаДокумента.ЭлементыФормы.ОсновныеДействияФормы;
	КнопкиСправа = (ПанельКнопок.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право);
	
	Если ПанельКнопок.Кнопки.Найти("Печать") = Неопределено Тогда
		Если КнопкиСправа Тогда
			ПанельКнопок.Кнопки.Вставить(0,, ТипКнопкиКоманднойПанели.Разделитель);
			ПанельКнопок.Кнопки.Вставить(0,"Печать", ТипКнопкиКоманднойПанели.Действие, "Печать", Новый Действие("ОсновныеДействияФормыПечать"));
		Иначе
			ПанельКнопок.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			ПанельКнопок.Кнопки.Добавить("Печать", ТипКнопкиКоманднойПанели.Действие, "Печать", Новый Действие("ОсновныеДействияФормыПечать"));
		КонецЕсли;
	КонецЕсли;
	
	Если (СтрокаПоУмолчанию <> Неопределено) И (ПанельКнопок.Кнопки.Найти("ДействиеПечать") = Неопределено) Тогда
		Если КнопкиСправа Тогда
			ПанельКнопок.Кнопки.Вставить(0,, ТипКнопкиКоманднойПанели.Разделитель);
			ПанельКнопок.Кнопки.Вставить(0,"ДействиеПечать", ТипКнопкиКоманднойПанели.Действие, СтрокаПоУмолчанию.Текст, Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
		Иначе
			ПанельКнопок.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			ПанельКнопок.Кнопки.Добавить("ДействиеПечать", ТипКнопкиКоманднойПанели.Действие, СтрокаПоУмолчанию.Текст, Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УстановитьКнопкуПечати()

// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры
//  ТабДокумент        – Табличный документ
//  ВыводимыеОбласти   – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//   Булево   – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции // ПроверитьВыводТабличногоДокумента()




////////////////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ЗАПРОСОВ ВЫПОЛНЯЮЩИХСЯ ПОД РЛС

// Процедура копирует параметры запроса в массив данных для последующей проверки отчета
//
Процедура ЗапомнитьПараметрыЗапроса(Запрос, МассивПарамтеровЗапроса) Экспорт
	СтруктураЗапроса = Новый Структура("Текст", Запрос.Текст);
	
	Для каждого ПараметрЗапроса из Запрос.Параметры Цикл
		СтруктураЗапроса.Вставить(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивПарамтеровЗапроса.Добавить(СтруктураЗапроса);
КонецПроцедуры

Процедура ПроверитьОшибкуЗапрос(Запрос, ИнформацияОбОшибке, ОшибкаДоступа = Ложь, ЗдаватьВопрос = Ложь) Экспорт
	
	Если ПолныеПрава.ИспользуетсяОграниченияПравДоступаНаУровнеЗаписей() тогда
		Если НЕ ТранзакцияАктивна() и Вопрос ("Внимание! При формировании отчета произошла неизвестная ошибка. " + Символы.ПС
			+ "Вы можете настроить и повторно сформировать отчет, " + Символы.ПС 
			+ "или запустить поиск точной причины ошибки. Найти точную причину ошибки " + Символы.ПС
			+ "(может занять продолжительное время)?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да 
			ИЛИ НЕ ЗдаватьВопрос тогда
			
			Если ПолныеПрава.ОшибкаДоступа(Запрос) тогда
				Если НЕ ТранзакцияАктивна() тогда
					Предупреждение("Внимание! Для формирования отчета недостаточно прав. "+ Символы.ПС +"Настройте отчет или обратитесь к администратору системы");
				КонецЕсли;
				Возврат;
			Иначе
				Если НЕ ТранзакцияАктивна() тогда
					Предупреждение("Ошибка при формировании отчета не связана с ограничением Ваших прав доступа: " + Символы.ПС+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					Сообщить("Ошибка при формировании отчета не связана с ограничением Ваших прав доступа: " + Символы.ПС+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), СтатусСообщения.Важное);
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Формирует массив параметров, для печати дополнительной информации
//
// Параметры: 
//  ВыборкаШапка   - результат запроса по шапке
//  Список         - список запрашиваемых параметров организации
//
// Возвращаемое значение:
//  Массив - со струтктурой (парами НазваниеПараметра:ЗначениеПараметра).
//
Функция ДополнительнаяИнформация(ВыборкаШапка, Список = "", КодЯзыка = "ru") Экспорт

	МассивСтруктур = Новый Массив();

	Если ПустаяСтрока(Список) Тогда
		Возврат МассивСтруктур;
	КонецЕсли; 
	
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ДоговорНаименованиеДляПечати", НСтр("ru='Договор:';uk='Договір:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Содержание",					НСтр("ru='Содержание:';uk='Зміст:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Склад",						НСтр("ru='Склад:';uk='Склад:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Заказ",						НСтр("ru='Заказ:';uk='Замовлення:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Сделка",						НСтр("ru='Сделка:';uk='Угода:'",КодЯзыка));
	СоответствиеПараметров.Вставить("ДокументПередачи",				НСтр("ru='Документ передачи:';uk='Документ передачі:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Инвентаризация",				НСтр("ru='Инвентаризация:';uk='Інвентаризація:'",КодЯзыка));
	СоответствиеПараметров.Вставить("КассаККМ",						НСтр("ru='ЭККА:';uk='ЕККА:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Валюта",						НСтр("ru='Валюта:';uk='Валюта:'",КодЯзыка));	
	СоответствиеПараметров.Вставить("АдресДоставки",				НСтр("ru='Адрес доставки:';uk='Адреса доставки:'",КодЯзыка));

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");

	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = СокрЛП(Лев(Список, ПозЗапятой - 1));
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				ЗначениеПараметра = ВыборкаШапка[ИмяПараметра];
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					//в договоре не указано особое наименование для печати
					Если ИмяПараметра = "ДоговорНаименованиеДляПечати" Тогда
						
						Попытка
							ДоговорКонтрагента = ВыборкаШапка["ДоговорКонтрагента"];
						Исключение 
							Продолжить;	
						КонецПопытки;

						ДоговорДата  = ДоговорКонтрагента.Дата;
						ДоговорНомер = ДоговорКонтрагента.Номер;
						
						Если ЗначениеЗаполнено(ДоговорНомер) Тогда
							//заменим название договора на его настоящий номер
							ЗначениеПараметра = "№ " + СокрП(ДоговорНомер);
						Иначе
							// названием будет наименование справочника
							ЗначениеПараметра = ДоговорКонтрагента.Наименование;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ДоговорДата) Тогда
							// добавим дату договора
							ЗначениеПараметра = ЗначениеПараметра + НСтр("ru=' от ';uk=' від '",КодЯзыка) + Формат(ДоговорДата,"ДФ=dd.MM.yyyy")
						КонецЕсли;
					Иначе					
                         Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// корректируем значение параметра в некоторых случаях
				Если    ИмяПараметра = "Сделка" 
					ИЛИ ИмяПараметра = "ДокументПередачи"
					ИЛИ ИмяПараметра = "Инвентаризация"
					ИЛИ ИмяПараметра = "Заказ" Тогда
					
					//ЗначениеПараметра = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЗначениеПараметра, ЗначениеПараметра.Ссылка.Метаданные().Представление(),КодЯзыка);
					ЗначениеПараметра = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЗначениеПараметра, Локализация.ПолучитьЛокализованныйСинонимОбъекта(ЗначениеПараметра.Ссылка, КодЯзыка),КодЯзыка);
				КонецЕсли; 
				
				Если ИмяПараметра = "АдресДоставки" Тогда
					Попытка
						ЗначениеПараметра = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(ЗначениеПараметра);
					Исключение
					КонецПопытки;
				КонецЕсли; 
				
				НазваниеПараметра = Строка(СоответствиеПараметров[ИмяПараметра]);
				Если НЕ ЗначениеЗаполнено(НазваниеПараметра) Тогда
					НазваниеПараметра = ИмяПараметра + ":";
				КонецЕсли;
				
				// корректируем название параметра в некоторых случаях	
				Если ИмяПараметра = "Сделка" Тогда		
					ДоговорВедениеВзаиморасчетов = ВыборкаШапка["ДоговорВедениеВзаиморасчетов"];
					
					Если ДоговорВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
							НазваниеПараметра = НСтр("ru='Заказ:';uk='Замовлення:'",КодЯзыка);
					ИначеЕсли ДоговорВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
							НазваниеПараметра = НСтр("ru='Счет:';uk='Рахунок:'",КодЯзыка);
					КонецЕсли;
				КонецЕсли; 

				МассивСтруктур.Добавить(Новый Структура("НазваниеПараметра,ЗначениеПараметра", 
				                                  НазваниеПараметра,
												  ЗначениеПараметра));
			Исключение
			КонецПопытки;
		КонецЕсли; 
	КонецЦикла;

	Возврат МассивСтруктур;

КонецФункции // ДополнительнаяИнформация()

// Функция возвращает информацию об ответственных лицах организации на дату среза
//
// Параметры:
//  Организация - организация, для которой нужно определить руководящих лиц.
//
Функция ОтветственныеЛица(Организация, ДатаСреза) Экспорт
	Результат = Новый Структура("Руководитель, РуководительДолжность, РуководительФИО, РуководительПредставление, 
								|ГлавныйБухгалтер, ГлавныйБухгалтерДолжность, ГлавныйБухгалтерФИО, ГлавныйБухгалтерПредставление, 
								|Кассир, КассирДолжность, КассирФИО, КассирПредставление");

	Если Организация <> Неопределено тогда

		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("ПризнакФизЛица",   Перечисления.ЮрФизЛицо.ФизЛицо);
		
		ЗапросПоЛицам.Текст = "ВЫБРАТЬ
		                      |	ФИОФизЛицСрезПоследних.Фамилия,
		                      |	ФИОФизЛицСрезПоследних.Имя,
		                      |	ФИОФизЛицСрезПоследних.Отчество,
		                      |	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизическоеЛицо
		                      |ИЗ
		                      |	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		                      |		ПО ФИОФизЛицСрезПоследних.ФизЛицо = Организации.ИндивидуальныйПредприниматель
		                      |			И (Организации.Ссылка = &Организация)
		                      |			И (Организации.ЮрФизЛицо = &ПризнакФизЛица)";
		
		Руководители = ЗапросПоЛицам.Выполнить().Выбрать();
		
		Пока Руководители.Следующий() Цикл
			
			ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление", "","","","");
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Фамилия) или Руководители.Фамилия = NULL) Тогда
				ФИО.Фамилия = Руководители.Фамилия;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Имя) или Руководители.Имя = NULL) Тогда
				ФИО.Имя = Руководители.Имя;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Отчество) или Руководители.Отчество = NULL) Тогда
				ФИО.Отчество = Руководители.Отчество;
			КонецЕсли;
			Представление = ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
			
			Результат.Руководитель               = Руководители.ФизическоеЛицо;
			Результат.РуководительДолжность      = "";
			Результат.РуководительФИО            = ФИО;
			Результат.РуководительПредставление  = Представление;
			
		КонецЦикла;
		
		ЗапросПоЛицам.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
		Руководители = ЗапросПоЛицам.Выполнить().Выбрать();

		Пока Руководители.Следующий() Цикл

			ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление", "","","","");
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Фамилия) или Руководители.Фамилия = NULL) Тогда
				ФИО.Фамилия = Руководители.Фамилия;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Имя) или Руководители.Имя = NULL) Тогда
				ФИО.Имя = Руководители.Имя;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Отчество) или Руководители.Отчество = NULL) Тогда
				ФИО.Отчество = Руководители.Отчество;
			КонецЕсли;
			Представление = ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
			
			Если Руководители.ОтветственноеЛицо      = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				Результат.Руководитель               = Руководители.ФизическоеЛицо;
				Результат.РуководительДолжность      = Руководители.Должность;
				Результат.РуководительФИО            = ФИО;
				Результат.РуководительПредставление  = Представление;

			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер           = Руководители.ФизическоеЛицо;
				Результат.ГлавныйБухгалтерДолжность  = Руководители.Должность;
                Результат.ГлавныйБухгалтерФИО        = ФИО;
				Результат.ГлавныйБухгалтерПредставление  = Представление;
				
			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
				Результат.Кассир                     = Руководители.ФизическоеЛицо;
				Результат.КассирДолжность      		 = Руководители.Должность;
                Результат.КассирФИО            		 = ФИО;
				Результат.КассирПредставление  = Представление;
				
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;









КонецФункции

Функция ОтветственныеЛицаОрганизаций(Организация, ДатаСреза, Исполнитель = Неопределено) Экспорт

	Возврат РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ДатаСреза, Исполнитель);

КонецФункции // ОтветственныеЛицаОрганизаций()


// Функция собирает сведения о 
//
// Параметры:
//  Контрагент - контрагент, для которой нужно определить руководящих лиц.
//
Функция ОтветственныеЛицаКонтрагента(Контрагент, ДатаСреза) Экспорт

	Результат = Новый Структура("Руководитель, РуководительДолжность, РуководительФИО, РуководительПредставление, 
								|ГлавныйБухгалтер, ГлавныйБухгалтерДолжность, ГлавныйБухгалтерФИО, ГлавныйБухгалтерПредставление, 
								|Кассир, КассирДолжность, КассирФИО, КассирПредставление");

	Если ЗначениеЗаполнено(Контрагент) тогда

		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.УстановитьПараметр("Контрагент", Контрагент);
		ЗапросПоЛицам.УстановитьПараметр("ПризнакФизЛица",   Перечисления.ЮрФизЛицо.ФизЛицо);
		
		ЗапросПоЛицам.Текст = "ВЫБРАТЬ
		                      |	ФИОФизЛицСрезПоследних.Фамилия,
		                      |	ФИОФизЛицСрезПоследних.Имя,
		                      |	ФИОФизЛицСрезПоследних.Отчество,
		                      |	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизическоеЛицо
		                      |ИЗ
		                      |	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &Контрагент) КАК ФИОФизЛицСрезПоследних
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		                      |		ПО ФИОФизЛицСрезПоследних.ФизЛицо = Контрагенты.Ссылка
		                      |			И (Контрагенты.ЮрФизЛицо = &ПризнакФизЛица)";
	   
		Руководители = ЗапросПоЛицам.Выполнить().Выбрать();
		
		Пока Руководители.Следующий() Цикл
			
			ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление", "", "", "", "");
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Фамилия) или Руководители.Фамилия = NULL) Тогда
				ФИО.Фамилия = Руководители.Фамилия;
			КонецЕсли;
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Имя) или Руководители.Имя = NULL) Тогда
				ФИО.Имя = Руководители.Имя;
			КонецЕсли;
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Отчество) или Руководители.Отчество = NULL) Тогда
				ФИО.Отчество = Руководители.Отчество;
			КонецЕсли;
			Представление = ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
			
			Результат.Руководитель               = Руководители.ФизическоеЛицо;
			Результат.РуководительДолжность      = "";
			Результат.РуководительФИО            = ФИО;
			Результат.РуководительПредставление  = Представление;
			
		КонецЦикла;
		
		ЗапросПоЛицам.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаКонтрагентовСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаКонтрагентовСрезПоследних.КонтактноеЛицо,
		|	ОтветственныеЛицаКонтрагентовСрезПоследних.КонтактноеЛицо.Должность КАК Должность,
		|	ОтветственныеЛицаКонтрагентовСрезПоследних.КонтактноеЛицо.КонтактноеЛицо.Фамилия КАК Фамилия,
		|	ОтветственныеЛицаКонтрагентовСрезПоследних.КонтактноеЛицо.КонтактноеЛицо.Имя КАК Имя,
		|	ОтветственныеЛицаКонтрагентовСрезПоследних.КонтактноеЛицо.КонтактноеЛицо.Отчество КАК Отчество
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаКонтрагентов.СрезПоследних(&ДатаСреза, Контрагент = &Контрагент) КАК ОтветственныеЛицаКонтрагентовСрезПоследних";
		
		Руководители = ЗапросПоЛицам.Выполнить().Выбрать();

		Пока Руководители.Следующий() Цикл

			ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление", "", "", "", "");
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Фамилия) или Руководители.Фамилия = NULL) Тогда
				ФИО.Фамилия = Руководители.Фамилия;
			КонецЕсли;
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Имя) или Руководители.Имя = NULL) Тогда
				ФИО.Имя = Руководители.Имя;
			КонецЕсли;
			Если НЕ ( НЕ ЗначениеЗаполнено(Руководители.Отчество) или Руководители.Отчество = NULL) Тогда
				ФИО.Отчество = Руководители.Отчество;
			КонецЕсли;
			Представление = ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
			
			Если Руководители.ОтветственноеЛицо      = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				Результат.Руководитель               = Руководители.КонтактноеЛицо;
				Результат.РуководительДолжность      = Руководители.Должность;
				Результат.РуководительФИО            = ФИО;
				Результат.РуководительПредставление  = Представление;

			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер           = Руководители.КонтактноеЛицо;
				Результат.ГлавныйБухгалтерДолжность  = Руководители.Должность;
                Результат.ГлавныйБухгалтерФИО        = ФИО;
				Результат.ГлавныйБухгалтерПредставление  = Представление;
				
			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
				Результат.Кассир                     = Руководители.КонтактноеЛицо;
				Результат.КассирДолжность      		 = Руководители.Должность;
                Результат.КассирФИО            		 = ФИО;
				Результат.КассирПредставление  = Представление;
				
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции


// Функция формирует фамилию и инициалы
//
// Параметры
//  Фамилия  - фамилия физ. лица.
//  Имя      - имя физ. лица.
//  Отчество - отчество физ. лица.
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица включает фамилию и инициалы, если Ложь - фамилию и полностью имя и отчество
//
// Возвращаемое значение 
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт
	Возврат ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(Фамилия, Имя ,Отчество, ФИОКратко);
КонецФункции // ПолучитьФамилиюИмяОтчество()

// Функция возвращает информацию об ответственных лицах обособленного подразделения организации и их должностях 
//
// Параметры:
//  ОбособленноеПодразделениеОрганизации - обособленное подразделение организации, для которого нужно определить руководящих лиц.
//  ДатаСреза - дата, на которую определяются руководящие лица
//
Функция ОтветственныеЛицаОбособленногоПодразделения(ОбособленноеПодразделениеОрганизации, ДатаСреза) Экспорт

	Результат = Новый Структура("Руководитель, РуководительДолжность, РуководительФИО, РуководительПредставление, 
								|ГлавныйБухгалтер, ГлавныйБухгалтерФИО, ГлавныйБухгалтерПредставление, 
								|Кассир, КассирФИО, КассирПредставление");

	Если ОбособленноеПодразделениеОрганизации <> Неопределено тогда

		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.УстановитьПараметр("ОбособленноеПодразделениеОрганизации", ОбособленноеПодразделениеОрганизации);
		
		ЗапросПоЛицам.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &ОбособленноеПодразделениеОрганизации) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
		
		Руководители = ЗапросПоЛицам.Выполнить().Выбрать();

		Пока Руководители.Следующий() Цикл

			ФИО = Новый Структура("Фамилия, Имя, Отчество, Представление", "", "", "", "");
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Фамилия) ИЛИ Руководители.Фамилия = NULL) Тогда
				ФИО.Фамилия = Руководители.Фамилия;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Имя) ИЛИ Руководители.Имя = NULL) Тогда
				ФИО.Имя = Руководители.Имя;
			КонецЕсли;
			Если НЕ (НЕ ЗначениеЗаполнено(Руководители.Отчество) ИЛИ Руководители.Отчество = NULL) Тогда
				ФИО.Отчество = Руководители.Отчество;
			КонецЕсли;
			
			Представление = ПолучитьФамилиюИмяОтчество(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
			
			Если Руководители.ОтветственноеЛицо      = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				
				Результат.Руководитель               = Руководители.ФизическоеЛицо;
				Результат.РуководительДолжность      = Руководители.Должность;
				Результат.РуководительФИО            = ФИО;
				Результат.РуководительПредставление  = Представление;

			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				
				Результат.ГлавныйБухгалтер           = Руководители.ФизическоеЛицо;
                Результат.ГлавныйБухгалтерФИО        = ФИО;
				Результат.ГлавныйБухгалтерПредставление  = Представление;
				
			ИначеЕсли Руководители.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
				
				Результат.Кассир                     = Руководители.ФизическоеЛицо;
                Результат.КассирФИО            		 = ФИО;
				Результат.КассирПредставление  = Представление;
				
			КонецЕсли;

		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(Результат.Кассир) ИЛИ НЕ ЗначениеЗаполнено(Результат.ГлавныйБухгалтер) ИЛИ НЕ ЗначениеЗаполнено(Результат.Руководитель) Тогда
			// Если что-то не заполнено по обособленному подразделению - берем из информации по организации
			Руководители = ОтветственныеЛица(ОбособленноеПодразделениеОрганизации.Владелец, ДатаСреза);
			
			Если НЕ ЗначениеЗаполнено(Результат.Руководитель) Тогда
				
				Результат.Руководитель               = Руководители.Руководитель;
				Результат.РуководительДолжность      = Руководители.РуководительДолжность;
				Результат.РуководительФИО            = Руководители.РуководительФИО;
				Результат.РуководительПредставление  = Руководители.РуководительПредставление;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Результат.ГлавныйБухгалтер) Тогда
				
				Результат.ГлавныйБухгалтер           = Руководители.ГлавныйБухгалтер;
                Результат.ГлавныйБухгалтерФИО        = Руководители.ГлавныйБухгалтерФИО;
				Результат.ГлавныйБухгалтерПредставление  = Руководители.ГлавныйБухгалтерПредставление;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Результат.Кассир) Тогда
				
				Результат.Кассир                     = Руководители.Кассир;
                Результат.КассирФИО            		 = Руководители.КассирФИО;
				Результат.КассирПредставление  		 = Руководители.КассирПредставление;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции


// Функция разбивает строку на символы и помещает их в структуру
//
// Параметры
// 	СтрокаСимволов – Тип: Строка или преобразуемый к ней – Строка, которую нужно разбить
//                 
//  ИмяКлючей      – Тип: Строка – Наименование ключей структуры.
//                                 Например: 
//                                 "ИНН" - функция вернет структуру ИНН1...ИНН<КоличествоСимволов>
//                 
//
// Возвращаемое значение:
//   Тип: Структура – с наименованием ключей <ИмяКлючей> + <НомерСимвола>   
//                    и значениями символов строки
//
Функция РазбитьСтрокуНаСимволы(Знач СтрокаСимволов, ИмяКлючей) Экспорт
	
	СтруктураСимволов = Новый Структура;
	
	Попытка
		СтрокаСимволов = Строка(СтрокаСимволов)
	Исключение
		Возврат СтруктураСимволов
	КонецПопытки;

	Для Н = 1 По СтрДлина(СтрокаСимволов) Цикл
		СтруктураСимволов.Вставить(ИмяКлючей + Н, Сред(СтрокаСимволов, Н, 1));		
	КонецЦикла;
	
	Возврат СтруктураСимволов

КонецФункции // РазбитьСтрокуНаСимволы()

#КонецЕсли