
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// ЗагрузитьКомпонентуAPPlus()
//
// Параметры:
//   КПКОбъект - переменная, куда следует поместить
//               загруженный объект компоненты
// Описание:
//   Загружает внешнюю компоненту ПО Агент Плюс
//   
Функция ЗагрузитьКомпонентуAPPlus(КПКОбъект) Экспорт
	
	Результат = Ложь;
	
	#Если Клиент Тогда
		ИмяФайлаКомп = "APPlus.dll";
		
		ПутьКФайлу = КаталогПрограммы() + ИмяФайлаКомп;
		
		ФайлКомпонентыНаДиске = Новый Файл(ПутьКФайлу);
		
		Если ФайлКомпонентыНаДиске.Существует() Тогда
			Попытка   		
				// Если библиотека находится в каталоге запуска 1С
				ЗагрузитьВнешнююКомпоненту("APPlus.dll"); 
				КПКОбъект = Новый("AddIn.CeDataExch");	
				Результат = КПКОбъект.CeGuestOnly(-1);
				
				Если Результат <> 1 Тогда                                     
					КПКОбъект.CeGuestOnly(1);            
				КонецЕсли;
				
				Результат = Истина; 		
			Исключение   		
				Сообщить("Не удалось загрузить компоненту " + ИмяФайлаКомп + "!", СтатусСообщения.Важное);					
				Сообщить("1. Проверьте, все ли файлы компоненты скопированы в каталог " + КаталогПрограммы(), СтатусСообщения.Внимание);
				Сообщить("2. Проверьте, не установлен ли на компьютере Firewall, блокирующий загрузку компоненты!", СтатусСообщения.Внимание);
				Результат = Ложь;          		
			КонецПопытки;   
			
		Иначе  		
			Сообщить("Компонента " + ИмяФайлаКомп + " не найдена. Скопируйте файлы " + 
			"компоненты в каталог " + КаталогПрограммы(), СтатусСообщения.Важное);		
		КонецЕсли;
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьКомпонентуAPPlus()

// Функция возвращает название дня недели
//
Функция ДеньНеделиСтр(НомерДня) Экспорт
	Если НомерДня = 1 Тогда
	    Возврат "пн";
	ИначеЕсли НомерДня = 2 Тогда
		Возврат "вт";
	ИначеЕсли НомерДня = 3 Тогда
		Возврат "ср";		
	ИначеЕсли НомерДня = 4 Тогда
		Возврат "чт";
	ИначеЕсли НомерДня = 5 Тогда
		Возврат "пт";
	ИначеЕсли НомерДня = 6 Тогда
		Возврат "СБ";
	Иначе
		Возврат "ВС";
	КонецЕсли;
КонецФункции //ДеньНеделиСтр

// Возвращает код состояния (статуса) документа: 1 - проведен, 2 - записан, 3 - помечен на удаление
//
Функция АПВернутьСостояниеДок(Док) экспорт
	Если Док.Проведен Тогда
		Возврат 1;
	ИначеЕсли Док.ПометкаУдаления Тогда
		Возврат 3;
	Иначе
		Возврат 2;
	КонецЕсли;
КонецФункции // ВернутьСостояниеДок()

// АПЗаполнитьСписКомандКПК(Спис)
//
// Параметры: 
//  Спис - список значений для возврата результата
//
// Описание:
//  Заполняет список команд для КПК
//
Процедура АПЗаполнитьСписКомандКПК(Спис) Экспорт
	
	Спис.Очистить();	
	Спис.Добавить("DeleteOldDocuments", "Удалить документы (только подтвержденные)");
	Спис.Добавить("DeleteAllDocuments", "Удалить документы (все)"); 
	Спис.Добавить("DeleteDocument",     "Удалить документ");   	
	Спис.Добавить("DeleteOldPhotos",    "Удалить фотографии (только подтвержденные)");
	Спис.Добавить("DeleteAllPhotos", 	"Удалить фотографии (все)");	
	Спис.Добавить("DeleteOldMessages",  "Удалить все сообщения");
	Спис.Добавить("DeleteMessage", 	    "Удалить сообщение");	
	Спис.Добавить("Message", 			"Сообщение");
	Спис.Добавить("ShowMsgWnd", 	    "Показывать окно сообщений");	
		
КонецПроцедуры // глАПЗаполнитьСписКомандКПК()

// АПСоздатьИдентификатор()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Идентификатор (строка GUID)
//
// Описание:
//  Возвращает новый Идентификатор (GUID)
//
Функция АПСоздатьИдентификатор() Экспорт 
	Возврат СокрЛП(Новый УникальныйИдентификатор);
КонецФункции //глАПСоздатьИдентификатор()

// Преобразование времени в виде строк в три числа Ч М и С
//
Процедура ЧМС(Время, Ч, М, С) Экспорт
    Ч = Число(Лев(Время, 2));
	М = Число(Сред(Время, 4, 2));
	С = Число(Прав(Время, 2));
КонецПроцедуры //ЧМС()

// Функция, обратная ЧМС
//
Функция ЧМСвСтроку(Ч, М, С) Экспорт
    Возврат Прав("0"+Строка(Ч),2)+":"+Прав("0"+Строка(М),2)+":"+Прав("0"+Строка(С),2);
КонецФункции //ЧМСвСтроку()
  
// Функция увеличивает время, переданное в виде строки на величину, переданную в виде "ЧЧ:ММ:СС"
// и возвращает результат в том же виде
//
Функция УвеличитьВремяСтр(Время,УвНаВремя) Экспорт
	Перем Ч, М, С, УвЧ, УвМ, УвС;
	
	ЧМС(Время,Ч,М,С);
	ЧМС(УвНаВремя,УвЧ,УвМ,УвС);
	УвеличитьВремя(Ч,М,С,УвЧ,УвМ,УвС);
	
	Возврат ЧМСвСтроку(Ч,М,С);
КонецФункции //УвеличитьВремяСтр()

// Возвращает текущее время 
//
Функция ТекущееВремя() Экспорт
	Возврат Строка(Формат(ТекущаяДата(), "ДФ=""ЧЧ:мм:сс"""));
КонецФункции //ТекущееВремя()

// Функция получает код агента 
//
Функция АППочтаПолучитьКодАгента(Тема) Экспорт
	
	Поз = Найти(Тема, "AgentID=");
	Если Поз = 0 Тогда
	    Возврат "";
	КонецЕсли;
	КодАгента = СокрЛП(Сред(Тема, Поз + 8, 36));
	Поз = Найти(КодАгента," ");
	Если Поз = 0 Тогда
	    Возврат КодАгента;
	Иначе
		Возврат Лев(КодАгента,Поз-1);
	КонецЕсли;
	
КонецФункции // ПочтаПолучитьКодАгента()

// Функция производит преобразование переменной строкового значения в десятичный формат
//
Функция ПреобразованиеБайтаВДесятичный(стрБайт) Экспорт
	Перем Симв1, Симв2;
	
	Симв1 = КодСимвола(стрБайт, 1);
	Симв2 = КодСимвола(стрБайт, 2);
	
	Если Симв1 <= 57 Тогда
		Результат = (Симв1 - 48) * 16;
	Иначе
		Результат = (Симв1 - 55) * 16;
	КонецЕсли;
	
	Если Симв2 <= 57 Тогда
		Результат = Результат + (Симв2 - 48);
	Иначе
		Результат = Результат + (Симв2 - 55);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции //ПреобразованиеБайтаВДесятичный()

// Функция производит преобразование цвета из RGB-формата в 
// шестнадцатиричную систему исличсления
//
// Параметры: 
//  НужныйЦвет - Цвет; цвет, который нужно преобразовать
//
// Возвращаемое значение:
//  Строка
//  
Функция ПолучитьЦветИзШестнадцатиричнойСистемы(СтрокаЦвета) Экспорт
	
	Красный = Лев(СтрокаЦвета, 2);
	Зеленый = Сред(СтрокаЦвета, 3, 2);
	Синий   = Прав(СтрокаЦвета, 2);
	
	СписокСимволов = Новый СписокЗначений;
	
	СписокСимволов.Добавить("A", "10"); 
	СписокСимволов.Добавить("B", "11"); 
	СписокСимволов.Добавить("C", "12"); 
	СписокСимволов.Добавить("D", "13"); 
	СписокСимволов.Добавить("E", "14"); 
	СписокСимволов.Добавить("F", "15"); 
	
	ЧислоКрасного = ПреобразоватьЧислоИзШестнадцатиричнойСистемыВДесятичное(Красный, СписокСимволов);
	ЧислоЗеленого = ПреобразоватьЧислоИзШестнадцатиричнойСистемыВДесятичное(Зеленый, СписокСимволов);
	ЧислоСинего   = ПреобразоватьЧислоИзШестнадцатиричнойСистемыВДесятичное(Синий,   СписокСимволов);
	
	НужныйЦвет = Новый Цвет(ЧислоКрасного, ЧислоЗеленого, ЧислоСинего);
	
	Возврат НужныйЦвет;	
	
КонецФункции //ПолучитьЦветИзШестнадцатиричнойСистемы

// Функция производит преобразование числа из шестнадцатиричную системы в десятичную
//
Функция ПреобразоватьЧислоИзШестнадцатиричнойСистемыВДесятичное(НужноеЧисло, СписокСимволов) Экспорт
			
	НачСимв  = Лев(НужноеЧисло, 1);
	ПослСимв = Прав(НужноеЧисло, 1);
	
	ЦелЧасть = 0;
	// Целая часть
	ТекЗнач = СписокСимволов.НайтиПоЗначению(НачСимв);
	Если ТекЗнач <> Неопределено Тогда
    	ЦелЧасть = Число(ТекЗнач.Представление); 		
	Иначе
		ЦелЧасть = Число(НачСимв);   		
	КонецЕсли;
		
	Ост = 0;
	// Остаток
	ТекЗнач = СписокСимволов.НайтиПоЗначению(ПослСимв); 
	Если ТекЗнач <> Неопределено Тогда
    	Ост = Число(ТекЗнач.Представление);
	Иначе
		Ост = Число(ПослСимв);
	КонецЕсли;
	
	Возврат ЦелЧасть*16 + Ост;
	
КонецФункции //ПреобразоватьЧислоИзШестнадцатиричнойСистемыВДесятичное()

// Функция преобразовывает переданный цвет в абосютное значение цвета
// Внимание! Данная фукнция может давать погрешность цвета, вызванную
// неоптимальными механизмами платформы 1С: Предприятия
//
Функция ПреобразоватьЦветВАбсолютный(лЦвет) Экспорт
	
	Если ТипЗнч(лЦвет) <> Тип("Цвет") тогда
		Возврат "0,0,0";	
	КонецЕсли;
	
	Таб = Новый ТабличныйДокумент;
	Таб.Вывод = ИспользованиеВывода.Разрешить;
	Таб.Область("R1C1").ЦветТекста = лЦвет;	 
	Таб.Записать(КаталогВременныхФайлов() + "ConvertColor.mxl", ТипФайлаТабличногоДокумента.MXL7); 
	Таб.Прочитать(КаталогВременныхФайлов() + "ConvertColor.mxl");
	
	Возврат Таб.Область("R1C1").ЦветТекста;
	
КонецФункции //ПреобразоватьЦветВАбсолютный()

// Функция производит преобразование цвета из RGB-формата в 
// шестнадцатиричную систему исличсления
//
// Параметры: 
//  НужныйЦвет - Цвет; цвет, который нужно преобразовать
//
// Возвращаемое значение:
//  Строка
//  
Функция ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему(НужныйЦвет, ВозвратRGBСтроки = Ложь) Экспорт
	
	Если НужныйЦвет = Неопределено Тогда
		Возврат ?(ВозвратRGBСтроки, "", 0);
	КонецЕсли;
	
	Если НужныйЦвет.Вид <> ВидЦвета.Абсолютный Тогда
		НужныйЦвет = ПреобразоватьЦветВАбсолютный(НужныйЦвет);
	КонецЕсли;	
		
	Красный = НужныйЦвет.Красный;
	Зеленый = НужныйЦвет.Зеленый;
	Синий   = НужныйЦвет.Синий;
	
	Если ВозвратRGBСтроки Тогда
		ЗначЦвета = Строка(Красный) + "," + Строка(Зеленый) + "," + Строка(Синий);
		Возврат ЗначЦвета;	
	КонецЕсли;
	
	ЧислоКрасного = ПреобразованиеИзДесятичнойСистемыВШестнадцатиричную(Красный);
	ЧислоЗеленого = ПреобразованиеИзДесятичнойСистемыВШестнадцатиричную(Зеленый);
	ЧислоСинего   = ПреобразованиеИзДесятичнойСистемыВШестнадцатиричную(Синий);
	
	ЗначЦвета = ЧислоКрасного + ЧислоЗеленого + ЧислоСинего;
	
	Возврат ЗначЦвета;	
	
КонецФункции //ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему

// Функция производит преобразование числа из десятичной системы в шестнадцатиричную
//
Функция ПреобразованиеИзДесятичнойСистемыВШестнадцатиричную(НужноеЧисло) Экспорт
	
	СписокСимволов = Новый СписокЗначений;
	
	СписокСимволов.Добавить("10", "A"); 
	СписокСимволов.Добавить("11", "B"); 
	СписокСимволов.Добавить("12", "C"); 
	СписокСимволов.Добавить("13", "D"); 
	СписокСимволов.Добавить("14", "E"); 
	СписокСимволов.Добавить("15", "F"); 
		
	ЦелЧасть = Цел(НужноеЧисло/16);
	Ост = НужноеЧисло - ЦелЧасть*16;
	
	Рез = "";
	// Целая часть
	ТекЗнач = СписокСимволов.НайтиПоЗначению(Строка(ЦелЧасть));
	Если ТекЗнач <> Неопределено Тогда
    	Рез = ТекЗнач.Представление; 		
	Иначе
		Рез = Строка(ЦелЧасть);   		
	КонецЕсли;
	
	// Остаток
	ТекЗнач = СписокСимволов.НайтиПоЗначению(Строка(Ост)); 
	Если ТекЗнач <> Неопределено Тогда
    	Рез = Рез + ТекЗнач.Представление;
	Иначе
		Рез = Рез + Строка(Ост);
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции //ПреобразованиеИзДесятичнойСистемыВШестнадцатиричную()

// Процедура увеличивает время на указанную величину
//
Процедура УвеличитьВремя(Ч, М, С, УвЧ, УвМ, УвС)
	Ч = Ч + УвЧ; 
	М = М + УвМ;
	С = С + УвС;
	
	М = М + Цел(С/60); 
	С = С - Цел(С/60)*60;
	Ч = Ч + Цел(М/60); 
	М = М - Цел(М/60)*60;
	
	Если Ч > 23 Тогда
	    Ч = 0;
	КонецЕсли;
КонецПроцедуры //УвеличитьВремя()

// Управляет видимостью поля и колонки "Торговая точка"  на форме в зависимости 
// от текущего режима использования торговых точек
//
Процедура НастроитьВидимостьДляТоргТочки(Форма) Экспорт
	
	ЭлФормы = Форма.ЭлементыФормы;
	
	Если Константы.кпкРежимТоргТочек.Получить() = 1 Тогда
		
		Если ЭлФормы.Найти("кпкТорговаяТочка") <> Неопределено Тогда
			ЭлФормы.НадписькпкТорговаяТочка.Видимость  = Истина;	
			ЭлФормы.кпкТорговаяТочка.Видимость         = Истина;
		ИначеЕсли ЭлФормы.Найти("ТорговаяТочка") <> Неопределено Тогда
			ЭлФормы.НадписьТорговаяТочка.Доступность   = Истина;	
			ЭлФормы.ТорговаяТочка.Доступность 		   = Истина;
		КонецЕсли;
		
		Если ЭлФормы.Найти("ДокументСписок") <> Неопределено 
			и ЭлФормы.ДокументСписок.Колонки.Найти("ТорговаяТочка")<>Неопределено Тогда 			 
			ЭлФормы.ДокументСписок.Колонки.ТорговаяТочка.Видимость = Истина;					
		ИначеЕсли ЭлФормы.Найти("ДокументСписок") <> Неопределено 
			и ЭлФормы.ДокументСписок.Колонки.Найти("кпкТорговаяТочка")<>Неопределено Тогда 			 
			ЭлФормы.ДокументСписок.Колонки.кпкТорговаяТочка.Видимость = Истина;					
		КонецЕсли;
			
	Иначе
		
		Если ЭлФормы.Найти("кпкТорговаяТочка") <> Неопределено Тогда
			ЭлФормы.НадписькпкТорговаяТочка.Видимость  = Ложь;	
			ЭлФормы.кпкТорговаяТочка.Видимость         = Ложь;
		ИначеЕсли ЭлФормы.Найти("ТорговаяТочка") <> Неопределено Тогда
			ЭлФормы.НадписьТорговаяТочка.Доступность   = Ложь;	
			ЭлФормы.ТорговаяТочка.Доступность 		   = Ложь;
		КонецЕсли;
		
		Если ЭлФормы.Найти("ДокументСписок") <> Неопределено 
			и ЭлФормы.ДокументСписок.Колонки.Найти("ТорговаяТочка")<>Неопределено Тогда 			 
			ЭлФормы.ДокументСписок.Колонки.ТорговаяТочка.Видимость = Ложь;					
		ИначеЕсли ЭлФормы.Найти("ДокументСписок") <> Неопределено 
			и ЭлФормы.ДокументСписок.Колонки.Найти("кпкТорговаяТочка")<>Неопределено Тогда 			 
			ЭлФормы.ДокументСписок.Колонки.кпкТорговаяТочка.Видимость = Ложь;					
		КонецЕсли;
 		
	КонецЕсли;
	
КонецПроцедуры //НастроитьВидимостьДляТоргТочки()

//Функция предназначена для преобразования фрагмента обычного текста в HTML формат
//
Функция ПреобразоватьФрагментТекстаВHTML(Текст) Экспорт
	
	Результат = "";
	Результат = СтрЗаменить(Текст, "<" , "&lt");
	Результат = СтрЗаменить(Результат, ">" , "&gt");
	Результат = СтрЗаменить(Результат, Символы.ПС, "<BR>");
	Результат = "<P>" + Результат + "</P>";
	
	Возврат Результат;
	
КонецФункции

// Функция предназначена для преобразования обычного текста в HTML формат
// Параметры:
//	Текст     - Строка - текст, преобразуемый в HTML-формат;
//	Кодировка - Строка - кодировка письма; 
//
Функция ПреобразоватьТекстВHTML(Текст) Экспорт
	
	Результат = ПреобразоватьФрагментТекстаВHTML(Текст);
	
	ФорматХТМЛ = "<HTML><HEAD>
	|<META http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8""" + ">
	|<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
	|<BODY>" + Результат + "</BODY></HTML>";
	
	Возврат ФорматХТМЛ;

КонецФункции

// Функция предназначена для упрощения текста в HTML формате
// путем отсечения заголовочных тегов 
// Параметры:
//	Текст     - Строка - текст, который следует упростить;
// Возвращаемое значение:
//  Строка
//
Функция УпроститьТекстВФорматеHTML(Текст) Экспорт
	
	Результат = СтрЗаменить(Текст, "<HTML>" ,  "");
	Результат = СтрЗаменить(Результат, "</HTML>" , "");
	Результат = СтрЗаменить(Результат, "<BODY>" ,  "");
	Результат = СтрЗаменить(Результат, "</BODY>" , "");
	Результат = СтрЗаменить(Результат, "<HEAD>" ,  "");
	Результат = СтрЗаменить(Результат, "</HEAD>" , "");
	Результат = СтрЗаменить(Результат, "<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" , "");	
	Результат = СтрЗаменить(Результат, "<META content=""MSHTML 6.00.2900.2853"" name=GENERATOR>" , "");
	Результат = СокрЛП(СтрЗаменить(Результат, Символы.ПС, ""));
		
	Возврат Результат;
	
КонецФункции

// Функция формирует из строки список значений с элементами строки
//
// Параметры:
//  прСтрока - строка, которую нужно преобразовать в список
//  прРаздел - символ, по которому разделяются элементы в строке
//
//Возвращаемое значение:
//  СписокЗначений
//
// Добавлена 14.06.2007
//    
Функция ИзСтрокиВСписок(Знач прСтрока, прРаздел = ",") Экспорт
	
	Перем лкВозврат, лкПоз;
	
	лкВозврат = Новый СписокЗначений;
	
	Пока Не(ПустаяСтрока(прСтрока)) Цикл
		лкПоз = Найти(прСтрока,прРаздел);
		Если (лкПоз > 0) Тогда
			лкВозврат.Добавить(Лев(прСтрока,лкПоз - 1));
			прСтрока = Сред(прСтрока,лкПоз + СтрДлина(прРаздел));
		Иначе
			лкВозврат.Добавить(прСтрока);
			прСтрока="";
		КонецЕсли;
	КонецЦикла;

	Возврат(лкВозврат);
	
КонецФункции //ИзСтрокиВСписок()

// Формирует строку со списком документов в формате для ПО Агент Плюс
// из переданной строки со списком документов с разделителями
//
Функция СформироватьСтрокуСпискаДокументов(СтрокаДокументов) Экспорт
	
	СписокДокументов = кпкАгентПлюс.ИзСтрокиВСписок(СтрокаДокументов);
	
	СоответствиеДок = Новый Соответствие;
	СоответствиеДок.Вставить("Задание агента", 				  	 "Task");
	СоответствиеДок.Вставить("Заказ покупателя", 	   		     "Order");
	СоответствиеДок.Вставить("Реализация товаров и услуг", 		 "Sale");
	СоответствиеДок.Вставить("Отчет о розничных продажах", 	 	 "RSale");
	СоответствиеДок.Вставить("Касса", 							 "Cash");
	СоответствиеДок.Вставить("Мерчендайзинг", 					 "Merch");
	СоответствиеДок.Вставить("Посещение", 				    	 "Visit");
	СоответствиеДок.Вставить("Поступление товаров и услуг",  	 "Arrival");
	СоответствиеДок.Вставить("Перемещение товаров",			     "Move");
	СоответствиеДок.Вставить("Инвентаризация товаров на складе", "Inventory");
	
	СтрВидДок = "";
	Для Каждого СтрокаСписка Из СписокДокументов Цикл
		СтрВидДок = СтрВидДок + СоответствиеДок.Получить(СтрокаСписка.Значение) + ","; 		
	КонецЦикла;
	
	// Убираем последнюю запятую
	СтрВидДок = Лев(СтрВидДок, СтрДлина(СтрВидДок)-1);
	
	Возврат СтрВидДок;

КонецФункции //СформироватьСтрокуСпискаДокументов()

// Функция ДатаВремяВФорматXMLИз1С
//
// Параметры: 
//  лДатаВремя - дата, которую нужно преобразовать
//  Тип 	   - тип даты которую нужно преобразовать, "Дата", "Время" или "ДатаВремя"
//
// Описание:
//  Функция производит преобразование даты из формата 1С в формат xml
//
// Возвращаемое значение:
//  Строка
// 
Функция ДатаВремяВФорматXMLИз1С(лДатаВремя = Неопределено, Тип = "ДатаВремя") Экспорт
	
	ДатаВремя = ?(лДатаВремя = Неопределено, ТекущаяДата(), лДатаВремя);
	
	Если Тип = "Дата" Тогда		
		НужнаяДата = Формат(ДатаВремя, "ДФ=""гггг-ММ-дд""");
	ИначеЕсли Тип = "Время" Тогда	
		НужнаяДата = Формат(ДатаВремя, "ДФ=""ЧЧ-мм-сс""");
	Иначе
		НужнаяДата = Формат(ДатаВремя, "ДФ=""гггг-ММ-дд ЧЧ-мм-сс""");
	КонецЕсли;
	
	Возврат НужнаяДата;
	
КонецФункции //ДатаВремяВФорматXMLИз1С()  

// Функция ДатаВремяВФорматXMLИз1СМТ
//
// Параметры: 
//  лДатаВремя - дата, которую нужно преобразовать
//  Тип 	   - тип даты которую нужно преобразовать, "Дата", "Время" или "ДатаВремя"
//
// Описание:
//  Функция производит преобразование даты из формата 1С в формат xml (для приложения "Агент Плюс: Мобильная торговля")
//
// Возвращаемое значение:
//  Строка
//   
Функция ДатаВремяВФорматXMLИз1СМТ(лДатаВремя = Неопределено, Тип = "ДатаВремя") Экспорт
	
	ДатаВремя = ?(лДатаВремя = Неопределено, ТекущаяДата(), лДатаВремя);
		
	НужнаяДата = Формат(ДатаВремя, "ДФ=""гггг-ММ-дд""");
	
	НужноеВремя = Формат(ДатаВремя, "ДФ=""ЧЧ:мм:сс""");
	
	Если Тип = "Дата" Тогда		
		НужноеЗначение = НужнаяДата;
	ИначеЕсли Тип = "Время" Тогда			
		НужноеЗначение = НужноеВремя;
	Иначе	
		Если ПустаяСтрока(НужнаяДата) или  ПустаяСтрока(НужноеВремя) Тогда
			Возврат "";
		КонецЕсли;	
		НужноеЗначение = НужнаяДата + "T" + НужноеВремя;
	КонецЕсли;
	
	Возврат НужноеЗначение;
	
КонецФункции //ДатаВремяВФорматXMLИз1СМТ()  

// Функция ФорматироватьЧисло
//
// Параметры: 
//  ТекЗнач - число, которое нужно отформатировать
//
// Описание:
//  Функция производит форматирование числового значения
//
// Возвращаемое значение:
//  Строка
// 
Функция ФорматироватьЧисло(ТекЗнач) Экспорт  	
	
	Если ТекЗнач = 0 Тогда
		Возврат "0";
	Иначе
		Возврат Строка(Формат(ТекЗнач, "ЧГ=0; ЧРД='.'"));
	КонецЕсли;
	
КонецФункции //ФорматироватьЧисло()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, КОТОРЫЕ ИСПОЛЬЗУЮТСЯ ПРИ ОБНОВЛЕНИИ ИНФОРМАЦИОННОЙ БАЗЫ

// Процедура зполняет список шаблонов для команд.
// Используется при переходе на версию 10.3.10
Процедура ЗаполнитьШаблоныКоманд() Экспорт
	
	// Команды для обмена через Агент+ Сервер
	/////////////////////////////////////////
	
	// Команда запуска обработки "кпкОбменДанными" с 
	// признаком автообмена с Агент+ Сервером   	
	СпрОбъект = Справочники.кпкШаблоныКоманд.АвтообменСАгентСервером.ПолучитьОбъект();
	СпрОбъект.ТекстКоманды = 	
	
	"ФормаОбработки = Обработки.кпкОбменДанными.ПолучитьФорму(""Форма"", , ""Автообмен""); 	
	|ФормаОбработки.Открыть();   	
	|ФормаОбработки.флАвтоОбмен  = Истина;   
	|ФормаОбработки.СпособОбмена = 2;   		
	|ФормаОбработки.Открыть();";   	
	
	СпрОбъект.Записать();

	// Команда отправки данных всем агентам через Агент Плюс СОД
	СпрОбъект = Справочники.кпкШаблоныКоманд.ОтправкаДанныхПоАгентСерверу.ПолучитьОбъект();
	СпрОбъект.ТекстКоманды =		
	"ОбработкаОбмена = Обработки.кпкОбменДанными.Создать();
	|ОбработкаОбмена.СпособОбмена = 2;
	|ОбработкаОбмена.ВидВыгрузки  = 1;
	|ОбработкаОбмена.УстановитьНастройкиПоУмолчанию();
	|ТаблицаАгентов = кпкАгентПлюс.ПолучитьТаблицуТорговыхАгентов();
	|ОбработкаОбмена.ОповеститьОСобытии(""Начало выгрузки данных на Агент Плюс СОД..."", СтатусСообщения.Информация);
	|Для Каждого СтрокаТаб Из ТаблицаАгентов Цикл
	|	ОбработкаОбмена.ВыбАгент = СтрокаТаб.Агент;	
	|	ОбработкаОбмена.ВыгрузитьДанные();
	|	ОбработкаОбмена.ОповеститьОСобытии(""Выгрузка данных для агента "" + СтрокаТаб.Агент + "" окончена."", СтатусСообщения.Информация);
	|КонецЦикла;
	|ОбработкаОбмена.ОповеститьОСобытии(""Выгрузка данных на Агент Плюс СОД окончена."", СтатусСообщения.Информация);
	|ОбработкаОбмена.СохранитьТаблицуЛогаВНастройкахПользователя();";
	
	СпрОбъект.Записать();
	
	// Команда приема данных от всех агентам через Агент Плюс СОД
	СпрОбъект = Справочники.кпкШаблоныКоманд.ПриемДанныхПоАгентСерверу.ПолучитьОбъект();
	СпрОбъект.ТекстКоманды =	
	"ОбработкаОбмена = Обработки.кпкОбменДанными.Создать(); 		
	|ОбработкаОбмена.СпособОбмена = 2;
	|ОбработкаОбмена.ВидВыгрузки  = 1;
	|ОбработкаОбмена.УстановитьНастройкиПоУмолчанию();	
	|ОбработкаОбмена.ЗаполнитьТаблицуАПС();
	|ОбработкаОбмена.ОповеститьОСобытии(""Начало загрузки данных от Агент Плюс СОД..."", СтатусСообщения.Информация);
	|Для Каждого СтрокаТаб Из ОбработкаОбмена.ТабАПСервер Цикл
	|	ОбработкаОбмена.ВыбАгент = СтрокаТаб.Агент;
	|	ОбработкаОбмена.ПриИзмененииАгента(СтрокаТаб.Агент);
	|	ОбработкаОбмена.ЗагрузитьДанныеСАПСервера(""ОтветитьНаЗапрос"");
	|	ОбработкаОбмена.ОповеститьОСобытии(""Загрузка данных от агента "" + СтрокаТаб.Агент + "" окончена."", СтатусСообщения.Информация);
	|КонецЦикла;
	|ОбработкаОбмена.ОповеститьОСобытии(""Загрузка данных от Агент Плюс СОД окончена."", СтатусСообщения.Информация);
	|ОбработкаОбмена.СохранитьТаблицуЛогаВНастройкахПользователя();";
	
	СпрОбъект.Записать();
	
	/////////////////////////////////////////
	///////////////////////////////////////// 	
	
    // Команды для обмена через ФТП-Сервер
	/////////////////////////////////////////

	// Команда отправки данных всем агентам через ФТП-Сервер 
	СпрОбъект = Справочники.кпкШаблоныКоманд.ОтправкаДанныхПоФТП.ПолучитьОбъект();
	СпрОбъект.ТекстКоманды =		
	"ОбработкаОбмена = Обработки.кпкОбменДанными.Создать();
	|ОбработкаОбмена.ВидВыгрузки  = 1;
	|ОбработкаОбмена.СпособОбмена = 3;
	|ОбработкаОбмена.УстановитьНастройкиПоУмолчанию();
	|ТаблицаАгентов = кпкАгентПлюс.ПолучитьТаблицуТорговыхАгентов();
	|ОбработкаОбмена.ОповеститьОСобытии(""Начало выгрузки данных на FTP-сервер..."", СтатусСообщения.Информация);
	|Для Каждого СтрокаТаб Из ТаблицаАгентов Цикл
	|	ОбработкаОбмена.ВыбАгент = СтрокаТаб.Агент;
	|	ОбработкаОбмена.ВыгрузитьДанные();
	|	ОбработкаОбмена.ОповеститьОСобытии(""Выгрузка данных для агента "" + СтрокаТаб.Агент + "" окончена."", СтатусСообщения.Информация);
	|КонецЦикла;
	|ОбработкаОбмена.ОповеститьОСобытии(""Выгрузка данных на FTP-сервер окончена."", СтатусСообщения.Информация);
	|ОбработкаОбмена.СохранитьТаблицуЛогаВНастройкахПользователя();";
	
	СпрОбъект.Записать();
	
	// Команда приема данных от всех агентов через ФТП-Сервер 	
	СпрОбъект = Справочники.кпкШаблоныКоманд.ПриемДанныхПоФТП.ПолучитьОбъект();
	СпрОбъект.ТекстКоманды =	
	"ОбработкаОбмена = Обработки.кпкОбменДанными.Создать(); 	
	|ОбработкаОбмена.СпособОбмена = 3;
	|ОбработкаОбмена.ВидВыгрузки  = 1;
	|ОбработкаОбмена.УстановитьНастройкиПоУмолчанию();	
	|ОбработкаОбмена.ЗаполнитьТаблицуФТП();
	|ОбработкаОбмена.ОповеститьОСобытии(""Начало загрузки данных с FTP-сервера..."", СтатусСообщения.Информация);
	|Для Каждого СтрокаТаб Из ОбработкаОбмена.ТабФТПСервер Цикл
	|	ОбработкаОбмена.ВыбАгент = СтрокаТаб.Агент;
	|	ОбработкаОбмена.ПриИзмененииАгента(СтрокаТаб.Агент);
	|	ОбработкаОбмена.ЗагрузитьДанныеСФТП();
	|	ОбработкаОбмена.ОповеститьОСобытии(""Загрузка данных от агента "" + СтрокаТаб.Агент + "" окончена."", СтатусСообщения.Информация);
	|КонецЦикла;
	|ОбработкаОбмена.ОповеститьОСобытии(""Загрузка данных с FTP-сервера окончена."", СтатусСообщения.Информация);
	|ОбработкаОбмена.СохранитьТаблицуЛогаВНастройкахПользователя();";
	
	СпрОбъект.Записать();

    /////////////////////////////////////////
	/////////////////////////////////////////
	    	
		
    // Команды для обмена через почту
	/////////////////////////////////////////       
	
	// Команда приема данных от всех агентов по почте
	СпрОбъект = Справочники.кпкШаблоныКоманд.ПриемДанныхПоПочте.ПолучитьОбъект();
	СпрОбъект.ТекстКоманды =	
	"ОбработкаОбмена = Обработки.кпкОбменДанными.Создать(); 	
	|ОбработкаОбмена.СпособОбмена = 4;
	|ОбработкаОбмена.ВидВыгрузки  = 1;
	|ОбработкаОбмена.УстановитьНастройкиПоУмолчанию();
	|ОбработкаОбмена.ОповеститьОСобытии(""Начало приема данных по почте..."", СтатусСообщения.Информация);
	|ОбработкаОбмена.ЗагрузитьДанныеПочтой();                                                                    	
	|ОбработкаОбмена.ОповеститьОСобытии(""Прием данных по почте окончен."", СтатусСообщения.Информация);
	|ОбработкаОбмена.СохранитьТаблицуЛогаВНастройкахПользователя();";
	
	СпрОбъект.Записать();
	
	// Команда отправки данных всем агентам по почте
	СпрОбъект = Справочники.кпкШаблоныКоманд.ОтправкаДанныхПоПочте.ПолучитьОбъект();
	СпрОбъект.ТекстКоманды =	
	"ОбработкаОбмена = Обработки.кпкОбменДанными.Создать();
	|ОбработкаОбмена.ВидВыгрузки  = 1;
	|ОбработкаОбмена.СпособОбмена = 4;
	|ОбработкаОбмена.УстановитьНастройкиПоУмолчанию();
	|ТаблицаАгентов = кпкАгентПлюс.ПолучитьТаблицуТорговыхАгентов();
	|ОбработкаОбмена.ОповеститьОСобытии(""Начало отправки данных по почте..."", СтатусСообщения.Информация);
	|Для Каждого СтрокаТаб Из ТаблицаАгентов Цикл
	|	ОбработкаОбмена.ВыбАгент = СтрокаТаб.Агент;
	|	ОбработкаОбмена.ВыгрузитьДанные();
	|	ОбработкаОбмена.ОповеститьОСобытии(""Выгрузка данных для агента "" + СтрокаТаб.Агент + "" окончена."", СтатусСообщения.Информация);
	|КонецЦикла;
	|ОбработкаОбмена.ОповеститьОСобытии(""Отправка данных по почте окончена."", СтатусСообщения.Информация);
	|ОбработкаОбмена.СохранитьТаблицуЛогаВНастройкахПользователя();";
    	
	СпрОбъект.Записать();

	/////////////////////////////////////////
	/////////////////////////////////////////

    // Команда для расчета истории продаж
	/////////////////////////////////////////       
	
	СпрОбъект = Справочники.кпкШаблоныКоманд.РасчетИсторииПродаж.ПолучитьОбъект();
	СпрОбъект.ТекстКоманды =		
	"ОбработкаОбмена = Обработки.кпкОбменДанными.Создать();
	|ОбработкаОбмена.УстановитьНастройкиПоУмолчанию();
	|ОбработкаОбмена.ВидВыгрузки = 3;
	|ТаблицаАгентов = кпкАгентПлюс.ПолучитьТаблицуТорговыхАгентов();
	|ОбработкаОбмена.ОповеститьОСобытии(""Начало расчета истории продаж..."", СтатусСообщения.Информация);
	|Для Каждого СтрокаТаб Из ТаблицаАгентов Цикл
	|	ОбработкаОбмена.ВыбАгент = СтрокаТаб.Агент;
	|	ОбработкаОбмена.ВыгрузитьДанные();
	|	ОбработкаОбмена.ОповеститьОСобытии(""Расчет истории продаж для агента "" + СтрокаТаб.Агент + "" окончен."", СтатусСообщения.Информация);
	|КонецЦикла;
	|ОбработкаОбмена.ОповеститьОСобытии(""Расчет истории продаж окончен."", СтатусСообщения.Информация);
	|ОбработкаОбмена.СохранитьТаблицуЛогаВНастройкахПользователя();";
	
	СпрОбъект.Записать();
	
	/////////////////////////////////////////
	/////////////////////////////////////////

    // Команда для очистки регистра сведений "Сведения по GPS-трекам"
	///////////////////////////////////////// 
	
	СпрОбъект = Справочники.кпкШаблоныКоманд.ОчисткаТрековЗаПериод.ПолучитьОбъект();
	СпрОбъект.ТекстКоманды =		
	"// Очистка треков за предыдущую неделю
	|ОбработкаОчистки = Обработки.кпкОчисткаТрековЗаПериод.Создать();
	|ОбработкаОчистки.ЗаполнитьТаблицуАгентов();		
	|ОбработкаОчистки.НачПериода = ТекущаяДата()- 60*60*24*14;
	|ОбработкаОчистки.КонПериода = ТекущаяДата()- 60*60*24*7;	
	|ОбработкаОчистки.ВыполнитьОчисткуТреков();";	
 
	СпрОбъект.Записать();
	
	////////////////////////////////////////
	
	Сообщить("Выполнено заполнение списка стандартных команд в справочнике ""Команды системы""", СтатусСообщения.Информация);
	
КонецПроцедуры //ЗаполнитьШаблоныКоманд()

// Процедура заполняет коды типов цен, которые предназанчены для
// выгрузки в КПК. Выгрузка кодов типов цен добавлена в версии от 14.12.2010
//
Процедура ЗаполнитьКодыДляВыгружаемыхТиповЦен() Экспорт
	
	ТаблицаТиповЦен = Константы.кпкТипыЦен.Получить().Получить();
	
	Если Не ТаблицаТиповЦен = Неопределено Тогда
		
		Если ТаблицаТиповЦен.Колонки.Найти("Код") = Неопределено Тогда
			
			ТаблицаТиповЦен.Колонки.Добавить("Код");
			
			Для Каждого СтрокаТаб Из ТаблицаТиповЦен Цикл	
				
				Если (СтрокаТаб.Код = 0) или (СтрокаТаб.Код = Неопределено) Тогда
					
					ТабЦенСорт = ТаблицаТиповЦен.Скопировать();
					ТабЦенСорт.Сортировать("Код Убыв");
					СтрокаТабСорт = ТабЦенСорт.Получить(0);
					Если СтрокаТабСорт.Код = Неопределено Тогда
						НужныйКод = 1;			
					Иначе
						НужныйКод = СтрокаТабСорт.Код + 1;			
					КонецЕсли;    
					
					СтрокаТаб.Код = НужныйКод;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Константы.кпкТипыЦен.Установить(Новый ХранилищеЗначения(ТаблицаТиповЦен));
	
КонецПроцедуры //ЗаполнитьКодыДляВыгружаемыхТиповЦен()

// Функция вычисляет модуль числового значения
//
// Параметры: 
//  Значение - число, модуль которого нужно вычислить
//
// Возвращаемое значение:
//  число
//  
Функция Модуль(Значение) Экспорт
	
	Если Значение>0 Тогда
		Результат = Значение;
	Иначе
		Результат = -Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // Модуль()

// Функция присваивает новый код
// Параметры:
//	Код 		- код, который нужно изменить
//	Длина		- длина результирующего кода, если не указана, то длина результирующего 
//				  кода совпадает с длиной переданного кода в параметре "Код"
// Кодировка    - LAT - код состоит из цифр и символов ABCDEF
//  			- RUS - код состоит из цифр и символов АБВГДЕ
//				- NUM - код состоит только из цифр
Функция АПНовыйНомерИлиКод(Код, Длина = 0, Префикс = "", Кодировка = "RUS")
	Перем Результат;
	Результат = Префикс;

	ДлинаКода = СтрДлина(Код);
	Если Длина<>0 Тогда
	    Если Длина<>ДлинаКода Тогда
			ДлинаКода = Длина;
	    КонецЕсли;
	КонецЕсли;
	
	Пока СтрДлина(Результат)<ДлинаКода Цикл
		GUID = АПСоздатьИдентификатор();
		GUID = СтрЗаменить(GUID, "-", "");
		Если Кодировка = "RUS" Тогда
			GUID = СтрЗаменить(GUID,"A","А");
			GUID = СтрЗаменить(GUID,"B","Б");
			GUID = СтрЗаменить(GUID,"C","В");
			GUID = СтрЗаменить(GUID,"D","Г");
			GUID = СтрЗаменить(GUID,"E","Д");
			GUID = СтрЗаменить(GUID,"F","Е");
		ИначеЕсли Кодировка = "NUM" Тогда
			GUID = СтрЗаменить(GUID,"A","");
			GUID = СтрЗаменить(GUID,"B","");
			GUID = СтрЗаменить(GUID,"C","");
			GUID = СтрЗаменить(GUID,"D","");
			GUID = СтрЗаменить(GUID,"E","");
			GUID = СтрЗаменить(GUID,"F","");
		КонецЕсли;
	    Результат = Результат + GUID;
	КонецЦикла;
	
	Возврат Лев(Результат, ДлинаКода);
КонецФункции //АПНовыйНомерИлиКод()
  
// Возвращает свободный код справочника
//
Функция АППолучитьСвободныйКодСправочника(Знач ТекКод, ИдентСпр, ПереназначениеКода = 0, Кодировка = "RUS", МинДлинаКода = 0, МаксДлинаКода = 0) Экспорт
	Если МаксДлинаКода = 0 Тогда
	    МаксДлинаКода = Вычислить("Метаданные.Справочники." + ИдентСпр + ".ДлинаКода");
	КонецЕсли;
	Спр = Вычислить("Справочники."+ИдентСпр);
	Если МинДлинаКода = 0 Тогда //значит ищем код заданной длины (МаксДлинаКода)
		Если ПереназначениеКода = 1 Тогда
		    ТекКод = АПНовыйНомерИлиКод(ТекКод,МаксДлинаКода,,Кодировка);
		КонецЕсли;
		Пока Спр.НайтиПоКоду(ТекКод,0) = 1 Цикл
		    ТекКод = АПНовыйНомерИлиКод(ТекКод,МаксДлинаКода,,Кодировка);
		КонецЦикла;
		Возврат ТекКод;
	Иначе //ищем код длиной от МинДлинаКода по МаксДлинаКода
		Если ПереназначениеКода=1 Тогда
		    ТекКод = АПНовыйНомерИлиКод(ТекКод, МинДлинаКода, , Кодировка);
		КонецЕсли;
		КодНайден = 0;
		Для ДлинаКода = МинДлинаКода По МаксДлинаКода-1 Цикл
			Для Поз = 1 По 5 Цикл //делаем 5 попыток найти код 
				Если Спр.НайтиПоКоду(ТекКод, 0) = 0 Тогда
				    КодНайден = 1; Прервать;
				КонецЕсли;
				ТекКод = АПНовыйНомерИлиКод(ТекКод, ДлинаКода, , Кодировка);
			КонецЦикла;
			Если КодНайден = 1 Тогда Прервать; КонецЕсли;
		КонецЦикла;
		Если КодНайден = 0 Тогда
			Пока Спр.НайтиПоКоду(ТекКод, 0) = 1 Цикл
			    ТекКод = АПНовыйНомерИлиКод(ТекКод, МаксДлинаКода, , Кодировка);
			КонецЦикла;
		КонецЕсли;
		Возврат ТекКод;
	КонецЕсли;
КонецФункции //ПолучитьСвободныйКодСправочника()

// Процедура создает новый элемент справочника "кпкПечатныеФормы"
//  и вносит в него переданные параметры
//
Процедура АПДобавитьПечФормуВСправочник(Код, ВидДок, НаимФормы, Скрипт, ВидФормы, Копий, ФлТекстовая, _ТипПриложения, _Родитель)
	Спр = Справочники.кпкПечатныеФормы;
	
	Эл = Спр.НайтиПоКоду(Код);
	Если Эл = Спр.ПустаяСсылка() Тогда
	    Эл = Спр.СоздатьЭлемент();
	Иначе
		Эл = Эл.ПолучитьОбъект();
	КонецЕсли;
	Эл.Код = Код;
	Эл.ВидДокументаВКПК = ВидДок;
	Эл.Наименование = НаимФормы;
	Эл.Скрипт = Скрипт;
	Эл.ВидФормы	= ВидФормы;
	Эл.ЧислоКопий = Копий;
	Эл.Текстовая = ФлТекстовая;
	Эл.ТипМобильногоПриложения = _ТипПриложения;
	Эл.Родитель = _Родитель;
	Эл.Записать();
	
КонецПроцедуры //АПДобавитьПечФормуВСправочник()

// Процедура создает новый элемент справочника "кпкПечатныеФормы"
//  и вносит в него переданные параметры для МТ 2.0
//
Процедура АПДобавитьПечФормуВСправочникМТ(Код, ВидДок, НаимФормы, ВидФормы, Копий, ФлТекстовая, _Родитель, Ссылка)
	
	Эл = Ссылка.ПолучитьОбъект();
	Эл.Код 				= Код;
	Эл.ВидДокументаВКПК = ВидДок;
	Эл.Наименование 	= НаимФормы;
	Эл.ВидФормы			= ВидФормы;
	Эл.ЧислоКопий 		= Копий;
	Эл.Текстовая 		= ФлТекстовая;
	Эл.Родитель 		= _Родитель;
	Эл.ТипМобильногоПриложения = Перечисления.кпкТипыМобильныхПриложений.АгентПлюсМобильнаяТорговля;
	Эл.Записать();
	
КонецПроцедуры //АПДобавитьПечФормуВСправочник()

// Добавляет печатную форму в справочник "кпкПечатныеФормы"
//
Процедура АПДобавитьПечФорму(Код, ВидДок, НаимФормы, Скрипт, ВидФормы, Копий, _ТипПриложения,_Родитель)
	
	АПДобавитьПечФормуВСправочник(Код, ВидДок, НаимФормы, Скрипт+".lua", ВидФормы, Копий, 0, _ТипПриложения, _Родитель);
	АПДобавитьПечФормуВСправочник(Код+"Txt", ВидДок, НаимФормы, Скрипт+"_txt.lua", ВидФормы, Копий, 1, _ТипПриложения, _Родитель);
		
КонецПроцедуры //АПДобавитьПечФорму()

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ

// Выполнение команд из справочника "Команды"
//
Процедура АПВыполнениеКоманд(КодНастройки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		ЗаписьЖурналаРегистрации("Выполнение команды с кодом " + КодНастройки, УровеньЖурналаРегистрации.Ошибка, , ,  "Нет кода настройки");
		Возврат;
	КонецЕсли;
	
	Команда = Справочники.кпкКоманды.НайтиПоКоду(КодНастройки);
	
	ЗаписьЖурналаРегистрации("Выполнение команды  " + Команда.Наименование, УровеньЖурналаРегистрации.Информация, , , "Начало выполнения");
	
	Если НЕ ЗначениеЗаполнено(Команда) ИЛИ Команда.ПометкаУдаления Тогда
		Если Команда.ПометкаУдаления Тогда
			ТекстОшибки = "Команда помечена на удаление";
		Иначе
			ТекстОшибки = "Команда не существует";
		КонецЕсли;
		ЗаписьЖурналаРегистрации("Выполнение команды с кодом " + КодНастройки, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);		
		Возврат;
	КонецЕсли;  
	
	Попытка
		Выполнить(Команда.Параметр);
		ТекстСообщения = "Выполнение команды успешно завершено. Дата: " + Строка(ТекущаяДата());
		ЗаписьЖурналаРегистрации("Выполнение команды " + Команда.Наименование, УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);				
	Исключение
		ЗаписьЖурналаРегистрации("Выполнение команды " + Команда.Наименование, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());				
	КонецПопытки; 	
	
КонецПроцедуры // АПВыполнениеКоманд()

// Проверяет справочник "кпкПечатныеФормы" на наличие дублей элементов
//
Процедура АППроверкаСправочникаПечатныхФорм(_ТипМобильногоПриложения) Экспорт
	
	ОфицФорма = Перечисления.КпкВидыПечатныхФорм.Официальные;
	УпрФорма  = Перечисления.КпкВидыПечатныхФорм.Упрощенные;
	ОбщФорма  = Перечисления.кпкВидыПечатныхФорм.Общие;
    
	//добавляем печатные формы в справочник в транзакции
	НачатьТранзакцию();
	
	Если _ТипМобильногоПриложения = Перечисления.кпкТипыМобильныхПриложений.АгентПлюс Тогда
		
		Родитель = Справочники.кпкПечатныеФормы.АгентПлюс15;
		АПДобавитьПечФорму("Order",  	"Order", 	"Счет", 		   		 "PrnOrder", 		ОбщФорма,  1, _ТипМобильногоПриложения, родитель);
		АПДобавитьПечФорму("SaleT12",	"Sale",  	"Форма Торг-12",   		 "PrnSaleT12", 		ОфицФорма, 2, _ТипМобильногоПриложения, родитель);
		АПДобавитьПечФорму("Sale", 		"Sale",	 	"Упрощенная форма",		 "PrnSaleSimple",	УпрФорма,  2, _ТипМобильногоПриложения, родитель);
		АПДобавитьПечФорму("SaleInv", 	"Sale",  	"Счет-фактура",			 "PrnSaleInvoice",	ОфицФорма, 1, _ТипМобильногоПриложения, родитель);	
		АПДобавитьПечФорму("Sertif", 	"Sale",  	"Перечень сертификатов", "PrnSaleSertif",	ОбщФорма,  1, _ТипМобильногоПриложения, родитель);
		АПДобавитьПечФорму("RSale", 	"RSale", 	"Чек N3",				 "PrnRSale", 		ОбщФорма,  1, _ТипМобильногоПриложения, родитель);
		АПДобавитьПечФорму("RSertif", 	"RSale", 	"Перечень сертификатов", "PrnRSaleSertif",	ОбщФорма,  1, _ТипМобильногоПриложения, родитель);
		АПДобавитьПечФорму("Cash", 		"Cash",  	"Кассовый ордер",		 "PrnCash", 		ОбщФорма,  1, _ТипМобильногоПриложения, родитель);
		АПДобавитьПечФорму("Move", 		"Move",  	"Перемещение",			 "PrnMove", 		ОбщФорма,  2, _ТипМобильногоПриложения, родитель);
		АПДобавитьПечФорму("Arrival", 	"Arrival",	"Поступление",			 "PrnArrival", 		ОбщФорма,  1, _ТипМобильногоПриложения, родитель);
		АПДобавитьПечФорму("Inventory", "Inventory","Инвентаризация",		 "PrnInvent", 		ОбщФорма,  1, _ТипМобильногоПриложения, родитель);
		АПДобавитьПечФорму("TTN", 	    "Sale",  	"Форма ТТН",	  		 "PrnSaleTTN",		ОфицФорма, 2, _ТипМобильногоПриложения, родитель);
		
	ИначеЕсли _ТипМобильногоПриложения = Перечисления.кпкТипыМобильныхПриложений.АгентПлюсМобильнаяТорговля Тогда
		
		АПДобавитьПечФормуВСправочникМТ("СчетНаОплату", 			  Перечисления.кпкВидыДокументов.Заказ, 		"Счет", 						 Строка(ОбщФорма), 	1, 1, Справочники.кпкПечатныеФормы.ДокументЗаявка,		Справочники.кпкПечатныеФормы.СчетНаОплату);
		АПДобавитьПечФормуВСправочникМТ("ПриходныйКассовыйОрдер", 	  Перечисления.кпкВидыДокументов.ПКО,	 		"Приходный кассовый ордер", 	 Строка(ОбщФорма), 	1, 1, Справочники.кпкПечатныеФормы.ДокументКассовыйОрдер, 	Справочники.кпкПечатныеФормы.ПриходныйКассовыйОрдер);
		АПДобавитьПечФормуВСправочникМТ("РасходныйКассовыйОрдер", 	  Перечисления.кпкВидыДокументов.РКО,	 		"Расходный кассовый ордер", 	 Строка(ОбщФорма), 	1, 1, Справочники.кпкПечатныеФормы.ДокументКассовыйОрдер, 	Справочники.кпкПечатныеФормы.РасходныйКассовыйОрдер);
		АПДобавитьПечФормуВСправочникМТ("РасходнаяНакладная", 		  Перечисления.кпкВидыДокументов.Реализация, 	"Упрощенная форма", 			 Строка(УпрФорма), 	1, 1, Справочники.кпкПечатныеФормы.ДокументРеализация, 		Справочники.кпкПечатныеФормы.РасходнаяНакладная);
		АПДобавитьПечФормуВСправочникМТ("ВозвратТоваровОтПокупателя", Перечисления.кпкВидыДокументов.ВозвратТоваров,"Возврат товаров от покупателя", Строка(ОбщФорма),  1, 1, Справочники.кпкПечатныеФормы.ДокументПоступление, 	Справочники.кпкПечатныеФормы.ВозвратТоваровОтПокупателя);
		АПДобавитьПечФормуВСправочникМТ("Торг12", 					  Перечисления.кпкВидыДокументов.Реализация,	"ТОРГ-12", 						 Строка(ОфицФорма), 1, 1, Справочники.кпкПечатныеФормы.ДокументРеализация, 		Справочники.кпкПечатныеФормы.Торг12);
		АПДобавитьПечФормуВСправочникМТ("ТТН",	 					  Перечисления.кпкВидыДокументов.Реализация,	"ТТН",	 						 Строка(ОфицФорма), 1, 1, Справочники.кпкПечатныеФормы.ДокументРеализация, 		Справочники.кпкПечатныеФормы.ТТН);
		АПДобавитьПечФормуВСправочникМТ("СчетФактура",	 			  Перечисления.кпкВидыДокументов.Реализация,	"Счет-Фактура",	 				 Строка(ОфицФорма), 1, 1, Справочники.кпкПечатныеФормы.ДокументРеализация, 		Справочники.кпкПечатныеФормы.СчетФактура);
		АПДобавитьПечФормуВСправочникМТ("СправкаБТТН",	 			  Перечисления.кпкВидыДокументов.Реализация,	"Справка ""Б"" к ТТН",	 		 Строка(ОфицФорма), 1, 1, Справочники.кпкПечатныеФормы.ДокументРеализация, 		Справочники.кпкПечатныеФормы.СправкаБТТН);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры //АППроверкаСправочникаПечатныхФорм()
   
// Формирует текст-заголовок формы отчета
Функция ПолучитьПредставлениеПериода(ДатаНач, ДатаКон, РежимВводаПериода = 0) Экспорт
	
	ОписаниеПериода = "";
	
	Если РежимВводаПериода =  0 Тогда  // произвольный период
		Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";

		Иначе
			Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
				ОписаниеПериода = "" + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
				+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

			Иначе
				Если ДатаНач <= ДатаКон Тогда
					ОписаниеПериода = "" + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
				Иначе
					ОписаниеПериода = "Неправильно задан период!"
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли РежимВводаПериода =  1 Тогда   // на дату
		Если ДатаКон = '00010101000000' Тогда
			ОписаниеПериода = "на текущее время " + Формат(ТекущаяДата(), "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		Иначе
			ОписаниеПериода = "на конец дня " + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
			
		КонецЕсли;
			
	КонецЕсли;

	Возврат ОписаниеПериода;
	
КонецФункции // ПолучитьПредставлениеПериода()

// Функция удаляет из строки нечитаемые символя для Агент+
//
Функция УбратьНечитаемыеСимволы(Стр) Экспорт
	
	НовСтрока = Стр;
	Если ТипЗнч(Стр) = Тип("Строка") Тогда
		НовСтрока = СтрЗаменить(Стр, 	   Символы.ПС, "");
		НовСтрока = СтрЗаменить(НовСтрока, Символы.ВК, "");
		НовСтрока = СтрЗаменить(НовСтрока, Символы.Таб, "");
		НовСтрока = СтрЗаменить(НовСтрока, Символы.ВТаб, "");
		НовСтрока = СтрЗаменить(НовСтрока, Символы.ПФ, "");
		НовСтрока = СтрЗаменить(НовСтрока, """", "'");
	КонецЕсли;
	
	Возврат СокрЛП(НовСтрока);
	
КонецФункции // УбратьНечитаемыеСимволы()

// Процедура находит план агента в текущем месяце. Если в текущем месяце есть несколько планов
// посещений, то в расчет берется последний по дате формирования документ планирования.
//   
Процедура НайтиПланАгента(Агент, КлиентыАгента, ТоргТочкиАгента, ПланПосещений) Экспорт
	
	ДатаНачала    = НачалоМесяца(ТекущаяДата());
	ДатаОкончания = КонецМесяца(ТекущаяДата());
	
	ИспТочек = Константы.кпкРежимТоргТочек.Получить();
       	
	Выборка = Документы.кпкПланПосещений.Выбрать(ДатаНачала, ДатаОкончания, Новый Структура("Агент", Агент), "Дата Убыв");
	
	Пока Выборка.Следующий() Цикл	
		
		Если Не Выборка.Проведен Тогда Продолжить; КонецЕсли;
		
		ТекПлан = Выборка.Ссылка;			
		
		Если ТекПлан.ВидОперации <> Перечисления.кпкВидыОперацийПланирования.ПланированиеПродаж Тогда
			
			Для Каждого Стр из ТекПлан.Дни Цикл 			
				
				Если ИспТочек Тогда
					ПараметрПоиска = Стр.ТорговаяТочка.Владелец;										
				Иначе
					ПараметрПоиска = Стр.Контрагент;					
				КонецЕсли;
				
				Если КлиентыАгента.НайтиПоЗначению(ПараметрПоиска) = Неопределено Тогда
					КлиентыАгента.Добавить(ПараметрПоиска);
				КонецЕсли;     
				
				Если ИспТочек Тогда
					Если ТоргТочкиАгента.НайтиПоЗначению(Стр.ТорговаяТочка) = Неопределено 
						и Не Стр.ТорговаяТочка.ПометкаУдаления Тогда
						ТоргТочкиАгента.Добавить(Стр.ТорговаяТочка);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;          
			
			ПланПосещений = ТекПлан;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //НайтиПланАгента()

// Процедура дополняет список контрагентов по тем контрагентам, с которыми 
// есть остаточные долги
//
Процедура ДополнитьСписокКлиентовАгентаПоВзаиморасчетам(Агент, КлиентыАгента)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Расчеты.Контрагент КАК Контрагент,
	|	Расчеты.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	|	Расчеты.Сделка
	|ПОМЕСТИТЬ Расчеты
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&Период, (НЕ Контрагент В (&СписКлиентов))) КАК Расчеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	кпкСведенияДокументаСрезПоследних.КПКДокумент
	|ПОМЕСТИТЬ СведенияДок
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(
	|			&Период,
	|			КПКДокумент <> НЕОПРЕДЕЛЕНО
	|				И (НЕ КПКДокумент.Контрагент В (&СписКлиентов))
	|				И Агент = &Агент) КАК кпкСведенияДокументаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Расчеты.СуммаВзаиморасчетовОстаток, 0) КАК СуммаВзаиморасчетовОстаток,
	|	Расчеты.Контрагент,
	|	СведенияДок.КПКДокумент
	|ИЗ
	|	СведенияДок КАК СведенияДок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расчеты КАК Расчеты
	|		ПО (Расчеты.Сделка = СведенияДок.КПКДокумент
	|				ИЛИ Расчеты.Сделка.ДокументОснование = СведенияДок.КПКДокумент)
	|ГДЕ
	|	ЕСТЬNULL(Расчеты.СуммаВзаиморасчетовОстаток, 0) > 0";
	
	Запрос =  Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Агент",        Агент);
	Запрос.УстановитьПараметр("СписКлиентов", КлиентыАгента);
	Запрос.УстановитьПараметр("Период", 	  ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл		
		Клиент = Выборка.Контрагент;		
		Если КлиентыАгента.НайтиПоЗначению(Клиент) = Неопределено Тогда
			КлиентыАгента.Добавить(Клиент);
		КонецЕсли;  	
	КонецЦикла;
	
КонецПроцедуры // ДополнитьСписокКлиентовАгентаПоВзаиморасчетам()

// Процедура ЗаполнитьСписокКлиентовАгента
//
// Параметры: 
//  Агент 				- агент, для которого формируется список клиентов
//  ПланПосещений 		- ссылка на документ "План посещений", согласно которому заполняется список клиентов
//  КлиентыАгента 		- список клиентов, который необходимо заполнить
//  ТоргТочкиАгента 	- список торговых точек, который необходимо заполнить
//  ТабДоговоровАгента  - список договоров, который необходимо заполнить
// Описание:
//  Процедура заполняет список клиентов агента в переданные параметры
//
Процедура ЗаполнитьСписокКлиентовАгента(Агент, ПланПосещений, КлиентыАгента, ТоргТочкиАгента, ТабДоговоровАгента)
	
	РежимВыгрузкиКонтрагентов = Константы.кпкРежимВыгрузкиКонтрагентов.Получить();
	
	// С использованием плана посещений
	Если РежимВыгрузкиКонтрагентов = 0 или РежимВыгрузкиКонтрагентов = 4 Тогда  		
		НайтиПланАгента(Агент, КлиентыАгента, ТоргТочкиАгента, ПланПосещений);	  		
	КонецЕсли;
	
	// Выгрузка клиентов по договорам
	Если РежимВыгрузкиКонтрагентов = 1 или РежимВыгрузкиКонтрагентов = 4 Тогда 
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	кпкДоговораАгентов.Договор.Владелец КАК Контрагент,
		|	кпкДоговораАгентов.Договор
		|ИЗ
		|	Справочник.кпкДоговораАгентов КАК кпкДоговораАгентов
		|ГДЕ
		|	кпкДоговораАгентов.Владелец = &Агент
		|	И кпкДоговораАгентов.ПометкаУдаления = ЛОЖЬ
		|	И (НЕ кпкДоговораАгентов.Договор.Владелец ЕСТЬ NULL )");
		
		Запрос.УстановитьПараметр("Агент", Агент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл	
			
			Если КлиентыАгента.НайтиПоЗначению(Выборка.Контрагент) = Неопределено Тогда
				КлиентыАгента.Добавить(Выборка.Контрагент);
			КонецЕсли;
			
			Если ТабДоговоровАгента.Найти(Выборка.Договор, "Договор") = Неопределено Тогда
				НовСтрокаТаб = ТабДоговоровАгента.Добавить(); 
				НовСтрокаТаб.Контрагент = Выборка.Контрагент;
				НовСтрокаТаб.Договор	= Выборка.Договор;				
			КонецЕсли;
			
		КонецЦикла; 
		
	ИначеЕсли РежимВыгрузкиКонтрагентов = 2 Тогда // Выгрузка контрагентов из списка контрагентов для текущего агента
		
		ТаблицаКонтрагентов = РегистрыСведений.кпкСведенияАгента.Получить(Новый Структура("Объект", Агент)).СписокКонтрагентов.Получить();
		
		Если ТаблицаКонтрагентов <> Неопределено Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Ссылка В ИЕРАРХИИ(&Массив)
			|	И Контрагенты.ПометкаУдаления = ЛОЖЬ");
			
			Запрос.УстановитьПараметр("Массив", ТаблицаКонтрагентов.ВыгрузитьКолонку("Контрагент"));
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл			
				Если КлиентыАгента.НайтиПоЗначению(Выборка.Ссылка) = Неопределено Тогда
					КлиентыАгента.Добавить(Выборка.Ссылка);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли РежимВыгрузкиКонтрагентов = 3 Тогда //Выгрузка всех клиентов-покупателей
		
		ВыборкаКонтр = Справочники.Контрагенты.Выбрать();
		
		Пока ВыборкаКонтр.Следующий() Цикл
			Если ВыборкаКонтр.ЭтоГруппа или ВыборкаКонтр.ПометкаУдаления или (Не ВыборкаКонтр.Покупатель) Тогда Продолжить КонецЕсли;
			Если КлиентыАгента.НайтиПоЗначению(ВыборкаКонтр.Ссылка) = Неопределено Тогда
				КлиентыАгента.Добавить(ВыборкаКонтр.Ссылка);
			КонецЕсли;
		КонецЦикла;  
		
	КонецЕсли;  	
	
	ДополнитьСписокКлиентовАгентаПоВзаиморасчетам(Агент, КлиентыАгента);	
	
КонецПроцедуры //ЗаполнитьСписокКлиентовАгента()

// Процедура ЗаполнитьТаблицуТорговыхТочек
//
// Параметры: 
//  КлиентыАгента 		- список клиентов, который необходимо заполнить
//  ТоргТочкиАгента 	- список торговых точек, который необходимо заполнить
//
// Описание:
//  Процедура заполняет таблицу торговых точек агента, согласно переданным параметрам
// 
Процедура ЗаполнитьТаблицуТорговыхТочек(КлиентыАгента, ТоргТочкиАгента)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	кпкТорговыеТочки.Ссылка
	|ИЗ
	|	Справочник.кпкТорговыеТочки КАК кпкТорговыеТочки
	|ГДЕ
	|	кпкТорговыеТочки.ПометкаУдаления = ЛОЖЬ
	|	И кпкТорговыеТочки.Владелец В ИЕРАРХИИ(&СписокКонтрагентов)");
	
	Запрос.УстановитьПараметр("СписокКонтрагентов", КлиентыАгента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТоргТочкиАгента.НайтиПоЗначению(Выборка.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТоргТочкиАгента.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Функция заполняет списки клиентов, торговых точек, договоров, а 
// также заполняет план посещений агента
//
// Добавлено 22.06.2007
//
Процедура СформироватьСписокКлиентовАгентов(ПарАгент, ПланПосещений, КлиентыАгента, ТоргТочкиАгента, ТабДоговоровАгента) Экспорт
	
	КлиентыАгента.Очистить();
	ТоргТочкиАгента.Очистить();
	ТабДоговоровАгента.Очистить();    	
	
	Если ТипЗнч(ПарАгент) = Тип("СписокЗначений") Тогда
		
		Для Каждого СтрокаСписка Из ПарАгент Цикл
			ЗаполнитьСписокКлиентовАгента(СтрокаСписка.Значение, ПланПосещений, КлиентыАгента, ТоргТочкиАгента, ТабДоговоровАгента);
		КонецЦикла;
		
	Иначе  		
		
		Если ПарАгент.Пустая() Тогда	
			Возврат;
		КонецЕсли;  
		
		ЗаполнитьСписокКлиентовАгента(ПарАгент, ПланПосещений, КлиентыАгента, ТоргТочкиАгента, ТабДоговоровАгента);
		
	КонецЕсли;  
	
	РежимВыгрузкиКонтрагентов = Константы.кпкРежимВыгрузкиКонтрагентов.Получить();
	
	Если РежимВыгрузкиКонтрагентов = 1 или РежимВыгрузкиКонтрагентов = 2 или РежимВыгрузкиКонтрагентов = 3 Тогда // без использования плана 
		ЗаполнитьТаблицуТорговыхТочек(КлиентыАгента, ТоргТочкиАгента);
	КонецЕсли;
			
КонецПроцедуры // СформироватьСписокКлиентовАгента()

// Функция возвращает таблицу договоров данного контрагента, доступных для выбора
//
// Параметры
//  Контрагент                              - конрагент, по которому определяется договор
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов, не обязательный.
// 	ВозвращатьТолькоПервые                  - булево, Истина - нужно вернуть только первые два договора,
//                                          - ложь - нужно вернуть весь список.
//  Организация                             - необязательный, организация, по которой определяется договор,
//                                            если не передана, то возвращается список договоров по всем орагнизациям.
//  ДополнительныеРеквизиты                 - необязательный, массив дополнительных реквизитов договора,
//                                            которые необходимо вернуть в результате запроса.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция ПолучитьДоступныеДоговорыКонтрагента(Контрагент, СтруктураПараметровДляПолученияДоговора, ВозвращатьТолькоПервые, Организация = Неопределено, ДополнительныеРеквизиты = Неопределено) Экспорт

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора", ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов", ВидСравненияВалютыВзаиморасчетов);
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ПарКонтрагент",  Контрагент);
	Запрос.УстановитьПараметр("ПарВидДоговора", СписокДопустимыхВидовДоговоров);
	Запрос.УстановитьПараметр("ПарВидВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
	Запрос.УстановитьПараметр("ПарВалютаВзаиморасчетов", ВалютаВзаиморасчетовДоговора);
	Запрос.УстановитьПараметр("ПарОрганизация", Организация);

	ПсевдонимТаблицы = "ДоговорыКонтрагентов"; 
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ"
	+?(ВозвращатьТолькоПервые," ПЕРВЫЕ 2","") + "
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|ВЫБОР
	|	КОГДА ДоговорыКонтрагентов.Ссылка = ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента
	|		ТОГДА 1
	|	ИНАЧЕ 0
	|КОНЕЦ КАК Сорт";
	
	Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		Для Каждого НаименованиеРеквизита Из ДополнительныеРеквизиты Цикл
		
			Запрос.Текст = Запрос.Текст  + ", " + ПсевдонимТаблицы + "." + НаименованиеРеквизита;
		
		КонецЦикла; 		
	
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст  + "
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК " + ПсевдонимТаблицы + "
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)"
	+?(ЗначениеЗаполнено(Организация), "	И ДоговорыКонтрагентов.Организация = &ПарОрганизация", "") + "
	|	И ДоговорыКонтрагентов.Владелец    = &ПарКонтрагент"
	+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов " 
	+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "(&ПарВалютаВзаиморасчетов)
	|")
	+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&ПарВидДоговора)
	|")
	+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
	|УПОРЯДОЧИТЬ ПО
	|	Сорт УБЫВ
	|");
		
	Возврат Запрос.Выполнить();

КонецФункции // ПолучитьДоступныеДоговорыКонтрагента()

// Проверяет наличие каталога на диске и предлагает создать, если каталога не существует.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//
// Возвращаемое значение:
//   Булево – Истина, если каталог существует или создан, Ложь, если каталога нет.
//
Функция ПроверитьСуществованиеКаталога(ИмяКаталога, ВопросСоздания = Ложь, СоздаватьКаталогНаСервере = Ложь) Экспорт
	
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Если ВопросСоздания Тогда
			#Если Клиент Тогда
				Ответ = Вопрос("Каталог по адресу: """ + ИмяКаталога + """ не существует. Создать его?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда				
					Попытка
						СоздатьКаталог(ИмяКаталога);					
						Возврат Истина;
					Исключение
						Возврат Ложь;
					КонецПопытки;
				Иначе  				
					Возврат Ложь;     				
				КонецЕсли;
			#Иначе
				Если СоздаватьКаталогНаСервере Тогда
					Попытка
						СоздатьКаталог(ИмяКаталога);					
						Возврат Истина;
					Исключение
						Возврат Ложь;
					КонецПопытки; 				
				Иначе
					Возврат Ложь;
				КонецЕсли;
			#КонецЕсли
		Иначе
			СоздатьКаталог(ИмяКаталога);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПроверитьСуществованиеКаталога()

// Функция ПолучитьТаблицуТорговыхАгентов
//
// Параметры: 
//	Нет
//
// Описание:
//  Функция формиует список агентов, согласно заполненнному регистру сведений
// "кпкСведенияАгента"
//
// Возвращаемое значение:
//  Таблица значений
// 
Функция ПолучитьТаблицуТорговыхАгентов() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
                          | кпкСведенияАгента.Объект КАК Агент,
                          | ИСТИНА КАК Пометка
                          |ИЗ
                          | РегистрСведений.кпкСведенияАгента КАК кпкСведенияАгента
                          |
                          |УПОРЯДОЧИТЬ ПО
                          | кпкСведенияАгента.Объект.Наименование");			
	
	лТаблицаАгентов = Запрос.Выполнить().Выгрузить(); 
	
	Возврат лТаблицаАгентов
	
КонецФункции //ПолучитьТаблицуТорговыхАгентов()     

#Если Клиент Тогда
	
// Функция ПроверкаДаты
//
// Параметры: 
//  НужнаяДата 	- дата, которую нужно проверить
//  ИмяПоля 	- имя поля, для которого нужно вывести сообщение об ошибке
//
// Описание:
//  Функция проверяет корректность даты и в случае некорректности выдается сообщение
//
// Возвращаемое значение:
//  Булево
//
Функция ПроверкаДаты(НужнаяДата, ИмяПоля) Экспорт
	
	Если НужнаяДата > '39991231235959' Тогда		
		ОбщегоНазначения.СообщитьОбОшибке("Неверно задана дата в поле " + ИмяПоля + "!");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//Процедура выполняет обработку "кпкПереводGPSКоординат"
//
Процедура ОткрытьКонвертер(Широта, Долгота, Форма) Экспорт
	
	Конвертер = Обработки.кпкПереводGPSКоординат.Создать();
	Конвертер.Широта  = Широта;
	Конвертер.Долгота = Долгота;
	
	ФормаКонвертора = Конвертер.ПолучитьФорму(, Форма);	
	ФормаКонвертора.ОткрытьМодально();
	
	Широта  = Конвертер.Широта;
	Долгота = Конвертер.Долгота;
	
КонецПроцедуры

#КонецЕсли

// Получаем из полного номера версии конфигурации номер релиза без номера сборки.
//
// Параметры
//  НомерВерсии  – Строка – полный номер версии
//
// Возвращаемое значение:
//  Строка – номер релиза без номера сборки
//
Функция ПолучитьНомерРелиза(НомерВерсии) Экспорт
	
	КоличествоТочек = 0;
	ДлинаОписанияНомераРелиза = 0;
	
	Для х = 1 По СтрДлина(НомерВерсии) Цикл
	
		Если Сред(НомерВерсии, х, 1) = "." Тогда
			КоличествоТочек = КоличествоТочек + 1;
		КонецЕсли;
		
		Если КоличествоТочек = 3 Тогда
			ДлинаОписанияНомераРелиза = х - 1;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Лев(НомерВерсии, ДлинаОписанияНомераРелиза);
	
КонецФункции // ПолучитьНомерРелиза()
