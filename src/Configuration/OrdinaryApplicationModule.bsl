Перем глОбщиеЗначения Экспорт;

Перем глСерверТО Экспорт;
Перем АдресРесурсовОбозревателя Экспорт; // В переменной содержится значение 
                                         // адреса ресурса данной конфигурации

Перем мКлиентOnline;

Перем ПараметрыВнешнихРегламентированныхОтчетов Экспорт;

Перем ФормаОжиданияКурсов;

Перем глМенеджерЗвит1С Экспорт;

//Перем глТаблицаПревышенийБюджетов Экспорт;

// перед завершением работы системы
Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	ЗапрашиватьПотверждение = глЗначениеПеременной("глЗапрашиватьПодтверждениеПриЗакрытии") <> Ложь и УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ЗапрашиватьПодтверждениеПриЗакрытии") = Истина;
	
	Если ЗапрашиватьПотверждение Тогда
		Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
		Отказ = (Ответ = КодВозвратаДиалога.Нет);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// отдельно получаем настройки для которых нужно выполнить обмен при выходе из программы
		ПроцедурыОбменаДанными.ВыполнитьОбменПриЗавершенииРаботыПрограммы(глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
			
	КонецЕсли;

	Если Не Отказ И глМенеджерЗвит1С <> Неопределено Тогда
		глМенеджерЗвит1С.ЗавершитьЗвит1С(Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет обработку события "При завершении работы системы".
// Данное событие возникает перед завершением работы в режиме 1С:Предприятие
// после закрытия главного окна.
// В данной процедуре могут быть выполнены действия, необходимые при выходе
// из программы.
// Примечание:
// В данной процедуре не допускаются открытие форм и других окон, не
// поддерживаются выдача сообщений, установка текста в панели состояния,
// а также другие действия, требующие наличия главного окна.
//
// Параметры:
//  Нет.
//
Процедура ПриЗавершенииРаботыСистемы()

	Если мКлиентOnline <> Неопределено Тогда
		мКлиентOnline.ЗавершитьРаботу();
	КонецЕсли;
	
	// Показ финальной дополнительной информации
	Форма = Обработки.ДополнительнаяИнформация.Создать();
	Форма.ВыполнитьДействие();

КонецПроцедуры // ПриЗавершенииРаботыСистемы()

// перед началом работы системы
Процедура ПередНачаломРаботыСистемы(Отказ)
	
	Если НЕ РольДоступна("Пользователь")
		И (НЕ РольДоступна("ПолныеПрава"))
		И (НЕ РольДоступна("ЗаведующийСкладом"))
		И (НЕ РольДоступна("РольГрузчик"))
		И (НЕ РольДоступна("РольКладовщик")) Тогда
		
		Предупреждение("Вам не назначена роль ""Пользователь"". Запуск конфигурации невозможен.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Отказ = НЕ УправлениеПользователями.ПользовательОпределен();
		
КонецПроцедуры

// при начале работы системы
Процедура ПриНачалеРаботыСистемы()
	
	ЗаголовокСистемы = Константы.ЗаголовокСистемы.Получить();
	Если НЕ Пустаястрока(ЗаголовокСистемы) Тогда
		УстановитьЗаголовокСистемы(ЗаголовокСистемы);
	КонецЕсли;
	
 	НеобходимоОбновлениеИБ = НЕ ПустаяСтрока(Метаданные.Версия)
	   И Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия;
	
	// Установить начальное значение ТипДетализацииСтандартныхОтчетов
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ТипДетализацииСтандартныхОтчетов") = Перечисления.ТипДетализацииСтандартныхОтчетов.ПустаяСсылка() Тогда
		//УстановитьЗначениеПоУмолчанию(глТекущийПользователь, "ТипДетализацииСтандартныхОтчетов", Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы);
		СсылкаНастройки = ПланыВидовХарактеристик.НастройкиПользователей["ТипДетализацииСтандартныхОтчетов"];
		МенеджерЗаписи = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		МенеджерЗаписи.Настройка = СсылкаНастройки;
		МенеджерЗаписи.Значение = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	    
	ЗапретитьОткрытиеНесколькихСеансов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ЗапретитьОткрытиеНесколькихСеансов");
	Если ЗапретитьОткрытиеНесколькихСеансов Тогда
		ТекущийНомерСоединения = НомерСоединенияИнформационнойБазы();
		УникальныйИдентификаторПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
		
		МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
		Для Каждого ТекСоединение Из МассивСоединений Цикл
			Если (ТекСоединение.ИмяПриложения = "1CV8") 
			   И (НЕ ТекСоединение.НомерСоединения = ТекущийНомерСоединения)
			   И (НЕ ТекСоединение.Пользователь = неопределено)
			   И (ТекСоединение.Пользователь.УникальныйИдентификатор = УникальныйИдентификаторПользователя) Тогда
			  
				Предупреждение("Пользователем с таким именем уже выполнен вход в систему");
				ЗавершитьРаботуСистемы(Ложь);
				Возврат;
				
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	ПервыйЗапуск = (Константы.НомерВерсииКонфигурации.Получить()="");
	
	ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы();
	
	// Выполнить проверку разницы времени с сервером приложения
	Если НЕ ПроверкаРазницыВремениКлиент.ВыполнитьПроверку() Тогда
		Возврат;	
	КонецЕсли;
	
	// отработка параметров запуска системы
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеСоединениямиИБ.УстановитьКонтрольРежимаЗавершенияРаботыПользователей();
	
	СформироватьОтчеты();

	ПроверитьПодключениеОбработчикаОжидания(Истина);

	// Проверка заполнения констант валют учетов
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаРегламентированногоУчета")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты регламентированного учета!");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаУправленческогоУчета")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты управленческого учета!");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаМеждународногоУчета")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты международного учета!");
	КонецЕсли;


	ВключенИнтерфейсКассира = Ложь;
	УправлениеРозничнойТорговлей.ЗапускИнтерфейсаКассира(глЗначениеПеременной("глТекущийПользователь"), ВключенИнтерфейсКассира, ПолучитьСерверТО());

	// Если интерфейс кассира включен - эти действия выполнять не нужно.
	Если НЕ ВключенИнтерфейсКассира Тогда
		
		//Если ПравоДоступа("Использование", Метаданные.Обработки.АвтоПолучениеОтправкаЭлектронныхПисем) Тогда
		//	глОбработкаАвтоПолученияОтправкиЭлектронныхПисем = Обработки.АвтоПолучениеОтправкаЭлектронныхПисем.ПолучитьФорму();
		//КонецЕсли; 
		
		Если Не ВосстановитьЗначение("ОбзорКонфигурации_ПоказыватьПриСтарте") = Ложь Тогда
			Обработки.ОбзорКонфигурации.ПолучитьФорму().Открыть();
		КонецЕсли;                                                       
		
		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "АвтооткрытиеМенеджераКонтактовПриЗапускеПрограммы") = Истина Тогда
			Если ПравоДоступа("Использование", Метаданные.Обработки.МенеджерКонтактов) Тогда
				Обработки.МенеджерКонтактов.ПолучитьФорму().Открыть();
			Иначе
				ОбщегоНазначения.Сообщение("Недостаточно прав доступа к обработке ""Менеджер контактов"". Обратитесь к администратору пользователей.", Перечисления.ВидыСообщений.ВажнаяИнформация);
			КонецЕсли; 
		КонецЕсли; 

		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "АвтооткрытиеФормыРабочегоМестаМенеджераПоПродажамПриЗапускеПрограммы") = Истина Тогда
			Если ПравоДоступа("Использование", Метаданные.Обработки.РабочееМестоМенеджераПоПродажам) Тогда
				Обработки.РабочееМестоМенеджераПоПродажам.ПолучитьФорму().Открыть();
			Иначе
				ОбщегоНазначения.Сообщение("Недостаточно прав доступа к обработке ""Рабочее место менеджера по продажам"". Обратитесь к администратору пользователей.", Перечисления.ВидыСообщений.ВажнаяИнформация);
			КонецЕсли; 
		КонецЕсли;
		
		
		ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
		
		Если ЭтоФайловаяИБ Тогда
						
			ПользовательДляВыполненияРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
			
			Если глЗначениеПеременной("глТекущийПользователь") = ПользовательДляВыполненияРеглЗаданий Тогда
				
				// с интервалом секунд вызываем процедуру работы с регламентными заданиями
				ПоддержкаРегламентныхЗаданиеДляФайловойВерсии();
				
				ИнтервалДляОпроса = Константы.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте.Получить();
				
				Если ИнтервалДляОпроса = Неопределено
					ИЛИ ИнтервалДляОпроса = 0 Тогда
					
					ИнтервалДляОпроса = 60;	
					
				КонецЕсли;
				
				ПодключитьОбработчикОжидания("ПоддержкаРегламентныхЗаданиеДляФайловойВерсии", ИнтервалДляОпроса);
				
			КонецЕсли;
			
		КонецЕсли;

		Если глЗначениеПеременной("глОбработкаАвтоОбменДанными") <> Неопределено Тогда
			// подключим обработчик обменов данными
			ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьПроверкуДинамическогоОбновленияИБ();

	
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ЗагружатьАктуальныеКурсыВалютПриЗапускеСистемы") Тогда
		// Автоматическая загрузка курсов валют
		ЗначениеКонстанты = Константы.НастройкиЗагрузкиКурсовВалют.Получить();
		Настройки 		  = ЗначениеКонстанты.Получить();
		ЗагружатьЕжедневно = Ложь;	
		Если Настройки <> Неопределено Тогда
			Попытка
				ЗагружатьЕжедневно = Настройки.ЗагружатьЕжедневно;
			Исключение
			КонецПопытки;	
		КонецЕсли;
		
		Попытка
			Если ЗагружатьЕжедневно Тогда
				ОбработкаЗагрузкаКурсов = Обработки.ЗагрузкаКурсовВалют.Создать();
				Если НЕ ОбработкаЗагрузкаКурсов.КодДоступаАктуален() Тогда
					ФормаОжиданияКурсов = ОбработкаЗагрузкаКурсов.ПолучитьФорму("ФормаОжидания");
					ФормаОжиданияКурсов.Открыть();
					ПодключитьОбработчикОжидания("ОбработчикЗагрузкаКурсов", 20, Истина);
				Иначе
					ОбработкаЗагрузкаКурсов.ЗагрузитьКурсыПоНастройкам();
				КонецЕсли;
				
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;

	Если РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ИспользованиеТорговогоОборудования") Тогда
		мКлиентOnline = Обработки.ТОКлиентККМOnline.Создать();
		мКлиентOnline.НачатьРаботу();
	КонецЕсли;
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.НаборПерсонала)
	   И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "АвтооткрытиеНабораПриЗапускеПрограммы") = Истина Тогда
		Обработки.НаборПерсонала.ПолучитьФорму().Открыть();
	КонецЕсли;
	
	ПолучитьВнешниеКомпонентыПриНеобходимости();
	
	// Календарь бухгалтера. Регламентированная отчетность.
	ПроверитьНапоминанияКалендарьБухгалтераСобытия();
	
	// Открытие дополнительной информации
	Если НЕ НеобходимоОбновлениеИБ Тогда
		Форма = Обработки.ДополнительнаяИнформация.ПолучитьФорму("ФормаРабочийСтол");
		Форма.Открыть();
	КонецЕсли;
	
	// Открытие формы помощника обновления конфигурации 
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		ОбработкаОбновлениеКонфигурации = Обработки.ОбновлениеКонфигурации.Создать();
		ОбработкаОбновлениеКонфигурации.ПроверитьНаличиеОбновлений();
	КонецЕсли;
	
	Если Не ПервыйЗапуск Тогда
		
		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОткрыватьПриЗапускеСписокТекущихЗадачПользователя") Тогда
			Задачи.ЗадачаИсполнителя.ПолучитьФормуСписка().Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
	//Добавление обязательных значений в кеш ОбщиеЗначения
	РаботаСОбщимиПеременными.ДобавитьОбязательныеЗначенияВКэш();
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "АвтооткрытиеУниверсальногоЖурналаДокументов") = Истина Тогда
		Обработки.УниверсальныйЖурналДокументов.ПолучитьФорму().Открыть();
	КонецЕсли;

	глПодключитьМенеджерЗвит1С(Ложь);
	
	//ПодключитьОбработчикОжидания("ВыполнитьЗаписьПревышенийБюджетов", 60);
		//ПодключитьОбработчикОжидания("ВыполнитьЗаписьПревышенийБюджетов", 60);
	//Кабаченко_Смартис
	//Смартис
	//открытие общей формы для Интерфейса зав.склада
	//Если РольДоступна("ЗаведующийСкладом") Тогда
		//НФ = ПолучитьФорму("ОбщаяФорма.ИнтерфейсЗаведующегоСкладом");
		//НФ.Открыть();
	//ИначеЕсли РольДоступна("РольГрузчик") Тогда
		//НФ = ПолучитьФорму("ОбщаяФорма.ИнтерфейсГрузчика");
		//НФ.Открыть();
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
		//|ИЗ
		//|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		//|		ПО СотрудникиОрганизаций.Физлицо = Пользователи.ФизЛицо
		//|ГДЕ
		//|	Пользователи.Ссылка = &СсылкаПользователь";
		//Запрос.УстановитьПараметр("СсылкаПользователь",ПараметрыСеанса.ТекущийПользователь);
		//Результат = Запрос.Выполнить().Выгрузить();
		//Форма=Документы.ЗаданиеНаРаботу.ПолучитьФормуСписка();
		////Форма.РежимРабочегоСтола = Истина;
		//Форма.Открыть();
		//Форма.Отбор.Исполнитель.Использование = Истина;
		//Форма.Отбор.Исполнитель.ВидСравнения = ВидСравнения.Равно;
		//Форма.Отбор.Исполнитель.Значение = Результат[0].Сотрудник;//Перечисления.СтатусыСкладскихПоступлений.Выполнение ;
		/////////////////////////////////////////////////////
		//Форма.Отбор.ВремяОкончанияОбработки.Использование = Истина;
		//Форма.Отбор.ВремяОкончанияОбработки.ВидСравнения = ВидСравнения.Равно;
		//Форма.Отбор.ВремяОкончанияОбработки.Значение = '00010101000000';//Результат[0].Сотрудник;	
		//
		//Форма.Отбор.ПометкаУдаления.Использование = Истина;
		//Форма.Отбор.ПометкаУдаления.ВидСравнения = ВидСравнения.Равно;
		//Форма.Отбор.ПометкаУдаления.Значение = Ложь;//Результат[0].Сотрудник;	
		
		
	//ИначеЕсли РольДоступна("РольКладовщик") Тогда
	//	НФ = ПолучитьФорму("ОбщаяФорма.ИнтерфейсКладовщика");
	//	НФ.Открыть();
	//	
	//КонецЕсли;
	//Смартис
	//Кабаченко
КонецПроцедуры

// Обработать параметр запуска программы.
// Реализация функции может быть расширена для обработки новых параметров.
//
// Параметры
//  ПараметрЗапуска  – Строка – параметр запуска, переданный в конфигурацию 
//								с помощью ключа командной строки /C.
//
// Возвращаемое значение:
//   Булево   – Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска(Знач ПараметрЗапуска)

	// есть ли параметры запуска
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
	ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
	
	Результат = УправлениеСоединениямиИБ.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска);
	Возврат Результат;

КонецФункции 

// Открывает форму текущего пользователя для изменения его настроек.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьФормуТекущегоПользователя() Экспорт

	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("глТекущийПользователь")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан текущий пользователь.");
	Иначе
		Форма = глЗначениеПеременной("глТекущийПользователь").ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуТекущегоПользователя()

// ПроверитьНапоминанияПользователяКалендарьБухгалтераСобытия
//
Процедура ПроверитьНапоминанияКалендарьБухгалтераСобытия() Экспорт
КонецПроцедуры // ПроверитьНапоминанияПользователяКалендарьБухгалтераСобытия
	
// Процедура осуществляет проверку на необходимость обмена данными с заданным интервалом
Процедура ПроверкаОбменаДанными() Экспорт

	Если глЗначениеПеременной("глОбработкаАвтоОбменДанными") = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	ОтключитьОбработчикОжидания("ПроверкаОбменаДанными");
	
	// проводим обмен данными
	глЗначениеПеременной("глОбработкаАвтоОбменДанными").ПровестиОбменДанными(); 
		
	ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));


КонецПроцедуры

// функция вызова формы редактирования настройки файла обновления конфигурации
Процедура ОткрытьФормуРедактированияНастройкиФайлаОбновления() Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		
		Предупреждение("Нет прав на чтение данных константы ""Настройка файла обновления конфигурации""", 30, "Настройка файла обновления конфигурации");		
		Возврат;
		
	КонецЕсли;

	ФормаРедактирования = ПолучитьОбщуюФорму("НастройкаФайлаОбновленияКонфигурации");
	ФормаРедактирования.СтруктураПараметров = ПроцедурыОбменаДанными.ПолучитьНастройкиДляФайлаОбновленияКонфигурации(); 
	ФормаРедактирования.Открыть();
	
КонецПроцедуры

// Функция возвращает объект для взаимодействия с торговым оборудованием.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  <ОбработкаОбъект> - Объект для взаимодействия с торговым оборудованием.
//
Функция ПолучитьСерверТО() Экспорт

	Если глСерверТО = Неопределено Тогда
		глСерверТО = Обработки.ТОСервер.Создать();
	КонецЕсли;

	Возврат глСерверТО;

КонецФункции // ПолучитьСерверТО()

// процедура служит для поддержки работы регламентных заданий в файловой версии
Процедура ПоддержкаРегламентныхЗаданиеДляФайловойВерсии() Экспорт
	
	ВыполнитьОбработкуЗаданий();
	
КонецПроцедуры

// Процедура подключает внешние компоненты, которые поставляются с конфигурацией.
//
Процедура ПолучитьВнешниеКомпонентыПриНеобходимости()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеКомпоненты.ИмяФайла,
	|	ВнешниеКомпоненты.ДатаИзмененияФайла
	|ИЗ
	|	РегистрСведений.ВнешниеКомпоненты КАК ВнешниеКомпоненты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Файл = Новый Файл(КаталогПрограммы()+ Выборка.ИмяФайла);
		
		Если Не Файл.Существует() Или Не Файл.ПолучитьВремяИзменения() = Выборка.ДатаИзмененияФайла Тогда
			НаборЗаписей = РегистрыСведений.ВнешниеКомпоненты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИмяФайла.Установить(Выборка.ИмяФайла);
			НаборЗаписей.Прочитать();
			
			Попытка
				НаборЗаписей[0].ХранилищеФайла.Получить().Записать(КаталогПрограммы()+ Выборка.ИмяФайла);
				Файл = Новый Файл(КаталогПрограммы()+ Выборка.ИмяФайла);
				Файл.УстановитьВремяИзменения(Выборка.ДатаИзмененияФайла);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьВнешниеКомпонентыПриНеобходимости()

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в данной процедуре.
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)

	Если Источник = "Zvit1C" Тогда
		
		Если глМенеджерЗвит1С <> Неопределено Тогда
		
			глМенеджерЗвит1С.ОбработкаВнешнегоСобытияЗвит1С(Источник, Событие, Данные);	
		
		КонецЕсли;
		
	Иначе
		
		Если мКлиентOnline <> Неопределено Тогда
			мКлиентOnline.ВнешнееСобытие(Источник, Событие, Данные);
		КонецЕсли;

		ПолучитьСерверТО().ЗавершитьОбработкуВнешнегоСобытия(Источник, Событие, Данные);
		
	КонецЕсли;

КонецПроцедуры // ВнешнееСобытие()

// Процедура выполняет запуск отчетов, у которых установлен
// признак "Формировать при входе в систему"
//
Процедура СформироватьОтчеты()

	//МониторНачалоСеанса = ВосстановитьЗначение("МониторНачалоСеанса");

	//Если МониторНачалоСеанса <> Неопределено
	//	И МониторНачалоСеанса Тогда

		ВыбраннаяНастройка = ВосстановитьЗначение( "ОбработкаРапортРуководителю_Настройки");
		Если Не ВыбраннаяНастройка = Неопределено Тогда

			Параметры = Неопределено;
			Если ВыбраннаяНастройка.Свойство("_ДанныеФормы", Параметры) Тогда
				АвтоЗапуск = Неопределено;
				Параметры.Свойство("ФормироватьПриСтартеСистемы", АвтоЗапуск);
				Если Не АвтоЗапуск = Неопределено И АвтоЗапуск Тогда
					НовыйОтчет = Отчеты.РапортРуководителю.Создать();
					НовыйОтчетФорма = НовыйОтчет.ПолучитьФорму("ФормаГлавная");
					НовыйОтчетФорма.НачальноеЗначениеВыбора = Истина;
					НовыйОтчетФорма.Открыть();
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
	//	
	//КонецЕсли;

КонецПроцедуры

// Процедура проверяет и при необходимости подключает обработчик ожидания
// на запуск процедуры ПроверитьНапоминания()
//
// Параметры:
//  Нет.
//
Процедура ПроверитьПодключениеОбработчикаОжидания(ПроверятьДеньРождения = Ложь) Экспорт
	
	ИнтервалПроверкиНапоминанийВСекундах = Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();
	
	Если глЗначениеПеременной("глТекущийПользователь") <> Неопределено
		 И ТипЗнч(глЗначениеПеременной("глТекущийПользователь")) = Тип("СправочникСсылка.Пользователи")
		 И НЕ глЗначениеПеременной("глТекущийПользователь").Пустая()
		 И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьНапоминания")
		 И ИнтервалПроверкиНапоминанийВСекундах > 0 Тогда
		 
		ПодключитьОбработчикОжидания("ПроверитьНапоминания", ИнтервалПроверкиНапоминанийВСекундах);

		УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"), ПроверятьДеньРождения);

	Иначе
		
		ОтключитьОбработчикОжидания("ПроверитьНапоминания");
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура проверяет Напоминания
//
Процедура ПроверитьНапоминания() Экспорт
	
	УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"));
	
КонецПроцедуры

Процедура ОбработчикЗагрузкаКурсов() Экспорт
	
	Если НЕ ФормаОжиданияКурсов = Неопределено Тогда
		Если ФормаОжиданияКурсов.Открыта() Тогда
			ФормаОжиданияКурсов.Закрыть();
			ФормаОжиданияКурсов = Неопределено;
			#Если Клиент Тогда
				ЗапуститьПриложение("http://finance.ua/ru/price/~/1c");
			#КонецЕсли	
			ОбработкаЗагрузкаКурсов = Обработки.ЗагрузкаКурсовВалют.Создать();
			ОбработкаЗагрузкаКурсов.ЗагрузитьКурсыПоНастройкам();
		КонецЕсли; 
		ФормаОжиданияКурсов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция глПодключитьМенеджерЗвит1С(ВыводитьСообщенияОбОшибках = Истина) Экспорт
		
	Если глМенеджерЗвит1С <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
		
	// Подключение желательно,
	ИсточникОтчета = "РегламентированныйОтчетМенеджерЗвит1С";
	
	ПравоДоступаКОтчету = РегламентированнаяОтчетность.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	Если ПравоДоступаКОтчету = Ложь ИЛИ ПравоДоступаКОтчету = Неопределено Тогда
		Если ВыводитьСообщенияОбОшибках Тогда                                                                                                                            
			Предупреждение(НСтр("ru='Недостаточно прав на использование модуля взаимодействия с ""1С-Звит""!';uk='Недостатньо прав на використання модуля взаємодії зі ""1С-Звіт""!'"));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	глМенеджерЗвит1С = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	
	Если ТипЗнч(глМенеджерЗвит1С) = Тип("ОтчетМенеджер.РегламентированныйОтчетМенеджерЗвит1С") Тогда
		глМенеджерЗвит1С = глМенеджерЗвит1С.Создать();
	КонецЕсли;
	
	Если глМенеджерЗвит1С = Неопределено Тогда
		Если ВыводитьСообщенияОбОшибках Тогда
			Сообщить(НСтр("ru='Не удалось получить менеджер ""1С-Звит""!';uk='Не вдалося отримати менеджер ""1С-Звіт""!'"), СтатусСообщения.Важное);
			// Возможно это ошибка для которой детальная информация не должна выводиться
			// выведем ее принудительно
			НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ИсточникОтчета);
			Если НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
				Сообщить(НСтр("ru = 'В справочнике ""Регламентированные отчеты"" не найден менеджер по работе с системой ""1С-Звит""'; uk = 'У довіднику ""Регламентовані звіти"" не знайдено менеджер по роботі з системою ""1С-Звіт""'"));
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не глМенеджерЗвит1С.Инициализация(ВыводитьСообщенияОбОшибках) Тогда		
		глМенеджерЗвит1С = Неопределено;				
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ВыполнитьЗаписьПревышенийБюджетов() Экспорт
	//Если глТаблицаПревышенийБюджетов <> Неопределено Тогда
	//	НаборЗаписей = РегистрыСведений.ДокументыСПревышениемБюджета.СоздатьНаборЗаписей();
	//	
	//	тзДокументы = глТаблицаПревышенийБюджетов.Скопировать(, "Документ");
	//	тзДокументы.Свернуть("Документ");
	//	
	//	Для каждого стрДокументы Из тзДокументы Цикл
	//		НаборЗаписей.Отбор.Документ.Установить(стрДокументы.Документ);
	//		НаборЗаписей.Записать();
	//	КонецЦикла;
	//	
	//	Для каждого стрТаб Из глТаблицаПревышенийБюджетов Цикл
	//		НаборЗаписей.Отбор.Документ.Установить(стрТаб.Документ);
	//		//НаборЗаписей.Отбор.ПериодДокумента.Установить(стрТаб.ПериодДокумента);
	//		НаборЗаписей.Отбор.Подразделение.Установить(стрТаб.Подразделение);
	//		НаборЗаписей.Отбор.СтатьяЗатрат.Установить(стрТаб.СтатьяЗатрат);
	//		НаборЗаписей.Прочитать();
	//		
	//		Если НаборЗаписей.Количество() = 0 Тогда
	//			Запись = НаборЗаписей.Добавить();
	//		Иначе
	//			Запись = НаборЗаписей[0];
	//		КонецЕсли;
	//		Запись.Документ = стрТаб.Документ;
	//		Запись.Подразделение = стрТаб.Подразделение;
	//		Запись.ПериодДокумента = стрТаб.ПериодДокумента;
	//		Запись.СтатьяЗатрат = стрТаб.СтатьяЗатрат;
	//		Запись.Сумма = стрТаб.Сумма;
	//		НаборЗаписей.Записать();
	//		ЗаписьЖурналаРегистрации("Превышение бюджета.Запись в регистр", УровеньЖурналаРегистрации.Информация, стрТаб.Документ.Метаданные(), стрТаб.Документ, СокрЛП(стрТаб.Документ));
	//	КонецЦикла;
	//	
	//	глТаблицаПревышенийБюджетов.Очистить();
	//КонецЕсли;	
КонецПроцедуры



//глСоответствиеТекстовЭлектронныхПисем = Новый Соответствие;

АдресРесурсовОбозревателя = "EnterpriseUkr";