Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

Функция ВидрасчетаПоВидуОтпуска(ВидОтпуска)
	
	Если НЕ ЗначениеЗаполнено(ВидОтпуска) Тогда
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	   |	ОсновныеНачисленияОрганизаций.Ссылка,
	   |	ОсновныеНачисленияОрганизаций.Предопределенный КАК Предопределенный,
	   |	ОсновныеНачисленияОрганизаций.ВидОтпуска
	   |ИЗ
	   |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	   |
	   |ГДЕ
	   |   ОсновныеНачисленияОрганизаций.ВидОтпуска = &ВидОтпуска
	   |
	   |УПОРЯДОЧИТЬ ПО
	   |	Предопределенный УБЫВ";
	 Запрос.УстановитьПараметр("ВидОтпуска", ВидОтпуска);
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 Если Выборка.Следующий() Тогда
		 Возврат Выборка.ссылка;
	 Иначе
		 Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
	 КонецЕсли;	 
	
КонецФункции	

// Формирует запрос по регистру СостояниеРаботниковОрганизаций
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапрос()

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ОтбиратьСобытияПоДокументу Тогда
		ДатаН = КадровыйДокумент.Дата;
		Запрос.УстановитьПараметр("Регистратор",			КадровыйДокумент);
		Запрос.УстановитьПараметр("ДатаНачала",				НачалоДня(ДатаН));
		Запрос.УстановитьПараметр("ДатаОкончания",			КонецДня(ДатаН));
	Иначе
		Запрос.УстановитьПараметр("ДатаНачала",				ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания",			КонецДня(ДатаОкончания));
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",	ПодразделениеОрганизации);
	
	// Все возможные значения перечисления СостоянияРаботникаОрганизации
	ЗначенияПеречисления = Метаданные.Перечисления.СостоянияРаботникаОрганизации.ЗначенияПеречисления;
	Для Каждого ТекущееЗначение Из ЗначенияПеречисления Цикл
		Запрос.УстановитьПараметр(ТекущееЗначение.Имя, Перечисления.СостоянияРаботникаОрганизации[ТекущееЗначение.Имя]);
	КонецЦикла;

	// Все возможные значения перечисления СостоянияРаботникаОрганизации
	ЗначенияПеречисления = Метаданные.Перечисления.НамеченныеСобытияПоПерсоналу.ЗначенияПеречисления;
	Для Каждого ТекущееЗначение Из ЗначенияПеречисления Цикл
		Запрос.УстановитьПараметр(ТекущееЗначение.Имя + "Намеченный", Перечисления.НамеченныеСобытияПоПерсоналу[ТекущееЗначение.Имя]);
	КонецЦикла;
	
	// Элементы из классификатора использования рабочего времени
	МассивНеоплачиваемыеОтпуска = Новый Массив();
	МассивНеоплачиваемыеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя);
	МассивНеоплачиваемыеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству);
	МассивНеоплачиваемыеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпускБезОплаты);
	
	Запрос.УстановитьПараметр("УчетВремениНеоплачиваемыеОтпуска",					МассивНеоплачиваемыеОтпуска);
	
	МассивОплачиваемыеУчебныеОтпуска = Новый Массив();
	МассивОплачиваемыеУчебныеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение);
	Запрос.УстановитьПараметр("УчетВремениОплачиваемыеУчебныеОтпуска", МассивОплачиваемыеУчебныеОтпуска);
                                                          
	// Способы расчета
	Запрос.УстановитьПараметр("РасчетПоСреднемуЗаработку", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	МассивРасчетыОтпуска = Новый Массив;                     
	//МассивРасчетыОтпуска.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	//МассивРасчетыОтпуска.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	МассивРасчетыОтпуска.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);

	Запрос.УстановитьПараметр("РасчетыОтпуска", МассивРасчетыОтпуска);
	                                    
	// Определим периоды смены (реальные или намеченные) состояния работников за указанный пользователем интервал.
	// Выбираем намеченные события, зарегистрированные тем же регистратором.
	СостояниеРаботниковТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостояниеРаботников.Сотрудник,
	|	СостояниеРаботников.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	СостояниеРаботников.Период КАК ДатаНачала,
	|	ЕСТЬNULL(МИНИМУМ(ДОБАВИТЬКДАТЕ(СостояниеБудущее.Период, ДЕНЬ, -1)), БудущиеНамеченныеСобытия.Период) КАК ДатаОкончания,
	|	СостояниеРаботников.Состояние КАК Состояние,
	|	СостояниеРаботников.Регистратор КАК КадровыйДокумент,
	|	ОтпускаРаботниковОрганизации.ВидОтпуска,
	|	ОтпускаРаботниковОрганизации.РабочийГодС,
	|	ОтпускаРаботниковОрганизации.РабочийГодПо
	|ПОМЕСТИТЬ ВТСостояниеРаботников
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаРаботниковОрганизации
	|		ПО СостояниеРаботников.Регистратор = ОтпускаРаботниковОрганизации.Ссылка
	|			И СостояниеРаботников.Период = ОтпускаРаботниковОрганизации.ДатаНачала
	|			И СостояниеРаботников.Сотрудник = ОтпускаРаботниковОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СостояниеРаботников.Сотрудник КАК Сотрудник,
	|			СостояниеРаботников.Период КАК Период,
	|			СостояниеРаботников.Период КАК ДатаНачала
	|		ИЗ
	|			РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	|		ГДЕ
	|			СостояниеРаботников.Организация = &ГоловнаяОрганизация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СостояниеРаботников.Сотрудник,
	|			СостояниеРаботников.ПериодЗавершения,
	|			СостояниеРаботников.Период
	|		ИЗ
	|			РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковПроверка
	|				ПО СостояниеРаботниковПроверка.Период > СостояниеРаботников.Период
	|					И СостояниеРаботниковПроверка.Период <= СостояниеРаботников.ПериодЗавершения
	|					И СостояниеРаботников.Сотрудник = СостояниеРаботниковПроверка.Сотрудник
	|		ГДЕ
	|			СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			И СостояниеРаботниковПроверка.Сотрудник ЕСТЬ NULL 
	|			И СостояниеРаботников.Организация = &ГоловнаяОрганизация) КАК СостояниеБудущее
	|		ПО СостояниеРаботников.Период < СостояниеБудущее.Период
	|			И СостояниеРаботников.Сотрудник = СостояниеБудущее.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(ДОБАВИТЬКДАТЕ(НамеченныеСобытия.ДатаИзменения, ДЕНЬ, -1)) КАК Период,
	|			СостояниеРаботников.Регистратор КАК Регистратор,
	|			СостояниеРаботников.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НамеченныеСобытияПоПерсоналу КАК НамеченныеСобытия
	|				ПО СостояниеРаботников.Регистратор = НамеченныеСобытия.Регистратор
	|					И СостояниеРаботников.Период <= НамеченныеСобытия.ДатаИзменения
	|					И (ВЫБОР
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.ОтпускЕжегодный)
	|							ТОГДА ИСТИНА
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.ОтпускУчебный)
	|							ТОГДА ИСТИНА
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.ОтпускУчебныйНеоплачиваемый)
	|							ТОГДА ИСТИНА
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.ОтпускУчебныйНеоплачиваемый)
	|							ТОГДА ИСТИНА
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.Командировка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ)
	|					И СостояниеРаботников.Сотрудник = НамеченныеСобытия.Сотрудник
	|		ГДЕ
	|			СостояниеРаботников.Организация = &ГоловнаяОрганизация";
	Если ОтбиратьСобытияПоДокументу Тогда
		СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|			И СостояниеРаботников.Регистратор = &Регистратор";
	Иначе
		СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|			И СостояниеРаботников.Регистратор.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	КонецЕсли;	
	СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СостояниеРаботников.Регистратор,
	|			СостояниеРаботников.НомерСтроки) КАК БудущиеНамеченныеСобытия
	|		ПО СостояниеРаботников.Регистратор = БудущиеНамеченныеСобытия.Регистратор
	|			И СостояниеРаботников.НомерСтроки = БудущиеНамеченныеСобытия.НомерСтроки
	|ГДЕ
	|	(НЕ СостояниеРаботников.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.НеРаботает), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком)))
	|	И СостояниеРаботников.Организация = &ГоловнаяОрганизация";
	Если ОтбиратьСобытияПоДокументу Тогда
		СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|	И СостояниеРаботников.Регистратор = &Регистратор";
	Иначе
		СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|	И СостояниеРаботников.Регистратор.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	КонецЕсли;	
	СостояниеРаботниковТекст = СостояниеРаботниковТекст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	СостояниеРаботников.Организация,
	|	СостояниеРаботников.Регистратор,
	|	СостояниеРаботников.Состояние,
	|	СостояниеРаботников.Период,
	|	БудущиеНамеченныеСобытия.Период,
	|	ОтпускаРаботниковОрганизации.ВидОтпуска,
	|	ОтпускаРаботниковОрганизации.РабочийГодС,
	|	ОтпускаРаботниковОрганизации.РабочийГодПо,
	|	СостояниеРаботников.Сотрудник";
	Запрос.Текст = СостояниеРаботниковТекст;
	Запрос.Выполнить();
	
	
	// Составим список возможных расчетных документов за соответствующий период регистрации
	СписокРасчетныхДокументовТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БольничныйЛист.Сотрудник 						КАК Сотрудник,
	|	БольничныйЛист.Сотрудник.Физлицо 				КАК Физлицо,
	|	БольничныйЛист.ДатаНачала						КАК ДатаНачала,
	|	БольничныйЛист.ДатаОкончания					КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Справочник.ПричиныНетрудоспособности.ПоБеременностиИРодам)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание)
	|	КОНЕЦ 											КАК Состояние,
	|	БольничныйЛист.Ссылка							КАК РасчетныйДокумент,
	|	NULL 											КАК ВидРасчета,
	|	БольничныйЛист.ПричинаНетрудоспособности		КАК ПричинаНетрудоспособности,
	|	БольничныйЛист.ПроцентОплаты					КАК ПроцентОплаты,
	|	БольничныйЛист.ПервичныйБольничныйЛист			КАК ПервичныйБольничныйЛист,
	|	NULL											КАК ВидПростоя,
	|	NULL                                            КАК ВидОтпуска
	|ПОМЕСТИТЬ ВТСписокРасчетныхДокументов
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаОкончания, МЕСЯЦ)
	|	И ВЫБОР
	|			КОГДА БольничныйЛист.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА БольничныйЛист.Организация
	|			ИНАЧЕ БольничныйЛист.Организация.ГоловнаяОрганизация
	|		КОНЕЦ = &ГоловнаяОрганизация
	|	И (НЕ БольничныйЛист.ПометкаУдаления)
	|	И (БольничныйЛист.Сотрудник, ВЫБОР
	|		КОГДА БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Справочник.ПричиныНетрудоспособности.ПоБеременностиИРодам)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам)
	|		КОНЕЦ) В
	|			(ВЫБРАТЬ
	|				ВТСостояниеРаботников.Сотрудник,
	|				ВТСостояниеРаботников.Состояние
	|			ИЗ
	|				ВТСостояниеРаботников КАК ВТСостояниеРаботников)

	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НевыходыНачисления.Сотрудник								КАК Сотрудник,
	|	НевыходыНачисления.Сотрудник.Физлицо						КАК ФизЛицо,
	|	НевыходыНачисления.ДатаНачала								КАК ДатаНачала,
	|	НевыходыНачисления.ДатаОкончания							КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&УчетВремениНеоплачиваемыеОтпуска)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты)
	|		КОГДА НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый)
	|		КОГДА НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Простой)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине)
	|	КОНЕЦ														КАК Состояние,
	|	НевыходыНачисления.Ссылка									КАК РасчетныйДокумент,
	|	НевыходыНачисления.ВидРасчета								КАК ВидРасчета,
	|	NULL														КАК ПричинаНетрудоспособности,
	|	NULL														КАК ПроцентОтплаты,
	|	NULL														КАК ПервичныйБольничныйЛист,
	|	NULL														КАК ВидПростоя,
	|	NULL                                            			КАК ВидОтпуска
	|ИЗ
	|	Документ.НевыходыВОрганизациях.Начисления КАК НевыходыНачисления
	|ГДЕ
	|	НевыходыНачисления.Ссылка.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаОкончания, МЕСЯЦ)
	|	И ВЫБОР
	|			КОГДА НевыходыНачисления.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА НевыходыНачисления.Ссылка.Организация
	|			ИНАЧЕ НевыходыНачисления.Ссылка.Организация.ГоловнаяОрганизация
	|		КОНЕЦ = &ГоловнаяОрганизация
	|	И (НЕ НевыходыНачисления.Ссылка.ПометкаУдаления)
	|	И (НевыходыНачисления.Сотрудник, ВЫБОР
	|			КОГДА НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&УчетВремениНеоплачиваемыеОтпуска)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты)
	|			КОГДА НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый)
	|			КОГДА НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Простой)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине)
	|		КОНЕЦ) В
	|			(ВЫБРАТЬ
	|				ВТСостояниеРаботников.Сотрудник,
	|				ВТСостояниеРаботников.Состояние
	|			ИЗ
	|				ВТСостояниеРаботников КАК ВТСостояниеРаботников)

	|
	|ОБЪЕДИНИТЬ ВСЕ
	////|
	|ВЫБРАТЬ
	|	НачислениеОтпуска.Ссылка.Сотрудник			КАК Сотрудник,
	|	НачислениеОТпуска.Ссылка.Сотрудник.ФизЛицо 	КАК ФизЛицо,
	|	НачислениеОтпуска.ДатаНачала		КАК ДатаНачала,
	|	НачислениеОтпуска.ДатаОкончания	КАК ДатаОкончания,
	|	НачислениеОтпуска.ВидРасчета.ВидОтпуска.СостояниеСотрудника	КАК Состояние,
	|	НачислениеОтпуска.Ссылка 					КАК РасчетныйДокумент,
	|	НачислениеОтпуска.ВидРасчета				КАК ВидРасчета,
	|	NULL										КАК ПричинаНетрудоспособности,
	|	NULL										КАК ПроцентОплаты,
	|	NULL										КАК ПервичныйБольничныйЛист,
	|	NULL										КАК ВидПростоя,
	|	НачислениеОтпуска.ВидРасчета.ВидОтпуска     КАК ВидОтпуска
	|		
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.Отпуска КАК НачислениеОтпуска
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеРаботников КАК ВТСостояниеРаботников
	|	По  ВТСостояниеРаботников.Сотрудник =     НачислениеОтпуска.Ссылка.Сотрудник
	|	ГДЕ
	|	НачислениеОтпуска.Ссылка.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаОкончания, МЕСЯЦ)
	|	И ВЫБОР
	|			КОГДА НачислениеОтпуска.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА НачислениеОтпуска.Ссылка.Организация
	|			ИНАЧЕ НачислениеОтпуска.Ссылка.Организация.ГоловнаяОрганизация
	|		КОНЕЦ = &ГоловнаяОрганизация
	|	И (НЕ НачислениеОтпуска.Ссылка.ПометкаУдаления)
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаПоСреднему.Сотрудник								КАК Сотрудник,
	|	ОплатаПоСреднему.Сотрудник.Физлицо						КАК ФизЛицо,
	|	ОплатаПоСреднему.ДатаНачала								КАК ДатаНачала,
	|	ОплатаПоСреднему.ДатаОкончания							КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка)
	|		ИНАЧЕ NULL
	|	КОНЕЦ													 КАК Состояние,
	|	ОплатаПоСреднему.Ссылка									 КАК РасчетныйДокумент,
	|	ОплатаПоСреднему.ВидРасчета								 КАК ВидРасчета,
	|	NULL													 КАК ПричинаНетрудоспособности,
	|	ОплатаПоСреднему.ПроцентОплаты							 КАК ПроцентОплаты,
	|	NULL													 КАК ПервичныйБольничныйЛист,
	|	NULL													 КАК ВидПростоя,
	|	NULL                                            		 КАК ВидОтпуска	
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднему
	|ГДЕ
	|	ОплатаПоСреднему.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаОкончания, МЕСЯЦ)
	|	И ВЫБОР
	|			КОГДА ОплатаПоСреднему.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ОплатаПоСреднему.Организация
	|			ИНАЧЕ ОплатаПоСреднему.Организация.ГоловнаяОрганизация
	|		КОНЕЦ = &ГоловнаяОрганизация
	|	И (НЕ ОплатаПоСреднему.ПометкаУдаления)
	|	И (ОплатаПоСреднему.Сотрудник, ВЫБОР
	|			КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка)
	|			ИНАЧЕ NULL
	|		КОНЕЦ) В
	|			(ВЫБРАТЬ
	|				ВТСостояниеРаботников.Сотрудник,
	|				ВТСостояниеРаботников.Состояние
	|			ИЗ
	|				ВТСостояниеРаботников КАК ВТСостояниеРаботников)


	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрацияПростоев.Сотрудник								КАК Сотрудник,
	|	РегистрацияПростоев.Сотрудник.Физлицо						КАК ФизЛицо,
	|	РегистрацияПростоев.ДатаНачала								КАК ДатаНачала,
	|	РегистрацияПростоев.ДатаОкончания							КАК ДатаОкончания,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой) КАК Состояние,
	|	РегистрацияПростоев.Ссылка									КАК РасчетныйДокумент,
	|	NULL														КАК ВидРасчета,
	|	NULL														КАК ПричинаНетрудоспособности,
	|	NULL														КАК ПроцентОплаты,
	|	NULL														КАК ПервичныйБольничныйЛист,
	|	РегистрацияПростоев.ВидПростоя								КАК ВидПростоя,
	|	NULL                                            			КАК ВидОтпуска
	|ИЗ
	|	Документ.РегистрацияПростоевВОрганизациях КАК РегистрацияПростоев
	|ГДЕ
	|	РегистрацияПростоев.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаОкончания, МЕСЯЦ)
	|	И ВЫБОР
	|			КОГДА РегистрацияПростоев.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА РегистрацияПростоев.Организация
	|			ИНАЧЕ РегистрацияПростоев.Организация.ГоловнаяОрганизация
	|		КОНЕЦ = &ГоловнаяОрганизация
	|	И (НЕ РегистрацияПростоев.ПометкаУдаления) 
	|	И (РегистрацияПростоев.Сотрудник, ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой)) В
	|			(ВЫБРАТЬ
	|				ВТСостояниеРаботников.Сотрудник,
	|				ВТСостояниеРаботников.Состояние
	|			ИЗ
	|				ВТСостояниеРаботников КАК ВТСостояниеРаботников)

	|";
	
	Запрос.Текст = СписокРасчетныхДокументовТекст;
	Запрос.Выполнить();
	                                          	
	// Шаблон запроса для выбора подходящего вида расчета
	ТекстЗапросаВидРасчета = "
	|(ВЫБРАТЬ
	|	МИНИМУМ(ОсновныеНачисления.Ссылка) КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.СпособРасчета <<СпособРасчета>> И
	|	ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени <<Обозначение>>)
	|";
	
	//Соединяем кадровые и расчетные документы
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА (КадровыеРасчетныеДанные.РасчетныйДокумент.Ссылка) ЕСТЬ НЕ NULL И (КадровыеРасчетныеДанные.РасчетныйДокумент.Проведен) = Истина ТОГДА ЛОЖЬ КОГДА (КадровыеРасчетныеДанные.КадровыйДокумент.Ссылка) ЕСТЬ НЕ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Отметка,
	|	ЕСТЬNULL(КадровыеРасчетныеДанные.КадровыеДанныеСостояние, КадровыеРасчетныеДанные.РасчетныеДанныеСостояние) 		КАК Неявка,
	|	ЕСТЬNULL(КадровыеРасчетныеДанные.КадровыеДанныеСотрудник, КадровыеРасчетныеДанные.РасчетныеДанныеСотрудник)			КАК Сотрудник,
	|	ЕСТЬNULL(КадровыеРасчетныеДанные.КадровыеДанныеФизЛицо, КадровыеРасчетныеДанные.РасчетныеДанныеФизЛицо) 		    КАК ФизЛицо,
	|	ЕСТЬNULL(КадровыеРасчетныеДанные.КадровыеДанныеДатаНачала, КадровыеРасчетныеДанные.РасчетныеДанныеДатаНачала)		КАК ДатаНачала,
	|	ЕСТЬNULL(КадровыеРасчетныеДанные.КадровыеДанныеДатаОкончания, КадровыеРасчетныеДанные.РасчетныеДанныеДатаОкончания) КАК ДатаОкончания,
	
	|   КадровыеРасчетныеДанные.РасчетныйДокумент			КАК РасчетныйДокумент,
	|	КадровыеРасчетныеДанные.КадровыйДокумент			КАК КадровыйДокумент,
	|	КадровыеРасчетныеДанные.ВидОтпуска   				КАК ВидОтпуска,
	|	КадровыеРасчетныеДанные.РабочийГодС					КАК РабочийГодС,
	|	КадровыеРасчетныеДанные.РабочийГодПо				КАК РабочийГодПо,
	
	|	КадровыеРасчетныеДанные.ВидРасчета					КАК ВидРасчета,
	|	КадровыеРасчетныеДанные.ПричинаНетрудоспособности	КАК ПричинаНетрудоспособности,
	|	КадровыеРасчетныеДанные.ПроцентОплаты				КАК ПроцентОплаты,
	|	КадровыеРасчетныеДанные.ПервичныйБольничныйЛист		КАК ПервичныйБольничныйЛист,
	|	КадровыеРасчетныеДанные.ВидПростоя					КАК ВидПростоя
	|ПОМЕСТИТЬ
	|	ВТКадровыеРасчетныеДанные
	|ИЗ
	|(
	|		ВЫБРАТЬ
	|			КадровыеДанные.Состояние					КАК КадровыеДанныеСостояние,
	|			РасчетныеДанные.Состояние					КАК РасчетныеДанныеСостояние,
	|			КадровыеДанные.Сотрудник 					КАК КадровыеДанныеСотрудник,
	|			РасчетныеДанные.Сотрудник					КАК РасчетныеДанныеСотрудник,
	|			КадровыеДанные.ФизЛицо						КАК КадровыеДанныеФизЛицо,
	|			РасчетныеДанные.ФизЛицо						КАК РасчетныеДанныеФизЛицо,
	|			КадровыеДанные.ДатаНачала					КАК КадровыеДанныеДатаНачала,
	|			РасчетныеДанные.ДатаНачала					КАК РасчетныеДанныеДатаНачала,
    |			КадровыеДанные.ДатаОкончания				КАК КадровыеДанныеДатаОкончания,
	|			РасчетныеДанные.ДатаОкончания				КАК РасчетныеДанныеДатаОкончания,
	|			КадровыеДанные.КадровыйДокумент				КАК КадровыйДокумент,
	|			РасчетныеДанные.РасчетныйДокумент			КАК РасчетныйДокумент,
	|			КадровыеДанные.ВидОтпуска					КАК ВидОтпуска,
	|			КадровыеДанные.РабочийГодС 					КАК РабочийГодС,
	|			КадровыеДанные.РабочийГодПо 				КАК РабочийГодПо,
	
	|			РасчетныеДанные.ВидРасчета					КАК ВидРасчета,
	|			РасчетныеДанные.ПричинаНетрудоспособности	КАК ПричинаНетрудоспособности,
	|			РасчетныеДанные.ПроцентОплаты				КАК ПроцентОплаты,
	|			РасчетныеДанные.ПервичныйБольничныйЛист		КАК ПервичныйБольничныйЛист,
	|			РасчетныеДанные.ВидПростоя					КАК ВидПростоя
	|		ИЗ
	|			ВТСостояниеРаботников КАК КадровыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ   
	|			ВТСписокРасчетныхДокументов КАК РасчетныеДанные
	|			ПО РасчетныеДанные.Состояние = КадровыеДанные.Состояние
	|			 И РасчетныеДанные.ВидОтпуска = КадровыеДанные.ВидОтпуска
	|			 И РасчетныеДанные.ДатаНачала = КадровыеДанные.ДатаНачала ИЛИ РасчетныеДанные.ДатаОкончания = КадровыеДанные.ДатаОкончания
	|			И РасчетныеДанные.Сотрудник = КадровыеДанные.Сотрудник
	|)КАК КадровыеРасчетныеДанные";
	Запрос.Выполнить();
	
	
	ТекстЗапроса ="
	|ВЫБРАТЬ
	|	КадровыеРасчетныеДанные.Отметка				КАК Отметка,
	|	КадровыеРасчетныеДанные.Сотрудник			КАК Сотрудник,
	|	КадровыеРасчетныеДанные.Физлицо				КАК ФизЛицо,
	|	КадровыеРасчетныеДанные.ДатаНачала			КАК ДатаНачала,	
	|	КадровыеРасчетныеДанные.ДатаОкончания		КАК ДатаОкончания,
	|	КадровыеРасчетныеДанные.Неявка				КАК Неявка,
	|	КадровыеРасчетныеДанные.КадровыйДокумент	КАК КадровыйДокумент,
	|	ВЫБОР 
	
	|		КОГДА НЕ (РасчетныйДокумент ЕСТЬ NULL) ТОГДА РасчетныйДокумент
	|		КОГДА Неявка В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание),ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам)) ТОГДА ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|		КОГДА Неявка В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)) ТОГДА ЗНАЧЕНИЕ(Документ.НачислениеОтпускаРаботникамОрганизаций.ПустаяСсылка)
	|		КОГДА Неявка В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВынужденныйПрогул), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ГосударственныеОбязанности), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемые)) ТОГДА ЗНАЧЕНИЕ(Документ.ОплатаПоСреднемуЗаработку.ПустаяСсылка)
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой) ТОГДА ЗНАЧЕНИЕ(Документ.РегистрацияПростоевВОрганизациях.ПустаяСсылка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.НевыходыВОрганизациях.ПустаяСсылка)
	|	КОНЕЦ КАК РасчетныйДокумент,
	|	ВЫБОР 
	|		КОГДА НЕ (РасчетныйДокумент ЕСТЬ NULL) ТОГДА КадровыеРасчетныеДанные.ВидРасчета
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание) ТОГДА NULL
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам) ТОГДА NULL
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка) ТОГДА ПВРКомандировка.ВидРасчета
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный) ТОГДА NULL
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный) ТОГДА NULL
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый) ТОГДА NULL
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты) ТОГДА NULL
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком) ТОГДА NULL
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине) ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.НевыходРегл)
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ГосударственныеОбязанности) ТОГДА ПВРГосударственныеОбязанности.ВидРасчета
	|		КОГДА Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой) ТОГДА NULL
	|	КОНЕЦ КАК ВидРасчета,
	|	КадровыеРасчетныеДанные.ВидОтпуска	КАК ВидДОтпуска,
	|	КадровыеРасчетныеДанные.РабочийГодС					КАК РабочийГодС,
	|	КадровыеРасчетныеДанные.РабочийГодПо				КАК РабочийГодПо,
	|	КадровыеРасчетныеДанные.ПричинаНетрудоспособности	КАК ПричинаНетрудоспособности,
	|	КадровыеРасчетныеДанные.ПроцентОплаты				КАК ПроцентОплаты,
	|	КадровыеРасчетныеДанные.ПервичныйБольничныйЛист		КАК ПервичныйБольничныйЛист,			
	|	КадровыеРасчетныеДанные.ВидПростоя					КАК ВидПростоя,
	|	КадровыеРасчетныеДанные.ВидОтпуска					КАК ВидОтпуска
	|ИЗ ВТКадровыеРасчетныеДанные  КАК КадровыеРасчетныеДанные
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчета, "<<СпособРасчета>>", "= ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)"), "<<Обозначение>>", " = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)") + " КАК ПВРКомандировка
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчета, "<<СпособРасчета>>", "В (&РасчетыОтпуска)"), "<<Обозначение>>", "В (&УчетВремениОплачиваемыеУчебныеОтпуска)") + " КАК ПВРОтпускУчебный
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчета, "<<СпособРасчета>>", "= ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)"), "<<Обозначение>>", " = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеотработанноеВремяПоЗаконодательству)") + " КАК ПВРГосударственныеОбязанности
	|		ПО ИСТИНА";
	Запрос.Текст = ТекстЗапроса;
	
		// Условие на подразделение 
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаОкончания, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизации
		|		ПО КадровыеРасчетныеДанные.Сотрудник = РаботникиОрганизации.Сотрудник
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	(НЕ (КадровыеРасчетныеДанные.Неявка ЕСТЬ NULL))
		|";
		
	// Условие на подразделение 
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		ТекстЗапроса = ТекстЗапроса + " И
		|	ВЫБОР
		|		КОГДА  РаботникиОрганизации.ПериодЗавершения <= &ДатаОкончания
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
		|	КОНЕЦ В ИЕРАРХИИ (&ПодразделениеОрганизации)
		|";
	КонецЕсли;	
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапрос()	

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ

// Заполняет т.ч. обработки кадровыми и расчетными документами
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Булево - Истина, если успешно выполнено заполнение, иначе Ложь
//
Функция Автозаполнение() Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо указать организацию!");
		Возврат Ложь;
	КонецЕсли;
	
	РезультатЗапроса = СформироватьЗапрос();

	Неявки.Загрузить(РезультатЗапроса.Выгрузить());
	
	Для Каждого СтрокаТаблицы Из Неявки Цикл
		СтрокаТаблицы.ВидРасчета = ВидрасчетаПоВидуОтпуска(СтрокаТаблицы.ВидОтпуска);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидОтпуска) и (СтрокаТаблицы.ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма) Тогда
			СтрокаТаблицы.ОплачиваемыйОтпуск = Истина;
		КонецЕсли;	
	КонецЦикла;

	Неявки.Сортировать("Сотрудник,КадровыйДокумент,ДатаНачала,ОплачиваемыйОтпуск");
	
	// обработаем табличную часть, проверяя на дублирование документов
	ПредыдущийКадровыйДокумент	= Неопределено;
	ПредыдущийСотрудник			= Неопределено;
	ПредыдущаяНеявка			= Неопределено;
	ПредыдущаяДатаНачала		= Неопределено;
	ПредыдущийОплачиваемыйОтпуск= Неопределено;
	
	Для Каждого СтрокаТаблицы Из Неявки Цикл
		Если ПредыдущийКадровыйДокумент = СтрокаТаблицы.КадровыйДокумент
			 И ПредыдущийСотрудник = СтрокаТаблицы.Сотрудник
			 И ПредыдущаяНеявка = СтрокаТаблицы.Неявка
			 И ПредыдущаяДатаНачала = СтрокаТаблицы.ДатаНачала Тогда
			
			// полностью повторились ключевые реквизиты - отметим как дубль
			СтрокаТаблицы.ДублирующаясяСтрока = Истина;
			СтрокаТаблицы.Отметка = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидОтпуска) Тогда
			
			Если ПредыдущийКадровыйДокумент <> СтрокаТаблицы.КадровыйДокумент ИЛИ
				 ПредыдущийСотрудник <> СтрокаТаблицы.Сотрудник ИЛИ
				 ПредыдущийОплачиваемыйОтпуск <> СтрокаТаблицы.ОплачиваемыйОтпуск Тогда
				 СтрокаТаблицы.НовыйДокумент = Истина;
			 КонецЕсли;
			 
		КонецЕсли;	
		
		// Запоминаем текущие значения ключевых реквизитов
		ПредыдущийКадровыйДокумент	= СтрокаТаблицы.КадровыйДокумент;
		ПредыдущийСотрудник			= СтрокаТаблицы.Сотрудник;
		ПредыдущаяНеявка			= СтрокаТаблицы.Неявка;
		ПредыдущаяДатаНачала		= СтрокаТаблицы.ДатаНачала;
		ПредыдущийОплачиваемыйОтпуск= СтрокаТаблицы.ОплачиваемыйОтпуск;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Процедура создает документы по пустым строкам табличной части
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
Процедура СоздатьДокументы() Экспорт

	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	                                                                                                                                           
	СписокРасчетовОтпуска = Новый СписокЗначений;
 	СписокРасчетовОтпуска.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	Для Каждого СтрокаТаблицы Из Неявки Цикл

		Если СтрокаТаблицы.Отметка 
			 И ЗначениеЗаполнено(СтрокаТаблицы.КадровыйДокумент) 
			 И НЕ ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			 
			ТипРасчетногоДокумента 	= ТипЗнч(СтрокаТаблицы.РасчетныйДокумент);
			ВидНеявки 		= СтрокаТаблицы.Неявка;
			СтрокаСообщенияОбОшибке = СтрокаТаблицы.Сотрудник.Наименование + " " + СтрокаТаблицы.Неявка + " от " + Формат(СтрокаТаблицы.ДатаНачала,"ДФ=дд.ММ.гггг")+": ";
			
			Если ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") Тогда

				
				РасчетныйДокумент = Документы.НачислениеПоБольничномуЛисту.СоздатьДокумент();
				РасчетныйДокумент.ПериодРегистрации 		= НачалоМесяца(СтрокаТаблицы.ДатаНачала);
				РасчетныйДокумент.Сотрудник					= СтрокаТаблицы.Сотрудник;
				РасчетныйДокумент.Физлицо					= СтрокаТаблицы.Физлицо;
				Если ЗначениеЗаполнено(СтрокаТаблицы.ПричинаНетрудоспособности) Тогда
					РасчетныйДокумент.ПричинаНетрудоспособности	= СтрокаТаблицы.ПричинаНетрудоспособности;
				Иначе
					РасчетныйДокумент.ПричинаНетрудоспособности = Справочники.ПричиныНетрудоспособности.ОбщееЗаболевание;
				КонецЕсли;
				РасчетныйДокумент.ПроцентОплаты 			= СтрокаТаблицы.ПроцентОплаты;
				РасчетныйДокумент.ПервичныйБольничныйЛист 	= СтрокаТаблицы.ПервичныйБольничныйЛист;
				РасчетныйДокумент.ДатаНачала 				= СтрокаТаблицы.ДатаНачала;
				РасчетныйДокумент.ДатаОкончания 			= СтрокаТаблицы.ДатаОкончания;
				
				
			ИначеЕсли ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета) 	
					 Или СтрокаТаблицы.ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщенияОбОшибке+"необходимо указать вид расчета по среднему заработку");
					Продолжить;
				КонецЕсли;
			
				РасчетныйДокумент = Документы.ОплатаПоСреднемуЗаработку.СоздатьДокумент();
				РасчетныйДокумент.ПериодРегистрации 		= НачалоМесяца(СтрокаТаблицы.ДатаНачала);
				РасчетныйДокумент.Сотрудник					= СтрокаТаблицы.Сотрудник;
				РасчетныйДокумент.Физлицо					= СтрокаТаблицы.Физлицо;
				РасчетныйДокумент.ВидРасчета 				= СтрокаТаблицы.ВидРасчета;
				РасчетныйДокумент.ПроцентОплаты 			= СтрокаТаблицы.ПроцентОплаты;
				РасчетныйДокумент.СпособРегистрацииВремени 	= Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
				РасчетныйДокумент.ДатаНачала				= СтрокаТаблицы.ДатаНачала;
				РасчетныйДокумент.ДатаОкончания				= СтрокаТаблицы.ДатаОкончания;
			
			ИначеЕсли ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") Тогда
				
				Если СтрокаТаблицы.НовыйДокумент Тогда
				    РасчетныйДокумент = Документы.НачислениеОтпускаРаботникамОрганизаций.СоздатьДокумент();
					РасчетныйДокумент.ПериодРегистрации						= НачалоМесяца(СтрокаТаблицы.ДатаНачала);
					РасчетныйДокумент.Физлицо								= СтрокаТаблицы.Физлицо;
					РасчетныйДокумент.Сотрудник								= СтрокаТаблицы.Сотрудник;
					РасчетныйДокумент.ВидДокументаОтпуск = Перечисления.ВидыДокументаОтпуск.Отпускные;
				КонецЕсли;
				ОтпускНовый = РасчетныйДокумент.Отпуска.Добавить();
				ОтпускНовый.ВидРасчета = СтрокаТаблицы.ВидРасчета;
				ОтпускНовый.ДатаНачала = СтрокаТаблицы.ДатаНачала;
				ОтпускНовый.ДатаОкончания = СтрокаТаблицы.ДатаОкончания;
				

			ИначеЕсли ТипЗнч(СтрокаТаблицы.РасчетныйДокумент)
				= Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
				РасчетныйДокумент = Документы.ОтпускПоУходуЗаРебенком.СоздатьДокумент();
				РасчетныйДокумент.Сотрудник		= СтрокаТаблицы.Сотрудник;
				РасчетныйДокумент.Физлицо		= СтрокаТаблицы.Физлицо;
				РасчетныйДокумент.ДатаДействия	= СтрокаТаблицы.ДатаНачала;
				РасчетныйДокумент.ДатаНачала	= СтрокаТаблицы.ДатаНачала;
				РасчетныйДокумент.ДатаОкончания	= СтрокаТаблицы.ДатаОкончания;
			
			ИначеЕсли ВидНеявки = Перечисления.СостоянияРаботникаОрганизации.Простой 
					  И ЗначениеЗаполнено(СтрокаТаблицы.ВидПростоя) Тогда
				// оплачиваемый простой
				РасчетныйДокумент = Документы.РегистрацияПростоевВОрганизациях.СоздатьДокумент();
				РасчетныйДокумент.ПериодРегистрации		= НачалоМесяца(ДатаНачала);
				РасчетныйДокумент.Сотрудник				= СтрокаТаблицы.Сотрудник;
				РасчетныйДокумент.Физлицо				= СтрокаТаблицы.Физлицо;
				РасчетныйДокумент.ВидПростоя			= СтрокаТаблицы.ВидПростоя;
				РасчетныйДокумент.ДатаНачала			= СтрокаТаблицы.ДатаНачала;
				РасчетныйДокумент.ДатаОкончания			= СтрокаТаблицы.ДатаОкончания;
							
			Иначе // прочие невыходы
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета)
					 И ВидНеявки = Перечисления.СостоянияРаботникаОрганизации.Простой Тогда
					// попробуем найти подходящий вид расчета для простоя
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("УчетВремениПростой", Справочники.КлассификаторИспользованияРабочегоВремени.Простой);
					Запрос.УстановитьПараметр("РасчетНулеваяСумма", Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
					
					Запрос.Текст = "
					|ВЫБРАТЬ
					|	ОсновныеНачисления.Ссылка КАК ВидРасчета
					|ИЗ
					|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
					|ГДЕ
					|	ОсновныеНачисления.СпособРасчета = &РасчетНулеваяСумма И
					|	ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени = &УчетВремениПростой
					|";
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						СтрокаТаблицы.ВидРасчета = Выборка.ВидРасчета;
					КонецЕсли;
				КонецЕсли;
			
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета) 
					 Или СтрокаТаблицы.ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщенияОбОшибке+"необходимо выбрать вид расчета по нулевой сумме");
					Продолжить;
				КонецЕсли;
			
				РасчетныйДокумент = Документы.НевыходыВОрганизациях.СоздатьДокумент();
				РасчетныйДокумент.ПериодРегистрации = НачалоМесяца(СтрокаТаблицы.ДатаНачала);
				РасчетныйДокумент.СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
				
				СтрокаНачисления = РасчетныйДокумент.Начисления.Добавить();
				СтрокаНачисления.Авторасчет			= Истина;
				СтрокаНачисления.Сотрудник			= СтрокаТаблицы.Сотрудник;
				Если СтрокаТаблицы.Сотрудник.ОсновноеНазначение <> Справочники.СотрудникиОрганизаций.ПустаяСсылка() Тогда
					СтрокаНачисления.Назначение = СтрокаТаблицы.Сотрудник.ОсновноеНазначение 
				Иначе
					СтрокаНачисления.Назначение = СтрокаТаблицы.Сотрудник
				КонецЕсли;
				СтрокаНачисления.Физлицо			= СтрокаТаблицы.Физлицо;
				СтрокаНачисления.ДатаНачала 		= СтрокаТаблицы.ДатаНачала;
				СтрокаНачисления.ДатаОкончания 		= СтрокаТаблицы.ДатаОкончания;
				СтрокаНачисления.БазовыйПериодНачало = СтрокаТаблицы.ДатаНачала;
				СтрокаНачисления.БазовыйПериодКонец = СтрокаТаблицы.ДатаОкончания;
				
				// Определим подразделение работника на дату события
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Сотрудник",			СтрокаТаблицы.Сотрудник);
				Запрос.УстановитьПараметр("Организация",		ГоловнаяОрганизация);
				Запрос.УстановитьПараметр("ДатаАктуальности",	СтрокаТаблицы.ДатаНачала);
				
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	РаботникиОрганизации.ПодразделениеОрганизации
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизации
				|";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтрокаНачисления.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
				КонецЕсли;
				
				СтрокаНачисления.ВидРасчета = СтрокаТаблицы.ВидРасчета;
				
				РазницаВМесяцах = (Год(СтрокаНачисления.ДатаОкончания)*12 + Месяц(СтрокаНачисления.ДатаОкончания)) - (Год(СтрокаНачисления.ДатаНачала)*12 + Месяц(СтрокаНачисления.ДатаНачала));
				Если РазницаВМесяцах > 0 Тогда
					ПроведениеРасчетов.РазбитьСтрокуНачисленийНаПомесячныеЗаписи(СтрокаНачисления, РасчетныйДокумент.Начисления);
				КонецЕсли;
			КонецЕсли;
			
			РасчетныйДокумент.Организация	= Организация;
			РасчетныйДокумент.Ответственный	= глЗначениеПеременной("глТекущийПользователь");
			РасчетныйДокумент.Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
			РасчетныйДокумент.УстановитьНовыйНомер();
			РасчетныйДокумент.Записать();
						
			СтрокаТаблицы.РасчетныйДокумент	= РасчетныйДокумент.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СоздатьДокументы()

// Процедура рассчитывает отмеченные документы
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
Процедура РассчитатьДокументы() Экспорт
	
	КоличествоСтрок =  Неявки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;

	РассчитываемыеТаблицы = Новый Структура("Начисления,РасчетСреднего",Истина,Истина);
	НомерТекущейСтроки = 0;

	Для Каждого СтрокаТаблицы Из Неявки Цикл
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		Если СтрокаТаблицы.Отметка И ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			Если ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
				Продолжить
			КонецЕсли;
			
			РасчетныйДокумент = СтрокаТаблицы.РасчетныйДокумент.ПолучитьОбъект();			
			Если РасчетныйДокумент.ПометкаУдаления Тогда
				РасчетныйДокумент.УстановитьПометкуУдаления(Ложь);
			ИначеЕсли РасчетныйДокумент.Проведен Тогда
				РасчетныйДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения)
			КонецЕсли;
			// авторасчет документа
			Попытка
				Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументОбъект.НевыходыВОрганизациях") Тогда
					РасчетныйДокумент.Рассчитать();
				ИначеЕсли ТипЗнч(РасчетныйДокумент) = Тип("ДокументОбъект.НачислениеОтпускаРаботникамОрганизаций") Тогда
					
					
					РасчетныйДокумент.Записать();
	
					РасчетныйДокумент.ЧислоМесяцев = 12;
					
					РасчетныйДокумент.ПолучитьПериодПоРаботнику();
					
					РасчетныйДокумент.ВидУчетаВремениДляСредней	= Перечисления.ВидыУчетаВремениДляСредней.ПоКалендарнымДням;
		
					РасчетныйДокумент.ГодоваяПремияБазовыйПериодНачало = НачалоГода(НачалоГода(РасчетныйДокумент.ПериодРасчетаСреднегоНачало)-1);
					РасчетныйДокумент.ГодоваяПремия = ПроведениеРасчетов.РассчитатьПремияЗаГод(РасчетныйДокумент.ГодоваяПремияБазовыйПериодНачало, РасчетныйДокумент.Сотрудник);

					РасчетныйДокумент.Записать();
	
					РасчетныйДокумент.АвтозаполнениеРасчетСреднего();
					РасчетныйДокумент.РассчитатьРасчетСреднего();

					РасчетныйДокумент.АвтозаполнениеНачисления();
					РасчетныйДокумент.РассчитатьНачисления(РасчетныйДокумент.Сотрудник, Ложь);

					РасчетныйДокумент.Записать();
	
					
				Иначе
					РасчетныйДокумент.Рассчитать(РассчитываемыеТаблицы);
				КонецЕсли;
				РасчетныйДокумент.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // РассчитатьДокументы()

// Процедура проводит отмеченные документы
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
Процедура ПровестиДокументы() Экспорт

	НомерТекущейСтроки = 0;
	Для Каждого СтрокаТаблицы Из Неявки Цикл
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		
		Если СтрокаТаблицы.Отметка и ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			РасчетныйДокумент = СтрокаТаблицы.РасчетныйДокумент.ПолучитьОбъект();
			Если РасчетныйДокумент.ПометкаУдаления Тогда
				РасчетныйДокумент.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			Попытка
				РасчетныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Продолжить;
			КонецПопытки;
			СтрокаТаблицы.Отметка = Не СтрокаТаблицы.Отметка;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПровестиДокументы()

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ОБЪЕКТА 

мДлинаСуток = 86400; // в секундах
