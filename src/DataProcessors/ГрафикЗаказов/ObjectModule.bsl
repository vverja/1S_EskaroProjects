#Если Клиент Тогда
Перем ТекстПостроителя;
Перем мТекущаяНастройка Экспорт;
Перем мНастройкаПериода Экспорт;
Перем мТаблицаИзменений Экспорт;
Перем флОтборыВидимы Экспорт;
Перем ЦветВыполненого;
Перем ЦветВыполненогоСОпозданием;
Перем ЦветНевыполненого;
Перем ЦветПросроченного Экспорт;
Перем соотвВыполненныеЗаказы;
Перем масОтображенныеЗаказы Экспорт;
Перем масТабличныеЧастиЗПР;
Перем масТабличныеЧастиЗПок;
Перем масТабличныеЧастиЗПост;
Перем масТабличныеЧастиВЗ;
////////////////////////////////////////////////////////////////////////////////
//ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Процедура выполняет заполнение параметров построителей
Процедура ЗаполнитьПараметрыПостроителей()  Экспорт
	//1. Построитель - основной источник данных для отчета
	ТекстПостроителя = " ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Ссылка,
	|	ДатаНач ,
	|	ДатаКон ,
	|	Предшественник,
	|	Родитель,
	|	Выполнена,
	|	ДатаВыполнения
	|	//ПОЛЯ_ДЛЯ_ПРЕДСТАВЛЕНИЯ_ЗАКАЗОВ
	|ИЗ
	|(ВЫБРАТЬ
	|	ЗаказыНаПроизводство.Ссылка КАК Ссылка,
	|	ЗаказыНаПроизводство.ДатаЗапуска КАК ДатаНач,
	|	ЗаказыНаПроизводство.ДатаИсполнения КАК ДатаКон,
	|	РазмещениеЗаказов.ЗаказПоставщику КАК Предшественник,
	|	ВЫБОР КОГДА РазмещениеЗаказаПокупателя.ЗаказПокупателя is null ТОГДА
	|		ЗаказыНаПроизводство.ОсновнойЗаказНаПроизводство
	|	ИНАЧЕ РазмещениеЗаказаПокупателя.ЗаказПокупателя КОНЕЦ КАК Родитель,
    |	ВЫБОР КОГДА ЕстьNull(ЗаказыНаПроизводствоОстатки.КоличествоОстаток,0) = 0 Тогда
	|	истина ИНАЧЕ ложь КОНЕЦ КАК Выполнена,
	|	ЕстьNull(ДатыВыполнения.ДатаВыполнения,ДатаВремя(1,1,1,0,0,0)) КАК ДатаВыполнения
	|ИЗ 
	|	Документ.ЗаказНаПроизводство КАК ЗаказыНаПроизводство
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыНаПроизводство.Остатки КАК ЗаказыНаПроизводствоОстатки
	|ПО 
	|	ЗаказыНаПРоизводство.Ссылка = ЗаказыНаПроизводствоОстатки.ЗаказНаПРоизводство
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.ОстаткиИОбороты() КАК РазмещениеЗаказов
	|ПО 
	|	ЗаказыНаПРоизводство.Ссылка = РазмещениеЗаказов.ЗаказПокупателя
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.ОстаткиИОбороты(,,,,ЗаказПоставщику ССЫЛКА Документ.ЗаказНаПроизводство И (ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя ИЛИ ЗаказПокупателя ССЫЛКА Документ.ВнутреннийЗаказ)) КАК РазмещениеЗаказаПокупателя
	|ПО 
	|	ЗаказыНаПРоизводство.Ссылка = РазмещениеЗаказаПокупателя.ЗаказПоставщику
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ  
	|		ЗаказНаПроизводство, 
	|		Максимум(Период) КАК ДатаВыполнения
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПроизводство.Обороты(,,день,
	|			ЗаказНаПроизводство.ДатаЗапуска>=&ДатаНачала И ЗаказНаПроизводство.ДатаИсполнения<=&ДатаОкончания) КАК ЗаказыНаПроизводствоОбороты
	|	ГДЕ КоличествоРасход>0
	|	СГРУППИРОВАТЬ ПО ЗаказНаПроизводство
	|	) Как ДатыВыполнения
	|ПО 
	|ЗаказыНаПроизводство.Ссылка = ДатыВыполнения.ЗаказНаПРоизводство
	|ГДЕ ЗаказыНаПроизводство.Ссылка.ДатаЗапуска<>&ПустаяДата И 
	|ЗаказыНаПроизводство.Ссылка.ДатаИсполнения<>&ПустаяДата  И ЗаказыНаПРоизводство.Проведен
	|{ГДЕ ЗаказыНаПроизводство.Ссылка.* КАК ЗаказНаПроизводство}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	РазмещениеЗаказов.ЗаказПокупателя КАК Ссылка,
	|   ВЫРАЗИТЬ(РазмещениеЗаказов.ЗаказПокупателя КАК Документ.ЗаказПокупателя).ДатаОтгрузки КАК ДатаНач,
	|   ВЫРАЗИТЬ(РазмещениеЗаказов.ЗаказПокупателя КАК Документ.ЗаказПокупателя).ДатаОтгрузки КАК ДатаКон,
	|	РазмещениеЗаказов.ЗаказПоставщику КАК Предшественник,
	|   NULL КАК Родитель,
	|	ВЫБОР КОГДА ЕстьNull(ЗаказыПокупателейОстатки.КоличествоОстаток,0) = 0 Тогда
	|	истина ИНАЧЕ ложь КОНЕЦ КАК Выполнена,
	|	ЕстьNull(ДатыВыполнения.ДатаВыполнения,ДатаВремя(1,1,1,0,0,0)) КАК ДатаВыполнения
    |ИЗ 
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.ОстаткиИОбороты(,,,,ЗаказПоставщику ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя 
	|				И ВЫРАЗИТЬ(ЗаказПокупателя КАК Документ.ЗаказПокупателя).ДатаОтгрузки<>&ПустаяДата ) КАК РазмещениеЗаказов
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ  
	|		ЗаказПокупателя, 
	|		Максимум(Период) КАК ДатаВыполнения
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Обороты(,,день,
	|			ЗаказПокупателя.ДатаОтгрузки>=&ДатаНачала И ЗаказПокупателя.ДатаОтгрузки<=&ДатаОкончания) КАК ЗаказыПокупателейОбороты
	|	ГДЕ КоличествоРасход>0
	|	СГРУППИРОВАТЬ ПО ЗаказПокупателя
	|	) Как ДатыВыполнения
	|ПО 
	|РазмещениеЗаказов.ЗаказПокупателя = ДатыВыполнения.ЗаказПокупателя

	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки КАК ЗаказыПокупателейОстатки
	|ПО 
	|	РазмещениеЗаказов.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
	|{ГДЕ ВЫРАЗИТЬ(РазмещениеЗаказов.ЗаказПоставщику КАК Документ.ЗаказНаПроизводство).* КАК ЗаказНаПроизводство}
	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	РазмещениеЗаказов.ЗаказПокупателя КАК Ссылка,
	|   ВЫРАЗИТЬ(РазмещениеЗаказов.ЗаказПокупателя КАК Документ.ВнутреннийЗаказ).ДатаОтгрузки КАК ДатаНач,
	|   ВЫРАЗИТЬ(РазмещениеЗаказов.ЗаказПокупателя КАК Документ.ВнутреннийЗаказ).ДатаОтгрузки КАК ДатаКон,
	|	РазмещениеЗаказов.ЗаказПоставщику КАК Предшественник,
	|   NULL КАК Родитель,
	|	ВЫБОР КОГДА ЕстьNull(ВнутренниеЗаказыОстатки.КоличествоОстаток,0) = 0 Тогда
	|	истина ИНАЧЕ ложь КОНЕЦ КАК Выполнена,
	|	ЕстьNull(ДатыВыполнения.ДатаВыполнения,ДатаВремя(1,1,1,0,0,0)) КАК ДатаВыполнения
    |ИЗ 
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.ОстаткиИОбороты(,,,,ЗаказПоставщику ССЫЛКА Документ.ЗаказНаПроизводство 
	|				И ЗаказПокупателя ССЫЛКА Документ.ВнутреннийЗаказ 
	|				И ВЫРАЗИТЬ(ЗаказПокупателя КАК Документ.ВнутреннийЗаказ).ДатаОтгрузки<>&ПустаяДата ) КАК РазмещениеЗаказов
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ  
	|		ВнутреннийЗаказ, 
	|		Максимум(Период) КАК ДатаВыполнения
	|	ИЗ
	|		РегистрНакопления.ВнутренниеЗаказы.Обороты(,,день,
	|			ВнутреннийЗаказ.ДатаОтгрузки>=&ДатаНачала И ВнутреннийЗаказ.ДатаОтгрузки<=&ДатаОкончания) КАК ВнутренниеЗаказыОбороты
	|	ГДЕ КоличествоРасход>0
	|	СГРУППИРОВАТЬ ПО ВнутреннийЗаказ
	|	) Как ДатыВыполнения
	|ПО 
	|РазмещениеЗаказов.ЗаказПокупателя = ДатыВыполнения.ВнутреннийЗаказ

	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки КАК ВнутренниеЗаказыОстатки
	|ПО 
	|	РазмещениеЗаказов.ЗаказПокупателя = ВнутренниеЗаказыОстатки.ВнутреннийЗаказ
	|{ГДЕ ВЫРАЗИТЬ(РазмещениеЗаказов.ЗаказПоставщику КАК Документ.ЗаказНаПроизводство).* КАК ЗаказНаПроизводство}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	РазмещениеЗаказов.ЗаказПоставщику КАК Ссылка,
	|   ВЫРАЗИТЬ(РазмещениеЗаказов.ЗаказПоставщику КАК Документ.ЗаказПоставщику).ДатаПоступления КАК ДатаНач,
	|   ВЫРАЗИТЬ(РазмещениеЗаказов.ЗаказПоставщику КАК Документ.ЗаказПоставщику).ДатаПоступления КАК ДатаКон,
	|	NULL КАК Предшественник,
	|   РазмещениеЗаказов.ЗаказПокупателя КАК Родитель,
	|	ВЫБОР КОГДА ЕстьNull(ЗаказыПоставщикамОстатки.КоличествоОстаток,0) = 0 Тогда
	|	истина ИНАЧЕ ложь КОНЕЦ КАК Выполнена,
	|	ЕстьNull(ДатыВыполнения.ДатаВыполнения,ДатаВремя(1,1,1,0,0,0)) КАК ДатаВыполнения
    |ИЗ 
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.ОстаткиИОбороты(,,,,ЗаказПокупателя ССЫЛКА Документ.ЗаказНаПроизводство И
	|								ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику И
	|								ВЫРАЗИТЬ(ЗаказПоставщику КАК Документ.ЗаказПоставщику).ДатаПоступления<>&ПустаяДата) КАК РазмещениеЗаказов
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ  
	|		ЗаказПоставщику, 
	|		Максимум(Период) КАК ДатаВыполнения
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Обороты(,,день,
	|			ЗаказПоставщику.ДатаПоступления>=&ДатаНачала И ЗаказПоставщику.ДатаПоступления<=&ДатаОкончания) КАК ЗаказыПокупателейОбороты
	|	ГДЕ КоличествоРасход>0
	|	СГРУППИРОВАТЬ ПО ЗаказПоставщику
	|	) Как ДатыВыполнения
	|ПО 
	|РазмещениеЗаказов.ЗаказПоставщику = ДатыВыполнения.ЗаказПоставщику
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
	|ПО 
	|	РазмещениеЗаказов.ЗаказПоставщику = ЗаказыПоставщикамОстатки.ЗаказПоставщику
	|{ГДЕ ВЫРАЗИТЬ(РазмещениеЗаказов.ЗаказПокупателя КАК Документ.ЗаказНаПроизводство).* КАК ЗаказНаПроизводство}
	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	РазмещениеЗаказов.ЗаказПоставщику КАК Ссылка,
	|   ВЫРАЗИТЬ(РазмещениеЗаказов.ЗаказПоставщику КАК Документ.ВнутреннийЗаказ).ДатаОтгрузки КАК ДатаНач,
	|   ВЫРАЗИТЬ(РазмещениеЗаказов.ЗаказПоставщику КАК Документ.ВнутреннийЗаказ).ДатаОтгрузки КАК ДатаКон,
	|	NULL КАК Предшественник,
	|   РазмещениеЗаказов.ЗаказПокупателя КАК Родитель,
	|	ВЫБОР КОГДА ЕстьNull(ВнутренниеЗаказыОстатки.КоличествоОстаток,0) = 0 Тогда
	|	истина ИНАЧЕ ложь КОНЕЦ КАК Выполнена,
	|	ЕстьNull(ДатыВыполнения.ДатаВыполнения,ДатаВремя(1,1,1,0,0,0)) КАК ДатаВыполнения
    |ИЗ 
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.ОстаткиИОбороты(,,,,ЗаказПокупателя ССЫЛКА Документ.ЗаказНаПроизводство И
	|								ЗаказПоставщику ССЫЛКА Документ.ВнутреннийЗаказ И
	|								ВЫРАЗИТЬ(ЗаказПоставщику КАК Документ.ВнутреннийЗаказ).ДатаОтгрузки<>&ПустаяДата) КАК РазмещениеЗаказов
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ  
	|		ВнутреннийЗаказ, 
	|		Максимум(Период) КАК ДатаВыполнения
	|	ИЗ
	|		РегистрНакопления.ВнутренниеЗаказы.Обороты(,,день,
	|			ВнутреннийЗаказ.ДатаОтгрузки>=&ДатаНачала И ВнутреннийЗаказ.ДатаОтгрузки<=&ДатаОкончания) КАК ВнутренниеЗаказыОбороты
	|	ГДЕ КоличествоРасход>0
	|	СГРУППИРОВАТЬ ПО ВнутреннийЗаказ
	|	) Как ДатыВыполнения
	|ПО 
	|РазмещениеЗаказов.ЗаказПоставщику = ДатыВыполнения.ВнутреннийЗаказ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки КАК ВнутренниеЗаказыОстатки
	|ПО 
	|	РазмещениеЗаказов.ЗаказПоставщику = ВнутренниеЗаказыОстатки.ВнутреннийЗаказ
	|{ГДЕ ВЫРАЗИТЬ(РазмещениеЗаказов.ЗаказПокупателя КАК Документ.ЗаказНаПроизводство).* КАК ЗаказНаПроизводство}
	
	|) КАК СводныйЗапрос
	|ГДЕ
	| (&ДатаНачала = &ПустаяДата ИЛИ ДатаНач>=&ДатаНачала)
	| И (&ДатаОкончания = &ПустаяДата ИЛИ ДатаКон<=&ДатаОкончания)
	|УПОРЯДОЧИТЬ ПО Предшественник, ДатаНач, Ссылка
	|ИТОГИ Максимум(Выполнена), Максимум(Родитель), Максимум(ДатаНач), Максимум(ДатаКон), Максимум(ДатаВыполнения) 
	|ПО Ссылка
	|";
    ПостроительОтчета.Текст = ТекстПостроителя;
	ПостроительОтчета.Параметры.Вставить("ПустаяДата",Дата('00010101000000'));
	ПостроительОтчета.Параметры.Вставить("ДатаНачала",ДатаНачала);
	ПостроительОтчета.Параметры.Вставить("ДатаОкончания",ДатаОкончания);

    ПостроительОтчета.ДоступныеПоля.ЗаказНаПроизводство.Представление           = "Заказ на производство";
	ПостроительОтчета.Отбор.Добавить("ЗаказНаПроизводство.Подразделение");
	ПостроительОтчета.Отбор.Добавить("ЗаказНаПроизводство.Организация");
    ПостроительОтчета.Отбор.Добавить("ЗаказНаПроизводство.Ответственный");
    ПостроительОтчета.Отбор.Добавить("ЗаказНаПроизводство.ОсновнойЗаказНаПроизводство");

	//2. Построители для формирования списка полей, которые попадут в представление заказов
	ПостроительОтчета_ПоляЗаказовНаПроизводство.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|ПРЕДСТАВЛЕНИЕ(Ссылка) КАК Представление
	|{ВЫБРАТЬ
	|Ссылка.*
	|}
	|ИЗ Документ.ЗаказНаПроизводство";
	ПостроительОтчета_ПоляЗаказовНаПроизводство.ЗаполнитьНастройки();
	ПостроительОтчета_ПоляЗаказовНаПроизводство.ВыбранныеПоля.Удалить(ПостроительОтчета_ПоляЗаказовНаПроизводство.ВыбранныеПоля.Найти("Ссылка"));
    //удалим из списка полей табличные части
	Поля = ПостроительОтчета_ПоляЗаказовНаПроизводство.ДоступныеПоля.Найти("Ссылка").Поля;
	Для каждого элт Из масТабличныеЧастиЗПР цикл
		Поля.Удалить(Поля.Найти(элт));
	КонецЦикла;
	
	ПостроительОтчета_ПоляЗаказовПоставщикам.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|ПРЕДСТАВЛЕНИЕ(Ссылка) КАК Представление
	|{ВЫБРАТЬ
	|Ссылка.*
	|}
	|ИЗ Документ.ЗаказПоставщику";
    ПостроительОтчета_ПоляЗаказовПоставщикам.ЗаполнитьНастройки();
    ПостроительОтчета_ПоляЗаказовПоставщикам.ВыбранныеПоля.Удалить(ПостроительОтчета_ПоляЗаказовПоставщикам.ВыбранныеПоля.Найти("Ссылка"));
	//удалим из списка полей табличные части
	Поля = ПостроительОтчета_ПоляЗаказовПоставщикам.ДоступныеПоля.Найти("Ссылка").Поля;
	Для каждого элт Из масТабличныеЧастиЗПост цикл
		Поля.Удалить(Поля.Найти(элт));
	КонецЦикла;

	ПостроительОтчета_ПоляЗаказовПокупателей.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|ПРЕДСТАВЛЕНИЕ(Ссылка) КАК Представление
	|{ВЫБРАТЬ
	|Ссылка.*
	|}
	|ИЗ Документ.ЗаказПокупателя";
	ПостроительОтчета_ПоляЗаказовПокупателей.ЗаполнитьНастройки();
    ПостроительОтчета_ПоляЗаказовПокупателей.ВыбранныеПоля.Удалить(ПостроительОтчета_ПоляЗаказовПокупателей.ВыбранныеПоля.Найти("Ссылка"));
	//удалим из списка полей табличные части
	Поля = ПостроительОтчета_ПоляЗаказовПокупателей.ДоступныеПоля.Найти("Ссылка").Поля;
	Для каждого элт Из масТабличныеЧастиЗПок цикл
		Поля.Удалить(Поля.Найти(элт));
	КонецЦикла;
	
	ПостроительОтчета_ПоляВнутреннихЗаказов.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|ПРЕДСТАВЛЕНИЕ(Ссылка) КАК Представление
	|{ВЫБРАТЬ
	|Ссылка.*
	|}
	|ИЗ Документ.ВнутреннийЗаказ";
	ПостроительОтчета_ПоляВнутреннихЗаказов.ЗаполнитьНастройки();
    ПостроительОтчета_ПоляВнутреннихЗаказов.ВыбранныеПоля.Удалить(ПостроительОтчета_ПоляВнутреннихЗаказов.ВыбранныеПоля.Найти("Ссылка"));
	//удалим из списка полей табличные части
	Поля = ПостроительОтчета_ПоляВнутреннихЗаказов.ДоступныеПоля.Найти("Ссылка").Поля;
	Для каждого элт Из масТабличныеЧастиВЗ цикл
		Поля.Удалить(Поля.Найти(элт));
	КонецЦикла;

	
    УстановитьПредставленияПолей();
КонецПроцедуры

//Процедура формирует диаграмму
Процедура СформироватьДиаграмму(Диаграмма) Экспорт
	Диаграмма.Обновление = Ложь;
	Диаграмма.Очистить();

	ПостроительОтчета.Параметры.Вставить("ДатаНачала",НачалоДня(ДатаНачала));
	ПостроительОтчета.Параметры.Вставить("ДатаОкончания",КонецДня(ДатаОкончания));
    ДобавитьПредставлениеЗаказовВПостроитель();
    ПостроительОтчета.Выполнить();
	
	Если ПостроительОтчета.Результат.Пустой() Тогда
		УстановитьФонДиаграммы(Диаграмма, НачалоДня(ДатаНачала), КонецДня(ДатаОкончания));
		Диаграмма.Обновление = Истина;
		Возврат;
	КонецЕсли;

	Выборка = ПостроительОтчета.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
    соотвВыполненныеЗаказы = новый Соответствие();
	масОтображенныеЗаказы = новый Массив;

	// Создаем таблицу значений, в которую, по мере обхода запроса, будем заносить связи.
	Связи = Новый ТаблицаЗначений;
	Связи.Колонки.Добавить("Конец");
	Связи.Колонки.Добавить("Начало");
	
	Серия = Диаграмма.Серии.Добавить();
	
	// Заводим переменные для определения максимальной и минимальной дат.
	МаксимальнаяДата = NULL;
	МинимальнаяДата = NULL;
	
	Пока Выборка.Следующий() = Истина Цикл
		Если Выборка.ДатаНач = NULL ИЛИ 
			 Выборка.ДатаКон = NULL  Тогда	
			 Продолжить;
		 КонецЕсли;
		масОтображенныеЗаказы.Добавить(Выборка.Ссылка); 
		ТипДокумента = ТипЗнч(Выборка.ссылка);
		Точка = Диаграмма.УстановитьТочку(Выборка.Ссылка,
										  ?(Выборка.Родитель=NULL или Выборка.Родитель.Пустая(), 
										    Неопределено,
										    Выборка.Родитель)
											);
		Точка.Текст = ""+ПолучитьПредставлениеЗаказа(Выборка, ТипДокумента);
		Точка.Расшифровка = Выборка.ссылка;
		Если ТипДокумента = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Точка.Картинка = БиблиотекаКартинок.ЗаказПокупателя;
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Точка.Картинка = БиблиотекаКартинок.ЗаказПоставщику;
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			Точка.Картинка = БиблиотекаКартинок.ДокументОбъект;
		Иначе
			Точка.Картинка = БиблиотекаКартинок.ЗаказНаПроизводство;
		КонецЕсли;
		// Инициализиреум значение.
		Значение = Диаграмма.ПолучитьЗначение(Точка, Серия);
		
		Если Выборка.Выполнена И Выборка.Ссылка.Проведен Тогда
			соотвВыполненныеЗаказы.Вставить(Выборка.Ссылка,Выборка.ДатаВыполнения);
		КонецЕсли;	
		
		// Добавляем интервал. 
		Интервал = Значение.Добавить();
		ЗаполнитьПараметрыИнтервала(Интервал,Значение, Выборка.ДатаНач,Выборка.ДатаКон,Выборка.Ссылка,Выборка.Выполнена,Выборка.ДатаВыполнения);
		
		// Если надо, корректируем максимальную и минимальную даты.
		Если МаксимальнаяДата = NULL Или МаксимальнаяДата < Выборка.ДатаКон Тогда
			МаксимальнаяДата = Выборка.ДатаКон;
		КонецЕсли;				
		
		Если МинимальнаяДата = NULL Или МинимальнаяДата > Выборка.ДатаНач Тогда
			МинимальнаяДата = ?(Выборка.ДатаНач=Выборка.ДатаКон,Выборка.ДатаНач-24*60*60,Выборка.ДатаНач);
		КонецЕсли;	
		
		// Получаем связи данного заказа с другими заказами и заносим в таблицу - это детальные записи.
		ВыборкаПред = Выборка.Выбрать();
		Пока ВыборкаПред.Следующий() = Истина Цикл
			Если ВыборкаПред.Предшественник=null Тогда Продолжить; КонецЕсли;
			Связь = Связи.Добавить();
			Связь.Начало = ВыборкаПред.Предшественник;
			Связь.Конец = Выборка.Ссылка;
		КонецЦикла;				
	КонецЦикла;
	
    УстановитьФонДиаграммы(Диаграмма, МинимальнаяДата, МаксимальнаяДата);
	
	// По заполненой таблице создаем связи.
	СоздатьСвязи(Связи, Диаграмма, Серия);	
	
	// Развертываем все точки.
	Диаграмма.ПоказатьУровеньТочек(0);
	
	Диаграмма.ОтображатьЗаголовок = ложь;
	Диаграмма.ОтображатьЛегенду = ложь;
	
	// Включаем обновление диаграммы.
	Диаграмма.Обновление = Истина;

КонецПроцедуры

Функция ЗначенияРеквизитовДляГраницИнтервалов(Объект, ТипОбъекта=неопределено) Экспорт
	Если ТипОбъекта = неопределено Тогда
		ТипДокумента = ТипЗнч(Объект);
	Иначе
		ТипДокумента = ТипОбъекта;
	КонецЕсли;
	
	ДатаНачалаИнтервала = Дата('00010101000000');
	ДатаОкончанияИнтервала = Дата('00010101000000');
	
	Если ТипДокумента = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		 ИмяРеквизитаДатаНачала = "ДатаЗапуска";
		 ИмяРеквизитаДатаОкончания = "ДатаИсполнения";
	 ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
         ИмяРеквизитаДатаНачала = "";
		 ИмяРеквизитаДатаОкончания = "ДатаПоступления";

	 ИначеЕсли  ТипДокумента = Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ ТипДокумента = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
         ИмяРеквизитаДатаНачала = "";
		 ИмяРеквизитаДатаОкончания = "ДатаОтгрузки";
	 Иначе
		 Возврат новый Структура("ДатаНачала,ДатаОкончания,ДатаВыполнения,флЗаказВыполнен",ДатаНачалаИнтервала,ДатаОкончанияИнтервала,неопределено,ложь);
	 КонецЕсли;
	 Если ИмяРеквизитаДатаНачала = "" Тогда
		 ДатаНачалаИнтервала = Объект[ИмяРеквизитаДатаОкончания];
	 Иначе
		 ДатаНачалаИнтервала = Объект[ИмяРеквизитаДатаНачала];
	 КонецЕсли;
	 ДатаОкончанияИнтервала = Объект[ИмяРеквизитаДатаОкончания];
	 
	ДатаВыполнения = соотвВыполненныеЗаказы.Получить(Объект);
	флЗаказВыполнен = истина;
	Если ДатаВыполнения = неопределено Тогда
		флЗаказВыполнен = ложь;
		ДатаВыполнения = Дата('00010101000000');
	КонецЕсли;

	 
	 Возврат новый Структура("ДатаНачала,ДатаОкончания,ДатаВыполнения,флЗаказВыполнен",ДатаНачалаИнтервала,ДатаОкончанияИнтервала,ДатаВыполнения,флЗаказВыполнен);
КонецФункции

//Процедура перерисовывает интервал при перемещении отрезка диаграммы Ганта
Процедура ПерерисоватьИнтервал(Объект, Диаграмма, Точка) Экспорт
	Диаграмма.Обновление = Ложь;
	Серия = Диаграмма.Серии[0];
	
	ТипДокумента = ТипЗнч(Объект);
	
	ДанныеИнтервала = ЗначенияРеквизитовДляГраницИнтервалов(Объект,ТипДокумента);
	
	Значение = Диаграмма.ПолучитьЗначение(Точка, Серия);
	
	//перерисуем даты интервла
	Значение.Очистить();
	Интервал = Значение.Добавить();
	
	ЗаполнитьПараметрыИнтервала(Интервал,Значение,ДанныеИнтервала.ДатаНачала,ДанныеИнтервала.ДатаОкончания,Объект,ДанныеИнтервала.флЗаказВыполнен,ДанныеИнтервала.ДатаВыполнения);

	// Создаем таблицу для связей.
	Связи = Новый ТаблицаЗначений;
	Связи.Колонки.Добавить("Конец");
	Связи.Колонки.Добавить("Начало");
	
	//соберем существующие точки диаграммы
	СписТочки = новый Массив;
	Для каждого текТочка из Диаграмма.Точки цикл
		СписТочки.Добавить(текТочка.Значение);
	КонецЦикла;
	
	// Связи с объектами, которые предшествуют данному берем из запроса. 
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЗаказПоставщику КАК ЗаказПоставщику,
	|	ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ РегистрНакопления.РазмещениеЗаказовПокупателей.ОстаткиИОбороты(,,,,ЗаказПокупателя=&текЗаказ ИЛИ 
	|		ЗаказПоставщику = &текЗаказ)
	|";
	Запрос.УстановитьПараметр("текЗаказ",Объект);
	Пред = Запрос.Выполнить().Выбрать();
	Пока Пред.Следующий() Цикл
		Если ТипЗнч(Объект)<>Тип("ДокументСсылка.ЗаказНаПроизводство") И 
			НЕ (ТипЗнч(Пред.ЗаказПоставщику)=Тип("ДокументСсылка.ЗаказНаПроизводство") ИЛИ ТипЗнч(Пред.ЗаказПокупателя)=Тип("ДокументСсылка.ЗаказНаПроизводство")) Тогда
			Продолжить;
		КонецЕсли;
		
		//если на существующем графике такой точки нет - надо перерисовывать весь график целиком, 
		//обновить связи текущей точки будет недостаточно
		Если не флРежимРедактирования Тогда
			Если списТочки.Найти(Пред.ЗаказПокупателя)=неопределено ИЛИ списТочки.Найти(Пред.ЗаказПоставщику)=неопределено Тогда
				СформироватьДиаграмму(Диаграмма);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если Пред.ЗаказПоставщику = Объект Тогда
			Связь = Связи.Добавить();
			Связь.Конец = Пред.ЗаказПокупателя;
			Связь.Начало = Объект;
		Иначе
			Связь = Связи.Добавить();
			Связь.Начало = Пред.ЗаказПоставщику;
			Связь.Конец = Объект;
		КонецЕсли;	
	КонецЦикла;	
	
	// По заполненой таблице создаем связи.
	СоздатьСвязи(Связи, Диаграмма, Серия);				

	// нужно учитывать возможность изменения наименования .
	СтароеПредставление = Точка.Текст;
	Точка.Текст = ""+ПолучитьПредставлениеЗаказа(Объект, ТипДокумента, СтароеПредставление);

	Диаграмма.Обновление = Истина;
	
	//в случае если данный заказ перетаскивался, надо удалить записи об этих изменениях
	Если флРежимРедактирования Тогда
		мСтрокаИзменений = мТаблицаИзменений.Найти(Объект,"Заказ");
		Если мСтрокаИзменений<>неопределено Тогда
			мТаблицаИзменений.Удалить(мСтрокаИзменений);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Процедура перерисовывает интервал при внесении изменений в заказ (открытие формы и исправление)
Процедура ОтобразитьИзменениеИнтервала(Интервал) Экспорт
	// Округляем интервал по границе дня.
	Интервал.Начало = Интервал.Начало + 3600 * 12;
	Интервал.Начало = НачалоДня(Интервал.Начало);
	Интервал.Конец = Интервал.Конец - 3600 * 12;
	Интервал.Конец = КонецДня(Интервал.Конец);
	
	// Получаем объект (документ), который соответствует редактируемуму интервалу.
	ТекДок = Интервал.Значение.Точка.Значение.Ссылка;
	ТипТекДок = ТипЗнч(ТекДок);
	Если ТипТекДок = Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ  
		ТипТекДок = Тип("ДокументСсылка.ЗаказПоставщику") ИЛИ
		ТипТекДок = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Если НачалоДня(Интервал.Начало)<>НачалоДня(Интервал.Конец) Тогда
			Интервал.Начало = НачалоДня(Интервал.КОнец);
		КонецЕсли;
	КонецЕсли;
	
	ДатаВыполнения = соотвВыполненныеЗаказы.Получить(ТекДок);
	флЗаказВыполнен = истина;
	Если ДатаВыполнения = неопределено Тогда
		флЗаказВыполнен = ложь;
		ДатаВыполнения = Дата('00010101000000');
	КонецЕсли;

	Если флЗаказВыполнен Тогда
		Если ЗначениеЗаполнено(ДатаВыполнения) И ДатаВыполнения<=КонецДня(Интервал.Конец) Тогда
			Интервал.Значение.Цвет = ЦветВыполненого;
			Интервал.Текст = "Выполнен"+?(ЗначениеЗАполнено(ДатаВыполнения)," "+Формат(ДатаВыполнения,"ДФ=dd.MM"),"") ;
		Иначе
			Интервал.Значение.Цвет = ЦветВыполненогоСОпозданием;
			Интервал.Текст = "Выполнен"+?(ЗначениеЗАполнено(ДатаВыполнения)," "+Формат(ДатаВыполнения,"ДФ=dd.MM"),"")+", просрочен" ;
		КонецЕсли;
		
	Иначе
		Если Интервал.Конец < НачалоДня(ТекущаяДата()) Тогда
			Интервал.Значение.Цвет = ЦветПросроченного;
			Интервал.Текст = "Не выполнен, просрочен" ;
		Иначе
			Интервал.Значение.Цвет = ЦветНевыполненого;
			Интервал.Текст = "Запланирован" ;
		КонецЕсли;									
	КонецЕсли;
	
	// Корректируем цвета связей.
	Для Каждого Связь Из Интервал Цикл
		Если Связь.Начало.Конец <= Связь.Конец.Начало И НЕ Связь.Начало.Значение.Цвет=ЦветПросроченного  Тогда
			Связь.Цвет = WebЦвета.Синий;
		Иначе			
			Связь.Цвет = WebЦвета.Красный;
		КонецЕсли;			
	КонецЦикла;	
	// В связи с новыми границами интервала корректируем подпись к значению.
    УстановитьТекстЗначения(Интервал);
	Если Интервал.Значение.Точка.Шрифт.Жирный=неопределено или не Интервал.Значение.Точка.Шрифт.Жирный Тогда
    	Интервал.Значение.Точка.Шрифт = новый Шрифт(Интервал.Значение.Точка.Шрифт,,,истина);
	КонецЕсли;
	
    СтрокаИзменений = мТаблицаИзменений.Найти(ТекДок.Ссылка,"Заказ");
	Если СтрокаИзменений = неопределено Тогда
		СтрокаИзменений = мТаблицаИзменений.Добавить();
		СтрокаИзменений.Заказ = текДок;
		СтрокаИзменений.ПредставлениеЗаказа = Интервал.Значение.Точка.Текст;
	КонецЕсли;
	СтрокаИзменений.ДатаЗапуска = Интервал.Начало;
	СтрокаИзменений.ДатаИсполнения  = Интервал.Конец;

КонецПроцедуры

Процедура УбратьЖирныйШрифтТочекДиаграммы(Диаграмма) Экспорт
	Для каждого Точка из Диаграмма.Точки цикл
		УбратьЖирныйШрифтТочекДиаграммы(Точка);
		Если Точка.Шрифт.Жирный=неопределено или не Точка.Шрифт.Жирный Тогда
			Продолжить;
		КонецЕсли;
		
	    Точка.Шрифт = новый Шрифт(Точка.Шрифт,,,ложь);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРезультатДиагностики() Экспорт
	ТабРезультат = новый ТаблицаЗначений;
	ТабРезультат.Колонки.Добавить("Заказ", новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя,ДокументСсылка.ЗаказПоставщику,ДокументСсылка.ВнутреннийЗаказ,ДокументСсылка.ЗаказНаПроизводство"));
	ТабРезультат.Колонки.Добавить("ЗаказПредставление", новый ОписаниеТипов("Строка",,новый КвалификаторыСтроки(200)));
	ТабРезультат.Колонки.Добавить("Проблема", новый ОписаниеТипов("Строка",,новый КвалификаторыСтроки(100)));
	ТабРезультат.Колонки.Добавить("КодПроблемы", новый ОписаниеТипов("Строка",,новый КвалификаторыСтроки(10)));
	ТабРезультат.Колонки.Добавить("ДатаНач", новый ОписаниеТипов("Дата"));
    ТабРезультат.Колонки.Добавить("ДатаКон", новый ОписаниеТипов("Дата"));
    ТабРезультат.Колонки.Добавить("ДатаИсполнения", новый ОписаниеТипов("Дата"));
    ТабРезультат.Колонки.Добавить("ДатаКонПредшествующего", новый ОписаниеТипов("Дата"));
    ТабРезультат.Колонки.Добавить("ПредшествующийЗаказ", новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя,ДокументСсылка.ЗаказПоставщику,ДокументСсылка.ВнутреннийЗаказ,ДокументСсылка.ЗаказНаПроизводство"));
    ТабРезультат.Колонки.Добавить("ПредшествующийЗаказПредставление", новый ОписаниеТипов("Строка",,новый КвалификаторыСтроки(200)));

	ПостроительОтчета.Параметры.Вставить("ДатаНачала",НачалоДня(ДатаНачала));
	ПостроительОтчета.Параметры.Вставить("ДатаОкончания",КонецДня(ДатаОкончания));
    ДобавитьПредставлениеЗаказовВПостроитель();
    ПостроительОтчета.Выполнить();
	
	Если ПостроительОтчета.Результат.Пустой() Тогда
		Возврат ТабРезультат;
	КонецЕсли;

	Выборка = ПостроительОтчета.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() = Истина Цикл
		Если Выборка.ДатаНач = NULL ИЛИ 
			 Выборка.ДатаКон = NULL  Тогда	
			 Продолжить;
		 КонецЕсли;
		ТипДокумента = ТипЗнч(Выборка.ссылка);
		ПредставлениеЗаказа = "";
		
		//Проверка просроченности
		Если Выборка.Выполнена Тогда
			Если КонецДня(Выборка.ДатаВыполнения) > КонецДня(Выборка.ДатаКон) Тогда //Просрочено выполненный
				Если  ПредставлениеЗаказа = "" Тогда
					ПредставлениеЗаказа = ПолучитьПредставлениеЗаказа(Выборка.Ссылка, ТипДокумента);
				КонецЕсли;
				
				Нстр = ТабРезультат.Добавить();
				Нстр.Заказ = Выборка.Ссылка;
				Нстр.ДатаНач = НачалоДня(Выборка.ДатаНач);
				Нстр.ДатаКон = КонецДня(Выборка.ДатаКон);
				Нстр.ДатаИсполнения = Выборка.ДатаВыполнения;
				Нстр.ЗаказПредставление = ПредставлениеЗаказа;
				Нстр.КодПроблемы = "ВыпПрос";
				Нстр.Проблема = "Заказ выполнен с опозданием";
			КонецЕсли;
		ИначеЕсли КонецДня(Выборка.ДатаКон) < КонецДня(ТекущаяДата()) Тогда
			 Если  ПредставлениеЗаказа = "" Тогда
				ПредставлениеЗаказа = ПолучитьПредставлениеЗаказа(Выборка.Ссылка, ТипДокумента);
			КонецЕсли;
			
			Нстр = ТабРезультат.Добавить();
			Нстр.Заказ = Выборка.Ссылка;
			Нстр.ДатаНач = НачалоДня(Выборка.ДатаНач);
			Нстр.ДатаКон = КонецДня(Выборка.ДатаКон);
			Нстр.ЗаказПредставление = ПредставлениеЗаказа;
			Нстр.КодПроблемы = "НевыпПрос";
			Нстр.Проблема = "Заказ просрочен";
		КонецЕсли;
		
		//Проверка несоответствия сроков связанных заказов
		// Получаем связи данного заказа с другими заказами и заносим в таблицу - это детальные записи.
		Если НЕ Выборка.Выполнена Тогда  //Проверять имеет смысл только для невыполненных заказов
			ВыборкаПред = Выборка.Выбрать();
			Пока ВыборкаПред.Следующий() = Истина Цикл
				Если ВыборкаПред.Предшественник=null Тогда Продолжить; КонецЕсли;
				Если масОтображенныеЗаказы.Найти(ВыборкаПред.Предшественник) = неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТипЗаказаПредшественника = ТипЗнч(ВыборкаПред.Предшественник);
				//определим дату конца у предшественника
				Если ТипЗаказаПредшественника = Тип("ДокументСсылка.ВнутреннийЗаказ") или ТипЗаказаПредшественника = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					ДатаКонПред = ВыборкаПред.Предшественник.ДатаОтгрузки;
				ИначеЕсли  ТипЗаказаПредшественника = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
					ДатаКонПред = ВыборкаПред.Предшественник.ДатаИсполнения;
				ИначеЕсли  ТипЗаказаПредшественника = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	                ДатаКонПред = ВыборкаПред.Предшественник.ДатаПоступления;
				Иначе
					Продолжить;
				КонецЕсли;
				Если КонецДня(ДатаКонПред)<=НачалоДня(Выборка.ДатаНач) Тогда
					Продолжить;
				КонецЕсли;
				Если  ПредставлениеЗаказа = "" Тогда
					ПредставлениеЗаказа = ПолучитьПредставлениеЗаказа(Выборка.Ссылка, ТипДокумента);
				КонецЕсли;

				Нстр = ТабРезультат.Добавить();
				Нстр.Заказ = Выборка.Ссылка;
				Нстр.ДатаНач = НачалоДня(Выборка.ДатаНач);
				Нстр.ДатаКон = КонецДня(Выборка.ДатаКон);
				Нстр.ЗаказПредставление = ПредставлениеЗаказа;
				Нстр.КодПроблемы = "ДатаНач";
				Нстр.Проблема = "Потребности заказа не будут обеспечены к дате запуска";
	            Нстр.ДатаКонПредшествующего = КонецДня(ДатаКонПред);
				Нстр.ПредшествующийЗаказ = ВыборкаПред.Предшественник;
				Нстр.ПредшествующийЗаказПредставление = ПолучитьПредставлениеЗаказа(ВыборкаПред.Предшественник, ТипЗаказаПредшественника);
			КонецЦикла;				
        КонецЕсли;
	КонецЦикла;
    Возврат ТабРезультат;
КонецФункции

Процедура ВывестиРезультатДиагностикиВТабличныйДокумент(ТабРез) Экспорт
	Если ТабРез.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
   МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;	
   Запрос = новый Запрос;
   Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
   Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
   |Заказ КАК Заказ,
   |ЗаказПредставление КАК ЗаказПредставление,
   |Проблема КАК Проблема
   |ПОМЕСТИТЬ ВременнаяТаблица
   |ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
   |";
   Запрос.УстановитьПараметр("ВнешнийИсточник",ТабРез);
   Запрос.Выполнить();
   
   ЗапросПоТаблице = новый Запрос;
   ЗапросПоТаблице.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
   ЗапросПоТаблице.Текст = " ВЫБРАТЬ
   |Заказ,
   |ЗаказПредставление,
   |Проблема
   |ИЗ ВременнаяТаблица 
   |ИТОГИ ПО Проблема";
   Результат = ЗапросПоТаблице.Выполнить();
   
   Таблица = новый ТабличныйДокумент;
   Макет = ПолучитьМакет("МакетДиагностика");
   ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
   ОбластьШапка.Параметры.ПредставлениеПериода = "" + Формат(ДатаНачала, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") + " - " + 
												   Формат(ДатаОкончания, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

   ОбластьШапка.Параметры.ТекстОтборы = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);
   Таблица.Вывести(ОбластьШапка);
   ВыборкаПроблемы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

   Пока ВыборкаПроблемы.Следующий() цикл
	   ОбластьПроблема = Макет.ПолучитьОбласть("Проблема");
       ОбластьПроблема.Параметры.Проблема = ВыборкаПроблемы.Проблема;
	   Таблица.Вывести(ОбластьПроблема);
	   ВыборкаЗаказы = ВыборкаПроблемы.Выбрать();
	   Таблица.НачатьГруппуСтрок("Проблема",истина);
	   Пока ВыборкаЗаказы.Следующий() цикл
		   Область = Макет.ПолучитьОбласть("Заказ");
		   Область.Параметры.ЗаказПредставление = ВыборкаЗаказы.ЗаказПредставление;
		   Область.Параметры.Заказ = ВыборкаЗаказы.Заказ;
		   Область.Параметры.Проблема = ВыборкаПроблемы.Проблема;
		   Таблица.Вывести(Область);
	   КонецЦикла;
	   Таблица.ЗакончитьГруппуСтрок();
   КонецЦикла;
   Таблица.ТолькоПросмотр = истина;
   Таблица.ОтображатьЗаголовки = ложь;
   Таблица.ОтображатьСетку = ложь;
   Таблица.Область(,1,,1).Видимость = ложь;
   Таблица.Показать("Результат диагностики");
   МенеджерВременныхТаблиц = неопределено;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОТОБРАЖЕНИЯ ДИАГРАММЫ

//Процедура заполняет параметры интервала: границы, цвет, редактирование, надпись
Процедура ЗаполнитьПараметрыИнтервала(Интервал, Значение,Знач ДатаНачала,Знач ДатаКонца,Ссылка,Выполнена,ДатаВыполнения)  Экспорт
	Если ДатаНачала>ДатаКонца Тогда
		ОбщегоНазначения.Сообщение("В заказе "+Ссылка+" неверно указан период исполнения заказа: дата начала больше даты окончания");
        Интервал.Начало = НачалоДня(ДатаКонца);
	Иначе
		Интервал.Начало = НачалоДня(ДатаНачала);
	КонецЕсли;	
	Интервал.Конец = КонецДня(ДатаКонца);

	// Формируем подпись.
	УстановитьТекстЗначения(Интервал);

	// Определеям статус заказа.
	Значение.Редактирование = истина;
	Если Выполнена = Истина И Ссылка.Проведен Тогда
		Если ЗначениеЗаполнено(ДатаВыполнения) И ДатаВыполнения<=КонецДня(ДатаКонца) Тогда
			Значение.Цвет = ЦветВыполненого;
			Интервал.Текст = "Выполнен"+?(ЗначениеЗаполнено(ДатаВыполнения)," "+Формат(ДатаВыполнения,"ДФ=dd.MM"),"") ;
		Иначе
			Значение.Цвет = ЦветВыполненогоСОпозданием;
			Интервал.Текст = "Выполнен"+?(ЗначениеЗаполнено(ДатаВыполнения)," "+Формат(ДатаВыполнения,"ДФ=dd.MM"),"")+", просрочен" ;
		КонецЕсли;
		Значение.Редактирование = ложь;
	ИначеЕсли ДатаКонца < НачалоДня(ТекущаяДата()) Тогда
		Значение.Цвет = ЦветПросроченного;
		Интервал.Текст = "Не выполнен, просрочен" ;
	Иначе
		Значение.Цвет = ЦветНевыполненого;
		Интервал.Текст = "Запланирован" ;
	КонецЕсли;				
КонецПроцедуры

//Процедура дополняет текст построителя ПостроительОтчета дополнительными полями,
//	которые требуются для формирования представления заказов
Процедура ДобавитьПредставлениеЗаказовВПостроитель()
	
	Представление_ЗаказНаПроизводство 	= СформироватьТекстДополнительныхПолей(ПостроительОтчета_ПоляЗаказовНаПроизводство.ВыбранныеПоля, 	"ЗПР", 		"Документ.ЗаказНаПроизводство");
	
	Представление_ЗаказПоставщику 		= СформироватьТекстДополнительныхПолей(ПостроительОтчета_ПоляЗаказовПоставщикам.ВыбранныеПоля, 		"ЗПОСТ", 	"Документ.ЗаказПоставщику");

	Представление_ЗаказПокупателя 		= СформироватьТекстДополнительныхПолей(ПостроительОтчета_ПоляЗаказовПокупателей.ВыбранныеПоля, 		"ЗПОК", 	"Документ.ЗаказПокупателя");
	
	Представление_ВнутреннийЗаказ 		= СформироватьТекстДополнительныхПолей(ПостроительОтчета_ПоляВнутреннихЗаказов.ВыбранныеПоля, 		"ВЗ", 		"Документ.ВнутреннийЗаказ");

	
	ТекстЗамены = ""+Представление_ЗаказНаПроизводство + Представление_ЗаказПоставщику + Представление_ЗаказПокупателя + Представление_ВнутреннийЗаказ;
	
	ПостроительОтчета.Текст = СтрЗаменить(ТекстПостроителя,"//ПОЛЯ_ДЛЯ_ПРЕДСТАВЛЕНИЯ_ЗАКАЗОВ",ТекстЗамены);
КонецПроцедуры

//Функция формирует участок запроса - извлечение дополнительных полей для заданного вида заказа
//Параметры: ВыбранныеПоля - коллекция полей для формирования представления
//	Префикс - Префикс для формирования псевдонима переменной
//	ТипЗначения - строковое представление типа для назначения условий в запросе
Функция  СформироватьТекстДополнительныхПолей(ВыбранныеПоля, Префикс, ТипЗначения)
	Текст = "";
	Если ВыбранныеПоля.Количество()=0 Тогда
		//Коллекция выбранных полей пустая - тогда по умолчанию берем представление документа
		Текст = ",ПРЕДСТАВЛЕНИЕ(Ссылка) КАК "+Префикс+"_Поле1";
	Иначе	
		Для каждого Поле из ВыбранныеПоля цикл
			Если Поле.ПутьКДанным="Представление" Тогда
				ИмяПоля = "ПРЕДСТАВЛЕНИЕ(Ссылка)";
			ИначеЕсли Поле.ПутьКДанным = "Ссылка.Комментарий" Тогда
				//Комментарий - это строка неограниченной длины. Его нужно привести к ограниченной длине
				ИмяПоля = "ВЫРАЗИТЬ(Ссылка.Комментарий КАК Строка(200))";
			Иначе
				ИмяПоля = "ПРЕДСТАВЛЕНИЕ("+Поле.ПутьКДанным+")";
			КонецЕсли;
			//Пример текста, полученного в результате данной операции:
			//",ВЫБОР КОГДА Ссылка ССЫЛКА Документ.ЗаказПокупателя ТОГДА 
			//	Ссылка.Контрагент ИНАЧЕ """" КОНЕЦ КАК ЗПОК_Поле1"
			Текст = Текст + ",ВЫБОР КОГДА Ссылка ССЫЛКА "+ТипЗначения+" ТОГДА "+	ИмяПоля + 
			" ИНАЧЕ """" КОНЕЦ КАК "+Префикс+"_Поле"+Число(ВыбранныеПоля.Индекс(Поле)+1);
		КонецЦикла;
	КонецЕсли;
    Возврат Текст;
КонецФункции

//Функция формирует строковое представление заказа исходя из результатов запроса и состава полей для представления
//Параметры: ЭлементВыборки - строка выборки результата запроса либо ссылка на документ
//	ТипДокумента - тип заказа, представление которого необходимо сформировать
Функция ПолучитьПредставлениеЗаказа(ЭлементВыборки, ТипДокумента, Знач СтароеПредставление="") Экспорт
		
	флПереданДокумент = ложь;
	Если ТипЗнч(ЭлементВыборки)=Тип("ДокументССылка.ЗаказПокупателя") ИЛИ
		 ТипЗнч(ЭлементВыборки)= Тип("ДокументССылка.ЗаказПоставщику") ИЛИ
		 ТипЗнч(ЭлементВыборки)= Тип("ДокументССылка.ЗаказНаПроизводство") ИЛИ
		 ТипЗнч(ЭлементВыборки)= Тип("ДокументССылка.ВнутреннийЗаказ") Тогда
		 флПереданДокумент = истина;
	 КонецЕсли;
	 ПредставлениеПоля = "";
	 ВыбранныеПоля = неопределено;
	Если ТипДокумента = Тип("ДокументССылка.ЗаказПокупателя") Тогда
		ПрефиксПоля 	= "ЗПОК";
		ВыбранныеПоля = ПостроительОтчета_ПоляЗаказовПокупателей.ВыбранныеПоля;
	ИначеЕсли ТипДокумента = Тип("ДокументССылка.ЗаказПоставщику") Тогда
		ПрефиксПоля 	= "ЗПОСТ";
		ВыбранныеПоля = ПостроительОтчета_ПоляЗаказовПоставщикам.ВыбранныеПоля;
	ИначеЕсли ТипДокумента = Тип("ДокументССылка.ЗаказНаПроизводство") Тогда
		ПрефиксПоля 	= "ЗПР";
		ВыбранныеПоля = ПостроительОтчета_ПоляЗаказовНаПроизводство.ВыбранныеПоля;
	ИначеЕсли ТипДокумента = Тип("ДокументССылка.ВнутреннийЗаказ") Тогда
		ПрефиксПоля 	= "ВЗ";
		ВыбранныеПоля = ПостроительОтчета_ПоляВнутреннихЗаказов.ВыбранныеПоля;
	Иначе
		Возврат "";
	КонецЕсли;
	Если флПереданДокумент Тогда
		Если СтароеПредставление = "" Тогда
			СтароеПредставление = СокрЛП(ЭлементВыборки);
		КонецЕсли;
		Если ВыбранныеПоля.Количество()=0 Тогда
			возврат СтароеПредставление;
		КонецЕсли;
		
		для каждого Поле из ВыбранныеПоля цикл
			Если Поле.ПутьКДанным = "Представление" Тогда
				ПредставлениеПоля = ПредставлениеПоля+СокрЛП(ЭлементВыборки)+" ";
			Иначе
				ТекРеквизит = СтрЗаменить(Поле.ПутьКДанным,"Ссылка.","");
				Если Найти(ТекРеквизит,".")>0 Тогда
					//не сможем корректно переформировать представление - вернем старое
					Возврат СтароеПредставление;
				КонецЕсли;
				Попытка
					ПредставлениеПоля = ПредставлениеПоля+ СокрЛП(ЭлементВыборки[ТекРеквизит])+" ";
				Исключение
					//не сможем корректно переформировать представление - вернем старое
					Возврат СтароеПредставление;
				КонецПопытки;
			КонецЕсли;	
		Конеццикла;
	Иначе

		КоличествоПолей = ВыбранныеПоля.Количество();
		Если КоличествоПолей = 0 Тогда
			Возврат СтароеПредставление;
		КонецЕсли;
		
		ДЛя ном = 1 По КоличествоПолей цикл
			ПредставлениеПоля = ПредставлениеПоля + СокрЛП(ЭлементВыборки[ПрефиксПоля+"_Поле"+ном])+" ";
		КонецЦикла;
	КонецЕсли;
	Если СтрДлина(СокрЛП(ПредставлениеПоля))>200 Тогда
		Возврат лев(СокрЛП(ПредставлениеПоля),200);
	КонецЕсли;
	
	Возврат СокрЛП(ПредставлениеПоля);
КонецФункции

//Процедура назначает представления полей для построителей "ПоляЗаказов...."
Процедура УстановитьПредставленияПолей() Экспорт 
	ПостроительОтчета_ПоляЗаказовНаПроизводство.ДоступныеПоля.Ссылка.Представление 	= "Заказ на производство";
    ПостроительОтчета_ПоляЗаказовПоставщикам.ДоступныеПоля.Ссылка.Представление 	= "Заказ поставщику";
    ПостроительОтчета_ПоляЗаказовПокупателей.ДоступныеПоля.Ссылка.Представление 	= "Заказ покупателя";
	ПостроительОтчета_ПоляВнутреннихЗаказов.ДоступныеПоля.Ссылка.Представление 		= "Внутренний заказ";
КонецПроцедуры

//Процедура устанавливает фон диаграммы - отображение выходных дней и выделение текущей даты
Процедура УстановитьФонДиаграммы(Диаграмма, МинимальнаяДата, МаксимальнаяДата)
	//очистим имеющиеся интервалы фона
	Диаграмма.ИнтервалыФона.Очистить();
	
	Если ИсточникСведенийОВыходныхДнях = 1 Тогда	
		//Формирование интервалов фона по регламентированному производственному календарю
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	(РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)
		|			ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
		|			ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
		|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &ДатаНачала
		|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &ДатаОкончания");
		
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Диаграмма.ИнтервалыФона.Добавить(НачалоДня(Выборка.ДатаКалендаря), КонецДня(Выборка.ДатаКалендаря));
			КонецЦикла;
		Иначе
			//производственный календарь не заполнен - помечаем субботы и воскресенья
			Если МинимальнаяДата <> NULL Тогда
				Неделя = 3600 * 24 * 7;
				Выходные = 3600 * 48;
				МаксимальнаяДата = МаксимальнаяДата + Неделя * 4;
				ТекДата = МинимальнаяДата;
				Пока ТекДата <= МаксимальнаяДата Цикл;
					Кон = НачалоНедели(ТекДата);
					Нач = Кон - Выходные;
					Диаграмма.ИнтервалыФона.Добавить(Нач, Кон);
					ТекДата = ТекДата + Неделя;
				КонецЦикла;		
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИсточникСведенийОВыходныхДнях = 2 И ЗначениеЗаполнено(График) Тогда
		//по графику
		
		Запрос = Новый Запрос("
        |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ Дата
		|ИЗ
		|(ВЫБРАТЬ Дата,
		|Сумма(Часы) + Сумма(ВечерниеЧасы) + Сумма(НочныеЧасы) КАК КоличествоЧасов
		|ИЗ РегистрСведений.ГрафикиРаботыПоСменам
		|ГДЕ ГрафикРаботы = &ТекГрафик
		|	И  Дата >=&ДатаНачала
		|	И Дата <= &ДатаОкончания
		|СГРУППИРОВАТЬ ПО Дата
		|)КАК ДанныеГрафика
		|ГДЕ КоличествоЧасов=0
		|УПОРЯДОЧИТЬ ПО Дата");
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
        Запрос.УстановитьПараметр("ТекГрафик", График);
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Диаграмма.ИнтервалыФона.Добавить(НачалоДня(Выборка.Дата), КонецДня(Выборка.Дата));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//для текущей даты поставим желтый фон
	ИнтервалФона = Диаграмма.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));
	ИнтервалФона.Цвет = WebЦвета.Лимонный; 

КонецПроцедуры

Функция ПроизводственныйКалендарьЗаполнен(флСообщать=ложь) Экспорт
	Если ДатаНачала=Дата('00010101000000') ИЛИ ДатаОкончания =Дата('00010101000000') Тогда
		Возврат истина;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &ДатаНачала
	|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &ДатаОкончания");
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Если флСообщать Тогда
			ОбщегоНазначения.Сообщение("Регламентированный производственный календарь за указанный период не заполнен. В качестве рабочих дней будут отображены дни с понедельника по пятницу");
		КонецЕсли;
		Возврат ложь;
	КонецЕсли;
	Возврат истина;
КонецФункции

// Процедура создания связей диаграммы Ганта по таблице значений.
//
Процедура СоздатьСвязи(Связи, Диаграмма, Серия) 
	
	ТекущаяТочка = NULL;
	Для Каждого Связь Из Связи Цикл 
		Если масОтображенныеЗаказы.Найти(Связь.Начало)=неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если масОтображенныеЗаказы.Найти(Связь.Конец)=неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяТочка = NULL Или ТекущаяТочка.Значение <> Связь.Конец Тогда
			ТекущаяТочка = Диаграмма.УстановитьТочку(Связь.Конец);
		КонецЕсли;			

		ТочкаНачала = Диаграмма.УстановитьТочку(Связь.Начало);
		Значение = Диаграмма.ПолучитьЗначение(ТочкаНачала, Серия);
		Для Каждого Интервал Из Значение Цикл
			ИнтервалНачала = Интервал;
			Прервать;
		КонецЦикла;				
		Значение = Диаграмма.ПолучитьЗначение(ТекущаяТочка, Серия);
		Для Каждого Интервал Из Значение Цикл
			ИнтервалКонца = Интервал;
			Прервать;
		КонецЦикла;
		Если ИнтервалНачала <> ИнтервалКонца Тогда
			Связь = ИнтервалНачала.Добавить(ИнтервалКонца);
			Если ИнтервалНачала.Конец <= ИнтервалКонца.Начало И НЕ ИнтервалНачала.Значение.Цвет=ЦветПросроченного Тогда
				Связь.Цвет = WebЦвета.Синий;
			Иначе			
				Связь.Цвет = WebЦвета.Красный;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;				
	
КонецПроцедуры // СоздатьСвязи(Связи, Диаграмма, Серия)

// Процедура формирования текста значения.
//
Процедура УстановитьТекстЗначения(Интервал) 
							 
	Интервал.Значение.Текст = Формат(Интервал.Начало,"ДФ=dd.MM") + 
							         "-" +
			                         Формат(Интервал.Конец,"ДФ=dd.MM");
													 
								 
КонецПроцедуры // УстановитьТекстЗначения(Интервал)

Функция Печать(Диаграмма) Экспорт
	ДокументРезультат = новый ТабличныйДокумент;
	Макет = ПолучитьМакет("Макет");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьДиаграмма = Макет.ПолучитьОбласть("ОбластьДиаграммы");
	
	// Заполним заголовок отчета
	Если ДатаНачала = '00010101000000' И ДатаОкончания = '00010101000000' Тогда
		СтрПериод = "без ограничения ";
	Иначе
		Если ДатаНачала = '00010101000000' ИЛИ ДатаОкончания = '00010101000000' Тогда
			СтрПериод = Формат(ДатаНачала, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
			+ " - " + Формат(ДатаОкончания, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");
		Иначе
			СтрПериод = ПредставлениеПериода(НачалоДня(ДатаНачала), КонецДня(ДатаОкончания));
		КонецЕсли;
	КонецЕсли;

	СписокОтбор = "";
	Для Сч=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		Если ПостроительОтчета.Отбор[Сч].Использование Тогда
			СписокОтбор = СписокОтбор +", "+ ПостроительОтчета.Отбор[Сч].Представление 
			+" "+ ПостроительОтчета.Отбор[Сч].ВидСравнения +" "+ ПостроительОтчета.Отбор[Сч].Значение;
		КонецЕсли; 
	КонецЦикла; 

	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = "График заказов";
	ОбластьЗаголовок.Параметры.Период     = "Период: "+СтрПериод;
	ОбластьЗаголовок.Параметры.Отбор      = "Отбор:"    +Сред(СписокОтбор,2);
	ДокументРезультат.Вывести(ОбластьЗаголовок);
	
	// Выводим диаграмму
	ДокументРезультат.Вывести(ОбластьДиаграмма);
	ДиаграммаПечать = ДокументРезультат.Рисунки.Диаграмма.Объект;
	
	//добавим шкалы времени как в исходной диаграмме
	//спрячем старые
	ДиаграммаПечатьЭлементыШкалы = ДиаграммаПечать.ОбластьПостроения.ШкалаВремени.Элементы;
	КоличествоЭлементов = ДиаграммаПечатьЭлементыШкалы.Количество()-1;
	Для каждого Элемент из ДиаграммаПечатьЭлементыШкалы цикл
		Элемент.Видимость = ложь;
	КонецЦикла;
	
	//добавим новые
	Для каждого ШкалаВремени из Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы Цикл
		НоваяШкала = ДиаграммаПечатьЭлементыШкалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяШкала,ШкалаВремени);
	КонецЦикла;
	
	СформироватьДиаграмму(ДокументРезультат.Рисунки.Диаграмма.Объект);
	ДокументРезультат.ОтображатьСетку = ложь;
	ДокументРезультат.ОтображатьЗаголовки = ложь;
	Возврат ДокументРезультат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОХРАНЕНИЯ И ВОССТАНОВЛЕНИЯ НАСТРОЕК

Функция ВосстановитьНастройки() Экспорт
	
	Перем СохраненнаяНастройка;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", 			глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", 				Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", 	?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	
	Результат = УниверсальныеМеханизмы.ВосстановлениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
			
		мТекущаяНастройка = Результат;
		ВосстановитьНастройкиИзСтруктуры(Результат.СохраненнаяНастройка);
			
	Иначе
		
		мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;

КонецФункции // ВосстановитьНастройки()

Процедура СохранитьНастройки() Экспорт
	
	Перем СохраненнаяНастройка;
	
	СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", 			глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", 				Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", 	?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	СтруктураНастройки.Вставить("СохраненнаяНастройка", 	СохраненнаяНастройка);
	СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", 	Ложь);
	СтруктураНастройки.Вставить("СохранятьАвтоматически", 	Ложь);
	
	Результат = УниверсальныеМеханизмы.СохранениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
			
		мТекущаяНастройка = Результат;
			
	Иначе
		
		мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройки()

//Процедура сохраняет настройки отчета в структуру
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		СтруктураСНастройками = Новый Структура;
		
	КонецЕсли;
	
	СтруктураСНастройками.Вставить("НастройкаПериода", 			мНастройкаПериода);
	СтруктураСНастройками.Вставить("флОбновлятьДинамически", 	флОбновлятьДинамически);
	СтруктураСНастройками.Вставить("флРежимРедактирования", 	флРежимРедактирования);
	СтруктураСНастройками.Вставить("ИсточникСведенийОВыходныхДнях",ИсточникСведенийОВыходныхДнях);
	СтруктураСНастройками.Вставить("График", 					График);
    СтруктураСНастройками.Вставить("флОтборыВидимы", 			флОтборыВидимы);
	
	СтруктураСНастройками.Вставить("НастройкиПостроителя_ПоляЗаказовНаПроизводство", 	ПостроительОтчета_ПоляЗаказовНаПроизводство.ПолучитьНастройки(ложь,ложь,ложь,истина,ложь));
	СтруктураСНастройками.Вставить("НастройкиПостроителя_ПоляЗаказовПокупателей", 		ПостроительОтчета_ПоляЗаказовПокупателей.ПолучитьНастройки(ложь,ложь,ложь,истина,ложь));
    СтруктураСНастройками.Вставить("НастройкиПостроителя_ПоляЗаказовПоставщикам", 		ПостроительОтчета_ПоляЗаказовПоставщикам.ПолучитьНастройки(ложь,ложь,ложь,истина,ложь));
	СтруктураСНастройками.Вставить("НастройкиПостроителя_ПоляВнутреннихЗаказов", 		ПостроительОтчета_ПоляВнутреннихЗаказов.ПолучитьНастройки(ложь,ложь,ложь,истина,ложь));
	СтруктураСНастройками.Вставить("НастройкиПостроителя_ПостроительОтчета",			ПостроительОтчета.ПолучитьНастройки(истина,ложь,ложь,ложь,ложь));
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

//Процедура восстанавливает настройки отчета из структуры
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	Перем СохраненнаяНастройкаПериода; 
	Перем НастройкиПостроителя_ПостроительОтчета, НастройкиПостроителя_ПоляЗаказовНаПроизводство;
	Перем НастройкиПостроителя_ПоляЗаказовПокупателей, НастройкиПостроителя_ПоляЗаказовПоставщикам, НастройкиПостроителя_ПоляВнутреннихЗаказов;
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("НастройкаПериода", 			СохраненнаяНастройкаПериода);
	СтруктураСНастройками.Свойство("флОбновлятьДинамически", 	флОбновлятьДинамически);
	СтруктураСНастройками.Свойство("флРежимРедактирования", 	флРежимРедактирования);
	СтруктураСНастройками.Свойство("ИсточникСведенийОВыходныхДнях",ИсточникСведенийОВыходныхДнях);
	СтруктураСНастройками.Свойство("График", 					График);
    СтруктураСНастройками.Свойство("флОтборыВидимы", 			флОтборыВидимы);

	СтруктураСНастройками.Свойство("НастройкиПостроителя_ПоляЗаказовНаПроизводство", 	НастройкиПостроителя_ПоляЗаказовНаПроизводство);
	СтруктураСНастройками.Свойство("НастройкиПостроителя_ПоляЗаказовПокупателей", 		НастройкиПостроителя_ПоляЗаказовПокупателей);
	СтруктураСНастройками.Свойство("НастройкиПостроителя_ПоляЗаказовПоставщикам", 		НастройкиПостроителя_ПоляЗаказовПоставщикам);
	СтруктураСНастройками.Свойство("НастройкиПостроителя_ПоляВнутреннихЗаказов", 		НастройкиПостроителя_ПоляВнутреннихЗаказов);

	СтруктураСНастройками.Свойство("НастройкиПостроителя_ПостроительОтчета", 			НастройкиПостроителя_ПостроительОтчета);

	Если флОтборыВидимы = неопределено Тогда
		флОтборыВидимы = ложь;
	КонецЕсли;
	
	Если ТипЗнч(СохраненнаяНастройкаПериода) = Тип("НастройкаПериода") Тогда
		мНастройкаПериода = СохраненнаяНастройкаПериода;
	КонецЕсли;
	ДатаНачала = мНастройкаПериода.ДатаНачала;
	ДатаОкончания = мНастройкаПериода.ДатаОкончания;
	
	Если ТипЗнч(НастройкиПостроителя_ПостроительОтчета) = Тип("НастройкиПостроителяОтчета") Тогда
		ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя_ПостроительОтчета,истина,ложь,ложь,ложь,ложь);
	КонецЕсли;
	Если ТипЗнч(НастройкиПостроителя_ПоляЗаказовНаПроизводство) = Тип("НастройкиПостроителяОтчета") Тогда
		ПостроительОтчета_ПоляЗаказовНаПроизводство.УстановитьНастройки(НастройкиПостроителя_ПоляЗаказовНаПроизводство,ложь,ложь,ложь,истина,ложь);
	КонецЕсли;
    Если ТипЗнч(НастройкиПостроителя_ПоляЗаказовПокупателей) = Тип("НастройкиПостроителяОтчета") Тогда
		ПостроительОтчета_ПоляЗаказовПокупателей.УстановитьНастройки(НастройкиПостроителя_ПоляЗаказовПокупателей,ложь,ложь,ложь,истина,ложь);
	КонецЕсли;
    Если ТипЗнч(НастройкиПостроителя_ПоляЗаказовПоставщикам) = Тип("НастройкиПостроителяОтчета") Тогда
		ПостроительОтчета_ПоляЗаказовПоставщикам.УстановитьНастройки(НастройкиПостроителя_ПоляЗаказовПоставщикам,ложь,ложь,ложь,истина,ложь);
	КонецЕсли;
	Если ТипЗнч(НастройкиПостроителя_ПоляВнутреннихЗаказов) = Тип("НастройкиПостроителяОтчета") Тогда
		ПостроительОтчета_ПоляВнутреннихЗаказов.УстановитьНастройки(НастройкиПостроителя_ПоляВнутреннихЗаказов,ложь,ложь,ложь,истина,ложь);
	КонецЕсли;

	УстановитьПредставленияПолей();
	Возврат Истина;
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

мНастройкаПериода 	= Новый НастройкаПериода;
ЦветВыполненого 	= WebЦвета.СинийСоСтальнымОттенком;
ЦветНевыполненого 	= WebЦвета.Зеленый;
ЦветПросроченного 	= WebЦвета.ТемноКрасный;
ЦветВыполненогоСОпозданием = WebЦвета.ТемноФиолетовый;

//составляем массивы табличных частей
масТабличныеЧастиЗПР = новый Массив;
Для каждого ТабличнаяЧасть из Метаданные.Документы.ЗаказНаПроизводство.ТабличныеЧасти Цикл
	масТабличныеЧастиЗПР.Добавить(ТабличнаяЧасть.Имя);
Конеццикла;

масТабличныеЧастиЗПок = новый Массив;
Для каждого ТабличнаяЧасть из Метаданные.Документы.ЗаказПокупателя.ТабличныеЧасти Цикл
	масТабличныеЧастиЗПок.Добавить(ТабличнаяЧасть.Имя);
Конеццикла;

масТабличныеЧастиЗПост = новый Массив;
Для каждого ТабличнаяЧасть из Метаданные.Документы.ЗаказПоставщику.ТабличныеЧасти Цикл
	масТабличныеЧастиЗПост.Добавить(ТабличнаяЧасть.Имя);
Конеццикла;

масТабличныеЧастиВЗ = новый Массив;
Для каждого ТабличнаяЧасть из Метаданные.Документы.ВнутреннийЗаказ.ТабличныеЧасти Цикл
	масТабличныеЧастиВЗ.Добавить(ТабличнаяЧасть.Имя);
Конеццикла;
масОтображенныеЗаказы = новый Массив;

флОтборыВидимы = ложь;
#КонецЕсли