Перем ДоступныеТипыОбъектов Экспорт;

Перем ИспользованиеРеквизитаДляЭлемента Экспорт;
Перем ИспользованиеРеквизитаДляГруппы Экспорт;


// Устанавливает значения свойств
//
Процедура УстановитьЗначенияСвойств(ЗначенияСвойств) Экспорт

	Для каждого ЭлКоллекции Из УстанавливаемыеСвойства Цикл
		Если ЗначенияСвойств.Свойство(ЭлКоллекции.Свойство) Тогда
			ЭлКоллекции.Значение = ЗначенияСвойств[ЭлКоллекции.Свойство];
			ЭлКоллекции.Пометка = Истина;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры //
 
Процедура УстановитьДоступныеТипы(ДоступныеТипы) Экспорт

	ДоступныеТипыОбъектов = ДоступныеТипы;
	
	Если ДоступныеТипы.Типы().Количество() = 1 Тогда
		ОписаниеТипаОбъектов = ДоступныеТипы;
	КонецЕсли; 
	
КонецПроцедуры //
 
# Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБЪЕКТА

// Выполняет обработку объектов.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбработку() Экспорт
	
	
	ЭтоСправочник = Метаданные.Справочники.Содержит(Метаданные.НайтиПоТипу(ОписаниеТипаОбъектов.Типы()[0]));
	
	ПроверитьИспользованиеРеквизитов = ЭтоСправочник;
	
	Если ВыполнятьОбработкуВОднойТранзакции Тогда
		НачатьТранзакцию();
		МассивПометок = ОбрабатываемыеОбъекты.ВыгрузитьКолонку("Пометка");
	КонецЕсли;
	
	КэшироватьРодителей = Ложь;
	Если ОписаниеТипаОбъектов.Типы().Количество() И ЭтоСправочник Тогда
		СтрокаВладелец = УстанавливаемыеСвойства.Найти("Владелец");
		СтрокаРодитель = УстанавливаемыеСвойства.Найти("Родитель");
		Если Не СтрокаВладелец = Неопределено и Не СтрокаРодитель = Неопределено и СтрокаВладелец.Пометка и не СтрокаРодитель.Пометка Тогда
			КэшироватьРодителей = Истина;
		КонецЕсли;
	КонецЕсли;
	
	КэшРодителей = Новый Соответствие;
	
	Для каждого СтрокаОбъекты Из ОбрабатываемыеОбъекты Цикл
		Если СтрокаОбъекты.Пометка = Ложь Тогда
			Продолжить;
		ИначеЕсли СтрокаОбъекты.Объект.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Если ОбрабатыватьЭлементыВыбранныхГрупп Тогда
				СписокОбъектов = ПолучитьПодчиненныеЭлементы(СтрокаОбъекты.Объект);
				Для каждого Объект Из СписокОбъектов Цикл
					ОбработатьОбъект(Объект, КэшироватьРодителей, КэшРодителей, ПроверитьИспользованиеРеквизитов);
				КонецЦикла
			Иначе
				ОбработатьОбъект(СтрокаОбъекты.Объект, КэшироватьРодителей, КэшРодителей, ПроверитьИспользованиеРеквизитов);
			КонецЕсли
		Исключение
			Сообщить("Не записан объект: """  + СтрокаОбъекты.Объект + """:" + Символы.ПС + "- " + ОписаниеОшибки(), СтатусСообщения.Важное);
			
			Если ВыполнятьОбработкуВОднойТранзакции Тогда
				ОтменитьТранзакцию();
				ОбрабатываемыеОбъекты.ЗагрузитьКолонку(МассивПометок, "Пометка");
				Возврат;
			КонецЕсли;
		КонецПопытки;
		
		Если СниматьПометкуСОбработанныхОбъектов Тогда
			СтрокаОбъекты.Пометка = Ложь;
		КонецЕсли;
		
		Состояние("Обработано объектов: " + СтрокаОбъекты.НомерСтроки + " из " + ОбрабатываемыеОбъекты.Количество());
		
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	
	СообщениеОбОчищенныхРодителях = "";
	Если КэшироватьРодителей Тогда
		Для каждого КлючИЗначение Из КэшРодителей Цикл
			Объект = КлючИЗначение.Ключ;
			ПрошлыйРодитель = КлючИЗначение.Значение;
			Если Объект.Владелец = ПрошлыйРодитель.Владелец Тогда
				Объект.Родитель = ПрошлыйРодитель;
				Попытка
					Объект.Заблокировать();
					Объект.Записать();
				Исключение
					Сообщить("Не записан объект: """  + Объект + """:" + Символы.ПС + "- " + ОписаниеОшибки(), СтатусСообщения.Важное);
					Если ВыполнятьОбработкуВОднойТранзакции Тогда
						ОтменитьТранзакцию();
						ОбрабатываемыеОбъекты.ЗагрузитьКолонку(МассивПометок, "Пометка");
						Возврат;
					КонецЕсли;
				КонецПопытки;
			Иначе
				СообщениеОбОчищенныхРодителях = СообщениеОбОчищенныхРодителях + Символы.ПС + " - " + Объект;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВыполнятьОбработкуВОднойТранзакции Тогда
		Попытка
			ЗафиксироватьТранзакцию();
		Исключение
			ОбрабатываемыеОбъекты.ЗагрузитьКолонку(МассивПометок, "Пометка");
		КонецПопытки
	КонецЕсли;
	
	Если Не ПустаяСтрока(СообщениеОбОчищенныхРодителях) Тогда
		Сообщить("Очищены родители у следующих объектов:" + СообщениеОбОчищенныхРодителях);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличную часть обрабатываемых объектов ссылками 
// из выделенных строк списка.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьВыделеннымиСтроками(ВыделенныеСтроки) Экспорт
	
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		СтрокаОбъекты = ОбрабатываемыеОбъекты.Добавить();
		
		СтрокаОбъекты.Пометка = Истина;
		СтрокаОбъекты.Объект  = ВыделеннаяСтрока.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает новые значения реквизитов объекта и записывает его
//
// Параметры:
//  Ссылка - ссылка на обрабатываемый  объект
//  КэшироватьРодителей - признак, что нужно запоминать прежних родителей
//  КэшРодителей - соответствие для хранения родителей обрабатываемых объектов
//
Процедура ОбработатьОбъект(Ссылка, КэшироватьРодителей, КэшРодителей, ПроверитьИспользованиеРеквизитов = Ложь)
	Объект = Ссылка.ПолучитьОбъект();
	
	Если КэшироватьРодителей и ЗначениеЗаполнено(Объект.Родитель) Тогда
		ПрошлыйРодитель = Объект.Родитель;
	Иначе
		ПрошлыйРодитель = Неопределено;
	КонецЕсли;
	
	Для каждого СтрокаСвойства Из УстанавливаемыеСвойства Цикл
		Если НЕ СтрокаСвойства.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПроверитьИспользованиеРеквизитов 
			И СтрокаСвойства.ИспользованиеРеквизита <> 0 Тогда
			
			Если Объект.ЭтоГруппа
					И СтрокаСвойства.ИспользованиеРеквизита <> ИспользованиеРеквизитаДляГруппы
				
				ИЛИ 
				
				НЕ Объект.ЭтоГруппа 
					И СтрокаСвойства.ИспользованиеРеквизита <> ИспользованиеРеквизитаДляЭлемента Тогда
				
				Продолжить;

			КонецЕсли; 
				
		КонецЕсли;
		
		Если Объект[СтрокаСвойства.Свойство] <> СтрокаСвойства.Значение Тогда
			
			Объект[СтрокаСвойства.Свойство] = СтрокаСвойства.Значение;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.Модифицированность() Тогда
		
		Если Не ПрошлыйРодитель = Неопределено Тогда
			Объект.Родитель = Неопределено;
		КонецЕсли;
		
		Объект.Заблокировать();
		Объект.Записать();
		Объект.Разблокировать();
		
		Если Не ПрошлыйРодитель = Неопределено Тогда
			КэшРодителей.Вставить(Объект, ПрошлыйРодитель);
		КонецЕсли;

	КонецЕсли;
	
	Если ВыводитьСообщенияОбОбработанныхОбъектах Тогда
		ОбщегоНазначения.Сообщение("Обработан объект: """ + Объект + """.", , "Обработка объектов", Объект.Ссылка);
	КонецЕсли;
			
КонецПроцедуры	

// Получить все подчиненные данной ссылке элементы
Функция ПолучитьПодчиненныеЭлементы(Группа)
	Ссылки = Новый Массив;
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Группа));
	Если Не Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Ссылки.Добавить(Группа);
	Иначе
		ИмяТаблицы = "";
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник." + ОбъектМетаданных.Имя + " ГДЕ Ссылка В ИЕРАРХИИ (&Группа)";
		Запрос.УстановитьПараметр("Группа", Группа);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Ссылки.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	Возврат Ссылки;
КонецФункции

# КонецЕсли

ДоступныеТипыОбъектов = Неопределено;

ИспользованиеРеквизитаДляЭлемента = 1;
ИспользованиеРеквизитаДляГруппы = 2;
