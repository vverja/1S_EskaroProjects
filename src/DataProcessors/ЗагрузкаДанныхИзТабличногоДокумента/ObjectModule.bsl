#Если Клиент Тогда
	
// Структура колонок загружаемых реквизитов, с описанием их свойств
Перем Колонки;

// Структура примитивных типов (Булево, Дата, Строка, Число)
Перем ПримитивныеТипы;

// Структура Менеджеров объектов метаданных
Перем МенеджерыОбъектовМетаданных;

// Соответвие, для кэширования информации о соответсвии типа менеджеру
Перем КешМенеджеровПоТипу;

////////////////////////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//
Процедура мСообщитьОбОшибке(ТекстСообщения, Отказ = Ложь, Заголовок = "") Экспорт

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	Если ОкончаниеСлужебногоСообщения > 0 И НачалоСлужебногоСообщения > 0 Тогда
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		Сообщить(Заголовок);
		Заголовок = "";
	КонецЕсли;
	
	Сообщить(ТекстСообщения, СтатусСообщения.Важное);
	
КонецПроцедуры // ОбщегоНазначения.СообщитьОбОшибке()

// Функция "расщепляет" строку на подстроки, используя заданный
//		разделитель. Разделитель может иметь любую длину.
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например,
//		ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов,
//		три из которых - пустые строки, а
//		ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры:
//		Стр - 			строка, которую необходимо разложить на подстроки.
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция мРазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

// Функция интерактивно предлагает выбрать значение в зависимости от переданных параметров
// В форме, в списке выбора или выдает сообщение, что "Данная ячейка не может содержать значение"
//
// Параметры:
//  Значение - значение, которое необходимо выбрать
//  ОписаниеТипов - Описание типов выбираемого значения
//  СвязьПоТипу   - ПВХ связи значения по типу
//  ЭлементСвязиПоТипу - номер элемента связи по типу
//
// Возвращаемое значение:
//  Истина - значение выбрано, ложь - иначе.
//
Функция мВыбратьЗначение(Значение, ОписаниеТипов, СвязьПоТипу, ЭлементСвязиПоТипу,СвязьПоВладельцу,ВыборГруппы = Ложь)
	
	Если СвязьПоТипу = Неопределено Тогда
		
		Типы = ОписаниеТипов;
		
	Иначе
		
		ВидыСубконто = СвязьПоТипу.ВидыСубконто;
		
		Если ЭлементСвязиПоТипу > ВидыСубконто.Количество() Тогда
			
			Предупреждение("Данная ячейка не может содержать значение");
			Возврат ложь;
		КонецЕсли;
		
		Типы = СвязьПоТипу.ВидыСубконто[ЭлементСвязиПоТипу-1].ВидСубконто.ТипЗначения;
		
	КонецЕсли;
	
	Если Типы.Типы().Количество() = 1 Тогда
		Тип = Типы.Типы()[0];
		Менеджер         = ПолучитьМенеджераПоТипу(Тип);
		Если Менеджер = Неопределено Тогда
			
			Возврат ВвестиЗначение(Значение,,Типы);
			
		Иначе
			
			Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
				
				Если ВыборГруппы  Тогда
					ФормаВыбора = Менеджер.ПолучитьФормуВыбораГруппы();
				Иначе
					ФормаВыбора = Менеджер.ПолучитьФормуВыбора();
				КонецЕсли;
				
				ФормаВыбора.ПараметрВыборПоВладельцу = СвязьПоВладельцу;
				ФормаВыбора.ПараметрОтборПоВладельцу = СвязьПоВладельцу;
				
			Иначе
				
				ФормаВыбора = Менеджер.ПолучитьФормуВыбора();
				
			КонецЕсли;
			
			ФормаВыбора.НачальноеЗначениеВыбора = Значение;
			Значение = ФормаВыбора.ОткрытьМодально();
			Возврат Не Значение = Неопределено;
		КонецЕсли;
	Иначе
		
		ФормаВыбораЗначения = ПолучитьФорму("ФормаВыбораЗначения");
		ФормаВыбораЗначения.ЭлементыФормы.Значение.ВыборПоВладельцу = СвязьПоВладельцу;
		ФормаВыбораЗначения.ЭлементыФормы.Значение.ТипЗначения = ОписаниеТипов;
		ФормаВыбораЗначения.ЭлементыФормы.Значение.ОграничениеТипа = Типы;
		ФормаВыбораЗначения.ЭлементыФормы.Значение.ЭлементСвязиПоТипу = ЭлементСвязиПоТипу;
		ФормаВыбораЗначения.ЭлементыФормы.Значение.Значение = Значение;
		Значение = ФормаВыбораЗначения.ОткрытьМодально();
		Возврат Не Значение = Неопределено;
	КонецЕсли;
	
	
КонецФункции // ()

// Функция приводит строковое представление числа к его значению
//
// Параметры:
//  Представление - Представление числа
//  ОписаниеТипов - Допустимое описание типов численного значения
//
// Возвращаемое значение:
//  Значение типа число
//
Функция мПривестиКЧислу(Представление, Знач ОписаниеТипов = Неопределено, Примечание = "")
	
	Если ОписаниеТипов = Неопределено Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Число");
	КонецЕсли;
	
	НРегПредставление = НРег(Представление);
	Если НРегПредставление = "да" или НРегПредставление = "истина" или НРегПредставление = "включено" Тогда
		Возврат 1;
	ИначеЕсли НРегПредставление = "нет" или НРегПредставление = "ложь" или НРегПредставление = "выключено" Тогда
		Возврат 0;
	КонецЕсли;
	
	Результат = СтрЗаменить(Представление, " ", "");
	Попытка
		Результат = Число(Результат);
	Исключение
		Примечание = "Неправильный формат числа";
		Возврат 0;
	КонецПопытки;
	
	Результат1 = ОписаниеТипов.ПривестиЗначение(Результат);
	
	Если Не Результат1 = Результат Тогда
		Примечание = "Недопустимое числовое значение";
	КонецЕсли;
	
	Возврат Результат1;
	
КонецФункции // мПривестиКЧислу()

// Функция возвращает части представления даты
//
// Параметры:
//  Представление - Представление даты
//
// Возвращаемое значение:
//  массив частей даты
//
Функция ПолучитьЧастиПредставленияДаты(ЗНАЧ Представление)
	
	МассивЧастей = Новый Массив;
	НачалоЦифры = 0;
	Для к = 1 По СтрДлина(Представление) Цикл
		
		Символ = Сред(Представление, к ,1);
		ЭтоЦифра = Символ >= "0" и Символ <= "9";
		
		Если ЭтоЦифра Тогда
			
			Если НачалоЦифры = 0 Тогда
				НачалоЦифры = к;
			КонецЕсли;
			
		Иначе
			
			Если Не НачалоЦифры = 0 Тогда
				МассивЧастей.Добавить(Число(Сред(Представление,НачалоЦифры, к - НачалоЦифры)));
			КонецЕсли;
			
			НачалоЦифры = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НачалоЦифры = 0 Тогда
		МассивЧастей.Добавить(Число(Сред(Представление,НачалоЦифры)));
	КонецЕсли;
	
	Возврат МассивЧастей;
КонецФункции // ()

// Функция приводит строковое представление даты к его значению
//
// Параметры:
//  Представление - Представление числа
//  ОписаниеТипов - Допустимое описание типов значения типа дата
//
// Возвращаемое значение:
//  Значение типа дата
//
Функция мПривестиКДате(Представление, ТипРеквизита, Примечание = "")
	
	Результат = ТипРеквизита.ПривестиЗначение(Представление);
	Если Результат = '00010101' Тогда
		
		МассивЧастей = ПолучитьЧастиПредставленияДаты(Представление);
		Если ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
			
			Попытка
				
				Если МассивЧастей.Количество() = 3 Тогда
					Результат = Дата(1,1,1, МассивЧастей[0],МассивЧастей[1],МассивЧастей[2]);
				ИначеЕсли МассивЧастей.Количество() = 6 Тогда
					Результат = Дата(1,1,1, МассивЧастей[3],МассивЧастей[4],МассивЧастей[5]);
				КонецЕсли;
				
			Исключение
				Примечание = "Неправильный формат даты";
			КонецПопытки;
			
		ИначеЕсли МассивЧастей.Количество() = 3 или МассивЧастей.Количество() = 6 Тогда
			
			Если МассивЧастей[0] >= 1000 Тогда
				Временно = МассивЧастей[0];
				МассивЧастей[0] = МассивЧастей[2];
				МассивЧастей[2] = Временно;
			КонецЕсли;
			
			Если МассивЧастей[2] < 100 Тогда
				МассивЧастей[2] = МассивЧастей[2] + ?(МассивЧастей[2] < 30, 2000,1900);
			КонецЕсли;
			
			Попытка
				Если МассивЧастей.Количество() = 3 или ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
					Результат = Дата(МассивЧастей[2],МассивЧастей[1],МассивЧастей[0]);
				Иначе
					Результат = Дата(МассивЧастей[2],МассивЧастей[1],МассивЧастей[0],МассивЧастей[3],МассивЧастей[4],МассивЧастей[5]);
				КонецЕсли;
			Исключение
				Примечание = "Неправильный формат даты";
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает менеджер по типу значения
//
// Параметры:
//  ТипЗначения - Тип значения, по которому нужна вернуть менеджер
//
// Возвращаемое значение:
//  менеджер
Функция ПолучитьМенеджераПоТипу(ТипЗначения) Экспорт
	
	Если Не ТипЗначения = Неопределено Тогда
		Менеджер = КешМенеджеровПоТипу[ТипЗначения];
		Если Менеджер = Неопределено Тогда
			Для Каждого МенеджерОбъектаМетаданных Из МенеджерыОбъектовМетаданных Цикл
				Если МенеджерОбъектаМетаданных.Значение.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
					Менеджер = МенеджерОбъектаМетаданных.Значение[Метаданные.НайтиПоТипу(ТипЗначения).Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;
			КешМенеджеровПоТипу.Вставить(ТипЗначения, Менеджер);
		КонецЕсли;
		Возврат Менеджер;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция вычисляет значение ячейки для режима "Вычислять"
//
// Параметры:
//  Выражение - програмный код, который необходимо выполнить
//  ТекущиеДанные  - структура загруженных значений
//  ТекстЯчейки    - текст текущей ячейки
//  ТекстыЯчеек    - массив текстов ячеек строки
//  Результат      - результат вычисления
//
// Возвращаемое значение:
//  Структура, сордержащая Результат и ОписаниеОшибки
Функция ВычислитьЗначениеЯчейки(Знач Выражение,Знач ТекущиеДанные,Знач ТекстЯчейки, Знач ТекстыЯчеек,Знач Результат)
	
	ТекстЯчейки = СокрЛП(ТекстЯчейки);
	ОписаниеОшибки = "";
	Попытка
		Выполнить(Выражение);
	Исключение
		мСообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Новый Структура("Результат,ОписаниеОшибки",Результат,ОписаниеОшибки);
	
КонецФункции // ВычислитьЗначениеЯчейки(ТекущаяСтрока,Представление)()

// Функция записывает объект в информационную базу данных, используя
// события определенные пользователем в форме редактирования событий
//
// Параметры:
//  Объект      - записываемый объект
//  ТекстыЯчеек - массив текстов ячеек, загружаемой строки
//
// Возвращаемое значение:
//  Истина, если объект записан, Ложь - иначе
//
Функция ЗаписатьОбъект(Объект, ТекстыЯчеек = Неопределено)
	
	Отказ = Ложь;
	НачатьТранзакцию();
	Если Не ПустаяСтрока(ПередЗаписьюОбъекта) Тогда
		Попытка
			Выполнить(ПередЗаписьюОбъекта);
			Если Отказ Тогда
				ОписаниеОшибки = "";//Установлен отказ перед записью объекта
			КонецЕсли;
		Исключение
			Отказ = Истина;
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	Если Не Отказ  Тогда
		Попытка
			Объект.Записать();
		Исключение
			Отказ = Истина;
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	Если Не Отказ и Не ПустаяСтрока(ПриЗаписиОбъекта) Тогда
		
		Попытка
			Выполнить(ПриЗаписиОбъекта);
			Если Отказ Тогда
				ОписаниеОшибки = "";//Установлен отказ при записи объекта
			КонецЕсли;
			
		Исключение
			Отказ = Истина;
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		Если Не Отказ  Тогда
			Попытка
				Объект.Записать();
			Исключение
				Отказ = Истина;
				ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		мСообщитьОбОшибке(ОписаниеОшибки);
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции // ()

// Функция обрабатывает событие "После добавления строки",
// определенное пользователем в форме редактирования событий
//
// Параметры:
//  Объект      - записываемый объект
//  ТекущиеДанные  - структура загруженных значений
//  ТекстыЯчеек    - массив текстов ячеек строки
//
// Возвращаемое значение:
//  Истина, если в событие "После добавления строки" не был установлен Отказ, Ложь - иначе
//
Функция ОбработатьСобытиеПослеДобавленияСтроки(Объект, ТекущиеДанные, ТекстыЯчеек)
	
	Попытка
		
		Выполнить(ПослеДобавленияСтроки);
		
	Исключение
		
		мСообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ()

// Функция считывает в табличный документ данные из файла в формате Excel
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - имя файла в формате Excel, из которого необходимо прочитать данные
//  НомерЛистаExcel    - номер листа книги Excel, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
Функция мПрочитатьТабличныйДокументИзExcel(ТабличныйДокумент, ИмяФайла, НомерЛистаExcel = 1) Экспорт
	
	xlLastCell = 11;
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ИмяФайла);
		Состояние("Обработка файла Microsoft Excel...");
		ExcelЛист = Excel.Sheets(НомерЛистаExcel);
	Исключение
		Сообщить("Ошибка. Возможно неверно указан номер листа книги Excel.");
		Возврат ложь;
		
	КонецПопытки;
	
	ТабличныйДокумент.Очистить();
	
	ActiveCell = Excel.ActiveCell.SpecialCells(xlLastCell);
	RowCount = ActiveCell.Row;
	ColumnCount = ActiveCell.Column;
	Для Column = 1 По ColumnCount Цикл
		ТабличныйДокумент.Область("C" + Формат(Column, "ЧГ=")).ШиринаКолонки = ExcelЛист.Columns(Column).ColumnWidth;
	КонецЦикла;
	Для Row = 1 По RowCount Цикл
		
		Для Column = 1 По ColumnCount Цикл
			ТабличныйДокумент.Область("R" + Формат(Row, "ЧГ=") +"C" + Формат(Column, "ЧГ=")).Текст = ExcelЛист.Cells(Row,Column).Value;
		КонецЦикла;
		
	КонецЦикла;
	
	Excel.WorkBooks.Close();
	Excel = 0;
	
	Возврат Истина;
	
КонецФункции // ()

// Функция считывает в табличный документ данные из файла в формате TXT
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - имя файла в формате TXT, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
Функция мПрочитатьТабличныйДокументИзТекста(ТабличныйДокумент, ИмяФайла) Экспорт
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Попытка
		ТекстовыйДокумент.Прочитать(ИмяФайла);
	Исключение
		Сообщить("Ошибка открытия файла!");
		Возврат Ложь;
	КонецПопытки;
	
	ТабличныйДокумент.Очистить();
	Для ТекущаяСтрока = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		ТекущаяКолонка = 0;
		Для каждого Значение Из мРазложитьСтрокуВМассивПодстрок(ТекстовыйДокумент.ПолучитьСтроку(ТекущаяСтрока),Символы.Таб) Цикл
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ()

// Функция считывает в табличный документ данные из файла в формате dBase III (*.dbf)
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - имя файла в формате TXT, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
Функция мПрочитатьТабличныйДокументИзDBF(ТабличныйДокумент, ИмяФайла) Экспорт
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	
	XBase  = Новый XBase;
	XBase.Кодировка = КодировкаXBase.OEM;
	Попытка
		XBase.ОткрытьФайл(ИмяФайла);
	Исключение
		Сообщить("Ошибка открытия файла!");
		Возврат Ложь;
	КонецПопытки;
	
	ТабличныйДокумент.Очистить();
	ТекущаяСтрока = 1;
	
	
	ТекущаяКолонка = 0;
	Для каждого Поле Из XBase.поля Цикл
		ТекущаяКолонка = ТекущаяКолонка + 1;
		ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = Поле.Имя;
	КонецЦикла;
	
	
	Рез = XBase.Первая();
	Пока Не XBase.ВКонце() Цикл
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
		ТекущаяКолонка = 0;
		Для каждого Поле Из XBase.поля Цикл
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = XBase.ПолучитьЗначениеПоля(ТекущаяКолонка - 1);
		КонецЦикла;
		
		XBase.Следующая();
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
//

// Функция интерактивно предлагает выбрать значение в текущей ячейке табличного документа
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в текущей ячейке которого необходимо выбрать значение
//
// Возвращаемое значение:
//  Истина, если значение выбрано, Ложь - иначе
//
Процедура ВыбратьЗначениеВЯчейке(ТабличныйДокумент) Экспорт
	
	СформироватьСтруктуруКолонок();
	
	ОчиститьСообщения();
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	
	Если ТекущаяОбласть.Верх <> ТекущаяОбласть.Низ Или ТекущаяОбласть.Лево <> ТекущаяОбласть.Право Тогда
		Предупреждение("Для непосредственного выбора значения необходимо выбирать только одну ячейку");
		Возврат;
	КонецЕсли;
	
	ТекущаяКолонка = ПолучитьКолонку(ТекущаяОбласть);
	
	Если ТекущаяКолонка = Неопределено  Тогда
		
		Предупреждение("Значение данной колонки не выбирается");
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока = КонтрольЗаполненияСтроки(ТабличныйДокумент, ТекущаяОбласть.Верх);
	Значение = ТекущаяОбласть.Расшифровка;
	
	СвязьПоТипу = Неопределено;
	Если Не ПустаяСтрока(ТекущаяКолонка.СвязьПоТипу) Тогда
		Если ТипЗНЧ(ТекущаяКолонка.СвязьПоТипу) = Тип("Строка") Тогда
			ТекущаяСтрока.Свойство(ТекущаяКолонка.СвязьПоТипу,СвязьПоТипу);
		Иначе
			СвязьПоТипу = ТекущаяКолонка.СвязьПоТипу;
		КонецЕсли;
	КонецЕсли;
	
	СвязьПоВладельцу = Неопределено;
	Если Не ПустаяСтрока(ТекущаяКолонка.СвязьПоВладельцу) Тогда
		Если ТипЗНЧ(ТекущаяКолонка.СвязьПоВладельцу) = Тип("Строка") Тогда
			ТекущаяСтрока.Свойство(ТекущаяКолонка.СвязьПоВладельцу,СвязьПоВладельцу);
		Иначе
			СвязьПоВладельцу = ТекущаяКолонка.СвязьПоВладельцу;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементСвязиПоТипу = ?(ТекущаяКолонка.ЭлементСвязиПоТипу = 0,1,ТекущаяКолонка.ЭлементСвязиПоТипу);
	
	
	Если мВыбратьЗначение(Значение, ТекущаяКолонка.ОписаниеТипов,СвязьПоТипу, ЭлементСвязиПоТипу,СвязьПоВладельцу,ТекущаяКолонка.ИмяРеквизита = "Родитель") Тогда
		
		ТекущаяОбласть.Расшифровка = Значение;
		
		Если ПустаяСтрока(ТекущаяКолонка.ИскатьПо) Тогда
			ТекущаяОбласть.Текст = Строка(Значение);
		Иначе
			ТекущаяОбласть.Текст = Строка(Значение[ТекущаяКолонка.ИскатьПо]);
		КонецЕсли;
		ОчиститьСообщения();
		КонтрольЗаполненияСтроки(ТабличныйДокумент, ТекущаяОбласть.Верх);
	КонецЕсли;
	
КонецПроцедуры // ()

////////////////////////////////////////////////////////////////////////////////
//

// Функция возвращает метаданные источника данных
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//  Объект метаданных
//
Функция ПолучитьМетаданныеИсточника() Экспорт
	
	Если РежимЗагрузки = 0 Тогда
		Если Не СсылкаИсточника = Неопределено Тогда
			Возврат СсылкаИсточника.Метаданные();
		КонецЕсли; 
	ИначеЕсли РежимЗагрузки = 1 Тогда
		Если Не СсылкаИсточника = Неопределено и Не ТабличнаяЧастьИсточника = Неопределено Тогда
			Возврат СсылкаИсточника.Метаданные().ТабличныеЧасти.Найти(ТабличнаяЧастьИсточника);
		КонецЕсли; 
	ИначеЕсли РежимЗагрузки = 2 Тогда
		Если Не ПустаяСтрока(ИмяВидаРегистра) Тогда
			Возврат Метаданные.РегистрыСведений[ИмяВидаРегистра];
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции // ()

// Функция возвращает значение структуры "Колонки" по области табличного документа,
// содержащее описание свойств колонки
//
// Параметры:
//  область - область табличного документа
//
// Возвращаемое значение:
//  значение структуры "Колонки"
//
Функция ПолучитьКолонку(Область)
	Для каждого КлючИЗначение Из Колонки Цикл
		Колонка = КлючИЗначение.Значение;
		Если Область.Лево = Колонка.НомерКолонки Тогда
			Возврат Колонка;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции // ()

// Процедура формирует структуру колонок загружаемых реквизитов из табличной части "ТаблицаЗагружаемыхРеквизитов"
//
// Параметры:
//  нет
//
Процедура СформироватьСтруктуруКолонок() Экспорт
	
	НомерКолонки = 1;
	Колонки = Новый Структура;
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		Колонка = Новый Структура;
		Для каждого КолонкаЗагружаемыхРеквизитов Из ТаблицаЗагружаемыхРеквизитов.Колонки Цикл
			Если Не РучнаяНумерацияКолонокТабличногоДокумента И КолонкаЗагружаемыхРеквизитов.Имя = "НомерКолонки" Тогда
				Если ЗагружаемыйРеквизит.Пометка Тогда
					Колонка.Вставить("НомерКолонки",НомерКолонки);
					НомерКолонки = НомерКолонки + 1;
				Иначе
					Колонка.Вставить("НомерКолонки",0);
				КонецЕсли;
			Иначе
				Колонка.Вставить(КолонкаЗагружаемыхРеквизитов.Имя,ЗагружаемыйРеквизит[КолонкаЗагружаемыхРеквизитов.Имя]);
			КонецЕсли;
			
		КонецЦикла;
		
		Колонки.Вставить(Колонка.ИмяРеквизита,Колонка);
		
	КонецЦикла;
	
КонецПроцедуры // ()

////////////////////////////////////////////////////////////////////////////////
//

// Процедура обновляет содержимое табличного документа, в соответствии с таблицей загружаемых реквизитов
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, который необходимо обновить
//  БезВопросов       - булево, если Ложь, спрашивать об очистке табличного документа, если он не пустой, Истина - иначе
//
Процедура ОбновитьДанныеТабличногоДокумента(ТабличныйДокумент, БезВопросов = Ложь) Экспорт
	
	Если (РежимЗагрузки = 0 или РежимЗагрузки = 2) и ТабличныйДокумент.ВысотаТаблицы > 1 И Не БезВопросов Тогда
		Результат = Вопрос("Табличный документ содержит данные. Очистить?", РежимДиалогаВопрос.ДаНетОтмена);
		Если  Результат = КодВозвратаДиалога.Да Тогда
			ТабличныйДокумент.Очистить();
		ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		Иначе
			Для к = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
				ТабличныйДокумент.Область("R1C"+Формат(К,"ЧГ=")).Текст = "";
			КонецЦикла;
		КонецЕсли;
	Иначе
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	СформироватьСтруктуруКолонок();
	СформироватьШапкуТабличногоДокумента(ТабличныйДокумент);
	
	НомерСтроки = ПерваяСтрокаДанныхТабличногоДокумента;
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	Если РежимЗагрузки =0 или РежимЗагрузки =2 или МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Источник = СсылкаИсточника[ТабличнаяЧастьИсточника];
	
	Для каждого Строка Из Источник Цикл
		
		НомерКолонки = 0;
		
		Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
			
			Если ЗагружаемыйРеквизит.Пометка Тогда
				
				Если РучнаяНумерацияКолонокТабличногоДокумента Тогда
					НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
				Иначе
					НомерКолонки = НомерКолонки + 1;
				КонецЕсли;
				
				Область = ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=") + "C"+НомерКолонки);
				Значение = Строка[ЗагружаемыйРеквизит.ИмяРеквизита];
				
				Попытка
					Представление = Значение[ЗагружаемыйРеквизит.ИскатьПо];
					
				Исключение
					
					Представление = Значение;
					
				КонецПопытки;
				
				Область.Текст = Представление;
				Область.Расшифровка = Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры // ()

// Процедура формирует шапку табличного документа, в соответствии с таблицей загружаемых реквизитов
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, у которого необходимо сформировать шапку
//
Процедура СформироватьШапкуТабличногоДокумента(ТабличныйДокумент) Экспорт
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	
	Таблица = ТаблицаЗагружаемыхРеквизитов.Скопировать();
	Таблица.Сортировать("НомерКолонки");
	Для каждого КлючИЗначение Из Колонки Цикл
		ЗагружаемыйРеквизит = КлючИЗначение.Значение;
		НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
		Если Не ЗагружаемыйРеквизит.Пометка Или НомерКолонки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗагружаемыйРеквизит.ШиринаКолонки = 0 Тогда
			
			ШиринаКолонки = 40;
			Если ЗагружаемыйРеквизит.ОписаниеТипов.Типы().Количество() = 1 Тогда
				ПервыйТип = ЗагружаемыйРеквизит.ОписаниеТипов.Типы()[0];
				Если ПервыйТип = Тип("Строка") Тогда
					Если ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина = 0 Тогда
						ШиринаКолонки = 80;
					Иначе
						ШиринаКолонки = Мин(Макс(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина,10),80);
					КонецЕсли;
				ИначеЕсли ПервыйТип = Тип("Число") Тогда
					ШиринаКолонки = Макс(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыЧисла.Разрядность,10);
				ИначеЕсли ПервыйТип = Тип("Булево") Тогда
					ШиринаКолонки = 10;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ШиринаКолонки = ЗагружаемыйРеквизит.ШиринаКолонки;
		КонецЕсли;
		
		
		Область = ТабличныйДокумент.Область("R1C"+НомерКолонки);
		БылТекст = Не ПустаяСтрока(Область.Текст);
		Область.Текст       = ?(БылТекст,Область.Текст + Символы.ПС,"") + ЗагружаемыйРеквизит.ПредставлениеРеквизита;
		Область.Расшифровка = ЗагружаемыйРеквизит.ИмяРеквизита;
		Область.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		Область.Обвести(Линия, Линия, Линия, Линия);
		
		ОбластьКолонки = ТабличныйДокумент.Область("C"+НомерКолонки);
		ОбластьКолонки.ШиринаКолонки = ?(БылТекст,Макс(ОбластьКолонки.ШиринаКолонки,ШиринаКолонки),ШиринаКолонки);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьШапкуТабличногоДокумента()

// Функция выполняет загрузку данных из табличного документа в справочник или табличную часть документа
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, у которого необходимо сформировать шапку
//  Индикатор         - Элемент управления индикатор, в котором необходимо отображать процент выполнения загрузки
//
// Возвращаемое значение:
//  Истина, если загрузка прошла без ошибок, Ложь - иначе
//
Функция ЗагрузитьДанные(ТабличныйДокумент, Индикатор) Экспорт
	
	ЗаписыватьОбъект = истина;
	
	СформироватьСтруктуруКолонок();
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Если ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(Новый Структура("Пометка",Истина)).Количество() = 0 Тогда
		Предупреждение("Не отмечен ни один загружаемый реквизит!");
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоЭлементов = ТабличныйДокумент.ВысотаТаблицы - ПерваяСтрокаДанныхТабличногоДокумента + 1;
	Если КоличествоЭлементов <= 0 Тогда
		Предупреждение("Нет данных для загрузки");
		Возврат Ложь;
	КонецЕсли;
	
	Если РежимЗагрузки = 0 Тогда
		Источник = СсылкаИсточника;
		ТекстВопросаИсточника = " элементов в справочник: """ + МетаданныеИсточника.Представление() + """";
		
	ИначеЕсли РежимЗагрузки = 1 Тогда
		
		Если СсылкаИсточника.Пустая() Тогда
			Предупреждение("Не выбрана ссылка");
			Возврат Ложь;
		КонецЕсли;
		 
		ОбъектИсточника = СсылкаИсточника.ПолучитьОбъект();
		Источник = ОбъектИсточника[ТабличнаяЧастьИсточника];
		ТекстВопросаИсточника = " строк в табличную часть: """ + МетаданныеИсточника.Представление() + """";
		
	ИначеЕсли РежимЗагрузки = 2 Тогда
		
		ТекстВопросаИсточника = " записей в регистр сведений: """ + МетаданныеИсточника.Представление() + """";
		
	КонецЕсли;
	
	Если Вопрос("Загрузить "+КоличествоЭлементов  + ТекстВопросаИсточника, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Запрос = Неопределено;
		Если РежимЗагрузки = 0 Тогда
			
			СтрокиПоиска = ТаблицаЗагружаемыхРеквизитов.НайтиСтроки(Новый Структура("ПолеПоиска,Пометка",Истина,Истина));
			Если Не СтрокиПоиска.Количество() = 0 Тогда
				
				ТекстЗапроса =
				"Выбрать Первые 1
				|Справочник.Ссылка КАК Ссылка
				|Из Справочник."+МетаданныеИсточника.Имя+" КАК Справочник
				|Где";
				
				Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
					ТекстЗапроса = ТекстЗапроса +"
					|Справочник."+СтрокаПоиска.ИмяРеквизита+" = &" + СтрокаПоиска.ИмяРеквизита + "
					|И";
					
				КонецЦикла;
				
				ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса) - 2);
				Запрос = Новый Запрос (ТекстЗапроса);
			КонецЕсли;
		ИначеЕсли РежимЗагрузки = 1 Тогда
			
			Источник.Очистить();
		ИначеЕсли РежимЗагрузки = 2 Тогда
			
			ИзмеренияРегистра = Новый Структура;
			Для каждого Колонка Из Колонки Цикл
				Если Колонка.Значение.МожетБытьПолемПоиска Тогда
					ИзмеренияРегистра.Вставить(Колонка.Ключ,Колонка.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		 
		ОчиститьСообщения();
		Сообщить("Выполняется загрузка"+ ТекстВопросаИсточника, СтатусСообщения.Информация);
		Сообщить("Всего: " + КоличествоЭлементов, СтатусСообщения.Информация);
		Сообщить("---------------------------------------------", СтатусСообщения.БезСтатуса);
		Индикатор.Значение = 0;
		Индикатор.МаксимальноеЗначение = КоличествоЭлементов;
		Загружено = 0;
		Для К = ПерваяСтрокаДанныхТабличногоДокумента По ТабличныйДокумент.ВысотаТаблицы Цикл
			НомерТекущейСтроки = Индикатор.Значение + 1;
			ТекстыЯчеек = Неопределено;
			Отказ = Ложь;
			ТекущаяСтрока = КонтрольЗаполненияСтроки(ТабличныйДокумент, К, ТекстыЯчеек);
			Если РежимЗагрузки =0 Тогда
				
				Объект = Неопределено;
				Если Не Запрос = Неопределено Тогда
					СтрокаОшибок = "";
					Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
						
						ЗначениеРеквизита = Неопределено;
						
						ТекущаяСтрока.Свойство(СтрокаПоиска.ИмяРеквизита,ЗначениеРеквизита);
						Если ПустаяСтрока(ЗначениеРеквизита) Тогда
							СтрокаОшибок = ?(ПустаяСтрока(СтрокаОшибок),"",СтрокаОшибок + ", ") + СтрокаПоиска.ПредставлениеРеквизита;
						Иначе
							Запрос.УстановитьПараметр(СтрокаПоиска.ИмяРеквизита,ТекущаяСтрока[СтрокаПоиска.ИмяРеквизита]);
						КонецЕсли;
						
					КонецЦикла;
					
					Если Не ПустаяСтрока(СтрокаОшибок) Тогда
						Сообщить("Строка " + НомерТекущейСтроки + " не может быть записана.Не указано значение ключевых реквизитов: " + СтрокаОшибок,СтатусСообщения.Важное);
						Индикатор.Значение = Индикатор.Значение + 1;
						Продолжить;
					КонецЕсли;
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Объект = Выборка.Ссылка.ПолучитьОбъект();
					КонецЕсли;
					 
				КонецЕсли;
				
				ОбъектНайден = Не Объект = Неопределено;
				Если Не ОбъектНайден Тогда
					Если НеСоздаватьНовыхЭлементов Тогда
						Индикатор.Значение = Индикатор.Значение + 1;
						Продолжить;
					Иначе
						Объект = Справочники[МетаданныеИсточника.Имя].СоздатьЭлемент();
					КонецЕсли;
					
				КонецЕсли;
			ИначеЕсли РежимЗагрузки = 1 Тогда
				Объект = Источник.Добавить();
				ОбъектНайден = Ложь;
			ИначеЕсли РежимЗагрузки = 2 Тогда
				Объект = РегистрыСведений[МетаданныеИсточника.Имя].СоздатьМенеджерЗаписи();
				Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
					
					Если ИзмеренияРегистра.Свойство(КлючИЗначение.Ключ) Тогда
						Объект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не ЗамещатьСуществующиеЗаписи Тогда
					Объект.Прочитать();
					ОбъектНайден = Объект.Выбран();
				Иначе
					ОбъектНайден = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
					
				Если Не ОбъектНайден или Колонки[КлючИЗначение.Ключ].Пометка  Тогда
					Попытка
						Объект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					Исключение
						мСообщитьОбОшибке("Ошибка при установки значения реквизита """ + КлючИЗначение.Ключ + "" + ОписаниеОшибки());
						Отказ = Истина;
						Прервать;
					КонецПопытки;
				КонецЕсли;
					
			КонецЦикла;
			
			Если РежимЗагрузки = 0 Тогда
				Если Не Отказ и ЗаписатьОбъект(Объект, ТекстыЯчеек) Тогда
					Сообщить(?(ОбъектНайден,"Изменен","Загружен") + " элемент справочника: " + Объект.ссылка, СтатусСообщения.Информация);
					Загружено = Загружено + 1;
				Иначе
					Сообщить("Объект не " + ?(ОбъектНайден,"изменен","загружен") + ". Элемент справочника: " + Объект + ".", СтатусСообщения.Важное);
				КонецЕсли;
			ИначеЕсли РежимЗагрузки = 1 Тогда
				
				Если Не ОбработатьСобытиеПослеДобавленияСтроки(ОбъектИсточника, Объект, ТекстыЯчеек) Тогда
					Отказ = Истина;
				КонецЕсли;
				
				Если Не Отказ Тогда
					Сообщить("Добавлена строка: " + (Загружено + 1));
				Иначе
					Сообщить("При добавлении строки " + (Загружено + 1) + " возникли ошибки. ");
					ЗаписыватьОбъект = Ложь;
				КонецЕсли;
				
				Загружено = Загружено + 1;
				
			ИначеЕсли РежимЗагрузки = 2 Тогда
				Если Не Отказ и ЗаписатьОбъект(Объект, ТекстыЯчеек) Тогда
					Сообщить(?(ОбъектНайден,"Изменена","Добавлена") + " запись № " + НомерТекущейСтроки + ".");
					Загружено = Загружено + 1;
				Иначе
					Сообщить("Запись не " + ?(ОбъектНайден,"изменена","загружена") + ". № записи: " + НомерТекущейСтроки + ".", СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
			
			Индикатор.Значение = Индикатор.Значение + 1;
			ОбработкаПрерыванияПользователя();
			
		КонецЦикла;
		Сообщить("---------------------------------------------", СтатусСообщения.БезСтатуса);
		
		Если РежимЗагрузки = 1  Тогда
			Если ЗаписыватьОбъект и ЗаписатьОбъект(ОбъектИсточника) Тогда
				
				Сообщить("Выполнена загрузка"+ 	ТекстВопросаИсточника, СтатусСообщения.Информация);
				Сообщить("" +Загружено +" из "+ КоличествоЭлементов + " элементов.", СтатусСообщения.Информация);
				Возврат Истина;
			Иначе
				Сообщить("Объект не записан: " + Объект + ".", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли РежимЗагрузки = 0 Тогда
			Сообщить("Выполнена загрузка"+ 	ТекстВопросаИсточника, СтатусСообщения.Информация);
			Сообщить("" +Загружено +" из "+ КоличествоЭлементов + " элементов.", СтатусСообщения.Информация);
			Возврат Истина;
		ИначеЕсли РежимЗагрузки = 2 Тогда
			Сообщить("Выполнена загрузка"+ 	ТекстВопросаИсточника, СтатусСообщения.Информация);
			Сообщить("" +Загружено +" из "+ КоличествоЭлементов + " записей.", СтатусСообщения.Информация);
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//

// Процедура выполняет контроль заполнения данных табличного документа
// сообщает об ошибках и устанавливает коментарии к ошибочным ячейкам
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, у которого необходимо сформировать шапку
//  Индикатор         - Элемент управления индикатор, в котором необходимо отображать процент выполнения операции
//
Процедура КонтрольЗаполнения(ТабличныйДокумент, Индикатор) Экспорт
	
	КоличествоЭлементов = ТабличныйДокумент.ВысотаТаблицы - ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	Индикатор.Значение = 0;
	
	ОчиститьСообщения();
	Индикатор.МаксимальноеЗначение = КоличествоЭлементов;
	КоличествоОшибок = 0;
	Для К = 0  По КоличествоЭлементов - 1 Цикл
		Состояние("Выполняется контроль заполнения строки № " + (К + 1));
		КонтрольЗаполненияСтроки(ТабличныйДокумент, К + ПерваяСтрокаДанныхТабличногоДокумента,,КоличествоОшибок);
		Индикатор.Значение = К + 1;
	КонецЦикла;
	
	Сообщить("Контроль заполнения завершен. Проверено строк: " + КоличествоЭлементов);
	Если КоличествоОшибок Тогда
		Сообщить("Выявлено ячеек, содержащих ошибки/неоднозначное представление: " + КоличествоОшибок);
	Иначе
		Сообщить("Ячеек, содержащих ошибки не выявлено");
	КонецЕсли;
	
КонецПроцедуры // КонтрольЗаполнения()

// Функция выполняет контроль заполнения строки данных табличного документа
// сообщает об ошибках и устанавливает коментарии к ошибочным ячейкам
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, у которого необходимо сформировать шапку
//  НомерСтроки       - Число, номер строки табличного документа
//  ТекстыЯчеек    - возвращает массив текстов ячеек строки,
//
// Возвращаемое значение:
//  структура, ключ - Имя загружаемого реквизита, Значение - Значение загружаемого реквизита
//
Функция КонтрольЗаполненияСтроки(ТабличныйДокумент, НомерСтроки, ТекстыЯчеек = Неопределено, КоличествоОшибок = 0)
	
	ТекстыЯчеек = Новый Массив;
	ТекстыЯчеек.Добавить(Неопределено);
	Для к = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		ТекстыЯчеек.Добавить(СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(К,"ЧГ=")).Текст));
	КонецЦикла;
	
	ТекущаяСтрока     = Новый Структура;
	Для каждого КлючИЗначение Из Колонки Цикл
		
		Колонка = КлючИЗначение.Значение;
		
		Если Колонка.Пометка Тогда
			
			Если Колонка.РежимЗагрузки = "Устанавливать" Тогда
				
				Результат = Колонка.ЗначениеПоУмолчанию;
				ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита,Результат);
				
			ИначеЕсли Не Колонка.НомерКолонки = 0 Тогда
				
				Если Не ОбработатьОбласть(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(Колонка.НомерКолонки,"ЧГ=")), Колонка, ТекущаяСтрока, ТекстыЯчеек) Тогда
					КоличествоОшибок = КоличествоОшибок + 1;
				КонецЕсли;
				
			ИначеЕсли Колонка.РежимЗагрузки = "Вычислять" Тогда
				
				Вычисление  = ВычислитьЗначениеЯчейки(Колонка.Выражение,ТекущаяСтрока,"",ТекстыЯчеек,Колонка.ЗначениеПоУмолчанию);
				Результат   = Вычисление.Результат;
				Примечание  = Вычисление.ОписаниеОшибки;
				
				Если НЕ ЗначениеЗаполнено(Результат) Тогда
					Результат = Колонка.ЗначениеПоУмолчанию;
				КонецЕсли;
	
				ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита,Результат);
				
				Если Не ПустаяСтрока(Примечание) Тогда
					Сообщить("Строка ["+НомерСтроки+"]("+Колонка.ПредставлениеРеквизита+"): "+ Примечание);
					КоличествоОшибок = КоличествоОшибок + 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	Возврат ТекущаяСтрока;
	
КонецФункции

// Процедура выполняет обработку области табличного документа:
// заполняет расшифровку по представлению ячейки в соответствии со структурой загружаемых реквизитов
// сообщает об ошибке и устанавливает коментарий, если ячейка содержит ошибку
//
// Параметры:
//  Область - область табличного документа
//  Колонка - Структура, свойства, в соответствии с которыми необходимо выполнить обработку области
//  ТекущиеДанные  - структура загруженных значений
//  ТекстыЯчеек    - массив текстов ячеек строки
//
Функция ОбработатьОбласть(Область, Колонка, ТекущиеДанные, ТекстыЯчеек)
	
	Представление = Область.Текст;
	Примечание = "";
	
	Если Колонка.РежимЗагрузки = "Вычислять" Тогда
		
		Вычисление = ВычислитьЗначениеЯчейки(Колонка.Выражение,ТекущиеДанные,Представление, ТекстыЯчеек, Колонка.ЗначениеПоУмолчанию);
		Если Не ПустаяСтрока(Вычисление.ОписаниеОшибки) Тогда
			Результат   = Неопределено;
			Примечание = ""+ Вычисление.ОписаниеОшибки;
		Иначе
			Результат = Вычисление.Результат;
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(Представление) Тогда
		Результат = Неопределено;
	Иначе
		НайденныеЗначения = ПолучитьВозможныеЗначения(Колонка, Представление, Примечание, ТекущиеДанные);
		
		Если НайденныеЗначения.Количество() = 0 Тогда
			
			Примечание = "Не найден"+?(Примечание = "","", Символы.ПС+Примечание);
			Результат = Неопределено;
			
		ИначеЕсли НайденныеЗначения.Количество() = 1 Тогда
			
			Результат = НайденныеЗначения[0];
			
			
		Иначе
			
			Примечание = "Не однозначное представление. Вариантов: "+НайденныеЗначения.Количество()+?(Примечание = "","", Символы.ПС+Примечание);
			
			Нашли = Ложь;
			НашлиЗначениеПоУмолчанию = Ложь;
			Для каждого НайденноеЗначение Из НайденныеЗначения Цикл
				Если НайденноеЗначение = Область.Расшифровка Тогда
					Нашли = Истина;
					Прервать;
				КонецЕсли;
				Если НайденноеЗначение = Колонка.ЗначениеПоУмолчанию Тогда
					НашлиЗначениеПоУмолчанию = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Не Нашли Тогда
				
				Если НашлиЗначениеПоУмолчанию Тогда
					НайденноеЗначение = Колонка.ЗначениеПоУмолчанию;
				Иначе
					НайденноеЗначение = НайденныеЗначения[0];
				КонецЕсли;
			КонецЕсли;
			Результат = НайденноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Колонка.ЗначениеПоУмолчанию;
	КонецЕсли;
			
	ТекущиеДанные.Вставить(Колонка.ИмяРеквизита,Результат);
	
	Область.Расшифровка = Результат;
	Область.Примечание.Текст = Примечание;
	
	Если Не ПустаяСтрока(Примечание) Тогда
		Сообщить("Ячейка["+Область.Имя+"]("+Колонка.ПредставлениеРеквизита+"): " + Примечание);
	КонецЕсли;
	
	Возврат ПустаяСтрока(Примечание);
	
КонецФункции

// Функция возвращает массив возможных значений для текущей колонки по представлению
//
// Параметры:
//  Колонка - Структура, свойства, в соответствии с которыми необходимо получить возможные значения
//  Представление - Строка, по которой необходимо вернуть массив значений
//  Примечание    - массив текстов ячеек строки
//  ТекущиеДанные  - структура загруженных значений
//
// Возвращаемое значение:
//  массив возможных значений
//
Функция ПолучитьВозможныеЗначения(Колонка, Представление, Примечание, ТекущиеДанные)
	
	
	Примечание = "";
	
	НайденныеЗначения = Новый Массив;
	
	Если ПустаяСтрока(Представление) Тогда
		
		Возврат НайденныеЗначения;
		
	Иначе
		СвязьПоТипу = Неопределено;
		Если Не ПустаяСтрока(Колонка.СвязьПоТипу)  Тогда
			
			Если ТипЗНЧ(Колонка.СвязьПоТипу) = Тип("Строка") Тогда
				ТекущиеДанные.Свойство(Колонка.СвязьПоТипу,СвязьПоТипу);
			Иначе
				СвязьПоТипу = Колонка.СвязьПоТипу;
			КонецЕсли;
			Если Не СвязьПоТипу = Неопределено Тогда
				
				ЭлементСвязиПоТипу = Колонка.ЭлементСвязиПоТипу;
				Если ЭлементСвязиПоТипу = 0 Тогда
					ЭлементСвязиПоТипу = 1;
				КонецЕсли;
				ВидыСубконто = СвязьПоТипу.ВидыСубконто;
				Если ЭлементСвязиПоТипу > ВидыСубконто.Количество() Тогда
					Возврат НайденныеЗначения;
				КонецЕсли;
				Тип = СвязьПоТипу.ВидыСубконто[ЭлементСвязиПоТипу-1].ВидСубконто.ТипЗначения;
			Иначе
				Тип = Колонка.ОписаниеТипов;
			КонецЕсли;
			 
		Иначе
			Тип = Колонка.ОписаниеТипов;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ТипРеквизита Из Тип.Типы() Цикл
		
		Если ТипРеквизита = ПримитивныеТипы.Число Или ТипРеквизита = ПримитивныеТипы.Булево Тогда
			НайденныеЗначения.Добавить(мПривестиКЧислу(Представление, Колонка.ОписаниеТипов, Примечание));
		ИначеЕсли ТипРеквизита = ПримитивныеТипы.Строка или ТипРеквизита = ПримитивныеТипы.Дата Тогда
			НайденныеЗначения.Добавить(мПривестиКДате(Представление, Колонка.ОписаниеТипов, Примечание));
			
		Иначе
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита);
			
			Если Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
				
				//Это Перечисление
				Для каждого Перечисление Из ПолучитьМенеджераПоТипу(ТипРеквизита) Цикл
					Если Строка(Перечисление) = Представление Тогда
						НайденныеЗначения.Добавить(Перечисление);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
				
				//Это документ
				
				Менеджер = ПолучитьМенеджераПоТипу(ТипРеквизита);
				Если Колонка.ИскатьПо = "Номер" Тогда
					//НайденноеЗначение = Менеджер.НайтиПоКоду(Представление);
				ИначеЕсли Колонка.ИскатьПо = "Дата" Тогда
					//НайденноеЗначение = Менеджер.Найти
				Иначе
						
					ДлиннаСинонима = СтрДлина(""+МетаданныеТипа);
						
					Если Лев(Представление, ДлиннаСинонима) = ""+МетаданныеТипа Тогда
						НомерИДата = СокрЛП(Сред(Представление, ДлиннаСинонима+1));
						ПозицияОт = Найти(НомерИДата, " от ");
						Если Не ПозицияОт = 0 Тогда
							НомерДок = Лев(НомерИДата, ПозицияОт-1);
							Попытка
								ДатаДок  = Дата(Сред(НомерИДата, ПозицияОт+4));
							Исключение
								ДатаДок = Неопределено;
							КонецПопытки;
							Если Не ДатаДок = Неопределено Тогда
								НайденноеЗначение = Менеджер.НайтиПоНомеру(НомерДок, ДатаДок);
								Если Не НайденноеЗначение.Пустая() Тогда
									НайденныеЗначения.Добавить(НайденноеЗначение);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
						
				КонецЕсли;
					
			ИначеЕсли Не МетаданныеТипа = Неопределено Тогда
				
				ИскатьПо = Колонка.ИскатьПо;
				ЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(ТипРеквизита);
				Если ПустаяСтрока(ИскатьПо) Тогда
					СтрокаОсновногоПредставления = Строка(МетаданныеТипа.ОсновноеПредставление);
					
					Если СтрокаОсновногоПредставления = "ВВидеКода" Тогда
						ИскатьПо = "Код";
					ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНаименования" Тогда
						ИскатьПо = "Наименование";
					ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНомера" Тогда
						ИскатьПо = "Номер";
					КонецЕсли;
				КонецЕсли;
				
					
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	_Таблица.Ссылка
				|ИЗ
				|	" + МетаданныеТипа.ПолноеИмя() + " КАК _Таблица
				|ГДЕ";
				
				Запрос.Текст = Запрос.Текст + "
				|	_Таблица." + ИскатьПо + " = &Представление";
				Запрос.УстановитьПараметр("Представление",Представление);
				
				Если ЭтоСправочник и Не ПустаяСтрока(Колонка.СвязьПоВладельцу) и МетаданныеТипа.Владельцы.Количество() Тогда
					
					СвязьПоВладельцу = Неопределено;
					Если ТипЗНЧ(Колонка.СвязьПоВладельцу) = Тип("Строка") Тогда
						ТекущиеДанные.Свойство(Колонка.СвязьПоВладельцу,СвязьПоВладельцу);
					Иначе
						СвязьПоВладельцу = Колонка.СвязьПоВладельцу;
					КонецЕсли;
					
					Если Не СвязьПоВладельцу = Неопределено Тогда
						Запрос.Текст = Запрос.Текст + "
						|	И _Таблица.Владелец = &СвязьПоВладельцу";
						Запрос.УстановитьПараметр("СвязьПоВладельцу",СвязьПоВладельцу);
					КонецЕсли;
					
				КонецЕсли;
				
				Выборка =  Запрос.Выполнить().Выбрать();
					
				Пока Выборка.Следующий() Цикл
					НайденныеЗначения.Добавить(Выборка.Ссылка);
				КонецЦикла;
			Иначе
				Примечание = "Не описан способ поиска";
				Примечание = "Для Колонки не определен тип значения";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Возврат НайденныеЗначения;
КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
//

// Функция возвращает текущие настройки загружаемых реквизитов в формате Табличного документа
//
// Возвращаемое значение:
//  табличный документ
//
Функция мПолучитьНастройки() Экспорт
	
	МетаданныеОбъекта = ПолучитьМетаданныеИсточника();
	
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидОбъекта     = МетаданныеОбъекта.ПолноеИмя();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("МакетСохраненияНастроек");
	
	ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
	
	
	Если РежимЗагрузки = 0 Тогда
		ОбластьШапки.Параметры.РежимЗагрузки = "в справочник";
	ИначеЕсли РежимЗагрузки = 1 Тогда
		ОбластьШапки.Параметры.РежимЗагрузки = "в табличную часть";
	ИначеЕсли РежимЗагрузки = 2 Тогда
		ОбластьШапки.Параметры.РежимЗагрузки = "в регистр сведений";
	КонецЕсли;
	
	ОбластьШапки.Параметры.ВидОбъекта                                = ВидОбъекта;
	ОбластьШапки.Параметры.НеСоздаватьНовыхЭлементов                 = ?(НеСоздаватьНовыхЭлементов, "Х","");
	ОбластьШапки.Параметры.ЗамещатьСуществующиеЗаписи                 = ?(ЗамещатьСуществующиеЗаписи, "Х","");
	ОбластьШапки.Параметры.РучнаяНумерацияКолонокТабличногоДокумента = ?(РучнаяНумерацияКолонокТабличногоДокумента, "Х","");
	ОбластьШапки.Параметры.ПерваяСтрокаДанныхТабличногоДокумента     = ПерваяСтрокаДанныхТабличногоДокумента;
	
	ДокументРезультат.Вывести(ОбластьШапки);
	
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка" + ?(ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять","Выражение",""));
		
		ОбластьСтроки.Параметры.Пометка      = ?(ЗагружаемыйРеквизит.Пометка, "Х","");
		ОбластьСтроки.Параметры.ИмяРеквизита = ЗагружаемыйРеквизит.ИмяРеквизита;
		ОбластьСтроки.Параметры.ПолеПоиска   = ?(ЗагружаемыйРеквизит.ПолеПоиска, "Х","");
		
		ОписаниеТипов = "";
		Для каждого Тип Из ЗагружаемыйРеквизит.ОписаниеТипов.Типы() Цикл
			МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			Если Не МетаданныеТипа = Неопределено Тогда
				ОписаниеТипа = МетаданныеТипа.ПолноеИмя();
			ИначеЕсли Тип = Тип("Строка") Тогда
				
				ОписаниеТипа = "Строка";
				Если ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина Тогда
					ОписаниеТипа = ОписаниеТипа + ", " + ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина;
					Если ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Фиксированная Тогда
						ОписаниеТипа = ОписаниеТипа + ", " + ДопустимаяДлина.Фиксированная;
					КонецЕсли;
					 
					
				КонецЕсли;
				
			ИначеЕсли Тип = Тип("Число") Тогда
				ОписаниеТипа = "Число"
				+ ", "+ ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыЧисла.Разрядность
				+ ", "+ ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти
				+ ?(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Неотрицательный,", Неотрицательный","");
			ИначеЕсли Тип = Тип("Дата") Тогда
				ОписаниеТипа = "" + ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыДаты.ЧастиДаты;
			ИначеЕсли Тип = Тип("Булево") Тогда
				ОписаниеТипа = "Булево";
			Иначе
				Продолжить;
			КонецЕсли;
			
			ОписаниеТипов = ?(ПустаяСтрока(ОписаниеТипов),"",ОписаниеТипов +Символы.ПС) + ОписаниеТипа;
			
		КонецЦикла;
		ОбластьСтроки.Параметры.ОписаниеТипов       = ОписаниеТипов;
		
		ОбластьСтроки.Параметры.РежимЗагрузки       = ЗагружаемыйРеквизит.РежимЗагрузки;
		Если ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено) = ЗагружаемыйРеквизит.ЗначениеПоУмолчанию Тогда
			ОбластьСтроки.Параметры.ЗначениеПоУмолчанию = "";
		Иначе
			ОбластьСтроки.Параметры.ЗначениеПоУмолчанию = ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
		КонецЕсли;
		
		Если ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять" Тогда
			
			ОбластьСтроки.Параметры.Выражение           = ЗагружаемыйРеквизит.Выражение;
			
		Иначе
			ОбластьСтроки.Параметры.ИскатьПо            = ЗагружаемыйРеквизит.ИскатьПо;
			ОбластьСтроки.Параметры.СвязьПоВладельцу    = ?(ТипЗнч(ЗагружаемыйРеквизит.СвязьПоВладельцу) = Тип("Строка"),ЗагружаемыйРеквизит.СвязьПоВладельцу,ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.СвязьПоВладельцу));
			ОбластьСтроки.Параметры.СвязьПоТипу         = ?(ТипЗнч(ЗагружаемыйРеквизит.СвязьПоТипу) = Тип("Строка"),ЗагружаемыйРеквизит.СвязьПоТипу,ЗначениеВСтрокуВнутр(ЗагружаемыйРеквизит.СвязьПоТипу));
			ОбластьСтроки.Параметры.ЭлементСвязиПоТипу  = ЗагружаемыйРеквизит.ЭлементСвязиПоТипу;
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	ОбластьПодвала = Макет.ПолучитьОбласть("События");
	ОбластьПодвала.Параметры.ПередЗаписьюОбъекта = ПередЗаписьюОбъекта;
	ОбластьПодвала.Параметры.ПриЗаписиОбъекта = ПриЗаписиОбъекта;
	ДокументРезультат.Вывести(ОбластьПодвала);
	Если РежимЗагрузки Тогда
		
		ОбластьПодвала = Макет.ПолучитьОбласть("СобытияПослеДобавленияСтроки");
		ОбластьПодвала.Параметры.ПослеДобавленияСтроки = ПослеДобавленияСтроки;
		ДокументРезультат.Вывести(ОбластьПодвала);
		
	КонецЕсли;
	 
	
	
	Возврат ДокументРезультат;
	
КонецФункции // ()

// Функция возвращает настройку, сохраненную в списке сохраненных настроек
//
// Параметры:
//  СписокСохраненныхНастроек  - Список значений, список сохраненных настроек
//
// Возвращаемое значение:
//  табличный документ - настройки загружаемых реквизитов
//
Функция ПоучитьНастройкуПоУмолчанию(СписокСохраненныхНастроек) Экспорт
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	Если МетаданныеИсточника = Неопределено или Не ТипЗнч(СписокСохраненныхНастроек) = Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого СтрокаСписка Из СписокСохраненныхНастроек Цикл
		Если СтрокаСписка.Пометка Тогда
			Возврат СтрокаСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
//

// Функция возвращает список, элементами которого выступают возможные имена представления загружаемого реквизита
//
// Параметры:
//  ЗагружаемыйРеквизит - Строка таблицы значений загружаемого реквизита
//
// Возвращаемое значение:
//  список значений; значение списка - строка имя представления
//
Функция ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит) Экспорт
	
	СписокВыбора = Новый СписокЗначений;
	Если ЗагружаемыйРеквизит.ОписаниеТипов.Типы().Количество() = 1 Тогда
		
		Тип = ЗагружаемыйРеквизит.ОписаниеТипов.Типы()[0];
		
		МетаданныеТипа      = Метаданные.НайтиПоТипу(Тип);
		ЭтоСправочник       = Справочники.ТипВсеСсылки().СодержитТип(Тип);
		ЭтоСчет             = ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип);
		ЭтоВидХарактеристик = ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип);
		Если ЭтоСправочник ИЛИ ЭтоСчет Или ЭтоВидХарактеристик Тогда
			
			ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
			ЕстьИмя = МетаданныеТипа.ДлинаНаименования > 0;
			
			ВидОсновногоПредставление = ?(ЭтоСправочник, Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника,
			?(ЭтоСчет,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики));
			
			Если МетаданныеТипа.ОсновноеПредставление = ВидОсновногоПредставление.ВВидеКода Тогда
				
				Если ЕстьКод Тогда
					СписокВыбора.Добавить("Код", "Код");
				КонецЕсли;
				
				Если ЕстьИмя Тогда
					СписокВыбора.Добавить("Наименование", "Наименование");
				КонецЕсли;
				
			Иначе
				
				Если ЕстьИмя Тогда
					СписокВыбора.Добавить("Наименование", "Наименование");
				КонецЕсли;
				
				Если ЕстьКод Тогда
					СписокВыбора.Добавить("Код", "Код");
				КонецЕсли;
				
			КонецЕсли;
			
			Для каждого Реквизит Из МетаданныеТипа.Реквизиты Цикл
				
				Если Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать
					И Реквизит.Тип.Типы().Количество() = 1 и Реквизит.Тип.Типы()[0] = Тип ("Строка")
				Тогда
					
					СписокВыбора.Добавить(Реквизит.Имя, Реквизит.Представление());
					
				КонецЕсли;
				
			КонецЦикла;
			
			
		Иначе
		
		КонецЕсли;
		
	КонецЕсли;
	Возврат СписокВыбора;
КонецФункции // ()


// Функция возвращает список, элементами которого выступают возможные связи по владельцу для загружаемого реквизита
//
// Параметры:
//  ЗагружаемыйРеквизит - Строка таблицы значений загружаемого реквизита
//
// Возвращаемое значение:
//  список значений; значение списка - строка имя колонки связи или ссылка на элемент связи
//
Функция ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит) Экспорт
	
	ЕстьТипСамогоОбъекта = Ложь;
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	Если РежимЗагрузки = 0 Тогда
		ОписаниеТиповСправочника = Тип(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
	Иначе
		ОписаниеТиповСправочника = Неопределено;
	КонецЕсли;
	 
	
	СписокВыбора = Новый СписокЗначений;
	ТипыВладельцев = Новый Соответствие;
	Для каждого ТипКолонки Из ЗагружаемыйРеквизит.ОписаниеТипов.Типы() Цикл
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипКолонки) Тогда
			Для каждого Владелец Из Метаданные.НайтиПоТипу(ТипКолонки).Владельцы Цикл
				ТипВладельца   = Тип(СтрЗаменить(Владелец.ПолноеИмя(), ".", "Ссылка."));
				Если ТипыВладельцев[ТипВладельца] = Неопределено Тогда
					
					Если ТипВладельца = ОписаниеТиповСправочника Тогда
						
						ЕстьТипСамогоОбъекта = Истина;
						
					КонецЕсли;
					 
					ТипыВладельцев.Вставить(ТипВладельца, Владелец.ПолноеИмя());
					Для каждого КолонкаСвязиПоВладельцу Из ТаблицаЗагружаемыхРеквизитов Цикл
						Если КолонкаСвязиПоВладельцу.ОписаниеТипов.Типы()[0] = ТипВладельца Тогда
							// Возможно надо будет по всем типам проходить
							СписокВыбора.Добавить(КолонкаСвязиПоВладельцу.ИмяРеквизита,КолонкаСвязиПоВладельцу.ИмяРеквизита);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТипыВладельцев.Количество() = 0 Тогда
		СписокВыбора.Добавить(Неопределено, "< пустое значение >");
	КонецЕсли;
	 
	
	Для каждого КлючИЗначение Из ТипыВладельцев Цикл
		СписокВыбора.Добавить(СтрЗаменить(КлючИЗначение.Значение, ".", "Ссылка."), "<"+КлючИЗначение.Значение+">");
	КонецЦикла;
	
	Если ЕстьТипСамогоОбъекта Тогда
		
		СписокВыбора.Вставить(0,"<Создаваемый объект>", "<Создаваемый объект>");
		
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции // ()

// Функция возвращает список, элементами которого выступают возможные связи по типу для загружаемого реквизита
//
// Параметры:
//  ЗагружаемыйРеквизит - Строка таблицы значений загружаемого реквизита
//
// Возвращаемое значение:
//  список значений; значение списка - строка имя колонки связи или ссылка на элемент связи
//
Функция ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит) Экспорт
	
	СписокВыбора = Новый СписокЗначений;
	
	ВозможныеПланыСчетов = Новый Структура;
	Для каждого ПланСчетов Из Метаданные.ПланыСчетов Цикл
		
		Если ПланСчетов.ВидыСубконто.Тип = ЗагружаемыйРеквизит.ОписаниеТипов Тогда
			
			ВозможныеПланыСчетов.Вставить(ПланСчетов.Имя,ПланыСчетов[ПланСчетов.Имя]);
			
		КонецЕсли;
		 
	КонецЦикла;
	
	Для каждого ПланСчетов Из ВозможныеПланыСчетов Цикл
		ТипЗНЧПланСчетов = ТипЗНЧ(ПланСчетов.Значение.ПустаяСсылка());
		Для каждого КолонкаСвязиПоТипу Из ТаблицаЗагружаемыхРеквизитов Цикл
			Если КолонкаСвязиПоТипу.ОписаниеТипов.Типы()[0] = ТипЗНЧПланСчетов Тогда
				СписокВыбора.Добавить(КолонкаСвязиПоТипу.ИмяРеквизита,КолонкаСвязиПоТипу.ИмяРеквизита);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ВозможныеПланыСчетов.Количество() = 0 Тогда
		СписокВыбора.Добавить(Неопределено, "< пустое значение >");
	КонецЕсли;
	
	Для каждого ПланСчетов Из ВозможныеПланыСчетов Цикл
		СписокВыбора.Добавить("ПланСчетовСсылка."+ПланСчетов.Ключ,"<"+ПланСчетов.Ключ+">");
	КонецЦикла;
	
	Возврат СписокВыбора;
КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
//

// Заполняет настройки колонок по умолчанию или по переданным настройкам
//
// Параметры:
//  Настройки - табличный документ или неопределено
//
Процедура ЗаполнитьНастройкиКолонок(Настройки) Экспорт
	
	ПередЗаписьюОбъекта   = "";
	ПриЗаписиОбъекта      = "";
	ПослеДобавленияСтроки = "";
	
	Если ТипЗнч(Настройки) = Тип("ТабличныйДокумент") Тогда
		
		ВерсияОбработки = СокрЛП(Настройки.Область("R1C5").Текст);
		Если Не ВерсияОбработки = "1.2" Тогда
			ВерсияОбработки = "1.1";
			ТекущаяСтрока = 9; //Строка с которой начинается таблица реквизитов
		Иначе
			ТекущаяСтрока = 11; //Строка с которой начинается таблица реквизитов
		КонецЕсли;
		
		
		Попытка
			
			ТекстВосстановленногоРежимаЗагрузки = СокрЛП(Настройки.Область(?(ВерсияОбработки = "1.1","R1","R2") + "C5").Текст);
			Если ТекстВосстановленногоРежимаЗагрузки = "в справочник" или ТекстВосстановленногоРежимаЗагрузки = "" Тогда
				ВосстановленныйРежимЗагрузки = 0;
			ИначеЕсли ТекстВосстановленногоРежимаЗагрузки = "в табличную часть" или ТекстВосстановленногоРежимаЗагрузки = "Х" Тогда
				ВосстановленныйРежимЗагрузки = 1;
			ИначеЕсли ТекстВосстановленногоРежимаЗагрузки = "в регистр сведений" Тогда
				ВосстановленныйРежимЗагрузки = 2;
			КонецЕсли;
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Настройки.Область(?(ВерсияОбработки = "1.1","R2","R3") + "C5").Текст);
			Если МетаданныеОбъекта = Неопределено Тогда
				ВызватьИсключение "Неправильный формат файла";
			КонецЕсли;
			
			Если ВосстановленныйРежимЗагрузки = 0 Тогда
				ВосстановленныйСсылкаИсточника = Новый(СтрЗаменить(МетаданныеОбъекта.ПолноеИмя(),".","Ссылка."))
			ИначеЕсли ВосстановленныйРежимЗагрузки = 1 Тогда
				ВосстановленныйСсылкаИсточника = Новый(СтрЗаменить(МетаданныеОбъекта.Родитель().ПолноеИмя(),".","Ссылка."))
			Иначе
				ВосстановленныйСсылкаИсточника = Неопределено;
			КонецЕсли;
			
			//СсылкаИсточника = ПустаяСсылка();
			СтруктураУмолчаний = Новый Структура;
			ТекущаяСтрокаОбласти = "R" + Формат(ТекущаяСтрока, "ЧГ=");
			ИмяРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C2").Текст;
			Пока Не ПустаяСтрока(ИмяРеквизита) Цикл
				СтруктураУмолчанияРеквизита = Новый Структура;
				СтруктураУмолчанияРеквизита.Вставить("ИмяРеквизита",ИмяРеквизита);
				СтруктураУмолчанияРеквизита.Вставить("Пометка",Не ПустаяСтрока(Настройки.Область(ТекущаяСтрокаОбласти + "C1").Текст));
				СтруктураУмолчанияРеквизита.Вставить("ПолеПоиска",Не ПустаяСтрока(Настройки.Область(ТекущаяСтрокаОбласти + "C3").Текст));
				
				Типы = Новый Массив;
				ОписаниеТиповСтрокой = Настройки.Область(ТекущаяСтрокаОбласти + "C4").Текст;
				Для к = 1 По СтрЧислоСтрок(ОписаниеТиповСтрокой)  Цикл
					
					кс = Неопределено;кч = Неопределено;кд = Неопределено;
					МассивЧастейТипа = мРазложитьСтрокуВМассивПодстрок(НРег(СокрЛП(СтрПолучитьСтроку(ОписаниеТиповСтрокой,к ))), ",");
					Если МассивЧастейТипа.Количество() = 0 Тогда
						Продолжить;
					ИначеЕсли Найти(МассивЧастейТипа[0],".") Тогда
						Тип = Тип(СтрЗаменить(МассивЧастейТипа[0],".","Ссылка."));
					ИначеЕсли МассивЧастейТипа[0] = "строка" Тогда
						Тип = Тип("Строка");
						Если МассивЧастейТипа.Количество() = 2 Тогда
							кс = Новый КвалификаторыСтроки(мПривестиКЧислу(МассивЧастейТипа[1]));
						ИначеЕсли МассивЧастейТипа.Количество() = 3 Тогда
							кс = Новый КвалификаторыСтроки(мПривестиКЧислу(МассивЧастейТипа[1]),ДопустимаяДлина.Фиксированная);
						Иначе
							кс = Новый КвалификаторыСтроки;
						КонецЕсли;
					ИначеЕсли МассивЧастейТипа[0] = "число" Тогда
						Тип = Тип("Число");
						кч = Новый КвалификаторыЧисла(мПривестиКЧислу(МассивЧастейТипа[1]),мПривестиКЧислу(МассивЧастейТипа[2]),?(МассивЧастейТипа.Количество() = 4, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой));
					ИначеЕсли МассивЧастейТипа[0] = "булево" Тогда
						Тип = Тип("Булево");
					ИначеЕсли МассивЧастейТипа[0] = "дата" Тогда
						Тип = Тип("Дата");
						кд = Новый КвалификаторыДаты(ЧастиДаты.Дата);
					ИначеЕсли МассивЧастейТипа[0] = "время" Тогда
						Тип = Тип("Дата");
						кд = Новый КвалификаторыДаты(ЧастиДаты.Время);
					ИначеЕсли МассивЧастейТипа[0] = "дата и время" Тогда
						Тип = Тип("Дата");
						кд = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
					Иначе
						Продолжить;
					КонецЕсли;
					Типы.Добавить(Тип);
				КонецЦикла;
				ОписаниеТипов = Новый ОписаниеТипов(Типы, кч, кс, кд);
				СтруктураУмолчанияРеквизита.Вставить("ОписаниеТипов",ОписаниеТипов);
				
				РежимЗагрузкиРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C5").Текст;
				
				СтруктураУмолчанияРеквизита.Вставить("РежимЗагрузки",РежимЗагрузкиРеквизита);
				
				ЗначениеПоУмолчанию = Настройки.Область(ТекущаяСтрокаОбласти + "C6").Текст;
				СтруктураУмолчанияРеквизита.Вставить("ЗначениеПоУмолчанию",?(ПустаяСтрока(ЗначениеПоУмолчанию), ОписаниеТипов.ПривестиЗначение(Неопределено), ЗначениеИзСтрокиВнутр(ЗначениеПоУмолчанию)));
				
				Если РежимЗагрузкиРеквизита = "Вычислять" Тогда
					СтруктураУмолчанияРеквизита.Вставить("Выражение",Настройки.Область(ТекущаяСтрокаОбласти + "C7").Текст);
				Иначе
					СтруктураУмолчанияРеквизита.Вставить("ИскатьПо",Настройки.Область(ТекущаяСтрокаОбласти + "C7").Текст);
					
					СвязьПоВладельцу   = Настройки.Область(ТекущаяСтрокаОбласти + "C8").Текст;
					СтруктураУмолчанияРеквизита.Вставить("СвязьПоВладельцу",?(Лев(СвязьПоВладельцу,1) = "{",ЗначениеИзСтрокиВнутр(СвязьПоВладельцу), СвязьПоВладельцу));
					
					СвязьПоТипу        = Настройки.Область(ТекущаяСтрокаОбласти + "C9").Текст;
					СтруктураУмолчанияРеквизита.Вставить("СвязьПоТипу",?(Лев(СвязьПоВладельцу,1) = "{",ЗначениеИзСтрокиВнутр(СвязьПоТипу), СвязьПоТипу));
					
					СтруктураУмолчанияРеквизита.Вставить("ЭлементСвязиПоТипу",мПривестиКЧислу(Настройки.Область(ТекущаяСтрокаОбласти + "C10").Текст));
				КонецЕсли;
				
				
				СтруктураУмолчаний.Вставить(ИмяРеквизита,СтруктураУмолчанияРеквизита);
				ТекущаяСтрока = ТекущаяСтрока + 1;
				ТекущаяСтрокаОбласти = "R" + Формат(ТекущаяСтрока, "ЧГ=");
				ИмяРеквизита = Настройки.Область(ТекущаяСтрокаОбласти + "C2").Текст;
				
			КонецЦикла;
			
		Исключение
			мСообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
		МетаданныеИсточника = ПолучитьМетаданныеИсточника();
		Если МетаданныеИсточника = Неопределено Тогда
			Возврат;
		КонецЕсли;
	
		РежимЗагрузки   = ВосстановленныйРежимЗагрузки;
		СсылкаИсточника = ВосстановленныйСсылкаИсточника;
		ТабличнаяЧастьИсточника = ?(ВосстановленныйРежимЗагрузки,МетаданныеОбъекта.Имя,Неопределено);
		НеСоздаватьНовыхЭлементов                 = Не ПустаяСтрока(Настройки.Область(?(ВерсияОбработки = "1.1","R3","R4") + "C5").Текст);
		ЗамещатьСуществующиеЗаписи = ?(ВерсияОбработки = "1.1",Ложь, Не ПустаяСтрока(Настройки.Область("R5C5").Текст));
		РучнаяНумерацияКолонокТабличногоДокумента = Не ПустаяСтрока(Настройки.Область(?(ВерсияОбработки = "1.1","R4","R6") + "C5").Текст);
		ПерваяСтрокаДанныхТабличногоДокумента     = мПривестиКЧислу(Настройки.Область(?(ВерсияОбработки = "1.1","R5","R7") + "C5").Текст);
		
		ПередЗаписьюОбъекта = Настройки.Область("R" + Формат(ТекущаяСтрока + 2, "ЧГ=") + "C3").Текст;
		ПриЗаписиОбъекта    = Настройки.Область("R" + Формат(ТекущаяСтрока + 3, "ЧГ=") + "C3").Текст;
		
		Если РежимЗагрузки Тогда
			ПослеДобавленияСтроки = Настройки.Область("R" + Формат(ТекущаяСтрока + 4, "ЧГ=") + "C3").Текст;
		КонецЕсли;
		
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
	КонецЕсли;
	Оформление = Неопределено;
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	ТаблицаЗагружаемыхРеквизитов.Очистить();
	
	Если      РежимЗагрузки = 0 Тогда
		ЗаполнитьНастройкиКолонокСправочника();
	ИначеЕсли РежимЗагрузки = 1 Тогда
		ЗаполнитьНастройкиКолонокТабличнойЧасти();
		
		ОсновнаяФормаОбъекта = МетаданныеИсточника.Родитель().ОсновнаяФормаОбъекта;
		Если Не ОсновнаяФормаОбъекта = Неопределено и СтруктураУмолчаний = Неопределено Тогда
			
			ИмяОсновнойФормы = ОсновнаяФормаОбъекта.Имя;
			Если Не ПустаяСтрока(ИмяОсновнойФормы) Тогда
					
				Менеджер = ПолучитьМенеджераПоТипу(ТипЗНЧ(Новый(СтрЗаменить(МетаданныеИсточника.Родитель().ПолноеИмя(),".","Ссылка."))));
				Форма = Менеджер.ПолучитьФорму(ИмяОсновнойФормы);
				Для каждого ЭлементФормы Из Форма.ЭлементыФормы Цикл
						
					Если ТипЗНЧ(ЭлементФормы) = Тип("ТабличноеПоле") И ЭлементФормы.Данные = МетаданныеИсточника.Имя Тогда
						Оформление = ЭлементФормы;
						Прервать;
					КонецЕсли;
						
				КонецЦикла;
					
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли РежимЗагрузки = 2 Тогда
		ЗаполнитьНастройкиКолонокРегистраСведений();
	КонецЕсли;
	
	Если Не Оформление = Неопределено Тогда
		НомерКолонкиОформления = 0;
		НомерКолонки = 1;
		Для каждого Колонка Из Оформление.Колонки Цикл
			
			ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Найти(Колонка.ДанныеФлажка,"ИмяРеквизита");
			Если Не ЗагружаемыйРеквизит = Неопределено Тогда
				Индекс = ТаблицаЗагружаемыхРеквизитов.Индекс(ЗагружаемыйРеквизит);
				Если Индекс >= НомерКолонкиОформления  Тогда
					
					ЗагружаемыйРеквизит.ШиринаКолонки = 3;
					ТаблицаЗагружаемыхРеквизитов.Сдвинуть(ЗагружаемыйРеквизит, НомерКолонкиОформления - Индекс);
					
					Если Колонка.Видимость Тогда
						ЗагружаемыйРеквизит.Пометка = Колонка.Видимость;
						ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
						НомерКолонки = НомерКолонки + 1;
					КонецЕсли;
					
					НомерКолонкиОформления = НомерКолонкиОформления + 1;
					
				КонецЕсли;
			КонецЕсли;
			
			ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Найти(Колонка.Данные,"ИмяРеквизита");
			Если Не ЗагружаемыйРеквизит = Неопределено Тогда
				Индекс = ТаблицаЗагружаемыхРеквизитов.Индекс(ЗагружаемыйРеквизит);
				Если Индекс >= НомерКолонкиОформления Тогда
					ЗагружаемыйРеквизит.ШиринаКолонки = Колонка.Ширина;
					ТаблицаЗагружаемыхРеквизитов.Сдвинуть(ЗагружаемыйРеквизит, НомерКолонкиОформления - Индекс);
					Если Колонка.Видимость Тогда
						ЗагружаемыйРеквизит.Пометка = Колонка.Видимость;
						ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
						НомерКолонки = НомерКолонки + 1;
					КонецЕсли;
					НомерКолонкиОформления = НомерКолонкиОформления + 1;
					
				КонецЕсли;
			КонецЕсли;
				
		КонецЦикла;
	ИначеЕсли Не СтруктураУмолчаний = Неопределено Тогда
		
		НомерКолонкиОформления = 0;
		НомерКолонки = 1;
		Для каждого КлючИЗначение Из СтруктураУмолчаний Цикл
			Колонка = КлючИЗначение.Значение;
			ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Найти(Колонка.ИмяРеквизита,"ИмяРеквизита");
			Если Не ЗагружаемыйРеквизит = Неопределено Тогда
				Индекс = ТаблицаЗагружаемыхРеквизитов.Индекс(ЗагружаемыйРеквизит);
				Если Индекс >= НомерКолонкиОформления Тогда
					ЗаполнитьЗначенияСвойств(ЗагружаемыйРеквизит, Колонка);
					
					ТаблицаЗагружаемыхРеквизитов.Сдвинуть(ЗагружаемыйРеквизит, НомерКолонкиОформления - Индекс);
					Если Колонка.Пометка Тогда
						ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
						НомерКолонки = НомерКолонки + 1;
					КонецЕсли;
					НомерКолонкиОформления = НомерКолонкиОформления + 1;
					
				КонецЕсли;
			КонецЕсли;
				
		КонецЦикла;
		
	Иначе
		 
		
		НомерКолонки = 1;
		Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
			
			ЗагружаемыйРеквизит.Пометка      = Истина;
			ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
			НомерКолонки = НомерКолонки + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры // ()

// Заполняет настройки колонок по умолчанию для табличной части
//
Процедура ЗаполнитьНастройкиКолонокТабличнойЧасти()
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		ЗагружаемыйРеквизит.ОписаниеТипов = ЗагружаемыйРеквизит.ДоступноеОписаниеТипов;
	КонецЦикла;
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		
		СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит);
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			Если Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
				
			ИначеЕсли Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
				
			Иначе
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
	КонецЦикла;
	
КонецПроцедуры // ()

// Заполняет настройки колонок по умолчанию для справочника
//
Процедура ЗаполнитьНастройкиКолонокСправочника()
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МетаданныеИсточника.ДлинаКода > 0 Тогда
		
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Код";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Код";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		
		Если МетаданныеИсточника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаКода));
		Иначе
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(МетаданныеИсточника.ДлинаКода));
		КонецЕсли;
		
	КонецЕсли;
	
	Если МетаданныеИсточника.ДлинаНаименования > 0 Тогда
		
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Наименование";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Наименование";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаНаименования));
		
	КонецЕсли;
	
	Если МетаданныеИсточника.Владельцы.Количество() > 0 Тогда
		
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Владелец";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Владелец";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		
		СтрокаОписанияТипов = "";
			
		Для каждого Владелец Из МетаданныеИсточника.Владельцы Цикл
			СтрокаОписанияТипов = ?(ПустаяСтрока(СтрокаОписанияТипов),"",СтрокаОписанияТипов + ", ") + Владелец.ПолноеИмя();
		КонецЦикла;
			
		СтрокаОписанияТипов = СтрЗаменить(СтрокаОписанияТипов,".","Ссылка.");
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов(СтрокаОписанияТипов);
		
		
	КонецЕсли;
	
	Если МетаданныеИсточника.Иерархический Тогда
		
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Родитель";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Родитель";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Истина;
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
		
	КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Если Не Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
			ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
			ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		ЗагружаемыйРеквизит.ОписаниеТипов = ЗагружаемыйРеквизит.ДоступноеОписаниеТипов;
	КонецЦикла;
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		
		СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит);
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			Если Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
				
			ИначеЕсли Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
				
			Иначе
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
				
			КонецЕсли;
			 
			
		КонецЕсли;
		
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		
		ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
	КонецЦикла;
	
	
КонецПроцедуры // ()

// Заполняет настройки колонок по умолчанию для регистра сведений
//
Процедура ЗаполнитьНастройкиКолонокРегистраСведений()
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не МетаданныеИсточника.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		
		ЗагружаемыйРеквизит = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Период";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Период";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ПолеПоиска           = Истина;
		
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Дата", , , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		
	КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеИсточника.Измерения Цикл
		ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = МетаданныеИсточника.Измерения[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИсточника.Ресурсы Цикл
		ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = МетаданныеИсточника.Ресурсы[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ДоступноеОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		ЗагружаемыйРеквизит.ОписаниеТипов = ЗагружаемыйРеквизит.ДоступноеОписаниеТипов;
	КонецЦикла;
	
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		
		СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит);
		ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит);
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			Если Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
				
			ИначеЕсли Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
				
			Иначе
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
				
			КонецЕсли;
			 
			
		КонецЕсли;
		
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		
		ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
	КонецЦикла;
	
	
КонецПроцедуры // ()


////////////////////////////////////////////////////////////////////////////////
//

// Процедура выполняет инициализацию служебных переменных и констант модуля
//
Процедура Инициализация() Экспорт
	
	МенеджерыОбъектовМетаданных = Новый Структура("Справочники, Перечисления, Документы, ПланыВидовХарактеристик, ПланыСчетов, ПланыВидовРасчета, БизнесПроцессы, Задачи",
	Справочники,
	Перечисления,
	Документы,
	ПланыВидовХарактеристик,
	ПланыСчетов,
	ПланыВидовРасчета,
	БизнесПроцессы,
	Задачи);

	КешМенеджеровПоТипу = Новый Соответствие;

	ПримитивныеТипы = Новый Структура ("Число, Строка, Дата, Булево",
	Тип("Число"), Тип("Строка"), Тип("Дата"), Тип("Булево"));
	
	Если ПерваяСтрокаДанныхТабличногоДокумента < 2 Тогда
		ПерваяСтрокаДанныхТабличногоДокумента = 2;
	КонецЕсли;
	

КонецПроцедуры // ()

#КонецЕсли
