
Перем Сервер Экспорт;

Перем КаталогВременныхФайлов;

Перем ФлАдреса;
Перем СписокФайловСОшибками;
Перем Налоговые; 



//ПРОЦЕДУРЫ СОЗДАНИЯ ОБЪЕКТОВ В БАЗЕ ПРИ ИМПОРТЕ

// Функция предназначена для создания документа "Заказ покупателя"
//
// Параметры:
//  ТекИмяФайла                    - полное имя файла, с помощью которго загружается заказ
//
// Возвращаемое значение:
// 1, если документ создан, 0 в противном случае.
//
Функция  СоздатьЗаказ(ТекИмяФайла, СтруктураДокумента)  Экспорт
	
	ЗаказПокупателя = Документы.ЗаказПокупателя.СоздатьДокумент();
	
	Запрос = новый Запрос;
    ДатаНач = НачалоГода(ТекущаяДата());
    ДатаКон = КонецГода(ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ
                   |    ЗаказПокупателя.Ссылка
                   |ИЗ
                   |    Документ.ЗаказПокупателя КАК ЗаказПокупателя
                   |ГДЕ
                   |    ЗаказПокупателя.НомерПокупателя = &НомерПокупателя
                   |    И ЗаказПокупателя.Дата МЕЖДУ &ДатаНач И &ДатаКон";
	Запрос.УстановитьПараметр("НомерПокупателя", СтруктураДокумента.НомерПокупателя);
    Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
    Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		//Ответ = Вопрос("Заказ с вх. номером "+СтруктураДокумента.НомерПокупателя+" был ранее загружен, документ № "+Выборка.Ссылка.Номер +". Обновить?", РежимДиалогаВопрос.ДаНет, 60);
		//Если Ответ = КодВозвратаДиалога.Да Тогда
		//	НайденыйЗаказ=Выборка.Ссылка.ПолучитьОбъект();
		//	НайденыйЗаказ.Товары.Очистить();
		//	ЗагрузитьТабличнуюЧасть(НайденыйЗаказ,СтруктураДокумента,НайденыйЗаказ.СкладГруппа);
		//	НайденыйЗаказ.Записать();
		//Иначе
		Сообщить("Заказ с вх. номеромром "+СтруктураДокумента.НомерПокупателя+" был ранее загружен, документ № "+Выборка.Ссылка.Номер);
		Возврат 0;
		//КонецЕсли;
	КонецЕсли;
	
	// Определи параметры, которые могут быть установлены по умолчанию:
	// Заполнить реквизиты значениями по умолчанию.
	//==========Черный А.В.=========>> 09/02/13
	//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЗаказПокупателя, глЗначениеПеременной("глТекущийПользователь"), Константы.ВалютаРегламентированногоУчета.Получить(), "Продажа");
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЗаказПокупателя);
	//<<==========Черный А.В.=========
	// Вид операции документа
	ЗаказПокупателя.ВидОперации=Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия;
	// Параметры учета НДС
	ЗаказПокупателя.УчитыватьНДС     = Истина;
	ЗаказПокупателя.СуммаВключаетНДС = Истина;
	ЗаказПокупателя.АвторасчетНДС    = Истина;
    // Резервирование и розмещение
	//==========Черный А.В.=========>> 09/02/13
	//ЗаказПокупателя.АвтоРазмещение     = Истина;
	//ЗаказПокупателя.АвтоРезервирование = Истина;
	//<<==========Черный А.В.=========
	
	// Номер покупателя
	ЗаказПокупателя.НомерПокупателя = СтруктураДокумента.НомерПокупателя;
	
	//  Дата
	ЗаказПокупателя.Дата = СтруктураДокумента.Дата;
	// Дата поставки
	ЗаказПокупателя.ДатаОтгрузки = СтруктураДокумента.Датапоставки;
	////Дата заказа (Факт)
	//ЗаказПокупателя.ДатаЗаказа = СтруктураДокумента.Дата;
	
	// Дата оплаты
	ЗаказПокупателя.ДатаОплаты = ЗаказПокупателя.Дата;
	
	
	// Определи реквизиты документы типа "СправочникСсылка":
	// Организация
	ЗаказПокупателя.Организация = СтруктураДокумента.Организация;
	
	// Согласно префиксу организации установливаем Номер документа
	ОбщегоНазначения.УстановитьНомерДокумента(ЗаказПокупателя);
	
	
	//Рекизиты документа, связанные с контрагентом:
	// Контрагент
	ЗаказПокупателя.Контрагент=СтруктураДокумента.Контрагент;
    //ИЗМЕНЕНО Верескул Игорь(Начало 08.08.2017
    ЗаказПокупателя.ДоговорКонтрагента = ПолучитьДоговорОтдела(СтруктураДокумента);
    //Окончание)Верескул Игорь 
    
    Если НЕ ЗначениеЗаполнено(ЗаказПокупателя.ДоговорКонтрагента) Тогда	
    	// Договор контрагента устанавливаем как ОсновнойДоговорКонтрагента
        Если СтруктураДокумента.Свойство("ОбозначениеПромоакции") Тогда
            Запрос = Новый Запрос;
            Запрос.Текст = "ВЫБРАТЬ
            |	ДоговорыКонтрагентов.Ссылка
            |ИЗ
            |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
            |ГДЕ
            |	ДоговорыКонтрагентов.Владелец = &Владелец
            |	И ДоговорыКонтрагентов.Номер ПОДОБНО &Номер";
            Запрос.УстановитьПараметр("Владелец", СтруктураДокумента.Контрагент);
            Запрос.УстановитьПараметр("Номер", СтруктураДокумента.ОбозначениеПромоакции);
            ТЗДоговор = Запрос.Выполнить().Выгрузить();
            Если ТЗДоговор.Количество() = 1 Тогда
            	ЗаказПокупателя.ДоговорКонтрагента = ТЗДоговор[0].Ссылка;
            КонецЕсли;
         иначе
            Запрос = Новый Запрос;
            Запрос.Текст = "ВЫБРАТЬ
                           |    СоответствиеТТПодразделениям.Договор
                           |ИЗ
                           |    РегистрСведений.СоответствиеТТПодразделениям КАК СоответствиеТТПодразделениям
                           |ГДЕ
                           |    СоответствиеТТПодразделениям.ТорговаяТочка = &ТорговаяТочка";
            Запрос.УстановитьПараметр("ТорговаяТочка",ЗаказПокупателя.кпкТорговаяТочка );
            РезультатЗапроса = Запрос.Выполнить().Выбрать();
            Если РезультатЗапроса.Следующий() Тогда
                ЗаказПокупателя.ДоговорКонтрагента = РезультатЗапроса.Договор;	
            КонецЕсли;         
        КонецЕсли; 
     КонецЕсли; 
     Если НЕ ЗначениеЗаполнено(ЗаказПокупателя.ДоговорКонтрагента) Тогда
         Сообщить("Не найден договор контрагента. Устанавливаем основной договор.");
         ЗаказПокупателя.ДоговорКонтрагента = СтруктураДокумента.Контрагент.ОсновнойДоговорКонтрагента;
    КонецЕсли; 
	// Адрес доставки (для этого необходимо создать Справочник.Адреса)
    Если СтруктураДокумента.Свойство("АдресДоставки") И ЗначениеЗаполнено(СтруктураДокумента.АдресДоставки) Тогда
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |   кпкТорговыеТочки.Ссылка
        |ИЗ
        |   Справочник.кпкТорговыеТочки КАК кпкТорговыеТочки
        |ГДЕ
        |   кпкТорговыеТочки.GLNДоставки = &GLNДоставки";
        
        Запрос.УстановитьПараметр("GLNДоставки", СтруктураДокумента.АдресДоставки.GLN);
        
        Результат = Запрос.Выполнить().Выгрузить();
        Если Результат.Количество()>0  Тогда
            ЗаказПокупателя.кпкТорговаяТочка = Результат[0].Ссылка;
            Если ЗначениеЗаполнено(ЗаказПокупателя.кпкТорговаяТочка) Тогда
                Если ЗначениеЗаполнено(ЗаказПокупателя.ДоговорКонтрагента) Тогда            
                    Регистр = РегистрыСведений.СоответствиеТТПодразделениям;
                    Набор = Регистр.СоздатьНаборЗаписей();
					Набор.Отбор.Контрагент.Значение = ЗаказПокупателя.Контрагент;
                    Набор.Отбор.Контрагент.ВидСравнения = ВидСравнения.Равно;
                    Набор.Отбор.Контрагент.Использование = Истина;
                    Набор.Отбор.ТорговаяТочка.Значение = ЗаказПокупателя.кпкТорговаяТочка;
                    Набор.Отбор.ТорговаяТочка.ВидСравнения = ВидСравнения.Равно;
                    Набор.Отбор.ТорговаяТочка.Использование = Истина;
                    Набор.Отбор.Договор.Значение = ЗаказПокупателя.ДоговорКонтрагента;
                    Набор.Отбор.Договор.ВидСравнения = ВидСравнения.Равно;
                    Набор.Отбор.Договор.Использование = Истина;
                    Набор.Прочитать();
                    Если Не Набор.Количество() = 0 Тогда
                        ЗаказПокупателя.Подразделение = Набор[0].Подразделение;
                    КонецЕсли; 
        КонецЕсли;            	
    КонецЕсли; 

        КонецЕсли; 
        ЗаказПокупателя.АдресДоставки = СтруктураДокумента.АдресДоставки;
        
    КонецЕсли;

	// Тип цен
	ЗаказПокупателя.ТипЦен=ЗаказПокупателя.ДоговорКонтрагента.ТипЦен;
	
	// Валюта документа
	ЗаказПокупателя.ВалютаДокумента=ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтруктураКурсовВалют=РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ЗаказПокупателя.Дата,Новый Структура("Валюта",ЗаказПокупателя.ВалютаДокумента));
	
	// Курс и кратность
	ЗаказПокупателя.КурсВзаиморасчетов=СтруктураКурсовВалют.Курс;
	ЗаказПокупателя.КратностьВзаиморасчетов=СтруктураКурсовВалют.Кратность;
	
	// Структурная единица
	Если ЗначениеЗаполнено(ЗаказПокупателя.Организация.ОсновнойБанковскийСчет) И ЗаказПокупателя.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		ЗаказПокупателя.СтруктурнаяЕдиница=ЗаказПокупателя.Организация.ОсновнойБанковскийСчет;
	Иначе
		Запрос=Новый Запрос;
		Запрос.Текст=
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка КАК Счет
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Организация
		|   И БанковскиеСчета.ВалютаДенежныхСредств=&Валюта";
		Запрос.УстановитьПараметр("Организация",ЗаказПокупателя.Организация);
		Запрос.УстановитьПараметр("Валюта",ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов);
		ВыборкаЗапроса=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаЗапроса.Количество()=1 Тогда
			ВыборкаЗапроса.Следующий();
			ЗаказПокупателя.СтруктурнаяЕдиница=ВыборкаЗапроса.Счет;
		КонецЕсли;
	КонецЕсли;
	
	// Склад
	СкладСсылка = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	//После сохранения разкомментить!!!
	//СкладСсылка = СтруктураДокумента.АдресДоставки.Склад;
	ЗаказПокупателя.СкладГруппа=СкладСсылка;
	
	//Табличная часть
	ЗагрузитьТабличнуюЧасть(ЗаказПокупателя,СтруктураДокумента, СкладСсылка);	
	// Комментарий
	ЗаказПокупателя.Комментарий="Заказ загружен в 1С обработкой заказов из программы eXite";
	
	// Если присутствует реквизит ИмяФайла (реквизит необязательный, может использоваться для 
	// повторного перезаполнения документа из формы уже записанного документа)
	Если НЕ ЗаказПокупателя.Метаданные().Реквизиты.Найти("ИмяФайла")=Неопределено Тогда
		ЗаказПокупателя.ИмяФайла=ТекИмяФайла;
	КонецЕсли;
	
	// Запишем новый документ в базу
//	ЗаказПокупателя.Записать(РежимЗаписиДокумента.Запись);
	
	// Если присутствует реквизит табличной части Количество, есть возможно
	// видеть текущие остатки на складе в форме документа (до момента проведения и 
	// определения остатков при проведении)
	//Если НЕ ЗаказПокупателя.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("Количество")=Неопределено Тогда
	//	КонтрольСвободныхОстатков(ЗаказПокупателя);
	//КонецЕсли;
	Если СтруктураДокумента.Свойство("EDIINTERCHANGEID") И ЗначениеЗаполнено(СтруктураДокумента.EDIINTERCHANGEID) Тогда		
		ЗаказПокупателя.EDIINTERCHANGEID=СтруктураДокумента.EDIINTERCHANGEID;
	КонецЕсли;
	ЗаказПокупателя.Записать(РежимЗаписиДокумента.Запись);
	Сообщить("Создан документ "+ЗаказПокупателя.Ссылка);
	// Открываем форму созданного заказа для интерактивного его редактирования
	//ЗаказПокупателя.ПолучитьФорму("ФормаДокумента").Открыть();
	Сообщить("Файл " + СтрЗаменить(ТекИмяФайла, КаталогВременныхФайлов, "") + " загружен" + Символы.ПС, СтатусСообщения.Информация);
	Возврат 1;
КонецФункции

Процедура ЗагрузитьТабличнуюЧасть(ЗаказПокупателя,СтруктураДокумента, СкладСсылка)
	ЗаказПокупателя.Товары.Загрузить(СтруктураДокумента.ДокументТЧ);
	
	Для Каждого ТекСтрока ИЗ ЗаказПокупателя.Товары Цикл
		
		// Склад в табличной части выбираем тот же, что и в шапке
        //ИЗМЕНЕНО Верескул Игорь(Начало 04.12.2017 Согласно письма логистики размещение не ставим
		//ТекСтрока.Размещение=СкладСсылка;
        //Окончание)Верескул Игорь 
		
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			
			// Ставка НДС
			ТекСтрока.СтавкаНДС=ТекСтрока.Номенклатура.СтавкаНДС;
			
			// Коэффициент
			ТекСтрока.Коэффициент=ТекСтрока.ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполняем табличную часть ценами номенклатуры исходя из типа цен договора контрагента
	ЗаполнитьТабличнуюЧастьЦенами(ЗаказПокупателя);

		
КонецПроцедуры
 
// Функция предназначена для создания документа "Прайс-лист"
//
// Параметры:
//  ТекИмяФайла                    - полное имя файла, с помощью которго загружается заказ
//
// Возвращаемое значение:
// 1, если документ создан, 0 в противном случае.
//
Функция СоздатьПрайсЛист(ТекИмяФайла, СтруктураДокумента)  Экспорт
	
	Если СтруктураДокумента.ТипДокумента = "" Тогда
		Сообщить("Неизвестный тип документа!");
		Возврат 0;
	КонецЕсли;
	
	обПрайсЛист = Документы[СтруктураДокумента.ТипДокумента].СоздатьДокумент();
	//Номер документа
	обПрайсЛист.НомерПрайслиста = СтруктураДокумента.НомерДокумента;
	//Дата документа
	обПрайсЛист.ДатаПрайсЛиста = СтруктураДокумента.ДатаДокумента;
	обПрайсЛист.Дата = СтруктураДокумента.ДатаДокумента;
	Если СтруктураДокумента.ТипДокумента = "" Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	_eXiteПрайсЛист.Ссылка КАК ПрайсЛист
		|ИЗ
		|	Документ._eXiteПрайсЛист КАК _eXiteПрайсЛист
		|ГДЕ
		|	_eXiteПрайсЛист.НомерПрайслиста = &НомерПрайслиста
		|	И _eXiteПрайсЛист.ДатаПрайслиста = &ДатаПрайслиста";
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("НомерПрайслиста", СтруктураДокумента.НомерПрайслиста);
		Запрос.УстановитьПараметр("ДатаПрайслиста", СтруктураДокумента.ДатаПрайслиста);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		обПрайсЛист.ПрайсЛист = Выборка.ПрайсЛист;
	КонецЕсли;
	
	//GLN номер покупателя 
	обПрайсЛист.Контрагент = СтруктураДокумента.Контрагент;
	//GLN номер поставщика
	обПрайсЛист.Организация = СтруктураДокумента.Организация;
	//Вступает в силу с даты
	обПрайсЛист.ДатаВступленияВСилу = СтруктураДокумента.ДатаВступленияВСилу;
	//Свободный текст
	//обПрайсЛист.Комментарий = СтруктураДокумента.СвободныйТекст;
	
	
	обПрайсЛист.Товары.Загрузить(СтруктураДокумента.CATALOGUE);
	Попытка
		обПрайсЛист.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Сообщить("Файл " + СтрЗаменить(ТекИмяФайла, КаталогВременныхФайлов, "") + " загружен" + Символы.ПС, СтатусСообщения.Информация);
	
	Возврат 1;
КонецФункции

// Функция предназначена для записи поставляемого количества в документ "Поступление товаров услуг"
//
// Параметры:
//  ТекИмяФайла                    - полное имя файла, с помощью которго загружается заказ
//
// Возвращаемое значение:
// 1, если документ изменен, 0 в противном случае.
//
Функция  СоздатьЗаписьУведомленияОПриеме(ТекИмяФайла, СтруктураДокумента)  Экспорт
	
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Накладная
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	//|	РеализацияТоваровУслуг.Номер = &НомерНакладной
	//|	И 
	|	РеализацияТоваровУслуг.Сделка.НомерПокупателя = &НомерЗаказа";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НомерЗаказа", СтруктураДокумента.НомерЗаказа);
	//Запрос.УстановитьПараметр("НомерНакладной", СтруктураДокумента.НомерНакладной);
	Выборка = Запрос.Выполнить().Выбрать();
	Накладная = Неопределено;
	Пока Выборка.Следующий() Цикл
		Накладная = Выборка.Накладная.ПолучитьОбъект();
		Прервать;
	КонецЦикла;
	Если Накладная = Неопределено Тогда
		Сообщить("Не найдена накладная по заказу № " + СокрЛП(СтруктураДокумента.НомерЗаказа) + ", по которой был отгружен заказ.", СтатусСообщения.ОченьВажное);
		Возврат 0;
	КонецЕсли;
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента КАК PRODUCT
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры = НоменклатураКонтрагентов.ХарактеристикаНоменклатуры
	|			И РеализацияТоваровУслугТовары.ЕдиницаИзмерения = НоменклатураКонтрагентов.ЕдиницаИзмерения
	|			И (НоменклатураКонтрагентов.Контрагент = &Контрагент)
	|ГДЕ
	|	НоменклатураКонтрагентов.Контрагент = &Контрагент";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Контрагент", Накладная.Контрагент);
	ТоварыНакладной = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из Накладная.Товары Цикл
		МассивТоваровНакладной = ТоварыНакладной.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения", ТекСтрока.Номенклатура, ТекСтрока.ХарактеристикаНоменклатуры, ТекСтрока.ЕдиницаИзмерения));
		Если МассивТоваровНакладной.Количество() = 0 Тогда
			Сообщить("Ошибка определения GTIN номенклатуры " + ТекСтрока.Номенклатура);
			Продолжить;
		КонецЕсли;
		PRODUCT = СокрЛП(МассивТоваровНакладной[0].PRODUCT); 
		МассивТоваровRECADV = СтруктураДокумента.ДокументТЧ.НайтиСтроки(Новый Структура("ШтрихКод", PRODUCT));
		Если МассивТоваровRECADV.Количество() = 0 Тогда
			Сообщить("");
			Продолжить;
		КонецЕсли;
		
		СтрокаКоличественныхПоказателей = МассивТоваровRECADV[0];
		Если ЗначениеЗаполнено(СтрокаКоличественныхПоказателей.КоличествоЗаказанное) Тогда
			ТекСтрока.КоличествоЗаказанное = СтрокаКоличественныхПоказателей.КоличествоЗаказанное;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаКоличественныхПоказателей.КоличествоПоставляемое) Тогда
			ТекСтрока.КоличествоПоставляемое = СтрокаКоличественныхПоказателей.КоличествоПоставляемое;
		КонецЕсли;
		ТекСтрока.КоличествоПринятое = СтрокаКоличественныхПоказателей.КоличествоПринятое;
		ТекСтрока.Количество = ТекСтрока.КоличествоПринятое;
	КонецЦикла;
	
	Накладная.Записать(РежимЗаписиДокумента.Запись);
	
	Сообщить("Файл " + СтрЗаменить(ТекИмяФайла, КаталогВременныхФайлов, "") + " загружен" + Символы.ПС, СтатусСообщения.Информация);
	
	Возврат 1;
КонецФункции

// Функция предназначена для записи поставляемого количества в документ "Поступление товаров услуг"
//
// Параметры:
//  ТекИмяФайла                    - полное имя файла, с помощью которго загружается заказ
//
// Возвращаемое значение:
// 1, если документ изменен, 0 в противном случае.
//
Функция СоздатьЗаписьУведомленияОбОтгрузке(ТекИмяФайла, СтруктураДокумента) Экспорт
	
	Если НЕ СтруктураДокумента.Свойство("НомерНакладной") Тогда
		Сообщить("Не найдено поле ""DELIVERYNOTENUMBER"" файла " + ТекИмяФайла, СтатусСообщения.Важное);
		Возврат 0;
	Иначе
		Если НЕ ЗначениеЗаполнено(СтруктураДокумента.НомерНакладной) Тогда
			Сообщить("Не указан номер накладной для файла " + ТекИмяФайла, СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Номер ПОДОБНО ""%"" + &НомерЗаказа  +""%""
	|	И НАЧАЛОПЕРИОДА(ЗаказПоставщику.Дата, ДЕНЬ) = &ДатаЗаказа";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НомерЗаказа", СтруктураДокумента.НомерЗаказа);
	Запрос.УстановитьПараметр("ДатаЗаказа", НачалоДня(СтруктураДокумента.ДатаЗаказа));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЗаказПоставщику = Выборка.ЗаказПоставщику;
	Если НЕ ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		Сообщить("Не найден в базе заказ поставщику № " + СтруктураДокумента.НомерЗаказа + " от " + Формат(СтруктураДокумента.ДатаЗаказа, "Л=; ДФ=dd.MM.yyyy"), СтатусСообщения.Важное);
		Возврат 0;
	КонецЕсли;
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ПриходнаяНакладная
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Номер = &НомерНакладной
	|	И ПоступлениеТоваровУслуг.Сделка = &Сделка";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НомерНакладной", СтруктураДокумента.НомерНакладной);
	Запрос.УстановитьПараметр("Сделка", ЗаказПоставщику);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ПриходнаяНакладная = Выборка.ПриходнаяНакладная;
	Если Не ЗначениеЗаполнено(ПриходнаяНакладная) Тогда
		Сообщить("Не найдена приходная накладная № " + СтруктураДокумента.НомерНакладной + " для записи файла " + ТекИмяФайла + ", было создана новая на основаниии заказа поставщику № " + СтруктураДокумента.НомерЗаказа + " от " + Формат(СтруктураДокумента.ДатаЗаказа, "Л=; ДФ=dd.MM.yyyy"), СтатусСообщения.Важное);
		ПриходнаяНакладнаяНаОсновании = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ПриходнаяНакладнаяНаОсновании.Заполнить(ЗаказПоставщику);
		ПриходнаяНакладнаяНаОсновании.Дата = ТекущаяДата();
		ПриходнаяНакладнаяНаОсновании.Записать();
		ПриходнаяНакладная = ПриходнаяНакладнаяНаОсновании.Ссылка;
	КонецЕсли;
	
	ДокументПриходнаяНакладная = ПриходнаяНакладная.ПолучитьОбъект();
	//Табличная часть
	ДокументТЧ = СтруктураДокумента.ДокументТЧ;
	Для Каждого ТекСтрока ИЗ ДокументПриходнаяНакладная.Товары Цикл
		МассивСтрок = ДокументТЧ.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
		Если МассивСтрок.Количество() = 0 Тогда
			Сообщить("Не найдена позиция " + ТекСтрока.Номенклатура + ", вн. код: " + ТекСтрока.Номенклатура.Артикул);
			Продолжить;
		КонецЕсли;
		СтрокаНоменклатуры = МассивСтрок[0];
		//ТекСтрока.КоличествоЗаказанное = СтрокаНоменклатуры.КоличествоЗаказанное;
		ТекСтрока.Количество = СтрокаНоменклатуры.КоличествоПоставляемое;
		
	КонецЦикла;
	
	// Комментарий
	ДокументПриходнаяНакладная.Комментарий=ДокументПриходнаяНакладная.Комментарий + " Откорректировано уведомлением об отгрузке № " + СтруктураДокумента.НомерДокумента + " от " + СтруктураДокумента.ДатаДокумента;
	
	// Запишем документ в базу
	ДокументПриходнаяНакладная.Записать(РежимЗаписиДокумента.Запись);
	
	Сообщить("Файл " + СтрЗаменить(ТекИмяФайла, КаталогВременныхФайлов, "") + " загружен" + Символы.ПС, СтатусСообщения.Информация);
	Возврат 1;
КонецФункции


Функция СоздатьЗаписьСчета(ТекИмяФайла, СтруктураДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(СтруктураДокумента.НомерНакладной) Тогда
		Сообщить("Не указан номер накладной для файла " + ТекИмяФайла, СтатусСообщения.Важное);
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Номер = &НомерЗаказа
	|	И НАЧАЛОПЕРИОДА(ЗаказПоставщику.Дата, ДЕНЬ) = &ДатаЗаказа";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НомерЗаказа", СтруктураДокумента.НомерЗаказа);
	Запрос.УстановитьПараметр("ДатаЗаказа", НачалоДня(СтруктураДокумента.ДатаЗаказа));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЗаказПоставщику = Выборка.ЗаказПоставщику;
	Если Не ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		Сообщить("Не найден в базе заказ поставщику № " + СтруктураДокумента.НомерЗаказа + " от " + Формат(СтруктураДокумента.ДатаЗаказа, "Л=; ДФ=dd.MM.yyyy"), СтатусСообщения.Важное);
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ПриходнаяНакладная
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Номер = &НомерНакладной
	|	И ПоступлениеТоваровУслуг.Дата = &ДатаНакладной
	|	И ПоступлениеТоваровУслуг.Сделка = &Сделка";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НомерНакладной", СтруктураДокумента.НомерНакладной);
	Запрос.УстановитьПараметр("ДатаНакладной", СтруктураДокумента.ДатаНакладной);
	Запрос.УстановитьПараметр("Сделка", ЗаказПоставщику);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ПриходнаяНакладная = Выборка.ПриходнаяНакладная;
	Если Не ЗначениеЗаполнено(ПриходнаяНакладная) Тогда
		Сообщить("Не найдена приходная накладная № " + СтруктураДокумента.НомерНакладной + " для записи файла " + ТекИмяФайла + ", было создана новая на основаниии заказа поставщику № " + СтруктураДокумента.НомерЗаказа + " от " + Формат(СтруктураДокумента.ДатаЗаказа, "Л=; ДФ=dd.MM.yyyy"), СтатусСообщения.Важное);
		ПриходнаяНакладнаяНаОсновании = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ПриходнаяНакладнаяНаОсновании.Заполнить(ЗаказПоставщику);
		ПриходнаяНакладнаяНаОсновании.Дата = СтруктураДокумента.ДатаНакладной;
		ПриходнаяНакладнаяНаОсновании.Записать();
		ПриходнаяНакладная = ПриходнаяНакладнаяНаОсновании.Ссылка;
	КонецЕсли;
	
	ДокументПриходнаяНакладная = ПриходнаяНакладная.ПолучитьОбъект();
	
	СпособЗаполненияЦен=Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	мВалютаРегламентированногоУчета=Константы.ВалютаРегламентированногоУчета.Получить();
	//Табличная часть
	ДокументТЧ = СтруктураДокумента.ДокументТЧ;
	Для Каждого СтрокаТабличнойЧасти ИЗ ДокументПриходнаяНакладная.Товары Цикл
		МассивСтрок = ДокументТЧ.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТабличнойЧасти.Номенклатура));
		Если МассивСтрок.Количество() = 0 Тогда
			Сообщить("Не найдена позиция " + СтрокаТабличнойЧасти.Номенклатура + ", вн. код: " + СтрокаТабличнойЧасти.Номенклатура.Артикул);
			Продолжить;
		КонецЕсли;
		СтрокаНоменклатуры = МассивСтрок[0];
		СтрокаТабличнойЧасти.Количество = СтрокаНоменклатуры.КоличествоПоСчету;
		СтрокаТабличнойЧасти.Цена = СтрокаНоменклатуры.ЦенаБезНДС;
		
		
		
		//СтрокаТабличнойЧасти.СтавкаНДС = ?(СтрокаНоменклатуры.СтавкаНДС = 0.20, Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС0);
		//ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЗаказПоставщику, мВалютаРегламентированногоУчета); 
		//ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЗаказПоставщику);
		
		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЗаказПоставщику);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЗаказПоставщику);
		
		// Рассчитываем плановую себестоимость.
		ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЗаказПоставщику, мВалютаРегламентированногоУчета);
		
	КонецЦикла;
	
	// Комментарий
	ДокументПриходнаяНакладная.Комментарий = ДокументПриходнаяНакладная.Комментарий + " Откорректировано уведомлением об отгрузке № " + СтруктураДокумента.НомерДокумента + " от " + СтруктураДокумента.ДатаДокумента;
	
	// Запишем документ в базу
	ДокументПриходнаяНакладная.Записать(РежимЗаписиДокумента.Запись);
	
	Сообщить("Файл " + СтрЗаменить(ТекИмяФайла, КаталогВременныхФайлов, "") + " загружен" + Символы.ПС, СтатусСообщения.Информация);
	
	Возврат 1;
	
КонецФункции


Функция СоздатьЗаписьПодтвержденияЗаказа(ТекИмяФайла, СтруктураДокумента) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Номер = &НомерЗаказа
	|	И НАЧАЛОПЕРИОДА(ЗаказПоставщику.Дата, ДЕНЬ) = &ДатаЗаказа";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НомерЗаказа", СтруктураДокумента.НомерЗаказа);
	Запрос.УстановитьПараметр("ДатаЗаказа", НачалоДня(СтруктураДокумента.ДатаЗаказа));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЗаказПоставщику = Выборка.ЗаказПоставщику;
	Если Не ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		Сообщить("Не найден в базе заказ поставщику № " + СтруктураДокумента.НомерЗаказа + " от " + Формат(СтруктураДокумента.ДатаЗаказа, "Л=; ДФ=dd.MM.yyyy"), СтатусСообщения.Важное);
		Возврат 0;
	Иначе
		Сообщить("Обрабатываем заказ поставщику № " + СтруктураДокумента.НомерЗаказа + " от " + Формат(СтруктураДокумента.ДатаЗаказа, "Л=; ДФ=dd.MM.yyyy"), СтатусСообщения.Информация);
	КонецЕсли;
	
	
	ДокументЗаказПоставщику = ЗаказПоставщику.ПолучитьОбъект();
	
	СпособЗаполненияЦен=Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	мВалютаРегламентированногоУчета=Константы.ВалютаРегламентированногоУчета.Получить();
	//Табличная часть
	ДокументТЧ = СтруктураДокумента.ДокументТЧ;
	Для Каждого СтрокаТабличнойЧасти ИЗ ДокументЗаказПоставщику.Товары Цикл
		МассивСтрок = ДокументТЧ.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТабличнойЧасти.Номенклатура));
		Если МассивСтрок.Количество() = 0 Тогда
			Сообщить("Не найдена позиция " + СтрокаТабличнойЧасти.Номенклатура + ", вн. код: " + СтрокаТабличнойЧасти.Номенклатура.Артикул);
			Продолжить;
		КонецЕсли;
		СтрокаНоменклатуры = МассивСтрок[0];
		
		Если СтрокаНоменклатуры.УточнениеОПоставке = 2 Тогда
			//Ясынивская Э.
			СтрокаТабличнойЧасти.КоличествоЗаказанное =  СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.КоличествоИмеющееся = СтрокаНоменклатуры.КоличествоИмеющееся;
           //КонецИзменений
		   СтрокаТабличнойЧасти.Количество = СтрокаНоменклатуры.КоличествоИмеющееся;
			//СтрокаТабличнойЧасти.Цена = СтрокаНоменклатуры.ЦенаБезНДС;
		ИначеЕсли  СтрокаНоменклатуры.УточнениеОпоставке = 3 Тогда
			СтрокаТабличнойЧасти.Количество = 0;
		КонецЕсли;
		
		//СтрокаТабличнойЧасти.СтавкаНДС = ?(СтрокаНоменклатуры.СтавкаНДС = 0.20, Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС0);
		//ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЗаказПоставщику, мВалютаРегламентированногоУчета); 
		//ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЗаказПоставщику);
		
		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЗаказПоставщику);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЗаказПоставщику);
		
		// Рассчитываем плановую себестоимость.
		//РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЗаказПоставщику, мВалютаРегламентированногоУчета);
		
		
	КонецЦикла;
	
	// Комментарий
	ДокументЗаказПоставщику.Комментарий = "Откорректировано подтверждением заказа № " + СтруктураДокумента.НомерДокумента + " от " + СтруктураДокумента.ДатаДокумента;
	
	// Запишем документ в базу
	ДокументЗаказПоставщику.Записать(РежимЗаписиДокумента.Запись);
	
	Сообщить("Файл " + СтрЗаменить(ТекИмяФайла, КаталогВременныхФайлов, "") + " загружен" + Символы.ПС, СтатусСообщения.Информация);
	
	Возврат 1;
	
КонецФункции



//ПРОЦЕДУРЫ ФОРМИРОВАНИЯ СТРУКТУРЫ ИМПОРТИРУЕМЫХ ДОКУМЕНТОВ

// Функция предназначена для создания структуры образа документа для импорта файла ORDER
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
// Структура образа документа.
//
Функция ПолучитьСтруктуруДокумента_ORDER(Дерево)
	
	СтруктураДокумента = Новый Структура;
	Если Comarch Тогда
        //Узел = ПолучитьУзелДерева(Дерево.Строки, "Строка", "Document-Order");
        //Если НЕ Узел = Неопределено Тогда
        //    СтрокаДерева = Узел.Строки;
        //Иначе
        //    Сообщить("Файл не является ORDER-файлом!", СтатусСообщения.Важное);
        //КонецЕсли; 
        Корень = Дерево.Строки[0].Строки;
        Узел = ПолучитьУзелДерева(Корень, "Строка", "Order-Header");
        Если НЕ Узел = Неопределено Тогда
            СтрокаДерева = Узел.Строки;
        Иначе
            Сообщить("Файл не является ORDER-файлом!", СтатусСообщения.Важное);
        КонецЕсли;
        
        // Номер заказа(обязательное поле)
        xmlНомерПокупателя = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderNumber", Истина);
        Если НЕ xmlНомерПокупателя = Неопределено Тогда
            СтруктураДокумента.Вставить("НомерПокупателя", СокрЛП(xmlНомерПокупателя));
        Иначе
            Возврат 0;
        КонецЕсли;
        
        xmlДатаЗаказа = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderDate", Истина);
        Если НЕ xmlДатаЗаказа = Неопределено Тогда
            СтруктураДокумента.Вставить("Дата", Дата(Прав(СокрЛП(xmlДатаЗаказа),2)+"."+Сред(СокрЛП(xmlДатаЗаказа),6,2)+"."+Лев(СокрЛП(xmlДатаЗаказа),4)+" 0:00:00"));
        Иначе
            Возврат 0;
        КонецЕсли;
        
        xmlДатапоставки = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ExpectedDeliveryDate", Истина);
        Если НЕ xmlДатапоставки = Неопределено Тогда
            Датапоставки = Дата(Прав(СокрЛП(xmlДатапоставки),2)+"."+Сред(СокрЛП(xmlДатапоставки),6,2)+"."+Лев(СокрЛП(xmlДатапоставки),4)+" 0:00:00");
            СтруктураДокумента.Вставить("Датапоставки", Датапоставки);
        Иначе
            Возврат 0;
        КонецЕсли;
        
        // Время поставки(опциональное поле)
        xmlВремяпоставки = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ExpectedDeliveryTime", Ложь);
        Если НЕ xmlВремяпоставки = Неопределено Тогда
            СтруктураДокумента.Вставить("Времяпоставки", xmlВремяпоставки);//Лев(Формат(Датапоставки, "Л=; ДЛФ=T"), ?(Найти(Формат(Датапоставки, "Л=; ДЛФ=T"), Символ(58)) = 1, 4, 5)));
        КонецЕсли;
        
        //xmlОбозначениеПромоакции = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ContractNumber", Истина);
        //Если НЕ xmlОбозначениеПромоакции = Неопределено Тогда
        //    СтруктураДокумента.Вставить("ОбозначениеПромоакции", СокрЛП(xmlОбозначениеПромоакции));
        //КонецЕсли;
        
        // Валюта(UAH,RUB,USD,EUR,MDL,BYR)(опциональное поле)
        xmlВалюта = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "Currency", Ложь);
        Если НЕ xmlВалюта = Неопределено Тогда
            СтруктураДокумента.Вставить("Валюта", ПолучитьВалюту(xmlВалюта));
        КонецЕсли;
        
        // Свободный текст(опциональное поле)
        xmlСвободныйТекст = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "Remarks", Ложь);
        Если НЕ xmlСвободныйТекст = Неопределено Тогда
            СтруктураДокумента.Вставить("СвободныйТекст", СокрЛП(xmlСвободныйТекст));
        КонецЕсли;
        
        //HEAD
        Узел = ПолучитьУзелДерева(Корень, "Строка", "Order-Parties");
        Если НЕ Узел = Неопределено Тогда
            СтрокаДерева = Узел.Строки;
        Иначе
            Возврат 0;
        КонецЕсли;
        
        // Поставщик(организация)(обязательное поле)
        СтрокаПоискаОРганизации = ПолучитьУзелДерева(СтрокаДерева, "Строка","Seller");
        Если НЕ СтрокаПоискаОРганизации = Неопределено Тогда
            xmlОрганизацияGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаПоискаОРганизации.Строки, "ILN", ИСТИНА);	
        КонецЕсли; 
        Если НЕ xmlОрганизацияGLN = Неопределено Тогда
            Если  Метаданные.Справочники.Организации.Реквизиты.Найти("GLN") = Неопределено Тогда
                Сообщить("Отсутствует необходимый для загрузки данных реквизит <GLN> в справочнике <Организации>",СтатусСообщения.Важное);
                Возврат 0;
            КонецЕсли;
            
            //ОрганизацияСсылка = Справочники.Организации.НайтиПоРеквизиту("GLN", xmlОрганизацияGLN);
            ОрганизацияСсылка = ПолучитьОрганизациюИзРегистраПодключения(xmlОрганизацияGLN);
 
             
            Если НЕ ОрганизацияСсылка.Пустая() Тогда
                СтруктураДокумента.Вставить("Организация", ОрганизацияСсылка);
            Иначе
                Сообщить("Не найдена организация с GLN " + xmlОрганизацияGLN + ". Возможно заказ нам не принадлежит! Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
                Возврат 0;
            КонецЕсли;
        Иначе
            Возврат 0;
        КонецЕсли;
        
        // Покупатель(контрагент)(обязательное поле)
        СтрокаПоискаКонтрагента = ПолучитьУзелДерева(СтрокаДерева, "Строка", "Buyer");
        Если НЕ СтрокаПоискаКонтрагента  = Неопределено Тогда
            xmlКонтрагентGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаПоискаКонтрагента.Строки, "ILN", ИСТИНА);	
        КонецЕсли;
        Если НЕ xmlКонтрагентGLN = Неопределено Тогда
            
            Если  Метаданные.Справочники.Контрагенты.Реквизиты.Найти("GLN") = Неопределено Тогда
                Сообщить("Отсутствует необходимый для загрузки данных реквизит <GLN> в справочнике <Контрагенты>", СтатусСообщения.Важное);
                Возврат 0;
            КонецЕсли;
            
            КонтрагентСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlКонтрагентGLN);
            Если НЕ КонтрагентСсылка.Пустая() Тогда
                СтруктураДокумента.Вставить("Контрагент", КонтрагентСсылка);
            Иначе
                Сообщить("Не найден контрагент с GLN " + xmlКонтрагентGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
                Возврат 0;
            КонецЕсли;
        Иначе
            Возврат 0;
        КонецЕсли;
        
        // Место доставки (для этого необходимо создать Справочник.ТочкиДоставки)(опциональное поле)
        СтрокаПоискаАдресДоставкиGLN = ПолучитьУзелДерева(СтрокаДерева, "Строка", "DeliveryPoint");
         Если НЕ СтрокаПоискаАдресДоставкиGLN  = Неопределено Тогда
            xmlАдресДоставкиGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаПоискаАдресДоставкиGLN.Строки, "ILN", ИСТИНА);	
        КонецЕсли;
        Если НЕ xmlАдресДоставкиGLN = Неопределено Тогда
            Если ФлАдреса Тогда
                Если НЕ Справочники.ТипВсеСсылки().СодержитТип(Тип("СправочникСсылка.ТочкиДоставки")) Тогда
                    Сообщить("Отсутствует необязательный для загрузки данных справочник <Точки доставки>", СтатусСообщения.Важное);
                Иначе
                    Если  Метаданные.Справочники.ТочкиДоставки.Реквизиты.Найти("GLN") = Неопределено Тогда
                        Сообщить("Отсутствует необязательный для загрузки данных реквизит <GLN> в справочнике <Точки доставки>",СтатусСообщения.Важное);
                    КонецЕсли;
                КонецЕсли;
                ФлАдреса=Ложь;
            КонецЕсли;
            
            
            АдресДоставкиСсылка = ПолучитьАдресДоставки(xmlКонтрагентGLN, xmlАдресДоставкиGLN);
            
            Если НЕ АдресДоставкиСсылка.Пустая() Тогда
                СтруктураДокумента.Вставить("АдресДоставки", АдресДоставкиСсылка);
            Иначе
                Сообщить("Не найден адрес доставки с GLN " + xmlАдресДоставкиGLN + " для контрагента с GLN " + xmlКонтрагентGLN + ". Возможно заказ нам не принадлежит! Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
                Возврат 0;
            КонецЕсли;
        КонецЕсли;
        
        // Плательщик(опциональное поле)
        СтрокаПоискаПлательщикGLN = ПолучитьУзелДерева(СтрокаДерева, "Строка", "Invoicee");
        Если НЕ СтрокаПоискаПлательщикGLN  = Неопределено Тогда
            xmlПлательщикGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаПоискаПлательщикGLN.Строки, "ILN", ИСТИНА);	
        КонецЕсли;
        Если НЕ xmlПлательщикGLN = Неопределено Тогда
            ПлательщикСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlПлательщикGLN);
            Если НЕ ПлательщикСсылка.Пустая() Тогда
                СтруктураДокумента.Вставить("Плательщик", ПлательщикСсылка);
            Иначе
                Сообщить("Не найден плательщик с GLN " + xmlПлательщикGLN + ".", СтатусСообщения.Важное);
                Возврат 0;
            КонецЕсли;
        КонецЕсли;
        
        
        // Отправитель(обязательное поле)
        СтрокаПоискаОтправительGLN = ПолучитьУзелДерева(СтрокаДерева, "Строка", "MessageSender");
        Если НЕ СтрокаПоискаОтправительGLN  = Неопределено Тогда
            xmlОтправительGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаПоискаОтправительGLN.Строки, "ILN", ИСТИНА);	
        КонецЕсли;
        Если НЕ xmlОтправительGLN = Неопределено Тогда
            ОтправительСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlОтправительGLN);
            Если ОтправительСсылка.Пустая() Тогда
                 ОтправительСсылка = Справочники.ТочкиДоставки.НайтиПоРеквизиту("GLN", xmlОтправительGLN,,КонтрагентСсылка);         
            КонецЕсли;
            Если НЕ ОтправительСсылка.Пустая() Тогда
                СтруктураДокумента.Вставить("Отправитель", ОтправительСсылка);
            Иначе
                Сообщить("Не найден отправитель с GLN " + xmlОтправительGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
                Возврат 0;
            КонецЕсли;
        Иначе
            Возврат 0;
        КонецЕсли;
        
        //// Получатель(обязательное поле)
        //xmlПолучательGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "RECIPIENT", Истина);
        //Если НЕ xmlПолучательGLN = Неопределено Тогда
        //    ПолучательСсылка = Справочники.Организации.НайтиПоРеквизиту("GLN", xmlПолучательGLN);
        //    
        //    Если НЕ ПолучательСсылка.Пустая() Тогда
        //        СтруктураДокумента.Вставить("Получатель", ПолучательСсылка);
        //    Иначе
        //        Сообщить("Не найден получатель с GLN " + xmlПолучательGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
        //        Возврат 0;
        //    КонецЕсли;
        //Иначе
        //    Возврат 0;
        //КонецЕсли;
        
        // Номер транзакции
        //xmlEDIINTERCHANGEID = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "EDIINTERCHANGEID", Ложь);
        //Если НЕ xmlEDIINTERCHANGEID = Неопределено Тогда
        //    СтруктураДокумента.Вставить("EDIINTERCHANGEID", xmlEDIINTERCHANGEID);
        //Иначе
        //    //Возврат 0;
        //КонецЕсли;
        ТабличнаяЧастьНачало = ПолучитьУзелДерева(Корень, "Строка", "Order-Lines"); 
        ТабличнаяЧасть = ПолучитьУзелДерева(ТабличнаяЧастьНачало.Строки, "Массив", "Line"); 
        
        // Создаем таблицуЗначений, в которую выгружаем табличную часть документа
        ДокументТЧ=Новый ТаблицаЗначений;
        ДокументТЧ.Колонки.Добавить("НомерСтрокиТЧ");
        ДокументТЧ.Колонки.Добавить("Номенклатура");
        ДокументТЧ.Колонки.Добавить("Количество");
        ДокументТЧ.Колонки.Добавить("КоличествоЗаказанное");
        ДокументТЧ.Колонки.Добавить("ШтрихКод");
        ДокументТЧ.Колонки.Добавить("АртикулПоставщика");
        ДокументТЧ.Колонки.Добавить("АртикулПокупателя");
        ДокументТЧ.Колонки.Добавить("ЕдиницаИзмерения");
        ДокументТЧ.Колонки.Добавить("ЕдиницаИзмеренияМест");
        ДокументТЧ.Колонки.Добавить("КоличествоВУпаковке");
        ДокументТЧ.Колонки.Добавить("Цена");
        ДокументТЧ.Колонки.Добавить("ЕдиницаИзмеренияЦены");
        ДокументТЧ.Колонки.Добавить("ОписаниеПродукта");
        ДокументТЧ.Колонки.Добавить("КоличествоМест");
        ДокументТЧ.Колонки.Добавить("Коэффициент");
        
        Для Каждого Узел ИЗ ТабличнаяЧасть Цикл
            //Line-item
            СтрокаДерева = Узел.Строки[0].Строки;
            
            НоваяСтрокаТЧ = ДокументТЧ.Добавить();
            
            //Номер строки (этот параметр при создании заказа не используется, может быть проверочным)
            xmlНомерСтрокиТЧ = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "LineNumber", Истина);
            Если НЕ xmlНомерСтрокиТЧ = Неопределено Тогда
                НоваяСтрокаТЧ.НомерСтрокиТЧ = xmlНомерСтрокиТЧ;
            Иначе
                Возврат 0;
            КонецЕсли;
            
            // Определяем аттрибуты номенклатуры:
            // Штрих - код номенклатуры
            xmlШтрихКодНоменклатуры = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "EAN", Истина);
            Если НЕ xmlШтрихКодНоменклатуры = Неопределено Тогда
                НоваяСтрокаТЧ.ШтрихКод = xmlШтрихКодНоменклатуры;
            Иначе
                Возврат 0;
            КонецЕсли;
            
            // Артикул поставщика(опциональное поле)
            xmlАртикулПоставщикаСтрока = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "SupplierItemCode", Ложь);
            
            // Артикул покупателя(опциональное поле)
            xmlАртикулПокупателяСтрока = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "BuyerItemCode", Ложь);
            
            // Приоритетным является PRODUCTIDBUYER, если параметр присутствует, то используем его
            Если НЕ xmlАртикулПокупателяСтрока = Неопределено Тогда
                АртикулПокупателя = xmlАртикулПокупателяСтрока;
                СтруктураНоменклатуры=ПолучитьНоменклатуру(СтруктураДокумента.Контрагент,АртикулПокупателя, "");
                НоваяСтрокаТЧ.Номенклатура=СтруктураНоменклатуры.Номенклатура;
                //Единица измерения (определяем из регистра сведений НоменклатураКонтрагентов)
                НоваяСтрокаТЧ.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаИзмерения;
                НоваяСтрокаТЧ.АртикулПокупателя=АртикулПокупателя;
            КонецЕсли;
            
            // Если параметр PRODUCTIDBUYER отсутствует или по артикулу покупателя не удалось найти номенклатуру
            Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.Номенклатура)  Тогда
                СтруктураНоменклатуры=ПолучитьНоменклатуру(СтруктураДокумента.Контрагент, "", xmlШтрихКодНоменклатуры);
                НоваяСтрокаТЧ.Номенклатура=СтруктураНоменклатуры.Номенклатура;
                //Единица измерения (определяем из регистра сведений НоменклатураКонтрагентов)
                НоваяСтрокаТЧ.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаИзмерения;
            КонецЕсли;
            
            Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.Номенклатура) Тогда
                Сообщить("Не найдена позиция номенклатуры (" + ?(Не ЗначениеЗаполнено(АртикулПокупателя), "штрих-код " + xmlШтрихКодНоменклатуры, "артикул " + АртикулПокупателя) + ") в строке " + xmlНомерСтрокиТЧ,СтатусСообщения.ОченьВажное);
                //Возврат 0;
            КонецЕсли;
            
            НоваяСтрокаТЧ.ЕдиницаИзмеренияМест = НоваяСтрокаТЧ.ЕдиницаИзмерения;
            // Количество(обязательное поле)
            xmlКоличество = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderedQuantity", Истина);
            Если НЕ xmlКоличество = Неопределено Тогда
                НоваяСтрокаТЧ.Количество = Число(xmlКоличество);
                НоваяСтрокаТЧ.КоличествоЗаказанное = Число(xmlКоличество);
            Иначе
                Возврат 0;
            КонецЕсли;
            // Единицы измерения количества(опциональное поле)
            //xmlЕдиницаИзмерения = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDEREDUNIT", Ложь);
            //Если НЕ xmlЕдиницаИзмерения = Неопределено Тогда
            //	НоваяСтрокаТЧ.ЕдиницаИзмерения = СокрЛП(xmlЕдиницаИзмерения);
            //КонецЕсли;
            
            // Количество в упаковке(опциональное поле)
            xmlКоличествоВУпаковке = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderedUnitPacksize", Ложь);
            Если НЕ xmlКоличествоВУпаковке = Неопределено Тогда
                НоваяСтрокаТЧ.КоличествоВУпаковке = Число(xmlКоличествоВУпаковке);
            КонецЕсли;
            
            // Цена продукта без НДС(опциональное поле)
            xmlЦенаБезНДС = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderedUnitNetPrice", Ложь);
            Если НЕ xmlЦенаБезНДС = Неопределено Тогда
                НоваяСтрокаТЧ.Цена = Число(xmlЦенаБезНДС);
            КонецЕсли;
            
            //// Единицы измерения цены(опциональное поле)
            //xmlЕдиницаИзмеренияЦены = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDERPRICEUNIT", Ложь);
            //Если НЕ xmlЕдиницаИзмеренияЦены = Неопределено Тогда
            //    НоваяСтрокаТЧ.ЕдиницаИзмеренияЦены = СокрЛП(xmlЕдиницаИзмеренияЦены);
            //КонецЕсли;
            
            // Единицы измерения цены(опциональное поле)
            xmlОписаниеПродукта = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ItemDescription", Ложь);
            Если НЕ xmlОписаниеПродукта = Неопределено Тогда
                НоваяСтрокаТЧ.ОписаниеПродукта = СокрЛП(xmlОписаниеПродукта);
            КонецЕсли;
            
            НоваяСтрокаТЧ.КоличествоМест = НоваяСтрокаТЧ.Количество;
            НоваяСтрокаТЧ.Коэффициент = НоваяСтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
            
        КонецЦикла;
        
        СтруктураДокумента.Вставить("ДокументТЧ", ДокументТЧ);
    //Comarch    
    ИНАЧЕ  
        //Определяем реквизиты документа
        Узел = ПолучитьУзелДерева(Дерево.Строки, "Строка", "ORDER");
        Если НЕ Узел = Неопределено Тогда
            СтрокаДерева = Узел.Строки;
        Иначе
            Сообщить("Файл не является ORDER-файлом!", СтатусСообщения.Важное);
        КонецЕсли;
        
        // Название документа(для ORDER = 220)(обязательное поле)
        ТипДокумента = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DOCUMENTNAME", Истина);
        Если НЕ ТипДокумента = "220" Тогда
            Сообщить("Данные в файле не соотвествуют типу ""ORDER""", СтатусСообщения.Важное);
            Возврат 0;
        КонецЕсли; 
        
        // Номер заказа(обязательное поле)
        xmlНомерПокупателя = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "NUMBER", Истина);
        Если НЕ xmlНомерПокупателя = Неопределено Тогда
            СтруктураДокумента.Вставить("НомерПокупателя", СокрЛП(xmlНомерПокупателя));
        Иначе
            Возврат 0;
        КонецЕсли;
        
        //  Дата заказа(обязательное поле)
        xmlДатаЗаказа = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DATE", Истина);
        Если НЕ xmlДатаЗаказа = Неопределено Тогда
            СтруктураДокумента.Вставить("Дата", Дата(Прав(СокрЛП(xmlДатаЗаказа),2)+"."+Сред(СокрЛП(xmlДатаЗаказа),6,2)+"."+Лев(СокрЛП(xmlДатаЗаказа),4)+" 0:00:00"));
        Иначе
            Возврат 0;
        КонецЕсли;
        
        // Дата поставки(обязательное поле)
        xmlДатапоставки = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVERYDATE", Истина);
        Если НЕ xmlДатапоставки = Неопределено Тогда
            Датапоставки = Дата(Прав(СокрЛП(xmlДатапоставки),2)+"."+Сред(СокрЛП(xmlДатапоставки),6,2)+"."+Лев(СокрЛП(xmlДатапоставки),4)+" 0:00:00");
            СтруктураДокумента.Вставить("Датапоставки", Датапоставки);
        Иначе
            Возврат 0;
        КонецЕсли;
        
        
        // Время поставки(опциональное поле)
        xmlВремяпоставки = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVERYTIME", Ложь);
        Если НЕ xmlВремяпоставки = Неопределено Тогда
            СтруктураДокумента.Вставить("Времяпоставки", xmlВремяпоставки);//Лев(Формат(Датапоставки, "Л=; ДЛФ=T"), ?(Найти(Формат(Датапоставки, "Л=; ДЛФ=T"), Символ(58)) = 1, 4, 5)));
        КонецЕсли;
        
        // Обозначение промоакции или № поставщика(опциональное поле)
        xmlОбозначениеПромоакции = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "CAMPAIGNNUMBER", Ложь);
        Если НЕ xmlОбозначениеПромоакции = Неопределено Тогда
            СтруктураДокумента.Вставить("ОбозначениеПромоакции", СокрЛП(xmlОбозначениеПромоакции));
        КонецЕсли;
        
        // Валюта(UAH,RUB,USD,EUR,MDL,BYR)(опциональное поле)
        xmlВалюта = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "CURRENCY", Ложь);
        Если НЕ xmlВалюта = Неопределено Тогда
            СтруктураДокумента.Вставить("Валюта", ПолучитьВалюту(xmlВалюта));
        КонецЕсли;
        
        // Свободный текст(опциональное поле)
        xmlСвободныйТекст = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "INFO", Ложь);
        Если НЕ xmlСвободныйТекст = Неопределено Тогда
            СтруктураДокумента.Вставить("СвободныйТекст", СокрЛП(xmlСвободныйТекст));
        КонецЕсли;
        
        //HEAD
        Узел = ПолучитьУзелДерева(СтрокаДерева, "Строка", "HEAD");
        Если НЕ Узел = Неопределено Тогда
            СтрокаДерева = Узел.Строки;
        Иначе
            Возврат 0;
        КонецЕсли;
        
        
        // Поставщик(организация)(обязательное поле)
        xmlОрганизацияGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "SUPPLIER", Истина);
        Если НЕ xmlОрганизацияGLN = Неопределено Тогда
            Если  Метаданные.Справочники.Организации.Реквизиты.Найти("GLN") = Неопределено Тогда
                Сообщить("Отсутствует необходимый для загрузки данных реквизит <GLN> в справочнике <Организации>",СтатусСообщения.Важное);
                Возврат 0;
            КонецЕсли;
            
            ОрганизацияСсылка = Справочники.Организации.НайтиПоРеквизиту("GLN", xmlОрганизацияGLN);
            Если НЕ ОрганизацияСсылка.Пустая() Тогда
                СтруктураДокумента.Вставить("Организация", ОрганизацияСсылка);
            Иначе
                ОрганизацияСсылка = ПолучитьОрганизациюИзРегистраПодключения(xmlОрганизацияGLN);
                Если НЕ ОрганизацияСсылка.Пустая() Тогда
                    СтруктураДокумента.Вставить("Организация", ОрганизацияСсылка);
                Иначе
                    Сообщить("Не найдена организация с GLN " + xmlОрганизацияGLN + ". Возможно заказ нам не принадлежит! Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
                    Возврат 0;
                КонецЕсли;
            КонецЕсли;
        Иначе
            Возврат 0;
        КонецЕсли;
        
        // Покупатель(контрагент)(обязательное поле)
        xmlКонтрагентGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "BUYER", Истина);
        Если НЕ xmlКонтрагентGLN = Неопределено Тогда
            
            Если  Метаданные.Справочники.Контрагенты.Реквизиты.Найти("GLN") = Неопределено Тогда
                Сообщить("Отсутствует необходимый для загрузки данных реквизит <GLN> в справочнике <Контрагенты>", СтатусСообщения.Важное);
                Возврат 0;
            КонецЕсли;
            
            КонтрагентСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlКонтрагентGLN);
            Если НЕ КонтрагентСсылка.Пустая() Тогда
                СтруктураДокумента.Вставить("Контрагент", КонтрагентСсылка);
            Иначе
                Сообщить("Не найден контрагент с GLN " + xmlКонтрагентGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
                Возврат 0;
            КонецЕсли;
        Иначе
            Возврат 0;
        КонецЕсли;
        
        // Место доставки (для этого необходимо создать Справочник.ТочкиДоставки)(опциональное поле)
        xmlАдресДоставкиGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVERYPLACE", Ложь);
        Если НЕ xmlАдресДоставкиGLN = Неопределено Тогда
            Если ФлАдреса Тогда
                Если НЕ Справочники.ТипВсеСсылки().СодержитТип(Тип("СправочникСсылка.ТочкиДоставки")) Тогда
                    Сообщить("Отсутствует необязательный для загрузки данных справочник <Точки доставки>", СтатусСообщения.Важное);
                Иначе
                    Если  Метаданные.Справочники.ТочкиДоставки.Реквизиты.Найти("GLN") = Неопределено Тогда
                        Сообщить("Отсутствует необязательный для загрузки данных реквизит <GLN> в справочнике <Точки доставки>",СтатусСообщения.Важное);
                    КонецЕсли;
                КонецЕсли;
                ФлАдреса=Ложь;
            КонецЕсли;
            
            
            АдресДоставкиСсылка = ПолучитьАдресДоставки(xmlКонтрагентGLN, xmlАдресДоставкиGLN);
            
            Если НЕ АдресДоставкиСсылка.Пустая() Тогда
                СтруктураДокумента.Вставить("АдресДоставки", АдресДоставкиСсылка);
            Иначе
                Сообщить("Не найден адрес доставки с GLN " + xmlАдресДоставкиGLN + " для контрагента с GLN " + xmlКонтрагентGLN + ". Возможно заказ нам не принадлежит! Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
                Возврат 0;
            КонецЕсли;
        КонецЕсли;
        
        // Плательщик(опциональное поле)
        xmlПлательщикGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "INVOICEPARTNER", Ложь);
        Если НЕ xmlПлательщикGLN = Неопределено Тогда
            ПлательщикСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlПлательщикGLN);
            Если НЕ ПлательщикСсылка.Пустая() Тогда
                СтруктураДокумента.Вставить("Плательщик", ПлательщикСсылка);
            Иначе
                Сообщить("Не найден плательщик с GLN " + xmlПлательщикGLN + ".", СтатусСообщения.Важное);
                Возврат 0;
            КонецЕсли;
        КонецЕсли;
        
        
        // Отправитель(обязательное поле)
        xmlОтправительGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "SENDER", Истина);
        Если НЕ xmlОтправительGLN = Неопределено Тогда
            ОтправительСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlОтправительGLN);
            
            Если НЕ ОтправительСсылка.Пустая() Тогда
                СтруктураДокумента.Вставить("Отправитель", ОтправительСсылка);
            Иначе
                Сообщить("Не найден отправитель с GLN " + xmlОтправительGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
                Возврат 0;
            КонецЕсли;
        Иначе
            Возврат 0;
        КонецЕсли;
        
        // Получатель(обязательное поле)
        xmlПолучательGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "RECIPIENT", Истина);
        Если НЕ xmlПолучательGLN = Неопределено Тогда
            ПолучательСсылка = Справочники.Организации.НайтиПоРеквизиту("GLN", xmlПолучательGLN);
            
            Если НЕ ПолучательСсылка.Пустая() Тогда
                СтруктураДокумента.Вставить("Получатель", ПолучательСсылка);
            Иначе
                ОрганизацияСсылка = ПолучитьОрганизациюИзРегистраПодключения(xmlОрганизацияGLN);
                Если НЕ ОрганизацияСсылка.Пустая() Тогда
                    СтруктураДокумента.Вставить("Организация", ОрганизацияСсылка);
                Иначе
                    Сообщить("Не найден получатель с GLN " + xmlПолучательGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
                    Возврат 0;
                КонецЕсли;
            КонецЕсли;
        Иначе
            Возврат 0;
        КонецЕсли;
        
        // Номер транзакции
        xmlEDIINTERCHANGEID = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "EDIINTERCHANGEID", Ложь);
        Если НЕ xmlEDIINTERCHANGEID = Неопределено Тогда
            СтруктураДокумента.Вставить("EDIINTERCHANGEID", xmlEDIINTERCHANGEID);
        Иначе
            //Возврат 0;
        КонецЕсли;
        ТабличнаяЧасть = ПолучитьУзелДерева(СтрокаДерева, "Массив", "POSITION"); 
	
	// Создаем таблицуЗначений, в которую выгружаем табличную часть документа
	ДокументТЧ=Новый ТаблицаЗначений;
	ДокументТЧ.Колонки.Добавить("НомерСтрокиТЧ");
	ДокументТЧ.Колонки.Добавить("Номенклатура");
	ДокументТЧ.Колонки.Добавить("Количество");
	ДокументТЧ.Колонки.Добавить("КоличествоЗаказанное");
	ДокументТЧ.Колонки.Добавить("ШтрихКод");
	ДокументТЧ.Колонки.Добавить("АртикулПоставщика");
	ДокументТЧ.Колонки.Добавить("АртикулПокупателя");
	ДокументТЧ.Колонки.Добавить("ЕдиницаИзмерения");
	ДокументТЧ.Колонки.Добавить("ЕдиницаИзмеренияМест");
	ДокументТЧ.Колонки.Добавить("КоличествоВУпаковке");
	ДокументТЧ.Колонки.Добавить("Цена");
	ДокументТЧ.Колонки.Добавить("ЕдиницаИзмеренияЦены");
	ДокументТЧ.Колонки.Добавить("ОписаниеПродукта");
	ДокументТЧ.Колонки.Добавить("КоличествоМест");
	ДокументТЧ.Колонки.Добавить("Коэффициент");
	
	Для Каждого Узел ИЗ ТабличнаяЧасть Цикл
		
		СтрокаДерева = Узел.Строки;
		
		НоваяСтрокаТЧ = ДокументТЧ.Добавить();
		
		//Номер строки (этот параметр при создании заказа не используется, может быть проверочным)
		xmlНомерСтрокиТЧ = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "POSITIONNUMBER", Истина);
		Если НЕ xmlНомерСтрокиТЧ = Неопределено Тогда
			НоваяСтрокаТЧ.НомерСтрокиТЧ = xmlНомерСтрокиТЧ;
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// Определяем аттрибуты номенклатуры:
		// Штрих - код номенклатуры
		xmlШтрихКодНоменклатуры = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCT", Истина);
		Если НЕ xmlШтрихКодНоменклатуры = Неопределено Тогда
			НоваяСтрокаТЧ.ШтрихКод = xmlШтрихКодНоменклатуры;
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// Артикул поставщика(опциональное поле)
		xmlАртикулПоставщикаСтрока = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCTIDSUPPLIER", Ложь);
		
		// Артикул покупателя(опциональное поле)
		xmlАртикулПокупателяСтрока = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCTIDBUYER", Ложь);
		
		// Приоритетным является PRODUCTIDBUYER, если параметр присутствует, то используем его
		Если НЕ xmlАртикулПокупателяСтрока = Неопределено Тогда
			АртикулПокупателя = xmlАртикулПокупателяСтрока;
			СтруктураНоменклатуры=ПолучитьНоменклатуру(СтруктураДокумента.Контрагент,АртикулПокупателя, "");
			НоваяСтрокаТЧ.Номенклатура=СтруктураНоменклатуры.Номенклатура;
			//Единица измерения (определяем из регистра сведений НоменклатураКонтрагентов)
			НоваяСтрокаТЧ.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаИзмерения;
			НоваяСтрокаТЧ.АртикулПокупателя=АртикулПокупателя;
		КонецЕсли;
		
		// Если параметр PRODUCTIDBUYER отсутствует или по артикулу покупателя не удалось найти номенклатуру
		Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.Номенклатура)  Тогда
			СтруктураНоменклатуры=ПолучитьНоменклатуру(СтруктураДокумента.Контрагент, "", xmlШтрихКодНоменклатуры);
			НоваяСтрокаТЧ.Номенклатура=СтруктураНоменклатуры.Номенклатура;
			//Единица измерения (определяем из регистра сведений НоменклатураКонтрагентов)
			НоваяСтрокаТЧ.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаИзмерения;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.Номенклатура) Тогда
			Сообщить("Не найдена позиция номенклатуры (" + ?(Не ЗначениеЗаполнено(АртикулПокупателя), "штрих-код " + xmlШтрихКодНоменклатуры, "артикул " + АртикулПокупателя) + ") в строке " + xmlНомерСтрокиТЧ,СтатусСообщения.ОченьВажное);
			//Возврат 0;
		КонецЕсли;
		
		НоваяСтрокаТЧ.ЕдиницаИзмеренияМест = НоваяСтрокаТЧ.ЕдиницаИзмерения;
		// Количество(обязательное поле)
		xmlКоличество = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDEREDQUANTITY", Истина);
		Если НЕ xmlКоличество = Неопределено Тогда
			НоваяСтрокаТЧ.Количество = Число(xmlКоличество);
			НоваяСтрокаТЧ.КоличествоЗаказанное = Число(xmlКоличество);
		Иначе
			Возврат 0;
		КонецЕсли;
		// Единицы измерения количества(опциональное поле)
		//xmlЕдиницаИзмерения = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDEREDUNIT", Ложь);
		//Если НЕ xmlЕдиницаИзмерения = Неопределено Тогда
		//	НоваяСтрокаТЧ.ЕдиницаИзмерения = СокрЛП(xmlЕдиницаИзмерения);
		//КонецЕсли;
		
		// Количество в упаковке(опциональное поле)
		xmlКоличествоВУпаковке = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "QUANTITYOFCUINTU", Ложь);
		Если НЕ xmlКоличествоВУпаковке = Неопределено Тогда
			Если xmlКоличествоВУпаковке = "NaN" Тогда
				xmlКоличествоВУпаковке = "0";
			Иначе
				НоваяСтрокаТЧ.КоличествоВУпаковке = Число(xmlКоличествоВУпаковке);	
			КонецЕсли; 
			
		КонецЕсли;
		
		// Цена продукта без НДС(опциональное поле)
		xmlЦенаБезНДС = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDERPRICE", Ложь);
		Если НЕ xmlЦенаБезНДС = Неопределено Тогда
			НоваяСтрокаТЧ.Цена = Число(xmlЦенаБезНДС);
		КонецЕсли;
		
		// Единицы измерения цены(опциональное поле)
		xmlЕдиницаИзмеренияЦены = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDERPRICEUNIT", Ложь);
		Если НЕ xmlЕдиницаИзмеренияЦены = Неопределено Тогда
			НоваяСтрокаТЧ.ЕдиницаИзмеренияЦены = СокрЛП(xmlЕдиницаИзмеренияЦены);
		КонецЕсли;
		
		// Единицы измерения цены(опциональное поле)
		xmlОписаниеПродукта = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DESCRIPTION", Ложь);
		Если НЕ xmlОписаниеПродукта = Неопределено Тогда
			НоваяСтрокаТЧ.ОписаниеПродукта = СокрЛП(xmlОписаниеПродукта);
		КонецЕсли;
		
		НоваяСтрокаТЧ.КоличествоМест = НоваяСтрокаТЧ.Количество;
		НоваяСтрокаТЧ.Коэффициент = НоваяСтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
		
	КонецЦикла;
	
	СтруктураДокумента.Вставить("ДокументТЧ", ДокументТЧ);
   КонецЕсли;     
	
	// Табличная часть
	
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ПолучитьОрганизациюИзРегистраПодключения(Знач xmlОрганизацияGLN)
    
    Перем Запрос, ОрганизацияСсылка, РезультатЗапроса;
    
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
    |	ПодключениеEDI.Организация
    |ИЗ
    |	РегистрСведений.ПодключениеEDI КАК ПодключениеEDI
    |ГДЕ
    |	ПодключениеEDI.GLN = &GLN";
    Запрос.УстановитьПараметр("GLN", xmlОрганизацияGLN);
    РезультатЗапроса = Запрос.Выполнить().Выбрать();
    Если РезультатЗапроса.Следующий() Тогда
        ОрганизацияСсылка = РезультатЗапроса.Организация;	
    КонецЕсли;
    Возврат ОрганизацияСсылка;

КонецФункции

// Функция предназначена для создания структуры образа документа для экспорта 
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
// Структура образа документа.
//
Функция ПолучитьСтруктуруДокумента_ORDRSP(Дерево)
	
	СтруктураДокумента = Новый Структура;
	
	Узел = ПолучитьУзелДерева(Дерево.Строки, "Строка", "ORDRSP");
	
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Сообщить("Файл не является ORDRSP-файлом!", СтатусСообщения.Важное);
		Возврат 0;
	КонецЕсли;
	
	
	// Номер документа(обязательное поле)
	xmlНомерДокумента = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "NUMBER", Истина);
	Если НЕ xmlНомерДокумента = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерДокумента", СокрЛП(xmlНомерДокумента));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Дата документа(обязательное поле)
	xmlДатаДокумента = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DATE", Истина);
	Если НЕ xmlДатаДокумента = Неопределено Тогда
		СтруктураДокумента.Вставить("ДатаДокумента", Дата(Прав(СокрЛП(xmlДатаДокумента),2)+"."+Сред(СокрЛП(xmlДатаДокумента),6,2)+"."+Лев(СокрЛП(xmlДатаДокумента),4)+" 0:00:00"));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Время создания документа(опциональное поле)
	xmlВремяСозданияДокумента = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "TIME", Ложь);
	Если НЕ xmlВремяСозданияДокумента = Неопределено Тогда
		СтруктураДокумента.Вставить("ВремяСозданияДокумента", СокрЛП(xmlВремяСозданияДокумента));
	Иначе
		//Возврат 0;
	КонецЕсли;
	
	// Номер заказа(обязательное поле)
	xmlНомерЗаказа = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDERNUMBER", Истина);
	Если НЕ xmlНомерЗаказа = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерЗаказа", СокрЛП(xmlНомерЗаказа));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Дата заказа(обязательное поле)
	xmlДатаЗаказа = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDERDATE", Истина);
	Если НЕ xmlДатаЗаказа = Неопределено Тогда
		ДатаЗаказа = Дата(Прав(СокрЛП(xmlДатаЗаказа),2)+"."+Сред(СокрЛП(xmlДатаЗаказа),6,2)+"."+Лев(СокрЛП(xmlДатаЗаказа),4)+" 0:00:00");
		СтруктураДокумента.Вставить("ДатаЗаказа", ДатаЗаказа);
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Сообщить("Обрабатывается подтверждение заказа № " + СокрЛП(xmlНомерЗаказа) + " от " + Формат(ДатаЗаказа, "ДФ=dd.MM.yyyy"), СтатусСообщения.Информация);
	
	// Валюта(обязательное поле)
	xmlВалюта = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "CURRENCY", Истина);
	Если НЕ xmlВалюта = Неопределено Тогда
		СтруктураДокумента.Вставить("Валюта", ПолучитьВалюту(xmlВалюта));
	Иначе
		//Возврат 0;
	КонецЕсли;
	
	// Ставка НДС(%)(опциональное поле)
	xmlСтавкаНДС = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "VAT", Ложь);
	Если НЕ xmlСтавкаНДС = Неопределено Тогда
		СтруктураДокумента.Вставить("СтавкаНДС", Число(xmlСтавкаНДС));
	КонецЕсли;
	
	//HEAD
	
	Узел = ПолучитьУзелДерева(СтрокаДерева, "Строка", "HEAD");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Поставщик(организация)(обязательное поле)
	xmlОрганизацияGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "BUYER", Истина);
	Если НЕ xmlОрганизацияGLN = Неопределено Тогда
		Если  Метаданные.Справочники.Организации.Реквизиты.Найти("GLN") = Неопределено Тогда
			Сообщить("Отсутствует необходимый для загрузки данных реквизит <GLN> в справочнике <Организации>",СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
		
		ОрганизацияСсылка = Справочники.Организации.НайтиПоРеквизиту("GLN", xmlОрганизацияGLN);
		Если НЕ ОрганизацияСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Организация", ОрганизацияСсылка);
		Иначе
			Сообщить("Не найдена организация с GLN " + xmlОрганизацияGLN + ". Возможно заказ нам не принадлежит! Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Покупатель(контрагент)(обязательное поле)
	xmlКонтрагентGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "SUPPLIER", Истина);
	Если НЕ xmlКонтрагентGLN = Неопределено Тогда
		Если  Метаданные.Справочники.Контрагенты.Реквизиты.Найти("GLN") = Неопределено Тогда
			Сообщить("Отсутствует необходимый для загрузки данных реквизит <GLN> в справочнике <Контрагенты>", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
		
		КонтрагентСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlКонтрагентGLN);
		Если НЕ КонтрагентСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Контрагент", КонтрагентСсылка);
		Иначе
			Сообщить("Не найден контрагент с GLN " + xmlКонтрагентGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Место доставки (для этого необходимо создать Справочник.ТочкиДоставки)(опциональное поле)
	xmlАдресДоставкиGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVERYPLACE", Ложь);
	Если НЕ xmlАдресДоставкиGLN = Неопределено Тогда
		Если ФлАдреса Тогда
			Если НЕ Справочники.ТипВсеСсылки().СодержитТип(Тип("СправочникСсылка.ТочкиДоставки")) Тогда
				Сообщить("Отсутствует необязательный для загрузки данных справочник <Точки доставки>", СтатусСообщения.Важное);
			Иначе
				Если  Метаданные.Справочники.ТочкиДоставки.Реквизиты.Найти("GLN") = Неопределено Тогда
					Сообщить("Отсутствует необязательный для загрузки данных реквизит <GLN> в справочнике <Точки доставки>",СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
			ФлАдреса=Ложь;
		КонецЕсли;
		
		
		АдресДоставкиСсылка = ПолучитьАдресДоставки(xmlКонтрагентGLN, xmlАдресДоставкиGLN);
		
		Если НЕ АдресДоставкиСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("АдресДоставки", АдресДоставкиСсылка);
		Иначе
			Сообщить("Не найден адрес доставки с GLN " + xmlАдресДоставкиGLN + " для контрагента с GLN " + xmlКонтрагентGLN + ". Возможно заказ нам не принадлежит! Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Плательщик(контрагент)(опциональное поле)
	xmlПлательщикGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "BUYER", Ложь);
	Если НЕ xmlПлательщикGLN = Неопределено Тогда
		Если  Метаданные.Справочники.Контрагенты.Реквизиты.Найти("GLN") = Неопределено Тогда
			Сообщить("Отсутствует необходимый для загрузки данных реквизит <GLN> в справочнике <Контрагенты>", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
		
		ПлательщикGLNСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlПлательщикGLN);
		Если НЕ ПлательщикGLNСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Плательщик", ПлательщикGLNСсылка);
		Иначе
			Сообщить("Не найден контрагент с GLN " + xmlПлательщикGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Отправитель(обязательное поле)
	xmlОтправительGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "SENDER", Истина);
	Если НЕ xmlОтправительGLN = Неопределено Тогда
		ОтправительСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlОтправительGLN);
		
		Если НЕ ОтправительСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Отправитель", ОтправительСсылка);
		Иначе
			Сообщить("Не найден отправитель с GLN " + xmlОтправительGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Получатель(обязательное поле)
	xmlПолучательGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "RECIPIENT", Истина);
	Если НЕ xmlПолучательGLN = Неопределено Тогда
		ПолучательСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlПолучательGLN);
		
		Если НЕ ПолучательСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Получатель", ОтправительСсылка);
		Иначе
			Сообщить("Не найден получатель с GLN " + xmlПолучательGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Номер транзакции
	xmlEDIINTERCHANGEID = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "EDIINTERCHANGEID", Истина);
	Если НЕ xmlEDIINTERCHANGEID = Неопределено Тогда
		СтруктураДокумента.Вставить("EDIINTERCHANGEID", xmlEDIINTERCHANGEID);
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Табличная часть
	ТабличнаяЧасть = ПолучитьУзелДерева(СтрокаДерева, "Массив", "POSITION");
	Если ТабличнаяЧасть = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	// Создаем таблицуЗначений, в которую выгружаем табличную часть документа
	ДокументТЧ=Новый ТаблицаЗначений;
	ДокументТЧ.Колонки.Добавить("НомерСтрокиТЧ");
	ДокументТЧ.Колонки.Добавить("Номенклатура");
	ДокументТЧ.Колонки.Добавить("КоличествоЗаказанное");
	ДокументТЧ.Колонки.Добавить("КоличествоИмеющееся");
	ДокументТЧ.Колонки.Добавить("КоличествоМест");
	ДокументТЧ.Колонки.Добавить("ШтрихКод");
	ДокументТЧ.Колонки.Добавить("АртикулПоставщика");
	ДокументТЧ.Колонки.Добавить("АртикулПокупателя");
	ДокументТЧ.Колонки.Добавить("ЕдиницаИзмерения");
	ДокументТЧ.Колонки.Добавить("ЕдиницаИзмеренияМест");
	ДокументТЧ.Колонки.Добавить("ОписаниеПродукта");
	ДокументТЧ.Колонки.Добавить("ЦенаБезНДС");
	ДокументТЧ.Колонки.Добавить("СтавкаНДС");
	ДокументТЧ.Колонки.Добавить("УточнениеОПоставке");
	ДокументТЧ.Колонки.Добавить("ПричинаОтказаВПоставке");
	
	Для Каждого Узел ИЗ ТабличнаяЧасть Цикл
		
		СтрокаДерева = Узел.Строки;
		
		НоваяСтрокаТЧ = ДокументТЧ.Добавить();
		
		//Номер строки (этот параметр при создании заказа не используется, может быть проверочным)
		xmlНомерСтрокиТЧ = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "POSITIONNUMBER", Истина);
		Если НЕ xmlНомерСтрокиТЧ = Неопределено Тогда
			НоваяСтрокаТЧ.НомерСтрокиТЧ = Число(xmlНомерСтрокиТЧ);
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// Определяем аттрибуты номенклатуры:
		// Штрих - код номенклатуры
		xmlШтрихКодНоменклатуры = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCT", Истина);
		Если НЕ xmlШтрихКодНоменклатуры = Неопределено Тогда
			НоваяСтрокаТЧ.ШтрихКод = xmlШтрихКодНоменклатуры;
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// Артикул поставщика(опциональное поле)
		xmlАртикулПоставщикаСтрока = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCTIDSUPPLIER", Ложь);
		
		// Артикул покупателя(опциональное поле)
		xmlАртикулПокупателяСтрока = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCTIDBUYER", Ложь);
		
		// Приоритетным является PRODUCTIDBUYER, если параметр присутствует, то используем его
		Если НЕ xmlАртикулПокупателяСтрока = Неопределено Тогда
			АртикулПокупателя = xmlАртикулПокупателяСтрока;
			СтруктураНоменклатуры=ПолучитьНоменклатуру(СтруктураДокумента.Контрагент,АртикулПокупателя, "");
			НоваяСтрокаТЧ.Номенклатура=СтруктураНоменклатуры.Номенклатура;
			//Единица измерения (определяем из регистра сведений НоменклатураКонтрагентов)
			НоваяСтрокаТЧ.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаИзмерения;
			НоваяСтрокаТЧ.АртикулПокупателя=АртикулПокупателя;
		КонецЕсли;
		
		// Если параметр PRODUCTIDBUYER отсутствует или по артикулу покупателя не удалось найти номенклатуру
		Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.Номенклатура)  Тогда         
			СтруктураНоменклатуры=ПолучитьНоменклатуру(СтруктураДокумента.Контрагент, "", xmlШтрихКодНоменклатуры);
			НоваяСтрокаТЧ.Номенклатура=СтруктураНоменклатуры.Номенклатура;
			//Единица измерения (определяем из регистра сведений НоменклатураКонтрагентов)
			НоваяСтрокаТЧ.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаИзмерения;
			
		КонецЕсли;
		НоваяСтрокаТЧ.ЕдиницаИзмеренияМест = НоваяСтрокаТЧ.ЕдиницаИзмерения;
		
		// Описание продукта(опциональное поле)
		xmlОписаниеПродукта = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DESCRIPTION", Ложь);
		Если НЕ xmlОписаниеПродукта = Неопределено Тогда
			НоваяСтрокаТЧ.ОписаниеПродукта = СокрЛП(xmlОписаниеПродукта);
		КонецЕсли;
		
		// Цена продукта(опциональное поле)
		xmlЦенаБезНДС = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRICE", Ложь);
		Если НЕ xmlЦенаБезНДС = Неопределено Тогда
			НоваяСтрокаТЧ.ЦенаБезНДС = Число(xmlЦенаБезНДС);
		КонецЕсли;
		// Ставка НДС(опциональное поле)
		xmlСтавкаНДС = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "VAT", Ложь);
		
		Если Не xmlСтавкаНДС = Неопределено Тогда
			НоваяСтрокаТЧ.СтавкаНДС = Число(xmlСтавкаНДС);
		КонецЕсли;
		
		// Уточнение о поставке(1=товар будет поставлен без изменений, 2 = изменение заказанного количества, 3 = отказано в поставке)(обязательное поле)
		xmlУточнениеОПоставке = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCTTYPE", Истина);
		Если НЕ xmlУточнениеОПоставке = Неопределено Тогда
			НоваяСтрокаТЧ.УточнениеОПоставке = Число(xmlУточнениеОПоставке);
		Иначе
			Возврат 0;
		КонецЕсли;
		Если Число(xmlУточнениеОПоставке) = 1 Тогда
			//
		ИначеЕсли Число(xmlУточнениеОПоставке) = 2 Тогда
			
		// Заказанное количество(обязательное поле)
		xmlКоличествоЗаказанное = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDEREDQUANTITY", Истина);
		Если НЕ xmlКоличествоЗаказанное = Неопределено Тогда
			НоваяСтрокаТЧ.КоличествоЗаказанное = Число(xmlКоличествоЗаказанное);
		Иначе
			Возврат 0;
		КонецЕсли;
			// Имеющееся количество (обязательное поле)
			xmlКоличествоИмеющееся = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ACCEPTEDQUANTITY", Истина);
			Если НЕ xmlКоличествоИмеющееся = Неопределено Тогда
				НоваяСтрокаТЧ.КоличествоИмеющееся = Число(xmlКоличествоИмеющееся);
			Иначе
				Возврат 0;
			КонецЕсли;
			НоваяСтрокаТЧ.КоличествоМест = Число(xmlКоличествоИмеющееся);
			
		ИначеЕсли Число(xmlУточнениеОПоставке) = 3 Тогда
			
			// Причина отказа в поставке (обязательное поле)
			xmlПричинаОтказаВПоставке = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "INFO", Ложь);
			Если Не xmlПричинаОтказаВПоставке = Неопределено Тогда
				НоваяСтрокаТЧ.ПричинаОтказаВПоставке = СокрЛП(xmlПричинаОтказаВПоставке);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДокумента.Вставить("ДокументТЧ",ДокументТЧ);
	
	Возврат СтруктураДокумента;
	
КонецФункции


// Функция предназначена для создания структуры образа документа для экспорта 
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
// Структура образа документа.
//
Функция ПолучитьСтруктуруДокумента_RECADV(Дерево)
	
	СтруктураДокумента = Новый Структура;
	
	//Определяем реквизиты документа
	Узел = ПолучитьУзелДерева(Дерево.Строки, "Строка", "RECADV");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Сообщить("Файл не является RECADV-файлом!", СтатусСообщения.Важное);
		Возврат 0;
	КонецЕсли;
	
	// Номер заказа(обязательное поле)
	xmlНомерЗаказа = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "NUMBER", Истина);
	Если НЕ xmlНомерЗаказа = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерДокумента", СокрЛП(xmlНомерЗаказа));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	//  Дата заказа(обязательное поле)
	xmlДатаЗаказа = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DATE", Истина);
	Если НЕ xmlДатаЗаказа = Неопределено Тогда
		СтруктураДокумента.Вставить("ДатаДокумента", Дата(Прав(СокрЛП(xmlДатаЗаказа),2)+"."+Сред(СокрЛП(xmlДатаЗаказа),6,2)+"."+Лев(СокрЛП(xmlДатаЗаказа),4)+" 0:00:00"));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Дата приема(обязательное поле)
	xmlДатаПриема = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "RECEPTIONDATE", Истина);
	Если НЕ xmlДатаПриема = Неопределено Тогда
		ДатаПриема = Дата(Прав(СокрЛП(xmlДатаПриема),2)+"."+Сред(СокрЛП(xmlДатаПриема),6,2)+"."+Лев(СокрЛП(xmlДатаПриема),4)+" 0:00:00");
		СтруктураДокумента.Вставить("ДатаПоставки", ДатаПриема);
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Номер заказа(опциональное поле)
	xmlНомерЗаказа = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDERNUMBER", Ложь);
	Если НЕ xmlНомерЗаказа = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерЗаказа", СокрЛП(xmlНомерЗаказа));
	КонецЕсли;
	
	// Дата заказа(опциональное поле)
	xmlДатаЗаказа = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDERDATE", Ложь);
	Если НЕ xmlДатаЗаказа = Неопределено Тогда
		ДатаЗаказа = СокрЛП(xmlДатаЗаказа);
		ДатаЗаказа = Дата(Прав(ДатаЗаказа,2)+"."+Сред(ДатаЗаказа,6,2)+"."+Лев(ДатаЗаказа,4)+" 0:00:00");
		СтруктураДокумента.Вставить("ДатаЗаказа", ДатаЗаказа);
	КонецЕсли;
	
	// Номер ув. об отгрузке(обязательное поле)
	xmlНомерУведомленияОбОтгрузке = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DESADVNUMBER", Истина);
	Если НЕ xmlНомерУведомленияОбОтгрузке = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерУведомленияОбОтгрузке", СокрЛП(xmlНомерУведомленияОбОтгрузке));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Дата ув. об отгрузке(опциональное поле)
	xmlДатаУведомленияОбОтгрузке = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DESADVDATE", Ложь);
	Если НЕ xmlДатаУведомленияОбОтгрузке = Неопределено Тогда
		ДатаУведомленияОбОтгрузке = СокрЛП(xmlДатаУведомленияОбОтгрузке);
		ДатаУведомленияОбОтгрузке = Дата(Прав(ДатаУведомленияОбОтгрузке,2)+"."+Сред(ДатаУведомленияОбОтгрузке,6,2)+"."+Лев(ДатаУведомленияОбОтгрузке,4)+" 0:00:00");
		СтруктураДокумента.Вставить("ДатаУведомленияОбОтгрузке", ДатаУведомленияОбОтгрузке);
	КонецЕсли;
	
	// Номер накладной(опциональное поле)
	xmlНомерНакладной = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVERYNOTENUMBER", Ложь);
	Если НЕ xmlНомерНакладной = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерНакладной", СокрЛП(xmlНомерНакладной));
	КонецЕсли;
	
	//HEAD
	
	Узел = ПолучитьУзелДерева(СтрокаДерева, "Строка", "HEAD");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Поставщик(организация)(обязательное поле)
	xmlОрганизацияGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "SUPPLIER", Истина);
	Если НЕ xmlОрганизацияGLN = Неопределено Тогда
		Если  Метаданные.Справочники.Организации.Реквизиты.Найти("GLN") = Неопределено Тогда
			Сообщить("Отсутствует необходимый для загрузки данных реквизит <GLN> в справочнике <Организации>",СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
		
		ОрганизацияСсылка = Справочники.Организации.НайтиПоРеквизиту("GLN", xmlОрганизацияGLN);
		Если НЕ ОрганизацияСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Организация", ОрганизацияСсылка);
		Иначе
			Сообщить("Не найдена организация с GLN " + xmlОрганизацияGLN + ". Возможно заказ нам не принадлежит! Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	
	// Покупатель(контрагент)(обязательное поле)
	xmlКонтрагентGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "BUYER", Истина);
	Если НЕ xmlКонтрагентGLN = Неопределено Тогда
		Если  Метаданные.Справочники.Контрагенты.Реквизиты.Найти("GLN") = Неопределено Тогда
			Сообщить("Отсутствует необходимый для загрузки данных реквизит <GLN> в справочнике <Контрагенты>", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
		
		КонтрагентСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlКонтрагентGLN);
		Если НЕ КонтрагентСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Контрагент", КонтрагентСсылка);
		Иначе
			Сообщить("Не найден контрагент с GLN " + xmlКонтрагентGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Место доставки (для этого необходимо создать Справочник.ТочкиДоставки)(опциональное поле)
	xmlАдресДоставкиGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVERYPLACE", Ложь);
	Если НЕ xmlАдресДоставкиGLN = Неопределено Тогда
		Если ФлАдреса Тогда
			Если НЕ Справочники.ТипВсеСсылки().СодержитТип(Тип("СправочникСсылка.ТочкиДоставки")) Тогда
				Сообщить("Отсутствует необязательный для загрузки данных справочник <Точки доставки>", СтатусСообщения.Важное);
			Иначе
				Если  Метаданные.Справочники.ТочкиДоставки.Реквизиты.Найти("GLN") = Неопределено Тогда
					Сообщить("Отсутствует необязательный для загрузки данных реквизит <GLN> в справочнике <Точки доставки>",СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
			ФлАдреса=Ложь;
		КонецЕсли;
		
		АдресДоставкиСсылка = ПолучитьАдресДоставки(xmlКонтрагентGLN, xmlАдресДоставкиGLN);
		
		Если НЕ АдресДоставкиСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("АдресДоставки", АдресДоставкиСсылка);
		Иначе
			Сообщить("Не найден адрес доставки с GLN " + xmlАдресДоставкиGLN + " для контрагента с GLN " + xmlКонтрагентGLN + ". Возможно заказ нам не принадлежит! Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Плательщик(опциональное поле)
	xmlПлательщикGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "INVOICEPARTNER", Ложь);
	Если НЕ xmlПлательщикGLN = Неопределено Тогда
		ПлательщикСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlПлательщикGLN);
		Если НЕ ПлательщикСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Плательщик", ПлательщикСсылка);
		Иначе
			Сообщить("Не найден плательщик с GLN " + xmlПлательщикGLN + ".", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Отправитель(обязательное поле)
	xmlОтправительGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "SENDER", Истина);
	Если НЕ xmlОтправительGLN = Неопределено Тогда
		ОтправительСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlОтправительGLN);
		
		Если НЕ ОтправительСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Отправитель", ОтправительСсылка);
		Иначе
			Сообщить("Не найден отправитель с GLN " + xmlОтправительGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Получатель(обязательное поле)
	xmlПолучательGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "RECIPIENT", Истина);
	Если НЕ xmlПолучательGLN = Неопределено Тогда
		ПолучательСсылка = Справочники.Организации.НайтиПоРеквизиту("GLN", xmlПолучательGLN);
		
		Если НЕ ПолучательСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Получатель", ПолучательСсылка);
		Иначе
			Сообщить("Не найден получатель с GLN " + xmlПолучательGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Номер транзакции
	xmlEDIINTERCHANGEID = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "EDIINTERCHANGEID", Истина);
	Если НЕ xmlEDIINTERCHANGEID = Неопределено Тогда
		СтруктураДокумента.Вставить("EDIINTERCHANGEID", xmlEDIINTERCHANGEID);
	Иначе
		Возврат 0;
	КонецЕсли;
	Узел = ПолучитьУзелДерева(СтрокаДерева, "Строка", "PACKINGSEQUENCE");
	Если Узел = Неопределено Тогда
		Возврат 0;
	Иначе
		СтрокаДерева = Узел.Строки;
	КонецЕсли;
	// Табличная часть
	ТабличнаяЧасть = ПолучитьУзелДерева(СтрокаДерева, "Массив", "POSITION");
	Если ТабличнаяЧасть = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	// Создаем таблицуЗначений, в которую выгружаем табличную часть документа
	ДокументТЧ=Новый ТаблицаЗначений;
	ДокументТЧ.Колонки.Добавить("НомерСтрокиТЧ");
	ДокументТЧ.Колонки.Добавить("Номенклатура");
	ДокументТЧ.Колонки.Добавить("ШтрихКод");
	ДокументТЧ.Колонки.Добавить("АртикулПоставщика");
	ДокументТЧ.Колонки.Добавить("АртикулПокупателя");
	ДокументТЧ.Колонки.Добавить("КоличествоПринятое");
	ДокументТЧ.Колонки.Добавить("КоличествоПоставляемое");
	ДокументТЧ.Колонки.Добавить("КоличествоЗаказанное");
	
	Для Каждого Узел ИЗ ТабличнаяЧасть Цикл
		
		СтрокаДерева = Узел.Строки;
		
		
		НоваяСтрокаТЧ = ДокументТЧ.Добавить();
		
		//Номер строки (этот параметр при создании заказа не используется, может быть проверочным)
		xmlНомерСтрокиТЧ = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "POSITIONNUMBER", Истина);
		Если НЕ xmlНомерСтрокиТЧ = Неопределено Тогда
			НоваяСтрокаТЧ.НомерСтрокиТЧ = xmlНомерСтрокиТЧ;
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// Определяем аттрибуты номенклатуры:
		// Штрих - код номенклатуры
		xmlШтрихКодНоменклатуры = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCT", Истина);
		Если НЕ xmlШтрихКодНоменклатуры = Неопределено Тогда
			НоваяСтрокаТЧ.ШтрихКод = xmlШтрихКодНоменклатуры;
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// Артикул поставщика(опциональное поле)
		xmlАртикулПоставщикаСтрока = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCTIDSUPPLIER", Ложь);
		
		// Артикул покупателя(опциональное поле)
		xmlАртикулПокупателяСтрока = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCTIDBUYER", Ложь);
		
		// Приоритетным является PRODUCTIDBUYER, если параметр присутствует, то используем его
		Если НЕ xmlАртикулПокупателяСтрока = Неопределено Тогда
			АртикулПокупателя = xmlАртикулПокупателяСтрока;
			СтруктураНоменклатуры = ПолучитьНоменклатуру(СтруктураДокумента.Контрагент, АртикулПокупателя, "");
			НоваяСтрокаТЧ.Номенклатура = СтруктураНоменклатуры.Номенклатура;
			НоваяСтрокаТЧ.АртикулПокупателя = АртикулПокупателя;
		КонецЕсли;
		
		// Если параметр PRODUCTIDBUYER отсутствует или по артикулу покупателя не удалось найти номенклатуру
		Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.Номенклатура)  Тогда
			СтруктураНоменклатуры = ПолучитьНоменклатуру(СтруктураДокумента.Контрагент, "", xmlШтрихКодНоменклатуры);
			НоваяСтрокаТЧ.Номенклатура = СтруктураНоменклатуры.Номенклатура;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.Номенклатура) Тогда
			Сообщить("Не найдена позиция номенклатуры (" + ?(Не ЗначениеЗаполнено(АртикулПокупателя), "штрих-код " + xmlШтрихКодНоменклатуры, "артикул " + АртикулПокупателя) + ") в строке " + xmlНомерСтрокиТЧ,СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
		
		// Принятое количество(обязательное поле)
		xmlКоличествоПринятое = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ACCEPTEDQUANTITY", Истина);
		Если НЕ xmlКоличествоПринятое = Неопределено Тогда
			НоваяСтрокаТЧ.КоличествоПринятое = Число(xmlКоличествоПринятое);
		Иначе
			Возврат 0;
		КонецЕсли;
		// Поставляемое количество(опциональное поле)
		xmlКоличествоПоставляемое = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVERQUANTITY", Ложь);
		Если НЕ xmlКоличествоПоставляемое = Неопределено Тогда
			xmlКоличествоПоставляемое = xmlКоличествоПоставляемое;
			НоваяСтрокаТЧ.КоличествоПоставляемое = Число(xmlКоличествоПоставляемое);
		КонецЕсли;
		
		//  Заказанное количество(опциональное поле)
		xmlКоличествоЗаказанное = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDERQUANTITY", Ложь);
		Если НЕ xmlКоличествоЗаказанное = Неопределено Тогда
			xmlКоличествоЗаказанное = xmlКоличествоЗаказанное;
			НоваяСтрокаТЧ.КоличествоЗаказанное = Число(xmlКоличествоЗаказанное);
		КонецЕсли;
		
		
	КонецЦикла;
	
	СтруктураДокумента.Вставить("ДокументТЧ", ДокументТЧ);
	
	Возврат СтруктураДокумента;
	
КонецФункции


// Функция предназначена для создания структуры образа документа для экспорта 
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
// Структура образа документа.
//
Функция ПолучитьСтруктуруДокумента_DESADV(Дерево)
	
	СтруктураДокумента = Новый Структура;
	
	//Определяем реквизиты документа
	Узел = ПолучитьУзелДерева(Дерево.Строки, "Строка", "DESADV");
	
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Сообщить("Файл не является DESADV-файлом!", СтатусСообщения.Важное);
		Возврат 0;
	КонецЕсли;
	
	// Номер ув. об отгрузке(обязательное поле)
	xmlНомерДокумента = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "NUMBER", Истина);
	Если НЕ xmlНомерДокумента = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерДокумента", СокрЛП(xmlНомерДокумента));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	//  Дата ув. об отгрузке(обязательное поле)
	xmlДатаДокумента = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DATE", Истина);
	Если НЕ xmlДатаДокумента = Неопределено Тогда
		СтруктураДокумента.Вставить("ДатаДокумента", Дата(Прав(СокрЛП(xmlДатаДокумента),2)+"."+Сред(СокрЛП(xmlДатаДокумента),6,2)+"."+Лев(СокрЛП(xmlДатаДокумента),4)+" 0:00:00"));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Дата поставки(обязательное поле)
	xmlДатапоставки = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVERYDATE", Истина);
	Если НЕ xmlДатапоставки = Неопределено Тогда
		Датапоставки = Дата(Прав(СокрЛП(xmlДатапоставки),2)+"."+Сред(СокрЛП(xmlДатапоставки),6,2)+"."+Лев(СокрЛП(xmlДатапоставки),4)+" 0:00:00");
		СтруктураДокумента.Вставить("Датапоставки", Датапоставки);
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Номер заказа(обязательное поле)
	xmlНомерЗаказа = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDERNUMBER", Истина);
	Если НЕ xmlНомерЗаказа = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерЗаказа", СокрЛП(xmlНомерЗаказа));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	//  Дата заказа(обязательное поле)
	xmlДатаЗаказа = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDERDATE", Истина);
	Если НЕ xmlДатаЗаказа = Неопределено Тогда
		СтруктураДокумента.Вставить("ДатаЗаказа", Дата(Прав(СокрЛП(xmlДатаЗаказа),2)+"."+Сред(СокрЛП(xmlДатаЗаказа),6,2)+"."+Лев(СокрЛП(xmlДатаЗаказа),4)+" 0:00:00"));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Номер накладной(обязательное поле)
	xmlНомерНакладной = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVERYNOTENUMBER", Истина);
	Если НЕ xmlНомерНакладной = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерНакладной", СокрЛП(xmlНомерНакладной));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	//HEAD
	
	Узел = ПолучитьУзелДерева(СтрокаДерева, "Строка", "HEAD");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Поставщик(организация)(обязательное поле)
	//ИЗМЕНЕНО Верескул Игорь(Начало 08.12.2017
	
	xmlОрганизацияGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "SUPPLIER", Истина);
	Если НЕ xmlОрганизацияGLN = Неопределено Тогда
		Если  Метаданные.Справочники.Контрагенты.Реквизиты.Найти("GLN") = Неопределено Тогда
			Сообщить("Отсутствует необходимый для загрузки данных реквизит <GLN> в справочнике <Организации>",СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
		
		ОрганизацияСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlОрганизацияGLN);
		Если НЕ ОрганизацияСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Контрагент", ОрганизацияСсылка);
		Иначе
			Сообщить("Не найдена организация с GLN " + xmlОрганизацияGLN + ". Возможно заказ нам не принадлежит! Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Покупатель(контрагент)(обязательное поле)
	xmlКонтрагентGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "BUYER", Истина);
	Если НЕ xmlКонтрагентGLN = Неопределено Тогда
		Если  Метаданные.Справочники.Организации.Реквизиты.Найти("GLN") = Неопределено Тогда
			Сообщить("Отсутствует необходимый для загрузки данных реквизит <GLN> в справочнике <Контрагенты>", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
		
		КонтрагентСсылка = Справочники.Организации.НайтиПоРеквизиту("GLN", xmlКонтрагентGLN);
		Если НЕ КонтрагентСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Организация", КонтрагентСсылка);
		Иначе
			Сообщить("Не найден контрагент с GLN " + xmlКонтрагентGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	//ИЗМЕНЕНО Верескул Игорь(окончание 08.12.2017
	
	// Место доставки (для этого необходимо создать Справочник.ТочкиДоставки)(опциональное поле)
	xmlАдресДоставкиGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVERYPLACE", Ложь);
	Если НЕ xmlАдресДоставкиGLN = Неопределено Тогда
		Если ФлАдреса Тогда
			Если НЕ Справочники.ТипВсеСсылки().СодержитТип(Тип("СправочникСсылка.ТочкиДоставки")) Тогда
				Сообщить("Отсутствует необязательный для загрузки данных справочник <Точки доставки>", СтатусСообщения.Важное);
			Иначе
				Если  Метаданные.Справочники.ТочкиДоставки.Реквизиты.Найти("GLN") = Неопределено Тогда
					Сообщить("Отсутствует необязательный для загрузки данных реквизит <GLN> в справочнике <Точки доставки>",СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
			ФлАдреса=Ложь;
		КонецЕсли;
		
		
		АдресДоставкиСсылка = ПолучитьАдресДоставки(xmlКонтрагентGLN, xmlАдресДоставкиGLN);
		
		Если НЕ АдресДоставкиСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("АдресДоставки", АдресДоставкиСсылка);
		Иначе
			Сообщить("Не найден адрес доставки с GLN " + xmlАдресДоставкиGLN + " для контрагента с GLN " + xmlКонтрагентGLN + ". Возможно заказ нам не принадлежит! Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	// Отправитель(обязательное поле)
	xmlОтправительGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "SENDER", Истина);
	Если НЕ xmlОтправительGLN = Неопределено Тогда
		ОтправительСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlОтправительGLN);
		
		Если НЕ ОтправительСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Отправитель", ОтправительСсылка);
		Иначе
			Сообщить("Не найден отправитель с GLN " + xmlОтправительGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	// Получатель(обязательное поле)
	xmlПолучательGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "RECIPIENT", Истина);
	Если НЕ xmlПолучательGLN = Неопределено Тогда
		ПолучательСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlПолучательGLN);
		
		Если НЕ ПолучательСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Получатель", ОтправительСсылка);
		Иначе
			Сообщить("Не найден получатель с GLN " + xmlПолучательGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	//// Номер транзакции
	//xmlEDIINTERCHANGEID = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "EDIINTERCHANGEID", Истина);
	//Если НЕ xmlEDIINTERCHANGEID = Неопределено Тогда
	//	СтруктураДокумента.Вставить("EDIINTERCHANGEID", xmlEDIINTERCHANGEID);
	//Иначе
	//	Возврат 0;
	//КонецЕсли;
	
	Узел = ПолучитьУзелДерева(СтрокаДерева, "Строка", "PACKINGSEQUENCE");
	Если Узел = Неопределено Тогда
		Возврат 0;
	Иначе
		СтрокаДерева = Узел.Строки;
	КонецЕсли;
	// Табличная часть
	ТабличнаяЧасть = ПолучитьУзелДерева(СтрокаДерева, "Массив", "POSITION");
	Если ТабличнаяЧасть = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	// Создаем таблицуЗначений, в которую выгружаем табличную часть документа
	ДокументТЧ=Новый ТаблицаЗначений;
	ДокументТЧ.Колонки.Добавить("НомерСтрокиТЧ");
	ДокументТЧ.Колонки.Добавить("Номенклатура");
	ДокументТЧ.Колонки.Добавить("КоличествоЗаказанное");
	ДокументТЧ.Колонки.Добавить("КоличествоПоставляемое");
	ДокументТЧ.Колонки.Добавить("КоличествоМест");
	ДокументТЧ.Колонки.Добавить("ШтрихКод");
	ДокументТЧ.Колонки.Добавить("АртикулПоставщика");
	ДокументТЧ.Колонки.Добавить("АртикулПокупателя");
	ДокументТЧ.Колонки.Добавить("ЕдиницаИзмерения");
	ДокументТЧ.Колонки.Добавить("ЕдиницаИзмеренияМест");
	ДокументТЧ.Колонки.Добавить("СтранаПроизводитель");
	ДокументТЧ.Колонки.Добавить("НомерГТД");
	
	Для Каждого Узел ИЗ ТабличнаяЧасть Цикл
		
		СтрокаДерева = Узел.Строки;
		
		НоваяСтрокаТЧ = ДокументТЧ.Добавить();
		
		//Номер строки (этот параметр при создании заказа не используется, может быть проверочным)
		xmlНомерСтрокиТЧ = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "POSITIONNUMBER", Истина);
		Если НЕ xmlНомерСтрокиТЧ = Неопределено Тогда
			НоваяСтрокаТЧ.НомерСтрокиТЧ = xmlНомерСтрокиТЧ;
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// Определяем аттрибуты номенклатуры:
		// Штрих - код номенклатуры
		xmlШтрихКодНоменклатуры = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCT", Истина);
		Если НЕ xmlШтрихКодНоменклатуры = Неопределено Тогда
			НоваяСтрокаТЧ.ШтрихКод = xmlШтрихКодНоменклатуры;
		Иначе
			Возврат 0;
		КонецЕсли;
		// Артикул поставщика(опциональное поле)
		xmlАртикулПоставщикаСтрока = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCTIDSUPPLIER", Ложь);
		
		// Артикул покупателя(опциональное поле)
		xmlАртикулПокупателяСтрока = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCTIDBUYER", Ложь);
		
		// Приоритетным является PRODUCTIDBUYER, если параметр присутствует, то используем его
		Если НЕ xmlАртикулПокупателяСтрока = Неопределено Тогда
			АртикулПокупателя = xmlАртикулПокупателяСтрока;
			СтруктураНоменклатуры=ПолучитьНоменклатуру(СтруктураДокумента.Контрагент,АртикулПокупателя, "");
			НоваяСтрокаТЧ.Номенклатура=СтруктураНоменклатуры.Номенклатура;
			//Единица измерения (определяем из регистра сведений НоменклатураКонтрагентов)
			НоваяСтрокаТЧ.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаИзмерения;
			НоваяСтрокаТЧ.АртикулПокупателя=АртикулПокупателя;
		КонецЕсли;
		
		// Если параметр PRODUCTIDBUYER отсутствует или по артикулу покупателя не удалось найти номенклатуру
		Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.Номенклатура)  Тогда         
			СтруктураНоменклатуры=ПолучитьНоменклатуру(СтруктураДокумента.Контрагент, "", xmlШтрихКодНоменклатуры);
			НоваяСтрокаТЧ.Номенклатура=СтруктураНоменклатуры.Номенклатура;
			//Единица измерения (определяем из регистра сведений НоменклатураКонтрагентов)
			НоваяСтрокаТЧ.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаИзмерения;
			
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.Номенклатура) Тогда
			Сообщить("Не найдена позиция номенклатуры (" + ?(Не ЗначениеЗаполнено(АртикулПокупателя), "штрих-код " + xmlШтрихКодНоменклатуры, "артикул " + АртикулПокупателя) + ") в строке " + xmlНомерСтрокиТЧ,СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
		НоваяСтрокаТЧ.ЕдиницаИзмеренияМест = НоваяСтрокаТЧ.ЕдиницаИзмерения;
		// Заказанное количество(опциональное поле)
		//xmlКоличествоЗаказанное = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDEREDQUANTITY", Истина);
		//Если НЕ xmlКоличествоЗаказанное = Неопределено Тогда
		//	НоваяСтрокаТЧ.КоличествоЗаказанное = Число(xmlКоличествоЗаказанное);
		//Иначе
		//	Возврат 0;
		//КонецЕсли;
		
		// Поставляемое количество(обязательное поле)
		xmlКоличествоПоставляемое = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVEREDQUANTITY", Истина);
		Если НЕ xmlКоличествоПоставляемое = Неопределено Тогда
			НоваяСтрокаТЧ.КоличествоПоставляемое = Число(xmlКоличествоПоставляемое);
			НоваяСтрокаТЧ.КоличествоМест = Число(xmlКоличествоПоставляемое);
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// Страна производитель(опциональное поле)
		xmlСтранаПроизводитель = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "COUNTRYORIGIN", Ложь);
		Если НЕ xmlСтранаПроизводитель = Неопределено Тогда
			НоваяСтрокаТЧ.СтранаПроизводитель = СокрЛП(xmlСтранаПроизводитель);
		КонецЕсли;
		
		// Номер ГТД (опциональное поле)
		xmlНомерГТД = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "CUSTOMSTARIFFNUMBER", Ложь);
		Если НЕ xmlНомерГТД = Неопределено Тогда
			НоваяСтрокаТЧ.НомерГТД = СокрЛП(xmlНомерГТД);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДокумента.Вставить("ДокументТЧ", ДокументТЧ);
	
	Возврат СтруктураДокумента;
	
КонецФункции


// Функция предназначена для создания структуры образа документа для экспорта 
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
// Структура образа документа.
//
Функция ПолучитьСтруктуруДокумента_INVOICE(Дерево)
	
	СтруктураДокумента = Новый Структура;
	
	//Определяем реквизиты документа
	Узел = ПолучитьУзелДерева(Дерево.Строки, "Строка", "INVOICE");
	
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Сообщить("Файл не является INVOICE-файлом!", СтатусСообщения.Важное);
		Возврат 0;
	КонецЕсли;
	
	// Номер счета(обязательное поле)
	xmlНомерДокумента = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "NUMBER", Истина);
	Если НЕ xmlНомерДокумента = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерДокумента", СокрЛП(xmlНомерДокумента));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	//  Дата счета(обязательное поле)
	xmlДатаДокумента = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DATE", Истина);
	Если НЕ xmlДатаДокумента = Неопределено Тогда
		СтруктураДокумента.Вставить("ДатаДокумента", Дата(Прав(СокрЛП(xmlДатаДокумента),2)+"."+Сред(СокрЛП(xmlДатаДокумента),6,2)+"."+Лев(СокрЛП(xmlДатаДокумента),4)+" 0:00:00"));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Дата поставки(обязательное поле)
	xmlДатапоставки = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVERYDATE", Истина);
	Если НЕ xmlДатапоставки = Неопределено Тогда
		СтруктураДокумента.Вставить("Датапоставки", Дата(Прав(СокрЛП(xmlДатапоставки),2)+"."+Сред(СокрЛП(xmlДатапоставки),6,2)+"."+Лев(СокрЛП(xmlДатапоставки),4)+" 0:00:00"));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Валюта(обязательное поле)
	xmlВалюта = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "CURRENCY", Истина);
	Если НЕ xmlВалюта = Неопределено Тогда
		СтруктураДокумента.Вставить("Валюта", ПолучитьВалюту(xmlВалюта));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Номер заказа(обязательное поле)
	xmlНомерЗаказа = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDERNUMBER", Истина);
	Если НЕ xmlНомерЗаказа = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерЗаказа", СокрЛП(xmlНомерЗаказа));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	//  Дата заказа(обязательное поле)
	xmlДатаЗаказа = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ORDERDATE", Истина);
	Если НЕ xmlДатаЗаказа = Неопределено Тогда
		СтруктураДокумента.Вставить("ДатаЗаказа", Дата(Прав(СокрЛП(xmlДатаЗаказа),2)+"."+Сред(СокрЛП(xmlДатаЗаказа),6,2)+"."+Лев(СокрЛП(xmlДатаЗаказа),4)+" 0:00:00"));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Номер накладной(обязательное поле)
	xmlНомерНакладной = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVERYNOTENUMBER", Истина);
	Если НЕ xmlНомерНакладной = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерНакладной", СокрЛП(xmlНомерНакладной));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Дата накладной(обязательное поле)
	xmlДатаНакладной = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVERYNOTEDATE", Истина);
	Если НЕ xmlДатаНакладной = Неопределено Тогда
		СтруктураДокумента.Вставить("ДатаНакладной", Дата(Прав(СокрЛП(xmlДатаНакладной),2)+"."+Сред(СокрЛП(xmlДатаНакладной),6,2)+"."+Лев(СокрЛП(xmlДатаНакладной),4)+" 0:00:00"));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Номер платежно-расчетного документа или зеленой марки(опциональное поле)
	xmlНомерПлатежногоДокумента = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVERYNOTEDATE", Ложь);
	Если ЗначениеЗаполнено(xmlНомерПлатежногоДокумента) Тогда
		СтруктураДокумента.Вставить("НомерНакладной", СокрЛП(xmlНомерПлатежногоДокумента));
	КонецЕсли;
	
	// ИНН(опциональное поле)
	xmlИНН = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "FISCALNUMBER", Ложь);
	Если НЕ xmlИНН = Неопределено Тогда
		СтруктураДокумента.Вставить("ИНН", СокрЛП(xmlИНН));
	КонецЕсли;
	
	// КПП(опциональное поле)
	xmlКПП = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "REGISTRATIONNUMBER", Ложь);
	Если НЕ xmlКПП = Неопределено Тогда
		СтруктураДокумента.Вставить("КПП", СокрЛП(xmlКПП));
	КонецЕсли;
	
	// Всего без НДС(обязательное поле)
	xmlВсегоБезНДС = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "GOODSTOTALAMOUNT", Истина);
	Если НЕ xmlВсегоБезНДС = Неопределено Тогда
		СтруктураДокумента.Вставить("ВсегоБезНДС", Число(xmlВсегоБезНДС));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Всего по позициям(обязательное поле)
	xmlВсегоПозициям = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "POSITIONSAMOUNT", Истина);
	Если НЕ xmlВсегоПозициям = Неопределено Тогда
		СтруктураДокумента.Вставить("ВсегоПозициям", Число(xmlВсегоПозициям));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Сумма НДС(обязательное поле)
	xmlСуммаНДС = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "VATSUM", Истина);
	Если НЕ xmlСуммаНДС = Неопределено Тогда
		СтруктураДокумента.Вставить("СуммаНДС", Число(xmlСуммаНДС));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Сумма по счету(обязательное поле)
	xmlСуммаПоСчету = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "INVOICETOTALAMOUNT", Истина);
	Если НЕ xmlСуммаПоСчету = Неопределено Тогда
		СтруктураДокумента.Вставить("СуммаПоСчету", Число(xmlСуммаПоСчету));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// База налогообложения(обязательное поле)
	xmlБазаНалогообложения = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "TAXABLEAMOUNT", Истина);
	Если НЕ xmlБазаНалогообложения = Неопределено Тогда
		СтруктураДокумента.Вставить("БазаНалогообложения", Число(xmlБазаНалогообложения));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Имя менеджера(опциональное поле)
	xmlИмяМенеджера = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "MANAGER", Ложь);
	Если НЕ xmlИмяМенеджера = Неопределено Тогда
		СтруктураДокумента.Вставить("ИмяМенеджера", СокрЛП(xmlИмяМенеджера));
	КонецЕсли;
	
	// Имя главного бухгалтера(опциональное поле)
	xmlИмяГлавБуха = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ACCOUNTING", Ложь);
	Если НЕ xmlИмяГлавБуха = Неопределено тогда
		СтруктураДокумента.Вставить("ИмяГлавБуха", СокрЛП(xmlИмяГлавБуха));
	КонецЕсли;
	
	// Ставка НДС(%)(обязательное поле)
	xmlСтавкаНДС = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "VAT", Истина);
	Если НЕ xmlСтавкаНДС = Неопределено Тогда
		СтруктураДокумента.Вставить("СтавкаНДС", Число(xmlСтавкаНДС));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	//HEAD
	
	Узел = ПолучитьУзелДерева(СтрокаДерева, "Строка", "HEAD");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Поставщик(организация)(обязательное поле)
	xmlОрганизацияGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "SUPPLIER", Истина);
	Если НЕ xmlОрганизацияGLN = Неопределено Тогда
		Если  Метаданные.Справочники.Организации.Реквизиты.Найти("GLN") = Неопределено Тогда
			Сообщить("Отсутствует необходимый для загрузки данных реквизит <GLN> в справочнике <Организации>",СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
		
		ОрганизацияСсылка = Справочники.Организации.НайтиПоРеквизиту("GLN", xmlОрганизацияGLN);
		Если НЕ ОрганизацияСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Организация", ОрганизацияСсылка);
		Иначе
			Сообщить("Не найдена организация с GLN " + xmlОрганизацияGLN + ". Возможно заказ нам не принадлежит! Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Покупатель(контрагент)(обязательное поле)
	xmlКонтрагентGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "BUYER", Истина);
	Если НЕ xmlКонтрагентGLN = Неопределено Тогда
		Если  Метаданные.Справочники.Контрагенты.Реквизиты.Найти("GLN") = Неопределено Тогда
			Сообщить("Отсутствует необходимый для загрузки данных реквизит <GLN> в справочнике <Контрагенты>", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
		
		КонтрагентСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlКонтрагентGLN);
		Если НЕ КонтрагентСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Контрагент", КонтрагентСсылка);
		Иначе
			Сообщить("Не найден контрагент с GLN " + xmlКонтрагентGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Место доставки (для этого необходимо создать Справочник.ТочкиДоставки)(опциональное поле)
	xmlАдресДоставкиGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DELIVERYPLACE", Ложь);
	Если НЕ xmlАдресДоставкиGLN = Неопределено Тогда
		Если ФлАдреса Тогда
			Если НЕ Справочники.ТипВсеСсылки().СодержитТип(Тип("СправочникСсылка.ТочкиДоставки")) Тогда
				Сообщить("Отсутствует необязательный для загрузки данных справочник <Точки доставки>", СтатусСообщения.Важное);
			Иначе
				Если  Метаданные.Справочники.ТочкиДоставки.Реквизиты.Найти("GLN") = Неопределено Тогда
					Сообщить("Отсутствует необязательный для загрузки данных реквизит <GLN> в справочнике <Точки доставки>",СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
			ФлАдреса=Ложь;
		КонецЕсли;
		АдресДоставкиСсылка = ПолучитьАдресДоставки(xmlКонтрагентGLN, xmlАдресДоставкиGLN);
		Если НЕ АдресДоставкиСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("АдресДоставки", АдресДоставкиСсылка);
		Иначе
			Сообщить("Не найден адрес доставки с GLN " + xmlАдресДоставкиGLN + " для контрагента с GLN " + xmlКонтрагентGLN + ". Возможно заказ нам не принадлежит! Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Грузоотправитель(опциональное поле)
	xmlГрузоотправительGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "CONSEGNOR", Ложь);
	Если НЕ xmlГрузоотправительGLN = Неопределено Тогда
		ГрузоотправительСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlГрузоотправительGLN);
		
		Если НЕ ГрузоотправительСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Грузоотправитель", ГрузоотправительСсылка);
		Иначе
			Сообщить("Не найден грузоотправитель с GLN " + xmlГрузоотправительGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	// Грузополучатель(опциональное поле)
	xmlГрузополучательGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "CONSIGNEE", Ложь);
	Если НЕ xmlГрузополучательGLN = Неопределено Тогда
		ГрузополучательСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlГрузополучательGLN);
		
		Если НЕ ГрузополучательСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Получатель", ГрузополучательСсылка);
		Иначе
			Сообщить("Не найден грузополучатель с GLN " + xmlГрузополучательGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Отправитель(обязательное поле)
	xmlОтправительGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "SENDER", Истина);
	Если НЕ xmlОтправительGLN = Неопределено Тогда
		ОтправительСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlОтправительGLN);
		
		Если НЕ ОтправительСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Отправитель", ОтправительСсылка);
		Иначе
			Сообщить("Не найден отправитель с GLN " + xmlОтправительGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Получатель(обязательное поле)
	xmlПолучательGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "RECIPIENT", Истина);
	Если НЕ xmlПолучательGLN = Неопределено Тогда
		ПолучательСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlПолучательGLN);
		
		Если НЕ ПолучательСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Получатель", ОтправительСсылка);
		Иначе
			Сообщить("Не найден получатель с GLN " + xmlПолучательGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Номер транзакции
	xmlEDIINTERCHANGEID = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "EDIINTERCHANGEID", Истина);
	Если НЕ xmlEDIINTERCHANGEID = Неопределено Тогда
		СтруктураДокумента.Вставить("EDIINTERCHANGEID", xmlEDIINTERCHANGEID);
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Табличная часть
	ТабличнаяЧасть = ПолучитьУзелДерева(СтрокаДерева, "Массив", "POSITION");
	Если ТабличнаяЧасть = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	// Создаем таблицуЗначений, в которую выгружаем табличную часть документа
	ДокументТЧ=Новый ТаблицаЗначений;
	ДокументТЧ.Колонки.Добавить("НомерСтрокиТЧ");
	ДокументТЧ.Колонки.Добавить("Номенклатура");
	ДокументТЧ.Колонки.Добавить("КоличествоПоСчету");
	ДокументТЧ.Колонки.Добавить("КоличествоМест");
	ДокументТЧ.Колонки.Добавить("ЦенаБезНДС");
	ДокументТЧ.Колонки.Добавить("СуммаБезНДС");
	ДокументТЧ.Колонки.Добавить("ШтрихКод");
	ДокументТЧ.Колонки.Добавить("АртикулПоставщика");
	ДокументТЧ.Колонки.Добавить("АртикулПокупателя");
	ДокументТЧ.Колонки.Добавить("ЕдиницаИзмерения");
	ДокументТЧ.Колонки.Добавить("ЕдиницаИзмеренияМест");
	ДокументТЧ.Колонки.Добавить("СтранаПроизводитель");
	ДокументТЧ.Колонки.Добавить("НомерГТД");
	ДокументТЧ.Колонки.Добавить("ТипСуммы");
	ДокументТЧ.Колонки.Добавить("Налог");
	ДокументТЧ.Колонки.Добавить("КодНалога");
	ДокументТЧ.Колонки.Добавить("СтавкаНДС");
	ДокументТЧ.Колонки.Добавить("НДС");
	ДокументТЧ.Колонки.Добавить("Категория"); //СтавкаНалога
	ДокументТЧ.Колонки.Добавить("СтавкаНалога"); //
	
	Для Каждого Узел ИЗ ТабличнаяЧасть Цикл
		
		СтрокаДерева = Узел.Строки;
		
		НоваяСтрокаТЧ = ДокументТЧ.Добавить();
		
		//Номер строки (этот параметр при создании заказа не используется, может быть проверочным)
		xmlНомерСтрокиТЧ = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "POSITIONNUMBER", Истина);
		Если НЕ xmlНомерСтрокиТЧ = Неопределено Тогда 
			НоваяСтрокаТЧ.НомерСтрокиТЧ = Число(xmlНомерСтрокиТЧ);
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// Определяем аттрибуты номенклатуры:
		// Штрих - код номенклатуры
		xmlШтрихКодНоменклатуры = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCT", Истина);
		Если НЕ xmlШтрихКодНоменклатуры = Неопределено Тогда
			НоваяСтрокаТЧ.ШтрихКод = xmlШтрихКодНоменклатуры;
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// Артикул поставщика(опциональное поле)
		xmlАртикулПоставщикаСтрока = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCTIDSUPPLIER", Истина);
		
		// Артикул покупателя(опциональное поле)
		xmlАртикулПокупателяСтрока = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCTIDBUYER", Истина);
		
		// Приоритетным является PRODUCTIDBUYER, если параметр присутствует, то используем его
		Если НЕ xmlАртикулПокупателяСтрока = Неопределено Тогда
			АртикулПокупателя = xmlАртикулПокупателяСтрока;
			СтруктураНоменклатуры=ПолучитьНоменклатуру(СтруктураДокумента.Контрагент,АртикулПокупателя, "");
			НоваяСтрокаТЧ.Номенклатура=СтруктураНоменклатуры.Номенклатура;
			//Единица измерения (определяем из регистра сведений НоменклатураКонтрагентов)
			НоваяСтрокаТЧ.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаИзмерения;
			НоваяСтрокаТЧ.АртикулПокупателя=АртикулПокупателя;
		КонецЕсли;
		
		// Если параметр PRODUCTIDBUYER отсутствует или по артикулу покупателя не удалось найти номенклатуру
		Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.Номенклатура)  Тогда         
			СтруктураНоменклатуры=ПолучитьНоменклатуру(СтруктураДокумента.Контрагент, "", xmlШтрихКодНоменклатуры);
			НоваяСтрокаТЧ.Номенклатура=СтруктураНоменклатуры.Номенклатура;
			//Единица измерения (определяем из регистра сведений НоменклатураКонтрагентов)
			НоваяСтрокаТЧ.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаИзмерения;
			
		КонецЕсли;
		
		НоваяСтрокаТЧ.ЕдиницаИзмеренияМест = НоваяСтрокаТЧ.ЕдиницаИзмерения;
		
		Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.Номенклатура) Тогда
			Сообщить("Не найдена позиция номенклатуры (" + ?(Не ЗначениеЗаполнено(АртикулПокупателя), "штрих-код " + xmlШтрихКодНоменклатуры, "артикул " + АртикулПокупателя) + ") в строке " + xmlНомерСтрокиТЧ,СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
		// Количество по счету(обязательное поле)
		xmlКоличествоПоСчету = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "INVOICEDQUANTITY", Истина);
		Если НЕ xmlКоличествоПоСчету = Неопределено Тогда
			НоваяСтрокаТЧ.КоличествоПоСчету = Число(xmlКоличествоПоСчету);
			НоваяСтрокаТЧ.КоличествоМест = Число(xmlКоличествоПоСчету);
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// Цена за ед. (без НДС)(обязательное поле)
		xmlЦенаБезНДС = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "UNITPRICE", Истина);
		Если НЕ xmlЦенаБезНДС = Неопределено Тогда
			НоваяСтрокаТЧ.ЦенаБезНДС = Число(xmlЦенаБезНДС);
		Иначе
			Возврат 0;
		КонецЕсли;
		// Сумма товара (без НДС)(обязательное поле)
		xmlСуммаБезНДС = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "AMOUNT", Истина);
		Если НЕ xmlСуммаБезНДС = Неопределено Тогда
			НоваяСтрокаТЧ.СуммаБезНДС = Число(xmlСуммаБезНДС);
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// Страна производитель(опциональное поле)
		xmlСтранаПроизводитель = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "COUNTRYORIGIN", Ложь);
		Если НЕ xmlСтранаПроизводитель = Неопределено Тогда
			НоваяСтрокаТЧ.СтранаПроизводитель = СокрЛП(xmlСтранаПроизводитель);
		КонецЕсли;
		
		// Номер ГТД (опциональное поле)
		xmlНомерГТД = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "CUSTOMSTARIFFNUMBER", Ложь);
		Если НЕ xmlНомерГТД = Неопределено Тогда
			НоваяСтрокаТЧ.НомерГТД = СокрЛП(xmlНомерГТД);
		КонецЕсли;
		
		// Тип суммы (обязательное поле)
		xmlТипСуммы = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "AMOUNTTYPE", Ложь);
		Если Не xmlТипСуммы = Неопределено Тогда
			НоваяСтрокаТЧ.ТипСуммы = Число(xmlТипСуммы);
		КонецЕсли;
		
		
		//TAX
		Узел = ПолучитьУзелДерева(СтрокаДерева, "Строка", "TAX");
		Если НЕ Узел = Неопределено Тогда
			СтрокаДерева = Узел.Строки;
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// 7 - налог, 6-денежный сбор, 5-таможенная пошлина (обязательное поле)
		xmlНалог = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "FUNCTION", Истина);
		Если НЕ xmlНалог = Неопределено Тогда
			НоваяСтрокаТЧ.Налог = Число(xmlНалог);
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// Код налога (НДС) (обязательное поле)
		xmlКодНалога = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "TAXTYPECODE", Истина);
		Если НЕ xmlКодНалога = Неопределено Тогда
			НоваяСтрокаТЧ.КодНалога = СокрЛП(xmlКодНалога);
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// Ставка налога (НДС, %) (обязательное поле)
		xmlСтавкаНалога = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "TAXRATE", Истина);
		Если НЕ xmlСтавкаНалога = Неопределено тогда
			НоваяСтрокаТЧ.СтавкаНалога = Число(xmlСтавкаНалога);
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// НДС (обязательное поле)
		xmlНДС = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "TAXAMOUNT", Истина);
		Если НЕ xmlНДС = Неопределено Тогда
			НоваяСтрокаТЧ.НДС = Число(xmlНДС);
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// S - стандартная,  А - смешанная, Z - нулевой сбор (обязательное поле)
		xmlКатегория = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "CATEGORY", Истина);
		Если ЗначениеЗаполнено(xmlКатегория) Тогда
			НоваяСтрокаТЧ.Категория = СокрЛП(xmlКатегория);
		Иначе
			Возврат 0;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДокумента.Вставить("ДокументТЧ",ДокументТЧ);
	
	Возврат СтруктураДокумента;
	
КонецФункции

// Функция предназначена для создания структуры
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
// Структура образа документа.
//
Функция ПолучитьСтруктуруДокумента_PRICAT(Дерево)
	
	СтруктураДокумента = Новый Структура;
	
	//Определяем реквизиты документа
	Узел = ПолучитьУзелДерева(Дерево.Строки, "Строка", "PRICAT");
	
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Сообщить("Файл не является PRICAT-файлом!", СтатусСообщения.Важное);
		Возврат 0;
	КонецЕсли;
	
	//Требуемое действие: Имеет 2-а вариана выбора: 9 – прайс-лист, 51 – ответ на прайс-лист(обязательное поле)
	xmlТребуемоеДейсвие = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ACTION", Истина);
	Если НЕ xmlТребуемоеДейсвие = Неопределено Тогда
		
		xmlТребуемоеДейсвие = Число(xmlТребуемоеДейсвие);
		
		ТипДокумента = "";
		Если xmlТребуемоеДейсвие = 9 Тогда
			ТипДокумента = "_eXiteПрайсЛист";
		ИначеЕсли xmlТребуемоеДейсвие = 51 Тогда
			ТипДокумента = "_eXiteУтверждениеПрайсЛиста";
		КонецЕсли;
		СтруктураДокумента.Вставить("ТипДокумента", ТипДокумента);
	Иначе
		Возврат 0;
	КонецЕсли;
	
	
	//Номер документа(обязательное поле)
	xmlНомерДокумента = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "NUMBER", Истина);
	Если НЕ xmlНомерДокумента = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерДокумента",СокрЛП(xmlНомерДокумента));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	//Дата  документа(обязательное поле)
	xmlДатаДокумента = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DATE", Истина);
	Если НЕ xmlДатаДокумента = Неопределено Тогда
		СтруктураДокумента.Вставить("ДатаДокумента",Дата(Прав(СокрЛП(xmlДатаДокумента),2)+"."+Сред(СокрЛП(xmlДатаДокумента),6,2)+"."+Лев(СокрЛП(xmlДатаДокумента),4)+" 0:00:00"));
	Иначе
		Возврат 0;
	КонецЕсли;
	
	//Номер прайс-листа. Используется только при подтверждении или отказе прайс-листа(опциональное поле)
	xmlНомерПрайсЛиста = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRICATNUMBER", Ложь);
	Если НЕ xmlНомерПрайсЛиста = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерПрайсЛиста",СокрЛП(xmlНомерПрайсЛиста));
	КонецЕсли;
	
	//Дата прайс-листа. Используется только при подтверждении или отказе прайс-листа(опциональное поле)
	xmlДатаПрайсЛиста = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRICATDATE", Ложь);
	Если НЕ xmlДатаПрайсЛиста = Неопределено Тогда
		СтруктураДокумента.Вставить("ДатаПрайсЛиста",Дата(Прав(СокрЛП(xmlДатаПрайсЛиста),2)+"."+Сред(СокрЛП(xmlДатаПрайсЛиста),6,2)+"."+Лев(СокрЛП(xmlДатаПрайсЛиста),4)+" 0:00:00"));
	КонецЕсли;
	
	//Вступает в силу с даты(опциональное поле)
	xmlДатаВступленияВСилу = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DATEFROM", Ложь);
	Если НЕ xmlДатаВступленияВСилу = Неопределено Тогда
		СтруктураДокумента.Вставить("ДатаВступленияВСилу",Дата(Прав(СокрЛП(xmlДатаВступленияВСилу),2)+"."+Сред(СокрЛП(xmlДатаВступленияВСилу),6,2)+"."+Лев(СокрЛП(xmlДатаВступленияВСилу),4)+" 0:00:00"));
	КонецЕсли;
	
	//Вступает в силу с времени(опциональное поле)
	xmlВремяВступленияВСилу = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "TIMEFROM", Ложь);
	Если НЕ xmlВремяВступленияВСилу = Неопределено Тогда
		СтруктураДокумента.Вставить("ВремяВступленияВСилу", ?(Найти(СокрЛП(xmlВремяВступленияВСилу), ":") = 2, "0", "") + СокрЛП(xmlВремяВступленияВСилу) + ":00");
	КонецЕсли;
	
	// Свободный текст(опциональное поле)
	xmlСвободныйТекст = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "INFO", Ложь);
	Если НЕ xmlСвободныйТекст = Неопределено Тогда
		СтруктураДокумента.Вставить("СвободныйТекст", СокрЛП(xmlСвободныйТекст));
	КонецЕсли;
	
	// Поставщик(организация)(обязательное поле)
	xmlОрганизацияGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "SUPPLIER", Истина);
	Если НЕ xmlОрганизацияGLN = Неопределено Тогда
		Если  Метаданные.Справочники.Организации.Реквизиты.Найти("GLN") = Неопределено Тогда
			Сообщить("Отсутствует необходимый для загрузки данных реквизит <GLN> в справочнике <Организации>",СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
		
		ОрганизацияСсылка = Справочники.Организации.НайтиПоРеквизиту("GLN", xmlОрганизацияGLN);
		Если НЕ ОрганизацияСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Организация", ОрганизацияСсылка);
		Иначе
			Сообщить("Не найдена организация с GLN " + xmlОрганизацияGLN + ". Возможно заказ нам не принадлежит! Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Покупатель(контрагент)(обязательное поле)
	xmlКонтрагентGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "BUYER", Истина);
	Если НЕ xmlКонтрагентGLN = Неопределено Тогда
		Если  Метаданные.Справочники.Контрагенты.Реквизиты.Найти("GLN") = Неопределено Тогда
			Сообщить("Отсутствует необходимый для загрузки данных реквизит <GLN> в справочнике <Контрагенты>", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
		
		КонтрагентСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("GLN", xmlКонтрагентGLN);
		Если НЕ КонтрагентСсылка.Пустая() Тогда
			СтруктураДокумента.Вставить("Контрагент", КонтрагентСсылка);
		Иначе
			Сообщить("Не найден контрагент с GLN " + xmlКонтрагентGLN + ". Дальнейшее заполнение не возможно!", СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Номер транзакции
	xmlEDIINTERCHANGEID = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "EDIINTERCHANGEID", Истина);
	Если НЕ xmlEDIINTERCHANGEID = Неопределено Тогда
		СтруктураДокумента.Вставить("EDIINTERCHANGEID", xmlEDIINTERCHANGEID);
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// Табличная часть
	Узел = ПолучитьУзелДерева(СтрокаДерева, "Строка", "CATALOGUE");
	Если Узел = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	
	// Создаем таблицуЗначений, в которую выгружаем табличную часть документа
	CATALOGUE=Новый ТаблицаЗначений;
	CATALOGUE.Колонки.Добавить("НомерСтрокиТЧ");
	CATALOGUE.Колонки.Добавить("Номенклатура");
	CATALOGUE.Колонки.Добавить("ХарактеристикаНоменклатуры");
	CATALOGUE.Колонки.Добавить("ЕдиницаИзмерения");
	CATALOGUE.Колонки.Добавить("Цена");
	CATALOGUE.Колонки.Добавить("ШтрихКод");
	CATALOGUE.Колонки.Добавить("АртикулПокупателя");
	CATALOGUE.Колонки.Добавить("Действие");
	
	//Табличная часть
	ТабличнаяЧасть = ПолучитьУзелДерева(Узел.Строки, "Массив", "POSITION");
	Если ТабличнаяЧасть = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Для Каждого Узел ИЗ ТабличнаяЧасть Цикл
		
		СтрокаДерева = Узел.Строки;
		
		НоваяСтрокаТЧ = CATALOGUE.Добавить();
		
		//Номер строки (этот параметр при создании заказа не используется, может быть проверочным)
		xmlНомерСтрокиТЧ = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "POSITIONNUMBER", Истина);
		Если НЕ xmlНомерСтрокиТЧ = Неопределено Тогда
			НоваяСтрокаТЧ.НомерСтрокиТЧ = xmlНомерСтрокиТЧ;
		КонецЕсли;
		
		//Если выбран 9 - прайс-лист, то в узлах POSITION в ACTION пользователь может выбрать только 2-добавление новых позиций, 3-удаление, 4-изменение(в вложении pricat_ACTION-9.xml)
		//Если выбран 51 - ответ на прайс-лист, то в узлах POSITION в ACTION пользователь может выбрать только 27-Принято, 29-Не принято(в вложении pricat_ACTION-51.xml) + добавляются 2 поля PRICATNUMBER и PRICATDATE - это данные приката с ACTION - 9
		xmlДействие = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ACTION", Истина);
		Если НЕ xmlДействие = Неопределено Тогда
			ДействиеСНоменклатурой = Число(xmlДействие);
		Иначе
			Возврат 0;
		КонецЕсли;
		
		Если ДействиеСНоменклатурой = 2 Тогда
			ДействиеСНоменклатурой = Перечисления._eXiteВидыДействийСНоменклатурой.Добавление;
		ИначеЕсли  ДействиеСНоменклатурой = 3 Тогда
			ДействиеСНоменклатурой = Перечисления._eXiteВидыДействийСНоменклатурой.Удаление;
		ИначеЕсли  ДействиеСНоменклатурой = 4 Тогда
			ДействиеСНоменклатурой = Перечисления._eXiteВидыДействийСНоменклатурой.Изменение;
		ИначеЕсли  ДействиеСНоменклатурой = 27 Тогда
			ДействиеСНоменклатурой = Перечисления._eXiteВидыУтвержденийНоменклатуры.Принято;
		ИначеЕсли  ДействиеСНоменклатурой = 29 Тогда
			ДействиеСНоменклатурой = Перечисления._eXiteВидыУтвержденийНоменклатуры.НеПринято;
		КонецЕсли;
		
		НоваяСтрокаТЧ.Действие = ДействиеСНоменклатурой;
		
		// Определяем аттрибуты номенклатуры:
		// Штрих - код номенклатуры
		xmlШтрихКодНоменклатуры = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCT", Истина);
		Если НЕ xmlШтрихКодНоменклатуры = Неопределено Тогда
			НоваяСтрокаТЧ.ШтрихКод = xmlШтрихКодНоменклатуры;
		Иначе
			Возврат 0;
		КонецЕсли;
		
		// Артикул покупателя(опциональное поле)
		xmlАртикулПокупателяСтрока = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "PRODUCTIDBUYER", Ложь);
		
		// Приоритетным является PRODUCTIDBUYER, если параметр присутствует, то используем его
		Если НЕ xmlАртикулПокупателяСтрока = Неопределено Тогда
			АртикулПокупателя = xmlАртикулПокупателяСтрока;
			СтруктураНоменклатуры=ПолучитьНоменклатуру(СтруктураДокумента.Контрагент,АртикулПокупателя, "");
			НоваяСтрокаТЧ.Номенклатура=СтруктураНоменклатуры.Номенклатура;
			НоваяСтрокаТЧ.АртикулПокупателя=АртикулПокупателя;
		КонецЕсли;
		
		// Если параметр PRODUCTIDBUYER отсутствует или по артикулу покупателя не удалось найти номенклатуру
		Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.Номенклатура)  Тогда
			СтруктураНоменклатуры=ПолучитьНоменклатуру(СтруктураДокумента.Контрагент, "", xmlШтрихКодНоменклатуры);
			НоваяСтрокаТЧ.Номенклатура=СтруктураНоменклатуры.Номенклатура;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.Номенклатура) Тогда
			Сообщить("Не найдена позиция номенклатуры (" + ?(Не ЗначениеЗаполнено(АртикулПокупателя), "штрих-код " + xmlШтрихКодНоменклатуры, "артикул " + АртикулПокупателя) + ") в строке " + xmlНомерСтрокиТЧ,СтатусСообщения.ОченьВажное);
			Возврат 0;
		КонецЕсли;
		//Характеристика номенклатуры
		НоваяСтрокаТЧ.ХарактеристикаНоменклатуры=СтруктураНоменклатуры.ХарактеристикаНоменклатуры;
		//Единица измерения (определяем из регистра сведений НоменклатураКонтрагентов)
		НоваяСтрокаТЧ.ЕдиницаИзмерения=СтруктураНоменклатуры.ЕдиницаИзмерения;
		
		// Цена продукта без НДС(обязательное поле)
		xmlЦена = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "UNITPRICE", Истина);
		Если НЕ xmlЦена = Неопределено Тогда
			НоваяСтрокаТЧ.Цена = Число(xmlЦена);
		Иначе
			Возврат 0;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДокумента.Вставить("CATALOGUE", CATALOGUE);
	
	Возврат СтруктураДокумента;
	
КонецФункции

// Процедура создает "xml" файл, в котором сохраняет информацию из заказа покупателя об отгруженых товарах
//
// Параметры:
//  ДокументЗаказ                  - ссылка на объект заказ, отчет о доставке которого необходимо отправить
//
Функция ПолучитьСтруктуруЗаказаПокупателя(ДокументЗаказПокупателя) Экспорт
	
	Масссив = ДокументЗаказПокупателя.Товары.НайтиСтроки(Новый Структура("Номенклатура",Справочники.Номенклатура.ПустаяСсылка()));
	
	Если НЕ Масссив.Количество()=0  Тогда
		ТекстСообщения = "";
		Для Каждого Эл Из Масссив Цикл
			ТекстСообщения = ", " + ТекстСообщения + Эл.НомерСтроки;
		КонецЦикла;
		Предупреждение("Есть строки с незаполненными позициями номенклатуры:"+Сред(ТекстСообщения,3));
		Возврат Неопределено;
	КонецЕсли;
	
	//Масссив=ДокументЗаказПокупателя.Товары.НайтиСтроки(Новый Структура("Количество",0));
	//
	//Если НЕ Масссив.Количество() = 0  Тогда
	//	ТекстСообщения = "";
	//	Для Каждого Эл Из Масссив Цикл
	//		ТекстСообщения = ", " + ТекстСообщения + Эл.НомерСтроки;
	//	КонецЦикла;
	//	Предупреждение("Есть строки с нулевым количеством номенклатуры:"+Сред(ТекстСообщения,3));
	//	Возврат Неопределено;
	//КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаменитьСимволы(СокрЛП(ДокументЗаказПокупателя.Номер))) Тогда
		Предупреждение("Не заполнен номер документа! Продолжение обработки не возможно!",5);
		Возврат Неопределено;
	КонецЕсли;  
	
	Если Не ЗначениеЗаполнено(ЗаменитьСимволы(СокрЛП(ДокументЗаказПокупателя.НомерПокупателя))) Тогда
		Предупреждение("Не заполнен номер покупателя! Продолжение обработки не возможно!",5);
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДокумента = СоздатьСтруктуруДокументаЗаказПокупателя(ДокументЗаказПокупателя);
	
	Возврат СтруктураДокумента;
	
КонецФункции

// Процедура создает "xml" файл, в котором сохраняет информацию из заказа покупателя об отгруженых товарах
//
// Параметры:
//  ДокументЗаказ                  - ссылка на объект заказ, отчет о доставке которого необходимо отправить
//
Функция ПолучитьСтруктуруРасходнойНакладной(ДокументРасходнаяНакладная, Инвойс = Ложь) Экспорт
	
	Масссив = ДокументРасходнаяНакладная.Товары.НайтиСтроки(Новый Структура("Номенклатура",Справочники.Номенклатура.ПустаяСсылка()));
	
	Если НЕ Масссив.Количество() = 0  Тогда
		ТекстСообщения = "";
		Для Каждого Эл Из Масссив Цикл
			ТекстСообщения = ", " + ТекстСообщения + Эл.НомерСтроки;
		КонецЦикла;
		Предупреждение("Есть строки с незаполненными позициями номенклатуры:" + Сред(ТекстСообщения,3));
		Возврат Неопределено;
	КонецЕсли;
	
	Масссив = ДокументРасходнаяНакладная.Товары.НайтиСтроки(Новый Структура("Количество",0));
	
	Если НЕ Масссив.Количество() = 0  Тогда
		ТекстСообщения = "";
		Для Каждого Эл Из Масссив Цикл
			ТекстСообщения = ", " + ТекстСообщения + Эл.НомерСтроки;
		КонецЦикла;
		Предупреждение("Есть строки с нулевым количеством номенклатуры:" + Сред(ТекстСообщения,3));
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаменитьСимволы(СокрЛП(ДокументРасходнаяНакладная.Номер))) Тогда
		Предупреждение("Не заполнен номер документа! Продолжение обработки не возможно!",5);
		Возврат Неопределено;
	КонецЕсли;  
	
	Если Не ЗначениеЗаполнено(ЗаменитьСимволы(СокрЛП(ДокументРасходнаяНакладная.Сделка.НомерПокупателя))) Тогда
		Предупреждение("Не заполнен номер покупателя! Продолжение обработки не возможно!",5);
		Возврат Неопределено;
	КонецЕсли;
	Если не Инвойс Тогда
		СтруктураДокумента = СоздатьСтруктуруДокументаРеализацияТоваровУслуг(ДокументРасходнаяНакладная);
	Иначе
		СтруктураДокумента = СоздатьСтруктуруИнвойса(ДокументРасходнаяНакладная);
	КонецЕсли; 
	
	
	Возврат СтруктураДокумента;
	
КонецФункции

// Процедура создает "xml" файл, в котором сохраняет информацию из заказа покупателя об отгруженых товарах
//
// Параметры:
//  ДокументЗаказ                  - ссылка на объект заказ, отчет о доставке которого необходимо отправить
//
Функция ПолучитьСтруктуруЗаказаПоставщику(ДокументЗаказПоставщику) Экспорт
	
	Масссив = ДокументЗаказПоставщику.Товары.НайтиСтроки(Новый Структура("Номенклатура",Справочники.Номенклатура.ПустаяСсылка()));
	
	Если НЕ Масссив.Количество() = 0  Тогда
		ТекстСообщения = "";
		Для Каждого Эл Из Масссив Цикл
			ТекстСообщения = ", " + ТекстСообщения + Эл.НомерСтроки;
		КонецЦикла;
		Предупреждение("Есть строки с незаполненными позициями номенклатуры:" + Сред(ТекстСообщения,3));
		Возврат Неопределено;
	КонецЕсли;
	
	Масссив = ДокументЗаказПоставщику.Товары.НайтиСтроки(Новый Структура("Количество",0));
	
	Если НЕ Масссив.Количество() = 0  Тогда
		ТекстСообщения = "";
		Для Каждого Эл Из Масссив Цикл
			ТекстСообщения = ", " + ТекстСообщения + Эл.НомерСтроки;
		КонецЦикла;
		Предупреждение("Есть строки с нулевым количеством номенклатуры:" + Сред(ТекстСообщения,3));
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаменитьСимволы(СокрЛП(ДокументЗаказПоставщику.Номер))) Тогда
		Предупреждение("Не заполнен номер документа! Продолжение обработки не возможно!",5);
		Возврат Неопределено;
	КонецЕсли;  
	
	СтруктураДокумента = СоздатьСтруктуруДокументаЗаказПоставщику(ДокументЗаказПоставщику);
	
	Возврат СтруктураДокумента;
	
КонецФункции

// Процедура создает "xml" файл, в котором сохраняет информацию из заказа покупателя об отгруженых товарах
//
// Параметры:
//  ДокументЗаказ                  - ссылка на объект заказ, отчет о доставке которого необходимо отправить
//
Функция ПолучитьСтруктуруПоступленияТоваровУслуг(ДокументПоступлениеТоваровУслуг) Экспорт
	
	Масссив = ДокументПоступлениеТоваровУслуг.Товары.НайтиСтроки(Новый Структура("Номенклатура",Справочники.Номенклатура.ПустаяСсылка()));
	
	Если НЕ Масссив.Количество() = 0  Тогда
		ТекстСообщения = "";
		Для Каждого Эл Из Масссив Цикл
			ТекстСообщения = ", " + ТекстСообщения + Эл.НомерСтроки;
		КонецЦикла;
		Предупреждение("Есть строки с незаполненными позициями номенклатуры:" + Сред(ТекстСообщения,3));
		Возврат Неопределено;
	КонецЕсли;
	
	Масссив = ДокументПоступлениеТоваровУслуг.Товары.НайтиСтроки(Новый Структура("Количество",0));
	
	Если НЕ Масссив.Количество() = 0  Тогда
		ТекстСообщения = "";
		Для Каждого Эл Из Масссив Цикл
			ТекстСообщения = ", " + ТекстСообщения + Эл.НомерСтроки;
		КонецЦикла;
		Предупреждение("Есть строки с нулевым количеством номенклатуры:" + Сред(ТекстСообщения,3));
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаменитьСимволы(СокрЛП(ДокументПоступлениеТоваровУслуг.Номер))) Тогда
		Предупреждение("Не заполнен номер документа! Продолжение обработки не возможно!",5);
		Возврат Неопределено;
	КонецЕсли;  
	
	СтруктураДокумента = СоздатьСтруктуруДокументаПоступлениеТоваровУслуг(ДокументПоступлениеТоваровУслуг);
	
	Возврат СтруктураДокумента;
	
КонецФункции


//ПРОЦЕДУРЫ УЧАСТКА ВЫГРУЗКИ ОТЧЕТА О ДОСТАВКЕ


// Процедура создает "xml" файл, в котором сохраняет информацию из заказа покупателя об отгруженых товарах
//
// Параметры:
//  ДокументЗаказ                  - ссылка на объект заказ, отчет о доставке которого необходимо отправить
//
Процедура ОтправитьОтчетООтгрузке(ДокументЗаказ) Экспорт
    Масссив=ДокументЗаказ.Товары.НайтиСтроки(Новый Структура("Номенклатура",Справочники.Номенклатура.ПустаяСсылка()));
    Если НЕ Масссив.Количество()=0  Тогда
        ТекстСообщения="";
        Для Каждого Эл Из Масссив Цикл
            ТекстСообщения=", "+ТекстСообщения+Эл.НомерСтроки;
        КонецЦикла;
        Предупреждение("Есть строки с незаполненными позициями номенклатуры:"+Сред(ТекстСообщения,3));
        Возврат;
    КонецЕсли;
    Масссив=ДокументЗаказ.Товары.НайтиСтроки(Новый Структура("Количество",0));
    Если НЕ Масссив.Количество()=0  Тогда
        ТекстСообщения="";
        Для Каждого Эл Из Масссив Цикл
            ТекстСообщения=", "+ТекстСообщения+Эл.НомерСтроки;
        КонецЦикла;
        Предупреждение("Есть строки с нулевым количеством номенклатуры:"+Сред(ТекстСообщения,3));
        Возврат;
    КонецЕсли;
    Если Не ЗначениеЗаполнено(СокрЛП(ДокументЗаказ.Номер)) Тогда
        Предупреждение("Не заполнен номер документа! Продолжение обработки не возможно!",5);
        Возврат;
    КонецЕсли;
    Если Не ЗначениеЗаполнено(СокрЛП(ДокументЗаказ.НомерПокупателя)) Тогда
        Предупреждение("Не заполнен номер покупателя! Продолжение обработки не возможно!",5);
        Возврат;
    КонецЕсли;
    ДокументЗаказ.Записать();
    СтруктураДокумента=СоздатьСтруктуруДокумента(ДокументЗаказ);
    ЗаписатьФайл(СтруктураДокумента);
	ПолноеИмяФайла = СтруктураДокумента.EDIMESSAGE;
	Файл = Новый Файл(ПолноеИмяФайла);
	Если Файл.Существует() Тогда
        
        Попытка
			Сервер = ПодключитьсяЕслиНеПодключено();
		Исключение
			Сообщить("Не удалось подключиться к серверу!");
			Возврат;
		КонецПопытки;

			Сервер.Записать(ПолноеИмяФайла, "/outbox/" + Файл.Имя);
	КонецЕсли;
	

КонецПроцедуры

// Функция предназначена для создания "xml" файла на основе параметров структуры документа
//
// Параметры:
//  СтруктураДокумента                - значение типа "Структура", содержащее параметры документа
//
// Возвращаемое значение:
// Нет.
//
Функция ЗаписатьФайл(СтруктураДокумента)

    ЗаписьXML = Новый ЗаписьXML;
    ЗаписьXML.ОткрытьФайл(СтруктураДокумента.EDIMESSAGE, "UTF-8");
    ЗаписьXML.ЗаписатьОбъявлениеXML();
    ЗаписьXML.ЗаписатьНачалоЭлемента("DESADV");//DESADV

    //NUMBER
    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.NUMBER,"NUMBER");

    //DATE
    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DATE,"DATE");

    //DELIVERYDATE
    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DELIVERYDATE,"DELIVERYDATE");

    //DELIVERYTIME
    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DELIVERYTIME,"DELIVERYTIME");

    //ORDERNUMBER
    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.ORDERNUMBER,"ORDERNUMBER");

    //ORDERDATE
    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.ORDERDATE,"ORDERDATE");

    //HEAD
    ЗаписьXML.ЗаписатьНачалоЭлемента("HEAD");//HEAD

    //SUPPLIER
    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.SUPPLIER,"SUPPLIER");
    //BUYER
    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.BUYER,"BUYER");
    //DELIVERYPLACE
    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DELIVERYPLACE,"DELIVERYPLACE");
    //ORDERPARTNER
    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.ORDERPARTNER,"ORDERPARTNER");
    //SENDER
    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.SENDER,"SENDER");
    //RECIPIENT
    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.RECIPIENT,"RECIPIENT");
    //EDIINTERCHANGEID
    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.EDIINTERCHANGEID,"EDIINTERCHANGEID");
    //EDIMESSAGE
    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.EDIMESSAGE,"EDIMESSAGE");

    //PACKINGSEQUENCE
    ЗаписьXML.ЗаписатьНачалоЭлемента("PACKINGSEQUENCE");//PACKINGSEQUENCE

    //HIERARCHICALID
    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.HIERARCHICALID,"HIERARCHICALID");

    Для Каждого ТекСтрока Из СтруктураДокумента.ДокументТабЧасть Цикл
        //POSITION
        ЗаписьXML.ЗаписатьНачалоЭлемента("POSITION");//POSITION

        //POSITIONNUMBER
        ЗаписатьXML(ЗаписьXML,ТекСтрока.POSITIONNUMBER,"POSITIONNUMBER");

        //PRODUCT
        ЗаписатьXML(ЗаписьXML,ТекСтрока.PRODUCT,"PRODUCT");

        //DELIVEREDQUANTITY
        ЗаписатьXML(ЗаписьXML,ТекСтрока.DELIVEREDQUANTITY,"DELIVEREDQUANTITY");

        //Только Для Метро
        //PRODUCTIDBUYER
        Если ЗначениеЗаполнено(ТекСтрока.PRODUCTIDBUYER) Тогда
            ЗаписатьXML(ЗаписьXML,ТекСтрока.PRODUCTIDBUYER,"PRODUCTIDBUYER");
        КонецЕсли;
        ЗаписьXML.ЗаписатьКонецЭлемента();//POSITION
    КонецЦикла;

    ЗаписьXML.ЗаписатьКонецЭлемента();//PACKINGSEQUENCE
    ЗаписьXML.ЗаписатьКонецЭлемента();//HEAD
    ЗаписьXML.ЗаписатьКонецЭлемента(); //DESADV
    Предупреждение("Отчет об отгрузке отправлен в каталог Import платформы eXite",10);
КонецФункции

// Процедура создает структуру документа, содержащую параметры документа
//
// Параметры:
//  ДокументЗаказ                  - ссылка на объект заказ, отчет о доставке которого необходимо отправить
//
Функция  СоздатьСтруктуруДокумента(ДокументЗаказ)
    // Вставить содержимое обработчика.
    ДокументЗаказ.Записать(РежимЗаписиДокумента.Запись);
    СтруктураДокумента=Новый Структура;
    СтруктураДокумента.Вставить("NUMBER",ЗаменитьСимволы(СокрЛП(ДокументЗаказ.Номер)));
    СтруктураДокумента.Вставить("DATE",Формат(ДокументЗаказ.Дата,"ДФ=""гггг-ММ-дд"""));
    СтруктураДокумента.Вставить("DELIVERYTIME",Формат(ДокументЗаказ.ДатаОтгрузки,"ДФ=""ЧЧ:мм"""));///
    СтруктураДокумента.Вставить("DELIVERYDATE",Формат(ДокументЗаказ.ДатаОтгрузки,"ДФ=""гггг-ММ-дд""")); ////
    СтруктураДокумента.Вставить("ORDERNUMBER",ЗаменитьСимволы(СокрЛП(ДокументЗаказ.НомерПокупателя)));
    СтруктураДокумента.Вставить("ORDERDATE",Формат(ДокументЗаказ.Дата,"ДФ=""гггг-ММ-дд"""));

    СтруктураДокумента.Вставить("SUPPLIER",СокрЛП(ДокументЗаказ.Организация.GLN));
    СтруктураДокумента.Вставить("BUYER",СокрЛП(ДокументЗаказ.Контрагент.GLN));
    СтруктураДокумента.Вставить("DELIVERYPLACE",СокрЛП(ДокументЗаказ.АдресДоставки.GLN));
    СтруктураДокумента.Вставить("ORDERPARTNER",СокрЛП(ДокументЗаказ.АдресДоставки.GLN));
    СтруктураДокумента.Вставить("SENDER",СокрЛП(ДокументЗаказ.Организация.GLN));
    СтруктураДокумента.Вставить("RECIPIENT",СокрЛП(ДокументЗаказ.Контрагент.GLN));
    EDIINTERCHANGEID=?(ЗначениеЗаполнено(ДокументЗаказ.EDIINTERCHANGEID),СокрЛП(ДокументЗаказ.EDIINTERCHANGEID),ПолучитьEDIINTERCHANGEID(ДокументЗаказ.Контрагент));//"55220001900197"
    СтруктураДокумента.Вставить("EDIINTERCHANGEID",EDIINTERCHANGEID);
    //EDIMESSAGE
    СтруктураДокумента.Вставить("EDIMESSAGE",КаталогВременныхФайлов+Формат(ТекущаяДата(),"ДФ=""гггг.ММ.дд-ЧЧ.мм.сс.000""")+"-OUT-"+EDIINTERCHANGEID+"_DESADV.xml");

    СтруктураДокумента.Вставить("HIERARCHICALID",1);

    ДокументТабЧасть=Новый ТаблицаЗначений;
    ДокументТабЧасть.Колонки.Добавить("POSITIONNUMBER");
    ДокументТабЧасть.Колонки.Добавить("PRODUCT");
    ДокументТабЧасть.Колонки.Добавить("DELIVEREDQUANTITY");
    ДокументТабЧасть.Колонки.Добавить("PRODUCTIDBUYER");
    Для Каждого ТекСтрока Из ДокументЗаказ.Товары Цикл
        НовСтрока=ДокументТабЧасть.Добавить();
        НовСтрока.POSITIONNUMBER=ТекСтрока.НомерСтроки;
        Запрос=Новый Запрос;
        Запрос.Текст =
        "ВЫБРАТЬ
        |    НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента,
        |    НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента
        |ИЗ
        |    РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
        |ГДЕ
        |    НоменклатураКонтрагентов.Контрагент = &Контрагент
        |    И НоменклатураКонтрагентов.Номенклатура = &Номенклатура
        |    И НоменклатураКонтрагентов.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
        |    И НоменклатураКонтрагентов.ЕдиницаИзмерения = &ЕдиницаИзмерения";
        Запрос.УстановитьПараметр("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
        Запрос.УстановитьПараметр("Контрагент", ДокументЗаказ.Контрагент);
        Запрос.УстановитьПараметр("Номенклатура", ТекСтрока.Номенклатура);
        Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ТекСтрока.ХарактеристикаНоменклатуры);
        Выборка=Запрос.Выполнить().Выбрать();
        Пока Выборка.Следующий() Цикл
            НовСтрока.PRODUCT=СокрЛП(Выборка.ШтрихКодНоменклатурыКонтрагента);
            НовСтрока.PRODUCTIDBUYER=?(СокрЛП(ДокументЗаказ.Контрагент.GLN)="4820086630009",СокрЛП(Выборка.АртикулНоменклатурыКонтрагента),"");
        КонецЦикла;
        НовСтрока.DELIVEREDQUANTITY=ТекСтрока.Количество;

    КонецЦикла;

    СтруктураДокумента.Вставить("ДокументТабЧасть",ДокументТабЧасть);
    Возврат СтруктураДокумента;
КонецФункции 

 



//ПРОЦЕДУРЫ ОТПРАВКИ ЭКСПОРТИРУМЫХ ДОКУМЕНТОВ

Процедура ОтправитьDESPADV(МассивРеализацииТоваровУслуг) Экспорт
	
	Если Сервер = Неопределено Тогда
		Предупреждение("Отсутствует подключение к FTP!");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваровУслуг,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивРеализацииТоваровУслуг)
	|ИТОГИ ПО
	|	Контрагент";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивРеализацииТоваровУслуг", МассивРеализацииТоваровУслуг);
	ВыборкаПоКонтрагентам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	Пока ВыборкаПоКонтрагентам.Следующий() Цикл
		
		ВыборкаПоДокументам = ВыборкаПоКонтрагентам.Выбрать();
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			СтруктураДокумента = ПолучитьСтруктуруРасходнойНакладной(ВыборкаПоДокументам.РеализацияТоваровУслуг);
			
			ПолноеИмяФайла = ЗаписатьФайлDESADV(СтруктураДокумента);
			
			//ПолноеИмяФайла = КаталогВременныхФайлов + СтруктураДокумента.EDIMESSAGE + "_DESADV.xml";
			
			Файл = Новый Файл(ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Сервер.Записать(ПолноеИмяФайла, ПутьНаСервереIN + "DESADV/"+ Файл.Имя);
				Сообщить("Уведомление об отгрузке " + Файл.Имя + " отправлен в каталог IN");
			Иначе
				Сообщить("Файл уведомления об отгрузке " + Файл.Имя+ " не записан!",СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;			
			
			ДокументРасходная = ВыборкаПоДокументам.РеализацияТоваровУслуг.ПолучитьОбъект();
			ДокументРасходная.eXiteСостояние = Перечисления.eXiteСостояние.Отправлен;
			ДокументРасходная.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

Процедура ОтправитьORDERS(МассивЗаказовПоставщику) Экспорт
	
	Если Сервер = Неопределено Тогда
		Предупреждение("Отсутствует подключение к FTP!");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику,
	|	ЗаказПоставщику.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&МассивЗаказовПоставщику)
	|ИТОГИ ПО
	|	Контрагент";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивЗаказовПоставщику", МассивЗаказовПоставщику);
	ВыборкаПоКонтрагентам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКонтрагентам.Следующий() Цикл
		
		ВыборкаПоДокументам = ВыборкаПоКонтрагентам.Выбрать();
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			СтруктураДокумента = ПолучитьСтруктуруЗаказаПоставщику(ВыборкаПоДокументам.ЗаказПоставщику);
			
			ЗаписатьФайлORDERS(СтруктураДокумента);
			
			ПолноеИмяФайла = КаталогВременныхФайлов + СтруктураДокумента.EDIMESSAGE + "_ORDERS.xml";
			
			Файл = Новый Файл(ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Сервер.Записать(ПолноеИмяФайла, "/comarch/out/" + СтруктураДокумента.EDIMESSAGE + "_ORDERS.xml");
			КонецЕсли;
			
			Сообщить("Заказ " + СтруктураДокумента.EDIMESSAGE + " отправлен в каталог ""outbox"" платформы eXite");
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьRECADV(МассивПоступленийТоваровУслуг) Экспорт
	
	Если Сервер = Неопределено Тогда
		Предупреждение("Отсутствует подключение к FTP!");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ПоступлениеТоваровУслуг,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В(&МассивПоступленийТоваровУслуг)
	|ИТОГИ ПО
	|	Контрагент";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивПоступленийТоваровУслуг", МассивПоступленийТоваровУслуг);
	ВыборкаПоКонтрагентам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКонтрагентам.Следующий() Цикл
		
		ВыборкаПоДокументам = ВыборкаПоКонтрагентам.Выбрать();
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			СтруктураДокумента = ПолучитьСтруктуруПоступленияТоваровУслуг(ВыборкаПоДокументам.ПоступлениеТоваровУслуг);
			
			ЗаписатьФайлRECADV(СтруктураДокумента);
			
			ПолноеИмяФайла = КаталогВременныхФайлов + СтруктураДокумента.EDIMESSAGE + "_RECADV.xml";
			
			Файл = Новый Файл(ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Сервер.Записать(ПолноеИмяФайла, "/outbox/" + СтруктураДокумента.EDIMESSAGE + "_RECADV.xml");
			КонецЕсли;
			
			Сообщить("Заказ " + СтруктураДокумента.EDIMESSAGE + " отправлен в каталог ""outbox"" платформы eXite");
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьORDRSP(МассивЗаказовПокупателя) Экспорт
	
	Если Сервер = Неопределено Тогда
		Предупреждение("Отсутствует подключение к FTP!");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК ЗаказПокупателя,
	|	ЗаказПокупателя.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивЗаказовПокупателя)
	|ИТОГИ ПО
	|	Контрагент";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивЗаказовПокупателя", МассивЗаказовПокупателя);
	ВыборкаПоКонтрагентам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоКонтрагентам.Следующий() Цикл
		
		ВыборкаПоДокументам = ВыборкаПоКонтрагентам.Выбрать();
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			СтруктураДокумента = ПолучитьСтруктуруЗаказаПокупателя(ВыборкаПоДокументам.ЗаказПокупателя);
			
			Если ВыборкаПоДокументам.ЗаказПокупателя.Контрагент.eXiteПодтверждениеЗаказа Тогда
				
				ЗаписатьФайлORDRSP(СтруктураДокумента);
				
				ПолноеИмяФайла = КаталогВременныхФайлов + СтруктураДокумента.EDIMESSAGE + "_ORDRSP.xml";
				
				Файл = Новый Файл(ПолноеИмяФайла);
				Если Файл.Существует() Тогда
					Сервер.Записать(ПолноеИмяФайла, "/outbox/" + СтруктураДокумента.EDIMESSAGE + "_ORDRSP.xml");
				КонецЕсли;
				
				Сообщить("Подтверждение заказа " + СтруктураДокумента.EDIMESSAGE + " отправлен в каталог outbox платформы eXite");
				
			КонецЕсли;
			
			ДокументЗаказ = ВыборкаПоДокументам.ЗаказПокупателя.ПолучитьОбъект();
			ДокументЗаказ.eXiteСостояние = Перечисления.eXiteСостояние.Отправлен;
			ДокументЗаказ.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

Процедура ОтправитьINVOICE(МассивРеализацииТоваровУслугДляОтправкиСчета) Экспорт
	
	Если Сервер = Неопределено Тогда
		Предупреждение("Отсутствует подключение к FTP!");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваровУслуг,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивРеализацииТоваровУслугДляОтправкиСчета)
	|ИТОГИ ПО
	|	Контрагент";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивРеализацииТоваровУслугДляОтправкиСчета", МассивРеализацииТоваровУслугДляОтправкиСчета);
	ВыборкаПоКонтрагентам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Налоговые = ПолучитьНН(МассивРеализацииТоваровУслугДляОтправкиСчета);
	Пока ВыборкаПоКонтрагентам.Следующий() Цикл
		
		ВыборкаПоДокументам = ВыборкаПоКонтрагентам.Выбрать();
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			СтруктураДокумента = ПолучитьСтруктуруРасходнойНакладной(ВыборкаПоДокументам.РеализацияТоваровУслуг, Истина);
			
				
				ПолноеИмяФайла = ЗаписатьФайлINVOICE(СтруктураДокумента);
				
				//ПолноеИмяФайла = КаталогВременныхФайлов + СтруктураДокумента.EDIMESSAGE + "_INVOICE.xml";
				
				Файл = Новый Файл(ПолноеИмяФайла);
				Если Файл.Существует() Тогда
					//Сервер.Записать(ПолноеИмяФайла, "/outbox/" + СтруктураДокумента.EDIMESSAGE + "_INVOICE.xml");
					Сервер.Записать(ПолноеИмяФайла, ПутьНаСервереIN + "DELNOT_TN/"+ Файл.Имя);
					//Сообщить("Счет " + СтруктураДокумента.EDIMESSAGE + " отправлен в каталог outbox платформы eXite");
					Сообщить("Товарная накладная " + Файл.Имя + " отправлена в каталог IN");
				Иначе
					Сообщить("Файл товарной накладной " + Файл.Имя+ " не записан!",СтатусСообщения.Важное);
					//Сообщить("Файл счета " + СтруктураДокумента.EDIMESSAGE + " не записан!",СтатусСообщения.Важное);					
				КонецЕсли;
				
			//ДокументРасходная = ВыборкаПоДокументам.РеализацияТоваровУслуг.ПолучитьОбъект();
			//ДокументРасходная.eXiteСостояние = Перечисления.eXiteСостояние.Отправлен;
			//ДокументРасходная.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

Процедура ОтправитьPRICAT() Экспорт
	
	ПолучитьFTPСоединение();
	
	Если Сервер = Неопределено Тогда
		Предупреждение("Отсутствует подключение к FTP!");
		Возврат;
	КонецЕсли;
	
	СтруктураДокумента = ?(НаличиеСпециальныхДокументов, СоздатьСтруктуруПрайслистаПоДокументам(), СоздатьСтруктуруПрайслистаПоРегистру());
	Если СтруктураДокумента.CATALOGUE.Количество() = 0 Тогда
		Сообщить("Файл " + КаталогВременныхФайлов + СтруктураДокумента.EDIMESSAGE + "_PRICAT.xml не записан поскольку отсутствуют товары в документе прайс-лист");
		Возврат;
	КонецЕсли;
	
	ЗаписатьФайлPRICAT(СтруктураДокумента);
	
	ПолноеИмяФайла = КаталогВременныхФайлов + СтруктураДокумента.EDIMESSAGE + "_PRICAT.xml";
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Если Файл.Существует() Тогда
		Сервер.Записать(ПолноеИмяФайла, "/outbox/" + СтруктураДокумента.EDIMESSAGE + "_PRICAT.xml");
	КонецЕсли;
	
	Сообщить("Прайс-лист " + СтруктураДокумента.EDIMESSAGE + " отправлен в каталог outbox платформы eXite");
	
КонецПроцедуры


//ПРОЦЕДУРЫ ЗАПИСИ ФАЙЛОВ ПРИ ИМПОРТЕ

// Функция предназначена для создания "xml" файла на основе параметров структуры документа
//
// Параметры:
//  СтруктураДокумента                - значение типа "Структура", содержащее параметры документа
//
// Возвращаемое значение:
// Нет.
//
Процедура ЗаписатьФайлPRICAT(СтруктураДокумента) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ЗаписьXML.ОткрытьФайл(КаталогВременныхФайлов + СтруктураДокумента.EDIMESSAGE + "_PRICAT.xml", "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("PRICAT");//PRICAT
	
	//ACTION
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.ACTION, "ACTION");
	
	//NUMBER
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.NUMBER, "NUMBER");
	
	//DATE
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.DATE, "DATE");
	
	//PRICATNUMBER
	Если СтруктураДокумента.Свойство("PRICATNUMBER") И ЗначениеЗаполнено(СтруктураДокумента.PRICATNUMBER) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.PRICATNUMBER, "PRICATNUMBER");
	КонецЕсли;
	
	//PRICATDATE
	Если СтруктураДокумента.Свойство("PRICATDATE") И ЗначениеЗаполнено(СтруктураДокумента.PRICATDATE) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.PRICATDATE, "PRICATDATE");
	КонецЕсли;
	
	//DATEFROM
	Если СтруктураДокумента.Свойство("DATEFROM") И ЗначениеЗаполнено(СтруктураДокумента.DATEFROM) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.DATEFROM, "DATEFROM");
	КонецЕсли;
	
	//TIMEFROM
	Если СтруктураДокумента.Свойство("TIMEFROM") И ЗначениеЗаполнено(СтруктураДокумента.TIMEFROM) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.TIMEFROM, "TIMEFROM");
	КонецЕсли;
	//PRICATINFO
	Если СтруктураДокумента.Свойство("PRICATINFO") И ЗначениеЗаполнено(СтруктураДокумента.PRICATINFO) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.PRICATINFO, "PRICATINFO");
	КонецЕсли;
	//SUPPLIER
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.SUPPLIER, "SUPPLIER");
	
	//BUYER
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.BUYER, "BUYER");
	
	//SENDER
	Если СтруктураДокумента.Свойство("SENDER") И ЗначениеЗаполнено(СтруктураДокумента.SENDER) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.SENDER, "SENDER");
	КонецЕсли;
	
	//RECIPIENT
	Если СтруктураДокумента.Свойство("RECIPIENT") И ЗначениеЗаполнено(СтруктураДокумента.RECIPIENT) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.RECIPIENT, "RECIPIENT");
	КонецЕсли;
	
	//ORDERCONTACT
	ЗаписьXML.ЗаписатьНачалоЭлемента("ORDERCONTACT");//ORDERCONTACT
	
	//CONTACTFACE
	Если СтруктураДокумента.Свойство("CONTACTFACE") И ЗначениеЗаполнено(СтруктураДокумента.CONTACTFACE) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.CONTACTFACE, "CONTACTFACE");
	КонецЕсли;
	
	//TELEPHON
	Если СтруктураДокумента.Свойство("TELEPHON") И ЗначениеЗаполнено(СтруктураДокумента.TELEPHON) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.TELEPHON, "TELEPHON");
	КонецЕсли;
	//FAX
	Если СтруктураДокумента.Свойство("FAX") И ЗначениеЗаполнено(СтруктураДокумента.FAX) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.FAX, "FAX");
	КонецЕсли;
	//EMAIL
	Если СтруктураДокумента.Свойство("EMAIL") И ЗначениеЗаполнено(СтруктураДокумента.EMAIL) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.EMAIL, "EMAIL");
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //ORDERCONTACT
	
	//VAT
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.VAT, "VAT");
	//CURRENCY
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.CURRENCY, "CURRENCY");
	//EDIINTERCHANGEID
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.EDIINTERCHANGEID, "EDIINTERCHANGEID");
	
	
	//CATALOGUE
	ЗаписьXML.ЗаписатьНачалоЭлемента("CATALOGUE");//CATALOGUE
	POSITIONNUMBER = 1;
	Для Каждого ТекСтрока Из СтруктураДокумента.CATALOGUE Цикл
		//POSITION 
		ЗаписьXML.ЗаписатьНачалоЭлемента("POSITION");//POSITION
		
		//POSITIONNUMBER 
		ЗаписатьXML(ЗаписьXML, POSITIONNUMBER, "POSITIONNUMBER");
		
		//ACTION 
		ЗаписатьXML(ЗаписьXML, ТекСтрока.ACTION, "ACTION");
		
		//PRODUCT 
		ЗаписатьXML(ЗаписьXML, ТекСтрока.PRODUCT, "PRODUCT");
		
		//PRODUCTNAME 
		ЗаписатьXML(ЗаписьXML, ТекСтрока.PRODUCTNAME, "PRODUCTNAME");
		
		//IDSUPPLIER
		Если СтруктураДокумента.Свойство("IDSUPPLIER") И ЗначениеЗаполнено(ТекСтрока.IDSUPPLIER) Тогда
			ЗаписатьXML(ЗаписьXML, ТекСтрока.IDSUPPLIER, "IDSUPPLIER");
		КонецЕсли;
		
		//IDBUYER
		Если СтруктураДокумента.Свойство("IDBUYER") И  ЗначениеЗаполнено(ТекСтрока.IDBUYER) Тогда
			ЗаписатьXML(ЗаписьXML, ТекСтрока.IDBUYER, "IDBUYER");
		КонецЕсли;
		//TAXRATE 
		ЗаписатьXML(ЗаписьXML, ТекСтрока.TAXRATE, "TAXRATE");
		
		//UNITPRICE 
		ЗаписатьXML(ЗаписьXML, ТекСтрока.UNITPRICE, "UNITPRICE");
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); //POSITION
		
		POSITIONNUMBER = POSITIONNUMBER + 1;
	КонецЦикла;	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //CATALOGUE
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //PRICAT
КонецПроцедуры

Процедура ЗаписатьФайлORDERS(СтруктураДокумента) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогВременныхФайлов + СтруктураДокумента.EDIMESSAGE + "_ORDERS.xml", "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("ORDER");//ORDERS
	
	//DOCUMENTNAME
	ЗаписатьXML(ЗаписьXML, 220, "DOCUMENTNAME");
	
	//NUMBER
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.NUMBER, "NUMBER");
	
	//DATE
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.DATE, "DATE");
	
	//DELIVERYDATE
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.DELIVERYDATE, "DELIVERYDATE");
	
	//DELIVERYTIME
	Если СтруктураДокумента.Свойство("DELIVERYTIME") И ЗначениеЗаполнено(СтруктураДокумента.DELIVERYTIME) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.DELIVERYTIME, "DELIVERYTIME");
	КонецЕсли;
	
	//CAMPAIGNNUMBER
	Если СтруктураДокумента.Свойство("CAMPAIGNNUMBER") И ЗначениеЗаполнено(СтруктураДокумента.CAMPAIGNNUMBER) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.CAMPAIGNNUMBER, "CAMPAIGNNUMBER");
	КонецЕсли;
	
	//CURRENCY
	Если СтруктураДокумента.Свойство("CURRENCY") И ЗначениеЗаполнено(СтруктураДокумента.CURRENCY) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.CURRENCY, "CURRENCY");
	КонецЕсли;
	
	//INFO
	Если СтруктураДокумента.Свойство("INFO") И ЗначениеЗаполнено(СтруктураДокумента.INFO) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.INFO, "INFO");
	КонецЕсли;
	
	
	//HEAD
	ЗаписьXML.ЗаписатьНачалоЭлемента("HEAD");//HEAD
	
	//SUPPLIER
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.SUPPLIER, "SUPPLIER");
	
	//BUYER
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.BUYER, "BUYER");
	
	//DELIVERYPLACE
	Если СтруктураДокумента.Свойство("DELIVERYPLACE") И ЗначениеЗаполнено(СтруктураДокумента.DELIVERYPLACE) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.DELIVERYPLACE, "DELIVERYPLACE");
	КонецЕсли;
	
	//INVOICEPARTNER
	Если СтруктураДокумента.Свойство("INVOICEPARTNER") И ЗначениеЗаполнено(СтруктураДокумента.INVOICEPARTNER) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.INVOICEPARTNER, "INVOICEPARTNER");
	КонецЕсли;
	
	//SENDER
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.SENDER, "SENDER");
	
	//RECIPIENT
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.RECIPIENT, "RECIPIENT");
	
	//EDIINTERCHANGEID
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.EDIINTERCHANGEID, "EDIINTERCHANGEID");
	POSITIONNUMBER = 1;
	Для Каждого ТекСтрока Из СтруктураДокумента.POSITION Цикл 
		//POSITION
		ЗаписьXML.ЗаписатьНачалоЭлемента("POSITION");//POSITION
		
		//POSITIONNUMBER
		ЗаписатьXML(ЗаписьXML, POSITIONNUMBER, "POSITIONNUMBER");
		
		//PRODUCT
		ЗаписатьXML(ЗаписьXML, ТекСтрока.PRODUCT, "PRODUCT");
		
		//PRODUCTIDSUPPLIER
		Если НЕ СтруктураДокумента.POSITION.Колонки.Найти("PRODUCTIDSUPPLIER") = Неопределено И ЗначениеЗаполнено(ТекСтрока.PRODUCTIDSUPPLIER) Тогда
			ЗаписатьXML(ЗаписьXML, ТекСтрока.PRODUCTIDSUPPLIER, "PRODUCTIDSUPPLIER");
		КонецЕсли;
		//PRODUCTIDBUYER
		Если  НЕ СтруктураДокумента.POSITION.Колонки.Найти("PRODUCTIDBUYER") = Неопределено И ЗначениеЗаполнено(ТекСтрока.PRODUCTIDBUYER) Тогда
			ЗаписатьXML(ЗаписьXML, ТекСтрока.PRODUCTIDBUYER, "PRODUCTIDBUYER");
		КонецЕсли;
		
		//ORDEREDQUANTITY
		ЗаписатьXML(ЗаписьXML, ТекСтрока.ORDEREDQUANTITY, "ORDEREDQUANTITY");
		
		//ORDEREDUNIT
		Если НЕ СтруктураДокумента.POSITION.Колонки.Найти("ORDEREDUNIT") = Неопределено И ЗначениеЗаполнено(ТекСтрока.ORDEREDUNIT) Тогда
			ЗаписатьXML(ЗаписьXML, ТекСтрока.ORDEREDUNIT, "ORDEREDUNIT");
		КонецЕсли;
		
		//QUANTITYOFCUINTU
		Если НЕ СтруктураДокумента.POSITION.Колонки.Найти("QUANTITYOFCUINTU") = Неопределено И ЗначениеЗаполнено(ТекСтрока.QUANTITYOFCUINTU) Тогда
			ЗаписатьXML(ЗаписьXML, ТекСтрока.QUANTITYOFCUINTU, "QUANTITYOFCUINTU");
		КонецЕсли;
		
		//ORDERPRICE
		Если НЕ СтруктураДокумента.POSITION.Колонки.Найти("ORDERPRICE") = Неопределено И ЗначениеЗаполнено(ТекСтрока.ORDERPRICE) Тогда
			ЗаписатьXML(ЗаписьXML, ТекСтрока.ORDERPRICE, "ORDERPRICE");
		КонецЕсли;
		
		//ORDERPRICEUNIT
		Если НЕ СтруктураДокумента.POSITION.Колонки.Найти("ORDERPRICEUNIT") = Неопределено И ЗначениеЗаполнено(ТекСтрока.ORDERPRICEUNIT) Тогда
			ЗаписатьXML(ЗаписьXML, ТекСтрока.ORDERPRICEUNIT, "ORDERPRICEUNIT");
		КонецЕсли;
		
		Если НЕ СтруктураДокумента.POSITION.Колонки.Найти("DESCRIPTION") = Неопределено И ЗначениеЗаполнено(ТекСтрока.DESCRIPTION) Тогда
			//CHARACTERISTIC
			ЗаписьXML.ЗаписатьНачалоЭлемента("CHARACTERISTIC");//CHARACTERISTIC
			//DESCRIPTION
			ЗаписатьXML(ЗаписьXML, ТекСтрока.DESCRIPTION, "DESCRIPTION");
			ЗаписьXML.ЗаписатьКонецЭлемента();//CHARACTERISTIC
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();//POSITION
		POSITIONNUMBER = POSITIONNUMBER + 1;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//HEAD
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //ORDERS
КонецПроцедуры

Процедура ЗаписатьФайлRECADV(СтруктураДокумента) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогВременныхФайлов + СтруктураДокумента.EDIMESSAGE + "_RECADV.xml", "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("RECADV");//RECADV
	
	//NUMBER
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.NUMBER, "NUMBER");
	
	//DATE 
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.DATE, "DATE");
	
	//RECEPTIONDATE 
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.RECEPTIONDATE, "RECEPTIONDATE");
	
	//ORDERNUMBER
	Если СтруктураДокумента.Свойство("ORDERNUMBER") И ЗначениеЗаполнено(СтруктураДокумента.ORDERNUMBER) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.ORDERNUMBER, "ORDERNUMBER");
	КонецЕсли;
	
	//ORDERDATE
	Если СтруктураДокумента.Свойство("ORDERDATE") И ЗначениеЗаполнено(СтруктураДокумента.ORDERDATE) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.ORDERDATE, "ORDERDATE");
	КонецЕсли;
	
	//DESADVNUMBER
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.DESADVNUMBER, "DESADVNUMBER");
	
	//DESADVDATE
	Если СтруктураДокумента.Свойство("DESADVDATE") И ЗначениеЗаполнено(СтруктураДокумента.DESADVDATE) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.DESADVDATE, "DESADVDATE");
	КонецЕсли;
	
	//DELIVERYNOTENUMBER
	Если СтруктураДокумента.Свойство("DESADVDATE") И ЗначениеЗаполнено(СтруктураДокумента.DESADVDATE) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.DELIVERYNOTENUMBER, "DELIVERYNOTENUMBER");
	КонецЕсли;
	
	//HEAD
	ЗаписьXML.ЗаписатьНачалоЭлемента("HEAD");//HEAD
	
	//SUPPLIER
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.SUPPLIER, "SUPPLIER");
	//BUYER 
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.BUYER, "BUYER");
	
	//DELIVERYPLACE
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.DELIVERYPLACE, "DELIVERYPLACE");
	
	//SENDER 
	Если СтруктураДокумента.Свойство("SENDER") И ЗначениеЗаполнено(СтруктураДокумента.SENDER) Тогда
		ЗаписатьXML(ЗаписьXML, СтруктураДокумента.SENDER, "SENDER");
	КонецЕсли;
	
	//RECIPIENT
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.RECIPIENT, "RECIPIENT");
	//EDIINTERCHANGEID   
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.EDIINTERCHANGEID, "EDIINTERCHANGEID");
	//EDIMESSAGE 
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.EDIMESSAGE, "EDIMESSAGE");
	
	//PACKINGSEQUENCE 
	ЗаписьXML.ЗаписатьНачалоЭлемента("PACKINGSEQUENCE");//PACKINGSEQUENCE
	
	//HIERARCHICALID 
	ЗаписатьXML(ЗаписьXML, СтруктураДокумента.HIERARCHICALID, "HIERARCHICALID");
	
	Для Каждого ТекСтрока Из СтруктураДокумента.POSITION Цикл
		//POSITION 
		ЗаписьXML.ЗаписатьНачалоЭлемента("POSITION");//POSITION
		
		//POSITIONNUMBER 
		ЗаписатьXML(ЗаписьXML, ТекСтрока.POSITIONNUMBER, "POSITIONNUMBER");
		
		//PRODUCT 
		ЗаписатьXML(ЗаписьXML, ТекСтрока.PRODUCT, "PRODUCT");
		
		//PRODUCTIDSUPPLIER
		Если ЗначениеЗаполнено(ТекСтрока.PRODUCTIDSUPPLIER) Тогда
			ЗаписатьXML(ЗаписьXML, ТекСтрока.PRODUCTIDSUPPLIER, "PRODUCTIDSUPPLIER"); 
		КонецЕсли;
		
		//PRODUCTIDBUYER
		Если ЗначениеЗаполнено(ТекСтрока.PRODUCTIDBUYER) Тогда
			ЗаписатьXML(ЗаписьXML, ТекСтрока.PRODUCTIDBUYER, "PRODUCTIDBUYER"); 
		КонецЕсли;
		
		//ACCEPTEDUNIT 
		Если ЗначениеЗаполнено(ТекСтрока.ACCEPTEDUNIT) Тогда
			ЗаписатьXML(ЗаписьXML, ТекСтрока.ACCEPTEDUNIT, "ACCEPTEDUNIT"); 
		КонецЕсли;
		
		//ACCEPTEDQUANTITY 
		ЗаписатьXML(ЗаписьXML, ТекСтрока.ACCEPTEDQUANTITY, "ACCEPTEDQUANTITY");
		
		//DELIVERQUANTITY 
		ЗаписатьXML(ЗаписьXML, ТекСтрока.DELIVERQUANTITY,"DELIVERQUANTITY");
		
		//ORDERQUANTITY 
		ЗаписатьXML(ЗаписьXML, ТекСтрока.ORDERQUANTITY, "ORDERQUANTITY");
		
		ЗаписьXML.ЗаписатьКонецЭлемента();//POSITION
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//PACKINGSEQUENCE
	ЗаписьXML.ЗаписатьКонецЭлемента();//RECADV
	ЗаписьXML.ЗаписатьКонецЭлемента(); //RECADV
	Сообщить("Уведомление о приеме " + СтруктураДокумента.EDIMESSAGE + " отправлен в каталог outbox платформы eXite");
КонецПроцедуры

// Функция предназначена для создания "xml" файла на основе параметров структуры документа
//
// Параметры:
//  СтруктураДокумента                - значение типа "Структура", содержащее параметры документа
//
// Возвращаемое значение:
// Нет.
//
Функция ЗаписатьФайлORDRSP(СтруктураДокумента)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогВременныхФайлов + СтруктураДокумента.EDIMESSAGE + "_ORDRSP.xml", "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("ORDRSP");//ORDRSP
	
	//NUMBER
	ЗаписатьXML(ЗаписьXML,СтруктураДокумента.NUMBER,"NUMBER");
	
	ЗаписатьXML(ЗаписьXML,СтруктураДокумента.ORDERNUMBER,"ORDERNUMBER");

	ЗаписатьXML(ЗаписьXML,СтруктураДокумента.ORDERDATE,"ORDERDATE");     
	
	//DATE 
	ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DATE,"DATE");
	
	//DELIVERYDATE 
	ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DELIVERYDATE,"DELIVERYDATE");
	
	//DELIVERYTIME
	Если ЗначениеЗаполнено(СтруктураДокумента.DELIVERYTIME) Тогда
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DELIVERYTIME,"DELIVERYTIME");
	КонецЕсли;
	
	//CAMPAIGNNUMBER
	Если ЗначениеЗаполнено(СтруктураДокумента.CAMPAIGNNUMBER) Тогда
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.CAMPAIGNNUMBER,"CAMPAIGNNUMBER");
	КонецЕсли;
	
	//CURRENCY
	Если ЗначениеЗаполнено(СтруктураДокумента.CURRENCY) Тогда
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.CURRENCY,"CURRENCY");
	КонецЕсли;
	
	//INFO
	Если ЗначениеЗаполнено(СтруктураДокумента.INFO) Тогда
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.INFO,"INFO");
	КонецЕсли;
	
	//HEAD
	ЗаписьXML.ЗаписатьНачалоЭлемента("HEAD");//HEAD
	
	//BUYER 
	ЗаписатьXML(ЗаписьXML,СтруктураДокумента.BUYER,"BUYER");
	
	//SUPPLIER
	ЗаписатьXML(ЗаписьXML,СтруктураДокумента.SUPPLIER,"SUPPLIER");
	
	//DELIVERYPLACE
	Если ЗначениеЗаполнено(СтруктураДокумента.DELIVERYPLACE) Тогда
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DELIVERYPLACE,"DELIVERYPLACE");
	КонецЕсли;
	
	//INVOICEPARTNER 
	Если ЗначениеЗаполнено(СтруктураДокумента.INVOICEPARTNER) Тогда
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.INVOICEPARTNER,"INVOICEPARTNER");
	КонецЕсли;
	
	//SENDER 
	ЗаписатьXML(ЗаписьXML,СтруктураДокумента.SENDER,"SENDER");
	
	//RECIPIENT
	ЗаписатьXML(ЗаписьXML,СтруктураДокумента.RECIPIENT,"RECIPIENT");
	
	//EDIINTERCHANGEID   
	ЗаписатьXML(ЗаписьXML,СтруктураДокумента.EDIINTERCHANGEID,"EDIINTERCHANGEID");
	
	//EDIMESSAGE 
	ЗаписатьXML(ЗаписьXML,СтруктураДокумента.EDIMESSAGE,"EDIMESSAGE");
	
	Для Каждого ТекСтрока Из СтруктураДокумента.POSITION Цикл
		//POSITION 
		ЗаписьXML.ЗаписатьНачалоЭлемента("POSITION");//POSITION
		
		//POSITIONNUMBER 
		ЗаписатьXML(ЗаписьXML,ТекСтрока.POSITIONNUMBER,"POSITIONNUMBER");
		
		//PRODUCT 
		ЗаписатьXML(ЗаписьXML,ТекСтрока.PRODUCT,"PRODUCT");
		
		//PRODUCTIDBUYER
		Если ЗначениеЗаполнено(ТекСтрока.PRODUCTIDBUYER) Тогда
			ЗаписатьXML(ЗаписьXML,ТекСтрока.PRODUCTIDBUYER,"PRODUCTIDBUYER"); 
		КонецЕсли;
		
		//PRODUCTIDSUPPLIER
		Если ЗначениеЗаполнено(ТекСтрока.PRODUCTIDSUPPLIER) Тогда
			ЗаписатьXML(ЗаписьXML,ТекСтрока.PRODUCTIDSUPPLIER,"PRODUCTIDSUPPLIER");
		КонецЕсли;
		
		//ORDEREDQUANTITY
		ЗаписатьXML(ЗаписьXML,ТекСтрока.ORDEREDQUANTITY,"ORDEREDQUANTITY");
		
		//ORDRSPUNIT
		Если ЗначениеЗаполнено(ТекСтрока.ORDRSPUNIT) Тогда
			ЗаписатьXML(ЗаписьXML,ТекСтрока.ORDRSPUNIT,"ORDRSPUNIT");
		КонецЕсли;
		//QUANTITYOFCUINTU
		Если ЗначениеЗаполнено(ТекСтрока.QUANTITYOFCUINTU) Тогда
			ЗаписатьXML(ЗаписьXML,ТекСтрока.QUANTITYOFCUINTU,"QUANTITYOFCUINTU");
		КонецЕсли;
		//ORDERPRICE 
		Если ЗначениеЗаполнено(ТекСтрока.ORDERPRICE) Тогда
			ЗаписатьXML(ЗаписьXML,ТекСтрока.ORDERPRICE,"PRICE");
		КонецЕсли;
		
				//VAT
		Если ЗначениеЗаполнено(ТекСтрока.VAT) Тогда
			ЗаписатьXML(ЗаписьXML,ТекСтрока.VAT, "VAT");   
		КонецЕсли;
		
		//PRODUCTTYPE
		Если ЗначениеЗаполнено(ТекСтрока.PRODUCTTYPE) Тогда
			ЗаписатьXML(ЗаписьXML,ТекСтрока.PRODUCTTYPE, "PRODUCTTYPE");   
		КонецЕсли; 
		
		//ACCEPTEDQUANTITY
		Если ЗначениеЗаполнено(ТекСтрока.ACCEPTEDQUANTITY) Тогда
			ЗаписатьXML(ЗаписьXML,ТекСтрока.ACCEPTEDQUANTITY, "ACCEPTEDQUANTITY");   
		КонецЕсли;
		
		//INFO
		Если ЗначениеЗаполнено(ТекСтрока.INFO) Тогда
			ЗаписатьXML(ЗаписьXML,ТекСтрока.INFO, "INFO");   
		КонецЕсли;

		ЗаписьXML.ЗаписатьНачалоЭлемента("CHARACTERISTIC");//CHARACTERISTIC
		
		//DESCRIPTION 
		Если ЗначениеЗаполнено(ТекСтрока.DESCRIPTION) Тогда
			ЗаписатьXML(ЗаписьXML,ТекСтрока.DESCRIPTION,"DESCRIPTION");
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();//CHARACTERISTIC
		
		
		ЗаписьXML.ЗаписатьКонецЭлемента();//POSITION
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//HEAD
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //ORDRSP
	
	
	
КонецФункции

// Функция предназначена для создания "xml" файла на основе параметров структуры документа
//
// Параметры:
//  СтруктураДокумента                - значение типа "Структура", содержащее параметры документа
//
// Возвращаемое значение:
// Нет.
//
Функция ЗаписатьФайлDESADV(СтруктураДокумента)
    ЗаписьXML = Новый ЗаписьXML;
    ИмяФайла = "";
    Если Comarch Тогда
        ИмяФайла = КаталогВременныхФайлов + СтруктураДокумента.Строки[0].Строки[0].Строки[0].Текст + 
		"_" + СтрЗаменить(СтруктураДокумента.Строки[0].Строки[0].Строки[3].Текст, "-","") + ".xml";
        ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
        ЗаписьXML.ЗаписатьОбъявлениеXML();
        РекурсияВXML(СтруктураДокумента, ЗаписьXML);
	//Иначе
	//    ИмяФайла = КаталогВременныхФайлов + СтруктураДокумента.EDIMESSAGE;
	//    ЗаписьXML.ОткрытьФайл(КаталогВременныхФайлов + СтруктураДокумента.Строки[0].Строки[0].Строки[0].Текст + "_DESADV.xml", "UTF-8");
	//    ЗаписьXML.ЗаписатьОбъявлениеXML();

	//    ЗаписьXML.ЗаписатьНачалоЭлемента("DESADV");//DESADV
	//    
	//    //NUMBER
	//    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.NUMBER,"NUMBER");
	//    
	//    //DATE 
	//    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DATE,"DATE");
	//    
	//    //DELIVERYDATE
	//    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DELIVERYDATE,"DELIVERYDATE");
	//    
	//    //ORDERNUMBER
	//    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.ORDERNUMBER,"ORDERNUMBER");
	//    
	//    //ORDERDATE
	//    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.ORDERDATE,"ORDERDATE");
	//    
	//    //DELIVERYNOTENUMBER
	//    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DELIVERYNOTENUMBER,"DELIVERYNOTENUMBER");
	//    
	//    //DELIVERYNOTEDATE
	//    Если ЗначениеЗаполнено(СтруктураДокумента.DELIVERYNOTEDATE) Тогда
	//        ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DELIVERYNOTEDATE,"DELIVERYNOTEDATE");
	//    КонецЕсли;
	//    
	//    //HEAD
	//    ЗаписьXML.ЗаписатьНачалоЭлемента("HEAD");//HEAD
	//    
	//    //SUPPLIER
	//    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.SUPPLIER,"SUPPLIER");
	//    //BUYER 
	//    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.BUYER,"BUYER");
	//    
	//    //DELIVERYPLACE
	//    Если ЗначениеЗаполнено(СтруктураДокумента.DELIVERYPLACE) Тогда
	//        ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DELIVERYPLACE,"DELIVERYPLACE");
	//    КонецЕсли;
	//    
	//    //SENDER 
	//    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.SENDER,"SENDER");
	//    //RECIPIENT
	//    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.RECIPIENT,"RECIPIENT");
	//    //EDIINTERCHANGEID   
	//    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.EDIINTERCHANGEID,"EDIINTERCHANGEID");
	//    //EDIMESSAGE 
	//    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.EDIMESSAGE,"EDIMESSAGE");
	//    
	//    //PACKINGSEQUENCE 
	//    ЗаписьXML.ЗаписатьНачалоЭлемента("PACKINGSEQUENCE");//PACKINGSEQUENCE
	//    
	//    //HIERARCHICALID 
	//    ЗаписатьXML(ЗаписьXML,СтруктураДокумента.HIERARCHICALID,"HIERARCHICALID");
	//    
	//    Для Каждого ТекСтрока Из СтруктураДокумента.POSITION Цикл
	//        //POSITION 
	//        ЗаписьXML.ЗаписатьНачалоЭлемента("POSITION");//POSITION
	//        
	//        //POSITIONNUMBER 
	//        ЗаписатьXML(ЗаписьXML,ТекСтрока.POSITIONNUMBER,"POSITIONNUMBER");
	//        
	//        //PRODUCT 
	//        ЗаписатьXML(ЗаписьXML,ТекСтрока.PRODUCT,"PRODUCT");
	//        
	//        //PRODUCTIDSUPPLIER
	//        Если ЗначениеЗаполнено(ТекСтрока.PRODUCTIDSUPPLIER) Тогда
	//            ЗаписатьXML(ЗаписьXML,ТекСтрока.PRODUCTIDSUPPLIER,"PRODUCTIDSUPPLIER"); 
	//        КонецЕсли;
	//        
	//        //PRODUCTIDBUYER
	//        Если ЗначениеЗаполнено(ТекСтрока.PRODUCTIDBUYER) Тогда
	//            ЗаписатьXML(ЗаписьXML,ТекСтрока.PRODUCTIDBUYER,"PRODUCTIDBUYER"); 
	//        КонецЕсли;
	//        
	//        //DELIVEREDQUANTITY 
	//        ЗаписатьXML(ЗаписьXML,ТекСтрока.DELIVEREDQUANTITY,"DELIVEREDQUANTITY");
	//        
	//        //ORDEREDQUANTITY 
	//        ЗаписатьXML(ЗаписьXML,ТекСтрока.ORDEREDQUANTITY,"ORDEREDQUANTITY");
	//        
	//        //DELIVEREDUNIT 
	//        Если ЗначениеЗаполнено(ТекСтрока.INVOICEUNIT) Тогда
	//            ЗаписатьXML(ЗаписьXML,ТекСтрока.INVOICEUNIT,"DELIVEREDUNIT");
	//        КонецЕсли;
	//        
	//        //PRICE 
	//        Если ЗначениеЗаполнено(ТекСтрока.UNITPRICE) Тогда
	//            ЗаписатьXML(ЗаписьXML,ТекСтрока.UNITPRICE,"PRICE");
	//        КонецЕсли;
	//        
	//        //COUNTRYORIGIN 
	//        Если ЗначениеЗаполнено(ТекСтрока.COUNTRYORIGIN) Тогда
	//            ЗаписатьXML(ЗаписьXML,ТекСтрока.COUNTRYORIGIN,"COUNTRYORIGIN");
	//        КонецЕсли;
	//        
	//        //CUSTOMSTARIFFNUMBER 
	//        Если ЗначениеЗаполнено(ТекСтрока.CUSTOMSTARIFFNUMBER) Тогда
	//            ЗаписатьXML(ЗаписьXML,ТекСтрока.CUSTOMSTARIFFNUMBER,"CUSTOMSTARIFFNUMBER");
	//        КонецЕсли;
	//        
	//        ЗаписьXML.ЗаписатьКонецЭлемента();//POSITION
	//    КонецЦикла;
	//    ЗаписьXML.ЗаписатьКонецЭлемента();//PACKINGSEQUENCE
	//    ЗаписьXML.ЗаписатьКонецЭлемента();//HEAD
	//    ЗаписьXML.ЗаписатьКонецЭлемента(); //DESADV
	КонецЕсли;
    Возврат ИмяФайла; 	
//	Сообщить("Отчет об отгрузке " + СтруктураДокумента.EDIMESSAGE + " отправлен в каталог outbox платформы eXite");
КонецФункции

// Функция предназначена для создания "xml" файла на основе параметров структуры документа
//
// Параметры:
//  СтруктураДокумента                - значение типа "Структура", содержащее параметры документа
//
// Возвращаемое значение:
// Нет.
//
Функция ЗаписатьФайлINVOICE(СтруктураДокумента)
	
	ЗаписьXML = Новый ЗаписьXML;
	ИмяФайла = "";
    Если Comarch Тогда
        ИмяФайла = КаталогВременныхФайлов + СтруктураДокумента.Строки[0].Строки[0].Строки[0].Текст + 
		"_" + СтрЗаменить(СтруктураДокумента.Строки[0].Строки[0].Строки[3].Текст, "-","") + ".xml";
        ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
        ЗаписьXML.ЗаписатьОбъявлениеXML();
        РекурсияВXML(СтруктураДокумента, ЗаписьXML);
		Возврат ИмяФайла; 
	Иначе
		
		ЗаписьXML.ОткрытьФайл(КаталогВременныхФайлов + СтруктураДокумента.EDIMESSAGE + "_INVOICE.xml", "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("INVOICE");//INVOICE
		
		//DOCUMENTNAME
		ЗаписатьXML(ЗаписьXML,380,"DOCUMENTNAME");
		
		//NUMBER
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.NUMBER,"NUMBER");
		
		//DATE 
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DATE,"DATE");
		
		//DELIVERYDATE
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DELIVERYDATE,"DELIVERYDATE");
		
		//CURRENCY
		ЗаписатьXML(ЗаписьXML,"UAH","CURRENCY");
		
		//ORDERNUMBER
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.ORDERNUMBER,"ORDERNUMBER");
		
		//ORDERDATE
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.ORDERDATE,"ORDERDATE");
		
		//DELIVERYNOTENUMBER
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DELIVERYNOTENUMBER,"DELIVERYNOTENUMBER");
		
		//DELIVERYNOTEDATE
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DELIVERYNOTEDATE,"DELIVERYNOTEDATE");
		
		//PAYMENTORDERNUMBER
		Если ЗначениеЗаполнено(СтруктураДокумента.PAYMENTORDERNUMBER) Тогда
			ЗаписатьXML(ЗаписьXML,СтруктураДокумента.PAYMENTORDERNUMBER,"PAYMENTORDERNUMBER");
		КонецЕсли;
		
		//FISCALNUMBER
		Если ЗначениеЗаполнено(СтруктураДокумента.FISCALNUMBER) Тогда
			ЗаписатьXML(ЗаписьXML,СтруктураДокумента.FISCALNUMBER,"FISCALNUMBER");
		КонецЕсли;
		
		//REGISTRATIONNUMBER
		Если ЗначениеЗаполнено(СтруктураДокумента.REGISTRATIONNUMBER) Тогда
			ЗаписатьXML(ЗаписьXML,СтруктураДокумента.REGISTRATIONNUMBER,"REGISTRATIONNUMBER");
		КонецЕсли;
		
		//GOODSTOTALAMOUNT
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.GOODSTOTALAMOUNT,"GOODSTOTALAMOUNT");
		
		//POSITIONSAMOUNT
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.POSITIONSAMOUNT,"POSITIONSAMOUNT");
		
		//VATSUM
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.VATSUM,"VATSUM");
		
		//INVOICETOTALAMOUNT
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.INVOICETOTALAMOUNT,"INVOICETOTALAMOUNT");
		
		//TAXABLEAMOUNT
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.TAXABLEAMOUNT,"TAXABLEAMOUNT");
		
		//MANAGER
		Если ЗначениеЗаполнено(СтруктураДокумента.MANAGER) Тогда
			ЗаписатьXML(ЗаписьXML,СтруктураДокумента.MANAGER,"MANAGER");
		КонецЕсли;
		
		//ACCOUNTING
		Если ЗначениеЗаполнено(СтруктураДокумента.ACCOUNTING) Тогда
			ЗаписатьXML(ЗаписьXML,СтруктураДокумента.ACCOUNTING,"ACCOUNTING");
		КонецЕсли;
		
		//VAT
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.VAT,"VAT");
		
		
		
		//HEAD
		ЗаписьXML.ЗаписатьНачалоЭлемента("HEAD");//HEAD
		
		//SUPPLIER
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.SUPPLIER,"SUPPLIER");
		
		//BUYER 
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.BUYER,"BUYER");
		
		//DELIVERYPLACE
		Если ЗначениеЗаполнено(СтруктураДокумента.DELIVERYPLACE) Тогда
			ЗаписатьXML(ЗаписьXML,СтруктураДокумента.DELIVERYPLACE,"DELIVERYPLACE");
		КонецЕсли;
		
		//CONSEGNOR 
		Если ЗначениеЗаполнено(СтруктураДокумента.CONSEGNOR) Тогда
			ЗаписатьXML(ЗаписьXML,СтруктураДокумента.CONSEGNOR,"CONSEGNOR");
		КонецЕсли;
		
		//CONSIGNEE 
		Если ЗначениеЗаполнено(СтруктураДокумента.CONSIGNEE) Тогда
			ЗаписатьXML(ЗаписьXML,СтруктураДокумента.CONSIGNEE,"CONSIGNEE");
		КонецЕсли;
		
		//SENDER 
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.SENDER,"SENDER");
		
		//RECIPIENT
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.RECIPIENT,"RECIPIENT");
		
		//EDIINTERCHANGEID   
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.EDIINTERCHANGEID,"EDIINTERCHANGEID");
		
		//EDIMESSAGE 
		ЗаписатьXML(ЗаписьXML,СтруктураДокумента.EDIMESSAGE,"EDIMESSAGE");
		
		Для Каждого ТекСтрока Из СтруктураДокумента.POSITION Цикл
			//POSITION 
			ЗаписьXML.ЗаписатьНачалоЭлемента("POSITION");//POSITION
			
			//POSITIONNUMBER 
			ЗаписатьXML(ЗаписьXML,ТекСтрока.POSITIONNUMBER,"POSITIONNUMBER");
			
			//PRODUCT 
			ЗаписатьXML(ЗаписьXML,ТекСтрока.PRODUCT,"PRODUCT");
			
			//PRODUCTIDSUPPLIER
			Если ЗначениеЗаполнено(ТекСтрока.PRODUCTIDSUPPLIER) Тогда
				ЗаписатьXML(ЗаписьXML,ТекСтрока.PRODUCTIDSUPPLIER,"PRODUCTIDSUPPLIER");
			КонецЕсли;
			
			//PRODUCTIDBUYER
			Если ЗначениеЗаполнено(ТекСтрока.PRODUCTIDBUYER) Тогда
				ЗаписатьXML(ЗаписьXML,ТекСтрока.PRODUCTIDBUYER,"PRODUCTIDBUYER");
			КонецЕсли;
			
			//INVOICEDQUANTITY 
			ЗаписатьXML(ЗаписьXML,ТекСтрока.INVOICEDQUANTITY,"INVOICEDQUANTITY");
			
			//INVOICEUNIT 
			Если ЗначениеЗаполнено(ТекСтрока.INVOICEUNIT) Тогда
				ЗаписатьXML(ЗаписьXML,ТекСтрока.INVOICEUNIT,"INVOICEUNIT");
			КонецЕсли;
			
			//UNITPRICE 
			ЗаписатьXML(ЗаписьXML,ТекСтрока.UNITPRICE,"UNITPRICE");
			
			//AMOUNT 
			ЗаписатьXML(ЗаписьXML,ТекСтрока.AMOUNT,"AMOUNT");
			
			//COUNTRYORIGIN 
			Если ЗначениеЗаполнено(ТекСтрока.COUNTRYORIGIN) Тогда
				ЗаписатьXML(ЗаписьXML,ТекСтрока.COUNTRYORIGIN,"COUNTRYORIGIN");
			КонецЕсли;
			
			//CUSTOMSTARIFFNUMBER 
			Если ЗначениеЗаполнено(ТекСтрока.CUSTOMSTARIFFNUMBER) Тогда
				ЗаписатьXML(ЗаписьXML,ТекСтрока.CUSTOMSTARIFFNUMBER,"CUSTOMSTARIFFNUMBER");
			КонецЕсли;
			
			//AMOUNTTYPE 
			ЗаписатьXML(ЗаписьXML,ТекСтрока.AMOUNTTYPE,"AMOUNTTYPE");
			
			//TAX
			ЗаписьXML.ЗаписатьНачалоЭлемента("TAX");//TAX
			
			//FUNCTION 
			ЗаписатьXML(ЗаписьXML,ТекСтрока.FUNCTION,"FUNCTION");
			
			//TAXTYPECODE 
			ЗаписатьXML(ЗаписьXML,ТекСтрока.TAXTYPECODE,"TAXTYPECODE");
			
			//TAXRATE 
			ЗаписатьXML(ЗаписьXML,ТекСтрока.TAXRATE,"TAXRATE");
			
			//TAXAMOUNT 
			ЗаписатьXML(ЗаписьXML,ТекСтрока.TAXAMOUNT,"TAXAMOUNT");
			
			//CATEGORY 
			ЗаписатьXML(ЗаписьXML,ТекСтрока.CATEGORY,"CATEGORY");
			
			ЗаписьXML.ЗаписатьКонецЭлемента();//TAX
			
			ЗаписьXML.ЗаписатьКонецЭлемента();//POSITION
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();//HEAD
		ЗаписьXML.ЗаписатьКонецЭлемента(); //INVOICE
	КонецЕсли;
	//Сообщить("Отчет об отгрузке " + СтруктураДокумента.EDIMESSAGE + " отправлен в каталог outbox платформы eXite", СтатусСообщения.Информация);
КонецФункции




//ПРОЦЕДУРЫ ФОРМИРОВАНИЯ СТРУКТУРЫ ЭКСПОРТИРУМЫХ ДОКУМЕНТОВ

// Процедура создает "xml" файл, в котором сохраняет информацию о ценах номенклатуры,
// взятую из документов "Прайс-лист" и "Утверждение прайс-листа"
//
// Параметры:
//  Нет.
//
Функция СоздатьСтруктуруПрайслистаПоДокументам() Экспорт
	
	// Вставить содержимое обработчика.
	СтруктураДокумента=Новый Структура;
	//"Действие". Имеет 2-а вариана выбора: 9 – прайс-лист, 51 – ответ на прайс-лист
	СтруктураДокумента.Вставить("ACTION", ?(ТипЗнч(ПрайсЛист) = Тип("ДокументСсылка._eXiteПрайсЛист"), 9, 51));
	//Номер заказа
	СтруктураДокумента.Вставить("NUMBER",ЗаменитьСимволы(СокрЛП(ПрайсЛист.Номер)));
	//Дата документа
	СтруктураДокумента.Вставить("DATE",Формат(ПрайсЛист.Дата,"ДФ=""гггг-ММ-дд"""));
	
	Если ТипЗнч(ПрайсЛист) = Тип("ДокументСсылка._eXiteУтверждениеПрайсЛиста") Тогда
		
		//Номер прайс-листа. Используется только при подтверждении или отказе прайс-листа
		СтруктураДокумента.Вставить("PRICATNUMBER",ЗаменитьСимволы(СокрЛП(ПрайсЛист.ПрайсЛист.Номер)));
		
		//Дата прайс-листа. Используется только при подтверждении или отказе прайс-листа
		СтруктураДокумента.Вставить("PRICATDATE",Формат(ПрайсЛист.ПрайсЛист.Дата,"ДФ=""гггг-ММ-дд"""));
		
	КонецЕсли;
	
	//GLN номер поставщика
	СтруктураДокумента.Вставить("SUPPLIER",СокрЛП(ПрайсЛист.Организация.GLN));
	//GLN номер покупателя 
	СтруктураДокумента.Вставить("BUYER",СокрЛП(ПрайсЛист.Контрагент.GLN));
	//GLN отправителя
	СтруктураДокумента.Вставить("SENDER", Организация.GLN);
	//GLN получателя 
	СтруктураДокумента.Вставить("RECIPIENT", Контрагент.GLN);
	
	
	//Вступает в силу с даты
	СтруктураДокумента.Вставить("DATEFROM",Формат(ПрайсЛист.ДатаВступленияВСилу,"ДФ=""гггг-ММ-дд""")); 
	//Вступает в силу с времени
	СтруктураДокумента.Вставить("TIMEFROM",Формат(ПрайсЛист.ДатаВступленияВСилу,"ДФ=""ЧЧ:мм"""));
	//Свободный текст
	СтруктураДокумента.Вставить("PRICATINFO", СокрЛП(ПрайсЛист.Комментарий));
	//Контактное лицо
	СтруктураДокумента.Вставить("CONTACTFACE", КонтактноеЛицо.Наименование);
	
	КонтактныеДанные = ПолучитьКонтактныеДанные(КонтактноеЛицо);
	//Телефон
	МассивТелефонов = КонтактныеДанные.НайтиСтроки(Новый  Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон));
	TELEPHON = ?(МассивТелефонов.Количество() > 0, МассивТелефонов[0].Представление, "");
	СтруктураДокумента.Вставить("TELEPHON", TELEPHON);
	//Факс
	СтруктураДокумента.Вставить("FAX", "");
	МассивМыл = КонтактныеДанные.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты));
	//Электронная почта
	EMAIL = ?(МассивМыл.Количество() > 0, МассивМыл[0].Представление, "");
	СтруктураДокумента.Вставить("EMAIL", EMAIL);
	//Ставка НДС
	СтруктураДокумента.Вставить("VAT", 20);
	//Валюта(UAH,RUB,USD,EUR,MDL,BYR)
	СтруктураДокумента.Вставить("CURRENCY", "UAH");
	
	//Номер транзакции
	EDIINTERCHANGEID = ПолучитьEDIINTERCHANGEID(ПрайсЛист.Контрагент);
	СтруктураДокумента.Вставить("EDIINTERCHANGEID",EDIINTERCHANGEID);
	//EDIMESSAGE 
	СтруктураДокумента.Вставить("EDIMESSAGE", Формат(ТекущаяДата(), "ДФ=""ггггММддЧЧммсс000""") + "-OUT-" + EDIINTERCHANGEID);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	_eXiteПрайсЛистТовары.НомерСтроки КАК POSITIONNUMBER,
	|	_eXiteПрайсЛистТовары.ШтрихКод КАК PRODUCT,
	|	ВЫБОР
	|		КОГДА _eXiteПрайсЛистТовары.Действие = &Добавление
	|			ТОГДА 2
	|		КОГДА _eXiteПрайсЛистТовары.Действие = &Удаление
	|			ТОГДА 3
	|		КОГДА _eXiteПрайсЛистТовары.Действие = &Изменение
	|			ТОГДА 4
	|		КОГДА _eXiteПрайсЛистТовары.Действие = &Принято
	|			ТОГДА 27
	|		КОГДА _eXiteПрайсЛистТовары.Действие = &НеПринято
	|			ТОГДА 29
	|	КОНЕЦ КАК ACTION,
	|	_eXiteПрайсЛистТовары.Номенклатура.Наименование КАК PRODUCTNAME,
	|	ВЫБОР
	|		КОГДА _eXiteПрайсЛистТовары.Номенклатура.СтавкаНДС = &СтавкаНДС20
	|			ТОГДА 20
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК TAXRATE,
	|	_eXiteПрайсЛистТовары.Цена КАК UNITPRICE
	|ИЗ
	|	Документ." + ПрайсЛист.Метаданные().Имя + ".Товары КАК _eXiteПрайсЛистТовары
	|ГДЕ
	|	_eXiteПрайсЛистТовары.Ссылка = &ПрайсЛист";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СтавкаНДС20", Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист);
	Запрос.УстановитьПараметр("Добавление", Перечисления._eXiteВидыДействийСНоменклатурой.Добавление);
	Запрос.УстановитьПараметр("Удаление", Перечисления._eXiteВидыДействийСНоменклатурой.Удаление);
	Запрос.УстановитьПараметр("Изменение", Перечисления._eXiteВидыДействийСНоменклатурой.Изменение);
	Запрос.УстановитьПараметр("Принято", Перечисления._eXiteВидыУтвержденийНоменклатуры.Принято);
	Запрос.УстановитьПараметр("НеПринято", Перечисления._eXiteВидыУтвержденийНоменклатуры.НеПринято);
	
	CATALOGUE = Запрос.Выполнить().Выгрузить();
	//POSITION
	СтруктураДокумента.Вставить("CATALOGUE", CATALOGUE);
	
	Возврат СтруктураДокумента;
	
КонецФункции

// Процедура создает "xml" файл, в котором сохраняет информацию о ценах номенклатуры,
// взятую из регистра "Цены номенклатуры"
//
// Параметры:
//  Нет.
// 
Функция СоздатьСтруктуруПрайслистаПоРегистру() Экспорт
	
	СтруктураДокумента = Новый Структура;
	
	//"Действие". Имеет 2-а вариана выбора: 9 – прайс-лист, 51 – ответ на прайс-лист
	//Вариант возможен когда в базе нет вспомогательных документов "Прайс-лист""Утвеждение прайс-листа"
	//поэтому возможное действие в этом случае - 9
	СтруктураДокумента.Вставить("ACTION", 9);
	//Номер документа
	СтруктураДокумента.Вставить("NUMBER", НомерДокумента);
	//Дата документа
	СтруктураДокумента.Вставить("DATE", Формат(ДатаДокумента, "ДФ=yyyy-MM-dd"));
	//Номер прайс-листа. Используется только при подтверждении или отказе прайс-листа
	СтруктураДокумента.Вставить("PRICATNUMBER", Неопределено);
	//Дата прайс-листа. Используется только при подтверждении или отказе прайс-листа
	СтруктураДокумента.Вставить("PRICATDATE", Неопределено);
	//Вступает в силу с даты
	СтруктураДокумента.Вставить("DATEFROM", Формат(ДатаВступленияВСилуПрайсЛиста, "ДФ=yyyy-MM-dd"));
	//Вступает в силу с времени
	СтруктураДокумента.Вставить("TIMEFROM", ?(Найти(Формат(ДатаВступленияВСилуПрайсЛиста, "ДЛФ=T"), ":") = 2, "0" + Лев(Формат(ДатаВступленияВСилуПрайсЛиста, "ДЛФ=T"), 4), "" + Лев(Формат(ДатаВступленияВСилуПрайсЛиста, "ДЛФ=T"), 5)));
	//Свободный текст
	СтруктураДокумента.Вставить("PRICATINFO", "Прайс-лист");
	//GLN номер поставщика
	СтруктураДокумента.Вставить("SUPPLIER", Организация.GLN);
	//GLN номер покупателя 
	СтруктураДокумента.Вставить("BUYER", Контрагент.GLN);
	//GLN отправителя
	СтруктураДокумента.Вставить("SENDER", Организация.GLN);
	//GLN получателя 
	СтруктураДокумента.Вставить("RECIPIENT", Контрагент.GLN);
	//Контактное лицо
	СтруктураДокумента.Вставить("CONTACTFACE", КонтактноеЛицо.Наименование);
	КонтактныеДанные = ПолучитьКонтактныеДанные(КонтактноеЛицо);
	//Телефон
	МассивТелефонов = КонтактныеДанные.НайтиСтроки(Новый  Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон));
	TELEPHON = ?(МассивТелефонов.Количество() > 0, МассивТелефонов[0].Представление, "");
	СтруктураДокумента.Вставить("TELEPHON", TELEPHON);
	//Факс
	СтруктураДокумента.Вставить("FAX", Неопределено);
	//Электронная почта
	МассивМыл = КонтактныеДанные.НайтиСтроки(Новый  Структура("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты));
	EMAIL = ?(МассивМыл.Количество() > 0, МассивМыл[0].Представление, "");
	СтруктураДокумента.Вставить("EMAIL", EMAIL);
	//Ставка НДС
	СтруктураДокумента.Вставить("VAT", 20);
	//Валюта(UAH,RUB,USD,EUR,MDL,BYR)
	СтруктураДокумента.Вставить("CURRENCY", "UAH");
	//Номер транзакции
	EDIINTERCHANGEID = ПолучитьEDIINTERCHANGEID(Контрагент);
	СтруктураДокумента.Вставить("EDIINTERCHANGEID",EDIINTERCHANGEID);
	//EDIMESSAGE 
	СтруктураДокумента.Вставить("EDIMESSAGE", Формат(ТекущаяДата(), "ДФ=""ггггММддЧЧммсс000""") + "-OUT-" + EDIINTERCHANGEID);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	2 КАК ACTION,
	|	Штрихкоды.Штрихкод КАК PRODUCT,
	|	НоменклатураКонтрагентов.Номенклатура.Наименование КАК PRODUCTNAME,
	|	НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента КАК IDSUPPLIER,
	|	НоменклатураКонтрагентов.Номенклатура.Артикул КАК IDBUYER,
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентов.Номенклатура.СтавкаНДС = &Ставка20
	|			ТОГДА 20
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК TAXRATE,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК UNITPRICE
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО НоменклатураКонтрагентов.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО НоменклатураКонтрагентов.Номенклатура = Штрихкоды.Владелец
	|ГДЕ
	|	НоменклатураКонтрагентов.Контрагент = &Контрагент";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ставка20", Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ТипЦен", ДоговорКонтрагента.ТипЦен);
	CATALOGUE = Запрос.Выполнить().Выгрузить();
	
	СтруктураДокумента.Вставить("CATALOGUE", CATALOGUE);
	
	Возврат СтруктураДокумента;
КонецФункции

// Процедура создает структуру документа, содержащую параметры документа
//
// Параметры:
//  ДокументЗаказ                  - ссылка на объект заказ, отчет о доставке которого необходимо отправить
//
Функция  СоздатьСтруктуруДокументаЗаказПокупателя(ДокументЗаказПокупателя) 
	// Вставить содержимое обработчика.
	СтруктураДокумента=Новый Структура;
	//Номер заказа
	СтруктураДокумента.Вставить("NUMBER",ЗаменитьСимволы(СокрЛП(ДокументЗаказПокупателя.Номер)));
	//Дата документа
	СтруктураДокумента.Вставить("DATE",Формат(ДокументЗаказПокупателя.Дата,"ДФ=""гггг-ММ-дд"""));
	// номер, дата заказа покупателя
	СтруктураДокумента.Вставить("ORDERNUMBER",СокрЛП(ДокументЗаказПокупателя.НомерПокупателя));
	СтруктураДокумента.Вставить("ORDERDATE",Формат(ДокументЗаказПокупателя.Дата,"ДФ=""гггг-ММ-дд"""));
	
	//Дата поставки
	СтруктураДокумента.Вставить("DELIVERYDATE",Формат(ДокументЗаказПокупателя.ДатаОтгрузки,"ДФ=""гггг-ММ-дд""")); ////
	//Время поставки
	СтруктураДокумента.Вставить("DELIVERYTIME",Формат(ДокументЗаказПокупателя.ДатаОтгрузки,"ДФ=""ЧЧ:мм"""));
	//Обозначение промоакции или № поставщика
	СтруктураДокумента.Вставить("CAMPAIGNNUMBER", "");
	//Валюта(UAH,RUB,USD,EUR,MDL,BYR)
	СтруктураДокумента.Вставить("CURRENCY","UAH");
	//Свободный текст
	СтруктураДокумента.Вставить("INFO","");
	
	//HEAD
	
	//GLN номер поставщика
	СтруктураДокумента.Вставить("SUPPLIER",СокрЛП(ДокументЗаказПокупателя.Организация.GLN));
	//GLN номер покупателя 
	СтруктураДокумента.Вставить("BUYER",СокрЛП(ДокументЗаказПокупателя.Контрагент.GLN));
	//GLN номер места доставки
	СтруктураДокумента.Вставить("DELIVERYPLACE",СокрЛП(ДокументЗаказПокупателя.АдресДоставки.GLN));
	//GLN номер плательщика
//	СтруктураДокумента.Вставить("INVOICEPARTNER",СокрЛП(ДокументЗаказПокупателя.АдресДоставки.GLN));
	//GLN номер отправителя сообщения
	СтруктураДокумента.Вставить("SENDER",СокрЛП(ДокументЗаказПокупателя.Организация.GLN));
	//GLN номер получателя сообщения
	СтруктураДокумента.Вставить("RECIPIENT",СокрЛП(ДокументЗаказПокупателя.Контрагент.GLN));
	//Номер транзакции
	EDIINTERCHANGEID = ПолучитьEDIINTERCHANGEID(ДокументЗаказПокупателя.Контрагент);
	СтруктураДокумента.Вставить("EDIINTERCHANGEID", EDIINTERCHANGEID);
	//EDIMESSAGE 
	СтруктураДокумента.Вставить("EDIMESSAGE", Формат(ТекущаяДата(), "ДФ=""ггггММддЧЧммсс000""") + "-OUT-" + EDIINTERCHANGEID);
	
	POSITION=Новый ТаблицаЗначений;
	POSITION.Колонки.Добавить("POSITIONNUMBER");
	POSITION.Колонки.Добавить("PRODUCT");
	POSITION.Колонки.Добавить("PRODUCTIDBUYER");
	POSITION.Колонки.Добавить("PRODUCTIDSUPPLIER");
	POSITION.Колонки.Добавить("ORDEREDQUANTITY");
	POSITION.Колонки.Добавить("ORDRSPUNIT");
	POSITION.Колонки.Добавить("QUANTITYOFCUINTU");
	POSITION.Колонки.Добавить("DESCRIPTION");
	POSITION.Колонки.Добавить("ORDERPRICE");
	POSITION.Колонки.Добавить("ORDERPRICEUNIT");
	POSITION.Колонки.Добавить("VAT");
	POSITION.Колонки.Добавить("PRODUCTTYPE");
	POSITION.Колонки.Добавить("ACCEPTEDQUANTITY");   
	POSITION.Колонки.Добавить("INFO");      
	Для Каждого ТекСтрока Из ДокументЗаказПокупателя.Товары Цикл
		
		НовСтрока=POSITION.Добавить();
		//Номер товарной позиции
		НовСтрока.POSITIONNUMBER=ТекСтрока.НомерСтроки;
		Запрос=Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента КАК PRODUCT,
		|	НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента КАК PRODUCTIDBUYER,
		|	НоменклатураКонтрагентов.Номенклатура.Артикул КАК PRODUCTIDSUPPLIER,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ORDERPRICE
		|ИЗ
		|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО НоменклатураКонтрагентов.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И НоменклатураКонтрагентов.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
		|ГДЕ
		|	НоменклатураКонтрагентов.Контрагент = &Контрагент
		|	И НоменклатураКонтрагентов.Номенклатура = &Номенклатура
		|	И НоменклатураКонтрагентов.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
		|	И НоменклатураКонтрагентов.ЕдиницаИзмерения = &ЕдиницаИзмерения";
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
		Запрос.УстановитьПараметр("Контрагент", ДокументЗаказПокупателя.Контрагент);
		Запрос.УстановитьПараметр("ТипЦен", ДокументЗаказПокупателя.ДоговорКонтрагента.ТипЦен);
		Запрос.УстановитьПараметр("Номенклатура", ТекСтрока.Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ТекСтрока.ХарактеристикаНоменклатуры);
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			//Штрих-код продукта
			НовСтрока.PRODUCT = СокрЛП(Выборка.PRODUCT);
			//Внутренний номер по БД 
			//покупателя
			НовСтрока.PRODUCTIDBUYER = СокрЛП(Выборка.PRODUCTIDBUYER);
			//Внутренний номер по БД поставщика 
			НовСтрока.PRODUCTIDSUPPLIER = СокрЛП(Выборка.PRODUCTIDSUPPLIER);
			//Цена продукта без НДС
			НовСтрока.ORDERPRICE = Выборка.ORDERPRICE;
		КонецЦикла;
		//Заказанное количество
		НовСтрока.ORDEREDQUANTITY = ТекСтрока.КоличествоЗаказанное;
		//Единицы измерения кол-ва
		//GRM – грамм; KGM – килограмм; 
		//LTR – литр; MMT – миллиметр; MTK – квадратный метр;
		//MTQ – кубический метр; MTR – метр; MGM – миллиграмм; 
		//MLT – миллилитр; MMQ – кубический миллиметр; PCE – штук.
		НовСтрока.ORDRSPUNIT = ПолучитьЕдИзмДляВыгрузки(ТекСтрока.ЕдиницаИзмерения);
		//Количество в упаковке
		НовСтрока.QUANTITYOFCUINTU = Неопределено;
		//Единицы измерения цены
		НовСтрока.ORDERPRICEUNIT = Неопределено;
		//Описание продукта
		НовСтрока.DESCRIPTION = СокрЛП(ТекСтрока.Номенклатура);
		//Ставка НДС
		НовСтрока.VAT = ?(ТекСтрока.Номенклатура.СтавкаНДС = Перечисления.СтавкиНДС.НДС20, 20, 0);
		//PRODUCTTYPE
		Если ТекСтрока.Количество = ТекСтрока.КоличествоЗаказанное Тогда  
			
			НовСтрока.PRODUCTTYPE = 1; //1 =товар будет поставлен без изменений 
			
		ИначеЕсли ТекСтрока.Количество = 0 Тогда   
			
			НовСтрока.PRODUCTTYPE = 3;//3 = отказано в поставке
			//Причина отказа в поставке 
			НовСтрока.INFO = ТекСтрока.Причина;  
			
		Иначе  //ДокументСчет.Кво < ДокументСчет.КвоЗаказанное Тогда 
			
			НовСтрока.PRODUCTTYPE = 2;//2 = изменение заказанного количества
			//Причина отказа в поставке 
			НовСтрока.ACCEPTEDQUANTITY = ТекСтрока.Количество; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	СтруктураДокумента.Вставить("POSITION", POSITION);
	
	Возврат СтруктураДокумента;
	
КонецФункции

// Процедура создает структуру документа, содержащую параметры документа
//
// Параметры:
//  ДокументЗаказ                  - ссылка на объект заказ, отчет о доставке которого необходимо отправить
//
Функция  СоздатьСтруктуруДокументаРеализацияТоваровУслуг(ДокументРасходнаяНакладная) 
	 
	
    Если Comarch Тогда
        //Номер ув. об отгрузке/
        СтруктураДокумента = Новый ДеревоЗначений;
        
        СтруктураДокумента.Колонки.Добавить("Элемент");
        СтруктураДокумента.Колонки.Добавить("Текст");
        DocumentDespatchAdvice = СтруктураДокумента.Строки.Добавить();
        DocumentDespatchAdvice.Элемент = "Document-DespatchAdvice";
        DespatchAdviceHeader = DocumentDespatchAdvice.Строки.Добавить();
            DespatchAdviceHeader.Элемент = "DespatchAdvice-Header";
            DespatchAdviceNumber = DespatchAdviceHeader.Строки.Добавить();
                DespatchAdviceNumber.Элемент = "DespatchAdviceNumber";
                DespatchAdviceNumber.Текст = ЗаменитьСимволы(СокрЛП(ДокументРасходнаяНакладная.Номер));
                //СтруктураДокумента.Вставить("DespatchAdviceNumber",ЗаменитьСимволы(СокрЛП(ДокументРасходнаяНакладная.Номер)));
                
                //Дата документа
                DespatchAdviceDate = DespatchAdviceHeader.Строки.Добавить();
                DespatchAdviceDate.Элемент = "DespatchAdviceDate";
                DespatchAdviceDate.Текст = Формат(ДокументРасходнаяНакладная.Дата,"ДФ=гггг-ММ-дд");
                
                //СтруктураДокумента.Вставить("DespatchAdviceDate",Формат(ДокументРасходнаяНакладная.Дата,"ДФ=гггг-ММ-дд"));
                DespatchAdviceTime = DespatchAdviceHeader.Строки.Добавить();
                DespatchAdviceTime.Элемент = "DespatchAdviceTime";
                DespatchAdviceTime.Текст = Формат(ДокументРасходнаяНакладная.Дата,"ДФ=ЧЧ:ММ");
                //СтруктураДокумента.Вставить("DespatchAdviceTime",Формат(ДокументРасходнаяНакладная.Дата,"ДФ=ЧЧ:ММ"));
                EstimatedDeliveryDate = DespatchAdviceHeader.Строки.Добавить();
                EstimatedDeliveryDate.Элемент = "EstimatedDeliveryDate";
                EstimatedDeliveryDate.Текст = Формат(ДокументРасходнаяНакладная.Дата,"ДФ=гггг-ММ-дд");                
                
                EstimatedDeliveryTime = DespatchAdviceHeader.Строки.Добавить();
                EstimatedDeliveryTime.Элемент = "EstimatedDeliveryTime";
                EstimatedDeliveryTime.Текст = "23:59";                
                ////Дата поставки
                //СтруктураДокумента.Вставить("EstimatedDeliveryDate",Формат(ДокументРасходнаяНакладная.Сделка.ДатаОтгрузки,"ДФ=""гггг-ММ-дд""")); 
                //СтруктураДокумента.Вставить("EstimatedDeliveryDate","23:59");
                BuyerOrderNumber = DespatchAdviceHeader.Строки.Добавить();
                BuyerOrderNumber.Элемент = "BuyerOrderNumber";
                BuyerOrderNumber.Текст = СокрЛП(ДокументРасходнаяНакладная.Сделка.НомерПокупателя);
                ////Номер заказа
                //СтруктураДокумента.Вставить("BuyerOrderNumber",СокрЛП(ДокументРасходнаяНакладная.Сделка.НомерПокупателя));
                OrderDate = DespatchAdviceHeader.Строки.Добавить();
                OrderDate.Элемент = "OrderDate";
                OrderDate.Текст = Формат(ДокументРасходнаяНакладная.Сделка.Дата,"ДФ=""гггг-ММ-дд""");
				
				DespatchDate = DespatchAdviceHeader.Строки.Добавить();
				DespatchDate.Элемент = "DespatchDate";
				DespatchDate.Текст = Формат(ТекущаяДата(),"ДФ=""гггг-ММ-дд""");
				
				DeliveryNoteNumber = DespatchAdviceHeader.Строки.Добавить();
				DeliveryNoteNumber.Элемент = "DeliveryNoteNumber";
				DeliveryNoteNumber.Текст = ЗаменитьСимволы(СокрЛП(ДокументРасходнаяНакладная.Номер));
 
				
				//Currency = DespatchAdviceHeader.Строки.Добавить();
				//Currency.Элемент = "Currency";
				//Currency.Текст = "UAH";
                
                TotalAmountOfPallets = DespatchAdviceHeader.Строки.Добавить();
                TotalAmountOfPallets.Элемент = "TotalAmountOfPallets";
                TotalAmountOfPallets.Текст = "1";

        //HEAD
        DespatchAdviceParties = DocumentDespatchAdvice.Строки.Добавить();
        DespatchAdviceParties.Элемент = "DespatchAdvice-Parties";
            Buyer = DespatchAdviceParties.Строки.Добавить();
            Buyer.Элемент = "Buyer";
                ILN = Buyer.Строки.Добавить();
                ILN.Элемент = "ILN";
                ILN.Текст = СокрЛП(ДокументРасходнаяНакладная.Контрагент.GLN);
				//InternalNumber = Buyer.Строки.Добавить();
				//InternalNumber.Элемент = "InternalNumber";
				//InternalNumber.Текст = "";
				//Department = Buyer.Строки.Добавить();
				//Department.Элемент = "Department";
				//Department.Текст = "";
            Seller = DespatchAdviceParties.Строки.Добавить();
            Seller.Элемент = "Seller";
                ILN = Seller.Строки.Добавить();
                ILN.Элемент = "ILN";
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ПодключениеEDI.GLN
				|ИЗ
				|	РегистрСведений.ПодключениеEDI КАК ПодключениеEDI
				|ГДЕ
				|	ПодключениеEDI.Организация = &Организация
				|	И ПодключениеEDI.Провайдер = &Провайдер";
				Запрос.УстановитьПараметр("Провайдер", "Comarch");
				Запрос.УстановитьПараметр("Организация", ДокументРасходнаяНакладная.Организация);
				РезультатЗапроса = Запрос.Выполнить().Выбрать();
				Если РезультатЗапроса.Следующий() Тогда
					ILN.Текст = СокрЛП(РезультатЗапроса.GLN);
				Иначе 
					Сообщить("Не определен GLN организации!");
					Возврат Неопределено; 
				КонецЕсли; 		
                
                CodeByBuyer = Seller.Строки.Добавить();
                CodeByBuyer.Элемент = "CodeByBuyer";
				CodeByBuyer.Текст = "010870";
				
				//ТЗ = РегистрыСведений.КодыОрганизации.СрезПоследних(ДокументРасходнаяНакладная.Дата,новый Структура("Организация",ДокументРасходнаяНакладная.Организация));
				//CodeByBuyer.Текст = СокрЛП(ТЗ[0].КодПоЕДРПОУ);
            DeliveryPoint = DespatchAdviceParties.Строки.Добавить();
            DeliveryPoint.Элемент = "DeliveryPoint";
                ILN = DeliveryPoint.Строки.Добавить();
                ILN.Элемент = "ILN";
                ILN.Текст = СокрЛП(ДокументРасходнаяНакладная.Сделка.кпкТорговаяТочка.GLNДоставки);            
			//Invoicee = DespatchAdviceParties.Строки.Добавить();
			//Invoicee.Элемент = "Invoicee";
			//    ILN = Invoicee.Строки.Добавить();
			//    ILN.Элемент = "ILN";
			//    ILN.Текст = СокрЛП(ДокументРасходнаяНакладная.Сделка.кпкТорговаяТочка.GLNДоставки);
            UltimateConsignee = DespatchAdviceParties.Строки.Добавить();
            UltimateConsignee.Элемент = "UltimateConsignee";
                ILN = UltimateConsignee.Строки.Добавить();
                ILN.Элемент = "ILN";
                ILN.Текст = СокрЛП(ДокументРасходнаяНакладная.Контрагент.GLN);
        DespatchAdviceLines = DocumentDespatchAdvice.Строки.Добавить();
        DespatchAdviceLines.Элемент = "DespatchAdvice-Lines"; 
                
        Запрос = Новый Запрос;
        ТекстЗапроса =
        "ВЫБРАТЬ
        |	ЗаказПокупателяТовары.НомерСтроки КАК LineNumber,
        |	РеализацияТоваровУслугТовары.НомерСтроки КАК OrderLineNumber,
        |	ЗаказПокупателяТовары.Ссылка.НомерПокупателя КАК BuyerOrderNumber,
        |	Штрихкоды.Штрихкод КАК EAN,
        |	НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента КАК BuyerItemCode,
        |	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК SupplierItemCode,
        |	ЗаказПокупателяТовары.КоличествоЗаказанное КАК QuantityOrdered,
        |	РеализацияТоваровУслугТовары.Количество КАК QuantityDespatched,
        |	ВЫБОР
        |		КОГДА ЗаказПокупателяТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = &КГ
        |			ТОГДА ""KGM""
        |		КОГДА ЗаказПокупателяТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = &ШТ
        |			ТОГДА ""PCE""
        |	КОНЕЦ КАК UnitOfMeasure,
        |	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК ItemDescription,
        |	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Цена - РеализацияТоваровУслугТовары.СуммаНДС / РеализацияТоваровУслугТовары.Количество КАК ЧИСЛО(15, 2)) КАК UnitNetPrice,
        |	РеализацияТоваровУслугТовары.Цена КАК UnitGrossPrice,
        |	РеализацияТоваровУслугТовары.Сумма - РеализацияТоваровУслугТовары.СуммаНДС КАК NetAmount,
        |	РеализацияТоваровУслугТовары.Сумма КАК GrossAmount,
        |	ВЫБОР
        |		КОГДА ЗаказПокупателяТовары.СтавкаНДС = &СтавкаНДС20
        |			ТОГДА 20
        |		ИНАЧЕ 0
        |	КОНЕЦ КАК TaxRate,
        |	""S"" КАК TaxCategoryCode,
        |	РеализацияТоваровУслугТовары.Номенклатура.КодУКТЗЕД КАК ExternalItemCode
        |ИЗ
        |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
        |		ПО (ЗаказПокупателяТовары.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура)
        |			И (ЗаказПокупателяТовары.Ссылка = РеализацияТоваровУслугТовары.Ссылка.Сделка)
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
        |		ПО (ЗаказПокупателяТовары.Номенклатура = НоменклатураКонтрагентов.Номенклатура)
        |			И (ЗаказПокупателяТовары.ХарактеристикаНоменклатуры = НоменклатураКонтрагентов.ХарактеристикаНоменклатуры)
        |			И (ЗаказПокупателяТовары.ЕдиницаИзмерения = НоменклатураКонтрагентов.ЕдиницаИзмерения)
        |			И (НоменклатураКонтрагентов.Контрагент = &Контрагент)
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
        |		ПО РеализацияТоваровУслугТовары.Номенклатура = Штрихкоды.Владелец
        |ГДЕ
        |	РеализацияТоваровУслугТовары.Ссылка = &РеализацияТоваровУслуг";
        Запрос.УстановитьПараметр("РеализацияТоваровУслуг", ДокументРасходнаяНакладная.Ссылка);
        Запрос.УстановитьПараметр("Контрагент", ДокументРасходнаяНакладная.Контрагент);
        Запрос.УстановитьПараметр("СтавкаНДС20", Перечисления.СтавкиНДС.НДС20);
        Запрос.УстановитьПараметр("КГ", Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("кг"));
        Запрос.УстановитьПараметр("ШТ", Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт"));
        Запрос.Текст = ТекстЗапроса;
        ТЗ = Запрос.Выполнить().Выгрузить();
        Для каждого Строка Из ТЗ Цикл
            Line = DespatchAdviceLines.Строки.Добавить();
            Line.Элемент = "Line";
                LineItem = Line.Строки.Добавить();
                LineItem.Элемент = "Line-Item";
                    LineNumber = LineItem.Строки.Добавить();
                    LineNumber.Элемент = "LineNumber";
                    LineNumber.Текст = Строка(Строка.LineNumber);
					//OrderLineNumber = LineItem.Строки.Добавить();
					//OrderLineNumber.Элемент = "OrderLineNumber";
					//OrderLineNumber.Текст = Строка(Строка.OrderLineNumber);
					
                    BuyerOrderNumber = LineItem.Строки.Добавить();
                    BuyerOrderNumber.Элемент = "BuyerOrderNumber";
                    BuyerOrderNumber.Текст = Строка.BuyerOrderNumber;
					
					
                    EAN = LineItem.Строки.Добавить();
                    EAN.Элемент = "EAN";
                    EAN.Текст = Строка.EAN;
					
					BuyerItemCode = LineItem.Строки.Добавить();
					BuyerItemCode.Элемент = "BuyerItemCode";
					BuyerItemCode.Текст = Строка.BuyerItemCode;
					
					ExternalItemCode = LineItem.Строки.Добавить();
					ExternalItemCode.Элемент = "ExternalItemCode";
					ExternalItemCode.Текст = СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка.ExternalItemCode, "/", ""), "Х", ""),"X","");

					
					SupplierItemCode = LineItem.Строки.Добавить();
					SupplierItemCode.Элемент = "SupplierItemCode";
					SupplierItemCode.Текст = Строка.SupplierItemCode;	
					
                    
                    QuantityDespatched = LineItem.Строки.Добавить();
                    QuantityDespatched.Элемент = "QuantityDespatched";
                    QuantityDespatched.Текст = Формат(Строка.QuantityDespatched,"ЧДЦ=3; ЧРД=.; ЧГ=");
                    QuantityOrdered = LineItem.Строки.Добавить();
                    QuantityOrdered.Элемент = "QuantityOrdered";
                    QuantityOrdered.Текст = Формат(Строка.QuantityOrdered,"ЧДЦ=2; ЧРД=.; ЧГ=");
                    UnitOfMeasure = LineItem.Строки.Добавить();
                    UnitOfMeasure.Элемент = "UnitOfMeasure";
                    UnitOfMeasure.Текст = Строка.UnitOfMeasure;
                    ItemDescription = LineItem.Строки.Добавить();
                    ItemDescription.Элемент = "ItemDescription";
                    ItemDescription.Текст = Строка.ItemDescription;
                    UnitNetPrice = LineItem.Строки.Добавить();
                    UnitNetPrice.Элемент = "UnitNetPrice";
                    UnitNetPrice.Текст = Формат(Строка.UnitNetPrice,"ЧДЦ=2; ЧРД=.; ЧГ=");
                    UnitGrossPrice = LineItem.Строки.Добавить();
                    UnitGrossPrice.Элемент = "UnitGrossPrice";
                    UnitGrossPrice.Текст = Формат(Строка.UnitGrossPrice,"ЧДЦ=2; ЧРД=.; ЧГ=");
                    NetAmount = LineItem.Строки.Добавить();
                    NetAmount.Элемент = "NetAmount";
                    NetAmount.Текст = Формат(Строка.NetAmount,"ЧДЦ=2; ЧРД=.; ЧГ=");
                    GrossAmount = LineItem.Строки.Добавить();
                    GrossAmount.Элемент = "GrossAmount";
                    GrossAmount.Текст = Формат(Строка.GrossAmount,"ЧДЦ=2; ЧРД=.; ЧГ=");
                    TaxRate = LineItem.Строки.Добавить();
                    TaxRate.Элемент = "TaxRate";
                    TaxRate.Текст = "20.00";
                    TaxCategoryCode = LineItem.Строки.Добавить();
                    TaxCategoryCode.Элемент = "TaxCategoryCode";
                    TaxCategoryCode.Текст = Строка.TaxCategoryCode;
					
				КонецЦикла;
				DespatchAdviceSummary = DocumentDespatchAdvice.Строки.Добавить();
				DespatchAdviceSummary.Элемент = "DespatchAdvice-Summary";
					TotalLines = DespatchAdviceSummary.Строки.Добавить();
					TotalLines.Элемент = "TotalLines";
					TotalLines.Текст = Строка.LineNumber;	
    				TotalQuantity = DespatchAdviceSummary.Строки.Добавить();
					TotalQuantity.Элемент = "TotalQuantity";
					TotalQuantity.Текст = ТЗ.Итог("QuantityDespatched");
  				
    Иначе
        СтруктураДокумента = Новый Структура;
        //Номер ув. об отгрузке/
        СтруктураДокумента.Вставить("NUMBER",ЗаменитьСимволы(СокрЛП(ДокументРасходнаяНакладная.Номер)));
        //Дата документа
        СтруктураДокумента.Вставить("DATE",Формат(ДокументРасходнаяНакладная.Дата,"ДФ=""гггг-ММ-дд"""));
        //Дата поставки
        СтруктураДокумента.Вставить("DELIVERYDATE",Формат(ДокументРасходнаяНакладная.Сделка.ДатаОтгрузки,"ДФ=""гггг-ММ-дд""")); 
        //Валюта
        СтруктураДокумента.Вставить("CURRENCY","UAH");
        //Номер заказа
        СтруктураДокумента.Вставить("ORDERNUMBER",СокрЛП(ДокументРасходнаяНакладная.Сделка.НомерПокупателя));
        //Дата заказа
        СтруктураДокумента.Вставить("ORDERDATE",Формат(ДокументРасходнаяНакладная.Сделка.Дата,"ДФ=""гггг-ММ-дд""")); //ДатаЗаказа
        //Номер накладной
        СтруктураДокумента.Вставить("DELIVERYNOTENUMBER",ЗаменитьСимволы(СокрЛП(ДокументРасходнаяНакладная.Номер)));
        //Дата накладной
        СтруктураДокумента.Вставить("DELIVERYNOTEDATE",Формат(ДокументРасходнаяНакладная.Дата,"ДФ=""гггг-ММ-дд"""));
        //Номер платежно-расчетного документа или зеленой марки
        СтруктураДокумента.Вставить("PAYMENTORDERNUMBER", Неопределено); 
        //HEAD
        
        //GLN поставщика
        СтруктураДокумента.Вставить("SUPPLIER",СокрЛП(ДокументРасходнаяНакладная.Организация.GLN));
        //GLN покупателя
        СтруктураДокумента.Вставить("BUYER",СокрЛП(ДокументРасходнаяНакладная.Контрагент.GLN));
        //GLN места доставки
        СтруктураДокумента.Вставить("DELIVERYPLACE",СокрЛП(ДокументРасходнаяНакладная.Сделка.АдресДоставки.GLN));
        //GLN отправителя сообщения
        СтруктураДокумента.Вставить("SENDER",СокрЛП(ДокументРасходнаяНакладная.Организация.GLN));  
        //GLN получателя сообщения
        СтруктураДокумента.Вставить("RECIPIENT",СокрЛП(ДокументРасходнаяНакладная.Контрагент.GLN));
        //GLN грузоотправителя
        СтруктураДокумента.Вставить("CONSEGNOR", Неопределено);
        //GLN грузополучателя
        СтруктураДокумента.Вставить("CONSIGNEE", Неопределено);
        
        
        //ИНН
        СтруктураДокумента.Вставить("FISCALNUMBER", Неопределено);
        //КПП
        СтруктураДокумента.Вставить("REGISTRATIONNUMBER", Неопределено);
        
        Если ДокументРасходнаяНакладная.СуммаВключаетНДС Тогда
            //Всего без НДС
            СтруктураДокумента.Вставить("GOODSTOTALAMOUNT", ДокументРасходнаяНакладная.Товары.Итог("Сумма") - ДокументРасходнаяНакладная.Товары.Итог("СуммаНДС")); 
            //Всего по позициям
            СтруктураДокумента.Вставить("POSITIONSAMOUNT", ДокументРасходнаяНакладная.Товары.Итог("Сумма") - ДокументРасходнаяНакладная.Товары.Итог("СуммаНДС")); 
            //Сумма по счету
            СтруктураДокумента.Вставить("INVOICETOTALAMOUNT", ДокументРасходнаяНакладная.Товары.Итог("Сумма")); 
            //База налогообложения
            СтруктураДокумента.Вставить("TAXABLEAMOUNT", ДокументРасходнаяНакладная.Товары.Итог("Сумма") - ДокументРасходнаяНакладная.Товары.Итог("СуммаНДС"));   
        Иначе
            //Всего без НДС
            СтруктураДокумента.Вставить("GOODSTOTALAMOUNT", ДокументРасходнаяНакладная.Товары.Итог("Сумма")); 
            //Всего по позициям
            СтруктураДокумента.Вставить("POSITIONSAMOUNT", ДокументРасходнаяНакладная.Товары.Итог("Сумма")); 
            //Сумма по счету
            СтруктураДокумента.Вставить("INVOICETOTALAMOUNT", ДокументРасходнаяНакладная.Товары.Итог("Сумма") + ДокументРасходнаяНакладная.Товары.Итог("СуммаНДС")); 
            //База налогообложения
            СтруктураДокумента.Вставить("TAXABLEAMOUNT", ДокументРасходнаяНакладная.Товары.Итог("Сумма"));		
        КонецЕсли;
        //Сумма НДС
        СтруктураДокумента.Вставить("VATSUM",  ДокументРасходнаяНакладная.Товары.Итог("СуммаНДС")); 	
        
        //Имя менеджера
        СтруктураДокумента.Вставить("MANAGER", Неопределено);
        //Имя главного бухгалтера
        СтруктураДокумента.Вставить("ACCOUNTING", Неопределено);
        //Ставка НДС(%)
        СтруктураДокумента.Вставить("VAT", 20);
        
        //Номер транзакции
        EDIINTERCHANGEID = ПолучитьEDIINTERCHANGEID(ДокументРасходнаяНакладная.Контрагент);
        СтруктураДокумента.Вставить("EDIINTERCHANGEID", EDIINTERCHANGEID);
        //EDIMESSAGE 
        СтруктураДокумента.Вставить("EDIMESSAGE", Формат(ТекущаяДата(), "ДФ=""ггггММддЧЧммсс000""") + "-OUT-" + EDIINTERCHANGEID);
        
        //Номер иерархии упаковки
        СтруктураДокумента.Вставить("HIERARCHICALID", 1);
        
        Запрос = Новый Запрос;
        ТекстЗапроса =
        "ВЫБРАТЬ
        |	ЗаказПокупателяТовары.НомерСтроки КАК POSITIONNUMBER,
        |	НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента КАК PRODUCT,
        |	ЗаказПокупателяТовары.Номенклатура.Артикул КАК PRODUCTIDSUPPLIER,
        |	НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента КАК PRODUCTIDBUYER,
        |	ЗаказПокупателяТовары.КоличествоЗаказанное * ЗаказПокупателяТовары.Коэффициент КАК ORDEREDQUANTITY,
        |	РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.Коэффициент КАК DELIVEREDQUANTITY,
        |	РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.Коэффициент КАК INVOICEDQUANTITY,
        |	ВЫБОР
        |		КОГДА ЗаказПокупателяТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = &КГ
        |			ТОГДА ""KGM""
        |		КОГДА ЗаказПокупателяТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = &ШТ
        |			ТОГДА ""PCE""
        |	КОНЕЦ КАК INVOICEUNIT,
        |	РеализацияТоваровУслугТовары.Цена КАК UNITPRICE,
        |	РеализацияТоваровУслугТовары.Сумма КАК AMOUNT,
        |	НЕОПРЕДЕЛЕНО КАК COUNTRYORIGIN,
        |	НЕОПРЕДЕЛЕНО КАК CUSTOMSTARIFFNUMBER,
        |	203 КАК AMOUNTTYPE,
        |	7 КАК FUNCTION,
        |	""VAT"" КАК TAXTYPECODE,
        |	ВЫБОР
        |		КОГДА ЗаказПокупателяТовары.СтавкаНДС = &СтавкаНДС20
        |			ТОГДА 20
        |		ИНАЧЕ 0
        |	КОНЕЦ КАК TAXRATE,
        |	РеализацияТоваровУслугТовары.СуммаНДС КАК TAXAMOUNT,
        |	""S"" КАК CATEGORY
        |ИЗ
        |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
        |		ПО ЗаказПокупателяТовары.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
        |			И ЗаказПокупателяТовары.Ссылка = РеализацияТоваровУслугТовары.Ссылка.Сделка
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
        |		ПО ЗаказПокупателяТовары.Номенклатура = НоменклатураКонтрагентов.Номенклатура
        |			И ЗаказПокупателяТовары.ХарактеристикаНоменклатуры = НоменклатураКонтрагентов.ХарактеристикаНоменклатуры
        |			И ЗаказПокупателяТовары.ЕдиницаИзмерения = НоменклатураКонтрагентов.ЕдиницаИзмерения
        |			И (НоменклатураКонтрагентов.Контрагент = &Контрагент)
        |ГДЕ
        |	РеализацияТоваровУслугТовары.Ссылка = &РеализацияТоваровУслуг";
        Запрос.УстановитьПараметр("РеализацияТоваровУслуг", ДокументРасходнаяНакладная.Ссылка);
        Запрос.УстановитьПараметр("Контрагент", ДокументРасходнаяНакладная.Контрагент);
        Запрос.УстановитьПараметр("СтавкаНДС20", Перечисления.СтавкиНДС.НДС20);
        Запрос.УстановитьПараметр("КГ", Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("кг"));
        Запрос.УстановитьПараметр("ШТ", Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт"));
        Запрос.Текст = ТекстЗапроса;
        POSITION = Запрос.Выполнить().Выгрузить();
        СтруктураДокумента.Вставить("POSITION",POSITION);
	КонецЕсли;
	Возврат СтруктураДокумента;
	
КонецФункции

// Процедура создает структуру документа, содержащую параметры документа
//
// Параметры:
//  ДокументЗаказ                  - ссылка на объект заказ, отчет о доставке которого необходимо отправить
//
Функция  СоздатьСтруктуруДокументаПоступлениеТоваровУслуг(ДокументПоступлениеТоваровУслуг) 
	
	СтруктураДокумента = Новый Структура;
	//Номер ув. о приеме
	СтруктураДокумента.Вставить("NUMBER",ЗаменитьСимволы(СокрЛП(ДокументПоступлениеТоваровУслуг.Номер)));
	//Дата документа
	СтруктураДокумента.Вставить("DATE",Формат(ДокументПоступлениеТоваровУслуг.Дата,"ДФ=""гггг-ММ-дд"""));
	//Дата приема
	СтруктураДокумента.Вставить("RECEPTIONDATE",Формат(ДокументПоступлениеТоваровУслуг.Дата,"ДФ=""гггг-ММ-дд"""));
	//Номер ув. об отгрузке
	СтруктураДокумента.Вставить("DESADVNUMBER",ЗаменитьСимволы(СокрЛП(ДокументПоступлениеТоваровУслуг.НомерУведомленияОбОтгрузке)));
	//Дата ув. об отгрузке
	СтруктураДокумента.Вставить("DESADVDATE",Формат(ДокументПоступлениеТоваровУслуг.ДатаУведомленияОбОтгрузке,"ДФ=""гггг-ММ-дд""")); //ДатаЗаказа
	//Номер заказа
	СтруктураДокумента.Вставить("ORDERNUMBER",ЗаменитьСимволы(СокрЛП(ДокументПоступлениеТоваровУслуг.Сделка.Номер)));
	//Дата заказа
	СтруктураДокумента.Вставить("ORDERDATE",Формат(ДокументПоступлениеТоваровУслуг.Сделка.Дата,"ДФ=""гггг-ММ-дд""")); //ДатаЗаказа
	//Номер накладной
	СтруктураДокумента.Вставить("DELIVERYNOTENUMBER",ЗаменитьСимволы(СокрЛП(ДокументПоступлениеТоваровУслуг.Номер)));
	
	//HEAD
	
	//GLN поставщика
	СтруктураДокумента.Вставить("SUPPLIER",СокрЛП(ДокументПоступлениеТоваровУслуг.Организация.GLN));
	//GLN покупателя
	СтруктураДокумента.Вставить("BUYER",СокрЛП(ДокументПоступлениеТоваровУслуг.Контрагент.GLN));
	//GLN места доставки
	СтруктураДокумента.Вставить("DELIVERYPLACE",СокрЛП(ДокументПоступлениеТоваровУслуг.Сделка.АдресДоставки.GLN));
	//GLN отправителя сообщения
	СтруктураДокумента.Вставить("SENDER",СокрЛП(ДокументПоступлениеТоваровУслуг.Организация.GLN));  
	//GLN получателя сообщения
	СтруктураДокумента.Вставить("RECIPIENT",СокрЛП(ДокументПоступлениеТоваровУслуг.Контрагент.GLN));
	
	
	//Номер транзакции
	EDIINTERCHANGEID = ПолучитьEDIINTERCHANGEID(ДокументПоступлениеТоваровУслуг.Контрагент);
	СтруктураДокумента.Вставить("EDIINTERCHANGEID", EDIINTERCHANGEID);
	//EDIMESSAGE 
	СтруктураДокумента.Вставить("EDIMESSAGE", Формат(ТекущаяДата(), "ДФ=""ггггММддЧЧммсс000""") + "-OUT-" + EDIINTERCHANGEID);
	
	//Номер иерархии упаковки
	СтруктураДокумента.Вставить("HIERARCHICALID", 1);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК POSITIONNUMBER,
	|	НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента КАК PRODUCT,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Артикул КАК PRODUCTIDBUYER,
	|	НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента КАК PRODUCTIDSUPPLIER,
	|	ПоступлениеТоваровУслугТовары.Количество * ПоступлениеТоваровУслугТовары.Коэффициент КАК ACCEPTEDQUANTITY,
	|	ПоступлениеТоваровУслугТовары.КоличествоПоставляемое * ПоступлениеТоваровУслугТовары.Коэффициент КАК DELIVERQUANTITY,
	|	ЗаказПоставщикуТовары.КоличествоЗаказанное * ЗаказПоставщикуТовары.Коэффициент КАК ORDERQUANTITY,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = &КГ
	|			ТОГДА ""KGM""
	|		КОГДА ЗаказПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = &ШТ
	|			ТОГДА ""PCE""
	|	КОНЕЦ КАК ACCEPTEDUNIT
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ПО ЗаказПоставщикуТовары.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
	|			И ЗаказПоставщикуТовары.Ссылка = ПоступлениеТоваровУслугТовары.Ссылка.Сделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО ЗаказПоставщикуТовары.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры = НоменклатураКонтрагентов.ХарактеристикаНоменклатуры
	|			И ЗаказПоставщикуТовары.ЕдиницаИзмерения = НоменклатураКонтрагентов.ЕдиницаИзмерения
	|			И (НоменклатураКонтрагентов.Контрагент = &Контрагент)
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &ПоступлениеТоваровУслуг";
	Запрос.УстановитьПараметр("ПоступлениеТоваровУслуг", ДокументПоступлениеТоваровУслуг.Ссылка);
	Запрос.УстановитьПараметр("Контрагент", ДокументПоступлениеТоваровУслуг.Контрагент);
	Запрос.УстановитьПараметр("КГ", Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("Килограмм"));
	Запрос.УстановитьПараметр("ШТ", Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("Штука"));
	Запрос.Текст = ТекстЗапроса;
	POSITION = Запрос.Выполнить().Выгрузить();
	СтруктураДокумента.Вставить("POSITION",POSITION);
	
	Возврат СтруктураДокумента;
	
КонецФункции

// Процедура создает структуру документа, содержащую параметры документа
//
// Параметры:
//  ДокументЗаказ                  - ссылка на объект заказ, отчет о доставке которого необходимо отправить
//
Функция  СоздатьСтруктуруДокументаЗаказПоставщику(ДокументЗаказПоставщику) 
	
	СтруктураДокумента = Новый Структура;
	//Номер ув. об отгрузке/
	СтруктураДокумента.Вставить("NUMBER",ЗаменитьСимволы(СокрЛП(ДокументЗаказПоставщику.Номер)));
	//Дата документа
	СтруктураДокумента.Вставить("DATE",Формат(ДокументЗаказПоставщику.Дата,"ДФ=""гггг-ММ-дд"""));
	//Дата поставки
	СтруктураДокумента.Вставить("DELIVERYDATE",Формат(ДокументЗаказПоставщику.ДатаПоступления,"ДФ=""гггг-ММ-дд""")); 
	//Время поставки
	СтруктураДокумента.Вставить("DELIVERYTIME", Неопределено); 
	//Обозначение промоакции или № поставщика
	СтруктураДокумента.Вставить("CAMPAIGNNUMBER", Неопределено); 
	//Валюта
	СтруктураДокумента.Вставить("CURRENCY","UAH");
	//Свободный текст
	СтруктураДокумента.Вставить("INFO", Неопределено); 
	
	//HEAD
	//GLN поставщика
	СтруктураДокумента.Вставить("SUPPLIER",СокрЛП(ДокументЗаказПоставщику.Контрагент.GLN));
	//GLN покупателя
	СтруктураДокумента.Вставить("BUYER",СокрЛП(ДокументЗаказПоставщику.Организация.GLN));
	//GLN места доставки
	СтруктураДокумента.Вставить("DELIVERYPLACE",СокрЛП(ДокументЗаказПоставщику.Организация.GLN));
	//GLN номер плательщика
	СтруктураДокумента.Вставить("INVOICEPARTNER",СокрЛП(ДокументЗаказПоставщику.Организация.GLN));
	//GLN отправителя сообщения
	СтруктураДокумента.Вставить("SENDER",СокрЛП(ДокументЗаказПоставщику.Организация.GLN));  
	//GLN получателя сообщения
	СтруктураДокумента.Вставить("RECIPIENT",СокрЛП(ДокументЗаказПоставщику.Контрагент.GLN));
	//Номер транзакции
	EDIINTERCHANGEID = ПолучитьEDIINTERCHANGEID(ДокументЗаказПоставщику.Контрагент);
	СтруктураДокумента.Вставить("EDIINTERCHANGEID", EDIINTERCHANGEID);
	//EDIMESSAGE 
	СтруктураДокумента.Вставить("EDIMESSAGE", Формат(ТекущаяДата(), "ДФ=""ггггММддЧЧммсс000""") + "-OUT-" + EDIINTERCHANGEID);
	
	//POSITION
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
    |   ЗаказПоставщикуТовары.НомерСтроки КАК POSITIONNUMBER,
    |   ЗаказПоставщикуТовары.Номенклатура.Артикул КАК PRODUCTIDBUYER,
    |   ВЫБОР
    |       КОГДА НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента ЕСТЬ NULL
    |           ТОГДА Штрихкоды.Штрихкод
    |       ИНАЧЕ НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента
    |   КОНЕЦ КАК PRODUCT,
    |   НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента КАК PRODUCTIDSUPPLIER,
    |   ЗаказПоставщикуТовары.Количество * ЗаказПоставщикуТовары.Коэффициент КАК ORDEREDQUANTITY,
    |   ВЫБОР
    |       КОГДА ЗаказПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = &КГ
    |           ТОГДА ""KGM""
    |       КОГДА ЗаказПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = &ШТ
    |           ТОГДА ""PCE""
    |   КОНЕЦ КАК ORDEREDUNIT,
    |   ЗаказПоставщикуТовары.Цена КАК ORDERPRICE,
    |   ЗаказПоставщикуТовары.Номенклатура.Наименование КАК DESCRIPTION
    |ИЗ
    |   Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
    |       ПО ЗаказПоставщикуТовары.Номенклатура = НоменклатураКонтрагентов.Номенклатура
    |           И ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры = НоменклатураКонтрагентов.ХарактеристикаНоменклатуры
    |           И ЗаказПоставщикуТовары.ЕдиницаИзмерения = НоменклатураКонтрагентов.ЕдиницаИзмерения
    |           И (НоменклатураКонтрагентов.Контрагент = &Контрагент)
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
    |       ПО ЗаказПоставщикуТовары.Номенклатура = Штрихкоды.Владелец
    |           И ЗаказПоставщикуТовары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
    |ГДЕ
    |   ЗаказПоставщикуТовары.Ссылка = &ЗаказПоставщику";
	Запрос.УстановитьПараметр("ЗаказПоставщику", ДокументЗаказПоставщику.Ссылка);
	Запрос.УстановитьПараметр("Контрагент", ДокументЗаказПоставщику.Контрагент);
	Запрос.УстановитьПараметр("КГ", Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("кг"));
	Запрос.УстановитьПараметр("ШТ", Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт"));
	Запрос.Текст = ТекстЗапроса;
	POSITION = Запрос.Выполнить().Выгрузить();
	СтруктураДокумента.Вставить("POSITION",POSITION);
	
	Возврат СтруктураДокумента;
	
КонецФункции




//ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура предназначена для создания подключения к FTP
//
// Параметры:
//  отсутствуют
//
Функция ПолучитьFTPСоединение() Экспорт
	
	Если ИспользуетсяПрокси Тогда
		ПроксиСервер = Новый ИнтернетПрокси();
		ПроксиСервер.Пользователь = СокрЛП(ИмяПользователяПрокси);
		ПроксиСервер.Пароль = СокрЛП(ПарольПользователяПрокси);
		Попытка
			Сервер = Новый FTPСоединение(СерверОбмена, Порт, ИмяПользователяFTP, ПарольПользователяFTP, ПроксиСервер, ПасссивныйРежим);
		Исключение
			Сообщить("Не удалось подключиться к серверу!");
			Возврат Неопределено;
		КонецПопытки;
		
	Иначе
		Попытка
			Сервер = Новый FTPСоединение(СокрЛП(СерверОбмена), Порт, СокрЛП(ИмяПользователяFTP), СокрЛП(ПарольПользователяFTP), , ПасссивныйРежим);
		Исключение
			Сообщить("Не удалось подключиться к серверу!");
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	Возврат Сервер;
	
КонецФункции

Функция ПодключитьсяЕслиНеПодключено() Экспорт
	
	Если Сервер = Неопределено Тогда
		ПолучитьFTPСоединение();
	КонецЕсли;
	
	Возврат Сервер;
	
КонецФункции

Функция СтруктураДокументаВерна(СтруктураДокумента, ТекФайл)
	
	Если ТипЗнч(СтруктураДокумента) = Тип("Число") Тогда
		//Нет структуры
		Сообщить("Файл " + ТекФайл.Имя + " не загружен!!!" + Символы.ПС, СтатусСообщения.Информация);
		СписокФайловСОшибками.Добавить(ТекФайл);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции
Функция ПроверитьЗагруженЛиФайл(ТекущееКоличествоСозданныхДокументов, ТекФайл)
	
	Если ТекущееКоличествоСозданныхДокументов = 0 Тогда
		//Нет структуры
		Сообщить("Файл " + ТекФайл.Имя + " не загружен!!!" + Символы.ПС, СтатусСообщения.Информация);
		СписокФайловСОшибками.Добавить(ТекФайл);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура ПроверитьНаличиеФайлов(ТипДокумента) Экспорт
	Для Инд = 0 По (КонПериода - НачПериода) / (24*3600) Цикл
		ТекДата = НачПериода + Инд * 24*3600; 
		ПроверитьНаличиеФайловЗадату(ТипДокумента, Формат(ТекДата, "ДФ=yyyyMMdd"));
	КонецЦикла;
	
КонецПроцедуры


// Процедура предназначена для проверки наличия файлов в каталоге программы eXite
//
// Параметры:
//  отсутствуют
//
Процедура ПроверитьНаличиеФайловЗадату(ТипДокумента, ЗаДату) Экспорт
	
	ПолучитьFTPСоединение();
	
	Если Сервер = Неопределено Тогда
		Предупреждение("Отсутствует подключение к FTP!");
		Возврат;
	КонецЕсли;
	//ИЗМЕНЕНО Верескул Игорь(Начало 18.06.2018
    МассивФайлов = Новый Массив;
    Если НЕ Comarch Тогда
        МассивФайлов = Сервер.НайтиФайлы(СокрЛП(ПутьНаСервереOUT), "" + НРег(ТипДокумента) + "_" + ЗаДату + "*.xml");
        Если МассивФайлов.Количество() = 0  Тогда
            МассивФайлов = Сервер.НайтиФайлы(СокрЛП(ПутьНаСервереOUT), "" + ТипДокумента + "_" + ЗаДату + "*.xml");
        КонецЕсли; 
    Иначе      
        ВсеФайлы = Сервер.НайтиФайлы(СокрЛП(ПутьНаСервереOUT + ТипДокумента + "/"), "*.xml");
        Для каждого ФТПФайл Из ВсеФайлы Цикл
            ДатаФайла = НачалоДня(Дата(СтрЗаменить(Строка(ФТПФайл.ПолучитьВремяИзменения()), "00","20")));
        	Если Дата(ЗаДату) = ДатаФайла Тогда
                МассивФайлов.Добавить(ФТПФайл);
            КонецЕсли; 
        КонецЦикла; 
    КонецЕсли; 
	//Окончание)Верескул Игорь
    //Находим файлы в нужном каталоге по указанной маске 
	
	Для Каждого Файл Из МассивФайлов Цикл
		//Каталоги пропускаем
		Если НЕ Файл.Этофайл() Тогда
			Продолжить;
		КонецЕсли;
		//Сообщить("Файл = " + Файл.ПолучитьВремяИзменения());
        Если Comarch Тогда
            СоздатьКаталог(КаталогВременныхФайлов + "/"+ ТипДокумента);
            Сервер.Получить(Файл.ПолноеИмя, КаталогВременныхФайлов + "/"+ ТипДокумента + "/" + Файл.Имя);	
        Иначе
            Сервер.Получить(Файл.ПолноеИмя, КаталогВременныхФайлов  + "/"  + Файл.Имя);
        КонецЕсли; 
        
	КонецЦикла;
 
    СписокФайловСОшибками = Новый СписокЗначений;
	СписокФайловСОшибками.Очистить();
	Если МассивФайлов.Количество() = 0 Тогда
		Сообщить("Отсутствуют файлы для импорта в каталоге за " + ЗаДату, СтатусСообщения.Информация);
	Иначе
		Сообщить("Найдено " + МассивФайлов.Количество() + " файлов в каталоге FTP за дату " + ЗаДату, СтатусСообщения.Информация)
	КонецЕсли;
	// Проверяем наличие новых файлов в каталоге программы eXite
    Если Comarch Тогда
        Файлы = НайтиФайлы(КаталогВременныхФайлов + "/"+ ТипДокумента + "/", "*.xml");
    Иначе
        Файлы = НайтиФайлы(КаталогВременныхФайлов + "/", "" + ТипДокумента + "_" + ЗаДату + "*.xml");
    КонецЕсли; 
	
	
	// Счетчик  созданных документов
	КоличествоСозданныхДокументов=0;
	
	// Обрабатываем найденные файлы
	Если Не Файлы.Количество()=0 Тогда
		Сообщить("Импорт файлов начат в " + ТекущаяДата() + Символы.ПС);
		НачалоВыполнения = ТекущаяДата();
		
		Для Каждого ТекФайл Из Файлы Цикл
			
			Если НЕ СписокФайловСОшибками.НайтиПоЗначению(ТекФайл) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Сообщить("Обрабатывается файл " + ТекФайл.Имя, СтатусСообщения.Информация);
			
			// Если проверка успешно завершена, создаем новый заказ
			Состояние(ТекФайл.ПолноеИмя);
			// Читаем файл
			Чтение = Новый ЧтениеXML();
			ДеревоЗначений = Новый ДеревоЗначений();
			
			Попытка
				Чтение.ОткрытьФайл(ТекФайл.ПолноеИмя);
				Чтение.Прочитать();
			Исключение
				Чтение.Закрыть();
				Предупреждение("Документ XML поврежден");
			КонецПопытки;
			
			ДеревоЗначений.Колонки.Добавить("Элемент");
			ДеревоЗначений.Колонки.Добавить("Текст");
			Корень         = ДеревоЗначений.Строки.Добавить();
			Корень.Элемент = Чтение.Имя;
			Рекурсия(Корень, Чтение);
			Дерево = ДеревоЗначений;
			
			// Разберем строки дерева в структуру значений
			Если ТипДокумента = "ORDER" Тогда
				СтруктураДокумента = ПолучитьСтруктуруДокумента_ORDER(Дерево);
				Если НЕ СтруктураДокументаВерна(СтруктураДокумента, ТекФайл) Тогда
					Продолжить;
				КонецЕсли;
				ТекущееКоличествоСозданныхORDER = СоздатьЗаказ(КаталогВременныхФайлов+ТекФайл.Имя, СтруктураДокумента);
				Если НЕ ПроверитьЗагруженЛиФайл(ТекущееКоличествоСозданныхORDER, ТекФайл) Тогда
					Продолжить;
				КонецЕсли;
				КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + ТекущееКоличествоСозданныхORDER;
			ИначеЕсли ТипДокумента = "INVOICE" Тогда
				СтруктураДокумента = ПолучитьСтруктуруДокумента_INVOICE(Дерево);
				Если НЕ СтруктураДокументаВерна(СтруктураДокумента, ТекФайл) Тогда
					Продолжить;
				КонецЕсли;
				ТекущееКоличествоСозданныхINVOICE = СоздатьЗаписьСчета(КаталогВременныхФайлов+ТекФайл.Имя, СтруктураДокумента);
				Если НЕ ПроверитьЗагруженЛиФайл(ТекущееКоличествоСозданныхINVOICE, ТекФайл) Тогда
					Продолжить;
				КонецЕсли;
				КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + ТекущееКоличествоСозданныхINVOICE;
			ИначеЕсли ТипДокумента = "ORDRSP" Тогда
				Попытка
					СтруктураДокумента = ПолучитьСтруктуруДокумента_ORDRSP(Дерево);
					Если НЕ СтруктураДокументаВерна(СтруктураДокумента, ТекФайл) Тогда
						Продолжить;
					КонецЕсли;
				Исключение
					Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
					Продолжить;
				КонецПопытки;
				ТекущееКоличествоСозданныхORDRSP = СоздатьЗаписьПодтвержденияЗаказа(КаталогВременныхФайлов+ТекФайл.Имя, СтруктураДокумента);
				Если НЕ ПроверитьЗагруженЛиФайл(ТекущееКоличествоСозданныхORDRSP, ТекФайл) Тогда
					Продолжить;
				КонецЕсли;
				КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + ТекущееКоличествоСозданныхORDRSP;
			ИначеЕсли ТипДокумента = "RECADV" Тогда
				СтруктураДокумента = ПолучитьСтруктуруДокумента_RECADV(Дерево);
				Если НЕ СтруктураДокументаВерна(СтруктураДокумента, ТекФайл) Тогда
					Продолжить;
				КонецЕсли;
				ТекущееКоличествоСозданныхRECADV = СоздатьЗаписьУведомленияОПриеме(КаталогВременныхФайлов+ТекФайл.Имя, СтруктураДокумента);
				Если НЕ ПроверитьЗагруженЛиФайл(ТекущееКоличествоСозданныхRECADV, ТекФайл) Тогда
					Продолжить;
				КонецЕсли;
				КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + ТекущееКоличествоСозданныхRECADV;
			ИначеЕсли ТипДокумента = "DESADV" Тогда
				СтруктураДокумента = ПолучитьСтруктуруДокумента_DESADV(Дерево);
				Если НЕ СтруктураДокументаВерна(СтруктураДокумента, ТекФайл) Тогда
					Продолжить;
				КонецЕсли;
				ТекущееКоличествоСозданныхDESADV = СоздатьЗаписьУведомленияОбОтгрузке(КаталогВременныхФайлов+ТекФайл.Имя, СтруктураДокумента);
				Если НЕ ПроверитьЗагруженЛиФайл(ТекущееКоличествоСозданныхDESADV, ТекФайл) Тогда
					Продолжить;
				КонецЕсли;
				КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + ТекущееКоличествоСозданныхDESADV;
				
			ИначеЕсли ТипДокумента = "INVOICE" Тогда
				СтруктураДокумента = ПолучитьСтруктуруДокумента_INVOICE(Дерево);
				Если НЕ СтруктураДокументаВерна(СтруктураДокумента, ТекФайл) Тогда
					Продолжить;
				КонецЕсли;
				ТекущееКоличествоСозданныхINVOICE = СоздатьЗаписьСчета(КаталогВременныхФайлов+ТекФайл.Имя, СтруктураДокумента);
				Если НЕ ПроверитьЗагруженЛиФайл(ТекущееКоличествоСозданныхINVOICE, ТекФайл) Тогда
					Продолжить;
				КонецЕсли;
				КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + ТекущееКоличествоСозданныхINVOICE;
			ИначеЕсли ТипДокумента = "PRICAT" Тогда
				СтруктураДокумента = ПолучитьСтруктуруДокумента_PRICAT(Дерево);
				Если НЕ СтруктураДокументаВерна(СтруктураДокумента, ТекФайл) Тогда
					Продолжить;
				КонецЕсли;
				ТекущееКоличествоСозданныхPRICAT = СоздатьПрайсЛист(КаталогВременныхФайлов+ТекФайл.Имя, СтруктураДокумента);
				Если НЕ ПроверитьЗагруженЛиФайл(ТекущееКоличествоСозданныхPRICAT, ТекФайл) Тогда
					Продолжить;
				КонецЕсли;
				КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + ТекущееКоличествоСозданныхPRICAT;
			КонецЕсли;
			
			// После создания заказа удаляем загруженный файл 
			Чтение.Закрыть();
			УдалитьФайлы(КаталогВременныхФайлов+ТекФайл.Имя);
		КонецЦикла;
		// Сообщим количество загруженых файлов
		Сообщить("Обработка eXite окончена " +ТекущаяДата() + ". Загружено " + КоличествоСозданныхДокументов + " файлов из " + Файлы.Количество() + " возможных. Время выполнения " + (ТекущаяДата() - НачалоВыполнения) + "с");
	КонецЕсли;
	
КонецПроцедуры

// Функция предназначена для получения слудующего EDIINTERCHANGEID
// для контретного контрагента 
//
// Параметры:
//  Контрагент                    - Контрагент, для которого определяется EDIINTERCHANGEID
//
// Возвращаемое значение:
// EDIINTERCHANGEID - число или строка
//
Функция ПолучитьEDIINTERCHANGEID(Контрагент)
	
	НаборРегистра = РегистрыСведений._eXiteЗначенияEDIINTERCHANGEIDКонтрагентов.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Контрагент.Использование = Истина;
	НаборРегистра.Отбор.Контрагент.ВидСравнения = ВидСравнения.Равно;
	НаборРегистра.Отбор.Контрагент.Значение = Контрагент;
	НаборРегистра.Прочитать();
	
	Если НаборРегистра.Количество() = 0 Тогда
		EDIINTERCHANGEID = 0;
		НовЗапись = НаборРегистра.Добавить();
		НовЗапись.Контрагент = Контрагент;
		НовЗапись.EDIINTERCHANGEID = 1;
	Иначе
		EDIINTERCHANGEID = НаборРегистра[0].EDIINTERCHANGEID + 1;
		НаборРегистра[0].EDIINTERCHANGEID = НаборРегистра[0].EDIINTERCHANGEID + 1;
	КонецЕсли;
	
	НаборРегистра.Записать(Истина);
	
	Возврат Формат(EDIINTERCHANGEID,"ЧГ=0");
	
КонецФункции

// Функция определяет контактные данные
// контретного контактного лмца 
//
// Параметры:
//  КонтактноеЛицо                    	- Контактное лицо, для которого определяются контактные данные
//
// Возвращаемое значение:
// КонтактныеДанные 					- таблица значений
//
Функция ПолучитьКонтактныеДанные(КонтактноеЛицо)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &КонтактноеЛицо";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	
	КонтактныеДанные = Запрос.Выполнить().Выгрузить();
	
	Возврат КонтактныеДанные;
	
КонецФункции

// Функция определяет адрес доставки 
//
// Параметры:
//  GLN                    	- GLN покупателя, для которого определяется адрес доставки
//	GLNDELIVERYPLACE		- GLNDELIVERYPLACE
//
// Возвращаемое значение:
// АдресДоставки 			- СправочникСсылка.Адреса
//
Функция ПолучитьАдресДоставки(GLN, GLNDELIVERYPLACE)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
    |   ТочкиДоставки.Ссылка КАК АдресДоставки
    |ИЗ
    |   Справочник.ТочкиДоставки КАК ТочкиДоставки
    |ГДЕ
    |   ТочкиДоставки.GLN = &GLNDELIVERYPLACE
    |   И ТочкиДоставки.Владелец.GLN = &GLN
    |   И ТочкиДоставки.ПометкаУдаления = ЛОЖЬ";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("GLN", GLN);
	Запрос.УстановитьПараметр("GLNDELIVERYPLACE", GLNDELIVERYPLACE);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.АдресДоставки;
	ИначеЕсли Выборка.Количество() = 0 Тогда
		Возврат Справочники.ТочкиДоставки.ПустаяСсылка();
	Иначе
		Сообщить("Найдено несколько адресов доставки с одинаковым GLN!", СтатусСообщения.ОченьВажное);
		Возврат Справочники.ТочкиДоставки.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Функция определяет валюту 
//
// Параметры:
//  xmlВалюта               - представление валюты в файле обмена
//
// Возвращаемое значение:
// Валюта 					- СправочникСсылка.Валюты
//
Функция ПолучитьВалюту(xmlВалюта)
	
	Если xmlВалюта = "UAH" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(980);
	ИначеЕсли xmlВалюта = "RUB" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(643);
	ИначеЕсли xmlВалюта = "USD" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(840);
	ИначеЕсли xmlВалюта = "EUR" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(978);
	ИначеЕсли xmlВалюта = "MDL" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(498);
	ИначеЕсли xmlВалюта = "BYR" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(112);
	Иначе
		Возврат Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЕдИзмДляВыгрузки(ЕдИзм)
	//GRM – грамм; KGM – килограмм; 
	//LTR – литр; MMT – миллиметр; MTK – квадратный метр;
	//MTQ – кубический метр; MTR – метр; MGM – миллиграмм; 
	//MLT – миллилитр; MMQ – кубический миллиметр; PCE – штук.
			
	Если ЕдИзм.ЕдиницаПоКлассификатору.Код = "796" Тогда
		//PCE – штук
		xmlЕдИзм = "PCE";
	ИначеЕсли ЕдИзм.ЕдиницаПоКлассификатору.Код = "166" Тогда
		//KGM – килограмм
		xmlЕдИзм = "KGM";
	Иначе
		xmlЕдИзм = "";
	КонецЕсли;
	
	Возврат xmlЕдИзм;
	
КонецФункции

// Процедура предназначена для заполнения табличной части ценами номенклатуры исходя из типа цен договора контрагента
//
// Параметры:
//  ЗаказПокупателя                - ссылка на объект ЗаказПокупателя 
//
Процедура ЗаполнитьТабличнуюЧастьЦенами(ЗаказПокупателя)
	
	СпособЗаполненияЦен=Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	мВалютаРегламентированногоУчета=Константы.ВалютаРегламентированногоУчета.Получить();
	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЗаказПокупателя);
	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ПолучитьСтруктуруФормы(ЗаказПокупателя);
	ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЗаказПокупателя,СпособЗаполненияЦен,СтруктураРеквизитовДокумента,,"Товары",мВалютаРегламентированногоУчета,,СтруктураЗначений);
	
	
	//СпособЗаполненияЦен=Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	//мВалютаРегламентированногоУчета=Константы.ВалютаРегламентированногоУчета.Получить();
	//Для Каждого СтрокаТабличнойЧасти Из ЗаказПокупателя.Товары Цикл
	//	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЗаказПокупателя);	
	//	// Заполняем реквизиты табличной части.
	//	СтрокаТабличнойЧасти.СтавкаНДС=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяСтавкаНДС");
	//	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЗаказПокупателя, мВалютаРегламентированногоУчета); 
	//	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЗаказПокупателя);
	//	
	//	// Рассчитываем реквизиты табличной части.
	//	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЗаказПокупателя);
	//	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЗаказПокупателя);
	//	
	//	// Рассчитываем плановую себестоимость.
	//	РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЗаказПокупателя, мВалютаРегламентированногоУчета);
	//	
	//КонецЦикла;
	
КонецПроцедуры

// Функция возвращает структуру возвращаемых параметров, необходимых
// для заполнения табличной части заказа ценами номенклатуры
//
// Параметры:
//  ЗаказПокупателя   - ссылка на объект заказ покупателя
//
// Возвращаемое значение:
//  Структура - структура возвращаемых параметров.
//
Функция ПолучитьСтруктуруФормы(ЗаказПокупателя)
	// Заполним структуру возвращаемых параметров
	СтруктураВозвращаемыхЗначений = Новый Структура();
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийТипЦен"						, ЗаказПокупателя.ТипЦен);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийВалютаДокумента"				, ЗаказПокупателя.ВалютаДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийВалютаВзаиморасчетов"		, ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКурсДокумента"				, ЗаказПокупателя.КурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКурсВзаиморасчетов"			, ЗаказПокупателя.КурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийУчитыватьНДС"				, ЗаказПокупателя.УчитыватьНДС);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийСуммаВключаетНДС"			, ЗаказПокупателя.СуммаВключаетНДС);
	
	СтруктураВозвращаемыхЗначений.Вставить("ПерезаполнитьЦеныПоТипу"			, Истина);
	СтруктураВозвращаемыхЗначений.Вставить("ПерезаполнитьПроцентСкидкиНаценки"  , Ложь);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйТипЦен"						, ЗаказПокупателя.ТипЦен);
	СтруктураВозвращаемыхЗначений.Вставить("ПересчитатьЦеныПоВалюте"			, Ложь);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйВалютаДокумента"				, ЗаказПокупателя.ВалютаДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКурсДокумента"					, ЗаказПокупателя.КурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКурсВзаиморасчетов"			, ЗаказПокупателя.КурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйУчитыватьНДС"					, ЗаказПокупателя.УчитыватьНДС);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйСуммаВключаетНДС"				, ЗаказПокупателя.СуммаВключаетНДС);
	
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКратностьДокумента"			, ЗаказПокупателя.КратностьВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКратностьДокумента"			, ЗаказПокупателя.КратностьВзаиморасчетов);
	
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКратностьВзаиморасчетов"		, ЗаказПокупателя.КратностьВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКратностьВзаиморасчетов"		, ЗаказПокупателя.КратностьВзаиморасчетов);
	
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийАвторасчетНДС"				, Истина);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйАвторасчетНДС"					, Истина);
	СтруктураВозвращаемыхЗначений.Вставить("РассчитатьНДССУчетомОшибокОкругления", Ложь);
	
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийИспользоватьПлановуюСебестоимость", Ложь);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйИспользоватьПлановуюСебестоимость"  , Ложь);
	
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийРегистрироватьЦеныПоставщика"     , Ложь);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйРегистрироватьЦеныПоставщика"       , Ложь);
	Возврат СтруктураВозвращаемыхЗначений;
КонецФункции

// Процедура предназначена для контроля свободных остатков в модуле формы документа
//
// Параметры:
//  ЗаказПокупателя                - ссылка на объект ЗаказПокупателя 
//
Процедура КонтрольСвободныхОстатков(ЗаказПокупателяОбъект) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", ЗаказПокупателяОбъект.Ссылка);
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателяОбъект.Ссылка);
	Запрос.УстановитьПараметр("КонПериода", ТекущаяДата());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Док.Размещение КАК Размещение,
	|	СУММА(Док.ДокументКоличество / СправочникЕдиницыИзмерения.Коэффициент) КАК ДокументКоличество,
	|	0 КАК КолСнятиеРазмещений,
	|	МАКСИМУМ(СправочникЕдиницыИзмерения.Коэффициент) КАК Коэффициент,
	|	МАКСИМУМ(Резервы.КоличествоОстаток / СправочникЕдиницыИзмерения.Коэффициент) КАК РезервыКоличество,
	|	МАКСИМУМ(РезервыПоЗаказу.КоличествоОстаток / СправочникЕдиницыИзмерения.Коэффициент) КАК РезервыПоЗаказу,
	|	МАКСИМУМ(Остатки.КоличествоОстаток / СправочникЕдиницыИзмерения.Коэффициент) КАК ОстаткиКоличество,
	|	МАКСИМУМ(КПередаче.КоличествоОстаток / СправочникЕдиницыИзмерения.Коэффициент) КАК КПередачеКоличество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателяТЧ.Количество * ЗаказПокупателяТЧ.Коэффициент / ЗаказПокупателяТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ДокументКоличество,
	|		ЗаказПокупателяТЧ.Номенклатура КАК Номенклатура,
	|		ЗаказПокупателяТЧ.Ссылка КАК Ссылка,
	|		ЗаказПокупателяТЧ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказПокупателяТЧ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЗаказПокупателяТЧ.Размещение КАК Размещение
	|	ИЗ
	|		Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТЧ) КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|		&КонПериода,
	|		Номенклатура В
	|		    (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		        Документ.ЗаказПокупателя.Товары.Номенклатура
	|		    ИЗ
	|		        Документ.ЗаказПокупателя.Товары
	|		    ГДЕ
	|		        Документ.ЗаказПокупателя.Товары.Ссылка = &ДокументСсылка)) КАК Остатки
	|		ПО Док.Номенклатура = Остатки.Номенклатура
	|			И Док.Размещение = Остатки.Склад
	|			И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	|		&КонПериода,
	|		&ЗаказПокупателя <> ДокументРезерва
	|		    И Номенклатура В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            Документ.ЗаказПокупателя.Товары.Номенклатура
	|		        ИЗ
	|		            Документ.ЗаказПокупателя.Товары
	|		        ГДЕ
	|		            Документ.ЗаказПокупателя.Товары.Ссылка = &ДокументСсылка)) КАК Резервы
	|		ПО Док.Номенклатура = Резервы.Номенклатура
	|			И Док.Размещение = Резервы.Склад
	|			И Док.ХарактеристикаНоменклатуры = Резервы.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	|		&КонПериода,
	|		&ЗаказПокупателя = ДокументРезерва
	|		    И Номенклатура В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            Документ.ЗаказПокупателя.Товары.Номенклатура
	|		        ИЗ
	|		            Документ.ЗаказПокупателя.Товары
	|		        ГДЕ
	|		            Документ.ЗаказПокупателя.Товары.Ссылка = &ДокументСсылка)) КАК РезервыПоЗаказу
	|		ПО Док.Номенклатура = РезервыПоЗаказу.Номенклатура
	|			И Док.Размещение = РезервыПоЗаказу.Склад
	|			И Док.ХарактеристикаНоменклатуры = РезервыПоЗаказу.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(
	|		&КонПериода,
	|		Номенклатура В
	|		    (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		        Документ.ЗаказПокупателя.Товары.Номенклатура
	|		    ИЗ
	|		        Документ.ЗаказПокупателя.Товары
	|		    ГДЕ
	|		        Документ.ЗаказПокупателя.Товары.Ссылка = &ДокументСсылка)) КАК КПередаче
	|		ПО Док.Номенклатура = КПередаче.Номенклатура
	|			И Док.Размещение = КПередаче.Склад
	|			И Док.ХарактеристикаНоменклатуры = КПередаче.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СправочникЕдиницыИзмерения
	|		ПО СправочникЕдиницыИзмерения.Владелец = Док.Номенклатура
	|			И Док.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = СправочникЕдиницыИзмерения.ЕдиницаПоКлассификатору
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|	И Док.Размещение ССЫЛКА Справочник.Склады
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.Размещение,
	|	Док.ЕдиницаИзмерения
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КоличествоВРезерве  = ?(Выборка.РезервыКоличество   = NULL, 0, Выборка.РезервыКоличество);
		КоличествоНаСкладе  = ?(Выборка.ОстаткиКоличество   = NULL, 0, Выборка.ОстаткиКоличество);
		КоличествоКПередаче = ?(Выборка.КПередачеКоличество = NULL, 0, Выборка.КПередачеКоличество);
		КоличествоСнимаемое = ?(Выборка.КолСнятиеРазмещений = NULL, 0, Выборка.КолСнятиеРазмещений);
		СвободныйОстаток = КоличествоНаСкладе + КоличествоСнимаемое - КоличествоВРезерве - КоличествоКПередаче ;
		
		ВРезервеПоЗаказу = ?(Выборка.РезервыПоЗаказу = NULL, 0, Выборка.РезервыПоЗаказу);
		СвободныйОстаток = ?(ВРезервеПоЗаказу > 0,СвободныйОстаток - ВРезервеПоЗаказу,СвободныйОстаток);
		
		МассивСтрок=ЗаказПокупателяОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Размещение,ЕдиницаИзмерения",Выборка.Номенклатура,Выборка.ХарактеристикаНоменклатуры,Выборка.Размещение,Выборка.ЕдиницаИзмерения));
		
		Если НЕ МассивСтрок.Количество() =0 Тогда
			МассивСтрок[0].Количество=Окр(СвободныйОстаток,0,РежимОкругления.Окр15как10);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры // КонтрольСвободныхОстатков()

// Функция возвращает структуру, содержащую номенклатуру и единицу измерения
//
// Параметры:
//  Контрагент        - ссылка на контрегента в заказе покупателя
//  АртикулПокупателя - артикул номенклатуры покупателя
//  ШтрихКод          - Штрих-код номенклатуры
//
// Возвращаемое значение:
//  Структура - структура, содержащая номенклатуру и единицу измерения.
//
Функция ПолучитьНоменклатуру(Контрагент,АртикулПокупателя,ШтрихКод)
	Запрос = Новый Запрос;
    //Запрос.Текст = "ВЫБРАТЬ
    //|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура,
    //|	НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента,  
    //|	НоменклатураКонтрагентов.ХарактеристикаНоменклатуры,  
    //|	НоменклатураКонтрагентов.ЕдиницаИзмерения
    //|ИЗ
    //|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
    //|ГДЕ
    //|	НоменклатураКонтрагентов.Контрагент = &Контрагент И";
    //Если ЗначениеЗаполнено(АртикулПокупателя) Тогда
    //	Запрос.Текст = Запрос.Текст + "
    //	|	НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента = &АртикулПокупателя";
    //Иначе
    //	Запрос.Текст = Запрос.Текст + "
    //	|	НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента = &ШтрихКод";
    //КонецЕсли;
    //
    Запрос.УстановитьПараметр("АртикулПокупателя",АртикулПокупателя);
    Запрос.УстановитьПараметр("ШтрихКод",ШтрихКод);
    Запрос.УстановитьПараметр("Контрагент",Контрагент);
    //Выборка = Запрос.Выполнить().Выбрать();
    //Если Выборка.Следующий() тогда
    //	Номенклатура = Выборка.Номенклатура;
    //	ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
    //	ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
    //Иначе
    Если НЕ АртикулПокупателя="" Тогда 
		Запрос.Текст = "ВЫБРАТЬ
			            |	НоменклатураАртикулыКонтрагентов.Ссылка КАК Номенклатура,
			            |	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры
			            |ИЗ
			            |	Справочник.Номенклатура.АртикулыКонтрагентов КАК НоменклатураАртикулыКонтрагентов
			            |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			            |		ПО НоменклатураАртикулыКонтрагентов.Ссылка = ХарактеристикиНоменклатуры.Владелец
			            |ГДЕ
			            |	НоменклатураАртикулыКонтрагентов.Артикул = &АртикулПокупателя";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() тогда
			Номенклатура = Выборка.Номенклатура;
			ЕдиницаИзмерения = Выборка.Номенклатура.ЕдиницаХраненияОстатков;
			ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;		
		КонецЕсли;
	ИначеЕсли (не ШтрихКод="") и (Номенклатура=Неопределено) Тогда
		Запрос.Текст = "ВЫБРАТЬ
               |	Штрихкоды.Владелец КАК Номенклатура,
               |	Штрихкоды.ХарактеристикаНоменклатуры
               |ИЗ
               |	РегистрСведений.Штрихкоды КАК Штрихкоды
               |ГДЕ
               |	Штрихкоды.Штрихкод = &Штрихкод";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() тогда
			Номенклатура = Выборка.Номенклатура;
			ЕдиницаИзмерения = Выборка.Номенклатура.ЕдиницаХраненияОстатков;
			ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		Иначе
			Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Возврат Новый Структура("Номенклатура, ЕдиницаИзмерения, ХарактеристикаНоменклатуры", Номенклатура, ЕдиницаИзмерения, ХарактеристикаНоменклатуры);
КонецФункции

// Функция заменяет символы, не присутствующие в наборе символов кодировки ISO 8859-1
//на пробелы
Функция ЗаменитьСимволы(ТекНомер)
	ТекНомер = СокрЛП(ТекНомер);
	Для Инд=1 По СтрДлина(ТекНомер) Цикл
		Если КодСимвола(Сред(ТекНомер,Инд,1))>126 Тогда
			ТекНомер=СтрЗаменить(ТекНомер,Сред(ТекНомер,Инд,1),Символ(32));
		КонецЕсли;
	КонецЦикла;
	ТекНомер = СтрЗаменить(ТекНомер, "-", "");
	Возврат СокрЛП(ТекНомер);
КонецФункции

// Функция переводит 14-ти значный штих-код в 13-ти значный
//
// Параметры:
//  ШтрихКодИсходник   - 14-ти значный штих-код исходник
//
// Возвращаемое значение:
//  ШтрихКодПриемник   - 13-ти значный штрих-код приемник.
//
Функция ПеревестиШтрихКодИз14В13(ШтрихКодИсходник) 
	
	ШтрихКодБезПервойЦифры = Сред(ШтрихКодИсходник, 2);
	
	СуммаЧетных = Число(Сред(ШтрихКодБезПервойЦифры, 2, 1)) +
	Число(Сред(ШтрихКодБезПервойЦифры, 4, 1)) +
	Число(Сред(ШтрихКодБезПервойЦифры, 6, 1)) +
	Число(Сред(ШтрихКодБезПервойЦифры, 8, 1)) +
	Число(Сред(ШтрихКодБезПервойЦифры, 10, 1)) +
	Число(Сред(ШтрихКодБезПервойЦифры, 12, 1)); 
	
	СуммаЧетных = СуммаЧетных * 3;
	
	СуммаНеЧетных = Число(Сред(ШтрихКодБезПервойЦифры, 1, 1)) +
	Число(Сред(ШтрихКодБезПервойЦифры, 3, 1)) +
	Число(Сред(ШтрихКодБезПервойЦифры, 5, 1)) +
	Число(Сред(ШтрихКодБезПервойЦифры, 7, 1)) +
	Число(Сред(ШтрихКодБезПервойЦифры, 9, 1)) + 
	Число(Сред(ШтрихКодБезПервойЦифры, 11, 1)); 
	
	ОбщаяСумма = СуммаЧетных + СуммаНеЧетных;
	
	ПосследняяЦифра = Прав(1000 - ОбщаяСумма, 1);
	ШтрихКодПриемник = "" + Сред(ШтрихКодИсходник, 2, 12) + ПосследняяЦифра; 
	
	Возврат  Число(ШтрихКодПриемник);
КонецФункции

// Процедура предназначена для обхода древовидной структуры XML - файла
//
// Параметры:
//  СтрокаДерева                - строка дерева файла XML
//
Процедура Рекурсия(СтрокаДерева, Чтение)
	
	АтрибутыСоответствие = Новый Соответствие();
	Пока Чтение.ПрочитатьАтрибут() Цикл
		АтрибутыСоответствие.Вставить(Чтение.Имя, Чтение.Значение);
	КонецЦикла;
	Если АтрибутыСоответствие.Количество() > 0 Тогда
		СтрокаДерева.Атрибуты = АтрибутыСоответствие;
	Иначе
		АтрибутыСоответствие = 0;
	КонецЕсли;
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			СтрокаДерева.Текст = Чтение.Значение;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Дочерний         = СтрокаДерева.Строки.Добавить();
			Дочерний.Элемент = Чтение.Имя;
			Рекурсия(Дочерний, Чтение);
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
КонецПроцедуры

Процедура РекурсияВXML(Дерево,Запись)
    Попытка
    	
    Для каждого Строки Из Дерево.Строки Цикл
        Запись.ЗаписатьНачалоЭлемента(Строки.Элемент);
        Если ЗначениеЗаполнено(Строки.Текст) Тогда
            Если ТипЗнч(Строки.Текст) = Тип("Число") Тогда
                Значение = Формат(Строки.Текст,"ЧДЦ=2; ЧРД=.");
            Иначе
                Значение = Строки.Текст;    
            КонецЕсли; 
            Запись.ЗаписатьТекст(Значение);	
        КонецЕсли; 
        Если Строки.Строки.Количество() > 0 Тогда
        	РекурсияВXML(Строки, Запись);
        КонецЕсли; 
        Запись.ЗаписатьКонецЭлемента();
    КонецЦикла; 
    
    Исключение
        Сообщить(Строки.Элемент);
    КонецПопытки; 
КонецПроцедуры
 

Функция ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, ИмяПоля, Обязательное)
	
	xmlЗначение = СтрокаДерева.Найти(ИмяПоля, "Элемент", Ложь);
	
	Если xmlЗначение = Неопределено Тогда
		
		Если Обязательное Тогда
			Сообщить("В файле не найдено обязательное поле """ + ИмяПоля + """", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
		Возврат Неопределено;
		
	Иначе
		
		ТекстовоеЗначение = xmlЗначение.Текст;
		
		Если Не ЗначениеЗаполнено(ТекстовоеЗначение) Тогда
			
			Если Обязательное Тогда
				Сообщить("Не заполнено обязательное поле """ + ИмяПоля + """", СтатусСообщения.Важное);
			КонецЕсли;
			
			Возврат Неопределено;
			
		Иначе
			
			Возврат ТекстовоеЗначение;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции


Функция ПолучитьУзелДерева(СтрокаДерева, ТипУзла, ИмяПоля)
	
	Если ТипУзла = "Строка" Тогда
		xmlУзел = СтрокаДерева.Найти(ИмяПоля, "Элемент", Ложь);
	ИначеЕсли ТипУзла = "Массив" Тогда
		xmlУзел = СтрокаДерева.НайтиСтроки(Новый Структура("Элемент", ИмяПоля), Ложь);
	Иначе
		xmlУзел = Неопределено;
	КонецЕсли;
	
	Возврат xmlУзел;
	
КонецФункции

//ИЗМЕНЕНО Верескул Игорь(Начало 08.08.2017
Функция ПолучитьДоговорОтдела(СтруктураДокумента)
   НаборЗаписей = РегистрыСведений.СоответствиеОтделовDIYДоговорам.СоздатьНаборЗаписей();
   НаборЗаписей.Отбор.Контрагент.Установить(СтруктураДокумента.Контрагент);
   НаборЗаписей.Прочитать();
   Для каждого  Запись Из НаборЗаписей Цикл
        Для каждого Строка Из СтруктураДокумента.ДокументТЧ Цикл
        	Если Лев(Строка.АртикулПокупателя, 2) = Запись.Отдел Тогда
            	Возврат Запись.Договор;
            КонецЕсли; 
        КонецЦикла; 
    КонецЦикла; 
    Возврат Неопределено;
КонецФункции

Функция СоздатьСтруктуруИнвойса(ДокументРасходнаяНакладная)
//	ДокументРасходнаяНакладная = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	Если Comarch Тогда
		//Номер ув. об отгрузке/
		СтруктураДокумента = Новый ДеревоЗначений;
		
		СтруктураДокумента.Колонки.Добавить("Элемент");
		СтруктураДокумента.Колонки.Добавить("Текст");
		DocumentInvoice = СтруктураДокумента.Строки.Добавить();
		DocumentInvoice.Элемент = "Document-Invoice";
		InvoiceHeader = DocumentInvoice.Строки.Добавить();
		InvoiceHeader.Элемент = "Invoice-Header"; 			
			InvoiceNumber = InvoiceHeader.Строки.Добавить();
			InvoiceNumber.Элемент = "InvoiceNumber";
			InvoiceNumber.Текст = ЗаменитьСимволы(СокрЛП(ДокументРасходнаяНакладная.Номер));
			
			InvoiceDate = InvoiceHeader.Строки.Добавить();
			InvoiceDate.Элемент = "InvoiceDate";
			InvoiceDate.Текст = Формат(ДокументРасходнаяНакладная.Дата,"ДФ=гггг-ММ-дд");
			
			InvoiceCurrency = InvoiceHeader.Строки.Добавить();
			InvoiceCurrency.Элемент = "InvoiceCurrency";
			InvoiceCurrency.Текст = "UAH";
			
			InvoicePostDate = InvoiceHeader.Строки.Добавить();
			InvoicePostDate.Элемент = "InvoicePostDate";
			InvoicePostDate.Текст = Формат(ДокументРасходнаяНакладная.Сделка.ДатаОтгрузки,"ДФ=гггг-ММ-дд"); 
			
			InvoicePostTime = InvoiceHeader.Строки.Добавить();
			InvoicePostTime.Элемент = "InvoicePostTime";
			InvoicePostTime.Текст = "23:59";
			
			DocumentFunctionCode = InvoiceHeader.Строки.Добавить();
			DocumentFunctionCode.Элемент = "DocumentFunctionCode";
			DocumentFunctionCode.Текст = "TN"; 
			
			ContractNumber = InvoiceHeader.Строки.Добавить();		
			ContractNumber.Элемент = "ContractNumber";
			ContractNumber.Текст = ДокументРасходнаяНакладная.ДоговорКонтрагента.Номер ;
			
			ContractDate =  InvoiceHeader.Строки.Добавить();		
			ContractDate.Элемент = "ContractDate";
			ContractDate.Текст = ДокументРасходнаяНакладная.ДоговорКонтрагента.Дата;
		InvoiceReference = DocumentInvoice.Строки.Добавить();
		InvoiceReference.Элемент = "InvoiceReference";
			Order = InvoiceReference.Строки.Добавить();
			Order.Элемент = "Order";
			
			BuyerOrderNumber = Order.Строки.Добавить();
			BuyerOrderNumber.Элемент = "BuyerOrderNumber";
			BuyerOrderNumber.Текст = ДокументРасходнаяНакладная.Сделка.НомерПокупателя;
			
			BuyerOrderDate = Order.Строки.Добавить();
			BuyerOrderDate.Элемент = "BuyerOrderDate";
			BuyerOrderDate.Текст = Формат(ДокументРасходнаяНакладная.Сделка.Дата,"ДФ=гггг-ММ-дд"); 				
			
		TaxInvoice = InvoiceReference.Строки.Добавить();
		TaxInvoice.Элемент = "TaxInvoice";
			TaxInvoiceNumber = TaxInvoice.Строки.Добавить();
			TaxInvoiceNumber.Элемент = "TaxInvoiceNumber";
			TaxInvoiceDate = TaxInvoice.Строки.Добавить();
			TaxInvoiceDate.Элемент = "TaxInvoiceDate";
			
		СтрокаНалоговой = Налоговые.Найти(ДокументРасходнаяНакладная.Номер, "Номер");  
		Если ЗначениеЗаполнено(СтрокаНалоговой) Тогда
			TaxInvoiceNumber.Текст = Формат(СтрокаНалоговой.НомерНалоговой, "ЧГ=");  
			TaxInvoiceDate.Текст = Формат(СтрокаНалоговой.Дата,"ДФ=гггг-ММ-дд"); 
		Иначе
			Сообщить("!!!Не найдена налоговая для " + ДокументРасходнаяНакладная.Ссылка,СтатусСообщения.Внимание);
		КонецЕсли; 
		
		//SalesDepartmentNumber 	
		//CorrectionTaxInvoiceNumber  	
		//CorrectionTaxInvoiceDate 	
	
		DespatchAdvice = InvoiceReference.Строки.Добавить();
		DespatchAdvice.Элемент = "DespatchAdvice";  	
		DespatchAdviceNumber = DespatchAdvice.Строки.Добавить();
		DespatchAdviceNumber.Элемент = "DespatchAdviceNumber";
		DespatchAdviceNumber.Текст = ЗаменитьСимволы(СокрЛП(ДокументРасходнаяНакладная.Номер));
		
		//ReceivingAdvice =  InvoiceReference.Строки.Добавить();
		//ReceivingAdvice.Элемент = "";
		//	ReceivingAdviceNumber 5252/ReceivingAdviceNumber 	
		//	DeliveryDate 1999-09-09/DeliveryDate 	
		//
		//DeliveryNote 		
		//	DeliveryNoteNumber 5353/DeliveryNoteNumber 	
		//	DeliveryNoteDate 2015-09-08/DeliveryNoteDate 	
		InvoiceParties = DocumentInvoice.Строки.Добавить();
		InvoiceParties.Элемент = "Invoice-Parties";
		Buyer = InvoiceParties.Строки.Добавить(); 		
		Buyer.Элемент = "Buyer";
		
		ILN = Buyer.Строки.Добавить();
		ILN.Элемент = "ILN";
		ILN.Текст = СокрЛП(ДокументРасходнаяНакладная.Контрагент.GLN);	
		
		TaxID = Buyer.Строки.Добавить();
		TaxID.Элемент = "TaxID";
		TaxID.Текст = ДокументРасходнаяНакладная.Контрагент.ИНН;
		
		VatPayerCertificate = Buyer.Строки.Добавить();
		VatPayerCertificate.Элемент = "VatPayerCertificate";
		VatPayerCertificate.Текст = ДокументРасходнаяНакладная.Контрагент.НомерСвидетельства;
		
		UtilizationRegisterNumber = Buyer.Строки.Добавить();
		UtilizationRegisterNumber.Элемент = "UtilizationRegisterNumber";
		UtilizationRegisterNumber.Текст = ДокументРасходнаяНакладная.Контрагент.КодПоЕДРПОУ;
		
		Name = Buyer.Строки.Добавить();
		Name.Элемент = "Name";
		Name.Текст = ДокументРасходнаяНакладная.Контрагент.Наименование;			
		
		StreetAndNumber = Buyer.Строки.Добавить();
		StreetAndNumber.Элемент = "StreetAndNumber";
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтактнаяИнформация.Представление
		               |ИЗ
		               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		               |ГДЕ
		               |	КонтактнаяИнформация.Объект = &Объект
		               |	И КонтактнаяИнформация.Тип = &Тип";
		Запрос.УстановитьПараметр("Объект", ДокументРасходнаяНакладная.Контрагент);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			StreetAndNumber.Текст = Выборка.Представление;
		Иначе
			StreetAndNumber.Текст = "";
		КонецЕсли; 
		CityName = Buyer.Строки.Добавить();
		CityName.Элемент = "CityName";
		CityName.Текст = "";
		
		PostalCode = Buyer.Строки.Добавить();
		PostalCode.Элемент = "PostalCode";
		PostalCode.Текст = "";
		
		PhoneNumber = Buyer.Строки.Добавить();
		PhoneNumber.Элемент = "PhoneNumber";
		PhoneNumber.Текст = "";
		
		Seller = InvoiceParties.Строки.Добавить();
		Seller.Элемент = "Seller";
		ILN = Seller.Строки.Добавить();
		ILN.Элемент = "ILN";
		ILN.Текст = СокрЛП(ДокументРасходнаяНакладная.Организация.GLN);
		
		TaxID = Seller.Строки.Добавить();
		TaxID.Элемент = "TaxID";
		
		VatPayerCertificate = Seller.Строки.Добавить();
		VatPayerCertificate.Элемент = "VatPayerCertificate";
		
		UtilizationRegisterNumber = Seller.Строки.Добавить();
		UtilizationRegisterNumber.Элемент = "UtilizationRegisterNumber";
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КодыОрганизацииСрезПоследних.КодПоЕДРПОУ,
		|	КодыОрганизацииСрезПоследних.ИНН,
		|	КодыОрганизацииСрезПоследних.НомерСвидетельства
		|ИЗ
		|	РегистрСведений.КодыОрганизации.СрезПоследних(, Организация = &Организация) КАК КодыОрганизацииСрезПоследних";
		Запрос.УстановитьПараметр("Организация", ДокументРасходнаяНакладная.Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			TaxID.Текст = Выборка.ИНН;  	
			VatPayerCertificate.Текст =  Выборка.НомерСвидетельства;
			UtilizationRegisterNumber.Текст = Выборка.КодПоЕДРПОУ;
		КонецЕсли; 
		
		Name = Seller.Строки.Добавить();
		Name.Элемент = "Name";
		Name.Текст = ДокументРасходнаяНакладная.Организация.Наименование;			
		
		StreetAndNumber = Seller.Строки.Добавить();
		StreetAndNumber.Элемент = "StreetAndNumber";
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтактнаяИнформация.Представление
		               |ИЗ
		               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		               |ГДЕ
		               |	КонтактнаяИнформация.Объект = &Объект
		               |	И КонтактнаяИнформация.Тип = &Тип";
		Запрос.УстановитьПараметр("Объект", ДокументРасходнаяНакладная.Организация);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			StreetAndNumber.Текст = Выборка.Представление;			
		КонецЕсли; 
		CityName = Seller.Строки.Добавить();
		CityName.Элемент = "CityName";
		CityName.Текст = "";
		
		PostalCode = Seller.Строки.Добавить();
		PostalCode.Элемент = "PostalCode";
		PostalCode.Текст = "";
		
		PhoneNumber = Seller.Строки.Добавить();
		PhoneNumber.Элемент = "PhoneNumber";
		PhoneNumber.Текст = "";
		
		DeliveryPoint = InvoiceParties.Строки.Добавить();
		DeliveryPoint.Элемент = "DeliveryPoint";
		
		ILN = DeliveryPoint.Строки.Добавить();
		ILN.Элемент = "ILN";
		ILN.Текст = СокрЛП(ДокументРасходнаяНакладная.кпкТорговаяТочка.GLNДоставки);	
		//		
		//	Invoicee 		
		//		ILN 4820000000001/ILN 	
		//
		//	Payer 		
		//		ILN 4820000000001/ILN 	
		
		InvoiceLines = DocumentInvoice.Строки.Добавить();
		InvoiceLines.Элемент = "Invoice-Lines";
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Штрихкоды.Владелец КАК Номенклатура,
		|	Штрихкоды.Штрихкод
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец В(&СписокНоменклатуры)";
		Запрос.УстановитьПараметр("СписокНоменклатуры", ДокументРасходнаяНакладная.Товары.ВыгрузитьКолонку("Номенклатура"));
		ТЗ_ШК = Запрос.Выполнить().Выгрузить();
		
		Для каждого Строка Из ДокументРасходнаяНакладная.Товары Цикл
			Line = InvoiceLines.Строки.Добавить();
			Line.Элемент = "Line";		
			LineItem = Line.Строки.Добавить();
			LineItem.Элемент = "LineItem"; 	
			LineNumber = LineItem.Строки.Добавить();
			LineNumber.Элемент = "LineItem";
			LineNumber.Текст = Строка.НомерСтроки;
			
			EAN =  LineItem.Строки.Добавить();
			EAN.Элемент = "EAN";
			СтрокаШтрихкода = ТЗ_ШК.Найти(Строка.Номенклатура,"Номенклатура"); 
			EAN.Текст = "";
			Если ЗначениеЗаполнено(СтрокаШтрихкода) Тогда
				EAN.Текст = СтрокаШтрихкода.Штрихкод;						
			КонецЕсли; 
			BuyerItemCode = LineItem.Строки.Добавить();
			BuyerItemCode.Элемент = "BuyerItemCode";
			BuyerItemCode.Текст = "";
			СтрокаАртикулов = Строка.Номенклатура.АртикулыКонтрагентов.Найти(ДокументРасходнаяНакладная.Контрагент, "Контрагент");
			Если ЗначениеЗаполнено(СтрокаАртикулов) Тогда
				BuyerItemCode.Текст = СтрокаАртикулов.Артикул;	
			КонецЕсли; 
			
			SupplierItemCode = LineItem.Строки.Добавить();
			SupplierItemCode.Элемент = "SupplierItemCode";
			SupplierItemCode.Текст = Прав(Строка.Номенклатура.Код, СтрДлина(Строка.Номенклатура.Код)-1);
			
			ExternalItemCode  = LineItem.Строки.Добавить();
			ExternalItemCode.Элемент = "ExternalItemCode";
			ExternalItemCode.Текст = СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка.Номенклатура.КодУКТЗЕД, "/", ""), "Х", ""),"X","");
			
			ItemDescription = LineItem.Строки.Добавить();
			ItemDescription.Элемент = "ItemDescription";
			ItemDescription.Текст = Строка.Номенклатура.ПолноеНаименование();
			
			ItemType = LineItem.Строки.Добавить();
			ItemType.Элемент = "ItemType";
			ItemType.Текст ="CU";
			
			InvoiceQuantity = LineItem.Строки.Добавить();
			InvoiceQuantity.Элемент = "InvoiceQuantity";
			InvoiceQuantity.Текст = Формат(Строка.Количество,"ЧДЦ=3; ЧГ=");
			
			UnitOfMeasure = LineItem.Строки.Добавить();
			UnitOfMeasure.Элемент = "UnitOfMeasure";
			UnitOfMeasure.Текст = "PCE";
			
			InvoiceUnitNetPrice = LineItem.Строки.Добавить();
			InvoiceUnitNetPrice.Элемент = "InvoiceUnitNetPrice";
			InvoiceUnitNetPrice.Текст = Формат(Строка.Цена, "ЧДЦ=2; ЧГ=");
			
			TaxRate = LineItem.Строки.Добавить();
			TaxRate.Элемент = "TaxRate";
			TaxRate.Текст = "20.00";
			
			TaxCategoryCode = LineItem.Строки.Добавить();
			TaxCategoryCode.Элемент = "TaxCategoryCode";
			TaxCategoryCode.Текст = "S";
			
			TaxAmount = LineItem.Строки.Добавить();
			TaxAmount.Элемент = "TaxAmount";
			TaxAmount.Текст = Формат(Строка.СуммаНДС, "ЧДЦ=2; ЧГ="); 
			
			NetAmount = LineItem.Строки.Добавить();
			NetAmount.Элемент = "NetAmount";
			Если ДокументРасходнаяНакладная.СуммаВключаетНДС Тогда
				NetAmount.Текст = Формат(Строка.Сумма - Строка.СуммаНДС, "ЧДЦ=2; ЧГ=");	
			Иначе
				NetAmount.Текст = Формат(Строка.Сумма, "ЧДЦ=2; ЧГ=");	
			КонецЕсли; 
			
			//
			//CorrectionInvoiceQuantity -21.000/CorrectionInvoiceQuantity 	
			//CorrectionInvoiceUnitNetPrice 1.00/CorrectionInvoiceUnitNetPrice 	
			//CorrectionNetAmount -151.90/CorrectionNetAmount 				
		КонецЦикла; 	
		InvoiceSummary = DocumentInvoice.Строки.Добавить();
		InvoiceSummary.Элемент = "Invoice-Summary";
		TotalLines = InvoiceSummary.Строки.Добавить();
		TotalLines.Элемент = "TotalLines"; 
		TotalLines.Текст = ДокументРасходнаяНакладная.Товары.Количество();
		Если ДокументРасходнаяНакладная.СуммаВключаетНДС Тогда
			Сумма = ДокументРасходнаяНакладная.Товары.Итог("Сумма") - ДокументРасходнаяНакладная.Товары.Итог("СуммаНДС");
		Иначе
			Сумма = ДокументРасходнаяНакладная.Товары.Итог("Сумма"); 
		КонецЕсли; 
		TotalNetAmount = InvoiceSummary.Строки.Добавить();
		TotalNetAmount.Элемент = "TotalNetAmount"; 	
		TotalNetAmount.Текст = Формат(Сумма , "ЧДЦ=2; ЧГ=");	
		
		TotalTaxAmount = InvoiceSummary.Строки.Добавить();
		TotalTaxAmount.Элемент = "TotalTaxAmount"; 
		TotalTaxAmount.Текст = Формат(ДокументРасходнаяНакладная.Товары.Итог("СуммаНДС"), "ЧДЦ=2; ЧГ=");
		
		TotalGrossAmount = InvoiceSummary.Строки.Добавить();
		TotalGrossAmount.Элемент = "TotalGrossAmount"; 
		Если ДокументРасходнаяНакладная.СуммаВключаетНДС Тогда
			TotalGrossAmount.Текст = Формат(ДокументРасходнаяНакладная.СуммаДокумента, "ЧДЦ=2; ЧГ=");
		Иначе
			TotalGrossAmount.Текст = Формат(ДокументРасходнаяНакладная.СуммаДокумента + ДокументРасходнаяНакладная.Товары.Итог("СуммаНДС"), "ЧДЦ=2; ЧГ=");
		КонецЕсли;
		
		TaxSummary = InvoiceSummary.Строки.Добавить();
		TaxSummary.Элемент = "Tax-Summary"; 
		
		TaxSummaryLine = TaxSummary.Строки.Добавить();
		TaxSummaryLine.Элемент = "Tax-Summary-Line"; 
		TaxRate = TaxSummaryLine.Строки.Добавить();
		TaxRate.Элемент = "TaxRate";
		TaxRate.Текст = "20.00";
		
		TaxCategoryCode = TaxSummaryLine.Строки.Добавить();
		TaxCategoryCode.Элемент = "TaxCategoryCode";
		TaxCategoryCode.Текст = "S";
		
		TaxAmount = TaxSummaryLine.Строки.Добавить();
		TaxAmount.Элемент = "TaxAmount";
		TaxAmount.Текст = Формат(ДокументРасходнаяНакладная.Товары.Итог("СуммаНДС"), "ЧДЦ=2; ЧГ=");
		
		TaxableAmount = TaxSummaryLine.Строки.Добавить();
		TaxableAmount.Элемент = "TaxableAmount";   
		TaxableAmount.Текст = Формат(Сумма, "ЧДЦ=2; ЧГ=");
		
		//CorrectionTaxAmount -30.38/CorrectionTaxAmount 
		//CorrectionTaxableAmount -151.90/CorrectionTaxableAmount 
		//CorrectionGrossAmount -182.28/CorrectionGrossAmount 
		Возврат СтруктураДокумента;
	КонецЕсли;
	Возврат Неопределено;
	
	КонецФункции
	
	Функция ПолучитьНН(МассивРеализацииТоваровУслугДляОтправкиСчета)
		Если МассивРеализацииТоваровУслугДляОтправкиСчета.Количество() = 0 Тогда
			Возврат Неопределено;	
		КонецЕсли; 
		СтрокаПодключения = "Srvr=""newdataserv"";Ref=""color_buh"";Usr=""ДляОбмена"";Pwd=""22121981"";";
		V82COMConnector= Новый COMОбъект("V83.COMConnector");
		Попытка
			Base1С = V82COMConnector.Connect(СтрокаПодключения);
		Исключение
			Сообщить("Ошибка подключения!");
		КонецПопытки;	
		МассивКодов = Base1С.NewObject("Массив");
		Для каждого Элемент Из МассивРеализацииТоваровУслугДляОтправкиСчета Цикл
			МассивКодов.Добавить(Элемент.Номер);	
		КонецЦикла;		
		Запрос = Base1С.NewObject("Запрос");
		Запрос.Текст = "ВЫБРАТЬ
		               |	НалоговаяНакладная.Номер КАК НомерНалоговой,
		               |	НалоговаяНакладная.Дата,
		               |	НалоговаяНакладная.ДокументОснование.Сделка.Номер КАК Номер
		               |ИЗ
		               |	Документ.НалоговаяНакладная КАК НалоговаяНакладная
		               |ГДЕ
		               |	НалоговаяНакладная.ДокументОснование.Сделка.Номер В(&Номер)
		               |	И ГОД(НалоговаяНакладная.ДокументОснование.Дата) = &Год";
		Запрос.УстановитьПараметр("Номер", МассивКодов);
		Запрос.УстановитьПараметр("Год", Год(ТекущаяДата()));
		Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
 
//Окончание)Верескул Игорь 

ФлАдреса = Истина;

КаталогВременныхФайлов = КаталогВременныхФайлов();

