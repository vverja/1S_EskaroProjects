Перем мПлатежныеОперации Экспорт;
Перем ЗагрВидыДокументов;
Перем ЗагрРасчетныеСчета;
Перем ОбязательныеВрегЗАГРУЗКИ;
Перем ВидыОпераций;
Перем ПустаяДата;
Перем СписокЖурналов;
Перем СтруктураРеквизитов;	// Реквизиты загружаемого документа
Перем мВалютаРегламентированногоУчета Экспорт;
Перем СписокКонтрагентов Экспорт; // Список контрагентов не найденных в справочнике
Перем ЭтоНовыйДокумент;
Перем ОтражатьВБухгалтерскомУчете;
       
// Структуры хранения настроечных данных при экспорте
Перем Экспорт_Выгружаемые;
Перем Экспорт_НеПустые;
Перем СтруктураЭкспорта;

// Структуры обработки текста при импорте
Перем Импорт_КоличествоСтрок;
Перем Импорт_ТекущаяСтрока;
Перем Импорт_ТекстДляРазбора;

// Структуры хранения данных при импорте
Перем Импорт_РасчетныеСчета Экспорт;
Перем Импорт_ВидыДокументов;
Перем Импорт_Заголовок;

// Структуры хранения настроечных данных при импорте
Перем Импорт_Загружаемые;
Перем Импорт_Распознаваемые;
Перем ТегиЗаголовка;
Перем ТегиРасчетногоСчета;
Перем Импорт_НеПустые;
Перем Импорт_ПризнакОбмена;

// Строки с группами реквизитов платежных документов через запятую
Перем РеквизитыПлДок_Основные;
Перем РеквизитыПлДок_ВидПлатежаОплаты;
Перем РеквизитыПлДок_Квитанция;
Перем РеквизитыПлДок_Списано;
Перем РеквизитыПлДок_Поступило;
Перем РеквизитыПлДок_Плательщик;
Перем РеквизитыПлДок_Получатель;
Перем РеквизитыПлДок_БюджетПлатеж;
Перем РеквизитыПлДок_Назначение;
Перем РеквизитыПлДок_НазначениеНеОбязательные;
Перем РеквизитыПлДок_Акредитив;
Перем РеквизитыПлДок_УсловияОпл;
Перем РеквизитыПлДок_Дополнительные;

Перем РеквизитыПлДокЭкс_Основные;
Перем РеквизитыПлДокЭкс_ВидПлатежаОплаты;
Перем РеквизитыПлДокЭкс_Плательщик;
Перем РеквизитыПлДокЭкс_Получатель;

Перем мТекущаяВалютаВзаиморасчетов;

#Если Клиент Тогда

Функция ПолучитьВыборкуОрганизаций() Экспорт
	
	ЗапросПоОрганизациям = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                    |	Организации.Ссылка КАК Организация,
	                                    |	Организации.Наименование КАК Наименование
	                                    |ИЗ
	                                    |	Справочник.Организации КАК Организации
	                                    |
	                                    |УПОРЯДОЧИТЬ ПО
	                                    |	Наименование");
	
	Возврат ЗапросПоОрганизациям.Выполнить().Выбрать();
	
КонецФункции

//Печать отчета о выгруженных документах
//
Процедура ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета, Источник) Экспорт
	
	МакетОтчета = ПолучитьМакет("ОтчетОВыгруженныхПлатежныхДокументах");
	
	Шапка    = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка   = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал   = МакетОтчета.ПолучитьОбласть("Подвал");
	НазвОрг  = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	Шапка.Параметры.ИмяОтчета 			= НСтр("ru='Отчет о выгруженных платежных документах';uk='Звіт про вивантажені платіжні документи'");
	Шапка.Параметры.ИмяСуммыСписания 	= НСтр("ru='На списание';uk='На списання'");
	Шапка.Параметры.ИмяСуммыПоступления = НСтр("ru='На поступление';uk='На надходження'");
	Шапка.Параметры.ОписаниеПериода		= Локализация.СтрШаблон(НСтр("ru='по счету ¤1¤ с ¤2¤ по ¤3¤';uk='по рахунку ¤1¤ з ¤2¤ по ¤3¤'"), БанковскийСчет.НомерСчета, Формат(НачПериода,"ДЛФ=D"), Формат(КонПериода,"ДЛФ=D"));
	ПолеОтчета.Вывести(Шапка);
	
	Индекс=0;
	ИтогоСуммаП = 0;
	ИтогоСуммаР = 0;
	
	Для Каждого СтрокаИсточника Из Источник Цикл
		
		Если СтрокаИсточника.Готовность <> -1 Тогда
			Продолжить;
		КонецЕсли;
		
		//Если СтрокаИсточника.ВидДокумента="Платежное поручение" Тогда
		Если СтрокаИсточника.ВидДокумента="Платежное поручение"
			ИЛИ СтрокаИсточника.ВидДокумента="Заявление на аккредитив" Тогда
			Строка.Параметры.Плательщик     = СтрокаИсточника.Организация;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.ОрганизацияНомерСчета;
			Строка.Параметры.Получатель     = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.КонтрагентНомерСчета;				
			Строка.Параметры.СуммаСписание  = СтрокаИсточника.СуммаДокумента;
			Строка.Параметры.СуммаПоступление = "";
			ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.СуммаДокумента;
		Иначе
			Строка.Параметры.Плательщик     = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.КонтрагентНомерСчета;
			Строка.Параметры.Получатель     = СтрокаИсточника.Организация;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.ОрганизацияНомерСчета;				
			Строка.Параметры.СуммаСписание  = "";					
			Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаДокумента;					
			ИтогоСуммаП = ИтогоСуммаП + СтрокаИсточника.СуммаДокумента;
		КонецЕсли;
		
		Строка.Параметры.Документ       = СтрокаИсточника.Документ;
		Индекс = Индекс+1;
		Строка.Параметры.Индекс         = Индекс;
		
		ПолеОтчета.Вывести(Строка);
	
	КонецЦикла;
	
	Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
	Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
	
	ПолеОтчета.Вывести(Подвал);
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки = Ложь;
	ПолеОтчета.ОтображатьСетку = Ложь;
	ПолеОтчета.ТолькоПросмотр = Истина;
	
КонецПроцедуры	

//Печать отчета о загруженных платежных документах.
//
Процедура ПечатьОтчетаОЗагруженныхПлатежныхДокументах(Источник) Экспорт
	
	ПолеОтчета = Новый ТабличныйДокумент;
	ИмеетсяСекцияРасчСчет = Ложь;
	
	МакетОтчета = ПолучитьМакет("ОтчетОЗагруженныхПлатежныхДокументах");
	
	Шапка    = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка   = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал   = МакетОтчета.ПолучитьОбласть("Подвал");
	Остатки  = МакетОтчета.ПолучитьОбласть("Остатки");
	НазвОрг  = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	Для Каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		Если Не ПустаяСтрока(СтрокаСчета.ДатаНачала) Тогда
			
			Индекс=0;
			ИтогоСуммаП = 0;
			ИтогоСуммаР = 0;
			ИмеетсяСекцияРасчСчет = Истина;

			Шапка.Параметры.ИмяОтчета 			= НСтр("ru='Отчет о загруженных платежных документах';uk='Звіт про завантажені платіжні документи'");
			Шапка.Параметры.ОписаниеПериода		= Локализация.СтрШаблон(НСтр("ru='по счету ¤1¤ с ¤2¤ по ¤3¤';uk='по рахунку ¤1¤ з ¤2¤ по ¤3¤'"), СтрокаСчета.РасчСчетОрг, СтрокаСчета.ДатаНачала, СтрокаСчета.ДатаКонца);
			ПолеОтчета.Вывести(Шапка);
			
			Отбор = Новый Структура;                    
			Отбор.Вставить("СчетОрганизации",Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",СтрокаСчета.РасчСчетОрг));
			ОтборПоСчету = Источник.НайтиСтроки(Отбор);
			
			ДатаНачала = ПолучитьДатуИзСтроки(ДатаНачала, СтрокаСчета.ДатаНачала);
			ДатаКонца = ПолучитьДатуИзСтроки(ДатаКонца, СтрокаСчета.ДатаКонца);
			
			Для Каждого СтрокаИсточника Из Источник Цикл
				
				Если СтрокаИсточника.СуммаПоступило > 0 
					И СтрокаИсточника.ДатаДок >= ДатаНачала И СтрокаИсточника.ДатаДок <= ДатаКонца Тогда
					
					Строка.Параметры.Контрагент = СтрокаИсточника.Плательщик;
					Строка.Параметры.Счет		= СтрокаИсточника.ПлательщикСчет;
					Строка.Параметры.СуммаПоступление= СтрокаИсточника.СуммаПоступило;
					Строка.Параметры.СуммаСписание= "";
					Строка.Параметры.Дата= СтрокаИсточника.ДатаПоступило;
					ИтогоСуммаП = ИтогоСуммаП + СтрокаИсточника.СуммаПоступило;
					
				ИначеЕсли СтрокаИсточника.СуммаСписано > 0 
					И СтрокаИсточника.ДатаДок >= ДатаНачала И СтрокаИсточника.ДатаДок <= ДатаКонца Тогда

					Строка.Параметры.Контрагент = СтрокаИсточника.Получатель;
					Строка.Параметры.Счет 		= СтрокаИсточника.ПолучательСчет;
					Строка.Параметры.СуммаСписание   = СтрокаИсточника.СуммаСписано;
					Строка.Параметры.СуммаПоступление= "";
					Строка.Параметры.Дата= СтрокаИсточника.ДатаСписано;
					ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.СуммаСписано;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Строка.Параметры.Номер = СтрокаИсточника.Номер;
				Строка.Параметры.НазначениеПлатежа = СтрокаИсточника.НазначениеПлатежа;
				Индекс = Индекс+1;
				
				Док = СтрокаИсточника.Документ;
				Если ЗначениеЗаполнено(Док) Тогда
					Строка.Параметры.Документ       = Док;
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
				Иначе
					Строка.Параметры.Документ       = НСтр("ru='НЕ ЗАГРУЖЕН';uk='НЕ ЗАВАНТАЖЕНИЙ'");
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
				КонецЕсли;
				
				Строка.Параметры.Индекс         = Индекс;
				
				ПолеОтчета.Вывести(Строка);
				
			КонецЦикла;
			
			Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
			Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
			
			ПолеОтчета.Вывести(Подвал);
			
			
			Остатки.Параметры.Текст1 = НСтр("ru='Остаток на начало ';uk='Залишок на початок '") + СтрокаСчета.ДатаНачала +":";
			Остатки.Параметры.Текст2 = НСтр("ru='Остаток на конец ';uk='Залишок на кінець '") + СтрокаСчета.ДатаКонца +":";
                                                                                          
			Если Не ПустаяСтрока(СтрокаСчета.НачальныйОстаток) И Не ОбщегоНазначения.ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаСчета.НачальныйОстаток, ".", ""),"-",""),",","")) Тогда
				Остатки.Параметры.Сумма1 = Формат(Число(СтрокаСчета.НачальныйОстаток), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧРГ=,");
			Иначе
				Остатки.Параметры.Сумма1 = СтрокаСчета.НачальныйОстаток;
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаСчета.КонечныйОстаток) И Не ОбщегоНазначения.ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаСчета.КонечныйОстаток, ".", ""),"-",""),",","")) Тогда
				Остатки.Параметры.Сумма2 = Формат(Число(СтрокаСчета.КонечныйОстаток), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧРГ=,");
			Иначе
				Остатки.Параметры.Сумма2 = СтрокаСчета.КонечныйОстаток;
			КонецЕсли;
			
			ПолеОтчета.Вывести(Остатки);
			
		КонецЕсли;
	КонецЦикла;
	Если Не ИмеетсяСекцияРасчСчет Тогда
		Для Каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
			
			Индекс=0;
			ИтогоСуммаП = 0;
			ИтогоСуммаР = 0;
			
			Шапка.Параметры.ИмяОтчета 			= НСтр("ru='Отчет о загруженных платежных документах';uk='Звіт про завантажені платіжні документи'");
			Шапка.Параметры.ОписаниеПериода		= Локализация.СтрШаблон(НСтр("ru='по счету ¤1¤ с ¤2¤ по ¤3¤';uk='по рахунку ¤1¤ з ¤2¤ по ¤3¤'"), СтрокаСчета.РасчСчетОрг, Импорт_Заголовок.ДатаНачала, Импорт_Заголовок.ДатаКонца);
			ПолеОтчета.Вывести(Шапка);
			
			Отбор = Новый Структура;                    
			Отбор.Вставить("СчетОрганизации",Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",СтрокаСчета.РасчСчетОрг));
			ОтборПоСчету = Источник.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаИсточника Из Источник Цикл
				
				Если СтрокаИсточника.СуммаПоступило > 0 Тогда
					
					Строка.Параметры.Контрагент = СтрокаИсточника.Плательщик;
					Строка.Параметры.Счет		= СтрокаИсточника.ПлательщикСчет;
					Строка.Параметры.СуммаПоступление= СтрокаИсточника.СуммаПоступило;
					Строка.Параметры.СуммаСписание= "";
					Строка.Параметры.Дата= СтрокаИсточника.ДатаПоступило;
					ИтогоСуммаП = ИтогоСуммаП + СтрокаИсточника.СуммаПоступило;
					
				ИначеЕсли СтрокаИсточника.СуммаСписано > 0  Тогда
					
					Строка.Параметры.Контрагент = СтрокаИсточника.Получатель;
					Строка.Параметры.Счет 		= СтрокаИсточника.ПолучательСчет;
					Строка.Параметры.СуммаСписание   = СтрокаИсточника.СуммаСписано;
					Строка.Параметры.СуммаПоступление= "";
					Строка.Параметры.Дата= СтрокаИсточника.ДатаСписано;
					ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.СуммаСписано;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Строка.Параметры.Номер = СтрокаИсточника.Номер;
				Строка.Параметры.НазначениеПлатежа = СтрокаИсточника.НазначениеПлатежа;
				Индекс = Индекс+1;
				
				Док = СтрокаИсточника.Документ;
				Если ЗначениеЗаполнено(Док) Тогда
					Строка.Параметры.Документ       = Док;
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
				Иначе
					Строка.Параметры.Документ       = НСтр("ru='НЕ ЗАГРУЖЕН';uk='НЕ ЗАВАНТАЖЕНИЙ'");
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
				КонецЕсли;
				
				Строка.Параметры.Индекс         = Индекс;
				
				ПолеОтчета.Вывести(Строка);
				
			КонецЦикла;
			
			Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
			Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
			
			ПолеОтчета.Вывести(Подвал);
			
			Остатки.Параметры.Текст1 = НСтр("ru='Остаток на начало ';uk='Залишок на початок '") + Импорт_Заголовок.ДатаНачала +":";
			Остатки.Параметры.Текст2 = НСтр("ru='Остаток на конец ';uk='Залишок на кінець '") + Импорт_Заголовок.ДатаКонца +":";
			Остатки.Параметры.Сумма1 = "";
			Остатки.Параметры.Сумма2 = "";
			ПолеОтчета.Вывести(Остатки);
			
		КонецЦикла;
	КонецЕсли;

	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки = Ложь;
	ПолеОтчета.ОтображатьСетку = Ложь;
	ПолеОтчета.ТолькоПросмотр = Истина;
	
	ПолеОтчета.Показать(НСтр("ru='Отчет о загруженных платежных документах.';uk='Звіт про завантажені платіжні документи.'"));
	
КонецПроцедуры	

//вызываем форму для просмотра тех, кого не нашли
Процедура ПросмотрКонтрагентов(ТипПросмотра) Экспорт	
	
	ФормаКонтрагентов =ПолучитьФорму("ФормаКонтрагентов");
	
	Если (ТипПросмотра = 0) И (ФормаКонтрагентов.Открыта()) Тогда
		ФормаКонтрагентов.Закрыть();
	ИначеЕсли (ТипПросмотра > 0) И (ФормаКонтрагентов.Открыта()) Тогда
		ФормаКонтрагентов.Обновить();
	ИначеЕсли (ТипПросмотра > 0) И (НЕ(ФормаКонтрагентов.Открыта())) Тогда
		ФормаКонтрагентов.Открыть();
	ИначеЕсли (ТипПросмотра = 0) И (НЕ(ФормаКонтрагентов.Открыта())) Тогда
		Сообщить(НСтр("ru='Все контрагенты существуют в справочнике.';uk='Всі контрагенти є в довіднику.'"), СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры //ПросмотрКонтрагентов();

//Создает контрагента
//
Функция СоздатьКонтрагента(СтрокаКонтрагент = Неопределено, ОткрыватьФорму=Истина) Экспорт //или СтрокаКонтрагент - строка, или ТаблицаКонтрагентов - ТЗ
	
	СообщатьОСозданномКонтрагенте 	 = ложь;
	СообщатьОСозданномБанковскомСчете= ложь;
	СообщатьОСозданномДоговоре		 = ложь;
	//эти элементы есть у всех справочников
	Если ТипЗнч(СтрокаКонтрагент.Реквизит)<>Тип("СправочникСсылка.Контрагенты") Тогда
		НовыйЭлемент =Справочники.Контрагенты.СоздатьЭлемент();
		
		НовыйЭлемент.Наименование = СтрокаКонтрагент.Представление;
		НовыйЭлемент.НаименованиеПолное=НовыйЭлемент.Наименование;
		НовыйЭлемент.Родитель = ГруппаДляНовыхКонтрагентов;
		НовыйЭлемент.КодПоЕДРПОУ =СтрокаКонтрагент.Строки[1].Значение;
		НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		
		НовыйЭлемент.Покупатель = Истина;
		НовыйЭлемент.Поставщик = Истина;
		
		НовыйЭлемент.Записать();
		НовыйЭлемент.ГоловнойКонтрагент = НовыйЭлемент.Ссылка;
		НовыйЭлемент.Записать();
		
		СообщатьОСозданномКонтрагенте = истина;
	Иначе
		НовыйЭлемент = СтрокаКонтрагент.Реквизит.ПолучитьОбъект();
	КонецЕсли;
	
	Если СообщатьОСозданномКонтрагенте Тогда
		Сообщить(Локализация.СтрШаблон(НСтр("ru='Контрагент(¤1¤) создан.';uk='Контрагент(¤1¤) створений.'"), СтрокаКонтрагент.Представление));
		ПредставлениеКонтрагента = ""+Символы.Таб+"- ";
	Иначе
		ПредставлениеКонтрагента = Локализация.СтрШаблон(НСтр("ru='Контрагенту(¤1¤)';uk='Контрагентові(¤1¤)'"), СтрокаКонтрагент.Представление);
	КонецЕсли;
	
	Для каждого Строка из СтрокаКонтрагент.Строки Цикл
			
		СообщатьОСозданномБанковскомСчете= ложь;
		СообщатьОСозданномДоговоре		 = ложь;
		Если Строка.Представление = НСтр("ru='Р/счет';uk='Р/рахунок'") и  Строка.Пометка Тогда
			Попытка
				НомерСчета      = Строка.Значение;
				
				КодВалюты = Строка.Строки.Найти(НСтр("ru='Валюта платежа';uk='Валюта платежу'"),"Представление", Истина);
				ВалютаВзаиморасчетов = "";
				Если КодВалюты <> Неопределено Тогда
					ВалютаВзаиморасчетов = КодВалюты.Значение;	
				КонецЕсли;	
				
				НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				НовыйСчет.НомерСчета      = НомерСчета;
				НовыйСчет.Владелец        = НовыйЭлемент.Ссылка;
				НовыйСчет.ВидСчета        = "Расчетный";
				
				Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
					НовыйСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета
				Иначе
					НовыйСчет.ВалютаДенежныхСредств = Справочники.Валюты.НайтиПоКоду(ВалютаВзаиморасчетов);
				КонецЕсли;	
				
				
				РССчет = Строка.Строки;

				Смещение = ?(РССчет.найти(НСтр("ru='Р/счет';uk='Р/рахунок'"),"Представление",истина) <> неопределено, 1,0);

					//Банк контрагента
					НовыйБанк = НайтиБанкПоМФО(РССчет[1+Смещение].Значение);
					Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
						НовыйБанк = Справочники.Банки.СоздатьЭлемент();
						НовыйБанк.Наименование = РССчет[0+Смещение].Значение;
						НовыйБанк.Код          = РССчет[1+Смещение].Значение;
						НовыйБанк.Записать();
					КонецЕсли;
					НовыйСчет.Банк = НовыйБанк.Ссылка;
				
				Если Не ЗначениеЗаполнено(НовыйЭлемент.ОсновнойБанковскийСчет) Тогда
					НовыйСчет.Наименование    = НСтр("ru='Основной расчетный счет';uk='Основний розрахунковий рахунок'");
					НовыйСчет.Записать();
					НовыйЭлемент.ОсновнойБанковскийСчет =НовыйСчет.Ссылка;
				Иначе
					НовыйСчет.Наименование    = Лев(""+ НовыйБанк +НСтр("ru=', (Расчетный)';uk=', (Розрахунковий)'"),100);
					НовыйСчет.Записать();
				КонецЕсли;
				
				СообщатьОСозданномБанковскомСчете = истина;
			Исключение
				
				Сообщить(НСтр("ru='Не удалось создать банковский счет контрагента!';uk='Не вдалося створити банківський рахунок контрагента!'"));
				
			КонецПопытки;
		КонецЕсли;
		
		Если Строка.Представление = НСтр("ru='Договор';uk='Договір'") и  Строка.Пометка Тогда
			
			Попытка
				
				КодВалюты = Строка.Строки.Найти(НСтр("ru='Валюта платежа';uk='Валюта платежу'"),"Представление", Истина);
				ВалютаВзаиморасчетов = "";
				Если КодВалюты <> Неопределено Тогда
					ВалютаВзаиморасчетов = КодВалюты.Значение;	
				КонецЕсли;	
				
				НайденныйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				
				НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
				Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
					НайденныйДоговорОбъект.ВалютаВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов");
				Иначе
					НайденныйДоговорОбъект.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду(ВалютаВзаиморасчетов);
				КонецЕсли;	

				
				Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
					НайденныйДоговорОбъект.ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаРегламентированногоУчета");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.Организация) Тогда
					НайденныйДоговорОбъект.Организация  = Организация;
				КонецЕсли;
				
				НайденныйДоговорОбъект.Владелец    = НовыйЭлемент.Ссылка;
				Вид =  Строка.Значение;
				Если Вид=НСтр("ru='С покупателем';uk='З покупцем'") Тогда
					НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				ИначеЕсли Вид=НСтр("ru='С поставщиком';uk='З постачальником'") Тогда
					НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;		
				Иначе
					НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;		
				КонецЕсли;
				
				НайденныйДоговорОбъект.СхемаНалоговогоУчета	= Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.ПоПервомуСобытию;
				
				НайденныйДоговорОбъект.Наименование          = НСтр("ru='Основной договор ';uk='Основний договір '")+НРег(Вид);
				НайденныйДоговорОбъект.Записать();
				НайденныйДоговор = НайденныйДоговорОбъект.Ссылка;
				
				Если Не ЗначениеЗаполнено(НовыйЭлемент.ОсновнойДоговорКонтрагента) Тогда
					НовыйЭлемент.ОсновнойДоговорКонтрагента =НайденныйДоговор;
				КонецЕсли;
				
				СообщатьОСозданномДоговоре		 = Истина;
			Исключение
				
				Сообщить(НСтр("ru='Не удалось создать договор контрагента!';uk='Не вдалося створити договір контрагента!'"));
				
			КонецПопытки;

		КонецЕсли;
		
		Если СообщатьОСозданномБанковскомСчете Тогда
			Сообщить(ПредставлениеКонтрагента + НСтр("ru=' добавлен банковский счет (';uk=' додано банківський рахунок ('")+НомерСчета+").");
		КонецЕсли;
		Если СообщатьОСозданномДоговоре Тогда
			Сообщить(ПредставлениеКонтрагента + НСтр("ru=' добавлен договор(';uk=' доданий договір('")+Вид+").");
		КонецЕсли;

	КонецЦикла;
	
	НовыйЭлемент.Записать();
	
	Если ОткрыватьФорму Тогда
		ОткрытьЗначение(НовыйЭлемент);
	КонецЕсли;
	
	Контрагент = НовыйЭлемент.Ссылка;
	
	Возврат Контрагент;

КонецФункции //СоздатьКонтрагента(Контрагент)

// Ищет банк по МФОу или КоррСчету
//
Функция НайтиБанкПоМФО(МФО)
	
	НайденныйБанк = Справочники.Банки.ПустаяСсылка();
	Если Не ПустаяСтрока(МФО) Тогда
		НайденныйБанк = Справочники.Банки.НайтиПоКоду(МФО);
	КонецЕсли;
	
	Возврат НайденныйБанк;

КонецФункции

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ОбъектДокумента)
	
	мТекущаяВалютаВзаиморасчетов     = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	УстановитьСвойство(СтрокаПлатеж , "СуммаВзаиморасчетов", МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ОбъектДокумента.ВалютаДокумента,
																ОбъектДокумента.ВалютаДокумента,
																ОбъектДокумента.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
																ОбъектДокумента.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов));
	
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, мТекущаяВалютаВзаиморасчетов, ДатаКурса, ОбъектДокумента)
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаКурса);

	УстановитьСвойство(СтрокаПлатеж , "КурсВзаиморасчетов", СтруктураКурсаВзаиморасчетов.Курс);
	УстановитьСвойство(СтрокаПлатеж , "КратностьВзаиморасчетов", СтруктураКурсаВзаиморасчетов.Кратность);

	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ОбъектДокумента);
	
КонецПроцедуры // РассчитатьКурсИСуммуВзаиморасчетов()

Процедура ЗаполнитьСтрокуПлатежаПоДоговору(СтрокаРасшифровки, ОбъектДокумента)
	
	ДатаЗаполнения = ОбъектДокумента.Дата;
	
	мТекущаяВалютаВзаиморасчетов = СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	РассчитатьКурсИСуммуВзаиморасчетов(СтрокаРасшифровки, мТекущаяВалютаВзаиморасчетов, ДатаЗаполнения, ОбъектДокумента);
	
	Если СтрокаРасшифровки.КурсВзаиморасчетов = 0 Тогда
		УстановитьСвойство(СтрокаРасшифровки , "КурсВзаиморасчетов", 1);
		УстановитьСвойство(СтрокаРасшифровки , "СуммаВзаиморасчетов", СтрокаРасшифровки.СуммаПлатежа);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНомерВФорматеОбмена(НомерДокумента, Знач ПрефиксОрганизации)

	Номер = СокрЛП(НомерДокумента);
	
	ОбщегоНазначения.ДобавитьПрефиксУзла(ПрефиксОрганизации);

	// удаление префикса из номера документа
	Если Найти(Номер, ПрефиксОрганизации)=1 Тогда 
		Номер = Сред(Номер, СтрДлина(ПрефиксОрганизации)+1);
	КонецЕсли;

	// так же, может остаться "минус" впереди
	Если Лев(Номер, 1) = "-" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;

	// удаление ведущих нулей
	Пока Лев(Номер, 1)="0" Цикл
		Номер = Сред(Номер, 2);
	КонецЦикла;
	
	Возврат Номер;
	
КонецФункции

// Процедура читает заголовок файла обмена
//
Функция ПрочитатьФайл(Файл)
	
	ФайлЗагр = Новый Файл(Файл);
	Если ФайлЗагр.Существует() = Ложь Тогда
		Сообщить(НСтр("ru='Файла ';uk='Файлу '")+Файл+НСтр("ru=' не существует!';uk=' не існує!'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ПотокЧтения = Новый ТекстовыйДокумент();
	Попытка
		ПотокЧтения.Прочитать(Файл);
	Исключение
		Сообщить(НСтр("ru='Файл не прочитан.';uk='Файл не прочитаний.'"), СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецПопытки;
	
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	Конецесли;

	ПотокЧтения.Прочитать(Файл,Кодир);

	Если ПотокЧтения.КоличествоСтрок()<1 Тогда
		Сообщить(НСтр("ru='В файл нет данных!';uk='У файлі нема даних!'"));
		Возврат Неопределено;
	КонецЕсли;

	Если СокрЛП(ПотокЧтения.ПолучитьСтроку(1))<>"_1CClientBankExchange" Тогда
		Сообщить(НСтр("ru='Указанный файл не является файлом обмена или неверно указана кодировка!';uk='Вказаний файл не є файлом обміну чи невірно вказана кодировка!'"));
		Возврат Неопределено;
	КонецЕсли;

	Возврат ПотокЧтения.ПолучитьТекст();

КонецФункции

//создаем список ненайденных контрагентов
Процедура СписокНеНайденных(СтрокаДокумента, Документ = Неопределено) Экспорт
	
	НайденКонтрагент = ТипЗнч(СтрокаДокумента.Контрагент)<>Тип("Строка");
	НайденСчет = ТипЗнч(СтрокаДокумента.СчетКонтрагента)<>Тип("Строка");
	НайденДоговор = ТипЗнч(СтрокаДокумента.Договор)<>Тип("Строка");
	
	ВалютаПлатежа = СтрокаДокумента.КодВалюты;
	
	ТипКонтрагента =?(СтрокаДокумента.ПлательщикСчет = БанковскийСчет.НомерСчета,"ПОЛУЧАТЕЛЬ","ПЛАТЕЛЬЩИК");
	НайденнаяЗаписьОКонтрагенте = ТаблицаКонтрагентов.Строки.Найти(СтрокаДокумента[ТипКонтрагента+"ОКПО"], "Значение", истина);

	//Контрагент
	Если НайденнаяЗаписьОКонтрагенте=неопределено Тогда
		
		НовыйКонтрагент = ТаблицаКонтрагентов.Строки.Добавить();
		НовыйКонтрагент.Представление = СтрокаДокумента[ТипКонтрагента];
		НовыйКонтрагент.НомерСтроки = СтрокаДокумента.НомерСтроки;
	
		ДобавитьОписаниеНовогоРеквизита(НСтр("ru='Наименование';uk='Найменування'")	,""		,ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("ОКПО"			,"ОКПО"	,ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента);
		
		Если НайденКонтрагент Тогда
			НовыйКонтрагент.Реквизит = СтрокаДокумента.Контрагент;
		КонецЕсли;

	ИначеЕсли НайденнаяЗаписьОКонтрагенте<>неопределено Тогда
		
		НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте.Родитель;
	
	КонецЕсли;
	
	//СчетКонтрагента
	Если Не НайденСчет и НовыйКонтрагент.Строки.Найти(СтрокаДокумента[ТипКонтрагента+"СЧЕТ"], "Значение", истина) = неопределено Тогда
		
		РеквизитыНовогоКонтрагента = 	ДобавитьОписаниеНовогоРеквизита(НСтр("ru='Р/счет';uk='Р/рахунок'")		,"СЧЕТ"	,ТипКонтрагента, НовыйКонтрагент,СтрокаДокумента);
		
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru='Банк';uk='Банк'")					,"БАНК"	,ТипКонтрагента, РеквизитыНовогоКонтрагента,СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru='МФО банка контрагента';uk='МФО банку контрагента'") ,"МФО"		,ТипКонтрагента, РеквизитыНовогоКонтрагента,СтрокаДокумента);
			РеквизитыСчета = РеквизитыНовогоКонтрагента.Строки.Добавить();
			РеквизитыСчета.Представление = НСтр("ru='Валюта платежа';uk='Валюта платежу'");
			РеквизитыСчета.Значение = ВалютаПлатежа;
		
	КонецЕсли;
	
	//ВидДоговора
	Если Не НайденДоговор Тогда
		ВидыДоговоров = УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(СтрокаДокумента.ВидОперации);
		Если ВидыДоговоров.Количество()>0 Тогда
			ВидДоговора = Строка(ВидыДоговоров[0]);
		КонецЕсли;
    КонецЕсли;

	//Договор
	Если Не НайденДоговор и НовыйКонтрагент.Строки.Найти(ВидДоговора, "Значение", истина) = неопределено Тогда
		РеквизитыНовогоКонтрагента = НовыйКонтрагент.Строки.Добавить();
		РеквизитыНовогоКонтрагента.Представление= НСтр("ru='Договор';uk='Договір'");
		РеквизитыНовогоКонтрагента.Значение = ВидДоговора;
				
		РеквизитыДоговора = РеквизитыНовогоКонтрагента.Строки.Добавить();
		РеквизитыДоговора.Представление = НСтр("ru='Наименование';uk='Найменування'");
		РеквизитыДоговора.Значение = НСтр("ru='Основной договор ';uk='Основний договір '")+НРег(ВидДоговора);
		
		РеквизитыДоговора = РеквизитыНовогоКонтрагента.Строки.Добавить();
		РеквизитыДоговора.Представление = НСтр("ru='Вид';uk='Вид'");
		РеквизитыДоговора.Значение = ВидДоговора;
		
		РеквизитыДоговора = РеквизитыНовогоКонтрагента.Строки.Добавить();
		РеквизитыДоговора.Представление = НСтр("ru='Ведение взаиморасчетов';uk='Ведення взаєморозрахунків'");
		РеквизитыДоговора.Значение = НСтр("ru='По договору в целом';uk='За договором у цілому'");
		
		РеквизитыДоговора = РеквизитыНовогоКонтрагента.Строки.Добавить();
		РеквизитыДоговора.Представление = НСтр("ru='Валюта платежа';uk='Валюта платежу'");
		РеквизитыДоговора.Значение = ВалютаПлатежа;
		
	КонецЕсли;
	
КонецПроцедуры //СписокНенайденных()

Функция ДобавитьОписаниеНовогоРеквизита(Представление,Реквизит,ТипКонтрагента,НовыйКонтрагент,СтрокаДокумента)

	РеквизитыНовогоКонтрагента = НовыйКонтрагент.Строки.Добавить();
	РеквизитыНовогоКонтрагента.Представление= Представление;
	РеквизитыНовогоКонтрагента.Значение = СтрокаДокумента[ТипКонтрагента+Реквизит];
	РеквизитыНовогоКонтрагента.Реквизит = ТипКонтрагента+Реквизит;
    Возврат РеквизитыНовогоКонтрагента;
	
КонецФункции //ДобавитьОписаниеНовогоРеквизита

Процедура ОбновитьСтруктуруТабличногоПоля(ТабПоле, СоответствиеИзменятьРазмер = Неопределено) Экспорт
	
	ТабПоле.СоздатьКолонки();
	
	Если ТипЗнч(СоответствиеИзменятьРазмер) = Тип("Соответствие") Тогда
		Для каждого КолонкаТабПоля Из ТабПоле.Колонки Цикл
			Если СоответствиеИзменятьРазмер[КолонкаТабПоля.Имя] = Ложь Тогда
				КолонкаТабПоля.ИзменениеРазмера = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

/////// НОВОЕ /////////////////////////////////////////////////////////////

Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)

	Если ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьНастройкуЗаполнения(ИмяДокумента,ИмяПараметра)
	
	Возврат НастройкаЗаполнения.Найти(ИмяДокумента,"Документ")[ИмяПараметра] 
	
КонецФункции
/////////////// Формирование управляющих данных ///////////////////////////

Процедура ЗаполнитьСтрокиРеквизитовПлДокументовДляИмпорта()
	
	РеквизитыПлДок_Основные = "Номер,Дата,Сумма,КодВалюты,СтатусДокумента,ДокументИД";
	РеквизитыПлДок_ВидПлатежаОплаты = "ВидПлатежа,ВидОплаты";
	
	РеквизитыПлДок_Квитанция = "КвитанцияДата,КвитанцияВремя,КвитанцияСодержание";
	
	РеквизитыПлДок_Списано = "ДатаСписано";
	РеквизитыПлДок_Поступило = "ДатаПоступило";
	
	РеквизитыПлДок_Плательщик = "ПлательщикСчет,Плательщик,ПлательщикБанк,ПлательщикМФО";
	
	РеквизитыПлДок_Получатель = "ПолучательСчет,Получатель,ПолучательБанк,ПолучательМФО";
	
	РеквизитыПлДок_БюджетПлатеж = "СтатусСоставителя,ПлательщикОКПО,ПолучательОКПО,ПоказательКБК,ОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа";
	
	РеквизитыПлДок_Назначение = "НазначениеПлатежа";
	РеквизитыПлДок_НазначениеНеОбязательные = "НазначениеПлатежа1,НазначениеПлатежа2,НазначениеПлатежа3,НазначениеПлатежа4,НазначениеПлатежа5,НазначениеПлатежа6";
	
	РеквизитыПлДок_Акредитив = "СрокПлатежа,Очередность";
	
	РеквизитыПлДок_УсловияОпл = "УсловиеОплаты1,УсловиеОплаты2,УсловиеОплаты3";
	
	РеквизитыПлДок_Дополнительные = "СрокАкцепта,ВидАккредитива,ПлатежПоПредст,ДополнУсловия,НомерСчетаПоставщика,ДатаОтсылкиДок";
	
КонецПроцедуры

Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;

	ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
	
	Пока ПозицияРазделителя > 0 Цикл
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяИтема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
		
	КонецЕсли;
		
	Возврат НовоеСоответствие;
	
КонецФункции

Процедура СформироватьСоответствиеВыгружаемых()
	
	Экспорт_Выгружаемые = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
	РеквизитыПлДок_ВидПлатежаОплаты + "," +
	РеквизитыПлДок_Плательщик + "," +
	РеквизитыПлДок_Получатель + "," +
	РеквизитыПлДок_БюджетПлатеж + "," +
	РеквизитыПлДок_Назначение + "," +
	РеквизитыПлДок_НазначениеНеОбязательные + "," +
	РеквизитыПлДок_Акредитив + "," +
	РеквизитыПлДок_УсловияОпл + "," +
	РеквизитыПлДок_Дополнительные);
	
КонецПроцедуры

Процедура СформироватьСоответствияНеПустыхПриИмпорте()
	
	ИмпортНеПустые_ПлатежноеПоручение = СоздатьСоответствиеИзСтроки(
	"Номер,Дата,Сумма,ПлательщикСчет,ПолучательСчет");
	
	// по наличию статуса составителя определяется что платеж - налоговый
	ИмпортНеПустые_ПлатежноеПоручениеБюджет = СоздатьСоответствиеИзСтроки(
	"Номер,Дата,Сумма,ПлательщикСчет,ПолучательСчет," +
	"СтатусСоставителя,ПлательщикОКПО,ПолучательОКПО,ПоказательКБК,ОКАТО,ПоказательОснования," +
	"ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа");
	
	Импорт_НеПустые = Новый Массив;
	
	Импорт_НеПустые.Добавить(ИмпортНеПустые_ПлатежноеПоручение);
	Импорт_НеПустые.Добавить(ИмпортНеПустые_ПлатежноеПоручениеБюджет);
	
КонецПроцедуры

Процедура СформироватьТегиЗаголовка()
	
	СтрокаТегов = ВРЕГ("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца");
	ТегиЗаголовка = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
	Импорт_Заголовок = Новый Структура(СтрокаТегов);
	
КонецПроцедуры

Процедура СформироватьТегиРасчетногоСчета()
	
	СтрокаТегов = ВРЕГ("ДатаНачала,ДатаКонца,РасчСчетОрг,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет");
	ТегиРасчетногоСчета = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
КонецПроцедуры

Процедура СформироватьСоответствиеЗагружаемых()
	
	Импорт_Загружаемые = СоздатьСоответствиеИзСтроки(ВРЕГ(РеквизитыПлДок_Основные + ","
	 + РеквизитыПлДок_ВидПлатежаОплаты + ","
	 + РеквизитыПлДок_Квитанция + ","
	 + РеквизитыПлДок_Списано + ","
	 + РеквизитыПлДок_Поступило + ","
	 + РеквизитыПлДок_Плательщик + ","
	 + РеквизитыПлДок_Получатель + ","
	 + РеквизитыПлДок_БюджетПлатеж + ","
	 + РеквизитыПлДок_Назначение + ","
	 + РеквизитыПлДок_НазначениеНеОбязательные + ","
	 + РеквизитыПлДок_Акредитив + ","
	 + РеквизитыПлДок_УсловияОпл + ","
	 + РеквизитыПлДок_Дополнительные));
	
КонецПроцедуры

Процедура ЗаполнитьРаспознаваемыеПриИмпорте()
	
	Импорт_Распознаваемые = Новый Массив;
	
	// определяютопреацию при для входящих документов
	Импорт_Распознаваемые.Добавить("Списано");
	Импорт_Распознаваемые.Добавить("Поступило");
	
	// Контрагент
	Импорт_Распознаваемые.Добавить("Контрагент");
	Импорт_Распознаваемые.Добавить("СчетКонтрагента");
	
	// Сумма
	Импорт_Распознаваемые.Добавить("СуммаДокумента");
	
	// Наконец, сам документ
	Импорт_Распознаваемые.Добавить("Документ");
	
	// Необязательные реквизиты, практически никогда нет
	Импорт_Распознаваемые.Добавить("ПоказательДатыДок");
	Импорт_Распознаваемые.Добавить("СрокПлатежаДок");
	Импорт_Распознаваемые.Добавить("СрокАкцептаДок");
	Импорт_Распознаваемые.Добавить("ДатаОтсылки");

КОнецПроцедуры


///////////////// Начальное формирование таблицы и поля ////////////////////

Функция СоздатьКолонкуВТаблице(РабочаяТаблица, ТабПоле, Имя, ТипКолонки = Неопределено, Заголовок = "", СоответсвиеХарактеристик)
	
	Если ПустаяСтрока(Имя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ШиринаКолонки = (СоответсвиеХарактеристик["Ширина"]);
	Если ТипЗнч(ШиринаКолонки) <> Тип("Число") Тогда
		ШиринаКолонки =  0;
	КонецЕсли;
	
	Если ТипЗнч(ТипКолонки) = Тип("ОписаниеТипов") Тогда
		РабочаяТаблица.Колонки.Добавить(Имя, ТипКолонки, Заголовок, ШиринаКолонки);
		
	Иначе
		РабочаяТаблица.Колонки.Добавить(Имя, , Заголовок, ШиринаКолонки);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьСтруктуруЭкспорта()

	СтруктураЭкспорта = новый структура;
	
	СтруктураЭкспорта.Вставить( "Выгружать",             "");  //     "_",                         
	СтруктураЭкспорта.Вставить( "Готовность",            "");  //     "Готовность",                 

	СтруктураЭкспорта.Вставить( "ВидДокумента"           "");  //       "Вид документа",                      
	
	СтруктураЭкспорта.Вставить( "НомерДок",              "");  //     "№ Документа",                
	СтруктураЭкспорта.Вставить( "Номер",                 "");  //    "Номер",                     
	СтруктураЭкспорта.Вставить( "Дата",                  "");  //      "Дата",                      
	СтруктураЭкспорта.Вставить( "ДокументИД"             "");  //       "№ Документа (ИД)",                      
	СтруктураЭкспорта.Вставить( "Операция",              "");  //     "Операция",                  
	СтруктураЭкспорта.Вставить( "СчетОрганизации",       "");  //   "Эл. Р/с организации",        
	СтруктураЭкспорта.Вставить( "НомерСчетаОрганизации", "");  //    "Р/с организации",          
	СтруктураЭкспорта.Вставить( "Сумма",                 "");  //   "Сумма",                     
	
	СтруктураЭкспорта.Вставить( "КодВалюты",             "");  //   "Валюта платежа",                     
	
	СтруктураЭкспорта.Вставить( "Контрагент",            "");  //    "Контрагент",                
	СтруктураЭкспорта.Вставить( "СчетКонтрагента",       "");  //  "Р/с контрагента",           
	СтруктураЭкспорта.Вставить( "НомерСчетаКонтрагента", "");  //     "Эл. Р/с контрагента",            
	
	
	СтруктураЭкспорта.Вставить( "ПлательщикСчет",        "");  //   "Расчетный счет плательщика", 
	СтруктураЭкспорта.Вставить( "Плательщик",            "");  //     "Плательщик",                 
	СтруктураЭкспорта.Вставить( "ПлательщикБанк",       "");  //     "Банк плательщика",       
	СтруктураЭкспорта.Вставить( "ПлательщикМФО",         "");  //    "МФО банка плательщика",  
	
	СтруктураЭкспорта.Вставить( "ПолучательСчет",        "");  //   "Расчетный счет получателя",  
	СтруктураЭкспорта.Вставить( "Получатель",            "");  //     "Получатель",                 
	СтруктураЭкспорта.Вставить( "ПолучательБанк",       "");  //     "Банк получателя",        
	СтруктураЭкспорта.Вставить( "ПолучательМФО",         "");  //    "МФО банка получателя",   
	
	СтруктураЭкспорта.Вставить( "ВидОплаты",             "");  //   "Вид оплаты",                 
	
	СтруктураЭкспорта.Вставить( "СтатусСоставителя",     "");  //   "Статус составителя",         
	СтруктураЭкспорта.Вставить( "ПлательщикОКПО",         "");  //   "ОКПО (ЕДРПОУ) плательщика",            
	СтруктураЭкспорта.Вставить( "ПолучательОКПО",         "");  //   "ОКПО (ЕДРПОУ) получателя",             
	
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа",     "");  //     "Назначение платежа",         
	
	СтруктураЭкспорта.Вставить( "НомерСчетаПоставщика",  "");  //     "№ счета поставщика",         
	СтруктураЭкспорта.Вставить( "ДатаОтсылкиДок",        "");  //       "Дата отсылки документов",    
	
	СтруктураЭкспорта.Вставить( "Документ",              "");  //   "Источник",                  
	СтруктураЭкспорта.Вставить( "СекцияДокумент",        "");  //     "Выгрузка",                   
	
	СтруктураЭкспорта.Вставить( "ОписаниеОшибок",        "");  //     "Замечания",                  
	СтруктураЭкспорта.Вставить( "ТипДокумента",          "");  //    "Тип пл. документа",    
	
	Возврат СтруктураЭкспорта;
	
КонецФункции

Процедура СформироватьСтруктуруТаблицыИмпорта(Таб, ТабПоле) Экспорт
	
	КлючиСтруктуры = "ИзменятьНастройку,ИзменятьПозицию,Видимость,Доступность,ТолькоПросмотр,ИзменениеРазмера,Ширина";
	
	Видимая      = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Истина,  0);
	Видимая020   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,    2);
	Видимая080   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,   10);
	Видимая120   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,   15);
	Видимая160   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,   20);
	
	НеВидимая    = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Ложь,   Истина, Истина, Истина,  0);
	
	Т_Булево    = Новый ОписаниеТипов("Булево");
	
	Т_Число15_2 = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	Т_Число1    = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1));
	Т_Число10   = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10));
	
	Т_Строка    = Новый ОписаниеТипов("Строка");
	Т_Строка02  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(2));
	Т_Строка09  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9));
	Т_Строка10  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
	Т_Строка11  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11));
	Т_Строка12  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
	Т_Строка20  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20));
	
	Т_Дата      = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Т_Документ  = Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручениеИсходящее,ДокументСсылка.ПлатежноеПоручениеВходящее,ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств,ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств,ДокументСсылка.ПлатежноеТребованиеВыставленное,ДокументСсылка.ПлатежноеТребованиеПолученное ,ДокументСсылка.АккредитивПереданный, ДокументСсылка.АккредитивПолученный, ДокументСсылка.ПлатежноеТребованиеПоручениеПолученное, ДокументСсылка.ПлатежноеТребованиеПоручениеВыставленное");
	Т_ПлОрдер   = Новый ОписаниеТипов("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств");
	Т_Контрагент = Новый ОписаниеТипов("СправочникСсылка.Контрагенты,СправочникСсылка.Организации, Строка");
	Т_БанкСчет   = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета, Строка");
	Т_ВидыОпераций  = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийППИсходящее,ПеречислениеСсылка.ВидыОперацийППВходящее,ПеречислениеСсылка.ВидыОперацийСписаниеБезналичныхДенежныхСредств,ПеречислениеСсылка.ВидыОперацийПоступлениеБезналичныхДенежныхСредств,ПеречислениеСсылка.ВидыОперацийПлатежныйОрдерПоступление,ПеречислениеСсылка.ВидыОперацийПлатежныйОрдерСписание");
	Т_Договоры   = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов, Строка");
	Т_СтатьяДДС   = Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
	
	
	Таб.Очистить();
	Таб.Колонки.Очистить();
	
	  //Имя, заголовок, выгружать, не пустая, ширина, изменять размер
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Проведен",             Т_Булево,    "",                          Видимая020);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Загружать",            Т_Булево,    "_",                          Видимая020);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Готовность",           Т_Число1,    НСтр("ru='Готовность';uk='Готовність'"),                 НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерСтроки",          Т_Число10,   НСтр("ru='Номер строки';uk='Номер рядка'"),                Видимая120);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДокументИД", 			 Т_Строка, 	  НСтр("ru='№ Документа (ИД)';uk='№ Документа (ІД)'"),           НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерДок",             Т_Строка,    НСтр("ru='№ Документа';uk='№ Документу'"),                Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Номер",                Т_Строка,    НСтр("ru='Номер';uk='Номер'"),                      НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаДок",              Т_Дата,      НСтр("ru='Дата';uk='Дата'"),                       Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Дата",                 Т_Строка,    НСтр("ru='Дата (из файла)';uk='Дата (з файлу)'"),            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Операция",             Т_Строка,    НСтр("ru='Операция';uk='Операція'"),                   Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СчетОрганизации",      Т_БанкСчет,  НСтр("ru='Р/с организации';uk='Р/р організації'"),            Видимая160);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СуммаДокумента",       Т_Число15_2, НСтр("ru='Сумма';uk='Сума'"),                      Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СуммаСписано",         Т_Число15_2, НСтр("ru='Сумма списания';uk='Сума списання'"),             Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СуммаПоступило",       Т_Число15_2, НСтр("ru='Сумма поступления';uk='Сума надходження'"),          Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Сумма",                Т_Строка,    НСтр("ru='Сумма (из файла)';uk='Сумма (из файла)'"),           НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КодВалюты",            Т_Строка,    НСтр("ru='Валюта платежа';uk='Валюта платежу'"),             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СтатусДокумента",      Т_Строка,    НСтр("ru='Статус документа';uk='Статус документу'"),           НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Контрагент",           Т_Контрагент,НСтр("ru='Контрагент';uk='Контрагент'"),                 Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СчетКонтрагента",      Т_БанкСчет,  НСтр("ru='Р/с контрагента';uk='Р/р контрагента'"),            Видимая160);
	
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Списано",              Т_Дата,      НСтр("ru='Списано';uk='Списано'"),                    Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаСписано",          Т_Строка,    НСтр("ru='Списано';uk='Списано'"),                    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Поступило",            Т_Дата,      НСтр("ru='Поступило';uk='Надійшло'"),                  Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаПоступило",        Т_Строка,    НСтр("ru='Поступило';uk='Надійшло'"),                  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаПроведения",       Т_Дата,      НСтр("ru='Дата';uk='Дата'"),                       Видимая120);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикСчет",       Т_Строка20,  НСтр("ru='Расчетный счет плательщика';uk='Розрахунковий рахунок платника'"), НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик",           Т_Строка,    НСтр("ru='Плательщик';uk='Платник'"),                 НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанк",       Т_Строка,    НСтр("ru='Банк плательщика';uk='Банк платника'"),       	НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикМФО",        Т_Строка09,  НСтр("ru='МФО банка плательщика';uk='МФО банку платника'"),   	НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательСчет",       Т_Строка20,  НСтр("ru='Расчетный счет получателя';uk='Розрахунковий рахунок отримувача'"),  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель",           Т_Строка,    НСтр("ru='Получатель';uk='Одержувач'"),                 НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанк",       Т_Строка,    НСтр("ru='Банк получателя';uk='Банк одержувача'"),        	НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательМФО",        Т_Строка09,  НСтр("ru='МФО банка получателя';uk='МФО банку отримувача'"),   	НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидОплаты",            Т_Строка02,  "Вид оплаты",                 НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СтатусСоставителя",    Т_Строка02,  НСтр("ru='Статус составителя';uk='Статус укладача'"),         НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикОКПО",        Т_Строка10,  НСтр("ru='ОКПО (ЕДРПОУ) плательщика';uk='ЄДРПОУ платника'"),	НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательОКПО",        Т_Строка10,  НСтр("ru='ОКПО (ЕДРПОУ) получателя';uk='ЄДРПОУ одержувача'"),	НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа",    Т_Строка,    НСтр("ru='Назначение платежа';uk='Призначення платежу'"),         Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерСчетаПоставщика", Т_Строка,    НСтр("ru='№ счета поставщика';uk='№ рахунку постачальника'"),         НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаОтсылки",          Т_Дата,      НСтр("ru='Дата отсылки';uk='Дата відсилання'"),               НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаОтсылкиДок",       Т_Строка,    НСтр("ru='Дата отсылки документов';uk='Дата відправлення документів'"),    НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Документ",             Т_Документ,  НСтр("ru='Источник';uk='Джерело'"),                   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлатежныйОрдер",       Т_ПлОрдер,   НСтр("ru='Ордер';uk='Ордер'"),                      НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СекцияДокумент",       Т_Строка,    НСтр("ru='Выгрузка';uk='Вивантаження'"),                   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Договор",              Т_Договоры,  НСтр("ru='Договор';uk='Договір'"),                    Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СтатьяДДС",            Т_СтатьяДДС,  НСтр("ru='Статья ДДС';uk='Стаття РГК'"),                 Видимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ОписаниеОшибок",       Т_Строка,    НСтр("ru='Замечания';uk='Зауваження'"),                  Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ТипДокумента",         Т_Число10,   НСтр("ru='Тип пл. документа';uk='Тип пл. документа'"),          НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидДокумента",         Т_Строка,    НСтр("ru='Вид документа';uk='Вид документа'"),              НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ИмяДокумента",         Т_Строка,    НСтр("ru='Имя документа';uk=""Ім'я документа"""),              НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидОперации",          Т_ВидыОпераций,НСтр("ru='Вид операции пл. документа';uk='Вид операції пл. документа'"), Видимая);
	
КонецПроцедуры

Процедура СформироватьСтруктуруТаблицыРасчСчетов(Таб) Экспорт
	
	КлючиСтруктуры = "ИзменятьНастройку,ИзменятьПозицию,Видимость,Доступность,ТолькоПросмотр,ИзменениеРазмера,Ширина";
	Видимая      = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Истина,  0);
	
	Т_Число15_2  = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	Т_Строка     = Новый ОписаниеТипов("Строка");
	Т_Дата       = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	Т_Справочник = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
	
	Таб.Очистить();
	Таб.Колонки.Очистить();
	
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ДатаНачала",       Т_Строка,     НСтр("ru='Дата начала интервала';uk='Дата початку інтервалу'"),      Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ДатаКонца",        Т_Строка,     НСтр("ru='Дата конца интервала';uk='Дата закінчення інтервалу'"),       Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "РасчСчетОрг",      Т_Строка,     НСтр("ru='Расчетный счет организации';uk='Розрахунковий рахунок організації'"), Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "НачальныйОстаток", Т_Строка,     НСтр("ru='Начальный остаток';uk='Початковий залишок'"),          Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ВсегоПоступило",   Т_Строка,     НСтр("ru='Обороты входящих платежей';uk='Обороти вхідних платежів'"),  Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ВсегоСписано",     Т_Строка,     НСтр("ru='Обороты исходящих платежей';uk='Обороти вихідних платежів'"), Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "КонечныйОстаток",  Т_Строка,     НСтр("ru='Конечный остаток';uk='Кінцевий залишок'"),           Видимая);
	
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Начало",           Т_Дата,       НСтр("ru='Начало интервала';uk='Початок інтервалу'"),           Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Конец",            Т_Дата,       НСтр("ru='Конец интервала';uk='Кінець інтервалу'"),            Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "РасчетныйСчет",    Т_Справочник, НСтр("ru='Расчетный счет';uk='Розрахунковий рахунок'"),            Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "НачальнаяСумма",   Т_Число15_2,  НСтр("ru='НачальнаяСумма';uk='Начальнаясумма'"),             Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Поступило",        Т_Число15_2,  НСтр("ru='Всего поступило';uk='Усього поступило'"),            Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Списано",          Т_Число15_2,  НСтр("ru='Всего списано';uk='Усього списано'"),              Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "КонечнаяСумма",    Т_Число15_2,  НСтр("ru='Конечная сумма';uk='Кінцева сума'"),             Видимая);
	
КонецПроцедуры

////////////// ОБЩИЕ //////////////////////////////////////////////////

Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
		
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd");
		
	Иначе
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	
	ПозицияТочки = Найти(Буфер, "-");
	
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru='Неверный формат строки с датой';uk='Невірний формат рядку з датою'");
	КонецЕсли;
	
	ГодДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер = Сред(Буфер, ПозицияТочки + 1);
	
	ПозицияТочки = Найти(Буфер, "-");
	
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru='Неверный формат строки с датой';uk='Невірний формат рядку з датою'");
	КонецЕсли;
	
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ЧислоДаты = Сред(Буфер, ПозицияТочки + 1);
	Если СтрДлина(ГодДаты) = 2 Тогда
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты ;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
		
	Исключение
		Возврат НСтр("ru='Не удалось преобразовать строку в дату';uk='Не вдалося перетворити строку в дату'");
		
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания);
	
КонецПроцедуры

Функция ОрганизацияПлательщик(ВидДокумента)
	
	Если (ВидДокумента = "ПлатежноеПоручениеВходящее")
		ИЛИ (ВидДокумента = "АккредитивПолученный")
		ИЛИ (ВидДокумента = "ПлатежноеТребованиеВыставленное")
		ИЛИ (ВидДокумента = "ПлатежноеТребованиеПоручениеВыставленное")
		ИЛИ (ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда 
		
		Возврат Ложь;
		
	Иначе
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Открывает для просмотра текстовой документ
//  
Процедура ОткрытьФайлДляПросмотра(Элемент, Кодировка, Заголовок) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФайлНаДиске = Новый Файл(Элемент.Значение);
	Если Не ФайлНаДиске.Существует() Тогда
		Предупреждение(НСтр("ru='Не найден файл!';uk='Не знайдений файл!'"));
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	ИначеЕсли Кодировка = "Windows" Тогда
		Кодир = КодировкаТекста.ANSI;
	Иначе
		Кодир = КодировкаТекста.UTF8;
	КонецЕсли;
	
	Текст.Прочитать(Элемент.Значение, Кодир);
	Текст.Показать(Заголовок,Элемент.Значение);
	
КонецПроцедуры

////////////// ПОДГОТОВКА ВЫГРУЗКИ //////////////////////////////////////////////////

Функция ПолучитьТекстЗапросаПоПлатежноеПоручениеИсходящее()
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	   |	""Платежное поручение"" КАК ВидДокумента,
	   |	ПлатежноеПоручениеИсходящее.Ссылка КАК Документ,
	   |	ПлатежноеПоручениеИсходящее.Проведен КАК Проведен,
	   |	ПлатежноеПоручениеИсходящее.Номер КАК Номер,
	   |	ПлатежноеПоручениеИсходящее.Дата КАК Дата,
	   |	ПлатежноеПоручениеИсходящее.НазначениеПлатежа КАК НазначениеПлатежа,
	   |	ПлатежноеПоручениеИсходящее.СуммаДокумента КАК СуммаДокумента,
	   |	0 КАК СуммаНаПриход,
	   |	ПлатежноеПоручениеИсходящее.СуммаДокумента КАК СуммаНаРасход,
	   |	ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК ТекстПлательщика,
	   |	ПлатежноеПоручениеИсходящее.ТекстПолучателя КАК ТекстПолучателя,
	   |	ПлатежноеПоручениеИсходящее.Организация.НаименованиеПолное КАК Организация,
	   |	ПлатежноеПоручениеИсходящее.Организация.Наименование КАК ОрганизацияКратко,
	   |	КодыОрганизации.КодПоЕДРПОУ КАК ОрганизацияОКПО,
	   |	ПлатежноеПоручениеИсходящее.СчетОрганизации КАК ОрганизацияСчет,
	   |	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК ОрганизацияНомерСчета,
	   |	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Код КАК ОрганизацияМФОБанка,
	   |	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Наименование КАК ОрганизацияБанк,
	   |	ПлатежноеПоручениеИсходящее.СчетОрганизации.СуммаБезКопеек КАК СуммаБезКопеек,
	   |	ПлатежноеПоручениеИсходящее.СчетОрганизации.ТекстНазначения КАК ОрганизацияТекстНазначения,
	   |	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.СчетКонтрагента.Владелец.НаименованиеПолное, 1, 1000) КАК Контрагент,
	   |	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Владелец.Наименование КАК КонтрагентКратко,
	   |	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Владелец.КодПоЕДРПОУ КАК КонтрагентОКПО,
	   |	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК КонтрагентСчет,
	   |	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	   |	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанк,
	   |	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Код КАК КонтрагентМФОБанка,
	   |	ПлатежноеПоручениеИсходящее.СчетКонтрагента.ТекстНазначения КАК КонтрагентТекстНазначения,
	   |	ПлатежноеПоручениеИсходящее.ВидОперации,
	   |	"""" КАК ВидАккредитива,
	   |	"""" КАК СрокДействия,
	   |	"""" КАК ДокументыКПредъявлению,
	   |	"""" КАК ДополнительныеУсловия,
	   |	"""" КАК СчетДепонента,   
	   |	"""" КАК ОписаниеОшибок,
	   |	"""" КАК Готовность
	   |ИЗ
	   |	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&ДатаОкончание, ) КАК КодыОрганизации
	   |    ПО ПлатежноеПоручениеИсходящее.Организация = КодыОрганизации.Организация    
	   |ГДЕ
	   |	ПлатежноеПоручениеИсходящее.Дата >= &ДатаНачало
	   |	И ПлатежноеПоручениеИсходящее.Дата <= &ДатаОкончание
	   |	И (НЕ ПлатежноеПоручениеИсходящее.ПометкаУдаления)
	   |	И (НЕ ПлатежноеПоручениеИсходящее.Оплачено)
	   |	И (НЕ ПлатежноеПоручениеИсходящее.ЧастичнаяОплата)
	   |	И ПлатежноеПоручениеИсходящее.СчетОрганизации = &Счет
	   |";

КонецФункции

Функция ПолучитьТекстЗапросаПоАккредитивПереданный()
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	   |	""Заявление на аккредитив"" КАК ВидДокумента,
	   |	АккредитивПереданный.Ссылка КАК Документ,
	   |	АккредитивПереданный.Проведен КАК Проведен,
	   |	АккредитивПереданный.Номер КАК Номер,
	   |	АккредитивПереданный.Дата КАК Дата,
	   |	АккредитивПереданный.НазначениеПлатежа КАК НазначениеПлатежа,
	   |	АккредитивПереданный.СуммаДокумента КАК СуммаДокумента,
	   |	АккредитивПереданный.СуммаДокумента КАК СуммаНаПриход,
	   |	0 КАК СуммаНаРасход,
	   |	АккредитивПереданный.ТекстПлательщика КАК ТекстПлательщика ,
	   |	АккредитивПереданный.ТекстПолучателя КАК ТекстПолучателя,
	   |	АккредитивПереданный.Организация.НаименованиеПолное КАК Организация,
	   |	АккредитивПереданный.Организация.Наименование КАК ОрганизацияКратко,
	   |	КодыОрганизации.КодПоЕДРПОУ КАК ОрганизацияОКПО,
	   |	АккредитивПереданный.СчетОрганизации КАК ОрганизацияСчет,
	   |	АккредитивПереданный.СчетОрганизации.НомерСчета КАК ОрганизацияНомерСчета,
	   |	АккредитивПереданный.СчетОрганизации.Банк.Код КАК ОрганизацияМФОБанка,
	   |	АккредитивПереданный.СчетОрганизации.Банк.Наименование КАК ОрганизацияБанк,
	   |	АккредитивПереданный.СчетОрганизации.СуммаБезКопеек КАК СуммаБезКопеек,
	   |	АккредитивПереданный.СчетОрганизации.ТекстНазначения КАК ОрганизацияТекстНазначения,
	   |	ПОДСТРОКА(АккредитивПереданный.Контрагент.НаименованиеПолное, 1, 1000) КАК Контрагент,
	   |	АккредитивПереданный.Контрагент.Наименование КАК КонтрагентКратко,
	   |	АккредитивПереданный.СчетКонтрагента.Владелец.КодПоЕДРПОУ КАК КонтрагентОКПО,
	   |	АккредитивПереданный.СчетКонтрагента КАК КонтрагентСчет,
	   |	АккредитивПереданный.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	   |	АккредитивПереданный.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанк,
	   |	АккредитивПереданный.СчетКонтрагента.Банк.Код КАК КонтрагентМФОБанка,
	   |	АккредитивПереданный.СчетКонтрагента.ТекстНазначения КАК КонтрагентТекстНазначения,
	   |	АккредитивПереданный.ВидОперации,
	   |	АккредитивПереданный.ВидАккредитива КАК ВидАккредитива,
	   |	АккредитивПереданный.СрокДействия КАК СрокДействия,
	   //|	АккредитивПереданный.СрокДействия КАК ДатаОтсылкиДок,
	   |	ПОДСТРОКА(АккредитивПереданный.ДокументыКПредъявлению, 1, 255) КАК ДокументыКПредъявлению,
	   |	ПОДСТРОКА(АккредитивПереданный.ДополнительныеУсловия, 1, 255) КАК ДополнительныеУсловия,
	   |	АккредитивПереданный.СчетДепонента КАК СчетДепонента,
	   |	"""" КАК ОписаниеОшибок,
	   |	"""" КАК Готовность
	   |ИЗ
	   |	Документ.АккредитивПереданный КАК АккредитивПереданный
	   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&ДатаОкончание, ) КАК КодыОрганизации
	   |    ПО АккредитивПереданный.Организация = КодыОрганизации.Организация   
	   |ГДЕ
	   |	АккредитивПереданный.Дата >= &ДатаНачало
	   |	И АккредитивПереданный.Дата <= &ДатаОкончание
	   |	И (НЕ АккредитивПереданный.ПометкаУдаления)
	   |	И (НЕ АккредитивПереданный.Оплачено)
	   |	И (НЕ АккредитивПереданный.ЧастичнаяОплата)
	   |	И АккредитивПереданный.СчетОрганизации = &Счет
	   |";
	
КонецФункции

Функция ПолучитьТекстЗапросаПоПлатежноеТребованиеВыставленное()
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	   |	""Платежное требование"" КАК ВидДокумента,
	   |	ПлатежноеТребованиеВыставленное.Ссылка КАК Документ,
	   |	ПлатежноеТребованиеВыставленное.Проведен КАК Проведен,
	   |	ПлатежноеТребованиеВыставленное.Номер КАК Номер,
	   |	ПлатежноеТребованиеВыставленное.Дата КАК Дата,
	   |	ПлатежноеТребованиеВыставленное.НазначениеПлатежа КАК НазначениеПлатежа,
	   |	ПлатежноеТребованиеВыставленное.СуммаДокумента КАК СуммаДокумента,
	   |	ПлатежноеТребованиеВыставленное.СуммаДокумента КАК СуммаНаПриход,
	   |	0 КАК СуммаНаРасход,
	   |	ПлатежноеТребованиеВыставленное.ТекстПлательщика КАК ТекстПлательщика,
	   |	ПлатежноеТребованиеВыставленное.ТекстПолучателя КАК ТекстПолучателя,
	   |	ПлатежноеТребованиеВыставленное.Организация.НаименованиеПолное КАК Организация,
	   |	ПлатежноеТребованиеВыставленное.Организация.Наименование КАК ОрганизацияКратко,
	   |	КодыОрганизации.КодПоЕДРПОУ КАК ОрганизацияОКПО,
	   |	ПлатежноеТребованиеВыставленное.СчетОрганизации КАК ОрганизацияСчет,
	   |	ПлатежноеТребованиеВыставленное.СчетОрганизации.НомерСчета КАК ОрганизацияНомерСчета,
	   |	ПлатежноеТребованиеВыставленное.СчетОрганизации.Банк.Код КАК ОрганизацияМФОБанка,
	   |	ПлатежноеТребованиеВыставленное.СчетОрганизации.Банк.Наименование КАК ОрганизацияБанк,
	   |	ПлатежноеТребованиеВыставленное.СчетОрганизации.СуммаБезКопеек КАК СуммаБезКопеек,
	   |	ПлатежноеТребованиеВыставленное.СчетОрганизации.ТекстНазначения КАК ОрганизацияТекстНазначения,
	   |	ПОДСТРОКА(ПлатежноеТребованиеВыставленное.Контрагент.НаименованиеПолное, 1, 1000) КАК Контрагент,
	   |	ПлатежноеТребованиеВыставленное.Контрагент.Наименование КАК КонтрагентКратко,
	   |	ПлатежноеТребованиеВыставленное.СчетКонтрагента.Владелец.КодПоЕДРПОУ КАК КонтрагентОКПО,
	   |	ПлатежноеТребованиеВыставленное.СчетКонтрагента КАК КонтрагентСчет,
	   |	ПлатежноеТребованиеВыставленное.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	   |	ПлатежноеТребованиеВыставленное.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанк,
	   |	ПлатежноеТребованиеВыставленное.СчетКонтрагента.Банк.Код КАК КонтрагентМФОБанка,
	   |	ПлатежноеТребованиеВыставленное.СчетКонтрагента.ТекстНазначения КАК КонтрагентТекстНазначения,
	   |	ПлатежноеТребованиеВыставленное.ВидОперации,
	   |	"""" КАК ВидАккредитива,
	   |	"""" КАК СрокДействия,
	   |	"""" КАК ДокументыКПредъявлению,
	   |	"""" КАК ДополнительныеУсловия,
	   |	"""" КАК СчетДепонента,
	   |	"""" КАК ОписаниеОшибок,
	   |	"""" КАК Готовность   
	   |ИЗ
	   |	Документ.ПлатежноеТребованиеВыставленное КАК ПлатежноеТребованиеВыставленное
	   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&ДатаОкончание, ) КАК КодыОрганизации
	   |    ПО ПлатежноеТребованиеВыставленное.Организация = КодыОрганизации.Организация  
	   |ГДЕ
	   |	ПлатежноеТребованиеВыставленное.Дата >= &ДатаНачало
	   |	И ПлатежноеТребованиеВыставленное.Дата <= &ДатаОкончание
	   |	И (НЕ ПлатежноеТребованиеВыставленное.ПометкаУдаления)
	   |	И (НЕ ПлатежноеТребованиеВыставленное.Оплачено)
	   |	И (НЕ ПлатежноеТребованиеВыставленное.ЧастичнаяОплата)
	   |	И ПлатежноеТребованиеВыставленное.СчетОрганизации = &Счет
	   |";
	
КонецФункции

Функция ПолучитьТекстЗапросаПоПлатежноеТребованиеПоручениеВыставленное()
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	   |	""Платежное требование-поручение"" КАК ВидДокумента,
	   |	ПлатежноеТребованиеПоручениеВыставленное.Ссылка КАК Документ,
	   |	ПлатежноеТребованиеПоручениеВыставленное.Проведен КАК Проведен,
	   |	ПлатежноеТребованиеПоручениеВыставленное.Номер КАК Номер,
	   |	ПлатежноеТребованиеПоручениеВыставленное.Дата КАК Дата,
	   |	ПлатежноеТребованиеПоручениеВыставленное.НазначениеПлатежа КАК НазначениеПлатежа,
	   |	ПлатежноеТребованиеПоручениеВыставленное.СуммаДокумента КАК СуммаДокумента,
	   |	ПлатежноеТребованиеПоручениеВыставленное.СуммаДокумента КАК СуммаНаПриход,
	   |	0 КАК СуммаНаРасход,
	   |	ПлатежноеТребованиеПоручениеВыставленное.ТекстПлательщика КАК ТекстПлательщика,
	   |	ПлатежноеТребованиеПоручениеВыставленное.ТекстПолучателя КАК ТекстПолучателя,
	   |	ПлатежноеТребованиеПоручениеВыставленное.Организация.НаименованиеПолное КАК Организация,
	   |	ПлатежноеТребованиеПоручениеВыставленное.Организация.Наименование КАК ОрганизацияКратко,
	   |	КодыОрганизации.КодПоЕДРПОУ КАК ОрганизацияОКПО,
	   |	ПлатежноеТребованиеПоручениеВыставленное.СчетОрганизации КАК ОрганизацияСчет,
	   |	ПлатежноеТребованиеПоручениеВыставленное.СчетОрганизации.НомерСчета КАК ОрганизацияНомерСчета,
	   |	ПлатежноеТребованиеПоручениеВыставленное.СчетОрганизации.Банк.Код КАК ОрганизацияМФОБанка,
	   |	ПлатежноеТребованиеПоручениеВыставленное.СчетОрганизации.Банк.Наименование КАК ОрганизацияБанк,
	   |	ПлатежноеТребованиеПоручениеВыставленное.СчетОрганизации.СуммаБезКопеек КАК СуммаБезКопеек,
	   |	ПлатежноеТребованиеПоручениеВыставленное.СчетОрганизации.ТекстНазначения КАК ОрганизацияТекстНазначения,
	   |	ПОДСТРОКА(ПлатежноеТребованиеПоручениеВыставленное.Контрагент.НаименованиеПолное, 1, 1000) КАК Контрагент,
	   |	ПлатежноеТребованиеПоручениеВыставленное.Контрагент.Наименование КАК КонтрагентКратко,
	   |	ПлатежноеТребованиеПоручениеВыставленное.СчетКонтрагента.Владелец.КодПоЕДРПОУ КАК КонтрагентОКПО,
	   |	ПлатежноеТребованиеПоручениеВыставленное.СчетКонтрагента КАК КонтрагентСчет,
	   |	ПлатежноеТребованиеПоручениеВыставленное.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	   |	ПлатежноеТребованиеПоручениеВыставленное.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанк,
	   |	ПлатежноеТребованиеПоручениеВыставленное.СчетКонтрагента.Банк.Код КАК КонтрагентМФОБанка,
	   |	ПлатежноеТребованиеПоручениеВыставленное.СчетКонтрагента.ТекстНазначения КАК КонтрагентТекстНазначения,
	   |	ПлатежноеТребованиеПоручениеВыставленное.ВидОперации,
	   |	"""" КАК ВидАккредитива,
	   |	"""" КАК СрокДействия,
	   |	"""" КАК ДокументыКПредъявлению,
	   |	"""" КАК ДополнительныеУсловия,
	   |	"""" КАК СчетДепонента,
	   |	"""" КАК ОписаниеОшибок,
	   |	"""" КАК Готовность   
	   |ИЗ
	   |	Документ.ПлатежноеТребованиеПоручениеВыставленное КАК ПлатежноеТребованиеПоручениеВыставленное
	   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&ДатаОкончание, ) КАК КодыОрганизации
	   |    ПО ПлатежноеТребованиеПоручениеВыставленное.Организация = КодыОрганизации.Организация
	   |ГДЕ
	   |	ПлатежноеТребованиеПоручениеВыставленное.Дата >= &ДатаНачало
	   |	И ПлатежноеТребованиеПоручениеВыставленное.Дата <= &ДатаОкончание
	   |	И (НЕ ПлатежноеТребованиеПоручениеВыставленное.ПометкаУдаления)
	   |	И (НЕ ПлатежноеТребованиеПоручениеВыставленное.Оплачено)
	   |	И (НЕ ПлатежноеТребованиеПоручениеВыставленное.ЧастичнаяОплата)
	   |	И ПлатежноеТребованиеПоручениеВыставленное.СчетОрганизации = &Счет
	   |";
	
КонецФункции


Процедура ЗаполнитьДокументыНаЭкспорт(ДокументыНаЭкспорт) Экспорт
	
	ПлатежныеДокументы.Очистить();
	
	ВыгружатьПлатПоручения  		= ТаблицаДокументов.Найти("Платежное поручение", "Название").Пометка;
	ВыгружатьПлатТребования 		= ТаблицаДокументов.Найти("Платежное требование", "Название").Пометка;
	ВыгружатьЗаявлениеНаАккредитив	= ТаблицаДокументов.Найти("Заявление на аккредитив", "Название").Пометка;
	ВыгружатьПлатежноеТребованиеПоручение = ТаблицаДокументов.Найти("Платежное требование-поручение", "Название").Пометка;
	
	Если НЕ ВыгружатьПлатПоручения И НЕ ВыгружатьПлатТребования И НЕ ВыгружатьЗаявлениеНаАккредитив И НЕ ВыгружатьПлатежноеТребованиеПоручение Тогда
		Предупреждение("Необходимо отметить хотя бы один из выгружаемых видов платежных документов.");
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
		Предупреждение("Необходимо выбрать банковский счет.");
		Возврат;
	КонецЕсли;
	
	//Формирование запроса
	ТекстЗапроса = "";
	Если ВыгружатьПлатПоручения Тогда
		ТекстЗапроса = ТекстЗапроса + ПолучитьТекстЗапросаПоПлатежноеПоручениеИсходящее();
	КонецЕсли;
	
	Если ВыгружатьЗаявлениеНаАккредитив Тогда
		ТекстЗапроса = ?(ТекстЗапроса<>"",
					ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + СтрЗаменить(ПолучитьТекстЗапросаПоАккредитивПереданный() , "РАЗРЕШЕННЫЕ", ""),
					ПолучитьТекстЗапросаПоАккредитивПереданный());
	КонецЕсли;
	
	Если ВыгружатьПлатТребования Тогда
		ТекстЗапроса = ?(ТекстЗапроса<>"",
					ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + СтрЗаменить(ПолучитьТекстЗапросаПоПлатежноеТребованиеВыставленное() , "РАЗРЕШЕННЫЕ", ""),
					ПолучитьТекстЗапросаПоПлатежноеТребованиеВыставленное());
	КонецЕсли;
	
	Если ВыгружатьПлатежноеТребованиеПоручение Тогда
		ТекстЗапроса = ?(ТекстЗапроса<>"",
					ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + СтрЗаменить(ПолучитьТекстЗапросаПоПлатежноеТребованиеПоручениеВыставленное() , "РАЗРЕШЕННЫЕ", ""),
					ПолучитьТекстЗапросаПоПлатежноеТребованиеПоручениеВыставленное());
	КонецЕсли;
	
	
	ТекстЗапроса = ТекстЗапроса +"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДокумента,
	|	Дата,
	|	Документ";
	
	ЗапросПоДокументам = Новый Запрос(ТекстЗапроса);
	ЗапросПоДокументам.УстановитьПараметр("ДатаНачало",    НачалоДня(НачПериода));
	ЗапросПоДокументам.УстановитьПараметр("ДатаОкончание", КонецДня(КонПериода));
	ЗапросПоДокументам.УстановитьПараметр("Счет",  БанковскийСчет);
	
	ВыборкаДляЭкспорта = ЗапросПоДокументам.Выполнить().Выгрузить();
	ПлатежныеДокументы.Загрузить(ВыборкаДляЭкспорта);
	
	КоллекцияСвойств = ДокументыНаЭкспорт.Колонки;
	Для каждого СтрокаДокумента из ПлатежныеДокументы Цикл
		
		ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента,КоллекцияСвойств);
		
		СтрокаДокумента.Выгружать = ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		
	КонецЦикла;

КонецПроцедуры

Функция ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента,КоллекцияСвойств)
	

	Если СтрокаДокумента.ВидДокумента = "Платежное поручение" Тогда
		СтрокаДокумента.ТипДокумента = 0;
		Плательщик =  "Организация";
		Получатель =  "Контрагент";
	Иначе
		СтрокаДокумента.ТипДокумента = 0;
		Плательщик =  "Контрагент";
		Получатель =  "Организация";
	КонецЕсли;

	РеквизитыПлДокЭкс_Основные = "Номер,Дата,СуммаДокумента";                       
	РеквизитыПлДокЭкс_Плательщик = Плательщик + "Счет," + Плательщик;      
	РеквизитыПлДокЭкс_Получатель = Получатель + "Счет," + Получатель;


	Экспорт_НеПустые = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДокЭкс_Основные + "," +
	РеквизитыПлДокЭкс_Плательщик + "," +
	РеквизитыПлДокЭкс_Получатель + "," +
	"");

	
	Для каждого Свойство из Экспорт_НеПустые Цикл
		ПроверитьНаПустоеЗначениеЭкспорта(СтрокаДокумента, Свойство.Ключ, КоллекцияСвойств.Найти(Свойство.Ключ).ТекстШапки);
	КонецЦикла;
	
	                           
КонецФункции

Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства, ПредставлениеСвойства)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[ИмяСвойства]) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 3, НСтр("ru='Не заполнено ""';uk='Не заповнено ""'") + ПредставлениеСвойства + """!");
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборФайлаДляВыгрузки(Элемент) Экспорт
	
	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Если ТипФайла = "XML" Тогда
		ДиалогФыбораФайла.Фильтр                      = НСтр("ru='XML файл (*.xml)|*.xml';uk='XML файл (*.xml)|*.xml'");
		ДиалогФыбораФайла.Расширение                  = "xml";
	Иначе	
		ДиалогФыбораФайла.Фильтр                      = НСтр("ru='Текстовый файл (*.txt)|*.txt';uk='Текстовий файл (*.txt)|*.txt'");
		ДиалогФыбораФайла.Расширение                  = "txt";
	КонецЕсли;	
	ДиалогФыбораФайла.Заголовок                   = НСтр("ru='Выберите файл для выгрузки данных из клиента банка';uk='Виберіть файл для вивантаження даних із клієнта банка'");
	ДиалогФыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогФыбораФайла.ИндексФильтра               = 0;
	ДиалогФыбораФайла.ПолноеИмяФайла              = Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

////////////// ВЫГРУЗКА //////////////////////////////////////////////////
Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта)
	
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		Плательщик =  "Контрагент";
		Получатель =  "Организация";
	Иначе
		Плательщик =  "Организация";
		Получатель =  "Контрагент";
	КонецЕсли;
	
	СтрокаЭкспорта.Номер = 					ПолучитьНомерВФорматеОбмена(ВыборкаДляЭкспорта.Номер, Организация.Префикс);
	СтрокаЭкспорта.Дата = 					ВыборкаДляЭкспорта.Дата;
	СтрокаЭкспорта.Сумма = 					Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	СтрокаЭкспорта.ПлательщикСчет = 		ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
	СтрокаЭкспорта.ПолучательСчет = 		ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
	СтрокаЭкспорта.ВидДокумента	= 	ВыборкаДляЭкспорта.ВидДокумента + ?(СокрЛП(БанковскийСчет.ВалютаДенежныхСредств.Код) <> "980", " в валюте","");
 	СтрокаЭкспорта.КодВалюты	= 	СокрЛП(БанковскийСчет.ВалютаДенежныхСредств.Код);
	

	//ВидОплаты 
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное поручение" Тогда
		СтрокаЭкспорта.ВидОплаты =  "01";
		
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Аккредитив переданный" Тогда
		СтрокаЭкспорта.ВидОплаты =  "08";
		
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование-поручение" Тогда
		СтрокаЭкспорта.ВидОплаты =  "06";
		
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		СтрокаЭкспорта.ВидОплаты =  "02";
		
	Иначе
		СтрокаЭкспорта.ВидОплаты = "00";
	КонецЕсли;
		
	
//Плательщик
	СтрокаЭкспорта.Плательщик = ВыборкаДляЭкспорта[Плательщик]; 
	
//ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,Плательщик2, Плательщик3, Плательщик4
		СтрокаЭкспорта.ПлательщикБанк   = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.ПлательщикМФО     = ВыборкаДляЭкспорта[Плательщик + "МФОБанка"];
	
	
//Получатель
	СтрокаЭкспорта.Получатель = ВыборкаДляЭкспорта[Получатель];
	
		СтрокаЭкспорта.ПолучательБанк    = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.ПолучательМФО     = ВыборкаДляЭкспорта[Получатель + "МФОБанка"];
	
	
//ПлательщикОКПО
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикОКПО) Тогда
		СтрокаЭкспорта.ПлательщикОКПО = ВыборкаДляЭкспорта.ОрганизацияОКПО;
	КонецЕсли;
	
//ПолучательОКПО
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательОКПО) Тогда
		СтрокаЭкспорта.ПолучательОКПО = ВыборкаДляЭкспорта.КонтрагентОКПО;
	КонецЕсли;
	
	
	

// ДокументИД

	СтрокаЭкспорта.ДокументИД = ВыборкаДляЭкспорта.Номер;


//НазначениеПлатежа
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(СтрЗаменить(СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС, ""), Символы.ВК, ""), Символы.ПФ, "");
	
КонецПроцедуры

Функция ПолучитьСекциюДокумент(СтруктураДокумента, КоллекцияРеквизитов)
	
	Буфер = "";
	СтуртураДляЗаписи = СформироватьСтруктуруЭкспорта();
	ЗаполнитьЗначениеЭкспорта(СтуртураДляЗаписи,СтруктураДокумента);
	
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + СтруктураДокумента.ВидДокумента);
	
	Для каждого ВыгружаемыйРеквизит из СтуртураДляЗаписи Цикл
		Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
		Если НЕ ПустаяСтрока(Значение) Тогда
			ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "=" + Значение);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции

Процедура Выгрузить(ДокументыНаЭкспорт) Экспорт
	
	ПотокВыгрузки = Новый ТекстовыйДокумент();
	
	// Формируем заголовок
	ПотокВыгрузки.ДобавитьСтроку("_1CClientBankExchange");
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=1.00");
	
	ПотокВыгрузки.ДобавитьСтроку("Кодировка=" + Кодировка);
	ПотокВыгрузки.ДобавитьСтроку("Отправитель=" + Метаданные.Синоним);
	ПотокВыгрузки.ДобавитьСтроку("Получатель=" + Программа);
	ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания=" + Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd"));
	ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ТекущаяДата(),"ДЛФ=В"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаНачала=" + Формат(НачПериода,"ДФ=yyyy-MM-dd"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаКонца=" + Формат(КонПериода,"ДФ=yyyy-MM-dd"));
	
	ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + БанковскийСчет.НомерСчета);
	
	
	// выводим отмеченные секции документов
	Для каждого СтрокаСекции из ДокументыНаЭкспорт.Значение Цикл
		Если НЕ(СтрокаСекции.Выгружать)Тогда
			Продолжить;
		КонецЕсли;
		Буфер = ПолучитьСекциюДокумент(СтрокаСекции, ДокументыНаЭкспорт.Колонки);
		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		Для Сч = 1 По КоличествоСрокСекции Цикл
			ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
		КонецЦикла;
		СтрокаСекции.Готовность = -2;
	КонецЦикла;
	
	// записываем на диск
	ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
	Попытка
		ПотокВыгрузки.Вывод = ИспользованиеВывода.Разрешить;
		Если Кодировка = "DOS" Тогда
			ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.OEM);
		Иначе
			ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.ANSI);
		КонецЕсли;
		// Отметим те документы которые успешно загрузились
		Для каждого СтрокаСекции из ДокументыНаЭкспорт.Значение Цикл
			Если СтрокаСекции.Готовность = -2 Тогда
				СтрокаСекции.Готовность = -1;
			КонецЕсли;
		КонецЦикла;
		
		Сообщить(НСтр("ru='Данные успешно выгружены в файл ';uk='Дані успішно вивантажені в файл '") + ФайлВыгрузки);
	Исключение
		Сообщить(НСтр("ru='Не удалось записать данные в файл. Возможно, отсутствует каталог.';uk='Не вдалося записати дані в файл. Можливо, відсутній каталог.'") + ФайлВыгрузки);
	КонецПопытки
	
КонецПроцедуры

// Создает новый xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
//
// Параметры: 
//  Имя            - Имя узла
//
// Возвращаемое значение:
//  Объект нового xml-узла
//
Функция СоздатьУзел(Имя) Экспорт 

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);

	Возврат ЗаписьXML;

КонецФункции // СоздатьУзел()

// Устанавливает атрибут указанного xml-узла
//
// Параметры: 
//  Узел           - xml-узел
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура УстановитьАтрибут(Узел, Имя, Значение) Экспорт

	СтрокаЗаписи = XMLСтрока(Значение);
	
	Узел.ЗаписатьАтрибут(Имя, СтрокаЗаписи);
	
КонецПроцедуры // УстановитьАтрибут()

// Осуществляет запись элемента и его значения в указанный объект
//
// Параметры:
//  Объект         - объект типа XMLЗапись
//  Имя            - Строка. Имя элемента
//  Значение       - Значение элемента
// 
Процедура одЗаписатьЭлемент(Объект, Имя, Значение="") Экспорт

	Объект.ЗаписатьНачалоЭлемента(Имя);
	Стр = XMLСтрока(Значение);
	
	Объект.ЗаписатьТекст(Стр);
	Объект.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // одЗаписатьЭлемент() 

// Подчиняет xml-узел указанному узлу-родителю
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Узел           - подчиняемый узел 
//
Процедура ДобавитьПодчиненный(УзелРодитель, Узел) Экспорт

	Если ТипЗнч(Узел) <> Тип("Строка") Тогда
		Узел.ЗаписатьКонецЭлемента();
		ИнформацияДляЗаписиВФайл = Узел.Закрыть();
	Иначе
		ИнформацияДляЗаписиВФайл = Узел;
	КонецЕсли;
	
	УзелРодитель.ЗаписатьБезОбработки(ИнформацияДляЗаписиВФайл);
		
КонецПроцедуры // ДобавитьПодчиненный() 


Процедура ВыгрузитьXML(ДокументыНаЭкспорт) Экспорт
	
	Если Кодировка = "DOS" Тогда
		КодирXML = "DOS 866";
	ИначеЕсли Кодировка = "Windows" Тогда
		КодирXML = "Windows-1251";
	Иначе
		КодирXML = "UTF-8";
	КонецЕсли;
	
	СтрокаИнформацииОXML = "<?xml version=""1.0"" encoding="""+КодирXML+"""?>";
	
	УзелКорень = СоздатьУзел("_1CClientBankExchange");
	
	УзелКорень.ЗаписатьСоответствиеПространстваИмен("xsi","http://www.w3.org/2001/XMLSchema-instance");
	//УстановитьАтрибут(УзелКорень,"xsi:noNamespaceSchemaLocation","Schema_1C_to_CB.xsd");
	
	одЗаписатьЭлемент(УзелКорень,"ВерсияФормата",	"2.00");
	//одЗаписатьЭлемент(УзелКорень,"Кодировка", 		Кодировка); // или КодирXML
	одЗаписатьЭлемент(УзелКорень,"Отправитель", 	Метаданные.Синоним);
	одЗаписатьЭлемент(УзелКорень,"Получатель",  	Программа);
	одЗаписатьЭлемент(УзелКорень,"ДатаСоздания", 	Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd"));
	одЗаписатьЭлемент(УзелКорень,"ДатаНачала", 		Формат(НачПериода,"ДФ=yyyy-MM-dd"));
	одЗаписатьЭлемент(УзелКорень,"ДатаКонца", 		Формат(КонПериода,"ДФ=yyyy-MM-dd"));
	
	одЗаписатьЭлемент(УзелКорень,"РасчСчет", БанковскийСчет.НомерСчета);
	
	одЗаписатьЭлемент(УзелКорень,"КодВалюты", СокрЛП(БанковскийСчет.ВалютаДенежныхСредств.Код));
	                                      
	
	
	// выводим отмеченные секции документов
	Для каждого СтрокаСекции из ДокументыНаЭкспорт.Значение Цикл
		Если НЕ(СтрокаСекции.Выгружать)Тогда
			Продолжить;
		КонецЕсли;
		
		УзелСекцияДокумент = СоздатьУзел("СекцияДокумент");
		
		СтуртураДляЗаписи = СформироватьСтруктуруЭкспорта();
		ЗаполнитьЗначениеЭкспорта(СтуртураДляЗаписи, СтрокаСекции);
		
		Для каждого ВыгружаемыйРеквизит из СтуртураДляЗаписи Цикл
			Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
			Если НЕ ПустаяСтрока(Значение) Тогда
				одЗаписатьЭлемент(УзелСекцияДокумент, ВыгружаемыйРеквизит.Ключ, Значение);
			КонецЕсли;
		КонецЦикла;
		
		ДобавитьПодчиненный(УзелКорень, УзелСекцияДокумент);
		
		СтрокаСекции.Готовность = -2;
		
	КонецЦикла;
	
	УзелКорень.ЗаписатьКонецЭлемента();
	XML = УзелКорень.Закрыть();
	
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	ИначеЕсли Кодировка = "Windows" Тогда
		Кодир = КодировкаТекста.ANSI;
	Иначе
		Кодир = КодировкаТекста.UTF8;
	КонецЕсли;
	
	Попытка 
		ФайлОбмена = Новый ЗаписьТекста;
		
		ФайлОбмена.Открыть(ФайлВыгрузки, Кодир);	
		ФайлОбмена.ЗаписатьСтроку(СтрокаИнформацииОXML);
		ФайлОбмена.ЗаписатьСтроку(XML);
		
		// Отметим те документы которые успешно загрузились
		Для каждого СтрокаСекции из ДокументыНаЭкспорт.Значение Цикл
			Если СтрокаСекции.Готовность = -2 Тогда
				СтрокаСекции.Готовность = -1;
			КонецЕсли;
		КонецЦикла;
		
		Сообщить(НСтр("ru='Данные успешно выгружены в файл ';uk='Дані успішно вивантажені в файл '") + ФайлВыгрузки);
	Исключение
		Сообщить(НСтр("ru='Не удалось записать данные в файл. Возможно, отсутствует каталог.';uk='Не вдалося записати дані в файл. Можливо, відсутній каталог.'") + ФайлВыгрузки);
	КонецПопытки
	
КонецПроцедуры


////////////// ПОГОТОВКА ЗАГРУЗКИ //////////////////////////////////////////////////

Функция ПолучитьВариантНеПустых(ТипДокумента)
	
	Если (ТипДокумента < 3) ИЛИ (ТипДокумента = 11)  ИЛИ (ТипДокумента = 12) Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

Функция ПолучитьСтрокуИмпорта()
	
	Буфер = "";
	
	Пока (ПустаяСтрока(Буфер)) ИЛИ (Лев(Буфер, 2) = "//") Цикл
		Если Импорт_ТекущаяСтрока > Импорт_КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
			
		Буфер = СокрЛП(СтрПолучитьСтроку(Импорт_ТекстДляРазбора, Импорт_ТекущаяСтрока));
		Импорт_ТекущаяСтрока = Импорт_ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции

Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = Найти(СтрокаРазбора, "=");
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРЕГ(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции

Процедура ВыборФайлаДляЗагрузки(Элемент) Экспорт
		
	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Если ТипФайла = "XML" Тогда
		ДиалогФыбораФайла.Фильтр                      = НСтр("ru='XML файл (*.xml)|*.xml';uk='XML файл (*.xml)|*.xml'");
		ДиалогФыбораФайла.Расширение                  = "xml";
	Иначе	
		ДиалогФыбораФайла.Фильтр                      = НСтр("ru='Текстовый файл (*.txt)|*.txt';uk='Текстовий файл (*.txt)|*.txt'");
		ДиалогФыбораФайла.Расширение                  = "txt";
	КонецЕсли;	
	ДиалогФыбораФайла.Заголовок                   = НСтр("ru='Выберите файл для загрузки данных из клиента банка';uk='Виберіть файл для завантаження даних із клієнта банка'");
	ДиалогФыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогФыбораФайла.ИндексФильтра               = 0;
	ДиалогФыбораФайла.ПолноеИмяФайла              = Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

// Загрузка заголовка файла обмена
//
Функция ЗагрузитьСтрокуЗаголовка(ТекстСтрокиЗаголовка)
	
	Значение = "";
	Тег = "";
	РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение);
	
	Если ТегиЗаголовка[Тег] = Истина Тогда
		Импорт_Заголовок[Тег] = Значение;
		
	Иначе
		// неправиьный реквизит заголовка
		Сообщить(НСтр("ru='Неверный реквизит заголовка, строка ';uk='Невірний реквізит заголовка, рядок '") + (Импорт_ТекущаяСтрока - 1) + " : " + ТекстСтрокиЗаголовка);
		
	КонецЕсли;
		
КонецФункции

// Загрузка заголовка файла обмена
//
Функция ЗагрузитьСтрокуЗаголовкаXML(Тег,Значение)
	
	Если ПустаяСтрока(Тег) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ТегиЗаголовка[Тег] = Истина Тогда
		Импорт_Заголовок[Тег] = Значение;
		
	Иначе
		// неправиьный реквизит заголовка
		Сообщить(Локализация.СтрШаблон(НСтр("ru='Неверный реквизит заголовка: ¤1¤';uk='Невірний реквізит заголовку: ¤1¤'"), Тег));
		
	КонецЕсли;
		
КонецФункции

// Загружает секцию документа
//
Функция ЗагрузитьСекциюДокумента(СтрокаДокумента)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта();
	
	Пока Лев(Врег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		
		Значение = "";
		Тег = "";
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			
			Если Импорт_Загружаемые[Тег] = Истина Тогда
				СтрокаДокумента[Тег] = Значение;
				
			Иначе
				// неправиьный реквизит заголовка
				Сообщить(НСтр("ru='Неверный реквизит платежного документа, строка ';uk='Невірний реквізит платіжного документа, рядок '") + (Импорт_ТекущаяСтрока - 1) + " : " + СтрокаРазбора);
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			// неправиьный реквизит заголовка
			Сообщить(НСтр("ru='Нарушена структура платежного документа, строка ';uk='Порушено структуру платіжного документа, рядок '") + (Импорт_ТекущаяСтрока - 1) + " : " + СтрокаРазбора);
			Возврат Ложь;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Загружает секцию документа
//
Функция ЗагрузитьСекциюДокументаXML(ДокументыДляИмпорта, ФайлXML)
	
	ВидДокумента = ФайлXML.ПолучитьАтрибут("Вид");
	
	Если ВидДокумента <> Неопределено Тогда
		НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
		НоваяСтрокаДокументов.Операция = ВидДокумента;
		
		Импорт_ВидыДокументов.Добавить(ВидДокумента);
	Иначе // по умолчанию: "Платежное поручение"	
		
		ВидДокумента = "Платежное поручение";
		
		НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
		НоваяСтрокаДокументов.Операция = ВидДокумента;
		
		Импорт_ВидыДокументов.Добавить(ВидДокумента);
	КонецЕсли;	
	
	
	Пока ФайлXML.Прочитать() Цикл
		
		ИмяТега = ВРег(СокрЛП(ФайлXML.Имя)); 
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ФайлXML.Прочитать();	
			Значение = ФайлXML.Значение;
		КонецЕсли;	
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ФайлXML.Прочитать();	
		КонецЕсли;	
		
		Если ИмяТега = "ВИДДОКУМЕНТА" Тогда
		//	//НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
			Если НоваяСтрокаДокументов.Операция <> Значение Тогда
				НоваяСтрокаДокументов.Операция = Значение;
				
				Импорт_ВидыДокументов.Добавить(Значение);
			КонецЕсли;	
			
			Продолжить;
		КонецЕсли;
		
		Если ИмяТега="СЕКЦИЯДОКУМЕНТ" Тогда
			Возврат Истина;
		КонецЕсли;	
			
		Если Импорт_Загружаемые[ИмяТега] = Истина Тогда
			НоваяСтрокаДокументов[ИмяТега] = Значение;
			
		Иначе
			// неправиьный реквизит заголовка
			Сообщить(Локализация.СтрШаблон(НСтр("ru='Неверный реквизит платежного документа: ¤1¤';uk='Невірний реквізит платіжного документу: ¤1¤'"), ИмяТега));
			Возврат Ложь;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


// Загрузка секции расчетного счета
//
Функция ЗагрузитьСекциюРасчСчета(СтрокаРССчета)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта();
	
	Значение = "";
	Тег = "";
	
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл
		
		Если ТегиРасчетногоСчета[Тег] = Истина Тогда
			СтрокаРССчета[Тег] = Значение;
			
		Иначе
			// неправиьный реквизит заголовка
			Сообщить(НСтр("ru='Неверный реквизит в секции описания расчетного счета, строка ';uk='Невірний реквізит у секції опису розрахункового рахунку, рядок '") + (Импорт_ТекущаяСтрока - 1) + " : " + СтрокаРазбора);
			Возврат Ложь;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта();
		
		Значение = "";
		Тег = "";
		
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Загрузка секции расчетного счета
//
Функция ЗагрузитьСекциюРасчСчетаXML(СтрокаРССчета, ФайлXML)
	
	Пока ФайлXML.Прочитать() Цикл
		
		ИмяТега = ВРег(СокрЛП(ФайлXML.Имя)); 
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ФайлXML.Прочитать();	
			Значение = ФайлXML.Значение;
		КонецЕсли;	
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ФайлXML.Прочитать();	
		КонецЕсли;	
		
		Если ИмяТега="СЕКЦИЯРАСЧСЧЕТ" Тогда
			Возврат Истина;
		КонецЕсли;	
			
		Если ТегиРасчетногоСчета[ИмяТега] = Истина Тогда
			СтрокаРССчета[ИмяТега] = Значение;
			
		Иначе
			// неправиьный реквизит заголовка
			Сообщить(Локализация.СтрШаблон(НСтр("ru='Неверный реквизит в секции описания расчетного счета: ¤1¤';uk='Невірний реквізит в секції опису розрахункового рахунку: ¤1¤'"), ИмяТега));
			Возврат Ложь;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецФункции

Процедура РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента)
	
	//1) Определим вид платежа – входящий или исходящий
	ПлатежноеПоручение  	= ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
	ПлатежноеТребование 	= ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕТРЕБОВАНИЕ";
	ПлатежноеТребованиеПоручение 	= ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕТРЕБОВАНИЕ-ПОРУЧЕНИЕ";	
	ЗаявлениеНаАккредитив 	= ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ЗАЯВЛЕНИЕНААККРЕДИТИВ";

	Исходяший =  (СтрокаДокумента.ПлательщикСчет = БанковскийСчет.НомерСчета);
	
	//_______________________________________________________________________________________________________________
	//2) Определим вид документа в программе
	Если ПлатежноеПоручение и (СтрокаДокумента.ВидОплаты="" или Число(СтрокаДокумента.ВидОплаты)= 1) Тогда
		ВидДокумента = ?(Исходяший,"ПлатежноеПоручениеИсходящее","ПлатежноеПоручениеВходящее");
		ИмяДокумента = ?(Исходяший,"Платежное поручение исходящее","Платежное поручение входящее");
	ИначеЕсли ПлатежноеТребование Тогда
		ВидДокумента = ?(Исходяший,"ПлатежноеТребованиеПолученное","ПлатежноеТребованиеВыставленное");
		ИмяДокумента = ?(Исходяший,"Платежное требование полученное","Платежное требование выставленное");
	ИначеЕсли ЗаявлениеНаАккредитив Тогда
		ВидДокумента = ?(Исходяший,"АккредитивПереданный","АккредитивПолученный");
		ИмяДокумента = ?(Исходяший,"Аккредитив переданный","Аккредитив полученный");
	ИначеЕсли ПлатежноеТребованиеПоручение Тогда
		ВидДокумента = ?(Исходяший,"ПлатежноеТребованиеПоручениеПолученное","ПлатежноеТребованиеПоручениеВыставленное");
		ИмяДокумента = ?(Исходяший,"Платежное требование-поручение полученное","Платежное требование-поручение выставленное");
	Иначе
		ВидДокумента = ?(Исходяший,"ПлатежныйОрдерСписаниеДенежныхСредств","ПлатежныйОрдерПоступлениеДенежныхСредств");
		ИмяДокумента = ?(Исходяший,"Платежный ордер на списание","Платежный ордер на поступление");
	КонецЕсли;
		
	СтрокаДокумента.ВидДокумента = ВидДокумента;
	СтрокаДокумента.ИмяДокумента = ИмяДокумента;
	РеквизитСчета = ?(Исходяший,"СчетОрганизации","СчетКонтрагента");
	
	//_______________________________________________________________________________________________________________
	//3) Найдем ранее загруженный (введенный вручную) документ.
	//Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.

	// Распознаем дату документа
	ВсеРеквизитыПоискаЕсть = ложь;
	ДокументНайден = ложь;
	ДатаДок = ПустаяДата;
	
	Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.Дата);

	СтрокаДокументаВидДокумента = СтрокаДокумента.ВидДокумента;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		СтрокаДокумента.ДатаДок = Результат;
		
		ВсеРеквизитыПоискаЕсть = Истина;
		
		Если СтрокаДокументаВидДокумента = "ПлатежноеПоручениеВходящее" ИЛИ СтрокаДокументаВидДокумента = "ПлатежноеТребованиеПолученное" ИЛИ СтрокаДокументаВидДокумента = "ПлатежноеТребованиеПоручениеПолученное" ИЛИ СтрокаДокументаВидДокумента = "АккредитивПолученный" Тогда
			РеквизитДаты = "ДатаВходящегоДокумента";
			РеквизитНомера = "НомерВходящегоДокумента";
			
		ИначеЕсли СтрокаДокументаВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
			РеквизитДаты = "Дата";
			РеквизитНомера = "НомерПоручения";
			
		ИначеЕсли СтрокаДокументаВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
			РеквизитДаты = "ДатаВходящегоДокумента";
			РеквизитНомера = "НомерВходящегоДокумента";
			
		ИначеЕсли СтрокаДокументаВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
			РеквизитДаты = "Дата";
			РеквизитНомера = "Номер";
			
		Иначе
			РеквизитДаты = "Дата";
			РеквизитНомера = "Номер";
			
		КонецЕсли;
		
	КонецЕсли;
	
	НомерДок = СокрЛП(СтрокаДокумента.Номер);
	СтрокаДокумента.НомерДок = НомерДок;
	
	Если ВсеРеквизитыПоискаЕсть Тогда
	
		// При наличии нескольких предпочтении отдается первому с совпадающим номером счета
		ЗапросПоискаДокумента = Новый Запрос;
		ЗапросПоискаДокумента.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежныеДокументы.Ссылка,
		|	ПлатежныеДокументы.Проведен,
		|	ПлатежныеДокументы." + РеквизитНомера + ",                       
		|	ПлатежныеДокументы." + РеквизитДаты + ",
		|	ПлатежныеДокументы.Организация
		|ИЗ
		|	Документ." + СтрокаДокумента.ВидДокумента + " КАК ПлатежныеДокументы
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ПлатежныеДокументы." + РеквизитДаты + ", ДЕНЬ)= &ДатаДок
		|	И ПлатежныеДокументы."+ РеквизитСчета +".НомерСчета = &Счет
		|	И ПлатежныеДокументы.СчетОрганизации = &СчетОрганизации
		|	И ПлатежныеДокументы.Организация = &Организация
		|УПОРЯДОЧИТЬ ПО	
		|	Дата, Номер";
		
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок", ДатаДок);
		ЗапросПоискаДокумента.УстановитьПараметр("Организация", Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации", БанковскийСчет);
		ЗапросПоискаДокумента.УстановитьПараметр("Счет", СтрокаДокумента.ПлательщикСчет);
		
		ВыборкаПоиска = ЗапросПоискаДокумента.Выполнить().Выбрать();
		
		ДлинаНомера = СтрДлина(НомерДок);
		Если ДлинаНомера < 3 Тогда
			ДлинаНомера = 3;
		КонецЕсли;
		
		ИщемПоПолномуНомеру = Ложь;
		Если СтрокаДокументаВидДокумента = "ПлатежноеПоручениеВходящее" 
			ИЛИ (СтрокаДокументаВидДокумента = "ПлатежноеПоручениеИсходящее")
			ИЛИ (СтрокаДокументаВидДокумента = "ПлатежноеТребованиеПолученное")
			ИЛИ (СтрокаДокументаВидДокумента = "ПлатежноеТребованиеПоручениеПолученное")
			ИЛИ (СтрокаДокументаВидДокумента = "АккредитивПолученный")
			ИЛИ (СтрокаДокументаВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
			ИщемПоПолномуНомеру = Истина;
		КонецЕсли;	
		
		КоличествоДок = 0;
		Пока ВыборкаПоиска.Следующий() Цикл
			
			Если ИщемПоПолномуНомеру Тогда // по полному соответствию номера
				Если СокрЛП(ВыборкаПоиска[РеквизитНомера]) = НомерДок Тогда
					Если КоличествоДок=0 Тогда
						СтрокаДокумента.Документ = ВыборкаПоиска.Ссылка;
						СтрокаДокумента.Проведен = ВыборкаПоиска.Проведен;
						СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомера];
						СтрокаДокумента.ДатаДок = ВыборкаПоиска[РеквизитДаты];
					КонецЕсли;	
					КоличествоДок = КоличествоДок + 1;
				КонецЕсли;
			Иначе // по номеру документа - могут быть префиксы	
				Если Прав(СокрЛП(ВыборкаПоиска[РеквизитНомера]), ДлинаНомера) = Прав("000" + НомерДок, ДлинаНомера) Тогда
					Если КоличествоДок=0 Тогда
						СтрокаДокумента.Документ = ВыборкаПоиска.Ссылка;
						СтрокаДокумента.Проведен = ВыборкаПоиска.Проведен;
						СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомера];
						СтрокаДокумента.ДатаДок = ВыборкаПоиска[РеквизитДаты];
					КонецЕсли;	
					КоличествоДок = КоличествоДок + 1;
				КонецЕсли;
			КонецЕсли;
			
			
		КонецЦикла;
		
		Если КоличествоДок>1 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, НСтр("ru='В информационной базе найдено несколько(';uk='В інформаційній базі знайдено декілька('")+КоличествоДок+НСтр("ru=') соответствующих документов!';uk=') відповідних документів!'"));
		КонецЕсли;
		
		
		//Если документ уже есть в ИБ, то берем все данные из него.
		ДокументНайден = ЗначениеЗаполнено(СтрокаДокумента.Документ);
		Если ДокументНайден Тогда
			Документ = СтрокаДокумента.Документ; 
			СтрокаДокумента.ВидОперации = Документ.ВидОперации; 
			СтрокаДокумента.СтатьяДДС = Документ.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств; 
			СтрокаДокумента.СчетКонтрагента = Документ.СчетКонтрагента;
			СтрокаДокумента.СчетОрганизации = БанковскийСчет;
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет 
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет  Тогда
				СтрокаДокумента.Контрагент = Документ.Организация;
			Иначе
				СтрокаДокумента.Контрагент = Документ.Контрагент;
			КонецЕсли;
			
			СтрокаДокумента.Договор = Документ.ДоговорКонтрагента;
			

		КонецЕсли;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//4) Определяем вид операции документа
	Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		Если Исходяший Тогда
			Если ВидДокумента="ПлатежноеПоручениеИсходящее" и СтрокаДокумента.СтатусСоставителя <> "" Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
			ИначеЕсли (ВидДокумента="ПлатежноеПоручениеИсходящее") 
				И (Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",СтрокаДокумента.ПолучательСчет).Владелец=БанковскийСчет.Владелец) Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет;
			ИначеЕсли ВидДокумента="ПлатежноеПоручениеИсходящее" Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
			ИначеЕсли ВидДокумента="ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийПлатежныйОрдерСписание.ОплатаПоставщику;
			Иначе
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
			КонецЕсли; 
		КонецЕсли;
		
		Если Не Исходяший Тогда
			Если ВидДокумента="ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийПлатежныйОрдерПоступление.ОплатаПокупателя;
			ИначеЕсли ВидДокумента="ПлатежноеПоручениеВходящее" Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийППВходящее.ОплатаПокупателя;
			Иначе	
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			КонецЕсли;	
		КонецЕсли;
		СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
	Иначе
		ВидОперацииДокумента = СтрокаДокумента.ВидОперации;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//5) Определяем банковский счет организации
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СчетОрганизации) Тогда
		СтрокаДокумента.СчетОрганизации = БанковскийСчет;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//6) Определяем банковский счет контрагента
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
		
		ЗапросПоискаСчета = Новый Запрос;

		Если ОрганизацияПлательщик(ВидДокумента) Тогда
			СчетКонтрагента = СтрокаДокумента.ПолучательСчет;
			ОКПОКонтрагента = СтрокаДокумента.ПолучательОКПО;
				ИмяКонтрагента = СтрокаДокумента.Получатель;
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПолучательСчет);
			
		Иначе
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПлательщикСчет);
			СчетКонтрагента = СтрокаДокумента.ПлательщикСчет;
			ОКПОКонтрагента = СтрокаДокумента.ПлательщикОКПО;
				ИмяКонтрагента = СтрокаДокумента.Плательщик;
			
		КонецЕсли;
		
		ЗапросПоискаСчета.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Владелец,
		|	БанковскиеСчета.Ссылка,
		|	БанковскиеСчета.НомерСчета
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.НомерСчета = &НомерСчета";
		
		
		ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
		Если ВидОперацииДокумента <> Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Иначе
			Контрагент = Справочники.Организации.ПустаяСсылка();	
		КонецЕсли;
		
		Если ВыборкаПоиска.Следующий() Тогда
			СтрокаДокумента.СчетКонтрагента = ВыборкаПоиска.Ссылка;
			Контрагент = ВыборкаПоиска.Владелец;
		Иначе  
			ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru='Не найден счет контрагента (';uk='Не знайдений рахунок контрагента ('")+ СчетКонтрагента +").");
			СтрокаДокумента.СчетКонтрагента = НСтр("ru='  Не найден (';uk='  Не знайдений ('")+ СчетКонтрагента +")";
		КонецЕсли;
		
		Если ВыборкаПоиска.Количество()>1 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, НСтр("ru='В информационной базе найдено несколько(';uk='В інформаційній базі знайдено декілька('")+ВыборкаПоиска.Количество()+НСтр("ru=') одинаковых банковских счетов!';uk=') однакових банківських рахунків!'"));
		КонецЕсли;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//7) Определим контрагента
	Если Не ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
		Если ВидДокумента = "ПлатежноеПоручениеИсходящее" и ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			СтрокаДокумента.Контрагент = Организация;
		ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда
			СтрокаДокумента.Контрагент = Контрагент;
		ИначеЕсли НЕ ПустаяСтрока(ОКПОКонтрагента) Тогда
			
			СтрокаДокумента.Контрагент = Контрагент;
			ЗапросПоискаКонтрагента = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                                        |	Контрагенты.Ссылка,
			                                        |	Контрагенты.КодПоЕДРПОУ КАК ОКПО,
			                                        |	Контрагенты.Наименование
			                                        |ИЗ
			                                        |	Справочник.Контрагенты КАК Контрагенты
			                                        |ГДЕ
			                                        |	Контрагенты.КодПоЕДРПОУ = &КонтрагентОКПО");
			
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентОКПО", ОКПОКонтрагента);
			ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выгрузить();
			
			//Ищем контрагента по ОКПО
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ОКПО", ОКПОКонтрагента);
			НайденныеКонтрагенты = ВыборкаПоиска.НайтиСтроки(ПараметрыОтбора);
			
			
			Если НайденныеКонтрагенты.Количество()>0 Тогда
				СтрокаДокумента.Контрагент = НайденныеКонтрагенты[0].Ссылка;
			КонецЕсли;
			
			Если НайденныеКонтрагенты.Количество()>1 Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru='В информационной базе найдено несколько(';uk='В інформаційній базі знайдено декілька('")+НайденныеКонтрагенты.Количество()+НСтр("ru=') контрагентов с одинаковым кодом по ЕДРПОУ!';uk=') контрагентів з однаковим кодом по ЄДРПОУ!'"));
			ИначеЕсли НайденныеКонтрагенты.Количество()=0 Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru='Не найден контрагент (';uk='Не знайдений контрагент ('")+ ИмяКонтрагента +НСтр("ru=', код по ЕДРПОУ ';uk=', код по ЄДРПОУ '")+ОКПОКонтрагента+").");
				СтрокаДокумента.Контрагент = НСтр("ru='  Не найден (';uk='  Не знайдений ('")+ ИмяКонтрагента +НСтр("ru=', код по ЕДРПОУ ';uk=', код по ЄДРПОУ '")+ОКПОКонтрагента+")";
			КонецЕсли;

		Иначе
			ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru='Не указан код по ЕДРПОУ контрагента. ';uk='Не зазначений код по ЄДРПОУ контрагента. '"));
			СтрокаДокумента.Контрагент = НСтр("ru='  Не найден (';uk='  Не знайдений ('")+ ИмяКонтрагента +НСтр("ru=', не указан код по ЕДРПОУ)';uk=', не зазначений код по ЄДРПОУ)'");
		КонецЕсли;
	КонецЕсли;
		
	//_______________________________________________________________________________________________________________
	//8) Определим договор контрагента
	Если Не ЗначениеЗаполнено(СтрокаДокумента.Договор) Тогда
		СписокВидовДоговоров = УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(ВидОперацииДокумента);
		Если Не ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет 
			И Не ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
			И СписокВидовДоговоров.Количество()>0  Тогда
			СтрокаДокумента.Договор = НайтиДоговорКонтрагента(СтрокаДокумента.Контрагент,Организация,СписокВидовДоговоров,СтрокаДокумента.КодВалюты);
			
			Если СтрокаДокумента.Договор=НСтр("ru='Не найден';uk='Не знайдений'")Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru='Не найден договор. ';uk='Не знайдений договір. '"));
			КонецЕсли;

		Иначе
			СтрокаДокумента.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//9) Определим Статью ДДС по умолчанию
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
		СтрокаДокумента.СтатьяДДС = ПолучитьНастройкуЗаполнения(ИмяДокумента,"СтатьяДДС");
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//10) Определим сумму
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	Если Не ОбщегоНазначения.ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""),"-",""),",","")) Тогда
		Сумма = Число(Буфер);
		
		Если Сумма < 0 Тогда
			Сумма = - Сумма;      
		КонецЕсли;
		
		СтрокаДокумента.СуммаДокумента =Сумма;
		Если Исходяший Тогда
			СтрокаДокумента.СуммаСписано =Сумма;
		Иначе
			СтрокаДокумента.СуммаПоступило =Сумма;
		КонецЕсли;
		
	Иначе
		ДобавитьЗамечание(СтрокаДокумента, 4, НСтр("ru='Указана неверная сумма документа(';uk='Зазначено невірну суму документа('")+Буфер+")!");
		
	КонецЕсли;
	

	//_______________________________________________________________________________________________________________
	//14) ДатаСписано и ДатаПоступило, ДатаПроведения
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Списано = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Списано = ПустаяДата;
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Поступило = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Поступило = ПустаяДата;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения) Тогда
		СтрокаДокумента.ДатаПроведения = СтрокаДокумента.ДатаДок;	
	КонецЕсли;
	
КонецПроцедуры

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция НайтиДоговорКонтрагента(ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, КодВалюты="")

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	Если НЕ ЗначениеЗаполнено(КодВалюты) Тогда
		ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
	Иначе
		ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду(КодВалюты);
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
		КонецЕсли;	
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат НСтр("ru='Не найден';uk='Не знайдений'")
	КонецЕсли;
	
КонецФункции // ПолучитьДоговорКонтрагента()

Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства)
	
	ВариантНеПустых = ПолучитьВариантНеПустых(СтрокаИмпорта.ТипДокумента);
	Если Импорт_НеПустые[ВариантНеПустых][ИмяСвойства] = Истина Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
			ДобавитьЗамечание(СтрокаИмпорта, 3, НСтр("ru='Не заполнено ""';uk='Не заповнено ""'") + ПредставлениеСвойства + """!");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СчетПринадлежитОрганизации(НомерСчета)
	
	ЗапросПоСчету = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                              |	БанковскиеСчета.Владелец,
	                              |	БанковскиеСчета.НомерСчета,
	                              |	БанковскиеСчета.Ссылка
	                              |ИЗ
	                              |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	                              |ГДЕ
	                              |	БанковскиеСчета.Владелец = &Организация
	                              |	И БанковскиеСчета.НомерСчета = &НомерСчета");
	
	ЗапросПоСчету.УстановитьПараметр("НомерСчета", НомерСчета);
	ЗапросПоСчету.УстановитьПараметр("Организация", Организация);
	ВыборкаЗапроса = ЗапросПоСчету.Выполнить().Выбрать();
	
	Возврат ВыборкаЗапроса.Следующий();
	
КонецФункции

// Процедура сборка*
Процедура ЗаполнитьДокументыНаИмпорт(ДокументыДляИмпорта,таблица) Экспорт
	
	ТекФайл = Новый Файл(ФайлЗагрузки);
	Расширение = ТекФайл.Расширение;
	
	Если НРег(СокрЛП(Расширение)) = ".xml" Или ТипФайла = "XML" Тогда
	
		ЗаполнитьДокументыНаИмпортXML(ДокументыДляИмпорта);
		
		Возврат;
		
	КонецЕсли;
	
	// Подготавливаем структуры обработки данных
	Импорт_ПризнакОбмена = Ложь;
	НайденКонецФайла = Ложь;
	
	ЗагрРасчетныеСчета = Новый СписокЗначений;
	СписокДокументов = Новый СписокЗначений;
	ЗагрВидыДокументов = Новый СписокЗначений;
	
	Импорт_РасчетныеСчета.Очистить();
	
	ДокументыДляИмпорта.Очистить();
	
	// Получаем исходные данные
	Импорт_ТекстДляРазбора = ПрочитатьФайл(ФайлЗагрузки);
	
	Если Импорт_ТекстДляРазбора = Неопределено Тогда
		Предупреждение(НСтр("ru='Файл загрузки не содержит данных!';uk='Файл завантаження не містить даних!'"));
		Возврат;
	КонецЕсли;
	
	// Заполняем первичные структуры данных
	Импорт_КоличествоСтрок = СтрЧислоСтрок(Импорт_ТекстДляРазбора);
	Импорт_ТекущаяСтрока = 1;
	
	Пока Импорт_ТекущаяСтрока <= Импорт_КоличествоСтрок Цикл
		
		Стр = ПолучитьСтрокуИмпорта();
		
		Если Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯДОКУМЕНТ" Тогда
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 12)="ВИДДОКУМЕНТА" Тогда
			
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "ВИДДОКУМЕНТА" Тогда
				НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
				НоваяСтрокаДокументов.Операция = Значение;
				
				Импорт_ВидыДокументов.Добавить(Значение);
				
				Если НЕ ЗагрузитьСекциюДокумента(НоваяСтрокаДокументов) Тогда
					Возврат;
				КонецЕсли;
				
			Иначе
				Предупреждение(НСтр("ru='Нарушена структура файла импорта, строка ';uk='Порушено структуру файлу імпорту, рядок '") + (Импорт_ТекущаяСтрока - 1) + " : " + Стр);
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯРАСЧСЧЕТ" Тогда
			СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
			Если НЕ ЗагрузитьСекциюРасчСчета(СтрокаРССчетов) Тогда
				Сообщить(НСтр("ru='Нарушена структура файла импорта в секции описания расчетного счета! Строка: ';uk='Порушено структуру файлу імпорту в секції опису розрахункового рахунку! Рядок: '") + (Импорт_ТекущаяСтрока - 1));
				Возврат;
			КонецЕсли;
			Если БанковскийСчет.НомерСчета <> СтрокаРССчетов.РасчСчетОрг Тогда
				Импорт_РасчетныеСчета.Удалить(СтрокаРССчетов);
			КонецЕсли;
				
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8)="РАСЧСЧЕТ" Тогда
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "РАСЧСЧЕТ" Тогда
				
				Если СчетПринадлежитОрганизации(Значение) Тогда
					Если БанковскийСчет.НомерСчета = Значение Тогда
						СтрокаРССчетов = Импорт_РасчетныеСчета.Найти(Значение, "РасчСчетОрг");
						Если СтрокаРССчетов = Неопределено Тогда
							СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
							СтрокаРССчетов.РасчСчетОрг = Значение;
						КонецЕсли;
					Иначе						
						Сообщить(НСтр("ru='В заголовке файла указан счет (';uk='У заголовку файлу зазначений рахунок ('") + Значение + НСтр("ru=') отличный от указанного, расчеты по которому загружаться не будут!';uk=') відмінний від зазначеного, розрахунки по якому завантажуватися не будуть!'"), СтатусСообщения.ОченьВажное);
					КонецЕсли;
				Иначе
					Сообщить(НСтр("ru='В заголовке файла указан счет, не принадлежащий организации: ';uk='У заголовку файлу зазначений рахунок, що не належить організації: '") + Значение + " !", СтатусСообщения.ОченьВажное);
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		//ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8)="ДОКУМЕНТ" Тогда
		//	Импорт_ВидыДокументов.Добавить(Значение);

		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10)="КОНЕЦФАЙЛА" Тогда
			Если НЕ Импорт_ПризнакОбмена Тогда
				Сообщить(НСтр("ru='В файле импорта отсутствует признак обмена ""_1CClientBankExchange""!';uk='У файлі імпорту відсутній признак обміну ""_1CClientBankExchange""!'"));
				Возврат;
			КонецЕсли;
			
			НайденКонецФайла = истина;
			НомерСтроки = 0;
			// Формируем объектные структуры данных
			Для каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
				// Последовательно обрабатываем каждую загруженную строку
				
				//Распознаем реквизиты
				//Если в файле находятся выписка пл. документов по нескольким счетам, то распознаем и отображаем
				//только те которые выгружены по указанному банковскому счету
				Если СтрокаДокумента.ПлательщикСчет = БанковскийСчет.НомерСчета
					ИЛИ СтрокаДокумента.ПолучательСчет  = БанковскийСчет.НомерСчета Тогда
					РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента);
					НомерСтроки = НомерСтроки + 1;
					СтрокаДокумента.НомерСтроки = НомерСтроки;
					// Для каждого реквизита (= колонка) надо проверить на пустое значение
					Для каждого КолонкаИмпорта из ДокументыДляИмпорта.Колонки Цикл
						ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, КолонкаИмпорта.Имя, КолонкаИмпорта.Заголовок);
					КонецЦикла;
					
					Если ТипЗнч(СтрокаДокумента.Контрагент)=Тип("Строка") ИЛИ
						ТипЗнч(СтрокаДокумента.СчетКонтрагента)=Тип("Строка") ИЛИ
						ТипЗнч(СтрокаДокумента.Договор)=Тип("Строка") Тогда
						
						//добавляем реквизиты в табличну часть для дальнейнего использования
						СписокНенайденных(СтрокаДокумента);
					КонецЕсли;
				Иначе
					//остальные помечаем для последующего удаления
					СтрокаДокумента.НомерСтроки = 0;					
				КонецЕсли;
			КонецЦикла;
			
			//Удалим не нужные строки из таблицы
			Количество = ДокументыДляИмпорта.количество()-1;
			Для й=0 по Количество Цикл
				Если ДокументыДляИмпорта[Количество-й].НомерСтроки = 0 Тогда
					ДокументыДляИмпорта.Удалить(Количество-й);
				КонецЕсли;
			КонецЦикла;
			
			Возврат;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 21)="_1CCLIENTBANKEXCHANGE" Тогда
			Импорт_ПризнакОбмена = Истина;
			
		Иначе
			ЗагрузитьСтрокуЗаголовка(Стр);
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не НайденКонецФайла Тогда
		Импорт_РасчетныеСчета.Очистить();
		ДокументыДляИмпорта.Очистить();
		Предупреждение("Файл загрузки не соответствует стандарту (не найдена секция КонецФайла)!");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыНаИмпортXML(ДокументыДляИмпорта) Экспорт
	
	// Подготавливаем структуры обработки данных
	Импорт_ПризнакОбмена = Ложь;
	
	ЗагрРасчетныеСчета = Новый СписокЗначений;
	СписокДокументов = Новый СписокЗначений;
	ЗагрВидыДокументов = Новый СписокЗначений;
	
	Импорт_РасчетныеСчета.Очистить();
	
	ДокументыДляИмпорта.Очистить();
	
	ФайлXML = Новый ЧтениеXML;
	
	Попытка
		ФайлXML.ОткрытьФайл(ФайлЗагрузки);
	Исключение
		Предупреждение(НСтр("ru='Ошибка открытия файла ';uk='Помилка відкриття файлу '") + ФайлЗагрузки);
		Возврат;
	КонецПопытки;	
	
	Пока ФайлXML.Прочитать() Цикл
	
		ИмяТега = ВРег(СокрЛП(ФайлXML.Имя)); 
		
		Если ИмяТега="СЕКЦИЯДОКУМЕНТ" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если НЕ ЗагрузитьСекциюДокументаXML(ДокументыДляИмпорта, ФайлXML) Тогда
				Возврат;
			КонецЕсли;
				
		ИначеЕсли ИмяТега="СЕКЦИЯРАСЧСЧЕТ" Тогда
			
			СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
			
			Если НЕ ЗагрузитьСекциюРасчСчетаXML(СтрокаРССчетов, ФайлXML) Тогда
				Возврат;
			КонецЕсли;
			
			Если БанковскийСчет.НомерСчета <> СтрокаРССчетов.РасчСчетОрг Тогда
				Импорт_РасчетныеСчета.Удалить(СтрокаРССчетов);
			КонецЕсли;
			
		ИначеЕсли ИмяТега="РАСЧСЧЕТ" Тогда
			
			Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ФайлXML.Прочитать();	
				Значение = ФайлXML.Значение;
			КонецЕсли;	
			
			Если ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
				ФайлXML.Прочитать();	
			КонецЕсли;	
			
			Если СчетПринадлежитОрганизации(Значение) Тогда
				Если БанковскийСчет.НомерСчета = Значение Тогда
					СтрокаРССчетов = Импорт_РасчетныеСчета.Найти(Значение, "РасчСчетОрг");
					Если СтрокаРССчетов = Неопределено Тогда
						СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
						СтрокаРССчетов.РасчСчетОрг = Значение;
					КонецЕсли;
				Иначе						
					Сообщить(НСтр("ru='В заголовке файла указан счет (';uk='У заголовку файлу зазначений рахунок ('") + Значение + НСтр("ru=') отличный от указанного, расчеты по которому загружаться не будут!';uk=') відмінний від зазначеного, розрахунки по якому завантажуватися не будуть!'"), СтатусСообщения.ОченьВажное);
				КонецЕсли;
			Иначе
				Сообщить(НСтр("ru='В заголовке файла указан счет, не принадлежащий организации: ';uk='У заголовку файлу зазначений рахунок, що не належить організації: '") + Значение + " !", СтатусСообщения.ОченьВажное);
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ИмяТега="_1CCLIENTBANKEXCHANGE" И ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента  Тогда
			Если НЕ Импорт_ПризнакОбмена Тогда
				Сообщить(НСтр("ru='В файле импорта отсутствует признак обмена ""_1CClientBankExchange""!';uk='У файлі імпорту відсутній признак обміну ""_1CClientBankExchange""!'"));
				Возврат;
			КонецЕсли;
			
			
			НомерСтроки = 0;
			// Формируем объектные структуры данных
			Для каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
				// Последовательно обрабатываем каждую загруженную строку
				
				//Распознаем реквизиты
				//Если в файле находятся выписка пл. документов по нескольким счетам, то распознаем и отображаем
				//только те которые выгружены по указанному банковскому счету
				Если СтрокаДокумента.ПлательщикСчет = БанковскийСчет.НомерСчета
					ИЛИ СтрокаДокумента.ПолучательСчет  = БанковскийСчет.НомерСчета Тогда
					РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента);
					НомерСтроки = НомерСтроки + 1;
					СтрокаДокумента.НомерСтроки = НомерСтроки;
					// Для каждого реквизита (= колонка) надо проверить на пустое значение
					Для каждого КолонкаИмпорта из ДокументыДляИмпорта.Колонки Цикл
						ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, КолонкаИмпорта.Имя, КолонкаИмпорта.Заголовок);
					КонецЦикла;
					
					Если ТипЗнч(СтрокаДокумента.Контрагент)=Тип("Строка") ИЛИ
						ТипЗнч(СтрокаДокумента.СчетКонтрагента)=Тип("Строка") ИЛИ
						ТипЗнч(СтрокаДокумента.Договор)=Тип("Строка") Тогда
						
						//добавляем реквизиты в табличну часть для дальнейнего использования
						СписокНенайденных(СтрокаДокумента);
					КонецЕсли;
				Иначе
					//остальные помечаем для последующего удаления
					СтрокаДокумента.НомерСтроки = 0;					
				КонецЕсли;
			КонецЦикла;
			
			//Удалим не нужные строки из таблицы
			Количество = ДокументыДляИмпорта.количество()-1;
			Для й=0 по Количество Цикл
				Если ДокументыДляИмпорта[Количество-й].НомерСтроки = 0 Тогда
					ДокументыДляИмпорта.Удалить(Количество-й);
				КонецЕсли;
			КонецЦикла;
			
			Возврат;
			
		ИначеЕсли ИмяТега="_1CCLIENTBANKEXCHANGE" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента  Тогда
			Импорт_ПризнакОбмена = Истина;
			
		Иначе
			
			Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ФайлXML.Прочитать();	
				Значение = ФайлXML.Значение;
			КонецЕсли;	
			
			ЗагрузитьСтрокуЗаголовкаXML(ИмяТега, Значение);
			
			Если ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
				ФайлXML.Прочитать();	
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////// ЗАГРУЗКА //////////////////////////////////////////////////

Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения = ложь)
	
	Если ЗначениеСвойства<>неопределено И Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		Если ЭтоНовыйДокумент 
			ИЛИ (Не ЗначениеЗаполнено(Объект[ИмяСвойства]) или ОбязательнаяЗаменаСтарогоЗначения) 
			ИЛИ ТипЗнч(Объект[ИмяСвойства])=Тип("Булево") 
			ИЛИ ТипЗнч(Объект[ИмяСвойства])=Тип("Дата") Тогда
			
			Объект[ИмяСвойства] = ЗначениеСвойства;
			
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") Тогда
		НазваниеОбъекта = "документ ""Входящее платежное поручение"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.АккредитивПолученный") Тогда
		НазваниеОбъекта = "документ ""Аккредитив полученный"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеТребованиеПолученное") Тогда
		НазваниеОбъекта = "документ ""Платежное требование полученное"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеТребованиеПоручениеПолученное") Тогда
		НазваниеОбъекта = "документ ""Платежное требование-поручение полученное"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
		НазваниеОбъекта = "документ ""Исходящее платежное поручение"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.АккредитивПереданный") Тогда
		НазваниеОбъекта = "документ ""Аккредитив переданный"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеТребованиеВыставленное") Тогда
		НазваниеОбъекта = "документ ""Платежное требование выставленное"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;

	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеТребованиеПоручениеВыставленное") Тогда
		НазваниеОбъекта = "документ ""Платежное требование-поручение выставленное"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;

	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		НазваниеОбъекта = "документ ""Платежный ордер (списание)"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
		НазваниеОбъекта = "документ ""Платежный ордер (поступление)"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	Иначе
		НазваниеОбъекта = "объект";
		
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
	
КонецФункции

Процедура ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляПометки);
	НазваниеДействия = ?(Пометка, НСтр("ru=' помечен на удаление';uk=' позначений на видалення'"), НСтр("ru=' отменена пометка на удаление';uk=' відмінена помітка на видалення'"));
	Попытка
		
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		
		Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + ": " + НазваниеДействия + ".", СтатусСообщения.Информация);
		
	Исключение
		
		Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2)+ НСтр("ru=': не ';uk=': не '") + НазваниеДействия + НСтр("ru='! Произошли ошибки при записи!';uk='! Виникли помилки при спробі запису!'"), СтатусСообщения.Важное);
		
	КонецПопытки
	
КонецПроцедуры

Процедура ЗаписатьОбъект(ОбъектДляЗаписи,СтрокаСекции)
	
	ТипДокумента = ОбъектДляЗаписи.Метаданные().Имя;
	
	Если ТипДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		ИмяДокумента = "Платежное поручение исходящее";
		
	ИначеЕсли ТипДокумента = "ПлатежноеПоручениеВходящее" Тогда
		ИмяДокумента = "Платежное поручение входящее";
		
	ИначеЕсли ТипДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		ИмяДокумента = "Платежный ордер на списание";
		
	ИначеЕсли ТипДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		ИмяДокумента = "Платежный ордер на поступление";
		
	ИначеЕсли ТипДокумента = "ПлатежноеТребованиеВыставленное" Тогда
		ИмяДокумента = "Платежное требование выставленное";
		
	ИначеЕсли ТипДокумента = "ПлатежноеТребованиеПолученное" Тогда
		ИмяДокумента = "Платежное требование полученное";

	ИначеЕсли ТипДокумента = "АккредитивПереданный" Тогда
		ИмяДокумента = "Аккредитив переданный";
		
	ИначеЕсли ТипДокумента = "АккредитивПолученный" Тогда
		ИмяДокумента = "Аккредитив полученный";
				
	ИначеЕсли ТипДокумента = "ПлатежноеТребованиеПоручениеВыставленное" Тогда
		ИмяДокумента = "Платежное требование-поручение выставленное";
		
	ИначеЕсли ТипДокумента = "ПлатежноеТребованиеПоручениеПолученное" Тогда
		ИмяДокумента = "Платежное требование-поручение полученное";   
		
	КонецЕсли;
	
	Проводить = (ПолучитьНастройкуЗаполнения(ИмяДокумента,"Проводить") = Истина);
	ОтраженоВОперУчете 	= Истина;		
	УстановитьСвойство(ОбъектДляЗаписи, "ОтраженоВОперУчете", ОтраженоВОперУчете);
	УстановитьСвойство(ОбъектДляЗаписи, "ОтражатьВБухгалтерскомУчете", ОтражатьВБухгалтерскомУчете);
	УстановитьСвойство(ОбъектДляЗаписи, "Комментарий", НСтр("ru='Загружен из Клиент-Банка';uk='Завантажений із Клієнта-Банку'"));
			
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен = ОбъектДляЗаписи.Проведен;
	
	Если ОбъектМодифицирован Тогда
		Попытка
			Если ОбъектПроведен Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СтрокаСекции.Проведен = ОбъектДляЗаписи.проведен;
			Иначе
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			Сообщить(?(ЭтоНовыйДокумент,НСтр("ru='Создан ';uk='Створений '"),НСтр("ru='Перезаписан ';uk='Перезаписан '"))+ ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи) + ".");
			
		Исключение
			 
			НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
			Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + ?(ЭтоНовыйДокумент,НСтр("ru=' не создан';uk=' не створений'"),НСтр("ru=' не записан';uk=' не записаний'"))+ НСтр("ru='! Произошли ошибки при записи!';uk='! Виникли помилки при спробі запису!'"), СтатусСообщения.Важное);
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);

	Если Проводить И (ОбъектМодифицирован ИЛИ НЕ ОбъектПроведен) Тогда
		Попытка
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить(?(ОбъектПроведен,НСтр("ru='Перепроведен ';uk='Перепроведений '"),НСтр("ru='Проведен ';uk='Проведений '"))+НазваниеОбъекта, СтатусСообщения.Обычное);
			СтрокаСекции.Проведен = ОбъектДляЗаписи.проведен;
		Исключение
			Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + НСтр("ru=' не проведен! Произошли ошибки при проведении!';uk=' не проведений! Виникли помилки під час проведення!'"), СтатусСообщения.Важное);
		КонецПопытки
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьДокументДляЗагрузки(СтуктураДокумента)
	
	Результат = "";
	
	Если СтуктураДокумента.Готовность > 3 Тогда
		Результат = СтуктураДокумента.ОписаниеОшибок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПривестиНомер(НомерДокумента, Номер)
	
	НовыйНомер = "";
	ДлинаНомера = СтрДлина(Номер);
	ДлинаНомераДокумента = СтрДлина(НомерДокумента);
	
	Возврат Лев(НомерДокумента, ДлинаНомераДокумента - ДлинаНомера) + Номер;
	
КонецФункции

Функция СоздатьНовыйПлатежныйДокумент(ВидДокумента, Номер, Дата)
	
	НовыйДокумент = Документы[ВидДокумента].СоздатьДокумент();
	
	Если ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		НовыйДокумент.Номер = ПривестиНомер(НовыйДокумент.Номер, Номер);
		НовыйДокумент.Дата = Дата;
		
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		НовыйДокумент.Номер = ПривестиНомер(НовыйДокумент.Номер, Номер);
		НовыйДокумент.Дата = Дата;
		
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		НовыйДокумент.Номер = ПривестиНомер(НовыйДокумент.Номер, Номер);
		НовыйДокумент.Дата = Дата;
		
	ИначеЕсли ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
		НовыйДокумент.НомерВходящегоДокумента = Номер;
		НовыйДокумент.ДатаВходящегоДокумента = Дата;
		
	КонецЕсли;

	Возврат НовыйДокумент;
	
КонецФункции


Функция ПолучитьВалютуДоговора(ДоговорКонтрагента)
	
	ЗапросПоиска = Новый Запрос("ВЫБРАТЬ
	                              |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	                              |ИЗ
	                              |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                              |ГДЕ
	                              |	ДоговорыКонтрагентов.Ссылка = &Ссылка");
	
	ЗапросПоиска.УстановитьПараметр("Ссылка", ДоговорКонтрагента);
	Выборка = ЗапросПоиска.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда
		Возврат Выборка.ВалютаВзаиморасчетов;
		
	Иначе
		Возврат глЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьРеквизитПлатежногоПорученияИсходящего(ОбъектДокумента, ИсходныеДанные)
	
//Организация, ДАТА, НОМЕР 
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
	УстановитьСвойство(ОбъектДокумента, "ДатаОплаты", ИсходныеДанные.ДатаДок);
	Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты",НачалоДня(ИсходныеДанные.Списано), Истина);
	КонецЕсли;
		УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
		УстановитьСвойство(ОбъектДокумента, "Дата",НачалоДня(ИсходныеДанные.ДатаДок), Истина);
	
	УстановитьСвойство(ОбъектДокумента, "НомерПоручения", ИсходныеДанные.Номер);
	
	Если ОбъектДокумента.ЭтоНовый() Тогда
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		КонецЕсли;
		ОбъектДокумента.УстановитьНовыйНомер(Организация.Префикс);
	КонецЕсли;
	
//Контрагент,ДоговорКонтрагента,СтатьяДвиженияДенежныхСредств
	Если ОбъектДокумента.ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
	КонецЕсли;
	Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента", ?(ИсходныеДанные.Договор=НСтр("ru='Не найден';uk='Не знайдений'"),неопределено,ИсходныеДанные.Договор));
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
		ЗаполнитьСтрокуПлатежаПоДоговору(СтрокаРасшифровки, ОбъектДокумента);
	КонецЕсли;
	
	Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетаУчета.СчетАвансов, Истина);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом",СчетаУчета.СчетРасчетов, Истина);
		
		//УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаНДС",СчетаУчета.СчетУчетаНДСПриобретений);
		//УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаНДСПодтвержденный",СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный);
		//
		//УстановитьСвойство(СтрокаРасшифровки, "НалоговоеНазначение",СчетаУчета.НалоговоеНазначениеПриобретений);
		//УстановитьСвойство(СтрокаРасшифровки, "СтатьяВДВР",СчетаУчета.СтатьяВаловыхРасходов);
		
	КонецЕсли;
	
//СчетОрганизации,СчетКонтрагента 
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации, Истина);
	УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента, Истина);
	
//ВалютаДокумента,СчетУчетаДенежныхСредств
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
	Если НЕ ЗначениеЗаполнено(ОбъектДокумента.СчетУчетаДенежныхСредств) Тогда
		// счет банк
		Если ОбъектДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте, Истина);
		Иначе
			УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте, Истина);
		КонецЕсли;
	КонецЕсли;
	
//ВидОперации 
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
	
	
//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, истина);
	Если ОбъектДокумента.ЭтоНовый() 
		ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаРасшифровки, ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента);
		
		СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ЗначениеСтавкиНДС     = Ценообразование.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
		СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
		
	КонецЕсли;
	
	
//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	
		
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
		
	УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, истина);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоПорученияВходящего(ОбъектДокумента, ИсходныеДанные)
	
//Организация
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
	УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок);
		УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
	УстановитьСвойство(ОбъектДокумента, "ДатаОплаты", ИсходныеДанные.ДатаДок, Истина);
	Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты", ИсходныеДанные.Поступило, Истина);			
	КонецЕсли;
	Если ОбъектДокумента.ЭтоНовый() Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", НачалоДня(ИсходныеДанные.Поступило));
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", НачалоДня(ИсходныеДанные.ДатаДок));
		КонецЕсли;
	КонецЕсли;
	
//Контрагент,ДоговорКонтрагента,СтатьяДвиженияДенежныхСредств
	УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
	Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента", ?(ИсходныеДанные.Договор=НСтр("ru='Не найден';uk='Не знайдений'"),неопределено,ИсходныеДанные.Договор));
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина);
	КонецЕсли;
	Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда

		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетаУчета.СчетАвансовПокупателя, Истина);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом",СчетаУчета.СчетРасчетовПокупателя, Истина);
		
		//УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаНДС",СчетаУчета.СчетУчетаНДСПродаж);
		//УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаНДСПодтвержденный",СчетаУчета.СчетУчетаНДСПродажПодтвержденный);
		//УстановитьСвойство(СтрокаРасшифровки, "НалоговоеНазначение",СчетаУчета.НалоговоеНазначениеПродаж);
		//УстановитьСвойство(СтрокаРасшифровки, "СтатьяВДВР",СчетаУчета.СтатьяВаловыхДоходов);
		
	КонецЕсли;

//СчетОрганизации,СчетКонтрагента
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации, Истина);
	УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента, Истина);
	
//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
	
//СчетУчетаДенежныхСредств
	Если ОбъектДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте, Истина);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте, Истина);
	КонецЕсли;
	
//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, истина);
	Если ОбъектДокумента.ЭтоНовый() 
		ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаРасшифровки, ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента);
		
		СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ЗначениеСтавкиНДС     = Ценообразование.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
		СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
		
	КонецЕсли;

//ВидОперации 
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
	
//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	
//НазначениеПлатежа
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
	УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, истина);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоОрдераСписание(ОбъектДокумента, ИсходныеДанные)
	
//Организация
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
	
	УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
	УстановитьСвойство(ОбъектДокумента, "ДатаОплаты", ИсходныеДанные.ДатаДок, Истина);
	Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты",НачалоДня(ИсходныеДанные.Списано), Истина);
	КонецЕсли;
	
	Если ОбъектДокумента.ЭтоНовый() Тогда
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		КонецЕсли;
		
		ОбъектДокумента.УстановитьНовыйНомер(Организация.Префикс);
		
		ОкончаниеНомера = СокрЛП(ИсходныеДанные.Номер);
		ДлинаОкончания = СтрДлина(ОкончаниеНомера);
		ДлинаНомера = СтрДлина(ОбъектДокумента.Номер);
		Если ДлинаОкончания < 3 Тогда
			ДлинаОкончания = 3;
		КонецЕсли;
		
		ОбъектДокумента.Номер = Лев(ОбъектДокумента.Номер, ДлинаНомера - ДлинаОкончания) + Прав("000" + ОкончаниеНомера, ДлинаОкончания);
		
	КонецЕсли;
	
	
//Контрагент,ДоговорКонтрагента,СтатьяДвиженияДенежныхСредств
	УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
	Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента", ?(ИсходныеДанные.Договор=НСтр("ru='Не найден';uk='Не знайдений'"),неопределено,ИсходныеДанные.Договор));
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС);
	КонецЕсли;
	Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетаУчета.СчетАвансов, Истина);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом",СчетаУчета.СчетРасчетов, Истина);
		
		//УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаНДС",СчетаУчета.СчетУчетаНДСПриобретений);
		//УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаНДСПодтвержденный",СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный);
		//
		//УстановитьСвойство(СтрокаРасшифровки, "НалоговоеНазначение",СчетаУчета.НалоговоеНазначениеПриобретений);
		//УстановитьСвойство(СтрокаРасшифровки, "СтатьяВДВР",СчетаУчета.СтатьяВаловыхРасходов);
		
	КонецЕсли;
	
//СчетОрганизации,СчетКонтрагента 
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации, Истина);
	УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента, Истина);
	
//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
	
//СчетУчетаДенежныхСредств
	Если ОбъектДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте, Истина);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте, Истина);
	КонецЕсли;
	
//ВидОперации 
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
	
//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, истина);
	Если ОбъектДокумента.ЭтоНовый() 
		ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаРасшифровки, ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента);
		
		СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ЗначениеСтавкиНДС     = Ценообразование.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
		СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
		
	КонецЕсли;
	
//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	
//НазначениеПлатежа
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоОрдераПоступление(ОбъектДокумента, ИсходныеДанные)
	
//Организация
	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
	УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок);
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
	
	Если ОбъектДокумента.ЭтоНовый() Тогда
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		КонецЕсли;
		ОбъектДокумента.УстановитьНовыйНомер(Организация.Префикс);
	КонецЕсли;	
		
//Контрагент,ДоговорКонтрагента,СтатьяДвиженияДенежныхСредств
	УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
	Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента", ?(ИсходныеДанные.Договор="Не найден",неопределено,ИсходныеДанные.Договор));
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС);
	КонецЕсли;
	Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетаУчета.СчетАвансовПокупателя, Истина);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом",СчетаУчета.СчетРасчетовПокупателя, Истина);
		
		
		
	КонецЕсли;
	
//СчетОрганизации,СчетКонтрагента 
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации, Истина);
	УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента, Истина);
	
//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
	
//СчетУчетаДенежныхСредств
	Если ОбъектДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте, Истина);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте, Истина);
	КонецЕсли;
	
//Оплачено
		УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты", НачалоДня(ИсходныеДанные.ДатаДок), Истина);
	Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты", ИсходныеДанные.Поступило, Истина);			
	КонецЕсли;
	
//ВидОперации 
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
	
//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, истина);
	Если ОбъектДокумента.ЭтоНовый() 
		ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаРасшифровки, ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента);
		
		СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ЗначениеСтавкиНДС     = Ценообразование.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
		СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
		
	КонецЕсли;
	
//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	
//НазначениеПлатежа
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоТребованияВыставленного(ОбъектДокумента, ИсходныеДанные)

//Организация
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
	УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты",НачалоДня(ИсходныеДанные.ДатаДок), Истина);
	Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты", ИсходныеДанные.Поступило, Истина);			
	КонецЕсли;
	Если ЭтоНовыйДокумент Тогда
		ОбъектДокумента.УстановитьНовыйНомер(Организация.Префикс);
		Если Не ОбщегоНазначения.ЕстьНеЦифры(ИсходныеДанные.Номер) Тогда
			ОкончаниеНомера = Формат(Число(СокрЛП(ИсходныеДанные.Номер)), "ЧГ=0");
			ДлинаОкончания = СтрДлина(ОкончаниеНомера);
			ДлинаНомера = СтрДлина(СокрЛП(ОбъектДокумента.Номер));
			Если ДлинаОкончания < 3 Тогда
				ДлинаОкончания = 3;
			КонецЕсли;
			ОбъектДокумента.Номер = Лев(ОбъектДокумента.Номер, ДлинаНомера - ДлинаОкончания) + Формат(Число(ОкончаниеНомера), "ЧЦ=" + ДлинаОкончания + "; ЧВН=; ЧГ=0");
		КонецЕсли;
	КонецЕсли;
	
//Контрагент,ДоговорКонтрагента,СтатьяДвиженияДенежныхСредств
	УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
	Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента", ?(ИсходныеДанные.Договор="Не найден",неопределено,ИсходныеДанные.Договор));
	Если ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
		ЗаполнитьСтрокуПлатежаПоДоговору(СтрокаРасшифровки, ОбъектДокумента);
	КонецЕсли;
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина);
	КонецЕсли;
	
	Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетаУчета.СчетАвансовПокупателя, Истина);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом",СчетаУчета.СчетРасчетовПокупателя, Истина);
		
	КонецЕсли;
	
//СчетОрганизации,СчетКонтрагента 
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации, Истина);
	УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента, Истина);
	
//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
	
// счет банк
	Если ОбъектДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте, Истина);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте, Истина);
	КонецЕсли;        
	
	////ТекстПлательщика, ТекстПолучателя, ИННПлательщика, КПППлательщика,ИННПолучателя,КПППолучателя
	//	Если ЗначениеЗаполнено(ИсходныеДанные.Плательщик2) Тогда
	//		ТекстПлательщика = ИсходныеДанные.Плательщик1 + " р/с " + ИсходныеДанные.Плательщик2 + " в " + ИсходныеДанные.Плательщик3 + " " + ИсходныеДанные.Плательщик4;
	//	Иначе
	//		ТекстПлательщика = ИсходныеДанные.Плательщик1;
	//	КонецЕсли;
	//	Если ЗначениеЗаполнено(ИсходныеДанные.Получатель2) Тогда
	//		ТекстПолучателя = ИсходныеДанные.Получатель1 + " р/с " + ИсходныеДанные.Получатель2 + " в " + ИсходныеДанные.Получатель3 + " " + ИсходныеДанные.Получатель4;
	//	Иначе
	//		ТекстПолучателя = ИсходныеДанные.Получатель1;
	//	КонецЕсли;
	//	УстановитьСвойство(ОбъектДокумента, "ТекстПлательщика", ТекстПлательщика);
	//	УстановитьСвойство(ОбъектДокумента, "ТекстПолучателя", ТекстПолучателя);
	//	УстановитьСвойство(ОбъектДокумента, "ИННПлательщика", ИсходныеДанные.ПлательщикИНН);
	//	УстановитьСвойство(ОбъектДокумента, "КПППлательщика", ИсходныеДанные.ПлательщикКПП);
	//	УстановитьСвойство(ОбъектДокумента, "ИННПолучателя", ИсходныеДанные.ПолучательИНН);
	//	УстановитьСвойство(ОбъектДокумента, "КПППолучателя", ИсходныеДанные.ПолучательКПП);	

//ВидОперации 
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
	
//Подразделение
	УстановитьСвойство(ОбъектДокумента, "Подразделение", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение"));
	
//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	
//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, истина);
	Если ОбъектДокумента.ЭтоНовый() 
		ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаРасшифровки, ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента);
		
		СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ЗначениеСтавкиНДС     = Ценообразование.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
		СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
		
	КонецЕсли;
	
	////САкцептом,ДатаОтсылкиДокументов,СрокДляАкцепта
	//	Если НЕ ПустаяСтрока(ИсходныеДанные.СрокАкцепта) Тогда
	//		УстановитьСвойство(ОбъектДокумента, "УсловиеОплаты", Перечисления.УсловияОплатыРасчетныхДокументов.САкцептом);
	//		УстановитьСвойство(ОбъектДокумента, "СрокДляАкцепта", ИсходныеДанные.СрокАкцепта);
	//		УстановитьСвойство(ОбъектДокумента, "ДатаОтсылкиДокументов", ИсходныеДанные.ДатаОтсылки);
	//	КонецЕсли;   
	//
	////ОчередностьПлатежа, ВидПлатежа
	//УстановитьСвойство(ОбъектДокумента, "ОчередностьПлатежа", ИсходныеДанные.ОчередностьПлатежа);
	//УстановитьСвойство(ОбъектДокумента, "ВидПлатежа", ИсходныеДанные.ВидПлатежа);
	
	//НазначениеПлатежа
	//Если ЗначениеЗаполнено(ИсходныеДанные.НазначениеПлатежа1) Тогда
	//	
	//	НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа1;
	//	Для й = 2 По 6 Цикл
	//		Если НЕ ЗначениеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
	//			Прервать;
	//		КонецЕсли;
	//		НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + ИсходныеДанные["НазначениеПлатежа" + й];
	//	КонецЦикла;
	//	
	//Иначе
	//	
	НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
	//	
	//КонецЕсли;
	

	//Установка типа сделки документа


КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоТребованияПорученияВыставленного(ОбъектДокумента, ИсходныеДанные)

//Организация
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
	УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты",НачалоДня(ИсходныеДанные.ДатаДок), Истина);
	Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты", ИсходныеДанные.Поступило, Истина);			
	КонецЕсли;
	Если ЭтоНовыйДокумент Тогда
		ОбъектДокумента.УстановитьНовыйНомер(Организация.Префикс);
		Если Не ОбщегоНазначения.ЕстьНеЦифры(ИсходныеДанные.Номер) Тогда
			ОкончаниеНомера = Формат(Число(СокрЛП(ИсходныеДанные.Номер)), "ЧГ=0");
			ДлинаОкончания = СтрДлина(ОкончаниеНомера);
			ДлинаНомера = СтрДлина(СокрЛП(ОбъектДокумента.Номер));
			Если ДлинаОкончания < 3 Тогда
				ДлинаОкончания = 3;
			КонецЕсли;
			ОбъектДокумента.Номер = Лев(ОбъектДокумента.Номер, ДлинаНомера - ДлинаОкончания) + Формат(Число(ОкончаниеНомера), "ЧЦ=" + ДлинаОкончания + "; ЧВН=; ЧГ=0");
		КонецЕсли;
	КонецЕсли;
	
//Контрагент,ДоговорКонтрагента,СтатьяДвиженияДенежныхСредств
	УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
	Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента", ?(ИсходныеДанные.Договор="Не найден",неопределено,ИсходныеДанные.Договор));
	Если ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
		ЗаполнитьСтрокуПлатежаПоДоговору(СтрокаРасшифровки, ОбъектДокумента);
	КонецЕсли;
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина);
	КонецЕсли;
	
	Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетаУчета.СчетАвансовПокупателя, Истина);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом",СчетаУчета.СчетРасчетовПокупателя, Истина);
		
	КонецЕсли;
	
//СчетОрганизации,СчетКонтрагента 
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации, Истина);
	УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента, Истина);
	
//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
	
// счет банк
	Если ОбъектДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте, Истина);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте, Истина);
	КонецЕсли;        
	
	//ТекстПлательщика, ТекстПолучателя, ИННПлательщика, КПППлательщика,ИННПолучателя,КПППолучателя
	//Если ЗначениеЗаполнено(ИсходныеДанные.Плательщик2) Тогда
	//	ТекстПлательщика = ИсходныеДанные.Плательщик1 + " р/с " + ИсходныеДанные.Плательщик2 + " в " + ИсходныеДанные.Плательщик3 + " " + ИсходныеДанные.Плательщик4;
	//Иначе
	//	ТекстПлательщика = ИсходныеДанные.Плательщик1;
	//КонецЕсли;
	//Если ЗначениеЗаполнено(ИсходныеДанные.Получатель2) Тогда
	//	ТекстПолучателя = ИсходныеДанные.Получатель1 + " р/с " + ИсходныеДанные.Получатель2 + " в " + ИсходныеДанные.Получатель3 + " " + ИсходныеДанные.Получатель4;
	//Иначе
	//	ТекстПолучателя = ИсходныеДанные.Получатель1;
	//КонецЕсли;
	//УстановитьСвойство(ОбъектДокумента, "ТекстПлательщика", ТекстПлательщика);
	//УстановитьСвойство(ОбъектДокумента, "ТекстПолучателя", ТекстПолучателя);
	//УстановитьСвойство(ОбъектДокумента, "ИННПлательщика", ИсходныеДанные.ПлательщикИНН);
	//УстановитьСвойство(ОбъектДокумента, "КПППлательщика", ИсходныеДанные.ПлательщикКПП);
	//УстановитьСвойство(ОбъектДокумента, "ИННПолучателя", ИсходныеДанные.ПолучательИНН);
	//УстановитьСвойство(ОбъектДокумента, "КПППолучателя", ИсходныеДанные.ПолучательКПП);		

//ВидОперации 
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
	
//Подразделение
	УстановитьСвойство(ОбъектДокумента, "Подразделение", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение"));
	
//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	
//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, истина);
	Если ОбъектДокумента.ЭтоНовый() 
		ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаРасшифровки, ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента);
		
		СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ЗначениеСтавкиНДС     = Ценообразование.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
		СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
		
	КонецЕсли;
	
	//САкцептом,ДатаОтсылкиДокументов,СрокДляАкцепта
	//Если НЕ ПустаяСтрока(ИсходныеДанные.СрокАкцепта) Тогда
	//	УстановитьСвойство(ОбъектДокумента, "УсловиеОплаты", Перечисления.УсловияОплатыРасчетныхДокументов.САкцептом);
	//	УстановитьСвойство(ОбъектДокумента, "СрокДляАкцепта", ИсходныеДанные.СрокАкцепта);
	//	УстановитьСвойство(ОбъектДокумента, "ДатаОтсылкиДокументов", ИсходныеДанные.ДатаОтсылки);
	//КонецЕсли;
	
	//ОчередностьПлатежа, ВидПлатежа
	//УстановитьСвойство(ОбъектДокумента, "ОчередностьПлатежа", ИсходныеДанные.ОчередностьПлатежа);
	//УстановитьСвойство(ОбъектДокумента, "ВидПлатежа", ИсходныеДанные.ВидПлатежа);  	
	
	//НазначениеПлатежа
	//Если ЗначениеЗаполнено(ИсходныеДанные.НазначениеПлатежа1) Тогда
	//	
	//	НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа1;
	//	Для й = 2 По 6 Цикл
	//		Если НЕ ЗначениеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
	//			Прервать;
	//		КонецЕсли;
	//		НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + ИсходныеДанные["НазначениеПлатежа" + й];
	//	КонецЦикла;
	//	
	//Иначе
	//	
	//	НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
	//	
	//КонецЕсли;
	//УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, истина);

	//Установка типа сделки документа


КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоТребованияПолученного(ОбъектДокумента, ИсходныеДанные)

//Организация
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
	УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок);
	Если ОбъектДокумента.ЭтоНовый() Тогда 
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Списано);
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		КонецЕсли;
	КонецЕсли;
		УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты",НачалоДня(ИсходныеДанные.ДатаДок), Истина);
	Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты",НачалоДня(ИсходныеДанные.Списано), Истина);
	КонецЕсли;
	
//Контрагент,ДоговорКонтрагента,СтатьяДвиженияДенежныхСредств
	УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
	Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента", ?(ИсходныеДанные.Договор="Не найден",неопределено,ИсходныеДанные.Договор));
	Если ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
		ЗаполнитьСтрокуПлатежаПоДоговору(СтрокаРасшифровки, ОбъектДокумента);
	КонецЕсли;
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС);
	КонецЕсли;
	
	Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетаУчета.СчетАвансов, Истина);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом",СчетаУчета.СчетРасчетов, Истина);
		
	КонецЕсли;
	
//СчетОрганизации,СчетКонтрагента 
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации, Истина);
	УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента, Истина);
	
//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
	
// счет банк
Если ОбъектДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
	УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте, Истина);
Иначе
	УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте, Истина);
КонецЕсли;        
	
//ВидОперации 
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
	
//Подразделение
	УстановитьСвойство(ОбъектДокумента, "Подразделение", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение"));
	
//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	
//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, истина);
	Если ОбъектДокумента.ЭтоНовый() 
		ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаРасшифровки, ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента);
		
		СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ЗначениеСтавкиНДС     = Ценообразование.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
		СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
		
	КонецЕсли;
	
	//ОчередностьПлатежа
	//УстановитьСвойство(ОбъектДокумента, "ОчередностьПлатежа", ИсходныеДанные.ОчередностьПлатежа);
	
	//НазначениеПлатежа
	//Если ЗначениеЗаполнено(ИсходныеДанные.НазначениеПлатежа1) Тогда
	//	
	//	НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа1;
	//	Для й = 2 По 6 Цикл
	//		Если НЕ ЗначениеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
	//			Прервать;
	//		КонецЕсли;
	//		НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + ИсходныеДанные["НазначениеПлатежа" + й];
	//	КонецЦикла;
	//	
	//Иначе
	//	
	//	НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
	//	
	//КонецЕсли;
	//УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, истина);

	//Установка типа сделки документа
	//УстановитьТипСделки(ОбъектДокумента);


КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоТребованияПорученияПолученного(ОбъектДокумента, ИсходныеДанные)

//Организация
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
	УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок);
	Если ОбъектДокумента.ЭтоНовый() Тогда 
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Списано);
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		КонецЕсли;
	КонецЕсли;
		УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты",НачалоДня(ИсходныеДанные.ДатаДок), Истина);
	Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты",НачалоДня(ИсходныеДанные.Списано), Истина);
	КонецЕсли;
	                     
//Контрагент,ДоговорКонтрагента,СтатьяДвиженияДенежныхСредств
	УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
	Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента", ?(ИсходныеДанные.Договор="Не найден",неопределено,ИсходныеДанные.Договор));
	Если ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
		ЗаполнитьСтрокуПлатежаПоДоговору(СтрокаРасшифровки, ОбъектДокумента);
	КонецЕсли;
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина);
	КонецЕсли;
	
	Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетаУчета.СчетАвансов, Истина);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом",СчетаУчета.СчетРасчетов, Истина); 
		
	КонецЕсли;
	
//СчетОрганизации,СчетКонтрагента 
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
	УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента);
	
//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
	
// счет банк
Если ОбъектДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
	УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте, Истина);
Иначе
	УстановитьСвойство(ОбъектДокумента, "СчетУчетаДенежныхСредств", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте, Истина);
КонецЕсли;        
	
//ВидОперации 
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
	
//Подразделение
	УстановитьСвойство(ОбъектДокумента, "Подразделение", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение"));
	
//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	
//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, истина);
	Если ОбъектДокумента.ЭтоНовый() 
		ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаРасшифровки, ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента);
		
		СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ЗначениеСтавкиНДС     = Ценообразование.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
		СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
		
	КонецЕсли;
	
//ОчередностьПлатежа

	//НазначениеПлатежа
	//Если ЗначениеЗаполнено(ИсходныеДанные.НазначениеПлатежа1) Тогда
	//	
	//	НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа1;
	//	Для й = 2 По 6 Цикл
	//		Если НЕ ЗначениеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
	//			Прервать;
	//		КонецЕсли;
	//		НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + ИсходныеДанные["НазначениеПлатежа" + й];
	//	КонецЦикла;
	//	
	//Иначе
	//	
	//	НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
	//	
	//КонецЕсли;
	//УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, истина);

//Установка типа сделки документа


КонецПроцедуры

Процедура ЗаполнитьРеквизитАккредитиваПереданного(ОбъектДокумента, ИсходныеДанные)
	
//Организация, ДАТА, НОМЕР 
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
	УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты",НачалоДня(ИсходныеДанные.ДатаДок), Истина);
	Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты",НачалоДня(ИсходныеДанные.Списано), Истина);
	КонецЕсли;
	Если ОбъектДокумента.ЭтоНовый() Тогда
		ОбъектДокумента.УстановитьНовыйНомер(Организация.Префикс);
		Если Не ОбщегоНазначения.ЕстьНеЦифры(ИсходныеДанные.Номер) Тогда
			ОкончаниеНомера = Формат(Число(СокрЛП(ИсходныеДанные.Номер)), "ЧГ=0");
			ДлинаОкончания = СтрДлина(ОкончаниеНомера);
			ДлинаНомера = СтрДлина(СокрЛП(ОбъектДокумента.Номер));
			Если ДлинаОкончания < 3 Тогда
				ДлинаОкончания = 3;
			КонецЕсли;
			
			ОбъектДокумента.Номер = Лев(ОбъектДокумента.Номер, ДлинаНомера - ДлинаОкончания) + Формат(Число(ОкончаниеНомера), "ЧЦ=" + ДлинаОкончания + "; ЧВН=; ЧГ=0");
			
		КонецЕсли;
	КонецЕсли;
	
//Контрагент,ДоговорКонтрагента,СтатьяДвиженияДенежныхСредств
	Если ОбъектДокумента.ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
	КонецЕсли;
	Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента", ?(ИсходныеДанные.Договор="Не найден",неопределено,ИсходныеДанные.Договор));
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
		ЗаполнитьСтрокуПлатежаПоДоговору(СтрокаРасшифровки, ОбъектДокумента);
	КонецЕсли;
	
	Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетаУчета.СчетАвансов, истина);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом",СчетаУчета.СчетРасчетов, истина);
		
	КонецЕсли;
	
//СчетОрганизации,СчетКонтрагента 
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
	УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента);
	
//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
	
	//ТекстПлательщика, ТекстПолучателя, ИННПлательщика, КПППлательщика,ИННПолучателя,КПППолучателя
	//Если ЗначениеЗаполнено(ИсходныеДанные.Плательщик2) Тогда
	//	ТекстПлательщика = ИсходныеДанные.Плательщик1 + " р/с " + ИсходныеДанные.Плательщик2 + " в " + ИсходныеДанные.Плательщик3 + " " + ИсходныеДанные.Плательщик4;
	//Иначе
	//	ТекстПлательщика = ИсходныеДанные.Плательщик1;
	//КонецЕсли;
	//Если ЗначениеЗаполнено(ИсходныеДанные.Получатель2) Тогда
	//	ТекстПолучателя = ИсходныеДанные.Получатель1 + " р/с " + ИсходныеДанные.Получатель2 + " в " + ИсходныеДанные.Получатель3 + " " + ИсходныеДанные.Получатель4;
	//Иначе
	//	ТекстПолучателя = ИсходныеДанные.Получатель1;
	//КонецЕсли;
	//УстановитьСвойство(ОбъектДокумента, "ТекстПлательщика", ТекстПлательщика);
	//УстановитьСвойство(ОбъектДокумента, "ТекстПолучателя", ТекстПолучателя);
	//УстановитьСвойство(ОбъектДокумента, "ИННПлательщика", ИсходныеДанные.ПлательщикИНН);
	//УстановитьСвойство(ОбъектДокумента, "КПППлательщика", ИсходныеДанные.ПлательщикКПП);
	//УстановитьСвойство(ОбъектДокумента, "ИННПолучателя", ИсходныеДанные.ПолучательИНН);
	//УстановитьСвойство(ОбъектДокумента, "КПППолучателя", ИсходныеДанные.ПолучательКПП);		
	
//ВидОперации 
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
		
//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, истина);
	Если ОбъектДокумента.ЭтоНовый() 
		ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаРасшифровки, ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента);
		
		СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ЗначениеСтавкиНДС     = Ценообразование.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
		СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
		
	КонецЕсли;
	
//Подразделение
	УстановитьСвойство(ОбъектДокумента, "Подразделение", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение"));
	
//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	
	//УсловиеОплаты,ВидАккредитива,СрокДействия,ДокументыКПредъявлению,ДополнительныеУсловия,СчетДепонента
	//УстановитьСвойство(ОбъектДокумента, "УсловиеОплаты", ?(ИсходныеДанные.УсловиеОплаты="С акцептом",Перечисления.УсловияОплатыРасчетныхДокументов.САкцептом,Перечисления.УсловияОплатыРасчетныхДокументов.БезАкцепта));
	//ВидАкк = неопределено;
	//ВидАкк = ?( ИсходныеДанные.ВидАккредитива="Безотзывный (покрытый)",Перечисления.ВидыАккредитивов.БезотзывныйПокрытый,ВидАкк);
	//ВидАкк = ?( ИсходныеДанные.ВидАккредитива="Безотзывный (непокрытый)",Перечисления.ВидыАккредитивов.БезотзывныйНепокрытый,ВидАкк);
	//ВидАкк = ?( ИсходныеДанные.ВидАккредитива="Отзывный (непокрытый)",Перечисления.ВидыАккредитивов.ОтзывныйНепокрытый,ВидАкк);
	//ВидАкк = ?( ИсходныеДанные.ВидАккредитива="Отзывный (покрытый)",Перечисления.ВидыАккредитивов.ОтзывныйПокрытый,ВидАкк);
	//УстановитьСвойство(ОбъектДокумента, "ВидАккредитива", ВидАкк);
	//УстановитьСвойство(ОбъектДокумента, "СрокДействия", ИсходныеДанные.СрокПлатежаДок);
	//УстановитьСвойство(ОбъектДокумента, "ДокументыКПредъявлению", ИсходныеДанные.ПлатежПоПредст);
	//УстановитьСвойство(ОбъектДокумента, "ДополнительныеУсловия", ИсходныеДанные.ДополнУсловия);
	//УстановитьСвойство(ОбъектДокумента, "СчетДепонента", ИсходныеДанные.НомерСчетаПоставщика);
	
//ВидПлатежа
	//УстановитьСвойство(ОбъектДокумента, "ВидПлатежа", ИсходныеДанные.ВидПлатежа);

//НазначениеПлатежа
	//Если ЗначениеЗаполнено(ИсходныеДанные.НазначениеПлатежа) Тогда
	//	
	//	НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
	//	Для й = 2 По 6 Цикл
	//		Если НЕ ЗначениеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
	//			Прервать;
	//		КонецЕсли;
	//		НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + ИсходныеДанные["НазначениеПлатежа" + й];
	//	КонецЦикла;
	//	
	//Иначе
	//	
	//	НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
	//	
	//КонецЕсли;
	//УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, истина);
	
	//Установка типа сделки документа
	

КонецПроцедуры

Процедура ЗаполнитьРеквизитАккредитиваПолученного(ОбъектДокумента, ИсходныеДанные)
	
//Организация
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
	УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок);
	Если ОбъектДокумента.ЭтоНовый() Тогда 
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Поступило);
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		КонецЕсли;
	КонецЕсли;
		УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты",НачалоДня(ИсходныеДанные.ДатаДок), Истина);
	Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты", ИсходныеДанные.Поступило, Истина);			
	КонецЕсли;
	
//Контрагент,ДоговорКонтрагента,СтатьяДвиженияДенежныхСредств
	УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
	Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента", ?(ИсходныеДанные.Договор="Не найден",неопределено,ИсходныеДанные.Договор));
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС);
	КонецЕсли;
	
	Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетаУчета.СчетАвансовПокупателя, истина);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом",СчетаУчета.СчетРасчетовПокупателя, истина);
		
	КонецЕсли;
	
//СчетОрганизации,СчетКонтрагента
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
	УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента);
	
//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
			
//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, истина);
	Если ОбъектДокумента.ЭтоНовый() 
	ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаРасшифровки, ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента);
		
		СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ЗначениеСтавкиНДС     = Ценообразование.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
		СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
		
	КонецЕсли;

//ВидОперации 
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
		
//Подразделение
	УстановитьСвойство(ОбъектДокумента, "Подразделение", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение"));
	
//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	
//НазначениеПлатежа
	//Если ЗначениеЗаполнено(ИсходныеДанные.НазначениеПлатежа1) Тогда
	//
	//	НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа1;
	//	Для й = 2 По 6 Цикл
	//		Если НЕ ЗначениеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
	//			Прервать;
	//		КонецЕсли;
	//		НазначениеПлатежа = НазначениеПлатежа + " " + ИсходныеДанные["НазначениеПлатежа" + й];
	//	КонецЦикла;
	//
	//Иначе
	//
	//	НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
	//
	//КонецЕсли;
	//УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, истина);
	
	//Установка типа сделки документа
	

КонецПроцедуры



Процедура ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента,ТипДокумента, СтрокаСекции)
	
	Если ТипДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		ЗаполнитьРеквизитПлатежногоПорученияИсходящего(ОбъектДокумента, СтрокаСекции);
		
	ИначеЕсли ТипДокумента = "ПлатежноеПоручениеВходящее" Тогда
		ЗаполнитьРеквизитПлатежногоПорученияВходящего(ОбъектДокумента, СтрокаСекции);
		
	ИначеЕсли ТипДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		ЗаполнитьРеквизитПлатежногоОрдераСписание(ОбъектДокумента, СтрокаСекции);
		
	ИначеЕсли ТипДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		ЗаполнитьРеквизитПлатежногоОрдераПоступление(ОбъектДокумента, СтрокаСекции);
		
	ИначеЕсли ТипДокумента = "ПлатежноеТребованиеВыставленное" Тогда
		ЗаполнитьРеквизитПлатежногоТребованияВыставленного(ОбъектДокумента, СтрокаСекции);
		
	ИначеЕсли ТипДокумента = "ПлатежноеТребованиеПолученное" Тогда
			ЗаполнитьРеквизитПлатежногоТребованияПолученного(ОбъектДокумента, СтрокаСекции);
		
	ИначеЕсли ТипДокумента = "АккредитивПереданный" Тогда
		ЗаполнитьРеквизитАккредитиваПереданного(ОбъектДокумента, СтрокаСекции);
		
	ИначеЕсли ТипДокумента = "АккредитивПолученный" Тогда
		ЗаполнитьРеквизитАккредитиваПолученного(ОбъектДокумента, СтрокаСекции);
					
	ИначеЕсли ТипДокумента = "ПлатежноеТребованиеПоручениеПолученное" Тогда
		ЗаполнитьРеквизитПлатежногоТребованияПорученияПолученного(ОбъектДокумента, СтрокаСекции);
		
	ИначеЕсли ТипДокумента = "ПлатежноеТребованиеПоручениеВыставленное" Тогда
		ЗаполнитьРеквизитПлатежногоТребованияПорученияВыставленного(ОбъектДокумента, СтрокаСекции);			
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Загрузить(ДокументыКИмпорту) Экспорт
	
	НачалоИнтервалаЗагрузки = ПустаяДата;
	КонецИнтервалаЗагрузки  = ПустаяДата;
	ДокументыКИмпорту.Индексы.Добавить("Документ");
	
	Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, Импорт_Заголовок.ДатаНачала);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Сообщить(НСтр("ru='В заголовке файла загрузки неверно указана дата начала интервала! Файл не может быть загружен!';uk='У заголовку файлу завантаження невірно зазначена дата початку інтервалу! Файл не може бути завантажений!'"), СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, Импорт_Заголовок.ДатаКонца);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Сообщить(НСтр("ru='В заголовке файла импорта неверно указана дата окончания интервала!';uk='У заголовку файлу імпорту невірно вказана дата закінчення інтервалу!'"), СтатусСообщения.ОченьВажное);
		//Возврат;
	КонецЕсли;
	
	КолонкиДокумента  = ДокументыКИмпорту.Колонки;

	// загружаем отмеченные секции документов
	Для каждого СтрокаСекции из ДокументыКИмпорту Цикл
		Если СтрокаСекции.Загружать Тогда
			
			РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);
			Если ПустаяСтрока(РезультатПроверки) Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
					// В ИБ не найден документ, необходимо создать новый
					ОбъектДокумента = СоздатьНовыйПлатежныйДокумент(СтрокаСекции.ВидДокумента, СтрокаСекции.Номер, СтрокаСекции.Дата);
				Иначе
					// В ИБ найден документ, необходимо получить его объект
					ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
				КонецЕсли;
				
				ЭтоНовыйДокумент = ОбъектДокумента.ЭтоНовый();
				ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента,ОбъектДокумента.Метаданные().Имя, СтрокаСекции);
				
				//Если контрагент не создан, то добавляем его реквизиты в табличную часть для дальнейнего использования
				ТипКонтрагента =?(СтрокаСекции.ПлательщикСчет = БанковскийСчет.НомерСчета,"ПОЛУЧАТЕЛЬ","ПЛАТЕЛЬЩИК");
				НайденнаяСтрока = ТаблицаКонтрагентов.Строки.Найти(СтрокаСекции[ТипКонтрагента+"ОКПО"], "Значение", истина);
				
				Если НайденнаяСтрока <> неопределено Тогда
					
					НайденнаяСтрока = НайденнаяСтрока.Родитель;
					ОбъектДокумента.РеквизитыКонтрагента.Очистить();
					
					Для Счет =0 По 2 Цикл
						НовыйРеквизит = ОбъектДокумента.РеквизитыКонтрагента.Добавить();
						НовыйРеквизит.Представление = НайденнаяСтрока.Строки[Счет].Представление;
						НовыйРеквизит.Значение 		= НайденнаяСтрока.Строки[Счет].Значение;
						НовыйРеквизит.Реквизит		= НайденнаяСтрока.Строки[Счет].Реквизит;
					КонецЦикла;
					

					Если СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
						ВидДоговора = НСтр("ru='другой';uk='інший'");	
					Иначе	
						ВидДоговора = Строка(УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(СтрокаСекции.ВидОперации)[0]);
					КонецЕсли;	
					
					Для каждого Строка из НайденнаяСтрока.Строки Цикл
						Если Строка.Представление = НСтр("ru='Р/счет';uk='Р/рахунок'") и Строка.Значение = СтрокаСекции[ТипКонтрагента+"СЧЕТ"] Тогда
							
							НовыйРеквизит = ОбъектДокумента.РеквизитыКонтрагента.Добавить();
							НовыйРеквизит.Представление = Строка.Представление;
							НовыйРеквизит.Значение 		= Строка.Значение;
							НовыйРеквизит.Реквизит		= Строка.Реквизит;
							
							Для каждого ПодСтрока Из Строка.Строки Цикл
								НовыйРеквизит = ОбъектДокумента.РеквизитыКонтрагента.Добавить();
								НовыйРеквизит.Представление = ПодСтрока.Представление;
								НовыйРеквизит.Значение 		= ПодСтрока.Значение;
								НовыйРеквизит.Реквизит		= ПодСтрока.Реквизит;
							КонецЦикла;
							
						КонецЕсли;
					КонецЦикла;
					
					Для каждого Строка из НайденнаяСтрока.Строки Цикл
						Если Строка.Представление = НСтр("ru='Договор';uk='Договір'") и Строка.Значение = ВидДоговора Тогда
							
							НовыйРеквизит = ОбъектДокумента.РеквизитыКонтрагента.Добавить();
							НовыйРеквизит.Представление = Строка.Представление;
							НовыйРеквизит.Значение 		= Строка.Значение;
							НовыйРеквизит.Реквизит		= Строка.Реквизит;
							
							Для каждого ПодСтрока Из Строка.Строки Цикл
								НовыйРеквизит = ОбъектДокумента.РеквизитыКонтрагента.Добавить();
								НовыйРеквизит.Представление = ПодСтрока.Представление;
								НовыйРеквизит.Значение 		= ПодСтрока.Значение;
								НовыйРеквизит.Реквизит		= ПодСтрока.Реквизит;
							КонецЦикла;
							
						КонецЕсли;
					КонецЦикла;
					
					
					
				КонецЕсли;
				
				Если ОбъектДокумента.ПометкаУдаления Тогда
					ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь);
				КонецЕсли;
				
				ЗаписатьОбъект(ОбъектДокумента,СтрокаСекции);
				
				Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
						СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
						Если СтрокаСекции.ВидДокумента = "ПлатежноеПоручениеИсходящее"
							ИЛИ СтрокаСекции.ВидДокумента = "ПлатежноеТребованиеВыставленное"  
							ИЛИ СтрокаСекции.ВидДокумента = "ПлатежноеТребованиеПоручениеВыставленное"  
							ИЛИ СтрокаСекции.ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств"  
							ИЛИ СтрокаСекции.ВидДокумента = "АккредитивПереданный"  
							Тогда
							РеквизитДаты = "ДатаОплаты";
							РеквизитНомера = "Номер";
						Иначе
							РеквизитДаты = "ДатаВходящегоДокумента";
							РеквизитНомера = "НомерВходящегоДокумента";
						КонецЕсли;
						СтрокаСекции.НомерДок = ОбъектДокумента[РеквизитНомера];
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Сообщить(НСтр("ru='Платежный документ ""';uk='Платіжний документ ""'") + СтрокаСекции.Операция + """ №" + СтрокаСекции.Номер + НСтр("ru=' от ';uk=' від '") + СтрокаСекции.Дата + НСтр("ru=' не может быть загружен:';uk=' не може бути завантажений:'") + Символы.ПС + РезультатПроверки + "!", СтатусСообщения.ОченьВажное);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	// Платежные документы, отсутствующие в списке загруженным помечаем на удаление
	
	//Составляем список счетов
	СписокСчетов = Новый СписокЗначений;
	
	Для каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчетОрг));
	КонецЦикла;
	
	// Платежные поручения исходящие, отсутствующие в списке загруженным помечаем на удаление
	СинхронизироватьДокументыПоСчетам(ДокументыКИмпорту, "ПлатежноеПоручениеИсходящее", "ПлатежноеПоручениеВходящее", НачалоИнтервалаЗагрузки, КонецИнтервалаЗагрузки);
	СинхронизироватьДокументыПоСчетам(ДокументыКИмпорту, "АккредитивПереданный", "АккредитивПолученный", НачалоИнтервалаЗагрузки, КонецИнтервалаЗагрузки);
	СинхронизироватьДокументыПоСчетам(ДокументыКИмпорту, "ПлатежноеТребованиеВыставленное", "ПлатежноеТребованиеПолученное", НачалоИнтервалаЗагрузки, КонецИнтервалаЗагрузки);
	СинхронизироватьДокументыПоСчетам(ДокументыКИмпорту, "ПлатежноеТребованиеПоручениеВыставленное", "ПлатежноеТребованиеПоручениеПолученное", НачалоИнтервалаЗагрузки, КонецИнтервалаЗагрузки);
			
КонецПроцедуры

Процедура СинхронизироватьДокументыПоСчетам(ДокументыКИмпорту, ВидДокументовИсходящих, ВидДокументовВходящих, НачалоИнтервалаЗагрузки, КонецИнтервалаЗагрузки)
	
	//Составляем список счетов
	
	СписокСчетов = Новый СписокЗначений;
	
	Для каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчетОрг));
	КонецЦикла;
	
	ДокументыНаУдаление = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                   |	" + ВидДокументовИсходящих + ".Ссылка,
	                                   |	" + ВидДокументовИсходящих + ".Дата,
	                                   |	" + ВидДокументовИсходящих + ".СчетОрганизации.НомерСчета
	                                   |ИЗ
	                                   |	Документ." + ВидДокументовИсходящих + " КАК " + ВидДокументовИсходящих + "
	                                   |ГДЕ
	                                   |	" + ВидДокументовИсходящих + ".Дата >= &ДатаНач
	                                   |	И " + ВидДокументовИсходящих + ".Дата <= &ДатаКон
	                                   |	И " + ВидДокументовИсходящих + ".СчетОрганизации.НомерСчета В(&НомераСчетов)");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач", НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон", КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов", СписокСчетов);

	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						Сообщить("Платежный документ """ + ОбъектДокументаКУдаление + " не помечен на удаление, так как имеет дату равной или меньшей границы обработки!", СтатусСообщения.ОченьВажное);
						Продолжить;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Платежные поручения входящие, отсутствующие в списке загруженным помечаем на удаление
	
	ДокументыНаУдаление = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                   |	" + ВидДокументовВходящих + ".Ссылка,
	                                   |	" + ВидДокументовВходящих + ".ДатаВходящегоДокумента,
	                                   |	" + ВидДокументовВходящих + ".СчетОрганизации.НомерСчета
	                                   |ИЗ
	                                   |	Документ." + ВидДокументовВходящих + " КАК " + ВидДокументовВходящих + "
	                                   |ГДЕ
	                                   |	" + ВидДокументовВходящих + ".ДатаВходящегоДокумента >= &ДатаНач
	                                   |	И " + ВидДокументовВходящих + ".ДатаВходящегоДокумента <= &ДатаКон
	                                   |	И " + ВидДокументовВходящих + ".СчетОрганизации.НомерСчета В(&НомераСчетов)");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач", НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон", КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов", СписокСчетов);

	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						Сообщить("Платежный документ """ + ОбъектДокументаКУдаление + " не помечен на удаление, так как имеет дату равной или меньшей границы обработки!", СтатусСообщения.ОченьВажное);
						Продолжить;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
			
		КонецЕсли;
		
	КонецЦикла;    	
	
КонецПроцедуры

///////////// Модуль     //////////////////////////////////////////////////

ПустаяДата = Дата("00010101");

ЗаполнитьСтрокиРеквизитовПлДокументовДляИмпорта();

// Общее
СформироватьТегиЗаголовка();
СформироватьТегиРасчетногоСчета();

// Экспорт
СформироватьСоответствиеВыгружаемых();
Импорт_ТекстДляРазбора = "";


// Импорт
Импорт_РасчетныеСчета = Новый ТаблицаЗначений;
СформироватьСтруктуруТаблицыРасчСчетов(Импорт_РасчетныеСчета);

Импорт_ВидыДокументов = Новый Массив;

СформироватьСоответствиеЗагружаемых();
ЗаполнитьРаспознаваемыеПриИмпорте();
СформироватьСоответствияНеПустыхПриИмпорте();

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
СписокКонтрагентов =Новый СписокЗначений();

ОтражатьВБухгалтерскомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВБухгалтерскомУчете");

#КонецЕсли
