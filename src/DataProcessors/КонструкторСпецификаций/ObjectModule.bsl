// Соответствия, содержащая назначения свойств и категорий именам
Перем мСоответствиеНазначений Экспорт;

Перем мСтруктураДляОтбораПоКатегориям Экспорт; // предназначена для связи отборов Построителя с категориями из соединяемых таблиц

Перем мСтрокаТабличнойЧасти Экспорт;
Перем мВедениеПланированияПроизводстваПоСменам Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

// Процедура выводит строку дерева спецификаций.
//
Процедура ВывестиСтрокуДереваСпецификаций(ТабДокумент, Макет, СтрокаДерева, Уровень, КоличествоПродукции = 1)
	
	Если СтрокаДерева.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ИсходныеКомплектующие
	 ИЛИ СтрокаДерева.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия
	 ИЛИ СтрокаДерева.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныеОтходы Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Группа");
		ОбластьМакета.Параметры.Номенклатура = "" + СтрокаДерева.ВидСтроки + " (" + СтрокаДерева.Количество + ")";
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Заполнить(СтрокаДерева);
		Если СтрокаДерева.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура
		 ИЛИ СтрокаДерева.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Узел
		 ИЛИ СтрокаДерева.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.КонечнаяПродукция
		Тогда
			ОбластьМакета.Параметры.Количество = ОбластьМакета.Параметры.Количество * КоличествоПродукции;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьСтрока = ТабДокумент.Вывести(ОбластьМакета, Уровень);
	ТабДокумент.Область(ОбластьСтрока.Верх,1+1).Отступ = Уровень - 1;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		
		Уровень = Уровень + 1;
		
		Если СтрокаДерева.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура
		  или СтрокаДерева.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Узел Тогда
		  
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Очистить();
			СтруктураПоиска.Вставить("Номенклатура", 				СтрокаДерева.Номенклатура);
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", 	СтрокаДерева.ХарактеристикаНоменклатуры);
			
			МассивСтрок = СтрокаДерева.ОсновнаяСпецификация.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
			
			// Если не найдены строки с указанной характеристикой, попробуем найти без указания характеристики.
			Если МассивСтрок.Количество() = 0 Тогда
				СтруктураПоиска.Очистить();
				СтруктураПоиска.Вставить("Номенклатура", СтрокаДерева.Номенклатура);
				МассивСтрок = СтрокаДерева.ОсновнаяСпецификация.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
			
			Если МассивСтрок.Количество() > 0 Тогда
				СтрокаВыходногоИзделия = МассивСтрок[0];
				Количество = СтрокаДерева.Количество * СтрокаДерева.ЕдиницаИзмерения.Коэффициент;
				КоличествоВыходногоИзделия = СтрокаВыходногоИзделия.Количество * СтрокаВыходногоИзделия.ЕдиницаИзмерения.Коэффициент;
				Количество = Количество * КоличествоПродукции / ?(КоличествоВыходногоИзделия = 0, 1, КоличествоВыходногоИзделия);
			Иначе
				Количество = СтрокаДерева.Количество  * КоличествоПродукции;
			КонецЕсли;
		Иначе
			Количество = КоличествоПродукции;
		КонецЕсли;
	
		Для Каждого Строка Из СтрокаДерева.Строки Цикл
			
			ВывестиСтрокуДереваСпецификаций(ТабДокумент, Макет, Строка, Уровень, Количество);
			
		КонецЦикла;
		
		Уровень = Уровень - 1;
		
	КонецЕсли;
	
КонецПроцедуры // ВывестиСтрокуДереваСпецификаций()

#Если Клиент Тогда

// Процедура производит вывод на печать дерева спецификаций.
//
Процедура ПечатьДереваСпецификаций(ДеревоСпецификаций, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДеревоСпецификаций";

	Макет = ПолучитьМакет("ДеревоСпецификаций");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Дерево спецификаций";
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Уровень = 1;
	ТабДокумент.НачатьАвтогруппировкуСтрок();
	
	Для Каждого Строка Из ДеревоСпецификаций.Строки Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Номенклатура", 				Строка.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", 	Строка.ХарактеристикаНоменклатуры);
		
		МассивСтрок = Строка.ОсновнаяСпецификация.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0
		   И ФормироватьОтчетыНаЕдиницуПродукции
		Тогда
			СтрокаВыходногоИзделия = МассивСтрок[0];
			КоличествоВыходногоИзделия = СтрокаВыходногоИзделия.Количество * СтрокаВыходногоИзделия.ЕдиницаИзмерения.Коэффициент;
			Количество = 1 / ?(КоличествоВыходногоИзделия = 0, 1, КоличествоВыходногоИзделия);
		Иначе
			Количество = 1;
		КонецЕсли;
		
		ВывестиСтрокуДереваСпецификаций(ТабДокумент, Макет, Строка, Уровень, Количество);
		
	КонецЦикла;
	
	ТабДокумент.ЗакончитьАвтогруппировкуСтрок();
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(ОбластьМакета);
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Дерево спецификаций");
	
КонецПроцедуры // ПечатьДереваСпецификаций()

// Процедура добавляет строку в таблицу номенклатуры.
//
Процедура ДобавитьСтрокуТаблицыНоменклатуры(ТаблицаНоменклатуры, СтрокаДерева, ВидВоспроизводства, КоличествоПродукции = 1)
	
	Если ТипЗнч(СтрокаДерева.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		НоменклатураВидВоспроизводства = СтрокаДерева.Номенклатура.ВидВоспроизводства;
	Иначе
		НоменклатураВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если НоменклатураВидВоспроизводства = ВидВоспроизводства И СтрокаДерева.Количество <> 0 Тогда
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.Номенклатура 		= СтрокаДерева.Номенклатура;
		НоваяСтрока.Характеристика 		= СтрокаДерева.ХарактеристикаНоменклатуры;
		НоваяСтрока.Количество 			= СтрокаДерева.Количество * КоличествоПродукции;
		НоваяСтрока.ЕдиницаИзмерения 	= СтрокаДерева.ЕдиницаИзмерения;
		НоваяСтрока.Спецификация 		= СтрокаДерева.ОсновнаяСпецификация;
		
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		
		Если СтрокаДерева.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура
	 	 или СтрокаДерева.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Узел Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Очистить();
			СтруктураПоиска.Вставить("Номенклатура", 				СтрокаДерева.Номенклатура);
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", 	СтрокаДерева.ХарактеристикаНоменклатуры);
		
			МассивСтрок = СтрокаДерева.ОсновнаяСпецификация.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
			
			// Если не найдены строки с указанной характеристикой, попробуем найти без указания характеристики.
			Если МассивСтрок.Количество() = 0 Тогда
				СтруктураПоиска.Очистить();
				СтруктураПоиска.Вставить("Номенклатура", СтрокаДерева.Номенклатура);
				МассивСтрок = СтрокаДерева.ОсновнаяСпецификация.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
			
			Если МассивСтрок.Количество() > 0 Тогда
				СтрокаВыходногоИзделия = МассивСтрок[0];
				Количество = СтрокаДерева.Количество * СтрокаДерева.ЕдиницаИзмерения.Коэффициент;
				КоличествоВыходногоИзделия = СтрокаВыходногоИзделия.Количество * СтрокаВыходногоИзделия.ЕдиницаИзмерения.Коэффициент;
				Количество = Количество * КоличествоПродукции / ?(КоличествоВыходногоИзделия = 0, 1, КоличествоВыходногоИзделия);
			Иначе
				Количество = СтрокаДерева.Количество  * КоличествоПродукции;
			КонецЕсли;
		Иначе
			Количество = КоличествоПродукции;
		КонецЕсли;
		
		Для Каждого Строка Из СтрокаДерева.Строки Цикл
			
			Если СтрокаДерева.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия
			 или СтрокаДерева.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныеОтходы Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьСтрокуТаблицыНоменклатуры(ТаблицаНоменклатуры, Строка, ВидВоспроизводства, Количество);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуТаблицыНоменклатуры()

// Процедура производит вывод на печать список покупных изделий.
//
Процедура ПечатьПокупныеИзделия(ДеревоСпецификаций, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Подготовим таблицу номенклатуры.
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура");
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика");
	ТаблицаНоменклатуры.Колонки.Добавить("Серия");
	ТаблицаНоменклатуры.Колонки.Добавить("Количество");
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаНоменклатуры.Колонки.Добавить("Спецификация");
	
	ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Закупка;
	
	Для Каждого Строка Из ДеревоСпецификаций.Строки Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Номенклатура", 				Строка.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", 	Строка.ХарактеристикаНоменклатуры);
		
		МассивСтрок = Строка.ОсновнаяСпецификация.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0
		   И ФормироватьОтчетыНаЕдиницуПродукции
		Тогда
			СтрокаВыходногоИзделия = МассивСтрок[0];
			КоличествоВыходногоИзделия = СтрокаВыходногоИзделия.Количество * СтрокаВыходногоИзделия.ЕдиницаИзмерения.Коэффициент;
			Количество = 1 / ?(КоличествоВыходногоИзделия = 0, 1, КоличествоВыходногоИзделия);
		Иначе
			Количество = 1;
		КонецЕсли;
		
		ДобавитьСтрокуТаблицыНоменклатуры(ТаблицаНоменклатуры, Строка, ВидВоспроизводства, Количество);
		
	КонецЦикла;
	
	ТаблицаНоменклатуры.Свернуть("Номенклатура, Характеристика, Серия, ЕдиницаИзмерения", "Количество");
	ТаблицаНоменклатуры.Сортировать("Номенклатура, Характеристика, Серия, ЕдиницаИзмерения");

	// Выведем таблицу номенклатуры в табличный документ.
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПокупныеИзделия";

	Макет = ПолучитьМакет("ПокупныеИзделия");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Покупные изделия";
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывод списка продукции
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПродукция");
	Для Каждого Строка Из ДеревоСпецификаций.Строки Цикл
		ОбластьМакета.Параметры.ТекстПродукция = "" + Строка.Номенклатура;
		ОбластьМакета.Параметры.Продукция = Строка.Номенклатура;
		ТабДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПродукция2");
	КонецЦикла;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("Шапка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Шапка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Шапка|Данные");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
										
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	
	Ном = 0;
	
	Для Каждого Строка Из ТаблицаНоменклатуры Цикл
		
		Ном = Ном + 1;
		
		ОбластьНомера.Параметры.НомерСтроки = Ном;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					ОбластьКодов.Параметры.Артикул = Строка.Номенклатура.Артикул;
				КонецЕсли;
			Иначе
				ОбластьКодов.Параметры.Артикул = Строка.Номенклатура.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ОбластьДанных.Параметры.Заполнить(Строка);
		ОбластьДанных.Параметры.НоменклатураНаименование = Строка(Строка.Номенклатура) + ФормированиеПечатныхФорм.ПредставлениеСерий(Строка);
		ТабДокумент.Присоединить(ОбластьДанных);
		
	КонецЦикла;
		
	// Вывести подвал
	ОбластьНомера = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Подвал|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);
			
	// Зададим параметры макета.
	ТабДокумент.ОбластьПечати = ТабДокумент.Область(2,2,ТабДокумент.ВысотаТаблицы, ТабДокумент.ШиринаТаблицы);
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Покупные изделия");
	
КонецПроцедуры // ПечатьПокупныеИзделия()

// Процедура производит вывод на печать список полуфабрикатов.
//
Процедура ПечатьПолуфабрикаты(ДеревоСпецификаций, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Подготовим таблицу номенклатуры.
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура");
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика");
	ТаблицаНоменклатуры.Колонки.Добавить("Серия");
	ТаблицаНоменклатуры.Колонки.Добавить("Количество");
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаНоменклатуры.Колонки.Добавить("Спецификация");
	
	ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство;
	
	Для Каждого Строка Из ДеревоСпецификаций.Строки Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Номенклатура", 				Строка.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", 	Строка.ХарактеристикаНоменклатуры);
		
		МассивСтрок = Строка.ОсновнаяСпецификация.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0
		   И ФормироватьОтчетыНаЕдиницуПродукции
		Тогда
			СтрокаВыходногоИзделия = МассивСтрок[0];
			КоличествоВыходногоИзделия = СтрокаВыходногоИзделия.Количество * СтрокаВыходногоИзделия.ЕдиницаИзмерения.Коэффициент;
			Количество = 1 / ?(КоличествоВыходногоИзделия = 0, 1, КоличествоВыходногоИзделия);
		Иначе
			Количество = 1;
		КонецЕсли;
		
		ДобавитьСтрокуТаблицыНоменклатуры(ТаблицаНоменклатуры, Строка, ВидВоспроизводства, Количество);
		
	КонецЦикла;
	
	ТаблицаНоменклатуры.Свернуть("Номенклатура, Характеристика, Серия, ЕдиницаИзмерения, Спецификация", "Количество");
	ТаблицаНоменклатуры.Сортировать("Номенклатура, Характеристика, Серия, ЕдиницаИзмерения, Спецификация");

	// Выведем таблицу номенклатуры в табличный документ.
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Полуфабрикаты";

	Макет = ПолучитьМакет("Полуфабрикаты");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Полуфабрикаты";
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывод списка продукции
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПродукция");
	Для Каждого Строка Из ДеревоСпецификаций.Строки Цикл
		ОбластьМакета.Параметры.ТекстПродукция = "" + Строка.Номенклатура;
		ОбластьМакета.Параметры.Продукция = Строка.Номенклатура;
		ТабДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПродукция2");
	КонецЦикла;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("Шапка" + ?(ВыводитьКоды, "", "БезКода"));
	Если ВыводитьКоды Тогда
		Область.Параметры.ИмяКолонкиКодов = Колонка;
	КонецЕсли;
	ТабДокумент.Вывести(Область);
	
	Ном = 0;
	Область = Макет.ПолучитьОбласть("Строка" + ?(ВыводитьКоды, "", "БезКода"));
	Для Каждого Строка Из ТаблицаНоменклатуры Цикл
		
		Ном = Ном + 1;
		
		Область.Параметры.НомерСтроки = Ном;

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					Область.Параметры.Артикул = Строка.Номенклатура.Артикул;
				КонецЕсли;
			Иначе
				Область.Параметры.Артикул = Строка.Номенклатура.Код;
			КонецЕсли;
		КонецЕсли;
		
		Область.Параметры.Заполнить(Строка);
		Область.Параметры.НоменклатураНаименование = Строка(Строка.Номенклатура) + ФормированиеПечатныхФорм.ПредставлениеСерий(Строка);
		
		ТабДокумент.Вывести(Область);
		
	КонецЦикла;
		
	// Вывести подвал
	Область = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Область);
	
	// Вывести подписи
	Область = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(Область);
			
	// Зададим параметры макета.
	ТабДокумент.ОбластьПечати = ТабДокумент.Область(2,2,ТабДокумент.ВысотаТаблицы, ТабДокумент.ШиринаТаблицы);
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Полуфабрикаты");
	
КонецПроцедуры // ПечатьПолуфабрикаты()

#КонецЕсли

// Процедура заполняет список номеров операций.
//
Процедура ЗаполнитьСписокНомеровОперацийМаршрута(Элемент, Спецификация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Спецификация) Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.СписокВыбора.Очистить();
	
	ТехнологическиеКарты = РегистрыСведений.ТехнологическиеКартыСпецификацийПланирования.СрезПоследних(ТекущаяДата(), Новый Структура("Спецификация", Спецификация));
	Если ТехнологическиеКарты.Количество() Тогда
		ТехнологическаяКарта = ТехнологическиеКарты[ТехнологическиеКарты.Количество() - 1].ТехнологическаяКарта;
		Если НЕ ТехнологическаяКарта.Пустая() Тогда
			Для каждого Операция из ТехнологическаяКарта.Маршрут Цикл
				Если ЗначениеЗаполнено(Операция.НомерОперации) Тогда
					Элемент.СписокВыбора.Добавить(Операция.НомерОперации, Операция.НомерОперации);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокНомеровОперацийМаршрута()

// Производит заполнение спецификации по умолчанию для указанной номенклатуры.
//
Процедура ЗаписатьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатура, Спецификация, СтандартнаяОбработка = Истина, ДатаУстановки = Неопределено) Экспорт
	
	Если ДатаУстановки = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ДатаУстановки) Тогда
		#Если Клиент Тогда
			Период = ?(НЕ ЗначениеЗаполнено(Дата), РабочаяДата, Дата);
		#Иначе
			Период = ?(НЕ ЗначениеЗаполнено(Дата), ТекущаяДата(), Дата);
		#КонецЕсли
	Иначе
		Период = ДатаУстановки;
	КонецЕсли;
	
	Если ЗапрашиватьПодтверждениеПриСменеСпецификации Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Установить для """ + Номенклатура + ?(НЕ ЗначениеЗаполнено(ХарактеристикаНоменклатура),"", ", " + ХарактеристикаНоменклатура) +
					   """ основную спецификацию """ + Спецификация + """ на дату " + Период + " ?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
	НоваяЗапись = РегистрыСведений.ОсновныеСпецификацииНоменклатуры.СоздатьМенеджерЗаписи();
	НоваяЗапись.Период = Период;
	НоваяЗапись.Номенклатура = Номенклатура;
	НоваяЗапись.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатура;
	НоваяЗапись.СпецификацияНоменклатуры = Спецификация;
	НоваяЗапись.Записать(Истина);
	
КонецПроцедуры // ЗаписатьСпецификациюПоУмолчанию()

// Процедура открывает на редактирование форму строки спецификации и
// заполняет реквизиты данными строки.
//
Процедура ОткрытьСтрокуИсходныхКомплектующих(ЭлементыФормы, СтрокаДереваЗначений, НоваяСтрока, Отказ)
	
	НомерСтрокиСпецификации = СтрокаДереваЗначений.НомерСтрокиСпецификации;
	
	Попытка
		Строка = СпецификацияОбъект.ИсходныеКомплектующие.Получить(НомерСтрокиСпецификации - 1);
	Исключение
		ОбщегоНазначения.Сообщение("Не удалось получить строку № " + НомерСтрокиСпецификации + " исходных комплектующих спецификации: " + СпецификацияОбъект);
		Возврат;
	КонецПопытки;
	
	мСтрокаТабличнойЧасти = Строка;
	
	ФормаСтроки = ПолучитьФорму("СтрокаИсходныхКомплектующих");
	
	ФормаСтроки.ВидНорматива 			  	= Строка.ВидНорматива;
	ФормаСтроки.Номенклатура 			  	= Строка.Номенклатура;
	ФормаСтроки.ХарактеристикаНоменклатуры 	= Строка.ХарактеристикаНоменклатуры;
	ФормаСтроки.Количество 		  			= Строка.Количество;
	ФормаСтроки.ЕдиницаИзмерения 		  	= Строка.ЕдиницаИзмерения;
	ФормаСтроки.СтатьяЗатрат	 		  	= Строка.СтатьяЗатрат;
	
	ФормаСтроки.Спецификация				= Строка.Спецификация;
	ФормаСтроки.ВидВоспроизводства			= Строка.ВидВоспроизводства;
	ФормаСтроки.СписаниеКомплектующей		= Строка.СписаниеКомплектующей;
	ФормаСтроки.СвойствоДляСписания			= Строка.СвойствоДляСписания;
	ФормаСтроки.УказаниеНорматива			= Строка.УказаниеНорматива;
	ФормаСтроки.Формула						= Строка.Формула;
		
	ФормаСтроки.НомерОперацииМаршрута		= Строка.НомерОперацииМаршрута;
	ФормаСтроки.МинимальнаяПартия 			= Строка.МинимальнаяПартия;
	ФормаСтроки.ПозицияПоСпецификации 		= Строка.ПозицияПоСпецификации;
	
	СохранитьИзменения = ФормаСтроки.ОткрытьМодально();
	
	Если ТипЗнч(СохранитьИзменения) = Тип("Булево") И СохранитьИзменения Тогда
		
		Строка.ВидНорматива 			  	= ФормаСтроки.ВидНорматива;
		Строка.Номенклатура 			  	= ФормаСтроки.Номенклатура;
		Строка.ХарактеристикаНоменклатуры 	= ФормаСтроки.ХарактеристикаНоменклатуры;
		Строка.Количество 		  			= ФормаСтроки.Количество;
		Строка.ЕдиницаИзмерения 		  	= ФормаСтроки.ЕдиницаИзмерения;
		Строка.СтатьяЗатрат	 		  		= ФормаСтроки.СтатьяЗатрат;
		
		Строка.НомерОперацииМаршрута		= ФормаСтроки.НомерОперацииМаршрута;
		Строка.МинимальнаяПартия			= ФормаСтроки.МинимальнаяПартия;
		Строка.ПозицияПоСпецификации 		= ФормаСтроки.ПозицияПоСпецификации;
		
		Строка.Спецификация					= ФормаСтроки.Спецификация;
		Строка.ВидВоспроизводства			= ФормаСтроки.ВидВоспроизводства;
		Строка.СписаниеКомплектующей		= ФормаСтроки.СписаниеКомплектующей;
		Строка.СвойствоДляСписания			= ФормаСтроки.СвойствоДляСписания;
		Строка.УказаниеНорматива			= ФормаСтроки.УказаниеНорматива;
		Строка.Формула						= ФормаСтроки.Формула;
		
		СпецификацияОбъект.Записать();
		
		Если ФормаСтроки.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Номенклатура
		 ИЛИ ФормаСтроки.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры
		 ИЛИ ФормаСтроки.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборХарактеристики Тогда
			СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура;
		ИначеЕсли ФормаСтроки.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Узел Тогда
			СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Узел;
		Иначе
			СтрокаДереваЗначений.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура;
		КонецЕсли;
			
		СтрокаДереваЗначений.ВидНорматива 			  	= ФормаСтроки.ВидНорматива;
		СтрокаДереваЗначений.Номенклатура 			  	= ФормаСтроки.Номенклатура;
		СтрокаДереваЗначений.ХарактеристикаНоменклатуры = ФормаСтроки.ХарактеристикаНоменклатуры;
		СтрокаДереваЗначений.Количество 		  		= ФормаСтроки.Количество;
		СтрокаДереваЗначений.ЕдиницаИзмерения 		  	= ФормаСтроки.ЕдиницаИзмерения;
		СтрокаДереваЗначений.ОсновнаяСпецификация 		= ФормаСтроки.Спецификация;
		СтрокаДереваЗначений.СтатьяЗатрат	 		  	= ФормаСтроки.СтатьяЗатрат;
		СтрокаДереваЗначений.ВидВоспроизводства			= ФормаСтроки.ВидВоспроизводства;
		
		Если ФормаСтроки.ВидНорматива <> Перечисления.ВидыНормативовНоменклатуры.Узел
		   И ТипЗнч(ФормаСтроки.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			СтрокаДереваЗначений.ВидНоменклатуры   		= Строка.Номенклатура.ВидНоменклатуры;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДереваЗначений.ОсновнаяСпецификация) Тогда
			СпецификацияНоменклатуры = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(
				СтрокаДереваЗначений.Номенклатура, 
				СтрокаДереваЗначений.ХарактеристикаНоменклатуры,
				Дата
			);
			Если ЗначениеЗаполнено(СпецификацияНоменклатуры) Тогда
				СтрокаДереваЗначений.ОсновнаяСпецификация = СпецификацияНоменклатуры;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НоваяСтрока Тогда
		
		СпецификацияОбъект.ИсходныеКомплектующие.Удалить(НомерСтрокиСпецификации - 1);
		СпецификацияОбъект.Записать();
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьСтрокуИсходныхКомплектующих()

// Процедура открывает на редактирование форму строки спецификации и
// заполняет реквизиты данными строки.
//
Процедура ОткрытьСтрокуВыходногоИзделия(ЭлементыФормы, СтрокаДереваЗначений, НоваяСтрока, Отказ)
	
	НомерСтрокиСпецификации = СтрокаДереваЗначений.НомерСтрокиСпецификации;
	
	Попытка
		Строка = СпецификацияОбъект.ВыходныеИзделия.Получить(НомерСтрокиСпецификации - 1);
	Исключение
		ОбщегоНазначения.Сообщение("Не удалось получить строку № " + НомерСтрокиСпецификации + " выходных изделий спецификации: " + СпецификацияОбъект);
		Возврат;
	КонецПопытки;
	
	ФормаСтроки = ПолучитьФорму("СтрокаВыходныхИзделий");
	
	ФормаСтроки.НомерОперацииМаршрута		= Строка.НомерОперацииМаршрута;
	ФормаСтроки.Номенклатура 			  	= Строка.Номенклатура;
	ФормаСтроки.ХарактеристикаНоменклатуры 	= Строка.ХарактеристикаНоменклатуры;
	ФормаСтроки.Количество 		  			= Строка.Количество;
	ФормаСтроки.ЕдиницаИзмерения 		  	= Строка.ЕдиницаИзмерения;
	ФормаСтроки.ДоляСтоимости	 		  	= Строка.ДоляСтоимости;
	
	СохранитьИзменения = ФормаСтроки.ОткрытьМодально();
	
	Если ТипЗнч(СохранитьИзменения) = Тип("Булево") И СохранитьИзменения Тогда
		
		Строка.НомерОперацииМаршрута		= ФормаСтроки.НомерОперацииМаршрута;
		Строка.Номенклатура 			  	= ФормаСтроки.Номенклатура;
		Строка.ХарактеристикаНоменклатуры 	= ФормаСтроки.ХарактеристикаНоменклатуры;
		Строка.Количество 		  			= ФормаСтроки.Количество;
		Строка.ЕдиницаИзмерения 		  	= ФормаСтроки.ЕдиницаИзмерения;
		Строка.ДоляСтоимости	 		  	= ФормаСтроки.ДоляСтоимости;
		СпецификацияОбъект.Записать();
		
		СтрокаДереваЗначений.Номенклатура 			  	= ФормаСтроки.Номенклатура;
		СтрокаДереваЗначений.ХарактеристикаНоменклатуры = ФормаСтроки.ХарактеристикаНоменклатуры;
		СтрокаДереваЗначений.ВидНоменклатуры   			= ФормаСтроки.Номенклатура.ВидНоменклатуры;
		СтрокаДереваЗначений.Количество 		  		= ФормаСтроки.Количество;
		СтрокаДереваЗначений.ЕдиницаИзмерения 		  	= ФормаСтроки.ЕдиницаИзмерения;
		
	ИначеЕсли НоваяСтрока Тогда
		
		СпецификацияОбъект.ВыходныеИзделия.Удалить(НомерСтрокиСпецификации - 1);
		СпецификацияОбъект.Записать();
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьСтрокуВыходногоИзделия()

// Процедура открывает на редактирование форму строки спецификации и
// заполняет реквизиты данными строки.
//
Процедура ОткрытьСтрокуВозвратногоОтхода(ЭлементыФормы, СтрокаДереваЗначений, НоваяСтрока, Отказ)
	
	НомерСтрокиСпецификации = СтрокаДереваЗначений.НомерСтрокиСпецификации;
	
	Попытка
		Строка = СпецификацияОбъект.ВозвратныеОтходы.Получить(НомерСтрокиСпецификации - 1);
	Исключение
		ОбщегоНазначения.Сообщение("Не удалось получить строку № " + НомерСтрокиСпецификации + " возвратных отходов спецификации: " + СпецификацияОбъект);
		Возврат;
	КонецПопытки;
	
	ФормаСтроки = ПолучитьФорму("СтрокаВозвратныхОтходов");
	
	ФормаСтроки.НомерОперацииМаршрута		= Строка.НомерОперацииМаршрута;
	ФормаСтроки.ВидНорматива 			  	= Строка.ВидНорматива;
	ФормаСтроки.Номенклатура 			  	= Строка.Номенклатура;
	ФормаСтроки.ХарактеристикаНоменклатуры 	= Строка.ХарактеристикаНоменклатуры;
	ФормаСтроки.Количество 		  			= Строка.Количество;
	ФормаСтроки.ЕдиницаИзмерения 		  	= Строка.ЕдиницаИзмерения;
	ФормаСтроки.СтатьяЗатрат	 		  	= Строка.СтатьяЗатрат;
	ФормаСтроки.Сумма	 		  			= Строка.Сумма;
	ФормаСтроки.СуммаРегл	 		  		= Строка.СуммаРегл;
	
	ФормаСтроки.СписаниеКомплектующей		= Строка.СписаниеКомплектующей;
	ФормаСтроки.СвойствоДляСписания			= Строка.СвойствоДляСписания;
	ФормаСтроки.УказаниеНорматива			= Строка.УказаниеНорматива;
	ФормаСтроки.Формула						= Строка.Формула;
	
	СохранитьИзменения = ФормаСтроки.ОткрытьМодально();
	
	Если ТипЗнч(СохранитьИзменения) = Тип("Булево") И СохранитьИзменения Тогда
		
		Строка.НомерОперацииМаршрута		= ФормаСтроки.НомерОперацииМаршрута;
		Строка.ВидНорматива 			  	= ФормаСтроки.ВидНорматива;
		Строка.Номенклатура 			  	= ФормаСтроки.Номенклатура;
		Строка.ХарактеристикаНоменклатуры 	= ФормаСтроки.ХарактеристикаНоменклатуры;
		Строка.Количество 		  			= ФормаСтроки.Количество;
		Строка.ЕдиницаИзмерения 		  	= ФормаСтроки.ЕдиницаИзмерения;
		Строка.СтатьяЗатрат	 		  		= ФормаСтроки.СтатьяЗатрат;
		Строка.Сумма	 		  			= ФормаСтроки.Сумма;
		Строка.СуммаРегл	 		  		= ФормаСтроки.СуммаРегл;
		
		Строка.СписаниеКомплектующей		= ФормаСтроки.СписаниеКомплектующей;
		Строка.СвойствоДляСписания			= ФормаСтроки.СвойствоДляСписания;
		Строка.УказаниеНорматива			= ФормаСтроки.УказаниеНорматива;
		Строка.Формула						= ФормаСтроки.Формула;
		
		СпецификацияОбъект.Записать();
		
		СтрокаДереваЗначений.Номенклатура 			  	= ФормаСтроки.Номенклатура;
		СтрокаДереваЗначений.ХарактеристикаНоменклатуры = ФормаСтроки.ХарактеристикаНоменклатуры;
		СтрокаДереваЗначений.ВидНоменклатуры   			= ФормаСтроки.Номенклатура.ВидНоменклатуры;
		СтрокаДереваЗначений.Количество 		  		= ФормаСтроки.Количество;
		СтрокаДереваЗначений.ЕдиницаИзмерения 		  	= ФормаСтроки.ЕдиницаИзмерения;
		СтрокаДереваЗначений.СтатьяЗатрат	 		  	= ФормаСтроки.СтатьяЗатрат;
		
	ИначеЕсли НоваяСтрока Тогда
		
		СпецификацияОбъект.ВозвратныеОтходы.Удалить(НомерСтрокиСпецификации - 1);
		СпецификацияОбъект.Записать();
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьСтрокуВозвратногоОтхода()

// Процедура открывает на редактирование форму строки спецификации и
// заполняет реквизиты данными строки.
//
Процедура ОткрытьСтрокуСпецификации(ЭлементыФормы, СтрокаДереваЗначений, НоваяСтрока = Ложь, Отказ = Ложь)Экспорт
	
	Если НЕ ЗначениеЗаполнено(СпецификацияОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ВидСтроки = СтрокаДереваЗначений.ВидСтроки;
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	Если ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура
	 ИЛИ ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Узел Тогда
		ОткрытьСтрокуИсходныхКомплектующих(ЭлементыФормы, СтрокаДереваЗначений, НоваяСтрока, Отказ);
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие Тогда
		ОткрытьСтрокуВыходногоИзделия(ЭлементыФормы, СтрокаДереваЗначений, НоваяСтрока, Отказ);
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВозвратныйОтход Тогда
		ОткрытьСтрокуВозвратногоОтхода(ЭлементыФормы, СтрокаДереваЗначений, НоваяСтрока, Отказ)
	КонецЕсли;
	
КонецПроцедуры // ОткрытьСтрокуСпецификации()

#Если Клиент Тогда

// Процедура производит заполнение начальных настроек построителя отчета.
//
Процедура ЗаполнитьНачальныеНастройки(КлючОтчета) Экспорт
	
	ОбщийОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	СтруктураПредставлениеПолей = Новый Структура;
	
	мСоответствиеНазначений = Новый Соответствие;
	
	МассивОтбора = Новый Массив;

	Текст = "
	|ВЫБРАТЬ
	|	Номенклатура										КАК Номенклатура,
	|	Номенклатура.ЕдиницаХраненияОстатков 				КАК НоменклатураЕдиницаХраненияОстатков,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление 	КАК НоменклатураЕдиницаХраненияОстатковПредставление,
	|	СУММА(Количество) 									КАК СуммаКоличество,
	|	СУММА(Количество*Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК КоличествоБазовыхЕд,
	|	СУММА(Количество*Номенклатура.ЕдиницаХраненияОстатков.Коэффициент/Номенклатура.ЕдиницаДляОтчетов.Коэффициент) КАК КоличествоЕдиницОтчетов
	|	//СВОЙСТВА
	|
	|{ВЫБРАТЬ
	|	Номенклатура.ВидВоспроизводства КАК ВидВоспроизводства,
	|	Номенклатура.ВидНоменклатуры.* 	КАК ВидНоменклатуры,
	|	Номенклатура.* 					КАК Номенклатура,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК НоменклатураБазоваяЕдиницаИзмерения,
	|	Номенклатура.ЕдиницаХраненияОстатков КАК НоменклатураЕдиницаХраненияОстатков,
	|	ХарактеристикаНоменклатуры.* 	КАК ХарактеристикаНоменклатуры,
	|	ОсновнаяСпецификация.* 			КАК ОсновнаяСпецификация,
	|	СтатьяЗатрат.* 					КАК СтатьяЗатрат,
	|	Спецификация.* 					КАК Спецификация,
	|	ВидНорматива.* 					КАК ВидНорматива,
	|	ТочкаМаршрута.* 				КАК ТочкаМаршрута,
	|	ВидВоспроизводства.* 			КАК ВидВоспроизводства,
	|	НомерОперацииМаршрута 			КАК НомерОперацииМаршрута,
	|	ВидСтроки 						КАК ВидСтроки
	|	//СВОЙСТВА
	|}
	|ИЗ
	|	РегистрСведений.ДеревоСпецификаций КАК ДеревоСпецификаций
	|
	|//СОЕДИНЕНИЯ
	|
	|ГДЕ
	|	Ключ = &Ключ
	|
	|{ГДЕ
	|	Номенклатура.ВидВоспроизводства КАК ВидВоспроизводства,
	|	Номенклатура.ВидНоменклатуры.* 	КАК ВидНоменклатуры,
	|	Номенклатура.* 					КАК Номенклатура,
	|	ХарактеристикаНоменклатуры.* 	КАК ХарактеристикаНоменклатуры,
	|	ОсновнаяСпецификация.* 			КАК ОсновнаяСпецификация,
	|	СтатьяЗатрат.* 					КАК СтатьяЗатрат,
	|	Спецификация.* 					КАК Спецификация,
	|	ВидНорматива.* 					КАК ВидНорматива,
	|	ТочкаМаршрута.* 				КАК ТочкаМаршрута,
	|	ВидВоспроизводства.* 			КАК ВидВоспроизводства,
	|	НомерОперацииМаршрута 			КАК НомерОперацииМаршрута,
	|	ВидСтроки 						КАК ВидСтроки
	|//СВОЙСТВА
	|//КАТЕГОРИИ
	|}
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|
	|{УПОРЯДОЧИТЬ ПО 
	|	Номенклатура.ВидВоспроизводства КАК ВидВоспроизводства,
	|	Номенклатура.ВидНоменклатуры.* 	КАК ВидНоменклатуры,
	|	Номенклатура.* 					КАК Номенклатура,
	|	ХарактеристикаНоменклатуры.* 	КАК ХарактеристикаНоменклатуры,
	|	ОсновнаяСпецификация.* 			КАК ОсновнаяСпецификация,
	|	СтатьяЗатрат.* 					КАК СтатьяЗатрат,
	|	Спецификация.* 					КАК Спецификация,
	|	ВидНорматива.* 					КАК ВидНорматива,
	|	ТочкаМаршрута.* 				КАК ТочкаМаршрута,
	|	ВидВоспроизводства.* 			КАК ВидВоспроизводства,
	|	НомерОперацииМаршрута 			КАК НомерОперацииМаршрута,
	|	ВидСтроки 						КАК ВидСтроки
	|//СВОЙСТВА_ОБЩИЕ
	|}
	|{ИТОГИ ПО
	|	Номенклатура.ВидВоспроизводства КАК ВидВоспроизводства,
	|	Номенклатура.ВидНоменклатуры.* 	КАК ВидНоменклатуры,
	|	Номенклатура.* 					КАК Номенклатура,
	|	ХарактеристикаНоменклатуры.* 	КАК ХарактеристикаНоменклатуры,
	|	ОсновнаяСпецификация.* 			КАК ОсновнаяСпецификация,
	|	СтатьяЗатрат.* 					КАК СтатьяЗатрат,
	|	Спецификация.* 					КАК Спецификация,
	|	ВидНорматива.* 					КАК ВидНорматива,
	|	ТочкаМаршрута.* 				КАК ТочкаМаршрута,
	|	ВидВоспроизводства.* 			КАК ВидВоспроизводства,
	|	НомерОперацииМаршрута 			КАК НомерОперацииМаршрута,
	|	ВидСтроки 						КАК ВидСтроки
	|	//СВОЙСТВА
	|}
	|ИТОГИ 
	|	СУММА(СуммаКоличество),
	|	СУММА(КоличествоБазовыхЕд),
	|	СУММА(КоличествоЕдиницОтчетов)
	|ПО ОБЩИЕ,
	|	Номенклатура ИЕРАРХИЯ
	|";
	
	ОбщийОтчет.ПостроительОтчета.Текст = Текст;
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	ПостроительОтчета.Параметры.Вставить("Ключ", КлючОтчета);
	
	// Соответствие имен полей в запросе и их представлений в отчете.
	СтруктураПредставлениеПолей = Новый Структура;
	СтруктураПредставлениеПолей.Вставить("ВидВоспроизводства",			"Вид воспроизводства");
	СтруктураПредставлениеПолей.Вставить("Номенклатура",				"Номенклатура");
	СтруктураПредставлениеПолей.Вставить("ХарактеристикаНоменклатуры",	"Характеристика номенклатуры");
	СтруктураПредставлениеПолей.Вставить("ВидНоменклатуры", 			"Вид номенклатуры");
	СтруктураПредставлениеПолей.Вставить("НоменклатурнаяГруппа", 		"Номенклатурная группа");
	СтруктураПредставлениеПолей.Вставить("ОсновнаяСпецификация", 		"Основная спецификация");
	СтруктураПредставлениеПолей.Вставить("СтатьяЗатрат", 				"Статья затрат");
	СтруктураПредставлениеПолей.Вставить("ВидНорматива",				"Вид норматива");
	СтруктураПредставлениеПолей.Вставить("ВидСтроки",					"Вид строки дерева");
	СтруктураПредставлениеПолей.Вставить("Спецификация", 				"Спецификация");
	СтруктураПредставлениеПолей.Вставить("ТочкаМаршрута",				"Точка маршрута");
	СтруктураПредставлениеПолей.Вставить("ВидВоспроизводства",			"Вид воспроизводства");
	СтруктураПредставлениеПолей.Вставить("НомерОперацииМаршрута",		"Номер операции маршрута");
	СтруктураПредставлениеПолей.Вставить("НоменклатураБазоваяЕдиницаИзмерения", "Базовая единица измерения");
	СтруктураПредставлениеПолей.Вставить("НоменклатураЕдиницаХраненияОстатков", "Единица хранения остатков");
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ОбщийОтчет.ПостроительОтчета);
	
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда
		ТекстПоляСвойств= "";
		ТекстПоляКатегорий = "";

		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "ХарактеристикаНоменклатуры";
		СтрокаТаблицы.Представление = "Характеристика номенклатуры";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
		
		УправлениеОтчетами.ДобавитьВТекстСВойстваОбщие(Текст, ТекстПоляСвойств, "//СВОЙСТВА_ОБЩИЕ");
		
		УправлениеОтчетами.ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, 
				мСоответствиеНазначений, ОбщийОтчет.ПостроительОтчета.Параметры
				,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,мСтруктураДляОтбораПоКатегориям);
				
	КонецЕсли;
		
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда

		УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ОбщийОтчет.ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, мСоответствиеНазначений, СтруктураПредставлениеПолей);

	КонецЕсли;
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("ВидВоспроизводства");
	МассивОтбора.Добавить("Номенклатура");
	МассивОтбора.Добавить("ВидНоменклатуры");
	
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ОбщийОтчет.ПостроительОтчета);
	
	УправлениеОтчетами.ОчиститьДополнительныеПоляПостроителя(ОбщийОтчет.ПостроительОтчета);
	
	ОбщийОтчет.ЗаполнитьПоказатели("СуммаКоличество", "Количество в единицах хранения остатков", Истина, "ЧЦ=15; ЧДЦ=3");
	ОбщийОтчет.ЗаполнитьПоказатели("КоличествоБазовыхЕд", "Количество в базовых единицах измерения", Ложь, "ЧЦ=15; ЧДЦ=3");
	ОбщийОтчет.ЗаполнитьПоказатели("КоличествоЕдиницОтчетов", "Количество в ед. отчетов", Ложь, "ЧЦ=15; ЧДЦ=3");
	
	ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
	ОбщийОтчет.НП = Новый НастройкаПериода;
	ОбщийОтчет.мСтруктураДляОтбораПоКатегориям = Новый Структура;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;

	ОбщийОтчет.мНазваниеОтчета = "Отчет по дереву спецификаций";
	ОбщийОтчет.мРежимВводаПериода = -1;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Процедура производит формирование отчета.
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь, ДеревоСпецификаций) Экспорт
	
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПроцедуры // СформироватьОтчет()

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройка");
	ФормаНастройки.ОтчетОбъект = ОбщийОтчет;
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок) Экспорт

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок);
	
КонецПроцедуры

#КонецЕсли

мВедениеПланированияПроизводстваПоСменам = Константы.ВедениеПланированияПроизводстваПоСменам.Получить();