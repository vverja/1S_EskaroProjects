
// КАЛЕНДАРЬ

Перем мСписокКлючейСтруктурыСобытий Экспорт;

// Список представлений отборов
Перем мСтруктураПредставленийОтборов Экспорт;

// Список отборов
Перем мСписокОтборов Экспорт;

// ПОЧТА

Перем мПоследняяДатаОбновленияРассмотренностиПисем Экспорт;

// Переменная содержит список доступных учетных для создания писем
Перем мДоступныеУчетныеЗаписи Экспорт;

// Переменная содержит структуру с данными о доступе пользователя к ученым записям
// и о предопределенных папках учетных записей
Перем мСтруктураДоступныхУчетныхЗаписей Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Входящие" для учетной записи
Перем мСоответствияГруппВходящие Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Исходящие" для учетной записи
Перем мСоответствияГруппИсходящие Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Удаленные" для учетной записи
Перем мСоответствияГруппУдаленные Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Черновики" для учетной записи
Перем мСоответствияГруппЧерновики Экспорт;

// Переменная содержит соответствие группы писем электронной почты
// и количества нерассмотренных писем в этой группе
Перем мСтатистикаРассмотренностиПисем Экспорт;

// Переменная содержит соответствие группы писем электронной почты
// и количества сохраненных писем в этой группе
Перем мСтатистикаСохраненныхПисем     Экспорт;

// Переменная содержит соответствие предмета классификации писем
// и количества нерассмотренных писем данного предмета
Перем мСтатистикаРассмотренностиПисемПоПредметам Экспорт;

// Признак отображения списка предметов электронных писем в форме
Перем мОтображатьСписокПредметов Экспорт;

// Признак отображение рассмотренности писем только по текущему пользователю
Перем мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю Экспорт;

// Переменные, используемые при создании физлица по переписке
Перем Фамилия;
Перем Имя;
Перем Отчество;
Перем ДатаРождения;
Перем ИНН;
Перем СерияДокумента;
Перем ВидДокументаУдостоверяющегоЛичность;
Перем НомерДокумента;
Перем ДатаВыдачиДокумента;
Перем КемВыданДокумент;
Перем КодПодразделенияДокумента;
Перем Гражданство;
Перем СемейноеПоложение;
Перем ОтношениеКВоинскойОбязанности;
Перем ОтношениеКВоинскомуУчету;
Перем Годность;
Перем Звание;
Перем НаличиеМобпредписания;
Перем Военкомат;
Перем ВУС;
Перем КатегорияЗапаса;
Перем Состав;
Перем НомерКомандыПартии;
Перем СоответствиеНачалоИОкончаниеРабочегоДняПользователя;

// КАЛЕНДАРЬ

// Функция формирует часть текста запроса по заказам покупателей
// для режимов День, Неделя и Месяц
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьТекстЗапроса_ЗаказыПокупателей()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя                КАК Документ,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки   КАК Дата,
	|	&ЗаказПокупателяОтгрузка                                КАК ТипЗаказа,
	|	&ПустаяДата                                             КАК ДатаНачалаСобытия,
	|	&ПустаяДата                                             КАК ДатаКонцаСобытия,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент     КАК Контрагент,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.КонтактноеЛицоКонтрагента КАК КонтактноеЛицо
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ТекущаяДата, ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
	|	
	|ГДЕ
	|	ЗаказыПокупателейОстатки.КоличествоОстаток <> 0
	|	И
	|	(ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки <= &ДатаКон","") + ")
	|	И
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Ответственный $ВидСравненияПользователь$
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка                КАК Документ,
	|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты     КАК Дата,
	|	&ЗаказПокупателяОплата                             КАК ТипЗаказа,
	|	&ПустаяДата                                        КАК ДатаНачалаСобытия,
	|	&ПустаяДата                                        КАК ДатаКонцаСобытия,
	|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент     КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.Сделка.КонтактноеЛицоКонтрагента КАК КонтактноеЛицо
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата, Сделка ССЫЛКА Документ.ЗаказПокупателя) КАК РасчетыСКонтрагентамиОстатки
	|	
	|ГДЕ
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <> 0
	|	И
	|	(РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты <= &ДатаКон","") + ")
	|	И
	|	РасчетыСКонтрагентамиОстатки.Сделка.Ответственный $ВидСравненияПользователь$
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует часть текста запроса по заказам поставщикам
// для режимов День, Неделя и Месяц
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьТекстЗапроса_ЗаказыПоставщикам()

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                 КАК Документ,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления КАК Дата,
	|	&ЗаказПоставщикуПоступление                              КАК ТипЗаказа,
	|	&ПустаяДата                                              КАК ДатаНачалаСобытия,
	|	&ПустаяДата                                              КАК ДатаКонцаСобытия,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент      КАК Контрагент,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КонтактноеЛицоКонтрагента  КАК КонтактноеЛицо
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ТекущаяДата, ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику) КАК ЗаказыПоставщикамОстатки
	|ГДЕ
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток <> 0
	|	И
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Ответственный $ВидСравненияПользователь$
	|	И
	|	(ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления <= &ДатаКон","") + ")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка                КАК Документ,
	|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты     КАК Дата,
	|	&ЗаказПоставщикуОплата                             КАК ТипЗаказа,
	|	&ПустаяДата                                        КАК ДатаНачалаСобытия,
	|	&ПустаяДата                                        КАК ДатаКонцаСобытия,
	|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент     КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.Сделка.КонтактноеЛицоКонтрагента КАК КонтактноеЛицо
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата, Сделка ССЫЛКА Документ.ЗаказПоставщику) КАК РасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <> 0
	|	И
	|	РасчетыСКонтрагентамиОстатки.Сделка.Ответственный $ВидСравненияПользователь$
	|	И
	|	(РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты <= &ДатаКон","") + ")
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

// Функция формирует часть текста запроса по заказам поставщикам и заказам покупателей
// для режимов День, Неделя и Месяц
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьТекстЗапроса_ЗаказыВсе()

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя                КАК Документ,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки   КАК Дата,
	|	&ЗаказПокупателяОтгрузка                                КАК ТипЗаказа,
	|	&ПустаяДата                                             КАК ДатаНачалаСобытия,
	|	&ПустаяДата                                             КАК ДатаКонцаСобытия,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент     КАК Контрагент,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.КонтактноеЛицоКонтрагента КАК КонтактноеЛицо
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ТекущаяДата, ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
	|ГДЕ
	|	ЗаказыПокупателейОстатки.КоличествоОстаток <> 0
	|	И
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Ответственный $ВидСравненияПользователь$
	|	И
	|	(ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки <= &ДатаКон","") + ")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка                КАК Документ,
	|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты     КАК Дата,
	|	&ЗаказПокупателяОплата                             КАК ТипЗаказа,
	|	&ПустаяДата                                        КАК ДатаНачалаСобытия,
	|	&ПустаяДата                                        КАК ДатаКонцаСобытия,
	|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент     КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.Сделка.КонтактноеЛицоКонтрагента КАК КонтактноеЛицо
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата, Сделка ССЫЛКА Документ.ЗаказПокупателя) КАК РасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	РасчетыСКонтрагентамиОстатки.Сделка.Ответственный $ВидСравненияПользователь$
	|	И
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <> 0
	|	И
	|	(РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты <= &ДатаКон","") + ")
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                 КАК Документ,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления КАК Дата,
	|	&ЗаказПоставщикуПоступление                              КАК ТипЗаказа,
	|	&ПустаяДата                                              КАК ДатаНачалаСобытия,
	|	&ПустаяДата                                              КАК ДатаКонцаСобытия,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент      КАК Контрагент,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КонтактноеЛицоКонтрагента  КАК КонтактноеЛицо
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ТекущаяДата, ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику) КАК ЗаказыПоставщикамОстатки
	|ГДЕ
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток <> 0
	|	И
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Ответственный $ВидСравненияПользователь$
	|	И
	|	(ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления <= &ДатаКон","") + ")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка                КАК Документ,
	|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты     КАК Дата,
	|	&ЗаказПоставщикуОплата                             КАК ТипЗаказа,
	|	&ПустаяДата                                        КАК ДатаНачалаСобытия,
	|	&ПустаяДата                                        КАК ДатаКонцаСобытия,
	|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент     КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.Сделка.КонтактноеЛицоКонтрагента КАК КонтактноеЛицо
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата, Сделка ССЫЛКА Документ.ЗаказПоставщику) КАК РасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <> 0
	|	И
	|	РасчетыСКонтрагентамиОстатки.Сделка.Ответственный $ВидСравненияПользователь$
	|	И
	|	(РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты <= &ДатаКон","") + ")
	|
	|";

	Возврат ТекстЗапроса;

КонецФункции

// Функция возвращает Строку Вида отбора для запроса
// 
// Параметры
// ВидОтбора - ВидОтбора
// ЗначениеОтбора - Значение отбора запроса
// 
// Возвращаемое значение 
//  Строка для запроса
Функция ВозвратитьСтрокуВидаОтбора(ВидОтбора, ЗначениеОтбора)

	Перем ВидСравненияПользователь;
	ВидСравненияПользователь = "";
	Если ВидОтбора = ВидСравнения.Равно Тогда
		ВидСравненияПользователь = " = " + ЗначениеОтбора + " ";
	ИначеЕсли ВидОтбора = ВидСравнения.ВСписке Тогда
		ВидСравненияПользователь = " В (" + ЗначениеОтбора + ") ";
	ИначеЕсли ВидОтбора = ВидСравнения.НеРавно Тогда
		ВидСравненияПользователь = " <> " + ЗначениеОтбора + " ";
	ИначеЕсли ВидОтбора = ВидСравнения.НеВСписке Тогда
		ВидСравненияПользователь = " НЕ В (" + ЗначениеОтбора + ") ";
	ИначеЕсли ВидОтбора = ВидСравнения.ВСпискеПоИерархии
		ИЛИ ВидОтбора = ВидСравнения.ВИерархии Тогда
		ВидСравненияПользователь = " В ИЕРАРХИИ (" + ЗначениеОтбора + ") ";
	ИначеЕсли ВидОтбора = ВидСравнения.НеВСпискеПоИерархии
		ИЛИ ВидОтбора = ВидСравнения.НеВИерархии Тогда
		ВидСравненияПользователь = " НЕ В ИЕРАРХИИ (" + ЗначениеОтбора + ") ";
	Иначе
		ВидСравненияПользователь = " В (" + ЗначениеОтбора + ") ";
	КонецЕсли;
	возврат ВидСравненияПользователь;

КонецФункции // ВозвратитьСтрокуВидаОтбора()

// Процедура заполняет табличную часть обработки ЗаказыСобытия.
// 
// Параметры
//  НЕТ
// 
// Возвращаемое значение 
//  НЕТ
Процедура ЗаполнитьСобытия(ОтображатьЗаказы, ОтображаемыеЗаказы, ОтображатьЗапланированныеСобытия = Ложь) Экспорт
	
	Перем Отбор, ВидСравненияПользователь;
	
	МассивТекстовЗапросов = Новый Массив;
	
	# Если Клиент Тогда
	Состояние("Выполняется заполнение событий списка ...");
	# КонецЕсли

	ОтборКонтрагент     = СтруктураОтборов.Получить("Контрагент");
	ОтборПользователь   = СтруктураОтборов.Получить("Пользователь");
	ОтборКонтактноеЛицо = СтруктураОтборов.Получить("КонтактноеЛицо");
	ОтборПользователь   = СтруктураОтборов.Получить("Пользователь");
	ВидСравненияПользователь = ВозвратитьСтрокуВидаОтбора(ОтборПользователь[0],"&ПользовательКалендаря");
	Если ОтображатьЗаказы Тогда
		Если ОтображаемыеЗаказы = 1 Тогда // Заказы покупателей
			
			СтруктураЗапроса = Новый Структура;
			СтруктураПараметров = Новый Структура;
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасчетыСКонтрагентамиОстатки.Сделка                         КАК Документ,
			|	&ВидЗаказПокупателяОплата                                   КАК ВидОперации,
			|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток     КАК Законченность,
			|	ВЫБОР КОГДА
			|		((ОтгрузкиПоЗаказам.ЗаказПокупателя ЕСТЬ NULL) И (ЗаказыПокупателейОстатки.КоличествоОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ                                                       КАК ВыполненностьВторойЧастиЗаказа,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ВалютаДокумента         КАК ВалютаДокумента,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КурсВзаиморасчетов      КАК КурсВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СуммаДокумента          КАК СуммаДокумента,
			|	NULL                                                        КАК СостояниеСобытия,
			|	NULL                                                        КАК Важность,
			|	NULL                                                        КАК ТипСобытия,
			|	NULL                                                        КАК ОписаниеСобытия,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент              КАК Контрагент,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Дата                    КАК Дата,
			|	NULL                                                        КАК НачалоСобытия,
			|	""Заказ покупателя""                                        КАК ПредставлениеДокумента,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Номер                   КАК Номер,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОтгрузки            КАК ДатаПоступленияОтгрузки,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты              КАК ДатаОплаты,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СкладГруппа             КАК Склад,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СтруктурнаяЕдиница      КАК СтруктурнаяЕдиница,
			|	СУММА(ВЫБОР КОГДА ДокументЗаказПокупателяТовары.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПокупателяТовары.Количество КОНЕЦ
			|	    + ВЫБОР КОГДА ДокументЗаказПокупателяВозвратнаяТара.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПокупателяВозвратнаяТара.Количество КОНЕЦ) КАК ИтогКоличествоТЧ
			|ИЗ
			|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата, Сделка ССЫЛКА Документ.ЗаказПокупателя) КАК РасчетыСКонтрагентамиОстатки
			|	
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ТекущаяДата) КАК ЗаказыПокупателейОстатки
			|ПО
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПокупателя.Товары КАК ДокументЗаказПокупателяТовары
			|ПО
			|	ДокументЗаказПокупателяТовары.Ссылка = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПокупателя.ВозвратнаяТара КАК ДокументЗаказПокупателяВозвратнаяТара
			|ПО
			|	ДокументЗаказПокупателяВозвратнаяТара.Ссылка = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(
			|	ВЫБРАТЬ ПЕРВЫЕ 1
			|		ЗаказыПокупателейОбороты.ЗаказПокупателя КАК ЗаказПокупателя
			|	ИЗ
			|		РегистрНакопления.ЗаказыПокупателей.Обороты КАК ЗаказыПокупателейОбороты
			|	ГДЕ
			|		ЗаказыПокупателейОбороты.КоличествоРасход > 0
			|	) КАК ОтгрузкиПоЗаказам
			|ПО
			|	ОтгрузкиПоЗаказам.ЗаказПокупателя = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ГДЕ 
			|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <> 0
			|	И
			|	(РасчетыСКонтрагентамиОстатки.Сделка.Дата >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И РасчетыСКонтрагентамиОстатки.Сделка.Дата <= &ДатаКон","") + ")
			|	И
			|	РасчетыСКонтрагентамиОстатки.Сделка.Ответственный " + ВидСравненияПользователь;

			Если ОтборКонтрагент <> Неопределено Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|	И
				|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
				|";
				
				СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
				
			КонецЕсли;

			ТекстЗапроса = ТекстЗапроса + "
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСКонтрагентамиОстатки.Сделка,
			|	&ВидЗаказПокупателяОплата,
			|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,
			|	(ВЫБОР КОГДА
			|		((ОтгрузкиПоЗаказам.ЗаказПокупателя ЕСТЬ NULL) И (ЗаказыПокупателейОстатки.КоличествоОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ),
			|	РасчетыСКонтрагентамиОстатки.Сделка.ВалютаДокумента,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КурсВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КратностьВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СуммаДокумента,
			|	NULL,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Дата,
			|	""Заказ покупателя"",
			|	РасчетыСКонтрагентамиОстатки.Сделка.Номер,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОтгрузки,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СкладГруппа,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СтруктурнаяЕдиница
			|";
			
			СтруктураЗапроса.Вставить("ТекстЗапроса", ТекстЗапроса);
			СтруктураЗапроса.Вставить("ПараметрыЗапроса", СтруктураПараметров);
			МассивТекстовЗапросов.Добавить(СтруктураЗапроса);
			
			СтруктураЗапроса = Новый Структура;
			СтруктураПараметров = Новый Структура;
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя                         КАК Документ,
			|	&ВидЗаказПокупателяОтгрузка                                      КАК ВидОперации,
			|	ЗаказыПокупателейОстатки.КоличествоОстаток                       КАК Законченность,
			|	ВЫБОР КОГДА
			|		((ПлатежиПоСделкам.ОжидаемыйПлатеж ЕСТЬ NULL) И (РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ                                                            КАК ВыполненностьВторойЧастиЗаказа,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ВалютаДокумента         КАК ВалютаДокумента,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.КурсВзаиморасчетов      КАК КурсВзаиморасчетов,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СуммаДокумента          КАК СуммаДокумента,
			|	NULL                                                             КАК СостояниеСобытия,
			|	NULL                                                             КАК Важность,
			|	NULL                                                             КАК ТипСобытия,
			|	NULL                                                             КАК ОписаниеСобытия,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент              КАК Контрагент,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата                    КАК Дата,
			|	NULL                                                             КАК НачалоСобытия,
			|	""Заказ покупателя""                                             КАК ПредставлениеДокумента,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Номер                   КАК Номер,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки            КАК ДатаПоступленияОтгрузки,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОплаты              КАК ДатаОплаты,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СкладГруппа             КАК Склад,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СтруктурнаяЕдиница      КАК СтруктурнаяЕдиница,
			|	СУММА(ВЫБОР КОГДА ДокументЗаказПокупателяТовары.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПокупателяТовары.Количество КОНЕЦ
			|	    + ВЫБОР КОГДА ДокументЗаказПокупателяВозвратнаяТара.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПокупателяВозвратнаяТара.Количество КОНЕЦ) КАК ИтогКоличествоТЧ
			|ИЗ
			|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ТекущаяДата, ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
			|	
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата) КАК РасчетыСКонтрагентамиОстатки
			|ПО
			|	РасчетыСКонтрагентамиОстатки.Сделка = ЗаказыПокупателейОстатки.ЗаказПокупателя
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПокупателя.Товары КАК ДокументЗаказПокупателяТовары
			|ПО
			|	ДокументЗаказПокупателяТовары.Ссылка = ЗаказыПокупателейОстатки.ЗаказПокупателя
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПокупателя.ВозвратнаяТара КАК ДокументЗаказПокупателяВозвратнаяТара
			|ПО
			|	ДокументЗаказПокупателяВозвратнаяТара.Ссылка = ЗаказыПокупателейОстатки.ЗаказПокупателя
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(
			|	ВЫБРАТЬ ПЕРВЫЕ 1
			|		РасчетыСКонтрагентамиОбороты.Сделка КАК ОжидаемыйПлатеж
			|	ИЗ
			|		РегистрНакопления.РасчетыСКонтрагентами.Обороты КАК РасчетыСКонтрагентамиОбороты
			|	ГДЕ
			|		РасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход <> 0
			|	) КАК ПлатежиПоСделкам
			|ПО
			|	ПлатежиПоСделкам.ОжидаемыйПлатеж = ЗаказыПокупателейОстатки.ЗаказПокупателя
			|	
			|ГДЕ 
			|	ЗаказыПокупателейОстатки.КоличествоОстаток <> 0
			|	И
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Ответственный " + ВидСравненияПользователь + "
			|	И
			|	(ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата <= &ДатаКон","") + ")";
			
			Если ОтборКонтрагент <> Неопределено Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|	И
				|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
				|";
				
				СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
				
			КонецЕсли;

			ТекстЗапроса = ТекстЗапроса + "
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя,
			|	&ВидЗаказПокупателяОтгрузка,
			|	ЗаказыПокупателейОстатки.КоличествоОстаток,
			|	(ВЫБОР КОГДА
			|		((ПлатежиПоСделкам.ОжидаемыйПлатеж ЕСТЬ NULL) И (РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ),
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ВалютаДокумента,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.КурсВзаиморасчетов,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.КратностьВзаиморасчетов,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СуммаДокумента,
			|
			|	NULL,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата,
			|	""Заказ покупателя"",
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Номер,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОплаты,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СкладГруппа,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СтруктурнаяЕдиница
			|
			|";
		
			СтруктураЗапроса.Вставить("ТекстЗапроса", ТекстЗапроса);
			СтруктураЗапроса.Вставить("ПараметрыЗапроса", СтруктураПараметров);
			МассивТекстовЗапросов.Добавить(СтруктураЗапроса);
			
		ИначеЕсли ОтображаемыеЗаказы = 2 Тогда // Заказы поставщикам
		
			СтруктураЗапроса = Новый Структура;
			СтруктураПараметров = Новый Структура;
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасчетыСКонтрагентамиОстатки.Сделка                         КАК Документ,
			|	&ВидЗаказПоставщикуОплата                                   КАК ВидОперации,
			|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток     КАК Законченность,
			|	ВЫБОР КОГДА
			|		((ОтгрузкиПоЗаказам.ЗаказПоставщику ЕСТЬ NULL) И (ЗаказыПоставщикамОстатки.КоличествоОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ                                                       КАК ВыполненностьВторойЧастиЗаказа,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ВалютаДокумента         КАК ВалютаДокумента,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КурсВзаиморасчетов      КАК КурсВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СуммаДокумента          КАК СуммаДокумента,
			|	NULL                                                        КАК СостояниеСобытия,
			|	NULL                                                        КАК Важность,
			|	NULL                                                        КАК ТипСобытия,
			|	NULL                                                        КАК ОписаниеСобытия,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент              КАК Контрагент,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Дата                    КАК Дата,
			|	NULL                                                        КАК НачалоСобытия,
			|	""Заказ поставщику""                                        КАК ПредставлениеДокумента,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Номер                   КАК Номер,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаПоступления         КАК ДатаПоступленияОтгрузки,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты              КАК ДатаОплаты,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Склад                   КАК Склад,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СтруктурнаяЕдиница      КАК СтруктурнаяЕдиница,
			|	СУММА(ВЫБОР КОГДА ДокументЗаказПоставщикуТовары.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПоставщикуТовары.Количество КОНЕЦ
			|	    + ВЫБОР КОГДА ДокументЗаказПоставщикуВозвратнаяТара.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПоставщикуВозвратнаяТара.Количество КОНЕЦ) КАК ИтогКоличествоТЧ
			|ИЗ
			|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата, Сделка ССЫЛКА Документ.ЗаказПоставщику) КАК РасчетыСКонтрагентамиОстатки
			|	
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ТекущаяДата) КАК ЗаказыПоставщикамОстатки
			|ПО
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПоставщику.Товары КАК ДокументЗаказПоставщикуТовары
			|ПО
			|	ДокументЗаказПоставщикуТовары.Ссылка = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПоставщику.ВозвратнаяТара КАК ДокументЗаказПоставщикуВозвратнаяТара
			|ПО
			|	ДокументЗаказПоставщикуВозвратнаяТара.Ссылка = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(
			|	ВЫБРАТЬ ПЕРВЫЕ 1
			|		ЗаказыПоставщикамОбороты.ЗаказПоставщику КАК ЗаказПоставщику
			|	ИЗ
			|		РегистрНакопления.ЗаказыПоставщикам.Обороты КАК ЗаказыПоставщикамОбороты
			|	ГДЕ
			|		ЗаказыПоставщикамОбороты.КоличествоРасход > 0
			|	) КАК ОтгрузкиПоЗаказам
			|ПО
			|	ОтгрузкиПоЗаказам.ЗаказПоставщику = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ГДЕ 
			|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <> 0
			|	И
			|	РасчетыСКонтрагентамиОстатки.Сделка.Ответственный " + ВидСравненияПользователь + "
			|	И
			|	(РасчетыСКонтрагентамиОстатки.Сделка.Дата >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И РасчетыСКонтрагентамиОстатки.Сделка.Дата <= &ДатаКон","") + ")";

			Если ОтборКонтрагент <> Неопределено Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|	И
				|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
				|";
				
				СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСКонтрагентамиОстатки.Сделка,
			|	&ВидЗаказПоставщикуОплата,
			|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,
			|	(ВЫБОР КОГДА
			|		((ОтгрузкиПоЗаказам.ЗаказПоставщику ЕСТЬ NULL) И (ЗаказыПоставщикамОстатки.КоличествоОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ),
			|	РасчетыСКонтрагентамиОстатки.Сделка.ВалютаДокумента,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КурсВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КратностьВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СуммаДокумента,
			|	NULL,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Дата,
			|	""Заказ поставщику"",
			|	РасчетыСКонтрагентамиОстатки.Сделка.Номер,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаПоступления,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Склад,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СтруктурнаяЕдиница
			|";
			
			СтруктураЗапроса.Вставить("ТекстЗапроса", ТекстЗапроса);
			СтруктураЗапроса.Вставить("ПараметрыЗапроса", СтруктураПараметров);
			МассивТекстовЗапросов.Добавить(СтруктураЗапроса);
			
			СтруктураЗапроса = Новый Структура;
			СтруктураПараметров = Новый Структура;
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                         КАК Документ,
			|	&ВидЗаказПоставщикуПоступление                                   КАК ВидОперации,
			|	ЗаказыПоставщикамОстатки.КоличествоОстаток                       КАК Законченность,
			|	ВЫБОР КОГДА
			|		((ПлатежиПоСделкам.ОжидаемыйПлатеж ЕСТЬ NULL) И (РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ                                                            КАК ВыполненностьВторойЧастиЗаказа,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ВалютаДокумента         КАК ВалютаДокумента,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КурсВзаиморасчетов      КАК КурсВзаиморасчетов,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.СуммаДокумента          КАК СуммаДокумента,
			|	NULL                                                             КАК СостояниеСобытия,
			|	NULL                                                             КАК Важность,
			|	NULL                                                             КАК ТипСобытия,
			|	NULL                                                             КАК ОписаниеСобытия,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент              КАК Контрагент,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата                    КАК Дата,
			|	NULL                                                             КАК НачалоСобытия,
			|	""Заказ поставщику""                                             КАК ПредставлениеДокумента,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Номер                   КАК Номер,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления         КАК ДатаПоступленияОтгрузки,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаОплаты              КАК ДатаОплаты,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Склад                   КАК Склад,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.СтруктурнаяЕдиница      КАК СтруктурнаяЕдиница,
			|	СУММА(ВЫБОР КОГДА ДокументЗаказПоставщикуТовары.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПоставщикуТовары.Количество КОНЕЦ
			|	    + ВЫБОР КОГДА ДокументЗаказПоставщикуВозвратнаяТара.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПоставщикуВозвратнаяТара.Количество КОНЕЦ) КАК ИтогКоличествоТЧ
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ТекущаяДата, ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику) КАК ЗаказыПоставщикамОстатки
			|	
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата) КАК РасчетыСКонтрагентамиОстатки
			|ПО
			|	РасчетыСКонтрагентамиОстатки.Сделка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПоставщику.Товары КАК ДокументЗаказПоставщикуТовары
			|ПО
			|	ДокументЗаказПоставщикуТовары.Ссылка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПоставщику.ВозвратнаяТара КАК ДокументЗаказПоставщикуВозвратнаяТара
			|ПО
			|	ДокументЗаказПоставщикуВозвратнаяТара.Ссылка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(
			|	ВЫБРАТЬ ПЕРВЫЕ 1
			|		РасчетыСКонтрагентамиОбороты.Сделка КАК ОжидаемыйПлатеж
			|	ИЗ
			|		РегистрНакопления.РасчетыСКонтрагентами.Обороты КАК РасчетыСКонтрагентамиОбороты
			|	ГДЕ
			|		РасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход <> 0
			|	) КАК ПлатежиПоСделкам
			|ПО
			|	ПлатежиПоСделкам.ОжидаемыйПлатеж = ЗаказыПоставщикамОстатки.ЗаказПоставщику
			|		
			|ГДЕ 
			|	ЗаказыПоставщикамОстатки.КоличествоОстаток <> 0
			|	И
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Ответственный " + ВидСравненияПользователь + "
			|	И
			|	(ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата <= &ДатаКон","") + ")";
			
			Если ОтборКонтрагент <> Неопределено Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|	И
				|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
				|";
				
				СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
			|	&ВидЗаказПоставщикуПоступление,
			|	ЗаказыПоставщикамОстатки.КоличествоОстаток,
			|	(ВЫБОР КОГДА
			|		((ПлатежиПоСделкам.ОжидаемыйПлатеж ЕСТЬ NULL) И (РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ),
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ВалютаДокумента,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КурсВзаиморасчетов,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КратностьВзаиморасчетов,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.СуммаДокумента,
			|	NULL,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата,
			|	""Заказ поставщику"",
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Номер,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаОплаты,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Склад,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.СтруктурнаяЕдиница
			|";
		
			СтруктураЗапроса.Вставить("ТекстЗапроса", ТекстЗапроса);
			СтруктураЗапроса.Вставить("ПараметрыЗапроса", СтруктураПараметров);
			МассивТекстовЗапросов.Добавить(СтруктураЗапроса);
			
		Иначе // Все заказы и покупателей и поставщикам
			
			// По покупателям
			
			СтруктураЗапроса = Новый Структура;
			СтруктураПараметров = Новый Структура;
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасчетыСКонтрагентамиОстатки.Сделка                         КАК Документ,
			|	&ВидЗаказПокупателяОплата                                   КАК ВидОперации,
			|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток     КАК Законченность,
			|	ВЫБОР КОГДА
			|		((ОтгрузкиПоЗаказам.ЗаказПокупателя ЕСТЬ NULL) И (ЗаказыПокупателейОстатки.КоличествоОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ                                                       КАК ВыполненностьВторойЧастиЗаказа,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ВалютаДокумента         КАК ВалютаДокумента,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КурсВзаиморасчетов      КАК КурсВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СуммаДокумента          КАК СуммаДокумента,
			|	NULL                                                        КАК СостояниеСобытия,
			|	NULL                                                        КАК Важность,
			|	NULL                                                        КАК ТипСобытия,
			|	NULL                                                        КАК ОписаниеСобытия,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент              КАК Контрагент,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Дата                    КАК Дата,
			|	NULL                                                        КАК НачалоСобытия,
			|	""Заказ покупателя""                                        КАК ПредставлениеДокумента,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Номер                   КАК Номер,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОтгрузки            КАК ДатаПоступленияОтгрузки,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты              КАК ДатаОплаты,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СкладГруппа             КАК Склад,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СтруктурнаяЕдиница      КАК СтруктурнаяЕдиница,
			|	СУММА(ВЫБОР КОГДА ДокументЗаказПокупателяТовары.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПокупателяТовары.Количество КОНЕЦ
			|	    + ВЫБОР КОГДА ДокументЗаказПокупателяВозвратнаяТара.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПокупателяВозвратнаяТара.Количество КОНЕЦ) КАК ИтогКоличествоТЧ
			|ИЗ
			|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата, Сделка ССЫЛКА Документ.ЗаказПокупателя) КАК РасчетыСКонтрагентамиОстатки
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ТекущаяДата) КАК ЗаказыПокупателейОстатки
			|ПО
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПокупателя.Товары КАК ДокументЗаказПокупателяТовары
			|ПО
			|	ДокументЗаказПокупателяТовары.Ссылка = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПокупателя.ВозвратнаяТара КАК ДокументЗаказПокупателяВозвратнаяТара
			|ПО
			|	ДокументЗаказПокупателяВозвратнаяТара.Ссылка = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(
			|	ВЫБРАТЬ ПЕРВЫЕ 1
			|		ЗаказыПокупателейОбороты.ЗаказПокупателя КАК ЗаказПокупателя
			|	ИЗ
			|		РегистрНакопления.ЗаказыПокупателей.Обороты КАК ЗаказыПокупателейОбороты
			|	ГДЕ
			|		ЗаказыПокупателейОбороты.КоличествоРасход > 0
			|	) КАК ОтгрузкиПоЗаказам
			|ПО
			|	ОтгрузкиПоЗаказам.ЗаказПокупателя = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ГДЕ 
			|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <> 0
			|	И
			|	РасчетыСКонтрагентамиОстатки.Сделка.Ответственный " + ВидСравненияПользователь + "
			|	И
			|	(РасчетыСКонтрагентамиОстатки.Сделка.Дата >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И РасчетыСКонтрагентамиОстатки.Сделка.Дата <= &ДатаКон","") + ")";

			Если ОтборКонтрагент <> Неопределено Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|	И
				|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
				|";
				
				СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
				
			КонецЕсли;

			ТекстЗапроса = ТекстЗапроса + "
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСКонтрагентамиОстатки.Сделка,
			|	&ВидЗаказПокупателяОплата,
			|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,
			|	(ВЫБОР КОГДА
			|		((ОтгрузкиПоЗаказам.ЗаказПокупателя ЕСТЬ NULL) И (ЗаказыПокупателейОстатки.КоличествоОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ),
			|	РасчетыСКонтрагентамиОстатки.Сделка.ВалютаДокумента,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КурсВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КратностьВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СуммаДокумента,
			|	NULL,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Дата,
			|	""Заказ покупателя"",
			|	РасчетыСКонтрагентамиОстатки.Сделка.Номер,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОтгрузки,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СкладГруппа,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СтруктурнаяЕдиница
			|";
			
			СтруктураЗапроса.Вставить("ТекстЗапроса", ТекстЗапроса);
			СтруктураЗапроса.Вставить("ПараметрыЗапроса", СтруктураПараметров);
			МассивТекстовЗапросов.Добавить(СтруктураЗапроса);
			
			СтруктураЗапроса = Новый Структура;
			СтруктураПараметров = Новый Структура;
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя                         КАК Документ,
			|	&ВидЗаказПокупателяОтгрузка                                      КАК ВидОперации,
			|	ЗаказыПокупателейОстатки.КоличествоОстаток                       КАК Законченность,
			|	ВЫБОР КОГДА
			|		((ПлатежиПоСделкам.ОжидаемыйПлатеж ЕСТЬ NULL) И (РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ                                                            КАК ВыполненностьВторойЧастиЗаказа,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ВалютаДокумента         КАК ВалютаДокумента,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.КурсВзаиморасчетов      КАК КурсВзаиморасчетов,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СуммаДокумента          КАК СуммаДокумента,
			|	NULL                                                             КАК СостояниеСобытия,
			|	NULL                                                             КАК Важность,
			|	NULL                                                             КАК ТипСобытия,
			|	NULL                                                             КАК ОписаниеСобытия,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент              КАК Контрагент,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата                    КАК Дата,
			|	NULL                                                             КАК НачалоСобытия,
			|	""Заказ покупателя""                                             КАК ПредставлениеДокумента,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Номер                   КАК Номер,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки            КАК ДатаПоступленияОтгрузки,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОплаты              КАК ДатаОплаты,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СкладГруппа             КАК Склад,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СтруктурнаяЕдиница      КАК СтруктурнаяЕдиница,
			|	СУММА(ВЫБОР КОГДА ДокументЗаказПокупателяТовары.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПокупателяТовары.Количество КОНЕЦ
			|	    + ВЫБОР КОГДА ДокументЗаказПокупателяВозвратнаяТара.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПокупателяВозвратнаяТара.Количество КОНЕЦ) КАК ИтогКоличествоТЧ
			|ИЗ
			|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ТекущаяДата, ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
			|	
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата) КАК РасчетыСКонтрагентамиОстатки
			|ПО
			|	РасчетыСКонтрагентамиОстатки.Сделка = ЗаказыПокупателейОстатки.ЗаказПокупателя
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПокупателя.Товары КАК ДокументЗаказПокупателяТовары
			|ПО
			|	ДокументЗаказПокупателяТовары.Ссылка = ЗаказыПокупателейОстатки.ЗаказПокупателя
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПокупателя.ВозвратнаяТара КАК ДокументЗаказПокупателяВозвратнаяТара
			|ПО
			|	ДокументЗаказПокупателяВозвратнаяТара.Ссылка = ЗаказыПокупателейОстатки.ЗаказПокупателя
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(
			|	ВЫБРАТЬ ПЕРВЫЕ 1
			|		РасчетыСКонтрагентамиОбороты.Сделка КАК ОжидаемыйПлатеж
			|	ИЗ
			|		РегистрНакопления.РасчетыСКонтрагентами.Обороты КАК РасчетыСКонтрагентамиОбороты
			|	ГДЕ
			|		РасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход <> 0
			|	) КАК ПлатежиПоСделкам
			|ПО
			|	ПлатежиПоСделкам.ОжидаемыйПлатеж = ЗаказыПокупателейОстатки.ЗаказПокупателя
			|		
			|ГДЕ 
			|	ЗаказыПокупателейОстатки.КоличествоОстаток <> 0
			|	И
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Ответственный " + ВидСравненияПользователь + "
			|	И
			|	(ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата <= &ДатаКон","") + ")";
			
			Если ОтборКонтрагент <> Неопределено Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|	И
				|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
				|";
				
				СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя,
			|	&ВидЗаказПокупателяОтгрузка,
			|	ЗаказыПокупателейОстатки.КоличествоОстаток,
			|	(ВЫБОР КОГДА
			|		((ПлатежиПоСделкам.ОжидаемыйПлатеж ЕСТЬ NULL) И (РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ),
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ВалютаДокумента,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.КурсВзаиморасчетов,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.КратностьВзаиморасчетов,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СуммаДокумента,
			|	NULL,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата,
			|	""Заказ покупателя"",
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Номер,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОплаты,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СкладГруппа,
			|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СтруктурнаяЕдиница
			|";
			
			СтруктураЗапроса.Вставить("ТекстЗапроса", ТекстЗапроса);
			СтруктураЗапроса.Вставить("ПараметрыЗапроса", СтруктураПараметров);
			МассивТекстовЗапросов.Добавить(СтруктураЗапроса);
			
			// По поставщикам
		
			СтруктураЗапроса = Новый Структура;
			СтруктураПараметров = Новый Структура;
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасчетыСКонтрагентамиОстатки.Сделка                         КАК Документ,
			|	&ВидЗаказПоставщикуОплата                                   КАК ВидОперации,
			|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток     КАК Законченность,
			|	ВЫБОР КОГДА
			|		((ОтгрузкиПоЗаказам.ЗаказПоставщику ЕСТЬ NULL) И (ЗаказыПоставщикамОстатки.КоличествоОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ                                                       КАК ВыполненностьВторойЧастиЗаказа,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ВалютаДокумента         КАК ВалютаДокумента,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КурсВзаиморасчетов      КАК КурсВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СуммаДокумента          КАК СуммаДокумента,
			|	NULL                                                        КАК СостояниеСобытия,
			|	NULL                                                        КАК Важность,
			|	NULL                                                        КАК ТипСобытия,
			|	NULL                                                        КАК ОписаниеСобытия,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент              КАК Контрагент,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Дата                    КАК Дата,
			|	NULL                                                        КАК НачалоСобытия,
			|	""Заказ поставщику""                                        КАК ПредставлениеДокумента,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Номер                   КАК Номер,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаПоступления         КАК ДатаПоступленияОтгрузки,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты              КАК ДатаОплаты,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Склад                   КАК Склад,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СтруктурнаяЕдиница      КАК СтруктурнаяЕдиница,
			|	СУММА(ВЫБОР КОГДА ДокументЗаказПоставщикуТовары.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПоставщикуТовары.Количество КОНЕЦ
			|	    + ВЫБОР КОГДА ДокументЗаказПоставщикуВозвратнаяТара.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПоставщикуВозвратнаяТара.Количество КОНЕЦ) КАК ИтогКоличествоТЧ
			|ИЗ
			|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата, Сделка ССЫЛКА Документ.ЗаказПоставщику) КАК РасчетыСКонтрагентамиОстатки
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ТекущаяДата) КАК ЗаказыПоставщикамОстатки
			|ПО
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПоставщику.Товары КАК ДокументЗаказПоставщикуТовары
			|ПО
			|	ДокументЗаказПоставщикуТовары.Ссылка = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПоставщику.ВозвратнаяТара КАК ДокументЗаказПоставщикуВозвратнаяТара
			|ПО
			|	ДокументЗаказПоставщикуВозвратнаяТара.Ссылка = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(
			|	ВЫБРАТЬ ПЕРВЫЕ 1
			|		ЗаказыПоставщикамОбороты.ЗаказПоставщику КАК ЗаказПоставщику
			|	ИЗ
			|		РегистрНакопления.ЗаказыПоставщикам.Обороты КАК ЗаказыПоставщикамОбороты
			|	ГДЕ
			|		ЗаказыПоставщикамОбороты.КоличествоРасход > 0
			|) КАК ОтгрузкиПоЗаказам
			|ПО
			|	ОтгрузкиПоЗаказам.ЗаказПоставщику = РасчетыСКонтрагентамиОстатки.Сделка
			|
			|ГДЕ 
			|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <> 0
			|	И
			|	РасчетыСКонтрагентамиОстатки.Сделка.Ответственный " + ВидСравненияПользователь + "
			|	И
			|	(РасчетыСКонтрагентамиОстатки.Сделка.Дата >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И РасчетыСКонтрагентамиОстатки.Сделка.Дата <= &ДатаКон","") + ")";

			Если ОтборКонтрагент <> Неопределено Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|	И
				|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
				|";
				
				СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСКонтрагентамиОстатки.Сделка,
			|	&ВидЗаказПоставщикуОплата,
			|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,
			|	(ВЫБОР КОГДА
			|		((ОтгрузкиПоЗаказам.ЗаказПоставщику ЕСТЬ NULL) И (ЗаказыПоставщикамОстатки.КоличествоОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ),
			|	РасчетыСКонтрагентамиОстатки.Сделка.ВалютаДокумента,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КурсВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.КратностьВзаиморасчетов,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СуммаДокумента,
			|	NULL,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Дата,
			|	""Заказ поставщику"",
			|	РасчетыСКонтрагентамиОстатки.Сделка.Номер,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаПоступления,
			|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты,
			|	РасчетыСКонтрагентамиОстатки.Сделка.Склад,
			|	РасчетыСКонтрагентамиОстатки.Сделка.СтруктурнаяЕдиница
			|";
			
			
			СтруктураЗапроса.Вставить("ТекстЗапроса", ТекстЗапроса);
			СтруктураЗапроса.Вставить("ПараметрыЗапроса", СтруктураПараметров);
			МассивТекстовЗапросов.Добавить(СтруктураЗапроса);
			
			СтруктураЗапроса = Новый Структура;
			СтруктураПараметров = Новый Структура;
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                         КАК Документ,
			|	&ВидЗаказПоставщикуПоступление                                   КАК ВидОперации,
			|	ЗаказыПоставщикамОстатки.КоличествоОстаток                       КАК Законченность,
			|	ВЫБОР КОГДА
			|		((ПлатежиПоСделкам.ОжидаемыйПлатеж ЕСТЬ NULL) И (РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ                                                            КАК ВыполненностьВторойЧастиЗаказа,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ВалютаДокумента         КАК ВалютаДокумента,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КурсВзаиморасчетов      КАК КурсВзаиморасчетов,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.СуммаДокумента          КАК СуммаДокумента,
			|	NULL                                                             КАК СостояниеСобытия,
			|	NULL                                                             КАК Важность,
			|	NULL                                                             КАК ТипСобытия,
			|	NULL                                                             КАК ОписаниеСобытия,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент              КАК Контрагент,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата                    КАК Дата,
			|	NULL                                                             КАК НачалоСобытия,
			|	""Заказ поставщику""                                             КАК ПредставлениеДокумента,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Номер                   КАК Номер,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления         КАК ДатаПоступленияОтгрузки,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаОплаты              КАК ДатаОплаты,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Склад                   КАК Склад,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.СтруктурнаяЕдиница      КАК СтруктурнаяЕдиница,
			|	СУММА(ВЫБОР КОГДА ДокументЗаказПоставщикуТовары.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПоставщикуТовары.Количество КОНЕЦ
			|	    + ВЫБОР КОГДА ДокументЗаказПоставщикуВозвратнаяТара.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПоставщикуВозвратнаяТара.Количество КОНЕЦ) КАК ИтогКоличествоТЧ
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ТекущаяДата, ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику) КАК ЗаказыПоставщикамОстатки
			|	
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата) КАК РасчетыСКонтрагентамиОстатки
			|ПО
			|	РасчетыСКонтрагентамиОстатки.Сделка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПоставщику.Товары КАК ДокументЗаказПоставщикуТовары
			|ПО
			|	ДокументЗаказПоставщикуТовары.Ссылка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ЗаказПоставщику.ВозвратнаяТара КАК ДокументЗаказПоставщикуВозвратнаяТара
			|ПО
			|	ДокументЗаказПоставщикуВозвратнаяТара.Ссылка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(
			|	ВЫБРАТЬ ПЕРВЫЕ 1
			|		РасчетыСКонтрагентамиОбороты.Сделка КАК ОжидаемыйПлатеж
			|	ИЗ
			|		РегистрНакопления.РасчетыСКонтрагентами.Обороты КАК РасчетыСКонтрагентамиОбороты
			|	ГДЕ
			|		РасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход <> 0
			|	) КАК ПлатежиПоСделкам
			|ПО
			|	ПлатежиПоСделкам.ОжидаемыйПлатеж = ЗаказыПоставщикамОстатки.ЗаказПоставщику
			|	
			|ГДЕ 
			|	ЗаказыПоставщикамОстатки.КоличествоОстаток <> 0
			|	И
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Ответственный " + ВидСравненияПользователь + "
			|	И
			|	(ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата <= &ДатаКон","") + ")";
			
			Если ОтборКонтрагент <> Неопределено Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|	И
				|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
				|";
				
				СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
				
			КонецЕсли;

			ТекстЗапроса = ТекстЗапроса + "
			|	
			|СГРУППИРОВАТЬ ПО
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
			|	&ВидЗаказПоставщикуПоступление,
			|	ЗаказыПоставщикамОстатки.КоличествоОстаток,
			|	(ВЫБОР КОГДА
			|		((ПлатежиПоСделкам.ОжидаемыйПлатеж ЕСТЬ NULL) И (РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток ЕСТЬ NULL))
			|	ТОГДА
			|		Истина
			|	ИНАЧЕ
			|		Ложь
			|	КОНЕЦ),
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ВалютаДокумента,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КурсВзаиморасчетов,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КратностьВзаиморасчетов,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.СуммаДокумента,
			|	NULL,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата,
			|	""Заказ поставщику"",
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Номер,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаОплаты,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Склад,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.СтруктурнаяЕдиница
			|	
			|";
		
			СтруктураЗапроса.Вставить("ТекстЗапроса", ТекстЗапроса);
			СтруктураЗапроса.Вставить("ПараметрыЗапроса", СтруктураПараметров);
			МассивТекстовЗапросов.Добавить(СтруктураЗапроса);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	СтруктураЗапроса = Новый Структура;
	СтруктураПараметров = Новый Структура;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СобытияКалендаряПользователяОбобщенные.Событие           КАК Документ,
	|	СобытияКалендаряПользователяОбобщенные.ВидСобытия        КАК ВидОперации,
	|	0                                                        КАК Законченность,
	|	Ложь                                                     КАК ВыполненностьВторойЧастиЗаказа,
	|	&ПустаяВалюта                                            КАК ВалютаДокумента,
	|	0                                                        КАК КурсВзаиморасчетов,
	|	0                                                        КАК КратностьВзаиморасчетов,
	|	0                                                        КАК СуммаДокумента,
	|	СобытияКалендаряПользователяОбобщенные.СостояниеСобытия  КАК СостояниеСобытия,
	|	СобытияКалендаряПользователяОбобщенные.Важность          КАК Важность,
	|	СобытияКалендаряПользователяОбобщенные.ТипСобытия        КАК ТипСобытия,
	|	СобытияКалендаряПользователяОбобщенные.ОписаниеСобытия   КАК ОписаниеСобытия,
	|	СобытияКалендаряПользователяОбобщенные.Контрагент        КАК Контрагент,
	|	СобытияКалендаряПользователяОбобщенные.КонтактноеЛицо    КАК КонтактноеЛицо,
	|	СобытияКалендаряПользователяОбобщенные.Дата              КАК Дата,
	|	СобытияКалендаряПользователяОбобщенные.ДатаНачалаСобытия КАК НачалоСобытия,
	|	""Событие""                                              КАК ПредставлениеДокумента,
	|	СобытияКалендаряПользователяОбобщенные.Событие.Номер     КАК Номер,
	|	NULL                                                     КАК ДатаПоступленияОтгрузки,
	|	NULL                                                     КАК ДатаОплаты,
	|	NULL                                                     КАК Склад,
	|	NULL                                                     КАК СтруктурнаяЕдиница,
	|	0                                                        КАК ИтогКоличествоТЧ
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|	
	|ГДЕ
	|
	|	СобытияКалендаряПользователяОбобщенные.Пользователь " + ВидСравненияПользователь + "
	|	И
	|	(СобытияКалендаряПользователяОбобщенные.Событие.Дата >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И СобытияКалендаряПользователяОбобщенные.Событие.Дата <= &ДатаКон","") + ")
	|";
	
	Если ОтображатьЗапланированныеСобытия Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И
		|	СобытияКалендаряПользователяОбобщенные.СостояниеСобытия = &СостояниеЗапланировано
		|";
	КонецЕсли;
	
	Если ОтборКонтрагент <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И
		|	СобытияКалендаряПользователяОбобщенные.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
		|";
		СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
	КонецЕсли;
	
	Если ОтборКонтактноеЛицо <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И
		|	СобытияКалендаряПользователяОбобщенные.КонтактноеЛицо " + ВозвратитьСтрокуВидаОтбора(ОтборКонтактноеЛицо[0],"&ВыбКонтактноеЛицо") + "
		|";
		СтруктураПараметров.Вставить("ВыбКонтактноеЛицо",ОтборКонтактноеЛицо[1]);
	КонецЕсли;
		
	СтруктураЗапроса.Вставить("ТекстЗапроса", ТекстЗапроса);
	СтруктураЗапроса.Вставить("ПараметрыЗапроса", СтруктураПараметров);
	МассивТекстовЗапросов.Добавить(СтруктураЗапроса);
	
	// Теперь выполним все запросы и запишем информацию в ТЧ
	
	ЗаказыСобытия.Очистить();
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПользовательКалендаря"        , ?(ПользовательКалендаря.Количество() = 1, ПользовательКалендаря[0].Значение, ПользовательКалендаря));
	Запрос.УстановитьПараметр("ДатаНач"                      , НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон"                      , ?(ДатаКон <> '00010101000000', КонецДня(ДатаКон), ДатаКон));
	Запрос.УстановитьПараметр("ТекущаяДата"                  , ТекущаяДата());
	Запрос.УстановитьПараметр("СостояниеЗапланировано"       , Перечисления.СостоянияСобытий.Запланировано);
	Запрос.УстановитьПараметр("ВидЗаказПокупателяОплата"     , Перечисления.ВидыДействийПоЗаказамПокупателей.ОплатаПоЗаказу);
	Запрос.УстановитьПараметр("ВидЗаказПокупателяОтгрузка"   , Перечисления.ВидыДействийПоЗаказамПокупателей.ОтгрузкаПоЗаказу);
	Запрос.УстановитьПараметр("ВидЗаказПоставщикуОплата"     , Перечисления.ВидыДействийПоЗаказамПоставщикам.ОплатаПоЗаказу);
	Запрос.УстановитьПараметр("ВидЗаказПоставщикуПоступление", Перечисления.ВидыДействийПоЗаказамПоставщикам.ПоступлениеПоЗаказу);
	Запрос.УстановитьПараметр("ПустаяВалюта"                 , Справочники.Валюты.ПустаяСсылка());
	
	ТекЗапрос = 0;
	ВсегоЗапросов = МассивТекстовЗапросов.Количество();
	Для каждого ЭлементМассива Из МассивТекстовЗапросов Цикл
		
		ТекЗапрос = ТекЗапрос + 1;
		# Если Клиент Тогда
		Состояние("Выполняется заполнение событий списка ...");
		# КонецЕсли
		
		ТекстЗапроса     = Неопределено;
		ПараметрыЗапроса = Неопределено;
		
		ЭлементМассива.Свойство("ТекстЗапроса"    , ТекстЗапроса);
		ЭлементМассива.Свойство("ПараметрыЗапроса", ПараметрыЗапроса);
		
		Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
			Продолжить;
		КонецЕсли; 
		
		Запрос.Текст = ТекстЗапроса;
		Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
			Для каждого ЭлементСтруктуры Из ПараметрыЗапроса Цикл
				Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			КонецЦикла; 
		КонецЕсли; 
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТЧ = ЗаказыСобытия.Добавить();
			
			СтрокаТЧ.Документ                       = Выборка.Документ;
			СтрокаТЧ.ВидОперации                    = Выборка.ВидОперации;
			СтрокаТЧ.Законченность                  = Выборка.Законченность;
			СтрокаТЧ.ВыполненностьВторойЧастиЗаказа = Выборка.ВыполненностьВторойЧастиЗаказа;
			СтрокаТЧ.ВалютаДокумента                = Выборка.ВалютаДокумента;
			СтрокаТЧ.КурсВзаиморасчетов             = Выборка.КурсВзаиморасчетов;
			СтрокаТЧ.КратностьВзаиморасчетов        = Выборка.КратностьВзаиморасчетов;
			СтрокаТЧ.СуммаДокумента                 = Выборка.СуммаДокумента;
			СтрокаТЧ.СостояниеСобытия               = Выборка.СостояниеСобытия;
			СтрокаТЧ.Важность                       = Выборка.Важность;
			СтрокаТЧ.ТипСобытия                     = Выборка.ТипСобытия;
			СтрокаТЧ.ОписаниеСобытия                = Выборка.ОписаниеСобытия;
			СтрокаТЧ.Контрагент                     = Выборка.Контрагент;
			СтрокаТЧ.Дата                           = Выборка.Дата;
			СтрокаТЧ.НачалоСобытия                  = Выборка.НачалоСобытия;
			СтрокаТЧ.ПредставлениеДокумента         = Выборка.ПредставлениеДокумента;
			СтрокаТЧ.Номер                          = Выборка.Номер;
			СтрокаТЧ.ДатаПоступленияОтгрузки        = Выборка.ДатаПоступленияОтгрузки;
			СтрокаТЧ.ДатаОплаты                     = Выборка.ДатаОплаты;
			СтрокаТЧ.Склад                          = Выборка.Склад;
			СтрокаТЧ.СтруктурнаяЕдиница             = Выборка.СтруктурнаяЕдиница;
			СтрокаТЧ.ИтогКоличествоТЧ               = Выборка.ИтогКоличествоТЧ;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьСобытия()

// Процедура заполняет табличную часть обработки ДанныеМесяца.
// 
// Параметры
//  ОтображатьЗапланированныеСобытия  - булево, отображать запланированные события или все
//  ТипСобытияКалендаря - тип событий, которые надо отображать
// 
// Возвращаемое значение 
//  НЕТ
Процедура СобратьДокументыМесяца(ОтображатьЗапланированныеСобытия = Ложь, ТипСобытияКалендаря, ОтображатьЗаказы, ОтображаемыеЗаказы) Экспорт
	Перем ВидСравненияПользователь;

	# Если Клиент Тогда
	Состояние("Выполняется заполнение документов месяца ...");
	# КонецЕсли
	
	ОтборПользователь = СтруктураОтборов.Получить("Пользователь");
	ВидСравненияПользователь = ВозвратитьСтрокуВидаОтбора(ОтборПользователь[0], "&ТекПользователь");

	Запрос = Новый Запрос;
	
	Запрос.Текст = "";
	
	Если ОтображатьЗаказы Тогда
		
		Если ОтображаемыеЗаказы = 1 Тогда // Заказы покупателей
			Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапроса_ЗаказыПокупателей();
		ИначеЕсли ОтображаемыеЗаказы = 2 Тогда // Заказы поставщикам
			Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапроса_ЗаказыПоставщикам();
		Иначе // Все заказы, и покупателей, и поставщикам
			Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапроса_ЗаказыВсе();
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ
		|";
		
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ВЫБРАТЬ " + ?(Найти(Запрос.Текст, "РАЗРЕШЕННЫЕ") = 0, "РАЗРЕШЕННЫЕ", "") + " РАЗЛИЧНЫЕ
	|	СобытияКалендаряПользователяОбобщенные.Событие            КАК Документ,
	|	СобытияКалендаряПользователяОбобщенные.ДатаНачалаСобытия  КАК Дата,
	|	&ПустойТипЗаказа                                          КАК ТипЗаказа,
	|	СобытияКалендаряПользователяОбобщенные.ДатаНачалаСобытия  КАК ДатаНачалаСобытия,
	|	СобытияКалендаряПользователяОбобщенные.ДатаКонцаСобытия   КАК ДатаКонцаСобытия,
	|	СобытияКалендаряПользователяОбобщенные.Контрагент         КАК Контрагент,
	|	СобытияКалендаряПользователяОбобщенные.КонтактноеЛицо     КАК КонтактноеЛицо
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|	
	|ГДЕ
	|
	|	СобытияКалендаряПользователяОбобщенные.Пользователь $ВидСравненияПользователь$
	|	И
	|	СобытияКалендаряПользователяОбобщенные.ДатаНачалаСобытия <= &ДатаКон
	|	И
	|	СобытияКалендаряПользователяОбобщенные.ДатаНачалаСобытия >= &ДатаНач
	|";
	
	Если ОтображатьЗапланированныеСобытия Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И
		|	СобытияКалендаряПользователяОбобщенные.СостояниеСобытия = &ВыбСостояние
		|";
		
		Запрос.УстановитьПараметр("ВыбСостояние", Перечисления.СостоянияСобытий.Запланировано);
		
	КонецЕсли;
	
	Если ОтборПоОбъекту И ЗначениеЗаполнено(ОбъектФормы) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И
		|	СобытияКалендаряПользователяОбобщенные.КонтактноеЛицо = &ВыбКонтактноеЛицо
		|";
		
		Запрос.УстановитьПараметр("ВыбКонтактноеЛицо", ОбъектФормы);
		
	КонецЕсли;
	
	
	Если НЕ ТипСобытияКалендаря.Пустая() Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И
		|	СобытияКалендаряПользователяОбобщенные.ТипСобытия = &ВыбТипСобытия
		|";
		
		Запрос.УстановитьПараметр("ВыбТипСобытия", ТипСобытияКалендаря);
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ТекущаяДата"               , ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяДата"                , '00010101000000');
	Запрос.УстановитьПараметр("ТекПользователь"           , ?(ПользовательКалендаря.Количество() = 1, ПользовательКалендаря[0].Значение, ПользовательКалендаря));
	Запрос.УстановитьПараметр("ДатаКон"                   , КонецНедели(КонецМесяца(ДатаКалендаря)));
	Запрос.УстановитьПараметр("ДатаНач"                   , НачалоНедели(НачалоМесяца(ДатаКалендаря)));
	Запрос.УстановитьПараметр("ЗаказПокупателяОтгрузка"   , Перечисления.ВидыДействийПоЗаказамПокупателей.ОтгрузкаПоЗаказу);
	Запрос.УстановитьПараметр("ПустоеКонтактноеЛицо"      , Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЗаказПокупателяОплата"     , Перечисления.ВидыДействийПоЗаказамПокупателей.ОплатаПоЗаказу);
	Запрос.УстановитьПараметр("ПустойТипЗаказа"           , Перечисления.ВидыДействийПоЗаказамПокупателей.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеКонтактноеЛицо"      , Справочники.КонтактныеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЗаказПоставщикуПоступление", Перечисления.ВидыДействийПоЗаказамПоставщикам.ПоступлениеПоЗаказу);
	Запрос.УстановитьПараметр("ЗаказПоставщикуОплата"     , Перечисления.ВидыДействийПоЗаказамПоставщикам.ОплатаПоЗаказу);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "$ВидСравненияПользователь$", ВидСравненияПользователь);
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗапроса.Сортировать("Дата ВОЗР");
	
	ДанныеМесяца.Загрузить(ТаблицаЗапроса);
	
	ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
	
КонецПроцедуры // СобратьДокументыМесяца()

// Процедура заполняет табличную часть обработки ДанныеНеделиЗаказы и
//  .реквизиты объекта СобытияНедели_День[Х]
// 
// Параметры
//  ОтображатьЗапланированныеСобытия  - булево, отображать запланированные события или все
//  ТипСобытияКалендаря - тип событий, которые надо отображать
// 
// Возвращаемое значение 
//  НЕТ
Процедура СобратьДокументыНедели(ОтображатьЗапланированныеСобытия = Ложь, ТипСобытияКалендаря, ОтображатьЗаказы, ОтображаемыеЗаказы, ОтображатьЗанятостьПомещений) Экспорт
	Перем ВидСравненияПользователь;
	
	# Если Клиент Тогда
	Состояние("Выполняется заполнение документов недели и дня ...");
	# КонецЕсли

	Для а = 1 По ?(ОтображатьЗаказы, 7, 8) Цикл
		
		ЭтотОбъект["СобытияНедели_День" + Строка(а)] = Неопределено;
		
		ДатаДняНедели = НачалоДня(НачалоНедели(ДатаКалендаря) + (60*60*24)*а - 1);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СобытияКалендаряПользователя.Событие                           КАК Документ,
		|	СобытияКалендаряПользователя.НомерНачальнойСтроки              КАК НомерНачальнойСтроки,
		|	СобытияКалендаряПользователя.НомерКонечнойСтроки               КАК НомерКонечнойСтроки,
		|	СобытияКалендаряПользователя.ДатаНачалаСобытия                 КАК ДатаНачалаСобытия,
		|	СобытияКалендаряПользователя.ДатаКонцаСобытия                  КАК ДатаКонцаСобытия,
		|	СобытияКалендаряПользователя.Контрагент                        КАК Контрагент,
		|	СобытияКалендаряПользователя.КонтактноеЛицо                    КАК КонтактноеЛицо,
		|	СобытияКалендаряПользователя.ОписаниеСобытия                   КАК ОписаниеСобытия,
		|	СобытияКалендаряПользователя.Важность                          КАК Важность,
		|	СобытияКалендаряПользователя.СостояниеСобытия                  КАК СостояниеСобытия,
		|	СобытияКалендаряПользователя.ТипСобытия                        КАК ТипСобытия,
		|	СобытияКалендаряПользователя.ВидСобытия                        КАК ВидСобытия,
		|	СобытияКалендаряПользователя.КоличествоОдновременныхДокументов КАК КоличествоОдновременныхДокументов
		|
		|ИЗ
		|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователя
		|	
		|ГДЕ
		|
		|	СобытияКалендаряПользователя.Дата = &ДатаДняНедели
		|	И
		|	СобытияКалендаряПользователя.Событие <> &ПустоеСобытие
		|	И
		|	СобытияКалендаряПользователя.Пользователь $ВидСравненияПользователь$
		|	И
		|	СобытияКалендаряПользователя.ВидСобытия <> &ПустойВидСобытия
		|";
		
		Если ОтображатьЗапланированныеСобытия Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	И
			|	СобытияКалендаряПользователя.Событие.СостояниеСобытия = &ВыбСостояние
			|";
			
			Запрос.УстановитьПараметр("ВыбСостояние", Перечисления.СостоянияСобытий.Запланировано);
			
		КонецЕсли;
		
		Если ОтборПоОбъекту И ЗначениеЗаполнено(ОбъектФормы) Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	И
			|	СобытияКалендаряПользователя.Событие.КонтактноеЛицо = &ВыбКонтактноеЛицо
			|";
			
			Запрос.УстановитьПараметр("ВыбКонтактноеЛицо", ОбъектФормы);
			
		КонецЕсли;
		
		Если НЕ ТипСобытияКалендаря.Пустая() Тогда
			
			
			Запрос.Текст = Запрос.Текст + "
			|	И
			|	СобытияКалендаряПользователя.Событие.ТипСобытия = &ВыбТипСобытия
			|";
			
			Запрос.УстановитьПараметр("ВыбТипСобытия", ТипСобытияКалендаря);
			
			
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|
		|	СобытияКалендаряПользователя.Событие.НачалоСобытия
		|
		|";                                                                         
		
		Запрос.УстановитьПараметр("ПустоеСобытие", Документы.Событие.ПустаяСсылка());  
		Запрос.УстановитьПараметр("ПустойВидСобытия", Перечисления.ВидыСобытий.ПустаяСсылка());  
		Запрос.УстановитьПараметр("ДатаДняНедели", ДатаДняНедели);
		Запрос.УстановитьПараметр("ТекущийПользователь", ?(ПользовательКалендаря.Количество() = 1, ПользовательКалендаря[0].Значение, ПользовательКалендаря));

		ОтборПользователь = СтруктураОтборов.Получить("Пользователь");
		ВидСравненияПользователь = ВозвратитьСтрокуВидаОтбора(ОтборПользователь[0],"&ТекущийПользователь");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "$ВидСравненияПользователь$", ВидСравненияПользователь);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаСобытий = РезультатЗапроса.Выгрузить();  
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Число"));
		ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов);
		
		ТаблицаСобытий.Колонки.Добавить("НомерНачальнойКолонки", ОписаниеТиповЧисло);
		ТаблицаСобытий.Колонки.Добавить("НомерКонечнойКолонки", ОписаниеТиповЧисло);
		
		СписокДня = Новый СписокЗначений;
		Для я = 1 По 48 Цикл
			НовыйСписок = Новый СписокЗначений;
			СписокДня.Добавить(НовыйСписок);
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СобытияКалендаряПользователя.НомерСтрокиТаблицы КАК НомерСтрокиТаблицы,
		|	СобытияКалендаряПользователя.ПорядковыйНомерВДне КАК ПорядковыйНомерВДне,
		|	ВЫБОР
		|	КОГДА
		|		СобытияКалендаряПользователя.Событие = &ПустоеСобытие
		|	ТОГДА
		|		Неопределено
		|	ИНАЧЕ
		|		СобытияКалендаряПользователя.Событие
		|	КОНЕЦ                     КАК Документ
		|
		|ИЗ
		|	РегистрСведений.СобытияКалендаряПользователя КАК СобытияКалендаряПользователя
		|	
		|ГДЕ
		|
		|	СобытияКалендаряПользователя.Дата = &ДатаДняНедели
		|	И
		|	СобытияКалендаряПользователя.Пользователь $ВидСравненияПользователь$
		|";
		
		Если ОтображатьЗапланированныеСобытия Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	И
			|	СобытияКалендаряПользователя.Событие.СостояниеСобытия = &ВыбСостояние
			|";
			
			Запрос.УстановитьПараметр("ВыбСостояние", Перечисления.СостоянияСобытий.Запланировано);
			
		КонецЕсли;
		
		Если ОтборПоОбъекту И ЗначениеЗаполнено(ОбъектФормы) Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	И
			|	СобытияКалендаряПользователя.Событие.КонтактноеЛицо = &ВыбКонтактноеЛицо
			|";
			
			Запрос.УстановитьПараметр("ВыбКонтактноеЛицо", ОбъектФормы);
			
		КонецЕсли;
		
		
		Если НЕ ТипСобытияКалендаря.Пустая() Тогда
			
			
			Запрос.Текст = Запрос.Текст + "
			|	И
			|	СобытияКалендаряПользователя.Событие.ТипСобытия = &ВыбТипСобытия
			|";
			
			Запрос.УстановитьПараметр("ВыбТипСобытия", ТипСобытияКалендаря);
			
			
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|
		|	НомерСтрокиТаблицы ВОЗР,
		|	ПорядковыйНомерВДне ВОЗР
		|
		|ИТОГИ ПО
		|
		|	НомерСтрокиТаблицы,
		|	ПорядковыйНомерВДне
		|
		|";
		
		Запрос.УстановитьПараметр("ПустоеСобытие", Документы.Событие.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДатаДняНедели", ДатаДняНедели);
		Запрос.УстановитьПараметр("ТекущийПользователь", ?(ПользовательКалендаря.Количество() = 1, ПользовательКалендаря[0].Значение, ПользовательКалендаря));
		ВидСравненияПользователь = ВозвратитьСтрокуВидаОтбора(ОтборПользователь[0],"&ТекущийПользователь");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "$ВидСравненияПользователь$", ВидСравненияПользователь);

		
		РезультатЗапроса = Запрос.Выполнить();
		
		СоответствиеПорядковогоНомераВДне = Новый Соответствие;
		ПоНесколькимПользователям         = ПользовательКалендаря.Количество() > 1;
		
		ВыборкаСтрокЗапроса = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСтрокиТаблицы");
		Пока ВыборкаСтрокЗапроса.Следующий() Цикл
			СписокЗначенийСтроки = СписокДня[ВыборкаСтрокЗапроса.НомерСтрокиТаблицы - 1].Значение;
			
			// Вначале соберем документы
			ТаблицаДокументов = Новый ТаблицаЗначений;
			ТаблицаДокументов.Колонки.Добавить("Документ");
			ТаблицаДокументов.Колонки.Добавить("ПорядковыйНомерВДне");
			
			ВыборкаПолейЗапроса = ВыборкаСтрокЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПорядковыйНомерВДне");
			Пока ВыборкаПолейЗапроса.Следующий() Цикл
				КонечнаяВыборка = ВыборкаПолейЗапроса.Выбрать();
				Пока КонечнаяВыборка.Следующий() Цикл
					Если КонечнаяВыборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
						
						ПорядковыйНомерВДне = СоответствиеПорядковогоНомераВДне.Получить(КонечнаяВыборка.Документ);
						
						СтрокаТаблицы = ТаблицаДокументов.Добавить();
						СтрокаТаблицы.Документ            = КонечнаяВыборка.Документ;
						СтрокаТаблицы.ПорядковыйНомерВДне = ?(ПорядковыйНомерВДне=Неопределено,?(ПоНесколькимПользователям,0,ВыборкаПолейЗапроса.ПорядковыйНомерВДне),ПорядковыйНомерВДне);
						
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
			
			// если по нескольким пользователям - сортируем так, чтобы вначале документы уже с установленными номерами (документы были в пред. строках),
			// а потом уже с новыми 
			Если ПоНесколькимПользователям Тогда
				ТаблицаДокументов.Сортировать("ПорядковыйНомерВДне УБЫВ, Документ ВОЗР");
			КонецЕсли;
			
			Смещение = 0;
			
			Для каждого ДокументИзТаблицы из ТаблицаДокументов Цикл
				
				ПорядковыйНомерВДне = СоответствиеПорядковогоНомераВДне.Получить(ДокументИзТаблицы.Документ);
				Если ПорядковыйНомерВДне = Неопределено Тогда
					ПорядковыйНомерВДне = ?(ПоНесколькимПользователям,1,ДокументИзТаблицы.ПорядковыйНомерВДне);
				КонецЕсли;
				
				Если СписокЗначенийСтроки.Количество() < ПорядковыйНомерВДне Тогда
					Для б = СписокЗначенийСтроки.Количество() + 1 По ПорядковыйНомерВДне Цикл
						СписокЗначенийСтроки.Добавить(Неопределено);
					КонецЦикла; 
				КонецЕсли; 
				
				// если по нескольким пользователям - возможно нужно сдвинуть порядок
				Если ПоНесколькимПользователям Тогда
					Пока ЗначениеЗаполнено(СписокЗначенийСтроки[ПорядковыйНомерВДне - 1 + Смещение].Значение) Цикл
						Смещение = Смещение + 1;
						СписокЗначенийСтроки.Добавить(Неопределено);
					КонецЦикла;
				КонецЕсли;
				
				СоответствиеПорядковогоНомераВДне.Вставить(ДокументИзТаблицы.Документ,ПорядковыйНомерВДне+Смещение);
				
				СписокЗначенийСтроки[ПорядковыйНомерВДне - 1 + Смещение].Значение = ДокументИзТаблицы.Документ;
				
			КонецЦикла;
			
		КонецЦикла; 
		
		// если несколько пользователей календаря - пересчитаем параметр "Количество одновременных документов"
		Если ПоНесколькимПользователям Тогда
			Для каждого СтрокаТаблицы из ТаблицаСобытий Цикл
				
				НаборЗаписейРегистра = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
				НаборЗаписейРегистра.Отбор.Дата.Значение              = ДатаДняНедели;
				НаборЗаписейРегистра.Отбор.Дата.Использование         = Истина;
				НаборЗаписейРегистра.Отбор.Событие.Значение           = СтрокаТаблицы.Документ;
				НаборЗаписейРегистра.Отбор.Событие.Использование      = Истина;
				НаборЗаписейРегистра.Прочитать();
				
				Для каждого ЗаписьРегистра Из НаборЗаписейРегистра Цикл
					КоличествоДокументов = СтрокаТаблицы.КоличествоОдновременныхДокументов;
					Для б = ЗаписьРегистра.НомерНачальнойСтроки - 1 По ЗаписьРегистра.НомерКонечнойСтроки - 1 Цикл
						ТекСписок = СписокДня[б].Значение;
						Если ТекСписок.Количество() > КоличествоДокументов Тогда
							КоличествоДокументов = ТекСписок.Количество();
						КонецЕсли; 
					КонецЦикла;
					СтрокаТаблицы.КоличествоОдновременныхДокументов = КоличествоДокументов;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаСобытийПоПомещениям = Новый ТаблицаЗначений;
		СписокДняПоПомещениям      = Новый СписокЗначений;
		
		Если ОтображатьЗанятостьПомещений Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СобытияКалендаряПользователя.Событие                           КАК Документ,
			|	СобытияКалендаряПользователя.НомерНачальнойСтроки              КАК НомерНачальнойСтроки,
			|	СобытияКалендаряПользователя.НомерКонечнойСтроки               КАК НомерКонечнойСтроки,
			|	СобытияКалендаряПользователя.ДатаНачалаСобытия                 КАК ДатаНачалаСобытия,
			|	СобытияКалендаряПользователя.ДатаКонцаСобытия                  КАК ДатаКонцаСобытия,
			|	СобытияКалендаряПользователя.Контрагент                        КАК Контрагент,
			|	СобытияКалендаряПользователя.КонтактноеЛицо                    КАК КонтактноеЛицо,
			|	СобытияКалендаряПользователя.ОписаниеСобытия                   КАК ОписаниеСобытия,
			|	СобытияКалендаряПользователя.Важность                          КАК Важность,
			|	СобытияКалендаряПользователя.СостояниеСобытия                  КАК СостояниеСобытия,
			|	СобытияКалендаряПользователя.ТипСобытия                        КАК ТипСобытия,
			|	СобытияКалендаряПользователя.ВидСобытия                        КАК ВидСобытия,
			|	СобытияКалендаряПользователя.КоличествоОдновременныхДокументов КАК КоличествоОдновременныхДокументов
			|
			|ИЗ
			|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователя
			|	
			|ГДЕ
			|
			|	СобытияКалендаряПользователя.Дата = &ДатаДняНедели
			|	И
			|	СобытияКалендаряПользователя.Событие <> &ПустоеСобытие
			|	И
			|	СобытияКалендаряПользователя.Пользователь = &ПустойПользователь
			|	И
			|	СобытияКалендаряПользователя.ВидСобытия = &ПустойВидСобытия
			|
			|УПОРЯДОЧИТЬ ПО
			|
			|	СобытияКалендаряПользователя.Событие.НачалоСобытия
			|
			|";
			
			Запрос.УстановитьПараметр("ПустоеСобытие", Документы.Событие.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка()); 
			Запрос.УстановитьПараметр("ПустойВидСобытия", Перечисления.ВидыСобытий.ПустаяСсылка());   
			Запрос.УстановитьПараметр("ДатаДняНедели", ДатаДняНедели);
			Запрос.УстановитьПараметр("ТекущийПользователь", ПользовательКалендаря);
			
			РезультатЗапроса = Запрос.Выполнить();  
			
			ТаблицаСобытийПоПомещениям = РезультатЗапроса.Выгрузить();
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов);
			
			ТаблицаСобытийПоПомещениям.Колонки.Добавить("НомерНачальнойКолонки", ОписаниеТиповЧисло);
			ТаблицаСобытийПоПомещениям.Колонки.Добавить("НомерКонечнойКолонки", ОписаниеТиповЧисло);
			
			Для я = 1 По 48 Цикл
				НовыйСписок = Новый СписокЗначений;
				СписокДняПоПомещениям.Добавить(НовыйСписок);
			КонецЦикла; 
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СобытияКалендаряПользователя.НомерСтрокиТаблицы КАК НомерСтрокиТаблицы,
			|	СобытияКалендаряПользователя.ПорядковыйНомерВДне КАК ПорядковыйНомерВДне,
			|	ВЫБОР
			|	КОГДА
			|		СобытияКалендаряПользователя.Событие = &ПустоеСобытие
			|	ТОГДА
			|		Неопределено
			|	ИНАЧЕ
			|		СобытияКалендаряПользователя.Событие
			|	КОНЕЦ                     КАК Документ
			|
			|ИЗ
			|	РегистрСведений.СобытияКалендаряПользователя КАК СобытияКалендаряПользователя
			|	
			|ГДЕ
			|
			|	СобытияКалендаряПользователя.Дата = &ДатаДняНедели
			|	И
			|	СобытияКалендаряПользователя.Пользователь = &ПустойПользователь
			|
			|УПОРЯДОЧИТЬ ПО
			|
			|	НомерСтрокиТаблицы ВОЗР,
			|	ПорядковыйНомерВДне ВОЗР
			|
			|ИТОГИ ПО
			|
			|	НомерСтрокиТаблицы,
			|	ПорядковыйНомерВДне
			|
			|";
			
			Запрос.УстановитьПараметр("ПустоеСобытие", Документы.Событие.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
			Запрос.УстановитьПараметр("ДатаДняНедели", ДатаДняНедели);
			Запрос.УстановитьПараметр("ТекущийПользователь", ПользовательКалендаря);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаСтрокЗапроса = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСтрокиТаблицы");
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл
				СписокЗначенийСтроки = СписокДняПоПомещениям[ВыборкаСтрокЗапроса.НомерСтрокиТаблицы - 1].Значение;
				
				ВыборкаПолейЗапроса = ВыборкаСтрокЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПорядковыйНомерВДне");
				Пока ВыборкаПолейЗапроса.Следующий() Цикл
					КонечнаяВыборка = ВыборкаПолейЗапроса.Выбрать();
					Пока КонечнаяВыборка.Следующий() Цикл
						Если КонечнаяВыборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
							
							Если СписокЗначенийСтроки.Количество() < ВыборкаПолейЗапроса.ПорядковыйНомерВДне Тогда
								Для б = СписокЗначенийСтроки.Количество() + 1 По ВыборкаПолейЗапроса.ПорядковыйНомерВДне Цикл
									СписокЗначенийСтроки.Добавить(Неопределено);
								КонецЦикла; 
							КонецЕсли; 
							
							СписокЗначенийСтроки[ВыборкаПолейЗапроса.ПорядковыйНомерВДне - 1].Значение = КонечнаяВыборка.Документ;
							
							Прервать;
							
						КонецЕсли; 
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЕсли;
		
		СтруктураЗначенияРеквизита = Новый Структура;
		СтруктураЗначенияРеквизита.Вставить("ТаблицаСобытий", ТаблицаСобытий);
		СтруктураЗначенияРеквизита.Вставить("РасположениеСобытий", СписокДня);
		
		СтруктураЗначенияРеквизита.Вставить("ТаблицаСобытийПоПомещениям", ТаблицаСобытийПоПомещениям);
		СтруктураЗначенияРеквизита.Вставить("РасположениеСобытийПоПомещениям", СписокДняПоПомещениям);
		
		ЭтотОбъект["СобытияНедели_День" + Строка(а)] = СтруктураЗначенияРеквизита;
		
	КонецЦикла;
	
	ДанныеНеделиЗаказы.Очистить();
	
	Если ОтображатьЗаказы Тогда
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ТекущаяДата"                , ТекущаяДата());
		Запрос.УстановитьПараметр("ПустаяДата"                 , '00010101000000');
		Запрос.УстановитьПараметр("ПустоеКонтактноеЛицо"       , Справочники.КонтактныеЛица.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТекПользователь"            , ?(ПользовательКалендаря.Количество() = 1, ПользовательКалендаря[0].Значение, ПользовательКалендаря));
		Запрос.УстановитьПараметр("ДатаКон"                    , КонецНедели(ДатаКалендаря));
		Запрос.УстановитьПараметр("ДатаНач"                    , НачалоНедели(ДатаКалендаря));
		Запрос.УстановитьПараметр("ЗаказПокупателяОтгрузка"    , Перечисления.ВидыДействийПоЗаказамПокупателей.ОтгрузкаПоЗаказу);
		Запрос.УстановитьПараметр("ЗаказПокупателяОплата"      , Перечисления.ВидыДействийПоЗаказамПокупателей.ОплатаПоЗаказу);
		Запрос.УстановитьПараметр("ЗаказПоставщикуПоступление" , Перечисления.ВидыДействийПоЗаказамПоставщикам.ПоступлениеПоЗаказу);
		Запрос.УстановитьПараметр("ЗаказПоставщикуОплата"      , Перечисления.ВидыДействийПоЗаказамПоставщикам.ОплатаПоЗаказу);
		
		Если ОтображаемыеЗаказы = 1 Тогда // Заказы покупателей
			Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапроса_ЗаказыПокупателей();
		ИначеЕсли ОтображаемыеЗаказы = 2 Тогда // Заказы поставщикам
			Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапроса_ЗаказыПоставщикам();
		Иначе // Все заказы, покупателей и поставщикам
			Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапроса_ЗаказыВсе();
		КонецЕсли;
		ВидСравненияПользователь = ВозвратитьСтрокуВидаОтбора(ОтборПользователь[0],"&ТекПользователь");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "$ВидСравненияПользователь$", ВидСравненияПользователь);
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		ТаблицаЗапроса.Сортировать("Дата ВОЗР");
		ДанныеНеделиЗаказы.Загрузить(ТаблицаЗапроса);
		
	КонецЕсли;
	
	ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
	
КонецПроцедуры // СобратьДокументыНедели()

// ПОЧТА

// Процедура обновляет данные доступных учетных записей текущего пользователя
// а так же данные о предопределенных группах учетных записей.
//
Процедура ОбновитьДоступныеУчетныеЗаписи() Экспорт
	
	мСоответствияГруппИсходящие.Очистить();
	мСоответствияГруппВходящие.Очистить();
	мСоответствияГруппУдаленные.Очистить();
	мСоответствияГруппЧерновики.Очистить();
	
	мСтруктураДоступныхУчетныхЗаписей = УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписи(глЗначениеПеременной("глТекущийПользователь"));
	
	мДоступныеУчетныеЗаписи = мСтруктураДоступныхУчетныхЗаписей.Чтение.Скопировать();
	
	мСоответствияГруппИсходящие = мСтруктураДоступныхУчетныхЗаписей.ГруппыИсходящие;
	мСоответствияГруппВходящие  = мСтруктураДоступныхУчетныхЗаписей.ГруппыВходящие;
	мСоответствияГруппУдаленные = мСтруктураДоступныхУчетныхЗаписей.ГруппыУдаленные;
	мСоответствияГруппЧерновики = мСтруктураДоступныхУчетныхЗаписей.ГруппыЧерновики;
	
КонецПроцедуры

// Процедура определяет статистику рассмотренности писем электронной почты
// для быстрого отображения их количества в дереве групп писем электронной почты
// и в списке предметов писем.
//
Процедура СобратьСтатистикуРассмотренностиПисем() Экспорт
	
	мСтатистикаРассмотренностиПисем.Очистить();
	мСтатистикаСохраненныхПисем.Очистить();
	мСтатистикаРассмотренностиПисемПоПредметам.Очистить();
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СписокУчетныхЗаписей", мДоступныеУчетныеЗаписи);
		Запрос.УстановитьПараметр("ТекущаяДата"         , ТекущаяДата());
		
		Запрос.УстановитьПараметр("ТекущийПользователь" , ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("Сохраненное"         , Перечисления.СтатусыПисем.Сохраненное);
		
		мПоследняяДатаОбновленияРассмотренностиПисем = ТекущаяДата();
		
		Если мОтображатьСписокПредметов Тогда
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЭлектронноеПисьмо.ГруппаУчетнойЗаписи                   КАК Группа,
			|	ЭлектронноеПисьмо.ПредметКонтакта                       КАК ПредметКонтакта,
			|	КОЛИЧЕСТВО(ЭлектронноеПисьмо.Ссылка)                    КАК Количество,
			|	СУММА(0)                                                КАК КоличествоЧерновики
			|ИЗ
			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
			|
			|ГДЕ
			|	ЭлектронноеПисьмо.НеРассмотрено = ИСТИНА
			|	И
			|	ЭлектронноеПисьмо.ГруппаУчетнойЗаписи.Владелец В(&СписокУчетныхЗаписей)
			|	И
			|	ЭлектронноеПисьмо.РассмотретьПосле < &ТекущаяДата
			|   "+?(мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю," И ЭлектронноеПисьмо.Ответственный = &ТекущийПользователь","")+"
			|СГРУППИРОВАТЬ ПО
			|	ЭлектронноеПисьмо.ГруппаУчетнойЗаписи, ЭлектронноеПисьмо.ПредметКонтакта
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЭлектронноеПисьмо.УчетнаяЗапись.ГруппаЧерновики         КАК Группа,
			|	ЭлектронноеПисьмо.ПредметКонтакта                       КАК ПредметКонтакта,
			|	СУММА(0)                                                КАК Количество,
			|	КОЛИЧЕСТВО(ЭлектронноеПисьмо.Ссылка)                    КАК КоличествоЧерновики
			|ИЗ
			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
			|
			|ГДЕ
			|	ЭлектронноеПисьмо.СтатусПисьма = &Сохраненное
			|	И 
			|	ЭлектронноеПисьмо.ПометкаУдаления = ЛОЖЬ
			|	И 
			|	ЭлектронноеПисьмо.ГруппаУчетнойЗаписи.Владелец В(&СписокУчетныхЗаписей)
			|   "+?(мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю," И ЭлектронноеПисьмо.Ответственный = &ТекущийПользователь","")+"
			|СГРУППИРОВАТЬ ПО
			|	ЭлектронноеПисьмо.УчетнаяЗапись.ГруппаЧерновики, ЭлектронноеПисьмо.ПредметКонтакта
			|
			|ИТОГИ СУММА(Количество),СУММА(КоличествоЧерновики) ПО
			|	Группа
			|";
			
			ВыборкаГрупп = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Группа");
			Пока ВыборкаГрупп.Следующий() Цикл
				мСтатистикаРассмотренностиПисем.Вставить(ВыборкаГрупп.Группа, ВыборкаГрупп.Количество);
				мСтатистикаСохраненныхПисем.Вставить(ВыборкаГрупп.Группа, ВыборкаГрупп.КоличествоЧерновики);
				ВыборкаПредметов = ВыборкаГрупп.Выбрать();
				СоответствиеГруппаПредмет = Новый Соответствие;
				Пока ВыборкаПредметов.Следующий() Цикл
					СоответствиеГруппаПредмет.Вставить(ВыборкаПредметов.ПредметКонтакта, ВыборкаПредметов.Количество);
				КонецЦикла; 
				Если СоответствиеГруппаПредмет.Количество() > 0 Тогда
					мСтатистикаРассмотренностиПисемПоПредметам.Вставить(ВыборкаГрупп.Группа, СоответствиеГруппаПредмет);
				КонецЕсли; 
			КонецЦикла;
			
		Иначе
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЭлектронноеПисьмо.ГруппаУчетнойЗаписи                   КАК Группа,
			|	КОЛИЧЕСТВО(ЭлектронноеПисьмо.Ссылка)                    КАК Количество,
			|	СУММА(0)                                                КАК КоличествоЧерновики
			|ИЗ
			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
			|
			|ГДЕ
			|	ЭлектронноеПисьмо.НеРассмотрено = ИСТИНА
			|	И
			|	ЭлектронноеПисьмо.ГруппаУчетнойЗаписи.Владелец В(&СписокУчетныхЗаписей)
			|	И
			|	ЭлектронноеПисьмо.РассмотретьПосле < &ТекущаяДата
			|   "+?(мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю," И ЭлектронноеПисьмо.Ответственный = &ТекущийПользователь","")+"
			|СГРУППИРОВАТЬ ПО
			|	ЭлектронноеПисьмо.ГруппаУчетнойЗаписи
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЭлектронноеПисьмо.УчетнаяЗапись.ГруппаЧерновики         КАК Группа,
			|	СУММА(0)                                                КАК Количество,
			|	КОЛИЧЕСТВО(ЭлектронноеПисьмо.Ссылка)                    КАК КоличествоЧерновики
			|ИЗ
			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
			|
			|ГДЕ
			|	ЭлектронноеПисьмо.СтатусПисьма = &Сохраненное
			|	И 
			|	ЭлектронноеПисьмо.ПометкаУдаления = ЛОЖЬ
			|	И 
			|	ЭлектронноеПисьмо.ГруппаУчетнойЗаписи.Владелец В(&СписокУчетныхЗаписей)
			|   "+?(мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю," И ЭлектронноеПисьмо.Ответственный = &ТекущийПользователь","")+"
			|СГРУППИРОВАТЬ ПО
			|	ЭлектронноеПисьмо.УчетнаяЗапись.ГруппаЧерновики
			|
			|ИТОГИ СУММА(Количество),СУММА(КоличествоЧерновики) ПО
			|	Группа
			|";
			
			Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Группа");
			Пока Выборка.Следующий() Цикл
				мСтатистикаРассмотренностиПисем.Вставить(Выборка.Группа, Выборка.Количество);
				мСтатистикаСохраненныхПисем.Вставить(Выборка.Группа, Выборка.КоличествоЧерновики);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Сообщить("У Вас закрыт доступ к таблицам, обслуживающим электронную почту.");
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

# Если Клиент Тогда
	
Процедура СоздатьОпрос(ТекущийПредмет) Экспорт
	
	ЗапросПоПредмету = Новый Запрос;
	ЗапросПоПредмету.УстановитьПараметр("ПредметКонтакта", ТекущийПредмет);
	ЗапросПоПредмету.УстановитьПараметр("Отправленное", Перечисления.СтатусыПисем.Отправленное);
	ЗапросПоПредмету.УстановитьПараметр("Полученное", Перечисления.СтатусыПисем.Полученное);
	ЗапросПоПредмету.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредметыЭлектронныхПисем.Регистратор КАК ЭП,
	|	ВЫБОР КОГДА ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО ""%.xml"" ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕстьРезультатОпроса,
	|	ВЫБОР КОГДА ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО ""%.xml"" ТОГДА ВложенияЭлектронныхПисем.Хранилище КОНЕЦ КАК Хранилище,
	|	ВЫРАЗИТЬ(ПредметыЭлектронныхПисем.Регистратор КАК Документ.ЭлектронноеПисьмо).КомуТЧ.(
	|		ВЫБОР КОГДА ВЫРАЗИТЬ(ПредметыЭлектронныхПисем.Регистратор КАК Документ.ЭлектронноеПисьмо).СтатусПисьма = &Отправленное ТОГДА ВЫРАЗИТЬ(ПредметыЭлектронныхПисем.Регистратор КАК Документ.ЭлектронноеПисьмо).КомуТЧ.АдресЭлектроннойПочты ИНАЧЕ """" КОНЕЦ КАК АдресКому
	|	) КАК Кому,
	|	ВЫБОР КОГДА ВЫРАЗИТЬ(ПредметыЭлектронныхПисем.Регистратор КАК Документ.ЭлектронноеПисьмо).СтатусПисьма = &Полученное ТОГДА ВЫРАЗИТЬ(ПредметыЭлектронныхПисем.Регистратор КАК Документ.ЭлектронноеПисьмо).ОтправительАдресЭлектроннойПочты ИНАЧЕ """" КОНЕЦ КАК АдресОтКого
	|ИЗ
	|	РегистрСведений.ПредметыЭлектронныхПисем КАК ПредметыЭлектронныхПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
	|		ПО ПредметыЭлектронныхПисем.Регистратор = ВложенияЭлектронныхПисем.Объект
	|
	|ГДЕ
	|	ПредметыЭлектронныхПисем.Предмет = &ПредметКонтакта И
	|	(ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма = """") И
	|	(ВложенияЭлектронныхПисем.Объект.Ссылка ССЫЛКА Документ.ЭлектронноеПисьмо)";
	РезультатЗапроса = ЗапросПоПредмету.Выполнить();
	ВыборкаЗапроса 	 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	ОбработкаРезультатовАнкетирования = Обработки.ЗагрузкаРезультатовАнкетирования.Создать();
	
	ЕстьРезультатОпроса = Ложь;
	Пока ВыборкаЗапроса.Следующий() Цикл
		Если ВыборкаЗапроса.ЕстьРезультатОпроса тогда
			ЕстьРезультатОпроса = Истина;
			ХранилищеИзЗапроса = ВыборкаЗапроса.Хранилище.Получить();
			//Попытка
			ИмяВрФайла = ПолучитьИмяВременногоФайла();
			ХранилищеИзЗапроса.Записать(ИмяВрФайла);
			Файл = Новый ЧтениеXML();
			Файл.ОткрытьФайл(ИмяВрФайла);
			ОбъектЗагрузки 	= ОбработкаРезультатовАнкетирования.НайтиОбъектДляЗагрузки(Файл);
			Анкета 			= ОбработкаРезультатовАнкетирования.ПолучитьАнкетуИзФайла(Файл);
			ДатаОпроса 		= ОбработкаРезультатовАнкетирования.ПолучитьДатуФормированияАнкеты(Файл);
			
			Если Анкета = Неопределено тогда
				Продолжить;
			КонецЕсли;
			Если ОбъектЗагрузки = Неопределено тогда
				// если объект загрузки найти по ИдОпрашиваемого найти не удалось, тогда пробуем его найти
				// по ФИО и дате рождения, если это физлицо(конт. лицо), либо по ИНН, если это контрагент
				Файл.ОткрытьФайл(ИмяВрФайла);
				ОбъектЗагрузки = ОбработкаРезультатовАнкетирования.НайтиОбъектПоАнкетнымДанным(Файл, Анкета);
			КонецЕсли;
			ДокОпрос = ОбработкаРезультатовАнкетирования.НайтиДокументОпрос(ДатаОпроса, Анкета);
			Если НЕ ЗначениеЗаполнено(ОбъектЗагрузки) тогда
				ОбъектЗагрузки = ОбработкаРезультатовАнкетирования.НайтиОбъектПоАнкетнымДанным(Файл, Анкета);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокОпрос) тогда
				
				Ответ = Вопрос("Найден документ опрос по данной анкете. Возможно такой документ уже есть в ИБ. Продолжить зарузку данных?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
				Если Ответ = КодВозвратаДиалога.Нет тогда
					ФормаОЗ = ДокОпрос.ПолучитьФорму("ФормаДокумента");
					ФормаОЗ.Открыть();
					Сообщить("Найден документ опрос по данной анкете.");
					Возврат;
				ИначеЕсли Ответ = КодВозвратаДиалога.Отмена тогда
					Возврат;
				КонецЕсли;   
				
			КонецЕсли;
			
			Файл.ОткрытьФайл(ИмяВрФайла);
			ДокРассылки 		= ОбработкаРезультатовАнкетирования.ПолучитьДокРассылкиИзФайла(Файл);
			Если НЕ ЗначениеЗаполнено(Анкета) тогда
				Продолжить;
			КонецЕсли;
			// загружаем в документ Опрос
			ДокОпроса = Документы.Опрос.СоздатьДокумент();
			
			Пока Файл.Прочитать() Цикл
				Если (Файл.ТипУзла  = ТипУзлаXML.НачалоЭлемента) и ((Файл.Имя = "Вопрос")) Тогда
					Значение 		= Файл.ПолучитьАтрибут("Ид");
					Если Значение 	= "" Тогда
						Файл.Прочитать();
						Продолжить; // Пустые вопросы пропускаем
					КонецЕсли;
					ОбработкаРезультатовАнкетирования.ПрочитатьВопрос(Файл, ДокОпроса);
				КонецЕсли;
			КонецЦикла;
			Файл.Закрыть();
			
			ДокОпроса.ОпрашиваемоеЛицо = ОбъектЗагрузки;
			ДокОпроса.Ответственный    = ПараметрыСеанса.ТекущийПользователь;
			ДокОпроса.ТиповаяАнкета	   = Анкета;
			ДокОпроса.Рассылка 		   = ДокРассылки;
			ДокОпроса.Дата			   = ДатаОпроса;
			ДокОпроса.ПолучитьФорму("ФормаДокумента").ОткрытьМодально();
			ОбработкаПрерыванияПользователя();
			
			//Исключение
			//	Сообщить("При загрузке файла " + ИмяВрФайла + " произошла ошибка");
			//КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЕстьРезультатОпроса Тогда
		Предупреждение("Не найден xml файл с результатами опроса!");
	КонецЕсли;
КонецПроцедуры

// КАЛЕНДАРЬ

// Функция определяет начало и окончание рабочего дня пользователя, по его графику работы
//
// Параметры
//  Пользователь - СправочникСсылка.Пользователи, пользователь по которому определяются
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция мОпределитьНачалоИОкончаниеРабочегоДняПользователя(Пользователь, РабочаяДата) Экспорт
	
	НайденнаяСтруктура = СоответствиеНачалоИОкончаниеРабочегоДняПользователя.Получить(РабочаяДата);
	Если НайденнаяСтруктура <> Неопределено Тогда
		Возврат НайденнаяСтруктура;
	КонецЕсли;
	
	СтруктураВозврата = УправлениеКонтактами.ОпределитьНачалоИОкончаниеРабочегоДняПользователя(Пользователь, РабочаяДата);
	СоответствиеНачалоИОкончаниеРабочегоДняПользователя.Вставить(РабочаяДата,СтруктураВозврата);
	
	Возврат СтруктураВозврата;
	
КонецФункции // УправлениеКонтактами.ОпределитьНачалоИОкончаниеРабочегоДняПользователя()

# КонецЕсли

// КАЛЕНДАРЬ

// Заполним реквизиты обработки по умолчанию
ДатаНач = Дата("000101010000");
ДатаКон = Дата("000101010000");

Отборы = Новый Соответствие;
МассивЗначенийОтбора = Новый Массив;
МассивЗначенийОтбора.Добавить(ВидСравнения.ВСписке);
МассивЗначенийОтбора.Добавить(ПользовательКалендаря);
Отборы.Вставить("Пользователь", МассивЗначенийОтбора);
СтруктураОтборов = Отборы;

мСписокКлючейСтруктурыСобытий = Новый СписокЗначений;
мСписокКлючейСтруктурыСобытий.Добавить("Документ");
мСписокКлючейСтруктурыСобытий.Добавить("ДатаНачалаСобытия");
мСписокКлючейСтруктурыСобытий.Добавить("ДатаКонцаСобытия");
мСписокКлючейСтруктурыСобытий.Добавить("ОписаниеСобытия");
мСписокКлючейСтруктурыСобытий.Добавить("Контрагент");
мСписокКлючейСтруктурыСобытий.Добавить("КонтактноеЛицо");
мСписокКлючейСтруктурыСобытий.Добавить("Важность");
мСписокКлючейСтруктурыСобытий.Добавить("СостояниеСобытия");
мСписокКлючейСтруктурыСобытий.Добавить("ТипСобытия");
мСписокКлючейСтруктурыСобытий.Добавить("ВидСобытия");

мСписокОтборов              = Новый СписокЗначений;
мСтруктураПредставленийОтборов = Новый Структура;

мСтруктураПредставленийОтборов.Вставить("Дата", "Дата документа");
мСтруктураПредставленийОтборов.Вставить("ДатаСобытия", "Дата события");
мСписокОтборов.Добавить("Контрагент","СправочникСсылка.Контрагенты");
мСтруктураПредставленийОтборов.Вставить("Контрагент", "Контрагент");
мСписокОтборов.Добавить("Пользователь","СправочникСсылка.Пользователи");
мСписокОтборов.Добавить("КонтактноеЛицо","СправочникСсылка.КонтактныеЛицаКонтрагентов");
мСтруктураПредставленийОтборов.Вставить("КонтактноеЛицо", "Контактное лицо");
мСписокОтборов.Добавить("Пользователь","СписокЗначений");
мСтруктураПредставленийОтборов.Вставить("Пользователь", "Ответственный");
мСписокОтборов.Добавить("Важность","ПеречислениеСсылка.Важность");
мСтруктураПредставленийОтборов.Вставить("Важность", "Важность события");
мСписокОтборов.Добавить("Тип","ПеречислениеСсылка.ВходящееИсходящееСобытие");
мСтруктураПредставленийОтборов.Вставить("Тип", "Тип события");
мСписокОтборов.Добавить("Номер","Строка");
мСтруктураПредставленийОтборов.Вставить("Номер", "Номер документа");
мСписокОтборов.Добавить("ТипДокумента","ОписаниеТипов");
мСтруктураПредставленийОтборов.Вставить("ТипДокумента", "Тип документа");
мСписокОтборов.Добавить("ВидОперации","");
мСтруктураПредставленийОтборов.Вставить("ВидОперации", "Вид операции");

// ПОЧТА
мПоследняяДатаОбновленияРассмотренностиПисем = '00010101000000';
# Если Клиент Тогда
мОтображатьСписокПредметов = Истина;

// Воссатновим сохраненное значение отображения списка предметов
СохраненноеЗначениеКнопки = ВосстановитьЗначение("ПометкаКнопкиОтображенияСпискаПредметов");
Если ТипЗнч(СохраненноеЗначениеКнопки) = Тип("Булево") Тогда
	мОтображатьСписокПредметов = СохраненноеЗначениеКнопки;
Иначе
	мОтображатьСписокПредметов = Ложь;
КонецЕсли;

// Воссатновим сохраненное значение отображения рассмотренности писем
СохраненноеЗначениеКнопки = ВосстановитьЗначение("ПометкаКнопкиРассмотренностиПоТекущемуПользователю");
Если ТипЗнч(СохраненноеЗначениеКнопки) = Тип("Булево") Тогда
	мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю = СохраненноеЗначениеКнопки;
Иначе
	мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю = Ложь;
КонецЕсли;
# КонецЕсли

// Инициализируем переменные объекта
мСоответствияГруппВходящие  = Новый Соответствие;
мСоответствияГруппИсходящие = Новый Соответствие;
мСоответствияГруппУдаленные = Новый Соответствие;
мСоответствияГруппЧерновики = Новый Соответствие;

мСтатистикаРассмотренностиПисем            = Новый Соответствие;
мСтатистикаСохраненныхПисем                = Новый Соответствие;
мСтатистикаРассмотренностиПисемПоПредметам = Новый Соответствие;
СоответствиеНачалоИОкончаниеРабочегоДняПользователя = Новый Соответствие;
ОбновитьДоступныеУчетныеЗаписи();
