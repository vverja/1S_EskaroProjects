#Если Клиент Тогда

Перем мЭтоЗаполнениеВсехОбъектов;
Перем мКешПредопределенных;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Получить для реквизита менеджер соответствующего ему объекта метаданных
Функция ПолучитьМенеджерПоТипу2(ТипРеквизита)
	
	Если ТипРеквизита = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита);
	Если МетаданныеТипа = Неопределено Тогда
		// нет такого типа - скорее всего он примитивный
		Возврат Неопределено;
	КонецЕсли; 
	
	Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
	 	// Это справочник
		Менеджер = Справочники[МетаданныеТипа.Имя];	
	ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеТипа) Тогда
		// Это перечисление
		Менеджер = Перечисления[МетаданныеТипа.Имя];
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеТипа) Тогда
	 	// Это план счетов
		Менеджер = ПланыСчетов[МетаданныеТипа.Имя];
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) Тогда
	 	// Это план Видов Характеристик
		Менеджер = ПланыВидовХарактеристик[МетаданныеТипа.Имя];
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеТипа) Тогда
	 	// Это план ВидовРасчета
		Менеджер = ПланыВидовРасчета[МетаданныеТипа.Имя];
	Иначе
		//Для примитивных типов менеджер не нужен
		Менеджер = Неопределено; 
	КонецЕсли; 
	
	Возврат Менеджер;
	
КонецФункции

// Получить для реквизита менеджер соответствующего ему объекта метаданных
Функция ПолучитьМенеджерПоТипу(ТипРеквизита, ИмяОбъектаМД)
	
	СтрокаТипа = Строка(ТипРеквизита);
	
	Если Найти(Строка(ТипРеквизита),",") <> 0 Тогда
		//Это составной тип
		Менеджер = Неопределено; 
	ИначеЕсли	(Найти(СтрокаТипа,"Перечисление") = 1) или (Найти(СтрокаТипа,"Перечисление") = 1) Тогда
		Менеджер = Перечисления[ИмяОбъектаМД];
	ИначеЕсли (Найти(СтрокаТипа,"Справочник") = 1) или (Найти(СтрокаТипа,"Справочник") = 1) Тогда	
		Менеджер = Справочники[ИмяОбъектаМД];
	ИначеЕсли (Найти(СтрокаТипа,"План счетов") = 1) или (Найти(СтрокаТипа,"ПланСчетов") = 1) Тогда	
		Менеджер = ПланыСчетов[ИмяОбъектаМД];
	ИначеЕсли (Найти(СтрокаТипа,"План видов характеристик") = 1) или (Найти(СтрокаТипа,"ПланВидовХарактеристик") = 1) Тогда	
		Менеджер = ПланыВидовХарактеристик[ИмяОбъектаМД];	
	ИначеЕсли (Найти(СтрокаТипа,"План видов расчета") = 1) или (Найти(СтрокаТипа,"ПланВидовРасчета") = 1) Тогда	
		Менеджер = ПланыВидовРасчета[ИмяОбъектаМД];
	Иначе
		//Для примитивных типов менеджер не нужен
		Менеджер = Неопределено; 
	КонецЕсли;
	
	Возврат Менеджер;
	
КонецФункции

Функция СформированиеЗначениеСсылочногоТипа(ТипРеквизита, ЗначениеРеквизита, СоздаватьЭлементыСправочников = Ложь)
	
	Менеджер = ПолучитьМенеджерПоТипу2(ТипРеквизита);
	
	Если Менеджер = Неопределено Тогда
		// нет смысла дальше искать ...
		Возврат ЗначениеРеквизита;
	КонецЕсли;
	
	Значение = Неопределено;
	
	// сначала попробуем получить предопределенный
	Значение = ПолучитьПредопределенный(ТипРеквизита, Менеджер, ЗначениеРеквизита);
	
	// если предопределенного нет, поищем по коду
	Если Значение = Неопределено Тогда
		// проверим, можно ли искать по коду
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипРеквизита) ИЛИ
			ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипРеквизита) ИЛИ
			ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипРеквизита) ИЛИ
			ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда 
			// можно искать по коду
			Значение = Менеджер.НайтиПоКоду(ЗначениеРеквизита);
			Если Значение = Менеджер.ПустаяСсылка() Тогда
				Значение = Неопределено;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	// Если не нашли и по коду, то тут надо что то решать
	Если Значение = Неопределено И СоздаватьЭлементыСправочников = Истина Тогда
		Если Менеджер = Справочники.Номенклатура 
			И НЕ ПустаяСтрока(ЗначениеРеквизита) Тогда
			//для номенклатуры находим по имени или создаём группу
			Значение = Менеджер.НайтиПоНаименованию(ЗначениеРеквизита,Истина,Менеджер.ПустаяСсылка());
			Если Значение = Менеджер.ПустаяСсылка() Тогда
				Группа = Менеджер.СоздатьГруппу();
				Группа.Наименование = ЗначениеРеквизита;
				Группа.Записать();
				Значение = Группа.Ссылка;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	// если и после этого не создали, то ругаемся 
	Если Значение = Неопределено Тогда
		Если НЕ ПустаяСтрока(ЗначениеРеквизита) Тогда
			Сообщить(Локализация.СтрШаблон("Не удалось получить значение ¤1¤ по типу ¤2¤!", ЗначениеРеквизита, ТипРеквизита));
		КонецЕсли;
		Возврат ЗначениеРеквизита;
	Иначе
		Возврат Значение;
	КонецЕсли;
КонецФункции // ()
 
// Сформировать значение реквизита по его типу
// Если для реквизита есть менеджер в ТаблицаТипов то берем оттуда,
// иначе берем тип из Параметр,
// иначе возвращаем само ЗначениеРеквизита
//
Функция СформироватьЗначение2(ТаблицаТипов, ИмяРеквизита, ЗначениеРеквизита, Параметр, СоздаватьЭлементыСправочников = Ложь)
	
	ТекущаяСтрока = ТаблицаТипов.Найти(ИмяРеквизита,"Реквизит");
	Если ТекущаяСтрока.Менеджер <> Неопределено Тогда
		Возврат СформированиеЗначениеСсылочногоТипа(ТекущаяСтрока.Тип, ЗначениеРеквизита, СоздаватьЭлементыСправочников)
	Иначе
		Если ТекущаяСтрока.Тип = Тип("Булево") Тогда
			Если ЗначениеРеквизита = "Истина" или ЗначениеРеквизита = "Істина" Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;	
        //Менеджера нет, посмотрим что в параметре
		ИначеЕсли Параметр = "" Тогда
			//В параметре ничего нет, значит мы тут ничем не поможем
			Возврат ЗначениеРеквизита;
		Иначе
			//В параметре указан конкретный тип
			Возврат СформированиеЗначениеСсылочногоТипа(Тип(Параметр), ЗначениеРеквизита, СоздаватьЭлементыСправочников)
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции	

Функция ПолучитьСписокПреодпределенных(ПолноеИмяОбъекта, Менеджер)

	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСправочника.Ссылка
	|ИЗ
	|	"+ПолноеИмяОбъекта+" КАК ТаблицаСправочника
	|ГДЕ
	|	ТаблицаСправочника.Предопределенный = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Имя = Менеджер.ПолучитьИмяПредопределенного(Выборка.Ссылка);
		Если НЕ ПустаяСтрока(Имя) Тогда
			 Результат.Добавить(Имя,Имя);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтруктуруПреодпределенных(()
 
Функция ПолучитьИмяДляСтруктуры(ПолноеИмяОбъекта)
	
	Возврат СтрЗаменить(ПолноеИмяОбъекта,".","_");
	
КонецФункции // ПолучитьИмяДляСтруктуры()

Функция ПолучитьПредопределенный(ТипРеквизита, Менеджер, ИмяПредопределенного)
	
	Перем СписокПредопределенных;
	
	Если ПустаяСтрока(ИмяПредопределенного) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипРеквизита);
	Если Метаданные.Перечисления.Содержит(МетаданныеОбъекта) Тогда
		// Это перечисление
		ЗначениеПеречисления = МетаданныеОбъекта.ЗначенияПеречисления.Найти(ИмяПредопределенного);
		Если НЕ ЗначениеПеречисления = Неопределено Тогда
			Результат = Менеджер[ИмяПредопределенного];
		КонецЕсли;
	Иначе
		ПервыйСимвол = Лев(ИмяПредопределенного,1);
		Если Нрег(ПервыйСимвол) = Врег(ПервыйСимвол) Тогда
			// если первый символ одинаков в верхнем и нижнем регистре
			// , то это не буква, и это не имя предопределенного, а код
			// прекращаем поиск
			Возврат Неопределено;
		КонецЕсли; 
		ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
		мКешПредопределенных.Свойство(ПолучитьИмяДляСтруктуры(ПолноеИмяОбъекта),СписокПредопределенных);
		Если СписокПредопределенных = Неопределено Тогда
			// еще нет в кеше
			СписокПредопределенных = ПолучитьСписокПреодпределенных(ПолноеИмяОбъекта, Менеджер);
			мКешПредопределенных.Вставить(ПолучитьИмяДляСтруктуры(МетаданныеОбъекта.ПолноеИмя()),СписокПредопределенных);
		КонецЕсли;
		
		Если НЕ СписокПредопределенных.НайтиПоЗначению(ИмяПредопределенного) = Неопределено Тогда
			// есть такой предопределенный, можно получать
			Результат = Менеджер[ИмяПредопределенного];
		Иначе
			//Сообщить("Не найден предопределённый элемент "+ИмяПредопределенного+" для "+ПолноеИмяОбъекта);
			Результат = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	
	//Если Результат = Неопределено Тогда
	//	ОбщегоНазначения.СообщитьСлужебнуюИнформацию("Не найден предопределенный элемент "+ИмяПредопределенного+" для "+Менеджер);
	//КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция КодЭлементаУникален(ИмяОбъекта, Код, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСправочника.Ссылка
	|ИЗ
	|	"+ИмяОбъекта+" КАК ТаблицаСправочника
	|ГДЕ
	|	ТаблицаСправочника.Код = &Код
	|	И ТаблицаСправочника.Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("Код",Код);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Возврат Запрос.Выполнить().Пустой();
	

КонецФункции

// Получает из макета начального заполнения настройку по имени
Функция ПрочитатьНастройкуИзМакета(Макет, ИмяНастройки, ЗначениеПоУмолчанию = ложь);
	
	ОбластьНастройки = Макет.Области.Найти(ИмяНастройки);
	Если НЕ ОбластьНастройки = Неопределено Тогда
		ОбластьНастройки = Макет.ПолучитьОбласть(ИмяНастройки);
	    Возврат Булево(ОбластьНастройки.Область(1, 1).Текст);
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли; 

КонецФункции // ()
 
Функция СуществуетЗаписьРегистраСведений(ИмяОбъекта,СтруктураИзмерений)
	
	Запрос = Новый Запрос;
	
	ЭтоПервый = Истина;
	Для каждого ЭлементСтруктуры Из СтруктураИзмерений Цикл
		Если ЭтоПервый Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаРС."+ЭлементСтруктуры.Ключ+"
			|ИЗ
			|	РегистрСведений."+ИмяОбъекта+" КАК ТаблицаРС  
			|ГДЕ
			|	";
		Иначе
			Запрос.Текст = Запрос.Текст + " И ";
		КонецЕсли;
		ЭтоПервый = Ложь;
		Запрос.Текст = Запрос.Текст + "ТаблицаРС."+ЭлементСтруктуры.Ключ+" = &"+ЭлементСтруктуры.Ключ + "
						|";
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Преобразовывает из формата "ДД.ММ.ГГГГ [ЧЧ:мм:сс]" в дату, не зависимо от настроек формата
Функция ПолучитьДатуПоСтроке(Знач ДатаСтрокой, ИмяОбъекта, ИмяИзмерения)
	
	ДатаСтрокой = СокрЛП(ДатаСтрокой);
	Если ПустаяСтрока(ДатаСтрокой) Тогда
		Возврат '00010101';
	ИначеЕсли Найти(ДатаСтрокой,":") <> 0 Тогда
		// есть время
		Если СтрДлина(ДатаСтрокой)<>19 Тогда
			Сообщить(Локализация.СтрШаблон("Ошибка при заполнении объекта ¤1¤! При заполнении измерения ¤2¤ не удалось преобразовать ""¤3¤"" к дате!", ИмяОбъекта, ИмяИзмерения, ДатаСтрокой));
			Возврат '00010101';
		Иначе
			Возврат Дата(Число(Сред(ДатаСтрокой,7,4)), Число(Сред(ДатаСтрокой,4,2)), Число(Сред(ДатаСтрокой,1,2)), Число(Сред(ДатаСтрокой,12,2)), Число(Сред(ДатаСтрокой,15,2)), Число(Сред(ДатаСтрокой,18,2)));
		КонецЕсли; 
	Иначе
		Если СтрДлина(ДатаСтрокой)<>10 Тогда
			Сообщить(Локализация.СтрШаблон("Ошибка при заполнении объекта ¤1¤! При заполнении измерения ¤2¤ не удалось преобразовать ""¤3¤"" к дате!", ИмяОбъекта, ИмяИзмерения, ДатаСтрокой));
			Возврат '00010101';
		Иначе
			Возврат Дата(Число(Сред(ДатаСтрокой,7,4)), Число(Сред(ДатаСтрокой,4,2)), Число(Сред(ДатаСтрокой,1,2)));
		КонецЕсли; 
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ОБЪЕКТОВ

// Выполняет начальное заполнение справочника
Процедура ЗаполнитьСправочник(ИмяОбъекта)
	
	МетаданныеСправочника = Метаданные.Справочники.Найти(ИмяОбъекта);
	Если МетаданныеСправочника = Неопределено Тогда
		// нет такого справочника
		Возврат;
	КонецЕсли;
	
	ТипСправочника = Тип("СправочникСсылка."+МетаданныеСправочника.Имя);
	ИмяМакета = "НачальноеЗаполнение";
	
	ЕстьМакет = МетаданныеСправочника.Макеты.Найти(ИмяМакета);
	Если ЕстьМакет = Неопределено Тогда
		// нет такого макета
		Возврат;
	КонецЕсли;
	
	Макет = Справочники[ИмяОбъекта].ПолучитьМакет(ИмяМакета);
	
	
	Состояние("Заполняется справочник "+МетаданныеСправочника.Синоним);
	
	ЧислоРеквизитов = Макет.ШиринаТаблицы; 
	
	ТаблицаРеквизитов = Новый ("ТаблицаЗначений");
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("Тип"); 
	ТаблицаРеквизитов.Колонки.Добавить("Менеджер"); 
	
	//Формируем таблицу типов реквизитов
 	Для Сч = 4 по ЧислоРеквизитов Цикл
		
		ИмяРеквизита = Макет.Область(1, Сч).Текст;
		
		МетаданныеРеквизита = МетаданныеСправочника.Реквизиты.Найти(ИмяРеквизита);
		Если ИмяОбъекта = "СпособыОтраженияРасходовПоАмортизации" Тогда
			МетаданныеРеквизита = МетаданныеСправочника.ТабличныеЧасти.Способы.Реквизиты.Найти(ИмяРеквизита);
		КонецЕсли;
		
		Если МетаданныеРеквизита = Неопределено Тогда
			
			// возможно это указание реквизита вместе с его типом
			ПозицияУказанияТипа = Найти(ВРЕГ(ИмяРеквизита), ВРЕГ("%Тип%"));
			Если ПозицияУказанияТипа > 0 Тогда
				
				Тип = Сред(ИмяРеквизита,ПозицияУказанияТипа + 5);
				ТипРеквизита = Тип(Тип);
				
				ИмяРеквизита = Лев(ИмяРеквизита, ПозицияУказанияТипа - 1);
				
				МетаданныеРеквизита = МетаданныеСправочника.Реквизиты.Найти(ИмяРеквизита);
				Если ИмяОбъекта = "СпособыОтраженияРасходовПоАмортизации" Тогда
					МетаданныеРеквизита = МетаданныеСправочника.ТабличныеЧасти.Способы.Реквизиты.Найти(ИмяРеквизита);
				КонецЕсли;
				
			КонецЕсли;
			
			Если МетаданныеРеквизита = Неопределено Тогда
				Сообщить(Локализация.СтрШаблон("Ошибка при заполнении объекта ¤1¤! Не найден реквизит ¤2¤."
"Объект не заполнен!", ИмяОбъекта, ИмяРеквизита));
				Возврат;
			
			КонецЕсли;
			
		Иначе
			
			ТипыРеквизита = МетаданныеРеквизита.Тип.Типы();
			ТипРеквизита  = Неопределено;
			Если ТипыРеквизита.Количество() = 1 Тогда
				ТипРеквизита = ТипыРеквизита[0];
			КонецЕсли;
			
		КонецЕсли;		
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит = ИмяРеквизита;
		НоваяСтрока.Тип 	 = ТипРеквизита;
		НоваяСтрока.Менеджер = ПолучитьМенеджерПоТипу2(ТипРеквизита);
		
	КонецЦикла;	
		
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	ЗаполняемыйСправочник = Справочники[ИмяОбъекта];
	
	//Заполняем справочник
	Для Сч = 2 По КоличествоЗаписей Цикл
		
		ФлагИзменений = Ложь;
		
		//Предопределенные реквизиты
		Имя = Макет.Область(Сч, 1).Текст;
		Код = Макет.Область(Сч, 2).Текст;
		Наименование = Макет.Область(Сч, 3).Текст;
		
		СсылкаНаЭлемент = ПолучитьПредопределенный(ТипСправочника, ЗаполняемыйСправочник, Имя);
		Если СсылкаНаЭлемент = Неопределено Тогда
			Сообщить(Локализация.СтрШаблон("Не найден предопределённый элемент ¤1¤ для справочника ¤2¤", Имя, ИмяОбъекта));
			Возврат;
		КонецЕсли;
		ТекущаяЗапись = СсылкаНаЭлемент.ПолучитьОбъект();
		
		ТекущаяЗапись.ОбменДанными.Загрузка = Истина;
		
		Если МетаданныеСправочника.ДлинаКода > 0 Тогда
			Если НЕ ПустаяСтрока(Код) И (Код <> ТекущаяЗапись.Код) Тогда
				ТекущаяЗапись.Код = Код;
				ФлагИзменений = Истина;
			Конецесли;
		Конецесли;
		
		Если МетаданныеСправочника.ДлинаНаименования > 0 Тогда
			Если НЕ ПустаяСтрока(Наименование) И (Наименование <> ТекущаяЗапись.Наименование) Тогда
				ТекущаяЗапись.Наименование = Наименование;
				ФлагИзменений = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяОбъекта = "СпособыОтраженияРасходовПоАмортизации" Тогда
			СправочникОбъект = ТекущаяЗапись;
			Если ТекущаяЗапись.Способы.Количество() = 0 Тогда
				ТекущаяЗапись = ТекущаяЗапись.Способы.Добавить();	
			Иначе
				ТекущаяЗапись = ТекущаяЗапись.Способы[0];	
			КонецЕсли;
			МетаданныеРеквизита = МетаданныеСправочника.ТабличныеЧасти.Способы.Реквизиты.Найти(ИмяРеквизита);
		КонецЕсли;
		
		//Дополнительные реквизиты
		Для СчК = 4 по ЧислоРеквизитов Цикл
					
			ИмяРеквизита = Макет.Область(1, СчК).Текст;
			ЗначениеРеквизита = Макет.Область(Сч, СчК).Текст;
			Параметр = СтрЗаменить(Макет.Область(Сч, СчК).ПараметрРасшифровки,"_",".");
			
			МетаданныеРеквизита = МетаданныеСправочника.Реквизиты.Найти(ИмяРеквизита);
			
			Если ИмяОбъекта = "СпособыОтраженияРасходовПоАмортизации" Тогда
				МетаданныеРеквизита = МетаданныеСправочника.ТабличныеЧасти.Способы.Реквизиты.Найти(ИмяРеквизита);
			КонецЕсли;
			
			Если МетаданныеРеквизита = Неопределено Тогда
				
				ПозицияУказанияТипа = Найти(ВРЕГ(ИмяРеквизита), ВРЕГ("%Тип%"));
				Если ПозицияУказанияТипа > 0 Тогда
					
					ИмяРеквизита = Лев(ИмяРеквизита, ПозицияУказанияТипа - 1);
					
					МетаданныеРеквизита = МетаданныеСправочника.Реквизиты.Найти(ИмяРеквизита);
					
					Если ИмяОбъекта = "СпособыОтраженияРасходовПоАмортизации" Тогда
						МетаданныеРеквизита = МетаданныеСправочника.ТабличныеЧасти.Способы.Реквизиты.Найти(ИмяРеквизита);
					КонецЕсли;
					
				КонецЕсли;
				
				
				Если МетаданныеРеквизита = Неопределено Тогда
				
					Сообщить(Локализация.СтрШаблон("Не найден реквизит ¤1¤ справочника ¤2¤!", ИмяРеквизита, ИмяОбъекта));
					Продолжить;
					
				КонецЕсли;				
				
			КонецЕсли;
			
			НовоеЗначение = СформироватьЗначение2(ТаблицаРеквизитов, ИмяРеквизита, ЗначениеРеквизита, Параметр);
			Если НовоеЗначение <> ТекущаяЗапись[ИмяРеквизита] Тогда
				Если      ЗначениеЗаполнено(НовоеЗначение)
					  ИЛИ ЗначениеЗаполнено(ТекущаяЗапись[ИмяРеквизита]) Тогда
				
					ТекущаяЗапись[ИмяРеквизита] = НовоеЗначение;
					ФлагИзменений = Истина;
				КонецЕсли;	
			КонецЕсли;	
						
		КонецЦикла;
		
		Если ФлагИзменений Тогда
			
			Если ИмяОбъекта = "СпособыОтраженияРасходовПоАмортизации" Тогда
				ТекущаяЗапись = СправочникОбъект;
			КонецЕсли;
			
			// проверим, нет ли случайно второго элемента с таким же кодом, 
			// чтобы не было лишних проблем при записи
			Если МетаданныеСправочника.ДлинаКода > 0 И МетаданныеСправочника.КонтрольУникальности = Истина Тогда
				Если НЕ КодЭлементаУникален("Справочник."+ИмяОбъекта,ТекущаяЗапись.Код,СсылкаНаЭлемент) Тогда
					ТекущаяЗапись.УстановитьНовыйКод();
				КонецЕсли;
				Если НЕ КодЭлементаУникален("Справочник."+ИмяОбъекта,ТекущаяЗапись.Код,СсылкаНаЭлемент) Тогда
					// все равно есть лишние проблемы - не будем записывать
					Сообщить(Локализация.СтрШаблон("Не удалось записать объект справочника ¤1¤: ¤2¤, по причине того, что сгенерированный код был не уникален!", ИмяОбъекта, ТекущаяЗапись));
					ФлагИзменений = Ложь;
				КонецЕсли;
			Конецесли;
			Если ФлагИзменений Тогда
				Попытка
					ТекущаяЗапись.Записать();
				Исключение
					Сообщить(Локализация.СтрШаблон("Не удалось записать объект справочника ¤1¤: ¤2¤!", ИмяОбъекта, ТекущаяЗапись));
				КонецПопытки;	
			КонецЕсли;	
		КонецЕсли;	
				
    КонецЦикла;
 	
КонецПроцедуры

// Выполняет начальное заполнение регистра сведений
Процедура ЗаполнитьРегистрСведений(ИмяОбъекта)
	
	МетаданныеРС = Метаданные.РегистрыСведений.Найти(ИмяОбъекта);
	
	Если МетаданныеРС = Неопределено Тогда
		// нет такого справочника
		Возврат;
	КонецЕсли;
	
	ИмяМакета = "НачальноеЗаполнение";
	
	ЕстьМакет = МетаданныеРС.Макеты.Найти(ИмяМакета);
	Если ЕстьМакет = Неопределено Тогда
		// нет такого макета
		Возврат;
	КонецЕсли;
	
	Макет = РегистрыСведений[ИмяОбъекта].ПолучитьМакет(ИмяМакета);
	
	
	Состояние("Заполняется регистр сведений "+МетаданныеРС.Синоним);
	
	// Прочитаем настройки
	ЗамещатьЗаписи 					= ПрочитатьНастройкуИзМакета(Макет, "ЗамещатьЗаписи", Ложь);
	НеЗаполнятьПоУмолчанию 			= ПрочитатьНастройкуИзМакета(Макет, "НеЗаполнятьПоУмолчанию", Ложь);
	СоздаватьЭлементыСправочников 	= ПрочитатьНастройкуИзМакета(Макет, "СоздаватьЭлементыСправочников", Ложь);
	
	Если мЭтоЗаполнениеВсехОбъектов = Истина И НеЗаполнятьПоУмолчанию = Истина Тогда
		// При общем запролнении таки объекты нужно пропускать;
		Возврат;
	КонецЕсли; 
	
	ОбластьИзмерений = Макет.Области.Найти("Измерения");
	Если НЕ ОбластьИзмерений = Неопределено Тогда
		ОбластьИзмерений = Макет.ПолучитьОбласть("Измерения");
	    ЧислоИзмерений = ОбластьИзмерений.ШиринаТаблицы; 
	Иначе
		ЧислоИзмерений = 0;
	КонецЕсли; 
		
	ТаблицаИзмерений = Новый ("ТаблицаЗначений");
	ТаблицаИзмерений.Колонки.Добавить("Реквизит");
	ТаблицаИзмерений.Колонки.Добавить("Тип"); 
    ТаблицаИзмерений.Колонки.Добавить("Менеджер"); 
	
	// Формируем таблицу типов измерений
	Для Сч = 1 по ЧислоИзмерений Цикл
		
		ИмяИзмерения = ОбластьИзмерений.Область(1, Сч).Текст;
		
		МетаданныеИзмерения = МетаданныеРС.Измерения.Найти(ИмяИзмерения);
		
		Если МетаданныеИзмерения = Неопределено Тогда
			Сообщить(Локализация.СтрШаблон("Ошибка при заполнении объекта ¤1¤! Не найдено измерение ¤2¤."
"Объект не заполнен!", ИмяОбъекта, ИмяИзмерения));
			Возврат;
		КонецЕсли;
	
		ТипыИзмерения = МетаданныеИзмерения.Тип.Типы();
		ТипИзмерения  = Неопределено;
		Если ТипыИзмерения.Количество() = 1 Тогда
			ТипИзмерения = ТипыИзмерения[0];
		КонецЕсли;
	
		НоваяСтрока = ТаблицаИзмерений.Добавить();
		НоваяСтрока.Реквизит = ИмяИзмерения;
		НоваяСтрока.Тип 	 = ТипИзмерения;
		НоваяСтрока.Менеджер = ПолучитьМенеджерПоТипу2(ТипИзмерения);
	КонецЦикла;
	
	ОбластьРесурсов = Макет.Области.Найти("Ресурсы");
	Если НЕ ОбластьРесурсов = Неопределено Тогда
		ОбластьРесурсов = Макет.ПолучитьОбласть("Ресурсы");
	    ЧислоРесурсов = ОбластьРесурсов.ШиринаТаблицы; 
	Иначе
		ЧислоРесурсов = 0;
	КонецЕсли; 
	
	ТаблицаРесурсов = Новый ("ТаблицаЗначений");
	ТаблицаРесурсов.Колонки.Добавить("Реквизит");
	ТаблицаРесурсов.Колонки.Добавить("Тип"); 
	ТаблицаРесурсов.Колонки.Добавить("Менеджер"); 

	//Формируем таблицу типов ресурсов
	Для Сч = 1 по ЧислоРесурсов Цикл
		
		ИмяРесурса = ОбластьРесурсов.Область(1, Сч).Текст;
		
		МетаданныеРесурса = МетаданныеРС.Ресурсы.Найти(ИмяРесурса);
		
		Если МетаданныеРесурса = Неопределено Тогда
			Сообщить(Локализация.СтрШаблон("Ошибка при заполнении объекта ¤1¤! Не найден ресурс ¤2¤."
"Объект не заполнен!", ИмяОбъекта, МетаданныеРесурса));
			Возврат;
		КонецЕсли;
	
		ТипыРесурса = МетаданныеРесурса.Тип.Типы();
		ТипРесурса  = Неопределено;
		Если ТипыРесурса.Количество() = 1 Тогда
			ТипРесурса = ТипыРесурса[0];
		КонецЕсли;
	
		НоваяСтрока = ТаблицаРесурсов.Добавить();
		НоваяСтрока.Реквизит = ИмяРесурса;
		НоваяСтрока.Тип 	 = ТипРесурса;
		НоваяСтрока.Менеджер = ПолучитьМенеджерПоТипу2(ТипРесурса);
		
	КонецЦикла;
	
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	
	Если ОчиститьПередЗаписью Тогда
		НаборЗаписей = РегистрыСведений[ИмяОбъекта].СоздатьНаборЗаписей();
	    НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЕсли;
	
	РегистрПериодический = НЕ МетаданныеРС.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический; 
	
	// Заполняем регистр
	Для Сч = 2 По КоличествоЗаписей Цикл
		
		ПараметрыЗаписи = "";
		СтруктураИзмерений = Новый Структура;
		
		ТекущаяЗапись = РегистрыСведений[ИмяОбъекта].СоздатьМенеджерЗаписи();
		
		Если РегистрПериодический Тогда
			Период = ПолучитьДатуПоСтроке(Макет.Область(Сч, 1).Текст, ИмяОбъекта, "Период");
			ТекущаяЗапись["Период"] = Период;
			СтруктураИзмерений.Вставить("Период", ТекущаяЗапись["Период"]);
			ПараметрыЗаписи = ПараметрыЗаписи+Период;
		КонецЕсли;
		
		Для СчК = 1 по ЧислоИзмерений Цикл
					
			ИмяИзмерения = ОбластьИзмерений.Область(1, СчК).Текст;
			ЗначениеИзмерения = ОбластьИзмерений.Область(Сч, СчК).Текст;
			Параметр = СтрЗаменить(ОбластьИзмерений.Область(Сч, СчК).ПараметрРасшифровки,"_",".");
						
			ТекущаяЗапись[ИмяИзмерения] = СформироватьЗначение2(ТаблицаИзмерений, ИмяИзмерения, ЗначениеИзмерения, Параметр, СоздаватьЭлементыСправочников);
			СтруктураИзмерений.Вставить(ИмяИзмерения,ТекущаяЗапись[ИмяИзмерения]);
			ПараметрыЗаписи = ПараметрыЗаписи+" "+Строка(ТекущаяЗапись[ИмяИзмерения]);
			
		КонецЦикла;
		
		Если НЕ ЗамещатьЗаписи Тогда
			// проверим, есть ли запись с такими измерениями
			Если СуществуетЗаписьРегистраСведений(ИмяОбъекта,СтруктураИзмерений) = Истина Тогда
				//запись с такими измерениями есть, перезаполнять не требуется
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Для СчК = 1 по ЧислоРесурсов Цикл
					
			ИмяРесурса = ОбластьРесурсов.Область(1, СчК).Текст;
			ЗначениеРесурса = ОбластьРесурсов.Область(Сч, СчК).Текст;
			Параметр = СтрЗаменить(ОбластьРесурсов.Область(Сч, СчК).ПараметрРасшифровки,"_",".");
						
			ТекущаяЗапись[ИмяРесурса] = СформироватьЗначение2(ТаблицаРесурсов, ИмяРесурса, ЗначениеРесурса, Параметр, СоздаватьЭлементыСправочников);
			ПараметрыЗаписи = ПараметрыЗаписи+" "+Строка(ТекущаяЗапись[ИмяРесурса]);
			
		КонецЦикла;
		
		Попытка
			ТекущаяЗапись.Записать(ЗамещатьЗаписи);
		Исключение
			// Сообщаем только, если не удалось создать запись при "замещении"
			Сообщить(Локализация.СтрШаблон("В регистре сведений ¤1¤ не удалось создать запись с параметрами ¤2¤", ИмяОбъекта, ПараметрыЗаписи));
			Продолжить;
		КонецПопытки;	
				
    КонецЦикла;
	
КонецПроцедуры	

Процедура ЗаполнитьТабличнуюЧасть(ТекущаяЗапись, Имя, ИмяТЧ, МакетТЧ, ТаблицаРеквизитовТЧ, МетаданныеТЧ, ФлагИзменений, ЭтоПВР = Ложь)
	
	ИмяОбластиТЧ = Имя+"|"+ИмяТЧ;
	
	Если ЭтоПВР Тогда
		Индекс = ТекущаяЗапись[ИмяТЧ].Количество();
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			Если Не ТекущаяЗапись[ИмяТЧ][Индекс].ВидРасчета.Предопределенный Тогда
				//Добавленные пользователем не очищаем
				Продолжить;
			КонецЕсли;	
			ТекущаяЗапись[ИмяТЧ].Удалить(Индекс);
		КонецЦикла;
   	Иначе	
		ТекущаяЗапись[ИмяТЧ].Очистить();
	КонецЕсли;	
	
	ЕстьОбластьИмя = МакетТЧ.Области.Найти(Имя);
	Если ЕстьОбластьИмя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОбласть 	= МакетТЧ.ПолучитьОбласть(ИмяОбластиТЧ);
	ОбластьТЧ 		= МакетТЧ.ПолучитьОбласть(ИмяТЧ);
	
	ЧислоРеквизитов = ОбластьТЧ.ШиринаТаблицы;
	ЧислоСтрок      = ТекущаяОбласть.ВысотаТаблицы; 
	
	Для НомСтроки = 1 по ЧислоСтрок  Цикл
		
		ТекущаяСтрока = ТекущаяЗапись[ИмяТЧ].Добавить();
		
		Для Сч = 1 по ЧислоРеквизитов Цикл
			
			ИмяРеквизита = ОбластьТЧ.Область(1, Сч).Текст;
			ЗначениеРеквизита = ТекущаяОбласть.Область(НомСтроки, Сч).Текст;
			Параметр = СтрЗаменить(ТекущаяОбласть.Область(НомСтроки, Сч).ПараметрРасшифровки,"_",".");
						
			МетаданныеРеквизита = МетаданныеТЧ.Реквизиты.Найти(ИмяРеквизита);
			Если МетаданныеРеквизита = Неопределено Тогда
				Сообщить(Локализация.СтрШаблон("Не найден реквизит ¤1¤ табличной части ¤2¤!", ИмяРеквизита, ИмяТЧ));
				Продолжить;
			КонецЕсли;
			НовоеЗначение = СформироватьЗначение2(ТаблицаРеквизитовТЧ, ИмяТЧ+"|"+ИмяРеквизита, ЗначениеРеквизита, Параметр);
			
			ТекущаяСтрока[ИмяРеквизита] = НовоеЗначение;
			ФлагИзменений = Истина;
				
		КонецЦикла;

	КонецЦикла;	
	
		
КонецПроцедуры	
	
// Выполняет начальное заполнение плана видов характеристик
Процедура ЗаполнитьПланВидовХарактеристик(ИмяОбъекта)
	
	МетаданныеПВХ = Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта);
	Если МетаданныеПВХ = Неопределено Тогда
		// нет такого справочника
		Возврат;
	КонецЕсли;
	
	ТипПВХ = Тип("ПланВидовХарактеристикСсылка."+МетаданныеПВХ.Имя);
	ИмяМакета = "НачальноеЗаполнение";
	
	ЕстьМакет = МетаданныеПВХ.Макеты.Найти(ИмяМакета);
	Если ЕстьМакет = Неопределено Тогда
		// нет такого макета
		Возврат;
	КонецЕсли;
	
	Макет = ПланыВидовХарактеристик[ИмяОбъекта].ПолучитьМакет(ИмяМакета);
	
	
	ИмяМакетаТЧ = "НачальноеЗаполнениеТабличныеЧасти";
	ЕстьТЧ = Ложь;
	ЕстьМакетТЧ = МетаданныеПВХ.Макеты.Найти(ИмяМакетаТЧ);
	Если НЕ ЕстьМакетТЧ = Неопределено Тогда
		// есть такой макет
		МакетТЧ = ПланыВидовХарактеристик[ИмяОбъекта].ПолучитьМакет(ИмяМакетаТЧ);
		ЕстьТЧ = Истина;
	КонецЕсли;
		
	Состояние("Заполняется план видов характеристик "+МетаданныеПВХ.Синоним);
	
	ЧислоРеквизитов = Макет.ШиринаТаблицы; 
	
	ТаблицаРеквизитов = Новый ("ТаблицаЗначений");
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("Тип"); 
	ТаблицаРеквизитов.Колонки.Добавить("Менеджер"); 
	
	// Формируем таблицу типов реквизитов
	Для Сч = 4 по ЧислоРеквизитов Цикл
		
		ИмяРеквизита = Макет.Область(1, Сч).Текст;
			
		МетаданныеРеквизита = МетаданныеПВХ.Реквизиты.Найти(ИмяРеквизита);
		
		Если МетаданныеРеквизита = Неопределено Тогда
			Сообщить(Локализация.СтрШаблон("Ошибка при заполнении объекта ¤1¤! Не найден реквизит ¤2¤."
"Объект не заполнен!", ИмяОбъекта, ИмяРеквизита));
			Возврат;
		КонецЕсли;
		
		ТипыРеквизита = МетаданныеРеквизита.Тип.Типы();
		ТипРеквизита  = Неопределено;
		Если ТипыРеквизита.Количество() = 1 Тогда
			ТипРеквизита = ТипыРеквизита[0];
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит = ИмяРеквизита;
		НоваяСтрока.Тип 	 = ТипРеквизита;
		НоваяСтрока.Менеджер = ПолучитьМенеджерПоТипу2(ТипРеквизита);
		
	КонецЦикла;
	
	
    Если ЕстьТЧ Тогда
		
		ТаблицаРеквизитовТЧ = Новый ("ТаблицаЗначений");
		ТаблицаРеквизитовТЧ.Колонки.Добавить("Реквизит");
		ТаблицаРеквизитовТЧ.Колонки.Добавить("Тип"); 
		ТаблицаРеквизитовТЧ.Колонки.Добавить("Менеджер"); 

		СписокТЧ = Новый ("СписокЗначений");
		
		КоллекцияОбластей = МакетТЧ.Области;
	
		Для Каждого Область из КоллекцияОбластей Цикл
			
			//Выбрать все ТЧ из макета
			Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяТЧ = Область.Имя;
			ОбластьТЧ = МакетТЧ.ПолучитьОбласть(ИмяТч);
			
			ЕстьНужнаяТЧ  = МетаданныеПВХ.ТабличныеЧасти.Найти(ИмяТЧ);
			Если ЕстьНужнаяТЧ = Неопределено Тогда
				Сообщить(Локализация.СтрШаблон("Ошибка при заполнении объекта ¤1¤! Не найдена ТЧ ¤2¤!", ИмяОбъекта, ИмяТч));
				Возврат;
			КонецЕсли;
			СписокТЧ.Добавить(ИмяТЧ);
						
			ЧислоРеквизитовТЧ = ОбластьТЧ.ШиринаТаблицы;
			
			// Формируем таблицу типов реквизитов ТЧ
			Для Сч = 1 по ЧислоРеквизитовТЧ Цикл
				
				ИмяРеквизита = ОбластьТЧ.Область(1, Сч).Текст;
					
				МетаданныеРеквизита = МетаданныеПВХ.ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти(ИмяРеквизита);
				
				Если МетаданныеРеквизита = Неопределено Тогда
					Сообщить(Локализация.СтрШаблон("Ошибка при заполнении объекта ¤1¤! Не найден реквизит ¤2¤."
"Объект не заполнен!", ИмяОбъекта, ИмяРеквизита));
					Возврат;
				КонецЕсли;
				
				ТипыРеквизита = МетаданныеРеквизита.Тип.Типы();
				ТипРеквизита  = Неопределено;
				Если ТипыРеквизита.Количество() = 1 Тогда
					ТипРеквизита = ТипыРеквизита[0];
				КонецЕсли;
				
				НоваяСтрока = ТаблицаРеквизитовТЧ.Добавить();
				НоваяСтрока.Реквизит = ИмяТЧ+"|"+ИмяРеквизита;
				НоваяСтрока.Тип 	 = ТипРеквизита;
				НоваяСтрока.Менеджер = ПолучитьМенеджерПоТипу2(ТипРеквизита);
		
			КонецЦикла;
			
		КонецЦикла;

	КонецЕсли;	
	
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	
	ЗаполняемыйПВХ = ПланыВидовХарактеристик[ИмяОбъекта];
	
	Для Сч = 2 По КоличествоЗаписей Цикл
		
		ФлагИзменений = Ложь;
		
		//Предопределенные реквизиты
		Имя = Макет.Область(Сч, 1).Текст;
		Код = Макет.Область(Сч, 2).Текст;
		Наименование = Макет.Область(Сч, 3).Текст;
		
		СсылкаНаЭлемент = ПолучитьПредопределенный(ТипПВХ, ЗаполняемыйПВХ, Имя);
		Если СсылкаНаЭлемент = Неопределено Тогда
			Сообщить(Локализация.СтрШаблон("Не найден предопределённый элемент ¤1¤ для ПВХ ¤2¤", Имя, ИмяОбъекта));
			Возврат;
		КонецЕсли;
		ТекущаяЗапись = СсылкаНаЭлемент.ПолучитьОбъект();
		
		Если МетаданныеПВХ.ДлинаКода > 0 Тогда
			Если НЕ ПустаяСтрока(Код) И (Код <> ТекущаяЗапись.Код) Тогда
				ТекущаяЗапись.Код = Код;
				ФлагИзменений = Истина;
			Конецесли;
		Конецесли;
		
 		Если МетаданныеПВХ.ДлинаНаименования > 0 Тогда
			Если НЕ ПустаяСтрока(Наименование) И (Наименование <> ТекущаяЗапись.Наименование) Тогда
				ТекущаяЗапись.Наименование = Наименование;
				ФлагИзменений = Истина;
			КонецЕсли;
		КонецЕсли;
 				
		//Дополнительные реквизиты
		Для СчК = 4 по ЧислоРеквизитов Цикл
					
			ИмяРеквизита = Макет.Область(1, СчК).Текст;
			ЗначениеРеквизита = Макет.Область(Сч, СчК).Текст;
			Параметр = СтрЗаменить(Макет.Область(Сч, СчК).ПараметрРасшифровки,"_",".");
						
			МетаданныеРеквизита = МетаданныеПВХ.Реквизиты.Найти(ИмяРеквизита);
			Если МетаданныеРеквизита = Неопределено Тогда
				Сообщить(Локализация.СтрШаблон("Не найден реквизит ¤1¤ справочника ¤2¤!", ИмяРеквизита, ИмяОбъекта));
				Продолжить;
			КонецЕсли;
			НовоеЗначение = СформироватьЗначение2(ТаблицаРеквизитов, ИмяРеквизита, ЗначениеРеквизита, Параметр);
			Если НовоеЗначение <> ТекущаяЗапись[ИмяРеквизита] Тогда
				ТекущаяЗапись[ИмяРеквизита] = НовоеЗначение;
				ФлагИзменений = Истина;
			КонецЕсли;	
						
		КонецЦикла;
		
		Если ЕстьТЧ Тогда
			
			Для Каждого ТЧ из СписокТЧ Цикл
				
				ЗаполнитьТабличнуюЧасть(ТекущаяЗапись, Имя, ТЧ.Значение, МакетТЧ, ТаблицаРеквизитовТЧ, МетаданныеПВХ.ТабличныеЧасти[ТЧ.Значение], ФлагИзменений);	
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		Если ФлагИзменений Тогда
			// проверим, нет ли случайно второго элемента с таким же кодом, 
			// чтобы не было лишних проблем при записи
			Если МетаданныеПВХ.ДлинаКода > 0 И МетаданныеПВХ.КонтрольУникальности = Истина Тогда
				Если НЕ КодЭлементаУникален("ПланВидовХарактеристик."+ИмяОбъекта,ТекущаяЗапись.Код,СсылкаНаЭлемент) Тогда
					ТекущаяЗапись.УстановитьНовыйКод();
					ФлагИзменений = Истина;
				КонецЕсли; 
			Конецесли;
			Попытка
				ТекущаяЗапись.Записать();
			Исключение
				Сообщить(Локализация.СтрШаблон("Не удалось записать объект ПВХ ¤1¤: ¤2¤!", ИмяОбъекта, ТекущаяЗапись));
			КонецПопытки;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

// Выполняет начальное заполнение плана счетов
Процедура ЗаполнитьПланСчетов(ИмяОбъекта)
	
	МетаданныеПС = Метаданные.ПланыСчетов.Найти(ИмяОбъекта);
	Если МетаданныеПС = Неопределено Тогда
		// нет такого плана счетов
		Возврат;
	КонецЕсли;
	
	ТипПС = Тип("ПланСчетовСсылка."+МетаданныеПС.Имя);
	ИмяМакета = "НачальноеЗаполнение";
	
	ЕстьМакет = МетаданныеПС.Макеты.Найти(ИмяМакета);
	Если ЕстьМакет = Неопределено Тогда
		// нет такого макета
		Возврат;
	КонецЕсли;
	
	Макет = ПланыСчетов[ИмяОбъекта].ПолучитьМакет(ИмяМакета);
	
	
	Состояние("Заполняется план счетов "+МетаданныеПС.Синоним);
	
	ЧислоРеквизитов = Макет.ШиринаТаблицы; 
	
	ТаблицаРеквизитов = Новый ("ТаблицаЗначений");
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("Тип"); 
	ТаблицаРеквизитов.Колонки.Добавить("Менеджер"); 
	
	//Формируем таблицу типов реквизитов
	Для Сч = 4 по ЧислоРеквизитов Цикл
		
		ИмяРеквизита = Макет.Область(1, Сч).Текст;
		
		МетаданныеРеквизита = МетаданныеПС.Реквизиты.Найти(ИмяРеквизита);
		
		Если МетаданныеРеквизита = Неопределено Тогда
			Сообщить(Локализация.СтрШаблон("Ошибка при заполнении объекта ¤1¤! Не найден реквизит ¤2¤."
"Объект не заполнен!", ИмяОбъекта, ИмяРеквизита));
			Возврат;
		КонецЕсли;
		
		ТипыРеквизита = МетаданныеРеквизита.Тип.Типы();
		ТипРеквизита  = Неопределено;
		Если ТипыРеквизита.Количество() = 1 Тогда
			ТипРеквизита = ТипыРеквизита[0];
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит = ИмяРеквизита;
		НоваяСтрока.Тип 	 = ТипРеквизита;
		НоваяСтрока.Менеджер = ПолучитьМенеджерПоТипу2(ТипРеквизита);
		
	КонецЦикла;	
		
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	ЗаполняемыйПС = ПланыСчетов[ИмяОбъекта];
	
	//Заполняем справочник
	Для Сч = 2 По КоличествоЗаписей Цикл
		
		ФлагИзменений = Ложь;
		
		//Предопределенные реквизиты
		Имя = Макет.Область(Сч, 1).Текст;
		Код = Макет.Область(Сч, 2).Текст;
		Наименование = Макет.Область(Сч, 3).Текст;
		
		СсылкаНаЭлемент = ПолучитьПредопределенный(ТипПС, ЗаполняемыйПС, Имя);
		Если СсылкаНаЭлемент = Неопределено Тогда
			Сообщить(Локализация.СтрШаблон("Не найден предопределённый элемент ¤1¤ для плана счетов ¤2¤", Имя, ИмяОбъекта));
			Возврат;
		КонецЕсли;
		ТекущаяЗапись = СсылкаНаЭлемент.ПолучитьОбъект();
		
		Если МетаданныеПС.ДлинаКода > 0 Тогда
			Если НЕ ПустаяСтрока(Код) И (СокрЛП(Код) <> СокрЛП(ТекущаяЗапись.Код)) Тогда
				ТекущаяЗапись.Код = Код;
				ФлагИзменений = Истина;
			Конецесли;
		Конецесли;
		
		Если МетаданныеПС.ДлинаНаименования > 0 Тогда
			Если НЕ ПустаяСтрока(Наименование) И (Наименование <> ТекущаяЗапись.Наименование) Тогда
				ТекущаяЗапись.Наименование = Наименование;
				ФлагИзменений = Истина;
			КонецЕсли;
		КонецЕсли;
		
		//Дополнительные реквизиты
		Для СчК = 4 по ЧислоРеквизитов Цикл
					
			ИмяРеквизита = Макет.Область(1, СчК).Текст;
			ЗначениеРеквизита = Макет.Область(Сч, СчК).Текст;
			Параметр = СтрЗаменить(Макет.Область(Сч, СчК).ПараметрРасшифровки,"_",".");
						
			МетаданныеРеквизита = МетаданныеПС.Реквизиты.Найти(ИмяРеквизита);
			Если МетаданныеРеквизита = Неопределено Тогда
				Сообщить(Локализация.СтрШаблон("Не найден реквизит ¤1¤ плана счетов ¤2¤!", ИмяРеквизита, ИмяОбъекта));
				Продолжить;
			КонецЕсли;
			
			НовоеЗначение = СформироватьЗначение2(ТаблицаРеквизитов, ИмяРеквизита, ЗначениеРеквизита, Параметр);
			Если НовоеЗначение <> ТекущаяЗапись[ИмяРеквизита] Тогда
				ТекущаяЗапись[ИмяРеквизита] = НовоеЗначение;
				ФлагИзменений = Истина;
			КонецЕсли;	
						
		КонецЦикла;
		
		Если ФлагИзменений Тогда
			// проверим, нет ли случайно второго элемента с таким же кодом, 
			// чтобы не было лишних проблем при записи
			Если МетаданныеПС.ДлинаКода > 0 И МетаданныеПС.КонтрольУникальности = Истина Тогда
				Если НЕ КодЭлементаУникален("ПланСчетов."+ИмяОбъекта,ТекущаяЗапись.Код,СсылкаНаЭлемент) Тогда
					// все равно есть лишние проблемы - не будем записывать
					Сообщить(Локализация.СтрШаблон("Не удалось записать объект плана счетов ¤1¤: ¤2¤, по причине того, что сгенерированный код был не уникален!", ИмяОбъекта, ТекущаяЗапись));
					ФлагИзменений = Ложь;
				КонецЕсли;
			Конецесли;
			Если ФлагИзменений Тогда
				Попытка
					ТекущаяЗапись.Записать();
				Исключение
					Сообщить(Локализация.СтрШаблон("Не удалось записать объект плана счетов ¤1¤: ¤2¤!", ИмяОбъекта, ТекущаяЗапись));
				КонецПопытки;	
			КонецЕсли;	
		КонецЕсли;	
				
    КонецЦикла;
 	
КонецПроцедуры

// Выполняет заполнение базовых, вытесняющих и ведущих видов расчетов
//
Процедура ЗаполнитьБВВ(ВР, ИмяОбъекта, Макет, ФлагИзменений)
	
	Попытка
		ТекущаяОбласть = Макет.ПолучитьОбласть(ИмяОбъекта);
		ФлагИзменений = Истина;
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Строка(ВР.Метаданные().ЗависимостьОтВидовРасчета) <> "НеИспользовать" Тогда
		Индекс = ВР.БазовыеВидыРасчета.Количество();
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			Если ВР.БазовыеВидыРасчета[Индекс].Предопределенный Тогда
				Продолжить;
			КонецЕсли;
			Если ВР.БазовыеВидыРасчета[Индекс].ВидРасчета = Неопределено Тогда
				ВР.БазовыеВидыРасчета.Удалить(Индекс);
				Продолжить;
			КонецЕсли;
			Если НЕ ВР.БазовыеВидыРасчета[Индекс].ВидРасчета.Предопределенный И ЗначениеЗаполнено(ВР.БазовыеВидыРасчета[Индекс].ВидРасчета) Тогда
				Продолжить;
			КонецЕсли;
			ВР.БазовыеВидыРасчета.Удалить(Индекс);
		КонецЦикла;
	КонецЕсли;	
	
	Если ВР.Метаданные().ИспользованиеПериодаДействия Тогда
		Индекс = ВР.ВытесняющиеВидыРасчета.Количество();
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			Если НЕ ВР.ВытесняющиеВидыРасчета[Индекс].ВидРасчета.Предопределенный И ЗначениеЗаполнено(ВР.ВытесняющиеВидыРасчета[Индекс].ВидРасчета) Тогда
				Продолжить;
			КонецЕсли;
			ВР.ВытесняющиеВидыРасчета.Удалить(Индекс);
		КонецЦикла;
	КонецЕсли;	
	
	Индекс = ВР.ВедущиеВидыРасчета.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Если НЕ ВР.ВедущиеВидыРасчета[Индекс].ВидРасчета.Предопределенный  И ЗначениеЗаполнено(ВР.ВедущиеВидыРасчета[Индекс].ВидРасчета) Тогда
			Продолжить;
		КонецЕсли;
		ВР.ВедущиеВидыРасчета.Удалить(Индекс);
	КонецЦикла;
	КоллекцияОбластей = Макет.Области;
	
	Для Каждого Область из КоллекцияОбластей Цикл
		
		Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Менеджер = ПолучитьМенеджерПоТипу("План видов расчета", Область.Имя);
		Исключение
			Продолжить;
		КонецПопытки;	
		
		ОбластьТипа = Макет.ПолучитьОбласть(Область.Имя);
		ТекущаяОбласть = Макет.ПолучитьОбласть(Область.Имя+"|"+ИмяОбъекта);
		
		Для Индекс = 1 по ТекущаяОбласть.ВысотаТаблицы Цикл
			Если ТекущаяОбласть.Область(Индекс, 1).Текст = "1" Тогда
				Попытка
					НоваяСтрока            = ВР.БазовыеВидыРасчета.Добавить();	
					НоваяСтрока.ВидРасчета = Менеджер[ОбластьТипа.Область(Индекс, 1).Текст];
				Исключение	
					//Не удалось записать
				КонецПопытки;				
			КонецЕсли;
			
			Если ТекущаяОбласть.Область(Индекс, 2).Текст = "1" Тогда
				Попытка
					НоваяСтрока            = ВР.ВытесняющиеВидыРасчета.Добавить();	
					НоваяСтрока.ВидРасчета = Менеджер[ОбластьТипа.Область(Индекс, 1).Текст];
				Исключение	
					//Не удалось записать
				КонецПопытки;				
			КонецЕсли;	
			
			Если ТекущаяОбласть.Область(Индекс, 3).Текст = "1" Тогда
				Попытка
					НоваяСтрока            = ВР.ВедущиеВидыРасчета.Добавить();	
					НоваяСтрока.ВидРасчета = Менеджер[ОбластьТипа.Область(Индекс, 1).Текст];
				Исключение	
					//Не удалось записать
				КонецПопытки;				
			КонецЕсли;	

		КонецЦикла;	
		
		
	КонецЦикла;
	
КонецПроцедуры	

// Выполняет начальное заполнение плана видов расчетов
Процедура ЗаполнитьПланВидовРасчета(ИмяОбъекта)
	
	МетаданныеПВР = Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта);
	Если МетаданныеПВР = Неопределено Тогда
		// нет такого справочника
		Возврат;
	КонецЕсли;
	
	ТипПВР = Тип("ПланВидовРасчетаСсылка."+МетаданныеПВР.Имя);
	ИмяМакета = "НачальноеЗаполнение";
	
	ЕстьМакет = МетаданныеПВР.Макеты.Найти(ИмяМакета);
	Если ЕстьМакет = Неопределено Тогда
		// нет такого макета
		Возврат;
	КонецЕсли;
	
	Макет = ПланыВидовРасчета[ИмяОбъекта].ПолучитьМакет(ИмяМакета);
	
	
	ИмяМакетаТЧ = "НачальноеЗаполнениеТабличныеЧасти";
	ЕстьТЧ = Ложь;
	ЕстьМакетТЧ = МетаданныеПВР.Макеты.Найти(ИмяМакетаТЧ);
	Если НЕ ЕстьМакетТЧ = Неопределено Тогда
		// есть такой макет
		МакетТЧ = ПланыВидовРасчета[ИмяОбъекта].ПолучитьМакет(ИмяМакетаТЧ);
		ЕстьТЧ = Истина;
	КонецЕсли;
		
	Состояние("Заполняется план видов расчета "+МетаданныеПВР.Синоним);
	
	МакетБВВ = ПолучитьОбщийМакет("НачальноеЗаполнениеПлановВидовРасчета");
	ЧислоРеквизитов = Макет.ШиринаТаблицы; 
	
	ТаблицаРеквизитов = Новый ("ТаблицаЗначений");
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("Тип"); 	
	ТаблицаРеквизитов.Колонки.Добавить("Менеджер"); 
	
	// Формируем таблицу типов реквизитов
	Для Сч = 4 по ЧислоРеквизитов Цикл
		
		ИмяРеквизита = Макет.Область(1, Сч).Текст;
		МетаданныеРеквизита = МетаданныеПВР.Реквизиты.Найти(ИмяРеквизита);
		
		Если МетаданныеРеквизита = Неопределено Тогда
			Сообщить(Локализация.СтрШаблон("Ошибка при заполнении объекта ¤1¤! Не найден реквизит ¤2¤."
"Объект не заполнен!", ИмяОбъекта, ИмяРеквизита));
			Возврат;
		КонецЕсли;
		
		ТипыРеквизита = МетаданныеРеквизита.Тип.Типы();
		ТипРеквизита  = Неопределено;
		Если ТипыРеквизита.Количество() = 1 Тогда
			ТипРеквизита = ТипыРеквизита[0];
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит = ИмяРеквизита;
		НоваяСтрока.Тип 	 = ТипРеквизита;
		НоваяСтрока.Менеджер = ПолучитьМенеджерПоТипу2(ТипРеквизита);
		
	КонецЦикла;
	
   Если ЕстьТЧ Тогда
		
		ТаблицаРеквизитовТЧ = Новый ("ТаблицаЗначений");
		ТаблицаРеквизитовТЧ.Колонки.Добавить("Реквизит");
		ТаблицаРеквизитовТЧ.Колонки.Добавить("Тип"); 
		ТаблицаРеквизитовТЧ.Колонки.Добавить("Менеджер"); 

		СписокТЧ = Новый ("СписокЗначений");
		
		КоллекцияОбластей = МакетТЧ.Области;
	
		Для Каждого Область из КоллекцияОбластей Цикл
			
			//Выбрать все ТЧ из макета
			Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяТЧ = Область.Имя;
			ОбластьТЧ = МакетТЧ.ПолучитьОбласть(ИмяТч);
			
			ЕстьНужнаяТЧ  = МетаданныеПВР.ТабличныеЧасти.Найти(ИмяТЧ);
			Если ЕстьНужнаяТЧ = Неопределено Тогда
				Сообщить(Локализация.СтрШаблон("Ошибка при заполнении объекта ¤1¤! Не найдена ТЧ ¤2¤!", ИмяОбъекта, ИмяТч));
				Возврат;
			КонецЕсли;
			СписокТЧ.Добавить(ИмяТЧ);
						
			ЧислоРеквизитовТЧ = ОбластьТЧ.ШиринаТаблицы;
			
			// Формируем таблицу типов реквизитов ТЧ
			Для Сч = 1 по ЧислоРеквизитовТЧ Цикл
				
				ИмяРеквизита = ОбластьТЧ.Область(1, Сч).Текст;
					
				МетаданныеРеквизита = МетаданныеПВР.ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти(ИмяРеквизита);
				
				Если МетаданныеРеквизита = Неопределено Тогда
					Сообщить(Локализация.СтрШаблон("Ошибка при заполнении объекта ¤1¤! Не найден реквизит ¤2¤."
"Объект не заполнен!", ИмяОбъекта, ИмяРеквизита));
					Возврат;
				КонецЕсли;
				
				ТипыРеквизита = МетаданныеРеквизита.Тип.Типы();
				ТипРеквизита  = Неопределено;
				Если ТипыРеквизита.Количество() = 1 Тогда
					ТипРеквизита = ТипыРеквизита[0];
				КонецЕсли;
				
				НоваяСтрока = ТаблицаРеквизитовТЧ.Добавить();
				НоваяСтрока.Реквизит = ИмяТЧ+"|"+ИмяРеквизита;
				НоваяСтрока.Тип 	 = ТипРеквизита;
				НоваяСтрока.Менеджер = ПолучитьМенеджерПоТипу2(ТипРеквизита);
		
			КонецЦикла;
			
		КонецЦикла;

	КонецЕсли;	
	
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	
	ЗаполняемыйПВР = ПланыВидовРасчета[ИмяОбъекта];
	
	Для Сч = 2 По КоличествоЗаписей Цикл
		
		ФлагИзменений = Ложь;
		
		//Предопределенные реквизиты
		Имя = Макет.Область(Сч, 1).Текст;
		Код = Макет.Область(Сч, 2).Текст;
		Наименование = Макет.Область(Сч, 3).Текст;
		
		СсылкаНаЭлемент = ПолучитьПредопределенный(ТипПВР, ЗаполняемыйПВР, Имя);
		Если СсылкаНаЭлемент = Неопределено Тогда
			Сообщить(Локализация.СтрШаблон("Не найден предопределённый элемент ¤1¤ для плана видов расчета ¤2¤", Имя, ИмяОбъекта));
			Возврат;
		КонецЕсли;
		ТекущаяЗапись = СсылкаНаЭлемент.ПолучитьОбъект();
  				
		Если МетаданныеПВР.ДлинаКода > 0 Тогда
			Если НЕ ПустаяСтрока(Код) И (Код <> ТекущаяЗапись.Код) Тогда
				ТекущаяЗапись.Код = Код;
				ФлагИзменений = Истина;
			Конецесли;
		Конецесли;
		
 		Если МетаданныеПВР.ДлинаНаименования > 0 Тогда
			Если НЕ ПустаяСтрока(Наименование) И (Наименование <> ТекущаяЗапись.Наименование) Тогда
				ТекущаяЗапись.Наименование = Наименование;
				ФлагИзменений = Истина;
			КонецЕсли;
		КонецЕсли;
		
		//Дополнительные реквизиты
		Для СчК = 4 по ЧислоРеквизитов Цикл
					
			ИмяРеквизита = Макет.Область(1, СчК).Текст;
			ЗначениеРеквизита = Макет.Область(Сч, СчК).Текст;
			Параметр = СтрЗаменить(Макет.Область(Сч, СчК).ПараметрРасшифровки,"_",".");
						
			МетаданныеРеквизита = МетаданныеПВР.Реквизиты.Найти(ИмяРеквизита);
			Если МетаданныеРеквизита = Неопределено Тогда
				Сообщить(Локализация.СтрШаблон("Не найден реквизит ¤1¤ плана видов расчета ¤2¤!", ИмяРеквизита, ИмяОбъекта));
				Продолжить;
			КонецЕсли;
			НовоеЗначение = СформироватьЗначение2(ТаблицаРеквизитов, ИмяРеквизита, ЗначениеРеквизита, Параметр);
			Если НовоеЗначение <> ТекущаяЗапись[ИмяРеквизита] Тогда
				ТекущаяЗапись[ИмяРеквизита] = НовоеЗначение;
				ФлагИзменений = Истина;
			КонецЕсли;	
						
		КонецЦикла;
		
		ЗаполнитьБВВ(ТекущаяЗапись, Имя, МакетБВВ, ФлагИзменений);
		
		Если ЕстьТЧ Тогда
			
			Для Каждого ТЧ из СписокТЧ Цикл
				
				ЗаполнитьТабличнуюЧасть(ТекущаяЗапись, Имя, ТЧ.Значение, МакетТЧ, ТаблицаРеквизитовТЧ, МетаданныеПВР.ТабличныеЧасти[ТЧ.Значение], ФлагИзменений, Истина);	
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		Если ФлагИзменений Тогда
			Попытка
				ТекущаяЗапись.Записать();
			Исключение
				Сообщить(Локализация.СтрШаблон("Не удалось записать объект план видов расчета ¤1¤: ¤2¤!", ИмяОбъекта, ТекущаяЗапись));
			КонецПопытки;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет объект выбранный на форме
Процедура ЗаполнитьОбъект(ТипОбъекта, НаименованиеОбъекта) Экспорт
	
	мЭтоЗаполнениеВсехОбъектов = Ложь;
	Если ТипОбъекта = "Справочник" Тогда
		ЗаполнитьСправочник(НаименованиеОбъекта);
	ИначеЕсли ТипОбъекта = "ПланВидовХарактеристик" Тогда
		ЗаполнитьПланВидовХарактеристик(НаименованиеОбъекта);	
	ИначеЕсли ТипОбъекта = "ПланВидовРасчета" Тогда
		ЗаполнитьПланВидовРасчета(НаименованиеОбъекта);	
	ИначеЕсли ТипОбъекта = "РегистрСведений" Тогда
		ЗаполнитьРегистрСведений(НаименованиеОбъекта);	
	ИначеЕсли ТипОбъекта = "ПланСчетов" Тогда
		ЗаполнитьПланСчетов(НаименованиеОбъекта);	
	КонецЕсли;
	
КонецПроцедуры	

// Заполняет все возможные объекты метаданных
Процедура ЗаполнитьВсеОбъекты() Экспорт
	
	мЭтоЗаполнениеВсехОбъектов = Истина;
	
	Для каждого ОбъектМД из Метаданные.Справочники Цикл
		Состояние("Поиск справочников для заполнения");
		ЗаполнитьСправочник(ОбъектМД.Имя);
	КонецЦикла;	
	Для каждого ОбъектМД из Метаданные.ПланыВидовХарактеристик Цикл
		Состояние("Поиск планов видов характеристик для заполнения");
		ЗаполнитьПланВидовХарактеристик(ОбъектМД.Имя);
	КонецЦикла;	
	//Для каждого ОбъектМД из Метаданные.ПланыВидовРасчета Цикл
	//	Состояние("Поиск планов счетов для заполнения");
	//	ЗаполнитьПланВидовРасчета(ОбъектМД.Имя);
	//КонецЦикла;
	ЗаполнитьПланВидовРасчета("ОсновныеНачисленияОрганизаций");
	ЗаполнитьПланВидовРасчета("ОтражениеЗарплатыОрганизаций");
	ЗаполнитьПланВидовРасчета("СреднийЗаработок");
	ЗаполнитьПланВидовРасчета("ВзносыВФонды");
	ЗаполнитьПланВидовРасчета("УдержанияОрганизаций");
	Для каждого ОбъектМД из Метаданные.РегистрыСведений Цикл
		Состояние("Поиск регистров сведений для заполнения");
		ЗаполнитьРегистрСведений(ОбъектМД.Имя);
	КонецЦикла;	
	Для каждого ОбъектМД из Метаданные.ПланыСчетов Цикл
		Состояние("Поиск планов счетов для заполнения");
		ЗаполнитьПланСчетов(ОбъектМД.Имя);
	КонецЦикла;	
	
	Состояние("Заполнение завершено");
	
КонецПроцедуры	

мКешПредопределенных = Новый Структура;

#КонецЕсли
