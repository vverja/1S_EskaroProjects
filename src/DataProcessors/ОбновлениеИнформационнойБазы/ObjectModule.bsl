//////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция выполняет начальное заполнение информационной базы.
//
// Параметры:
//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
//
// Возвращаемое значение:
//  Функция возвращает номер первой коммерческой версии конфигурации.
//
Функция ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт

	// Обязательное начальное заполнение информационной базы.
	
	ДатаНачалаВводаДанных = '19800101';
	
	// Установка использования регистра "Свободные остатки"
	ПроцедурыКонтроляОстатков.УстановитьИспользованиеРегистраСвободныеОстатки(Истина, ДатаНачалаВводаДанных, Ложь);
	
	// начальное заполнение необходимых констант
	УстановитьКонстанты();
	
	// Автоматический поиск и заполнение необходимых объектов
	ОбработкаНЗ = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
	ОбработкаНЗ.ЗаполнитьВсеОбъекты();
	
	// Заполнение сведений бухгалтерского и налогового учета.
	ОбщегоНазначения.УстановитьСубконтоСкладыНаСчетах(Ложь);
	// обновление Хозрасчетного плана счетов 30.Х (Касса). Добавление субконто "Статьи движения денежных средств"
	УстановитьСубконтоСтатьяДДСВПлатеСчетов();
	
	УстановитьПараметрыСчетовБУиНУ();
	
	// Начальное заполнение справочника "Виды номенклатуры" и связанного с ним регистра сведений "Счета учета номенклатуры"
	ЗаполнитьРегистрыСчетовУчета();
	
	// заполнение списка регламентированных отчетов
	ЗаполнитьСписокРегламентированныхОтчетов();
	
	НачальноеЗаполнениеСправочникаСобытияОС();
	
	НачальноеЗаполнениеСправочникаКлассификаторСтранМира();
	
	// Начальное заполнение предопределенных элементов справочника "Способы распределения затрат".
	ЗаполнитьСправочникСпособыРаспределенияЗатрат();
	
	// начальное заполнение регистров для бизнес-процесса ЗакрытиеМесяца
	ЗаполнитьРегистрыРегламентныхОпераций(Истина, Истина);
	
	// начальное заполнение справочника ВидыКонтактнойИнформации
	ЗаполнитьСправочникВидыКонтактнойИнформации();	
	
	
	//Заполнить реквизиты предопределенных смен
	ЗаполнитьПредопределенныеСмены();
	
	// Включить генерацию всех видов задач
	УстановитьИспользованиеВидовЗадачПользователей();
	
	ЗаполнитьСтажВДняхСтажВЧасах();
	
	ЗаполнитьНачисленияДляПредварительногоРасчета();
	ЗаполнитьВариантыАлгоритмов();
	
	// Заполнение настроек учетной политики упр. учета
	НаборУчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	НаборУчетнаяПолитика.Отбор.Период.Установить(НачалоМесяца(ДатаНачалаВводаДанных));
	ПараметрыУчетнойПолитики = НаборУчетнаяПолитика.Добавить();
	
	ПараметрыУчетнойПолитики.Период                                                 = НачалоМесяца(ДатаНачалаВводаДанных);
	ПараметрыУчетнойПолитики.СпособОценкиМПЗ                                        = Перечисления.СпособыОценки.ПоСредней;
	ПараметрыУчетнойПолитики.СпособРасчетаСебестоимостиВыпускаПоОперациям           = Перечисления.СпособыРасчетаСебестоимостиВыпускаПоОперациям.ПоПрямымЗатратам;
	ПараметрыУчетнойПолитики.ДетализацияКосвенныхЗатратВСебестоимости               = Перечисления.ДетализацияКосвенныхЗатратВСебестоимости.ПоКаждойСтатьеЗатрат;
	ПараметрыУчетнойПолитики.СпособРасчетаСебестоимостиОсновногоПроизводства        = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам;
	ПараметрыУчетнойПолитики.СпособРасчетаСебестоимостиВспомогательногоПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам;
	ПараметрыУчетнойПолитики.СпособИспользованияНакопительныхСкидок                 = Перечисления.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоДисконтнойКарте;
	
	НаборУчетнаяПолитика.Записать();
	
	НовыеСтатьи = ЗаполнитьНепредопределенныеСтатьи();
	ЗаполнитьРСПараметрыКурсовыхРазниц(НовыеСтатьи);
	
	#Если Клиент Тогда
	// Необязательное заполнение ИБ
	// Вывод строк описания обновлений.
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("ШапкаЗаполнениеПустойИБ"));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Заполнение пустой ИБ");
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("ЗаполнениеПустойИБ"));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	#КонецЕсли
	
	ПроверкаРазницыВремени.ИнициализироватьПроверкуРазницыВремениССервером();
	
КонецФункции // ЗаполнитьПустуюИБ()

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновление() Экспорт
	
	// Подготовка к выводу формы описания обновлений.
	МакетОписаниеОбновлений = Неопределено;
	ДокументОписаниеОбновлений = Неопределено;
    #Если Клиент Тогда
	ФормаОписаниеОбновлений    = ПолучитьФорму("ОписаниеОбновлений");
	МакетОписаниеОбновлений    = ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений);
	ДокументОписаниеОбновлений = ФормаОписаниеОбновлений.ЭлементыФормы.ДокументОписаниеОбновлений;
	ДокументОписаниеОбновлений.Очистить();
    #КонецЕсли
	
	// Обновление информационной базы.
	// Последовательно вызываются функции для обновления с соответствующей версии.

	//Вызов функций заполнения данных для пустой информационной базы
	Если Константы.НомерВерсииКонфигурации.Получить() = "" Тогда
		
		СтрСообщения = "начальное заполнение информационной базы версии " + Метаданные.Версия;
		ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
		
		НачатьТранзакцию();
		
		Если НЕ ЗначениеЗаполнено(ПланыОбмена.ГлавныйУзел()) Тогда 
			                                                       		
			ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		КонецЕсли;
		
		Константы.НомерВерсииКонфигурации.Установить(Метаданные.Версия); // после заполнения пустой ИБ установим последний номер версии
		
		ЗафиксироватьТранзакцию();
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	ИсходнаяВерсияИБ = ТекущаяВерсияИБ;
	ТекущийНомерРелиза = ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "1.3.1.10";
	
	Если (ТекущийНомерРелиза = "1.2.29" И ТекущаяВерсияИБ <> НоваяВерсияИБ) 
		 ИЛИ (ТекущийНомерРелиза = "1.3.1" И ТекущаяВерсияИБ <> НоваяВерсияИБ)
		Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
		
		// Выполнить обновление на 1.3
		ВыполнитьДействияПриОбновлении1_3();
		
		ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее", "Установка номера версии информационной базы");
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		// сообщение об успешном обновлении информационной базы
		ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Если Клиент Тогда
		ВывестиОписаниеИзменений("131", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	ТекущийНомерРелиза = ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "1.3.2.3";
	
	Если (ТекущийНомерРелиза = "1.3.1" И ТекущаяВерсияИБ <> НоваяВерсияИБ) 
		 ИЛИ (ТекущийНомерРелиза = "1.3.2" И ТекущаяВерсияИБ <> НоваяВерсияИБ)
		Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
		
		// Выполнить обновление на 1.3.2
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		//Обновление праздников на 2011 год
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "Праздники");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ВидыВыплат");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СхемыНалоговогоУчетаПоДоговорамКонтрагентов");
		ЗаполнениеНалоговыхРеквизитовРСКонтрагентыОрганизаций_СчетУчетаНДСПодтвержденные();
		
		ЗаполнитьНачисленияДляПредварительногоРасчета();
		
		ОбщегоНазначения.СообщитьОСостоянииОбновления("Прочее", "Установка номера версии информационной базы");
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		// сообщение об успешном обновлении информационной базы
		ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Если Клиент Тогда
		ВывестиОписаниеИзменений("132", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	ТекущийНомерРелиза = ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "1.3.3.2";
	
	Если (ТекущийНомерРелиза = "1.3.2" И ТекущаяВерсияИБ <> НоваяВерсияИБ) 
		 ИЛИ (ТекущийНомерРелиза = "1.3.3" И ТекущаяВерсияИБ <> НоваяВерсияИБ)
		Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
		
		//Очистим наборы взносов
		НаборЗаписей = РегистрыСведений.ВзносыВФондыПоГруппам.СоздатьНаборЗаписей();
	    НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		//Ежемесячные обновления
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
	
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник",  "ВидыВыплат");
		
		//ЕСВ
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "Налоги");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СпособыОтраженияЗарплатыВРеглУчете");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ПричиныНетрудоспособности");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "РазмерыЗаконодательноУстановленныхВыплат");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВзносыВФондыПоГруппам");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ВидыРасчетовВзносовВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СведенияОВзносахВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СводОтчисленийВФондыНастройкиОтчета");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ОтражениеВзносовВРеглУчете");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ОсновныеНачисленияОрганизаций");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ВзносыВФонды");
		НачальноеЗаполнение.ЗаполнитьОбъект("ПланВидовРасчета", "ОтражениеЗарплатыОрганизацийВРеглУчете");
		
		//НДФЛ
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыДоходовНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыЛьготРаботниковОрганизаций");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "РазмерыЛьготНДФЛ");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СтавкиНДФЛ");
		
		//Бюджет
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "МинимальнаяОплатаТруда");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ПрожиточныеМинимумы");

		
		
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		// сообщение об успешном обновлении информационной базы
		ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Если Клиент Тогда
		ВывестиОписаниеИзменений("133", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	ТекущийНомерРелиза = ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "1.3.4.2";
	
	Если (ТекущийНомерРелиза = "1.3.3" И ТекущаяВерсияИБ <> НоваяВерсияИБ) 
		 ИЛИ (ТекущийНомерРелиза = "1.3.4" И ТекущаяВерсияИБ <> НоваяВерсияИБ)
		Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ПричиныНетрудоспособности");
		
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		// сообщение об успешном обновлении информационной базы
		ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Если Клиент Тогда
		ВывестиОписаниеИзменений("134", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	ТекущийНомерРелиза = ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "1.3.5.1";
	
	Если (ТекущийНомерРелиза = "1.3.4" И ТекущаяВерсияИБ <> НоваяВерсияИБ) 
		 ИЛИ (ТекущийНомерРелиза = "1.3.5" И ТекущаяВерсияИБ <> НоваяВерсияИБ)
		Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
		
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		// сообщение об успешном обновлении информационной базы
		ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Если Клиент Тогда
		ВывестиОписаниеИзменений("135", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	ТекущийНомерРелиза = ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "1.3.6.2";
	
	Если (ТекущийНомерРелиза = "1.3.5" И ТекущаяВерсияИБ <> НоваяВерсияИБ) 
		 ИЛИ (ТекущийНомерРелиза = "1.3.6" И ТекущаяВерсияИБ <> НоваяВерсияИБ)
		Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ШкалаСтавокНалогов");
		
		ЗаполнитьВариантыАлгоритмов();
		
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		// сообщение об успешном обновлении информационной базы
		ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Если Клиент Тогда
		ВывестиОписаниеИзменений("136", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
	КонецЕсли;
	
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	ТекущийНомерРелиза = ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "1.3.7.2";
	
	Если (ТекущийНомерРелиза = "1.3.6" И ТекущаяВерсияИБ <> НоваяВерсияИБ) 
		 ИЛИ (ТекущийНомерРелиза = "1.3.7" И ТекущаяВерсияИБ <> НоваяВерсияИБ)
		Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "НаборыСтатейНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "НаборыСтатейНалоговыхДеклараций");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыЛьготРаботниковОрганизаций");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыДоходовНДФЛ");
		
		//Обновить вид дохода у пособия на погребение
		ВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НаПогребение.ПолучитьОбъект();
		ВР.ДоходНДФЛ = Справочники.ВидыДоходовНДФЛ.Код146;
		ВР.Записать();
		
		//Обновить не предопределенные виды доходов НДФЛ
		ОбновитьВидыДоходовНДФЛ();
		
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		// сообщение об успешном обновлении информационной базы
		ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Если Клиент Тогда
		ВывестиОписаниеИзменений("137", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	ТекущийНомерРелиза = ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "1.3.8.1";
	
	Если (ТекущийНомерРелиза = "1.3.7" И ТекущаяВерсияИБ <> НоваяВерсияИБ) 
		 ИЛИ (ТекущийНомерРелиза = "1.3.8" И ТекущаяВерсияИБ <> НоваяВерсияИБ)
		Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
		
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		// сообщение об успешном обновлении информационной базы
		ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Если Клиент Тогда
		ВывестиОписаниеИзменений("138", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	ТекущийНомерРелиза = ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "1.3.9.24";
	
	Если (ТекущийНомерРелиза = "1.3.8" И ТекущаяВерсияИБ <> НоваяВерсияИБ) 
		 ИЛИ (ТекущийНомерРелиза = "1.3.9" И ТекущаяВерсияИБ <> НоваяВерсияИБ)
		Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ВидыНалоговойДеятельности");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "НалоговыеНазначенияАктивовИЗатрат");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "НаборыСтатейНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "НаборыСтатейНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиОтсроченныхНалоговыхАктивовИОбязательств");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "НалоговыеГруппыОсновныхСредств");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "СтавкиНалогаНаПрибыль");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СхемыНалоговогоУчетаПоДоговорамКонтрагентов");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиЗатрат");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиНеоперационныхРасходов");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СтатьиДоходов");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СхемыРеализации");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СпособыОтраженияРасходовПоАмортизации");
		
		ЗаполнитьГруппуНалоговыхНазначенийДоНКУ();
		
		// заполняем налоговые назначение везде кроме документов
		ОбновлениеИнформационнойБазыСервер.ЗаполнитьНалоговыеНазначенияНКУСправочниковРегистров();
		
		НачисленияПоУмолчаниюКопия = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию.Скопировать();
		УдержанияПоУмолчаниюКопия = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеУдержанийПоУмолчанию.Скопировать();
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "СпособыОтраженияЗарплатыВРеглУчете");
		НачисленияПоУмолчанию = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачисленияПоУмолчанию,НачисленияПоУмолчаниюКопия,"Наименование,СпособРаспределенияЗатрат,НалоговоеНазначениеДоходовИЗатрат,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,ВзносыОсновногоНачисления");
		НачисленияПоУмолчанию.Записать();
		УдержанияПоУмолчанию = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеУдержанийПоУмолчанию.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(УдержанияПоУмолчанию,УдержанияПоУмолчаниюКопия,"Наименование,НалоговоеНазначениеДоходовИЗатрат,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,ВзносыОсновногоНачисления");
		УдержанияПоУмолчанию.Записать();
		
		ОбновитьОтражениеВзносовФОТВРеглУчете();
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "ИндексИнфляции");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений",  "СредняяЗППоВсемВидамЭкономическойДеятельности");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "ПараметрыНалоговогоУчета");
		
		// перезаполняем проводки в зарплатных документах
		ПерезаполнитьПроводкиПоЗарплатнымДокументамНалоговымиНазначениямиНКУ();
		
		ЗаполнитьНастройкуПользователейОсновнойПредставительОрганизации();
		
		УстановитьКоэффициентыДляЗаполненияПриложенияСВДекларацииПоПрибыли();
		
		// Обновление бизнес-процесса "Закрытие месяца"
		ЗаполнитьРегистрыРегламентныхОпераций(Истина, Ложь);
		
		Если НЕ (ТекущийНомерРелиза = "1.3.9") Тогда
			Константы.ЗапретИзмененияДанныхДо01042011.Установить(Истина);
			ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
		КонецЕсли;

		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		// сообщение об успешном обновлении информационной базы
		ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Если Клиент Тогда
		ВывестиОписаниеИзменений("139", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	ТекущийНомерРелиза = ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "1.3.10.3";
	
	Если (ТекущийНомерРелиза = "1.3.9" И ТекущаяВерсияИБ <> НоваяВерсияИБ) 
		 ИЛИ (ТекущийНомерРелиза = "1.3.10" И ТекущаяВерсияИБ <> НоваяВерсияИБ)
		Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
		
		НачальноеЗаполнение = Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.Создать();
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", "ПричиныНетрудоспособности");
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", 		"СтатьиНалоговыхДеклараций");
		НачальноеЗаполнение.ЗаполнитьОбъект("РегистрСведений", "НаборыСтатейНалоговыхДеклараций");

		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", 		"ОсновныеСредства");
		
		НачальноеЗаполнение.ЗаполнитьОбъект("Справочник", 		"СхемыНалогообложения");
		
		СпособОтраженияУстарело = Справочники.СпособыОтраженияЗарплатыВРеглУчете.УстарелоОтражениеБольничныхЗаСчетФСС.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(СпособОтраженияУстарело.СчетДт) Тогда
			СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетФСС.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(СпособОтраженияУстарело,СпособОтражения,"Наименование,СпособРаспределенияЗатрат,НалоговоеНазначениеДоходовИЗатрат,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,ВзносыОсновногоНачисления");
			СпособОтраженияУстарело.Наименование = "(устарело) Отражение больничных за счет ФСС";
			СпособОтражения.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСГосударственнымиЦелевымиФондами;
			СпособОтражения.СубконтоДт1 = Справочники.СтатьиНалоговыхДеклараций.ФССУтрТрудосп_ВремНетрудосп;
			СпособОтражения.СубконтоДт2 = Неопределено;
			СпособОтраженияУстарело.Записать();
			СпособОтражения.Записать();
		КонецЕсли;	
		
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		// сообщение об успешном обновлении информационной базы
		ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Если Клиент Тогда
		ВывестиОписаниеИзменений("1310", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	ТекущийНомерРелиза = ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "1.3.11.5";
	
	Если (ТекущийНомерРелиза = "1.3.10" И ТекущаяВерсияИБ <> НоваяВерсияИБ) 
		 ИЛИ (ТекущийНомерРелиза = "1.3.11" И ТекущаяВерсияИБ <> НоваяВерсияИБ)
		Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		ОбщегоНазначения.Сообщение("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Внимание);
		
		ПроверитьКонстантуЗапретИзмененияДанныхДо01042011();
		
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		
		// сообщение об успешном обновлении информационной базы
		ОбщегоНазначения.Сообщение("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Если Клиент Тогда
		ВывестиОписаниеИзменений("1311", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
	КонецЕсли;
	
	
	
	// Обновление справочника РегламентированныеОтчеты
	ОбщегоНазначения.СообщитьОСостоянииОбновления("Регламентированный учет","Обновление справочника ""Регламентированные отчеты"".");
	ЗаполнитьСписокРегламентированныхОтчетов(Ложь, Истина);
	
	#Если Клиент Тогда
	// Вывод формы дополнительной обработки.
	Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
		ФормаОписаниеОбновлений.Открыть();
	КонецЕсли;
	
	ДеревоОбработокДляЗапускаПакетаОбработокОбновления = ПолучитьДеревоОбработокДляЗапускаПакетаОбработокОбновления(ИсходнаяВерсияИБ);
	Если ДеревоОбработокДляЗапускаПакетаОбработокОбновления.Строки.Количество() > 0 Тогда
		ТекстВопроса = "При обновлении версии конфигурации " + 
		"для обеспечения корректной работы системы необходимо выполнение ряда дополнительных действий. " + 
		"Автоматический последовательный запуск этих действий может быть осуществлен при помощи обработки ""Запуск пакета обработок обновления конфигурации"". " +
		"Перед запуском этой обработки рекомендуется ознакомиться с описанием во встроенной справке обработки." +
		"
		|
		|Выполнение действий в пакетном режиме может занять продолжительное время, поэтому предоставляется возможность выполнить дополнительные действия позже: 
		| 1) Вызов обработки ""Запуск пакета обработок обновления конфигурации"" производится из формы обработки "+
		"""Обновление информационной базы"" (меню ""Справка - Дополнения к описанию""), по нажатию кнопки командной панели.
		| 2) Интерактивный запуск каждой отдельной процедуры. Ссылки на эти процедуры находятся в окне описания обновлений (меню ""Справка - Дополнения к описанию""). " +
		"
		|
		|Открыть обработку   ""Запуск пакета обработок обновления конфигурации""  сейчас?";	
		
		Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,,"Дополнительные действия при обновлении версии конфигурации") = КодВозвратаДиалога.Да Тогда
			Форма = ПолучитьФорму("ЗапускПакетаОбработокОбновленияКонфигурации");
			Форма.СписокОбработок = ДеревоОбработокДляЗапускаПакетаОбработокОбновления;
			Форма.Открыть();		
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли

КонецПроцедуры

// Функция для проверки возможности открытия форм - обработчиков обновления
//
Функция ПолучитьРазрешениеНаОткрытиеФормы() Экспорт
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	
	#Если Клиент Тогда
	Предупреждение("Форму обработки может открывать только пользователь с ролью ""Полные права""");
	#КонецЕсли
	
	Возврат Ложь;
	
КонецФункции

// ВЫПОЛНЕНИЕ ДЕЙСТВИЙ ПРИ ОБНОВЛЕНИИ

// Действия при обновлении на редакцию 1.3 с версии 1.2.29
Процедура ВыполнитьДействияПриОбновлении1_3()
	
	ОбновитьПользователей();
	ОбновитьСпособыРаспределенияСтатейЗатратОрганизаций();
	ЗаполнитьПорядокВПодразделенияхОрганизаций();
	ЗаполнитьПорядокВПодразделениях();
	
КонецПроцедуры

// ВЫПОЛНЕНИЕ ДЕЙСТВИЙ ПОСЛЕ ОБНОВЛЕНИЯ

#Если Клиент Тогда
Функция ДобавитьСтрокуВДеревоОбработок(Корень, Наименование, Представление, Пометка, НомерРелиза="");
	НоваяСтрока = Корень.Строки.Добавить();
	НоваяСтрока.Наименование = Наименование;
	НоваяСтрока.Представление = Представление;
	НоваяСтрока.Пометка = Пометка;
	НоваяСтрока.НомерРелиза = НомерРелиза;
	
	Возврат НоваяСтрока;
КонецФункции	

// Функция получает дерево обработок для передачи в форму ЗапускПакетаОбработокОбновленияКонфигурации
// Параметры: 
//  ИсходныйНомерВерсии - номер версии, который был до обновления или Неопределено, если он не известен
Функция ПолучитьДеревоОбработокДляЗапускаПакетаОбработокОбновления(ИсходнаяВерсияИБ = Неопределено) Экспорт
	
	ДеревоОбработок = Новый ДеревоЗначений();
	ДеревоОбработок.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоОбработок.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ДеревоОбработок.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	ДеревоОбработок.Колонки.Добавить("НомерРелиза", Новый ОписаниеТипов("Строка"));
	
	// На версию 1.3.1
	// не требуется никаких обработок
	
	// На версию 1.3.2
	// не требуется никаких обработок
	
	// На версию 1.3.3
	// не требуется никаких обработок
	
	// На версию 1.3.4
	// не требуется никаких обработок
	
	// На версию 1.3.5
	// обработка вызывается по желанию, с макета 
	
	// На версию 1.3.6
	// не требуется никаких обработок
	
	// На версию 1.3.7
	// не требуется никаких обработок
	
	// На версию 1.3.8
	// не требуется никаких обработок
	
	// На версию 1.3.9
	// с 1.3.8.1 или 1.2.29.1
	Если НЕ ЗначениеЗаполнено(ИсходнаяВерсияИБ) 
	ИЛИ ИсходнаяВерсияИБ = "1.3.4.1" ИЛИ ИсходнаяВерсияИБ = "1.2.29.1" Тогда
		Ветка138 = ДобавитьСтрокуВДеревоОбработок(ДеревоОбработок,"РЕЛИЗ","Переход с 1.3.8, 1.2.29", Истина);
		ДобавитьСтрокуВДеревоОбработок(Ветка138, "ПреобразованиеНалоговыхНазначенийВДокументах","Преобразование реквизитов ""Налоговое назначение"" документов", Истина);
		ДобавитьСтрокуВДеревоОбработок(Ветка138, "НачальноеЗаполнениеСтатей", "Начальное заполнение статей доходов/затрат по структуре Налогового кодекса Украины", Истина);
	КонецЕсли;
	
	Возврат ДеревоОбработок;
	
КонецФункции
#КонецЕсли

#Если Клиент Тогда
// Функция получает макет описания обновлений и заполняет его параметры расшифровок.
//
// Параметры:
//  ФормаОписаниеОбновлений - форма обработки "ОписаниеОбновлений", 
//                            назначается владельцем открываемых из нее форм.
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет "ОписаниеОбновлений" с заполненными параметрами расшифровок.
//
Функция ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений) Экспорт

	МакетОписаниеОбновлений = ПолучитьМакет("ОписаниеОбновлений");
	Параметры               = МакетОписаниеОбновлений.Параметры;

	// Заполнение параметров расшифровок макета описания обновлений,

	// Параметры для секции "Начальное заполнение информационной базы"
	Параметры.ФормаПодбораВалют                = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Валюты, Справочники.Валюты, ,"ФормаПодбораИзКлассификатора");
	Параметры.ФормаСпискаВалют                 = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Валюты, Справочники.Валюты, "ФормаСписка");
	Параметры.ФормаПодбораЕдиниц               = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.КлассификаторЕдиницИзмерения, Справочники.КлассификаторЕдиницИзмерения,, "ФормаПодбораИзКлассификатора");
	Параметры.ФормаСпискаЕдиниц                = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.КлассификаторЕдиницИзмерения, Справочники.КлассификаторЕдиницИзмерения, "ФормаСписка");
	Параметры.ФормаСпискаКонтрагентов          = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Контрагенты, Справочники.Контрагенты, "ФормаСписка");
	Параметры.ФормаСпискаНоменклатуры          = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Номенклатура, Справочники.Номенклатура, "ФормаСписка");
	Параметры.ФормаСпискаТиповЦенНоменклатуры  = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.ТипыЦенНоменклатуры, Справочники.ТипыЦенНоменклатуры, "ФормаСписка");
	Параметры.ФормаСпискаТиповСкидокНаценок    = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.ТипыСкидокНаценок, Справочники.ТипыСкидокНаценок, "ФормаСписка");
	
	Организации = Справочники.Организации.Выбрать();
	Организация = Неопределено;
	Если Организации.Следующий() Тогда
		Организация = Организации.ПолучитьОбъект();
	КонецЕсли;
	Если Организация = Неопределено Тогда
		Параметры.ФормаНовойОрганизации            = "ФормаНовойОрганизации";
	Иначе
		Параметры.ФормаНовойОрганизации            = Организация.ПолучитьФорму();
	КонецЕсли;
	
	Параметры.ФормаСпискаОрганизаций           = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Организации, Справочники.Организации, "ФормаСписка");
	Параметры.ФормаСпискаПодразделений         = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Подразделения, Справочники.Подразделения, "ФормаСписка");
	Параметры.ФормаСпискаСкладов               = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Склады, Справочники.Склады, "ФормаСписка");
	Параметры.ФормаСпискаКасс                  = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Кассы, Справочники.Кассы, "ФормаСписка");
	Параметры.ФормаСпискаКассККМ               = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.КассыККМ, Справочники.КассыККМ, "ФормаСписка");
	Параметры.ФормаКонстант                    = Константы.ПолучитьФорму(); // Основная форма констант доступна роли Пользователь
	Параметры.ФормаСпискаПользователей         = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Справочники.Пользователи, Справочники.Пользователи, "ФормаСписка");
	Параметры.ФормаПользователя                = глЗначениеПеременной("глТекущийПользователь");
	
	// Параметры для секции "Новое в редакции 1.3"
	Параметры.ФормаИспользованиеРегистраСвободныеОстатки       = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Обработки.ИзменениеНастроекУчета, Обработки.ИзменениеНастроекУчета,, "ИспользованиеРегистраСвободныеОстатки");
	Параметры.ФормаНастройкиСогласованияЗаявокНаРасходованиеДС = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.РегистрыСведений.НастройкиСогласованияЗаявокНаРасходованиеДС, РегистрыСведений.НастройкиСогласованияЗаявокНаРасходованиеДС,, "ФормаСписка");
	Параметры.ОбновлениеПроизвольныхОтчетов                    = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Обработки.ОбновлениеИнформационнойБазы, Обработки.ОбновлениеИнформационнойБазы,, "ОбновлениеПроизвольныхОтчетов");
	Параметры.ФормаЗагрузкаНастроекТиповыхОтчетов              = РаботаСДиалогами.ВернутьФормуЕслиДоступна(Метаданные.Обработки.ОбновлениеИнформационнойБазы, Обработки.ОбновлениеИнформационнойБазы,, "ЗагрузкаНастроекТиповыхОтчетов");
	
	
	
	
	Параметры.ПомощникЕСВ = Обработки.ПомощникНачалаУчетаЕСВ.ПолучитьФорму();
	Параметры.ВариантыАлгоритмов = РегистрыСведений.ВариантыАлгоритмовРасчетаЗарплаты.ПолучитьФорму("ФормаСписка");
	
	Параметры.УвеличениеДлиныНомеровДокументов = ПолучитьФорму("УвеличениеДлиныНомеровДокументов");
	
	
	// Параметры для секции "Новое в версии 1.3.9"
	Параметры.ПереходНКУ_КорректировкаОстатковНКУна01042011		 = Документы.КорректировкаОстатковНКУна01042011.ПолучитьФормуСписка();
	
	Параметры.ПереходНКУ_ПреобразованиеНалоговыхНазначенийВДокументах = ПолучитьФорму("ПреобразованиеНалоговыхНазначенийВДокументах");
	Параметры.ПереходНКУ_ИнструкцияПоНачальномуЗаполнениюСтатей		  = ПолучитьФорму("ИнструкцияПоНачальномуЗаполнениюСтатей");
	Параметры.ПереходНКУ_НачальноеЗаполнениеСтатей 					  = ПолучитьФорму("НачальноеЗаполнениеСтатей");
	
	Параметры.ПереходНКУ_СхемыРеализации						= Справочники.СхемыРеализации.ПолучитьФормуСписка();
	Параметры.ПереходНКУ_СпособыОтраженияРасходовПоАмортизации  = Справочники.СпособыОтраженияРасходовПоАмортизации.ПолучитьФормуСписка();
	Параметры.ПереходНКУ_СпособыОтраженияЗарплатыВРеглУчете		= Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПолучитьФормуСписка();
	Параметры.ПереходНКУ_Контрагенты 							= Справочники.Контрагенты.ПолучитьФормуСписка();
	
	Параметры.ПереходНКУ_УчетнаяПолитикаОрганизаций 		= РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьФормуСписка();
	Параметры.ПереходНКУ_ДокументУстановкаПараметровУчетаНоменклатуры = Документы.УстановкаПараметровУчетаНоменклатуры.ПолучитьФормуСписка();
	Параметры.ПереходНКУ_СчетаУчетаНоменклатуры 			= РегистрыСведений.СчетаУчетаНоменклатуры.ПолучитьФормуСписка();
	Параметры.ПереходНКУ_СчетаУчетаРасчетовСКонтрагентами	= РегистрыСведений.КонтрагентыОрганизаций.ПолучитьФормуСписка();
	Параметры.ПереходНКУ_ОтражениеВзносовФОТВРеглУчете		= РегистрыСведений.ОтражениеВзносовФОТВРеглУчете.ПолучитьФормуСписка();
	Параметры.ПереходНКУ_ПараметрыУчетаКурсовыхРазниц		= РегистрыСведений.ПараметрыУчетаКурсовыхРазниц.ПолучитьФормуСписка();
	Параметры.ПереходНКУ_СпособыРаспределенияСтатейЗатрат = РегистрыСведений.СпособыРаспределенияСтатейЗатрат.ПолучитьФормуСписка();
	Параметры.ПереходНКУ_СпособыРаспределенияСтатейЗатратОрганизаций = РегистрыСведений.СпособыРаспределенияСтатейЗатратОрганизаций.ПолучитьФормуСписка();
	Параметры.ПереходНКУ_ПоказателиПриНормальнойМощности = РегистрыСведений.ПоказателиПриНормальнойМощности.ПолучитьФормуСписка();
	Параметры.ПереходНКУ_ПоказателиПриНормальнойМощностиОрганизаций	 = РегистрыСведений.ПоказателиПриНормальнойМощностиОрганизаций.ПолучитьФормуСписка();
	
	Параметры.ПереходНКУ_ОбновлениеНалоговыхНазначенийВРегистрахУчетаНДС = ПолучитьФорму("ОбновлениеНалоговыхНазначенийВРегистрахУчетаНДС");
	
	Возврат МакетОписаниеОбновлений;

КонецФункции // ПодготовитьМакетОписаниеОбновлений()
#КонецЕсли

#Если Клиент Тогда
// Процедура выводит описания изменений в указанном релизе
//
// Параметры
//  НомерРелиза  – Строка - номер релиза, для которого выводится описание
//
Процедура ВывестиОписаниеИзменений(НомерРелиза, ДокументОписаниеОбновлений, МакетОписаниеОбновлений)
	
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + НомерРелиза));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + НомерРелиза);
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + НомерРелиза));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	
КонецПроцедуры // ВывестиОписаниеИзменений()
#КонецЕсли


// ПЕРВОНАЧАЛЬНОЕ ЗАПОЛНЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                        - значение соответствующего реквизита справочника,
//  Наименование                 - значение соответствующего реквизита справочника,
//  НаименованиеПолное           - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском    - значение соответствующего реквизита справочника.
//  ПараметрыПрописиНаУкраинском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском, ПараметрыПрописиНаУкраинском) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();

		СправочникОбъект.Код                          = Код;
		СправочникОбъект.Наименование                 = Наименование;
		СправочникОбъект.НаименованиеПолное           = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском    = ПараметрыПрописиНаРусском;
		СправочникОбъект.ПараметрыПрописиНаУкраинском = ПараметрыПрописиНаУкраинском;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;

		// установим курс и кратность = 1 на 1 января 1980
		МодульВалютногоУчета.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);
		
	КонецЕсли;

	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

// Процедура устанавливает указанное значение указанной константы и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура УстановитьКонстанту(ИмяКонстанты, ЗначениеКонстанты) Экспорт

	Если Константы[ИмяКонстанты].Получить() = ЗначениеКонстанты Тогда
		Возврат;
	КонецЕсли;

	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);

	СтрСообщения = "Константе """ + Метаданные.Константы[ИмяКонстанты].Синоним + """ "
	             + "назначено значение """ + ЗначениеКонстанты + """";

	ОбщегоНазначения.Сообщение(СтрСообщения, СтатусСообщения.Обычное);

КонецПроцедуры

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;

	Если СправочникОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = "а группа";
	Иначе
		СтрСообщения2 = " элемент";
	КонецЕсли;

	СтрСообщения2 = СтрСообщения2 + " справочника """ + СправочникОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = "наименование """ + СправочникОбъект.Наименование + """";

	Попытка
		СправочникОбъект.Записать();
		ОбщегоНазначения.Сообщение(СтрСообщения1 + СтрСообщения2 + "код """ + СправочникОбъект.ПолныйКод() + """, " + СтрСообщения3, СтатусСообщения.Обычное);
	Исключение
	#Если Клиент Тогда
		ОбщегоНазначения.Сообщение("Не записан"  + СтрСообщения2 + СтрСообщения3 +
		         Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
	#КонецЕсли
	КонецПопытки;

КонецПроцедуры

#Если Клиент Тогда
// Процедура заполняет по умолчанию необходимые данные
// для отправки сообщений в службу технической поддержки.
//
Процедура ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки()

	Перем СтруктураЗначения;

	Если ТипЗнч(Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить()) <> Тип("Структура") Тогда

		ОбщегоНазначения.ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию(СтруктураЗначения);

		СтрокаПараметровОтправки = СтруктураЗначения.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");

		Если СтрокаПараметровОтправки <> Неопределено Тогда

			СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1] = "hline@1c.ua";

			Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Установить(Новый ХранилищеЗначения(СтруктураЗначения, Новый СжатиеДанных));

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
#КонецЕсли

// Процедура заполняет константу шаблонов телефонов.
// 
Процедура ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию()

	ТаблицаСоответствий = Новый Соответствие;
	ТаблицаСоответствий.Вставить(7,"999-99-99");
	ТаблицаСоответствий.Вставить(6,"99-99-99");
	ТаблицаСоответствий.Вставить(5,"9-99-99");
	ТаблицаСоответствий.Вставить(4,"99-99");

	ХранилищеШаблоновТелефонов = Новый ХранилищеЗначения(ТаблицаСоответствий);

	Константы.ШаблоныТелефонныхНомеров.Установить(ХранилищеШаблоновТелефонов);

КонецПроцедуры // ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию()

// процедура производит обновление элемента справочника виды контактной информации
Процедура УстановитьПараметрыВидаКонтактнойИнформации(СсылкаВидыКонтактнойИнформации, Знач Тип, Знач ВидОбъектаКонтактнойИнформации)
	
	Если НЕ ЗначениеЗаполнено(СсылкаВидыКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОбъектВидКонтактнойИнформации = СсылкаВидыКонтактнойИнформации.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Тип;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = ВидОбъектаКонтактнойИнформации;
	
		ОбъектВидКонтактнойИнформации.Записать();
		
	Исключение
		ОбщегоНазначения.Сообщение("Ошибка при записи реквизитов элемента " + ОбъектВидКонтактнойИнформации.Наименование + " справочника ""Виды контактной информации""");
	КонецПопытки;

	
КонецПроцедуры

// Заполнение реквизитов справочника "Виды контактной информации"
Процедура ЗаполнитьСправочникВидыКонтактнойИнформации()

	#Если Клиент Тогда
	Состояние("Обновление справочника ""Виды контаткной информации""");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Предопределенный = Истина
	|	И (ВидыКонтактнойИнформации.Тип = &ПустойТип 
	|		ИЛИ ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ПустойВидОбъектаКонтактнойИнформации)
	|";
	
	Запрос.УстановитьПараметр("ПустойТип"                           , Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидОбъектаКонтактнойИнформации", Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
									
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.КонтактнТелефонКандидата Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛицаКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.РабочийТелефонКонтактногоЛицаКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
					
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаДомашний Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаСлужебный Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
		ИначеЕсли Выборка.ссылка = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтактногоЛицаКонтрагента Тогда				
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
		ИначеЕсли Выборка.ссылка = Справочники.ВидыКонтактнойИнформации.EmailОрганизации Тогда				
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
		ИначеЕсли Выборка.ссылка = Справочники.ВидыКонтактнойИнформации.EmailФизЛица Тогда				
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
		КонецЕсли; 
	
	КонецЦикла; 
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли

КонецПроцедуры

// Устанавливает флаг "Запретить использовать в проводках"
// хозрасчетным счетам 
//
Процедура УстановитьПараметрыСчетовБУиНУ()

	НачатьТранзакцию();
	
	#Если Клиент Тогда
	Состояние("Установка запрета использования в проводках групп счетов...");
	#КонецЕсли

	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
			Продолжить;
		КонецЕсли;

		Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;

	ВыборкаСчетов = ПланыСчетов.Налоговый.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
			Продолжить;
		КонецЕсли;

		Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;

	ЗафиксироватьТранзакцию();

КонецПроцедуры

// Функция создает элемент справочника КлассификаторЕдиницИзмерения, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьЕдиницу(Код, Наименование, НаименованиеПолное) Экспорт

	Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли;

	Возврат Ссылка;

КонецФункции

// Начальное заполнение справочника "События ОС".
Процедура НачальноеЗаполнениеСправочникаСобытияОС()
	 
	Попытка 
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету;
		СпрСобытияОС.Наименование = "Принятие к учету";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию;
		СпрСобытияОС.Наименование = "Ввод в эксплуатацию";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВнутреннееПеремещение;
		СпрСобытияОС.Наименование = "Внутреннее перемещение";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание;
		СпрСобытияОС.Наименование = "Списание";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Модернизация;
		СпрСобытияОС.Наименование = "Модернизация";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Ремонт;
		СпрСобытияОС.Наименование = "Ремонт";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПодготовкаКПередаче;
		СпрСобытияОС.Наименование = "Подготовка к передаче";
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача;
		СпрСобытияОС.Наименование = "Передача";
		СпрСобытияОС.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Начальное заполнение справочника "КлассификаторСтранМира".
// Запускается при первоначальном заполнении пустой ИБ.
Процедура НачальноеЗаполнениеСправочникаКлассификаторСтранМира()

	Украина = Справочники.КлассификаторСтранМира.Украина;

	// Заполнение полного наименования предопределенного элемента.
	УкраинаОбъект                    = Украина.ПолучитьОбъект();
	УкраинаОбъект.НаименованиеПолное = "Украина";
	УкраинаОбъект.Записать();

КонецПроцедуры // НачальноеЗаполениеСправочникаКлассификаторСтранМира()

// Процедура выполняет начальное заполнение констант
Процедура УстановитьКонстанты() Экспорт
	
	ДатаНачалаВводаДанных = '19800101';
	
	// Заполнение справочника Валюты.
	ВалютаРегламентированногоУчета = 
	НайтиСоздатьВалюту("980", "грн", "Гривня", 
	                   "гривня, гривни, гривень, ж, копейка, копейки, копеек, ж, 2",
	                   "гривня, гривні, гривень, ж, копійка, копійки, копійок, ж, 2");
	ВалютаУправленческогоУчета = 
	НайтиСоздатьВалюту("840", "USD", "Доллар США", 
	                    "доллар, доллара, долларов, м, цент, цента, центов, м, 2",
	                    "долар, долара, доларів, м, цент, цента, центів, м, 2");
	ВалютаМеждународногоУчета =
	НайтиСоздатьВалюту("978", "EUR", "Евро",
	                   "евро, евро, евро, м, цент, цента, центов, м, 2",
	                   "євро, євро, євро, м, цент, цента, центів, м, 2");
    	
	// Заполнение справочника КлассификаторЕдиницИзмерения.
	ЕдиницаИзмеренияВеса =
	НайтиСоздатьЕдиницу("166", "кг", "Килограмм");
	
	
	УстановитьКонстанту("ВалютаРегламентированногоУчета"          , ВалютаРегламентированногоУчета);
	УстановитьКонстанту("ВалютаМеждународногоУчета"               , ВалютаМеждународногоУчета);
	УстановитьКонстанту("ВалютаУправленческогоУчета"              , ВалютаУправленческогоУчета);
	УстановитьКонстанту("ЕдиницаИзмеренияВеса"                    , ЕдиницаИзмеренияВеса);
	УстановитьКонстанту("ИспользованиеВстроенногоПочтовогоКлиента", Истина);
	УстановитьКонстанту("ИспользоватьВнутренниеЗаказы"            , Истина);
	УстановитьКонстанту("РазрешитьВыводитьСообщенияВПанельКомментариев", Истина);
	УстановитьКонстанту("СтратегияСписанияПартийТоваровПоСтатусам", Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные);
	УстановитьКонстанту("ОпределениеВремениПроведенияПлатежногоДокумента", Перечисления.СпособыОпределенияВремениПроведенияПлатежногоДокумента.ПоВремениРегистрацииДокумента);
	УстановитьКонстанту("ОсновноеПредставлениеФизЛиц"             , Перечисления.ПредставленияФизЛиц.ФамилияИО);
	
	ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию();
	
	#Если Клиент Тогда
	//Данная процедура вызывает функцию ОбщегоНазначения.ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию,
	//которая не может выполняться во внешнем соединении т.к. использует метод ПолучитьОбщуюФорму
	ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки();
	#КонецЕсли	
	
	Константы.ИнтервалПроверкиНапоминанийВСекундах.Установить(60);
	
	Константы.ИспользоватьТолькоСборочныеСпецификации.Установить(Ложь);
	
	Константы.ПрефиксВесовогоТовара.Установить("1");
	Константы.ПрефиксШтучногоТовара.Установить("0");
	Константы.ДлинаКодаВесовогоТовара.Установить(5);
	
	// Установка настроек расчета себестоимости по умолчанию
	УстановитьКонстанту("ГраницаПогрешностиСЛУ", 0.1);
	УстановитьКонстанту("МаксимальноеКоличествоИтерацийСЛУ", 50);
	УстановитьКонстанту("СреднееОтклонениеСЛУ", 0.000001); //Установка среднего отклонения решения СЛУ при расчете себестоимости
	
	// Установим в качестве основного режима - расширенную аналитику
	УстановитьКонстанту("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат",Истина);
	УстановитьКонстанту("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат",ДатаНачалаВводаДанных);
	УстановитьКонстанту("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат",Перечисления.РежимыИспользованияРасширеннойАналитики.РегламентированныйУчетСДополнительнойАналитикой);
	
	РасширеннаяАналитикаУчета.ЗаполнитьНастройкиАналитикиПоШаблону(Перечисления.РежимыИспользованияРасширеннойАналитики.РегламентированныйУчетСДополнительнойАналитикой);
	
	Константы.УчитыватьВозвратыТовараПокупателем.Установить(Истина);
	
КонецПроцедуры	

// Процедура заполняет предопределенные элементы справочника "Способы распределения затрат".
Процедура ЗаполнитьСправочникСпособыРаспределенияЗатрат()
	
	СправочникОбъект = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПоОбъемуВыпуска.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.БазаРаспределенияЗатрат) Тогда
		СправочникОбъект.БазаРаспределенияЗатрат 		= Перечисления.БазыРаспределенияЗатрат.ПоОбъемуВыпуска;
		СправочникОбъект.ПоказательБазыРаспределения 	= Перечисления.ВидыПоказателейБазыРаспределения.НатуральныеЕдиницыИзмерения;
		СправочникОбъект.РаспределятьНаСобственнуюПродукцию 			= Истина;
		СправочникОбъект.РаспределятьНаПродукциюИзДавальческогоСырья 	= Истина;
		СправочникОбъект.РаспределятьНаПродукциюСтороннегоПереработчика = Истина;
		СправочникОбъект.Записать();
	КонецЕсли;
	
	СправочникОбъект = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПоПлановойСебестоимости.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.БазаРаспределенияЗатрат) Тогда
		СправочникОбъект.БазаРаспределенияЗатрат 		= Перечисления.БазыРаспределенияЗатрат.ПоОбъемуВыпуска;
		СправочникОбъект.ПоказательБазыРаспределения 	= Перечисления.ВидыПоказателейБазыРаспределения.ЦеныНоменклатуры;
		СправочникОбъект.ТипЦен 						= Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
		СправочникОбъект.РаспределятьНаСобственнуюПродукцию 			= Истина;
		СправочникОбъект.РаспределятьНаПродукциюИзДавальческогоСырья 	= Истина;
		СправочникОбъект.РаспределятьНаПродукциюСтороннегоПереработчика = Истина;
		СправочникОбъект.Записать();
	КонецЕсли;
	
	СправочникОбъект = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПоНормативам.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.БазаРаспределенияЗатрат) Тогда
		СправочникОбъект.БазаРаспределенияЗатрат 		= Перечисления.БазыРаспределенияЗатрат.ПоНормативам;
		СправочникОбъект.РаспределятьНаСобственнуюПродукцию 			= Истина;
		СправочникОбъект.РаспределятьНаПродукциюИзДавальческогоСырья 	= Истина;
		СправочникОбъект.РаспределятьНаПродукциюСтороннегоПереработчика = Истина;
		СправочникОбъект.Записать();
	КонецЕсли;
	
	СправочникОбъект = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПоВыручкеОтРеализации.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.БазаРаспределенияЗатрат) Тогда
		СправочникОбъект.БазаРаспределенияЗатрат 		= Перечисления.БазыРаспределенияЗатрат.ПоОбъемуПродаж;
		СправочникОбъект.ПоказательБазыРаспределения 	= Перечисления.ВидыПоказателейБазыРаспределения.ФактическаяЦенаРеализации;
		СправочникОбъект.РаспределятьНаСобственнуюПродукцию 			= Истина;
		СправочникОбъект.РаспределятьНаПродукциюИзДавальческогоСырья 	= Истина;
		СправочникОбъект.РаспределятьНаПродукциюСтороннегоПереработчика = Истина;
		СправочникОбъект.Записать();
	КонецЕсли;
	
	СправочникОбъект = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПоОплатеТруда.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.БазаРаспределенияЗатрат) Тогда
		СправочникОбъект.БазаРаспределенияЗатрат 		= Перечисления.БазыРаспределенияЗатрат.ПоСтоимостиЗатрат;
		СправочникОбъект.РаспределятьНаСобственнуюПродукцию 			= Истина;
		СправочникОбъект.РаспределятьНаПродукциюИзДавальческогоСырья 	= Истина;
		СправочникОбъект.РаспределятьНаПродукциюСтороннегоПереработчика = Истина;
		
		#Если Клиент Тогда
		ПостроительОтчета = Новый ПостроительОтчета;
		СправочникОбъект.ЗаполнитьНачальныеНастройки(ПостроительОтчета);
		
		ПостроительОтчета.Отбор.ВидЗатрат.Значение = Перечисления.ВидыЗатрат.ОплатаТруда;
		ПостроительОтчета.Отбор.ВидЗатрат.Использование = Истина;
		
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());
		СтруктураНастроек.Вставить("Отбор", ПостроительОтчета.Отбор);
	
		ХранилищеДанных = Новый ХранилищеЗначения(СтруктураНастроек);
		СправочникОбъект.НастройкиПостроителя = ХранилищеДанных;
		#КонецЕсли	
			
		СправочникОбъект.Записать();
	КонецЕсли;
	
	СправочникОбъект = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПоМатериальнымЗатратам.ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.БазаРаспределенияЗатрат) Тогда
		СправочникОбъект.БазаРаспределенияЗатрат 		= Перечисления.БазыРаспределенияЗатрат.ПоСтоимостиЗатрат;
		СправочникОбъект.РаспределятьНаСобственнуюПродукцию 			= Истина;
		СправочникОбъект.РаспределятьНаПродукциюИзДавальческогоСырья 	= Истина;
		СправочникОбъект.РаспределятьНаПродукциюСтороннегоПереработчика = Истина;
		
		#Если Клиент Тогда
		ПостроительОтчета = Новый ПостроительОтчета;
		СправочникОбъект.ЗаполнитьНачальныеНастройки(ПостроительОтчета);
		
		ПостроительОтчета.Отбор.ВидЗатрат.Значение = Перечисления.ВидыЗатрат.Материальные;
		ПостроительОтчета.Отбор.ВидЗатрат.Использование = Истина;
		
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());
		СтруктураНастроек.Вставить("Отбор", ПостроительОтчета.Отбор);
	
		ХранилищеДанных = Новый ХранилищеЗначения(СтруктураНастроек);
		СправочникОбъект.НастройкиПостроителя = ХранилищеДанных;
		#КонецЕсли	
			
		СправочникОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСправочникСпособыРаспределенияЗатрат()

// Процедура выполняет начальное заполнение справочника "Виды номенклатуры" и
// связанного с ним регистра сведений "Счета учета номенклатуры"
//
Процедура ЗаполнитьРегистрыСчетовУчета()

	#Если Клиент Тогда
	Состояние("Выполняется начальное заполнение регистра сведений ""Счета учета номенклатуры""...");
	#КонецЕсли

	ВидНоменклатурыТовар = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыТовар) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Товар";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыТовар = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	ВидНоменклатурыМатериал = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Материал", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыМатериал) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Материал";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыМатериал = НовыйЭлемент.Ссылка;
	КонецЕсли;

	ВидНоменклатурыПродукция = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Продукция", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыПродукция) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Продукция";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыПродукция = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	ВидНоменклатурыПолуфабрикат = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Полуфабрикат", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыПолуфабрикат) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Полуфабрикат";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		НовыйЭлемент.Записать();
		ВидНоменклатурыПолуфабрикат = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	ВидНоменклатурыУслуга = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга", Истина);
	Если НЕ ЗначениеЗаполнено(ВидНоменклатурыУслуга) Тогда
		НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Услуга";
		НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		НовыйЭлемент.Записать();
		ВидНоменклатурыУслуга = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	НачатьТранзакцию();

	// Пустая номенклатура, организация, склад
	// Заполняем как для вид номенклатуры = ТОВАР
	Запись = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
	
	Запись.Организация  = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	Запись.Склад        = Справочники.Склады.ПустаяСсылка();
	
	Запись.Прочитать();
	
	// уже существующие записи пользователя не трогаем 
	Если НЕ Запись.Выбран() Тогда
		
		Запись.Организация  					= Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура 					= Справочники.Номенклатура.ПустаяСсылка();
		Запись.Склад        					= Справочники.Склады.ПустаяСсылка();
		
		Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
		Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ТоварыВТорговле;
		Запись.СчетУчетаЗабалансовыйБУ          = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию;
		Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.ТоварыНаКомиссии;
		Запись.СчетУчетаПередачиЗабалансовыйБУ  = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссиюНаСубкомиссии;
		Запись.СчетУчетаНДСПриобретений         = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;
		Запись.СчетУчетаНДСПродаж	 		    = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
		Запись.СхемаРеализации	 		        = Справочники.СхемыРеализации.Товары; 
		
		Запись.НалоговоеНазначение	 		  	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		Запись.НалоговоеНазначениеДоходовИЗатрат= Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		
		Запись.Записать();
		
	КонецЕсли; 

	
	// Пустая организация, склад, вид номенклатуры = ТОВАР
	Запись.Организация     = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура    = ВидНоменклатурыТовар;
	Запись.Склад           = Справочники.Склады.ПустаяСсылка();
	
	Запись.Прочитать();
	
	// уже существующие записи пользователя не трогаем 
	Если НЕ Запись.Выбран() Тогда
		
		Запись.Организация      				= Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура    					= ВидНоменклатурыТовар;
		Запись.Склад           					= Справочники.Склады.ПустаяСсылка();
		
		Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
		Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ТоварыВТорговле;
		Запись.СчетУчетаЗабалансовыйБУ          = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию;
		Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.ТоварыНаКомиссии;
		Запись.СчетУчетаПередачиЗабалансовыйБУ  = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссиюНаСубкомиссии;
		Запись.СчетУчетаНДСПриобретений         = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;
		Запись.СчетУчетаНДСПродаж	 		    = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
		Запись.СхемаРеализации	 		        = Справочники.СхемыРеализации.Товары; 
		
		Запись.НалоговоеНазначение	 		  	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		Запись.НалоговоеНазначениеДоходовИЗатрат= Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		
		Запись.Записать();
		
	КонецЕсли;	
	
	// Пустая организация, склад, вид номенклатуры = МАТЕРИАЛ
	
	Запись = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
	
	Запись.Организация     = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура    = ВидНоменклатурыМатериал;
	Запись.Склад           = Справочники.Склады.ПустаяСсылка();
	
	Запись.Прочитать();
	
	// уже существующие записи пользователя не трогаем
	Если НЕ Запись.Выбран() Тогда
		
		Запись.Организация     = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура    = ВидНоменклатурыМатериал;
		Запись.Склад           = Справочники.Склады.ПустаяСсылка();
		
		Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.СырьеИМатериалы;
		Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаЗабалансовыйБУ          = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
		Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
		Запись.СчетУчетаПередачиЗабалансовыйБУ  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаНДСПриобретений         = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;
		Запись.СчетУчетаНДСПродаж	 		    = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
		Запись.СхемаРеализации	 		        = Справочники.СхемыРеализации.Товары; 
		
		Запись.НалоговоеНазначение	 		  	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		Запись.НалоговоеНазначениеДоходовИЗатрат= Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		
		Запись.Записать();
		
	КонецЕсли;	

	// Пустая организация, склад, вид номенклатуры = ПРОДУКЦИЯ
	Запись = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
	
	Запись.Организация     = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура    = ВидНоменклатурыПродукция;
	Запись.Склад           = Справочники.Склады.ПустаяСсылка();
	
	Запись.Прочитать();
	
	// уже существующие записи пользователя не трогаем
	Если НЕ Запись.Выбран() Тогда
		
		Запись.Организация     = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура    = ВидНоменклатурыПродукция;
		Запись.Склад           = Справочники.Склады.ПустаяСсылка();
		
		Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
		Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ТоварыВТорговле;
		Запись.СчетУчетаЗабалансовыйБУ          = ПланыСчетов.Хозрасчетный.МатериальныеЦенностиНаОтветственномХранении;
		Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.ТоварыНаКомиссии;
		Запись.СчетУчетаПередачиЗабалансовыйБУ  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаНДСПриобретений         = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;
		Запись.СчетУчетаНДСПродаж	 		    = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
		Запись.СхемаРеализации	 		        = Справочники.СхемыРеализации.Продукция; 
		
		Запись.НалоговоеНазначение	 		  	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		Запись.НалоговоеНазначениеДоходовИЗатрат= Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		
		Запись.Записать();
		
	КонецЕсли;	
	
	
	// Пустая организация, склад, вид номенклатуры = ПОЛУФАБРИКАТ
	
	Запись = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
	
	Запись.Организация     = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура    = ВидНоменклатурыПолуфабрикат;
	Запись.Склад           = Справочники.Склады.ПустаяСсылка();
	
	Запись.Прочитать();
	
	// уже существующие записи пользователя не трогаем
	Если НЕ Запись.Выбран() Тогда
		
		Запись.Организация     = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура    = ВидНоменклатурыПолуфабрикат;
		Запись.Склад           = Справочники.Склады.ПустаяСсылка();
		
		Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.Полуфабрикаты;
		Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаЗабалансовыйБУ          = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
		Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
		Запись.СчетУчетаПередачиЗабалансовыйБУ  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаНДСПриобретений         = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;
		Запись.СчетУчетаНДСПродаж	 		    = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
		Запись.СхемаРеализации	 		        = Справочники.СхемыРеализации.Товары; 
		
		Запись.НалоговоеНазначение	 		  	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		Запись.НалоговоеНазначениеДоходовИЗатрат= Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		
		Запись.Записать();
		
	КонецЕсли;	
	
	// Пустая организация, склад, вид номенклатуры = УСЛУГА
	
	Запись = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
	
	Запись.Организация     = Справочники.Организации.ПустаяСсылка();
	Запись.Номенклатура    = ВидНоменклатурыУслуга;
	Запись.Склад           = Справочники.Склады.ПустаяСсылка();
	
	Запись.Прочитать();
	
	// уже существующие записи пользователя не трогаем
	Если НЕ Запись.Выбран() Тогда
		
		Запись.Организация     = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура    = ВидНоменклатурыУслуга;
		Запись.Склад           = Справочники.Склады.ПустаяСсылка();
		
		Запись.СчетУчетаБУ                      = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаВРозницеБУ              = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаЗабалансовыйБУ          = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаПередачиБУ              = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаПередачиЗабалансовыйБУ  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Запись.СчетУчетаНДСПриобретений         = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;
		Запись.СчетУчетаНДСПродаж	 		    = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные;
		Запись.СхемаРеализации	 		        = Справочники.СхемыРеализации.Услуги; 
		
		Запись.НалоговоеНазначение	 		  	= Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		Запись.НалоговоеНазначениеДоходовИЗатрат= Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
		
		Запись.Записать();
		
	КонецЕсли;	
	
	

	ЗафиксироватьТранзакцию();

КонецПроцедуры //ЗаполнитьРегистрыСчетовУчета()

Процедура ЗаполнениеНалоговыхРеквизитовРСКонтрагентыОрганизаций_СчетУчетаНДСПодтвержденные()

	РС = РегистрыСведений.КонтрагентыОрганизаций.СоздатьНаборЗаписей();
	РС.Прочитать();
	
	Сч6431 = ПланыСчетов.Хозрасчетный.НалоговыеОбязательства;
	Сч6441 = ПланыСчетов.Хозрасчетный.НалоговыйКредит;
	
	Для каждого ЗаписьКонтрагент Из РС Цикл
		
		Если НЕ ЗначениеЗаполнено(ЗаписьКонтрагент.СчетУчетаНДСПриобретенийПодтвержденный) Тогда
		
			ЗаписьКонтрагент.СчетУчетаНДСПриобретенийПодтвержденный = Сч6441;
		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗаписьКонтрагент.СчетУчетаНДСПродажПодтвержденный) Тогда
		
			ЗаписьКонтрагент.СчетУчетаНДСПродажПодтвержденный 		= Сч6431;
		
		КонецЕсли;

	КонецЦикла;
	
	РС.Записать();
	
КонецПроцедуры

// Устанавливает субконто "Статьи движения денежных средств" на счете "Касса" и его субсчетах
Процедура УстановитьСубконтоСтатьяДДСВПлатеСчетов()
	
	Попытка

		Счет  = ПланыСчетов.Хозрасчетный.Касса;
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);

		ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(Счет);
		Пока ВыборкаСчетов.Следующий() Цикл

			Счета.Добавить(ВыборкаСчетов.Ссылка);

		КонецЦикла;

		Для каждого Счет Из Счета Цикл

			Объект   = Счет.Значение.ПолучитьОбъект();
			КодСчета = Объект.Код;

			Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто") = Неопределено Тогда
				
				НовыйВид = Объект.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
				НовыйВид.Суммовой    = Истина;
	      		НовыйВид.ТолькоОбороты = Истина;
				НовыйВид.Количественный = Истина;
				НовыйВид.Валютный = Истина;
			
				Сообщение = "План счетов ""Хозрасчетный"", счет """ + Строка(Объект) + """ установлено субконто ""Статьи движения денежных средств""";
							
				Если Прав(Сообщение, 1) = "," Тогда
					Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
				КонецЕсли;

				Объект.Записать();
				Сообщить(Сообщение);

			КонецЕсли;
			
		КонецЦикла;

	Исключение

		Сообщить("Счет " + Строка(КодСчета) + """:");
		Сообщить(ОписаниеОшибки());

	КонецПопытки
	
КонецПроцедуры // УстановитьСубконтоСтатьяДДСВПлатеСчетов()

//Заполнение регистров сведений ДокументыРегламентныхОпераций и ОтчетыРегламентныхОпераций первоначальными значениями
Процедура ЗаполнитьРегистрыРегламентныхОпераций(ДокументыРегламентныхОпераций, ОтчетыРегламентныхОпераций)

	Если ДокументыРегламентныхОпераций Тогда
		НаборЗаписей = РегистрыСведений.ДокументыРегламентныхОпераций.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();	
		НаборЗаписей.ЗаполнитьРегистрПоумолчанию();
		НаборЗаписей.Записать();
	КонецЕсли; 
	
	Если ОтчетыРегламентныхОпераций Тогда
		НаборЗаписей = РегистрыСведений.ОтчетыРегламентныхОпераций.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();	
		НаборЗаписей.ЗаполнитьРегистрПоумолчанию();
		НаборЗаписей.Записать();
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьРегистрыРегламентныхОпераций


// Процедура заполняет предопределенную смену Смена24Часа
Процедура ЗаполнитьПредопределенныеСмены() Экспорт
	
	Смена = Справочники.Смены.Смена24Часа.ПолучитьОбъект();
	Смена.ПериодыСмены.Очистить();
	ПериодСмены = Смена.ПериодыСмены.Добавить();
	ПериодСмены.ВремяНачала = Дата(1,1,1, 0, 0, 1);
	ПериодСмены.ВремяОкончания = Дата(1,1,1, 23, 59, 59);
	Смена.Записать();
	
КонецПроцедуры // ЗаполнитьПредопределенныеСмены()

Процедура УстановитьИспользованиеВидовЗадачПользователей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыЗадачПользователей.Ссылка
	|ИЗ
	|	Справочник.ВидыЗадачПользователей КАК ВидыЗадачПользователей
	|ГДЕ
	|	ВидыЗадачПользователей.Использование";
	
	// Если есть хотя бы одна задача, для которой установлен признак использование
	// повторно устанавливать использование не нужно
	Если Запрос.Выполнить().Пустой() Тогда
		ВыбранныеЗадачи = Справочники.ВидыЗадачПользователей.Выбрать();
		Пока ВыбранныеЗадачи.Следующий() Цикл
			ЗадачаОбъект = ВыбранныеЗадачи.ПолучитьОбъект();
			ЗадачаОбъект.Использование = Истина;
			ЗадачаОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтажВДняхСтажВЧасах()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета,
	               |	ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени
	               |ИЗ
	               |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
				   |ГДЕ ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени";
				   
	ТаблицаРабочеговремени = Запрос.Выполнить().Выгрузить();			   
	
	
	ВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СтажВДнях.ПолучитьОбъект();
	
	ВР.КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное;
	ВР.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
	ВР.ФормулаРасчета = "ИсходныеДанные.Показатель1";
	ВР.БазаПоНазначению = Истина;
	
	Показатель = ВР.Показатели.Добавить();
	Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБазаВремяВДнях;
	
	ВР.БазовыеВидыРасчета.Очистить();
	ВР.БазовыеВидыРасчета.Загрузить(ТаблицаРабочеговремени);
	
	ВР.Записать();
	
	ВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СтажВЧасах.ПолучитьОбъект();
	
	ВР.КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное;
	ВР.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
	ВР.ФормулаРасчета = "ИсходныеДанные.Показатель1";
	ВР.БазаПоНазначению = Истина;
	
	Показатель = ВР.Показатели.Добавить();
	Показатель.Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБазаВремяВЧасах;
	
	ВР.БазовыеВидыРасчета.Очистить();
	ВР.БазовыеВидыРасчета.Загрузить(ТаблицаРабочеговремени);
	
	ВР.Записать();

	
КонецПроцедуры

Процедура ЗаполнитьНачисленияДляПредварительногоРасчета()
	
	НаборЗаписей = РегистрыСведений.НачисленияДляПредварительногоРасчета.СоздатьНаборЗаписей(); 

	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы; 

	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы; 
	
	НаборЗаписей.Записать();

	
КонецПроцедуры

Процедура ЗаполнитьВариантыАлгоритмов()
	
	НаборЗаписей = РегистрыСведений.ВариантыАлгоритмовРасчетаЗарплаты.СоздатьНаборЗаписей(); 
	Запись = НаборЗаписей.Добавить();
	Запись.РасчетНДФЛ17 = Перечисления.ВариантыАлгоритмовРасчетНДФЛ17.ДоначислениеНаСуммуПревышения;
	НаборЗаписей.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ФУНКЦИИ, ВЫПОЛНЯЮЩИЕСЯ ПРИ ВСЕХ ОБНОВЛЕНИЯХ

// Процедура изменяет ставшие неуникальными коды предопределенных элементов
Процедура УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов) Экспорт
	
	МассивЭлементов = Новый Массив;
	
	Пока СписокПредопределенныхЭлементов.Количество()>0 Цикл
		
		МассивЭлементов.Очистить();
		КолвоЭлементовВСписке = СписокПредопределенныхЭлементов.Количество();
		ТекушийТипЗначения = ТипЗнч(СписокПредопределенныхЭлементов [КолвоЭлементовВСписке-1].Значение);
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекушийТипЗначения);		
		Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = Справочники[МетаданныеТипа.Имя];
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыВидовХарактеристик[МетаданныеТипа.Имя];
		ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыСчетов[МетаданныеТипа.Имя];	
		ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыВидовРасчета[МетаданныеТипа.Имя];
		Иначе
			МенеджерТекущегоТипа = Неопределено;
		КонецЕсли;
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВСписке Цикл
			ЭлементСписка = СписокПредопределенныхЭлементов [КолвоЭлементовВСписке - ОбратныйИндекс];
			
			Если ТипЗнч(ЭлементСписка.Значение) = ТекушийТипЗначения Тогда				
				ЕСли МетаданныеТипа.ДлинаКода <> 0 И МенеджерТекущегоТипа <> Неопределено Тогда
					МассивЭлементов.Добавить(ЭлементСписка.Значение);
				КонецЕсли;				
				СписокПредопределенныхЭлементов.Удалить(ЭлементСписка);				
			КонецЕсли;			
		КонецЦикла;
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Предопределенные.Ссылка
		|ИЗ
		|	" + МетаданныеТипа.ПолноеИмя() + " КАК Предопределенные
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + МетаданныеТипа.ПолноеИмя() + " КАК Пользовательские
		|		ПО Предопределенные.Код = Пользовательские.Код
		|
		|ГДЕ
		|	Предопределенные.Ссылка В(&СписокЭлементов)
		|    И Пользовательские.Ссылка НЕ В(&СписокЭлементов)";
		
		Запрос.УстановитьПараметр("СписокЭлементов", МассивЭлементов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();			
			Объект.УстановитьНовыйКод();			
			Если МенеджерТекущегоТипа.НайтиПоКоду(Объект.Код).Пустая() Тогда
				
				// Поскольку меняем только код элемента, проверку корректности заполнения
				// дополнительных реквизитов объекта не выполняем.
				Объект.ОбменДанными.Загрузка = Истина;
				
				Объект.Записать();
			КонецЕсли;			
		КонецЦикла;	
		
	КонецЦикла;


КонецПроцедуры

// РЕГЛАМЕНТИРОВАННАЯ ОТЧЕТНОСТЬ

// Выполняет первоначальное заполнение справочника РегламентированныеОтчеты
// списком регламентированных отчетов. 
// Процедура должна вызываться при первоначальном заполнении пустой информационной базы
// и при обновлении версии информационной базы
Процедура ЗаполнитьСписокРегламентированныхОтчетов(ПервоеЗаполнение = Истина, ИзменятьПризнакИспользованияВнешнегоОтчета = Истина)

	Перем ДеревоОтчетов;
	Перем ОбработкаОбновлениеОтчетов;

	Если ИзменятьПризнакИспользованияВнешнегоОтчета И НЕ ПервоеЗаполнение Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
							  |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
		                      |ИЗ
		                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		                      |ГДЕ
		                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать = &ПризнакИспользованияВнешнегоОтчета");
		Запрос.УстановитьПараметр("ПризнакИспользованияВнешнегоОтчета", Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Метаданные.Документы.Найти(Выборка.ИсточникОтчета) <> Неопределено ИЛИ	Метаданные.Отчеты.Найти(Выборка.ИсточникОтчета) <> Неопределено Тогда
				ОбъектРеглОтчет = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектРеглОтчет.ВнешнийОтчетИспользовать = Ложь;
				ОбъектРеглОтчет.Записать();
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	// Заполнением списка отчетов выполняется путем вызова экспортных процедур
	// основной формы обработки ОбновлениеРегламентированнойОтчетности.
	ОбработкаОбновлениеОтчетов = Обработки.ОбновлениеРегламентированнойОтчетности.Создать();
	
	// Получаем список регламентированных отчетов в виде дерева.
	ДеревоОтчетов = ОбработкаОбновлениеОтчетов.ПолучитьСписокОтчетов();

	Если ДеревоОтчетов.Строки.Количество() = 0 Тогда
		// нет обновлений
		Возврат;
	КонецЕсли;
	
	// Заполняем список отчетов
	ОбработкаОбновлениеОтчетов.ЗаполнитьСписокОтчетов(ДеревоОтчетов, ПервоеЗаполнение);

КонецПроцедуры // ЗаполнитьСписокРегламентированныхОтчетов()

// ТИПОВЫЕ ОТЧЕТЫ

// Загрузка предопределенных настроек при первом запуске системы для отчетов
Процедура ЗагрузитьНастройкиОтчетов() Экспорт
	
	#Если НЕ Сервер Тогда
	ТаблицаНастроек = ТиповыеОтчеты.ПолучитьТаблицуПредопределенныхНастроек();
	
	Для каждого СтрокаНастройки из ТаблицаНастроек Цикл
		
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента(СтрокаНастройки.Макет, СтрокаНастройки.Отчет);
		
	КонецЦикла
	#КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩАЯ ФУНКЦИОНАЛЬНОСТЬ

Процедура ЗаполнитьНастройкуПользователейОсновнойПредставительОрганизации()
	
	Настройки = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();

	Пользователь = Справочники.Пользователи.Выбрать();
	
	Пока Пользователь.Следующий() Цикл
		
		Если Пользователь.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если Пользователь.ФизЛицо.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		// проверим, нет ли такой записи.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиПользователей.Значение
		               |ИЗ
		               |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		               |ГДЕ
		               |	НастройкиПользователей.Пользователь = &Пользователь
		               |	И НастройкиПользователей.Настройка = &Настройка";
		Запрос.УстановитьПараметр("Пользователь",Пользователь.Ссылка);
		Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойПредставительОрганизации);
		
		Если Запрос.Выполнить().Пустой() Тогда
			Настройка = Настройки.Добавить();
			Настройка.Пользователь = Пользователь.Ссылка;
			Настройка.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойПредставительОрганизации;
			Настройка.Значение     = Пользователь.ФизЛицо;
		КонецЕсли;
		
	КонецЦикла;

	Настройки.Записать(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НАЛОГОВЫЙ УЧЕТ

Функция ПереопределитьСтатьиЗатратПоНалоговомуКодексу() Экспорт
	
	// заполняем непредопределенные статьи затрат
	// и подменяем их в разных объектах конфигурации
	НовыеСтатьи = ЗаполнитьНепредопределенныеСтатьи();
	
	////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////
	Спр = Справочники.СпособыОтраженияЗарплатыВРеглУчете.Выбрать();
	
	ЗП_Производство     = НовыеСтатьи.СтатьиЗатрат_НПНК_ПЗ_Зарплата;
	ЗП_ОПЗ 				= НовыеСтатьи.СтатьиЗатрат_НПНК_ЗВ_Управление_Зарплата;
	ЗП_АЗ  				= НовыеСтатьи.СтатьиЗатрат_НПНК_АВ_Зарплата;
	ЗП_ЗС 				= НовыеСтатьи.СтатьиЗатрат_НПНК_ВЗ_Зарплата;
	
	ЗП_Строительство 	= НовыеСтатьи.СтатьиЗатрат_НПНК_НеУчитывать;
	
	Пока Спр.Следующий() Цикл
		
		ЭлементСправочника = Спр.ПолучитьОбъект();
		
		СчетЗатрат = ЭлементСправочника.СчетДт;
		
		Если Не ЗначениеЗаполнено(СчетЗатрат) Тогда
			Продолжить;
		КонецЕсли; 
		
		ЕстьСубконтоСтатьяЗатрат = Ложь;
		Для НомСубконто = 1 По 3 Цикл
			Если СчетЗатрат.ВидыСубконто.Количество()<НомСубконто Тогда
				Прервать;
			КонецЕсли;
			
			ВидСубконто = СчетЗатрат.ВидыСубконто[НомСубконто-1].ВидСубконто;
			Если     ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
				ЕстьСубконтоСтатьяЗатрат = Истина;
				Прервать;
			КонецЕсли;

		КонецЦикла;
		
		Если ЕстьСубконтоСтатьяЗатрат = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, ЭлементСправочника["СубконтоДт" + НомСубконто]);
		
		Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			
			ЭлементСправочника["СубконтоДт" + НомСубконто] = ЗП_Производство;
			
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			
			ЭлементСправочника["СубконтоДт" + НомСубконто] = ЗП_Строительство;
			
		ИначеЕсли  ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда	
				
			ЭлементСправочника["СубконтоДт" + НомСубконто] = ЗП_ОПЗ;
				
		ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
				
			ЭлементСправочника["СубконтоДт" + НомСубконто] = ЗП_АЗ;
			 
		ИначеЕсли  ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт Тогда
				
			ЭлементСправочника["СубконтоДт" + НомСубконто] = ЗП_ЗС;
			
		ИначеЕсли  ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы Тогда
				
			//Сообщить(Локализация.СтрШаблон(НСтр("ru='В способе отражения расходов по ЗП ""¤1¤"" указан субсчет 94 счета - определить статью затрат в классификации налогового кодекса невозможно. Укажите статью вручную!';uk='У способі відображення витрат по ЗП ""¤1¤"" зазначений 94 рахунок - визначити статтю витрат у класифікації податкового кодекса неможливо. Вкажіть статтю власноруч!'"), ЭлементСправочника));
			
		КонецЕсли;
		
		Если ЭлементСправочника.Модифицированность() Тогда
			ЭлементСправочника.ОбменДанными.Загрузка = Истина;
			ЭлементСправочника.Записать();
		КонецЕсли;
	
	КонецЦикла;
	
	////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////
	РС = РегистрыСведений.ОтражениеВзносовФОТВРеглУчете;
	
	СписокНалогов = РС.СрезПоследних('20110401').ВыгрузитьКолонку("Налог");
	
	Для каждого Налог Из СписокНалогов Цикл
		
		Если    Налог = Справочники.Налоги.ЕСВФОТБольничные
			ИЛИ Налог = Справочники.Налоги.ЕСВФОТБюджетники
			ИЛИ Налог = Справочники.Налоги.ЕСВФОТГПХ 
			ИЛИ Налог = Справочники.Налоги.ЕСВФОТИнвалиды 
			ИЛИ Налог = Справочники.Налоги.ЕСВФОТИнвалиды50 
			ИЛИ Налог = Справочники.Налоги.ЕСВФОТЛетчики 
			ИЛИ Налог = Справочники.Налоги.ЕСВФОТРаботники 
			ИЛИ Налог = Справочники.Налоги.ЕСВФОТРаботникиУТОГУТОС
			Тогда
		Иначе
			Продолжить;	
		КонецЕсли;
		
		Запись = РС.СоздатьМенеджерЗаписи();		
		Запись.Активность = Истина;		
		Запись.Период = '20110401';		
		Запись.Налог = Налог;		
		Запись.СчетЗатрат   = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы;
		Запись.СтатьяЗатрат = НовыеСтатьи.СтатьиЗатрат_НПНК_ЗВ_Управление_Взносы;
        Запись.Записать();
		
		Запись = РС.СоздатьМенеджерЗаписи();		
		Запись.Активность = Истина;		
		Запись.Период= '20110401';		
		Запись.Налог = Налог;		
		Запись.СчетЗатрат   = ПланыСчетов.Хозрасчетный.АдминистративныеРасходы;
		Запись.СтатьяЗатрат = НовыеСтатьи.СтатьиЗатрат_НПНК_АВ_Взносы;
	    Запись.Записать();

		Запись = РС.СоздатьМенеджерЗаписи();		
		Запись.Активность = Истина;		
		Запись.Период= '20110401';		
		Запись.Налог = Налог;		
		Запись.СчетЗатрат   = ПланыСчетов.Хозрасчетный.РасходыНаСбыт;
		Запись.СтатьяЗатрат = НовыеСтатьи.СтатьиЗатрат_НПНК_ВЗ_Взносы;
		Запись.Записать();
		
		Запись = РС.СоздатьМенеджерЗаписи();		
		Запись.Активность = Истина;		
		Запись.Период= '20110401';		
		Запись.Налог = Налог;		
		Запись.СчетЗатрат   = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
		Запись.СтатьяЗатрат = НовыеСтатьи.СтатьиЗатрат_НПНК_ПЗ_Взносы;
		Запись.Записать();

		Запись = РС.СоздатьМенеджерЗаписи();		
		Запись.Активность = Истина;		
		Запись.Период= '20110401';		
		Запись.Налог = Налог;		
		Запись.СчетЗатрат   = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства;
		Запись.СтатьяЗатрат = НовыеСтатьи.СтатьиЗатрат_НПНК_ПЗ_Взносы;
		Запись.Записать();

		//Запись = РС.СоздатьМенеджерЗаписи();		
		//Запись.Активность = Истина;		
		//Запись.Период= '20110401';		
		//Запись.Налог = Налог;		
		//Запись.СчетЗатрат   = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства;
		//Запись.СтатьяЗатрат = НовыеСтатьи.СтатьиЗатрат_НПНК_ПЗ_Взносы;
		//Запись.Записать();

	КонецЦикла;
	
	// еще раз перезаполним документы
	ПерезаполнитьПроводкиПоЗарплатнымДокументамНалоговымиНазначениямиНКУ();
	
	////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////
	Спр = Справочники.СпособыОтраженияРасходовПоАмортизации.Выбрать();
	
	СпособыДляОС  = ПолучитьИспользуемыеСпособыАмортизации("СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет");
	СпособыДляОС.Свернуть("Способ");
	СпособыДляНМА = ПолучитьИспользуемыеСпособыАмортизации("СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет");
	СпособыДляНМА.Свернуть("Способ");
	ОбщиеСпособы = Новый Массив();
	
	// амортизация
	АМ_ОС_91 			= НовыеСтатьи.СтатьиЗатрат_НПНК_АМ_ОС_ЗВ;
	АМ_НМА_91 			= НовыеСтатьи.СтатьиЗатрат_НПНК_АМ_НА_ЗВ;
	
	АМ_ОС_92 			= НовыеСтатьи.СтатьиЗатрат_НПНК_АМ_ОС_АВ;
	АМ_НМА_92 			= НовыеСтатьи.СтатьиЗатрат_НПНК_АМ_НА_АВ;

	АМ_ОС_93  			= НовыеСтатьи.СтатьиЗатрат_НПНК_АМ_ОС_ВЗ;
	АМ_НМА_93 			= НовыеСтатьи.СтатьиЗатрат_НПНК_АМ_НА_ВЗ;
	
	АМ_ОФ_94 			= НовыеСтатьи.СтатьиЗатрат_НПНК_АМ_ОС_ИВ;
	
	АМ_ОС_231 			= НовыеСтатьи.СтатьиЗатрат_НПНК_ПЗ_АмортизацияОС;
	АМ_НМА_231			= НовыеСтатьи.СтатьиЗатрат_НПНК_ПЗ_АмортизацияНА;
	
	// ремонты
	РМ_ОС_91 			= НовыеСтатьи.СтатьиЗатрат_НПНК_АМ_Ремонт_ЗВ;
	
	РМ_ОС_92 			= НовыеСтатьи.СтатьиЗатрат_НПНК_АМ_Ремонт_АВ;

	РМ_ОС_93  			= НовыеСтатьи.СтатьиЗатрат_НПНК_АМ_Ремонт_ВЗ;
	
	РМ_ОФ_94 			= НовыеСтатьи.СтатьиЗатрат_НПНК_АМ_Ремонт_ИВ;
	
	ОФ_Строительство 	= НовыеСтатьи.СтатьиЗатрат_НПНК_НеУчитывать;	
	
	Пока Спр.Следующий() Цикл
		
		ЭлементСправочника = Спр.ПолучитьОбъект();
		
		Если ЭлементСправочника.Ссылка = Справочники.СпособыОтраженияРасходовПоАмортизации.ВременнаяРазницаОСНа01042011 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СпособыДляНМА.Найти(ЭлементСправочника.Ссылка) = Неопределено Тогда
			// только для ОС
			СпособДляОС = Истина;
		Иначе
			Если СпособыДляОС.Найти(ЭлементСправочника.Ссылка) = Неопределено Тогда
				// только для НМА
				СпособДляОС = Ложь;
			Иначе
				// способ общий, для текущего справочника заполним как для ОС
				СпособДляОС = Истина;
				ОбщиеСпособы.Добавить(ЭлементСправочника.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Способ Из ЭлементСправочника.Способы Цикл
		
			СчетЗатрат = Способ.СчетЗатрат;
			
			ЕстьСубконтоСтатьяЗатрат = Ложь;
			Для НомСубконто = 1 По 3 Цикл
				Если СчетЗатрат.ВидыСубконто.Количество()<НомСубконто Тогда
					Прервать;
				КонецЕсли;
				
				ВидСубконто = СчетЗатрат.ВидыСубконто[НомСубконто-1].ВидСубконто;
				Если     ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
					ЕстьСубконтоСтатьяЗатрат = Истина;
					Прервать;
				КонецЕсли;

			КонецЦикла;
			
			
			Если ЕстьСубконтоСтатьяЗатрат Тогда
				ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, Способ["Субконто" + НомСубконто]);
			Иначе	
				ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, Неопределено);
			КонецЕсли;	
			
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				
				Если СпособДляОС Тогда
					Если ЕстьСубконтоСтатьяЗатрат Тогда
						Способ["Субконто" + НомСубконто] = АМ_ОС_231;
					КонецЕсли;	
					Способ.СтатьяЗатрат   				 = АМ_ОС_231;
					Способ.СтатьяЗатратНаУлучшениеОС   = Неопределено;
				Иначе	
					Если ЕстьСубконтоСтатьяЗатрат Тогда
						Способ["Субконто" + НомСубконто] = АМ_НМА_231;
					КонецЕсли;	
					Способ.СтатьяЗатрат 				= АМ_НМА_231;
					Способ.СтатьяЗатратНаУлучшениеОС   = Неопределено;
				КонецЕсли;
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда	
				
				Если СпособДляОС Тогда
					Если ЕстьСубконтоСтатьяЗатрат Тогда
						Способ["Субконто" + НомСубконто] = ОФ_Строительство;
					КонецЕсли;	
					Способ.СтатьяЗатрат 				= ОФ_Строительство;
					Способ.СтатьяЗатратНаУлучшениеОС   = ОФ_Строительство;
				Иначе	
					Если ЕстьСубконтоСтатьяЗатрат Тогда
						Способ["Субконто" + НомСубконто] = ОФ_Строительство;
					КонецЕсли;	
					Способ.СтатьяЗатрат 				= ОФ_Строительство;
					Способ.СтатьяЗатратНаУлучшениеОС   = Неопределено;
				КонецЕсли;
				
		   	ИначеЕсли  ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда	
					
				Если СпособДляОС Тогда
					Если ЕстьСубконтоСтатьяЗатрат Тогда
						Способ["Субконто" + НомСубконто] = АМ_ОС_91;
					КонецЕсли;	
					Способ.СтатьяЗатрат 				= АМ_ОС_91;
					Способ.СтатьяЗатратНаУлучшениеОС   = РМ_ОС_91;
				Иначе	
					Если ЕстьСубконтоСтатьяЗатрат Тогда
						Способ["Субконто" + НомСубконто] = АМ_НМА_91;
					КонецЕсли;	
					Способ.СтатьяЗатрат 				= АМ_НМА_91;
					Способ.СтатьяЗатратНаУлучшениеОС   = Неопределено;
				КонецЕсли;
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
					
				Если СпособДляОС Тогда
					Если ЕстьСубконтоСтатьяЗатрат Тогда
						Способ["Субконто" + НомСубконто] = АМ_ОС_92;
					КонецЕсли;	
					Способ.СтатьяЗатрат 				= АМ_ОС_92;
					Способ.СтатьяЗатратНаУлучшениеОС   = РМ_ОС_92;
				Иначе	
					Если ЕстьСубконтоСтатьяЗатрат Тогда
						Способ["Субконто" + НомСубконто] = АМ_НМА_92;
					КонецЕсли;	
					Способ.СтатьяЗатрат 				= АМ_НМА_92;
					Способ.СтатьяЗатратНаУлучшениеОС   = Неопределено;
				КонецЕсли;
				 
			ИначеЕсли  ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт Тогда
					
				Если СпособДляОС Тогда
					Если ЕстьСубконтоСтатьяЗатрат Тогда
						Способ["Субконто" + НомСубконто] = АМ_ОС_93;
					КонецЕсли;	
					Способ.СтатьяЗатрат 				= АМ_ОС_93;
					Способ.СтатьяЗатратНаУлучшениеОС   = РМ_ОС_93;
				Иначе	
					Если ЕстьСубконтоСтатьяЗатрат Тогда
						Способ["Субконто" + НомСубконто] = АМ_НМА_93;
					КонецЕсли;	
					Способ.СтатьяЗатрат 				= АМ_НМА_93;
					Способ.СтатьяЗатратНаУлучшениеОС   = Неопределено;
				КонецЕсли;
				
			ИначеЕсли  ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы Тогда
					
				Если СпособДляОС Тогда
					Если ЕстьСубконтоСтатьяЗатрат Тогда
						Способ["Субконто" + НомСубконто] = АМ_ОФ_94;
					КонецЕсли;	
					Способ.СтатьяЗатрат 				= АМ_ОФ_94;
					Способ.СтатьяЗатратНаУлучшениеОС   = РМ_ОФ_94;
				Иначе	
					Если ЕстьСубконтоСтатьяЗатрат Тогда
						Способ["Субконто" + НомСубконто] = АМ_ОФ_94;
					КонецЕсли;	
					Способ.СтатьяЗатрат 				= АМ_ОФ_94;
					Способ.СтатьяЗатратНаУлучшениеОС   = Неопределено;
				КонецЕсли;
				
			Иначе
					
				Если СпособДляОС Тогда
					Если ЕстьСубконтоСтатьяЗатрат Тогда
						Способ["Субконто" + НомСубконто] = ОФ_Строительство;
					КонецЕсли;	
					Способ.СтатьяЗатрат 				= ОФ_Строительство;
					Способ.СтатьяЗатратНаУлучшениеОС   = ОФ_Строительство;
				Иначе	
					Если ЕстьСубконтоСтатьяЗатрат Тогда
						Способ["Субконто" + НомСубконто] = ОФ_Строительство;
					КонецЕсли;	
					Способ.СтатьяЗатрат 				= ОФ_Строительство;
					Способ.СтатьяЗатратНаУлучшениеОС   = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		Если ЭлементСправочника.Модифицированность() Тогда
			ЭлементСправочника.ОбменДанными.Загрузка = Истина;
			ЭлементСправочника.Записать();
		КонецЕсли;
	
	КонецЦикла;
	
	// теперь создадим новые способы для НМА, т.к. в декларации это разные статьи, а у нас справочник способов
	// один для ОС и для НМА
	СоответствиеСпособов = Новый Соответствие;
	Для каждого ОбщийСпособ Из ОбщиеСпособы Цикл
		
		НовыйСпособ = Справочники.СпособыОтраженияРасходовПоАмортизации.СоздатьЭлемент();
		
		ЗаполнитьЗначенияСвойств(НовыйСпособ, ОбщийСпособ,,"Владелец");
		НовыйСпособ.Наименование = НовыйСпособ.Наименование + " (для НМА)";
		
		НовыйСпособ.Код = "";
		НовыйСпособ.УстановитьНовыйКод();
		
		Для каждого СпособОС Из ОбщийСпособ.Способы Цикл
			Способ = НовыйСпособ.Способы.Добавить();
			ЗаполнитьЗначенияСвойств(Способ, СпособОС);
			
			СчетЗатрат = Способ.СчетЗатрат;
			
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, Способ["Субконто" + НомСубконто]);
			
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				
				Способ["Субконто" + НомСубконто] = АМ_НМА_231;
				Способ.СтатьяЗатрат 			 = АМ_НМА_231;
				Способ.СтатьяЗатратНаУлучшениеОС   = Неопределено;
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда	
				
				Способ["Субконто" + НомСубконто] = ОФ_Строительство;
				Способ.СтатьяЗатрат 			 = ОФ_Строительство;
				Способ.СтатьяЗатратНаУлучшениеОС   = Неопределено;
				
			ИначеЕсли  ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда	
					
				Способ["Субконто" + НомСубконто] = АМ_НМА_91;
				Способ.СтатьяЗатрат 			 = АМ_НМА_91;
				Способ.СтатьяЗатратНаУлучшениеОС   = Неопределено;
				
			ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
					
				Способ["Субконто" + НомСубконто] = АМ_НМА_92;
				Способ.СтатьяЗатрат 			 = АМ_НМА_92;
				Способ.СтатьяЗатратНаУлучшениеОС   = Неопределено;
				 
			ИначеЕсли  ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт Тогда
					
				Способ["Субконто" + НомСубконто] = АМ_НМА_93;
				Способ.СтатьяЗатрат 			 = АМ_НМА_93;
				Способ.СтатьяЗатратНаУлучшениеОС   = Неопределено;
					
			ИначеЕсли  ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы Тогда
					
				Способ["Субконто" + НомСубконто] = АМ_ОФ_94;
				Способ.СтатьяЗатрат 			 = АМ_ОФ_94;
				Способ.СтатьяЗатратНаУлучшениеОС   = Неопределено;
				
			Иначе
					
				Способ["Субконто" + НомСубконто] = ОФ_Строительство;
				Способ.СтатьяЗатрат 			 = ОФ_Строительство;
				Способ.СтатьяЗатратНаУлучшениеОС   = Неопределено;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НовыйСпособ.ОбменДанными.Загрузка = Истина;
		НовыйСпособ.Записать();
		
		СоответствиеСпособов.Вставить(ОбщийСпособ, НовыйСпособ.Ссылка);
		
	КонецЦикла;
	
	// теперь подменяем в документах
	
	ТекЗначениеКонстантыЗапретИзмененияДанныхДо01042011 = Константы.ЗапретИзмененияДанныхДо01042011.Получить();
	Константы.ЗапретИзмененияДанныхДо01042011.Установить(Ложь);
	ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	
	СпособыДляНМА = ПолучитьИспользуемыеСпособыАмортизации("СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет");	
	СпособыДляНМА.Свернуть("Ссылка");
	Для каждого СтрокаРегистраторов Из СпособыДляНМА Цикл
		
		Регистратор = СтрокаРегистраторов.Ссылка;
        Объект = Регистратор.ПолучитьОбъект();
		
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ИзменениеСпособовОтраженияРасходовПоАмортизацииНМА") Тогда	
			
			Если НЕ ОбщиеСпособы.Найти(Объект.СпособОтраженияРасходовПоАмортизации) = Неопределено Тогда
				Объект.СпособОтраженияРасходовПоАмортизации = СоответствиеСпособов.Получить(Объект.СпособОтраженияРасходовПоАмортизации);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаЗаписейРегистров")
			  ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОперацияБух") 
			  ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаОстатковНКУна01042011") Тогда
			  // у этих регистраторов только движения.
			  
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуНМА") Тогда
			
			Если НЕ ОбщиеСпособы.Найти(Объект.СпособОтраженияРасходов) = Неопределено Тогда
				Объект.СпособОтраженияРасходов = СоответствиеСпособов.Получить(Объект.СпособОтраженияРасходов);
			КонецЕсли;
			
		КонецЕсли;
		
		// подменим движения
		Движения = Объект.Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет;
		Движения.Прочитать();
		
		Для каждого Движение Из Движения Цикл
		
			Если НЕ ОбщиеСпособы.Найти(Движение.СпособОтраженияРасходов) = Неопределено Тогда
				Движение.СпособОтраженияРасходов = СоответствиеСпособов.Получить(Движение.СпособОтраженияРасходов);
			КонецЕсли;
		
		КонецЦикла;
		
		Если Объект.Модифицированность() Тогда
		
			Объект.ОбменДанными.Загрузка = Истина;
			Попытка
				Объект.Записать();
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Константы.ЗапретИзмененияДанныхДо01042011.Установить(ТекЗначениеКонстантыЗапретИзмененияДанныхДо01042011);
	ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	
	////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////
	ЗаполнитьРСПараметрыКурсовыхРазниц(НовыеСтатьи);
	
	

КонецФункции 

Функция ПолучитьИспользуемыеСпособыАмортизации(ИмяРегистра)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНач", '20110401');
	
    Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
                   |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК Способ,
                   |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.Регистратор КАК Ссылка
                   |ИЗ
                   |	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаНач, ) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
                   |
                   |ОБЪЕДИНИТЬ
                   |
                   |ВЫБРАТЬ
                   |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК Способ,
                   |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.Регистратор КАК Ссылка
                   |ИЗ
                   |	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
                   |ГДЕ
                   |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.Период >= &ДатаНач";
				   
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет", ИмяРегистра);				   
	
	Если ИмяРегистра = "СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет" Тогда
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СпособыОтраженияРасходовПоАмортизации КАК Способ", "СпособОтраженияРасходов КАК Способ");				   	
	
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьИспользуемыеСпособыАмортизации

Функция ЗаполнитьНепредопределенныеСтатьи() Экспорт
	
	СтруктураСозданныхСтатей = Новый Структура;
	
	ЗаполняемыеСправочники = Новый Структура;
	ЗаполняемыеСправочники.Вставить("СтатьиЗатрат");
	ЗаполняемыеСправочники.Вставить("СтатьиДоходов");
	ЗаполняемыеСправочники.Вставить("СтатьиНеоперационныхРасходов");
	
	Для каждого ЗаполняемыйСправочник Из ЗаполняемыеСправочники Цикл
		
		ИмяСправочника = ЗаполняемыйСправочник.Ключ;
		Попытка
			Макет = Справочники[ИмяСправочника].ПолучитьМакет("НачальноеЗаполнениеНепредопределенных");
		Исключение
			Сообщить("Невозможно заполнить справочник: " + ИмяСправочника);
			Продолжить;
		КонецПопытки;
		
		
		ЧислоРеквизитов = Макет.ШиринаТаблицы; 

		КоличествоЗаписей = Макет.ВысотаТаблицы;
		ТекСправочник = Справочники[ИмяСправочника];
		
		ДлинаНаименования = Метаданные.Справочники[ИмяСправочника].ДлинаНаименования;
		
		//Заполняем справочник
		Для СчЭлементы = 2 По КоличествоЗаписей Цикл
			
			// или имя предопределенного элемента или некий код, для того
			// чтобы можно было создать иерархию элементов
			// созданная группа сохраняется в списке 
			ВнутрКодГруппы = Макет.Область(СчЭлементы, 1).Текст;
			
			// см. выше - ссылка на родителя
			Родитель     = Макет.Область(СчЭлементы, 2).Текст;
			
			Наименование = Макет.Область(СчЭлементы, 3).Текст;
			
			// если заполнен внутренний код группы - значит мы создаем не предопределенную группу
			ЭтоГруппа 	 = ЗначениеЗаполнено(ВнутрКодГруппы);
			
			НовыйОбъект = ?(ЭтоГруппа, ТекСправочник.СоздатьГруппу(), ТекСправочник.СоздатьЭлемент());
			НовыйОбъект.Наименование = Наименование;
			
			Если ЗначениеЗаполнено(Родитель) Тогда
			
				Если СтруктураСозданныхСтатей.Свойство(ИмяСправочника + "_группа_" + Родитель) Тогда
					// группой является созданный в процессе элемент
					НовыйОбъект.Родитель = СтруктураСозданныхСтатей[ИмяСправочника + "_группа_" + Родитель]; 
				Иначе
					// предопределенная группа должна быть
					НовыйОбъект.Родитель = ТекСправочник[Родитель];
				КонецЕсли;
				
			КонецЕсли;
			
			// попытка не пересоздавать существующие элементы.
			СуществующийЭлемент = ТекСправочник.НайтиПоНаименованию(ЛЕВ(Наименование,ДлинаНаименования),Истина,НовыйОбъект.Родитель); 
			Если ЗначениеЗаполнено(СуществующийЭлемент) Тогда
				НовыйОбъект = СуществующийЭлемент.ПолучитьОбъект();
			КонецЕсли;
			
			Если ЭтоГруппа Тогда
				
				Если НЕ ЗначениеЗаполнено(НовыйОбъект.Код) Тогда
					НовыйОбъект.УстановитьНовыйКод();
				КонецЕсли;
				
				НовыйОбъект.ОбменДанными.Загрузка = Истина;
				НовыйОбъект.Записать();
				// сохраняем ссылку для создания иерархии
				СтруктураСозданныхСтатей.Вставить(ИмяСправочника + "_группа_" + ВнутрКодГруппы, НовыйОбъект.Ссылка);
				
			Иначе
				
				Для СчРеквизиты = 3 По ЧислоРеквизитов Цикл
					
					ИмяРеквизита      = Макет.Область(1, 		  СчРеквизиты).Текст;
					ЗначениеРеквизита = Макет.Область(СчЭлементы, СчРеквизиты).Текст;
					
					Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ИмяРеквизита = "СтатьяДекларацииПоНалогуНаПрибыль" Тогда
					
						НовыйОбъект[ИмяРеквизита] = Справочники.СтатьиНалоговыхДеклараций[ЗначениеРеквизита];
						Если НЕ ЗначениеЗаполнено(НовыйОбъект.Код) Тогда
							НовыйОбъект.УстановитьНовыйКод();
						КонецЕсли;
						// нам нужна ссылка, запишем
						НовыйОбъект.ОбменДанными.Загрузка = Истина;
						НовыйОбъект.Записать();
						СтруктураСозданныхСтатей.Вставить(ИмяСправочника + "_" + ЗначениеРеквизита, НовыйОбъект.Ссылка);
						
					ИначеЕсли ИмяРеквизита = "Счет8Класса" Тогда

						НовыйОбъект[ИмяРеквизита] = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ЗначениеРеквизита);
						
					ИначеЕсли ИмяРеквизита = "ВидЗатрат" Тогда

						НовыйОбъект[ИмяРеквизита] = Перечисления.ВидыЗатрат[ЗначениеРеквизита];
						
					ИначеЕсли ИмяРеквизита = "ХарактерЗатрат" Тогда

						НовыйОбъект[ИмяРеквизита] = Перечисления.ХарактерЗатрат[ЗначениеРеквизита];
						
					КонецЕсли;
				
				КонецЦикла;	
				
				Если НовыйОбъект.Модифицированность() Тогда
					НовыйОбъект.ОбменДанными.Загрузка = Истина;
					НовыйОбъект.Записать();
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Возврат СтруктураСозданныхСтатей;
	
КонецФункции

Процедура ЗаполнитьРСПараметрыКурсовыхРазниц(НовыеСтатьи)
	
	НаборЗаписей = РегистрыСведений.ПараметрыУчетаКурсовыхРазниц.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		СчетДоходов = Запись.СчетДоходов;
		Для НомСубконто = 1 По 3 Цикл
			
			Если СчетДоходов.ВидыСубконто.Количество()<НомСубконто Тогда
				Прервать;
			КонецЕсли;
			
			ВидСубконто = СчетДоходов.ВидыСубконто[НомСубконто-1].ВидСубконто;
			Если     ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов Тогда
				Запись["Субконто" + НомСубконто + "Доходов"] = НовыеСтатьи.СтатьиДоходов_НПНК_ИД_КурсРазницы;
				Прервать;
			КонецЕсли;

		КонецЦикла;
		
		СчетЗатрат = Запись.СчетЗатрат;
		Для НомСубконто = 1 По 3 Цикл
			
			Если СчетЗатрат.ВидыСубконто.Количество()<НомСубконто Тогда
				Прервать;
			КонецЕсли;
			
			ВидСубконто = СчетЗатрат.ВидыСубконто[НомСубконто-1].ВидСубконто;
			Если      ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
				Запись["Субконто" + НомСубконто + "Затрат"] = НовыеСтатьи.СтатьиЗатрат_НПНК_ИВ_КурсРазницы;
				Прервать;
			ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов Тогда
				Запись["Субконто" + НомСубконто + "Затрат"] = НовыеСтатьи.СтатьиНеоперационныхРасходов_НПНК_ИВ_КурсРазницы;
				Прервать;
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Для всех "старых непредопределенных" налоговых назначений с незаполненной ГруппаНалоговогоНазначения 
// заполняем группой НалоговыеНазначенияДоНКУ 
//
// Параметры: нет 
Процедура ЗаполнитьГруппуНалоговыхНазначенийДоНКУ()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговыеНазначенияАктивовИЗатрат.Ссылка
	|ИЗ
	|	Справочник.НалоговыеНазначенияАктивовИЗатрат КАК НалоговыеНазначенияАктивовИЗатрат
	|ГДЕ
	|	НалоговыеНазначенияАктивовИЗатрат.ГруппаНалоговогоНазначения = ЗНАЧЕНИЕ(Перечисление.ГруппыНалоговыхНазначений.ПустаяСсылка)
	|";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ГруппаНалоговогоНазначения = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияДоНКУ;
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
        СправочникОбъект.Записать();
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьГруппуНалоговыхНазначенийДоНКУ()
 
Процедура УстановитьКоэффициентыДляЗаполненияПриложенияСВДекларацииПоПрибыли()
	
	ЗапросПоОрганизациямПлательщикамНП = Новый Запрос();
	ЗапросПоОрганизациямПлательщикамНП.УстановитьПараметр("Дата", '20110331');
	
	// все организации-плательщики, для которых на 01.04 не установлены коэффициенты
	ЗапросПоОрганизациямПлательщикамНП.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                                           |	Организации.Ссылка  КАК Организация
	                                           |ИЗ
	                                           |	Справочник.Организации КАК Организации
	                                           |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Дата, ) КАК УчетнаяПолитикаОрганизацийСрезПоследних
	                                           |		ПО (УчетнаяПолитикаОрганизацийСрезПоследних.Организация = Организации.Ссылка)
	                                           |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыДляЗаполнениПриложенияСВДекларацииПоПрибыли.СрезПоследних(&Дата, ) КАК КоэффициентыДляЗаполнениПриложенияСВДекларацииПоПрибылиСрезПоследних
	                                           |		ПО (КоэффициентыДляЗаполнениПриложенияСВДекларацииПоПрибылиСрезПоследних.Организация = Организации.Ссылка)
	                                           |ГДЕ
	                                           |	УчетнаяПолитикаОрганизацийСрезПоследних.СхемаНалогообложения.НалогНаПрибыль
	                                           |	И КоэффициентыДляЗаполнениПриложенияСВДекларацииПоПрибылиСрезПоследних.Статья ЕСТЬ NULL ";
	
	Выборка = ЗапросПоОрганизациямПлательщикамНП.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Док = Документы.РасчетКоэффициентовДляЗаполненияПриложенияСВДекларацииПоПрибыли.СоздатьДокумент();	
		
		Док.Дата = '201103311200';
		
		Док.Организация = Выборка.Организация;
		Док.Ответственный = глЗначениеПеременной("глТекущийПользователь");
		Док.Комментарий = НСТР("ru='#Обновление на версию 1.3.9.Установка коэффициентов на 01.04.2011#';uk='#Оновлення на версію 1.3.9. Встановлення коеффіцієнтів на 01.04.2011#'");
		
		Строка = Док.Статьи.Добавить();
		
		Строка.Статья = Справочники.СтатьиНалоговыхДеклараций.НПНК_ПЗ_Материалы_;
		Строка.КоэффициентНаКонец = 1;
		
		Док.УстановитьНовыйНомер();
		
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗУП

Процедура ОбновитьВидыДоходовНДФЛ()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыДоходовНДФЛ.Ссылка
	               |ИЗ
	               |	Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	               |ГДЕ
	               |	НЕ ВидыДоходовНДФЛ.Предопределенный
	               |	И НЕ ВидыДоходовНДФЛ.ПометкаУдаления";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.КодДо2011 = СпрОбъект.Код;
        СпрОбъект.Записать();
	КонецЦикла;	
				   
				   
КонецПроцедуры

Процедура ОбновитьОтражениеВзносовФОТВРеглУчете()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаСреза", Дата(2011,4,1));
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОтражениеВзносовФОТВРеглУчетеСрезПоследних.Налог,
				   |	ОтражениеВзносовФОТВРеглУчетеСрезПоследних.УДАЛИТЬХарактерЗатрат КАК ХарактерЗатрат,
	               |	ОтражениеВзносовФОТВРеглУчетеСрезПоследних.СтатьяЗатрат
	               |ИЗ
	               |	РегистрСведений.ОтражениеВзносовФОТВРеглУчете.СрезПоследних(&ДатаСреза, Налог.Актуальность и СчетЗатрат = ЗНАЧЕНИЕ(Плансчетов.Хозрасчетный.ПустаяСсылка)) КАК ОтражениеВзносовФОТВРеглУчетеСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.ОтражениеВзносовФОТВРеглУчете.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Период.Установить(Дата(2011,4,1)); 
    НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = Дата(2011,4,1);
		НоваяЗапись.Налог = Выборка.Налог;
		Если Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.БракВПроизводстве; //24
		ИначеЕсли Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.ИзготовлениеОсновныхСредств; //1522
		ИначеЕсли Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.РасходыНаСбыт; //93
		ИначеЕсли Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.ОбщепроизводственныеРасходы; //91
		ИначеЕсли Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.АдминистративныеРасходы; //92
		ИначеЕсли Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.ОсновноеПроизводство; //231
		ИначеЕсли Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности; //949
		ИначеЕсли Выборка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы Тогда
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы; //200	
		Иначе
			//На всякий случай
			НоваяЗапись.СчетЗатрат = Планысчетов.Хозрасчетный.ОбщепроизводственныеРасходы; //91
		КонецЕсли;	
			
		НоваяЗапись.СтатьяЗатрат = Выборка.СтатьяЗатрат;
		
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры	

Процедура ПерезаполнитьПроводкиПоЗарплатнымДокументамНалоговымиНазначениямиНКУ()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНач", '20110401');
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтражениеЗарплатыВРеглУчете.Ссылка,
	               |	ОтражениеЗарплатыВРеглУчете.Проведен
	               |ИЗ
	               |	Документ.ОтражениеЗарплатыВРеглУчете КАК ОтражениеЗарплатыВРеглУчете
				   |ГДЕ Дата >= &ДатаНач";
				   
	Выборка = Запрос.Выполнить().Выбрать();				   
	Пока Выборка.Следующий() Цикл
		
		Док = Выборка.Ссылка.ПолучитьОбъект();
		
	    Сотрудники = Док.РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
		
		Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		
		Если Док.Начисления.Количество() = 0 И 
			 Док.Удержания.Количество() = 0 И 
			 Док.Взносы.Количество() = 0 И 
			 Док.ВзносыФОТ.Количество() = 0 И 
			 Док.ПогашениеЗаймов.Количество() = 0 И 
			 Док.НДФЛ.Количество() = 0 
			Тогда
			Сообщить(Локализация.СтрШаблон(НСТР("ru='Не удалось автоматически обработать документ: ¤1¤"
"    Перезаполните бухгалтерские проводки вручную!';uk='Не вдалося автоматично обробити документ: ¤1¤"
"    Перезаповніть бухгалтерські проведення вручну!'"), Док));	
			Продолжить;
		КонецЕсли;
		
	    Док.Начисления.Очистить();
	    Док.ВзносыФОТ.Очистить();
		Док.Записать(РежимЗаписиДокумента.Запись);
	    Док.РассчитатьНачисления(Сотрудники);
	    Док.РассчитатьВзносыФОТ(Сотрудники);
	    Док.АвтозаполнениеПроводок();
		
		Попытка
			Если Выборка.Проведен = Истина Тогда
			    Док.Записать(РежимЗаписиДокумента.Проведение);
			Иначе	
				Док.ОбменДанными.Загрузка = Истина;
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение
			Сообщить(Локализация.СтрШаблон(НСТР("ru='Не удалось обработать документ: ¤1¤"
"    Перезаполните бухгалтерские проводки вручную!';uk='Не вдалося обробити документ: ¤1¤"
"    Перезаповніть бухгалтерські проведення вручну!'"), Док));	
		КонецПопытки	
	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПроверитьКонстантуЗапретИзмененияДанныхДо01042011()
	
	Если Константы.ЗапретИзмененияДанныхДо01042011.Получить() Тогда
		Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
		Набор.Прочитать();
		Если Набор.Количество() = 0 Тогда
			Набор.Отбор.Организация.Установить(Справочники.Организации.ПустаяСсылка());
			Запись = Набор.Добавить();
			Запись.Организация = Справочники.Организации.ПустаяСсылка();
   			Запись.Пользователь = Неопределено;
			Запись.ГраницаЗапретаИзменений = Дата('00010101');
			Набор.Записать();
			
		    Запрос = Новый Запрос;
		    Запрос.Текст  = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			    |	Организации.Ссылка КАК Организация
			    |ИЗ
			    |	Справочник.Организации КАК Организации";
		    
		    Выборка = Запрос.Выполнить().Выбрать();
		    Пока Выборка.Следующий() Цикл		
		        
		        Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
		        Набор.Отбор.Организация.Установить(Выборка.Организация);
		        
		        Запись = Набор.Добавить();
		        Запись.Организация = Выборка.Организация;
		        Запись.Пользователь = Неопределено;
		        
		        Запись.ГраницаЗапретаИзменений = Дата('00010101');
			    Набор.Записать();
				
		    КонецЦикла;
		КонецЕсли; 
		ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	КонецЕсли;
	

КонецПроцедуры
 

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ, ВЫПОЛНЯЮЩИЕСЯ ПРИ ОБНОВЛЕНИИ НА РЕДАКЦИЮ 1.3 С ВЕРСИИ 1.2.29

// ОБЩАЯ ФУНКЦИОНАЛЬНОСТЬ

// Процедура заполняет порядок в подразделениях организаций
Процедура ЗаполнитьПорядокВПодразделенияхОрганизаций()
	
	ОбщегоНазначения.СообщитьОСостоянииОбновления("НСИ", "Заполнение реквизита ""Порядок"" в регламентированных подразделениях");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПодразделенияОрганизаций.Порядок) КАК Порядок
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Порядок <> NULL И Выборка.Порядок > 0 Тогда
		Возврат; // порядок уже был заполнен
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Владелец КАК Владелец,
	|	ПодразделенияОрганизаций.Родитель КАК Родитель,
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	Владелец,
	|	Родитель,
	|	Наименование
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.СледующийПоЗначениюПоля("Владелец") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Родитель") Цикл
			Порядок = 0;
			
			Пока Выборка.Следующий() Цикл
				Порядок = Порядок + 1;
				
				Подразделение = Выборка.Ссылка.ПолучитьОбъект();
				Подразделение.ОбменДанными.Загрузка = Истина;
				Подразделение.Порядок = Порядок;
				Подразделение.Записать();
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	ОбщегоНазначения.СообщитьОСостоянииОбновления("НСИ", "Заполнение реквизита ""Порядок"" в регламентированных подразделениях завершено",,,Истина);
	
КонецПроцедуры

// Процедура заполняет порядок в подразделениях
Процедура ЗаполнитьПорядокВПодразделениях()
	
	ОбщегоНазначения.СообщитьОСостоянииОбновления("НСИ", "Заполнение реквизита ""Порядок"" в управленческих подразделениях");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(Подразделения.Порядок) КАК Порядок
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Порядок <> NULL И Выборка.Порядок > 0 Тогда
		Возврат; // порядок уже был заполнен
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Подразделения.Родитель КАК Родитель,
	|	Подразделения.Ссылка,
	|	Подразделения.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Родитель,
	|	Наименование
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.СледующийПоЗначениюПоля("Родитель") Цикл
		Порядок = 0;
		
		Пока Выборка.Следующий() Цикл
			Порядок = Порядок + 1;
			
			Подразделение = Выборка.Ссылка.ПолучитьОбъект();
			Подразделение.ОбменДанными.Загрузка = Истина;
			Подразделение.Порядок = Порядок;
			Подразделение.Записать();
		КонецЦикла;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	ОбщегоНазначения.СообщитьОСостоянииОбновления("НСИ", "Заполнение реквизита ""Порядок"" в управленческих подразделениях завершено",,,Истина);
	
КонецПроцедуры

// ПОЛЬЗОВАТЕЛИ

Процедура ОбновитьПользователей()

	ОбщегоНазначения.СообщитьОСостоянииОбновления("Пользователи", "Обновление пользователей");
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Пользователи.Код,
	               |	Пользователи.Ссылка,
	               |	Пользователи.ИдентификаторПользователяИБ
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	(НЕ Пользователи.ЭтоГруппа)";
	 
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда
			Продолжить;
		КонецЕсли;
	
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(Выборка.Код));
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПользовательОбъект.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
		ПользовательОбъект.Записать();

	КонецЦикла;
	
	ОбщегоНазначения.СообщитьОСостоянииОбновления("Пользователи", "Обновление пользователей завершено",,, Истина);
	
КонецПроцедуры //

// УПРАВЛЕНИЕ ПРОИЗВОДСТВОМ

// Обновление данных в регистре сведений "Способы распределения статей затрат организаций".
Процедура ОбновитьСпособыРаспределенияСтатейЗатратОрганизаций()
	
	ОбщегоНазначения.СообщитьОСостоянииОбновления("Управление производством", "Обновление данных в регистре сведений ""Способы распределения статей затрат организаций""");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СпособыРаспределения.Период КАК Период,
	|	СпособыРаспределения.Организация КАК Организация,
	|	СпособыРаспределения.СтатьяЗатрат КАК СтатьяЗатрат,
	|	СпособыРаспределения.Подразделение КАК Подразделение,
	|	СпособыРаспределения.СчетЗатрат КАК СчетЗатрат,
	|
	|	СпособыРаспределения.СпособРаспределенияЗатрат КАК СпособРаспределенияЗатрат,
	|	ЗНАЧЕНИЕ(Перечисление.ХарактерРаспределенияЗатрат.ПустаяСсылка) КАК ХарактерРаспределенияЗатрат
	|
	|ИЗ
	| РегистрСведений.СпособыРаспределенияСтатейЗатратОрганизаций КАК СпособыРаспределения
	|
	|ГДЕ
	|	СпособыРаспределения.ХарактерРаспределенияЗатрат <> ЗНАЧЕНИЕ(Перечисление.ХарактерРаспределенияЗатрат.ПустаяСсылка)
	|	И СчетЗатрат В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.БракВПроизводстве))
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.СпособыРаспределенияСтатейЗатратОрганизаций.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
	ОбщегоНазначения.СообщитьОСостоянииОбновления("Управление производством", "Обновление данных в регистре сведений ""Способы распределения статей затрат организаций"" завершено",,, Истина);
	
КонецПроцедуры // ОбновитьСпособыРаспределенияСтатейЗатратОрганизаций()


