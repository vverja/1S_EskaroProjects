#Если Клиент Тогда

Перем мНастройкаПериода Экспорт;

Перем мТекущаяНастройка Экспорт;

Перем мСоответствиеКолонокПериодам;
Перем мСоответствиеПериодовКолонкам;
Перем мСоответствиеКолонокПериодамРедактирование;
Перем мСоответствиеПериодовКолонкамРедактирование;

Перем мСтруктураФорматаПолей;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ВЫВОДА ДЕРЕВА ПЛАНОВ

Процедура ИнициализацияДереваПланов(ДеревоПланов) Экспорт
	
	ДеревоПланов.Строки.Очистить();
	
	Если ПланыПродаж Тогда
		
		КореневойЭлемент = ДеревоПланов.Строки.Добавить();
		КореневойЭлемент.План = Перечисления.ВидыПланирования.Продажи;
		КореневойЭлемент.Представление = Строка(КореневойЭлемент.План);

	КонецЕсли;
	
	Если ПланыПроизводства Тогда
		
		КореневойЭлемент = ДеревоПланов.Строки.Добавить();
		КореневойЭлемент.План = Перечисления.ВидыПланирования.Производство;
		КореневойЭлемент.Представление = Строка(КореневойЭлемент.План);
		
	КонецЕсли;
	
	Если ПланыЗакупок Тогда
		
		КореневойЭлемент = ДеревоПланов.Строки.Добавить();
		КореневойЭлемент.План = Перечисления.ВидыПланирования.Закупки;
		КореневойЭлемент.Представление = Строка(КореневойЭлемент.План);
		
	КонецЕсли;
	
	ЗаполнитьПланы(ДеревоПланов.Строки);
	
КонецПроцедуры // ЗаполнитьКорневыеЭлементы()

Процедура ЗаполнитьПланы(Строки) Экспорт
	
	СтруктураПараметров = Новый Структура(
	"ПланыПродаж,
	|ПланыПроизводства,
	|ПланыЗакупок",
	Новый Структура("КорневойЭлемент, Планы", Неопределено, Новый Массив),
	Новый Структура("КорневойЭлемент, Планы", Неопределено, Новый Массив),
	Новый Структура("КорневойЭлемент, Планы", Неопределено, Новый Массив));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Планы.ДокументПланирования КАК ДокументПланирования,
	|	Планы.Подразделение КАК Подразделение,
	|	Планы.План КАК План,
	|	Планы.ДатаПланирования КАК ДатаПланирования,
	|	Планы.Периодичность КАК Периодичность
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВЫБОР
	|			КОГДА &КорневойЭлемент = НЕОПРЕДЕЛЕНО
	|				ТОГДА ПланыПродаж.ДокументПланирования
	|			ИНАЧЕ &КорневойЭлемент
	|		КОНЕЦ КАК ДокументПланирования,
	|		ПланыПродаж.Регистратор КАК План,
	|		ПланыПродаж.Регистратор.ДатаПланирования КАК ДатаПланирования,
	|		ПланыПродаж.Регистратор.Сценарий.Периодичность КАК Периодичность,
	|		ПланыПродаж.Подразделение КАК Подразделение
	|	ИЗ
	|		РегистрНакопления.ПланыПродаж.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Регистратор,
	|				ВЫБОР
	|						КОГДА &КорневойЭлемент = НЕОПРЕДЕЛЕНО
	|							ТОГДА ДокументПланирования В (&Планы)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА &КорневойЭлемент = ЗНАЧЕНИЕ(Перечисление.ВидыПланирования.Продажи)
	|									ТОГДА ИСТИНА
	|								ИНАЧЕ ЛОЖЬ
	|							КОНЕЦ
	|					КОНЕЦ
	|					И ВЫБОР
	|						КОГДА &Сценарий = НЕОПРЕДЕЛЕНО
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ Сценарий = &Сценарий
	|					КОНЕЦ) КАК ПланыПродаж
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА &КорневойЭлемент = НЕОПРЕДЕЛЕНО
	|					ТОГДА ПланыПродаж.Регистратор <> ПланыПродаж.ДокументПланирования
	|				ИНАЧЕ ПланыПродаж.Регистратор = ПланыПродаж.ДокументПланирования
	|						ИЛИ (НЕ ПланыПродаж.ДокументПланирования ССЫЛКА Документ.ПланПродаж)
	|			КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВЫБОР
	|			КОГДА &КорневойЭлемент = НЕОПРЕДЕЛЕНО
	|				ТОГДА ПланыПроизводства.ДокументПланирования
	|			ИНАЧЕ &КорневойЭлемент
	|		КОНЕЦ,
	|		ПланыПроизводства.Регистратор,
	|		ПланыПроизводства.Регистратор.ДатаПланирования,
	|		ПланыПроизводства.Регистратор.Сценарий.Периодичность,
	|		ПланыПроизводства.Подразделение
	|	ИЗ
	|		РегистрНакопления.ПланыПроизводства.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Регистратор,
	|				ВЫБОР
	|						КОГДА &КорневойЭлемент = НЕОПРЕДЕЛЕНО
	|							ТОГДА ДокументПланирования В (&Планы)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА &КорневойЭлемент = ЗНАЧЕНИЕ(Перечисление.ВидыПланирования.Производство)
	|									ТОГДА ИСТИНА
	|								ИНАЧЕ ЛОЖЬ
	|							КОНЕЦ
	|					КОНЕЦ
	|					И ВЫБОР
	|						КОГДА &Сценарий = НЕОПРЕДЕЛЕНО
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ Сценарий = &Сценарий
	|					КОНЕЦ) КАК ПланыПроизводства
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА &КорневойЭлемент = НЕОПРЕДЕЛЕНО
	|					ТОГДА ПланыПроизводства.Регистратор <> ПланыПроизводства.ДокументПланирования
	|				ИНАЧЕ ПланыПроизводства.Регистратор = ПланыПроизводства.ДокументПланирования
	|						ИЛИ (НЕ ПланыПроизводства.ДокументПланирования ССЫЛКА Документ.ПланПроизводства)
	|			КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВЫБОР
	|			КОГДА &КорневойЭлемент = НЕОПРЕДЕЛЕНО
	|				ТОГДА ПланыЗакупок.ДокументПланирования
	|			ИНАЧЕ &КорневойЭлемент
	|		КОНЕЦ,
	|		ПланыЗакупок.Регистратор,
	|		ПланыЗакупок.Регистратор.ДатаПланирования,
	|		ПланыЗакупок.Регистратор.Сценарий.Периодичность,
	|		ПланыЗакупок.Подразделение
	|	ИЗ
	|		РегистрНакопления.ПланыЗакупок.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Регистратор,
	|				ВЫБОР
	|						КОГДА &КорневойЭлемент = НЕОПРЕДЕЛЕНО
	|							ТОГДА ДокументПланирования В (&Планы)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА &КорневойЭлемент = ЗНАЧЕНИЕ(Перечисление.ВидыПланирования.Закупки)
	|									ТОГДА ИСТИНА
	|								ИНАЧЕ ЛОЖЬ
	|							КОНЕЦ
	|					КОНЕЦ
	|					И ВЫБОР
	|						КОГДА &Сценарий = НЕОПРЕДЕЛЕНО
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ Сценарий = &Сценарий
	|					КОНЕЦ) КАК ПланыЗакупок
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА &КорневойЭлемент = НЕОПРЕДЕЛЕНО
	|					ТОГДА ПланыЗакупок.Регистратор <> ПланыЗакупок.ДокументПланирования
	|				ИНАЧЕ ПланыЗакупок.Регистратор = ПланыЗакупок.ДокументПланирования
	|						ИЛИ (НЕ ПланыЗакупок.ДокументПланирования ССЫЛКА Документ.ПланЗакупок)
	|			КОНЕЦ) КАК Планы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПланирования");
	
	Для каждого Строка из Строки Цикл
			
		Если Строка.Строки.Количество() > 0 ИЛИ Строка.План = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Строка.План = Перечисления.ВидыПланирования.Продажи Тогда
				
			СтруктураПараметров.ПланыПродаж.КорневойЭлемент = Перечисления.ВидыПланирования.Продажи;
				
		ИначеЕсли Строка.План = Перечисления.ВидыПланирования.Производство Тогда
				
			СтруктураПараметров.ПланыПроизводства.КорневойЭлемент = Перечисления.ВидыПланирования.Производство;
				
		ИначеЕсли Строка.План = Перечисления.ВидыПланирования.Закупки Тогда
				
			СтруктураПараметров.ПланыЗакупок.КорневойЭлемент = Перечисления.ВидыПланирования.Закупки;
				
		ИначеЕсли ТипЗнч(Строка.План) = Тип("ДокументСсылка.ПланПродаж") Тогда
				
			СтруктураПараметров.ПланыПродаж.Планы.Добавить(Строка.План);
				
		ИначеЕсли ТипЗнч(Строка.План) = Тип("ДокументСсылка.ПланПроизводства") Тогда
				
			СтруктураПараметров.ПланыПроизводства.Планы.Добавить(Строка.План);
				
		ИначеЕсли ТипЗнч(Строка.План) = Тип("ДокументСсылка.ПланЗакупок") Тогда
				
			СтруктураПараметров.ПланыЗакупок.Планы.Добавить(Строка.План);
				
		КонецЕсли;
				
	КонецЦикла;
	
	Для каждого Параметр из СтруктураПараметров Цикл
		
		Если Параметр.Значение.КорневойЭлемент = Неопределено И Параметр.Значение.Планы.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНач", ?(ДатаНач = Дата('00010101000000'), ДатаНач, Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая)));
		Запрос.УстановитьПараметр("ДатаКон", ?(ДатаКон = Дата('00010101000000'), ДатаКон, Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая)));
		
		Для каждого ВидПараметра из Параметр.Значение Цикл
			
			Если ВидПараметра.Ключ = "КорневойЭлемент" И ВидПараметра.Значение <> Неопределено Тогда
				
				Запрос.УстановитьПараметр("Планы", Новый Массив);
				Запрос.УстановитьПараметр("КорневойЭлемент", ВидПараметра.Значение);
				
			ИначеЕсли ВидПараметра.Ключ = "Планы" И ВидПараметра.Значение.Количество() > 0 Тогда
				
				Запрос.УстановитьПараметр("Планы", ВидПараметра.Значение);
				Запрос.УстановитьПараметр("КорневойЭлемент", Неопределено);
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Сценарий", ?(Сценарий = Неопределено ИЛИ Сценарий.Пустая(), Неопределено, Сценарий));
			
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				
				Выборка = Результат.Выбрать();
				
				Для каждого Строка из Строки Цикл
						
					Пока Выборка.НайтиСледующий(Новый Структура("ДокументПланирования", Строка.План)) Цикл
								
						Если ЕстьЗацикливание(Строка, Выборка.План) Тогда
							
							НовыйПлан = Строка.Строки.Добавить();
							НовыйПлан.План = Неопределено;
							НовыйПлан.Представление = НСтр("ru='Зацикливание'");
							
						Иначе	
							
							НовыйПлан = Строка.Строки.Добавить();
							НовыйПлан.План = Выборка.План;
							НовыйПлан.Подразделение = Выборка.Подразделение;
							НовыйПлан.Представление = Формат(Выборка.ДатаПланирования, СтрЗаменить(мСтруктураФорматаПолей[Строка(Выборка.Периодичность)], Символы.ПС, " "));
							
						КонецЕсли;
								
					КонецЦикла;
						
				КонецЦикла;
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПланы()

Функция ЕстьЗацикливание(Строка, План)
	
	Результат = Ложь;
	ТекущаяСтрока = Строка;
	
	Пока ТекущаяСтрока <> Неопределено Цикл
		
		Если ТекущаяСтрока.План = План Тогда
			
			Результат = Истина;
			Прервать;
			
		КонецЕсли;
			
		ТекущаяСтрока = ТекущаяСтрока.Родитель;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ЕстьЗацикливание()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫВОДА РЕДАКТИРОВАНИЯ СОСТАВА ПЛАНА

Процедура ВывестиСоставПлана(СтрокаДерева, СоставПлана, ЭлементФормыСоставПлана, ПолныйСоставПлана, РассчитыватьИсточникиОбеспечения, Редактирование = Ложь) Экспорт
	
	Если ТипЗнч(СоставПлана) = Тип("ТаблицаЗначений") Тогда
		
		Строки = СоставПлана;
		
	ИначеЕсли ТипЗнч(СоставПлана) = Тип("ДеревоЗначений") Тогда
		
		Строки = СоставПлана.Строки;
		
	КонецЕсли;
	
	Строки.Очистить();
	
	Если Редактирование Тогда
		
		СоответствиеКолонокПериодам = мСоответствиеКолонокПериодамРедактирование;
		СоответствиеПериодовКолонкам = мСоответствиеПериодовКолонкамРедактирование;
		
	Иначе
		
		СоответствиеКолонокПериодам = мСоответствиеКолонокПериодам;
		СоответствиеПериодовКолонкам = мСоответствиеПериодовКолонкам;
		
	КонецЕсли;
	
	Для каждого ЭлементСоответствия из СоответствиеКолонокПериодам Цикл
		
		Колонка = СоставПлана.Колонки.Найти(ЭлементСоответствия.Ключ);
		
		Если Колонка <> Неопределено Тогда
			
			СоставПлана.Колонки.Удалить(Колонка);
			
			Колонка = ЭлементФормыСоставПлана.Колонки.Найти(ЭлементСоответствия.Ключ);
			
			Если Колонка <> Неопределено Тогда
				
				ЭлементФормыСоставПлана.Колонки.Удалить(Колонка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеКолонокПериодам.Очистить();
	СоответствиеПериодовКолонкам.Очистить();
	
	Если СтрокаДерева = Неопределено ИЛИ СтрокаДерева.Уровень() = 0 ИЛИ СтрокаДерева.План = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Если Редактирование ИЛИ Периодичность = Неопределено ИЛИ Периодичность.Пустая() Тогда
		
		Если СтрокаДерева.План.ПериодичностьДетализации = Неопределено ИЛИ СтрокаДерева.План.ПериодичностьДетализации.Пустая() Тогда
				
			ПериодичностьПлана = СтрокаДерева.План.Сценарий.Периодичность;
				
		Иначе
				
			ПериодичностьПлана = СтрокаДерева.План.ПериодичностьДетализации;
				
		КонецЕсли;
		
	Иначе
		
		ПериодичностьПлана = Периодичность;
		
	КонецЕсли;
		
	ВидПериода = Строка(ПериодичностьПлана);
	ВидДокумента = СтрокаДерева.План.Метаданные().Имя;
	
	Если ТипЗнч(СтрокаДерева.План) = Тип("ДокументСсылка.ПланПроизводства") Тогда
		
		ТекстПоляЗапросаВыбратьСпецификация = "
		|	СоставПлана.Спецификация КАК Спецификация,";
		ТекстПоляЗапросаСгруппироватьСпецификация = "
		|	СоставПлана.Спецификация,";
		ТекстПоляЗапросаИтогиСпецификация = "
		|	Спецификация,";
		
	Иначе
		
		ТекстПоляЗапросаВыбратьСпецификация = "
		|	НЕОПРЕДЕЛЕНО КАК Спецификация,";
		ТекстПоляЗапросаСгруппироватьСпецификация = "";
		ТекстПоляЗапросаИтогиСпецификация = "
		|	Спецификация,";
		
	КонецЕсли;
		
	ДатаНачПлана = СтрокаДерева.План.ДатаПланирования;
	ДатаКонПлана = СтрокаДерева.План.ДатаПланирования;
	УправлениеПланированием.ВыровнятьПериод(ДатаНачПлана, ДатаКонПлана, СтрокаДерева.План.Сценарий.Периодичность);
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(&ДатаНач, " + ВидПериода + ") КАК Период
	|ИТОГИ ПО
	|	Период ПЕРИОДАМИ(" + ВидПериода + ", &ДатаНач, &ДатаКон)");
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачПлана);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКонПлана);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыборкаПериод = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "ВСЕ");
	
	Индекс = 1;
	
	Пока ВыборкаПериод.Следующий() Цикл
		
		ИмяКолонки = "Период" + Формат(Индекс, "ЧГ=0");
		ЗаголовокКолонки = Формат(ВыборкаПериод.Период, мСтруктураФорматаПолей[ВидПериода]);
		
		СоответствиеКолонокПериодам.Вставить(ИмяКолонки, ВыборкаПериод.Период);
		СоответствиеПериодовКолонкам.Вставить(ВыборкаПериод.Период, ИмяКолонки);
		
		СоставПлана.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)), ЗаголовокКолонки, 80);
		НоваяКолонка = ЭлементФормыСоставПлана.Колонки.Добавить(ИмяКолонки, ЗаголовокКолонки);
		НоваяКолонка.Данные = ИмяКолонки;
		НоваяКолонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложение.Центр;
		НоваяКолонка.ТолькоПросмотр = НЕ Редактирование;
		НоваяКолонка.ИзменятьВидимость = Ложь;
		НоваяКолонка.ИзменятьНастройку = Ложь;
		НоваяКолонка.ИзменятьПозицию = Ложь;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоставПлана.Номенклатура КАК Номенклатура,
	|	СоставПлана.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СоставПлана.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СоставПлана.Заказ КАК Заказ,
	|	СоставПлана.Контрагент КАК Контрагент,
	|	СоставПлана.Договор КАК Договор,
	|	СоставПлана.Источник КАК Источник," +
	ТекстПоляЗапросаВыбратьСпецификация + "
	|	ВЫБОР
	|		КОГДА СоставПлана.ВариантРаспределения = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияПоПериоду.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияПоПериоду.ТочноКСроку)
	|		ИНАЧЕ СоставПлана.ВариантРаспределения
	|	КОНЕЦ КАК ВариантРаспределения,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА СоставПлана.Период = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА СоставПлана.Ссылка.ДатаПланирования
	|			ИНАЧЕ СоставПлана.Период
	|		КОНЕЦ, " + ВидПериода + ") КАК Период,
	|	СУММА(СоставПлана.Количество) КАК Количество
	|ИЗ
	|	Документ." + ВидДокумента + ".СоставПлана КАК СоставПлана
	|ГДЕ
	|	СоставПлана.Ссылка = &План
	|	И (&Источник = НЕОПРЕДЕЛЕНО
	|				И СоставПлана.Источник В (&ПустойИсточник)
	|			ИЛИ &ПолныйСоставПлана = ИСТИНА
	|			ИЛИ СоставПлана.Источник = &Источник)
	|	И НАЧАЛОПЕРИОДА(ВЫБОР
	|				КОГДА СоставПлана.Период = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА СоставПлана.Ссылка.ДатаПланирования
	|				ИНАЧЕ СоставПлана.Период
	|			КОНЕЦ, " + ВидПериода + ") МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНач, " + ВидПериода + ") И КОНЕЦПЕРИОДА(&ДатаКон, " + ВидПериода + ")
	|СГРУППИРОВАТЬ ПО
	|	СоставПлана.Номенклатура,
	|	СоставПлана.ХарактеристикаНоменклатуры,
	|	СоставПлана.ЕдиницаИзмерения,
	|	СоставПлана.Заказ,
	|	СоставПлана.Контрагент,
	|	СоставПлана.Договор,
	|	СоставПлана.Источник," +
	ТекстПоляЗапросаСгруппироватьСпецификация + "
	|	СоставПлана.ВариантРаспределения,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА СоставПлана.Период = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА СоставПлана.Ссылка.ДатаПланирования
	|			ИНАЧЕ СоставПлана.Период
	|		КОНЕЦ, " + ВидПериода + ")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения,
	|	Заказ,
	|	Контрагент,
	|	Договор,
	|	Источник,
	|	ВариантРаспределения,
	|	Период
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения,
	|	Заказ,
	|	Контрагент,
	|	Договор,
	|	Источник," +
	ТекстПоляЗапросаИтогиСпецификация + "
	|	ВариантРаспределения");

	ПустойИсточник = Новый Массив;
	ПустойИсточник.Добавить(Неопределено);
	ПустойИсточник.Добавить(Документы.ПланПродаж.ПустаяСсылка());
	ПустойИсточник.Добавить(Документы.ПланПроизводства.ПустаяСсылка());
	ПустойИсточник.Добавить(Документы.ПланЗакупок.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачПлана);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКонПлана);
	Запрос.УстановитьПараметр("ПолныйСоставПлана", ПолныйСоставПлана);
	Запрос.УстановитьПараметр("ПустойИсточник", ПустойИсточник);
	Запрос.УстановитьПараметр("План", СтрокаДерева.План);
		
	Если СтрокаДерева.Уровень() > 1 Тогда
		
		Запрос.УстановитьПараметр("Источник", СтрокаДерева.Родитель.План);
		
	Иначе
		
		Запрос.УстановитьПараметр("Источник", Неопределено);
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристикаНоменклатуры = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаХарактеристикаНоменклатуры.Следующий() Цикл
			
			ВыборкаЕдиницаИзмерения = ВыборкаХарактеристикаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаЕдиницаИзмерения.Следующий() Цикл
				
				ВыборкаЗаказ = ВыборкаЕдиницаИзмерения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаЗаказ.Следующий() Цикл
					
					ВыборкаКонтрагент = ВыборкаЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
					Пока ВыборкаКонтрагент.Следующий() Цикл
						
						ВыборкаДоговор = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
						Пока ВыборкаДоговор.Следующий() Цикл
							
							ВыборкаВариантРаспределения = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
							Пока ВыборкаВариантРаспределения.Следующий() Цикл
								
								ВыборкаИсточник = ВыборкаВариантРаспределения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
								Пока ВыборкаИсточник.Следующий() Цикл
									
									ВыборкаСпецификация = ВыборкаИсточник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
										Пока ВыборкаСпецификация.Следующий() Цикл
										
										НоваяСтрока = Строки.Добавить();
										ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСпецификация);
										
										НоваяСтрока.Коэффициент = ВыборкаСпецификация.ЕдиницаИзмерения.Коэффициент;
										
										Если Редактирование Тогда
											
											НоваяСтрока.РаспределяемоеКоличество = ВыборкаСпецификация.Количество;
											
										КонецЕсли;
										
										ВыборкаПериод = ВыборкаСпецификация.Выбрать();
										
										Пока ВыборкаПериод.Следующий() Цикл
											
											НоваяСтрока[СоответствиеПериодовКолонкам[ВыборкаПериод.Период]] = ВыборкаПериод.Количество;
											
										КонецЦикла;
										
										ВывестиИсточникиОбеспечения(СтрокаДерева, НоваяСтрока, ВидПериода, РассчитыватьИсточникиОбеспечения);
										
									КонецЦикла;
									
								КонецЦикла;
								
							КонецЦикла;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиСоставПлана()

Процедура РедактироватьСоставПлана(СтрокаДерева, Владелец) Экспорт
	
	Если СтрокаДерева = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ФормаРедактированиеСоставаПлана = ПолучитьФорму("ФормаРедактированиеСоставаПлана", Владелец);
	ФормаРедактированиеСоставаПлана.мСтрокаДерева = СтрокаДерева;
	ФормаРедактированиеСоставаПлана.ОткрытьМодально();
	
КонецПроцедуры // РедактироватьСоставПлана()

Процедура ЗаполнитьПроизводственнуюПрограмму(СтрокаДерева, ПроизводственнаяПрограмма) Экспорт
	
	Если ПроизводственнаяПрограмма.Количество() > 0 Тогда
		
		Ответ = Вопрос(НСтр("ru='Табличная часть ""ПроизводственнаяПрограмма"" уже содержит строки.'")
					  + Символы.ПС + НСтр("ru='При заполнении они будут удалены!'") + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
					   
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
	
		ПроизводственнаяПрограмма.Очистить();
		
	КонецЕсли;
	
	Если СтрокаДерева.План.ПериодичностьДетализации = Неопределено ИЛИ СтрокаДерева.План.ПериодичностьДетализации.Пустая() Тогда
					
		ВидПериода = Строка(СтрокаДерева.План.Сценарий.Периодичность);
					
	Иначе
					
		ВидПериода = Строка(СтрокаДерева.План.ПериодичностьДетализации);
					
	КонецЕсли;
			
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОНЕЦПЕРИОДА(ВЫБОР
	|			КОГДА СоставПлана.Период = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА СоставПлана.Ссылка.ДатаПланирования
	|			ИНАЧЕ СоставПлана.Период
	|		КОНЕЦ, " + ВидПериода + ") КАК Период,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК РабочийЦентр,
	|	СоставПлана.Номенклатура КАК Номенклатура,
	|	СоставПлана.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СоставПлана.Заказ КАК Заказ,
	|	СоставПлана.Количество КАК Количество,
	|	СоставПлана.Источник КАК Источник,
	|	СоставПлана.Спецификация КАК Спецификация,
	|	НЕОПРЕДЕЛЕНО КАК ТочкаМаршрута,
	|	НЕОПРЕДЕЛЕНО КАК ВидВоспроизводства,
	|	СоставПлана.ВариантРаспределения КАК ВариантРаспределения,
	|	НЕОПРЕДЕЛЕНО КАК Идентификатор,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторИсточник
	|ИЗ
	|	Документ.ПланПроизводства.СоставПлана КАК СоставПлана
	|ГДЕ
	|	СоставПлана.Ссылка = &План
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоставПлана.НомерСтроки");
	
	Запрос.УстановитьПараметр("План", СтрокаДерева.План);
	
	ПроизводственнаяПрограмма = Запрос.Выполнить().Выгрузить();

КонецПроцедуры // ЗаполнитьПроизводственнуюПрограмму()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫВОДА ПРОИЗВОДСТВЕННОЙ ПРОГРАММЫ

Процедура ВывестиПроизводственнуюПрограмму(СтрокаДерева, ПроизводственнаяПрограмма) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроизводственнаяПрограмма.Период КАК Период,
	|	ПроизводственнаяПрограмма.Подразделение КАК Подразделение,
	|	ПроизводственнаяПрограмма.РабочийЦентр КАК РабочийЦентр,
	|	ПроизводственнаяПрограмма.Номенклатура КАК Номенклатура,
	|	ПроизводственнаяПрограмма.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПроизводственнаяПрограмма.Заказ КАК Заказ,
	|	ПроизводственнаяПрограмма.Ссылка КАК ДокументПланирования,
	|	ПроизводственнаяПрограмма.Источник КАК Источник,
	|	ПроизводственнаяПрограмма.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ПроизводственнаяПрограмма.Спецификация КАК Спецификация,
	|	ПроизводственнаяПрограмма.ВидВоспроизводства КАК ВидВоспроизводства,
	|	ПроизводственнаяПрограмма.ВариантРаспределения КАК ВариантРаспределения,
	|	ПроизводственнаяПрограмма.Количество КАК Количество,
	|	ПроизводственнаяПрограмма.Идентификатор КАК Идентификатор,
	|	ПроизводственнаяПрограмма.ИдентификаторИсточник КАК ИдентификаторИсточник
	|ИЗ
	|	Документ.ПланПроизводства.ПроизводственнаяПрограмма КАК ПроизводственнаяПрограмма
	|ГДЕ
	|	(&План <> НЕОПРЕДЕЛЕНО
	|				И ПроизводственнаяПрограмма.Ссылка = &План
	|			ИЛИ &План = НЕОПРЕДЕЛЕНО
	|				И (ПроизводственнаяПрограмма.Период МЕЖДУ &ДатаНач И &ДатаКон))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ДокументПланирования,
	|	ПроизводственнаяПрограмма.НомерСтроки УБЫВ");
	
	Запрос.УстановитьПараметр("План", ?(СтрокаДерева = Неопределено, Неопределено, СтрокаДерева.План));
	Запрос.УстановитьПараметр("ДатаНач", ?(ДатаНач = Дата('00010101000000'), ДатаНач, НачалоДня(ДатаНач)));
	Запрос.УстановитьПараметр("ДатаКон", ?(ДатаКон = Дата('00010101000000'), Дата("39991231"), КонецДня(ДатаКон)));
	
	Если ТипЗнч(ПроизводственнаяПрограмма) = Тип("ТаблицаЗначений") Тогда
		
		ПроизводственнаяПрограмма = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		ПроизводственнаяПрограмма.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры // ВывестиПроизводственнуюПрограмму()

Процедура ВывестиДиаграммуГанта(ДиаграммаГанта) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроизводственнаяПрограмма.Подразделение КАК Подразделение,
	|	ПроизводственнаяПрограмма.РабочийЦентр КАК РабочийЦентр,
	|	ПроизводственнаяПрограмма.Период КАК Период,
	|	ПроизводственнаяПрограмма.Номенклатура КАК Номенклатура,
	|	ПроизводственнаяПрограмма.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПроизводственнаяПрограмма.Спецификация КАК Спецификация,
	|	ПроизводственнаяПрограмма.КоличествоОборот КАК Количество
	|ИЗ
	|	РегистрНакопления.ПроизводственнаяПрограмма.Обороты(&ДатаНач, &ДатаКон, День, ) КАК ПроизводственнаяПрограмма
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	РабочийЦентр,
	|	Период
	|ИТОГИ ПО
	|	Подразделение,
	|	РабочийЦентр,
	|	Период");
	
	Запрос.УстановитьПараметр("ДатаНач", ?(ДатаНач = Дата('00010101000000'), ДатаНач, Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая)));
	Запрос.УстановитьПараметр("ДатаКон", ?(ДатаКон = Дата('00010101000000'), ДатаКон, Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая)));
	
	Результат = Запрос.Выполнить();
	
	ДиаграммаГанта.Обновление = Ложь;
	ДиаграммаГанта.Очистить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СерияРаспланировано = ДиаграммаГанта.Серии.Добавить();
	СерияРаспланировано.Цвет = Новый Цвет(64, 160, 108);
	СерияРаспланировано.ШтриховкаПерекрывающихсяИнтервалов = Истина;
	СерияРаспланировано.ДополнительныйЦвет = Новый Цвет(200, 240, 210);
	
	Если ОтображатьГрафикРаботы Тогда
		
		СерияКалендарь = ДиаграммаГанта.Серии.Добавить();
		СерияКалендарь.Цвет = Новый Цвет(200, 240, 210);
		СерияКалендарь.ШтриховкаПерекрывающихсяИнтервалов = Истина;
		СерияКалендарь.ДополнительныйЦвет = Новый Цвет(64, 160, 108);
		
	КонецЕсли;
	
	// Выборка по подразделениям
	ВыборкаПодразделение = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделение.Следующий() Цикл
		
		Если НЕ ВыборкаПодразделение.Подразделение.Пустая() Тогда
			
			ТочкаЗначениеРодителя = СтрЗаменить(Строка(ВыборкаПодразделение.Подразделение.УникальныйИдентификатор()), "-", "");
			Точка = ДиаграммаГанта.УстановитьТочку(ТочкаЗначениеРодителя);
			Точка.Текст = ВыборкаПодразделение.Подразделение.Наименование;
			ДиаграммаГанта.РазвернутьТочку(Точка, Истина);
			
		Иначе
			
			ТочкаЗначениеРодителя = "";
			
		КонецЕсли;
		
		// Выборка по рабочим центрам
		ВыборкаРабочийЦентр = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРабочийЦентр.Следующий() Цикл
		
			Если ВыборкаРабочийЦентр.РабочийЦентр = Неопределено ИЛИ ВыборкаРабочийЦентр.РабочийЦентр.Пустая() Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ТочкаЗначение = СтрЗаменить(Строка(ВыборкаРабочийЦентр.РабочийЦентр.УникальныйИдентификатор()), "-", "") + ТочкаЗначениеРодителя;		
			
			Точка = ДиаграммаГанта.УстановитьТочку(ТочкаЗначение, ТочкаЗначениеРодителя);
			Точка.Текст = ВыборкаРабочийЦентр.РабочийЦентр.Наименование;
			
			ЗначениеРаспланировано = ДиаграммаГанта.ПолучитьЗначение(Точка, СерияРаспланировано);
			
			Если ОтображатьГрафикРаботы Тогда
				
				ЗначениеКалендарь = ДиаграммаГанта.ПолучитьЗначение(Точка, СерияКалендарь);
				
			КонецЕсли;
			
			// Выборка по периодам
			ВыборкаПериод = ВыборкаРабочийЦентр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			КалендарьЗанятости = Новый Массив;
			ПревышениеДопустимойПроизводственнойМощности = Новый Массив;
			
			Пока ВыборкаПериод.Следующий() Цикл
			
				КалендарьЗанятости.Добавить(ВыборкаПериод.Период);
				Результат = ПолучитьКоэффициентИспользованияПроизводственнойМощности(ВыборкаПериод);
				
				Если Результат.Числитель > Результат.Знаменатель Тогда
					
					ПревышениеДопустимойПроизводственнойМощности.Добавить(ВыборкаПериод.Период);
					
				КонецЕсли;
				
			КонецЦикла;
			
			КалендарьДоступности = ПолучитьКалендарьДоступности(ВыборкаРабочийЦентр.РабочийЦентр, ?(ДатаНач = Дата('00010101000000'), ДатаНач, НачалоДня(ДатаНач)), ?(ДатаКон = Дата('00010101000000'), Дата("39991231"), КонецДня(ДатаКон)), Перечисления.ВариантыРаспределенияПоПериоду.КакМожноБыстрее);
			
			Для каждого ДатаЗанятости из КалендарьЗанятости Цикл
				
				Интервал = ЗначениеРаспланировано.Добавить();
				Интервал.Начало = НачалоДня(ДатаЗанятости);
				Интервал.Конец = КонецДня(ДатаЗанятости);
				
				Если ПревышениеДопустимойПроизводственнойМощности.Найти(ДатаЗанятости) <> Неопределено Тогда
					
					Интервал.Цвет = Новый Цвет(240, 128, 128);
					
				ИначеЕсли КалендарьДоступности.Найти(ДатаЗанятости) = Неопределено Тогда
					
					Интервал = ЗначениеРаспланировано.Добавить();
					Интервал.Начало = НачалоДня(ДатаЗанятости);
					Интервал.Конец = КонецДня(ДатаЗанятости);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ОтображатьГрафикРаботы Тогда

				Для каждого ДатаДоступности из КалендарьДоступности Цикл
					
					Интервал = ЗначениеКалендарь.Добавить();
					Интервал.Начало = НачалоДня(ДатаДоступности);
					Интервал.Конец = КонецДня(ДатаДоступности);
					
					Если КалендарьЗанятости.Найти(ДатаДоступности) = Неопределено Тогда
						
						Интервал = ЗначениеКалендарь.Добавить();
						Интервал.Начало = НачалоДня(ДатаДоступности);
						Интервал.Конец = КонецДня(ДатаДоступности);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	(РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье)
	|			ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
	|			ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
	|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &ДатаНачала
	|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &ДатаОкончания");
	
	Запрос.УстановитьПараметр("ДатаНачала", ?(ДатаНач = Дата('00010101000000'), ДатаНач, НачалоДня(ДатаНач)));
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ДатаКон = Дата('00010101000000'), Дата("39991231"), КонецДня(ДатаКон)));
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДиаграммаГанта.ИнтервалыФона.Добавить(НачалоДня(Выборка.ДатаКалендаря), КонецДня(Выборка.ДатаКалендаря));
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДиаграммаГанта.Обновление = Истина;
	
КонецПроцедуры // ВывестиДиаграммуГанта()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА И ВЫВОДА ИСТОЧНИКОВ ОБЕСПЕЧЕНИЯ

Процедура ВывестиИсточникиОбеспечения(СтрокаДереваПланов, СтрокаСоставаПлана, ВидПериода, РассчитыватьИсточникиОбеспечения)
	
	Если ТипЗнч(СтрокаДереваПланов.План) = Тип("ДокументСсылка.ПланПроизводства") Тогда
		
		ИсточникОбеспеченияПроизводственнаяПрограмма(СтрокаДереваПланов, СтрокаСоставаПлана, ВидПериода, РассчитыватьИсточникиОбеспечения);
		ИсточникОбеспеченияЗаказыНаПроизводство(СтрокаДереваПланов, СтрокаСоставаПлана, ВидПериода, РассчитыватьИсточникиОбеспечения);
		ИсточникОбеспеченияЗаказыПоставщикамПереработка(СтрокаДереваПланов, СтрокаСоставаПлана, ВидПериода, РассчитыватьИсточникиОбеспечения);
		ИсточникОбеспеченияПланыПроизводства(СтрокаДереваПланов, СтрокаСоставаПлана, ВидПериода, РассчитыватьИсточникиОбеспечения);
		ИсточникОбеспеченияПланыЗакупок(СтрокаДереваПланов, СтрокаСоставаПлана, ВидПериода, РассчитыватьИсточникиОбеспечения);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьИсточникиОбеспечения()

Процедура ИсточникОбеспеченияПроизводственнаяПрограмма(СтрокаДереваПланов, СтрокаСоставаПлана, ВидПериода, РассчитыватьИсточникиОбеспечения)
	
	НаименованиеИсточникаОбеспечения = НСтр("ru='Производственная программа'");
	
	Если НЕ РассчитыватьИсточникиОбеспечения Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДатаНачПлана = СтрокаДереваПланов.План.ДатаПланирования;
	ДатаКонПлана = СтрокаДереваПланов.План.ДатаПланирования;
	УправлениеПланированием.ВыровнятьПериод(ДатаНачПлана, ДатаКонПлана, СтрокаДереваПланов.План.Сценарий.Периодичность);
	
	МассивЗаказов = Новый Массив;

	Если СтрокаСоставаПлана.Заказ = Неопределено ИЛИ СтрокаСоставаПлана.Заказ.Пустая() Тогда
		
		МассивЗаказов.Добавить(Неопределено);
		МассивЗаказов.Добавить(Документы.ЗаказПокупателя.ПустаяСсылка());
		МассивЗаказов.Добавить(Документы.ЗаказНаПроизводство.ПустаяСсылка());
		
	Иначе
		
		МассивЗаказов.Добавить(СтрокаСоставаПлана.Заказ);
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(ПроизводственнаяПрограммаОбороты.Период, " + ВидПериода + ") КАК Период,
	|	СУММА(ПроизводственнаяПрограммаОбороты.КоличествоОборот) КАК Количество
	|ИЗ
	|	РегистрНакопления.ПроизводственнаяПрограмма.Обороты(
	|		&ДатаНачГраница,
	|		&ДатаКонГраница,
	|		Регистратор,
	|		Номенклатура = &Номенклатура
	|		    И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|		    И Спецификация = &Спецификация
	|		    И Заказ В (&МассивЗаказов)) КАК ПроизводственнаяПрограммаОбороты
	|ГДЕ
	|	(ПроизводственнаяПрограммаОбороты.Регистратор = &План
	|			ИЛИ ПроизводственнаяПрограммаОбороты.Источник = &План)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ПроизводственнаяПрограммаОбороты.Период, " + ВидПериода + ")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	
	Запрос.УстановитьПараметр("ДатаНачГраница", ?(ДатаНачПлана = Дата('00010101000000'), ДатаНачПлана, Новый Граница(НачалоДня(ДатаНачПлана), ВидГраницы.Включая)));
	Запрос.УстановитьПараметр("ДатаКонГраница", ?(ДатаКонПлана = Дата('00010101000000'), ДатаКонПлана, Новый Граница(КонецДня(ДатаКонПлана), ВидГраницы.Включая)));
	Запрос.УстановитьПараметр("План", СтрокаДереваПланов.План);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаСоставаПлана.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаСоставаПлана.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("Спецификация", СтрокаСоставаПлана.Спецификация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрокаИсточникОбеспечения = СтрокаСоставаПлана.Строки.Добавить();
	НоваяСтрокаИсточникОбеспечения.ИсточникОбеспечения = НаименованиеИсточникаОбеспечения;
	НоваяСтрокаИсточникОбеспечения.ЕдиницаИзмерения = СтрокаСоставаПлана.ЕдиницаИзмерения;
	НоваяСтрокаИсточникОбеспечения.Коэффициент = СтрокаСоставаПлана.Коэффициент;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
								
		НоваяСтрокаИсточникОбеспечения[мСоответствиеПериодовКолонкам[Выборка.Период]] = Выборка.Количество;
		НоваяСтрокаИсточникОбеспечения.Количество = НоваяСтрокаИсточникОбеспечения.Количество + Выборка.Количество;

	КонецЦикла;
	
КонецПроцедуры // ИсточникОбеспеченияПроизводственнаяПрограмма()

Процедура ИсточникОбеспеченияЗаказыНаПроизводство(СтрокаДереваПланов, СтрокаСоставаПлана, ВидПериода, РассчитыватьИсточникиОбеспечения)
	
	НаименованиеИсточникаОбеспечения = НСтр("ru='Заказы на производство'");
	
	Если НЕ УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство() ИЛИ НЕ РассчитыватьИсточникиОбеспечения Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДатаНачПлана = СтрокаДереваПланов.План.ДатаПланирования;
	ДатаКонПлана = СтрокаДереваПланов.План.ДатаПланирования;
	УправлениеПланированием.ВыровнятьПериод(ДатаНачПлана, ДатаКонПлана, СтрокаДереваПланов.План.Сценарий.Периодичность);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство.ДатаИсполнения = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА &ДатаНач
	|			ИНАЧЕ ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство.ДатаИсполнения
	|		КОНЕЦ, " + ВидПериода + ") КАК Период,
	|	СУММА(ВЫБОР
	|			КОГДА &Заказ = НЕОПРЕДЕЛЕНО
	|				ТОГДА ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток, 0)
	|			ИНАЧЕ ЕСТЬNULL(РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток, 0)
	|		КОНЕЦ * ЗаказыНаПроизводствоОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / &Коэффициент) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|			&ДатаКонГраница,
	|			Подразделение = &Подразделение
	|				И Номенклатура = &Номенклатура
	|				И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|				И Спецификация = &Спецификация
	|				И (ЗаказНаПроизводство.ДатаИсполнения = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ ЗаказНаПроизводство.ДатаИсполнения МЕЖДУ &ДатаНач И &ДатаКон)) КАК ЗаказыНаПроизводствоОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(
	|				&ДатаКонГраница,
	|				Номенклатура = &Номенклатура
	|					И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|					И ЗаказПоставщику ССЫЛКА Документ.ЗаказНаПроизводство
	|					И ЗаказПоставщику.Подразделение = &Подразделение
	|					И (ЗаказПоставщику.ДатаИсполнения = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ ЗаказПоставщику.ДатаИсполнения МЕЖДУ &ДатаНач И &ДатаКон)) КАК РазмещениеЗаказовПокупателейОстатки
	|		ПО ЗаказыНаПроизводствоОстатки.Номенклатура = РазмещениеЗаказовПокупателейОстатки.Номенклатура
	|			И ЗаказыНаПроизводствоОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры
	|			И ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство = РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику
	|			И (&Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ &Заказ = РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Заказ = НЕОПРЕДЕЛЕНО
	|				ТОГДА ЗаказыНаПроизводствоОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток, 0)
	|			ИНАЧЕ ЕСТЬNULL(РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток, 0)
	|		КОНЕЦ > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство.ДатаИсполнения = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА &ДатаНач
	|			ИНАЧЕ ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство.ДатаИсполнения
	|		КОНЕЦ, " + ВидПериода + ")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачПлана);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКонПлана);
	Запрос.УстановитьПараметр("ДатаКонГраница", ?(ДатаКонПлана = Дата('00010101000000'), ДатаКонПлана, Новый Граница(КонецДня(ДатаКонПлана), ВидГраницы.Включая)));
	Запрос.УстановитьПараметр("Номенклатура", СтрокаСоставаПлана.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаСоставаПлана.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Подразделение", СтрокаДереваПланов.План.Подразделение);
	Запрос.УстановитьПараметр("Заказ", ?(СтрокаСоставаПлана.Заказ = Неопределено ИЛИ СтрокаСоставаПлана.Заказ.Пустая(), Неопределено, СтрокаСоставаПлана.Заказ));
	Запрос.УстановитьПараметр("Спецификация", СтрокаСоставаПлана.Спецификация);
	Запрос.УстановитьПараметр("Коэффициент", СтрокаСоставаПлана.Коэффициент);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрокаИсточникОбеспечения = СтрокаСоставаПлана.Строки.Добавить();
	НоваяСтрокаИсточникОбеспечения.ИсточникОбеспечения = НаименованиеИсточникаОбеспечения;
	НоваяСтрокаИсточникОбеспечения.ЕдиницаИзмерения = СтрокаСоставаПлана.ЕдиницаИзмерения;
	НоваяСтрокаИсточникОбеспечения.Коэффициент = СтрокаСоставаПлана.Коэффициент;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
								
		НоваяСтрокаИсточникОбеспечения[мСоответствиеПериодовКолонкам[Выборка.Период]] = Выборка.Количество;
		НоваяСтрокаИсточникОбеспечения.Количество = НоваяСтрокаИсточникОбеспечения.Количество + Выборка.Количество;

	КонецЦикла;
	
КонецПроцедуры // ИсточникОбеспеченияЗаказыНаПроизводство()

Процедура ИсточникОбеспеченияЗаказыПоставщикамПереработка(СтрокаДереваПланов, СтрокаСоставаПлана, ВидПериода, РассчитыватьИсточникиОбеспечения)
	
	НаименованиеИсточникаОбеспечения = НСтр("ru='Заказы поставщикам (переработка)'");
	
	Если НЕ РассчитыватьИсточникиОбеспечения Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДатаНачПлана = СтрокаДереваПланов.План.ДатаПланирования;
	ДатаКонПлана = СтрокаДереваПланов.План.ДатаПланирования;
	УправлениеПланированием.ВыровнятьПериод(ДатаНачПлана, ДатаКонПлана, СтрокаДереваПланов.План.Сценарий.Периодичность);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК Документ.ЗаказПоставщику).ДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА &ДатаНач
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК Документ.ЗаказПоставщику).ДатаПоступления
	|		КОНЕЦ, " + ВидПериода + ") КАК Период,
	|	СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток * ЗаказыПоставщикамОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / &Коэффициент) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|		&ДатаКонГраница,
	|		СтатусПартии = &СтатусПартии
	|		    И ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику
	|		    И Номенклатура = &Номенклатура
	|		    И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|		    И (ЗаказПоставщику.ДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
	|		        ИЛИ ЗаказПоставщику.ДатаПоступления МЕЖДУ &ДатаНач И &ДатаКон)) КАК ЗаказыПоставщикамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК Документ.ЗаказПоставщику).ДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА &ДатаНач
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК Документ.ЗаказПоставщику).ДатаПоступления
	|		КОНЕЦ, " + ВидПериода + ")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачПлана);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКонПлана);
	Запрос.УстановитьПараметр("ДатаКонГраница", ?(ДатаКонПлана = Дата('00010101000000'), ДатаКонПлана, Новый Граница(КонецДня(ДатаКонПлана), ВидГраницы.Включая)));
	Запрос.УстановитьПараметр("Номенклатура", СтрокаСоставаПлана.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаСоставаПлана.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВПереработку);
	Запрос.УстановитьПараметр("Коэффициент", СтрокаСоставаПлана.Коэффициент);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрокаИсточникОбеспечения = СтрокаСоставаПлана.Строки.Добавить();
	НоваяСтрокаИсточникОбеспечения.ИсточникОбеспечения = НаименованиеИсточникаОбеспечения;
	НоваяСтрокаИсточникОбеспечения.ЕдиницаИзмерения = СтрокаСоставаПлана.ЕдиницаИзмерения;
	НоваяСтрокаИсточникОбеспечения.Коэффициент = СтрокаСоставаПлана.Коэффициент;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
								
		НоваяСтрокаИсточникОбеспечения[мСоответствиеПериодовКолонкам[Выборка.Период]] = Выборка.Количество;
		НоваяСтрокаИсточникОбеспечения.Количество = НоваяСтрокаИсточникОбеспечения.Количество + Выборка.Количество;

	КонецЦикла;
	
КонецПроцедуры // ИсточникОбеспеченияЗаказыПоставщикамПереработка()

Процедура ИсточникОбеспеченияПланыПроизводства(СтрокаДереваПланов, СтрокаСоставаПлана, ВидПериода, РассчитыватьИсточникиОбеспечения)
	
	НаименованиеИсточникаОбеспечения = НСтр("ru='Планы производства'");
	
	Если НЕ РассчитыватьИсточникиОбеспечения Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДатаНачПлана = СтрокаДереваПланов.План.ДатаПланирования;
	ДатаКонПлана = СтрокаДереваПланов.План.ДатаПланирования;
	УправлениеПланированием.ВыровнятьПериод(ДатаНачПлана, ДатаКонПлана, СтрокаДереваПланов.План.Сценарий.Периодичность);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(ПланыПроизводстваОбороты.Период, " + ВидПериода + ") КАК Период,
	|	СУММА(ПланыПроизводстваОбороты.КоличествоОборот * ПланыПроизводстваОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / &Коэффициент) КАК Количество
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства.Обороты(
	|		&ДатаНачГраница,
	|		&ДатаКонГраница,
	|		Регистратор,
	|		ДокументПланирования = &План
	|		    И Номенклатура ССЫЛКА Справочник.Номенклатура
	|		    И Номенклатура = &Номенклатура
	|		    И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|		    И Заказ = &Заказ
	|		    И Контрагент = &Контрагент
	|		    И Договор = &Договор
	|		    И Спецификация = &Спецификация) КАК ПланыПроизводстваОбороты
	|ГДЕ
	|	ПланыПроизводстваОбороты.Регистратор <> ПланыПроизводстваОбороты.ДокументПланирования
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ПланыПроизводстваОбороты.Период, " + ВидПериода + ")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	
	Запрос.УстановитьПараметр("ДатаНачГраница", ?(ДатаНачПлана = Дата('00010101000000'), ДатаНачПлана, Новый Граница(НачалоДня(ДатаНачПлана), ВидГраницы.Включая)));
	Запрос.УстановитьПараметр("ДатаКонГраница", ?(ДатаКонПлана = Дата('00010101000000'), ДатаКонПлана, Новый Граница(КонецДня(ДатаКонПлана), ВидГраницы.Включая)));
	Запрос.УстановитьПараметр("План", СтрокаДереваПланов.План);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаСоставаПлана.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаСоставаПлана.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Заказ", ?(СтрокаСоставаПлана.Заказ = Неопределено ИЛИ СтрокаСоставаПлана.Заказ.Пустая(), Неопределено, СтрокаСоставаПлана.Заказ));
	Запрос.УстановитьПараметр("Контрагент", СтрокаСоставаПлана.Контрагент);
	Запрос.УстановитьПараметр("Договор", СтрокаСоставаПлана.Договор);
	Запрос.УстановитьПараметр("Спецификация", СтрокаСоставаПлана.Спецификация);
	Запрос.УстановитьПараметр("Коэффициент", СтрокаСоставаПлана.Коэффициент);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрокаИсточникОбеспечения = СтрокаСоставаПлана.Строки.Добавить();
	НоваяСтрокаИсточникОбеспечения.ИсточникОбеспечения = НаименованиеИсточникаОбеспечения;
	НоваяСтрокаИсточникОбеспечения.ЕдиницаИзмерения = СтрокаСоставаПлана.ЕдиницаИзмерения;
	НоваяСтрокаИсточникОбеспечения.Коэффициент = СтрокаСоставаПлана.Коэффициент;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
								
		НоваяСтрокаИсточникОбеспечения[мСоответствиеПериодовКолонкам[Выборка.Период]] = Выборка.Количество;
		НоваяСтрокаИсточникОбеспечения.Количество = НоваяСтрокаИсточникОбеспечения.Количество + Выборка.Количество;

	КонецЦикла;
		
КонецПроцедуры // ИсточникОбеспеченияПланыПроизводства()

Процедура ИсточникОбеспеченияПланыЗакупок(СтрокаДереваПланов, СтрокаСоставаПлана, ВидПериода, РассчитыватьИсточникиОбеспечения)

	НаименованиеИсточникаОбеспечения = НСтр("ru='Планы закупок'");
	
	Если НЕ РассчитыватьИсточникиОбеспечения Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДатаНачПлана = СтрокаДереваПланов.План.ДатаПланирования;
	ДатаКонПлана = СтрокаДереваПланов.План.ДатаПланирования;
	УправлениеПланированием.ВыровнятьПериод(ДатаНачПлана, ДатаКонПлана, СтрокаДереваПланов.План.Сценарий.Периодичность);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(ПланыЗакупокОбороты.Период, " + ВидПериода + ") КАК Период,
	|	СУММА(ПланыЗакупокОбороты.КоличествоОборот * ПланыЗакупокОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / &Коэффициент) КАК Количество
	|ИЗ
	|	РегистрНакопления.ПланыЗакупок.Обороты(
	|		&ДатаНачГраница,
	|		&ДатаКонГраница,
	|		Регистратор,
	|		ДокументПланирования = &План
	|		    И Номенклатура ССЫЛКА Справочник.Номенклатура
	|			И Номенклатура = &Номенклатура
	|			И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|			И Заказ = &Заказ
	|			И Контрагент = &Контрагент
	|			И Договор = &Договор) КАК ПланыЗакупокОбороты
	|ГДЕ
	|	ПланыЗакупокОбороты.Регистратор <> ПланыЗакупокОбороты.ДокументПланирования
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ПланыЗакупокОбороты.Период, " + ВидПериода + ")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
		
	Запрос.УстановитьПараметр("ДатаНачГраница", ?(ДатаНачПлана = Дата('00010101000000'), ДатаНачПлана, Новый Граница(НачалоДня(ДатаНачПлана), ВидГраницы.Включая)));
	Запрос.УстановитьПараметр("ДатаКонГраница", ?(ДатаКонПлана = Дата('00010101000000'), ДатаКонПлана, Новый Граница(КонецДня(ДатаКонПлана), ВидГраницы.Включая)));
	Запрос.УстановитьПараметр("План", СтрокаДереваПланов.План);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаСоставаПлана.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаСоставаПлана.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Заказ", ?(СтрокаСоставаПлана.Заказ = Неопределено ИЛИ СтрокаСоставаПлана.Заказ.Пустая(), Неопределено, СтрокаСоставаПлана.Заказ));
	Запрос.УстановитьПараметр("Контрагент", СтрокаСоставаПлана.Контрагент);
	Запрос.УстановитьПараметр("Договор", СтрокаСоставаПлана.Договор);
	Запрос.УстановитьПараметр("Коэффициент", СтрокаСоставаПлана.Коэффициент);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрокаИсточникОбеспечения = СтрокаСоставаПлана.Строки.Добавить();
	НоваяСтрокаИсточникОбеспечения.ИсточникОбеспечения = НаименованиеИсточникаОбеспечения;
	НоваяСтрокаИсточникОбеспечения.ЕдиницаИзмерения = СтрокаСоставаПлана.ЕдиницаИзмерения;
	НоваяСтрокаИсточникОбеспечения.Коэффициент = СтрокаСоставаПлана.Коэффициент;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
								
		НоваяСтрокаИсточникОбеспечения[мСоответствиеПериодовКолонкам[Выборка.Период]] = Выборка.Количество;
		НоваяСтрокаИсточникОбеспечения.Количество = НоваяСтрокаИсточникОбеспечения.Количество + Выборка.Количество;

	КонецЦикла;
	
КонецПроцедуры // ИсточникОбеспеченияПланыЗакупок()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА И ВЫВОДА ПОТРЕБНОСТЕЙ

Процедура ВывестиПотребности(Потребности, ИсточникПотребности, РассчитыватьПотребности) Экспорт
	
	Потребности.Строки.Очистить();
	
	Если ИсточникПотребности = Неопределено ИЛИ ИсточникПотребности.Уровень() > 0 ИЛИ НЕ РассчитыватьПотребности ИЛИ ТипЗнч(ИсточникПотребности.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РезультатРазузлования = Новый Структура("ПолноеРазузлование");
	Параметры = Новый Структура("КоличествоУровнейРазузлования", 1);
	
	Для каждого ЭлементСоответствия из мСоответствиеКолонокПериодам Цикл
		
		Количество = ИсточникПотребности[ЭлементСоответствия.Ключ];
		
		Если Количество > 0 Тогда
			
			СтруктураИсточник = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, Количество");
			
			ЗаполнитьЗначенияСвойств(СтруктураИсточник, ИсточникПотребности);
			СтруктураИсточник.Количество = Количество;
			
			МассивОшибок = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(СтруктураИсточник, РезультатРазузлования, Параметры);
			
			Если РезультатРазузлования.ПолноеРазузлование.Колонки.Найти("Период") = Неопределено Тогда
				
				РезультатРазузлования.ПолноеРазузлование.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
				
			КонецЕсли;
				
			Для каждого СтрокаПотребности из РезультатРазузлования.ПолноеРазузлование Цикл
				
				Если СтрокаПотребности.Период = Дата('00010101') Тогда
					
					СтрокаПотребности.Период = ЭлементСоответствия.Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если МассивОшибок.Количество() > 0 Тогда
					
				Для каждого Ошибка из МассивОшибок Цикл
						
					ОбщегоНазначения.Сообщение(НСтр("ru='Ошибка: '") + Ошибка.Причина, Ошибка.СтатусОшибки);
					ОбщегоНазначения.Сообщение(НСтр("ru=' Спецификация: '") + Ошибка.Спецификация);
					ОбщегоНазначения.Сообщение(НСтр("ru=' Номер строки: '") + Ошибка.НомерСтроки);
					ОбщегоНазначения.Сообщение(НСтр("ru=' Описание ошибки: '") + Ошибка.ОписаниеОшибки);
					
				КонецЦикла;
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатРазузлования <> Неопределено Тогда
		
		УправлениеПланированием.ДополнитьТаблицу(Потребности.Строки, РезультатРазузлования.ПолноеРазузлование);
		
	КонецЕсли;
	
КонецПроцедуры // ВывестиПотребности()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА ПРОИЗВОДСТВЕННОЙ ПРОГРАММЫ

Процедура ВыполнитьПланирование(ПроизводственнаяПрограмма, ВыбранныеСтроки = Неопределено, ТолькоНераспланированные = Ложь, ФормаПрогрессора = Неопределено) Экспорт
	
	ПП = ПроизводственнаяПрограмма.Выгрузить();
	ТекущаяПП = Неопределено;
	Планировать = Неопределено;
	
	ИспользоватьПрогрессор = ФормаПрогрессора <> Неопределено;
		
	Если ИспользоватьПрогрессор И НЕ ФормаПрогрессора.Открыта() Тогда
		
		ФормаПрогрессора.Открыть();
		
	КонецЕсли;
	
	Для каждого СтрокаПП из ПП Цикл
		
		Если (ТолькоНераспланированные И НЕ Распланирован(СтрокаПП)) ИЛИ (ВыбранныеСтроки <> Неопределено И ВыбранныеСтроки.Содержит(ПроизводственнаяПрограмма.Получить(ПП.Индекс(СтрокаПП)))) ИЛИ (ВыбранныеСтроки = Неопределено И НЕ ТолькоНераспланированные) Тогда
			
			ТекущийОбъект = СтрокаПП.ДокументПланирования.ПолучитьОбъект();
			
			Если НЕ ТекущийОбъект.Заблокирован() Тогда
				
				Попытка
					
					ТекущийОбъект.Заблокировать();
					
				Исключение
					
					Если ИспользоватьПрогрессор И ФормаПрогрессора.Открыта() Тогда
						
						ФормаПрогрессора.Закрыть();
						
					КонецЕсли;
					
					ВызватьИсключение НСтр("ru='Невозможно заблокировать документ.'");
					
				КонецПопытки;
				
			КонецЕсли;
			
			УправлениеПланированием.ДополнитьТаблицу(Планировать, ПП, 0, ПП.Индекс(СтрокаПП));
			
		Иначе
			
			ТекущийОбъект = СтрокаПП.ДокументПланирования.ПолучитьОбъект();
			
			Если НЕ ТекущийОбъект.Заблокирован() Тогда
				
				Попытка
					
					ТекущийОбъект.Заблокировать();
					
				Исключение
					
					Если ИспользоватьПрогрессор И ФормаПрогрессора.Открыта() Тогда
						
						ФормаПрогрессора.Закрыть();
						
					КонецЕсли;
					
					ВызватьИсключение НСтр("ru='Невозможно заблокировать документ.'");
					
				КонецПопытки;
				
			КонецЕсли;
			
			УправлениеПланированием.ДополнитьТаблицу(ТекущаяПП, ПП, 0, ПП.Индекс(СтрокаПП));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПланироватьВыпуски(ТекущаяПП, Планировать, ФормаПрогрессора);
	
	Если ТекущаяПП <> Неопределено Тогда
		
		ТекущаяПП.Сортировать("ДокументПланирования");
		
		ТекущийДокументПланирования = Неопределено;
		ТекущийОбъект = Неопределено;
		
		Если ФормаПрогрессора <> Неопределено Тогда
			
			ФормаПрогрессора.МаксимальноеЗначение = ТекущаяПП.Количество();
			ФормаПрогрессора.Значение = 0;
			ФормаПрогрессора.КомментарийОбработкиДанных = НСтр("ru='Обновление производственной программы'");
			
		КонецЕсли;
		
		Для каждого Строка из ТекущаяПП Цикл
			
			Если ТекущийДокументПланирования <> Строка.ДокументПланирования Тогда
				
				Если ТекущийОбъект <> Неопределено Тогда
					
					ТекущийОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
				КонецЕсли;
				
				ТекущийДокументПланирования = Строка.ДокументПланирования;
				
				ФормаПрогрессора.КомментарийЗначения = Строка(ТекущийДокументПланирования);
				
				ТекущийОбъект = Строка.ДокументПланирования.ПолучитьОбъект();
				ТекущийОбъект.ПроизводственнаяПрограмма.Очистить();
				
			КонецЕсли;
			
			НоваяСтрока = ТекущийОбъект.ПроизводственнаяПрограмма.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			ФормаПрогрессора.Значение = ФормаПрогрессора.Значение + 1;
			
		КонецЦикла;
		
		Если ТекущийОбъект <> Неопределено Тогда
			
			ТекущийОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьПрогрессор И ФормаПрогрессора.Открыта() Тогда
		
		ФормаПрогрессора.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПланирование()

Процедура ПланироватьВыпуски(ТекущаяПП, Планировать, ФормаПрогрессора = Неопределено)
	
	Если Планировать = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИспользоватьПрогрессор = ФормаПрогрессора <> Неопределено;
	
	Если ИспользоватьПрогрессор Тогда
		
		ФормаПрогрессора.МаксимальноеЗначение = Планировать.Количество();
		ФормаПрогрессора.Значение = 0;
		ФормаПрогрессора.КомментарийОбработкиДанных = НСтр("ru='Планирование выпуска'");
		
	КонецЕсли;
	
	ПланироватьКакМожноБыстрее = Планировать.НайтиСтроки(Новый Структура("ВариантРаспределения", Перечисления.ВариантыРаспределенияПоПериоду.КакМожноБыстрее));
	
	Для каждого Строка из ПланироватьКакМожноБыстрее Цикл
		
		Если ИспользоватьПрогрессор Тогда
		
			ФормаПрогрессора.КомментарийЗначения = Строка(Строка.Номенклатура);
			
		КонецЕсли;
		
		ПланироватьВыпуск(ТекущаяПП, Строка, Планировать);
		
		Если ИспользоватьПрогрессор Тогда
		
			ФормаПрогрессора.Значение = ФормаПрогрессора.Значение + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПланироватьТочноКСроку = Планировать.НайтиСтроки(Новый Структура("ВариантРаспределения", Перечисления.ВариантыРаспределенияПоПериоду.ТочноКСроку));
	
	Для каждого Строка из ПланироватьТочноКСроку Цикл
		
		Если ИспользоватьПрогрессор Тогда
		
			ФормаПрогрессора.КомментарийЗначения = Строка(Строка.Номенклатура);
			
		КонецЕсли;
		
		ПланироватьВыпуск(ТекущаяПП, Строка, Планировать);
		
		Если ИспользоватьПрогрессор Тогда
		
			ФормаПрогрессора.Значение = ФормаПрогрессора.Значение + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПланироватьРавномерно = Планировать.НайтиСтроки(Новый Структура("ВариантРаспределения", Перечисления.ВариантыРаспределенияПоПериоду.Равномерно));
	
	Для каждого Строка из ПланироватьРавномерно Цикл
		
		Если ИспользоватьПрогрессор Тогда
		
			ФормаПрогрессора.КомментарийЗначения = Строка(Строка.Номенклатура);
			
		КонецЕсли;
		
		ПланироватьВыпуск(ТекущаяПП, Строка, Планировать);
		
		Если ИспользоватьПрогрессор Тогда
		
			ФормаПрогрессора.Значение = ФормаПрогрессора.Значение + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПланироватьВыпуски()

Процедура ПланироватьВыпуск(ТекущаяПП, Строка, Планировать)
	
	ВариантРаспределения = Строка.ВариантРаспределения;
	ДатаПланирования = Строка.ДокументПланирования.ДатаПланирования;
	Период = Строка.Период;
	
	Строка.Подразделение = Неопределено;
	Строка.РабочийЦентр = Неопределено;
	
	РезультатРазузлования = Новый Структура("ПолноеРазузлование");
	Параметры = Новый Структура("КоличествоУровнейРазузлования, ДатаСпецификации", -1, Период);
	СтруктураИсточник = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Количество, Спецификация");
	ЗаполнитьЗначенияСвойств(СтруктураИсточник, Строка);
	
	МассивОшибок = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(СтруктураИсточник, РезультатРазузлования, Параметры);
		
	Если МассивОшибок.Количество() > 0 Тогда
			
		Для каждого Ошибка из МассивОшибок Цикл
				
			ОбщегоНазначения.Сообщение(НСтр("ru='Ошибка: '") + Ошибка.Причина, Ошибка.СтатусОшибки);
			ОбщегоНазначения.Сообщение(НСтр("ru=' Спецификация: '") + Ошибка.Спецификация);
			ОбщегоНазначения.Сообщение(НСтр("ru=' Номер строки: '") + Ошибка.НомерСтроки);
			ОбщегоНазначения.Сообщение(НСтр("ru=' Описание ошибки: '") + Ошибка.ОписаниеОшибки);
			
		КонецЦикла;
			
	КонецЕсли;
	
	КалендарьДоступности = ПолучитьКалендарьДоступности(РезультатРазузлования.ПолноеРазузлование[0].РабочийЦентр, ДатаПланирования, Период, ВариантРаспределения);
	
	Для каждого ДатаДоступности из КалендарьДоступности Цикл
		
		РазместитьВыпуск(ТекущаяПП, Строка, ДатаДоступности, РезультатРазузлования, Планировать);
		
		Если Строка.Количество <= 0 Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Строка.Количество > 0 Тогда
		
		УправлениеПланированием.ДополнитьТаблицу(ТекущаяПП, Планировать,, Планировать.Индекс(Строка));
		
	КонецЕсли;
	
КонецПроцедуры // ПланироватьВыпуск()

Процедура РазместитьВыпуск(ТекущаяПП, Строка, Период, СтруктураИзделия, Планировать)
	
	Если СтруктураИзделия = Неопределено ИЛИ СтруктураИзделия.ПолноеРазузлование.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПроизводственнаяМощность = ПолучитьПроизводственнуюМощность(Период, СтруктураИзделия.ПолноеРазузлование[0].Номенклатура, СтруктураИзделия.ПолноеРазузлование[0].ХарактеристикаНоменклатуры, СтруктураИзделия.ПолноеРазузлование[0].Спецификация, СтруктураИзделия.ПолноеРазузлование[0].РабочийЦентр);
	ДоступнаяДоляПроизводственнойМощности = ПолучитьДоступнуюДолюПроизводственнойМощности(Период, СтруктураИзделия.ПолноеРазузлование[0].РабочийЦентр, ТекущаяПП);
	
	Если (ПроизводственнаяМощность <> Неопределено И ПроизводственнаяМощность.Числитель = 0) ИЛИ ДоступнаяДоляПроизводственнойМощности.Числитель = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПроизводственнаяМощность = Неопределено Тогда
		
		ВозможноРазместить = Строка.Количество;
		
	Иначе
		
		ВозможноРазместить = УправлениеПланированием.ПривестиКМинимальнойПартииКратности((ПроизводственнаяМощность.Числитель * ДоступнаяДоляПроизводственнойМощности.Числитель) / (ПроизводственнаяМощность.Знаменатель * ДоступнаяДоляПроизводственнойМощности.Знаменатель), ПроизводственнаяМощность.МинимальнаяПартия, ПроизводственнаяМощность.Кратность, Истина);
		
	КонецЕсли;
	
	Если ВозможноРазместить > 0 Тогда
		
		УправлениеПланированием.ДополнитьТаблицу(ТекущаяПП, Планировать,, Планировать.Индекс(Строка));
		
		ТекущаяПП[ТекущаяПП.Количество() - 1].Период = Период;
		ТекущаяПП[ТекущаяПП.Количество() - 1].Подразделение = СтруктураИзделия.ПолноеРазузлование[0].Подразделение;
		ТекущаяПП[ТекущаяПП.Количество() - 1].РабочийЦентр = СтруктураИзделия.ПолноеРазузлование[0].РабочийЦентр;
		ТекущаяПП[ТекущаяПП.Количество() - 1].ТочкаМаршрута = СтруктураИзделия.ПолноеРазузлование[0].ТочкаМаршрута;
		ТекущаяПП[ТекущаяПП.Количество() - 1].Спецификация = СтруктураИзделия.ПолноеРазузлование[0].Спецификация;
		ТекущаяПП[ТекущаяПП.Количество() - 1].Количество = Мин(Строка.Количество, ВозможноРазместить);
		
		Строка.Количество = Строка.Количество - Мин(Строка.Количество, ВозможноРазместить);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // РазместитьВыпуск()

Функция ПолучитьПроизводственнуюМощность(Период, Номенклатура = Неопределено, ХарактеристикаНоменклатуры = Неопределено, Спецификация = Неопределено, Исполнитель = Неопределено)
	
	МассивНоменклатуры = Новый Массив;
	МассивНоменклатуры.Добавить(Справочники.Номенклатура.ПустаяСсылка());

	Если Номенклатура <> Неопределено Тогда
		
		МассивНоменклатуры.Добавить(Номенклатура);
		
	КонецЕсли;
	
	МассивХарактеристикНоменклатуры = Новый Массив;
	МассивХарактеристикНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	Если ХарактеристикаНоменклатуры <> Неопределено Тогда
		
		МассивХарактеристикНоменклатуры.Добавить(ХарактеристикаНоменклатуры);
		
	КонецЕсли;
	
	МассивСпецификаций = Новый Массив;
	МассивСпецификаций.Добавить(Справочники.СпецификацииНоменклатуры.ПустаяСсылка());

	Если Спецификация <> Неопределено Тогда
		
		МассивСпецификаций.Добавить(Спецификация);
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПроизводственныеМощности.Количество КАК Числитель,
	|	ВЫБОР
	|		КОГДА ПроизводственныеМощности.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), КОНЕЦПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ) + 1
	|		КОГДА ПроизводственныеМощности.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Период, НЕДЕЛЯ), КОНЕЦПЕРИОДА(&Период, НЕДЕЛЯ), ДЕНЬ) + 1
	|		КОГДА ПроизводственныеМощности.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Период, ДЕКАДА), КОНЕЦПЕРИОДА(&Период, ДЕКАДА), ДЕНЬ) + 1
	|		КОГДА ПроизводственныеМощности.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ), КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), ДЕНЬ) + 1
	|		КОГДА ПроизводственныеМощности.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Период, КВАРТАЛ), КОНЕЦПЕРИОДА(&Период, КВАРТАЛ), ДЕНЬ) + 1
	|		КОГДА ПроизводственныеМощности.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Период, ПОЛУГОДИЕ), КОНЕЦПЕРИОДА(&Период, ПОЛУГОДИЕ), ДЕНЬ) + 1
	|		КОГДА ПроизводственныеМощности.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Период, ГОД), КОНЕЦПЕРИОДА(&Период, ГОД), ДЕНЬ) + 1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Знаменатель,
	|	ПроизводственныеМощности.Количество / ВЫБОР
	|		КОГДА ПроизводственныеМощности.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), КОНЕЦПЕРИОДА(&Период, ДЕНЬ), ДЕНЬ) + 1
	|		КОГДА ПроизводственныеМощности.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Период, НЕДЕЛЯ), КОНЕЦПЕРИОДА(&Период, НЕДЕЛЯ), ДЕНЬ) + 1
	|		КОГДА ПроизводственныеМощности.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Период, ДЕКАДА), КОНЕЦПЕРИОДА(&Период, ДЕКАДА), ДЕНЬ) + 1
	|		КОГДА ПроизводственныеМощности.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ), КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), ДЕНЬ) + 1
	|		КОГДА ПроизводственныеМощности.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Период, КВАРТАЛ), КОНЕЦПЕРИОДА(&Период, КВАРТАЛ), ДЕНЬ) + 1
	|		КОГДА ПроизводственныеМощности.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Период, ПОЛУГОДИЕ), КОНЕЦПЕРИОДА(&Период, ПОЛУГОДИЕ), ДЕНЬ) + 1
	|		КОГДА ПроизводственныеМощности.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Период, ГОД), КОНЕЦПЕРИОДА(&Период, ГОД), ДЕНЬ) + 1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПолеДляУпорядочивания,
	|	ПроизводственныеМощности.МинимальнаяПартия,
	|	ПроизводственныеМощности.Кратность
	|ИЗ
	|	РегистрСведений.ПроизводственныеМощности.СрезПоследних(
	|			&Период,
	|			Номенклатура В (&МассивНоменклатуры)
	|				И ХарактеристикаНоменклатуры В (&МассивХарактеристикНоменклатуры)
	|				И Спецификация В (&МассивСпецификаций)
	|				И Исполнитель = &Исполнитель) КАК ПроизводственныеМощности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроизводственныеМощности.Номенклатура УБЫВ,
	|	ПроизводственныеМощности.ХарактеристикаНоменклатуры УБЫВ,
	|	ПроизводственныеМощности.Спецификация УБЫВ,
	|	ПолеДляУпорядочивания");
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("МассивХарактеристикНоменклатуры", МассивХарактеристикНоменклатуры);
	Запрос.УстановитьПараметр("МассивСпецификаций", МассивСпецификаций);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
	
		Возврат Новый Структура("Числитель, Знаменатель, МинимальнаяПартия, Кратность", Выборка.Числитель, Выборка.Знаменатель, Выборка.МинимальнаяПартия, Выборка.Кратность);
	
	КонецЕсли;
	
КонецФункции // ПолучитьПроизводственнуюМощность()

Функция ПолучитьДоступнуюДолюПроизводственнойМощности(Период, Исполнитель, ТекущаяПП)
	
	Результат = Новый Структура("Числитель, Знаменатель", 1, 1);
	
	Если ТекущаяПП = Неопределено Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Строки = ТекущаяПП.НайтиСтроки(Новый Структура("Период, РабочийЦентр", Период, Исполнитель));
	
	Для каждого Строка из Строки Цикл
		
		ПроизводственнаяМощностьПоСтроке = ПолучитьПроизводственнуюМощность(Период, Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, Строка.Спецификация, Исполнитель);
		
		Если ПроизводственнаяМощностьПоСтроке = Неопределено ИЛИ ПроизводственнаяМощностьПоСтроке.Числитель = 0 Тогда
			
			Продолжить;
			
		Иначе
			
			Результат = УправлениеПланированием.РазностьДробей(Результат, УправлениеПланированием.ПолучитьДробь(Строка.Количество * ПроизводственнаяМощностьПоСтроке.Знаменатель * 1000, ПроизводственнаяМощностьПоСтроке.Числитель * 1000));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если (Результат.Числитель > Результат.Знаменатель) > 1 Тогда
		
		Возврат	Новый Структура("Числитель, Знаменатель", 1, 1);
		
	ИначеЕсли (Результат.Числитель / Результат.Знаменатель) < 0 Тогда
		
		Возврат	Новый Структура("Числитель, Знаменатель", 0, 1);
		
	Иначе
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции // ПолучитьДоступнуюДолюПроизводственнойМощности()

Функция ПолучитьКоэффициентИспользованияПроизводственнойМощности(ТекущаяПП)
	
	Результат = Новый Структура("Числитель, Знаменатель", 0, 1000);
	
	Если ТекущаяПП = Неопределено Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Выборка = ТекущаяПП.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПроизводственнаяМощностьПоСтроке = ПолучитьПроизводственнуюМощность(Выборка.Период, Выборка.Номенклатура, Выборка.ХарактеристикаНоменклатуры, Выборка.Спецификация, Выборка.РабочийЦентр);
		
		Если ПроизводственнаяМощностьПоСтроке = Неопределено ИЛИ ПроизводственнаяМощностьПоСтроке.Числитель = 0 Тогда
			
			Продолжить;
			
		Иначе
			
			Результат = УправлениеПланированием.СуммаДробей(Результат, УправлениеПланированием.ПолучитьДробь(Выборка.Количество * ПроизводственнаяМощностьПоСтроке.Знаменатель * 1000, ПроизводственнаяМощностьПоСтроке.Числитель * 1000));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьКоэффициентИспользованияПроизводственнойМощности()

Функция Распланирован(Объект)
	
	Возврат НЕ(НЕ ЗначениеЗаполнено(Объект.Период) ИЛИ НЕ ЗначениеЗаполнено(Объект.РабочийЦентр));
	
КонецФункции // Распланирован()

Функция ПолучитьКалендарьДоступности(РабочийЦентр, НачальнаяДата, КонечнаяДата, ВариантРаспределения)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ГрафикиРабочегоЦентра.ГрафикРаботы ЕСТЬ NULL 
	|			ТОГДА НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(НаборЗаписейГрафика.Дата, ДЕНЬ)
	|	КОНЕЦ КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		NULL КАК ГрафикРаботы,
	|		НАЧАЛОПЕРИОДА(&НачальнаяДата, ДЕНЬ) КАК НачалоДействияГрафика,
	|		ВЫБОР
	|			КОГДА МИНИМУМ(КонечнаяДатаРегламетированногоПроизводственногоКалендаря.Период) ЕСТЬ NULL 
	|				ТОГДА НАЧАЛОПЕРИОДА(&КонечнаяДата, ДЕНЬ)
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(МИНИМУМ(КонечнаяДатаРегламетированногоПроизводственногоКалендаря.Период), ДЕНЬ, -1), ДЕНЬ)
	|		КОНЕЦ КАК ОкончаниеДействияГрафика
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НАЧАЛОПЕРИОДА(ГрафикиРабочегоЦентра.Период, ДЕНЬ) КАК Период
	|		ИЗ
	|			РегистрСведений.ГрафикиРабочихЦентров.СрезПоследних(&НачальнаяДата, РабочийЦентр = &РабочийЦентр) КАК ГрафикиРабочегоЦентра
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			НАЧАЛОПЕРИОДА(ГрафикиРабочегоЦентра.Период, ДЕНЬ)
	|		ИЗ
	|			РегистрСведений.ГрафикиРабочихЦентров КАК ГрафикиРабочегоЦентра
	|		ГДЕ
	|			ГрафикиРабочегоЦентра.РабочийЦентр = &РабочийЦентр
	|			И ГрафикиРабочегоЦентра.Период > НАЧАЛОПЕРИОДА(&НачальнаяДата, ДЕНЬ)
	|			И ГрафикиРабочегоЦентра.Период <= НАЧАЛОПЕРИОДА(&КонечнаяДата, ДЕНЬ)) КАК КонечнаяДатаРегламетированногоПроизводственногоКалендаря
	|	
	|	ИМЕЮЩИЕ
	|		НАЧАЛОПЕРИОДА(&НачальнаяДата, ДЕНЬ) <= ВЫБОР
	|			КОГДА МИНИМУМ(КонечнаяДатаРегламетированногоПроизводственногоКалендаря.Период) ЕСТЬ NULL 
	|				ТОГДА НАЧАЛОПЕРИОДА(&КонечнаяДата, ДЕНЬ)
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(МИНИМУМ(КонечнаяДатаРегламетированногоПроизводственногоКалендаря.Период), ДЕНЬ, -1), ДЕНЬ)
	|		КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГрафикиРабочегоЦентра.ГрафикРаботы,
	|		НАЧАЛОПЕРИОДА(&НачальнаяДата, ДЕНЬ),
	|		МИНИМУМ(ВЫБОР
	|				КОГДА ГрафикиРабочихЦентров.Период ЕСТЬ NULL 
	|					ТОГДА НАЧАЛОПЕРИОДА(&КонечнаяДата, ДЕНЬ)
	|				ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ГрафикиРабочихЦентров.Период, ДЕНЬ, -1), ДЕНЬ)
	|			КОНЕЦ)
	|	ИЗ
	|		РегистрСведений.ГрафикиРабочихЦентров.СрезПоследних(&НачальнаяДата, РабочийЦентр = &РабочийЦентр) КАК ГрафикиРабочегоЦентра
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРабочихЦентров КАК ГрафикиРабочихЦентров
	|			ПО ГрафикиРабочегоЦентра.РабочийЦентр = ГрафикиРабочихЦентров.РабочийЦентр
	|				И (НАЧАЛОПЕРИОДА(&НачальнаяДата, ДЕНЬ) < НАЧАЛОПЕРИОДА(ГрафикиРабочихЦентров.Период, ДЕНЬ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикиРабочегоЦентра.ГрафикРаботы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГрафикиРабочегоЦентра.ГрафикРаботы,
	|		НАЧАЛОПЕРИОДА(ГрафикиРабочегоЦентра.Период, ДЕНЬ),
	|		МИНИМУМ(ВЫБОР
	|				КОГДА ГрафикиРабочихЦентров.Период ЕСТЬ NULL 
	|					ТОГДА НАЧАЛОПЕРИОДА(&КонечнаяДата, ДЕНЬ)
	|				ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ГрафикиРабочихЦентров.Период, ДЕНЬ, -1), ДЕНЬ)
	|			КОНЕЦ)
	|	ИЗ
	|		РегистрСведений.ГрафикиРабочихЦентров КАК ГрафикиРабочегоЦентра
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРабочихЦентров КАК ГрафикиРабочихЦентров
	|			ПО ГрафикиРабочегоЦентра.РабочийЦентр = ГрафикиРабочихЦентров.РабочийЦентр
	|				И (НАЧАЛОПЕРИОДА(ГрафикиРабочегоЦентра.Период, ДЕНЬ) < НАЧАЛОПЕРИОДА(ГрафикиРабочихЦентров.Период, ДЕНЬ))
	|	ГДЕ
	|		ГрафикиРабочегоЦентра.РабочийЦентр = &РабочийЦентр
	|		И НАЧАЛОПЕРИОДА(ГрафикиРабочегоЦентра.Период, ДЕНЬ) > НАЧАЛОПЕРИОДА(&НачальнаяДата, ДЕНЬ)
	|		И НАЧАЛОПЕРИОДА(ГрафикиРабочегоЦентра.Период, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&КонечнаяДата, ДЕНЬ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикиРабочегоЦентра.ГрафикРаботы,
	|		НАЧАЛОПЕРИОДА(ГрафикиРабочегоЦентра.Период, ДЕНЬ)) КАК ГрафикиРабочегоЦентра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоСменам КАК НаборЗаписейГрафика
	|		ПО ГрафикиРабочегоЦентра.ГрафикРаботы = НаборЗаписейГрафика.ГрафикРаботы
	|			И (НАЧАЛОПЕРИОДА(НаборЗаписейГрафика.Дата, ДЕНЬ) >= НАЧАЛОПЕРИОДА(ГрафикиРабочегоЦентра.НачалоДействияГрафика, ДЕНЬ))
	|			И (НАЧАЛОПЕРИОДА(НаборЗаписейГрафика.Дата, ДЕНЬ) <= НАЧАЛОПЕРИОДА(ГрафикиРабочегоЦентра.ОкончаниеДействияГрафика, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ПО (ГрафикиРабочегоЦентра.ГрафикРаботы ЕСТЬ NULL )
	|			И (НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, ДЕНЬ) >= НАЧАЛОПЕРИОДА(ГрафикиРабочегоЦентра.НачалоДействияГрафика, ДЕНЬ))
	|			И (НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, ДЕНЬ) <= НАЧАЛОПЕРИОДА(ГрафикиРабочегоЦентра.ОкончаниеДействияГрафика, ДЕНЬ))
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ГрафикиРабочегоЦентра.ГрафикРаботы ЕСТЬ NULL 
	|				ТОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|						ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|			ИНАЧЕ НаборЗаписейГрафика.Часы > 0
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ГрафикиРабочегоЦентра.ГрафикРаботы ЕСТЬ NULL 
	|			ТОГДА НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(НаборЗаписейГрафика.Дата, ДЕНЬ)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	
	Запрос.УстановитьПараметр("РабочийЦентр", РабочийЦентр);
	Запрос.УстановитьПараметр("НачальнаяДата", НачальнаяДата);
	Запрос.УстановитьПараметр("КонечнаяДата", КонечнаяДата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	Иначе
		
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			
			Если ВариантРаспределения = Перечисления.ВариантыРаспределенияПоПериоду.КакМожноБыстрее Тогда
				
				Результат.Добавить(ВыборкаИзРезультатаЗапроса.Период);
				
			Иначе
				
				Результат.Вставить(0, ВыборкаИзРезультатаЗапроса.Период);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьКалендарьДоступности()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ

Процедура УстановитьОформлениеСтрокиСоставПлана(ОформлениеСтроки) Экспорт
	
	ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
	
	Если ДанныеСтроки.Уровень() = 0 Тогда
			
		ОформлениеСтроки.Ячейки.Номенклатура.Видимость = Истина;
		ОформлениеСтроки.Ячейки.ХарактеристикаНоменклатуры.Видимость = Истина;
		ОформлениеСтроки.Ячейки.ИсточникОбеспечения.Видимость = Ложь;
			
		КоличествоПроизводство = 0;
		КоличествоЗакупка = 0;
		
		Если АвтоматическийРасчетИсточниковОбеспечения ИЛИ ДанныеСтроки.Строки.Количество() > 0 Тогда
			
			Для каждого Строка из ДанныеСтроки.Строки Цикл
				
				Если Строка.ИсточникОбеспечения = НСтр("ru='Планы производства'") ИЛИ Строка.ИсточникОбеспечения = НСтр("ru='Заказы на производство'") ИЛИ Строка.ИсточникОбеспечения = НСтр("ru='Производственная программа'") Тогда
					
					КоличествоПроизводство = Макс(КоличествоПроизводство, Строка.Количество);
					
				ИначеЕсли Строка.ИсточникОбеспечения = НСтр("ru='Планы закупок'") ИЛИ Строка.ИсточникОбеспечения = НСтр("ru='Заказы поставщикам (переработка)'") Тогда
					
					КоличествоЗакупка = Макс(КоличествоЗакупка, Строка.Количество);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДанныеСтроки.Количество > КоличествоПроизводство + КоличествоЗакупка Тогда
				
				ОформлениеСтроки.ЦветФона = WebЦвета.ГолубойСКраснымОттенком;
				
			Иначе
				
				ОформлениеСтроки.ЦветФона = WebЦвета.Роса;
				
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли ДанныеСтроки.Уровень() = 1 Тогда
			
		ОформлениеСтроки.Ячейки.Номенклатура.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ХарактеристикаНоменклатуры.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ИсточникОбеспечения.Видимость = Истина;
			
	КонецЕсли;
	
КонецПроцедуры // УстановитьОформлениеСтрокиСоставПлана()

Процедура УстановитьОформлениеСтрокиПроизводственнаяПрограмма(ОформлениеСтроки) Экспорт
	
	ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
	
	Если Распланирован(ДанныеСтроки) Тогда
		
		ОформлениеСтроки.ЦветФона = WebЦвета.Роса;
				
	Иначе
				
		ОформлениеСтроки.ЦветФона = WebЦвета.ГолубойСКраснымОттенком;
				
	КонецЕсли;
	
КонецПроцедуры // УстановитьОформлениеСтрокиПроизводственнаяПрограмма()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОХРАНЕНИЯ И ВОССТАНОВЛЕНИЯ НАСТРОЕК

Функция ВосстановитьНастройки() Экспорт
	
	Перем СохраненнаяНастройка;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	
	Результат = УниверсальныеМеханизмы.ВосстановлениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
			
		мТекущаяНастройка = Результат;
		ВосстановитьНастройкиИзСтруктуры(Результат.СохраненнаяНастройка);
			
	Иначе
		
		мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;

КонецФункции // ВосстановитьНастройки()

Процедура СохранитьНастройки() Экспорт
	
	Перем СохраненнаяНастройка;
	
	СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
	СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Ложь);
	СтруктураНастройки.Вставить("СохранятьАвтоматически", Ложь);
	
	Результат = УниверсальныеМеханизмы.СохранениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
			
		мТекущаяНастройка = Результат;
			
	Иначе
		
		мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройки()

Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		СтруктураСНастройками = Новый Структура;
		
	КонецЕсли;
	
	СтруктураСНастройками.Вставить("ДатаНач", ДатаНач);
	СтруктураСНастройками.Вставить("ДатаКон", ДатаКон);
	СтруктураСНастройками.Вставить("Сценарий", Сценарий);
	СтруктураСНастройками.Вставить("ПланыПродаж", ПланыПродаж);
	СтруктураСНастройками.Вставить("ПланыПроизводства", ПланыПроизводства);
	СтруктураСНастройками.Вставить("ПланыЗакупок", ПланыЗакупок);
	СтруктураСНастройками.Вставить("РасширенноеПредставлениеДокументов", РасширенноеПредставлениеДокументов);
	СтруктураСНастройками.Вставить("ПолныйСоставПлана", ПолныйСоставПлана);
	СтруктураСНастройками.Вставить("АвтоматическийРасчетИсточниковОбеспечения", АвтоматическийРасчетИсточниковОбеспечения);
	СтруктураСНастройками.Вставить("АвтоматическийРасчетПотребности", АвтоматическийРасчетПотребности);
	СтруктураСНастройками.Вставить("ОтображатьГрафикРаботы", ОтображатьГрафикРаботы);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("ДатаНач", ДатаНач);
	СтруктураСНастройками.Свойство("ДатаКон", ДатаКон);
	СтруктураСНастройками.Свойство("Сценарий", Сценарий);
	СтруктураСНастройками.Свойство("ПланыПродаж", ПланыПродаж);
	СтруктураСНастройками.Свойство("ПланыПроизводства", ПланыПроизводства);
	СтруктураСНастройками.Свойство("ПланыЗакупок", ПланыЗакупок);
	СтруктураСНастройками.Свойство("РасширенноеПредставлениеДокументов", РасширенноеПредставлениеДокументов);
	СтруктураСНастройками.Свойство("ПолныйСоставПлана", ПолныйСоставПлана);
	СтруктураСНастройками.Свойство("АвтоматическийРасчетИсточниковОбеспечения", АвтоматическийРасчетИсточниковОбеспечения);
	СтруктураСНастройками.Свойство("АвтоматическийРасчетПотребности", АвтоматическийРасчетПотребности);
	СтруктураСНастройками.Свойство("ОтображатьГрафикРаботы", ОтображатьГрафикРаботы);
	
	Возврат Истина;
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьПериод() Экспорт
	
	ТекущаяПериодичность = ?(Сценарий.Периодичность.Пустая(), Перечисления.Периодичность.Месяц, Сценарий.Периодичность);
	
	ДатаНач = ТекущаяДата();
	ДатаКон = ТекущаяДата();
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаНач, " + Строка(ТекущаяПериодичность) + ", 1), " + Строка(ТекущаяПериодичность) + ") КАК ДатаНач,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаКон, " + Строка(ТекущаяПериодичность) + ", 1), " + Строка(ТекущаяПериодичность) + ") КАК ДатаКон");
		
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
		
	ДатаНач = Выборка.ДатаНач;
	ДатаКон = Выборка.ДатаКон;
	
КонецПроцедуры // УстановитьПериод()

Процедура ИнициализацияНастройкиПериода(ДатаНач, ДатаКон) Экспорт
	
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Интервал;
	мНастройкаПериода.УстановитьПериод(ДатаНач, ДатаКон);
	
	Если ДатаНач = Дата("00010101000000") Тогда
		
		мНастройкаПериода.ВариантНачала = ВариантГраницыИнтервала.БезОграничения;
		
	ИначеЕсли НачалоДня(ДатаНач) = НачалоГода(ТекущаяДата()) Тогда
		
		мНастройкаПериода.ВариантНачала = ВариантГраницыИнтервала.Год;
		
	ИначеЕсли НачалоДня(ДатаНач) = НачалоКвартала(ТекущаяДата()) Тогда
		
		мНастройкаПериода.ВариантНачала = ВариантГраницыИнтервала.Квартал;
		
	ИначеЕсли НачалоДня(ДатаНач) = НачалоМесяца(ТекущаяДата()) Тогда
		
		мНастройкаПериода.ВариантНачала = ВариантГраницыИнтервала.Месяц;
		
	ИначеЕсли НачалоДня(ДатаНач) = НачалоНедели(ТекущаяДата()) Тогда
		
		мНастройкаПериода.ВариантНачала = ВариантГраницыИнтервала.Неделя;
		
	ИначеЕсли НачалоДня(ДатаНач) = НачалоДня(ТекущаяДата()) Тогда
		
		мНастройкаПериода.ВариантНачала = ВариантГраницыИнтервала.РабочаяДата;
		
	Иначе
		
		мНастройкаПериода.ДатаНачала = ДатаНач;
		мНастройкаПериода.ВариантНачала = ВариантГраницыИнтервала.КонкретнаяДата;
		
	КонецЕсли; 

	Если ДатаКон = Дата("00010101000000") Тогда
		
		мНастройкаПериода.ВариантОкончания = ВариантГраницыИнтервала.БезОграничения;
		
	ИначеЕсли КонецДня(ДатаКон) = КонецГода(ТекущаяДата()) Тогда
		
		мНастройкаПериода.ВариантОкончания = ВариантГраницыИнтервала.Год;
		
	ИначеЕсли КонецДня(ДатаКон) = КонецКвартала(ТекущаяДата()) Тогда
		
		мНастройкаПериода.ВариантОкончания = ВариантГраницыИнтервала.Квартал;
		
	ИначеЕсли КонецДня(ДатаКон) = КонецМесяца(ТекущаяДата()) Тогда
		
		мНастройкаПериода.ВариантОкончания = ВариантГраницыИнтервала.Месяц;
		
	ИначеЕсли КонецДня(ДатаКон) = КонецНедели(ТекущаяДата()) Тогда
		
		мНастройкаПериода.ВариантОкончания = ВариантГраницыИнтервала.Неделя;
		
	ИначеЕсли КонецДня(ДатаКон) = КонецДня(ТекущаяДата()) Тогда
		
		мНастройкаПериода.ВариантОкончания = ВариантГраницыИнтервала.РабочаяДата;
		
	Иначе
		
		мНастройкаПериода.ДатаОкончания    = ДатаКон;
		мНастройкаПериода.ВариантОкончания = ВариантГраницыИнтервала.КонкретнаяДата;
		
	КонецЕсли; 
	
КонецПроцедуры // ИнициализацияНастройкиПериода()

мСоответствиеКолонокПериодам = Новый Соответствие;
мСоответствиеПериодовКолонкам = Новый Соответствие;
мСоответствиеКолонокПериодамРедактирование = Новый Соответствие;
мСоответствиеПериодовКолонкамРедактирование = Новый Соответствие;

мСтруктураФорматаПолей = Новый Структура;
мСтруктураФорматаПолей.Вставить("День", "ДФ = дд.ММ.гггг");
мСтруктураФорматаПолей.Вставить("Неделя","ДФ = '""Неделя" + Символы.ПС + "с"" дд.ММ.гггг '");
мСтруктураФорматаПолей.Вставить("Декада","ДФ = '""Декада" + Символы.ПС + "с"" дд.ММ.гггг '");
мСтруктураФорматаПолей.Вставить("Месяц", "ДФ = 'ММММ" + Символы.ПС + "гггг ""г.""'");
мСтруктураФорматаПолей.Вставить("Квартал", "ДФ = 'к ""квартал" + Символы.ПС + """ гггг ""г.""'");
мСтруктураФорматаПолей.Вставить("Полугодие","ДФ = '""Полугодие" + Символы.ПС + "с"" дд.ММ.гггг'");
мСтруктураФорматаПолей.Вставить("Год", "ДФ = 'гггг ""г.""'");


мНастройкаПериода = Новый НастройкаПериода;

#КонецЕсли
