////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаУправленческогоУчета Экспорт;

// Соответствия, содержащая назначения свойств и категорий именам
Перем мСоответствиеНазначений Экспорт;

Перем мСтруктураДляОтбораПоКатегориям Экспорт; // предназначена для связи отборов Построителя с категориями из соединяемых таблиц

Перем мМетодРасчетаМатериальные Экспорт;
Перем мМетодРасчетаОплатаТруда Экспорт;
Перем мМетодРасчетаАмортизация Экспорт;
Перем мМетодРасчетаПрочие Экспорт;

Перем мМетодРасчетаОбщепроизводственные Экспорт;
Перем мМетодРасчетаАдминистративные Экспорт;  

Перем мМетодРасчетаБракВПроизводстве Экспорт;

Перем мМетодОпределенияСтоимости Экспорт;
Перем мТипЦен Экспорт;

Перем мДатаНачМатериальные Экспорт;
Перем мДатаНачАмортизация Экспорт;
Перем мДатаНачОплатаТруда Экспорт;
Перем мДатаНачПрочие Экспорт;

Перем мДатаКонМатериальные Экспорт;
Перем мДатаКонАмортизация Экспорт;
Перем мДатаКонОплатаТруда Экспорт;
Перем мДатаКонПрочие Экспорт;

Перем мДатаНачОбщепроизводственные Экспорт;
Перем мДатаНачАдминистративные Экспорт; 
Перем мДатаНачБракВПроизводстве Экспорт;

Перем мДатаКонОбщепроизводственные Экспорт;
Перем мДатаКонАдминистративные Экспорт;

Перем мДатаКонБракВПроизводстве Экспорт;

Перем мПроцентМатериальные Экспорт;
Перем мПроцентОплатаТруда Экспорт;
Перем мПроцентАмортизация Экспорт;
Перем мПроцентПрочие Экспорт;
	
Перем мПроцентОбщепроизводственные Экспорт;
Перем мПроцентАдминистративные Экспорт;   
Перем мПроцентБракВПроизводстве Экспорт;

Перем мСуммаМатериальные Экспорт;
Перем мСуммаОплатаТруда Экспорт;
Перем мСуммаАмортизация Экспорт;
Перем мСуммаПрочие Экспорт;
	
Перем мСуммаОбщепроизводственные Экспорт;
Перем мСуммаАдминистративные Экспорт;     
Перем мСуммаБракВПроизводстве Экспорт;

Перем мОкруглитьДоМатериальные Экспорт;
Перем мОкруглитьДоОплатаТруда Экспорт;
Перем мОкруглитьДоАмортизация Экспорт;
Перем мОкруглитьДоПрочие Экспорт;
	
Перем мОкруглитьДоОбщепроизводственные Экспорт;
Перем мОкруглитьДоАдминистративные Экспорт;   

Перем мОкруглитьДоБракВПроизводстве Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

#Если Клиент Тогда

// Выполняет настройку построителя отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтруктураПредставлениеПолей = Новый Структура;
	
	мСоответствиеНазначений = Новый Соответствие;
	
	МассивОтбора = Новый Массив;

	Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникНоменклатура.Ссылка 								КАК Номенклатура,
	|	СправочникХарактеристикаНоменклатуры.Ссылка 				КАК ХарактеристикаНоменклатуры,
	|	ОсновныеСпецификацииНоменклатуры.СпецификацияНоменклатуры 	КАК СпецификацияНоменклатуры
	|	//СВОЙСТВА
	|
	|{ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка.* 				КАК Номенклатура,
	|	СправочникНоменклатура.НоменклатурнаяГруппа.* 	КАК НоменклатурнаяГруппа,
	|	СправочникХарактеристикаНоменклатуры.Ссылка.* 	КАК ХарактеристикаНоменклатуры
	|	//СВОЙСТВА
	|}
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			СправочникХарактеристикаНоменклатуры.Владелец 	КАК Владелец,
	|			СправочникХарактеристикаНоменклатуры.Ссылка 	КАК Ссылка
	|		ИЗ
	|			Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристикаНоменклатуры
	|		{ГДЕ
	|			СправочникХарактеристикаНоменклатуры.Владелец.* КАК Номенклатура,
	|			СправочникХарактеристикаНоменклатуры.Ссылка.* 	КАК ХарактеристикаНоменклатуры
	|		}
	|
	|	ОБЪЕДИНИТЬ
	|
	|		ВЫБРАТЬ
	|			ОсновныеСпецификацииНоменклатуры.Номенклатура,
	|			ОсновныеСпецификацииНоменклатуры.ХарактеристикаНоменклатуры
	|		ИЗ
	|			РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(&Дата , ) КАК ОсновныеСпецификацииНоменклатуры
	|		ГДЕ
	|			ОсновныеСпецификацииНоменклатуры.ХарактеристикаНоменклатуры = &ПустаяХарактеристика
	|
	|		) КАК  СправочникХарактеристикаНоменклатуры
	|	ПО
	|		СправочникХарактеристикаНоменклатуры.Владелец = СправочникНоменклатура.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(&Дата , ) КАК ОсновныеСпецификацииНоменклатуры
	|	ПО
	|		ОсновныеСпецификацииНоменклатуры.Номенклатура 					= СправочникНоменклатура.Ссылка
	|		И (ОсновныеСпецификацииНоменклатуры.ХарактеристикаНоменклатуры 	= СправочникХарактеристикаНоменклатуры.Ссылка
	|		   ИЛИ ОсновныеСпецификацииНоменклатуры.ХарактеристикаНоменклатуры = &ПустаяХарактеристика)
	|
	|//СОЕДИНЕНИЯ
	|
	|{ГДЕ
	|	СправочникНоменклатура.ВидВоспроизводства 		КАК ВидВоспроизводства,
	|	СправочникНоменклатура.Ссылка.* 				КАК Номенклатура,
	|	СправочникНоменклатура.ВидНоменклатуры.* 		КАК ВидНоменклатуры,
	|	СправочникНоменклатура.НоменклатурнаяГруппа.* 	КАК НоменклатурнаяГруппа,
	|	СправочникХарактеристикаНоменклатуры.Ссылка.* 	КАК ХарактеристикаНоменклатуры
	|//СВОЙСТВА
	|//КАТЕГОРИИ
	|}
	|УПОРЯДОЧИТЬ ПО 
	|	СправочникНоменклатура.Ссылка.Наименование,
	|	СправочникХарактеристикаНоменклатуры.Ссылка.Наименование
	|
	|{УПОРЯДОЧИТЬ ПО 
	|	СправочникНоменклатура.Ссылка.* 				КАК Номенклатура,
	|	СправочникНоменклатура.НоменклатурнаяГруппа.* 	КАК НоменклатурнаяГруппа,
	|	СправочникХарактеристикаНоменклатуры.Ссылка.* 	КАК ХарактеристикаНоменклатуры
	|//СВОЙСТВА_ОБЩИЕ
	|}
	|";
	
	ПостроительОтчета.Параметры.Вставить("Дата", Дата);
	ПостроительОтчета.Параметры.Вставить("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ПостроительОтчета.Параметры.Вставить("ПустаяСпецификация", Справочники.СпецификацииНоменклатуры.ПустаяСсылка());
	
	// Соответствие имен полей в запросе и их представлений в отчете.
	СтруктураПредставлениеПолей = Новый Структура;
	СтруктураПредставлениеПолей.Вставить("ВидВоспроизводства",						"Вид воспроизводства");
	СтруктураПредставлениеПолей.Вставить("Номенклатура",							"Номенклатура");
	СтруктураПредставлениеПолей.Вставить("ХарактеристикаНоменклатуры",				"Характеристика номенклатуры");
	СтруктураПредставлениеПолей.Вставить("ВидНоменклатуры", 						"Вид номенклатуры");
	СтруктураПредставлениеПолей.Вставить("НоменклатурнаяГруппа", 					"Номенклатурная группа");
	
	Если ИспользоватьСвойстваИКатегории Тогда
		ТекстПоляСвойств= "";
		ТекстПоляКатегорий = "";

		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "СправочникНоменклатура.Ссылка";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "СправочникХарактеристикаНоменклатуры.Ссылка";
		СтрокаТаблицы.Представление = "Характеристика номенклатуры";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
		
		УправлениеОтчетами.ДобавитьВТекстСВойстваОбщие(Текст, ТекстПоляСвойств, "//СВОЙСТВА_ОБЩИЕ");
		
		УправлениеОтчетами.ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, 
				мСоответствиеНазначений, ПостроительОтчета.Параметры
				,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,мСтруктураДляОтбораПоКатегориям);
				
	КонецЕсли;
		
	ПостроительОтчета.Текст = Текст;
	
	Если ИспользоватьСвойстваИКатегории Тогда

		УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, мСоответствиеНазначений, СтруктураПредставлениеПолей);

	КонецЕсли;
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("ВидВоспроизводства");
	МассивОтбора.Добавить("Номенклатура");
	МассивОтбора.Добавить("ВидНоменклатуры");
	МассивОтбора.Добавить("НоменклатурнаяГруппа");
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Процедура производит формирование запроса и заполняет таблицу номенклатуры результатом.
//
Процедура ЗаполнитьТаблицуНоменклатуры() Экспорт
	
	// Проверка на пустые значения
	Если ПустаяСтрока(ПостроительОтчета.Текст) Тогда
		
		Предупреждение("Не определен запрос!");
		
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ УправлениеОтчетами.ЗадатьПараметрыОтбораПоКатегориям(ПостроительОтчета, мСтруктураДляОтбораПоКатегориям) Тогда
		Предупреждение("По одной категории нельзя устанавливать несколько отборов");
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	Если УправлениеОтчетами.ПроверитьПовторыИзмеренийПостроителя(ПостроительОтчета) = Ложь Тогда
		ЕстьОшибки = Истина;
		возврат;
	КонецЕсли;
	
	ПостроительОтчета.Выполнить();
	
	ТаблицаНоменклатуры.Загрузить(ПостроительОтчета.Результат.Выгрузить());

КонецПроцедуры // ЗаполнитьТаблицуНоменклатуры()

#КонецЕсли

// Процедура рассчитывает итоговую стоимость группы строк.
//
Процедура РассчитатьОбщуюСтоимость(СтрокаДереваЗначений) Экспорт
	
	Если СтрокаДереваЗначений.Уровень() = 0 Тогда
		СтрокаРодитель = СтрокаДереваЗначений;
	Иначе
		СтрокаРодитель = СтрокаДереваЗначений.Родитель;
	КонецЕсли;
	
	СуммаВсего = 0;
	Для Каждого Строка Из СтрокаРодитель.Строки Цикл
		СуммаВсего = СуммаВсего + Строка.Сумма;
	КонецЦикла;
	
	СтрокаРодитель.Сумма = СуммаВсего;
	
КонецПроцедуры // РассчитатьОбщуюСтоимость()

// Функция формирует запрос по фактическим затратам на выпуск продукции.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаФактическиеЗатратыРасширеннаяАналитика()
	
	ТекстЗапросаСКомментариями = "
	|ВЫБРАТЬ
	|	ЗатратыНаВыпуск.Номенклатура,
	|	ЗатратыНаВыпуск.ХарактеристикаНоменклатуры,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.ХарактерЗатрат,
	|	ЗатратыНаВыпуск.СтатьяЗатрат.ВидЗатрат		КАК ВидЗатрат,
	|	ЗатратыНаВыпуск.Затрата						КАК Затрата,
	|	СУММА(Сумма //ПроцентИзм //СуммаИзм) 		КАК Сумма
	|ИЗ (
	|	ВЫБРАТЬ
	|		РегистрАналитикаРаспределенияЗатрат.Продукция КАК Номенклатура,
	|		РегистрАналитикаРаспределенияЗатрат.ХарактеристикаПродукции	КАК ХарактеристикаНоменклатуры,
	|		РегистрАналитикаУчетаЗатрат.СтатьяЗатрат,
	|		РегистрАналитикаУчетаЗатрат.ХарактерЗатрат,
	|		РегистрАналитикаУчетаЗатрат.Затрата,
	|		СУММА(ВЫБОР КОГДА ВыпускПродукции.Количество ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			ЗатратыНаВыпуск.СтоимостьПриход / ВыпускПродукции.Количество
	|		КОНЕЦ) КАК Сумма
	|	ИЗ
	|		РегистрНакопления.УчетЗатрат%СуффиксРегл%.Обороты(//ДатаНач, //ДатаКон, Период,
	|			АналитикаВидаУчета В (
	|				ВЫБРАТЬ
	|					Ссылка
	|				ИЗ
	|					РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|				ГДЕ
	|					РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ЗатратыНаВыпуск)
	|					ИЛИ РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ЗатратыПоНаработке)
	|				)
	|			И АналитикаУчетаЗатрат В (
	|				ВЫБРАТЬ
	|					Ссылка
	|				ИЗ
	|					РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|				ГДЕ
	|					СтатьяЗатрат.СтатусМатериальныхЗатрат <> ЗНАЧЕНИЕ(Перечисление.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
	|					//ХарактерЗатратПроизводственные И ХарактерЗатрат = &ХарактерЗатратПроизводственные
	|					//ХарактерЗатратОбщепроизводственные И ХарактерЗатрат = &ХарактерЗатратОбщепроизводственные
    |					//ХарактерЗатратАдминистративные И ХарактерЗатрат = &ХарактерЗатратАдминистративные
	|					//ХарактерЗатратБрак И ХарактерЗатрат = &ХарактерЗатратБракВПроизводстве
	|					//ВидЗатрат
	|				)
	|			И АналитикаРаспределенияЗатрат В (
	|				ВЫБРАТЬ
	|					Ссылка
	|				ИЗ
	|					РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
	|				ГДЕ
	|					Продукция В (&МассивНоменклатуры)
	|					И ХарактеристикаПродукции В(&МассивХарактеристикНоменклатуры)
	|				)
	|
	|		) КАК ЗатратыНаВыпуск
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
	|	ПО
	|		ЗатратыНаВыпуск.АналитикаРаспределенияЗатрат = РегистрАналитикаРаспределенияЗатрат.Ссылка
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|	ПО
	|		ЗатратыНаВыпуск.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			РегистрАналитикаРаспределенияЗатрат.Продукция,
	|			РегистрАналитикаРаспределенияЗатрат.ХарактеристикаПродукции,
	|			СУММА(ВыпускПродукции.КоличествоПриход) КАК Количество
	|		ИЗ
	|			РегистрНакопления.УчетЗатрат%СуффиксРегл%.Обороты(//ДатаНач, //ДатаКон, Период, 
	|				АналитикаВидаУчета В (
	|					ВЫБРАТЬ
	|						Ссылка
	|					ИЗ
	|						РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|					ГДЕ
	|						РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Выпуск)
	|						ИЛИ РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Наработка)
	|					)
	|				И АналитикаРаспределенияЗатрат В (
	|					ВЫБРАТЬ
	|						Ссылка
	|					ИЗ
	|						РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
	|					ГДЕ
	|						Продукция В (&МассивНоменклатуры)
	|						И ХарактеристикаПродукции В(&МассивХарактеристикНоменклатуры)
	|					)
	|					
	|			) КАК ВыпускПродукции
	|			
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|				РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
	|			ПО
	|				ВыпускПродукции.АналитикаРаспределенияЗатрат = РегистрАналитикаРаспределенияЗатрат.Ссылка
	|			
	|		СГРУППИРОВАТЬ ПО
	|			РегистрАналитикаРаспределенияЗатрат.Продукция,
	|			РегистрАналитикаРаспределенияЗатрат.ХарактеристикаПродукции
	|			
	|		) КАК ВыпускПродукции
	|	ПО
	|		РегистрАналитикаРаспределенияЗатрат.Продукция = ВыпускПродукции.Продукция
	|		И РегистрАналитикаРаспределенияЗатрат.ХарактеристикаПродукции = ВыпускПродукции.ХарактеристикаПродукции
	|
	|	СГРУППИРОВАТЬ ПО
	|		РегистрАналитикаРаспределенияЗатрат.Продукция,
	|		РегистрАналитикаРаспределенияЗатрат.ХарактеристикаПродукции,
	|		РегистрАналитикаУчетаЗатрат.ХарактерЗатрат,
	|		РегистрАналитикаУчетаЗатрат.СтатьяЗатрат,
	|		РегистрАналитикаУчетаЗатрат.Затрата
	|		
	|	) КАК ЗатратыНаВыпуск
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗатратыНаВыпуск.Номенклатура,
	|	ЗатратыНаВыпуск.ХарактеристикаНоменклатуры,
	|	ЗатратыНаВыпуск.ХарактерЗатрат,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.Затрата
	|";
	
	РежимИспользованияРасширеннойАналитики = глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");
	
	Если РежимИспользованияРасширеннойАналитики = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
	Иначе
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете;
	КонецЕсли;
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями,
		ВидОтраженияВУчете
	);

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаФактическиеЗатратыРасширеннаяАналитика()

// Функция формирует запрос по фактическим затратам на выпуск продукции.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаФактическиеЗатраты()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗатратыНаВыпуск.Номенклатура				КАК Номенклатура,
	|	ЗатратыНаВыпуск.ХарактеристикаНоменклатуры	КАК ХарактеристикаНоменклатуры,
	|	ЗатратыНаВыпуск.СтатьяЗатрат				КАК СтатьяЗатрат,
	|	ЗатратыНаВыпуск.СтатьяЗатрат.ХарактерЗатрат	КАК ХарактерЗатрат,
	|	ЗатратыНаВыпуск.СтатьяЗатрат.ВидЗатрат		КАК ВидЗатрат,
	|	ЗатратыНаВыпуск.Затрата						КАК Затрата,
	|	СУММА(Сумма //ПроцентИзм //СуммаИзм) 		КАК Сумма
	|ИЗ (
	|	ВЫБРАТЬ
	|		ЗатратыНаВыпуск.Продукция					КАК Номенклатура,
	|		ЗатратыНаВыпуск.ХарактеристикаПродукции		КАК ХарактеристикаНоменклатуры,
	|		ЗатратыНаВыпуск.СтатьяЗатрат				КАК СтатьяЗатрат,
	|		ЗатратыНаВыпуск.Затрата						КАК Затрата,
	|		СУММА(ВЫБОР КОГДА ВыпускПродукции.Количество ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			ЗатратыНаВыпуск.Сумма / ВыпускПродукции.Количество
	|		КОНЕЦ) КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ЗатратыНаВыпускПродукции КАК ЗатратыНаВыпуск
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			ВыпускПродукции.Продукция					КАК Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции		КАК ХарактеристикаПродукции,
	|			СУММА(ВыпускПродукции.Количество)			КАК Количество
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукции КАК ВыпускПродукции
	|		ГДЕ
	|			ВыпускПродукции.Период МЕЖДУ //ДатаНач И //ДатаКон
	|			И ВыпускПродукции.КодОперации В (&КодыОперацийВыпуска)
	|			И ВыпускПродукции.Продукция В(&МассивНоменклатуры)
	|			И ВыпускПродукции.ХарактеристикаПродукции В(&МассивХарактеристикНоменклатуры)
	|		СГРУППИРОВАТЬ ПО
	|			ВыпускПродукции.Продукция,
	|			ВыпускПродукции.ХарактеристикаПродукции
	|		) КАК ВыпускПродукции
	|	ПО
	|		ЗатратыНаВыпуск.Продукция 				  = ВыпускПродукции.Продукция
	|		И ЗатратыНаВыпуск.ХарактеристикаПродукции = ВыпускПродукции.ХарактеристикаПродукции
	|
	|	ГДЕ
	|		ЗатратыНаВыпуск.Период МЕЖДУ //ДатаНач И //ДатаКон
	|		И ЗатратыНаВыпуск.КодОперации В (&КодыОпераций)
	|		И ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат <> &ПринятыеВПереработку
	|		И ЗатратыНаВыпуск.Продукция В(&МассивНоменклатуры)
	|		И ЗатратыНаВыпуск.ХарактеристикаПродукции В(&МассивХарактеристикНоменклатуры)
	|		//ХарактерЗатратПроизводственные И СтатьяЗатрат.ХарактерЗатрат = &ХарактерЗатратПроизводственные
	|		//ХарактерЗатратОбщепроизводственные И СтатьяЗатрат.ХарактерЗатрат = &ХарактерЗатратОбщепроизводственные
    |		//ХарактерЗатратАдминистративные И СтатьяЗатрат.ХарактерЗатрат = &ХарактерЗатратАдминистративные
	|		//ХарактерЗатратБрак И СтатьяЗатрат.ХарактерЗатрат = &ХарактерЗатратБракВПроизводстве
	|		//ВидЗатрат
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗатратыНаВыпуск.Продукция,
	|		ЗатратыНаВыпуск.ХарактеристикаПродукции,
	|		ЗатратыНаВыпуск.СтатьяЗатрат,
	|		ЗатратыНаВыпуск.Затрата
	|	) КАК ЗатратыНаВыпуск
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗатратыНаВыпуск.Номенклатура,
	|	ЗатратыНаВыпуск.ХарактеристикаНоменклатуры,
	|	ЗатратыНаВыпуск.СтатьяЗатрат,
	|	ЗатратыНаВыпуск.Затрата
	|";

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаФактическиеЗатраты()

// Процедура рассчитывает стоимость по данным регистра "Плановая себестоимость номенклатуры".
//
Процедура РассчитатьПоПлановойФактическойСебестоимости(ДеревоРезультат)
	
	Если (мМетодРасчетаМатериальные = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.НеРассчитывать
	      ИЛИ мМетодРасчетаМатериальные = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоНормативам)
	   И (мМетодРасчетаОплатаТруда = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.НеРассчитывать
	   	  ИЛИ мМетодРасчетаОплатаТруда = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоНормативам)
	   И мМетодРасчетаАмортизация = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.НеРассчитывать
	   И мМетодРасчетаПрочие = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.НеРассчитывать
	   И мМетодРасчетаОбщепроизводственные = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.НеРассчитывать
	   И мМетодРасчетаАдминистративные = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.НеРассчитывать
	   И мМетодРасчетаБракВПроизводстве = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.НеРассчитывать
	Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивНоменклатуры 				= ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
	МассивХарактеристикНоменклатуры = ТаблицаНоменклатуры.ВыгрузитьКолонку("ХарактеристикаНоменклатуры");
	
	ИсходныйТекст = "
	|ВЫБРАТЬ
	|	ПлановаяСебестоимость.Номенклатура					КАК Номенклатура,
	|	ПлановаяСебестоимость.ХарактеристикаНоменклатуры	КАК ХарактеристикаНоменклатуры,
	|	ПлановаяСебестоимость.СтатьяЗатрат					КАК СтатьяЗатрат,
	|	ПлановаяСебестоимость.СтатьяЗатрат.ХарактерЗатрат	КАК ХарактерЗатрат,
	|	ПлановаяСебестоимость.СтатьяЗатрат.ВидЗатрат		КАК ВидЗатрат,
	|	Неопределено										КАК Затрата,
	|	СУММА(Сумма //ПроцентИзм //СуммаИзм)				КАК Сумма
	|ИЗ (
	|	ВЫБРАТЬ
	|		ПлановаяСебестоимость.Номенклатура					КАК Номенклатура,
	|		ПлановаяСебестоимость.ХарактеристикаНоменклатуры	КАК ХарактеристикаНоменклатуры,
	|		ПлановаяСебестоимость.СтатьяЗатрат					КАК СтатьяЗатрат,
	|		СУММА(ПлановаяСебестоимость.Сумма)					КАК Сумма
	|	ИЗ
    |		РегистрСведений.ПлановаяСебестоимостьНоменклатуры.СрезПоследних(//Период,
	|			Номенклатура В(&МассивНоменклатуры)
	|			И ХарактеристикаНоменклатуры В(&МассивХарактеристикНоменклатуры)
	|			//ХарактерЗатратПроизводственные И СтатьяЗатрат.ХарактерЗатрат = &ХарактерЗатратПроизводственные
	|			//ХарактерЗатратОбщепроизводственные И СтатьяЗатрат.ХарактерЗатрат = &ХарактерЗатратОбщепроизводственные
    |			//ХарактерЗатратАдминистративные И СтатьяЗатрат.ХарактерЗатрат = &ХарактерЗатратАдминистративные
	|			//ХарактерЗатратБрак И СтатьяЗатрат.ХарактерЗатрат = &ХарактерЗатратБракВПроизводстве
	|			//ВидЗатрат 
	|		)КАК ПлановаяСебестоимость
	| 
	|	СГРУППИРОВАТЬ ПО
	|		ПлановаяСебестоимость.Номенклатура,
	|		ПлановаяСебестоимость.ХарактеристикаНоменклатуры,
	|		ПлановаяСебестоимость.СтатьяЗатрат
	|	) КАК ПлановаяСебестоимость
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановаяСебестоимость.Номенклатура,
	|	ПлановаяСебестоимость.ХарактеристикаНоменклатуры,
	|	ПлановаяСебестоимость.СтатьяЗатрат
	|";
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= мДатаКонМатериальные);
	
	Если ИспользоватьРасширеннуюАналитику Тогда
		ИсходныйТекстФакт = СформироватьТекстЗапросаФактическиеЗатратыРасширеннаяАналитика();
	Иначе
		ИсходныйТекстФакт = СформироватьТекстЗапросаФактическиеЗатраты();
	КонецЕсли;

	ТекстЗапроса = "";
		
	Если мМетодРасчетаМатериальные = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоПлановойСебестоимости Тогда
		Текст = СтрЗаменить(ИсходныйТекст, "//Период", "&ДатаНачМатериальные");
		Текст = СтрЗаменить(Текст, "//ХарактерЗатратПроизводственные", "");
		Текст = СтрЗаменить(Текст, "//ВидЗатрат", "И СтатьяЗатрат.ВидЗатрат = &ВидЗатратМатериальные");
		Если мПроцентМатериальные <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//ПроцентИзм", "+ Сумма*&ПроцентМатериальные/100");
		КонецЕсли;
		Если мСуммаМатериальные <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//СуммаИзм", "+ &СуммаМатериальные");
		КонецЕсли;
		ТекстЗапроса = Текст;
		
	ИначеЕсли мМетодРасчетаМатериальные = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоФактическойСебестоимости Тогда
		Текст = СтрЗаменить(ИсходныйТекстФакт, "//ДатаНач", "&ДатаНачМатериальные");
		Текст = СтрЗаменить(Текст, "//ДатаКон", "&ДатаКонМатериальные");
		Текст = СтрЗаменить(Текст, "//ХарактерЗатратПроизводственные", "");
		Текст = СтрЗаменить(Текст, "//ВидЗатрат", "И СтатьяЗатрат.ВидЗатрат = &ВидЗатратМатериальные");
		Если мПроцентМатериальные <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//ПроцентИзм", "+ Сумма*&ПроцентМатериальные/100");
		КонецЕсли;
		Если мСуммаМатериальные <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//СуммаИзм", "+ &СуммаМатериальные");
		КонецЕсли;
		ТекстЗапроса = Текст;	
		
	КонецЕсли;  
	
	Если мМетодРасчетаОплатаТруда = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоПлановойСебестоимости Тогда
		Текст = СтрЗаменить(ИсходныйТекст, "//Период", "&ДатаНачОплатаТруда");
		Текст = СтрЗаменить(Текст, "//ХарактерЗатратПроизводственные", "");
		Текст = СтрЗаменить(Текст, "//ВидЗатрат",    "И (СтатьяЗатрат.ВидЗатрат = &ВидЗатратОплатаТруда ИЛИ СтатьяЗатрат.ВидЗатрат = &ВидЗатратСоцОтчисления)");
		Если мПроцентОплатаТруда <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//ПроцентИзм", "+ Сумма*&ПроцентОплатаТруда/100");
		КонецЕсли;
		Если мСуммаОплатаТруда <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//СуммаИзм", "+ &СуммаОплатаТруда");
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Текст;
		
	ИначеЕсли мМетодРасчетаОплатаТруда = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоФактическойСебестоимости Тогда
		Текст = СтрЗаменить(ИсходныйТекстФакт, "//ДатаНач", "&ДатаНачОплатаТруда");
		Текст = СтрЗаменить(Текст, "//ДатаКон", "&ДатаКонОплатаТруда");
		Текст = СтрЗаменить(Текст, "//ХарактерЗатратПроизводственные", "");
		Текст = СтрЗаменить(Текст, "//ВидЗатрат", "И (СтатьяЗатрат.ВидЗатрат = &ВидЗатратОплатаТруда ИЛИ СтатьяЗатрат.ВидЗатрат = &ВидЗатратСоцОтчисления)");
		Если мПроцентОплатаТруда <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//ПроцентИзм", "+ Сумма*&ПроцентОплатаТруда/100");
		КонецЕсли;
		Если мСуммаОплатаТруда <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//СуммаИзм", "+ &СуммаОплатаТруда");
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Текст;
		
	КонецЕсли;  	
		
	Если мМетодРасчетаАмортизация = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоПлановойСебестоимости Тогда
		Текст = СтрЗаменить(ИсходныйТекст, "//Период", "&ДатаНачАмортизация");
		Текст = СтрЗаменить(Текст, "//ХарактерЗатратПроизводственные", "");
		Текст = СтрЗаменить(Текст, "//ВидЗатрат", "И СтатьяЗатрат.ВидЗатрат = &ВидЗатратАмортизация");
		Если мПроцентАмортизация <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//ПроцентИзм", "+ Сумма*&ПроцентАмортизация/100");
		КонецЕсли;
		Если мСуммаАмортизация <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//СуммаИзм", "+ &СуммаАмортизация");
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Текст;
		
	ИначеЕсли мМетодРасчетаАмортизация = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоФактическойСебестоимости Тогда
		Текст = СтрЗаменить(ИсходныйТекстФакт, "//ДатаНач", "&ДатаНачАмортизация");
		Текст = СтрЗаменить(Текст, "//ДатаКон", "&ДатаКонАмортизация");
		Текст = СтрЗаменить(Текст, "//ХарактерЗатратПроизводственные", "");
		Текст = СтрЗаменить(Текст, "//ВидЗатрат", "И СтатьяЗатрат.ВидЗатрат = &ВидЗатратАмортизация");
		Если мПроцентАмортизация <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//ПроцентИзм", "+ Сумма*&ПроцентАмортизация/100");
		КонецЕсли;
		Если мСуммаАмортизация <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//СуммаИзм", "+ &СуммаАмортизация");
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Текст;
	
	КонецЕсли;
	
	Если мМетодРасчетаПрочие = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоПлановойСебестоимости Тогда
		Текст = СтрЗаменить(ИсходныйТекст, "//Период", "&ДатаНачПрочие");
		Текст = СтрЗаменить(Текст, "//ХарактерЗатратПроизводственные", "");
		Текст = СтрЗаменить(Текст, "//ВидЗатрат", "И СтатьяЗатрат.ВидЗатрат = &ВидЗатратПрочие");
		Если мПроцентПрочие <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//ПроцентИзм", "+ Сумма*&ПроцентПрочие/100");
		КонецЕсли;
		Если мСуммаПрочие <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//СуммаИзм", "+ &СуммаПрочие");
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Текст;
	ИначеЕсли мМетодРасчетаПрочие = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоФактическойСебестоимости Тогда
		Текст = СтрЗаменить(ИсходныйТекстФакт, "//ДатаНач", "&ДатаНачПрочие");
		Текст = СтрЗаменить(Текст, "//ДатаКон", "&ДатаКонПрочие");
		Текст = СтрЗаменить(Текст, "//ХарактерЗатратПроизводственные", "");
		Текст = СтрЗаменить(Текст, "//ВидЗатрат", "И СтатьяЗатрат.ВидЗатрат = &ВидЗатратПрочие");
		Если мПроцентПрочие <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//ПроцентИзм", "+ Сумма*&ПроцентПрочие/100");
		КонецЕсли;
		Если мСуммаПрочие <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//СуммаИзм", "+ &СуммаПрочие");
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Текст;

	КонецЕсли;
	
	Если мМетодРасчетаОбщепроизводственные = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоПлановойСебестоимости Тогда
		Текст = СтрЗаменить(ИсходныйТекст, "//Период", "&ДатаНачОбщепроизводственные");
		Текст = СтрЗаменить(Текст, "//ХарактерЗатратОбщепроизводственные", "");
		Если мПроцентОбщепроизводственные <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//ПроцентИзм", "+ Сумма*&ПроцентОбщепроизводственные/100");
		КонецЕсли;
		Если мСуммаОбщепроизводственные <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//СуммаИзм", "+ &СуммаОбщепроизводственные");
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Текст;
		
	ИначеЕсли мМетодРасчетаОбщепроизводственные = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоФактическойСебестоимости Тогда
		Текст = СтрЗаменить(ИсходныйТекстФакт, "//ДатаНач", "&ДатаНачОбщепроизводственные");
		Текст = СтрЗаменить(Текст, "//ДатаКон", "&ДатаКонОбщепроизводственные");
		Текст = СтрЗаменить(Текст, "//ХарактерЗатратОбщепроизводственные", "");
		Если мПроцентОбщепроизводственные <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//ПроцентИзм", "+ Сумма*&ПроцентОбщепроизводственные/100");
		КонецЕсли;
		Если мСуммаОбщепроизводственные <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//СуммаИзм", "+ &СуммаОбщепроизводственные");
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Текст;
		
	КонецЕсли;  	
	
	//	КонецЕсли;

	Если мМетодРасчетаАдминистративные = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоПлановойСебестоимости Тогда
		Текст = СтрЗаменить(ИсходныйТекст, "//Период", 	"&ДатаНачАдминистративные");
		Текст = СтрЗаменить(Текст, "//ХарактерЗатратАдминистративные", "");
		Если мПроцентАдминистративные <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//ПроцентИзм", 	"+ Сумма*&ПроцентАдминистративные/100");
		КонецЕсли;
		Если мСуммаАдминистративные <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//СуммаИзм", 	"+ &СуммаАдминистративные");
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Текст;
	
	ИначеЕсли мМетодРасчетаАдминистративные = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоФактическойСебестоимости Тогда
		Текст = СтрЗаменить(ИсходныйТекстФакт, "//ДатаНач", "&ДатаНачАдминистративные");
		Текст = СтрЗаменить(Текст, "//ДатаКон", 		"&ДатаКонАдминистративные");
		Текст = СтрЗаменить(Текст, "//ХарактерЗатратАдминистративные", "");

		Если мПроцентАдминистративные <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//ПроцентИзм", 	"+ Сумма*&ПроцентАдминистративные/100");
		КонецЕсли;
		Если мСуммаАдминистративные <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//СуммаИзм", 	"+ &СуммаАдминистративные");
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Текст;
		
	КонецЕсли; 	

	Если мМетодРасчетаБракВПроизводстве = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоПлановойСебестоимости Тогда
		Текст = СтрЗаменить(ИсходныйТекст, "//Период", "&ДатаНачБракВПроизводстве");
		Текст = СтрЗаменить(Текст, "//ХарактерЗатратБрак", "");
		Если мПроцентБракВПроизводстве <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//ПроцентИзм", "+ Сумма*&ПроцентБракВПроизводстве/100");
		КонецЕсли;
		Если мСуммаБракВПроизводстве <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//СуммаИзм", "+ &СуммаБракВПроизводстве");
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Текст;
		
	ИначеЕсли мМетодРасчетаБракВПроизводстве = Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоФактическойСебестоимости Тогда
		Текст = СтрЗаменить(ИсходныйТекстФакт, "//ДатаНач", "&ДатаНачБракВПроизводстве");
		Текст = СтрЗаменить(Текст, "//ДатаКон", "&ДатаКонБракВПроизводстве");
		Текст = СтрЗаменить(Текст, "//ХарактерЗатратБрак", "");
		Если мПроцентБракВПроизводстве <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//ПроцентИзм", "+ Сумма*&ПроцентБракВПроизводстве/100");
		КонецЕсли;
		Если мСуммаБракВПроизводстве <> 0 Тогда
			Текст = СтрЗаменить(Текст, "//СуммаИзм", "+ &СуммаБракВПроизводстве");
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Текст;
		
	КонецЕсли;  
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СуммаИзм", 	 "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПроцентИзм", "");
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИТОГИ 
	|   СУММА(Сумма) 
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивНоменклатуры", 				МассивНоменклатуры);
	Запрос.УстановитьПараметр("МассивХарактеристикНоменклатуры", 	МассивХарактеристикНоменклатуры);
	
	Запрос.УстановитьПараметр("ХарактерЗатратПроизводственные", 	Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	Запрос.УстановитьПараметр("ХарактерЗатратОбщепроизводственные", Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
	Запрос.УстановитьПараметр("ХарактерЗатратАдминистративные", 	Перечисления.ХарактерЗатрат.АдминистративныеРасходы);
	Запрос.УстановитьПараметр("ХарактерЗатратБракВПроизводстве", 	Перечисления.ХарактерЗатрат.БракВПроизводстве);
	
	Запрос.УстановитьПараметр("ВидЗатратМатериальные", 				Перечисления.ВидыЗатрат.Материальные);
	Запрос.УстановитьПараметр("ВидЗатратОплатаТруда", 				Перечисления.ВидыЗатрат.ОплатаТруда);
	Запрос.УстановитьПараметр("ВидЗатратСоцОтчисления",				Перечисления.ВидыЗатрат.ОтчисленияНаСоциальныеНужды);
	Запрос.УстановитьПараметр("ВидЗатратАмортизация", 				Перечисления.ВидыЗатрат.Амортизация);
	Запрос.УстановитьПараметр("ВидЗатратПрочие", 					Перечисления.ВидыЗатрат.Прочие);
	
	Запрос.УстановитьПараметр("ДатаНачМатериальные", 				мДатаНачМатериальные);
	Запрос.УстановитьПараметр("ДатаНачОплатаТруда", 				мДатаНачОплатаТруда);
	Запрос.УстановитьПараметр("ДатаНачАмортизация", 				мДатаНачАмортизация);
	Запрос.УстановитьПараметр("ДатаНачПрочие", 						мДатаНачПрочие);
	
	Запрос.УстановитьПараметр("ДатаКонМатериальные", 				КонецДня(мДатаКонМатериальные));
	Запрос.УстановитьПараметр("ДатаКонОплатаТруда", 				КонецДня(мДатаКонОплатаТруда));
	Запрос.УстановитьПараметр("ДатаКонАмортизация", 				КонецДня(мДатаКонАмортизация));
	Запрос.УстановитьПараметр("ДатаКонПрочие", 						КонецДня(мДатаКонПрочие));
	
	Запрос.УстановитьПараметр("ДатаНачОбщепроизводственные", 		мДатаНачОбщепроизводственные);
	Запрос.УстановитьПараметр("ДатаНачАдминистративные", 			мДатаНачАдминистративные);
	Запрос.УстановитьПараметр("ДатаНачБракВПроизводстве", 			мДатаНачБракВПроизводстве);
	
	Запрос.УстановитьПараметр("ДатаКонОбщепроизводственные", 		КонецДня(мДатаКонОбщепроизводственные));
	Запрос.УстановитьПараметр("ДатаКонАдминистративные", 			КонецДня(мДатаКонАдминистративные));
	Запрос.УстановитьПараметр("ДатаКонБракВПроизводстве", 			КонецДня(мДатаКонБракВПроизводстве));
	
	Запрос.УстановитьПараметр("ПроцентМатериальные", 				мПроцентМатериальные);
	Запрос.УстановитьПараметр("ПроцентОплатаТруда", 				мПроцентОплатаТруда);
	Запрос.УстановитьПараметр("ПроцентАмортизация", 				мПроцентАмортизация);
	Запрос.УстановитьПараметр("ПроцентПрочие", 						мПроцентПрочие);
	
	Запрос.УстановитьПараметр("ПроцентОбщепроизводственные", 		мПроцентОбщепроизводственные);
	Запрос.УстановитьПараметр("ПроцентАдминистративные", 			мПроцентАдминистративные);
	Запрос.УстановитьПараметр("ПроцентБракВПроизводстве", 			мПроцентБракВПроизводстве);
	
	Запрос.УстановитьПараметр("СуммаМатериальные", 					мСуммаМатериальные);
	Запрос.УстановитьПараметр("СуммаОплатаТруда", 					мСуммаОплатаТруда);
	Запрос.УстановитьПараметр("СуммаАмортизация", 					мСуммаАмортизация);
	Запрос.УстановитьПараметр("СуммаПрочие", 						мСуммаПрочие);
	
	Запрос.УстановитьПараметр("СуммаОбщепроизводственные", 			мСуммаОбщепроизводственные);
	Запрос.УстановитьПараметр("СуммаАдминистративные",	 			мСуммаАдминистративные);
	Запрос.УстановитьПараметр("СуммаБракВПроизводстве", 			мСуммаБракВПроизводстве);
	
	МассивКодовОпераций = Новый Массив;
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ОтрицательныеЗатраты);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ФактСебестоимостьБракВПроизводстве);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ФактСебестоимостьОбщепроизводственныеРасходы);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ФактСебестоимостьАдминистративныеРасходы);	
	Запрос.УстановитьПараметр("КодыОпераций", МассивКодовОпераций);
	                           
	МассивКодовОперацийВыпуска = Новый Массив;
	МассивКодовОперацийВыпуска.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнешниеУслуги);
	МассивКодовОперацийВыпуска.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПостЗатраты);
	МассивКодовОперацийВыпуска.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаПроизводство);
	МассивКодовОперацийВыпуска.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксВнутрУслугиНаСчет);
	МассивКодовОперацийВыпуска.Добавить(Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад);
	Запрос.УстановитьПараметр("КодыОперацийВыпуска", МассивКодовОперацийВыпуска);
	
	Запрос.УстановитьПараметр("ПринятыеВПереработку", Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку);
	
	СтруктураПоиска = Новый Структура;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбходПоНоменклатуре = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоНоменклатуре.Следующий() Цикл
		ОбходПоХарактеристикам = ОбходПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоХарактеристикам.Следующий() Цикл
			
			Номенклатура 				= ОбходПоХарактеристикам.Номенклатура;
			ХарактеристикаНоменклатуры 	= ОбходПоХарактеристикам.ХарактеристикаНоменклатуры;
						
			СтруктураПоиска.Очистить();
			СтруктураПоиска.Вставить("НоменклатураСтатьяЗатрат", 	Номенклатура);
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", 	ХарактеристикаНоменклатуры);
			
			МассивСтрок = Новый Массив;
			Если ДеревоРезультат.Строки.Количество() <> 0 Тогда
				МассивСтрок = ДеревоРезультат.Строки.НайтиСтроки(СтруктураПоиска, Ложь);
			КонецЕсли;
			
			Если МассивСтрок.Количество() = 0 Тогда
				СтрокаНоменклатура = ДеревоРезультат.Строки.Добавить();
				СтрокаНоменклатура.НоменклатураСтатьяЗатрат   = Номенклатура;
				СтрокаНоменклатура.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
				СтрокаНоменклатура.Валюта = мВалютаУправленческогоУчета;
			Иначе
				СтрокаНоменклатура = МассивСтрок[0];
			КонецЕсли;
			
			СуммаПоСтроке = 0;
			Обход = ОбходПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Обход.Следующий() Цикл
				
				Сумма = Обход.Сумма;
								
				ОкруглитьДо = Неопределено;
				Если Обход.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
					Если Обход.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
						ОкруглитьДо = мОкруглитьДоМатериальные;
					ИначеЕсли Обход.ВидЗатрат = Перечисления.ВидыЗатрат.ОплатаТруда
						  ИЛИ Обход.ВидЗатрат = Перечисления.ВидыЗатрат.ОтчисленияНаСоциальныеНужды Тогда
						ОкруглитьДо = мОкруглитьДоОплатаТруда;
					ИначеЕсли Обход.ВидЗатрат = Перечисления.ВидыЗатрат.Амортизация Тогда
						ОкруглитьДо = мОкруглитьДоАмортизация;
					ИначеЕсли Обход.ВидЗатрат = Перечисления.ВидыЗатрат.Прочие Тогда
						ОкруглитьДо = мОкруглитьДоПрочие;
					КонецЕсли;
				ИначеЕсли Обход.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
				 	ОкруглитьДо = мОкруглитьДоОбщепроизводственные;
				ИначеЕсли Обход.ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
					ОкруглитьДо = мОкруглитьДоАдминистративные;				
				ИначеЕсли Обход.ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы Тогда
					ОкруглитьДо = мОкруглитьДоАдминистративные;
				ИначеЕсли Обход.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
					ОкруглитьДо = мОкруглитьДоБракВПроизводстве;
				КонецЕсли;
				
				Если ОкруглитьДо <> Неопределено Тогда
					Сумма = Ценообразование.ОкруглитьЦену(Сумма, 
			        	                  ОкруглитьДо, Истина);
				КонецЕсли;
				
				НоваяСтрока = СтрокаНоменклатура.Строки.Добавить();
				НоваяСтрока.НоменклатураСтатьяЗатрат 	= Обход.СтатьяЗатрат;
				НоваяСтрока.ХарактеристикаНоменклатуры 	= Обход.ХарактерЗатрат;
				НоваяСтрока.ВидЗатрат 					= Обход.ВидЗатрат;
				НоваяСтрока.Затрата 					= Обход.Затрата;
				НоваяСтрока.Сумма	 					= Сумма;
				НоваяСтрока.Валюта 						= мВалютаУправленческогоУчета;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // РассчитатьПоПлановойФактическойСебестоимости()

// Процедура рассчитывает плановую стоимость по нормативам.
//
Процедура РассчитатьПоНормативам(ДеревоРезультат)
	
	Если мМетодРасчетаМатериальные <> Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоНормативам Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим переменные.
	ТабПродукция = Новый ТаблицаЗначений;
	ТабПродукция.Колонки.Добавить("Номенклатура");
	ТабПродукция.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТабПродукция.Колонки.Добавить("ЕдиницаИзмерения");
	ТабПродукция.Колонки.Добавить("Количество");
	ТабПродукция.Колонки.Добавить("Спецификация");
	
	ТаблицаМатериалов = Неопределено;
	ТаблицаВозвратныхОтходов = Неопределено;
	
	Для Каждого Строка Из ТаблицаНоменклатуры Цикл
		Если НЕ ЗначениеЗаполнено(Строка.СпецификацияНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		
		ТабПродукция.Очистить();
		НоваяСтрока = ТабПродукция.Добавить();
		НоваяСтрока.Номенклатура 			   = Строка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
		НоваяСтрока.Спецификация 			   = Строка.СпецификацияНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Строка.Номенклатура.ЕдиницаХраненияОстатков;
		НоваяСтрока.Количество                 = 1;
			
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить( "Потребности");
		СтруктураПараметров.Вставить( "ВозвратныеОтходы");
					
		СтруктПараметры = Новый Структура;
		СтруктПараметры.Вставить( "ДатаСпецификации", Дата);
		СтруктПараметры.Вставить( "ПараметрыВыпуска", Неопределено);
						
		РазузлованиеНоменклатуры.ПолучитьПотребность(ТабПродукция, СтруктураПараметров, СтруктПараметры);
					
		ТабМатериалы = СтруктураПараметров["Потребности"];

		Если ТаблицаМатериалов = Неопределено Тогда
			ТаблицаМатериалов = ТабМатериалы.Скопировать();
		Иначе
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабМатериалы, ТаблицаМатериалов);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ВозвратныеОтходы") Тогда
			ТабОтходы = СтруктураПараметров.ВозвратныеОтходы;
			Если ТаблицаВозвратныхОтходов = Неопределено Тогда
				ТаблицаВозвратныхОтходов = СтруктураПараметров.ВозвратныеОтходы.Скопировать();
			Иначе
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СтруктураПараметров.ВозвратныеОтходы, ТаблицаВозвратныхОтходов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаМатериалов = Неопределено Тогда
		ТаблицаМатериалов = Новый ТаблицаЗначений;
		ТаблицаМатериалов.Колонки.Добавить("Номенклатура");
		ТаблицаМатериалов.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаМатериалов.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаМатериалов.Колонки.Добавить("Количество");
		ТаблицаМатериалов.Колонки.Добавить("Спецификация");
		ТаблицаМатериалов.Колонки.Добавить("Материал");
		ТаблицаМатериалов.Колонки.Добавить("ХарактеристикаМатериала");
		ТаблицаМатериалов.Колонки.Добавить("КоличествоМатериала");
		ТаблицаМатериалов.Колонки.Добавить("ЕдиницаИзмеренияМатериала");
		ТаблицаМатериалов.Колонки.Добавить("СтатьяЗатрат");
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаНоменклатуры Цикл
		Если ЗначениеЗаполнено(Строка.СпецификацияНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаМатериалов.Добавить();
		НоваяСтрока.Номенклатура 			   	= Строка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры 	= Строка.ХарактеристикаНоменклатуры;
		НоваяСтрока.Количество					= 1;
		НоваяСтрока.ЕдиницаИзмерения			= Строка.Номенклатура.ЕдиницаХраненияОстатков;
		НоваяСтрока.Спецификация				= Справочники.СпецификацииНоменклатуры.ПустаяСсылка();
		
		НоваяСтрока.Материал 			   		= Строка.Номенклатура;
		НоваяСтрока.ХарактеристикаМатериала 	= Строка.ХарактеристикаНоменклатуры;
		НоваяСтрока.КоличествоМатериала			= 1;
		НоваяСтрока.ЕдиницаИзмеренияМатериала	= Строка.Номенклатура.ЕдиницаХраненияОстатков;
		НоваяСтрока.СтатьяЗатрат				= Строка.Номенклатура.СтатьяЗатрат;
		
	КонецЦикла;
	
	ТаблицаМатериалов.Колонки.Добавить("Сумма");
	
	МассивНоменклатуры 				= ТаблицаМатериалов.ВыгрузитьКолонку("Материал");
	МассивХарактеристикНоменклатуры = ТаблицаМатериалов.ВыгрузитьКолонку("ХарактеристикаМатериала");
	
	ТекстЦеныНоменклатуры = "
	|ВЫБРАТЬ
	|	Номенклатура				КАК Номенклатура,
	|	ХарактеристикаНоменклатуры	КАК ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	СУММА(Сумма //ПроцентИзм //СуммаИзм) КАК Сумма
	|ИЗ (
	|	ВЫБРАТЬ
	|		РегистрЦены.Номенклатура				КАК Номенклатура,
	|		РегистрЦены.ХарактеристикаНоменклатуры	КАК ХарактеристикаНоменклатуры,
	|		РегистрЦены.ЕдиницаИзмерения			КАК ЕдиницаИзмерения,
	|		РегистрЦены.Цена * КурсыВалют.Курс * &КратУпр / (&КурсУпр * КурсыВалют.Кратность)КАК Сумма
	|	ИЗ 
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаНач, 
	|									Номенклатура В(&МассивНоменклатуры)
	|									И ХарактеристикаНоменклатуры В(&МассивХарактеристикНоменклатуры)
	|									И ТипЦен = &ТипЦен
	|									) КАК РегистрЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.КурсыВалют.СрезПоследних(&ДатаНач, ) КАК КурсыВалют
	|		ПО
	|			РегистрЦены.Валюта = КурсыВалют.Валюта
	|	) КАК Цены
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения.Коэффициент
	|";
	
	ТекстЦеныПоступление = "
	|ВЫБРАТЬ
	|	Номенклатура				КАК Номенклатура,
	|	ХарактеристикаНоменклатуры	КАК ХарактеристикаНоменклатуры,
	|	Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	СУММА(Сумма //ПроцентИзм //СуммаИзм) КАК Сумма
	|ИЗ (
	|	ВЫБРАТЬ
	|		ПартииТоваров.Номенклатура				КАК Номенклатура,
	|		ПартииТоваров.ХарактеристикаНоменклатуры	КАК ХарактеристикаНоменклатуры,
	|		СУММА(	ВЫБОР КОГДА ПартииТоваров.КоличествоПриход = 0 ТОГДА
	|					0
	|				ИНАЧЕ
	|					ПартииТоваров.СтоимостьПриход / ПартииТоваров.КоличествоПриход
	|				КОНЕЦ) КАК Сумма
	|	ИЗ 
	|		РегистрНакопления.ПартииТоваровНаСкладах.Обороты(&ДатаНач, &ДатаКон, ,
	|												Номенклатура В(&МассивНоменклатуры)
	|												И ХарактеристикаНоменклатуры В(&МассивХарактеристикНоменклатуры)
	|												И СтатусПартии В(&МассивСтатусов)
	|												) КАК ПартииТоваров
	|	СГРУППИРОВАТЬ ПО
	|		ПартииТоваров.Номенклатура,
	|		ПартииТоваров.ХарактеристикаНоменклатуры
	|	) КАК ПартииТоваров
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|";
	
	ТекстЦеныСписание = "
	|ВЫБРАТЬ
	|	Номенклатура				КАК Номенклатура,
	|	ХарактеристикаНоменклатуры	КАК ХарактеристикаНоменклатуры,
	|	Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	СУММА(Сумма //ПроцентИзм //СуммаИзм) КАК Сумма
	|ИЗ (
	|	ВЫБРАТЬ
	|		НезавершенноеПроизводство.Затрата				КАК Номенклатура,
	|		НезавершенноеПроизводство.ХарактеристикаЗатраты	КАК ХарактеристикаНоменклатуры,
	|		СУММА(	ВЫБОР КОГДА НезавершенноеПроизводство.КоличествоПриход = 0 ТОГДА
	|					0
	|				ИНАЧЕ
	|					НезавершенноеПроизводство.СтоимостьПриход / НезавершенноеПроизводство.КоличествоПриход
	|				КОНЕЦ) КАК Сумма
	|	ИЗ 
	|		РегистрНакопления.НезавершенноеПроизводство.Обороты(&ДатаНач, &ДатаКон, ,
	|												Затрата В(&МассивНоменклатуры)
	|												И ХарактеристикаЗатраты В(&МассивХарактеристикНоменклатуры)
	|												И СтатьяЗатрат.ХарактерЗатрат = &ХарактерЗатрат
	|												И СтатьяЗатрат.ВидЗатрат = &ВидЗатрат
	|												) КАК НезавершенноеПроизводство
	|	СГРУППИРОВАТЬ ПО
	|		НезавершенноеПроизводство.Затрата,
	|		НезавершенноеПроизводство.ХарактеристикаЗатраты
	|	) КАК ПартииТоваров
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|";
	
	Запрос = Новый Запрос;
	
	Если мМетодОпределенияСтоимости = Перечисления.МетодыОпределенияСтоимости.ПоВыбранномуТипуЦен Тогда
		Текст = ТекстЦеныНоменклатуры;
	ИначеЕсли мМетодОпределенияСтоимости = Перечисления.МетодыОпределенияСтоимости.ПоСтоимостиПоступления Тогда
		Текст = ТекстЦеныПоступление;
	ИначеЕсли мМетодОпределенияСтоимости = Перечисления.МетодыОпределенияСтоимости.ПоСтоимостиСписанияВПроизводство Тогда
		Текст = ТекстЦеныСписание;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если мПроцентМатериальные <> 0 Тогда
		Текст = СтрЗаменить(Текст, "//ПроцентИзм", 	"+ Сумма*&ПроцентМатериальные/100");
	Иначе
		Текст = СтрЗаменить(Текст, "//ПроцентИзм", 	"");
	КонецЕсли;
	Если мСуммаМатериальные <> 0 Тогда
		Текст = СтрЗаменить(Текст, "//СуммаИзм", 	"+ &СуммаМатериальные");
	Иначе
		Текст = СтрЗаменить(Текст, "//СуммаИзм", 	"");
	КонецЕсли;
	Запрос.Текст = Текст;
	
	КурсВал   = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, мДатаНачМатериальные);
	КурсУпр   = КурсВал.Курс;
	КратУпр   = КурсВал.Кратность;
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("МассивХарактеристикНоменклатуры", МассивХарактеристикНоменклатуры);
	Запрос.УстановитьПараметр("ДатаНач", мДатаНачМатериальные);
	Запрос.УстановитьПараметр("ДатаКон", мДатаКонМатериальные);
	Запрос.УстановитьПараметр("КурсУпр", КурсУпр);
	Запрос.УстановитьПараметр("КратУпр", КратУпр);
	Запрос.УстановитьПараметр("ТипЦен",  мТипЦен);
	Запрос.УстановитьПараметр("ПроцентМатериальные", мПроцентМатериальные);
	Запрос.УстановитьПараметр("СуммаМатериальные", 	 мСуммаМатериальные);
	Запрос.УстановитьПараметр("ХарактерЗатрат", 	 Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	Запрос.УстановитьПараметр("ВидЗатрат", 	 		 Перечисления.ВидыЗатрат.Материальные);
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.СтатусыПартийТоваров.Купленный);
	МассивСтатусов.Добавить(Перечисления.СтатусыПартийТоваров.Продукция);
	Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	СтруктураПоиска = Новый Структура;
	
	Для Каждого Строка Из ТаблицаМатериалов Цикл
		
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Номенклатура", 				Строка.Материал);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", 	Строка.ХарактеристикаМатериала);
			
		МассивСтрок = ТаблицаРезультат.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() = 0 Тогда
			
			// Если не удалось найти цену, заданную с учетом характеристики,
			// попробуем найти цену, заданную без характеристики.
			Если ЗначениеЗаполнено(Строка.ХарактеристикаМатериала) Тогда
				
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				МассивСтрок = ТаблицаРезультат.НайтиСтроки(СтруктураПоиска);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Если нет строк с ценой для материала, переходим к следующей строке таблицы.
		Если МассивСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Цена = МассивСтрок[0].Сумма / ?(МассивСтрок[0].Коэффициент <> 0, МассивСтрок[0].Коэффициент, 1);
		
		Если ТипЗнч(Строка.Материал) <> Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.СтатьяЗатрат) Тогда
			Строка.СтатьяЗатрат = Строка.Материал.СтатьяЗатрат;
		КонецЕсли;
		
		Строка.Сумма = Строка.КоличествоМатериала * Цена * ?(Строка.ЕдиницаИзмеренияМатериала.Коэффициент <> 0, Строка.ЕдиницаИзмеренияМатериала.Коэффициент, 1);
		
	КонецЦикла;
	
	ТаблицаМатериалов.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СтатьяЗатрат, Материал", "Сумма");
	
	Если ТаблицаВозвратныхОтходов <> Неопределено Тогда
		ТаблицаВозвратныхОтходов.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СтатьяЗатрат, Материал", "Сумма");
		
		Для Каждого Строка Из ТаблицаВозвратныхОтходов Цикл
			Строка.Сумма = - Строка.Сумма;
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВозвратныхОтходов, ТаблицаМатериалов);
	КонецЕсли;
	
	ТекНоменклатура 			 = Справочники.Номенклатура.ПустаяСсылка();
	ТекХарактеристикаНоменклатуры = Справочники.Номенклатура.ПустаяСсылка();
	Для Каждого Строка Из ТаблицаМатериалов Цикл
		
		Номенклатура 				= Строка.Номенклатура;
		ХарактеристикаНоменклатуры 	= Строка.ХарактеристикаНоменклатуры;
			
		Если ТекНоменклатура <> Номенклатура
		 ИЛИ ТекХарактеристикаНоменклатуры <> ХарактеристикаНоменклатуры Тогда
		 
		 	ТекНоменклатура = Номенклатура;
			ТекХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		 
			СтруктураПоиска.Очистить();
			СтруктураПоиска.Вставить("НоменклатураСтатьяЗатрат", 	Номенклатура);
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", 	ХарактеристикаНоменклатуры);
		
			МассивСтрок = Новый Массив;
			Если ДеревоРезультат.Строки.Количество() <> 0 Тогда
				МассивСтрок = ДеревоРезультат.Строки.НайтиСтроки(СтруктураПоиска, Ложь);
			КонецЕсли;
		
			Если МассивСтрок.Количество() = 0 Тогда
				СтрокаНоменклатура = ДеревоРезультат.Строки.Добавить();
				СтрокаНоменклатура.НоменклатураСтатьяЗатрат   = Номенклатура;
				СтрокаНоменклатура.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
				СтрокаНоменклатура.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
				СтрокаНоменклатура.Валюта = мВалютаУправленческогоУчета;
			Иначе
				СтрокаНоменклатура = МассивСтрок[0];
			КонецЕсли;
			
		КонецЕсли;

		ОкруглитьДо = мОкруглитьДоМатериальные;
		Если ОкруглитьДо <> Неопределено Тогда
			Строка.Сумма = Ценообразование.ОкруглитьЦену(Строка.Сумма, ОкруглитьДо, Истина);
		КонецЕсли;
		
		Если Строка.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокаНоменклатура.Строки.Добавить();
		НоваяСтрока.НоменклатураСтатьяЗатрат 	= Строка.СтатьяЗатрат;
		НоваяСтрока.ХарактеристикаНоменклатуры 	= Строка.СтатьяЗатрат.ХарактерЗатрат;
		НоваяСтрока.ВидЗатрат 					= Строка.СтатьяЗатрат.ВидЗатрат;
		НоваяСтрока.Затрата 					= Строка.Материал;
		НоваяСтрока.Сумма	 					= Строка.Сумма;
		НоваяСтрока.Валюта 						= мВалютаУправленческогоУчета;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьПоНормативам()

// Функция возвращает тех. операции для указанных спецификаций
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - Продукция
//	ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика продукции
//	Спецификация - СправочникСсылка.СпецификацииНоменклатуры - Спецификация
//	
Функция ПолучитьТехОперации(
	Номенклатура,
	ХарактеристикаНоменклатуры,
	Спецификация
	)
	
	Текст = "
	|ВЫБРАТЬ
	|	СУММА(Спецификация.Количество * 
	|	(ВЫБОР КОГДА ЕдиницаИзмерения.Коэффициент = 0 ТОГДА
	|		1
	|	ИНАЧЕ
	|		ЕСТЬNULL(ЕдиницаИзмерения.Коэффициент, 1)
	|	КОНЕЦ)
	|	) КАК Количество,
	|	СУММА(Спецификация.ДоляСтоимости) 
	|	/ 
	|	МАКСИМУМ(
	|		ВЫБОР КОГДА СпецификацияВсего.ДоляСтоимости = 0 ТОГДА
	|			1
	|		ИНАЧЕ
	|			СпецификацияВсего.ДоляСтоимости
	|		КОНЕЦ) КАК Коэффициент
	|	
	|ПОМЕСТИТЬ ТаблицаВыходныхИзделий
	|ИЗ
	|	Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК Спецификация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			Спецификация.Ссылка,
	|			СУММА(Спецификация.ДоляСтоимости) КАК ДоляСтоимости
	|		ИЗ
	|			Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК Спецификация
	|		ГДЕ
	|			Спецификация.Ссылка = &Спецификация
	|		СГРУППИРОВАТЬ ПО
	|			Спецификация.Ссылка
	|			
	|		) КАК СпецификацияВсего
	|	ПО
	|		СпецификацияВсего.Ссылка = Спецификация.Ссылка
	|	
	|ГДЕ
	|	Спецификация.Ссылка = &Спецификация
	|	И Спецификация.Номенклатура = &Номенклатура
	|	И Спецификация.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|	И Спецификация.Количество <> 0
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	СтатьяЗатрат КАК СтатьяЗатрат,
	|	СУММА(
	|		Сумма /
	|		ЕСТЬNULL(ТаблицаВыходныхИзделий.Количество, 1) *
	|		ВЫБОР КОГДА ТаблицаВыходныхИзделий.Коэффициент = 0 ТОГДА
	|			1
	|		ИНАЧЕ
	|			ЕСТЬNULL(ТаблицаВыходныхИзделий.Коэффициент, 1)
	|		КОНЕЦ
	|	 	//ПроцентИзм
	|	 ) //СуммаИзм КАК Сумма
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТехнологическиеКарты.ТехнологическаяОперация.Валюта 								КАК Валюта,
	|		ТехнологическиеКарты.ТехнологическаяОперация.ОсновнаяСтатьяЗатратНаПроизводство 	КАК СтатьяЗатрат,
	|		СУММА(ТехнологическиеКарты.Количество * ТехнологическиеКарты.ТехнологическаяОперация.Расценка *
	|			ВЫБОР КОГДА ТехнологическиеКарты.ТехнологическаяОперация.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|				1
	|			ИНАЧЕ
	|				КурсыВалют.Курс * &Кратность / (&Курс * КурсыВалют.Кратность) 
	|			КОНЕЦ
	|		) КАК Сумма
	|	ИЗ
	|		Справочник.ТехнологическиеКартыПроизводства.Маршрут КАК ТехнологическиеКарты
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ТехнологическиеКартыСпецификацийПланирования.СрезПоследних(&КонДата, Спецификация = &Спецификация) КАК РегистрТехКарты
	|		ПО
	|			РегистрТехКарты.ТехнологическаяКарта = ТехнологическиеКарты.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.КурсыВалют.СрезПоследних(&КонДата, ) КАК КурсыВалют
	|		ПО
	|			КурсыВалют.Валюта = ТехнологическиеКарты.ТехнологическаяОперация.Валюта
	|			
	|	СГРУППИРОВАТЬ ПО
	|		ТехнологическиеКарты.ТехнологическаяОперация
	|	) КАК ТехнологическиеКарты
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаВыходныхИзделий КАК ТаблицаВыходныхИзделий
	|	ПО
	|		Истина
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатьяЗатрат,
	|	&СуммаОплатаТруда
	|
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ТаблицаВыходныхИзделий
	|";
	
	Если мПроцентОплатаТруда <> 0 Тогда
		Текст = СтрЗаменить(Текст, "//ПроцентИзм", 	"+ Сумма*&ПроцентОплатаТруда/100");
	Иначе
		Текст = СтрЗаменить(Текст, "//ПроцентИзм", 	"");
	КонецЕсли;
	Если мСуммаОплатаТруда <> 0 Тогда
		Текст = СтрЗаменить(Текст, "//СуммаИзм", 	"+ &СуммаОплатаТруда");
	Иначе
		Текст = СтрЗаменить(Текст, "//СуммаИзм", 	"");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = Текст;
	
	Запрос.УстановитьПараметр("КонДата", Новый Граница(мДатаНачОплатаТруда, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	
	Запрос.УстановитьПараметр("ПроцентОплатаТруда", мПроцентОплатаТруда);
	Запрос.УстановитьПараметр("СуммаОплатаТруда", 	мСуммаОплатаТруда);
	
	КурсВалютыУпр = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, мДатаНачОплатаТруда);
	Запрос.УстановитьПараметр("Курс", 		КурсВалютыУпр.Курс);
	Запрос.УстановитьПараметр("Кратность", 	КурсВалютыУпр.Кратность);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции // ПолучитьТехОперации()

// Процедура рассчитывает плановую стоимость по нормативам оплаты труда.
//
Процедура РассчитатьПоНормативамОплатаТруда(ДеревоРезультат)
	
	Если мМетодРасчетаОплатаТруда <> Перечисления.МетодыРасчетаЗначенияПлановойСебестоимости.ПоНормативам Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОплатаТруда = Новый ТаблицаЗначений;
	ТаблицаОплатаТруда.Колонки.Добавить("Номенклатура");
	ТаблицаОплатаТруда.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаОплатаТруда.Колонки.Добавить("СтатьяЗатрат");
	ТаблицаОплатаТруда.Колонки.Добавить("Сумма");
	
	КурсВалютыУпр = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, мДатаНачОплатаТруда);
	
	Для Каждого Строка Из ТаблицаНоменклатуры Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.СпецификацияНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		
		ТехОперации = ПолучитьТехОперации(
			Строка.Номенклатура,
			Строка.ХарактеристикаНоменклатуры,
			Строка.СпецификацияНоменклатуры
		);
		Если ТехОперации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТехОперации Из ТехОперации Цикл
			
			НоваяСтрока = ТаблицаОплатаТруда.Добавить();
			НоваяСтрока.Номенклатура 			   	= Строка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры 	= Строка.ХарактеристикаНоменклатуры;
			НоваяСтрока.СтатьяЗатрат 				= СтрокаТехОперации.СтатьяЗатрат;
			НоваяСтрока.Сумма 						= СтрокаТехОперации.Сумма;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаОплатаТруда.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СтатьяЗатрат", "Сумма");
	
	СтруктураПоиска = Новый Структура;
	
	ТекНоменклатура 			  = Справочники.Номенклатура.ПустаяСсылка();
	ТекХарактеристикаНоменклатуры = Справочники.Номенклатура.ПустаяСсылка();
	Для Каждого Строка Из ТаблицаОплатаТруда Цикл
		
		Номенклатура 				= Строка.Номенклатура;
		ХарактеристикаНоменклатуры 	= Строка.ХарактеристикаНоменклатуры;
			
		Если ТекНоменклатура <> Номенклатура
		 ИЛИ ТекХарактеристикаНоменклатуры <> ХарактеристикаНоменклатуры Тогда
		 
		 	ТекНоменклатура = Номенклатура;
			ТекХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		 
			СтруктураПоиска.Очистить();
			СтруктураПоиска.Вставить("НоменклатураСтатьяЗатрат", 	Номенклатура);
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", 	ХарактеристикаНоменклатуры);
		
			МассивСтрок = Новый Массив;
			Если ДеревоРезультат.Строки.Количество() <> 0 Тогда
				МассивСтрок = ДеревоРезультат.Строки.НайтиСтроки(СтруктураПоиска, Ложь);
			КонецЕсли;
		
			Если МассивСтрок.Количество() = 0 Тогда
				СтрокаНоменклатура = ДеревоРезультат.Строки.Добавить();
				СтрокаНоменклатура.НоменклатураСтатьяЗатрат   = Номенклатура;
				СтрокаНоменклатура.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
				СтрокаНоменклатура.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
				СтрокаНоменклатура.Валюта = мВалютаУправленческогоУчета;
			Иначе
				СтрокаНоменклатура = МассивСтрок[0];
			КонецЕсли;
			
		КонецЕсли;

		ОкруглитьДо = мОкруглитьДоОплатаТруда;
		Если ОкруглитьДо <> Неопределено Тогда
			Строка.Сумма = Ценообразование.ОкруглитьЦену(Строка.Сумма, ОкруглитьДо, Истина);
		КонецЕсли;
		
		Если Строка.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокаНоменклатура.Строки.Добавить();
		НоваяСтрока.НоменклатураСтатьяЗатрат 	= Строка.СтатьяЗатрат;
		НоваяСтрока.ХарактеристикаНоменклатуры 	= Строка.СтатьяЗатрат.ХарактерЗатрат;
		НоваяСтрока.ВидЗатрат 					= Строка.СтатьяЗатрат.ВидЗатрат;
		НоваяСтрока.Сумма	 					= Строка.Сумма;
		НоваяСтрока.Валюта 						= мВалютаУправленческогоУчета;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьПоНормативамОплатаТруда()

// Процедура рассчитывает плановую себестоимость.
//
Процедура РассчитатьСебестоимость(ДеревоРезультат) Экспорт
	
	ДеревоРезультат.Строки.Очистить();
	
	РассчитатьПоНормативам(ДеревоРезультат);
	РассчитатьПоНормативамОплатаТруда(ДеревоРезультат);
	
	РассчитатьПоПлановойФактическойСебестоимости(ДеревоРезультат);
	
	Для Каждого СтрокаДереваЗначений Из ДеревоРезультат.Строки Цикл
		РассчитатьОбщуюСтоимость(СтрокаДереваЗначений);
	КонецЦикла;
	
КонецПроцедуры // РассчитатьПлановуюСебестоимость()

// Процедура выводит строку расчета плановой себестоимости.
//
Процедура ВывестиСтрокуРасчетаПлановойСебестоимости(ТабДокумент, Макет, СтрокаДерева, Уровень);
	
	Если Уровень = 1 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Номенклатура");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(СтрокаДерева);
	Если Уровень = 1 Тогда
		ОбластьМакета.Параметры.НоменклатураСтатьяЗатрат = "" + СтрокаДерева.НоменклатураСтатьяЗатрат + " (" + СтрокаДерева.ЕдиницаИзмерения + ")";
	КонецЕсли;
	
	ОбластьСтрока = ТабДокумент.Вывести(ОбластьМакета, Уровень);
	ТабДокумент.Область(ОбластьСтрока.Верх,1+1).Отступ = Уровень - 1;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		
		Уровень = Уровень + 1;
	
		Для Каждого Строка Из СтрокаДерева.Строки Цикл
			
			ВывестиСтрокуРасчетаПлановойСебестоимости(ТабДокумент, Макет, Строка, Уровень);
			
		КонецЦикла;
		
		Уровень = Уровень - 1;
		
	КонецЕсли;
	
КонецПроцедуры // ВывестиСтрокуРасчетаПлановойСебестоимости()

#Если Клиент Тогда	
// Процедура производит вывод на печать дерева спецификаций.
//
Процедура ПечатьРасчетаПлановойСебестоимости(ДеревоРезультат, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетПлановойСебестоимости";

	Макет = ПолучитьМакет("РасчетПлановойСебестоимости");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Расчет плановой себестоимости";
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Уровень = 1;
	ТабДокумент.НачатьАвтогруппировкуСтрок();
	
	Для Каждого Строка Из ДеревоРезультат.Строки Цикл
		
		ВывестиСтрокуРасчетаПлановойСебестоимости(ТабДокумент, Макет, Строка, Уровень);
		
	КонецЦикла;
	
	ТабДокумент.ЗакончитьАвтогруппировкуСтрок();
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	ТабДокумент.Вывести(ОбластьМакета);
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Расчет плановой себестоимости");
	
КонецПроцедуры // ПечатьРасчетаПлановойСебестоимости()

#КонецЕсли

// Процедура производит запись в регистр сведений "Плановая себестоимость номенклатуры".
//
Процедура УстановитьПлановуюСебестоимость(ДеревоРезультат) Экспорт
	
	Если ДеревоРезультат.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Период = ОбщегоНазначения.ПолучитьРабочуюДату();
	#Если Клиент Тогда
		Если Не ВвестиДату(Период,"Дата установки плановой себестоимости", ЧастиДаты.Дата) Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
		
	
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПлановаяСебестоимость.Номенклатура					КАК Номенклатура,
	|	ПлановаяСебестоимость.ХарактеристикаНоменклатуры	КАК ХарактеристикаНоменклатуры,
	|	ПлановаяСебестоимость.СтатьяЗатрат					КАК СтатьяЗатрат,
	|	0													КАК НоваяСумма
	|ИЗ
	|	РегистрСведений.ПлановаяСебестоимостьНоменклатуры.СрезПоследних(&Период,
	|									Номенклатура В(&МассивНоменклатуры)
	|									И ХарактеристикаНоменклатуры В(&МассивХарактеристикНоменклатуры)
	|									)КАК ПлановаяСебестоимость
	|ГДЕ
	|	ПлановаяСебестоимость.Сумма <> 0
	|";
	
	МассивНоменклатуры 				= ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
	МассивХарактеристикНоменклатуры = ТаблицаНоменклатуры.ВыгрузитьКолонку("ХарактеристикаНоменклатуры");

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивНоменклатуры", 				МассивНоменклатуры);
	Запрос.УстановитьПараметр("МассивХарактеристикНоменклатуры", 	МассивХарактеристикНоменклатуры);
	Запрос.УстановитьПараметр("Период", 							Период);
	
	ТаблицаПлановойСебестоимости = Запрос.Выполнить().Выгрузить();
	
	СтруктураПоиска = Новый Структура;
		
	Для Каждого СтрокаНоменклатуры Из ДеревоРезультат.Строки Цикл
		
		Для Каждого Строка Из СтрокаНоменклатуры.Строки Цикл
			
			НоваяСтрока = ТаблицаПлановойСебестоимости.Добавить();
			НоваяСтрока.Номенклатура 				= СтрокаНоменклатуры.НоменклатураСтатьяЗатрат;
			НоваяСтрока.ХарактеристикаНоменклатуры 	= СтрокаНоменклатуры.ХарактеристикаНоменклатуры;
			НоваяСтрока.СтатьяЗатрат		 		= Строка.НоменклатураСтатьяЗатрат;
			НоваяСтрока.НоваяСумма		 			= Строка.Сумма;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаПлановойСебестоимости.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СтатьяЗатрат", "НоваяСумма");
	
	Для Каждого Строка Из ТаблицаПлановойСебестоимости Цикл
		
		НоваяЗапись = РегистрыСведений.ПлановаяСебестоимостьНоменклатуры.СоздатьМенеджерЗаписи();
		НоваяЗапись.Период = Период;
		НоваяЗапись.Номенклатура 				= Строка.Номенклатура;
		НоваяЗапись.ХарактеристикаНоменклатуры 	= Строка.ХарактеристикаНоменклатуры;
		НоваяЗапись.СтатьяЗатрат		 		= Строка.СтатьяЗатрат;
		НоваяЗапись.Сумма		 				= Строка.НоваяСумма;
		НоваяЗапись.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьПлановуюСебестоимость()

мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
