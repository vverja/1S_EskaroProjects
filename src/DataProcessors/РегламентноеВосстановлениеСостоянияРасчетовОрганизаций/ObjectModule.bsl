Перем мВалютаРегламентированногоУчета Экспорт;
Перем мКэшВидовСубконтоПоСчетам;

// Определяет рабочий период документа
//
// Параметры:
//  СтруктураПараметров - структура, содержащая набор параметров.
//
Функция ОпределитьПериод(ДатаКон) Экспорт

	// По последовательности определяем дату
	Периоды = Новый Структура("Приобретение,Реализация");

	Отбор = Новый Структура("Организация", Организация);
	Если АвансыПоПриобретению тогда
		Периоды.приобретение = Последовательности.РасчетыПоПриобретениюОрганизации.ПолучитьГраницу(Отбор);
		Если Периоды.приобретение.Дата>КонецДня(ДатаКон) тогда
			ОбщегоНазначения.СообщитьОбОшибке("Граница последовательности по приобретению организации <"+Строка(Организация)+"> больше чем дата обработки.
			|Восстановление расчетов по приобретению производиться не будет.");
		КонецЕсли;
	КонецЕсли;	
	Если АвансыПоРеализации тогда
		Периоды.Реализация = Последовательности.РасчетыПоРеализацииОрганизации.ПолучитьГраницу(Отбор);
		Если Периоды.Реализация.Дата>КонецДня(ДатаКон) тогда
			ОбщегоНазначения.СообщитьОбОшибке("Граница последовательности по реализации организации <"+Строка(Организация)+"> больше чем дата обработки.
			|Восстановление расчетов по реализации производиться не будет.");
		КонецЕсли;
	КонецЕсли;	
	Возврат  Периоды;
КонецФункции // ОпределитьПериод()

Процедура ВосстановитьПоследовательностиПоРасчетам() Экспорт
	Периоды  = ОпределитьПериод(ДатаАктуализации);
	мКэшВидовСубконтоПоСчетам = Неопределено;
	
	ВидыРегламентныхОпераций = Перечисления.ВидыРегламентныхОпераций;
	УдаляемыеВидыРегОпераций = Новый Массив();
	Если АвансыПоПриобретению тогда
		УдаляемыеВидыРегОпераций.Добавить(ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовПриобретение);
	КонецЕсли;
	Если АвансыПоРеализации тогда
		УдаляемыеВидыРегОпераций.Добавить(ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовРеализация);
	КонецЕсли;
	УдаляемыеВидыРегОпераций.Добавить(ВидыРегламентныхОпераций.КорректировкиПриВзаиморасчетахВВалюте);
	УдаляемыеВидыРегОпераций.Добавить(ВидыРегламентныхОпераций.ПереоценкаВалютныхСчетов);
	УдаляемыеВидыРегОпераций.Добавить(ВидыРегламентныхОпераций.СуммовыеРазницы);
	
	Если АвансыПоПриобретению Тогда
		
		МоментВремени = Периоды.Приобретение;
		ДатаНач = МоментВремени.Дата;
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.РасчетыПоПриобретениюОрганизации КАК РасчетыПоПриобретениюОрганизации
		|
		|ГДЕ
		|	РасчетыПоПриобретениюОрганизации.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетыПоПриобретениюОрганизации.Активность
		|	И РасчетыПоПриобретениюОрганизации.Организация = &Организация
		|	И НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасчетыПоПриобретениюОрганизации.Период,
		|	РасчетыПоПриобретениюОрганизации.Регистратор
		|
 		|ИТОГИ 
		|	МИНИМУМ(Период), 
		|	СУММА(СуммаСНДСВал),
		|	СУММА(СуммаСНДСРегл) 
		|ПО
		|	РасчетыПоПриобретениюОрганизации.Регистратор
		|";
		
		
		Запрос.УстановитьПараметр("НачалоПериода"	,ДатаНач );
		Запрос.УстановитьПараметр("КонецПериода"	,КонецДня(ДатаАктуализации));
		Запрос.УстановитьПараметр("Организация"		,Организация );
		
		Результат = Запрос.Выполнить();
		
		ТаблицаДвижений = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		ПоследовательностьДляРегистрации = Последовательности.РасчетыПоПриобретениюОрганизации;
		
		Результат = ОбработатьДвижения(ТаблицаДвижений, УдаляемыеВидыРегОпераций, ПоследовательностьДляРегистрации.СоздатьНаборЗаписей());
		
		Если Результат.Ошибка тогда
			ОбщегоНазначения.СообщитьОбОшибке("Организация <"+Организация+">: Обнаружена ошибка при проведении документа """+Результат.Документ+""".
			| Граница последовательности расчетов по приобретению установлена на "+Результат.Граница,,"Восстановление последовательности расчетов по приобретению");
			ПоследовательностьДляРегистрации.УстановитьГраницу(Новый МоментВремени(Результат.Граница,Результат.Документ),Новый Структура("Организация",Организация));
		Иначе
			#Если Клиент Тогда
			Сообщить("Организация <"+Организация+">: Восстановление последовательности расчетов по приобретению успешно завершено");		
			#КонецЕсли
			ПоследовательностьДляРегистрации.УстановитьГраницу(Новый МоментВремени(Результат.Граница),Новый Структура("Организация",Организация));
		КонецЕсли;

	КонецЕсли;
	
	Если АвансыПоРеализации Тогда
		МоментВремени = Периоды.Реализация;
		ДатаНач = МоментВремени.Дата;
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.РасчетыПоРеализацииОрганизации КАК РасчетыПоРеализацииОрганизации
		|
		|ГДЕ
		|	РасчетыПоРеализацииОрганизации.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетыПоРеализацииОрганизации.Активность
		|	И РасчетыПоРеализацииОрганизации.Организация = &Организация
		|	И НЕ РасчетыПоРеализацииОрганизации.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасчетыПоРеализацииОрганизации.Период,
		|	РасчетыПоРеализацииОрганизации.Регистратор
		|
 		|ИТОГИ 
		|	МИНИМУМ(Период), 
		|	СУММА(СуммаСНДСВал), 
		|	СУММА(СуммаСНДСРегл) 
		|ПО
		|	РасчетыПоРеализацииОрганизации.Регистратор
		|";
		
		
		Запрос.УстановитьПараметр("НачалоПериода"	,ДатаНач );
		Запрос.УстановитьПараметр("КонецПериода"	,КонецДня(ДатаАктуализации));
		Запрос.УстановитьПараметр("Организация"		,Организация );
		
		Результат = Запрос.Выполнить();
		
		ТаблицаДвижений = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		ПоследовательностьДляРегистрации = Последовательности.РасчетыПоРеализацииОрганизации;
		
		Результат = ОбработатьДвижения(ТаблицаДвижений, УдаляемыеВидыРегОпераций, ПоследовательностьДляРегистрации.СоздатьНаборЗаписей());
		
		Если Результат.Ошибка тогда
			ОбщегоНазначения.СообщитьОбОшибке("Организация <"+Организация+">: Обнаружена ошибка при проведении документа """+Результат.Документ+""".
			| Граница последовательности расчетов по реализации установлена на "+Результат.Граница,,"Восстановление последовательности расчетов по реализации");
			ПоследовательностьДляРегистрации.УстановитьГраницу(Новый МоментВремени(Результат.Граница,Результат.Документ),Новый Структура("Организация",Организация));
		Иначе
			#Если Клиент Тогда
			Сообщить("Организация <"+Организация+">: Восстановление последовательности расчетов по реализации успешно завершено");		
			#КонецЕсли
			ПоследовательностьДляРегистрации.УстановитьГраницу(Новый МоментВремени(Результат.Граница),Новый Структура("Организация",Организация));
		КонецЕсли;
	КонецЕсли;
	#Если Клиент Тогда
		Состояние("Организация <"+Организация+">: Корректировка движений успешна завершена.");
	#КонецЕсли

КонецПроцедуры // ВосстановитьПоследовательностиПоРасчетам

Функция ОбработатьДвижения(ТаблицаДвижений, УдаляемыеВидыРегОпераций, ПоследовательностьДляРегистрации)
	
	ЕстьОшибка = Ложь;
	ДокументОшибки = Неопределено;
	Граница = КонецДня(ДатаАктуализации);
	
	Для каждого Документ из ТаблицаДвижений.Строки Цикл
		СформированныеДвижения = Новый Структура();
		ВидДокумента = Документ.Строки[0].ВидДокумента;
 		НаправленияДвиженияДляДокументаДвиженияДенежныхСредств 	= Неопределено;
 		НаправленияДвиженияДляДокументаПриобретенияРеализации	= Неопределено;
		
		// Для корректировки долга требуется почти полное перепроведение
		Если ВидДокумента = "КорректировкаДолга" Тогда
			
			ДокументОбъект = Документ.Регистратор.ПолучитьОбъект();
			ДокументОбъект.РежимВосстановленияПоследовательностейРасчетов = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			Продолжить; 
			
 		КонецЕсли; 
		
		НаправленияДвиженияДляДокументаДвиженияДенежныхСредств 	= БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента).НаправлениеДвижения;
		НаправленияДвиженияДляДокументаПриобретенияРеализации	= БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента).НаправлениеДвижения;
		
		Если НЕ (НаправленияДвиженияДляДокументаДвиженияДенежныхСредств = Неопределено) тогда
			// Документ обрабатывается в блоке движений денежных средств			
			СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенегИзРегистраСведений(Документ.Строки,ТаблицаДвижений.Колонки);
			// Регистрация в последовательности
			ПоследовательностьДляРегистрации.Отбор.Регистратор.Установить(Документ.регистратор);
			ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();
			ЗаписьРегистрации.Период = Документ.Строки[0].Период;
			ЗаписьРегистрации.Организация = Организация;
			ПоследовательностьДляРегистрации.Записать();
			
			#Если Клиент Тогда
				Состояние("Корректировка движений документа: " + СтруктураПараметров.Заголовок);
			#КонецЕсли
			
			ПроводкиБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Хозрасчетный, Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиБУ, УдаляемыеВидыРегОпераций);
			
			СформированныеДвижения.Вставить("ПроводкиБУ", ПроводкиБУ);
			
			Если БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(СтруктураПараметров, СформированныеДвижения, мВалютаРегламентированногоУчета) = Ложь Тогда	
				ЕстьОшибка = Истина;
				Если ДокументОшибки = Неопределено тогда
					ДокументОшибки = Документ.Регистратор;
				КонецЕслИ;
				Граница = МиН(СтруктураПараметров.Период,Граница);
				Продолжить;
			КонецЕсли;
			Если СтруктураПараметров.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
				БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеОплата(СтруктураПараметров, мВалютаРегламентированногоУчета,,СформированныеДвижения.ПроводкиБУ,,);
			КонецЕсли;
 		ИначеЕсли НЕ (НаправленияДвиженияДляДокументаПриобретенияРеализации = Неопределено) тогда
			// Документ приобретения или реализации
			// Документ обрабатывается в блоке движений денежных средств			
			СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАвансаИзРегистраСведений(Документ.Строки,ТаблицаДвижений.Колонки);
			// Регистрация в последовательности
			ПоследовательностьДляРегистрации.Отбор.Регистратор.Установить(Документ.регистратор);
			ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();
			ЗаписьРегистрации.Период = Документ.Строки[0].Период;
			ЗаписьРегистрации.Организация = Организация;
			ПоследовательностьДляРегистрации.Записать();
			
			#Если Клиент Тогда
				Состояние("Корректировка движений документа: " + СтруктураПараметров.Заголовок);
			#КонецЕсли
			
			ПроводкиБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Хозрасчетный                           , Истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиБУ, УдаляемыеВидыРегОпераций);
			
			СформированныеДвижения.Вставить("ПроводкиБУ", ПроводкиБУ);
			БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметров, СформированныеДвижения, мВалютаРегламентированногоУчета);
			
			Если СтруктураПараметров.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
				БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеПриобретение(СтруктураПараметров,мВалютаРегламентированногоУчета,,СформированныеДвижения.ПроводкиБУ,,,,СформированныеДвижения);
			КонецЕсли;
		Иначе
			ЕстьОшибка = Истина;
			Если ДокументОшибки = Неопределено тогда
				ДокументОшибки = Документ.Регистратор;
			КонецЕслИ;
			Граница = МиН(Документ.Строки[0].Период,Граница);
			Продолжить;
		КонецЕсли;
		
		Если ПереоценкаВалютныхСчетовВДокументе Тогда
			//Учет курсовых разниц
			СтруктураПараметров = БухгалтерскийУчет.ПодготовкаСтруктурыПараметровДляПереоценкиСчетаИзРегистраСведений(Документ.Строки[0]);
			Если СформированныеДвижения.Свойство("ПроводкиБУ") = Ложь Тогда
				ПроводкиБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Хозрасчетный, Истина);
				СформированныеДвижения.Вставить("ПроводкиБУ", ПроводкиБУ);
			КонецЕсли;		
			Если (СтруктураПараметров.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда
				СтруктураПараметров.Вставить("Ссылка", СтруктураПараметров.Регистратор);
				ПроводкиБУ.Записать();
				БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(СтруктураПараметров, ПроводкиБУ, мВалютаРегламентированногоУчета, Истина);
				СформированныеДвижения.Вставить("ПроводкиБУ", ПроводкиБУ);
			КонецЕсли; // Учет курсовых разниц
		КонецЕсли;
		
		Для Каждого Движение Из СформированныеДвижения Цикл
			Движение.Значение.Записать();
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый Структура("Ошибка, Документ, Граница", ЕстьОшибка, ДокументОшибки, Граница);
	
КонецФункции // ОбработатьДвижения

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
