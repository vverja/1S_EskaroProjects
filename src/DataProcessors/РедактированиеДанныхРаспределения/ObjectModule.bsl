#Если Клиент Тогда
//НАСТРОЙКИ
//Переменные, чтобы "обмануть" механизмы работы с сохраненными настройками типовых отчетов
Перем РежимРедактированияНастройки 	Экспорт; // Такой реквизит должен быть у формы отчета
Перем ЭтоОтработкаРасшифровки 		Экспорт; // Такой реквизит должен быть у формы отчета

Перем ДанныеРасшифровки; 			//хранит данные расшифровки, обычно для этого используется свойство формы отчета, но у нас не форма отчета.
Перем МакетОформления;

Перем ЗначенияЗависимыхКолонок;	//Структура, ключи - имена колонок, значения в которой определяют значения в зависимых колонках.
								//Значения - Соответствие
								//	В соответствии: ключи - имена зависящих колонок
								//					значения - значения для подстановки в зависящие колонки


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ - МЕТОДЫ, ДУБЛИРУЮЩИЕ ОДНОИМЕННЫЕ МЕТОДЫ МОДУЛЕЙ
// ТиповыеОтчеты и СохранениеНастроек, но работающие не только с объектом
// "Отчет на базе шаблона типового отчета"

// Устанавливает настройку по-умолчанию в реквизит СохраненнаяНастройка
//
Процедура ПолучитьСохраненнуюНастройку()
	
	//Получим последнюю использованную настройку (настройку по-умолчанию).
	//Взято из 	ТиповыеОтчеты.УстановитьВариантПоУмолчанию, 
	//			ТиповыеОтчеты.ОбновитьТаблицуДоступныхНастроекПользователю,
	//			ТиповыеОтчеты.ПолучитьПоследнийИспользуемыйВариант
	
	//			ТиповыеОтчеты.ПолучитьПоследнийИспользуемыйВариант
	//ПолучитьПоследнийИспользуемыйВариант() можно было бы использовать, но она не экспортная
	Значение = ВосстановитьЗначение("ПоследниеИспользованныеНастройкиПользователя");
	
	Если Значение = Неопределено ИЛИ Значение[ИдентификаторДляСохраненияНастроек] = Неопределено Тогда
		Вариант = Справочники.СохраненныеНастройки.ПустаяСсылка();
	Иначе
		Вариант = Значение[ИдентификаторДляСохраненияНастроек];
	КонецЕсли;
	
	ТаблицаВариантовОтчета 	= ТиповыеОтчеты.ПолучитьТаблицуДоступныхВариантов(ИдентификаторДляСохраненияНастроек, глЗначениеПеременной("глТекущийПользователь"));
	НайденнаяНастройка		= ТаблицаВариантовОтчета.Найти(Вариант, "Ссылка");
	
	Если НайденнаяНастройка = Неопределено Тогда
		Если ТаблицаВариантовОтчета.Количество() > 0 Тогда
			СохраненнаяНастройка = ТаблицаВариантовОтчета[0].Ссылка;
		КонецЕсли;
	Иначе
		СохраненнаяНастройка = НайденнаяНастройка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Определяет возможность записи настройки отчета
//
// Параметры
//  ПроверяемаяСохраненнаяНастройка - ссылка на элемент справочника "СохраненныеНастройки",
//               возможность записи которого надо определить
//  ИдентификаторДляСохраненияНастроек - строка, идентификатор принадлежности настройки
//  
// Возвращаемое значение
//  Истина - можно записать,
//  Ложь - эту настройку записать нельзя
Функция ЗаписьОтчетаДоступна(ПроверяемаяСохраненнаяНастройка, ИдентификаторДляСохраненияНастроек)
	
	Если ПроверяемаяСохраненнаяНастройка.Пустая() Тогда
		// Основную настройку типового отчета сохранять нельзя
		Возврат Ложь;
	Иначе
		СписокДоступныхНастроек = ТиповыеОтчеты.ПолучитьСписокДоступныхВариантов(ИдентификаторДляСохраненияНастроек, глЗначениеПеременной("глТекущийПользователь"));
		Элемент = СписокДоступныхНастроек.НайтиПоЗначению(ПроверяемаяСохраненнаяНастройка);
	 	Возврат Элемент <> Неопределено И Элемент.Пометка ИЛИ РольДоступна("ПолныеПрава");
	КонецЕсли;
	
КонецФункции

// Открывает диалог сохранения текущей настройки
// Для непосредственного сохранения вызывается метод СохранитьНастройку()
Процедура СохранитьТекущуюНастройку(Форма)
	
	Если Не СохраненнаяНастройка.Пустая() И СохраненнаяНастройка.ПолучитьОбъект() = Неопределено Тогда
		// Вариант отчета удален. Сбрасываем вариант отчета на основной.
		СохраненнаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаписьОтчетаДоступна(СохраненнаяНастройка, ИдентификаторДляСохраненияНастроек) Тогда
		СохранитьНастройку();
	Иначе
		//Эту записать нельзя. Может быть можно новую?
		СохранитьТекущуюНастройкуКак(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Открывает диалог сохранения текущей настройки под другим именем
// Для непосредственного сохранения вызывается метод СохранитьНастройку()
Процедура СохранитьТекущуюНастройкуКак(Форма)
	
	//		в процедуру СохраненныеНастройки.ВыбратьНастройкуФормы() добавить параметры 
	//	СтруктураНастроек;
	//	ТипНастройки
	СохраненнаяМодифицированность = Форма.Модифицированность; //метод ВыбратьНастройкуФормы может менять модифицированность формы
	СохранениеНастроек.ВыбратьНастройкуФормы(СохраненнаяНастройка, Форма, ИдентификаторДляСохраненияНастроек, Истина);
	Модифицированность = СохраненнаяМодифицированность;
	
КонецПроцедуры

// Открывает диалог редактирования структуры отчета (форма "ФормаНастройки")
//
// Параметры
//  Форма - владелец открываемой формы
//
// Возвращаемое значение
//  Истина - настройки отредактированы
//  Ложь - настройки не отрадактированы
Функция РедактироватьСтруктуруОтчета(Форма)
	
	// Откроем форму настройки
	ФормаНастройки = ПолучитьФорму("ФормаНастройки", Форма);
	РезультатОткрытия = ФормаНастройки.ОткрытьМодально();

	//Проверим результат открытия
	Возврат РезультатОткрытия <> Неопределено;
	
КонецФункции

// Сохраняет ссылку на последнюю использованную настройку,
// чтобы использовать её как настройку по-умолчанию
Процедура СохранитьПоследнююИспользуемуюНастройку() Экспорт
	
	//Сохраним последнюю использованную настройку, чтобы в следующий раз открыть её же.
	//Copy-paste из ТиповыеОтчеты.СохранитьПоследнююИспользуемуюНастройку
	Значение = ВосстановитьЗначение("ПоследниеИспользованныеНастройкиПользователя");
	Если Значение = Неопределено ИЛИ ТипЗнч(Значение) <> Тип("Соответствие") Тогда
		Значение = Новый Соответствие;
	КонецЕсли;
	Значение[ИдентификаторДляСохраненияНастроек] = СохраненнаяНастройка;
	СохранитьЗначение("ПоследниеИспользованныеНастройкиПользователя", Значение);
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С НАСТРОЙКАМИ

// Убирает из настроек компоновки указанные группировки
Процедура ОтключитьГруппировки(СтруктураНастроек, ЛишниеПоля)
	
	//В качестве структуры настроек могут передаваться
	//коллекции элементов структур компоновки.
	//Т.е. такие типы, как 
	//	КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных
	//	КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных
	//	КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных 
	
	Для Каждого ЭлементСтруктуры Из СтруктураНастроек Цикл
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
			ОтключитьГруппировки(ЭлементСтруктуры.Колонки, ЛишниеПоля);
			ОтключитьГруппировки(ЭлементСтруктуры.Строки,  ЛишниеПоля);
			
		ИначеЕсли 	
			ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") ИЛИ
			ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") ИЛИ
			ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") 
			Тогда
			
			//Удаляем из полей группировки
			Для Каждого Поле Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ЛишниеПоля.Свойство(Поле.Поле) Тогда //Вообще Поле.Поле имеет не строковой тип. Но он должен однозначно приводиться к строке.
					Поле.Использование = Ложь;
				КонецЕсли;
			КонецЦикла;
				
			//Удаляем из вложенных группировок
			ОтключитьГруппировки(ЭлементСтруктуры.Структура, ЛишниеПоля);
		
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			
			ОтключитьГруппировки(ЭлементСтруктуры.Серии, 	ЛишниеПоля);
			ОтключитьГруппировки(ЭлементСтруктуры.Точки,  	ЛишниеПоля);
		
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			
			ОтключитьГруппировки(ЭлементСтруктуры.Настройки.Структура,  	ЛишниеПоля);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сохранение настройки компоновки в ИБ
Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("НастройкиКомпоновщика", КомпоновщикНастроек.ПолучитьНастройки());
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Применение полученной из ИБ настройки компоновки
Процедура ПрименитьНастройку() Экспорт
	
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
		
	КонецЕсли;
	
	// Отключим группировки, для которых нет данных
	
	// а. Найдем такие группировки
	НеиспользуемыеПоля = Новый Структура();
	Для Каждого Поле Из ОпциональныеПоля Цикл
		НетДанных = Истина;
		Для Каждого ДанныеСтроки Из ТаблицаДляРедактирования Цикл
			Если ЗначениеЗаполнено(ДанныеСтроки[Поле.Имя]) Тогда
				НетДанных = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НетДанных Тогда
			НеиспользуемыеПоля.Вставить(Поле.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// б. Отключим
	ОтключитьГруппировки(КомпоновщикНастроек.Настройки.Структура, НеиспользуемыеПоля);

КонецПроцедуры

// РАБОТА С ФОРМОЙ

Функция СохранитьИзмененияПриЗакрытии(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. 
		|Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Отмена, "Редактирование расхода материалов");
		Если 		Ответ = КодВозвратаДиалога.Да Тогда
			Возврат Истина;
		ИначеЕсли 	Ответ = КодВозвратаДиалога.Нет Тогда
			//пусть все идет как идет...
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

// Устаналивает заголовок формы
//
Процедура УстановитьЗаголовокФормы(Форма) Экспорт
	
	Форма.Заголовок = ЗаголовокФормы + ?(СохраненнаяНастройка.Пустая(),""," ["+СокрЛП(СохраненнаяНастройка)+"]");
	
КонецПроцедуры

// Добавляет кнопки на командную панель ДействияФормы,
// копируя их из формы обработки
Процедура ДобавитьКнопки(Форма, СписокКнопок, НачальнаяПозиция)
	
	ДобавленоКнопок = 0;
	
	ФормаИсточник = ПолучитьФорму("Редактирование");
	КнопкиИсточник = ФормаИсточник.ЭлементыФормы.ДействияФормы.Кнопки;
	Для Каждого ИмяКнопки Из Новый Структура(СписокКнопок) Цикл
		
		ТаблицаКнопок = Неопределено;
		ПолучитьДеревоКнопок(ТаблицаКнопок, КнопкиИсточник, ИмяКнопки.Ключ);
		
		Для Каждого ДанныеКнопки Из ТаблицаКнопок Цикл
			
			Если ДанныеКнопки.Родитель = Неопределено Тогда
				НоваяКнопка 	= Форма.ЭлементыФормы.ДействияФормы.Кнопки.Вставить(НачальнаяПозиция + ДобавленоКнопок);
				ДобавленоКнопок = ДобавленоКнопок + 1;
			Иначе
				Родитель 	= ТаблицаКнопок.Найти(ДанныеКнопки.Родитель,"Имя");
				НоваяКнопка = Родитель.НоваяКнопка.Кнопки.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяКнопка, ДанныеКнопки.Кнопка,,"Действие");
			
			Если НоваяКнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие Тогда
				НоваяКнопка.Действие = Новый Действие("КнопкаПанелиНажатие");
			КонецЕсли;
			
			ДанныеКнопки.НоваяКнопка = НоваяКнопка;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает данные о кнопках командной панели, включая вложенные в подменю
// Вызывает сама себя рекурсивно
//
// Параметры
//  ТаблицаКнопок - параметр, в который будет помещена таблица со сведениями о кнопках.
//                  Если передана такая таблица, то она будет дополнена.
//  КнопкиИсточник - коллекция кнопок, образующих подменю (Тип: КнопкиКоманднойПанели)
//  ИмяКнопки - имя кнопки-подменю текущего уровня
//  Родитель - имя кнопки верхнего уровня
Процедура ПолучитьДеревоКнопок(ТаблицаКнопок, КнопкиИсточник, ИмяКнопки, Родитель=Неопределено)
	
	Если ТаблицаКнопок = Неопределено Тогда
		ТаблицаКнопок = Новый ТаблицаЗначений;
		ТаблицаКнопок.Колонки.Добавить("Имя");
		ТаблицаКнопок.Колонки.Добавить("Кнопка");
		ТаблицаКнопок.Колонки.Добавить("Родитель");
		ТаблицаКнопок.Колонки.Добавить("НоваяКнопка");
	КонецЕсли;
	
	НоваяСтрока = ТаблицаКнопок.Добавить();
	НоваяСтрока.Имя 		= ИмяКнопки;
	НоваяСтрока.Кнопка		= КнопкиИсточник[ИмяКнопки];
	НоваяСтрока.Родитель	= Родитель;
	
	Если КнопкиИсточник[ИмяКнопки].ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
		Для Каждого Кнопка Из КнопкиИсточник[ИмяКнопки].Кнопки Цикл
			ПолучитьДеревоКнопок(ТаблицаКнопок, КнопкиИсточник[ИмяКнопки].Кнопки, Кнопка.Имя, ИмяКнопки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия одной из кнопок панели действий формы обработки или созданных на её основе форм
Процедура НажатиеКнопкиПанелиДействияФормы(Форма, Кнопка) Экспорт
	
	Если Кнопка.Имя = "РедактироватьСтруктуру" Тогда
		
		// Сохраним настройки на случай отмены редактирования
		СохраненныеНастройки = КомпоновщикНастроек.ПолучитьНастройки();

		Если РедактироватьСтруктуруОтчета(Форма) Тогда
			// Обновим форму
			ВывестиТаблицуДляРедактирования(Форма.ЭлементыФормы.ПолеРедактирования);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(СохраненныеНастройки);
		КонецЕсли;
		
	ИначеЕсли Кнопка.Имя = "РедактироватьПолномочия" Тогда
		
		Данные = Новый Структура("СохраненнаяНастройка", СохраненнаяНастройка);
		
		Если Не СохраненнаяНастройка.Пустая() Тогда
			
			Если СохраненнаяНастройка.ПолучитьОбъект() = Неопределено Тогда
				СохраненнаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка();
				Вопрос("Текущий вариант отчета удален.", РежимДиалогаВопрос.ОК);
			Иначе
				ФормаЭлемента = СохраненнаяНастройка.ПолучитьФорму(, Форма);
				ФормаЭлемента.ОткрытьМодально();
			КонецЕсли;

		Иначе
			Вопрос("Основной вариант не содержит описания и виден всем пользователям", РежимДиалогаВопрос.ОК);
		КонецЕсли;
		
	ИначеЕсли Кнопка.Имя = "СохранитьНастройку" Тогда
		
		СохранитьТекущуюНастройку(Форма);
		УстановитьЗаголовокФормы(Форма);
		
	ИначеЕсли Кнопка.Имя = "СкопироватьТекущуюНастройку" Тогда
		
		СохранитьТекущуюНастройкуКак(Форма);
		УстановитьЗаголовокФормы(Форма);
		
	ИначеЕсли Кнопка.Имя = "ВыбратьНастройку" Тогда
		
		СохранениеНастроек.ВыбратьНастройкуФормы(СохраненнаяНастройка, Форма, ИдентификаторДляСохраненияНастроек, Ложь);
		УстановитьЗаголовокФормы(Форма);
		ВывестиТаблицуДляРедактирования(Форма.ЭлементыФормы.ПолеРедактирования);
		
	ИначеЕсли Кнопка.Имя = "Справка" Тогда
		
		Форма.ОткрытьСправкуФормы();
		
	КонецЕсли;
	
КонецПроцедуры

//РАБОТА С ДАННЫМИ

// В таблице с колонками "Номенклатура,ЕдиницаИзмерения,Коэффициент,Количество"
//приводит строки с одинаковой номенклатурой к единице с наименьшим коэффициентом
//(соответственно пересчитывая количество)
Процедура СделатьОдинаковойЕдиницуИзмерения(Таблица, КолонкиКоличество = "Количество", КолонкаНоменклатура = "Номенклатура", КолонкаЕдиницаИзмерения = "ЕдиницаИзмерения", КолонкаКоэффициент = "Коэффициент") Экспорт
	
	Таблица.Сортировать(КолонкаНоменклатура + "," + КолонкаКоэффициент);
	
	ТекНоменклатура = Новый Структура();
	ТекНоменклатура.Вставить(КолонкаНоменклатура);
	ТекНоменклатура.Вставить(КолонкаЕдиницаИзмерения);
	ТекНоменклатура.Вставить(КолонкаКоэффициент);
	
	СтруктураКолонокКоличество = Новый Структура(КолонкиКоличество);
	
	Для Каждого ДанныеСтроки Из Таблица Цикл
		
		Если ДанныеСтроки[КолонкаКоэффициент] = 0 Тогда
			Для Каждого Колонка Из СтруктураКолонокКоличество Цикл
				ДанныеСтроки[Колонка.Ключ] = 0;
			КонецЦикла;
		Иначе
			Если ДанныеСтроки[КолонкаНоменклатура] <> ТекНоменклатура[КолонкаНоменклатура] Тогда
				ЗаполнитьЗначенияСвойств(ТекНоменклатура, ДанныеСтроки);
			Иначе
				
				Для Каждого Колонка Из СтруктураКолонокКоличество Цикл
					ДанныеСтроки[Колонка.Ключ] 		= ДанныеСтроки[Колонка.Ключ] * ДанныеСтроки[КолонкаКоэффициент] / ТекНоменклатура[КолонкаКоэффициент];
				КонецЦикла;
				
				ДанныеСтроки[КолонкаКоэффициент] 		= ТекНоменклатура[КолонкаКоэффициент];
				ДанныеСтроки[КолонкаЕдиницаИзмерения]	= ТекНоменклатура[КолонкаЕдиницаИзмерения];
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Находит набор данных в коллекции наборов данных по имени объекта
//
Функция НайтиНаборДанныхОбъект(НаборыДанных, ИмяОбъекта)
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
			
			//надо проверить имя объекта
			Если НаборДанных.ИмяОбъекта = ИмяОбъекта Тогда
				Возврат НаборДанных;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			
			//надо обойти глубже
			Значение = НайтиНаборДанныхОбъект(НаборДанных.Элементы, ИмяОбъекта);
			Если Значение <> Неопределено Тогда
				Возврат Значение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает ресурсы, входящие в набор данных, содержащий ИсходныеДанныеТаблицы
//
Функция ПолучитьРесурсы() Экспорт
	
	Ресурсы = Новый Массив;
	
	//1. Найдем набор данных, содержащий ИсходныеДанныеТаблицы
	НаборДанных = НайтиНаборДанныхОбъект(СхемаКомпоновки.НаборыДанных, "ИсходныеДанныеТаблицы");
	
	Если НаборДанных = Неопределено Тогда
		Возврат Ресурсы;
	КонецЕсли;
	
	//2. Найдем среди полей итога те поля, которые входят в указанный набор данных
	Для Каждого ПолеИтога Из СхемаКомпоновки.ПоляИтога Цикл
		//ищем перебором, так как нужно искать по пути к данным, а не по имени поля
		Для Каждого Поле Из НаборДанных.Поля Цикл
			Если ПолеИтога.ПутьКДанным = Поле.ПутьКДанным Тогда
				Ресурсы.Добавить(ПолеИтога.ПутьКДанным);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ресурсы;
	
КонецФункции

// Выводит результат компоновки с скомпонованной таблице для редактирования на табличное поле.
//
Процедура ВывестиТаблицуДляРедактирования(ПолеРедактирования) Экспорт
	
	//Исходные внешние данные (т.е. те, что не получаются запросами внутри схемы компоновки данных)
	НаборыДанных = Новый Структура();
	НаборыДанных.Вставить("ИсходныеДанныеТаблицы", 		ТаблицаДляРедактирования);
	
	//Подготовим макет, который учтет настройки схемы.
	Настройки 			= КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки 	= КомпоновщикМакета.Выполнить(СхемаКомпоновки, Настройки, ДанныеРасшифровки, МакетОформления);
	
	ПолеРедактирования.Очистить();
	
	//Подготовим процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, НаборыДанных, ДанныеРасшифровки);
	
	//Выводим результат компоновки.
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.ОтображатьПроцентВывода = Ложь;
	ПроцессорВывода.УстановитьДокумент(ПолеРедактирования);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
	
	//Определим список идентификаторов расшифровки полей, значения в которых можно редактировать
	СписокПолейДляРедактирования = Новый Соответствие();
	Для Каждого Расшифровка Из ДанныеРасшифровки.Элементы Цикл
		Если ТипЗнч(Расшифровка) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			ПоляРасшифровки = Расшифровка.ПолучитьПоля();
			Если ПоляРасшифровки.Количество() = 1 И РедактируемыеПоля.Найти(ПоляРасшифровки[0].Поле) <> Неопределено Тогда
				
				//Это поле, которое можно редактировать.
				//Но надо проверить, чтобы это поле не было групповым - т.е. у него было два поля-родителя.
				КоличествоРодителей = 0;
				Для Каждого Родитель Из Расшифровка.ПолучитьРодителей() Цикл
					Если ТипЗнч(Родитель) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
						КоличествоРодителей = КоличествоРодителей + 1;
					КонецЕсли;
				КонецЦикла;
				
				Если КоличествоРодителей = 2 Тогда
					СписокПолейДляРедактирования.Вставить(Расшифровка.Идентификатор, ПоляРасшифровки[0].Поле);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Настроим для ячеек, которые можно редактировать, параметры: защита и цвет фона.
	//Также установим тип значения.
	Для НомерКолонки = 1 По ПолеРедактирования.ШиринаТаблицы Цикл
		Для НомерСтроки = 1 По ПолеРедактирования.ВысотаТаблицы Цикл
			Ячейка 	= ПолеРедактирования.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			ИмяПоля = СписокПолейДляРедактирования[Ячейка.Расшифровка];
			Если ИмяПоля <> Неопределено Тогда
				Ячейка.Защита 	= ТолькоПросмотр;
				Ячейка.ЦветФона = Новый Цвет(255,255,192);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события ПриИзмененииСодержимогоОбласти табличного поля
// Редактирует значение в редактируемом поле
Процедура РедактированиеДанных(Форма, Элемент, Область) Экспорт
	
	//Разрешено вводить только числовые значения
	Значение 	= Область.Текст;
	Попытка
		Значение = Число(Значение);
	Исключение
		Значение = 0;
	КонецПопытки;
	
	//Определим, что за ячейку отредактировали (имя редактируемого поля).
	Расшифровка = ДанныеРасшифровки.Элементы[Область.Расшифровка];
	
	ИмяПоля		= "";
	Если ТипЗнч(Расшифровка) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		ПоляРасшифровки = Расшифровка.ПолучитьПоля();
		Если ПоляРасшифровки.Количество() = 1 И РедактируемыеПоля.Найти(ПоляРасшифровки[0].Поле) <> Неопределено Тогда
			ИмяПоля		= ПоляРасшифровки[0].Поле;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПоля) Тогда
		//Как-то отредактировали ячейку, значение которой не должно меняться.
	Иначе
		//Определим ключ ячейки, которую отредактировали
		Ключ = Новый Структура();
		Для Каждого ЭлементРасшифровки Из Расшифровка.ПолучитьРодителей() Цикл
			Для Каждого ЗначениеКлюча Из ЭлементРасшифровки.ПолучитьПоля() Цикл
				Ключ.Вставить(ЗначениеКлюча.Поле,ЗначениеКлюча.Значение);
			КонецЦикла;
		КонецЦикла;
		
		//Поменяем данные в источнике данных
		РедактируемыеСтроки = ТаблицаДляРедактирования.НайтиСтроки(Ключ);
		
		Если РедактируемыеСтроки.Количество()=0 Тогда
			НоваяСтрока = ТаблицаДляРедактирования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Ключ);
			НоваяСтрока[ИмяПоля] = Значение;
		ИначеЕсли РедактируемыеСтроки.Количество() = 1 Тогда
			РедактируемыеСтроки[0][ИмяПоля] = Значение;
		Иначе
			//Вообще такая ситуация не должна допускаться.
			//Она может быть, если состав ключевых полей заданных в СКД будет меньше, чем реально в таблице данных.
			//Чтобы этого избежать надо соответствующим образом готовить таблицу данных или настройки СКД.
			//Если все же это случилось, возможно искажение данных, но для пользователя сделаем поведение прозрачным - 
			//поместим введеное значение в первую из строк, а в остальные запишем нулевое значение.
			//При этом есть гарантия, что пользователь после ввода данных увидит ровно те цифры, что ввел.
			РедактируемыеСтроки[0][ИмяПоля] = Значение;
			Для нс = 2 По РедактируемыеСтроки.Количество() Цикл
				РедактируемыеСтроки[нс - 1][ИмяПоля] = 0;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	ВывестиТаблицуДляРедактирования(Элемент);
	
КонецПроцедуры

// Удаляет строки в таблице редактирования, в которых нет заполненных значащих ресурсов
//
Процедура УдалитьНезаполненныеСтроки() Экспорт
	
	//Оставим только строки с заполненными ресурсами
	кс = ТаблицаДляРедактирования.Количество();
	Для нс = 1 По кс Цикл
		ДанныеСтроки = ТаблицаДляРедактирования[кс - нс];
		
		//должен быть заполнен один из ресурсов
		Заполнено = Ложь;
		Для Каждого Ресурс Из ПолучитьРесурсы() Цикл
			Заполнено = Заполнено ИЛИ ДанныеСтроки[Ресурс] <> 0;
		КонецЦикла;
		
		Если НЕ Заполнено Тогда
			ТаблицаДляРедактирования.Удалить(ДанныеСтроки);
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры

//Сохраняет в переменную ЗначенияЗависимыхКолонок значения, которые однозначно определяются 
//по другим значениям той же строки
Процедура СохранитьЗависимыеЗначения() Экспорт
	
	ЗначенияЗависимыхКолонок = Новый Структура();
	Для Каждого БазовоеПоле Из ЗависимыеПоля Цикл
		
		СоответствиеЗначений = Новый Соответствие;
		
		Для Каждого ДанныеСтроки Из ТаблицаДляРедактирования Цикл
			
			ЗначенияПолей = Новый Структура(БазовоеПоле.ЗависимыеПоля);
			ЗаполнитьЗначенияСвойств(ЗначенияПолей, ДанныеСтроки);
			СоответствиеЗначений.Вставить(ДанныеСтроки[БазовоеПоле.ОпределяющееПоле], ЗначенияПолей);
			
		КонецЦикла;
		
		ЗначенияЗависимыхКолонок.Вставить(БазовоеПоле.ОпределяющееПоле, СоответствиеЗначений);
		
	КонецЦикла;
	
	
КонецПроцедуры

//Восстанавливает из переменной ЗначенияЗависимыхКолонок значения, которые однозначно определяются 
//по другим значениям той же строки
Процедура ВосстановитьЗависимыеЗначения() Экспорт
	
	Для Каждого БазовоеПоле Из ЗначенияЗависимыхКолонок Цикл
		Для Каждого ДанныеСтроки Из ТаблицаДляРедактирования Цикл
			Значения = БазовоеПоле.Значение[ДанныеСтроки[БазовоеПоле.Ключ]];
			Если Значения <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, Значения);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Начинает интерактивную работу с обработкой
// 
// Параметры
//  Форма - форма "Редактирование" обработки или форма, созданная на её основе
//  пМакетОформления - макет оформления, если не передан, то будет использован макет оформления обработки
//
Процедура НачатьРедактирование(Форма, пМакетОформления=Неопределено) Экспорт
	
	//Инициализация необходимого
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных();
	Если пМакетОформления=Неопределено Тогда
		МакетОформления = ПолучитьМакет("МакетОформления");
	Иначе
		МакетОформления = пМакетОформления;
	КонецЕсли;
	
	//"ОтчетОбъект" нужен, так как справочник СохраненныеНастройки полноценно может работать только с настройками отчетов. 
	Если Найти(ИдентификаторДляСохраненияНастроек,"ОтчетОбъект") = 0 Тогда
		ИдентификаторДляСохраненияНастроек = ИдентификаторДляСохраненияНастроек + "/ОтчетОбъект/";
	КонецЕсли;
	
	//Сохраним данные, которые могут быть потеряны при редактировании
	СохранитьЗависимыеЗначения();
	
	//Чтение и применение настроек
	//Объект для интерактивной настройки структуры формы
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	ПолучитьСохраненнуюНастройку();
	ПрименитьНастройку();
	
	//Открываем форму
	ДобавитьКнопки(Форма, "Настройка,ВыбратьНастройку,Справка", 0);
	УстановитьЗаголовокФормы(Форма);
	Форма.Открыть();
	
	ВывестиТаблицуДляРедактирования(Форма.ЭлементыФормы.ПолеРедактирования);
	
КонецПроцедуры

// Добавляет строку в табличную часть ОпциональныеПоля
//
Процедура ДобавитьОпциональноеПоле(Имя) Экспорт
	
	НоваяСтрока = ОпциональныеПоля.Добавить();
	НоваяСтрока.Имя = Имя;
	
КонецПроцедуры

// Добавляет строку в табличную часть ЗависимыеПоля
//
Процедура ДобавитьЗависимыеПоля(ОпределяющееПоле, СписокЗависимыхПолей) Экспорт
	
	НоваяСтрока = ЗависимыеПоля.Добавить();
	НоваяСтрока.ОпределяющееПоле 	= ОпределяющееПоле;
	НоваяСтрока.ЗависимыеПоля 		= СписокЗависимыхПолей;
	
КонецПроцедуры

// Добавляет строку в табличную часть РедактируемыеПоля
//
Процедура ДобавитьРедактируемоеПоле(Имя) Экспорт
	
	НоваяСтрока = РедактируемыеПоля.Добавить();
	НоваяСтрока.Имя = Имя;
	
КонецПроцедуры

#КонецЕсли
