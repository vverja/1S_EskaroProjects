Перем мСписокНедоступныхРасчетов;

Функция ПолучитьСведеньяОВидахРасчета(ТипТаблицы = Неопределено)
	
	СведеньяОВидахРасчета = Новый Соответствие;
	
	Если ТипТаблицы = "Удержание" Тогда
		ТипТаблицы	=  "Удержания";
		ИмяПВР		= "УправленческиеУдержания";
		ТаблицаВидовРасчета = Удержания.Выгрузить(,"ВидРасчета");
	Иначе
		ТипТаблицы	= "Начисления";
		ИмяПВР		= "УправленческиеНачисления";
		ТаблицаВидовРасчета = Начисления.Выгрузить(,"ВидРасчета");
	КонецЕсли;
	// Получим максимальное число показателей
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаВидовРасчета",ТаблицаВидовРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВР.ВидРасчета КАК ВидРасчета
	|	ПОМЕСТИТЬ ВТВидыРасчетов
	|ИЗ
	|	&ТаблицаВидовРасчета КАК ВР";
	
	Запрос.Выполнить();

	ВТВидыРасчетов = "ВТВидыРасчетов";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапрос.НомерСтроки) КАК КолВоПоказателей
	|	ПОМЕСТИТЬ ВТПоказателей
	|ИЗ
	|	ВТВидыРасчетов КАК ВР
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		Показатели.Ссылка,
	|		Показатели.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		ПланВидовРасчета." + ИмяПВР +".Показатели КАК Показатели) КАК ВложенныйЗапрос
	|	ПО ВложенныйЗапрос.Ссылка = ВР.ВидРасчета";
	
	Запрос.Выполнить();
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВР.КолВоПоказателей) КАК КолВоПоказателей
	|ИЗ
	|	ВТПоказателей КАК ВР";
	
	ВыборкаКоличестваПоказателей = Запрос.Выполнить().Выбрать();
	ВыборкаКоличестваПоказателей.Следующий();
	КоличествоПоказателей = ВыборкаКоличестваПоказателей.КолВоПоказателей;
	Если КоличествоПоказателей = Null Тогда
		КоличествоПоказателей = 0;
	КонецЕсли;
	
	// получим временную таблицу с расчетом показателей
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Основной.ВидРасчета,
	|	МАКСИМУМ(ВСЕПоказатели.НомерСтроки) КАК КоличествоПоказателей,";
	Для СчПоказателей = 1 По КоличествоПоказателей Цикл
		Запрос.Текст = Запрос.Текст + "
		|	Показатели"+ СчПоказателей + ".Показатель КАК Показатель" + СчПоказателей+",
		|	Показатели"+ СчПоказателей + ".Показатель.ТипПоказателя КАК Показатель" + СчПоказателей + "ТипПоказателя,
		|	Показатели"+ СчПоказателей + ".Показатель.ВозможностьИзменения КАК Показатель" + СчПоказателей + "ВозможностьИзменения";
		Если СчПоказателей<КоличествоПоказателей Тогда
			Запрос.Текст = Запрос.Текст + ","
		КонецЕсли;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ВТВидыРасчетов КАК Основной
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ИмяПВР+".Показатели КАК ВСЕПоказатели
	|	ПО Основной.ВидРасчета = ВСЕПоказатели.Ссылка";
	Для СчПоказателей = 1 По КоличествоПоказателей Цикл
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ИмяПВР+".Показатели КАК Показатели"+ СчПоказателей + "
		|	ПО Основной.ВидРасчета = Показатели"+ СчПоказателей + ".Ссылка 
		|	И  Показатели"+ СчПоказателей + ".НомерСтроки = "+ СчПоказателей;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|СГРУППИРОВАТЬ ПО
	|	Основной.ВидРасчета";
	Для СчПоказателей = 1 По КоличествоПоказателей Цикл
		Запрос.Текст = Запрос.Текст + ",
		|	Показатели"+ СчПоказателей + ".Показатель,
		|	Показатели"+ СчПоказателей + ".Показатель.ТипПоказателя,
		|	Показатели"+ СчПоказателей + ".Показатель.ВозможностьИзменения";
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоказателя = Новый Структура("КоличествоПоказателей", Выборка.КоличествоПоказателей);
		Для СчПоказателей = 1 По КоличествоПоказателей Цикл
			СтруктураПоказателя.Вставить("Показатель"+СчПоказателей,Выборка["Показатель"+СчПоказателей]);
			СтруктураПоказателя.Вставить("Показатель"+СчПоказателей+"ТипПоказателя",Выборка["Показатель"+СчПоказателей+"ТипПоказателя"]);
			СтруктураПоказателя.Вставить("Показатель"+СчПоказателей+"ВозможностьИзменения",Выборка["Показатель"+СчПоказателей+"ВозможностьИзменения"]);
		КонецЦикла;
		СведеньяОВидахРасчета.Вставить(Выборка.ВидРасчета, СтруктураПоказателя);
	КонецЦикла;
	
	Возврат СведеньяОВидахРасчета;

КонецФункции //ПолучитьСведеньяОВидахРасчета

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса
//  Отказ 						- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтроки(ТипТаблицы = Неопределено, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части "+?(ТипТаблицы = "Удержание", "Удержания", "Начисления")+": ";
	
	Если ТипТаблицы = "Начисление" Тогда
		// Сотрудник
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;
		
	Иначе
		// ФизЛицо
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Физлицо) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета)  Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано " + ?(ТипТаблицы = "Удержание", "удержание!", "начисление!"), Отказ, Заголовок);
		
	ИначеЕсли мСписокНедоступныхРасчетов.НайтиПоЗначению(ВыборкаПоСтрокамДокумента.ВидРасчета) <> Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный вид расчета нельзя назначать в качестве планового!", Отказ, Заголовок);
		
	Иначе
		ВидРасчета = ВыборкаПоСтрокамДокумента.ВидРасчета;
		СведеньяОВидахРасчета = ПолучитьСведеньяОВидахРасчета(ТипТаблицы)[ВидРасчета];
		Для СчПоказателей = 1 По СведеньяОВидахРасчета["КоличествоПоказателей"] Цикл
			
			Показатель = СведеньяОВидахРасчета["Показатель"+СчПоказателей];
			ТипПоказателя = СведеньяОВидахРасчета["Показатель"+СчПоказателей+"ТипПоказателя"];
			ВозможностьИзменения = СведеньяОВидахРасчета["Показатель"+СчПоказателей+"ВозможностьИзменения"];
			
			Если ЗначениеЗаполнено(ТипПоказателя) Тогда 
				Если ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется Тогда
					// проверка постоянных показателей
					Если ВыборкаПоСтрокамДокумента["Показатель" + СчПоказателей] = 0 Тогда
						// размер 
						Если ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная
							и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая
							и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
							ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан размер показателя " + Показатель, Отказ, Заголовок);
						КонецЕсли;
					КонецЕсли;
					// валюта (для денежного показателя)
					Если ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.Денежный 
						и НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["Валюта" + СчПоказателей]) 
						и ТипПоказателя <> Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана валюта!", Отказ, Заголовок);
					КонецЕсли;					
					// тариф
					Если ТипТаблицы = "Начисление" Тогда
						Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["ТарифныйРазряд" + СчПоказателей])
							и ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд Тогда
							ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан размер тарифа " + Показатель, Отказ, Заголовок);					
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // ПроверитьЗаполнениеСтроки()

// Создает документ "ВводСведенийОПлановыхНачисленияхУдержанияхРаботников"
//
Процедура СоздатьДокументыВводаНачисленийИУдержаний()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Действие,
	|	ВложенныйЗапрос.ДатаДействия,
	|	ВложенныйЗапрос.Физлицо КАК Физлицо,
	|	ВложенныйЗапрос.ВидРасчета КАК ВидРасчета,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.Должность,
	|	Сотрудники.Сотрудник
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Действие КАК Действие,
	|		&ДатаДействия КАК ДатаДействия,
	|		ПлановыеНачисленияРаботниковСрезПоследних.ФизЛицо КАК Физлицо,
	|		ПлановыеНачисленияРаботниковСрезПоследних.ВидРасчета КАК ВидРасчета,
	|		РаботникиСрезПоследних.Подразделение КАК Подразделение,
	|		РаботникиСрезПоследних.Должность КАК Должность
	|	ИЗ
	|		РегистрСведений.ПлановыеНачисленияРаботников.СрезПоследних(&ДатаУтверждения, ) КАК ПлановыеНачисленияРаботниковСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(&ДатаУтверждения, ) КАК РаботникиСрезПоследних
	|			ПО ПлановыеНачисленияРаботниковСрезПоследних.ФизЛицо = РаботникиСрезПоследних.ФизЛицо
	|	ГДЕ
	|		ПлановыеНачисленияРаботниковСрезПоследних.Действует
	|		И ПлановыеНачисленияРаботниковСрезПоследних.ВидРасчета ЕСТЬ НЕ NULL ) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокСотрудников.Сотрудник КАК Сотрудник,
	|			СписокСотрудников.Физлицо КАК Физлицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|				РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
	|				1 КАК Приоритет
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|					&ДатаУтверждения,
	|					Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОсновноеМесто
	|			ГДЕ
	|				РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиОсновноеМесто.Сотрудник.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиСовместительство.Сотрудник),
	|				РаботникиСовместительство.Сотрудник.Физлицо,
	|				2
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|					&ДатаУтверждения,
	|					Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) КАК РаботникиСовместительство
	|			ГДЕ
	|				РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиСовместительство.Сотрудник.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(СотрудникиДУ.Ссылка),
	|				СотрудникиДУ.Физлицо,
	|				3
	|			ИЗ
	|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|			ГДЕ
	|				СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СотрудникиДУ.Физлицо) КАК СписокСотрудников
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СписокФизическихЛиц.Физлицо КАК Физлицо,
	|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
	|				ИЗ
	|					(ВЫБРАТЬ
	|						РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
	|						1 КАК Приоритет
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|							&ДатаУтверждения,
	|							Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОсновноеМесто
	|					ГДЕ
	|						РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						РаботникиСовместительство.Сотрудник.Физлицо,
	|						2
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|							&ДатаУтверждения,
	|							Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) КАК РаботникиСовместительство
	|					ГДЕ
	|						РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						СотрудникиДУ.Физлицо,
	|						3
	|					ИЗ
	|						Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|					ГДЕ
	|						СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)) КАК СписокФизическихЛиц
	|				
	|				СГРУППИРОВАТЬ ПО
	|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
	|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
	|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
	|		ПО ВложенныйЗапрос.Физлицо = Сотрудники.Физлицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	ВидРасчета";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДатаУтверждения",ДатаУтверждения);
	Запрос.УстановитьПараметр("Действие",Перечисления.ВидыДействияСНачислением.Прекратить);
	Запрос.УстановитьПараметр("ДатаДействия",НачалоДня(ДатаУтверждения) - 1);	
	
	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Действие КАК Действие,
	|	&ДатаДействия КАК ДатаДействия,
	|	ПлановыеУдержанияРаботниковСрезПоследних.ФизЛицо КАК ФизЛицо,
	|	ПлановыеУдержанияРаботниковСрезПоследних.ВидРасчета КАК ВидРасчета,
	|	РаботникиСрезПоследних.Подразделение,
	|	РаботникиСрезПоследних.Должность
	|ИЗ
	|	РегистрСведений.ПлановыеУдержанияРаботников.СрезПоследних(&ДатаУтверждения, ) КАК ПлановыеУдержанияРаботниковСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(&ДатаУтверждения, ) КАК РаботникиСрезПоследних
	|		ПО ПлановыеУдержанияРаботниковСрезПоследних.ФизЛицо = РаботникиСрезПоследних.ФизЛицо
	|ГДЕ
	|	ПлановыеУдержанияРаботниковСрезПоследних.ПериодЗавершения <= &ДатаДействия
	|	И ПлановыеУдержанияРаботниковСрезПоследних.ВидРасчета ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	ВидРасчета";
	
	Запрос.Текст = ТекстЗапроса;	
	
	ТаблицаУдержаний = Запрос.Выполнить().Выгрузить();
	
	ВводНачисленийИУдержнаний = Документы.ВводСведенийОПлановыхНачисленияхУдержанияхРаботников.СоздатьДокумент();
	ВводНачисленийИУдержнаний.Дата			= ДатаУтверждения;
	ВводНачисленийИУдержнаний.Комментарий	= "#Документ введен обработкой утверждения вида схемы мотивации: " + ВидСхемыМотивации;
	ВводНачисленийИУдержнаний.Ответственный	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	ВводНачисленийИУдержнаний.Начисления.Загрузить(ТаблицаНачислений);
	ВводНачисленийИУдержнаний.Удержания.Загрузить(ТаблицаУдержаний);
	
	Отказ = Ложь;
	Заголовок = "";
	
	// допишем в ТЧ "Начисления" начисления по новой схеме мотивации 
	Для Каждого Начисление Из Начисления Цикл
		
		ПроверитьЗаполнениеСтроки("Начисление", Начисление, Отказ, Заголовок);
		
		Если НЕ Отказ Тогда
			СтрокаНачисления = ВводНачисленийИУдержнаний.Начисления.Добавить();
			СтрокаНачисления.Сотрудник			= Начисление.Сотрудник;
			СтрокаНачисления.ВидРасчета			= Начисление.ВидРасчета;
			СтрокаНачисления.ДатаДействия		= ДатаУтверждения;
			СтрокаНачисления.Действие			= Перечисления.ВидыДействияСНачислением.Начать;
			Для Сч = 1 По 6 Цикл
				СтрокаНачисления["Показатель"+Сч]		= Начисление["Показатель"+Сч];
				СтрокаНачисления["Валюта"+Сч]			= Начисление["Валюта"+Сч];
				СтрокаНачисления["ТарифныйРазряд"+Сч]	= Начисление["ТарифныйРазряд"+Сч];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// допишем в ТЧ "Начисления" начисления по новой схеме мотивации 
	Для Каждого Удержание Из Удержания Цикл
		
		ПроверитьЗаполнениеСтроки("Удержание", Удержание, Отказ, Заголовок);
		
		Если НЕ Отказ Тогда
			СтрокаУдержания = ВводНачисленийИУдержнаний.Удержания.Добавить();
			СтрокаУдержания.Физлицо			= Удержание.Физлицо;
			СтрокаУдержания.ВидРасчета		= Удержание.ВидРасчета;
			СтрокаУдержания.ДатаДействия	= ДатаУтверждения;
			СтрокаУдержания.Действие		= Перечисления.ВидыДействияСНачислением.Начать;
			Для Сч = 1 По 6 Цикл
				СтрокаУдержания["Показатель"+Сч]		= Удержание["Показатель"+Сч];
				СтрокаУдержания["Валюта"+Сч]			= Удержание["Валюта"+Сч];
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		// удалим уже существующие аналогичные документы
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВводСведенийОПлановыхНачисленияхУдержанияхРаботников.Ссылка,
		|	ВводСведенийОПлановыхНачисленияхУдержанияхРаботников.Комментарий
		|ИЗ
		|	Документ.ВводСведенийОПлановыхНачисленияхУдержанияхРаботников КАК ВводСведенийОПлановыхНачисленияхУдержанияхРаботников
		|ГДЕ
		|	ВводСведенийОПлановыхНачисленияхУдержанияхРаботников.Дата = &Дата";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Дата", ДатаУтверждения);	
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Комментарий = "#Документ введен обработкой утверждения вида схемы мотивации: " + ВидСхемыМотивации Тогда
				ДокВводНачисленийИУдержаний = Выборка.Ссылка.ПолучитьОбъект();
				ДокВводНачисленийИУдержаний.Удалить();
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			ВводНачисленийИУдержнаний.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		ТекстЗапросДействующаяСхемаМотивации = 
		"ВЫБРАТЬ		
		|	СхемыМотивацииРаботников.Подразделение,
		|	СхемыМотивацииРаботников.Должность,
		|	СхемыМотивацииРаботников.ВидРасчета,
		|	Значение(Справочник.Организации.ПустаяСсылка) КАК Организация, 
		|	&ВидСхемыМотивации КАК ВидСхемыМотивации,
		|	СхемыМотивацииРаботников.Показатель1,
		|	СхемыМотивацииРаботников.Валюта1,
		|	СхемыМотивацииРаботников.Показатель2,
		|	СхемыМотивацииРаботников.Валюта2,
		|	СхемыМотивацииРаботников.Показатель3,
		|	СхемыМотивацииРаботников.Валюта3,
		|	СхемыМотивацииРаботников.ТарифныйРазряд1,
		|	СхемыМотивацииРаботников.ТарифныйРазряд2,
		|	СхемыМотивацииРаботников.ТарифныйРазряд3,
		|	СхемыМотивацииРаботников.Показатель4,
		|	СхемыМотивацииРаботников.Валюта4,
		|	СхемыМотивацииРаботников.ТарифныйРазряд4,
		|	СхемыМотивацииРаботников.Показатель5,
		|	СхемыМотивацииРаботников.Валюта5,
		|	СхемыМотивацииРаботников.ТарифныйРазряд5,
		|	СхемыМотивацииРаботников.Показатель6,
		|	СхемыМотивацииРаботников.Валюта6,
		|	СхемыМотивацииРаботников.ТарифныйРазряд6		
		|ИЗ
		|	РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
		|ГДЕ
		|	СхемыМотивацииРаботников.ВидСхемыМотивации = Значение(Справочник.ВариантыCхемМотивации.ПустаяСсылка)
		|	И СхемыМотивацииРаботников.Организация = Значение(Справочник.Организации.ПустаяСсылка)";	
		ЗапросДействующаяСМ = Новый Запрос(ТекстЗапросДействующаяСхемаМотивации);
		ЗапросДействующаяСМ.УстановитьПараметр("ВидСхемыМотивации",ВидСхемыМотивации);
		ВыборкаДействующихСМ = ЗапросДействующаяСМ.Выполнить().Выбрать();
		ТаблицаДействующейСхемыМотивации = ЗапросДействующаяСМ.Выполнить().Выгрузить();
		
		ТекстЗапросВременнаяСхемаМотивации = 
		"ВЫБРАТЬ
		|	СхемыМотивацииРаботников.Подразделение,
		|	СхемыМотивацииРаботников.Должность,
		|	СхемыМотивацииРаботников.ВидРасчета,
		|	Значение(Справочник.Организации.ПустаяСсылка) КАК Организация, 		
		|	Значение(Справочник.ВариантыCхемМотивации.ПустаяСсылка) КАК ВидСхемыМотивации,
		|	СхемыМотивацииРаботников.Показатель1,
		|	СхемыМотивацииРаботников.Валюта1,
		|	СхемыМотивацииРаботников.Показатель2,
		|	СхемыМотивацииРаботников.Валюта2,
		|	СхемыМотивацииРаботников.Показатель3,
		|	СхемыМотивацииРаботников.Валюта3,
		|	СхемыМотивацииРаботников.ТарифныйРазряд1,
		|	СхемыМотивацииРаботников.ТарифныйРазряд2,
		|	СхемыМотивацииРаботников.ТарифныйРазряд3,
		|	СхемыМотивацииРаботников.Показатель4,
		|	СхемыМотивацииРаботников.Валюта4,
		|	СхемыМотивацииРаботников.ТарифныйРазряд4,
		|	СхемыМотивацииРаботников.Показатель5,
		|	СхемыМотивацииРаботников.Валюта5,
		|	СхемыМотивацииРаботников.ТарифныйРазряд5,
		|	СхемыМотивацииРаботников.Показатель6,
		|	СхемыМотивацииРаботников.Валюта6,
		|	СхемыМотивацииРаботников.ТарифныйРазряд6		
		|ИЗ
		|	РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
		|ГДЕ
		|	СхемыМотивацииРаботников.ВидСхемыМотивации = &ВидСхемыМотивации
		|	И СхемыМотивацииРаботников.Организация = Значение(Справочник.Организации.ПустаяСсылка)";				
						  
		ЗапросВременнаяСМ = Новый Запрос(ТекстЗапросВременнаяСхемаМотивации);		
		ЗапросВременнаяСМ.УстановитьПараметр("ВидСхемыМотивации", ВидСхемыМотивации);
		ТаблицаВремСМ = ЗапросВременнаяСМ.Выполнить().Выгрузить();
		
		ТекстЗапросОстальнымВременнымСхемамМотивации = 
		"ВЫБРАТЬ
		|	СхемыМотивацииРаботников.Подразделение,
		|	СхемыМотивацииРаботников.Должность,
		|	СхемыМотивацииРаботников.ВидРасчета,
		|	Значение(Справочник.Организации.ПустаяСсылка) КАК Организация, 		
		|	СхемыМотивацииРаботников.ВидСхемыМотивации,
		|	СхемыМотивацииРаботников.Показатель1,
		|	СхемыМотивацииРаботников.Валюта1,
		|	СхемыМотивацииРаботников.Показатель2,
		|	СхемыМотивацииРаботников.Валюта2,
		|	СхемыМотивацииРаботников.Показатель3,
		|	СхемыМотивацииРаботников.Валюта3,
		|	СхемыМотивацииРаботников.ТарифныйРазряд1,
		|	СхемыМотивацииРаботников.ТарифныйРазряд2,
		|	СхемыМотивацииРаботников.ТарифныйРазряд3,
		|	СхемыМотивацииРаботников.Показатель4,
		|	СхемыМотивацииРаботников.Валюта4,
		|	СхемыМотивацииРаботников.ТарифныйРазряд4,
		|	СхемыМотивацииРаботников.Показатель5,
		|	СхемыМотивацииРаботников.Валюта5,
		|	СхемыМотивацииРаботников.ТарифныйРазряд5,
		|	СхемыМотивацииРаботников.Показатель6,
		|	СхемыМотивацииРаботников.Валюта6,
		|	СхемыМотивацииРаботников.ТарифныйРазряд6		
		|ИЗ
		|	РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
		|ГДЕ
		|	НЕ (СхемыМотивацииРаботников.ВидСхемыМотивации = &ВидСхемыМотивации)
		|	И НЕ (СхемыМотивацииРаботников.ВидСхемыМотивации = Значение(Справочник.ВариантыCхемМотивации.ПустаяСсылка))
		|	И СхемыМотивацииРаботников.Организация = Значение(Справочник.Организации.ПустаяСсылка)";				
						  
		ЗапросВременныеСМ = Новый Запрос(ТекстЗапросОстальнымВременнымСхемамМотивации);		
		ЗапросВременныеСМ.УстановитьПараметр("ВидСхемыМотивации", ВидСхемыМотивации);
		ТаблицаВременныхСМ = ЗапросВременныеСМ.Выполнить().Выгрузить();
		
		
		НачатьТранзакцию();
	
		НаборЗаписей = РегистрыСведений.СхемыМотивацииРаботников.СоздатьНаборЗаписей();
		
		// на всякий случай, чтоб не появились неуникальные записи, очистим записи по основной схеме мотивации 		
		НаборЗаписей.Отбор.Организация.Установить(Справочники.Организации.ПустаяСсылка());
		НаборЗаписей.Прочитать();		
		КоличествоЗаписей = НаборЗаписей.Количество();
		Пока КоличествоЗаписей > 0 Цикл
			НаборЗаписей.Удалить(0);
			КоличествоЗаписей = КоличествоЗаписей - 1;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		// сделаем действующие СМ временными
		Для Каждого СтрокТЗДействующихСМ Из ТаблицаДействующейСхемыМотивации Цикл
			НоваяЗапись = НаборЗаписей.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокТЗДействующихСМ);
		КонецЦикла;
		НаборЗаписей.Записать();
		
		// сделаем добавим все действовавшие ранее временные СМ
		Для Каждого СтрокТЗВременныхСМ Из ТаблицаВременныхСМ Цикл
			НоваяЗапись = НаборЗаписей.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокТЗВременныхСМ);
		КонецЦикла;
		НаборЗаписей.Записать();		
		
		// сделаем временные СМ действующими
		Для Каждого СтрокТЗТаблицыВремСМ Из ТаблицаВремСМ Цикл
			НоваяЗапись = НаборЗаписей.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокТЗТаблицыВремСМ);
		КонецЦикла;
		НаборЗаписей.Записать();
		

		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры //СоздатьДокументыВводаНачисленийИУдержаний

// Снимает с документов начисление заработной платы по утвержденной схеме мотивации признак временности, 
// устанавливает признак временности документам по другой схеме мотивации,
// обрабатывает движения документов, созданных по другой схеме мотивации по алгоритму:
//  устанавливает признак временности в регистры расчета и удаляет движения по регистрам: 
//  "ВзаиморасчетыСРаботниками" и "ПогашениеЗаймовРаботниками"
//
Процедура ОбработатьНачислениеЗарплаты()
	
	// Уберем признак временности с документов по утвержденной схеме мотивации
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникам.Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникам КАК НачислениеЗарплатыРаботникам
	|ГДЕ
	|	НачислениеЗарплатыРаботникам.ВидСхемыМотивации = &ВидСхемыМотивации
	|	И НачислениеЗарплатыРаботникам.ПоВременнойСхемеМотивации
	|	И НачислениеЗарплатыРаботникам.ПериодРегистрации >= &ДатаУтверждения";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ВидСхемыМотивации",ВидСхемыМотивации);
	Запрос.УстановитьПараметр("ДатаУтверждения",ДатаУтверждения);
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокНачисленияЗП = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокНачисленияЗП.ПоВременнойСхемеМотивации = Ложь;
		ДокНачисленияЗП.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
	// Установим признак временности документам не по утвержденной схеме мотивации
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникам.Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникам КАК НачислениеЗарплатыРаботникам
	|ГДЕ
	|	НачислениеЗарплатыРаботникам.ВидСхемыМотивации <> &ВидСхемыМотивации
	|	И НЕ НачислениеЗарплатыРаботникам.ПоВременнойСхемеМотивации
	|	И НачислениеЗарплатыРаботникам.ПериодРегистрации >= &ДатаУтверждения";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ВидСхемыМотивации",ВидСхемыМотивации);
	Запрос.УстановитьПараметр("ДатаУтверждения",ДатаУтверждения);
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	НаборЗаписейУправленческиеНачисления = РегистрыРасчета.УправленческиеНачисления.СоздатьНаборЗаписей();
	НаборЗаписейУправленческиеУдержания = РегистрыРасчета.УправленческиеУдержания.СоздатьНаборЗаписей();
	
	НаборЗаписейВзаиморасчеты = РегистрыНакопления.ВзаиморасчетыСРаботниками.СоздатьНаборЗаписей();
	НаборЗаписейПогашениеЗаймов = РегистрыНакопления.ПогашениеЗаймовРаботниками.СоздатьНаборЗаписей();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокНачисленияЗП = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокНачисленияЗП.ПоВременнойСхемеМотивации = Истина;
		ДокНачисленияЗП.Записать();
		
		НаборЗаписейУправленческиеНачисления.Отбор.Регистратор.Установить(ВыборкаДокументов.Ссылка);		
		НаборЗаписейУправленческиеНачисления.Прочитать();
		Для каждого Запись Из НаборЗаписейУправленческиеНачисления Цикл
			Запись.ПоВременнойСхемеМотивации = Истина;
		КонецЦикла;
		НаборЗаписейУправленческиеНачисления.Записать();
		
		НаборЗаписейУправленческиеУдержания.Отбор.Регистратор.Установить(ВыборкаДокументов.Ссылка);		
		НаборЗаписейУправленческиеУдержания.Прочитать();
		Для каждого Запись Из НаборЗаписейУправленческиеУдержания Цикл
			Запись.ПоВременнойСхемеМотивации = Истина;
		КонецЦикла;
		НаборЗаписейУправленческиеУдержания.Записать();
		
		НаборЗаписейПогашениеЗаймов.Отбор.Регистратор.Установить(ВыборкаДокументов.Ссылка);
		НаборЗаписейПогашениеЗаймов.Прочитать();
		Для СчЗаписей = 0 По НаборЗаписейПогашениеЗаймов.Количество()-1 Цикл
			НаборЗаписейПогашениеЗаймов.Удалить(НаборЗаписейПогашениеЗаймов[0]);
		КонецЦикла;
		НаборЗаписейПогашениеЗаймов.Записать();
		
		НаборЗаписейВзаиморасчеты.Отбор.Регистратор.Установить(ВыборкаДокументов.Ссылка);
		НаборЗаписейВзаиморасчеты.Прочитать();
		Для СчЗаписей = 0 По НаборЗаписейВзаиморасчеты.Количество()-1 Цикл
			НаборЗаписейВзаиморасчеты.Удалить(НаборЗаписейВзаиморасчеты[0]);
		КонецЦикла;
		НаборЗаписейВзаиморасчеты.Записать();		
		
	КонецЦикла;	
	
КонецПроцедуры //ОтметитьСхемыМотивации

// Утверждает выбранную схему мотивации
//
Процедура УтвердитьВидСхемыМотивации() Экспорт
	
	Если ЗначениеЗаполнено(ВидСхемыМотивации) Тогда
		ОбработатьНачислениеЗарплаты();
	
		СоздатьДокументыВводаНачисленийИУдержаний();
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Не указан вид схемы мотивации");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет начисления и удержания по схемам мотивации
// Параметры:
//   ВидТаблицы - Имя табличной части, в которую заполняются схемы мотивации
//				
Процедура ЗаполнениеПоСхемамМотивации(ВидТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамВидСхемыМотивации",	ВидСхемыМотивации);
	Запрос.УстановитьПараметр("парамНачало",			НачалоДня(ДатаУтверждения)-1);
	
	Запрос.УстановитьПараметр("ДоговорУправленческий",	Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СхемыМотивацииРаботников.ВидРасчета,
	|	СхемыМотивацииРаботников.Показатель1 КАК Показатель1,
	|	СхемыМотивацииРаботников.Показатель2 КАК Показатель2,
	|	СхемыМотивацииРаботников.Показатель3 КАК Показатель3,
	|	СхемыМотивацииРаботников.Показатель4 КАК Показатель4,
	|	СхемыМотивацииРаботников.Показатель5 КАК Показатель5,
	|	СхемыМотивацииРаботников.Показатель6 КАК Показатель6,	
	|	СхемыМотивацииРаботников.ТарифныйРазряд1 КАК ТарифныйРазряд1,
	|	СхемыМотивацииРаботников.ТарифныйРазряд2 КАК ТарифныйРазряд2,
	|	СхемыМотивацииРаботников.ТарифныйРазряд3 КАК ТарифныйРазряд3,
	|	СхемыМотивацииРаботников.ТарифныйРазряд4 КАК ТарифныйРазряд4,
	|	СхемыМотивацииРаботников.ТарифныйРазряд5 КАК ТарифныйРазряд5,
	|	СхемыМотивацииРаботников.ТарифныйРазряд6 КАК ТарифныйРазряд6,	
	|	СхемыМотивацииРаботников.Валюта1 КАК Валюта1,
	|	СхемыМотивацииРаботников.Валюта2 КАК Валюта2,
	|	СхемыМотивацииРаботников.Валюта3 КАК Валюта3,
	|	СхемыМотивацииРаботников.Валюта4 КАК Валюта4,
	|	СхемыМотивацииРаботников.Валюта5 КАК Валюта5,
	|	СхемыМотивацииРаботников.Валюта6 КАК Валюта6,	
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Работники.ФизЛицо,
	|	Работники.Подразделение,
	|	Работники.Должность
	|ИЗ
	|	РегистрСведений.Работники.СрезПоследних(&парамНачало, ) КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СхемыМотивацииРаботников.ВидРасчета КАК ВидРасчета,
	|			СхемыМотивацииРаботников.Показатель1 КАК Показатель1,
	|			СхемыМотивацииРаботников.Показатель2 КАК Показатель2,
	|			СхемыМотивацииРаботников.Показатель3 КАК Показатель3,
	|			СхемыМотивацииРаботников.Показатель4 КАК Показатель4,
	|			СхемыМотивацииРаботников.Показатель5 КАК Показатель5,
	|			СхемыМотивацииРаботников.Показатель6 КАК Показатель6,	
	|			СхемыМотивацииРаботников.ТарифныйРазряд1 КАК ТарифныйРазряд1,
	|			СхемыМотивацииРаботников.ТарифныйРазряд2 КАК ТарифныйРазряд2,
	|			СхемыМотивацииРаботников.ТарифныйРазряд3 КАК ТарифныйРазряд3,
	|			СхемыМотивацииРаботников.ТарифныйРазряд4 КАК ТарифныйРазряд4,
	|			СхемыМотивацииРаботников.ТарифныйРазряд5 КАК ТарифныйРазряд5,
	|			СхемыМотивацииРаботников.ТарифныйРазряд6 КАК ТарифныйРазряд6,	
	|			СхемыМотивацииРаботников.Валюта1 КАК Валюта1,
	|			СхемыМотивацииРаботников.Валюта2 КАК Валюта2,
	|			СхемыМотивацииРаботников.Валюта3 КАК Валюта3,
	|			СхемыМотивацииРаботников.Валюта4 КАК Валюта4,
	|			СхемыМотивацииРаботников.Валюта5 КАК Валюта5,
	|			СхемыМотивацииРаботников.Валюта6 КАК Валюта6,	
	|			СхемыМотивацииРаботников.Подразделение КАК Подразделение,
	|			СхемыМотивацииРаботников.Должность КАК Должность
	|		ИЗ
	|			РегистрСведений.СхемыМотивацииРаботников КАК СхемыМотивацииРаботников
	|		ГДЕ
	|			СхемыМотивацииРаботников.ВидСхемыМотивации = &парамВидСхемыМотивации
	|			И СхемыМотивацииРаботников.ВидРасчета ССЫЛКА ПланВидовРасчета."+ВидТаблицы+") КАК СхемыМотивацииРаботников
	//|		ПО Работники.Должность = СхемыМотивацииРаботников.Должность
	//|			И Работники.Подразделение = СхемыМотивацииРаботников.Подразделение
	                                                         
	|		ПО (ВЫБОР
	|				КОГДА СхемыМотивацииРаботников.Должность <> Значение(Справочник.ДолжностиОрганизаций.ПустаяСсылка)
	|						И СхемыМотивацииРаботников.Подразделение <> Неопределено
	|							ТОГДА Работники.Должность = СхемыМотивацииРаботников.Должность
	|									И Работники.Подразделение = СхемыМотивацииРаботников.Подразделение
	|						ИНАЧЕ Работники.Должность = СхемыМотивацииРаботников.Должность
	|			КОНЕЦ)
		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокСотрудников.Сотрудник КАК Сотрудник,
	|			СписокСотрудников.Физлицо КАК Физлицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|				РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
	|				1 КАК Приоритет
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачало, Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОсновноеМесто
	|			ГДЕ
	|				РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиОсновноеМесто.Сотрудник.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиСовместительство.Сотрудник),
	|				РаботникиСовместительство.Сотрудник.Физлицо,
	|				2
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачало, Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) КАК РаботникиСовместительство
	|			ГДЕ
	|				РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиСовместительство.Сотрудник.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(СотрудникиДУ.Ссылка),
	|				СотрудникиДУ.Физлицо,
	|				ВЫБОР
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|						ТОГДА 3
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ
	|			ИЗ
	|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СотрудникиДУ.Физлицо,
	|				ВЫБОР
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|						ТОГДА 3
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ) КАК СписокСотрудников
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СписокФизическихЛиц.Физлицо КАК Физлицо,
	|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
	|				ИЗ
	|					(ВЫБРАТЬ
	|						РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
	|						1 КАК Приоритет
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|								&парамНачало,
	|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОсновноеМесто
	|					ГДЕ
	|						РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						РаботникиСовместительство.Сотрудник.Физлицо,
	|						2
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|								&парамНачало,
	|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) КАК РаботникиСовместительство
	|					ГДЕ
	|						РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						СотрудникиДУ.Физлицо,
	|						ВЫБОР
	|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|								ТОГДА 3
	|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|								ТОГДА 4
	|							ИНАЧЕ 5
	|						КОНЕЦ
	|					ИЗ
	|						Справочник.СотрудникиОрганизаций КАК СотрудникиДУ) КАК СписокФизическихЛиц
	|				
	|				СГРУППИРОВАТЬ ПО
	|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
	|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
	|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
	|		ПО Работники.ФизЛицо = Сотрудники.Физлицо
	|ГДЕ
	|	СхемыМотивацииРаботников.ВидРасчета ЕСТЬ НЕ NULL 
	|	И Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
	
	Если ВидТаблицы = "УправленческиеНачисления" Тогда
		Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
	Иначе
		Удержания.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
КонецПроцедуры //ЗаполнениеПоСхемамМотивации


мСписокНедоступныхРасчетов = Новый СписокЗначений;
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеУдержания.УдержаноПоБухгалтерии);
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии);
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно);
