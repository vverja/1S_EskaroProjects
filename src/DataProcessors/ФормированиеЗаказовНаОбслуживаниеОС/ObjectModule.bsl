
// Функция добавляет к указанной дате необходимое количество месяцев,
// количество месяцев может быть не целым
//
// Параметры
//  ДатаПериода - Дата, к которой необходимо добавлять месяцы
//  Смещение    - Число, количество месяцев смещения
//
// Возвращаемое значение:
//   Дата
//
Функция ДобавитьНеполныйМесяц(ДатаПериода, Смещение)

	Если Цел(Смещение) = Смещение Тогда
		Возврат ДобавитьМесяц(ДатаПериода, Смещение);
	Иначе
		ДатаНачалаЦелогоСмещения = ДобавитьМесяц(ДатаПериода, Смещение);
		КоличествоДнейДробнойЧасти = Цел(30 * (Смещение - Цел(Смещение)));
		Возврат (ДатаНачалаЦелогоСмещения + КоличествоДнейДробнойЧасти * 24*60*60);
	КонецЕсли; 

КонецФункции

// Функция добавляет к заданной дате необходимое количество периодов,
// количество периодов может быть дробным
//
// Параметры
//  ДатаПериода   - Дата, к которой необходимо добавлять периоды
//  Периодичность - СправочникСсылка.Периодичность
//  Смещение      - Число, количество периодов смещения
//
// Возвращаемое значение:
//   Дата
//
Функция ДобавитьИнтервалКДате(ДатаПериода, Периодичность, Смещение)

	Если НЕ ЗначениеЗаполнено(Смещение) Тогда
		Смещение = 0;
	КонецЕсли; 
	
	Если Смещение=0 Тогда
		НоваяДатаПериода = ДатаПериода;
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		НоваяДатаПериода = ДатаПериода + Смещение*24*3600;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		НоваяДатаПериода = ДатаПериода + Смещение*7*24*3600;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		НоваяДатаПериода = ДобавитьНеполныйМесяц(ДатаПериода, Смещение);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		НоваяДатаПериода = ДобавитьНеполныйМесяц(ДатаПериода, Смещение * 3);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		НоваяДатаПериода = ДобавитьНеполныйМесяц(ДатаПериода, Смещение * 12);
	Иначе
		НоваяДатаПериода = ДатаПериода + Смещение*24*3600;
	КонецЕсли;

	Возврат НоваяДатаПериода;

КонецФункции

// Процедура заполняет данными табличную часть основных средств для ремонта.
//
Процедура ЗаполнитьОсновнуюТаблицуОС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Приход"            , ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("СписокОС"          , ОтборОсновныеСредства.ВыгрузитьКолонку("ОС"));
	Запрос.УстановитьПараметр("СписокНоменклатура", ОтборНоменклатура.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ДатаОкончания"     , КонецДня(ДатаОкончанияПланирования));
	Запрос.УстановитьПараметр("ПустаяДата"        , '00010101000000');
	Запрос.УстановитьПараметр("ТекущаяДата"       , ТекущаяДата());
	Запрос.УстановитьПараметр("ВводВЭксплуатацию" , Перечисления.ВидыСобытийОС.ВводВЭксплуатацию);
	
	// Формирование временной таблицы "ДатыПоследнегоРемонта".
	Запрос.Текст =
	"		ВЫБРАТЬ
	|			ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|			Заказы.Номенклатура     КАК Номенклатура,
	|			МАКСИМУМ(ВЫБОР КОГДА ВыполнениеЗаказов.СуммаКол = 0 ИЛИ ВыполнениеЗаказов.СуммаКол ЕСТЬ NULL ТОГДА
	|						ВЫБОР КОГДА ВыполнениеЗаказов.Период ЕСТЬ NULL ТОГДА
	|							ВЫБОР КОГДА ВводВЭксплуатациюОС.Период ЕСТЬ NULL ТОГДА
	|								&ПустаяДата
	|							ИНАЧЕ
	|								ВводВЭксплуатациюОС.Период
	|							КОНЕЦ
	|						ИНАЧЕ
	|							ВыполнениеЗаказов.Период
	|						КОНЕЦ
	|					ИНАЧЕ
	|						Заказы.Заказ.Дата
	|					КОНЕЦ)          КАК ПолученнаяДата,
	|			МАКСИМУМ(ВЫБОР КОГДА ВыполнениеЗаказов.СуммаКол = 0 ИЛИ ВыполнениеЗаказов.СуммаКол ЕСТЬ NULL ТОГДА
	|						Истина
	|					ИНАЧЕ
	|						ЛОЖЬ
	|					КОНЕЦ)          КАК Выполнение,
	|			МАКСИМУМ(ВЫБОР КОГДА ВыполнениеЗаказов.СуммаКол ЕСТЬ NULL ТОГДА
	|						ЛОЖЬ
	|					ИНАЧЕ
	|						ИСТИНА
	|					КОНЕЦ)          КАК БылиЗаказы
	|		ПОМЕСТИТЬ
	|			ДатыПоследнегоРемонта
	|		ИЗ
	|			Справочник.ОсновныеСредства КАК ОсновныеСредства
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			(
	|			ВЫБРАТЬ
	|				СостояниеОсновногоСредстваСрезПервых.ОсновноеСредство КАК ОсновноеСредство,
	|				СостояниеОсновногоСредстваСрезПервых.Период           КАК Период
	|			ИЗ
	|				РегистрСведений.СобытияОС.СрезПервых(" + ?(ОтборОсновныеСредства.Количество() > 0, ", ОсновноеСредство В ИЕРАРХИИ (&СписокОС)", "") + ") КАК СостояниеОсновногоСредстваСрезПервых
	|			ГДЕ
	|				СостояниеОсновногоСредстваСрезПервых.Событие.ВидСобытияОС = &ВводВЭксплуатацию
	|			) КАК ВводВЭксплуатациюОС
	|		ПО
	|			ВводВЭксплуатациюОС.ОсновноеСредство = ОсновныеСредства.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			
	|			(
	|			ВЫБРАТЬ
	|				ЗаказыНаОбслуживаниеОС.ОсновноеСредство КАК ОсновноеСредство,
	|				ЗаказыНаОбслуживаниеОС.Номенклатура     КАК Номенклатура,
	|				ЗаказыНаОбслуживаниеОС.Период           КАК Период,
	|				ЗаказыНаОбслуживаниеОС.Заказ            КАК Заказ
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаОбслуживаниеОС КАК ЗаказыНаОбслуживаниеОС
	|				
	|			ГДЕ
	|				ЗаказыНаОбслуживаниеОС.Период < &ДатаОкончания
	|";
	
	Если ОтборНоменклатура.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + "
		|			И
		|			ЗаказыНаОбслуживаниеОС.Номенклатура В ИЕРАРХИИ (&СписокНоменклатура)
		|";
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|		) КАК Заказы
	|		ПО
	|			Заказы.ОсновноеСредство = ОсновныеСредства.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			
	|			(
	|		ВЫБРАТЬ
	|			СУММА(ВЫБОР КОГДА ЗаказыНаОбслуживаниеОС.ВидДвижения = &Приход ТОГДА
	|					ЗаказыНаОбслуживаниеОС.Количество
	|				ИНАЧЕ
	|					-1 * ЗаказыНаОбслуживаниеОС.Количество
	|				КОНЕЦ) КАК СуммаКол,
	|				ЗаказыНаОбслуживаниеОС.ОсновноеСредство КАК ОсновноеСредство,
	|				ЗаказыНаОбслуживаниеОС.Номенклатура     КАК Номенклатура,
	|				МАКСИМУМ(ЗаказыНаОбслуживаниеОС.Период) КАК Период
	|			ИЗ
	|				РегистрНакопления.ЗаказыНаОбслуживаниеОС КАК ЗаказыНаОбслуживаниеОС
	|				
	|			ГДЕ
	|				ЗаказыНаОбслуживаниеОС.Период < &ДатаОкончания
	|";
	
	Если ОтборНоменклатура.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + "
		|			И
		|			ЗаказыНаОбслуживаниеОС.Номенклатура В ИЕРАРХИИ(&СписокНоменклатура)
		|";
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|
	|			СГРУППИРОВАТЬ ПО
	|				ЗаказыНаОбслуживаниеОС.ОсновноеСредство,
	|				ЗаказыНаОбслуживаниеОС.Номенклатура
	|			) КАК ВыполнениеЗаказов
	|		
	|		ПО
	|			ВыполнениеЗаказов.ОсновноеСредство = ОсновныеСредства.Ссылка
	|			И
	|			ВыполнениеЗаказов.Номенклатура = Заказы.Номенклатура
	|		
	|";
	
	Если ОтборОсновныеСредства.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + "
		|		ГДЕ
		|			ОсновныеСредства.Ссылка В ИЕРАРХИИ (&СписокОС)
		|";
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|		СГРУППИРОВАТЬ ПО
	|			ОсновныеСредства.Ссылка,
	|			Заказы.Номенклатура
	|";
	
	Запрос.Выполнить();
	
	// Формирование временной таблицы "Нормативы".
	Запрос.Текст =
	"			ВЫБРАТЬ
	|				НормативыОбслуживанияОСОС.Ссылка.ПериодичностьОбслуживания    КАК ПериодичностьОбслуживания,
	|				НормативыОбслуживанияОСОС.Ссылка.КоличествоПериодов           КАК КоличествоПериодов,
	|				НормативыОбслуживанияОСОС.ОсновноеСредство                    КАК ОсновноеСредство,
	|				НормативыОбслуживанияОСОС.Ссылка.Услуга                       КАК Номенклатура,
	|				НормативыОбслуживанияОСОС.Ссылка                              КАК Норматив,
	|				НормативыОбслуживанияОСОС.Ссылка.ПараметрВыработки            КАК ПараметрНаработкиОС,
	|				НормативыОбслуживанияОСОС.Ссылка.ЗначениеПараметраВыработки   КАК ЗначениеПараметраНаработкиОС,
	|				НормативыОбслуживанияОСОС.Ссылка.Количество                   КАК Количество
	|			ПОМЕСТИТЬ
	|				Нормативы
	|			ИЗ
	|				Справочник.НормативыОбслуживанияОС.ОС КАК НормативыОбслуживанияОСОС
	|";
	
	Если ОтборНоменклатура.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + "
		|		ГДЕ
		|			НормативыОбслуживанияОСОС.Ссылка.Услуга В ИЕРАРХИИ (&СписокНоменклатура)
		|";
	КонецЕсли; 
	
	Запрос.Выполнить();
	
	// Формирование временной таблицы "ВводВЭксплуатациюОСПоНормативам".
	Запрос.Текст =
	"			ВЫБРАТЬ
	|				СостояниеОсновногоСредстваСрезПервых.ОсновноеСредство КАК ОсновноеСредство,
	|				СостояниеОсновногоСредстваСрезПервых.Период           КАК Период
	|			ПОМЕСТИТЬ
	|				ВводВЭксплуатациюОСПоНормативам
	|			ИЗ
	|				РегистрСведений.СобытияОС.СрезПервых(" + ?(ОтборОсновныеСредства.Количество() > 0, ", ОсновноеСредство В ИЕРАРХИИ (&СписокОС)", "") + ") КАК СостояниеОсновногоСредстваСрезПервых
	|			ГДЕ
	|				СостояниеОсновногоСредстваСрезПервых.Событие.ВидСобытияОС = &ВводВЭксплуатацию
	|";
	
	Запрос.Выполнить();
	
	// Формирование временной таблицы "ДатыПоследнегоРемонтаИНормативы".
	// Полное соединение таблиц "ДатыПоследнегоРемонта" и "Нормативы".
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновноеСредство,
	|	Номенклатура,
	|	МАКСИМУМ(ПолученнаяДата) КАК ПолученнаяДата,
	|	МАКСИМУМ(Выполнение) КАК Выполнение,
	|	МАКСИМУМ(БылиЗаказы) КАК БылиЗаказы,
	|	МАКСИМУМ(ПериодичностьОбслуживания) КАК ПериодичностьОбслуживания,
	|	МАКСИМУМ(КоличествоПериодов) КАК КоличествоПериодов,
	|	МАКСИМУМ(Норматив) КАК Норматив,
	|	МАКСИМУМ(ПараметрНаработкиОС) КАК ПараметрНаработкиОС,
	|	МАКСИМУМ(ЗначениеПараметраНаработкиОС) КАК ЗначениеПараметраНаработкиОС,
	|	МАКСИМУМ(Количество) КАК Количество 
	|ПОМЕСТИТЬ
	|	ДатыПоследнегоРемонтаИНормативы
	|ИЗ 
	|	(
	|		ВЫБРАТЬ
	|			ОсновноеСредство КАК ОсновноеСредство,
	|			Номенклатура КАК Номенклатура,
	|			ПолученнаяДата КАК ПолученнаяДата,
	|			Выполнение КАК Выполнение,
	|			БылиЗаказы КАК БылиЗаказы,
	|			NULL КАК ПериодичностьОбслуживания,
	|			NULL КАК КоличествоПериодов,
	|			NULL КАК Норматив,
	|			NULL КАК ПараметрНаработкиОС,
	|			NULL КАК ЗначениеПараметраНаработкиОС,
	|			NULL КАК Количество
	|      ИЗ
	|			ДатыПоследнегоРемонта
	|
	|		ОБЪЕДИНИТЬ
	|
	|		ВЫБРАТЬ
	|			ОсновноеСредство КАК ОсновноеСредство,
	|			Номенклатура КАК Номенклатура,
	|			NULL КАК ПолученнаяДата,
	|			NULL КАК Выполнение,
	|			NULL КАК БылиЗаказы,
	|			ПериодичностьОбслуживания КАК ПериодичностьОбслуживания,
	|			КоличествоПериодов КАК КоличествоПериодов,
	|			Норматив КАК Норматив,
	|			ПараметрНаработкиОС КАК ПараметрНаработкиОС,
	|			ЗначениеПараметраНаработкиОС КАК ЗначениеПараметраНаработкиОС,
	|			Количество КАК Количество
	|      ИЗ
	|			Нормативы
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ
	|	ПО ОсновноеСредство, Номенклатура
	|";
	Запрос.Выполнить();
	
	// Формирование временной таблицы "ТаблицаОСПоЗаказам".
	Запрос.Текст =
	"	ВЫБРАТЬ
	|		ДатыПоследнегоРемонтаИНормативы.БылиЗаказы                                                       КАК БылиЗаказы,
	|		ДатыПоследнегоРемонтаИНормативы.ОсновноеСредство                                                 КАК ОсновноеСредство,
	|		ДатыПоследнегоРемонтаИНормативы.Номенклатура                                                     КАК Номенклатура,
	|		ЕСТЬNULL(ДатыПоследнегоРемонтаИНормативы.ПолученнаяДата, ВводВЭксплуатациюОСПоНормативам.Период) КАК ПоследняяДата,
	|		ЕСТЬNULL(ДатыПоследнегоРемонтаИНормативы.Выполнение, ЛОЖЬ)                                       КАК Выполнение,
	|		ДатыПоследнегоРемонтаИНормативы.ПериодичностьОбслуживания                                        КАК ПериодичностьОбслуживания,
	|		ДатыПоследнегоРемонтаИНормативы.КоличествоПериодов                                               КАК КоличествоПериодов,
	|		ДатыПоследнегоРемонтаИНормативы.Норматив                                                         КАК Норматив,
	|		ДатыПоследнегоРемонтаИНормативы.ПараметрНаработкиОС                                              КАК ПараметрНаработкиОС,
	|		ДатыПоследнегоРемонтаИНормативы.ЗначениеПараметраНаработкиОС                                     КАК ЗначениеПараметраНаработкиОС,
	|		ДатыПоследнегоРемонтаИНормативы.Количество                                                       КАК Количество
	|	ПОМЕСТИТЬ
	|		ТаблицаОСПоЗаказам
	|	ИЗ
	|		ДатыПоследнегоРемонтаИНормативы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВводВЭксплуатациюОСПоНормативам
	|		ПО ДатыПоследнегоРемонтаИНормативы.ОсновноеСредство = ВводВЭксплуатациюОСПоНормативам.ОсновноеСредство
	|
	|	ГДЕ	НЕ ДатыПоследнегоРемонтаИНормативы.Номенклатура ЕСТЬ NULL
	|";
	Запрос.Выполнить();
	
	// Формирование временной таблицы "ТаблицаОСПоНаработкам".
	Запрос.Текст =
	"	ВЫБРАТЬ
	|		НаработкаДляОбслуживанияОС.КоличествоОборот            КАК КоличествоОстаток,
	|		НаработкаДляОбслуживанияОС.ОсновноеСредство            КАК ОсновноеСредство,
	|		НаработкаДляОбслуживанияОС.ПараметрВыработки           КАК ПараметрНаработкиОС,
	|		НаработкаДляОбслуживанияОС.Период         КАК Период,
	|		Нормативы.ПериодичностьОбслуживания                           КАК ПериодичностьОбслуживания,
	|		Нормативы.КоличествоПериодов                                  КАК КоличествоПериодов,
	|		Нормативы.Номенклатура                                        КАК Номенклатура,
	|		Нормативы.Норматив                                            КАК Норматив,
	|		Нормативы.ЗначениеПараметраНаработкиОС                        КАК ЗначениеПараметраНаработкиОС,
	|		Нормативы.Количество                                          КАК Количество,
	|		ВЫБОР КОГДА НаработкаДляОбслуживанияОС.КоличествоОборот >= Нормативы.ЗначениеПараметраНаработкиОС
	|			  ТОГДА ИСТИНА
	|			  ИНАЧЕ ЛОЖЬ КОНЕЦ КАК РемонтПоНаработке
	|	ПОМЕСТИТЬ
	|		ТаблицаОСПоНаработкам
	|	ИЗ
	|		РегистрНакопления.ВыработкаОС.Обороты(, &ДатаОкончания, Регистратор" + ?(ОтборОсновныеСредства.Количество() > 0, ", ОсновноеСредство В ИЕРАРХИИ (&СписокОС)", "") + ") КАК НаработкаДляОбслуживанияОС
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		(
	|		ВЫБРАТЬ
	|			НормативыОбслуживанияОСОС.Ссылка.ПериодичностьОбслуживания    КАК ПериодичностьОбслуживания,
	|			НормативыОбслуживанияОСОС.Ссылка.КоличествоПериодов           КАК КоличествоПериодов,
	|			НормативыОбслуживанияОСОС.ОсновноеСредство                    КАК ОсновноеСредство,
	|			НормативыОбслуживанияОСОС.Ссылка.Услуга                       КАК Номенклатура,
	|			НормативыОбслуживанияОСОС.Ссылка                              КАК Норматив,
	|			НормативыОбслуживанияОСОС.Ссылка.ПараметрВыработки            КАК ПараметрНаработкиОС,
	|			НормативыОбслуживанияОСОС.Ссылка.ЗначениеПараметраВыработки   КАК ЗначениеПараметраНаработкиОС,
	|			НормативыОбслуживанияОСОС.Ссылка.Количество                   КАК Количество
	|		ИЗ
	|			Справочник.НормативыОбслуживанияОС.ОС КАК НормативыОбслуживанияОСОС
	|";
	
	Если ОтборНоменклатура.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + "
		|		ГДЕ
		|			НормативыОбслуживанияОСОС.Ссылка.Услуга В ИЕРАРХИИ (&СписокНоменклатура)
		|";
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|
	|		) КАК Нормативы
	|		
	|	ПО
	|		Нормативы.ПараметрНаработкиОС = НаработкаДляОбслуживанияОС.ПараметрВыработки
	|		И
	|		Нормативы.ОсновноеСредство = НаработкаДляОбслуживанияОС.ОсновноеСредство
	|
	|	ГДЕ
	|		НаработкаДляОбслуживанияОС.КоличествоОборот > 0
	|";
	Запрос.Выполнить();
	
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ОсновноеСредство КАК ОсновноеСредство,
	//|	Номенклатура КАК Номенклатура,
	//|	Норматив КАК Норматив,
	//|	Период КАК Период,
	//|   МАКСИМУМ(БылиЗаказы) КАК БылиЗаказы,
	//|	МАКСИМУМ(Выполнение) КАК Выполнение,
	//|	МАКСИМУМ(ПериодичностьОбслуживания) КАК ПериодичностьОбслуживания,
	//|	МАКСИМУМ(КоличествоПериодов) КАК КоличествоПериодов,
	//|	МАКСИМУМ(ПараметрНаработкиОС) КАК ПараметрНаработкиОС,
	//|	МАКСИМУМ(Количество) КАК Количество,
	//|	МАКСИМУМ(КоличествоОстаток) КАК КоличествоОстаток,
	//|	МАКСИМУМ(ПараметрНаработкиОС) КАК ПараметрНаработкиОС,
	//|	МАКСИМУМ(ПериодичностьОбслуживания) КАК ПериодичностьОбслуживания,
	//|	МАКСИМУМ(КоличествоПериодов) КАК КоличествоПериодов,
	//|	МАКСИМУМ(ЗначениеПараметраНаработкиОС) КАК ЗначениеПараметраНаработкиОС,
	//|	МАКСИМУМ(Количество) КАК Количество,
	//|	МАКСИМУМ(РемонтПоНаработке) КАК РемонтПоНаработке
	//|ИЗ
	//|	(
	//|		ВЫБРАТЬ
	//|			ОсновноеСредство КАК ОсновноеСредство,
	//|			Номенклатура КАК Номенклатура,
	//|			Норматив КАК Норматив,
	//|			ПоследняяДата КАК Период,
	//|			БылиЗаказы КАК БылиЗаказы,
	//|			Выполнение КАК Выполнение,
	//|			ПериодичностьОбслуживания КАК ПериодичностьОбслуживания,
	//|			КоличествоПериодов КАК КоличествоПериодов,
	//|			ПараметрНаработкиОС КАК ПараметрНаработкиОС,
	//|			Количество КАК Количество,
	//|			NULL КАК КоличествоОстаток,
	//|			NULL КАК ПараметрНаработкиОС,
	//|			NULL КАК ПериодичностьОбслуживания,
	//|			NULL КАК КоличествоПериодов,
	//|			NULL КАК ЗначениеПараметраНаработкиОС,
	//|			NULL КАК Количество,
	//|			NULL КАК РемонтПоНаработке
	//|		ИЗ
	//|			ТаблицаОСПоЗаказам
	//|
	//|		ОБЪЕДИНИТЬ
	//|
	//|		ВЫБРАТЬ
	//|
	//|			ОсновноеСредство КАК ОсновноеСредство,
	//|			Номенклатура КАК Номенклатура,
	//|			Норматив КАК Норматив,
	//|			Период КАК Период,
	//|			NULL КАК БылиЗаказы,
	//|			NULL КАК Выполнение,
	//|			NULL КАК ПериодичностьОбслуживания,
	//|			NULL КАК КоличествоПериодов,
	//|			NULL КАК ПараметрНаработкиОС,
	//|			NULL КАК Количество,
	//|			КоличествоОстаток КАК КоличествоОстаток,
	//|			ПараметрНаработкиОС КАК ПараметрНаработкиОС,
	//|			ПериодичностьОбслуживания КАК ПериодичностьОбслуживания,
	//|			КоличествоПериодов КАК КоличествоПериодов,
	//|			ЗначениеПараметраНаработкиОС КАК ЗначениеПараметраНаработкиОС,
	//|			Количество КАК Количество,
	//|			РемонтПоНаработке КАК РемонтПоНаработке
	//|		ИЗ
	//|			ТаблицаОСПоНаработкам
	//|
	//|	СГРУППИРОВАТЬ ПО ОсновноеСредство, Номенклатура, Норматив, Период
	//|
	//
	//
	//
	//
	//|   ПО ТаблицаОСПоНаработкам.ОсновноеСредство = ТаблицаОСПоЗаказам.ОсновноеСредство
	//|	 И ТаблицаОСПоНаработкам.Номенклатура = ТаблицаОСПоЗаказам.Номенклатура
	//|	 И ТаблицаОСПоНаработкам.Норматив = ТаблицаОСПоЗаказам.Норматив
	//|	 И ТаблицаОСПоНаработкам.Период > ТаблицаОСПоЗаказам.ПоследняяДата
	//
	//|		ДатыПоследнегоРемонтаИНормативы.БылиЗаказы                                                       КАК БылиЗаказы,
	//|		ЕСТЬNULL(ДатыПоследнегоРемонтаИНормативы.Выполнение, ЛОЖЬ)                                       КАК Выполнение,
	//|		ДатыПоследнегоРемонтаИНормативы.ПериодичностьОбслуживания                                        КАК ПериодичностьОбслуживания,
	//|		ДатыПоследнегоРемонтаИНормативы.КоличествоПериодов                                               КАК КоличествоПериодов,
	//|		ДатыПоследнегоРемонтаИНормативы.ПараметрНаработкиОС                                              КАК ПараметрНаработкиОС,
	//|		ДатыПоследнегоРемонтаИНормативы.ЗначениеПараметраНаработкиОС                                     КАК ЗначениеПараметраНаработкиОС,
	//|		ДатыПоследнегоРемонтаИНормативы.Количество                                                       КАК Количество
	//
	//|		НаработкаДляОбслуживанияОС.КоличествоОборот            КАК КоличествоОстаток,
	//|		НаработкаДляОбслуживанияОС.ПараметрВыработки           КАК ПараметрНаработкиОС,
	//|		Нормативы.ПериодичностьОбслуживания                           КАК ПериодичностьОбслуживания,
	//|		Нормативы.КоличествоПериодов                                  КАК КоличествоПериодов,
	//|		Нормативы.ЗначениеПараметраНаработкиОС                        КАК ЗначениеПараметраНаработкиОС,
	//|		Нормативы.Количество                                          КАК Количество,
	//|		ВЫБОР КОГДА НаработкаДляОбслуживанияОС.КоличествоОборот >= Нормативы.ЗначениеПараметраНаработкиОС
	//|			  ТОГДА ИСТИНА
	//|			  ИНАЧЕ ЛОЖЬ КОНЕЦ КАК РемонтПоНаработке
	//
	//
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	
	|	ИСТИНА КАК Использование,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.ОсновноеСредство ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.ОсновноеСредство ИНАЧЕ
	|			ТаблицаОСПоЗаказам.ОсновноеСредство КОНЕЦ КАК ОсновноеСредство,
	|
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.Номенклатура ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.Номенклатура ИНАЧЕ
	|			ТаблицаОСПоЗаказам.Номенклатура КОНЕЦ КАК Номенклатура,
	|
	|	ТаблицаОСПоЗаказам.ПоследняяДата КАК ПоследняяДатаРемонта,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.Выполнение ЕСТЬ NULL ТОГДА
	|		ИСТИНА ИНАЧЕ
	|			ТаблицаОСПоЗаказам.Выполнение КОНЕЦ КАК ПоследнийРемонтЗавершен,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.ПериодичностьОбслуживания ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.ПериодичностьОбслуживания ИНАЧЕ
	|			ТаблицаОСПоЗаказам.ПериодичностьОбслуживания КОНЕЦ КАК ПериодичностьОбслуживанияПоНормативу,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.КоличествоПериодов ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.КоличествоПериодов ИНАЧЕ
	|			ТаблицаОСПоЗаказам.КоличествоПериодов КОНЕЦ КАК КоличествоПериодов,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.Норматив ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.Норматив ИНАЧЕ
	|			ТаблицаОСПоЗаказам.Норматив КОНЕЦ КАК Норматив,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.ПараметрНаработкиОС ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.ПараметрНаработкиОС.ЕдиницаИзмерения ИНАЧЕ
	|			ТаблицаОСПоЗаказам.ПараметрНаработкиОС.ЕдиницаИзмерения КОНЕЦ КАК ЕдиницаНаработкиПоНормативу,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.ПараметрНаработкиОС ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.ПараметрНаработкиОС ИНАЧЕ
	|			ТаблицаОСПоЗаказам.ПараметрНаработкиОС КОНЕЦ КАК ПараметрНаработкиОСПоНормативу,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.ЗначениеПараметраНаработкиОС ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.ЗначениеПараметраНаработкиОС ИНАЧЕ
	|			ТаблицаОСПоЗаказам.ЗначениеПараметраНаработкиОС КОНЕЦ КАК ЗначениеПараметраНаработкиОСПоНормативу,
	|	
	|	СУММА(ВЫБОР КОГДА ТаблицаОСПоНаработкам.КоличествоОстаток ЕСТЬ NULL ТОГДА
	|		0 ИНАЧЕ
	|			ТаблицаОСПоНаработкам.КоличествоОстаток КОНЕЦ) КАК ЗначениеПараметраНаработкиОС,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.БылиЗаказы ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ ИНАЧЕ
	|			ТаблицаОСПоЗаказам.БылиЗаказы КОНЕЦ КАК НаличиеЗаказовНаРемонтОС,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.Количество ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.Количество ИНАЧЕ
	|			ТаблицаОСПоЗаказам.Количество КОНЕЦ КАК КоличествоУслугиПоНормативу,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоНаработкам.РемонтПоНаработке = ИСТИНА ТОГДА
	|		ИСТИНА ИНАЧЕ
	|			ЛОЖЬ КОНЕЦ КАК РемонтПоНаработке
	|	
	|ИЗ
	|	ТаблицаОСПоЗаказам
	| 	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		(
	|			ВЫБРАТЬ *
	|			ИЗ
	|				ТаблицаОСПоЗаказам
	| 				ПРАВОЕ СОЕДИНЕНИЕ ТаблицаОСПоНаработкам
	|		  	 	ПО ТаблицаОСПоНаработкам.ОсновноеСредство = ТаблицаОСПоЗаказам.ОсновноеСредство
	|				 И ТаблицаОСПоНаработкам.Номенклатура = ТаблицаОСПоЗаказам.Номенклатура
	|				 И ТаблицаОСПоНаработкам.Норматив = ТаблицаОСПоЗаказам.Норматив
	|				 И ТаблицаОСПоНаработкам.Период > ТаблицаОСПоЗаказам.ПоследняяДата
	|		) КАК ТаблицаОСПоНаработкам
	|   ПО ТаблицаОСПоНаработкам.ОсновноеСредство = ТаблицаОСПоЗаказам.ОсновноеСредство
	|	 И ТаблицаОСПоНаработкам.Номенклатура = ТаблицаОСПоЗаказам.Номенклатура
	|	 И ТаблицаОСПоНаработкам.Норматив = ТаблицаОСПоЗаказам.Норматив
	|	 И ТаблицаОСПоНаработкам.Период > ТаблицаОСПоЗаказам.ПоследняяДата
	|
	|	ГДЕ
	|		(НЕ ТаблицаОСПоЗаказам.ПоследняяДата ЕСТЬ NULL И ТаблицаОСПоЗаказам.ПоследняяДата <> &ПустаяДата)
	|		И
	|		((НЕ ТаблицаОСПоНаработкам.КоличествоОстаток ЕСТЬ NULL И ТаблицаОСПоНаработкам.РемонтПоНаработке = ИСТИНА)
	|		 ИЛИ
	|		(ТаблицаОСПоЗаказам.ПоследняяДата <= &ДатаОкончания))
	|
	|СГРУППИРОВАТЬ ПО
	|	ИСТИНА,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.ОсновноеСредство ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.ОсновноеСредство ИНАЧЕ
	|			ТаблицаОСПоЗаказам.ОсновноеСредство КОНЕЦ,
	|
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.Номенклатура ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.Номенклатура ИНАЧЕ
	|			ТаблицаОСПоЗаказам.Номенклатура КОНЕЦ,
	|
	|	ТаблицаОСПоЗаказам.ПоследняяДата,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.Выполнение ЕСТЬ NULL ТОГДА
	|		ИСТИНА ИНАЧЕ
	|			ТаблицаОСПоЗаказам.Выполнение КОНЕЦ,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.ПериодичностьОбслуживания ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.ПериодичностьОбслуживания ИНАЧЕ
	|			ТаблицаОСПоЗаказам.ПериодичностьОбслуживания КОНЕЦ,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.КоличествоПериодов ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.КоличествоПериодов ИНАЧЕ
	|			ТаблицаОСПоЗаказам.КоличествоПериодов КОНЕЦ,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.Норматив ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.Норматив ИНАЧЕ
	|			ТаблицаОСПоЗаказам.Норматив КОНЕЦ,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.ПараметрНаработкиОС ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.ПараметрНаработкиОС.ЕдиницаИзмерения ИНАЧЕ
	|			ТаблицаОСПоЗаказам.ПараметрНаработкиОС.ЕдиницаИзмерения КОНЕЦ,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.ПараметрНаработкиОС ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.ПараметрНаработкиОС ИНАЧЕ
	|			ТаблицаОСПоЗаказам.ПараметрНаработкиОС КОНЕЦ,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.ЗначениеПараметраНаработкиОС ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.ЗначениеПараметраНаработкиОС ИНАЧЕ
	|			ТаблицаОСПоЗаказам.ЗначениеПараметраНаработкиОС КОНЕЦ,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.БылиЗаказы ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ ИНАЧЕ
	|			ТаблицаОСПоЗаказам.БылиЗаказы КОНЕЦ,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоЗаказам.Количество ЕСТЬ NULL ТОГДА
	|		ТаблицаОСПоНаработкам.Количество ИНАЧЕ
	|			ТаблицаОСПоЗаказам.Количество КОНЕЦ,
	|	
	|	ВЫБОР КОГДА ТаблицаОСПоНаработкам.РемонтПоНаработке = ИСТИНА ТОГДА
	|		ИСТИНА ИНАЧЕ
	|			ЛОЖЬ КОНЕЦ
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗапроса.Колонки.Добавить("НоваяДатаРемонта"         , Новый ОписаниеТипов("Дата"));
	ТаблицаЗапроса.Колонки.Добавить("НоваяРасчетнаяДатаРемонта", Новый ОписаниеТипов("Дата"));
	
	ИндексСтроки = 0;
	Пока Истина Цикл
		
		Если ИндексСтроки > ТаблицаЗапроса.Количество() - 1 Тогда
			Прервать;
		КонецЕсли; 
		
		СтрокаТаблицы = ТаблицаЗапроса[ИндексСтроки];
		
		НоваяДата = ДобавитьИнтервалКДате(СтрокаТаблицы.ПоследняяДатаРемонта, СтрокаТаблицы.ПериодичностьОбслуживанияПоНормативу, СтрокаТаблицы.КоличествоПериодов);
		
		Если НЕ (ЗначениеЗаполнено(СтрокаТаблицы.ПоследняяДатаРемонта) И ((СтрокаТаблицы.ЗначениеПараметраНаработкиОС > 0 И СтрокаТаблицы.РемонтПоНаработке) ИЛИ НоваяДата <= КонецДня(ДатаОкончанияПланирования))) Тогда
			ТаблицаЗапроса.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаТаблицы.РемонтПоНаработке Тогда
			Если НоваяДата < ТекущаяДата() Тогда
				СтрокаТаблицы.НоваяДатаРемонта = ТекущаяДата();
			Иначе
				СтрокаТаблицы.НоваяДатаРемонта = НоваяДата;
			КонецЕсли; 
		Иначе
			СтрокаТаблицы.НоваяДатаРемонта = ТекущаяДата();
		КонецЕсли; 
		
		Если СтрокаТаблицы.ЗначениеПараметраНаработкиОС = 0 ИЛИ НЕ СтрокаТаблицы.РемонтПоНаработке Тогда
			СтрокаТаблицы.НоваяРасчетнаяДатаРемонта = НоваяДата;
		Иначе
			СтрокаТаблицы.НоваяРасчетнаяДатаРемонта = ТекущаяДата();
		КонецЕсли; 
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла; 
	
	ОсновныеСредстваДляРемонта.Загрузить(ТаблицаЗапроса);
	
КонецПроцедуры

// Процедура заполняет данными дерево значений - услуги по ремонту ОС и даты
// планируемых ремонтов.
//
// Параметры:
//  ДеревоУслуг - дерево значений, услуги по ремеонту ОС и предполагаемые даты ремонта
//   это дерево необходимо заполнить данными
//  ЭлементФормыДеревоУслуг - табличное поле, ЭУ для отображения даннных дерева значений ДеревоУслуг.
//
Процедура ЗаполнитьДерево(ДеревоУслуг, ЭлементФормыДеревоУслуг) Экспорт

	
	Если ДеревоУслуг.Строки.Количество() > 0 Тогда
		
		РазвернутыеСтроки = Новый Массив;
		
		// Запомним строки текущие дерева
		Если ЭлементФормыДеревоУслуг.ТекущиеДанные <> Неопределено Тогда
			Если ТипЗнч(ЭлементФормыДеревоУслуг.ТекущиеДанные.УслугаДата) = Тип("Дата") Тогда
				ТекущаяСтрокаДата         = ЭлементФормыДеревоУслуг.ТекущиеДанные.УслугаДата;
				ТекущаяСтрокаНоменклатура = ЭлементФормыДеревоУслуг.ТекущиеДанные.Родитель.УслугаДата;
			Иначе
				ТекущаяСтрокаНоменклатура = ЭлементФормыДеревоУслуг.ТекущиеДанные.УслугаДата;
			КонецЕсли; 
		КонецЕсли;
		
		// Запомним разворот строк дерева, это необходимо при повторном заполнении дерева
		Для каждого СтрокаДерева Из ДеревоУслуг.Строки Цикл
			Если ЭлементФормыДеревоУслуг.Развернут(СтрокаДерева) Тогда
				РазвернутыеСтроки.Добавить(СтрокаДерева.УслугаДата);
			КонецЕсли;
		КонецЦикла; 
		
	Иначе
		
		РазвернутыеСтроки = Неопределено;
		
	КонецЕсли; 
	
	ДеревоУслуг.Строки.Очистить();
	
	ТаблицаЗапроса = ОсновныеСредстваДляРемонта.Выгрузить();
	ТаблицаЗапроса.Свернуть("Номенклатура, НоваяДатаРемонта");
	ТаблицаЗапроса.Сортировать("Номенклатура ВОЗР, НоваяДатаРемонта ВОЗР");
	
	// Заполним дерево данными
	
	ПоследняяНоменклатура = Неопределено;
	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
	
		Если СтрокаТаблицы.Номенклатура <> ПоследняяНоменклатура Тогда
			СтрокаНоменклатура = ДеревоУслуг.Строки.Добавить();
			СтрокаНоменклатура.УслугаДата = СтрокаТаблицы.Номенклатура;
			ПоследняяДатаРемонта = Неопределено;
			ПоследняяНоменклатура = СтрокаТаблицы.Номенклатура;
		КонецЕсли;
		
		Если СтрокаТаблицы.НоваяДатаРемонта <> ПоследняяДатаРемонта Тогда
			СтрокаДатаРемонта = СтрокаНоменклатура.Строки.Добавить();
			СтрокаДатаРемонта.УслугаДата = СтрокаТаблицы.НоваяДатаРемонта;
		КонецЕсли;
	
	КонецЦикла;
	
	// Развернем при необходимости строки
	Если ТипЗнч(РазвернутыеСтроки) = Тип("Массив") Тогда
		Для каждого УслугаДата Из РазвернутыеСтроки Цикл
			СтрокаДерева = ДеревоУслуг.Строки.Найти(УслугаДата, "УслугаДата");
			Если СтрокаДерева <> Неопределено Тогда
				ЭлементФормыДеревоУслуг.Развернуть(СтрокаДерева)
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Для каждого СтрокаДерева Из ДеревоУслуг.Строки Цикл
			ЭлементФормыДеревоУслуг.Развернуть(СтрокаДерева)
		КонецЦикла; 
	КонецЕсли; 
	
	// Найдем строку, на которой находились до заполнения дерева
	Если ТекущаяСтрокаДата = Неопределено И ТекущаяСтрокаНоменклатура <> Неопределено Тогда
		СтрокаДерева = ДеревоУслуг.Строки.Найти(ТекущаяСтрокаНоменклатура, "УслугаДата");
		Если СтрокаДерева <> Неопределено Тогда
			ЭлементФормыДеревоУслуг.ТекущаяСтрока = СтрокаДерева;
		КонецЕсли; 
	ИначеЕсли ТекущаяСтрокаДата <> Неопределено И ТекущаяСтрокаНоменклатура <> Неопределено Тогда
		СтрокаДерева = ДеревоУслуг.Строки.Найти(ТекущаяСтрокаНоменклатура, "УслугаДата");
		Если СтрокаДерева <> Неопределено Тогда
			СтрокаДаты = СтрокаДерева.Строки.Найти(ТекущаяСтрокаДата, "УслугаДата");
			Если СтрокаДаты <> Неопределено Тогда
				ЭлементФормыДеревоУслуг.ТекущаяСтрока = СтрокаДаты;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

	Если ЭлементФормыДеревоУслуг.ТекущаяСтрока = Неопределено И ДеревоУслуг.Строки.Количество() > 0 Тогда
		ЭлементФормыДеревоУслуг.ТекущаяСтрока = ДеревоУслуг.Строки[0];
	КонецЕсли; 

КонецПроцедуры

// Функция формирует заказы на основе настроек дат и услуг по обслуживанию ОС.
// 
// Параметры:
//  ДеревоУслуг - дерево значений, услуги по ремонту и даты предполагаемых ремонтов
//  СписокЗаказов - список значений, заказы на обслуживание ОС, заполняется при формировании самих заказов.
//
//  Возвращаемое значение:
//  Булево - успешно ли сформированы заказы.
//
Функция СформироватьЗаказыНаРемонт(ДеревоУслуг, СписокЗаказов) Экспорт
	
	СписокЗаказов = Новый СписокЗначений;
	
	НачатьТранзакцию();
	Отмена = Ложь;
	
	Для каждого СтрокаУслуги Из ДеревоУслуг.Строки Цикл
		Для каждого СтрокаДаты Из СтрокаУслуги.Строки Цикл
			Если Отмена Тогда
				Прервать;
			КонецЕсли; 
			СтрокиТЧ = ОсновныеСредстваДляРемонта.НайтиСтроки(Новый Структура("НоваяДатаРемонта, Номенклатура, Использование", СтрокаДаты.УслугаДата, СтрокаУслуги.УслугаДата, Истина));
			Если СтрокиТЧ.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			НовыйЗаказ = Документы.ЗаказНаОбслуживаниеОС.СоздатьДокумент();
			НовыйЗаказ.Дата = ТекущаяДата();
			НовыйЗаказ.ДатаОбслуживанияОС = СтрокаДаты.УслугаДата;
			НовыйЗаказ.Услуга             = СтрокаУслуги.УслугаДата;
			Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
				НоваяСтрокаДокумента = НовыйЗаказ.ОС.Добавить();
				НоваяСтрокаДокумента.ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
				НоваяСтрокаДокумента.Количество = СтрокаТЧ.КоличествоУслугиПоНормативу;
			КонецЦикла; 
			
			Попытка
				НовыйЗаказ.Записать(РежимЗаписиДокумента.Проведение);
				СписокЗаказов.Добавить(НовыйЗаказ.Ссылка);
				Сообщить("Сформирован " + Строка(НовыйЗаказ));
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, (Строка(НовыйЗаказ) + " не записан!"));
				Отмена = Истина;
			КонецПопытки;
			
		КонецЦикла;
	КонецЦикла;
	
	Если Отмена Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	Иначе
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	КонецЕсли;

КонецФункции
