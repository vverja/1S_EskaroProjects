Перем мИтоговаяТаблица Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем ДопустимыеТипыДокументов Экспорт;

Перем СписокСформированныхДокументов Экспорт;

Перем ДопПараметры Экспорт;

Перем ПреставленияДопПараметров Экспорт;

Перем мНеЗаписыватьДокументы Экспорт; 

Перем мОтбиратьНоменклатуруПоЗаказам Экспорт;

Процедура ОбновитьДоговора(ПараметрОтборДоговоровКонтрагентов = Неопределено) Экспорт
	
	Если РежимПоДатам Тогда
	
		ОбновитьДоговораПоДатам(ПараметрОтборДоговоровКонтрагентов);
		
	Иначе	
		
		// установим в таблицах  дату равной дате заполнения
		СписокТаблиц = Новый Массив();
		СписокТаблиц.Добавить("Договора");
		СписокТаблиц.Добавить("ИсточникиНоменклатуры");
		СписокТаблиц.Добавить("Товары");
		СписокТаблиц.Добавить("ВозвратнаяТара");
		СписокТаблиц.Добавить("Услуги");
		СписокТаблиц.Добавить("ОС");
		СписокТаблиц.Добавить("НематериальныеАктивы");
			
		МассивДляЗаполненияДаты = Новый Массив();
			
		Для каждого Таблица Из СписокТаблиц Цикл
			
			ТЧ = ЭтотОбъект[Таблица];
				
			Для Инд = МассивДляЗаполненияДаты.Количество() + 1 По ТЧ.Количество() Цикл
				//Добавим в массив элементы, если его размерность меньше количества строк в таблице
				МассивДляЗаполненияДаты.Добавить(Дата);
			КонецЦикла; 
				
			ТЧ.ЗагрузитьКолонку(МассивДляЗаполненияДаты, "Дата");
			
		КонецЦикла;
		
		ОбновитьДоговораНаДату(ПараметрОтборДоговоровКонтрагентов);
	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновитьДоговораНаДату(ПараметрОтборДоговоровКонтрагентов)
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Отгрузка", 		Перечисления.РасчетыВозврат.Расчеты);
	Запрос.УстановитьПараметр("Возврат", 		Перечисления.РасчетыВозврат.Возврат);
	
	СобытияПродажиНалоговыйУчетРасчеты = Новый СписокЗначений();
	СобытияПродажиНалоговыйУчетРасчеты.Добавить(Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю);
	СобытияПродажиНалоговыйУчетРасчеты.Добавить(Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем);
	Запрос.УстановитьПараметр("СобытияПродажиНалоговыйУчетРасчеты", СобытияПродажиНалоговыйУчетРасчеты);
	Запрос.УстановитьПараметр("ПродажиНалоговыйУчетРасчетыОплата", Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем);
	
	СобытияПродажиНалоговыйУчетВозврат = Новый СписокЗначений();
	СобытияПродажиНалоговыйУчетВозврат.Добавить(Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя);
	СобытияПродажиНалоговыйУчетВозврат.Добавить(Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю);
	Запрос.УстановитьПараметр("СобытияПродажиНалоговыйУчетВозврат", СобытияПродажиНалоговыйУчетВозврат);
	Запрос.УстановитьПараметр("ПродажиНалоговыйУчетВозвратОплата", Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю);
	
	СобытияОжидаемыйИПодтвержденныйНДСПродажОтгрузка = Новый СписокЗначений();
	СобытияОжидаемыйИПодтвержденныйНДСПродажОтгрузка.Добавить(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация);
	Запрос.УстановитьПараметр("СобытияОжидаемыйИПодтвержденныйНДСПродажОтгрузка", СобытияОжидаемыйИПодтвержденныйНДСПродажОтгрузка);
	
	СобытияОжидаемыйИПодтвержденныйНДСПродажВозврат = Новый СписокЗначений();
	СобытияОжидаемыйИПодтвержденныйНДСПродажВозврат.Добавить(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат);
	Запрос.УстановитьПараметр("СобытияОжидаемыйИПодтвержденныйНДСПродажВозврат", СобытияОжидаемыйИПодтвержденныйНДСПродажВозврат);
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ДополнительныеУсловия = "";
	Если Не ПараметрОтборДоговоровКонтрагентов = Неопределено Тогда
		
		ДополнительныеУсловия =  ДополнительныеУсловия + " И ДоговорКонтрагента В (&ДоговораКонтрагентов) И Сделка В (&Сделки) ";
		Запрос.УстановитьПараметр("ДоговораКонтрагентов", ПараметрОтборДоговоровКонтрагентов.ВыгрузитьКолонку("ДоговорКонтрагента"));
		Запрос.УстановитьПараметр("Сделки", ПараметрОтборДоговоровКонтрагентов.ВыгрузитьКолонку("Сделка"));
		
	Иначе
		
		ОтборДоговоров = ОтборДоговоровКонтрагентов.Выгрузить();
		ОтборДоговоров.Свернуть("ДоговорКонтрагента", "");
		СтрокаСПустымДоговором = ОтборДоговоров.Найти(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Если НЕ СтрокаСПустымДоговором = Неопределено Тогда 
			ОтборДоговоров.Удалить(СтрокаСПустымДоговором);	
		КонецЕсли;
		
		// если остались строки, значит устанавливаем фильтр по договорам,
		// иначе - по контрагентам
		Если ОтборДоговоров.Количество() > 0 Тогда
			
			ДополнительныеУсловия =  ДополнительныеУсловия + " И ДоговорКонтрагента В (&ДоговораКонтрагентов) ";
			Запрос.УстановитьПараметр("ДоговораКонтрагентов", ОтборДоговоров);
			
		Иначе 
			
			ОтборКонтрагентов = ОтборДоговоровКонтрагентов.Выгрузить();
			ОтборКонтрагентов.Свернуть("Контрагент", "");
			Если ОтборКонтрагентов.Количество() > 0 Тогда
				ДополнительныеУсловия =  ДополнительныеУсловия + " И ДоговорКонтрагента.Владелец В ИЕРАРХИИ(&Контрагенты) ";
				Запрос.УстановитьПараметр("Контрагенты", ОтборКонтрагентов);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;		
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Запрос.УстановитьПараметр("МоментВремени", 	'000101010000');
	Иначе		
		Запрос.УстановитьПараметр("МоментВремени", 	Новый Граница(Дата, ВидГраницы.Включая));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	ТекстЗапросаРасчеты=
				  "	&Дата КАК Дата,
				   |	&Отгрузка КАК РасчетыВозврат,
	               |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента ЕСТЬ NULL ТОГДА 
			   	   |		ПродажиНалоговыйУчет.ДоговорКонтрагента.Владелец 
				   |	 ИНАЧЕ 
				   |		ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента.Владелец 	
				   |	КОНЕЦ КАК Контрагент,
	               |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента ЕСТЬ NULL ТОГДА 
			   	   |		ПродажиНалоговыйУчет.ДоговорКонтрагента 		  
				   |	ИНАЧЕ 
				   |		ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента 		
				   |	КОНЕЦ КАК ДоговорКонтрагента,
				   
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента ЕСТЬ NULL ТОГДА 
			   	   |		ПродажиНалоговыйУчет.Сделка 		  
				   |	ИНАЧЕ 
				   |		ОжидаемыйИПодтвержденныйНДСПродаж.Сделка
				   |	КОНЕЦ КАК Сделка,
				   
				   
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента ЕСТЬ NULL ТОГДА 
				   |		ВЫБОР КОГДА ПродажиНалоговыйУчет.ВозвратнаяТара = Истина ТОГДА ПродажиНалоговыйУчет.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам ИНАЧЕ ПродажиНалоговыйУчет.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам КОНЕЦ 
			   	   |	  ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.ВозвратнаяТара = Истина ТОГДА ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам ИНАЧЕ ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам КОНЕЦ 
				   |	КОНЕЦ КАК Схема,
	               |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента ЕСТЬ NULL ТОГДА 
				   |		ПродажиНалоговыйУчет.ВозвратнаяТара 
				   |	 ИНАЧЕ
				   |		ОжидаемыйИПодтвержденныйНДСПродаж.ВозвратнаяТара 
				   |	КОНЕЦ КАК ЗаТару,";
				   Для каждого ДопПараметр Из ДопПараметры Цикл
		   		   ТекстЗапросаРасчеты = ТекстЗапросаРасчеты +"
				   |    ОжидаемыйИПодтвержденныйНДСПродаж."+ДопПараметр.Ключ +" КАК " + ДопПараметр.Ключ+",";
				   КонецЦикла; 				   
				   ТекстЗапросаРасчеты = ТекстЗапросаРасчеты +"
	               |	ОжидаемыйИПодтвержденныйНДСПродаж.СтавкаНДС 	  КАК СтавкаНДС,
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.БазаНДСОстаток ЕСТЬ NULL ТОГДА
				   |		0
				   |	 ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.БазаНДСОстаток < 0 ТОГДА
				   |			0
				   |		 ИНАЧЕ 
				   |			ОжидаемыйИПодтвержденныйНДСПродаж.БазаНДСОстаток
				   |		КОНЕЦ
				   |	КОНЕЦ КАК СуммаОтгрузки,
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.СуммаНДСОстаток ЕСТЬ NULL ТОГДА
				   |		0
				   |	 ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.СуммаНДСОстаток < 0 ТОГДА
				   |			0
				   |		 ИНАЧЕ 
				   |			ОжидаемыйИПодтвержденныйНДСПродаж.СуммаНДСОстаток
				   |		КОНЕЦ
				   |	КОНЕЦ КАК СуммаНДСОтгрузки,
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.БазаНДСОстаток ЕСТЬ NULL ТОГДА
				   |		0
				   |	 ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.БазаНДСОстаток > 0 ТОГДА
				   |			0
				   |		 ИНАЧЕ 
				   |			-ОжидаемыйИПодтвержденныйНДСПродаж.БазаНДСОстаток
				   |		КОНЕЦ
				   |	КОНЕЦ КАК СуммаАванс,
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.СуммаНДСОстаток ЕСТЬ NULL ТОГДА
				   |		0
				   |	 ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.СуммаНДСОстаток > 0 ТОГДА
				   |			0
				   |		 ИНАЧЕ 
				   |			-ОжидаемыйИПодтвержденныйНДСПродаж.СуммаНДСОстаток
				   |		КОНЕЦ
				   |	КОНЕЦ КАК СуммаНДСАванс,
				   |	ПродажиНалоговыйУчет.Аванс 						  КАК СуммаПревышенияОплатНадОтгрузкой
				   |ИЗ
	               |	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПродаж.Остатки(&МоментВремени, Организация = &Организация И СобытиеНДС В (&СобытияОжидаемыйИПодтвержденныйНДСПродажОтгрузка) " + ДополнительныеУсловия + ") КАК ОжидаемыйИПодтвержденныйНДСПродаж
				   |    ПРАВОЕ СОЕДИНЕНИЕ
				   |        (ВЫБРАТЬ 
				   |            ПродажиНалоговыйУчет.ДоговорКонтрагента КАК ДоговорКонтрагента,
				   
				   |            ПродажиНалоговыйУчет.Сделка КАК Сделка,
				   
				   |            ПродажиНалоговыйУчет.ВозвратнаяТара		КАК ВозвратнаяТара,
				   |            СУММА(ВЫБОР КОГДА ПродажиНалоговыйУчет.Событие = &ПродажиНалоговыйУчетРасчетыОплата ТОГДА ПродажиНалоговыйУчет.СуммаВзаиморасчетовОстаток ИНАЧЕ - ПродажиНалоговыйУчет.СуммаВзаиморасчетовОстаток КОНЕЦ) КАК Аванс
				   |
				   |         ИЗ РегистрНакопления.ПродажиНалоговыйУчет.Остатки(&МоментВремени, Организация = &Организация И Событие В (&СобытияПродажиНалоговыйУчетРасчеты) " + ДополнительныеУсловия+ ") КАК ПродажиНалоговыйУчет
				   |
				   |		 СГРУППИРОВАТЬ ПО
				   |			ПродажиНалоговыйУчет.ДоговорКонтрагента,
				   |			ПродажиНалоговыйУчет.Сделка,
				   |			ПродажиНалоговыйУчет.ВозвратнаяТара) КАК ПродажиНалоговыйУчет
				   |    ПО 
				   |       ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента 	= ПродажиНалоговыйУчет.ДоговорКонтрагента
				   |     И ОжидаемыйИПодтвержденныйНДСПродаж.Сделка 				= ПродажиНалоговыйУчет.Сделка
				   |     И ОжидаемыйИПодтвержденныйНДСПродаж.ВозвратнаяТара 		= ПродажиНалоговыйУчет.ВозвратнаяТара
				   |
				   |";
				   
   ТекстЗапросаВозврат=
				  "	&Дата КАК Дата,
				   |	&Возврат КАК РасчетыВозврат,
	               |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента ЕСТЬ NULL ТОГДА 
			   	   |		ПродажиНалоговыйУчет.ДоговорКонтрагента.Владелец 
				   |	 ИНАЧЕ 
				   |		ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента.Владелец 	
				   |	КОНЕЦ КАК Контрагент,
	               |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента ЕСТЬ NULL ТОГДА 
			   	   |		ПродажиНалоговыйУчет.ДоговорКонтрагента 		  
				   |	ИНАЧЕ 
				   |		ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента 		
				   |	КОНЕЦ КАК ДоговорКонтрагента,
				   
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.Сделка ЕСТЬ NULL ТОГДА 
			   	   |		ПродажиНалоговыйУчет.Сделка 		  
				   |	ИНАЧЕ 
				   |		ОжидаемыйИПодтвержденныйНДСПродаж.Сделка 		
				   |	КОНЕЦ КАК Сделка,
				   
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента ЕСТЬ NULL ТОГДА 
				   |		ВЫБОР КОГДА ПродажиНалоговыйУчет.ВозвратнаяТара = Истина ТОГДА ПродажиНалоговыйУчет.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам ИНАЧЕ ПродажиНалоговыйУчет.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам КОНЕЦ 
			   	   |	  ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.ВозвратнаяТара = Истина ТОГДА ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам ИНАЧЕ ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам КОНЕЦ 
				   |	КОНЕЦ КАК Схема,
	               |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента ЕСТЬ NULL ТОГДА 
				   |		ПродажиНалоговыйУчет.ВозвратнаяТара 
				   |	 ИНАЧЕ
				   |		ОжидаемыйИПодтвержденныйНДСПродаж.ВозвратнаяТара 
				   |	КОНЕЦ КАК ЗаТару,";
				   Для каждого ДопПараметр Из ДопПараметры Цикл
		   		   ТекстЗапросаВозврат = ТекстЗапросаВозврат +"
				   |    ОжидаемыйИПодтвержденныйНДСПродаж."+ДопПараметр.Ключ +" КАК " + ДопПараметр.Ключ+",";
				   КонецЦикла; 				   
				   ТекстЗапросаВозврат = ТекстЗапросаВозврат +"
	               |	ОжидаемыйИПодтвержденныйНДСПродаж.СтавкаНДС 	  КАК СтавкаНДС,
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.БазаНДСОстаток ЕСТЬ NULL ТОГДА
				   |		0
				   |	 ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.БазаНДСОстаток < 0 ТОГДА
				   |			0
				   |		 ИНАЧЕ 
				   |			ОжидаемыйИПодтвержденныйНДСПродаж.БазаНДСОстаток
				   |		КОНЕЦ
				   |	КОНЕЦ КАК СуммаОтгрузки,
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.СуммаНДСОстаток ЕСТЬ NULL ТОГДА
				   |		0
				   |	 ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.СуммаНДСОстаток < 0 ТОГДА
				   |			0
				   |		 ИНАЧЕ 
				   |			ОжидаемыйИПодтвержденныйНДСПродаж.СуммаНДСОстаток
				   |		КОНЕЦ
				   |	КОНЕЦ КАК СуммаНДСОтгрузки,
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.БазаНДСОстаток ЕСТЬ NULL ТОГДА
				   |		0
				   |	 ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.БазаНДСОстаток > 0 ТОГДА
				   |			0
				   |		 ИНАЧЕ 
				   |			-ОжидаемыйИПодтвержденныйНДСПродаж.БазаНДСОстаток
				   |		КОНЕЦ
				   |	КОНЕЦ КАК СуммаАванс,
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.СуммаНДСОстаток ЕСТЬ NULL ТОГДА
				   |		0
				   |	 ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДСПродаж.СуммаНДСОстаток > 0 ТОГДА
				   |			0
				   |		 ИНАЧЕ 
				   |			-ОжидаемыйИПодтвержденныйНДСПродаж.СуммаНДСОстаток
				   |		КОНЕЦ
				   |	КОНЕЦ КАК СуммаНДСАванс,
	               |	ПродажиНалоговыйУчет.Аванс 						  КАК СуммаПревышенияОплатНадОтгрузкой
				   |ИЗ
	               |	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПродаж.Остатки(&МоментВремени, Организация = &Организация И СобытиеНДС В (&СобытияОжидаемыйИПодтвержденныйНДСПродажВозврат) " + ДополнительныеУсловия + ") КАК ОжидаемыйИПодтвержденныйНДСПродаж
				   |    ПРАВОЕ СОЕДИНЕНИЕ
				   |        (ВЫБРАТЬ 
				   |            ПродажиНалоговыйУчет.ДоговорКонтрагента КАК ДоговорКонтрагента,
				   |            ПродажиНалоговыйУчет.Сделка КАК Сделка,
				   |            ПродажиНалоговыйУчет.ВозвратнаяТара		КАК ВозвратнаяТара,
				   |            СУММА(ВЫБОР КОГДА ПродажиНалоговыйУчет.Событие = &ПродажиНалоговыйУчетВозвратОплата ТОГДА ПродажиНалоговыйУчет.СуммаВзаиморасчетовОстаток ИНАЧЕ - ПродажиНалоговыйУчет.СуммаВзаиморасчетовОстаток КОНЕЦ) КАК Аванс
				   |
				   |         ИЗ РегистрНакопления.ПродажиНалоговыйУчет.Остатки(&МоментВремени, Организация = &Организация И Событие В (&СобытияПродажиНалоговыйУчетВозврат) " + ДополнительныеУсловия+ ") КАК ПродажиНалоговыйУчет
				   |
				   |		 СГРУППИРОВАТЬ ПО
				   |			ПродажиНалоговыйУчет.ДоговорКонтрагента,
				   |			ПродажиНалоговыйУчет.Сделка,
				   |			ПродажиНалоговыйУчет.ВозвратнаяТара) КАК ПродажиНалоговыйУчет
				   |    ПО 
				   |       ОжидаемыйИПодтвержденныйНДСПродаж.ДоговорКонтрагента 	= ПродажиНалоговыйУчет.ДоговорКонтрагента
				   |     И ОжидаемыйИПодтвержденныйНДСПродаж.ВозвратнаяТара 		= ПродажиНалоговыйУчет.ВозвратнаяТара
				   |";
	
	Если  НЕ ЗначениеЗаполнено(РасчетыВозврат) = Ложь
		И ПараметрОтборДоговоровКонтрагентов = Неопределено Тогда
		
		Если РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|" +ТекстЗапросаРасчеты;	
		Иначе
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|" +ТекстЗапросаВозврат;	
		КонецЕсли; 
		
	Иначе
		Запрос.Текст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|" + ТекстЗапросаРасчеты + "
						| ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|" + ТекстЗапросаВозврат;
	КонецЕсли;
					
	Запрос.Текст = Запрос.Текст + 
				   "ИТОГИ
				   |	МАКСИМУМ(Схема),
				   |	МАКСИМУМ(СуммаПревышенияОплатНадОтгрузкой),
				   |	СУММА(СуммаОтгрузки),
				   |	СУММА(СуммаНДСОтгрузки),
				   |	СУММА(СуммаАванс),
				   |	СУММА(СуммаНДСАванс)
				   |ПО
				   |	Контрагент,
				   |	РасчетыВозврат,
				   |	ЗаТару,
				   |	ДоговорКонтрагента,
				   |	Сделка";
				   
				   Для каждого ДопПараметр Из ДопПараметры Цикл
		   		   Запрос.Текст = Запрос.Текст +",
				   |    "+ДопПараметр.Ключ;
				   КонецЦикла; 				   
	
	Договора.Очистить();

	Выборка0 = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка0.Следующий() Цикл //сделка
		Выборка1 = Выборка0.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка1.Следующий() Цикл // Контрагент
			Выборка2 = Выборка1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка2.Следующий() Цикл //РасчетыВозврат
				Выборка3 = Выборка2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Выборка3.Следующий() Цикл //ЗаТару
					ВыборкаДоговора = Выборка3.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаДоговора.Следующий() Цикл  //ДоговорКонтрагента
						
						СуммаНеПодтвержденнойОтгрузки    = ?(ВыборкаДоговора.СуммаОтгрузки = NULL, 0, ВыборкаДоговора.СуммаОтгрузки + ВыборкаДоговора.СуммаНДСОтгрузки);
						СуммаПодтвержденногоАванса	     = ?(ВыборкаДоговора.СуммаОтгрузки = NULL, 0, ВыборкаДоговора.СуммаАванс + ВыборкаДоговора.СуммаНДСАванс);
						СуммаПревышенияОплатНадОтгрузкой = ?(ВыборкаДоговора.СуммаПревышенияОплатНадОтгрузкой = NULL, 0, ВыборкаДоговора.СуммаПревышенияОплатНадОтгрузкой);
						
						Если ВыборкаДоговора.Схема = Перечисления.МоментыОпределенияНалоговойБазы.НеОпределять Тогда
							
							// ничего не делаем
							Возврат;
							
						ИначеЕсли ВыборкаДоговора.Схема = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
							
							Аванс = Макс(0, СуммаНеПодтвержденнойОтгрузки - СуммаПодтвержденногоАванса + СуммаПревышенияОплатНадОтгрузкой);
							
							Если Аванс > 0 Тогда
								ДобавитьСтрокуВДоговораАванс(ВыборкаДоговора, Аванс);
							КонецЕсли;
							
						ИначеЕсли ВыборкаДоговора.Схема = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
							
							// Все неподтвержденные отгрузки 
							ДобавитьСтрокуВДоговора(ВыборкаДоговора);
							
						ИначеЕсли ВыборкаДоговора.Схема = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию Тогда
							
							// Все неподтвержденные отгрузки
							ДобавитьСтрокуВДоговора(ВыборкаДоговора);	
							
							//Дополнительно добавим аванс
							Аванс = Макс(0, СуммаПревышенияОплатНадОтгрузкой - СуммаПодтвержденногоАванса);
							
							Если Аванс > 0 Тогда
								// дополнительно добавим аванс
								ДобавитьСтрокуВДоговораАванс(ВыборкаДоговора, Аванс);
							КонецЕсли;
							
						Иначе
							
							Если ВыборкаДоговора.ЗаТару Тогда
								ТекстСообщения = 
								Локализация.СтрШаблон("Контрагент: ¤1¤, Договор: ¤2¤"
								"Не указана схема налогового учета по таре, либо в схеме не указан Момент определения базы НДС по продажам!", ВыборкаДоговора.Контрагент, ВыборкаДоговора.ДоговорКонтрагента); 
							Иначе
								ТекстСообщения = 
								Локализация.СтрШаблон("Контрагент: ¤1¤, Договор: ¤2¤"
								"Не указана схема налогового учета, либо в схеме не указан Момент определения базы НДС по продажам!", ВыборкаДоговора.Контрагент, ВыборкаДоговора.ДоговорКонтрагента); 
							КонецЕсли;	
							
							Сообщить(ТекстСообщения, СтатусСообщения.Важное);
							
						КонецЕсли;					
						
					КонецЦикла; 	
				КонецЦикла; 	
			КонецЦикла; 	
		КонецЦикла; 	
	КонецЦикла;
	
	// Добавим в Договора строки, по которым нет остатков
	// в случае, если данная процедура вызвана в режиме обновления таблицы договоров (заполнен параметр ПараметрОтборДоговоровКонтрагентов)
	// И удалим  лишние (в запросе фильтр по Расчету/Возврату не накладывался)
	Если Не ПараметрОтборДоговоровКонтрагентов = Неопределено Тогда
		
		// Добавляем новые
		Если НЕ ПараметрОтборДоговоровКонтрагентов.Колонки.Найти("ЗаТару") = Неопределено Тогда
			
			СтруктураПоиска = Новый Структура();
			Для каждого СтрокаТаблицыДокументов Из ПараметрОтборДоговоровКонтрагентов Цикл
				
				СтруктураПоиска.Вставить("ДоговорКонтрагента",	СтрокаТаблицыДокументов.ДоговорКонтрагента);		
				СтруктураПоиска.Вставить("Сделка",				СтрокаТаблицыДокументов.Сделка);		
				СтруктураПоиска.Вставить("РасчетыВозврат",		СтрокаТаблицыДокументов.РасчетыВозврат);		
				Для каждого ДопПараметр Из ДопПараметры Цикл
					СтруктураПоиска.Вставить(ДопПараметр.Ключ, СтрокаТаблицыДокументов[ДопПараметр.Ключ]);
				КонецЦикла;
				
				Если Договора.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
					СтрокаДоговоров = Договора.Добавить();
					СтрокаДоговоров.Дата = Дата;		
					Для каждого Параметр Из СтруктураПоиска Цикл
						СтрокаДоговоров[Параметр.Ключ] = Параметр.Значение;
					КонецЦикла;
					СтрокаДоговоров.ЗаТару    = СтрокаТаблицыДокументов.ЗаТару;		
					СтрокаДоговоров.СтавкаНДС = СтрокаТаблицыДокументов.СтавкаНДС;		
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;
		
		// Удаляем Лишние
		СтруктураПоиска = Новый Структура();
		Сч = 0;
		Пока Сч <= Договора.Количество() - 1 Цикл
			
			СтрокаДоговоров = Договора.Получить(Сч);
			СтруктураПоиска.Вставить("ДоговорКонтрагента",	СтрокаДоговоров.ДоговорКонтрагента);		
			СтруктураПоиска.Вставить("Сделка",				СтрокаДоговоров.Сделка);		
			СтруктураПоиска.Вставить("РасчетыВозврат",		СтрокаДоговоров.РасчетыВозврат);		
			
			Если ПараметрОтборДоговоровКонтрагентов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				Договора.Удалить(СтрокаДоговоров);
			Иначе
				Сч = Сч + 1
			КонецЕсли;
			
		КонецЦикла; 

	КонецЕсли;
	
	// добавим строки-ссылки на номенклатуру, добавляемую пользователем.
	ДоговораКопия = Договора.Выгрузить();
	ДоговораКопия.Свернуть("ДоговорКонтрагента,Сделка","");
	
	СтруктураПоиска = Новый Структура("ДоговорКонтрагента, Сделка, РасчетыВозврат, Документ");
	// если "возврат" (формируем Приложения 2) - необходимо всегда указывать документ-основание: налоговую накладную - основание!
	СтруктураПоиска.РасчетыВозврат 	= Перечисления.РасчетыВозврат.Расчеты;
	СтруктураПоиска.Документ 		= Неопределено;
	Для каждого СтрокаДоговоров Из ДоговораКопия Цикл
		
		СтруктураПоиска.ДоговорКонтрагента 	= СтрокаДоговоров.ДоговорКонтрагента;
		
		СтрокиИсточниковНоменклатуры = ИсточникиНоменклатуры.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиИсточниковНоменклатуры.Количество() = 0 Тогда
			СтрокаИсточниковНоменклатуры = ИсточникиНоменклатуры.Добавить();
			СтрокаИсточниковНоменклатуры.Дата 					= Дата;		
			СтрокаИсточниковНоменклатуры.ДоговорКонтрагента 	= СтруктураПоиска.ДоговорКонтрагента;
			СтрокаИсточниковНоменклатуры.Сделка 				= СтруктураПоиска.Сделка;
			СтрокаИсточниковНоменклатуры.РасчетыВозврат 		= СтруктураПоиска.РасчетыВозврат;
			СтрокаИсточниковНоменклатуры.Документ	 	 		= Неопределено;	
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьДоговораПоДатам(ПараметрОтборДоговоровКонтрагентов)
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ПоОтгрузке", 			Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке);
	Запрос.УстановитьПараметр("ПоОплате",				Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате);
	Запрос.УстановитьПараметр("ПоПервомуСобытию",		Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию);

	Запрос.УстановитьПараметр("Отгрузка", 		Перечисления.РасчетыВозврат.Расчеты);
	Запрос.УстановитьПараметр("Возврат", 		Перечисления.РасчетыВозврат.Возврат);
	
	МассивСобытияРасчет = Новый Массив();
	МассивСобытияРасчет.Добавить(Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем);
	МассивСобытияРасчет.Добавить(Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю);
	Запрос.УстановитьПараметр("СобытияРасчет",			МассивСобытияРасчет);
	
	МассивСобытияВозврат = Новый Массив();
	МассивСобытияВозврат.Добавить(Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю);
	МассивСобытияВозврат.Добавить(Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя);
	Запрос.УстановитьПараметр("СобытияВозврат",			МассивСобытияВозврат);
	
	МассивСобытияОтгрузка = Новый Массив();
	МассивСобытияОтгрузка.Добавить(Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю);
	МассивСобытияОтгрузка.Добавить(Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя);
	Запрос.УстановитьПараметр("СобытияОтгрузка",			МассивСобытияОтгрузка);
	
	МассивСобытияОплата = Новый Массив();
	МассивСобытияОплата.Добавить(Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем);
	МассивСобытияОплата.Добавить(Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю);
	Запрос.УстановитьПараметр("СобытияОплата",			МассивСобытияОплата);

	Запрос.УстановитьПараметр("СобытияНДС_ОиП_Расчет",	Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация);
	Запрос.УстановитьПараметр("СобытияНДС_ОиП_Возврат",	Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат);

	Запрос.УстановитьПараметр("Организация", Организация);
	
	ДополнительныеУсловия = "";
	Если Не ПараметрОтборДоговоровКонтрагентов = Неопределено Тогда

		ДополнительныеУсловия =  ДополнительныеУсловия + " И ДоговорКонтрагента В (&ДоговораКонтрагентов) И Сделка В (&Сделки) ";
		Запрос.УстановитьПараметр("ДоговораКонтрагентов", ПараметрОтборДоговоровКонтрагентов.ВыгрузитьКолонку("ДоговорКонтрагента"));
		Запрос.УстановитьПараметр("Сделки", ПараметрОтборДоговоровКонтрагентов.ВыгрузитьКолонку("Сделка"));
		
	Иначе
		
		ОтборДоговоров = ОтборДоговоровКонтрагентов.Выгрузить();
		ОтборДоговоров.Свернуть("ДоговорКонтрагента", "");
		СтрокаСПустымДоговором = ОтборДоговоров.Найти(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Если НЕ СтрокаСПустымДоговором = Неопределено Тогда 
			ОтборДоговоров.Удалить(СтрокаСПустымДоговором);	
		КонецЕсли;
		
		// если остались строки, значит устанавливаем фильтр по договорам,
		// иначе - по контрагентам
		Если ОтборДоговоров.Количество() > 0 Тогда
			
			ДополнительныеУсловия =  ДополнительныеУсловия + " И ДоговорКонтрагента В (&ДоговораКонтрагентов) ";
			Запрос.УстановитьПараметр("ДоговораКонтрагентов", ОтборДоговоров);
			
		Иначе 
			
			ОтборКонтрагентов = ОтборДоговоровКонтрагентов.Выгрузить();
			ОтборКонтрагентов.Свернуть("Контрагент", "");
			Если ОтборКонтрагентов.Количество() > 0 Тогда
				ДополнительныеУсловия =  ДополнительныеУсловия + " И ДоговорКонтрагента.Владелец В ИЕРАРХИИ(&Контрагенты) ";
				Запрос.УстановитьПараметр("Контрагенты", ОтборКонтрагентов);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;		
	
	Запрос.УстановитьПараметр("ДатаНач", 	НачалоДня(Дата));
	Запрос.УстановитьПараметр("ДатаКон", 	КонецДня(ДатаКон));
	
	ТекстЗапросаРасчеты=
		 "	ДанныеПС.Период		 			КАК Дата,
		  | &Отгрузка 						КАК РасчетыВозврат,
		  |	ДанныеПС.ДоговорКонтрагента.Владелец КАК Контрагент,
		  |	ДанныеПС.ДоговорКонтрагента 	КАК ДоговорКонтрагента,
		  |	ДанныеПС.Сделка 				КАК Сделка,
		  |	ДанныеПС.ЗаТару 				КАК ЗаТару,
		  |	ДанныеПС.Схема 					КАК Схема,
		  |	ВЫБОР
		  |		КОГДА ДанныеПС.Схема = &ПоОтгрузке
		  |			ТОГДА ДанныеПС.РасчетыОтгрузПрих
		  |		КОГДА ДанныеПС.Схема = &ПоОплате
		  |			ТОГДА ДанныеПС.РасчетыОплатаПрих
		  |		КОГДА ДанныеПС.Схема = &ПоПервомуСобытию
		  |			ТОГДА ВЫБОР
		  |					КОГДА ДанныеПС.РасчетыОтгрузНач + ДанныеПС.РасчетыОтгрузПрих > ДанныеПС.РасчетыОплатаНач + ДанныеПС.РасчетыОплатаПрих
		  |						ТОГДА ДанныеПС.РасчетыОтгрузНач + ДанныеПС.РасчетыОтгрузПрих
		  |					ИНАЧЕ ДанныеПС.РасчетыОплатаНач + ДанныеПС.РасчетыОплатаПрих
		  |				КОНЕЦ - ВЫБОР
		  |					КОГДА ДанныеПС.РасчетыОтгрузНач > ДанныеПС.РасчетыОплатаНач
		  |						ТОГДА ДанныеПС.РасчетыОтгрузНач
		  |					ИНАЧЕ ДанныеПС.РасчетыОплатаНач
		  |				КОНЕЦ
		  |		ИНАЧЕ 0
		  |	КОНЕЦ КАК ПервоеСобытие,
		  |	ВЫБОР
		  |		КОГДА ДанныеПС.Схема = &ПоОтгрузке
		  |			ТОГДА ЛОЖЬ
		  |		КОГДА ДанныеПС.Схема = &ПоОплате
		  |			ТОГДА ИСТИНА
		  |		КОГДА ДанныеПС.Схема = &ПоПервомуСобытию
		  |			ТОГДА ВЫБОР
		  |					КОГДА ДанныеПС.РасчетыОтгрузНач + ДанныеПС.РасчетыОтгрузПрих > ДанныеПС.РасчетыОплатаНач + ДанныеПС.РасчетыОплатаПрих
		  |						ТОГДА ЛОЖЬ
		  |						ИНАЧЕ ИСТИНА
		  |				  КОНЕЦ
          | КОНЕЦ КАК ЭтоАванс,
		  | ДанныеОтгрузка.СтавкаНДС 							   КАК	СтавкаНДС,";		
		  Для каждого ДопПараметр Из ДопПараметры Цикл
		  ТекстЗапросаРасчеты = ТекстЗапросаРасчеты +"
		  |    ДанныеОтгрузка."+ДопПараметр.Ключ +" КАК " + ДопПараметр.Ключ+",";
		  КонецЦикла; 				   
		  ТекстЗапросаРасчеты = ТекстЗапросаРасчеты +"
		  | ДанныеОтгрузка.СуммаНДС								   КАК	СуммаНДСОтгрузки,
		  | ДанныеОтгрузка.БазаНДС								   КАК	СуммаОтгрузки,
		  | ЕстьNULL(ДанныеОтгрузка.РазличныеПараметрыОтгрузки, 0) КАК РазличныеПараметрыОтгрузки	
		  |
		  |ИЗ
		  |	(ВЫБРАТЬ
		  |		Суммы.ДоговорКонтрагента 			КАК ДоговорКонтрагента,
		  |		Суммы.Сделка			 			КАК Сделка,
		  |		Суммы.ВозвратнаяТара 				КАК ЗаТару,
		  |		ВЫБОР
		  |			КОГДА Суммы.ВозвратнаяТара = ИСТИНА
		  |				ТОГДА Суммы.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам
		  |			КОГДА Суммы.ВозвратнаяТара = ЛОЖЬ
		  |				ТОГДА Суммы.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам
		  |		КОНЕЦ 								КАК Схема,
		  |		Суммы.ПериодДень 					КАК Период,
		  |		СУММА(Суммы.РасчетыОтгрузНач) 		КАК РасчетыОтгрузНач,
		  |		СУММА(Суммы.РасчетыОплатаНач) 		КАК РасчетыОплатаНач,
		  |		СУММА(Суммы.РасчетыОтгрузПрих)		КАК РасчетыОтгрузПрих,
		  |		СУММА(Суммы.РасчетыОплатаПрих) 		КАК РасчетыОплатаПрих
		  |	ИЗ
		  |		(ВЫБРАТЬ
		  |			Продажи.ДоговорКонтрагента 			КАК ДоговорКонтрагента,
		  |			Продажи.Сделка			 			КАК Сделка,
		  |			Продажи.ВозвратнаяТара 				КАК ВозвратнаяТара,
		  |			НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) КАК ПериодДень,
		  |			0 								КАК РасчетыОтгрузНач,
		  |			0 								КАК РасчетыОплатаНач,
		  |			ВЫБОР
		  |				КОГДА Продажи.Событие В (&СобытияОтгрузка)
		  |					ТОГДА Продажи.СуммаВзаиморасчетовПриход
		  |				ИНАЧЕ 0
		  |			КОНЕЦ 							КАК РасчетыОтгрузПрих,
		  |			ВЫБОР
		  |				КОГДА Продажи.Событие В (&СобытияОплата)
		  |					ТОГДА Продажи.СуммаВзаиморасчетовПриход
		  |				ИНАЧЕ 0
		  |			КОНЕЦ 							КАК РасчетыОплатаПрих
		  |		ИЗ
		  |			РегистрНакопления.ПродажиНалоговыйУчет.Обороты(
		  |				&ДатаНач,
		  |				&ДатаКон,
		  |				ДЕНЬ,
		  |				Событие В (&СобытияРасчет) 
		  |				" + ДополнительныеУсловия + "
		  |				И Организация = &Организация) КАК Продажи
		  |		
		  |		ОБЪЕДИНИТЬ ВСЕ
		  |		
		  |		ВЫБРАТЬ
		  |			Остатки.ДоговорКонтрагента,
		  |			Остатки.Сделка,
		  |			Остатки.ВозвратнаяТара,
		  |			Остатки.Период,
		  |			ВЫБОР
		  |				КОГДА Остатки.Событие В (&СобытияОтгрузка)
		  |					ТОГДА Остатки.НачальныйОстаток
		  |				ИНАЧЕ 0
		  |			КОНЕЦ,
		  |			ВЫБОР
		  |				КОГДА Остатки.Событие В (&СобытияОплата)
		  |					ТОГДА Остатки.НачальныйОстаток
		  |				ИНАЧЕ 0
		  |			КОНЕЦ,
		  |			0,
		  |			0
		  |		ИЗ
		  |			(ВЫБРАТЬ
		  |				Периоды.ДоговорКонтрагента КАК ДоговорКонтрагента,
		  |				Периоды.Сделка КАК Сделка,
		  |				Периоды.ВозвратнаяТара КАК ВозвратнаяТара,
		  |				Периоды.Период КАК Период,
		  |				Остатки.Событие КАК Событие,
		  |				ЕСТЬNULL(СУММА(Остатки.СуммаНач), 0) КАК НачальныйОстаток
		  |			ИЗ
		  |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |					Периоды.ДоговорКонтрагента КАК ДоговорКонтрагента,
		  |					Периоды.Сделка КАК Сделка,
		  |					Периоды.ВозвратнаяТара КАК ВозвратнаяТара,
		  |					НАЧАЛОПЕРИОДА(Периоды.Период, ДЕНЬ) КАК Период
		  |				ИЗ
		  |					РегистрНакопления.ПродажиНалоговыйУчет.Обороты(
		  |						&ДатаНач,
		  |						&ДатаКон,
		  |						ДЕНЬ,
		  |						Событие В (&СобытияРасчет)  
		  |						" + ДополнительныеУсловия + "
		  |						И Организация = &Организация) КАК Периоды) КАК Периоды
		  |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		  |						ОстНаНач.ДоговорКонтрагента КАК ДоговорКонтрагента,
		  |						ОстНаНач.Сделка КАК Сделка,
		  |						ОстНаНач.ВозвратнаяТара КАК ВозвратнаяТара,
		  |						ОстНаНач.Событие КАК Событие,
		  |						0 КАК Период,
		  |						ОстНаНач.СуммаВзаиморасчетовОстаток КАК СуммаНач
		  |					ИЗ
		  |						РегистрНакопления.ПродажиНалоговыйУчет.Остатки(
		  |							&ДатаНач,
		  |							Событие В (&СобытияРасчет)  
		  |							" + ДополнительныеУсловия + "
		  |						И Организация = &Организация) КАК ОстНаНач
		  |					
		  |					ОБЪЕДИНИТЬ ВСЕ
		  |					
		  |					ВЫБРАТЬ
		  |						Обороты.ДоговорКонтрагента,
		  |						Обороты.Сделка,
		  |						Обороты.ВозвратнаяТара,
		  |						Обороты.Событие КАК Событие,
		  |						НАЧАЛОПЕРИОДА(Обороты.Период, ДЕНЬ) КАК Период,		  
		  |						Обороты.СуммаВзаиморасчетовОборот
		  |					ИЗ
		  |						РегистрНакопления.ПродажиНалоговыйУчет.Обороты(
		  |							&ДатаНач,
		  |							&ДатаКон,
		  |							День,
		  |							Событие В (&СобытияРасчет)  
		  |							" + ДополнительныеУсловия + "
		  |							И Организация = &Организация) КАК Обороты) КАК Остатки
		  |					ПО 	  Остатки.ДоговорКонтрагента = Периоды.ДоговорКонтрагента
		  |						И Остатки.Сделка = Периоды.Сделка
		  |						И Остатки.ВозвратнаяТара = Периоды.ВозвратнаяТара
		  |						И (Остатки.Период = 0  ИЛИ Остатки.Период < НАЧАЛОПЕРИОДА(Периоды.Период, ДЕНЬ))
		  |			
		  |			СГРУППИРОВАТЬ ПО
		  |				Периоды.ДоговорКонтрагента,
		  |				Периоды.Сделка,
		  |				Периоды.ВозвратнаяТара,
		  |				Остатки.Событие,
		  |				Периоды.Период) КАК Остатки
		  |	   ) КАК Суммы
		  |	
		  |	СГРУППИРОВАТЬ ПО
		  |		Суммы.ДоговорКонтрагента,
		  |		Суммы.Сделка,
		  |		Суммы.ВозвратнаяТара,
		  |		Суммы.ПериодДень,
		  |		ВЫБОР
		  |			КОГДА Суммы.ВозвратнаяТара = ИСТИНА
		  |				ТОГДА Суммы.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам
		  |			КОГДА Суммы.ВозвратнаяТара = ЛОЖЬ
		  |				ТОГДА Суммы.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам
		  |		КОНЕЦ) КАК ДанныеПС
		  |
		  |  ЛЕВОЕ СОЕДИНЕНИЕ 
		  |       (ВЫБРАТЬ
		  |          Отгрузка.ДоговорКонтрагента 			КАК ДоговорКонтрагента,
		  |          Отгрузка.Сделка			 			КАК Сделка,
		  |          Отгрузка.ВозвратнаяТара				КАК ЗаТару,
		  |          НАЧАЛОПЕРИОДА(Отгрузка.Период, День) 	КАК Период,
		  |          МАКСИМУМ(Отгрузка.СтавкаНДС)			КАК СтавкаНДС,";		
		  Для каждого ДопПараметр Из ДопПараметры Цикл
		  ТекстЗапросаРасчеты = ТекстЗапросаРасчеты +"
		  |    МАКСИМУМ(Отгрузка."+ДопПараметр.Ключ +") КАК " + ДопПараметр.Ключ+",";
		  КонецЦикла; 				   
		  ТекстЗапросаРасчеты = ТекстЗапросаРасчеты +"
		  |			 СУММА(1)								КАК РазличныеПараметрыОтгрузки,
		  |          СУММА(Отгрузка.БазаНДСПриход)			КАК БазаНДС,
		  |          СУММА(Отгрузка.СуммаНДСПриход)			КАК СуммаНДС
		  |		   ИЗ
		  |			РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПродаж.Обороты(
		  |						&ДатаНач,
		  |						&ДатаКон,
		  |						ДЕНЬ,
		  |						СобытиеНДС = &СобытияНДС_ОиП_Расчет  
		  |						" + ДополнительныеУсловия + "
		  |						И Организация = &Организация) КАК Отгрузка
		  |
		  |        СГРУППИРОВАТЬ ПО
		  |             Отгрузка.ДоговорКонтрагента,
		  |             Отгрузка.Сделка,
		  |             Отгрузка.ВозвратнаяТара,
		  |             НАЧАЛОПЕРИОДА(Отгрузка.Период, ДЕНЬ)) КАК ДанныеОтгрузка
		  |
		  |		ПО 	  ДанныеПС.ДоговорКонтрагента 	= ДанныеОтгрузка.ДоговорКонтрагента
		  |			И ДанныеПС.Сделка 				= ДанныеОтгрузка.Сделка
		  |			И ДанныеПС.ЗаТару 				= ДанныеОтгрузка.ЗаТару
		  |			И ДанныеПС.Период 				= ДанныеОтгрузка.Период
		  |
		  |";
	
					   
   ТекстЗапросаВозврат=
		 "	ДанныеПС.Период		 			КАК Дата,
		  | &Возврат 						КАК РасчетыВозврат,
		  |	ДанныеПС.ДоговорКонтрагента.Владелец КАК Контрагент,
		  |	ДанныеПС.ДоговорКонтрагента 	КАК ДоговорКонтрагента,
		  |	ДанныеПС.Сделка 	КАК Сделка,
		  |	ДанныеПС.ЗаТару 				КАК ЗаТару,
		  |	ДанныеПС.Схема 					КАК Схема,
		  |	ВЫБОР
		  |		КОГДА ДанныеПС.Схема = &ПоОтгрузке
		  |			ТОГДА ДанныеПС.РасчетыОтгрузПрих
		  |		КОГДА ДанныеПС.Схема = &ПоОплате
		  |			ТОГДА ДанныеПС.РасчетыОплатаПрих
		  |		КОГДА ДанныеПС.Схема = &ПоПервомуСобытию
		  |			ТОГДА ВЫБОР
		  |					КОГДА ДанныеПС.РасчетыОтгрузНач + ДанныеПС.РасчетыОтгрузПрих > ДанныеПС.РасчетыОплатаНач + ДанныеПС.РасчетыОплатаПрих
		  |						ТОГДА ДанныеПС.РасчетыОтгрузНач + ДанныеПС.РасчетыОтгрузПрих
		  |					ИНАЧЕ ДанныеПС.РасчетыОплатаНач + ДанныеПС.РасчетыОплатаПрих
		  |				КОНЕЦ - ВЫБОР
		  |					КОГДА ДанныеПС.РасчетыОтгрузНач > ДанныеПС.РасчетыОплатаНач
		  |						ТОГДА ДанныеПС.РасчетыОтгрузНач
		  |					ИНАЧЕ ДанныеПС.РасчетыОплатаНач
		  |				КОНЕЦ
		  |		ИНАЧЕ 0
		  |	КОНЕЦ КАК ПервоеСобытие,
		  |	ВЫБОР
		  |		КОГДА ДанныеПС.Схема = &ПоОтгрузке
		  |			ТОГДА ЛОЖЬ
		  |		КОГДА ДанныеПС.Схема = &ПоОплате
		  |			ТОГДА ИСТИНА
		  |		КОГДА ДанныеПС.Схема = &ПоПервомуСобытию
		  |			ТОГДА ВЫБОР
		  |					КОГДА ДанныеПС.РасчетыОтгрузНач + ДанныеПС.РасчетыОтгрузПрих > ДанныеПС.РасчетыОплатаНач + ДанныеПС.РасчетыОплатаПрих
		  |						ТОГДА ЛОЖЬ
		  |						ИНАЧЕ ИСТИНА
		  |				  КОНЕЦ
          | КОНЕЦ КАК ЭтоАванс,
		  | ДанныеОтгрузка.СтавкаНДС 								КАК	СтавкаНДС,";		
		  Для каждого ДопПараметр Из ДопПараметры Цикл
		  ТекстЗапросаВозврат = ТекстЗапросаВозврат +"
		  |    ДанныеОтгрузка."+ДопПараметр.Ключ +" КАК " + ДопПараметр.Ключ+",";
		  КонецЦикла; 				   
		  ТекстЗапросаВозврат = ТекстЗапросаВозврат +"
		  | ДанныеОтгрузка.СуммаНДС									КАК	СуммаНДСОтгрузки,
		  | ДанныеОтгрузка.БазаНДС							    	КАК	СуммаОтгрузки,
		  | ЕстьNULL(ДанныеОтгрузка.РазличныеПараметрыОтгрузки,0) 	КАК РазличныеПараметрыОтгрузки	
		  |
		  |ИЗ
		  |	(ВЫБРАТЬ
		  |		Суммы.ДоговорКонтрагента 			КАК ДоговорКонтрагента,
		  |		Суммы.Сделка 			КАК Сделка,
		  |		Суммы.ВозвратнаяТара 				КАК ЗаТару,
		  |		ВЫБОР
		  |			КОГДА Суммы.ВозвратнаяТара = ИСТИНА
		  |				ТОГДА Суммы.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам
		  |			КОГДА Суммы.ВозвратнаяТара = ЛОЖЬ
		  |				ТОГДА Суммы.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам
		  |		КОНЕЦ 								КАК Схема,
		  |		Суммы.ПериодДень 					КАК Период,
		  |		СУММА(Суммы.РасчетыОтгрузНач) 		КАК РасчетыОтгрузНач,
		  |		СУММА(Суммы.РасчетыОплатаНач) 		КАК РасчетыОплатаНач,
		  |		СУММА(Суммы.РасчетыОтгрузПрих)		КАК РасчетыОтгрузПрих,
		  |		СУММА(Суммы.РасчетыОплатаПрих) 		КАК РасчетыОплатаПрих
		  |	ИЗ
		  |		(ВЫБРАТЬ
		  |			Продажи.ДоговорКонтрагента 			КАК ДоговорКонтрагента,
		  |			Продажи.Сделка 			КАК Сделка,
		  |			Продажи.ВозвратнаяТара 				КАК ВозвратнаяТара,
		  |			НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) КАК ПериодДень,
		  |			0 								КАК РасчетыОтгрузНач,
		  |			0 								КАК РасчетыОплатаНач,
		  |			ВЫБОР
		  |				КОГДА Продажи.Событие В (&СобытияОтгрузка)
		  |					ТОГДА Продажи.СуммаВзаиморасчетовПриход
		  |				ИНАЧЕ 0
		  |			КОНЕЦ 							КАК РасчетыОтгрузПрих,
		  |			ВЫБОР
		  |				КОГДА Продажи.Событие В (&СобытияОплата)
		  |					ТОГДА Продажи.СуммаВзаиморасчетовПриход
		  |				ИНАЧЕ 0
		  |			КОНЕЦ 							КАК РасчетыОплатаПрих
		  |		ИЗ
		  |			РегистрНакопления.ПродажиНалоговыйУчет.Обороты(
		  |				&ДатаНач,
		  |				&ДатаКон,
		  |				ДЕНЬ,
		  |				Событие В (&СобытияВозврат)  
		  |				" + ДополнительныеУсловия + "
		  |				И Организация = &Организация) КАК Продажи
		  |		
		  |		ОБЪЕДИНИТЬ ВСЕ
		  |		
		  |		ВЫБРАТЬ
		  |			Остатки.ДоговорКонтрагента,
		  |			Остатки.Сделка,
		  |			Остатки.ВозвратнаяТара,
		  |			Остатки.Период,
		  |			ВЫБОР
		  |				КОГДА Остатки.Событие В (&СобытияОтгрузка)
		  |					ТОГДА Остатки.НачальныйОстаток
		  |				ИНАЧЕ 0
		  |			КОНЕЦ,
		  |			ВЫБОР
		  |				КОГДА Остатки.Событие В (&СобытияОплата)
		  |					ТОГДА Остатки.НачальныйОстаток
		  |				ИНАЧЕ 0
		  |			КОНЕЦ,
		  |			0,
		  |			0
		  |		ИЗ
		  |			(ВЫБРАТЬ
		  |				Периоды.ДоговорКонтрагента КАК ДоговорКонтрагента,
		  |				Периоды.Сделка КАК Сделка,
		  |				Периоды.ВозвратнаяТара КАК ВозвратнаяТара,
		  |				Периоды.Период КАК Период,
		  |				Остатки.Событие КАК Событие,
		  |				ЕСТЬNULL(СУММА(Остатки.СуммаНач), 0) КАК НачальныйОстаток
		  |			ИЗ
		  |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |					Периоды.ДоговорКонтрагента КАК ДоговорКонтрагента,
		  |					Периоды.Сделка КАК Сделка,
		  |					Периоды.ВозвратнаяТара КАК ВозвратнаяТара,
		  |					НАЧАЛОПЕРИОДА(Периоды.Период, ДЕНЬ) КАК Период
		  |				ИЗ
		  |					РегистрНакопления.ПродажиНалоговыйУчет.Обороты(
		  |						&ДатаНач,
		  |						&ДатаКон,
		  |						ДЕНЬ,
		  |						Событие В (&СобытияВозврат)  
		  |						" + ДополнительныеУсловия + "
		  |						И Организация = &Организация) КАК Периоды) КАК Периоды
		  |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		  |						ОстНаНач.ДоговорКонтрагента КАК ДоговорКонтрагента,
		  |						ОстНаНач.Сделка КАК Сделка,
		  |						ОстНаНач.ВозвратнаяТара КАК ВозвратнаяТара,
		  |						ОстНаНач.Событие КАК Событие,
		  |						0 КАК Период,
		  |						ОстНаНач.СуммаВзаиморасчетовОстаток КАК СуммаНач
		  |					ИЗ
		  |						РегистрНакопления.ПродажиНалоговыйУчет.Остатки(
		  |							&ДатаНач,
		  |							Событие В (&СобытияВозврат)  
		  |						" + ДополнительныеУсловия + "
		  |						И Организация = &Организация) КАК ОстНаНач
		  |					
		  |					ОБЪЕДИНИТЬ ВСЕ
		  |					
		  |					ВЫБРАТЬ
		  |						Обороты.ДоговорКонтрагента,
		  |						Обороты.Сделка,
		  |						Обороты.ВозвратнаяТара,
		  |						Обороты.Событие КАК Событие,
		  |						НАЧАЛОПЕРИОДА(Обороты.Период, ДЕНЬ) КАК Период,		  
		  |						Обороты.СуммаВзаиморасчетовОборот
		  |					ИЗ
		  |						РегистрНакопления.ПродажиНалоговыйУчет.Обороты(
		  |							&ДатаНач,
		  |							&ДатаКон,
		  |							День,
		  |							Событие В (&СобытияВозврат)  
		  |							" + ДополнительныеУсловия + "
		  |							И Организация = &Организация) КАК Обороты) КАК Остатки
		  |					ПО 	  Остатки.ДоговорКонтрагента = Периоды.ДоговорКонтрагента
		  |						И Остатки.Сделка = Периоды.Сделка
		  |						И Остатки.ВозвратнаяТара = Периоды.ВозвратнаяТара
		  |						И (Остатки.Период = 0  ИЛИ Остатки.Период < НАЧАЛОПЕРИОДА(Периоды.Период, ДЕНЬ))
		  |			
		  |			СГРУППИРОВАТЬ ПО
		  |				Периоды.ДоговорКонтрагента,
		  |				Периоды.Сделка,
		  |				Периоды.ВозвратнаяТара,
		  |				Остатки.Событие,
		  |				Периоды.Период) КАК Остатки
		  |	   ) КАК Суммы
		  |	
		  |	СГРУППИРОВАТЬ ПО
		  |		Суммы.ДоговорКонтрагента,
		  |		Суммы.Сделка,
		  |		Суммы.ВозвратнаяТара,
		  |		Суммы.ПериодДень,
		  |		ВЫБОР
		  |			КОГДА Суммы.ВозвратнаяТара = ИСТИНА
		  |				ТОГДА Суммы.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам
		  |			КОГДА Суммы.ВозвратнаяТара = ЛОЖЬ
		  |				ТОГДА Суммы.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам
		  |		КОНЕЦ) КАК ДанныеПС
		  |
		  |  ЛЕВОЕ СОЕДИНЕНИЕ 
		  |       (ВЫБРАТЬ
		  |          Отгрузка.ДоговорКонтрагента 			КАК ДоговорКонтрагента,
		  |          Отгрузка.Сделка 						КАК Сделка,
		  |          Отгрузка.ВозвратнаяТара				КАК ЗаТару,
		  |          НАЧАЛОПЕРИОДА(Отгрузка.Период, День) 	КАК Период,
		  |          МАКСИМУМ(Отгрузка.СтавкаНДС)			КАК СтавкаНДС,";
		  Для каждого ДопПараметр Из ДопПараметры Цикл
		  ТекстЗапросаВозврат = ТекстЗапросаВозврат +"
		  |    МАКСИМУМ(Отгрузка."+ДопПараметр.Ключ +") КАК " + ДопПараметр.Ключ+",";
		  КонецЦикла; 				   
		  ТекстЗапросаВозврат = ТекстЗапросаВозврат +"
		  |			 СУММА(1)								КАК РазличныеПараметрыОтгрузки,
		  |          СУММА(Отгрузка.БазаНДСПриход)			КАК БазаНДС,
		  |          СУММА(Отгрузка.СуммаНДСПриход)			КАК СуммаНДС
		  |		   ИЗ
		  |			РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПродаж.Обороты(
		  |						&ДатаНач,
		  |						&ДатаКон,
		  |						ДЕНЬ,
		  |						СобытиеНДС = &СобытияНДС_ОиП_Возврат  
		  |						" + ДополнительныеУсловия + "
		  |						И Организация = &Организация) КАК Отгрузка
		  |
		  |        СГРУППИРОВАТЬ ПО
		  |             Отгрузка.ДоговорКонтрагента,
		  |             Отгрузка.Сделка,
		  |             Отгрузка.ВозвратнаяТара,
		  |             НАЧАЛОПЕРИОДА(Отгрузка.Период, ДЕНЬ)) КАК ДанныеОтгрузка
		  |
		  |		ПО 	  ДанныеПС.ДоговорКонтрагента 	= ДанныеОтгрузка.ДоговорКонтрагента
		  |			И ДанныеПС.Сделка 				= ДанныеОтгрузка.Сделка
		  |			И ДанныеПС.ЗаТару 				= ДанныеОтгрузка.ЗаТару
		  |			И ДанныеПС.Период 				= ДанныеОтгрузка.Период
		  |
		  |";
	
   

	Если  НЕ ЗначениеЗаполнено(РасчетыВозврат) = Ложь
		И ПараметрОтборДоговоровКонтрагентов = Неопределено Тогда
		
		Если РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|" +ТекстЗапросаРасчеты;	
		Иначе
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|" +ТекстЗапросаВозврат;	
		КонецЕсли; 
		
	Иначе
		Запрос.Текст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|" + ТекстЗапросаРасчеты + "
						| ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|" + ТекстЗапросаВозврат;
	КонецЕсли;
					
	Запрос.Текст = Запрос.Текст + 
				   "УПОРЯДОЧИТЬ ПО 
				   |	Контрагент,
				   |	ДоговорКонтрагента,
				   |	Сделка,
				   |	Дата,
				   |	РасчетыВозврат,
				   |	ЗаТару
				   |";
	
	Договора.Очистить();

	ВыборкаДоговора = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДоговора.Следующий() Цикл  
		
		ВыдатьПредупраждающееСообщение = Ложь;
		
		Если  ВыборкаДоговора.ПервоеСобытие <= 0 Тогда
		
			Продолжить;	
		
		КонецЕсли;
		
		Если ВыборкаДоговора.Схема = Перечисления.МоментыОпределенияНалоговойБазы.НеОпределять Тогда
								
			// ничего не делаем
			Возврат;
								
		ИначеЕсли ВыборкаДоговора.Схема = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
							
			Аванс = ВыборкаДоговора.ПервоеСобытие;
							
			Если  Аванс > 0 Тогда
				ДобавитьСтрокуВДоговораАванс(ВыборкаДоговора, Аванс);
			КонецЕсли;
								
		ИначеЕсли ВыборкаДоговора.Схема = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
								
			// Все отгрузки 
			Если ВыборкаДоговора.РазличныеПараметрыОтгрузки =  1 Тогда
			
				ДобавитьСтрокуВДоговораОтгрузка(ВыборкаДоговора);	
			
			Иначе
				
				// вариант когда при учете по отгрузке были отгрузки по нескольким ставкам не обрабатывается в полном объеме.
				Отгрузка = ВыборкаДоговора.ПервоеСобытие;
								
				ДобавитьСтрокуВДоговораАванс(ВыборкаДоговора, Отгрузка);
				
				ВыдатьПредупраждающееСообщение = Истина;
				
			КонецЕсли;
								
		ИначеЕсли ВыборкаДоговора.Схема = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию Тогда
							
			
			Если ВыборкаДоговора.ЭтоАванс  Тогда
				
				Аванс = ВыборкаДоговора.ПервоеСобытие;
								
				ДобавитьСтрокуВДоговораАванс(ВыборкаДоговора, Аванс);
			
			ИначеЕсли ВыборкаДоговора.РазличныеПараметрыОтгрузки = 1  Тогда
				
				Если ВыборкаДоговора.СуммаОтгрузки + ВыборкаДоговора.СуммаНДСОтгрузки > 0 Тогда
				
					ДобавитьСтрокуВДоговораОтгрузка(ВыборкаДоговора, ВыборкаДоговора.ПервоеСобытие/(ВыборкаДоговора.СуммаОтгрузки + ВыборкаДоговора.СуммаНДСОтгрузки));	
				
				Иначе
					
					// по-видимому излишне выписаны налоговые накладные, но это должен выявить пользователь с помощью отчетов
					Отгрузка = ВыборкаДоговора.ПервоеСобытие;
									
					ДобавитьСтрокуВДоговораАванс(ВыборкаДоговора, Отгрузка);
					
					ВыдатьПредупраждающееСообщение = Истина;
					
				КонецЕсли;
				
			Иначе
				
				Отгрузка = ВыборкаДоговора.ПервоеСобытие;
								
				ДобавитьСтрокуВДоговораАванс(ВыборкаДоговора, Отгрузка);
				
				ВыдатьПредупраждающееСообщение = Истина
				
			КонецЕсли;
			
		Иначе
							
			Если ВыборкаДоговора.ЗаТару Тогда
				ТекстСообщения = 
						  Локализация.СтрШаблон("Контрагент: ¤1¤, Договор: ¤2¤"
"Не указана схема налогового учета по таре, либо в схеме не указан Момент определения базы НДС по продажам!", ВыборкаДоговора.Контрагент, ВыборкаДоговора.ДоговорКонтрагента); 
			Иначе
				ТекстСообщения = 
						  Локализация.СтрШаблон("Контрагент: ¤1¤, Договор: ¤2¤"
"Не указана схема налогового учета, либо в схеме не указан Момент определения базы НДС по продажам!", ВыборкаДоговора.Контрагент, ВыборкаДоговора.ДоговорКонтрагента); 
			КонецЕсли;	
							
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);

		КонецЕсли;					
		
		Если ВыдатьПредупраждающееСообщение Тогда
				ТекстСообщения = Локализация.СтрШаблон("Контрагент: ¤1¤, Договор: ¤2¤, Дата:  ¤3¤"
"Нет возможности определить параметры (ставка, налоговое назначение) налоговых обязательств. Общая сумма обязательств указана в колонке ""Аванс""!", ВыборкаДоговора.Контрагент, ВыборкаДоговора.ДоговорКонтрагента, Формат(ВыборкаДоговора.Дата,"ДФ=dd.MM.yyyy")); 
			
			Сообщить(ТекстСообщения, СтатусСообщения.Информация);
			
		КонецЕсли;
		
	КонецЦикла; 	
	
	// Добавим в Договора строки, по которым нет остатков
	// в случае, если данная процедура вызвана в режиме обновления таблицы договоров (заполнен параметр ПараметрОтборДоговоровКонтрагентов)
	// И удалим  лишние (в запросе фильтр по Расчету/Возврату не накладывался)
	Если Не ПараметрОтборДоговоровКонтрагентов = Неопределено Тогда
		
		// Добавляем новые
		Если НЕ ПараметрОтборДоговоровКонтрагентов.Колонки.Найти("ЗаТару") = Неопределено Тогда

			СтруктураПоиска = Новый Структура();
			Для каждого СтрокаТаблицыДокументов Из ПараметрОтборДоговоровКонтрагентов Цикл
				
				СтруктураПоиска.Вставить("Дата",				СтрокаТаблицыДокументов.Дата);		
				СтруктураПоиска.Вставить("ДоговорКонтрагента",	СтрокаТаблицыДокументов.ДоговорКонтрагента);		
				СтруктураПоиска.Вставить("Сделка",				СтрокаТаблицыДокументов.Сделка);		
				СтруктураПоиска.Вставить("РасчетыВозврат",		СтрокаТаблицыДокументов.РасчетыВозврат);		
				Для каждого ДопПараметр Из ДопПараметры Цикл
					СтруктураПоиска.Вставить(ДопПараметр.Ключ, СтрокаТаблицыДокументов[ДопПараметр.Ключ]);
				КонецЦикла;
				
				Если Договора.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
					СтрокаДоговоров = Договора.Добавить();
					СтрокаДоговоров.Дата = СтрокаТаблицыДокументов.Дата;		
					Для каждого Параметр Из СтруктураПоиска Цикл
						СтрокаДоговоров[Параметр.Ключ] = Параметр.Значение;
					КонецЦикла;
					СтрокаДоговоров.ЗаТару    = СтрокаТаблицыДокументов.ЗаТару;		
					СтрокаДоговоров.СтавкаНДС = СтрокаТаблицыДокументов.СтавкаНДС;		
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;

		// Удаляем Лишние
		СтруктураПоиска = Новый Структура();
		Сч = 0;
		Пока Сч <= Договора.Количество() - 1 Цикл
			
			СтрокаДоговоров = Договора.Получить(Сч);
			СтруктураПоиска.Вставить("Дата",	СтрокаДоговоров.Дата);		
			СтруктураПоиска.Вставить("ДоговорКонтрагента",	СтрокаДоговоров.ДоговорКонтрагента);		
			СтруктураПоиска.Вставить("Сделка",				СтрокаДоговоров.Сделка);		
			СтруктураПоиска.Вставить("РасчетыВозврат",		СтрокаДоговоров.РасчетыВозврат);		
			
			Если ПараметрОтборДоговоровКонтрагентов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				Договора.Удалить(СтрокаДоговоров);
			Иначе
				Сч = Сч + 1
			КонецЕсли;
			
		КонецЦикла; 

		
	КонецЕсли;
	
	// добавим строки-ссылки на номенклатуру, добавляемую пользователем.
	ДоговораКопия = Договора.Выгрузить();
	ДоговораКопия.Свернуть("Дата, ДоговорКонтрагента, Сделка","");
	
	СтруктураПоиска = Новый Структура("Дата, ДоговорКонтрагента, Сделка, РасчетыВозврат, Документ");
	// если "возврат" (формируем Приложения 2) - необходимо всегда указывать документ-основание: налоговую накладную - основание!
	СтруктураПоиска.РасчетыВозврат 	= Перечисления.РасчетыВозврат.Расчеты;
	СтруктураПоиска.Документ 		= Неопределено;
	Для каждого СтрокаДоговоров Из ДоговораКопия Цикл
		СтруктураПоиска.Дата 				= СтрокаДоговоров.Дата;
		СтруктураПоиска.ДоговорКонтрагента 	= СтрокаДоговоров.ДоговорКонтрагента;
		СтруктураПоиска.Сделка 				= СтрокаДоговоров.Сделка;
		
		СтрокиИсточниковНоменклатуры = ИсточникиНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Если СтрокиИсточниковНоменклатуры.Количество() = 0 Тогда
			СтрокаИсточниковНоменклатуры = ИсточникиНоменклатуры.Добавить();
			СтрокаИсточниковНоменклатуры.Дата 					= СтруктураПоиска.Дата;		
			СтрокаИсточниковНоменклатуры.ДоговорКонтрагента 	= СтруктураПоиска.ДоговорКонтрагента;
			СтрокаИсточниковНоменклатуры.Сделка 				= СтруктураПоиска.Сделка;
			СтрокаИсточниковНоменклатуры.РасчетыВозврат 		= СтруктураПоиска.РасчетыВозврат;
			СтрокаИсточниковНоменклатуры.Документ	 	 		= Неопределено;	
		КонецЕсли;
	
	КонецЦикла;
	
	//теперь добавим уже выписанные  налоговые документы
	//Сначала удалим старые упоминания
	СтруктураОтбора = новый Структура("СуществующийДокумент", истина);
	УдалитьСтрокиТабличныхЧастейНоменклатуры(СтруктураОтбора);
	УдалитьСтрокиТабличнойЧасти(ИсточникиНоменклатуры, СтруктураОтбора);
	
	// Получим таблицу с датами/договорами для поиска выписанных документов
	ТаблицаДоговоров = Договора.Выгрузить();
	ТаблицаДоговоров.Свернуть("Дата,ДоговорКонтрагента,Сделка,РасчетыВозврат","");
	
	ОтборИсточниковНоменклатуры = Новый Структура();
	
	Для каждого Строка Из ТаблицаДоговоров Цикл
	    // находим существующие налоговые документы
		Если Строка.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
		
			СуществующиеДокументы = Документы.НалоговаяНакладная.Выбрать(НачалоДня(Строка.Дата),
																		 КонецДня(Строка.Дата), 
																		 Новый Структура("ДоговорКонтрагента", Строка.ДоговорКонтрагента),
																		 "Дата");
		Иначе
																		 
			СуществующиеДокументы = Документы.Приложение2КНалоговойНакладной.Выбрать(НачалоДня(Строка.Дата),
																					 КонецДня(Строка.Дата), 
																					 Новый Структура("ДоговорКонтрагента", Строка.ДоговорКонтрагента),
																					 "Дата");

		КонецЕсли;	
		
		// добавляем существующие налоговые документы
		Пока СуществующиеДокументы.Следующий() Цикл
				
			Если СуществующиеДокументы.Проведен = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаИсточниковНоменклатуры = ИсточникиНоменклатуры.Добавить();
			СтрокаИсточниковНоменклатуры.Дата	 			= Строка.Дата;
			СтрокаИсточниковНоменклатуры.СуществующийДокумент = Истина;
			СтрокаИсточниковНоменклатуры.Документ 			= СуществующиеДокументы.Ссылка;
			СтрокаИсточниковНоменклатуры.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
			СтрокаИсточниковНоменклатуры.Сделка 			= Строка.Сделка;
			СтрокаИсточниковНоменклатуры.РасчетыВозврат 	= Строка.РасчетыВозврат;
			
			ОтборИсточниковНоменклатуры.Вставить("Дата",					СтрокаИсточниковНоменклатуры.Дата);
			ОтборИсточниковНоменклатуры.Вставить("СуществующийДокумент", 	Истина);
			ОтборИсточниковНоменклатуры.Вставить("Документ",				СтрокаИсточниковНоменклатуры.Документ);
			ОтборИсточниковНоменклатуры.Вставить("ДоговорКонтрагента",		СтрокаИсточниковНоменклатуры.ДоговорКонтрагента);
			ОтборИсточниковНоменклатуры.Вставить("Сделка",					СтрокаИсточниковНоменклатуры.Сделка);
			ОтборИсточниковНоменклатуры.Вставить("РасчетыВозврат",			СтрокаИсточниковНоменклатуры.РасчетыВозврат);
			
			ЗаполнитьТабличныеЧасти(ОтборИсточниковНоменклатуры);
			
		КонецЦикла; 
	
	КонецЦикла; 

КонецПроцедуры

Процедура ДобавитьСтрокуВДоговора(Выборка) 
	
	ВыборкаСтавка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтавка.Следующий() Цикл
		
		Если ДопПараметры.Количество() = 0 Тогда
			ДобавитьСтрокуВДоговораОтгрузка(ВыборкаСтавка);	
			Продолжить;	
		КонецЕсли;
					
		ВыборкаДоп1 = ВыборкаСтавка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДоп1.Следующий() Цикл 
						
			Если ДопПараметры.Количество() = 1 Тогда
				ДобавитьСтрокуВДоговораОтгрузка(ВыборкаДоп1);	
				Продолжить;	
			КонецЕсли;
						
			ВыборкаДоп2 = ВыборкаДоп1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДоп2.Следующий() Цикл 
				Если ДопПараметры.Количество() = 2 Тогда
					ДобавитьСтрокуВДоговораОтгрузка(ВыборкаДоп2);	
					Продолжить;	
				КонецЕсли;
							
				// служебное сообщение
				Сообщить("Количество доп. параметров превышает 2!");
							
			КонецЦикла;
			
		КонецЦикла;		
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВДоговораОтгрузка(Выборка, Коэффициент = 1)		
	
	Если  Выборка.СуммаОтгрузки = NULL 
	  ИЛИ Выборка.СуммаОтгрузки + Выборка.СуммаНДСОтгрузки <= 0  Тогда
	  
	  Возврат
	  
    КонецЕсли;
	
	СтрокаДоговоров = Договора.Добавить();
	
	СтрокаДоговоров.Дата		 		= Выборка.Дата;
	СтрокаДоговоров.РасчетыВозврат 		= Выборка.РасчетыВозврат;
	СтрокаДоговоров.ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
	СтрокаДоговоров.Сделка 				= Выборка.Сделка;
	СтрокаДоговоров.ЗаТару 				= Выборка.ЗаТару;
	СтрокаДоговоров.СтавкаНДС 			= Выборка.СтавкаНДС;
	
	Для каждого ДопПараметр Из ДопПараметры Цикл
		СтрокаДоговоров[ДопПараметр.Ключ]= Выборка[ДопПараметр.Ключ];
	КонецЦикла; 	

	СтрокаДоговоров.Сумма 		= Коэффициент * (Выборка.СуммаОтгрузки + Выборка.СуммаНДСОтгрузки);
	СтрокаДоговоров.СуммаНДС	= Коэффициент * (Выборка.СуммаНДСОтгрузки);
	
КонецПроцедуры

Процедура ДобавитьСтрокуВДоговораАванс(Выборка, Аванс) 
	
	СтрокаДоговоров = Договора.Добавить();
	
	СтрокаДоговоров.Дата		 		= Выборка.Дата;
	Если СтрокаДоговоров.Дата = '00010101' Тогда
		СтрокаДоговоров.Дата = Дата;	
	КонецЕсли;
	СтрокаДоговоров.РасчетыВозврат 		= Выборка.РасчетыВозврат;
	СтрокаДоговоров.ДоговорКонтрагента 	= Выборка.ДоговорКонтрагента;
	СтрокаДоговоров.Сделка			 	= Выборка.Сделка;
	СтрокаДоговоров.ЗаТару 				= Выборка.ЗаТару;
	СтрокаДоговоров.Сумма 				= Аванс;
	
КонецПроцедуры

Процедура УдалитьСтрокиТабличныхЧастейНоменклатуры(СтруктураУдаляемыхСтрок = Неопределено) Экспорт
	УдалитьСтрокиТабличнойЧасти(Товары, 			СтруктураУдаляемыхСтрок);
	УдалитьСтрокиТабличнойЧасти(ВозвратнаяТара, 	СтруктураУдаляемыхСтрок);
	УдалитьСтрокиТабличнойЧасти(Услуги, 			СтруктураУдаляемыхСтрок);
	УдалитьСтрокиТабличнойЧасти(ОС,		 			СтруктураУдаляемыхСтрок);
	УдалитьСтрокиТабличнойЧасти(НематериальныеАктивы, СтруктураУдаляемыхСтрок);
КонецПроцедуры
 
Процедура УдалитьСтрокиТабличнойЧасти(ТабличнаяЧасть, СтруктураУдаляемыхСтрок = Неопределено) Экспорт
	Если  СтруктураУдаляемыхСтрок = Неопределено Тогда
		
		ТабличнаяЧасть.Очистить();
		
	Иначе
		
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(СтруктураУдаляемыхСтрок);
		Для каждого НайденнаяСтрока  Из НайденныеСтроки Цикл
			ТабличнаяЧасть.Удалить(НайденнаяСтрока)
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТабличныеЧасти(СтруктураОтбора) Экспорт 
	
	//проверим наличие необходимого отбора
	Если НЕ СтруктураОтбора.Свойство("СуществующийДокумент") Тогда
	
		СтруктураОтбора.Вставить("СуществующийДокумент", Ложь);
	
	КонецЕсли;
	
	ДокументОснование = СтруктураОтбора.Документ; 
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда 
		// специфический случай. Отчет окмитенту о продажах: номенклатурный состав
		// самого документа не имеет никакого отношения к заполнению налоговой - в ней должна быть только информация
		// об услуге комиссии
		СтрокаУслуг = Услуги.Добавить();
		СтрокаУслуг.Дата = СтруктураОтбора.Дата;
		СтрокаУслуг.ДоговорКонтрагента = СтруктураОтбора.ДоговорКонтрагента;
		СтрокаУслуг.Сделка = СтруктураОтбора.Сделка;
		СтрокаУслуг.РасчетыВозврат = СтруктураОтбора.РасчетыВозврат;
		СтрокаУслуг.Документ = ДокументОснование;
		
		УслугаКомиссии = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяУслугаКомиссии");
		Если НЕ ЗначениеЗаполнено(УслугаКомиссии) Тогда
			Сообщить("Для текущего пользователя в настройках не задана """"Основная номенклатура-услуга по комиссии"""" ");
		КонецЕсли; 
		СтрокаУслуг.Номенклатура = УслугаКомиссии;
		СтрокаУслуг.Содержание 	 = УслугаКомиссии.НаименованиеПолное;
		
		СтрокаУслуг.Количество = 1;
		СтрокаУслуг.КоличествоВДокумент = 1;
		
		СтрокаУслуг.Цена 			  = ДокументОснование.Товары.Итог("СуммаВознаграждения");
		СтрокаУслуг.Сумма 			  = СтрокаУслуг.Цена;
		СтрокаУслуг.СуммаВДокумент 	  = СтрокаУслуг.Цена;
		СтрокаУслуг.СтавкаНДС 		  = ДокументОснование.СтавкаНДСВознаграждения;
		СтрокаУслуг.СуммаНДС 		  = ДокументОснование.Товары.Итог("СуммаНДСВознаграждения");
		СтрокаУслуг.СуммаНДСВДокумент = СтрокаУслуг.СуммаНДС;
		
		Для каждого ДопПараметр Из ДопПараметры Цикл
			Если ДопПараметр.Ключ = "НалоговоеНазначение" Тогда
				СтрокаУслуг[ДопПараметр.Ключ] = ДокументОснование[ДопПараметр.Ключ];
			Иначе
				СтрокаУслуг[ДопПараметр.Ключ] = ДокументОснование[ДопПараметр.Ключ+"ПоВознаграждению"];
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ЗаполнитьТабличнуюЧасть("Товары", 			СтруктураОтбора);
		ЗаполнитьТабличнуюЧасть("Услуги", 			СтруктураОтбора);
		ЗаполнитьТабличнуюЧасть("ВозвратнаяТара", 	СтруктураОтбора);
		ЗаполнитьТабличнуюЧасть("ОС", 				СтруктураОтбора);
		ЗаполнитьТабличнуюЧасть("НематериальныеАктивы",СтруктураОтбора);
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда 
			ЗаполнитьТабличнуюЧасть("Продукция", СтруктураОтбора);
	    КонецЕсли;

	КонецЕсли;
		
	ОбновитьИсточникиНоменклатуры(СтруктураОтбора);
	
КонецПроцедуры

Процедура ОбновитьСоставИсточниковНоменклатуры() Экспорт

	СтруктураПоиска = Новый Структура();
	
	Сч = 0;
	Пока Сч < ИсточникиНоменклатуры.Количество() Цикл
	
		СтрокаДокументов = ИсточникиНоменклатуры[Сч];
		
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Дата",		 	   СтрокаДокументов.Дата);
		СтруктураПоиска.Вставить("РасчетыВозврат", 	   СтрокаДокументов.РасчетыВозврат);
		СтруктураПоиска.Вставить("ДоговорКонтрагента", СтрокаДокументов.ДоговорКонтрагента);
		СтруктураПоиска.Вставить("Сделка", 			   СтрокаДокументов.Сделка);
		
		// поищем соответствующие строки в договорах
		НайденныеСтроки = Договора.НайтиСтроки(СтруктураПоиска);
		
		// если строк в таблице договоров нет - удалим строку Источников номенклатуры и соответсвтующие строки табличных частей
		Если НайденныеСтроки.Количество() = 0 Тогда
			// Для удаления строк табличных частей в структуру поиска добавим ссылку на документ
			СтруктураПоиска.Вставить("Документ", СтрокаДокументов.Документ);
			
			// Удалим лишние строки Табличных Частей с номенклатурой
			УдалитьСтрокиТабличныхЧастейНоменклатуры(СтруктураПоиска);
			
			// Удалим лишние строки Источников номенклатуры
			ИсточникиНоменклатуры.Удалить(СтрокаДокументов);
		Иначе
			// добавим строки в Договора с доп. параметрами, если таких там еще нет	
			Для каждого ДопПараметр Из ДопПараметры Цикл
				СтруктураПоиска.Вставить(ДопПараметр.Ключ, СтрокаДокументов[ДопПараметр.Ключ]);
			КонецЦикла;			
			СтруктураПоиска.Вставить("ЗаТару",СтрокаДокументов.ЗаТару);
			СтруктураПоиска.Вставить("СтавкаНДС",СтрокаДокументов.СтавкаНДС);			
			
			НайденныеСтроки = Договора.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаДоговоров = Договора.Добавить();
				Для каждого Параметр Из СтруктураПоиска Цикл
					СтрокаДоговоров[Параметр.Ключ] = Параметр.Значение;
				КонецЦикла;
			КонецЕсли;
			
			Сч = Сч + 1;
			
		КонецЕсли;	
		
	КонецЦикла; 

КонецПроцедуры

Процедура ОбновитьИсточникиНоменклатуры(СтруктураОтбораНоменклатуры) Экспорт

	мИтоговаяТаблица.Очистить();
	
	ВыгрузитьТабличнуюЧастьВИтоговуюТаблицу(СтруктураОтбораНоменклатуры, мИтоговаяТаблица, "Товары");
	ВыгрузитьТабличнуюЧастьВИтоговуюТаблицу(СтруктураОтбораНоменклатуры, мИтоговаяТаблица, "Услуги");
	ВыгрузитьТабличнуюЧастьВИтоговуюТаблицу(СтруктураОтбораНоменклатуры, мИтоговаяТаблица, "ВозвратнаяТара");
	ВыгрузитьТабличнуюЧастьВИтоговуюТаблицу(СтруктураОтбораНоменклатуры, мИтоговаяТаблица, "ОС");
	ВыгрузитьТабличнуюЧастьВИтоговуюТаблицу(СтруктураОтбораНоменклатуры, мИтоговаяТаблица, "НематериальныеАктивы");
	
	ВалютаВзаиморасчетовНУ  = СтруктураОтбораНоменклатуры.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	// получим реквизиты документа, связанные с НДС
	Документ = СтруктураОтбораНоменклатуры.Документ;
	Если Документ = Неопределено Тогда
		// Без документа- основания
		ВалютаДокумента  = ВалютаВзаиморасчетовНУ;
		УчитыватьНДС 	 = Истина;
		СуммаВключаетНДС = Истина;
	
	Иначе
		
		ВалютаДокумента  = Документ.ВалютаДокумента;
		УчитыватьНДС 	 = Документ.УчитыватьНДС;
		СуммаВключаетНДС = Документ.СуммаВключаетНДС;
	
	КонецЕсли; 
	
	// пересчитаем суммы с учетом ошибок округления и реквизитов учета НДС в документе в гривны
	ПогрешностиОкругления 	  = Новый Соответствие();
	ПогрешностиОкругленияТара = Новый Соответствие();
	
	ДанныеВалДок 		= МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	ДанныеВалВзаимНУ 	= МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовНУ, Дата);
	
	Для каждого СтрокаТаблицы Из мИтоговаяТаблица Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СуммаСНДСВал    = СтрокаТаблицы.СуммаВДокумент + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСВДокумент);
		СуммаНДСВал     = СтрокаТаблицы.СуммаНДСВДокумент;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаВДокумент 	 = СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСВДокумент  = СуммаНДСВал;
		Иначе
			СтрокаТаблицы.СуммаВДокумент 	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДСВал, 
																		ВалютаДокумента,
																		ВалютаВзаиморасчетовНУ, 
																		ДанныеВалДок.Курс, 
																		ДанныеВалВзаимНУ.Курс,
																		ДанныеВалДок.Кратность,
																		ДанныеВалВзаимНУ.Кратность,
																		, ?(СтрокаТаблицы.ЗаТару, ПогрешностиОкругленияТара, ПогрешностиОкругления) , "СуммаСНДСРегл");
			
			СтрокаТаблицы.СуммаНДСВДокумент  = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаВДокумент,
																					УчитыватьНДС,
																					Истина,
																					СтрокаТаблицы.СтавкаНДС,
																					?(СтрокаТаблицы.ЗаТару, ПогрешностиОкругленияТара, ПогрешностиОкругления));
		КонецЕсли;
		
	КонецЦикла;	
	
	КолонкиГруппировок = "СтавкаНДС,ЗаТару";
	Для каждого ДопПараметр Из ДопПараметры Цикл
		КолонкиГруппировок = КолонкиГруппировок +"," + ДопПараметр.Ключ;
	КонецЦикла;
	мИтоговаяТаблица.Свернуть(КолонкиГруппировок,"СуммаВДокумент, СуммаНДСВДокумент");
	
	// создадим новые строки в ИсточникахНоменклатуры, взамен старых
	СтарыеСтрокиИсточниковНоменклатуры = ИсточникиНоменклатуры.НайтиСтроки(СтруктураОтбораНоменклатуры);
	
	// Данные о документе установим установим в таблице в "старом" порядке
	МинПозиция = Неопределено;
	Для каждого СтрокаИсточниковНоменклатуры Из СтарыеСтрокиИсточниковНоменклатуры Цикл
		Позиция = ИсточникиНоменклатуры.Индекс(СтрокаИсточниковНоменклатуры);
		Если  МинПозиция = Неопределено 
		  ИЛИ Позиция < МинПозиция Тогда
			 МинПозиция = Позиция;
		КонецЕсли;
		
		ИсточникиНоменклатуры.Удалить(СтрокаИсточниковНоменклатуры);
	КонецЦикла; 
	
	Если МинПозиция = Неопределено Тогда
		МинПозиция = 0;
	КонецЕсли;
	
	
	Если мИтоговаяТаблица.Количество() = 0 Тогда
		// добавим единственную "пустую" строку
		СтрокаИсточниковНоменклатуры = ИсточникиНоменклатуры.Вставить(МинПозиция);
		СтрокаИсточниковНоменклатуры.СуществующийДокумент	= СтруктураОтбораНоменклатуры.СуществующийДокумент;
		СтрокаИсточниковНоменклатуры.Дата				 	= СтруктураОтбораНоменклатуры.Дата;
		СтрокаИсточниковНоменклатуры.ДоговорКонтрагента 	= СтруктураОтбораНоменклатуры.ДоговорКонтрагента;
		СтрокаИсточниковНоменклатуры.Сделка 				= СтруктураОтбораНоменклатуры.Сделка;
		СтрокаИсточниковНоменклатуры.Документ 				= СтруктураОтбораНоменклатуры.Документ;
		СтрокаИсточниковНоменклатуры.РасчетыВозврат 		= СтруктураОтбораНоменклатуры.РасчетыВозврат;
	Иначе
		
		СтруктураОтбораДоговоров = Новый Структура();
		СтруктураОтбораДоговоров.Вставить("Дата", 				СтруктураОтбораНоменклатуры.Дата);
		СтруктураОтбораДоговоров.Вставить("ДоговорКонтрагента", СтруктураОтбораНоменклатуры.ДоговорКонтрагента);
		СтруктураОтбораДоговоров.Вставить("Сделка", 			СтруктураОтбораНоменклатуры.Сделка);
		СтруктураОтбораДоговоров.Вставить("РасчетыВозврат",		СтруктураОтбораНоменклатуры.РасчетыВозврат);

		
		Для каждого СтрокаСумм Из мИтоговаяТаблица Цикл
			
			СтрокаИсточниковНоменклатуры = ИсточникиНоменклатуры.Вставить(МинПозиция);
			СтрокаИсточниковНоменклатуры.СуществующийДокумент	= СтруктураОтбораНоменклатуры.СуществующийДокумент;
			СтрокаИсточниковНоменклатуры.Дата				    = СтруктураОтбораНоменклатуры.Дата;
			СтрокаИсточниковНоменклатуры.ДоговорКонтрагента 	= СтруктураОтбораНоменклатуры.ДоговорКонтрагента;
			СтрокаИсточниковНоменклатуры.Сделка 				= СтруктураОтбораНоменклатуры.Сделка;
			СтрокаИсточниковНоменклатуры.Документ 				= СтруктураОтбораНоменклатуры.Документ;
			СтрокаИсточниковНоменклатуры.РасчетыВозврат	 		= СтруктураОтбораНоменклатуры.РасчетыВозврат;
			Для каждого ДопПараметр Из ДопПараметры Цикл
				СтрокаИсточниковНоменклатуры[ДопПараметр.Ключ]  = СтрокаСумм[ДопПараметр.Ключ];
			КонецЦикла; 
			СтрокаИсточниковНоменклатуры.ЗаТару    	  	   		= СтрокаСумм.ЗаТару;
			СтрокаИсточниковНоменклатуры.СтавкаНДС      		= СтрокаСумм.СтавкаНДС;
			СтрокаИсточниковНоменклатуры.СуммаНДС       		= СтрокаСумм.СуммаНДСВДокумент;
			СтрокаИсточниковНоменклатуры.Сумма		  			= СтрокаСумм.СуммаВДокумент;
			
			//Добавим строки в Договора по тем видам деятельности/счетам, по которым есть строки в документах	
			Для каждого ДопПараметр Из ДопПараметры Цикл
				СтруктураОтбораДоговоров.Вставить(ДопПараметр.Ключ, СтрокаСумм[ДопПараметр.Ключ]);
			КонецЦикла; 
			СтруктураОтбораДоговоров.Вставить("ЗаТару", 	СтрокаСумм.ЗаТару);
			СтруктураОтбораДоговоров.Вставить("СтавкаНДС",  СтрокаСумм.СтавкаНДС);
			
			СтрокиДоговоров = Договора.НайтиСтроки(СтруктураОтбораДоговоров);
			Если СтрокиДоговоров.Количество() = 0 Тогда
				СтрокаДоговоров = Договора.Добавить();
				Для каждого Параметр Из СтруктураОтбораДоговоров Цикл
					СтрокаДоговоров[Параметр.Ключ] = Параметр.Значение;
				КонецЦикла; 
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьТабличнуюЧастьВИтоговуюТаблицу(СтруктураОтбора, Таблица, ИмяТабличнойЧасти)
	
	КолонкиТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти.Найти(ИмяТабличнойЧасти).Реквизиты;
	
	// выгружаем строки табличных частей документов в таблицу
	СтрокиПоДокументу = ЭтотОбъект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТЧ Из СтрокиПоДокументу Цикл
		
		СтрокаИтоговойТаблицы = Таблица.Добавить();
		
		СтрокаИтоговойТаблицы.СуммаВДокумент = СтрокаТЧ.СуммаВДокумент;
		
		Если  КолонкиТабличнойЧасти.Найти("СтавкаНДС") = Неопределено 
		  ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
		  // если ставка в документе не заполнена считаем это ставкой НеНДС.
		  СтрокаИтоговойТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
		Иначе 
			СтрокаИтоговойТаблицы.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
		КонецЕсли;
		
		Если  НЕ КолонкиТабличнойЧасти.Найти("СуммаНДСВДокумент") = Неопределено Тогда
			СтрокаИтоговойТаблицы.СуммаНДСВДокумент = СтрокаТЧ.СуммаНДСВДокумент;
		КонецЕсли; 
		
		Если ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		  	СтрокаИтоговойТаблицы.ЗаТару = Истина;
		КонецЕсли;
		
		Для каждого ДопПараметр Из ДопПараметры Цикл
			
			СтрокаИтоговойТаблицы[ДопПараметр.Ключ] = СтрокаТЧ[ДопПараметр.Ключ];
		
		КонецЦикла; 
	
	КонецЦикла; 

КонецПроцедуры


Процедура ЗаполнитьТабличнуюЧасть(ИмяТабличнойЧастиДокумента, СтруктураОтбора)
	Перем ИмяТабличнойЧастиОбработки;
	
	Документ = СтруктураОтбора.Документ;
	
	Если ИмяТабличнойЧастиДокумента = "Продукция" Тогда
		// особый случай с документом РеализацияУслугПоПереработке
		ИмяТабличнойЧастиОбработки = "Товары";
	Иначе	
		ИмяТабличнойЧастиОбработки = ИмяТабличнойЧастиДокумента;
	КонецЕсли; 
	
	Если Документ.Метаданные().ТабличныеЧасти.Найти(ИмяТабличнойЧастиДокумента) = Неопределено Тогда
		// нет такой табличной части
		Возврат
	КонецЕсли;
	
	КолокниТЧОбработки = ЭтотОбъект.Метаданные().ТабличныеЧасти.Найти(ИмяТабличнойЧастиОбработки).Реквизиты;		
	КолокниТЧДокумента = Документ.Метаданные().ТабличныеЧасти.Найти(ИмяТабличнойЧастиДокумента).Реквизиты;
	
	ДоговорПоЗаказам         = СтруктураОтбора.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
	ИсточникСодержитЗаказВТЧ = НЕ (КолокниТЧДокумента.Найти("ЗаказПокупателя") = Неопределено);
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Документ = ПолучитьДанныеЗаказаСУчетомКорректировок(Документ, ИмяТабличнойЧастиДокумента);	
	КонецЕсли;
	
	Для каждого СтрокаТЧДокумента Из Документ[ИмяТабличнойЧастиДокумента] Цикл 
		
		Если  мОтбиратьНоменклатуруПоЗаказам
			И ДоговорПоЗаказам 
			И ИсточникСодержитЗаказВТЧ Тогда
		
			Если НЕ СтруктураОтбора.Сделка = СтрокаТЧДокумента.ЗаказПокупателя Тогда
				Продолжить;
			КонецЕсли;
		
		КонецЕсли;
		
		СтрокаТЧОбработки = ЭтотОбъект[ИмяТабличнойЧастиОбработки].Добавить();
		
		Для каждого Колонка Из КолокниТЧОбработки Цикл
			
			ИмяКолонки = Колонка.Имя; 
			
			Если ИмяКолонки = "Документ" Тогда
				
				СтрокаТЧОбработки[ИмяКолонки] = СтруктураОтбора.Документ;	
				
			ИначеЕсли ИмяКолонки = "Дата" Тогда
				
				СтрокаТЧОбработки[ИмяКолонки] = СтруктураОтбора.Дата;	
				
			ИначеЕсли ИмяКолонки = "СуществующийДокумент" Тогда
				
				СтрокаТЧОбработки[ИмяКолонки] = СтруктураОтбора.СуществующийДокумент;	
			
			ИначеЕсли ИмяКолонки = "РасчетыВозврат" Тогда
				
				СтрокаТЧОбработки[ИмяКолонки] = СтруктураОтбора.РасчетыВозврат;	
				
			ИначеЕсли ИмяКолонки = "ДоговорКонтрагента" Тогда
				
				СтрокаТЧОбработки[ИмяКолонки] = СтруктураОтбора.ДоговорКонтрагента;	
				
			ИначеЕсли ИмяКолонки = "Сделка" Тогда
				
				СтрокаТЧОбработки[ИмяКолонки] = СтруктураОтбора.Сделка;	
				
			ИначеЕсли ИмяКолонки = "НалоговоеНазначение" И ИмяТабличнойЧастиДокумента = "ОС" Тогда
				
				ДатаСреза 	= Новый Граница(ЭтотОбъект.Дата, ВидГраницы.Исключая);
				Отбор 		= Новый Структура("Организация, ОсновноеСредство", ЭтотОбъект.Организация, СтрокаТЧОбработки.ОсновноеСредство);

				СведенияОНалоговомНазначение = РегистрыСведений.НалоговыеНазначенияОС.СрезПоследних(ДатаСреза, Отбор);
				
				Если СведенияОНалоговомНазначение.Количество() > 0 Тогда
					СтрокаТЧОбработки[ИмяКолонки] = СведенияОНалоговомНазначение[0].НалоговоеНазначение;
				КонецЕсли;
				
			ИначеЕсли ИмяКолонки = "НалоговоеНазначение" И ИмяТабличнойЧастиДокумента = "НематериальныеАктивы" Тогда
				
				ДатаСреза 	= Новый Граница(ЭтотОбъект.Дата, ВидГраницы.Исключая);
				Отбор 		= Новый Структура("Организация, НематериальныйАктив", ЭтотОбъект.Организация, СтрокаТЧОбработки.НематериальныйАктив);

				СведенияОНалоговомНазначение = РегистрыСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(ДатаСреза, Отбор);
				
				Если СведенияОНалоговомНазначение.Количество() > 0 Тогда
					СтрокаТЧОбработки[ИмяКолонки] = СведенияОНалоговомНазначение[0].НалоговоеНазначение;
				КонецЕсли;
				
			ИначеЕсли НЕ КолокниТЧДокумента.Найти(ИмяКолонки) = Неопределено Тогда
				
				СтрокаТЧОбработки[ИмяКолонки] = СтрокаТЧДокумента[ИмяКолонки]
				
			ИначеЕсли Прав(ИмяКолонки, 9) = "ВДокумент" Тогда
				
				ИмяКолонкиИсходногоЗначения = Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 9); 
				
				Если  НЕ КолокниТЧДокумента.Найти(ИмяКолонкиИсходногоЗначения) = Неопределено Тогда
					
					СтрокаТЧОбработки[ИмяКолонки] = СтрокаТЧДокумента[ИмяКолонкиИсходногоЗначения];
					
				КонецЕсли;

			КонецЕсли;
		
		КонецЦикла; 
		
		ЗаполнитьДопПараметры(СтрокаТЧОбработки, ИмяТабличнойЧастиДокумента);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьДопПараметры(СтрокаТЧ, ИмяТабличнойЧасти) Экспорт 
	
	Если  ИмяТабличнойЧасти = "НематериальныеАктивы"
	  ИЛИ ИмяТабличнойЧасти = "ОС" Тогда
		
		СчетаУчета = Новый Структура();
		
		// заполним по-умолчанию
		Для каждого ДопПараметр Из ДопПараметры Цикл
			Если ДопПараметр.Ключ = "НалоговоеНазначение" Тогда
				СчетаУчета.Вставить(ДопПараметр.Ключ, Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СчетаУчета = СчетаУчетаВДокументах.ПолучитьСчетаУчетаНоменклатурыИзНастроек(Организация, СтрокаТЧ.Номенклатура, , Дата);
		СчетаУчета.Вставить("НалоговоеНазначение",СчетаУчета.НалоговоеНазначение);
		
	КонецЕсли;
	
	// заполним пустые значения значениями по-умочанию
	Для каждого ДопПараметр Из ДопПараметры Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ[ДопПараметр.Ключ]) Тогда
			
			СтрокаТЧ[ДопПараметр.Ключ]  = СчетаУчета[ДопПараметр.Ключ]
					
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьВозможныеВидыОпераций(Соответствие,  РасчетыВозврат)
	
	Соответствие.Очистить();
	
	ВидыОперацийНалоговаяНакладная = Перечисления.ВидыОперацийНалоговаяНакладная;
	ВидыОперацийПриложение2		   = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной;
	
	Для каждого СтавкаНДС Из Перечисления.СтавкиНДС Цикл
		
		Если РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
			Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				ВидОперации = ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации;
			ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НеНДС Тогда
				ВидОперации = ВидыОперацийНалоговаяНакладная.НеНДСОперации;
			Иначе
				//0% или 20% - один вид операции
				ВидОперации = ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации;
			КонецЕсли;
		Иначе
			Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				ВидОперации = ВидыОперацийПриложение2.ОсвобожденныеОперацииВозврат;
			ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НеНДС Тогда
				ВидОперации = ВидыОперацийПриложение2.НеНДСОперацииВозврат;
			Иначе
				//0% или 20% - один вид операции
				ВидОперации = ВидыОперацийПриложение2.ОблагаемыеОперацииВозврат;
			КонецЕсли;
		КонецЕсли;	
		
		Соответствие.Вставить(СтавкаНДС, ВидОперации);
	КонецЦикла;
	
КонецФункции // ПолучитьВозможныеВидыОпераций(РасчетыВозврат, ВидДокумента)()

Функция ОтобратьСтрокиТабличнойЧасти(ИмяТабличнойЧасти, СтавкаНДС=Неопределено, СтруктураОтбораДанных)
	
	НайденныеСтроки = ЭтотОбъект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбораДанных);
	
	Сч = 0;
	Пока Сч <= НайденныеСтроки.Количество()-1 Цикл
		ТекущаяСтрока = НайденныеСтроки.Получить(Сч);
	 	Если      (НЕ (СтавкаНДС=Неопределено ИЛИ ТекущаяСтрока.СтавкаНДС = СтавкаНДС) ) 
			  ИЛИ (   (ИмяТабличнойЧасти = "ОС"  ИЛИ ИмяТабличнойЧасти = "НематериальныеАктивы") И ТекущаяСтрока.СуммаВДокумент = 0)
			  ИЛИ (НЕ (ИмяТабличнойЧасти = "ОС"  ИЛИ ИмяТабличнойЧасти = "НематериальныеАктивы") И ТекущаяСтрока.КоличествоВДокумент = 0) Тогда
			НайденныеСтроки.Удалить(Сч);	
		Иначе
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		МассивОтобранныхСтрок = Неопределено;
	Иначе
		МассивОтобранныхСтрок = НайденныеСтроки;
	КонецЕсли;
	
	Возврат МассивОтобранныхСтрок;
	
КонецФункции

Процедура СформироватьНалоговыеДокументы(УИД = Неопределено, тзЧастичнаяОтгрузка = Неопределено) Экспорт
	
	СписокСформированныхДокументов.Очистить();
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("СуществующийДокумент",	Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("Дата", 					Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ДоговорКонтрагента", 	Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДанных.Колонки.Добавить("Сделка", 				БухгалтерскийУчетРасчетовСКонтрагентами.ОпределитьВозможныеТипыСделкиРегл());
	ТаблицаДанных.Колонки.Добавить("РасчетыВозврат", 		Новый ОписаниеТипов("ПеречислениеСсылка.РасчетыВозврат"));
	ТаблицаДанных.Колонки.Добавить("ВалютаДокумента", 		Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаДанных.Колонки.Добавить("УчитыватьНДС", 			Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("СуммаВключаетНДС", 		Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ДокументОснование",		Новый ОписаниеТипов(ДопустимыеТипыДокументов));
	ТаблицаДанных.Колонки.Добавить("СтруктураДанных", 		Новый ОписаниеТипов("Структура"));
	
	
	// Соберем все необходимые данные для формирования документов
	СтруктураОтбора = Новый Структура("Дата, СуществующийДокумент, ДоговорКонтрагента, Сделка, РасчетыВозврат, Документ");
	КопияИсточникиНоменклатуры = ИсточникиНоменклатуры.Выгрузить();
	КопияИсточникиНоменклатуры.Свернуть("СуществующийДокумент, Дата, ДоговорКонтрагента, Сделка, РасчетыВозврат, Документ","");
	Для каждого СтрокаДокументов Из КопияИсточникиНоменклатуры Цикл
		
		Если СтрокаДокументов.СуществующийДокумент  Тогда
			
			//это информация о проведенном налоговом документе
			Продолжить;	
			
		КонецЕсли;
		
		// Обновим структуру отбора
		СтруктураОтбора.Дата			 	= СтрокаДокументов.Дата;
		СтруктураОтбора.СуществующийДокумент= Ложь;
		СтруктураОтбора.ДоговорКонтрагента 	= СтрокаДокументов.ДоговорКонтрагента;
		СтруктураОтбора.Сделка			 	= СтрокаДокументов.Сделка;
		СтруктураОтбора.РасчетыВозврат 		= СтрокаДокументов.РасчетыВозврат;
		СтруктураОтбора.Документ			= СтрокаДокументов.Документ;
			
		ПолучитьДанныеДляФормированияНалоговыхДокументов(ТаблицаДанных, СтруктураОтбора);
			
	КонецЦикла; 
	
	//приступаем собственно к формированию и заполнению налоговых документов
	ТаблицаДанных.Сортировать("Дата,ДоговорКонтрагента,Сделка,РасчетыВозврат,ВалютаДокумента,УчитыватьНДС,СуммаВключаетНДС");
	
	ТекущийДата					= Неопределено;
	ТекущийДоговорКонтрагента	= Неопределено;
	ТекущийСделка				= Неопределено;
	ТекущийРасчетыВозврат		= Неопределено;
	ТекущийВалютаДокумента		= Неопределено;
	ТекущийУчитыватьНДС			= Неопределено;
	ТекущийСуммаВключаетНДС		= Неопределено;
	
	// ставкаНДС <-> ВидОперации
	ВозможныеВидыОпераций= Новый Соответствие();
	// ВидОперации <-> Документ
	НалоговыеДокументы 	 = Новый Соответствие();
	
	фНужныНовыеДокументы = Истина;
	Для каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		
		Если НЕ(  СтрокаТаблицыДанных.Дата			 		= ТекущийДата  
				И СтрокаТаблицыДанных.ДоговорКонтрагента	= ТекущийДоговорКонтрагента
				И СтрокаТаблицыДанных.Сделка				= ТекущийСделка
			    И СтрокаТаблицыДанных.РасчетыВозврат 		= ТекущийРасчетыВозврат
			    И СтрокаТаблицыДанных.ВалютаДокумента 		= ТекущийВалютаДокумента
			    И СтрокаТаблицыДанных.УчитыватьНДС		 	= ТекущийУчитыватьНДС
			    И СтрокаТаблицыДанных.СуммаВключаетНДС 		= ТекущийСуммаВключаетНДС) Тогда
				
			фНужныНовыеДокументы = Истина;
	
			// Запомним новые текущие значения
			ТекущийДата 				= СтрокаТаблицыДанных.Дата;
			ТекущийДоговорКонтрагента 	= СтрокаТаблицыДанных.ДоговорКонтрагента;
			ТекущийСделка 				= СтрокаТаблицыДанных.Сделка;
			ТекущийРасчетыВозврат 		= СтрокаТаблицыДанных.РасчетыВозврат;
			ТекущийВалютаДокумента 		= СтрокаТаблицыДанных.ВалютаДокумента;
			ТекущийУчитыватьНДС 		= СтрокаТаблицыДанных.УчитыватьНДС;
			ТекущийСуммаВключаетНДС 	= СтрокаТаблицыДанных.СуммаВключаетНДС;
			
		ИначеЕсли НЕ  ФормироватьИтоговыеНакладные 
			      ИЛИ СтрокаТаблицыДанных.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда	
			   
		   //Изменился документ основание (либо формруются приложения 2, нужны новые документы)
			фНужныНовыеДокументы = Истина;
			
		Иначе 
			
			// в итоговые налоговые накладные будем заносить данные из очередного документа-основания
			фНужныНовыеДокументы = Ложь;
			
		КонецЕсли;	
		
		Если фНужныНовыеДокументы  Тогда
			//Запишем старые, сформированные документы
			
			ЗаписатьПровестиНапечататьНалоговыеДокументы(НалоговыеДокументы, УИД);
			
			// "обнулим" документы
			НалоговыеДокументы.Очистить();
			ПолучитьВозможныеВидыОпераций(ВозможныеВидыОпераций, СтрокаТаблицыДанных.РасчетыВозврат);			
			Для каждого ВидОперации Из ВозможныеВидыОпераций Цикл
				Если СтрокаТаблицыДанных.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
					НалоговыеДокументы.Вставить(ВидОперации.Значение, Документы.НалоговаяНакладная);
				Иначе
					НалоговыеДокументы.Вставить(ВидОперации.Значение, Документы.Приложение2КНалоговойНакладной);	
			    КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		СтруктураДанных = СтрокаТаблицыДанных.СтруктураДанных;
		
		ТаблицаВозвратнойТары = Неопределено;
		НужноДобавитьВозвратнуюТару = СтруктураДанных.Свойство("ВозвратнаяТара",ТаблицаВозвратнойТары);
		
		Для каждого СтавкаНДС Из Перечисления.СтавкиНДС Цикл
			
			СтруктураТаблиц = Неопределено;
			Если СтруктураДанных.Свойство(ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтавкаНДС), СтруктураТаблиц) Тогда
				// Имеются таблицы с указанной ставкой НДС
				
				ВидОперации = ВозможныеВидыОпераций.Получить(СтавкаНДС);
				НалоговыйДокумент = НалоговыеДокументы.Получить(ВидОперации);
				Если    ТипЗнч(НалоговыйДокумент) = Тип(Документы.НалоговаяНакладная)
					ИЛИ ТипЗнч(НалоговыйДокумент) = Тип(Документы.Приложение2КНалоговойНакладной) Тогда
					// документ-объект с таким видом операции еще не сформирован
					НалоговыйДокумент = НалоговыйДокумент.СоздатьДокумент();
					
					ЗаполнитьШапкуНалоговогоДокумента(НалоговыйДокумент, ВидОперации, СтрокаТаблицыДанных);
				КонецЕсли;
				
				Для каждого ТабличнаяЧасть Из СтруктураТаблиц Цикл
					
					ДобавитьСтрокиВТабличнуюЧастьНалоговогоДокумента(НалоговыйДокумент, ТабличнаяЧасть.Ключ, ТабличнаяЧасть.Значение, СтрокаТаблицыДанных);
				
				КонецЦикла;
				
				Если ОткрытиеИзУФ И (тзЧастичнаяОтгрузка <> Неопределено) Тогда 
					Для Каждого СтрокаЧастичнаяОтгрузка Из тзЧастичнаяОтгрузка Цикл
						Если СтрокаЧастичнаяОтгрузка.СтавкаНДС = СтавкаНДС И СтрокаЧастичнаяОтгрузка.ЧастичнаяОтгрузка Тогда
							СтрокаДокументаЧастичнаяОтгрузка = НалоговыйДокумент.ЧастичнаяОтгрузка.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаДокументаЧастичнаяОтгрузка, СтрокаЧастичнаяОтгрузка);
							СтрокаДокументаЧастичнаяОтгрузка.Сумма    = СтрокаЧастичнаяОтгрузка.СуммаВДокумент - СтрокаЧастичнаяОтгрузка.СуммаНДСВДокумент;
							СтрокаДокументаЧастичнаяОтгрузка.СуммаНДС = СтрокаЧастичнаяОтгрузка.СуммаНДСВДокумент;
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли; 
				
				// добавим в первый формируемый документ всю возвратную тару
				Если НужноДобавитьВозвратнуюТару Тогда
					ДобавитьСтрокиВТабличнуюЧастьНалоговогоДокумента(НалоговыйДокумент, "ВозвратнаяТара", ТаблицаВозвратнойТары, СтрокаТаблицыДанных);	
					НужноДобавитьВозвратнуюТару = Ложь;
				КонецЕсли;
					
				НалоговыеДокументы.Вставить(ВозможныеВидыОпераций.Получить(СтавкаНДС), НалоговыйДокумент); 
			КонецЕсли;
		КонецЦикла; 
		
		Если  НужноДобавитьВозвратнуюТару Тогда
			// в налоговый документ должна попасть только тара, табличные части не заполнены
			// Вид операции в документе особого значения не имеет
			
			СтавкаНДСДляТары 	= Перечисления.СтавкиНДС.НДС20; 
			ВидОперацииДляТары  = ВозможныеВидыОпераций.Получить(СтавкаНДСДляТары);
			
			НалоговыйДокумент = НалоговыеДокументы.Получить(ВидОперацииДляТары);
			//гарантировано документ-объект еще не создан
			НалоговыйДокумент = НалоговыйДокумент.СоздатьДокумент();
	
			ЗаполнитьШапкуНалоговогоДокумента(НалоговыйДокумент, ВидОперацииДляТары, СтрокаТаблицыДанных);
    		ДобавитьСтрокиВТабличнуюЧастьНалоговогоДокумента(НалоговыйДокумент, "ВозвратнаяТара", ТаблицаВозвратнойТары, СтрокаТаблицыДанных);
			НалоговыеДокументы.Вставить(ВидОперацииДляТары, НалоговыйДокумент); 
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Запишем последние сформированные документы
	ЗаписатьПровестиНапечататьНалоговыеДокументы(НалоговыеДокументы, УИД);
	
КонецПроцедуры

Процедура ЗаполнитьШапкуНалоговогоДокумента(НалоговыйДокумент, ВидОперации, Данные)
	
	Если НЕ РежимПоДатам Тогда
		Если НЕ ЗначениеЗаполнено(Дата) Тогда
			ТекущаяРабочаяДата = ОбщегоНазначения.ПолучитьРабочуюДату();
			Если НачалоДня(ТекущаяРабочаяДата) = НачалоДня(ТекущаяДата())  Тогда
				ДатаДокумента = ТекущаяДата();	
			Иначе
				ДатаДокумента = ТекущаяРабочаяДата;	
			КонецЕсли; 
		Иначе
			ДатаДокумента = Дата;	
		КонецЕсли;
	Иначе	
		// время установим на  12 часов
		ДатаДокумента = Данные.Дата + 43200;	
	КонецЕсли;
	НалоговыйДокумент.Дата = ДатаДокумента;
	
	НалоговыйДокумент.АвторасчетНДС = Ложь;
	НалоговыйДокумент.ВалютаДокумента 	= Данные.ВалютаДокумента;
	НалоговыйДокумент.ВидОперации 		= ВидОперации;
	НалоговыйДокумент.ДоговорКонтрагента= Данные.ДоговорКонтрагента;
	НалоговыйДокумент.Контрагент		= Данные.ДоговорКонтрагента.Владелец;
	НалоговыйДокумент.Сделка			= Данные.Сделка;
	
	Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийНалоговаяНакладная") Тогда
		// НалоговаяНакладная
		Если НЕ ФормироватьИтоговыеНакладные Тогда
			НалоговыйДокумент.ДокументОснование = Данные.ДокументОснование;
		КонецЕсли;
	Иначе
		// Приложение 2
		НалоговыйДокумент.НалоговаяНакладная = Данные.ДокументОснование;
		НалоговыйДокумент.СпецРежимНалогообложения 	   = НалоговыйДокумент.НалоговаяНакладная.СпецРежимНалогообложения;
		НалоговыйДокумент.ТипПричиныНевыдачиПокупателю = НалоговыйДокумент.НалоговаяНакладная.ТипПричиныНевыдачиПокупателю;
	КонецЕсли; 
	
	НалоговыйДокумент.ЗаполнитьУсловиеПродажи();
	Если НалоговыйДокумент.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
		НалоговыйДокумент.ФормаРасчетов = "Бартер";  	
	Иначе		
		Если ДатаДокумента >='20110110' Тогда
			НалоговыйДокумент.ФормаРасчетов = "Оплата з поточного рахунку";
		Иначе	
			НалоговыйДокумент.ФормаРасчетов = "Оплата з розрахункового рахунку";
		КонецЕсли;
	КонецЕсли;
	
	НалоговыйДокумент.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	НалоговыйДокумент.КтоВыписалНалоговуюНакладную = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КтоВыписалНалоговуюНакладную");
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(НалоговыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов, НалоговыйДокумент.Дата);
	НалоговыйДокумент.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;
	НалоговыйДокумент.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	НалоговыйДокумент.Организация 	   = Организация;
	
	НалоговыйДокумент.СуммаВключаетНДС = Данные.СуммаВключаетНДС;
	НалоговыйДокумент.УчитыватьНДС 	   = Истина;
	
	НалоговыйДокумент.УчитыватьНДС 	   = Истина;
	НалоговыйДокумент.СчетНДС 		   = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
	
	СчетаУчета   = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация,  Данные.ДоговорКонтрагента.Владелец, Данные.ДоговорКонтрагента);
	НалоговыйДокумент.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;
	
	Если ЗначениеЗаполнено(Данные.ДокументОснование) Тогда
		Если Данные.ДокументОснование.Метаданные().Реквизиты.Найти("ТипЦен") <> Неопределено Тогда
			НалоговыйДокумент.ТипЦен = Данные.ДокументОснование.ТипЦен;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НалоговыйДокумент.ТипЦен) Тогда
	   НалоговыйДокумент.ТипЦен = Данные.ДоговорКонтрагента.ТипЦен;
	КонецЕсли;   

	НалоговыйДокумент.ЗаполнитьВидДоговора();
	Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийНалоговаяНакладная") Тогда
		НалоговыйДокумент.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокиВТабличнуюЧастьНалоговогоДокумента(Документ, ИмяТабличнойЧасти, СтрокиТабличнойЧастиОбработки, Данные)
	
	ИмяДокумента = Документ.Метаданные().ПолноеИмя();
	Если Данные.ДокументОснование = Неопределено Тогда
		ИмяДокументаОснования = Неопределено;
	Иначе
		ИмяДокументаОснования 	= Данные.ДокументОснование.Метаданные().ПолноеИмя();
		ДатаОтгрузкиОплаты 		= Данные.ДокументОснование.Дата;	
	КонецЕсли;
	
	КолонкиТЧОбработки 		= ЭтотОбъект.Метаданные().ТабличныеЧасти.Найти(ИмяТабличнойЧасти).Реквизиты;		
	КолонкиТЧДокумента 		= Документ.Метаданные().ТабличныеЧасти.Найти(ИмяТабличнойЧасти).Реквизиты;
	
	Для каждого СтрокаТЧОбработки Из СтрокиТабличнойЧастиОбработки Цикл
		
		СтрокаТЧДокумента = Документ[ИмяТабличнойЧасти].Добавить();
		
		Для Каждого КолонкаТЧДокумента Из КолонкиТЧДокумента Цикл
			
			ИмяКолонкиТЧДокумента = КолонкаТЧДокумента.Имя;
			
			// проверим, имеется ли колонка в ТЧ Обоработки с измененным значением 
			КолонкаВДокумент = КолонкиТЧОбработки.Найти(ИмяКолонкиТЧДокумента + "ВДокумент");
			Если НЕ КолонкаВДокумент = Неопределено Тогда
				ИмяКолонкиВДокумент = КолонкаВДокумент.Имя;
				Если ИмяДокумента = "Документ.НалоговаяНакладная" Тогда
					// колона ТЧ обработки с названием "..ВДокумент" должна попасть в колоку докумета без этого суффикса. 
					СтрокаТЧДокумента[ИмяКолонкиТЧДокумента] = СтрокаТЧОбработки[ИмяКолонкиВДокумент];
				Иначе // Документ.Приложение2КНалоговойНакладной
					// перенесем значение 
					СтрокаТЧДокумента[ИмяКолонкиТЧДокумента] = СтрокаТЧОбработки[ИмяКолонкиТЧДокумента];	
					
					// добавим значения по корректировке
					Если ИмяКолонкиВДокумент = "КоличествоВДокумент" Тогда
						
						СтрокаТЧДокумента["ИзменениеКоличества"]= - СтрокаТЧОбработки[ИмяКолонкиВДокумент];		
						
					ИначеЕсли ИмяКолонкиВДокумент = "СуммаВДокумент" Тогда
						
						СтрокаТЧДокумента["ИзменениеСуммы"]		= - СтрокаТЧОбработки[ИмяКолонкиВДокумент];		
						
					ИначеЕсли ИмяКолонкиВДокумент = "СуммаНДСВДокумент" Тогда
						
						СтрокаТЧДокумента["ИзменениеСуммыНДС"]	= - СтрокаТЧОбработки[ИмяКолонкиВДокумент];
						
					КонецЕсли;
				КонецЕсли;
				
			Иначе 
				// перенесем колонки с одинаковыми именами
				Если НЕ КолонкиТЧОбработки.Найти(ИмяКолонкиТЧДокумента) = Неопределено Тогда
					СтрокаТЧДокумента[ИмяКолонкиТЧДокумента] = СтрокаТЧОбработки[ИмяКолонкиТЧДокумента];
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Одноименные и связанные с ними колонки перенесли. 
		// Теперь заполним специфические колонки для каждой табличной части
		Документ. ЗаполнитьСтатьюКнигиПродаж(СтрокаТЧДокумента, ИмяТабличнойЧасти); 
		
		Если ИмяДокумента = "Документ.НалоговаяНакладная" Тогда
			
			// Дата отгрузки (оплаты) = дата документа-основания (кроме Счета)
			Если НЕ ИмяДокументаОснования = "Документ.СчетНаОплатуПокупателю"
			   И НЕ ИмяДокументаОснования = "Документ.ЗаказПокупателя"
			   И НЕ КолонкиТЧДокумента.Найти("ДатаОтгрузкиОплаты") = Неопределено Тогда
				СтрокаТЧДокумента["ДатаОтгрузкиОплаты"] = ДатаОтгрузкиОплаты;
			КонецЕсли;
			
		Иначе// Документ.Приложение2КНалоговойНакладной
			
			Если НЕ КолонкиТЧДокумента.Найти("Причина") = Неопределено Тогда
				СтрокаТЧДокумента["Причина"] = "Повернення";
			КонецЕсли;
			
			Если НЕ КолонкиТЧДокумента.Найти("ДатаКорректировки") = Неопределено Тогда
				СтрокаТЧДокумента["ДатаКорректировки"] = СтрокаТЧОбработки["Дата"];
			КонецЕсли;
			
		КонецЕсли;			
			
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПодвалНалоговогоДокумента(НалоговыйДокумент)
	
	// Заполним ЛьготуНДС в документе
	Если  ТипЗнч(НалоговыйДокумент) = Тип("ДокументОбъект.НалоговаяНакладная") Тогда
		НалоговыйДокумент.ОбновитьЗначениеЛьготыНДС(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьПровестиНапечататьНалоговыеДокументы(НалоговыеДокументы, УИД = Неопределено)
	
	Если ОткрытиеИзУФ Тогда
		МассивАдресов = Новый Массив;
	КонецЕсли;
	
	Для каждого ЭлементСоответствия Из НалоговыеДокументы Цикл
		
		НалоговыйДокумент = ЭлементСоответствия.Значение;
		Если  НЕ (ТипЗнч(НалоговыйДокумент) = Тип("ДокументОбъект.НалоговаяНакладная")
			  ИЛИ ТипЗнч(НалоговыйДокумент) = Тип("ДокументОбъект.Приложение2КНалоговойНакладной")) Тогда
			  Продолжить;
		КонецЕсли;
		
		ЗаполнитьПодвалНалоговогоДокумента(НалоговыйДокумент);
		Если НЕ мНеЗаписыватьДокументы Тогда
			НалоговыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если  ПроводитьДокументы Тогда
			Попытка
				НалоговыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		Если ПечататьДокументы Тогда
			Если мНеЗаписыватьДокументы Тогда
				// придется записать
				НалоговыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			НалоговыйДокумент.Печать("НалоговаяНакладная", , ПечататьДокументыНаПринтер);
		КонецЕсли;
		
		Если ОткрыватьДокументы Тогда
			
			Если  ТипЗнч(НалоговыйДокумент) = Тип("ДокументОбъект.НалоговаяНакладная") Тогда
				НалоговыйДокумент.ОткрытиеИзОбработкиФормирования = Истина;
			КонецЕсли;	
			
			ФормаДокумента = НалоговыйДокумент.ПолучитьФорму();
			ФормаДокумента.Открыть();
			
		КонецЕсли;
		
		Если ОткрытиеИзУФ Тогда
			АдресВременногоХранилищаДокумента = ПоместитьВоВременноеХранилище(НалоговыйДокумент, УИД);
			МассивАдресов.Добавить(АдресВременногоХранилищаДокумента);
		КонецЕсли; 
		
		СписокСформированныхДокументов.Добавить(НалоговыйДокумент.Ссылка);
	КонецЦикла; 
	
	Если ОткрытиеИзУФ Тогда
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(МассивАдресов, УИД);
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ПолучитьДанныеДляФормированияНалоговыхДокументов(ТаблицаДанных, СтруктураОтбораДанных)

	Перем ТекущийДокумент;
	
	СтруктураДанных = Новый Структура();
	
	Если НЕ СтруктураОтбораДанных.Свойство("Документ", ТекущийДокумент) Тогда 
		// не указан конкретный документ
		Возврат;
	КонецЕсли;
			
	// для каждой ставки НДС создадим свой набор строк для каждой ТЧ кроме ВозвратнойТары
	СтруктураПоСтавкеНДС = Новый Структура();
	Для каждого СтавкаНДС Из Перечисления.СтавкиНДС Цикл
		СтруктураПоСтавкеНДС = Новый Структура();
		
		ТаблицаТовары 				= ОтобратьСтрокиТабличнойЧасти("Товары", СтавкаНДС, СтруктураОтбораДанных);
		ТаблицаУслуги 				= ОтобратьСтрокиТабличнойЧасти("Услуги", СтавкаНДС, СтруктураОтбораДанных);
		ТаблицаОС 					= ОтобратьСтрокиТабличнойЧасти("ОС", СтавкаНДС, СтруктураОтбораДанных);
		ТаблицаНематериальныеАктивы = ОтобратьСтрокиТабличнойЧасти("НематериальныеАктивы", СтавкаНДС, СтруктураОтбораДанных);
		
		Если НЕ ТаблицаТовары = Неопределено Тогда
			СтруктураПоСтавкеНДС.Вставить("Товары", ТаблицаТовары);
		КонецЕсли;
		Если НЕ ТаблицаУслуги = Неопределено Тогда
			СтруктураПоСтавкеНДС.Вставить("Услуги", ТаблицаУслуги);
		КонецЕсли;
		Если НЕ ТаблицаОС = Неопределено Тогда
			СтруктураПоСтавкеНДС.Вставить("ОС", ТаблицаОС);
		КонецЕсли;
		Если НЕ ТаблицаНематериальныеАктивы = Неопределено Тогда
			СтруктураПоСтавкеНДС.Вставить("НематериальныеАктивы", ТаблицаНематериальныеАктивы);
		КонецЕсли;
		
		Если НЕ СтруктураПоСтавкеНДС.Количество() = 0 Тогда
			// Имеются строки с указанной ставкой НДС
			СтруктураДанных.Вставить(ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтавкаНДС), СтруктураПоСтавкеНДС);
		КонецЕсли;
		
	КонецЦикла; 
	
	// ... ВозвратнуюТару занесем отдельно: если имеются несколько ставок - тару можно отнести к любой из них.
	ТаблицаВозвратнаяТара = ОтобратьСтрокиТабличнойЧасти("ВозвратнаяТара", , СтруктураОтбораДанных);
	Если НЕ ТаблицаВозвратнаяТара = Неопределено Тогда
		СтруктураДанных.Вставить("ВозвратнаяТара", ТаблицаВозвратнаяТара);
	КонецЕсли;
	
	Если НЕ СтруктураДанных.Количество() = 0 Тогда
		// Нужно формировать документ
		СтрокаТаблицыДанных = ТаблицаДанных.Добавить();
		СтрокаТаблицыДанных.Дата				= СтруктураОтбораДанных.Дата;
		СтрокаТаблицыДанных.ДоговорКонтрагента	= СтруктураОтбораДанных.ДоговорКонтрагента;
		СтрокаТаблицыДанных.Сделка				= СтруктураОтбораДанных.Сделка;
		СтрокаТаблицыДанных.РасчетыВозврат		= СтруктураОтбораДанных.РасчетыВозврат;
		Если ТекущийДокумент = Неопределено Тогда
			СтрокаТаблицыДанных.ВалютаДокумента  = СтруктураОтбораДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СтрокаТаблицыДанных.СуммаВключаетНДС 	= Истина;
			СтрокаТаблицыДанных.УчитыватьНДС 		= Истина;
		Иначе
			СтрокаТаблицыДанных.ВалютаДокумента 	= ТекущийДокумент.ВалютаДокумента;
			СтрокаТаблицыДанных.СуммаВключаетНДС 	= ТекущийДокумент.СуммаВключаетНДС;
			СтрокаТаблицыДанных.УчитыватьНДС 		= ТекущийДокумент.УчитыватьНДС;
		КонецЕсли;	
		СтрокаТаблицыДанных.ДокументОснование 	= ТекущийДокумент;
		СтрокаТаблицыДанных.СтруктураДанных		= СтруктураДанных;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьТабличныеЧасти() Экспорт
		
	ОтборДоговоровКонтрагентов.Очистить();
	Договора.Очистить();
	ИсточникиНоменклатуры.Очистить();
	Товары.Очистить();
	ВозвратнаяТара.Очистить();
	Услуги.Очистить();
	ОС.Очистить();
	НематериальныеАктивы.Очистить();
	
КонецПроцедуры

Функция ПолучитьДанныеЗаказаСУчетомКорректировок(ДокументСсылка, ИмяТабличнойЧасти = "Товары")
	
	// проверим были ли вообще корректировки по данной табличной части
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|   Ссылка
	|ИЗ
	|	Документ.КорректировкаЗаказаПокупателя."+ИмяТабличнойЧасти+" КАК КорректировкаЗаказаПокупателя
	|ГДЕ
	|	  КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &ТекущийДокумент
	|	И КорректировкаЗаказаПокупателя.Ссылка.Проведен        = Истина
	|";
	
	Если Запрос.Выполнить().Пустой() Тогда
		// нет корректировок - возвращаем сам документ
		Возврат ДокументСсылка;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗапросСортировки.НомерСтроки)          КАК НомерСтроки,
	|	МИНИМУМ(ЗапросСортировки.НомерТЧ)              КАК НомерТЧ,
	|	ЗапросСоставаТЧ.Номенклатура                   КАК Номенклатура,
	|	ЗапросСоставаТЧ.Содержание					   КАК Содержание,
	|	МАКСИМУМ(ЗапросСоставаТЧ.Количество)           КАК Количество,
	|	ЗапросСоставаТЧ.ЕдиницаИзмерения			   КАК ЕдиницаИзмерения,
	|	ЗапросСоставаТЧ.ЕдиницаИзмерения.Коэффициент   КАК Коэффициент,
	|	ЗапросСоставаТЧ.ПроцентСкидкиНаценки           КАК ПроцентСкидкиНаценки,
	|	ЗапросСоставаТЧ.ПроцентАвтоматическихСкидок    КАК ПроцентАвтоматическихСкидок,
	|	МАКСИМУМ(ЗапросСоставаТЧ.СуммаНДС)             КАК СуммаНДС,
	|	ЗапросСоставаТЧ.Цена                           КАК Цена,
	|	МАКСИМУМ(ЗапросСоставаТЧ.Сумма)                КАК Сумма,
	|	ЗапросСоставаТЧ.ХарактеристикаНоменклатуры     КАК ХарактеристикаНоменклатуры,
	|	ЗапросСоставаТЧ.СтавкаНДС					   КАК СтавкаНДС
	|ИЗ
	|
	|(ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Содержание					    КАК Содержание,
	|	СУММА(ВложенныйЗапрос.Количество)               КАК Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки            КАК ПроцентСкидкиНаценки,
	|	ВложенныйЗапрос.ПроцентАвтоматическихСкидок     КАК ПроцентАвтоматическихСкидок,
	|	СУММА(ВложенныйЗапрос.СуммаНДС)                 КАК СуммаНДС,
	|	ВложенныйЗапрос.Цена                            КАК Цена,
	|	СУММА(ВложенныйЗапрос.Сумма)                    КАК Сумма,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры      КАК ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.СтавкаНДС      				    КАК СтавкаНДС
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура                КАК Номенклатура,
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) = "УСЛУГИ", ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("ЗаказПокупателя", "Содержание") + ","
	,"		NULL										КАК Содержание,") + "
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) = "ТОВАРЫ","
	|		ЗаказПокупателя.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,"
	,"      ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,") + "
	
	|
	|		ЗаказПокупателя.Цена                        КАК Цена,
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) <> "ВОЗВРАТНАЯТАРА","
	|		ЗаказПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,"
	,"      0									        КАК ПроцентСкидкиНаценки,
	|       0									        КАК ПроцентАвтоматическихСкидок,") + "
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) = "ТОВАРЫ","
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,"
	,"      NULL									    КАК ХарактеристикаНоменклатуры,") + "
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) <> "ВОЗВРАТНАЯТАРА","
	|		ЗаказПокупателя.СуммаНДС        			КАК СуммаНДС,
	|		ЗаказПокупателя.СтавкаНДС       			КАК СтавкаНДС,"
	,"      0   									    КАК СуммаНДС,
	|       NULL									    КАК СтавкаНДС,") + "
	
	|		ЗаказПокупателя.Сумма                       КАК Сумма,
	|		ЗаказПокупателя.Количество                  КАК Количество
	
	|	ИЗ
	|		Документ.ЗаказПокупателя."+ИмяТабличнойЧасти+" КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		КорректировкаЗаказаПокупателя.Номенклатура                КАК Номенклатура,
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) = "УСЛУГИ",ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("КорректировкаЗаказаПокупателя", "Содержание") + ","
	,"		NULL										КАК Содержание,") + "
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) = "ТОВАРЫ","
	|		КорректировкаЗаказаПокупателя.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,"
	,"      ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,") + "
	
	|
	|		КорректировкаЗаказаПокупателя.Цена                        КАК Цена,
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) <> "ВОЗВРАТНАЯТАРА","
	|		КорректировкаЗаказаПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|		КорректировкаЗаказаПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,"
	,"      0									        КАК ПроцентСкидкиНаценки,
	|       0									        КАК ПроцентАвтоматическихСкидок,") + "
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) = "ТОВАРЫ","
	|		КорректировкаЗаказаПокупателя.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,"
	,"      NULL									    КАК ХарактеристикаНоменклатуры,") + "
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) <> "ВОЗВРАТНАЯТАРА","
	|		КорректировкаЗаказаПокупателя.СуммаНДС      КАК СуммаНДС,
	|		КорректировкаЗаказаПокупателя.СтавкаНДС     КАК СтавкаНДС,"
	,"      0   									    КАК СуммаНДС,
	|       NULL									    КАК СтавкаНДС,") + "
	
	|
	|		КорректировкаЗаказаПокупателя.Сумма          КАК Сумма,
	|		КорректировкаЗаказаПокупателя.Количество     КАК Количество
	
	|	ИЗ
	|		Документ.КорректировкаЗаказаПокупателя."+ИмяТабличнойЧасти+" КАК КорректировкаЗаказаПокупателя
	|
	|	ГДЕ
	|		КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &ТекущийДокумент
	|		И КорректировкаЗаказаПокупателя.Ссылка.Проведен      = Истина
	|) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Содержание,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки,
	|	ВложенныйЗапрос.ПроцентАвтоматическихСкидок,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.СтавкаНДС
	|) КАК ЗапросСоставаТЧ
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура                КАК Номенклатура,
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) = "УСЛУГИ",ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("ЗаказПокупателя", "Содержание") + ","
	,"		NULL										КАК Содержание,") + "
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) = "ТОВАРЫ","
	|		ЗаказПокупателя.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,"
	,"      ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,") + "
	
	|
	|		ЗаказПокупателя.Цена                        КАК Цена,
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) <> "ВОЗВРАТНАЯТАРА","
	|		ЗаказПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,"
	,"      0									        КАК ПроцентСкидкиНаценки,
	|       0									        КАК ПроцентАвтоматическихСкидок,") + "
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) = "ТОВАРЫ","
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,"
	,"      NULL									    КАК ХарактеристикаНоменклатуры,") + "
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) <> "ВОЗВРАТНАЯТАРА","
	|		ЗаказПокупателя.СтавкаНДС       			КАК СтавкаНДС,"
	,"      NULL									    КАК СтавкаНДС,") + "
	|
	|		ЗаказПокупателя.НомерСтроки                 КАК НомерСтроки,
	|		1                                           КАК НомерТЧ
	|	ИЗ
	|		Документ.ЗаказПокупателя."+ИмяТабличнойЧасти+" КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		КорректировкаЗаказаПокупателя.Номенклатура                КАК Номенклатура,
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) = "УСЛУГИ",ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("КорректировкаЗаказаПокупателя", "Содержание") + ","
	,"		NULL										КАК Содержание,") + "
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) = "ТОВАРЫ","
	|		КорректировкаЗаказаПокупателя.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,"
	,"      ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,") + "
	
	|
	|		КорректировкаЗаказаПокупателя.Цена                        КАК Цена,
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) <> "ВОЗВРАТНАЯТАРА","
	|		КорректировкаЗаказаПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|		КорректировкаЗаказаПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,"
	,"      0									        КАК ПроцентСкидкиНаценки,
	|       0									        КАК ПроцентАвтоматическихСкидок,") + "
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) = "ТОВАРЫ","
	|		КорректировкаЗаказаПокупателя.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,"
	,"      NULL									    КАК ХарактеристикаНоменклатуры,") + "
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) <> "ВОЗВРАТНАЯТАРА","
	|		КорректировкаЗаказаПокупателя.СтавкаНДС       			КАК СтавкаНДС,"
	,"      NULL									    КАК СтавкаНДС,") + "
	|
	|		ВЫБОР
	|			КОГДА Заказ.НомерСтроки ЕСТЬ NULL
	|				ТОГДА КорректировкаЗаказаПокупателя.НомерСтроки
	|			ИНАЧЕ Заказ.НомерСтроки
	|		КОНЕЦ                                                    КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА Заказ.НомерСтроки ЕСТЬ NULL
	|				ТОГДА 2
	|			ИНАЧЕ 1
	|		КОНЕЦ                                                    КАК НомерТЧ
	|	ИЗ
	|		Документ.КорректировкаЗаказаПокупателя."+ИмяТабличнойЧасти+" КАК КорректировкаЗаказаПокупателя
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК Заказ
	|			ПО КорректировкаЗаказаПокупателя.Номенклатура = Заказ.Номенклатура
	|"
	
	+?(ВРЕГ(ИмяТабличнойЧасти) = "ТОВАРЫ","
	|			И КорректировкаЗаказаПокупателя.ХарактеристикаНоменклатуры = Заказ.ХарактеристикаНоменклатуры"
	,"") + "
	
	|			И (Заказ.Ссылка = &ТекущийДокумент)
	|
	|	ГДЕ
	|		КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &ТекущийДокумент
	|		И КорректировкаЗаказаПокупателя.Ссылка.Проведен      = Истина
	|) КАК ЗапросСортировки
	|
	|ПО
	|	  ЗапросСоставаТЧ.Номенклатура                = ЗапросСортировки.Номенклатура
	|	И ЗапросСоставаТЧ.Содержание                  = ЗапросСортировки.Содержание
	|	И ЗапросСоставаТЧ.ЕдиницаИзмерения            = ЗапросСортировки.ЕдиницаИзмерения
	|	И ЗапросСоставаТЧ.ПроцентСкидкиНаценки        = ЗапросСортировки.ПроцентСкидкиНаценки
	|	И ЗапросСоставаТЧ.ПроцентАвтоматическихСкидок = ЗапросСортировки.ПроцентАвтоматическихСкидок
	|	И ЗапросСоставаТЧ.ХарактеристикаНоменклатуры  = ЗапросСортировки.ХарактеристикаНоменклатуры
	|	И ЗапросСоставаТЧ.Цена                        = ЗапросСортировки.Цена
	|	И ЗапросСоставаТЧ.СтавкаНДС                   = ЗапросСортировки.СтавкаНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапросСоставаТЧ.Номенклатура,
	|	ЗапросСоставаТЧ.Содержание,
	|	ЗапросСоставаТЧ.ЕдиницаИзмерения,
	|	ЗапросСоставаТЧ.ПроцентСкидкиНаценки,
	|	ЗапросСоставаТЧ.ПроцентАвтоматическихСкидок,
	|	ЗапросСоставаТЧ.Цена,
	|	ЗапросСоставаТЧ.СтавкаНДС,
	|	ЗапросСоставаТЧ.ХарактеристикаНоменклатуры
	|";
	ЗапросТЧ = Запрос.Выполнить().Выгрузить();
	
	// Уничтожим нумерацию строк для товаров, введенных корректировками
	Для Каждого СтрокаТаблицы Из ЗапросТЧ Цикл
		Если СтрокаТаблицы.НомерТЧ = 2 Тогда
			СтрокаТаблицы.НомерСтроки = 1;
		КонецЕсли;
	КонецЦикла;
	
	// Сгруппируем строки, чтобы не было одинаковых строк, введенных разными документами корректировки
	ЗапросТЧ.Свернуть("НомерСтроки, НомерТЧ, Номенклатура, Содержание, ЕдиницаИзмерения,  ХарактеристикаНоменклатуры, Цена, Коэффициент, СтавкаНДС, ПроцентСкидкиНаценки, ПроцентАвтоматическихСкидок", "Количество, СуммаНДС, Сумма");
	ЗапросТЧ.Сортировать("НомерТЧ, НомерСтроки, Содержание");
	
	ЗапросТЧ.Колонки.Добавить("КоличествоМест");
	ЗапросТЧ.Колонки.Добавить("ЕдиницаИзмеренияМест");
	
	Возврат Новый Структура(ИмяТабличнойЧасти,ЗапросТЧ);
	
КонецФункции

// Функция проверяет, сумма неподтвержденных налоговых обязательств с учетом аванса не превышает ли
// сумму выбранной в ИсточникахНоменклатуры номенклатуры. При отрицательном результате возвращает таблицу
// содержащую суммы частичных отгрузок в разрезе ставок  и доп. параметров (суммы превышения разносятся по ставкам и доп. параметрам пропорционально)
Функция МожноФормироватьНалоговыеНакладные(СтуктураОтбораИсточниковНоменклатуры, ТаблицаЧастичнойОтгрузки = Неопределено) Экспорт
	
	// Пока не будет установлено обратное
	Результат = Истина;
	
	мИтоговаяТаблица.Очистить();
	
	ТаблицаНеподтвержденныхОбязательств = мИтоговаяТаблица.Скопировать();
	ТаблицаИтоговПоНоменклатуре 		= мИтоговаяТаблица.Скопировать();
	ТаблицаЧастичнойОтгрузки 			= мИтоговаяТаблица.Скопировать();
	ТаблицаЧастичнойОтгрузки.Колонки.Добавить("ЧастичнаяОтгрузка", 	Новый ОписаниеТипов("Булево"));
	ТаблицаЧастичнойОтгрузки.Колонки.Добавить("ЗаСчетАванса", 	   	Новый ОписаниеТипов("Булево"));
	// комбинации признаков означают следующее: ЧастичнаяОтгрузка/ЗаСчетАванса
	// Ложь	 /Ложь	 - Номенклатура по ставке/таре/доп.параметрам переносятся в налоговый документ полностью
	// Ложь	 /Истина - Номенклатура по ставке/таре/доп.параметрам НЕ переносятся в налоговый документ 
	// Истина/Истина - Образуется частичная отгрузка на сумму пропорционально распределенного между ставками/доп.параметрам аванса
	// Истина/Ложь   - Образуется частичная отгрузка на указанную сумму
	
	// Занесем в таблицу суммы неподтвержденных налоговых обязательств по каждой ставке и определим сумму
	// аванса, не подтвержденного налоговыми документами: ее можно будет закрыть по произвольной ставке.
	СуммаАванса = 0;
	СуммаАвансаТара = 0;
	СтруктураОбораДоговоров = Новый Структура();
	СтруктураОбораДоговоров.Вставить("Дата", СтуктураОтбораИсточниковНоменклатуры.Дата);	
	СтруктураОбораДоговоров.Вставить("ДоговорКонтрагента", СтуктураОтбораИсточниковНоменклатуры.ДоговорКонтрагента);	
	СтруктураОбораДоговоров.Вставить("Сделка", СтуктураОтбораИсточниковНоменклатуры.Сделка);	
	СтруктураОбораДоговоров.Вставить("РасчетыВозврат", СтуктураОтбораИсточниковНоменклатуры.РасчетыВозврат);	
	ДанныеДоговоров = Договора.НайтиСтроки(СтруктураОбораДоговоров);
	Для каждого СтрокаДоговоров Из ДанныеДоговоров Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДоговоров.СтавкаНДС) Тогда
			
			Если СтрокаДоговоров.ЗаТару Тогда
				СуммаАвансаТара = СуммаАвансаТара + СтрокаДоговоров.Сумма;
			Иначе
				СуммаАванса = СуммаАванса + СтрокаДоговоров.Сумма;
			КонецЕсли;
			
		Иначе
			
			СтрокаИтоговойТаблицы = ТаблицаНеподтвержденныхОбязательств.Добавить();
			Для каждого ДопПараметр Из ДопПараметры Цикл
				СтрокаИтоговойТаблицы[ДопПараметр.Ключ] = СтрокаДоговоров[ДопПараметр.Ключ];	
			КонецЦикла;
			СтрокаИтоговойТаблицы.СтавкаНДС 		= СтрокаДоговоров.СтавкаНДС;
			СтрокаИтоговойТаблицы.ЗаТару 			= СтрокаДоговоров.ЗаТару;
			СтрокаИтоговойТаблицы.СуммаВДокумент	= СтрокаДоговоров.Сумма;
			СтрокаИтоговойТаблицы.СуммаНДСВДокумент	= СтрокаДоговоров.СуммаНДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КолонкиГруппировок = "СтавкаНДС,ЗаТару";
	Для каждого ДопПараметр Из ДопПараметры Цикл
		КолонкиГруппировок = КолонкиГруппировок +"," + ДопПараметр.Ключ;
	КонецЦикла;
	ТаблицаНеподтвержденныхОбязательств.Свернуть(КолонкиГруппировок, "СуммаВДокумент, СуммаНДСВДокумент");
		
	// Определим суммы по номенклатуре
	ДанныеИсточниковНоменклатуры = ИсточникиНоменклатуры.НайтиСтроки(СтуктураОтбораИсточниковНоменклатуры);
	Для каждого СтрокаИсточниковНоменклатуры Из ДанныеИсточниковНоменклатуры Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаИсточниковНоменклатуры.СтавкаНДС) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИтоговойТаблицы = ТаблицаИтоговПоНоменклатуре.Добавить();
		Для каждого ДопПараметр Из ДопПараметры Цикл
			СтрокаИтоговойТаблицы[ДопПараметр.Ключ] = СтрокаИсточниковНоменклатуры[ДопПараметр.Ключ];	
		КонецЦикла;
		СтрокаИтоговойТаблицы.СтавкаНДС 		= СтрокаИсточниковНоменклатуры.СтавкаНДС;
		СтрокаИтоговойТаблицы.ЗаТару 			= СтрокаИсточниковНоменклатуры.ЗаТару;
		СтрокаИтоговойТаблицы.СуммаВДокумент	= СтрокаИсточниковНоменклатуры.Сумма;
		СтрокаИтоговойТаблицы.СуммаНДСВДокумент	= СтрокаИсточниковНоменклатуры.СуммаНДС;
		
	КонецЦикла; 
	КолонкиГруппировок = "СтавкаНДС,ЗаТару";
	Для каждого ДопПараметр Из ДопПараметры Цикл
		КолонкиГруппировок = КолонкиГруппировок +"," + ДопПараметр.Ключ;
	КонецЦикла;
	ТаблицаИтоговПоНоменклатуре.Свернуть(КолонкиГруппировок, "СуммаВДокумент, СуммаНДСВДокумент");
	
	ОстатокАванса = СуммаАванса;
	ОстатокАвансаТара = СуммаАвансаТара;
	// пройдемся по таблице итогов по номенклатуре и определим имеются ли частичные отгрузки
	СтруктураОтбора = новый Структура();
	Для каждого СтрокаПоНоменклатуре Из ТаблицаИтоговПоНоменклатуре Цикл
		
		СтруктураОтбора.Вставить("СтавкаНДС", СтрокаПоНоменклатуре.СтавкаНДС);
		СтруктураОтбора.Вставить("ЗаТару", 	  СтрокаПоНоменклатуре.ЗаТару);
		Для каждого ДопПараметр Из ДопПараметры Цикл
			СтруктураОтбора.Вставить(ДопПараметр.Ключ, СтрокаПоНоменклатуре[ДопПараметр.Ключ]);	
		КонецЦикла;

		СтрокиНеподтвержденныхОбязательств = ТаблицаНеподтвержденныхОбязательств.НайтиСтроки(СтруктураОтбора);
		Если СтрокиНеподтвержденныхОбязательств.Количество() = 0 Тогда
			// может попасть в НН за счет аванса
			СтрокаЧастичнойОтгрузки = ТаблицаЧастичнойОтгрузки.Добавить();
			Для каждого ДопПараметр Из ДопПараметры Цикл
				СтрокаЧастичнойОтгрузки[ДопПараметр.Ключ] = СтруктураОтбора[ДопПараметр.Ключ];	
			КонецЦикла;
			СтрокаЧастичнойОтгрузки.СтавкаНДС 			= СтруктураОтбора.СтавкаНДС;
			СтрокаЧастичнойОтгрузки.ЗаТару 				= СтруктураОтбора.ЗаТару;
			СтрокаЧастичнойОтгрузки.СуммаВДокумент 		= СтрокаПоНоменклатуре.СуммаВДокумент;
			СтрокаЧастичнойОтгрузки.СуммаНДСВДокумент 	= СтрокаПоНоменклатуре.СуммаНДСВДокумент;
			СтрокаЧастичнойОтгрузки.ЧастичнаяОтгрузка   = Истина;
			СтрокаЧастичнойОтгрузки.ЗаСчетАванса		= Истина;
			
			Если СтруктураОтбора.ЗаТару Тогда
				ОстатокАвансаТара = ОстатокАвансаТара - СтрокаПоНоменклатуре.СуммаВДокумент;
			Иначе
				ОстатокАванса = ОстатокАванса - СтрокаПоНоменклатуре.СуммаВДокумент;
			КонецЕсли;

		Иначе
			// строка - единственная
			СтрокаНеподтвержденныхОбязательств = СтрокиНеподтвержденныхОбязательств[0];
			Если СтрокаНеподтвержденныхОбязательств.СуммаВДокумент > СтрокаПоНоменклатуре.СуммаВДокумент Тогда
				// эти данные должны попасть в налоговые документы полностью
				СтрокаЧастичнойОтгрузки = ТаблицаЧастичнойОтгрузки.Добавить();
				Для каждого ДопПараметр Из ДопПараметры Цикл
					СтрокаЧастичнойОтгрузки[ДопПараметр.Ключ] = СтруктураОтбора[ДопПараметр.Ключ];	
				КонецЦикла;
				СтрокаЧастичнойОтгрузки.СтавкаНДС 			= СтруктураОтбора.СтавкаНДС;
				СтрокаЧастичнойОтгрузки.ЗаТару 				= СтруктураОтбора.ЗаТару;
				СтрокаЧастичнойОтгрузки.СуммаВДокумент 		= СтрокаПоНоменклатуре.СуммаВДокумент;
				СтрокаЧастичнойОтгрузки.СуммаНДСВДокумент 	= СтрокаПоНоменклатуре.СуммаНДСВДокумент;
				СтрокаЧастичнойОтгрузки.ЧастичнаяОтгрузка   = Ложь;
				СтрокаЧастичнойОтгрузки.ЗаСчетАванса		= Ложь;				
				
			ИначеЕсли СтрокаНеподтвержденныхОбязательств.СуммаВДокумент < СтрокаПоНоменклатуре.СуммаВДокумент Тогда
				// на сумму неподтвержденных обязательств возникает частичная отгрузка, остальное может попасть
				// в налоговый документ за счет аванса
				СтрокаЧастичнойОтгрузки = ТаблицаЧастичнойОтгрузки.Добавить();
				Для каждого ДопПараметр Из ДопПараметры Цикл
					СтрокаЧастичнойОтгрузки[ДопПараметр.Ключ] = СтруктураОтбора[ДопПараметр.Ключ];	
				КонецЦикла;
				СтрокаЧастичнойОтгрузки.СтавкаНДС 			= СтруктураОтбора.СтавкаНДС;
				СтрокаЧастичнойОтгрузки.ЗаТару 				= СтруктураОтбора.ЗаТару;
				СтрокаЧастичнойОтгрузки.СуммаВДокумент 		= СтрокаНеподтвержденныхОбязательств.СуммаВДокумент;
				СтрокаЧастичнойОтгрузки.СуммаНДСВДокумент 	= СтрокаНеподтвержденныхОбязательств.СуммаНДСВДокумент;
				СтрокаЧастичнойОтгрузки.ЧастичнаяОтгрузка   = Истина;
				СтрокаЧастичнойОтгрузки.ЗаСчетАванса		= Ложь;
					
				СтрокаЧастичнойОтгрузки = ТаблицаЧастичнойОтгрузки.Добавить();
				Для каждого ДопПараметр Из ДопПараметры Цикл
					СтрокаЧастичнойОтгрузки[ДопПараметр.Ключ] = СтруктураОтбора[ДопПараметр.Ключ];	
				КонецЦикла;				
				СтрокаЧастичнойОтгрузки.СтавкаНДС 			= СтруктураОтбора.СтавкаНДС;
				СтрокаЧастичнойОтгрузки.ЗаТару 				= СтруктураОтбора.ЗаТару;
				СтрокаЧастичнойОтгрузки.СуммаВДокумент 		= СтрокаПоНоменклатуре.СуммаВДокумент - СтрокаНеподтвержденныхОбязательств.СуммаВДокумент;
				СтрокаЧастичнойОтгрузки.СуммаНДСВДокумент 	= СтрокаПоНоменклатуре.СуммаНДСВДокумент - СтрокаНеподтвержденныхОбязательств.СуммаНДСВДокумент;
				СтрокаЧастичнойОтгрузки.ЧастичнаяОтгрузка   = Истина;
				СтрокаЧастичнойОтгрузки.ЗаСчетАванса		= Истина;
				Если СтруктураОтбора.ЗаТару Тогда
					ОстатокАвансаТара = ОстатокАвансаТара - (СтрокаПоНоменклатуре.СуммаВДокумент - СтрокаНеподтвержденныхОбязательств.СуммаВДокумент);
				Иначе
					ОстатокАванса = ОстатокАванса - (СтрокаПоНоменклатуре.СуммаВДокумент - СтрокаНеподтвержденныхОбязательств.СуммаВДокумент);
				КонецЕсли;
				
			ИначеЕсли НЕ СтрокаНеподтвержденныхОбязательств.СуммаНДСВДокумент = СтрокаПоНоменклатуре.СуммаНДСВДокумент Тогда
				// ситуация с зависшими копейками по НДС (может возникнуть при частичных оплатах/отгрузках
				Результат = Ложь;
				
				СтрокаЧастичнойОтгрузки = ТаблицаЧастичнойОтгрузки.Добавить();
				Для каждого ДопПараметр Из ДопПараметры Цикл
					СтрокаЧастичнойОтгрузки[ДопПараметр.Ключ] = СтруктураОтбора[ДопПараметр.Ключ];	
				КонецЦикла;
				СтрокаЧастичнойОтгрузки.СтавкаНДС 			= СтруктураОтбора.СтавкаНДС;
				СтрокаЧастичнойОтгрузки.ЗаТару 				= СтруктураОтбора.ЗаТару;
				СтрокаЧастичнойОтгрузки.СуммаВДокумент 		= СтрокаНеподтвержденныхОбязательств.СуммаВДокумент;
				СтрокаЧастичнойОтгрузки.СуммаНДСВДокумент 	= СтрокаНеподтвержденныхОбязательств.СуммаНДСВДокумент;
				СтрокаЧастичнойОтгрузки.ЧастичнаяОтгрузка	= Истина;
				СтрокаЧастичнойОтгрузки.ЗаСчетАванса   		= Ложь;
			Иначе
			    // эти данные должны попасть в налоговые документы полностью
				СтрокаЧастичнойОтгрузки = ТаблицаЧастичнойОтгрузки.Добавить();
				Для каждого ДопПараметр Из ДопПараметры Цикл
					СтрокаЧастичнойОтгрузки[ДопПараметр.Ключ] = СтруктураОтбора[ДопПараметр.Ключ];	
				КонецЦикла;				
				СтрокаЧастичнойОтгрузки.СтавкаНДС 			= СтруктураОтбора.СтавкаНДС;
				СтрокаЧастичнойОтгрузки.ЗаТару 				= СтруктураОтбора.ЗаТару;
				СтрокаЧастичнойОтгрузки.СуммаВДокумент 		= СтрокаПоНоменклатуре.СуммаВДокумент;
				СтрокаЧастичнойОтгрузки.СуммаНДСВДокумент 	= СтрокаПоНоменклатуре.СуммаНДСВДокумент;
				СтрокаЧастичнойОтгрузки.ЧастичнаяОтгрузка   = Ложь;
				СтрокаЧастичнойОтгрузки.ЗаСчетАванса		= Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//удалим строки с нулевыми суммами:
	НульСтроки = ТаблицаЧастичнойОтгрузки.НайтиСтроки(Новый Структура("СуммаВДокумент",0));
	Для каждого НульСтрока Из НульСтроки Цикл
		ТаблицаЧастичнойОтгрузки.удалить(НульСтрока);
	КонецЦикла; 
	
	Если ОстатокАванса < 0 ИЛИ ОстатокАвансаТара < 0 ИЛИ (ТаблицаЧастичнойОтгрузки.Количество() = 0 И ТаблицаИтоговПоНоменклатуре.Количество() > 0) Тогда
		Результат = Ложь;
	Иначе
		// суммы неподтвержденного аванса достаточно для того, чтобы по данным номенклатурного состава документа сформировать налогвые документы по определенным ставкам/доп. параметрам
	КонецЕсли;
		
	Если Результат = Ложь Тогда
		// попытаемся распределить авансы
		СтрокиТары 	 = ТаблицаЧастичнойОтгрузки.НайтиСтроки(Новый Структура("ЧастичнаяОтгрузка, ЗаСчетАванса, ЗаТару", Истина, Истина, Истина));
		СтрокиТоваров= ТаблицаЧастичнойОтгрузки.НайтиСтроки(Новый Структура("ЧастичнаяОтгрузка, ЗаСчетАванса, ЗаТару", Истина, Истина, Ложь));
		
		// За Товары
		Если СуммаАванса = 0 Тогда
			// аванса и не было
			Для каждого Строка Из СтрокиТоваров Цикл
				// Установим признак, означающий, что строки товаров по данной ставке не попадут в налоговую накладную.
				Строка.ЧастичнаяОтгрузка	= Ложь;
			КонецЦикла; 
		Иначе
			СуммаОтгрузокВсего = 0;
			Для каждого Строка Из СтрокиТоваров Цикл
				СуммаОтгрузокВсего = СуммаОтгрузокВсего + Строка.СуммаВДокумент;
			КонецЦикла;
			
			КоэффЧастичнойОтгрузки = ?(СуммаОтгрузокВсего = 0, 0, СуммаАванса / СуммаОтгрузокВсего);
			Если КоэффЧастичнойОтгрузки < 1 Тогда
				ПоследняяСтрока = Неопределено;
				ЗачтеноАванса 	= 0;
				Для каждого Строка Из СтрокиТоваров Цикл
					
					Строка.СуммаВДокумент  = Строка.СуммаВДокумент * КоэффЧастичнойОтгрузки;
					// пропорционально определим НДС (НДС в т. ч. - как в регистре НДС Продаж)
					Строка.СуммаНДСВДокумент =  Ценообразование.РассчитатьСуммуНДС(Строка.СуммаВДокумент, Истина, Истина, Ценообразование.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
					
					ЗачтеноАванса 	= ЗачтеноАванса + Строка.СуммаВДокумент;
					ПоследняяСтрока = Строка;
				КонецЦикла;
				Если Не ПоследняяСтрока = Неопределено Тогда
					// ошибки округления отнесем на последнюю строку:
					ПоследняяСтрока.СуммаВДокумент = ПоследняяСтрока.СуммаВДокумент + СуммаАванса - ЗачтеноАванса;
					ПоследняяСтрока.СуммаНДСВДокумент =  Ценообразование.РассчитатьСуммуНДС(ПоследняяСтрока.СуммаВДокумент, Истина, Истина, Ценообразование.ПолучитьСтавкуНДС(ПоследняяСтрока.СтавкаНДС))
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;	
		
		// За Тару
		Если СуммаАвансаТара = 0 Тогда
			Для каждого Строка Из СтрокиТары Цикл
				Строка.ЧастичнаяОтгрузка	= Ложь;
			КонецЦикла; 
		Иначе
			СуммаОтгрузокВсего = 0;
			Для каждого Строка Из СтрокиТары Цикл
				СуммаОтгрузокВсего = СуммаОтгрузокВсего + Строка.СуммаВДокумент;
			КонецЦикла;
			
			КоэффЧастичнойОтгрузки = ?(СуммаОтгрузокВсего = 0, 0, СуммаАвансаТара / СуммаОтгрузокВсего);
			Если КоэффЧастичнойОтгрузки < 1 Тогда
				ПоследняяСтрока = Неопределено;
				ЗачтеноАванса 	= 0;
				Для каждого Строка Из СтрокиТары Цикл
					Строка.СуммаВДокумент  = Строка.СуммаВДокумент * КоэффЧастичнойОтгрузки;
					
					ЗачтеноАванса 	= ЗачтеноАванса + Строка.СуммаВДокумент;
					ПоследняяСтрока = Строка;
				КонецЦикла;
				Если Не ПоследняяСтрока = Неопределено Тогда
					// ошибки округления отнесем на последнюю строку:
					ПоследняяСтрока.СуммаВДокумент = ПоследняяСтрока.СуммаВДокумент + СуммаАвансаТара - ЗачтеноАванса;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция БудутСформированыНалоговыеНакладные(ТаблицаЧастичнойОтгрузки) Экспорт
	ТаблицаКопия = ТаблицаЧастичнойОтгрузки.Скопировать();
	
	ТаблицаКопия.Свернуть("ЧастичнаяОтгрузка, ЗаСчетАванса");
	
	Результат = Ложь;
	Для каждого Строка Из ТаблицаКопия Цикл
		
		Если  Строка.ЧастичнаяОтгрузка = Ложь
			И Строка.ЗаСчетАванса	   = Истина Тогда
			Продолжить;
		Иначе
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Результат;
КонецФункции

Процедура ПодготовитьНоменклатурныйСоставПриЧастичнойОтгрузке(СтуктураОтбораНоменклатуры, ТаблицаЧастичнойОтгрузки) Экспорт
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("Дата", 			СтуктураОтбораНоменклатуры.Документ.Дата);
	ДанныеДокумента.Вставить("СуммаВключаетНДС",СтуктураОтбораНоменклатуры.Документ.СуммаВключаетНДС);
	ДанныеДокумента.Вставить("ВалютаДокумента", СтуктураОтбораНоменклатуры.Документ.ВалютаДокумента);
	ДанныеВалютыДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДанныеДокумента.ВалютаДокумента, ДанныеДокумента.Дата); 
	ДанныеДокумента.Вставить("КурсВалютыДокумента", 	ДанныеВалютыДокумента.Курс);
	ДанныеДокумента.Вставить("КратностьВалютыДокумента", 	ДанныеВалютыДокумента.Кратность);

	СтруктураОтбораСтрокНоменклатуры = Новый Структура();
    СтруктураОтбораСтрокНоменклатуры.Вставить("Дата", 				СтуктураОтбораНоменклатуры.Дата);
	СтруктураОтбораСтрокНоменклатуры.Вставить("Документ", 			СтуктураОтбораНоменклатуры.Документ);
	СтруктураОтбораСтрокНоменклатуры.Вставить("ДоговорКонтрагента", СтуктураОтбораНоменклатуры.ДоговорКонтрагента);
	СтруктураОтбораСтрокНоменклатуры.Вставить("Сделка", 			СтуктураОтбораНоменклатуры.Сделка);
	СтруктураОтбораСтрокНоменклатуры.Вставить("РасчетыВозврат", 	СтуктураОтбораНоменклатуры.РасчетыВозврат);
	
	// сначала удалим строки номенклатуры, которые или не перенесутся или перенесутся частично
	Для каждого СтрокаТаблицыЧастичнойОтгрузки Из ТаблицаЧастичнойОтгрузки Цикл
		
		Для каждого ДопПараметр Из ДопПараметры Цикл
			СтруктураОтбораСтрокНоменклатуры.Вставить(ДопПараметр.Ключ, СтрокаТаблицыЧастичнойОтгрузки[ДопПараметр.Ключ])	
		КонецЦикла;
		
		Если СтрокаТаблицыЧастичнойОтгрузки.ЗаТару Тогда
			
			Если  (СтрокаТаблицыЧастичнойОтгрузки.ЧастичнаяОтгрузка  = Ложь 
				И СтрокаТаблицыЧастичнойОтгрузки.ЗаСчетАванса	     = Истина)
				ИЛИ СтрокаТаблицыЧастичнойОтгрузки.ЧастичнаяОтгрузка = Истина Тогда
				// признак того, что строки номенклатуры не переносятся либо заменяются строкой "Частичная отгрузка"
				
				СтрокиТары = ВозвратнаяТара.НайтиСтроки(СтруктураОтбораСтрокНоменклатуры);
				Для каждого СтрокаТары Из СтрокиТары Цикл
					ВозвратнаяТара.Удалить(СтрокаТары);
				КонецЦикла; 
				
			КонецЕсли;
			
		Иначе
			
			СтруктураОтбораСтрокНоменклатуры.Вставить("СтавкаНДС", СтрокаТаблицыЧастичнойОтгрузки.СтавкаНДС);

			Если  (СтрокаТаблицыЧастичнойОтгрузки.ЧастичнаяОтгрузка  = Ложь 
				И СтрокаТаблицыЧастичнойОтгрузки.ЗаСчетАванса  		 = Истина) 
				ИЛИ СтрокаТаблицыЧастичнойОтгрузки.ЧастичнаяОтгрузка = Истина Тогда
				
				// строки номенклатуры или не переносятся вообще, либо заменяются строкой "Частичная отгрузка" в ТЧ Товары
				Строки = Товары.НайтиСтроки(СтруктураОтбораСтрокНоменклатуры);
				Для каждого Строка Из Строки Цикл
					Товары.Удалить(Строка);
				КонецЦикла; 
				
				Строки = Услуги.НайтиСтроки(СтруктураОтбораСтрокНоменклатуры);
				Для каждого Строка Из Строки Цикл
					Услуги.Удалить(Строка);
				КонецЦикла; 
				
				Строки = ОС.НайтиСтроки(СтруктураОтбораСтрокНоменклатуры);
				Для каждого Строка Из Строки Цикл
					ОС.Удалить(Строка);
				КонецЦикла; 
				
				Строки = НематериальныеАктивы.НайтиСтроки(СтруктураОтбораСтрокНоменклатуры);
				Для каждого Строка Из Строки Цикл
					НематериальныеАктивы.Удалить(Строка);
				КонецЦикла; 
				
			КонецЕсли;
						
		КонецЕсли;
	
	КонецЦикла; 
	
	// Теперь добавим строки "Частичная отгрузка"
	Для каждого СтрокаТаблицыЧастичнойОтгрузки Из ТаблицаЧастичнойОтгрузки Цикл
		
		Если СтрокаТаблицыЧастичнойОтгрузки.ЗаТару Тогда
			
			Если  СтрокаТаблицыЧастичнойОтгрузки.ЧастичнаяОтгрузка = Истина Тогда 
				
				СтрокаТары = ВозвратнаяТара.Добавить();
				СтрокаТары.Дата				 	= СтруктураОтбораСтрокНоменклатуры.Дата;
				СтрокаТары.ДоговорКонтрагента 	= СтруктураОтбораСтрокНоменклатуры.ДоговорКонтрагента;
				СтрокаТары.Сделка 				= СтруктураОтбораСтрокНоменклатуры.Сделка;
				СтрокаТары.РасчетыВозврат		= СтруктураОтбораСтрокНоменклатуры.РасчетыВозврат;
				СтрокаТары.Документ 			= СтруктураОтбораСтрокНоменклатуры.Документ;
				Для каждого ДопПараметр Из ДопПараметры Цикл
					СтрокаТары[ДопПараметр.Ключ] = СтрокаТаблицыЧастичнойОтгрузки[ДопПараметр.Ключ];	
				КонецЦикла;
				
				СтрокаТары.Номенклатура			= Справочники.Номенклатура.ПустаяСсылка();
				СтрокаТары.КоличествоВДокумент 	= 1;
				СтрокаТары.СуммаВДокумент = СтрокаТаблицыЧастичнойОтгрузки.СуммаВДокумент;
				
			КонецЕсли;
			
		Иначе
			
			Если  СтрокаТаблицыЧастичнойОтгрузки.ЧастичнаяОтгрузка = Истина Тогда 
				
				// Добавим строку в ТЧ "Товары" номенклатурой "по-умолчанию" для заполнения налоговых накладных
				СтрокаТовары = Товары.Добавить();
				СтрокаТовары.Дата				= СтруктураОтбораСтрокНоменклатуры.Дата;
				СтрокаТовары.ДоговорКонтрагента = СтруктураОтбораСтрокНоменклатуры.ДоговорКонтрагента;
				СтрокаТовары.Сделка				= СтруктураОтбораСтрокНоменклатуры.Сделка;
				СтрокаТовары.РасчетыВозврат		= СтруктураОтбораСтрокНоменклатуры.РасчетыВозврат;
				СтрокаТовары.Документ 			= СтруктураОтбораСтрокНоменклатуры.Документ;
				Для каждого ДопПараметр Из ДопПараметры Цикл
					СтрокаТовары[ДопПараметр.Ключ] = СтрокаТаблицыЧастичнойОтгрузки[ДопПараметр.Ключ];	
				КонецЦикла;
				СтрокаТовары.Номенклатура 		= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "НоменклатураДляЗаполненияНалоговыхНакладных");;
				СтрокаТовары.КоличествоВДокумент= 1;
				СтрокаТовары.ЕдиницаИзмерения 	= СтрокаТовары.Номенклатура.ЕдиницаХраненияОстатков;
				СтрокаТовары.Коэффициент	 	= СтрокаТовары.ЕдиницаИзмерения.Коэффициент;
				СтрокаТовары.СтавкаНДС 			= СтрокаТаблицыЧастичнойОтгрузки.СтавкаНДС;
				
				// Сумма в таблице частичной отгрузки в гривнах и включает НДС. Нужно пересчитать суммы
				СуммаВДокумент = ?(ДанныеДокумента.СуммаВключаетНДС,
								   СтрокаТаблицыЧастичнойОтгрузки.СуммаВДокумент, 
								   СтрокаТаблицыЧастичнойОтгрузки.СуммаВДокумент - СтрокаТаблицыЧастичнойОтгрузки.СуммаНДСВДокумент);
								   
				ВалютаВзаиморасчетовНУ  = СтруктураОтбораСтрокНоменклатуры.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				ДанныеВалютыВзаимНУ = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовНУ, ДанныеДокумента.Дата); 
								   
				Если ДанныеДокумента.ВалютаДокумента = ВалютаВзаиморасчетовНУ Тогда
					СтрокаТовары.Цена 				= СуммаВДокумент;
					СтрокаТовары.СуммаВДокумент	 	= СуммаВДокумент;
					СтрокаТовары.СуммаНДСВДокумент 	= СтрокаТаблицыЧастичнойОтгрузки.СуммаНДСВДокумент;
				Иначе
					СтрокаТовары.СуммаВДокумент = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВДокумент,
														  ВалютаВзаиморасчетовНУ, 	ДанныеДокумента.ВалютаДокумента,
														  ДанныеВалютыВзаимНУ.Курс, 		ДанныеДокумента.КурсВалютыДокумента,
														  ДанныеВалютыВзаимНУ.Кратность, 	ДанныеДокумента.КратностьВалютыДокумента);
														  
					СтрокаТовары.Цена = СтрокаТовары.СуммаВДокумент;
														  
					СтрокаТовары.СуммаНДСВДокумент = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицыЧастичнойОтгрузки.СуммаНДСВДокумент,
														  ВалютаВзаиморасчетовНУ, 	ДанныеДокумента.ВалютаДокумента,
														  ДанныеВалютыВзаимНУ.Курс, 		ДанныеДокумента.КурсВалютыДокумента,
														  ДанныеВалютыВзаимНУ.Кратность, 	ДанныеДокумента.КратностьВалютыДокумента);
																		  
														  
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

ДопустимыеТипыДокументов = Новый Массив;
ДопустимыеТипыДокументов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));	
ДопустимыеТипыДокументов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));	
ДопустимыеТипыДокументов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));	
ДопустимыеТипыДокументов.Добавить(Тип("ДокументСсылка.НалоговаяНакладная"));	
ДопустимыеТипыДокументов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));	
ДопустимыеТипыДокументов.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));	
ДопустимыеТипыДокументов.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
ДопустимыеТипыДокументов.Добавить(Тип("ДокументСсылка.РеализацияУслугПоПереработке"));
ДопустимыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПередачаОС"));
ДопустимыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПередачаНМА"));
	
// ВНД, СчетНДС 
ДопПараметры = Новый Структура;
ДопПараметры.Вставить("НалоговоеНазначение", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
ПреставленияДопПараметров = Новый Структура;
ПреставленияДопПараметров.Вставить("НалоговоеНазначение", "Нал. назначение");

мИтоговаяТаблица = Новый ТаблицаЗначений();
Для каждого ДопПараметр Из ДопПараметры Цикл
	мИтоговаяТаблица.Колонки.Добавить(ДопПараметр.Ключ, ДопПараметр.Значение);	
КонецЦикла;
мИтоговаяТаблица.Колонки.Добавить("СтавкаНДС", 		Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
мИтоговаяТаблица.Колонки.Добавить("ЗаТару", 		Новый ОписаниеТипов("Булево"));
мИтоговаяТаблица.Колонки.Добавить("СуммаВДокумент", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
мИтоговаяТаблица.Колонки.Добавить("СуммаНДСВДокумент", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

СписокСформированныхДокументов = Новый СписокЗначений;

// кроме ввода НН на основании первичных документов, все сформированные НН записываются.
мНеЗаписыватьДокументы  = Ложь;

ЗаказВТЧ = Константы.УказаниеЗаказовВТабличнойЧастиДокументов.Получить();
мОтбиратьНоменклатуруПоЗаказам = (    ЗаказВТЧ = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации 
					     		 ИЛИ ЗаказВТЧ = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации);