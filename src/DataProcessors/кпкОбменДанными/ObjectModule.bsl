// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем КПКОбъект 		Экспорт; // Переменная, в которой содержится объект подключаемой компоненты
Перем ИмяФайла     		Экспорт; // Полное имя формируемого файла выгрузки данных
Перем ПочтовыйЯщик      Экспорт; // Почтовый ящик агента
Перем ПрефиксАгента     Экспорт; // Префикс агента
Перем ТипыКонтактнойИнформации;  // Список типов контактной информации, используемых при обмене данными

Перем списСоотвВидовДок Экспорт; // Список соответствий видов документов Агент+ и ЦБД (тип - "СписокЗначений")   

Перем ТаблицаЛогов 	    Экспорт; // Таблица, в которую записываются логи обмена

Перем Т_; 						 // Параметр табуляции, для сокращения
Перем КПК;						 // Мобильное устройство агента
Перем Текст;                	 //
Перем ПланПосещений;        	 // Текущимй план посещений агента
Перем ТДопКлиенты;          	 // Таблица дополнительно выгружаемых клиентов
Перем сзДопТовары;          	 // Список дополнительно выгружаемых товаров
Перем сзКлиентыАгента;      	 // Список клиентов агента
Перем сзТоргТочкиАгента;    	 // Список торговых точек агента
Перем ТаблицаДоговоровАгента; 	 // Таблица выгружаемых договоров агента
Перем сзКонтактныеЛица;          // Список контактных лиц
Перем ОснФирма;                  // Основная фирма агента
Перем КассыАгента;               // Табица касс агента
Перем ОснКассаККМ;               // Касса ККМ агента
Перем ОснСклад;                  // Основной склад агента
Перем АвтоСклад;                 // Передвижной склад агента
Перем ВидОплатыПоУмолчанию;      // Вид оплаты, используемый в документах по умолчанию
Перем флАвтоИсторияПродаж;       // Признак автоматической выгрузки истории продаж
Перем тзОписаниеКартинок;        // Таблица, хранящая описание картинок товаров
Перем ТаблицаБазДанныхАгента;	 // Список баз данных используемых агентом
Перем ИспТочек;                  // Признак использования торговых точек
Перем ИспЕдИзм;                  // Признак использования единиц измерения в ТЧ документов в МУ 
								 // Если Ложь, то при загрузке документов кол-во товара будет пересчитываться
								 // в базовые единицы.
Перем сзАссортимент;             // Выгружаемый ассортимент для агента
Перем сзСклады;                  // Список выгружаемых складов агента
Перем ПарольЗИП;                 // Пароль агента
Перем ОтветитьНаЗапрос;          // Признак того, что нужно ответить на запрос, посланный агентом из МУ
Перем КоличествоПопыток;   	     // Количество попыток для проведения операции создания или записи объекта
Перем ПаузаМеждуПопытками; 		 // Пауза в секундах между попытками    

Перем мДоступныеУчетныеЗаписи;   // Доступные учетные записи электронной почты для текущего пользователя
Перем тзКатегорииЦен;            // Таблица выгружаемых типов цен для агента
Перем ТекПользователь;           // Текущий пользователь
Перем СоответствиеСпрЗагр;       // Соответствие загружаемых справочников
Перем СоответствиеДокЗагр;       // Соответствие загружаемых документов
Перем СписокОрдеровДляЗаписи;    // Список кассовых ордеров, которые в дальнейшем стоит обработать
Перем СписокПоступленийДляЗаписи; // Список ПоступлениеТоваровУслуг и ВозвратТоваровОтПокупателя, которые в дальнейшем стоит обработать
Перем КолФотоМТ;

Перем мВалютаРегламентированногоУчета; // Валюта регламентированного учета

//Идентификаторы тега Ref_System, константы
Перем GUID_SYSTEM_AGENTNAME;
Перем GUID_SYSTEM_AGENTID;
Перем GUID_SYSTEM_FIRMID;
Перем GUID_SYSTEM_MSTOREID;
Перем GUID_SYSTEM_SHDATEBG;
Перем GUID_SYSTEM_SHDATEND;
Перем GUID_SYSTEM_TIMEUNLD;
Перем GUID_SYSTEM_DISCOUNTS;
Перем GUID_SYSTEM_AMNTPRECISION;
Перем GUID_SYSTEM_MONEYNAME;
Перем GUID_SYSTEM_FLAGS;
Перем GUID_SYSTEM_PRICECOUNT;
Перем GUID_SYSTEM_VATRATE;
Перем GUID_SYSTEM_GOODS_PICT_PATH;
Перем GUID_SYSTEM_USE_UNITS;
Перем GUID_SYSTEM_PHOTOS_PATH;
Перем GUID_SYSTEM_GPS_TRACK; 
Перем GUID_SYSTEM_WEIGHT_UNIT; 
Перем GUID_SYSTEM_DSCNTRECISION;
Перем GUID_SYSTEM_SERTIFLIST;
Перем GUID_SYSTEM_DSALES_MINSUM;
Перем GUID_SYSTEM_DSALES_MINAMT;
Перем GUID_SYSTEM_DSUMLIMIT;
Перем GUID_SYSTEM_DOCMERCHSEL;  
Перем GUID_SYSTEM_DOCFLAGS;
Перем GUID_SYSTEM_PRICEFLAGS;
Перем GUID_SYSTEM_PRLFLAGS;
Перем GUID_SYSTEM_SAVESCRIPT;
Перем GUID_SYSTEM_UDATA_PATH;
Перем GUID_SYSTEM_SELROUTESONLY;
Перем GUID_SYSTEM_ROUTEDAYS_BACK;
Перем GUID_SYSTEM_ROUTEDAYS_FWD;
Перем GUID_SYSTEM_DIVPERIOD;
Перем GUID_SYSTEM_MSG_PATH;
Перем GUID_SYSTEM_GPSTRACK;
Перем GUID_SYSTEM_UNITSCOUNT;
Перем GUID_SYSTEM_ROUTE_FLAGS;
Перем GUID_SYSTEM_EXCHFLAGS;
Перем GUID_SYSTEM_PRICECODES_LIST;
Перем GUID_SYSTEM_USE_AGREEMENTS;
Перем GUID_SYSTEM_AUTHOR_TEL;

//Предопределенные идентификаторы тега Ref_AttrTypes
Перем GUID_ATTRTYP_COMMENT;	
Перем GUID_ATTRTYP_PAYMNTTYPE;
Перем GUID_ATTRTYP_PRICETYPE;
Перем GUID_ATTRTYP_QUERY;
Перем GUID_ATTRTYP_GOODSCAT; 
Перем GUID_ATTRTYP_GOODSPROP;

Перем GUID_ENUM_CLIENTS_COLORS;
Перем GUID_ENUM_CLIENTS_WARNINGS;
Перем GUID_ENUM_DOC_CAT;
Перем GUID_ENUM_DOC_CAT_COLORS; 
Перем GUID_ENUM_PLAN_OF_SALES_TYPES;

//Идентификаторы перечислений, добавляемых программистом исходя из особенностей задачи.
//Количество таких перечислений не ограничено.
Перем MY_GUID_ENUM_TPTYPE;   // перечисление "Вид торговой точки"(задействован в справочнике торговых точек)
Перем MY_GUID_ENUM_VISIT;    // перечисление "Результат посещения" (задействован в документе "Посещение")
Перем MY_GUID_ENUM_STRANA;	 // перечисление "Страны-производители"
Перем MY_GUID_ENUM_DLVTYPE;  // перечисление "Вид доставки"(задействован в документе "Заявка")

//{ Арт 2008-12-09 
Перем GUID_ENUM_ACDISCOUNTS;
// Арт 2008-12-09 }

 //{ Арт 2009-08-18 
Перем GUID_ENUM_CLIENTS_TPOINTS_CAT;
Перем GUID_ENUM_RATINGCAT;          
Перем GUID_SYSTEM_RATINGNAME;
Перем GUID_SYSTEM_CLIENTINFOSCRIPT;
Перем GUID_SYSTEM_TPOINTINFOSCRIPT;
Перем GUID_SYSTEM_DOCINFOSCRIPT;
Перем GUID_SCRIPT_CLIENTINFO;
Перем GUID_SCRIPT_TPOINTINFO;  
// Арт 2009-08-18 }  

Перем GUID_SYSTEM_PLANBYGOODSEL;
Перем GUID_SYSTEM_PRICE_TRANSCYCLE;

Перем КПКОбъектServer Экспорт; // Переменная, в которой содержится объект для Агент Плюс СОД 
							   // подключаемой компоненты для клиент-серверного режима
Перем КПКОбъектZip    Экспорт; // Переменная, в которой содержится объект для архивирования
                               // подключаемой компоненты для клиент-серверного режима	
Перем КПКОбъектCrypto Экспорт; // Переменная, в которой содержится объект для шифрования 
							   // подключаемой компоненты для клиент-серверного режима

// Добавленные переменные
Перем СведенияАгента;
Перем ДокОбмена;
Перем СписНеНайденныхТиповЦен;
Перем СписЗагруженныхОбъектовСпр;
Перем ТабЗагруженныхФото;

Перем ПутьКФайлуЗапуска15;
Перем ПутьКФайлуЗапуска20; 
Перем ПапкаОбмена15;
Перем ПапкаОбмена20;

Перем ТипАгент15 Экспорт; // Тип мобильного приложения "АМС Агент+ 1.5"
Перем ТипАгентМТ Экспорт; // Тип мобильного приложения "Агент Плюс: Мобильная торговля"

Перем лИмяФормыКонстант;

Перем КурсВалютыРегУчета;
Перем КратностьВалютыРегУчета;
Перем СписокЕдиницИзмерения; //Таблица значений с колонками идентификатор номенклатуры и идентификатор единицы измерения

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура предназначена для оповещения пользователей о событиях обмена
// а также для записи событий в лог обмена
//
Процедура ОповеститьОСобытии(ТекстСообщения = "", Статус = "", ОтражатьВЛоге = Истина, СсылкаНаОбъект = Неопределено) Экспорт
	
	НужныйСтатус = ?(Статус = "", СтатусСообщения.Внимание, Статус);
	
	#Если Клиент Тогда
		//ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, "", НужныйСтатус);
		Сообщить(ТекстСообщения, НужныйСтатус);
	#КонецЕсли
	
	Если ОтражатьВЛоге Тогда
		ЗаписатьЛогОбмена(ТекстСообщения, СсылкаНаОбъект, НужныйСтатус);
	КонецЕсли;
	
КонецПроцедуры

//Процедура ведения лога обмена
//
Процедура ЗаписатьЛогОбмена(ТекстСообщения = "", СсылкаНаОбъект = Неопределено, ТипСобытия = Неопределено)
		
	НоваяСтрока = ТаблицаЛогов.Добавить();
	НоваяСтрока.ТипСобытия     = Строка(ТипСобытия);
	НоваяСтрока.Дата           = ТекущаяДата();
	НоваяСтрока.Событие        = ТекстСообщения;
	НоваяСтрока.Пользователь   = ТекПользователь;
	НоваяСтрока.Агент          = ВыбАгент;
	НоваяСтрока.СсылкаНаОбъект = ?(СсылкаНаОбъект = Неопределено, "", СсылкаНаОбъект);
	
КонецПроцедуры

Процедура СохранитьТаблицуЛогаВНастройкахПользователя()Экспорт
	
	ЛогОбмена = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	ЛогОбмена.Пользователь 		    = ТекПользователь;
	ЛогОбмена.ИмяОбъекта    	    = ЭтотОбъект.Метаданные().Имя;
	ЛогОбмена.НаименованиеНастройки = Строка(Формат(ТекущаяДата(), "ДФ=yyyy.MM.dd"));
	ЛогОбмена.Прочитать();
	
	Если ЛогОбмена.Выбран() Тогда
		ТекТаблица = Новый ХранилищеЗначения(ТаблицаЛогов, Новый СжатиеДанных(9));
		ЛогОбмена.СохраненнаяНастройка = ТекТаблица;
		Если Не ВыполнитьОперациюДляОбъекта(ЛогОбмена, "запись") Тогда 						
			ТекстСообщения = "Не удалось записать сведения в журнал обмена данных!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);			
		КонецЕсли; 
	Иначе
		ЛогОбмена.Пользователь 			= ТекПользователь;
		ЛогОбмена.ИмяОбъекта 			= ЭтотОбъект.Метаданные().Имя;
		ЛогОбмена.НаименованиеНастройки = Строка(Формат(ТекущаяДата(), "ДФ=yyyy.MM.dd"));
		ТекТаблица = Новый ХранилищеЗначения(ТаблицаЛогов, Новый СжатиеДанных(9));
		ЛогОбмена.СохраненнаяНастройка  = ТекТаблица;
		Если Не ВыполнитьОперациюДляОбъекта(ЛогОбмена, "запись") Тогда 						
			ТекстСообщения = "Не удалось записать сведения в журнал обмена данных!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры  //СохранитьТаблицуЛогаВНастройкахПользователя()

// Функция проверяет переданное значение идентификатора на пустой
//
// Параметры:
//  ИД - идентификатор
//
//Возвращаемое значение:
//  Булево
//
// Добавлена 14.06.2007
//
Функция ЭтоПустойИдентификатор(ИД) Экспорт
	Если (СокрЛП(ИД) = "00000000-0000-0000-0000-000000000000") ИЛИ (СокрЛП(ИД) = "") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции //ЭтоПустойИдентификатор()

// Функция преобразовывает дату из формата XML в дату формата 1С
// для переданного элемента таблицы XML
// Параметры:
//  Эл - элемент XML-таблицы
//  Рекв - название реквизита, который нужно преобразовать
//
//Возвращаемое значение:
//  Дата
//
// Добавлена 14.06.2007
//      
Функция ДатаИзXML(Эл, Рекв) Экспорт
	
	_Дата = Эл.ПолучитьАтрибут(Рекв);
	_Дата = СтрЗаменить(_Дата, "-", "");
	_Дата = СтрЗаменить(_Дата, " ", "");
	
	Возврат Дата(_Дата);
	
КонецФункции //ДатаИзXML()

// Функция преобразовывает дату и время из формата XML в дату формата 1С
//
//Возвращаемое значение:
//  Дата
//
// Добавлена Арт 2007-12-26
//
Функция ДатаВремяXMLВФормат1С(ДатаВремя) Экспорт
	
	СимвРазделителяА15 = " ";		
	СимвРазделителяМТ  = "T";
			
	Поз = Найти(ДатаВремя, "-");
	
	Если Поз <> 0 Тогда	 
    	Год   = Число(Лев(ДатаВремя,  Поз - 1));
		Месяц = Число(Сред(ДатаВремя, Поз + 1,2));
		День  = Число(Сред(ДатаВремя, Поз + 4,2));
	Иначе
		Возврат '00010101';
	КонецЕсли;
	
	ПозПробела = Найти(ДатаВремя, СимвРазделителяА15);
	
	Часы    = 0;
	Минуты  = 0;
	Секунды = 0;
	
	Если ПозПробела = 0 Тогда
		ПозПробела = Найти(ДатаВремя, СимвРазделителяМТ);
	КонецЕсли;
	    
	Если ПозПробела > 0 Тогда
		Часы    = Число(Сред(ДатаВремя, ПозПробела + 1, 2));
		Минуты  = Число(Сред(ДатаВремя, ПозПробела + 4, 2));
		Секунды = Число(Сред(ДатаВремя, ПозПробела + 7, 2));
	КонецЕсли;
	
	Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	
КонецФункции //ДатаВремяXMLВФормат1С()

// Функция определяет соответствие видов документа в КПК и ИБ
//
//Возвращаемое значение:
//  Строка с названием вида документа
//
// Добавлена 14.06.2007
// 
Функция ВернутьВидДокументаДляКПК(Вид) Экспорт
	
	Если Вид = "Order" Тогда
		Возврат "Заявка";
	ИначеЕсли Вид = "Sale" Тогда
		Возврат "Реализация";
	ИначеЕсли Вид = "RSale" Тогда
		Возврат "Реализация розничная";
	ИначеЕсли Вид = "Cash" Тогда
		Возврат "Кассовый ордер";
	ИначеЕсли Вид = "Merch" Тогда
		Возврат "Мерчендайзинг";
	ИначеЕсли Вид = "Visit" Тогда
		Возврат "Посещение";
	ИначеЕсли Вид = "Arrival" Тогда
		Возврат "Поступление";
	ИначеЕсли Вид = "Inventory" Тогда
		Возврат "Инвентаризация";
	ИначеЕсли Вид = "Task" Тогда
		Возврат "Задание агента";
	КонецЕсли;
	
	Возврат "<Неопределен>";
	
КонецФункции //ВернутьВидДокументаДляКПК()

// Функция возвращает единицу измерения по коду
//
// Параметры:
//  Товар - номенклатура
//  Код -   код единицы, которую нужно получить
//
//Возвращаемое значение:
//  Значение типа "Справочник.ЕдиницыИзмерения"
//
// Добавлена 26.10.2007
//
Функция ПолучитьЕдиницуПоКоду(Товар, Код) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Владелец
	|	И ЕдиницыИзмерения.Коэффициент <> 0
	|	И ЕдиницыИзмерения.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕдиницыИзмерения.Коэффициент");
	
	Запрос.УстановитьПараметр("Владелец", Товар);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл		
		Если Сч = Код Тогда
			Возврат Выборка.Ссылка;		
		КонецЕсли;		
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	
КонецФункции //ПолучитьЕдиницуПоКоду()

// Функция ПолучитьКодЕдиницы
//
// Возвращаемое значение:
//  Число
//
// Описание:
//	Функция возвращает код для единицы измерения
//
Функция ПолучитьКодЕдиницы(Товар, Единица) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК Единица
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Владелец
	|	И ЕдиницыИзмерения.Коэффициент <> 0
	|	И ЕдиницыИзмерения.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕдиницыИзмерения.Коэффициент");
	
	Запрос.УстановитьПараметр("Владелец", Товар);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл		
		Если Выборка.Единица = Единица Тогда
			Возврат Сч;		
		КонецЕсли;		
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции //ПолучитьКодЕдиницы()   
 
// Функция получает код категории документа из справочника "кпкКатегорииДокументов"
//
// Параметры:
//  Док - нужный документ
//
//Возвращаемое значение:
//  Число
//
// Добавлена 09.11.2007
//
Функция ВернутьКодКатегорииДокумента(Док, ЭтоДолг = Ложь) Экспорт
	
	Рез = "0";
	СтОтбор = Новый Структура;
	СтОтбор.Вставить("КПКДокумент", Док.Ссылка);
	СведДок = РегистрыСведений.кпкСведенияДокумента.ПолучитьПоследнее(, СтОтбор);
	Если СведДок <> Неопределено Тогда
		Если ЭтоДолг Тогда		
			Если СведДок.КатегорияДляДолга <> Неопределено Тогда
				Если НЕ СведДок.КатегорияДляДолга.Пустая() Тогда
					Если МобильноеПриложение = ТипАгентМТ Тогда
						Рез = СведДок.КатегорияДляДолга;
					Иначе
						Рез = СведДок.КатегорияДляДолга.Код;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СведДок.Категория <> Неопределено Тогда
				Если НЕ СведДок.Категория.Пустая() Тогда
					Если МобильноеПриложение = ТипАгентМТ Тогда
						Рез = СведДок.Категория;
					Иначе
						Рез = СведДок.Категория.Код;
					КонецЕсли;					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции //ВернутьКодКатегорииДокумента()

// Функция предназначена для определения даты последнего
// созданного трека в ИБ 1С: Предприятия
//
// Возвращаемое значение:
//  Дата
//
// Добавлено: Арт 2007-12-26	                                                                 
//
Функция ПолучитьДатуПоследнегоТрека()
	 	
	РежимЗагрузкиТреков = Константы.кпкРежимЗагрузкиТреков.Получить();
	
	Отбор = Новый Структура("Агент", ВыбАгент);
	
	СтруктураПослТрека = РегистрыСведений.кпкСведенияПоГПСТрекам.ПолучитьПоследнее(ТекущаяДата(), Отбор);
	
	Если РежимЗагрузкиТреков = 0 Тогда			
		ДатаТрека = СтруктураПослТрека.ДатаСоздания;			
	Иначе			
		Если ЗначениеЗаполнено(СтруктураПослТрека.ИмяФайлаТреков) Тогда
			ДатаТрека = ПолучитьДатуПоследнегоТрекаИзФайла(СтруктураПослТрека.ИмяФайлаТреков);									
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ДатаТрека;
	
КонецФункции //ПолучитьДатуПоследнегоТрека()

// Функция ПолучитьДатуПоследнегоТрекаИзФайла
//
// Параметры:
//  ИмяФайлаТреков - имя файла трека, из которого нужно "вытащить" дату последнего трека
//
//Возвращаемое значение:
//  Дата
//
// Описание:
//	Функция возвращает дату последнего трека для агента
//   
Функция ПолучитьДатуПоследнегоТрекаИзФайла(ИмяФайлаТреков) Экспорт
	
	ДатаТрека = '00010101';
	
	// Проверка папки хранения треков
	ПапкаТреков = СокрЛП(Константы.кпкПапкаТреков.Получить()); 
	
	Если Не ЗначениеЗаполнено(ПапкаТреков) Тогда
		
		ТекстСообщения = "Укажите значение константы ""Папка треков"" на форме " + лИмяФормыКонстант +   
						 " Выгрузка последнего созданного трека не произведена!";
		ОповеститьОСобытии(ТекстСообщения);
		Возврат ДатаТрека;
	КонецЕсли;
	
	Если Не кпкАгентПлюс.ПроверитьСуществованиеКаталога(ПапкаТреков, Истина) Тогда
		ТекстСообщения = "Не найден каталог, указанный в константе ""Папка треков""! на форме " + лИмяФормыКонстант +  
						 " Выгрузка последнего созданного трека не произведена!";
		ОповеститьОСобытии(ТекстСообщения);
		Возврат ДатаТрека;   
	КонецЕсли; 	
	
	ТекстФайла = Новый ТекстовыйДокумент();
	
	ДополнитьСлешВПуть(ПапкаТреков);
	
	ПолноеИмяФ = ПапкаТреков + ИмяФайлаТреков;
	
	ФайлНаДиске = Новый Файл(ПолноеИмяФ);   	
	Если Не ФайлНаДиске.Существует() Тогда
		ТекстСообщения = "Не найден файл трека """ + ПолноеИмяФ + """! " +  
						 "Выгрузка последнего созданного трека не произведена!";
		ОповеститьОСобытии(ТекстСообщения);
		Возврат ДатаТрека;   
	КонецЕсли; 	
	
	Попытка 		
		ТекстФайла.Прочитать(ПолноеИмяФ); 						
	Исключение 				
		ОповеститьОСобытии("Не удалось прочитать файл трека " + ПолноеИмяФ);
		ОповеститьОСобытии(ОписаниеОшибки());
		ОповеститьОСобытии("Выгрузка последнего созданного трека не произведена!");
		Возврат ДатаТрека;
	КонецПопытки;		                            
	
	ВсегоСтрок = ТекстФайла.КоличествоСтрок();
	
	// Будем считать, что в последней строке содержится последний записанный трек
	СтрокаПослТрека = ТекстФайла.ПолучитьСтроку(ВсегоСтрок);
	
	Если ПустаяСтрока(СтрокаПослТрека) Тогда               
		СтрокаПослТрека = ТекстФайла.ПолучитьСтроку(ВсегоСтрок-1);   
	КонецЕсли;
	
	Если ФайлНаДиске.Расширение = ".txt" Тогда
		
		ПозДаты = Найти(СтрокаПослТрека,  Символы.Таб);                                 
		
		Если ПозДаты > 0 Тогда 			
			ДатаВремяИзФайла = СокрЛП(Лев(СтрокаПослТрека, ПозДаты));			
			ДатаТрека        = ДатаВремяXMLВФормат1С(ДатаВремяИзФайла); 			
		КонецЕсли;	
		
	ИначеЕсли ФайлНаДиске.Расширение = ".plt" Тогда
		
		СчЗп = 0;
		ПозЗп = Найти(СтрокаПослТрека, ",");
		// После 5-й по счету запятой следует дата
		Пока ПозЗп > 0 Цикл
			СчЗп = СчЗп + 1;			
			СтрокаПослТрека = Сред(СтрокаПослТрека, ПозЗп + 1);
			ПозЗп = Найти(СтрокаПослТрека, ",");
			Если СчЗп = 5 Тогда				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПозЗп = Найти(СтрокаПослТрека, ",");
		Если ПозЗп > 0 Тогда
			ДатаТрека = Лев(СтрокаПослТрека, ПозЗп-1); 
			ВремяТрека = Сред(СтрокаПослТрека, ПозЗп+1, 6);
			
			Год   = Число("20" + Прав(ДатаТрека, 2));
			Месяц = Число(Сред(ДатаТрека, 3,2));
			День  = Число(Лев(ДатаТрека, 2));
			
			Часы    = Число(Лев(ВремяТрека, 2));
			Минуты  = Число(Сред(ВремяТрека, 3,2));
			Секунды = Число(Прав(ВремяТрека, 2));
			
			ДатаТрека = Дата(Год, Месяц, День, Часы, Минуты, Секунды);
		КонецЕсли;
		
	Иначе
		Возврат ДатаТрека;
	КонецЕсли;
	
	Возврат ДатаТрека;
	
КонецФункции //ПолучитьДатуПоследнегоТрекаИзФайла()

// Процедура УстановитьТипЦеныВДокументе
//
// Параметры:
//  КодТипаЦен - код типа цены в таблице "тзКатегорииЦен", согласно которому нужно найти 
//  			 непосредственно тип цены 
//  Док - ссылка на документ, в котором нужно установить тип цены
//
// Описание:
//	Процедура устанавливает тип цены в документе, а также устанавливает дополнительные параметры, 
//	связанные с типом цен
// 
Процедура УстановитьТипЦеныВДокументе(КодТипаЦен, Док) Экспорт
	 	 
	Если КодТипаЦен <= 0 Тогда
		ТекстСообщения = "В документе " + Строка(Док) + " не правильно указан тип цены! Будет проставлен тип цены из договора!";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, Док);      
		ТипЦен = Док.ДоговорКонтрагента.ТипЦен;				
	Иначе                                       		
		НайденнаяСтрока = тзКатегорииЦен.Найти(КодТипаЦен, "Код");
		Если НайденнаяСтрока = Неопределено Тогда
			ТекстСообщения = "В списке выгружаемых типов цен для мобильного устройства не найден тип цены с кодом: " + КодТипаЦен + ". Будет проставлен тип цены из договора!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, Док);      
			ТипЦен = Док.ДоговорКонтрагента.ТипЦен;
		Иначе
			ТипЦен = НайденнаяСтрока.ТипыЦен;
		КонецЕсли;
	КонецЕсли;
	
	Док.ТипЦен = ТипЦен;	
	
	МетаданныеДокумента = Док.Метаданные();
	
	// Если тип цен оказался не заполненным, то берем его из установок пользователя
	Если НЕ ЗначениеЗаполнено(Док.ТипЦен) Тогда
		Док.ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойТипЦенПродажи");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Док.ТипЦен) Тогда
		// Если ТипЦен - элемент справочника ТипыЦенНоменклатуры и цены выбранного типа расчетные, 
		// то флаги включения налогов надо брать из базовой цены
		Если ТипЗнч(Док.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") И Док.ТипЦен.Рассчитывается Тогда
			флСуммаВключаетНДС = Док.ТипЦен.БазовыйТипЦен.ЦенаВключаетНДС;
		Иначе
			флСуммаВключаетНДС = Док.ТипЦен.ЦенаВключаетНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
		Док.СуммаВключаетНДС = флСуммаВключаетНДС;	
	КонецЕсли;
	
КонецПроцедуры //УстановитьТипЦеныВДокументе()

// Процедура формирует таблицу типов цен номенклатуры
// для выгрузки в КПК
// 
Процедура СформироватьТаблицуВыгружаемыхТиповЦен()  	

	тзКатегорииЦен.Очистить();
	
	ТаблицаВыгружаемыхТиповЦен = Константы.кпкТипыЦен.Получить().Получить();
	
	Если ТипЗнч(ТаблицаВыгружаемыхТиповЦен) <> Тип("ТаблицаЗначений") Тогда		
		ОповеститьОСобытии("Нужно указать список выгружаемых типов цен номенклатуры на форме констант " + лИмяФормыКонстант + "!");  		
		Возврат;
	КонецЕсли;
	
	Если ТаблицаВыгружаемыхТиповЦен.Колонки.Найти("Код") = Неопределено Тогда			
		ОповеститьОСобытии("Нужно перезаполнить список выгружаемых типов цен номенклатуры на форме констант " + лИмяФормыКонстант + "!");  		
		Возврат;
	КонецЕсли;  
	
	СтОтбор = Новый Структура("Объект", ВыбАгент);
	
	ДоступностьТиповЦен = РегистрыСведений.кпкСведенияАгента.Получить(СтОтбор).ДоступностьТиповЦен;
	
	Если ДоступностьТиповЦен = Перечисления.кпкДоступностьТиповЦен.ТипыЦенИзСписка Тогда 
		
		ТаблицаЦен = РегистрыСведений.кпкСведенияАгента.Получить(СтОтбор).ДоступныеТипыЦен.Получить();
		
		Если ТаблицаЦен = Неопределено Тогда
			ОповеститьОСобытии("Нужно определить выгружаемый список типов цен для агента: " + ВыбАгент + " в регистре сведений ""Сведения агента""!");
			Возврат;
		КонецЕсли;
		
		Если Не МобильноеПриложение = ТипАгентМТ Тогда		
			Если ТаблицаЦен.Количество() > 32 Тогда 			
				ОповеститьОСобытии("Для агента: " + ВыбАгент + " указано более 32 типов цен для выгрузки. В мобильном приложении допускается использование не более 32 типов цен!");  		
				Возврат;
			КонецЕсли;   
		КонецЕсли;   
		
		Для Каждого СтрокаТаб Из ТаблицаЦен Цикл
			
			НайденнаяСтрока = ТаблицаВыгружаемыхТиповЦен.Найти(СтрокаТаб.ТипЦены, "ТипыЦен");
			
			Если Не НайденнаяСтрока = Неопределено Тогда
				
				Если НайденнаяСтрока.Выгружать Тогда
					
					Если Не МобильноеПриложение = ТипАгентМТ Тогда		
						Если НайденнаяСтрока.Код = 0 Тогда
							ОповеститьОСобытии("Для типа цены: """ + НайденнаяСтрока.ТипыЦен + """ не указан код. Необходимо перезаполнить " +
							"список выгружаемых типов цен на форме констант " + лИмяФормыКонстант + "!");  		
							Возврат;
						КонецЕсли;
					КонецЕсли;   				
					
					НовСтрока = тзКатегорииЦен.Добавить();
					НовСтрока.ТипыЦен = НайденнаяСтрока.ТипыЦен;
					НовСтрока.Код 	  = НайденнаяСтрока.Код;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
				
		тзКатегорииЦен = ТаблицаВыгружаемыхТиповЦен.Скопировать(Новый Структура("Выгружать", Истина));
		
		Если Не МобильноеПриложение = ТипАгентМТ Тогда	
			НайденнаяСтрока0 = тзКатегорииЦен.Найти(0, "Код");
			
			Если Не НайденнаяСтрока0 = Неопределено Тогда			
				ОповеститьОСобытии("Для типа цены: """ + НайденнаяСтрока0.ТипыЦен + """ не указан код. Необходимо перезаполнить " + 
								   "список выгружаемых типов цен на форме констант " + лИмяФормыКонстант + "!");  		
				Возврат;			                     
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не МобильноеПриложение = ТипАгентМТ Тогда	
		Если тзКатегорииЦен.Количество() > 32 Тогда 			
			ОповеститьОСобытии("Указано более 32 типов цен для выгрузки. В мобильном приложении допускается использованиене более 32 типов цен!");  		
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицуВыгружаемыхТиповЦен()
  
// Процедура производит заполенение одинаковых реквизитов шапки для документов
//
// Добавлена 14.06.2007
//
Процедура ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, Менеджер, СтруктураПолей, ТипОперации) Экспорт
	
	ИдФирмы   	= СтруктураДокКПК.ИдФирмы;
	ИдКлиента 	= СтруктураДокКПК.ИдКлиента;
	ИдТоргТочки = СтруктураДокКПК.ИдТоргТочки;
	ИдДоговора  = СтруктураДокКПК.ИдДоговора;
	ВидДок 		= СтруктураДокКПК.ВидДокумента;
	НомерДок    = Строка(СтруктураДокКПК.Номер);  
	ДатаДок 	= СтруктураДокКПК.Дата;
	Комментарий = СтруктураДокКПК.Комментарий;
	
	ПредставлениеДокВКПК = ВидДок + " № " + НомерДок + " от " + ДатаДок;
    // HVOYA Belya 29.08.2012 14:42:55 Begin	
	//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, ТекПользователь, мВалютаРегламентированногоУчета, ТипОперации);
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, ,);
	// HVOYA Belya 29.08.2012 14:45:51 End
	Если СтруктураПолей.Свойство("Организация") Тогда
		// Получаем организацию из документа
		Если ЭтоПустойИдентификатор(ИдФирмы) Тогда			
			ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указана фирма!", СтатусСообщения.Внимание);      
		Иначе		
			Организация = ПолучитьСсылкуИзСправочника(ИдФирмы, "Организации");			
			Если Док.Метаданные().Реквизиты.Найти("Организация") <> Неопределено Тогда
				Док.Организация = Организация;
			КонецЕсли;
		КонецЕсли;    		
	КонецЕсли;
	
	Если СтруктураПолей.Свойство("Контрагент") Тогда		
		// Получаем контрагента из документа
		Если ЭтоПустойИдентификатор(ИдКлиента) Тогда			
			ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указан контрагент!", СтатусСообщения.Внимание);
		Иначе	
			Контрагент = ПолучитьСсылкуИзСправочника(ИдКлиента, "Контрагенты");
			Если Док.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
				Док.Контрагент = Контрагент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;     	
	
	Если СтруктураПолей.Свойство("ДоговорКонтрагента") Тогда			
		Если Константы.кпкИспользоватьДоговоры.Получить() Тогда
			// Получаем договор из документа
			Если ЭтоПустойИдентификатор(ИдДоговора) Тогда			
				ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указан договор! Будет проставлен договор по умолчанию!", СтатусСообщения.Внимание);				
			Иначе	
				ДоговорКонтрагента = ПолучитьСсылкуИзСправочника(ИдДоговора, "ДоговорыКонтрагентов");				
				Если Док.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
					Док.ДоговорКонтрагента = ДоговорКонтрагента;
				КонецЕсли;
			КонецЕсли;                                         
		Иначе
			Док.ДоговорКонтрагента = Док.Контрагент.кпкОсновнойДоговорКонтрагента;
		КонецЕсли;	 				
	КонецЕсли;  	
	
	Если ИспТочек Тогда
		// Получаем торговую точку из документа
		Если СтруктураПолей.Свойство("ТорговаяТочка") Тогда		
			
			Если ВРЕГ(ИдТоргТочки) = ВРЕГ(ИдКлиента) или ЭтоПустойИдентификатор(ИдТоргТочки) Тогда			
				ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указана торговая точка!", СтатусСообщения.Внимание);
			Иначе				
				Точка = ПолучитьСсылкуИзСправочника(ИдТоргТочки, "кпкТорговыеТочки");								
				Если Док.Метаданные().Реквизиты.Найти("кпкТорговаяТочка") <> Неопределено Тогда
					Док.кпкТорговаяТочка = Точка;
				ИначеЕсли Док.Метаданные().Реквизиты.Найти("ТорговаяТочка") <> Неопределено Тогда
					Док.ТорговаяТочка = Точка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;   		
    КонецЕсли;
    //ИЗМЕНЕНО Верескул Игорь(Начало 06.10.2017   
    Если (ТипЗнч(Док) = Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ ТипЗнч(Док) = Тип("ДокументОбъект.ЗаказПокупателя")) 
        И ЗначениеЗаполнено(Док.кпкТорговаяТочка) Тогда
        Если ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда            
            Регистр = РегистрыСведений.СоответствиеТТПодразделениям;
            Набор = Регистр.СоздатьНаборЗаписей();
            Набор.Отбор.ТорговаяТочка.Установить(Док.кпкТорговаяТочка,Истина);
            Набор.Отбор.Договор.Установить(Док.ДоговорКонтрагента);
            Набор.Прочитать();
            Если Не Набор.Количество() = 0 Тогда
                Док.Подразделение = Набор[0].Подразделение;
            КонецЕсли; 
        КонецЕсли;            	
    КонецЕсли; 
    //Окончание)Верескул Игорь 
	Если Док.Метаданные().Реквизиты.Найти("Агент") <> Неопределено Тогда
		Док.Агент = ВыбАгент;
	КонецЕсли; 	
	
	Если Док.Метаданные().Реквизиты.Найти("Комментарий") <> Неопределено Тогда
		Док.Комментарий = Комментарий;
	КонецЕсли;
	
	Если Не Док.Проведен Тогда
		Док.Дата = ТекущаяДата();
	КонецЕсли;
	
	Если Док.Метаданные().Реквизиты.Найти("Комментарий") <> Неопределено Тогда
		Док.Комментарий = Комментарий;
	КонецЕсли;
	
	ИспАвтонумерациюЦБД	= Константы.кпкИспользоватьАвтонумерациюДокументовВЦБД.Получить();
	
	Если ЗначениеЗаполнено(НомерДок) И (Не ИспАвтонумерациюЦБД) Тогда
		Если Менеджер.НайтиПоНомеру(НомерДок, ТекущаяДата()) = Менеджер.ПустаяСсылка() Тогда	
			Док.Номер = НомерДок;	
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДокКПК.Свойство("ТипЦен") Тогда
		Если Док.Метаданные().Реквизиты.Найти("ТипЦен") <> Неопределено Тогда
			ТипЦены = ПолучитьСсылкуИзСправочника(СтруктураДокКПК.ТипЦен, "ТипыЦенНоменклатуры");								
			Док.ТипЦен 	= ТипЦены;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДокКПК.Свойство("СуммаДокумента") Тогда
		Если Док.Метаданные().Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
			Док.СуммаДокумента 	= СтруктураДокКПК.СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры //ЗаполнитьОсновныеПараметрыДокумента()

// Процедура заполняет договор в документе
//
// Добавлена 2009-07-01
//  
Процедура УстановитьДоговорВДокументе(Док, СтрокаТЧ = Неопределено) Экспорт
	
	Перем СтруктураПараметровДляПолученияДоговора;
	
	Если ЗначениеЗаполнено(Док.Контрагент) и Не ЗначениеЗаполнено(Док.ДоговорКонтрагента)Тогда
		
		Если ТипЗнч(Док) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
			мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораЗаказаПокупателя();
		ИначеЕсли ТипЗнч(Док) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") или 
				  ТипЗнч(Док) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
			СписокДопустимыхВидовДоговоров           = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(Док.ВидОперации);
			мСтруктураПараметровДляПолученияДоговора = Новый Структура ("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		Иначе
			мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
		КонецЕсли;	
		 			
		РежимВыгрузкиКонтрагентов = Константы.кпкРежимВыгрузкиКонтрагентов.Получить();
		
		// Получаем список доступных договоров для контрагента
		РезультатЗапроса = кпкАгентПлюс.ПолучитьДоступныеДоговорыКонтрагента(Док.Контрагент, мСтруктураПараметровДляПолученияДоговора, Ложь, Док.Организация);
		ТаблицаДоговоров = РезультатЗапроса.Выгрузить();

		Если РежимВыгрузкиКонтрагентов = 1 или РежимВыгрузкиКонтрагентов = 4 Тогда // выгрузка по списку договоров
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	кпкДоговораАгентов.Договор,
			|	ВЫБОР
			|		КОГДА кпкДоговораАгентов.Договор = кпкДоговораАгентов.Договор.Владелец.кпкОсновнойДоговорКонтрагента
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Сортировка
			|ИЗ
			|	Справочник.кпкДоговораАгентов КАК кпкДоговораАгентов
			|ГДЕ
			|	(НЕ кпкДоговораАгентов.ПометкаУдаления)
			|	И кпкДоговораАгентов.Владелец = &Агент
			|	И кпкДоговораАгентов.Договор В ИЕРАРХИИ(&СписокДоговоров)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сортировка УБЫВ");
			
			Запрос.УстановитьПараметр("Агент", 		     ВыбАгент);
			Запрос.УстановитьПараметр("СписокДоговоров", ТаблицаДоговоров.ВыгрузитьКолонку("Договор"));
			
			Выборка = Запрос.Выполнить().Выбрать();
			// Проставляем первый попавшийся договор
			Если Выборка.Следующий() Тогда
				Док.ДоговорКонтрагента = Выборка.Договор;				
			Иначе    				
				Если Константы.кпкРежимТоргТочек.Получить() = 1 Тогда
					Если Док.Метаданные().Реквизиты.Найти("кпкТорговаяТочка") <> Неопределено Тогда
						Док.ДоговорКонтрагента = Док.кпкТорговаяТочка.Договор;
					ИначеЕсли Док.Метаданные().Реквизиты.Найти("ТорговаяТочка") <> Неопределено Тогда
						Док.ДоговорКонтрагента = Док.ТорговаяТочка.Договор;
					КонецЕсли;  				
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
					
					Для Каждого СтрокаТаб Из ТаблицаДоговоров Цикл
						Если СтрокаТаб.Договор = Док.Контрагент.кпкОсновнойДоговорКонтрагента Тогда
							ТекстСообщения = "Не найдено ни одного подходящего договора для контрагента " + СокрЛП(Док.Контрагент) + " из указанного списка договоров агента." + Символы.ПС + 
											 "В документ: " + Строка(Док)+ " будет проставлен основной договор!";
						Иначе
							ТекстСообщения = "Не найдено ни одного подходящего договора для контрагента " + СокрЛП(Док.Контрагент) + " из указанного списка договоров агента." + Символы.ПС + 
										     "В документ: " + Строка(Док)+ " будет проставлен первый попавшийся подходящий договор!";
						КонецЕсли;
						ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, Док.Ссылка);
						Док.ДоговорКонтрагента = СтрокаТаб.Договор;						
						Прервать;
					КонецЦикла;
					             					
					Если Не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
						ТекстСообщения = "Не найдено ни одного подходящего договора для контрагента " + СокрЛП(Док.Контрагент) + "." + Символы.ПС + 
										 "В документ: " + Строка(Док)+ " не проставлен договор! Укажите договор вручную или создайте новый!";
						ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, Док.Ссылка);
					КонецЕсли; 
					
				КонецЕсли;  
				
			КонецЕсли;
			
		Иначе
			
			Если Константы.кпкРежимТоргТочек.Получить() = 1 Тогда
				Если Док.Метаданные().Реквизиты.Найти("кпкТорговаяТочка") <> Неопределено Тогда
					Док.ДоговорКонтрагента = Док.кпкТорговаяТочка.Договор;
				ИначеЕсли Док.Метаданные().Реквизиты.Найти("ТорговаяТочка") <> Неопределено Тогда
					Док.ДоговорКонтрагента = Док.ТорговаяТочка.Договор;
				КонецЕсли;  				
			КонецЕсли;  
			
			Если Не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
				
				Для Каждого СтрокаТаб Из ТаблицаДоговоров Цикл
					Док.ДоговорКонтрагента = СтрокаТаб.Договор;
					Прервать;				
				КонецЦикла;		
				
				Если Не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
					ТекстСообщения = "Не найдено ни одного подходящего договора для контрагента " + СокрЛП(Док.Контрагент) + "." + Символы.ПС + 
									 "В документ: " + Строка(Док)+ " не проставлен договор! Укажите договор вручную или создайте новый!";
					ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, Док.Ссылка);
				КонецЕсли;  
				
			КонецЕсли;  
			
		КонецЕсли;
		
		//Если Не(ТипЗнч(Док) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") или 
		//	ТипЗнч(Док) = Тип("ДокументОбъект.РасходныйКассовыйОрдер")) Тогда
		//	
		//	// Зададим, какие реквизиты надо редактировать
		//	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(Док);
		//	
		//	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		//	
		//	мТекущаяВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		//	
		//	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(Док, мТекущаяВалютаВзаиморасчетов, 
															 //мВалютаРегламентированногоУчета, 
															 //СпособЗаполненияЦен, 
															 //СтруктураРеквизитовДокумента, 
															 //"Продажа", "Товары");
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаТЧ <> Неопределено Тогда
		
		СтрокаТЧ.ДоговорКонтрагента = Док.ДоговорКонтрагента
		
	КонецЕсли; 	
	
КонецПроцедуры // УстановитьДоговорВДокументе()
    
// Функция выполняет укзанную операцию с переданным объектом
// и возвращает значение типа Булево в результате выполнения
// операции
//
Функция ВыполнитьОперациюДляОбъекта(Объект, ВидОперации) Экспорт
	
	флОперацияВыполнена = Ложь;
		
	Для Сч = 1 По КоличествоПопыток Цикл
		
		Попытка
			
			Если ВидОперации = "запись" Тогда				
				Объект.Записать();
			ИначеЕсли ВидОперации = "проведение" Тогда 				
				Если Объект.ПометкаУдаления Тогда					
					ОповеститьОСобытии("Документ помечен на удаление - проведение отменено!", СтатусСообщения.Важное, Истина, Объект);					
					Возврат Ложь;					
				Иначе  					
					Объект.Записать(РежимЗаписиДокумента.Проведение);										
				КонецЕсли;				
			ИначеЕсли ВидОперации = "создание" Тогда
				Если Найти(Строка(Объект), "Справочник")>0 Тогда    
					Объект = Объект.СоздатьЭлемент();
				ИначеЕсли Найти(Строка(Объект), "Документ")>0 Тогда
					Объект = Объект.СоздатьДокумент();
				ИначеЕсли Найти(Строка(Объект), "Регистр")>0 Тогда
					Объект = Объект.СоздатьМенеджерЗаписи();      
				Иначе
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			флОперацияВыполнена = Истина;
			
			Прервать;
			
		Исключение
			
			Сообщить("------------------------------------------------------" + Символы.ПС + ОписаниеОшибки());
			
			// Пауза снизит нагрузку на сервер и позволит другим пользователям закончить операции,
			// которые идут в транзакции.
			#Если Клиент Тогда
			Предупреждение("В данный момент нет возможности выполнить " + ВидОперации + " для объекта: " + Строка(Объект) +
							Символы.ПС + "Повторная попытка будет произведена через " + ПаузаМеждуПопытками + " секунд",
							ПаузаМеждуПопытками, "Пауза"); 
			#КонецЕсли
			
			ТекстСообщения = "Не удалось выполнить " + ВидОперации + " для объекта: """ + Строка(Объект) + """";
			
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина, Объект);
			
		КонецПопытки; 
		
	КонецЦикла;        		
		
	Возврат флОперацияВыполнена;
			
КонецФункции //ВыполнитьОперациюДляОбъекта()

// Процедура ПриИзмененииАгента
//
// Параметры:
//  ТекАгент - агент, для которого нужно получить текущие параметры
//
// Описание:
//	Процедура устанавливает в общие переменные параметры выбранного агента
// 
Процедура ПриИзмененииАгента(ТекАгент) Экспорт
	
	Если ЗначениеЗаполнено(ТекАгент) Тогда
		
		Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(Новый Структура("Объект", ВыбАгент));
		
		Если Выборка.Следующий() Тогда    			
			
			СведенияАгента = ПолучитьДанныеАгента();
			
			КассыАгента 	 	 = СведенияАгента.КассыАгента;
			КПК 		 		 = СведенияАгента.КПК;
			ПочтовыйЯщик 		 = СведенияАгента.ПочтовыйЯщик;
			ОснФирма 	 		 = СведенияАгента.ОсновнаяФирма;
			ПрефиксАгента		 = СведенияАгента.ПрефиксНомеровДок;
			СписокСкладов 		 = СведенияАгента.СписокСкладов;
			АвтоСклад 	  		 = СведенияАгента.ПередвижнойСклад;
			ОснКассаККМ   		 = СведенияАгента.КассаККМ;
			ПарольЗИП     		 = СведенияАгента.ПарольЗИП;
			ВидОплатыПоУмолчанию = СведенияАгента.ВидОплатыПоУмолчанию;
			ОснСклад     		 = СведенияАгента.ОсновнойСклад;
			МобильноеПриложение  = СведенияАгента.ТипМобильногоПриложения;			
			
		Иначе
			
			ТекстСообщения = "В регистре сведений ""Сведения агентов"" не найдено данных по агенту: " + ТекАгент + "!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Ложь);			
			Возврат;
			
		КонецЕсли;		
		
	Иначе
		
		СведенияАгента.Очистить();
		
		МобильноеПриложение  = Перечисления.кпкТипыМобильныхПриложений.ПустаяСсылка();			
		
	КонецЕсли;   
	
КонецПроцедуры //ПриИзмененииАгента()
 
// Процедура формирует новые записи в регистре сведений "кпкССылкиДокументов"
// для новых загруженных документов
//
// Добавлена 29.06.2007
//
Процедура ЗаписьВРегистрСсылок(Док, ДокСсылка)
	
	СсылкиДокументов 		  = РегистрыСведений.кпкСсылкиДокументов.СоздатьМенеджерЗаписи();
	СсылкиДокументов.Агент 	  = ВыбАгент;
	СсылкиДокументов.Документ = Док.Ссылка;
	СсылкиДокументов.Ссылка	  = ДокСсылка.Ссылка;	
	Если Не ВыполнитьОперациюДляОбъекта(СсылкиДокументов, "запись") Тогда 			
		ТекстСообщения = "Не удалось записать сведения по документу: " + Док.Ссылка;
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, Док.Ссылка);		
		Возврат;			
	КонецЕсли;  
	
КонецПроцедуры //ЗаписьВРегистрСсылок()

// Функция возвращает структуру параметров документа в КПК.
// Элементы структуры содержит общие параметры документов в КПК.
//
Функция ПолучитьСтруктуруПараметровДокументаВКПК(XMLДок)
	
	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ДатаФорма, ИдДок, СостДок, СпособСоздания," + 
										  "ИдФирмы, ИдКлиента, ИдТоргТочки, ИдДоговора, ИдМаршрута, СуммаДок, Комментарий," + 
										  "ВидОплаты, ИдДокОсн, Широта, Долгота");
	  		
	ВидДок    = ВернутьВидДокументаДляКПК(XMLДок.ПолучитьАтрибут("DocType"));	
	
	Дата      = ДатаИзXML(XMLДок, "TimeCrt");
	ДатаФорма = ДатаИзXML(XMLДок, "TimeCrtForm");
	
	Попытка
		Широта  = Число(XMLДок.ПолучитьАтрибут("GPSLatitude")); 
		Долгота = Число(XMLДок.ПолучитьАтрибут("GPSLongitude"));		
	Исключение
		Широта  = 0; 
		Долгота = 0; 		
	КонецПопытки; 	
	
	СтруктураПараметров.ВидДокумента   = ВидДок;
	СтруктураПараметров.Дата	 	   = Дата;
	СтруктураПараметров.ДатаФорма	   = ДатаФорма; 	
	СтруктураПараметров.Широта	   	   = Широта; 	
	СтруктураПараметров.Долгота	   	   = Долгота; 		
	
	СтруктураПараметров.Номер 	 	   = XMLДок.ПолучитьАтрибут("Num");	
	СтруктураПараметров.ИдДок 		   = СокрЛП(XMLДок.ПолучитьАтрибут("DocID"));
	СтруктураПараметров.СостДок	 	   = Число(XMLДок.ПолучитьАтрибут("DocState"));
	СтруктураПараметров.СпособСоздания = СокрЛП(XMLДок.ПолучитьАтрибут("ModeCrt"));	
	СтруктураПараметров.ИдФирмы 	   = СокрЛП(XMLДок.ПолучитьАтрибут("FirmID"));
	СтруктураПараметров.ИдКлиента	   = СокрЛП(XMLДок.ПолучитьАтрибут("ClientID"));
	СтруктураПараметров.ИдТоргТочки    = СокрЛП(XMLДок.ПолучитьАтрибут("TPointID"));
	СтруктураПараметров.ИдДоговора     = СокрЛП(XMLДок.ПолучитьАтрибут("AgreementID"));
	СтруктураПараметров.ИдМаршрута 	   = СокрЛП(XMLДок.ПолучитьАтрибут("RouteID"));
	СтруктураПараметров.СуммаДок	   = Число(XMLДок.ПолучитьАтрибут("Sum"));
	СтруктураПараметров.Комментарий    = СокрЛП(XMLДок.ПолучитьАтрибут("Comment"));
	СтруктураПараметров.ВидОплаты	   = Число(XMLДок.ПолучитьАтрибут("PmntType"));
	СтруктураПараметров.ИдДокОсн 	   = СокрЛП(XMLДок.ПолучитьАтрибут("MDocID"));
	
	Возврат СтруктураПараметров;
	
КонецФункции //ПолучитьСтруктуруПараметровДокументаВКПК()

// Процедура сообщает о документе, который уже был загружен
//
// Добавлена 14.06.2007
//    
Процедура СообщитьОПропускеДокумента(СтруктураПараметров) Экспорт

	ТекстСообщения = "Пропущена загрузка документа """ + СтруктураПараметров.ВидДокумента +
					 """ № " + Строка(СтруктураПараметров.Номер) + " от " + Строка(СтруктураПараметров.Дата) + 
					 " - документ был загружен ранее.";
	ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
	
КонецПроцедуры //СообщитьОПропускеДокумента()

// Функция УстановитьНастройкиПоУмолчанию
//
// Возвращаемое значение:
//  Булево
//
// Описание:
// Функция устанавливает настройки обработки по умолчанию
// 
Функция УстановитьНастройкиПоУмолчанию() Экспорт
	
	#Если Клиент Тогда
		Если Не кпкАгентПлюс.ЗагрузитьКомпонентуAPPlus(КПКОбъект) Тогда
			Возврат Ложь;
		КонецЕсли;	
	#КонецЕсли
	
	Если СпособОбмена = 0 Тогда
		СпособОбмена = Константы.кпкСпособОбмена.Получить();
	КонецЕсли;
	
	РеализацияПоЗаявкам = Константы.кпкРеализацияПоЗаявкам.Получить();
	
	Если СпособОбмена = 2 Тогда  				
		НастроитьАвтообменССервером();   			
	КонецЕсли;    	
			
	флАрхив 		    = Истина;	
	флАвтоИсторияПродаж = Ложь;	
	
	НачПериодаЗаданий = ТекущаяДата();
	КонПериодаЗаданий = ТекущаяДата();
	
	СрокПеремещений = Константы.кпкСрокПеремещений.Получить();
	
	ПланПосещений = Документы.кпкПланПосещений.ПустаяСсылка();
	
	ИнициализацияСлужебныхДанных();
	
	// Процедура должна вызываться только после инициализации переменных вида АПВидДок...
	ПроверкаСправочникаНумераторов();  
	
	СтруктураКурсаРегУчета  = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Валюта", мВалютаРегламентированногоУчета));				
	КурсВалютыРегУчета 	    = СтруктураКурсаРегУчета.Курс;
	КратностьВалютыРегУчета = СтруктураКурсаРегУчета.Кратность; 
	
	ЗаполнитьСписокУдаляемыхОбъектов();
	
	Возврат Истина;
	
КонецФункции //УстановитьНастройкиПоУмолчанию()

Процедура ПроверкаСправочникаНумераторов() 
	
	//Значения видов документов не менять!!!
	//Виды документов в КПК:
	АПВидДокЗаявка	 		= "Order";
	АПВидДокРеализация 		= "Sale";
	АПВидДокРеализацияР		= "RSale";   // Реализация розничная
	АПВидДокСчетФ 			= "InvFact"; // Виртуальный вид документа, в КПК используется только 
										 // для корректной нумерации документов
	АПВидДокПКО 			= "Cash";
	АПВидДокРКО 			= "OutCash"; // Виртуальный вид документа, в КПК используется только 
										 // для корректной нумерации документов
	АПВидДокМерч 			= "Merch";
	АПВидДокПосещение		= "Visit";
	АПВидДокПеремещение 	= "Move";
	АПВидДокПоступление 	= "Arrival";
	АПВидДокВозврат		 	= "Return";
	АПВидДокИннвентаризация	= "Inventory"; 
	
	списСоотвВидовДок = Новый СписокЗначений; //список соответствий видов документов Агент+ и ЦБД
	
	//Нижеследующие значения требуется выставить в соответствии с видами документов в Вашей конфигурации 1С
	списСоотвВидовДок.Добавить(АПВидДокЗаявка, 		"ЗаказПокупателя");
	списСоотвВидовДок.Добавить(АПВидДокРеализация, 	"РеализацияТоваровУслуг");
	списСоотвВидовДок.Добавить(АПВидДокРеализацияР,	"ОтчетОРозничныхПродажах");
	списСоотвВидовДок.Добавить(АПВидДокСчетФ, 		"СчетФактураВыданный");
	списСоотвВидовДок.Добавить(АПВидДокПКО, 		"ПриходныйКассовыйОрдер");
	списСоотвВидовДок.Добавить(АПВидДокРКО, 		"РасходныйКассовыйОрдер");
	списСоотвВидовДок.Добавить(АПВидДокМерч, 		"кпкМерчендайзинг");
	списСоотвВидовДок.Добавить(АПВидДокПосещение, 	"кпкПосещение");
	списСоотвВидовДок.Добавить(АПВидДокПеремещение, "ПеремещениеТоваров");
	Если МобильноеПриложение = Перечисления.кпкТипыМобильныхПриложений.АгентПлюс Тогда
		списСоотвВидовДок.Добавить(АПВидДокПоступление, "ВозвратТоваровОтПокупателя");
	Иначе
		списСоотвВидовДок.Добавить(АПВидДокПоступление, "ПоступлениеТоваровУслуг");
		списСоотвВидовДок.Добавить(АПВидДокВозврат, 	"ВозвратТоваровОтПокупателя");
	КонецЕсли;
	списСоотвВидовДок.Добавить(АПВидДокИннвентаризация, "ИнвентаризацияТоваровНаСкладе");
   	
	СпрНумераторы = Справочники.кпкНумераторы;
	Если СпрНумераторы.Выбрать().Следующий() Тогда
		Возврат; //значит справочник не пустой
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Спр = СпрНумераторы.СоздатьЭлемент();
	Спр.Код = 100; Спр.Наименование = "<Не выбран>"; Спр.ВидыДокументовВКпк = ""; 
	Спр.Записать();
	
	Спр = СпрНумераторы.СоздатьЭлемент();
	Спр.Код = 2; Спр.Наименование = "Заявки"; Спр.ВидыДокументовВКпк 	= АПВидДокЗаявка; 
	Спр.ДлинаНомера = 10; 
	Спр.Записать();
	
	Спр = СпрНумераторы.СоздатьЭлемент();
	Спр.Код = 3; Спр.Наименование = "Продажи"; Спр.ВидыДокументовВКпк 	= АПВидДокРеализация; 
	Спр.ДлинаНомера = 10;
	Спр.Записать();
	
	Спр = СпрНумераторы.СоздатьЭлемент();
	Спр.Код = 4; Спр.Наименование = "Счета-фактуры";Спр.ВидыДокументовВКпк = АПВидДокСчетФ; 
	Спр.ДлинаНомера = 10; 
	Спр.Записать();
	
	Спр = СпрНумераторы.СоздатьЭлемент();
	Спр.Код = 5; Спр.Наименование = "ПКО"; Спр.ВидыДокументовВКпк 		= АПВидДокПКО; 
	Спр.ДлинаНомера = 10;
	Спр.Записать();
	
	Спр = СпрНумераторы.СоздатьЭлемент();
	Спр.Код = 6; Спр.Наименование = "РКО"; Спр.ВидыДокументовВКпк 		= АПВидДокРКО; 
	Спр.ДлинаНомера = 10; 
	Спр.Записать();
	
	Спр = СпрНумераторы.СоздатьЭлемент();
	Спр.Код = 7; Спр.Наименование = "Мерчендайзинг"; Спр.ВидыДокументовВКпк = АПВидДокМерч; 
	Спр.ДлинаНомера = 10; 
	Спр.Записать();
	
	Спр = СпрНумераторы.СоздатьЭлемент();
	Спр.Код = 8; Спр.Наименование = "Посещение"; Спр.ВидыДокументовВКпк 	= АПВидДокПосещение; 
	Спр.ДлинаНомера = 10;
	Спр.Записать();
	
	Спр = СпрНумераторы.СоздатьЭлемент();
	Спр.Код = 9; Спр.Наименование = "Перемещение"; Спр.ВидыДокументовВКпк = АПВидДокПеремещение; 
	Спр.ДлинаНомера = 10; 
	Спр.Записать();
	
	ЗафиксироватьТранзакцию(); 	
		
КонецПроцедуры //ПроверкаСправочникаНумераторов()

Функция ПреобразоватьКодСправочника(ЭлементСпр)
	
	Префикс = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
	
	СтрКод = СокрЛП(ЭлементСпр.Код);
	СтрКод = СтрЗаменить(СтрКод, Префикс, "");
	
	Числ = 0;
	Попытка
		Числ = Число(СтрКод);
	Исключение    		
		Представление = ЭлементСпр.Ссылка.Метаданные().Представление();
		ОповеститьОСобытии("Неверно указан код: " + СокрЛП(ЭлементСпр.Код) + " элемента справочника: """ + Представление + """." + 
						   "Требуется указать числовое значение кода!", СтатусСообщения.Внимание, Истина, ЭлементСпр.Ссылка);
	КонецПопытки;
	
	Возврат Числ;
	
КонецФункции //ПреобразоватьКодСправочника()

// Функция возвращает плановые и фактические фактические данные по продажам номенклатурных групп
// в текущем периоде
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//  РезультатЗапроса
// 
Функция ПолучитьПланФактныеДанныеПоПлануПродаж()
	
	ТипОтчета = Константы.кпкРежимПланированияПродаж.Получить();
  	
	ТекстУсл = "";
	
	Если ТипОтчета = 1 Тогда
		ТекстУсл = "
		|ГДЕ
		|	Основной.КоличествоПлан <> 0";
	ИначеЕсли ТипОтчета = 2 Тогда
		ТекстУсл = "
		|ГДЕ		
		|	Основной.СуммаПлан <> 0";		
	Иначе
		ТекстУсл = "
		|ГДЕ
		|	Основной.КоличествоПлан <> 0
		|	И Основной.СуммаПлан <> 0";		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Основной.ТипПлана КАК ТипПлана,
	|	Основной.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Основной.КоличествоФакт КАК КоличествоФакт,
	|	Основной.СуммаФакт КАК СуммаФакт,
	|	Основной.КоличествоПлан КАК КоличествоПлан,
	|	Основной.СуммаПлан КАК СуммаПлан,
	|	Основной.КоличествоФакт - Основной.КоличествоПлан КАК ОтклонениеКоличество,
	|	Основной.СуммаФакт - Основной.СуммаПлан КАК ОтклонениеСумма,
	|	ВЫБОР
	|		КОГДА Основной.КоличествоПлан = 0
	|			ТОГДА 100
	|		ИНАЧЕ 100 * Основной.КоличествоФакт / Основной.КоличествоПлан
	|	КОНЕЦ КАК ПроцентКоличество,
	|	ВЫБОР
	|		КОГДА Основной.СуммаПлан = 0
	|			ТОГДА 100
	|		ИНАЧЕ 100 * Основной.СуммаФакт / Основной.СуммаПлан
	|	КОНЕЦ КАК ПроцентСумма
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ЕСТЬNULL(Продажи.НоменклатурнаяГруппа, ЭталонныеДанные.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
	|		СУММА(ЕСТЬNULL(Продажи.КоличествоОборот, 0)) КАК КоличествоФакт,
	|		СУММА(ЕСТЬNULL(Продажи.СтоимостьОборот, 0)) КАК СуммаФакт,
	|		СУММА(ЕСТЬNULL(ЭталонныеДанные.КоличествоПлан, 0)) КАК КоличествоПлан,
	|		СУММА(ЕСТЬNULL(ЭталонныеДанные.СуммаПлан, 0)) КАК СуммаПлан,
	|		ЕСТЬNULL(ЭталонныеДанные.ТипПланированияПродаж, """""""") КАК ТипПлана
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СУММА(ЭталонныеДанные.КоличествоОборот) КАК КоличествоПлан,
	|			СУММА(ЭталонныеДанные.СуммаОборот) КАК СуммаПлан,
	|			ЭталонныеДанные.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|			ЭталонныеДанные.ДокументПланирования.ТипПланированияПродаж КАК ТипПланированияПродаж
	|		ИЗ
	|			РегистрНакопления.кпкПланыПродаж.Обороты(&ДатаНач, &ДатаКон, , Агент = &Агент) КАК ЭталонныеДанные
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЭталонныеДанные.НоменклатурнаяГруппа,
	|			ЭталонныеДанные.ДокументПланирования.ТипПланированияПродаж) КАК ЭталонныеДанные
	|			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СУММА(Продажи.КоличествоОборот) КАК КоличествоОборот,
	|				СУММА(Продажи.СтоимостьОборот) КАК СтоимостьОборот,
	|				Продажи.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|			ИЗ
	|				(ВЫБРАТЬ
	|					кпкСведенияДокумента.КПКДокумент КАК КПКДокумент,
	|					кпкСведенияДокумента.Агент КАК Агент,
	|					кпкСведенияДокумента.ДатаВремяСоздания КАК ДатаВремяСоздания,
	|					кпкСсылкиДокументов.Документ КАК Документ
	|				ИЗ
	|					РегистрСведений.кпкСведенияДокумента КАК кпкСведенияДокумента
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кпкСсылкиДокументов КАК кпкСсылкиДокументов
	|						ПО кпкСведенияДокумента.КПКДокумент = кпкСсылкиДокументов.Ссылка
	|							И кпкСведенияДокумента.Агент = кпкСсылкиДокументов.Агент
	|				ГДЕ
	|					кпкСведенияДокумента.ДатаВремяСоздания МЕЖДУ &ДатаНач И &ДатаКон
	|					И кпкСведенияДокумента.Агент = &Агент
	|					И кпкСведенияДокумента.кпкПризнакРучногоВвода = ЛОЖЬ
	|					И (кпкСведенияДокумента.КПКДокумент.ПометкаУдаления = ЛОЖЬ
	|							ИЛИ кпкСсылкиДокументов.Документ.ПометкаУдаления = ЛОЖЬ)) КАК ДокументыКПК
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(, , , ) КАК Продажи
	|					ПО (Продажи.ЗаказПокупателя = ДокументыКПК.КПКДокумент
	|							ИЛИ Продажи.ДокументПродажи = ДокументыКПК.КПКДокумент
	|							ИЛИ Продажи.ДокументПродажи = ДокументыКПК.Документ)
	|			ГДЕ
	|				(НЕ Продажи.ДокументПродажи ЕСТЬ NULL )
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Продажи.Номенклатура.НоменклатурнаяГруппа) КАК Продажи
	|			ПО ЭталонныеДанные.НоменклатурнаяГруппа = Продажи.НоменклатурнаяГруппа
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЕСТЬNULL(Продажи.НоменклатурнаяГруппа, ЭталонныеДанные.НоменклатурнаяГруппа),
	|		ЕСТЬNULL(ЭталонныеДанные.ТипПланированияПродаж, """""""")) КАК Основной " + ТекстУсл + "	
	|ИТОГИ
	|	СУММА(КоличествоФакт),
	|	СУММА(СуммаФакт),
	|	СУММА(КоличествоПлан),
	|	СУММА(СуммаПлан),
	|	СУММА(ОтклонениеКоличество),
	|	СУММА(ОтклонениеСумма),
	|	ВЫБОР
	|		КОГДА СУММА(Основной.КоличествоПлан) = 0
	|			ТОГДА 100
	|		ИНАЧЕ 100 * СУММА(Основной.КоличествоФакт) / СУММА(Основной.КоличествоПлан)
	|	КОНЕЦ КАК ПроцентКоличество,
	|	ВЫБОР
	|		КОГДА СУММА(Основной.СуммаПлан) = 0
	|			ТОГДА 100
	|		ИНАЧЕ 100 * СУММА(Основной.СуммаФакт) / СУММА(Основной.СуммаПлан)
	|	КОНЕЦ КАК ПроцентСумма
	|ПО
	|	ТипПлана,
	|	НоменклатурнаяГруппа");     
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(ТекущаяДата()));
	Запрос.УстановитьПараметр("Агент",   ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции //ПолучитьПланФактныеДанныеПоПлануПродаж()

//Процедура предназначена для выгрузки в КПК планов продаж номенклатурных групп и результатов выполнения планов
//
Процедура ВыгрузкаПлановПродаж() Экспорт
	
	РезультатПродаж = ПолучитьПланФактныеДанныеПоПлануПродаж();
	
	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_PlanOfSales" +Т_+ "Struct:ObjID,Name,Code,GoodsCat,PlanSum,PlanAmt,PlanSumF,PlanAmtF");
	
	ВыборкаТипов = РезультатПродаж.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТипов.Следующий() Цикл
		
		КодПл = ВыборкаТипов.ТипПлана.Код;
		
		Наим = кпкАгентПлюс.УбратьНечитаемыеСимволы(ВыборкаТипов.ТипПлана.Наименование);			
		
		ВыборкаГрупп = ВыборкаТипов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаГрупп.Следующий() Цикл 
			
			Если ВыборкаГрупп.НоменклатурнаяГруппа = Null Тогда Продолжить; КонецЕсли;
			
			Кат	= ПреобразоватьКодСправочника(ВыборкаГрупп.НоменклатурнаяГруппа);
			
			Если Кат = 0 Тогда Продолжить; КонецЕсли;
			
			Идент = ВыборкаГрупп.НоменклатурнаяГруппа.УникальныйИдентификатор();
			
			СуммаФакт 	   = кпкАгентПлюс.ФорматироватьЧисло(Окр(ВыборкаГрупп.СуммаФакт, 0, РежимОкругления.Окр15как20));			
			КоличествоФакт = кпкАгентПлюс.ФорматироватьЧисло(Окр(ВыборкаГрупп.КоличествоФакт, 0, РежимОкругления.Окр15как20));
			
			СуммаПлан 	   = кпкАгентПлюс.ФорматироватьЧисло(Окр(ВыборкаГрупп.СуммаПлан, 0, РежимОкругления.Окр15как20));
			КоличествоПлан = кпкАгентПлюс.ФорматироватьЧисло(Окр(ВыборкаГрупп.КоличествоПлан, 0, РежимОкругления.Окр15как20));
			
			Текст.ДобавитьСтроку(Строка(Идент) + Т_+ Наим + Т_+ Строка(КодПл) + Т_+ Кат + Т_+ Строка(СуммаПлан) + Т_+ Строка(КоличествоПлан) +Т_+ Строка(СуммаФакт) +Т_+ Строка(КоличествоФакт));
		КонецЦикла;
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_PlanOfSales");
	
КонецПроцедуры //ВыгрузкаПлановПродаж()

// Функция СократитьНаименование() формирует сокращенную строку 
// путем скоращения некоторых слов. Слова при необходимости могут
// быть дополнены программистом
//
Функция СократитьНаименование(ТекНаим) Экспорт
	
	Наим = СокрЛП(ТекНаим);
	
	Наим = Лев(Наим, 1) + НРег(Сред(Наим, 2)); // понижаем регистр кроме первой буквы
	Наим = СтрЗаменить(Наим,"   "," ");		   // для сокращения наименования заменяем тройной пробел на одинарный
	Наим = СтрЗаменить(Наим,"  "," ");		   // ... двойной пробел на одинарный
	Наим = СтрЗаменить(Наим,". ",".");		   // ... ". " на "."
	Наим = СтрЗаменить(Наим,"""","'");		   // заменяем двойную кавычку на одинарную
	                                        
	Если СтрДлина(Наим) <= 20 Тогда
		Возврат Наим;
	КонецЕсли;
	
	Наим = СтрЗаменить(Наим,"для ","д/");
	Наим = СтрЗаменить(Наим," г ","г ");
	Наим = СтрЗаменить(Наим," г.","г.");
	Наим = СтрЗаменить(Наим," мл","мл");
	Наим = СтрЗаменить(Наим,", ",",");
	Наим = СтрЗаменить(Наим," (","(");
	Наим = СтрЗаменить(Наим,") ",")");
	Наим = СтрЗаменить(Наим," )",")");
	Наим = СтрЗаменить(Наим,"( ","(");
	Наим = СтрЗаменить(Наим," -","-");
	Наим = СтрЗаменить(Наим,"- ","-");
	Наим = СтрЗаменить(Наим," +","+");
	Наим = СтрЗаменить(Наим,"+ ","+");
	Наим = СтрЗаменить(Наим," шт ","шт ");
	Наим = СтрЗаменить(Наим," шт.","шт.");
	Наим = СтрЗаменить(Наим," гр ","г ");
	Наим = СтрЗаменить(Наим," /","/");
	Наим = СтрЗаменить(Наим,"/ ","/");
	Наим = СтрЗаменить(Наим,".,",".");
	Наим = СтрЗаменить(Наим,",.",".");
	Наим = СтрЗаменить(Наим," кг","кг");
	
	Возврат Наим;
	
КонецФункции // СократитьНаименование()

// Процедура ИнициализацияСлужебныхДанных
//
// Параметры:
//	Нет
//
// Описание:
//	Процедура инициализирует системеные константы. 
//  Внимание! Без лишней необходимости не следует изменять.
// 
Процедура ИнициализацияСлужебныхДанных() Экспорт
	
	//идентификаторы констант в БД Агент+
	//НЕ ИЗМЕНЯТЬ!!!
	
	GUID_SYSTEM_AGENTNAME	    = "FB55C4DC-885C-4D39-AB62-44FBAE50F1AC";
	GUID_SYSTEM_AGENTID		    = "A2F737BD-37CD-4F08-910B-9E2A130226D4";
	GUID_SYSTEM_FIRMID		    = "30AC90F6-99D2-439F-8AA2-007FF391DEA4";
	GUID_SYSTEM_MSTOREID	    = "2AEBEC0B-20B0-46f1-99D9-20661AEDA77A";
	GUID_SYSTEM_SHDATEBG 	    = "3935BEAE-9F40-4BA5-BA9E-03F860CC1750";
	GUID_SYSTEM_SHDATEND	    = "3343E400-1577-4DDE-9A82-BF1E53267FD6";
	GUID_SYSTEM_TIMEUNLD	    = "5A9D4A4C-CC7A-49F8-8C4E-6E23B964CACB";
	GUID_SYSTEM_DISCOUNTS	    = "AA82CC96-4485-4351-98D8-BCF2EFFB5F7D";
	GUID_SYSTEM_AMNTPRECISION   = "0980573E-CA63-4C1D-941D-09218063BF40";
	GUID_SYSTEM_MONEYNAME	    = "28C8F78E-61BB-4F8A-AA5E-E242B680067B";
	GUID_SYSTEM_FLAGS 		    = "A44AFE59-9F8B-47D8-BB94-4CB447170EF2";
	GUID_SYSTEM_PRICECOUNT	    = "8166BF59-8507-45B3-AF14-A3D111DBC61C";
	GUID_SYSTEM_VATRATE		    = "EE7AE207-9BE2-4494-85C8-433DB1AEA735";
	GUID_SYSTEM_GOODS_PICT_PATH = "FA6B30C2-1D7F-46EC-8EAD-0979D2965747";
	
	//(08.06.07) новая константа, после выгрузки в КПК переводит Агент+ в режим работы с единицами измерения
	GUID_SYSTEM_USE_UNITS	  	= "E2D6F319-4907-4CA8-8B6C-85D67F106861";
	
	GUID_SYSTEM_PHOTOS_PATH   	= "E40BC509-0B89-4AF6-A441-A108774C9482";
	
	// { Арт 2007-12-26                                                   
	// Константа, в которой содержится последний созданный трек в КПК	
	GUID_SYSTEM_GPS_TRACK 		= "EDB9AF7D-5B7C-4242-B061-FE396394BA2F"; 
	//Идентификатор для реквизитов "Категория" товаров прайс листе
	GUID_ATTRTYP_GOODSCAT		= "3B4E9F70-9F00-4C15-99B8-81E1DF95DC2C";
	// Арт 2007-12-26 }
	
	// { Арт 2008-05-23 
	GUID_SYSTEM_WEIGHT_UNIT     = "CF527139-1867-4A66-8C44-ABD2D9AE202C";
    GUID_SYSTEM_DSCNTRECISION 	= "2841B875-1306-4DE7-BE2D-1954747BC7DA";
	GUID_SYSTEM_SERTIFLIST    	= "9A22731B-5018-4E8F-8F71-453F90673274";
	GUID_SYSTEM_DSALES_MINSUM 	= "0ADCB1CA-D2DF-40A3-BC64-1789852E9B5A";
	GUID_SYSTEM_DSALES_MINAMT 	= "92F4230A-A791-4918-82F1-A6955A5C26AE";    
	//  Арт 2008-05-23 } 	
	
	// { Арт 2008-11-01 
	GUID_SYSTEM_DSUMLIMIT		= "D697BC31-084A-4FF7-912C-E8DBF6AE01A8"; 
	GUID_SYSTEM_DOCMERCHSEL		= "19AB0B3D-EE81-461B-91E8-C47C5E76E324"; 	
	//  Арт 2008-11-01 }
	
	//{ Арт 2008-12-09 
    GUID_SYSTEM_DOCFLAGS    	= "93EC37AA-EFDB-40E2-A051-C943D943FF93";
	GUID_SYSTEM_PRICEFLAGS      = "5EB0785D-81BA-49E3-A4BC-3CC635AE1EF6";
	GUID_SYSTEM_SAVESCRIPT      = "44E13801-92B7-412D-B6DE-B24BEA890B12";
	GUID_SYSTEM_UDATA_PATH      = "7C3AD3D6-93D9-4C98-B82E-A39DAF16A905";
	GUID_SYSTEM_SELROUTESONLY   = "BC379782-2F6C-4013-8782-B7D0CDDF78BA";
	GUID_SYSTEM_ROUTEDAYS_BACK  = "9868068C-59C8-4759-8C12-F31A691AB042";
	GUID_SYSTEM_ROUTEDAYS_FWD   = "4FFC95CF-2F7B-482D-9F58-DF23C74B68CD";
	GUID_SYSTEM_PRLFLAGS	    = "5EB0785D-81BA-49E3-A4BC-3CC635AE1EF6";
	// Арт 2008-12-09 } 
	
	GUID_SYSTEM_USE_AGREEMENTS  = "289F00A5-542A-436E-BE3D-AAF894581BDE";
	GUID_SYSTEM_AUTHOR_TEL      = "2D9C4ED7-6CC4-4145-8721-F344BC24E1FA";
	
	// { Арт 2009-08-18 
	GUID_SYSTEM_CLIENTINFOSCRIPT  = "345F6B09-2789-48CE-872C-3285E960CE0C";  // название скрипта, который будут вызываться при попытке выбора клиента в документе  
	GUID_SYSTEM_TPOINTINFOSCRIPT  = "7EF14974-66DD-4FE5-8B1C-18C3934F2CD6";  // название скрипта, который будут вызываться при попытке выбора торг. точки в документе 
    GUID_SYSTEM_DOCINFOSCRIPT     = "B9548427-A68B-40BB-91DF-0BC7DEE652E4";  // название скрипта, который будут вызываться в журнале документов при позиционировании на док-те.      
	GUID_SYSTEM_RATINGNAME        = "8C6E97FF-B7F1-475B-8E5A-6B34F972316C";	 // название колонки "Рейтинг"
	// Арт 2009-08-18 }
	
	GUID_SYSTEM_PRICECODES_LIST   = "C4A4187F-7445-461F-99EE-92E9299BE03A"; // константа для указания коды типов цен, код которых больше 32 
	GUID_SYSTEM_EXCHFLAGS 		  = "994F5CCB-A675-443C-BEA1-A99E3FF827AD";  // константа, влияющая на настройки обмена данными в КПК
		
	//идентификаторы предопределенных типов реквизитов для документов
	GUID_ATTRTYP_COMMENT	= "A1F1127E-BB91-41DE-87F5-4A00E5C4C409"; //Комментарий к документу
	GUID_ATTRTYP_PAYMNTTYPE	= "60277704-5AB1-4FC5-BF78-9B032723B8B7"; //Вид оплаты документа
	GUID_ATTRTYP_PRICETYPE	= "08449B6B-75CA-464A-8D29-42EE6E94E08F"; //Тип цен
	GUID_ATTRTYP_QUERY		= "1CABA333-1D1D-4F41-86C8-B175E9CEB6B3"; //Запросы из КПК при мобильном доступе к ЦБД
	
	//рацсветки клиентов в окне выбора клиентов
	GUID_ENUM_CLIENTS_COLORS	= "51DA11C0-6B6A-4EE7-BB9E-CB9E5515B536";
	//предупреждения для клиентов в окне выбора клиентов
	GUID_ENUM_CLIENTS_WARNINGS  = "3C1B73C4-7956-4CA2-84C0-118E20847BB6";
	
	//идентификаторы перечислений, добавляются/задаются программистом
    MY_GUID_ENUM_TPTYPE   = "5BB29DAF-6769-423A-AEAF-AEFE111736A0"; //типы торговых точек
	MY_GUID_ENUM_VISIT	  = "FC233E4A-DA80-4481-B280-76CE1855CA9C"; //виды результатов посещений
	MY_GUID_ENUM_STRANA	  = "2BA57449-AECB-4C00-BDA0-E08120251AC7"; // перечисление "Страны-производители"
	MY_GUID_ENUM_DLVTYPE  = "1124A28B-63EE-4F01-9AFA-37594D06CCCB"; //виды доставки
	
	//{ Арт 2008-12-09 
	GUID_ENUM_ACDISCOUNTS = "FBC2150D-712C-4DAC-B8E5-C3BDEBD03F79"; // описания сводов накопительных скидок
	//  Арт 2008-12-09 }
	
	GUID_ENUM_DOC_CAT			   = "03DE83E1-5F17-453A-AD25-AEDFE8CE4D08"; 	// категории документов
	GUID_ENUM_DOC_CAT_COLORS	   = "AEFBC3B3-E5A8-4F14-BBBD-6F0D9579D518";	// цвета категорий документов
	//{ Арт 2008-02-19 
	GUID_ENUM_PLAN_OF_SALES_TYPES  ="A1E96461-4933-41EA-86DB-5EBC60B8287B";	    // план продаж агента
 	//  Арт 2008-02-19 }
	
	//{ Арт 2009-08-18 
	GUID_ENUM_CLIENTS_TPOINTS_CAT = "61D57F23-197E-465D-BE1D-5213E4BF6390";  // категории клиентов (торг.точек)
	GUID_ENUM_RATINGCAT           = "5B01A7CD-C621-4D7D-A26D-8EDA16AB42BA";  // рейтинги товаров            	
	//  Арт 2009-08-18 } 	
	
	GUID_SYSTEM_GPSTRACK		  = "02FFDF61-FDE0-494A-89DE-4423A653EF2E";  // флаг, определяющий настройки ведения GPS-трекинга
	GUID_SYSTEM_PLANBYGOODSEL     = "0C4172D9-FE75-4646-94EF-B91EC2F8AB6A";  // вариант расчета процента выполнения плана продаж
	GUID_SYSTEM_PRICE_TRANSCYCLE  = "6D05A8AB-4C38-4624-AC4B-510A7EC57EF7";       	
	GUID_SYSTEM_DIVPERIOD 		  = "F64CC9F6-115F-4A54-BE91-64BE761553BA";  // дата и время, начиная с которого нужно фиксировать остатки по регистру товаров в разрезе декад месяца
    GUID_SYSTEM_MSG_PATH          = "A5A1512E-5970-47EB-9BEE-164952F6D9B3";  // путь, куда будут сохраняться html-файлы, распакованные из Messages.zip
	                                 
	GUID_SYSTEM_UNITSCOUNT        = "9B736675-EA66-4BE9-A3A8-2DC3F8DBD491";  // количество выгружаемых единиц измерения
	GUID_SYSTEM_ROUTE_FLAGS       = "7A0AF9CF-BF4C-4BAD-880D-822EA007CAD5";
	
	//идентификаторы скриптов представления элементов справочников справочников
	GUID_SCRIPT_CLIENTINFO  	  = "CC56ADA6-3584-40A1-A83E-B5B1F5FA8648";
	GUID_SCRIPT_TPOINTINFO  	  = "5BD7E0A7-4B93-4962-8A62-1DF6F40FB56C";
	
	// идентификатор перечисления свойства товаров 
	GUID_ATTRTYP_GOODSPROP  	  = "4FD62396-E3F5-409F-A84E-A390D6876766";    	
		
КонецПроцедуры //ИнициализацияСлужебныхДанных()

// Процедура НастроитьАвтообменССервером
//
// Параметры:
//	Нет
//
// Описание:
//	Настраивает автообмен с Агент Плюс СОД согасно выбранным настройка на форме обработки
// 
Процедура НастроитьАвтообменССервером() Экспорт
	
	Если флАвтоОбмен Тогда
		ПапкаСервера = СокрЛП(Константы.кпкАПСПапкаОбмена.Получить());
		Если Не ЗначениеЗаполнено(ПапкаСервера) Тогда
			ТекстСообщения = "Не указана константа ""Папка обмена"" для способа обмена ""Агент Плюс СОД"". Автообмен не будет производиться!";
			ОповеститьОСобытии(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		#Если Не Клиент Тогда
			КПКОбъектServer.SetExchangeDir(ПапкаСервера);
			КПКОбъектServer.EnableServer();
		#Иначе		
			КПКОбъект.АпсУстПапкуОбмена(ПапкаСервера);
			КпкОбъект.АпсВключитьСервер();			
		#КонецЕсли
		
	Иначе
		#Если Не Клиент Тогда
			КПКОбъектServer.DisableServer();			            
		#Иначе
			КпкОбъект.АпсОтключитьСервер();						
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры //НастроитьАвтообменССервером
    
Процедура ЗаписатьВПротоколЗагрузкуЭлемСпр(Спр, ЭтоНовый)
	
	Наим 		  = Спр.Наименование;
	Представление = Спр.Ссылка.ПолучитьОбъект().Метаданные().Представление();
	ИмяСпр 	      = Спр.Ссылка.ПолучитьОбъект().Метаданные().Имя;
	
	Если ЭтоНовый Тогда
		ТекстСообщения = "Записан новый элемент справочника: """ + Представление + """ (""" + Наим + """)";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, Спр.Ссылка);
	Иначе
		ТекстСообщения = "Обновлен элемент справочника: """ + Представление + """ (""" + Наим + """)";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, Спр.Ссылка);
	КонецЕсли;  
	
	ИдСпр = Строка(Спр.Ссылка.УникальныйИдентификатор());
	Если СписЗагруженныхОбъектовСпр.НайтиПоЗначению(ИдСпр) = Неопределено Тогда
    	СписЗагруженныхОбъектовСпр.Добавить(ИдСпр, ИмяСпр);
	КонецЕсли;                                          	
	
КонецПроцедуры //ЗаписатьВПротоколЗагрузкуЭлемСпр

Функция ПолучитьТекстЗапросаПоНатуральнымСкидкам()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	РегСкидкиНоменклатуры.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(РегСкидкиНоменклатуры.ПроцентСкидкиНаценки) КАК Процент,
	|	РегСкидкиНоменклатуры.ПолучательСкидки КАК Получатель,
	|	РегСкидкиНоменклатуры.Регистратор КАК Регистратор,
	|	РегСкидкиНоменклатуры.Условие КАК Условие
	|ИЗ
	|	РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(&Дата, ) КАК РегСкидкиНоменклатуры
	|ГДЕ
	|	РегСкидкиНоменклатуры.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И (РегСкидкиНоменклатуры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ РегСкидкиНоменклатуры.ДатаОкончания >= &Дата)
	|	И РегСкидкиНоменклатуры.ЗначениеУсловия = 0
	|	И ((НЕ ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ПолучательСкидки КАК Справочник.Контрагенты) ЕСТЬ NULL )
	|			ИЛИ (НЕ ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ПолучательСкидки КАК Справочник.ДоговорыКонтрагентов) ЕСТЬ NULL )
	|			ИЛИ РегСкидкиНоменклатуры.ПолучательСкидки = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ РегСкидкиНоменклатуры.ПолучательСкидки = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|	И РегСкидкиНоменклатуры.Условие = &ЗначУсл
	|    И РегСкидкиНоменклатуры.ПроцентСкидкиНаценки <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РегСкидкиНоменклатуры.Номенклатура,
	|	РегСкидкиНоменклатуры.ПолучательСкидки,
	|	РегСкидкиНоменклатуры.Регистратор,
	|	РегСкидкиНоменклатуры.Условие
	|
	|УПОРЯДОЧИТЬ ПО
	|	Получатель Убыв";
	
	Возврат ТекстЗапроса;
	
КонецФункции  //ПолучитьТекстЗапросаПоНатуральнымСкидкам()

Функция ПолучитьТекстЗапросаПоГруппамСкидок()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	МАКСИМУМ(РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки) КАК Процент,
	|	РегСкидкиПоЦеновымГруппам.ПолучательСкидки КАК Получатель,
	|	РегСкидкиПоЦеновымГруппам.Регистратор КАК Регистратор,
	|	РегСкидкиПоЦеновымГруппам.Условие КАК Условие
	|ИЗ
	|	РегистрСведений.СкидкиНаценкиПоЦеновымГруппам.СрезПоследних(&Дата, ) КАК РегСкидкиПоЦеновымГруппам
	|ГДЕ
	|	(РегСкидкиПоЦеновымГруппам.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ РегСкидкиПоЦеновымГруппам.ДатаОкончания >= &Дата)
	|	И РегСкидкиПоЦеновымГруппам.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = 0
	|	И ((НЕ ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ПолучательСкидки КАК Справочник.Контрагенты) ЕСТЬ NULL )
	|			ИЛИ (НЕ ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ПолучательСкидки КАК Справочник.ДоговорыКонтрагентов) ЕСТЬ NULL )
	|			ИЛИ РегСкидкиПоЦеновымГруппам.ПолучательСкидки = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ РегСкидкиПоЦеновымГруппам.ПолучательСкидки = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|	И РегСкидкиПоЦеновымГруппам.Условие = &ЗначУсл
	|    И РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа,
	|	РегСкидкиПоЦеновымГруппам.ПолучательСкидки,
	|	РегСкидкиПоЦеновымГруппам.Регистратор,
	|	РегСкидкиПоЦеновымГруппам.Условие
	|
	|УПОРЯДОЧИТЬ ПО
	|	Получатель Убыв,
	|	ЦеноваяГруппа Убыв";
	
	Возврат ТекстЗапроса;

КонецФункции //ПолучитьТекстЗапросаПОГруппамСкидок()

Процедура ДобавитьСтрокуПоСкидкеНоменклатуры(ТаблицаНом, Ном, Цена, Контр, Процент)
	
	НужныеСтроки = ТаблицаНом.НайтиСтроки(Новый Структура("Номенклатура, Контрагент", Ном, Контр));
	
	Если НужныеСтроки.Количество() = 0 Тогда			
		НоваяСтрока = ТаблицаНом.Добавить(); 
		НоваяСтрока.Номенклатура = Ном;
		НоваяСтрока.Контрагент   = Контр;
		НоваяСтрока.Процент 	 = Процент;
		НоваяСтрока.Цена 		 = Цена;
	Иначе
		Для Каждого НужСтрока Из НужныеСтроки Цикл			
			НужСтрока.Процент = Процент;					
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры //ДобавитьСтрокуПоСкидкеНоменклатуры()

Процедура ВыгрузитьСкидкиДляНоменклатуры(Выб, ТаблицаНом, Контр, Цена, ПоГруппе)
	
	//Если скидки для групп товаров
	Если ПоГруппе Тогда
		ВыборкаНом = Справочники.Номенклатура.Выбрать(,, Новый Структура("ЦеноваяГруппа", Выб.ЦеноваяГруппа ),);
		Пока ВыборкаНом.Следующий() Цикл
			Если ВыборкаНом.ПометкаУдаления Тогда Продолжить КонецЕсли;	
			//
			ДобавитьСтрокуПоСкидкеНоменклатуры(ТаблицаНом, ВыборкаНом.Ссылка, Цена, Контр, Выб.Процент);
		КонецЦикла;
	Иначе		
		//Если для одной позиции
		Если Не Выб.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда		
			ДобавитьСтрокуПоСкидкеНоменклатуры(ТаблицаНом, Выб.Номенклатура, Цена, Контр, Выб.Процент);						
		Иначе //Если скидка для всей номенклатуры		
			ВыборкаНом = Справочники.Номенклатура.Выбрать();
			Пока ВыборкаНом.Следующий() Цикл
				Если ВыборкаНом.ПометкаУдаления или ВыборкаНом.ЭтоГруппа Тогда Продолжить КонецЕсли;						
				ДобавитьСтрокуПоСкидкеНоменклатуры(ТаблицаНом, ВыборкаНом.Ссылка, Цена, Контр, Выб.Процент);
			КонецЦикла;			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  //ВыгрузитьСкидкиДляНоменклатуры()

Процедура ВыгрузитьСкидкиДляКонтрагентов(Выб, ТаблицаНом, Цена, ПоГруппе)
	
	//Если скидка для всех контрагентов
	Если (Выб.Получатель = Справочники.Контрагенты.ПустаяСсылка()) или (Выб.Получатель = Справочники.ДоговорыКонтрагентов.ПустаяСсылка()) Тогда
		//Выгружаем скидки только для клиентов выбранного агента
		Для Каждого СтрокаКлиента Из сзКлиентыАгента Цикл		
			ИспПерсЦены = РегистрыСведений.кпкСведенияКонтрагента.Получить(Новый Структура("Объект", СтрокаКлиента.Значение)).ИспПерсЦены;
			Если ИспПерсЦены Тогда
				ВыгрузитьСкидкиДляНоменклатуры(Выб, ТаблицаНом, СтрокаКлиента.Значение, Цена, ПоГруппе);
			КонецЕсли;
		КонецЦикла;		
		//Если скидка для одного контрагента		
	Иначе
		//Проверяем, является ли клиент клиентом выбранного агента
		Если ТипЗнч(Выб.Получатель) = Тип("СправочникСсылка.Контрагенты") Тогда	
			Получатель = Выб.Получатель;
		Иначе
			Получатель = Выб.Получатель.Владелец;
		КонецЕсли;
		
		Если сзКлиентыАгента.НайтиПоЗначению(Получатель) <> Неопределено Тогда  
			ИспПерсЦены = РегистрыСведений.кпкСведенияКонтрагента.Получить(Новый Структура("Объект", Получатель)).ИспПерсЦены;
			Если ИспПерсЦены Тогда
				ВыгрузитьСкидкиДляНоменклатуры(Выб, ТаблицаНом, Получатель, Цена, ПоГруппе);			
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли; 
	
КонецПроцедуры //ВыгрузитьСкидкиДляКонтрагентов()
    
Функция ПолучитьМассивТоваровАгента(МассивТов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Номенклатура.Ссылка Как Ном
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Ссылка В(&МассивТов)
	|	И Номенклатура.Ссылка В ИЕРАРХИИ(&Ассортимент)");
	
	Запрос.УстановитьПараметр("МассивТов", МассивТов);
	Запрос.УстановитьПараметр("Ассортимент", сзАссортимент);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ.ВыгрузитьКолонку("Ном");
	
КонецФункции  //ПолучитьМассивТоваровАгента

// Процедура создает новый документ "РеализацияТоваровиУслуг", заполняя ее данными из документа "ЗаказаПокупателя"
// и связывает их посредством регистра сведений "кпкСсылкиДокументов"
//
// Добавлена 29.06.2007
//                                                                   
Процедура ВвестиРеализациюНаОснованииЗаявкиПоРегиструСсылок(ДокЗаявка)
	
	Если Метаданные.РегистрыСведений.Найти("кпкСсылкиДокументов") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Ищем среди подчиненных документов данной заявки реализацию
	ДокРеал = 0;
	СтРеал = Новый Структура;
	СтЗаявка = Новый Структура;
	СтЗаявка.Вставить("Сделка", ДокЗаявка);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Сведения.Документ КАК Док,
	|	Сведения.Ссылка КАК Заявка
	|ИЗ
	|	РегистрСведений.кпкСсылкиДокументов КАК Сведения
	|ГДЕ
	|	(Сведения.Ссылка = &Сделка) И (Сведения.Агент = &Агент)";
	
	Запрос.УстановитьПараметр("Агент", ВыбАгент);
	Запрос.УстановитьПараметр("Сделка", ДокЗаявка.Ссылка);
	Реализации = Запрос.Выполнить().Выбрать();

	Если Реализации.Следующий() Тогда
		ДокРеал = Реализации.Док.ПолучитьОбъект();
	КонецЕсли;
	
	Если ДокРеал <> 0 Тогда // Нашли документ, созданный на основании заявки
		Если НЕ флОбновлять Тогда
			Возврат;
		КонецЕсли;		
		ДокРеал.Товары.Очистить();
		ДокРеал.Услуги.Очистить();
		ДокРеал.Дата = ТекущаяДата();
	Иначе
		ДокРеал = Документы.РеализацияТоваровУслуг;  		
		Если Не ВыполнитьОперациюДляОбъекта(ДокРеал, "создание") Тогда 			
			ТекстСообщения = "Не удалось создать документ реализации на основании заявки: " + Строка(ДокЗаявка.Ссылка);
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат;			
		КонецЕсли;   		
		ДокРеал.Дата = ТекущаяДата();
	КонецЕсли;
	
	ДокРеал.Заполнить(ДокЗаявка.Ссылка);
	
	Если ИспТочек Тогда
		ДокРеал.кпкТорговаяТочка = ДокЗаявка.кпкТорговаяТочка;
	КонецЕсли;
	
	ДокРеал.Товары.Очистить();
	ДокРеал.Услуги.Очистить();
	
	ДокРеал.Товары.Загрузить(ДокЗаявка.Товары.Выгрузить());
	ДокРеал.Услуги.Загрузить(ДокЗаявка.Услуги.Выгрузить());
	
	Для Каждого СтрокаТаблицы Из ДокРеал.Товары Цикл		
		СтрокаТаблицы.ЗаказПокупателя 			   = ДокЗаявка.Ссылка;
		СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ДокРеал.Услуги Цикл		
		СтрокаТаблицы.ЗаказПокупателя 			   = ДокЗаявка.Ссылка;		
	КонецЦикла;
	
	Если ВыполнитьОперациюДляОбъекта(ДокРеал, "запись") Тогда 			
		ТекстСообщения = "На основании документа: " + Строка(ДокЗаявка.Ссылка) + " создан документ: " + Строка(ДокРеал);
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, ДокРеал.Ссылка);	
		
		ЗаписьВРегистрСсылок(ДокРеал, ДокЗаявка);
		
		Если флПроводить Тогда
			Если Не ВыполнитьОперациюДляОбъекта(ДокРеал, "проведение") Тогда 							
				ОповеститьОСобытии("Не удалось провести документ: " + Строка(ДокРеал), СтатусСообщения.Важное, Истина, ДокРеал);
				Возврат;			
			КонецЕсли;
		КонецЕсли;	
	Иначе
		ТекстСообщения = "Не удалось записать документ: " + Строка(ДокРеал) + ", созданного на основании документа: " + Строка(ДокЗаявка.Ссылка);
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина, ДокРеал.Ссылка);		
	КонецЕсли; 
	
КонецПроцедуры //ВвестиРеализациюНаОснованииЗаявкиПоРегиструСсылок()

// Процедура создает новый документ "РеализацияТоваровиУслуг",на основании документа "ЗаказаПокупателя",
// используя стандартный метод "Заполнить()"                                                            
//
// Добавлена 29.06.2007
//   
Процедура ВвестиРеализациюНаОснованииЗаявки(ДокЗаявка)
	
	// Ищем среди подчиненных документов данной заявки реализацию
	ДокРеал = 0;
	СтРеал = Новый Структура;
	СтЗаявка = Новый Структура;
	СтЗаявка.Вставить("Сделка", ДокЗаявка);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Сделка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Сделка.Ссылка = &Сделка";
	
	Запрос.УстановитьПараметр("Сделка", ДокЗаявка.Ссылка);
	Реализации = Запрос.Выполнить().Выбрать();

	Если Реализации.Следующий() Тогда
		ДокРеал = Реализации.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ДокРеал <> 0 Тогда // Нашли документ, созданный на основании заявки
		Если Не флОбновлять Тогда
			Возврат;
		КонецЕсли;		
		ДокРеал.Товары.Очистить();
		ДокРеал.Услуги.Очистить();
		ДокРеал.Дата = ТекущаяДата();
	Иначе    		
		ДокРеал = Документы.РеализацияТоваровУслуг;
		
		Если Не ВыполнитьОперациюДляОбъекта(ДокРеал, "создание") Тогда 			
			ТекстСообщения = "Не удалось создать новый документ ""Реализация товаров и услуг""!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат;			
		КонецЕсли;  		
		ДокРеал.Дата = ТекущаяДата();
	КонецЕсли;
	
	ДокРеал.Заполнить(ДокЗаявка.Ссылка);
	Если ИспТочек Тогда
		ДокРеал.кпкТорговаяТочка = ДокЗаявка.кпкТорговаяТочка;
	КонецЕсли;
	
	Если ВыполнитьОперациюДляОбъекта(ДокРеал, "запись") Тогда 			
		
		ТекстСообщения = "На основании документа: " + Строка(ДокЗаявка.Ссылка) + " создан документ: " + Строка(ДокРеал);
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, ДокРеал.Ссылка);	
		
		Если флПроводить Тогда
			
			Проводить = Истина;
			
			Если Не ЗначениеЗаполнено(ДокРеал.Контрагент) Тогда
				ОповеститьОСобытии("В документе " + Строка(ДокРеал) + " не указан контрагент. Документ не будет проведен!", СтатусСообщения.Важное, Истина, ДокРеал.Ссылка);
				Проводить = Ложь;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокРеал.ДоговорКонтрагента) Тогда
				ОповеститьОСобытии("В документе " + Строка(ДокРеал) + " не указан договор. Документ не будет проведен!", СтатусСообщения.Важное, Истина, ДокРеал.Ссылка);
				Проводить = Ложь;
			КонецЕсли;
			
			Если ДокРеал.СуммаДокумента = 0 Тогда
				ОповеститьОСобытии("Сумма документа " + Строка(ДокРеал) + " равна 0. Документ не будет проведен!", СтатусСообщения.Важное, Истина, ДокРеал.Ссылка);
				Проводить = Ложь;
			КонецЕсли;
			
			Если Проводить Тогда
				Если Не ВыполнитьОперациюДляОбъекта(ДокРеал, "проведение") Тогда 							
					ОповеститьОСобытии("Не удалось провести документ: " + Строка(ДокРеал), СтатусСообщения.Важное, Истина, ДокРеал);
					Возврат;			
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;	
	Иначе
		ТекстСообщения = "Не удалось записать документ: " + Строка(ДокРеал) + ", созданного на основании документа: " + Строка(ДокЗаявка.Ссылка);
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина, ДокРеал.Ссылка);		
	КонецЕсли;
	
КонецПроцедуры //ВвестиРеализациюНаОснованииЗаявки()
   
// Функция создает каталог временных файлов для фото, если его не существует
// а если каталог существует, то очищает его
//
Процедура ОчиститьПапкуВременныхФото()
	
	ПапкаВремФото = КаталогВременныхФайлов() + "Photos1C\";
	
	кпкАгентПлюс.ПроверитьСуществованиеКаталога(ПапкаВремФото, Ложь, Истина);
	
	НайденныеФайлы = НайтиФайлы(ПапкаВремФото, "*.*");	
	
	Если НайденныеФайлы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Состояние("Удаление временных файлов фото ...");
		#КонецЕсли  
		УдалитьФайлы(ПапкаВремФото, "*.*");
		#Если Клиент Тогда
		Состояние("");
		#КонецЕсли  
	КонецЕсли;
	
КонецПроцедуры //ОчиститьПапкуВременныхФото 
 
// Функция возвращает элемент справочника, найденного по коду
//  
Функция ПолучитьЭлементСправочникаПоКоду(СпрМенеджер, Код,  ИскатьПоВхождению = Ложь, Владелец = Неопределено)
	
	НайдЭлемент = СпрМенеджер.ПустаяСсылка();
	
	Если Строка(Код) <> "0" Тогда 		
		
		МетаданныеСпр = Метаданные.НайтиПоТипу(Тип(СпрМенеджер));		
		
		Если ИскатьПоВхождению Тогда	
			НужныйКод = Код;
			
			ТекстЗапроса = "ВЫБРАТЬ
			|	Спр.Ссылка
			|ИЗ
			|	Справочник." + МетаданныеСпр.Имя + " КАК Спр
			|ГДЕ
			|	Спр.Код ПОДОБНО ""%" + НужныйКод + "%""";
			
			Если Владелец <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + " И Спр.Владелец = &Владелец";
			КонецЕсли;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Владелец", Владелец);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				НайдЭлемент = Выборка.Ссылка;
			КонецЕсли;                		
		Иначе			
			ДлинаКода = МетаданныеСпр.ДлинаКода;						
			НужныйКод = Прав("0000000000000" + СокрЛП(Код), ДлинаКода);
			
			Префикс = СокрЛП(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить());
			
			НужныйКод = Префикс + Прав(НужныйКод, СтрДлина(НужныйКод)-СтрДлина(Префикс));
			
			Если Владелец = Неопределено Тогда
				НайдЭлемент = СпрМенеджер.НайтиПоКоду(НужныйКод);
			Иначе
				НайдЭлемент = СпрМенеджер.НайтиПоКоду(НужныйКод,,,Владелец);
			КонецЕсли;			
			
			Если НайдЭлемент = СпрМенеджер.ПустаяСсылка() Тогда		
				НужныйКод = Прав("0000000000000" + СокрЛП(Код), ДлинаКода);
				Если Владелец = Неопределено Тогда
					НайдЭлемент = СпрМенеджер.НайтиПоКоду(НужныйКод);
				Иначе
					НайдЭлемент = СпрМенеджер.НайтиПоКоду(НужныйКод,,,Владелец);
				КонецЕсли;			
			КонецЕсли;
			
		КонецЕсли;
		
		Если НайдЭлемент = СпрМенеджер.ПустаяСсылка() Тогда		
			ТекстСообщения = "Не удалось найти элемент справочника: " + """" + МетаданныеСпр.Представление() + """" + " с кодом: " + НужныйКод;
			ОповеститьОСобытии(ТекстСообщения);            	
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат НайдЭлемент;
	
КонецФункции  //ПолучитьЭлементСправочникаПоКоду()

// Функция возвращает ставку НДС оп переданному числовому значению ставки
//
Функция ПолучитьСтавкуНДСПоЗначению(ЗначНДС)
	
	ЗначНДС = Число(ЗначНДС);
	
	Если ЗначНДС = 20 Тогда
		Возврат Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли ЗначНДС = 10 Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;	
	ИначеЕсли ЗначНДС = 18 Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;	
	ИначеЕсли ЗначНДС = 0 Тогда
		Возврат Перечисления.СтавкиНДС.НДС0;
	КонецЕсли;
	
	ТекстСообщения = "Неизвестная ставка НДС: " + Строка(ЗначНДС) + "%. Будет проставлена ставка: ""Без НДС""!";
	ОповеститьОСобытии(ТекстСообщения);
	
	Возврат Перечисления.СтавкиНДС.БезНДС;
	
КонецФункции //ПолучитьСтавкуНДСПоЗначению()

// Функция получает значение задания по переданным параметрам
// Параметры:
// 		ТипЗадания   - тип задания, в зависимости от которого нужно получить значение				
//		СтрРезультат - строковое значение результата, которое нужно преобразовать, 
// 					   в зависимости от параметра ТипЗадания
//
Функция ВернутьНужноеЗначенияЗадания(ТипЗадания, СтрРезультат, ДокЗадание)
	 
	МассивДок = Новый Массив; 
	
	НужныйРезультат = "";
	Если ТипЗадания = 101 Тогда // Создать фотографию								
		СпрФото =  Справочники.кпкФотоКДокументам.Выбрать(,, Новый Структура("ИдОбъекта", СтрРезультат));		
		Пока СпрФото.Следующий() Цикл			
			НужныйРезультат = СпрФото.Ссылка;		
			// Нужно записать информацию о документе для справочника фотографий
			ОбъектФото = НужныйРезультат.ПолучитьОбъект();
			ОбъектФото.Док = ДокЗадание.Ссылка;
			Если Не ВыполнитьОперациюДляОбъекта(ОбъектФото, "запись") Тогда
				ТекстСообщения = "Не удалось записать элемент справочника ""Фото к документам""!";
				ОповеститьОСобытии(ТекстСообщения);					
			КонецЕсли;     		
		КонецЦикла;			
	ИначеЕсли ТипЗадания = 102 Тогда // Обмен данными
		НужныйРезультат = ?(СтрРезультат = "1", Истина, Ложь);			
	ИначеЕсли ТипЗадания = 201 Тогда		
		МассивДок.Добавить("ЗаказПокупателя");
	ИначеЕсли ТипЗадания = 202 Тогда
		МассивДок.Добавить("ПриходныйКассовыйОрдер");
		МассивДок.Добавить("РасходныйКассовыйОрдер");
	ИначеЕсли ТипЗадания = 203 Тогда
		МассивДок.Добавить("кпкМерчендайзинг");
	ИначеЕсли ТипЗадания = 204 Тогда
		МассивДок.Добавить("кпкПосещение");
	ИначеЕсли ТипЗадания = 205 Тогда
		МассивДок.Добавить("РеализацияТоваровУслуг");
	ИначеЕсли ТипЗадания = 207 Тогда
		МассивДок.Добавить("ПеремещениеТоваров");
	ИначеЕсли ТипЗадания = 208 Тогда
		МассивДок.Добавить("ВозвратТоваровОтПокупателя");
		МассивДок.Добавить("ПоступлениеТоваровУслуг");
	ИначеЕсли ТипЗадания = 209 Тогда
		МассивДок.Добавить("ОтчетОРозничныхПродажах");
	ИначеЕсли ТипЗадания = 210 Тогда
		МассивДок.Добавить("ИнвентаризацияТоваровНаСкладе");
	КонецЕсли;

	Если НужныйРезультат = "" Тогда
		Для Каждого ЭлМассива Из МассивДок Цикл
			ИдДок = Новый УникальныйИдентификатор(СокрЛП(СтрРезультат));
			Док = Документы[ЭлМассива].ПолучитьСсылку(ИдДок);
			Если Не Док.ПолучитьОбъект() = Неопределено Тогда			
				Док = Док.ПолучитьОбъект();
				Док.Разблокировать();
				НужныйРезультат = Док.Ссылка; 		
				Прервать;
			КонецЕсли; 			
		КонецЦикла;
	КонецЕсли;
	
	Возврат НужныйРезультат;
		
КонецФункции //ВернутьНужноеЗначенияЗадания()

Процедура ОбновитьДоступныеУчетныеЗаписи()

	мСтруктураДоступныхУчетныхЗаписей = УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписи(ТекПользователь);
	
	мДоступныеУчетныеЗаписи = мСтруктураДоступныхУчетныхЗаписей.Запись.Скопировать();
	
КонецПроцедуры //ОбновитьДоступныеУчетныеЗаписи()

Процедура ЗаполнитьТаблицуСообщениями1СКлиента()
	
	ТекстОшибок = "";
	
	УчетнаяЗапись = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяУчетнаяЗапись");
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда			
		
		Если мДоступныеУчетныеЗаписи.Количество() = 0 Тогда
			#Если Клиент Тогда
			Предупреждение("У вас нет ни одной доступной учетной записи для отправки писем из встроенного почтового клиента!", 60);			
			#КонецЕсли
			Возврат;
		Иначе
			УчетнаяЗапись = мДоступныеУчетныеЗаписи[0].Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивУчетныхЗаписей = Новый Массив();
	МассивУчетныхЗаписей.Добавить(УчетнаяЗапись); 		
	
	Попытка		
		УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(Неопределено, ТекПользователь, МассивУчетныхЗаписей, , Ложь, Истина, Ложь, ТекстОшибок);		
	Исключение
		// проблема при получении писем
		Если ТекстОшибок = "" Тогда
			ТекстОшибок = ОписаниеОшибки();	
		КонецЕсли;  		
	КонецПопытки;
	
	Если НЕ ПустаяСтрока(ТекстОшибок) Тогда
		ТекстСообщения = "Ошибка при получении почтовых сообщений: " + ТекстОшибок;
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Ложь);
	КонецЕсли;			
	
	// проверяем все непрочитанные письма для учетной записи
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВложенияЭлектронныхПисем.ИмяФайла,
	|	ВложенияЭлектронныхПисем.Хранилище,
	|	ЭлектронноеПисьмо.ДатаОтправления КАК ДатаОтправления,
	|	ЭлектронноеПисьмо.Ссылка	
	|ИЗ
	|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	|		ПО (ЭлектронноеПисьмо.Ссылка = ВложенияЭлектронныхПисем.Объект)
	|			И (ЭлектронноеПисьмо.НеРассмотрено = ИСТИНА)
	|			И (ЭлектронноеПисьмо.СтатусПисьма = &Входящее)
	|ГДЕ
	|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма = """"
	|	И ПОДСТРОКА(ЭлектронноеПисьмо.Тема, 1, 9) = &НазваниеТемы
	|	И (ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО &ИмяФайлаXML
	|			ИЛИ ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО &ИмяФайлаZip)
	|	И ЭлектронноеПисьмо.НеРассмотрено = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОтправления УБЫВ");	

	Запрос.УстановитьПараметр("ИмяФайлаXML",  "To1C.xml");	
	Запрос.УстановитьПараметр("ИмяФайлаZip",  "To1C.zip");	
	Запрос.УстановитьПараметр("НазваниеТемы", "AgentPlus");
	Запрос.УстановитьПараметр("Входящее", 	  Перечисления.СтатусыПисем.Полученное);
	
	ТаблицаФайлов = Запрос.Выполнить().Выгрузить();
	
	ТабЭлектроннаяПочта.Очистить();
	
	Для Каждого ФайлВложения Из ТаблицаФайлов Цикл
		
		Сообщение = ФайлВложения.Ссылка;  		
		Тема 	  = Сообщение.Тема;
						
		ИдАгента = кпкАгентПлюс.АППочтаПолучитьКодАгента(Тема);
		Если Не ЗначениеЗаполнено(ИдАгента) тогда
			Продолжить;
		КонецЕсли;
		
		AgentID = Новый УникальныйИдентификатор(СокрЛП(ИдАгента));
		ТекАгент = Справочники.ФизическиеЛица.ПолучитьСсылку(AgentID);
		
		Если ТекАгент.ПолучитьОбъект() = Неопределено Тогда
			Продолжить;		
		КонецЕсли;
		
		НовСтр 			    = ТабЭлектроннаяПочта.Добавить();
		НовСтр.Пометка 	    = Ложь;
		НовСтр.Агент   	    = ТекАгент;				
		НовСтр.Пометка 	    = Истина;
		НовСтр.ДатаОтправки = Сообщение.ДатаОтправления;		
		НовСтр.Отправитель  = Сообщение.ОтправительИмя;		
		НовСтр.Тема		    = Тема; 
		
	КонецЦикла; 	
		
КонецПроцедуры //ЗаполнитьТаблицуСообщениями1СКлиента()         

// Процедура ОбновитьТаблицуПочты
//
// Параметры:
//	Нет
//
// Описание:
//	Процедура производит обновление табличной части для почты на форме обработки
//
Процедура ОбновитьТаблицуПочты() Экспорт
	
	ИспКлиента1С = Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить();
	
	Если ИспКлиента1С Тогда
		
		ОбновитьДоступныеУчетныеЗаписи();
		
		ЗаполнитьТаблицуСообщениями1СКлиента();
		
	Иначе
		
		#Если Клиент Тогда
		ТабЭлектроннаяПочта.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Объект КАК Агент ИЗ РегистрСведений.кпкСведенияАгента УПОРЯДОЧИТЬ ПО Объект";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ВыбАгент = Выборка.Агент;
			ПриИзмененииАгента(ВыбАгент);
			
			Если ПустаяСтрока(ПочтовыйЯщик) Тогда
				Продолжить;
			КонецЕсли;
			
			НовСтр = ТабЭлектроннаяПочта.Добавить();
			НовСтр.Пометка = Ложь;
			НовСтр.Агент   = ВыбАгент;
			
			Почта = Новый Почта;
			Почта.Подключиться(ПочтовыйЯщик);
			Сообщения = Почта.Выбрать();
			
			Для Каждого Сообщение Из Сообщения Цикл
				
				ПочтаВремя  = Сообщение.ДатаПолучения;
				Тема 		= Сообщение.Тема;
				Отправитель	= Сообщение.Отправитель;
				
				Если Лев(Тема,9)<>"AgentPlus" Тогда
					Продолжить;
				КонецЕсли;
				
				ИдАгента = кпкАгентПлюс.АППочтаПолучитьКодАгента(Тема);
				Если Не ЗначениеЗаполнено(ИдАгента) тогда
					Продолжить;
				КонецЕсли;
				
				Если ИдАгента <> СокрЛП(ВыбАгент.УникальныйИдентификатор()) Тогда
					Продолжить;
				КонецЕсли;
				
				НовСтр.Пометка 		= Истина;
				НовСтр.ДатаОтправки	= ПочтаВремя;
				НовСтр.Отправитель 	= Отправитель;
				НовСтр.Тема			= Тема;
			КонецЦикла;
			
			Почта.Отключиться();
			
		КонецЦикла;
		
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры //ОбновитьТаблицуПочты()

Функция ПолучитьКодТипаЦены(ПарТипЦены, ОбъектМетаданных, Объект = Неопределено)  	
	
	КодТипаЦены = "";
	
	Если Не ПарТипЦены = Неопределено Тогда
		
		Если Не ПарТипЦены.Пустая() Тогда 
			
			Если ТипЗнч(ПарТипЦены) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
				ТипЦены = ПарТипЦены.ТипЦеныНоменклатуры;
			Иначе
				ТипЦены = ПарТипЦены;
			КонецЕсли;
			
			НайденнаяСтрока = тзКатегорииЦен.Найти(ТипЦены, "ТипыЦен");
			
			Если Не НайденнаяСтрока = Неопределено Тогда  
				
				КодТипаЦены = НайденнаяСтрока.Код;		
				
			Иначе
				
				СтОтбор = Новый Структура("Объект", ВыбАгент);
				
				ДоступностьТиповЦен = РегистрыСведений.кпкСведенияАгента.Получить(СтОтбор).ДоступностьТиповЦен;
				
				Если СписНеНайденныхТиповЦен.НайтиПоЗначению(ТипЦены) = Неопределено Тогда
					
					ТипОбъекта = Строка(ОбъектМетаданных);
					
					Если Найти(ТипОбъекта, "Регистр") = 0 Тогда 					
						ИмяОбъекта = ОбъектМетаданных.Метаданные().Имя;
						Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
							ТипОбъекта = "Справочник";
						ИначеЕсли Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда							
							ТипОбъекта = "Документ";					
						КонецЕсли;
					КонецЕсли;
					
					Если Найти(ТипОбъекта, "Справочник")>0 Тогда    
						ВидОбъекта = ОбъектМетаданных.Метаданные().Синоним;
						СтрТипОбъекта = "элементе справочника """ + ВидОбъекта + """: " + Строка(ОбъектМетаданных);
					ИначеЕсли Найти(ТипОбъекта, "Документ")>0 Тогда
						ВидОбъекта = ОбъектМетаданных.Метаданные().Синоним;
						СтрТипОбъекта = "документе: " + Строка(ОбъектМетаданных);  
					ИначеЕсли Найти(ТипОбъекта, "Регистр")>0 Тогда 						
						ВидОбъекта = РегистрыСведений.кпкСведенияКонтрагента.СоздатьНаборЗаписей().Метаданные();						
						СтрТипОбъекта = "записи регистра сведений """ + ВидОбъекта + """ для объекта: """ + Строка(Объект) + """";  
					КонецЕсли;
										
					ТекстОкончание = "Используется в " + СтрТипОбъекта;
					
					Если ДоступностьТиповЦен = Перечисления.кпкДоступностьТиповЦен.ТипыЦенИзСписка Тогда
						ТекстНачало = "Не найден тип цены """ + ТипЦены + """ в списке выгружаемых типов цен для агента: " + ВыбАгент + " в регистре сведений ""Сведения агента""!";						
					Иначе
						ТекстНачало = "Не найден тип цены """ + ТипЦены + """ в списке выгружаемых типов цен на форме констант """ + лИмяФормыКонстант + """!";						
					КонецЕсли;
					
					ОповеститьОСобытии(ТекстНачало + Символы.ПС + ТекстОкончание, СтатусСообщения.Внимание, Истина, ОбъектМетаданных);
					
				КонецЕсли;
				
				СписНеНайденныхТиповЦен.Добавить(ТипЦены);
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;		
	
	Возврат Строка(КодТипаЦены);  
	
КонецФункции //ПолучитьКодТипаЦены()

Функция СформироватьСтрокуСКодамиТиповЦен(ТабЦен, Объект)
	
	СтрСписокТиповЦен = "";
	
	Для Каждого СтрокаТаб Из ТабЦен Цикл
		НайденнаяСтрока = тзКатегорииЦен.Найти(СтрокаТаб.ТипЦены, "ТипыЦен");
		Если Не НайденнаяСтрока = Неопределено Тогда 		
			СтрСписокТиповЦен = СтрСписокТиповЦен + Строка(ПолучитьКодТипаЦены(СтрокаТаб.ТипЦены, Объект)) + ",";			
		КонецЕсли;		
	КонецЦикла;
		
    СтрСписокТиповЦен = Лев(СтрСписокТиповЦен, СтрДлина(СтрСписокТиповЦен) - 1);

	Возврат СтрСписокТиповЦен;
	
КонецФункции
  
// Процедура заполняет таблицу Агент Плюс СОД
//
Процедура ЗаполнитьТаблицуАПС() Экспорт
	
	ТабАПСервер.Очистить();
	
	#Если Не Клиент Тогда
		ПапкаОбмена = КПКОбъектServer.GetExchangeDir();			
	#Иначе
		ПапкаОбмена = КПКОбъект.АпсПапкаОбмена();			
	#КонецЕсли
	
	Если Не ЗначениеЗаполнено(ПапкаОбмена) Тогда
	    ПапкаОбмена = СокрЛП(Константы.кпкАпсПапкаОбмена.Получить());
		Если Не ЗначениеЗаполнено(ПапкаОбмена) Тогда
		    ТекстСообщения = "Не установлено значение константы ""Папка обмена"" для Агент Плюс СОД! Получение данных от агента невозможно!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Ложь);
			Возврат;
		Иначе
			#Если Не Клиент Тогда
				КПКОбъектServer.SetExchangeDir(ПапкаОбмена);				
			#Иначе
				КПКОбъект.АпсУстПапкуОбмена(ПапкаОбмена);												
			#КонецЕсли   			
		КонецЕсли;
	КонецЕсли;
	
	Спис = Новый СписокЗначений;
	
	ГотовоАгентов = 0;
	
	#Если Не Клиент Тогда
		КолКПК = КПКОбъектServer.GetPPCCount();				
	#Иначе
		КолКПК = КПКОбъект.АпсПолучитьКоличествоКПК();				
	#КонецЕсли   
	
	СчетчикЦикла = 0;
	Для Поз = 0 По КолКПК - 1 Цикл
		
		#Если Не Клиент Тогда
			СтрИнфо = КПКОбъектServer.GetPPCInfoByIndex(Поз);						
		#Иначе
			СтрИнфо = КПКОбъект.АпсПолучитьКПКИнфо(Поз);						
		#КонецЕсли   
		
		Если Не ЗначениеЗаполнено(СтрИнфо) Тогда
			Продолжить;
		КонецЕсли;
		Стр = Сред(СтрИнфо, 2) + ",""";
		Спис = кпкАгентПлюс.ИзСтрокиВСписок(Стр, """,""");
		// В списке следующие значения:
		//0-й - иденифмкато КПК
		//1-й - псевдоним торгвого агента (владельца КПК)
		//2-й - директория обмена данными 
		//3-й - имя полученного с КПК файла с директорией
		//4-й - время сеанса
		//5-й - контрольная сумма полученного файла
		ИдКПК = Спис.Получить(0).Значение;
		
		СпрКПК = Справочники.кпкКПК.НайтиПоРеквизиту("Идентификатор", ИдКПК);
		Если СпрКПК.Пустая() Тогда
		    ТекстСообщения = "В справочнике ""Мобильные устройства"" не найдено мобильное устройство с идентификатором """ + ИдКПК + """!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Ложь);
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Объект Как Агент ИЗ РегистрСведений.кпкСведенияАгента ГДЕ КПК = (&парКПК)";
		Запрос.УстановитьПараметр("парКПК", СпрКПК);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СпрАг = Выборка.Агент;
		Иначе
			ТекстСообщения = "В регистре ""Сведения агентов"" не найден агент с идентификатором мобильного устройства """ + ИдКПК + """!";		    
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Ложь);
			Продолжить;
		КонецЕсли;
		
		НовСтр = ТабАПСервер.Добавить();
		НовСтр.Агент 	= СпрАг;
		НовСтр.Папка	= Спис.Получить(2).Значение;
		ФайлДанных 	    = Спис.Получить(3).Значение;

		Если ЗначениеЗаполнено(ФайлДанных) Тогда   
			ВремяСеансаXML = Спис.Получить(4).Значение;
			НовСтр.ЕстьДанные    = Истина;
			НовСтр.Пометка       = Истина;						
			НовСтр.ДатаПолучения = ДатаВремяXMLВФормат1С(ВремяСеансаXML);   
			
			ГотовоАгентов     = ГотовоАгентов + 1;			
		Иначе
			НовСтр.Пометка   	 = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ГотовоАгентов = 0 Тогда
	    ТекстСообщения = "Таблица обновлена. Новых данных от агентов не поступило.";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Ложь);
	Иначе
		ВыбАгент = Справочники.ФизическиеЛица.ПустаяСсылка();		
		ТекстСообщения = "Таблица обновлена. Готов к загрузке данных от " + Строка(ГотовоАгентов) + " агентов.";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Ложь);
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьТаблицуАПС()

// Процедура заполняет таблицу ФТП-сервера
//
Процедура ЗаполнитьТаблицуФТП() Экспорт
	
	ТабФТПСервер.Очистить();
	
	ПодключениеКФТП = СоздатьПодключениеКФТП();
	Если ПодключениеКФТП = Ложь Тогда
		Возврат;
	КонецЕсли;	
	
	Если Константы.КпкШифроватьДанные.Получить() Тогда
	    ПослРасширение = ".crp";
	Иначе
		ПослРасширение = "";
	КонецЕсли;
	
	Если флАрхив = 1 Тогда
	    ИмяФайла = "To1C.zip" + ПослРасширение;
	Иначе
		ИмяФайла = "To1C.xml" + ПослРасширение;
	КонецЕсли;

	Обработано = 0;
	ГотовоАгентов = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Объект КАК Агент, ФТППапка ИЗ РегистрСведений.кпкСведенияАгента УПОРЯДОЧИТЬ ПО Агент";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяФайла = "To1C.zip" + ПослРасширение;
		Спр = Выборка.Агент;
	    Если Спр.ПометкаУдаления Тогда
	        Продолжить;
		КонецЕсли;
		ФтпПапка = СокрЛП(Выборка.ФТППапка);
		Если Не ЗначениеЗаполнено(ФтпПапка) Тогда
		    Продолжить;
		КонецЕсли;
		
		НовСТР =  ТабФТПСервер.Добавить();
		НовСТР.Агент 	= Спр;
		НовСТР.Папка	= ФтпПапка;
		
		Если (Прав(ФтпПапка,1) <> "\") Или (Прав(ФтпПапка,1) <> "/") Тогда
		    ФтпПапка = ФтпПапка + "/";
		КонецЕсли;
		
		ИмяФайла = ФтпПапка + ИмяФайла; // регистр важно соблюдать, т.к. на UNIX-FTP серверах регистр 
										// в имени файла имеет значение!!!
		
		Обработано = Обработано + 1;
		
		// Проверяем существование каталога
		МассивНайденныхФайлов = ПодключениеКФТП.НайтиФайлы(ФтпПапка);						
		Если МассивНайденныхФайлов.Количество() = 0 Тогда
			НовСТР.Пометка = Ложь;
			Продолжить;
		КонецЕсли;
		
		// Ищем нужный файл
		МассивНайденныхФайлов = ПодключениеКФТП.НайтиФайлы(ФтпПапка, "To1C.*");								
		Если МассивНайденныхФайлов.Количество() = 0 Тогда
			НовСТР.Пометка    = Ложь;
			Продолжить;			
		Иначе
			НовСТР.ЕстьДанные = Истина;
			НовСТР.Пометка    = Истина;
			ГотовоАгентов     = ГотовоАгентов + 1;			
		КонецЕсли;		
	КонецЦикла;    	
	
	Если ГотовоАгентов = 0 Тогда
		ТекстСообщения = "Таблица обновлена. Новых данных от агентов не поступило.";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Ложь);		
	Иначе
		ВыбАгент = 0;
		ТекстСообщения = "Таблица обновлена. Готов к загрузке данных от " + Строка(ГотовоАгентов) + " агентов.";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Ложь);		
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьТаблицуФТП()

Функция ДобавитьЗаписьВРегистр(МенеджерРегистра, Объект)
	
	Менеджер 		= МенеджерРегистра.СоздатьМенеджерЗаписи();
	Менеджер.Объект = Объект;
	Менеджер.Прочитать();
	
	Если Не Менеджер.Выбран() Тогда
		Менеджер.Объект = Объект;
		Если Не ВыполнитьОперациюДляОбъекта(Менеджер, "запись") Тогда 						
			ТекстСообщения = "Не удалось записать сведения по объекту: " + Строка(Объект) + " в базу!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат Ложь;		
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции // ДобавитьЗаписьВРегистр()

// Процедура ДополнитьСлешВПуть
//
// Параметры:
//	Нет
//
// Описание:
//	Процедура дополняет слеш в путь в конец строки, если он отсутствует
//
Процедура ДополнитьСлешВПуть(Каталог) Экспорт
	
	Если Прав(Каталог, 1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
КонецПроцедуры //ДополнитьСлешВПуть

///////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫГРУЗКИ ДАННЫХ В МОБИЛЬНЫЕ УСТРОУСТВА ДЛЯ ПРИЛОЖЕНИЯ АМС АГЕНТ+ 1.5
///////////////////////////////////////////////////////////////////////////////////////////

Процедура ВыгрузкаСистемнойКонстантыСпискаТиповЦен()
	
	СформироватьТаблицуВыгружаемыхТиповЦен();
	
	СтрТиповЦен = "";   		
	Для Каждого СтрокаТаб Из тзКатегорииЦен Цикл		
		СтрТиповЦен = СтрТиповЦен + Строка(СтрокаТаб.Код) + ",";			
	КонецЦикла; 
	
	СтрТиповЦен = Лев(СтрТиповЦен, СтрДлина(СтрТиповЦен) - 1); // Убрали последнюю запятую	
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_System" + Т_ + "Struct:ObjID,Value");	
	
	// Константа предусмотрена для случая, если требуется указывать в списках типов цен коды, со значением 
	// кода больше, чем 32.
	// В качестве значения этой константы указывается список всех используемых кодов типов цен, разделенных 
	// через запятую. Эту константу желательно указывать в начале файла выгрузки данных (по крайней мере, 
	// перед тэгами выгрузки перечислений Ref_AttrTypes, клиентов Ref_Clients и торговых точек Ref_TPoints,
	// где используются списки типов цен). Сделано это для того, чтобы программа заранее знала об используемых
	// кодах типов цен, чтобы правильно конвертировать списки кодов типов цен во внутреннее представление в БД.
	// Например, если в БД используются типы цен с кодами: 1, 5, 10, 1021, 99, 87, 66, то в в значение константы 
	// нужно уставноить следующую строку: "1, 5, 10, 1021, 99, 87, 66". Порядок кодов в константе не имеет значения,
	// он может быть как угодно перемешан. Главное, чтобы этих значений было не больше 32.		    
	Текст.ДобавитьСтроку(GUID_SYSTEM_PRICECODES_LIST + Т_ + СтрТиповЦен);   
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_System");   
	
КонецПроцедуры //ВыгрузкаСистемнойКонстантыСпискаТиповЦен()	

// Процедура ВыгрузкаСистемныхКонстант
//
// Параметры:
//  КолФото - количество выгруженных фото
//  Ответ   - признак ответной выгрузки данных
//
// Описание:
//	Процедура выгружает системные константы для приложения Агент+ 1.5
// 
Процедура ВыгрузкаСистемныхКонстант(КолФото = 0, Ответ = Ложь) Экспорт
		
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_System" + Т_ + "Struct:ObjID,Value");	
	
	// Выгружаем системное время выгрузки
	ВремяВыгрузки  = кпкАгентПлюс.ДатаВремяВФорматXMLИз1С();
	
	Текст.ДобавитьСтроку(Строка(GUID_SYSTEM_TIMEUNLD) 	+ Т_ + СокрЛП(ВремяВыгрузки));
	
	ДатаТрека = ПолучитьДатуПоследнегоТрека();
	
	// Дата и время последнего трека, сделанного в КПК
	Если ЗначениеЗаполнено(ДатаТрека) Тогда                         
		Текст.ДобавитьСтроку(GUID_SYSTEM_GPS_TRACK + Т_+ кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(ДатаТрека));
	Иначе
		Текст.ДобавитьСтроку(GUID_SYSTEM_GPS_TRACK + Т_+ ""); 
	КонецЕсли;
	
	Если Не Ответ Тогда
		
		Фирма = ?(ЗначениеЗаполнено(ОснФирма), ОснФирма,  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация"));
		
		Текст.ДобавитьСтроку(Строка(GUID_SYSTEM_AGENTNAME)	+ Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(ВыбАгент.Наименование));
		Текст.ДобавитьСтроку(Строка(GUID_SYSTEM_AGENTID)	+ Т_ + СокрЛП(ВыбАгент.УникальныйИдентификатор()));
		Текст.ДобавитьСтроку(Строка(GUID_SYSTEM_FIRMID)  	+ Т_ + СокрЛП(Фирма.УникальныйИдентификатор()));
		Текст.ДобавитьСтроку(Строка(GUID_SYSTEM_MONEYNAME)	+ Т_ + Константы.ВалютаРегламентированногоУчета.Получить().Наименование);
		// Возможные параметры константы:
		// discount – вариант расчета скидок. Принимает значения, которые получаются сложением числовых величин,
		// описываемых ниже:
		// 1  – в документах "Заявка" и "Реализация" применяется наценочный алгоритм расчета скидки: 
		//     (X * 100 / (100+Скидка), иначе в документах применяется стандартный алгоритм расчета скидки: 
		//	   (X * (100–Скидка) / 100) (значение по умолчанию – 0);
		// 2  – в документах "Заявка" и "Реализация" возможно указание скидки для каждого товара в табличной 
		//	    части, иначе скидка указывается только на весь документ;
		// 4  – в документах "Заявка" и "Реализация" расчет скидки идет от суммы товаров в каждой строке 
		// 	    документов, иначе расчет скидки идет от цены товара в каждой строке документа.
		// 16 - при расчете цены товара в документе, если ограничение скидки на товар больше нуля, скидка на
		//      товар берется  как максимальное значение между скидкой документа и ограничением скидки.
		// 32 - то для расчета скидки будут браться в первую очередь персональные скидки и цены при их наличии.
		//
		// fltgoods – параметр задает режим использования персональных фильтров товаров при подборе товаров
		//            в документы. Фильтр товаров устанавливается персонально в зависимости от выбранного в 
		//            документе клиента или торговой точки.
		// Возможные значения параметра:
		// 0 – не использовать персональные фильтры товаров;
		// 1 – товары, отвечающие фильтру, показываются подчеркнутыми в окне подбора товаров;
		// 2 – товары, не отвечающие фильтру, не показываются в окне подбора товаров.
		// 4 – включается фильтр условий ИЛИ, иначе включается фильтр условий И.    	                                             
		// 8 – если пользователь в КПК вручную выставил условие фильтра, оно будет всегда применяться 
		//	   при открытии окна подбора. При этом закрепленные условия фильтра за клиентом и торговой
		//     точкой игнорируются.
		
		// Ниже в константу преедается стандартный алгоритм расчета скидки, скидка используется только в заголовочной 
		// табличной части (константу указывать не обязательно) 
		Текст.ДобавитьСтроку(Строка(GUID_SYSTEM_FLAGS) 		+ Т_ + "discount=2"); 
		
		ОсновнаяСтавкаНДС = Ценообразование.ПолучитьСтавкуНДС(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС"));
		
		// Ставка НДС по умолчанию, если константа в МУ не задана, то считается равной 18%
		Текст.ДобавитьСтроку(Строка(GUID_SYSTEM_VATRATE)	+ Т_ + СокрЛП(ОсновнаяСтавкаНДС)); 		
		
		ПапкаКартинок = СокрЛП(кпкАгентПлюс.УбратьНечитаемыеСимволы(Константы.кпкПапкаКартинокТоваровВКПК.Получить()));
		Текст.ДобавитьСтроку(GUID_SYSTEM_GOODS_PICT_PATH + Т_ + ПапкаКартинок);   //путь к папке с картинками товаров в КПК
		
		ПапкаФото = СокрЛП(кпкАгентПлюс.УбратьНечитаемыеСимволы(Константы.кпкПапкаФотоКДокументамВКПК.Получить()));
		
		// Путь к папке с фотографиями в КПК, сделанными пользователем в КПК
		Текст.ДобавитьСтроку(GUID_SYSTEM_PHOTOS_PATH + Т_+ кпкАгентПлюс.УбратьНечитаемыеСимволы(ПапкаФото)); 			  
				
		Текст.ДобавитьСтроку(GUID_SYSTEM_DISCOUNTS 	+ Т_ + "Ref_Discounts");// означает, что используются скидки из тэга Ref_Discounts
		// Возможные значения константы GUID_SYSTEM_DISCOUNTS:
		// 1. Список значений скидок через запятую (например: "0, 1.5, 3") 
		//						 - список скидок берется из значения константы и переносится в документ для выбора скидок из списка
		// 2. "" (пустая строка) - скидка проставляется агентом в КПК в документах явно в виде числового значения
		// 3. "Ref_Discounts" 	 - список скидок берется из тэга Ref_Discounts файла выгрузки, скидки в КПК выбираются в документе
		//						   из списка как в п 1. 
		//						 кроме этого доступно чтение скидок сканером штрих-кода с карт скидок клиентов
		  		
		ЕдВеса = Константы.ЕдиницаИзмеренияВеса.Получить().Наименование;
		
		// Название основной единицы веса товаров. 
		Текст.ДобавитьСтроку(GUID_SYSTEM_WEIGHT_UNIT 	+ Т_ + СокрЛП(ЕдВеса));      
		
		// Количество знаков после запятой для указания дробного количества товара  
		Текст.ДобавитьСтроку(GUID_SYSTEM_AMNTPRECISION 	+ Т_ + "2");     
		
		// Количество знаков после запятой для указания дробных значений скидок
		//Текст.ДобавитьСтроку(GUID_SYSTEM_DSCNTRECISION 	+ Т_ + "1"); 
		//(от 0 до 4 знаков) в документах и справочнике клиентов. Если константа 
		//в тэге не указана, то ее значение приравнивается к 1. Значение константы учитывается только
		// если в Агент+ включен числовой режим ввода скидок (смотрите выше описание константы GUID_SYSTEM_DISCOUNTS).  	
		
		// Используется в печатной форме "Перечень сертификатов" документов продаж.
		//Текст.ДобавитьСтроку(GUID_SYSTEM_SERTIFLIST 	+ Т_ + "0");     
		// Если значение константы выставлено в 1, то печатная форма будет извлекать 
		//	списки сертификатов для каждого из товаров в соответствии с тэгом Ref_SertifList.  
		
		// Используется для передачи в КПК ограничения минимально допустимой итоговой
		// суммы документов продаж (документов "Заявка", "Реализация", "Реализация розничная").
		//Текст.ДобавитьСтроку(GUID_SYSTEM_DSALES_MINSUM 	+ Т_ + "2"); 
				
		// Используется для передачи в КПК ограничения минимально допустимого итогового количества
		// документов продаж (итог колонки "Количество" документов "Заявка", "Реализация", "Реализация розничная").
		//Текст.ДобавитьСтроку(GUID_SYSTEM_DSALES_MINAMT 	+ Т_ + "2"); 
		
		
		//СуммаЛимита = Формат(Константы.кпкМаксПревышениеСуммыЗадолженности.Получить(), "ЧРД=.; ЧРГ=''; ЧГ=0");                       
		
		// Вместо 0 нужно проставить требуемое значение лимита
		// указывается максимально допустимое превышение суммы документа продаж над суммой свободного кредита. 
		// Если значение константы не указано, ее значение приравнивается к –1 (что означает отключение контроля долга).  
		// Максимально допустимая сумма рассчитывается по формуле: 
		// MaxSum = Credit – DebtCDB – DebtPPC + Const, где:
		// Credit – сумма кредита клиенту (выгружается в тэге Ref_Clients);
		// DebtCDB – долг клиента в центральной БД (выгружается в тэге Ref_Clients);
		// DebtPPC – долг клиента в КПК (рассчитывается как сумма неподтвержденных документов продаж по данному клиенту);
		// Const – значение данной константы 

		//Текст.ДобавитьСтроку(GUID_SYSTEM_DSUMLIMIT 	+ Т_ + СуммаЛимита);
		
		
		// Указываются значения 0 или 1. Если передано значение 1, то при проведении документов 
		// продаж в КПК проверяется заполнения поля "Мерчендайзинг" – если поле не заполнено, 
		// то документ не проводится.																	  
		//Текст.ДобавитьСтроку(GUID_SYSTEM_DOCMERCHSEL 	+ Т_ + "0");
		
		// Если требуется, чтобы в КПК в табличных частях всех документов можно было указывать 
		// помимо количеств товаров еще и единицы измерения товаров, то нужно установить значение 
		// этой константы равным 1. В противном случае в табличных частях всех документов в качестве 
		// единицы измерения количества считается базовая единица измерения товара.																	  				
		Текст.ДобавитьСтроку(GUID_SYSTEM_USE_UNITS 	+ Т_ + Число(ИспЕдИзм));
		
		
		// В качестве значения константы указывается список дополнительных параметров настройки окна подбора
		// товаров (прайс-листа), параметры перечисляются через запятую. Список названий возможных параметров:
		// HIDST0 – скрывать в окне подбора товаров товары с нулевым остатком. 
		// NO1CLICK – запретить активацию выбора товара одним касанием стилуса. 
		// Если этот параметр не передан в КПК то одиночное касание стилусом клетки "Количество" или "Мерчендайзинг" в окне подбора 
		// сразу вызывает окно ввода количество. Если этот параметр передан в КПК,  то окно ввода количеств вызывается только двойным
		// касанием стилуса нужной клетки.
		//Текст.ДобавитьСтроку(GUID_SYSTEM_PRLFLAGS 	+ Т_ + "HIDST0, NO1CLICK");  	 
		
		
		// указывается название скрипта и функции языка программирования Lua, которые будут вызываться всегда при попытке записи 
		// пользователем любого документа. Например:
		// SaveDoc.lua:SaveDocument … что означает, что будет запускаться функция SaveDocument из скрипта SaveDoc.lua.
		// Если константа в файле не указана, или указано ее пустое значение, то скрипт не вызывается. Эта функция в Lua может возвращать значения:
		// 0 – запретить проведение документа;
		// 1 – разрешить проведение документа.
		// Т.о. функция может быть использована для проверки содержимого документа, но используя средства языка Lua функция может и вносить изменения 
		// документ. Одним из примеров такого применения функции является задача расчета накопительных скидок
		Текст.ДобавитьСтроку(GUID_SYSTEM_SAVESCRIPT  + Т_ + "");
		
		//Текст.ДобавитьСтроку(GUID_SYSTEM_UDATA_PATH   + Т_ + "");   		  
		// Путь к папке пользовательских данных, куда Агент+ будет распаковывать архив пользовательских данных UDataFromCDB.zip 
		// (если этот файл содержится внутри архива From1C.zip). В качестве пользовательских данных, например, в КПК можно передавать 
		// готовые отчеты в формате Excel, сформированные в настольной учетной системе
		// В данном примере передаем туда фотографии картинок товаров из ЦБД 		
		
		// Указывается список видов документов, для которых резрешить выбор клиентов и торговых точек 	
		// только из маршрутов (в окне выбора клиентов показывается только закладка "Маршрут"). Если 
		// константа в файле выгрузки не указана, или указано пустое значение, то для всех документов 
		// разрешен выбор клиентов и из списка клиентов и из маршрутов.
		//Текст.ДобавитьСтроку(GUID_SYSTEM_SELROUTESONLY   + Т_ + "Order, Sale, RSale");
		
		// Кол-во дней назад от текущей даты, в пределах которых разрешается выбор пунктов маршрутов в документ.
		// Если выбираемый пункт маршрута попадает в данный интервал, то он остается в документе выбранным, иначе в документ 
		// переносится только клиент и торговая точка из пункта маршрута. Константу удобно использовать для закрытия пунктов 
		// маршрутов "задним числом" (если это допустимо для пользователей).
		//Текст.ДобавитьСтроку(GUID_SYSTEM_ROUTEDAYS_BACK   + Т_ + "");
		
		// Количество дней вперед от текущей даты, в пределах которых разрешается выбор пунктов маршрутов в документ 
		// (смотрите описание предыдущей константы). Константу удобно использовать для закрытия пунктов маршрутов "передним 
		// числом" (если это допустимо для пользователей).		
		//Текст.ДобавитьСтроку(GUID_SYSTEM_ROUTEDAYS_FWD   + Т_ + "");               
		  		    	
		// Описание выгрузки новых констант для 20-го релиза ПО Агент+
		//                                                            
		
		//Текст.ДобавитьСтроку(GUID_SYSTEM_DOCFLAGS + Т_ + "AUTOMERCH, ");    					  
		// Указывается список дополнительных параметров настройки документов (перечисляются через запятую). 
		// Список названий возможных параметров:
		// DT_QLIST – при подборе товаров запрашивать значения основных реквизитов документа ("Количество" 
		// и "Цена" – в зависимости от параметров подбора) единым списком, т.е. запрашивать значения реквизитов
		// в отдельном окне, где они показываются списком. 
		// NOPRNSAVED - запрет печати непроведенных документов;
		// DT_NOINTFILL - отключение от использования встроенного алгоритма заполнения документов;
		// AUTOMERCH - для документов "Заявка", "Реализация" и "Реализация розничная" принудительно 
		// создавать документ "Мерчендайзинг" (в случае, как только пользователь начинает пытаться 
		// заполнять табличную часть этих документов).
		// NOASKPRICE - для документов "Заявка", "Реализация" и "Реализация розничная" принудительно 
		// создавать документ "Мерчендайзинг" (в случае, как только пользователь начинает пытаться 
		// заполнять табличную часть этих документов).
		// NOASKRCPRICE - это значение влияет на поведение программы при интерактивном пересчете цен. 
		// Если значение указано в списке значений константы, то после смены пользователем клиента в 
		// диалогах документов "Заявка", "Реализация" и "Реализация розничная" при одновременной смене
		// типа цены в документе, программа сразу включает пересчет цен. Если же это значение константы
		// не указано, то после смены клиента программа просит подтвердить пользователя пересчет цен.
		
		
		// Название скрипта и функции языка программирования Lua, которые будут вызываться при попытке
		// выбора клиента в документе для генерации текстовой информации о клиенте, которая
		// выводится в желтом окне подсказки.
		//Текст.ДобавитьСтроку(GUID_SYSTEM_CLIENTINFOSCRIPT + Т_ + "APSample.lua:ClientInfo");    
		
		// Название скрипта и функции языка программирования Lua, которые будут вызываться при попытке
		// выбора торговой точки в документе для генерации текстовой информации о торговой точке, которая
		// выводится в желтом окне подсказки. 
		//Текст.ДобавитьСтроку(GUID_SYSTEM_TPOINTINFOSCRIPT + Т_ + "APSample.lua:TPointInfo");
		
		// Название скрипта и функции языка программирования Lua, которые будут вызываться в журнале 
		// документов при попытке позиционирования курсора на каком-либо документе.
		//Текст.ДобавитьСтроку(GUID_SYSTEM_DOCINFOSCRIPT    + Т_ + "APSample.lua:DocInfo");
		
		
		// Название, которое используется для подписи заголовка колонки "Рейтинг" в окне подбора товаров.
		// Если константа в файле не указана, то в заголовке выводится слово "Рейтинг".
		Текст.ДобавитьСтроку(GUID_SYSTEM_RATINGNAME         + Т_ + "Рейтинг");		
		
		// Параметр, определяющий настройки ведения GPS-трекинга.
		// В нее заносится список названий, определяющие настройки ведения GPS-трека(перечисляются через запятую). 
		// Значения названий могут быть следующими: 
		// TRACKSPEED — в файле трекинга будет записываться скорость;
		// TRACKGPSTIME – в файле трекинга будет записываться время, полученное из GPS данных, 
		// иначе, по умолчанию, будет записываться локальное время КПК.
		Текст.ДобавитьСтроку(GUID_SYSTEM_GPSTRACK           + Т_ + "TRACKGPSTIME");
				
		РежимПланирования = Константы.кпкРежимПланированияПродаж.Получить();
		
		Если РежимПланирования = 1 Тогда
			СтрРежим = "3"; 
		ИначеЕсли РежимПланирования = 2 Тогда
			СтрРежим = "2";
		Иначе
			СтрРежим = "1";
		КонецЕсли;
		
		// В нее заносится вариант расчета процента выполнения плана продаж при подборе
		// товаров (1 — используется вариант расчета, определенный текущим открытым планом;
		// 2 — расчет только по сумме; 3 — расчет только по количеству).
		Текст.ДобавитьСтроку(GUID_SYSTEM_PLANBYGOODSEL      + Т_ + СтрРежим);  					  
		
		//Текст.ДобавитьСтроку(GUID_SYSTEM_PRICE_TRANSCYCLE   + Т_ + "1");						  
		// В нее можно заносить значение, определяющее через какое количество записей при 
		// загрузке данных прайс-листа производить транзакцию в базе данных (по умолчанию константа
		// равняется 1023).																  
		
		ДатаОстатков = кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(НачалоМесяца(ТекущаяДата()));	
		
		
		// Указывается дата и время, начиная с которого в Агент+ нужно фиксировать остатки по регистру
		// товаров в разрезе декад месяца. До указанной даты остатки по регистру фиксируются в разрезе
		// месяцев. Если константа не указана, то датой начала периодов по декадам считается первое число 
		// предыдущего месяца.
		//Текст.ДобавитьСтроку(GUID_SYSTEM_DIVPERIOD      + Т_ + ДатаОстатков);                   
		
		// Путь, куда будут сохраняться html-файлы, распакованные из Messages.zip.
		//Текст.ДобавитьСтроку(GUID_SYSTEM_MSG_PATH       + Т_ + "");                            
		
		
		//КолВыгрЕдиниц = Константы.кпкКоличествоЕдиницИзмерения.Получить();
		КолВыгрЕдиниц = 3;
		
		// Определяет кол-во единиц измерения, которое будет выгружаться в КПК
		// Минимум 3, максимум 10.
		Текст.ДобавитьСтроку(GUID_SYSTEM_UNITSCOUNT      + Т_ + Строка(КолВыгрЕдиниц));           
		
		// Флаги для работы с маршрутами. Если установить 1, то флажки при отображении 
		// маршрутов будут проставляться только в том случае, если все документы в этом 
		// узле проведены.
		//Текст.ДобавитьСтроку(GUID_SYSTEM_ROUTE_FLAGS      + Т_ + "");                           		
		
		// В качестве значения константы указывается список дополнительных параметров 
		// настройки обмена данными. Список названий возможных параметров:
		// EXP_STOCK – включение режима "выгрузки остатков товаров". Если режим включен, то в xml-файл выгрузки
		// данных Агент+ будет выгружать данные по текущим остаткам товаров в БД КПК. 
		// Данный параметр удобно применять в задачах синхронизации остатков товаров между ЦБД и БД КПК.
		// NOEXP_NACTDOCS – включение запрета экспорта из КПК непроведенных документов (по умолчанию отключено).
		// CHECK_MATRIX – включение режима проверки матрицы товаров в процессе ее загрузки в КПК из тэга Ref_MatrixOfGoods 
		// (по умолчанию отключено).
		Текст.ДобавитьСтроку(GUID_SYSTEM_EXCHFLAGS    + Т_ + "NOEXP_NACTDOCS,CHECK_MATRIX");
		
		ИспользованиеДоговоров = Константы.кпкИспользоватьДоговоры.Получить();
		
		Текст.ДобавитьСтроку(GUID_SYSTEM_USE_AGREEMENTS + Т_ + Число(ИспользованиеДоговоров));
		
		Текст.ДобавитьСтроку(GUID_SYSTEM_AUTHOR_TEL + Т_ + "+7 (8512)61-17-48");           
		
	КонецЕсли;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_System");
	
КонецПроцедуры //ВыгрузкаСистемныхКонстант()

// Процедура предназначена для выгрузки перечислений в КПК
//
Процедура ВыгрузкаПеречислений() Экспорт
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_AttrTypes" + Т_ + "Struct:AttrID,Code,Name,=DocList,=AddValue");
	
	// Выгрузка типов цен
	ТекИД = GUID_ATTRTYP_PRICETYPE;   	
	Для Каждого СтрокаТаб Из тзКатегорииЦен Цикл		
		Текст.ДобавитьСтроку(Строка(ТекИД) + Т_ + Строка(СтрокаТаб.Код) + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(СтрокаТаб.ТипыЦен.Наименование) + Т_ + "" + Т_ + "");
		ТекИД = "*";
	КонецЦикла;
	
	// Виды оплат
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВидыДенежныхСредств.Ссылка,
	|	ВЫБОР
	|		КОГДА ВидыДенежныхСредств.Ссылка = &ВидДС
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сорт	
	|ИЗ
	|	Перечисление.ВидыДенежныхСредств КАК ВидыДенежныхСредств
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сорт УБЫВ");
	
	Запрос.УстановитьПараметр("ВидДС", ВидОплатыПоУмолчанию);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекИД = Строка(GUID_ATTRTYP_PAYMNTTYPE);
	Сч = 1;
    Пока Выборка.Следующий() Цикл	
		Текст.ДобавитьСтроку(ТекИД + Т_ + Строка(Сч) + Т_ + Строка(Выборка.Ссылка) + Т_ + "" + Т_ + " ");
		Сч = Сч + 1;
		ТекИД = "*";
	КонецЦикла;

	//Текст.ДобавитьСтроку(Строка(ТекИД) + Т_ + "1" + Т_ + "Не выбран" + Т_ + "" + Т_ + "");
	//Текст.ДобавитьСтроку("*" + Т_ + "2" + Т_ + "Наличными" + Т_ + "" + Т_ + "");
	//Текст.ДобавитьСтроку("*" + Т_ + "3" + Т_ + "Безналичными" + Т_ + "" + Т_ + "");

	//Значения параметра GUID_ATTRTYP_COMMENT ("Комментарий") название параметра (его представление в документе) можно изменять
	Текст.ДобавитьСтроку(Строка(GUID_ATTRTYP_COMMENT) + Т_ + "-1" + Т_ + "Комментарий:" + Т_ + " " + Т_ + " ");// для всех документов
	Текст.ДобавитьСтроку("*" + Т_ + "1" + Т_ + "СРОЧНО!"	+ Т_ + "Order" + Т_ + " "); // только для заявки
	Текст.ДобавитьСтроку("*" + Т_ + "2" + Т_ + "Самовывоз"	+ Т_ + "Order" + Т_ + " ");	// только для заявки
	Текст.ДобавитьСтроку("*" + Т_ + "3" + Т_ + "Акция"	   	+ Т_ + "Order" + Т_ + " "); // только для заявки
	Текст.ДобавитьСтроку("*" + Т_ + "4" + Т_ + "Клиент:  , Маг:  , Адр:  , Тел:" + Т_ + " " + Т_ + " "); // для всех документов
	Текст.ДобавитьСтроку("*" + Т_ + "5" + Т_ + "Заявка на погрузку" + Т_ + "Order" + Т_ + " "); // только для заявки, этот комментарий используется, если торговый агент покупает товар себе
	Текст.ДобавитьСтроку("*" + Т_ + "6" + Т_ + "Брак!" 		+ Т_ + "Arrival" + Т_ + " "); // только для документа "Поступление"
	
	//////////////////////////////////////////////////
	//Выгрузка перечислений (списков), задаваемых программистом исходя из задачи
	//////////////////////////////////////////////////
	
	// Видов доставки	
	ТекИД = Строка(MY_GUID_ENUM_DLVTYPE);
	Для Инд = 0 По Перечисления.кпкВидыДоставки.Количество() - 1 Цикл
		Текст.ДобавитьСтроку(ТекИД + Т_ + Строка(Инд + 1) + Т_ + Строка(Перечисления.кпкВидыДоставки.Получить(Инд)) + Т_ + "" + Т_ + " ");
		ТекИД = "*";
	КонецЦикла;
	
	// Выгрузка расцветок клиентов
	ТекGUID = Строка(GUID_ENUM_CLIENTS_COLORS);
	Спр = Справочники.кпкСтатусыКонтрагентов.Выбрать();
	Пока Спр.Следующий() Цикл
	    Если Спр.ПометкаУдаления Или Спр.Код = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЦветСпр = Спр.Цвет.Получить();
		Если ЦветСпр <> Неопределено Тогда								
			Цвет = "#" + СокрЛП(кпкАгентПлюс.ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему(ЦветСпр));     			
		Иначе
			Цвет = "";
		КонецЕсли;                                          			
		
		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрЛП(Цвет) + Т_ + "" + Т_ + "");
       	ТекGUID = "*";
	КонецЦикла;    	
	   
	//категории документов
	ТекGUID = Строка(GUID_ENUM_DOC_CAT);
	Спр = Справочники.КпкКатегорииДокументов.Выбрать();
	Пока Спр.Следующий() Цикл
	    Если Спр.ПометкаУдаления Или Спр.Код = 0 Тогда
			Продолжить;
		КонецЕсли;		
		Если Спр.флДолги Тогда
			СтрДок = "Debt";
		Иначе
			СтрДок = кпкАгентПлюс.СформироватьСтрокуСпискаДокументов(Спр.ВидыДокументов);
		КонецЕсли;
		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Спр.Наименование) + Т_ + СтрДок + Т_ + "");
       	ТекGUID = "*";
	КонецЦикла;
	
	// Цвета категорий документов
	ТекGUID = Строка(GUID_ENUM_DOC_CAT_COLORS);
	Спр = Справочники.КпкКатегорииДокументов.Выбрать();
	Пока Спр.Следующий() Цикл
	    Если Спр.ПометкаУдаления Или Спр.Код = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЦветСпр = Спр.Цвет.Получить();
		Если ЦветСпр <> Неопределено Тогда								
			Цвет = "#" + СокрЛП(кпкАгентПлюс.ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему(ЦветСпр));     			
		Иначе
			Цвет = "";
		КонецЕсли;   
		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Цвет) + Т_ + "" + Т_ + "");
       	ТекGUID = "*";
	КонецЦикла;
	
	// Выгрузка предупреждений для клиентов - предупреждения показываются при выборе клиента в документе
	ТекGUID = Строка(GUID_ENUM_CLIENTS_WARNINGS);
	Спр = Справочники.кпкСтатусыКонтрагентов.Выбрать();
	Пока Спр.Следующий() Цикл
	    Если Спр.ПометкаУдаления Или Спр.Код = 0 Тогда
			Продолжить;
		ИначеЕсли ПустаяСтрока(Спр.Предупреждение) Тогда
			Продолжить;
		КонецЕсли;
		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Спр.Предупреждение) + Т_ + "" + Т_ + "");
       	ТекGUID = "*";
	КонецЦикла;
	
	//Запросы из КПК в 1С
	ТекGUID = Строка(GUID_ATTRTYP_QUERY);
	Спр = Справочники.кпкЗапросы.Выбрать(,,, "Код");
	Пока Спр.Следующий() Цикл
	    Если (НЕ Спр.ПометкаУдаления) Тогда
			Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Спр.Наименование) + Т_ + "" + Т_ + "");
	       	ТекGUID = "*";
	    КонецЕсли;
	КонецЦикла;
	
	//Категории номенклатуры
	ТекGUID = Строка(GUID_ATTRTYP_GOODSCAT);
	Спр = Справочники.НоменклатурныеГруппы.Выбрать(,,, "Код");
	Пока Спр.Следующий() Цикл
		
		Если Спр.ЭтоГруппа Тогда Продолжить; КонецЕсли;
		
		Если Справочники.НоменклатурныеГруппы.НайтиПоКоду(Спр.Код) = Справочники.НоменклатурныеГруппы.ПустаяСсылка() Тогда
			ОповеститьОСобытии("Код: " + Спр.Код + " элемента справочника ""Номенклатурные группы"" не уникален, следует проверить уникальность кодов. Текущий элемент не будет включен в выгрузку!");
			Продолжить;
		КонецЕсли;
		
		КодГруппы = ПреобразоватьКодСправочника(Спр);
		
		Если КодГруппы = 0 Тогда Продолжить; КонецЕсли;
		
		Если (НЕ Спр.ПометкаУдаления) Тогда
			Текст.ДобавитьСтроку(ТекGUID + Т_ + СокрЛП(КодГруппы) + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Спр.Наименование) + Т_ + "" + Т_ + "");
	       	ТекGUID = "*";
		КонецЕсли;
		
	КонецЦикла;
	
	// названия типов планов продаж	
	ТекGUID = GUID_ENUM_PLAN_OF_SALES_TYPES;
	Спр = Справочники.кпкТипыПланирования.Выбрать(,,, "Код");    	
	Пока Спр.Следующий() Цикл			
		Если (НЕ Спр.ПометкаУдаления) Тогда
			Текст.ДобавитьСтроку(ТекGUID + Т_+ Строка(Спр.Код) + Т_+ кпкАгентПлюс.УбратьНечитаемыеСимволы(Спр.Наименование) + Т_ + "" + Т_ + "");			
			ТекGUID = "*";   
		КонецЕсли;
	КонецЦикла;
	
	//Результатов посещений
	ТекGUID = Строка(MY_GUID_ENUM_VISIT);
	Спр = Справочники.кпкРезультатыПосещений.Выбрать(,,, "Код");
	Пока Спр.Следующий() Цикл
	    Если (НЕ Спр.ПометкаУдаления) Тогда
			Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Спр.Наименование) + Т_ + "" + Т_ + "");
	       	ТекGUID = "*";
	    КонецЕсли;
	КонецЦикла;      	
	
	//Страны происхождения 
	ТекGUID = Строка(MY_GUID_ENUM_STRANA);
	Спр = Справочники.КлассификаторСтранМира.Выбрать(,,, "Код");
	Пока Спр.Следующий() Цикл
	    Если (НЕ Спр.ПометкаУдаления) Тогда
			Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(ПреобразоватьКодСправочника(Спр)) + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Спр.Наименование) + Т_ + "" + Т_ + "");
	       	ТекGUID = "*";
	    КонецЕсли;
	КонецЦикла;
	
	//Типы торговых точек  
	Если ИспТочек Тогда
		ТекGUID = Строка(MY_GUID_ENUM_TPTYPE);
		Спр = Справочники.кпкТипыТорговыхТочек.Выбрать(, , , "Код");
		Пока Спр.Следующий() Цикл
			Если (НЕ Спр.ПометкаУдаления) Тогда
				Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Спр.Наименование) + Т_ + "" + Т_ + "");
				ТекGUID = "*";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;    
			
	////////////////////////////////////////////////////////
	//Выгрузка анкетных вопросов
	////////////////////////////////////////////////////////

	//просто добавляем заголовок анкеты (используется просто случайный идентификатор):
	Текст.ДобавитьСтроку("F07C563C-8EC9-44FA-8EDA-CBECBA4DF43B" + Т_ + "0" + Т_ + "---АНКЕТА---" + Т_ + "Visit"+ Т_ + "");
		
	//Выгрузка вопросов и вариантов ответов
	Ст = Новый Структура;
	Ст.Вставить("кпкВыгружать", Истина);
		
	СпрВопр = Справочники.кпкВопросыАнкеты.Выбрать(, , Ст, "Код");
	Пока СпрВопр.Следующий() Цикл
		Если (СпрВопр.ПометкаУдаления) ИЛИ (НЕ СпрВопр.КпкВыгружать) Тогда
			Продолжить;
		КонецЕсли;
		Обязателен = ?(СпрВопр.КпкОбязательный, ",!", "");
		Текст.ДобавитьСтроку(СокрЛП(СпрВопр.Ссылка.УникальныйИдентификатор()) + Т_ + "0" + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(СпрВопр.Наименование) + Т_ + "Visit"+ Обязателен + Т_ + "");
		СпрОтв = Справочники.кпкОтветыАнкеты.Выбрать(, СпрВопр.Ссылка, , "Код");
		Пока СпрОтв.Следующий() Цикл
			Если СпрОтв.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			Текст.ДобавитьСтроку("*" + Т_ + Строка(СпрОтв.Код) + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(СпрОтв.Наименование) + Т_ + "Visit" + Т_ + "");
		КонецЦикла;
	КонецЦикла;
	
	// Категории клиентов (торг точек)
	ТекGUID = GUID_ENUM_CLIENTS_TPOINTS_CAT;
	СпрКат = Справочники.кпкКатегорииКонтрагентов.Выбрать();	
	Пока СпрКат.Следующий()Цикл
	    Если (НЕ СпрКат.ПометкаУдаления) Тогда
			Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(СпрКат.Код) + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(СпрКат.Наименование) + Т_ + "" + Т_ + "");
	    	ТекGUID = "*";	    
		КонецЕсли;
	КонецЦикла;    
	
	// Рейтинги товаров
	ТекGUID = GUID_ENUM_RATINGCAT;
	СпрРейтинг = Справочники.кпкРейтингиТоваров.Выбрать();
	Пока СпрРейтинг.Следующий()Цикл           
		Если (НЕ СпрРейтинг.ПометкаУдаления) Тогда  						
			ЦветСпр = СпрРейтинг.Цвет.Получить();
			Если ЦветСпр <> Неопределено Тогда								
				Цвет = "#" + СокрЛП(кпкАгентПлюс.ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему(ЦветСпр));     			
			Иначе
				Цвет = "";
			КонецЕсли;                                          			
			Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(СпрРейтинг.Код) + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(СпрРейтинг.Наименование) + Т_ + "" + Т_ + Цвет);
	       	ТекGUID = "*";
	    КонецЕсли;
	КонецЦикла;
	
	// Свойства товаров
	ТекGUID = GUID_ATTRTYP_GOODSPROP;
	НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
	СпрСвойства = Справочники.КатегорииОбъектов.Выбрать(,, Новый Структура("НазначениеКатегории", НазначениеКатегорий));	
	Пока СпрСвойства.Следующий()Цикл    			
		КодКатегории = ПреобразоватьКодСправочника(СпрСвойства);		
		Если СпрСвойства.ПометкаУдаления или КодКатегории = 0 Тогда Продолжить; КонецЕсли;
		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(СпрСвойства.Код) + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(СпрСвойства.Наименование) + Т_ + "" + Т_ + "");
		ТекGUID = "*";	 		
	КонецЦикла;    
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_AttrTypes");
	
КонецПроцедуры //ВыгрузкаПеречислений()

// Процедура предназначена для выгрузки в КПК описания дополнительных реквизитов
// справочников и документов. Дополнительные реквизиты создаются программистом исходя из задачи.
//
Процедура ВыгрузкаСтруктурТаблиц() Экспорт
	    
	//коды поддерживаемых типов реквизитов:
	ТипЧисло	= "1";  //для этого типа в параметре Size указывается количество знаков после запятой (от 0 до 4)
	ТипСтрока	= "2";  //для этого типа в параметре Size указывается максимальный размер строки (до 255 символов)
	ТипДата		= "3";
	ТипПеречисл	= "10"; //Перечисление
	ТипБулево	= "20"; //Булево
	
	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_TblStruct" +Т_+ "Struct:TblCD,FormOrder,Name,Present,Type,TypeID,Size,Flags"); //=ColWidth
	// { Арт 2008-12-09 
	// можно использовать новый необязательный параметр ColWidth 
	// указывается ширина колонки в пикселях для каждого  дополнительного
	// реквизита табличной части документов
	// Арт 2008-12-09 }
	
	//Параметр Flags используется для указания режимов редкатирования реквизитов пользователем.
	//Значения параметра:
	//	1 - реквизит "обязательный" (показывается при редактировании красным)
	//	2 - запрет изменения реквизита (только для существующего объекта, для 
	//      создаваемого объекта изменение реквизита разрешено)

	//описание дополнительных реквизитов справочника "Фирмы": (создаются программистом исходя из задачи)
	//описанные ниже названия полей указываются в параметрах тега Ref_Firms
	Текст.ДобавитьСтроку("Firms"   + Т_ + "1"  + Т_ + "FNAME" 	 + Т_ + "Полн.наименование" + Т_ + ТипСтрока + Т_ + "" + Т_ + "128"+ Т_ + "0");
	Текст.ДобавитьСтроку("Firms"   + Т_ + "2"  + Т_ + "INN" 	 + Т_ + "ИНН"  			    + Т_ + ТипСтрока + Т_ + "" + Т_ + "12" + Т_ + "0");
	Текст.ДобавитьСтроку("Firms"   + Т_ + "3"  + Т_ + "KPP" 	 + Т_ + "КПП"  				+ Т_ + ТипСтрока + Т_ + "" + Т_ + "9"  + Т_ + "0");
	Текст.ДобавитьСтроку("Firms"   + Т_ + "4"  + Т_ + "OKPO" 	 + Т_ + "ОКПО"  			+ Т_ + ТипСтрока + Т_ + "" + Т_ + "16" + Т_ + "0");
	Текст.ДобавитьСтроку("Firms"   + Т_ + "5"  + Т_ + "BANK" 	 + Т_ + "Банк"  			+ Т_ + ТипСтрока + Т_ + "" + Т_ + "64" + Т_ + "0");
	Текст.ДобавитьСтроку("Firms"   + Т_ + "6"  + Т_ + "BIK" 	 + Т_ + "БИК"  				+ Т_ + ТипСтрока + Т_ + "" + Т_ + "32" + Т_ + "0");
	Текст.ДобавитьСтроку("Firms"   + Т_ + "7"  + Т_ + "BANKADR"  + Т_ + "Адрес банка"  		+ Т_ + ТипСтрока + Т_ + "" + Т_ + "64" + Т_ + "0");
	Текст.ДобавитьСтроку("Firms"   + Т_ + "8"  + Т_ + "KSCHET" 	 + Т_ + "Кор.счет"  		+ Т_ + ТипСтрока + Т_ + "" + Т_ + "32" + Т_ + "0");
	Текст.ДобавитьСтроку("Firms"   + Т_ + "9"  + Т_ + "RSCHET" 	 + Т_ + "Расч.счет"  		+ Т_ + ТипСтрока + Т_ + "" + Т_ + "32" + Т_ + "0");
	Текст.ДобавитьСтроку("Firms"   + Т_ + "10" + Т_ + "DIREKTOR" + Т_ + "Директор"  		+ Т_ + ТипСтрока + Т_ + "" + Т_ + "64" + Т_ + "0");
	Текст.ДобавитьСтроку("Firms"   + Т_ + "11" + Т_ + "GLBUH" 	 + Т_ + "Гл.бухгалтер"  	+ Т_ + ТипСтрока + Т_ + "" + Т_ + "64" + Т_ + "0");
	
	//описание дополнительных реквизитов справочника "Клиенты": (создаются программистом исходя из задачи)
	//описанные ниже названия полей указываются в параметрах тега Ref_Clients
	Текст.ДобавитьСтроку("Clients" + Т_ + "1" + Т_ + "INN" 		 + Т_ + "ИНН" 				+ Т_ + ТипСтрока + Т_ + "" + Т_ + "12" + Т_ + "1"); //Flags = 1 - обязательный реквизит
	Текст.ДобавитьСтроку("Clients" + Т_ + "2" + Т_ + "KPP" 		 + Т_ + "КПП" 				+ Т_ + ТипСтрока + Т_ + "" + Т_ + "9"  + Т_ + "0"); //Flags = 1 - обязательный реквизит
	Текст.ДобавитьСтроку("Clients" + Т_ + "3" + Т_ + "FNAME" 	 + Т_ + "Полн.наименование" + Т_ + ТипСтрока + Т_ + "" + Т_ + "128"+ Т_ + "0");
	Текст.ДобавитьСтроку("Clients" + Т_ + "4" + Т_ + "BANK" 	 + Т_ + "Банк"  			+ Т_ + ТипСтрока + Т_ + "" + Т_ + "64" + Т_ + "0");
	Текст.ДобавитьСтроку("Clients" + Т_ + "5" + Т_ + "BIK" 	     + Т_ + "БИК"  				+ Т_ + ТипСтрока + Т_ + "" + Т_ + "32" + Т_ + "0");
	Текст.ДобавитьСтроку("Clients" + Т_ + "6" + Т_ + "BANKADR"   + Т_ + "Адрес банка"  		+ Т_ + ТипСтрока + Т_ + "" + Т_ + "64" + Т_ + "0");
	Текст.ДобавитьСтроку("Clients" + Т_ + "7" + Т_ + "KSCHET" 	 + Т_ + "Кор.счет"  		+ Т_ + ТипСтрока + Т_ + "" + Т_ + "32" + Т_ + "0");
	Текст.ДобавитьСтроку("Clients" + Т_ + "8" + Т_ + "RSCHET" 	 + Т_ + "Расч.счет"  		+ Т_ + ТипСтрока + Т_ + "" + Т_ + "32" + Т_ + "0");
	
	//описание дополнительных реквизитов справочника "Торговые точки": (создаются программистом исходя из задачи)
	//описанные ниже названия полей указываются в параметрах тега Ref_TPoints	
	Текст.ДобавитьСтроку("TPoints" + Т_ + "1" + Т_+ "TPTYPE" 	 + Т_ + "Тип точки"         + Т_ + ТипПеречисл + Т_+ MY_GUID_ENUM_TPTYPE + Т_+ "" + Т_ + "0");
		
	//описание дополнительных реквизитов справочника "Номенклатура" (в КПК - "Price"): (создаются программистом исходя из задачи)
	//описанные ниже названия полей указываются в параметрах тега Ref_Price
	Текст.ДобавитьСтроку("Price"   + Т_ + "1" + Т_ + "STRANA"    + Т_ + "Страна-произв."	  + Т_ + ТипПеречисл + Т_ + MY_GUID_ENUM_STRANA   + Т_ + ""    + Т_ + "0");
	Текст.ДобавитьСтроку("Price"   + Т_ + "2" + Т_ + "GTD" 	     + Т_ + "Номер ГТД"	          + Т_ + ТипСтрока   + Т_ +     		       "" + Т_ + "30"  + Т_ + "0");
	Текст.ДобавитьСтроку("Price"   + Т_ + "3" + Т_ + "FNAME" 	 + Т_+  "Полное наименование" + Т_ + ТипСтрока   + Т_ +    		           "" + Т_ + "128" + Т_ + "0");
		
	//описание дополнительных реквизитов документа "Заявка"
	Текст.ДобавитьСтроку("Order"   + Т_ + "1" + Т_ + "DOSTAVKA"  + Т_ + "Вид доставки" 		+ Т_ + ТипПеречисл + Т_ + MY_GUID_ENUM_DLVTYPE + Т_ + ""   + Т_ + "0");
	
	//описание дополнительных реквизитов документа "Реализация"
	Текст.ДобавитьСтроку("Sale"    + Т_ + "1" + Т_ + "DOSTAVKA"  + Т_ + "Вид доставки"		+ Т_ + ТипПеречисл + Т_ + MY_GUID_ENUM_DLVTYPE + Т_ + ""   + Т_ + "0");
	
	//описание дополнительных реквизитов документа "Мерчендайзинг"
	Текст.ДобавитьСтроку("Merch"   + Т_ + "1" + Т_ + "FKAT_A" 	 + Т_ + "Фейсинг A (категория товаров ""A"")" + Т_ + ТипЧисло + Т_ + "" + Т_ + "0" + Т_ + "0"); //Flags = 1 - обязательный реквизит
	Текст.ДобавитьСтроку("Merch"   + Т_ + "2" + Т_ + "FKAT_B" 	 + Т_ + "Фейсинг B (категория товаров ""B"")" + Т_ + ТипЧисло + Т_ + "" + Т_ + "0" + Т_ + "0");
	Текст.ДобавитьСтроку("Merch"   + Т_ + "3" + Т_ + "FKAT_C" 	 + Т_ + "Фейсинг C (категория товаров ""C"")" + Т_ + ТипЧисло + Т_ + "" + Т_ + "0" + Т_ + "0");
	Текст.ДобавитьСтроку("Merch"   + Т_ + "4" + Т_ + "FKAT_RP"	 + Т_ + "Фейсинг РП (рекламная продукция)"	  + Т_ + ТипЧисло + Т_ + "" + Т_ + "0" + Т_ + "0"); //Flags = 1 - обязательный реквизит
	                                                                                                                            
	//описание дополнительных реквизитов документа "Посещение"
	Текст.ДобавитьСтроку("Visit"   + Т_ + "1" + Т_ + "VISIT"     + Т_ + "Результат посещения" + Т_ + ТипПеречисл + Т_ + MY_GUID_ENUM_VISIT + Т_ + "" + Т_ + "1"); //Flags = 1 - обязательный реквизит
	           	
	// { Арт 2008-12-09
	// Для поддержки дополнительных реквизитов табличных частей документов расширены 
	// возможности данного тэга – для параметра TblCD предусмотрены следующие новые значения: 
	// TOrder, TSale, TRSale, TMerch, TMove, TArrival, TInventory для описания дополнительных 
	// реквизитов (соответственно) документов вида: "Заявка", "Реализация", "Реализация розничная", 
	// "Мерчендайзинг", "Перемещение", "Поступление" и " Инвентаризация".
	
	// Пример:
	// Описание дополнительных реквизитов табличной части документа "Заявка" (создаются программистом исходя из задачи)
	//Текст.ДобавитьСтроку("TOrder"  + Т_ + "1" + Т_ + "Marks"     + Т_ + "Баллы"         +  Т_ + 
	//						ТипЧисло  + Т_ + "" + Т_ + "0" + Т_ + "0");
	//Текст.ДобавитьСтроку("TOrder"  + Т_ + "2" + Т_ + "Date_Del"  + Т_ + "Дата поставки" +  Т_ + 
	//						ТипДата   + Т_ + "" + Т_ + "0" + Т_ + "0");
	//Текст.ДобавитьСтроку("TOrder"  + Т_ + "3" + Т_ + "Confirm"   + Т_ + "Подтвержден"   +  Т_ + 	
	//						ТипБулево + Т_ + "" + Т_ + "0" + Т_ + "0");
	// Арт 2008-12-09 }   
	 
	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_TblStruct");	
	
КонецПроцедуры //ВыгрузкаСтруктурТаблиц()

// Процедура ВыгрузкаПодтверждений
//
// Параметры:
//  Нет
//
// Описание:
//	Процедура выгружает потдверждения документов для приложения Агент+ 1.5
// 
Процедура ВыгрузкаПодтверждений() Экспорт
	
	Интервал = Число(Константы.кпкИнтервалПодтверждений.Получить());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КПКДокумент,
	|	Агент,
	|	Категория,
	|	ДатаВремяСоздания
	|
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента
	|
	|ГДЕ
	|   (Агент = &парАгент) И
	|   (кпкПризнакРучногоВвода = ЛОЖЬ) И
	|	(ДатаВремяСоздания > &парДатаНач) И (ДатаВремяСоздания < &парДатаКон)";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парАгент",   ВыбАгент);
	Запрос.УстановитьПараметр("парДатаНач", НачалоДня(ТекущаяДата() - (86400 * Интервал)));
	Запрос.УстановитьПараметр("парДатаКон", КонецДня(ТекущаяДата()));
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Confirm" + Т_ + "Struct:DocID,DocState,DocNumber,=Category");
	
	Пока Выборка.Следующий() Цикл
		
		#Если Клиент Тогда	
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		Док = Выборка.КПКДокумент;
		
		Если Не ЗначениеЗаполнено(Док) Тогда Продолжить; КонецЕсли;
		
		СостДок = кпкАгентПлюс.АПВернутьСостояниеДок(Док.Ссылка);
				
		Если Док.Проведен Тогда		    
			Если ТипЗнч(Док) = Тип("ДокументСсылка.кпкЗаданиеАгента") Тогда 
				Если ЗначениеЗаполнено(Док.ДатаНачала) и ЗначениеЗаполнено(Док.ДатаОкончания) Тогда
					// Означает, что документ уже был загружен с КПК и нужно запретить его редактирование					
					СостДок = СостДок + ?(Док.ОбновитьВКПК = 1, 0, 8 + 128);				
				Иначе
					СостДок = СостДок + ?(Док.ОбновитьВКПК = 1, 0, 128);     
				КонецЕсли;				  				
			Иначе
				СостДок = СостДок + 8; //запрещаем изменение документа в КПК		
			КонецЕсли;			
		КонецЕсли;  
		
		Если Док.ПометкаУдаления Тогда
			СостДок = СостДок + 512; // запрет изменения остатков
		КонецЕсли;
				
		Категория = "0";
		Если НЕ Выборка.Категория.Пустая() Тогда
			Категория = Выборка.Категория.Код;
		КонецЕсли;
		
		Текст.ДобавитьСтроку(СокрЛП(Док.Ссылка.УникальныйИдентификатор()) + Т_ + Строка(СостДок) + Т_ + СокрЛП(Док.Номер) + Т_ + СокрЛП(Категория));
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>"+ Т_ + "Ref_Confirm");
	
КонецПроцедуры //ВыгрузкаПодтверждений()

// Процедура ВыгрузкаФирм
//
// Параметры:
//  Нет
//
// Описание:
//	Процедура выгружает список организаций для приложения Агент+ 1.5
// 
Процедура ВыгрузкаФирм() Экспорт
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Firms" + Т_ + "Struct:FirmID,Name,CodesList,=Addr,=Tel,=UseVAT,=UseSF," + 
						 "=DocPrefix,_FNAME,_INN,_KPP,_OKPO,_BANK,_BIK,_BANKADR,_KSCHET,_RSCHET,_DIREKTOR,_GLBUH");
	//Выше названия параметров, начинающиеся с подчеркивания - это дополнительные параметры, описываемые в тэге Ref_TblStruct
	Выборка = Справочники.Организации.Выбрать();
	Пока Выборка.Следующий() Цикл
		Организация = Выборка.Ссылка;
		ИДФирмы  	   = СокрЛП(Организация.УникальныйИдентификатор());
		КрНаим	 	   = Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Организация.Наименование);
		СписКодовОплат = Т_ + "";
		
		Адрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация, "Юридический");
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			Адрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация, "Фактический");				
		КонецЕсли;          
		Адр 	 = Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Адрес);
		Тел		 = Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация));
		
		УчитыватьНДС = РегистрыСведений.кпкСведенияОрганизаций.Получить(Новый Структура("Объект", Организация)).ИспНДС;
		ИспНДС	 = Т_ + Число(УчитыватьНДС);
		ИспСФ	 = ИспНДС;
		
		Префикс = СокрЛП(ПрефиксАгента) + СокрЛП(Организация.Префикс);		
		ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
		
		Префикс  = Т_ + Префикс;
		Счет	 = Организация.ОсновнойБанковскийСчет;
		ПолнНаим = Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Организация.НаименованиеПолное);
		
		КодыОрганизацииСрезПоследних = РегистрыСведений.КодыОрганизации.СрезПоследних(ТекущаяДата(),Новый Структура("Организация", Выборка.Ссылка));
		Если КодыОрганизацииСрезПоследних.Количество() < 1 Тогда
			ИНН		 = Т_ ;
			КПП		 = Т_ ;
			ОКПО	 = Т_ ;
		Иначе
			ИНН		 = Т_ + СокрЛП(КодыОрганизацииСрезПоследних[0].ИНН);
			КПП		 = Т_ + СокрЛП(КодыОрганизацииСрезПоследних[0].ИНН);
			ОКПО	 = Т_ + СокрЛП(КодыОрганизацииСрезПоследних[0].КодПоЕДРПОУ);
		КонецЕсли;
		
		Банк	 = Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Счет.Банк.Наименование);
		БИК	 	 = Т_ + СокрЛП(Счет.Банк.Код);
		АдрБанка = Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Счет.Банк.Адрес);
		КСчет 	 = Т_ + СокрЛП(Счет.Банк.КоррСчет);
		РСчет 	 = Т_ + СокрЛП(Счет.НомерСчета);
		
		//Заполним руководителя
		Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
		Отбор.СтруктурнаяЕдиница = Организация;
		Отбор.ОтветственноеЛицо   = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель;
		СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(ТекущаяДата(), Отбор);
		Если СрезПоследних.Количество() < 1 Тогда
			Дир = Т_;
		Иначе
			Дир = Т_ + СокрЛП(СрезПоследних[0].ФизическоеЛицо);
		КонецЕсли;

		//Заполним главного бухгалтера
		Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
		Отбор.СтруктурнаяЕдиница = Организация;
		Отбор.ОтветственноеЛицо   = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер;
		СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(ТекущаяДата(), Отбор);
		Если СрезПоследних.Количество() < 1 Тогда
			Бух = Т_;
		Иначе
			Бух = Т_ + СокрЛП(СрезПоследних[0].ФизическоеЛицо);
		КонецЕсли;
				
		Текст.ДобавитьСтроку(ИдФирмы + КрНаим + СписКодовОплат + Адр + Тел + ИспНДС + ИспСФ + Префикс
		+ ПолнНаим + ИНН + КПП + ОКПО + Банк + Бик + АдрБанка + КСчет + РСчет + Дир + Бух);
		
		Если Константы.кпкВключитьАвтозаполнениеРегистровСведений.Получить() Тогда
			ДобавитьЗаписьВРегистр(РегистрыСведений.кпкСведенияОрганизаций, Организация);
		КонецЕсли;

	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>"+ Т_ + "Ref_Firms");
	
КонецПроцедуры //ВыгрузкаФирм()

// Процедура ВыгрузкаТорговыхТочек
//
// Параметры:
//  Нет
//
// Описание:
//	Процедура выгружает список торговых для приложения Агент+ 1.5
//  
Процедура ВыгрузкаТорговыхТочек() Экспорт
	
	НачСтрокаСтруктуры = "<Begin>" + Т_ + "Ref_TPoints" + Т_ + "Struct:ClientID,TPointID,Name,Addr,=Tel,=Contact," + 
															   "=Category,=PriceTypes,=PriceType,=Zone,_TPTYPE";
	
	Текст.ДобавитьСтроку(НачСтрокаСтруктуры);
	
	РежимВыгрузкиКонтрагентов = Константы.кпкРежимВыгрузкиКонтрагентов.Получить();

	Для Инд = 0 По сзКлиентыАгента.Количество() - 1 Цикл
		
		Клиент = сзКлиентыАгента.Получить(Инд).Значение;
		ИДКлиента = СокрЛП(Клиент.УникальныйИдентификатор());
		Выборка = Справочники.кпкТорговыеТочки.Выбрать( , Клиент);
		
		Пока Выборка.Следующий() Цикл
			ТоргТочка = Выборка.Ссылка;
			Если ТоргТочка.ПометкаУдаления Тогда Продолжить; КонецЕсли;  			
			
			// Выгрузка контрагентов по плану посещений или из списка контрагентов для агента
			Если (РежимВыгрузкиКонтрагентов = 0) или (РежимВыгрузкиКонтрагентов = 2) Тогда
				Если сзТоргТочкиАгента.НайтиПоЗначению(ТоргТочка) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ИДТочки    = СокрЛП(ТоргТочка.УникальныйИдентификатор());
			НаимТочки  = кпкАгентПлюс.УбратьНечитаемыеСимволы(ТоргТочка.Наименование);
			Адрес 	   = кпкАгентПлюс.УбратьНечитаемыеСимволы(ТоргТочка.Адрес);
			Телефон    = СокрЛП(ТоргТочка.Телефоны);			
			Категория  = ?(ЗначениеЗаполнено(ТоргТочка.Категория), ТоргТочка.Категория.Код, "0");
			
			СтрКЛ = "";
			Для Каждого СтрокаКЛ Из ТоргТочка.КонтактныеЛица Цикл
				СтрКЛ = СтрКЛ + СтрокаКЛ.КонтактноеЛицо.Наименование + ", ";
			КонецЦикла;
			
			СтрКЛ = Лев(СтрКЛ, СтрДлина(СтрКЛ) - 2); // убираем запятую			
			Контакты = Лев(кпкАгентПлюс.УбратьНечитаемыеСимволы(СтрКЛ), 128);
			
			ОсновнойТипЦены = "";
			Если ЗначениеЗаполнено(ТоргТочка.ОсновнойТипЦены) Тогда
				ОсновнойТипЦены   = ПолучитьКодТипаЦены(ТоргТочка.ОсновнойТипЦены, ТоргТочка);			
			КонецЕсли;
			
			СтрСписокТиповЦен = СформироватьСтрокуСКодамиТиповЦен(ТоргТочка.ТипыЦен, ТоргТочка);
			
			Текст.ДобавитьСтроку(ИДКлиента + Т_ + ИДТочки + Т_ + НаимТочки + Т_ + Адрес + Т_ +  Телефон + Т_ + 
								 Контакты + Т_ + Категория + Т_ + СтрСписокТиповЦен + Т_ + ОсновнойТипЦены + Т_ +
								 + Т_ + ТоргТочка.Зона.Наименование + Т_ + ТоргТочка.ТипТочки.Код);
			ИдКлиента = "*";
		КонецЦикла;
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_TPoints");
	
КонецПроцедуры //ВыгрузкаТорговыхТочек()

// Процедура ВыгрузкаКлиентов
//
// Параметры:
//  Нет
//
// Описание:
//	Процедура выгружает список клиентов для приложения Агент+ 1.5
//
Процедура ВыгрузкаКлиентов() Экспорт
	
	НачСтрокаСтруктуры = "<Begin>" + Т_ + "Ref_Clients" + Т_ + "Struct:ClientID,Name,Credit,Debt,Discount,Tel,=Addr,"
						 + "PriceType,PriceTypes,=BlockSales,=FirmID,=UsePPrices,=Category,_INN,_KPP,_FNAME,_BANK,_BIK,"
						 + "_BANKADR,_KSCHET,_RSCHET,=FolderID,=IsFolder";
						 
	Текст.ДобавитьСтроку(НачСтрокаСтруктуры);
	
	сзВыгруженныеКлиенты = Новый СписокЗначений;
	
	ТекстУсловияДоговоров = "";
	
	РежимВыгрузкиКонтрагентов = Константы.кпкРежимВыгрузкиКонтрагентов.Получить();
	
	Если РежимВыгрузкиКонтрагентов = 1 Тогда		 
		ТекстУсловияДоговоров = " И Расчеты.Договор В ИЕРАРХИИ(&СписокДоговоров)";
	КонецЕсли; 	

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНоменклатуры.Номенклатура,
	|	СкидкиНоменклатуры.ХарактеристикаНоменклатуры,
	|	СкидкиНоменклатуры.Качество,
	|	СкидкиНоменклатуры.Условие,
	|	СкидкиНоменклатуры.ЗначениеУсловия,
	|	СкидкиНоменклатуры.ПроцентСкидкиНаценки,
	|	СкидкиНоменклатуры.ПолучательСкидки
	|ПОМЕСТИТЬ кпкСкидки
	|ИЗ
	|	РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(
	|			&Период,
	|			Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И Качество В (&МассивКачество)                               	
	|			И Условие В (&МассивУсловий)) КАК СкидкиНоменклатуры
	|ГДЕ
	|	СкидкиНоменклатуры.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И (СкидкиНоменклатуры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ КОНЕЦПЕРИОДА(СкидкиНоменклатуры.ДатаОкончания, ДЕНЬ) >= &Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(Расчеты.СуммаВзаиморасчетовОстаток, 0) КАК Долг,
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент
	|ПОМЕСТИТЬ Расчеты
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&Период, Контрагент В ИЕРАРХИИ (&СписокКлиентов)) КАК Расчеты
	|		ПО ДоговорыКонтрагентов.Ссылка = Расчеты.ДоговорКонтрагента
	|			И ДоговорыКонтрагентов.Владелец = Расчеты.Контрагент
	|			И ДоговорыКонтрагентов.Организация = Расчеты.Организация
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И (НЕ ДоговорыКонтрагентов.ЭтоГруппа)
	|	И ДоговорыКонтрагентов.Владелец В ИЕРАРХИИ(&СписокКлиентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	МАКСИМУМ(кпкСкидки.ПроцентСкидкиНаценки) КАК Скидка
	|ПОМЕСТИТЬ кпкСкидкиКонтрагентов
	|ИЗ
	|	кпкСкидки КАК кпкСкидки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Ссылка = кпкСкидки.ПолучательСкидки)
	|ГДЕ
	|	Контрагенты.Ссылка В ИЕРАРХИИ(&СписокКлиентов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Контрагенты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Клиент,
	|	ВЫБОР
	|		КОГДА кпкСкидкиКонтрагентов.Скидка > &ОбщаяСкидка
	|			ТОГДА кпкСкидкиКонтрагентов.Скидка
	|		ИНАЧЕ &ОбщаяСкидка
	|	КОНЕЦ КАК Скидка,
	|	ЕСТЬNULL(Расчеты.Долг, 0) КАК Долг,
	|	Расчеты.Договор.ДопустимаяСуммаЗадолженности КАК Кредит,
	|	ЕСТЬNULL(Расчеты.Договор, &ПустойДоговор) КАК Договор
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ кпкСкидкиКонтрагентов КАК кпкСкидкиКонтрагентов
	|		ПО Контрагенты.Ссылка = кпкСкидкиКонтрагентов.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расчеты КАК Расчеты
	|		ПО Контрагенты.Ссылка = Расчеты.Контрагент
	|ГДЕ
	|	Контрагенты.Ссылка В ИЕРАРХИИ(&СписокКлиентов)
	|	И (НЕ Контрагенты.ПометкаУдаления)" + ТекстУсловияДоговоров + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагенты.Наименование
	|ИТОГИ
	|	МАКСИМУМ(Скидка),
	|	СУММА(Долг)
	|ПО
	|	Клиент ИЕРАРХИЯ,
	|	Договор";	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ОбщаяСкидкаДляКонтрагентов = ПолучитьОбщуюСкидку();
	
	МассивКачество = Новый Массив;
	МассивКачество.Добавить(Справочники.Качество.Новый);
	
	МассивУсловий = Новый Массив;
	МассивУсловий.Добавить(Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	МассивУсловий.Добавить(Перечисления.УсловияСкидкиНаценки.ПустаяСсылка());	
	
	Запрос.УстановитьПараметр("Период",       	 ТекущаяДата());
	Запрос.УстановитьПараметр("ПустойДоговор",   Справочники.ДоговорыКонтрагентов.ПустаяСсылка());	
	Запрос.УстановитьПараметр("Агент",        	 ВыбАгент);	
	Запрос.УстановитьПараметр("СписокКлиентов",  сзКлиентыАгента);	
	Запрос.УстановитьПараметр("СписокДоговоров", ТаблицаДоговоровАгента.ВыгрузитьКолонку("Договор"));
	Запрос.УстановитьПараметр("МассивКачество",  МассивКачество);
	Запрос.УстановитьПараметр("МассивУсловий",   МассивУсловий);	
	Запрос.УстановитьПараметр("ОбщаяСкидка"   ,  ОбщаяСкидкаДляКонтрагентов);
	
	Взаиморасчеты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СчЭлементов = 0;
		
	ВсегоЭлементов = Взаиморасчеты.Количество();
		
	СписокВыгруженныхГрупп = Новый СписокЗначений;
	
	ТекИдРодителя = "";
	
	Пока Взаиморасчеты.Следующий() Цикл
		
		СчЭлементов = СчЭлементов + 1;
		
		ПроцентВыгрузки = Окр(СчЭлементов/ВсегоЭлементов*100, 0);		
		
		#Если Клиент Тогда
			Состояние("Выгрузка контрагентов: " + ПроцентВыгрузки + "%");			
			ОбработкаПрерыванияПользователя();
		#КонецЕсли   			
				
		Клиент       	= Взаиморасчеты.Клиент;
		ИДКлиента    	= СокрЛП(Клиент.УникальныйИдентификатор());
		ОсновнойДоговор = Клиент.кпкОсновнойДоговорКонтрагента;
		Наименование 	= кпкАгентПлюс.УбратьНечитаемыеСимволы(Клиент.Наименование);
		Долг 		 	= Взаиморасчеты.Долг;
		Кредит 		 	= Взаиморасчеты.Кредит;
		Скидка 		 	= Взаиморасчеты.Скидка;
		ОснТипЦены 	 	= "";		
		
		ПризнакГруппы = ?(Клиент.ЭтоГруппа, 1, 0);
		ИдРодителя    = Клиент.Родитель.УникальныйИдентификатор();	
		
		Если ИдРодителя = ТекИдРодителя Тогда
			ИдРодителя = "*";
		Иначе
			ТекИдРодителя = ИдРодителя;
		КонецЕсли; 				
		
		Если Не Клиент.ЭтоГруппа Тогда
			
			Адрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Клиент, "Юридический");
			Если Не ЗначениеЗаполнено(Адрес) Тогда
				Адрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Клиент, "Фактический");				
			КонецЕсли; 		
			
			Телефон = кпкАгентПлюс.УбратьНечитаемыеСимволы(УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Клиент));			
			Адрес   = кпкАгентПлюс.УбратьНечитаемыеСимволы(Адрес);
			
			СтрКонтр = РегистрыСведений.кпкСведенияКонтрагента.Получить(Новый Структура("Объект", Клиент));
			КодСтатуса = ?(ЗначениеЗаполнено(СтрКонтр.Статус), СтрКонтр.Статус.Код, "0");
			
			ИспПерсЦены = ?(СтрКонтр.ИспПерсЦены, "1", "0");
			
			КодКатегории  = ?(ЗначениеЗаполнено(СтрКонтр.Категория), СтрКонтр.Категория.Код, "");
			
			Банк     = "";
			БИК  	 = "";
			АдрБанка = "";
			КСчет 	 = "";
			РСчет 	 = "";
			ОснСчет  = Клиент.ОсновнойБанковскийСчет;
			Если ЗначениеЗаполнено(ОснСчет) Тогда
				Если ЗначениеЗаполнено(ОснСчет.Банк) Тогда
					Банк	 = кпкАгентПлюс.УбратьНечитаемыеСимволы(ОснСчет.Банк.Наименование);
					БИК	 	 = СокрЛП(ОснСчет.Банк.Код);
					АдрБанка = кпкАгентПлюс.УбратьНечитаемыеСимволы(ОснСчет.Банк.Адрес);
					КСчет 	 = СокрЛП(ОснСчет.Банк.КоррСчет);
				КонецЕсли;
				РСчет = СокрЛП(ОснСчет.НомерСчета);
			КонецЕсли;
			
			ВыборкаДоговоры = Взаиморасчеты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			// Если включен режим блокирования продаж
			Если Константы.кпкБлокироватьКлиента.Получить() Тогда				
				
				Пока ВыборкаДоговоры.Следующий() Цикл										
					
					ТекДоговор = ВыборкаДоговоры.Договор;	
					
					РежимВыгрузкиКонтрагентов = Константы.кпкРежимВыгрузкиКонтрагентов.Получить();
					
					Если РежимВыгрузкиКонтрагентов = 1 или РежимВыгрузкиКонтрагентов = 4 Тогда // выгрузка по списку договоров
						
						Если ТаблицаДоговоровАгента.Найти(ТекДоговор, "Договор") = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
					Иначе
						
						Если ТекДоговор <> Клиент.кпкОсновнойДоговорКонтрагента Тогда Продолжить; КонецЕсли;
						
					КонецЕсли;
					
					ДолгПоДоговору = ВыборкаДоговоры.Долг;    
					
					Если ДолгПоДоговору <= 0 Тогда Продолжить; КонецЕсли;
						
						Если ТекДоговор.КонтролироватьСуммуЗадолженности И ДолгПоДоговору > ТекДоговор.ДопустимаяСуммаЗадолженности Тогда
							КодСтатуса = "1";
							Прервать;						
						ИначеЕсли ТекДоговор.КонтролироватьЧислоДнейЗадолженности Тогда // Контроль числа дней задолженности
							
							Запрос = Новый Запрос;
							Запрос.УстановитьПараметр("ДоговорКонтрагента", ТекДоговор);
							
							Запрос.Текст =
							"ВЫБРАТЬ	// Выбирает даты самых ранних документов по договорам, указанным в т.ч. 
							|		МИНИМУМ(ДокументРасчетовСКонтрагентом.Дата) КАК ДатаПервогоДокумента,
							|		ДоговорКонтрагента
							|	ИЗ	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(, 
							|		ДоговорКонтрагента = &ДоговорКонтрагента)
							|	ГДЕ СуммаВзаиморасчетовОстаток > 0	// Дебиторская задолженность больше 0
							|		И ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
							|		И ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности
							|	СГРУППИРОВАТЬ ПО ДоговорКонтрагента";
							
							Выборка = Запрос.Выполнить().Выбрать();
							
							Если Выборка.Следующий() Тогда
								ДопустимоеЧислоДнейЗадолженности = ТекДоговор.ДопустимоеЧислоДнейЗадолженности;
								
								Если Константы.СпособКонтроляДнейЗадолженности.Получить() = Перечисления.СпособыКонтроляДнейЗадолженности.ПоКалендарнымДням Тогда
									РазницаДатВСекундах = (ТекущаяДата() - Выборка.ДатаПервогоДокумента);
									
									РазницаДней = Цел(РазницаДатВСекундах/(24 * 60 * 60));
								Иначе
									РазницаДней = ЗаполнениеДокументов.ЧислоРабочихДней(Выборка.ДатаПервогоДокумента, ТекущаяДата());
								КонецЕсли;
								
								Если РазницаДней > ДопустимоеЧислоДнейЗадолженности Тогда
									КодСтатуса = "1";
									Прервать;									
								КонецЕсли;
							КонецЕсли;
													
						КонецЕсли;   					
										
				КонецЦикла;	
				
			КонецЕсли;	
					
			сзВыгруженныеКлиенты.Добавить(Клиент);
			
			// Устанавливаем по умолчанию первый попавшийся тип цены и фирму по договору
			ВыборкаДоговоры.Сбросить();
			
			// В эту переменную передается идентификатор фирмы, закрепленной за контрагентом.
			// Можно указывать фирму из основного договора, при необходимости нужно раскомментировать
			// текст ниже:
			//Если ЗначениеЗаполнено(ОсновнойДоговор) Тогда
			//	Если ЗначениеЗаполнено(ОсновнойДоговор.Организация) Тогда
			//		ИдФирмы = ОсновнойДоговор.Организация.УникальныйИдентификатор();
			//	КонецЕсли;
			//КонецЕсли;
			
			ИдФирмы = "";
						
			Если ВыборкаДоговоры.Следующий() Тогда					
				ОснТипЦены = ПолучитьКодТипаЦены(ВыборкаДоговоры.Договор.ТипЦен, ВыборкаДоговоры.Договор);				
			КонецЕсли;
						
			// Устанавливаем доступность типов цен для контрагента
			ДоступностьТиповЦен = РегистрыСведений.кпкСведенияКонтрагента.Получить(Новый Структура("Объект", Клиент)).ДоступностьТиповЦен;
			
			СписТиповЦен = "";
			
			Если ДоступностьТиповЦен = Перечисления.кпкДоступностьТиповЦен.ДоступныВсеТипыЦен Тогда
				
				СписТиповЦен = "";
				
			ИначеЕсли ДоступностьТиповЦен = Перечисления.кпкДоступностьТиповЦен.ЦенаОсновногоДоговораКонтрагента Тогда
				
				СписТиповЦен = ПолучитьКодТипаЦены(ОсновнойДоговор.ТипЦен, ОсновнойДоговор);
				ОснТипЦены   = СписТиповЦен;				
				
			ИначеЕсли ДоступностьТиповЦен = Перечисления.кпкДоступностьТиповЦен.ЦеныВсехДоговоровКонтрагента Тогда
				
				ВыборкаДоговоры.Сбросить();
				
				Пока ВыборкаДоговоры.Следующий() Цикл					
					СписТиповЦен = СписТиповЦен + ПолучитьКодТипаЦены(ВыборкаДоговоры.Договор.ТипЦен, ВыборкаДоговоры.Договор) + ",";					
				КонецЦикла;
				
				СписТиповЦен = Лев(СписТиповЦен, СтрДлина(СписТиповЦен) - 1); // Убрали последнюю запятую  
				
			ИначеЕсли ДоступностьТиповЦен = Перечисления.кпкДоступностьТиповЦен.ТипыЦенИзСписка Тогда
				
				ДоступныеТипыЦен = РегистрыСведений.кпкСведенияКонтрагента.Получить(Новый Структура("Объект", Клиент)).ДоступныеТипыЦен.Получить();
				
				Если Не ДоступныеТипыЦен = Неопределено Тогда
					Для Каждого СтрокаТаб Из ДоступныеТипыЦен Цикл
						Если СтрокаТаб.Основной Тогда
							ОснТипЦены = ПолучитьКодТипаЦены(СтрокаТаб.ТипЦены, РегистрыСведений.кпкСведенияКонтрагента, Клиент);
						КонецЕсли;
						СписТиповЦен = СписТиповЦен + ПолучитьКодТипаЦены(СтрокаТаб.ТипЦены, РегистрыСведений.кпкСведенияКонтрагента, Клиент) + ",";
					КонецЦикла;
					СписТиповЦен = Лев(СписТиповЦен, СтрДлина(СписТиповЦен) - 1); // Убрали последнюю запятую  
				КонецЕсли;
				
			КонецЕсли;
			
			Текст.ДобавитьСтроку(ИДКлиента + Т_ + Наименование + Т_ +  кпкАгентПлюс.ФорматироватьЧисло(Кредит) + Т_ + кпкАгентПлюс.ФорматироватьЧисло(Долг) 
			+ Т_ + Формат(Скидка, "ЧРД=.") + Т_ + Телефон + Т_ + Адрес + Т_ + ОснТипЦены + Т_ + СписТиповЦен + Т_ + КодСтатуса + Т_
			+ ИДФирмы + Т_ + ИспПерсЦены + Т_ + КодКатегории + Т_+ Клиент.ИНН + Т_ + Клиент.ИНН + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Клиент.НаименованиеПолное)
			+ Т_ + Банк + Т_ + БИК + Т_ + АдрБанка + Т_ + КСчет + Т_ + РСчет + Т_ + СокрЛП(ИдРодителя) + Т_ + Строка(ПризнакГруппы));
			
			Если Константы.кпкВключитьАвтозаполнениеРегистровСведений.Получить() Тогда
				ДобавитьЗаписьВРегистр(РегистрыСведений.кпкСведенияКонтрагента, Клиент);
			КонецЕсли;
			
		Иначе // выгрузка группы			
			  // Это глюк платформы при выборке запроса по иерархии,
			  // поэтому делаем такую проверку
			Если Не СписокВыгруженныхГрупп.НайтиПоЗначению(Клиент) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СписокВыгруженныхГрупп.Добавить(Клиент);
							
			Текст.ДобавитьСтроку(ИДКлиента + Т_ + Наименование + Т_ + кпкАгентПлюс.ФорматироватьЧисло(Кредит) + Т_ + кпкАгентПлюс.ФорматироватьЧисло(Долг) 
			+ Т_ + Формат(Скидка, "ЧРД=.") + Т_ + "" + Т_ + "" + Т_ + ОснТипЦены + Т_ + "" + Т_ + "" + Т_ + "" + Т_ + "" + Т_ + "" + Т_+ ""+ Т_ + ""
			+ Т_ + "" + Т_ + "" + Т_ + "" + Т_ + "" + Т_ + "" + Т_ + "" + Т_ + СокрЛП(ИдРодителя) + Т_ + Строка(ПризнакГруппы));     
		КонецЕсли;

	КонецЦикла;
		
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Clients");
	
КонецПроцедуры //ВыгрузкаКлиентов()

// Процедура ВыгрузкаСкладов
//
// Параметры:
//  Нет
//
// Описание:
//	Процедура выгружает список складов для приложения Агент+ 1.5
//  
Процедура ВыгрузкаСкладов() Экспорт
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Stores" + Т_ + "Struct:ObjID,Name");
	
	сзСклады = Новый СписокЗначений;
	СтОтбор  = Новый Структура("Объект", ВыбАгент);
	
	Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(СтОтбор);
	Если Выборка.Следующий() Тогда
		сзСклады.ЗагрузитьЗначения(Выборка.СписокСкладов.Склады.ВыгрузитьКолонку("Склад"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Склады.Ссылка ИЗ Справочник.Склады КАК Склады ГДЕ Склады.Ссылка В(&парСклады)";					
	Запрос.УстановитьПараметр("парСклады", сзСклады);
	Склады = Запрос.Выполнить().Выбрать();
	Пока Склады.Следующий() Цикл
		Текст.ДобавитьСтроку(СокрЛП(Склады.Ссылка.УникальныйИдентификатор()) + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Склады.Ссылка.Наименование));
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>"+ Т_ + "Ref_Stores");
	
КонецПроцедуры //ВыгрузкаСкладов()

// Процедура ВыгрузкаМаршрутов
//
// Параметры:
//  Нет
//
// Описание:
//	Процедура выгружает маршруты для приложения Агент+ 1.5
// 
Процедура ВыгрузкаМаршрутов() Экспорт
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Routes" + Т_ + "Struct:=RouteID,ClientID,=TPointID,RouteTime,=Comment");
	
	Если ЗначениеЗаполнено(ПланПосещений) Тогда	
		ДатаНачала    = НачалоДня(ПланПосещений.Дата);
		ДатаОкончания = КонецДня(ДатаНачала + (ПланПосещений.ИнтервалПланирования - 1)*86400);
	Иначе
		ДатаНачала    = НачалоМесяца(ТекущаяДата());
		ДатаОкончания = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
	ТекДата = ДатаНачала;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Агент", ВыбАгент);
	Пока ТекДата < ДатаОкончания Цикл
		
		Выборка = Документы.кпкМаршрут.Выбрать(НачалоДня(ТекДата), КонецДня(ТекДата), СтруктураОтбора, "Дата Убыв");
		
		Если Выборка.Следующий() Тогда
			
			Если Выборка.Проведен и Не Выборка.ДокОснование.ПометкаУдаления Тогда
				
				Для Каждого Стр Из Выборка.СписокПосещений Цикл
					
					Если ИспТочек = 0 Тогда					
						Клиент 	  = Стр.Контрагент;
						ТоргТочка = Справочники.кпкТорговыеТочки.ПустаяСсылка();					
						УИ  	  = Клиент.УникальныйИдентификатор();
						Если Клиент.Пустая() Тогда Продолжить; КонецЕсли;
					Иначе					
						ТоргТочка = Стр.ТорговаяТочка;					
						Клиент    = ТоргТочка.Владелец;
						УИ  	  = ТоргТочка.УникальныйИдентификатор();
						Если ТоргТочка.Пустая() Тогда Продолжить; КонецЕсли;
					КонецЕсли;
					
					Если сзКлиентыАгента.НайтиПоЗначению(Клиент) = Неопределено Тогда
						сзКлиентыАгента.Добавить(Клиент);
					КонецЕсли; 
					
					Если сзТоргТочкиАгента.НайтиПоЗначению(ТоргТочка) = Неопределено Тогда
						сзТоргТочкиАгента.Добавить(ТоргТочка);
					КонецЕсли; 
					
					//Если ТДопКлиенты.Найти(Парам, ИмяПарам) = Неопределено Тогда
					//	НоваяСтрока = ТДопКлиенты.Добавить();
					//	НоваяСтрока.Клиент = Клиент;
					//	НоваяСтрока.Должник = 0;
					//	Если ИспТочек = 0 Тогда
					//		НоваяСтрока.ТоргТочка = "";
					//	Иначе
					//		НоваяСтрока.ТоргТочка = Парам;
					//	КонецЕсли;							
					//КонецЕсли;    
					                       
					Если Выборка.ИспользоватьВремя Тогда						
						Время = Формат(ТекДата, "ДФ=""гггг-ММ-дд""")  + " " + Формат(Стр.Время, "ДЛФ=T");						
					Иначе
						Время = кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(ТекДата, "Дата");
					КонецЕсли;
					
					Текст.ДобавитьСтроку(" " + Т_ + СокрЛП(Клиент.УникальныйИдентификатор()) + Т_ + СокрЛП(УИ) + Т_ + Время + Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Стр.Напоминание));
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли Не ПланПосещений.Пустая() Тогда  		
					
			Смещение = (НачалоДня(ТекДата) - НачалоДня(ПланПосещений.Дата))/86400;
			
			Если Смещение < 0 Тогда
				ТекДата = ТекДата + 86400;
				Продолжить;				
			КонецЕсли;
			
			Для Каждого Стр Из ПланПосещений.Дни Цикл
				Если Вычислить("Стр.Д" + (1 + Смещение)) Тогда
					// { Арт 2007-12-07
					Если ИспТочек = 0 Тогда
						Парам = Стр.Контрагент;
						Клиент = Стр.Контрагент;
						ТоргТочка = Справочники.кпкТорговыеТочки.ПустаяСсылка();
						ИмяПарам = "Клиент";
						УИ = ""; 
					Иначе
						Парам = Стр.ТорговаяТочка;							
						Клиент = Парам.Владелец;							
						ТоргТочка = Стр.ТорговаяТочка;
						ИмяПарам = "ТоргТочка";
						УИ  = Парам.УникальныйИдентификатор();
					КонецЕсли;                                                    						
					
					Время = кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(ТекДата, "Дата");
					
					//Если ТДопКлиенты.Найти(Парам, ИмяПарам) = Неопределено Тогда
					//	НоваяСтрока = ТДопКлиенты.Добавить();
					//	НоваяСтрока.Клиент = Клиент;
					//	НоваяСтрока.Должник = 0;
					//	НоваяСтрока.ТоргТочка = ТоргТочка;						
					//КонецЕсли;
					
					Текст.ДобавитьСтроку(" " + Т_ + СокрЛП(Клиент.УникальныйИдентификатор()) + Т_ + СокрЛП(УИ) + Т_ + Время + Т_ + "");
					// Арт 2007-12-07 }
				КонецЕсли;
			КонецЦикла;
		//ИначеЕсли Деньнедели(ТекДата) < 6 Тогда
		//	Сообщить("Не выгружен маршрут на дату: " + Формат(ТекДата, "ДФ=""дд.ММ.гггг"" 'г.'"));
		КонецЕсли;		
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Routes");
	
КонецПроцедуры //ВыгрузкаМаршрутов()

// Процедура ВыгрузкаВзаиморасчетов
//
// Параметры:
//  Нет
//
// Описание:
//	Процедура выгружает долги по клиентам/торго.точкам для приложения Агент+ 1.5
// 
Процедура ВыгрузкаВзаиморасчетов() Экспорт
	
	РежимВыгрузкиДолгов = Константы.кпкРежимВыгрузкиДолгов.Получить();
	
	// Режим выгрузки долгов по регистру взаиморасчетов
	Если РежимВыгрузкиДолгов = 0 Тогда   
		ИмяРегистра  = "ВзаиморасчетыСКонтрагентами";	
		ИмяИзмерения = "Сделка"; 
	Иначе  // Иначе по регистру взаиморасчеты по документам расчетов
		ИмяРегистра  = "ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов";
		ИмяИзмерения = "ДокументРасчетовСКонтрагентом"; 
	КонецЕсли;
	
	ТекстУсловияДоговоров = "";
	
	РежимВыгрузкиКонтрагентов = Константы.кпкРежимВыгрузкиКонтрагентов.Получить();
	
	Если РежимВыгрузкиКонтрагентов = 1 Тогда
		ТекстУсловияДоговоров = "Контрагент В (&СписокКлиентов) И ДоговорКонтрагента В ИЕРАРХИИ (&СписокДоговоров)";
	ИначеЕсли РежимВыгрузкиКонтрагентов = 4 Тогда
		ТекстУсловияДоговоров = "ВЫБОР КОГДА Контрагент В ИЕРАРХИИ (&СписокКлиентов) И Контрагент В (&СписКлиентовПоДоговорам)" +
								"ТОГДА Контрагент В ИЕРАРХИИ (&СписокКлиентов) И ДоговорКонтрагента В ИЕРАРХИИ (&СписокДоговоров)" +
								"ИНАЧЕ Контрагент В ИЕРАРХИИ (&СписокКлиентов) КОНЕЦ";
	Иначе
		ТекстУсловияДоговоров = "Контрагент В (&СписокКлиентов)";		
	КонецЕсли; 	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.Сделка КАК Сделка,
	|	ВложенныйЗапрос.Долг КАК Долг,	
	|	ВложенныйЗапрос.ДоговорКонтрагента КАК Договор
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегистрВзаиморасчетов.Организация КАК Организация,
	|		РегистрВзаиморасчетов.Контрагент КАК Контрагент,
	|		РегистрВзаиморасчетов." + ИмяИзмерения + " КАК Сделка,
	|		СУММА(РегистрВзаиморасчетов.СуммаВзаиморасчетовОстаток) КАК Долг,	
	|		РегистрВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагента
	|	ИЗ
	|		РегистрНакопления." + ИмяРегистра + ".Остатки(&ДатаКон, " + ТекстУсловияДоговоров + ") КАК РегистрВзаиморасчетов
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РегистрВзаиморасчетов.Организация,
	|		РегистрВзаиморасчетов.Контрагент,
	|		РегистрВзаиморасчетов." + ИмяИзмерения + ",
	|		РегистрВзаиморасчетов.ДоговорКонтрагента) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Долг > 0
	|ИТОГИ
	|	СУММА(Долг)	
	|ПО
	|	Организация,
	|	Контрагент";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаКон",     	 		 ТекущаяДата());	
	Запрос.УстановитьПараметр("СписокКлиентов",  		 сзКлиентыАгента);
	Запрос.УстановитьПараметр("СписокДоговоров", 		 ТаблицаДоговоровАгента.ВыгрузитьКолонку("Договор"));
	Запрос.УстановитьПараметр("СписКлиентовПоДоговорам", ТаблицаДоговоровАгента.ВыгрузитьКолонку("Контрагент"));
	
	Результат = Запрос.Выполнить();
	
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Структура тега
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Doc_Debt" + Т_ + "Struct:DocID,DocState,DocFlags,TimeCrt,DocNumber,=Category," + 
															"FirmID,ClientID,=TPointID,DocSum,Comment,=DocDescr,FullSum,PayDate");
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		ИДФирмы = ВыборкаОрганизация.Организация.УникальныйИдентификатор();
				
		ВыборкаКлиент = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКлиент.Следующий() Цикл
			
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
		
			Клиент 	  = ВыборкаКлиент.Контрагент;			
			ИДКлиента = Клиент.УникальныйИдентификатор();
			
			ВыборкаДок = ВыборкаКлиент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
			Пока ВыборкаДок.Следующий() Цикл  
				
				ТекДата = НачалоДня(ТекущаяДата());
				
				Док     = ВыборкаДок.Сделка;
				ДокДолг = ВыборкаДок.Долг;
				
				ТоргТочка = Справочники.кпкТорговыеТочки.ПустаяСсылка();
				
				КодКат = "0";
				
				// Когда взаиморасчеты с контрагентом ведутся по договорам
				Если Док = Неопределено Тогда 									
					ИДДолга  	     = ВыборкаДок.Договор.УникальныйИдентификатор();
					ИДТоргТочки      = ИДКлиента;
					// Устанавливаем номер договора вместо номера документа
					НомерДок         = СокрЛП(ВыборкаДок.Договор.Номер);
					ДатаВремяДок     = кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(ТекДата);
					Комментарий      = "Долг по договору";
					ПредставлениеДок = кпкАгентПлюс.УбратьНечитаемыеСимволы(ВыборкаДок.Договор.Наименование);
					СрокДок 	  	 = ТекДата;   
					СуммаДок 	     = ДокДолг;
					СостДок 	  	 = "1";
					СостДокВЦБД   	 = "1";							
					КодКат        	 = "";  	
					
					ВалютаВзаиморасчетов = ВыборкаДок.Договор.ВалютаВзаиморасчетов;
					
				// Когда взаиморасчеты с контрагентом ведутся по документам (сделки или  
				// документы расчетов, в зависимости от константы "РежимВыгрузкиДолгов")	
				Иначе     					
					КредДок   = Док;
				
					Если КредДок.Пустая() Тогда
						Продолжить;
					КонецЕсли;
					
					МетаданныеТоргТочка = КредДок.Метаданные().Реквизиты.Найти("кпкТорговаяТочка");					
					Если МетаданныеТоргТочка <> Неопределено Тогда
						ТоргТочка = КредДок.кпкТорговаяТочка;
						Если НЕ ТоргТочка.Пустая() Тогда
							ИДТоргТочки = ТоргТочка.УникальныйИдентификатор();
						Иначе
							ИДТоргТочки = ИДКлиента;
						КонецЕсли;						
					Иначе
						ИДТоргТочки = ИДКлиента;						
					КонецЕсли;  
					
					ИДДолга  	     = КредДок.УникальныйИдентификатор();
					НомерДок       	 = СокрЛП(КредДок.Номер);
					ДатаВремяДок  	 = кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(КредДок.Дата);
					Комментарий   	 = кпкАгентПлюс.УбратьНечитаемыеСимволы(КредДок.Комментарий);
					СостДок 	     = ?(КредДок.Проведен, "1", "2");					
					СуммаДок 	  	 = 0;  
					
					ПредставлениеДок = КредДок.Метаданные().Представление();
					
					Если СокрЛП(КредДок.Метаданные().Имя) = "КорректировкаДолга" Тогда
						СуммаДок = 0;
						Для Каждого СтрокаТЧ Из КредДок.СуммыДолга Цикл
							Если СтрокаТЧ.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда 
								СуммаДок = СуммаДок + СтрокаТЧ.Сумма; 
							ИначеЕсли СтрокаТЧ.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда 
								СуммаДок = СуммаДок - СтрокаТЧ.Сумма; 
							КонецЕсли;
						КонецЦикла;						
					ИначеЕсли КредДок.Метаданные().Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
						СуммаДок = КредДок.СуммаДокумента;
					КонецЕсли;
					
					СостДокВЦБД = Строка(кпкАгентПлюс.АПВернутьСостояниеДок(КредДок) + 8);	
										
					ДатаОплаты = КредДок.Метаданные().Реквизиты.Найти("ДатаОплаты");
					
					Если ДатаОплаты = Неопределено Тогда				
						СрокДок = НачалоДня(КредДок.Дата);
					Иначе				
						СрокДок = НачалоДня(КредДок.ДатаОплаты);
					КонецЕсли; 
					
					// Ищем в справочнике категорий нужную категорию для документа
					КодКат = ВернутьКодКатегорииДокумента(КредДок, Истина);
					
					ВалютаВзаиморасчетов = КредДок.ВалютаДокумента;
														
				КонецЕсли;	
				
				Если СрокДок > ТекДата Тогда
					Продолжить;
				КонецЕсли;
				
				// В качестве примера:  					
				// Если оплата просрочена более чем на 30 дней, то документы 
				// можно выделять красным цветом				
				 ВысокаяВажность = ?(СрокДок + 30 < ТекущаяДата(), 64, 0); 
				// Если равно 64, то документ в КПК будет выделен красным цветом, НО ...
				// Но обратите внимание, если Вы в КПК используете категории документов, то выделение документов 
				// крансым цветом становится возможным только при помощи соответствующей цветовой категории
				// документа, выгружаемой в параметре Category тэга, если же режим использования цветовых 
				// категорий в КПК отключен, то документы с флагом 64 (как приведено в строке кода выше) 
				// будут выделяться красным цветом.				
				
				//СтруктураОтбора = Новый Структура("Валюта", ВалютаВзаиморасчетов);
				//СтруктураКурсаДолга = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДата(), СтруктураОтбора);
				//
				//СуммаДокВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДок, ВалютаВзаиморасчетов,
				//мВалютаРегламентированногоУчета, СтруктураКурсаДолга.Курс, КурсВалютыРегУчета,
				//СтруктураКурсаДолга.КратностьВзаиморасчетов, КратностьВалютыРегУчета);	   				
				
				СтрСрокДок = кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(СрокДок, "Дата");  
				
				Текст.ДобавитьСтроку(Строка(ИдДолга) + Т_ + СостДок + Т_ + СостДокВЦБД + Т_ + ДатаВремяДок + Т_
				+ НомерДок + Т_ + КодКат + Т_ + Строка(ИдФирмы) + Т_ + Строка(ИдКлиента) + Т_ + Строка(ИдТоргТочки) + Т_
				+ кпкАгентПлюс.ФорматироватьЧисло(ДокДолг) + Т_ + Комментарий + Т_ + ПредставлениеДок + Т_
				+ кпкАгентПлюс.ФорматироватьЧисло(СуммаДок) + Т_ + СтрСрокДок);
				
				//Если ЗначениеЗаполнено(ТоргТочка) Тогда
				//	Если ТДопКлиенты.Найти(ТоргТочка, "ТоргТочка") = Неопределено Тогда
				//		СтрокаТДопКлиенты = ТДопКлиенты.Добавить();
				//		СтрокаТДопКлиенты.Клиент    = ТоргТочка.Владелец;
				//		СтрокаТДопКлиенты.Должник   = 1;
				//		СтрокаТДопКлиенты.ТоргТочка = ТоргТочка;
				//	КонецЕсли;
				//Иначе
				//	Если ТДопКлиенты.Найти(Клиент, "Клиент") = Неопределено Тогда
				//		СтрокаТДопКлиенты = ТДопКлиенты.Добавить();
				//		СтрокаТДопКлиенты.Клиент    = Клиент;
				//		СтрокаТДопКлиенты.Должник   = 1;
				//		СтрокаТДопКлиенты.ТоргТочка = Клиент;
				//	КонецЕсли;
				//КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;   
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Doc_Debt");
	
КонецПроцедуры //ВыгрузкаВзаиморасчетов()

// Процедура ВыгрузкаНоменклатуры
//
// Параметры:
//  Нет
//
// Описание:
//	Процедура выгружает номенклатуру согласно ассортименту агента для приложения Агент+ 1.5
//   
Процедура ВыгрузкаНоменклатуры() Экспорт
	
	тзОписаниеКартинок.Очистить();
	
	сзАссортимент = Новый СписокЗначений;
	сзСклады      = Новый СписокЗначений;	
	СтОтбор       = Новый Структура("Объект", ВыбАгент);	
	
	Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(СтОтбор);
	Если Выборка.Следующий() Тогда
		сзАссортимент.ЗагрузитьЗначения(Выборка.Ассортимент.ТАссортимент.ВыгрузитьКолонку("Номенклатура"));
		сзСклады.ЗагрузитьЗначения(Выборка.СписокСкладов.Склады.ВыгрузитьКолонку("Склад"));		
	КонецЕсли;	
	
	КоличествоТиповЦен = тзКатегорииЦен.Количество();
	
	Если КоличествоТиповЦен = 0 Тогда
		ТекстСообщения = "Номенклатура не выгружена, не найдено ни одного типа цен для выгрузки!";
		ОповеститьОСобытии(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_System" + Т_ + "Struct:ObjID,Value");	
		//Выгружаем значение константы GUID_SYSTEM_PRICECOUNT - количество типов цен
		Текст.ДобавитьСтроку(GUID_SYSTEM_PRICECOUNT + Т_ + Строка(КоличествоТиповЦен));
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_System");
		
	СтрВидовЦен = "Price1,";
	Для Поз = 2 По КоличествоТиповЦен Цикл		
		СтрВидовЦен = СтрВидовЦен + "=Price" + Поз + ",";
	КонецЦикла;
	
	// Временно закомментировано, на данный момент выгружается всегда только
	// 3 единицы измерения
	//КолВыгрЕдиниц = Константы.кпкКоличествоЕдиницИзмерения.Получить();
	
	КолВыгрЕдиниц = 3;
	
	СтрЕдИзм = "";	
	Для Сч = 0 По КолВыгрЕдиниц-1 Цикл
		СтрЕдИзм = СтрЕдИзм + "=Unit" + Строка(Сч) + ",";
	КонецЦикла;	
	
	НачСтрокаСтруктуры = "<Begin>" + Т_ + "Ref_Price" + Т_ + "Mode:Full" + Т_ 
	+ "Struct:GoodsID,FolderID,IsFolder,Name,=Code,=NameUnits," + СтрЕдИзм + СтрВидовЦен + 
	"Rest,=Weight,=Weight0,=VAT,=Comment,=StockUnit,=PriceUnit,=Category,_STRANA,_GTD,_FNAME,=PropList"; 
	
	тзШтрихКоды = Новый ТаблицаЗначений;
	тзШтрихКоды.Колонки.Добавить("ИДТовара");
	тзШтрихКоды.Колонки.Добавить("ШтрихКод");
	тзШтрихКоды.Колонки.Добавить("КодЕдиницы");
	
	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
	
	Если РежимВыгрузкиОстатков = 2 Тогда			
		РазрезВыгрузки = "СерияНоменклатуры";		
		СпрРазрез	   = "СерииНоменклатуры";
	Иначе 
		РазрезВыгрузки = "ХарактеристикаНоменклатуры";		
		СпрРазрез	   = "ХарактеристикиНоменклатуры";
	КонецЕсли;
	
	СписокВыгруженныхГрупп = Новый СписокЗначений;
	
	ТекстУсловия = "";
	Если Не флВыгрТоварыСНулевОст Тогда		
		ТекстУсловия = "
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &флРезервы
		|				ТОГДА НоменклатураОстатки.ОстатокСУчетомРезерва > 0
		|			ИНАЧЕ ВЫБОР
		|					КОГДА НоменклатураОстатки.ТМЦ В (&ДопАссортимент)
		|						ТОГДА НоменклатураОстатки.ОстатокНаСкладе >= 0
		|					ИНАЧЕ НоменклатураОстатки.ОстатокНаСкладе > 0
		|				КОНЕЦ
		|		КОНЕЦ";  		
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	НоменклатураОстатки.Разрез КАК Разрез,
	|	СУММА(НоменклатураОстатки.ОстатокРезерва) КАК ОстатокРезерва,
	|	СУММА(НоменклатураОстатки.ОстатокСУчетомРезерва) КАК ОстатокСУчетомРезерва,
	|	НоменклатураОстатки.ТМЦ КАК ТМЦ,
	|	СУММА(НоменклатураОстатки.ОстатокНаСкладе) КАК ОстатокНаСкладе
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Номенклатура.Разрез КАК Разрез,
	|		Номенклатура.Ссылка КАК ТМЦ,
	|		СУММА(0) КАК ОстатокНаСкладе,
	|		СУММА(0) КАК ОстатокРезерва,
	|		СУММА(0) КАК ОстатокСУчетомРезерва
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СпрРазрез.Ссылка КАК Разрез,
	|			Номенклатура.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.Номенклатура КАК Номенклатура
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + СпрРазрез + " КАК СпрРазрез
	|				ПО Номенклатура.Ссылка = СпрРазрез.Владелец
	|		ГДЕ
	|			(Номенклатура.Ссылка В ИЕРАРХИИ (&Ассортимент)
	|					ИЛИ Номенклатура.Ссылка В (&ДопАссортимент))
	|			И Номенклатура.ЭтоГруппа = ЛОЖЬ
	|			И ВЫБОР
	|					КОГДА СпрРазрез.Ссылка ЕСТЬ NULL 
	|						ТОГДА Номенклатура.Ссылка <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ИНАЧЕ СпрРазрез.ПометкаУдаления = ЛОЖЬ
	|				КОНЕЦ) КАК Номенклатура
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура.Разрез,
	|		Номенклатура.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВложенныйЗапрос.Разрез,
	|		ВложенныйЗапрос.ТМЦ,
	|		СУММА(ВложенныйЗапрос.ОстатокНаСкладе),
	|		СУММА(ВложенныйЗапрос.ОстатокРезерва),
	|		СУММА(ВложенныйЗапрос.ОстатокСУчетомРезерва)
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)) КАК ОстатокНаСкладе,
	|			СУММА(ЕСТЬNULL(РезервыОстатки.КоличествоОстаток, 0)) КАК ОстатокРезерва,
	|			СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервыОстатки.КоличествоОстаток, 0)) КАК ОстатокСУчетомРезерва,
	|			ТоварыНаСкладахОстатки." + РазрезВыгрузки + " КАК Разрез,
	|			ТоварыНаСкладахОстатки.Номенклатура КАК ТМЦ
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(
	|					&Период,
	|					(Номенклатура В ИЕРАРХИИ (&Ассортимент)
	|						ИЛИ Номенклатура В (&ДопАссортимент))
	|						И Склад В (&Склады)) КАК ТоварыНаСкладахОстатки
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	|						&Период,
	|						(Номенклатура В ИЕРАРХИИ (&Ассортимент)
	|							ИЛИ Номенклатура В (&ДопАссортимент))
	|							И Склад В (&Склады)) КАК РезервыОстатки
	|				ПО ТоварыНаСкладахОстатки.Номенклатура = РезервыОстатки.Номенклатура
	|					И ТоварыНаСкладахОстатки." + РазрезВыгрузки + " = РезервыОстатки." + РазрезВыгрузки + "
	|					И ТоварыНаСкладахОстатки.Склад = РезервыОстатки.Склад
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТоварыНаСкладахОстатки." + РазрезВыгрузки + ",
	|			ТоварыНаСкладахОстатки.Номенклатура) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Разрез,
	|		ВложенныйЗапрос.ТМЦ) КАК НоменклатураОстатки" + ТекстУсловия + "
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураОстатки.Разрез,
	|	НоменклатураОстатки.ТМЦ
	|ИТОГИ
	|	СУММА(ОстатокРезерва),
	|	СУММА(ОстатокСУчетомРезерва),
	|	СУММА(ОстатокНаСкладе)
	|ПО
	|	ТМЦ ИЕРАРХИЯ,
	|	Разрез";
  
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Период", 	    ТекущаяДата());
	Запрос.УстановитьПараметр("Ассортимент",    сзАссортимент);
	Запрос.УстановитьПараметр("ДопАссортимент", сзДопТовары);
	Запрос.УстановитьПараметр("Склады",         сзСклады);
	Запрос.УстановитьПараметр("РознСклад",      АвтоСклад);	
	Запрос.УстановитьПараметр("флРезервы",      флРезервы);	
		                                    
	Результат = Запрос.Выполнить();	
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Текст.ДобавитьСтроку(НачСтрокаСтруктуры);
	СтОтборЦены = Новый Структура("ТипЦен, Номенклатура");
	
	СчЭлементов = 0;
		
	ВсегоЭлементов = Выборка.Количество();
	
	ТекИдРодителя = "";
	
	РежимВыгрузкиКодов = Константы.кпкРежимВыгрузкиКодов.Получить();
	
	Пока Выборка.Следующий() Цикл
		
		СчЭлементов = СчЭлементов + 1;
		
		ПроцентВыгрузки = Окр(СчЭлементов/ВсегоЭлементов*100, 0);		
		
		#Если Клиент Тогда
			Состояние("Выгрузка номенклатуры: " + ПроцентВыгрузки + "%");			
			ОбработкаПрерыванияПользователя();
		#КонецЕсли   			
			
		Ном 		  = Выборка.ТМЦ;
		НомХар  	  = Выборка.Разрез;
		ПризнакГруппы = ?(Ном.ЭтоГруппа, 1, 0);
		
		Если РежимВыгрузкиКодов = 1 Тогда					
			Код = Ном.Артикул;			
		ИначеЕсли РежимВыгрузкиКодов = 2 Тогда					
			Код = Ном.Код;
		Иначе
			Код = ""
		КонецЕсли; 
		
		// Если длина наименования номенклатуры слишком велика, то можно использовать
		// функцию СократитьНаименование(Наим) для сокращения длины наименования
		// Пример:
		Наим = кпкАгентПлюс.УбратьНечитаемыеСимволы(СократитьНаименование(Ном.Наименование));
		// или стандартный вариант 
		// Наим 		  = СокрЛП(Ном.Наименование);
		
		ПолнНаим   = кпкАгентПлюс.УбратьНечитаемыеСимволы(Ном.НаименованиеПолное);		
		ИдНом 	   = Ном.УникальныйИдентификатор();
		ИдРодителя = Ном.Родитель.УникальныйИдентификатор();	
		
		Если РежимВыгрузкиОстатков = 0 Тогда
			Если ИдРодителя = ТекИдРодителя Тогда
				ИдРодителя = "*";
			Иначе
				ТекИдРодителя = ИдРодителя;
			КонецЕсли; 		
		КонецЕсли;
		
		Остаток = ?(флРезервы, Выборка.ОстатокСУчетомРезерва, Выборка.ОстатокНаСкладе);
		
		Остаток = кпкАгентПлюс.ФорматироватьЧисло(Остаток);
				
		НачСтрокаСтруктуры = НачСтрокаСтруктуры + СтрВидовЦен + "Rest";
		
		Если НЕ Ном.ЭтоГруппа Тогда   
			
			Кат = 0;
			Если ЗначениеЗаполнено(Ном.НоменклатурнаяГруппа) Тогда
				Кат = ПреобразоватьКодСправочника(Ном.НоменклатурнаяГруппа); 				
			КонецЕсли;
						
			Весовой = ?(Ном.Весовой, 1, 0);		
			// По умолчанию устанавливаем вес для единицы хранения остатков
			Вес 	= кпкАгентПлюс.ФорматироватьЧисло(Ном.ЕдиницаХраненияОстатков.Вес);			
						
			// Выбираем все единицы измерения с коэффициентами 
			// пересчета относительно базовой единицы измерения
			//
			Запрос = Новый Запрос ("ВЫБРАТЬ
			|	ЕдиницыИзмерения.Ссылка КАК Единица,
			|	ШтрихКоды.Разрез КАК Разрез,
			|	ЕдиницыИзмерения.Наименование,
			|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору,
			|	ЕдиницыИзмерения.Вес,
			|	ЕдиницыИзмерения.Объем,
			|	ЕдиницыИзмерения.Коэффициент КАК Коэффициент,
			|	ШтрихКоды.Штрихкод КАК Штрихкод
			|ИЗ
			|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|		ПО ЕдиницыИзмерения.Владелец = Номенклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Штрихкоды.Штрихкод КАК Штрихкод,
			|			Штрихкоды.Владелец КАК Владелец,
			|			Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|			Штрихкоды." + РазрезВыгрузки + " КАК Разрез
			|		ИЗ
			|			РегистрСведений.Штрихкоды КАК Штрихкоды
			|		ГДЕ
			|			Штрихкоды.Владелец = &Владелец) КАК ШтрихКоды
			|		ПО ЕдиницыИзмерения.Ссылка = ШтрихКоды.ЕдиницаИзмерения
			|ГДЕ
			|	ЕдиницыИзмерения.Владелец = &Владелец
			|	И Номенклатура.Ссылка = &Владелец
			|	И ЕдиницыИзмерения.Коэффициент <> 0
			|	И ЕдиницыИзмерения.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Коэффициент
			|ИТОГИ
			|	МИНИМУМ(Коэффициент),
			|	МИНИМУМ(Штрихкод)
			|ПО
			|	Единица");
			
			Запрос.УстановитьПараметр("Владелец", Ном);								  
			
			ВыборкаЕд = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Единицы = Новый Массив;			
			
			СтрЕдиницы 	    = "";
			СтрКоэффициенты = "";
			
			СчетчикЕд = 0;
			Пока ВыборкаЕд.Следующий() Цикл
				
				Если ВыборкаЕд.Вес <> 0 Тогда
					Вес = кпкАгентПлюс.ФорматироватьЧисло(Ном.ЕдиницаХраненияОстатков.Вес);			
				КонецЕсли;
				
				Если СчетчикЕд = КолВыгрЕдиниц Тогда
					Прервать;
 				КонецЕсли;				
				
				СтрЕдиницы = СтрЕдиницы + СокрЛП(Лев(ВыборкаЕд.Наименование, 3)) + ",";				
				СтрКоэффициенты = СтрКоэффициенты + кпкАгентПлюс.ФорматироватьЧисло(ВыборкаЕд.Коэффициент) + Т_;
				
				Единицы.Добавить(ВыборкаЕд.Единица);
				
				// Добавляем значения в таблицу штрих-кодов      				
				ВыборкаРазрезаЕд = ВыборкаЕд.Выбрать();
				
				Пока ВыборкаРазрезаЕд.Следующий() Цикл
					
					Разрез = ВыборкаРазрезаЕд.Разрез;		
					
					Если РежимВыгрузкиОстатков > 0 и Разрез = Null Тогда
						Продолжить;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ВыборкаРазрезаЕд.ШтрихКод) Тогда Продолжить; КонецЕсли;
					
					ИдНомДляШК  = ИдНом;
					
					Если Разрез <> Null и ЗначениеЗаполнено(Разрез) Тогда					
						ИдНомДляШК = Разрез.УникальныйИдентификатор();											
					КонецЕсли;
					
					СтрокаШК 		    = тзШтрихКоды.Добавить();
					СтрокаШК.ИДТовара   = ИдНомДляШК;
					СтрокаШК.ШтрихКод   = СокрЛП(ВыборкаРазрезаЕд.ШтрихКод);
					СтрокаШК.КодЕдиницы = СчетчикЕд;					
				КонецЦикла;
				
				СчетчикЕд = СчетчикЕд + 1;
				
			КонецЦикла;
			
			// Добавляем кол-во единиц до кол-ва, указанного в константе
			Если СчетчикЕд <> КолВыгрЕдиниц Тогда
				Пока СчетчикЕд <> КолВыгрЕдиниц Цикл
					СтрЕдиницы      = СтрЕдиницы + ",";
					СтрКоэффициенты = СтрКоэффициенты + Т_;
					СчетчикЕд       = СчетчикЕд + 1;
					Единицы.Добавить();
				КонецЦикла;
			КонецЕсли;
			
			СтрЕдиницы = Лев(СтрЕдиницы, СтрДлина(СтрЕдиницы) - 1); // Убрали последнюю запятую
			
			/////////////////
			
			ИндексЕдОстатков = Единицы.Найти(Ном.ЕдиницаХраненияОстатков);			
			// Единица хранения остатков в КПК
			StockUnit = ?(ИндексЕдОстатков = Неопределено, "0", ИндексЕдОстатков);				 
			// Единица, к которой привязана цена, для начала присваиваем единицу с кодом 0
			PriceUnit = "0"; 
  			
			// Нужно определить, какую единицу измерения считать привязанной к цене
			// и записать ее в параметр PriceUnit 
			
			// Для этого сначала нужно определить тип цены, исходя из которого будет 
			// определяться единица измерения
			// Берем первую цену из таблицы выгружаемых типов цен 			
			ТипЦеныДляПривязки = тзКатегорииЦен.Получить(0).ТипыЦен;
			
			ЕдЦены = Неопределено;									  
			
			Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Ном, , ТипЦеныДляПривязки, ТекущаяДата(), ЕдЦены,
															мВалютаРегламентированногоУчета);
				
			PriceUnit = ?(Единицы.Найти(ЕдЦены) = Неопределено, 0, Единицы.Найти(ЕдЦены));												  
			
			// Затем, исходя из выбранной единицы измерения, 
			// расчитываем цены для других типов цен
			СтрЦены = "";
			
			тзКатегорииЦенНом = тзКатегорииЦен.Скопировать();
			тзКатегорииЦенНом.Сортировать("Код Возр");
			
			Для Каждого Стр Из тзКатегорииЦенНом Цикл
				
				ТекТипЦены = Стр.ТипыЦен;
				
				Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Ном, , ТекТипЦены, ТекущаяДата(), ЕдЦены, 
																мВалютаРегламентированногоУчета);
				
				СтрЦены = СтрЦены + кпкАгентПлюс.ФорматироватьЧисло(Цена) + Т_;
							
			КонецЦикла;
		
			// Заполняем таблицу для выгрузки картинок товаров   			
			ЗапросКартинок = Новый Запрос("ВЫБРАТЬ
			|	ХранилищеИнф.ИмяФайла,
			|	ХранилищеИнф.Хранилище,
			|	ХранилищеИнф.Наименование
			|ИЗ
			|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеИнф
			|ГДЕ
			|	ХранилищеИнф.Объект = &Объект
			|	И ХранилищеИнф.ВидДанных = &ВидДанных");
			
			ЗапросКартинок.УстановитьПараметр("Объект", Ном.Ссылка);
			ЗапросКартинок.УстановитьПараметр("ВидДанных", Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение);
			
			ВыборкаКартинок = ЗапросКартинок.Выполнить().Выбрать();
			
			Пока ВыборкаКартинок.Следующий() Цикл						
				КСтр 			  = тзОписаниеКартинок.Добавить();
				КСтр.ИДТовара     = СокрЛП(Ном.УникальныйИдентификатор());
				КСтр.Картинка     = ВыборкаКартинок.Хранилище.Получить();
				КСтр.Наименование = кпкАгентПлюс.УбратьНечитаемыеСимволы(Ном.Наименование);
				КСтр.Описание     = кпкАгентПлюс.УбратьНечитаемыеСимволы(ВыборкаКартинок.Наименование);
			КонецЦикла;
			
			Комментарий = кпкАгентПлюс.УбратьНечитаемыеСимволы(Ном.Комментарий);
			
			Если Ном.ВестиУчетПоСериям Тогда
				Страна = "";
				НомерГТД = "";
			КонецЕсли;
			
			СтавкаНДС = Ценообразование.ПолучитьСтавкуНДС(Ном.СтавкаНДС);
			
			СтрСвойств = "";
			
			// Заполнить категории   			
			КатегорииОбъекта = Обработки.КатегорииОбъекта.Создать();
			
			КатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
			КатегорииОбъекта.ОбъектОтбораКатегорий = Ном;
			КатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
			
			Для Каждого СтрокаТаб Из КатегорииОбъекта.КатегорииОбъекта Цикл
				Если СтрокаТаб.Принадлежность Тогда
					КодКатегории = ПреобразоватьКодСправочника(СтрокаТаб.Категория); 								
					СтрСвойств = СтрСвойств + КодКатегории + ",";
				КонецЕсли;
			КонецЦикла;
			
			СтрСвойств = Лев(СтрСвойств, СтрДлина(СтрСвойств) - 1); // Убрали последнюю запятую
			
			ВыборкаРазреза = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					 
			Если (РежимВыгрузкиОстатков = 0) ИЛИ (ВыборкаРазреза.Количество() = 0) или
				(РежимВыгрузкиОстатков = 1 и не Ном.ВестиУчетПоХарактеристикам) или 
				(РежимВыгрузкиОстатков = 2 и не Ном.ВестиУчетПоСериям) Тогда
				Текст.ДобавитьСтроку(СокрЛП(Строка(ИдНом)) + Т_ + СокрЛП(ИдРодителя) + Т_ + Строка(ПризнакГруппы) + Т_ 
				+ Наим + Т_ + Строка(Код) + Т_ + СтрЕдиницы + Т_ + СтрКоэффициенты + СтрЦены + Остаток + Т_ + Строка(Весовой) 
				+ Т_ + Строка(Вес) + Т_ + СтавкаНДС + Т_ + Комментарий + Т_ + Строка(StockUnit) + Т_ + Строка(PriceUnit) + Т_ 
				+ Кат + Т_ + Страна + Т_ + НомерГТД + Т_ + ПолнНаим + Т_ + СтрСвойств);
				Продолжить;
			КонецЕсли;			
			
			// Выгрузка в разрезе характеристик
			СтОтборЦеныРазрез = Новый Структура("ТипЦен, Номенклатура, " + РазрезВыгрузки);
			
			Текст.ДобавитьСтроку(СокрЛП(Строка(ИдНом)) + Т_ + СокрЛП(ИдРодителя) + Т_ + Строка(2) + Т_ 
			+ Наим + Т_ + Строка(Код) + Т_ + СтрЕдиницы + Т_ + СтрКоэффициенты + СтрЦены + Остаток + Т_ + Строка(Весовой) + Т_
			+ Строка(Вес) + Т_ + СтавкаНДС + Т_ + Комментарий + Т_ + Строка(StockUnit) + Т_ + Строка(PriceUnit) + Т_ + Кат + Т_
			+ Страна + Т_ + НомерГТД + Т_ + ПолнНаим + Т_ + СтрСвойств);
			
			ТекИдРодителяРазрез = ""; 
			
			Пока ВыборкаРазреза.Следующий() Цикл
				
				Разрез = ВыборкаРазреза.Разрез;				
				
				Если Разрез = Null Тогда
					Продолжить;
				КонецЕсли;
				
				Если Разрез = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;    				
				
				ИдРазреза = Разрез.УникальныйИдентификатор();
				Наим 	  = кпкАгентПлюс.УбратьНечитаемыеСимволы(Разрез.Наименование);
				ПолнНаим  = кпкАгентПлюс.УбратьНечитаемыеСимволы(СократитьНаименование(Ном.Наименование)) + "(" + Наим + ")";
				
				Если Константы.кпкВыгружатьПолноеНазваниеХарактеристик.Получить() Тогда
					Наим = ПолнНаим;					
				КонецЕсли;                                                                          					
				ИдНом 	   = ИдРазреза;
				ИдРодителя = Ном.УникальныйИдентификатор();					
				
				Если ИдРодителя = ТекИдРодителяРазрез Тогда
					ИдРодителя = "*";
				Иначе
					ТекИдРодителяРазрез = ИдРодителя;
				КонецЕсли; 	
				
				Остаток = ?(флРезервы, ВыборкаРазреза.ОстатокСУчетомРезерва, ВыборкаРазреза.ОстатокНаСкладе);
				
				Остаток = кпкАгентПлюс.ФорматироватьЧисло(Остаток);
				  				
				ЕдЦены  = Неопределено;									  
				
				Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Ном, , ТипЦеныДляПривязки, ТекущаяДата(), ЕдЦены,
																мВалютаРегламентированногоУчета);
				
				PriceUnit = ?(Единицы.Найти(ЕдЦены) = Неопределено, 0, Единицы.Найти(ЕдЦены));												  
				
				СтрЦены = "";
				
				Для Каждого Стр Из тзКатегорииЦенНом Цикл
					
					ТекТипЦены = Стр.ТипыЦен;
					
					Если РежимВыгрузкиОстатков = 1 Тогда
						ЦенаНом = Ценообразование.ПолучитьЦенуНоменклатуры(Ном, Разрез, ТекТипЦены, ТекущаяДата(), ЕдЦены,
																		   мВалютаРегламентированногоУчета);
					Иначе
						ЦенаНом = Ценообразование.ПолучитьЦенуНоменклатуры(Ном, , ТекТипЦены, ТекущаяДата(), ЕдЦены, 
																		   мВалютаРегламентированногоУчета);
					КонецЕсли;
					
					Цена = ЦенаНом;
					
					СтрЦены = СтрЦены + кпкАгентПлюс.ФорматироватьЧисло(Цена) + Т_;  					
				КонецЦикла; 				
						
				Текст.ДобавитьСтроку(СокрЛП(Строка(ИдНом)) + Т_ + СокрЛП(Строка(ИдРодителя)) + Т_ + Строка(0) + Т_ 
				+ Наим + Т_ + Строка(Код) + Т_ + СтрЕдиницы + Т_ + СтрКоэффициенты + СтрЦены + Остаток + Т_ + Строка(Весовой)
				+ Т_ + Строка(Вес) + Т_ + СтавкаНДС + Т_ + Комментарий + Т_ + Строка(StockUnit) + Т_ + Строка(PriceUnit) + Т_
				+ Кат + Т_ + Страна + Т_ + НомерГТД + Т_ + ПолнНаим + Т_ + "");
				
			КонецЦикла;	// Обход по характеристикам		
			
		Иначе // У группы нет единиц
			
			// Это глюк платформы при выборке запроса по иерархии,
			// поэтому делаем такую проверку
			Если Не СписокВыгруженныхГрупп.НайтиПоЗначению(Ном) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		
			СписокВыгруженныхГрупп.Добавить(Ном);
			
			// Добавляем кол-во единиц до трех
			СтрЕдиницы = "";
			СтрКоэффициенты = "";
			Для Сч = 1 По КолВыгрЕдиниц Цикл   				
				СтрЕдиницы      = СтрЕдиницы + ",";
				СтрКоэффициенты = СтрКоэффициенты + "0" + Т_;				
			КонецЦикла;
 			
			Комментарий = "";
			
			Страна   = "";
			НомерГТД = "";
			СтавкаНДС = Ценообразование.ПолучитьСтавкуНДС(Ном.СтавкаНДС);
			
			Текст.ДобавитьСтроку(СокрЛП(Строка(ИдНом)) + Т_ + СокрЛП(Строка(ИдРодителя)) + Т_ + Строка(1) + Т_ 
			+ Наим + Т_ + Строка(Код) + Т_ + СтрЕдиницы + Т_ + СтрКоэффициенты + СтрЦены + Остаток + Т_ + Строка(0)
			+ Т_ + Строка(0) + Т_ + СтавкаНДС + Т_ + Комментарий + Т_ + Строка(0) + Т_ + Строка(0) + Т_ + "" + Т_
			+ Страна + Т_ + НомерГТД + Т_ + ПолнНаим + Т_ + "");
		КонецЕсли;
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Price");
	
	ВыгрузкаШтрихКодов(тзШтрихКоды);
	
	ВыгрузкаСертификатов();
	
КонецПроцедуры // ВыгрузкаНоменклатуры()

// Процедура ВыгрузкаШтрихКодов
//
// Параметры:
//  тзШтрихКоды - таблица штрих-кодов, которые необходимо выгрузить
//
// Описание:
//	Процедура выгружает штрих-коды номенклатуры агента для приложения Агент+ 1.5
//  
Процедура ВыгрузкаШтрихКодов(тзШтрихКоды) Экспорт
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Barcodes" + Т_ + "Struct:GoodsID,Name,=UnitCode");
	
	Для Каждого Стр Из тзШтрихКоды Цикл
		Текст.ДобавитьСтроку(Строка(Стр.ИдТовара) + Т_ + СокрЛП(Стр.ШтрихКод) + Т_ + Строка(Стр.КодЕдиницы));
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Barcodes");	
	
КонецПроцедуры //ВыгрузкаШтрихКодов()

// Процедура ВыгрузкаФото
//
// Параметры:
//  Нет
//
// Описание:
//	Процедура выгружает подтвержения фотографий для документов, сделанных агентом в МУ для приложения Агент+ 1.5
//
Процедура ВыгрузкаФото() Экспорт
	
	Интервал = Число(Константы.кпкИнтервалПодтверждений.Получить());
	
	ДатаНач = НачалоДня(ТекущаяДата() - (86400 * Интервал));
	ДатаКон = КонецДня(ТекущаяДата());
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	кпкФотоКДокументам.Док,
	|	кпкФотоКДокументам.ФайлКПК,
	|	кпкФотоКДокументам.Комментарий,
	|	кпкФотоКДокументам.ДатаВремяСоздания,
	|	кпкСведенияДокумента.КПКДокумент,
	|	кпкСведенияДокумента.Агент
	|ИЗ
	|	Справочник.кпкФотоКДокументам КАК кпкФотоКДокументам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.кпкСведенияДокумента КАК кпкСведенияДокумента
	|		ПО кпкФотоКДокументам.Док = кпкСведенияДокумента.КПКДокумент
	|ГДЕ
	|	кпкФотоКДокументам.ДатаВремяСоздания МЕЖДУ &парДатаНач И &парДатаКон
	|	И кпкСведенияДокумента.Агент = &парАгент");
   	
	Запрос.УстановитьПараметр("парДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("парДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("парАгент",   ВыбАгент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Photos" + Т_ + "Struct:ObjID,ObjType,TimeCrt,FileName,=Comment");
	
	ТекGUID = "-";
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Док = Неопределено Тогда Продолжить; КонецЕсли;			
		ИдДок = Выборка.Док.УникальныйИдентификатор();
		Если ИдДок  = ТекGUID Тогда
			ВыгрИд  = "*";
		Иначе
			ВыгрИд  = ИдДок;
			ТекGUID = ИдДок;
		КонецЕсли;
		ВремяФото 	 = кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(Выборка.ДатаВремяСоздания);
		ИмяФайлаФото = СокрЛП(Выборка.ФайлКПК);
		Коммент		 = кпкАгентПлюс.УбратьНечитаемыеСимволы(Выборка.Комментарий);
		Текст.ДобавитьСтроку(СокрЛП(ВыгрИд) + Т_+ "1" + Т_+ СокрЛП(ВремяФото) + Т_+ ИмяФайлаФото + Т_+ Коммент);
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Photos");
	
КонецПроцедуры //ВыгрузкаФото()

// Процедура ВыгрузкаОписанийКартинокТоваров
//
// Параметры:
//  КолФото - переменная, в которую записывается кол-во фотографий, выгружаемых в МУ
//
// Описание:
//	Процедура выгружает описания для картинок номенклатуры для приложения Агент+ 1.5,
//	а также упаковывает список картинок в архив для последующей его передачи в МУ
//
Процедура ВыгрузкаОписанийКартинокТоваров(КолФото) Экспорт
	
	Если Не флВыгружатьКартинкиВКПК Тогда		
		Возврат;
    КонецЕсли;
	
	ИмяКаталога = КаталогВременныхФайлов() + "PhotosFrom1C\";
	
	кпкАгентПлюс.ПроверитьСуществованиеКаталога(ИмяКаталога, Ложь, Истина);
	
	НайденныеФайлы = НайтиФайлы(ИмяКаталога, "*.PNG");
	
	Если НайденныеФайлы.Количество() > 0 Тогда 
		Попытка
			УдалитьФайлы(ИмяКаталога, "*.PNG"); 
		Исключение			
			ТекстСообщения = "Невозможно удалить файлы картинок из каталога: " + ИмяКаталога+ " по причине: " + ОписаниеОшибки();																				
			ОповеститьОСобытии(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_GoodsPictures" + Т_ + "Struct:GoodsID,Name,FileName,=Comment");
	
	СтрДляАрхива = "";
	Для Каждого Стр Из тзОписаниеКартинок Цикл
		ИДТовара 	   = Стр.ИДТовара;     		
		ИмяФайлаФото   = ИдТовара + ".PNG";
		ПолноеИмяФайла = ИмяКаталога + ИмяФайлаФото;		
		Картинка 	   = Стр.Картинка;   
		КартинкаPNG    = Картинка.Преобразовать(ФорматКартинки.PNG);
		КартинкаPNG.Записать(ПолноеИмяФайла);
		
		Наименование = кпкАгентПлюс.УбратьНечитаемыеСимволы(Стр.Наименование);
		Описание 	 = кпкАгентПлюс.УбратьНечитаемыеСимволы(Стр.Описание);
		
		Текст.ДобавитьСтроку(ИдТовара + Т_ + Наименование + Т_ + ИмяФайлаФото + Т_ + Описание);
		КолФото = КолФото + 1;
		
		СтрДляАрхива = СтрДляАрхива + ИмяФайлаФото + Т_ + ПолноеИмяФайла + Т_;	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрДляАрхива) Тогда
		// Убираем последний табулятор
		СтрДляАрхива = Лев(СтрДляАрхива, СтрДлина(СтрДляАрхива)-1);	
		#Если Не Клиент Тогда
			КПКОбъектZip.Pack(ИмяКаталога + "GoodsPhotosFromCDB.zip", СтрДляАрхива);									
		#Иначе
			КПКОбъект.АрхУпаковать(ИмяКаталога + "GoodsPhotosFromCDB.zip", СтрДляАрхива);									
		#КонецЕсли
	КонецЕсли;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_GoodsPictures");
	
КонецПроцедуры //ВыгрузкаОписанийКартинокТоваров()

// Используется для выгрузки реализаций, заведенных на основании заявок
// стандартным способом (без участия регистра сведений "кпкСсылкиДокументов")
// Добавлено А+ 29.06.2007
//
Процедура ВыгрузкаРасходныхНакладных() Экспорт
	
	// А+ 27.06.2007 	
	сзСклады = Новый СписокЗначений;
	СтОтбор  = Новый Структура("Объект", ВыбАгент);	
	
	Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(СтОтбор);
	Если Выборка.Следующий() Тогда
		сзСклады.ЗагрузитьЗначения(Выборка.СписокСкладов.Склады.ВыгрузитьКолонку("Склад"));
	КонецЕсли;	
	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Doc_Sale" + Т_	+ "Struct:DocID,DocState,DocFlags,TimeCrt,DocNumber,FirmID," +
														  "ClientID,=TPointID,DocSum,=DocVAT,=Discount,Comment,=PriceType," +
														  "=PayDate,MDocID,=SFNumber,=UseVAT,_DOSTAVKA");
														  
	Текст.ДобавитьСтроку("<Sub>" +Т_+ "Lines" +Т_+ "Struct:GoodsID,Amount,Price,Sum,=VAT,=Discount,=UCode,=UDim");
	
	// А+ 27.06.2007
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реализация.Ссылка КАК Док
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Реализация
	|
	|ГДЕ
	|	(НЕ Реализация.Ссылка.ПометкаУдаления) И Реализация.Дата МЕЖДУ &НачПериода И &КонПериода	
	|УПОРЯДОЧИТЬ ПО
	|	Реализация.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачПериода", ТекущаяДата() - (86400 * Константы.кпкИнтервалПодтверждений.Получить()));
	Запрос.УстановитьПараметр("КонПериода", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		Док = Выборка.Док;
		Если Док = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СокрЛП(Док.Метаданные().Имя) <> "РеализацияТоваровУслуг" Тогда
			Продолжить;
		КонецЕсли;
		
		ДокОсн = Док.Сделка;
		Если ТипЗнч(ДокОсн) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокОсн.кпкТорговыйАгент) Тогда
			Продолжить;
		КонецЕсли;
		
		СтОтборОсн = Новый Структура;
		СтОтборОсн.Вставить("КПКДокумент", ДокОсн);
		СтОтборОсн.Вставить("Агент", 	   ВыбАгент);
		
		ВыборкаОсн = РегистрыСведений.кпкСведенияДокумента.СрезПоследних(ТекущаяДата(), СтОтборОсн);
		
		Если ВыборкаОсн.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
	
		Клиент 		= Док.Контрагент;		
		ТоргТочка 	= Док.кпкТорговаяТочка;

		ИдКлиента	= Т_+ СокрЛП(Клиент.УникальныйИдентификатор());
		Если (ТоргТочка = Неопределено) или (ТоргТочка = Справочники.кпкТорговыеТочки.ПустаяСсылка()) Тогда
	    	ИдТоргТочки = ИдКлиента;    
		Иначе
			ИдТоргТочки = Т_+ СокрЛП(ТоргТочка.УникальныйИдентификатор());			
		КонецЕсли;
			
		ИдФирмы = Т_+ СокрЛП(Док.Организация.УникальныйИдентификатор());
		
		ИдДок 	= СокрЛП(Док.УникальныйИдентификатор());
		
		НомерДок	  = Т_+ СокрЛП(Док.Номер);
		ДатаВремяДок  = Т_+ кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(Док.Дата);
		Комментарий   = Т_+ кпкАгентПлюс.УбратьНечитаемыеСимволы(Док.Комментарий);
		СостДок 	  = Т_+ ?(Док.Проведен, "1", "2");
		СуммаДок	  = Т_+ кпкАгентПлюс.ФорматироватьЧисло(Док.Товары.Итог("Сумма") + Док.Услуги.Итог("Сумма"));
		СуммаНДС	  = Т_+ кпкАгентПлюс.ФорматироватьЧисло(Док.Товары.Итог("СуммаНДС") + Док.Услуги.Итог("СуммаНДС"));
		Скидка 		  = Т_+ "";
		СрокДок		  = Т_;
		
		СостДокВЦБД   = кпкАгентПлюс.АПВернутьСостояниеДок(Док) + 8;
		ДатаОплаты    = Т_;
		ТипЦен		  = Т_+ ПолучитьКодТипаЦены(Док.ТипЦен, Док);		
		ИдДокЗв 	  = Т_ + СокрЛП(ДокОсн.УникальныйИдентификатор());
		НомерСФ		  = Т_+ "";
		УчитыватьНДС  = Т_+ "1";
		ФормаДоставки = Т_ + "";
		
		Если Не АвтоСклад.Пустая() Тогда
			Если Док.Склад <> АвтоСклад Тогда
		    	СостДокВЦБД = СостДокВЦБД + 512;
			КонецЕсли;
		КонецЕсли;
		
		// Преобразовываем СостДокВЦБД к типу строка с добавлением табуляции (19.06.2007)
		СостДокВЦБД = Т_ + Строка(СостДокВЦБД);
		
		Текст.ДобавитьСтроку(ИдДок + СостДок + СостДокВЦБД + ДатаВремяДок
			+ НомерДок + ИдФирмы + ИдКлиента + ИдТоргТочки + СуммаДок + СуммаНДС
			+ Скидка + Комментарий + ТипЦен + ДатаОплаты + ИдДокЗв 
			+ НомерСФ + УчитыватьНДС + ФормаДоставки);
			
		РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
		
		Если РежимВыгрузкиОстатков = 1 Тогда
			Разрез = "ХарактеристикаНоменклатуры";
		ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда
			Разрез = "СерияНоменклатуры";
		КонецЕсли;  
		
		Если сзКлиентыАгента.НайтиПоЗначению(Клиент) = Неопределено Тогда
			сзКлиентыАгента.Добавить(Клиент);
		КонецЕсли; 
		
		Если сзТоргТочкиАгента.НайтиПоЗначению(ТоргТочка) = Неопределено Тогда
			сзТоргТочкиАгента.Добавить(ТоргТочка);
		КонецЕсли; 		
		
		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Lines");
		
		Для Каждого Стр Из Док.Товары Цикл			
			
			Ном   = Стр.Номенклатура;
			ОснЕд = ПолучитьБазовуюЕдиницу(Ном);
			
			Если Ном = Неопределено Тогда
		        Продолжить;
			КонецЕсли;
			
			ИдТовара = СокрЛП(Ном.УникальныйИдентификатор());			
			Если РежимВыгрузкиОстатков >= 1  Тогда
				Раз = Стр[Разрез];
				Если Раз <> Неопределено Тогда
					Если НЕ Раз.Пустая() Тогда
						ИдТовара = СокрЛП(Раз.УникальныйИдентификатор());
					КонецЕсли;
				КонецЕсли;			
			КонецЕсли;  			
			Кол		  	  = Стр.Количество;
			Цена 	  	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.Цена);
			Сумма	  	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.Сумма);
			НДС 	  	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.СуммаНДС);
			СкидкаСтр 	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.ПроцентСкидкиНаценки);			
			
			Если ИспЕдИзм Тогда
				КодЕд 		  = ПолучитьКодЕдиницы(Ном, Стр.ЕдиницаИзмерения);				
				РазмерностьЕд = Стр.ЕдиницаИзмерения.Коэффициент;			
			Иначе
				КодЕд 		  = ПолучитьКодЕдиницы(Ном, ОснЕд);				
				РазмерностьЕд = ОснЕд.Коэффициент;			
				Если Стр.ЕдиницаИзмерения <> ОснЕд Тогда
					ТекКоэф = Стр.ЕдиницаИзмерения.Коэффициент;
					ОснКоэф = ОснЕд.Коэффициент;
					Кол = Кол * (ТекКоэф / ОснКоэф);
				КонецЕсли;  
			КонецЕсли;
				
			СтрКол = кпкАгентПлюс.ФорматироватьЧисло(Кол); 
			
			Текст.ДобавитьСтроку(ИдТовара  + Т_ + СтрКол + Т_ + Цена + Т_ + Сумма + Т_ + НДС + Т_ + СкидкаСтр + Т_ +
								 Строка(КодЕд) + Т_ + Строка(РазмерностьЕд));
			
			Если сзДопТовары.НайтиПоЗначению(Ном) = Неопределено Тогда
				сзДопТовары.Добавить(Ном);
			КонецЕсли;
			
		КонецЦикла;
		
		// Выгрузка услуг
		Для Каждого Стр Из Док.Услуги Цикл			
			
			Ном   = Стр.Номенклатура;
			ОснЕд = ПолучитьБазовуюЕдиницу(Ном);
			
			Если Ном = Неопределено Тогда
		        Продолжить;
			КонецЕсли;
						
			ИдТовара 	  = СокрЛП(Ном.УникальныйИдентификатор());			
			Кол		  	  = Стр.Количество;
			Цена 	  	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.Цена);
			Сумма	  	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.Сумма);
			НДС 	  	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.СуммаНДС);
			СкидкаСтр 	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.ПроцентСкидкиНаценки);			
			
			КодЕд 		  = ПолучитьКодЕдиницы(Ном, ОснЕд);	
			РазмерностьЕд = ОснЕд.Коэффициент;
						
			СтрКол = кпкАгентПлюс.ФорматироватьЧисло(Кол); 
			
			Текст.ДобавитьСтроку(ИдТовара  + Т_ + СтрКол + Т_ + Цена + Т_ + Сумма + Т_ + НДС + Т_ + СкидкаСтр + Т_ +
								 Строка(КодЕд) + Т_ + Строка(РазмерностьЕд));
			
			Если сзДопТовары.НайтиПоЗначению(Ном) = Неопределено Тогда
				сзДопТовары.Добавить(Ном);
			КонецЕсли;
			
		КонецЦикла;

		
		Текст.ДобавитьСтроку("<End>" + Т_ + "Lines");
		
		//Если ТоргТочка <> 0 Тогда
		//	Если ТДопКлиенты.Найти(ТоргТочка, "ТоргТочка") = Неопределено Тогда
		//		СтрокаТДопКлиенты = ТДопКлиенты.Добавить();
		//		СтрокаТДопКлиенты.Клиент    = ТоргТочка.Владелец;
		//		СтрокаТДопКлиенты.Должник   = 0;
		//		СтрокаТДопКлиенты.ТоргТочка = ТоргТочка;
		//	КонецЕсли;
		//Иначе
		//	Если ТДопКлиенты.Найти(Клиент, "Клиент") = Неопределено Тогда
		//		СтрокаТДопКлиенты = ТДопКлиенты.Добавить();
		//		СтрокаТДопКлиенты.Клиент    = Клиент;
		//		СтрокаТДопКлиенты.Должник   = 0;
		//		СтрокаТДопКлиенты.ТоргТочка = 0;
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Doc_Sale");
	
КонецПроцедуры //ВыгрузкаРасходныхНакладных()

// Предназначена для выгрузки реализаций по регистру сведений "кпкСсылкиДокументов"
// Добавлено А+ 29.06.2007
//
Процедура ВыгрузкаРасходныхНакладныхПоРегиструСсылок() Экспорт
	
	// А+ 02.07.2007
	Если Метаданные.РегистрыСведений.Найти("кпкСсылкиДокументов") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	// А+ 27.06.2007
	сзСклады = Новый СписокЗначений;
	СтОтбор  = Новый Структура("Объект", ВыбАгент);
	
	Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(СтОтбор);
	Если Выборка.Следующий() Тогда
		сзСклады.ЗагрузитьЗначения(Выборка.СписокСкладов.Склады.ВыгрузитьКолонку("Склад"));
	КонецЕсли;	
	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Doc_Sale" + Т_	+ "Struct:DocID,DocState,DocFlags,TimeCrt,DocNumber,FirmID," + 
						 "ClientID,=TPointID,DocSum,=DocVAT,=Discount,Comment,=PriceType,=PayDate,MDocID,=SFNumber," + 
						 "=UseVAT,_DOSTAVKA");
						 
	Текст.ДобавитьСтроку("<Sub>" +Т_+ "Lines" +Т_+ "Struct:GoodsID,Amount,Price,Sum,=VAT,=Discount,=UCode,=UDim");
	
	// А+ 29.06.2007 - новый запрос
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Сведения.Документ КАК Док,
	|	Сведения.Ссылка КАК Заявка
	|ИЗ
	|	РегистрСведений.кпкСсылкиДокументов КАК Сведения
	|ГДЕ
	|	(НЕ Сведения.Документ.ПометкаУдаления)
	|	И Сведения.Документ.Дата МЕЖДУ &НачПериода И &КонПериода
	|	И Сведения.Агент = &Агент
	// { Арт 2008-04-04
	|УПОРЯДОЧИТЬ ПО
	|	Сведения.Документ.МоментВремени";
	//  Арт 2008-04-04 }
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачПериода", ТекущаяДата() - (86400 * Константы.кпкИнтервалПодтверждений.Получить()));
	Запрос.УстановитьПараметр("КонПериода", ТекущаяДата());
	Запрос.УстановитьПараметр("Агент",	    ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Док = Выборка.Док;
		
		Если Док = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДокОсн = Выборка.Заявка;
		
		Клиент 		= Док.Контрагент;
		ТоргТочка 	= Док.кпкТорговаяТочка;

		ИдКлиента	= Т_+ СокрЛП(Клиент.УникальныйИдентификатор());
		Если (ТоргТочка = Неопределено) или (ТоргТочка = Справочники.кпкТорговыеТочки.ПустаяСсылка()) Тогда
	        ИдТоргТочки = ИдКлиента;
		Иначе
			ИдТоргТочки = Т_+ СокрЛП(ТоргТочка.УникальныйИдентификатор());			
		КонецЕсли;
			
		ИдФирмы = Т_+ СокрЛП(Док.Организация.УникальныйИдентификатор());
		
		ИдДок 	= СокрЛП(Док.УникальныйИдентификатор());
		
		НомерДок	  = Т_ + СокрЛП(Док.Номер);
		ДатаВремяДок  = Т_ + кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(Док.Дата);
		Комментарий   = Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Док.Комментарий);
		СостДок 	  = Т_ + ?(Док.Проведен, "1", "2");
		СуммаДок	  = Т_ + кпкАгентПлюс.ФорматироватьЧисло(Док.Товары.Итог("Сумма") + Док.Услуги.Итог("Сумма"));
		СуммаНДС	  = Т_ + кпкАгентПлюс.ФорматироватьЧисло(Док.Товары.Итог("СуммаНДС") + Док.Услуги.Итог("СуммаНДС"));
		Скидка 		  = Т_ + "";
		СрокДок		  = Т_ + "";
		// В следующей строке убрали преобразование к типу Строка, а также символ табуляции (19.06.2007)
		СостДокВЦБД   = кпкАгентПлюс.АПВернутьСостояниеДок(Док) + 8;
		ДатаОплаты    = Т_ + "";
		ТипЦен		  = Т_ + ПолучитьКодТипаЦены(Док.ТипЦен, Док);
		// А+ 27.06.2007
		ИдДокЗв 	  = Т_ + СокрЛП(ДокОсн.УникальныйИдентификатор());
		НомерСФ		  = Т_ + "";
		УчитыватьНДС  = Т_ + "1";
		ФормаДоставки = Т_ + "";
            
		Если сзСклады.НайтиПоЗначению(Док.Склад) = Неопределено Тогда
		    СостДокВЦБД = СостДокВЦБД + 512;
		КонецЕсли;
		// Преобразовываем СостДокВЦБД к типу строка с добавлением табуляции (19.06.2007)
		СостДокВЦБД = Т_ + Строка(СостДокВЦБД);
		
		Текст.ДобавитьСтроку(ИдДок + СостДок + СостДокВЦБД + ДатаВремяДок
			+ НомерДок + ИдФирмы + ИдКлиента + ИдТоргТочки + СуммаДок + СуммаНДС
			+ Скидка + Комментарий + ТипЦен + ДатаОплаты + ИдДокЗв 
			+ НомерСФ + УчитыватьНДС + ФормаДоставки);
			
		РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
		
		Если РежимВыгрузкиОстатков = 1 Тогда
			Разрез = "ХарактеристикаНоменклатуры";
		ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда
			Разрез = "СерияНоменклатуры";
		КонецЕсли;
		
		Если сзКлиентыАгента.НайтиПоЗначению(Клиент) = Неопределено Тогда
			сзКлиентыАгента.Добавить(Клиент);
		КонецЕсли; 
		
		Если сзТоргТочкиАгента.НайтиПоЗначению(ТоргТочка) = Неопределено Тогда
			сзТоргТочкиАгента.Добавить(ТоргТочка);
		КонецЕсли; 	
		
		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Lines");
		
		Для Каждого Стр Из Док.Товары Цикл
			
			Ном   = Стр.Номенклатура;
			ОснЕд = ПолучитьБазовуюЕдиницу(Ном);
			
			Если Ном = Неопределено Тогда
		        Продолжить;
			КонецЕсли;	
			
			ИдТовара  = СокрЛП(Ном.УникальныйИдентификатор());
			// А+ 27.06.2007 - начало
			Если РежимВыгрузкиОстатков >= 1  Тогда
				Раз = Стр[Разрез];
				Если Раз <> Неопределено Тогда
					Если НЕ Раз.Пустая() Тогда
						ИдТовара = СокрЛП(Раз.УникальныйИдентификатор());
					КонецЕсли;
				КонецЕсли;			
			КонецЕсли;   
			// А+ 27.06.2007 - конец
			Кол		 	  = Стр.Количество;
			Цена 	  	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.Цена);
			Сумма	 	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.Сумма);
			НДС 	  	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.СуммаНДС);
			СкидкаСтр 	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.ПроцентСкидкиНаценки);
			
			Если ИспЕдИзм Тогда
				КодЕд 		  = ПолучитьКодЕдиницы(Ном, Стр.ЕдиницаИзмерения);				
				РазмерностьЕд = Стр.ЕдиницаИзмерения.Коэффициент;			
			Иначе
				КодЕд 		  = ПолучитьКодЕдиницы(Ном, ОснЕд);				
				РазмерностьЕд = ОснЕд.Коэффициент;			
				Если Стр.ЕдиницаИзмерения <> ОснЕд Тогда
					ТекКоэф = Стр.ЕдиницаИзмерения.Коэффициент;
					ОснКоэф = ОснЕд.Коэффициент;
					Кол = Кол * (ТекКоэф / ОснКоэф);
				КонецЕсли;  
			КонецЕсли;
				
			СтрКол = кпкАгентПлюс.ФорматироватьЧисло(Кол);
			
			Текст.ДобавитьСтроку(ИдТовара  + Т_ + СтрКол + Т_ + Цена + Т_ + Сумма + Т_ + НДС + Т_ + СкидкаСтр + 
								 Т_ + Строка(КодЕд) + Т_ + Строка(РазмерностьЕд));
			
			Если сзДопТовары.НайтиПоЗначению(Ном) = Неопределено Тогда
				сзДопТовары.Добавить(Ном);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Стр Из Док.Услуги Цикл
			
			Ном   = Стр.Номенклатура;
			ОснЕд = ПолучитьБазовуюЕдиницу(Ном);
			
			Если Ном = Неопределено Тогда
		        Продолжить;
			КонецЕсли;	
			
			ИдТовара      = СокрЛП(Ном.УникальныйИдентификатор());			
			Кол		 	  = Стр.Количество;
			Цена 	  	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.Цена);
			Сумма	 	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.Сумма);
			НДС 	  	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.СуммаНДС);
			СкидкаСтр 	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.ПроцентСкидкиНаценки);
			
			КодЕд 		  = ПолучитьКодЕдиницы(Ном, ОснЕд);				
			РазмерностьЕд = ОснЕд.Коэффициент;			
				
			СтрКол = кпкАгентПлюс.ФорматироватьЧисло(Кол);
			
			Текст.ДобавитьСтроку(ИдТовара  + Т_ + СтрКол + Т_ + Цена + Т_ + Сумма + Т_ + НДС + Т_ + СкидкаСтр + Т_ + 
								 Строка(КодЕд) + Т_ + Строка(РазмерностьЕд));
			
			Если сзДопТовары.НайтиПоЗначению(Ном) = Неопределено Тогда
				сзДопТовары.Добавить(Ном);
			КонецЕсли;
			
		КонецЦикла;

		
		Текст.ДобавитьСтроку("<End>" + Т_ + "Lines");
		
		//Если ТоргТочка <> 0 Тогда
		//	Если ТДопКлиенты.Найти(ТоргТочка, "ТоргТочка") = Неопределено Тогда
		//		СтрокаТДопКлиенты = ТДопКлиенты.Добавить();
		//		СтрокаТДопКлиенты.Клиент    = ТоргТочка.Владелец;
		//		СтрокаТДопКлиенты.Должник   = 0;
		//		СтрокаТДопКлиенты.ТоргТочка = ТоргТочка;
		//	КонецЕсли;
		//Иначе
		//	Если ТДопКлиенты.Найти(Клиент, "Клиент") = Неопределено Тогда
		//		СтрокаТДопКлиенты = ТДопКлиенты.Добавить();
		//		СтрокаТДопКлиенты.Клиент    = Клиент;
		//		СтрокаТДопКлиенты.Должник   = 0;
		//		СтрокаТДопКлиенты.ТоргТочка = 0;
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Doc_Sale");
	
КонецПроцедуры //ВыгрузкаРасходныхНакладныхПоРегиструСсылок()

// Процедура ВыгрузкаИсторииПродаж
//
// Параметры:
//  Нет
//
// Описание:
//	Процедура выгружает историю продаж и историю мерчендайзинга для приложения Агент+ 1.5,
// 
Процедура ВыгрузкаИсторииПродаж() Экспорт
	
	Перем Дата01, Дата02;   	
	
	Если ВидВыгрузки = 2 Тогда
		
		Каталог = СокрЛП(Константы.КаталогДополнительнойИнформации.Получить());
		
		Если Не кпкАгентПлюс.ПроверитьСуществованиеКаталога(Каталог) Тогда
			ОповеститьОСобытии("Выгрузка истории продаж не произведена! Нужно указать значение константы " + 
							   """Каталог дополнительной информации"" на форме констант " + лИмяФормыКонстант);
			Возврат;
		КонецЕсли;
		
		ДополнитьСлешВПуть(Каталог);		
		
		ИмяФайлаИстории = Каталог + "hist" + Строка(ВыбАгент.Код) + ".dat";
		ФайлИстории = Новый Файл(ИмяФайлаИстории);
		Если НЕ ФайлИстории.Существует() Тогда
			ТекстСообщения = "Файл с историей продаж для агента: " + ВыбАгент + " не существует";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
			Возврат;
		КонецЕсли;
		ТекстИстории = Новый ТекстовыйДокумент;
		ТекстИстории.Прочитать(ИмяФайлаИстории);
		Для НомСтр = 3 По ТекстИстории.КоличествоСтрок() Цикл
			Текст.ДобавитьСтроку(ТекстИстории.ПолучитьСтроку(НомСтр));
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Глубина = Константы.кпкГлубинаИсторииПродаж.Получить();
	КолИнтервалов = (Константы.кпкКоличествоИнтерваловИстории.Получить());	
	ДлинаИнтервала = Окр(Глубина / ?(КолИнтервалов = 0, 1, КолИнтервалов));
	
	Дата02 = ТекущаяДата();
	Дата01 = Дата02 - (Глубина * 86400);
	Дата01 = НачалоДня(Дата01);
	
	Дата1 = Дата01;
	Дата2 = Дата02;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПродажиОбороты.ДокументПродажи КАК ДокПродажи,
	|	ПродажиОбороты.Номенклатура КАК ТМЦ,
	|	ПродажиОбороты.ДоговорКонтрагента.Владелец КАК Клиент,
	|	ПродажиОбороты.КоличествоОборот КАК КоличествоОборот
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			ДоговорКонтрагента.Владелец В (&ПарКлиенты)
	|				И (Номенклатура В ИЕРАРХИИ (&Ассортимент) или Номенклатура В (&ДопАссортимент))) КАК ПродажиОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокПродажи,
	|	ТМЦ
	|ИТОГИ
	|	СУММА(КоличествоОборот)
	|ПО
	|	ДокПродажи,
	|	ТМЦ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("парКлиенты",     сзКлиентыАгента);
	Запрос.УстановитьПараметр("Ассортимент",    сзАссортимент);
	Запрос.УстановитьПараметр("ДопАссортимент", сзДопТовары);
	
	СводнаяТЗ = Новый ТаблицаЗначений;
	СводнаяТЗ.Колонки.Добавить("ТоргТочка");		
	СводнаяТЗ.Колонки.Добавить("Товар"); 			
	
	Т = Новый ТаблицаЗначений;
	Т.Колонки.Добавить("ТоргТочка");		
	Т.Колонки.Добавить("История"); 			
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(10, 3);
	ОТ = Новый ОписаниеТипов(Массив, , , КЧ);
	
	Для Инт = 1 По КолИнтервалов Цикл   
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		Дата02 = Дата01 + ((ДлинаИнтервала) * 86400);
		Дата02 = ?(КонецДня(Дата02) > ТекущаяДата(), ТекущаяДата(), КонецДня(Дата02));
		Запрос.УстановитьПараметр("ДатаНач", Дата01);
		Запрос.УстановитьПараметр("ДатаКон", Дата02);
		ПродДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ПродДокументы.Следующий() Цикл
			Док = ПродДокументы.ДокПродажи;
			ВидДок = СокрЛП(Док.Метаданные().Имя);
			Если (ВидДок <> "РеализацияТоваровУслуг") И (ВидДок <> "ВозвратТоваровОтПокупателя") Тогда
				Продолжить;
			КонецЕсли;
			
			ТоргТочка = Док.кпкТорговаяТочка;
			Если (ТоргТочка = Неопределено) или (Не ЗначениеЗаполнено(ТоргТочка)) Тогда	        
				ТоргТочка = Док.Контрагент;			
			КонецЕсли;
						
			Стр = Т.Найти(ТоргТочка, "ТоргТочка");
			Если Стр = Неопределено Тогда
				НовСтр = Т.Добавить();
				НовСтр.ТоргТочка = ТоргТочка;
				НовСтр.История = Новый ТаблицаЗначений;
				ТИстория = НовСтр.История;
				ТИстория.Колонки.Добавить("Товар");
				Для НомПоз = 1 По КолИнтервалов Цикл 
					ТИстория.Колонки.Добавить("ПродКол" + Строка(НомПоз), ОТ); 
				КонецЦикла;
			Иначе
				ТИстория = Стр.История;
			КонецЕсли;
			
			Товары = ПродДокументы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Пока Товары.Следующий() Цикл
				
				Товар = Товары.ТМЦ;
				
				НовСвСтр = СводнаяТЗ.Добавить();			
				НовСвСтр.ТоргТочка = ТоргТочка;
				НовСвСтр.Товар = Товар;
				
				Количество = Товары.КоличествоОборот;
				ИстСтр = ТИстория.Найти(Товар, "Товар");				
				Если ИстСтр = Неопределено Тогда
					ИстСтр = ТИстория.Добавить();
					ИстСтр.Товар = Товар;
				КонецЕсли;
				
				Если ВидДок = "ВозвратТоваровОтПокупателя" Тогда
					ИстСтр.Установить(Инт, Количество * -1);
				Иначе
					ИстСтр.Установить(Инт, Количество);
				КонецЕсли;  				
				
			КонецЦикла;
		КонецЦикла;
		Дата01 = Дата01 + ((ДлинаИнтервала + 1) * 86400);
	КонецЦикла;		
	
	// История мерчендайзинга
	
	Дата02 = ТекущаяДата();
	Дата01 = Дата02 - (Глубина * 86400);
	Дата01 = НачалоДня(Дата01);
	
	Дата1 = Дата01;
	Дата2 = Дата02;
	
	ТМ = Новый ТаблицаЗначений;
	ТМ.Колонки.Добавить("ТоргТочка");		
	ТМ.Колонки.Добавить("История"); 			
	
	Для Инт = 1 По КолИнтервалов Цикл
		Дата02 = Дата01 + ((ДлинаИнтервала) * 86400);
		Дата02 = ?(КонецДня(Дата02) > ТекущаяДата(), ТекущаяДата(), КонецДня(Дата02));
		МерчДок = Документы.кпкМерчендайзинг.Выбрать(Дата01, Дата02);
		Пока МерчДок.Следующий() Цикл
			Док = МерчДок.Ссылка;
			
			ТоргТочка = Док.ТорговаяТочка;
			Если (ТоргТочка = Неопределено) или (ТоргТочка = Справочники.кпкТорговыеТочки.ПустаяСсылка()) Тогда
				ТоргТочка = Док.Контрагент;
			ИначеЕсли ТоргТочка.Пустая() Тогда
				ТоргТочка = Док.Контрагент;
			КонецЕсли;
			Стр = ТМ.Найти(ТоргТочка, "ТоргТочка");
			Если Стр = Неопределено Тогда
				НовСтр = ТМ.Добавить();
				НовСтр.ТоргТочка = ТоргТочка;
				НовСтр.История = Новый ТаблицаЗначений;
				ТМИстория = НовСтр.История;
				ТМИстория.Колонки.Добавить("Товар");
				Для НомПоз = 1 По КолИнтервалов Цикл 
					ТМИстория.Колонки.Добавить("МерчКол" + Строка(НомПоз), ОТ); 
				КонецЦикла;
			Иначе
				ТМИстория = Стр.История;
			КонецЕсли;
			
			Для Каждого СтрТов Из Док.Номенклатура Цикл 				
				Товар = СтрТов.Номенклатура;
								
				НовСвСтр = СводнаяТЗ.Добавить();			
				НовСвСтр.ТоргТочка = ТоргТочка;
				НовСвСтр.Товар = Товар;
				
				Количество = СтрТов.Количество;
				ИстСтр = ТМИстория.Найти(Товар, "Товар");
				Если ИстСтр = Неопределено Тогда
					ИстСтр = ТМИстория.Добавить();
					ИстСтр.Товар = Товар;
				КонецЕсли;
				ИстСтр.Установить(Инт, Количество);
			КонецЦикла;
			
		КонецЦикла;
		Дата01 = Дата01 + ((ДлинаИнтервала + 1) * 86400);
	КонецЦикла;	
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_System" + Т_ + "Struct:ObjID,Value");
	Текст.ДобавитьСтроку(GUID_SYSTEM_SHDATEBG + Т_ + кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(Дата1, "Дата"));
	Текст.ДобавитьСтроку(GUID_SYSTEM_SHDATEND + Т_ + кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(Дата2, "Дата"));
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_System");	
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Sales" + Т_ + "Struct:TPointID,GoodsID,Sales");
	
	Т.Сортировать("ТоргТочка Возр");
	
	СводнаяТЗ.Свернуть("ТоргТочка,Товар");
	СводнаяТЗ.Сортировать("ТоргТочка Возр, Товар Возр");
	
	СтарИДТочки = "";
	Для Каждого СвСтр Из СводнаяТЗ Цикл	
		ИдТочки = СокрЛП(СвСтр.ТоргТочка.УникальныйИдентификатор());
		ИдТовара = СокрЛП(СвСтр.Товар.УникальныйИдентификатор());
		Если ИДТочки = СтарИДТочки Тогда
			ИдТочки = "*";
		Иначе
			СтарИДТочки = ИДТочки;
		КонецЕсли;
		СтрВФайл = ИДТочки + Т_ + ИдТовара + Т_;
		ТСтр = Т.Найти(СвСтр.ТоргТочка, "ТоргТочка");
		Если ТСтр <> Неопределено Тогда
			ТИстория = ТСтр.История;
			ТовСтр = ТИстория.Найти(СвСтр.Товар, "Товар");
			Если ТовСтр <> Неопределено Тогда
				Для Поз = 1 По КолИнтервалов Цикл
					ПроданоКол = ТовСтр.Получить(Поз);
					СтрВФайл = СтрВФайл + Строка(ПроданоКол) + " ";
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ТМСтр = ТМ.Найти(СвСтр.ТоргТочка, "ТоргТочка");
		Если ТМСтр <> Неопределено Тогда
			//СтрВФайл = Лев(СтрВФайл, СтрДлина(СтрВФайл) - 1) + "|";
			СтрВФайл = СтрВФайл + "|";
			ТМИстория = ТМСтр.История;
			ТовМСтр = ТМИстория.Найти(СвСтр.Товар, "Товар");
			Если ТовМСтр <> Неопределено Тогда
				Для Поз = 1 По КолИнтервалов Цикл
					МерчКол = ТовМСтр.Получить(Поз);
					СтрВФайл = СтрВФайл + Строка(МерчКол) + " ";
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Текст.ДобавитьСтроку(СокрЛП(СтрВФайл));
		//СтарИДТочки = ИДТочки;
		//ИдТочки = "*";
	КонецЦикла;  	
		
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Sales");
	
КонецПроцедуры //ВыгрузкаИсторииПродаж()

// Процедура ВыгрузкаПеремещений
//
// Параметры:
//  Нет
//
// Описание:
//	Процедура выгружает документы перемещения для приложения Агент+ 1.5,
//   
Процедура ВыгрузкаПеремещений() Экспорт
	
	Текст.ДобавитьСтроку("<Begin>" + Т_+ "Doc_Move" + Т_	+ "Struct:DocID,DocState,DocFlags,TimeCrt,DocNumber," + 
															  "=Category,FirmID,StoreID,MoveType,DocSum,Comment," + 
															  "MDocID");
															  
	Текст.ДобавитьСтроку("<Sub>" + Т_+ "Lines" + Т_+ "Struct:GoodsID,Amount,Price,Sum,=UCode,=UDim");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеТоваров.Ссылка,
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.Номер,
	|	ВложенныйЗапрос.СуммаДок
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ПеремещениеТоваровТовары.Коэффициент * ПеремещениеТоваровТовары.Количество * ПеремещениеТоваровТовары.Цена) КАК СуммаДок,
	|			ПеремещениеТоваровТовары.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПеремещениеТоваровТовары.Ссылка) КАК ВложенныйЗапрос
	|		ПО ПеремещениеТоваров.Ссылка = ВложенныйЗапрос.Ссылка
	|ГДЕ
	|	ПеремещениеТоваров.Дата МЕЖДУ &ПарДатаНач И &ПарДатаКон
	|	И (ПеремещениеТоваров.СкладПолучатель = &парСклад
	|			ИЛИ ПеремещениеТоваров.СкладОтправитель = &парСклад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПеремещениеТоваров.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("парСклад", АвтоСклад);
	Запрос.УстановитьПараметр("ПарДатаНач", НачалоДня(ТекущаяДата() - (СрокПеремещений * 86400)));
	Запрос.УстановитьПараметр("ПарДатаКон", КонецДня(ТекущаяДата()));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Док = Выборка.Ссылка;
		
		ИдФирмы = Т_+ СокрЛП(Док.Организация.УникальныйИдентификатор());
			
		ИдДок 	= СокрЛП(Док.УникальныйИдентификатор());
			
		НомерДок	 = Т_+ СокрЛП(Док.Номер);
		ДатаВремяДок = Т_+ кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(Док.Дата);
		Комментарий  = Т_+ кпкАгентПлюс.УбратьНечитаемыеСимволы(Док.Комментарий);
		СостДок 	 = Т_+ ?(Док.Проведен, "1", "2");
		СостДокВЦБД  = кпкАгентПлюс.АПВернутьСостояниеДок(Док);
		Если Док.СкладПолучатель = АвтоСклад Тогда
			Тип = Т_ + "1";
			Склад = Т_ + СокрЛП(Док.СкладОтправитель.УникальныйИдентификатор());
		Иначе
			Тип = Т_ + "2";
			Склад = Т_ + СокрЛП(Док.СкладПолучатель.УникальныйИдентификатор());
		КонецЕсли;
		СуммаДок	= Т_+ кпкАгентПлюс.ФорматироватьЧисло(Выборка.СуммаДок);
		ДокОсн		= Т_ + "";
	            
		НеОбновлять = Число(флОстутствующиеПеремещения) * 256;
		Если СостДокВЦБД = 1 Тогда
			СостДокВЦБД = СостДокВЦБД + 8 + НеОбновлять;
		КонецЕсли;		
		
		СостДокВЦБД = Т_ + Строка(СостДокВЦБД);
		
		КодКат = Т_ + ВернутьКодКатегорииДокумента(Док);
		
		Текст.ДобавитьСтроку(ИдДок + СостДок + СостДокВЦБД + ДатаВремяДок + НомерДок + КодКат +
							 ИдФирмы + Склад + Тип + СуммаДок + Комментарий + ДокОсн);
						 
    	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();

		Если РежимВыгрузкиОстатков = 1 Тогда
			Разрез = "ХарактеристикаНоменклатуры";
		ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда
			Разрез = "СерияНоменклатуры";
		КонецЕсли;  
				
		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Lines");
		
		Для Каждого Стр Из Док.Товары Цикл
			
			Ном   = Стр.Номенклатура;
			ОснЕд = ПолучитьБазовуюЕдиницу(Ном);
			
			Если Ном = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИдТовара  = СокрЛП(Ном.УникальныйИдентификатор());
			
			// А+ 27.06.2007 - начало
			Если РежимВыгрузкиОстатков >= 1  Тогда
				Раз = Стр[Разрез];
				Если Раз <> Неопределено Тогда
					Если НЕ Раз.Пустая() Тогда
						ИдТовара = СокрЛП(Раз.УникальныйИдентификатор());
					КонецЕсли;
				КонецЕсли;			
			КонецЕсли;      
			// А+ 27.06.2007 - конец
			
			Кол		= Стр.Количество;    								
			Цена 	= кпкАгентПлюс.ФорматироватьЧисло(Стр.Цена);
			Сумма 	= кпкАгентПлюс.ФорматироватьЧисло(Стр.Цена * Кол);
			
			Если ИспЕдИзм Тогда
				КодЕд 		  = ПолучитьКодЕдиницы(Ном, Стр.ЕдиницаИзмерения);				
				РазмерностьЕд = Стр.ЕдиницаИзмерения.Коэффициент;			
			Иначе
				КодЕд 		  = ПолучитьКодЕдиницы(Ном, ОснЕд);				
				РазмерностьЕд = ОснЕд.Коэффициент;			
				Если Стр.ЕдиницаИзмерения <> ОснЕд Тогда
					ТекКоэф = Стр.ЕдиницаИзмерения.Коэффициент;
					ОснКоэф = ОснЕд.Коэффициент;
					Кол = Кол * (ТекКоэф / ОснКоэф);
				КонецЕсли;  
			КонецЕсли;
				
			СтрКол	= кпкАгентПлюс.ФорматироватьЧисло(Кол);
			
			Текст.ДобавитьСтроку(Строка(ИдТовара)  + Т_ + СтрКол + Т_ + Цена + Т_ + Сумма + Т_ + Строка(КодЕд) + Т_ + Строка(РазмерностьЕд));
			
			Если сзДопТовары.НайтиПоЗначению(Стр.Номенклатура) = Неопределено Тогда
				сзДопТовары.Добавить(Стр.Номенклатура);
			КонецЕсли;
			
		КонецЦикла;
		
		Текст.ДобавитьСтроку("<End>" + Т_ + "Lines"); 
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Doc_Move");
		
КонецПроцедуры //ВыгрузкаПеремещений()

// Процедура ВыгрузкаИнвентаризаций
//
// Параметры:
//  Нет
//
// Описание:
//	Процедура выгружает документы инвентаризаций для приложения Агент+ 1.5,
// 
Процедура ВыгрузкаИнвентаризаций() Экспорт
	
	Текст.ДобавитьСтроку("<Begin>" + Т_+ "Doc_Inventory" + Т_	+ "Struct:DocID,DocState,DocFlags,TimeCrt,DocNumber," + 
																  "=Category,FirmID,InvType,DocSum,Comment,=PaymntType," + 
																  "=PriceType, MDocID");
																  
	Текст.ДобавитьСтроку("<Sub>" + Т_+ "Lines" +Т_+ "Struct:GoodsID,AmountDB,Amount,Price,Sum,=UCode,=UDim");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Инвентаризация.Ссылка,
	|	Инвентаризация.Дата,
	|	Инвентаризация.Номер
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Дата МЕЖДУ &ДатаНач И &ДатаКон 	
	|	И Инвентаризация.Склад = &МобСклад            	
	|	И (НЕ Инвентаризация.ПометкаУдаления)
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Инвентаризация.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МобСклад", АвтоСклад);
	Запрос.УстановитьПараметр("ДатаНач",  НачалоДня(ТекущаяДата() - (СрокИнвентаризаций * 86400)));
	Запрос.УстановитьПараметр("ДатаКон",  КонецДня(ТекущаяДата()));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Док = Выборка.Ссылка;
		
		ИдФирмы = Т_+ СокрЛП(Док.Организация.УникальныйИдентификатор());
			
		ИдДок 	= СокрЛП(Док.УникальныйИдентификатор());
			
		НомерДок	  = Т_+ СокрЛП(Док.Номер);
		ДатаВремяДок  = Т_+ кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(Док.Дата);		
		Комментарий   = Т_+ кпкАгентПлюс.УбратьНечитаемыеСимволы(Док.Комментарий);		
		Тип 		  = Т_ + ?(Док.кпкВидОперации = 0, "1", "2"); 
		КодВидаОплаты = Т_ + "";
		КодТипаЦены   = Т_ + "";
		
		Если Док.ПометкаУдаления Тогда			
			СостДок 	  = Т_+ "2";
			СостДокВЦБД = 3;
		Иначе			
			СостДок 	  = Т_+ "1";			
			СостДокВЦБД = 1;                    			
		КонецЕсли;
        		
		СуммаДок	  = Т_+ кпкАгентПлюс.ФорматироватьЧисло(Док.Товары.Итог("Сумма"));
		ДокОсн		  = Т_ + "";
		
		Если Док.КпкВидВыгрузки = 1 Тогда // Частичная установка остатков
			ДопФлагиВыгр = 1024;
		ИначеЕсли Док.КпкВидВыгрузки = 2 Тогда // Полная установка остатков
			ДопФлагиВыгр = 2048;
		Иначе 
			ДопФлагиВыгр = 0; // Обычная выгрузка
		КонецЕсли;
		
		СостДокВЦБД = СостДокВЦБД + 8 + ДопФлагиВыгр;  // Всегда устанавливаем запрет на редактирование док в КПК
				
		СостДокВЦБД = Т_ + Формат(СостДокВЦБД, "ЧГ=0");
		
		КодКат = Т_ + ВернутьКодКатегорииДокумента(Док);
		
		Текст.ДобавитьСтроку(ИдДок + СостДок + СостДокВЦБД + ДатаВремяДок
			+ НомерДок + КодКат + ИдФирмы + Тип + СуммаДок + Комментарий + КодВидаОплаты + КодТипаЦены + ДокОсн);
			
		РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();

		Если РежимВыгрузкиОстатков = 1 Тогда
			Разрез = "ХарактеристикаНоменклатуры";
		ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда
			Разрез = "СерияНоменклатуры";
		КонецЕсли;  
	
		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Lines");
		
		Для Каждого Стр Из Док.Товары Цикл
			
			Ном   = Стр.Номенклатура;
			ОснЕд = ПолучитьБазовуюЕдиницу(Ном);
			
			Если Ном = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИдТовара  = СокрЛП(Ном.УникальныйИдентификатор());
			// А+ 27.06.2007 - начало
			Если РежимВыгрузкиОстатков >= 1  Тогда
				Раз = Стр[Разрез];
				Если Раз <> Неопределено Тогда
					Если НЕ Раз.Пустая() Тогда
						ИдТовара = СокрЛП(Раз.УникальныйИдентификатор());
					КонецЕсли;                                           					
				КонецЕсли;			
			КонецЕсли;   
			// А+ 27.06.2007 - конец
			
			Кол		  = Стр.Количество;
			УчКол	  = Стр.КоличествоУчет;  			
			Цена 	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.Цена);
			Сумма 	  = кпкАгентПлюс.ФорматироватьЧисло(Стр.Цена*Кол);			
			
			Если ИспЕдИзм Тогда
				КодЕд 		  = ПолучитьКодЕдиницы(Ном, Стр.ЕдиницаИзмерения);				
				РазмерностьЕд = Стр.ЕдиницаИзмерения.Коэффициент;			
			Иначе
				КодЕд 		  = ПолучитьКодЕдиницы(Ном, ОснЕд);				
				РазмерностьЕд = ОснЕд.Коэффициент;			
				Если Стр.ЕдиницаИзмерения <> ОснЕд Тогда
					ТекКоэф = Стр.ЕдиницаИзмерения.Коэффициент;
					ОснКоэф = ОснЕд.Коэффициент;
					Кол     = Кол * (ТекКоэф / ОснКоэф);
					УчКол   = УчКол * (ТекКоэф / ОснКоэф);
				КонецЕсли;				
			КонецЕсли;
			
			СтрКол	 = кпкАгентПлюс.ФорматироватьЧисло(Кол);
			СтрУчКол = кпкАгентПлюс.ФорматироватьЧисло(УчКол);
			
			Текст.ДобавитьСтроку(Строка(ИдТовара)  + Т_ + СтрУчКол + Т_ + СтрКол + Т_ + Цена + Т_ + Сумма + Т_ + 
								 Строка(КодЕд) + Т_ + Строка(РазмерностьЕд));
			
			Если сзДопТовары.НайтиПоЗначению(Стр.Номенклатура) = Неопределено Тогда
				сзДопТовары.Добавить(Стр.Номенклатура);
			КонецЕсли;
			
		КонецЦикла;
		
		Текст.ДобавитьСтроку("<End>" + Т_ + "Lines");
		
	КонецЦикла;
	
	Если флОбновитьОстаткиПоМобСкладу Тогда
		ВыгрузкаОстатковПоПередвижномуСкладу();				
	КонецЕсли;		
		
	Текст.ДобавитьСтроку("<End>" + Т_ + "Doc_Inventory");
		
КонецПроцедуры //ВыгрузкаИнвентаризаций()

// Процедура ВыгрузкаОстатковПоПередвижномуСкладу
//
// Параметры:
//  Нет
//
// Описание:
//	Процедура формирует выртуальный документ инвентаризации по передвижному скалуд агента
//  для последующей его выгрузки в МУ агента для приложения Агент+ 1.5.
//  Сам документ в базе 1С не создается, он необходим для "выравнивания" остатков по
//	передвижному складу агента
//  
Процедура ВыгрузкаОстатковПоПередвижномуСкладу() Экспорт
	
	Если АвтоСклад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,
		|	ОстаткиТоваров.СерияНоменклатуры,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.ЦенаВРознице,
		|	ВЫБОР
		|		КОГДА СУММА(ОстаткиПартий.КоличествоОстаток) = 0
		|				ИЛИ СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ СУММА(ОстаткиПартий.СтоимостьОстаток) * СУММА(ОстаткиТоваров.КоличествоОстаток) / СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ КАК Сумма,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыВНТТ.Остатки(
		|			&Дата,
		|			Склад = &Склад
		|				И Номенклатура В ИЕРАРХИИ (&Ассортимент)) КАК ОстаткиТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
		|				&Дата,
		|				Склад = &ПартионныйСклад
		|					И Номенклатура В ИЕРАРХИИ (&Ассортимент)) КАК ОстаткиПартий
		|		ПО ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
		|			И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры
		|			И (ОстаткиТоваров.СерияНоменклатуры = ОстаткиПартий.СерияНоменклатуры
		|				ИЛИ (НЕ ОстаткиТоваров.Номенклатура.ВестиПартионныйУчетПоСериям))
		|{ГДЕ
		|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
		|	ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,
		|	ОстаткиТоваров.СерияНоменклатуры,
		|	ОстаткиТоваров.ЦенаВРознице,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент";
	Иначе
		Если АвтоСклад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			РегОстатки = "ТоварыНаСкладах";
		Иначе
			РегОстатки = "ТоварыВРознице";
		КонецЕсли;

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,		
		|	ОстаткиТоваров.СерияНоменклатуры,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.Качество,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество,
		|	ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ                                  КАК Сумма
		|ИЗ
		|	РегистрНакопления." + РегОстатки + ".Остатки(&Дата, Склад = &Склад и Номенклатура в иерархии(&Ассортимент))
		|КАК ОстаткиТоваров
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&Дата, 
		|	                                                  Склад = &ПартионныйСклад и Номенклатура в иерархии(&Ассортимент)) КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
		|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры		
		|	И (ОстаткиТоваров.СерияНоменклатуры          = ОстаткиПартий.СерияНоменклатуры
		|		ИЛИ НЕ ОстаткиТоваров.Номенклатура.ВестиПартионныйУчетПоСериям)
		|	И ОстаткиТоваров.Качество                   = ОстаткиПартий.Качество
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,		
		|	ОстаткиТоваров.СерияНоменклатуры,
		|	ОстаткиТоваров.Качество";

	КонецЕсли;
 
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Склад", АвтоСклад);	
	Если РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ТекущаяДата()).ВестиПартионныйУчетПоСкладам Тогда
		ВремСклад = ОснСклад;
	Иначе
		ВремСклад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	Запрос.УстановитьПараметр("ПартионныйСклад", ВремСклад);	
	Запрос.УстановитьПараметр("Дата",  			 ТекущаяДата());
	Запрос.УстановитьПараметр("Ассортимент",     сзАссортимент);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество()<>0 Тогда	
		
		ОсновнаяОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
		
		ИдФирмы = Т_+ СокрЛП(ОсновнаяОрганизация.УникальныйИдентификатор());
				
		ИдДок = Новый УникальныйИдентификатор;
		
		НомерДок = "";
		  		
		НомерДок	  = Т_ + НомерДок;
		ДатаВремяДок  = Т_ + кпкАгентПлюс.ДатаВремяВФорматXMLИз1С();
		Комментарий   = Т_ + "Выравнивание остатков";
		СостДок 	  = Т_ + "1"; // документ проведен
		ВидОперации   = Т_ + "2"; // устанавливаем режим изменения остатков при проведении в КПК
		КодВидаОплаты = Т_ + "";
		КодТипаЦены   = Т_ + "";		
		СуммаДок	  = Т_ + "";
		ДокОсн		  = Т_ + "";     		
		Рез 		  = 1  + 2048;		
		КодКат 		  = Т_ + "";
		
		//Документ проведен, запрещен для редактирования, полная установка остатков
		СостДокВЦБД = Т_ + кпкАгентПлюс.ФорматироватьЧисло(1 + 8 + 2048);	
		
		Текст.ДобавитьСтроку(СокрЛП(ИдДок) + СостДок + СостДокВЦБД + ДатаВремяДок
		+ НомерДок + КодКат + ИдФирмы + ВидОперации + СуммаДок + Комментарий + КодВидаОплаты + КодТипаЦены + ДокОсн);
		
		РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
		
		Если РежимВыгрузкиОстатков = 1 Тогда
			Разрез = "ХарактеристикаНоменклатуры";
		ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда
			Разрез = "СерияНоменклатуры";
		КонецЕсли;  

		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Lines");
		Пока Выборка.Следующий() Цикл
			
			Ном   = Выборка.Номенклатура;
			ОснЕд = Ном.ЕдиницаХраненияОстатков;
			
			Если Ном = Неопределено Тогда
				Продолжить;
			КонецЕсли;
 			
			ИдТовара  = СокрЛП(Ном.УникальныйИдентификатор());			
						
			Если РежимВыгрузкиОстатков >= 1  Тогда
				Раз = Выборка[Разрез];
				Если Раз <> Неопределено Тогда
					Если НЕ Раз.Пустая() Тогда
						ИдТовара = СокрЛП(Раз.УникальныйИдентификатор());
					КонецЕсли;
				КонецЕсли;			
			КонецЕсли;
            			
			Кол		  = Выборка.Количество;			
			УчКол	  = 0;    			
			СтрКол	  = кпкАгентПлюс.ФорматироватьЧисло(Кол);
			СтрУчКол  = кпкАгентПлюс.ФорматироватьЧисло(УчКол);
			Цена 	  = "";
			Сумма 	  = "";
			
			КодЕд 		  = ПолучитьКодЕдиницы(Ном, ОснЕд);				
			РазмерностьЕд = ОснЕд.Коэффициент;							
			
			СтрКол	 = кпкАгентПлюс.ФорматироватьЧисло(Кол);
			СтрУчКол = кпкАгентПлюс.ФорматироватьЧисло(УчКол);
			
			Текст.ДобавитьСтроку(Строка(ИдТовара)  + Т_ + СтрУчКол + Т_ + СтрКол + Т_ + Цена + Т_ + Сумма + 
								 Т_ + Строка(КодЕд) + Т_ + Строка(РазмерностьЕд));
			
			Если сзДопТовары.НайтиПоЗначению(Ном) = Неопределено Тогда
				сзДопТовары.Добавить(Ном);
			КонецЕсли;
		КонецЦикла;
		
		Текст.ДобавитьСтроку("<End>" + Т_ + "Lines");
		
	КонецЕсли; 

КонецПроцедуры //ВыгрузкаОстатковПоПередвижномуСкладу()

// Процедура ВыгрузкаЗапросов
//
// Параметры:
//  Нет
//
// Описание:
//	Процедура предназначена для формирования ответной выгрузки по переданному запросу(запросам) от агента
// 	Процедура единая и используется как для приложения Агент+ 1.5, так и для Агент Плюс: Мобильная торговля
//
Процедура ВыгрузкаЗапросов() Экспорт
	
	Выборка = Справочники.кпкЗапросыАгентов.Выбрать(, ВыбАгент);
	
	Пока Выборка.Следующий() Цикл
		
		Если (Выборка.ПометкаУдаления) ИЛИ (НЕ Выборка.Активен) Тогда
			Продолжить;
		КонецЕсли;
		
		КолФото = 0;
		
		ВидЗапроса = Выборка.Запрос.ВидЗапроса;
		
		ВыгрузкаСистемнойКонстантыСпискаТиповЦен();
		
		Если ВидЗапроса = Перечисления.кпкВидыЗапросовДляАгентов.ИсторияПродаж Тогда
			
			кпкАгентПлюс.СформироватьСписокКлиентовАгентов(ВыбАгент, ПланПосещений, сзКлиентыАгента, 
														   сзТоргТочкиАгента, ТаблицаДоговоровАгента);			
			
			Ассортимент = РегистрыСведений.кпкСведенияАгента.Получить(Новый Структура("Объект", ВыбАгент)).Ассортимент;			
			сзАссортимент = Новый СписокЗначений;
			сзАссортимент.ЗагрузитьЗначения(Ассортимент.ТАссортимент.ВыгрузитьКолонку("Номенклатура"));
			
			Если МобильноеПриложение = ТипАгентМТ Тогда
				
				Если Не ОткрытьФайлВыгрузкиМТ() Тогда
					Возврат;
				КонецЕсли;					
				
				ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
					ДобавитьПоле("Comment", "Справочники");
					ВыгрузитьИсториюПродаж();
				ДокОбмена.ЗаписатьКонецЭлемента();
				
				ЗакрытьФайлВыгрузкиМТ();
			Иначе
				
				ВыгрузкаИсторииПродаж();
				
			КонецЕсли;
			
		ИначеЕсли ВидЗапроса = Перечисления.кпкВидыЗапросовДляАгентов.Взаиморасчеты Тогда
			
			СформироватьТаблицуВыгружаемыхТиповЦен(); 
						
			кпкАгентПлюс.СформироватьСписокКлиентовАгентов(ВыбАгент, ПланПосещений, сзКлиентыАгента, 
														   сзТоргТочкиАгента, ТаблицаДоговоровАгента);
			
			Если МобильноеПриложение = ТипАгентМТ Тогда				
				
				#Если Клиент Тогда
					Состояние("Заполнение списка клиентов...");
				#КонецЕсли				
				
				кпкАгентПлюс.СформироватьСписокКлиентовАгентов(ВыбАгент, ПланПосещений, сзКлиентыАгента, 
															   сзТоргТочкиАгента, ТаблицаДоговоровАгента);
				
				Если Не ОткрытьФайлВыгрузкиМТ() Тогда
					Возврат;
				КонецЕсли;					
				
				ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
					ДобавитьПоле("Comment", "Справочники");
					ВыгрузитьКлиентов();
				ДокОбмена.ЗаписатьКонецЭлемента();
					
				ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
					ДобавитьПоле("Comment", "Документы");
					ВыгрузитьВзаиморасчеты();
				ДокОбмена.ЗаписатьКонецЭлемента();
				
				ЗакрытьФайлВыгрузкиМТ();					
				
			Иначе
				
				ВыгрузкаВзаиморасчетов();
				ВыгрузкаКлиентов();
				
			КонецЕсли;
			
		ИначеЕсли ВидЗапроса = Перечисления.кпкВидыЗапросовДляАгентов.Маршруты Тогда
			
			кпкАгентПлюс.НайтиПланАгента(ВыбАгент, сзКлиентыАгента, сзТоргТочкиАгента, ПланПосещений);
			
			Если МобильноеПриложение = ТипАгентМТ Тогда
				
				Если Не ОткрытьФайлВыгрузкиМТ() Тогда
					Возврат;
				КонецЕсли;    				
				
				ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
					ДобавитьПоле("Comment", "Документы");
					ВыгрузитьМаршрутыАгента();
				ДокОбмена.ЗаписатьКонецЭлемента();
				
				ЗакрытьФайлВыгрузкиМТ();	
				
			Иначе
				ВыгрузкаМаршрутов();
			КонецЕсли;
			
		ИначеЕсли ВидЗапроса = Перечисления.кпкВидыЗапросовДляАгентов.Номенклатура Тогда
			
			СформироватьТаблицуВыгружаемыхТиповЦен();
			
			Если МобильноеПриложение = ТипАгентМТ Тогда
				
				Если Не ОткрытьФайлВыгрузкиМТ() Тогда
					Возврат;
				КонецЕсли;			
				
				ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
					ДобавитьПоле("Comment", "Справочники");
					ВыгрузитьНоменклатуру();
					ВыгрузитьХарактеристикиНоменклатуры();
				ДокОбмена.ЗаписатьКонецЭлемента();
				
				ЗакрытьФайлВыгрузкиМТ();
				
			Иначе
				ВыгрузкаНоменклатуры();
			КонецЕсли;
			
		ИначеЕсли ВидЗапроса = Перечисления.кпкВидыЗапросовДляАгентов.Задания Тогда
			
			ВыгрузкаЗаданийДляАгента();		
			
		ИначеЕсли ВидЗапроса = Перечисления.кпкВидыЗапросовДляАгентов.Полный Тогда
			
			Если МобильноеПриложение = ТипАгентМТ Тогда
				СформироватьФайВыгрузкиДляМобильнойТорговли();
			Иначе			
				#Если Клиент Тогда	
					Состояние("Заполнение списка клиентов...");   
				#КонецЕсли     			
				кпкАгентПлюс.СформироватьСписокКлиентовАгентов(ВыбАгент, ПланПосещений, сзКлиентыАгента, 
															   сзТоргТочкиАгента, ТаблицаДоговоровАгента);   	
				
				#Если Клиент Тогда	
					Состояние("Выгрузка структуры таблиц...");
				#КонецЕсли    			
				ВыгрузкаСтруктурТаблиц();	
				
				#Если Клиент Тогда	
					Состояние("Выгрузка перечислений...");
				#КонецЕсли        
				ВыгрузкаПеречислений();  
				
				#Если Клиент Тогда	
					Состояние("Выгрузка скидок...");
				#КонецЕсли     
				ВыгрузкаСкидок();
				
				#Если Клиент Тогда	
					Состояние("Выгрузка фирм...");
				#КонецЕсли   
				ВыгрузкаФирм();
				
				#Если Клиент Тогда	
					Состояние("Выгрузка маршрутов...");
				#КонецЕсли   
				ВыгрузкаМаршрутов();
				
				#Если Клиент Тогда	
					Состояние("Выгрузка контрагентов...");
				#КонецЕсли    
				ВыгрузкаКлиентов();
				
				Если ИспТочек Тогда
					#Если Клиент Тогда
						Состояние("Выгрузка торговых точек...");
					#КонецЕсли    
					ВыгрузкаТорговыхТочек();                   
				КонецЕсли;
				#Если Клиент Тогда	
					Состояние("Выгрузка складов...");
				#КонецЕсли
				
				ВыгрузкаСкладов();
				#Если Клиент Тогда	
					Состояние("Выгрузка взаиморасчетов...");
				#КонецЕсли
				
				ВыгрузкаВзаиморасчетов(); 			
				#Если Клиент Тогда	
					Состояние("Выгрузка расходных накладных...");			
				#КонецЕсли  
				
				Если РеализацияПоЗаявкам = 3 Тогда
					ВыгрузкаРасходныхНакладныхПоРегиструСсылок();
				Иначе
					ВыгрузкаРасходныхНакладных();
				КонецЕсли;
				
				#Если Клиент Тогда	
					Состояние("Выгрузка перемещений...");
				#КонецЕсли 
				ВыгрузкаПеремещений();
				
				#Если Клиент Тогда	
					Состояние("Выгрузка персональных цен...");
				#КонецЕсли
				ВыгрузкаПерсональныхЦен();			
				
				Если Константы.кпкИспользоватьПланыПродаж.Получить() Тогда
					#Если Клиент Тогда	
						Состояние("Выгрузка планов продаж...");
					#КонецЕсли
					ВыгрузкаПлановПродаж();	
				КонецЕсли;
				
				#Если Клиент Тогда	
					Состояние("Выгрузка номенклатуры...");
				#КонецЕсли
				ВыгрузкаНоменклатуры();
				
				#Если Клиент Тогда	
					Состояние("Выгрузка инвентаризаций...");
				#КонецЕсли   
				ВыгрузкаИнвентаризаций();			
				
				#Если Клиент Тогда	
					Состояние("Выгрузка истории продаж...");
				#КонецЕсли       
				ВыгрузкаИсторииПродаж();
				
				#Если Клиент Тогда	
					Состояние("Выгрузка дополнительных данных...");
				#КонецЕсли
				
				ВыгрузкаНумераторов();			
				ВыгрузкаСтартовыхНомеровНумераторов();
				ВыгрузкаОписанийСкриптовОтчетов();
				ВыгрузкаОписанийСкриптовПечати();
				ВыгрузкаСкриптов();
				ВыгрузкаОписанийКартинокТоваров(КолФото);
				ВыгрузкаПодтверждений();
				ВыгрузкаФото();
				ВыгрузкаКоманд();
				ВыгрузкаСистемныхКонстант(КолФото);	
				
				#Если Клиент Тогда	
					Состояние("Выгрузка матриц товаров...");  			
				#КонецЕсли
				ВыгрузкаМатрицТоваров(); 
				
				#Если Клиент Тогда	
					Состояние("Выгрузка сообщений для агента...");
				#КонецЕсли
				ВыгрузкаСообщенийДляАгента(Истина);
				ВыгрузкаСообщенийДляАгента(Ложь);
				
				Если флВыгружатьЗадания Тогда
					#Если Клиент Тогда	
						Состояние("Выгрузка заданий...");  			
					#КонецЕсли
					ВыгрузкаЗаданийДляАгента();	
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Спр = Выборка.ПолучитьОбъект();
		Спр.Активен = Ложь;
		
		ОтветитьНаЗапрос = Ложь;
		
		Если Не ВыполнитьОперациюДляОбъекта(Спр, "запись") Тогда 									
			Возврат;			
		КонецЕсли;
 		
	КонецЦикла;
	
КонецПроцедуры //ВыгрузкаЗапросов()

// Предназначена для выгрузки описания нумераторов - длины номеров и списки видов документов,
// к которым они привязаны (один нумератор может быть привязан к нескольким видам
// документов). Тип номеров в нумераторах всегда текстовый.
// Вся информация хранится в справочнике "КпкНумераторы".
//
// Процедура выгружает только описания нумераторов, стартовые номера нумераторов
// выгружаются процедурой ВыгрузкаСтартовыхНомеровНумераторов().
//
Процедура ВыгрузкаНумераторов() Экспорт
	
	спрНумераторы = Справочники.КпкНумераторы;
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Numerators" + Т_ + "Struct:NumCode,NumSize,DocList");
	
	Спр = спрНумераторы.Выбрать();
	Пока Спр.Следующий() Цикл
		Если Спр.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		Текст.ДобавитьСтроку(Строка(?(Спр.Код = 100, 0, Спр.Код)) + Т_+ СокрЛП(Спр.ДлинаНомера) + Т_+ СокрЛП(Спр.ВидыДокументовВКпк));
		// В КПК используется нумератор с кодом 0 для документов с отключенной автонумерацией
		// но в 1С 8 нулевые коды справочников использовать нельзя
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Numerators");
	
КонецПроцедуры //ВыгрузкаНумераторов()

// Процедура выгружает статовые номера документов. 
// Это следует делать не каждый раз при выгрузке, а только если это указано явно пользователем.
//
Процедура ВыгрузкаСтартовыхНомеровНумераторов() Экспорт
	
	Если НЕ флСтартовыеНомера Тогда
		Возврат;
	КонецЕсли;
	
	//ЗаполнитьТаблицуСтартовыхНомеров();
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_NumStarts" + Т_ + "Struct:NumCode,StartNumber");
	
	Для Каждого Стр Из ТабСтартовыеНомера Цикл
		Текст.ДобавитьСтроку(Строка(Стр.КодНумератора) + Т_+ СокрЛП(Стр.СтартовыйНомер));
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_NumStarts");
	
КонецПроцедуры //ВыгрузкаСтартовыхНомеровНумераторов()

// Процедура предназначена для выгрузки в КПК описания скриптов печати документов.
// Поддержка печати используется при "торговле с колес" в Агент+ конфигурации "Инвент".
// Процедура так же выгружает привязку печатных форм к фирмам документов (формирует 
// дополнительный тэг Ref_FirmsPrnLinks)
//
Процедура ВыгрузкаОписанийСкриптовПечати() Экспорт
    
	/////////////////////////////////////////////////////////////////////////
	//Выгрузка описаний скриптов печатных форм документов	
	/////////////////////////////////////////////////////////////////////////
	
	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_PrnScripts" +Т_+ "Struct:ObjCode,Name,FileName,Copyes,=ScriptName,=TextMode");
	
	СпрПечФормы = Справочники.КпкПечатныеФормы;
	
	ВыбПечФормы = СпрПечФормы.Выбрать();
	
	Пока ВыбПечФормы.Следующий() Цикл
		
		Если ВыбПечФормы.ПометкаУдаления или ВыбПечФормы.ЭтоГруппа Тогда Продолжить; КонецЕсли;
		
		Наименование = кпкАгентПлюс.УбратьНечитаемыеСимволы(ВыбПечФормы.Наименование);
		
		Стр = СокрЛП(выбПечФормы.ВидДокументаВКПК) + Т_+ Наименование + Т_+ СокрЛП(ВыбПечФормы.Скрипт) + Т_+
			  Строка(ВыбПечФормы.ЧислоКопий) + Т_+ СокрЛП(ВыбПечФормы.Код) + Т_+ Строка(Число(ВыбПечФормы.Текстовая));
			
		Текст.ДобавитьСтроку(Стр);
		
	КонецЦикла;

	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_PrnScripts");

	/////////////////////////////////////////////////////////////////////////
	//Выгрузка привязки печатных форм документов к фирмам
	/////////////////////////////////////////////////////////////////////////
	
	ПеречВидыПечФормОбщие = Перечисления.КпкВидыПечатныхФорм.Общие;
	
	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_FirmsPrnLinks" +Т_+ "Struct:FirmID,ScriptName");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	кпкСведенияОрганизаций.Объект,
	|	кпкПечатныеФормы.Код
	|ИЗ
	|	РегистрСведений.кпкСведенияОрганизаций КАК кпкСведенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.кпкПечатныеФормы КАК кпкПечатныеФормы
	|		ПО кпкСведенияОрганизаций.ВидПечатныхФорм = кпкПечатныеФормы.ВидФормы
	|ГДЕ
	|	(НЕ кпкСведенияОрганизаций.Объект.ПометкаУдаления)
	|	И (НЕ кпкПечатныеФормы.ПометкаУдаления)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		ИдФирмы  = СокрЛП(Выборка.Объект.УникальныйИдентификатор());
		КодФормы = СокрЛП(Выборка.Код);
		Текст.ДобавитьСтроку(ИдФирмы + Т_+ КодФормы);		
	КонецЦикла;
	
	//спрОрганизации = Справочники.Организации;
	//выбОрганизации = спрОрганизации.Выбрать();
	//Пока выбОрганизации.Следующий() Цикл
	//	Если выбОрганизации.ПометкаУдаления Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	ИдФирмы 		= СокрП(выбОрганизации.Ссылка.УникальныйИдентификатор());
	//	
	//	ВидФормыФирмы 	= Перечисления.кпкВидыПечатныхФорм.ПустаяСсылка();
	//	СтОтбор = Новый Структура("Объект", ВыбОрганизации.Ссылка);		
	//	Выборка = РегистрыСведений.кпкСведенияОрганизаций.Выбрать(СтОтбор);
	//	Если Выборка.Следующий() Тогда
	//		ВидФормыФирмы = Выборка.ВидПечатныхФорм;
	//	КонецЕсли;	
	//	
	//	Если ВидФормыФирмы = Перечисления.кпкВидыПечатныхФорм.ПустаяСсылка() Тогда
	//		ВидФормыФирмы = Перечисления.КпкВидыПечатныхФорм.Официальные;
	//	КонецЕсли;
	//	
	//	// Выгружаются привязки форм в два прохода:
	//	// на первом проходе выгружаются привязки, специфичные для фирмы
	//	// на втором - привязки, общие для всех фирм.
	//	Для Поз = 1 По 2 Цикл
	//		выбПечФормы = спрПечФормы.Выбрать();
	//		Пока выбПечФормы.Следующий() Цикл
	//			Если выбПечФормы.ПометкаУдаления Тогда
	//				Продолжить;
	//			ИначеЕсли выбПечФормы.ВидФормы <> ВидФормыФирмы Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			Текст.ДобавитьСтроку(ИдФирмы + Т_+ СокрЛП(выбПечФормы.Код));
	//		КонецЦикла;
	//		Если ВидФормыФирмы = ПеречВидыПечФормОбщие Тогда
	//			Прервать; //может быть и такое, что за фирмой закреплены только общие формы
	//		Иначе
	//			ВидФормыФирмы = ПеречВидыПечФормОбщие;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_FirmsPrnLinks");
	
КонецПроцедуры //ВыгрузкаОписанийСкриптовПечати()

// Процедура предназначена для выгрузки в КПК описания скриптов отчетов для возможности добавления 
// в Агент + собственных отчетов. Поддержка скриптов отчетов доступна только в Агент+ "Инвент"
//
Процедура ВыгрузкаОписанийСкриптовОтчетов() Экспорт
	
	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_RepScripts" +Т_+ "Struct:Name,FileName,=TextMode");
	
	Для Поз = 0 По 1 Цикл
		Если Поз = 0 Тогда
			Кнц = ".lua";
		Иначе
			Кнц = "_txt.lua";
		КонецЕсли;
		
		//Ссылка на файл скрипта формирования отчета "Реестр кассовых ордеров"
		Текст.ДобавитьСтроку("Реестр кассовых ордеров" +Т_+ "RepCashList"+Кнц +Т_+ Строка(Поз));
		
		//Ссылка на файл скрипта формирования отчета "Остатки товаров"
		Текст.ДобавитьСтроку("Остатки товаров" +Т_+ "RepGoodsList"+Кнц +Т_+ Строка(Поз));
		
		//Ссылка на файл скрипта формирования отчета "Взаиморасчеты с клиентом"
		Текст.ДобавитьСтроку("Взаиморасчеты с клиентом" +Т_+ "RepSettlement"+Кнц +Т_+ Строка(Поз));
		
		//Ссылка на файл скрипта формирования отчета "Взаиморасчеты с клиентом"
		Текст.ДобавитьСтроку("Прайс-лист" +Т_+ "RepPriceList"+Кнц +Т_+ Строка(Поз));
		
		Текст.ДобавитьСтроку("Отчет по заявкам"  		+ Т_+ "RepOrder"	  + Кнц +Т_+ Строка(Поз));
		
		Текст.ДобавитьСтроку("Отчет по продажам" 		+ Т_+ "RepSale"		  + Кнц +Т_+ Строка(Поз));
		
		Текст.ДобавитьСтроку("Остатки и цены товаров" 	+ Т_+ "RepGoodsList2" + Кнц +Т_+ Строка(Поз));
		
		Текст.ДобавитьСтроку("Оборотная ведомость" 		+ Т_+ "RepOborotka"   + Кнц +Т_+ Строка(Поз));
		
		//Ссылка на файл скрипта формирования отчета "Просроченные сертификаты"
		//Добавлен, начиная с версии ПО "Агент Плюс" 1.5.19f 	
		Текст.ДобавитьСтроку("Просроченные сертификаты" +Т_+ "RepSertif"+Кнц +Т_+ Строка(Поз));
				
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_RepScripts");

КонецПроцедуры //ВыгрузкаОписанийСкриптовОтчетов()

// Процедура предназначена для выгрузки в КПК скриптов для описания структуры
// отображения окон
//
Процедура ВыгрузкаСкриптов() Экспорт
	
	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_Scripts" +Т_+ "Struct:ObjectID,Script");
	
	//скрипт для окна "Информация о клиенте"
	Текст.ДобавитьСтроку(GUID_SCRIPT_CLIENTINFO +Т_+ "[Name]|Кредит: [Credit], Скидка: [Discount]%|Долг: [Debt]|");
	Текст.ДобавитьСтроку("*" +Т_+ "VIP: [_VIP]; Категория: [Category]|Клиент конкурентов: [_CLKONKUR]|-------|");
	Текст.ДобавитьСтроку("*" +Т_+ "Тел.: [Tel]|Адрес: [Addr]|ИНН: [_INN], КПП: [_KPP]|[_FNAME]|");
	Текст.ДобавитьСтроку("*" +Т_+ "Продажи прошл. месяца: [_MSALES]|Срок договора: [_SROKDOG]");
	
	//скрипт для окна "Информация о торговой точке"
	Текст.ДобавитьСтроку(GUID_SCRIPT_TPOINTINFO +Т_+ "[Name]|Категория: [Category]|Зона: [Zone]|-------|");
	Текст.ДобавитьСтроку("*" +Т_+ "Адрес: [Addr]|Тел: [Tel]|Конт. лицо: [Contact]|-------|");
	Текст.ДобавитьСтроку("*" +Т_+ "Тип: [_TPTYPE]|Время работы: [_WORKTIME]");
	
	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_Scripts");
	
КонецПроцедуры //ВыгрузкаСкриптов

// Процедура предназначена для выгрузки в КПК скидок. За выгрузку скидок отвечает тэг Ref_Discounts
//
Процедура ВыгрузкаСкидок() Экспорт
	
	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_Discounts" +Т_+ "Struct:Discount,=Barcode");
	
	Спр = Справочники.ТипыСкидокНаценок.Выбрать();
	Пока Спр.Следующий() Цикл
	    Если Спр.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		ШтрихКод = ""; // При необходимости можно привязать штрих-код к скидке и выгружать в этом тэге
		Текст.ДобавитьСтроку(Формат(Спр.ПроцентСкидкиНаценки, "ЧРД=.") +Т_+ СокрЛП(ШтрихКод) );
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_+ "Ref_Discounts");
	
КонецПроцедуры //ВыгрузкаСкидок()

// Процедура предназначена для персональных цен и скидок для контрагентов в КПК 
//
Процедура ВыгрузкаПерсональныхЦен()
	
	Если Не Константы.кпкИспользоватьПерсональныеЦены.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_PersonalPrices" + Т_ + "Struct:ClientID,GoodsID,Price,=Discount");
	
	ЗапросЦен = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.ТипЦенВладелец КАК Контрагент,
	|	Контрагенты.Номенклатура.ЦеноваяГруппа КАК Группа,
	|	Контрагенты.Номенклатура КАК Ном,
	|	Контрагенты.Цена
	|ИЗ
	|	РегистрСведений.кпкСведенияКонтрагента КАК кпкСведенияКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.ТипЦен.Владелец КАК ТипЦенВладелец,
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура КАК Номенклатура,
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена КАК Цена
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ТекПериод, ) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних) КАК Контрагенты
	|		ПО кпкСведенияКонтрагента.Объект = Контрагенты.ТипЦенВладелец
	|ГДЕ
	|	Контрагенты.ТипЦенВладелец.Покупатель = ИСТИНА
	|	И кпкСведенияКонтрагента.ИспПерсЦены = ИСТИНА
	|	И Контрагенты.ТипЦенВладелец В(&СписКлиентов)
	|	И Контрагенты.Номенклатура В ИЕРАРХИИ(&Ассортимент)");
	
	ЗапросЦен.УстановитьПараметр("ТекПериод",    ТекущаяДата());
	ЗапросЦен.УстановитьПараметр("СписКлиентов", сзКлиентыАгента);
	ЗапросЦен.УстановитьПараметр("Ассортимент",  сзАссортимент);
	
	ВыборкаЦен = ЗапросЦен.Выполнить().Выбрать();
	
	ЗапросНатуральныхСкидок = Новый Запрос(ПолучитьТекстЗапросаПоНатуральнымСкидкам());	
	
	ЗапросСкидокПоГруппам = Новый Запрос(ПолучитьТекстЗапросаПОГруппамСкидок());	
	
	ДатаСкидок = ТекущаяДата();
	
	ЗапросНатуральныхСкидок.УстановитьПараметр("Дата"   , ДатаСкидок);	
	ЗапросНатуральныхСкидок.УстановитьПараметр("ЗначУсл", Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	
	ЗапросСкидокПоГруппам.УстановитьПараметр("Дата"   , ДатаСкидок);	
	ЗапросСкидокПоГруппам.УстановитьПараметр("ЗначУсл", Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	
	ВыборкаНатуральныхСкидок = ЗапросНатуральныхСкидок.Выполнить().Выбрать();
	
	ВыборкаСкидокПоГруппам   = ЗапросСкидокПоГруппам.Выполнить().Выбрать();
	
	Счетчик = 0;
	
	ТаблицаНом = Новый ТаблицаЗначений();
	ТаблицаНом.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаНом.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаНом.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаНом.Колонки.Добавить("Процент", Новый ОписаниеТипов("Число"));
	
	//Выгрузка персональных цен
	///////////////////////////   
	
	Пока ВыборкаЦен.Следующий() Цикл
		ДобавитьСтрокуПоСкидкеНоменклатуры(ТаблицаНом, ВыборкаЦен.Ном, ВыборкаЦен.Цена, ВыборкаЦен.Контрагент, 0);
	КонецЦикла;
	
	//Выгрузка скидок
	/////////////////
	
	//Выгружаем натуральные скидки
	Выб = ВыборкаНатуральныхСкидок;
	
	Пока Выб.Следующий() Цикл 					
		ВыгрузитьСкидкиДляКонтрагентов(Выб, ТаблицаНом, 0, Ложь);						
	КонецЦикла;
	
	//Выгружаем скидки по группам
	Выб = ВыборкаСкидокПоГруппам;
	
	Пока Выб.Следующий() Цикл   			
		ВыгрузитьСкидкиДляКонтрагентов(Выб, ТаблицаНом, 0, Истина);			
	КонецЦикла;
	
	МассивНом       = ТаблицаНом.ВыгрузитьКолонку("Номенклатура");     		
	МассивНомАгента = ПолучитьМассивТоваровАгента(МассивНом);
		
	//Заносим данные из таблицы с тег
	ТекИдКлиента = "";
	Для Каждого СтрокаТЗ Из ТаблицаНом Цикл
		
		Если МассивНомАгента.Найти(СтрокаТЗ.Номенклатура) <> Неопределено Тогда		
			Если СтрокаТЗ.Процент = 0 и СтрокаТЗ.Цена = 0 Тогда Продолжить; КонецЕсли;
			
			ИдКлиента  = СокрЛП(СтрокаТЗ.Контрагент.УникальныйИдентификатор());		
			ИдТовара   = СокрЛП(СтрокаТЗ.Номенклатура.УникальныйИдентификатор());   		
			Скидка     = кпкАгентПлюс.ФорматироватьЧисло(СтрокаТЗ.Процент);
			Цена       = кпкАгентПлюс.ФорматироватьЧисло(СтрокаТЗ.Цена);   			
			Если ИдКлиента = ТекИдКлиента Тогда
				ИдКлиента = "*";
			Иначе
				ТекИдКлиента = ИдКлиента;
			КонецЕсли; 		
						
			Текст.ДобавитьСтроку(ИдКлиента +Т_+ ИдТовара +Т_+ Строка(Цена) +Т_+ Строка(Скидка));
		КонецЕсли;
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_PersonalPrices");	
	
КонецПроцедуры //ВыгрузкаПерсональныхЦен()	
          
// Выгрузка команд для КПК
//
Процедура ВыгрузкаКоманд() Экспорт
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Commands" + Т_ + "Struct:CmdCode,Arg");
	
	Спр = Справочники.кпкКомандыКПК.Выбрать();
	
	Пока Спр.Следующий() Цикл
		
		НайденнаяСтрока = Спр.Агенты.Найти(ВыбАгент, "Агент");
		Если НайденнаяСтрока = Неопределено Тогда Продолжить; КонецЕсли;   
 	
		Если Не Спр.Активна Тогда
			Продолжить;
		КонецЕсли;
		Текст.ДобавитьСтроку(кпкАгентПлюс.УбратьНечитаемыеСимволы(Спр.Наименование) + Т_ + Спр.Параметр);
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Commands");
	
КонецПроцедуры

// Выгрузка матриц товаров в КПК
// 
Процедура ВыгрузкаМатрицТоваров() Экспорт
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_MatrixOfGoods" + Т_ + "Struct:ObjID,Category,GoodsID,RatingCat,=Rating");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	кпкМатрицаТоваровСостав.Идентификатор,
	|	кпкМатрицаТоваровСостав.Номенклатура,
	|	кпкМатрицаТоваровСостав.Рейтинг,
	|	кпкМатрицаТоваровСостав.ЗначениеРейтинга,
	|	кпкМатрицаТоваровСостав.Ссылка.Категория
	|ИЗ
	|	Справочник.кпкМатрицаТоваров.Состав КАК кпкМатрицаТоваровСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.кпкМатрицаТоваров.Агенты КАК кпкМатрицаТоваровАгенты
	|		ПО кпкМатрицаТоваровСостав.Ссылка = кпкМатрицаТоваровАгенты.Ссылка
	|ГДЕ
	|	кпкМатрицаТоваровСостав.Ссылка.НачПериода <= &ТекПериод
	|	И ВЫБОР
	|			КОГДА кпкМатрицаТоваровСостав.Ссылка.КонПериода <> &ПустаяДата
	|				ТОГДА кпкМатрицаТоваровСостав.Ссылка.КонПериода
	|			ИНАЧЕ &ТекПериод
	|		КОНЕЦ >= &ТекПериод
	|	И кпкМатрицаТоваровСостав.Идентификатор <> """"
	|	И кпкМатрицаТоваровСостав.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И кпкМатрицаТоваровАгенты.Агент = &Агент");
	
	Запрос.УстановитьПараметр("ТекПериод",  ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Категория) Тогда
			Категория = Т_ + СокрЛП(Выборка.Категория.Код); 
		Иначе                                              
			Категория = Т_ + ""; 
		КонецЕсли; 		
				
		ИдМатрицы = СокрЛП(Выборка.Идентификатор);  					
		
		Если ТипЗнч(Выборка.Номенклатура) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						
			ИдМатрицыГруппы = СокрЛП(Выборка.Идентификатор);
			
			Сч = 1;
			ВыборкаНом = Справочники.Номенклатура.Выбрать(, , Новый Структура("НоменклатурнаяГруппа", Выборка.Номенклатура));
			Пока ВыборкаНом.Следующий()Цикл
				Если ВыборкаНом.ПометкаУдаления Тогда Продолжить; КонецЕсли;					
					// Берем 3 символа, имея в виду, что кол-во товаров в группе не превышает 999 позиций
					// и заменяем их на номер строки в таб части
					КонСтр = Прав("000" + Строка(Сч), 3); 
					
					НачСтр = Лев(ИдМатрицыГруппы, СтрДлина(ИдМатрицыГруппы)-3);							
					
					ИдМатрицы	 = НачСтр + КонСтр; 
					ИдТовара     = Т_ + СокрЛП(ВыборкаНом.Ссылка.УникальныйИдентификатор());
					Рейтинг	     = Т_ + ?(ЗначениеЗаполнено(Выборка.Рейтинг.Код), Выборка.Рейтинг.Код, "0"); 
					ЗначРейтинга = Т_ + СокрЛП(Выборка.ЗначениеРейтинга); 						
					
					Текст.ДобавитьСтроку(ИдМатрицы + Категория + ИдТовара + Рейтинг + ЗначРейтинга); 						
					
					Сч = Сч + 1;							
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Выборка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ИдТовара	 = Т_ + СокрЛП(Выборка.Номенклатура.Ссылка.УникальныйИдентификатор()); 
			Рейтинг	     = Т_ + ?(ЗначениеЗаполнено(Выборка.Рейтинг.Код), Выборка.Рейтинг.Код, "0"); 
			ЗначРейтинга = Т_ + СокрЛП(Выборка.ЗначениеРейтинга); 						
			
			Текст.ДобавитьСтроку(ИдМатрицы + Категория + ИдТовара + Рейтинг + ЗначРейтинга); 						
			
		КонецЕсли;                                        						
		
	КонецЦикла;                       

	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_MatrixOfGoods");
	
КонецПроцедуры //ВыгрузкаМатрицТоваров()

// Выгрузка сообщений для агента
//
Процедура ВыгрузкаСообщенийДляАгента(ВыгрузитьТему) Экспорт
	
	Если ВыгрузитьТему Тогда
		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_MsgThemes" + Т_ + "Struct:MsgID,DateTime,Theme,Color,=Flags,=ObjID");
			
		Выборка = Справочники.кпкТемыСообщений.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПометкаУдаления или Не Выборка.ВыгружатьВКПК Тогда Продолжить; КонецЕсли;
			 
			НайденнаяСтрока = Выборка.Агенты.Найти(ВыбАгент, "Агент");
			Если НайденнаяСтрока = Неопределено Тогда Продолжить; КонецЕсли;   
			
			ИдТемы	       = СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
			ДатаВремя      = кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(Выборка.ДатаСоздания);
			Тема 		   = кпкАгентПлюс.УбратьНечитаемыеСимволы(Выборка.Наименование);    		
			Цвет 		   = кпкАгентПлюс.ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему(Выборка.Цвет.Получить());    		
			ПризнПрочтения = "0"; // если 0 - будет снят признак прочтения, если 1 - не будет снят
			ОбъектСсылка   = ?(ЗначениеЗаполнено(Выборка.Документ), Выборка.Документ.УникальныйИдентификатор(), "");;
			
			Текст.ДобавитьСтроку(ИдТемы + Т_ + ДатаВремя + Т_ + Тема + Т_ + Цвет + Т_ + ПризнПрочтения + Т_ + ОбъектСсылка);			
		КонецЦикла;
		
		Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_MsgThemes");
		
	Иначе
		
		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_MsgBody" + Т_ + "Struct:MsgID,Text");   		
		
		Выборка = Справочники.кпкСообщения.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПометкаУдаления Тогда Продолжить; КонецЕсли;
			
			ИдТемы 		    = СокрЛП(Выборка.Владелец.Ссылка.УникальныйИдентификатор());
			ТекстСообщений  = кпкАгентПлюс.УпроститьТекстВФорматеHTML(СокрЛП(Выборка.ТекстСообщения));
				
			Текст.ДобавитьСтроку(ИдТемы + Т_ + ТекстСообщений);   			
		КонецЦикла;
		
		Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_MsgBody");
		
 	КонецЕсли;
	
КонецПроцедуры //ВыгрузкаСообщенийДляАгента()

Процедура ДобавитьСтрокуДляЗаданияВФайлВыгрузки(Структура)
	
	ТипЗнчЗадания = Структура.Задание.ТипЗначения;
	
	ТипЗадания = "";
	
	Если Структура.Задание.ЭтоГруппа Тогда
		ТипЗадания = 0;
	ИначеЕсли ТипЗнч(ТипЗнчЗадания) = Тип("Число") Тогда
		ТипЗадания = 1;
	ИначеЕсли ТипЗнч(ТипЗнчЗадания) = Тип("Строка") или ТипЗнч(ТипЗнчЗадания) = ТипЗнч(Неопределено) Тогда
		ТипЗадания = 2;
	ИначеЕсли ТипЗнч(ТипЗнчЗадания) = Тип("Дата") Тогда
		ТипЗадания = 3;
		// Если к качестве типа задания передается какое-то перечисление,
		// созданное программно, то в качестве код типа задания следует
		// указать 10
		//ИначеЕсли ТипЗнч(ТипЗнчЗадания) = Тип("Перечисление") Тогда
		//	ТипЗадания = 10;
	ИначеЕсли ТипЗнч(ТипЗнчЗадания) = Тип("Булево") Тогда
		ТипЗадания = 20;
	ИначеЕсли ТипЗнч(ТипЗнчЗадания) = Тип("ПеречислениеСсылка.кпкТипыЗаданий") Тогда
		Индекс = Перечисления.кпкТипыЗаданий.Индекс(ТипЗнчЗадания);
		ТипЗадания = ТипЗнчЗадания.Метаданные().ЗначенияПеречисления[Индекс].Комментарий;  
	КонецЕсли;
	
	СтрТипЗадания  = Строка(ТипЗадания);
	Наим	   	   = Т_+ кпкАгентПлюс.УбратьНечитаемыеСимволы(Структура.Задание.Наименование);			
	Коммент	   	   = Т_+ кпкАгентПлюс.УбратьНечитаемыеСимволы(Структура.Комментарий);
	Код		       = Т_+ СокрЛП(Структура.НомерСтроки);
	// Нужно передать идентификатор перечисления в случае, если в параметре Type
	// указан тип "Перечисление", которое создается программно		
	ИдПеречисления = Т_+ ""; 			
	Флаги          = Т_+ Число(Структура.Обязательная);
	
	Текст.ДобавитьСтроку(СтрТипЗадания + Наим + Коммент + Код + ИдПеречисления + Флаги);
	
КонецПроцедуры //ДобавитьСтрокуДляЗаданияВФайлВыгрузки

// Процедура ВыгрузкаЗаданийДляАгента
//
// Параметры:
//  Нет
//
// Описание:
//	Процедура выгружает список документов "Задания" для приложения Агент+ 1.5
//
Процедура ВыгрузкаЗаданийДляАгента() Экспорт
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Doc_Task" + Т_	+ "Struct:DocID,DocState,DocFlags,TimeCrt," +
						 "DocNumber,FirmID,ClientID,TPointID,=Category,Comment,=RouteID");
						 
	Текст.ДобавитьСтроку("<Sub>" + Т_+ "Lines" + Т_+ "Struct:Type,Name,Comment,Code,=TypeID,=Flags");       	
	
	РежимВыгрузкиКонтрагентов = Константы.кпкРежимВыгрузкиКонтрагентов.Получить();
	  
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Задания.Ссылка КАК Док,
	|	ПереченьЗаданий.Родитель КАК Родитель,
	|	ПереченьЗаданий.Задание,
	|	ПереченьЗаданий.Комментарий,
	|	ПереченьЗаданий.Обязательная,
	|	ПереченьЗаданий.Результат,
	|	ПереченьЗаданий.ЗаданиеЭтоГруппа КАК ЭтоГруппа,
	|	ПереченьЗаданий.НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		кпкЗаданиеАгента.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.кпкЗаданиеАгента КАК кпкЗаданиеАгента) КАК Задания
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			кпкЗаданиеАгентаПереченьЗаданий.Родитель КАК Родитель,
	|			кпкЗаданиеАгентаПереченьЗаданий.Задание КАК Задание,
	|			кпкЗаданиеАгентаПереченьЗаданий.Комментарий КАК Комментарий,
	|			кпкЗаданиеАгентаПереченьЗаданий.Обязательная КАК Обязательная,
	|			кпкЗаданиеАгентаПереченьЗаданий.Результат КАК Результат,
	|			кпкЗаданиеАгентаПереченьЗаданий.Задание.ЭтоГруппа КАК ЗаданиеЭтоГруппа,
	|			кпкЗаданиеАгентаПереченьЗаданий.Ссылка КАК Ссылка,
	|			кпкЗаданиеАгентаПереченьЗаданий.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.кпкЗаданиеАгента.ПереченьЗаданий КАК кпкЗаданиеАгентаПереченьЗаданий
	|		ГДЕ
	|			кпкЗаданиеАгентаПереченьЗаданий.Родитель = &Родитель) КАК ПереченьЗаданий
	|		ПО Задания.Ссылка = ПереченьЗаданий.Ссылка
	|ГДЕ
	|	Задания.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И Задания.Ссылка.Агент = &Агент
	|	И Задания.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И Задания.Ссылка.Проведен = ИСТИНА
	|	И (НЕ ПереченьЗаданий.Задание ЕСТЬ NULL)	
	| УПОРЯДОЧИТЬ ПО
	|	Задания.Ссылка.Дата,
	|	Родитель,
	|	ЭтоГруппа
	|ИТОГИ ПО
	|	Док");   

	Запрос.УстановитьПараметр("Агент",    ВыбАгент);	
	Запрос.УстановитьПараметр("ДатаНач",  НачалоДня(НачПериодаЗаданий));
	Запрос.УстановитьПараметр("ДатаКон",  КонецДня(КонПериодаЗаданий));
	Запрос.УстановитьПараметр("Родитель", Справочники.кпкВидыЗаданий.ПустаяСсылка());
	
	ВыборкаДок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДок.Следующий() Цикл
		
		Док = ВыборкаДок.Док;
		
		Если РежимВыгрузкиКонтрагентов = 0 Тогда // Режим из плана посещений
			
			Если Док.ДокОснование.ПометкаУдаления Тогда
				ОповеститьОСобытии("Документ: " + Док + " не выгружен, так как создан на основании документа: " +
								   Док.ДокОснование + ", который помечен на удаление!", СтатусСообщения.Внимание);
				Продолжить;
			КонецЕсли;
			
			Если Не Док.ДокОснование.Проведен Тогда
				ОповеститьОСобытии("Документ: " + Док + " не выгружен, так как создан на основании документа: " + 
								   Док.ДокОснование + ", который не проведен!", СтатусСообщения.Внимание);										
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ИдДок 	  = СокрЛП(Док.УникальныйИдентификатор());
		ИдФирмы   = Т_+ СокрЛП(Док.Организация.УникальныйИдентификатор());
		ИдКлиента = Т_+ СокрЛП(Док.Контрагент.УникальныйИдентификатор());
		Если ЗначениеЗаполнено(Док.кпкТорговаяТочка) Тогда
			ИдТоргТочки = Т_+ СокрЛП(Док.кпкТорговаяТочка.УникальныйИдентификатор());
		Иначе
			ИдТоргТочки = ИдКлиента;
		КонецЕсли;
		
		НомерДок	 = Т_ + СокрЛП(Док.Номер);
		ДатаВремяДок = Т_ + кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(Док.Дата);
		Комментарий  = Т_ + кпкАгентПлюс.УбратьНечитаемыеСимволы(Док.Комментарий);
		СостДок 	 = Т_ + "2";
		
		// Признак принудительного обновления документа в КПК
		ПризнакОбновления = ?(Док.ОбновитьВКПК = 1, 0, 128);  
		// Цифра 128 означает, что задание будет загружено в КПК только в одном из перечисленных случаев:
        // 1. Документ ранее отсутствовал в БД КПК.
		// 2. Документ присутствует в БД КПК, документ доступен для редактирования пользователем
		//    и документ еще не изменялся пользователем.
		СостДокВЦБД  = Т_ + (кпкАгентПлюс.АПВернутьСостояниеДок(Док) + ПризнакОбновления);
		КодКат 		 = Т_ + СокрЛП(Док.Категория.Код);
		
		Если (Док.ДокОснование = Неопределено) или Док.ДокОснование.Пустая() Тогда
			ИдМаршрута = Т_ + "";
		Иначе
			ИдМаршрута = Т_ + СокрЛП(Док.ДокОснование.УникальныйИдентификатор()); 
		КонецЕсли;
				
		// Заполняем заголовка тега
		Текст.ДобавитьСтроку(ИдДок + СостДок + СостДокВЦБД + ДатаВремяДок + НомерДок +
		ИдФирмы + ИдКлиента + ИдТоргТочки + КодКат + Комментарий + ИдМаршрута);   						 
		
		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Lines");
		
		ВыборкаЗаданий = ВыборкаДок.Выбрать();
		
		Пока ВыборкаЗаданий.Следующий() Цикл
			
			ДобавитьСтрокуДляЗаданияВФайлВыгрузки(ВыборкаЗаданий);
			
			// Ищем подчиненные задания для группы
			НайденныеСтроки = Док.ПереченьЗаданий.НайтиСтроки(Новый Структура("Родитель", ВыборкаЗаданий.Задание));
			
			Для Каждого СтрокаМассива Из НайденныеСтроки Цикл   				
				
				ДобавитьСтрокуДляЗаданияВФайлВыгрузки(СтрокаМассива);
							
			КонецЦикла;
			
		КонецЦикла;
		
		Текст.ДобавитьСтроку("<End>" + Т_ + "Lines");
		
	КонецЦикла; 
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Doc_Task");
	
КонецПроцедуры //ВыгрузкаЗаданийДляАгента()

// Процедура ВыгрузкаДоговоров
//
// Параметры:
//  Нет
//
// Описание:
// 	Процедура выгружает список договоров для приложения Агент+ 1.5
//
Процедура ВыгрузкаДоговоров() Экспорт
	
	НачСтрокаСтруктуры = "<Begin>" + Т_ + "Ref_Agreements" + Т_ + "Struct:ObjID,FirmID,ClientID,=TPointID,Name,CodesList," +
						 "PaymntType,PriceTypes,PriceType,TimeBegin,TimeEnd,=Status,=FltGdsCat,=FltGdsProp,=Comment";
						 
	
	Текст.ДобавитьСтроку(НачСтрокаСтруктуры);
	
	РежимВыгрузкиКонтрагентов = Константы.кпкРежимВыгрузкиКонтрагентов.Получить();
	
	Если РежимВыгрузкиКонтрагентов = 1 Тогда
		ТекстУсловияДоговоров = "И ДоговорыКонтрагентов.Владелец В(&СписокКлиентов) И ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ (&СписокДоговоров)";
	ИначеЕсли РежимВыгрузкиКонтрагентов = 4 Тогда
		ТекстУсловияДоговоров = "И ВЫБОР КОГДА ДоговорыКонтрагентов.Владелец В ИЕРАРХИИ (&СписокКлиентов) И ДоговорыКонтрагентов.Владелец В (&СписКлиентовПоДоговорам)" +
								"ТОГДА ДоговорыКонтрагентов.Владелец В ИЕРАРХИИ (&СписокКлиентов) И ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ (&СписокДоговоров)" +
								"ИНАЧЕ ДоговорыКонтрагентов.Владелец В ИЕРАРХИИ (&СписокКлиентов) КОНЕЦ";
	Иначе
		ТекстУсловияДоговоров = "И ДоговорыКонтрагентов.Владелец В(&СписокКлиентов)";		
	КонецЕсли; 	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Организация,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	кпкТорговыеТочки.Ссылка КАК ТоргТочка,
	|	ДоговорыКонтрагентов.Наименование,
	|	ДоговорыКонтрагентов.ТипЦен,
	|	ДоговорыКонтрагентов.Дата,
	|	ДоговорыКонтрагентов.СрокДействия,
	|	ДоговорыКонтрагентов.Комментарий
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.кпкТорговыеТочки КАК кпкТорговыеТочки
	|		ПО (кпкТорговыеТочки.Договор = ДоговорыКонтрагентов.Ссылка)
	|ГДЕ
	|	(Не ДоговорыКонтрагентов.ПометкаУдаления) 
	|	И (НЕ ДоговорыКонтрагентов.ЭтоГруппа) " + ТекстУсловияДоговоров);
	
	Запрос.УстановитьПараметр("СписокКлиентов",    		 сзКлиентыАгента);
	Запрос.УстановитьПараметр("СписокДоговоров", 		 ТаблицаДоговоровАгента.ВыгрузитьКолонку("Договор"));
	Запрос.УстановитьПараметр("СписКлиентовПоДоговорам", ТаблицаДоговоровАгента.ВыгрузитьКолонку("Контрагент"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокВыгруженныхДоговоров = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли  
		
		Если Выборка.Договор.ЭтоГруппа Тогда Продолжить; КонецЕсли;
		
		Договор     = Выборка.Договор;
		Контрагент  = Выборка.Контрагент;
		Организация = Выборка.Организация;
		ТоргТочка   = Выборка.ТоргТочка;
		
		Если СписокВыгруженныхДоговоров.НайтиПоЗначению(Договор) <> Неопределено Тогда
			Продолжить;			
		КонецЕсли;
		
		ИдОрганизации = СокрЛП(Организация.УникальныйИдентификатор());
		ИдДоговора    = СокрЛП(Договор.УникальныйИдентификатор());		
		ИдКонтрагента = СокрЛП(Контрагент.УникальныйИдентификатор());
		
		Если ЗначениеЗаполнено(ТоргТочка) Тогда
			ИдТоргТочки   = СокрЛП(ТоргТочка.УникальныйИдентификатор());
		Иначе
			ИдТоргТочки = "";
		КонецЕсли;
		
		Наименование = кпкАгентПлюс.УбратьНечитаемыеСимволы(Выборка.Наименование);
		
		ВидыОплат 	   = "";
		ВидОплатыУмолч = "";
		
		ТипыЦен 	 = ПолучитьКодТипаЦены(Выборка.ТипЦен, Договор);
		ТипЦеныУмолч = ПолучитьКодТипаЦены(Выборка.ТипЦен, Договор);
		
		ДатаНачала     = кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(Выборка.Дата, "Дата");
		ДатаОкончания  = кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(Выборка.СрокДействия, "Дата");
		
		Статус 		  = "";
		СписКатегорий = "";
		СписСвойств   = "";
		Комментарий   = СокрЛП(Выборка.Комментарий);
		
		Текст.ДобавитьСтроку(ИдДоговора + Т_ + ИдОрганизации + Т_ + ИдКонтрагента + Т_ + ИдТоргТочки + Т_ +
		Наименование + Т_ + ВидыОплат + Т_ + ВидОплатыУмолч + Т_ + ТипыЦен + Т_ + ТипЦеныУмолч + Т_ + 
		ДатаНачала + Т_ + ДатаОкончания + Т_ + Статус + Т_ + СписКатегорий + Т_ + СписСвойств + Т_ + Комментарий);
		
		СписокВыгруженныхДоговоров.Добавить(Договор);
				
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Agreements");
	
КонецПроцедуры // ВыгрузкаДоговоров()

////////////////////////////////////
////////////////////////////////////

#Если Клиент Тогда
	
//Функция возвращает путь к exe-файлу запуска Агент+ в КПК
//
// Возвращаемое значение:
//  Строка
//
// Добавлено: Арт 2008-01-31	                                                                 
// 
Функция ПолучитьПутьЗапускаАгентПлюсВКПК(ИнициироватьRAPI = 0) Экспорт
	
	Если ИнициироватьRAPI = 1 Тогда
	    Результат = КПКОбъект.CeRapiInit();
		Если Результат <> 0 Тогда
		    ТекстСообщения = "Ошибка инициализации мобильного устройства: " + КПКОбъект.CeErrDescription(Результат);
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Ложь);
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Если МобильноеПриложение = ТипАгентМТ Тогда
		ПутьАгентП = ПутьКФайлуЗапуска20;
	Иначе
		ПутьВРеестре = "Software\AgentPlus\AgentP";
		
		ПутьАгентП = КПКОбъект.CeRegQueryValue("HKEY_LOCAL_MACHINE", ПутьВРеестре, "StartupFile");
		Если Не ЗначениеЗаполнено(ПутьАгентП) Тогда
			ПутьАгентП = ПутьКФайлуЗапуска15;
			Если КПКОбъект.CeFileExists(ПутьАгентП) <> 0 Тогда
				ПутьАгентП = "";
			КонецЕсли;
		КонецЕсли;
		
		Если ИнициироватьRAPI = 1 Тогда
			КПКОбъект.CeRapiUnInit();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПутьАгентП) = 1 Тогда
			ТекстСообщения = "Не удалось определить путь установки Агент+ в мобильном устройстве! Возможно Агент+ не установлен!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПутьАгентП;

КонецФункции //ПолучитьПутьЗапускаАгентПлюсВКПК()	

Функция КомандаОтправкиДанныхВКПК()
	
	Результат = КПКОбъект.CeRapiInit();
	Если Результат = 0 Тогда
		ПутьАгентП = ПолучитьПутьЗапускаАгентПлюсВКПК();
		Если Не ЗначениеЗаполнено(ПутьАгентП) Тогда
			КПКОбъект.CeRapiUnInit();
		    Возврат 0;
		КонецЕсли;
		КПКОбъект.CeExecute(ПутьАгентП, "import");
		КПКОбъект.CeRapiUnInit();
	Иначе
		ТекстСообщения = "Ошибка инициализации мобильного устройства: " + КПКОбъект.CeErrDescription(Результат);
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Ложь);
	КонецЕсли;
	
	Возврат ?(Результат = 0, 1, 0);
	
КонецФункции //КомандаОтправкиДанныхВКПК()

// Функция ОтправкаФайлаНапрямуюВКПК
//
// Параметры:
//  ИмяФайла - путь к отправляемому файлу выгрузки
//
// Возвращаемое значение:
//	Число
//
// Описание:
// 	Функция выгружает файл выгрузки напрямую в мобильное устройство и возвращает результат отправки данных
//           
Функция ОтправкаФайлаНапрямуюВКПК(ИмяФайла) Экспорт
	
	РезультатВыгрузки = 0;
	
	ОповеститьОСобытии("Отправка данных в мобильное устройство...", СтатусСообщения.Информация);
	Результат = КПКОбъект.CeRapiInit();
	
	Если Результат <> 0 Тогда
		ТекстСообщения = "Ошибка инициализации мобильного устройства: " + КПКОбъект.ErrDescription(Результат);
		ОповеститьОСобытии(ТекстСообщения);
		ТекстСообщения = "Данные не выгружены в мобильное устройство!";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Вы хотите сохранить файл выгрузки в каталог?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат 0;
		Иначе
			Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
			ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(Режим);
			ДиалогСохраненияФайла.Каталог = ВосстановитьЗначение("КаталогСохраненияФайловДляКПК");			
			ДиалогСохраненияФайла.Заголовок = "Укажите каталог сохранения файла выгрузки";
			Если ДиалогСохраненияФайла.Выбрать() Тогда
				ВыбКаталог = ДиалогСохраненияФайла.Каталог;		
				СохранитьЗначение("КаталогСохраненияФайловДляКПК", ВыбКаталог);
				ФайлКПКНаДиске = Новый Файл(ИмяФайла);
				Если ФайлКПКНаДиске.Существует() Тогда
					ИмяНовогоФайла = ?(МобильноеПриложение = ТипАгентМТ, "FromCDB", "From1C") + ФайлКПКНаДиске.Расширение;
					КопироватьФайл(ИмяФайла, ВыбКаталог + "\" + ИмяНовогоФайла);
					Предупреждение("Файл " + ИмяНовогоФайла + " успешно сохранен!", 60);
				КонецЕсли;
			Иначе
				Предупреждение("Каталог не выбран!");
			КонецЕсли;
		КонецЕсли; 
		Возврат 0;
	КонецЕсли;
	
	Если МобильноеПриложение = ТипАгентМТ Тогда 
		
		КаталогОбменаКПК = ПолучитьПапкуОбменаВМУ();
		
		Если Не ЗначениеЗаполнено(КаталогОбменаКПК) Тогда
			ОповеститьОСобытии("Отправка данных в мобильное устройство не произведена!");
			ОповеститьОСобытии("В дополнительных настройках агента не указан каталог обмена в мобильном устройстве!");
			Возврат 0;
		КонецЕсли;
		
	Иначе
		ПутьВРеестре = "Software\AgentPlus\AgentP";	
		КаталогОбменаКПК = КПКОбъект.CeRegQueryValue("HKEY_LOCAL_MACHINE", ПутьВРеестре + "\Exchange", "FilePath");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КаталогОбменаКПК) Тогда		
		КПКОбъект.CeRegSetValue("HKEY_LOCAL_MACHINE", ПутьВРеестре + "\Exchange", "FilePath", ПапкаОбмена15);
	КонецЕсли;
	
	ДополнитьСлешВПуть(КаталогОбменаКПК);		
	
	// Если файл имеет расширение ".crp" то это двойное расширение, например "Petrov.dat.crp"
	ДлинаРасширения = ?(ВРег(Прав(ИмяФайла,3)) = "CRP", 7, 3); 
	
	ФайлПолучательВКПК = КаталогОбменаКПК + ?(МобильноеПриложение = ТипАгентМТ, "FromCDB.", "From1C.") + Прав(ИмяФайла, ДлинаРасширения);
	
	Результат = КПКОбъект.CePutFile(ИмяФайла, ФайлПолучательВКПК);
	
	Если Результат = 0 Тогда
		ОповеститьОСобытии("Отправка данных  в мобильное устройство успешно завершена!", СтатусСообщения.Информация);
		РезультатВыгрузки = 1;
	Иначе
		ОповеститьОСобытии("Отправка данных в мобильное устройство не произведена!");
		ОповеститьОСобытии("Причина: " + КПКОбъект.ErrDescription(Результат), СтатусСообщения.Важное);
	КонецЕсли;
	
	КПКОбъект.CeRapiUnInit();
	
	Если РезультатВыгрузки = 1 Тогда
		РезультатВыгрузки = КомандаОтправкиДанныхВКПК();
	КонецЕсли;	
	
	Возврат РезультатВыгрузки;
	
КонецФункции // ОтправкаФайлаНапрямуюВКПК()

#КонецЕсли

Функция ВыгрузитьДанныеНаФТП()
	
	ПодключениеКФТП = СоздатьПодключениеКФТП(); 
	Если ПодключениеКФТП = Ложь Тогда
		Возврат 0;
	КонецЕсли;	
	
	СтОтбор = Новый Структура("Объект", ВыбАгент);	
	Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(СтОтбор);
	Если Выборка.Следующий() Тогда
		ФТППапка = Строка(Выборка.ФТППапка);
	КонецЕсли;	
	
	НаимАгента = СокрЛП(ВыбАгент.Наименование);
	Если ПустаяСтрока(ФТППапка) Тогда
		ОповеститьОСобытии("У агента: """ + НаимАгента + """ не указана папка обмена на FTP-сервере!");		
		Возврат 0;
	КонецЕсли;
	
	Если (Прав(ФтпПапка,1) <> "\") Или (Прав(ФтпПапка,1) <> "/") Тогда
		ФтпПапка = ФтпПапка + "/";
	КонецЕсли;
	
	ИмяФайлаБезПути = ИмяФайла;
	
	ФайлНаДиске = Новый Файл(ИмяФайла);    
	Если Не ФайлНаДиске.Существует() Тогда
		Возврат 0;
	КонецЕсли;	
	
	// Берем расширение и меняем имя файла на From1C.X (X - прежнее расширение)
	Расширение = ФайлНаДиске.Расширение; 
	// Регистр файла важно соблюдать, т.к. на UNIX-FTP серверах регистр в имени файла имеет значение!!!
	ИмяФайлаНаСервере = "From1C" + Расширение; 
	
	ИмяФайлаФТП = ФтпПапка + ИмяФайлаНаСервере;
	
	Попытка     		
		ПодключениеКФТП.Записать(ИмяФайла, ИмяФайлаФТП);
		ТекстСообщения = "Данные для торгового агента: """ + НаимАгента + """ успешно выгружены на FTP-сервер!";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
		Возврат 1;		
	Исключение	
		Если ПодключениеКФТП.НайтиФайлы(ФтпПапка).Количество() = 0 Тогда
			ОповеститьОСобытии("Данные для торгового агента: """ + НаимАгента + """ не отправлены!" +
							   " Причина: не существует папки на FTP-сервере " + ФтпПапка, СтатусСообщения.Важное);				
		Иначе
			ОповеститьОСобытии("Данные для торгового агента: """ + НаимАгента + """ не отправлены!" +  
							   " Причина: " + ОписаниеОшибки(), СтатусСообщения.Важное);				
		КонецЕсли;
		Возврат 0;
	КонецПопытки;	
	
КонецФункции // ВыгрузитьДанныеНаФТП()

Функция ВыгрузитьДанныеНаАПСервер(Режим = 0)
	
	СтОтбор = Новый Структура("Объект", ВыбАгент);	
	Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(СтОтбор);
	Если Выборка.Следующий() Тогда
		АПСПапка = СокрЛП(Выборка.АПСПапка);
	КонецЕсли;	
	
	ДополнитьСлешВПуть(АПСПапка);		
	
	ПапкаСервера = СокрЛП(Константы.кпкАПСПапкаОбмена.Получить());
	Если ПустаяСтрока(ПапкаСервера) Тогда
		Возврат 0;
	КонецЕсли;
	
	ДополнитьСлешВПуть(ПапкаСервера);		
	
	Если Не кпкАгентПлюс.ПроверитьСуществованиеКаталога(ПапкаСервера, Истина) Тогда		
		ОповеститьОСобытии("Не существует каталога """ + ПапкаСервера + """," + 
						   " указанного в качестве папки обмена для Агент Плюс СОД!");
		Возврат 0;
	КонецЕсли;
	
	ПапкаАгента = ПапкаСервера + АПСПапка;
	
	Если Не кпкАгентПлюс.ПроверитьСуществованиеКаталога(ПапкаАгента, Истина) Тогда
		ОповеститьОСобытии("Не существует каталога """ + ПапкаАгента + """, указанного"
						   " в качестве каталога обмена для агента: " + ВыбАгент);
		Возврат 0;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ИмяФайла);  	
	ИмяФайлаНаСервере = "From1C" + ФайлНаДиске.Расширение;
	
	ИмяФайлаАПС = ПапкаАгента + ИмяФайлаНаСервере;	
	
	ФайлАПС = Новый Файл(ИмяФайлаАПС);
	Если (ФайлАПС.Существует()) И (Режим = -1) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		Попытка
			КопироватьФайл(ИмяФайла, ИмяФайлаАПС); //просто копируем файл в подпапку на сервере
		Исключение
			ОповеститьОСобытии("Ошибка копирования файла по пути: """ + ИмяФайла + """. Причина: " + ОписаниеОшибки());
			Возврат 0;
		КонецПопытки;  		
		ТекстСообщения = "Данные для торгового агента: """ + ВыбАгент + """ успешно выгружены на Агент Плюс СОД!";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
	Иначе
		ОповеститьОСобытии("Данные для торгового агента: """ + ВыбАгент + """ не выгружены.", СтатусСообщения.Важное);
	КонецЕсли;
	
	Возврат 1;	
	
КонецФункции // ВыгрузитьДанныеНаАПСервер()

Функция ОтправкаПисьмаЧерезВстроенногоКлиента1С(СтруктураПисьма)
	
	УспешнаяОтправка = Истина;
	
	лИмяФайла = РаботаСФайлами.ПолучитьИмяФайлаИзПолногоПути(СтруктураПисьма.ИмяФайлаВложения);
		
	// формируем и отправляем письмо
	СтруктураНовогоПисьма = Новый Структура();
	
	// вложения
	СписокФайловВложений = Новый СписокЗначений;
	
	ФайлВложения = СписокФайловВложений.Добавить();
	
	СтруктураВложения  = Новый Структура();
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(СтруктураПисьма.ИмяФайлаВложения);
	СтруктураВложения.Вставить("Хранилище", ДвоичныеДанныеФайла); 	
	СтруктураВложения.Вставить("ИмяФайла",  лИмяФайла);
	
	ФайлВложения.Значение = СтруктураВложения;
	
	// получатель
	СписокПолучателей = Новый СписокЗначений();
	СписокПолучателей.Добавить(СокрЛП(ПочтовыйЯщик), СокрЛП(ПочтовыйЯщик));    	
	
	ОсновнаяУчетнаяЗапись = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяУчетнаяЗапись");
	
	СтруктураНовогоПисьма.Вставить("Кому",	    		   СписокПолучателей);
	СтруктураНовогоПисьма.Вставить("УчетнаяЗапись", 	   ОсновнаяУчетнаяЗапись);
	СтруктураНовогоПисьма.Вставить("Тема",				   СтруктураПисьма.Тема);
	СтруктураНовогоПисьма.Вставить("СписокФайловВложений", СписокФайловВложений);
	СтруктураНовогоПисьма.Вставить("ВидТекста", 		   Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
	СтруктураНовогоПисьма.Вставить("Тело", 				   СтруктураПисьма.Текст);
		
	#Если Не Клиент Тогда		
		Если Не ЗначениеЗаполнено(ТекПользователь) Тогда
			ТекстОповещения = "Не заполнено значение константы ""Пользователь для фонового режима""!" + 
							  " Электронное письмо не будет создано!";
			ОповеститьОСобытии(ТекстОповещения);
			Возврат Ложь;
		КонецЕсли;
	#КонецЕсли
	
	СтруктураПисем = УправлениеЭлектроннойПочтой.НаписатьПисьмо(ТекПользователь, СтруктураНовогоПисьма, Ложь, Ложь,
	Ложь, Неопределено, Неопределено, Ложь, Ложь);
		
	Если СтруктураПисем <> Неопределено Тогда		
		
		ТекстСообщения = "Отправляется письмо на адрес: """ + ПочтовыйЯщик + """ ...";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
			
		СоответствиеПисем = Новый Соответствие();
		
		СсылкаНаПисьмо = Неопределено;
		СтруктураПисем.Свойство("ПисьмоСсылка", СсылкаНаПисьмо);
		
		Если ЗначениеЗаполнено(СсылкаНаПисьмо) Тогда   			
			СоответствиеПисем.Вставить(СсылкаНаПисьмо);  			
		КонецЕсли;
				
		ТекстОшибок = "";
		УправлениеЭлектроннойПочтой.ОтправитьПисьма(СоответствиеПисем, Неопределено, ТекПользователь, Ложь, ТекстОшибок);
		
		Если НЕ ПустаяСтрока(ТекстОшибок) Тогда 			
			ТекстСообщения = "Ошибка при отправке письма на адрес: " + ПочтовыйЯщик + ". Причина: " + ТекстОшибок;
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			УспешнаяОтправка = Ложь;
		КонецЕсли;  		
	Иначе
		УспешнаяОтправка = Ложь;		
	КонецЕсли;	
	
	Если УспешнаяОтправка Тогда
		ТекстСообщения = "Отправка письма на адрес: """ + ПочтовыйЯщик + """ успешно завершена!";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
	КонецЕсли;
	
	Возврат УспешнаяОтправка;	
		
КонецФункции //ОтправкаПисьмаЧерезВстроенногоКлиента1С

Функция ОтправкаПисьмаЧерезПочтовыйКлиентОС(СтруктураПисьма)
	
	#Если Клиент Тогда
		
		ОповеститьОСобытии("Отправка электронного письма на адрес: " + СтруктураПисьма.Адрес, СтатусСообщения.Информация);
		
		Почта 	  = Новый Почта;
		Сообщение = Новый ПочтовоеСообщение;
		
		Почта.Подключиться();	
		Сообщение.Вложения.Добавить(СтруктураПисьма.ИмяФайлаВложения);
		Сообщение.Тема 	= СтруктураПисьма.Тема;
		Сообщение.Текст = СтруктураПисьма.Текст;
		Сообщение.Получатели.Добавить(СтруктураПисьма.Адрес);
		Почта.Послать(Сообщение);
		Почта.Отключиться();
		
		Возврат Истина;
		
	#Иначе
	
		Возврат Ложь;
	
	#КонецЕсли
	
КонецФункции // ОтправкаПисьмаЧерезПочтовыйКлиентОС()

Процедура ВыгрузитьДанныеПочтой()
	
	ОбновитьДоступныеУчетныеЗаписи();
	
	ИспКлиента1С = Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить();
	        	
	//Имя файла в письме всегда должно быть вида From1C.X		
	Если (Найти(ВРег(ИмяФайла),"FROM1C.") = 0) Тогда  // нужно сделать копию файла с переименованием в вид From1C.X
		Путь 			 = КаталогВременныхФайлов();
		ИмяФайлаБезПути  = ИмяФайла;
		ФайлНаДиске = Новый Файл(ИмяФайлаБезПути);		
		ИмяФайлаВложения = Путь + "From1C" + ФайлНаДиске.Расширение;		
		КопироватьФайл(ИмяФайла, ИмяФайлаВложения);
	Иначе
		ИмяФайлаВложения = ИмяФайла;
	КонецЕсли;
	
	Адрес = СокрЛП(ПочтовыйЯщик);
	// Тема сообщения должна обязательно начинаться с "AgentPlus"!
	Тема  = "AgentPlus Dest=ToPPC Agent=" + СокрЛП(ВыбАгент); 
	Текст = "AgentPlus!";  	
	
	Если ПустаяСтрока(ПочтовыйЯщик) Тогда
		ОповеститьОСобытии("Не указан адрес электронной почты агента: " + ВыбАгент);
		Возврат;
	КонецЕсли;
	
	СтруктураПисьма = Новый Структура("ИмяФайлаВложения, Адрес, Тема, Текст", ИмяФайлаВложения, Адрес, Тема, Текст);
	
	Если ИспКлиента1С Тогда
		
		ОтправкаПисьмаЧерезВстроенногоКлиента1С(СтруктураПисьма);
		
	Иначе
		
		Если Не ОтправкаПисьмаЧерезПочтовыйКлиентОС(СтруктураПисьма) Тогда
			ОповеститьОСобытии("Отправка электронной почты не произведена! Причина: использование почтового " + 
							   "клиента операционной системы в фоновом режиме невозможно!");
			Возврат;
		КонецЕсли;
				
	КонецЕсли;   	
	
КонецПроцедуры //ВыгрузитьДанныеПочтой()

// Функция СоздатьПодключениеКФТП
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//	ПодключениеКФТП
//
// Описание:
// 	Функция формирует новое подключениек ФТП-серверу по заданным настройка в системе
// 
Функция СоздатьПодключениеКФТП() Экспорт
	
	Сервер 	= СокрЛП(Константы.кпкФТПСервер.Получить());
	Логин 	= СокрЛП(Константы.кпкФТППользователь.Получить());
	Пароль 	= СокрЛП(Константы.кпкФТППароль.Получить());
	
	Если ПустаяСтрока(Сервер) Или ПустаяСтрока(Логин) Тогда
		ТекстСообщения = "В константах выставлены не все параметры соединения с FTP-сервером! Работа с FTP невозможна!";
		ОповеститьОСобытии(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ОповеститьОСобытии("Подключение к FTP-серверу...", СтатусСообщения.Информация, Ложь);
	
	Попытка
		ПодключениеКФТП = Новый FTPСоединение(Сервер, , Логин, Пароль, , , 0);		
	Исключение
		ОповеститьОСобытии("Ошибка подключения. Причина: " + ОписаниеОшибки());			
		Возврат Ложь;
	КонецПопытки;
	
	ОповеститьОСобытии("К FTP-серверу подключился...", СтатусСообщения.Информация);
	       	
	Возврат ПодключениеКФТП;  
	
КонецФункции // СоздатьПодключениеКФТП()

// Процедура ВыгрузитьДанные
//
// Параметры:
//  ОтветнаяВыгрузка - признак формирования ответной выгрузки данных
//
// Описание:
// 	Промежуточная процедура для выгрузки данных в мобильное устройство
// 
Процедура ВыгрузитьДанные(ОтветнаяВыгрузка = Ложь) Экспорт
	
	ИмяФайла = "";
	
	Если СформироватьФайлВыгрузкиДляКПК(ОтветнаяВыгрузка) Тогда
		
		Если СпособОбмена <> 1 Тогда
			ОтправкаФайла(ОтветнаяВыгрузка);			
		Иначе
			#Если Клиент Тогда		
				Состояние("Отправка данных в мобильное устройство...");
				ОтправкаФайлаНапрямуюВКПК(ИмяФайла); 
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	СохранитьТаблицуЛогаВНастройкахПользователя();
	
КонецПроцедуры //ВыгрузитьДанные

Процедура ОтправкаФайла(Ответ)	
	
	Если СпособОбмена = 2 Тогда
		#Если Клиент Тогда		
		Состояние("Отправка данных через Агент Плюс СОД...");
		#КонецЕсли
		Если Ответ Тогда
			ВыгрузитьДанныеНаАПСервер(-1);
		Иначе
			ВыгрузитьДанныеНаАПСервер();
		КонецЕсли;
	ИначеЕсли СпособОбмена = 3 Тогда
		#Если Клиент Тогда		
		Состояние("Отправка данных на ФТП-сервер...");
		#КонецЕсли
		ВыгрузитьДанныеНаФТП();
	ИначеЕсли СпособОбмена = 4 Тогда
		#Если Клиент Тогда		
		Состояние("Отправка данных по почте...");
		#КонецЕсли
		ВыгрузитьДанныеПочтой();
	КонецЕсли;
	
	#Если Клиент Тогда	
	Состояние("");
	#КонецЕсли     
	
КонецПроцедуры //ОтправкаФайла()

////////////////////////////////////////////////////////
//////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ ДАННЫХ С КПК ///////////
////////////////////////////////////////////////////////

// Функция осуществляет запись документа в ИБ 1С: Предприятия
//
//Возвращаемое значение:
//  Число: 1 - если документ записан, 0 - если при записи произошлда ошибка
//
// Добавлена 14.06.2007
//      
Функция ЗаписьДокумента(Док, СтруктураДокКПК, НовыйДок = Истина, ДобавлятьЗаписьвРегистр = Истина)
	
	Проводить = Истина;
	
	Если флПроводить Тогда
		Если Док.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.Контрагент) Тогда
				ТекстСообщения = "В документе " + Строка(Док) + " не указан контрагент. Документ не будет проведен!";
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина, Док.Ссылка);
				Проводить = Ложь;
			КонецЕсли;
		КонецЕсли;	
		Если Док.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
				ТекстСообщения = "В документе " + Строка(Док) + " не указан договор. Документ не будет проведен!";
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина, Док.Ссылка);
				Проводить = Ложь;
			КонецЕсли;
		КонецЕсли;	
		Если Док.Метаданные().Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
			Если Док.СуммаДокумента = 0 Тогда
				ТекстСообщения = "Сумма документа " + Строка(Док) + " равна 0. Документ не будет проведен!";
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина, Док.Ссылка);
				Проводить = Ложь;
			КонецЕсли;
		КонецЕсли;	
	Иначе
		Проводить = Ложь
	КонецЕсли;
		
	ЗаписьЖурналаРегистрации("Загружен документ из мобильного устройства", УровеньЖурналаРегистрации.Информация,
							 Док.Метаданные(), Док.Ссылка, "Запись документа");
		
	Если Не ВыполнитьОперациюДляОбъекта(Док, "запись") Тогда 							
		ОповеститьОСобытии("Не удалось записать документ " + Строка(Док) + " в базу!", 
						   СтатусСообщения.Важное, Истина, Док.Ссылка);
		Возврат 0;			
	КонецЕсли;	
	
	Если ДобавлятьЗаписьвРегистр Тогда
		
		Если СтруктураДокКПК.СпособСоздания = "User" Тогда
			СпособСоздания = Перечисления.кпкСпособыСозданияДокументовВКПК.Вручную;
		ИначеЕсли СтруктураДокКПК.СпособСоздания = "Copy" Тогда
			СпособСоздания = Перечисления.кпкСпособыСозданияДокументовВКПК.Скопирован;
		ИначеЕсли СтруктураДокКПК.СпособСоздания = "Sub" Тогда
			СпособСоздания = Перечисления.кпкСпособыСозданияДокументовВКПК.ВведенНаОсновании;
		ИначеЕсли СтруктураДокКПК.СпособСоздания = "Load" Тогда
			СпособСоздания = Перечисления.кпкСпособыСозданияДокументовВКПК.ЗагруженИзЦБД;
		КонецЕсли;  	
		
		СведенияДокумента 					 = РегистрыСведений.кпкСведенияДокумента.СоздатьМенеджерЗаписи();
		СведенияДокумента.Агент 			 = ВыбАгент;
		СведенияДокумента.ДатаВремяСоздания  = СтруктураДокКПК.Дата;
		СведенияДокумента.кпкГПСШирота 		 = СтруктураДокКПК.Широта;
		СведенияДокумента.кпкГПСДолгота 	 = СтруктураДокКПК.Долгота;		
		Если СтруктураДокКПК.Свойство("Категория") Тогда
			СведенияДокумента.Категория			 = СтруктураДокКПК.Категория;
		КонецЕсли;
		СведенияДокумента.КПКДокумент 		 = Док.Ссылка;               		
		СведенияДокумента.ИДДокумента		 = НРег(СокрЛП(Док.Ссылка.УникальныйИдентификатор()));
		СведенияДокумента.Период 			 = ТекущаяДата();
		СведенияДокумента.СпособСозданияВКПК = СпособСоздания;
		
		Если Не ВыполнитьОперациюДляОбъекта(СведенияДокумента, "запись") Тогда 						
			ТекстСообщения = "Не удалось записать сведения по документу: " + Строка(Док) + " в базу!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат 0;		
		КонецЕсли;   
		
	КонецЕсли;
	
	Если Проводить и Не ТипЗнч(Док) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда		
		Если Не ПроверитьВозможностьПроведенияДокумента(Док) Тогда
			Если Не ВыполнитьОперациюДляОбъекта(Док, "проведение") Тогда 						
				ОповеститьОСобытии("Не удалось провести документ: " + Строка(Док), СтатусСообщения.Важное, Истина, Док.Ссылка);
				Возврат 0;			
			КонецЕсли;				
		КонецЕсли;				
	КонецЕсли;
	
	ТекстСообщения = ?(НовыйДок, "Создан", "Перезаписан") + " документ " + Строка(Док);
	ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, Док.Ссылка);
	
	Возврат 1;
	
КонецФункции //ЗаписьДокумента()

// Функция ЗагрузитьДанныеСФТП
//
// Параметры:
//  Число - результат загрузки
//
// Описание:
// 	Функция загружает данные от агента с ФТП-сервера и возвращает результат загрузки
// 
Функция ЗагрузитьДанныеСФТП() Экспорт
	
	ПодключениеКФТП = СоздатьПодключениеКФТП();
	Если ПодключениеКФТП = Ложь Тогда
		Возврат 0;
	КонецЕсли;	
	
	Если Константы.кпкШифроватьДанные.Получить() <> 0 Тогда
		ПослРасширение = ".crp";
	Иначе
		ПослРасширение = "";
	КонецЕсли;
	
	ИмяФайла = "To1C.zip" + ПослРасширение;
	
	СтОтбор = Новый Структура("Объект", ВыбАгент);	
	Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(СтОтбор);
	Если Выборка.Следующий() Тогда
		ФТППапка = Строка(Выборка.ФТППапка);
	Иначе		
		ОповеститьОСобытии("Для агента:" + ВыбАгент + " не существует записи в регистре сведений ""Сведения агентов""!");		
		Возврат 0;
	КонецЕсли;	
	
	НаимАгента = СокрЛП(ВыбАгент.Наименование);
	
	Путь = КаталогВременныхФайлов();
	
	Если ПустаяСтрока(ФТППапка) Тогда		
		ОповеститьОСобытии("У агента: """ + НаимАгента + """ не указана папка обмена на FTP-сервере!");		
		Возврат 0;
	КонецЕсли;
	
	Если (Прав(ФтпПапка,1) <> "\") Или (Прав(ФтпПапка,1) <> "/") Тогда
		ФтпПапка = ФтпПапка + "/";
	КонецЕсли;
	
	ИмяФайлаФТП   = ФтпПапка + ИмяФайла;
	ФайлЛокальный = Путь + ИмяФайла;
	
	Попытка    
		Если ПодключениеКФТП.НайтиФайлы(ФтпПапка).Количество() = 0 Тогда
			Возврат 0;			
		КонецЕсли;
		
		Если ПодключениеКФТП.НайтиФайлы(ФтпПапка, "To1C.*").Количество() = 0 Тогда
			ОповеститьОСобытии("Нет данных на FTP-сервере!");			
			Возврат 0;			
		Иначе
			ПодключениеКФТП.Получить(ИмяФайлаФТП, ФайлЛокальный);				
		КонецЕсли;  
		
	Исключение             
		ТекстСообщения = "Ошибка при копировании файла с FTP-сервера: " + ОписаниеОшибки() + 
						 ". Данные от агента: """ + НаимАгента + """ не загружены!";
		ОповеститьОСобытии();			
		Возврат 0;
	КонецПопытки;   	
	
	Попытка
		ПодключениеКФТП.Удалить(ФтпПапка, "To1C.*");
	Исключение
		ТекстСообщения = "Не удалось удалить файл ""To1C.zip"" на FTP-сервере для агента: """ + НаимАгента + "!" + 
						 "Причина: " + ОписаниеОшибки();
		ОповеститьОСобытии(ТекстСообщения);		
	КонецПопытки;
	
	Результат = ЗагрузитьДанные(ФайлЛокальный);
	
	Если Результат = 0 Тогда		
		ОповеститьОСобытии("Данные с FTP-сервера для агента: """ + НаимАгента + """ не загружены!", 
						   СтатусСообщения.Важное);				
	Иначе				
		ОповеститьОСобытии("Данные с FTP-сервера для агента: """ + НаимАгента + """ успешно загружены!",
						   СтатусСообщения.Информация);				
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЗагрузитьДанныеСФТП()

// Функция ЗагрузитьДанныеСАПСервера
//
// Параметры:
//  Число - результат загрузки
//
// Описание:
// 	Функция загружает данные от агента с Агент Плюс СОД и возвращает результат загрузки
//
Функция ЗагрузитьДанныеСАПСервера(Режим = 0) Экспорт
    
	ПапкаСервера = СокрЛП(Константы.кпкАПСПапкаОбмена.Получить());
	Если ПустаяСтрока(ПапкаСервера) Тогда
		Возврат 0;
	КонецЕсли;
	
	#Если Не Клиент Тогда
        КПКОбъектServer.SetExchangeDir(ПапкаСервера);		
	#Иначе
		КПКОбъект.АпсУстПапкуОбмена(ПапкаСервера);		
	#КонецЕсли
	
	ДополнитьСлешВПуть(ПапкаСервера);
	
	НаимАгента = СокрЛП(ВыбАгент.Наименование);
	Если КПК = Неопределено Тогда
		ТекстСообщения = "У агента: """ + НаимАгента + """ не указано мобильное устройство!";
		ОповеститьОСобытии(ТекстСообщения);
		Возврат 0;
	КонецЕсли;

	ИдКПК = СокрЛП(КПК.Идентификатор);
	Если Не ЗначениеЗаполнено(ИдКПК) Тогда
		ТекстСообщения = "У агента """ + НаимАгента + """ указано обильное устройство с пустым иденификатором!";
		ОповеститьОСобытии(ТекстСообщения);
		Возврат 0;
	КонецЕсли;
	
	Спис = Новый СписокЗначений;
	
	СтрИнфо = "";
	// Получаем данные на основе идентификатора КПК
	#Если Не Клиент Тогда
		СтрИнфо = КПКОбъектServer.GetPPCInfo(ИдКПК); 		
	#Иначе
		СтрИнфо = КПКОбъект.АпсПолучитьКПКИнфо(ИдКПК);
	#КонецЕсли

	Если ПустаяСтрока(СтрИнфо) Тогда
		Текст = "Данные для агента: """ + НаимАгента + """ не загружены! Возможно некорректно сформированы настройки для Агент Плюс СОД";
		ОповеститьОСобытии(Текст);
		Возврат 0;
	КонецЕсли;
	
	Спис = кпкАгентПлюс.ИзСтрокиВСписок(СтрИнфо, """,""");
	// В списке следующие значения:
	//0-й - идентификатор КПК
	//1-й - псевдоним торгвого агента (владельца КПК)
	//2-й - директория обмена данными 
	//3-й - имя полученного с КПК файла с директорией
	//4-й - время сеанса
	//5-й - контрольная сумма полученного файла
	
	ИмяФайла = СокрЛП(Спис.Получить(3));
	
	// Если в результате получения данных методом компоненты
	// файла не обнаружено, пробуем проверить существует ли такой файл в папке
	// агента физически
	Если ПустаяСтрока(ИмяФайла) Тогда  		
		СтОтбор = Новый Структура("Объект", ВыбАгент);		
		Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(СтОтбор);
		Если Выборка.Следующий() Тогда
			АПСПапка = СокрЛП(Выборка.АПСПапка);
		Иначе
			ОповеститьОСобытии("Для агента: " + ВыбАгент + " не существует записи" + 
							   " в регистре сведений ""Сведения агентов""!");
			Возврат 0;
		КонецЕсли;	 		
		
		ИмяФайла = "To1C.zip";		
		ФайлАгента = ПапкаСервера + АПСПапка + ИмяФайла;
		ФайлЗагрузки = Новый Файл(ФайлАгента);
		Если НЕ ФайлЗагрузки.Существует() Тогда
			Если МобильноеПриложение = ТипАгентМТ Тогда
				ИмяФайла = "ToCBD.zip";
				ФайлАгента = ПапкаСервера + АПСПапка + ИмяФайла;
				ФайлЗагрузки = Новый Файл(ФайлАгента);
				Если НЕ ФайлЗагрузки.Существует() Тогда
					ТекстСообщения = "Данные от агента: """ + НаимАгента + """ на сервере отсутствуют.";
					ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
					Возврат 0;
				КонецЕсли;
			Иначе
				ТекстСообщения = "Данные от агента: """ + НаимАгента + """ на сервере отсутствуют.";
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
				Возврат 0;
			КонецЕсли;
		КонецЕсли;   		
	Иначе    		
		ФайлАгента = ПапкаСервера + ИмяФайла;
		ФайлЗагрузки = Новый Файл(ФайлАгента);
		Если НЕ ФайлЗагрузки.Существует() Тогда
			ТекстСообщения = "Данные от агента: """ + НаимАгента + """ на сервере отсутствуют.";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
			Возврат 0;
		КонецЕсли; 		
	КонецЕсли;
 	
	Если ФайлЗагрузки = Неопределено Тогда
		ТекстСообщения = "Данные от агента: """ + НаимАгента + """ на сервере отсутствуют.";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
		Возврат 0;
	КонецЕсли;  
   	
	Путь = КаталогВременныхФайлов();
	ФайлЛокальный = Путь + ФайлЗагрузки.Имя;
	
	Попытка
		КопироватьФайл(ФайлАгента, ФайлЛокальный);
	Исключение
		ОповеститьОСобытии("Ошибка копирования файла по пути: """ + ФайлАгента + """. Причина: " + ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;
	
	// Если файл с треком перемещений, то нужно удалить временный файл
	Если ВРЕГ(ФайлЗагрузки.Расширение) = ".TXT" Тогда
		Попытка
			УдалитьФайлы(СокрЛП(ФайлЗагрузки.ПолноеИмя) + ".clt");			
		Исключение
			ТекстСообщения = "Не удалось удалить файл : " + ФайлЗагрузки.ПолноеИмя + " по причине: " + ОписаниеОшибки();																				
			ОповеститьОСобытии(ТекстСообщения);			
		КонецПопытки;		
	КонецЕсли;
	
	// Обязательно оповещаем сервер о получении файла загрузки 1С:Предприятием!!!
	// Оповещение всегда проходит на основании идентификатора КПК!
	#Если Не Клиент Тогда
		КПКОбъектServer.ProcessDone(ИдКПК); 				
	#Иначе
		КпкОбъект.АпсПроцессЗавершен(ИдКПК); 		
	#КонецЕсли
	
	Результат = ЗагрузитьДанные(ФайлЛокальный);
	Если Результат = 0 Тогда
		ОповеститьОСобытии("Данные для агента """ + НаимАгента + """ не загружены!", СтатусСообщения.Важное);
		Возврат 0;			
	КонецЕсли;
	
КонецФункции //ЗагрузитьДанныеСАПСервера()
   
Функция ЗагрузитьСообщенияЧерезВстроенногоКлиента1С()
	
	ТекстОшибок = "";
	
	ОбновитьДоступныеУчетныеЗаписи();
	
	УчетнаяЗапись = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяУчетнаяЗапись");
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда			
		
		Если мДоступныеУчетныеЗаписи.Количество() = 0 Тогда
			#Если Клиент Тогда		
			Предупреждение("У вас нет ни одной доступной учетной записи для отправки" + 
						   " писем из встроенного почтового клиента!", 60);			
			#КонецЕсли
			Возврат Ложь;
		Иначе
			УчетнаяЗапись = мДоступныеУчетныеЗаписи[0].Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивУчетныхЗаписей = Новый Массив();
	МассивУчетныхЗаписей.Добавить(УчетнаяЗапись); 		
	
	Попытка		
		УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(Неопределено, ТекПользователь, МассивУчетныхЗаписей, , 
														   Ложь, Истина, Ложь, ТекстОшибок);		
	Исключение
		// проблема при получении писем
		Если ТекстОшибок = "" Тогда
			ТекстОшибок = ОписаниеОшибки();	
		КонецЕсли;  		
	КонецПопытки;
	
	Если НЕ ПустаяСтрока(ТекстОшибок) Тогда
		ОповеститьОСобытии("Ошибка при получении почтовых сообщений: " + ТекстОшибок, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;			
	
	// проверяем все непрочитанные письма для учетной записи
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВложенияЭлектронныхПисем.ИмяФайла,
	|	ВложенияЭлектронныхПисем.Хранилище,
	|	ЭлектронноеПисьмо.ДатаОтправления КАК ДатаОтправления,
	|	ЭлектронноеПисьмо.Ссылка	
	|ИЗ
	|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	|		ПО (ЭлектронноеПисьмо.Ссылка = ВложенияЭлектронныхПисем.Объект)
	|			И (ЭлектронноеПисьмо.НеРассмотрено = ИСТИНА)
	|			И (ЭлектронноеПисьмо.СтатусПисьма = &Входящее)
	|ГДЕ
	|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма = """"
	|	И ПОДСТРОКА(ЭлектронноеПисьмо.Тема, 1, 9) = &НазваниеТемы
	|	И (ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО &ИмяФайлаXML
	|			ИЛИ ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО &ИмяФайлаZip)
	|	И ЭлектронноеПисьмо.НеРассмотрено = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОтправления УБЫВ");	

	Запрос.УстановитьПараметр("ИмяФайлаXML",  "To1C.xml");	
	Запрос.УстановитьПараметр("ИмяФайлаZip",  "To1C.zip");	
	Запрос.УстановитьПараметр("НазваниеТемы", "AgentPlus");
	Запрос.УстановитьПараметр("Входящее", 	  Перечисления.СтатусыПисем.Полученное);
	
	ТаблицаФайлов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ФайлВложения Из ТаблицаФайлов Цикл
		
		Сообщение 	 = ФайлВложения.Ссылка;  		
		Тема		 = Сообщение.Тема;
			
		Если ФайлВложения.Хранилище <> Неопределено Тогда			
			НайденныйФайл = ФайлВложения.Хранилище.Получить();		
		Иначе
			Продолжить;
		КонецЕсли;
		
		ИмяФайлаДляЗагрузки = КаталогВременныхФайлов() + СокрЛП(ФайлВложения.ИмяФайла);
		
		НайденныйФайл.Записать(ИмяФайлаДляЗагрузки);
		
		ФайлЛокально = Новый Файл(ИмяФайлаДляЗагрузки);
		
		Если Не ФайлЛокально.Существует() Тогда
			Продолжить;		
		КонецЕсли;
						
		ИдАгента = кпкАгентПлюс.АППочтаПолучитьКодАгента(Тема);
		Если Не ЗначениеЗаполнено(ИдАгента) тогда
			Продолжить;
		КонецЕсли;  		
			
		Если ЗначениеЗаполнено(ВыбАгент) Тогда		
			Если ИдАгента <> СокрЛП(ВыбАгент.УникальныйИдентификатор()) Тогда
				Продолжить;
			КонецЕсли;
		Иначе			
			УИАгента = Новый УникальныйИдентификатор(ИдАгента);	        
			ВыбАгент = Справочники.ФизическиеЛица.ПолучитьСсылку(УИАгента);			
			
			Если ТабЭлектроннаяПочта <> Неопределено Тогда
				Если ТабЭлектроннаяПочта.Количество() <> 0 Тогда
					НайденнаяСтрока = ТабЭлектроннаяПочта.Найти(ВыбАгент, "Агент");
					Если НайденнаяСтрока = Неопределено или Не НайденнаяСтрока.Пометка Тогда
						Продолжить;									
					КонецЕсли;  				
				КонецЕсли;			
			КонецЕсли;
		КонецЕсли;
		
		ПриИзмененииАгента(ВыбАгент);    
		
		Результат = ЗагрузитьДанные(ФайлЛокально.ПолноеИмя);
		Если Результат = 0 Тогда
			ИмяАгента = ВыбАгент.Наименование;
			ОповеститьОСобытии("Данные для агента: """ + ИмяАгента + """ не загружены!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// Помечаем сообщение не прочитанным
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		СообщениеОбъект.НеРассмотрено = Ложь;
		Если Не ЗначениеЗаполнено(СообщениеОбъект.Ответственный) Тогда
			Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");		
			Если Ответственный.Пустая() Тогда
				Ответственный = ТекПользователь;
			КонецЕсли;
			СообщениеОбъект.Ответственный = Ответственный;
		КонецЕсли;  
		
		Попытка 
			ВыполнитьОперациюДляОбъекта(СообщениеОбъект, "запись");
		Исключение
			ТекстСообщения = "Не удалось установить признак прочитанности для " + 
							 "полученного электронного письма " + Строка(Сообщение) + "!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Продолжить;	
		КонецПопытки;	
				
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции // ЗагрузитьСообщенияЧерезВстроенногоКлиента1С()

Функция ЗагрузитьСообщенияЧерезПочтовогоКлиентаОС()
	
	#Если Клиент Тогда
		
		Путь = КаталогВременныхФайлов();
		
		КолПисем = 0;
		
		Почта = Новый Почта;
		
		Почта.Подключиться();
		Сообщения = Почта.Выбрать();
		
		Для Каждого Сообщение Из Сообщения Цикл
			
			Если Не Сообщение.Непрочтено Тогда
				Продолжить;
			КонецЕсли;
			
			ПочтаВремя 	  = Сообщение.ДатаПолучения;
			Тема 		  = Сообщение.Тема;
			Отправитель	  = Сообщение.Отправитель;
			Идентификатор = Строка(ПочтаВремя)  + Строка(Отправитель) + Строка(Тема);
			Если Сообщение.Вложения.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяФайлаВложения = СокрЛП(Сообщение.Вложения[0].Наименование);
			Данные           = Сообщение.Вложения[0].Данные;
			
			Если Данные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КолПисем = КолПисем + 1;
			ФайлЛокально = Путь + ИмяФайлаВложения;
			Данные.Записать(ФайлЛокально);		
			
			// Получен файл для загрузки
			ИдАгента = кпкАгентПлюс.АППочтаПолучитьКодАгента(Тема);
			
			Если Не ЗначениеЗаполнено(ИдАгента) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыбАгент) Тогда		
				Если ИдАгента <> СокрЛП(ВыбАгент.УникальныйИдентификатор()) Тогда
					Продолжить;
				КонецЕсли;
			Иначе			
				УИАгента = Новый УникальныйИдентификатор(ИдАгента);	        
				ВыбАгент = Справочники.ФизическиеЛица.ПолучитьСсылку(УИАгента);			
				
				Если ТабЭлектроннаяПочта <> Неопределено Тогда
					Если ТабЭлектроннаяПочта.Количество() <> 0 Тогда
						НайденнаяСтрока = ТабЭлектроннаяПочта.Найти(ВыбАгент, "Агент");
						Если НайденнаяСтрока = Неопределено Тогда
							Возврат Ложь;				
						ИначеЕсли Не НайденнаяСтрока.Пометка Тогда
							Возврат Ложь;
						КонецЕсли;  				
					КонецЕсли;			
				КонецЕсли;
			КонецЕсли;
			
			ПриИзмененииАгента(ВыбАгент);    
			
			ОповеститьОСобытии("Файл загрузки: " + ФайлЛокально, СтатусСообщения.Информация);
			
			Результат = ЗагрузитьДанные(ФайлЛокально);
			Если Результат = 0 Тогда
				ИмяАгента = ВыбАгент.Наименование;
				ОповеститьОСобытии("Данные для агента: """ + ИмяАгента + """ не загружены!", СтатусСообщения.Важное);
			КонецЕсли;
			
		КонецЦикла;
		
		Почта.Отключиться();
		
		ОповеститьОСобытии("Обработано писем: " + Строка(КолПисем), СтатусСообщения.Информация);
		
		Возврат Истина;
		
	#Иначе	
		
		Возврат Ложь;
		
	#КонецЕсли  
		
КонецФункции // ЗагрузитьСообщенияЧерезПочтовогоКлиентаОС()

// Процедура ЗагрузитьДанныеПочтой
//
// Параметры:
//  ТаблицаАгентов - таблица агентов, для которых нужно получить почту
//
// Описание:
// 	Процедура загружает данные от агентов с почтового сервера либо используя 
//  встроенный почтовый клиент или сторонний клиент и возвращает результат загрузки
//   
Процедура ЗагрузитьДанныеПочтой(ТаблицаАгентов = Неопределено) Экспорт
	
	ИспКлиента1С = Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить();
	
	Если ИспКлиента1С Тогда
		
		Если Не ЗагрузитьСообщенияЧерезВстроенногоКлиента1С() Тогда
			ОповеститьОСобытии("Не удалось загрузить электронную почту");
			Возврат;
		КонецЕсли;
		
	Иначе
				
		#Если Клиент Тогда
			
			Если Не ЗагрузитьСообщенияЧерезПочтовогоКлиентаОС() Тогда
				ОповеститьОСобытии("Не удалось загрузить электронную почту!");
				Возврат;
			КонецЕсли;
			
		#Иначе
			
			ОповеститьОСобытии("Загрузка электронной почты от агентов не произведена! Причина: использование" + 
							   " почтового клиента операционной системы в фоновом режиме невозможно!");
			Возврат;
			
		#КонецЕсли     		
				
	КонецЕсли;
	
КонецПроцедуры  //ЗагрузитьДанныеПочтой()
    
// Процедура предназначена для загрузки данных по трекам передвижения агента
// из текстового файла, который находится внутри архива, передаваемого с КПК
//
// Параметры:
//  ФайтТрека - текстовый файл, из которого нужно прочитать информацию по трекам
//
// Добавлено: Арт 2007-12-26
//
Процедура ЗагрузкаДанныхТрека(ФайлТрека) 
	
	РежимЗагрузкиТреков = Константы.кпкРежимЗагрузкиТреков.Получить();
	
	Если РежимЗагрузкиТреков = 1 Тогда   		
		
		// Проверка папки хранения треков
		ПапкаТреков = СокрЛП(Константы.кпкПапкаТреков.Получить()); 		
		Если Не ЗначениеЗаполнено(ПапкаТреков) Тогда
			ТекстСообщения = "Укажите значение константы ""Папка треков"" на форме настройки констант " + лИмяФормыКонстант + "!";
			ОповеститьОСобытии(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если Не кпкАгентПлюс.ПроверитьСуществованиеКаталога(ПапкаТреков, Истина) Тогда
			ТекстСообщения = "Не найден каталог, указанный в константе ""Папка треков""!";
			ОповеститьОСобытии(ТекстСообщения);
			Возврат;   
		КонецЕсли; 
		
		Попытка
			ИмяФ = "Track_" + Формат(ТекущаяДата(), "ДФ=yyyyMMddhhmmss") + "_" + Строка(ВыбАгент.УникальныйИдентификатор()) + ".txt";
			ДополнитьСлешВПуть(ПапкаТреков);		
			ПутьКФайлуТрека = ПапкаТреков + ИмяФ;
			КопироватьФайл(ФайлТрека, ПутьКФайлуТрека);			
		Исключение				
			ТекстСообщения = "Не удалось скопировать файл трека!";
			ОповеститьОСобытии(ТекстСообщения);
			ОповеститьОСобытии("Причина: " + ОписаниеОшибки(), СтатусСообщения.Информация);
			Возврат;
		КонецПопытки;
		
		ВыборкаПоКлючу = РегистрыСведений.кпкСведенияПоГПСТрекам.Выбрать(,,Новый Структура("Ключ", ИмяФ));
		Если ВыборкаПоКлючу.Следующий() Тогда					
			Возврат;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.кпкСведенияПоГПСТрекам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Агент.Установить(ВыбАгент);
		НаборЗаписей.Прочитать();
							
		НоваяЗапись = НаборЗаписей.Добавить();			
		НоваяЗапись.ДатаСоздания    = ТекущаяДата();
		НоваяЗапись.Период          = ТекущаяДата();
		НоваяЗапись.Агент 		    = ВыбАгент;
		НоваяЗапись.ИмяФайлаТреков  = ИмяФ;
		НоваяЗапись.Ключ 		    = ИмяФ;
		    		
		Если ВыполнитьОперациюДляОбъекта(НаборЗаписей, "запись") Тогда			
			ОповеститьОСобытии("Загружены новые данные трека перемещений", СтатусСообщения.Информация);
		Иначе					
			ОповеститьОСобытии("Не удалось записать новые данные трека перемещений в базу!", СтатусСообщения.Важное);
			Возврат;			
		КонецЕсли;
 		
	Иначе
		
		ТекстФайл = Новый ТекстовыйДокумент();	        
		
		Попытка 		
			ТекстФайл.Прочитать(ФайлТрека); 						
		Исключение			
			ОповеститьОСобытии("Не удалось открыть файл трека: " + ФайлТрека);
		КонецПопытки;		                            
		
		СчСек = 0;
		
		НаборЗаписей = РегистрыСведений.кпкСведенияПоГПСТрекам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Агент.Установить(ВыбАгент);
		НаборЗаписей.Прочитать();
		
		Для п = 1 По ТекстФайл.КоличествоСтрок() Цикл  				
			
			СтрокаТекста = СокрЛП(ТекстФайл.ПолучитьСтроку(п));												
			ПозДаты = Найти(СтрокаТекста,  Символы.Таб);                                 
			
			Если ПозДаты > 0 Тогда
				
				Широта    = 0;			
				Долгота   = 0;	
				Скорость  = 0;
				
				ДатаВремя = СокрЛП(Лев(СтрокаТекста, ПозДаты));
				
				Попытка
					ДатаСоздания = ДатаВремяXMLВФормат1С(ДатаВремя);
				Исключение
					Продолжить;
				КонецПопытки;
				
				Если ЗначениеЗаполнено(ДатаСоздания) Тогда
					
					//Вычисляем широту
					СтрокаТекста = Прав(СтрокаТекста, СтрДлина(СтрокаТекста) - ПозДаты);
					ПозШир = Найти(СтрокаТекста, Символы.Таб);           
					Если ПозШир > 0 Тогда                                      
						Широта  = Число(Лев(СтрокаТекста, ПозШир));                            						
					КонецЕсли;  
					
					// Вычисляем долготу и скорость
					СтрокаТекста = Сред(СтрокаТекста, ПозШир+1);
					
					ПозДол = Найти(СтрокаТекста, Символы.Таб);           
					
					Если ПозДол > 0 Тогда                                      
						Долгота  = Число(Лев(СтрокаТекста, ПозДол));
						Скорость = Число(Сред(СтрокаТекста, ПозДол+1));
					Иначе						
						Долгота  = Число(СтрокаТекста);
					КонецЕсли;  
					
					КлючЗаписи = Строка(ДатаСоздания) + "_" + СокрЛП(Широта) + "_" + СокрЛП(Долгота);
					
					ВыборкаПоКлючу = РегистрыСведений.кпкСведенияПоГПСТрекам.Выбрать(,,Новый Структура("Ключ", КлючЗаписи));
					Если ВыборкаПоКлючу.Следующий() Тогда					
						Продолжить;
					КонецЕсли;
					
					СчСек = СчСек + 1;					
					НоваяЗапись = НаборЗаписей.Добавить();			
					НоваяЗапись.ДатаСоздания = ДатаСоздания;
					НоваяЗапись.Период 	     = ТекущаяДата() + СчСек;
					НоваяЗапись.Агент 		 = ВыбАгент;
					НоваяЗапись.Широта 		 = Широта;
					НоваяЗапись.Долгота 	 = Долгота; 
					НоваяЗапись.Ключ 		 = КлючЗаписи;
					НоваяЗапись.Скорость	 = Скорость;
										
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
			
		Если СчСек > 0 Тогда
			Если ВыполнитьОперациюДляОбъекта(НаборЗаписей, "запись") Тогда
				ТекстСообщения = "Загружены новые данные трека перемещений";
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
			Иначе		
				ТекстСообщения = "Не удалось записать новые данные трека перемещений в базу!";
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
				Возврат;			
			КонецЕсли;   	
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры //ЗагрузкаДанныхТрека()

///////////////////////////

Функция СоздатьНовыйДокумент(МенеджерДок, Док, СтруктураДокКПК, ПропуститьЗагрузку)
		
	DocID     = Новый УникальныйИдентификатор(СтруктураДокКПК.ИдДок);
	ДокСсылка = МенеджерДок.ПолучитьСсылку(DocID);
	Док 	  = ДокСсылка.ПолучитьОбъект();
	
	Если Док = Неопределено Тогда
		
		Если ТипЗнч(МенеджерДок) = Тип("ДокументМенеджер.кпкЗаданиеАгента") Тогда
			ТекстСообщения = "Документ ""Задание агента"" с номером " + СтруктураДокКПК.Номер +  
							 " от " + Формат(СтруктураДокКПК.Дата, "ДФ=dd.MM.yyyy") + " не найден в базе!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			ПропуститьЗагрузку = Истина;
		Иначе
			
			Док = МенеджерДок;
			
			Синоним = МенеджерДок.ПустаяСсылка().Метаданные().Синоним;
			
			Если Не ВыполнитьОперациюДляОбъекта(Док, "создание") Тогда 									
				ТекстСообщения = "Не удалось создать новый документ """ + Синоним + """!";
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
				ПропуститьЗагрузку = Истина;			
			КонецЕсли;
			
			Док.УстановитьСсылкуНового(ДокСсылка);	
			
			Возврат Истина;
			
		КонецЕсли;
		
	Иначе  
		
		Если Не флОбновлять и ТипЗнч(МенеджерДок) <> Тип("ДокументМенеджер.кпкЗаданиеАгента") Тогда
			ПропуститьЗагрузку = Истина;			
		КонецЕсли;		
		Док.Разблокировать();
		
	КонецЕсли;  
	
	Возврат Ложь;
		
КонецФункции // СоздатьНовыйДокумент()

Функция ЗагрузкаЗаявок(Эл, СтруктураДокКПК)   
	
	Менеджер 	       = Документы.ЗаказПокупателя;	
	Док 			   = Неопределено;	
	ПропуститьЗагрузку = Ложь;	
	
	ЭтоНовыйДок = СоздатьНовыйДокумент(Менеджер, Док, СтруктураДокКПК, ПропуститьЗагрузку);
	
	Если ПропуститьЗагрузку Тогда
		Возврат 2;
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ТорговаяТочка, ДоговорКонтрагента");
	
	ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, Менеджер, СтруктураОбязательныхПолей, "Продажа");
	
	УстановитьДоговорВДокументе(Док);
 
	// Виды оплат
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВидыДенежныхСредств.Ссылка,
	|	ВЫБОР
	|		КОГДА ВидыДенежныхСредств.Ссылка = &ВидДС
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сорт	
	|ИЗ
	|	Перечисление.ВидыДенежныхСредств КАК ВидыДенежныхСредств
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сорт УБЫВ");
	
	Запрос.УстановитьПараметр("ВидДС", ВидОплатыПоУмолчанию);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВидОплаты = СтруктураДокКПК.ВидОплаты; 
	
	Сч = 1;
	Пока Выборка.Следующий() Цикл	
		Если ВидОплаты = Сч Тогда
			ВидОплаты = Выборка.Ссылка;
			Прервать;
		КонецЕсли;			
		Сч = Сч + 1;	
	КонецЦикла;
 
	Если ВидОплаты = Перечисления.ВидыДенежныхСредств.Наличные Тогда		
		ТаблицаКасс  = КассыАгента.Получить();
		Если Не ТаблицаКасс = Неопределено Тогда
			НайденнаяСтрока = ТаблицаКасс.Найти(Док.Организация, "Организация");
			Если Не НайденнаяСтрока = Неопределено Тогда
				Док.СтруктурнаяЕдиница = НайденнаяСтрока.Касса;
			КонецЕсли;		
		КонецЕсли;  		
		Если Не ЗначениеЗаполнено(Док.СтруктурнаяЕдиница) Тогда
			Док.СтруктурнаяЕдиница = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКасса");	
		КонецЕсли;			
	ИначеЕсли ВидОплаты = Перечисления.ВидыДенежныхСредств.Безналичные  Тогда
		Док.СтруктурнаяЕдиница = Док.Организация.ОсновнойБанковскийСчет;
	КонецЕсли;
	
	Если ОснСклад.Пустая() Тогда		
		ТекстСообщения = "Для агента: " + ВыбАгент + " не указана настройка ""Основной склад""." +
						 " В документе " + Строка(Док) + " в качестве склада будет указан склад из настроек текущего пользователя";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, Док);
		
		ОснСклад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойСклад");		
	КонецЕсли;	
	
	Док.СкладГруппа = ОснСклад;
	
	Док.ДатаОтгрузки = ДатаИзXML(Эл, "TimeDlv");
	
	КодТипаЦены = Число(Эл.ПолучитьАтрибут("PriceType"));
	
	УстановитьТипЦеныВДокументе(КодТипаЦены, Док);
	
	УчитыватьНДС 		 = РегистрыСведений.кпкСведенияОрганизаций.Получить(Новый Структура("Объект", Док.организация)).ИспНДС;
	Док.УчитыватьНДС 	 = УчитыватьНДС;
		
	Если Не ЭтоНовыйДок Тогда
		Док.Товары.Очистить();
		Док.Услуги.Очистить();
	КонецЕсли;
	
	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();      
	
	Пока Эл.Прочитать() Цикл
		Если Эл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Эл.Имя = "Line" Тогда
				СтОтбор = Новый Структура();
				ИдТовара = Новый УникальныйИдентификатор(СокрЛП(Эл.ПолучитьАтрибут("GdsID")));
				
				Если РежимВыгрузкиОстатков = 1 Тогда 
					Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ИдТовара);
					Если Характеристика.ПолучитьОбъект() = Неопределено Тогда
						Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);						
						Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();						
					Иначе
						Товар = Характеристика.Владелец;						
					КонецЕсли;									
				ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда   					
					Серия = Справочники.СерииНоменклатуры.ПолучитьСсылку(ИдТовара);
					Если Серия.ПолучитьОбъект() = Неопределено Тогда
						Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);						
						Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();						
					Иначе
						Товар = Серия.Владелец;						
					КонецЕсли;									
				Иначе 
					Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);					
				Конецесли;
			
				Если Товар.Пустая() Тогда					
					ОповеститьОСобытии("Товар с идентификатором: " + СокрЛП(ИдТовара) + " не найден в текущей базе!");
					Продолжить;
				КонецЕсли;
							
				// Если пересчет не требуется, уберите комментарии с этих строк:
				Цена 	   = Эл.ПолучитьАтрибут("Price");
				Стоимость  = Эл.ПолучитьАтрибут("Sum");
				Количество = Эл.ПолучитьАтрибут("Amnt");
				Стоимость  = Цена * Количество;
				Скидка 	   = Эл.ПолучитьАтрибут("Dscnt");
				СуммаНДС   = Эл.ПолучитьАтрибут("VAT");
				
				Если Товар.Услуга Тогда
					Стр = Док.Услуги.Добавить();
					Стр.Содержание = Товар.НаименованиеПолное;
				Иначе
					Стр = Док.Товары.Добавить();   			
					
					Если РежимВыгрузкиОстатков = 1 Тогда
						Стр.ХарактеристикаНоменклатуры = Характеристика;
					ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда
						Стр.СерияНоменклатуры = Серия;					
					КонецЕсли;   				
					
					Если ИспЕдИзм Тогда
						UCode = (Эл.ПолучитьАтрибут("UCode")); // код единицы измерения в ТЧ документа в КПК
						UDim  = (Эл.ПолучитьАтрибут("UDim"));  // размерность единицы измерения в ТЧ документа в КПК					
						Если UCode = Неопределено Тогда // Скорее всего в КПК не используется режим единиц измерения
							// Тогда устанавливаем ед. хранения остатков
							Единица = Товар.ЕдиницаХраненияОстатков;
							Стр.ЕдиницаИзмерения = Единица;
							Стр.Коэффициент      = ?(Единица.Коэффициент = 0, 1, Единица.Коэффициент);                   
						Иначе	
							Стр.ЕдиницаИзмерения = ПолучитьЕдиницуПоКоду(Товар, Число(UCode));
							Стр.Коэффициент      = UDim;                   
						КонецЕсли;
					Иначе
						Единица = ПолучитьБазовуюЕдиницу(Товар);
						Стр.ЕдиницаИзмерения = Единица; // с КПК номенклатура приходит в базовых единицах
						Стр.Коэффициент      = ?(Единица.Коэффициент = 0, 1, Единица.Коэффициент);                   					
					КонецЕсли;
					
					Если Константы.кпкРезервированиеЗаявок.Получить() Тогда
						Стр.Размещение = ОснСклад;
					КонецЕсли;
					
				КонецЕсли;
				
				Стр.Номенклатура 		 = Товар;
				Стр.Количество           = Количество;
				Стр.Цена      			 = Цена;
				Стр.Сумма     			 = Стоимость;
				Стр.ПроцентСкидкиНаценки = Скидка;
				Стр.СтавкаНДС 		     = Товар.СтавкаНДС;
				Стр.СуммаНДС 		     = СуммаНДС;
				
				ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(Стр, Док);				
				
				// Заполняем реквизиты табличной части.				
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(Стр, Док, "ЗаказПокупателя");
				
				// Пересчитываем суммы табличных частей
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(Стр, Док);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Стр, Док);
				
				Если Не Товар.Услуга Тогда
					// Рассчитываем плановую себестоимость.					
					ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(Стр, Док, мВалютаРегламентированногоУчета);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Эл.Имя = "Doc" Тогда				
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Док.СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(Док, "Товары") + Ценообразование.ПолучитьСуммуДокументаСНДС(Док, "Услуги");
  
	Результат = ЗаписьДокумента(Док, СтруктураДокКПК, ЭтоНовыйДок);
	
	Если Результат = 1 Тогда
		Если РеализацияПоЗаявкам = 2 Тогда
			ВвестиРеализациюНаОснованииЗаявки(Док);
		ИначеЕсли РеализацияПоЗаявкам = 3 Тогда
			ВвестиРеализациюНаОснованииЗаявкиПоРегиструСсылок(Док);
		КонецЕсли;	
	ИначеЕсли Результат = 2 Тогда
		СообщитьОПропускеДокумента(СтруктураДокКПК)
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЗагрузкаЗаявок()

Функция ЗагрузкаРеализации(Эл, СтруктураДокКПК)
	
	Менеджер 	       = Документы.РеализацияТоваровУслуг;	
	Док 			   = Неопределено;	
	ПропуститьЗагрузку = Ложь;	
	
	ЭтоНовыйДок = СоздатьНовыйДокумент(Менеджер, Док, СтруктураДокКПК, ПропуститьЗагрузку);
	
	Если ПропуститьЗагрузку Тогда
		Возврат 2;
	КонецЕсли;
	
	// Номер счета-фактуры, если номер пустой, значит счет-фактура не создавалась
	//НомерСФ	= Эл.ПолучитьАтрибут("SFNum");
	НомерСФ = "";
	 
	ИДДокОсн = СтруктураДокКПК.ИдДокОсн;
	флЕстьДокОсн = Ложь;
	Если НЕ ПустаяСтрока(ИДДокОсн) Тогда
		MDocID = Новый УникальныйИдентификатор(ИДДокОсн);
		ДокОсн = Документы.ЗаказПокупателя.ПолучитьСсылку(MDocID);
		Если ДокОсн.ПолучитьОбъект() <> Неопределено Тогда
			ДокОсн = ДокОсн.ПолучитьОбъект();
			ДокОсн.Разблокировать();
			флЕстьДокОсн = Истина;
		Иначе
			ДокОсн = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
		Док.Сделка = ДокОсн.Ссылка;
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ТорговаяТочка, ДоговорКонтрагента");

	ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, Документы.РеализацияТоваровУслуг,
										СтруктураОбязательныхПолей, "Продажа");
	
	Если ЗначениеЗаполнено(НомерСФ) Тогда
		Док.ОтражатьВБухгалтерскомУчете = Истина;
	КонецЕсли;
	
	УстановитьДоговорВДокументе(Док);
	
	Док.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;	
	Док.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	Док.Склад 		= АвтоСклад;
	
	Валюта    = Док.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Док.Дата, Новый Структура("Валюта", Валюта));
	
	Док.ВалютаДокумента 		= Валюта;	
	Док.КратностьВзаиморасчетов = Структура.Кратность;
	Док.КурсВзаиморасчетов      = Структура.Курс;	
	
	КодТипаЦены = Число(Эл.ПолучитьАтрибут("PriceType"));
	
	УстановитьТипЦеныВДокументе(КодТипаЦены, Док);
	
	УчитыватьНДС = Число(Эл.ПолучитьАтрибут("UseVAT"));
	Док.УчитыватьНДС = ?(УчитыватьНДС = 1, Истина, Ложь);
		
	Если НЕ ЭтоНовыйДок Тогда
		Док.Товары.Очистить();
		Док.Услуги.Очистить();
	КонецЕсли;
	
	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
 
	Пока Эл.Прочитать() Цикл
		Если Эл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Эл.Имя = "Line" Тогда
				ИдТовара = Новый УникальныйИдентификатор(СокрЛП(Эл.ПолучитьАтрибут("GdsID")));
				
				Если РежимВыгрузкиОстатков = 1 Тогда 
					Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ИдТовара);
					Если Характеристика.ПолучитьОбъект() = Неопределено Тогда
						Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);						
						Характеристика = "";						
					Иначе
						Товар = Характеристика.Владелец;						
					КонецЕсли;									
				ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда   					
					Серия = Справочники.СерииНоменклатуры.ПолучитьСсылку(ИдТовара);
					Если Серия.ПолучитьОбъект() = Неопределено Тогда
						Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);						
						Серия = "";						
					Иначе
						Товар = Серия.Владелец;						
					КонецЕсли;									
				Иначе 
					Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);					
				Конецесли;
				
				Если Товар.Пустая() Тогда					
					ОповеститьОСобытии("Товар с идентификатором: " + СокрЛП(ИдТовара) + " не найден в текущей базе!");
					Продолжить;
				КонецЕсли;
				
				Цена       = Эл.ПолучитьАтрибут("Price");
				Стоимость  = Эл.ПолучитьАтрибут("Sum");
				Количество = Эл.ПолучитьАтрибут("Amnt");
				Скидка 	   = Эл.ПолучитьАтрибут("Dscnt");
				СуммаНДС   = Эл.ПолучитьАтрибут("VAT");
									
				Если Товар.Услуга Тогда
					Стр = Док.Услуги.Добавить();
					Стр.Содержание = Товар.НаименованиеПолное;
				Иначе
					Стр = Док.Товары.Добавить(); 
					
					Если РежимВыгрузкиОстатков = 1 Тогда
						Стр.ХарактеристикаНоменклатуры = Характеристика;
					ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда
						Стр.СерияНоменклатуры = Серия;
					КонецЕсли;
					
					Если ИспЕдИзм Тогда
						UCode = (Эл.ПолучитьАтрибут("UCode")); // код единицы измерения в ТЧ документа в КПК
						UDim  = (Эл.ПолучитьАтрибут("UDim"));  // размерность единицы измерения в ТЧ документа в КПК
						Если UCode = Неопределено Тогда // Скорее всего в КПК не используется режим единиц измерения
							// Тогда устанавливаем ед. хранения остатков
							Единица = Товар.ЕдиницаХраненияОстатков;
							Стр.ЕдиницаИзмерения = Единица;
							Стр.Коэффициент      = ?(Единица.Коэффициент = 0, 1, Единица.Коэффициент);                   
						Иначе	
							Стр.ЕдиницаИзмерения = ПолучитьЕдиницуПоКоду(Товар, Число(UCode));
							Стр.Коэффициент      = UDim;                   
						КонецЕсли;					
					Иначе                                       					
						Единица = ПолучитьБазовуюЕдиницу(Товар);
						Стр.ЕдиницаИзмерения = Единица; // с КПК номенклатура приходит в базовых единицах
						Стр.Коэффициент      = ?(Единица.Коэффициент = 0, 1, Единица.Коэффициент);                   					
					КонецЕсли; 
										
					Стр.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
					Стр.Склад = АвтоСклад;
					
				КонецЕсли;
				
				Стр.Номенклатура 		 = Товар;    							
				Стр.Количество 			 = Количество;
				Стр.Цена 	   			 = Цена; 
				Стр.Сумма 	  			 = Стоимость;
				Стр.ПроцентСкидкиНаценки = Скидка;
				Стр.СтавкаНДС 			 = Товар.СтавкаНДС;
				Стр.СуммаНДС 			 = СуммаНДС;  				
				
			КонецЕсли;
			
		ИначеЕсли Эл.Имя = "Doc" Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Док.СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(Док, "Товары") + 
					     Ценообразование.ПолучитьСуммуДокументаСНДС(Док, "Услуги");
	
	Результат = ЗаписьДокумента(Док, СтруктураДокКПК, ЭтоНовыйДок);
	
	Если Результат = 1 И ЗначениеЗаполнено(НомерСФ) Тогда
	    Возврат СоздатьСчетФактуру(Док, СтруктураДокКПК, НомерСФ);
	ИначеЕсли Результат = 2 Тогда
		СообщитьОПропускеДокумента(СтруктураДокКПК)			 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЗагрузкаРеализации()

Функция ЗагрузкаРеализацииРозничной(Эл, СтруктураДокКПК)
	
	Менеджер 	       = Документы.ОтчетОРозничныхПродажах;	
	Док 			   = Неопределено;	
	ПропуститьЗагрузку = Ложь;	
	
	ЭтоНовыйДок = СоздатьНовыйДокумент(Менеджер, Док, СтруктураДокКПК, ПропуститьЗагрузку);
	
	Если ПропуститьЗагрузку Тогда
		Возврат 2;
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ТорговаяТочка, ДоговорКонтрагента");
	
	ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, Документы.ОтчетОРозничныхПродажах, 
										СтруктураОбязательныхПолей, "Продажа");
	
    Док.Склад 	 = АвтоСклад;
	Док.КассаККМ = ОснКассаККМ;
	
	Док.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
			
	УчитыватьНДС 	 = Число(СокрЛП(Эл.ПолучитьАтрибут("UseVAT")));
	Док.УчитыватьНДС = ?(УчитыватьНДС = 1, Истина, Ложь);  
	
	Если НЕ ЭтоНовыйДок Тогда
		Док.Товары.Очистить();		
	КонецЕсли;
	
	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
	
	Пока Эл.Прочитать() Цикл
		Если Эл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Эл.Имя = "Line" Тогда
				ИдТовара = Новый УникальныйИдентификатор(СокрЛП(Эл.ПолучитьАтрибут("GdsID")));
				
				Если РежимВыгрузкиОстатков = 1 Тогда 
					Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ИдТовара);
					Если Характеристика.ПолучитьОбъект() = Неопределено Тогда
						Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);						
						Характеристика = "";						
					Иначе
						Товар = Характеристика.Владелец;						
					КонецЕсли;									
				ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда   					
					Серия = Справочники.СерииНоменклатуры.ПолучитьСсылку(ИдТовара);
					Если Серия.ПолучитьОбъект() = Неопределено Тогда
						Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);						
						Серия = "";						
					Иначе
						Товар = Серия.Владелец;						
					КонецЕсли;									
				Иначе 
					Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);					
				Конецесли;

				Если Товар.Пустая() Тогда					
					ОповеститьОСобытии("Товар с идентификатором: " + СокрЛП(ИдТовара) + " не найден в текущей базе!");
					Продолжить;
				КонецЕсли;
				Цена 	   = Эл.ПолучитьАтрибут("Price");
				Стоимость  = Эл.ПолучитьАтрибут("Sum");
				Количество = Эл.ПолучитьАтрибут("Amnt");
				Скидка     = Эл.ПолучитьАтрибут("Dscnt");
				СуммаНДС   = Эл.ПолучитьАтрибут("VAT");
				Стр = Док.Товары.Добавить();
				Стр.Номенклатура = Товар;
				Если РежимВыгрузкиОстатков = 1 Тогда
					Стр.ХарактеристикаНоменклатуры = Характеристика;
				ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда
					Стр.СерияНоменклатуры = Серия;
				КонецЕсли;   
				
				Стр.Количество 			 = Количество;
				Стр.Цена 				 = Цена;
				Стр.Сумма 				 = Стоимость;
				Стр.ПроцентСкидкиНаценки = Скидка;
				Стр.СтавкаНДС 			 = Товар.СтавкаНДС;
				Стр.СуммаНДС 			 = СуммаНДС;
				
				Если ИспЕдИзм Тогда
					UCode = (Эл.ПолучитьАтрибут("UCode")); // код единицы измерения в ТЧ документа в КПК
					UDim  = (Эл.ПолучитьАтрибут("UDim"));  // размерность единицы измерения в ТЧ документа в КПК
					Если UCode = Неопределено Тогда // Скорее всего в КПК не используется режим единиц измерения
						// Тогда устанавливаем ед. хранения остатков
						Единица = Товар.ЕдиницаХраненияОстатков;
						Стр.ЕдиницаИзмерения = Единица;
						Стр.Коэффициент      = ?(Единица.Коэффициент = 0, 1, Единица.Коэффициент);                   
					Иначе	
						Стр.ЕдиницаИзмерения = ПолучитьЕдиницуПоКоду(Товар, Число(UCode));
						Стр.Коэффициент      = UDim;                   
					КонецЕсли;
				Иначе                                       					
					Единица = ПолучитьБазовуюЕдиницу(Товар);
					Стр.ЕдиницаИзмерения = Единица; // с КПК номенклатура приходит в базовых единицах
					Стр.Коэффициент      = ?(Единица.Коэффициент = 0, 1, Единица.Коэффициент);                   					
				КонецЕсли; 

			КонецЕсли;
			
		ИначеЕсли Эл.Имя = "Doc" Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Док.СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(Док, "Товары");
		
	Результат = ЗаписьДокумента(Док, СтруктураДокКПК, ЭтоНовыйДок);
	
	Если Результат = 2 Тогда
		СообщитьОПропускеДокумента(СтруктураДокКПК)			 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЗагрузкаРеализацииРозничной()

Функция ЗагрузкаПеремещения(Эл, СтруктураДокКПК)
	
	Менеджер 	       = Документы.ПеремещениеТоваров;	
	Док 			   = Неопределено;	
	ПропуститьЗагрузку = Ложь;	
	
	ЭтоНовыйДок = СоздатьНовыйДокумент(Менеджер, Док, СтруктураДокКПК, ПропуститьЗагрузку);
	
	Если ПропуститьЗагрузку Тогда
		Возврат 2;
	КонецЕсли;
	
	ИДСкладаКПК = СокрЛП(Эл.ПолучитьАтрибут("StoreID"));
	
	ПредставлениеДокВКПК = "Перемещение №: " + Строка(СтруктураДокКПК.Номер) +
						   " от: " + Строка(СтруктураДокКПК.Дата) + "";
	
	Если ЭтоПустойИдентификатор(ИДСкладаКПК) Тогда		
		ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указан склад-отправитель!");
		Возврат 0;
	КонецЕсли;
	
	ИдСклада = Новый УникальныйИдентификатор(ИДСкладаКПК);
	ВидПеремещения = Число(СокрЛП(Эл.ПолучитьАтрибут("MoveType")));
	
	Склад = Справочники.Склады.ПолучитьСсылку(ИдСклада);
	
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, Документы.ПеремещениеТоваров, 
										СтруктураОбязательныхПолей, "");                        
	
	СтОтбор = Новый Структура("Объект", ВыбАгент);	
	Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(СтОтбор);
	Если Выборка.Следующий() Тогда
		АвтоСклад = Выборка.ПередвижнойСклад;
	КонецЕсли;
	
	Если ВидПеремещения = 1 Тогда
		Док.СкладОтправитель = Склад;
		Док.СкладПолучатель = АвтоСклад;
	Иначе
		Док.СкладОтправитель = АвтоСклад;
		Док.СкладПолучатель = Склад;
	КонецЕсли;
	
	Если НЕ ЭтоНовыйДок Тогда
		Док.Товары.Очистить();
	КонецЕсли;
	
	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
 
	Пока Эл.Прочитать() Цикл
		Если Эл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Эл.Имя = "Line" Тогда
				ИдТовара = Новый УникальныйИдентификатор(СокрЛП(Эл.ПолучитьАтрибут("GdsID")));
				
				Если РежимВыгрузкиОстатков = 1 Тогда 
					Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ИдТовара);
					Если Характеристика.ПолучитьОбъект() = Неопределено Тогда
						Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);						
						Характеристика = "";						
					Иначе
						Товар = Характеристика.Владелец;						
					КонецЕсли;									
				ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда   					
					Серия = Справочники.СерииНоменклатуры.ПолучитьСсылку(ИдТовара);
					Если Серия.ПолучитьОбъект() = Неопределено Тогда
						Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);						
						Серия = "";						
					Иначе
						Товар = Серия.Владелец;						
					КонецЕсли;									
				Иначе 
					Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);					
				Конецесли;
 
				Если Товар.Пустая() Тогда					
					ОповеститьОСобытии("Товар с идентификатором: " + СокрЛП(ИдТовара) + " не найден в текущей базе!");
					Продолжить;
				КонецЕсли;
				Цена = Эл.ПолучитьАтрибут("Price");
				Количество = Эл.ПолучитьАтрибут("Amnt");
				Стр = Док.Товары.Добавить();
				Стр.Номенклатура = Товар;
					Если РежимВыгрузкиОстатков = 1 Тогда
					Стр.ХарактеристикаНоменклатуры = Характеристика;
				ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда
					Стр.СерияНоменклатуры = Серия;
				КонецЕсли;  				
				Стр.Количество = Количество;
				Стр.Цена = Цена;
			
				Если ИспЕдИзм Тогда
					UCode = (Эл.ПолучитьАтрибут("UCode")); // код единицы измерения в ТЧ документа в КПК
					UDim  = (Эл.ПолучитьАтрибут("UDim"));  // размерность единицы измерения в ТЧ документа в КПК
					Если UCode = Неопределено Тогда // Скорее всего в КПК не используется режим единиц измерения
						// Тогда устанавливаем ед. хранения остатков
						Единица = Товар.ЕдиницаХраненияОстатков;
						Стр.ЕдиницаИзмерения = Единица;
						Стр.Коэффициент      = ?(Единица.Коэффициент = 0, 1, Единица.Коэффициент);                   
					Иначе	
						Стр.ЕдиницаИзмерения = ПолучитьЕдиницуПоКоду(Товар, Число(UCode));
						Стр.Коэффициент      = UDim;                   
					КонецЕсли;
				Иначе
					Единица = ПолучитьБазовуюЕдиницу(Товар);
					Стр.ЕдиницаИзмерения = Единица; // с КПК номенклатура приходит в базовых единицах
					Стр.Коэффициент      = ?(Единица.Коэффициент = 0, 1, Единица.Коэффициент);                   					
				КонецЕсли;

			КонецЕсли;
		ИначеЕсли Эл.Имя = "Doc" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = ЗаписьДокумента(Док, СтруктураДокКПК, ЭтоНовыйДок);
	
	Если Результат = 2 Тогда
		СообщитьОПропускеДокумента(СтруктураДокКПК)			 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЗагрузкаПеремещения()

Функция ЗагрузкаИнвентаризации(Эл, СтруктураДокКПК)
	
	Менеджер 	       = Документы.ИнвентаризацияТоваровНаСкладе;	
	Док 			   = Неопределено;	
	ПропуститьЗагрузку = Ложь;	
	
	ЭтоНовыйДок = СоздатьНовыйДокумент(Менеджер, Док, СтруктураДокКПК, ПропуститьЗагрузку);
	
	Если ПропуститьЗагрузку Тогда
		Возврат 2;
	КонецЕсли;
	
	ВидИнвентаризации = Число(СокрЛП(Эл.ПолучитьАтрибут("InvType")));
	
	Док.Склад = АвтоСклад;
	
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, Документы.ИнвентаризацияТоваровНаСкладе,
									    СтруктураОбязательныхПолей, "");
	
	Если НЕ ЭтоНовыйДок Тогда
		Док.Товары.Очистить();
	КонецЕсли;
	
	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
	
	Пока Эл.Прочитать() Цикл
		Если Эл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Эл.Имя = "Line" Тогда
				ИдТовара = Новый УникальныйИдентификатор(СокрЛП(Эл.ПолучитьАтрибут("GdsID")));
				
				Если РежимВыгрузкиОстатков = 1 Тогда 
					Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ИдТовара);
					Если Характеристика.ПолучитьОбъект() = Неопределено Тогда
						Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);						
						Характеристика = "";						
					Иначе
						Товар = Характеристика.Владелец;						
					КонецЕсли;									
				ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда   					
					Серия = Справочники.СерииНоменклатуры.ПолучитьСсылку(ИдТовара);
					Если Серия.ПолучитьОбъект() = Неопределено Тогда
						Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);						
						Серия = "";						
					Иначе
						Товар = Серия.Владелец;						
					КонецЕсли;									
				Иначе 
					Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);					
				Конецесли;

				Если Товар.Пустая() Тогда
					ОповеститьОСобытии("Товар с идентификатором: " + СокрЛП(ИдТовара) + " не найден в текущей базе!");
					Продолжить;
				КонецЕсли;
				
				Цена = Эл.ПолучитьАтрибут("Price");
				Стоимость = Эл.ПолучитьАтрибут("Sum");
				Количество = Эл.ПолучитьАтрибут("Amnt");
				КоличествоУчет = Эл.ПолучитьАтрибут("AmntDB");
				Стр = Док.Товары.Добавить();
				Стр.Номенклатура = Товар;
				Если РежимВыгрузкиОстатков = 1 Тогда
					Стр.ХарактеристикаНоменклатуры = Характеристика;
				ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда
					Стр.СерияНоменклатуры = Серия;
				КонецЕсли;  				
				Стр.Количество = Количество;
				Стр.КоличествоУчет = КоличествоУчет;
				Стр.Цена = Цена;
				Стр.Сумма = Стоимость;
				Стр.СуммаУчет = КоличествоУчет * Цена;
				
				Если ИспЕдИзм Тогда
					UCode = (Эл.ПолучитьАтрибут("UCode")); // код единицы измерения в ТЧ документа в КПК
					UDim  = (Эл.ПолучитьАтрибут("UDim"));  // размерность единицы измерения в ТЧ документа в КПК
					Если UCode = Неопределено Тогда // Скорее всего в КПК не используется режим единиц измерения
						// Тогда устанавливаем ед. хранения остатков
						Единица = Товар.ЕдиницаХраненияОстатков;
						Стр.ЕдиницаИзмерения = Единица;
						Стр.Коэффициент      = ?(Единица.Коэффициент = 0, 1, Единица.Коэффициент);                   
					Иначе	
						Стр.ЕдиницаИзмерения = ПолучитьЕдиницуПоКоду(Товар, Число(UCode));
						Стр.Коэффициент      = UDim;                   
					КонецЕсли;

				Иначе
					Единица = ПолучитьБазовуюЕдиницу(Товар);
					Стр.ЕдиницаИзмерения = Единица; // с КПК номенклатура приходит в базовых единицах
					Стр.Коэффициент      = ?(Единица.Коэффициент = 0, 1, Единица.Коэффициент);                   					
				КонецЕсли;

			КонецЕсли;
		ИначеЕсли Эл.Имя = "Doc" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = ЗаписьДокумента(Док, СтруктураДокКПК, ЭтоНовыйДок);
	
	Если Результат = 2 Тогда
		СообщитьОПропускеДокумента(СтруктураДокКПК)			 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЗагрузкаИнвентаризации()

Функция ЗагрузкаМерчендайзинга(Эл, СтруктураДокКПК)
	
	Менеджер 	       = Документы.кпкМерчендайзинг;	
	Док 			   = Неопределено;	
	ПропуститьЗагрузку = Ложь;	
	
	ЭтоНовыйДок = СоздатьНовыйДокумент(Менеджер, Док, СтруктураДокКПК, ПропуститьЗагрузку);
	
	Если ПропуститьЗагрузку Тогда
		Возврат 2;
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ТорговаяТочка");
	
	ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, Документы.кпкМерчендайзинг, 
										СтруктураОбязательныхПолей, "Продажа");
	
	Док.ТипЦен = Док.Контрагент.кпкОсновнойДоговорКонтрагента.ТипЦен;
	
	Если НЕ ЭтоНовыйДок Тогда
		Док.Номенклатура.Очистить();
	КонецЕсли;
	
	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
	
	Пока Эл.Прочитать() Цикл
		Если Эл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Эл.Имя = "Line" Тогда
				ИдТовара = Новый УникальныйИдентификатор(СокрЛП(Эл.ПолучитьАтрибут("GdsID")));
				
				Если РежимВыгрузкиОстатков = 1 Тогда 
					Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ИдТовара);
					Если Характеристика.ПолучитьОбъект() = Неопределено Тогда
						Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);						
						Характеристика = "";						
					Иначе
						Товар = Характеристика.Владелец;						
					КонецЕсли;									
				ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда   					
					Серия = Справочники.СерииНоменклатуры.ПолучитьСсылку(ИдТовара);
					Если Серия.ПолучитьОбъект() = Неопределено Тогда
						Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);						
						Серия = "";						
					Иначе
						Товар = Серия.Владелец;						
					КонецЕсли;									
				Иначе 
					Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);					
				Конецесли;

				Если Товар.Пустая() Тогда					
					ОповеститьОСобытии("Товар с идентификатором: " + СокрЛП(ИдТовара) + " не найден в текущей базе!");
					Продолжить;
				КонецЕсли;
				Цена = Эл.ПолучитьАтрибут("Price");
				Стоимость = Эл.ПолучитьАтрибут("Sum");
				Количество = Эл.ПолучитьАтрибут("Amnt");
				Стр = Док.Номенклатура.Добавить();
				Стр.Номенклатура = Товар;
				Если РежимВыгрузкиОстатков = 1 Тогда
					Стр.ХарактеристикаНоменклатуры = Характеристика;
				ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда
					Стр.СерияНоменклатуры = Серия;
				КонецЕсли; 				
				Стр.Количество = Количество;
				Стр.Цена = Цена;
				Стр.Сумма = Стоимость;
				
				Если ИспЕдИзм Тогда
					UCode = (Эл.ПолучитьАтрибут("UCode")); // код единицы измерения в ТЧ документа в КПК
					UDim  = (Эл.ПолучитьАтрибут("UDim"));  // размерность единицы измерения в ТЧ документа в КПК
					Если UCode = Неопределено Тогда // Скорее всего в КПК не используется режим единиц измерения
						// Тогда устанавливаем ед. хранения остатков
						Единица = Товар.ЕдиницаХраненияОстатков;
						Стр.ЕдиницаИзмерения = Единица;
						Стр.Коэффициент      = ?(Единица.Коэффициент = 0, 1, Единица.Коэффициент);                   
					Иначе	
						Стр.ЕдиницаИзмерения = ПолучитьЕдиницуПоКоду(Товар, Число(UCode));
						Стр.Коэффициент      = UDim;                   
					КонецЕсли;    					
				Иначе
					Единица = ПолучитьБазовуюЕдиницу(Товар);
					Стр.ЕдиницаИзмерения = Единица; // с КПК номенклатура приходит в базовых единицах
					Стр.Коэффициент 	 = ?(Единица.Коэффициент = 0, 1, Единица.Коэффициент);                   					
				КонецЕсли; 
				
			КонецЕсли;
			
			Если Эл.Имя = "Attr" Тогда
				ИДРекв = СокрЛП(Эл.ПолучитьАтрибут("AID"));
				Если ИДРекв = "FKAT_A" Тогда
					Значение = СокрЛП(Эл.ПолучитьАтрибут("Val"));
					Док.ФейсингКатегорииА = Число(Значение);
				КонецЕсли;
				Если ИДРекв = "FKAT_B" Тогда
					Значение = СокрЛП(Эл.ПолучитьАтрибут("Val"));
					Док.ФейсингКатегорииВ = Число(Значение);
				КонецЕсли;
				Если ИДРекв = "FKAT_C" Тогда
					Значение = СокрЛП(Эл.ПолучитьАтрибут("Val"));
					Док.ФейсингКатегорииС = Число(Значение);
				КонецЕсли;
				Если ИДРекв = "FKAT_RP" Тогда
					Значение = СокрЛП(Эл.ПолучитьАтрибут("Val"));
					Док.ФейсингРП = Число(Значение);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Эл.Имя = "Doc" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = ЗаписьДокумента(Док, СтруктураДокКПК, ЭтоНовыйДок);
	
	Если Результат = 2 Тогда
		СообщитьОПропускеДокумента(СтруктураДокКПК)			 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЗагрузкаМерчендайзинга()

Функция ЗагрузкаПоступления(Эл, СтруктураДокКПК)
	
	РежимЗагрузки = Константы.кпкРежимЗагрузкиДокументовПоступления.Получить();
 	
	Менеджер 	       = ?(РежимЗагрузки = 0, Документы.ВозвратТоваровОтПокупателя,  Документы.ПоступлениеТоваровУслуг);	
	Док 			   = Неопределено;	
	ПропуститьЗагрузку = Ложь;	
	
	ЭтоНовыйДок = СоздатьНовыйДокумент(Менеджер, Док, СтруктураДокКПК, ПропуститьЗагрузку);
	
	Если ПропуститьЗагрузку Тогда
		Возврат 2;
	КонецЕсли; 
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ДоговорКонтрагента");
	
	ДокМенеджер = ?(РежимЗагрузки = 0, Документы.ВозвратТоваровОтПокупателя, Документы.ПоступлениеТоваровУслуг);
	
	ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, ДокМенеджер, СтруктураОбязательныхПолей, 
										?(РежимЗагрузки = 0, "Продажа", "Покупка"));
	
	ИДДокОсн = СтруктураДокКПК.ИдДокОсн;
	
	ДокОсн = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	Если ЗначениеЗаполнено(ИДДокОсн) Тогда
		MDocID = Новый УникальныйИдентификатор(ИДДокОсн);
		ДокОсн = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(MDocID);
		Если ДокОсн.ПолучитьОбъект() <> Неопределено Тогда
			ДокОсн = ДокОсн.ПолучитьОбъект();
			ДокОсн.Разблокировать();		
		КонецЕсли;		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(АвтоСклад) Тогда		
		Док.СкладОрдер = АвтоСклад;    
	ИначеЕсли ЗначениеЗаполнено(СведенияАгента.ОсновнойСклад) Тогда		
		Док.СкладОрдер = СведенияАгента.ОсновнойСклад;    
	КонецЕсли;
	
	Док.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	
	Если РежимЗагрузки = 0 Тогда // Документ "Возврат товаров от покупателя"  		
		
		УстановитьДоговорВДокументе(Док);
		
		Если ЗначениеЗаполнено(ДокОсн) Тогда
			Док.ТипЦен = ДокОсн.ДоговорКонтрагента.ТипЦен;
		Иначе
			КодТипаЦены = Число(Эл.ПолучитьАтрибут("PriceType"));	
			УстановитьТипЦеныВДокументе(КодТипаЦены, Док);				 
		КонецЕсли;        		
		
		Если ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
			Док.ВалютаДокумента = Док.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ИначеЕсли НЕ ЗначениеЗаполнено(Док.ВалютаДокумента) Тогда
			Док.ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли; 		
	Иначе // Документ "Поступление товаров и услуг" 
		
		// Ищем договор с поставщиком по тек организации  		
		Отбор     = Новый Структура("Организация", Док.Организация);		
		ВыборкаДог = Справочники.ДоговорыКонтрагентов.Выбрать( , Док.Контрагент, Отбор);		
		Пока ВыборкаДог.Следующий() Цикл
			ТекДог = ВыборкаДог.Ссылка;
			Если ТекДог.ПометкаУдаления Тогда Продолжить; КонецЕсли;
			Если ТекДог.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
				или ТекДог.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда				
				Док.ДоговорКонтрагента = ТекДог;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		Если Не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
			ТекстСообщения = "Не найдено ни одного договора для контрагента: " + СокрЛП(Док.Контрагент) + 
							 ". В документе не будет указан договор! Укажите договор вручную или создайте новый!";
			ОповеститьОСобытии(ТекстСообщения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
			Док.ВалютаДокумента = Док.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Док.ТипЦен          = Док.ДоговорКонтрагента.ТипЦен;						
		ИначеЕсли НЕ ЗначениеЗаполнено(Док.ВалютаДокумента) Тогда
			Док.ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли; 		
   			
	КонецЕсли;
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(Док.ДоговорКонтрагента.ВалютаВзаиморасчетов, Док.Дата);		
	Док.КурсВзаиморасчетов       = СтруктураКурсаВзаиморасчетов.Курс;	
	Док.КратностьВзаиморасчетов  = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Если НЕ ЭтоНовыйДок Тогда
		Док.Товары.Очистить();
		Если РежимЗагрузки <> 0 Тогда
			Док.Услуги.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
	
	СуммаДокумента = 0;
	Пока Эл.Прочитать() Цикл
		Если Эл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Эл.Имя = "Line" Тогда
				ИдТовара = Новый УникальныйИдентификатор(СокрЛП(Эл.ПолучитьАтрибут("GdsID")));
				
				Если РежимВыгрузкиОстатков = 1 Тогда 
					Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ИдТовара);
					Если Характеристика.ПолучитьОбъект() = Неопределено Тогда
						Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);						
						Характеристика = "";						
					Иначе
						Товар = Характеристика.Владелец;						
					КонецЕсли;									
				ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда   					
					Серия = Справочники.СерииНоменклатуры.ПолучитьСсылку(ИдТовара);
					Если Серия.ПолучитьОбъект() = Неопределено Тогда
						Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);						
						Серия = "";						
					Иначе
						Товар = Серия.Владелец;						
					КонецЕсли;									
				Иначе 
					Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);					
				Конецесли;

				Если Товар.Пустая() Тогда
					ТекстСообщения = "Товар с идентификатором: " + СокрЛП(ИдТовара) + " не найден в текущей базе!";
					ОповеститьОСобытии(ТекстСообщения);
					Продолжить;
				КонецЕсли;
				
				Цена       = Число(Эл.ПолучитьАтрибут("Price"));
				Стоимость  = Эл.ПолучитьАтрибут("Sum");
				Количество = Эл.ПолучитьАтрибут("Amnt");
				Скидка 	   = Эл.ПолучитьАтрибут("Dscnt");
				СуммаНДС   = Эл.ПолучитьАтрибут("VAT");
				
				Если РежимЗагрузки <> 0 и Товар.Услуга Тогда // Поступление услуг
					Стр = Док.Услуги.Добавить();
					Стр.Содержание = Товар.НаименованиеПолное;
				Иначе
					Стр = Док.Товары.Добавить();
					Если РежимВыгрузкиОстатков = 1 Тогда
						Стр.ХарактеристикаНоменклатуры = Характеристика;
					ИначеЕсли РежимВыгрузкиОстатков = 2 Тогда
						Стр.СерияНоменклатуры = Серия;
					КонецЕсли; 
					
					Если ИспЕдИзм Тогда
						UCode		 		 = Эл.ПолучитьАтрибут("UCode"); // код единицы измерения в ТЧ документа в КПК
						UDim 				 = Эл.ПолучитьАтрибут("UDim");  // размерность единицы измерения в ТЧ документа в КПК
						Если UCode = Неопределено Тогда // Скорее всего в КПК не используется режим единиц измерения
							// Тогда устанавливаем ед. хранения остатков
							Единица = Товар.ЕдиницаХраненияОстатков;
							Стр.ЕдиницаИзмерения = Единица;
							Стр.Коэффициент      = ?(Единица.Коэффициент = 0, 1, Единица.Коэффициент);                   
						Иначе	
							Стр.ЕдиницаИзмерения = ПолучитьЕдиницуПоКоду(Товар, Число(UCode));
							Стр.Коэффициент      = UDim;                   
						КонецЕсли;    	
					Иначе
						Единица = ПолучитьБазовуюЕдиницу(Товар);
						Стр.ЕдиницаИзмерения = Единица; // с КПК номенклатура приходит в базовых единицах
						Стр.Коэффициент      = ?(Единица.Коэффициент = 0, 1, Единица.Коэффициент);                   					
					КонецЕсли; 
										
				КонецЕсли;		
				
				Стр.Номенклатура = Товар;				
				Стр.Количество   = Количество;
				Стр.Цена 	     = Цена;
				Стр.Сумма 	   	 = Стоимость;
				Стр.СуммаНДС     = СуммаНДС;				
				Стр.СтавкаНДС    = Товар.СтавкаНДС;									
				
				Если РежимЗагрузки = 0 Тогда					
					Стр.Качество 			 = Справочники.Качество.Новый;				
					Стр.ПроцентСкидкиНаценки = Скидка;				
				КонецЕсли;          
								
				// Выполнить общие действия для всех документов при изменении номенклатуры.  
				ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(Стр, Док);				
				
				// Пересчитываем суммы табличных частей
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(Стр, Док);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Стр, Док);
				
			КонецЕсли;
		ИначеЕсли Эл.Имя = "Doc" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Док.СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(Док, "Товары") + 
						 Ценообразование.ПолучитьСуммуДокументаСНДС(Док, "Услуги");
	
	Результат = ЗаписьДокумента(Док, СтруктураДокКПК, ЭтоНовыйДок);
	
	Если Результат = 2 Тогда
		СообщитьОПропускеДокумента(СтруктураДокКПК)			 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЗагрузкаПоступления()

Функция ЗагрузкаПосещений(Эл, СтруктураДокКПК)
	
	Менеджер 	       = Документы.кпкПосещение;	
	Док 			   = Неопределено;	
	ПропуститьЗагрузку = Ложь;	
	
	ЭтоНовыйДок = СоздатьНовыйДокумент(Менеджер, Док, СтруктураДокКПК, ПропуститьЗагрузку);
	
	Если ПропуститьЗагрузку Тогда
		Возврат 2;
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ТорговаяТочка");
	
	ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, Документы.кпкПосещение,
										СтруктураОбязательныхПолей, "Продажа");
	
	Если НЕ ЭтоНовыйДок Тогда
		Док.Вопросы.Очистить();
	КонецЕсли;

	Пока Эл.Прочитать() Цикл
		Если Эл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Эл.Имя = "Attr" Тогда
				ИДРекв = СокрЛП(Эл.ПолучитьАтрибут("AID"));
				Код    = СокрЛП(Эл.ПолучитьАтрибут("Val"));
				Если ИДРекв = "VISIT" Тогда
					Рез = Справочники.кпкРезультатыПосещений.НайтиПоКоду(Код);
					Док.Результат = Рез;
				Иначе
					ИДРекв = Новый УникальныйИдентификатор(ИДРекв);
					Вопр = Справочники.кпкВопросыАнкеты.ПолучитьСсылку(ИДРекв);
					Если Вопр.ПолучитьОбъект() = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Отв = Справочники.кпкОтветыАнкеты.НайтиПоКоду(Код, , Вопр, );
					Стр = Док.Вопросы.Добавить();
					Стр.Вопрос = Вопр;
					Стр.Ответ = Отв;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Эл.Имя = "Doc" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = ЗаписьДокумента(Док, СтруктураДокКПК, ЭтоНовыйДок);
	
	Если Результат = 2 Тогда
		СообщитьОПропускеДокумента(СтруктураДокКПК)			 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЗагрузкаПосещений()

Функция ЗагрузкаОрдеров(Эл, СтруктураДокКПК)
	
	СуммаДок = СтруктураДокКПК.СуммаДок;	
	Тип 	 = ?(СуммаДок > 0 , "ПКО", "РКО");
	
	Менеджер		   = ?(Тип = "ПКО", Документы.ПриходныйКассовыйОрдер, Документы.РасходныйКассовыйОрдер);
	Док 			   = Неопределено;	
	ПропуститьЗагрузку = Ложь;	
	
	ЭтоНовыйДок = СоздатьНовыйДокумент(Менеджер, Док, СтруктураДокКПК, ПропуститьЗагрузку);
	
	Если ПропуститьЗагрузку Тогда
		Возврат 2;
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ДоговорКонтрагента");
	
	ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, ?(Тип = "ПКО" , Документы.ПриходныйКассовыйОрдер, 
										Документы.РасходныйКассовыйОрдер), СтруктураОбязательныхПолей, "");
	
	ТаблицаКасс  = КассыАгента.Получить();
	Если Не ТаблицаКасс = Неопределено Тогда
		НайденнаяСтрока = ТаблицаКасс.Найти(Док.Организация, "Организация");
		Если Не НайденнаяСтрока = Неопределено Тогда
			Док.Касса = НайденнаяСтрока.Касса;
		КонецЕсли;		
	КонецЕсли;    	
	
	Если Не ЗначениеЗаполнено(Док.Касса) Тогда
		Док.Касса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКасса");	
	КонецЕсли;
	
	Док.ВидОперации  				  = ?(Тип = "ПКО", Перечисления.ВидыОперацийПКО.ОплатаПокупателя, 
										Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю);
	Док.ВалютаВзаиморасчетовРаботника = Док.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Док.ВалютаДокумента     	  	  = Док.Касса.ВалютаДенежныхСредств;
	//Док.Оплачено	                  = Истина;
	Док.СуммаДокумента				  = ?(СуммаДок > 0 , СуммаДок, -СуммаДок);
		
	Если Тип = "ПКО" Тогда
		Док.ПринятоОт = Строка(Док.Контрагент);
		Док.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Оплата покупателя");
		Док.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
	Иначе
		Док.Выдать = Строка(Док.Контрагент);
	КонецЕсли;
	
	Док.СчетОрганизации    = Док.Организация.ОсновнойБанковскийСчет;	
	Док.Ответственный      = ТекПользователь;
	
	СтрокаПлатеж = Док.РасшифровкаПлатежа.Добавить();
	
	УправлениеДенежнымиСредствами.ПриИзмененииКонтрагентаВПлатежномДокументе(Док, СтрокаПлатеж); 
	
	УстановитьДоговорВДокументе(Док, СтрокаПлатеж);
	
	СтрокаПлатеж = Док.РасшифровкаПлатежа[0];
	
	СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
	СтрокаПлатеж.СуммаНДС  = Число(Эл.ПолучитьАтрибут("DocVAT"));	
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств; 	
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
		СтрокаПлатеж.Проект = СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;  
	
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж, Док.ВидОперации);
	
	ВалютаПоСтроке = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаПоСтроке, Док.Дата);
	
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Док.КратностьДокумента = 1;
	Док.КурсДокумента 	   = 1;
	
	Док.ПроверкаКурсовВалют(СтрокаПлатеж);

	Если Док.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		ВалютаВзаиморасчетов = Док.ВалютаВзаиморасчетовРаботника;
	Иначе
		ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;

	Если (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (Док.КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
																						   Док.ВалютаДокумента,
			                                                  							   ВалютаВзаиморасчетов, 
																						   Док.КурсДокумента,
																						   СтрокаПлатеж.КурсВзаиморасчетов,
			                                                  							   Док.КратностьДокумента, 
																						   СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	ИДДокОсн = СтруктураДокКПК.ИдДокОсн;
	флЕстьЗаказ = Ложь;
	Если НЕ ПустаяСтрока(ИДДокОсн) Тогда
		MDocID = Новый УникальныйИдентификатор(ИДДокОсн);
		ДокОсн = Документы.ЗаказПокупателя.ПолучитьСсылку(MDocID);
		Если ДокОсн.ПолучитьОбъект() <> Неопределено Тогда
			ДокОсн = ДокОсн.ПолучитьОбъект();
			ДокОсн.Разблокировать();
			флЕстьЗаказ = Истина;
		Иначе
			ДокОсн = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(MDocID);
			Если ДокОсн.ПолучитьОбъект() <> Неопределено Тогда
				ДокОсн = ДокОсн.ПолучитьОбъект();
				ДокОсн.Разблокировать();
			Иначе
				ДокОсн = Документы.ОтчетОРозничныхПродажах.ПолучитьСсылку(MDocID);
				Если ДокОсн.ПолучитьОбъект() <> Неопределено Тогда
					ДокОсн = ДокОсн.ПолучитьОбъект();
					ДокОсн.Разблокировать();
				Иначе
					ДокОсн = Документы.ЗаказПокупателя.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Док.ДокументОснование = ДокОсн.Ссылка;
	КонецЕсли;
	
	ВедениеВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов;
	
	Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом и
		 ТипЗнч(Док.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Док.ДокументОснование;	
	КонецЕсли;
	
	Если ДокОсн <> Неопределено Тогда
		Если ТипЗнч(Док.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			СтрокаПлатеж.Сделка = ДокОсн.Ссылка.Сделка;	
		Иначе
			СтрокаПлатеж.Сделка = ДокОсн.Ссылка;	
		КонецЕсли;
	КонецЕсли;
	
	Результат = ЗаписьДокумента(Док, СтруктураДокКПК, ЭтоНовыйДок);
	
	Если Результат = 2 Тогда
		СообщитьОПропускеДокумента(СтруктураДокКПК)			 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЗагрузкаОрдеров()

Функция ЗагрузкаЗаданий(Эл, СтруктураДокКПК)
	
	Менеджер 	       = Документы.кпкЗаданиеАгента;	
	Док 			   = Неопределено;	
	ПропуститьЗагрузку = Ложь;	
	
	ЭтоНовыйДок = СоздатьНовыйДокумент(Менеджер, Док, СтруктураДокКПК, ПропуститьЗагрузку);
	
	Если ПропуститьЗагрузку Тогда
		Возврат 2;
	КонецЕсли;
	
	Если Док.ОбновитьВКПК Тогда
		Док.ОбновитьВКПК = Ложь;
	КонецЕсли;   
 
	Док.ПоказыватьРезультаты = Истина;
 
	Док.ДатаНачала    = ДатаИзXML(Эл, "TimeBegin");
	Док.ДатаОкончания = ДатаИзXML(Эл, "TimeEnd");
	
	Пока Эл.Прочитать() Цикл
		Если Эл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Эл.Имя = "Line" Тогда	
				
				НаимЗадания = СокрЛП(Эл.ПолучитьАтрибут("Name"));	
				ТипЗадания  = Число(СокрЛП(Эл.ПолучитьАтрибут("Type")));	
				
				Если ТипЗадания = 0 Тогда Продолжить; КонецЕсли;
				
				Задание = Справочники.кпкВидыЗаданий.НайтиПоНаименованию(НаимЗадания);
				
				НайденнаяСтрока = Док.ПереченьЗаданий.Найти(Задание, "Задание");
				Если НайденнаяСтрока = Неопределено Тогда
					ТекстСообщения = "Не найдено задание: """ + НаимЗадания + """ в документе: " + Строка(Док);
					ОповеститьОСобытии(ТекстСообщения);
				    Продолжить;
				КонецЕсли;
				
				СтрРезультат = Эл.ПолучитьАтрибут("Val");
				
				Если ПустаяСтрока(СтрРезультат) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗадания = 1 Тогда // число
					НайденнаяСтрока.Результат = Число(СтрРезультат);
				ИначеЕсли ТипЗадания = 2 Тогда //строка
					НайденнаяСтрока.Результат = СокрЛП(СтрРезультат);
				ИначеЕсли ТипЗадания = 3 Тогда // дата
					НайденнаяСтрока.Результат = ДатаИзXML(Эл, "Val");					
				ИначеЕсли ТипЗадания = 20 Тогда
					НайденнаяСтрока.Результат = ?(СтрРезультат = "1", Истина, Ложь);
				Иначе
					НайденнаяСтрока.Результат = ВернутьНужноеЗначенияЗадания(ТипЗадания, СтрРезультат, Док.Ссылка);															
				КонецЕсли;   								
			КонецЕсли;
		ИначеЕсли Эл.Имя = "Doc" Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
		
	Результат = ЗаписьДокумента(Док, СтруктураДокКПК, Ложь);
	
	Если Результат = 2 Тогда
		СообщитьОПропускеДокумента(СтруктураДокКПК)			 
	КонецЕсли;
	
	Возврат Результат;
     		
КонецФункции //ЗагрузкаЗаданий()    

Процедура ЗагрузкаСпрКлиента(Эл)
	
	Идент = Эл.ПолучитьАтрибут("ObjectID");
	
	ИдКлиента = Новый УникальныйИдентификатор(СокрЛП(Идент));
	Клиент = Справочники.Контрагенты.ПолучитьСсылку(ИдКлиента);
	Если Клиент.ПолучитьОбъект() = Неопределено Тогда
		ЭтоНовый = Истина;		
		НовКлиент = Справочники.Контрагенты;
		Если Не ВыполнитьОперациюДляОбъекта(НовКлиент, "создание") Тогда 			
			ТекстСообщения = "Не удалось создать новый элемент справочника ""Контрагенты""!";
			ОповеститьОСобытии(ТекстСообщения);
			Возврат;			
		КонецЕсли;      		
		НовКлиент.УстановитьСсылкуНового(Клиент);
	Иначе
		ЭтоНовый  = Ложь;
		НовКлиент = Клиент.ПолучитьОбъект();
		НовКлиент.Разблокировать();
	КонецЕсли; 	

	//Статус принимает значения: 1 - элемент в КПК создан, 2 - отредактирован существующий элемент		
	Статус = Число(Эл.ПолучитьАтрибут("RefState"));	
	Наименование = Эл.ПолучитьАтрибут("Name");
	
	Если ЭтоНовый Тогда
		НовКлиент.Родитель 		     = Константы.кпкГруппаНовыхКлиентов.Получить();
		НовКлиент.Покупатель 		 = Истина;
		НовКлиент.ЮрФизЛицо 		 = Перечисления.ЮрФизЛицо.ЮрЛицо; 	
	КонецЕсли;	
	
	НовКлиент.Наименование 		 = Наименование;
	НовКлиент.НаименованиеПолное = ?(Эл.ПолучитьАтрибут("_FNAME") = "", Наименование, Эл.ПолучитьАтрибут("_FNAME"));
	//НовКлиент.КПП 				 = Эл.ПолучитьАтрибут("_KPP");
	НовКлиент.ИНН 				 = Эл.ПолучитьАтрибут("_INN");	
	
	Если Не ВыполнитьОперациюДляОбъекта(НовКлиент, "запись") Тогда 			
		ТекстСообщения = "Не удалось записать нового контрагента в базу!";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
		Возврат;			
	КонецЕсли;
 
	//Создаем договор для нового контрагента
	Если ЭтоНовый Тогда
		Договор = Справочники.ДоговорыКонтрагентов;
		
		Если Не ВыполнитьОперациюДляОбъекта(Договор, "создание") Тогда 			
			ТекстСообщения = "Не удалось создать новый элемент справочника ""Договоры контрагентов""!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат;			
		КонецЕсли;   
		
		ОсновнаяОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
 
		Договор.Наименование 					 = "Основной договор";
		Договор.ДопустимоеЧислоДнейЗадолженности = Число(Эл.ПолучитьАтрибут("Credit"));
		Договор.ВидДоговора 					 = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		Договор.Владелец 						 = НовКлиент.Ссылка;
		Договор.ВалютаВзаиморасчетов 			 = мВалютаРегламентированногоУчета;
		Если Не ЗначениеЗаполнено(Договор.ВалютаВзаиморасчетов) Тогда
			Договор.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		Договор.Организация 					 = ОсновнаяОрганизация;
		Договор.ВедениеВзаиморасчетов 		     = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;		
		
		Если Не ВыполнитьОперациюДляОбъекта(Договор, "запись") Тогда 			
			ТекстСообщения = "Не удалось записать договор для нового контрагента в базу!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат;			
		КонецЕсли;
 
		//Устанавливаем основной договор для контрагента
		НовКлиент.кпкОсновнойДоговорКонтрагента = Договор.Ссылка;
				
		Если Не ВыполнитьОперациюДляОбъекта(НовКлиент, "запись") Тогда 			
			ТекстСообщения = "Не удалось записать нового контрагента в базу!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат;			
		КонецЕсли;
		
	КонецЕсли;	
		
	ЗаписатьВПротоколЗагрузкуЭлемСпр(НовКлиент, ЭтоНовый);
	
КонецПроцедуры //ЗагрузкаСпрКлиента()

Процедура ЗагрузкаСпрТоргТочки(Эл)
	
	Идент   	 = Эл.ПолучитьАтрибут("ObjectID");
	ИдентВл		 = Эл.ПолучитьАтрибут("ParentID");
	Статус  	 = Число(Эл.ПолучитьАтрибут("RefState"));
	Наименование = Эл.ПолучитьАтрибут("Name");
	
	ИдТочки = Новый УникальныйИдентификатор(СокрЛП(Идент));
	ТорговаяТочка = Справочники.кпкТорговыеТочки.ПолучитьСсылку(ИдТочки);
	
	Если ТорговаяТочка.ПолучитьОбъект() = Неопределено Тогда
		
		ЭтоНовый = Истина;
		
		НовТорговаяТочка = Справочники.кпкТорговыеТочки;
		
		Если Не ВыполнитьОперациюДляОбъекта(НовТорговаяТочка, "создание") Тогда 			
			ТекстСообщения = "Не удалось создать новый элемент справочника ""Торговые точки""!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат;			
		КонецЕсли;   
		
		НовТорговаяТочка.УстановитьСсылкуНового(ТорговаяТочка);
		ИдКлиента = Новый УникальныйИдентификатор(СокрЛП(ИдентВл));
		Клиент = Справочники.Контрагенты.ПолучитьСсылку(ИдКлиента);
		Если Клиент.ПолучитьОбъект() = Неопределено Тогда
			ТекстСообщения = "Не найден контрагент с идентификатором: " + СокрЛП(ИдКлиента);
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			
			ТекстСообщения = "Торговая точка: """ + СокрЛП(ИдТочки) + """ не загружена";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат;
		Иначе
			НовТорговаяТочка.Владелец = Клиент.Ссылка;
		КонецЕсли;
	Иначе
		ЭтоНовый = Ложь;
		НовТорговаяТочка = ТорговаяТочка.ПолучитьОбъект();
		НовТорговаяТочка.Разблокировать();
	КонецЕсли;
	
	НовТорговаяТочка.Наименование 		= Наименование;
	НовТорговаяТочка.НаименованиеПолное = Наименование;
	НовТорговаяТочка.Адрес   		    = Эл.ПолучитьАтрибут("Addr");
	НовТорговаяТочка.Телефоны 		    = Эл.ПолучитьАтрибут("Tel");
	
	КодТипа = Число(Эл.ПолучитьАтрибут("_TPTYPE"));
	ТипТочки = Справочники.кпкТипыТорговыхТочек.НайтиПоКоду(КодТипа);
	Если НЕ ТипТочки = Справочники.кпкТипыТорговыхТочек.ПустаяСсылка() Тогда
		НовТорговаяТочка.ТипТочки = ТипТочки;
	КонецЕсли;
	
	// Записываем контактное лицо торговой точки
	НаименованиеКЛ = СокрЛП(Эл.ПолучитьАтрибут("Contact"));
	
	// Проверяем контакное лицо контрагента
	СсылкаКЛ = Справочники.КонтактныеЛица.НайтиПоНаименованию(НаименованиеКЛ);
	
	Если СсылкаКЛ = Справочники.КонтактныеЛица.ПустаяСсылка() Тогда
		ОбъектКЛ = Справочники.КонтактныеЛица.СоздатьЭлемент();
		ОбъектКЛ.Наименование = НаименованиеКЛ;
		ОбъектКЛ.Записать();		
		СсылкаКЛ = ОбъектКЛ.Ссылка;
	КонецЕсли;
	
	СсылкаКЛКонтрагента = Справочники.КонтактныеЛицаКонтрагентов.НайтиПоРеквизиту("КонтактноеЛицо", СсылкаКЛ, , 
																				  НовТорговаяТочка.Владелец);
	Если СсылкаКЛКонтрагента = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка() Тогда
		ОбъектКЛ = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
		ОбъектКЛ.Владелец	    = НовТорговаяТочка.Владелец;
		ОбъектКЛ.Наименование	= НаименованиеКЛ;			
		ОбъектКЛ.КонтактноеЛицо = СсылкаКЛ;			
		ОбъектКЛ.Записать();
		СсылкаКЛКонтрагента = ОбъектКЛ.Ссылка;
	КонецЕсли;
	
	// Теперь проверяем контактное лицо торговой точки
	НайденноеКЛТочки = НовТорговаяТочка.КонтактныеЛица.Найти(СсылкаКЛКонтрагента, "КонтактноеЛицо");
	Если НайденноеКЛТочки = Неопределено Тогда
		НовоеКЛТочки = НовТорговаяТочка.КонтактныеЛица.Добавить();
		НовоеКЛТочки.КонтактноеЛицо = СсылкаКЛКонтрагента;  				
	КонецЕсли;
	
	Если Не ВыполнитьОперациюДляОбъекта(НовТорговаяТочка, "запись") Тогда 			
		ТекстСообщения = "Не удалось записать новую торговую точку в базу!";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
		Возврат;			
	КонецЕсли;
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(НовТорговаяТочка, ЭтоНовый);
	
КонецПроцедуры //ЗагрузкаСпрТоргТочки()

Процедура ЗагрузкаСпрНоменклатуры(Эл)
	
	Идент		 = Эл.ПолучитьАтрибут("ObjectID");
	ИдентВл		 = Эл.ПолучитьАтрибут("ParentID");	
    Статус 		 = Число(Эл.ПолучитьАтрибут("RefState"));
	Наименование = Эл.ПолучитьАтрибут("Name");
	
	ИдГруппы = Новый УникальныйИдентификатор(СокрЛП(ИдентВл));
	Группа   = Справочники.Номенклатура.ПолучитьСсылку(ИдГруппы);	
	ИдТовара = Новый УникальныйИдентификатор(СокрЛП(Идент));
	Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);
	
	Если Товар.ПолучитьОбъект() = Неопределено Тогда
		ЭтоНовый = Истина;		
		
		НовТовар = Справочники.Номенклатура;
		
		Если Не ВыполнитьОперациюДляОбъекта(НовТовар, "создание") Тогда 			
			ТекстСообщения = "Не удалось создать новый элемент справочника ""Номенклатура""!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат;			
		КонецЕсли;   
		
		НовТовар.УстановитьСсылкуНового(Товар);
	Иначе
		ЭтоНовый = Ложь;
		НовТовар = Товар.ПолучитьОбъект();
		НовТовар.Разблокировать();
	КонецЕсли;
	
	БазоваяЕдиница =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяЕдиницаПоКлассификатору");
	Если БазоваяЕдиница = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
		ТекстСообщения = "Не задана основная единица по классификатору для текущего пользователя, товары не загружены!";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
 	
	ВидТовара 		   = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	ВыборкаВидовТовара = Справочники.ВидыНоменклатуры.Выбрать(,,,"Код Возр");
	Если ВыборкаВидовТовара.Следующий() Тогда
		ВидТовара = ВыборкаВидовТовара.Ссылка;
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		НовТовар.Родитель 				 = Группа;	
		НовТовар.Наименование 			 = Наименование;
		НовТовар.ВидНоменклатуры 		 = ВидТовара; 	
		НовТовар.БазоваяЕдиницаИзмерения = БазоваяЕдиница;
	КонецЕсли;
	
	НовТовар.НаименованиеПолное      = Эл.ПолучитьАтрибут("_FNAME");	
	НовТовар.Комментарий	         = СокрЛП(Эл.ПолучитьАтрибут("Comment"));
	НовТовар.НоменклатурнаяГруппа	 = ПолучитьЭлементСправочникаПоКоду(Справочники.НоменклатурныеГруппы, 
																		Эл.ПолучитьАтрибут("Category"));	
	НовТовар.Весовой				 = Булево(Число(Эл.ПолучитьАтрибут("Weight")));
	НовТовар.СтавкаНДС 				 = ПолучитьСтавкуНДСПоЗначению(Эл.ПолучитьАтрибут("VATRate"));
	НовТовар_СтранаПроисхождения     = ПолучитьЭлементСправочникаПоКоду(Справочники.КлассификаторСтранМира, 
																		Эл.ПолучитьАтрибут("_STRANA"));
	Если ЗначениеЗаполнено(НовТовар_СтранаПроисхождения) Тогда
		НовТовар.ВестиУчетПоСериям = Истина;
	КонецЕсли;
	
	Если Не ВыполнитьОперациюДляОбъекта(НовТовар, "запись") Тогда 			
		ТекстСообщения = "Не удалось записать новый элемент справочника ""Номенклатура"" в базу!";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
		Возврат;			
	КонецЕсли;
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(НовТовар, ЭтоНовый);
	
КонецПроцедуры //ЗагрузкаСпрНоменклатуры()

Процедура ЗагрузкаШтрихКодов(Эл)
	
	Идент  = Эл.ПолучитьАтрибут("ObjectID");
	Статус = Число(Эл.ПолучитьАтрибут("RefState"));
	ШтрихКод = Эл.ПолучитьАтрибут("Name");
	Нов = 0;
	
	ИдТов = Новый УникальныйИдентификатор(СокрЛП(Идент));
	Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТов);
	ТоварОбъект = Товар.ПолучитьОбъект();
	
	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();

	Если РежимВыгрузкиОстатков = 2 Тогда
		Разрез = Справочники.СерииНоменклатуры.ПолучитьСсылку(ИдТов);
		СпрСтр = " или Серии номенклатуры";	
		Усл = "СерияНоменклатуры";
	Иначе
		Разрез = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ИдТов);
		СпрСтр = " или Характеристики номенклатуры";
		Усл = "ХарактеристикаНоменклатуры";	
	КонецЕсли; 
	
	РазрезОбъект = Разрез.ПолучитьОбъект();
	
	Если Не РазрезОбъект = Неопределено Тогда
		Товар = РазрезОбъект.Владелец;
	КонецЕсли;
	
	Если ТоварОбъект = Неопределено И РазрезОбъект = Неопределено Тогда	    		
		ТекстСообщения = "Не найден элемент справочника ""Номенклатура""" + СпрСтр + " (идентификатор: " + Идент + ")!";
		ОповеститьОСобытии(ТекстСообщения);
		
		ТекстСообщения = "Штрих-код """ + ШтрихКод + """ не " + ?(Статус = 1, "создан", "обновлен") + "!";
		ОповеститьОСобытии(ТекстСообщения);
		Возврат;
	КонецЕсли;
   	
	СписЕд      = Новый СписокЗначений;
	СпрЕд       = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	ТекЕдиница  = СпрЕд;
	
	ОсновнаяЕдиница = Товар.ЕдиницаХраненияОстатков;
	СписЕд.Добавить(ОсновнаяЕдиница);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕдиницыИзмерения.Коэффициент");
	
	Запрос.УстановитьПараметр("Владелец", Товар);
	
	ВыборкаЕд = Запрос.Выполнить().Выбрать();	
	
	Пока ВыборкаЕд.Следующий() Цикл
		Если ВыборкаЕд.Ссылка = ОсновнаяЕдиница Тогда
			Продолжить; // Чтобы повторно не выгрузить основную единицу
		КонецЕсли; 	
		СписЕд.Добавить(ВыборкаЕд.Ссылка);	
	КонецЦикла;
	
	НомерЕдиницыВСписке = Число(Эл.ПолучитьАтрибут("Unit"));
	РазмерСпис = СписЕд.Количество();
	
	НужнаяЕдиница = СписЕд.Получить(НомерЕдиницыВСписке).Значение;
	
	ТекстУсл = "";
	Если Не РазрезОбъект = Неопределено Тогда
		ТекстУсл  =  " И Штрихкоды." + Усл + " = &Разрез";		
 	КонецЕсли;
	
	ЗапросШК = Новый Запрос("ВЫБРАТЬ
	|	Штрихкоды.Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец = &Владелец
	|	И Штрихкоды.ЕдиницаИзмерения = &ЕдиницаИзмерения
	|	И Штрихкоды.Штрихкод = &Штрихкод" + ТекстУсл);
	
	ЗапросШК.УстановитьПараметр("Владелец", Товар);
	ЗапросШК.УстановитьПараметр("ЕдиницаИзмерения", НужнаяЕдиница);
	ЗапросШК.УстановитьПараметр("Разрез", Разрез);
	ЗапросШК.УстановитьПараметр("Штрихкод", ШтрихКод);
	
	ВыборкаШК = ЗапросШК.Выполнить().Выбрать();
		
	// Есть ШК для этой единицы		
	Если ВыборкаШК.Следующий() Тогда
		ТекстСообщения = "Штрих-код: """ + ШтрихКод + """ уже существует для номенклатуры: " + Товар + "!";
		ОповеститьОСобытии(ТекстСообщения);
		Возврат;				
	КонецЕсли;	
	
	//Статус принимает значения: 1 - элемент в КПК создан, 2 - отредактирован существующий элемент		
	Если Статус = 1 Тогда 
		
		ШК = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		Шк.Качество = Справочники.Качество.Новый;
		ШК.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13; // ставим по умолчанию
		ШК.Владелец = Товар;
		ШК.ЕдиницаИзмерения = НужнаяЕдиница;
		Если Не РазрезОбъект = Неопределено Тогда
			ШК[Усл] = Разрез;	
		КонецЕсли;   				
		ШК.Штрихкод = ШтрихКод;
		
		Если ВыполнитьОперациюДляОбъекта(ШК, "запись") Тогда 			
			ТекстСообщения = "Добавлена новая запись в регистр ""Штрих-коды"" для номенклатуры """ + 
							 Товар + """. Штрих-код """ + ШтрихКод + """";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, Товар.Ссылка);
		Иначе
			ТекстСообщения = "Не удалось добавить новую запись в регистр ""Штрих-коды"" для номенклатуры """ + 
							 Товар + """. Штрих-код """  + ШтрихКод + """)!";
			ОповеститьОСобытии(ТекстСообщения);
			Возврат;			
		КонецЕсли;
	 
	ИначеЕсли Статус = 2 Тогда
		ШК.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13; // ставим по умолчанию
		ШК.Владелец = Товар;
		ШК.ЕдиницаИзмерения = НужнаяЕдиница;
		Если Не РазрезОбъект = Неопределено Тогда
			ШК[Усл] = Разрез;	
		КонецЕсли;   		
		ШК.Прочитать();
		Если ШК.Выбран() Тогда	
			ШК.Штрихкод = ШтрихКод;
		КонецЕсли;
		
		Если ВыполнитьОперациюДляОбъекта(ШК, "запись") Тогда 			
			ТекстСообщения = "Обновлена запись регистра Штрих-кодов для номенклатуры: " + Товар + "(""" + ШтрихКод + """)";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, Товар.Ссылка);
		Иначе
			ТекстСообщения = "Не удалось обновить запись регистра ""Штрих-коды"" для номенклатуры: " + Товар + 
							 "(" "" + ШтрихКод + """)";
			ОповеститьОСобытии(ТекстСообщения);
			Возврат;			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры //ЗагрузкаШтрихКодов()

Функция ЗагрузкаФото(Эл, НужныйТипФото)
	
	 // В этой папке у нас уже содержатся распакованные фото из файла выгрузки
	ПапкаВремФото = КаталогВременныхФайлов() + "Photos1C\";      
	
	Идент	= Эл.ПолучитьАтрибут("ObjectID");
	ТипФото = Число(Эл.ПолучитьАтрибут("ObjectType"));	
	Если ТипФото <> НужныйТипФото Тогда
		Возврат 0;
	КонецЕсли;
	
	ФайлКПК = Эл.ПолучитьАтрибут("FileName");

	Статус 	  = Число(Эл.ПолучитьАтрибут("RefState")); // для фотографий параметр пока зарезервирован
	Коммент	  = СокрЛП(Эл.ПолучитьАтрибут("Comment"));
	ВремяСозд = Эл.ПолучитьАтрибут("TimeCrt");
	
	Найден = Ложь;
	
	Если ТипФото = 1 Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	СведенияДок.КПКДокумент
		|ИЗ
		|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(, ИДДокумента = &ИД) КАК СведенияДок");    							
		
		Запрос.УстановитьПараметр("ИД", СокрЛП(Идент));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			Док = Выборка.КПКДокумент;
		КонецЕсли;
		
		Если Док = Неопределено или Док.Пустая() Тогда
			ТекстСообщения = "Не указан документ в регистре сведений ""Сведения о загруженных документах""" + 
							 " (идентификатор документа: " + Идент + """)!";
			ОповеститьОСобытии(ТекстСообщения);
			
			ТекстСообщения = "Фотография: """ + ФайлКПК + """ не  загружена!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли; 
		
		СтОтборФото = Новый Структура;
		СтОтборФото.Вставить("Док", Док);
		
		ВыборкаФото = Справочники.кпкФотоКДокументам.Выбрать(, , СтОтборФото, );
		Пока ВыборкаФото.Следующий() Цикл
			Если СокрЛП(ВыборкаФото.ФайлКПК) = ФайлКПК Тогда
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;    	
				
	ИначеЕсли ТипФото = 2 Тогда			
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	кпкФотоКДокументам.Ссылка
		|ИЗ
		|	Справочник.кпкФотоКДокументам КАК кпкФотоКДокументам
		|ГДЕ
		|	кпкФотоКДокументам.ФайлКПК = &ФайлКПК
		|	И кпкФотоКДокументам.ИдОбъекта = &ИдОбъекта");
		
		Запрос.УстановитьПараметр("ФайлКПК",   ФайлКПК);
		Запрос.УстановитьПараметр("ИдОбъекта", Идент);
		
		Найден = Не Запрос.Выполнить().Пустой();		
		
	КонецЕсли;
	
	Если Найден Тогда
		ТекстСообщения = "Фотография: """ + ФайлКПК + """ уже была ранее загружена!";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
		Возврат 0;
	Иначе// фото загружается впервые
		
		Спр = Справочники.кпкФотоКДокументам;
		 		
		Если Не ВыполнитьОперациюДляОбъекта(Спр, "создание") Тогда 			
			ТекстСообщения = "Не удалось создать новый элемент справочника ""Фотографии документов""!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат 0;			
		КонецЕсли;    			
		
		
		
		ПолныйПутьФото = ПапкаВремФото + ФайлКПК;
		ФотоСКПК 		  	  = Новый Картинка(ПолныйПутьФото, Ложь);
		ХранилищеКартинки 	  = Новый ХранилищеЗначения(ФотоСКПК, Новый СжатиеДанных(9));
		Спр.ФайлФото 	 	  = ХранилищеКартинки;		
		Спр.Комментарий 	  = Коммент;
		Спр.ДатаВремяСоздания = ДатаИзXML(Эл, "TimeCrt");
		Спр.Док				  = Док;
		Спр.ФайлКПК 	  	  = ФайлКПК;    		
		Спр.Наименование  	  = ФайлКПК;    		
		Спр.ИдОбъекта  	  	  = Идент;   
						
		Если Не ВыполнитьОперациюДляОбъекта(Спр, "запись") Тогда 						
			ОповеститьОСобытии("Не удалось записать элемент справочника ""Фотографии документов""", СтатусСообщения.Важное);
			Возврат 0;			
		КонецЕсли;
		
		// Для документов "Заявка", "Реализация" и "Поступление" записываем еще фото 
		// в справочник "Хранилище дополнительной тинформации" типовой конфигурации	
		Если ТипЗнч(Док) = Тип("ДокументСсылка.ЗаказПокупателя") или  
			ТипЗнч(Док) = Тип("ДокументСсылка.РеализацияТоваровУслуг") или 
			ТипЗнч(Док) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			НовыйОбъект = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
			НовыйОбъект.ВидДанных 	  = Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение;
			НовыйОбъект.Хранилище 	  = Новый ХранилищеЗначения(ФотоСКПК, Новый СжатиеДанных(9));
			НовыйОбъект.Объект    	  = Док.Ссылка;
			НовыйОбъект.ИмяФайла  	  = ФайлКПК;
			НовыйОбъект.Наименование  = ?(Коммент = "", ФайлКПК, Коммент);
			
			Если Не ВыполнитьОперациюДляОбъекта(НовыйОбъект, "запись") Тогда 						
				ОповеститьОСобытии("Не удалось записать элемент справочника ""Хранилище дополнительной информации""", 
								   СтатусСообщения.Важное);
				Возврат 0;			
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(Спр, ?(Найден = 0, Истина, Ложь));
	
	Возврат 1;
	
КонецФункции //ЗагрузкаФото()

// Процедура ЗагрузитьДанные
//
// Параметры:
//  ВхФайл - файл загрузки
//
// Описание:
// 	Процедура загружает данные из файла загрузки
// 
Функция ЗагрузитьДанные(ВхФайл = 0) Экспорт
	
	ФайлЗагрузки = ВхФайл;
	
	ПапкаРаспаковки = КаталогВременныхФайлов();
	
	Если ВРег(Прав(ФайлЗагрузки,3)) = "CRP" Тогда //зашифрованный файл
		//расшифровываем файл
		РасшифрованныйФайл = Лев(ФайлЗагрузки, СтрДлина(ФайлЗагрузки) - 4);
		
		#Если Не Клиент Тогда
			КПКОбъектCrypto.SetCryptPassword(СокрЛП(Константы.кпкКриптоПароль.Получить()));
			Результат = КПКОбъектCrypto.DecryptFile(ФайлЗагрузки, РасшифрованныйФайл);			
		#Иначе
			КПКОбъект.ШифрУстПароль(СокрЛП(Константы.кпкКриптоПароль.Получить()));
			Результат = КПКОбъект.РасшифроватьФайл(ФайлЗагрузки, РасшифрованныйФайл);			
		#КонецЕсли  
		
		Если Результат <> 0 Тогда
			#Если Не Клиент Тогда
				РасшифровкаОшибки = КПКОбъектCrypto.ErrDescription(Результат);				
			#Иначе
				РасшифровкаОшибки = КПКОбъект.ErrDescription(Результат);				
			#КонецЕсли
			ОповеститьОСобытии(РасшифровкаОшибки);
			Возврат 0;
		Иначе
			Попытка
				УдалитьФайлы(ФайлЗагрузки);
			Исключение
				ТекстСообщения = "Не удалось удалить файл загрузки: " + ФайлЗагрузки + " по причине: " + ОписаниеОшибки();																				
				ОповеститьОСобытии(ТекстСообщения);			
			КонецПопытки;					
			ФайлЗагрузки = РасшифрованныйФайл; //файл успешно расшифрован
		КонецЕсли;
	КонецЕсли;   
	
	Если ВРег(Прав(ФайлЗагрузки,3)) = "ZIP" Тогда
		Агент = ВыбАгент;	
		Если Агент = Неопределено Тогда
			Пароль = "";
		Иначе
			СтОтбор = Новый Структура("Объект", Агент);			
			Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(СтОтбор);
			Если Выборка.Следующий() Тогда
				Пароль = СокрП(Выборка.ПарольЗИП);
			Иначе
				Пароль = "";
			КонецЕсли;
		КонецЕсли;		
		
		АрхивФото = ПапкаРаспаковки + "PhotosToCDB.zip";		
		ФайлФото = Новый Файл(АрхивФото);
		Если ФайлФото.Существует() Тогда  
			Попытка
				УдалитьФайлы(ФайлФото);
			Исключение
				ТекстСообщения = "Не удалось удалить файл фото: " + ФайлФото + " по причине: " + ОписаниеОшибки();																
				ОповеститьОСобытии(ТекстСообщения);			
			КонецПопытки;							
		КонецЕсли;
		
		ОчиститьПапкуВременныхФото();   		
		
		#Если Клиент Тогда
			Состояние("Распаковка полученных данных...");
		#КонецЕсли    
		
		ПапкаРаспаковки = КаталогВременныхФайлов();
		
		#Если Не Клиент Тогда
			КПКОбъектZip.SetPassword(Пароль);
			Результат = КПКОбъектZip.UnPack(ФайлЗагрузки, ПапкаРаспаковки);			
		#Иначе
			КПКОбъект.АрхУстПароль(Пароль);
			Результат = КПКОбъект.АрхРаспаковать(ФайлЗагрузки, ПапкаРаспаковки);			
		#КонецЕсли
		
		Если Результат <> 0 Тогда
			#Если Не Клиент Тогда
				РасшифровкаОшибки = КПКОбъектZip.ErrDescription(Результат);				
			#Иначе
				РасшифровкаОшибки = КПКОбъект.CeErrDescription(Результат);								
			#КонецЕсли   			
			ОповеститьОСобытии("Ошибка распаковки архива из мобильного устройства! " + РасшифровкаОшибки, 
							   СтатусСообщения.Важное);
			СохранитьТаблицуЛогаВНастройкахПользователя();
			Возврат 0;
		КонецЕсли;
		
		ДополнитьСлешВПуть(ПапкаРаспаковки);
		
		ФайлЗагрузки = ПапкаРаспаковки + ?(МобильноеПриложение = ТипАгентМТ, "ToCDB.xml", "To1C.xml");
		ФайлXML = Новый Файл(ФайлЗагрузки);
		Если НЕ ФайлXML.Существует() Тогда
			ФайлЗагрузки = ПапкаРаспаковки + ?(МобильноеПриложение = ТипАгентМТ,  "ToCBD.xml", "To1C.xml");
			ФайлXML = Новый Файл(ФайлЗагрузки);
		КонецЕсли;
		Если НЕ ФайлXML.Существует() Тогда
			ОповеститьОСобытии("В файле архива мобильного устройства не найдено файлов для загрузки в требуемом формате!");
			СохранитьТаблицуЛогаВНастройкахПользователя();
			Возврат 0;
		КонецЕсли;
			
		ПапкаВремФото = ПапкаРаспаковки + "Photos1C\";
		
		Если Не кпкАгентПлюс.ПроверитьСуществованиеКаталога(ПапкаВремФото) Тогда
			СоздатьКаталог(ПапкаВремФото);			
		КонецЕсли;
		
		Если ФайлФото.Существует() Тогда // значит в архиве с файлом загрузки был и архив фотографий
			ОповеститьОСобытии("Файл загрузки содержит архив фотографий", СтатусСообщения.Информация);
			
			#Если Не Клиент Тогда
				КПКОбъектZip.SetPassword("");
				Результат = КПКОбъектZip.UnPack(АрхивФото, ПапкаВремФото);				
			#Иначе
				КПКОбъект.АрхУстПароль("");
				Результат = КПКОбъект.АрхРаспаковать(АрхивФото, ПапкаВремФото);				
			#КонецЕсли
			
			Если Результат <> 0 Тогда
				
				#Если Не Клиент Тогда
					КПКОбъектZip.SetPassword(Пароль);
					Результат = КПКОбъектZip.UnPack(АрхивФото, ПапкаВремФото);				
				#Иначе
					КПКОбъект.АрхУстПароль(Пароль);
					Результат = КПКОбъект.АрхРаспаковать(АрхивФото, ПапкаВремФото);				
				#КонецЕсли   					
				
				Если Результат <> 0 Тогда
					ОповеститьОСобытии("Ошибка распаковки архива фотографий: " + АрхивФото, СтатусСообщения.Важное);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтветнаяВыгрузка = Истина;
		
	АрхивТрека = Новый Файл(ПапкаРаспаковки + "gpstrack.zip");
	
	ФайлЗагрузкиНаДиске = Новый Файл(ФайлЗагрузки);
	Если ФайлЗагрузкиНаДиске.Существует() Тогда
		// Если поступили новые данные только по треку перемещения
		Если ФайлЗагрузкиНаДиске.Имя = "gpstrack.txt" Тогда
			ФайлТрека = ФайлЗагрузкиНаДиске;
			// При загрузке треков не нужно отвечать
			ОтветнаяВыгрузка = Ложь;
			Перейти ~М1;
		КонецЕсли;
	Иначе
		ОповеститьОСобытии("Не найдено файлов загрузки от мобильного устройства в папке " + ПапкаРаспаковки + "!", 
						   СтатусСообщения.Важное);
		СохранитьТаблицуЛогаВНастройкахПользователя();
		Возврат 0;
	КонецЕсли;		
	
	ФайлТрека =  Новый Файл(ПапкаРаспаковки + "gpstrack.txt"); 
	
	Если АрхивТрека.Существует() Тогда // Найден архив с файлом трека перемещений
		
		ИмяАрхива = АрхивТрека.ПолноеИмя;
		
		#Если Не Клиент Тогда			
			РезультатТрека = КПКОбъектZip.UnPack(ИмяАрхива, ПапкаРаспаковки);			
		#Иначе
			РезультатТрека = КПКОбъект.АрхРаспаковать(ИмяАрхива, ПапкаРаспаковки);			
		#КонецЕсли
		
		Если РезультатТрека <> 0 Тогда
			ОповеститьОСобытии("Ошибка распаковки архива с треками: " + ИмяАрхива, СтатусСообщения.Важное);
		Иначе
			Попытка
				УдалитьФайлы(АрхивТрека.ПолноеИмя);
			Исключение
				ТекстСообщения = "Не удалось удалить файл трека: " + АрхивТрека.ПолноеИмя + " по причине: " + ОписаниеОшибки();												
				ОповеститьОСобытии(ТекстСообщения);			
			КонецПопытки;							
		КонецЕсли;	
		
		Если Не ФайлТрека.Существует() Тогда			
			ОповеститьОСобытии("В архиве с треками не найден файл для загрузки!", СтатусСообщения.Важное);
		КонецЕсли; 
		
	КонецЕсли; 
	
	#Если Клиент Тогда
		Состояние("Загрузка данных...");
	#КонецЕсли    
	
	Если МобильноеПриложение = ТипАгентМТ Тогда
		XMLЗагрузитьДанныеМобильнаяТорговля(ФайлЗагрузки);                                             		
	Иначе                                                                                              		
		XMLЗагрузитьДанные(ФайлЗагрузки);                                                              		
	КонецЕсли; 
	
	ФайлЗагрузкиНаДиске = Новый Файл(ФайлЗагрузки);
	Если ФайлЗагрузкиНаДиске.Существует() Тогда
		Попытка
			УдалитьФайлы(ФайлЗагрузки);
		Исключение
			ТекстСообщения = "Не удалось удалить файл загрузки: " + ФайлЗагрузки + " по причине: " + ОписаниеОшибки();							
			ОповеститьОСобытии(ТекстСообщения);			
		КонецПопытки;			
	КонецЕсли;    	
	
	~М1:
	
	Если ФайлТрека.Существует() Тогда
		#Если Клиент Тогда
			Состояние("Загрузка данных трека перемещений....");
		#КонецЕсли	
		ЗагрузкаДанныхТрека(ФайлТрека.ПолноеИмя); 		
		Попытка
			УдалитьФайлы(ФайлТрека.ПолноеИмя);
		Исключение
			ТекстСообщения = "Не удалось удалить файл трека: " + ФайлТрека.ПолноеИмя + " по причине: " + ОписаниеОшибки();				
			ОповеститьОСобытии(ТекстСообщения);			
		КонецПопытки;				
	КонецЕсли;
	
	Если АрхивТрека.Существует() Тогда
		Попытка
			УдалитьФайлы(АрхивТрека.ПолноеИмя);
		Исключение
			ТекстСообщения = "Не удалось удалить файл трека: " + АрхивТрека.ПолноеИмя + " по причине: " + ОписаниеОшибки();
			ОповеститьОСобытии(ТекстСообщения);			
		КонецПопытки;							
	КонецЕсли;
	
	// Всегда формируем ответную выгрузку	
	Если ОтветнаяВыгрузка Тогда
		#Если Клиент Тогда
			Состояние("Выгрузка ответных данных...");	
		#КонецЕсли
		ОповеститьОСобытии("Выгрузка ответных данных...", СтатусСообщения.Информация);
		ВыгрузитьДанные(Истина);		
	КонецЕсли;
	
	#Если Клиент Тогда	
		Состояние("");
	#КонецЕсли
	
	СохранитьТаблицуЛогаВНастройкахПользователя();
	
	Возврат 1;
	
КонецФункции //ЗагрузитьДанные()
        
Процедура XMLЗагрузитьДанные(ФайлЗагрузки)
	
	XML_Документ = Новый ЧтениеXML;
	XML_Документ.ОткрытьФайл(ФайлЗагрузки);
	
	КолФото = 0;
	
	XML_Документ.ОткрытьФайл(ФайлЗагрузки);
	Пока XML_Документ.Прочитать() Цикл
		Если XML_Документ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если XML_Документ.Имя = "AgentPlus" Тогда
				Agent = XML_Документ.ПолучитьАтрибут("Agent");
				AgentID = XML_Документ.ПолучитьАтрибут("AgentID");
				Если ПустаяСтрока(AgentID) Тогда
					ОповеститьОСобытии("У агента в файле загрузки указан пустой идентификатор");
					Возврат;
				КонецЕсли;
				АгентИД = Новый УникальныйИдентификатор(СокрЛП(AgentID));
				Агент = Справочники.ФизическиеЛица.ПолучитьСсылку(АгентИД);
				Если Агент.ПолучитьОбъект() = Неопределено Тогда
					ОповеститьОСобытии("Не найден агент с идентификатором: " + Строка(АгентИД));
					Возврат;
				КонецЕсли;
				ВыбАгент = Агент;
			КонецЕсли;
                       			
			Если XML_Документ.Имя = "Ref" Тогда
				Операция = XML_Документ.ПолучитьАтрибут("RefType");
				Если Операция = "Photos" Тогда
					// Загружаем фото, которые были сделаны для документов задания
					#Если Клиент Тогда
					Состояние("Загрузка фотографий для заданий...");
					#КонецЕсли
					ЗагрузкаФото(XML_Документ, 2);
					КолФото = КолФото + 1;    					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	XML_Документ.ОткрытьФайл(ФайлЗагрузки);    
	Пока XML_Документ.Прочитать() Цикл
		
		Если XML_Документ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда      			
					
			Если XML_Документ.Имя = "Query" Тогда
				Код = СокрЛП(XML_Документ.ПолучитьАтрибут("QType"));
								
				СпрЗапросы = Справочники.кпкЗапросы;
				СпрЗапросыАгентов = Справочники.кпкЗапросыАгентов;
				Если НЕ ПустаяСтрока(Код) Тогда
					Запрос = СпрЗапросы.НайтиПоКоду(Код);
				Иначе
					Продолжить;
				КонецЕсли;
				
				НужныйЗапрос = СпрЗапросыАгентов.НайтиПоРеквизиту("Запрос", Запрос, ,ВыбАгент);
				Если НужныйЗапрос = СпрЗапросыАгентов.ПустаяСсылка() Тогда
					ТекЗапросАгента = СпрЗапросыАгентов;
					Если Не ВыполнитьОперациюДляОбъекта(ТекЗапросАгента, "создание") Тогда 			
						ТекстСообщения = "Не удалось создать новый элемент справочника ""Запросы агентов""!";
						ОповеститьОСобытии(ТекстСообщения);
						Продолжить;			
					КонецЕсли;   
					ТекЗапросАгента.Владелец = ВыбАгент;
					ТекЗапросАгента.Запрос   = Запрос;
				Иначе
					ТекЗапросАгента = НужныйЗапрос.ПолучитьОбъект();
				КонецЕсли;
					
				Если Не ТекЗапросАгента.Активен Тогда
					ТекЗапросАгента.Активен = Истина;					
				КонецЕсли;
				
				Если ВыполнитьОперациюДляОбъекта(ТекЗапросАгента, "запись") Тогда
					ОтветитьНаЗапрос = Истина;					
				Иначе
					ТекстСообщения = "Не удалось прочитать запрос для агента: " + ВыбАгент + ". Ответ на запрос не будет выполнен!";
					ОповеститьОСобытии(ТекстСообщения);
				КонецЕсли;
				
			КонецЕсли;
			
			Если XML_Документ.Имя = "Ref" Тогда
				Операция = XML_Документ.ПолучитьАтрибут("RefType");
				Если Операция = "Client" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка клиентов...");
					#КонецЕсли
					ЗагрузкаСпрКлиента(XML_Документ);
				ИначеЕсли Операция = "TPoint" Тогда
					Если ИспТочек Тогда
						#Если Клиент Тогда
						Состояние("Загрузка торговых точек...");
						#КонецЕсли
						ЗагрузкаСпрТоргТочки(XML_Документ);
					КонецЕсли;
				ИначеЕсли Операция = "Price" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка номенклатуры...");
					#КонецЕсли
					ЗагрузкаСпрНоменклатуры(XML_Документ);
				ИначеЕсли Операция = "BarCode" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка штрих-кодов...");
					#КонецЕсли
					ЗагрузкаШтрихКодов(XML_Документ);			
				КонецЕсли;
			ИначеЕсли XML_Документ.Имя = "Doc" Тогда
				
				DocState = XML_Документ.ПолучитьАтрибут("DocState");
				Если Число(DocState) <> 1 Тогда
					Продолжить;
				КонецЕсли;
				
				Операция = XML_Документ.ПолучитьАтрибут("DocType");
				
				СтруктураПараметровДокумента = ПолучитьСтруктуруПараметровДокументаВКПК(XML_Документ);
				
				СформироватьТаблицуВыгружаемыхТиповЦен();
				
				Если Операция = "Order" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка заявок...");	
					#КонецЕсли
					Если ЗагрузкаЗаявок(XML_Документ, СтруктураПараметровДокумента) = 2 Тогда						
						Продолжить;					
					КонецЕсли;					
				ИначеЕсли Операция = "Visit" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка посещений...");
					#КонецЕсли
					Если ЗагрузкаПосещений(XML_Документ, СтруктураПараметровДокумента) = 2 Тогда						
						Продолжить;
					КонецЕсли;
				ИначеЕсли Операция = "Cash" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка ордеров...");
					#КонецЕсли
					Если ЗагрузкаОрдеров(XML_Документ,СтруктураПараметровДокумента) = 2 Тогда						
						Продолжить;
					КонецЕсли;
				ИначеЕсли Операция = "Sale" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка реализации...");
					#КонецЕсли
					Если ЗагрузкаРеализации(XML_Документ, СтруктураПараметровДокумента) = 2 Тогда						
						Продолжить;
					КонецЕсли;
				ИначеЕсли Операция = "RSale" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка реализации розничной...");
					#КонецЕсли
					Если ЗагрузкаРеализацииРозничной(XML_Документ, СтруктураПараметровДокумента) = 2 Тогда						
						Продолжить;
					КонецЕсли;
				ИначеЕсли Операция = "Arrival" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка поступлений...");
					#КонецЕсли
					Если ЗагрузкаПоступления(XML_Документ, СтруктураПараметровДокумента) = 2 Тогда						
						Продолжить;
					КонецЕсли;
				ИначеЕсли Операция = "Merch" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка мерчендайзинга...");
					Если ЗагрузкаМерчендайзинга(XML_Документ, СтруктураПараметровДокумента) = 2 Тогда						
						Продолжить;
					КонецЕсли;
					#КонецЕсли
				ИначеЕсли Операция = "Move" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка перемешений...");
					#КонецЕсли
					Если ЗагрузкаПеремещения(XML_Документ, СтруктураПараметровДокумента) = 2 Тогда						
						Продолжить;
					КонецЕсли;
				ИначеЕсли Операция = "Inventory" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка инвентаризации...");
					#КонецЕсли
					Если ЗагрузкаИнвентаризации(XML_Документ, СтруктураПараметровДокумента) = 2 Тогда						
						Продолжить;
					КонецЕсли;
				ИначеЕсли Операция = "Task" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка заданий...");
					#КонецЕсли
					Если ЗагрузкаЗаданий(XML_Документ, СтруктураПараметровДокумента) = 2 Тогда						
						Продолжить;
					КонецЕсли;  
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 	
	
	XML_Документ.ОткрытьФайл(ФайлЗагрузки);
	Пока XML_Документ.Прочитать() Цикл
		Если XML_Документ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если XML_Документ.Имя = "Ref" Тогда
				Операция = XML_Документ.ПолучитьАтрибут("RefType");
				Если Операция = "Photos" Тогда
					// Остальные фото загружаем только после загрузки документов, 
					// т.к. фото могут ссылаться на загружаемые документы
					#Если Клиент Тогда
					Состояние("Загрузка фотографий...");
					#КонецЕсли
					ЗагрузкаФото(XML_Документ, 1);
					КолФото = КолФото + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Из файла были загружены ссылки на фотографии и сами фотографии, нужно удалить файлы из временной папки
	Если КолФото <> 0 Тогда 
		ОчиститьПапкуВременныхФото();		
	КонецЕсли;
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
КонецПроцедуры // ЗагрузитьДанные()

// Функция СформироватьФайлВыгрузкиДляКПК
//
// Параметры:
//  ОтветнаяВыгрузка - признак формирвоания ответной выгрузки в МУ
//
// Описание:
// 	Функция формирует файл выгрузки для мобильного устройства.
// 	Функция единая и используется как для приложения Агент+ 1.5, так и для Агент Плюс: Мобильная торговля
//
Функция СформироватьФайлВыгрузкиДляКПК(ОтветнаяВыгрузка) Экспорт
	
	ПриИзмененииАгента(ВыбАгент);
	
	СписНеНайденныхТиповЦен.Очистить();
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Вывод = ИспользованиеВывода.Разрешить;
	Текст.УстановитьТипФайла(КодировкаТекста.UTF16);
	
	стрБаза = СокрЛП(Константы.КпкНазваниеБД.Получить());
	Если стрБаза <> "" Тогда
		стрБаза = Т_ + стрБаза;
	КонецЕсли;
	
	КолФото   = 0;
	КолФотоМТ = 0;
	
	Текст.ДобавитьСтроку("agentp_data" + Т_ + "to_ppc" + стрБаза);
	Текст.ДобавитьСтроку("// Файл выгрузки для отправки в КПК");
	
	Если ОтветитьНаЗапрос Тогда  	
		ОповеститьОСобытии("Выгрузка ответа на запрос...", СтатусСообщения.Информация);
		ВыгрузкаЗапросов();
		Если Не МобильноеПриложение = ТипАгентМТ Тогда
			ВыгрузкаПодтверждений();
			ВыгрузкаСистемныхКонстант(0, Истина);
		КонецЕсли;
	ИначеЕсли ОтветнаяВыгрузка Тогда		
		Если МобильноеПриложение = ТипАгентМТ Тогда
			ВыгрузитьПодтверждения(Истина);
		Иначе 			
			ВыгрузкаПодтверждений();
			ВыгрузкаСистемныхКонстант(0, Истина);
		КонецЕсли;
	Иначе // Обычная выгрузка данных, вызывается в том числе по кнопке "Выгрузить"     		
		
		Если ВидВыгрузки = 1 или ВидВыгрузки = 2 Тогда
			
			Если МобильноеПриложение = ТипАгентМТ Тогда
				СформироватьФайВыгрузкиДляМобильнойТорговли();
			Иначе
				ВыгрузкаСистемнойКонстантыСпискаТиповЦен();
				
				#Если Клиент Тогда
					Состояние("Заполнение списка клиентов...");
				#КонецЕсли
				кпкАгентПлюс.СформироватьСписокКлиентовАгентов(ВыбАгент, ПланПосещений, сзКлиентыАгента, 
															   сзТоргТочкиАгента, ТаблицаДоговоровАгента);			      	
				
				#Если Клиент Тогда
					Состояние("Выгрузка структуры таблиц...");
				#КонецЕсли
				ВыгрузкаСтруктурТаблиц();			
				
				#Если Клиент Тогда
					Состояние("Выгрузка перечислений...");
				#КонецЕсли
				ВыгрузкаПеречислений();  			
				
				#Если Клиент Тогда
					Состояние("Выгрузка скидок...");
				#КонецЕсли
				ВыгрузкаСкидок();
				
				#Если Клиент Тогда
					Состояние("Выгрузка фирм...");
				#КонецЕсли
				ВыгрузкаФирм();
				
				#Если Клиент Тогда
					Состояние("Выгрузка маршрутов...");
				#КонецЕсли
				ВыгрузкаМаршрутов();
				
				#Если Клиент Тогда
					Состояние("Выгрузка контрагентов...");
				#КонецЕсли
				ВыгрузкаКлиентов();
				
				Если ИспТочек Тогда
					#Если Клиент Тогда
						Состояние("Выгрузка торговых точек...");
					#КонецЕсли
					ВыгрузкаТорговыхТочек();                   
				КонецЕсли;
				
				Если Константы.кпкИспользоватьДоговоры.Получить() Тогда
					#Если Клиент Тогда
						Состояние("Выгрузка договоров...");
					#КонецЕсли
					ВыгрузкаДоговоров();
				КонецЕсли;
				
				#Если Клиент Тогда       				
					Состояние("Выгрузка складов...");
				#КонецЕсли
				ВыгрузкаСкладов();
				
				#Если Клиент Тогда
					Состояние("Выгрузка взаиморасчетов...");
				#КонецЕсли
				ВыгрузкаВзаиморасчетов(); 			
				
				#Если Клиент Тогда
					Состояние("Выгрузка расходных накладных...");
				#КонецЕсли
				Если РеализацияПоЗаявкам = 3 Тогда
					ВыгрузкаРасходныхНакладныхПоРегиструСсылок();
				Иначе
					ВыгрузкаРасходныхНакладных();
				КонецЕсли;
				
				#Если Клиент Тогда
					Состояние("Выгрузка перемещений...");
				#КонецЕсли
				ВыгрузкаПеремещений();
				
				#Если Клиент Тогда
					Состояние("Выгрузка персональных цен...");
				#КонецЕсли
				ВыгрузкаПерсональныхЦен();	
				
				Если Константы.кпкИспользоватьПланыПродаж.Получить() Тогда
					#Если Клиент Тогда
						Состояние("Выгрузка планов продаж...");
					#КонецЕсли
					ВыгрузкаПлановПродаж();	
				КонецЕсли;
				
				#Если Клиент Тогда
					Состояние("Выгрузка номенклатуры...");
				#КонецЕсли
				ВыгрузкаНоменклатуры();
				
				#Если Клиент Тогда
					Состояние("Выгрузка инвентаризаций...");
				#КонецЕсли
				ВыгрузкаИнвентаризаций();			
								
				#Если Клиент Тогда
					Состояние("Выгрузка истории продаж...");
				#КонецЕсли
				ВыгрузкаИсторииПродаж();    			
				
				#Если Клиент Тогда
					Состояние("Выгрузка дополнительных данных...");
				#КонецЕсли
				ВыгрузкаНумераторов();			
				ВыгрузкаСтартовыхНомеровНумераторов();
				ВыгрузкаОписанийСкриптовОтчетов();
				ВыгрузкаОписанийСкриптовПечати();
				ВыгрузкаСкриптов();
				ВыгрузкаОписанийКартинокТоваров(КолФото);
				ВыгрузкаПодтверждений();
				ВыгрузкаФото();
				ВыгрузкаКоманд();
				ВыгрузкаСистемныхКонстант(КолФото);		
				
				#Если Клиент Тогда
					Состояние("Выгрузка матриц товаров...");  			
				#КонецЕсли
				ВыгрузкаМатрицТоваров();  			
				
				#Если Клиент Тогда
					Состояние("Выгрузка сообщений для агента..."); 
				#КонецЕсли
				ВыгрузкаСообщенийДляАгента(Истина);
				ВыгрузкаСообщенийДляАгента(Ложь);
				Если флВыгружатьЗадания Тогда
					#Если Клиент Тогда
						Состояние("Выгрузка заданий...");  	
					#КонецЕсли
					ВыгрузкаЗаданийДляАгента();	
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВидВыгрузки = 3 Тогда	
			#Если Клиент Тогда
				Состояние("Выгрузка истории продаж...");
			#КонецЕсли
			кпкАгентПлюс.СформироватьСписокКлиентовАгентов(ВыбАгент, ПланПосещений, сзКлиентыАгента, 
														   сзТоргТочкиАгента, ТаблицаДоговоровАгента);			
			Ассортимент = РегистрыСведений.кпкСведенияАгента.Получить(Новый Структура("Объект", ВыбАгент)).Ассортимент;			
			сзАссортимент.ЗагрузитьЗначения(Ассортимент.ТАссортимент.ВыгрузитьКолонку("Номенклатура"));
			ВыгрузкаИсторииПродаж();
			ВыгрузкаСистемныхКонстант();
		ИначеЕсли ВидВыгрузки = 4 Тогда
			#Если Клиент Тогда
				Состояние("Выгрузка запросов...");
			#КонецЕсли
			ВыгрузкаЗапросов();
			ВыгрузкаСистемныхКонстант(0, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
	Каталог = СокрЛП(Константы.КаталогДополнительнойИнформации.Получить());
	
	Если Не (ЗначениеЗаполнено(Каталог) и кпкАгентПлюс.ПроверитьСуществованиеКаталога(Каталог)) Тогда		
		Каталог = КаталогВременныхФайлов();		
	КонецЕсли;
	
	ДополнитьСлешВПуть(Каталог);
	
	Если ВидВыгрузки = 3 Тогда		
		ИмяФайла = Каталог + "hist" + Строка(ВыбАгент.Код) + ?(МобильноеПриложение = ТипАгентМТ, ".xml", ".dat");
	Иначе
		Если Не МобильноеПриложение = ТипАгентМТ Тогда
			ИмяФайла = Каталог + Строка(ВыбАгент.Код) + ?(МобильноеПриложение = ТипАгентМТ, ".xml", ".dat");
		КонецЕсли;
	КонецЕсли; 	
	
	Если Не МобильноеПриложение = ТипАгентМТ Тогда
		Текст.Записать(ИмяФайла, КодировкаТекста.UTF16);
	КонецЕсли;  
	
	Если флАрхив Тогда
		
		#Если Клиент Тогда
			Состояние("Упаковка...");
		#КонецЕсли
				
		СтрАрхивКартинок = "";		
		Если флВыгружатьКартинкиВКПК Тогда
			Если КолФото > 0 Или КолФотоМТ > 0 Тогда
				// Добавляем в архив картинки товаров
				КаталогКартинок = КаталогВременныхФайлов() + "PhotosFrom1C\";
				Если ЗначениеЗаполнено(КаталогКартинок) Тогда					
					ПолныйПутьКАрхиву = КаталогКартинок + "GoodsPhotosFromCDB.zip";
					НужныйФайлАрхиваНаДиске = Новый Файл(ПолныйПутьКАрхиву);
					Если НужныйФайлАрхиваНаДиске.Существует() Тогда
						СтрАрхивКартинок = Т_+ "GoodsPhotosFromCDB.zip" + Т_ + ПолныйПутьКАрхиву
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
		Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПутьИмяАрхива = Лев(ИмяФайла, СтрДлина(ИмяФайла) - 3) + "zip"; //файл вида <Код агента>.zip
		ИмяВАрхиве = ?(МобильноеПриложение = ТипАгентМТ, "FromCDB", "From1C") + "." + Прав(ИмяФайла, 3);	
		
		Пароль = СокрП(ПарольЗИП);      // А+ (релиз 15, 08.12.04)
		
		СтрПутьФайлаНастроек = "";
		
		// Включаем в архив файла выгрузки также файл настроек "config.reg",
		// если таковой найден в папке агента для СОД
		Если Не МобильноеПриложение = ТипАгентМТ Тогда
			ПутьФайлаНастроек = Каталог + "config.reg";
			ФайлНастроекНаДиске = Новый Файл(ПутьФайлаНастроек);
			Если ФайлНастроекНаДиске.Существует() Тогда
				СтрПутьФайлаНастроек = Т_+ "config.reg" + Т_ + ПутьФайлаНастроек;
			КонецЕсли;
		КонецЕсли;
		
		Если МобильноеПриложение = ТипАгентМТ Тогда
			
			ФайлМанифест = СформироватьФайлМанифест(ИмяВАрхиве, Каталог);
					
		КонецЕсли;
		
		Если флПередатьФайлШрифта Тогда
			
			ФайлШрифтаПринтера = ПриложитьФайлШрифтовПринтера(Каталог);
			
		КонецЕсли;
		
		// Если пароль пустой, то архив пакуется без пароля
		#Если Не Клиент Тогда
			КПКОбъектZip.SetPassword(Пароль);
			Результат = КПКОбъектZip.Pack(ПутьИмяАрхива, ИмяВАрхиве + Т_ + ИмяФайла + СтрАрхивКартинок + СтрПутьФайлаНастроек + ФайлМанифест + ФайлШрифтаПринтера);
		#Иначе
			КПКОбъект.АрхУстПароль(Пароль);
			Результат = КПКОбъект.АрхУпаковать(ПутьИмяАрхива, ИмяВАрхиве + Т_ + ИмяФайла +  
											   СтрАрхивКартинок + СтрПутьФайлаНастроек + ФайлМанифест + ФайлШрифтаПринтера);			
		#КонецЕсли		
		
		Если Результат <> 0 Тогда			
			#Если Не Клиент Тогда
				РасшифровкаОшибки = КПКОбъектZip.ErrDescription(Результат);				
			#Иначе
				РасшифровкаОшибки = КПКОбъект.ErrDescription(Результат);				
			#КонецЕсли
			ОповеститьОСобытии("Не удалось упаковать в архив файл по причине: " + РасшифровкаОшибки, СтатусСообщения.Важное);
			Возврат Ложь;
		Иначе
			ИмяФайла = ПутьИмяАрхива; //архив успешно записан
			//А+ { (релиз 15, 08.12.04)
			Если ЗначениеЗаполнено(Пароль) Тогда  				
				ОповеститьОСобытии("Подготовленный архив zip защищен паролем!", СтатусСообщения.Информация, Ложь);
			КонецЕсли;
			//А+ } (релиз 15, 08.12.04)
		КонецЕсли;
		
	КонецЕсли;
	
	// Шифрование данных поддерживается только для Агент+ 1.5
	Если Не МобильноеПриложение = ТипАгентМТ Тогда
		Если Константы.кпкШифроватьДанные.Получить() Тогда //шифруем файл
			ШифрованныйФайл = ИмяФайла + ".crp"; //если файл зашифрован, то его расширение: ".dat.crp", иначе: ".dat"
			КПКОбъект.ШифрУстПароль(СокрЛП(Константы.кпкКриптоПароль.Получить()));
			#Если Не Клиент Тогда
				Результат = КПКОбъектCrypto.ЗашифроватьФайл(ИмяФайла, ШифрованныйФайл);			
			#Иначе
				Результат = КПКОбъект.ЗашифроватьФайл(ИмяФайла, ШифрованныйФайл);			
			#КонецЕсли
			
			Если Результат <> 0 Тогда
				#Если Не Клиент Тогда
					РасшифровкаОшибки = КПКОбъектCrypto.ErrDescription(Результат);				
				#Иначе
					РасшифровкаОшибки = КПКОбъект.ErrDescription(Результат);
				#КонецЕсли 
				ОповеститьОСобытии("Не удалось зашифровать файл по причине: " + РасшифровкаОшибки, СтатусСообщения.Важное);
				Возврат Ложь;
			Иначе         			
				Попытка
					УдалитьФайлы(ИмяФайла); 
				Исключение
					ОповеститьОСобытии("Не удалось удалить временный файл выгрузки по причине: " + ОписаниеОшибки());
				КонецПопытки;
				ИмяФайла = ШифрованныйФайл; //файл успешно зашифрован
			КонецЕсли;
		КонецЕсли;	 	
	КонецЕсли;	
	
	// Нужно удалить файл настроек, чтобы в следующий раз он не попал в выгрузку, 
	// например, если будет произведена выгрузка для другого агента
	Если Не МобильноеПриложение = ТипАгентМТ Тогда
		ПутьФайлаНастроек = Каталог + "config.reg";
		ФайлНастроекНаДиске = Новый Файл(ПутьФайлаНастроек);
		Если ФайлНастроекНаДиске.Существует() Тогда
			Попытка
				УдалитьФайлы(ПутьФайлаНастроек);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;	
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
	Возврат Истина;
	
КонецФункции // СформироватьФайлВыгрузкиДляКПК()

// Функция проверяет использование многобазовости агентом и формирует файл манифеста
// при необходимости
// Параметры
//
// Возвращаемое значение:
//   <Строка>   - Имя файла манифеста для упаковки в архив
//
Функция СформироватьФайлМанифест(ИмяФайлОбмена, Каталог)

	ПутьКФайлуМанифеста = "";
	Если ТаблицаБазДанныхАгента <> Неопределено Тогда
		Если ТаблицаБазДанныхАгента.Количество() > 1 Тогда
			ФайлМанифеста = Новый ТекстовыйДокумент();
			ФайлМанифеста.ДобавитьСтроку("<manifest version=""1"">");
			Для Каждого ТекСтрока из ТаблицаБазДанныхАгента Цикл
				ФайлМанифеста.ДобавитьСтроку(Символы.Таб + "<import db=""" + ТекСтрока.ИмяБД + """ file=""" + ИмяФайлОбмена + """ />");
			КонецЦикла;
			ФайлМанифеста.ДобавитьСтроку("</manifest>");
			ПутьКФайлуМанифеста = Каталог + "manifest";
			ФайлМанифеста.Записать(Каталог + "manifest");
			ПутьКФайлуМанифеста = Т_ + "manifest" + Т_ + ПутьКФайлуМанифеста;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПутьКФайлуМанифеста;
КонецФункции // СформироватьФайлМанифест()

// Функция востанавливает файл шрифта принтера из макета и формирует путь к нему для добавления в архив
//
// Параметры
//  <Каталог>  - <Тип.Строка> - Каталог временных файлов
//
// Возвращаемое значение:
//   <Строка>   - Строка в формате прикрепления к архиву
//
Функция ПриложитьФайлШрифтовПринтера(Каталог)

	ПутьКФайлуШрифта = Каталог + "CRR00CPO.SFS";
	ФайлШрифта = ПолучитьМакет("ФайлШрифта");
	ФайлШрифта.Записать(ПутьКФайлуШрифта);
	
	Возврат Т_ + "CRR00CPO.SFS" + Т_ + ПутьКФайлуШрифта;
КонецФункции // ПриложитьФайлШрифтовПринтера(ИмяВАрхиве, Каталог)()


Функция СоздатьСчетФактуру(ДокументОбъект, СтруктураДокКПК, НужныйНомер)
	
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено 
		И Не ДокументОбъект.ОтражатьВБухгалтерскомУчете Тогда
		#Если Клиент Тогда
		Предупреждение("Счет-фактуру нельзя вводить на основании документа, не отражаемого в бухгалтерском учете");
		#КонецЕсли		
		Возврат 0;
	КонецЕсли;
	
	//Попытаемся найти счет-фактуру
	СчетФактура = ОбщегоНазначения.НайтиПодчиненныйДокумент(ДокументОбъект.Ссылка, "СчетФактураВыданный", Истина);
	
	НовыйДок = Истина;
	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (НЕ ЗначениеЗаполнено(СчетФактура))  И (Не ДокументОбъект.ПометкаУдаления) Тогда
		
		ДокМенеджер = Документы.СчетФактураВыданный;
		СчетФактура = ДокМенеджер.СоздатьДокумент();
		
		Если ЗначениеЗаполнено(НужныйНомер) Тогда
			Если ДокМенеджер.НайтиПоНомеру(НужныйНомер, ТекущаяДата()) = ДокМенеджер.ПустаяСсылка() Тогда	
				СчетФактура.Номер = НужныйНомер;
			КонецЕсли;
		КонецЕсли;
		
		СчетФактура.ДокументыОснования.Очистить();
		СчетФактура.ДополнительныеСвойства.Вставить("НеЗаполнятьСчетФактуруНаАванс");
		СчетФактура.Заполнить(ДокументОбъект.Ссылка); 
	Иначе
		НовыйДок = Ложь;
	КонецЕсли;
	
	Возврат ЗаписьДокумента(СчетФактура, СтруктураДокКПК, НовыйДок, Ложь); 		
	
КонецФункции // СоздатьСчетФактуру()

// Процедура ВыгрузкаСертификатов
//
// Параметры:
//  Нет
//
// Описание:
// 	Процедура выгружает список сертификаторв для номенклатуры в МУ для приложения Агент+ 1.5
// 
Процедура ВыгрузкаСертификатов() Экспорт
	
	// Выгружаем список сертификатов номенклатуры
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Сертификаты.Сертификат,
	|	Сертификаты.Ссылка
	|ИЗ
	|	Справочник.кпкСписокСертификатовНоменклатуры КАК Сертификаты
	|ГДЕ
	|	(Сертификаты.Владелец.Ссылка В ИЕРАРХИИ (&Ассортимент)
	|			ИЛИ Сертификаты.Владелец.Ссылка В (&ДопАссортимент))
	|	И Сертификаты.ВыгружатьВКПК = ИСТИНА");
	
	Запрос.УстановитьПараметр("Ассортимент",    сзАссортимент);
	Запрос.УстановитьПараметр("ДопАссортимент", сзДопТовары);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_SertifList" + Т_ + "Struct:GoodsID,ObjID,Name,SertifID");
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Сертификат) Тогда Продолжить; КонецЕсли;
		
		Ссылка = Выборка.Ссылка;
		
		ИДТовара  = СокрЛП(Ссылка.Владелец.УникальныйИдентификатор());
		ИдСертНом = СокрЛП(Ссылка.УникальныйИдентификатор());
		ИдСерт    = СокрЛП(Выборка.Сертификат.УникальныйИдентификатор());
		
		Текст.ДобавитьСтроку(ИДТовара + Т_ + ИдСерт + Т_ + СокрЛП(Выборка.Сертификат.Наименование) + Т_ + ИдСерт);
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_SertifList");
	  	
	// Выгружаем имеющиеся сертификаты
	ВыборкаСертификатов = Справочники.кпкСертификатыНоменклатуры.Выбрать();
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Sertif" + Т_ + "Struct:SertifID,Name,OrgSertif,DateBgn,DateEnd");
	
	Пока ВыборкаСертификатов.Следующий() Цикл
		Ссылка = ВыборкаСертификатов.Ссылка;
		
		ИД 			 = СокрЛП(Ссылка.УникальныйИдентификатор());
		Наименование = СокрЛП(Ссылка.Наименование);
		Орган    	 = СокрЛП(Ссылка.ОрганСертификации);
		ДатаНач    	 = кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(Ссылка.НачалоДействия);
		ДатаКон    	 = кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(Ссылка.ОкончаниеДействия);
		
		Текст.ДобавитьСтроку(ИД + Т_ + Наименование + Т_ + Орган + Т_ + ДатаНач + Т_ + ДатаКон);
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Sertif");
                                                        	
КонецПроцедуры // ВыгрузкаСертификатов()

////////////////////////////////////////////////////////////////////////////////
// Процедуры для Агент Плюс 2.0				 ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Функция возвращает ссылку на элемент по полученному из XML уникальному идентификатору
//
// Параметры:
//	ИдЭлемента - Строка Уникального идентификатора
//	Спр - Имя справочника, в котором необходимо найти элемент
//
// Возвращаемое значение:
// 	Найденная ссылка или пустая ссылка на справочник, если искомого элеимента нет или неправильный идентификатор
//
Функция ПолучитьСсылкуИзСправочника(ИдЭлемента, Спр, СоздаватьЭлемент = Ложь)
	
	Перем СсылкаЭлемента;
	
	Если ИдЭлемента = Неопределено Или ИдЭлемента = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдЭлемента = НРег(ИдЭлемента);
	
	СпрМенеджер = Справочники[Спр];
	
	СсылкаЭлемента = СпрМенеджер.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ИдЭлемента) Тогда
		
		ГуидЭлемента = Новый УникальныйИдентификатор(ИдЭлемента);
		СсылкаЭлемента = СпрМенеджер.ПолучитьСсылку(ГуидЭлемента);
		
		ОбъектСпр = СсылкаЭлемента.ПолучитьОбъект();
		
		Если ОбъектСпр = Неопределено Тогда
			
			Если СоздаватьЭлемент Тогда
				
				ЭлементОбъект = СпрМенеджер.СоздатьЭлемент();
				СсылкаОбъекта = СпрМенеджер.ПолучитьСсылку(ГуидЭлемента);
				ЭлементОбъект.УстановитьСсылкуНового(СсылкаОбъекта);
				ЭлементОбъект.ОбменДанными.Загрузка = Истина;
				
				Если Не ВыполнитьОперациюДляОбъекта(ЭлементОбъект, "запись") Тогда 			
					ТекстСообщения = "Не удалось записать элемент справочника: " + ЭлементОбъект;
					ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ЭлементОбъект);		
					Возврат СсылкаЭлемента;			
				КонецЕсли;
				
				СсылкаЭлемента = ЭлементОбъект.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;  	
	
	Возврат СсылкаЭлемента;
		
КонецФункции //ПолучитьСсылкуИзСправочника

// Функция СформироватьФайлВыгрузкиДляКПК
//
// Параметры:
//  Нет
//
// Описание:
//	Функция возвращает общую скидку для всех контрагентов путем формирования
//	запроса по регистру скидок
//
Функция ПолучитьОбщуюСкидку()
	
	СписокКачество = Новый СписокЗначений;
	СписокКачество.Добавить(Справочники.Качество.Новый);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНоменклатуры.Номенклатура,
	|	СкидкиНоменклатуры.ХарактеристикаНоменклатуры,
	|	СкидкиНоменклатуры.Качество,
	|	СкидкиНоменклатуры.Условие,
	|	СкидкиНоменклатуры.ЗначениеУсловия,
	|	СкидкиНоменклатуры.ПроцентСкидкиНаценки КАК Скидка,
	|	СкидкиНоменклатуры.ПолучательСкидки
	|ИЗ
	|	РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(
	|			,
	|			Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И Качество В (&МассивКачество)
	|				И условие = &Условие
	|				И (ПолучательСкидки = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ИЛИ ПолучательСкидки = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					ИЛИ ПолучательСкидки = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК СкидкиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалют
	|		ПО СкидкиНоменклатуры.Валюта = КурсыВалют.Валюта
	|ГДЕ
	|	СкидкиНоменклатуры.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И (СкидкиНоменклатуры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ КОНЕЦПЕРИОДА(СкидкиНоменклатуры.ДатаОкончания, ДЕНЬ) >= &Дата)");
	
	Запрос.УстановитьПараметр("Дата"		  , ТекущаяДата());
	Запрос.УстановитьПараметр("МассивКачество", СписокКачество);
	Запрос.УстановитьПараметр("Условие"       , Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	
	ОбщиеСкидки = Запрос.Выполнить().Выбрать();
	
	ОбщаяСкидка = 0;
	
	Если ОбщиеСкидки.Следующий() Тогда
		ОбщаяСкидка = ОбщиеСкидки.Скидка;
	Иначе
		
	КонецЕсли;
	
	Возврат ОбщаяСкидка;
	
КонецФункции //ПолучитьОбщуюСкидку

// Функция определения соответствия перечисления типов контактной информации
// в 1С и Агент Плюс 2.0
//
Функция ЗаполнитьПеречислениеКонтактнойИнформации()
	
	ТипАдрес 		= Перечисления.ТипыКонтактнойИнформации.Адрес;
	ТипАдресЭлПочты = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ТипТелефон 		= Перечисления.ТипыКонтактнойИнформации.Телефон;
	ТипВебСтраница 	= Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	ТипДругое		= Перечисления.ТипыКонтактнойИнформации.Другое; 	
		
	ТипыКонтактнойИнформации = Новый Соответствие;
	ТипыКонтактнойИнформации.Вставить(ТипАдрес, 		"A4D0F540-64ED-4F3E-B2BB-818DA38F5AB2");
	ТипыКонтактнойИнформации.Вставить(ТипАдресЭлПочты, 	"52477200-AF54-405B-9888-14B8BDED0E19");
	ТипыКонтактнойИнформации.Вставить(ТипТелефон, 		"8FC8F351-14F0-48EB-952A-38BB313B28D5");
	ТипыКонтактнойИнформации.Вставить(ТипВебСтраница, 	"2C2CFC86-E2A0-414D-A116-5ACADAC53437");	
	ТипыКонтактнойИнформации.Вставить(ТипДругое, 		"E45419B3-0CFD-47CE-8B24-7037A1E86AED");      	
	
	Возврат ТипыКонтактнойИнформации;
	
КонецФункции

// Функция определения соответствия перечисления статусов документов
// в 1С и Агент Плюс 2.0
//
Функция ПолучитьСтатусЦБД(Документ)
	
	Перем СтатусДокумента;
	
	Если Документ.Проведен Тогда
		СтатусДокумента = "cf16bcd2-6b49-419c-926d-8e9f5f6b596b";
	ИначеЕсли Документ.ПометкаУдаления Тогда
		СтатусДокумента = "9c81410c-02e8-4299-9c53-f28658e974c8";
	Иначе
		СтатусДокумента = "ae4fd9db-ed1e-4c1a-bb98-26e1e2fd2268";
	КонецЕсли;
		
	Возврат СтатусДокумента;
	
КонецФункции

// Функция определения сведений о контрагенте
// в 1С и Агент Плюс 2.0
Функция ПолучитьДанныеАгента()
		
	СтруктураСведений = РегистрыСведений.кпкСведенияАгента.Получить(Новый Структура("Объект", ВыбАгент));
	
	Возврат СтруктураСведений;
	
КонецФункции

// Функция заполнения соответствия констант и дополнительных настроек в 1С:Предприятии
// и приложении Агент Плюс:Мобильная торговля
Функция ЗаполнитьСписокКонстант()
	
	СоответствиеКонстант = Новый Соответствие;
	
	//Общие настройки
	СоответствиеКонстант.Вставить("79c698db-3c55-465e-acfe-4741acdd5655", "AgentID");				 //Идентфикатор агента
	СоответствиеКонстант.Вставить("a2e1cc68-0624-45a6-8057-efd35259b9fe", "Agent");  				 //Наименование торгового агента
	СоответствиеКонстант.Вставить("90c4c934-85a6-449e-a519-d5ae44da667b", "PPCID");     			 //Идентификатор КПК
	СоответствиеКонстант.Вставить("61a474b1-21d0-4047-b2d5-7213a7294050", "ShowTabs");     			 //Список видимых закладок
	СоответствиеКонстант.Вставить("344436bc-3e1b-42d7-b453-496d61eae2d8", "PicCatalog");     		 //Каталог хранения картинок
	СоответствиеКонстант.Вставить("ddedce5e-7a69-4858-bc89-f48e3e44a8ef", "OptPwd");     		     //Пароль доступа к настройкам
	СоответствиеКонстант.Вставить("ed0274e1-3b90-4db9-951f-3037260b80ac", "UseBarCode");    		 //Использование сканирования
	СоответствиеКонстант.Вставить("b1945151-4055-4bc4-a9a0-9e1d39babe99", "UsePrint");    	 		 //Использование печати      	
	СоответствиеКонстант.Вставить("72889bff-cc95-4c2e-9c4e-0d28e2efbf7c", "VanSelling");    	     //Торговля с колес
	
	//Справочники
	
	//Номенклатура
	СоответствиеКонстант.Вставить("83a6772e-4dde-4668-9318-bdf82bfde445", "FlagsPriceCreate");     	 //Разрешить создание товаров
	СоответствиеКонстант.Вставить("3abcd996-1632-46f6-8855-cb25759bc304", "FlagsPriceEdit");     	 //Разрешить редактирование товаров
	СоответствиеКонстант.Вставить("d902c64a-9a7a-40d1-8067-e4bb6b309534", "UseCodes");               //Признак отображения кодов товаров
	
	//Контрагенты
	СоответствиеКонстант.Вставить("73355324-f463-428a-91d2-2868dd35a168", "FlagsClientsCreate");     //Разрешить создание клиентов
	СоответствиеКонстант.Вставить("5616d1e9-bfa3-40fc-baba-852d16b5e774", "FlagsClientsEdit");     	 //Разрешить редактирование клиентов
	СоответствиеКонстант.Вставить("4c6b29d4-3d61-43c7-a063-a63823e55069", "ShowAddressWhithName");   //Отображать адрес контрагента в одной строке
	
	//Торговые точки
	СоответствиеКонстант.Вставить("b69ec9a6-565f-4e3e-844f-0060c5975fed", "FlagsTPointsCreate");     //Разрешить создание торговых точек
	СоответствиеКонстант.Вставить("f52e3c06-48d6-4809-ae16-13c61e78eabd", "FlagsTPointsEdit");     	 //Разрешить изменение торговых точек
	
	//Договоры
	СоответствиеКонстант.Вставить("abc5b73a-f477-406b-89c5-e9aab3b4f1e1", "FlagsContactsCreate");    //Разрешить создание договоров
	СоответствиеКонстант.Вставить("36767a2e-4df5-43b5-9813-893bf6f65a7f", "FlagsContactsEdit");    	 //Разрешить редактирование договоров
	
	// Документы общие настройки
	СоответствиеКонстант.Вставить("dc63708b-9257-48dc-9f16-d9846ac7d5fe", "MainRecvSelFirm");     	 //Проверять выбор фирмы
	СоответствиеКонстант.Вставить("b8396958-7d13-4633-a6c3-c8d639cbf9e6", "MainRecvSelClient");      //Проверять выбор клиента
	СоответствиеКонстант.Вставить("f984e263-b838-489e-a1d4-f775db7ede98", "MainRecvSelTPoint");      //Проверять выбор торговой точки
	СоответствиеКонстант.Вставить("56649629-21e4-4116-aec6-e794f12c62fe", "MainRecvContact");     	 //Проверять выбор договора	
	СоответствиеКонстант.Вставить("c5b563df-6ff8-4801-b19d-6a8dcb9cb95e", "UsePersPrices");			 //Использовать персональные цены
	СоответствиеКонстант.Вставить("8deb5086-fb67-436e-a5f7-5118ce0dc09e", "EditConfirmDocs");		 //Редактировать подтвержденные документы
	СоответствиеКонстант.Вставить("018dd98c-d617-4d35-b5c0-efdabf6b37a2", "HideStoreList");			 //Скрывать список складов при вводе количества
	СоответствиеКонстант.Вставить("6d4c184b-810d-4c23-ba6e-fb7e03b48812", "AskChangePrice");		 //Запрашивать подтверждение изменения цены
	СоответствиеКонстант.Вставить("0deef076-ff1f-4e4d-acb5-8344be0281a1", "NotEditPriceType");		 //Редактировать тип цены документа
	СоответствиеКонстант.Вставить("16d90b81-6ba0-4e72-a471-4350213b934e", "UseComments");			 //Запрашивать комментарий к фотографиям
	СоответствиеКонстант.Вставить("faf41508-ab25-4e1b-9bbd-f80634a3d264", "EditDocData");			 //Изменять дату документа
	СоответствиеКонстант.Вставить("9c60a778-7db0-4b3a-89d5-ebe6b56b1d7f", "OutstandingDebtColor");	 //Цвет выделения просроченного долга
	
	// Заказы
	СоответствиеКонстант.Вставить("690b5736-e1b9-41ef-a132-807acad31687", "OrderEditPrice");     	 //Разрешить редактирование цен
	СоответствиеКонстант.Вставить("4a6b2c4c-445b-4985-a509-10fb1a2d57ce", "EditDiscountOrder");		 //Разрешить изменять скидку
	СоответствиеКонстант.Вставить("ad21d2f3-5797-49a1-aeeb-ef15dfc671a0", "OrderControlMinAmt");     //Проверять минимальное количество
	СоответствиеКонстант.Вставить("072ec906-bd0b-4b75-afa8-bece1434f1eb", "OrderNoChangeRests");     //Не изменять остатки
	СоответствиеКонстант.Вставить("711587ed-1589-4e69-a7f7-09ade3fb5888", "OrderNoNegRests");    	 //Запретить отрицательные остатки
	СоответствиеКонстант.Вставить("0de4a49f-691b-4910-95bf-6f25a281d9e1", "FlagsShowWeight");     	 //Показывать колонку веса
	СоответствиеКонстант.Вставить("07066b23-0099-43cc-99ab-7edf987fd359", "VrfTimeDelivery");     	 //Проверять время доставки
	СоответствиеКонстант.Вставить("0de4a49f-691b-4910-95bf-6f25a281d9e1", "флПоказыватьКолонкуВеса");//Отображать колонку веса в журнале документов
	СоответствиеКонстант.Вставить("b0fddb94-caf7-4003-b2fd-df15bd2f1f1b", "DelayDelivery");			 //Отсрочка доставки
	
	// Маршруты
	СоответствиеКонстант.Вставить("99eeeef3-015a-4727-8166-65f2dcceab29", "FlagsUseRoutes");         //Использовать маршруты
	СоответствиеКонстант.Вставить("8e0a70a1-476c-4c7b-a8a7-0c9ce334fc68", "FlagsPriority");          //Маршруты в приоритете
	
	// Касса
	СоответствиеКонстант.Вставить("ccd3f25e-a29b-419f-b8a2-d58e380efae2", "CashChooseDoc");          //Указывать документ оплаты
	СоответствиеКонстант.Вставить("ef7c73d2-d745-4e04-a5f1-afcbbcb72f05", "CashCheckSum");           //Проверять сумму оплаты
	
	// Мерчендайзинг
	СоответствиеКонстант.Вставить("d2dd4509-e164-4e6c-a0b2-c46b5ca0397d", "SelGoodsDsblEdit");       //Редактируемы мерчендайзинг
	СоответствиеКонстант.Вставить("68524bcf-b992-4896-8a91-44ee31498831", "FlagsMerchEdit");         //Изменять режим подбора в мерчендайзинге
	//СоответствиеКонстант.Вставить("4f409d16-f5cb-487f-b67b-2dbb45382b45", "UseMerchInOrder");      //Создавать мерчендайзинг в заказе
	СоответствиеКонстант.Вставить("a86959b3-ed83-44d8-b457-df8dfea9efdd", "AutoMerch");          	 //Создавать мерчендайзинг для заказа автоматически  	
	СоответствиеКонстант.Вставить("ec1c050f-9183-4cf8-9a40-8546c8617ebb", "FlagsMerchCount");        //Запрашивать количество
	СоответствиеКонстант.Вставить("aeddb719-eb7a-493e-b80e-ee2d63e76fe5", "FlagsMerchPrice");        //Запрашивать цену
	
	// Документы продажи
	СоответствиеКонстант.Вставить("c64dac8a-2fbc-40bf-bf49-143398aaac9a", "DocsSalePodbor");          //Разрешить изменять режим подбора
	СоответствиеКонстант.Вставить("32cd846c-cafa-4006-bc05-ef2cd135e2ea", "DocsSaleAskAmount");       //Запрашивать количество мерчендайзинга
	СоответствиеКонстант.Вставить("138f9a6c-7f96-4136-9fbc-0663476bc094", "DocsSaleAmInWindow");      //Количество мерчендайзинга в одном окне
	СоответствиеКонстант.Вставить("5dc7aea9-e9da-4aa4-babb-df5a43af1ad5", "ShowOriginalPrice");	      //Показывать исходную цену
	СоответствиеКонстант.Вставить("4838f24a-ffaa-48f3-98f8-7863125944c8", "UseDiscountInTableParts"); //Использовать скидки в ТЧ документов продаж
	СоответствиеКонстант.Вставить("b8ee5418-9597-42fb-a738-1574975ec6f6", "DictConstShowCode"); 	  //Отображать код/артикул в ТЧ документов продаж
	СоответствиеКонстант.Вставить("b917af50-af2b-43c1-a111-cc8822b180c2", "UsePriceTypeInTables"); 	  //Использовать типы цен в ТЧ документов продаж
	СоответствиеКонстант.Вставить("e41a7026-551c-44f9-997f-51a8b68b88ac", "NotWaitGPS"); 	  		  //Не ждать координаты документа
	СоответствиеКонстант.Вставить("8886e1e1-fcda-4ea0-85f8-df3d3dd8a5e3", "UsePayType"); 	  		  //Использовать вид оплаты
	
	// Настройки GPS	
	СоответствиеКонстант.Вставить("e8dca437-fa0d-4f92-b7b8-4a7a162638c5", "UseGPS");   			     //Использовать GPS	
	
	// Настройки GPS-трекинга
	СоответствиеКонстант.Вставить("6e7183cc-abf6-4b18-af75-f4d851551fd4", "WriteTrack");   			 //использовать трекинг	
	СоответствиеКонстант.Вставить("c6b9563f-947a-46c2-82dd-d375e103317d", "UseSyncTimeMT");   		 //Синхронизировать время по спутнику 		
	СоответствиеКонстант.Вставить("dd7cde5e-3b09-4fa5-809b-529e8bbfb929", "WriteSpeed");   			 //Записывать скорость	
	СоответствиеКонстант.Вставить("", 									  "Schedule");   			 //Расписание
	СоответствиеКонстант.Вставить("6517da49-a145-43a7-8730-a3e9978e437b", "AutoSend");   			 //Фоновая передача трекинга
	СоответствиеКонстант.Вставить("54e2a0b0-4f94-499d-875a-9d2ee7634da9", "AutoSendInterval");   	 //Интервал фоновай передачи трекинга
			
	Возврат СоответствиеКонстант;
	
КонецФункции //ЗаполнитьСписокКонстант

Функция ПолучитьЗначениеПеречисления(ЗначПараметра)
	
	ТипАдрес 		= Перечисления.ТипыКонтактнойИнформации.Адрес;
	ТипАдресЭлПочты = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ТипТелефон 		= Перечисления.ТипыКонтактнойИнформации.Телефон;
	ТипВебСтраница 	= Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	ТипДругое		= Перечисления.ТипыКонтактнойИнформации.Другое; 	
		
	ТипыКонтактнойИнформации = Новый Соответствие;
	ТипыКонтактнойИнформации.Вставить("A4D0F540-64ED-4F3E-B2BB-818DA38F5AB2", ТипАдрес);
	ТипыКонтактнойИнформации.Вставить("52477200-AF54-405B-9888-14B8BDED0E19", ТипАдресЭлПочты);
	ТипыКонтактнойИнформации.Вставить("8FC8F351-14F0-48EB-952A-38BB313B28D5", ТипТелефон);
	ТипыКонтактнойИнформации.Вставить("2C2CFC86-E2A0-414D-A116-5ACADAC53437", ТипВебСтраница);
	ТипыКонтактнойИнформации.Вставить("E45419B3-0CFD-47CE-8B24-7037A1E86AED", ТипДругое);
	
	ТекТип = ТипыКонтактнойИнформации.Получить(ВРЕГ(ЗначПараметра));
	
	Возврат ТекТип;	
	
КонецФункции

// Функция получает папку обмена на мобильном устройстве из дополнительных настроек выбранного агента
//
Функция ПолучитьПапкуОбменаВМУ() Экспорт
	
	ПапкаОбмена = "";
	
	Если ЗначениеЗаполнено(ВыбАгент) Тогда		
		
		Если Не МобильноеПриложение = ТипАгентМТ Тогда
			
			ПапкаОбмена = ПапкаОбмена15;
			
		Иначе
			
			Отбор = Новый Структура("Объект", ВыбАгент);
			
			Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(Отбор);
			
			Если Выборка.Следующий() Тогда    			
				Структура = РегистрыСведений.кпкСведенияАгента.Получить(Отбор);
				ДопНастройки = Выборка.ДополнительныеНастройки.Получить();
				Если Не ДопНастройки = Неопределено Тогда
					ПапкаОбмена = ДопНастройки["FilePath"];
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПапкаОбмена) Тогда
				ПапкаОбмена = ПапкаОбмена20;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;	
		
	Возврат ПапкаОбмена;	
			
КонецФункции //ПолучитьПапкуОбменаВМУ
    
// Функция ПолучитьОСУстройства
//
// Параметры:
//  Нет
//
// Описание:
// Функция получает операционную систему мобильного устройства выбранного агента
//
Функция ПолучитьОСУстройства() Экспорт
	
	Если ЗначениеЗаполнено(ВыбАгент) Тогда
	
		Отбор = Новый Структура("Объект", ВыбАгент);
		
		Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(Отбор);
		Если Выборка.Следующий() Тогда
			ОС = Выборка.КПК.ОперационнаяСистема;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОС;	
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Процедуры для Агент Плюс 2.0/////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВЫГРУЗКИ ДАННЫХ
//////////////////////////////////////////////////////////

Процедура ЗаписатьЭлементВДокументОбмена(СтруктураПолей, ЗакрытьЭлемент = Истина)
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
	
	Для Каждого ТекЭлемент Из СтруктураПолей Цикл
		ДобавитьПоле(ТекЭлемент.Ключ, ТекЭлемент.Значение);
	КонецЦикла;
	
	Если ЗакрытьЭлемент Тогда
		ДокОбмена.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры //ЗаписатьЭлементВДокументОбмена

Функция ПреобразоватьЗначениеВСтрокуДляXML(Значение)
	
	Перем ПреобразованноеЗначение;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		ПреобразованноеЗначение = XMLСтрока(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		ПреобразованноеЗначение = XMLСтрока(кпкАгентПлюс.ФорматироватьЧисло(Значение));
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		ПреобразованноеЗначение = XMLСтрока(Число(Значение));
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		ПреобразованноеЗначение = XMLСтрока(кпкАгентПлюс.ДатаВремяВФорматXMLИз1СМТ(Значение));
	ИначеЕсли ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		ПреобразованноеЗначение = ВРег(XMLСтрока(Значение));
	ИначеЕсли Не ЗначениеЗаполнено(Значение) Тогда
		ПреобразованноеЗначение = "";
	ИначеЕсли ЗначениеЗаполнено(Значение) Тогда
		ПреобразованноеЗначение = ВРег(XMLСтрока(Значение.Ссылка.УникальныйИдентификатор()));
	Иначе
		ПреобразованноеЗначение = XMLСтрока(Значение);
	КонецЕсли;
	
	ЗнАтрибута = СтрЗаменить(ПреобразованноеЗначение, Символы.ПС,  "#рс#");
	ЗнАтрибута = СтрЗаменить(ПреобразованноеЗначение, Символы.Таб, "#ст#");   	
		
	Возврат ЗнАтрибута;
	
КонецФункции //ПреобразоватьЗначениеВСтрокуДляXML()

Процедура ДобавитьПоле(Имя, Значение)
	
	ЗначXML = ПреобразоватьЗначениеВСтрокуДляXML(Значение);
	
	//Если ЗначениеЗаполнено(ЗначXML) Тогда
		ДокОбмена.ЗаписатьАтрибут(Имя, ЗначXML);
	//КонецЕсли;
	
КонецПроцедуры // ДобавитьПоле()

Процедура ДобавитьКонстанту(Идентификатор, Значение)
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
	
		ДобавитьПоле("GUID",  ВРЕГ(Идентификатор));
		ДобавитьПоле("VALUE", Значение);							
		
	ДокОбмена.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ДобавитьКонстанту() 

Функция ПолучитьСтруктуруПредопределенныхПолейСправочника(ТекЭлемент, СоздаватьИдентификатор = Ложь)
	
	СтруктураПолей = Новый Структура;
	
	Если СоздаватьИдентификатор Тогда
		СтруктураПолей.Вставить("GUID",	ВРЕГ(Новый УникальныйИдентификатор()));
	Иначе
		СтруктураПолей.Вставить("GUID",	ВРЕГ(ТекЭлемент.Ссылка.УникальныйИдентификатор()));
	КонецЕсли;
	
	//СтруктураПолей.Вставить("IsDeleted", ТекЭлемент.ПометкаУдаления);
	СтруктураПолей.Вставить("Name", 	 ТекЭлемент.Наименование);
	
	Возврат СтруктураПолей
	
КонецФункции //ПолучитьСтруктуруПредопределенныхПолейСправочника

Функция ПолучитьСтруктуруПредопределенныхПолейДокумента(ТекДокумент, СоздаватьИдентификатор = Ложь, ВыгружатьНомер = Истина)
	
	Перем ЗначениеНомера;
	СтруктураПолей = Новый Структура;
	
	Если СоздаватьИдентификатор Тогда
		СтруктураПолей.Вставить("GUID",	ВРЕГ(Новый УникальныйИдентификатор()));
	Иначе
		СтруктураПолей.Вставить("GUID",	ВРЕГ(ТекДокумент.Ссылка.УникальныйИдентификатор()));
	КонецЕсли;
	
	СтруктураПолей.Вставить("dt", 		 ТекДокумент.Дата);
	СтруктураПолей.Вставить("IsPost", 	 ТекДокумент.Проведен); 
	
	//Если ВыгружатьНомер Тогда
	//	ВставитьНомерДокументаВСтруктуру(СтруктураПолей, ТекДокумент);
	//КонецЕсли;		
	//
	Возврат СтруктураПолей
	
КонецФункции //ПолучитьСтруктуруПредопределенныхПолейДокумента
           
Процедура ВыгрузитьПростойСправочник(Идентификатор, Выборка, ИмяСпр = "")
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", Идентификатор);
		
		ДобавитьПоле("Comment", "Справочник." + ИмяСпр);
		
		// Передаем команду на очистку справочника перед загрузкой
		ДобавитьПоле("KILLALL", "1");                	
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
			Пока Выборка.Следующий() Цикл				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);				
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
	
КонецПроцедуры //ВыгрузитьПростойСправочник

Функция ПолучитьТекстЗапросаПоНоменклатуре(ЗапросПоХарактеристиками = Ложь)
	
	Если Не флВыгрТоварыСНулевОст Тогда	
		Если ЗапросПоХарактеристиками Тогда
			УсловиеОтбора = "И ВЫБОР
			|КОГДА ОстаткиТоваров.Товар.Услуга
			|ТОГДА 100
			|ИНАЧЕ ОстаткиТоваров.СвободныйОстаток
			|КОНЕЦ > 0"

		Иначе
			УсловиеОтбора = "И ВЫБОР
			|КОГДА СпрНоменклатура.Услуга
			|ТОГДА 100
			|ИНАЧЕ ОстаткиТоваров.СвободныйОстаток
			|КОНЕЦ > 0"
		КонецЕсли;
	КонецЕсли;  
	
	Если ЗапросПоХарактеристиками Тогда
				
		 ТекстЗапроса = "ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Склад,
		|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток КАК Резерв,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Остаток,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - " + ?(флРезервы, "ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0)", "0") + " КАК СвободныйОстаток,
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК Ссылка,
		|	НоменклатураВладелец.Ссылка КАК Товар
		|ПОМЕСТИТЬ ОстаткиТоваров
		|ИЗ
		|	Справочник.Номенклатура КАК НоменклатураВладелец
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				&Период, Склад В (&Склады) И
		|				ХарактеристикаНоменклатуры.Владелец В ИЕРАРХИИ (&Ассортимент)
		|					ИЛИ Номенклатура В ИЕРАРХИИ (&Ассортимент)) КАК ТоварыНаСкладахОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
		|					&Период, Склад В (&Склады) И
		|					ХарактеристикаНоменклатуры.Владелец В ИЕРАРХИИ (&Ассортимент)
		|						ИЛИ Номенклатура В ИЕРАРХИИ (&Ассортимент)) КАК ТоварыВРезервеНаСкладахОстатки
		|			ПО ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
		|				И ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		|				И ТоварыНаСкладахОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад
		|		ПО (ТоварыНаСкладахОстатки.Номенклатура = НоменклатураВладелец.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	КатегорииОбъектов.Категория
		|ПОМЕСТИТЬ Категории
		|ИЗ
		|Справочник.Номенклатура КАК Номенклатура
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|	ПО Номенклатура.Ссылка = КатегорииОбъектов.Объект
		|ГДЕ
		|КатегорииОбъектов.Категория.Наименование = ""АП_Акция""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиТоваров.Товар КАК Номенклатура,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ""<Без характеристики>"") КАК Ссылка,
		|	ОстаткиТоваров.Склад,
		|	ЕСТЬNULL(ОстаткиТоваров.СвободныйОстаток, 0) КАК СвободныйОстаток,
		|	ЕСТЬNULL(Категории.Категория, 0) КАК Акция
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПРАВОЕ СОЕДИНЕНИЕ ОстаткиТоваров КАК ОстаткиТоваров
		|		ПО (ОстаткиТоваров.Ссылка = ХарактеристикиНоменклатуры.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Категории КАК Категории
		|		ПО ХарактеристикиНоменклатуры.Владелец.Ссылка = Категории.Ссылка
		|ГДЕ		
		|	ОстаткиТоваров.Товар В ИЕРАРХИИ(&Ассортимент)
		|   И (НЕ ОстаткиТоваров.Товар.ЭтоГруппа)
		|   И (НЕ ОстаткиТоваров.Товар.ПометкаУдаления)		
		|	И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)		
		|	" + УсловиеОтбора + "
		|ИТОГИ
		|	СУММА(СвободныйОстаток)
		|ПО
		|	Номенклатура,
		|	Ссылка
		|	Склад";
						 		 
	 Иначе
			
		ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Ссылка,
		|	ТоварыНаСкладахОстатки.Склад,
		|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток КАК Резерв,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Остаток,
		|	ТоварыНаСкладахОстатки.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - " + ?(флРезервы, "ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0)", "0") + " КАК СвободныйОстаток
		|ПОМЕСТИТЬ ОстаткиТоваров
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&Период,
		|			Склад В (&Склады)
		|				И Номенклатура В ИЕРАРХИИ (&Ассортимент)) КАК ТоварыНаСкладахОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
		|				&Период,
		|				Склад В (&Склады)
		|					И Номенклатура В ИЕРАРХИИ (&Ассортимент)) КАК ТоварыВРезервеНаСкладахОстатки
		|		ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		|          И ТоварыНаСкладахОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	КатегорииОбъектов.Категория
		|ПОМЕСТИТЬ Категории
		|ИЗ
		|Справочник.Номенклатура КАК Номенклатура
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|	ПО Номенклатура.Ссылка = КатегорииОбъектов.Объект
		|ГДЕ
		|КатегорииОбъектов.Категория.Наименование = ""АП_Акция""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Ссылка,
		|	СпрНоменклатура.ПометкаУдаления,
		|	СпрНоменклатура.Наименование,
		|	ЕСТЬNULL(СпрНоменклатура.Родитель, """") КАК Родитель,
		|	СпрНоменклатура.СтавкаНДС,
		|	ЕСТЬNULL(СпрНоменклатура.НоменклатурнаяГруппа, """") КАК НоменклатурнаяГруппа,
		|	ЕСТЬNULL(СпрНоменклатура.БазоваяЕдиницаИзмерения, """") КАК БазоваяЕдиницаИзмерения,
		|	ЕСТЬNULL(СпрНоменклатура.ЕдиницаХраненияОстатков, """") КАК ЕдиницаХраненияОстатков,
		|	СпрНоменклатура.ВестиУчетПоХарактеристикам,
		|	ЕСТЬNULL(ОстаткиТоваров.СвободныйОстаток, 0) КАК СвободныйОстаток,
		|	ОстаткиТоваров.Склад,
		|	ЕСТЬNULL(Категории.Категория, 0) КАК Акция
		|ИЗ
		|Справочник.Номенклатура КАК СпрНоменклатура
		|	ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиТоваров КАК ОстаткиТоваров
		|	ПО СпрНоменклатура.Ссылка = ОстаткиТоваров.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Категории КАК Категории
		|		ПО СпрНоменклатура.Ссылка = Категории.Ссылка
		|ГДЕ
		|	СпрНоменклатура.Ссылка В ИЕРАРХИИ(&Ассортимент)
		|	И (Не СпрНоменклатура.ЭтоГруппа)
		|   И (НЕ СпрНоменклатура.ПометкаУдаления)		
		|	" + УсловиеОтбора + "		
		|ИТОГИ
		|	СУММА(СвободныйОстаток)
		|ПО
		|	Ссылка
		|	Склад";
		
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПолучитьТекстЗапросаПоНоменклатуре

Процедура ВыгрузитьДоговорыКонтагентов()
	
	РежимВыгрузкиКонтрагентов = Константы.кпкРежимВыгрузкиКонтрагентов.Получить();
	
	Если РежимВыгрузкиКонтрагентов = 1 Тогда
		ТекстУсловияДоговоров = " И ДоговорыКонтрагентов.Владелец В(&СписокКлиентов) И ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ (&СписокДоговоров)";
	ИначеЕсли РежимВыгрузкиКонтрагентов = 4 Тогда
		ТекстУсловияДоговоров = " И ВЫБОР КОГДА ДоговорыКонтрагентов.Владелец В ИЕРАРХИИ (&СписокКлиентов) И ДоговорыКонтрагентов.Владелец В (&СписКлиентовПоДоговорам)" +
								"ТОГДА ДоговорыКонтрагентов.Владелец В ИЕРАРХИИ (&СписокКлиентов) И ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ (&СписокДоговоров)" +
								"ИНАЧЕ ДоговорыКонтрагентов.Владелец В ИЕРАРХИИ (&СписокКлиентов) КОНЕЦ";
	Иначе
		ТекстУсловияДоговоров = " И ДоговорыКонтрагентов.Владелец В(&СписокКлиентов)";		
	КонецЕсли; 	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.Код,
	|	ДоговорыКонтрагентов.Наименование,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Дата,
	|	ДоговорыКонтрагентов.СрокДействия,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	ДоговорыКонтрагентов.ТипЦен КАК ТипЦен,
	|	ДоговорыКонтрагентов.ПометкаУдаления
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И (НЕ ДоговорыКонтрагентов.ЭтоГруппа)" + ТекстУсловияДоговоров);
	
	Запрос.УстановитьПараметр("СписокКлиентов",    		 сзКлиентыАгента);
	Запрос.УстановитьПараметр("СписокДоговоров", 		 ТаблицаДоговоровАгента.ВыгрузитьКолонку("Договор"));
	Запрос.УстановитьПараметр("СписКлиентовПоДоговорам", ТаблицаДоговоровАгента.ВыгрузитьКолонку("Контрагент"));
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ИдСпр = "735A9CE5-DCC1-4D1A-8F8D-643A50A6BEFC";
	
		ДобавитьПоле("GUID", ИдСпр);
		
		ДобавитьПоле("Comment", "Справочник.ДоговорыКонтрагентов");
		
		УстановитьПризнакОчисткиСправочника(ИдСпр);
				
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока СписокЭлементов.Следующий() Цикл
			
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				КодТипаЦены = ПолучитьКодТипаЦены(СписокЭлементов.ТипЦен, СписокЭлементов.Ссылка);

				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);				
				СтруктураПолей.Вставить("A02", СписокЭлементов.Контрагент);
				СтруктураПолей.Вставить("A03", СписокЭлементов.Дата);
				СтруктураПолей.Вставить("A04", СписокЭлементов.СрокДействия);
				СтруктураПолей.Вставить("A05", СписокЭлементов.Организация);
				Если Не ПустаяСтрока(КодТипаЦены) Тогда
					СтруктураПолей.Вставить("A06", СписокЭлементов.ТипЦен);
				КонецЕсли;
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
				
			КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); // ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     // CATALOG
	                                    
КонецПроцедуры // ВыгрузитьДоговорыКонтагентов

Процедура ВыгрузитьКонтактныеЛица()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтактныеЛицаКонтрагентов.Ссылка КАК Ссылка,
	|	КонтактныеЛицаКонтрагентов.ПометкаУдаления КАК ПометкаУдаления,
	|	КонтактныеЛицаКонтрагентов.Владелец КАК Контрагент,
	|	NULL КАК ТорговаяТочка,
	|	КонтактныеЛицаКонтрагентов.Код,
	|	КонтактныеЛицаКонтрагентов.Наименование,
	|	КонтактныеЛицаКонтрагентов.КонтактноеЛицо.ДатаРождения КАК ДатаРождения,
	|	КонтактныеЛицаКонтрагентов.Комментарий
	|ИЗ
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	|ГДЕ
	|	КонтактныеЛицаКонтрагентов.Владелец В(&СписокКонтрагентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	кпкТорговыеТочкиКонтактныеЛица.КонтактноеЛицо.Ссылка,
	|	кпкТорговыеТочкиКонтактныеЛица.КонтактноеЛицо.ПометкаУдаления,
	|	NULL,
	|	кпкТорговыеТочкиКонтактныеЛица.Ссылка,
	|	кпкТорговыеТочкиКонтактныеЛица.КонтактноеЛицо.Код,
	|	кпкТорговыеТочкиКонтактныеЛица.КонтактноеЛицо.Наименование,
	|	кпкТорговыеТочкиКонтактныеЛица.КонтактноеЛицо.КонтактноеЛицо.ДатаРождения,
	|	кпкТорговыеТочкиКонтактныеЛица.КонтактноеЛицо.Комментарий
	|ИЗ
	|	Справочник.кпкТорговыеТочки.КонтактныеЛица КАК кпкТорговыеТочкиКонтактныеЛица
	|ГДЕ
	|	кпкТорговыеТочкиКонтактныеЛица.Ссылка.Владелец В(&СписокКонтрагентов)");
	
	Запрос.УстановитьПараметр("СписокКонтрагентов", сзКлиентыАгента);
	
	СписокЭлементов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	сзКонтактныеЛица = Новый СписокЗначений;
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ИдСпр = "CF387A58-4655-41B5-A460-85884D1F20D0";
	
		ДобавитьПоле("GUID", ИдСпр);
		
		ДобавитьПоле("Comment", "Справочник.КонтактныеЛица");		
		
		УстановитьПризнакОчисткиСправочника(ИдСпр);
		 
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			СписокКЛ = Новый СписокЗначений;
			
			Пока СписокЭлементов.Следующий() Цикл
				
				Если СписокЭлементов.Ссылка = Null Тогда Продолжить; КонецЕсли;
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли

			    СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);
					
				СтруктураПолей.Вставить("A02", 		 СписокЭлементов.ДатаРождения);
				Если СписокКЛ.НайтиПоЗначению(СписокЭлементов.Ссылка) <> Неопределено И 
					ЗначениеЗаполнено(СписокЭлементов.ТорговаяТочка) Тогда
					//СтруктураПолей.Вставить("A03",  	 СписокЭлементов.ТорговаяТочка.Владелец);
				Иначе
					СтруктураПолей.Вставить("A03",  	 СписокЭлементов.Контрагент);					
				КонецЕсли;   
				
				СтруктураПолей.Вставить("A04", 		 СписокЭлементов.ТорговаяТочка);
				СтруктураПолей.Вставить("A05", 		 СписокЭлементов.Комментарий);
				
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
				
				СписокКЛ.Добавить(СписокЭлементов.Ссылка);
				
			КонецЦикла;
	
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
КонецПроцедуры //ВыгрузитьКонтактныеЛица

Процедура ВыгрузитьКлиентов()
	
	сзВыгруженныеКлиенты = Новый СписокЗначений;
	ОбщаяСкидкаДляКонтрагентов = ПолучитьОбщуюСкидку();
		
	МассивКачество = Новый Массив;
	МассивКачество.Добавить(Справочники.Качество.Новый);
	
	МассивУсловий = Новый Массив;
	МассивУсловий.Добавить(Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	МассивУсловий.Добавить(Перечисления.УсловияСкидкиНаценки.ПустаяСсылка());	
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоКонтрагентам());
	
	Запрос.УстановитьПараметр("Период"		  ,  ТекущаяДата());
	Запрос.УстановитьПараметр("МассивКачество",  МассивКачество);	
	Запрос.УстановитьПараметр("МассивУсловий",   МассивУсловий);			
	Запрос.УстановитьПараметр("ОбщаяСкидка"   ,  ОбщаяСкидкаДляКонтрагентов);
	Запрос.УстановитьПараметр("СписКлиентов",    сзКлиентыАгента);
	
	парСписокГрупп = Новый СписокЗначений;
	
	Для Каждого ЭлСписка Из сзКлиентыАгента Цикл
		Если ЗначениеЗаполнено(ЭлСписка.Значение.Родитель) Тогда
			парСписокГрупп.Добавить(ЭлСписка.Значение.Родитель);
		КонецЕсли;
	КонецЦикла;
	
	КонтрагентыДляВыгрузки = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ПометкаУдаления,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.Родитель.Ссылка КАК Родитель
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ЭтоГруппа
	|	И Контрагенты.Ссылка В(&СписокГрупп)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ");
	
	Запрос.УстановитьПараметр("СписокГрупп", парСписокГрупп);
	
	СписокГрупп = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ИдСпр = "9450980F-FB59-47E3-BAE2-AA3C58441B1A";
	
		ДобавитьПоле("GUID", ИдСпр);
		
		ДобавитьПоле("Comment", "Справочник.Контрагенты");
		
		УстановитьПризнакОчисткиСправочника(ИдСпр);	
		
		// Выгрузка групп контрагентов	
		ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");
		
			ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
			
				ДобавитьПоле("GUID", "1E18C8DB-08F6-47DA-874B-100D6E109AB8");
				
				ДобавитьПоле("Comment", "Элементы группировка по иерархии");
				
				ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");	
				
					СпВГ = Новый СписокЗначений;
					
					Пока СписокГрупп.Следующий() Цикл							
						Если СпВГ.НайтиПоЗначению(СписокГрупп.Ссылка) = Неопределено Тогда												
							СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокГрупп);						
							//Если ЗначениеЗаполнено(СписокГрупп.Родитель) Тогда							
								СтруктураПолей.Вставить("ParId", СписокГрупп.Родитель);						
								ЗаписатьЭлементВДокументОбмена(СтруктураПолей);							
								СпВГ.Добавить(СписокГрупп.Ссылка);   				
							//КонецЕсли;
						КонецЕсли;   						
					КонецЦикла;  				
				
				ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
			
			ДокОбмена.ЗаписатьКонецЭлемента();     //GROUP
		
		ДокОбмена.ЗаписатьКонецЭлемента(); 		   //GROUPS
		
		// Выгрузка элементов справочника
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		СчЭлементов = 0;
		
		ВсегоЭлементов = КонтрагентыДляВыгрузки.Количество();
		
		Пока КонтрагентыДляВыгрузки.Следующий() Цикл	
			ПредставлениеРасчСчета = "";
			Если ЗначениеЗаполнено(КонтрагентыДляВыгрузки.РасчетныйСчет) Тогда
				ПредставлениеРасчСчета = ", р/с " + КонтрагентыДляВыгрузки.РасчетныйСчет.НомерСчета
											+ ", в банке " + КонтрагентыДляВыгрузки.РасчетныйСчет.Банк.Наименование
											+ ", БИК " + КонтрагентыДляВыгрузки.РасчетныйСчет.Банк.Код
											+ ", к/с " + КонтрагентыДляВыгрузки.РасчетныйСчет.Банк.КоррСчет;
			КонецЕсли;
			
			ПредставлениеИННКПП = КонтрагентыДляВыгрузки.ИНН;
			
			СчЭлементов = СчЭлементов + 1;
			
			ПроцентВыгрузки = Окр(СчЭлементов/ВсегоЭлементов*100, 0);		
			
			#Если Клиент Тогда
				Состояние("Выгрузка контрагентов: " + ПроцентВыгрузки + "%");			
				ОбработкаПрерыванияПользователя();
			#КонецЕсли   			
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(КонтрагентыДляВыгрузки);						
			СтруктураПолей.Вставить("A02", 		 КонтрагентыДляВыгрузки.Родитель);
			СтруктураПолей.Вставить("A05", 		 КонтрагентыДляВыгрузки.Скидка);
			СтруктураПолей.Вставить("A06", 		 КонтрагентыДляВыгрузки.Статус);
			СтруктураПолей.Вставить("A08", 		 КонтрагентыДляВыгрузки.ОсновнойДоговор);
			Если ЗначениеЗаполнено(КонтрагентыДляВыгрузки.ОсновнойДоговор.ТипЦен) Тогда
				СтруктураПолей.Вставить("A09", 	 КонтрагентыДляВыгрузки.ОсновнойДоговор.ТипЦен);
			КонецЕсли;
			СтруктураПолей.Вставить("A010", 	 КонтрагентыДляВыгрузки.ЗапретПродаж);
			СтруктураПолей.Вставить("A011", 	 КонтрагентыДляВыгрузки.Категория);
			СтруктураПолей.Вставить("A012", 	 КонтрагентыДляВыгрузки.НаименованиеПолное);
			СтруктураПолей.Вставить("A013", 	 ПредставлениеИННКПП);
			СтруктураПолей.Вставить("A014", 	 ПредставлениеРасчСчета);
			СтруктураПолей.Вставить("GrpId0", 	 КонтрагентыДляВыгрузки.Родитель);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
			
			Если Константы.кпкВключитьАвтозаполнениеРегистровСведений.Получить() Тогда
				ДобавитьЗаписьВРегистр(РегистрыСведений.кпкСведенияКонтрагента, КонтрагентыДляВыгрузки.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
	
КонецПроцедуры //ВыгрузкаКлиентов()

Процедура ВыгрузитьОрганизации()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Наименование,
	|	Организации.ПометкаУдаления,
	|	ЕСТЬNULL(Телефон.Тел, """") КАК Телефон,
	|	ЕСТЬNULL(ФактАдрес.ФактичАдрес, """") КАК ФактАдрес,
	|	ЕСТЬNULL(ЮрАдрес.ЮридАдрес, """") КАК ЮрАдрес,
	|	ЕСТЬNULL(кпкСведенияОрганизаций.ИспНДС, ЛОЖЬ) КАК ИспНДС,
	|	Организации.Префикс,
	|	Организации.НаименованиеПолное
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			КонтактнаяИнформация.Объект КАК Организация,
	|			КонтактнаяИнформация.Вид КАК Вид,
	|			КонтактнаяИнформация.Представление КАК Тел
	|		ИЗ
	|			РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ГДЕ
	|			КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)) КАК Телефон
	|		ПО Организации.Ссылка = Телефон.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			КонтактнаяИнформация.Объект КАК Организация,
	|			КонтактнаяИнформация.Вид КАК Вид,
	|			КонтактнаяИнформация.Представление КАК ФактичАдрес
	|		ИЗ
	|			РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ГДЕ
	|			КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации)) КАК ФактАдрес
	|		ПО Организации.Ссылка = ФактАдрес.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			КонтактнаяИнформация.Объект КАК Организация,
	|			КонтактнаяИнформация.Вид КАК Вид,
	|			КонтактнаяИнформация.Представление КАК ЮридАдрес
	|		ИЗ
	|			РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ГДЕ
	|			КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)) КАК ЮрАдрес
	|		ПО Организации.Ссылка = ЮрАдрес.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кпкСведенияОрганизаций КАК кпкСведенияОрганизаций
	|		ПО (кпкСведенияОрганизаций.Объект = Организации.Ссылка)");          	

	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ИдСпр = "0E3CBAEA-5467-45CD-8C86-FB1777DA435B";
	
	ДобавитьПоле("GUID", ИдСпр);
	
	ДобавитьПоле("Comment", "Справочник.Организации");	
	
	УстановитьПризнакОчисткиСправочника(ИдСпр);	
 
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
		Пока СписокЭлементов.Следующий() Цикл 				
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);
			СтруктураПолей.Вставить("A02", 		 СписокЭлементов.ИспНДС);
			
			КодыОрганизацииСрезПоследних = РегистрыСведений.КодыОрганизации.СрезПоследних(ТекущаяДата(),Новый Структура("Организация", СписокЭлементов.Ссылка));
			Если КодыОрганизацииСрезПоследних.Количество() < 1 Тогда
				СтруктураПолей.Вставить("A05", 		 "");
				СтруктураПолей.Вставить("A06", 		 "");
				СтруктураПолей.Вставить("A07", 		 "");
			Иначе
				СтруктураПолей.Вставить("A05", 		 СокрЛП(КодыОрганизацииСрезПоследних[0].ИНН));
				СтруктураПолей.Вставить("A06", 		 СокрЛП(КодыОрганизацииСрезПоследних[0].ИНН));
				СтруктураПолей.Вставить("A07", 		 СокрЛП(КодыОрганизацииСрезПоследних[0].КодПоЕДРПОУ));
			КонецЕсли;
			
			СтруктураПолей.Вставить("A04", 		 СписокЭлементов.Телефон);
			СтруктураПолей.Вставить("A03", 		 СписокЭлементов.ЮрАдрес);
			СтруктураПолей.Вставить("A09", 		 СписокЭлементов.ФактАдрес);
			СтруктураПолей.Вставить("A010", 	 СписокЭлементов.Префикс);
			//ДанныеДляПечатнойФормы
			СписокПоказателей = Новый СписокЗначений;
			СписокПоказателей.Добавить("","ФИОРук");
			СписокПоказателей.Добавить("","ФИОБух");
			Руководители = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(СписокЭлементов.Ссылка, ТекущаяДата(), СписокПоказателей);
			Руководитель = Руководители.ФИОРук;
			Бухгалтер    = Руководители.ФИОБух;
			СтруктураПолей.Вставить("A011", 	 СписокЭлементов.Ссылка.ОсновнойБанковскийСчет.Банк.Наименование);
			СтруктураПолей.Вставить("A012", 	 СписокЭлементов.Ссылка.ОсновнойБанковскийСчет.НомерСчета);
			СтруктураПолей.Вставить("A013", 	 СписокЭлементов.Ссылка.ОсновнойБанковскийСчет.Банк.КоррСчет);
			СтруктураПолей.Вставить("A016", 	 СписокЭлементов.Ссылка.ОсновнойБанковскийСчет.Банк.Код);
			СтруктураПолей.Вставить("A014", 	 Руководитель);
			СтруктураПолей.Вставить("A015", 	 Бухгалтер);
			СтруктураПолей.Вставить("A017", 	 СписокЭлементов.НаименованиеПолное);
			//ДанныеДляПечатнойФормы
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);  								
			
			Если Константы.кпкВключитьАвтозаполнениеРегистровСведений.Получить() Тогда
				ДобавитьЗаписьВРегистр(РегистрыСведений.кпкСведенияОрганизаций, СписокЭлементов.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
КонецПроцедуры //ВыгрузитьОрганизации
 
Процедура ВыгрузитьТорговыеТочки()
	
	РежимВыгрузкиКонтрагентов = Константы.кпкРежимВыгрузкиКонтрагентов.Получить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкТорговыеТочки.Ссылка,
	|	кпкТорговыеТочки.ПометкаУдаления,
	|	кпкТорговыеТочки.Наименование,
	|	ЕСТЬNULL(кпкТорговыеТочки.Владелец, """") КАК Контрагент,
	|	кпкТорговыеТочки.Телефоны КАК Телефон,
	|	кпкТорговыеТочки.Адрес,
	|	кпкТорговыеТочки.ОсновнойТипЦены,
	|	кпкТорговыеТочки.Категория
	|ИЗ
	|	Справочник.кпкТорговыеТочки КАК кпкТорговыеТочки
	|ГДЕ
	|	кпкТорговыеТочки.Владелец В(&Владелец)");
	
	Запрос.УстановитьПараметр("Владелец", сзКлиентыАгента);
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ИдСпр = "D3DBB02E-681E-4FC2-AD0E-8EF1234E9F48";
	
		ДобавитьПоле("GUID", ИдСпр);
		
		ДобавитьПоле("Comment", "Справочник.ТорговыеТочки");
		
		УстановитьПризнакОчисткиСправочника(ИдСпр);	 	
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
			Пока СписокЭлементов.Следующий() Цикл
				
				// Если выгрузка контрагентов по плану посещений или из списка контрагентов для агента
				// то нужно проверять согласно списку выгружаемых торговых точек, чтобы в выгрузку
				// не попадали лишние торговые точки
				Если (РежимВыгрузкиКонтрагентов = 0) или (РежимВыгрузкиКонтрагентов = 2) Тогда 
					Если сзТоргТочкиАгента.НайтиПоЗначению(СписокЭлементов.Ссылка) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли   
			
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);
				СтруктураПолей.Вставить("A02", СписокЭлементов.Контрагент);
				СтруктураПолей.Вставить("A05", СписокЭлементов.Категория);
				
				ОсновнойТипЦены = "";
				Если ЗначениеЗаполнено(СписокЭлементов.ОсновнойТипЦены) Тогда
					СтруктураПолей.Вставить("A08", СписокЭлементов.ОсновнойТипЦены);					
				КонецЕсли;
				
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);	
				
			КонецЦикла;
	
		ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();      //CATALOG
	
КонецПроцедуры //ВыгрузитьТорговыеТочки

Процедура ВыгрузитьНоменклатуру()
	
	сзАссортимент = Новый СписокЗначений; 	
	сзАссортимент = СведенияАгента.Ассортимент.ТАссортимент.ВыгрузитьКолонку("Номенклатура");
	
	Если ЗначениеЗаполнено(АвтоСклад) Тогда
		ОстаткиАвтоСклада = ПолучитьОстаткиТоваровНаПередвижномСкладе();
		ОстаткиАвтоСклада.Свернуть("Номенклатура", "Количество");
	КонецЕсли;
	
	МинимальныйТипЦены = СведенияАгента.МинимальныйТипЦены;
			
	парСписокГрупп = Новый СписокЗначений;
	
	Для Каждого ЭлМассива Из сзАссортимент Цикл
		Если ЭлМассива.ЭтоГруппа Тогда			
			парСписокГрупп.Добавить(ЭлМассива);
		ИначеЕсли ЗначениеЗаполнено(ЭлМассива.Родитель) Тогда
			парСписокГрупп.Добавить(ЭлМассива.Родитель);							
		КонецЕсли;		
	КонецЦикла;
	
	ДопНастройкиАгента = СведенияАгента.ДополнительныеНастройки.Получить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ПометкаУдаления,
	|	Номенклатура.Наименование,
	|	Номенклатура.Родитель.Ссылка КАК Родитель
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ (&СписокГрупп)
	|	И Номенклатура.ЭтоГруппа 
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ"); 
	
	Запрос.УстановитьПараметр("СписокГрупп", парСписокГрупп);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокГрупп = РезультатЗапроса.Выбрать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Категории.Ссылка КАК Ссылка,
	|	Категории.ПометкаУдаления,
	|	Категории.Код,
	|	Категории.Наименование КАК Наименование,
	|	Категории.Родитель.Ссылка КАК Родитель
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК Категории
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	СписокКатегорий = Запрос.Выполнить().Выбрать();
	
	// Выгружаем спарвочник номенклатуры
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ИдСпр = "D6D52ADA-0F38-4112-AF3C-2F1E425A43D1";
	
		ДобавитьПоле("GUID", ИдСпр);
		
		ДобавитьПоле("Comment", "Справочник.Номенклатура");	
	
		УстановитьПризнакОчисткиСправочника(ИдСпр);
				
		// Выгрузка группировок справочника номенклатура
		ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");
		
			// Объявление группировки поиерархии
			ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
			
			ДобавитьПоле("GUID", "8E502A85-8DD4-41CF-A7A4-17AB50872D36");
			
			ДобавитьПоле("Comment", "Элементы группировки по иерархии");
			
				// Элементы группировки иерархии
				ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");	
			
					СпВГ = Новый СписокЗначений;
			 	
					Пока СписокГрупп.Следующий() Цикл	
						
						Если СпВГ.НайтиПоЗначению(СписокГрупп.Ссылка) = Неопределено Тогда
							СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокГрупп);
							//Если ЗначениеЗаполнено(СписокГрупп.Родитель) Тогда
								СтруктураПолей.Вставить("ParId", СписокГрупп.Родитель);							
								ЗаписатьЭлементВДокументОбмена(СтруктураПолей);	
								СпВГ.Добавить(СписокГрупп.Ссылка);
							//КонецЕсли;                        							
						КонецЕсли;                   					
						
					КонецЦикла;
									
				ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS
						
			ДокОбмена.ЗаписатьКонецЭлемента();      //GROUP
			
			// Объявление группировки по категориям номенклатуры
            ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
			
			ДобавитьПоле("GUID", "E42DA5B9-E29B-43E1-B7E3-9B500879D6B7");
			
			ДобавитьПоле("Comment", "Элементы группировки по категориям");
			
				// Элементы группировки по категориям
				ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");	
				
					Пока СписокКатегорий.Следующий() Цикл
						
						СтруктураПолей = Новый Структура;
						СтруктураПолей.Вставить("GUID", 	 СписокКатегорий.Ссылка.УникальныйИдентификатор());												
						//Если ЗначениеЗаполнено(СписокКатегорий.Родитель) Тогда
							СтруктураПолей.Вставить("ParId", СписокКатегорий.Родитель);
						//КонецЕсли;
						СтруктураПолей.Вставить("Name", 	 СписокКатегорий.Наименование);
						ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
						
					КонецЦикла;
					
				ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS
				
			ДокОбмена.ЗаписатьКонецЭлемента();      //GROUP
			
		ДокОбмена.ЗаписатьКонецЭлемента();        	//GROUPS
			
	// Ниже идет код, касающийся выгрузки непосредственно элементов справочника	
	сзСклады 	  = Новый СписокЗначений;	
	сзСклады.ЗагрузитьЗначения(СведенияАгента.СписокСкладов.Склады.ВыгрузитьКолонку("Склад"));
	
	СписокВыгруженныхГрупп = Новый СписокЗначений;  		
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоНоменклатуре());
	
	Запрос.УстановитьПараметр("Период", 	 ТекущаяДата());
	Запрос.УстановитьПараметр("Ассортимент", сзАссортимент);
	Запрос.УстановитьПараметр("Склады",      сзСклады);
		                                    
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВсегоТиповЦен = тзКатегорииЦен.Количество();	
	ВсегоСкладов  = сзСклады.Количество();
	
	// Выгрузка элементов справочника
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	ДобавитьПоле("Comment", "Элементы справочника 'Номенклатура'");
	
	ВсегоЭлементов = Выборка.Количество();
	
	РежимВыгрузкиКодов = Константы.кпкРежимВыгрузкиКодов.Получить();
	
	СчЭлементов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		СчЭлементов = СчЭлементов + 1;
		
		ПроцентВыгрузки = Окр(СчЭлементов/ВсегоЭлементов*100, 0);		
		
		#Если Клиент Тогда
			Состояние("Выгрузка номенклатуры: " + ПроцентВыгрузки + "%");			
			ОбработкаПрерыванияПользователя();
		#КонецЕсли

		ТекНоменклатура = Выборка.Ссылка;
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);						
		
		Если РежимВыгрузкиКодов = 1 Тогда					
			СтрКод = ТекНоменклатура.Ссылка.Артикул;			
		ИначеЕсли РежимВыгрузкиКодов = 2 Тогда					
			СтрКод = ТекНоменклатура.Ссылка.Код;
		Иначе
			СтрКод = ""
		КонецЕсли; 		
				
		ЕдЦены = ПолучитьБазовуюЕдиницу(ТекНоменклатура);
		
		ЭтоУслуга = ТекНоменклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		
		СтруктураПолей.Вставить("Code", СтрКод);
		СтруктураПолей.Вставить("A02",  ТекНоменклатура.Родитель.Ссылка);
		СтруктураПолей.Вставить("A04",  Ценообразование.ПолучитьСтавкуНДС(ТекНоменклатура.СтавкаНДС));
		СтруктураПолей.Вставить("A05",  ТекНоменклатура.НоменклатурнаяГруппа);
		СтруктураПолей.Вставить("A06",  ЕдЦены);
		СтруктураПолей.Вставить("A08",  ТекНоменклатура.ВестиУчетПоХарактеристикам);
		СтруктураПолей.Вставить("A011", Выборка.СвободныйОстаток);
		СтруктураПолей.Вставить("A013", ТекНоменклатура.ЕдиницаХраненияОстатков);
		СтруктураПолей.Вставить("A014", ТекНоменклатура.Весовой);
		СтруктураПолей.Вставить("A015", ЭтоУслуга);
        СтруктураПолей.Вставить("A035", ТекНоменклатура.НаименованиеПолное);
		ЕстьОстатки = Выборка.СвободныйОстаток > 0;
		СтруктураПолей.Вставить("A037", ЕстьОстатки);
		СтруктураПолей.Вставить("A042", ТекНоменклатура.ДополнительноеОписаниеНоменклатуры);
		СтруктураПолей.Вставить("A043", ТекНоменклатура.ОсновноеИзображение);
		СтруктураПолей.Вставить("A044", СчЭлементов);
		
		ВыборкаАкции = Выборка.Выбрать();
		
		Если ВыборкаАкции.Следующий() Тогда
			СтруктураПолей.Вставить("A038", ?(ЗначениеЗаполнено(ВыборкаАкции.Акция), Истина, Ложь));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МинимальныйТипЦены) Тогда
			ЗначениеМинЦены = Ценообразование.ПолучитьЦенуНоменклатуры(ТекНоменклатура, , МинимальныйТипЦены, 
																	   ТекущаяДата(), ЕдЦены, мВалютаРегламентированногоУчета);
			СтруктураПолей.Вставить("A040", ЗначениеМинЦены);
		КонецЕсли;
		 		
		Если ЗначениеЗаполнено(АвтоСклад) Тогда
			СтруктураПолей.Вставить("A041", ПолучитьОстатокТовараНаПередвижномСкладе(ТекНоменклатура, ОстаткиАвтоСклада));
		КонецЕсли;
		
		
		
		// Выгружаем цены в разрезе типов цен
		КолВыгрТиповЦен = 0;
		
		Для Каждого СтрокаТабЦен Из тзКатегорииЦен Цикл   
			Если КолВыгрТиповЦен = 10 Тогда
				Прервать;
			КонецЕсли;
			ТекТипЦены = СтрокаТабЦен.ТипыЦен;  
			ТекЦена = Ценообразование.ПолучитьЦенуНоменклатуры(ТекНоменклатура, , ТекТипЦены, ТекущаяДата(), ЕдЦены, 
															   мВалютаРегламентированногоУчета);			
			СтруктураПолей.Вставить("A02" + Строка(КолВыгрТиповЦен), ТекЦена);							
			КолВыгрТиповЦен = КолВыгрТиповЦен + 1;			
		КонецЦикла;  
			
		// Выгружаем остатки по складам
		СписокОстатков = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ТабОстатков = Новый ТаблицаЗначений;
		ТабОстатков.Колонки.Добавить("Склад");
		ТабОстатков.Колонки.Добавить("Остаток");
		
		Для Каждого ЭлСклада Из сзСклады Цикл
			СписокОстатков.Сбросить();
			ТекСклад = ЭлСклада.Значение;
			СтрОст = ТабОстатков.Добавить();
			СтрОст.Склад   = ТекСклад;
			СтрОст.Остаток = 0;
			Если СписокОстатков.НайтиСледующий(ТекСклад) Тогда								
				СтрОст.Остаток = СписокОстатков.СвободныйОстаток;						
			КонецЕсли;
		КонецЦикла;
		
		КолВыгрСкладов = 0;
		
		Для Каждого СтрокаОст Из ТабОстатков Цикл   
			Если КолВыгрСкладов = 5 Тогда
				Прервать;
			КонецЕсли;			
			СтруктураПолей.Вставить("A03" + Строка(КолВыгрСкладов), СтрокаОст.Остаток);							
			КолВыгрСкладов = КолВыгрСкладов + 1;			
		КонецЦикла;   

		///////////////////////////
		
		Если ТекНоменклатура.Родитель <> Справочники.Контрагенты.ПустаяСсылка() И ТекНоменклатура.Родитель <> Null Тогда
			СтруктураПолей.Вставить("GrpId0", ТекНоменклатура.Родитель);
		КонецЕсли;
		
		Если ТекНоменклатура.НоменклатурнаяГруппа <> Справочники.НоменклатурныеГруппы.ПустаяСсылка() 
			И ТекНоменклатура.НоменклатурнаяГруппа <> Null Тогда
			СтруктураПолей.Вставить("GrpId1", ТекНоменклатура.НоменклатурнаяГруппа);
		КонецЕсли;
		
		// Во втором параметре передается Ложь - это означает,
		// что не закрывает тег "Item", его закрытие производится ниже
		//ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
		ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
		
		КолТиповЦен = ВсегоТиповЦен - КолВыгрТиповЦен;
		КолСкладов  = ВсегоСкладов  - КолВыгрСкладов;
		
		ОбщееУсловие = КолТиповЦен > 0 или КолСкладов > 0; 
		
		Если ОбщееУсловие Тогда	   			
			
			//Заполняем табличные части справочника
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
			
			Если КолСкладов > 0 Тогда
				
				//Заполняем табличную часть остатков		
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
				
				ДобавитьПоле("GUID", "AF0A6972-4BCA-4652-A3CF-8EBC1ED1EE0D");
				
				ДобавитьПоле("Comment", "Табличная часть 'Остатки'");
				
				Цел5 = Цел(КолСкладов/5) + 1;
				
				Для СчЦел = 1 По Цел5 Цикл
					
					ОстСкладовТЧ = Мин(КолСкладов, 5);
					
					Если ОстСкладовТЧ <= 0 Тогда Продолжить; КонецЕсли;
					
					СтруктураПолей = Новый Структура;
					СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
					СтруктураПолей.Вставить("CtlgId", ТекНоменклатура);
					СтруктураПолей.Вставить("A06",    СчЦел);
					
					Для СчТЧ = 1 По ОстСкладовТЧ Цикл
						НомерСтроки = КолВыгрСкладов + СчТЧ - 1;
						Если НомерСтроки > ТабОстатков.Количество()-1 Тогда
							Прервать;
						КонецЕсли;
						СтрокаОстатка = ТабОстатков.Получить(НомерСтроки);
						ТекОстаток = 0;
						Если Не СтрокаОстатка = Неопределено Тогда
							ТекОстаток = СтрокаОстатка.Остаток;
						КонецЕсли;
						СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекОстаток);							
					КонецЦикла;
					
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);	
					
					КолВыгрСкладов = КолВыгрСкладов + СчТЧ - 1;
						
					КолСкладов = КолСкладов - ОстСкладовТЧ;
					
				КонецЦикла;			
				
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE
				
			КонецЕсли;			
			
			Если КолТиповЦен > 0 Тогда
				
				// Заполняем табличную часть ценами
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
			
					ДобавитьПоле("GUID", "7F72AED2-94F7-4165-B112-C7A69FEA70CC");
					
					ДобавитьПоле("Comment", "Табличная часть 'Цены'");
				
					Цел10 = Цел(КолТиповЦен/10) + 1;
					
					Для СчЦел = 1 По Цел10 Цикл
						
						ОстТиповЦенТЧ = Мин(КолТиповЦен, 10);
						
						Если ОстТиповЦенТЧ <= 0 Тогда Продолжить; КонецЕсли;
						
						СтруктураПолей = Новый Структура;
						СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
						СтруктураПолей.Вставить("CtlgId", ТекНоменклатура);
						СтруктураПолей.Вставить("A011",   СчЦел);
						
						Для СчТЧ = 1 По ОстТиповЦенТЧ Цикл 							
							НомерСтроки = КолВыгрТиповЦен + СчТЧ - 1;
							Если НомерСтроки > тзКатегорииЦен.Количество()-1 Тогда
								Прервать;
							КонецЕсли;
							СтрокаТабЦен = тзКатегорииЦен.Получить(КолВыгрТиповЦен + СчТЧ - 1);
							Если Не СтрокаТабЦен = Неопределено Тогда
								ТекТипЦены = СтрокаТабЦен.ТипыЦен;    			
								ТекЦена = Ценообразование.ПолучитьЦенуНоменклатуры(ТекНоменклатура, , ТекТипЦены, ТекущаяДата(),
																				   ЕдЦены, мВалютаРегламентированногоУчета);			
								СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекЦена);							
							КонецЕсли;							
						КонецЦикла;
						
						ЗаписатьЭлементВДокументОбмена(СтруктураПолей);	
						
						КолВыгрТиповЦен = КолВыгрТиповЦен + СчТЧ - 1;
						
						КолТиповЦен = КолТиповЦен - ОстТиповЦенТЧ;
						
					КонецЦикла;
							
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE			
			
			КонецЕсли;
		
		ДокОбмена.ЗаписатьКонецЭлемента();     //TABLES
		
		КонецЕсли;
		
		// Закрываем тег ITEM, который был открыт при вызове
		// процедуры "ЗаписатьЭлементВДокументОбмена"
		ДокОбмена.ЗаписатьКонецЭлемента();     //ITEM
                                            
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента();          //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента();          // CATALOG
	
	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
	
	// В разрезе серий Тогда
	Если РежимВыгрузкиОстатков = 2 Тогда
		ОповеститьОСобытии("Выгрузка остатков в разрезе серий не поддерживается в приложении ""Мобильная торговля""!" + Символы.ПС + 
						   "Будет произведена выгрузка без учета разреза!");
	КонецЕсли;
	
	// Выгружаем сопутствующие данные
	Если Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() и РежимВыгрузкиОстатков = 1 Тогда		
		#Если Клиент Тогда
			Состояние("Выгрузка характеристик номенклатуры...");			
			ОбработкаПрерыванияПользователя();
		#КонецЕсли      
		ВыгрузитьХарактеристикиНоменклатуры();
	Иначе
		// Если не выгружаются характеристики, нужно передавать команду
		// на их очистку, если они были раньше выгружены
		ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");		
			ДобавитьПоле("GUID", "CC552C31-F7DE-4259-A6E3-66EF765D3B43");									
			ДобавитьПоле("KILLALL", "1");                	                    			
		ДокОбмена.ЗаписатьКонецЭлемента();	
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("Выгрузка единиц измерения...");			
		ОбработкаПрерыванияПользователя();
	#КонецЕсли
	
	ВыгрузитьЕдиницыИзмерения();		
	
КонецПроцедуры // ВыгрузитьНоменклатуру()

// Выгрузка Матриц товаров и 
// справочника Рейтинги товаров
Процедура ВыгрузитьМатрицыТоваров()

	// Выгрузка Рейтингов товаров	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкРейтингиТоваров.Наименование,
	|	кпкРейтингиТоваров.Цвет,
	|	кпкРейтингиТоваров.Ссылка
	|ИЗ
	|	Справочник.кпкРейтингиТоваров КАК кпкРейтингиТоваров");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "F86E787D-4FBF-4E0D-8D65-4177B86A5E1B");
	
	ДобавитьПоле("Comment", "Справочник.РейтингиТоваров");	
	
	// Передаем команду на очистку справочника перед загрузкой
	ДобавитьПоле("KILLALL", "1"); 
	 
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока Выборка.Следующий() Цикл		
			Цвет = кпкАгентПлюс.ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему(Выборка.Цвет.Получить(), Истина);
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("A01", Цвет);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
    //////////////////////////////////////////////////
	
	// Выгрузка Матриц товаров	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкМатрицаТоваровСостав.Идентификатор,
	|	кпкМатрицаТоваровСостав.Номенклатура,
	|	кпкМатрицаТоваровСостав.Рейтинг,
	|	кпкМатрицаТоваровСостав.ЗначениеРейтинга,
	|	кпкМатрицаТоваровСостав.Ссылка.Категория КАК Категория,
	|	кпкМатрицаТоваровСостав.Ссылка
	|ИЗ
	|	Справочник.кпкМатрицаТоваров.Состав КАК кпкМатрицаТоваровСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.кпкМатрицаТоваров.Агенты КАК кпкМатрицаТоваровАгенты
	|		ПО кпкМатрицаТоваровСостав.Ссылка = кпкМатрицаТоваровАгенты.Ссылка
	|ГДЕ
	|	кпкМатрицаТоваровСостав.Ссылка.НачПериода <= &ТекПериод
	|	И ВЫБОР
	|			КОГДА кпкМатрицаТоваровСостав.Ссылка.КонПериода <> &ПустаяДата
	|				ТОГДА кпкМатрицаТоваровСостав.Ссылка.КонПериода
	|			ИНАЧЕ &ТекПериод
	|		КОНЕЦ >= &ТекПериод
	|	И кпкМатрицаТоваровСостав.Идентификатор <> """"
	|	И кпкМатрицаТоваровСостав.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И кпкМатрицаТоваровАгенты.Агент = &Агент");
	
	Запрос.УстановитьПараметр("ТекПериод",  ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	ТоварыКатегории = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "EFAD4C8E-C7C3-40A4-885C-9F10DF65967B");
	
	ДобавитьПоле("Comment", "Справочник.МатрицыТоваров");	
	
	// Передаем команду на очистку справочника перед загрузкой
	ДобавитьПоле("KILLALL", "1"); 
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	Пока ТоварыКатегории.Следующий() Цикл		
		
		Если ТипЗнч(ТоварыКатегории.Номенклатура) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			
			ВыборкаНом = Справочники.Номенклатура.Выбрать(, , Новый Структура("НоменклатурнаяГруппа", ТоварыКатегории.Номенклатура));
			Пока ВыборкаНом.Следующий()Цикл
				Если ВыборкаНом.ПометкаУдаления Тогда Продолжить; КонецЕсли;
				
				СтруктураПолей = Новый Структура;
				СтруктураПолей.Вставить("GUID",	Новый УникальныйИдентификатор());
				СтруктураПолей.Вставить("A01",  ТоварыКатегории.Категория);
				СтруктураПолей.Вставить("A02",  ВыборкаНом.Ссылка);
				СтруктураПолей.Вставить("A03",  ТоварыКатегории.Рейтинг);
				СтруктураПолей.Вставить("A04",  ТоварыКатегории.ЗначениеРейтинга);
				
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
				
			КонецЦикла;				
		Иначе
			
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("GUID",	Новый УникальныйИдентификатор());
			СтруктураПолей.Вставить("A01",  ТоварыКатегории.Категория);
			СтруктураПолей.Вставить("A02",  ТоварыКатегории.Номенклатура);
			СтруктураПолей.Вставить("A03",  ТоварыКатегории.Рейтинг);
			СтруктураПолей.Вставить("A04",  ТоварыКатегории.ЗначениеРейтинга);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
			
		КонецЕсли;		
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента();		//ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента();      //CATALOG
	//////////////////////////////////////////////////

КонецПроцедуры // ВыгрузитьМатрицыТоваров()

Процедура ВыгрузитьХарактеристикиНоменклатуры()
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ИдСпр = "CC552C31-F7DE-4259-A6E3-66EF765D3B43";
	
	ДобавитьПоле("GUID", ИдСпр);
	
	ДобавитьПоле("Comment", "Справочник.ХарактеристикиНоменклатуры");
	
	УстановитьПризнакОчисткиСправочника(ИдСпр);
	
	Если ЗначениеЗаполнено(АвтоСклад) Тогда
		ОстаткиАвтоСклада = ПолучитьОстаткиТоваровНаПередвижномСкладе();
	КонецЕсли;		
	
	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
		
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоНоменклатуре(Истина));
	
	Запрос.УстановитьПараметр("Период", 	 ТекущаяДата());
	Запрос.УстановитьПараметр("Ассортимент", сзАссортимент);
	Запрос.УстановитьПараметр("Склады",      сзСклады);
		                                    
	Результат = Запрос.Выполнить();	
	
	ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВсегоТиповЦен = тзКатегорииЦен.Количество();	
	ВсегоСкладов  = сзСклады.Количество();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ТекНоменклатура = ВыборкаНоменклатура.Номенклатура;

		Если ТекНоменклатура.ЭтоГруппа Тогда Продолжить; КонецЕсли;
		
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаХарактеристика.Следующий() Цикл
			
			ТекХарактеристика = ВыборкаХарактеристика.Ссылка;
			
			НаимХарактеристики = Строка(ТекХарактеристика);
			
			Если ТипЗнч(ТекХарактеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
				Владелец = ТекХарактеристика;				
				Если Константы.кпкВыгружатьПолноеНазваниеХарактеристик.Получить() Тогда
					НаимХарактеристики = ТекХарактеристика.Владелец.Наименование + "(" + ТекХарактеристика.Наименование + ")";
				КонецЕсли;				
			Иначе
				Владелец = ТекНоменклатура;								
			КонецЕсли;    	
			
			ЕдЦены = ПолучитьБазовуюЕдиницу(ТекНоменклатура);	
			
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Владелец);		
			СтруктураПолей.Вставить("Name", НаимХарактеристики);
			СтруктураПолей.Вставить("A02",  ТекНоменклатура);
			СтруктураПолей.Вставить("A04",  ВыборкаХарактеристика.СвободныйОстаток);
			СтруктураПолей.Вставить("A037", ЗначениеЗаполнено(ВыборкаХарактеристика.СвободныйОстаток));
			
			ВыборкаАкции = ВыборкаХарактеристика.Выбрать();
			Если ВыборкаАкции.Следующий() Тогда
				СтруктураПолей.Вставить("A038", ?(ЗначениеЗаполнено(ВыборкаАкции.Акция), Истина, Ложь));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(АвтоСклад) Тогда
				СтруктураПолей.Вставить("A039", ПолучитьОстатокТовараНаПередвижномСкладе(ТекХарактеристика, ОстаткиАвтоСклада));
			КонецЕсли;  			
			
			// Выгружаем цены в разрезе типов цен
			КолВыгрТиповЦен = 0;
			
			Для Каждого СтрокаТабЦен Из тзКатегорииЦен Цикл   
				Если КолВыгрТиповЦен = 10 Тогда
					Прервать;
				КонецЕсли;
				ТекТипЦены = СтрокаТабЦен.ТипыЦен;  
				ТекЦена = Ценообразование.ПолучитьЦенуНоменклатуры(ТекНоменклатура, ТекХарактеристика, ТекТипЦены, 
																   ТекущаяДата(), ЕдЦены, мВалютаРегламентированногоУчета);			
				СтруктураПолей.Вставить("A02" + Строка(КолВыгрТиповЦен), ТекЦена);							
				КолВыгрТиповЦен = КолВыгрТиповЦен + 1;			
			КонецЦикла;  
			
			// Выгружаем остатки по складам
			СписокОстатков = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ТабОстатков = Новый ТаблицаЗначений;
			ТабОстатков.Колонки.Добавить("Склад");
			ТабОстатков.Колонки.Добавить("Остаток");
			
			Для Каждого ЭлСклада Из сзСклады Цикл
				СписокОстатков.Сбросить();
				ТекСклад = ЭлСклада.Значение;
				СтрОст = ТабОстатков.Добавить();
				СтрОст.Склад   = ТекСклад;
				СтрОст.Остаток = 0;
				Если СписокОстатков.НайтиСледующий(ТекСклад) Тогда								
					СтрОст.Остаток = СписокОстатков.СвободныйОстаток;						
				КонецЕсли;
			КонецЦикла;
			
			КолВыгрСкладов = 0;
			
			Для Каждого СтрокаОст Из ТабОстатков Цикл   
				Если КолВыгрСкладов = 5 Тогда
					Прервать;
				КонецЕсли;			
				СтруктураПолей.Вставить("A03" + Строка(КолВыгрСкладов), СтрокаОст.Остаток);							
				КолВыгрСкладов = КолВыгрСкладов + 1;			
			КонецЦикла;   
			
			// Во втором параметре передается Ложь - это означает,
			// что не закрывает тег "Item", его закрытие производится ниже		
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
			 			
			КолТиповЦен = ВсегоТиповЦен - КолВыгрТиповЦен;
			КолСкладов  = ВсегоСкладов  - КолВыгрСкладов;
			
			ОбщееУсловие = КолТиповЦен > 0 или КолСкладов > 0; 			
			
			Если ОбщееУсловие Тогда	   			
				
				//Заполняем табличные части справочника
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
				
				Если КолСкладов > 0 Тогда
				
				//Заполняем табличную часть остатков		
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
				
				ДобавитьПоле("GUID", "19481E88-8575-4720-80E6-222816C754E4");
				
				ДобавитьПоле("Comment", "Табличная часть 'Остатки'");
					
				Цел5 = Цел(КолСкладов/5) + 1;
				
				Для СчЦел = 1 По Цел5 Цикл
					
					ОстСкладовТЧ = Мин(КолСкладов, 5);
					
					Если ОстСкладовТЧ <= 0 Тогда Продолжить; КонецЕсли;
					
					СтруктураПолей = Новый Структура;
					СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
					СтруктураПолей.Вставить("CtlgId", ТекНоменклатура);
					СтруктураПолей.Вставить("A06",    СчЦел);
					
					Для СчТЧ = 1 По ОстСкладовТЧ Цикл
						НомерСтроки = КолВыгрСкладов + СчТЧ - 1;
						Если НомерСтроки > ТабОстатков.Количество()-1 Тогда
							Прервать;
						КонецЕсли;
						СтрокаОстатка = ТабОстатков.Получить(НомерСтроки);
						ТекОстаток = 0;
						Если Не СтрокаОстатка = Неопределено Тогда
							ТекОстаток = СтрокаОстатка.Остаток;
						КонецЕсли;
						СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекОстаток);							
					КонецЦикла;
					
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);	
					
					КолВыгрСкладов = КолВыгрСкладов + СчТЧ - 1;
						
					КолСкладов = КолСкладов - ОстСкладовТЧ;
					
				КонецЦикла;			
				
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE
				
			КонецЕсли;			
			
			Если КолТиповЦен > 0 Тогда
				
				// Заполняем табличную часть ценами
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
			
					ДобавитьПоле("GUID", "80452C60-B442-4DA9-A048-42F63270CA14");	
					
					ДобавитьПоле("Comment", "Табличная часть 'Цены'");
				
					Цел10 = Цел(КолТиповЦен/10) + 1;
					
					Для СчЦел = 1 По Цел10 Цикл
						
						ОстТиповЦенТЧ = Мин(КолТиповЦен, 10);
						
						Если ОстТиповЦенТЧ <= 0 Тогда Продолжить; КонецЕсли;
						
						СтруктураПолей = Новый Структура;
						СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
						СтруктураПолей.Вставить("CtlgId", ТекНоменклатура);
						СтруктураПолей.Вставить("A011",   СчЦел);
						
						Для СчТЧ = 1 По ОстТиповЦенТЧ Цикл 							
							НомерСтроки = КолВыгрТиповЦен + СчТЧ - 1;
							Если НомерСтроки > тзКатегорииЦен.Количество()-1 Тогда
								Прервать;
							КонецЕсли;
							СтрокаТабЦен = тзКатегорииЦен.Получить(КолВыгрТиповЦен + СчТЧ - 1);
							Если Не СтрокаТабЦен = Неопределено Тогда
								ТекТипЦены = СтрокаТабЦен.ТипыЦен;    			
								ТекЦена = Ценообразование.ПолучитьЦенуНоменклатуры(ТекНоменклатура, , ТекТипЦены, ТекущаяДата(),
																				   ЕдЦены, мВалютаРегламентированногоУчета);			
								СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекЦена);							
							КонецЕсли;							
						КонецЦикла;
						
						ЗаписатьЭлементВДокументОбмена(СтруктураПолей);	
						
						КолВыгрТиповЦен = КолВыгрТиповЦен + СчТЧ - 1;
						
						КолТиповЦен = КолТиповЦен - ОстТиповЦенТЧ;
						
					КонецЦикла;  
							
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE			
				
				КонецЕсли;
				
				ДокОбмена.ЗаписатьКонецЭлемента();     //TABLES			
				
			КонецЕсли;			
			
			// Закрыаем тег ITEM, который был открыт при вызове
			// процедуры "ЗаписатьЭлементВДокументОбмена"
			ДокОбмена.ЗаписатьКонецЭлемента();     //ITEM
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента();         //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента();         //CATALOG
	
КонецПроцедуры //ВыгрузитьХарактеристикиНоменклатуры

Процедура ВыгрузитьЕдиницыИзмерения()
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка,
	|	ЕдиницыИзмерения.Наименование,
	|	ЕдиницыИзмерения.ПометкаУдаления,
	|	ЕдиницыИзмерения.Владелец.Ссылка КАК Номенклатура,
	|	ЕдиницыИзмерения.Коэффициент,
	|	ЕдиницыИзмерения.Вес,
	|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Код КАК КодПоОКЕИ
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец.Ссылка В ИЕРАРХИИ(&Ассортимент)");
	
	Запрос.УстановитьПараметр("Ассортимент", сзАссортимент);
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ИдСпр = "80452C60-B442-4DA9-A048-42F63270CA14";
	
		ДобавитьПоле("GUID", ИдСпр);
		
		ДобавитьПоле("Comment", "Справочник.ЕдиницыИзмерения");
		
		УстановитьПризнакОчисткиСправочника(ИдСпр);
 
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока СписокЭлементов.Следующий() Цикл
			
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли

				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);	
				СтруктураПолей.Вставить("Code",		 СписокЭлементов.КодПоОКЕИ);
				СтруктураПолей.Вставить("A03", 		 СписокЭлементов.Номенклатура);
				СтруктураПолей.Вставить("A02", 		 СписокЭлементов.Коэффициент);
				СтруктураПолей.Вставить("A04", 		 СписокЭлементов.Вес);
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
КонецПроцедуры //ВыгрузитьЕдиницыИзмерения

Процедура ВыгрузитьКонтактнуюИнформацию()
	
	// Производим выгрузку контактной информации в один справочник
	// по всем объектам: контрагентам, торговым точкам и контактным лицам
	
	ТаблицаВидов = Новый СписокЗначений;
	ТаблицаВидов.Добавить(Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
	ТаблицаВидов.Добавить(Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица);
	ТаблицаВидов.Добавить(Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Ссылка,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	NULL КАК Адрес,
	|	NULL КАК Телефоны
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	(КонтактнаяИнформация.Объект В (&сзКлиенты)
	|			ИЛИ КонтактнаяИнформация.Объект.Владелец В (&сзКлиенты))
	|	И КонтактнаяИнформация.Вид.ВидОбъектаКонтактнойИнформации В(&Вид)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	кпкТорговыеТочки.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	кпкТорговыеТочки.Адрес,
	|	кпкТорговыеТочки.Телефоны
	|ИЗ
	|	Справочник.кпкТорговыеТочки КАК кпкТорговыеТочки
	|ГДЕ
	|	кпкТорговыеТочки.Ссылка В(&сзТорговыеТочки)");
	
	Запрос.УстановитьПараметр("сзКлиенты", 	      сзКлиентыАгента);
	Запрос.УстановитьПараметр("сзКонтактныеЛица", сзКонтактныеЛица);
	Запрос.УстановитьПараметр("сзТорговыеТочки",  сзТоргТочкиАгента);
	Запрос.УстановитьПараметр("Вид", ТаблицаВидов);
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", "85B62882-0156-4881-85BA-B8FEF05C867B");
		
		ДобавитьПоле("Comment", "Справочник.КонтактнаяИнформация");
		
		// Передаем команду на удаление всех элементов перед загрузкой
		// всегда, иначе элементы будут всегда дозаписываться, потому
		// что  идентификаторы элементов генерируются динамически
		ДокОбмена.ЗаписатьАтрибут("KILLALL", "1");
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока СписокЭлементов.Следующий() Цикл
			
			    #Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли  
				
			    ТекОбъект = СписокЭлементов.Ссылка;
				
				СтруктураПолей = Новый Структура;
				СтруктураПолей.Вставить("GUID", 	 Новый УникальныйИдентификатор());				
				
				Если ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.кпкТорговыеТочки") Тогда
					
					СтруктураПолей.Вставить("A02",СписокЭлементов.Ссылка);
					
					Если ЗначениеЗаполнено(СписокЭлементов.Адрес) Тогда  						
						СтруктураПолей.Вставить("A04", ТипыКонтактнойИнформации[Перечисления.ТипыКонтактнойИнформации.Адрес]);
						СтруктураПолей.Вставить("A05", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
						СтруктураПолей.Вставить("A06", СписокЭлементов.Адрес);						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СписокЭлементов.Телефоны) Тогда						
						СтруктураПолей.Вставить("A04", ТипыКонтактнойИнформации[Перечисления.ТипыКонтактнойИнформации.Телефон]);
						СтруктураПолей.Вставить("A05", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
						СтруктураПолей.Вставить("A06", СписокЭлементов.Телефоны);						
					КонецЕсли; 
										
				Иначе	
					
					Если ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
						СтруктураПолей.Вставить("A01", СписокЭлементов.Ссылка);
					ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
						СтруктураПолей.Вставить("A03", СписокЭлементов.Ссылка);					
					КонецЕсли;				 
					СтруктураПолей.Вставить("A04", ТипыКонтактнойИнформации[СписокЭлементов.Тип]);
					СтруктураПолей.Вставить("A05", СписокЭлементов.Вид);
					СтруктураПолей.Вставить("A06", СписокЭлементов.Представление);
					
				КонецЕсли;		
				
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
				
			КонецЦикла;
	
		ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS 
		
	ДокОбмена.ЗаписатьКонецЭлемента();      //CATALOG
	
КонецПроцедуры

// Функция формирует префикс документа по выбранному агенту и организации
//
// Параметры
//  <Организация>  - <СтравочникСсылка.Организации> - Элемент справочника организации
//  <Строка>   	   - Сформированный префикс
//
Функция ПолучитьПрефиксДокумента(Орагнизация)Экспорт

	Префикс = "";
	Префикс = СокрЛП(ПрефиксАгента) + СокрЛП(Орагнизация.Префикс);
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
			
	Возврат Префикс;
КонецФункции // ПолучитьПрефиксДокумента()

// Процедура выгрузки стартовых номеров документов
//
Процедура ВыгрузитьСтартовыеНомераДокументов()

	ТаблНумераторов = Новый ТаблицаЗначений;
	ТаблНумераторов.Колонки.Добавить("Документ");
	ТаблНумераторов.Колонки.Добавить("ИдНумератора");
	ТаблНумераторов.Колонки.Добавить("ИдОбъекта");
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "Заявки";
	СтрокаНумераторов.ИдНумератора 	= "293ff118-c039-4977-bc7b-1a73764237e0";
	СтрокаНумераторов.ИдОбъекта		= "e01e1f5c-d6e4-46e8-b923-3758b0d79bde";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "Продажи";
	СтрокаНумераторов.ИдНумератора 	= "bd6460d1-5b99-41fe-b86d-34fdd8ce98c0";
	СтрокаНумераторов.ИдОбъекта		= "7ffb418c-73c9-4883-91c5-827fa5145a3a";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "ПКО";
	СтрокаНумераторов.ИдНумератора 	= "b04b9dde-1868-4a80-9507-d66ecfeae942";
	СтрокаНумераторов.ИдОбъекта		= "749be2e0-9b00-4d7b-9d4d-88ca53327511";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "РКО";
	СтрокаНумераторов.ИдНумератора 	= "a695650b-7c77-4426-a33f-84d336a5c476";
	СтрокаНумераторов.ИдОбъекта		= "3890d435-96ba-4481-abc0-23782e15b32f";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "Мерчендайзинг";
	СтрокаНумераторов.ИдНумератора 	= "46f4a039-ebe4-4830-97a7-482b1ac1dfbe";
	СтрокаНумераторов.ИдОбъекта		= "61dee5fe-d0a8-4842-a6af-a8d33f298845";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "Посещения";
	СтрокаНумераторов.ИдНумератора 	= "d8d7b95b-6160-4aaf-a20d-7fb7fe4561d9";
	СтрокаНумераторов.ИдОбъекта		= "9f147c59-5ee8-4550-8289-12ecfe5d0617";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "Перемещения";
	СтрокаНумераторов.ИдНумератора 	= "577289c4-3526-4e6e-8506-50d45ad3066c";
	СтрокаНумераторов.ИдОбъекта		= "77525c87-cb2f-405e-a92e-6f373edeece7";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "Поступления";
	СтрокаНумераторов.ИдНумератора 	= "ad10c572-3439-49b7-8986-7dc61e267309";
	СтрокаНумераторов.ИдОбъекта		= "c9850d61-bc15-445a-8b1a-e328cc45ddae";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "Возврат";
	СтрокаНумераторов.ИдНумератора 	= "ad0bb26b-0536-46d8-8f1d-6d2aa6611311";
	СтрокаНумераторов.ИдОбъекта		= "4971b041-beab-4fa6-b1e8-10138f04fe44";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "Счета-фактуры";
	СтрокаНумераторов.ИдНумератора 	= "d0ff140d-de46-4894-86f4-f1296ba35cc1";
	СтрокаНумераторов.ИдОбъекта		= "d7d70de1-4f98-4153-82f1-12c84ebf81a5";
	
	Если ТабСтартовыеНомера.Количество() > 0 Тогда
		#Если Клиент Тогда
			Состояние("Выгрузка стартовых номеров документов.");	
		#КонецЕсли
		ДокОбмена.ЗаписатьНачалоЭлемента("NUMERATORS");
		ДокОбмена.ЗаписатьАтрибут("KILLALL", "1");
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		Для Каждого ТекСтрока Из ТабСтартовыеНомера Цикл
			СтрокаНумератора = ТаблНумераторов.Найти(ТекСтрока.Нумератор.Наименование);
			Если СтрокаНумератора <> Неопределено Тогда
				ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
				ДобавитьПоле("GUID"			, Новый УникальныйИдентификатор());
				ДобавитьПоле("NumeratorId"	, СтрокаНумератора.ИдНумератора);
				ДобавитьПоле("TypeId"		, СтрокаНумератора.ИдОбъекта);
				ДобавитьПоле("BegPeriod"	, Дата("19000101"));
				
				НомерДляРазбора = ТекСтрока.СтартовыйНомер;
				ПрефиксНомера	= ПолучитьПрефиксДокумента(ТекСтрока.Организация);
				НулевойНомер	= "00000000000";
				ЦифраНомера		= Строка(Число(СтрЗаменить(НомерДляРазбора, ПрефиксНомера, "")) - 1);
				ГотовыйНОмер	= ПрефиксНомера + Лев(НулевойНомер, (СтрДлина(НулевойНомер) + 1) - (СтрДлина(ПрефиксНомера) + СтрДлина(ЦифраНомера))) + ЦифраНомера;
				
				ДобавитьПоле("Number"		, ГотовыйНОмер);
				ДокОбмена.ЗаписатьКонецЭлемента();  //ITEM
			КонецЕсли;
		КонецЦикла;
		ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS
		ДокОбмена.ЗаписатьКонецЭлемента();  //NUMERATORS
	КонецЕсли;

КонецПроцедуры // ВыгрузитьСтартовыеНомераДокументов()


Процедура ВыгрузитьВзаиморасчеты()
	
	Перем ДатаПросрочки;
	Перем ВыделятьДокументВМУ;
	ВыделятьПросроченныеДолги	= Константы.кпкВыделятьЦветомПросроченныеДолги.Получить();
	РежимВыгрузкиДолгов 		= Константы.кпкРежимВыгрузкиДолгов.Получить();
	ВыгружатьТолькоПросроченные = Константы.кпкВыгружатьТолькоПросроченныеДолги.Получить();
	СпособРасчета			    = Константы.кпкСпособРасчетаПросроченныхДолгов.Получить();
	Просрочка 					= Константы.кпкИнтервалПросроченныхДолгов.Получить();
	
	// Режим выгрузки долгов по регистру взаиморасчетов
	Если РежимВыгрузкиДолгов = 0 Тогда   
		ИмяРегистра  = "ВзаиморасчетыСКонтрагентами";	
		ИмяИзмерения = "Сделка"; 
	Иначе  // Иначе по регистру взаиморасчеты по документам расчетов
		ИмяРегистра  = "ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов";
		ИмяИзмерения = "ДокументРасчетовСКонтрагентом"; 
	КонецЕсли;
	
	ТексУсловияДоговоров = "";
	Если ТаблицаДоговоровАгента.Количество() <> 0 Тогда
		ТексУсловияДоговоров = " ДоговорКонтрагента В ИЕРАРХИИ (&СписокДоговоров)";
	Иначе
		ТексУсловияДоговоров = " Контрагент В (&СписокКлиентов)";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.Сделка КАК Сделка,
	|	ВложенныйЗапрос.Долг КАК Долг,
	|	ВложенныйЗапрос.ДоговорКонтрагента КАК Договор
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегистрВзаиморасчетов.Организация КАК Организация,
	|		РегистрВзаиморасчетов.Контрагент КАК Контрагент,
	|		РегистрВзаиморасчетов." + ИмяИзмерения + " КАК Сделка,
	|		СУММА(РегистрВзаиморасчетов.СуммаВзаиморасчетовОстаток) КАК Долг,
	|		МИНИМУМ(РегистрВзаиморасчетов.ДоговорКонтрагента) КАК ДоговорКонтрагента
	|	ИЗ
	|		РегистрНакопления." + ИмяРегистра + ".Остатки(&ДатаКон," + ТексУсловияДоговоров + ") КАК РегистрВзаиморасчетов  	
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РегистрВзаиморасчетов.Организация,
	|		РегистрВзаиморасчетов.Контрагент,
	|		РегистрВзаиморасчетов." + ИмяИзмерения + ") КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Долг > 0
	|ИТОГИ
	|	СУММА(Долг)
	|ПО
	|	Организация,
	|	Контрагент";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаКон",     	 ТекущаяДата());	
	Запрос.УстановитьПараметр("СписокКлиентов",  сзКлиентыАгента);
	Запрос.УстановитьПараметр("СписокДоговоров", ТаблицаДоговоровАгента.ВыгрузитьКолонку("Договор"));
	
	Результат = Запрос.Выполнить();
	
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Структура тега
	КоличествоЦен = 0;
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
		ДобавитьПоле("GUID", "A93AADFA-2A35-40FE-B88A-3768825CDD31");
		
		ДобавитьПоле("Comment", "Документ.Долг");
		
		// Удаляем все документы перед загрузкой
		ДокОбмена.ЗаписатьАтрибут("KILLALL", "1");
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока ВыборкаОрганизация.Следующий() Цикл
			
			Фирма = ВыборкаОрганизация.Организация;
					
			ВыборкаКлиент = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаКлиент.Следующий() Цикл
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
			
				Клиент = ВыборкаКлиент.Контрагент;			
				
				ВыборкаДок = ВыборкаКлиент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
				Пока ВыборкаДок.Следующий() Цикл
					
					ВыделятьДокументВМУ = Ложь;
					
					ТекДата      = НачалоДня(ТекущаяДата());					
					Док          = ВыборкаДок.Сделка;
					ДокДолг      = ВыборкаДок.Долг;  
					Договор      = ВыборкаДок.Договор;
					ТоргТочка    = Справочники.кпкТорговыеТочки.ПустаяСсылка();
					КредДок      = "";
					КатегорияДок = "";
					СуммаДок 	 = ДокДолг;
					//Пересчета валют пока нет. Закоментированные строки  содержат код,
					//который пригодится для реализации пересчета в будущем.
					//СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВыборкаДок.Договор.ВалютаВзаиморасчетов,
					//																	   Док.Дата);
					//СуммаДок 	 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ДокДолг, 
					//															   мВалютаРегламентированногоУчета,
					//										  					   ВыборкаДок.Договор.ВалютаВзаиморасчетов,
					//										  					   СтруктураКурсаВзаиморасчетов.Курс, 1,
					//										  					   СтруктураКурсаВзаиморасчетов.Кратность, 1);
					
					// Когда взаиморасчеты с контрагентом ведутся по договорам
					Если Док = Неопределено Тогда 									
						ДатаВремяДок     = ТекДата;
						Комментарий      = "Долг по договору";
						ПредставлениеДок = кпкАгентПлюс.УбратьНечитаемыеСимволы(ВыборкаДок.Договор.Наименование);
						СрокДок 	  	 = ТекДата;   
						//СуммаДок 	     = ДокДолг;												
					// Когда взаиморасчеты с контрагентом ведутся по документам (сделки или  
					// документы расчетов, в зависимости от константы "РежимВыгрузкиДолгов")	
					Иначе     					
						
						КредДок = Док;
					
						Если КредДок.Пустая() Тогда
							Продолжить;
						КонецЕсли;
						
						Если ИспТочек Тогда   						
							МетаданныеТоргТочка = КредДок.Метаданные().Реквизиты.Найти("кпкТорговаяТочка");												
							Если МетаданныеТоргТочка <> Неопределено Тогда
								ДокТоргТочка = КредДок.кпкТорговаяТочка;
								Если НЕ ДокТоргТочка.Пустая() Тогда
									ТоргТочка = ДокТоргТочка;
								КонецЕсли;						
							КонецЕсли; 							
						КонецЕсли;
						
						НомерДок       	 = СокрЛП(КредДок.Номер);
						ДатаВремяДок  	 = КредДок.Дата;
						Комментарий   	 = кпкАгентПлюс.УбратьНечитаемыеСимволы(КредДок.Комментарий);
						СостДок 	     = ?(КредДок.Проведен, "1", "2");
						
						ПредставлениеДок = КредДок.Метаданные().Представление();
						
						СостДокВЦБД = Строка(кпкАгентПлюс.АПВернутьСостояниеДок(КредДок) + 8);
											
						ДатаОплаты = КредДок.Метаданные().Реквизиты.Найти("ДатаОплаты");
						
						Если ДатаОплаты = Неопределено Тогда
							СрокДок = НачалоДня(КредДок.Дата);
						Иначе
							СрокДок = НачалоДня(КредДок.ДатаОплаты);
						КонецЕсли;
						
						// Ищем в справочнике категорий нужную категорию для документа
						КатегорияДок = ВернутьКодКатегорииДокумента(КредДок, Истина);
															
					КонецЕсли;	
					
					ДатаПросрочки = СрокДок;
					
					Если ЗначениеЗаполнено(ВыборкаДок.Договор.ДопустимоеЧислоДнейЗадолженности) Тогда 
						Если СпособРасчета = Перечисления.кпкСпособыРасчетаПросроченныхДолгов.ПоДоговору Тогда
							ДатаПросрочки = СрокДок + (ВыборкаДок.Договор.ДопустимоеЧислоДнейЗадолженности * 86400);
						Иначе
							ДатаПросрочки = СрокДок + (Просрочка * 86400);
						КонецЕсли;
					Иначе
						ДатаПросрочки = СрокДок + (Просрочка * 86400);
					КонецЕсли;
					
					Если ВыгружатьТолькоПросроченные Тогда
						Если ТекущаяДата() < ДатаПросрочки Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					Если ДатаПросрочки < ТекущаяДата() И ВыделятьПросроченныеДолги Тогда
						ВыделятьДокументВМУ = Истина;
					КонецЕсли;
					
					ТекДокумент = Новый Структура("Дата, ПометкаУдаления, Проведен", ДатаВремяДок, Ложь, Истина);
					
					СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(ТекДокумент, Истина, Ложь);
					СтруктураПолей.Вставить("A01", 		 КатегорияДок);
					СтруктураПолей.Вставить("A02", 		 Фирма);
					СтруктураПолей.Вставить("A03", 		 Клиент);
					СтруктураПолей.Вставить("A04", 		 ТоргТочка);
					СтруктураПолей.Вставить("A05", 		 Договор);
					СтруктураПолей.Вставить("A06", 		 СрокДок);
					СтруктураПолей.Вставить("A07", 		 СуммаДок);
					СтруктураПолей.Вставить("A011", 	 Док);
					СтруктураПолей.Вставить("A014", 	 ВыделятьДокументВМУ);
					Если ЗначениеЗаполнено(Док) Тогда
						ПредставлениеДок = ПредставлениеДок + " №" + Док.Номер + " от " + Формат(Док.Дата, "ДФ=dd.MM.yyyy") + " ∑: " + Строка(Док.СуммаДокумента);
						СтруктураПолей.Вставить("DocNumber", Док.Номер);
						СтруктураПолей.Вставить("A015", 	 ПредставлениеДок);
						СтруктураПолей.Вставить("A08", 		 Док.Комментарий);
					КонецЕсли;
					
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
					
				КонецЦикла;
				
			КонецЦикла;  
			
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS 
	
	ДокОбмена.ЗаписатьКонецЭлемента();      //DOCUMENT
	
КонецПроцедуры //ВыгрузкаВзаиморасчетов()

// Процедура выгрузки сообщений агенту
//
Процедура ВыгрузитьСообщенияАгента()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	кпкСообщения.Ссылка КАК Ссылка,	
	|	ЛОЖЬ КАК Проведен,
	|	кпкТемыСообщенийАгенты.Ссылка.ДатаСоздания,
	|	кпкТемыСообщенийАгенты.Ссылка.Документ КАК ДокументОснование,
	|	кпкТемыСообщенийАгенты.Ссылка.Наименование КАК Тема,
	|	кпкСообщения.ТекстСообщения КАК Описание,
	|	кпкТемыСообщенийАгенты.Ссылка.ДатаНапоминания КАК Дата,
	|	ЕСТЬNULL(кпкТемыСообщенийАгенты.Ссылка.Периодичность, """") КАК Периодичность,
	|	ЕСТЬNULL(кпкТемыСообщенийАгенты.Ссылка.ПериодНапоминания, """") КАК ПериодНапоминания,
	|	кпкТемыСообщенийАгенты.Ссылка.Цвет,
	|	кпкТемыСообщенийАгенты.Ссылка.РедактироватьРасписание
	|ИЗ
	|	Справочник.кпкСообщения КАК кпкСообщения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.кпкТемыСообщений.Агенты КАК кпкТемыСообщенийАгенты
	|		ПО (кпкТемыСообщенийАгенты.Ссылка = кпкСообщения.Владелец)
	|ГДЕ
	|	кпкСообщения.ПометкаУдаления = ЛОЖЬ
	|	И кпкТемыСообщенийАгенты.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И кпкТемыСообщенийАгенты.Ссылка.ВыгружатьВКПК = ИСТИНА
	|	И кпкТемыСообщенийАгенты.Агент = &Агент";
	
	Запрос = Новый Запрос(ТекстЗапроса);
		
	Запрос.УстановитьПараметр("Агент", ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДок = Результат.Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
		ИдДок = "6956C79C-4310-4F71-AF66-0C2048F1344F";
	
		ДобавитьПоле("GUID", ИдДок);
		
		ДобавитьПоле("Comment", "Документ.Сообщение");
		
		УстановитьПризнакОчисткиДокумента(ИдДок);
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока ВыборкаДок.Следующий() Цикл  
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(ВыборкаДок, , Ложь);
				
				ДокОснование  = ?(ЗначениеЗаполнено(ВыборкаДок.ДокументОснование), 
								ВРег(ВыборкаДок.ДокументОснование.УникальныйИдентификатор()), "");
				Описание 	  =	УправлениеЭлектроннойПочтой.ПреобразоватьТекстИзХТМЛФорматаВПростой(ВыборкаДок.Описание);
				Периодичность = СтрЗаменить(ВыборкаДок.Периодичность + ВыборкаДок.ПериодНапоминания, Символы.НПП, "");
				Цвет 		  = кпкАгентПлюс.ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему(ВыборкаДок.Цвет.Получить(), Истина);
				
				СтруктураПолей.Вставить("A01", ВыборкаДок.Дата);
				СтруктураПолей.Вставить("A02", ДокОснование);
				СтруктураПолей.Вставить("A03", ВыборкаДок.Тема);
				СтруктураПолей.Вставить("A04", Описание);
				СтруктураПолей.Вставить("A06", Периодичность);
				СтруктураПолей.Вставить("A07", Цвет);
				СтруктураПолей.Вставить("A08", ВыборкаДок.РедактироватьРасписание);
								
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
			
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента();  // ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();      // DOCUMENT

КонецПроцедуры // ВыгрузитьСообщенияАгента()

Процедура ВыгрузитьПосещения()
	
	// Если нужно в МУ обратно выгружать документы перемещений,
	// то нужно закомментировать строчку ниже
	Возврат;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Посещение.Ссылка КАК Док,
	|	кпкСведенияДокумента.Агент,
	|	кпкСведенияДокумента.кпкГПСШирота КАК Широта,
	|	кпкСведенияДокумента.кпкГПСДолгота КАК Долгота,
	|	кпкСведенияДокумента.Категория
	|ИЗ
	|	Документ.кпкПосещение КАК Посещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кпкСведенияДокумента КАК кпкСведенияДокумента
	|		ПО Посещение.Ссылка = кпкСведенияДокумента.КПКДокумент
	|ГДЕ
	|	кпкСведенияДокумента.ДатаВремяСоздания МЕЖДУ &НачПериода И &КонПериода
	|	И кпкСведенияДокумента.Агент = &Агент
	|	И кпкСведенияДокумента.кпкПризнакРучногоВвода = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Посещение.МоментВремени";
	
	Интервал = 3;
	
	Запрос = Новый Запрос(ТекстЗапроса);
		
	Запрос.УстановитьПараметр("НачПериода", ТекущаяДата() - (86400 * Интервал));
	Запрос.УстановитьПараметр("КонПериода", ТекущаяДата());
	Запрос.УстановитьПараметр("Агент", 	    ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДок = Результат.Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
		ИдДок = "9F147C59-5EE8-4550-8289-12ECFE5D0617";
		
		ДобавитьПоле("GUID", ИдДок);
		
		ДобавитьПоле("Comment", "Документ.Посещение");
		
		УстановитьПризнакОчисткиДокумента(ИдДок);
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока ВыборкаДок.Следующий() Цикл  
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				Док = ВыборкаДок.Док;
				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док);
				СтруктураПолей.Вставить("A01",  	 Док.Организация);
				СтруктураПолей.Вставить("A02",  	 Док.Контрагент);
				СтруктураПолей.Вставить("A03",  	 Док.ТорговаяТочка);
				СтруктураПолей.Вставить("A04",  	 Док.Результат);
				СтруктураПолей.Вставить("A05",  	 Док.Комментарий);
				СтруктураПолей.Вставить("A06",  	 ВыборкаДок.Категория);
				СтруктураПолей.Вставить("A07",  	 ВыборкаДок.Широта);
				СтруктураПолей.Вставить("A08",  	 ВыборкаДок.Долгота);
								
				Если Док.Вопросы.Количество() > 0 Тогда 
				
					// Во втором параметре передается Ложь - это означает,
					// что не закрывает тег "Item", его закрытие производится ниже		
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
					
					ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
						
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
					
						ДобавитьПоле("GUID", "99F6A8CE-3046-4782-AB5E-557F40243749");
						
						ДобавитьПоле("Comment", "Табличная часть 'Вопросы'");
						
						Для Каждого СтрокаТаб Из Док.Вопросы Цикл				
							СтруктураПолей = Новый Структура;
							СтруктураПолей.Вставить("GUID",  Новый УникальныйИдентификатор());
							СтруктураПолей.Вставить("DocId", Док);
							СтруктураПолей.Вставить("A01",   СтрокаТаб.Вопрос);
							СтруктураПолей.Вставить("A02",   СтрокаТаб.Ответ);
							ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
						КонецЦикла;
												
						ДокОбмена.ЗаписатьКонецЭлемента();  //TABLE
									
					ДокОбмена.ЗаписатьКонецЭлемента();  //TABLES
				
					// Закрыаем тег ITEM, который был открыт при вызове
					// процедуры "ЗаписатьЭлементВДокументОбмена"
					ДокОбмена.ЗаписатьКонецЭлемента();  //ITEM
					
				Иначе
					
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
					
				КонецЕсли;
			
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента();  // ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();      // DOCUMENT
	
КонецПроцедуры

// Процедура выгрузки документов Реализация товаров и услуг в МУ
//
Процедура ВыгрузитьПродажи()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реализация.Ссылка КАК Док,
	|	кпкСведенияДокумента.Агент,
	|	кпкСведенияДокумента.кпкГПСШирота КАК Широта,
	|	кпкСведенияДокумента.кпкГПСДолгота КАК Долгота,
	|	кпкСведенияДокумента.Категория
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Реализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кпкСведенияДокумента КАК кпкСведенияДокумента
	|		ПО (Реализация.Ссылка = кпкСведенияДокумента.КПКДокумент
	|				ИЛИ Реализация.Сделка = кпкСведенияДокумента.КПКДокумент)
	|ГДЕ
	|	кпкСведенияДокумента.ДатаВремяСоздания МЕЖДУ &НачПериода И &КонПериода
	|	И кпкСведенияДокумента.Агент = &Агент
	|	И кпкСведенияДокумента.кпкПризнакРучногоВвода = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Реализация.МоментВремени";
	
	ИнтервалВыгрузки = Константы.кпкИнтервалВыгрузкиЗаказов.Получить();
	
	Запрос = Новый Запрос(ТекстЗапроса);
		
	Запрос.УстановитьПараметр("НачПериода", ТекущаяДата() - (86400 * ИнтервалВыгрузки));
	Запрос.УстановитьПараметр("КонПериода", ТекущаяДата());
	Запрос.УстановитьПараметр("Агент", 	    ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДок = Результат.Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
		ИдДок = "7FFB418C-73C9-4883-91C5-827FA5145A3A";	
	
		ДобавитьПоле("GUID", ИдДок);
		
		ДобавитьПоле("Comment", "Документ.Реализация");
		
		УстановитьПризнакОчисткиДокумента(ИдДок);
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока ВыборкаДок.Следующий() Цикл  
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				Док = ВыборкаДок.Док;
				
				КодТипаЦены = ПолучитьКодТипаЦены(Док.ТипЦен, Док);
				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док);
				
				ОбщийВес = 0;
				Для Каждого СтрокаТаб Из Док.Товары Цикл 
					ОбщийВес = ОбщийВес + СтрокаТаб.ЕдиницаИзмерения.Вес*СтрокаТаб.Количество;
				КонецЦикла;
				
				СтруктураПолей.Вставить("A01",  	 Док.Организация);
				СтруктураПолей.Вставить("A02",  	 Док.Контрагент);
				СтруктураПолей.Вставить("A03",  	 Док.кпкТорговаяТочка);
				СтруктураПолей.Вставить("A04",  	 Док.ДоговорКонтрагента);
				Если Не ПустаяСтрока(КодТипаЦены) Тогда
					СтруктураПолей.Вставить("A06", Док.ТипЦен);
				КонецЕсли;
				СтруктураПолей.Вставить("A07",  	 Док.СуммаДокумента);
				СтруктураПолей.Вставить("A08",  	 ОбщийВес);
				СтруктураПолей.Вставить("A09",  	 Док.Комментарий);
				СтруктураПолей.Вставить("A010",  	 ВыборкаДок.Категория);
				Если ЗначениеЗаполнено(Док.Сделка) И ТипЗнч(Док.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					СтруктураПолей.Вставить("A011",  	 Док.Сделка);
				КонецЕсли;
				СтруктураПолей.Вставить("A012",  	 ВыборкаДок.Широта);
				СтруктураПолей.Вставить("A013",  	 ВыборкаДок.Долгота);
								
				Если Док.Товары.Количество() + Док.Услуги.Количество() > 0 Тогда 
				
					// Во втором параметре передается Ложь - это означает,
					// что не закрывает тег "Item", его закрытие производится ниже		
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
					
					ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
						
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
					
						ДобавитьПоле("GUID", "E4D61E0A-1D62-48D7-B70C-BCBA935D377A");
						
						ДобавитьПоле("Comment", "Табличная часть 'Товары'");
						
						Для Каждого СтрокаТаб Из Док.Товары	Цикл							
							СтруктураПолей = Новый Структура;
							СтруктураПолей.Вставить("GUID",  Новый УникальныйИдентификатор());
							СтруктураПолей.Вставить("DocId", Док);
							СтруктураПолей.Вставить("A01",   СтрокаТаб.Номенклатура);
							СтруктураПолей.Вставить("A02",   СтрокаТаб.ХарактеристикаНоменклатуры);
							СтруктураПолей.Вставить("A03",   СтрокаТаб.ЕдиницаИзмерения);
							СтруктураПолей.Вставить("A04",   СтрокаТаб.Количество);							
							СтруктураПолей.Вставить("A05",   СтрокаТаб.Цена);
							СтруктураПолей.Вставить("A06",   СтрокаТаб.Сумма);
							СтруктураПолей.Вставить("A09",   СтрокаТаб.ПроцентСкидкиНаценки);
							СтруктураПолей.Вставить("A012",  (СтрокаТаб.Количество*СтрокаТаб.Цена) - СтрокаТаб.Сумма);
							СтруктураПолей.Вставить("A07",   СтрокаТаб.СуммаНДС);
							СтруктураПолей.Вставить("A08",   СтрокаТаб.ЕдиницаИзмерения.Вес*СтрокаТаб.Количество);
							СтруктураПолей.Вставить("A010",  Ценообразование.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС));
							Если ТипЗнч(СтрокаТаб.Склад) = Тип("СправочникСсылка.Склады") Тогда
								СтруктураПолей.Вставить("A011",  СтрокаТаб.Склад);
							КонецЕсли;    
							ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
						КонецЦикла;
						
						Для Каждого СтрокаТаб Из Док.Услуги	Цикл				
							СтруктураПолей = Новый Структура;
							СтруктураПолей.Вставить("GUID",  Новый УникальныйИдентификатор());
							СтруктураПолей.Вставить("DocId", Док);
							СтруктураПолей.Вставить("A01",   СтрокаТаб.Номенклатура);														
							СтруктураПолей.Вставить("A04",   СтрокаТаб.Количество);
							СтруктураПолей.Вставить("A05",   СтрокаТаб.Цена);
							СтруктураПолей.Вставить("A06",   СтрокаТаб.Сумма);
							СтруктураПолей.Вставить("A07",   СтрокаТаб.СуммаНДС);							
							СтруктураПолей.Вставить("A09",   СтрокаТаб.ПроцентСкидкиНаценки);
							СтруктураПолей.Вставить("A012",  (СтрокаТаб.Количество*СтрокаТаб.Цена) - СтрокаТаб.Сумма);
							СтруктураПолей.Вставить("A010",  Ценообразование.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС));							
							ЗаписатьЭлементВДокументОбмена(СтруктураПолей);			
						КонецЦикла;
						
						ДокОбмена.ЗаписатьКонецЭлемента();  //TABLE
									
					ДокОбмена.ЗаписатьКонецЭлемента();  //TABLES
				
					// Закрыаем тег ITEM, который был открыт при вызове
					// процедуры "ЗаписатьЭлементВДокументОбмена"
					ДокОбмена.ЗаписатьКонецЭлемента();  //ITEM
					
				Иначе
					
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
					
				КонецЕсли;
			
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента();  // ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();      // DOCUMENT

КонецПроцедуры // ВыгрузитьПродажи()

Процедура ВыгрузитьЗаказыПокупателей()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Заказ.Ссылка КАК Док,
	|	кпкСведенияДокумента.Агент,
	|	кпкСведенияДокумента.кпкГПСШирота КАК Широта,
	|	кпкСведенияДокумента.кпкГПСДолгота КАК Долгота,
	|	кпкСведенияДокумента.Категория
	|ИЗ
	|	Документ.ЗаказПокупателя КАК Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кпкСведенияДокумента КАК кпкСведенияДокумента
	|		ПО Заказ.Ссылка = кпкСведенияДокумента.КПКДокумент
	|ГДЕ
	|	кпкСведенияДокумента.ДатаВремяСоздания МЕЖДУ &НачПериода И &КонПериода
	|	И кпкСведенияДокумента.Агент = &Агент
	|	И кпкСведенияДокумента.кпкПризнакРучногоВвода = ЛОЖЬ
	|	И Заказ.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ.МоментВремени";
	
	ИнтервалЗаказов = Константы.кпкИнтервалВыгрузкиЗаказов.Получить();
	
	Запрос = Новый Запрос(ТекстЗапроса);
		
	Запрос.УстановитьПараметр("НачПериода", ТекущаяДата() - (86400 * ИнтервалЗаказов));
	Запрос.УстановитьПараметр("КонПериода", ТекущаяДата());
	Запрос.УстановитьПараметр("Агент", 	    ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДок = Результат.Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
		ИдДок = "E01E1F5C-D6E4-46E8-B923-3758B0D79BDE";
		
		ДобавитьПоле("GUID", ИдДок);
		
		ДобавитьПоле("Comment", "Документ.ЗаказПокупателя");
		
		УстановитьПризнакОчисткиДокумента(ИдДок);
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока ВыборкаДок.Следующий() Цикл  
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				Док = ВыборкаДок.Док;
				
				КодТипаЦены = ПолучитьКодТипаЦены(Док.ТипЦен, Док);
				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док);
				
				ОбщийВес = 0;
				Для Каждого СтрокаТаб Из Док.Товары Цикл 
					ОбщийВес = ОбщийВес + СтрокаТаб.ЕдиницаИзмерения.Вес*СтрокаТаб.Количество;
				КонецЦикла;
				
				СтруктураПолей.Вставить("A02",  	 Док.Организация);
				СтруктураПолей.Вставить("A03",  	 Док.Контрагент);
				СтруктураПолей.Вставить("A04",  	 Док.кпкТорговаяТочка);
				СтруктураПолей.Вставить("A05",  	 Док.ДоговорКонтрагента);
				Если Не ПустаяСтрока(КодТипаЦены) Тогда
					СтруктураПолей.Вставить("A07",  	 Док.ТипЦен);
				КонецЕсли;
				СтруктураПолей.Вставить("A08",  	 Док.СуммаДокумента);
				СтруктураПолей.Вставить("A09",  	 ОбщийВес);
				СтруктураПолей.Вставить("A010",  	 Док.ДатаОтгрузки);
				СтруктураПолей.Вставить("A011",  	 Док.Комментарий);
				СтруктураПолей.Вставить("A012",  	 ВыборкаДок.Категория);
				СтруктураПолей.Вставить("A014",  	 ВыборкаДок.Широта);
				СтруктураПолей.Вставить("A015",  	 ВыборкаДок.Долгота);
								
				Если Док.Товары.Количество() + Док.Услуги.Количество() > 0 Тогда 
				
					// Во втором параметре передается Ложь - это означает,
					// что не закрывает тег "Item", его закрытие производится ниже		
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
					
					ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
						
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
					
						ДобавитьПоле("GUID", "0738E61B-F06F-464A-8483-4249E0254819");
						
						ДобавитьПоле("Comment", "Табличная часть 'Товары'");
						
						Для Каждого СтрокаТаб Из Док.Товары	Цикл							
							СтруктураПолей = Новый Структура;
							СтруктураПолей.Вставить("GUID",  Новый УникальныйИдентификатор());
							СтруктураПолей.Вставить("DocId", Док);
							СтруктураПолей.Вставить("A01",   СтрокаТаб.Номенклатура);
							СтруктураПолей.Вставить("A02",   СтрокаТаб.ХарактеристикаНоменклатуры);
							СтруктураПолей.Вставить("A03",   СтрокаТаб.ЕдиницаИзмерения);
							СтруктураПолей.Вставить("A04",   СтрокаТаб.Количество);							
							СтруктураПолей.Вставить("A05",   СтрокаТаб.Цена);
							СтруктураПолей.Вставить("A06",   СтрокаТаб.Сумма);
							СтруктураПолей.Вставить("A09",   СтрокаТаб.ПроцентСкидкиНаценки);
							СтруктураПолей.Вставить("A012",  (СтрокаТаб.Количество*СтрокаТаб.Цена) - СтрокаТаб.Сумма);
							СтруктураПолей.Вставить("A07",   СтрокаТаб.СуммаНДС);
							СтруктураПолей.Вставить("A08",   СтрокаТаб.ЕдиницаИзмерения.Вес*СтрокаТаб.Количество);
							СтруктураПолей.Вставить("A010",  Ценообразование.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС));
							Если ТипЗнч(СтрокаТаб.Размещение) = Тип("СправочникСсылка.Склады") Тогда
								СтруктураПолей.Вставить("A011",  СтрокаТаб.Размещение);
							КонецЕсли;    
							ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
						КонецЦикла;
						
						Для Каждого СтрокаТаб Из Док.Услуги	Цикл				
							СтруктураПолей = Новый Структура;
							СтруктураПолей.Вставить("GUID",  Новый УникальныйИдентификатор());
							СтруктураПолей.Вставить("DocId", Док);
							СтруктураПолей.Вставить("A01",   СтрокаТаб.Номенклатура);														
							СтруктураПолей.Вставить("A04",   СтрокаТаб.Количество);
							СтруктураПолей.Вставить("A05",   СтрокаТаб.Цена);
							СтруктураПолей.Вставить("A06",   СтрокаТаб.Сумма);
							СтруктураПолей.Вставить("A07",   СтрокаТаб.СуммаНДС);							
							СтруктураПолей.Вставить("A09",   СтрокаТаб.ПроцентСкидкиНаценки);
							СтруктураПолей.Вставить("A012",  (СтрокаТаб.Количество*СтрокаТаб.Цена) - СтрокаТаб.Сумма);
							СтруктураПолей.Вставить("A010",  Ценообразование.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС));							
							ЗаписатьЭлементВДокументОбмена(СтруктураПолей);			
						КонецЦикла;
						
						ДокОбмена.ЗаписатьКонецЭлемента();  //TABLE
									
					ДокОбмена.ЗаписатьКонецЭлемента();  //TABLES
				
					// Закрыаем тег ITEM, который был открыт при вызове
					// процедуры "ЗаписатьЭлементВДокументОбмена"
					ДокОбмена.ЗаписатьКонецЭлемента();  //ITEM
					
				Иначе
					
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
					
				КонецЕсли;
			
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента();  // ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();      // DOCUMENT
	
КонецПроцедуры //ВыгрузитьЗаказыПокупателей

Процедура ВыгрузитьМаршрутыАгента()
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
	ДобавитьПоле("GUID", "43920FA1-745D-4499-84AF-7000672CEEFF");
	
	ДобавитьПоле("Comment", "Документ.Маршрут");                	
	
	// Обязательно очищаем все маршруты перед загрузкой их в БД МУ,
	// т.к. идентификаторы маршрутов генерируются динамически 
	ДобавитьПоле("KILLALL", "1");
	
	Если ЗначениеЗаполнено(ПланПосещений) Тогда	
		ДатаНачала    = НачалоДня(ПланПосещений.Дата);
		ДатаОкончания = КонецДня(ДатаНачала + (ПланПосещений.ИнтервалПланирования - 1)*86400);
	Иначе
		ДатаНачала    = НачалоМесяца(ТекущаяДата());
		ДатаОкончания = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
	ТекДата = ДатаНачала;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Агент", ВыбАгент);
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	Пока ТекДата < ДатаОкончания Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		Выборка = Документы.кпкМаршрут.Выбрать(НачалоДня(ТекДата), КонецДня(ТекДата), СтруктураОтбора, "Дата Убыв");
		
		Если Выборка.Следующий() Тогда
			
			Если Выборка.Проведен и Не Выборка.ДокОснование.ПометкаУдаления Тогда
				ТекМаршрут 	   = Новый Структура("Дата, ПометкаУдаления, Проведен", ТекДата, Ложь, Истина);
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(ТекМаршрут, Истина);
				//СтруктураПолей.Вставить("A01",  НачалоДня(Выборка.Дата));
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
				// Заполняем табличные части справочника
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
				
				// Заполняем табличную часть контрагентов маршрута		
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
				
				ДобавитьПоле("GUID", "ED832712-A167-4B9E-87F1-5127E6F70814");
				
				ДобавитьПоле("Comment", "Табличная часть 'Точки маршрута'");										
				
				ИдВладельца = СтруктураПолей.GUID;
				
				Для Каждого Стр Из Выборка.СписокПосещений Цикл					
					
					СтруктураПолей = Новый Структура;
					СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
					СтруктураПолей.Вставить("DocId",  ИдВладельца);
					
					Если ЗначениеЗаполнено(Стр.Контрагент) Тогда
						СтруктураПолей.Вставить("A01", 	  Стр.Контрагент);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Стр.ТорговаяТочка) Тогда
						СтруктураПолей.Вставить("A02", 	  Стр.ТорговаяТочка);	
					КонецЕсли;  
					
					Если ЗначениеЗаполнено(Стр.Время) Тогда
						СтруктураПолей.Вставить("A03", Формат(Стр.Время, "ДФ=HH:mm"));
					КонецЕсли; 
					
					СтруктураПолей.Вставить("A04", 	  Стр.Напоминание);
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
					
				КонецЦикла;
				
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
				ДокОбмена.ЗаписатьКонецЭлемента(); //ITEM
				
			КонецЕсли;
			
		ИначеЕсли Не ПланПосещений.Пустая() Тогда  		
			
			Смещение = (НачалоДня(ТекДата) - НачалоДня(ПланПосещений.Дата))/86400;
			
			Если Смещение < 0 Тогда
				ТекДата = ТекДата + 86400;
				Продолжить;				
			КонецЕсли;
			
			ТекМаршрут 	   = Новый Структура("Дата, ПометкаУдаления, Проведен", ТекДата, Ложь, Истина);
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(ТекМаршрут, Истина, Ложь);
			//СтруктураПолей.Вставить("A01",  НачалоДня(Выборка.Дата));
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
			// Заполняем табличные части справочника
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
			
			// Заполняем табличную часть контрагентов маршрута		
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
			
			ДобавитьПоле("GUID", "ED832712-A167-4B9E-87F1-5127E6F70814");
			
			ДобавитьПоле("Comment", "Табличная часть 'Точки маршрута'");
			
			ИдВладельца = СтруктураПолей.GUID;
			
			Для Каждого Стр Из ПланПосещений.Дни Цикл
				Если Вычислить("Стр.Д" + (1 + Смещение)) Тогда					
					Время = кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(ТекДата, "Дата");					
					СтруктураПолей = Новый Структура;
					СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
					СтруктураПолей.Вставить("DocId",  ИдВладельца);
					СтруктураПолей.Вставить("A01", 	  Стр.Контрагент);
					СтруктураПолей.Вставить("A02", 	  Стр.ТорговаяТочка);
					//СтруктураПолей.Вставить("A03", 	  Время);
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);					
				КонецЕсли;
			КонецЦикла;
			
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
			ДокОбмена.ЗаписатьКонецЭлемента(); //ITEM
			
		КонецЕсли;
		
		ТекДата = ТекДата + 86400;
		
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS 
	
	ДокОбмена.ЗаписатьКонецЭлемента();  //CATALOG
	
КонецПроцедуры //ВыгрузкаМаршрутов()

Процедура ВыгрузитьПеремещения()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеТоваров.Ссылка,
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.Номер,
	|	ВложенныйЗапрос.СуммаДок,
	|	кпкСведенияДокумента.кпкГПСШирота КАК Широта,
	|	кпкСведенияДокумента.кпкГПСДолгота КАК Долгота,
	|	кпкСведенияДокумента.Категория
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ПеремещениеТоваровТовары.Коэффициент * ПеремещениеТоваровТовары.Количество * ПеремещениеТоваровТовары.Цена) КАК СуммаДок,
	|			ПеремещениеТоваровТовары.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПеремещениеТоваровТовары.Ссылка) КАК ВложенныйЗапрос
	|		ПО ПеремещениеТоваров.Ссылка = ВложенныйЗапрос.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кпкСведенияДокумента КАК кпкСведенияДокумента
	|		ПО ПеремещениеТоваров.Ссылка = кпкСведенияДокумента.КПКДокумент
	|ГДЕ
	|	ПеремещениеТоваров.Дата МЕЖДУ &ПарДатаНач И &ПарДатаКон
	|	И (ПеремещениеТоваров.СкладПолучатель = &парСклад
	|			ИЛИ ПеремещениеТоваров.СкладОтправитель = &парСклад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПеремещениеТоваров.МоментВремени";

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("парСклад",   АвтоСклад);
	Запрос.УстановитьПараметр("ПарДатаНач", НачалоДня(ТекущаяДата() - (СрокПеремещений * 86400)));
	Запрос.УстановитьПараметр("ПарДатаКон", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Агент", 	    ВыбАгент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
	    ИдДок = "77525C87-CB2F-405E-A92E-6F373EDEECE7";
	
		ДобавитьПоле("GUID", ИдДок);
		
		ДобавитьПоле("Comment", "Документ.Перемещение");
		
		УстановитьПризнакОчисткиДокумента(ИдДок);
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
			Пока Выборка.Следующий() Цикл

				Док = Выборка.Ссылка;
				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док);
				СтруктураПолей.Вставить("A01", Док.Организация);
				СтруктураПолей.Вставить("A02", Выборка.Категория);
				СтруктураПолей.Вставить("A03", Док.СкладОтправитель);
				СтруктураПолей.Вставить("A04", Док.СкладПолучатель);
				СтруктураПолей.Вставить("A05", Выборка.СуммаДок);
				СтруктураПолей.Вставить("A06", Док.Комментарий);
				СтруктураПолей.Вставить("A07", Выборка.Широта);
				СтруктураПолей.Вставить("A08", Выборка.Долгота);
				
				Если Док.Товары.Количество() > 0 Тогда 
				
					// Во втором параметре передается Ложь - это означает,
					// что не закрывает тег "Item", его закрытие производится ниже		
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
					
					ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
						
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
					
						ДобавитьПоле("GUID", "3097F10A-BEE6-4A76-AD7A-D4663C9B73EC");
						
						ДобавитьПоле("Comment", "Табличная часть 'Товары'");
						
						Для Каждого СтрокаТаб Из Док.Товары	Цикл							
							СтруктураПолей = Новый Структура;
							СтруктураПолей.Вставить("GUID",  Новый УникальныйИдентификатор());
							СтруктураПолей.Вставить("DocId", Док);
							СтруктураПолей.Вставить("A01",   СтрокаТаб.Номенклатура);
							СтруктураПолей.Вставить("A02",   СтрокаТаб.ХарактеристикаНоменклатуры);
							СтруктураПолей.Вставить("A03",   СтрокаТаб.ЕдиницаИзмерения);
							СтруктураПолей.Вставить("A04",   СтрокаТаб.Количество);							
							СтруктураПолей.Вставить("A05",   СтрокаТаб.Цена);
							СтруктураПолей.Вставить("A06",   СтрокаТаб.Количество*СтрокаТаб.Цена);
							ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
						КонецЦикла;
												
						ДокОбмена.ЗаписатьКонецЭлемента();  //TABLE
									
					ДокОбмена.ЗаписатьКонецЭлемента();  //TABLES
				
					// Закрыаем тег ITEM, который был открыт при вызове
					// процедуры "ЗаписатьЭлементВДокументОбмена"
					ДокОбмена.ЗаписатьКонецЭлемента();  //ITEM
					
				Иначе
					
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
					
				КонецЕсли;
				
			КонецЦикла;
	
			ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
		
КонецПроцедуры //ВыгрузитьПеремещения

/////////////////////////////////////////////////////
// Выгрузка подтверждений 
/////////////////////////////////////////////////////

Процедура ВыгрузитьПодтвержденияЗаказовПокупателей()
	
	Интервал = Константы.кпкИнтервалПодтверждений.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Заказ.Ссылка КАК Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент) 
	|   КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК Заказ
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = Заказ.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода
	|	И кпкСведенияДокументаСрезПоследних.кпкПризнакРучногоВвода = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * Интервал)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "E01E1F5C-D6E4-46E8-B923-3758B0D79BDE", "'Заказ покупателя'");
		
КонецПроцедуры //ВыгрузитьПодтвержденияЗаказовПокупателей

Процедура ВыгрузитьПодтвержденияПосещений()
	
	Интервал = Константы.кпкИнтервалПодтверждений.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Посещение.Ссылка КАК Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент) 
	|   КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.кпкПосещение КАК Посещение
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = Посещение.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода
	|	И кпкСведенияДокументаСрезПоследних.кпкПризнакРучногоВвода = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Посещение.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400*Интервал)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "9F147C59-5EE8-4550-8289-12ECFE5D0617", "'Посещение'");
		
КонецПроцедуры //ВыгрузитьПодтвержденияПосещений

Процедура ВыгрузитьПодтвержденияПеремещений()
	
	Интервал = Константы.кпкИнтервалПодтверждений.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Перемещение.Ссылка КАК Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент) 
	|   КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК Перемещение
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = Перемещение.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода
	|	И кпкСведенияДокументаСрезПоследних.кпкПризнакРучногоВвода = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Перемещение.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * Интервал)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "77525C87-CB2F-405E-A92E-6F373EDEECE7", "'Перемещение'");
				
КонецПроцедуры  // ВыгрузитьПодтвержденияПеремещений

Процедура ВыгрузитьПодтвержденияОрдеров()
	
	Интервал = Константы.кпкИнтервалПодтверждений.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РКО.Ссылка КАК Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент)
	|   КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер КАК РКО
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = РКО.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода
	|	И кпкСведенияДокументаСрезПоследних.кпкПризнакРучногоВвода = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПКО.Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент) 
	|   КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК ПКО
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = ПКО.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода
	|	И кпкСведенияДокументаСрезПоследних.кпкПризнакРучногоВвода = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * Интервал)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "749BE2E0-9B00-4D7B-9D4D-88CA53327511", "'Касса'");
	
КонецПроцедуры //ВыгрузитьПодтвержденияЗаказовПокупателей

Процедура ВыгрузитьПодтвержденияМерчендайзинга()
	
	Интервал = Константы.кпкИнтервалПодтверждений.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Мерчендайзинг.Ссылка КАК Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент)
	|   КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.кпкМерчендайзинг КАК Мерчендайзинг
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = Мерчендайзинг.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода
	|	И кпкСведенияДокументаСрезПоследних.кпкПризнакРучногоВвода = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Мерчендайзинг.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * Интервал)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "61DEE5FE-D0A8-4842-A6AF-A8D33F298845", "'Мерчендайзинг'");
			
КонецПроцедуры //ВыгрузитьПодтвержденияМерчендайзинга

/////////////////////////////////////////////////////

Процедура ВыгрузитьИсториюПродаж()
	
	Если Константы.кпкГлубинаИсторииПродаж.Получить() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Глубина = Константы.кпкГлубинаИсторииПродаж.Получить();
	КолИнтервалов = Константы.кпкКоличествоИнтерваловИстории.Получить();	
	
	Если Глубина = 0 Тогда
		Возврат;
	КонецЕсли; 	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Интервалы.НачалоИнтервала,
	|	Интервалы.КонецИнтервала,
	|	Интервалы.НомерИнтервала
	|ПОМЕСТИТЬ Интервалы
	|ИЗ
	|	&Интервалы КАК Интервалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Продажи.Контрагент КАК Контрагент,
	|	Продажи.Номенклатура КАК Номенклатура,
	|	СУММА(Продажи.ОборотКоличество) КАК ОборотКоличество,
	|	ВЫБОР
	|		КОГДА Продажи.День >= Интервалы.НачалоИнтервала
	|				И Продажи.День <= Интервалы.КонецИнтервала
	|			ТОГДА Интервалы.НомерИнтервала
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерИнтервала
	|ИЗ
	|	Интервалы КАК Интервалы,
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА &ИспТТ
	|				ТОГДА ВЫБОР
	|						КОГДА ПродажиОбороты.ДокументПродажи.кпкТорговаяТочка = ЗНАЧЕНИЕ(Справочник.кпкТорговыеТочки.ПустаяСсылка)
	|							ТОГДА ПродажиОбороты.Контрагент
	|						ИНАЧЕ ПродажиОбороты.ДокументПродажи.кпкТорговаяТочка
	|					КОНЕЦ
	|			ИНАЧЕ ПродажиОбороты.Контрагент
	|		КОНЕЦ КАК Контрагент,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.Номенклатура, СпрНоменклатура.Ссылка)
	|			ИНАЧЕ ПродажиОбороты.ХарактеристикаНоменклатуры
	|		КОНЕЦ КАК Номенклатура,
	|		СУММА(ПродажиОбороты.КоличествоОборот) КАК ОборотКоличество,
	|		СУММА(ПродажиОбороты.СтоимостьОборот) КАК ОборотСумма,
	|		ПродажиОбороты.ПериодДень КАК День
	|	ИЗ
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
	|					&НачПериода,
	|					&КонПериода,
	|					Авто,
	|					Контрагент В (&СписокКлиентов)
	|						И (Номенклатура В ИЕРАРХИИ (&Ассортимент)
	|							ИЛИ Номенклатура В (&ДопАссортимент))) КАК ПродажиОбороты
	|			ПО (ПродажиОбороты.Номенклатура = СпрНоменклатура.Ссылка)
	|	ГДЕ
	|		(ПродажиОбороты.Номенклатура В ИЕРАРХИИ (&Ассортимент)
	|				ИЛИ ПродажиОбороты.Номенклатура В (&ДопАссортимент))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПродажиОбороты.ПериодДень,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.Номенклатура, СпрНоменклатура.Ссылка)
	|			ИНАЧЕ ПродажиОбороты.ХарактеристикаНоменклатуры
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &ИспТТ
	|				ТОГДА ВЫБОР
	|						КОГДА ПродажиОбороты.ДокументПродажи.кпкТорговаяТочка = ЗНАЧЕНИЕ(Справочник.кпкТорговыеТочки.ПустаяСсылка)
	|							ТОГДА ПродажиОбороты.Контрагент
	|						ИНАЧЕ ПродажиОбороты.ДокументПродажи.кпкТорговаяТочка
	|					КОНЕЦ
	|			ИНАЧЕ ПродажиОбороты.Контрагент
	|		КОНЕЦ) КАК Продажи
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Продажи.День >= Интервалы.НачалоИнтервала
	|					И Продажи.День <= Интервалы.КонецИнтервала
	|				ТОГДА Интервалы.НомерИнтервала
	|			ИНАЧЕ 0
	|		КОНЕЦ > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Контрагент,
	|	Продажи.Номенклатура,
	|	ВЫБОР
	|		КОГДА Продажи.День >= Интервалы.НачалоИнтервала
	|				И Продажи.День <= Интервалы.КонецИнтервала
	|			ТОГДА Интервалы.НомерИнтервала
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИТОГИ ПО
	|	Контрагент,
	|	Номенклатура"; 	
		
	Запрос = Новый Запрос(ТекстЗапроса);
	
	КонПериода = ТекущаяДата();
	
	НачПериода = КонПериода - (Глубина * 86400);
	
	ТабИнтервалов = Новый ТаблицаЗначений;	
	ТабИнтервалов.Колонки.Добавить("НачалоИнтервала", Новый ОписаниеТипов("Дата"));			
	ТабИнтервалов.Колонки.Добавить("КонецИнтервала",  Новый ОписаниеТипов("Дата"));		
	ТабИнтервалов.Колонки.Добавить("НомерИнтервала",  Новый ОписаниеТипов("Число"));
	
	РазмерИнтервала = Окр(Глубина/?(КолИнтервалов = 0, 1, КолИнтервалов))*86400;	
	
	Дата1 = НачПериода;
 	
	Для Сч = 1 По КолИнтервалов Цикл    
		
		Дата2 = Дата1 + РазмерИнтервала;		
		Дата2 = ?(Дата2 > ТекущаяДата(), ТекущаяДата(), Дата2);		
		
		СтрокаТаб = ТабИнтервалов.Добавить();
		СтрокаТаб.НачалоИнтервала = Дата1;
		СтрокаТаб.КонецИнтервала  = Дата2;
		СтрокаТаб.НомерИнтервала  = Сч;
				
		Дата1 = Дата2;                            		
	КонецЦикла;  
	
	Запрос.УстановитьПараметр("СписокКлиентов", сзКлиентыАгента);
	Запрос.УстановитьПараметр("Ассортимент",    сзАссортимент);		
	Запрос.УстановитьПараметр("ДопАссортимент", сзДопТовары);			
	Запрос.УстановитьПараметр("НачПериода",  	НачПериода);
	Запрос.УстановитьПараметр("КонПериода",	    КонПериода);
	Запрос.УстановитьПараметр("Интервалы",		ТабИнтервалов);	
	Запрос.УстановитьПараметр("ИспТТ", 	        Булево(Константы.кпкРежимТоргТочек.Получить()));
	  	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "AF9FAA26-9638-41C5-BFCE-9514E670EF2E");
	
	// Всегда передаем команду на очистку справочника перед загрузкой
	ДобавитьПоле("KILLALL", "1");                	
	
	ДобавитьПоле("Comment", "Справочник.ИсторияПродаж");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");	
	
		ВыборкаКонтрагент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКонтрагент.Следующий() Цикл
			
			ВыборкаНоменклатура = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаНоменклатура.Следующий() Цикл
				 						
				ВыборкаДетали = ВыборкаНоменклатура.Выбрать();
				
				СтрИстория = "";
				
				Для Сч = 1 По КолИнтервалов Цикл  				
					СтуктураПоиска = Новый Структура("НомерИнтервала", Сч);
					
					ВыборкаДетали.Сбросить();
					Если ВыборкаДетали.НайтиСледующий(СтуктураПоиска) Тогда
						СтрИстория = СтрИстория + Формат(ВыборкаДетали.ОборотКоличество, "ЧГ=0") + " ";		
					Иначе
						СтрИстория = СтрИстория + "0" + " ";		
					КонецЕсли;				
				КонецЦикла;
				
				СтруктураПолей = Новый Структура;				
				СтруктураПолей.Вставить("GUID", Новый УникальныйИдентификатор());				
				СтруктураПолей.Вставить("A02", ВыборкаНоменклатура.Контрагент);
				СтруктураПолей.Вставить("A04", ВыборкаНоменклатура.Номенклатура);
				СтруктураПолей.Вставить("A07", СокрЛП(СтрИстория));
				СтруктураПолей.Вставить("A08", 0);
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
				
			КонецЦикла;  
					
		КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента();   //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();       //CATALOG
 	
КонецПроцедуры //ВыгрузитьИсториюПродаж

// Выгрузка дополнительной информации
// В данной процедуре выгружаются следующие справочники:
// 		1. Типы цен
//      2. Склады
//      3. Категории документов
//      4. Категории номенклатуры
//      5. Статусы контрагентов
//      6. Категории контрагентов
//      6. Типы торговых точек
//
Процедура ВыгрузитьДополнительнуюИнформацию()
	
	// Выгрузка типов цен
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ИдСпр = "00F1FFE7-E16E-4FF4-9EF1-B8D0C54BDF59";
		
		ДобавитьПоле("GUID", ИдСпр);
		
		ДобавитьПоле("Comment", "Справочник.ТипыЦен");
		
		УстановитьПризнакОчисткиСправочника(ИдСпр);
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Сч = 0;
			Для Каждого СтрокаТаб Из тзКатегорииЦен Цикл
				ТипЦены = СтрокаТаб.ТипыЦен;
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(ТипЦены);		
				СтруктураПолей.Вставить("Code", Сч);
				СтруктураПолей.Вставить("A02",  ТипЦены.ЦенаВключаетНДС);
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
				Сч = Сч + 1;
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	//////////////////////////////////////////////////
	
	// Выгрузка складов	
	ВыгружаемыеСклады = Новый СписокЗначений;
	
	ВыгружаемыеСклады.ЗагрузитьЗначения(СведенияАгента.СписокСкладов.Склады.ВыгрузитьКолонку("Склад"));
	
	// Добавляем также с писок складов мобильный склад, если он выбран
	Если ЗначениеЗаполнено(АвтоСклад) Тогда
		Если ВыгружаемыеСклады.НайтиПоЗначению(АвтоСклад) = Неопределено Тогда
			ВыгружаемыеСклады.Добавить(АвтоСклад);
		КонецЕсли;
	КонецЕсли;
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ИдСпр = "2516FFCE-F46F-4326-BE00-438EF0871D30";
	
	ДобавитьПоле("GUID", ИдСпр);
	
	ДобавитьПоле("Comment", "Справочник.Склады");
	
	УстановитьПризнакОчисткиСправочника(ИдСпр);
	 
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Сч = 0;		
		Для Каждого ЭлСписка Из ВыгружаемыеСклады Цикл
			Склад 			  = ЭлСписка.Значение; 						
			СтруктураПолей 	  = ПолучитьСтруктуруПредопределенныхПолейСправочника(Склад);
			СтруктураПолей.Вставить("Code", Сч);			
			Если АвтоСклад = Склад И ЗначениеЗаполнено(Склад.ТипЦенРозничнойТорговли) Тогда
				СтруктураПолей.Вставить("A02", Склад.ТипЦенРозничнойТорговли);
			КонецЕсли;
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
			Сч = Сч + 1;
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
	
	//////////////////////////////////////////////////
	
	// Выгрузка категорий документов	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкКатегорииДокументов.Ссылка,
	|	кпкКатегорииДокументов.Код,
	|	кпкКатегорииДокументов.Наименование,
	|	кпкКатегорииДокументов.ПометкаУдаления,
	|	кпкКатегорииДокументов.Цвет,
	|	кпкКатегорииДокументов.ВидыДокументов
	|ИЗ
	|	Справочник.кпкКатегорииДокументов КАК кпкКатегорииДокументов");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "F997F837-8721-4896-8FE8-3497C6C38206");
	
	ДобавитьПоле("Comment", "Справочник.КатегорииДокументов");	
	
	// Передаем команду на очистку справочника перед загрузкой
	ДобавитьПоле("KILLALL", "1"); 
	 
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока Выборка.Следующий() Цикл		
			Цвет = кпкАгентПлюс.ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему(Выборка.Цвет.Получить(), Истина);
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("A02", Цвет);
			СтруктураПолей.Вставить("A03", СтрЗаменить(Выборка.ВидыДокументов, "Касса", "ПКО,РКО"));
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
    //////////////////////////////////////////////////
	
   // Выгрузка категорий номенклатуры	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НоменклатурныеГруппы.Ссылка,
	|	НоменклатурныеГруппы.ПометкаУдаления,
	|	НоменклатурныеГруппы.Код,
	|	НоменклатурныеГруппы.Наименование
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВыгрузитьПростойСправочник("41598C02-F788-48A7-A039-645EF74BD57F", Выборка, "НоменклатурныеГруппы");
    //////////////////////////////////////////////////
	
	// Выгрузка статусов контрагентов	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкСтатусыКонтрагентов.Ссылка,
	|	кпкСтатусыКонтрагентов.ПометкаУдаления,
	|	кпкСтатусыКонтрагентов.Наименование,
	|	кпкСтатусыКонтрагентов.Предупреждение,
	|	кпкСтатусыКонтрагентов.Цвет
	|ИЗ
	|	Справочник.кпкСтатусыКонтрагентов КАК кпкСтатусыКонтрагентов");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "74046D94-B25D-4F3A-B553-27B7FDD3C60C");
	
	ДобавитьПоле("Comment", "Справочник.СтатусыКонтрагентов");	
	
	// Передаем команду на очистку справочника перед загрузкой
	ДобавитьПоле("KILLALL", "1"); 
	 
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока Выборка.Следующий() Цикл		
			Цвет = кпкАгентПлюс.ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему(Выборка.Цвет.Получить(), Истина);
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("A02", Выборка.Предупреждение);
			СтруктураПолей.Вставить("A03", Цвет);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
    //////////////////////////////////////////////////
	
	// Выгрузка категорий контрагентов
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкКатегорииКонтрагентов.Ссылка,
	|	кпкКатегорииКонтрагентов.ПометкаУдаления,
	|	кпкКатегорииКонтрагентов.Наименование,
	|	кпкКатегорииКонтрагентов.Комментарий
	|ИЗ
	|	Справочник.кпкКатегорииКонтрагентов КАК кпкКатегорииКонтрагентов");
	
	Запрос.УстановитьПараметр("Ассортимент", сзАссортимент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", "C75131A9-F98E-4443-B790-3ADA6137440B");
		
		ДобавитьПоле("Comment", "Справочник.КатегорииКонтрагентов");
		 		
		// Передаем команду на очистку справочника перед загрузкой
		ДобавитьПоле("KILLALL", "1"); 
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("A01", Выборка.Комментарий);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
			
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
	//////////////////////////////////////////////////
	
	// Выгрузка типов торговых точек
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкТипыТорговыхТочек.Ссылка,
	|	кпкТипыТорговыхТочек.ПометкаУдаления,
	|	кпкТипыТорговыхТочек.Наименование
	|ИЗ
	|	Справочник.кпкТипыТорговыхТочек КАК кпкТипыТорговыхТочек");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВыгрузитьПростойСправочник("EDB6B6C0-922F-42D2-8868-CBEB347D8C74", Выборка, "ТипыТорговыхТочек");

	//////////////////////////////////////////////////
	
	// Выгрузка результатов посещений
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкРезультатыПосещений.Ссылка,
	|	кпкРезультатыПосещений.ПометкаУдаления,
	|	кпкРезультатыПосещений.Наименование
	|ИЗ
	|	Справочник.кпкРезультатыПосещений КАК кпкРезультатыПосещений");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВыгрузитьПростойСправочник("FFD68F37-4BDD-4692-8AB2-A22964F602B1", Выборка, "РезультатыПосещений");

	//////////////////////////////////////////////////
	
	// Выгрузка Вопросов анкеты
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкВопросыАнкеты.Ссылка,
	|	кпкВопросыАнкеты.ПометкаУдаления,
	|	кпкВопросыАнкеты.Наименование,
	|	кпкВопросыАнкеты.кпкОбязательный КАК Обязательный
	|ИЗ
	|	Справочник.кпкВопросыАнкеты КАК кпкВопросыАнкеты
	|ГДЕ
	|	кпкВопросыАнкеты.кпкВыгружать = ИСТИНА");
	
	Выборка = Запрос.Выполнить().Выбрать();

	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ИдСпр = "D2015F3B-2F65-46F7-A40D-2867FB75D930";
	
	ДобавитьПоле("GUID", ИдСпр);
	
	ДобавитьПоле("Comment", "Справочник.ВопросыАнкеты");
	
	УстановитьПризнакОчисткиСправочника(ИдСпр);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
		Пока Выборка.Следующий() Цикл 				
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("A01", Выборка.Обязательный);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
		КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
	//////////////////////////////////////////////////
	
	// Выгрузка Ответов анкеты
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкОтветыАнкеты.Ссылка,
	|	кпкОтветыАнкеты.ПометкаУдаления,
	|	кпкОтветыАнкеты.Наименование,
	|	кпкОтветыАнкеты.Владелец.Ссылка КАК Вопрос
	|ИЗ
	|	Справочник.кпкОтветыАнкеты КАК кпкОтветыАнкеты");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ИдСпр = "F3FEF961-294A-48E2-8A72-BFC950C4466B";
	
	ДобавитьПоле("GUID", ИдСпр);
	
	ДобавитьПоле("Comment", "Справочник.ОтветыАнкеты");
	
	УстановитьПризнакОчисткиСправочника(ИдСпр);	

	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
		Пока Выборка.Следующий() Цикл 				
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("A01", Выборка.Вопрос);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
		КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG

	//////////////////////////////////////////////////
	
	// Выгрузка запросов
	НевыгружаемыеЗапросы = Новый СписокЗначений();
	НевыгружаемыеЗапросы.Добавить(Перечисления.кпкВидыЗапросовДляАгентов.Задания);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкЗапросы.Наименование,
	|	кпкЗапросы.Код,
	|	кпкЗапросы.Ссылка,
	|	кпкЗапросы.ПометкаУдаления
	|ИЗ
	|	Справочник.кпкЗапросы КАК кпкЗапросы
	|ГДЕ
	|	кпкЗапросы.ПометкаУдаления = ЛОЖЬ
	|	И (НЕ кпкЗапросы.ВидЗапроса В (&СписокНевыгружаемых))");
	
	Запрос.УстановитьПараметр("СписокНевыгружаемых", НевыгружаемыеЗапросы);
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ИдСпр = "CC458719-5078-4DC8-9A0C-FA19E3904F39";
	
	ДобавитьПоле("GUID", ИдСпр);
	
	ДобавитьПоле("Comment", "Справочник.Запросы");
	
	УстановитьПризнакОчисткиСправочника(ИдСпр);		

	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
		Пока Выборка.Следующий() Цикл 				
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("Code", Выборка.Код);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
		КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
    //////////////////////////////////////////////////
	
	// Выгрузка фотографий номенклатуры, контрагентов, торговых точек
	Если флВыгружатьКартинкиВКПК Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.Ссылка,
		|	ХранилищеДополнительнойИнформации.Наименование,
		|	ХранилищеДополнительнойИнформации.ИмяФайла,
		|	ХранилищеДополнительнойИнформации.ПометкаУдаления,
		|	ЛОЖЬ КАК ПризнакТоргТочки,
		|	ХранилищеДополнительнойИнформации.Хранилище,
		|	ХранилищеДополнительнойИнформации.Объект
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.ПометкаУдаления = ЛОЖЬ
		|	И ХранилищеДополнительнойИнформации.ВидДанных = &ВидДанных
		|	И (ХранилищеДополнительнойИнформации.Объект.Родитель В ИЕРАРХИИ (&Объект)
		|			ИЛИ ХранилищеДополнительнойИнформации.Объект В ИЕРАРХИИ (&Объект)
		|			ИЛИ ХранилищеДополнительнойИнформации.Объект В (&Клиенты))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	кпкТорговыеТочкиФото.ИдентификаторФото,
		|	кпкТорговыеТочкиФото.Комментарий,
		|	кпкТорговыеТочкиФото.ИмяФайла,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	кпкТорговыеТочкиФото.Хранилище,
		|	кпкТорговыеТочкиФото.Ссылка
		|ИЗ
		|	Справочник.кпкТорговыеТочки.Фото КАК кпкТорговыеТочкиФото
		|ГДЕ
		|	кпкТорговыеТочкиФото.Ссылка В(&ТоргТочки)");
		
		Запрос.УстановитьПараметр("ВидДанных", Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение);
		Запрос.УстановитьПараметр("Объект"	 , сзАссортимент);
		Запрос.УстановитьПараметр("Клиенты"  , сзКлиентыАгента);
		Запрос.УстановитьПараметр("ТоргТочки", сзТоргТочкиАгента);
		
		ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
		
		ИдСпр = "E01CF3A3-6765-4FD3-801C-CCDBF85C78FC";
		
		ДобавитьПоле("GUID", ИдСпр);
		
		ДобавитьПоле("Comment", "Справочник.ФотоСправочников");
		
		УстановитьПризнакОчисткиСправочника(ИдСпр);	
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока Выборка.Следующий() Цикл 				
			
			ИдТочки = ?(Выборка.ПризнакТоргТочки, ВРег(Выборка.Ссылка), ВРег(Выборка.Ссылка.УникальныйИдентификатор()));
			
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка, Истина);
			СтруктураПолей.Вставить("GUID", ИдТочки);
			СтруктураПолей.Вставить("A01",  ИдТочки);
			Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
				ЗначащийРеквизит = "A02";
			ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
				ЗначащийРеквизит = "A03";
			ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.кпкТорговыеТочки") Тогда
				ЗначащийРеквизит = "A04";
			КонецЕсли;
			СтруктураПолей.Вставить(ЗначащийРеквизит, Выборка.Объект);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	КонецЕсли;
	
	// Выгрузка штрихкодов	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Наименование,
	|	Штрихкоды.Владелец КАК Номенклатура,
	|	Штрихкоды.ХарактеристикаНоменклатуры КАК Характеристика,
	|	Штрихкоды.ЕдиницаИзмерения	
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец В ИЕРАРХИИ(&Ассортимент)");
	
	Запрос.УстановитьПараметр("Ассортимент", сзАссортимент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ИдСпр = "C156CC98-8B92-444E-B8C2-E3DE51106B66";
	
	ДобавитьПоле("GUID", ИдСпр);
	
	ДобавитьПоле("Comment", "Справочник.Штрих-коды");	
	
	УстановитьПризнакОчисткиСправочника(ИдСпр);
	 
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока Выборка.Следующий() Цикл		
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка, Истина);
			СтруктураПолей.Вставить("A01", ?(ЗначениеЗаполнено(Выборка.Характеристика), 
										   Выборка.Характеристика, Выборка.Номенклатура));
			СтруктураПолей.Вставить("A02", Выборка.ЕдиницаИзмерения);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
	
	//////////////////////////////////////////////////	
	// Выгрузка печатных форм документов		
	
	ВидыДокументов = ПолучитьВидыДокументов();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросВТ = Новый Запрос;	
	
	ЗапросВТ.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗапросВТ.Текст = "ВЫБРАТЬ
	|	кпкПечатныеФормы.Ссылка,
	|	кпкПечатныеФормы.Код,
	|	кпкПечатныеФормы.Наименование,
	|	кпкПечатныеФормы.ВидДокументаВКПК,
	|	кпкПечатныеФормы.ЧислоКопий,
	|	кпкПечатныеФормы.ВидФормы
	|ПОМЕСТИТЬ ПечатныеФормы
	|ИЗ
	|	Справочник.кпкПечатныеФормы КАК кпкПечатныеФормы
	|ГДЕ
	|	кпкПечатныеФормы.ТипМобильногоПриложения = &ТипМобильногоПриложения
	|	И кпкПечатныеФормы.ПометкаУдаления = ЛОЖЬ";
	
	ЗапросВТ.УстановитьПараметр("ТипМобильногоПриложения", Перечисления.кпкТипыМобильныхПриложений.АгентПлюсМобильнаяТорговля);
	
	ЗапросВТ.Выполнить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ ПечатныеФормы");
	
	Запрос.МенеджерВременныхТаблиц = менеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ИдСпр = "17B09C65-5B6C-40D1-8616-3A655B99DA8D";
	
	ДобавитьПоле("GUID", ИдСпр);
	
	ДобавитьПоле("Comment", "Справочник.ПечатныФормыДокументов");	
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
		Пока Выборка.Следующий() Цикл 				
		
			ИдВидДок = ВидыДокументов.Получить(Выборка.ВидДокументаВКПК);
			
			Если ИдВидДок = Неопределено Тогда Продолжить; КонецЕсли;
			
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			
			СтруктураПолей.Вставить("Code", СокрЛП(Выборка.Код));
			СтруктураПолей.Вставить("A01",  ИдВидДок);
			СтруктураПолей.Вставить("A02",  Выборка.ЧислоКопий);
			
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
			
		КонецЦикла;    
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
	// Выгрузка печатных форм организаций
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ИдСпр = "C7B2883C-D872-4D19-8B32-E7CEFAACEACA";
	
	ДобавитьПоле("GUID", ИдСпр);
	
	ДобавитьПоле("KILLALL", "1");    // всегда очищаем, т.к. идентификаторы генерируются "налету"            	
	
	ДобавитьПоле("Comment", "Справочник.ПечатныеФормыОрганизаций");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
				
	ЗапросОрганизации = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	кпкСведенияОрганизаций.ВидПечатныхФорм,
	|	кпкСведенияОрганизаций.Объект
	|ИЗ
	|	РегистрСведений.кпкСведенияОрганизаций КАК кпкСведенияОрганизаций");
	
	ВыборкаОрганизации = ЗапросОрганизации.Выполнить().Выбрать();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПечатныеФормы.Ссылка
	|ИЗ
	|	ПечатныеФормы КАК ПечатныеФормы
	|ГДЕ
	|	ПечатныеФормы.ВидФормы ПОДОБНО &ВидФормы";
	
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ВидПечатнойФормы = ВыборкаОрганизации.ВидПечатныхФорм;
		
		Если ЗначениеЗаполнено(ВидПечатнойФормы) Тогда
			
			Запрос.УстановитьПараметр("ВидФормы", "%" + Строка(ВидПечатнойФормы) + "%");
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл 				
				СтруктураПолей = Новый Структура;
				СтруктураПолей.Вставить("GUID", Новый УникальныйИдентификатор());
				СтруктураПолей.Вставить("A01", ВыборкаОрганизации.Объект);
				СтруктураПолей.Вставить("A02", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);										
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG      	
		
    //////////////////////////////////////////////////
	
КонецПроцедуры //ВыгрузитьДополнительнуюИнформацию

Процедура ВыгрузитьИзображения()

	Если Не флВыгружатьКартинкиВКПК Тогда		
		Возврат;
    КонецЕсли;
	
	ИмяКаталога = КаталогВременныхФайлов() + "PhotosFrom1C\";
	
	кпкАгентПлюс.ПроверитьСуществованиеКаталога(ИмяКаталога, Ложь, Истина);
	
	НайденныеФайлы = НайтиФайлы(ИмяКаталога, "*.PNG");
	
	Если НайденныеФайлы.Количество() > 0 Тогда 
		Попытка
			УдалитьФайлы(ИмяКаталога, "*.PNG"); 
		Исключение			
			ТекстСообщения = "Невозможно удалить файлы картинок из каталога: " + ИмяКаталога+ " по причине: " + ОписаниеОшибки();																				
			ОповеститьОСобытии(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Ссылка,
	|	ХранилищеДополнительнойИнформации.Наименование,
	|	ХранилищеДополнительнойИнформации.ИмяФайла,
	|	ХранилищеДополнительнойИнформации.ПометкаУдаления,
	|	ЛОЖЬ КАК ПризнакТоргТочки,
	|	ХранилищеДополнительнойИнформации.Хранилище
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ХранилищеДополнительнойИнформации.ВидДанных = &ВидДанных
	|	И (ХранилищеДополнительнойИнформации.Объект.Родитель В ИЕРАРХИИ (&Объект)
	|			ИЛИ ХранилищеДополнительнойИнформации.Объект В ИЕРАРХИИ (&Объект)
	|			ИЛИ ХранилищеДополнительнойИнформации.Объект В (&Клиенты))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	кпкТорговыеТочкиФото.ИдентификаторФото,
	|	кпкТорговыеТочкиФото.Комментарий,
	|	кпкТорговыеТочкиФото.ИмяФайла,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	кпкТорговыеТочкиФото.Хранилище
	|ИЗ
	|	Справочник.кпкТорговыеТочки.Фото КАК кпкТорговыеТочкиФото
	|ГДЕ
	|	кпкТорговыеТочкиФото.Ссылка В(&ТоргТочки)");
	
	Запрос.УстановитьПараметр("ВидДанных", Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение);
	Запрос.УстановитьПараметр("Объект"	 , сзАссортимент);
	Запрос.УстановитьПараметр("Клиенты"  , сзКлиентыАгента);
	Запрос.УстановитьПараметр("ТоргТочки", сзТоргТочкиАгента);
	
	СписокИзображений = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	СтрДляАрхива = "";	
	
	Пока СписокИзображений.Следующий() Цикл
		
		ИДТовара 	   = ?(СписокИзображений.ПризнакТоргТочки, СписокИзображений.Ссылка, 
						 Строка(СписокИзображений.Ссылка.УникальныйИдентификатор()));
		Если ПустаяСтрока(ИДТовара) Тогда Продолжить; КонецЕсли;
		ИмяФайлаФото   = ВРег(ИдТовара);
		//ИмяФайлаФото = СписокИзображений.ИмяФайла;
		//ИмяФайлаФото = ?(ПустаяСтрока(ИмяФайлаФото), СписокИзображений.Наименование, ИмяФайлаФото);
		//ИмяФайлаФото = ?(ПустаяСтрока(ИмяФайлаФото), СписокИзображений.Ссылка.Объект.Наименование, ИмяФайлаФото);
		ИмяФайлаФото = ИмяФайлаФото + ".png";
		ПолноеИмяФайла = ИмяКаталога + ИмяФайлаФото;
		
		//СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокИзображений);				
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("GUID"	 	 , ВРЕГ(ИДТовара));
		СтруктураПолей.Вставить("FileName"	 , ИмяФайлаФото);
		СтруктураПолей.Вставить("Format"	 , Прав(СписокИзображений.ИмяФайла, 3));
		СтруктураПолей.Вставить("Description", СписокИзображений.Наименование);
		ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
				
		Картинка 	   = СписокИзображений.Хранилище.Получить();   
		Если ТипЗнч(Картинка) = Тип("ДвоичныеДанные") Тогда
			Картинка = Новый Картинка(Картинка);
		КонецЕсли;
		Если Картинка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КартинкаPNG    = Картинка.Преобразовать(ФорматКартинки.PNG);
		КартинкаPNG.Записать(ПолноеИмяФайла);
		КолФотоМТ = КолФотоМТ + 1;
		
		СтрДляАрхива = СтрДляАрхива + ИмяФайлаФото + Т_ + ПолноеИмяФайла + Т_;	
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //PICTURES
	
	Если ЗначениеЗаполнено(СтрДляАрхива) Тогда
		// Убираем последний табулятор
		СтрДляАрхива = Лев(СтрДляАрхива, СтрДлина(СтрДляАрхива)-1);	
		#Если Не Клиент Тогда
			КПКОбъектZip.Pack(ИмяКаталога + "GoodsPhotosFromCDB.zip", СтрДляАрхива);									
		#Иначе
			КПКОбъект.АрхУпаковать(ИмяКаталога + "GoodsPhotosFromCDB.zip", СтрДляАрхива);									
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры // ВыгрузитьИзображения()

Процедура ВыгрузитьКонстанты(ТекстXML)
	
	// Валюта
	ДобавитьКонстанту("d2b5508c-7453-4a52-b803-a846992a485d", Константы.ВалютаРегламентированногоУчета.Получить().Наименование);
	
	// Представление валюты
	ПредставлениеВалюты = "Валюта: наименование, код " + Константы.ВалютаРегламентированногоУчета.Получить().НаименованиеПолное + ", " + Константы.ВалютаРегламентированногоУчета.Получить().Код;
	ДобавитьКонстанту("adb99df4-739b-4e6f-aea9-e751b55cb18a", ПредставлениеВалюты);
	
	// Единица измерения веса
	ДобавитьКонстанту("13af34a5-664d-4aad-a29c-eefc04fefca9", Константы.ЕдиницаИзмеренияВеса.Получить().Наименование);
	
	// Основная фирма
	ДобавитьКонстанту("13faf2a0-3d1e-469e-bc53-cdada6ac1375", Строка(СведенияАгента.ОсновнаяФирма.УникальныйИдентификатор()));
	
	// Пересчет в базовые единицы измерения
	ИспользоватьЕдИзм = ПреобразоватьЗначениеВСтрокуДляXML(Константы.кпкИспользоватьЕдИзм.Получить());
	ДобавитьКонстанту("0d0b118f-a77d-4a90-adfb-c79e5eb08cdb", ИспользоватьЕдИзм);
	
	// Использовать характеристики
	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
	ИспХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() и РежимВыгрузкиОстатков = 1;
	ДобавитьКонстанту("6e9470db-c618-4bf8-b510-d1e39e2217f6", ПреобразоватьЗначениеВСтрокуДляXML(ИспХарактеристики));
	
	// Префикс нумерации документов
	ПрефиксПолный = ПрефиксАгента;
	ОбщегоНазначения.ДобавитьПрефиксУзла(ПрефиксПолный);
	ДобавитьКонстанту("c21ed754-43d4-423d-bdb6-8d2f36b9f8d1", ПрефиксПолный);
	
	// Склады в табличной части документов
	СкладыВТЧ = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	ПеречислСклады = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов;
	Если СкладыВТЧ = ПеречислСклады.НеИспользовать или СкладыВТЧ = ПеречислСклады.ДляДокументовПоступления Тогда
		СкладыВТЧМТ = "0";
	Иначе
		СкладыВТЧМТ = "1";
	КонецЕсли;
	
	ДобавитьКонстанту("63b7d515-ce1d-4f91-b65e-1293495a07e1", СкладыВТЧМТ);
	
	// Основной склад
	ДобавитьКонстанту("86ba5dad-16d0-46b8-9d8d-3eab2cf08685", ПреобразоватьЗначениеВСтрокуДляXML(ОснСклад));
	
	// Использовать торговые точки
	ДобавитьКонстанту("8c52bbbf-8bbb-447d-b18b-06860d372818", Строка(Константы.кпкРежимТоргТочек.Получить()));
	
	// Использовать договоры
	ИспользоватьДоговоры = ПреобразоватьЗначениеВСтрокуДляXML(Константы.кпкИспользоватьДоговоры.Получить());
	ДобавитьКонстанту("b201164e-e265-4c1d-b3d0-0579bcd1fda6", ИспользоватьДоговоры);
	
	// Фактический адрес
	ФактАдрес = ПреобразоватьЗначениеВСтрокуДляXML(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	ДобавитьКонстанту("1b3d41b2-eb00-4f25-a476-6a668c5e69f0", ФактАдрес);
	
	// Основной тип цены продажи
	ОсновнойТипЦеныПродажи = Строка(СведенияАгента.ОсновнойТипЦены.УникальныйИдентификатор());
	ДобавитьКонстанту("7bc85296-f536-411e-aaa9-74ad5c7adea2", ОсновнойТипЦеныПродажи);
	
	// Использование истории продаж
	ИспИП = Константы.кпкГлубинаИсторииПродаж.Получить();
	ДобавитьКонстанту("0270b3d5-4213-419b-9e3a-48cba4caec04", ?(ИспИП = 0, "0", "1"));
	
	// Дата и время последнего трека, сделанного в КПК
	ДатаТрека = ПолучитьДатуПоследнегоТрека();
	
	// Дата и время последнего трека, сделанного в КПК
	Если ЗначениеЗаполнено(ДатаТрека) Тогда           
		ДобавитьКонстанту("df297ad7-e2ce-478a-974e-fb399239e23e", ДатаТрека);
	КонецЕсли;
	
	// Мининимальный тип цены, выгружается если заполнен
	МинимальныйТипЦены = СведенияАгента.МинимальныйТипЦены;
	Если ЗначениеЗаполнено(МинимальныйТипЦены) Тогда
		ДобавитьКонстанту("0a253e8b-9043-414b-8026-0c9369f781ad", МинимальныйТипЦены);
	КонецЕсли;
	
	//Константы точности цены, количества и скидки 	
	ДобавитьКонстанту("27952ab3-1365-4b56-a0ef-34ec0133e5d3", "2");
	ДобавитьКонстанту("5d54ed85-fdea-4027-8ecd-129c27bdbf64", "2");
	ДобавитьКонстанту("a978f039-3f17-4705-b7f6-16c580c9ac5f", "2");
	
	// Мобильный склад, выгружается если заполнен
	Если ЗначениеЗаполнено(АвтоСклад) Тогда
		ДобавитьКонстанту("448b6fab-5e21-479c-9a9a-63e8eced59b9", АвтоСклад);
	КонецЕсли;
	
	Если Константы.кпкВыделятьЦветомПросроченныеДолги.Получить() Тогда		
		ЦветВыделения = Константы.кпкЦветПросроченныхДолгов.Получить().Получить();		
		Если ЦветВыделения = Неопределено Тогда
			// Если не указан для агента опредленный цвет, то по умолчанию выделяем красным
			ЗначениеКонстанты = "255,0,0";
		Иначе
			ЗначениеКонстанты = кпкАгентПлюс.ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему(ЦветВыделения, Истина);
		КонецЕсли;                                                    		
		// Цвет выделения просроченных долгов
		ДобавитьКонстанту("9c60a778-7db0-4b3a-89d5-ebe6b56b1d7f", ЗначениеКонстанты);
	КонецЕсли;   	
	
КонецПроцедуры //ВыгрузитьКонстанты

Процедура ВыгрузитьПодтвержденияДокументов()
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
	
	ДобавитьПоле("Comment", "Подтверждения документов");
	
	   	ВыгрузитьПодтвержденияЗаказовПокупателей();
		
		ВыгрузитьПодтвержденияОрдеров();
		
		ВыгрузитьПодтвержденияМерчендайзинга();
		
		ВыгрузитьПодтвержденияПосещений();
		
		ВыгрузитьПодтвержденияПеремещений();
		
		ВыгрузитьПодтвержденияРеализаций();
		
		ВыгрузитьПодтвержденияПоступлений();
		
		//ВыгрузитьПодтвержденияСчетФактур();
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENTS
	
КонецПроцедуры //ВыгрузитьПодтвержденияДокументов

// Функция получает единицу измерения по умолчанию для подстановки в номенклатуру
// для выполнения первичной записи
// Возвращаемое значение:
// СправочникСсылка.КлассификаторЕдиницИзмерения - ссылка на единицу измерения
//
Функция ПолучитьЕдиницуИзмеренияПоУмолчанию()

	Перем ЕдиницаИзмерения;
	ЕдиницаИзмерения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяЕдиницаПоКлассификатору");
	Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		СписокЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать();
		Если СписокЕдиниц.Следующий() Тогда
			ЕдиницаИзмерения = СписокЕдиниц.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;
КонецФункции // ПолучитьЕдиницуИзмерения()


// Процедура загружает элементы справочника номенклатура, созданные или измененные в 
// мобильном устройстве
Процедура ЗагрузитьНоменклатуру(ТекстXML, ОбъектСпр, ЭтоНовый, ЕдиницаИзмерения)

	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		Если ИмяПараметра = "IsDeleted" Тогда
			ПометкаУдаления = Булево(Число(ЗначПараметра));							
		ИначеЕсли ИмяПараметра = "GUID" Тогда
			НоменклатураИд = ЗначПараметра;	
		ИначеЕсли ИмяПараметра = "Name" Тогда
			Наименование = СокрЛП(ЗначПараметра);
		ИначеЕсли ИмяПараметра = "GrpId0" Тогда 			
			Группа = ПолучитьСсылкуИзСправочника(ЗначПараметра, "Номенклатура");
		ИначеЕсли ИмяПараметра = "GrpId1" Тогда 			
			ОбъектСпр.НоменклатурнаяГруппа = ПолучитьСсылкуИзСправочника(ЗначПараметра, "НоменклатурныеГруппы");
		ИначеЕсли ИмяПараметра = "A035" Тогда
			ОбъектСпр.НаименованиеПолное = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A042" Тогда
			ОбъектСпр.ДополнительноеОписаниеНоменклатуры = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A06" Тогда
			БазоваяЕдиницаИд = ЗначПараметра;
		КонецЕсли; 						
		
	КонецЦикла;
	
	ВидТовара 		   = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	ВыборкаВидовТовара = Справочники.ВидыНоменклатуры.Выбрать(,,,"Код Возр");
	Если ВыборкаВидовТовара.Следующий() Тогда
		ВидТовара = ВыборкаВидовТовара.Ссылка;
	КонецЕсли;
	
	БазоваяЕдиница = СписокЕдиницИзмерения.Получить(НоменклатураИд);
	
	Если БазоваяЕдиница = Неопределено Тогда
		БазоваяЕдиница = ЕдиницаИзмерения;
	КонецЕсли;
	
	ОбъектСпр.Родитель 				  = Группа;	
	ОбъектСпр.Наименование 			  = Наименование;
	ОбъектСпр.ВидНоменклатуры 		  = ВидТовара; 	
	ОбъектСпр.БазоваяЕдиницаИзмерения = БазоваяЕдиница;
	
	СтруктураПоиска = Новый Структура("Наименование", БазоваяЕдиница.Наименование);
	СписокЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать( , ОбъектСпр.Ссылка, СтруктураПоиска);
	Если СписокЕдиниц.Следующий() Тогда
		ОбъектСпр.ЕдиницаДляОтчетов 	  = СписокЕдиниц.Ссылка;
		ОбъектСпр.ЕдиницаХраненияОстатков = СписокЕдиниц.Ссылка;
	КонецЕсли;
	ОбъектСпр.Записать();
	
	ОбъектСпр.ОбменДанными.Загрузка = Истина;
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);		
		ТекстXML.Пропустить();	
	КонецЕсли;	
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);

КонецПроцедуры // ЗагрузитьНоменклатуру()

// Процедура загружает единицы измерения для новой номенклатуры и подставляет 
// в сам объект номенклатуры эти единицы
Процедура ЗагрузитьЕдиницыИзмеренияНоменклатуры(ТекстXML, ОбъектСпр, ЭтоНовый)

	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		Если ИмяПараметра = "IsDeleted" Тогда
			ПометкаУдаления = Булево(Число(ЗначПараметра));
		ИначеЕсли ИмяПараметра = "GUID" Тогда
			ЕдиницаИд = СокрЛП(ЗначПараметра);
		ИначеЕсли ИмяПараметра = "Name" Тогда
			Наименование = СокрЛП(ЗначПараметра);
		ИначеЕсли ИмяПараметра = "A03" Тогда 			
			НоменклатураИд = ЗначПараметра;
			Номенклатура   = ПолучитьСсылкуИзСправочника(ЗначПараметра, "Номенклатура");
		ИначеЕсли ИмяПараметра = "A02" Тогда
			Коэффициент = Число(ЗначПараметра);
		КонецЕсли; 						
		
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Наименование", Наименование);
	ВыборкаЕдиниц	= Справочники.КлассификаторЕдиницИзмерения.Выбрать( , , СтруктураПоиска);
	
	Если ВыборкаЕдиниц.Следующий() Тогда
		БазоваяЕдиница = ВыборкаЕдиниц.Ссылка.ПолучитьОбъект();
	Иначе
		БазоваяЕдиница = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		СсылкаЕдиница  = Справочники.КлассификаторЕдиницИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(ЕдиницаИд));
		БазоваяЕдиница.УстановитьСсылкуНового(СсылкаЕдиница);
		БазоваяЕдиница.УстановитьНовыйКод();
	КонецЕсли;
	
	БазоваяЕдиница.Наименование = Наименование;
	БазоваяЕдиница.Записать();
	
	Если Номенклатура <> Неопределено Тогда
		ОбъектНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
		СсылкаНоменклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(НоменклатураИд));
		ОбъектНоменклатура.УстановитьСсылкуНового(СсылкаНоменклатура);
		СсылкаНоменклатура = ОбъектНоменклатура.ПолучитьСсылкуНового();
	Иначе
		СсылкаНоменклатура = Номенклатура;
	КонецЕсли;
	
	ОбъектЕдиницы = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	ОбъектЕдиницы.Наименование			  = Наименование;
	ОбъектЕдиницы.Владелец				  = СсылкаНоменклатура;
	ОбъектЕдиницы.ЕдиницаПоКлассификатору = БазоваяЕдиница.Ссылка;
	ОбъектЕдиницы.Коэффициент			  = Коэффициент;
	
	ОбъектЕдиницы.ОбменДанными.Загрузка = Истина;
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектЕдиницы, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);		
		ТекстXML.Пропустить();	
	КонецЕсли;	
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектЕдиницы, ЭтоНовый);
	// Формируем соответствие списка единиц измерения номенклатуре так как идентификатор в БД может отличаться от нового
	// идентификатора из МУ
	СписокЕдиницИзмерения.Вставить(НоменклатураИд, БазоваяЕдиница.Ссылка);

КонецПроцедуры // ЗагрузитьЕдиницыИзмеренияНоменклатуры()

Процедура ЗагрузитьКонтрагента(ТекстXML, ОбъектСпр, ЭтоНовый)
	
	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		Если ИмяПараметра = "IsDeleted" Тогда
			ПометкаУдаления = Булево(Число(ТекстXML.Значение));							
		ИначеЕсли ИмяПараметра = "Name" Тогда
			ОбъектСпр.Наименование = СокрЛП(ТекстXML.Значение);
		ИначеЕсли ИмяПараметра = "GrpId0" Тогда 			
			ОбъектСпр.Родитель = ПолучитьСсылкуИзСправочника(ЗначПараметра, "Контрагенты");
		ИначеЕсли ИмяПараметра = "A08" Тогда
			ТекДоговорКонтрагента = Новый УникальныйИдентификатор(ЗначПараметра);
		ИначеЕсли ИмяПараметра = "A06" Тогда
			ТекСтатусКонтрагента = ЗначПараметра;
		КонецЕсли; 						
		
	КонецЦикла;
	
	ОбъектСпр.ОбменДанными.Загрузка = Истина;
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);		
		ТекстXML.Пропустить();	
	КонецЕсли;	
	
	ДоговорКонтрагента = ПолучитьСсылкуИзСправочника(ТекДоговорКонтрагента, "ДоговорыКонтрагентов");
	Если Не ОбъектСпр.ЭтоГруппа Тогда 
		ОбъектСпр.Покупатель = Истина;
		ОбъектСпр.кпкОсновнойДоговорКонтрагента = ДоговорКонтрагента;
		ОбъектСпр.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);				
		Возврат;							
	КонецЕсли;	
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);
	
	Если ЭтоНовый = Истина Тогда		
		ПроверитьОсновнойДоговорКонтрагента(ОбъектСпр.Ссылка);
	КонецЕсли;
	
	СведенияКонтрагента = РегистрыСведений.кпкСведенияКонтрагента.СоздатьМенеджерЗаписи();
	СведенияКонтрагента.Объект = ОбъектСпр.Ссылка;
	СведенияКонтрагента.Прочитать();
	Если СведенияКонтрагента.Выбран() Тогда
		СведенияКонтрагента.Статус = ПолучитьСсылкуИзСправочника(ТекСтатусКонтрагента, "кпкСтатусыКонтрагентов");
	Иначе
		СведенияКонтрагента.Объект = ОбъектСпр.Ссылка;
		СведенияКонтрагента.Статус = ПолучитьСсылкуИзСправочника(ТекСтатусКонтрагента, "кпкСтатусыКонтрагентов");							
	КонецЕсли;
	
	Если Не ВыполнитьОперациюДляОбъекта(СведенияКонтрагента, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать сведения для объекта: " + Строка(СведенияКонтрагента.Объект) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, СведенияКонтрагента.Объект);		
		ТекстXML.Пропустить();	
	Иначе
		ТекстСообщения = ?(ЭтоНовый , "Записаны", "Обновлены") + " сведения для объекта: " + Строка(СведенияКонтрагента.Объект);				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, СведенияКонтрагента.Объект);									
	КонецЕсли;	
	
КонецПроцедуры //ЗагрузитьКонтрагента

Процедура ЗагрузитьДоговор(ТекстXML, ОбъектСпр, ЭтоНовый)
	
	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		Если ИмяПараметра = "IsDeleted" Тогда
			ПометкаУдаления = Булево(Число(ТекстXML.Значение));							
		ИначеЕсли ИмяПараметра = "Name" Тогда
			ОбъектСпр.Наименование = СокрЛП(ТекстXML.Значение);
		ИначеЕсли ИмяПараметра = "A02" Тогда 			
			ТекВладелец = Новый УникальныйИдентификатор(ЗначПараметра);
		ИначеЕсли ИмяПараметра = "A03" Тогда
			ОбъектСпр.Дата = ДатаВремяXMLВФормат1С(ЗначПараметра);
		ИначеЕсли ИмяПараметра = "A04" Тогда
			ОбъектСпр.СрокДействия = ДатаВремяXMLВФормат1С(ЗначПараметра);
		ИначеЕсли ИмяПараметра = "A05" Тогда
			ОбъектСпр.Организация = ПолучитьСсылкуИзСправочника(ЗначПараметра, "Организации");
		ИначеЕсли ИмяПараметра = "A06" Тогда
			ОбъектСпр.ТипЦен = ПолучитьСсылкуИзСправочника(ЗначПараметра, "ТипыЦенНоменклатуры");
		КонецЕсли; 						
		
	КонецЦикла;
	
	ВладелецТочки = ПолучитьСсылкуИзСправочника(ТекВладелец, "Контрагенты");
	ОбъектСпр.Владелец = ВладелецТочки;						
	ОбъектСпр.ОбменДанными.Загрузка = Истина;
	ВалютаВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), 
																			    "ОсновнаяВалютаВзаиморасчетов");
	ОбъектСпр.ВалютаВзаиморасчетов  = ВалютаВзаиморасчетов;
	Если Не ЗначениеЗаполнено(ОбъектСпр.ВалютаВзаиморасчетов) Тогда
		ОбъектСпр.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	ОбъектСпр.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	ОбъектСпр.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;		
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);		
		Возврат;
	КонецЕсли;	
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);   	
	
КонецПроцедуры //ЗагрузитьДоговор

Процедура ЗагрузитьТорговуюТочку(ТекстXML, ОбъектСпр, ЭтоНовый)
	
	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		Если ИмяПараметра = "IsDeleted" Тогда
			ПометкаУдаления = Булево(Число(ТекстXML.Значение));							
		ИначеЕсли ИмяПараметра = "Name" Тогда
			ОбъектСпр.Наименование = СокрЛП(ТекстXML.Значение);
		ИначеЕсли ИмяПараметра = "A02" Тогда 			
			ТекВладелец = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A05" Тогда 			
			ОбъектСпр.Категория = ПолучитьСсылкуИзСправочника(ЗначПараметра, "кпкКатегорииКонтрагентов");
		ИначеЕсли ИмяПараметра = "A06" Тогда 			
			ОбъектСпр.ТипТочки = ПолучитьСсылкуИзСправочника(ЗначПараметра, "кпкТипыТорговыхТочек");
		ИначеЕсли ИмяПараметра = "A07" Тогда 			
			ОбъектСпр.Комментарий = ЗначПараметра;
		КонецЕсли; 						
		
	КонецЦикла;
	
	ВладелецТочки = ПолучитьСсылкуИзСправочника(ТекВладелец, "Контрагенты");
	ОбъектСпр.Владелец			 = ВладелецТочки;
	ОбъектСпр.НаименованиеПолное = ОбъектСпр.Наименование;
	
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);				
		Возврат;
	КонецЕсли;
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);
	
КонецПроцедуры //ЗагрузитьТорговуюТочку

Процедура ЗагрузитьКонтактноеЛицо(ТекстXML, ОбъектСпр, ЭтоНовый)
	
	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		Если ИмяПараметра = "IsDeleted" Тогда
			ПометкаУдаления = Булево(Число(ТекстXML.Значение));							
		ИначеЕсли ИмяПараметра = "Name" Тогда
			НаименованиеКЛ = СокрЛП(ТекстXML.Значение);
		ИначеЕсли ИмяПараметра = "A02" Тогда 			
			ДатаРожденияКЛ = ДатаВремяXMLВФормат1С(ЗначПараметра);
		ИначеЕсли ИмяПараметра = "A03" Тогда 			
			КонтрагентКЛ = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A04" Тогда 			
			ТорговаяТочкаКЛ = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A05" Тогда 			
			КомментарийКЛ = ЗначПараметра;
		КонецЕсли; 						
		
	КонецЦикла;    						
	
	КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
	КонтактноеЛицо.Наименование = НаименованиеКЛ;
	КонтактноеЛицо.ДатаРождения = ДатаРожденияКЛ;
	КонтактноеЛицо.ОбменДанными.Загрузка = Истина;
	КонтактноеЛицо.УстановитьНовыйКод();
	Если Не ВыполнитьОперациюДляОбъекта(КонтактноеЛицо, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(КонтактноеЛицо) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, КонтактноеЛицо);				
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(КонтрагентКЛ) И Не ЗначениеЗаполнено(ТорговаяТочкаКЛ) Тогда 
		ТекВладелецКЛ = ПолучитьСсылкуИзСправочника(КонтрагентКЛ, "Контрагенты");
		ОбъектСпр.Владелец = ТекВладелецКЛ;
	Иначе
		ТекВладелецКЛ = ПолучитьСсылкуИзСправочника(ТорговаяТочкаКЛ, "кпкТорговыеТочки");
		ОбъектСпр.Владелец = ТекВладелецКЛ.Владелец;
	КонецЕсли;
	
	ОбъектСпр.КонтактноеЛицо = КонтактноеЛицо.Ссылка;
	ОбъектСпр.Наименование   = НаименованиеКЛ;
	ОбъектСпр.Комментарий    = КомментарийКЛ;
	ОбъектСпр.ОбменДанными.Загрузка = Истина;
	
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);				
		Возврат;
	КонецЕсли;
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);
	
	Если ЗначениеЗаполнено(ТорговаяТочкаКЛ) Тогда
		ТекВладелецКЛ = ТекВладелецКЛ.ПолучитьОбъект();
		Если ТекВладелецКЛ.КонтактныеЛица.Найти(ОбъектСпр.Ссылка) = Неопределено Тогда 
			НоваяСтрока = ТекВладелецКЛ.КонтактныеЛица.Добавить();
			НоваяСтрока.КонтактноеЛицо = ОбъектСпр.Ссылка;
			Если ТекВладелецКЛ.Владелец = Справочники.Контрагенты.ПустаяСсылка() Тогда
				ТекВладелецКЛ.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			Если Не ВыполнитьОперациюДляОбъекта(ТекВладелецКЛ, "запись") Тогда 	
				ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ТекВладелецКЛ) + " в базу!";				
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ТекВладелецКЛ);		
				ТекстXML.Пропустить();										
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;   	
	
КонецПроцедуры //ЗагрузитьКонтактноеЛицо

Процедура ЗагрузитьФотографиюДокумента(ТекстXML, ОбъектСпр, ЭтоНовый)
	
	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		Если ИмяПараметра = "IsDeleted" Тогда
			ПометкаУдаления = Булево(Число(ТекстXML.Значение));							
		ИначеЕсли ИмяПараметра = "Name" Тогда
			ОбъектСпр.Наименование = СокрЛП(ТекстXML.Значение);
		ИначеЕсли ИмяПараметра = "A01" Тогда 			
			ОбъектСпр.ИдОбъекта = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A02" Тогда 											
			ОбъектСпр.ИдОбъекта = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A03" Тогда 											
			ОбъектСпр.ИдОбъекта = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A06" Тогда 											
			ОбъектСпр.ИдОбъекта = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A04" Тогда 											
			ИдФото = ЗначПараметра;								
		ИначеЕсли ИмяПараметра = "A05" Тогда 																			
			ОбъектСпр.ДатаВремяСоздания = ДатаВремяXMLВФормат1С(ЗначПараметра);
		КонецЕсли; 						
		
	КонецЦикла;
	
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);				
		Возврат;
	КонецЕсли;
	
	НовСтрока = ТабЗагруженныхФото.Добавить();
	НовСтрока.Ссылка = ОбъектСпр.Ссылка;
	НовСтрока.ИдФото = НРег(ИдФото);
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);	
	
КонецПроцедуры //ЗагрузитьФотографиюДокумента

Процедура ЗагрузитьФотографиюСправочника(ТекстXML)
	
	Перем ИдТорговойТочки;
	Перем ИдКонтрагента;
	Перем ИдНоменклатуры;
	Перем ИдФото;
	
	СтруктураОбъекта = Новый Структура;
	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		СтруктураОбъекта.Вставить(ИмяПараметра, ЗначПараметра);
		
	КонецЦикла;
	
	СтруктураОбъекта.Свойство("A04", ИдТорговойТочки);
	СтруктураОбъекта.Свойство("A03", ИдКонтрагента);
	СтруктураОбъекта.Свойство("A02", ИдНоменклатуры);
	СтруктураОбъекта.Свойство("A01", ИдФото);
	
	Если ЗначениеЗаполнено(ИдТорговойТочки) Тогда	
		СсылкаФото  = Справочники.кпкТорговыеТочки.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдТорговойТочки));
		СпрМенеджер = Справочники.кпкТорговыеТочки;
	ИначеЕсли ЗначениеЗаполнено(ИдКонтрагента) Тогда
		СсылкаФото  = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдКонтрагента));
		СпрМенеджер = Справочники.Контрагенты;
	ИначеЕсли ЗначениеЗаполнено(ИдНоменклатуры) Тогда
		СсылкаФото  = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдНоменклатуры));
		СпрМенеджер = Справочники.Номенклатура;
	КонецЕсли;
	
	ЭтоНовыйОбъект = Истина;
	
	Если СсылкаФото.ПолучитьОбъект() = Неопределено Тогда			
		ОбъектФото = СпрМенеджер.СоздатьЭлемент();						
		ОбъектФото.УстановитьСсылкуНового(СсылкаФото);
		ОбъектФото.ОбменДанными.Загрузка = Истина;
		ОбъектФото.УстановитьНовыйКод();
	Иначе						
		ОбъектФото = СсылкаФото.ПолучитьОбъект();
		ОбъектФото.Разблокировать();
		ЭтоНовыйОбъект = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаФото) = Тип("СправочникСсылка.кпкТорговыеТочки") Тогда
		
		Если ОбъектФото.Фото.Найти(ВРег(Строка(ИдФото)), "ИдентификаторФото") = Неопределено Тогда
			НоваяСтрока = ОбъектФото.Фото.Добавить();
			НоваяСтрока.ИдентификаторФото = ВРег(Строка(ИдФото));
		КонецЕсли;
		
	Иначе		
		// Записываем предварительно, если справочник не подчиненный
		Если СсылкаФото.Метаданные().Владельцы.Количество() = 0 Тогда
			Если Не ВыполнитьОперациюДляОбъекта(ОбъектФото, "запись") Тогда 	
				ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектФото) + " в базу!";				
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектФото);		
				ТекстXML.Пропустить();
				Возврат;
			КонецЕсли;									
		КонецЕсли;
		
		СсылкаХранилища = Справочники.ХранилищеДополнительнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдФото));
		Если СсылкаХранилища.ПолучитьОбъект() = Неопределено Тогда			
			ОбъектХранилища = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();						
			ОбъектХранилища.УстановитьСсылкуНового(СсылкаХранилища);
			ОбъектХранилища.ОбменДанными.Загрузка = Истина;
			ОбъектХранилища.УстановитьНовыйКод();
		Иначе						
			ОбъектХранилища = СсылкаХранилища.ПолучитьОбъект();
			ОбъектХранилища.Разблокировать();
			ЭтоНовыйОбъект = Ложь;
		КонецЕсли;
		ОбъектХранилища.Объект	  = СсылкаФото;
		ОбъектХранилища.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение;
		ОбъектХранилища.Записать();
	КонецЕсли;
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектФото, "запись") Тогда
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектФото) + " в базу!";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектФото);
		Возврат;
	КонецЕсли;
	
	НовСтрока = ТабЗагруженныхФото.Добавить();
	НовСтрока.Ссылка = ОбъектФото.Ссылка;
	НовСтрока.ИдФото = НРег(ИдФото);
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектФото, ЭтоНовыйОбъект);
	ТекстXML.Прочитать();
	
КонецПроцедуры

Процедура ЗагрузитьКонтактнуюИнформацию(ТекстXML, Спр)
	
	ИдЭлемента       = ТекстXML.ПолучитьАтрибут("GUID");
	ИдКонтрагент     = ТекстXML.ПолучитьАтрибут("A01");
	ИдТорговаяТочка  = ТекстXML.ПолучитьАтрибут("A02");
	ИдКонтактноеЛицо = ТекстXML.ПолучитьАтрибут("A03");
	ИдТип 		     = ТекстXML.ПолучитьАтрибут("A04");
	ИдВид 		     = ТекстXML.ПолучитьАтрибут("A05");
	Представление    = ТекстXML.ПолучитьАтрибут("A06");
	
	Если Не ИдКонтрагент = Неопределено Тогда
		ТекОбъект = ПолучитьСсылкуИзСправочника(ИдКонтрагент, "Контрагенты");
		Если Не ЗначениеЗаполнено(ТекОбъект) Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Не ИдКонтактноеЛицо = Неопределено Тогда
		ТекОбъект = ПолучитьСсылкуИзСправочника(ИдКонтактноеЛицо, "КонтактныеЛицаКонтрагентов");
		Если Не ЗначениеЗаполнено(ТекОбъект) Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Не ИдТорговаяТочка = Неопределено Тогда
		ТекОбъект = ПолучитьСсылкуИзСправочника(ИдТорговаяТочка, "кпкТорговыеТочки");
		Если Не ЗначениеЗаполнено(ТекОбъект) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;					
	
	Тип = ПолучитьЗначениеПеречисления(ИдТип); 
	Если Тип = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Вид = ПолучитьСсылкуИзСправочника(ИдВид, "ВидыКонтактнойИнформации");
	Если Вид = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдКонтрагент <> Неопределено или ИдКонтактноеЛицо <> Неопределено Тогда
		
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ТекОбъект);
		НаборЗаписей.Отбор.Тип.Установить(Тип);
		НаборЗаписей.Отбор.Вид.Установить(Вид);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			СтрокаНабора = НаборЗаписей.Добавить();						
		Иначе  						
			СтрокаНабора = НаборЗаписей[0];
		КонецЕсли;
		
		СтрокаНабора.Объект 	   = ТекОбъект;	
		СтрокаНабора.Тип		   = Тип;	
		СтрокаНабора.Вид 		   = Вид;	
		СтрокаНабора.Представление = Представление;	
		
		Если Не ВыполнитьОперациюДляОбъекта(НаборЗаписей, "запись") Тогда 	
			ТекстСообщения = "Не удалось записать контактную информацию для объекта: " + ТекОбъект;				
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ТекОбъект);					
			Возврат;
		КонецЕсли;	
		
		ТекстСообщения = "Записана контактная информация для объекта: " + ТекОбъект;				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, ТекОбъект);	
		
	ИначеЕсли ИдТорговаяТочка <> Неопределено Тогда
		
		ОбъектТТ = ТекОбъект.ПолучитьОбъект();
		Если Не ОбъектТТ = Неопределено Тогда
			
			Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				ОбъектТТ.Адрес = Представление;
			ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				ОбъектТТ.Телефоны = Представление;
			КонецЕсли;
			
			Если ОбъектТТ.Владелец = Справочники.Контрагенты.ПустаяСсылка() Тогда
				ОбъектТТ.ОбменДанными.Загрузка = Истина;
			КонецЕсли;						
			
			Если Не ВыполнитьОперациюДляОбъекта(ОбъектТТ, "запись") Тогда 	
				ТекстСообщения = "Не удалось записать элемент справочника: " + ОбъектТТ;				
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектТТ);		
				Возврат;
			КонецЕсли;	
			
			ТекстСообщения = "Записана контактная информация для объекта: " + ОбъектТТ;				
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, ОбъектТТ);
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписЗагруженныхОбъектовСпр.НайтиПоЗначению(ИдЭлемента) = Неопределено Тогда
		СписЗагруженныхОбъектовСпр.Добавить(ИдЭлемента, "КонтактнаяИнформация");
	КонецЕсли;   					
			 	
КонецПроцедуры //ЗагрузитьКонтактнуюИнформацию
   
Процедура ЗагрузитьСправочник(ТекстXML, Спр)
	
	СпрМенеджер = Справочники[Спр];
	
	Если Спр <> "ХранилищеДополнительнойИнформации" Тогда
		ИдОбъекта = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
		
		СсылкаОбъекта = СпрМенеджер.ПолучитьСсылку(ИдОбъекта);
		
		ЭтоНовыйОбъект = Истина;
		
		Если СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда
			ОбъектСпр = СпрМенеджер.СоздатьЭлемент();						
			ОбъектСпр.УстановитьСсылкуНового(СсылкаОбъекта);
			ОбъектСпр.ОбменДанными.Загрузка = Истина;
			ОбъектСпр.УстановитьНовыйКод();
		Иначе						
			ОбъектСпр = СсылкаОбъекта.ПолучитьОбъект();
			ОбъектСпр.Разблокировать();
			ЭтоНовыйОбъект = Ложь;
		КонецЕсли; 
		
		// Записываем предварительно, если справочник не подчиненный
		Если СсылкаОбъекта.Метаданные().Владельцы.Количество() = 0 Тогда
			Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
				ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);		
				ТекстXML.Пропустить();
				Возврат;
			КонецЕсли;									
		КонецЕсли;					
		
		Если Спр = "Контрагенты" Тогда   		
			ЗагрузитьКонтрагента(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);	
			ТекстXML.Прочитать();
		ИначеЕсли Спр = "ДоговорыКонтрагентов" Тогда
			ЗагрузитьДоговор(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);
			ТекстXML.Прочитать();
		ИначеЕсли Спр = "кпкТорговыеТочки" Тогда
			ЗагрузитьТорговуюТочку(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);
			ТекстXML.Прочитать();
		ИначеЕсли Спр = "КонтактныеЛицаКонтрагентов" Тогда
			ЗагрузитьКонтактноеЛицо(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);
			ТекстXML.Прочитать();
		ИначеЕсли Спр = "кпкФотоКДокументам" Тогда
			ЗагрузитьФотографиюДокумента(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);
			ТекстXML.Прочитать();
		ИначеЕсли Спр = "Номенклатура" Тогда   		
			ЗагрузитьНоменклатуру(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект, ПолучитьЕдиницуИзмеренияПоУмолчанию());	
			ТекстXML.Прочитать();
		ИначеЕсли Спр = "ЕдиницыИзмерения" Тогда   		
			ЗагрузитьЕдиницыИзмеренияНоменклатуры(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);	
			ТекстXML.Прочитать();
		КонецЕсли;
	Иначе
		ЗагрузитьФотографиюСправочника(ТекстXML);
		//ТекстXML.Прочитать();
		//ТекстXML.Прочитать();
	КонецЕсли;

КонецПроцедуры //ЗагрузитьСправочник

Процедура ЗагрузитьСправочники(ТекстXML)
	
	СписЗагруженныхОбъектовСпр.Очистить();
		
	ТабЗагруженныхФото.Очистить();		
		
	Пока ТекстXML.Прочитать() Цикл
		
		Если ТекстXML.Имя = "KILLEDS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ТекстXML.Пропустить();
			Продолжить;
		КонецЕсли;
		
		Если ТекстXML.Имя = "CATALOGS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
 		
		Если ТекстXML.Имя = "CATALOG" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Продолжить;
		КонецЕсли;
		
		ИдСпрXML = ТекстXML.ЗначениеАтрибута("GUID");
		Если ИдСпрXML <> Неопределено Тогда
			ИдСправочника = ИдСпрXML;  												
		КонецЕсли;
		
		Спр = СоответствиеСпрЗагр.Получить(НРег(ИдСправочника));
		
		Если Спр = Неопределено Тогда
			ТекстXML.Пропустить();			
			Если ТекстXML.Имя = "CATALOGS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			Иначе
				ИдСпрXML = ТекстXML.ЗначениеАтрибута("GUID");
				Если ИдСпрXML <> Неопределено Тогда
					ИдСправочника = ИдСпрXML;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
			
		Пока ТекстXML.Прочитать() Цикл
			
			Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			КонецЕсли;
			
			Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТекстXML.Прочитать();
			ИначеЕсли ТекстXML.Имя = "KILLEDS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТекстXML.Пропустить();
				Прервать;
			КонецЕсли;
			
			Если Спр = "КонтактнаяИнформация" Тогда
				ЗагрузитьКонтактнуюИнформацию(ТекстXML, Спр)
			Иначе
				ЗагрузитьСправочник(ТекстXML, Спр);
			КонецЕсли;  								
			
		КонецЦикла;   	 
		
	КонецЦикла;   
		
КонецПроцедуры //ЗагрузитьСправочники

Процедура ЗагрузитьДокументЗаказ(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдДок, СостДок," + 
										  "ИдФирмы, ИдКлиента, ИдДоговора, ИдТоргТочки, ИдМаршрута," + 
										  "СуммаДокумента, Комментарий, ВидОплаты, ИдДокОсн, Широта," + 
										  "Долгота, Категория, СпособСоздания");	
	
	ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
	СтруктураПараметров.ВидДокумента       = "Заказ";
	СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
	СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A02");
	СтруктураПараметров.ИдКлиента	   	   = ТекстXML.ПолучитьАтрибут("A03");
	СтруктураПараметров.ИдДоговора 		   = ТекстXML.ПолучитьАтрибут("A05");
	СтруктураПараметров.ИдТоргТочки   	   = ТекстXML.ПолучитьАтрибут("A04");	
	СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A011");	
	СтруктураПараметров.СуммаДокумента	   = Число(ТекстXML.ПолучитьАтрибут("A08"));
	СтруктураПараметров.ТипЦен 	           = ТекстXML.ПолучитьАтрибут("A07");
	
	СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A014");
	СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A015");	
	
	КатегорияСсылка = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A012"), "кпкКатегорииДокументов");
	СтруктураПараметров.Категория 	       = КатегорияСсылка;
	СтруктураПараметров.СпособСоздания 	   = "User";
	
	ДатаДоставки = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	
	Менеджер = Документы.ЗаказПокупателя;
		
	//
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ТорговаяТочка, ДоговорКонтрагента");
	
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "Продажа");
	
	УстановитьДоговорВДокументе(ОбъектДок);
	
	ОбъектДок.ДатаОтгрузки 	     = ДатаДоставки;
	ОбъектДок.СкладГруппа		 = ОснСклад;
	
	Если ВидОплатыПоУмолчанию = Перечисления.ВидыДенежныхСредств.Наличные Тогда
		ОбъектДок.СтруктурнаяЕдиница = КассыАгента;
	ИначеЕсли ВидОплатыПоУмолчанию = Перечисления.ВидыДенежныхСредств.Безналичные  Тогда
		ОбъектДок.СтруктурнаяЕдиница = ОбъектДок.Организация.ОсновнойБанковскийСчет;
	КонецЕсли;
	
	Если ОснСклад.Пустая() Тогда		
		ТекстСообщения = "Для агента: " + ВыбАгент + " не указана настройка ""Основной склад""." +
		" В документе " + Строка(ОбъектДок) + " в качестве склада будет указан склад из настроек текущего пользователя";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, ОбъектДок);  		
		ОснСклад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), 
																	   "ОсновнойСклад");		
	КонецЕсли;	
	
	ОбъектДок.СкладГруппа  = ОснСклад;
	
	СтруктураЗаписи = РегистрыСведений.кпкСведенияОрганизаций.Получить(Новый Структура("Объект", ОбъектДок.Организация));
	
	УчитыватьНДС 		   = СтруктураЗаписи.ИспНДС;
	ОбъектДок.УчитыватьНДС = УчитыватьНДС;
	
	Если Не ОбъектДок.ЭтоНовый() Тогда
		ОбъектДок.Товары.Очистить();
		ОбъектДок.Услуги.Очистить();
	КонецЕсли;
	
	ОбщаяСкидка = Число(ТекстXML.ПолучитьАтрибут("A06"));
	
	ТекстXML.Прочитать();
	// Заполнение табличной части
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ТекстXML.Прочитать();
		
		Если СокрЛП(ТекстXML.ПолучитьАтрибут("GUID")) = "0738E61B-F06F-464A-8483-4249E0254819" Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
				Количество		 = Число(ТекстXML.ПолучитьАтрибут("A04"));
				Цена			 = Число(ТекстXML.ПолучитьАтрибут("A05"));
				Сумма			 = Число(ТекстXML.ПолучитьАтрибут("A06"));
				СуммаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A07"));
				СтавкаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A010"));
				Вес				 = Число(ТекстXML.ПолучитьАтрибут("A08"));
				СкидкаТЧ		 = Число(ТекстXML.ПолучитьАтрибут("A09")); 				
				ИдСклад			 = ТекстXML.ПолучитьАтрибут("A011");
								
				ТекНоменклатура  = ПолучитьСсылкуИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекЕдиница       = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "ЕдиницыИзмерения");
				
				Если ТекНоменклатура.Услуга Тогда
					НоваяСтрока = ОбъектДок.Услуги.Добавить();										
					НоваяСтрока.Содержание		     = ТекНоменклатура.НаименованиеПолное;
				Иначе
					
					НоваяСтрока = ОбъектДок.Товары.Добавить();
					НоваяСтрока.ЕдиницаИзмерения 	 = ТекЕдиница;
					НоваяСтрока.Коэффициент 		 = ТекЕдиница.Коэффициент;				
					
					Если Константы.кпкРезервированиеЗаявок.Получить() Тогда
						НоваяСтрока.Размещение = ПолучитьСсылкуИзСправочника(ИдСклад, "Склады");
					КонецЕсли;									
					
					Если НРег(ТекНоменклатура.УникальныйИдентификатор()) <> НРег(ИдХарактеристики) Тогда
						НоваяСтрока.ХарактеристикаНоменклатуры = ПолучитьСсылкуИзСправочника(ИдХарактеристики, 
																							"ХарактеристикиНоменклатуры");
					КонецЕсли; 
					
				КонецЕсли;    				
				
				НоваяСтрока.Номенклатура		 = ТекНоменклатура;				
				НоваяСтрока.Количество           = Количество;
				НоваяСтрока.Цена      			 = Цена;
				НоваяСтрока.Сумма     			 = Сумма;
				Если ЗначениеЗаполнено(СведенияАгента.МинимальныйТипЦены) Тогда
					МинЦенаТовара = Ценообразование.ПолучитьЦенуНоменклатуры(ТекНоменклатура, , СведенияАгента.МинимальныйТипЦены, ТекущаяДата(), ТекЕдиница, 
															   мВалютаРегламентированногоУчета);
					ЦенаСоСкидкой = Цена - (Цена*(СкидкаТЧ/100));// проверяем больше ли цена с применением скидки чем минимально допустимая цена
					Если ЦенаСоСкидкой >= МинЦенаТовара Тогда
						НоваяСтрока.ПроцентСкидкиНаценки = СкидкаТЧ;
					Иначе
						НоваяСтрока.ПроцентСкидкиНаценки = 0;
					КонецЕсли;											   
				Иначе 
					НоваяСтрока.ПроцентСкидкиНаценки = СкидкаТЧ;
				КонецЕсли;
				НоваяСтрока.СтавкаНДС 		     = ТекНоменклатура.СтавкаНДС;
				НоваяСтрока.СуммаНДС 		     = СуммаНДС;					
				
				ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, ОбъектДок);				
				
				// Заполняем реквизиты табличной части.				
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ОбъектДок, "ЗаказПокупателя");
				
				// Пересчитываем суммы табличных частей
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ОбъектДок);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ОбъектДок);
				
				Если Не ТекНоменклатура.Услуга Тогда
					// Рассчитываем плановую себестоимость.
					ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(НоваяСтрока, ОбъектДок, 
																							мВалютаРегламентированногоУчета);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; 							
	
	Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	
	Если Результат = 1 Тогда
		
		Если ОбъектДок.ПометкаУдаления Тогда
			ТекстСообщения = "На основании документа: " + Строка(ОбъектДок.Ссылка) +
							 " не будет создан документ ""Реализация товаров и услуг"", потому что он помечен на удаление";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина, ОбъектДок.Ссылка);
		Иначе
			Если РеализацияПоЗаявкам = 2 Тогда
				ВвестиРеализациюНаОснованииЗаявки(ОбъектДок);
			ИначеЕсли РеализацияПоЗаявкам = 3 Тогда
				ВвестиРеализациюНаОснованииЗаявкиПоРегиструСсылок(ОбъектДок);
			КонецЕсли;	
		КонецЕсли;	
		
	ИначеЕсли Результат = 2 Тогда
		
		СообщитьОПропускеДокумента(СтруктураПараметров)
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДокументЗаказ

Процедура ЗагрузитьДокументОрдера(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдДок, СостДок," + 
										  "ИдФирмы, ИдКлиента, ИдДоговора, ИдТоргТочки, ИдМаршрута, СуммаДокумента, Комментарий," + 
										  "ВидОплаты, ИдДокОсн, Широта, Долгота, Категория, СпособСоздания");	
	
	ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
	СтруктураПараметров.ВидДокумента       = "Касса";	
	СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
	СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");
	СтруктураПараметров.ИдКлиента	   	   = ТекстXML.ПолучитьАтрибут("A02");	
	СтруктураПараметров.ИдТоргТочки   	   = ТекстXML.ПолучитьАтрибут("A03");
	СтруктураПараметров.ИдДоговора 		   = ТекстXML.ПолучитьАтрибут("A04");
	СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A06");	
	СтруктураПараметров.СуммаДокумента	   = Число(ТекстXML.ПолучитьАтрибут("A07"));
	ИдОснования 					       = ТекстXML.ПолучитьАтрибут("A09"); 
	
	СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A012");
	СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A013");	
	
	КатегорияСсылка = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A011"), "кпкКатегорииДокументов");
	СтруктураПараметров.Категория 	       = КатегорияСсылка;
	СтруктураПараметров.СпособСоздания 	   = "User";
	
	Если ТипЗнч(ОбъектДок.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Менеджер = Документы.ПриходныйКассовыйОрдер;
	Иначе
		Менеджер = Документы.РасходныйКассовыйОрдер;
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ТорговаяТочка, ДоговорКонтрагента");
	
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "");
	
	//////////
	
	ТаблицаКасс  = КассыАгента.Получить();
	Если Не ТаблицаКасс = Неопределено Тогда
		НайденнаяСтрока = ТаблицаКасс.Найти(ОбъектДок.Организация, "Организация");
		Если Не НайденнаяСтрока = Неопределено Тогда
			ОбъектДок.Касса = НайденнаяСтрока.Касса;
		КонецЕсли;		
	КонецЕсли;    	
	
	Если Не ЗначениеЗаполнено(ОбъектДок.Касса) Тогда
		ОбъектДок.Касса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКасса");	
	КонецЕсли;
	// HVOYA Belya 29.08.2012 14:52:23 Begin
	//Если НЕ ЗначениеЗаполнено(ОбъектДок.СчетКасса) Тогда
	//	ОбъектДок.СчетКасса=ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
	//КонецЕсли;
	// HVOYA Belya 29.08.2012 14:53:52 End

	Если ТипЗнч(ОбъектДок.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ОбъектДок.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
	Иначе
		ОбъектДок.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
	КонецЕсли;
    // HVOYA Belya 29.08.2012 14:58:15 Begin	
	//ОбъектДок.ВалютаВзаиморасчетовРаботника = ОбъектДок.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ОбъектДок.ВалютаВзаиморасчетовПодотчетника = ОбъектДок.ДоговорКонтрагента.ВалютаВзаиморасчетов;
    // HVOYA Belya 29.08.2012 15:00:37 End	
	
	ОбъектДок.ВалютаДокумента     		    = ОбъектДок.Касса.ВалютаДенежныхСредств;
	//ОбъектДок.Оплачено	                    = Истина;
	ОбъектДок.СуммаДокумента				= ОбъектДок.СуммаДокумента;
		
	Если ТипЗнч(ОбъектДок.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ОбъектДок.ПринятоОт = Строка(ОбъектДок.Контрагент);
		ОбъектДок.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Оплата покупателя");
		ОбъектДок.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
	Иначе
		ОбъектДок.Выдать = Строка(ОбъектДок.Контрагент);
	КонецЕсли;
	
	ОбъектДок.СчетОрганизации    = ОбъектДок.Организация.ОсновнойБанковскийСчет;	
	ОбъектДок.Ответственный      = ТекПользователь;
	
	СтрокаПлатеж = ОбъектДок.РасшифровкаПлатежа.Добавить();
	
	УправлениеДенежнымиСредствами.ПриИзмененииКонтрагентаВПлатежномДокументе(ОбъектДок, СтрокаПлатеж); 
	
	СтрокаПлатеж = ОбъектДок.РасшифровкаПлатежа[0];
	
	УстановитьДоговорВДокументе(ОбъектДок, СтрокаПлатеж);
    // HVOYA Belya 29.08.2012 15:04:59 Begin	
	//ОбъектДок.ОпределитьСчетаУчетаРасчетовСКонтрагентом(СтрокаПлатеж);
	УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ОбъектДок, ТекПользователь, мВалютаРегламентированногоУчета,ОбъектДок.РасшифровкаПлатежа,,);
    // HVOYA Belya 29.08.2012 15:06:25 End 
	СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
	
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;

	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
		СтрокаПлатеж.Проект = СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;  
	
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж, ОбъектДок.ВидОперации);
	
	ВалютаПоСтроке = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаПоСтроке,
																		  ОбъектДок.Дата);
	
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	ОбъектДок.КратностьДокумента = 1;
	ОбъектДок.КурсДокумента 	 = 1;
	
	ОбъектДок.ПроверкаКурсовВалют(СтрокаПлатеж);

	Если ОбъектДок.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		ВалютаВзаиморасчетов = ОбъектДок.ВалютаВзаиморасчетовРаботника;
	Иначе
		ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;

	Если (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (ОбъектДок.КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
																					       ОбъектДок.ВалютаДокумента,
			                                                  							   ВалютаВзаиморасчетов, 
																						   ОбъектДок.КурсДокумента,
																						   СтрокаПлатеж.КурсВзаиморасчетов,
			                                                  							   ОбъектДок.КратностьДокумента, 
																						   СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;		
	
	// Добавляем запись во вспомогательный список
	СтрокаОрдера = СписокОрдеровДляЗаписи.Добавить();
	СтрокаОрдера.Документ 		 = ОбъектДок;
	СтрокаОрдера.СтруктураДокКПК = СтруктураПараметров;
	СтрокаОрдера.ЭтоНовыйОбъект  = ЭтоНовыйОбъект;
	СтрокаОрдера.ИдОснования	 = ИдОснования;
	
КонецПроцедуры //ЗагрузитьДокументОрдера

Процедура ЗагрузитьДокументМерчендазинг(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдДок, СостДок," + 
										  "ИдФирмы, ИдКлиента, ИдДоговора, ИдТоргТочки, ИдМаршрута," + 
										  "СуммаДокумента, Комментарий, ВидОплаты, ИдДокОсн, Широта," + 
										  "Долгота, Категория, СпособСоздания");	
	
	ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
	СтруктураПараметров.ВидДокумента       = "Мерчендайзинг";
	СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
	СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");
	СтруктураПараметров.ИдКлиента	   	   = ТекстXML.ПолучитьАтрибут("A02");	
	СтруктураПараметров.ИдТоргТочки   	   = ТекстXML.ПолучитьАтрибут("A03");
	СтруктураПараметров.ТипЦен   	       = ТекстXML.ПолучитьАтрибут("A05");	
	СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A07");	
	
	СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A09");
	СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A010");	
	
	КатегорияСсылка = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A08"), "кпкКатегорииДокументов");
	СтруктураПараметров.Категория 	       = КатегорияСсылка;
	СтруктураПараметров.СпособСоздания 	   = "User";
	
	Менеджер = Документы.кпкМерчендайзинг;
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ТорговаяТочка");
	
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "");
	
	Если Не ОбъектДок.ЭтоНовый() Тогда
		ОбъектДок.Номенклатура.Очистить();
	КонецЕсли;
	
	ТекстXML.Прочитать();
	// Заполнение табличной части
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ТекстXML.Прочитать();
		
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "a9c8662f-9554-4deb-a78a-fb66dc757060" Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
				Количество		 = ТекстXML.ПолучитьАтрибут("A04");
				Цена			 = ТекстXML.ПолучитьАтрибут("A05");
				Сумма			 = ТекстXML.ПолучитьАтрибут("A07");
				
				НоваяСтрока      = ОбъектДок.Номенклатура.Добавить();
				
				ТекНоменклатура  = ПолучитьСсылкуИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекЕдиница       = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "ЕдиницыИзмерения");									
				
				Если НРег(ТекНоменклатура.УникальныйИдентификатор()) <> НРег(ИдХарактеристики) Тогда
					НоваяСтрока.ХарактеристикаНоменклатуры = ПолучитьСсылкуИзСправочника(ИдХарактеристики, "ХарактеристикиНоменклатуры");
				КонецЕсли;
				
				НоваяСтрока.ЕдиницаИзмерения 	 = ТекЕдиница;
				НоваяСтрока.Коэффициент 		 = ТекЕдиница.Коэффициент;				
				НоваяСтрока.Номенклатура		 = ТекНоменклатура;
				НоваяСтрока.Количество           = Число(Количество);
				НоваяСтрока.Цена      			 = Число(Цена);
				НоваяСтрока.Сумма     			 = Число(Сумма);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; 							
	
	Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	
	Если Результат = 2 Тогда
		
		СообщитьОПропускеДокумента(СтруктураПараметров)
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДокументМерчендазинг

Процедура ЗагрузитьДокументПосещения(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдДок, СостДок," + 
										  "ИдФирмы, ИдКлиента, ИдДоговора, ИдТоргТочки, ИдМаршрута," + 
										  "СуммаДокумента, Комментарий, ВидОплаты, ИдДокОсн, Широта," + 
										  "Долгота, Категория, СпособСоздания");	
	
	ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
	СтруктураПараметров.ВидДокумента       = "Посещение";
	СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
	СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");
	СтруктураПараметров.ИдКлиента	   	   = ТекстXML.ПолучитьАтрибут("A02");
	СтруктураПараметров.ИдТоргТочки   	   = ТекстXML.ПолучитьАтрибут("A03");
	СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A05");	
	
	СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A07");
	СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A08");	
	
	КатегорияСсылка = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A06"), "кпкКатегорииДокументов");
	СтруктураПараметров.Категория 	       = КатегорияСсылка;
	СтруктураПараметров.СпособСоздания 	   = "User";
	
	Менеджер = Документы.кпкПосещение;
		
	//
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ТорговаяТочка");
	
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "Продажа");
	ОбъектДок.Результат = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A04"), "кпкРезультатыПосещений");
	Если Не ОбъектДок.ЭтоНовый() Тогда
		ОбъектДок.Вопросы.Очистить();
	КонецЕсли;
	
	ТекстXML.Прочитать();
	// Заполнение табличной части Вопросов
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ТекстXML.Прочитать();
		
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "99f6a8ce-3046-4782-ab5e-557f40243749" Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдВопрос = ТекстXML.ПолучитьАтрибут("A01");
				ИдОтвет  = ТекстXML.ПолучитьАтрибут("A02");
				
				ТекВопрос  = ПолучитьСсылкуИзСправочника(ИдВопрос, "кпкВопросыАнкеты");
				ТекОтвет   = ПолучитьСсылкуИзСправочника(ИдОтвет, "кпкОтветыАнкеты");
				
				Если ЗначениеЗаполнено(ТекВопрос) и ЗначениеЗаполнено(ТекОтвет) Тогда				
					НоваяСтрока 	   = ОбъектДок.Вопросы.Добавить();
					НоваяСтрока.Вопрос = ТекВопрос;
					НоваяСтрока.Ответ  = ТекОтвет;	
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; 							
	
	Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	
	Если Результат = 2 Тогда
		
		СообщитьОПропускеДокумента(СтруктураПараметров)
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДокументПосещение

Процедура ЗагрузитьДокументПеремещение(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)

	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ИдФирмы, Комментарий," + 
										  "СкладОтправитель, СкладПолучатель, Широта, Долгота," + 
										  "Категория, СпособСоздания, ИдКлиента, ИдТоргТочки, ИдДоговора");	
										  
	КатегорияСсылка 	 = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A02"), "кпкКатегорииДокументов");
										  
	СтруктураПараметров.ВидДокумента       = "ПеремещениеТоваров";	
	СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    		
	СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");	
	СтруктураПараметров.Категория 	       = КатегорияСсылка;
	СтруктураПараметров.СкладОтправитель   = ТекстXML.ПолучитьАтрибут("A03");	
	СтруктураПараметров.СкладПолучатель	   = ТекстXML.ПолучитьАтрибут("A04");		
	СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A06");		
	СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A07");
	СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A08");		
	СтруктураПараметров.СпособСоздания 	   = "User";
	
	Менеджер = Документы.ПеремещениеТоваров;
	
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "");	

	ПредставлениеДокВКПК = СтруктураПараметров.ВидДокумента + " № " + 
						   СтруктураПараметров.Номер + " от " + СтруктураПараметров.Дата;
	
	// Получаем склад-отправитель из документа
	Если ЭтоПустойИдентификатор(СтруктураПараметров.СкладОтправитель) Тогда			
		ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указан склад-отправитель!", СтатусСообщения.Внимание);      
	Иначе		
		СкладОтправитель = ПолучитьСсылкуИзСправочника(СтруктураПараметров.СкладОтправитель, "Склады");					
		ОбъектДок.СкладОтправитель = СкладОтправитель;
	КонецЕсли;    		
	
	// Получаем склад-получатель из документа
	Если ЭтоПустойИдентификатор(СтруктураПараметров.СкладПолучатель) Тогда			
		ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указан склад-получатель!", СтатусСообщения.Внимание);      
	Иначе		
		СкладПолучатель = ПолучитьСсылкуИзСправочника(СтруктураПараметров.СкладПолучатель, "Склады");					
		ОбъектДок.СкладПолучатель = СкладПолучатель;
	КонецЕсли;    	
	
	Если Не ОбъектДок.ЭтоНовый() Тогда		
		ОбъектДок.Товары.Очистить();		
	Иначе
		ОбъектДок.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	КонецЕсли;
	
	ОбъектДок.Ответственный = ТекПользователь;
	
	ТекстXML.Прочитать();
	// Заполнение табличной части
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ТекстXML.Прочитать();
		
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "3097f10a-bee6-4a76-ad7a-d4663c9b73ec" Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
				Количество		 = ТекстXML.ПолучитьАтрибут("A04");
				Цена			 = ТекстXML.ПолучитьАтрибут("A05");
				
				НоваяСтрока      = ОбъектДок.Товары.Добавить();
				
				ТекНоменклатура  = ПолучитьСсылкуИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекЕдиница       = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "ЕдиницыИзмерения");									
				
				Если НРег(ТекНоменклатура.УникальныйИдентификатор()) <> НРег(ИдХарактеристики) Тогда
					НоваяСтрока.ХарактеристикаНоменклатуры = ПолучитьСсылкуИзСправочника(ИдХарактеристики, "ХарактеристикиНоменклатуры");
				КонецЕсли;
				
				НоваяСтрока.ЕдиницаИзмерения 	 = ТекЕдиница;
				НоваяСтрока.Коэффициент 		 = ТекЕдиница.Коэффициент;				
				НоваяСтрока.Номенклатура		 = ТекНоменклатура;
				НоваяСтрока.Количество           = Число(Количество);
				НоваяСтрока.Цена      			 = Число(Цена);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; 							
	
	Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	
	Если Результат = 2 Тогда
		
		СообщитьОПропускеДокумента(СтруктураПараметров)
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДокументПеремещение
 
Процедура ЗагрузитьДокументРеализации(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдДок, СостДок," + 
										  "ИдФирмы, ИдКлиента, ИдДоговора, ИдТоргТочки, ИдМаршрута," + 
										  "СуммаДокумента, Комментарий, ВидОплаты, ИдДокОсн, Широта," + 
										  "Долгота, Категория, СпособСоздания, ДокументОснование");	
	
	ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
	КатегорияСсылка = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A010"), "кпкКатегорииДокументов");
	
	СтруктураПараметров.ВидДокумента       = "Реализация";
	СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
	СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");
	СтруктураПараметров.ИдКлиента	   	   = ТекстXML.ПолучитьАтрибут("A02");
	СтруктураПараметров.ИдДоговора 		   = ТекстXML.ПолучитьАтрибут("A04");
	СтруктураПараметров.ИдТоргТочки   	   = ТекстXML.ПолучитьАтрибут("A03");	
	СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A09");	
	СтруктураПараметров.СуммаДокумента	   = Число(ТекстXML.ПолучитьАтрибут("A07"));
	СтруктураПараметров.ТипЦен 	           = ТекстXML.ПолучитьАтрибут("A06");
	
	СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A012");
	СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A013");	
	СтруктураПараметров.Категория 	       = КатегорияСсылка;
	СтруктураПараметров.ДокументОснование  = ТекстXML.ПолучитьАтрибут("A011");
	СтруктураПараметров.СпособСоздания 	   = "User";
	
	// Нужно добавить загрузку в документ "ОтчетОРозничныхПродажах" если тип склада = "НТТ"
	Менеджер = Документы.РеализацияТоваровУслуг;
		
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ТорговаяТочка, ДоговорКонтрагента");
	
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "Продажа");
	
	УстановитьДоговорВДокументе(ОбъектДок);	
	
	ОбъектДок.Склад = АвтоСклад;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ДокументОснование) Тогда
		ОбъектДок.Сделка = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметров.ДокументОснование));
	КонецЕсли;
	
	Если АвтоСклад.Пустая() Тогда		
		ТекстСообщения = "Для агента: " + ВыбАгент + " не указана настройка ""Мобильный склад""." +
						 " В документе " + Строка(ОбъектДок) + " в качестве склада будет указан склад из настроек текущего пользователя";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, ОбъектДок);  		
		АвтоСклад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");		
	КонецЕсли;	
	
	ОбъектДок.Склад		   = АвтоСклад;
	
	УчитыватьНДС 		   = РегистрыСведений.кпкСведенияОрганизаций.Получить(Новый Структура("Объект", ОбъектДок.Организация)).ИспНДС;
	ОбъектДок.УчитыватьНДС = УчитыватьНДС;
	
	Если Не ОбъектДок.ЭтоНовый() Тогда
		ОбъектДок.Товары.Очистить();
		ОбъектДок.Услуги.Очистить();
	КонецЕсли;
	
	ОбщаяСкидка = Число(ТекстXML.ПолучитьАтрибут("A05"));
	
	ТекстXML.Прочитать();
	// Заполнение табличной части
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ТекстXML.Прочитать();
		
		Если СокрЛП(ТекстXML.ПолучитьАтрибут("GUID")) = "E4D61E0A-1D62-48D7-B70C-BCBA935D377A" Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
				Количество		 = Число(ТекстXML.ПолучитьАтрибут("A04"));
				Цена			 = Число(ТекстXML.ПолучитьАтрибут("A05"));
				Сумма			 = Число(ТекстXML.ПолучитьАтрибут("A06"));
				СуммаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A07"));
				СтавкаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A010"));
				Вес				 = Число(ТекстXML.ПолучитьАтрибут("A08"));
				СкидкаТЧ		 = Число(ТекстXML.ПолучитьАтрибут("A09")); 				
				ИдСклад			 = ТекстXML.ПолучитьАтрибут("A011");
								
				ТекНоменклатура  = ПолучитьСсылкуИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекЕдиница       = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "ЕдиницыИзмерения");
				
				Если ТекНоменклатура.Услуга Тогда
					НоваяСтрока = ОбъектДок.Услуги.Добавить();										
					НоваяСтрока.Содержание		     = ТекНоменклатура.НаименованиеПолное;
				Иначе
					
					НоваяСтрока = ОбъектДок.Товары.Добавить();
					НоваяСтрока.ЕдиницаИзмерения 	 = ТекЕдиница;
					НоваяСтрока.Коэффициент 		 = ТекЕдиница.Коэффициент;
					
					Если НРег(ТекНоменклатура.УникальныйИдентификатор()) <> НРег(ИдХарактеристики) Тогда
						НоваяСтрока.ХарактеристикаНоменклатуры = ПолучитьСсылкуИзСправочника(ИдХарактеристики, "ХарактеристикиНоменклатуры");
					КонецЕсли; 
					
				КонецЕсли;    				
				
				НоваяСтрока.Номенклатура		 = ТекНоменклатура;				
				НоваяСтрока.Количество           = Количество;
				НоваяСтрока.Цена      			 = Цена;
				НоваяСтрока.Сумма     			 = Сумма;				
				Если ЗначениеЗаполнено(СведенияАгента.МинимальныйТипЦены) Тогда
					МинЦенаТовара = Ценообразование.ПолучитьЦенуНоменклатуры(ТекНоменклатура, , СведенияАгента.МинимальныйТипЦены, ТекущаяДата(), ТекЕдиница, 
															   мВалютаРегламентированногоУчета);
					ЦенаСоСкидкой = Цена - (Цена*(СкидкаТЧ/100));// проверяем больше ли цена с применением скидки чем минимально допустимая цена
					Если ЦенаСоСкидкой >= МинЦенаТовара Тогда
						НоваяСтрока.ПроцентСкидкиНаценки = СкидкаТЧ;
					Иначе
						НоваяСтрока.ПроцентСкидкиНаценки = 0;
					КонецЕсли;											   
				Иначе 
					НоваяСтрока.ПроцентСкидкиНаценки = СкидкаТЧ;
				КонецЕсли;
				НоваяСтрока.СтавкаНДС 		     = ТекНоменклатура.СтавкаНДС;
				НоваяСтрока.СуммаНДС 		     = СуммаНДС;
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				
				ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, ОбъектДок);				
				
				// Заполняем реквизиты табличной части.				
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ОбъектДок, "Реализация");
				
				// Пересчитываем суммы табличных частей
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ОбъектДок);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ОбъектДок);
				
				Если Не ТекНоменклатура.Услуга Тогда
					// Рассчитываем плановую себестоимость.
					ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(НоваяСтрока, ОбъектДок, 
																							мВалютаРегламентированногоУчета);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; 							
	
	Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	
	Если Результат = 1 Тогда
		
		Если ОбъектДок.ПометкаУдаления Тогда
			ТекстСообщения = "На основании документа: " + Строка(ОбъектДок.Ссылка) + 
							 " не будет создан документ ""Реализация товаров и услуг"", потому что он помечен на удаление";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина, ОбъектДок.Ссылка);	
		КонецЕсли;	
		
	ИначеЕсли Результат = 2 Тогда
		
		СообщитьОПропускеДокумента(СтруктураПараметров)
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДокументРеализации


Функция ЗагрузитьДокумент(ТекстXML, Док)
	
	Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Если Док = "Поступление" Тогда
	//	ВидОперации = НРег(ТекстXML.ПолучитьАтрибут("A015"));
	//	Если ВидОперации = "4b76bf74-227e-4cd2-860d-a386c135f5c2" Тогда
	//		Док = "ВозвратТоваровОтПокупателя";
	//	ИначеЕсли ВидОперации = "6749e456-fbb2-4557-9a6a-79dd67b76607" Тогда
	//		Док = "ПоступлениеТоваровУслуг";
	//	Иначе
	//		Возврат Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	ДокМенеджер = Документы[Док];
	
	Проведен 	     = Булево(Число(ТекстXML.ЗначениеАтрибута("IsPost")));					
	Дата     		 = Строка(ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt")));
	Номер    	     = СокрЛП(ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber"));
	ПредставлениеДок = ДокМенеджер.ПустаяСсылка().Метаданные().Синоним;
	
	Если Не Проведен Тогда
		ОповеститьОСобытии("Пропущена загрузка документа: " + ПредставлениеДок +
						   " №: " + Номер + " от: " + Дата + ". Документ не проведен в мобильном приложении!");
		ТекстXML.Пропустить();
		Возврат ЗагрузитьДокумент(ТекстXML, Док);
	КонецЕсли;
	
	ЭтоНовыйОбъект = Истина;
	
	ИдОбъекта = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
	
	СсылкаОбъекта = ДокМенеджер.ПолучитьСсылку(ИдОбъекта);
	
	Если СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда			
		ОбъектДок = ДокМенеджер.СоздатьДокумент();						
		ОбъектДок.УстановитьСсылкуНового(СсылкаОбъекта);
		ЭтоНовыйОбъект = Истина;						
	Иначе
		Если Не флОбновлять Тогда	
			СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата", ПредставлениеДок, Номер, Дата);			
			СообщитьОПропускеДокумента(СтруктураПараметров);			
			ТекстXML.Пропустить();
			Возврат ЗагрузитьДокумент(ТекстXML, Док);							
		КонецЕсли;
		ОбъектДок = СсылкаОбъекта.ПолучитьОбъект();
		ОбъектДок.Разблокировать();
		ЭтоНовыйОбъект = Ложь;
	КонецЕсли;
	
	Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если Док = "ЗаказПокупателя" Тогда
		
		ЗагрузитьДокументЗаказ(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
	ИначеЕсли Док = "ПриходныйКассовыйОрдер" Или Док = "РасходныйКассовыйОрдер" Тогда 
		
		ЗагрузитьДокументОрдера(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
		ТекстXML.Прочитать();
		
	ИначеЕсли Док = "кпкМерчендайзинг" Тогда
		
		ЗагрузитьДокументМерчендазинг(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
	ИначеЕсли Док = "кпкПосещение" Тогда
		
		ЗагрузитьДокументПосещения(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
	ИначеЕсли Док = "РеализацияТоваровУслуг" Тогда
		
		ЗагрузитьДокументРеализации(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
	ИначеЕсли Док = "ПеремещениеТоваров" Тогда
		
		ЗагрузитьДокументПеремещение(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);

	ИначеЕсли Док = "ПоступлениеТоваровУслуг" Тогда
		
		ЗагрузитьДокументПоступление(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
	ИначеЕсли Док = "ВозвратТоваровОтПокупателя" Тогда
		
		ЗагрузитьДокументВозвратТоваров(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
	//ИначеЕсли Док = "СчетФактураВыданный" Тогда
	//	
	//	ЗагрузитьДокументСчетФактураВыданный(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
	Иначе
		
		ТекстXML.Пропустить();
		Возврат ЗагрузитьДокумент(ТекстXML, Док);
		
	КонецЕсли;	
		
	Возврат Истина;

КонецФункции //ЗагрузитьДокумент

Процедура ЗагрузитьДокументы(ТекстXML)
	
	Пока ТекстXML.Прочитать() Цикл
		
		Если ТекстXML.Имя = "KILLEDS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ТекстXML.Пропустить();
			Продолжить;
		КонецЕсли;
		
		Если ТекстXML.Имя = "DOCUMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
 		
		Если ТекстXML.Имя = "DOCUMENT" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Продолжить;
		КонецЕсли;
		
		ИдДокXML = ТекстXML.ЗначениеАтрибута("GUID");
		Если ИдДокXML <> Неопределено Тогда
			ИдДокумента = ИдДокXML;  												
		КонецЕсли;
        		
		Док = СоответствиеДокЗагр.Получить(НРег(ИдДокумента));
		
		Если Док = Неопределено Тогда 
			Пока ТекстXML.Имя <> "DOCUMENTS" И ТекстXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
				ТекстXML.Пропустить();
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
        //Если Док = Неопределено Тогда 
        //	ТекстXML.Пропустить();
        //	Если ТекстXML.Имя = "DOCUMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
        //		Прервать;			
        //	КонецЕсли;   			
        //КонецЕсли;   
			
		Пока ТекстXML.Прочитать() Цикл
			~М2:
			Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТекстXML.Имя = "DOCUMENT" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;			
			ИначеЕсли ТекстXML.Имя = "KILLEDS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТекстXML.Пропустить();
				Прервать;
			КонецЕсли;
 			
			Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		    				
				Если НЕ ЗагрузитьДокумент(ТекстXML, Док) тогда 
			    	Перейти ~М2;
                КонецЕсли;
			
			КонецЕсли;
					
		КонецЦикла;   	 
		
	КонецЦикла;  
		
КонецПроцедуры //ЗагрузитьДокументы

Функция ЗагрузитьФотографии(ТекстXML)
	
	// В этой папке у нас уже содержатся распакованные фото из файла выгрузки
	ПапкаВремФото = КаталогВременныхФайлов() + "Photos1C\";
	
	//ТЗ картинок
	
	тзКартинок = Новый ТаблицаЗначений;
	тзКартинок.Колонки.Добавить("GUID");
	тзКартинок.Колонки.Добавить("FileName");
	тзКартинок.Колонки.Добавить("Format");
	тзКартинок.Колонки.Добавить("Description");
	
	//ТЗ картинок
	
	Пока ТекстXML.Прочитать() Цикл
		
		Если ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И Не ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда					
					
					ФотоКонтрагента = Ложь;
					ФотоТоргТочки	= Ложь;
					
					ИдФото = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
					ИмяФайлаФото = ТекстXML.ЗначениеАтрибута("FileName");
					ФорматФайла  = ТекстXML.ЗначениеАтрибута("Format");
					Комментарий  = ТекстXML.ЗначениеАтрибута("Description");
					
					СтрокаКартинки = тзКартинок.Добавить();
					СтрокаКартинки.GUID		   = ТекстXML.ЗначениеАтрибута("GUID");
					СтрокаКартинки.FileName    = ИмяФайлаФото;
					СтрокаКартинки.Format	   = ФорматФайла;
					СтрокаКартинки.Description = Комментарий;
					
					НайдСтроки = ТабЗагруженныхФото.НайтиСтроки(Новый Структура("ИдФото", НРег(ИдФото))); 
					
					ОбъектФотоИзСпр = Справочники.ХранилищеДополнительнойИнформации.ПолучитьСсылку(ИдФото).ПолучитьОбъект();
					Если ОбъектФотоИзСпр <> Неопределено Тогда
						Если ТипЗнч(ОбъектФотоИзСпр.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
							ФотоКонтрагента = Истина;
						КонецЕсли;					
					КонецЕсли;
					
					Если ФотоКонтрагента Тогда 
						
						ПолныйПутьФото = ПапкаВремФото + НРег(ИдФото);
						
						ФайлФотоНаДиске = Новый Файл(ПолныйПутьФото);
						
						Если Не ФайлФотоНаДиске.Существует() Тогда Продолжить; КонецЕсли;
						
						ФотоСКПК 		  = Новый Картинка(ПолныйПутьФото, Ложь);
						НоваяКартинка 	  = ФотоСКПК.Преобразовать(ФорматКартинки.PNG);
						ХранилищеКартинки = Новый ХранилищеЗначения(НоваяКартинка, Новый СжатиеДанных(9));
						
						ОбъектФотоИзСпр.Хранилище 	  = ХранилищеКартинки;
						ОбъектФотоИзСпр.ИмяФайла  	  = ИмяФайлаФото;
						ОбъектФотоИзСпр.Наименование  = ?(Комментарий = "", ИмяФайлаФото, Комментарий);
						
						Если Не ВыполнитьОперациюДляОбъекта(ОбъектФотоИзСпр, "запись") Тогда 						
							ОповеститьОСобытии("Не удалось сохранить фотографию  для документа: " +
											   Строка(ОбъектФотоИзСпр.Объект.Ссылка), СтатусСообщения.Важное);
							Продолжить;			
						КонецЕсли;
												
					Иначе
						
						Если НайдСтроки.Количество() = 0 Тогда
							
							// Фото, не привязанное к документу
							НовСтрока = ТабЗагруженныхФото.Добавить();
							НовСтрока.Ссылка = Неопределено;
							НовСтрока.ИдФото = НРег(ИдФото);
							
						Иначе
							
							Для Каждого НайдСтрока Из НайдСтроки Цикл
								
								ОбъектСпрФото = НайдСтрока.Ссылка.ПолучитьОбъект();
								
								Если ОбъектСпрФото = Неопределено Тогда Продолжить; КонецЕсли;
								Если ТипЗнч(ОбъектСпрФото) <> Тип("СправочникОбъект.кпкФотоКДокументам") Тогда Продолжить; КонецЕсли;
								
								ИдДок = ОбъектСпрФото.ИдОбъекта;
								
								Запрос = Новый Запрос("ВЫБРАТЬ
								|	СведенияДок.КПКДокумент
								|ИЗ
								|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&Дата, ИДДокумента = &ИД) КАК СведенияДок");    							
								
								Запрос.УстановитьПараметр("ИД",   НРег(ИдДок));
								Запрос.УстановитьПараметр("Дата", ТекущаяДата());
								
								Выборка = Запрос.Выполнить().Выбрать();
								Если Выборка.Следующий() Тогда 
									Док = Выборка.КПКДокумент;
								КонецЕсли;
								
								Если Док = Неопределено Тогда
									ТекстСообщения = "Документ, на который ссылается фотография """ + ИмяФайлаФото + 
													 """ не был загружен в ЦБД (идентификатор документа: " + ИдДок + """)!";
									ОповеститьОСобытии(ТекстСообщения);
									ОповеститьОСобытии("Пропущена загрузка фотографии: """ + ИмяФайлаФото + """!", СтатусСообщения.Важное);
									Продолжить;
								КонецЕсли; 	
																
								ПутьИскомогоФайла = ПапкаВремФото + ИдФото;
								
								НайденныеФайлы = НайтиФайлы(ПапкаВремФото, Строка(ИдФото) + "*");
								
								Если НайденныеФайлы.Количество() = 0 Тогда 									
									ОповеститьОСобытии("Не найден файл фотографии по пути: """ + ПутьИскомогоФайла + 
														"""! Возможно в мобильном устройстве отключен режим выгрузки фотографий!");
									ОповеститьОСобытии("Пропущена загрузка фотографии: """ + ИмяФайлаФото + """!", СтатусСообщения.Важное);
									Продолжить;																	
								КонецЕсли;
								
								ФайлФотоНаДиске = НайденныеФайлы[0];
								
								ПолныйПутьФото = ФайлФотоНаДиске.ПолноеИмя;
								
								//ИЗМЕНЕНО Верескул Игорь(Начало 11.06.2014
								Если Справочники.кпкФотоКДокументам.НайтиПоРеквизиту("ФайлКПК",ИмяФайлаФото).Пустая() Тогда
									
									ТорговаяТочка=Док.ТорговаяТочка;
									МассивСсылок=Новый Массив;
									Запрос = Новый Запрос;
									Запрос.Текст = "ВЫБРАТЬ
									               |	кпкФотоКДокументам.Док КАК Документ,
									               |	кпкФотоКДокументам.ФайлКПК,
									               |	кпкФотоКДокументам.ФайлФото,
									               |	кпкФотоКДокументам.Комментарий,
									               |	кпкФотоКДокументам.ДатаВремяСоздания КАК ДатаВремяСоздания,
									               |	кпкФотоКДокументам.Представление,
									               |	кпкФотоКДокументам.Ссылка
									               |ИЗ
									               |	Справочник.кпкФотоКДокументам КАК кпкФотоКДокументам
									               |ГДЕ
									               |	кпкФотоКДокументам.Док.ТорговаяТочка = &ТорговаяТочка
									               |
									               |УПОРЯДОЧИТЬ ПО
									               |	ДатаВремяСоздания";
									Запрос.УстановитьПараметр("ТорговаяТочка",ТорговаяТочка);
									Результат=Запрос.Выполнить().Выбрать();
									НеДобавлять=Ложь;
									Если Результат.Количество()>=ТорговаяТочка.КоличествоФотографий И ТорговаяТочка.КоличествоФотографий <> 0 Тогда
										Разница=Результат.Количество()-ТорговаяТочка.КоличествоФотографий+1;
										Пока Разница > 0 Цикл
											Результат.Следующий();
											Если Результат.ДатаВремяСоздания >= ОбъектСпрФото.ДатаВремяСоздания Тогда
												 НеДобавлять=Истина;
												 Прервать;  
											КонецЕсли; 
											МассивСсылок.Добавить(Результат.Ссылка);
											Разница=Разница-1;
										КонецЦикла;
										Если НеДобавлять Тогда
											Продолжить;
										КонецЕсли; 
										Если МассивСсылок.Количество()<> 0 Тогда
											УдалитьОбъекты(МассивСсылок);	
										КонецЕсли; 
										
									КонецЕсли;
								КонецЕсли;
								//Окончание)Верескул Игорь 
								
								ФотоСКПК 		  	  = Новый Картинка(ПолныйПутьФото, Ложь);
								НоваяКартинка		  = ФотоСКПК.Преобразовать(ФорматКартинки.PNG);
								ХранилищеКартинки 	  = Новый ХранилищеЗначения(НоваяКартинка, Новый СжатиеДанных(9));
								
								ОбъектСпрФото.ФайлКПК      = ИмяФайлаФото;
								ОбъектСпрФото.Комментарий  = СокрЛП(Комментарий);
								ОбъектСпрФото.ФайлФото     = ХранилищеКартинки;
								ОбъектСпрФото.Док          = Док;	
								ОбъектСпрФото.Наименование = ?(Комментарий = "", ИмяФайлаФото, Комментарий);
								
								Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпрФото, "запись") Тогда 						
									ОповеститьОСобытии("Не удалось записать элемент справочника ""Фотографии документов""",
													   СтатусСообщения.Важное);
									Продолжить;			
								КонецЕсли;    							
								
								// Для документов "Заявка", "Реализация" и "Поступление" записываем еще фото 
								// в справочник "Хранилище дополнительной тинформации" типовой конфигурации	
								Если ТипЗнч(Док) = Тип("ДокументСсылка.ЗаказПокупателя") или
									 ТипЗнч(Док) = Тип("ДокументСсылка.РеализацияТоваровУслуг") или 
									 ТипЗнч(Док) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
									 
									 
									Запрос = Новый Запрос("ВЫБРАТЬ
									|	ХранилищеДополнительнойИнформации.Ссылка
									|ИЗ
									|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
									|ГДЕ
									|	ХранилищеДополнительнойИнформации.Объект = &Объект
									|	И ХранилищеДополнительнойИнформации.ИмяФайла ПОДОБНО &ИмяФайла");
									
									Запрос.УстановитьПараметр("Объект",   Док.Ссылка);
									Запрос.УстановитьПараметр("ИмяФайла", ИмяФайлаФото);
									
									Результат = Запрос.Выполнить();
									
									СпрМенеджер = Справочники.ХранилищеДополнительнойИнформации;
									
									Если Результат.Пустой() Тогда
										НовыйОбъект = СпрМенеджер.СоздатьЭлемент();
										НовыйОбъект.ВидДанных 	  = Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение;
										НовыйОбъект.Хранилище 	  = Новый ХранилищеЗначения(НоваяКартинка, Новый СжатиеДанных(9));
										НовыйОбъект.Объект    	  = Док.Ссылка;
										НовыйОбъект.ИмяФайла  	  = ИмяФайлаФото;
										НовыйОбъект.Наименование  = ?(Комментарий = "", ИмяФайлаФото, Комментарий);
										
										Если Не ВыполнитьОперациюДляОбъекта(НовыйОбъект, "запись") Тогда 						
											ОповеститьОСобытии("Не удалось сохранить фтоографию  для документа: " + Строка(Док.Ссылка), СтатусСообщения.Важное);
											Продолжить;			
										КонецЕсли;
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;				
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			//Загрузка Картинок для торговых точек			
			
			МассивФото = тзКартинок.ВыгрузитьКолонку("GUID");
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	кпкТорговыеТочкиФото.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.кпкТорговыеТочки.Фото КАК кпкТорговыеТочкиФото
			|ГДЕ
			|	кпкТорговыеТочкиФото.ИдентификаторФото В(&ИдентификаторыФото)
			|
			|СГРУППИРОВАТЬ ПО
			|	кпкТорговыеТочкиФото.Ссылка");
			Запрос.УстановитьПараметр("ИдентификаторыФото", МассивФото);
			
			СписокТорговыхТочек = Запрос.Выполнить().Выбрать();
			
			Пока СписокТорговыхТочек.Следующий() Цикл
				ОбъектТорговойТочки = СписокТорговыхТочек.Ссылка.ПолучитьОбъект();
				Для Каждого ФотоТоргТочки Из ОбъектТорговойТочки.Фото Цикл
					СтрокаФайла = тзКартинок.Найти(Врег(ФотоТоргТочки.ИдентификаторФото), "GUID");
					Если СтрокаФайла <> Неопределено Тогда						
						ПолныйПутьФото = ПапкаВремФото + СтрокаФайла.GUID;
								
						ФайлФотоНаДиске = Новый Файл(ПолныйПутьФото);
								
						Если Не ФайлФотоНаДиске.Существует() Тогда Продолжить; КонецЕсли;
								
						ФотоСКПК 		  	  = Новый Картинка(ПолныйПутьФото, Ложь);
						НоваяКартинка 		  = ФотоСКПК.Преобразовать(ФорматКартинки.PNG);
						ХранилищеКартинки 	  = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолныйПутьФото));
						
						ФотоТоргТочки.ИмяФайла 	  = СтрокаФайла.FileName;
						ФотоТоргТочки.Комментарий = СтрокаФайла.Description;
						ФотоТоргТочки.Хранилище   = ХранилищеКартинки;
					КонецЕсли;
				КонецЦикла;
				ОбъектТорговойТочки.Записать();
			КонецЦикла;
			
			//Загрузка Картинок для торговых точек
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции //ЗагрузитьФотографии()    

Процедура XMLЗагрузитьДанныеМобильнаяТорговля(ФайлЗагрузки)
	
	ТекстXML = Новый ЧтениеXML;
	
	ТекстXML.ОткрытьФайл(ФайлЗагрузки);
	
	ОповеститьОСобытии("Начало загрузки данных от агента: " + ВыбАгент.Наименование, СтатусСообщения.Информация);
	
	ПрерватьЗагрузку = Ложь;
	
	Пока ТекстXML.Прочитать() Цикл
		
		Если Не ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда Продолжить; КонецЕсли;
		
		Если ТекстXML.Имя = "CONSTANTS" Тогда
			
			Если ТекстXML.Имя = "CONSTANTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Продолжить;
			КонецЕсли;
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "CONSTANTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
				
				ЗапросОбновления = "0";
				
				Если ТекстXML.Имя = "ITEM" Тогда
					Если "79c698db-3c55-465e-acfe-4741acdd5655" = Нрег(ТекстXML.ЗначениеАтрибута("GUID")) Тогда
						АгентИд  = ТекстXML.ЗначениеАтрибута("Value");							
						АгентИзФайла = ПолучитьСсылкуИзСправочника(АгентИд, "ФизическиеЛица");
						Если АгентИзФайла <> ВыбАгент Тогда							
							ОповеститьОСобытии("Получен файл загрузки от агента: " + АгентИзФайла, СтатусСообщения.Информация);							
							Если АгентИзФайла.ПолучитьОбъект() = Неопределено Тогда
								ОповеститьОСобытии("Агент с идентификатором: " + АгентИд + " не найден в текущей БД! Загрузка не будет выполнена!");
								Возврат;
							КонецЕсли;                                                                                         							
							ВыбАгент = АгентИзФайла;                                                                           							
						КонецЕсли;
						Прервать;
					ИначеЕсли "cf41ba05-a4ee-4492-9a2c-c96394c4864a" = Нрег(ТекстXML.ЗначениеАтрибута("GUID")) Тогда
						ЗапросОбновления = ТекстXML.ЗначениеАтрибута("Value");							
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла; 			
								
			Если ЗапросОбновления <> "0" Тогда
				Код = ЗапросОбновления;
				
				СпрЗапросы = Справочники.кпкЗапросы;
				СпрЗапросыАгентов = Справочники.кпкЗапросыАгентов;
				Если НЕ ПустаяСтрока(Код) Тогда
					Запрос = СпрЗапросы.НайтиПоКоду(Код);
				Иначе
					Продолжить;
				КонецЕсли;
				
				НужныйЗапрос = СпрЗапросыАгентов.НайтиПоРеквизиту("Запрос", Запрос, ,ВыбАгент);
				Если НужныйЗапрос = СпрЗапросыАгентов.ПустаяСсылка() Тогда
					ТекЗапросАгента = СпрЗапросыАгентов;
					Если Не ВыполнитьОперациюДляОбъекта(ТекЗапросАгента, "создание") Тогда 			
						ТекстСообщения = "Не удалось создать новый элемент справочника ""Запросы агентов""!";
						ОповеститьОСобытии(ТекстСообщения);
						Продолжить;			
					КонецЕсли;   
					ТекЗапросАгента.Владелец = ВыбАгент;
					ТекЗапросАгента.Запрос   = Запрос;
				Иначе
					ТекЗапросАгента = НужныйЗапрос.ПолучитьОбъект();
				КонецЕсли;
				
				Если Не ТекЗапросАгента.Активен Тогда
					ТекЗапросАгента.Активен = Истина;					
				КонецЕсли;
				
				Если ВыполнитьОперациюДляОбъекта(ТекЗапросАгента, "запись") Тогда
					ОтветитьНаЗапрос = Истина;
					Возврат;
				Иначе
					ТекстСообщения = "Не удалось прочитать запрос для агента: " +
									 ВыбАгент + ". Ответ на запрос не будет выполнен!";
					ОповеститьОСобытии(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТекстXML.Имя = "CATALOGS" Тогда
			
			ЗагрузитьСправочники(ТекстXML);
			
		ИначеЕсли ТекстXML.Имя = "DOCUMENTS" Тогда
			
			ЗагрузитьДокументы(ТекстXML);
			
		ИначеЕсли ТекстXML.Имя = "PICTURES" Тогда
			
			Если ТекстXML.Имя = "PICTURES" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			КонецЕсли;   
			
			ЗагрузитьФотографии(ТекстXML);						
			
		КонецЕсли;				
		
	КонецЦикла;
	
	ТекстXML.Закрыть();
	
	ЗакончитьЗагрузкуОрдеровИПоступлений();
	
	ОповеститьОСобытии("Данные от агента: " + ВыбАгент.Наименование + " успешно загружены!", СтатусСообщения.Информация);
	
КонецПроцедуры

// Функция возвращает ссылку на элемент по полученному из XML уникальному идентификатору
// Параметры:
// ИдДокумента - Строка Уникального идентификатора
// Док - Имя документа, в котором необходимо найти элемент
// Возвращаемое значение:
// Найденная ссылка или пустая ссылка на документ, если искомого элеимента нет или неправильный идентификатор
Функция ПолучитьСсылкуИзДокумента(ИдДокумента, Док)
	
	Перем СсылкаДокумента;
	
	Если ИдДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдДокумента = НРег(ИдДокумента);
	
	ДокМенеджер = документы[Док];
	
	Если ЗначениеЗаполнено(ИдДокумента) Тогда
		
		ГуидДокумента = Новый УникальныйИдентификатор(ИдДокумента);
		СсылкаДокумента = ДокМенеджер.ПолучитьСсылку(ГуидДокумента);
		
	КонецЕсли;
	
	Если СсылкаДокумента = Неопределено Тогда
		СсылкаДокумента = ДокМенеджер.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СсылкаДокумента;
	
КонецФункции //ПолучитьСсылкуИзСправочника

Функция ПолучитьБазовуюЕдиницу(Номенклатура)
	
	ТекБазоваяЕдиница = Номенклатура.ЕдиницаХраненияОстатков;
	
	СписокЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать( , Номенклатура);
	Пока СписокЕдиниц.Следующий() Цикл
		Если СписокЕдиниц.ЕдиницаПоКлассификатору = Номенклатура.БазоваяЕдиницаИзмерения Тогда
			ТекБазоваяЕдиница = СписокЕдиниц.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекБазоваяЕдиница;
			
КонецФункции //ПолучитьБазовуюЕдиницу

Функция ОткрытьФайлВыгрузкиМТ()
	
	КаталогФайла = СокрЛП(Константы.КаталогДополнительнойИнформации.Получить());
	
	Если ЗначениеЗаполнено(КаталогФайла) Тогда
		Если Не кпкАгентПлюс.ПроверитьСуществованиеКаталога(КаталогФайла) Тогда		
			КаталогФайла = КаталогВременныхФайлов();		
		КонецЕсли;
	Иначе
		КаталогФайла = КаталогВременныхФайлов();
	КонецЕсли;
	
	ДополнитьСлешВПуть(КаталогФайла);
	
	ФайлДанных = КаталогФайла + "FromCDB.xml";
	
	ДокОбмена = Новый ЗаписьXML();
	Попытка
		ДокОбмена.ОткрытьФайл(ФайлДанных);
	Исключение
		ОповеститьОСобытии("Ошибка создания xml-файла выгрузки! По причине: " + ОписаниеОшибки());		
		Возврат Ложь;
	КонецПопытки;
	
	ДокОбмена.ЗаписатьОбъявлениеXML();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DATA");
	
	ДокОбмена.ЗаписатьАтрибут("DBVERSION", "1977");
	
	ИмяФайла = ФайлДанных;
	
	Возврат Истина;
	
КонецФункции //ОткрытьФайлВыгрузкиМТ

Процедура ЗакрытьФайлВыгрузкиМТ()
	
	ДокОбмена.ЗаписатьКонецЭлемента();	// DATA
	
	ДокОбмена.Закрыть();
	
КонецПроцедуры //ЗакрытьФайлВыгрузкиМТ

// Процедура СформироватьФайВыгрузкиДляМобильнойТорговли
//
// Параметры:
//  Нет
//
// Описание:
// 	Процедура предназначена для формирования файла выгрузки для приложения Агент Плюс: Мобильная торговля
//  
Процедура СформироватьФайВыгрузкиДляМобильнойТорговли() Экспорт 
	
	ТипыКонтактнойИнформации = ЗаполнитьПеречислениеКонтактнойИнформации();
	СписокКонстант 			 = ЗаполнитьСписокКонстант();
	
	ДопНастройкиАгента = СведенияАгента.ДополнительныеНастройки.Получить();
	
	ТаблицаБД = ДопНастройкиАгента.Получить("DBList");
	Если ТаблицаБД <> Неопределено Тогда
		ТаблицаБазДанныхАгента = ТаблицаБД.Скопировать();
	Иначе
		ТаблицаБазДанныхАгента = Неопределено;		
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("Заполнение списка клиентов...");
	#КонецЕсли
	
	кпкАгентПлюс.СформироватьСписокКлиентовАгентов(ВыбАгент, ПланПосещений, сзКлиентыАгента, 
												   сзТоргТочкиАгента, ТаблицаДоговоровАгента);
	
	РежимВыгрузкиКонтрагентов = Константы.кпкРежимВыгрузкиКонтрагентов.Получить();
	
	// С использованием плана посещений
	Если Не ЗначениеЗаполнено(ПланПосещений) Тогда
		Если РежимВыгрузкиКонтрагентов = 4 Тогда  // Из плана и договоров
			ОповеститьОСобытии("Не найден план посещений агента: """ + ВыбАгент + 
							   """ в текущем месяце. Список контрагентов будет выгружен из списка договоров для агента!",
							   СтатусСообщения.Информация);
		ИначеЕсли РежимВыгрузкиКонтрагентов = 0 Тогда  // Из плана посещений
			ОповеститьОСобытии("Не найден план посещений агента: """ + ВыбАгент + 
							   """ в текущем месяце. Список контрагентов не будет выгружен в мобильное устройство!",
							   СтатусСообщения.Внимание);
		КонецЕсли;   	
	КонецЕсли;   	
	
	СформироватьТаблицуВыгружаемыхТиповЦен();
	
	Если Не ОткрытьФайлВыгрузкиМТ() Тогда  		
		Возврат;  		
	КонецЕсли;
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CONSTANTS");
			
	ДобавитьПоле("Comment", "Константы");	
	
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			// Выгружаем список констант				
			#Если Клиент Тогда
				Состояние("Выгрузка констант...");
			#КонецЕсли
			
			ВыгрузитьКонстанты(ДокОбмена);
			
			Если ДопНастройкиАгента <> Неопределено Тогда
				Для Каждого ТекКонстанта Из СписокКонстант Цикл
					ЗначениеКонстанты = ДопНастройкиАгента[ТекКонстанта.Значение];
					Если ЗначениеКонстанты = Неопределено Тогда Продолжить; КонецЕсли;
					Если ТекКонстанта.Значение = "UseCodes" Тогда							
						Если ЗначениеКонстанты = 2 Тогда
							ЗначениеКонстанты = Истина;
							ДобавитьКонстанту("7268af8a-6532-4ad0-bc63-3832f3c0d96f", ?(Константы.кпкРежимВыгрузкиКодов.Получить() = 1, "Артикул", "Код"));
						Иначе
							ЗначениеКонстанты = Ложь;
						КонецЕсли;
					КонецЕсли;
					Если ТекКонстанта.Значение = "Agent" Тогда							
						ЗначениеКонстанты = Строка(ЗначениеКонстанты);						
					КонецЕсли;
					//Если ТекКонстанта.Значение = "OutstandingDebtColor" Тогда							
					//	Если Константы.кпкВыделятьЦветомПросроченныеДолги.Получить() Тогда
					//		Продолжить;
					//	КонецЕсли;
					//	ЗначениеКонстанты = Строка(ЗначениеКонстанты);
					//	Если Не ПустаяСтрока(ЗначениеКонстанты) Тогда
					//		ЗначениеКонстанты = "255,0,0";
					//	КонецЕсли;
					//КонецЕсли;
					Если ТекКонстанта.Значение = "Schedule" Тогда
						Если Не ЗначениеКонстанты.Пустая() Тогда
							РабочееВремя = Формат(ЗначениеКонстанты.ВремяНачала, "ДФ=HH:mm") + "-" + Формат(ЗначениеКонстанты.ВремяОкончания, "ДФ=HH:mm");							
							ДобавитьКонстанту("e38fe34e-f36a-44c9-9dbd-a29f7c925940", ЗначениеКонстанты.ПериодПовтораВТечениеДня);
							ДобавитьКонстанту("1de1dae1-a088-4c5b-a68e-4d233b49683a", РабочееВремя);							
							ДобавитьКонстанту("428f867c-0bf1-45b2-b812-ef1d284d3e3f", ЗначениеКонстанты.ДниНедели);
						КонецЕсли;
					Иначе						
						ДобавитьКонстанту(ТекКонстанта.Ключ, ЗначениеКонстанты);						
					КонецЕсли;					
				КонецЦикла;
			КонецЕсли;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
		//ДокОбмена.ЗаписатьНачалоЭлемента("KILLEDS");
		//// Внутрь этого тега следует передавать константы, которые
		//// необходимо удалить в мобильном устройстве
		//ДокОбмена.ЗаписатьКонецЭлемента(); //KILLEDS
		
	ДокОбмена.ЗаписатьКонецЭлемента();  // CONSTANTS
	
	// Выгружаем справочные данные	
	#Если Клиент Тогда
		Состояние("Выгрузка справочников...");
	#КонецЕсли   				
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
	
	ДобавитьПоле("Comment", "Справочники");	
	 
		#Если Клиент Тогда
			Состояние("Выгрузка организаций...");
		#КонецЕсли 		
		ВыгрузитьОрганизации();
		
		#Если Клиент Тогда
			Состояние("Выгрузка контрагентов...");
		#КонецЕсли   		
		ВыгрузитьКлиентов();		
		
		Если Константы.кпкИспользоватьДоговоры.Получить() Тогда
			#Если Клиент Тогда
				Состояние("Выгрузка договоров контрагентов...");
			#КонецЕсли    
			ВыгрузитьДоговорыКонтагентов(); 
		КонецЕсли;
		
		Если ИспТочек Тогда
			#Если Клиент Тогда
				Состояние("Выгрузка торговых точек...");
			#КонецЕсли  
			ВыгрузитьТорговыеТочки();	
		КонецЕсли;
		
		#Если Клиент Тогда
			Состояние("Выгрузка контактной информации...");
		#КонецЕсли				
		ВыгрузитьКонтактныеЛица();		
		ВыгрузитьВидыКонтактнойИнформации();
		ВыгрузитьКонтактнуюИнформацию();
		
		#Если Клиент Тогда
			Состояние("Выгрузка номенклатуры...");			
		#КонецЕсли  		
		ВыгрузитьНоменклатуру();
		
		#Если Клиент Тогда
			Состояние("Выгрузка матриц товаров...");			
		#КонецЕсли
		ВыгрузитьМатрицыТоваров();
				
		#Если Клиент Тогда
			Состояние("Выгрузка истории продаж...");			
		#КонецЕсли  		
		ВыгрузитьИсториюПродаж();
				
		#Если Клиент Тогда
			Состояние("Выгрузка дополнительной информации...");
		#КонецЕсли  
		ВыгрузитьДополнительнуюИнформацию();
		
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOGS
	
	// Выгрузка Стартовых номер документов
	// по требовани
	Если флСтартовыеНомера Тогда
		ВыгрузитьСтартовыеНомераДокументов();
	КонецЕсли;
	
	// Выгружаем документы	
	#Если Клиент Тогда
		Состояние("Выгрузка документов...");
	#КонецЕсли 	

	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
	
		ДобавитьПоле("Comment", "Документы");	
	
		// Если нет необходимости выгружать целиком документы, 		
		// то можно включить в выгрузку просто выгрузку подтверждений документов.
		// Нужно ниже закомментировать процедуру "ВыгрузитьЗаказыПокупателей"

		#Если Клиент Тогда
			Состояние("Выгрузка заказов...");
		#КонецЕсли			
		ВыгрузитьЗаказыПокупателей();		
	
		#Если Клиент Тогда
			Состояние("Выгрузка взаиморасчетов...");
		#КонецЕсли	
		ВыгрузитьВзаиморасчеты();
		
		#Если Клиент Тогда
			Состояние("Выгрузка маршрутов...");
		#КонецЕсли
		ВыгрузитьМаршрутыАгента();
		
		//#Если Клиент Тогда
		//	Состояние("Выгрузка посещений...");
		//#КонецЕсли			
		//ВыгрузитьПосещения();
		
		#Если Клиент Тогда
			Состояние("Выгрузка сообщений...");
		#КонецЕсли			
		ВыгрузитьСообщенияАгента();
		
		#Если Клиент Тогда
			Состояние("Выгрузка продаж...");
		#КонецЕсли			
		ВыгрузитьПродажи();
		
		#Если Клиент Тогда
			Состояние("Выгрузка перемещений");
		#КонецЕсли
		ВыгрузитьПеремещения();
		
		ДокОбмена.ЗаписатьКонецЭлемента();  // DOCUMENTS;
	
	// Выгружаем картинки	
	#Если Клиент Тогда
		Состояние("Выгрузка картинок...");
	#КонецЕсли
	
	ДокОбмена.ЗаписатьНачалоЭлемента("PICTURES");
	
		ДобавитьПоле("Comment", "Фотографии");	
	
		ВыгрузитьИзображения();
	
	ДокОбмена.ЗаписатьКонецЭлемента();  // PICTURES;
	
	#Если Клиент Тогда
		Состояние("Выгрузка подтверждений...");
	#КонецЕсли
	ВыгрузитьПодтверждения();
 
	// Закрываем теги файла выгрузки
	ЗакрытьФайлВыгрузкиМТ();
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли 	
	
КонецПроцедуры //ВыгрузитьДанныеДляМобильнойТорговли

Процедура ВыгрузитьПодтвержденияСправочников()
	
	ТабСпр = Новый ТаблицаЗначений;
	ТабСпр.Колонки.Добавить("ВидСпр");
	ТабСпр.Колонки.Добавить("Объект");  
	
	Для Каждого ЭлементСписка Из СписЗагруженныхОбъектовСпр Цикл		
		ОбъектСпр     = ЭлементСписка.Значение;
		Представление = ЭлементСписка.Представление;
		
		СтрокаТаб = ТабСпр.Добавить();		
		СтрокаТаб.Объект = ОбъектСпр;
		СтрокаТаб.ВидСпр = Представление;		        		
	КонецЦикла;
	
	ТабСпр.Сортировать("ВидСпр");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
	
	ДобавитьПоле("Comment", "Подтверждения справочников");	
	
	ТекВидСпр = "";
	НужноЗакрытьТег = Ложь;
	
	Для Каждого СтрокаТаб Из ТабСпр Цикл 
		 		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли   
		
		ИдСпр = "";
		Для Каждого ЭлемСоотв Из СоответствиеСпрЗагр Цикл
			Если Не ЭлемСоотв.Значение = СтрокаТаб.ВидСпр Тогда Продолжить; КонецЕсли;			
			ИдСпр = ЭлемСоотв.Ключ;
			Прервать;
		КонецЦикла;
		
		Если ПустаяСтрока(ИдСпр) Тогда Продолжить; КонецЕсли;
				
		Если ТекВидСпр <> СтрокаТаб.ВидСпр Тогда 
			
			Если ТекВидСпр <> "" Тогда		
				НужноЗакрытьТег = Ложь;
				ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS			
				ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG      				
			КонецЕсли;	
			
			ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
					
			ДобавитьПоле("GUID", ИдСпр);
			
			ДобавитьПоле("Comment", "Подтверждения справочника '" + ТекВидСпр + "'");	
			
			ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");	
			
			НужноЗакрытьТег = Истина;
			
		КонецЕсли;
		
		ТекЭлемент = СтрокаТаб.Объект;
		
		ЗаписатьЭлементВДокументОбмена(Новый Структура("GUID", ТекЭлемент));
		
		ТекВидСпр = СтрокаТаб.ВидСпр;
		
	КонецЦикла;	
	
	Если НужноЗакрытьТег Тогда 
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
		
	КонецЕсли;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOGS   	
	
КонецПроцедуры //ВыгрузитьПодтвержденияСправочников

Процедура ВыгрузитьПодтвержденияФотографий()
	
	Если ТабЗагруженныхФото.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокОбмена.ЗаписатьНачалоЭлемента("PICTURES");
	
		ДобавитьПоле("Comment", "Подтверждения фотографий");	
		
		ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");	
		
		Для Каждого СтрокаТаб Из ТабЗагруженныхФото Цикл 
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли   	
		
			ЗаписатьЭлементВДокументОбмена(Новый Структура("GUID", СтрокаТаб.ИдФото));
		
		КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS  		
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //PICTURES   	
	
КонецПроцедуры //ВыгрузитьПодтвержденияФотографий

Процедура ВыгрузитьПодтверждения(ЗаписатьОбъявление = Ложь)
	
	Если ЗаписатьОбъявление Тогда
		
		Каталог = Константы.КаталогДополнительнойИнформации.Получить();
		
		Если Не (ЗначениеЗаполнено(Каталог) и кпкАгентПлюс.ПроверитьСуществованиеКаталога(Каталог)) Тогда		
			Каталог = КаталогВременныхФайлов();		
		КонецЕсли;
 
		ДополнитьСлешВПуть(Каталог);
		
		ИмяФайла = Каталог + "FromCDB.xml";
		
		ДокОбмена = Новый ЗаписьXML;
		
		ДокОбмена.ОткрытьФайл(ИмяФайла);
		
		ДокОбмена.ЗаписатьОбъявлениеXML();
		
		ДокОбмена.ЗаписатьНачалоЭлемента("DATA");
				
	КонецЕсли;
	
	ВыгрузитьПодтвержденияДокументов(); 
	
	ВыгрузитьПодтвержденияСправочников();
	
	ВыгрузитьПодтвержденияФотографий();
	
	Если ЗаписатьОбъявление Тогда
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //DATA
		
		ДокОбмена.Закрыть();		
		
	КонецЕсли; 
	
КонецПроцедуры //ВыгрузитьПодтверждения

Процедура ПроверитьОсновнойДоговорКонтрагента(Контрагент)

	Если ЗначениеЗаполнено(Контрагент.кпкОсновнойДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;

	ВыборкаДоговоров = Справочники.ДоговорыКонтрагентов.Выбрать(, Контрагент);
	Если ВыборкаДоговоров.Следующий() Тогда
		кпкОсновнойДоговорКонтрагента = ВыборкаДоговоров.Ссылка;
	Иначе
		НайденныйДоговорОбъект              = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НайденныйДоговорОбъект.Наименование = "Основной договор";
		
		ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
		
		ОсновнаяВалютаВзаиморасчетов 	 = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,
																							    "ОсновнаяВалютаВзаиморасчетов");
		ОсновнаяОрганизация 		 	 = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, 
																							    "ОсновнаяОрганизация");
		ОсновныеРасчетыПоДокументам	     = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, 
																							    "ОсновныеРасчетыПоДокументамСКонтрагентами");
		ОсновныеРасчетыВУсловныхЕдиницах = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,
																								"ОсновныеРасчетыПоДоговоруВУсловныхЕдиницах");
		ОсновнойОбособленныйУчетТоваров  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, 
																							    "ОсновнойОбособленныйУчетТоваровПоЗаказамПокупателей");
		ОсновнойРазмерПредоплаты         = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, 
																								"ОсновнойРазмерПредоплатыПоЗаказуПокупателя");
		ВедениеВзаиморасчетов            = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, 
																								"ОсновноеВедениеВзаиморасчетовПоДоговорам");																												   
		
		
		НайденныйДоговорОбъект.ВалютаВзаиморасчетов = ОсновнаяВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
			НайденныйДоговорОбъект.ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаУправленческогоУчета");
		КонецЕсли;

		НайденныйДоговорОбъект.Организация = ОсновнаяОрганизация;
		Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.Организация) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	Организации.Ссылка
			               |ИЗ
			               |	Справочник.Организации КАК Организации";
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				НайденныйДоговорОбъект.Организация = Выборка.Ссылка;
			Иначе
				ОповеститьОСобытии("Не удалось записать основной договор контрагента (не найдена организация)!",,,Контрагент);				
				Возврат;
			КонецЕсли;
		КонецЕсли;

		НайденныйДоговорОбъект.Владелец           = Контрагент;
		НайденныйДоговорОбъект.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;

		Если Контрагент.Покупатель Тогда
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			НайденныйДоговорОбъект.ТипЦен      = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		ИначеЕсли Контрагент.Поставщик Тогда
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			НайденныйДоговорОбъект.ТипЦен      = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
		Иначе
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		КонецЕсли;

		Если НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		Иначе
			НайденныйДоговорОбъект.ВедениеВзаиморасчетов = ВедениеВзаиморасчетов;
			Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВедениеВзаиморасчетов) Тогда
				НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
			КонецЕсли;
			НайденныйДоговорОбъект.ВестиПоДокументамРасчетовСКонтрагентом = ОсновныеРасчетыПоДокументам;
		КонецЕсли;

		Если Контрагент.НеЯвляетсяРезидентом И 
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			НайденныйДоговорОбъект.РеализацияНаЭкспорт = Истина;
		КонецЕсли;

		Если НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		 ИЛИ НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			НайденныйДоговорОбъект.ОбособленныйУчетТоваровПоЗаказамПокупателей = ОсновнойОбособленныйУчетТоваров;
		КонецЕсли;

		Если НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			НайденныйДоговорОбъект.ПроцентПредоплаты = ОсновнойРазмерПредоплаты;
		КонецЕсли;

		Попытка
			НайденныйДоговорОбъект.Записать();
		Исключение
			ОповеститьОСобытии("Не удалось записать основной договор контрагента. Причина: " + ОписаниеОшибки(),,,Контрагент);			
			Возврат;
		КонецПопытки;

		кпкОсновнойДоговорКонтрагента = НайденныйДоговорОбъект.Ссылка;
		
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		КонтрагентОбъект.кпкОсновнойДоговорКонтрагента = кпкОсновнойДоговорКонтрагента;
		КонтрагентОбъект.Записать();

	КонецЕсли;

КонецПроцедуры //ПроверитьОсновнойДоговорКонтрагента

Процедура ДобавитьЭлементВСписокУдаляемыхОбъектов(Список, Наименование, ИдСпр, Пометка = Истина)
	
	Если Список.НайтиПоЗначению(ИдСпр) = Неопределено Тогда
		Список.Добавить(ИдСпр, Наименование, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокУдаляемыхОбъектов()
	
	// Заполняем список удаляемых справочников                                             	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхСпр, "Организации",     				"0E3CBAEA-5467-45CD-8C86-FB1777DA435B");	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхСпр, "Контрагенты",     				"9450980F-FB59-47E3-BAE2-AA3C58441B1A");	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхСпр, "Торговые точки",  				"D3DBB02E-681E-4FC2-AD0E-8EF1234E9F48");
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхСпр, "Контактные лица", 				"CF387A58-4655-41B5-A460-85884D1F20D0");	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхСпр, "Номенклатура",    				"D6D52ADA-0F38-4112-AF3C-2F1E425A43D1");	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхСпр, "Характеристики номенклатуры",  "CC552C31-F7DE-4259-A6E3-66EF765D3B43");	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхСпр, "Единицы измерения",   			"80452C60-B442-4DA9-A048-42F63270CA14");	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхСпр, "Штрих-коды",   	   			"C156CC98-8B92-444E-B8C2-E3DE51106B66");	
	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхСпр, "Типы цен",   	  				"00F1FFE7-E16E-4FF4-9EF1-B8D0C54BDF59");	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхСпр, "Склады",   		  			"2516FFCE-F46F-4326-BE00-438EF0871D30");	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхСпр, "Вопросы анкеты",  				"D2015F3B-2F65-46F7-A40D-2867FB75D930");	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхСпр, "Ответы анкеты",   				"F3FEF961-294A-48E2-8A72-BFC950C4466B");	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхСпр, "Запросы",   	  				"CC458719-5078-4DC8-9A0C-FA19E3904F39");	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхСпр, "Картинки",   	  				"E01CF3A3-6765-4FD3-801C-CCDBF85C78FC");	
		
	// Заполняем список удаляемых документов
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхДок, "Заказы", 	     "E01E1F5C-D6E4-46E8-B923-3758B0D79BDE", Ложь);	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхДок, "Реализации",    "7FFB418C-73C9-4883-91C5-827FA5145A3A", Ложь);	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхДок, "ПКО",   		 "749BE2E0-9B00-4D7B-9D4D-88CA53327511", Ложь);	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхДок, "РКО",   		 "3890D435-96BA-4481-ABC0-23782E15B32F", Ложь);	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхДок, "Мерчендайзинг", "61DEE5FE-D0A8-4842-A6AF-A8D33F298845", Ложь);	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхДок, "Посещения",  	 "9F147C59-5EE8-4550-8289-12ECFE5D0617", Ложь);	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхДок, "Перемещения",   "77525C87-CB2F-405E-A92E-6F373EDEECE7", Ложь);	
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхДок, "Поступления",   "C9850D61-BC15-445A-8B1A-E328CC45DDAE", Ложь);		
	ДобавитьЭлементВСписокУдаляемыхОбъектов(СписокУдаляемыхДок, "Сообщения",     "6956C79C-4310-4F71-AF66-0C2048F1344F", Истина);	
		
КонецПроцедуры //ЗаполнитьСписокУдаляемыхОбъектов

Процедура УстановитьПризнакОчисткиСправочника(ИдСпр)
	
	Если флОчищатьСправочникиПередЗагрузкой Тогда
		НайдЭлемент = СписокУдаляемыхСпр.НайтиПоЗначению(ИдСпр);
		Если Не НайдЭлемент = Неопределено Тогда
			ДобавитьПоле("KILLALL", Строка(Число(НайдЭлемент.Пометка)));                	
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры //УстановитьПризнакОчисткиСправочника  

Процедура УстановитьПризнакОчисткиДокумента(ИдДок)
	
	Если флОчищатьДокументыПередЗагрузкой Тогда
		НайдЭлемент = СписокУдаляемыхДок.НайтиПоЗначению(ИдДок);
		Если Не НайдЭлемент = Неопределено Тогда
			ДобавитьПоле("KILLALL", Строка(Число(НайдЭлемент.Пометка)));                	
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры //УстановитьПризнакОчисткиДокумента  

Функция ПолучитьТекстЗапросаПоКонтрагентам()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНоменклатуры.Номенклатура,
	|	СкидкиНоменклатуры.ХарактеристикаНоменклатуры,
	|	СкидкиНоменклатуры.Качество,
	|	СкидкиНоменклатуры.Условие,
	|	СкидкиНоменклатуры.ЗначениеУсловия,
	|	СкидкиНоменклатуры.ПроцентСкидкиНаценки,
	|	СкидкиНоменклатуры.ПолучательСкидки
	|ПОМЕСТИТЬ кпкСкидки
	|ИЗ
	|	РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(
	|			&Период,
	|			Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И Качество В (&МассивКачество)
	|				И Условие В (&МассивУсловий)) КАК СкидкиНоменклатуры
	|ГДЕ
	|	СкидкиНоменклатуры.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И (СкидкиНоменклатуры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ КОНЕЦПЕРИОДА(СкидкиНоменклатуры.ДатаОкончания, ДЕНЬ) >= &Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ПометкаУдаления,
	|	Контрагенты.Родитель.Ссылка КАК Родитель,
	|	Контрагенты.ЭтоГруппа,
	|	Контрагенты.Код,
	|	Контрагенты.Наименование,
	|	Контрагенты.кпкОсновнойДоговорКонтрагента КАК ОсновнойДоговор,
	|	кпкСведенияКонтрагента.Статус,
	|	ВЫБОР
	|		КОГДА кпкСведенияКонтрагента.Статус.Код = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗапретПродаж,
	|	кпкСведенияКонтрагента.Категория,
	|	ПОДСТРОКА(Контрагенты.НаименованиеПолное, 1, 255) КАК НаименованиеПолное,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.ИНН КАК КПП,
	|	Контрагенты.ОсновнойБанковскийСчет КАК РасчетныйСчет
	|ПОМЕСТИТЬ кпкКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кпкСведенияКонтрагента КАК кпкСведенияКонтрагента
	|		ПО (кпкСведенияКонтрагента.Объект = Контрагенты.Ссылка)
	|ГДЕ
	|	(НЕ Контрагенты.ЭтоГруппа)
	|	И (НЕ Контрагенты.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	МАКСИМУМ(кпкСкидки.ПроцентСкидкиНаценки) КАК Скидка
	|ПОМЕСТИТЬ кпкСкидкиКонтрагентов
	|ИЗ
	|	кпкСкидки КАК кпкСкидки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Ссылка = кпкСкидки.ПолучательСкидки)
	|
	|СГРУППИРОВАТЬ ПО
	|	Контрагенты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ОбщаяСкидка,
	|	кпкКонтрагенты.Ссылка,
	|	кпкКонтрагенты.ПометкаУдаления,
	|	кпкКонтрагенты.Родитель,
	|	кпкКонтрагенты.ЭтоГруппа,
	|	кпкКонтрагенты.Код,
	|	кпкКонтрагенты.Наименование КАК Наименование,
	|	кпкКонтрагенты.ОсновнойДоговор,
	|	ЕСТЬNULL(кпкКонтрагенты.Статус, """") КАК Статус,
	|	ВЫБОР
	|		КОГДА кпкСкидкиКонтрагентов.Скидка > &ОбщаяСкидка
	|			ТОГДА кпкСкидкиКонтрагентов.Скидка
	|		ИНАЧЕ &ОбщаяСкидка
	|	КОНЕЦ КАК Скидка,
	|	кпкКонтрагенты.ЗапретПродаж,
	|	кпкКонтрагенты.Категория,
	|	кпкКонтрагенты.НаименованиеПолное,
	|	кпкКонтрагенты.РасчетныйСчет,
	|	кпкКонтрагенты.ИНН,
	|	кпкКонтрагенты.ИНН
	|ИЗ
	|	кпкКонтрагенты КАК кпкКонтрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ кпкСкидкиКонтрагентов КАК кпкСкидкиКонтрагентов
	|		ПО кпкКонтрагенты.Ссылка = кпкСкидкиКонтрагентов.Контрагент
	|ГДЕ
	|	кпкКонтрагенты.Ссылка В ИЕРАРХИИ(&СписКлиентов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";	
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПолучитьТекстЗапросПоКонтрагентам

//////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ВЫГРУЗКИ ДАННЫХ ДЛЯ ПРИЛОЖЕНИЯ МОБИЛЬНАЯ ТОРГОВЛЯ
//////////////////////////////////////////////////////////////////
//
Процедура ВыгрузитьВидыКонтактнойИнформации()
	
	ТаблицаВидов = Новый СписокЗначений;
	ТаблицаВидов.Добавить(Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
	ТаблицаВидов.Добавить(Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица);
	ТаблицаВидов.Добавить(Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Код,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.Тип.Ссылка КАК ТипКИ,
	|	ВидыКонтактнойИнформации.ПометкаУдаления,
	|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации.Порядок КАК ВидКИ
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации В(&ВидОбъектаКонтактнойИнформации)");
	
	Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", ТаблицаВидов);
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДокОбмена.ЗаписатьАтрибут("GUID", "564E0ECA-C498-4D28-83D7-4BDEAEC558E2");
	
		ДобавитьПоле("Comment", "Справочник.ВидыКонтактнойИнформации");
	
		// Всегда передаем команду на очистку справочника
		ДобавитьПоле("KILLALL", "1");                	
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока СписокЭлементов.Следующий() Цикл  						
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);				
			СтруктураПолей.Вставить("A02", ТипыКонтактнойИнформации.Получить(СписокЭлементов.ТипКИ));
			СтруктураПолей.Вставить("A03", ?(СписокЭлементов.ВидКИ = 1, "Контрагенты", "КонтактныеЛица"));
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
КонецПроцедуры // ВыгрузитьВидыКонтактнойИнформации()

// Функция получает остатки на передвижном складе
// и возвращает таблицу остатков
//
Функция ПолучитьОстаткиТоваровНаПередвижномСкладе()
	
	Если АвтоСклад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		Регистр = "ТоварыВНТТ";
	ИначеЕсли АвтоСклад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		Регистр = "ТоварыВРознице";
	ИначеЕсли АвтоСклад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
		Регистр = "ТоварыНаСкладах";
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Остатки.Номенклатура КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	СУММА(Остатки.КоличествоОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления." + Регистр + ".Остатки(
	|			,
	|			Номенклатура В ИЕРАРХИИ (&Ассортимент)
	|				И Склад = &Склад) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры");
	
	Запрос.УстановитьПараметр("Дата",  		 ТекущаяДата());
	Запрос.УстановитьПараметр("Ассортимент", сзАссортимент);
	Запрос.УстановитьПараметр("Склад", 		 АвтоСклад);
	
	Остатки = Запрос.Выполнить().Выгрузить();
	
	Возврат Остатки;
	
КонецФункции //ПолучитьОстаткиТоваровНаПередвижномСкладе

// Функция ищет значение в таблице остаков передвижного склада
// и возвращает значение. Если значение не найдено, то 0.
// Параметры
//  <Товар>  - <СпрСсылка.Номенклатура или СпрСсылка.ХарактеристикиНоменклатуры> - объект
//                 остаток для которого будет производиться поиск значение остатка
//  <СписокОстатков>  - <ТаблицаЗначений> - Таблица остатков
//                 в которой будет искаться остаток
//
// Возвращаемое значение:
//   <Число>   - остаток на передвижном складе
//
Функция ПолучитьОстатокТовараНаПередвижномСкладе(Товар, СписокОстатков)

	ОстатокНаБорту = 0;
	
	СтрокаТЗ = СписокОстатков.Найти(Товар);
	Если СтрокаТЗ <> Неопределено Тогда
		ОстатокНаБорту = СтрокаТЗ.Количество;
	КонецЕсли;
	
	Возврат ОстатокНаБорту;
	
КонецФункции // ПолучитьОстатокТовараНаПередвижномСкладе()

Процедура ВыгрузитьПодтвержденияРеализаций()
	
	Интервал = Константы.кпкИнтервалПодтверждений.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реализация.Ссылка КАК Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент)
	|   КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Реализация
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = Реализация.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода
	|	И кпкСведенияДокументаСрезПоследних.кпкПризнакРучногоВвода = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Реализация.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * Интервал)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "7FFB418C-73C9-4883-91C5-827FA5145A3A", "'Реализация'");
				
КонецПроцедуры  // ВыгрузитьПодтвержденияРеализаций   

//////////////////////////////////////////////////////////////////
// Процедуры и функции проверки правильности заполнения документов
//////////////////////////////////////////////////////////////////

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Док, Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ОповеститьОСобытии(Строка(Док) + ": не заполнено значение реквизита """ + ИмяРеквизита + """",,, Док.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()      

Функция ПроверитьЗаполнениеШапкиДокумента(Док, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяДок = Док.Метаданные().Имя;
		
	РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	
	Если ИмяДок = "ЗаказПокупателя" Тогда
		ПроверитьЗаполнениеШапкиЗаказа(Док, СтруктураШапкиДокумента, Отказ, Заголовок)
	ИначеЕсли ИмяДок = "РеализацияТоваровУслуг" Тогда
		ПроверитьЗаполнениеШапкиРеализация(Док, СтруктураШапкиДокумента, Отказ, Заголовок)
	ИначеЕсли ИмяДок = "ОтчетОРозничныхПродажах" Тогда
		ПроверитьЗаполнениеШапкиРеализацияРозница(Док, СтруктураШапкиДокумента, Отказ, Заголовок)
	ИначеЕсли ИмяДок = "ВозвратТоваровОтПокупателя" Тогда
		ПроверитьЗаполнениеШапкиВозврат(Док, СтруктураШапкиДокумента, Отказ, Заголовок)
	ИначеЕсли ИмяДок = "ПоступлениеТоваровУслуг" Тогда
		ПроверитьЗаполнениеШапкиПоступление(Док, СтруктураШапкиДокумента, Отказ, Заголовок)
	КонецЕсли;
			
КонецФункции //ПроверитьЗаполнениеШапки

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапкиЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, 
					|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");
					
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОповеститьОСобытии(Строка(ЭтотОбъект) + ": документ можно выписывать только по договору, взаиморасчеты по " + 
						   "которому ведутся  по заказам или по договору в целом!",,, ЭтотОбъект.Ссылка);
		Отказ = Истина;
	КонецЕсли;

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОповеститьОСобытии(Строка(ЭтотОбъект) + ": документ не может осуществлять заказ с НТТ!",,, ЭтотОбъект.Ссылка);
		Отказ = Истина;
	КонецЕсли;
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(ЭтотОбъект.Организация, 
																					 ЭтотОбъект.ДоговорКонтрагента,
																					 СтруктураШапкиДокумента.ДоговорОрганизация,
																					 Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапкиЗаказа()
                          
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапкиРеализация(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента",
												 "КурсВзаиморасчетов, КратностьВзаиморасчетов");

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		И НЕ УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ЭтотОбъект.ВидОперации, ЭтотОбъект.ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Заказ покупателя""!");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Счет покупателю""!");
	КонецЕсли;

	мУказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");	
	мУказаниеСкладовВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                  Или (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

	// Склад заполняем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	// и склад не в ТЧ.
	Если Не мУказаниеСкладовВТЧ
		И ЭтотОбъект.Товары.Количество() + ЭтотОбъект.ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	СтруктураОбязательныхПолей.Вставить("ВидПередачи");
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(ЭтотОбъект.Организация, 
																					 ЭтотОбъект.ДоговорКонтрагента,
																					 СтруктураШапкиДокумента.ДоговорОрганизация, 
																					 Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОповеститьОСобытии(Строка(ЭтотОбъект) + ": документ не может осуществлять реализацию с НТТ!",,, ЭтотОбъект.Ссылка);
		Отказ = Истина;
	КонецЕсли;

	// Брак нельзя отдать на реализацию.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
	   И  (Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда
		ОповеститьОСобытии(Строка(ЭтотОбъект) + ": реализация товара ненадлежащего качества может производиться только по договору """
		+  СокрЛП(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		+ """.",,, ЭтотОбъект.Ссылка);
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапкиРеализация()

// Проверяет правильность заполнения шапки документа.
//
// Параметры:
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапкиРеализацияРозница(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация");

	Если Не СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");

		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Склад) Тогда
			Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
				Если СтруктураШапкиДокумента.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
					ТекстСообщения = Строка(ЭтотОбъект) + ": при данном виде операции в качестве склада может быть выбрана только НТТ!";
					ОповеститьОСобытии(ТекстСообщения,,, ЭтотОбъект.Ссылка); 
					Отказ = Истина;
				КонецЕсли;
			Иначе
				Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
					ТекстСообщения = Строка(ЭтотОбъект) + ": при данном виде операции в качестве склада не может быть выбрана НТТ!";
					ОповеститьОСобытии(ТекстСообщения,,, ЭтотОбъект.Ссылка); 
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		СтруктураОбязательныхПолей.Вставить("КассаККМ");
		Если ЗначениеЗаполнено(ЭтотОбъект.КассаККМ) И ЭтотОбъект.КассаККМ.Владелец <> ЭтотОбъект.Организация Тогда
			ТекстСообщения = Строка(ЭтотОбъект) + ": выбранная касса ККМ не соответствует организации, указанной в документе!";
			ОповеститьОСобытии(ТекстСообщения,,, ЭтотОбъект.Ссылка);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ЭтотОбъект.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("ДоговорЭквайринга");
		СтруктураОбязательныхПолей.Вставить("Эквайрер");
		СтруктураОбязательныхПолей.Вставить("ДоговорВзаиморасчетовЭквайрера");

		Если ЗначениеЗаполнено(ЭтотОбъект.ДоговорВзаиморасчетовЭквайрера) 
			И ЭтотОбъект.ДоговорВзаиморасчетовЭквайрера.Организация <> ЭтотОбъект.Организация Тогда
			ОповеститьОСобытии(Строка(ЭтотОбъект) + ": организация, указанная в договоре взаиморасчетов с эквайрером " + 
							   "не соответствует организации, указанной в документе!",,, ЭтотОбъект.Ссылка);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый).
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапкиВозврат(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, 
					|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");

	Если  Не СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("СкладОрдер");
	КонецЕсли;

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		И НЕ УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(неопределено, ЭтотОбъект.ДоговорКонтрагента,"ВозвратОтПокупателя") Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Заказ покупателя""!");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по счетам""! 
		|Заполните поле ""Счет покупателю""!");
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(ЭтотОбъект.Организация, 
																					 ЭтотОбъект.ДоговорКонтрагента, 
																					 СтруктураШапкиДокумента.ДоговорОрганизация, 
																					 Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапкиПоступление(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, 
	                             |ВалютаДокумента, Контрагент, ДоговорКонтрагента, ВидПоступления,
	                             |КурсВзаиморасчетов, КратностьВзаиморасчетов");

	Если ЭтотОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти
	   И ЭтотОбъект.Товары.Количество() + ЭтотОбъект.ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("СкладОрдер");
	КонецЕсли;

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		И НЕ СтруктураШапкиДокумента.ЗаказВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить( "Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
			|Заполните поле ""Заказ поставщику""!");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить( "Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
			|Заполните поле ""Счет поставщика""!");
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Если склад указывается в ТЧ, то в шапке он может быть не заполнен или указан неправильно,
	// это ни на что не влияет, потому что при проведении используется склад в ТЧ.
	Если ЭтотОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти 
	   И СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ОповеститьОСобытии(Строка(ЭтотОбъект) + ": документ не может осуществлять поступление на НТТ!",,, ЭтотОбъект.Ссылка);
			Отказ = Истина;
	КонецЕсли;
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(ЭтотОбъект.Организация, 
																					 ЭтотОбъект.ДоговорКонтрагента, 
																					 СтруктураШапкиДокумента.ДоговорОрганизация,
																					 Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапкиПоступление()

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплатаУпр(Док)

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("Касса");
	СтруктураПолей.Вставить("СуммаДокумента");
	
	Если Не (Док.ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке 
		ИЛИ Док.ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее) Тогда
		СтруктураПолей.Вставить("Контрагент");
	КонецЕсли;
	
	Если Док.ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		СтруктураПолей.Вставить("СчетОрганизации","Не указан счет организации");
	КонецЕсли;
	
	Если Док.ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		СтруктураПолей.Вставить("СчетОрганизации","Не указан счет организации");
	КонецЕсли;
	
	Если Док.ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		Если Док.ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ Тогда
			СтруктураПолей.Вставить("Контрагент", "Не указана касса ККМ");
		Иначе
			СтруктураПолей.Вставить("Контрагент", "Не указан склад - НТТ");
		КонецЕсли; 
	КонецЕсли;

	Возврат СтруктураПолей;   

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчетыУпр(Док)

	Если Док.ЕстьРасчетыСКонтрагентами ИЛИ Док.ЕстьРасчетыПоКредитам Тогда

		СтруктураПолей = Новый Структура("Организация,Касса,
	                        |Контрагент");

	ИначеЕсли Док.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		СтруктураПолей = Новый Структура("Организация,Касса,Контрагент,
	                        |ВалютаВзаиморасчетовРаботника");
	Иначе
		СтруктураПолей = Новый Структура("Организация,Касса");
	КонецЕсли;
	
	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейРасчетыУпр()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты(Док)

	Если Док.ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком ИЛИ
		 Док.ВидОперации=Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда

		 СтруктураПолей= Новый Структура("Организация,Касса,
	                        |Контрагент, СуммаДокумента");

	ИначеЕсли Док.ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		СтруктураПолей = Новый Структура("Организация,Касса,Контрагент,
	                        |ВалютаВзаиморасчетовРаботника, СуммаДокумента");
	Иначе
		СтруктураПолей= Новый Структура("Организация,Касса");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейРасчеты()    

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧПКО(Док, Отказ, Заголовок)
	
	Для Каждого Платеж Из Док.РасшифровкаПлатежа Цикл
		
		Если Не Отказ Тогда
			
			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(Док.ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				
				ПроверитьЗначение(Док, Платеж.Сделка, Отказ, Заголовок, ТекстСделка);
				
				Если Отказ Тогда
				
					ОповеститьОСобытии(Строка(Док) + ": по договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """ + ТекстСделка + """!",,, Док.Ссылка);
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(Док.ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателя","Счет поставщику");
				
				ПроверитьЗначение(Док, Платеж.Сделка, Отказ, Заголовок, ТекстСделка);

				Если Отказ Тогда
					ОповеститьОСобытии(Строка(ЭтотОбъект) + ": по договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!",,, Док.Ссылка);
				КонецЕсли;
						
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Док.Организация) 
				И Док.Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОповеститьОСобытии(Строка(ЭтотОбъект) + ": выбран договор контрагента, не соответствующий организации, указанной в документе!",,, Док.Ссылка);
				Отказ = Истина;;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧПКО 

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧРКО(Док, Отказ, Заголовок)

	Для Каждого Платеж Из Док.РасшифровкаПлатежа Цикл
		
		Если Не Отказ Тогда

			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка = ?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(Док.ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				
				ПроверитьЗначение(Док, Платеж.Сделка, Отказ, Заголовок, ТекстСделка);
				
				Если Отказ Тогда
				
					ОповеститьОСобытии(Строка(Док) + ": по договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """+ТекстСделка+"""!",,, Док.Ссылка);
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(Док.ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателя","Счет поставщику");
				
				ПроверитьЗначение(Док, Платеж.Сделка, Отказ, Заголовок, ТекстСделка);

				Если Отказ Тогда
					ОповеститьОСобытии(Строка(Док) + ": по договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!",,, Док.Ссылка);
				КонецЕсли;
						
			КонецЕсли;

			Если ЗначениеЗаполнено(Док.Организация) 
				И Док.Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОповеститьОСобытии(Строка(Док) + ": выбран договор контрагента, не соответствующий организации, указанной в документе!",,, Док.Ссылка);
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧРКО

Процедура ПроверитьЗаполнениеДокументаУпрПКО(ЭтотОбъект, Отказ, Заголовок)

	Если ЭтотОбъект.Оплачено Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплатаУпр(ЭтотОбъект), Отказ, Заголовок);
	КонецЕсли;

	Если (НЕ ЭтотОбъект.ОтраженоВОперУчете) И (НЕ ЭтотОбъект.Оплачено) И ЭтотОбъект.ОтражатьВУправленческомУчете Тогда

		ОповеститьОСобытии(Заголовок+"
		         |Не выбрано правило проведения (""Отражено в опер. учете"",""Оплачено"")",,, ЭтотОбъект.Ссылка);
		Отказ = Истина;

	КонецЕсли;
	
	Если ЭтотОбъект.ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке 
		И НЕ ЭтотОбъект.СчетОрганизации.ВалютаДенежныхСредств=ЭтотОбъект.Касса.ВалютаДенежныхСредств Тогда
			ОповеститьОСобытии(Строка(ЭтотОбъект) + ": не совпадают валюты банковского счета и кассы",,, ЭтотОбъект.Ссылка);
			Отказ = Истина;
	КонецЕсли;

	Если НЕ ЭтотОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа")= ЭтотОбъект.СуммаДокумента Тогда

		ОповеститьОСобытии(Заголовок+"
		         |не совпадают сумма документа и ее расшифровка.",,, ЭтотОбъект.Ссылка);
		Отказ = Истина;

	КонецЕсли;

	Если ЭтотОбъект.ОтраженоВОперУчете Тогда

		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчеты(ЭтотОбъект), Отказ, Заголовок);

		Если ЭтотОбъект.ЕстьРасчетыСКонтрагентами ИЛИ ЭтотОбъект.ЕстьРасчетыПоКредитам Тогда
			
			ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(ЭтотОбъект.Дата, ЭтотОбъект.ВалютаДокумента, ЭтотОбъект.Ссылка, "ПриходныйКассовыйОрдер");

			ПроверитьЗаполнениеТЧПКО(ЭтотОбъект, Отказ, Заголовок);
			
			Если Не Отказ Тогда
				УправлениеДенежнымиСредствами.КонтрольОстатковПоТЧ(ЭтотОбъект.Дата, ТаблицаПлатежейУпр, Отказ, Заголовок,,Истина);
			КонецЕсли;
			
		ИначеЕсли ЭтотОбъект.ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником 
			И ЭтотОбъект.РасшифровкаПлатежа[0].СуммаВзаиморасчетов=0 Тогда
			
			ОповеститьОСобытии(Строка(ЭтотОбъект) + ": не указана сумма взаиморасчетов с физическим лицом.",,, ЭтотОбъект.Ссылка);
			
			Отказ = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ЭтотОбъект.ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка 
		И НЕ ЭтотОбъект.Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета Тогда
		ОповеститьОСобытии(Строка(ЭтотОбъект) + ": прием розничной выручки производится только в валюте регламентированного учета.",,, ЭтотОбъект.Ссылка);
		Отказ = Истина;
	КонецЕсли;
	
	Если ЭтотОбъект.Организация.ОтражатьВРегламентированномУчете Тогда
		Если ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если ЭтотОбъект.Контрагент.НеЯвляетсяРезидентом Тогда
				ОповеститьОСобытии(Строка(ЭтотОбъект) + ": проводить наличные расчеты с нерезидентами по данной Организации запрещено.",,, ЭтотОбъект.Ссылка);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПроверитьЗаполнениеДокументаУпрПКО
            
Процедура ПроверитьЗаполнениеДокументаУпрРКО(ЭтотОбъект, Отказ, Режим, Заголовок, РасчетыВозврат)
	
	Если (НЕ ЭтотОбъект.ОтраженоВОперУчете) И (НЕ ЭтотОбъект.Оплачено) И ЭтотОбъект.ОтражатьВУправленческомУчете Тогда
		ОповеститьОСобытии(Заголовок+"
			|Не выбрано правило проведения (""Отразить в опер. учете"",""Оплачено"")",,, ЭтотОбъект.Ссылка);
		Отказ = Истина;
	КонецЕсли;
	
	Если (ЭтотОбъект.ЕстьРасчетыПоКредитам ИЛИ ЭтотОбъект.ЕстьРасчетыСКонтрагентами) 
		И НЕ ЭтотОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа")= ЭтотОбъект.СуммаДокумента Тогда
		ОповеститьОСобытии(Заголовок+" 
		|не совпадают сумма документа и ее расшифровка.",,, ЭтотОбъект.Ссылка);		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если ЭтотОбъект.ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		И НЕ ЭтотОбъект.СчетОрганизации.ВалютаДенежныхСредств=ЭтотОбъект.Касса.ВалютаДенежныхСредств Тогда
			ОповеститьОСобытии(Строка(ЭтотОбъект) + ": не совпадают валюты банковского счета и кассы",,, ЭтотОбъект.Ссылка);
			Отказ = Истина;
		КонецЕсли;
		
	Если (ЭтотОбъект.ЕстьРасчетыСКонтрагентами ИЛИ ЭтотОбъект.ЕстьРасчетыПоКредитам) И ЭтотОбъект.ОтраженоВОперУчете Тогда
		
		ПроверитьЗаполнениеТЧРКО(ЭтотОбъект, Отказ, Заголовок);
		
		ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(ЭтотОбъект.Дата, ЭтотОбъект.ВалютаДокумента, ЭтотОбъект.Ссылка, "РасходныйКассовыйОрдер");
		
		Если Не Отказ Тогда
			УправлениеДенежнымиСредствами.КонтрольОстатковПоТЧ(ЭтотОбъект.Дата, ТаблицаПлатежейУпр, Отказ, Заголовок, РасчетыВозврат);
		КонецЕсли;
		
	КонецЕсли;

	Если ЭтотОбъект.ОтражатьВУправленческомУчете 
		И ЭтотОбъект.ОтраженоВОперУчете 
		И (Режим = РежимПроведенияДокумента.Оперативный) Тогда
		
		Если Не ЭтотОбъект.ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
			
			ЕстьРазрешение=УправлениеДенежнымиСредствами.ЕстьРазрешениеПроводитьБезЗаявки();
			
			УправлениеДенежнымиСредствами.ПроверитьОстаткиПоЗаявке(ЭтотОбъект.Дата,Отказ,Заголовок,
			ЭтотОбъект.Касса,ЭтотОбъект.СуммаДокумента, ТаблицаПлатежейУпр, ЕстьРазрешение);
			
		КонецЕсли;

		// Проверяем остаток доступных денежных средств
		СвободныйОстаток = УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(
			ЭтотОбъект.Касса, ЭтотОбъект.Дата, ТаблицаПлатежейУпр.ВыгрузитьКолонку("ДокументПланированияПлатежа"));
		
		Если (ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк) 
			И ЗначениеЗаполнено(ЭтотОбъект.ОбъявлениеНаВзносНаличными) Тогда
		
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ДенежныеСредстваКСписаниюОстатки.СуммаОстаток КАК СуммаКСписаниюПоОбъявлению
			|ИЗ
			|	РегистрНакопления.ДенежныеСредстваКСписанию.Остатки(
			|			,
			|			БанковскийСчетКасса = &БанковскийСчетКасса
			|				И ВидДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Наличные)
			|				И ДокументСписания = &ОбъявлениеНаВзносНаличными
			|				И Организация = &Организация) КАК ДенежныеСредстваКСписаниюОстатки
			|ГДЕ
			|	ДенежныеСредстваКСписаниюОстатки.СуммаОстаток ЕСТЬ НЕ NULL");
	
			Запрос.УстановитьПараметр("БанковскийСчетКасса",        ЭтотОбъект.Касса);
			Запрос.УстановитьПараметр("ОбъявлениеНаВзносНаличными", ЭтотОбъект.ОбъявлениеНаВзносНаличными);
			Запрос.УстановитьПараметр("Организация",                ЭтотОбъект.Организация);
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				
				СвободныйОстаток = СвободныйОстаток + Выборка.СуммаКСписаниюПоОбъявлению;
				
			КонецЕсли; 
		
		КонецЕсли;
		
		Если СвободныйОстаток < ЭтотОбъект.СуммаДокумента Тогда

			ОповеститьОСобытии(Заголовок+"
			|Сумма документа превышает возможный к использованию остаток денежных средств
			|по "+ЭтотОбъект.Касса.Наименование+".
			|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2")+" "+ЭтотОбъект.ВалютаДокумента+"
			|Сумма документа = "+Формат(ЭтотОбъект.СуммаДокумента,"ЧЦ=15; ЧДЦ=2")+" "+ЭтотОбъект.ВалютаДокумента,,, ЭтотОбъект.Ссылка);

			Если НЕ УправлениеДенежнымиСредствами.ЕстьРазрешениеПревышатьСвободныйОстатокДС() Тогда
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтотОбъект.Оплачено Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплатаУпр(ЭтотОбъект), Отказ, Заголовок);
	КонецЕсли;

	Если ЭтотОбъект.ОтраженоВОперУчете Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчетыУпр(ЭтотОбъект), Отказ, Заголовок);
	КонецЕсли;
	
	Если ЭтотОбъект.ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ 
		И НЕ ЭтотОбъект.Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета Тогда
		ОповеститьОСобытии(Строка(ЭтотОбъект) + ": выдача денежных средств в кассу ККМ производится только в валюте регламентированного учета.",,, ЭтотОбъект.Ссылка);
		Отказ = Истина;
	КонецЕсли;
	
	Если ЭтотОбъект.Организация.ОтражатьВРегламентированномУчете Тогда
		Если ТипЗнч(ЭтотОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если ЭтотОбъект.Контрагент.НеЯвляетсяРезидентом Тогда
				ОповеститьОСобытии(Строка(ЭтотОбъект) + ": проводить наличные расчеты с нерезидентами по данной организации запрещено.",,, ЭтотОбъект.Ссылка);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПроверитьЗаполнениеДокументаУпрРКО

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

Функция ПроверитьВозможностьПроведенияДокумента(Док)
	
	Перем СтруктураШапкиДокумента;
	Перем Заголовок;

	ИмяДок = Док.Метаданные().Имя;
	
	Отказ = Ложь;
	
	РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	
	Если ИмяДок = "ЗаказПокупателя" Тогда
		
		// Сформируем структуру реквизитов шапки документа
		СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Док);
		
		// Заполним по шапке документа дерево параметров, нужных при проведении.
		ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"             , "ВедениеВзаиморасчетов");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"              , "ВалютаВзаиморасчетов");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                       , "ДоговорОрганизация");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"      , "ВестиПартионныйУчетПоСкладам");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
		Если ЗначениеЗаполнено(Док.СкладГруппа) 
			И ТипЗнч(Док.СкладГруппа) = Тип("СправочникСсылка.Склады") Тогда
			ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладГруппа", "ВидСклада", "ВидСклада");
		Иначе
			ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "NULL", "NULL", "ВидСклада");
		КонецЕсли;  		
		
		// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
		СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(Док, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
 
		// Проверим правильность заполнения шапки документа
		ПроверитьЗаполнениеШапкиДокумента(Док, СтруктураШапкиДокумента, Отказ, Заголовок);
		
	ИначеЕсли ИмяДок = "РеализацияТоваровУслуг" или ИмяДок = "ВозвратТоваровОтПокупателя" или ИмяДок = "ПоступлениеТоваровУслуг" Тогда
		
		Док.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);
		
		// Проверим правильность заполнения шапки документа
		ПроверитьЗаполнениеШапкиДокумента(Док, СтруктураШапкиДокумента, Отказ, Заголовок);
 
		//Проверим на возможность проведения в БУ и НУ.
		Если Док.ОтражатьВБухгалтерскомУчете 
			Или Док.ОтражатьВНалоговомУчете Тогда
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(Док.ДоговорКонтрагента, Док.ВалютаДокумента,
			Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
			Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
		КонецЕсли; 
		
	ИначеЕсли ИмяДок = "ОтчетОРозничныхПродажах" Тогда
		
		Док.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		
		// Проверим правильность заполнения шапки документа
		ПроверитьЗаполнениеШапкиДокумента(Док, СтруктураШапкиДокумента, Отказ, Заголовок);
				
	ИначеЕсли ИмяДок = "ПриходныйКассовыйОрдер" Тогда
		
		Док.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);
		
		// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
		ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(Док.Дата, Док.ВалютаДокумента, Док.Ссылка, "ПриходныйКассовыйОрдер");
		
		ПроверитьЗаполнениеДокументаУпрПКО(Док, Отказ, Заголовок);
		
		//Проверим на возможность проведения в БУ и НУ
		Если Док.ОтражатьВБухгалтерскомУчете тогда
			Для каждого СтрокаОплаты из ТаблицаПлатежейУпр Цикл
				
				УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
				СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
				мВалютаРегламентированногоУчета, Истина, Отказ, 
				Заголовок, "Строка " + СтрокаОплаты.НомерСтроки + " - ",
				СтрокаОплаты.ВалютаВзаиморасчетов, СтрокаОплаты.РасчетыВУсловныхЕдиницах);
				
			КонецЦикла;
		КонецЕсли;  		
		
	ИначеЕсли ИмяДок = "РасходныйКассовыйОрдер" Тогда
		
		// Сформируем структуру реквизитов шапки документа
		СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Док);
 		
		ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
		РасчетыВозврат = УправлениеДенежнымиСредствами.НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(Док.ВидОперации);
		
		ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(Док.Дата, Док.ВалютаДокумента, Док.Ссылка, "РасходныйКассовыйОрдер");
		
		Если Док.ЕстьРасчетыСКонтрагентами = Неопределено Тогда
			Док.ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(Док.ВидОперации);
		КонецЕсли;
		
		Если Док.ЕстьРасчетыПоКредитам = Неопределено Тогда
			Док.ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(Док.ВидОперации);
		КонецЕсли;
		
		ПроверитьЗаполнениеДокументаУпрРКО(Док, Отказ, РежимПроведения, Заголовок, РасчетыВозврат);
		
		//Проверим на возможность проведения в БУ и НУ
		Если Док.ОтражатьВБухгалтерскомУчете тогда
			Для каждого СтрокаОплаты из ТаблицаПлатежейУпр Цикл
				УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
				СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
				мВалютаРегламентированногоУчета, Истина, Отказ,
				 Заголовок, "Строка " + СтрокаОплаты.НомерСтроки + " - ",
				СтрокаОплаты.ВалютаВзаиморасчетов, СтрокаОплаты.РасчетыВУсловныхЕдиницах);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;		
	
	Возврат Отказ;
		
КонецФункции //ПроверитьВозможностьПроведенияДокумента

Процедура ДобавитьЗаписиПоПодтверждениямДокументов(Результат, ИдДокумента, СтрДок)
	
	Выборка = Результат.Выбрать(); 	
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
		ДобавитьПоле("GUID", ИдДокумента);
		
		ДобавитьПоле("Comment", "Подтверждения документов " + СтрДок);						

		ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
		
		Пока Выборка.Следующий() Цикл
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			ЗаписатьЭлементВДокументОбмена(Новый Структура("GUID", Выборка.Ссылка));
						
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //DOCUMENT
 		
КонецПроцедуры //ДобавитьЗаписиПоПодтверждениямДокументов

// Функция определения соответствия перечисления видов документов
// в 1С и Агент Плюс 2.0
//
Функция ПолучитьВидыДокументов()
	
	ВидыДокументов = Новый Соответствие;
	
	ВидыДокументов.Вставить(Перечисления.кпкВидыДокументов.Заказ, 			"E070D148-8C9C-4E5F-AFDA-2838D5BE6618");
	ВидыДокументов.Вставить(Перечисления.кпкВидыДокументов.Реализация, 		"3B95D27F-7D6F-401C-AAF3-BD3DC78A1E82");
	ВидыДокументов.Вставить(Перечисления.кпкВидыДокументов.ПКО,	 			"FCDD8D0B-6E35-401F-BC28-8527FD2F4D3A");
	ВидыДокументов.Вставить(Перечисления.кпкВидыДокументов.РКО,	 			"EE0C3171-0CA1-40E5-95A7-08CBF3391682");	
	ВидыДокументов.Вставить(Перечисления.кпкВидыДокументов.Мерчендайзинг, 	"411F3673-AF9E-42C9-85B8-D58038BCBE90");
	ВидыДокументов.Вставить(Перечисления.кпкВидыДокументов.Посещение, 		"FF01E98F-A98B-4DB9-B23E-5C556FAD1097");
	ВидыДокументов.Вставить(Перечисления.кпкВидыДокументов.Поступление, 	"A40EFEE6-FBEE-4651-A537-46F3DF88F212");
	ВидыДокументов.Вставить(Перечисления.кпкВидыДокументов.ВозвратТоваров, 	"91C46770-D349-4EE3-A2B7-90E828023E05");
	ВидыДокументов.Вставить(Перечисления.кпкВидыДокументов.Перемещение, 	"196E2EBB-FE7C-4FBF-9A0B-2135A090256D");
	ВидыДокументов.Вставить(Перечисления.кпкВидыДокументов.СчетФактура, 	"89D11CA3-C97A-4806-9FF8-FB32959802B0");
	ВидыДокументов.Вставить(Перечисления.кпкВидыДокументов.Долг, 			"42393782-02E2-4193-B445-B0BE91B386A1");
	ВидыДокументов.Вставить(Перечисления.кпкВидыДокументов.Маршрут, 		"29472CBF-A1A4-48B7-9992-5E1AA0EA0B02");
	
	Возврат ВидыДокументов;
	
КонецФункции //ПолучитьВидыДокументов

Процедура ВыгрузитьПодтвержденияПоступлений()
	
	Интервал = Константы.кпкИнтервалПодтверждений.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВозвратТоваров.Ссылка КАК Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент)
	|   КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваров
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = ВозвратТоваров.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода
	|	И кпкСведенияДокументаСрезПоследних.кпкПризнакРучногоВвода = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Поступление.Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент) 
	|   КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК Поступление
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = Поступление.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода
	|	И кпкСведенияДокументаСрезПоследних.кпкПризнакРучногоВвода = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";

	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * Интервал)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "C9850D61-BC15-445A-8B1A-E328CC45DDAE", "'Поступление'");
				
КонецПроцедуры  // ВыгрузитьПодтвержденияПеремещений

Процедура ВыгрузитьПодтвержденияВозвратовТоваров()
	
	Интервал = Константы.кпкИнтервалПодтверждений.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВозвратТоваров.Ссылка КАК Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент)
	|   КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваров
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = ВозвратТоваров.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода
	|	И кпкСведенияДокументаСрезПоследних.кпкПризнакРучногоВвода = ЛОЖЬ
	|УПОРЯДОЧИТЬ ПО
	|	Период";

	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * Интервал)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "4971B041-BEAB-4FA6-B1E8-10138F04FE44", "'Возврат'");

КонецПроцедуры  // ВыгрузитьПодтвержденияПеремещений

Процедура ЗагрузитьДокументПоступление(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)

	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ИдФирмы, Комментарий," + 
										  "Широта, Долгота, СуммаДокумента,Склад," + 
										  "Категория, СпособСоздания, ИдКлиента, ИдТоргТочки, ИдДоговора");	
										  
	КатегорияСсылка 	 = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A010"), "кпкКатегорииДокументов");
										  
	СтруктураПараметров.ВидДокумента       = ОбъектДок.Метаданные().Имя;	
	СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    		
	СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");	
	СтруктураПараметров.ИдКлиента 	   	   = ТекстXML.ПолучитьАтрибут("A02");	
	СтруктураПараметров.ИдТоргТочки	   	   = ТекстXML.ПолучитьАтрибут("A03");	
	СтруктураПараметров.ИдДоговора	   	   = ТекстXML.ПолучитьАтрибут("A04");
	СтруктураПараметров.СуммаДокумента	   = ТекстXML.ПолучитьАтрибут("A07");		
	СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A09");		
	СтруктураПараметров.Категория 	       = КатегорияСсылка;		
	СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A013");
	СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A014");		
	СтруктураПараметров.Склад	    	   = ТекстXML.ПолучитьАтрибут("A016");		
	СтруктураПараметров.СпособСоздания 	   = "User";
	
	ПредставлениеДокВКПК = СтруктураПараметров.ВидДокумента + " № " + 
						   СтруктураПараметров.Номер + " от " + СтруктураПараметров.Дата;
	
	Менеджер = Документы[СтруктураПараметров.ВидДокумента];
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ДоговорКонтрагента");	
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "");	
	
	ОбъектДок.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	
	// Получаем склад-ордер из документа
	Если ЭтоПустойИдентификатор(СтруктураПараметров.Склад) Тогда			
		ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указан склад!", СтатусСообщения.Внимание);      
	Иначе		
		складОрдер = ПолучитьСсылкуИзСправочника(СтруктураПараметров.Склад, "Склады");					
		ОбъектДок.СкладОрдер = складОрдер;
	КонецЕсли;    	
	
	ИдОснования = ТекстXML.ПолучитьАтрибут("A011");
	
	Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
		
		УстановитьДоговорВДокументе(ОбъектДок);   		
		
		Если ЗначениеЗаполнено(ОбъектДок.ДоговорКонтрагента) Тогда
			ОбъектДок.ВалютаДокумента = ОбъектДок.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ИначеЕсли НЕ ЗначениеЗаполнено(ОбъектДок.ВалютаДокумента) Тогда
			ОбъектДок.ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли; 		
	ИначеЕсли ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		// Ищем договор с поставщиком по тек организации  		
		Отбор     = Новый Структура("Организация", ОбъектДок.Организация);		
		ВыборкаДог = Справочники.ДоговорыКонтрагентов.Выбрать( , ОбъектДок.Контрагент, Отбор);		
		Пока ВыборкаДог.Следующий() Цикл
			ТекДог = ВыборкаДог.Ссылка;
			Если ТекДог.ПометкаУдаления Тогда Продолжить; КонецЕсли;
			Если ТекДог.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
				или ТекДог.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда				
				ОбъектДок.ДоговорКонтрагента = ТекДог;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		Если Не ЗначениеЗаполнено(ОбъектДок.ДоговорКонтрагента) Тогда
			ТекстСообщения = "Не найдено ни одного договора для контрагента: " + СокрЛП(ОбъектДок.Контрагент) + 
							 ". В документе не будет указан договор! Укажите договор вручную или создайте новый!";
			ОповеститьОСобытии(ТекстСообщения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектДок.ДоговорКонтрагента) Тогда
			ОбъектДок.ВалютаДокумента = ОбъектДок.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			ОбъектДок.ТипЦен          = ОбъектДок.ДоговорКонтрагента.ТипЦен;						
		ИначеЕсли НЕ ЗначениеЗаполнено(ОбъектДок.ВалютаДокумента) Тогда
			ОбъектДок.ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли; 		
   			
	КонецЕсли;
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ОбъектДок.ДоговорКонтрагента.ВалютаВзаиморасчетов, ОбъектДок.Дата);		
	ОбъектДок.КурсВзаиморасчетов       = СтруктураКурсаВзаиморасчетов.Курс;	
	ОбъектДок.КратностьВзаиморасчетов  = СтруктураКурсаВзаиморасчетов.Кратность;	
	
	Если Не ОбъектДок.ЭтоНовый() Тогда		
		ОбъектДок.Товары.Очистить();		
		Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
			ОбъектДок.Услуги.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	ОбъектДок.Ответственный = ТекПользователь;
	
	ТекстXML.Прочитать();
	// Заполнение табличной части
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ТекстXML.Прочитать();
		
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "a10221fa-5ac6-4e8c-80d8-d40d8dfc7779" Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
				Количество		 = ТекстXML.ПолучитьАтрибут("A04");
				Цена			 = ТекстXML.ПолучитьАтрибут("A05");
				Сумма			 = Число(ТекстXML.ПолучитьАтрибут("A06"));				
				СуммаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A07"));
				Скидка			 = Число(ТекстXML.ПолучитьАтрибут("A09"));
				СтавкаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A010"));								
				
				ТекНоменклатура  = ПолучитьСсылкуИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекЕдиница       = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "ЕдиницыИзмерения");
				
				Если ТекНоменклатура.Услуга Тогда
					НоваяСтрока = ОбъектДок.Услуги.Добавить();										
					НоваяСтрока.Содержание		     = ТекНоменклатура.НаименованиеПолное;
				Иначе
					
					НоваяСтрока = ОбъектДок.Товары.Добавить();
					НоваяСтрока.ЕдиницаИзмерения 	 = ТекЕдиница;
					НоваяСтрока.Коэффициент 		 = ТекЕдиница.Коэффициент;								
					
					Если НРег(ТекНоменклатура.УникальныйИдентификатор()) <> НРег(ИдХарактеристики) Тогда
						НоваяСтрока.ХарактеристикаНоменклатуры = ПолучитьСсылкуИзСправочника(ИдХарактеристики, 
																							"ХарактеристикиНоменклатуры");
					КонецЕсли; 
					
					Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
						НоваяСтрока.Качество 			 = Справочники.Качество.Новый;
						НоваяСтрока.ПроцентСкидкиНаценки = Скидка;
					КонецЕсли;
					
				КонецЕсли;    				
				
				НоваяСтрока.Номенклатура		 = ТекНоменклатура;				
				НоваяСтрока.Количество           = Количество;
				НоваяСтрока.Цена      			 = Цена;
				НоваяСтрока.Сумма     			 = Сумма;
				НоваяСтрока.СтавкаНДС 		     = ТекНоменклатура.СтавкаНДС;
				НоваяСтрока.СуммаНДС 		     = СуммаНДС;					
				
				// Выполнить общие действия для всех документов при изменении номенклатуры.  
				ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, ОбъектДок);				
				
				// Пересчитываем суммы табличных частей
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ОбъектДок);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ОбъектДок);      
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; 							
	
	Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	
	Если Результат = 2 Тогда
		
		СообщитьОПропускеДокумента(СтруктураПараметров)
		
	КонецЕсли;
	
	// Добавляем запись во вспомогательный список
	ТекСтрока = СписокПоступленийДляЗаписи.Добавить();
	ТекСтрока.Документ 		 = ОбъектДок;
	ТекСтрока.СтруктураДокКПК = СтруктураПараметров;
	ТекСтрока.ЭтоНовыйОбъект  = ЭтоНовыйОбъект;
	ТекСтрока.ИдОснования	 = ИдОснования;
	
КонецПроцедуры // ЗагрузитьДокументПоступление

Процедура ЗагрузитьДокументВозвратТоваров(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)

	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ИдФирмы, Комментарий," + 
										  "Широта, Долгота, СуммаДокумента,Склад," + 
										  "Категория, СпособСоздания, ИдКлиента, ИдТоргТочки, ИдДоговора");	
										  
	КатегорияСсылка 	 = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A010"), "кпкКатегорииДокументов");
										  
	СтруктураПараметров.ВидДокумента       = ОбъектДок.Метаданные().Имя;	
	СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    		
	СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");	
	СтруктураПараметров.ИдКлиента 	   	   = ТекстXML.ПолучитьАтрибут("A02");	
	СтруктураПараметров.ИдТоргТочки	   	   = ТекстXML.ПолучитьАтрибут("A03");	
	СтруктураПараметров.ИдДоговора	   	   = ТекстXML.ПолучитьАтрибут("A04");
	СтруктураПараметров.СуммаДокумента	   = ТекстXML.ПолучитьАтрибут("A07");		
	СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A09");		
	СтруктураПараметров.Категория 	       = КатегорияСсылка;		
	СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A013");
	СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A014");		
	СтруктураПараметров.Склад	    	   = ТекстXML.ПолучитьАтрибут("A016");		
	СтруктураПараметров.СпособСоздания 	   = "User";
	
	ПредставлениеДокВКПК = СтруктураПараметров.ВидДокумента + " № " + 
						   СтруктураПараметров.Номер + " от " + СтруктураПараметров.Дата;
	
	Менеджер = Документы[СтруктураПараметров.ВидДокумента];
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ДоговорКонтрагента");	
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "");	
	
	ОбъектДок.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	
	// Получаем склад-ордер из документа
	Если ЭтоПустойИдентификатор(СтруктураПараметров.Склад) Тогда			
		ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указан склад!", СтатусСообщения.Внимание);      
	Иначе		
		складОрдер = ПолучитьСсылкуИзСправочника(СтруктураПараметров.Склад, "Склады");					
		ОбъектДок.СкладОрдер = складОрдер;
	КонецЕсли;    	
	
	ИдОснования = ТекстXML.ПолучитьАтрибут("A011");
			
	УстановитьДоговорВДокументе(ОбъектДок);   		
	
	ЗаполнитьЗначенияСвойств(ОбъектДок, ОбъектДок.ЗаполнитьСтруктуруСчетовУчетаШапки());
	
	Если ЗначениеЗаполнено(ОбъектДок.ДоговорКонтрагента) Тогда
		ОбъектДок.ВалютаДокумента = ОбъектДок.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ИначеЕсли НЕ ЗначениеЗаполнено(ОбъектДок.ВалютаДокумента) Тогда
		ОбъектДок.ВалютаДокумента = мВалютаРегламентированногоУчета;
	КонецЕсли; 		
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ОбъектДок.ДоговорКонтрагента.ВалютаВзаиморасчетов, ОбъектДок.Дата);		
	ОбъектДок.КурсВзаиморасчетов       = СтруктураКурсаВзаиморасчетов.Курс;	
	ОбъектДок.КратностьВзаиморасчетов  = СтруктураКурсаВзаиморасчетов.Кратность;	
	
	Если Не ОбъектДок.ЭтоНовый() Тогда		
		ОбъектДок.Товары.Очистить();		
	КонецЕсли;
	
	ОбъектДок.Ответственный = ТекПользователь;
	
	ТекстXML.Прочитать();
	// Заполнение табличной части
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ТекстXML.Прочитать();
		
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "235dc1ea-5963-4dcd-95e1-e8cef487a2ae" Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
				Количество		 = ТекстXML.ПолучитьАтрибут("A04");
				Цена			 = ТекстXML.ПолучитьАтрибут("A05");
				Сумма			 = Число(ТекстXML.ПолучитьАтрибут("A06"));				
				СуммаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A07"));
				Скидка			 = Число(ТекстXML.ПолучитьАтрибут("A09"));
				СтавкаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A010"));								
				
				ТекНоменклатура  = ПолучитьСсылкуИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекЕдиница       = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "ЕдиницыИзмерения");
				
				Если ТекНоменклатура.Услуга Тогда
					НоваяСтрока = ОбъектДок.Услуги.Добавить();										
					НоваяСтрока.Содержание		     = ТекНоменклатура.НаименованиеПолное;
				Иначе
					
					НоваяСтрока = ОбъектДок.Товары.Добавить();
					НоваяСтрока.ЕдиницаИзмерения 	 = ТекЕдиница;
					НоваяСтрока.Коэффициент 		 = ТекЕдиница.Коэффициент;								
					
					Если НРег(ТекНоменклатура.УникальныйИдентификатор()) <> НРег(ИдХарактеристики) Тогда
						НоваяСтрока.ХарактеристикаНоменклатуры = ПолучитьСсылкуИзСправочника(ИдХарактеристики, 
																							"ХарактеристикиНоменклатуры");
					КонецЕсли; 
					
					НоваяСтрока.Качество 			 = Справочники.Качество.Новый;
					НоваяСтрока.ПроцентСкидкиНаценки = Скидка;
					
				КонецЕсли;    				
				
				НоваяСтрока.Номенклатура		 = ТекНоменклатура;				
				НоваяСтрока.Количество           = Количество;
				НоваяСтрока.Цена      			 = Цена;
				НоваяСтрока.Сумма     			 = Сумма;
				НоваяСтрока.СтавкаНДС 		     = ТекНоменклатура.СтавкаНДС;
				НоваяСтрока.СуммаНДС 		     = СуммаНДС;					
				
				// Выполнить общие действия для всех документов при изменении номенклатуры.  
				ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, ОбъектДок);				
				
				ОбъектДок.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Истина);
				
				// Пересчитываем суммы табличных частей
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ОбъектДок);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ОбъектДок);      
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; 							
	
	Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	
	Если Результат = 2 Тогда
		
		СообщитьОПропускеДокумента(СтруктураПараметров)
		
	КонецЕсли;
	
	// Добавляем запись во вспомогательный список
	ТекСтрока = СписокПоступленийДляЗаписи.Добавить();
	ТекСтрока.Документ 		 = ОбъектДок;
	ТекСтрока.СтруктураДокКПК = СтруктураПараметров;
	ТекСтрока.ЭтоНовыйОбъект  = ЭтоНовыйОбъект;
	ТекСтрока.ИдОснования	 = ИдОснования;
	
КонецПроцедуры // ЗагрузитьДокументВозвратТоваров

Процедура ЗакончитьЗагрузкуОрдеровИПоступлений()
	
	СписокОснованийДляОрдера = Новый СписокЗначений;
	
	Для Каждого СтрокаОрдера Из СписокОрдеровДляЗаписи Цикл
		
		ОбъектДок    = СтрокаОрдера.Документ;
		ТипОбъектДок = ТипЗнч(ОбъектДок);
		
		Если ТипОбъектДок = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
			СписокОснованийДляОрдера.Добавить("ЗаказПокупателя");
			СписокОснованийДляОрдера.Добавить("РеализацияТоваровУслуг");
			СтрокаПлатеж = ОбъектДок.РасшифровкаПлатежа[0];
		ИначеЕсли ТипОбъектДок = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
			СписокОснованийДляОрдера.Добавить("ВозвратТоваровОтПокупателя");
			СписокОснованийДляОрдера.Добавить("ПоступлениеТоваровУслуг");
    // HVOYA Belya 29.08.2012 15:31:59 Begin			
		//ИначеЕсли ТипОбъектДок = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		ИначеЕсли ТипОбъектДок = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
    // HVOYA Belya 29.08.2012 15:32:49 End		
			СписокОснованийДляОрдера.Добавить("РеализацияТоваровУслуг");
		КонецЕсли; 	                                                     		
		
		Для Каждого ТекВидОснования Из СписокОснованийДляОрдера Цикл
			ДокОснования = ПолучитьСсылкуИзДокумента(СтрокаОрдера.ИдОснования, ТекВидОснования.Значение);
			Если ЗначениеЗаполнено(ДокОснования) Тогда
				ОбъектОснования = ДокОснования.ПолучитьОбъект();
    // HVOYA Belya 29.08.2012 15:33:03 Begin				
				//Если ТипОбъектДок = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
				Если ТипОбъектДок = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
    // HVOYA Belya 29.08.2012 15:33:44 End					
					ОбъектДок.ДокументыОснования.Очистить();
					ОбъектДок.Заполнить(ДокОснования);
				Иначе
					Если ОбъектОснования <> Неопределено Тогда				
						
						МетаданныеДокумента = ОбъектОснования.Ссылка.Метаданные();
						
						Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента) Тогда
							СтрокаПлатеж.Сделка = ОбъектОснования.Ссылка.Сделка;						
						Иначе
							СтрокаПлатеж.Сделка = ОбъектОснования.Ссылка;						
						КонецЕсли;
						
						ОбъектДок.ДокументОснование = ОбъектОснования.Ссылка;										
						Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда		 
							СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ОбъектОснования.Ссылка;	
						КонецЕсли;
						
						Прервать;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
				
		Результат = ЗаписьДокумента(ОбъектДок, СтрокаОрдера.СтруктураДокКПК, СтрокаОрдера.ЭтоНовыйОбъект);
		
		Если Результат = 2 Тогда
		
			СообщитьОПропускеДокумента(СтрокаОрдера.СтруктураДокКПК)
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокОрдеровДляЗаписи.Очистить();
	
	СписокОснованийДляПоступлений = Новый СписокЗначений;	
	Для Каждого ТекСтрока Из СписокПоступленийДляЗаписи Цикл
		
		ОбъектДок    = ТекСтрока.Документ;		
		
		Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
			СписокОснованийДляПоступлений.Добавить("ЗаказПокупателя");
			СписокОснованийДляПоступлений.Добавить("РеализацияТоваровУслуг");
		ИначеЕсли ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
			СписокОснованийДляПоступлений.Добавить("ЗаказПокупателя");
		КонецЕсли; 	                                                     		
		
		Для Каждого ТекВидОснования Из СписокОснованийДляПоступлений Цикл
			ДокОснования = ПолучитьСсылкуИзДокумента(ТекСтрока.ИдОснования, ТекВидОснования.Значение);
			Если ЗначениеЗаполнено(ДокОснования) Тогда
				ОбъектОснования = ДокОснования.ПолучитьОбъект();
				Если ОбъектОснования <> Неопределено Тогда									
					ОбъектДок.Сделка = ОбъектОснования.Ссылка;					
					Прервать;					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
				
		Результат = ЗаписьДокумента(ОбъектДок, ТекСтрока.СтруктураДокКПК, ТекСтрока.ЭтоНовыйОбъект);
		
		Если Результат = 2 Тогда
		
			СообщитьОПропускеДокумента(ТекСтрока.СтруктураДокКПК)
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокПоступленийДляЗаписи.Очистить();
	
КонецПроцедуры //ЗакончитьЗагрузкуОрдеровИПоступлений

// Процедура проверяет корректность номера документа для выгрузки. В номере документа недопустимо
// наличие пробелов в конце.
// Параметры
//  <СтруктураПолей>  - <Тип.Структура> - структура полей документа, которую добавляется реквизит номера
//
//  <НомерДокумента>  - <Тип.Строка> - номер документа который проверяется
//
//  <СсылкаДокумента> - <Тип.ДокументСсылка> - ссылка которая покажет пользователю где проблема
Процедура ВставитьНомерДокументаВСтруктуру(СтруктураПолей, Док)

	НомерДокумента = Док.Номер;
	
	НомерДляXML = НомерДокумента;
	// Проверка на пробелы в конце номера
	Если Прав(НомерДокумента, 1) = " " Или Прав(НомерДокумента, 1) = Символы.НПП Тогда
		
		НомерДляXML = СокрП(НомерДляXML);
		ОповеститьОСобытии("В номере документа '" + Строка(Док) + "' сокращены конечные пробелы.", СтатусСообщения.Важное, Истина, Док);
		
	КонецЕсли;
	
	// Проверка последнего элемента номера
	СписокЦифр = "0123456789";
	ПоследнийЭлемент = Прав(НомерДляXML, 1);
	Если Найти(СписокЦифр, ПоследнийЭлемент) = 0 Тогда
		ОповеститьОСобытии("В номере документа '" + Строка(Док) + "' последний символ не цифра.", СтатусСообщения.Важное, Истина, Док);
	КонецЕсли;
	
	СтруктураПолей.Вставить("DocNumber", НомерДляXML);

КонецПроцедуры // ВставитьНомерДокументаВСтруктуру


////////////////////////////////////////////////////////////////////////////////
//
// Функция ПроверитьВремяСоздания
//
// Описание:
//
//

Функция ПроверитьВремяСоздания()
    
КонецФункции //ПроверитьВремяСоздания

 
////////////////////////////////////////////////////////
//////////////////////////////////////////////////////// 

#Если Клиент Тогда
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;	
#ИначеЕсли Сервер Тогда
	ТекПользователь = Константы.кпкПользовательДляФоновогоРежима.Получить();	
#КонецЕсли
	
сзАссортимент 		= Новый СписокЗначений; 
сзДопТовары 	    = Новый СписокЗначений;
сзКлиентыАгента     = Новый СписокЗначений;
сзТоргТочкиАгента   = Новый СписокЗначений;
сзСклады	 		= Новый СписокЗначений; 

ТаблицаДоговоровАгента    = Новый ТаблицаЗначений;
ТаблицаДоговоровАгента.Колонки.Добавить("Контрагент");
ТаблицаДоговоровАгента.Колонки.Добавить("Договор");

СписокЕдиницИзмерения = Новый Соответствие;

ЛогОбмена = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
ЛогОбмена.Пользователь 		    = ТекПользователь;
ЛогОбмена.ИмяОбъекта  		    = ЭтотОбъект.Метаданные().Имя;
ЛогОбмена.НаименованиеНастройки = Строка(Формат(ТекущаяДата(), "ДФ=yyyy.MM.dd"));
ЛогОбмена.Прочитать();

Если ЛогОбмена.Выбран() Тогда
	ТаблицаЛогов = ЛогОбмена.СохраненнаяНастройка.Получить();
Иначе 	
	МассивСсылок = Новый Массив;
	Для Каждого ТекСправочник Из Метаданные.Справочники Цикл
		МассивСсылок.Добавить(Тип("СправочникСсылка." + ТекСправочник.Имя));
	КонецЦикла;
	
	Для Каждого ТекДокумент Из Метаданные.Документы Цикл
		МассивСсылок.Добавить(Тип("ДокументСсылка." + ТекДокумент.Имя));
	КонецЦикла;
	
	КСТ = Новый КвалификаторыСтроки(50);
	КДД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	КСС = Новый КвалификаторыСтроки(0);
	КСП = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	КСА = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	КМС = Новый ОписаниеТипов(МассивСсылок);
	
	ТаблицаЛогов = Новый ТаблицаЗначений;
	ТаблицаЛогов.Колонки.Добавить("ТипСобытия", Новый ОписаниеТипов("Строка", , , , КСТ, ), "Тип события");
	ТаблицаЛогов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , , КДД, , ));
	ТаблицаЛогов.Колонки.Добавить("Событие", Новый ОписаниеТипов("Строка", , , , КСС, ));
	ТаблицаЛогов.Колонки.Добавить("Пользователь", Новый ОписаниеТипов(КСП, , , , , ));
	ТаблицаЛогов.Колонки.Добавить("Агент", Новый ОписаниеТипов(КСА, , , , , ));
	ТаблицаЛогов.Колонки.Добавить("СсылкаНаОбъект", Новый ОписаниеТипов(КМС, , , , , ), "Ссылка на объект");
КонецЕсли;        

ТДопКлиенты = Новый ТаблицаЗначений;
ТДопКлиенты.Колонки.Добавить("Клиент");
ТДопКлиенты.Колонки.Добавить("Должник");
ТДопКлиенты.Колонки.Добавить("ТоргТочка");

тзОписаниеКартинок = Новый ТаблицаЗначений;
тзОписаниеКартинок.Колонки.Добавить("ИДТовара");
тзОписаниеКартинок.Колонки.Добавить("Картинка");
тзОписаниеКартинок.Колонки.Добавить("Наименование");
тзОписаниеКартинок.Колонки.Добавить("Описание");

тзКатегорииЦен = Новый ТаблицаЗначений;
тзКатегорииЦен.Колонки.Добавить("ТипыЦен");	
тзКатегорииЦен.Колонки.Добавить("Код");	
                                                    
КоличествоПопыток   = 5;   
ПаузаМеждуПопытками = 10;  

ОтветитьНаЗапрос = Ложь;

Т_ = Символы.Таб;

ИспТочек 			  			= Константы.кпкРежимТоргТочек.Получить();
ИспЕдИзм 			 		 	= Не Константы.кпкИспользоватьЕдИзм.Получить();
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
КурсВалютыРегУчета 				= 1;
КратностьВалютыРегУчета 		= 1;  

#Если Не Клиент Тогда
	
	Попытка
		КПКОбъектServer = Новый COMОбъект("AgentPlus.ApServer");
		КПКОбъектZip 	= Новый COMОбъект("AgentPlus.Zip");		
		КПКОбъектCrypto = Новый COMОбъект("AgentPlus.Crypto");			
	Исключение
		ТекстСообщения = "Не удалось создать объекты внешней компоненты APPlusCOM.dll. Причина: " + ОписаниеОшибки() + 
						 ". Возможно компонента APPlusCOM.dll не зарегистрирована на сервере";
						 
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , "Загрузка объектов внешней компоненты");
		ОповеститьОСобытии(ТекстСообщения);
		СохранитьТаблицуЛогаВНастройкахПользователя();
	КонецПопытки;  	
	
	ТекПользователь = Константы.кпкПользовательДляФоновогоРежима.Получить();
	Если Не ЗначениеЗаполнено(ТекПользователь) Тогда 		
		ТекстСообщения = "На заполнено значение константы ""Пользователь для фонового режима""! Выполнение команд будет производиться от имени пустого пользователя!";						 		
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , "Выполнение команд в фоновом режиме");
		ОповеститьОСобытии(ТекстСообщения);
		СохранитьТаблицуЛогаВНастройкахПользователя();		
	КонецЕсли;
	
#КонецЕсли

СоответствиеСпрЗагр = Новый Соответствие();

СоответствиеСпрЗагр.Вставить("9450980f-fb59-47e3-bae2-aa3c58441b1a", "Контрагенты");	
СоответствиеСпрЗагр.Вставить("735a9ce5-dcc1-4d1a-8f8d-643a50a6befc", "ДоговорыКонтрагентов");
СоответствиеСпрЗагр.Вставить("d3dbb02e-681e-4fc2-ad0e-8ef1234e9f48", "кпкТорговыеТочки");
СоответствиеСпрЗагр.Вставить("cf387a58-4655-41b5-a460-85884d1f20d0", "КонтактныеЛицаКонтрагентов");     	
СоответствиеСпрЗагр.Вставить("85b62882-0156-4881-85ba-b8fef05c867b", "КонтактнаяИнформация");
СоответствиеСпрЗагр.Вставить("05ea7926-febb-4d82-97fc-19294dd5dd29", "кпкФотоКДокументам");
СоответствиеСпрЗагр.Вставить("e01cf3a3-6765-4fd3-801c-ccdbf85c78fc", "ХранилищеДополнительнойИнформации");
СоответствиеСпрЗагр.Вставить("d6d52ada-0f38-4112-af3c-2f1e425a43d1", "Номенклатура");
СоответствиеСпрЗагр.Вставить("80452c60-b442-4da9-a048-42f63270ca14", "ЕдиницыИзмерения");

СоответствиеДокЗагр = Новый Соответствие();

СоответствиеДокЗагр.Вставить("e01e1f5c-d6e4-46e8-b923-3758b0d79bde", "ЗаказПокупателя");
СоответствиеДокЗагр.Вставить("749be2e0-9b00-4d7b-9d4d-88ca53327511", "ПриходныйКассовыйОрдер");
СоответствиеДокЗагр.Вставить("3890d435-96ba-4481-abc0-23782e15b32f", "РасходныйКассовыйОрдер");
СоответствиеДокЗагр.Вставить("61dee5fe-d0a8-4842-a6af-a8d33f298845", "кпкМерчендайзинг");
СоответствиеДокЗагр.Вставить("9f147c59-5ee8-4550-8289-12ecfe5d0617", "кпкПосещение");
СоответствиеДокЗагр.Вставить("77525c87-cb2f-405e-a92e-6f373edeece7", "ПеремещениеТоваров");
СоответствиеДокЗагр.Вставить("7ffb418c-73c9-4883-91c5-827fa5145a3a", "РеализацияТоваровУслуг");
СоответствиеДокЗагр.Вставить("c9850d61-bc15-445a-8b1a-e328cc45ddae", "ПоступлениеТоваровУслуг");
СоответствиеДокЗагр.Вставить("4971b041-beab-4fa6-b1e8-10138f04fe44", "ВозвратТоваровОтПокупателя");
СоответствиеДокЗагр.Вставить("d7d70de1-4f98-4153-82f1-12c84ebf81a5", "СчетФактураВыданный");

СписокОрдеровДляЗаписи = Новый ТаблицаЗначений;
СписокОрдеровДляЗаписи.Колонки.Добавить("Документ");
СписокОрдеровДляЗаписи.Колонки.Добавить("СтруктураДокКПК");
СписокОрдеровДляЗаписи.Колонки.Добавить("ЭтоНовыйОбъект");
СписокОрдеровДляЗаписи.Колонки.Добавить("ИдОснования");

СписокПоступленийДляЗаписи = Новый ТаблицаЗначений;
СписокПоступленийДляЗаписи.Колонки.Добавить("Документ");
СписокПоступленийДляЗаписи.Колонки.Добавить("СтруктураДокКПК");
СписокПоступленийДляЗаписи.Колонки.Добавить("ЭтоНовыйОбъект");
СписокПоступленийДляЗаписи.Колонки.Добавить("ИдОснования");

СведенияАгента = Новый Структура;

СписНеНайденныхТиповЦен = Новый СписокЗначений;

СписЗагруженныхОбъектовСпр = Новый СписокЗначений;

ТабЗагруженныхФото = Новый ТаблицаЗначений;
ТабЗагруженныхФото.Колонки.Добавить("Ссылка");
ТабЗагруженныхФото.Колонки.Добавить("ИдФото"); 			

ПутьКФайлуЗапуска15 = "\Program Files\AgentPlus\AgentP\AgentPlus.exe";
ПутьКФайлуЗапуска20 = "\Program Files\AgentP2\aplbrs.exe";

ПапкаОбмена15 	    = "\My Documents\Personal\";
ПапкаОбмена20 		= "\Program Files\AgentP2\exchange";

ТипАгент15 	        = Перечисления.кпкТипыМобильныхПриложений.АгентПлюс;
ТипАгентМТ 			= Перечисления.кпкТипыМобильныхПриложений.АгентПлюсМобильнаяТорговля;

КолФотоМТ = 0;

лИмяФормыКонстант = "Настройка параметров работы с мобильным приложением";

//////////////////////////////////////////////////////////////////////////////////////
// Версия обработки для типовой конфигурации "Управление торговлей" следующих версий:
// 10.3.11.4, 10.3.12.1, 10.3.12.3, 10.3.13.2    
//////////////////////////////////////////////////////////////////////////////////////