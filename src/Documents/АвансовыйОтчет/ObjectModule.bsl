Перем мУдалятьДвижения;


Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;
Перем БалансовыйКурсВалюты;
Перем мПорядокСписанияПартий; // (Общ)

Перем мУказаниеПроектовВТабличнойЧастиДокументов Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

Перем СписокСтатейСуточные;

Перем УчетнаяПолитикаРегл;
Перем ПревышенБюджет Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// По выбранному физлицу и организации получает должность и подразделение физлица в организации на дату документа
// 
// Параметры:
// 
//  Физлицо 		- ссылка на справочник физлиц
// 	Организация 	- ссылка на справочник организаций
//  ДолжностьФЛ 	- в эту переменную возвращается должность Физлицо в Организация
// 	ПодразделениеФЛ - в эту переменную возвращается подразделение Физлицо в Организация
//
Процедура СведенияПоФизЛицу(Физлицо, Организация, ДолжностьФЛ, ПодразделениеФЛ) 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Должность.Представление КАК Должность,
	|	РаботникиОрганизации.ПодразделениеОрганизации.Представление КАК Подразделение
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДок
	|		,Сотрудник.Физлицо = &Физлицо И Организация = &Организация) КАК РаботникиОрганизации";
	

	Запрос.УстановитьПараметр("ДатаДок", Дата);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ДолжностьФЛ = "";
		ПодразделениеФЛ = "";
		Возврат;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДолжностьФЛ = Выборка.Должность;
		ПодразделениеФЛ = Выборка.Подразделение;
		Возврат;
	КонецЕсли;
КонецПроцедуры

// По сумме и валюте возвращает краткую сумму для вывода в отчетах (грн, 43.09 -> "43 Грн. 09 коп.") 
// Параметры прописи - всегда на украинском, строка вида "коп." с параметров прописи и всегда обрезается до 3-х символов
// 
// Параметры:
//
//  СуммаДок	– сумма в валюте 
//  ВалютаДок	– ссылка на справочник Валюты
//
// Возвращаемое значение:
//
//   Строка 	
// 
Функция СформироватьСуммуКратко(СуммаДок, ВалютаДок)
	
	
	Рез = Цел(СуммаДок);
	Если Рез = 0 Тогда
		Рез = "0 " + СокрЛП(ВалютаДок.Наименование);
	Иначе
		Рез = Строка(Рез) + " " + СокрЛП(ВалютаДок.Наименование);
	КонецЕсли; 
	
	// получим представление копеек
	
	СтрокаПараметров = СтрЗаменить(ВалютаДок.ПараметрыПрописиНаУкраинском, ",", Символы.ПС);
	ПредставлениеКоп = СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 5));
	
	// для всех валют будем брать 3 первых символа и добавлять "."
	ПредставлениеКоп = Сред(ПредставлениеКоп, 1, 3) + ".";
	
	Копеек = (СуммаДок - Цел(СуммаДок)) * 100;
	// округлим до целого, СуммаДок может быть больше чем с 2 знаками
	Копеек = Окр(Копеек, 0);
	
	РезКоп = "";
	Если Копеек = 0 Тогда
		РезКоп = "00 " + ПредставлениеКоп;
	ИначеЕсли Копеек < 10 Тогда
		РезКоп = "0" + Строка(Копеек) + " " + ПредставлениеКоп;
	Иначе
		РезКоп = Строка(Копеек) + " " + ПредставлениеКоп;
	КонецЕсли; 
	
	Рез = Рез + " " + РезКоп;
	
	Возврат Рез;
	

КонецФункции // СформироватьСуммуКратко()


// Функция формирует табличный документ с печатной формой авансового отчета
//
// Возвращаемое значение:
//  Табличный документ - печатная форма авансового отчета
//
Функция ПечатьАвансовогоОтчета()
	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаПринятия = Дата("20110128000000");
	ВариантДо01012011 = Дата < ДатаПринятия;
	Если ВариантДо01012011 Тогда
		Макет       = ПолучитьМакет("АвансовыйОтчет");
	Иначе
		Макет       = ПолучитьМакет("АвансовыйОтчет01012011");
	КонецЕсли;
	
	// Запрос по Шапке.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата                  КАК ДатаДокумента,
	|	ФизЛицо               КАК ПодотчетноеЛицо,
	|	ФизЛицо.ИНН			  КАК ИННПодотчетногоЛица,
	|   Организация.ЮрФизЛицо КАК ОрганизацияЮрФизЛицо,
	|	НазначениеАванса      КАК НазначениеАванса,  		
	|	Организация           КАК Руководители,
	|	Организация.Ссылка    КАК Организация,
	|	Подразделение,
	|	Подразделение.Представление КАК ПредставлениеПодразделения,
	|	Подразделение.Код КАК КодПодразделения,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ВалютаДокумента,
	|	КурсДокумента,
	|	КратностьДокумента,
	|	ВалютаДокумента.Представление       КАК ПредставлениеВалютыДокумента,
	|	СуммаДокумента                      КАК СуммаДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	// Запрос по Авансам.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
    Запрос.УстановитьПараметр("Валюта"     , ВалютаДокумента);
	Запрос.УстановитьПараметр("ФизЛицо"    , ФизЛицо);
	Запрос.УстановитьПараметр("ДатаОстатка", Новый Граница(Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация"    , Организация);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	0 КАК ПолученоПоБанковскимКартам,	
	|	ЕстьNULL(РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов,0) КАК ПолученоИзКассы,
	|   ЕстьNULL(ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток,0) КАК ОстатокЗадолженности
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|		ПО АвансовыйОтчетВыданныеАвансы.ДокументАванса = РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ДатаОстатка, Валюта = &Валюта И ФизЛицо = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент = РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка 
	|
	|ГДЕ
	|	АвансовыйОтчетВыданныеАвансы.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕстьNULL(ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаВзаиморасчетов,0) КАК ПолученоПоБанковскимКартам,	
	|	0 КАК ПолученоИзКассы,
	|   ЕстьNULL(ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток,0) КАК ОстатокЗадолженности
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	|		ПО АвансовыйОтчетВыданныеАвансы.ДокументАванса = ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ДатаОстатка, Валюта = &Валюта И ФизЛицо = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент = ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка 
	|
	|ГДЕ
	|	АвансовыйОтчетВыданныеАвансы.Ссылка = &ТекущийДокумент
	|
	|"; 
	
	Если ОтражатьВБухгалтерскомУчете и НЕ ОтражатьВУправленческомУчете Тогда
		Если НЕ (Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
			Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
		Иначе
			Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
		КонецЕсли;
		Запрос.УстановитьПараметр("Организация", Шапка.Организация);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаДокумента КАК ВалютаРКО,
		|	ЕстьNULL(РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов,0) КАК ПолученоИзКассы,
		|	0 КАК ПолученоПоБанковскимКартам,	
		|	ЕстьNULL(РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СуммаДокумента,0) КАК СуммаАванса,	
		|	ЕстьNULL(РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов,0) КАК СуммаВзаиморасчетов,
		|   ЕстьNULL(ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстатокДт,0) КАК ОстатокЗадолженности
		|ИЗ
		|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		|		ПО АвансовыйОтчетВыданныеАвансы.ДокументАванса = РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
		|
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатка, Счет В ИЕРАРХИИ (&СчетРасчетов), , Организация = &Организация И Субконто1 = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	    |		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Организация = РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.Организация 
		|
		|ГДЕ
		|	АвансовыйОтчетВыданныеАвансы.Ссылка = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВалютаДокумента КАК ВалютаРКО,
		|	0 КАК ПолученоИзКассы,
		|	ЕстьNULL(ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаВзаиморасчетов,0) КАК ПолученоПоБанковскимКартам,
		|	ЕстьNULL(ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.СуммаДокумента,0) КАК СуммаАванса,	
		|	ЕстьNULL(ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаВзаиморасчетов,0) КАК СуммаВзаиморасчетов,
		|   ЕстьNULL(ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстатокДт,0) КАК ОстатокЗадолженности
		|ИЗ
		|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|		ПО АвансовыйОтчетВыданныеАвансы.ДокументАванса = ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка
		|
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатка, Счет В ИЕРАРХИИ (&СчетРасчетов), , Организация = &Организация И Субконто1 = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	    |		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Организация = ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента.Организация 
		|
		|ГДЕ
		|	АвансовыйОтчетВыданныеАвансы.Ссылка = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВалютаДокумента КАК ВалютаРКО,
		|	0 КАК ПолученоИзКассы,
		|	0 КАК ПолученоПоБанковскимКартам,	
		|	ЕстьNULL(ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.СуммаДокумента,0) КАК СуммаАванса,	
		|	ЕстьNULL(ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.СуммаВзаиморасчетов,0) КАК СуммаВзаиморасчетов,
		|   ЕстьNULL(ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстатокДт,0) КАК ОстатокЗадолженности
		|ИЗ
		|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа
		|		ПО АвансовыйОтчетВыданныеАвансы.ДокументАванса = ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка
		|
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатка, Счет В ИЕРАРХИИ (&СчетРасчетов), , Организация = &Организация И Субконто1 = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	    |		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Организация = ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.ДоговорКонтрагента.Организация 
		|
		|ГДЕ
		|	АвансовыйОтчетВыданныеАвансы.Ссылка = &ТекущийДокумент
		|"; 
	КонецЕсли;

	ВыборкаАвансы = Запрос.Выполнить().Выбрать();

	ТабДокумент  = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АвансовыйОтчет";
	

	// ТИТУЛЬНЫЙ ЛИСТ

	// Надо получить все ненулевые остатки регистра по этому подотчетнику и этой валюте (взаиморасчетов),
	// которые возникли до данного авансового отчета,
	// при этом курс и кратность взаиморасчетов надо брать из расчетного документа.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Валюта"     , ВалютаДокумента);
	Запрос.УстановитьПараметр("ФизЛицо"    , ФизЛицо);
	Запрос.УстановитьПараметр("ДатаОстатка", Дата);
	Запрос.УстановитьПараметр("Проведен", ИСТИНА);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КурсВзаиморасчетов ЕСТЬ NULL ТОГДА 1
	|		ИНАЧЕ ВложенныйЗапрос.КурсВзаиморасчетов
	|	КОНЕЦ КАК КурсВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КратностьВзаиморасчетов ЕСТЬ NULL ТОГДА 1
	|		ИНАЧЕ ВложенныйЗапрос.КратностьВзаиморасчетов
	|	КОНЕЦ КАК КратностьВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ДатаОстатка, Валюта = &Валюта И ФизЛицо = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			АвансовыйОтчет.Ссылка КАК РасчетныйДокумент,
	|			АвансовыйОтчет.КурсДокумента КАК КурсВзаиморасчетов,
	|			АвансовыйОтчет.КратностьДокумента КАК КратностьВзаиморасчетов
	|		ИЗ
	|			Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|
	|		ГДЕ
	|			АвансовыйОтчет.Организация = &Организация И
	|			АвансовыйОтчет.ВалютаДокумента = &Валюта И
	|			АвансовыйОтчет.ФизЛицо = &ФизЛицо И
	|			АвансовыйОтчет.Дата <= &ДатаОстатка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов,
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов
	|		ИЗ
	|			Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|
	|		ГДЕ
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = &Организация И
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаВзаиморасчетовПодотчетника = &Валюта И
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Контрагент = &ФизЛицо И
	|			ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата <= &ДатаОстатка
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка,
	|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КурсВзаиморасчетов,
	|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КратностьВзаиморасчетов
	|		ИЗ
	|			Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	|
	|		ГДЕ
	//|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВидОперации = &ВидОперацииПП И
	|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Организация = &Организация И
	|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &Валюта И
	|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ФизЛицо = &ФизЛицо И
	|			ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата <= &ДатаОстатка
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка,
	|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.КурсВзаиморасчетов,
	|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.КратностьВзаиморасчетов
	|		ИЗ
	|			Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа
	|
	|		ГДЕ
	//|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВидОперации = &ВидОперацииПО И
	|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.Организация = &Организация И
	|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ВалютаДокумента = &Валюта И
	|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ФизЛицо = &ФизЛицо И
	|			ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.Дата <= &ДатаОстатка
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов,
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов
	|		ИЗ
	|			Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|
	|		ГДЕ
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = &Организация И
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВалютаВзаиморасчетовРаботника = &Валюта И
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Контрагент = &ФизЛицо И
	|			РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата <= &ДатаОстатка) КАК ВложенныйЗапрос
	|
	|		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент = ВложенныйЗапрос.РасчетныйДокумент
	|
	|	ГДЕ
	|		ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент.Организация = &Организация
	|";
	Если ОтражатьВБухгалтерскомУчете и НЕ ОтражатьВУправленческомУчете Тогда
	
		Если НЕ (Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
			Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
		Иначе
			Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
		КонецЕсли;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстатокДт - ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстатокКт КАК СуммаВзаиморасчетов,
		|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстатокКт КАК СуммаВзаиморасчетовКт,
		|	&Валюта КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатка, Счет В ИЕРАРХИИ (&СчетРасчетов), , Организация = &Организация И Субконто1 = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
		|";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидОперацииПП"    , Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику);
	Запрос.УстановитьПараметр("ВидОперацииПО"    , Перечисления.ВидыОперацийПлатежныйОрдерСписание.ПеречислениеДенежныхСредствПодотчетнику);

	ПредыдущийАванс = Запрос.Выполнить().Выбрать();

	СуммаДоДокумента = 0;
	Пока ПредыдущийАванс.Следующий() Цикл
		
		СуммаДоДокумента = СуммаДоДокумента + ПредыдущийАванс.СуммаВзаиморасчетов; 
		
	КонецЦикла;

	// теперь отнимем сумму расходных ордеров в первой вкладке
	ПолученоИзКассы    = 0;

	Пока ВыборкаАвансы.Следующий() Цикл
		
		Если ВыборкаАвансы.ПолученоИзКассы + ВыборкаАвансы.ПолученоПоБанковскимКартам > ВыборкаАвансы.ОстатокЗадолженности Тогда
			Продолжить;
		КонецЕсли;
					
		ПолученоИзКассы = ПолученоИзКассы + ВыборкаАвансы.ПолученоИзКассы + ВыборкаАвансы.ПолученоПоБанковскимКартам;
	
	КонецЦикла;

	Если СуммаДоДокумента >= 0 Тогда
		СуммаДоДокумента = СуммаДоДокумента - ПолученоИзКассы;
	Иначе
		СуммаДоДокумента = СуммаДоДокумента + ПолученоИзКассы;
	КонецЕсли;

	// Выводим титульный лист авансового отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ДанныеСотрудника = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация, Шапка.ПодотчетноеЛицо, Шапка.ДатаДокумента);
	
	ПредставлениеПодотчетногоЛица = ДанныеСотрудника.Фамилия + " " + ДанныеСотрудника.Имя + " " + ДанныеСотрудника.Отчество;
	ОбластьМакета.Параметры.ФИОПодотчетногоЛица = СокрЛП(ПредставлениеПодотчетногоЛица);
	Если НЕ ВариантДо01012011 Тогда
		ОбластьМакета.Параметры.ФИОПодотчетногоЛицаКратко = ДанныеСотрудника.Представление;
	КонецЕсли;	
	ДанныеСотрудника = 0;
	ОбластьМакета.Параметры.НомерДокумента                = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	
	Если СуммаДоДокумента >= 0 тогда
		ОбластьМакета.Параметры.НачальныйОстаток    =   СуммаДоДокумента;
	Иначе
		ОбластьМакета.Параметры.НачальныйПерерасход = - СуммаДоДокумента;
	КонецЕсли;
	
	ОбластьМакета.Параметры.ИтогВсегоПолучено = ПолученоИзКассы;
	ОбластьМакета.Параметры.Израсходовано = Шапка.СуммаДокумента;

	ОстатокНаКонец = СуммаДоДокумента + ПолученоИзКассы - Шапка.СуммаДокумента;
	
	КоличествоДокументов = ?(ВыданныеАвансы.Количество()>3, 3, ВыданныеАвансы.Количество());
	Для Инд = 1 По КоличествоДокументов Цикл
		
		ДокументАванса = ВыданныеАвансы[Инд-1].ДокументАванса;
		
		Если ТипЗнч(ДокументАванса) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			НомерДокументаАванса = ДокументАванса.НомерПоручения;
		ИначеЕсли ТипЗнч(ДокументАванса) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			НомерДокументаАванса = ДокументАванса.НомерОрдера;
		Иначе
			НомерДокументаАванса = ДокументАванса.Номер;
		КонецЕсли;
		
		КодЯзыкаПечать = "uk";
		Документ = Локализация.ПолучитьЛокализованныйСинонимОбъекта(ДокументАванса, КодЯзыкаПечать) + " " + Строка(НомерДокументаАванса) + " від " 
					+ Строка(Формат(ДокументАванса.Дата, "ДФ=dd.MM.yyyy"));
		
		ОбластьМакета.Параметры["Документ" + Инд] = Документ;
		ОбластьМакета.Параметры["Получено" + Инд] = ДокументАванса.СуммаДокумента;
		
	КонецЦикла;
	
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		
		ОстатокНаКонец = СуммаДоДокумента + ПолученоИзКассы - Шапка.СуммаДокумента;
		ОбластьМакета.Параметры.Израсходовано = Шапка.СуммаДокумента;
		
	КонецЕсли;
	
	Если ОстатокНаКонец >= 0  Тогда
		ОбластьМакета.Параметры.КонечныйОстаток    = ОстатокНаКонец;
	Иначе
		ОбластьМакета.Параметры.КонечныйПерерасход = - ОстатокНаКонец;
	КонецЕсли;

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ЕДРПОУОрганизации = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
	
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["ЕДРПОУОрганизации_" + Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
	КонецЦикла; 
	
	// если организация - физ.лицо нужно "добавить" две ячейки
	Если Шапка.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		Для Инд = 9 По 10 Цикл
			ОбластьМакета.Параметры["ЕДРПОУОрганизации_" + Инд] = Сред(ЕДРПОУОрганизации, Инд, 1);
		КонецЦикла; 
		
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
		ОбластьМакета.Область("КодОрганизации9").Обвести(Линия,Линия,Линия,Линия);
		ОбластьМакета.Область("КодОрганизации10").Обвести(Линия,Линия,Линия,Линия);
		
	КонецЕсли;
	
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ДРФОПодотчетногоЛица_" + Инд] = Сред(Шапка.ИННПодотчетногоЛица, Инд, 1);
	КонецЦикла;
	
	ОбластьМакета.Параметры.Дата	       		= Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ДатаКоротко 		= Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.ПредставлениеОрганизации        = ПредставлениеОрганизации;
	
	ДолжностьФЛ = "";
	ПодразделениеФЛ = "";
	СведенияПоФизЛицу(Шапка.ПодотчетноеЛицо, Шапка.Организация, ДолжностьФЛ, ПодразделениеФЛ);
	
	ОбластьМакета.Параметры.ДолжностьПодотчетногоЛицаПредставление = ДолжностьФЛ;
	
	Если ПустаяСтрока(ОбластьМакета.Параметры.ПредставлениеПодразделения) Тогда
		ОбластьМакета.Параметры.ПредставлениеПодразделения = ПодразделениеФЛ;
	КонецЕсли; 
	
	// выводим все суммы в гривнях
	ОбластьМакета.Параметры.СуммаОтчетПодтверждаю = ЧислоПрописью(Шапка.СуммаДокумента, "Л=uk_UA; ДП=Ложь", ВалютаДокумента.ПараметрыПрописиНаУкраинском);
	ОбластьМакета.Параметры.СуммаСНДСЧислом = СформироватьСуммуКратко(Шапка.СуммаДокумента, ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаДокументаКратко = ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента, ВалютаДокумента);
	
	ТекстВВалюте = ?(ВалютаДокумента = мВалютаРегламентированногоУчета,"Сумма","ВалютнаяСуммаКт");
	
	ЗапросПоПроводкам = Новый Запрос();
	ЗапросПоПроводкам.УстановитьПараметр("Ссылка", Ссылка);
	Если НЕ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		ЗапросПоПроводкам.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
	Иначе
		ЗапросПоПроводкам.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
	КонецЕсли;
	
	ЗапросПоПроводкам.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт,
	//|	СУММА(Хозрасчетный."+ТекстВВалюте+") КАК Сумма,
	|	ВЫБОР
	|		КОГДА СУММА(Хозрасчетный."+ТекстВВалюте+") ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ СУММА(Хозрасчетный."+ТекстВВалюте+")
	|	КОНЕЦ КАК Сумма,
	|	МИНИМУМ(Хозрасчетный.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|	И Хозрасчетный.СчетКт В ИЕРАРХИИ(&СчетРасчетов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаПроводок = ЗапросПоПроводкам.Выполнить().Выгрузить();
	ВыборкаПроводокКопияДт = ВыборкаПроводок.Скопировать();
	ВыборкаПроводокКопияДт.Свернуть("СчетДт", "Сумма");
	ВыборкаПроводокКопияКт = ВыборкаПроводок.Скопировать();
	ВыборкаПроводокКопияКт.Свернуть("СчетКт", "Сумма");

	ИспользуемыеКлассыСчетовРасходов = БухгалтерскийУчет.ПолучитьИспользуемыеКлассыСчетовРасходов(Дата, Организация);

	Счетчик = 0;
	
	Если ВариантДо01012011 Тогда
	
		Для каждого СтрокаВыборки Из ВыборкаПроводокКопияДт Цикл

			Если СтрокаВыборки.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Счетчик = 5 тогда
				Прервать;
			КонецЕсли;

			Если (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8
					ИЛИ ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9)
					И ?(ЗначениеЗаполнено(СтрокаВыборки.СчетДт),Счет9Класса(СтрокаВыборки.СчетДт), Истина) Тогда 
					Продолжить;		
			КонецЕсли;
			
			ИспСумма     = Окр(СтрокаВыборки.Сумма, 2, 1);
			ЦелСумма     = Цел(СтрокаВыборки.Сумма);
			КопСумма     = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));
			
			Если КопСумма = 0 Тогда
				
				Если ЦелСумма = 0 Тогда
					КопСумма = "";
				Иначе
					КопСумма = "00";	
				КонецЕсли; 
				
			ИначеЕсли КопСумма < 10 Тогда
				
				КопСумма = "0" + Строка(КопСумма);
				
			Иначе
				
				КопСумма = Строка(КопСумма);
				
			КонецЕсли; 
			
			Если ЦелСумма = 0 Тогда
				
				Если КопСумма = 0 Тогда
					ЦелСумма = "";
				Иначе
					ЦелСумма = Строка(ЦелСумма);	
				КонецЕсли; 
				
			КонецЕсли;
			
			ОбластьМакета.Параметры["СчетДт" 			+ (Счетчик + 1)] = СтрокаВыборки.СчетДт;
			ОбластьМакета.Параметры["СуммаБезКопеекДт" 	+ (Счетчик + 1)] = ЦелСумма;
			ОбластьМакета.Параметры["СуммаКопейкиДт"   	+ (Счетчик + 1)] = КопСумма;

			Счетчик = Счетчик + 1;

		КонецЦикла;
		
		Счетчик = 0;
		
		Для каждого СтрокаВыборки Из ВыборкаПроводокКопияКт Цикл
			
			Если СтрокаВыборки.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Счетчик = 5 тогда
				Прервать;
			КонецЕсли;

			Если (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8
					ИЛИ ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9)
					И ?(ЗначениеЗаполнено(СтрокаВыборки.СчетКт),Счет9Класса(СтрокаВыборки.СчетКт), Истина) Тогда 
				Продолжить;		
			КонецЕсли;
			
			ИспСумма     = Окр(СтрокаВыборки.Сумма, 2, 1);
			ЦелСумма     = Цел(СтрокаВыборки.Сумма);
			КопСумма     = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));
			
			Если КопСумма = 0 Тогда
				
				Если ЦелСумма = 0 Тогда
					КопСумма = "";
				Иначе
					КопСумма = "00";	
				КонецЕсли; 
				
			ИначеЕсли КопСумма < 10 Тогда
				
				КопСумма = "0" + Строка(КопСумма);
				
			Иначе
				
				КопСумма = Строка(КопСумма);
				
			КонецЕсли; 
			
			Если ЦелСумма = 0 Тогда
				
				Если КопСумма = 0 Тогда
					ЦелСумма = "";
				Иначе
					ЦелСумма = Строка(ЦелСумма);	
				КонецЕсли; 
				
			КонецЕсли;
			
			ОбластьМакета.Параметры["СчетКт" 			+ (Счетчик + 1)] = СтрокаВыборки.СчетКт;
			ОбластьМакета.Параметры["СуммаБезКопеекКт" 	+ (Счетчик + 1)] = ЦелСумма;
			ОбластьМакета.Параметры["СуммаКопейкиКт"   	+ (Счетчик + 1)] = КопСумма;

			Счетчик = Счетчик + 1;

		КонецЦикла;

	Иначе
		
		Для каждого СтрокаВыборки Из ВыборкаПроводок Цикл
			
			Если Счетчик = 10 тогда
				Прервать;
			КонецЕсли;
			
			Если (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8
				ИЛИ ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9)
				И Счет9Класса(СтрокаВыборки.СчетДт) Тогда
				Продолжить;		
			КонецЕсли;
			
			Если (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8
				ИЛИ ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9)
				И Счет9Класса(СтрокаВыборки.СчетКт) Тогда
				Продолжить;		
			КонецЕсли;
			
			ИспСумма     = Окр(?(СтрокаВыборки.Сумма = Null, 0, СтрокаВыборки.Сумма), 2, 1);
			ЦелСумма     = Цел(?(СтрокаВыборки.Сумма = Null, 0, СтрокаВыборки.Сумма));		
			КопСумма     = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));
			
			Если КопСумма = 0 Тогда
				Если ЦелСумма = 0 Тогда
					КопСумма = "";
				Иначе
					КопСумма = "00";	
				КонецЕсли; 
			ИначеЕсли КопСумма < 10 Тогда
				КопСумма = "0" + Строка(КопСумма);
			Иначе
				КопСумма = Строка(КопСумма);
			КонецЕсли; 
			
			Если ЦелСумма = 0 Тогда
				Если КопСумма = 0 Тогда
					ЦелСумма = "";
				Иначе
					ЦелСумма = Строка(ЦелСумма);	
				КонецЕсли;  
			КонецЕсли;		
			
			ОбластьМакета.Параметры["СчетДт" 			+ (Счетчик + 1)] = СтрокаВыборки.СчетДт;
			ОбластьМакета.Параметры["СчетКт" 			+ (Счетчик + 1)] = СтрокаВыборки.СчетКт;
			ОбластьМакета.Параметры["СуммаБезКопеек" 	+ (Счетчик + 1)] = ЦелСумма;
			ОбластьМакета.Параметры["СуммаКопейки"   	+ (Счетчик + 1)] = КопСумма;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
	КонецЕсли;
		
		
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	// ОБОРОТНАЯ СТОРОНА
	ЗапросТовары = Новый Запрос();

	ЗапросТовары.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросТовары.УстановитьПараметр("Валюта",          ЭтотОбъект.ВалютаДокумента);
	
	ЗапросТовары.УстановитьПараметр("Курс",             ЭтотОбъект.КурсДокумента);
	ЗапросТовары.УстановитьПараметр("Кратность",        ЭтотОбъект.КратностьДокумента);

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("АвансовыйОтчет");
	
	ЗапросТовары.Текст = "
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Номенклатура КАК Номенклатура,
	|	АвансовыйОтчет.НомерВходящегоДокумента КАК Номер,
	|	АвансовыйОтчет.ДатаВходящегоДокумента  КАК Дата,
	|	АвансовыйОтчет.Поставщик КАК Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,	
	|	NULL								   КАК Содержание,
	|	АвансовыйОтчет.СчетУчетаБУ 			   КАК СчетЗатрат,
	|	NULL 			   					   КАК СчетЗатрат8Класса,
	|	СУММА(АвансовыйОтчет.Сумма)    		   КАК ПоОтчету,
	|	СУММА(АвансовыйОтчет.СуммаНДС) 		   КАК СуммаНДС,
	|	NULL                                   КАК Договор,
	|	АвансовыйОтчет.СчетУчетаНДС 		   КАК СчетНДС,
	|	NULL КАК СуточныеДатаС,
	|	NULL КАК СуточныеДатаПо
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Номенклатура,	
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.ВидДокВходящий,
//	|	Содержание,
	|	АвансовыйОтчет.СчетУчетаБУ,
	|	АвансовыйОтчет.СчетУчетаНДС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	""Оплата постачальникам"" КАК Номенклатура,	
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом,
	|	NULL 			   					   КАК СчетЗатрат8Класса,
	|	СУММА(АвансовыйОтчет.Сумма),
	|	0,
	|	АвансовыйОтчет.ДоговорКонтрагента,
	|	0,
	|	NULL КАК СуточныеДатаС,
	|	NULL КАК СуточныеДатаПо
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	Ложь,
	|	АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом,
	|	АвансовыйОтчет.ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Номенклатура КАК Номенклатура,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Поставщик КАК Контрагент,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	АвансовыйОтчет.СчетЗатрат,
	|	АвансовыйОтчет.СтатьяЗатрат.Счет8Класса КАК СчетЗатрат8Класса,
	|	СУММА(АвансовыйОтчет.Сумма),
	|	СУММА(АвансовыйОтчет.СуммаНДС),
	|	NULL,
	|	АвансовыйОтчет.СчетУчетаНДС,
	|	АвансовыйОтчет.СуточныеДатаС,
	|	АвансовыйОтчет.СуточныеДатаПо
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Номенклатура,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.Поставщик,
	|	АвансовыйОтчет.ВидДокВходящий,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК СТРОКА(1000)),
	|	АвансовыйОтчет.СчетЗатрат,
	|	АвансовыйОтчет.СтатьяЗатрат,
	|	АвансовыйОтчет.СчетУчетаНДС,
	|	АвансовыйОтчет.СуточныеДатаС,
	|	АвансовыйОтчет.СуточныеДатаПо
	|";

	Товар = ЗапросТовары.Выполнить().Выбрать();

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим табличные части
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	НомерСтроки   = 0;

	ИтогоПоОтчету        = 0;
	ИтогоПоОтчетуВВалюте = 0;
	СуммаВВалюте = 0;

	Пока Товар.Следующий() Цикл

		// выведем сумму НДС и счет учета НДС отдельно
		Если Товар.СуммаНДС <> 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСНДС");
			ОбластьМакета.Параметры.СуммаНДС = Товар.СуммаНДС;
			ОбластьМакета.Параметры.СчетНДС = Товар.СчетНДС;
			ИтогоПоОтчету = ИтогоПоОтчету + Товар.СуммаНДС;
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(Товар);
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.НомерСтроки         = НомерСтроки;
		ОбластьМакета.Параметры.Дата        		= Формат(Товар.Дата, "ДЛФ=Д");

		ОснованиеПлатежа = ?(НЕ ЗначениеЗаполнено(Товар.Контрагент),"","Контр. """ + Товар.Контрагент + """");
		НазначениеПлатежа = ?(ЗначениеЗаполнено(Товар.Содержание), СокрЛП(Товар.Содержание), Товар.Номенклатура); 
		ОснованиеПлатежа = ОснованиеПлатежа + ?(ЗначениеЗаполнено(НазначениеПлатежа), " за " + НазначениеПлатежа, ""); 
		
		Если (ЗначениеЗаполнено(Товар.ВидДокВходящий))
		 ИЛИ (ЗначениеЗаполнено(Товар.Номер))
		 ИЛИ (ЗначениеЗаполнено(Товар.Дата)) Тогда
		 
			ОснованиеПлатежа = ОснованиеПлатежа + " на підставі док. ";
			ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(Товар.ВидДокВходящий),""," """ + Товар.ВидДокВходящий + """");
			ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(Товар.Номер),""," № " + Товар.Номер);
			ОснованиеПлатежа = ОснованиеПлатежа + ?(НЕ ЗначениеЗаполнено(Товар.Дата),""," від " + Формат(Товар.Дата, "ДЛФ=Д"));
			
		КонецЕсли;		    
		
		ОбластьМакета.Параметры.Содержание			= ОснованиеПлатежа;

		// выводим сумму без НДС
		Сумма = Товар.ПоОтчету;
		
		Если Шапка.СуммаВключаетНДС Тогда
			Сумма = Товар.ПоОтчету - Товар.СуммаНДС;
		КонецЕсли;

		ОбластьМакета.Параметры.СуммаБезНДС = Сумма;
		
		ОбластьМакета.Параметры.СчетБУ = Товар.СчетЗатрат;

		ИтогоПоОтчету = ИтогоПоОтчету + Сумма;
		
		Если ЗначениеЗаполнено(Товар.СуточныеДатаС) И ЗначениеЗаполнено(Товар.СуточныеДатаПо) Тогда
		
			ОписаниеПериода = ПредставлениеПериода(НачалоДня(Товар.СуточныеДатаС), КонецДня(Товар.СуточныеДатаПо), "ФП = Истина");
			ОбластьМакета.Параметры.Дата = СтрЗаменить(ОписаниеПериода, "Період: ", "");
		
		ИначеЕсли ЗначениеЗаполнено(Товар.Дата) Тогда
			
			ОбластьМакета.Параметры.Дата = Формат(Товар.Дата, "ДФ=dd.MM.yyyy");
			
		КонецЕсли; 
		
		Если (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8
				ИЛИ ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9)
					И (?(ЗначениеЗаполнено(Товар.СчетЗатрат),Счет9Класса(Товар.СчетЗатрат), Истина)  
					ИЛИ Товар.СчетЗатрат = ПланыСчетов.Хозрасчетный.Производство
					ИЛИ Товар.СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Производство) 
					ИЛИ Товар.СчетЗатрат = ПланыСчетов.Хозрасчетный.БракВПроизводстве
					ИЛИ Товар.СчетЗатрат.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.БракВПроизводстве))
				
				Тогда
				
		  	СчетБУ = Товар.СчетЗатрат8Класса;
			
		Иначе
			СчетБУ = Товар.СчетЗатрат;
		КонецЕсли;
		ОбластьМакета.Параметры.СчетБУ = СчетБУ;


		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Выводим подвал авансового отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.СуммаСНДС                 = ИтогоПоОтчету;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьАвансовогоОтчета()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Аванс_Отчет" Тогда
		
		ТабДокумент = ПечатьАвансовогоОтчета();
		
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидПоступления)), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечатныхФорм = Новый Структура;
	СтруктПечатныхФорм.Вставить("Аванс_Отчет",    "Авансовый отчет");
	СтруктПечатныхФорм.Вставить("СерийныеНомера", "Список серийных номеров");
	
	Возврат СтруктПечатныхФорм;
	
КонецФункции // ПолучитьТаблицуПечатныхФорм()  

// Процедура выполняет заполнение табличной части выданные авансы.
//
Процедура ЗаполнитьВыданныеАвансы() Экспорт

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ФизЛицо",           ФизЛицо);
	Запрос.УстановитьПараметр("ВалютаДокумента",   ВалютаДокумента);
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ДатаОстатков",      ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	Запрос.УстановитьПараметр("ОтражатьВБухУчете", ОтражатьВБухгалтерскомУчете);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.РасчетныйДокумент КАК ДокументАванса,
	|	Остатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			&ДатаОстатков,
	|			ФизЛицо = &ФизЛицо
	|				И (НЕ РасчетныйДокумент ССЫЛКА Документ.АвансовыйОтчет)
	|				И Валюта = &ВалютаДокумента
	|				И Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &ОтражатьВБухУчете
	|						ТОГДА ЕСТЬNULL(РасчетныйДокумент.ОтражатьВБухгалтерскомУчете, ИСТИНА)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК Остатки
	//Смартис Лиманчук начало 14.01.2013
	//|ГДЕ
	//|	Остатки.СуммаВзаиморасчетовОстаток > 0
	//Смартис Лиманчук окончание 14.01.2013
	|
	|УПОРЯДОЧИТЬ ПО
	|	Остатки.РасчетныйДокумент.Дата,
	|	Остатки.РасчетныйДокумент.Номер";

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		#Если Клиент Тогда
		Предупреждение("У подотчетного лица """                           + СокрЛП(ФизЛицо)         +
		               """ отсутствуют выданные авансы,"                  + Символы.ПС              +
		               "за которые он не отчитался перед организацией """ + СокрЛП(Организация)     +
		               """ в валюте взаиморасчетов """                    + СокрЛП(ВалютаДокумента) + """");
		#КонецЕсли
		Возврат;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//Смартис Лиманчук начало 14.01.2013
		Если НЕ ПоИнвентаризации Тогда
			Если Выборка.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;
			Если (ТипЗнч(Выборка.ДокументАванса) = Тип("ДокументСсылка.ОприходованиеТоваров")) ИЛИ (ТипЗнч(Выборка.ДокументАванса) = Тип("ДокументСсылка.СписаниеТоваров")) Тогда
				Продолжить;
			КонецЕсли; 
		Иначе
			Если (ТипЗнч(Выборка.ДокументАванса) <> Тип("ДокументСсылка.ОприходованиеТоваров")) И (ТипЗнч(Выборка.ДокументАванса) <> Тип("ДокументСсылка.СписаниеТоваров")) Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		//Смартис Лиманчук окончание 14.01.2013
		
		СтрокаВыданныеАвансы                = ВыданныеАвансы.Добавить();
		СтрокаВыданныеАвансы.ДокументАванса = Выборка.ДокументАванса;
		СтрокаВыданныеАвансы.Сумма          = Выборка.Сумма;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьВыданныеАвансы() 

// Процедура выполняет заполнение табличной части по приходному ордеру товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт

	// Сформируем запрос по шапке документа-основания
	ЗапросПоШапке = Новый Запрос;

	ЗапросПоШапке.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад"            , СкладОрдер);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДатаОстатков", 		  ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	СкладыВТабличнойЧасти = мУказаниеСкладовВТЧ Или ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;	

	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ДокТовары.НомерСтроки) КАК НомерСтроки,
	|	ДокТовары.Номенклатура                 КАК Номенклатура,
	|	ДокТовары.СерияНоменклатуры            КАК СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,
	|" + ?(СкладыВТабличнойЧасти, "
	|   Остатки.Склад                          КАК Склад,", "") + "
	|	СУММА(ДокТовары.Количество * ЕСТЬNULL(ДокТовары.ЕдиницаИзмерения.Коэффициент, 1))            КАК КоличествоПоСерии,
	|	МАКСИМУМ(Остатки.КоличествоОстаток)    КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура И
	|	ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры И
	|	ДокТовары.СерияНоменклатуры = Остатки.СерияНоменклатуры
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура,
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры
	|" + ?(СкладыВТабличнойЧасти, ",
	|	Остатки.Склад", "") + "
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;
	
	Поставщик = ДокументОснование.Контрагент;
	Выборка   = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		СтрокаТабличнойЧасти.Поставщик                  = Поставщик;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ПриходныйОрдер             = ДокументОснование;
		
		Если СкладыВТабличнойЧасти Тогда
			СтрокаТабличнойЧасти.Склад = Выборка.Склад;
		Иначе
			СтрокаТабличнойЧасти.Склад = ДокументОснование.Склад;
		КонецЕсли;

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");

		ЗаполнитьТоварыПоОснованиюРегл(СтрокаТабличнойЧасти);
		

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()


// Процедура выполняет заполнение табличной части по приходному ордеру на товары.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование) Экспорт

	// Сформируем запрос по шапке документа-основания
	ЗапросПоШапке = Новый Запрос;

	ЗапросПоШапке.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад"            , СкладОрдер);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДатаОстатков", 	   ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокВозвратнаяТара.Номенклатура                 КАК Номенклатура,
	|	СУММА(ДокВозвратнаяТара.Количество)            КАК КоличествоПоСерии,
	|	МАКСИМУМ(Остатки.КоличествоОстаток)            КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.ВозвратнаяТара КАК ДокВозвратнаяТара
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокВозвратнаяТара.Номенклатура = Остатки.Номенклатура
	|
	|ГДЕ
	|	ДокВозвратнаяТара.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокВозвратнаяТара.Номенклатура";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

		СтрокаТабличнойЧасти.Номенклатура   = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество     = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
		СтрокаТабличнойЧасти.Контрагент     = ДокументОснование.Контрагент;
		СтрокаТабличнойЧасти.ПриходныйОрдер = ДокументОснование;
		СтрокаТабличнойЧасти.Склад          = ДокументОснование.Склад;

		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Контрагент) 
			и (СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента.Организация = Организация) 
			и (СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) Тогда
			СтрокаТабличнойЧасти.ДоговорКонтрагента = СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;

		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОснованию()

// Процедура выполняет заполнение табличной части выданные авансы и прочее.
//
Процедура ЗаполнитьНаОснованииРКО(ДокументОснование)

	ФизЛицо = ДокументОснование.Контрагент;

	//Валюта авансового отчета  должна быть равна валюте взаиморасчетов с подотчетником, выбранной в РКО.
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ВалютаДокумента = ДокументОснование.ВалютаВзаиморасчетовРаботника;
	Иначе
		ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		ФизЛицо = ДокументОснование.ФизЛицо;
	КонецЕсли;
	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ОбщегоНазначения.ПолучитьРабочуюДату());
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	// Вид поступления - по умолчанию "На склад".
	ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	СкладОрдер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");

	//Смартис Лиманчук начало 01.11.2012
	НаличныйРасчет = (ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал);
	//Смартис Лиманчук окончание 01.11.2012
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		ДокументАванса = ?(ЗначениеЗаполнено(ДокументОснование.РасчетныйДокумент), ДокументОснование.РасчетныйДокумент, ДокументОснование);
	Иначе
		ДокументАванса = ДокументОснование;
	КонецЕсли;
	Запрос.УстановитьПараметр("ДокОснование",    ДокументАванса);
	Запрос.УстановитьПараметр("ДатаОстатков",    ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Остатки.РасчетныйДокумент                КАК РасчетныйДокумент,
	|	Остатки.СуммаВзаиморасчетовОстаток       КАК СуммаИзрасходовано
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ДатаОстатков, РасчетныйДокумент = &ДокОснование) КАК Остатки
	|";

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Шапка = Результат.Выбрать();
	Шапка.Следующий();

	СтрокаАвансы                = ВыданныеАвансы.Добавить();
	СтрокаАвансы.ДокументАванса = Шапка.РасчетныйДокумент;
	СтрокаАвансы.Сумма          = Шапка.СуммаИзрасходовано;

КонецПроцедуры // ЗаполнитьНаОснованииРКО()



// Процедура выполняет заполнение документа по документу-основанию.
//
// Параметры:
//  Основание - ссылка на документ основание (приходный ордер товаров).
//
Процедура ОбработкаЗаполненияУпр(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
	   И Основание.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидПоступления               = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
		СкладОрдер                   = Основание;
		ФизЛицо                      = Основание.ФизЛицо;
		УчитыватьНДС                 = Истина;
		СуммаВключаетНДС             = Истина;
		ВалютаДокумента              = мВалютаРегламентированногоУчета;

		Если ЗначениеЗаполнено(Основание.Контрагент)
		   И ЗначениеЗаполнено(Основание.Контрагент.ОсновнойДоговорКонтрагента)
		   И ЗначениеЗаполнено(Основание.Контрагент.ОсновнойДоговорКонтрагента.ТипЦен) Тогда

			// Тип цен заполняем, только если в договоре указаны тип цен контрагента (он - поставщик).
			ТипЦенКонтрагента = Основание.Контрагент.ОсновнойДоговорКонтрагента.ТипЦен;
			Если ТипЗнч(ТипЦенКонтрагента) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
				ТипЦен = ТипЦенКонтрагента.ТипЦеныНоменклатуры;
			КонецЕсли;
		КонецЕсли;

		Если Основание.Проведен Тогда
			// Заполним табличные части по приходному ордеру на товары.
			ЗаполнитьТоварыПоОснованию(Основание);
			ЗаполнитьВозвратнуюТаруПоОснованию(Основание);
		КонецЕсли;

	ИначеЕсли (ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
	        И Основание.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику)
		//Смартис Лиманчук начало 01.11.2012
		Или   (ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
			И Основание.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал)
		//Смартис Лиманчук окончание 01.11.2012
		Или   (ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") 
			И Основание.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику)
		Или   (ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") 
			И Основание.ВидОперации = Перечисления.ВидыОперацийПлатежныйОрдерСписание.ПеречислениеДенежныхСредствПодотчетнику) Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Заолненим теперь на оснвании РКО.
		ЗаполнитьНаОснованииРКО(Основание);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполненияУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверка соответствия организации указанной в документе
// и организации в реквизитах табличной части.
//
// Параметры:
//  ДокументОбъект              - объект проводимого документа,
//  ИмяТабличнойЧасти           - табличная часть документа,
//  ТаблицаЗначений             - таблица значений, содержащая данные табличной части,
//  СписокПроверяемыхРеквизитов - список значений, список проверяемых реквизитов табличной части,
//  Отказ                       - флаг отказа в проведении,
//  Заголовок                   - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьОрганизациюВТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений,
                                              СписокПроверяемыхРеквизитов, Отказ, Заголовок)

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """     + СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                                """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		// Цикл по проверяемым реквизитам
		Для каждого ЭлементСписка Из СписокПроверяемыхРеквизитов Цикл
			ПроверяемоеЗначение = СтрокаТаблицы[ЭлементСписка.Значение];
			ТекстСообщения      = ЭлементСписка.Представление;

			// Если не заполнен реквизит или организация, то не ругаемся.
			Если ЗначениеЗаполнено(ДокументОбъект.Организация) 
			   И ЗначениеЗаполнено(ПроверяемоеЗначение)
			   И ДокументОбъект.Организация <> ПроверяемоеЗначение Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке 
				                 + "выбран " + ТекстСообщения + ", не соответствующий организации указанной в документе!", Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ПроверитьОрганизациюВТабличнойЧасти()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Создаем колонку "Стоимость" и копируем в нее колонку "Сумма"
	ТаблицаТоваров.Колонки.Добавить("Стоимость");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		                 ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;

	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.Стоимость;

		СтрокаТаблицы.СуммаУпр  = СтрокаТаблицы.Стоимость + 
		                          ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаУпр, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;

		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

	
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()	

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.Сумма.Имя = "Стоимость";
	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления);
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)
	
	ТаблицаТары.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
    
	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТары, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТары.ВыгрузитьКолонку("Склад"),
						 ТаблицаТары.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
    
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТары, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;
    
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
    
	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
    
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТаблицы.ВалютаДоговора, Дата);
    
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
										 СтрокаТаблицы.ВалютаДоговора, 
										 СтруктураШапкиДокумента.КурсДокумента,
										 СтруктураКурса.Курс, 
										 СтруктураШапкиДокумента.КратностьДокумента,
										 СтруктураКурса.Кратность);
    
	// Суммы пересчитаем в валюту упр. учета. По таре считаем, что СуммаБезНДС = Сумма
	СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
										 СтруктураШапкиДокумента.КурсДокумента,
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
										 СтруктураШапкиДокумента.КратностьДокумента,
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
    
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		Иначе
			СтрокаТаблицы.Сделка = Неопределено;
		КонецЕсли;
    
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплате, СтруктураШапкиДокумента)

	ТаблицаПоОплате = РезультатЗапросаПоОплате.Выгрузить();
	
	// Для договоров, по которым ведется учет по документам расчетов с контрагентами, 
	// если значения документа расчетов в таблице не заполнено необходимо прописать туда ссылку
	// на текущий документ
	Для каждого СтрокаТаблицы Из ТаблицаПоОплате Цикл
		Если СтрокаТаблицы.ВестиПоДокументамРасчетовСКонтрагентом
		   И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчетовСКонтрагентом) Тогда

			СтрокаТаблицы.ДокументРасчетовСКонтрагентом = Ссылка;

		КонецЕсли;
	КонецЦикла;

	ПодготовитьТаблицуПоОплатеУпр(ТаблицаПоОплате, СтруктураШапкиДокумента);
    ПодготовитьТаблицуПоОплатеРегл(ТаблицаПоОплате, СтруктураШапкиДокумента);
	
	Возврат ТаблицаПоОплате;

КонецФункции // ПодготовитьТаблицуПоОплате()

Процедура ПодготовитьТаблицуПоОплатеУпр(ТаблицаПоОплате, СтруктураШапкиДокумента)
	
	ТаблицаПоОплате.Колонки.Добавить("СуммаУпр",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));	
	
	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаПоОплате Цикл

		// Суммы пересчитаем в валюту упр. учета.
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуПоОплатеУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоПрочие  - результат запроса по табличной части "Прочие",
//  СтруктураШапкиДокумента  - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента, ПогрешностиОкругления)
	ТаблицаПрочие = РезультатЗапросаПоПрочее.Выгрузить();
	ТаблицаПрочие.Колонки.Добавить("Стоимость");
	ТаблицаПрочие.ЗагрузитьКолонку(ТаблицаПрочие.ВыгрузитьКолонку("Сумма") , "Стоимость");
	ТаблицаПрочие.Колонки.Добавить("СуммаБезНДС",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	ПодготовитьТаблицуПрочиеРегл(ТаблицаПрочие, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуПрочиеУпр(ТаблицаПрочие, СтруктураШапкиДокумента);
	Возврат ТаблицаПрочие;

КонецФункции // ПодготовитьТаблицуПрочие()

Процедура ПодготовитьТаблицуПрочиеУпр(ТаблицаПрочие, СтруктураШапкиДокумента)

	КолонкаСумма = ТаблицаПрочие.Колонки["Сумма"];
	КолонкаСуммаУпр = ТаблицаПрочие.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов(КолонкаСумма.ТипЗначения));
	
	ТаблицаПрочие.Колонки.Добавить("НДСУпр"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	Для Каждого СтрокаТаблицы Из ТаблицаПрочие Цикл
		
		// Пересчитаем сумму по курсу
		СтрокаТаблицы.СуммаУпр = (СтрокаТаблицы.Сумма + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.СуммаНДС, 0)) *
			((СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) /
			(СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета * СтруктураШапкиДокумента.КратностьДокумента));
			
		СтрокаТаблицы.Стоимость  = СтрокаТаблицы.Сумма + 
		                          ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.СуммаНДС, 0);
		                          
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуПрочиеУпр()

Процедура ПодготовитьТаблицуПрочиеРегл(ТаблицаПрочие, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	Если НЕ УчитыватьНДС Тогда
		
		// для регламентного учета считаем НДС
		ТаблицаПрочие.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаПрочие.ЗаполнитьЗначения(0                            , "НДС");
				
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Прочее", ТаблицаПрочие, СтруктураШапкиДокумента);	
	
	
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(
		ТаблицаПрочие, 
		СтруктураШапкиДокумента, 
		ПогрешностиОкругления, 
		Истина,     // ЭтоПриобретение
		Истина,     // ЭтоУслуги
		"Сумма",    // ИмяКолонкиСумма
		Ложь        // ЗаполнятьСделку
	);
	

	Для Каждого СтрокаТаблицы Из ТаблицаПрочие Цикл
		Если НЕ (СтрокаТаблицы.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
				ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
				СтрокаТаблицы.СделкаРегл = Неопределено;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЭтоСуточные Тогда
			СтрокаТаблицы.СтоимостьНУ = НалоговыйУчет.ОпределитьСтоимостьНУ(СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат, СтрокаТаблицы.СуммаНУ);
		КонецЕсли; 
			
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуПрочиеРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидПоступления, Организация, ФизЛицо, ВалютаДокумента");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Если склад указывается в ТЧ, то в шапке он может быть не заполнен или указан неправильно,
	// это ни на что не влияет, потому что при проведении используется склад в ТЧ.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти 
	   И СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять поступление на НТТ!", Отказ, Заголовок);
	КонецЕсли;

	// Израсходованная сумма
	Если ВыданныеАвансы.Итог("Сумма") > СуммаДокумента Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Израсходованная сумма превышает сумму по документу!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()   

// Проверяет правильность заполнения строк табличной части "Выданные авансы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоАвансам          - таблица значений, содержащая данные для проведения и проверки ТЧ "ВыданныеАвансы",
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы(ТаблицаПоАвансам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументАванса, Сумма");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверка организации
	СписокПроверяемыхРеквизитов = Новый СписокЗначений;
	СписокПроверяемыхРеквизитов.Добавить("ДокументАвансаОрганизация", "документ аванса");
	ПроверитьОрганизациюВТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы", ТаблицаПоАвансам, СписокПроверяемыхРеквизитов, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы()  

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	//Счета учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТовары();

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь НТТ быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");

	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Проверка организации
	СписокПроверяемыхРеквизитов = Новый СписокЗначений;
	СписокПроверяемыхРеквизитов.Добавить("ОрганизацияДокументаПолучения", "приходный ордер на товары");
	ПроверитьОрганизациюВТабличнойЧасти(ЭтотОбъект, "Товары", ТаблицаПоТоварам, СписокПроверяемыхРеквизитов, Отказ, Заголовок);
	
														   
	// Проверка соответствия количества серийных номеров количеству товаров.
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);    			   
	
	Если СтруктураШапкиДокумента.УчитыватьНДС и ОтражатьВБухгалтерскомУчете Тогда
		
		Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
			
			ЗначениеСтавкиНДС = Ценообразование.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС);
			
			
			Если СтрокаТЧ.СтавкаНДС<>Перечисления.СтавкиНДС.НеНДС Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Поставщик) Тогда
					ОбщегоНазначения.СообщитьОбОшибке( "В строке номер """+ СтрокаТЧ.НомерСтроки + """ табличной части ""Товары"": "
					+ " Не заполнено значение реквизита ""Поставщик""!", Отказ, Заголовок);
				КонецЕсли;
				
				Если СтрокаТЧ.СтавкаНДС<>Перечисления.СтавкиНДС.НеНДС и НЕ ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
					ОбщегоНазначения.СообщитьОбОшибке( "В строке номер """+ СтрокаТЧ.НомерСтроки + """ табличной части ""Товары"": "
					+ " Не заполнено значение реквизита ""Договор поставщика""!", Отказ, Заголовок);
				КонецЕсли;
				
				Если  СтрокаТЧ.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета
					И НЕ ЗначениеЗаполнено(СтрокаТЧ.СделкаРегл)
					И (    СтрокаТЧ.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
					   ИЛИ СтрокаТЧ.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
				
					СтрокаСообщения = "Не заполнено значение реквизита ""Сделка""!";
					ОбщегоНазначения.СообщитьОбОшибке( "В строке номер """+ СтрокаТЧ.НомерСтроки + """ табличной части ""Товары"": " + СтрокаСообщения, Отказ, Заголовок);
					
				КонецЕсли;				
				
			КонецЕсли;
					
		КонецЦикла;
	КонецЕсли;
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ТаблицаПоТоварам, 
		"Товары",
		Отказ, 
		Заголовок, 
		"Поступление", // ВидОперации
		Ложь           // ЭтоЗатраты 
	);	
	
	
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ОплатаПоставщикам";
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Контрагент, ДоговорКонтрагента, Сумма, СтавкаНДС");
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиОплатаПоставщикамРегл(СтруктураОбязательныхПолей);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверим заполнение заказов поставщикам
	УправлениеВзаиморасчетами.ПроверитьСделкуВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоОплате, Отказ, Заголовок);

	// Проверка организации, договор взаиморасчетов проверяем всегда.
	СписокПроверяемыхРеквизитов = Новый СписокЗначений;
	СписокПроверяемыхРеквизитов.Добавить("ДоговорОрганизация", "договор контрагента");
	СписокПроверяемыхРеквизитов.Добавить("СделкаОрганизация",  "документ сделки");
	ПроверитьОрганизациюВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоОплате, СписокПроверяемыхРеквизитов, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоПрочее         - таблица значений, содержащая результат запроса с данными для проведения и проверки ТЧ Прочее
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПрочее(ТаблицаПоПрочее, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	//Смартис Лиманчук начало 08.04.2013
	Если СтруктураШапкиДокумента.ПоИнвентаризации Тогда
		Возврат;
	КонецЕсли;
	//Смартис Лиманчук окончание 08.04.2013
	
	//Счета учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Прочее", ТаблицаПоПрочее, СтруктураШапкиДокумента, Отказ, Заголовок);
   	
	// Укажем, что надо проверить:
	РеквизитыСтр = "Содержание, Сумма, СтатьяЗатрат";
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		РеквизитыСтр = РеквизитыСтр + ", СтавкаНДС";
	КонецЕсли;
	
    ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиПрочееРегл(РеквизитыСтр, СтруктураШапкиДокумента);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Прочее", Новый Структура(РеквизитыСтр), Отказ, Заголовок);

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Прочее", ТаблицаПоПрочее, Отказ, Заголовок);
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Прочее", ТаблицаПоПрочее, Отказ, Заголовок);

	
	// Проверим соответствие подразделения и оранизации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизацииВСтрокахТабЧасти(ЭтотОбъект, ТаблицаПоПрочее, "Прочее",, Отказ, Заголовок);
	
	// Проверить наличие счетов учета НДС
	Если СтруктураШапкиДокумента.УчитыватьНДС и СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Для Каждого СтрокаТЧ Из ТаблицаПоПрочее Цикл
			
			ЗначениеСтавкиНДС = Ценообразование.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС);
			
			
			Если СтрокаТЧ.СтавкаНДС<>Перечисления.СтавкиНДС.НеНДС Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Поставщик) Тогда
					ОбщегоНазначения.СообщитьОбОшибке( "В строке номер """+ СтрокаТЧ.НомерСтроки + """ табличной части ""Прочее"": "
					+ " Не заполнено значение реквизита ""Поставщик""!", Отказ, Заголовок);
				КонецЕсли;
				
				Если СтрокаТЧ.СтавкаНДС<>Перечисления.СтавкиНДС.НеНДС и НЕ ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
					ОбщегоНазначения.СообщитьОбОшибке( "В строке номер """+ СтрокаТЧ.НомерСтроки + """ табличной части ""Прочее"": "
					+ " Не заполнено значение реквизита ""Договор поставщика""!", Отказ, Заголовок);
				КонецЕсли;
				
				Если  СтрокаТЧ.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета
					И НЕ ЗначениеЗаполнено(СтрокаТЧ.СделкаРегл)
					И (    СтрокаТЧ.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
					   ИЛИ СтрокаТЧ.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
				
					СтрокаСообщения = "Не заполнено значение реквизита ""Сделка""!";
					ОбщегоНазначения.СообщитьОбОшибке( "В строке номер """+ СтрокаТЧ.НомерСтроки + """ табличной части ""Прочее"": " + СтрокаСообщения, Отказ, Заголовок);
					
				КонецЕсли;				
				
			КонецЕсли;
					
		КонецЦикла;
	КонецЕсли;
	
	ПредставлениеПрочее = ЭтотОбъект.Метаданные().ТабличныеЧасти.Прочее.Представление();
	Для Каждого СтрокаАвансовПрочее Из Прочее Цикл
		
	    СтрокаНачалаСообщенияОбОшибке = Локализация.СтрШаблон(НСтр("ru='В строке номер ""¤1¤"" табличной части ""¤2¤"": ';uk='У рядку номер ""¤1¤"" табличної частини ""¤2¤"": '"), СокрЛП(СтрокаАвансовПрочее.НомерСтроки), ПредставлениеПрочее);
		Если СтрокаАвансовПрочее.СуточныеДатаС > СтрокаАвансовПрочее.СуточныеДатаПо Тогда
		
			СтрокаСообщения = НСтр("ru='Значение реквизита ""Суточные дата с"" не может быть больше значения реквизита ""Суточные дата по""!';uk='Значення реквізиту ""Добові дата з"" не може бути більше значення реквізиту ""Добові дата по""!'");
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		
		КонецЕсли; 
	
	КонецЦикла; 

	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ТаблицаПоПрочее, 
		"Прочее",
		Отказ, 
		Заголовок, 
		"Поступление", // ВидОперации
		Истина         // ЭтоЗатраты 
	);	



	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПрочее()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";

	//Счета учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратнаяТара", ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТара();
	СтруктураОбязательныхПолей.Вставить("Контрагент");
	СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	//Счет учета расчетов по возвратной таре
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
	КонецЕсли;  
	
	// Теперь вызовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь НТТ быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок, "ВидСклада");

	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);


	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// Проверка организации, договор взаиморасчетов проверяем всегда.
	СписокПроверяемыхРеквизитов = Новый СписокЗначений;
	СписокПроверяемыхРеквизитов.Добавить("ДоговорОрганизация",            "договор контрагента");
	СписокПроверяемыхРеквизитов.Добавить("СделкаОрганизация",             "документ сделки");
	СписокПроверяемыхРеквизитов.Добавить("ОрганизацияДокументаПолучения", "приходный ордер на товары");
	ПроверитьОрганизациюВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, СписокПроверяемыхРеквизитов, Отказ, Заголовок);

	// Если ведение взаиморасчетов "По заказам", "Сделка" должна быть заполнена.
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	Для каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)
		   И СтрокаТаблицы.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		   И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сделка) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Сделка""!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			
		ИначеЕсли ОтражатьВБухгалтерскомУчете
			И СтрокаТаблицы.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СделкаРегл)
			И (    СтрокаТаблицы.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			   ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
		
			СтрокаСообщения = "Не заполнено значение реквизита ""Сделка""!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Нельзя резервировать возвратную тару под заказ покупателя с обособленным учетом
	УправлениеЗаказами.ПроверитьРезервированиеТарыПодЗаказСОбособленнымУчетом(ЭтотОбъект,"Заказ", ложь,, Отказ, Заголовок);		
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ТаблицаПоТаре, 
		"Возвратная тара",
		Отказ, 
		Заголовок, 
		"Поступление", // ВидОперации
		Ложь           // ЭтоЗатраты 
	);	
																  
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Формируем движения по ТЧ "ВыданныеАвансы"
//
// Параметры: 
//  СтруктураШапкиДокумента                  - выборка из результата запроса по шапке документа
//  ВыборкаПоВыданныеАвансы		             - выборка из результата запроса по ТЧ "ВыданныеАвансы" 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//  Режим									 - режим проведения
//  Отказ   			                     - флаг отказа в проведении.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДвиженияПоПодотчетникамУпр(СтруктураШапкиДокумента, ТаблицаПоВыданныеАвансы, Режим, Отказ, Заголовок)

	//Смартис Лиманчук начало 08.04.2013
	Если СтруктураШапкиДокумента.ПоИнвентаризации Тогда
		Возврат;
	КонецЕсли;
	//Смартис Лиманчук окончание 08.04.2013
	
	// Если НДС и не включаются в сумму документа, то его надо добавить 
	// к общей сумме
	Налоги = 0;
	НалогиПрочее = 0;
	Если СуммаВключаетНДС = 0 Тогда
		Налоги = Товары.Итог("СуммаНДС");
		НалогиПрочее = Прочее.Итог("СуммаНДС");
	КонецЕсли;

	// Следующие переменные будут содержать текущие (непогашенные) остатки сумм
	// по табличным частям документа
	ОстПогСуммаТовары = Товары.Итог("Сумма") + Налоги;
	ОстПогСуммаОплата = ОплатаПоставщикам.Итог("Сумма");
	ОстПогСуммаПрочее = Прочее.Итог("Сумма") + НалогиПрочее;
	
	НаборДвижений   = Движения.ВзаиморасчетыСПодотчетнымиЛицами;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого СтрокаТаблицы Из ТаблицаПоВыданныеАвансы Цикл

		Если Отказ Тогда
			Продолжить;
		КонецЕсли;

		ОстПогРКО = СтрокаТаблицы.Сумма;
		
		// Будем последовательно списывать суммы по табличным частям документа,
		// делая движения с соответствующими кодами операций
		Пока ОстПогРКО > 0 Цикл
			
			// ОстПог - текущий остаток по текущей ТЧ документа, который надо погасить
			Если ОстПогСуммаТовары > 0 Тогда
				ОстПог					= ОстПогСуммаТовары;  
				//КодОперации				= Перечисления.КодыОпераций.АвансовыйОтчетЗакупкаТМЦ;
				ОстПогСуммаТовары	= ОстПогСуммаТовары - Мин(ОстПог, ОстПогРКО);
			ИначеЕсли ОстПогСуммаОплата > 0 Тогда
				ОстПог					= ОстПогСуммаОплата;
				//КодОперации				= Перечисления.КодыОпераций.АвансовыйОтчетОплатаПоставщикам;
				ОстПогСуммаОплата		= ОстПогСуммаОплата - Мин(ОстПог, ОстПогРКО);
			ИначеЕсли ОстПогСуммаПрочее > 0 Тогда
				ОстПог					= ОстПогСуммаПрочее;
				//КодОперации				= Перечисления.КодыОпераций.АвансовыйОтчетПрочее;
				ОстПогСуммаПрочее		= ОстПогСуммаПрочее - Мин(ОстПог, ОстПогРКО);
			Иначе
				Прервать;
			КонецЕсли;
				
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			
			// Измерения
			СтрокаДвижений.Организация	        = СтруктураШапкиДокумента.Организация;
			СтрокаДвижений.ФизЛицо	 	        = ФизЛицо;
			СтрокаДвижений.РасчетныйДокумент    = СтрокаТаблицы.ДокументАванса;
			СтрокаДвижений.Валюта			    = ВалютаДокумента;

			// Ресурсы
			СтрокаДвижений.СуммаВзаиморасчетов  = Мин(ОстПог, ОстПогРКО);
			СтрокаДвижений.СуммаУпр             = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаВзаиморасчетов,
								ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, КурсДокумента,
								СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, КратностьДокумента,
								СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			ОстПогРКО = ОстПогРКО - СтрокаДвижений.СуммаВзаиморасчетов;
			
		КонецЦикла;
			
	КонецЦикла; 

	// Если все суммы выданных авансов списаны, а суммы по расходам списаны неполностью,
	// то возникает перерасход
	Перерасход = ОстПогСуммаТовары + ОстПогСуммаОплата + ОстПогСуммаПрочее;

	Если Перерасход > 0 И НЕ Отказ Тогда

		СтрокаДвижений = ТаблицаДвижений.Добавить();
		
		// Измерения
		СтрокаДвижений.Организация	        = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.ФизЛицо	 	        = ФизЛицо;
		СтрокаДвижений.РасчетныйДокумент    = Ссылка;
		СтрокаДвижений.Валюта			    = ВалютаДокумента;

		// Ресурсы
		СтрокаДвижений.СуммаВзаиморасчетов  = Перерасход;
		СтрокаДвижений.СуммаУпр             = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаВзаиморасчетов,
								ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, КурсДокумента,
								СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, КратностьДокумента,
								СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЕсли;

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоПодотчетникам()

Процедура ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ, Заголовок)

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.

		РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
		                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый));

		Если Не РезультатЗапроса.Пустой() Тогда
			НаборДвижений = Движения.ТоварыНаСкладах;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса.Выгрузить(), ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				НаборДвижений.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;

		РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
		                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный));

		Если Не РезультатЗапроса.Пустой() Тогда
			НаборДвижений = Движения.ТоварыВРознице;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса.Выгрузить(), ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				НаборДвижений.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;

		// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
		РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре,
		                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый));

		Если Не РезультатЗапроса.Пустой() Тогда
			НаборДвижений = Движения.ТоварыНаСкладах;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса.Выгрузить(), ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				НаборДвижений.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;

		РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре,
		                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный));

		Если Не РезультатЗапроса.Пустой() Тогда
			НаборДвижений = Движения.ТоварыВРознице;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса.Выгрузить(), ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				НаборДвижений.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;
	Иначе

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады.
		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийТоварыНаСкладах = НаборДвижений.ВыгрузитьКолонки();
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
        ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Контроль остатков
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли; 

		Если Не Отказ Тогда
			Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
		КонецЕсли;

		// ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады.
		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
        ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Контроль остатков
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли; 

		Если Не Отказ Тогда
			Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
		КонецЕсли;

		// Если товары поступили по ордеру без права продажи, то надо снять резерв
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру  Тогда
		   ТаблицаПоТоварамПоОрдерам = ТаблицаПоТоварам.Скопировать();
		   Сч = 0;
		   Пока Сч < ТаблицаПоТоварамПоОрдерам.Количество() Цикл
			   СтрокаТаблицы = ТаблицаПоТоварамПоОрдерам.Получить(Сч);
			   Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПолучения)
				   ИЛИ НЕ СтрокаТаблицы.ДокументПолучения.БезПраваПродажи Тогда             // Резерв в это случае делать не надо.
				   ТаблицаПоТоварамПоОрдерам.Удалить(СтрокаТаблицы);
			   Иначе
				   Сч = Сч + 1;
			   КонецЕсли;
		   КонецЦикла;
		   ТаблицаПоТареПоОрдерам = ТаблицаПоТаре.Скопировать();
		   Сч = 0;
		   Пока Сч < ТаблицаПоТареПоОрдерам.Количество() Цикл
			   СтрокаТаблицы = ТаблицаПоТареПоОрдерам.Получить(Сч);
			   Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПолучения)
				   ИЛИ НЕ СтрокаТаблицы.ДокументПолучения.БезПраваПродажи Тогда             // Резерв в это случае делать не надо.
				   ТаблицаПоТареПоОрдерам.Удалить(СтрокаТаблицы);
			   Иначе
				   Сч = Сч + 1;
			   КонецЕсли;
		   КонецЦикла;

		   Если ТаблицаПоТоварамПоОрдерам.Количество()+ТаблицаПоТареПоОрдерам.Количество()>0  Тогда

				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
				
				// Контроль остатков
				Если ТаблицаПоТоварамПоОрдерам.Количество()>0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ТаблицаПоТареПоОрдерам.Количество()>0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;

				Если Не Отказ Тогда
					ТаблицаПоТоварамПоОрдерам.Колонки.ДокументПолучения.Имя = "ДокументРезерва";
               		ТаблицаПоТареПоОрдерам.Колонки.ДокументПолучения.Имя = "ДокументРезерва";
					
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамПоОрдерам);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареПоОрдерам);
					
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;


            КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Резервирование по заказам покупателей
		
	// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
	// (реквизит ЗаказПокупателя пуст)
	ТаблицаПоТоварамЗаказамПокупателей = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамЗаказамПокупателей.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамЗаказамПокупателей.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя)
			 ИЛИ (ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
			   И  СтрокаТаблицы.ЗаказПокупателя.Заказчик = Ссылка.СкладОрдер) Тогда             // Резерв в это случае делать не надо.
			ТаблицаПоТоварамЗаказамПокупателей.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаПоТоварамЗаказамПокупателей.Количество() > 0 Тогда

		ТаблицаПоТоварамЗаказамПокупателей.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";

		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийРезервы = НаборДвижений.Выгрузить();
		ТаблицаДвиженийРезервы.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЗаказамПокупателей, ТаблицаДвижений);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
		КонецЕсли;

		ТаблицаДвижений.Очистить();
		
	КонецЕсли;
	
		// Теперь зарезервируем возвратную тару
	// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
	// (реквизит ЗаказПокупателя пуст)
	ТаблицаПоТареЗаказамПокупателей = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареЗаказамПокупателей.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареЗаказамПокупателей.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя)
			 ИЛИ (ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
			   И  СтрокаТаблицы.ЗаказПокупателя.Заказчик = Ссылка.СкладОрдер) Тогда             // Резерв в это случае делать не надо.
			ТаблицаПоТареЗаказамПокупателей.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаПоТареЗаказамПокупателей.Количество() > 0 Тогда

		ТаблицаПоТареЗаказамПокупателей.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";

		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийРезервы = НаборДвижений.Выгрузить();
		ТаблицаДвиженийРезервы.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТареЗаказамПокупателей, ТаблицаДвижений);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
		КонецЕсли;

		ТаблицаДвижений.Очистить();

	КонецЕсли;

	// Погашение внутренних заказов в случае Заказчик = Склад поступления
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить( "СтатусПартии",          Перечисления.СтатусыПартийТоваров.Купленный);
	ДопПараметры.Вставить( "РежимПроведения",       РежимПроведения);
	ДопПараметры.Вставить( "ИмяРеквизитаЗаказ",     "Заказ");
	ДопПараметры.Вставить( "ЗаказВШапке",           Ложь);
	ДопПараметры.Вставить( "ИмяТабЧасти",           "Товары");
	
	ТабИсходная = ТаблицаПоТоварам.Скопировать();
	ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.Купленный);

	Если ТабИсходная.Количество() > 0 Тогда
		УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;
	
	ТабИсходная.Очистить();
	ТабИсходная = ТаблицаПоТаре.Скопировать();
	ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	ДопПараметры.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	ДопПараметры.Вставить( "ИмяТабЧасти",  "ВозвратнаяТара");
	
	Если ТабИсходная.Количество() > 0 Тогда
		УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, ТаблицаПоТаре, ,ОтражатьВУправленческомУчете);

	// ТОВАРЫ ПО РЕГИСТРУ Закупки.
	
	НаборДвижений = Движения.Закупки;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
	ТаблицаДвиженийЗакупки.Очистить();
	ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
	
	// Стоимость в регистре Закупки должна быть с НДС при любых настройках НеВключатьНДСВСтоимостьПартий.
	КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
	КопияТаблицыТоваров.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
	
	КопияТаблицыТоваров.Колонки.НДС   .Имя = "_НДС";
	КопияТаблицыТоваров.Колонки.НДСУпр.Имя = "НДС";
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
		
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыТоваров,ТаблицаДвижений,Проект,Дата,"Закупки");
		
	Иначе
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);
		
	КонецЕсли;
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументЗакупки");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.Закупки.ВыполнитьДвижения();
	КонецЕсли;
	
	// ПРОЧЕЕ ПО РЕГИСТРУ Закупки.
	
	//Смартис Лиманчук начало 08.04.2013
	Если СтруктураШапкиДокумента.ПоИнвентаризации Тогда
		Возврат;
	КонецЕсли;
	//Смартис Лиманчук окончание 08.04.2013
	
	НаборДвижений = Движения.Закупки;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
	ТаблицаДвиженийЗакупки.Очистить();
	ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
	
	// Стоимость в регистре Закупки должна быть с НДС при любых настройках НеВключатьНДСВСтоимостьПартий.
	КопияТаблицыПрочее = ТаблицаПоПрочее.Скопировать();
	КопияТаблицыПрочее.ЗагрузитьКолонку(КопияТаблицыПрочее.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
	
	КопияТаблицыПрочее.Колонки.НДС   .Имя = "_НДС";
	КопияТаблицыПрочее.Колонки.НДСУпр.Имя = "НДС";
	
	Если КопияТаблицыПрочее.Колонки.Найти("Количество")=Неопределено Тогда
		КопияТаблицыПрочее.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
		
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыПрочее,ТаблицаДвижений,Проект,Дата,"Закупки");
		
	Иначе
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТаблицыПрочее, ТаблицаДвижений);
		
	КонецЕсли;

	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументЗакупки");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.Закупки.ВыполнитьДвижения();
	КонецЕсли;
	
КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартийУпр()

Процедура  ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, знач СтатусПартии)
	Сч = 0;

	Пока Сч < ТабИсходная.Количество() Цикл
		СтрокаТаблицы = ТабИсходная.Получить(Сч);
		Если ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
			  И СтрокаТаблицы.ЗаказПокупателя.Заказчик = СкладОрдер Тогда
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, вероятно, заказаны комплектующие для комплектов, по ним движений не делаем
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.ЗаказПокупателя, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура, 
																   СтрокаТаблицы.ХарактеристикаНоменклатуры, 
																   СтрокаТаблицы.ЕдиницаИзмерения,
																   СтатусПартии);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ТабИсходная.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	ТабИсходная.Колонки.ЗаказПокупателя.Имя = "Заказ";
КонецПроцедуры

// Проводит табличную часть "Оплата поставщикам" по регистрам
//
// Параметры:
//  ТаблицаПоОплатамПоставщикам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ОплатаПоставщикамУпр(РежимПроведения, ТаблицаПоОплатамПоставщикам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ВзаиморасчетыСКонтрагентами;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	// Удалим из таблицы строки по таре
	ТаблицаКопия = ТаблицаПоОплатамПоставщикам.Скопировать();
	ТаблицаКопия.Очистить();
	
	Для каждого СтрокаПоОплате Из ТаблицаПоОплатамПоставщикам Цикл
		
		Если НЕ СтрокаПоОплате.ЗаТару Тогда
			СтрокаТаблицыКопия = ТаблицаКопия.Добавить();
			Для каждого КолонкаТаблицыПоОплате Из ТаблицаПоОплатамПоставщикам.Колонки Цикл
				СтрокаТаблицыКопия[КолонкаТаблицыПоОплате.Имя] = СтрокаПоОплате[КолонкаТаблицыПоОплате.Имя];
			КонецЦикла; 
		КонецЕсли;
		СтрокаТаблицыКопия.Сделка = УправлениеДенежнымиСредствами.ОпределитьСделкуСтрокиТЧ (ЭтотОбъект, СтрокаПоОплате);
	
	КонецЦикла; 
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	НаборДвижений.мПериод           = Дата;
	НаборДвижений.мТаблицаДвижений  = ТаблицаДвижений;
	
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ОплатаПоставщикам", СтруктураШапкиДокумента, Новый Структура, Отказ, Заголовок, РежимПроведения, "СуммаВзаиморасчетов");
    					
	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;
	
	НаборДвижений   = Движения.РасчетыСКонтрагентами;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	НаборДвижений.мПериод           = Дата;
	НаборДвижений.мТаблицаДвижений  = ТаблицаДвижений;
	НаборДвижений.мТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты, "РасчетыВозврат");
	
	Если Не Отказ Тогда
		Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры // ОплатаПоставщикамУпр()

//Смартис Лиманчук начало 15.01.2013
Функция НайтиСотрудника(СтруктураШапкиДокумента)

	СтруктураСотрудника = Новый Структура("Сотрудник,Организация");
	
	ТекстОшибки = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Физлицо", СтруктураШапкиДокумента.Физлицо);

	Запрос.Текст = "ВЫБРАТЬ Сотрудник,Организация ИЗ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, )
	               |ГДЕ Сотрудник.Физлицо = &Физлицо И ЗанимаемыхСтавок > 0
	               |УПОРЯДОЧИТЬ ПО Сотрудник.ВидЗанятости УБЫВ";

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
		СтруктураСотрудника.Сотрудник = Выборка.Сотрудник;
		СтруктураСотрудника.Организация = Выборка.Организация;
		Возврат СтруктураСотрудника;
	Иначе
		ТекстОшибки = "Для МОЛ "+СтруктураШапкиДокумента.Физлицо+" не найден работающий сотрудник!";
	КонецЕсли;

	Запрос.Текст = "ВЫБРАТЬ Сотрудник,Организация ИЗ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, )
	               |ГДЕ Сотрудник.Физлицо = &Физлицо
	               |УПОРЯДОЧИТЬ ПО Сотрудник.ВидЗанятости УБЫВ";

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
		СтруктураСотрудника.Сотрудник = Выборка.Сотрудник;
		СтруктураСотрудника.Организация = Выборка.Организация;
	Иначе
		СтруктураСотрудника.Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
		СтруктураСотрудника.Организация = Справочники.Организации.ПустаяСсылка();
		ТекстОшибки = "Для МОЛ "+СтруктураШапкиДокумента.Физлицо+" не найден сотрудник!";
	КонецЕсли;
	
	Если ТекстОшибки <> "" Тогда
		Сообщить(ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураСотрудника;
	
КонецФункции // НайтиСотрудника()

Процедура ДвиженияПоИтогамИнвентаризации(СтруктураШапкиДокумента, ТаблицаПоВыданныеАвансы, ТаблицаПоПрочее, Отказ)

	//взаиморасчеты с подотчетными лицами
	Для каждого Стр Из ТаблицаПоВыданныеАвансы Цикл
		Движение = Движения.ВзаиморасчетыСПодотчетнымиЛицами.ДобавитьРасход();
		Движение.Активность = Истина;
		Движение.Период = СтруктураШапкиДокумента.Дата;
		Движение.Организация = СтруктураШапкиДокумента.Организация;
		Движение.ФизЛицо = СтруктураШапкиДокумента.ФизЛицо;
		Движение.Валюта = мВалютаРегламентированногоУчета;
		Движение.РасчетныйДокумент = Стр.ДокументАванса;
		Движение.СуммаВзаиморасчетов = Стр.Сумма;
		Движение.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Стр.Сумма,мВалютаРегламентированногоУчета,
					   			СтруктураШапкиДокумента.ВалютаУправленческогоУчета,  1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета);			
	КонецЦикла;
							
	//взаиморасчеты с работниками организаций
	Для каждого Стр Из ТаблицаПоПрочее Цикл
		
		Если Стр.СчетЗатрат <> ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.ДобавитьРасход();
		Движение.Активность = Истина;
		Движение.Период = СтруктураШапкиДокумента.Дата;
		СтруктураСотрудника = НайтиСотрудника(СтруктураШапкиДокумента);
		Движение.Организация = СтруктураСотрудника.Организация;
		Движение.Сотрудник = СтруктураСотрудника.Сотрудник;
		Движение.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		Движение.ПериодВзаиморасчетов = НачалоМесяца(СтруктураШапкиДокумента.Дата);
		Движение.СуммаВзаиморасчетов = Стр.Сумма;
	
	КонецЦикла;
	
	////проводки бухгалтерского учета
	//Проводка = Движения.Хозрасчетный.Добавить();
	//Проводка.Период = СтруктураШапкиДокумента.Дата;
	//Проводка.Организация = Константы.КрафтКолор.Получить();
	//Проводка.Содержание  = "Закрытие долга с подотчетником на зарплату";
	//
	//Если ТаблицаПоВыданныеАвансы.Итог("Сумма")>0 Тогда
	//	Проводка.Сумма       = ТаблицаПоВыданныеАвансы.Итог("Сумма");
	//	Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	//	Проводка.СубконтоДт.РаботникиОрганизации = СтруктураШапкиДокумента.ФизЛицо;
	//	Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте;
	//	Проводка.СубконтоКт.РаботникиОрганизации = СтруктураШапкиДокумента.ФизЛицо;
	//Иначе
	//	Проводка.Сумма       = -ТаблицаПоВыданныеАвансы.Итог("Сумма");
	//	Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте;
	//	Проводка.СубконтоДт.РаботникиОрганизации = СтруктураШапкиДокумента.ФизЛицо;
	//	Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	//	Проводка.СубконтоКт.РаботникиОрганизации = СтруктураШапкиДокумента.ФизЛицо;
	//КонецЕсли;

КонецПроцедуры
//Смартис Лиманчук окончание 15.01.2013

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                Отказ, Заголовок);

	//Смартис Лиманчук начало 15.01.2013
	Если ПоИнвентаризации Тогда
		ДвиженияПоИтогамИнвентаризации(СтруктураШапкиДокумента, ТаблицаПоВыданныеАвансы, ТаблицаПоПрочее, Отказ);
	КонецЕсли;
	//Смартис Лиманчук окончание 15.01.2013
					
	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента,
					ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
					Отказ, Заголовок);
					
	ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента,
					ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
					Отказ, Заголовок);

	// Формирование движений по отражению затрат.
	УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
		СтруктураШапкиДокумента, 
		ТаблицаПоПрочее
	);
					
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
					ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
					Отказ, Заголовок);

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента,
					ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
					Отказ, Заголовок);
					
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ);
					
	
	Если НЕ СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации = Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется Тогда
		ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента,
					ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
					Отказ, Заголовок);
	КонецЕсли;
					
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента, ТаблицаПоОплатамПоставщикам );
	
	
	// По партиям, оприходованным по ордеру с парвом продажи, возможно следует выполнить 
	// корректировку списания
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
		И ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру
		И ТипЗнч(СкладОрдер) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
		И НЕ СкладОрдер.БезПраваПродажи Тогда

		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	Отказ, Заголовок);

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;
			
	Иначе // По ордеру

		// По ордеру нужно сторнировать движения по товарам организаций,
		// если в ордере была указана не та организация.
		// Удалим строки, по которым не нужно делать движений (организации совпадают).
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КолвоЭлементовКоллекции = КопияТаблицыТоваров.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = КопияТаблицыТоваров[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.ОрганизацияДокументаПолучения = СтруктураШапкиДокумента.Организация Тогда
				КопияТаблицыТоваров.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;

		Если КопияТаблицыТоваров.Количество() > 0 Тогда // Есть что проводить.

			// Вначале сторнируем
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("ОрганизацияДокументаПолучения"), "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
			КонецЕсли;
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьРасход();
			КонецЕсли;

			// Теперь сделаем движения с правильной организацией.
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	Отказ, Заголовок);

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыОрганизацийРегл.
	НаборДвижений = Движения.ТоварыОрганизацийРегл;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	Если Не ВестиПартионныйУчетПоСкладамРегл Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка(), "НалоговоеНазначение");
	КонецЕсли; 
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ТоварыОрганизацийРегл.ВыполнитьПриход();
	КонецЕсли;
			
	
КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	// По партиям, оприходованным по ордеру с правом продажи, возможно следует выполнить корректировку списания
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру тогда
		
		МассивПриходныхОрдеров = Новый Массив;
		Для каждого Строка Из ТаблицаПоТоварам Цикл
		
			Если  ТипЗнч(Строка.ДокументПолучения) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
			   И Строка.БезПраваПродажи =Ложь Тогда
			 МассивПриходныхОрдеров.Добавить(Строка.ДокументПолучения);
			КонецЕсли;
		
		КонецЦикла;
		
		Для каждого Строка Из ТаблицаПоТаре Цикл
		
			Если  ТипЗнч(Строка.ДокументПолучения) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
			   И Строка.БезПраваПродажи =Ложь Тогда
			 МассивПриходныхОрдеров.Добавить(Строка.ДокументПолучения);
			КонецЕсли;
		
		КонецЦикла;
		
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПриходныхОрдеров);
		
		// ПО РЕГИСТРУ СписанныеТовары: формируем записи с указанием приходных ордеров, которые будут обрабатываться при списании
		НаборДвижений = Движения.СписанныеТовары;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		Инд = 0;
		Для каждого Элемент Из МассивПриходныхОрдеров Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.ПоступлениеПриходныйОрдер = Элемент;
			Инд = Инд+1;
			НоваяСтрока.НомерСтрокиДокумента = Инд;

		КонецЦикла;
		
		ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;

КонецПроцедуры//ДвиженияПоРегиструСписанныеТовары

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	Отказ, Заголовок);
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ПО РЕГИСТРУ ВзаиморасчетыСПодотчетнымиЛицами.
	ДвиженияПоПодотчетникамУпр(СтруктураШапкиДокумента, ТаблицаПоВыданныеАвансы, РежимПроведения, Отказ, Заголовок);

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
	ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ, Заголовок);

	// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами
	ОплатаПоставщикамУпр(РежимПроведения, ТаблицаПоОплатамПоставщикам, Отказ, Заголовок, СтруктураШапкиДокумента);

	// ТАРА ПО РЕГИСТРУ ТоварыПолученные.
	НаборДвижений = Движения.ТоварыПолученные;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра. 
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	мТаблицаПоТаре = ТаблицаПоТаре.Скопировать();
	мТаблицаПоТаре.Колонки.ДоговорОрганизация.Имя = "Организация";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара,"СтатусПолучения");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыПолученные.ВыполнитьПриход();
	КонецЕсли;  
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()	

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента, ТаблицаПоОплатамПоставщикам )

	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	//Особенность данного документа при допроведении - перед вызовом процедуры общего модуля
	//	необходимо восстановить значение параметра СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	//	в соответствии со значением реквизита документа
	мИзменилиСтруктуруШапкиДокумента = ложь;
	Если ДополнительныеСвойства.Свойство("ЭтапПроведения") 
		И ОтражатьВУправленческомУчете
		И ДополнительныеСвойства.ЭтапПроведения = "Допроведение"
		 Тогда
		СтруктураШапкиДокумента.ОтражатьВУправленческомУчете=истина;
		мИзменилиСтруктуруШапкиДокумента = истина;
	КонецЕсли;	
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, Дата, "ОплатаПоставщикам", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
	//Вернем обратно значение СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	Если мИзменилиСтруктуруШапкиДокумента Тогда
		СтруктураШапкиДокумента.ОтражатьВУправленческомУчете=Ложь;
	КонецЕсли;	

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента,
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	Отказ, Заголовок)
	Перем КэшВидовСубконтоПоСчетам;
	
	//Для физ лиц можно делать движения по единому налогу без бух учета!
	Если (СтруктураШапкиДокумента.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо ИЛИ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
		
		ТаблицаПлатежей			= ОплатаПоставщикам.Выгрузить();
		ТаблицаПоЕдиномуНалогу	= ТаблицаПоТоварам.Скопировать();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоПрочее, ТаблицаПоЕдиномуНалогу);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПлатежей, ТаблицаПоЕдиномуНалогу);
		ТаблицаПоЕдиномуНалогу.Свернуть("СтатьяДекларацииПоЕдиномуНалогу","Сумма");
		ДвиженияПоЕдиномуНалогуРегл(СтруктураШапкиДокумента, ТаблицаПоЕдиномуНалогу, РежимПроведения, Отказ, Заголовок);
		
	КонецЕсли;	
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРег = мВалютаРегламентированногоУчета;
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, ТаблицаПоТаре, , Ложь, СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете);
		
	// Формирование проводок.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПроводкиБУ = Движения.Хозрасчетный;
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.СформироватьПроводкиПоПоступлениюТМЦ(СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, , , СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете);
	
	ДатаДока   = Дата;
	
	Если СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СчетРасчетовСПодотчетником = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте;
	Иначе
		СчетРасчетовСПодотчетником = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
		РасчетыВВалюте = Ложь;
	Иначе
		РасчетыВВалюте = Истина;
	КонецЕсли;
	
	//Проводки по расчетам с поставщиками
	СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок,СчетРасчетовСПодотчетником);
	Если Не (СтруктураПараметровДДС = Ложь) тогда
		
		СтруктураДвижений 	   = Новый Структура("ПроводкиБУ, ПриобретенияНалоговыйУчет, ПродажиНалоговыйУчет", ПроводкиБУ, Движения.ПриобретенияНалоговыйУчет, Неопределено); 
		БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(СтруктураПараметровДДС,СтруктураДвижений,мВалютаРегламентированногоУчета,РежимПроведения,ЭтотОбъект,Отказ);
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			Если    СтруктураШапкиДокумента.ЕстьНДС
				ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаОплата(СтруктураПараметровДДС,СтруктураДвижений,мВалютаРегламентированногоУчета,РежимПроведения,ЭтотОбъект,Отказ);
			КонецЕсли;	
		КонецЕсли;	
		
		Если РасчетыВВалюте тогда
			БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеОплата(СтруктураПараметровДДС,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
		КонецЕсли;
		
	Иначе
		
		Для каждого СтрокаТаблицы Из ТаблицаПоОплатамПоставщикам Цикл
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			Проводка.Содержание  = "Оплата поставщику";
			Проводка.Сумма       = СтрокаТаблицы.ПроводкаСумма;
			
			Проводка.СчетДт                 = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
			Проводка.СубконтоДт.Контрагенты = СтрокаТаблицы.Контрагент;
			Проводка.СубконтоДт.Договоры    = СтрокаТаблицы.ДоговорКонтрагента;
			Проводка.СубконтоДт.Сделки      = СтрокаТаблицы.СделкаРегл;
			
			Если СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				Проводка.ВалютаДт           = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт    = СтрокаТаблицы.ПроводкаСумма / СтруктураШапкиДокумента.КурсВалютыДокумента * СтруктураШапкиДокумента.КратностьВалютыДокумента;
				
			КонецЕсли;
			
			Проводка.СчетКт                 = СчетРасчетовСПодотчетником;
			Проводка.СубконтоКт.РаботникиОрганизации  = СтруктураШапкиДокумента.ФизЛицо;
			
			Если СчетРасчетовСПодотчетником.Валютный Тогда
				
				Проводка.ВалютаКт           = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт    = СтрокаТаблицы.ПроводкаСумма / СтруктураШапкиДокумента.КурсВалютыДокумента * СтруктураШапкиДокумента.КратностьВалютыДокумента;
				
			КонецЕсли;
			
		КонецЦикла; 	

	КонецЕсли; // ОтражатьВБухгалтерскомУчете
	
		
	// удалим забалансовые суммы
	УдалитьЗабалансовыеСуммы(ТаблицаПоТоварам);
	УдалитьЗабалансовыеСуммы(ТаблицаПоТаре);
	УдалитьЗабалансовыеСуммы(ТаблицаПоПрочее);
	
	// НДС 
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, СчетРасчетовСПодотчетником, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		//Учет курсовых разниц
		Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
			СтруктураПараметровКР =БухгалтерскийУчет.ПодготовкаСтруктурыПараметровДляПереоценкиСчета(Ссылка,Заголовок);
			ПроводкиБУ.Записать(Ложь);
			БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(СтруктураПараметровКР,ПроводкиБУ,мВалютаРегламентированногоУчета,Истина);
			ПроводкиБУ.Записать(Ложь);
		КонецЕсли; // Учет курсовых разниц
		
	КонецЕсли;
	
	ПроводкиБУ.Записать(Ложь);
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()	

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НДС

Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "ВалютаУправленческогоУчета"      ,     "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "КурсВалютыУправленческогоУчета"  , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика" , "НеВключатьНДСВСтоимостьПартий"   , "НеВключатьНДСВСтоимостьПартий");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"     , "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()

Процедура ДополнитьСтруктуруПолейТабличнойЧастиПрочееУпр(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("НДС",	                "СуммаНДС");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиПрочееУпр()	

//Выполняет заполнение счетов учета в переданной строке табличной части
//  
Процедура ЗаполнитьТоварыПоОснованиюРегл(СтрокаТабличнойЧасти)

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете);

КонецПроцедуры

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетаУчетаНоменклатуры=Истина) Экспорт
		
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ,  ЗаполнятьСчетаУчетаНоменклатуры);
	ЗаполнитьСчетаРасчетаСКонтрагентом(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()    

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьСчетаУчетаНоменклатуры=Истина) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, , ЗаполнятьСчетаУчетаНоменклатуры);

КонецПроцедуры 

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)

	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли; 
	
	ТаблицаТоваров.Колонки.Добавить("СкладПроводок", Новый описаниеТипов("СправочникСсылка.Склады"));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
			Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.Склад;
			ИначеЕсли СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				// если склад в табличной части не заполнен - тогда переписываем его из ордера
				Если СтрокаТаблицы.Склад = Неопределено тогда
					СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.ПриходныйОрдерСклад;
				Иначе
					СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.Склад;
				КонецЕсли;

			КонецЕсли;
		Иначе
			Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.СкладОрдер;
			ИначеЕсли ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				Если СтруктураШапкиДокумента.Свойство("СкладПриходногоОрдера") Тогда
					СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.СкладПриходногоОрдера;
				Иначе
					СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.СкладОрдер.Склад;	
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ(     СтрокаТаблицы.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			    ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
		
			    СтрокаТаблицы.СделкаРегл = Неопределено;
		
		КонецЕсли;
		
	КонецЦикла;  
		
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", 			ТаблицаТоваров, 	СтруктураШапкиДокумента);
	
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(
		ТаблицаТоваров, 
		СтруктураШапкиДокумента, 
		ПогрешностиОкругления, 
		Истина,     // ЭтоПриобретение
		Ложь,       // ЭтоУслуги
		"Сумма", // ИмяКолонкиСумма
		Ложь
	);


КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()	

Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления)

    ТаблицаТары.Колонки.Добавить("СкладПроводок", Новый описаниеТипов("СправочникСсылка.Склады"));
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		Если СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
			Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.Склад;
			ИначеЕсли СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				// если склад в табличной части не заполнен - тогда переписываем его из ордера
				Если СтрокаТаблицы.Склад = Неопределено тогда
					СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.ПриходныйОрдерСклад;
				Иначе
					СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.Склад;
				КонецЕсли;

			КонецЕсли;
		Иначе
			Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.СкладОрдер;
			ИначеЕсли ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				Если СтруктураШапкиДокумента.Свойство("СкладПриходногоОрдера") Тогда
					СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.СкладПриходногоОрдера;
				Иначе
					СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.СкладОрдер.Склад;	
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ(     СтрокаТаблицы.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			    ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
		
			    СтрокаТаблицы.СделкаРегл = Неопределено;
		
		КонецЕсли;
		
	КонецЦикла;

	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("ВозвратнаяТара", ТаблицаТары, СтруктураШапкиДокумента);	
	
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(
					ТаблицаТары, 
					СтруктураШапкиДокумента, 
					ПогрешностиОкругления, 
					Истина,     // ЭтоПриобретение
					Ложь,       // ЭтоУслуги
					"Стоимость", // ИмяКолонкиСумма
					Ложь
				  );
	

КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

Процедура ПодготовитьТаблицуПоОплатеРегл(ТаблицаПоОплате, СтруктураШапкиДокумента)
	
	ТаблицаПоОплате.Колонки.Добавить("ПроводкаСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоОплате.Колонки.Добавить("СделкаРегл", БухгалтерскийУчетРасчетовСКонтрагентами.ОпределитьВозможныеТипыСделкиРегл());

	ВалютаРег      = мВалютаРегламентированногоУчета;
	Данные         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
	
	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаПоОплате Цикл

		Если СтрокаТаблицы.ВалютаДоговора = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = СтрокаТаблицы.СуммаВзаиморасчетов;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 ВалютаРег,
			                                 СтруктураШапкиДокумента.КурсВалютыДокумента,
			                                 Данные.Курс,
			                                 СтруктураШапкиДокумента.КратностьВалютыДокумента,
			                                 Данные.Кратность);
		КонецЕсли;

		Если     СтрокаТаблицы.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			 ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		
			 СтрокаТаблицы.СделкаРегл = СтрокаТаблицы.Сделка;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуПоОплатеРегл()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если ОтражатьВБухгалтерскомУчете Тогда

		
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтруктураШапкиДокумента.ЕстьНДС Тогда
			
			// Для учета в подсистеме НДС
			СтруктураОбязательныхПолей.Вставить("Поставщик");
			СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
			
		КонецЕсли;
		
		
		
	КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл()	

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиОплатаПоставщикамРегл(СтруктураОбязательныхПолей)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиОплатаПоставщикамРегл()	

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиПрочееРегл(РеквизитыСтр, СтруктураШапкиДокумента)

	Если ОтражатьВБухгалтерскомУчете Тогда
		
        РеквизитыСтр = РеквизитыСтр + ", ПодразделениеОрганизации";
		
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтруктураШапкиДокумента.ЕстьНДС Тогда
			
			РеквизитыСтр = РеквизитыСтр + ",СтавкаНДС";
			
		КонецЕсли;
		

	КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиПрочееРегл()	

Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураШапкиДокумента)    
	
	СтруктураПолей.Вставить("СчетУчетаБУ"        , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНДС"       , "СчетУчетаНДС");
	СтруктураПолей.Вставить("Забалансовый"       , "СчетУчетаБУ.Забалансовый");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"       , "НалоговоеНазначение");  
	СтруктураПолей.Вставить("ВидДеятельностиНДС"        , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  , "НалоговоеНазначение.ВидНалоговойДеятельности");
	
	СтруктураПолей.Вставить("СуммаНДСПропорциональноКредит" , "СуммаНДСПропорциональноКредит");
	
	СтруктураПолей.Вставить("СтатьяДекларацииПоЕдиномуНалогу"		, "СтатьяДекларацииПоЕдиномуНалогу");	

	//Для определения счетов учета при проведении документов
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("СкладВидСклада"            , "ПриходныйОрдер.Склад.ВидСклада");
	Иначе
		СтруктураПолей.Вставить("СкладВидСклада"            , "Склад.ВидСклада");
	КонецЕсли;  
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()

Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураШапкиДокумента)
	
	СтруктураПолей.Вставить("СчетУчетаБУ"  , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаРасчетовПоТаре"	, "СчетУчетаРасчетовПоТаре");
	СтруктураПолей.Вставить("Забалансовый"              , "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("НалоговоеНазначение"       , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"        , "НалоговоеНазначение.ВидДеятельностиНДС");
	
	//Для определения счетов учета при проведении документов
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("СкладВидСклада"            , "ПриходныйОрдер.Склад.ВидСклада");
	Иначе
		СтруктураПолей.Вставить("СкладВидСклада"            , "Склад.ВидСклада");
	КонецЕсли;
	
	СтруктураПростыхПолей.Вставить("СчетУчетаНУ"         , ПланыСчетов.Налоговый.Запасы);
	СтруктураПростыхПолей.Вставить("СтавкаНДС"           , Перечисления.СтавкиНДС.НеНДС);
	СтруктураПростыхПолей.Вставить("НДС"                 , 0);
	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"        , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл()	

Процедура ДополнитьСтруктуруПолейТабличнойЧастиОплатаПоставщикамРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", "СчетУчетаРасчетовСКонтрагентом");
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураПолей.Вставить("СтатьяДекларацииПоЕдиномуНалогу", "СтатьяДекларацииПоЕдиномуНалогу");	
	КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиОплатаПоставщикамРегл()	

Процедура ДополнитьСтруктуруПолейТабличнойЧастиПрочееРегл(СтруктураПолей, СтруктураШапкиДокумента)
	
	СтруктураПолей.Вставить("НоменклатурнаяГруппа",     "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("ПодразделениеОрганизации", "ПодразделениеОрганизации");
	СтруктураПолей.Вставить("ОбъектСтроительства", 			   "ОбъектСтроительства");
	СтруктураПолей.Вставить("Забалансовый", 				   "СчетЗатрат.Забалансовый");
	СтруктураПолей.Вставить("СчетЗатрат",   "СчетЗатрат");
	СтруктураПолей.Вставить("Субконто1",    "Субконто1");
	СтруктураПолей.Вставить("Субконто2",    "Субконто2");
	СтруктураПолей.Вставить("Субконто3",    "Субконто3");
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	СтруктураПолей.Вставить("СтавкаНДС",                       "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаНУ" 					, "СуммаНУ");
	СтруктураПолей.Вставить("СуммаНДСПропорциональноКредит" , "СуммаНДСПропорциональноКредит");
	
	СтруктураПолей.Вставить("НалоговоеНазначение",             "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности",        "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДС",		       "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат" , "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("ВидДеятельностиНДСДоходовИЗатрат" , "НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиДоходовИЗатрат" ,"НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности");

	СтруктураПолей.Вставить("СтатьяДекларацииПоЕдиномуНалогу"		, "СтатьяДекларацииПоЕдиномуНалогу");	

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиПрочееРегл()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);
	Если ТипЗнч(СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
		СтруктураШапкиДокумента.Вставить("ВидСклада", СкладОрдер.ВидСклада);
	КонецЕсли;
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "ВидСклада",       "ВидСклада");
	Иначе
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "Склад.ВидСклада", "ВидСклада");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "Склад",           "СкладПриходногоОрдера");
	КонецЕсли;
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                  , "ВедениеУчетаПоПроектам");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");

	// Дополним полями, нужными для упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПрочее, ТаблицаПоТаре) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();
	СтруктураПростыхПолей = Новый Структура;

	СтруктураПолей.Вставить("Услуга"               , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"             , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"     , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ЗаказПокупателя"      , "Заказ");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"  , "Заказ.ВидОперации");
	СтруктураПолей.Вставить("Склад"                , "Склад");
	СтруктураПолей.Вставить("ВидСклада"            , "Склад.ВидСклада");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя", "Заказ.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("Цена"                                 , "Цена");
	СтруктураПолей.Вставить("Коэффициент"                          , "Коэффициент");
	СтруктураПолей.Вставить("Контрагент"						   , "Поставщик");
	СтруктураПолей.Вставить("ДоговорКонтрагента"				   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("НеОтноситьНаЗатратыПоНУ" , 	"ДоговорКонтрагента.НеОтноситьНаЗатратыПоНУ"); 
	СтруктураПолей.Вставить("Поставщик"            ,          "Поставщик"); 
	//СтруктураПолей.Вставить("СчетУчетаНДС"         ,          "СчетУчетаНДС"); 
	СтруктураПолей.Вставить("ДокументПолучения"    ,          "ПриходныйОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения" , "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("ПриходныйОрдерСклад"  ,          "ПриходныйОрдер.Склад");
	СтруктураПолей.Вставить("БезПраваПродажи"      ,          "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"	, "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов" 	, "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"	, "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ВидДоговора"			, "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("СделкаРегл"			, "Сделка");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовРегл"	, "ДоговорКонтрагента.ВедениеВзаиморасчетовРегл");
	
	// Дополним полями, нужными для регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураШапкиДокумента);

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Получим необходимые данные для проведения и проверки заполнения  
	// данные по табличной части "Прочее".
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидДокВходящий"          , "ВидДокВходящий");
	СтруктураПолей.Вставить("НомерВходящегоДокумента" , "НомерВходящегоДокумента");
	СтруктураПолей.Вставить("ДатаВходящегоДокумента"  , "ДатаВходящегоДокумента");   
	СтруктураПолей.Вставить("Содержание",          "Содержание");
	СтруктураПолей.Вставить("Номенклатура",        "Номенклатура");
	СтруктураПолей.Вставить("Услуга",              "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор" ,              "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект",            "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Заказ",               "Заказ");
	СтруктураПолей.Вставить("СтатьяЗатрат",        "СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат",      "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ОбъектСтроительства", "ОбъектСтроительства");
	СтруктураПолей.Вставить("Количество",          "Количество");
	СтруктураПолей.Вставить("Сумма",               "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС",           "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаНДС",            "СуммаНДС");
	СтруктураПолей.Вставить("НДС", 				   "СуммаНДС");
	СтруктураПолей.Вставить("Поставщик",           "Поставщик"); 
	СтруктураПолей.Вставить("Подразделение",       "Подразделение");
	//СтруктураПолей.Вставить("СчетУчетаНДС",        "СчетУчетаНДС"); 
	СтруктураПолей.Вставить("СпособРаспределенияЗатратНаВыпуск", "СпособРаспределенияЗатратНаВыпуск");
	СтруктураПолей.Вставить("Продукция",				"Продукция");
	СтруктураПолей.Вставить("ХарактеристикаПродукции", 	"ХарактеристикаПродукции");
	СтруктураПолей.Вставить("СерияПродукции",			"СерияПродукции");
	СтруктураПолей.Вставить("Проект",			"Проект");	

	// Добавим поля которые нужны для взаиморасчетов
	СтруктураПолей.Вставить("Контрагент", 		  "Поставщик");
	СтруктураПолей.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
	СтруктураПолей.Вставить("НеОтноситьНаЗатратыПоНУ" , "ДоговорКонтрагента.НеОтноситьНаЗатратыПоНУ"); 
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"	, "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов" 	, "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"	, "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ВидДоговора"			, "ДоговорКонтрагента.ВидДоговора");
	// Добавим поля, нужные для нормирования суточных
	СтруктураПолей.Вставить("ЭтоСуточные"				, "ЭтоСуточные");
    СтруктураПолей.Вставить("СуточныеДатаС"				, "СуточныеДатаС");
	СтруктураПолей.Вставить("СуточныеДатаПо"			, "СуточныеДатаПо");

	СтруктураПолей.Вставить("КомандировкаЗарубеж", "КомандировкаЗарубеж");
	СтруктураПолей.Вставить("КоличествоСуток"    , "КоличествоСуток");
	СтруктураПолей.Вставить("ПроектЗатрат", "Проект");
	
	СтруктураПолей.Вставить("СделкаРегл"			, "Сделка");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовРегл"	, "ДоговорКонтрагента.ВедениеВзаиморасчетовРегл");
    
	// Дополним полями, нужными для упр. и регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиПрочееУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиПрочееРегл(СтруктураПолей, СтруктураШапкиДокумента);

	РезультатЗапросаПоПрочее = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Прочее", СтруктураПолей, СтруктураПростыхПолей, );
	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТара();
	СтруктураПростыхПолей = Новый Структура;
	СтруктураПолей.Вставить("ЗаказПокупателя"      , "Заказ");
	СтруктураПолей.Вставить("ВалютаДоговора"       , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорКонтрагента"   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("НеОтноситьНаЗатратыПоНУ" ,"ДоговорКонтрагента.НеОтноситьНаЗатратыПоНУ"); 
	СтруктураПолей.Вставить("ДоговорОрганизация"   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"     , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Склад"                , "Склад");
	СтруктураПолей.Вставить("ВидСклада"            , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"  , "Заказ.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя", "Заказ.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("Контрагент"           ,          "Контрагент");
	СтруктураПолей.Вставить("Поставщик"            ,          "Контрагент");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения" , "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("Сделка"                        , "Сделка");
	СтруктураПолей.Вставить("СделкаОрганизация"             , "Сделка.Организация");
	СтруктураПолей.Вставить("ДокументПолучения"             , "ПриходныйОрдер");
	СтруктураПолей.Вставить("ПриходныйОрдерСклад"           , "ПриходныйОрдер.Склад");
	СтруктураПолей.Вставить("БезПраваПродажи"               , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	// Добавим поля которые нужны для взаиморасчетов
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"	, "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов" 	, "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"	, "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ВидДоговора"			, "ДоговорКонтрагента.ВидДоговора");
	
	СтруктураПолей.Вставить("СделкаРегл"			    , "Сделка");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовРегл"	, "ДоговорКонтрагента.ВедениеВзаиморасчетовРегл");

	// Дополним полями, нужными для регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураШапкиДокумента);

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей);
	
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругленияТара);
	ТаблицаПоПрочее  = ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьПризнакАмортизируетсяПриПоступлении(
			ТаблицаПоТоварам, // ТаблицаПоТоварам
			ТаблицаПоТаре, // ТаблицаПоТаре
			ТаблицаПоПрочее, // ТаблицаПоУслугам
			Неопределено, // ТаблицаПоОборудованию
			Неопределено, // ТаблицаПоОбъектамСтроительства 
			Неопределено, //ТаблицаПоБланкам 
			"СчетЗатрат" // ИмяРеквизитаСчетЗатрат 
		);
	КонецЕсли; 	

КонецПроцедуры // ПодготовитьТаблицыДокумента()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ОбработкаЗаполненияУпр(Основание);

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ФлагВключить = Ложь;
	ФлагВыключить = Ложь;
	
	Для каждого стрАвансы Из ВыданныеАвансы Цикл
		Если ТипЗнч(стрАвансы.ДокументАванса) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			ФлагВключить = Истина;
		КонецЕсли;
		Если ТипЗнч(стрАвансы.ДокументАванса) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			ФлагВыключить = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если (ФлагВключить И НЕ НаличныйРасчет) ИЛИ (ФлагВыключить И НаличныйРасчет) Тогда
		//Отказ = Истина;
		Сообщить("Вид операции документа """ + СокрЛП(ЭтотОбъект) + """ не соответствует виду расчетного документа", СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Товары,               	// ТабличнаяЧастьТовары
			ВозвратнаяТара,       	// ТабличнаяЧастьВозвратнаяТара
			Прочее,                 // ТабличнаяЧастьУслуги
			Неопределено,         	// ТабличнаяЧастьОборудование
			Неопределено, 			// ТабличнаяЧастьОбъектыСтроительства
			Неопределено            // ТабличнаяЧастьБланкиСтрогогоУчета
		);
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Прочее);

	// Заполнить склад и ордер в табличных частях
	СкладИзШапки    =  (Не мУказаниеСкладовВТЧ) И (ВидПоступления <> Перечисления.ВидыПоступленияТоваров.ПоОрдеру);

	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, Товары,         СкладИзШапки);
	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, ВозвратнаяТара, СкладИзШапки);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ОплатаПоставщикам.Итог("Сумма") + Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Прочее");
	//Смартис Лиманчук начало 05.04.2013
	//Если ПоИнвентаризации Тогда
	//	СуммаДокумента = ВыданныеАвансы.Итог("Сумма");
	//КонецЕсли;
	//Смартис Лиманчук окончание 05.04.2013
	
	Если Не мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.ЗаполнитьПроектВСтрокахТабЧасти(ЭтотОбъект, Прочее);
	КонецЕсли;
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	
	мУдалятьДвижения = НЕ ЭтоНовый();    
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПрочее, ТаблицаПоТаре;
	//ИЗМЕНЕНО Верескул Игорь(Начало 22.03.2018
	Если  ТребуетсяПодписьГенеральногоДиректора ИЛИ ТребуетсяПодписьРуководителя ИЛИ ТребуетсяПодписьФинансовогоОтдела ИЛИ СтатусОшибки Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Внимание! Не установлены все необходимые подписи!!! Документ не будет проведен!";
		Сообщение.Сообщить(); 
		Отказ = Истина;
		Возврат;
    КонецЕсли; 
    Если НЕ РольДоступна("КонтролерАвансовыхОтчетов") Тогда
        Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Право проведения есть только у контролера авансовых отчетов";
		Сообщение.Сообщить(); 
		Отказ = Истина;
		Возврат;	
    КонецЕсли;
    Если ВыданныеАвансы.Количество()= 0 Тогда
    	Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Внимание! Не заполнена таблица авансов! Проведение невозможно!";
		Сообщение.Сообщить(); 
		Отказ = Истина;
		Возврат;
    КонецЕсли;
	//Окончание)Верескул Игорь 
    
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, Ложь);

	// При получении учетной политики произошли ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Авансы".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументАванса",            "ДокументАванса");
	СтруктураПолей.Вставить("ДокументАвансаОрганизация", "ДокументАванса.Организация");
	СтруктураПолей.Вставить("Сумма",                     "Сумма");

	РезультатЗапросаПоВыданнымАвансам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Оплата поставщикам".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Контрагент"                            , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                    , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"                 , "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетовРегл"             , "ДоговорКонтрагента.ВедениеВзаиморасчетовРегл");
	СтруктураПолей.Вставить("ВалютаДоговора"                        , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"                    , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("Организация"                    		, "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("Сделка"                                , "Сделка");
	СтруктураПолей.Вставить("СделкаОрганизация"                     , "Сделка.Организация");
	СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом"         , "ДокументРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("Проект"                                , "Проект");
	СтруктураПолей.Вставить("Сумма"                                 , "Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"                   , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("ЗаТару"								, "ЗаТару");
	
	СтруктураСложныхПолей = Новый Структура;
	СтруктураПолей.Вставить("ВестиПоДокументамРасчетовСКонтрагентом", "ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом");
	
	// Дополним полями, нужными для регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиОплатаПоставщикамРегл(СтруктураПолей);
	
	РезультатЗапросаПоОплатеПоставщикам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаПоставщикам", СтруктураПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицы для проведения.
	ТаблицаПоАвансам = РезультатЗапросаПоВыданнымАвансам.Выгрузить();
	ТаблицаПоОплате  = ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплатеПоставщикам, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПрочее, ТаблицаПоТаре);
	
	Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		СчетРасчетовСПодотчетником = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте;
		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
		ТаблицыДокумента.Вставить("ТаблицаПоПрочее",ТаблицаПоПрочее);
		БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАвансаПодотчетника(ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, ТаблицыДокумента, Отказ,СчетРасчетовСПодотчетником)
	КонецЕсли;

	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		Для каждого СтрокаОплаты из ОплатаПоставщикам Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
							СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
							мВалютаРегламентированногоУчета, Истина,Отказ, Заголовок,"Оплата поставщикам, строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;

	КонецЕсли;

	// Проверить заполнение ТЧ
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПрочее(ТаблицаПоПрочее, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы(ТаблицаПоАвансам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	 
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоАвансам, ТаблицаПоОплате, ТаблицаПоПрочее,
							Отказ, Заголовок);
	КонецЕсли;						
	
	Если НЕ Отказ Тогда
		ДвиженияЗатрат = Движения.ЗатратыБухгалтерскийУчет;
		ДвиженияЗатрат.Прочитать();
		
		тзЗатраты = ДвиженияЗатрат.Выгрузить(, "СтатьяЗатрат, Подразделение, Сумма");
		тзЗатраты.Свернуть("СтатьяЗатрат, Подразделение", "Сумма");
		
		Если тзЗатраты.Количество() > 0 Тогда
			тзЗатратыПоПодразделениям = Бюджетирование.ВыполнитьКонтрольПревышенияБюджета(ЭтотОбъект, тзЗатраты, Отказ);
			
			Если НЕ ЭтотОбъект.ПревышенБюджет И тзЗатратыПоПодразделениям <> Неопределено Тогда
				Бюджетирование.СформироватьДвиженияФактическихЗатратПоБюджетам(ЭтотОбъект, тзЗатратыПоПодразделениям);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ПревышенБюджет Тогда
		Бюджетирование.ОчиститьЗаписиРегистраПревышений(ЭтотОбъект);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоТаре", ТаблицаПоТоварам,ТаблицаПоТаре));

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	//Смартис Лиманчук начало 01.11.2012
	Для каждого Стр Из ВыданныеАвансы Цикл
		Если ТипЗнч(Стр.ДокументАванса) <> Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			Продолжить;
		ИначеЕсли НЕ Стр.ДокументАванса.Проведен Тогда
			Продолжить;
		ИначеЕсли НаличныйРасчет И Стр.ДокументАванса.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал Тогда
			Продолжить;
		ИначеЕсли НЕ НаличныйРасчет И Стр.ДокументАванса.ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал Тогда
			Продолжить;
		КонецЕсли;
		ДокументАванса = Стр.ДокументАванса.ПолучитьОбъект();
		ДокументАванса.ВидОперации = ?(НаличныйРасчет,Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетникуНал,Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику);
		ДокументАванса.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла; 
	//Смартис Лиманчук окончание 01.11.2012
	
	// Удаление записей регистрации из всех последовательностей

КонецПроцедуры

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений по бухгалтерскому и налоговому учетам
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления) Экспорт
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСВал"         , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСВал"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в проводках в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСРегл"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСРегл"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в проводках в валюте документа
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСВал" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСВал"    , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСВал"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы для налогового учета
	ТаблицаТоваров.Колонки.Добавить("СтоимостьНУ"                 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал    = СтрокаТаблицы.Стоимость + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсВалютыДокумента, 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												СтруктураШапкиДокумента.КратностьВалютыДокумента,
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
												, ПогрешностиОкругления, "СуммаСНДСРегл");
			СтрокаТаблицы.СуммаНДСРегл  = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаСНДСРегл,
												СтруктураШапкиДокумента.УчитыватьНДС,
												ИСТИНА,
												СтрокаТаблицы.СтавкаНДС,
												ПогрешностиОкругления);
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
		// Рассчитаем суммы в проводках в валюте регл. учета
		СтрокаТаблицы.ПроводкиСуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаСНДСВал = СтрокаТаблицы.СуммаСНДСВал;
		// Определим значение НДС в проводках
		Если СтруктураШапкиДокумента.УчитыватьНДС = Ложь Тогда
			// в документе НДС не указывается
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
		ИначеЕсли СтрокаТаблицы.Забалансовый = Истина Тогда
			// по забалансовому счету НДС не выделяется
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
		Иначе
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.СуммаНДСРегл;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = СтрокаТаблицы.СуммаНДСВал
		КонецЕсли;
		СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаБезНДСВал = СтрокаТаблицы.ПроводкиСуммаСНДСВал - СтрокаТаблицы.ПроводкиСуммаНДСВал;
													
		// Рассчитаем суммы налогового учета
	    СтрокаТаблицы.СтоимостьНУ = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет счета учета по таре в строке табличной части
//
Процедура ЗаполнитьСчетаРасчетаСКонтрагентом(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	МетаданныеДокумента = ЭтотОбъект.Метаданные();
	
	Если ИмяТабЧасти = "Товары" Или ИмяТабЧасти = "Прочее" Тогда
		СчетаРасчетовСКонтрагентом = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, СтрокаТЧ.Поставщик, СтрокаТЧ.ДоговорКонтрагента);
	Иначе
		СчетаРасчетовСКонтрагентом = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, СтрокаТЧ.Контрагент, СтрокаТЧ.ДоговорКонтрагента);	
	КонецЕсли; 
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаРасчетовПоТаре", МетаданныеДокумента, ИмяТабЧасти) Тогда
		Если ЗаполнятьБУ = Истина Тогда
			СтрокаТЧ.СчетУчетаРасчетовПоТаре = СчетаРасчетовСКонтрагентом.СчетУчетаТары;
		Иначе
			СтрокаТЧ.СчетУчетаРасчетовПоТаре = ПланыСчетов.Хозрасчетный.ПустаяСсылка();	
		КонецЕсли;
	КонецЕсли;
	

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
		Если ЗаполнятьБУ  = Истина Тогда
			СтрокаТЧ.СчетУчетаНДС = СчетаРасчетовСКонтрагентом.СчетУчетаНДСПриобретений;	
		Иначе
			СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаРасчетаСКонтрагентом

Процедура УдалитьЗабалансовыеСуммы(ТаблицаЗначений)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Забалансовый", Истина);
	НайденныеСтроки = ТаблицаЗначений.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из НайденныеСтроки Цикл
		ТаблицаЗначений.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// 
Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС 
		И НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		// Налоговый учет НП или НДС не ведется
		Возврат;
	КОнецЕсли;
	
	НаборДвиженийНалоговыйУчет		        = Движения.ПриобретенияНалоговыйУчет; 	
	НаборДвиженийОжидаемыИПодтвержденныйНДС = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений; 	
	
	ТаблицаДвиженийНалоговыйУчет		        = НаборДвиженийНалоговыйУчет.ВыгрузитьКолонки(); 	
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДС   = НаборДвиженийОжидаемыИПодтвержденныйНДС.ВыгрузитьКолонки(); 	
	
	ТаблицаДвиженийНалоговыйУчетТара		        = ТаблицаДвиженийНалоговыйУчет.Скопировать(); 	
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара   = ТаблицаДвиженийОжидаемыИПодтвержденныйНДС.Скопировать(); 	
	
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
    ТаблицаКопия.Свернуть("СделкаРегл, СтавкаНДС, НалоговоеНазначение, ДоговорКонтрагента, ВалютаВзаиморасчетов, Амортизируется", 
						  "СуммаСНДСВал, СуммаБезНДСВал, СуммаНДСВал, СуммаНДСВалИсходный");
	ТаблицаНалоговыйУчет = ТаблицаКопия.Скопировать();
	
	// ПРОЧЕЕ
	ТаблицаКопия = ТаблицаПоПрочее.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СтавкаНДС, НалоговоеНазначение, ДоговорКонтрагента, ВалютаВзаиморасчетов, Амортизируется",
	                      "СуммаСНДСВал, СуммаБезНДСВал, СуммаНДСВал, СуммаНДСВалИсходный");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаНалоговыйУчет);
	
	Сч = 0;
	Пока Сч < ТаблицаНалоговыйУчет.Количество() Цикл
		СтрокаТаблицыПриобретений = ТаблицаНалоговыйУчет[Сч];
		
		Если    НЕ (ЗначениеЗаполнено(СтрокаТаблицыПриобретений.ДоговорКонтрагента))
			ИЛИ НЕ (СтрокаТаблицыПриобретений.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета) Тогда
			ТаблицаНалоговыйУчет.Удалить(СтрокаТаблицыПриобретений);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
		
	КонецЦикла; 
	
	ТаблицаНалоговыйУчет.Колонки.Добавить("СуммаНДСПропорционально");
	Для Каждого СтрокаКопии Из ТаблицаНалоговыйУчет Цикл
		Если СтрокаКопии.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
			СтрокаКопии.СуммаНДСПропорционально = СтрокаКопии.СуммаНДСВал;
			СтрокаКопии.СуммаНДСВал = СтрокаКопии.СуммаНДСВалИсходный;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаНалоговыйУчет.Колонки.СуммаСНДСВал  .Имя = "СуммаВзаиморасчетов";
	ТаблицаНалоговыйУчет.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
	ТаблицаНалоговыйУчет.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
	ТаблицаНалоговыйУчет.Колонки.СделкаРегл   .Имя  = "Сделка";
	
	// ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
    ТаблицаКопия.Свернуть("СделкаРегл, СтавкаНДС, НалоговоеНазначение, ДоговорКонтрагента, СчетУчетаНДС, ВалютаВзаиморасчетов, Амортизируется",
	                      "СуммаСНДСВал, СуммаБезНДСВал, СуммаНДСВал, ПроводкиСуммаНДСВал");
	ТаблицаНалоговыйУчетТара = ТаблицаКопия.Скопировать();
	
	// приобретение у нерезидента не отражается в подсистеме учета НДС
	Сч = 0;
	Пока Сч < ТаблицаНалоговыйУчетТара.Количество() Цикл
		
		СтрокаТаблицыКопии = ТаблицаНалоговыйУчетТара[Сч];
		
		Если НЕ СтрокаТаблицыКопии.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
			ТаблицаНалоговыйУчетТара.Удалить(СтрокаТаблицыКопии);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
		
	КонецЦикла; 
	
	ТаблицаНалоговыйУчетТара.Колонки.СуммаСНДСВал  .Имя = "СуммаВзаиморасчетов";
	ТаблицаНалоговыйУчетТара.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
	ТаблицаНалоговыйУчетТара.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
	ТаблицаНалоговыйУчетТара.Колонки.СделкаРегл    .Имя = "Сделка";

	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНалоговыйУчет, 	 ТаблицаДвиженийНалоговыйУчет);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНалоговыйУчет, 	 ТаблицаДвиженийОжидаемыИПодтвержденныйНДС);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНалоговыйУчетТара, ТаблицаДвиженийНалоговыйУчетТара);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНалоговыйУчетТара, ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара);
	
	ТаблицаДвиженийНалоговыйУчет.			      ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДС.    ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвиженийНалоговыйУчетТара.		      ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара.ЗаполнитьЗначения(Организация, "Организация");
	
	ТаблицаДвиженийНалоговыйУчетТара.			  ЗаполнитьЗначения(Истина, "ВозвратнаяТара");
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара.ЗаполнитьЗначения(Истина, "ВозвратнаяТара");
	
	ТаблицаДвиженийНалоговыйУчет.    ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика, "Событие");
	ТаблицаДвиженийНалоговыйУчетТара.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика, "Событие");
	
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДС.	  ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, "СобытиеНДС");
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, "СобытиеНДС");
	
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДС.	  ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС, "КодОперации");
	ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС, "КодОперации");
	
	Если СтруктураШапкиДокумента.ЕстьНДС И ТаблицаДвиженийОжидаемыИПодтвержденныйНДС.Количество() > 0 Тогда
		НаборДвиженийОжидаемыИПодтвержденныйНДС.мПериод          = Дата;
		НаборДвиженийОжидаемыИПодтвержденныйНДС.мТаблицаДвижений = ТаблицаДвиженийОжидаемыИПодтвержденныйНДС;

		НаборДвиженийОжидаемыИПодтвержденныйНДС.ВыполнитьПриход();
		НаборДвиженийОжидаемыИПодтвержденныйНДС.Записать();
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ЕстьНДС И ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара.Количество() > 0 Тогда
		НаборДвиженийОжидаемыИПодтвержденныйНДС.мПериод          = Дата;
		НаборДвиженийОжидаемыИПодтвержденныйНДС.мТаблицаДвижений = ТаблицаДвиженийОжидаемыИПодтвержденныйНДСТара;

		НаборДвиженийОжидаемыИПодтвержденныйНДС.ВыполнитьПриход();
		НаборДвиженийОжидаемыИПодтвержденныйНДС.Записать();
	КонецЕсли;	
	
	
	Если ТаблицаДвиженийНалоговыйУчет.Количество() > 0 Тогда
		НаборДвиженийНалоговыйУчет.мПериод          = Дата;
		НаборДвиженийНалоговыйУчет.мТаблицаДвижений = ТаблицаДвиженийНалоговыйУчет;

		НаборДвиженийНалоговыйУчет.ВыполнитьПриход();
		НаборДвиженийНалоговыйУчет.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийНалоговыйУчетТара.Количество() > 0 Тогда
		НаборДвиженийНалоговыйУчет.мПериод          = Дата;
		НаборДвиженийНалоговыйУчет.мТаблицаДвижений = ТаблицаДвиженийНалоговыйУчетТара;

		НаборДвиженийНалоговыйУчет.ВыполнитьПриход();
		НаборДвиженийНалоговыйУчет.Записать();
	КонецЕсли;
	
	// теперь покажем оплату по поступившим затратм и товарам
	ТаблицаДвиженийНалоговыйУчет.    ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику, "Событие");
	ТаблицаДвиженийНалоговыйУчетТара.ЗаполнитьЗначения(Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику, "Событие");
	
	Если ТаблицаДвиженийНалоговыйУчет.Количество() > 0 Тогда
		НаборДвиженийНалоговыйУчет.мПериод          = Дата;
		НаборДвиженийНалоговыйУчет.мТаблицаДвижений = ТаблицаДвиженийНалоговыйУчет;

		НаборДвиженийНалоговыйУчет.ВыполнитьПриход();
		НаборДвиженийНалоговыйУчет.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийНалоговыйУчетТара.Количество() > 0 Тогда
		НаборДвиженийНалоговыйУчет.мПериод          = Дата;
		НаборДвиженийНалоговыйУчет.мТаблицаДвижений = ТаблицаДвиженийНалоговыйУчетТара;

		НаборДвиженийНалоговыйУчет.ВыполнитьПриход();
		НаборДвиженийНалоговыйУчет.Записать();
	КонецЕсли;
	
КонецПроцедуры 							  

Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, СчетРасчетовСПодотчетником, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ)
	
	// Бухгалтерский учет
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	// Получим таблицу движений по счетам НДС
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СчетУчетаНДС,Контрагент,ДоговорКонтрагента","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	// ПРОЧЕЕ
	ТаблицаКопия = ТаблицаПоПрочее.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СчетУчетаНДС,Контрагент,ДоговорКонтрагента","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
	
	ТаблицаДвижений.Свернуть("СделкаРегл, СчетУчетаНДС,Контрагент,ДоговорКонтрагента","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = "НДС: налоговый кредит: отгрузка";
			Проводка.НомерЖурнала               = "";

			Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			
			Проводка.СчетКт          = СчетРасчетовСПодотчетником;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизации", СтруктураШапкиДокумента.ФизЛицо);
			Проводка.ВалютаКт                   = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт            = СтрокаТаблицы.ПроводкиСуммаНДСВал;
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоЕдиномуНалогуРегл(СтруктураШапкиДокумента, ТаблицаПоЕдиномуНалогу, РежимПроведения, Отказ, Заголовок)
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда	
		Если НЕ СтруктураШапкиДокумента.ЕстьЕдиныйНалог Тогда
			Возврат;
		КонецЕсли;
		ВалютаРег       = мВалютаРегламентированногоУчета;
		ДанныеОВалюте   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
		
		Для Каждого СтрокаПлатеж Из ТаблицаПоЕдиномуНалогу Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтатьяДекларацииПоЕдиномуНалогу) Тогда
				Продолжить;
			КонецЕсли;

			Строка = Движения.КнигаДоходовРасходовПоЕдиномуНалогу.Добавить();
			Строка.Период      = Дата;
							
			Строка.Организация     = Организация;
			Строка.Статья    = СтрокаПлатеж.СтатьяДекларацииПоЕдиномуНалогу;
			
			Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				Строка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.Сумма, ВалютаДокумента, ВалютаРег,
										СтруктураШапкиДокумента.КурсВалютыДокумента, ДанныеОВалюте.Курс, 
										СтруктураШапкиДокумента.КратностьВалютыДокумента, ДанныеОВалюте.Кратность);	
			Иначе
				Строка.Сумма = СтрокаПлатеж.Сумма;
			КонецЕсли;
			
			Строка.НомерПлатежногоДокумента = Номер;
					
		КонецЦикла;
		
	КонецЕсли;	
КонецПроцедуры	

Функция Счет9Класса(Счет)
	
	Счет9Класса = Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ЗатратыДеятельности); 
	
	Возврат(Счет9Класса);
				
КонецФункции

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	//ФлагВключить = Ложь;
	//ФлагВыключить = Ложь;
	//
	//Для каждого стрАвансы Из ВыданныеАвансы Цикл
	//	Если ТипЗнч(стрАвансы.ДокументАванса) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
	//		ФлагВключить = Истина;
	//	КонецЕсли;
	//	Если ТипЗнч(стрАвансы.ДокументАванса) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
	//		ФлагВыключить = Истина;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если (ФлагВключить И НЕ НаличныйРасчет) ИЛИ (ФлагВыключить И НаличныйРасчет) Тогда
	//	//Отказ = Истина;
	//	Сообщить("Вид операции документа не соответствует виду расчетного документа", СтатусСообщения.Внимание);
	//КонецЕсли;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
    ПодписьГенеральногоДиректора = Справочники.Пользователи.ПустаяСсылка();
    
    ПодписьФинансовогоОтдела  = Справочники.Пользователи.ПустаяСсылка();
    
    ПодписьРуководителя = Справочники.Пользователи.ПустаяСсылка();
    СтатусОшибки = Ложь;
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мУказаниеПроектовВТабличнойЧастиДокументов = УправлениеПроектами.УказаниеПроектовВТабличнойЧастиДокументов();
УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления)
                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);
					  
ПревышенБюджет = Ложь;
