Перем мУдалятьДвижения;

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем АвтоЗначенияРеквизитов Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем ТаблицаПлатежейУпр;

//Определение периода движений документа
Перем ДатаДвижений;

Перем РасчетыВозврат;

Перем мСтруктураПараметровДенежныхСредств;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок,СуммаБезКопеек)
	ФорматСтрока  = "Л=uk_UA; ДП=Ложь";
	ПарамПредмета = ВалютаДокумента.ПараметрыПрописиНаУкраинском;
		Результат = ?(СуммаБезКопеек, Цел(СуммаДок), СуммаДок);
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Формирует печатную форму 
	// платежного поручения
	//
	// Параметры:
	//  ТабДок - табличный документ
	//
Функция ПечатьАккредитива() Экспорт

	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если Контрагент.Пустая() Тогда
		Сообщить("Не указан контрагент.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Аккредитив_Аккредитив";
	
	Макет = ПолучитьОбщийМакет("Аккредитив");
	Обл   = Макет.ПолучитьОбласть("Заголовок");
	СуммаБезКопеек  = СчетОрганизации.СуммаБезКопеек;
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ЧислоДаты                = """"+Формат(День(Дата), "ЧЦ=2; ЧДЦ=0; ЧВН=")+"""";
	ДатаПрописью = СокрЛП(Формат(Дата, "Л=uk_UA; ДЛФ = DD"));
	ОбластьМакета.Параметры.МесяцДаты                = СокрЛП(Прав(ДатаПрописью,СтрДлина(ДатаПрописью)-2));

	СведенияОПлательщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата, "uk");
	ОбластьМакета.Параметры.НазваниеОрганизации                 = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПлательщике,    "ПолноеНаименование,", Ложь);
	ОбластьМакета.Параметры.ЕДРПОУОрганизации                   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПлательщике,    "КодПоЕДРПОУ,",        Ложь);
	ОбластьМакета.Параметры.НомерРасчетногоСчетаОрганизации     = СчетОрганизации.НомерСчета;
	ОбластьМакета.Параметры.БанкОрганизации                     = "" + СчетОрганизации.Банк;
	ОбластьМакета.Параметры.МФОБанкаОрганизации                 = СчетОрганизации.Банк.Код;

	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Контрагент, Дата, "uk");
	ОбластьМакета.Параметры.НазваниеЮрФизЛицаКонтрагента                = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПолучателе,  "ПолноеНаименование,", Ложь);
	ОбластьМакета.Параметры.ЕДРПОУЮрФизЛицаКонтрагента                  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПолучателе,  "КодПоЕДРПОУ,",        Ложь);
	ОбластьМакета.Параметры.НомерРасчетногоСчетаЮрФизЛицаКонтрагента    = СчетКонтрагента.НомерСчета;
	ОбластьМакета.Параметры.БанкЮрФизЛицаКонтрагента                    = "" + СчетКонтрагента.Банк;
	ОбластьМакета.Параметры.МФОБанкаЮрФизЛицаКонтрагента                = СчетКонтрагента.Банк.Код;

	ОбластьМакета.Параметры.ВидАккредитива         = ВидАккредитива;

	Если НЕ ЗначениеЗаполнено(СрокДействия) Тогда
		ОбластьМакета.Параметры.ЧислоДатыСрока     = """      """;
		ОбластьМакета.Параметры.МесяцДатыСрока     = "                                                р.";
	Иначе
		ОбластьМакета.Параметры.ЧислоДатыСрока     = """"+Формат(День(СрокДействия), "ЧЦ=2; ЧДЦ=0; ЧВН=")+"""";
		СрокДействияПрописью = СокрЛП(Формат(СрокДействия, "Л=uk_UA; ДЛФ = DD"));
		ОбластьМакета.Параметры.МесяцДатыСрока           = СокрЛП(Прав(СрокДействияПрописью,СтрДлина(СрокДействияПрописью)-2));
	КонецЕсли; 
	ОбластьМакета.Параметры.СуммаСНДСЧислом   = Формат(СуммаДокумента, "ЧЦ=15; ЧДЦ=2") + " грн.";
	ТабДокумент.Вывести(ОбластьМакета);

	Если      СпособВыполнения = Перечисления.СпособыВыполненияАккредитива.ЗаСчетДепозита        Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ВыполнитьЗаСчетДепозита");
	ИначеЕсли СпособВыполнения = Перечисления.СпособыВыполненияАккредитива.ИнкассациейДокументов Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ВыполнитьИнкассациейДокументов");
	ИначеЕсли СпособВыполнения = Перечисления.СпособыВыполненияАккредитива.ЧерезКоррСчет         Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ВыполнитьЧерезКоррСчет");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Выполнить");
	КонецЕсли;
	ОбластьМакета.Параметры.СуммаСНДССтрокой  = ФорматироватьСуммуПрописи(СуммаДокумента,СуммаБезКопеек);
												//ЧислоПрописью(Шапка.СуммаДокумента,"Л=uk_UA; ДП=Ложь",
												//			  "гривня, гривні, гривень, ж, копійка, копійки, копійок, ж");
	ТабДокумент.Вывести(ОбластьМакета);

	Если      СпособПередачиУсловий = Перечисления.СпособыПередачиУсловийАккредитива.Спецсвязь Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("НаправлятьСпецсвязь");
	ИначеЕсли СпособПередачиУсловий = Перечисления.СпособыПередачиУсловийАккредитива.ЭлектроннаяПочта Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("НаправлятьЭлектроннаяПочта");
	ИначеЕсли СпособПередачиУсловий = Перечисления.СпособыПередачиУсловийАккредитива.Телетайп Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("НаправлятьТелетайп");
	ИначеЕсли СпособПередачиУсловий = Перечисления.СпособыПередачиУсловийАккредитива.Другой    Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("НаправлятьДругой");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Направлять");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	Если УсловиеОплаты = Перечисления.УсловияОплатыРасчетныхДокументов.САкцептом Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("АкцептСАкцептом");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("АкцептБезАкцепта");
	КонецЕсли;
	ОбластьМакета.Параметры.ДругоеУсловие = ДругойСпособПередачиУсловий;
	ОбластьМакета.Параметры.ЧейАкцепт     = ЧейАкцепт;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Договор");
	ОбластьМакета.Параметры.НомерДоговора         = ?(ЗначениеЗаполнено(ДоговорКонтрагента.Номер), ДоговорКонтрагента.Номер, "");
	ДатаДокумента								  = Формат(ДоговорКонтрагента.Дата,"ДФ='дд ММММ ггггр.';Л=uk_UA");
	ОбластьМакета.Параметры.ЧислоДатыДоговора     = ?(ЗначениеЗаполнено(ДоговорКонтрагента.Дата), ДатаДокумента, """      """);
	ОбластьМакета.Параметры.МесяцДатыДоговора     = ?(ЗначениеЗаполнено(ДоговорКонтрагента.Дата), Прав(ДатаДокумента, СтрДлина(ДатаДокумента) - 2), "                                     р.");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ОбластьМакета.Параметры.СтрокаСпискаДокументов= ДокументыКПредъявлению;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Дно");
	ОбластьМакета.Параметры.ДополнительныеУсловия = ДополнительныеУсловия;
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции // ПечатьАккредитива()

// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Аккредитив" тогда
		// Управленческая печатная форма документа
		ТабДокумент = ПечатьАккредитива();
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Аккредитив","Аккредитив");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплата()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");
	СтруктураПолей.Вставить("ДатаОплаты","Не указана дата оплаты документа банком!");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты()

		Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
			СтруктураПолей= Новый Структура("Организация, Ответственный, СуммаДокумента");
		Иначе
			СтруктураПолей= Новый Структура("Организация, Контрагент, Ответственный, СуммаДокумента");
		КонецЕсли;
		СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");

		Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
		
		Если Не Отказ Тогда
			
			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);
				
				Если Отказ Тогда
				
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """+ТекстСделка+"""!");
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателя","Счет поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);

				Если Отказ Тогда
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!");
				КонецЕсли;
						
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	СтруктураКурсыВалют = СформироватьСтруктуруКурсыВалютУпр();
	ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента);
	ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента);
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента);
	КонецЕсли; 

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента)
	
	мСтруктураПараметровДенежныхСредств.Вставить("РасчетыВозврат",            РасчетыВозврат);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами", ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",     ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКасса",       СчетОрганизации);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",              ДатаДвижений);
	
	УправлениеДенежнымиСредствами.ПровестиСписаниеДенежныхСредствУпр(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента)
	
	Если НЕ (Оплачено И ОтраженоВОперУчете) Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Приход;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	Иначе
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.Прочее;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, "РасшифровкаПлатежа", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента)
	
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами",	ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",		ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("РежимПроведения",				РежимПроведения);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",				ДатаДвижений);
	мСтруктураПараметровДенежныхСредств.Вставить("СчетОрганизации",				СчетОрганизации);
	мСтруктураПараметровДенежныхСредств.Вставить("Оплачено",					Оплачено);
	
	УправлениеДенежнымиСредствами.ПровестиСписаниеДенежныхСредствРегл(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)
	
	Если ОтраженоВОперУчете И (НЕ Оплачено) И (Режим = РежимПроведенияДокумента.Оперативный) Тогда
		ЕстьРазрешение=УправлениеДопПравамиПользователей.ПравоРазрешитьПроведениеПлатежаБезЗаявки();
		
		УправлениеДенежнымиСредствами.ПроверитьОстаткиПоЗаявке(Дата,Отказ,Заголовок,
					СчетОрганизации,СуммаДокумента,ТаблицаПлатежейУпр, ЕстьРазрешение);
		
		Отказ=Отказ И НЕ ЕстьРазрешение;

		// Проверяем остаток доступных денежных средств
		СвободныйОстаток = УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(СчетОрганизации,Дата,ТаблицаПлатежейУпр.ВыгрузитьКолонку("ДокументПланированияПлатежа"));
		Если СвободныйОстаток < СуммаДокумента Тогда

			Сообщить(Заголовок+"
			|Сумма документа превышает возможный к использованию остаток денежных средств
			|по " + СчетОрганизации.Наименование + ".
			|Возможный к использованию остаток: " + Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2; ЧН=0") + " " + ВалютаДокумента + "
			|Сумма документа = " + Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2") + " " + ВалютаДокумента);

			Если НЕ УправлениеДопПравамиПользователей.ПравоРазрешитьПревышениеСвободногоОстаткаДС() Тогда
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ОтраженоВОперУчете Тогда

		ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
		
		Если Не Отказ Тогда
			УправлениеДенежнымиСредствами.КонтрольОстатковПоТЧ(Дата, ТаблицаПлатежейУпр, Отказ, Заголовок,РасчетыВозврат);
		КонецЕсли;

	КонецЕсли;
	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ОтраженоВОперУчете Тогда
		ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
	КонецЕсли;
	
	Если Оплачено И ОтраженоВОперУчете И ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств И ОтражатьПоЗатратам Тогда
		СтруктураОбязательныхПолей = Новый Структура("СтатьяЗатрат");
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			Если Не (СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы ИЛИ
					 СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы ИЛИ
				     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы ИЛИ
				     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие ИЛИ
				     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы ИЛИ
				     СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт ИЛИ
					 СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы) 
			Тогда
			     ОбщегоНазначения.СообщитьОбОшибке("При указании статьи затрат с характером затрат " + СтатьяЗатрат.ХарактерЗатрат + " движения в затратных регистрах по УУ не будут отражены", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
    КонецЕсли;
	
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Режим, Заголовок, СтруктураШапкиДокумента)
	
	
		
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");
		
		
		Если ЕстьРасчетыСКонтрагентами Тогда
			СтруктураПолей.Вставить("СчетУчетаРасчетовПоАвансам");
		КонецЕсли; 
		
		Если ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога
			ИЛИ ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда

			ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
			
		Иначе

			ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);
			
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств И ОтражатьПоЗатратам Тогда
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетУчетаРасчетовСКонтрагентом, СтатьяЗатрат);
			
			Если НЕ (ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы ИЛИ
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПрочиеОперационныеРасходы ИЛИ 
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие ИЛИ
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.РасходыНаСбыт ИЛИ
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.ТранспортноЗаготовительныеРасходы ИЛИ 
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы ИЛИ 
				ХарактерЗатрат = Перечисления.ХарактерЗатрат.АдминистративныеРасходы) И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом)
			Тогда
				ОбщегоНазначения.СообщитьОбОшибке("При указании счета затрат " + СчетУчетаРасчетовСКонтрагентом + " с характером затрат " + ХарактерЗатрат + " движения в затратных регистрах (бух. учет, нал. учет) не будут отражены",  Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;	
			
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) И СчетУчетаРасчетовСКонтрагентом.НалоговыйУчет Тогда 
			
			
			НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
				СтруктураШапкиДокумента, 
				Неопределено,      // Неопределено - в случае проверки шапки документа
				Неопределено,      // Неопределено - в случае проверки шапки документа
				Отказ, 
				Заголовок, 
				"ОтражениеЗатрат", // ВидОперации
				Истина,            // ОтражатьПоЗатратам,
				"СчетУчетаРасчетовСКонтрагентом", // ИмяРеквизитаСчетЗатрат
				"СубконтоДт"       // ИмяРеквизитаСубконтоЗатрат
			);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ=Ложь)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		
		КурсДокумента      = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
		КратностьДокумента = РасшифровкаПлатежа[0].КратностьВзаиморасчетов;

	Иначе	
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("КурсДокумента"		, КурсДокумента);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	, КратностьДокумента);
	
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете",Истина); // Банковские документы всегда отражаются в упр. учете
	ДатаДвижений=?(Оплачено,УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Дата,ДатаОплаты),Дата);
	СтруктураШапкиДокумента.Вставить("ДатаОплаты",ДатаДвижений);
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) И НЕ (Основание = Неопределено) Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		УправлениеДенежнымиСредствами.ЗаполнитьРасходПоОснованию(ЭтотОбъект, Основание, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	КонецЕсли;	
	
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);

	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	РасчетыВозврат=УправлениеДенежнымиСредствами.НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	
	Если НЕ ОтраженоВОперУчете И НЕ Оплачено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбрано правило проведения (""Отразить в опер. учете"",""Оплачено"")",Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не совпадают сумма документа и ее расшифровка.",Отказ, Заголовок);
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Оплачено Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплата(), Отказ, Заголовок);
	КонецЕсли;
	
	Если ОтраженоВОперУчете Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчеты(), Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(ДатаДвижений,ВалютаДокумента,Ссылка, "АккредитивПереданный");
	
	Если Не Отказ Тогда
		ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);
		ПроверитьЗаполнениеДокументаРегл(Отказ, Режим, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
	
	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете тогда
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
			мВалютаРегламентированногоУчета, Истина,Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете И ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВШапкеПередЗаписьюДокумента(
			ЭтотОбъект,
			"СчетУчетаРасчетовСКонтрагентом",    // ИмяРеквизитаСчетЗатрат
			"СубконтоДт" // ИмяРеквизитаСубконто
		);
		
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	

КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ЧастичнаяОплата Тогда
		Сообщить("По документу "+ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка)+" уже прошла частичная оплата.
		|Перед отменой проведения документа необходимо отменить проведение платежных ордеров.");
		Отказ=Истина;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	ЧастичнаяОплата   = Ложь;
	
КонецПроцедуры

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"	, мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"           	, мУчетнаяПолитикаРегл.ЕстьНДС);
		    СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог"   	, мУчетнаяПолитикаРегл.ЕстьЕдиныйНалог);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

Процедура ДвиженияПоЕдиномуНалогуРегл(СтруктураШапкиДокумента, РежимПроведения, Отказ, Заголовок)
	Если ОтражатьВБухгалтерскомУчете И Оплачено Тогда	
		Если НЕ СтруктураШапкиДокумента.ЕстьЕдиныйНалог Тогда
			Возврат;
		КонецЕсли;
		ВалютаРег       = мВалютаРегламентированногоУчета;
		ДанныеОВалюте   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
		
		Если ЕстьРасчетыСКонтрагентами Тогда
			
			ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
			ТаблицаПлатежей.Свернуть("СтатьяДекларацииПоЕдиномуНалогу","СуммаПлатежа, ОстаточнаяСтоимостьОС");
			ЭтоВозврат = УправлениеДенежнымиСредствами.НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(СтруктураШапкиДокумента.ВидОперации) = Перечисления.РасчетыВозврат.Возврат;
			Для Каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтатьяДекларацииПоЕдиномуНалогу) Тогда
					Продолжить;
				КонецЕсли;

				Строка = Движения.КнигаДоходовРасходовПоЕдиномуНалогу.Добавить();
				Строка.Период      = ДатаДвижений;
				
				Строка.Организация     = Организация;
				Строка.Статья    = СтрокаПлатеж.СтатьяДекларацииПоЕдиномуНалогу;
				
				Если СчетОрганизации.ВалютаДенежныхСредств <> ВалютаРег Тогда
					Строка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента, ВалютаРег,
											КурсДокумента, ДанныеОВалюте.Курс, 
											КратностьДокумента, ДанныеОВалюте.Кратность);	
				Иначе
					Строка.Сумма = СтрокаПлатеж.СуммаПлатежа;
				КонецЕсли;
				Если ЭтоВозврат Тогда
					Строка.Сумма = - Строка.Сумма;
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(СтрокаПлатеж.ОстаточнаяСтоимостьОС) Тогда
					Строка.Сумма = Макс(0, Строка.Сумма - СтрокаПлатеж.ОстаточнаяСтоимостьОС);
				КонецЕсли;	
				
				Строка.НомерПлатежногоДокумента = Номер;
				
				Строка.НомерПлатежногоДокумента = "АК"+" "+Номер;
						
			КонецЦикла;
			
		Иначе

			Если НЕ ЗначениеЗаполнено(РасшифровкаПлатежа[0].СтатьяДекларацииПоЕдиномуНалогу) Тогда
				Возврат;
			КонецЕсли;
			
			Строка = Движения.КнигаДоходовРасходовПоЕдиномуНалогу.Добавить();
			Строка.Период      = ДатаДвижений;
							
			Строка.Организация     = Организация;
			Строка.Статья    = РасшифровкаПлатежа[0].СтатьяДекларацииПоЕдиномуНалогу;
				
			Если СчетОрганизации.ВалютаДенежныхСредств <> ВалютаРег Тогда
				Строка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(РасшифровкаПлатежа[0].СуммаПлатежа, ВалютаДокумента, ВалютаРег,
								КурсДокумента, ДанныеОВалюте.Курс, 
								КратностьДокумента, ДанныеОВалюте.Кратность);	
			Иначе
				Строка.Сумма = РасшифровкаПлатежа[0].СуммаПлатежа;
			КонецЕсли;
			
			Строка.НомерПлатежногоДокумента = "АКП"+" "+Номер;
			
		КонецЕсли;	
			
	КонецЕсли;	
КонецПроцедуры	

Функция СформироватьСтруктуруКурсыВалютУпр()

	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",  глЗначениеПеременной("ВалютаУправленческогоУчета").Код);
	СтруктураГруппаВалют.Вставить("ВалютаДокумента", ВалютаДокумента.Код);

	СтруктураКурсыВалют = УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,?(ДатаОплаты = '00010101', Дата, КонецДня(ДатаОплаты)));

	Возврат СтруктураКурсыВалют;

КонецФункции


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДенежныхСредств = Новый Структура;
мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Безналичные);
