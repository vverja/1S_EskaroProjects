Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)

Перем мСтруктураШапкиДокумента;         // (Общ) Результат запроса по шапке документа

Перем мУчетнаяПолитика Экспорт;                 // (Общ)
Перем мУчетнаяПолитикаРегл Экспорт;               // (Регл)
Перем мУчетЗатратПоЗаказамНаПроизводство;

Перем мВалютаУправленческогоУчета Экспорт;
Перем мВалютаРегламентированногоУчета Экспорт;

Перем ИзмененоИспользоватьЗаказы Экспорт;
Перем мИспользоватьЗаказыНаПроизводство Экспорт;
Перем мИспользоватьТолькоСборочныеСпецификации Экспорт;
Перем мИспользоватьПотребностиЗаказовНаПроизводство;
Перем мСпособЗакрытияПотребностейЗаказовНаПроизводство;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мПараметрыСвязиСтрокТЧ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой акта об
// обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг(ИмяМакета)

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Акт.Номер,
	|	Акт.Дата,
	|	Акт.ДоговорКонтрагента,
	|	Акт.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	Акт.ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	Акт.ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
    |	Акт.Сделка,
	|	Акт.Контрагент КАК Покупатель,
	|	Акт.Контрагент.ЮрФизЛицо КАК ПокупательЮрФизЛицо,
	|	Акт.Организация,
	|	Акт.Организация КАК Поставщик,
	|	Акт.Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	Акт.СуммаДокумента,
	|	Акт.ВалютаДокумента,
	|	Акт.УчитыватьНДС,
	|	Акт.СуммаВключаетНДС,
	|	Акт.КратностьВзаиморасчетов,
	|	Акт.КурсВзаиморасчетов,
	|	Акт.ПредставительОрганизации КАК ПредставительПоставщика,
	|   Акт.Получил КАК ПредставительПокупателя,

	|	ВЫРАЗИТЬ(Акт.МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК Акт
	|ГДЕ
	|	Акт.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("АктОбОказанииПроизводственныхУслуг");
	
	ЗапросУслуги.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки 			КАК НомерСтрокиТЧ,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|	Номенклатура.Код     	КАК Код,
	|	Номенклатура.Артикул 	КАК Артикул,
	|	СУММА(Количество) КАК Количество,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена,
	|	СУММА(Сумма) КАК Сумма,
	|	СУММА(СуммаНДС) КАК СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	NULL КАК Характеристика,
	|	NULL КАК Серия
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслуг
	|
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	НомерСтроки,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Номенклатура.Код,
	|	Номенклатура.Артикул,
	|	Количество,
	|	ЕдиницаИзмерения,	
	|	ПроцентСкидкиНаценки,
	|	Цена
	|";
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктОбОказанииПроизводственныхУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	// Выводим шапку Акта
	
	СведенияОПоставщике 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	РуководителиОрганизации = ФормированиеПечатныхФорм.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
	РуководителиКонтрагента = ФормированиеПечатныхФорм.ОтветственныеЛицаКонтрагента(Шапка.Покупатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДолжностьРуководителяПоставщика = РуководителиОрганизации.РуководительДолжность;
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РуководительПоставщика 			=  РуководителиОрганизации.Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителяПокупателя = ?(Шапка.ПокупательЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, НСтр("ru='Директор';uk='Директор'",КодЯзыкаПечать), "");
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	
	ОбластьМакета.Параметры.ДолжностьРуководителяПокупателя = ?(ПустаяСтрока(РуководителиКонтрагента.РуководительДолжность) И Шапка.ПокупательЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "Директор", РуководителиКонтрагента.РуководительДолжность);
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РуководительПокупателя 			= РуководителиКонтрагента.РуководительПредставление;

	ТабДокумент.Вывести(ОбластьМакета);
	
	// Формируем заголовок
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='АКТ сдачи-приемки работ (оказания услуг)';uk='АКТ виконання робіт (надання послуг)'",КодЯзыкаПечать) + Символы.ПС,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

// Начинаем формировать собственно текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаНачало");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// выводим сведения о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";	
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	// Заканчиваем формировать текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаКонец");
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим табличную часть
	
	ЕстьСкидки = ТаблицаУслуги.Итог("Скидка") > 0;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);
	       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;
										

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ТаблицаУслуги Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ТаблицаУслуги.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			Скидка = 0;
		Иначе

			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
			//округлим скидку до двух знаков
			Скидка = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Скидка, 2);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// Выводим Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");	
	СуммаКПрописиСНДС 	= Сумма + ?(Шапка.СуммаВключаетНДС, 	   0, СуммаНДС);
	СуммаКПрописиБезНДС = Сумма - ?(Шапка.СуммаВключаетНДС, СуммаНДС, 		 0);
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила без НДС ';uk='Загальна вартість робіт (послуг) без ПДВ склала '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', НДС ';uk=', ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', общая стоимость работ (услуг) с НДС ';uk=', загальна вартість робіт (послуг) з ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиСНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 ".";									 
												 
 	Иначе
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила ';uk='Загальна вартість робіт (послуг) склала '",КодЯзыкаПечать)	+ ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) + ".";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 
	
	// выводим подписи
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
								
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ОбластьМакета.Параметры.ПредставительПоставщика = ДолжностьФИОПредставителя;
	ОбластьМакета.Параметры.ПредставительПокупателя = Шапка.ПредставительПокупателя;
	
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Акт" Тогда
		
		ТабДокумент = ПечатьАктаОбОказанииУслуг(ИмяМакета);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечатныхФорм = Новый Структура;
	СтруктПечатныхФорм.Вставить( "Акт",    "Акт об оказании услуг");
	
	Возврат СтруктПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет табличную часть "Прочие затраты" остатками в НЗП.
//
Процедура ЗаполнитьПрочиеЗатратыПоОстаткам() Экспорт
	
	ПрочиеЗатраты.Очистить();
	
	ТаблицаПрочиеЗатраты = ПрочиеЗатраты.Выгрузить();
	УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоОстаткамНЗП(ЭтотОбъект, ТаблицаПрочиеЗатраты);
	ПрочиеЗатраты.Загрузить(ТаблицаПрочиеЗатраты);
		
КонецПроцедуры // ЗаполнитьПрочиеЗатратыПоОстаткам()

// Процедура добавляет данные по продукции из заказа покупателя (переработка)
//
Процедура ДобавитьИзЗаказаПокупателя() Экспорт
	
	ФормаВыбора = Документы.ЗаказПокупателя.ПолучитьФормуВыбора(,, ЭтотОбъект);
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	Заказ = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Заказ.Услуги Цикл
		
		НоваяСтрока = Услуги.Добавить();
		
		ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
		НоваяСтрока.Коэффициент      = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.ВесовойКоэффициент   = 1;
		НоваяСтрока.НоменклатурнаяГруппа = НоваяСтрока.Номенклатура.НоменклатурнаяГруппа;
		НоваяСтрока.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(НоваяСтрока.Номенклатура, Неопределено, Дата, Подразделение);
        ЗаполнитьСтрокуУслугРегл(НоваяСтрока);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( НоваяСтрока, "Услуги", ОтражатьВБухгалтерскомУчете);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьИзЗаказаПокупателя()

// Процедура добавляет данные по материалам из требование-накладная
//
Процедура ДобавитьИзТребованиеНакладной() Экспорт
	
	ФормаВыбора = Документы.ТребованиеНакладная.ПолучитьФормуВыбора(,, ЭтотОбъект);
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете И ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Подразделение;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Подразделение;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Отбор = ФормаВыбора.Отбор.ПодразделениеОрганизации;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = ПодразделениеОрганизации;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ДокТН = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ДокТН) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ДокТН.Материалы Цикл
		
		НоваяСтрока = Материалы.Добавить();
		
		ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаТЧ);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьИзТребованиеНакладной()

#КонецЕсли

// Процедура заполняет материалы по спецификациям.
//
Процедура ЗаполнитьМатериалыПоСпецификации() Экспорт
	
	Если Материалы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть ""Материалы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		Материалы.Очистить();
	КонецЕсли;
	
	ТабличнаяЧастьМатериалы = Материалы.Выгрузить();
	ТабличнаяЧастьПродукция = Услуги.Выгрузить();
	
	СтруктураДопКолонок = Новый Структура("ЗаказВыпуска, Спецификация");
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);
	
	Для каждого СтрокаТаблицы из ТабличнаяЧастьПродукция Цикл
		КоличествоВыпускБезНаработки = СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоДоделка;
		СтрокаТаблицы.Количество = ?(КоличествоВыпускБезНаработки > 0, КоличествоВыпускБезНаработки, 0);
	КонецЦикла;

	УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата, , ПараметрыВыпускаПродукции);

	ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, СтатьяЗатрат, ЗаказВыпуска, Спецификация", "Количество");
	
	Материалы.Загрузить(ТабличнаяЧастьМатериалы);
		
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()

// Процедура заполняет регл. реквизиты при заполнении табличной части Продукция по спецификации
//
Процедура ЗаполнитьСтрокуУслугРегл(СтрокаУслуг)
	
	Если ОтражатьВБухгалтерскомУчете
	Тогда
		СчетаУчетаЗатрат = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, Неопределено);
	КонецЕсли;  
		
	СтрокаУслуг.СчетЗатрат   = ?( ОтражатьВБухгалтерскомУчете, СчетаУчетаЗатрат.СчетУчетаБУ, 0);
	
КонецПроцедуры // ЗаполнитьСтрокуПоСпецификацииРегл()

// Процедура выполняет заполниение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьУслугиПоОстаткам() Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	ОстаткиУслуг = УправлениеЗаказами.ОстаткиУслугПоЗаказуПокупателя( Сделка, ДоговорКонтрагента, ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Для каждого Строка из ОстаткиУслуг цикл

		НоваяСтрока= Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.Количество   = Строка.КолОстаток;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
		НоваяСтрока.Коэффициент      = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		
		Если Сделка.ВалютаДокумента <> ВалютаДокумента Тогда
			НоваяСтрока.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.Цена, 
										Сделка.ВалютаДокумента, ВалютаДокумента,
										ЗаполнениеДокументов.КурсДокумента(Сделка, мВалютаРегламентированногоУчета), Курс,
										ЗаполнениеДокументов.КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), Кратность);
		КонецЕсли;								
										
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		НоваяСтрока.ВесовойКоэффициент   = 1;
		НоваяСтрока.НоменклатурнаяГруппа = НоваяСтрока.Номенклатура.НоменклатурнаяГруппа;
		НоваяСтрока.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(НоваяСтрока.Номенклатура, Неопределено, Дата, Подразделение);
		
		ЗаполнитьСтрокуУслугРегл(НоваяСтрока);
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Услуги", ОтражатьВБухгалтерскомУчете);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьУслугиПоОстаткамУпр()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьУслуги() Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Сделка);
    Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуУслуги.Содержание,
	|	СчетНаОплатуУслуги.Количество,
	|	СчетНаОплатуУслуги.Номенклатура,
	|	СчетНаОплатуУслуги.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СчетНаОплатуУслуги.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	СчетНаОплатуУслуги.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	СчетНаОплатуУслуги.Цена,
	|	СчетНаОплатуУслуги.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ  КАК КратностьДокумента,
	|	СчетНаОплатуУслуги.Сумма,
	|	СчетНаОплатуУслуги.СтавкаНДС,
	|	СчетНаОплатуУслуги.СуммаНДС,
	|	СчетНаОплатуУслуги.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплатуУслуги.Ссылка.УчитыватьНДС КАК УчитыватьНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуУслуги
	|
	|ГДЕ
	|	СчетНаОплатуУслуги.Ссылка = &Счет
	|
	|УПОРЯДОЧИТЬ ПО СчетНаОплатуУслуги.НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);    
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, Курс,
				Выборка.КратностьДокумента, Кратность),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Услуги");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		НоваяСтрока.ВесовойКоэффициент = 1;
		НоваяСтрока.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(НоваяСтрока.Номенклатура, Неопределено, Дата, Подразделение);
		
		ЗаполнитьСтрокуУслугРегл(НоваяСтрока);
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Услуги", ОтражатьВБухгалтерскомУчете);

	КонецЦикла;

КонецПроцедуры // СкопироватьУслуги()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение,
								|ПрочиеЗатраты.Сумма, РаспределениеПрочихЗатрат.Сумма";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
								//|СчетУчетаРасчетовСКонтрагентом, НадписьСчетУчетаРасчетовСКонтрагентом,
								//|СчетУчетаРасчетовПоАвансам, НадписьСчетУчетаРасчетовПоАвансам,
								|ПрочиеЗатраты.СуммаРегл, РаспределениеПрочихЗатрат.СуммаРегл,
								|Услуги.СчетЗатрат, РаспределениеМатериалов.СчетЗатрат, РаспределениеПрочихЗатрат.СчетЗатрат,
								|Услуги.СхемаРеализации, Услуги.НалоговоеНазначение, Услуги.НалоговоеНазначениеДоходовИЗатрат";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Функция проверяет правильность заполнения реквизитов документа
// Также формирует запрос по шапке документа, результат которого
// сохраняется в переменной мСтруктураШапкиДокумента
//
Процедура ПроверкаРеквизитов(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
		
	РеквизитыШапки = "Организация, Контрагент, ДоговорКонтрагента,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов";
		
	ДополнитьРеквизитыШапкиУпр(РеквизитыШапки);
	ДополнитьРеквизитыШапкиРегл(РеквизитыШапки, СтруктураШапкиДокумента);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"          , "ВалютаУправленческогоУчета"        , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"          , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента" , "ВедениеВзаиморасчетов"             , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента" , "ВалютаВзаиморасчетов"              , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента" , "Организация"                       , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"    , "ВестиПартионныйУчетПоСкладам"      , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента" , "ОбособленныйУчетТоваровПоЗаказамПокупателей"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	мСтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, Новый Структура(РеквизитыШапки), мВалютаРегламентированногоУчета);

	РеквизитыШапки = Новый Структура(РеквизитыШапки);
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если мСтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		РеквизитыШапки.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Заказ покупателя""!");
	ИначеЕсли мСтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		РеквизитыШапки.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по счетам""! 
		|Заполните поле ""Счет покупателю""!");
	КонецЕсли;

	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, РеквизитыШапки, Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);

	// Проверим что указаны производственные подразделения в шапке документа
	УправлениеПроизводством.ПроверитьПроизводственныеПодразделения(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, мСтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	РеквизитыУсл = "Номенклатура, Количество, Сумма";
	
	Если УчитыватьНДС Тогда
		РеквизитыУсл = РеквизитыУсл + ", СтавкаНДС";
	КонецЕсли;
	
	
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги",        Новый Структура(РеквизитыУсл), Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
		НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
			СтруктураШапкиДокумента, 
			Услуги.Выгрузить(, "НомерСтроки, НалоговоеНазначение"),
			"Услуги",
			Отказ, 
			Заголовок, 
			"Производство"
		);	
	КонецЕсли;	
	
	
	Если ИспользоватьМатериалы Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы",     Новый Структура("Номенклатура, СтатьяЗатрат, Количество"), Отказ, Заголовок);
	КонецЕсли;
	Если ИспользоватьПрочиеЗатраты Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПрочиеЗатраты", Новый Структура("СтатьяЗатрат"), Отказ, Заголовок);
	КонецЕсли;
	
	Если ИспользоватьМатериалы Тогда
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов,   "СтатьяЗатрат", "Материальные",     Отказ, Заголовок);
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов,   "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	Если ИспользоватьПрочиеЗатраты Тогда
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// Получим необходимые данные для проверки заполенения данные по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить( "Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить( "Услуга",       "Номенклатура.Услуга");
	СтруктураПолей.Вставить( "Набор",        "Номенклатура.Набор");

	ТабУслуги = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей).Выгрузить();
	УправлениеЗапасами.ПроверитьЧтоНетТоваров( ЭтотОбъект, "Услуги", ТабУслуги, Отказ, Заголовок);
	УправлениеПроизводством.ПроверитьКоличествоДоделка( ЭтотОбъект, "Услуги", Услуги, Отказ, Заголовок);
	
	Если ИспользоватьМатериалы Тогда
		ТабМат  = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей).Выгрузить();
		УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", ТабМат, Отказ, Заголовок);
		УправлениеЗапасами.ПроверитьЧтоНетУслуг( ЭтотОбъект, "Материалы", ТабМат, Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка корректности указания ед. изм.
	Если ИспользоватьМатериалы И РаспределятьПропорциональноКоличеству И Услуги.Количество() > 1 Тогда

		ЕдИзм = Услуги[0].Номенклатура.БазоваяЕдиницаИзмерения;
		Для К = 2 По Услуги.Количество() Цикл
			Если Не ЕдИзм = Услуги[К - 1].Номенклатура.БазоваяЕдиницаИзмерения Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Нельзя выбирать услуги измеряемые в разных единицах измерения в случае использования распределения пропорционально количеству.", Отказ, Заголовок);
				Прервать;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата);
	
	// Табличная часть РАСПРЕДЕЛЕНИЕ МАТЕРИАЛОВ
	Если ИспользоватьМатериалы И Не АвтораспределениеМатериалов Тогда
		
		РеквизитыТабРаспМат = "Номенклатура, Количество, Продукция, СчетЗатрат, СтатьяЗатрат";		
		
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов, "СтатьяЗатрат", "Материальные",     Отказ, Заголовок);
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
		
		УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабРаспМат, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "РаспределениеМатериалов");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеМатериалов", Новый Структура(РеквизитыТабРаспМат), Отказ, Заголовок);
		
		УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "РаспределениеМатериалов", , Отказ, Заголовок);
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
			
			Для Каждого СтрокаРаспределения Из РаспределениеМатериалов Цикл
				Если Не ЗначениеЗаполнено(СтрокаРаспределения.НалоговоеНазначение)
					И (СтрокаРаспределения.СтатьяЗатрат.СтатусМатериальныхЗатрат <> Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку)
					
					Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("Не указано налоговое назначение в строке № " + СтрокаРаспределения.НомерСтроки + " (таб. часть ""Распределение материалов"")", Отказ, Заголовок);
					
				КонецЕсли; 
			КонецЦикла; 
			
			НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
				СтруктураШапкиДокумента, 
				РаспределениеМатериалов.Выгрузить(, "НомерСтроки, НалоговоеНазначение"),
				"Распределение материалов",
				Отказ, 
				Заголовок, 
				"Производство"
			);	
		КонецЕсли;	
		
	КонецЕсли;
	
	// Табличная часть РАСПРЕДЕЛЕНИЕ ПРОЧИХ ЗАТРАТ
	Если ИспользоватьПрочиеЗатраты И Не АвтораспределениеПрочихЗатрат Тогда
		
		РеквизитыТабРаспЗатр = "Номенклатура, СтатьяЗатрат, СчетЗатрат";
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (СтруктураШапкиДокумента.ЕстьНДС ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) Тогда
			РеквизитыТабРаспЗатр = РеквизитыТабРаспЗатр + ", НалоговоеНазначение";
		КонецЕсли;
		
		УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабРаспЗатр, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "РаспределениеПрочихЗатрат");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеПрочихЗатрат", Новый Структура(РеквизитыТабРаспЗатр), Отказ, Заголовок);
		
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
			НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
				СтруктураШапкиДокумента, 
				РаспределениеПрочихЗатрат.Выгрузить(, "НомерСтроки, НалоговоеНазначение"),
				"Распределение прочих затрат",
				Отказ, 
				Заголовок, 
				"Производство"
			);	
		КонецЕсли;	
		
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Подразделение";
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты,СтруктураШапкиДокумента)
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
		          + "ПодразделениеОрганизации,
					|СчетУчетаРасчетовСКонтрагентом";
					
		Если СтруктураШапкиДокумента.ЕстьНДС
			И СтруктураШапкиДокумента.УчитыватьНДС Тогда
			Реквизиты = Реквизиты + ",СчетУчетаНДС";
		КонецЕсли;
					
	КонецЕсли;
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Процедура заполняет таб.часть "РаспределениеМатериалов"
//
Процедура ЗаполнитьРаспределениеМатериалов(Спрашивать = Истина) Экспорт
	
	Если Материалы.Количество() = 0 Тогда
		Если РаспределениеМатериалов.Количество() > 0 Тогда
			РаспределениеМатериалов.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Спрашивать И РаспределениеМатериалов.Количество() > 0 Тогда
		Если Не АвтораспределениеМатериалов Тогда
			#Если Клиент Тогда
			Ответ = Вопрос("Табличная часть ""Распределение материалов"" уже содержит строки."
						  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
						   РежимДиалогаВопрос.ДаНет);
			Если Не Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	РаспределениеМатериалов.Очистить();
	
	Если РаспределятьПропорциональноКоличеству Тогда
		Если Услуги.Итог("Количество") = 0 Тогда
			ОбщегоНазначения.Сообщение("В табличной части ""Услуги"" не указано количество!
				|Распределение материалов не выполнено.", СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураДопКолонок = Новый Структура("ЗаказВыпуска, НоменклатурнаяГруппа, Спецификация, НалоговоеНазначение,
									|СчетЗатрат, ВесовойКоэффициент");
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);
	УправлениеПроизводством.ЗаполнитьРаспределениеМатериаловНаПродукцию(СтруктураШапкиДокумента, Материалы, Услуги, РаспределениеМатериалов, СтруктураДопКолонок, Отбор, ПараметрыВыпускаПродукции);
	
КонецПроцедуры // ЗаполнитьРаспределениеМатериалов()

// Процедура заполняет таб.часть "РаспределениеПрочихЗатрат"
//
Процедура ЗаполнитьРаспределениеПрочихЗатрат(Отказ = Ложь) Экспорт
	
	РаспределениеПрочихЗатрат.Очистить();
	
	Если РаспределятьПропорциональноКоличеству Тогда
		Если Услуги.Итог("Количество") = 0 Тогда
			ОбщегоНазначения.Сообщение("В табличной части ""Услуги"" не указано количество!
				|Распределение прочих затрат не выполнено.", СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	УправлениеПроизводством.ЗаполнитьРаспределениеПрочихЗатратНаПродукцию(СтруктураШапкиДокумента, ПрочиеЗатраты, Услуги, РаспределениеПрочихЗатрат);
	
КонецПроцедуры // ЗаполнитьРаспределениеПрочихЗатрат()

// Заполняет реквизиты БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТабличнойЧасти, ИмяТабЧасти, ЗаполнятьБУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ,,,Истина);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()    

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамЗаказНаПроизводство(ТабличнаяЧасть, ЗаказНаПроизводство = Неопределено) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Ссылка",    Ссылка);
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("ВидВоспроизводства", Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ТекстЗапросаПоНоменклатуре = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура 
	|   ИЗ  Документ.ЗаказНаПроизводство.Продукция
	|   ГДЕ Документ.ЗаказНаПроизводство.Продукция.Ссылка = &ЗаказНаПроизводство";

	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Номенклатура.СтавкаНДС     		КАК СтавкаНДС,
	|	ЗаказыОстатки.Номенклатура.Услуга КАК Услуга,
	|	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
	|	ЗаказыОстатки.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ЗаказыОстатки.ЕдиницаИзмерения,
	|	ЗаказыОстатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ЗаказыОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыОстатки.ЗаказНаПроизводство КАК ЗаказВыпуска,
	|	NULL                                     КАК Заказ,
	|	ЗаказыОстатки.Спецификация,
	|	ВЫБОР КОГДА СпецификацииНоменклатуры.ДоляСтоимости ЕСТЬ NULL ТОГДА
	|		1
	|	ИНАЧЕ
	|		СпецификацииНоменклатуры.ДоляСтоимости
	|	КОНЕЦ КАК ДоляСтоимости,
	|	ЗаказыОстатки.КоличествоОстаток КАК Заказано,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК ЗаказаноПоставщику,
	|	ТоварыВРезервеНаСкладах.КоличествоОстаток КАК Зарезервировано
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводство.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ЗаказНаПроизводство = &ЗаказНаПроизводство
	|						И ВидВоспроизводства = &ВидВоспроизводства
	|						И Номенклатура.Услуга
	|                       ) КАК ЗаказыОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ЗаказПокупателя = &ЗаказНаПроизводство
	|                       И ЗаказПоставщику <> &Ссылка
	|                       И ТоварТара = &ТоварТара) КАК ЗаказыПоставщикамОстатки
	|	ПО 
	|		ЗаказыОстатки.Номенклатура 					= ЗаказыПоставщикамОстатки.Номенклатура
	|		И ЗаказыОстатки.ХарактеристикаНоменклатуры 	= ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ДокументРезерва = &ЗаказНаПроизводство) КАК ТоварыВРезервеНаСкладах
	|	ПО 
	|		ЗаказыОстатки.Номенклатура 					= ТоварыВРезервеНаСкладах.Номенклатура
	|		И ЗаказыОстатки.ХарактеристикаНоменклатуры 	= ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			СпецификацииНоменклатуры.Ссылка 					КАК Спецификация,
	|			СпецификацииНоменклатуры.Номенклатура 				КАК Номенклатура,
	|			СпецификацииНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			СпецификацииНоменклатуры.ДоляСтоимости 				КАК ДоляСтоимости
	|		ИЗ
	|			Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК СпецификацииНоменклатуры
	|		) КАК СпецификацииНоменклатуры
	|	ПО 
	|		ЗаказыОстатки.Номенклатура 					= СпецификацииНоменклатуры.Номенклатура
	|		И ЗаказыОстатки.ХарактеристикаНоменклатуры 	= СпецификацииНоменклатуры.ХарактеристикаНоменклатуры
	|		И ЗаказыОстатки.Спецификация 				= СпецификацииНоменклатуры.Спецификация
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Количество = ?(Выборка.Заказано           = NULL, 0, Выборка.Заказано)
				   - ?(Выборка.Зарезервировано    = NULL, 0, Выборка.Зарезервировано)
				   - ?(Выборка.ЗаказаноПоставщику = NULL, 0, Выборка.ЗаказаноПоставщику);
		Если Количество > 0 Тогда
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			
			СтрокаТабличнойЧасти.Количество      = Количество * Выборка.КоэффициентХраненияОстатков / Выборка.Коэффициент;
			СтрокаТабличнойЧасти.ВесовойКоэффициент 		= ?(Выборка.ДоляСтоимости = 0, 1, Выборка.ДоляСтоимости);
			
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", ОтражатьВБухгалтерскомУчете);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

		КонецЕсли;

	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткамЗаказНаПроизводство()

// Возвращает первый размещенный заказ покупателя в основании
//
// Параметры:
//  Основание - Заказ на производство, на основании которого вводим данный документ.
//
Функция ЗаполнитьСделкуПоЗаказуНаПроизводство(Основание)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя
	               |ИЗ
	               |	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки КАК РазмещениеЗаказовПокупателейОстатки
	               |ГДЕ
	               |	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику = &Основание
	               |	И РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	               |	И РазмещениеЗаказовПокупателейОстатки.Номенклатура.Услуга";
	Запрос.УстановитьПараметр("Основание",Основание);			   
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗапроса.Следующий() ТОгда
		Возврат ВыборкаЗапроса.ЗаказПокупателя;
	Иначе
		Возврат Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕсли;
КонецФункции //ЗаполнитьСделкуПоЗаказуНаПроизводство()	

// Процедура заполняет таб.части материалы/распределение материалов по данным о потребностях по заказам.
// Список заказов берется из табличной части продукция (если заказ не передан явно в виде параметра)
//
Процедура ЗаполнитьПотребностямиПоЗаказамНаПроизводство(ТабЧасть, МассивЗаказов) Экспорт

	ЗаказыНаПроизводствоИПереработку.ЗаполнитьТабличнуюЧастьПоПотребностямЗаказаНаПроизводство(ТабЧасть, МассивЗаказов,новый Структура("ОтборПродукцияУслуга",истина));
	
	Для Каждого СтрокаТЧ Из РаспределениеМатериалов Цикл
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( СтрокаТЧ,
			?(ТабЧасть = РаспределениеМатериалов, "РаспределениеМатериалов", "Материалы"),
			ОтражатьВБухгалтерскомУчете);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПотребностямиПоЗаказамНаПроизводство()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураШапкиДокумента, ТаблицаПоУслугам)	
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	ТаблицаДвижений.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	
	ТаблицаДвижений.Колонки.Добавить("Контрагент");
	ТаблицаДвижений.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("ВидДоговораКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("СчетОплаты");
	ТаблицаДвижений.Колонки.Добавить("СчетАванса");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент        , "Контрагент");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора        , "ВидДоговораКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовСКонтрагентом, "СчетОплаты");
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовПоАвансам    , "СчетАванса");
	
	Возврат ТаблицаДвижений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ПО РЕГИСТРАМ

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
					ТаблицаПоУслугам, ТаблицаПоМатериалам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
					
	// Формирование движений по регистрам "Затраты на выпуск продукции".				
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукции(
		СтруктураШапкиДокумента, 
		"АктОбОказанииПроизводственныхУслуг",
		мУчетнаяПолитика,
		мУчетнаяПолитикаРегл
	);
		
	// Формирование движений по регистрам "Выпуск продукции" и направлениям выпуска.
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска(
		СтруктураШапкиДокумента, 
		"АктОбОказанииПроизводственныхУслуг",
		мУчетнаяПолитика, 
		мУчетнаяПолитикаРегл
	);
		
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
					ТаблицаПоУслугам, ТаблицаПоМатериалам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
					
	ДвиженияПоРегистрамОперативныхВзаиморасчетовРегл(РежимПроведения, ТаблицаПоВзаиморасчетам,
	                                                    Отказ, Заголовок, СтруктураШапкиДокумента);
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
					ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, Отказ, Заголовок);
					
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ);
					
	// Движения по регистрам бухгалтерии формируются и в модуле документа и при
	// формировании движений по выпуску продукции.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Движения.Хозрасчетный.Модифицированность() Тогда
		Движения.Хозрасчетный.Записать(Ложь);
	КонецЕсли;
	
	// Зарегистрируем документ в последовательности.
	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
		ЭтотОбъект, 
		Дата, 
		СтруктураШапкиДокумента.Организация,
		//Регистрация в последовательности по УУ - по реквизиту документа
		//	чтобы при допроведении по регл.учету документ остался зарегистрированным в последовательности по УУ
		ОтражатьВУправленческомУчете,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации
	);    
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
						ТаблицаПоУслугам, ТаблицаПоМатериалам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		                                   мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		                                   ВидДвиженияНакопления.Приход, Отказ, Заголовок);
	
	// Если в реквизите Сделка указан внешний заказ покупателя, то проводится 
	// по регистру ЗаказыПокупателей
	Если ЗначениеЗаполнено(Сделка) 
	   И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю")
	   И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			
		// Проверка остатков при оперативном проведении.
		// Контроль объема отгрузки по заказу
		Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Услуги", Отказ, Заголовок, РежимПроведения);
			
		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
					
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ЗаказыПокупателей, СтруктТаблицДокумента);
				
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    Сделка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЕдиницаИзмерения",    неопределено); //для услуг в регистр Заказы единица измерения не записывается
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный);

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗаказыПокупателей, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
			
	КонецЕсли;
	
	КопияУслуги = ТаблицаПоУслугам.Скопировать();
				
	ТабИменУслуги = Неопределено;
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДС",    "НДСВрем");
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДСУпр", "НДС");
			
	// УСЛУГИ ПО РЕГИСТРУ Закупки.
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
					
		// В этом случае таблицы документа обрабатываются особым образом
		ТаблицаДвижений = Движения.Продажи.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаДвиженийУслуги = ТаблицаДвижений.Скопировать();
					
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияУслуги, ТаблицаДвиженийУслуги, Проект, Дата, "Продажи");
					
		// Вставляем уже подготовленные таблицы движений
		ТаблицыДанныхДокумента = Новый Структура;
		ТаблицыДанныхДокумента.Вставить("ТаблицаПоУслугам", ТаблицаДвиженийУслуги);
								
	Иначе
								
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", КопияУслуги);
					
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.Продажи, СтруктТаблицДокумента);
								
	КонецЕсли;
							
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПродажи",    Ссылка);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    Сделка);

	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Продажи, Неопределено, ТаблицыДанныхДокумента, Дата);
		
	// Движение по заказам на производство.
	ТаблицаПоУслугамЗаказы = ТаблицаПоУслугам.Скопировать();
	Заказ = Неопределено;
	Если ИспользоватьЗаказы Тогда
		Заказ = УправлениеПроизводством.ПолучитьЗаказДляУчетаЗатрат(СтруктураШапкиДокумента.Сделка, , мУчетнаяПолитика.УчетЗатратПоЗаказамНаПроизводство, мИспользоватьЗаказыНаПроизводство);
	КонецЕсли;
	ТаблицаПоУслугамЗаказы.ЗаполнитьЗначения(Заказ,"Заказ");
	
	УправлениеПроизводством.ДвижениеПоЗаказамНаПроизводство(ЭтотОбъект, ТаблицаПоУслугамЗаказы, "Услуги", СтруктураШапкиДокумента, РежимПроведения, Отказ, Заголовок);
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ ПотребностиЗаказовНаПроизводство
	Если мИспользоватьЗаказыНаПроизводство и мИспользоватьПотребностиЗаказовНаПроизводство Тогда
		ДопПараметры = Новый Структура("ИмяТабличнойЧастиПродукция,СпособЗакрытияПотребностейЗаказовНаПроизводство","Услуги",мСпособЗакрытияПотребностейЗаказовНаПроизводство);
		Если мСпособЗакрытияПотребностейЗаказовНаПроизводство = Перечисления.СпособыЗакрытияПотребностейЗаказовНаПроизводство.АвтоматическиПриРаспределении Тогда
			Если РаспределениеМатериалов.Количество() <> 0 Тогда
				ЗаказыНаПроизводствоИПереработку.ВыполнитьПогашениеПотребностиЗаказаНаПроизводство(ЭтотОбъект, "АктОбОказанииПроизводственныхУслуг", ДопПараметры);
			КонецЕсли;				
		Иначе
			ЗаказыНаПроизводствоИПереработку.ВыполнитьПогашениеПотребностиЗаказаНаПроизводство(ЭтотОбъект, "АктОбОказанииПроизводственныхУслуг", ДопПараметры);
		КонецЕсли;			
	КонецЕсли;
	
	// МАТЕРИАЛЫ ПО РЕГИСТРУ МатериалыВПроизводстве.
	Если ИспользоватьМатериалы Тогда
		
		// Проверка остатков при оперативном проведении.
		Движения.МатериалыВПроизводстве.КонтрольОстатков(
			СтруктураШапкиДокумента, 
			Отказ, 
			Заголовок,
			РежимПроведения);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		// Формирование движений расход по регистру "Материалы в производстве".
		УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоМатериаламВПроизводстве(
			СтруктураШапкиДокумента, 
			мУчетнаяПолитика);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетовРегл(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
		
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
				
КонецПроцедуры

// Формирование движений по регистрам по регламентированному учету.
//
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
						ТаблицаПоУслугам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений по регистру "Учет продаж и себестоимости".
	РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
		СтруктураШапкиДокумента,
		ТаблицаПоУслугам
	);  
	
	Если НЕ СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		
		// Формирование движений по регистру ПродажиУслугиРегл
		НаборДвижений = Движения.ПродажиУслугиРегл;
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		ТабИменУслуги = Неопределено;
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоУслугам, ТабИменУслуги, "ПроводкиСуммаСНДСРегл", "Стоимость");
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоУслугам, ТабИменУслуги, "ПроводкиСуммаНДСРегл", "НДС");
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвижений);
		
		ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоУслугам, ТабИменУслуги);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "ПодразделениеОрганизации");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "Заказ");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ПродажиУслугиРегл.ВыполнитьДвижения();
		КонецЕсли;
		
	КонецЕсли;
		
	ПроводкиБУ = Движения.Хозрасчетный;

	// Выручка
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период          = Дата;
		Проводка.Активность      = Истина;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
		Проводка.Содержание      = "Реализация товаров";
		Проводка.НомерЖурнала    = "";

		Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
		Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
		
		Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
		    Проводка.СуммаНУКт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеКт, СтрокаТаблицы.СтоимостьНУ);
		КонецЕсли;

	КонецЦикла;
	
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ);

	// Проводки по взаиморасчетам
	СуммаУслугСНДС = Услуги.Итог("Сумма")+?(СтруктураШапкиДокумента.СуммаВключаетНДС,0,Услуги.Итог("СуммаНДС"));
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Заголовок,СуммаУслугСНДС);


    Если СтруктураПараметровЗачетАванса = ложь тогда
		Отказ = Истина;
		СуммаАванса = 0;
	Иначе
		//Возвращает сумму аванса в валюте регламентированного учета!
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураШапкиДокумента, ТаблицаПоУслугам);
		СтруктураДвижений = Новый Структура("ПроводкиБУ", ПроводкиБУ); 
		СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса,СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации);
		
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			
			БухгалтерскийУчетРасчетовСКонтрагентами.ПроверитьВозможностьЗачетаАвансаВВалюте(СтруктураШапкиДокумента, СтруктураПараметровЗачетАванса, Отказ, Заголовок);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеПриобретение(СтруктураПараметровЗачетАванса, мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ);
			
		КонецЕсли;
	КонецЕсли;// Проводки по взаиморасчетам
	
	//Учет курсовых разниц
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета тогда
		СтруктураПараметровКР = БухгалтерскийУчет.ПодготовкаСтруктурыПараметровДляПереоценкиСчета(Ссылка,Заголовок);
		ПроводкиБУ.Записать(Ложь);
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(СтруктураПараметровКР,ПроводкиБУ,мВалютаРегламентированногоУчета,Истина);
		ПроводкиБУ.Записать(Ложь);
	КонецЕсли; // Учет курсовых разниц
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПОДГОТОВКИ ТАБЛИЦ ЗНАЧЕНИЙ ДЛЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
	Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, Заголовок)

	мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	мУчетЗатратПоЗаказамНаПроизводство = мУчетнаяПолитикаРегл.УчетЗатратПоЗаказамНаПроизводство;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Услуги",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления)
	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();
	
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
								  
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуУслугРегл(ТаблицаУслуг, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента);

	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

Процедура ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаУслуг.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("Себестоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("НДСУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
    ТаблицаУслуг.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
    ТаблицаУслуг.Колонки.Добавить("СтоимостьБезСкидок"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ДанныеРегл    = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);

	// Надо заполнить новые колонки.
	Для Каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		Если СуммаВключаетНДС Тогда
			СуммаСНДС = СтрокаТаблицы.Сумма;
		Иначе
			СуммаСНДС = СтрокаТаблицы.Сумма + СтрокаТаблицы.НДС;
		КонецЕсли;
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		

		// Суммы пересчитаем в валюту упр. учета
		СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
										СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										СтруктураШапкиДокумента.КурсДокумента, 
										СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										СтруктураШапкиДокумента.КратностьДокумента, 
										СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
								 
        СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
										мВалютаРегламентированногоУчета,
										СтруктураШапкиДокумента.КурсДокумента, 
										ДанныеРегл.Курс,
										СтруктураШапкиДокумента.КратностьДокумента, 
										ДанныеРегл.Кратность);

		СтрокаТаблицы.НДСУпр= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Стоимость;	 

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

Процедура ПодготовитьТаблицуУслугРегл(ТаблицаУслуг, СтруктураШапкиДокумента, ПогрешностиОкругления);

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаУслуг.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаУслуг.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	
		ТаблицаУслуг.Колонки.Добавить("НалоговоеНазначениеНовое", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И СтруктураШапкиДокумента.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
			// расходы будем относить на нехоз. деятельность, это равнозначно непризнанию расходов по себестомости (при реализации услуг по авансу до 01.04)
			ТаблицаУслуг.ЗаполнитьЗначения(Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность , "НалоговоеНазначениеНовое");
		Иначе	
			ТаблицаУслуг.ЗагрузитьКолонку(ТаблицаУслуг.ВыгрузитьКолонку("НалоговоеНазначениеДоходовИЗатрат") , "НалоговоеНазначениеНовое");
		КонецЕсли;
	
	ДобавитьКолонкиТоваровРегл(ТаблицаУслуг, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	ТаблицаУслуг.Колонки.Добавить("СебестоимостьБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СебестоимостьНУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

КонецПроцедуры // ПодготовитьТаблицуУслугРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Материалы",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоМатериалам.Выгрузить();
	
	КолвоЭлементов = ТаблицаМатериалов.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
   		СтрокаТаблицы = ТаблицаМатериалов[КолвоЭлементов - ОбратныйИндекс];
  
   		Если Не СтрокаТаблицы.ВестиОперативныйУчетОстатковНЗП Тогда
      		ТаблицаМатериалов.Удалить(СтрокаТаблицы);
   		КонецЕсли;

	КонецЦикла;
	
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуМатериалов()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей)
	
	СтруктураПолей.Вставить("СчетЗатрат"      		, "СчетЗатрат");
	СтруктураПолей.Вставить("СчетДт"                    , "СхемаРеализации.СчетСебестоимости");
	СтруктураПолей.Вставить("СубконтоДт1"               , "СхемаРеализации.СубконтоСебестоимости1");
	СтруктураПолей.Вставить("СубконтоДт2"               , "СхемаРеализации.СубконтоСебестоимости2");
	СтруктураПолей.Вставить("СубконтоДт3"               , "СхемаРеализации.СубконтоСебестоимости3");
	СтруктураПолей.Вставить("СхемаРеализации"    		, "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ"      		, "СхемаРеализации.СчетДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"      	, "СхемаРеализации.СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"      	, "СхемаРеализации.СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"      	, "СхемаРеализации.СубконтоДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"          	, "СхемаРеализации.СчетСебестоимости");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"     	, "СхемаРеализации.СубконтоСебестоимости1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"     	, "СхемаРеализации.СубконтоСебестоимости2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"     	, "СхемаРеализации.СубконтоСебестоимости3");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
    СтруктураПолей.Вставить("НалоговоеНазначение"  		, "НалоговоеНазначение");
    СтруктураПолей.Вставить("ВидНалоговойДеятельности"  , "НалоговоеНазначение.ВидНалоговойДеятельности");   	
	СтруктураПолей.Вставить("ВидДеятельностиНДС"  		, "НалоговоеНазначение.ВидДеятельностиНДС");
    СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат" , "НалоговоеНазначениеДоходовИЗатрат");
    СтруктураПолей.Вставить("ВидНалоговойДеятельностиДоходовИЗатрат"  , "НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности");  
	СтруктураПолей.Вставить("НомерСтрокиДокумента"      , "НомерСтроки");


КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнениеДокументов.ЗаполнитьДанныеДоставкиПоОснованию(ЭтотОбъект, Основание);
		
		ЗаполнениеДокументов.ЗаполнитьНастройкиДокументаВыпуска(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		#Если Клиент Тогда
		СписокПодразделений = РаботаСДиалогами.ПолучитьСписокПодразделенийОрганизаций(Основание.Подразделение,Основание.Организация);
		Если СписокПодразделений.Количество()=0 Тогда
		    ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		Иначе
			ПодразделениеОрганизации = СписокПодразделений[0].Значение;
		КонецЕсли;
		#КонецЕсли
	
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		ИспользоватьЗаказы = Истина;

		Сделка = Основание;
		Если Основание.Проведен Тогда
			
			ЗаполнитьУслугиПоОстаткам();

		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

			СкопироватьУслуги();
			Если НЕ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				Сделка = Основание.ЗаказПокупателя;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
		ЗаполнениеДокументов.ЗаполнитьНастройкиДокументаВыпуска(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));			
		
		Сделка = ЗаполнитьСделкуПоЗаказуНаПроизводство(Основание);
		Если ЗначениеЗаполнено(Сделка) Тогда
			Контрагент = Сделка.Контрагент;
			ДоговорКонтрагента = Сделка.ДоговорКонтрагента;
		КонецЕсли;	
		
		#Если Клиент Тогда
		СписокПодразделений = РаботаСДиалогами.ПолучитьСписокПодразделенийОрганизаций(Основание.Подразделение,Основание.Организация);
		Если СписокПодразделений.Количество()=0 Тогда
			ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		Иначе
			ПодразделениеОрганизации = СписокПодразделений[0].Значение;
		КонецЕсли;
		#КонецЕсли
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Истина;
		
		ИспользоватьЗаказы = Истина;
		
		Если Основание.Проведен Тогда
			
			ЗаполнитьТабличнуюЧастьПоОстаткамЗаказНаПроизводство(Услуги, Основание);
			
			ЗаполнитьПотребностямиПоЗаказамНаПроизводство(РаспределениеМатериалов, Основание);
			
			ТабЧасть = РаспределениеМатериалов.Выгрузить();
			Материалы.Загрузить(ТабЧасть);
			Материалы.Свернуть("ЗаказВыпуска,Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Коэффициент,Спецификация","Количество");
			
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;

	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
	Если ЗначениеЗаполнено(Подразделение)
	   И Подразделение.ВидПодразделения<>Перечисления.ВидыПодразделений.ОсновноеПроизводство
	   И Подразделение.ВидПодразделения<>Перечисления.ВидыПодразделений.ВспомогательноеПроизводство Тогда
		   
		Подразделение = Справочники.Подразделения.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодразделениеОрганизации)
	   И ПодразделениеОрганизации.ВидПодразделения<>Перечисления.ВидыПодразделений.ОсновноеПроизводство
	   И ПодразделениеОрганизации.ВидПодразделения<>Перечисления.ВидыПодразделений.ВспомогательноеПроизводство Тогда
		   
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Если не ИспользоватьМатериалы и Материалы.Количество()>0 Тогда
		ИспользоватьМатериалы = истина;
	КонецЕсли;
	Если не ИспользоватьПрочиеЗатраты и ПрочиеЗатраты.Количество()>0 Тогда
		ИспользоватьпрочиеЗатраты = истина;
	КонецЕсли;
	
	Если АвтораспределениеМатериалов и РаспределениеМатериалов.Количество()>0 Тогда
		АвтораспределениеМатериалов = Ложь;
	КонецЕсли;
	Если АвтораспределениеПрочихЗатрат и РаспределениеПрочихЗатрат.Количество()>0 Тогда
		АвтораспределениепрочихЗатрат = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, ЭтотОбъект, ПогрешностиОкругления, "Услуги");
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);
	
	Если АвтораспределениеМатериалов Тогда
		ЗаполнитьРаспределениеМатериалов();
	КонецЕсли;
	Если АвтораспределениеПрочихЗатрат Тогда
		ЗаполнитьРаспределениеПрочихЗатрат();
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Реализация",
			Дата,
			Организация,
			Неопределено,           // ТабличнаяЧастьТовары
			Неопределено,       	// ТабличнаяЧастьВозвратнаяТара
			Услуги,               	// ТабличнаяЧастьУслуги
			Неопределено,         	// ТабличнаяЧастьОборудование
			Неопределено, 			// ТабличнаяЧастьОбъектыСтроительства
			Неопределено  			// ТабличнаяЧастьБланкиСтрогогоУчета
		);
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	

	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если ЕстьАвансДо01042011 Тогда
		Если НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ Тогда
			СуммаВДВРПоАвансуДо01042011	= СуммаДокумента;
			Если ВалютаДокумента <> глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
				СуммаВДВРПоАвансуДо01042011	= 9999999999.99;
			КонецЕсли;
		КонецЕсли;
	Иначе	
		НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено,Отказ=ложь) Экспорт

	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения); 
    	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВедениеВзаиморасчетов", "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетовРегл"                 , "ВедениеВзаиморасчетовРегл");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВалютаВзаиморасчетов" , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "Организация"          , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВидДоговора"          , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВестиПоДокументамРасчетовСКонтрагентом" , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"        , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ОбособленныйУчетТоваровПоЗаказамПокупателей" , "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"   , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"   , "УчетЗатратПоЗаказамНаПроизводство"			 , "УчетЗатратПоЗаказамНаПроизводство");

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	СтруктураШапкиДокумента.Вставить("ВидВоспроизводства", Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);	
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам) Экспорт
	
	//Подготовим таблицу услуг для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей=Новый Структура;	
	
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("Продукция"        	  , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"          , "Количество");
	СтруктураПолей.Вставить("КоличествоДоделка"   , "КоличествоДоделка");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"    , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ВесовойКоэффициент"  , "ВесовойКоэффициент");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                 , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"         , "НомерСтроки");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Спецификация"        , "Спецификация");
	СтруктураПолей.Вставить("ЗаказВыпуска" 		  , "ЗаказВыпуска");
	СтруктураПолей.Вставить("ЗаказНаПроизводство" , "ЗаказВыпуска");
	
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;

	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	ПогрешностиОкругления     = Новый Соответствие;
	
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ТаблицаПоУслугам.Колонки.Добавить("Заказ"); 	
	
КонецПроцедуры // СформироватьТаблицыДокумента()

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоУслугам;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли; 	
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);

	// Получим данные учетной политики		
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);	
	// При получении учетной политики произошли ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	ПроверкаРеквизитов(СтруктураШапкиДокумента, Отказ, Заголовок);
	                          
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
		                    СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		                    мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);

	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;  	
	 
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам);

	//Проверим заполнение счетов учета.
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Услуги", ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
		
	// Подготовим таблицу материалов для проведения.
	Если ИспользоватьМатериалы Тогда
		
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("Номенклатура"        		, "Номенклатура");
		СтруктураПолей.Вставить("Услуга"              		, "Номенклатура.Услуга");
		СтруктураПолей.Вставить("Набор"               		, "Номенклатура.Набор");
		СтруктураПолей.Вставить("ВестиОперативныйУчетОстатковНЗП", "Номенклатура.ВестиОперативныйУчетОстатковНЗП");
		СтруктураПолей.Вставить("Количество"          		, "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
		СтруктураПолей.Вставить("СтатьяЗатрат"				, "СтатьяЗатрат");
		СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
		СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
		СтруктураПолей.Вставить("Затрата"        			, "Номенклатура");
		СтруктураПолей.Вставить("ХарактеристикаЗатраты"		, "ХарактеристикаНоменклатуры");
		СтруктураПолей.Вставить("СерияЗатраты"         		, "СерияНоменклатуры");
		СтруктураПолей.Вставить("ЗаказВыпуска" 				, "ЗаказВыпуска");
		
		РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей);
		ТаблицаПоМатериалам = ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);
		ТаблицаПоМатериалам.Колонки.Добавить("Заказ");
		ТаблицаПоМатериалам.Колонки.Добавить("ЗаказНЗП");
		
	КонецЕсли;

	СтруктураПодготовленныхТаблиц = Новый Структура("Услуги", ТаблицаПоУслугам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);
                
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
						ТаблицаПоУслугам, ТаблицаПоМатериалам, 
						ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
						Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	
	// Удаление записей регистрации из всех последовательностей
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений по бухгалтерскому и налоговому учетам
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления) Экспорт
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(
		ТаблицаТоваров, 
		СтруктураШапкиДокумента, 
		ПогрешностиОкругления, 
		Ложь
	);

КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// 
Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС 
		И НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		// Налоговый учет НП или НДС не ведется
		Возврат;
	КОнецЕсли;

    СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", 		СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",  СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	СтруктураПараметров.Вставить("НаправлениеДвижения", Перечисления.НаправленияДвижений.Выбытие);
	СтруктураПараметров.Вставить("РасчетыВозврат",  	Перечисления.РасчетыВозврат.Расчеты);
	
	СтруктураПараметров.Вставить("ЕстьНДС",  			СтруктураШапкиДокумента.ЕстьНДС);
	СтруктураПараметров.Вставить("ВалютаДокумента",     СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("Период",     			СтруктураШапкиДокумента.Дата);
	
    СтруктураДвижений = Новый Структура;
	СтруктураДвижений.Вставить("НалоговыйУчет", 			 Движения.ПродажиНалоговыйУчет);
	СтруктураДвижений.Вставить("ОжидаемыИПодтвержденныйНДС", Движения.ОжидаемыйИПодтвержденныйНДСПродаж);
	
	МассивТаблицТоваров = Новый Массив();
		
	МассивТаблицТоваров.Добавить(ТаблицаПоУслугам);
	
	СтруктураПараметров.Вставить("ТаблицыТоваров", МассивТаблицТоваров);
	
	НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаОтгрузка(СтруктураПараметров, СтруктураДвижений, мВалютаРегламентированногоУчета, Отказ);
	
КонецПроцедуры // 							  

//
Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ)
	
	// Бухгалтерский учет
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		// Это не наши ценности, следовательно НДС по ним учитывать не нужно
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	// Получим таблицу движений по счетам НДС
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	ТаблицаДвижений.Свернуть("СделкаРегл, СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС, НалоговоеНазначениеДоходовИЗатрат","ПроводкиСуммаНДСРегл, ПроводкиСуммаНДСВал");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = "НДС: налоговый кредит: отгрузка";
			Проводка.НомерЖурнала               = "";

			Проводка.СчетДт                     = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			    Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СтрокаТаблицы.ПроводкиСуммаНДСРегл);
			КонецЕсли;
			

			Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры
                                                  
// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)
	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ТаблицаПоУслугам,
		"Услуги",
		Отказ, 
		Заголовок, 
		"Реализация",    // ВидОперации
		Истина           // ЭтоЗатраты 
	);	
	
	
	// Схемы реализации должны быть заполнены правильно
	СтруктураПараметровПроверки = Новый Структура;
	СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетДоходов");
	СтруктураПараметровПроверки.Вставить("СчетРасходовБУ", "СчетСебестоимости");
	БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, "Услуги", , ТаблицаПоУслугам, 
							                             СтруктураПараметровПроверки,
														 СтруктураШапкиДокумента,
							                             Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мИспользоватьЗаказыНаПроизводство 					= УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство();
мУчетЗатратПоЗаказамНаПроизводство 					= Ложь;
мИспользоватьТолькоСборочныеСпецификации 			= глЗначениеПеременной("ИспользоватьТолькоСборочныеСпецификации");
мИспользоватьПотребностиЗаказовНаПроизводство 		= глЗначениеПеременной("ИспользоватьПотребностиЗаказовНаПроизводство");
мСпособЗакрытияПотребностейЗаказовНаПроизводство 	= глЗначениеПеременной("СпособЗакрытияПотребностейЗаказовНаПроизводство");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Услуги", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

