Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура формирует печатную форму в случае отбора проб для внешней сертификации
// 
Функция ПечатьАктаОтбораОбразцов() Экспорт

	ТабДок = Новый ТабличныйДокумент();
	Макет  = ПолучитьМакет("АктОтбораОбразцов");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.Контрагент = ОрганПоСертификации;
	ФильтрОтбораИнф = Новый Структура("Объект, Тип, Вид",ОрганПоСертификации, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Выборка = РегистрыСведений.КонтактнаяИнформация.Получить(ФильтрОтбораИнф);
	Секция.Параметры.Адрес    = Выборка.Представление;
	Секция.Параметры.Аттестат = УправлениеСертификациейНоменклатуры.ПолучитьАттестатАккредитации(ОрганПоСертификации,Дата, КодЯзыкаПечать);
	Секция.Параметры.НомерДок = Номер;
	
	Если НЕ ЗначениеЗаполнено(ЗаявкаНаСертификациюНоменклатуры) Тогда
		Секция.Параметры.ТекстЗаявки = "Заявка -";
	Иначе
		Секция.Параметры.ТекстЗаявки = "Номер заявки "
			+ Формат( ЗаявкаНаСертификациюНоменклатуры.Дата, "ДЛФ=DD")
			+ " от " + ЗаявкаНаСертификациюНоменклатуры.Номер;
	КонецЕсли;
	
	ЕдиницаИзмерения    = Номенклатура.ЕдиницаХраненияОстатков;
	Секция.Параметры.Ед = ЕдиницаИзмерения;
	Секция.Параметры.Организация  = Организация;
	Секция.Параметры.Изготовитель = "";
	ТабДок.Вывести(Секция);
	СтрокаДокументов    = "";
	
	Если НЕ ЗначениеЗаполнено(СерияНоменклатуры)=0  Тогда
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Документ.ПоступлениеТоваровУслуг.Ссылка
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг, 
		|		Документ.ПоступлениеТоваровУслуг.Товары
		|	ГДЕ 
		|		(СерияНоменклатуры=&Серия) И Проведен И ОтражатьВУправленческомУчете И (ВидОперации=&прмПоступлениеТоваровУслуг) И
		|		(Документ.ПоступлениеТоваровУслуг.Ссылка = Документ.ПоступлениеТоваровУслуг.Товары.Ссылка)
		|	ОБЪЕДИНИТЬ 
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	 Ссылка
		|	ИЗ
		|		Документ.СертификацияНоменклатуры
		|	Где (СерияНоменклатуры=&Серия) И  Проведен И
		|		(ВидОперации=&прмВидОперацииСертификации)";
		Если Метаданные.Документы.Найти("ОтчетПроизводстваЗаСмену") <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ОБЪЕДИНИТЬ 
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		Документ.ОтчетПроизводстваЗаСмену.Ссылка
			|	ИЗ
			|		Документ.ОтчетПроизводстваЗаСмену,
			|		Документ.ОтчетПроизводстваЗаСмену.Продукция 
			|	ГДЕ
			|	 	(СерияНоменклатуры=&Серия) И   Проведен И ОтражатьВУправленческомУчете И
			|	 	(Документ.ОтчетПроизводстваЗаСмену.Ссылка = Документ.ОтчетПроизводстваЗаСмену.Продукция.Ссылка)";
		КонецЕсли;
		
		Запрос1 = Новый Запрос;
		Запрос1.Текст = ТекстЗапроса;
		Запрос1.УстановитьПараметр("Серия",СерияНоменклатуры);
		Запрос1.УстановитьПараметр("прмВидОперацииСертификации",Перечисления.ВидыОперацийСертификацияНоменклатуры.внутренняя);
		Запрос1.УстановитьПараметр("прмПоступлениеТоваровУслуг",Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
		ТЗ = Запрос1.Выполнить().Выгрузить();
		Для каждого СтрокаТЗ из ТЗ Цикл                                                         
			СтрокаДокументов = СтрокаДокументов + Строка(Локализация.ПолучитьЛокализованныйСинонимОбъекта(СтрокаТЗ.Ссылка, КодЯзыкаПечать)) + " № " + Строка(СтрокаТЗ.Ссылка.Номер) + НСтр("ru=' от ';uk=' від '",КодЯзыкаПечать) + Строка(Формат(СтрокаТЗ.Ссылка.Дата,"ДЛФ=Д")) + Символы.ПС;          
		КонецЦикла;	
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("Строка");
	Секция.Параметры.Ном   = 1;
	Секция.Параметры.Номенклатура     = Строка(Номенклатура) + Символы.ПС + СтрокаДокументов + " " + Строка(НормативныйДокумент);
	Секция.Параметры.НоменклатураРасш = Номенклатура;
	Секция.Параметры.СрокГодности     = Формат(СерияНоменклатуры.СрокГодности,"ДЛФ=Д");
	Секция.Параметры.Серия = СерияНоменклатуры;
	Секция.Параметры.ЕдИзм = Номенклатура.ЕдиницаХраненияОстатков;
	КоличПоСериям          = 0;
	КоличМест              = 0;
	
	Если  НЕ ЗначениеЗаполнено(СерияНоменклатуры) = 0  Тогда
		КоличПоСериям = УправлениеСертификациейНоменклатуры.ПолучитьОбщееКоличествоПоступленияПоСериям(СерияНоменклатуры);
	КонецЕсли;
	
	КоличМест = КоличПоСериям;
	Если  КоличПоСериям > 0 Тогда
		КоличМест = Цел(КоличМест - 1)+ 1;
	КонецЕсли;	
	
	Секция.Параметры.КоличествоПродукции = Строка(Формат(КоличПоСериям,"ЧДЦ=3")) + "   (" + Строка(Формат(КоличМест,"ЧДЦ=0")) + "  " + Строка(ЕдиницаИзмерения) + ")";
	Секция.Параметры.Количество1 = Формат(Испытания,"ЧДЦ=3");
	Секция.Параметры.Количество2 = Формат(КонтрольнаяПроба,"ЧДЦ=3");
	Секция.Параметры.Влажность   = Влажность;
	Секция.Параметры.Температура = Температура;
	ТабДок.Вывести(Секция);
	Секция = Макет.ПолучитьОбласть("Подвал");
	Секция.Параметры.РезультатОсмотра    = РезультатНаружногоОсмотра;
	Секция.Параметры.НормативныйДокумент = НормативныйДокумент;
	Секция.Параметры.МестоВремяОтбора    = Строка(Склад) + " " + Строка(Дата);
	
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку     = Ложь;
	ТабДок.ТолькоПросмотр      = Истина;
	ТабДок.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	
	ТабДок.Вывести(Секция);
	
	Возврат ТабДок;	
	
КонецФункции // ПечатьАктаОтбораОбразцов()

// Функция рассчитывает число колоник при печати форма отбора лекарственных проб.
//
Функция РассчитатьЧислоКолонокПриПечати()
	
    ТабДок = РаспределениеПоЛабораториям.Выгрузить();
    ТабДок.Свернуть("Подразделение");
    Колво  = ТабДок.Количество();
    
    ТабДок = РаспределениеПоЛабораториям.Выгрузить();
    ТабДок.Свернуть("ВидАнализа");
    
    Возврат Макс( Колво, ТабДок.Количество());
	
КонецФункции // РассчитатьЧислоКолонокПриПечати()

// Процедура формирует печатную форму в случае отбора проб для внутренней сертификации
//
Функция ПечатьАктаОтбораПроб(ИмяМакета) Экспорт

	ДобавитьКолонок = 0;
	ТабДок = Новый ТабличныйДокумент;
	
	СрокГодностиПечать = Формат( СерияНоменклатуры.СрокГодности, "ДЛФ=DD; ДП=-");
	Если ИмяМакета = "АктОтбораПробГотовойПродукции" Тогда
	
		Макет  = ПолучитьМакет("АктОтбораПробГотовойПродукции");
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		Секция = Макет.ПолучитьОбласть("Заголовок");
		Секция.Параметры.СрокГодности              = СрокГодностиПечать;
		Секция.Параметры.РегистрационныйНомер      = СерияНоменклатуры.СерийныйНомер;
		Секция.Параметры.НормативныйДокумент       = НормативныйДокумент;
		Секция.Параметры.МестоОтбораПроб           = Склад;
		Секция.Параметры.РезультатНаружногоОсмотра = РезультатНаружногоОсмотра;
		
	ИначеЕсли ИмяМакета = "АктОтбораПробИсходныхМатериалов" Тогда
	
		Макет  = ПолучитьМакет("АктОтбораПробИсходныхМатериалов");
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		Секция = Макет.ПолучитьОбласть("Заголовок");
		Секция.Параметры.СрокГодности = СрокГодностиПечать;
		
	ИначеЕсли ИмяМакета = "АктОтбораПробЛекарственногоСырья" Тогда
	
		ДобавитьКолонок = 1;
		Макет  = ПолучитьМакет("АктОтбораПробЛекарственногоСырья");
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		Секция = Макет.ПолучитьОбласть("Заголовок");
		Секция.Параметры.СрокГодности = СрокГодностиПечать;
		
	ИначеЕсли ИмяМакета = "АктОтбораПробУпаковочныхМаркировочныхМатериалов" Тогда
	
		Макет  = ПолучитьМакет("АктОтбораПробУпаковочныхМаркировочныхМатериалов");
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		Секция = Макет.ПолучитьОбласть("Заголовок");
		
	КонецЕсли;
	
	Секция.Параметры.Организация             = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице( Организация, Дата)["ПолноеНаименование"];
	Секция.Параметры.НомерДок                = Номер;
	Секция.Параметры.ДатаДок                 = Формат(Дата,"ДЛФ=Д");
	Секция.Параметры.НаименованиеПродукции   = Номенклатура.НаименованиеПолное;
	Секция.Параметры.НомерСерии              = СерияНоменклатуры.Наименование;
	Секция.Параметры.СерияРасшифровка        = СерияНоменклатуры;
	Секция.Параметры.НоменклатураРасшифровка = Номенклатура;
	
	Если ИмяМакета <> "АктОтбораПробГотовойПродукции" Тогда
		Секция.Параметры.ВнутреннийНомер = СерияНоменклатуры.СерийныйНомер;
		Секция.Параметры.Производитель   = "";
		Секция.Параметры.Поставщик       = ?( НЕ ЗначениеЗаполнено(СерияНоменклатуры), "", УправлениеСертификациейНоменклатуры.ПолучитьПоставщикаСерии(СерияНоменклатуры));
		Секция.Параметры.РезультатНаружногоОсмотра = РезультатНаружногоОсмотра;
		Секция.Параметры.ХарактеристикаУпаковки    = ЗамечанияКУпаковкеМаркировке;
	Иначе
		Секция.Параметры.ЗамечанияКУпаковкеМаркировке = ЗамечанияКУпаковкеМаркировке;
	КонецЕсли;
	
	КоличПоСериям = 0;
	Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		КоличПоСериям = УправлениеСертификациейНоменклатуры.ПолучитьОбщееКоличествоПоступленияПоСериям(СерияНоменклатуры);
	КонецЕсли;
	
	КолИндУпаковок = ?( КоличПоСериям = 0, "-", Формат( КоличПоСериям, "ЧЦ=15; ЧДЦ=3; ЧРД=,; ЧРГ=' '; ЧН=-") + " " + Номенклатура.ЕдиницаХраненияОстатков);
	Секция.Параметры.Количество                       = КолИндУпаковок;
	Секция.Параметры.КоличествоИндивидуальныхУпаковок = КолИндУпаковок;
	Секция.Параметры.КоличествоУпаковок               = ?( КоличествоВскрытыхУпаковок = 0, "-", Формат( КоличествоВскрытыхУпаковок, "ЧЦ=15; ЧДЦ=3; ЧРД=,; ЧРГ=' '; ЧН=-"));	
	ТабДок.Вывести(Секция);

	// Выводим распределение по лабораториям
	ТЧДок = РаспределениеПоЛабораториям.Выгрузить();
	ТЧДок.Свернуть("Подразделение","Количество");
	КоличествоПодразделений = Макс(ТЧДок.Количество(), ДобавитьКолонок + 3);
	Секция                  = Макет.ПолучитьОбласть("ШапкаЗаголовок|Основа1");
	Секция.Параметры.ЕдХр   = Номенклатура.ЕдиницаХраненияОстатков;
	ТабДок.Вывести(Секция);
	
	КоличествоПодразделений = Макс(ТЧДок.Количество(), ДобавитьКолонок + 3);
	Если  ИмяМакета = "АктОтбораПробЛекарственногоСырья" Тогда
		ВсегоКолонок = Макс( РассчитатьЧислоКолонокПриПечати(), ДобавитьКолонок + 3);
	Иначе
		ВсегоКолонок = КоличествоПодразделений;
	КонецЕсли;
	
	Для А = (4 + ДобавитьКолонок) по КоличествоПодразделений Цикл
		Секция = Макет.ПолучитьОбласть("ШапкаЗаголовок|Дополнительно");
		ТабДок.Присоединить(Секция);
	КонецЦикла;	
	
	Секция = Макет.ПолучитьОбласть("ШапкаЗаголовок|Лаборатория2");
	ТабДок.Присоединить(Секция);
	Секция = Макет.ПолучитьОбласть("Шапка|Основа");
	ТабДок.Вывести(Секция);
	
	Ном = 1;
	Для а = 1 по ВсегоКолонок Цикл
		Если Ном = ( Цел( ВсегоКолонок / 2) + 1) Тогда
			Секция = Макет.ПолучитьОбласть("Шапка|Лаборатория");
		ИначеЕсли Ном = ВсегоКолонок Тогда
			Секция = Макет.ПолучитьОбласть("Шапка|Лаборатория2");
		Иначе
			Секция = Макет.ПолучитьОбласть("Шапка|Лаборатория1");
		КонецЕсли;
		Если а > ТЧДок.Количество() Тогда
			Секция.Параметры.Подразделение = "";
		Иначе
			Секция.Параметры.Подразделение = ТЧДок[а - 1].Подразделение;
		КонецЕсли;
		ТабДок.Присоединить(Секция);
		Ном = Ном + 1;
	КонецЦикла;
	
	Секция = Макет.ПолучитьОбласть("Строка|Основа");
	Секция.Параметры.Температура = Температура;
	Секция.Параметры.Влажность = Влажность;
	
	Если  ИмяМакета <> "АктОтбораПробЛекарственногоСырья" Тогда
		Секция.Параметры.КоличествоВсего = Формат(ТЧДок.Итог("Количество"), "ЧДЦ=3");
	КонецЕсли;
	
	ТабДок.Вывести(Секция);
	Секция = Макет.ПолучитьОбласть("Строка|Лаборатория");
	
	Ном = 1;
	Для а = 1 по ВсегоКолонок Цикл
		Если а > ТЧДок.Количество() Тогда
			Секция.Параметры.Количество = "";
		Иначе
			Секция.Параметры.Количество = Формат(ТЧДок[а - 1].Количество,"ЧДЦ=3");
		КонецЕсли;
		ТабДок.Присоединить(Секция);
		Ном = Ном + 1;
	КонецЦикла;
	
	Секция = Макет.ПолучитьОбласть("Подвал");
	ТабДок.Вывести(Секция);
	
	Если  ИмяМакета = "АктОтбораПробЛекарственногоСырья" Тогда
		
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		Макет = ПолучитьМакет("АктОтбораПробЛекарственногоСырьяЧасть2");
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		Секция = Макет.получитьОбласть("Заголовок");
		Секция.Параметры.НомерДок = Номер;
		Секция.Параметры.ДатаДок = Формат(Дата,"ДЛФ=Д");
		ТабДок.Вывести(Секция);
		ТЧДок = РаспределениеПоЛабораториям.Выгрузить();
		ТЧДок.Свернуть("ВидАнализа","Количество");
		
		Для Каждого СтрТЧДок Из ТЧДок Цикл
			Если НЕ ЗначениеЗаполнено(СтрТЧДок.ВидАнализа) = 1 Тогда
				ТЧДок.Удалить(СтрТЧДок);
				Прервать;
			КонецЕсли;	
		КонецЦикла; 
		
		//КоличествоАнализ = Макс(ТЧДок.Количество(), (ДобавитьКолонок + 3));
		Секция = Макет.ПолучитьОбласть("Шапка|Основа1");
		Если ТЧДок.Количество() > 0 Тогда
			Секция.Параметры.Анализ1 = ТЧДок[0].ВидАнализа;
			Если ТЧДок.Количество() > 1 Тогда
				Секция.Параметры.Анализ2 = ТЧДок[1].ВидАнализа;
			Иначе
				Секция.Параметры.Анализ2 = "";
			КонецЕсли;	
		Иначе
			Секция.Параметры.Анализ1 = "";
			Секция.Параметры.Анализ2 = "";
		КонецЕсли;
		
		ТабДок.Вывести(Секция);
		
		Для а = 3 по ВсегоКолонок Цикл
			Если а = ВсегоКолонок Тогда
				Секция = Макет.ПолучитьОбласть("Шапка|Лаборатория2");
			Иначе
				Секция = Макет.ПолучитьОбласть("Шапка|Дополнительно");
			КонецЕсли;
			Если а > ТЧДок.Количество() Тогда
				Секция.Параметры.Анализ = "";
			Иначе
				Секция.Параметры.Анализ = ТЧДок[а - 1].ВидАнализа;
			КонецЕсли;
			ТабДок.Присоединить(Секция);
		КонецЦикла;	
		
		Секция = Макет.ПолучитьОбласть("Строка|Основа");
		Секция.Параметры.ДатаДок = Формат(Дата,"ДЛФ=Д");
		Секция.Параметры.ВнутреннийНомер = СерияНоменклатуры.СерийныйНомер;
		Секция.Параметры.СерияРасшифровка = СерияНоменклатуры;
		ТабДок.Вывести(Секция);
		
		Для а = 1 по ВсегоКолонок Цикл
			Если а = ВсегоКолонок Тогда
				Секция = Макет.ПолучитьОбласть("Строка|Лаборатория2");
			Иначе
				Секция = Макет.ПолучитьОбласть("Строка|Лаборатория");
			КонецЕсли;
			Если а > ТЧДок.Количество() Тогда
				Секция.Параметры.Количество = "";
			Иначе
				Секция.Параметры.Количество = ТЧДок[а - 1].Количество;
			КонецЕсли;
			ТабДок.Присоединить(Секция);
		КонецЦикла;	
		
		Секция = Макет.ПолучитьОбласть("Подвал");
		ТабДок.Вывести( Секция);
		
	КонецЕсли;	
	
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку     = Ложь;
	ТабДок.ТолькоПросмотр      = Истина;
	ТабДок.АвтоМасштаб         = Истина;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьАктаОтбораПроб()

// В зависимости от выбранного пользователем элемента из динамического списка печатных форм
// активизирует соответствующую процедуру печати
// 
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяМакета = "АктОтбораОбразцов" Тогда
		ТабДокумент = ПечатьАктаОтбораОбразцов();	
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	Иначе
		ТабДокумент = ПечатьАктаОтбораПроб(ИмяМакета);
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийАктОтбораПробНоменклатуры.ДляВнутреннейСертификации Тогда
		
		СтруктПечФорм = Новый Структура;
		СтруктПечФорм.Вставить( "АктОтбораПробИсходныхМатериалов",                 "Акт отбора проб исходных материалов");
		СтруктПечФорм.Вставить( "АктОтбораПробЛекарственногоСырья",                "Акт отбора проб лекарственного сырья");
		СтруктПечФорм.Вставить( "АктОтбораПробУпаковочныхМаркировочныхМатериалов", "Акт отбора проб упаковочных и маркировочных материалов");
		СтруктПечФорм.Вставить( "АктОтбораПробГотовойПродукции",                   "Акт отбора проб готовой продукции");
		
		Возврат СтруктПечФорм;
		
	Иначе
		
		СтруктПечФорм = Новый Структура;
		СтруктПечФорм.Вставить( "АктОтбораОбразцов", "Акт отбора образцов");
		
		Возврат СтруктПечФорм;
		
	КонецЕсли;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Проверяет правильность заполнения шапки документа.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена номенклатура!", Отказ, Заголовок);
		
	Иначе
		Если НЕ Номенклатура.ТребуетсяВнешняяСертификация И НЕ Номенклатура.ТребуетсяВнутренняяСертификация Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Для номенклатуры не требуется сертификация номенклатуры!", Отказ, Заголовок);
			
		ИначеЕсли НЕ Номенклатура.ТребуетсяВнешняяСертификация И ВидОперации = Перечисления.ВидыОперацийАктОтбораПробНоменклатуры.ДляВнешнейСертификации Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Для номенклатуры не требуется внешняя сертификация номенклатуры!", Отказ, Заголовок);
			
		ИначеЕсли НЕ Номенклатура.ТребуетсяВнутренняяСертификация И ВидОперации = Перечисления.ВидыОперацийАктОтбораПробНоменклатуры.ДляВнутреннейСертификации  Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Для номенклатуры не требуется внутренняя сертификация номенклатуры!", Отказ, Заголовок);
			
		КонецЕсли;  
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена серия номенклатуры!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события перед записью. Заполняет ответственного по умолчанию.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Процедура обработки проведения проверяет корректность заполнения реквизитов документа
// Документ проводится по одному из двух регистров сведений ВнешняяСертификацияНоменклатуры или ВнутренняяСертификацияНоменклатуры
// в зависимости от вида операции
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	НаборЗаписей = Движения.СертификацияНоменклатуры;
	Движение = НаборЗаписей.Добавить();
	Движение.Период = Дата;
	Движение.ВидСертификата = ?( ВидОперации = Перечисления.ВидыОперацийАктОтбораПробНоменклатуры.ДляВнешнейСертификации,
											Перечисления.ВидыСертификацииНоменклатуры.ВнешняяСертификация,
											Перечисления.ВидыСертификацииНоменклатуры.ВнутренняяСертификация);
	Движение.СерияНоменклатуры     = СерияНоменклатуры;
	Движение.СостояниеСертификации = Перечисления.СостоянияСертификацииНоменклатуры.ОтборПроб;
	
КонецПроцедуры // ОбработкаПроведения()

// Документ может быть введен на основании заявки на сертификацию
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаСертификациюНоменклатуры") Тогда
		
		Номенклатура                     = Основание.Номенклатура;
		НормативныйДокумент              = Основание.НормативныйДокумент;
		Организация                      = Основание.Организация;
		ОрганПоСертификации              = Основание.ОрганПоСертификации;
		Подразделение                    = Основание.Подразделение;
		СерияНоменклатуры                = Основание.СерияНоменклатуры;
		ЗаявкаНаСертификациюНоменклатуры = Основание.Ссылка;
		Склад                            = Основание.Склад;
		
		Если ЗаявкаНаСертификациюНоменклатуры.ВидОперации = Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.Внешняя Тогда
			ВидОперации = Перечисления.ВидыОперацийАктОтбораПробНоменклатуры.ДляВнешнейСертификации;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийАктОтбораПробНоменклатуры.ДляВнутреннейСертификации;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПриЗаписи документа
// 
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	Если ВидОперации = Перечисления.ВидыОперацийАктОтбораПробНоменклатуры.ДляВнешнейСертификации
	   И РаспределениеПоЛабораториям.Количество() > 0 Тогда
		РаспределениеПоЛабораториям.Очистить();
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()


