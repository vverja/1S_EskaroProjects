Перем мВалютаРегламентированногоУчета Экспорт;
Перем МетаданныеПоДокументам Экспорт;

#Если Клиент Тогда
	
// Настройка периода
Перем НП Экспорт;

#КонецЕсли

// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

Функция ПечатьАктаСверки()
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_АктСверки";
	Макет  = ПолучитьМакет("АктСверки");
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
	ОбластьДоговор      = Макет.ПолучитьОбласть("Договор");
	ОбластьДоговорИтоги = Макет.ПолучитьОбласть("ДоговорИтоги");
	ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
	ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
	ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
	
	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	НаименованиеКонтрагента = Контрагент.НаименованиеПолное;
	Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
		НаименованиеКонтрагента = Контрагент;
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
	ИмяПредставителяОрганизации = ПредставительОрганизации;
	ИмяПредсатвителяКонтрагента = ПредставительКонтрагента;
	
	Если ЗначениеЗаполнено(ПредставительОрганизации) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|		&КонДата,
		|		СтруктурнаяЕдиница = &Организация
		|			И ФизическоеЛицо = &ФизическоеЛицо) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
		
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ФизическоеЛицо",ПредставительОрганизации);
		Запрос.УстановитьПараметр("КонДата",Дата);
		
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() тогда
			ДолжностьПредставителяОрганизации = "";
		Иначе
			Выборка = Рез.Выбрать();
			Выборка.Следующий();
			ДолжностьПредставителяОрганизации = СокрЛП(Выборка.Должность);
		КонецЕсли;
	Иначе
		ДолжностьПредставителяОрганизации = "";
	КонецЕсли;
	ДолжностьПредставителяКонтрагента = ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"",СокрЛП(представительКонтрагента.Должность));
	
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		Если ПоДаннымОрганизации.Количество()>0 Тогда
			ДатаНачалаПериода = ПоДаннымОрганизации[0].Дата;
		Иначе
			ДатаНачалаПериода = ДатаНачала;
		КонецЕсли;
	Иначе
		ДатаНачалаПериода = ДатаНачала;
	КонецЕсли;		
	ОписаниеПериода = "";
	Если Не ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОписаниеПериода = НСтр("ru='на ';uk='на '",КодЯзыкаПечать) + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy");
	ИначеЕсли ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОписаниеПериода = НСтр("ru='за период: ';uk='за період: '",КодЯзыкаПечать) + ПредставлениеПериода(НачалоДня(ДатаНачала), КонецДня(ДатаОкончания), "ФП = Истина; Л =" + Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
	КонецЕсли;	
	
	ТекстЗаголовка = НСтр("ru='взаимных расчетов по состоянию ';uk='взаємних розрахунків станом '",КодЯзыкаПечать) + ОписаниеПериода + Символы.ПС
					+ НСтр("ru='между ';uk='між '",КодЯзыкаПечать) + НазваниеОрганизации + Символы.ПС + НСтр("ru='и ';uk='і '",КодЯзыкаПечать) + НаименованиеКонтрагента;
	
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		НаименованиеДоговора = ?(ЗначениеЗаполнено(ДоговорКонтрагента.НаименованиеДляПечати), ДоговорКонтрагента.НаименованиеДляПечати, ДоговорКонтрагента.Наименование);
		Данные = Новый Структура("ДоговорДата,ДоговорНомер,ДоговорНаименованиеДляПечати", ДоговорКонтрагента.Дата,ДоговорКонтрагента.Номер,НаименованиеДоговора);
		СписокПараметров = "ДоговорНаименованиеДляПечати,";
		МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Данные,СписокПараметров,КодЯзыкаПечать);
        НаименованиеДоговораДляПечати = МассивСтруктурСтрок[0].ЗначениеПараметра; 

		ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + НСтр("ru='по договору ';uk='за договором '",КодЯзыкаПечать) + СокрЛП(НаименованиеДоговораДляПечати);
		
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ФИОПредставителя = "" + ПредставительОрганизации;	
	СтрЗаголовокТаблица = НСтр("ru='Мы, нижеподписавшиеся, ';uk='Ми, що нижче підписалися, '",КодЯзыкаПечать)
				+ ?(ДолжностьПредставителяОрганизации<>"",ДолжностьПредставителяОрганизации,"_______________________")+" "
				+ НазваниеОрганизации 
				+ " " + ?(ФИОПредставителя<>"",ФИОПредставителя,"__________________________________________") + НСтр("ru=', с одной стороны, ';uk=', з одного боку, '",КодЯзыкаПечать)
				+ НСтр("ru='и ';uk='і '",КодЯзыкаПечать) + ?(ДолжностьПредставителяКонтрагента<>"",ДолжностьПредставителяКонтрагента,"___________________________") 
				+ " " + НаименованиеКонтрагента + " " 
				+ ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_____________________________________________",ПредставительКонтрагента) + НСтр("ru=', с другой стороны, ';uk=', з іншого боку, '",КодЯзыкаПечать)
				+ НСтр("ru='составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:';uk='склали даний акт звірення у тому, що стан взаємних розрахунків за даними обліку наступний:'",КодЯзыкаПечать);
	
	ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
	ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаДокумента;
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ИтСуммаОборотДт      = 0;
	ИтСуммаОборотКт      = 0;
	ИтСуммаОборотДтКонтр = 0;
	ИтСуммаОборотКтКонтр = 0;
	
	НачОстДебет  = ?(ОстатокНаНачало > 0, ОстатокНаНачало, 0);
	НачОстКредит = ?(ОстатокНаНачало < 0, -ОстатокНаНачало, 0);
	
	ОстатокНаКонец = ОстатокНаНачало + ПоДаннымОрганизации.Итог("Дебет") -  ПоДаннымОрганизации.Итог("Кредит");
	
	КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
	КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
	
	ОстатокНаКонецК = -ОстатокНаНачало + ПоДаннымКонтрагента.Итог("Дебет") -  ПоДаннымКонтрагента.Итог("Кредит");
	
	КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
	КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
	
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
	ТабДок.Вывести(ОбластьНачОстатки);
	ОборотыДт = 0;
	ОборотыКт = 0;
	ОборотыДтКонтр = 0;
	ОборотыКтКонтр = 0;

		
	Если ПоДаннымОрганизации.Количество()>0 ИЛИ ПоДаннымКонтрагента.Количество()>0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.Текст =	
		"ВЫБРАТЬ
		|	ВлЗапрос.Договор КАК Договор,
		|	ВлЗапрос.Дата КАК Дата,
		|	ВлЗапрос.ДокументРегистратор,
		|	ВлЗапрос.Представление,
		|	ВлЗапрос.ДатаК,
		|	ВлЗапрос.ПредставлениеК,
		|	Дебет как СуммаДогДт,
		|	Кредит как СуммаДогКт,
		|	ДебетК как СуммаДогДтКонтр,
		|	КредитК как СуммаДогКтКонтр	
		|Из
		|	(Выбрать"
		+?(РазбитьПоДоговорам,"
		|		ПоДаннымОрганизации.ДоговорКонтрагента КАК Договор,","
		|		NULL КАК Договор,")
		+"	
		|		ПоДаннымОрганизации.Дата как Дата,
		|		NUll как ДатаК,
		|		ПоДаннымОрганизации.ДокументРегистратор КАК ДокументРегистратор,
		|		ПоДаннымОрганизации.Представление КАК Представление,
		|		NULL КАК ПредставлениеК,
		|		ПоДаннымОрганизации.Дебет КАК Дебет,
		|		ПоДаннымОрганизации.Кредит КАК Кредит,
		|		0 КАК ДебетК,
		|		0 КАК КредитК
		|	ИЗ
		|		Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК ПоДаннымОрганизации
		|	Где
		|		ПоДаннымОрганизации.Ссылка = &ТекущийДокумент
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|   
		|	Выбрать"
		+?(РазбитьПоДоговорам,"
		|		ПоДаннымКонтрагента.ДоговорКонтрагента,","
		|		NULL КАК Договор,")
		+"	
		|		NULL,
		|		ПоДаннымКонтрагента.Дата,
		|		NULL,
		|		NULL,
		|		ПоДаннымКонтрагента.Представление,
		|		0,
		|		0,
		|		ПоДаннымКонтрагента.Дебет,
		|		ПоДаннымКонтрагента.Кредит
		|
		|	ИЗ
		|		Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК ПоДаннымКонтрагента
		|	Где
		|		ПоДаннымКонтрагента.Ссылка = &ТекущийДокумент
		|     
		|     
		|)	КАК ВлЗапрос
		|
		|	ИТОГИ
		|		СУММА(СуммаДогДт),
		|		СУММА(СуммаДогКт),
		|		СУММА(СуммаДогДтКонтр),
		|		СУММА(СуммаДогКтКонтр)
		|	ПО
		|		Общие,Договор";
		
		Результат = Запрос.Выполнить();		
		
		ОбходПоОбщимИтогам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
		ОбходПоОбщимИтогам.Следующий();	
		
		ОборотыДт = ОбходПоОбщимИтогам.СуммаДогДт;
		ОборотыКт = ОбходПоОбщимИтогам.СуммаДогКт;
		ОборотыДтКонтр = ОбходПоОбщимИтогам.СуммаДогДтКонтр;
		ОборотыКтКонтр = ОбходПоОбщимИтогам.СуммаДогКтКонтр;

		
		ОбходПоДоговорам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Договор");
		Пока ОбходПоДоговорам.Следующий() Цикл
			
			Если РазбитьПоДоговорам Тогда
				//Выводим заголовок с договором
				Данные = Новый Структура("ДоговорДата,ДоговорНомер,ДоговорКонтрагента,ДоговорНаименованиеДляПечати", ОбходПоДоговорам.Договор.Дата,ОбходПоДоговорам.Договор.Номер,ОбходПоДоговорам.Договор,ОбходПоДоговорам.Договор.НаименованиеДляПечати);
				СписокПараметров = "ДоговорНаименованиеДляПечати,";
				МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Данные,СписокПараметров,КодЯзыкаПечать);
				НаименованиеДоговораДляПечати = МассивСтруктурСтрок[0].ЗначениеПараметра;
				ОбластьДоговор.Параметры.Договор = НаименованиеДоговораДляПечати;
				ОбластьДоговор.Параметры.Регистратор = ОбходПоДоговорам.Договор;
				ТабДок.Вывести(ОбластьДоговор);
				ОбходПоДокументам=ОбходПоДоговорам.Выбрать();
			Иначе
				ОбходПоДокументам=Результат.Выбрать();
			КонецЕсли;		
			
			//Создадим список документов по организации и контрагенту
			СписокДокументов = новый массив;
			СписокДокументовК = новый массив;
			Пока ОбходПоДокументам.Следующий() Цикл
				Если ОбходПоДокументам.Дата<>NULL Тогда
					СписокДокументов.Добавить(новый структура("ДатаДокумента,РегистраторПредставление,Регистратор,СуммаОборотДт,СуммаОборотКт",
					ОбходПоДокументам.Дата,ОбходПоДокументам.Представление,ОбходПоДокументам.ДокументРегистратор,ОбходПоДокументам.СуммаДогДт,ОбходПоДокументам.СуммаДогКт));				
				КонецЕсли;
				
				Если ОбходПоДокументам.ДатаК<>NULL Тогда
					СписокДокументовК.Добавить(новый структура("ДатаДокументаКонтр,РегистраторПредставлениеКонтр,СуммаОборотДтКонтр,СуммаОборотКтКонтр",
					ОбходПоДокументам.ДатаК,ОбходПоДокументам.ПредставлениеК,ОбходПоДокументам.СуммаДогДтКонтр,ОбходПоДокументам.СуммаДогКтКонтр));				
				КонецЕсли; 
			КонецЦикла;
			
			//Для упрощения вывода, сравним списки по количеству элементов, добавив пустые
			МаксИндекс = Макс(СписокДокументов.Количество(), СписокДокументовК.Количество())-1;
			МинИндекс = Мин(СписокДокументов.Количество(), СписокДокументовК.Количество())-1;
			Если СписокДокументов.Количество()<СписокДокументовК.Количество() Тогда
				Для инд = МинИндекс По МаксИндекс-1 Цикл
					СписокДокументов.Добавить(новый структура("ДатаДокумента,РегистраторПредставление,Регистратор,СуммаОборотДт,СуммаОборотКт","","","","",""));
				КонецЦикла;
			ИначеЕсли СписокДокументов.Количество()>СписокДокументовК.Количество() Тогда 
				Для инд = МинИндекс По МаксИндекс-1 Цикл
					СписокДокументовК.Добавить(новый структура("ДатаДокументаКонтр,РегистраторПредставлениеКонтр,СуммаОборотДтКонтр,СуммаОборотКтКонтр","","","",""));
				КонецЦикла;			
			КонецЕсли;
			
			Для Инд = 0 По МаксИндекс Цикл
				ОбластьОбороты.Параметры.Заполнить(СписокДокументов[Инд]);
				ОбластьОбороты.Параметры.Заполнить(СписокДокументовК[Инд]);			
				ТабДок.Вывести(ОбластьОбороты);
			КонецЦикла;
			
			Если РазбитьПоДоговорам Тогда
				//Выводим итоги по каждому договору
				ОбластьДоговорИтоги.Параметры.Заполнить(ОбходПоДоговорам);		
				ТабДок.Вывести(ОбластьДоговорИтоги);	
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;  
		
		ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ОборотыДт;
		ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ОборотыКт;
		Если СверкаСогласована тогда
			ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ОборотыДтКонтр;
			ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ОборотыКтКонтр;
		КонецЕсли;
		ТабДок.Вывести(ОбластьОборотыИтог);
		
	КонецЕсли;

	//ТабДок.НачатьАвтогруппировкуСтрок();
	//
	//МаксИндекс = Макс(ПоДаннымОрганизации.Количество(), ПоДаннымКонтрагента.Количество()) - 1;
	//Для Инд = 0 По МаксИндекс Цикл
	//	Если Инд < ПоДаннымОрганизации.Количество() Тогда
	//		СтрокаОрганизации = ПоДаннымОрганизации[Инд];
	//		Регистратор = 	СтрокаОрганизации.Представление;
	//		СуммаОборотДт = СтрокаОрганизации.Дебет;
	//		СуммаОборотКт = СтрокаОрганизации.Кредит;
	//		ОбластьОбороты.Параметры.СуммаОборотДт = СуммаОборотДт;
	//		ОбластьОбороты.Параметры.СуммаОборотКт = СуммаОборотКт;
	//		ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
	//		ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
	//		ОбластьОбороты.Параметры.РегистраторПредставление = СтрокаОрганизации.Представление;
	//		ОбластьОбороты.Параметры.Регистратор = СтрокаОрганизации.ДокументРегистратор;
	//		ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
	//	Иначе
	//		ОбластьОбороты.Параметры.СуммаОборотДт = "";
	//		ОбластьОбороты.Параметры.СуммаОборотКт = "";
	//		ОбластьОбороты.Параметры.РегистраторПредставление = "";
	//		ОбластьОбороты.Параметры.Регистратор = "";
	//		ОбластьОбороты.Параметры.ДатаДокумента = "";
	//	КонецЕсли;
	//	Если Инд < ПоДаннымКонтрагента.Количество() Тогда
	//		СтрокаОрганизации = ПоДаннымКонтрагента[Инд];
	//		Регистратор = 	СтрокаОрганизации.Представление;
	//		СуммаОборотДт = СтрокаОрганизации.Дебет;
	//		СуммаОборотКт = СтрокаОрганизации.Кредит;
	//		ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
	//		ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
	//		ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
	//		ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
	//		ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = СтрокаОрганизации.Представление;
	//		ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
	//	Иначе
	//		ОбластьОбороты.Параметры.СуммаОборотДтКонтр = "";
	//		ОбластьОбороты.Параметры.СуммаОборотКтКонтр = "";
	//		ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
	//		ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
	//	КонецЕсли;
	//	ТабДок.Вывести(ОбластьОбороты);
	//КонецЦикла;
	//
	//ТабДок.ЗакончитьАвтогруппировкуСтрок();
	//
	//ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ИтСуммаОборотДт;
	//ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ИтСуммаОборотКт;
	//Если СверкаСогласована тогда
	//	ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
	//	ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
	//КонецЕсли;
	//ТабДок.Вывести(ОбластьОборотыИтог);
	
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
	
	Если СверкаСогласована тогда
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьКонОстатки);
	
	// Результаты сверки
	
   	Если ПоДаннымОрганизации.Количество() = 0 Тогда
   	    РезультатыСверки = НСтр("ru='<сверка не проведена>';uk='<звірка не проведена>'",КодЯзыкаПечать);
  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
   	    РезультатыСверки = НСтр("ru='<не указана дата сверки>';uk='<не вказано дату звірки>'",КодЯзыкаПечать);
   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
   	    РезультатыСверки = НСтр("ru='<не указан контрагент>';uk='<не вказано контрагент>'",КодЯзыкаПечать);
   	Иначе
		РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + НСтр("ru=' задолженность ';uk=' заборгованість '",КодЯзыкаПечать);
			
	   	Если ОстатокНаКонец > 0 Тогда
			РезультатыСверки = РезультатыСверки + НСтр("ru='в пользу ';uk='на користь '",КодЯзыкаПечать) + СокрЛП(НазваниеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	
	   	ИначеЕсли ОстатокНаКонец < 0 Тогда
			РезультатыСверки = РезультатыСверки + НСтр("ru='в пользу ';uk='на користь '",КодЯзыкаПечать) + СокрЛП(НаименованиеКонтрагента) + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	
	   	Иначе
	   		РезультатыСверки = РезультатыСверки + НСтр("ru='отсутствует.';uk='відсутній.'",КодЯзыкаПечать);
	   	КонецЕсли;
	КонецЕсли;
	ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
	
	Если СверкаСогласована тогда
		ОбластьПодвал.Параметры.ПоДаннымКонтрагента = НСтр("ru='По данным ';uk='За даними '",КодЯзыкаПечать) + СокрЛП(НаименованиеКонтрагента);
		
	   	Если ПоДаннымКонтрагента.Количество() = 0 Тогда
	   	    РезультатыСверки = НСтр("ru='<сверка не проведена>';uk='<звірка не проведена>'",КодЯзыкаПечать);
	  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
	   	    РезультатыСверки = НСтр("ru='<не указана дата сверки>';uk='<не вказано дату звірки>'",КодЯзыкаПечать);
	   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
	   	    РезультатыСверки = НСтр("ru='<не указан контрагент>';uk='<не вказано контрагент>'",КодЯзыкаПечать);
	   	Иначе
			РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + НСтр("ru=' задолженность ';uk=' заборгованість '",КодЯзыкаПечать);
				
		   	Если ОстатокНаКонецК < 0 Тогда
				РезультатыСверки = РезультатыСверки + НСтр("ru='в пользу ';uk='на користь '",КодЯзыкаПечать) + СокрЛП(НазваниеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
		
		   	ИначеЕсли ОстатокНаКонецК > 0 Тогда
				РезультатыСверки = РезультатыСверки + НСтр("ru='в пользу ';uk='на користь '",КодЯзыкаПечать) + СокрЛП(НаименованиеКонтрагента) + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
		
		   	Иначе
		   		РезультатыСверки = РезультатыСверки + НСтр("ru='отсутствует.';uk='відсутній.'",КодЯзыкаПечать);
		   	КонецЕсли;
	   	КонецЕсли;
		
		ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
		
		Если ОстатокНаКонец+ОстатокНаКонецК<>0 Тогда
			 ИтогСверки = НСтр("ru='В результате сверки выявлено расхождение информации о состоянии расчетов в размере ';uk='В результаті звірення виявлена розбіжність інформації про стан розрахунків у розмірі '",КодЯзыкаПечать)+Формат(?(ОстатокНаКонец+ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец+ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") +" "+ Строка(ВалютаДокумента);
			 ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
		КонецЕсли; 
	КонецЕсли;
	
	ОбластьПодвал.Параметры.НазваниеОрганизации = СокрЛП(НазваниеОрганизации);
	ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
	
	ОбластьПодвал.Параметры.Должность = "________________";
	ОбластьПодвал.Параметры.ДолжностьК ="________________";
	
	ОбластьПодвал.Параметры.ФИОПредставителя  = "("+ ФИОПредставителя +")";
	ОбластьПодвал.Параметры.ФИОПредставителяК = "("+?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_______________________",ПредставительКонтрагента)+")";
	
	ТабДок.Вывести(ОбластьПодвал);
	
	Возврат ТабДок;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли; 
	
	Если ИмяМакета = "АктСверки" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьАктаСверки();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("АктСверки","Акт сверки");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьПредставлениеДокументов(ТаблицаЗначений)
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	КэшПоТипам = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРегистратор) Тогда 
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы.ДокументРегистратор);
		Если Документы.ТипВсеСсылки().СодержитТип(ТипТекущегоДокумента) Тогда
			
			МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
			Если МассивТипа = Неопределено Тогда
				МассивТипа = Новый Массив;
				КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
			КонецЕсли;
			
			МассивТипа.Добавить(СтрокаТаблицы.ДокументРегистратор);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КэшПоТипам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначений.Индексы.Добавить("ДокументРегистратор");
	
	ТаблицаЗначений.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;

	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		ИмяМетаданных  = МетаданныеТипа.Имя;
		ЕстьНомерВходящегоДокумента = МетаданныеТипа.Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено;
		ЕстьДатаВходящегоДокумента  = МетаданныеТипа.Реквизиты.Найти("ДатаВходящегоДокумента") <> Неопределено;

		Запрос.Текст = Запрос.Текст
		+ ?(Запрос.Текст = "", "",
		" 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|")
		+ "
		|ВЫБРАТЬ
		|	""" + МетаданныеТипа.Синоним + """ КАК ПредставлениеТипа,
		|	Док.Ссылка  КАК Ссылка,
		|	" + ?(ЕстьНомерВходящегоДокумента, "Док.НомерВходящегоДокумента", "НЕОПРЕДЕЛЕНО") + " КАК Номер,
		|	" + ?(ЕстьДатаВходящегоДокумента, "Док.ДатаВходящегоДокумента", "Док.Дата") + " КАК Дата
		|ИЗ
		|	Документ."+ИмяМетаданных+" КАК Док
		|ГДЕ Док.Ссылка В (&ДокументыТипа_"+ИмяМетаданных+")";
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерДокумента  = ?(Выборка.Номер = Неопределено, ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.Ссылка), Выборка.Номер);
		ДатаДокумента = Формат(Выборка.Дата, "ДФ='дд ММ гггг'");
		СтрокаДокумента = ТаблицаЗначений.Найти(Выборка.Ссылка, "ДокументРегистратор");
		СтрокаДокумента.Представление =  Выборка.ПредставлениеТипа + " № " + НомерДокумента + " от " + ДатаДокумента;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоДаннымУправленческогоУчета() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Контрагент",    Контрагент);
	Запрос.УстановитьПараметр("Валюта",        ВалютаДокумента);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ?(НЕ ЗначениеЗаполнено(ДоговорКонтрагента),Неопределено,ДоговорКонтрагента));
	Запрос.УстановитьПараметр("Сделка",             Сделка);
	
	ТекстФильтра = "
	|		Организация = &Организация И Контрагент = &Контрагент ";
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстФильтра = ТекстФильтра + " И ДоговорКонтрагента = &ДоговорКонтрагента ";
	Иначе
		ТекстФильтра = ТекстФильтра + " И ДоговорКонтрагента.ВалютаВзаиморасчетов = &Валюта ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		ТекстФильтра = ТекстФильтра + " И Сделка = &Сделка ";
	КонецЕсли;
	
	// Остатки
	// заполнять документ будем "как для печати"
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));	
	
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ЕСТЬNULL(Взаиморасчеты.СуммаВзаиморасчетовНачальныйОстаток, 0) КАК ОстатокНаНачало,
	|	ЕСТЬNULL(Взаиморасчеты.СуммаВзаиморасчетовКонечныйОстаток, 0)  КАК ОстатокНаКонец
	|ИЗ 
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , ,"	+ ТекстФильтра + ") КАК Взаиморасчеты";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	
		ОстатокНаНачало = 0;
		ОстатокНаКонец  = 0;
	
	Иначе
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОстатокНаНачало = Выборка.ОстатокНаНачало;
		ОстатокНаКонец  = Выборка.ОстатокНаКонец;
	
	КонецЕсли;

	// Обороты
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Взаиморасчеты.Период КАК Дата,
	|	Взаиморасчеты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Взаиморасчеты.Регистратор КАК ДокументРегистратор,
	|	ЕСТЬNULL(Взаиморасчеты.Регистратор.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(Взаиморасчеты.Регистратор.ДатаВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА (НЕ ЕСТЬNULL(Взаиморасчеты.Регистратор.НомерПоручения, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО)
	|			ТОГДА Взаиморасчеты.Регистратор.НомерПоручения
	|		ИНАЧЕ ЕСТЬNULL(Взаиморасчеты.Регистратор.НомерОрдера, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК НомерДокумента,
   	|	ВЫБОР
	|		КОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход > 0
	|			ТОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход < 0
	|			ТОГДА -(Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Кредит
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор," + ТекстФильтра + ") КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.СуммаВзаиморасчетовПриход <> Взаиморасчеты.СуммаВзаиморасчетовРасход";
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	Если ВыводитьПолныеНазванияДокументов Тогда 
		ЗаполнитьПредставлениеДокументов(ТаблицаРезультата);
	Иначе
		
		ТаблицаРезультата.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));

		Для каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
		// Сформируем строку представления
			Представление = "";
			
			Если СтрокаТаблицы.Дебет > 0 тогда
				Представление =  НСтр("ru='Принято';uk='Прийнято'",КодЯзыкаПечать);
			ИначеЕсли СтрокаТаблицы.Дебет < 0 тогда
				Представление = НСтр("ru='Сторно: принято';uk='Сторно: прийняте'",КодЯзыкаПечать);
			ИначеЕсли СтрокаТаблицы.Кредит > 0 тогда
				Представление = "Передано";
			Иначе
				Представление = "Сторно: передано";
			КонецЕсли;

			Если СтрокаТаблицы.НомерВходящегоДокумента = Неопределено тогда
				Представление = Представление +" ("+Формат(СтрокаТаблицы.Дата, "ДФ=dd.MM.yyyy") +")";
			Иначе
				Представление = Представление +" ("+ ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерВходящегоДокумента),"_______",СтрокаТаблицы.НомерВходящегоДокумента) + НСтр("ru=' от ';uk=' від '",КодЯзыкаПечать) +
				?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаВходящегоДокумента), "'  .  .    '", Формат(СтрокаТаблицы.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
			КонецЕсли;
			
			СтрокаТаблицы.Представление = Представление;
   		КонецЦикла;	
	КонецЕсли;
	ПоДаннымОрганизации.Загрузить(ТаблицаРезультата);
	
КонецПроцедуры

Функция ЭтоДокументДвиженияДенежныхСредств(ДокументСсылка)

	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Результат = 
		ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.АккредитивПереданный")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.АккредитивПолученный")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеПоручениеВыставленное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеПоручениеПолученное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
	 
	Возврат Результат;

КонецФункции 

// Заполнение таблицы "По данным организации" по информации из бухгалтерского учета
Процедура ЗаполнитьПоДаннымБухгалтерскогоУчета(ФильтрСписокСчетов = неопределено) Экспорт
	
	Если ДатаОкончания < ДатаНачала Тогда
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Неверно задан период сверки расчетов.';uk='Невірно заданий період звірення розрахунків.'"), "!");
		Возврат;
	КонецЕсли;
	
	КоличествоСчетов = СписокСчетов.Количество();
	ФильтрСписокСчетов = Новый СписокЗначений();
	Для каждого СтрокаСчета Из СписокСчетов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
			Продолжить;
		Иначе
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли; 
	КонецЦикла; 
	
	Если ФильтрСписокСчетов.Количество() = 0 Тогда
	    ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Неверно задан список счетов,по которым производится сверка .';uk='Невірно заданий список рахунків,по яких виконується звірення .'"), "!");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    ?(НЕ ЗначениеЗаполнено(ДатаНачала),    Неопределено, ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", ?(НЕ ЗначениеЗаполнено(ДатаОкончания), Неопределено, КонецДня(ДатаОкончания)));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Контрагент",    Контрагент);
	Запрос.УстановитьПараметр("Валюта",        ?(НЕ ЗначениеЗаполнено(ВалютаДокумента) или (ВалютаДокумента = мВалютаРегламентированногоУчета), неопределено,ВалютаДокумента));
	Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("АналитикаРасчетов",    АналитикаРасчетов);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ?(НЕ ЗначениеЗаполнено(ДоговорКонтрагента),Неопределено,ДоговорКонтрагента));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор.Дата КАК Дата,
	|	ХозрасчетныйОбороты.Регистратор КАК ДокументРегистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	0 КАК ОстатокНаНачало,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	0 КАК ОстатокНаКонец,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА (НЕ ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.НомерПоручения, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО)
	|			ТОГДА ХозрасчетныйОбороты.Регистратор.НомерПоручения
	|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.НомерОрдера, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК НомерДокумента,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта,
	|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот,
	|	ХозрасчетныйОбороты.Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|		&ДатаНачала,
	|		&ДатаОкончания,
	|		Регистратор,
	|		Счет В ИЕРАРХИИ (&ФильтрСписокСчетов),
	|		&АналитикаРасчетов,
	|		Организация = &Организация
	|			И ВЫБОР
	|				КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ Валюта = &Валюта
	|			КОНЕЦ
	|			И Субконто1 = &Контрагент
	|			И ВЫБОР
	|				КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ Субконто2 = &ДоговорКонтрагента
	|			КОНЕЦ,
	|		,
	|		) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (&ФильтрСписокСчетов)
	|				ТОГДА ВЫБОР
	|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|							ТОГДА (НЕ ХозрасчетныйОбороты.КорСубконто1 = &Контрагент)
	|						ИНАЧЕ (НЕ(ХозрасчетныйОбороты.КорСубконто1 = &Контрагент
	|									И ХозрасчетныйОбороты.КорСубконто2 = &ДоговорКонтрагента))
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Остатки"",
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстатки.СуммаНачальныйОстаток
	|		ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаНачальныйОстаток
	|	КОНЕЦ,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстатки.СуммаКонечныйОстаток
	|		ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаКонечныйОстаток
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,  
   	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|		&ДатаНачала,
	|		&ДатаОкончания,
	|		Период,
	|		ДвиженияИГраницыПериода,
	|		Счет В ИЕРАРХИИ (&ФильтрСписокСчетов),
	|		&АналитикаРасчетов,
	|		Организация = &Организация
	|		    И ВЫБОР
	|		        КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|		            ТОГДА ИСТИНА
	|		        ИНАЧЕ Валюта = &Валюта
	|		    КОНЕЦ
	|		    И Субконто1 = &Контрагент
	|		    И ВЫБОР
	|		        КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|		            ТОГДА ИСТИНА
	|		        ИНАЧЕ Субконто2 = &ДоговорКонтрагента
	|		    КОНЕЦ) КАК ХозрасчетныйОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ДокументРегистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	// заполнять документ будем "как для печати"
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));	
	
	НаборДвижений = ПоДаннымОрганизации.Выгрузить();
	НаборДвижений.Колонки.Добавить("Валюта", Новый описаниеТипов("СправочникСсылка.Валюты"));
	НаборДвижений.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ОстатокНаНачало = 0;
	ОстатокНаКонец  = 0;
	
	Пока Выборка.Следующий() Цикл

		Если Выборка.Дата = "Остатки" Тогда
			ОстатокНаНачало = ОстатокНаНачало+Выборка.ОстатокНаНачало;
			ОстатокНаКонец  = ОстатокНаКонец+Выборка.ОстатокНаКонец;
			Продолжить;
		КонецЕсли; 
		
		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если Выборка.КорСубконто1 = Контрагент 
		   И Выборка.КорСубконто2 = Выборка.Договор
		   И НЕ ФильтрСписокСчетов.НайтиПоЗначению(Выборка.КорСчет) = Неопределено Тогда
		
			// зачет аванса или подобное
			Продолжить;
		
		КонецЕсли;
		
		НоваяСтрока = НаборДвижений.Добавить();
		НоваяСтрока.ДокументРегистратор           = Выборка.ДокументРегистратор;
		НоваяСтрока.Дата               = Выборка.Дата;
		НоваяСтрока.Дебет              = Выборка.Дебет;
		НоваяСтрока.Кредит             = Выборка.Кредит;
		НоваяСтрока.Валюта             = Выборка.Валюта;
		НоваяСтрока.ВалютнаяСумма      = Выборка.ВалютнаяСуммаОборот;
		НоваяСтрока.ДоговорКонтрагента = Выборка.Договор;

		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.ДокументРегистратор);
		Если ВыводитьПолныеНазванияДокументов Тогда 
			
			Если Выборка.НомерВходящегоДокумента = Неопределено тогда
				Если Выборка.НомерДокумента = Неопределено тогда
					Представление = Локализация.ПолучитьЛокализованныйСинонимОбъекта(Выборка.ДокументРегистратор,
														   КодЯзыкаПечать)+" №"+Символы.НПП + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор);
				Иначе			
					Представление = Локализация.ПолучитьЛокализованныйСинонимОбъекта(Выборка.ДокументРегистратор,
		                                                   КодЯзыкаПечать) +" №"+ Выборка.НомерДокумента;
				КонецЕсли;
			Иначе
				Представление = Локализация.ПолучитьЛокализованныйСинонимОбъекта(Выборка.ДокументРегистратор,
		        			                               КодЯзыкаПечать) +" ("+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) +
														   НСтр("ru=' от ';uk=' від '",КодЯзыкаПечать) +
				                                           ?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), "'  .  .    '", Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
			КонецЕсли;	
			
		Иначе  

		// Сформируем строку представления
		Представление = "";
		
		Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПолученныеШтрафыПениНеустойки)
		 ИЛИ Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПризнанныеШтрафыПениНеустойки) Тогда
			Представление =  НСтр("ru='Санкции';uk='Санкції'",КодЯзыкаПечать);
		КонецЕсли;

		Если не ПустаяСтрока(Представление) Тогда
			 // Строка уже отработана
		
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы) 
     		  или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы) Тогда
			  
		    Если (Выборка.Дебет >0) Тогда
				Представление =  НСтр("ru='Возврат займа';uk='Повернення позики'",КодЯзыкаПечать);
			ИначеЕсли (Выборка.Кредит >0)Тогда
				Представление =  НСтр("ru='Займ';uk='Займ'",КодЯзыкаПечать);
			Иначе
				Представление =  НСтр("ru='Операции по займам';uk='Операції по позиках'",КодЯзыкаПечать);
			КонецЕсли;
			
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
			  или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям	Тогда
			
			Представление =  НСтр("ru='Претензия';uk='Претензія'",КодЯзыкаПечать);
			
		ИначеЕсли Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Касса) 
			  или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СчетаВБанках) Тогда
			
			Если (Выборка.Кредит >0) Тогда
			
				Если  Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
				  ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоВыданнымАвансам) Тогда 
					Представление =  НСтр("ru='Возврат средств';uk='Повернення коштів'",КодЯзыкаПечать);
					
				ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) 
					  ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным) Тогда
					
					Представление = "Оплата";
					
				Иначе
					
					Представление =  НСтр("ru='Перевод средств';uk='Переведення  коштів'",КодЯзыкаПечать);
					
				КонецЕсли;
				
			ИначеЕсли (Выборка.Дебет >0) Тогда
				Если  Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
				  ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСДругимиДебиторами)
				  ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСДругимиКредиторами)
				  ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоВыданнымАвансам) Тогда
					
					Представление = "Оплата";
					
				ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками)
					  ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным) Тогда
					  
					Представление =  НСтр("ru='Возврат средств';uk='Повернення коштів'",КодЯзыкаПечать);
					
				Иначе
					
					Представление =  НСтр("ru='Перевод средств';uk='Переведення  коштів'",КодЯзыкаПечать);
					
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) Тогда
			Если Выборка.Дебет <>0 Тогда
				
				Представление =  НСтр("ru='Возврат';uk='Повернення'",КодЯзыкаПечать);
					
			ИначеЕсли Выборка.Кредит <>0 Тогда
				
				Представление = НСтр("ru='Поступление';uk='Надходження'",КодЯзыкаПечать);
				
			КонецЕсли;
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
			Если Выборка.Дебет <>0 Тогда
				
				Представление = НСтр("ru='Продажа';uk='Продаж'",КодЯзыкаПечать);
					
			ИначеЕсли (Выборка.Кредит <>0) Тогда
				
				Представление =  НСтр("ru='Возврат';uk='Повернення'",КодЯзыкаПечать);
				
			КонецЕсли;
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСДругимиДебиторами)
			  ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСДругимиКредиторами) Тогда
			  
			Если Выборка.Дебет <>0 Тогда
				
				Представление =  НСтр("ru='Реализация';uk='Реалізація'",КодЯзыкаПечать);
					
			ИначеЕсли Выборка.Кредит <>0 Тогда
				
			   Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВычетыИзДохода)
				 ИЛИ Выборка.КорСчет = ПланыСчетов.Хозрасчетный.ВычетыИзДохода Тогда
				    Представление =  НСтр("ru='Возврат';uk='Повернення'",КодЯзыкаПечать);
			 	Иначе
					Представление = НСтр("ru='Поступление';uk='Надходження'",КодЯзыкаПечать);
				КонецЕсли;
				
			КонецЕсли;		 
		КонецЕсли;
		
		Если ПустаяСтрока(Представление)Тогда
			Если Выборка.Дебет > 0 тогда
				Представление =  НСтр("ru='Принято';uk='Прийнято'",КодЯзыкаПечать);
			ИначеЕсли Выборка.Дебет < 0 тогда
				Представление = НСтр("ru='Сторно: принято';uk='Сторно: прийняте'",КодЯзыкаПечать);
			ИначеЕсли Выборка.Кредит > 0 тогда
				Представление = "Передано";
			Иначе
				Представление = "Сторно: передано";
			КонецЕсли;
		КонецЕсли;

		Если Выборка.НомерВходящегоДокумента = Неопределено тогда
			Представление = Представление +" ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") +")";
		Иначе
			Представление = Представление +" ("+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) + НСтр("ru=' от ';uk=' від '",КодЯзыкаПечать) +
			?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), "'  .  .    '", Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
		КонецЕсли;					  
	КонецЕсли;
		НоваяСтрока.Представление = Представление;

	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
	
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
		|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
		|	КОНЕЦ КАК ОстатокНаНачало
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаНачала,
		|			Счет В ИЕРАРХИИ (&ФильтрСписокСчетов),
		|			&АналитикаРасчетов,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Валюта = &Валюта
		|				КОНЕЦ
		|				И Субконто1 = &Контрагент
		|				И ВЫБОР
		|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Субконто2 = &ДоговорКонтрагента
		|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаНачало";
		
		ОстатокНаНачало = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаНачало");
		
	Иначе
		
		ОстатокНаНачало = 0;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончания), 
		Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая), 
		Неопределено));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаКонец.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаКонец.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В ИЕРАРХИИ (&ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 = &ДоговорКонтрагента
	|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаКонец";
	
	ОстатокНаКонец = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаКонец");
	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		НаборДвижений.Свернуть("Дата,ДокументРегистратор,Представление,ДоговорКонтрагента,Сделка,Валюта","Дебет, Кредит, ВалютнаяСумма");
		Для каждого СтрокаДвижений Из НаборДвижений Цикл
			Если СтрокаДвижений.ВалютнаяСумма > 0 Тогда
				СтрокаДвижений.Представление = СтрокаДвижений.Представление 
					+ " (" + Формат(СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			ИначеЕсли СтрокаДвижений.ВалютнаяСумма < 0 Тогда
				Множитель = ?( (СтрокаДвижений.Дебет + СтрокаДвижений.Кредит) > 0, -1, 1);
				СтрокаДвижений.Представление = СтрокаДвижений.Представление
				+ " (" + Формат(Множитель * СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			КонецЕсли;
		КонецЦикла; 
		
	Иначе
		НаборДвижений.Свернуть("Дата,ДокументРегистратор,Представление,ДоговорКонтрагента,Сделка","Дебет, Кредит");
	КонецЕсли; 
	
	Если РазбитьПоДоговорам Тогда		
		НаборДвижений.Сортировать("ДоговорКонтрагента,Дата,ДокументРегистратор,Представление");
	Иначе	
		НаборДвижений.Сортировать("Дата,ДокументРегистратор,Представление");	
	КонецЕсли; 	

						  
	ПоДаннымОрганизации.Загрузить(НаборДвижений);

КонецПроцедуры

// Получение метаданных по документам
// Если метаданные по данному виду документа получались ранее - получаем из соответствия,
// иначе получаем метаданные и дополняем соответствие
// Параметры
//  ДокументСсылка  – <ДокументСсылка> – ссылка на документ
//
// Возвращаемое значение:
//   Структура метаданных
//
Функция ПолучитьМетаданныеДокумента(ДокументСсылка)
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если МетаданныеПоДокументам[ТипДокумента] = Неопределено Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипДокумента) Тогда
			МетаданныеПоДокументам.Вставить(ТипДокумента, ДокументСсылка.Метаданные());
		Иначе
			МетаданныеПоДокументам.Вставить(ТипДокумента, Неопределено);
		КонецЕсли;
	КонецЕсли; 
	
    Возврат МетаданныеПоДокументам[ТипДокумента];
	
КонецФункции // ПолучитьМетаданныеДокумента()

Процедура ЗаполнитьПоДаннымОрганизации() Экспорт
	
	ТабЗнач = ПоДаннымОрганизации.Выгрузить();
	
	ТабЗнач.Колонки.Дебет.Имя  = "КредитК";
	ТабЗнач.Колонки.Кредит.Имя = "Дебет";
	ТабЗнач.Колонки.КредитК.Имя= "Кредит";
	
	Для каждого СтрокаДвижений Из ТабЗнач Цикл
		Представление = СокрЛП(СтрокаДвижений.Представление);
		//закоментировано Коновалова 31102012
		//Если Лев(Представление, 8) = "Передано" Тогда
		//	Представление = "Принято" + Сред(Представление, 9);
		//	
		//ИначеЕсли Лев(Представление, 7) = "Принято" Тогда
		//	Представление = "Передано" + Сред(Представление, 8);

		//ИначеЕсли Лев(Представление, 7) = "Продажа" Тогда
		//	Представление = "Приход" + Сред(Представление, 8);

		//ИначеЕсли Лев(Представление, 6) = "Приход" Тогда
		//	Представление = "Продажа" + Сред(Представление, 7);
		//КонецЕсли;
		СтрокаДвижений.Представление = Представление;
	КонецЦикла;
	
	ПоДаннымКонтрагента.Загрузить(ТабЗнач);
	
КонецПроцедуры
	

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
МетаданныеПоДокументам = Новый Соответствие();
