////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(НазваниеМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если НЕ Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения!");
		Возврат Неопределено;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	Организация,
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Штатные единицы" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШтатныеЕдиницы(Режим)
	

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = "ВЫБРАТЬ
	               |	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
	               |	СтрокиДокумента.Подразделение,
	               |	СтрокиДокумента.Должность,
	               |	СтрокиДокумента.ВидСтажа,
	               |	СтрокиДокумента.Актуальность,
	               |	СтрокиДокумента.ЕдиницаВремени,
	               |	СтрокиДокумента.ГрафикНормы,
	               |	СтрокиДокумента.Сезонность,
	               |	СтрокиДокумента.ДатаОкончания
	               |ИЗ
	               |	Документ.АттестацияРабочихМестДляУчетаСпецстажа.ШтатныеЕдиницы КАК СтрокиДокумента
	               |
	               |ГДЕ
	               |	СтрокиДокумента.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();


КонецФункции // СформироватьЗапросПоВыданныеАвансы()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Штатные единицы" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиШтатнойЕдиницы(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +" ";
									
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Подразделение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано подразделение!", Отказ);
	ИначеЕсли ВыборкаПоСтрокамДокумента.Подразделение.Владелец <> ВыборкаПоШапкеДокумента.Организация Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указано подразделение другой организации!", Отказ);
	КонецЕсли;

	// Должность
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрана должность!", Отказ);
	КонецЕсли;
	
	// Вид стажа
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидСтажа) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран вид стажа!", Отказ);
	ИначеЕсли НЕ ВыборкаПоСтрокамДокумента.ВидСтажа.ЛьготныйСтаж   Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указан не льготный вид стажа!", Отказ);
	КонецЕсли;

	Если  ВыборкаПоСтрокамДокумента.Актуальность Тогда
		
		// ЕдиницаВремени
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЕдиницаВремени) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана единица времени!", Отказ);
		КонецЕсли;
		
		// ГрафикНормы
		Если (НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикНормы)) И (ВыборкаПоСтрокамДокумента.ЕдиницаВремени <> Перечисления.ЕдиницыВремениУчетаСпецстажа.КалендарныеДни)  Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан график нормы времени!", Отказ);
		КонецЕсли;
		
		// ДатаОкончания
		Если (ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания)) И (ВыборкаПоСтрокамДокумента.ДатаОкончания <= ВыборкаПоШапкеДокумента.Дата)  Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания меньше даты аттестации!", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиШтатнойЕдиницы()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	
	СтруктураПроведенияПоРегистрамСведений.Вставить("РабочиеМестаДляУчетаСпецстажа");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВРабочиеМеста(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, 
		  СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "РабочиеМестаДляУчетаСпецстажа";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период						= ВыборкаПоШапкеДокумента.Дата;

		// Измерения
		Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.Подразделение;
		Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;
		Движение.ВидСтажа					= ВыборкаПоСтрокамДокумента.ВидСтажа;

		// Ресурсы
		Движение.Актуальность				= ВыборкаПоСтрокамДокумента.Актуальность;
		Движение.ЕдиницаВремени				= ВыборкаПоСтрокамДокумента.ЕдиницаВремени;
		Движение.ГрафикНормы 				= ВыборкаПоСтрокамДокумента.ГрафикНормы;
		Движение.Сезонность					= ВыборкаПоСтрокамДокумента.Сезонность;
		
		//Движение на дату окончания
		Если ВыборкаПоСтрокамДокумента.Актуальность И ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаОкончания;

			// Измерения
			Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.Подразделение;
			Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;
			Движение.ВидСтажа					= ВыборкаПоСтрокамДокумента.ВидСтажа;

			// Ресурсы
			Движение.Актуальность				= ЛОЖЬ;
			
		КонецЕсли;	
		
	КонецЕсли; 
					
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;

    РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);
	// Получим реквизиты шапки из запроса
    ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);

			РезультатЗапросаПоШтатныеЕдиницы = СформироватьЗапросПоШтатныеЕдиницы(Режим);

	        ВыборкаПоШтатныеЕдиницы = РезультатЗапросаПоШтатныеЕдиницы.Выбрать();
	        Пока ВыборкаПоШтатныеЕдиницы.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиШтатнойЕдиницы(ВыборкаПоШапкеДокумента, ВыборкаПоШтатныеЕдиницы, Отказ);

				// Движения стоит записывать, если в проведении еще не отказано (отказ =ложь)
				Если Не Отказ Тогда
					ДобавитьСтрокуВРабочиеМеста(ВыборкаПоШапкеДокумента, ВыборкаПоШтатныеЕдиницы, СтруктураПроведенияПоРегистрамСведений);
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры


