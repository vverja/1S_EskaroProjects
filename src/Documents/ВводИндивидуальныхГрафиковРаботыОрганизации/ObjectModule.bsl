////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Список значений перечисления "ВидыУчетаВремени" и названий ячеек.
Перем СписокСоответствийВидаУчетаВремениИНазванийЯчеек;

// Структура для поиска записи в выборке по производственному календарю на определенную дату
Перем СтруктураПоискаВПроизводственномКалендаре;

// Значение  "ПоДням" перечисления ВидыУчетаВремени
Перем ВидУчетаВремениПоДням;

// Значение ПоДням перечисления СпособВводаДанных
Перем СпособВводаДанныхПоДням;

// Производственный календарь для заполнения реквизитов регистров
Перем ПроизводственныйКалендарь;

// Структура для поиска строки таблицы значений
Перем СтруктураПоиска;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура предназначена для автозаполнения документа
// Если заполнен параметр сотрудники, то в табличную часть будут добавлены 
// строки по указаным сотрудникам.
Процедура Автозаполнение(ПостроительЗапроса = Неопределено, Сотрудник = Неопределено, ТекущаяСтрокаГрафикаРаботы = Неопределено) Экспорт
	
	Если ПостроительЗапроса = Неопределено Тогда
		
		ЗапросАвтоЗаполнения = Новый Запрос;
		
		ЗапросАвтоЗаполнения.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		ЗапросАвтоЗаполнения.УстановитьПараметр("ОбособленноеПодразделение", Организация);
		ЗапросАвтоЗаполнения.УстановитьПараметр("ТрудовойДоговор", Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
		ЗапросАвтоЗаполнения.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПериодРегистрации));
		ЗапросАвтоЗаполнения.УстановитьПараметр("КонецМесяца", КонецМесяца(ПериодРегистрации));
		ЗапросАвтоЗаполнения.УстановитьПараметр("Месяц", ПериодРегистрации);
		ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоДням", ВидУчетаВремениПоДням);
		ЗапросАвтоЗаполнения.УстановитьПараметр("ДокументСсылка", Ссылка);
		ЗапросАвтоЗаполнения.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		ЗапросАвтоЗаполнения.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
		
		Если Сотрудник = Неопределено Тогда
			СотрудникиТекст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РаботникиОрганизаций.Сотрудник КАК Ссылка
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоМесяца, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизаций
			|ГДЕ
			|	РаботникиОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
			|	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|	И (РаботникиОрганизаций.ПодразделениеОрганизации = &Подразделение
			|			ИЛИ &Подразделение = &ПустоеПодразделение)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	РаботникиОрганизаций.Сотрудник
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|ГДЕ
			|	РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
			|	И РаботникиОрганизаций.Период > &НачалоМесяца
			|	И РаботникиОрганизаций.Период <= &КонецМесяца
			|	И РаботникиОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
			|	И (РаботникиОрганизаций.ПодразделениеОрганизации = &Подразделение
			|			ИЛИ &Подразделение = &ПустоеПодразделение)"; 
			
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Ложь);
		Иначе 
			СотрудникиТекст = 
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Ссылка
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
			ЗапросАвтоЗаполнения.УстановитьПараметр("Сотрудник", Сотрудник);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Истина);
		КонецЕсли;
		
	Иначе
		
		ИсходныйТекстПостроителя = ПостроительЗапроса.Текст;
		ТекстЗапросаПоСпискуРаботников = СтрЗаменить(ИсходныйТекстПостроителя,"РАЗРЕШЕННЫЕ","");
		ТекстЗапросаПоСпискуРаботников = Лев(ТекстЗапросаПоСпискуРаботников, Найти(ТекстЗапросаПоСпискуРаботников,"УПОРЯДОЧИТЬ") - 1);
		
		ПостроительЗапроса.Параметры.Вставить("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		ПостроительЗапроса.Параметры.Вставить("НачалоМесяца", НачалоМесяца(ПериодРегистрации));
		ПостроительЗапроса.Параметры.Вставить("КонецМесяца", КонецМесяца(ПериодРегистрации));
		ПостроительЗапроса.Параметры.Вставить("Месяц", ПериодРегистрации);
		ПостроительЗапроса.Параметры.Вставить("ВидУчетаВремениПоДням", ВидУчетаВремениПоДням);
		ПостроительЗапроса.Параметры.Вставить("ДокументСсылка", Ссылка);
		ПостроительЗапроса.Параметры.Вставить("ВключатьВРезультатПустыеЗаписи", Ложь);
		СотрудникиТекст = 
		"ВЫБРАТЬ
		|	СписокРаботников.Сотрудник КАК Ссылка
		|ИЗ
		|	(" + ТекстЗапросаПоСпискуРаботников + ") КАК СписокРаботников";
		
	КонецЕсли;
	
	ЗапросАвтоЗаполненияТекст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	ПосчитанноеВремя.ФизЛицо, 
	|   ЕСТЬNULL(ПосчитанноеВремя.День, 0) КАК День,
	|	ПосчитанноеВремя.ВидУчетаВремени,
	|	ЕСТЬNULL(ПосчитанноеВремя.ОсновноеЗначение, 0) КАК ОсновноеЗначение
	|ИЗ
	|	("+СотрудникиТекст+") КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаботникиОрганизацийСрезПоследних.Ссылка КАК Сотрудник,
	|			РаботникиОрганизацийСрезПоследних.Ссылка.Физлицо КАК Физлицо,
	|			ДЕНЬ(РаботникиОрганизацийСрезПоследних.ДатаКалендаря) КАК День,
	|			ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
	|			ГрафикиРаботыПоВидамВремени.ОсновноеЗначение КАК ОсновноеЗначение
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ДатыРегистра.Ссылка КАК Ссылка,
	|				ДатыРегистра.ДатаКалендаря КАК ДатаКалендаря,
	|  		 	   	РаботникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы
	|			ИЗ
	|				(ВЫБРАТЬ
	|					СотрудникиОрганизаций.Ссылка КАК Ссылка,
	|					РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
	|					МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|				ИЗ
	|					("+СотрудникиТекст+") КАК СотрудникиОрганизаций
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|						ПО (ИСТИНА)
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|						ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизаций.Сотрудник
	|							И РаботникиОрганизаций.Период <= РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|							И (РаботникиОрганизаций.Организация = &ГоловнаяОрганизация)
	|				ГДЕ
	|					РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоМесяца И &КонецМесяца
	|				
	|				СГРУППИРОВАТЬ ПО
	|					СотрудникиОрганизаций.Ссылка,
	|					РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ДатыРегистра
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|					ПО ДатыРегистра.Ссылка = РаботникиОрганизаций.Сотрудник
	|						И РаботникиОрганизаций.Период = ДатыРегистра.Период) КАК РаботникиОрганизацийСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|					ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|					ГрафикиРаботыПоВидамВремени.Дата КАК ДатаГрафикаРаботы,
	|					СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ОсновноеЗначение
	|				ИЗ
	|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ГДЕ
	|					ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|					И ГрафикиРаботыПоВидамВремени.Месяц = &Месяц
	|					И ГрафикиРаботыПоВидамВремени.План
	|					И ГрафикиРаботыПоВидамВремени.ОсновноеЗначение <> 0
	|					И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени <> &ВидУчетаВремениПоДням
	|		
	|				СГРУППИРОВАТЬ ПО
	|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|					ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
	|					ГрафикиРаботыПоВидамВремени.Дата) КАК ГрафикиРаботыПоВидамВремени
	|				ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	|					И РаботникиОрганизацийСрезПоследних.ДатаКалендаря = ГрафикиРаботыПоВидамВремени.ДатаГрафикаРаботы
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ВведенныеГрафикиПоДням
	|				ПО ВведенныеГрафикиПоДням.ГрафикРаботы = РаботникиОрганизацийСрезПоследних.Ссылка
	|					И (ВведенныеГрафикиПоДням.Месяц = &Месяц)
	|					И (ВведенныеГрафикиПоДням.План)
	|					И (ВведенныеГрафикиПоДням.Документ <> &ДокументСсылка)
	|					И ВведенныеГрафикиПоДням.Дата = РаботникиОрганизацийСрезПоследних.ДатаКалендаря
	|					И (ВведенныеГрафикиПоДням.ВидУчетаВремени = &ВидУчетаВремениПоДням)
	|					И (ВведенныеГрафикиПоДням.ОсновноеЗначение <> 0)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК ВведенныеГрафикиВЦелом
	|				ПО ВведенныеГрафикиВЦелом.Сотрудник = РаботникиОрганизацийСрезПоследних.Ссылка
	|					И (ВведенныеГрафикиВЦелом.Регистратор <> &ДокументСсылка)
	|					И (ВведенныеГрафикиВЦелом.Месяц = НАЧАЛОПЕРИОДА(РаботникиОрганизацийСрезПоследних.ДатаКалендаря, МЕСЯЦ))
	|		ГДЕ
	|			ВведенныеГрафикиВЦелом.Регистратор ЕСТЬ NULL
	|			И ВведенныеГрафикиПоДням.Документ ЕСТЬ NULL) КАК ПосчитанноеВремя
	|		ПО ПосчитанноеВремя.Сотрудник = СотрудникиОрганизаций.Ссылка
	|ГДЕ
	|	(&ВключатьВРезультатПустыеЗаписи
	|			ИЛИ (НЕ ПосчитанноеВремя.ОсновноеЗначение ЕСТЬ NULL ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ВидУчетаВремени";
	
	Если ПостроительЗапроса = Неопределено Тогда
		ЗапросАвтоЗаполнения.Текст = ЗапросАвтоЗаполненияТекст;
		РезультатЗапроса = ЗапросАвтоЗаполнения.Выполнить();
	Иначе 
		//Основной текст запроса
		ПостроительЗапроса.Текст = ЗапросАвтоЗаполненияТекст;
		ПостроительЗапроса.Выполнить();
		РезультатЗапроса = ПостроительЗапроса.Результат;
	КонецЕсли;
	
	МассивДней = Новый Массив(32);
	
	Если Сотрудник = Неопределено Тогда
		ГрафикРаботы.Очистить();
	КонецЕсли;
	// Заполняем строку документа, даже если в запросе ничего не получили, но 
	// необходимо заполнить по одному сотруднику.
	Если РезультатЗапроса.Пустой() И ЗначениеЗаполнено(Сотрудник) И ТекущаяСтрокаГрафикаРаботы <> Неопределено Тогда
		ТекущаяСтрокаГрафикаРаботы.Сотрудник = Сотрудник;
		ТекущаяСтрокаГрафикаРаботы.ВсегоДней = 0;
		ТекущаяСтрокаГрафикаРаботы.ВсегоЧасов = 0;
		ТекущаяСтрокаГрафикаРаботы.ВсегоЧасовВечерних = 0;
		ТекущаяСтрокаГрафикаРаботы.ВсегоЧасовНочных = 0;
		Для НомерДня = 1 По 31 Цикл
			ТекущаяСтрокаГрафикаРаботы["Часов" + Строка(НомерДня)] = 0;
			ТекущаяСтрокаГрафикаРаботы["ЧасовВечерних" + Строка(НомерДня)] = 0;
			ТекущаяСтрокаГрафикаРаботы["ЧасовНочных" + Строка(НомерДня)] = 0;
		КонецЦикла;
	Иначе 	
		ВыборкаРезультата = РезультатЗапроса.Выбрать();
		ИндивидуальныеГрафикиПоСотруднику =  Новый Соответствие;
		Пока ВыборкаРезультата.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			Если ТекущаяСтрокаГрафикаРаботы = Неопределено Тогда
				СтрокаТаблицыГрафикРаботы = ГрафикРаботы.Добавить();
			Иначе
				СтрокаТаблицыГрафикРаботы = ТекущаяСтрокаГрафикаРаботы;
				Для НомерДня = 1 По 31 Цикл
					СтрокаТаблицыГрафикРаботы["Часов" + Строка(НомерДня)] = 0;
					СтрокаТаблицыГрафикРаботы["ЧасовВечерних" + Строка(НомерДня)] = 0;
					СтрокаТаблицыГрафикРаботы["ЧасовНочных" + Строка(НомерДня)] = 0;
				КонецЦикла;
				СтрокаТаблицыГрафикРаботы.ВсегоДней = 0;
				СтрокаТаблицыГрафикРаботы.ВсегоЧасов = 0;
				СтрокаТаблицыГрафикРаботы.ВсегоЧасовВечерних = 0;
				СтрокаТаблицыГрафикРаботы.ВсегоЧасовНочных = 0;
			КонецЕсли;
			СтрокаТаблицыГрафикРаботы.Сотрудник = ?(ЗначениеЗаполнено(ВыборкаРезультата.Сотрудник.ОсновноеНазначение), ВыборкаРезультата.Сотрудник.ОсновноеНазначение, ВыборкаРезультата.Сотрудник);
			СтрокаТаблицыГрафикРаботы.Назначение = ВыборкаРезультата.Сотрудник;
			Для К = 1 По 31 Цикл
				МассивДней[К] = Ложь;
			КонецЦикла;
			Пока ВыборкаРезультата.Следующий() Цикл
			          				
				Если ВыборкаРезультата.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ИндексКолонки = "Часов"+Строка(ВыборкаРезультата.День);
					СтрокаТаблицыГрафикРаботы.ВсегоЧасов = СтрокаТаблицыГрафикРаботы.ВсегоЧасов + ВыборкаРезультата.ОсновноеЗначение;
					МассивДней[ВыборкаРезультата.День] = Истина;
				ИначеЕсли ВыборкаРезультата.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам Тогда
					ИндексКолонки = "ЧасовВечерних"+Строка(ВыборкаРезультата.День);
					СтрокаТаблицыГрафикРаботы.ВсегоЧасовВечерних = СтрокаТаблицыГрафикРаботы.ВсегоЧасовВечерних + ВыборкаРезультата.ОсновноеЗначение;
					МассивДней[ВыборкаРезультата.День] = Истина;
				ИначеЕсли ВыборкаРезультата.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам Тогда
					ИндексКолонки = "ЧасовНочных"+Строка(ВыборкаРезультата.День);
					СтрокаТаблицыГрафикРаботы.ВсегоЧасовНочных = СтрокаТаблицыГрафикРаботы.ВсегоЧасовНочных + ВыборкаРезультата.ОсновноеЗначение;
					МассивДней[ВыборкаРезультата.День] = Истина;
				Иначе
					Продолжить;
				КонецЕсли;
				СтрокаТаблицыГрафикРаботы[ИндексКолонки] = ВыборкаРезультата.ОсновноеЗначение;
			КонецЦикла;
			 			
			КоличествоДней = 0;
			Для К = 1 По 31 Цикл
				Если МассивДней[К] Тогда
					КоличествоДней = КоличествоДней + 1;
				КонецЕсли;
			КонецЦикла;
			СтрокаТаблицыГрафикРаботы.ВсегоДней = КоличествоДней;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // Автозаполнение()

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "П13" Тогда
		
		Если Не Проведен Тогда
			Предупреждение("Документ можно распечатать только после его проведения!");
			Возврат Неопределено;
		КонецЕсли;
		
		ТабДокумент = Новый ТабличныйДокумент;	
		
		Отчет = Отчеты.УнифицированнаяФормаП13.Создать();
		
		ФильтрСоответствия = Новый Соответствие;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГрафикРаботы.Сотрудник КАК Сотрудник
		|ИЗ
		|	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК ГрафикРаботы
		|ГДЕ
		|	ГрафикРаботы.Ссылка = &ДокументСсылка";

		СписокСотрудников = Новый СписокЗначений;
		СписокСотрудников.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		
		ФильтрСоответствия.Вставить("Организация", Организация);
		ФильтрСоответствия.Вставить("Подразделение", ПодразделениеОрганизации);
		
		ФильтрСоответствия.Вставить("ОтборОрганизации", ЗначениеЗаполнено(Организация));
		ФильтрСоответствия.Вставить("ОтборПодразделения", ЗначениеЗаполнено(ПодразделениеОрганизации));
		
		ФильтрСоответствия.Вставить("ВидСравненияОрганизации", ВидСравнения.Равно);
		ФильтрСоответствия.Вставить("ВидСравненияПодразделения", ВидСравнения.Равно);
		
		ФильтрСоответствия.Вставить("ПериодРегистрации", ПериодРегистрации);
		
		Если СписокСотрудников.Количество() = 1 Тогда
			Если ЗначениеЗаполнено(ГрафикРаботы[0].Сотрудник) Тогда
				ФильтрСоответствия.Вставить("Работник", ГрафикРаботы[0].Сотрудник);
				ФильтрСоответствия.Вставить("ВидСравненияРаботника", ВидСравнения.Равно);
				ФильтрСоответствия.Вставить("ОтборРаботника", Истина);
			КонецЕсли;
		ИначеЕсли СписокСотрудников.Количество() > 1 Тогда
			ФильтрСоответствия.Вставить("Работник", СписокСотрудников);
			ФильтрСоответствия.Вставить("ВидСравненияРаботника", ВидСравнения.ВСписке);
			ФильтрСоответствия.Вставить("ОтборРаботника", Истина);
		КонецЕсли;
		
		Отчет.УстановитьФильтр(ФильтрСоответствия);
		ТекстОшибки = "";
		Отчет.СформироватьОтчет(ТабДокумент, "Табель", ТекстОшибки);
		Если ТекстОшибки <> "" Тогда
			Предупреждение(ТекстОшибки);
			Возврат Неопределено;
		Иначе
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним + " (форма П-13)"));
		КонецЕсли;
		
		
	КонецЕсли;

КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//	Струткура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("П13",	"Форма П-13");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Удаляет записи из регистра сведений ГрафикиРаботыПоВидамВремени.
Процедура УдалитьЗаписиГрафика()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Дата,
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.Документ = &Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц, ГрафикРаботы, Дата";
	
	НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.СледующийПоЗначениюПоля("Месяц") Цикл
		НаборЗаписей.Отбор.Месяц.Установить(ВыборкаЗапроса.Месяц);
		Пока ВыборкаЗапроса.СледующийПоЗначениюПоля("ГрафикРаботы") Цикл
			НаборЗаписей.Отбор.ГрафикРаботы.Установить(ВыборкаЗапроса.ГрафикРаботы);
			НаборЗаписей.Отбор.План.Установить(Истина);
			
			НаборЗаписей.Прочитать();
			СписокИндексовПоДате = Новый СписокЗначений;
			СписокИндексовПоДате.ЗагрузитьЗначения(НаборЗаписей.ВыгрузитьКолонку("Дата"));
			Пока ВыборкаЗапроса.Следующий() Цикл
				ЭлементСпискаИндексовПоДате = СписокИндексовПоДате.НайтиПоЗначению(ВыборкаЗапроса.Дата);
				Если ЭлементСпискаИндексовПоДате <> Неопределено Тогда
					НаборЗаписей.Удалить(СписокИндексовПоДате.Индекс(ЭлементСпискаИндексовПоДате));
					СписокИндексовПоДате.Удалить(ЭлементСпискаИндексовПоДате);
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЗаписиГрафика()

// Функция возвращает 1, если проверяемая дата участвует в расчете нормы времени - Ресурс
Функция ОтмеченВРесурсеПроизводственногоКалендаря(ПроверяемаяДата, Ресурс, ТаблицаДанныхКалендаря)
	
	НайденнаяСтрока = ТаблицаДанныхКалендаря.Найти(ПроверяемаяДата, "ДатаКалендаря");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	Возврат НайденнаяСтрока[Ресурс];
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводИндивидуальныхГрафиковРаботыОрганизации.Дата,
	|	ВводИндивидуальныхГрафиковРаботыОрганизации.ПериодРегистрации,
	|	ВводИндивидуальныхГрафиковРаботыОрганизации.Ссылка,
	|	ВЫБОР
	|		КОГДА ВводИндивидуальныхГрафиковРаботыОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВводИндивидуальныхГрафиковРаботыОрганизации.Организация
	|		ИНАЧЕ ВводИндивидуальныхГрафиковРаботыОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВводИндивидуальныхГрафиковРаботыОрганизации.Организация КАК ОбособленноеПодразделение
	|ИЗ
	|	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации КАК ВводИндивидуальныхГрафиковРаботыОрганизации
	|ГДЕ
	|	ВводИндивидуальныхГрафиковРаботыОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "ГрафикРаботы" документа
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоГрафикРаботы(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник Как Сотрудник,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Назначение Как Назначение,
	|	ВЫБОР
	|		КОГДА ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.НомерСтроки,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов1,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов2,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов3,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов4,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов5,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов6,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов7,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов8,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов9,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов10,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов11,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов12,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов13,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов14,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов15,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов16,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов17,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов18,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов19,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов20,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов21,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов22,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов23,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов24,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов25,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов26,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов27,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов28,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов29,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов30,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов31,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних1,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних2,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних3,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних4,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних5,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних6,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних7,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних8,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних9,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних10,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних11,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних12,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних13,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних14,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних15,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних16,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних17,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних18,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних19,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних20,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних21,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних22,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних23,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних24,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних25,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних26,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних27,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних28,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних29,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних30,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних31,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных1,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных2,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных3,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных4,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных5,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных6,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных7,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных8,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных9,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных10,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных11,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных12,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных13,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных14,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных15,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных16,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных17,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных18,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных19,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных20,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных21,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных22,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных23,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных24,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных25,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных26,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных27,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных28,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных29,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных30,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных31,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ВсегоДней,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ВсегоЧасов,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ВсегоЧасовВечерних,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ВсегоЧасовНочных,
	|	Дубли.КоличествоДублей КАК КоличествоДублейСотрудников
	|ИЗ
	|	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник КАК Сотрудник,
	|			ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Назначение КАК Назначение,
	|			КОЛИЧЕСТВО(1) КАК КоличествоДублей
	|		ИЗ
	|			Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы
	|		ГДЕ
	|			ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник,
	|			ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Назначение) КАК Дубли
	|		ПО Дубли.Сотрудник = ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник
	|		И Дубли.Назначение = ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Назначение
	|ГДЕ
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоГрафикРаботы()

// Формирует запрос по таблице "ГрафикРаботы" документа
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросГрафикиСотрудников(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НачалоДатыСтрокой = Формат(Год(ПериодРегистрации), "ЧГ=4") + ", " + Месяц(ПериодРегистрации) + " , ";
	
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
		
	// Запрос дат периода
	ДатыМесяцаТекст = 
	"ВЫБРАТЬ
	|	1 КАК НомерДня,
	|	ДАТАВРЕМЯ(" + НачалоДатыСтрокой + "1) КАК ДатаМесяца
	|	";
	Для НомерДня = 2 По День(КонецМесяца(ПериодРегистрации)) Цикл
		ДатыМесяцаТекст = ДатыМесяцаТекст + 
		"ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	" + НомерДня +",
		|	ДАТАВРЕМЯ(" + НачалоДатыСтрокой + НомерДня + ")
		|	";
	КонецЦикла;
			
	СотрудникиТекст =
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	ДатыМесяца.НомерДня,
	|	ДатыМесяца.ДатаМесяца
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник КАК Сотрудник
	|	ИЗ
	|		Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы
	|	ГДЕ
	|		ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Ссылка = &ДокументСсылка) КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДатыМесяцаТекст + ") КАК ДатыМесяца
	|		ПО (ИСТИНА)";
	Запрос.Текст = СотрудникиТекст;
	Запрос.Выполнить();
	СотрудникиТекст = "ВТСотрудники";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.НомерДня,
	|	ЕСТЬNULL(РаботникиОрганизаций.ГрафикРаботы.ДлительностьРабочейНедели, 8) КАК ДлительностьРабочейНедели
	|ИЗ
	|	(ВЫБРАТЬ
	|		Сотрудники.Сотрудник КАК Сотрудник,
	|		Сотрудники.НомерДня КАК НомерДня,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|	ИЗ " + СотрудникиТекст + " КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО Сотрудники.Сотрудник = РаботникиОрганизаций.Сотрудник
	|				И Сотрудники.ДатаМесяца >= РаботникиОрганизаций.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Сотрудники.Сотрудник,
	|		Сотрудники.НомерДня) КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО Сотрудники.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И Сотрудники.Период = РаботникиОрганизаций.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НомерДня";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросГрафикиСотрудников()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)
	
	//  ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан период индивидуального графика!", Отказ, Заголовок);
	КонецЕсли;
	
	 //  Организация
	 Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой вводится индивидуальный график!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ГрафикРаботы" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиГрафикРаботы(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""График работы"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Назначение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Назначение) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано назначение работника!", Отказ, Заголовок);
	КонецЕсли;
	
	// Несколько одинаковых сотрудников
	Если ВыборкаПоСтрокамДокумента.КоличествоДублейСотрудников > 1 Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "обнаружен сотрудник, который введен второй раз!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиГрафикРаботы()

// Проверяет уникальность записей сотрудников, чтобы на одного сотрудника в одном 
// периоде был только один документ Ввода индивидуальных графиков.
//
Функция ПроверитьУникальностьЗаписей()
	
	ЗапросПроверкаУникальности = Новый Запрос;
	ЗапросПроверкаУникальности.УстановитьПараметр("ДокументСсылка", Ссылка);
	ЗапросПроверкаУникальности.УстановитьПараметр("Месяц", ПериодРегистрации);
	ЗапросПроверкаУникальности.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПериодРегистрации));
	ЗапросПроверкаУникальности.УстановитьПараметр("КонецМесяца", КонецМесяца(ПериодРегистрации));
	
	ЗапросПроверкаУникальности.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник.Наименование,
	|	ВЫБОР
	|		КОГДА (НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL )
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(ГрафикиРаботыПоВидамВремени.Документ КАК Документ.ВводИндивидуальныхГрафиковРаботыОрганизации))
	|		КОГДА (НЕ СводныеИндивидуальныеГрафики.НомерСтроки ЕСТЬ NULL )
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(СводныеИндивидуальныеГрафики.Регистратор)
	|	КОНЕЦ КАК ДокументПредставление
	|ИЗ
	|	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО СводныеИндивидуальныеГрафики.Сотрудник = ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник
	|			И (СводныеИндивидуальныеГрафики.Месяц = &Месяц)
	|			И (СводныеИндивидуальныеГрафики.Регистратор <> &ДокументСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (СводныеИндивидуальныеГрафики.НомерСтроки ЕСТЬ NULL )
	|			И (ГрафикиРаботыПоВидамВремени.Документ <> &ДокументСсылка)
	|			И (ГрафикиРаботыПоВидамВремени.Документ <> ЗНАЧЕНИЕ(Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ПустаяСсылка))
	|			И (ГрафикиРаботыПоВидамВремени.Документ <> НЕОПРЕДЕЛЕНО)
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
	|			И ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник
	|ГДЕ
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Ссылка = &ДокументСсылка
	|	И ((НЕ СводныеИндивидуальныеГрафики.НомерСтроки ЕСТЬ NULL )
	|			ИЛИ (НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ))";
	
	РезультатЗапроса = ЗапросПроверкаУникальности.Выполнить().Выбрать();		
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		СтрокаСотрудников = "";
		
		Пока РезультатЗапроса.Следующий() Цикл
			СтрокаСотрудников = СтрокаСотрудников + Символы.ПС + РезультатЗапроса.СотрудникНаименование + " (" + РезультатЗапроса.ДокументПредставление + ")";
		КонецЦикла;
		
		ОбщегоНазначения.СообщитьОбОшибке("Проведение документа невозможно, так как на следующих сотрудников уже введены данные в этом периоде:" + СтрокаСотрудников, Истина);
		
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПроверитьУникальностьЗаписей()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуСводныеИндивидуальныеГрафики(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборСводныеИндивидуальныеГрафики)
	
	Движение = НаборСводныеИндивидуальныеГрафики.Добавить();
	 
	// Измерения
	Движение.Сотрудник = ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Назначение = ВыборкаПоСтрокамДокумента.Назначение;
	Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	 
	// Ресурсы
	Движение.Дней = ВыборкаПоСтрокамДокумента.ВсегоДней;
	Движение.Часов = ВыборкаПоСтрокамДокумента.ВсегоЧасов;
	Движение.ЧасовВечерних = ВыборкаПоСтрокамДокумента.ВсегоЧасовВечерних;
	Движение.ЧасовНочных = ВыборкаПоСтрокамДокумента.ВсегоЧасовНочных;
	
КонецПроцедуры // ДобавитьСтрокуСводныеИндивидуальныеГрафики()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуГрафикиРаботыПоВидамВремени(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, ВыборкаГрафикиСотрудников, ТаблицаНабора)
	
	КоличествоДней = День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
	СтруктураПоиска = Новый Структура("Сотрудник,НомерДня",ВыборкаПоСтрокамДокумента.Сотрудник);
	
	МассивГрафикиСотрудников = Новый Массив(КоличествоДней + 1);
	Для НомерДня = 1 По КоличествоДней Цикл
		МассивГрафикиСотрудников[НомерДня] = 8;
	КонецЦикла;
	СтруктураПоискаСотрудник = Новый Структура("Сотрудник",ВыборкаПоСтрокамДокумента.Сотрудник);
	Пока ВыборкаГрафикиСотрудников.НайтиСледующий(СтруктураПоискаСотрудник) Цикл
	   	МассивГрафикиСотрудников[ВыборкаГрафикиСотрудников.НомерДня] = ВыборкаГрафикиСотрудников.ДлительностьРабочейНедели / 5;
    КонецЦикла;
	Для НомерДня = 1 По КоличествоДней Цикл
		
		УсловнаяПродолжительностьДня = МассивГрафикиСотрудников[НомерДня];
		
		ОбрабатываемаяДата = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), НомерДня);
		Для Каждого ЭлементСпискаСоответствий Из СписокСоответствийВидаУчетаВремениИНазванийЯчеек Цикл
			
			ЗначениеЯчейки = ВыборкаПоСтрокамДокумента[ЭлементСпискаСоответствий.Представление+Строка(НомерДня)];
			
			// Запись движений по часам.
			Движение = ТаблицаНабора.Добавить();
			Движение.ГрафикРаботы = ВыборкаПоСтрокамДокумента.Назначение;
			Движение.Сотрудник = ВыборкаПоСтрокамДокумента.Сотрудник;
			
			Движение.ВидУчетаВремени = ЭлементСпискаСоответствий.Значение;
			Движение.Дата = ОбрабатываемаяДата;
			Движение.План = Истина;
			Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			
			
			// Ресурсы
			Движение.ОсновноеЗначение = ЗначениеЯчейки;
			Движение.ОсновноеЗначениеНорма = ЗначениеЯчейки;
			Движение.ДополнительноеЗначение = ?(ЗначениеЯчейки = 0, 0,1);
			Движение.ДополнительноеЗначениеНорма = Движение.ДополнительноеЗначение;
			
			Движение.ПроизводственныйКалендарьПятидневка = ОтмеченВРесурсеПроизводственногоКалендаря(ОбрабатываемаяДата, "Пятидневка", ПроизводственныйКалендарь);
			Движение.ПроизводственныйКалендарьПятидневкаЧасы = УсловнаяПродолжительностьДня * Движение.ПроизводственныйКалендарьПятидневка;
			Движение.ПроизводственныйКалендарьШестидневка = ОтмеченВРесурсеПроизводственногоКалендаря(ОбрабатываемаяДата, "Шестидневка",  ПроизводственныйКалендарь);
			Движение.ПроизводственныйКалендарьКалендарныеДни = ОтмеченВРесурсеПроизводственногоКалендаря(ОбрабатываемаяДата, "КалендарныеДни", ПроизводственныйКалендарь);
			
			// Реквизиты
			Движение.Документ = Ссылка;
			
		КонецЦикла;	
		
		Движение = ТаблицаНабора.Добавить();
		Движение.ГрафикРаботы = ВыборкаПоСтрокамДокумента.Назначение;
		Движение.Сотрудник = ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.ВидУчетаВремени = ВидУчетаВремениПоДням;
		Движение.Дата = ОбрабатываемаяДата;
		Движение.План = Истина;
		Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		
		// Ресурсы
		КоличествоЧасов = ВыборкаПоСтрокамДокумента["Часов"+Строка(НомерДня)];
		Движение.ОсновноеЗначение = ?(КоличествоЧасов = 0, 0,1);
		Движение.ОсновноеЗначениеНорма = Движение.ОсновноеЗначение;
		Движение.ДополнительноеЗначение = КоличествоЧасов;
		Движение.ДополнительноеЗначениеНорма = КоличествоЧасов;
		
		Движение.ПроизводственныйКалендарьПятидневка = ОтмеченВРесурсеПроизводственногоКалендаря(ОбрабатываемаяДата, "Пятидневка", ПроизводственныйКалендарь);
		Движение.ПроизводственныйКалендарьПятидневкаЧасы = УсловнаяПродолжительностьДня * Движение.ПроизводственныйКалендарьПятидневка;
		Движение.ПроизводственныйКалендарьШестидневка = ОтмеченВРесурсеПроизводственногоКалендаря(ОбрабатываемаяДата, "Шестидневка",  ПроизводственныйКалендарь);
		Движение.ПроизводственныйКалендарьКалендарныеДни = ОтмеченВРесурсеПроизводственногоКалендаря(ОбрабатываемаяДата, "КалендарныеДни", ПроизводственныйКалендарь);
		
		// Реквизиты
		Движение.Документ = Ссылка;
		
	КонецЦикла;

КонецПроцедуры // ДобавитьСтрокуГрафикиРаботыПоВидамВремени()

// Процедура удаляет все записи из регистра за ПериодРегистрации,
// если документ последний в этом периоде, в разрезе сотрудников
Процедура УдалитьЗаписиЗаПериодДокумента()
	Если НЕ ДополнительныеСвойства.ЗаписьПроведенного Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник Как Сотрудник,
	               |	ВводИндивидуальныхГрафиковРаботыОрганизации.ПериодРегистрации
	               |ИЗ
	               |	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации КАК ВводИндивидуальныхГрафиковРаботыОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы
	               |		ПО (ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Ссылка = &Документ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	               |		ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник.ФизЛицо
	               |			И ГрафикиРаботыПоВидамВремени.Месяц = ВводИндивидуальныхГрафиковРаботыОрганизации.ПериодРегистрации
	               |			И (ГрафикиРаботыПоВидамВремени.Документ <>  &ПустойДокумент)
	               |			И (ГрафикиРаботыПоВидамВремени.План)
	               |ГДЕ
	               |	ВводИндивидуальныхГрафиковРаботыОрганизации.Ссылка = &Документ
	               |	И ГрафикиРаботыПоВидамВремени.Документ ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.УстановитьПараметр("ПустойДокумент", Документы.ВводИндивидуальныхГрафиковРаботыОрганизации.ПустаяСсылка());
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	Пока ВыборкаЗапроса.Следующий() Цикл
		НаборЗаписей.Отбор.План.Установить(Истина);
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(ВыборкаЗапроса.Сотрудник);
		НаборЗаписей.Отбор.Месяц.Установить(ВыборкаЗапроса.ПериодРегистрации);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры // УдалитьЗаписиЗаПериодДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры

// Проецура - обработчик события "ПередЗаписью" документа
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ГрафикРаботы);
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(ГрафикРаботы);
	ДополнительныеСвойства.Вставить("ЗаписьПроведенного", Проведен);
	
		// проверим допустимо ли изменение состава сотрудников по которым введен табель
	Если Не ЭтоНовый() 
		И СпособВводаДанных <> Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод 
		И РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		
		СоответствиеСотрудники = Новый Соответствие;
		Для Каждого Строка Из ГрафикРаботы Цикл
			СоответствиеСотрудники.Вставить(Строка.Сотрудник, "");
		КонецЦикла;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НовыеСотрудники.Сотрудник КАК Сотрудник
			|ПОМЕСТИТЬ ВТНовыеСотрудники
			|ИЗ
			|	&НовыеСотрудники КАК НовыеСотрудники
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОсновныеНачисления.Регистратор КАК Документ,
			|	ПРЕДСТАВЛЕНИЕ(ОсновныеНачисления.Регистратор) КАК ДокументПредставление,
			|	ОсновныеНачисления.Сотрудник.Наименование КАК СотрудникНаименование
			|ИЗ
			|	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК СтарыеСотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНовыеСотрудники КАК НовыеСотрудники
			|		ПО СтарыеСотрудники.Сотрудник = НовыеСотрудники.Сотрудник
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|		ПО СтарыеСотрудники.Сотрудник = ОсновныеНачисления.Сотрудник
			|			И (ОсновныеНачисления.ПериодДействия = НАЧАЛОПЕРИОДА(СтарыеСотрудники.Ссылка.ПериодРегистрации, МЕСЯЦ))
			|			И (ОсновныеНачисления.ГрафикРаботы = ОсновныеНачисления.Сотрудник)
			|ГДЕ
			|	СтарыеСотрудники.Ссылка = &Документ
			|	И НовыеСотрудники.Сотрудник ЕСТЬ NULL ");
			
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("Документ", Ссылка);
			
			НовыеСотрудники = Новый ТаблицаЗначений;
			НовыеСотрудники.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
			Для Каждого КлючЗначение Из СоответствиеСотрудники Цикл
				Строка = НовыеСотрудники.Добавить();
				Строка.Сотрудник = КлючЗначение.Ключ;
			КонецЦикла;
			Запрос.УстановитьПараметр("НовыеСотрудники", НовыеСотрудники);
			
			Выборка = Запрос.ВыполнитьПакет()[1].Выбрать();
			
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОсновныеНачисления.Регистратор КАК Документ,
			|	ПРЕДСТАВЛЕНИЕ(ОсновныеНачисления.Регистратор) КАК ДокументПредставление,
			|	ОсновныеНачисления.Сотрудник.Наименование КАК СотрудникНаименование
			|ИЗ
			|	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК СтарыеСотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|		ПО СтарыеСотрудники.Сотрудник = ОсновныеНачисления.Сотрудник
			|			И (ОсновныеНачисления.ПериодДействия = НАЧАЛОПЕРИОДА(СтарыеСотрудники.Ссылка.ПериодРегистрации, МЕСЯЦ))
			|			И (ОсновныеНачисления.ГрафикРаботы = ОсновныеНачисления.Сотрудник)
			|ГДЕ
			|	СтарыеСотрудники.Ссылка = &Документ");
			
			Запрос.УстановитьПараметр("Документ", Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			
		КонецЕсли;
		
		Если Выборка.Количество() > 0 Тогда
			ОбработкаКомментариев.УдалитьСообщения();
			ОбщегоНазначения.ВывестиИнформациюОбОшибке("Изменение документа невозможно, так как по следующим сотрудникам уже выполнено начисление зарплаты");
			Пока Выборка.Следующий() Цикл 
				Расшифровки = Новый Массив;
				Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", Выборка.ДокументПредставление, Выборка.Документ));
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(
						Выборка.СотрудникНаименование + " документом %%",
						Отказ, , Перечисления.ВидыСообщений.Ошибка, Расшифровки);
			КонецЦикла;
			ОбработкаКомментариев.ПоказатьСообщения();
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения" документа
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	УдалитьЗаписиГрафика();
	УдалитьЗаписиЗаПериодДокумента();

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		Отказ = Отказ Или (Не ПроверитьУникальностьЗаписей());
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			// Графики работы
			// получим реквизиты табличной части
			ВыборкаПоГрафикуРаботы = СформироватьЗапросПоГрафикРаботы(ВыборкаПоШапкеДокумента).Выбрать();
			
			Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
				Пока ВыборкаПоГрафикуРаботы.Следующий() Цикл
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиГрафикРаботы(ВыборкаПоГрафикуРаботы, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуСводныеИндивидуальныеГрафики(ВыборкаПоГрафикуРаботы, ВыборкаПоШапкеДокумента, Движения.СводныеИндивидуальныеГрафики);
						
					КонецЕсли;
				КонецЦикла;
			Иначе
				
				Запрос = Новый Запрос;
				
				Запрос.УстановитьПараметр("Месяц", ПериодРегистрации);
				
				// Получим таблицу сведений о производственном календаре за нужные месяцы
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
				|	РегламентированныйПроизводственныйКалендарь.Пятидневка,
				|	РегламентированныйПроизводственныйКалендарь.Шестидневка,
				|	РегламентированныйПроизводственныйКалендарь.КалендарныеДни,
				|	РегламентированныйПроизводственныйКалендарь.ВидДня
				|ИЗ
				|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
				|ГДЕ
				|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) = &Месяц";
				
				ПроизводственныйКалендарь = Запрос.Выполнить().Выгрузить();
				ПроизводственныйКалендарь.Индексы.Добавить("ДатаКалендаря");
				
				ВыборкаГрафикиСотрудников = СформироватьЗапросГрафикиСотрудников(ВыборкаПоШапкеДокумента).Выбрать();
				НаборГрафикиРаботыПоВидамВремени = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
				
				НаборГрафикиРаботыПоВидамВремени.Отбор.Месяц.Установить(ВыборкаПоШапкеДокумента.ПериодРегистрации);
				НаборГрафикиРаботыПоВидамВремени.Отбор.План.Установить(Истина);
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("План", Истина);
				СтруктураПоиска.Вставить("Месяц", ВыборкаПоШапкеДокумента.ПериодРегистрации);
				
				Пока ВыборкаПоГрафикуРаботы.Следующий() Цикл
					
					ПроверитьЗаполнениеСтрокиГрафикРаботы(ВыборкаПоГрафикуРаботы, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						
						НаборГрафикиРаботыПоВидамВремени.Отбор.ГрафикРаботы.Установить(ВыборкаПоГрафикуРаботы.Назначение);
						НаборГрафикиРаботыПоВидамВремени.Отбор.Сотрудник.Установить(ВыборкаПоГрафикуРаботы.Сотрудник);
						НаборГрафикиРаботыПоВидамВремени.Отбор.План.Установить(Истина);
						НаборГрафикиРаботыПоВидамВремени.Отбор.Месяц.Установить(ВыборкаПоШапкеДокумента.ПериодРегистрации);
						НаборГрафикиРаботыПоВидамВремени.Прочитать();
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуГрафикиРаботыПоВидамВремени(ВыборкаПоГрафикуРаботы, ВыборкаПоШапкеДокумента, ВыборкаГрафикиСотрудников, НаборГрафикиРаботыПоВидамВремени);
						
						НаборГрафикиРаботыПоВидамВремени.Записать();
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения" документа
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УдалитьЗаписиГрафика();
	УдалитьЗаписиЗаПериодДокумента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

СписокСоответствийВидаУчетаВремениИНазванийЯчеек = Новый СписокЗначений;
СписокСоответствийВидаУчетаВремениИНазванийЯчеек.Добавить(Перечисления.ВидыУчетаВремени.ПоЧасам, "Часов");
СписокСоответствийВидаУчетаВремениИНазванийЯчеек.Добавить(Перечисления.ВидыУчетаВремени.ПоВечернимЧасам, "ЧасовВечерних");
СписокСоответствийВидаУчетаВремениИНазванийЯчеек.Добавить(Перечисления.ВидыУчетаВремени.ПоНочнымЧасам, "ЧасовНочных");

СтруктураПоискаВПроизводственномКалендаре = Новый Структура;

ВидУчетаВремениПоДням  = Перечисления.ВидыУчетаВремени.ПоДням;
СпособВводаДанныхПоДням = Перечисления.СпособыВводаДанныхОВремени.ПоДням;
