Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета     Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует печатную форму М-11
//
Функция ПечатьМ11(ПечатьПоДаннымУпрУчета = Истина)
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер 	                       КАК НомерДокумента,                  
	|	Дата	                       КАК ДатаДокумента,
	|	Организация                    КАК Организация,
	|	Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	" + ?(ПечатьПоДаннымУпрУчета, "Подразделение", "ПодразделениеОрганизации")+" КАК Подразделение
	|ИЗ
	|	Документ.ВводНачальныхОстатковМатериаловВЭксплуатации КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	                            
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	Если Проведен Тогда
		
		Рег = ?(ПечатьПоДаннымУпрУчета, "ПартииМатериаловВЭксплуатации", "ПартииМатериаловВЭксплуатацииБухгалтерскийУчет");
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
		
		// Двойная вложенность запросов необходима, поскольку
		// при передаче в эксплуатацию могут быть корректировки стоимости.
		// Без такой вложенности корректировки выводятся отдельной строкой.
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК МатериалНаименование,
		|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                КАК НоменклатурныйНомер,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
		|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.ЕдиницаИзмерения)              КАК ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ВложенныйЗапрос.СерияНоменклатуры          КАК Серия," + ?(Не ПечатьПоДаннымУпрУчета, "
		|	ВложенныйЗапрос.СчетПередачиБУ             КАК СчетПередачи,", "") + "
		|	ВложенныйЗапрос.Количество                 КАК Количество,
		|	ВложенныйЗапрос.Цена                       КАК Цена,
		|	ВложенныйЗапрос.Стоимость                  КАК Стоимость
		|ИЗ
		|	(ВЫБРАТЬ
		|		Партии.Номенклатура               КАК Номенклатура,
		|		Партии.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		Партии.СерияНоменклатуры          КАК СерияНоменклатуры," + ?(Не ПечатьПоДаннымУпрУчета, " 
		|		Партии.СчетПередачиБУ             КАК СчетПередачиБУ,", "") + "
		|		ВЫБОР
		|			КОГДА Партии.Количество = 0
		|				ТОГДА Партии.Стоимость
		|			ИНАЧЕ ВЫРАЗИТЬ(Партии.Стоимость / Партии.Количество КАК ЧИСЛО(15, 2))
		|		КОНЕЦ КАК Цена,
		|		СУММА(Партии.Количество)    КАК Количество,
		|		СУММА(Партии.Стоимость)     КАК Стоимость,
		|		Партии.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|		МИНИМУМ(Партии.НомерСтроки) КАК НомерСтроки
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Партии.Номенклатура                           КАК Номенклатура,
		|			Партии.ХарактеристикаНоменклатуры             КАК ХарактеристикаНоменклатуры,
		|			Партии.СерияНоменклатуры                      КАК СерияНоменклатуры," + ?(Не ПечатьПоДаннымУпрУчета, "
		|			Партии.СхемаНазначенияИспользования.СчетПередачиБУ КАК СчетПередачиБУ,", "") + "
		|			Партии.ДокументОприходования                  КАК ДокументОприходования,
		|			СУММА(Партии.Количество)                      КАК Количество,
		|			СУММА(Партии.Стоимость)                       КАК Стоимость,
		|			Партии.Номенклатура.ЕдиницаХраненияОстатков   КАК ЕдиницаИзмерения,
		|			МИНИМУМ(Партии.НомерСтроки)                   КАК НомерСтроки
		|		ИЗ
		|			РегистрНакопления." + Рег + " КАК Партии
		|		ГДЕ
		|			Партии.Регистратор = &ТекущийДокумент
		|			И Партии.ВидДвижения = &ВидДвижения
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Партии.Номенклатура,
		|			Партии.ХарактеристикаНоменклатуры," + ?(Не ПечатьПоДаннымУпрУчета, "
		|			Партии.СхемаНазначенияИспользования.СчетПередачиБУ,", "") + "
		|			Партии.СерияНоменклатуры,
		|			Партии.Номенклатура.ЕдиницаХраненияОстатков,
		|			Партии.ДокументОприходования) КАК Партии
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Партии.Номенклатура," + ?(Не ПечатьПоДаннымУпрУчета, "
		|		Партии.СчетПередачиБУ,", "") + "
		|		Партии.ХарактеристикаНоменклатуры,
		|		Партии.СерияНоменклатуры,
		|		Партии.ЕдиницаИзмерения,
		|		ВЫБОР
		|			КОГДА Партии.Количество = 0
		|				ТОГДА Партии.Стоимость
		|			ИНАЧЕ ВЫРАЗИТЬ(Партии.Стоимость / Партии.Количество КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.НомерСтроки                                                      
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(Стоимость)
		|ПО
		|	ОБЩИЕ";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК МатериалНаименование,
		|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК НоменклатурныйНомер,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК ЕдиницаИзмеренияКод,
		|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
		|	ВложенныйЗапрос.Серия                КАК Серия,
		|	ВложенныйЗапрос.Количество           КАК Количество," + ?(Не ПечатьПоДаннымУпрУчета, "
		|	ВложенныйЗапрос.СчетПередачиБУ       КАК СчетПередачи,", "") + "
		|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки
		|ИЗ 
		|	(
		|	ВЫБРАТЬ
		|		Номенклатура                           КАК Номенклатура,
		|		ЕдиницаИзмерения                       КАК ЕдиницаИзмерения," + ?(Не ПечатьПоДаннымУпрУчета, "
		|		СхемаНазначенияИспользования.СчетПередачиБУ КАК СчетПередачиБУ,", "") + "
		|		ХарактеристикаНоменклатуры	           КАК Характеристика,
		|		СерияНоменклатуры                      КАК Серия,
		|		СУММА(Количество)                      КАК Количество,
		|		МИНИМУМ(НомерСтроки) 		           КАК НомерСтроки
		|	ИЗ
		|		Документ.ВводНачальныхОстатковМатериаловВЭксплуатации.Материалы КАК Док
		|	ГДЕ
		|		Док.Ссылка = &ТекущийДокумент
		|
		|	СГРУППИРОВАТЬ ПО
		|		Номенклатура,
		|		ЕдиницаИзмерения," + ?(Не ПечатьПоДаннымУпрУчета, "
		|		СхемаНазначенияИспользования.СчетПередачиБУ,", "") + "
		|		ХарактеристикаНоменклатуры,
		|		СерияНоменклатуры
		|
		|	) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	ОБЩИЕ
		|";
		
	КонецЕсли;

	ЗапросПоНоменклатуре = Запрос.Выполнить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВводНачальныхОстатковМатериаловВЭксплуатации_М11";
	
	// Вывод заголовка
	Макет = ПолучитьОбщийМакет("М11");
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(Шапка);
	Область.Параметры.КодОперации = "Передача в эксплуатацію";	
	
	Если ПечатьПоДаннымУпрУчета Тогда
		
		Область.Параметры.ПредставлениеОрганизации = "Управлінський облік";
		Область.Параметры.Валюта                   = мВалютаУправленческогоУчета;
		
	Иначе
				
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("", "КодПоЕДРПОУ");
		СписокПоказателей = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Шапка.Организация, Шапка.ДатаДокумента, СписокПоказателей);
		Область.Параметры.КодПоЕДРПОУ              = СписокПоказателей.КодПоЕДРПОУ;
		Область.Параметры.ПредставлениеОрганизации = Шапка.ОрганизацияНаименованиеПолное;
		Область.Параметры.Валюта                   = мВалютаРегламентированногоУчета;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(Область);
	
	ВысотаШапки   = ТабДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабДокумент.ШиринаТаблицы;
	ТабДокумент.ПовторятьПриПечатиСтроки = ТабДокумент.Область("R" + ВысотаШапки);
	ТабДокумент.ОбластьПечати            = ТабДокумент.Область("C2:C" + ШиринаТаблицы);
	
	ВыборкаОбщийИтог = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщийИтог.Следующий(); // получение общего итога
	
	ОбластьПодвал   = Макет.ПолучитьОбласть("Подвал");
	ПараметрыПодвал = ОбластьПодвал.Параметры;
	
	Если Проведен Тогда
		
		ПрописьВалюты = ?(ПечатьПоДаннымУпрУчета, мВалютаУправленческогоУчета.ПараметрыПрописиНаУкраинском,
		                                          мВалютаРегламентированногоУчета.ПараметрыПрописиНаУкраинском);
		ПараметрыПодвал.ИтогоСуммаПрописью = ЧислоПрописью(ОбщегоНазначения.ПреобразоватьВЧисло(ВыборкаОбщийИтог.Стоимость),
		                                                   "Л=uk_UA;ДП=Истина;", ПрописьВалюты);
		
	КонецЕсли;
	
	ВыборкаПоСтрокам = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоличествоВВыборке     = ВыборкаПоСтрокам.Количество();
	КоличествоОбработанных = 1;
	// В форме сказано "Кількість найменувань". Будет выводится количество позиций.
	ПараметрыПодвал.ИтогоКоличествоПрописью = ЧислоПрописью(КоличествоВВыборке, 
	                                                        "Л=uk_UA;НП=Ложь;НД=Ложь;", ",,,,,,,,0");
	
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Область.Параметры.МатериалНаименование = СокрЛП(ВыборкаПоСтрокам.МатериалНаименование) 
		                                         + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
		
		Если КоличествоОбработанных = КоличествоВВыборке Тогда
			// Последняя запись. Ее не следует отрывать от подписей.
			
			МассивТаблиц = Новый Массив(2);
			МассивТаблиц[0] = Область;
			МассивТаблиц[1] = ОбластьПодвал;
			
			Если НЕ ТабДокумент.ПроверитьВывод(МассивТаблиц) Тогда
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(Область);
        КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьМ11()

// Функция формирует печатную форму документа
//
Функция ПечатьМШ7(ПечатьПоДаннымУпрУчета = Истина)

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер 	                       КАК НомерДокумента,
	|	Дата	                       КАК ДатаДокумента,
	|	Организация                    КАК Организация,
	|	Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	" + ?(ПечатьПоДаннымУпрУчета, "Подразделение", "ПодразделениеОрганизации")+" КАК ПредставлениеПодразделения
	|ИЗ
	|	Документ.ВводНачальныхОстатковМатериаловВЭксплуатации КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура." + ТоварКод + "          КАК НоменклатурныйНомер,
	|	ВЫРАЗИТЬ(Док.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК МатериалНаименование,
	|	Док.ХарактеристикаНоменклатуры             КАК Характеристика,
	|	Док.СерияНоменклатуры                      КАК Серия,
	|	Док.ЕдиницаИзмерения.Код                   КАК ЕдиницаИзмеренияКод,
	|	Док.ЕдиницаИзмерения.Наименование          КАК ЕдиницаИзмеренияНаименование," + ?(Не ПечатьПоДаннымУпрУчета, "
	|	Док.СчетПередачиБУ                         КАК СчетПередачи,", "") + "
	|	Док.Количество                             КАК Количество,
	|	Док.ФизЛицо                                КАК Сотрудник,
	|	Док.ФизЛицо.Код                            КАК ТабельныйНомер,
	|	Док.ДатаДокумента                          КАК ДатаДокумента,
	|	Док.СрокСлужбы                             КАК СрокСлужбы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Номенклатура                           КАК Номенклатура,
	|		Док.ХарактеристикаНоменклатуры             КАК ХарактеристикаНоменклатуры,
	|		Док.СерияНоменклатуры                      КАК СерияНоменклатуры,
	|		Док.ЕдиницаИзмерения                       КАК ЕдиницаИзмерения," + ?(Не ПечатьПоДаннымУпрУчета, "
	|		Док.СхемаНазначенияИспользования.СчетПередачиБУ КАК СчетПередачиБУ,", "") + "
	|		СУММА(Док.Количество)                      КАК Количество,
	|		МИНИМУМ(Док.НомерСтроки) 		           КАК НомерСтроки,
	|		Док.ФизЛицо                                КАК ФизЛицо,
	|		Док.Ссылка.Дата                            КАК ДатаДокумента,
	|		Док.СрокПолезногоИспользования КАК СрокСлужбы
	|	ИЗ
	|		Документ.ВводНачальныхОстатковМатериаловВЭксплуатации.Материалы КАК Док
	|	ГДЕ
	|		Док.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		Док.Номенклатура,
	|		Док.ХарактеристикаНоменклатуры,
	|		Док.СерияНоменклатуры,
	|		Док.ЕдиницаИзмерения," + ?(Не ПечатьПоДаннымУпрУчета, "
	|		Док.СхемаНазначенияИспользования.СчетПередачиБУ,", "") + "
	|		Док.ФизЛицо,
	|		Док.Ссылка.Дата,
	|		Док.СрокПолезногоИспользования) КАК Док
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР";

	ЗапросПоНоменклатуре = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВводНачальныхОстатковМатериаловВЭксплуатации_МШ7";
	
	// Вывод заголовка
	Макет = ПолучитьОбщийМакет("МШ7");
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(Шапка);
	Область.Параметры.КодОперации = "Передача в эксплуатацію";	
	
	ОбластьПодвал   = Макет.ПолучитьОбласть("Подвал");
	
	Если ПечатьПоДаннымУпрУчета Тогда
		
		Область.Параметры.ПредставлениеОрганизации = "Управлінський облік";
		
	Иначе
				
		СписокПоказателей = Новый СписокЗначений;
		СписокПоказателей.Добавить("", "КодПоЕДРПОУ");
		СписокПоказателей = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Шапка.Организация, Шапка.ДатаДокумента, СписокПоказателей);
		Область.Параметры.КодПоЕДРПОУ              = СписокПоказателей.КодПоЕДРПОУ;
		Область.Параметры.ПредставлениеОрганизации = Шапка.ОрганизацияНаименованиеПолное;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(Область);

	ВысотаШапки   = ТабДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабДокумент.ШиринаТаблицы;
	ТабДокумент.ПовторятьПриПечатиСтроки = ТабДокумент.Область("R" + ВысотаШапки);
	ТабДокумент.ОбластьПечати            = ТабДокумент.Область("C2:C" + ШиринаТаблицы);
	
	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КоличествоВВыборке     = ВыборкаПоСтрокам.Количество();
	КоличествоОбработанных = 1;
	
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Область.Параметры.МатериалНаименование = СокрЛП(ВыборкаПоСтрокам.МатериалНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
		Область.Параметры.НомерПП              = КоличествоОбработанных;
		
		Если КоличествоОбработанных = КоличествоВВыборке Тогда
			// Последняя запись. Ее не следует отрывать от подписей.
			
			МассивТаблиц = Новый Массив(2);
			МассивТаблиц[0] = Область;
			МассивТаблиц[1] = ОбластьПодвал;
			
			Если НЕ ТабДокумент.ПроверитьВывод(МассивТаблиц) Тогда
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(Область);
        КоличествоОбработанных = КоличествоОбработанных + 1;

	КонецЦикла;

	// Вывод подвала
	ТабДокумент.Вывести(ОбластьПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьМШ7()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "МШ7упр" Тогда
		
		ТабДокумент = ПечатьМШ7();
		
	ИначеЕсли ИмяМакета = "МШ7бух" Тогда
		
		ТабДокумент = ПечатьМШ7(Ложь);
		
	ИначеЕсли ИмяМакета = "М11упр" Тогда
		
		ТабДокумент = ПечатьМ11();
		
	ИначеЕсли ИмяМакета = "М11бух" Тогда
		
		ТабДокумент = ПечатьМ11(Ложь);	
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка), Ссылка);
	
КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечФорм = Новый Структура;
	
	Если ОтражатьВУправленческомУчете Тогда
		
		СтруктПечФорм.Вставить("МШ7упр", "Ведомость МШ-7 (упр. учет)");
		СтруктПечФорм.Вставить("М11упр", "Накладная M-11 (упр. учет)");
		
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктПечФорм.Вставить("МШ7бух", "Ведомость МШ-7 (бух. учет)");
		СтруктПечФорм.Вставить("М11бух", "Накладная M-11 (бух. учет)");		
		
	КонецЕсли;                      	
	
	Возврат СтруктПечФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение,
							   |Материалы.Стоимость";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
							   |Материалы.НалоговоеНазначение,
							   |Материалы.СтоимостьНУ,
							   |Материалы.СтоимостьРегл";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()                                       

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВУправленческомУчете Тогда
		
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
 	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаРегл.ЕстьНДС);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "";
	ДополнитьРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки);
	ДополнитьРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки);
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета);
	
	СтруктураОбязательныхПолей = 
	Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Подразделение";
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Организация, ПодразделениеОрганизации";
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыТабличнойЧастиРегл(Реквизиты)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;	
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "НалоговоеНазначение";
			  
КонецПроцедуры // ДополнитьРеквизитыТабличнойЧастиРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция проверяет правильность заполнения документа
// Возврат - структура с данными шапки документа
//
Функция ПроверкаРеквизитов(Отказ, Заголовок) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	РеквизитыТЧ = "Номенклатура, Количество, ЕдиницаИзмерения, ФизЛицо, СхемаНазначенияИспользования, СпособОтраженияРасходов, СрокПолезногоИспользования, Качество";
	ДополнитьРеквизитыТабличнойЧастиРегл(РеквизитыТЧ);
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТЧ, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, "Материалы");	
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТЧ), Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", , Отказ, Заголовок);
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // ПроверкаРеквизитов()

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиМатериалыРегл(СтруктураПолей)
	
	Если  ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей.Вставить("СчетПередачиБУ"   , "СхемаНазначенияИспользования.СчетПередачиБУ");
		СтруктураПолей.Вставить("СчетАмортизацииБУ", "СхемаНазначенияИспользования.СчетАмортизацииБУ");
		
		СтруктураПолей.Вставить("НалоговоеНазначение"  		, "НалоговоеНазначение");
		СтруктураПолей.Вставить("ВидНалоговойДеятельности"  , "НалоговоеНазначение.ВидНалоговойДеятельности");
		СтруктураПолей.Вставить("ВидДеятельностиНДС"        , "НалоговоеНазначение.ВидДеятельностиНДС");
		
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиМатериалыРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ТаблицаМатериалов = РезультатЗапросаПоМатериалам.Выгрузить();
	
	Для каждого СтрокаТЧ Из ТаблицаМатериалов Цикл
	
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                                """ табличной части ""Материалы"": ";
										

		
		Если ОтражатьВУправленческомУчете Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Стоимость) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
				                 + "Не заполнена ""Стоимость"".",
								 Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВидМатериала) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
				                 + "В назначении использования <" + СтрокаТЧ.СхемаНазначенияИспользования 
								 + "> не выбран ""Вид материала"".",
								 Отказ, Заголовок);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетПередачиБУ) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
				                 + "В назначении использования <" + СтрокаТЧ.СхемаНазначенияИспользования 
								 + "> не выбран ""Счет передачи"".",
								 Отказ, Заголовок);
				
			КонецЕсли;
			
			Если (СтрокаТЧ.ВидМатериала <> Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет)
				  И НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетАмортизацииБУ) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
				                 + "В назначении использования <" + СтрокаТЧ.СхемаНазначенияИспользования 
								 + "> не выбран ""Счет амортизации"".",
								 Отказ, Заголовок);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтоимостьРегл) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС + Символы.Таб
				                 + "Не заполнена ""Стоимость (регл)"".",
								 Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуМатериалов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	// Движения ПО РЕГИСТРУ МатериалыВЭксплуатации.
	НаборДвижений = Движения.МатериалыВЭксплуатации;
	
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийМатериалыВЭксплуатации.СписаниеПартийВЭксплуатацию, "КодОперации");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.МатериалыВЭксплуатации.ВыполнитьПриход();
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		
		// Движения ПО РЕГИСТРУ ПартииМатериаловВЭксплуатации.
		НаборДвижений = Движения.ПартииМатериаловВЭксплуатации;
		
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка       , "ДокументПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка       , "ДокументОприходования");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеПартийВЭксплуатацию, "КодОперации");
		
		НаборДвижений.мПериод            = Дата;               
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			
			Движения.ПартииМатериаловВЭксплуатации.ВыполнитьПриход();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	   
		Возврат;
	   
	КонецЕсли;
	
	ТабИмен = Неопределено;
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоМатериалам, ТабИмен, "СтоимостьРегл", "Стоимость");
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если НЕ СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
			// Движения ПО РЕГИСТРУ ПартииМатериаловВЭксплуатации.
			НаборДвижений = Движения.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет;
			
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Организация			  , "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(ПодразделениеОрганизации, "Подразделение");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка                  , "ДокументПередачи");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка                  , "ДокументОприходования");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеПартийВЭксплуатацию, "КодОперации");
			
			НаборДвижений.мПериод            = Дата;               
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет.ВыполнитьПриход();
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
		ПроводкиБУ = Движения.Хозрасчетный;
		
		Для каждого СтрокаТЧ Из ТаблицаПоМатериалам Цикл
		
			Если СтрокаТЧ.ВидМатериала <> Перечисления.ВидыМатериалов.МалоценныйБыстроизнашивающийсяПредмет Тогда
				// Нужно отразить стоимость на счете учета и счете амортизации
				
				СуммаПроводки = СтрокаТЧ.Стоимость;
				
				// проводка по стоимости
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = Дата;
				Проводка.Содержание   = "Ввод начальных остатков";
				Проводка.НомерЖурнала = "СО";
				Проводка.Организация  = Организация;
				Проводка.Сумма        = СуммаПроводки;
				
				Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Проводка.СуммаНУДт = НалоговыйУчет.ОпределитьСтоимостьНУ(СтрокаТЧ.НалоговоеНазначение, СтрокаТЧ.Стоимость);	
					
				КонецЕсли;
				
				Проводка.СчетДт = СтрокаТЧ.СчетПередачиБУ;
				
				Если Проводка.СчетДт.Количественный Тогда
					
					Проводка.КоличествоДт = СтрокаТЧ.Количество;
					
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизации", СтрокаТЧ.ФизЛицо);
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
				// проводка по амортизации
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = Дата;
				Проводка.Содержание   = "Ввод начальных остатков";
				Проводка.НомерЖурнала = "СО";
				Проводка.Организация  = Организация;
				Проводка.Сумма        = СуммаПроводки;
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
				Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					
					Проводка.СуммаНУКт = НалоговыйУчет.ОпределитьСтоимостьНУ(СтрокаТЧ.НалоговоеНазначение, СтрокаТЧ.Стоимость);	
					
				КонецЕсли;
				
				Проводка.СчетКт = СтрокаТЧ.СчетАмортизацииБУ;
				
				Если Проводка.СчетКт.Количественный Тогда
					
					Проводка.КоличествоКт = СтрокаТЧ.Количество;
					
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизации", СтрокаТЧ.ФизЛицо);
				
			КонецЕсли;	
		
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоМатериалам, ТабИмен);
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураШапкиДокумента = ПроверкаРеквизитов(Отказ, Заголовок);
	
	// первый этап проверки закончен
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;
	
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
	Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Второй этап проверки закончен
	Если Отказ Тогда
		
		Возврат
		
	КонецЕсли;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "СписыватьПартииПриПроведенииДокументов", "СписыватьПартииПриПроведенииДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиПартионныйУчетПоСкладам",           "ВестиПартионныйУчетПоСкладам");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Подготовим таблицу материалов для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        				, "Номенклатура");
	СтруктураПолей.Вставить("Услуга"              				, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               				, "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"          				, "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Стоимость"          				, "Стоимость");
	СтруктураПолей.Вставить("СтоимостьРегл"          		    , "СтоимостьРегл");
	СтруктураПолей.Вставить("СтоимостьНУ"   	       		    , "СтоимостьНУ");
	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"		, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         		, "СерияНоменклатуры");
	
	СтруктураПолей.Вставить("ФизЛицо"							, "ФизЛицо");
	СтруктураПолей.Вставить("СхемаНазначенияИспользования"		, "СхемаНазначенияИспользования");
	СтруктураПолей.Вставить("ВидМатериала"			            , "СхемаНазначенияИспользования.ВидМатериала");
	СтруктураПолей.Вставить("СпособОтраженияРасходов"	        , "СпособОтраженияРасходов");
	СтруктураПолей.Вставить("СрокПолезногоИспользования"	    , "СрокПолезногоИспользования");
	СтруктураПолей.Вставить("Качество"         					, "Качество");
	СтруктураПолей.Вставить("НомерСтроки"         				, "НомерСтроки");
	
	ДополнитьСтруктуруПолейТабличнойЧастиМатериалыРегл(СтруктураПолей);
	
	РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей);
	ТаблицаПоМатериалам = ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	
	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоМатериалам", ТаблицаПоМатериалам));
	
КонецПроцедуры	// ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Материалы,              // ТабличнаяЧастьТовары
			Неопределено,       	// ТабличнаяЧастьВозвратнаяТара
			Неопределено,           // ТабличнаяЧастьУслуги
			Неопределено,         	// ТабличнаяЧастьОборудование
			Неопределено, 			// ТабличнаяЧастьОбъектыСтроительства
			Неопределено  			// ТабличнаяЧастьБланкиСтрогогоУчета
		);
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
