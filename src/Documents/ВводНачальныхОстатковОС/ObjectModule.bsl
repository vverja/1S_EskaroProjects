Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)

Перем мУчетнаяПолитика;                 // (Общ)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мФлагФормированияДвиженийПоВыработке;
Перем мТабличноеПоле Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

Функция ПечатьОпись()
			
	ТабДок  = Новый ТабличныйДокумент;
	Макет   = ПолучитьМакет("ТабЧасть");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Заголовок = Локализация.ПолучитьЛокализованныйСинонимОбъекта(ЭтотОбъект, КодЯзыкаПечать) + " № " + Номер + НСтр("ru=' от ';uk=' від '",КодЯзыкаПечать) + Формат(Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
	ТабДок.Вывести( Область);                                                                  
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Область = Макет.ПолучитьОбласть("ШапкаБух");
		Область.Параметры.Организация              = Организация;
		Область.Параметры.ПодразделениеОрганизации = ПодразделениеОрганизации;
		ТабДок.Вывести( Область);
	КонецЕсли;
	Если ОтражатьВУправленческомУчете Тогда
		Область = Макет.ПолучитьОбласть("ШапкаУпр");
		Область.Параметры.Подразделение = Подразделение;
		ТабДок.Вывести( Область);
	КонецЕсли;
	
	// Создадим структуру печатаемых реквизитов
	МетаТЧ     = Метаданные().ТабличныеЧасти.ОС.Реквизиты;
	СтруктРекв = Новый Структура;
	СтруктРекв.Вставить("ОсновноеСредство", МетаТЧ.ОсновноеСредство);
	Для Каждого Колонка Из мТабличноеПоле.Колонки Цикл
		Если Не (Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "ИнвентарныйНомер")
			   И Колонка.Видимость Тогда
			СтруктРекв.Вставить( Колонка.Имя, МетаТЧ[Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	// Вывод заголовка таб части
	Область = Макет.ПолучитьОбласть( "ТабШапка|Начало");
	ТабДок.Вывести( Область);
	Область = Макет.ПолучитьОбласть( "ТабШапка|Колонка");
	Для Каждого Колонка Из СтруктРекв Цикл
		Если Не Колонка.Ключ = "ОсновноеСредство" Тогда
			Область.Параметры.КолЗаголовок = ПереводНаЯзыкИнформационнойБазы(Колонка.Значение, КодЯзыкаПечать);
			ТабДок.Присоединить(Область);
		КонецЕсли;
	КонецЦикла;
	
	// Вывод данных
	Для Каждого СтрокаТЧ Из ОС Цикл
		Область = Макет.ПолучитьОбласть( "ТабСтрока|Начало");
		Область.Параметры.НомерСтроки = СтрокаТЧ.НомерСтроки;
		Область.Параметры.ОС          = СтрокаТЧ.ОсновноеСредство;
		ТабДок.Вывести( Область);
		
		Область = Макет.ПолучитьОбласть( "ТабСтрока|Колонка");
		Для Каждого Колонка Из СтруктРекв Цикл
			Если Колонка.Ключ = "СпособНачисленияАмортизации" 
				ИЛИ Колонка.Ключ = "СпособНачисленияАмортизацииБУ" 
				ИЛИ Колонка.Ключ = "ВидДеятельностиНДС" Тогда	
				Область.Параметры.КолДанные=Локализация.ПолучитьЛокализованныйСинонимОбъекта(СтрокаТЧ[Колонка.Ключ], КодЯзыкаПечать);			
			ИначеЕсли Колонка.Ключ = "ОсновноеСредство" Тогда
				Продолжить;
			Иначе	
				Если ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Булево") Тогда
					Область.Параметры.КолДанные = Формат( СтрокаТЧ[Колонка.Ключ], НСтр("ru='БЛ=Нет; БИ=Да';uk='БЛ=Ні; БИ=Так'",КодЯзыкаПечать));
				ИначеЕсли ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Дата") Тогда
					Область.Параметры.КолДанные = Формат( СтрокаТЧ[Колонка.Ключ], "ДЛФ='DD';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
				Иначе                                    
					Область.Параметры.КолДанные = СтрокаТЧ[Колонка.Ключ];
				КонецЕсли;
			КонецЕсли;
			ТабДок.Присоединить(Область);
		КонецЦикла;
		
	КонецЦикла;
	
	// Вывод итогов
	Область = Макет.ПолучитьОбласть( "ТабИтог|Начало");
	ТабДок.Вывести( Область);
	
	Область = Макет.ПолучитьОбласть( "ТабИтог|Колонка");
	Для Каждого Колонка Из СтруктРекв Цикл
		Если Колонка.Ключ = "ОсновноеСредство" Тогда
			Продолжить;
		КонецЕсли;
		Если Колонка.Значение.Тип.Типы()[0] = Тип("Число") Тогда
			Область.Параметры.КолИтог = Формат( ОС.Итог( Колонка.Ключ), "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=3,0");
		Иначе
			Область.Параметры.КолИтог = "";
		КонецЕсли;
		ТабДок.Присоединить(Область);
	КонецЦикла;
	
	Возврат ТабДок;
		
КонецФункции
	
// Процедура печати табличной части документа
//
//Процедура Печать(КнопкаТекст) Экспорт
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяМакета = "Опись" Тогда
		Если мТабличноеПоле = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТабДокумент = ПечатьОпись();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Данные табличной части документа " + ЭтотОбъект);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		
	КонецЕсли;
		
КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Опись","Опись ОС при вводе остатков");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция ПереводНаЯзыкИнформационнойБазы(ОбъектМетаданных, КодЯзыка)
	
	ИмяОбъектаМетаданных = ОбъектМетаданных.Имя;
	
	Если КодЯзыка = "uk" Тогда
		Если ИмяОбъектаМетаданных = "ВыработкаКоличество" Тогда
		    Возврат "Виробіток кількість";
		ИначеЕсли ИмяОбъектаМетаданных = "НалоговоеНазначение" Тогда
		    Возврат "Податкове призначення";
		ИначеЕсли ИмяОбъектаМетаданных = "ВыработкаКоличествоБУ" Тогда
		    Возврат "Виробіток кількість (БО)";	
		ИначеЕсли ИмяОбъектаМетаданных = "ГрафикАмортизации" Тогда
		    Возврат "Графік амортизації";			
		ИначеЕсли ИмяОбъектаМетаданных = "ГрафикАмортизацииБУ" Тогда
		    Возврат "Графік амортизації БО";
		ИначеЕсли ИмяОбъектаМетаданных = "ДатаВводаВЭксплуатацию" Тогда
		    Возврат "Дата введення в експлуатацію";
		ИначеЕсли ИмяОбъектаМетаданных = "ДатаВводаВЭксплуатациюРегл" Тогда
		    Возврат "Дата введення в експлуатацію (Регл)";
		ИначеЕсли ИмяОбъектаМетаданных = "ДатаПоследнейМодернизации" Тогда
		    Возврат "Дата останньої модернізації (реконструкції)";
		ИначеЕсли ИмяОбъектаМетаданных = "ДатаПоследнейМодернизацииРегл" Тогда
		    Возврат "Дата останньої модернізації (реконструкції) (Регл)";		
		ИначеЕсли ИмяОбъектаМетаданных = "ДатаПринятияКУчету" Тогда
		    Возврат "Дата прийняття до обліку";
		ИначеЕсли ИмяОбъектаМетаданных = "ДатаПринятияКУчетуРегл" Тогда
		    Возврат "Дата прийняття до обліку (Регл)";				
		ИначеЕсли ИмяОбъектаМетаданных = "ИнвентарныйНомерРегл" Тогда
		    Возврат "Інвентарний номер";
		ИначеЕсли ИмяОбъектаМетаданных = "МОЛ" Тогда
		    Возврат "МВО";
		ИначеЕсли ИмяОбъектаМетаданных = "ЛиквидационнаяСтоимость" Тогда
		    Возврат "Ліквідаційна вартість";				
		ИначеЕсли ИмяОбъектаМетаданных = "ЛиквидационнаяСтоимостьБУ" Тогда
		    Возврат "Ліквідаційна вартість БУ";
   		ИначеЕсли ИмяОбъектаМетаданных = "МОЛРегл" Тогда
		    Возврат "МВО(регл)";
		ИначеЕсли ИмяОбъектаМетаданных = "НазваниеДокументаВводаВЭксплуатацию" Тогда
		    Возврат "Назва документа введення в експлуатацію";
		ИначеЕсли ИмяОбъектаМетаданных = "НазваниеДокументаВводаВЭксплуатациюРегл" Тогда
		    Возврат "Назва документа введення в експлуатацію (Регл)";
		ИначеЕсли ИмяОбъектаМетаданных = "НазваниеДокументаМодернизации" Тогда
		    Возврат "Назва документа модернізації";
		ИначеЕсли ИмяОбъектаМетаданных = "НазваниеДокументаМодернизацииРегл" Тогда
		    Возврат "Назва документа модернізації (Регл)";
		ИначеЕсли ИмяОбъектаМетаданных = "НазваниеДокументаПринятияКУчету" Тогда
		    Возврат "Назва документа прийняття до обліку";
		ИначеЕсли ИмяОбъектаМетаданных = "НазваниеДокументаПринятияКУчетуРегл" Тогда
		    Возврат "Назва документа прийняття до обліку (Регл)";				
		ИначеЕсли ИмяОбъектаМетаданных = "НакопленнаяАмортизация" Тогда
		    Возврат "Накопичена амортизація";	
		ИначеЕсли ИмяОбъектаМетаданных = "НакопленнаяАмортизацияБУ" Тогда
		    Возврат "Накопичена амортизація (БО)";			
		ИначеЕсли ИмяОбъектаМетаданных = "НачислятьАмортизацию" Тогда
		    Возврат "Нараховувати амортизацію";
		ИначеЕсли ИмяОбъектаМетаданных = "НалоговаяГруппаОС" Тогда
		    Возврат "Податкова група ОЗ";			
		ИначеЕсли ИмяОбъектаМетаданных = "НачислятьАмортизациюБУ" Тогда
		    Возврат "Нараховувати амортизацію (БО)";
		ИначеЕсли ИмяОбъектаМетаданных = "НачислятьАмортизациюНУ" Тогда
		    Возврат "Нараховувати амортизацію (ПО)";			
		ИначеЕсли ИмяОбъектаМетаданных = "Номенклатура" Тогда
		    Возврат "Номенклатура";
		ИначеЕсли ИмяОбъектаМетаданных = "НепроизводственноеНУ" Тогда
		    Возврат "Невиробниче (ПО)"			
		ИначеЕсли ИмяОбъектаМетаданных = "НомерДокументаВводаВЭксплуатацию" Тогда
		    Возврат "Номер документа введення в експлуатацію";	
		ИначеЕсли ИмяОбъектаМетаданных = "НомерДокументаВводаВЭксплуатациюРегл" Тогда
		    Возврат "Номер документа введення в експлуатацію (Регл)";
		ИначеЕсли ИмяОбъектаМетаданных = "НомерДокументаМодернизации" Тогда
		    Возврат "Номер документа модернізації";			
		ИначеЕсли ИмяОбъектаМетаданных = "НомерДокументаМодернизацииРегл" Тогда
		    Возврат "Номер документа модернізації (Регл)";			
		ИначеЕсли ИмяОбъектаМетаданных = "НомерДокументаПринятияКУчету" Тогда
		    Возврат "Номер документа прийняття до обліку";
		ИначеЕсли ИмяОбъектаМетаданных = "НомерДокументаПринятияКУчетуРегл" Тогда
		    Возврат "Номер документа прийняття до обліку (Регл)";			
		ИначеЕсли ИмяОбъектаМетаданных = "ОбъемПродукцииРабот" Тогда
		    Возврат "Очікуваний об'єм продукції (робіт) в натуральних од.";	
		ИначеЕсли ИмяОбъектаМетаданных = "ОбъемПродукцииРаботБУ" Тогда
		    Возврат "Очікуваний об'єм продукції (робіт) в натуральних од. (БО)";		
		ИначеЕсли ИмяОбъектаМетаданных = "ОбъемПродукцииРаботДляВычисленияАмортизации" Тогда
		    Возврат "Об'єм продукції (робіт) для обчислення амортизації в натуральних од.";	
		ИначеЕсли ИмяОбъектаМетаданных = "ОбъемПродукцииРаботДляВычисленияАмортизацииБУ" Тогда
		    Возврат "Об'єм продукції (робіт) для обчислення амортизації в натуральних од. (БО)";	
		ИначеЕсли ИмяОбъектаМетаданных = "ОсновноеСредство" Тогда
		    Возврат "Основний засіб";	
		ИначеЕсли ИмяОбъектаМетаданных = "ПараметрВыработки" Тогда
		    Возврат "Параметр виробітку";	
		ИначеЕсли ИмяОбъектаМетаданных = "ПараметрВыработкиБУ" Тогда
		    Возврат "Параметр виробітку (БО)";			
		ИначеЕсли ИмяОбъектаМетаданных = "ПервоначальнаяСтоимость" Тогда
		    Возврат "Початкова вартість";			
		ИначеЕсли ИмяОбъектаМетаданных = "ПервоначальнаяСтоимостьБУ" Тогда
		    Возврат "Початкова вартість (БО)";
		ИначеЕсли ИмяОбъектаМетаданных = "ПервоначальнаяСтоимостьНУ" Тогда
		    Возврат "Початкова вартість (ПО)";		
		ИначеЕсли ИмяОбъектаМетаданных = "РодительскоеОС" Тогда
		    Возврат "Батьківський ОЗ";
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеВводаВЭксплуатацию" Тогда
		    Возврат "Подія введення в експлуатацію";			
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеВводаВЭксплуатациюРегл" Тогда
		    Возврат "Подія введення в експлуатацію (Регл)";		
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеМодернизации" Тогда
		    Возврат "Подія модернізації"	
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеМодернизацииРегл" Тогда
		    Возврат "Подія модернізації (Регл)";		
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеПринятияКУчету" Тогда
		    Возврат "Подія прийняття до обліку"	
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеПринятияКУчетуРегл" Тогда
		    Возврат "Подія прийняття до обліку (Регл)";			
		ИначеЕсли ИмяОбъектаМетаданных = "СпособНачисленияАмортизации" Тогда
		    Возврат "Спосіб нарахування амортизації";			
		ИначеЕсли ИмяОбъектаМетаданных = "СпособНачисленияАмортизацииБУ" Тогда
		    Возврат "Спосіб нарахування амортизації (БО)";		
		ИначеЕсли ИмяОбъектаМетаданных = "СпособОтраженияРасходовПоАмортизации" Тогда
		    Возврат "Спосіб відображення витрат по амортизації";	
		ИначеЕсли ИмяОбъектаМетаданных = "СпособОтраженияРасходовПоАмортизацииБУ" Тогда
		    Возврат "Спосіб відображення витрат по амортизації (БО)";			
		ИначеЕсли ИмяОбъектаМетаданных = "СрокИспользованияДляВычисленияАмортизации" Тогда
		    Возврат "Строк використання для обчислення амортизації, міс.";			
		ИначеЕсли ИмяОбъектаМетаданных = "СрокИспользованияДляВычисленияАмортизацииБУ" Тогда
		    Возврат "Строк використання для обчислення амортизації, міс. (БО)";
		ИначеЕсли ИмяОбъектаМетаданных = "СрокПолезногоИспользования" Тогда
		    Возврат "Строк корисного використання, міс.";	
		ИначеЕсли ИмяОбъектаМетаданных = "СрокПолезногоИспользованияБУ" Тогда
		    Возврат "Строк корисного використання, міс. (БО)";		
		ИначеЕсли ИмяОбъектаМетаданных = "СтоимостьДляВычисленияАмортизации" Тогда
		    Возврат "Вартість для обчислення амортизації";	
		ИначеЕсли ИмяОбъектаМетаданных = "СтоимостьДляВычисленияАмортизацииБУ" Тогда
		    Возврат "Вартість для обчислення амортизації (БО)";		
		ИначеЕсли ИмяОбъектаМетаданных = "СуммаПоследнейМодернизации" Тогда
		    Возврат "Сума останньої модернізації";
		ИначеЕсли ИмяОбъектаМетаданных = "СуммаПоследнейМодернизацииБУ" Тогда
		    Возврат "Сума останньої модернізації (БО)";		
		ИначеЕсли ИмяОбъектаМетаданных = "СчетАмортизацииБУ" Тогда
		    Возврат "Рахунок амортизації (БО)";
		ИначеЕсли ИмяОбъектаМетаданных = "СчетУчетаБУ" Тогда
		    Возврат "Рахунок обліку (БО)";
		ИначеЕсли ИмяОбъектаМетаданных = "ТекущаяСтоимость" Тогда
		    Возврат "Поточна вартість";	
		ИначеЕсли ИмяОбъектаМетаданных = "ТекущаяСтоимостьБУ" Тогда
		    Возврат "Поточна вартість (БО)";
		ИначеЕсли ИмяОбъектаМетаданных = "БалансоваяСтоимостьНУ" Тогда
		    Возврат "Балансова вартість (ПО)";
		ИначеЕсли ИмяОбъектаМетаданных = "ХарактеристикаНоменклатуры" Тогда
		    Возврат "Характеристика номенклатури";	
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеВводВЭксплуатацию" Тогда
		    Возврат "Подія введення в експлуатацію";	
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеВводВЭксплуатациюРегл" Тогда
		    Возврат "Подія введення в експлуатацію (Регл)";	
		Иначе
		    Возврат ИмяОбъектаМетаданных;	
		КонецЕсли; 
		
	ИначеЕсли КодЯзыка = "ru" Тогда
	
		Если ИмяОбъектаМетаданных = "ВыработкаКоличество" Тогда
		    Возврат "Выработка количество";
		ИначеЕсли ИмяОбъектаМетаданных = "НалоговоеНазначение" Тогда
		    Возврат "Налоговое назначение";
		ИначеЕсли ИмяОбъектаМетаданных = "ВыработкаКоличествоБУ" Тогда
		    Возврат "Выработка количество (БУ)";	
		ИначеЕсли ИмяОбъектаМетаданных = "ГрафикАмортизации" Тогда
		    Возврат "График амортизации";	
		ИначеЕсли ИмяОбъектаМетаданных = "ГрафикАмортизацииБУ" Тогда
		    Возврат "График амортизации (БУ)";
		ИначеЕсли ИмяОбъектаМетаданных = "ДатаВводаВЭксплуатацию" Тогда
		    Возврат "Дата ввода в эксплуатацию";	
		ИначеЕсли ИмяОбъектаМетаданных = "ДатаВводаВЭксплуатациюРегл" Тогда
		    Возврат "Дата ввода в эксплуатацию (Регл)";
		ИначеЕсли ИмяОбъектаМетаданных = "ДатаПоследнейМодернизации" Тогда
		    Возврат "Дата последней модернизации";			
		ИначеЕсли ИмяОбъектаМетаданных = "ДатаПоследнейМодернизацииРегл" Тогда
		    Возврат "Дата последней модернизации (Регл)";		
		ИначеЕсли ИмяОбъектаМетаданных = "ДатаПринятияКУчету" Тогда
		    Возврат "Дата принятия к учету";			
		ИначеЕсли ИмяОбъектаМетаданных = "ДатаПринятияКУчетуРегл" Тогда
		    Возврат "Дата принятия к учету (Регл)";					
		ИначеЕсли ИмяОбъектаМетаданных = "ИнвентарныйНомерРегл" Тогда
		    Возврат "Инвентарный номер (Регл)";			
		ИначеЕсли ИмяОбъектаМетаданных = "МОЛ" Тогда
		    Возврат "МОЛ";
		ИначеЕсли ИмяОбъектаМетаданных = "ЛиквидационнаяСтоимость" Тогда
		    Возврат "Ликвидационная стоимость";			
		ИначеЕсли ИмяОбъектаМетаданных = "ЛиквидационнаяСтоимостьБУ" Тогда
		    Возврат "Ликвидационная стоимость (БУ)";	
		ИначеЕсли ИмяОбъектаМетаданных = "МОЛРегл" Тогда
		    Возврат "МОЛ (Регл)";				
		ИначеЕсли ИмяОбъектаМетаданных = "НазваниеДокументаВводаВЭксплуатацию" Тогда
		    Возврат "Название документа ввода в эксплуатацию";	
		ИначеЕсли ИмяОбъектаМетаданных = "НазваниеДокументаВводаВЭксплуатациюРегл" Тогда
		    Возврат "Название документа ввода в эксплуатацию (Регл)";
		ИначеЕсли ИмяОбъектаМетаданных = "НазваниеДокументаМодернизации" Тогда
		    Возврат "Название документа модернизации";	
		ИначеЕсли ИмяОбъектаМетаданных = "НазваниеДокументаМодернизацииРегл" Тогда
		    Возврат "Название документа модернизации (Регл)";		
		ИначеЕсли ИмяОбъектаМетаданных = "НазваниеДокументаПринятияКУчету" Тогда
		    Возврат "Название документа принятия к учету";	
		ИначеЕсли ИмяОбъектаМетаданных = "НазваниеДокументаПринятияКУчетуРегл" Тогда
		    Возврат "Название документа принятия к учету (Регл)";				
		ИначеЕсли ИмяОбъектаМетаданных = "НакопленнаяАмортизация" Тогда
		    Возврат "Накопленная амортизация";	
		ИначеЕсли ИмяОбъектаМетаданных = "НакопленнаяАмортизацияБУ" Тогда
		    Возврат "Накопленная амортизация (БУ)";		
		ИначеЕсли ИмяОбъектаМетаданных = "НачислятьАмортизацию" Тогда
		    Возврат "Начислять амортизацию";	
		ИначеЕсли ИмяОбъектаМетаданных = "НалоговаяГруппаОС" Тогда
		    Возврат "Налоговая группа ОС";
		ИначеЕсли ИмяОбъектаМетаданных = "НачислятьАмортизациюБУ" Тогда
		    Возврат "Начислять амортизацию (БУ)";	
		ИначеЕсли ИмяОбъектаМетаданных = "НачислятьАмортизациюНУ" Тогда
		    Возврат "Начислять амортизацию (НУ)";		
		ИначеЕсли ИмяОбъектаМетаданных = "Номенклатура" Тогда
		    Возврат "Номенклатура";	
		ИначеЕсли ИмяОбъектаМетаданных = "НепроизводственноеНУ" Тогда
		    Возврат "Непроизводственное (НУ)";			
		ИначеЕсли ИмяОбъектаМетаданных = "НомерДокументаВводаВЭксплуатацию" Тогда
		    Возврат "Номер документа ввода в эксплуатацию";	
		ИначеЕсли ИмяОбъектаМетаданных = "НомерДокументаВводаВЭксплуатациюРегл" Тогда
		    Возврат "Номер документа ввода в эксплуатацию (Регл)";		
		ИначеЕсли ИмяОбъектаМетаданных = "НомерДокументаМодернизации" Тогда
		    Возврат "Номер документа модернизации";	
		ИначеЕсли ИмяОбъектаМетаданных = "НомерДокументаМодернизацииРегл" Тогда
		    Возврат "Номер документа модернизации (Регл)";			
		ИначеЕсли ИмяОбъектаМетаданных = "НомерДокументаПринятияКУчету" Тогда
		    Возврат "Номер документа принятия к учету";	
		ИначеЕсли ИмяОбъектаМетаданных = "НомерДокументаПринятияКУчетуРегл" Тогда
		    Возврат "Номер документа принятия к учету (Регл)";			
		ИначеЕсли ИмяОбъектаМетаданных = "ОбъемПродукцииРабот" Тогда
		    Возврат "Предполагаемый объем продукции (работ) в натуральных ед.";	
		ИначеЕсли ИмяОбъектаМетаданных = "ОбъемПродукцииРаботБУ" Тогда
		    Возврат "Предполагаемый объем продукции (работ) в натуральных ед. (БУ)";		
		ИначеЕсли ИмяОбъектаМетаданных = "ОбъемПродукцииРаботДляВычисленияАмортизации" Тогда
		    Возврат "Объем продукции (работ) для исчисления амортизации в натуральных ед.";	
		ИначеЕсли ИмяОбъектаМетаданных = "ОбъемПродукцииРаботДляВычисленияАмортизацииБУ" Тогда
		    Возврат "Объем продукции (работ) для исчисления амортизации в натуральных ед. (БУ)";
		ИначеЕсли ИмяОбъектаМетаданных = "ОсновноеСредство" Тогда
		    Возврат "Основное средство";
		ИначеЕсли ИмяОбъектаМетаданных = "ПараметрВыработки" Тогда
		    Возврат "Параметр выработки";	
		ИначеЕсли ИмяОбъектаМетаданных = "ПараметрВыработкиБУ" Тогда
		    Возврат "Параметр выработки (БУ)";
		ИначеЕсли ИмяОбъектаМетаданных = "ПервоначальнаяСтоимость" Тогда
		    Возврат "Первоначальная стоимость";	
		ИначеЕсли ИмяОбъектаМетаданных = "ПервоначальнаяСтоимостьБУ" Тогда
		    Возврат "Первоначальная стоимость (БУ)";
		ИначеЕсли ИмяОбъектаМетаданных = "ПервоначальнаяСтоимостьНУ" Тогда
		    Возврат "Первоначальная стоимость (НУ)";		
		ИначеЕсли ИмяОбъектаМетаданных = "РодительскоеОС" Тогда
		    Возврат "Родительское ОС";
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеВводаВЭксплуатацию" Тогда
		    Возврат "Событие ввода в эксплуатацию";	
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеВводаВЭксплуатациюРегл" Тогда
		    Возврат "Событие ввода в эксплуатацию (Регл)";
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеМодернизации" Тогда
		    Возврат "Событие модернизации";	
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеМодернизацииРегл" Тогда
		    Возврат "Событие модернизации (БУ)";		
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеПринятияКУчету" Тогда
		    Возврат "Событие принятия к учету";	
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеПринятияКУчетуРегл" Тогда
		    Возврат "Событие принятия к учету (Регл)";			
		ИначеЕсли ИмяОбъектаМетаданных = "СпособНачисленияАмортизации" Тогда
		    Возврат "Способ начисления амортизации";	
		ИначеЕсли ИмяОбъектаМетаданных = "СпособНачисленияАмортизацииБУ" Тогда
		    Возврат "Способ начисления амортизации (БУ)";		
		ИначеЕсли ИмяОбъектаМетаданных = "СпособОтраженияРасходовПоАмортизации" Тогда
		    Возврат "Способ отражения расходов по амортизации";	
		ИначеЕсли ИмяОбъектаМетаданных = "СпособОтраженияРасходовПоАмортизацииБУ" Тогда
		    Возврат "Способ отражения расходов по амортизации (БУ)";
		ИначеЕсли ИмяОбъектаМетаданных = "СрокИспользованияДляВычисленияАмортизации" Тогда
		    Возврат "Срок использования для вычисления амортизации, мес.";	
		ИначеЕсли ИмяОбъектаМетаданных = "СрокИспользованияДляВычисленияАмортизацииБУ" Тогда
		    Возврат "Срок использования для вычисления амортизации, мес. (БУ)";
		ИначеЕсли ИмяОбъектаМетаданных = "СрокПолезногоИспользования" Тогда
		    Возврат "Срок полезного использования, мес.";	
		ИначеЕсли ИмяОбъектаМетаданных = "СрокПолезногоИспользованияБУ" Тогда
		    Возврат "Срок полезного использования (БУ), мес.";
		ИначеЕсли ИмяОбъектаМетаданных = "СтоимостьДляВычисленияАмортизации" Тогда
		    Возврат "Стоимость для вычисления амортизации"	
		ИначеЕсли ИмяОбъектаМетаданных = "СтоимостьДляВычисленияАмортизацииБУ" Тогда
		    Возврат "Стоимость для вычисления амортизации (БУ)";
		ИначеЕсли ИмяОбъектаМетаданных = "СуммаПоследнейМодернизации" Тогда
		    Возврат "Сумма последней модернизации";
		ИначеЕсли ИмяОбъектаМетаданных = "СуммаПоследнейМодернизацииБУ" Тогда
		    Возврат "Сумма последней модернизации (БУ)";	
		ИначеЕсли ИмяОбъектаМетаданных = "СчетАмортизацииБУ" Тогда
		    Возврат "Счет амортизации (БУ)";
		ИначеЕсли ИмяОбъектаМетаданных = "СчетУчетаБУ" Тогда
		    Возврат "Счет учета (БУ)";
		ИначеЕсли ИмяОбъектаМетаданных = "ТекущаяСтоимость" Тогда
		    Возврат "Текущая стоимость";	
		ИначеЕсли ИмяОбъектаМетаданных = "ТекущаяСтоимостьБУ" Тогда
		    Возврат "Текущая стоимость (БУ)";			
		ИначеЕсли ИмяОбъектаМетаданных = "БалансоваяСтоимостьНУ" Тогда
		    Возврат "Балансовая стоимость (НУ)";
		ИначеЕсли ИмяОбъектаМетаданных = "ХарактеристикаНоменклатуры" Тогда
		    Возврат "Характеристика номенклатуры";	
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеВводВЭксплуатацию" Тогда
		    Возврат "Событие ввода в эксплуатацию";	
		ИначеЕсли ИмяОбъектаМетаданных = "СобытиеВводВЭксплуатациюРегл" Тогда
		    Возврат "Событие ввода в эксплуатацию (Регл)";	
		Иначе
		    Возврат ИмяОбъектаМетаданных;	
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение,
		|ОС.ВыработкаКоличество,
		|ОС.ГрафикАмортизации,
		|ОС.ДатаВводаВЭксплуатацию,
		|ОС.ДатаПоследнейМодернизации,
		|ОС.ДатаПринятияКУчету,
		|ОС.ЛиквидационнаяСтоимость,
		|ОС.МОЛ,
		|ОС.НазваниеДокументаВводаВЭксплуатацию,
		|ОС.НазваниеДокументаМодернизации,
		|ОС.НазваниеДокументаПринятияКУчету,
		|ОС.НакопленнаяАмортизация,
		|ОС.НачислятьАмортизацию,
		|ОС.Номенклатура,
		|ОС.ХарактеристикаНоменклатуры,
		|ОС.НомерДокументаВводаВЭксплуатацию,
		|ОС.НомерДокументаМодернизации,
		|ОС.НомерДокументаПринятияКУчету,
		|ОС.ОбъемПродукцииРабот,
		|ОС.ОбъемПродукцииРаботДляВычисленияАмортизации,
		|ОС.ПараметрВыработки,
		|ОС.ПервоначальнаяСтоимость,
		|ОС.РодительскоеОС,
		|ОС.СобытиеВводВЭксплуатацию,
		|ОС.СобытиеМодернизации,
		|ОС.СобытиеПринятияКУчету,
		|ОС.СпособНачисленияАмортизации,
		|ОС.СпособОтраженияРасходовПоАмортизации,
		|ОС.СрокИспользованияДляВычисленияАмортизации,
		|ОС.СрокПолезногоИспользования,
		|ОС.СтоимостьДляВычисленияАмортизации,
		|ОС.СуммаПоследнейМодернизации,
		|ОС.ТекущаяСтоимость";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
		|ОС.ВыработкаКоличествоБУ,
		|ОС.ИнвентарныйНомерРегл,
		|ОС.ГрафикАмортизацииБУ,
		|ОС.ДатаВводаВЭксплуатациюРегл,
		|ОС.ДатаПоследнейМодернизацииРегл,
		|ОС.ДатаПринятияКУчетуРегл,
		|ОС.ИнвентарныйНомерРегл,
		|ОС.ЛиквидационнаяСтоимостьБУ,
		|ОС.МОЛРегл,
		|ОС.НазваниеДокументаВводаВЭксплуатациюРегл,
		|ОС.НазваниеДокументаМодернизацииРегл,
		|ОС.НазваниеДокументаПринятияКУчетуРегл,
		|ОС.НакопленнаяАмортизацияБУ,
		|ОС.НачислятьАмортизациюБУ,
		|ОС.НомерДокументаВводаВЭксплуатациюРегл,
		|ОС.НомерДокументаМодернизацииРегл,
		|ОС.НомерДокументаПринятияКУчетуРегл,
		|ОС.ОбъемПродукцииРаботБУ,
		|ОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
		|ОС.ПараметрВыработкиБУ,
		|ОС.ПервоначальнаяСтоимостьБУ,
		|ОС.СобытиеВводВЭксплуатациюРегл,
		|ОС.СобытиеМодернизацииРегл,
		|ОС.СобытиеПринятияКУчетуРегл,
		|ОС.СпособНачисленияАмортизацииБУ,
		|ОС.СпособОтраженияРасходовПоАмортизацииБУ,
		|ОС.СрокИспользованияДляВычисленияАмортизацииБУ,
		|ОС.СрокПолезногоИспользованияБУ,
		|ОС.СтоимостьДляВычисленияАмортизацииБУ,
		|ОС.СуммаПоследнейМодернизацииБУ,
		|ОС.СчетАмортизацииБУ,
		|ОС.СчетУчетаБУ,
		|ОС.ТекущаяСтоимостьБУ";
	
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВУправленческомУчете Тогда
		
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
 	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
		
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		
		Если НЕ Отказ Тогда
			
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль" , мУчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"            , мУчетнаяПолитикаРегл.ЕстьНДС);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Процедура вывода сообщения об ошибке
//
Процедура ОшибкаПроведенияПоСтроке( СтрокаОС, ТекстСообщения, ТипУчета, Отказ, Заголовок)
	
	Отказ = Истина;
	
	Если СокрЛП(ТипУчета) = "(УУ)" ИЛИ НЕ ЗначениеЗаполнено(СтрокаОС.ИнвентарныйНомерРегл) Тогда
		НачалоСообщения = "- строка № " + СтрокаОС.НомерСтроки + ", код ОС <" + СтрокаОС.ОсновноеСредство.Код + "> : ";
	Иначе
		НачалоСообщения = "- строка № " + СтрокаОС.НомерСтроки + ", инв. номер ОС <" + СтрокаОС.ИнвентарныйНомерРегл + "> : ";
	КонецЕсли;
	
	ТекстСообщения = НачалоСообщения + ТекстСообщения;
	
	ОкончаниеСлужебногоСообщения = Найти( ТекстСообщения, "}:");
	Если ОкончаниеСлужебногоСообщения > 0 И Лев(ТекстСообщения, 1) = "{" Тогда
		ТекстСообщения = СокрЛП( Сред( ТекстСообщения, ОкончаниеСлужебногоСообщения + 2));
	КонецЕсли;
	
	#Если Клиент Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,Заголовок);
		
	#КонецЕсли

КонецПроцедуры // ОшибкаПроведенияПоСтроке()

// Процедура проверяет корректность заполнения реквизитов шапки документа
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтрРекв = "Организация, Подразделение, ПодразделениеОрганизации";
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, СтрРекв,СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета);
					
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(СтрРекв), Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабЧасти(РежимПроведения, ТабОС, СтруктураШапкиДокумента, Отказ, Заголовок);

	ОбязательныеРеквизиты = "ОсновноеСредство";

	// Обязательные реквизиты для отражения в УУ.
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ОбязательныеРеквизиты = ОбязательныеРеквизиты 
		                      + ", ДатаПринятияКУчету,
		                        |СобытиеПринятияКУчету,
		                        |ПервоначальнаяСтоимость,
		                        |";
							  
	КонецЕсли;
															
															
	// Обязательные реквизиты для отражения в регл. учете.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	 
		ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ДатаПринятияКУчетуРегл, СобытиеПринятияКУчетуРегл";
	 
	КонецЕсли;
	
	// Обязательные реквизиты для отражения в БУ.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ИнвентарныйНомерРегл, ПервоначальнаяСтоимостьБУ";
							  
	КонецЕсли;

	// Проверка заполнения обязательных реквизитов.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(ОбязательныеРеквизиты), Отказ, Заголовок);
		
	Если НЕ Отказ Тогда
	
		Для Каждого СтрокаОС Из ТабОС Цикл
			ПроверкаПоСтроке(СтрокаОС, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть проведен!");
	КонецЕсли;

	мФлагФормированияДвиженийПоВыработке = Истина;

КонецПроцедуры // ПроверитьЗаполнениеТабЧасти()

// Проверка заполнения реквизитов в строке таб. части
//
Функция ПроверкаПоСтроке(СтрокаОС, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	УпрУчет = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	БухУчет = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	НалУчет = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНалогНаПрибыль;
	НалУчетОбщ = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль ИЛИ СтруктураШапкиДокумента.ЕстьНДС);
	
	ОбязательныеРеквизиты = "";
	
	// Обязательные реквизиты для отражения в УУ.
	Если УпрУчет Тогда
		
		ВводВЭксплуатацию = Новый Структура("ДатаВводаВЭксплуатацию, СобытиеВводВЭксплуатацию, НомерДокументаВводаВЭксплуатацию, НазваниеДокументаВводаВЭксплуатацию");
		Для Каждого ТекРеквизит Из ВводВЭксплуатацию Цикл
			Если ЗначениеЗаполнено(СтрокаОС[ТекРеквизит.Ключ]) тогда
				ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ДатаВводаВЭксплуатацию,СобытиеВводВЭксплуатацию";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ТекущаяСтоимость";

		Если СтрокаОС.НачислятьАмортизацию Тогда
			
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СпособНачисленияАмортизации, СпособОтраженияРасходовПоАмортизации";
		
			Если  СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный
			ИЛИ СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный
			ИЛИ СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка Тогда
			
				ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СрокПолезногоИспользования";
				
			ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка Тогда
					
				ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СрокПолезногоИспользования, ЛиквидационнаяСтоимость";
					
			ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда
				
				ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ГрафикАмортизации";
				
			ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
				
				ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ПараметрВыработки, ОбъемПродукцииРабот";
				
			КонецЕсли;
		
		КонецЕсли;	
		
	КонецЕсли;
	
	// Обязательные реквизиты для отражения в БУ.
	Если БухУчет или НалУчет или НалУчетОбщ тогда
		
		ВводВЭксплуатацию = Новый Структура("ДатаВводаВЭксплуатациюРегл, СобытиеВводВЭксплуатациюРегл, НомерДокументаВводаВЭксплуатациюРегл, НазваниеДокументаВводаВЭксплуатациюРегл");
		Для Каждого ТекРеквизит Из ВводВЭксплуатацию Цикл
			Если ЗначениеЗаполнено(СтрокаОС[ТекРеквизит.Ключ]) тогда
				ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ДатаВводаВЭксплуатациюРегл,СобытиеВводВЭксплуатациюРегл";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ТекущаяСтоимостьБУ, СчетУчетаБУ";
		
		Если СтрокаОС.НачислятьАмортизациюБУ Тогда
		
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СпособНачисленияАмортизацииБУ, СпособОтраженияРасходовПоАмортизацииБУ, СчетАмортизацииБУ";
			
			Если  СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный
				ИЛИ СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный
				ИЛИ СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка
				ИЛИ СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка Тогда
				
				ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СрокПолезногоИспользованияБУ";
				
				
			ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
				
				ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ПараметрВыработкиБУ, ОбъемПродукцииРаботБУ";
				
			КонецЕсли;  
			
		КонецЕсли;	
		
		Если НалУчетОбщ Тогда
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", НалоговоеНазначение";
		КонецЕсли;	
		
		// Обязательные реквизиты для отражения в НУ.
		Если НалУчет Тогда
			
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ПервоначальнаяСтоимостьНУ";
				
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", НалоговаяГруппаОС";
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", БалансоваяСтоимостьНУ";
			
		КонецЕсли;
			
	КонецЕсли;
	
	//Проверка реквизитов дополнительной группы упр
	Если УпрУчет Тогда
		Модернизация = Новый Структура("ДатаПоследнейМодернизации,
			|СобытиеМодернизации,
			|НомерДокументаМодернизации,
			|НазваниеДокументаМодернизации");
		Модернизация.Вставить("СуммаПоследнейМодернизации");
		
		Для Каждого ТекРеквизит Из Модернизация Цикл
			
			Если ЗначениеЗаполнено(СтрокаОС[ТекРеквизит.Ключ]) тогда
				
				ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ДатаПоследнейМодернизации,СобытиеМодернизации,СтоимостьДляВычисленияАмортизации";
				
				Если  СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный
				ИЛИ СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный
				ИЛИ СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка
				ИЛИ СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка Тогда
				 
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СрокИспользованияДляВычисленияАмортизации";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ОбъемПродукцииРаботДляВычисленияАмортизации";
					
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Проверка реквизитов дополнительной группы регл
	Если БухУчет Тогда
		Модернизация = Новый Структура("ДатаПоследнейМодернизацииРегл,
			|СобытиеМодернизацииРегл,
			|НомерДокументаМодернизацииРегл,
			|НазваниеДокументаМодернизацииРегл");
			
		Модернизация.Вставить("СуммаПоследнейМодернизацииБУ");
		
		Для Каждого ТекРеквизит Из Модернизация Цикл
			
			Если ЗначениеЗаполнено(СтрокаОС[ТекРеквизит.Ключ]) тогда
				
				ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ДатаПоследнейМодернизацииРегл,СобытиеМодернизацииРегл,СтоимостьДляВычисленияАмортизацииБУ";
				
				Если  СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный
				ИЛИ СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный
				ИЛИ СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка
				ИЛИ СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка Тогда
				 
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СрокИспользованияДляВычисленияАмортизацииБУ";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ОбъемПродукцииРаботДляВычисленияАмортизацииБУ";
					
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	РеквизитыДляПроверки = Новый Структура(ОбязательныеРеквизиты);
	
	// Цикл по проверяемым полям
	Для каждого КлючЗначение Из РеквизитыДляПроверки Цикл
		
		Значение = СтрокаОС[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда // надо ругаться
			
			ПредставлениеРеквизита = Ссылка.Метаданные().ТабличныеЧасти.ОС.Реквизиты[КлючЗначение.Ключ].Представление();
			
			Если Прав( КлючЗначение.Ключ, 2) = "БУ" тогда
				ВидУчета = "(БУ) ";
			ИначеЕсли Прав( КлючЗначение.Ключ, 2) = "НУ" тогда
				ВидУчета = "(НУ) ";
			ИначеЕсли Прав( КлючЗначение.Ключ, 4) = "Регл" тогда
				ВидУчета = "(Регл) ";
			Иначе
				ВидУчета = "(УУ) ";
			КонецЕсли;
			
			СтрокаСообщения = ВидУчета+ "не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			
			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения, ВидУчета, Отказ, Заголовок);
			
			Если КлючЗначение.Ключ = "СобытиеВводВЭксплуатацию"
			 ИЛИ КлючЗначение.Ключ = "СобытиеВводВЭксплуатациюРегл"
			 ИЛИ КлючЗначение.Ключ = "СобытиеМодернизации"
			 ИЛИ КлючЗначение.Ключ = "СобытиеМодернизацииРегл"
			 ИЛИ КлючЗначение.Ключ = "СчетУчетаБУ"
			 ИЛИ КлючЗначение.Ключ = "СчетАмортизацииБУ" Тогда
				Отказ = Истина;
				Сообщить("Документ не может быть проведен!", СтатусСообщения.БезСтатуса);
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	Если БухУчет И УпрУчет
	   И СтрокаОС.ПараметрВыработки   = СтрокаОС.ПараметрВыработкиБУ
	   И СтрокаОС.ВыработкаКоличество <> СтрокаОС.ВыработкаКоличествоБУ Тогда
		СтрокаСообщения = "При одинаковых параметрах выработки по упр. и бух. учеты количество должно совпадать.";
		ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения, "(УУ)", Отказ, Заголовок);
		мФлагФормированияДвиженийПоВыработке = Ложь;
	КонецЕсли;

КонецФункции // ПроверкаПоСтроке()

// Функция определяет есть ли данное ОС в таблице.
//
Функция ПроверкаДублированияОС( ТабОС, ТекСтрока, Отказ = Ложь, Заголовок = "")
	
	СтруктПоиска = Новый Структура( "ОсновноеСредство", ТекСтрока.ОсновноеСредство);
	Найдено = ТабОС.НайтиСтроки( СтруктПоиска);
	Если Найдено.Количество() <= 1 Тогда
		Возврат Ложь;
	Иначе
		СписокСтрок = "";
		Для К = 0 По Найдено.ВГраница() Цикл
			Если НЕ Найдено[К].Дубль И НЕ ТекСтрока.НомерСтроки = Найдено[К].НомерСтроки Тогда
				Найдено[К].Дубль = Истина; // Уже сообщали, чтобы избежать повторного сообщения
				ТекСтрока.Дубль  = Истина;
				СписокСтрок = СписокСтрок + ", " + Найдено[К].НомерСтроки;
			КонецЕсли;
		КонецЦикла;
		Если Не ПустаяСтрока(СписокСтрок) Тогда
			СписокСтрок = "" + ТекСтрока.НомерСтроки + СписокСтрок;			
			ОбщегоНазначения.СообщитьОбОшибке( "Основное средство """ + ТекСтрока.ОсновноеСредство + """ повторяется в строках №№ " + СписокСтрок, Отказ, Заголовок);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ПроверкаДублированияОС()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА ПО РЕГИСТРАМ

// Процедура формирования движений по регистру СтоимостьОС
//
Процедура ДвижениеПоРегиструАмортизацияУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СтоимостьОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = Дата;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Стоимость        = СтрокаОС.ТекущаяСтоимость;
		НоваяСтрока.Амортизация      = СтрокаОС.НакопленнаяАмортизация;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструАмортизацияУпр()

// Процедура формирования движений по регистру СтоимостьОС бух.
//
Процедура ДвижениеПоРегиструАмортизацияБух( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СтоимостьОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = Дата;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		
		НоваяСтрока.Стоимость        = ?( НЕ ЗначениеЗаполнено( СтрокаОС.СчетУчетаБУ),       0, СтрокаОС.ТекущаяСтоимостьБУ);
		НоваяСтрока.Амортизация      = ?( НЕ ЗначениеЗаполнено( СтрокаОС.СчетАмортизацииБУ), 0, СтрокаОС.НакопленнаяАмортизацияБУ);
		
		НоваяСтрока.СтоимостьНУ      = ?( НЕ ЗначениеЗаполнено( СтрокаОС.СчетУчетаБУ),       0, СтрокаОС.БалансоваяСтоимостьНУ);
		НоваяСтрока.АмортизацияНУ    = ?( НЕ ЗначениеЗаполнено( СтрокаОС.СчетАмортизацииБУ), 0, СтрокаОС.НакопленнаяАмортизацияНУ);
			
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструАмортизацияБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ВыработкаОС
//
Процедура ДвижениеПоРегиструВыработкаОС( ТабОС, СтруктураШапкиДокумента, Заголовок)
	
	Если мФлагФормированияДвиженийПоВыработке Тогда
		
		НаборДвижений   = Движения.ВыработкаОС;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		Для Каждого СтрокаОС Из ТабОС Цикл
			
			Если СтрокаОС.ВыработкаКоличество > 0
			   И СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
			   И ЗначениеЗаполнено(СтрокаОС.ПараметрВыработки) Тогда
			   
				НоваяСтрока = ТаблицаДвижений.Добавить();
				НоваяСтрока.Период            = Дата;
				НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
				НоваяСтрока.ПараметрВыработки = СтрокаОС.ПараметрВыработки;
				НоваяСтрока.Количество        = СтрокаОС.ВыработкаКоличество;
				
			КонецЕсли;
			
			Если СтрокаОС.ВыработкаКоличествоБУ > 0
			   И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
			   И ЗначениеЗаполнено(СтрокаОС.ПараметрВыработкиБУ) Тогда
			   
				Если СтрокаОС.ПараметрВыработкиБУ <> СтрокаОС.ПараметрВыработки тогда 				
					НоваяСтрока = ТаблицаДвижений.Добавить();
					НоваяСтрока.Период            = Дата;
					НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
					НоваяСтрока.ПараметрВыработки = СтрокаОС.ПараметрВыработкиБУ;
					НоваяСтрока.Количество        = СтрокаОС.ВыработкаКоличествоБУ;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.ДобавитьДвижение();
	
	КонецЕсли;
	
КонецПроцедуры // ДвижениеПоРегиструВыработкаОС()

// Процедура формирования движений по регистру НоменклатураОС
//
Процедура ДвижениеПоРегиструНоменклатураОС( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.НоменклатураОсновныхСредств;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.Номенклатура) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Номенклатура     = СтрокаОС.Номенклатура;
			НоваяСтрока.Характеристика   = СтрокаОС.ХарактеристикаНоменклатуры;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНоменклатураОС()

// Процедура формирования движений по регистру Состав ОС
//
Процедура ДвижениеПоРегиструСоставОС( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СоставОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.РодительскоеОС) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ВСоставе         = СтрокаОС.РодительскоеОС;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСоставОС()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ПервоначальныеСведенияОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчету;
		НоваяСтрока.Активность                  = Истина;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимость;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизации;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработки;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСУпр()

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС бух.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.Активность                  = Истина;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимостьБУ;
		НоваяСтрока.ИнвентарныйНомер            = СтрокаОС.ИнвентарныйНомерРегл;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизацииБУ;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработкиБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС нал.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	НалУчет = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		      И СтруктураШапкиДокумента.ЕстьНалогНаПрибыль;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		 
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.Активность                  = Истина;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НалоговаяГруппаОС		    = СтрокаОС.НалоговаяГруппаОС;
		
		НоваяСтрока.ПервоначальнаяСтоимостьНУ   = СтрокаОС.ПервоначальнаяСтоимостьНУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Местонахождение ОС.
//
Процедура ДвижениеПоРегиструМестонахождениеОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.МестонахождениеОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = Дата;
		НоваяСтрока.Активность       = Истина;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.МОЛ              = СтрокаОС.МОЛ;
		НоваяСтрока.Местонахождение  = СтруктураШапкиДокумента.Подразделение;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСУпр()

// Процедура формирования движений по регистру Местонахождение ОС бух.
//
Процедура ДвижениеПоРегиструМестонахождениеОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.МестонахождениеОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
			
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = Дата;
		НоваяСтрока.Активность                  = Истина;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.МОЛ              = СтрокаОС.МОЛРегл;
		НоваяСтрока.Местонахождение  = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Графики амортизации ОС.
//
Процедура ДвижениеПоРегиструГрафикиАмортизацииОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ГрафикиАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.ГрафикАмортизации) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Активность        = Истина;
			НоваяСтрока.Период            = Дата;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ГрафикАмортизации = СтрокаОС.ГрафикАмортизации;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструГрафикиАмортизацииОСУпр()

// Процедура формирования движений по регистру Графики амортизации ОС бух.
//
Процедура ДвижениеПоРегиструГрафикиАмортизацииОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.ГрафикАмортизацииБУ) Тогда
		   
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = Дата;
			НоваяСтрока.Активность        = Истина;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ГрафикАмортизации = СтрокаОС.ГрафикАмортизацииБУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструГрафикиАмортизацииОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Начисление амортизации.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.НачислениеАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                             = Дата;
		НоваяСтрока.Активность                         = Истина;
		НоваяСтрока.ОсновноеСредство                   = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию               = СтрокаОС.НачислятьАмортизацию;
		НоваяСтрока.НачислятьАмортизациюВТекущемМесяце = Ложь;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииУпр()

// Процедура формирования движений по регистру Начисление амортизации бух.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период               = Дата;
		НоваяСтрока.Активность           = Истина;
		НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииБух()

// Процедура формирования движений по регистру Начисление амортизации нал.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период               = Дата;
		НоваяСтрока.Активность           = Истина;
		НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюНУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ПараметрыАмортизации ОС.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ПараметрыАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период =  ?( НЕ ЗначениеЗаполнено( СтрокаОС.ДатаПоследнейМодернизации),
										СтрокаОС.ДатаПринятияКУчету, 
										?( СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаПоследнейМодернизации,
											Мин( СтрокаОС.ДатаПринятияКУчету + 2, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
											СтрокаОС.ДатаПоследнейМодернизации));
			
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			
			НоваяСтрока.СрокПолезногоИспользования        = СтрокаОС.СрокПолезногоИспользования;
			НоваяСтрока.ОбъемПродукцииРабот               = СтрокаОС.ОбъемПродукцииРабот;
			НоваяСтрока.ЛиквидационнаяСтоимость           = СтрокаОС.ЛиквидационнаяСтоимость;
			
			НоваяСтрока.ПрименитьВТекущемМесяце = Ложь;
			
			Если НЕ ЗначениеЗаполнено( СтрокаОС.СрокИспользованияДляВычисленияАмортизации) Тогда
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокПолезногоИспользования;;
			Иначе
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизации;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено( СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРабот;
			Иначе
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизации;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено( СтрокаОС.СтоимостьДляВычисленияАмортизации) Тогда
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.ТекущаяСтоимость;
			Иначе
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.СтоимостьДляВычисленияАмортизации;
			КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииУпр()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС бух.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период =  ?( НЕ ЗначениеЗаполнено( СтрокаОС.ДатаПоследнейМодернизацииРегл),
									СтрокаОС.ДатаПринятияКУчетуРегл, 
									?( СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
										Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 2, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
										СтрокаОС.ДатаПоследнейМодернизацииРегл));
		НоваяСтрока.Активность       = Истина;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		
		НоваяСтрока.СрокПолезногоИспользования = СтрокаОС.СрокПолезногоИспользованияБУ;
		НоваяСтрока.ОбъемПродукцииРабот        = СтрокаОС.ОбъемПродукцииРаботБУ;
		НоваяСтрока.ЛиквидационнаяСтоимость    = СтрокаОС.ЛиквидационнаяСтоимостьБУ;
		
		Если НЕ ЗначениеЗаполнено( СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ) Тогда
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокПолезногоИспользованияБУ;;
			Иначе
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ;
			КонецЕсли;
		Если НЕ ЗначениеЗаполнено( СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ) Тогда
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботБУ;
			Иначе
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
			КонецЕсли;
		Если НЕ ЗначениеЗаполнено( СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ) Тогда
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.ТекущаяСтоимостьБУ;
			Иначе
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ;
			КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииБух()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС нал.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПараметрыАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период =  ?( НЕ ЗначениеЗаполнено( СтрокаОС.ДатаПоследнейМодернизацииРегл),
									СтрокаОС.ДатаПринятияКУчетуРегл, 
									?( СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
										Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 2, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
										СтрокаОС.ДатаПоследнейМодернизацииРегл));
		НоваяСтрока.Активность       = Истина;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		
		НоваяСтрока.СрокПолезногоИспользования   				= СтрокаОС.СрокИспользованияДляВычисленияАмортизацииНУ;
		НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииНУ;
		НоваяСтрока.СтоимостьДляВычисленияАмортизации 			= СтрокаОС.СтоимостьДляВычисленияАмортизацииНУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру СобытияОС.
//
Процедура ДвижениеПоРегиструСобытияОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СобытияОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтрокаОС.ДатаПринятияКУчету;
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Событие		      = СтрокаОС.СобытиеПринятияКУчету;
		НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаПринятияКУчету;
		НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаПринятияКУчету;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатацию) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаВводаВЭксплуатацию,
												Мин( СтрокаОС.ДатаПринятияКУчету + 1, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
												СтрокаОС.ДатаВводаВЭксплуатацию);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеВводВЭксплуатацию;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаВводаВЭксплуатацию;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаВводаВЭксплуатацию;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаПоследнейМодернизации) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаПоследнейМодернизации,
												Мин( СтрокаОС.ДатаПринятияКУчету + 2, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
												СтрокаОС.ДатаПоследнейМодернизации);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеМодернизации;
			НоваяСтрока.СуммаЗатрат       = СтрокаОС.СуммаПоследнейМодернизации;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаМодернизации;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаМодернизации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСобытияОСУпр()

// Процедура формирования движений по регистру  СобытияОСорганизаций.
//
Процедура ДвижениеПоРегиструСобытияОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СобытияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтрокаОС.ДатаПринятияКУчетуРегл;
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Событие           = СтрокаОС.СобытиеПринятияКУчетуРегл;
		НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаПринятияКУчетуРегл;
		НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаПринятияКУчетуРегл;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатациюРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаВводаВЭксплуатациюРегл,
												Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 1, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
												СтрокаОС.ДатаВводаВЭксплуатациюРегл);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеВводВЭксплуатациюРегл;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаВводаВЭксплуатациюРегл;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаВводаВЭксплуатациюРегл;
			
		КонецЕсли;

		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
												Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 2, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
												СтрокаОС.ДатаПоследнейМодернизацииРегл);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеМодернизацииРегл;
			НоваяСтрока.СуммаЗатратБУ     = СтрокаОС.СуммаПоследнейМодернизацииБУ;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаМодернизацииРегл;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаМодернизацииРегл;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);

КонецПроцедуры // ДвижениеПоРегиструСобытияОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру СостоянияОС.
//
Процедура ДвижениеПоРегиструСостоянияОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СостоянияОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ПринятоКУчету;
		НоваяСтрока.ДатаСостояния	  = СтрокаОС.ДатаПринятияКУчету;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатацию) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
			НоваяСтрока.ДатаСостояния	  = ?(СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаВводаВЭксплуатацию,
												Мин( СтрокаОС.ДатаПринятияКУчету + 1, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
												СтрокаОС.ДатаВводаВЭксплуатацию);
		КонецЕсли;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСостоянияОСУпр()

// Процедура формирования движений по регистру СостоянияОСОрганизаций.
//
Процедура ДвижениеПоРегиструСостоянияОСБух( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СостоянияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ПринятоКУчету;
		НоваяСтрока.ДатаСостояния	  = СтрокаОС.ДатаПринятияКУчетуРегл;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатациюРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
			НоваяСтрока.ДатаСостояния	  = ?(СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаВводаВЭксплуатациюРегл,
												Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 1, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
												СтрокаОС.ДатаВводаВЭксплуатациюРегл);
		КонецЕсли;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСостоянияОСУпр()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Сопособы отражения расходов по амортизации ОС.
//
Процедура ДвижениеПоРегиструСпособыОтраженияРасходовУпр( ТабОС, СтруктураШапкиДокумента);

	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизации) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизации;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияРасходовУпр()

// Процедура формирования движений по регистру Сопособы отражения расходов по амортизации ОС бух.
//
Процедура ДвижениеПоРегиструСпособыОтраженияРасходовБух( ТабОС, СтруктураШапкиДокумента);

	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ) Тогда
		   
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияРасходовБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Счета учета ОС бух.
//
Процедура ДвижениеПоРегиструСчетаУчетаОСБух(ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СчетаБухгалтерскогоУчетаОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                    = СтрокаОС.ДатаПринятияКУчетуРегл;
 		НоваяСтрока.Активность                = Истина;
		НоваяСтрока.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация               = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета                 = СтрокаОС.СчетУчетаБУ;
		НоваяСтрока.СчетНачисленияАмортизации = СтрокаОС.СчетАмортизацииБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСчетаУчетаОСБух()

// Процедура формирования движений по регистру НалоговыеНазначенияОС нал.
//
Процедура ДвижениеПоРегиструНалоговыеНазначенияОСНал(ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.НалоговыеНазначенияОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период 				= Дата;
 		НоваяСтрока.Активность 			= Истина;
		НоваяСтрока.ОсновноеСредство 	= СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация 		= СтруктураШапкиДокумента.Организация;
		НоваяСтрока.НалоговоеНазначение = СтрокаОС.НалоговоеНазначение;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСчетаУчетаОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирование проводок.
//
Процедура ФормированиеПроводокБух( ТабОС, СтруктураШапкиДокумента)
	
	Операция = Движения.Хозрасчетный;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.СчетУчетаБУ) Тогда
				
				// Ввод текущей стоимости ОС.
				Проводка = Операция.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Ввод остатков ОС (текущая стоимость)";
				Проводка.Сумма       = СтрокаОС.ТекущаяСтоимостьБУ;
				
				Проводка.СуммаНУДт   = СтрокаОС.БалансоваяСтоимостьНУ;
				Проводка.НалоговоеНазначениеДт   = СтрокаОС.НалоговоеНазначение;
				
				Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
			КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОС.СчетАмортизацииБУ)
			   И (НЕ СтрокаОС.НакопленнаяАмортизацияБУ = 0 ИЛИ НЕ СтрокаОС.НакопленнаяАмортизацияНУ = 0) Тогда
				
				// Ввод накопленной амортизации.
				Проводка = Операция.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Ввод остатков ОС (накопленная амортизация)";
				Проводка.Сумма       = СтрокаОС.НакопленнаяАмортизацияБУ;
				
				Проводка.СуммаНУКт   = СтрокаОС.НакопленнаяАмортизацияНУ;
				Проводка.НалоговоеНазначениеКт   = СтрокаОС.НалоговоеНазначение;
				
				Проводка.СчетКт = СтрокаОС.СчетАмортизацииБУ;
				БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
			КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ФормированиеПроводокБух

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистрам.
//
Процедура ДвиженияПоРегистрам( ТабОС, СтруктураШапкиДокумента, Заголовок)
	
	// Движение по регистрам общим для упр. и регл. учета
	ДвижениеПоРегиструВыработкаОС( ТабОС, СтруктураШапкиДокумента, Заголовок);
	
	// Движение по упр. регистрам
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ДвижениеПоРегиструНоменклатураОС( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСоставОС      ( ТабОС, СтруктураШапкиДокумента);
		
		ДвижениеПоРегиструАмортизацияУпр             ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПервоначальныеСведенияОСУпр( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструМестонахождениеОСУпр       ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструГрафикиАмортизацииОСУпр    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструНачислениеАмортизацииУпр   ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПараметрыАмортизацииУпр    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСобытияОСУпр               ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСостоянияОСУпр             ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСпособыОтраженияРасходовУпр( ТабОС, СтруктураШапкиДокумента);
		
	КонецЕсли;
	
	// Движение по регл. регистрам
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ДвижениеПоРегиструАмортизацияБух             ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПервоначальныеСведенияОСБух( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструМестонахождениеОСБух       ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструГрафикиАмортизацииОСБух    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструНачислениеАмортизацииБух   ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПараметрыАмортизацииБух    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСобытияОСБух               ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСостоянияОСБух             ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСпособыОтраженияРасходовБух( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСчетаУчетаОСБух            ( ТабОС, СтруктураШапкиДокумента);
		
		ФормированиеПроводокБух( ТабОС, СтруктураШапкиДокумента);
			
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		   И СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		   
			ДвижениеПоРегиструПервоначальныеСведенияОСНал(ТабОС, СтруктураШапкиДокумента);
		   
			ДвижениеПоРегиструПараметрыАмортизацииНал(ТабОС, СтруктураШапкиДокумента);
			ДвижениеПоРегиструНачислениеАмортизацииНал(ТабОС, СтруктураШапкиДокумента);
			ДвижениеПоРегиструНалоговыеНазначенияОСНал(ТабОС, СтруктураШапкиДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Неопределено,           // ТабличнаяЧастьТовары
			Неопределено,       	// ТабличнаяЧастьВозвратнаяТара
			Неопределено,           // ТабличнаяЧастьУслуги
			ОС,         	        // ТабличнаяЧастьОборудование
			Неопределено, 			// ТабличнаяЧастьОбъектыСтроительства
			Неопределено  			// ТабличнаяЧастьБланкиСтрогогоУчета
		);
	КонецЕсли;

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТабОС = ОС.Выгрузить();
	
	// Проверим правильность заполнения документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабЧасти(РежимПроведения, ТабОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьПринятияКУчетуОС(СтрокаОС.ОсновноеСредство, СтруктураШапкиДокумента.Дата, Отказ);
		УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьПринятияКУчетуОС(СтрокаОС.ОсновноеСредство, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	КонецЦикла;
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(ТабОС, СтруктураШапкиДокумента, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мТабличноеПоле 					= Неопределено;
