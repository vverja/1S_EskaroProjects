////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" ,		Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеОсновногоЗаработка.Дата,
	|	РаспределениеОсновногоЗаработка.Организация,
	|	ВЫБОР
	|		КОГДА РаспределениеОсновногоЗаработка.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА РаспределениеОсновногоЗаработка.Организация
	|		ИНАЧЕ РаспределениеОсновногоЗаработка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	РаспределениеОсновногоЗаработка.Период,
	|	РаспределениеОсновногоЗаработка.Ссылка
	|ИЗ
	|	Документ.ВводРаспределенияОсновногоЗаработкаРаботниковОрганизации КАК РаспределениеОсновногоЗаработка
	|ГДЕ
	|	РаспределениеОсновногоЗаработка.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Период", Период);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаботников.Сотрудник,
	|	СписокРаботников.Сотрудник.Наименование,
	|	СписокРаботников.Назначение,
	|	СписокРаботников.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА СписокРаботников.Сотрудник.Организация = &Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	СуществующиеДвиженияРаспределение.РегистраторПредставление КАК КонфликтныйДокументРаспределения
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаспределениеНачислений.Сотрудник КАК Сотрудник,
	|		РаспределениеНачислений.Назначение КАК Назначение,
	|		СУММА(РаспределениеНачислений.ДоляСпособаОтражения) КАК ДоляСпособаОтражения,
	|		МИНИМУМ(РаспределениеНачислений.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ВводРаспределенияОсновногоЗаработкаРаботниковОрганизации.РаспределениеНачислений КАК РаспределениеНачислений
	|	ГДЕ
	|		РаспределениеНачислений.Ссылка = &ДокументСсылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РаспределениеНачислений.Сотрудник,
	|		РаспределениеНачислений.Назначение
	|	) КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СуществующееРаспределение.Сотрудник КАК Сотрудник,
	|			ПРЕДСТАВЛЕНИЕ(СуществующееРаспределение.Регистратор) КАК РегистраторПредставление
	|		ИЗ
	|			РегистрСведений.РаспределениеОсновногоЗаработкаРаботниковОрганизаций КАК СуществующееРаспределение
	|		ГДЕ
	|			СуществующееРаспределение.ПериодРегистрации = &Период
	|			И СуществующееРаспределение.Организация = &Организация) КАК СуществующиеДвиженияРаспределение
	|		ПО СписокРаботников.Сотрудник = СуществующиеДвиженияРаспределение.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизацииРаспределение()

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаспределения.Сотрудник,
	|	СписокРаспределения.Назначение,
	|	СписокРаспределения.СпособОтраженияВБухучете,
	|	СписокРаспределения.ДоляСпособаОтражения,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СчетВыбран,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеОтражатьВБухучете,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтражениеНачисленийПоУмолчанию,
	|	ВЫБОР
	|		КОГДА СписокРаспределения.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПустойСпособОтражения,	
	|	СписокРаспределения.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВводРаспределенияОсновногоЗаработкаРаботниковОрганизации.РаспределениеНачислений КАК СписокРаспределения
	|ГДЕ
	|	СписокРаспределения.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизацииРаспределение()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизацииРаспределениеИтоги()

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаспределения.Назначение,
	|	СУММА(СписокРаспределения.ДоляСпособаОтражения) КАК ДоляСпособаОтражения
	|ИЗ
	|	Документ.ВводРаспределенияОсновногоЗаработкаРаботниковОрганизации.РаспределениеНачислений КАК СписокРаспределения
	|ГДЕ
	|	СписокРаспределения.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокРаспределения.Назначение";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизацииРаспределение()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;	
		
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Период) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан период!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//								  из результата запроса
//	Отказ						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Распределение основного заработка"": ";
									
									
	Если ВыборкаПоСтрокамДокумента.ПустойСпособОтражения Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан способ отражения!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка способа отражения
	Если ВыборкаПоСтрокамДокумента.НеОтражатьВБухучете Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "заданный способ отражения нельзя указывать в документе!", Отказ, Заголовок);
	ИначеЕсли Не ВыборкаПоСтрокамДокумента.СчетВыбран Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "в способе отражения не задан счет дебета и/или кредита!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//								  из результата запроса
//	Отказ						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеДанныхПоРаботнику(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ЕстьЕНВД)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Распределение основного заработка"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник и организация
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + ВыборкаПоСтрокамДокумента.СотрудникНаименование+ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса(" работает в другой организации!"), Отказ, Заголовок);
	КонецЕсли;

////	Если ВыборкаПоСтрокамДокумента.ИтогоОтражено <> 100 Тогда
////		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "суммарная доля распределения начислений по сотруднику не равна 100%!", Отказ, Заголовок);
////	КонецЕсли;
////	
	// Движения в регистре распределения
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйДокументРаспределения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "на период "+ Формат(ВыборкаПоШапкеДокумента.Период, "ДФ='ММММ гггг'") + " распределение основного заработка уже зарегистрировано документом " + Символы.ПС + ВыборкаПоСтрокамДокумента.КонфликтныйДокументРаспределения + "!", Отказ, Заголовок);
	КонецЕсли;

	
КонецПроцедуры // ПроверитьЗаполнениеДанныхПоРаботнику()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//	ВыборкаПоШапкеДокумента					- выборка из результата запроса по шапке документа,
//	ИмяРегистра								- строка, имя регистра по которому делаем движения
//	СтруктураПараметров						- структура параметров проведения,
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, ИмяРегистра)
	
	Движение = Движения[ИмяРегистра].Добавить();
	
	Если ИмяРегистра = "РаспределениеОсновногоЗаработкаРаботниковОрганизаций" Тогда	
		
		// Измерения
		Движение.ПериодРегистрации			= ВыборкаПоШапкеДокумента.Период;
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Назначение					= ВыборкаПоРаботникиОрганизации.Назначение;
		Движение.СпособОтраженияВБухучете 	= ВыборкаПоРаботникиОрганизации.СпособОтраженияВБухучете;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.ДоляСпособаОтражения		= ВыборкаПоРаботникиОрганизации.ДоляСпособаОтражения;
		
	КонецЕсли; 
	
		
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		РезультатЗапросаПоРаботникиИтоги = СформироватьЗапросПоРаботникиОрганизацииРаспределениеИтоги();
		ВыборкаПоРаботникиОрганизацииИтоги = РезультатЗапросаПоРаботникиИтоги.Выбрать();

		Пока ВыборкаПоРаботникиОрганизацииИтоги.Следующий() Цикл
			Если ВыборкаПоРаботникиОрганизацииИтоги.ДоляСпособаОтражения <> 100 Тогда
				Сообщить("По сотруднику "+ВыборкаПоРаботникиОрганизацииИтоги.Назначение.Наименование+" общий процент распределения не равен 100%!", СтатусСообщения.Внимание);
			КонецЕсли;	
		КонецЦикла;	
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// получим реквизиты табличной части, сгруппированные по работникам
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента);
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать();
			
			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизацииРаспределение();
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать();
			
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);
				
				Если Не Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, "РаспределениеОсновногоЗаработкаРаботниковОрганизаций");
				КонецЕсли;
				
			КонецЦикла;
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли; 
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(РаботникиОрганизации);

КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

