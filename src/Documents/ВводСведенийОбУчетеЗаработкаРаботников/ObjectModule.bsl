////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// предназначена для заполнения табличной части 
// Параметры:
//	Основание - передается объект-основание
// Возвращаемое значение: нет
//
Процедура ЗаполнитьПоОснованию(Основание) Экспорт
	
	ОснованиеПрием = (ТипЗнч(Основание) = Тип("ДокументСсылка.ПриемНаРаботу"));
	Для Каждого Строка Из Основание.Работники Цикл
		
		НоваяСтрока = Работники.Добавить();
		НоваяСтрока.Сотрудник			= Строка.Сотрудник;
		Если ОснованиеПрием Тогда
			НоваяСтрока.ДатаИзменения	= Строка.ДатаПриема;
		Иначе
			НоваяСтрока.ДатаИзменения	= Строка.ДатаНачала;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  // ЗаполнитьПоОснованию

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетЗаработкаРаботников.Дата,
	|	УчетЗаработкаРаботников.Ссылка
	|ИЗ
	|	Документ.ВводСведенийОбУчетеЗаработкаРаботников КАК УчетЗаработкаРаботников
	|ГДЕ
	|	УчетЗаработкаРаботников.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	// Описание текста запроса:
	// 1. Выборка "УчетЗаработкаРаботниковРаботники": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением реквизита "Сотрудник"
	// 3. Выборка "ПоследующиеДвижение": 
	//		В регистре УчетЗаработкаРаботников ищем движения, следующие за теми, которые мы 
	//      собираемся записать в этот же регистр - затем проверим, нет ли уже движения
	//      на ту дату, которая указана в документе
	//
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УчетЗаработкаРаботниковРаботники.НомерСтроки КАК НомерСтроки,
	|	УчетЗаработкаРаботниковРаботники.Сотрудник,
	|	УчетЗаработкаРаботниковРаботники.Сотрудник.Наименование КАК СотрудникНаименование,
	|	УчетЗаработкаРаботниковРаботники.Сотрудник.Физлицо КАК Физлицо,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	ПоследующиеДвижения.РегистраторПредставление,
	|	УчетЗаработкаРаботниковРаботники.ДатаИзменения,
	|	УчетЗаработкаРаботниковРаботники.СпособОтраженияВУпрУчете,
	|	УчетЗаработкаРаботниковРаботники.УчетНачисленийПоОрганизации
	|ИЗ
	|	Документ.ВводСведенийОбУчетеЗаработкаРаботников.Работники КАК УчетЗаработкаРаботниковРаботники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УчетЗаработкаРаботниковРаботники.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(УчетЗаработкаРаботниковРаботники1.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ВводСведенийОбУчетеЗаработкаРаботников.Работники КАК УчетЗаработкаРаботниковРаботники
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводСведенийОбУчетеЗаработкаРаботников.Работники КАК УчетЗаработкаРаботниковРаботники1
	|				ПО УчетЗаработкаРаботниковРаботники.НомерСтроки < УчетЗаработкаРаботниковРаботники1.НомерСтроки
	|					И УчетЗаработкаРаботниковРаботники.Сотрудник.Физлицо = УчетЗаработкаРаботниковРаботники1.Сотрудник.Физлицо
	|					И УчетЗаработкаРаботниковРаботники.Ссылка = УчетЗаработкаРаботниковРаботники1.Ссылка
	|		ГДЕ
	|			УчетЗаработкаРаботниковРаботники.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			УчетЗаработкаРаботниковРаботники.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО УчетЗаработкаРаботниковРаботники.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УчетЗаработкаРаботников.Регистратор.Представление КАК РегистраторПредставление,
	|			УчетЗаработкаРаботниковРаботники.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(УчетЗаработкаРаботников.Период) КАК ДатаПоследующегоДвижения
	|		ИЗ
	|			Документ.ВводСведенийОбУчетеЗаработкаРаботников.Работники КАК УчетЗаработкаРаботниковРаботники
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников КАК УчетЗаработкаРаботников
	|				ПО УчетЗаработкаРаботниковРаботники.Сотрудник.Физлицо = УчетЗаработкаРаботников.Физлицо
	|					И УчетЗаработкаРаботниковРаботники.ДатаИзменения <= УчетЗаработкаРаботников.Период
	|		ГДЕ
	|			УчетЗаработкаРаботниковРаботники.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			УчетЗаработкаРаботников.Регистратор.Представление,
	|			УчетЗаработкаРаботниковРаботники.НомерСтроки) КАК ПоследующиеДвижения
	|		ПО УчетЗаработкаРаботниковРаботники.НомерСтроки = ПоследующиеДвижения.НомерСтроки
	|			И УчетЗаработкаРаботниковРаботники.ДатаИзменения = ПоследующиеДвижения.ДатаПоследующегоДвижения
	|ГДЕ
	|	УчетЗаработкаРаботниковРаботники.Ссылка = &ДокументСсылка";

	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники"": ";

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаИзменения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата изменения учета работника!", Отказ, Заголовок);
	КонецЕсли;
	
	// СпособОтраженияВУпрУчете
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СпособОтраженияВУпрУчете)  Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан способ отражения заработка работника в учете!", Отказ, Заголовок);
	КонецЕсли;
	
	// повторяющиеся строки		
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер)  Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "по работнику " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " найдена повторяющаяся строка № " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!", Отказ, Заголовок);
	КонецЕсли;
	
	// повторяющиеся строки		
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РегистраторПредставление)  Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "способ учета заработка работника " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже зарегистрирован ранее документом " + ВыборкаПоСтрокамДокумента.РегистраторПредставление + "!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

	// Движения на дату приёма
	
	//Движения по регистру "УчетЗаработкаРаботников"
	Движение = Движения.УчетЗаработкаРаботников.Добавить();
	// Свойства
	Движение.Период							= ВыборкаПоРаботникиОрганизации.ДатаИзменения;
	
	// Измерения
	Движение.Физлицо						= ВыборкаПоРаботникиОрганизации.Физлицо;
	
	// Ресурсы
	Движение.СпособОтраженияВУпрУчете		= ВыборкаПоРаботникиОрганизации.СпособОтраженияВУпрУчете;
	Движение.УчетНачисленийПоОрганизации	= ВыборкаПоРаботникиОрганизации.УчетНачисленийПоОрганизации;


КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// выполним выборку по табличной части документа
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(Режим);
			ВыборкаСтрокЗапроса = РезультатЗапросаПоРаботники.Выбрать();
			
			// обходим строки запроса, проверяем данные и формируем движения
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл
				
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ПриемНаРаботу") 
	 или ТипОснования = Тип("ДокументСсылка.КадровоеПеремещение") Тогда
		ДокументОснование = Основание;
		ЗаполнитьПоОснованию(Основание);
	КонецЕсли;	
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Работники);
	
КонецПроцедуры
