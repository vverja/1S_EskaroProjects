Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ЗаполнитьДокумент(Основание) Экспорт
	Если	ТипЗнч(Основание)	=	Тип("ДокументСсылка.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций")	тогда
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект,Основание);
		
		ДокументОснование	=	Основание;
		
		ЗапросДляЗаполнения	=	Новый	Запрос;
		ЗапросДляЗаполнения.УстановитьПараметр("ДокументСсылка",	Основание);
		ЗапросДляЗаполнения.Текст	=	"ВЫБРАТЬ
		                         	 	|	ДолгосрочныеНачисленияОрганизации.Сотрудник,
		                         	 	|	ДолгосрочныеНачисленияОрганизации.Ссылка,
		                         	 	|	ДолгосрочныеНачисленияОрганизации.ВидРасчета,
		                         	 	|	ДолгосрочныеНачисленияОрганизации.ДатаДействия КАК ДатаНачала
		                         	 	|ИЗ
		                         	 	|	Документ.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ОсновныеНачисления КАК ДолгосрочныеНачисленияОрганизации
		                         	 	|
		                         	 	|ГДЕ
		                         	 	|	ДолгосрочныеНачисленияОрганизации.Ссылка = &ДокументСсылка";
										
		Начисления.Загрузить(ЗапросДляЗаполнения.Выполнить().Выгрузить());
		
	ИначеЕсли	ТипЗнч(Основание)	=	Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию")	тогда
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект,Основание);
		
		ДокументОснование	=	Основание;
		
		ЗапросДляЗаполнения	=	Новый	Запрос;
		ЗапросДляЗаполнения.УстановитьПараметр("ДокументСсылка",	Основание);
		СписокВидовВремени = Новый СписокЗначений;
		СписокВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеСверхНормы);
		СписокВидовВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
		ЗапросДляЗаполнения.УстановитьПараметр("СписокВидовВремени",	СписокВидовВремени);
		ЗапросДляЗаполнения.Текст	=	"ВЫБРАТЬ
		                         	 	|	НачисленияПриПриеме.Сотрудник,
		                         	 	|	НачисленияПриПриеме.ВидРасчета,
		                         	 	|	ПринятыеРаботники.ДатаПриема КАК ДатаНачала
		                         	 	|ИЗ
		                         	 	|	Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК НачисленияПриПриеме
		                         	 	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПринятыеРаботники
		                         	 	|		ПО НачисленияПриПриеме.Ссылка = ПринятыеРаботники.Ссылка И НачисленияПриПриеме.Сотрудник = ПринятыеРаботники.Сотрудник
		                         	 	|
		                         	 	|ГДЕ
		                         	 	|	НачисленияПриПриеме.Ссылка = &ДокументСсылка
		                         	 	|	И НачисленияПриПриеме.ВидРасчета.ВидВремени в (&СписокВидовВремени)";
										
		Начисления.Загрузить(ЗапросДляЗаполнения.Выполнить().Выгрузить());
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	Организация,
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

    // Описание текста запроса:
	//
    // 1. Выборка "Начисления": 
	//		Сразу проверяем наличие строк-дублей.  
	// 2. Выборка "СуществующиеДвижения": 
	//		Проверяем на наличие существующих конфликтных движений в регистре сведений. 
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Начисления.Сотрудник,
	               |	Начисления.ВидСтроки,
	               |	Начисления.ВидРасчета,
	               |	Начисления.СпособОтраженияВБухучете,	               
	               |	Начисления.ДатаНачала,
	               |	Начисления.КонфликтныйНомерСтроки,
	               |	Начисления.НомерСтроки,
	               |	СуществующиеДвижения.Регистратор.Представление КАК КонфликтныйДокумент,
	               |	Начисления.Сотрудник.ФизЛицо.Наименование КАК ФизЛицоНаименование
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	               |		ТЧОсновныеНачисления.Сотрудник КАК Сотрудник,
	               |		ТЧОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	               |		ТЧОсновныеНачисления.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,	               
	               |		ТЧОсновныеНачисления.ДатаНачала КАК ДатаНачала,
	               |		МИНИМУМ(ПовторяющиесяСтроки.НомерСтроки) КАК КонфликтныйНомерСтроки,
	               |		""Основные начисления"" КАК ВидСтроки
	               |	ИЗ
	               |		Документ.ВводСведенийОбУчетеПлановыхНачисленийРаботниковОрганизаций.Начисления КАК ТЧОсновныеНачисления
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводСведенийОбУчетеПлановыхНачисленийРаботниковОрганизаций.Начисления КАК ПовторяющиесяСтроки
	               |			ПО ТЧОсновныеНачисления.Ссылка = ПовторяющиесяСтроки.Ссылка И ТЧОсновныеНачисления.НомерСтроки < ПовторяющиесяСтроки.НомерСтроки И ТЧОсновныеНачисления.Сотрудник = ПовторяющиесяСтроки.Сотрудник И ТЧОсновныеНачисления.ВидРасчета = ПовторяющиесяСтроки.ВидРасчета
	               |	
	               |	ГДЕ
	               |		ТЧОсновныеНачисления.Ссылка = &ДокументСсылка
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ТЧОсновныеНачисления.Сотрудник,
	               |		ТЧОсновныеНачисления.ВидРасчета,
	               |		ТЧОсновныеНачисления.СпособОтраженияВБухучете,
	               |		ТЧОсновныеНачисления.ДатаНачала,
	               |		ТЧОсновныеНачисления.НомерСтроки) КАК Начисления
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетПлановыхНачисленийРаботниковОрганизаций КАК СуществующиеДвижения
	               |		ПО Начисления.Сотрудник = СуществующиеДвижения.Сотрудник И Начисления.ВидРасчета = СуществующиеДвижения.ВидРасчета И Начисления.ДатаНачала = СуществующиеДвижения.Период";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, в которую принимается работник!", Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части """ + ВыборкаПоСтрокамДокумента.ВидСтроки + """: ";

	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ);
	КонецЕсли;
	
	// ДатаНачала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала)  Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата изменений!", Отказ);
	КонецЕсли;
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано начисление!", Отказ);
	КонецЕсли;
	
	// Одинаковые строки
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйНомерСтроки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке  + "по работнику " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " обнаружено повторное назначение способа учета того же начисления в строке №" + ВыборкаПоСтрокамДокумента.КонфликтныйНомерСтроки + "!", Отказ);
	КонецЕсли;
	
	// Движения в регистре на дату из документа
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйДокумент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "на дату "+ ВыборкаПоСтрокамДокумента.ДатаНачала + " способ учета начисления уже зарегистрирован документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!", Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

	//Движения по регистру "УчетПлановыхНачисленийРаботниковОрганизаций"
	Движение = Движения.УчетПлановыхНачисленийРаботниковОрганизаций.Добавить();
	// Свойства
	Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаНачала;
	// Измерения
	Движение.Сотрудник                  = ВыборкаПоРаботникиОрганизации.Сотрудник;
	Движение.ВидРасчета					= ВыборкаПоРаботникиОрганизации.ВидРасчета;
	// Ресурсы
	Движение.СпособОтраженияВБухучете   = ВыборкаПоРаботникиОрганизации.СпособОтраженияВБухучете;
	// Реквизиты
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// выполним выборку по табличной части документа
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(Режим);
			ВыборкаСтрокЗапроса = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			// обходим строки запроса, проверяем данные и формируем движения
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл
				
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ);

				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
				КонецЕсли; 
				
			КонецЦикла;					
			
		КонецЕсли;	

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьДокумент(Основание);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Начисления);
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(Начисления);
	
КонецПроцедуры


мДлинаСуток = 86400;

