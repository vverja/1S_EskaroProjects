Перем мВалютаРегламентированногоУчета;
Перем мДанныеВалютыРегламентированногоУчета;
Перем мПорядокСписанияПартий; // (Общ)
Перем мВидОперацииОплата;
Перем мВидОперацииОтгрузка;


///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечатныхФорм = Новый Структура;
	СтруктПечатныхФорм.Вставить("Корректировка долга", "КорректировкаДолга" );
	Возврат СтруктПечатныхФорм;

КонецФункции // ПолучитьСписокПечатныхФорм()

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений по бухгалтерскому и налоговому учетам
Процедура ДобавитьКолонкиСуммДолгаРегл(ТаблицаДолга, СтруктураШапкиДокумента) Экспорт
	
	// Суммы в документе в валюте регл. учета
	ТаблицаДолга.Колонки.Добавить("СуммаБезНДСРегл"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДолга.Колонки.Добавить("СуммаНДСРегл"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДолга.Колонки.Добавить("СуммаСНДСРегл"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в документе в валюте документа
	ТаблицаДолга.Колонки.Добавить("СуммаБезНДСВал"         , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДолга.Колонки.Добавить("СуммаНДСВал"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДолга.Колонки.Добавить("СуммаСНДСВал"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в проводках в валюте регл. учета
	ТаблицаДолга.Колонки.Добавить("ПроводкиСуммаБезНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДолга.Колонки.Добавить("ПроводкиСуммаНДСРегл"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДолга.Колонки.Добавить("ПроводкиСуммаСНДСРегл"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в проводках в валюте документа
	ТаблицаДолга.Колонки.Добавить("ПроводкиСуммаБезНДСВал" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДолга.Колонки.Добавить("ПроводкиСуммаНДСВал"    , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДолга.Колонки.Добавить("ПроводкиСуммаСНДСВал"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы для налогового учета
	ТаблицаДолга.Колонки.Добавить("СуммаВДВР"                , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));	
	
	// Заполним значения в добавленых колонках 
	
	Для каждого СтрокаТаблицы Из ТаблицаДолга Цикл
		
		Если ТаблицаДолга.Колонки.Найти("СуммаУвеличение") = Неопределено Тогда
			СуммаДолга = СтрокаТаблицы.СуммаДолга;
		ИНаче	
			СуммаДолга = МАКС(СтрокаТаблицы.СуммаУвеличение, СтрокаТаблицы.СуммаУменьшение);
		КонецЕсли;
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал    = СуммаДолга;
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.СуммаНДС;
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтрокаТаблицы.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
												СтрокаТаблицы.ВалютаВзаиморасчетов,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтрокаТаблицы.КурсВзаиморасчетов, 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												СтрокаТаблицы.КратностьВзаиморасчетов,
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета);
			СтрокаТаблицы.СуммаНДСРегл  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаНДСВал, 
												СтрокаТаблицы.ВалютаВзаиморасчетов,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтрокаТаблицы.КурсВзаиморасчетов, 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												СтрокаТаблицы.КратностьВзаиморасчетов,
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета);
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
		// Рассчитаем суммы в проводках в валюте регл. учета
		СтрокаТаблицы.ПроводкиСуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаСНДСВал = СтрокаТаблицы.СуммаСНДСВал;
		// До проверки необходимости реквизита УчитыватьНДС в этом документе!!!!!!
		// Определим значение НДС в проводках
		СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.СуммаНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаНДСВал  = СтрокаТаблицы.СуммаНДСВал;
		
		СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаБезНДСВал = СтрокаТаблицы.ПроводкиСуммаСНДСВал - СтрокаТаблицы.ПроводкиСуммаНДСВал;
													
		// Рассчитаем суммы налогового учета
		Если СтрокаТаблицы.НалоговоеНазначение.Амортизируется Тогда
			// Будет амортизироваться, ВР не начисляем
			СтрокаТаблицы.СуммаВДВР = 0;
		Иначе
			СтрокаТаблицы.СуммаВДВР = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента)

	ТаблицаДолга = РезультатЗапросаПоСуммамДолга.Выгрузить();

	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуДолгаРегл(ТаблицаДолга, СтруктураШапкиДокумента);
	ПодготовитьТаблицуДолгаУпр(ТаблицаДолга, СтруктураШапкиДокумента);

	Возврат ТаблицаДолга;
	
КонецФункции // ПодготовитьТаблицуДолга()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуДолгаУвеличение(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента)

	ТаблицаДолга = РезультатЗапросаПоСуммамДолга.Выгрузить();

	ТаблицаДолга.Колонки.СуммаУвеличение.Имя = "СуммаДолга";
	ТаблицаДолга.Колонки.Удалить(ТаблицаДолга.Колонки.СуммаУменьшение);
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаДолга.Количество() Цикл

		СтрокаТаблицы = ТаблицаДолга.Получить(Счетчик);
		Если СтрокаТаблицы.СуммаДолга = 0 Тогда
			 ТаблицаДолга.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;
	
	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуДолгаРегл(ТаблицаДолга, СтруктураШапкиДокумента);
	ПодготовитьТаблицуДолгаУпр(ТаблицаДолга, СтруктураШапкиДокумента);

	Возврат ТаблицаДолга;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуДолгаУменьшение(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента)

	ТаблицаДолга = РезультатЗапросаПоСуммамДолга.Выгрузить();

	ТаблицаДолга.Колонки.СуммаУменьшение.Имя = "СуммаДолга";
	ТаблицаДолга.Колонки.Удалить(ТаблицаДолга.Колонки.СуммаУвеличение);
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаДолга.Количество() Цикл

		СтрокаТаблицы = ТаблицаДолга.Получить(Счетчик);
		Если СтрокаТаблицы.СуммаДолга = 0 Тогда
			 ТаблицаДолга.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;
	
	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуДолгаРегл(ТаблицаДолга, СтруктураШапкиДокумента);
	ПодготовитьТаблицуДолгаУпр(ТаблицаДолга, СтруктураШапкиДокумента);

	Возврат ТаблицаДолга;
	
КонецФункции // ПодготовитьТаблицуТоваров()

//
Процедура ПодготовитьТаблицуДолгаРегл(ТаблицаДолга, СтруктураШапкиДокумента)

	ТаблицаДолга.Колонки.Добавить("НДСВключенВСтоимость");
	// для регламентного учета считаем НДС
	Для Каждого СтрокаТаблицы Из ТаблицаДолга Цикл
		СтрокаТаблицы.НДСВключенВСтоимость = НЕ НалоговыйУчет.ЕстьНалоговыйКредит(СтрокаТаблицы);
	КонецЦикла;
	
	ДобавитьКолонкиСуммДолгаРегл(ТаблицаДолга, СтруктураШапкиДокумента);

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

Процедура ПодготовитьТаблицуДолгаУпр(ТаблицаДолга, СтруктураШапкиДокумента)

	ТаблицаОбщая = (ТаблицаДолга.Колонки.Найти("СуммаУвеличение")=Неопределено);
		
	Если ТаблицаОбщая Тогда
		ТаблицаДолга.Колонки.Добавить("СуммаДолгаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Иначе	
		ТаблицаДолга.Колонки.Добавить("СуммаУвеличениеУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТаблицаДолга.Колонки.Добавить("СуммаУменьшениеУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЕсли; 

	// Надо расчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаДолга Цикл

		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			СтрокаТаблицы.СделкаВзаиморасчеты = Неопределено;
		КонецЕсли;

		// Суммы пересчитаем в валюту упр. учета
		Если ТаблицаОбщая Тогда
			СтрокаТаблицы.СуммаДолгаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаДолга, 
			                                 СтрокаТаблицы.ВалютаВзаиморасчетов,
			                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			                                 СтрокаТаблицы.КурсВзаиморасчетов,
			                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			                                 СтрокаТаблицы.КратностьВзаиморасчетов,
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		
		ИНаче	
			СтрокаТаблицы.СуммаУвеличениеУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаУвеличение, 
			                                 СтрокаТаблицы.ВалютаВзаиморасчетов,
			                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			                                 СтрокаТаблицы.КурсВзаиморасчетов,
			                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			                                 СтрокаТаблицы.КратностьВзаиморасчетов,
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			СтрокаТаблицы.СуммаУменьшениеУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаУменьшение, 
			                                 СтрокаТаблицы.ВалютаВзаиморасчетов,
			                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			                                 СтрокаТаблицы.КурсВзаиморасчетов,
			                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			                                 СтрокаТаблицы.КратностьВзаиморасчетов,
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидОперации,Организация");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		И СтруктураШапкиДокумента.ЕстьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("КоррСчетНДС");
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "СуммыДолга".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСуммамДолга    - таблица значений, содержащая данные для проведения и проверки ТЧ СуммыДолга
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ИмяТабличнойЧасти, НаименованиеТабличнойЧасти, ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ТипКонтрагента,
				|"+?(ОтражатьВБухгалтерскомУчете,"СчетУчетаРасчетов,",""),"ВидОперацииКонтрагента");

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиСуммаДолгаРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоСуммамДолга, Отказ, Заголовок);

	Для каждого СтрокаТаблицы Из ТаблицаПоСуммамДолга Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
										 """ табличной части """+НаименованиеТабличнойЧасти+""": ";
		
		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СделкаВзаиморасчеты) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " выбран договор, взаиморасчеты по которому ведутся """+СтрокаТаблицы.ВедениеВзаиморасчетов+""".
				                    |Необходимо заполнить сделку!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		Если (  СтрокаТаблицы.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель 
			  И СтрокаТаблицы.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком)
		 ИЛИ (  СтрокаТаблицы.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик 
			  И СтрокаТаблицы.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)  Тогда
			  
			  ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " указанный тип контрагента не соответствует виду договора с контрагетном!", Отказ, Заголовок);
			  
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСуммыДолга()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиСуммаДолгаРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетов");
	КонецЕсли;
	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоСуммамДолга          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаДолга, ТаблицаДолгаУвеличение, ТаблицаДолгаУменьшение, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения,  СтруктураШапкиДокумента, Отказ, Заголовок, ТаблицаДолга, ТаблицаДолгаУвеличение, ТаблицаДолгаУменьшение);
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок, ТаблицаДолга, ТаблицаДолгаУвеличение, ТаблицаДолгаУменьшение);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок, ТаблицаДолга, ТаблицаДолгаУвеличение, ТаблицаДолгаУменьшение)
	
	Для каждого СтрокаДолга Из ТаблицаДолгаУменьшение Цикл
		// Уменьшение долга
		
		ДоговорСПоставщиком	= (СтрокаДолга.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик);
		ДоговорСПокупателем = (СтрокаДолга.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель);
		
		Если ДоговорСПоставщиком Тогда
			ОперацияРасхода = (СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОплата);
			ОперацияПрихода	= (СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОтгрузка);
		ИначеЕсли ДоговорСПокупателем Тогда
			ОперацияРасхода = (СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОтгрузка);
			ОперацияПрихода = (СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОплата);
		КонецЕсли; 
		
		ТекущаяСделка = Неопределено;
		Если СтрокаДолга.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ТекущаяСделка = СтрокаДолга.Сделка;
		КонецЕсли; 
		
		// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.
		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.ДоговорКонтрагента 	= СтрокаДолга.ДоговорКонтрагента;
		СтрокаДвижений.Сделка 				= ТекущаяСделка;
		СтрокаДвижений.СуммаВзаиморасчетов  = СтрокаДолга.СуммаДолга;
		СтрокаДвижений.СуммаУпр   			= СтрокаДолга.СуммаДолгаУпр;
		СтрокаДвижений.Организация   		= Организация;
		СтрокаДвижений.Контрагент   		= СтрокаДолга.Контрагент;
		НаборДвижений.мПериод            	= Дата;
		НаборДвижений.мТаблицаДвижений   	= ТаблицаДвижений;

		Если Не Отказ Тогда
			Если ОперацияПрихода Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
			ИначеЕсли ОперацияРасхода Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли; 
		КонецЕсли;
			
		// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентамиНУ.
		
		// ПО РЕГИСТРУ РасчетыСКонтрагентами
		
		//Проводим, только если не заполнен Заказ или это оплата.
		Если    НЕ ЗначениеЗаполнено(СтрокаДолга.Сделка) 
			ИЛИ (  ТипЗнч(СтрокаДолга.Сделка) <> Тип("ДокументСсылка.ЗаказПоставщику")
			     И ТипЗнч(СтрокаДолга.Сделка) <> Тип("ДокументСсылка.ЗаказПокупателя")) 
			ИЛИ СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОплата Тогда

			Если ОтражатьВУправленческомУчете Тогда
				НаборДвижений = Движения.РасчетыСКонтрагентами;

				// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();

				// Заполним таблицу движений.
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.РасчетыВозврат       = Перечисления.РасчетыВозврат.Расчеты;
				СтрокаДвижений.ДоговорКонтрагента 	= СтрокаДолга.ДоговорКонтрагента;
				СтрокаДвижений.Сделка               = ТекущаяСделка;
				СтрокаДвижений.СуммаВзаиморасчетов  = СтрокаДолга.СуммаДолга;
				СтрокаДвижений.СуммаУпр   			= СтрокаДолга.СуммаДолгаУпр;
				СтрокаДвижений.Организация   		= Организация;
				СтрокаДвижений.Контрагент   		= СтрокаДолга.Контрагент;

				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

				Если Не Отказ Тогда
					Если ОперацияПрихода Тогда
						Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
					ИначеЕсли ОперацияРасхода Тогда
						Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла; 
	
	
	Для каждого СтрокаДолга Из ТаблицаДолгаУвеличение Цикл
		// Увеличение долга
		
		ДоговорСПоставщиком	= (СтрокаДолга.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик);
		ДоговорСПокупателем = (СтрокаДолга.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель);
		
		Если ДоговорСПоставщиком Тогда
			ОперацияПрихода = (СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОплата);
			ОперацияРасхода = (СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОтгрузка);
		ИначеЕсли ДоговорСПокупателем Тогда
			ОперацияПрихода = (СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОтгрузка);
			ОперацияРасхода = (СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОплата);
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.Погашение Тогда
			ОперацияПрихода = НЕ ОперацияПрихода;
			ОперацияРасхода = НЕ ОперацияРасхода;
		КонецЕсли; 				
		
		ТекущаяСделка = Неопределено;
		Если СтрокаДолга.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ТекущаяСделка = СтрокаДолга.Сделка;
		КонецЕсли; 
		
		// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.
		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.ДоговорКонтрагента 	= СтрокаДолга.ДоговорКонтрагента;
		СтрокаДвижений.Сделка               = СтрокаДолга.Сделка;
		СтрокаДвижений.СуммаВзаиморасчетов  = СтрокаДолга.СуммаДолга;
		СтрокаДвижений.Организация   		= Организация;
		СтрокаДвижений.Контрагент   		= СтрокаДолга.Контрагент;
		
		СтрокаДвижений.СуммаУпр   			= СтрокаДолга.СуммаДолгаУпр;

		НаборДвижений.мПериод            	= Дата;
		НаборДвижений.мТаблицаДвижений   	= ТаблицаДвижений;

		Если Не Отказ Тогда
			Если ОперацияРасхода Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			ИначеЕсли ОперацияПрихода Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли; 
		КонецЕсли;
			
		// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентамиНУ.
		
		// ПО РЕГИСТРУ РасчетыСКонтрагентами

		//Проводим, только если не заполнен Заказ или это Оплата.
		Если    НЕ ЗначениеЗаполнено(СтрокаДолга.Сделка)
			ИЛИ (  ТипЗнч(СтрокаДолга.Сделка) <> Тип("ДокументСсылка.ЗаказПоставщику")
			     И ТипЗнч(СтрокаДолга.Сделка) <> Тип("ДокументСсылка.ЗаказПокупателя"))
			ИЛИ СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОплата Тогда

			Если ОтражатьВУправленческомУчете Тогда
				НаборДвижений = Движения.РасчетыСКонтрагентами;

				// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();

				// Заполним таблицу движений.
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.РасчетыВозврат       = Перечисления.РасчетыВозврат.Расчеты;
				СтрокаДвижений.ДоговорКонтрагента 	= СтрокаДолга.ДоговорКонтрагента;
				СтрокаДвижений.Сделка               = ТекущаяСделка;
				СтрокаДвижений.СуммаВзаиморасчетов  = СтрокаДолга.СуммаДолга;
				СтрокаДвижений.СуммаУпр   			= СтрокаДолга.СуммаДолгаУпр;
				СтрокаДвижений.Организация   		= Организация;
				СтрокаДвижений.Контрагент   		= СтрокаДолга.Контрагент;

				НаборДвижений.мПериод            = Дата;
				НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

				Если Не Отказ Тогда
					Если ОперацияРасхода Тогда
						Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
					ИначеЕсли ОперацияПрихода Тогда
						Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
		
КонецПроцедуры

//Формирует структуру параметров для передачи в процедуры зачета аванса по ссылке на документ
Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаЛокально(Ссылка, СтруктураШапкиДокумента, СтрокаТаблицыДолга, ВалютаРегламентированногоУчета, Заголовок = Неопределено,СуммаСНДС = 0)

	ВидДокумента = Ссылка.Метаданные().Имя;
	Если НЕ ЗначениеЗаполнено(Заголовок) тогда
		Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	КонецЕсли;
	
	// Определим напрвление движения
	ВидДвиженияПоступление = Перечисления.НаправленияДвижений.Поступление;
	ВидДвиженияВыбытие     = Перечисления.НаправленияДвижений.Выбытие;
	
	ДоговорСПоставщиком	= (СтрокаТаблицыДолга.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик);
	ДоговорСПокупателем = (СтрокаТаблицыДолга.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель);
		
	Если ДоговорСПоставщиком Тогда
		
		Если СтрокаТаблицыДолга.ВидОперацииКонтрагента = мВидОперацииОплата Тогда
			НаправлениеДвижения = ВидДвиженияВыбытие;	
		ИначеЕсли СтрокаТаблицыДолга.ВидОперацииКонтрагента = мВидОперацииОтгрузка Тогда 
			НаправлениеДвижения = ВидДвиженияПоступление;	
		КонецЕсли; 
		
	ИНачеЕсли ДоговорСПокупателем Тогда
		
		Если СтрокаТаблицыДолга.ВидОперацииКонтрагента = мВидОперацииОплата Тогда
			НаправлениеДвижения = ВидДвиженияПоступление;	
		ИначеЕсли СтрокаТаблицыДолга.ВидОперацииКонтрагента = мВидОперацииОтгрузка Тогда 
			НаправлениеДвижения = ВидДвиженияВыбытие;	
		КонецЕсли; 
	
	КонецЕсли;
	
	РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты;
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("Организация,ВидОперации,ОтражатьВНалоговомУчете");

	Для Каждого Реквизит из СтруктураПараметров Цикл
		СтруктураПараметров.Вставить(Реквизит.Ключ,?(СтруктураШапкиДокумента.Свойство(Реквизит.Ключ),СтруктураШапкиДокумента[Реквизит.Ключ],Неопределено));
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ВалютаДокумента", 	СтрокаТаблицыДолга.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("НаправлениеДвижения", НаправлениеДвижения);
	СтруктураПараметров.Вставить("РасчетыВозврат"     , РасчетыВозврат);
	
	СтруктураПараметров.Вставить("ВидДокумента"       , ВидДокумента);	
	СтруктураПараметров.Вставить("Регистратор"        , Ссылка);	
	СтруктураПараметров.Вставить("Заголовок"          , Заголовок);	
	СтруктураПараметров.Вставить("Период"             , Ссылка.Дата);	
	
	СтруктураПараметров.Вставить("КурсДокумента"     , СтрокаТаблицыДолга.КурсВзаиморасчетов);	
	СтруктураПараметров.Вставить("КратностьДокумента", СтрокаТаблицыДолга.КратностьВзаиморасчетов);	
	
	Если СтрокаТаблицыДолга.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		СтруктураПараметров.Вставить("ЭтоОплата", СтрокаТаблицыДолга.ВидОперацииКонтрагента = мВидОперацииОплата);		
	КонецЕсли;	
	
	Возврат СтруктураПараметров;
КонецФункции

//
Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетов(СтруктураШапкиДокумента, ТаблицаДолга)
	
	ТаблицаКопия = ТаблицаДолга.Скопировать();
	ТаблицаКопия.Свернуть("СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,Контрагент,ДоговорКонтрагента,ВидДоговораКонтрагента","СуммаСНДСРегл,СуммаСНДСВал");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	
	
	ТаблицаДвижений.Колонки.СчетУчетаРасчетовСКонтрагентом.Имя 	= "СчетОплаты";
	ТаблицаДвижений.Колонки.СчетУчетаРасчетовПоАвансам.Имя 		= "СчетАванса";
	
	Возврат ТаблицаДвижений;
КонецФункции //ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению()

//Формирует структуру параметров для передачи в процедуры движения денежных средств по ссылке на документ
Функция ПодготовкаСтруктурыПараметровДляДвиженияДенегЛокально(СтруктураШапкиДокумента, СтрокаТаблицыДляСтруктуры, ТаблицаДляРеестра, ВалютаРегламентированногоУчета, Заголовок = Неопределено, КоррСчет=Неопределено) Экспорт

	ВидДокумента       = Ссылка.Метаданные().Имя;
	РеквизитыДокумента = Ссылка.Метаданные().Реквизиты;
	Если НЕ ЗначениеЗаполнено(Заголовок) тогда
		Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	КонецЕсли;
	
	// Определим напрвление движения
	ВидДвиженияПоступление = Перечисления.НаправленияДвижений.Поступление;
	ВидДвиженияВыбытие     = Перечисления.НаправленияДвижений.Выбытие;
	
	ДоговорСПоставщиком	= (СтрокаТаблицыДляСтруктуры.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик);
	ДоговорСПокупателем = (СтрокаТаблицыДляСтруктуры.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель);
		
	Если ДоговорСПоставщиком Тогда
		
		Если СтрокаТаблицыДляСтруктуры.ВидОперацииКонтрагента = мВидОперацииОплата Тогда
			НаправлениеДвижения = ВидДвиженияВыбытие;	
		ИначеЕсли СтрокаТаблицыДляСтруктуры.ВидОперацииКонтрагента = мВидОперацииОтгрузка Тогда 
			НаправлениеДвижения = ВидДвиженияПоступление;	
		КонецЕсли; 
		
	ИНачеЕсли ДоговорСПокупателем Тогда
		
		Если СтрокаТаблицыДляСтруктуры.ВидОперацииКонтрагента = мВидОперацииОплата Тогда
			НаправлениеДвижения = ВидДвиженияПоступление;	
		ИначеЕсли СтрокаТаблицыДляСтруктуры.ВидОперацииКонтрагента = мВидОперацииОтгрузка Тогда 
			НаправлениеДвижения = ВидДвиженияВыбытие;	
		КонецЕсли; 
	
	КонецЕсли;
	
	Если ТаблицаДляРеестра[0].Увеличение Тогда
		РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты;
	Иначе
		РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат;
		НаправлениеДвижения = ?(НаправлениеДвижения = ВидДвиженияПоступление,ВидДвиженияВыбытие,ВидДвиженияПоступление);	
	КонецЕсли; 
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("Организация,ВидОперации,ОтражатьВНалоговомУчете");

	Для Каждого Реквизит из СтруктураПараметров Цикл
		СтруктураПараметров.Вставить(Реквизит.Ключ,?(СтруктураШапкиДокумента.Свойство(Реквизит.Ключ),СтруктураШапкиДокумента[Реквизит.Ключ],Неопределено));
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ДатаОплаты"			, Ссылка.Дата);
	СтруктураПараметров.Вставить("НаправлениеДвижения"	, НаправлениеДвижения);
	СтруктураПараметров.Вставить("РасчетыВозврат"     	, РасчетыВозврат);

	СтруктураПараметров.Вставить("ВидДокумента"       	, ВидДокумента);
	СтруктураПараметров.Вставить("Регистратор"        	, Ссылка);
	СтруктураПараметров.Вставить("Заголовок"          	, Заголовок);

	Если НЕ ЗначениеЗаполнено(СтруктураПараметров["ДатаОплаты"]) Тогда
		СтруктураПараметров.Вставить("Период", Ссылка.Дата);
	Иначе
		СтруктураПараметров.Вставить("Период", СтруктураПараметров["ДатаОплаты"]);
	Конецесли;
	
	СтруктураПараметров.Вставить("ВалютаДокумента"   , СтрокаТаблицыДляСтруктуры.ВалютаВзаиморасчетов);	
	СтруктураПараметров.Вставить("КурсДокумента"     , СтрокаТаблицыДляСтруктуры.КурсВзаиморасчетов);	
	СтруктураПараметров.Вставить("КратностьДокумента", СтрокаТаблицыДляСтруктуры.КратностьВзаиморасчетов);	
	
	ВидСчетаОрганизации = "Расчетный";
	РасчетыВВалюте = Не СтруктураПараметров["ВалютаДокумента"]=ВалютаРегламентированногоУчета;
	
	КоррСчет = СтрокаТаблицыДляСтруктуры.СчетУчетаРасчетовСКонтрагентом;
	
	СтруктураПараметров.Вставить("КоррСчет", КоррСчет);
	
	// Получение данных таблицы расшифровки платежа
	// Выгрузка нужных колонок табличной части в таблицу значений с переименованием названий счетов
	СтруктураТаблицы = Новый Структура("Контрагент,СуммаДолга,ДоговорКонтрагента,СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам");
	
	//Определяем, учитывается ли аванс в документе
	УчитыватьАванс = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределятьАвансыПриПроведении(СтруктураПараметров.Период, СтруктураПараметров.Организация);

	//Определим счета для проводок
	Если УчитыватьАванс И СтруктураПараметров.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
		СтруктураТаблицы.Вставить("СчетУчетаРасчетовСКонтрагентом", "СчетАванса");
		СтруктураТаблицы.Вставить("СчетУчетаРасчетовПоАвансам"	  , "СчетОплаты");
	Иначе
		СтруктураТаблицы.Вставить("СчетУчетаРасчетовСКонтрагентом", "СчетОплаты");
		СтруктураТаблицы.Вставить("СчетУчетаРасчетовПоАвансам"    , "СчетАванса");
	КонецЕсли;
	
	СтруктураТаблицы.Вставить("СуммаСНДСВал", "СуммаСНДСВал");
	СтруктураТаблицы.Вставить("НомерСтрокиДокумента", "НомерСтрокиДокумента");
	
	РеестрПлатежей = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаДляРеестра, СтруктураТаблицы, Истина);
	Если НЕ ЗначениеЗаполнено(РеестрПлатежей) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при движении денежных средств. Отсутствуют необходимые реквизиты в расшифровке платежа.",Ложь,Заголовок);
		Возврат Ложь;
	КонецЕсли;
	
	РеестрПлатежей.Колонки.Добавить("КоррСубконто1");
	РеестрПлатежей.Колонки.Добавить("КоррСубконто2");
	РеестрПлатежей.Колонки.Добавить("КоррСубконто3");
	
	Для каждого ВидСубконтоКоррСчета из КоррСчет.ВидыСубконто Цикл
		РеестрПлатежей.ЗаполнитьЗначения(СтрокаТаблицыДляСтруктуры.Контрагент			, "КоррСубконто1");
		РеестрПлатежей.ЗаполнитьЗначения(СтрокаТаблицыДляСтруктуры.ДоговорКонтрагента	, "КоррСубконто2");
	КонецЦикла;
	
	РеестрПлатежей.Колонки.Добавить("СуммаСНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ДанныеВалютыРегламентированногоУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, СтруктураПараметров.Период);

	
	Для Каждого СтрокаТаблицы Из РеестрПлатежей Цикл
		Если РасчетыВВалюте Тогда
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
										         				СтруктураПараметров.ВалютаДокумента, ВалютаРегламентированногоУчета,
													            СтруктураПараметров.КурсДокумента, ДанныеВалютыРегламентированногоУчета.Курс, 
														        СтруктураПараметров.КратностьДокумента, ДанныеВалютыРегламентированногоУчета.Кратность);
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
		КонецЕсли;
	КонецЦикла;

	РеестрПлатежей.Колонки.Добавить("АвансРеглБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	РеестрПлатежей.Колонки.Добавить("АвансВалБУ" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	СтруктураПараметров.Вставить("Таблица", РеестрПлатежей);
	
	Если СтрокаТаблицыДляСтруктуры.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		СтруктураПараметров.Вставить("ЭтоОплата", СтрокаТаблицыДляСтруктуры.ВидОперацииКонтрагента = мВидОперацииОплата);		
	КонецЕсли;	
	
	Возврат СтруктураПараметров;

КонецФункции

Функция ПолучитьТаблицуПоСтроке(ИсходнаяТаблица, СтрокаТаблицы, Увеличение)

	НоваяТаблица = ИсходнаяТаблица.Скопировать();
	
	НоваяТаблица.Очистить();
	
	СтрокаНовойТаблицы = НоваяТаблица.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы, СтрокаТаблицы);
	
	НоваяТаблица.Колонки.Добавить("Увеличение");
	НоваяТаблица.ЗаполнитьЗначения(Увеличение, "Увеличение");
	
	Возврат НоваяТаблица;

КонецФункции // ПолучитьТаблицуПоСтроке()

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок, ТаблицаДолга, ТаблицаДолгаУвеличение, ТаблицаДолгаУменьшение)

	ВыполнитьПереоценкуВалютныхСчетов = ЛОЖЬ;
	
	// Проводки
	ДатаДока   = Дата;
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;

	ПроводкиПоВзаиморасчетам(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаДолгаУвеличение, ТаблицаДолгаУменьшение, Отказ);
	
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаДолгаУвеличение, ТаблицаДолгаУменьшение, Отказ);
	
	Для каждого СтрокаДолга Из ТаблицаДолгаУменьшение Цикл
		// Уменьшение долга
		
		ДоговорСПоставщиком	= (СтрокаДолга.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик);
		ДоговорСПокупателем = (СтрокаДолга.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель);
		
		ТаблицаПоСтрокеДолга = ПолучитьТаблицуПоСтроке(ТаблицаДолгаУменьшение, СтрокаДолга, ЛОЖЬ);
		
		Если ДоговорСПоставщиком Тогда
			
			// НДС 
			ДвиженияПоРегистрамНУПриобретений(СтруктураШапкиДокумента, ТаблицаПоСтрокеДолга, Отказ);
			
			Если СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОплата Тогда
				
				СтруктураПараметровДДС = ПодготовкаСтруктурыПараметровДляДвиженияДенегЛокально(СтруктураШапкиДокумента, СтрокаДолга, ТаблицаПоСтрокеДолга, мВалютаРегламентированногоУчета, Заголовок,);
				СтруктураДвижений 	   = Новый Структура("ПроводкиБУ, ВзаиморасчетыСКонтрагентамиНалоговыйУчет, ПриобретенияНалоговыйУчет, ПродажиНалоговыйУчет", ПроводкиБУ, Движения.ВзаиморасчетыСКонтрагентамиНалоговыйУчет, Движения.ПриобретенияНалоговыйУчет, Движения.ПродажиНалоговыйУчет); 
					
			//	БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(СтруктураПараметровДДС,СтруктураДвижений,мВалютаРегламентированногоУчета,РежимПроведения,ЭтотОбъект,Отказ);
				Если СтрокаДолга.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
					ВыполнитьПереоценкуВалютныхСчетов = ИСТИНА;
					БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеОплата(СтруктураПараметровДДС,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
				КонецЕсли;
			ИначеЕсли СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОтгрузка Тогда
			
				// ВД/ВР
				ПроводкиПоВДВРПриобретений(ПроводкиНУ, СтруктураШапкиДокумента, ТаблицаПоСтрокеДолга, Отказ);
			
				// Движения по регл. взаиморасчетам
				СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаЛокально(Ссылка, СтруктураШапкиДокумента, СтрокаДолга, мВалютаРегламентированногоУчета, Заголовок);
				Если СтруктураПараметровЗачетАванса <> Ложь Тогда
					
					ДвиженияДляРегистраРасчетовПоПриобретению = ПодготовитьТаблицуДвиженийДляРегистраРасчетов(СтруктураШапкиДокумента, ТаблицаПоСтрокеДолга);
					СтруктураДвижений = Новый Структура("ПроводкиБУ, ВзаиморасчетыСКонтрагентамиНалоговыйУчет", ПроводкиБУ, Движения.ВзаиморасчетыСКонтрагентамиНалоговыйУчет); 
					БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоПриобретению, Отказ);
					
					Если СтрокаДолга.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
						БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеПриобретение(СтруктураПараметровЗачетАванса,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли; 
					
		ИначеЕсли ДоговорСПокупателем Тогда
			
			// НДС 
			ДвиженияПоРегистрамНУПродаж(СтруктураШапкиДокумента, ТаблицаПоСтрокеДолга, Отказ);
			
			Если СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОплата Тогда
				
				СтруктураПараметровДДС = ПодготовкаСтруктурыПараметровДляДвиженияДенегЛокально(СтруктураШапкиДокумента, СтрокаДолга, ТаблицаПоСтрокеДолга, мВалютаРегламентированногоУчета, Заголовок,);
				СтруктураДвижений 	   = Новый Структура("ПроводкиБУ, ВзаиморасчетыСКонтрагентамиНалоговыйУчет, ПриобретенияНалоговыйУчет, ПродажиНалоговыйУчет", ПроводкиБУ, Движения.ВзаиморасчетыСКонтрагентамиНалоговыйУчет, Движения.ПриобретенияНалоговыйУчет, Движения.ПродажиНалоговыйУчет); 
					
			//	БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(СтруктураПараметровДДС,СтруктураДвижений,мВалютаРегламентированногоУчета,РежимПроведения,ЭтотОбъект,Отказ);
				
				Если СтрокаДолга.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
					ВыполнитьПереоценкуВалютныхСчетов = ИСТИНА;
					БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеОплата(СтруктураПараметровДДС,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
				КонецЕсли;
				
			ИначеЕсли СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОтгрузка Тогда
			
				// ВД/ВР
				ПроводкиПоВДВРПродаж(ПроводкиНУ, СтруктураШапкиДокумента, ТаблицаПоСтрокеДолга, Отказ);
				
				// Проводки по регл. взаиморасчетам
				СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаЛокально(Ссылка, СтруктураШапкиДокумента, СтрокаДолга, мВалютаРегламентированногоУчета, Заголовок);
				Если СтруктураПараметровЗачетАванса <> Ложь тогда
					
					ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетов(СтруктураШапкиДокумента, ТаблицаПоСтрокеДолга);
					СтруктураДвижений = Новый Структура("ПроводкиБУ, ВзаиморасчетыСКонтрагентамиНалоговыйУчет", ПроводкиБУ, Движения.ВзаиморасчетыСКонтрагентамиНалоговыйУчет); 
					БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации, Отказ);
					
					Если СтрокаДолга.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
						БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеПриобретение(СтруктураПараметровЗачетАванса,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 		
		
	КонецЦикла; 
	
	
	Для каждого СтрокаДолга Из ТаблицаДолгаУвеличение Цикл
		// Увеличение долга
		
		ДоговорСПоставщиком	= (СтрокаДолга.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик);
		ДоговорСПокупателем = (СтрокаДолга.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель);
		
		ТаблицаПоСтрокеДолга = ПолучитьТаблицуПоСтроке(ТаблицаДолгаУменьшение, СтрокаДолга, ИСТИНА);
		
		Если ДоговорСПоставщиком Тогда
			// НДС 
			ДвиженияПоРегистрамНУПриобретений(СтруктураШапкиДокумента, ТаблицаПоСтрокеДолга, Отказ);
			
			Если СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОплата Тогда
			
				СтруктураПараметровДДС = ПодготовкаСтруктурыПараметровДляДвиженияДенегЛокально(СтруктураШапкиДокумента, СтрокаДолга, ТаблицаПоСтрокеДолга, мВалютаРегламентированногоУчета, Заголовок,);
				СтруктураДвижений 	   = Новый Структура("ПроводкиБУ, ВзаиморасчетыСКонтрагентамиНалоговыйУчет, ПриобретенияНалоговыйУчет, ПродажиНалоговыйУчет", ПроводкиБУ, Движения.ВзаиморасчетыСКонтрагентамиНалоговыйУчет, Движения.ПриобретенияНалоговыйУчет, Движения.ПродажиНалоговыйУчет); 
					
			//	БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(СтруктураПараметровДДС,СтруктураДвижений,мВалютаРегламентированногоУчета,РежимПроведения,ЭтотОбъект,Отказ);
				
				Если СтрокаДолга.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
					ВыполнитьПереоценкуВалютныхСчетов = ИСТИНА;
					БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеОплата(СтруктураПараметровДДС,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
				КонецЕсли;
				
			ИначеЕсли СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОтгрузка Тогда
				
				// ВД/ВР
				ПроводкиПоВДВРПриобретений(ПроводкиНУ, СтруктураШапкиДокумента, ТаблицаПоСтрокеДолга, Отказ);
				
				// Движения по регл. взаиморасчетам
				СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаЛокально(Ссылка, СтруктураШапкиДокумента, СтрокаДолга, мВалютаРегламентированногоУчета, Заголовок);
				Если СтруктураПараметровЗачетАванса <> Ложь Тогда
					
					ДвиженияДляРегистраРасчетовПоПриобретению = ПодготовитьТаблицуДвиженийДляРегистраРасчетов(СтруктураШапкиДокумента, ТаблицаПоСтрокеДолга);
					СтруктураДвижений = Новый Структура("ПроводкиБУ, ВзаиморасчетыСКонтрагентамиНалоговыйУчет", ПроводкиБУ, Движения.ВзаиморасчетыСКонтрагентамиНалоговыйУчет); 
					БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоПриобретению, Отказ);
					
					Если СтрокаДолга.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
						БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеПриобретение(СтруктураПараметровЗачетАванса,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли; 
			
		ИначеЕсли ДоговорСПокупателем Тогда
			// НДС 
			ДвиженияПоРегистрамНУПродаж(СтруктураШапкиДокумента, ТаблицаПоСтрокеДолга, Отказ);
			
			Если СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОплата Тогда
				
				СтруктураПараметровДДС = ПодготовкаСтруктурыПараметровДляДвиженияДенегЛокально(СтруктураШапкиДокумента, СтрокаДолга, ТаблицаПоСтрокеДолга, мВалютаРегламентированногоУчета, Заголовок,);
				СтруктураДвижений 	   = Новый Структура("ПроводкиБУ, ВзаиморасчетыСКонтрагентамиНалоговыйУчет, ПриобретенияНалоговыйУчет, ПродажиНалоговыйУчет", ПроводкиБУ, Движения.ВзаиморасчетыСКонтрагентамиНалоговыйУчет, Движения.ПриобретенияНалоговыйУчет, Движения.ПродажиНалоговыйУчет); 
					
			//	БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(СтруктураПараметровДДС,СтруктураДвижений,мВалютаРегламентированногоУчета,РежимПроведения,ЭтотОбъект,Отказ);
				
				Если СтрокаДолга.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
					ВыполнитьПереоценкуВалютныхСчетов = ИСТИНА;
					БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеОплата(СтруктураПараметровДДС,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
				КонецЕсли;
				
			ИначеЕсли СтрокаДолга.ВидОперацииКонтрагента = мВидОперацииОтгрузка Тогда
			
				// ВД/ВР
				ПроводкиПоВДВРПродаж(ПроводкиНУ, СтруктураШапкиДокумента, ТаблицаПоСтрокеДолга, Отказ);
				
				// Проводки по регл. взаиморасчетам
				СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаЛокально(Ссылка, СтруктураШапкиДокумента, СтрокаДолга, мВалютаРегламентированногоУчета, Заголовок);
				Если СтруктураПараметровЗачетАванса <> Ложь тогда
					
					ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетов(СтруктураШапкиДокумента, ТаблицаПоСтрокеДолга);
					СтруктураДвижений = Новый Структура("ПроводкиБУ, ВзаиморасчетыСКонтрагентамиНалоговыйУчет", ПроводкиБУ, Движения.ВзаиморасчетыСКонтрагентамиНалоговыйУчет); 
					БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации, Отказ);
					
					Если СтрокаДолга.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
						БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеПриобретение(СтруктураПараметровЗачетАванса,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 		
		
	КонецЦикла; 
	
	//Учет курсовых разниц
	Если ВыполнитьПереоценкуВалютныхСчетов тогда
		СтруктураПараметровКР = БухгалтерскийУчет.ПодготовкаСтруктурыПараметровДляПереоценкиСчета(Ссылка,Заголовок);
		ПроводкиБУ.Записать(Ложь);
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(СтруктураПараметровКР,ПроводкиБУ,мВалютаРегламентированногоУчета,Истина);
		ПроводкиБУ.Записать(Ложь);
	КонецЕсли; // Учет курсовых разниц
	
КонецПроцедуры

// Процедура формирует проводки по взаиморасчетам
Процедура ПроводкиПоВзаиморасчетам(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаДолгаУвеличение, ТаблицаДолгаУменьшение, Отказ)
	
	// Бухгалтерский учет
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// Для погашения один-К-многим определим какая таблица "один" и какая "многие".
	УвеличениеОдин = (ТаблицаДолгаУвеличение.Количество() = 1);
	
	Если УвеличениеОдин Тогда
		ТаблицаКопия = ТаблицаДолгаУменьшение.Скопировать();
	Иначе
		ТаблицаКопия = ТаблицаДолгаУвеличение.Скопировать();
	КонецЕсли;
	
	ТаблицаКопия.Свернуть("ТипКонтрагента,Контрагент,ДоговорКонтрагента,ВидДоговораКонтрагента,ВалютаВзаиморасчетов,СчетУчетаРасчетовСКонтрагентом","СуммаСНДСРегл,СуммаСНДСВал");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	// При погашении долга будем условно считать покупателя 
	ИнверсияСчетов = (СтруктураШапкиДокумента.ВидОперации=Перечисления.ВидыОперацийВзаимозачет.Погашение);

	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		
		Если    СтрокаТаблицы.СуммаСНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.СуммаСНДСВал  <> 0 Тогда
			
			ДоговорСПокупателем = (СтрокаТаблицы.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель);
			
			ИнверсияСчетов = (ИнверсияСчетов И ДоговорСПокупателем);				
					
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.СуммаСНДСРегл;
			Проводка.Содержание                 = "Взаимозачет";
			Проводка.НомерЖурнала               = "";

			Если УвеличениеОдин Тогда
				
				Если ИнверсияСчетов Тогда
				
					Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
					
					Проводка.СчетКт                     = ТаблицаДолгаУвеличение[0].СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", ТаблицаДолгаУвеличение[0].Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , ТаблицаДолгаУвеличение[0].ДоговорКонтрагента);
					
				Иначе	
					
					Проводка.СчетДт                     = ТаблицаДолгаУвеличение[0].СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ТаблицаДолгаУвеличение[0].Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , ТаблицаДолгаУвеличение[0].ДоговорКонтрагента);
					
					Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
				
				КонецЕсли; 
			Иначе
				
				Если ИнверсияСчетов Тогда
					
					Проводка.СчетДт                     = ТаблицаДолгаУменьшение[0].СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ТаблицаДолгаУменьшение[0].Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , ТаблицаДолгаУменьшение[0].ДоговорКонтрагента);
					
					Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
					
				Иначе	
					Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
					
					Проводка.СчетКт                     = ТаблицаДолгаУменьшение[0].СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", ТаблицаДолгаУменьшение[0].Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , ТаблицаДолгаУменьшение[0].ДоговорКонтрагента);
					
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;

		Проводка.ВалютаДт        			= ТаблицаДолгаУвеличение[0].ВалютаВзаиморасчетов;
		Проводка.ВалютнаяСуммаДт 			= ТаблицаДолгаУвеличение[0].СуммаСНДСВал;
		
		Проводка.ВалютаКт        			= ТаблицаДолгаУменьшение[0].ВалютаВзаиморасчетов;
		Проводка.ВалютнаяСуммаКт 			= ТаблицаДолгаУменьшение[0].СуммаСНДСВал;
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует проводки по НДС
Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаДолгаУвеличение, ТаблицаДолгаУменьшение, Отказ)
	
	
	// Бухгалтерский учет
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	ТаблицаДвижений = ТаблицаДолгаУменьшение.Скопировать();
	ТаблицаДвижений.Свернуть("ВидОперацииКонтрагента, ТипКонтрагента, Контрагент,ДоговорКонтрагента,ВидДоговораКонтрагента,ВалютаВзаиморасчетов,СчетУчетаРасчетовСКонтрагентом,СчетУчетаНДС","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");

	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		
		Если    СтрокаТаблицы.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			// по таким договорам учет НДС не ведется 
			Продолжить;
		КонецЕсли;
		
		Если    СтрокаТаблицы.ВидОперацииКонтрагента = мВидОперацииОплата Тогда
			// в конфигурации ведется учет НДС по отгрузке.
			Продолжить;
		КонецЕсли;
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = "НДС: взаимозачет";
			Проводка.НомерЖурнала               = "";

			Если СтрокаТаблицы.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель  Тогда
				// с покупателем
				
				// инвертируем сумму, по операциям возврата
				Проводка.Сумма = -Проводка.Сумма;	
				
				Проводка.СчетДт                     = СтруктураШапкиДокумента.КоррСчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.Субконто3);
					
				Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
			
			Иначе
				// с поставщиком
				
				Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
				
				Проводка.СчетКт                     = СтруктураШапкиДокумента.КоррСчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.Субконто3);
			
			КонецЕсли; 
			
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаДвижений = ТаблицаДолгаУвеличение.Скопировать();
	ТаблицаДвижений.Свернуть("ВидОперацииКонтрагента, ТипКонтрагента, Контрагент,ДоговорКонтрагента,ВидДоговораКонтрагента,ВалютаВзаиморасчетов,СчетУчетаРасчетовСКонтрагентом,СчетУчетаНДС","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");

	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		
		Если    СтрокаТаблицы.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			// по таким договорам учет НДС не ведется 
			Продолжить;
		КонецЕсли;
		
		Если    СтрокаТаблицы.ВидОперацииКонтрагента = мВидОперацииОплата Тогда
			// в конфигурации ведется учет НДС по отгрузке.
			Продолжить;
		КонецЕсли;
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = "НДС: взаимозачет";
			Проводка.НомерЖурнала               = "";

			Если СтрокаТаблицы.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель  Тогда
				// с покупателем
				
				Проводка.СчетДт                     = СтруктураШапкиДокумента.КоррСчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.Субконто3);
					
				Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
			
			Иначе
				// с поставщиком
						
				// инвертируем сумму, по операциям возврата
				Проводка.Сумма = -Проводка.Сумма;	
		
				Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтрокаТаблицы.ДоговорКонтрагента);
				
				Проводка.СчетКт                     = СтруктураШапкиДокумента.КоррСчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.Субконто3);
			
			КонецЕсли; 
			
		КонецЕсли;

	КонецЦикла;
	
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// 
Процедура ДвиженияПоРегистрамНУПриобретений(СтруктураШапкиДокумента, ТаблицаДолга, Отказ)
	
	Если Не ОтражатьВНалоговомУчете Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если НЕ (    СтруктураШапкиДокумента.ЕстьНДС
		     ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	Увеличение = ТаблицаДолга[0].Увеличение; // Флаг с какой таблицей работем
	// Оперделение события для регистра
	Если ТаблицаДолга[0].ВидОперацииКонтрагента = Перечисления.ВидыОперацииОплатаОтгрузка.Оплата Тогда
		СобытиеОиПНДСПриобретений = Неопределено;
		СобытиеПриобретений 	  = ?(Увеличение,Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику,Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком);
	Иначе
		СобытиеОиПНДСПриобретений = ?(НЕ Увеличение,Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление,Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат);
		СобытиеПриобретений 	  = ?(НЕ Увеличение,Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика,Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику);
	КонецЕсли; 
	
	ТаблицаПриобретений = ТаблицаДолга.Скопировать();
	ТаблицаПриобретений.Свернуть("ВидДоговораКонтрагента,ВалютаВзаиморасчетов,ДоговорКонтрагента,СтавкаНДС,НалоговоеНазначение","СуммаСНДСРегл,СуммаБезНДСРегл,СуммаНДСРегл,ПроводкиСуммаНДСРегл");
	
	НаборДвиженийОиПНДСПриобретений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
	НаборДвиженийПриобретений 	    = Движения.ПриобретенияНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвиженийОиПНДСПриобретений  = НаборДвиженийОиПНДСПриобретений.ВыгрузитьКолонки();
	ТаблицаДвиженийПриобретений 	   = НаборДвиженийПриобретений.ВыгрузитьКолонки();
	
	Инд = 0;
	Пока Инд < ТаблицаПриобретений.Количество() Цикл
		
		СтрокаТаблицыПриобретений = ТаблицаПриобретений[Инд];
		
		Если СтрокаТаблицыПриобретений.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ТаблицаПриобретений.Удалить(СтрокаТаблицыПриобретений);	
			Продолжить;
		КонецЕсли;
		
		Инд = Инд + 1;
		
	КонецЦикла; 
		
	ТаблицаПриобретений.Колонки.СуммаСНДСРегл       .Имя = "СуммаВзаиморасчетов";
	ТаблицаПриобретений.Колонки.СуммаБезНДСРегл     .Имя = "БазаНДС";
	ТаблицаПриобретений.Колонки.СуммаНДСРегл        .Имя = "СуммаНДС";
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвиженийПриобретений);
	ТаблицаДвиженийПриобретений.ЗаполнитьЗначения(Организация        , "Организация");
	ТаблицаДвиженийПриобретений.ЗаполнитьЗначения(СобытиеПриобретений, "Событие");
	
	Если НЕ СобытиеОиПНДСПриобретений = Неопределено Тогда
	
		Инд = 0;
		Пока Инд < ТаблицаПриобретений.Количество() Цикл
			
			СтрокаТаблицыПриобретений = ТаблицаПриобретений[Инд];
			
			// приобретение у нерезидента не отражается в подсистеме учета НДС
			Если НЕ СтрокаТаблицыПриобретений.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
				ТаблицаПриобретений.Удалить(СтрокаТаблицыПриобретений);
				Продолжить;
			КонецЕсли;
			
			Инд = Инд + 1;
			
		КонецЦикла; 
		
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвиженийОиПНДСПриобретений);
		ТаблицаДвиженийОиПНДСПриобретений.ЗаполнитьЗначения(Организация         , "Организация");
		ТаблицаДвиженийОиПНДСПриобретений.ЗаполнитьЗначения(СобытиеОиПНДСПриобретений , "СобытиеНДС");
		
		ТаблицаДвиженийОиПНДСПриобретений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС, "КодОперации");
	
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийПриобретений.Количество() > 0 Тогда
		
		НаборДвиженийПриобретений.мПериод          = Дата;
		НаборДвиженийПриобретений.мТаблицаДвижений = ТаблицаДвиженийПриобретений;
	
		Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
		
		Движения.ПриобретенияНалоговыйУчет.Записать();
		
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийОиПНДСПриобретений.Количество() > 0 Тогда
		
		НаборДвиженийОиПНДСПриобретений.мПериод          = Дата;
		НаборДвиженийОиПНДСПриобретений.мТаблицаДвижений = ТаблицаДвиженийОиПНДСПриобретений;
	
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
		
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры 

//
Процедура ПроводкиПоВДВРПриобретений(ПроводкиНУ, СтруктураШапкиДокумента, ТаблицаДолга, Отказ)
	
	// Налоговый учет
	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		// Учет налога на прибыль не ведется
		Возврат;
	КОнецЕсли;

	// Получим таблицу движений по видам налоговой деятельности
	
	ТаблицаКопия = ТаблицаДолга.Скопировать();
	ТаблицаКопия.Свернуть("ВидДоговораКонтрагента,НалоговоеНазначение,СтатьяВаловыхДоходовРасходов","СуммаВДВР");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
		
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если  СтрокаТаблицы.СуммаВДВР <> 0 
			И СтрокаТаблицы.НалоговоеНазначение.ВидНалоговойДеятельности <> Справочники.ВидыНалоговойДеятельности.НеОблагаемая 
			И НЕ СтрокаТаблицы.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			
			Проводка = ПроводкиНУ.Добавить();

			Проводка.Период                                 = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                             = Истина;
			Проводка.Организация                            = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание                             = "ВР: отгрузка";
			Проводка.НомерЖурнала                           = "";
			
			Если ТаблицаДолга[0].Увеличение Тогда
				Проводка.Сумма                                  = -СтрокаТаблицы.СуммаВДВР;
				Проводка.СчетДт                           		= ПланыСчетов.Налоговый.ВаловыеРасходы;
				Проводка.СубконтоДт.ВидыНалоговойДеятельности  	= СтрокаТаблицы.НалоговоеНазначение.ВидНалоговойДеятельности;
				Проводка.СубконтоДт.СтатьиНалоговогоУчета 		= СтрокаТаблицы.СтатьяВаловыхДоходовРасходов;
				Проводка.СчетКт                           		= ПланыСчетов.Налоговый.ВаловыеРасходы;
				Проводка.СубконтоКт.ВидыНалоговойДеятельности  	= СтрокаТаблицы.НалоговоеНазначение.ВидНалоговойДеятельности;
				Проводка.СубконтоКт.СтатьиНалоговогоУчета 		= СтрокаТаблицы.СтатьяВаловыхДоходовРасходов;
			Иначе
				Проводка.Сумма                                  = СтрокаТаблицы.СуммаВДВР;
				Проводка.СчетДт                           		= ПланыСчетов.Налоговый.ВаловыеРасходы;
				Проводка.СубконтоДт.ВидыНалоговойДеятельности  	= СтрокаТаблицы.НалоговоеНазначение.ВидНалоговойДеятельности;
				Проводка.СубконтоДт.СтатьиНалоговогоУчета 		= СтрокаТаблицы.СтатьяВаловыхДоходовРасходов;
				Проводка.СчетКт                           		= ПланыСчетов.Налоговый.ВаловыеРасходы;
				Проводка.СубконтоКт.ВидыНалоговойДеятельности  	= СтрокаТаблицы.НалоговоеНазначение.ВидНалоговойДеятельности;
				Проводка.СубконтоКт.СтатьиНалоговогоУчета 		= СтрокаТаблицы.СтатьяВаловыхДоходовРасходов;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// 
Процедура ДвиженияПоРегистрамНУПродаж(СтруктураШапкиДокумента, ТаблицаДолга, Отказ)
	
	Если Не ОтражатьВНалоговомУчете Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если НЕ (    СтруктураШапкиДокумента.ЕстьНДС
		     ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль) Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	Увеличение = ТаблицаДолга[0].Увеличение; // Флаг с какой таблицей работем
	// Оперделение события для регистра
	Если ТаблицаДолга[0].ВидОперацииКонтрагента = Перечисления.ВидыОперацииОплатаОтгрузка.Оплата Тогда
		СобытиеОиПНДСПродаж = Неопределено;
		СобытиеПродаж       = ?(НЕ Увеличение,Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем,Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю);
	Иначе
		СобытиеОиПНДСПродаж = ?(Увеличение,Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация,Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат);
		СобытиеПродаж       = ?(Увеличение,Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю,Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя);
	КонецЕсли; 
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		СобытиеОиПНДСПродаж = Неопределено;
	КонецЕсли;
	
	ТаблицаПродаж = ТаблицаДолга.Скопировать();
	
	ТаблицаПродаж.Свернуть("ВидДоговораКонтрагента,ДоговорКонтрагента,СтавкаНДС,НалоговоеНазначение","СуммаСНДСВал,СуммаБезНДСВал,СуммаНДСВал");
	
	ТаблицаПродаж.Колонки.СуммаСНДСВал  .Имя = "СуммаВзаиморасчетов";
	ТаблицаПродаж.Колонки.СуммаБезНДСВал.Имя = "БазаНДС";
	ТаблицаПродаж.Колонки.СуммаНДСВал   .Имя = "СуммаНДС";
	
	НаборДвиженийОиПНДСПродаж = Движения.ОжидаемыйИПодтвержденныйНДСПродаж;
	НаборДвиженийПродажи 	  = Движения.ПродажиНалоговыйУчет;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвиженийОиПНДСПродаж = НаборДвиженийОиПНДСПродаж.ВыгрузитьКолонки();
	ТаблицаДвиженийПродажи 		= НаборДвиженийПродажи.ВыгрузитьКолонки();
	
	Инд = 0;
	Пока ТаблицаПродаж.Количество() > Инд Цикл
	
		СтрокаТаблицыПродаж = ТаблицаПродаж[Инд];
		Если СтрокаТаблицыПродаж.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		
			ТаблицаПродаж.Удалить(СтрокаТаблицыПродаж);	
			Продолжить;
		КонецЕсли;
		
		Инд = Инд + 1;
	
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвиженийПродажи);
	ТаблицаДвиженийПродажи.ЗаполнитьЗначения(Организация        , "Организация");
	ТаблицаДвиженийПродажи.ЗаполнитьЗначения(СобытиеПродаж		, "Событие");
	
	Если НЕ СобытиеОиПНДСПродаж = Неопределено Тогда
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвиженийОиПНДСПродаж);
		ТаблицаДвиженийОиПНДСПродаж.ЗаполнитьЗначения(Организация         , "Организация");
		ТаблицаДвиженийОиПНДСПродаж.ЗаполнитьЗначения(СобытиеОиПНДСПродаж , "СобытиеНДС");
		
		ТаблицаДвиженийОиПНДСПродаж.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС , "КодОперации");
	
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийПродажи.Количество() > 0 Тогда
		
		НаборДвиженийПродажи.мПериод          = Дата;
		НаборДвиженийПродажи.мТаблицаДвижений = ТаблицаДвиженийПродажи;
	
		Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
		
		Движения.ПродажиНалоговыйУчет.Записать();
		
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийОиПНДСПродаж.Количество() > 0 Тогда
		
		НаборДвиженийОиПНДСПродаж.мПериод          = Дата;
		НаборДвиженийОиПНДСПродаж.мТаблицаДвижений = ТаблицаДвиженийОиПНДСПродаж;
	
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
		
		Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // 

//
Процедура ПроводкиПоВДВРПродаж(ПроводкиНУ, СтруктураШапкиДокумента, ТаблицаДолга, Отказ)
	
	// Налоговый учет
	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		// Учет налога на прибыль не ведется
		Возврат;
	КОнецЕсли;

	// Получим таблицу движений по видам налоговой деятельности
	ТаблицаКопия = ТаблицаДолга.Скопировать();
	ТаблицаКопия.Свернуть("ВидДоговораКонтрагента,НалоговоеНазначение,СтатьяВаловыхДоходовРасходов","СуммаВДВР");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если  СтрокаТаблицы.СуммаВДВР <> 0 
			И СтрокаТаблицы.ВидНалоговойДеятельности <> Справочники.ВидыНалоговойДеятельности.НеОблагаемая 
			И НЕ СтрокаТаблицы.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			
			Проводка = ПроводкиНУ.Добавить();

			Проводка.Период                                 = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                             = Истина;
			Проводка.Организация                            = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание                             = "ВД: отгрузка";
			Проводка.НомерЖурнала                           = "";
				
			Если ТаблицаДолга[0].Увеличение Тогда
				
				Проводка.Сумма                                  = СтрокаТаблицы.СуммаВДВР;
				
				Проводка.СчетДт                           		= ПланыСчетов.Налоговый.ВаловыеДоходы;
				Проводка.СубконтоДт.ВидыНалоговойДеятельности  	= СтрокаТаблицы.НалоговоеНазначение.ВидНалоговойДеятельности;
				Проводка.СубконтоДт.СтатьиНалоговогоУчета 		= СтрокаТаблицы.СтатьяВаловыхДоходовРасходов;
				
				Проводка.СчетКт                           		= ПланыСчетов.Налоговый.ВаловыеДоходы;
				Проводка.СубконтоКт.ВидыНалоговойДеятельности  	= СтрокаТаблицы.НалоговоеНазначение.ВидНалоговойДеятельности;
				Проводка.СубконтоКт.СтатьиНалоговогоУчета 		= СтрокаТаблицы.СтатьяВаловыхДоходовРасходов;
				
			Иначе
				
				Проводка.Сумма                                  = - СтрокаТаблицы.СуммаВДВР;
				
				Проводка.СчетДт                           		= ПланыСчетов.Налоговый.ВаловыеДоходы;
				Проводка.СубконтоДт.ВидыНалоговойДеятельности  	= СтрокаТаблицы.НалоговоеНазначение.ВидНалоговойДеятельности;
				Проводка.СубконтоДт.СтатьиНалоговогоУчета 		= СтрокаТаблицы.СтатьяВаловыхДоходовРасходов;
				
				Проводка.СчетКт                           		= ПланыСчетов.Налоговый.ВаловыеДоходы;
				Проводка.СубконтоКт.ВидыНалоговойДеятельности  	= СтрокаТаблицы.НалоговоеНазначение.ВидНалоговойДеятельности;
				Проводка.СубконтоКт.СтатьиНалоговогоУчета 		= СтрокаТаблицы.СтатьяВаловыхДоходовРасходов;
				
			КонецЕсли;	
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	мПорядокСписанияПартий = Новый Структура("Упр,Бух,Нал");
	
	ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВУправленческомУчете Тогда
		
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
		
		// Получим метод списания партий FIFO / LIFO / По средней
		мПорядокСписанияПартий.Вставить("Упр", мУчетнаяПолитика.СпособОценкиМПЗ);
		
		СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗУпр"                    , мУчетнаяПолитика.СпособОценкиМПЗ);
		
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
        // Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация, , Заголовок);
		
		Если НЕ Отказ Тогда
			СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗБух"             , мУчетнаяПолитикаБУ.СпособОценкиМПЗ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете Тогда
		
		мУчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация, , Заголовок);
		
		Если НЕ Отказ Тогда
			СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗНал"             , мУчетнаяПолитикаНУ.СпособОценкиМПЗ);
			
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , мУчетнаяПолитикаНУ.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , мУчетнаяПолитикаНУ.ЕстьНДС);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Контрагент"                      			, "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                      	, "ДоговорКонтрагента");
	СтруктураПолей.Вставить("Сделка"                          			, "Сделка");
	СтруктураПолей.Вставить("ТипКонтрагента"                          	, "ТипКонтрагента");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                    	, "ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"                      	, "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов"                 	, "КратностьВзаиморасчетов");
	СтруктураПолей.Вставить("ВидОперацииКонтрагента"                  	, "ВидОперацииКонтрагента");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"                   	, "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ВидДоговораКонтрагента"                  	, "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("ДоговорОрганизация"                      	, "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("МоментОпределенияБазыНДСПоПокупкам"      	, "ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам");
	СтруктураПолей.Вставить("МоментОпределенияБазыННППоПокупкам"      	, "ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыННППоПокупкам");
	СтруктураПолей.Вставить("МоментОпределенияБазыНДСПоПродажам"      	, "ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам");
	СтруктураПолей.Вставить("МоментОпределенияБазыННППоПродажам"      	, "ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыННППоПродажам");
	СтруктураПолей.Вставить("СделкаВзаиморасчеты"                     	, "Сделка");
	СтруктураПолей.Вставить("СделкаРасчеты"                           	, "Сделка");
	СтруктураПолей.Вставить("СуммаУвеличение"				            , "СуммаУвеличение");
	СтруктураПолей.Вставить("СуммаУменьшение"				            , "СуммаУменьшение");
	СтруктураПолей.Вставить("СтавкаНДС"				              	  	, "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаНДС"				                  	, "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтрокиДокумента"            		    , "НомерСтроки");
	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом"            , "СчетУчетаРасчетов");
	СтруктураПолей.Вставить("СчетУчетаРасчетовПоАвансам"	            , "СчетУчетаАвансов");
	СтруктураПолей.Вставить("СчетУчетаНДС"				              	, "СчетУчетаНДС");
	СтруктураПолей.Вставить("НалоговоеНазначение"            			, "НалоговоеНазначение");
	СтруктураПолей.Вставить("СтатьяВаловыхДоходовРасходов"            	, "СтатьяВаловыхДоходовРасходов");

	РезультатЗапросаПоСуммамДолга = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СуммыДолга", СтруктураПолей);

	ТаблицаДолга = ПодготовитьТаблицуДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиСуммыДолга("СуммыДолга","Сумма долга",ТаблицаДолга, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Подготовим таблицы товаров для проведения.
	ТаблицаДолгаУвеличение = ПодготовитьТаблицуДолгаУвеличение(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента);
	ТаблицаДолгаУменьшение = ПодготовитьТаблицуДолгаУменьшение(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента);

	// Перенести все проверки в отдельную процедуру!!!
	// Проверим суммы по ТЧ
	СуммаУвеличение = ТаблицаДолгаУвеличение.Итог("СуммаДолгаУпр");
	СуммаУменьшение = ТаблицаДолгаУменьшение.Итог("СуммаДолгаУпр");
	
	Если СуммаУвеличение <> СуммаУменьшение Тогда
		// Сделать нормальное сообщение
		Сообщить("Сумма увеличения не равна сумме уменьшения!!!");	
		Отказ = ИСТИНА;
	КонецЕсли; 
	
	// Проверим отношения 
	КоличествоСтрокУвеличение = ТаблицаДолгаУвеличение.Количество();
	КоличествоСтрокУменьшение = ТаблицаДолгаУменьшение.Количество();
	
	Если КоличествоСтрокУвеличение <> 1 И  КоличествоСтрокУменьшение <> 1 Тогда
		// Сделать нормальное сообщение
		Сообщить("Погашение многих многими запрещены!!!");	
		Отказ = ИСТИНА;
	КонецЕсли; 
	
	Если Не Отказ Тогда // Эту проверку делаем только если все остальные проверки не поймали ошибку
		// Проверка корертных операций		
		// Выбираем таблицу с однйо строкой ...
		Если КоличествоСтрокУвеличение = 1 Тогда
			СтрокаОсновнойТаблицы 	= ТаблицаДолгаУвеличение[0]; // Строка таблицы с одной строкой
			ТаблицаПоиска 			= ТаблицаДолгаУменьшение; // Таблица, в которой будем искать недопустимые операции
		Иначе
			СтрокаОсновнойТаблицы 	= ТаблицаДолгаУменьшение[0]; // Строка таблицы с одной строкой
			ТаблицаПоиска 			= ТаблицаДолгаУвеличение; // Таблица, в которой будем искать недопустимые операции
		КонецЕсли;
		
		ДоговорСПоставщиком	= (СтрокаОсновнойТаблицы.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик);
		ДоговорСПокупателем = (СтрокаОсновнойТаблицы.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель);

		СписокНедопустимыхОпераций = Новый СписокЗначений;	
			
		// ... определяем ее операцию ...
		Если ДоговорСПоставщиком Тогда
			Если СтрокаОсновнойТаблицы.ВидОперацииКонтрагента = мВидОперацииОплата Тогда
				// ... сформируем список недопустимых операций		
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.Погашение Тогда
					СписокНедопустимыхОпераций.Добавить("Покупатель"+Строка(СокрЛП(мВидОперацииОтгрузка)));						
					СписокНедопустимыхОпераций.Добавить("Поставщик"+Строка(СокрЛП(мВидОперацииОплата)));						
				ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.Перенос Тогда
					СписокНедопустимыхОпераций.Добавить("Покупатель"+Строка(СокрЛП(мВидОперацииОтгрузка)));						
					СписокНедопустимыхОпераций.Добавить("Покупатель"+Строка(СокрЛП(мВидОперацииОплата)));						
					СписокНедопустимыхОпераций.Добавить("Поставщик"+Строка(СокрЛП(мВидОперацииОтгрузка)));						
				КонецЕсли; 
			ИначеЕсли СтрокаОсновнойТаблицы.ВидОперацииКонтрагента = мВидОперацииОтгрузка Тогда
				// ... сформируем список недопустимых операций						
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.Погашение Тогда
					СписокНедопустимыхОпераций.Добавить("Покупатель"+Строка(СокрЛП(мВидОперацииОплата)));						
					СписокНедопустимыхОпераций.Добавить("Поставщик"+Строка(СокрЛП(мВидОперацииОтгрузка)));						
				ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.Перенос Тогда
					СписокНедопустимыхОпераций.Добавить("Покупатель"+Строка(СокрЛП(мВидОперацииОтгрузка)));						
					СписокНедопустимыхОпераций.Добавить("Покупатель"+Строка(СокрЛП(мВидОперацииОплата)));						
					СписокНедопустимыхОпераций.Добавить("Поставщик"+Строка(СокрЛП(мВидОперацииОплата)));						
				КонецЕсли; 
			КонецЕсли;					
		ИначеЕсли ДоговорСПокупателем Тогда
			Если СтрокаОсновнойТаблицы.ВидОперацииКонтрагента = мВидОперацииОплата Тогда
				// ... сформируем список недопустимых операций						
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.Погашение Тогда
					СписокНедопустимыхОпераций.Добавить("Покупатель"+Строка(СокрЛП(мВидОперацииОплата)));						
					СписокНедопустимыхОпераций.Добавить("Поставщик"+Строка(СокрЛП(мВидОперацииОтгрузка)));						
				ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.Перенос Тогда
					СписокНедопустимыхОпераций.Добавить("Покупатель"+Строка(СокрЛП(мВидОперацииОтгрузка)));						
					СписокНедопустимыхОпераций.Добавить("Поставщик"+Строка(СокрЛП(мВидОперацииОплата)));						
					СписокНедопустимыхОпераций.Добавить("Поставщик"+Строка(СокрЛП(мВидОперацииОтгрузка)));						
				КонецЕсли; 
			ИначеЕсли СтрокаОсновнойТаблицы.ВидОперацииКонтрагента = мВидОперацииОтгрузка Тогда
				// ... сформируем список недопустимых операций						
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.Погашение Тогда
					СписокНедопустимыхОпераций.Добавить("Покупатель"+Строка(СокрЛП(мВидОперацииОтгрузка)));						
					СписокНедопустимыхОпераций.Добавить("Поставщик"+Строка(СокрЛП(мВидОперацииОплата)));						
				ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.Перенос Тогда
					СписокНедопустимыхОпераций.Добавить("Покупатель"+Строка(СокрЛП(мВидОперацииОплата)));						
					СписокНедопустимыхОпераций.Добавить("Поставщик"+Строка(СокрЛП(мВидОперацииОплата)));						
					СписокНедопустимыхОпераций.Добавить("Поставщик"+Строка(СокрЛП(мВидОперацииОтгрузка)));						
				КонецЕсли; 
			КонецЕсли;					
		КонецЕсли; 
		
		// Собственно поиск 
		Для каждого СтрокаТаблицыПоиска Из ТаблицаПоиска Цикл
			// Здесь должен быть поиск недопустимых операций.
			
			ДоговорСПоставщиком	= (СтрокаТаблицыПоиска.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик);
			ДоговорСПокупателем = (СтрокаТаблицыПоиска.ТипКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель);

			Если ДоговорСПоставщиком Тогда
				СтрокаПоиска = "Поставщик";
			ИначеЕсли ДоговорСПокупателем Тогда	
				СтрокаПоиска = "Покупатель";
			КонецЕсли; 
		
			Если СтрокаТаблицыПоиска.ВидОперацииКонтрагента = мВидОперацииОплата Тогда
				СтрокаПоиска = СтрокаПоиска + Строка(СокрЛП(мВидОперацииОплата));
			ИначеЕсли СтрокаТаблицыПоиска.ВидОперацииКонтрагента = мВидОперацииОтгрузка Тогда
				СтрокаПоиска = СтрокаПоиска + Строка(СокрЛП(мВидОперацииОтгрузка));
			КонецЕсли;					
			
			Если НЕ СписокНедопустимыхОпераций.НайтиПоЗначению(СтрокаПоиска) = Неопределено Тогда
				Сообщить("Недопустимая операция в строке " + СтрокаТаблицыПоиска.НомерСтроки + ".");
				Отказ = ИСТИНА;
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаДолга, ТаблицаДолгаУвеличение, ТаблицаДолгаУменьшение, Отказ, Заголовок);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

мВалютаРегламентированногоУчета 		= глЗначениеПеременной("ВалютаРегламентированногоУчета");
мДанныеВалютыРегламентированногоУчета 	= МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);

мВидОперацииОплата	= Перечисления.ВидыОперацииОплатаОтгрузка.Оплата;
мВидОперацииОтгрузка= Перечисления.ВидыОперацииОплатаОтгрузка.Отгрузка;