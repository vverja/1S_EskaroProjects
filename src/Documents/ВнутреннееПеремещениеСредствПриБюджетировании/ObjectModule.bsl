Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Получает курс и кратность документа на основании реквизитов шапки
//
Процедура ОбновитьКурсыДокумента() Экспорт

	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаИсточник",ВалютаИсточник.Код);
	СтруктураГруппаВалют.Вставить("ВалютаПриемник",ВалютаПриемник.Код);
	
	СтруктураКурсыВалют=Бюджетирование.ПолучитьКурсыСценарияДляГруппыВалют(СтруктураГруппаВалют,ПериодПланирования,Сценарий);
	
	КурсИсточник=СтруктураКурсыВалют.ВалютаИсточникКурс;
	КурсПриемник=СтруктураКурсыВалют.ВалютаПриемникКурс;
	
	КратностьИсточник=СтруктураКурсыВалют.ВалютаИсточникКратность;
	КратностьПриемник=СтруктураКурсыВалют.ВалютаПриемникКратность;
		
КонецПроцедуры // ОбновитьКурсДокумента()

//Обновляет курс и сумму документа при изменении валюты
//
Процедура ОбновитьКурсыИСуммуДокумента(СтараяВалютаИсточник) Экспорт

	СтарыйКурс=КурсИсточник;
	СтараяКратность=КратностьИсточник;
	
	ОбновитьКурсыДокумента();
	
	Сумма=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма,
										СтараяВалютаИсточник,ВалютаИсточник,
										СтарыйКурс,КурсИсточник,
										СтараяКратность,КратностьИсточник);
												
КонецПроцедуры // ОбновитьКурсИСуммуДокумента()
 

// Возвращает структуру, содержащую поля шапки, обязательные для заполнения
//
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей - структура с именами реквизитов шапки
//
Функция СтруктураОбязательныхПолейШапка()
	
	СтруктураОбязательныхПолей=Новый Структура;
	СтруктураОбязательныхПолей.Вставить("ПериодПланирования");
	СтруктураОбязательныхПолей.Вставить("СтатьяОборотов");
	СтруктураОбязательныхПолей.Вставить("Ответственный");
	СтруктураОбязательныхПолей.Вставить("Состояние");
		
	Возврат СтруктураОбязательныхПолей;
	
КонецФункции // СтруктураОбязательныхПолейШапка()

// Возвращает таблицу значений для использования в движениях
// регистра бухгалтерии "Бюджетирование"
//
Функция СформироватьПроводкиПоДаннымДокумента(СтруктураДанныхШапки)
	
	Запрос=Новый Запрос;
	ТекстЗапроса="
	|ВЫБРАТЬ
	|ПеремещениеСредств.ПериодПланирования КАК Период,
	|ДанныеСчетДт.Счет КАК СчетДт,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто1 = ""ЦФО"" ТОГДА ПеремещениеСредств.ЦФОПриемник 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто1 = ""Проекты"" ТОГДА ПеремещениеСредств.ПроектПриемник 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто1 = ""Контрагенты"" ТОГДА ПеремещениеСредств.КонтрагентПриемник 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто1 = ""Номенклатура"" ТОГДА ПеремещениеСредств.НоменклатураПриемник 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто1 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт1,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто2 = ""ЦФО"" ТОГДА ПеремещениеСредств.ЦФОПриемник 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто2 = ""Проекты"" ТОГДА ПеремещениеСредств.ПроектПриемник 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто2 = ""Контрагенты"" ТОГДА ПеремещениеСредств.КонтрагентПриемник 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто2 = ""Номенклатура"" ТОГДА ПеремещениеСредств.НоменклатураПриемник 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто2 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт2,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто3 = ""ЦФО"" ТОГДА ПеремещениеСредств.ЦФОПриемник 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто3 = ""Проекты"" ТОГДА ПеремещениеСредств.ПроектПриемник 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто3 = ""Контрагенты"" ТОГДА ПеремещениеСредств.КонтрагентПриемник 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто3 = ""Номенклатура"" ТОГДА ПеремещениеСредств.НоменклатураПриемник 
	|	КОГДА ДанныеСчетДт.НаименованиеСубконто3 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт3,
	|ДанныеСчетКт.Счет КАК СчетКт,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто1 = ""ЦФО"" ТОГДА ПеремещениеСредств.ЦФОИсточник 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто1 = ""Проекты"" ТОГДА ПеремещениеСредств.ПроектИсточник 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто1 = ""Контрагенты"" ТОГДА ПеремещениеСредств.КонтрагентИсточник 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто1 = ""Номенклатура"" ТОГДА ПеремещениеСредств.НоменклатураИсточник 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто1 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт1,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто2 = ""ЦФО"" ТОГДА ПеремещениеСредств.ЦФОИсточник 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто2 = ""Проекты"" ТОГДА ПеремещениеСредств.ПроектИсточник 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто2 = ""Контрагенты"" ТОГДА ПеремещениеСредств.КонтрагентИсточник 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто2 = ""Номенклатура"" ТОГДА ПеремещениеСредств.НоменклатураИсточник 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто2 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт2,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто3 = ""ЦФО"" ТОГДА ПеремещениеСредств.ЦФОИсточник 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто3 = ""Проекты"" ТОГДА ПеремещениеСредств.ПроектИсточник 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто3 = ""Контрагенты"" ТОГДА ПеремещениеСредств.КонтрагентИсточник 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто3 = ""Номенклатура"" ТОГДА ПеремещениеСредств.НоменклатураИсточник 
	|	КОГДА ДанныеСчетКт.НаименованиеСубконто3 = ""Статьи оборотов"" ТОГДА ТаблицаПроводок.Ссылка 
	|	ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт3,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.Валютный ТОГДА ПеремещениеСредств.ВалютаПриемник 
	|	ИНАЧЕ NULL КОНЕЦ КАК ВалютаДт,
	|	ПеремещениеСредств.Сумма*ТаблицаПроводок.КоэффициентДляСуммы КАК ВалютнаяСуммаКт, 
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.Валютный ТОГДА ПеремещениеСредств.ВалютаИсточник 
	|	ИНАЧЕ NULL КОНЕЦ КАК ВалютаКт,
	|ТаблицаПроводок.Ссылка КАК СтатьяОборотов,
	|ВЫБОР 
	|	КОГДА ДанныеСчетДт.Количественный ТОГДА ПеремещениеСредств.КоличествоПриемник * ТаблицаПроводок.КоэффициентДляКоличества 
	|	ИНАЧЕ NULL КОНЕЦ КАК КоличествоДт,
	|ВЫБОР 
	|	КОГДА ДанныеСчетКт.Количественный ТОГДА ПеремещениеСредств.КоличествоИсточник * ТаблицаПроводок.КоэффициентДляКоличества 
	|	ИНАЧЕ NULL КОНЕЦ КАК КоличествоКт
	|ИЗ
	|	Документ.ВнутреннееПеремещениеСредствПриБюджетировании КАК ПеремещениеСредств
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиОборотовПоБюджетам.ШаблоныПроводок КАК ТаблицаПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Бюджетирование.Ссылка КАК Счет,
	|			Бюджетирование.Валютный КАК Валютный,
	|			Бюджетирование.Количественный КАК Количественный,
	|			БюджетированиеВидыСубконто1.ВидСубконто.Наименование КАК НаименованиеСубконто1,
	|			БюджетированиеВидыСубконто2.ВидСубконто.Наименование КАК НаименованиеСубконто2,
	|			БюджетированиеВидыСубконто3.ВидСубконто.Наименование КАК НаименованиеСубконто3
	|		ИЗ
	|			ПланСчетов.Бюджетирование КАК Бюджетирование
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто1
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто1.Ссылка И (БюджетированиеВидыСубконто1.НомерСтроки = 1)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто2
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто2.Ссылка И (БюджетированиеВидыСубконто2.НомерСтроки = 2)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто3
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто3.Ссылка И (БюджетированиеВидыСубконто3.НомерСтроки = 3)) КАК ДанныеСчетДт
	|		ПО ТаблицаПроводок.СчетДт = ДанныеСчетДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Бюджетирование.Ссылка КАК Счет,
	|			Бюджетирование.Валютный КАК Валютный,
	|			Бюджетирование.Количественный КАК Количественный,
	|			БюджетированиеВидыСубконто1.ВидСубконто.Наименование КАК НаименованиеСубконто1,
	|			БюджетированиеВидыСубконто2.ВидСубконто.Наименование КАК НаименованиеСубконто2,
	|			БюджетированиеВидыСубконто3.ВидСубконто.Наименование КАК НаименованиеСубконто3
	|		ИЗ
	|			ПланСчетов.Бюджетирование КАК Бюджетирование
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто1
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто1.Ссылка И (БюджетированиеВидыСубконто1.НомерСтроки = 1)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто2
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто2.Ссылка И (БюджетированиеВидыСубконто2.НомерСтроки = 2)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто3
	|				ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто3.Ссылка И (БюджетированиеВидыСубконто3.НомерСтроки = 3)) КАК ДанныеСчетКт
	|		ПО ТаблицаПроводок.СчетКт = ДанныеСчетКт.Счет
	|	ПО ПеремещениеСредств.СтатьяОборотов = ТаблицаПроводок.Ссылка
	|ГДЕ
	|	ПеремещениеСредств.Ссылка = &Ссылка";
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	ТабПроводокДокумента=Запрос.Выполнить().Выгрузить();
				
Возврат ТабПроводокДокумента;

КонецФункции // СформироватьПроводкиПоДаннымДокумента()

Процедура ПроверкаЗапретаИзменений(Отказ)
	
	Запрос=Новый Запрос;
	
	ТекстЗапроса="ВЫБРАТЬ
	|	ПеремещениеСредств.ПериодПланирования КАК Период,
	|	ПеремещениеСредств.Сценарий КАК Сценарий,
	|	ПеремещениеСредств.ЦФОИсточник КАК ЦФОИсточник,
	|	ПеремещениеСредств.ПроектИсточник КАК ПроектИсточник,
	|	ПеремещениеСредств.ЦФОПриемник КАК ЦФОПриемник,
	|	ПеремещениеСредств.ПроектПриемник КАК ПроектПриемник,
	|	ПеремещениеСредств.СтатьяОборотов КАК СтатьяОборотов,
	|	ГраницыПланированияИсточник.ГраницаФиксации КАК ГраницаФиксацииИсточник,
	|	ГраницыПланированияПриемник.ГраницаФиксации КАК ГраницаФиксацииПриемник
	|ИЗ
	|		Документ.ВнутреннееПеремещениеСредствПриБюджетировании КАК ПеремещениеСредств
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ
	|	ГраницыПериодов.Сценарий КАК Сценарий,
	|	ГраницыПериодов.ЦФО КАК ЦФО,
	|	ГраницыПериодов.Проект КАК Проект,
	|	МАКСИМУМ(ГраницыПериодов.ГраницаФиксации) КАК ГраницаФиксации
	|ИЗ
	|		РегистрСведений.ГраницыПериодовБюджетирования КАК ГраницыПериодов				
	|				
	|СГРУППИРОВАТЬ ПО
	|	ГраницыПериодов.Сценарий,
	|	ГраницыПериодов.ЦФО,
	|	ГраницыПериодов.Проект) КАК ГраницыПланированияИсточник
	|ПО ГраницыПланированияИсточник.Сценарий=ПеремещениеСредств.Сценарий
	| И (ПеремещениеСредств.ЦФОИсточник = ГраницыПланированияИсточник.ЦФО ИЛИ ГраницыПланированияИсточник.ЦФО = &ПустойЦФО) 
	| И (ПеремещениеСредств.ПроектИсточник = ГраницыПланированияИсточник.Проект ИЛИ ГраницыПланированияИсточник.Проект = &ПустойПроект)
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ
	|	ГраницыПериодов.Сценарий КАК Сценарий,
	|	ГраницыПериодов.ЦФО КАК ЦФО,
	|	ГраницыПериодов.Проект КАК Проект,
	|	МАКСИМУМ(ГраницыПериодов.ГраницаФиксации) КАК ГраницаФиксации
	|ИЗ
	|		РегистрСведений.ГраницыПериодовБюджетирования КАК ГраницыПериодов				
	|				
	|СГРУППИРОВАТЬ ПО
	|	ГраницыПериодов.Сценарий,
	|	ГраницыПериодов.ЦФО,
	|	ГраницыПериодов.Проект) КАК ГраницыПланированияПриемник
	|ПО ГраницыПланированияПриемник.Сценарий=ПеремещениеСредств.Сценарий
	| И (ПеремещениеСредств.ЦФОПриемник = ГраницыПланированияПриемник.ЦФО ИЛИ ГраницыПланированияПриемник.ЦФО = &ПустойЦФО) 
	| И (ПеремещениеСредств.ПроектПриемник = ГраницыПланированияПриемник.Проект ИЛИ ГраницыПланированияПриемник.Проект = &ПустойПроект)
	|    ГДЕ ПеремещениеСредств.Ссылка=&Ссылка";
	
	Запрос.Текст=ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Запрос.УстановитьПараметр("ПустойЦФО",Новый(Тип("СправочникСсылка.Подразделения")));
	Запрос.УстановитьПараметр("ПустойПроект",Новый(Тип("СправочникСсылка.Проекты")));
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если (НЕ РезультатЗапроса.ГраницаФиксацииИсточник=NULL ) И (РезультатЗапроса.Период<=РезультатЗапроса.ГраницаФиксацииИсточник) Тогда
			
			Сообщить("Попытка изменения зафиксированного плана:
			|Сценарий планирования: "+Сценарий+"
			|Статья оборотов: "+РезультатЗапроса.СтатьяОборотов+"
			|ЦФО: "+РезультатЗапроса.ЦФОИсточник+"
			|Проект: "+РезультатЗапроса.ПроектИсточник+"
			|Период планирования: "+РезультатЗапроса.Период+"
			|Граница фиксации планов: "+РезультатЗапроса.ГраницаФиксацииИсточник);
			
			Отказ=Истина;
			
		КонецЕсли;
		
		Если (НЕ РезультатЗапроса.ГраницаФиксацииПриемник=NULL ) И (РезультатЗапроса.Период<=РезультатЗапроса.ГраницаФиксацииПриемник) Тогда
			
			Сообщить("Попытка изменения зафиксированного плана:
			|Сценарий планирования: "+Сценарий+"
			|Статья оборотов: "+РезультатЗапроса.СтатьяОборотов+"
			|ЦФО: "+РезультатЗапроса.ЦФОПриемник+"
			|Проект: "+РезультатЗапроса.ПроектПриемник+"
			|Период планирования: "+РезультатЗапроса.Период+"
			|Граница фиксации планов: "+РезультатЗапроса.ГраницаФиксацииПриемник);
			
			Отказ=Истина;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ПроверкаЗапретаИзменений()

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок)
	
	ПроверкаЗапретаИзменений(Отказ);
	
	Если Не Отказ Тогда
	
	// По регистру бухгалтерии "Бюджетирование"
	
	ТабПроводокДокумента=СформироватьПроводкиПоДаннымДокумента(СтруктураДанныхШапки);
	ТабПроводокДокумента.Колонки.Добавить("Сценарий");
	ТабПроводокДокумента.ЗаполнитьЗначения(Сценарий,"Сценарий");
	
	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",СтруктураДанныхШапки.ВалютаУпрУчетаКод);
	СтруктураГруппаВалют.Вставить("ВалютаСценария",СтруктураДанныхШапки.СценарийВалютаКод);
	
	СтруктураКурсыВалют=Бюджетирование.ПолучитьКурсыСценарияДляГруппыВалют(СтруктураГруппаВалют,ПериодПланирования,Сценарий);
	
	ТабПроводокДокумента.Колонки.Добавить("СуммаУпр");
	ТабПроводокДокумента.Колонки.Добавить("СуммаСценария");
	ТабПроводокДокумента.Колонки.Добавить("ВалютнаяСуммаДт");

	Для Каждого Проводка Из ТабПроводокДокумента Цикл
		Проводка.СуммаУпр=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Проводка.ВалютнаяСуммаКт, ВалютаИсточник, СтруктураКурсыВалют.ВалютаУпрУчета, КурсИсточник, СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
	               КратностьИсточник, СтруктураКурсыВалют.ВалютаУпрУчетаКратность);
		Проводка.СуммаСценария=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Проводка.ВалютнаяСуммаКт, ВалютаИсточник, СтруктураКурсыВалют.ВалютаСценария, КурсИсточник, СтруктураКурсыВалют.ВалютаСценарияКурс, 
	               КратностьИсточник, СтруктураКурсыВалют.ВалютаСценарияКратность);
		Проводка.ВалютнаяСуммаДт=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Проводка.ВалютнаяСуммаКт, ВалютаИсточник, ВалютаПриемник, КурсИсточник, КурсПриемник, 
	               КратностьИсточник, КратностьПриемник);
	КонецЦикла;
	
	НаборДвижений=Движения.Бюджетирование;
	
	НаборДвижений.мТаблицаДвижений   = ТабПроводокДокумента;
    Движения.Бюджетирование.ВыполнитьДвижения();
	
	КонецЕсли;
					
КонецПроцедуры // ДвиженияПоРегистрам() 	

Процедура ОбработкаПроведения(Отказ, Режим)
	
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураДанныхШапки=Новый Структура;
	
	СтруктураДанныхШапки.Вставить("СценарийПериодичность",Сценарий.Периодичность);
	СтруктураДанныхШапки.Вставить("СценарийВалютаКод",Сценарий.Валюта.Код);
	СтруктураДанныхШапки.Вставить("ВалютаУпрУчетаКод",глЗначениеПеременной("ВалютаУправленческогоУчета").Код);
	СтруктураДанныхШапки.Вставить("РегистрКурсовВалют",?(Сценарий.ИспользоватьКурсыСценария,"КурсыВалютПоСценариям","КурсыВалют"));
	СтруктураДанныхШапки.Вставить("ИспользоватьКурсыСценария",Сценарий.ИспользоватьКурсыСценария);

	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапка(), Отказ, Заголовок);
	
	Если Не Отказ Тогда
		
		
		ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок);
		
		
	КонецЕсли;		
	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ,РежимЗаписи,РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	
	Если НЕ (НоменклатураИсточник=Неопределено) И НоменклатураИсточник.Пустая() Тогда
		НоменклатураИсточник=Неопределено;
	КонецЕсли;
	
	Если НЕ (НоменклатураПриемник=Неопределено) И НоменклатураПриемник.Пустая() Тогда
		НоменклатураПриемник=Неопределено;
	КонецЕсли;	
	
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроверкаЗапретаИзменений(Отказ);
	
	
	
КонецПроцедуры


