////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоШапке(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратНаРаботу.Дата,
	|	ВозвратНаРаботу.Ссылка
	|ИЗ
	|	Документ.ВозвратНаРаботу КАК ВозвратНаРаботу
	|ГДЕ
	|	ВозвратНаРаботу.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Работники" документа
//
// Параметры:
//	Режим	- режим проведения.
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРаботники(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",		Дата('00010101'));

	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвижений":
	// 1. Выборка "ТЧРаботники": 
	//		Выбираются строки документа.  
	// 2. Выборка "ДанныеПоРаботникуДоНазначения": 
	//		Для каждой строки ТЧРаботники выполняем срез по регистру РегистрСведенийРаботники на дату ДатаВозврата
	//		для выполнения движений и проверки "Работает ли работник на дату возврата"
	//		(Использует данные выборки "ДатыПоследнегоДвиженияРаботника")
	// 3. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением реквизитов "Сотрудник" и ДатаВозврата
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботники":
	//		Выбираются строки документа 
	// 2. Выборка "РегистрСведенийРаботники":
	//		Для каждой строки ТЧРаботники ищем движения по регистру РегистрСведенийРаботники на дату возврата	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботники.Сотрудник,
	|	ТЧРаботники.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ТЧРаботники.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботники.ДатаВозврата,
	|	ТЧРаботники.ЗаниматьСтавку,
	|	ДанныеПоРаботникуДоНазначения.Подразделение КАК ПрежнееПодразделение,
	|	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
	|	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	ИмеющиесяСостояния.Состояние КАК КонфликтноеСостояние,
	|	ИмеющиесяСостояния.Регистратор.Представление КАК КонфликтныйДокумент
	|ИЗ
	|	Документ.ВозвратНаРаботу.Работники КАК ТЧРаботники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РегистрСведенийРаботники.Период) КАК ДатаДвижения
	|		ИЗ
	|			Документ.ВозвратНаРаботу.Работники КАК ТЧРаботники
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РегистрСведенийРаботники
	|				ПО РегистрСведенийРаботники.ФизЛицо = ТЧРаботники.Сотрудник.Физлицо
	|					И РегистрСведенийРаботники.Период <= ТЧРаботники.ДатаВозврата
	|		ГДЕ
	|			ТЧРаботники.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботники.НомерСтроки) КАК ДатыПоследнегоДвиженияРаботника
	|		ПО ДатыПоследнегоДвиженияРаботника.НомерСтроки = ТЧРаботники.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК ДанныеПоРаботникуДоНазначения
	|		ПО ДанныеПоРаботникуДоНазначения.ФизЛицо = ТЧРаботники.Сотрудник.Физлицо
	|			И ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнегоДвиженияРаботника.ДатаДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботники2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ВозвратНаРаботу.Работники КАК ТЧРаботники
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратНаРаботу.Работники КАК ТЧРаботники2
	|				ПО (ТЧРаботники2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботники.НомерСтроки > ТЧРаботники2.НомерСтроки
	|					И ТЧРаботники.ДатаВозврата = ТЧРаботники2.ДатаВозврата
	|					И ТЧРаботники.Сотрудник.Физлицо = ТЧРаботники2.Сотрудник.Физлицо
	|		ГДЕ
	|			ТЧРаботники.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботники.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботники.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботников КАК ИмеющиесяСостояния
	|		ПО ТЧРаботники.ДатаВозврата = ИмеющиесяСостояния.Период
	|			И ТЧРаботники.Ссылка <> ИмеющиесяСостояния.Регистратор
	|			И ТЧРаботники.Сотрудник.Физлицо = ИмеющиесяСостояния.Физлицо
	|ГДЕ
	|	ТЧРаботники.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботники()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Работники" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам. 
//  Отказ        - флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
		
	// ДатаВозврата
	НетДатыВозврата = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаВозврата);
	Если НетДатыВозврата Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата возврата на работу!", Отказ, Заголовок);
	КонецЕсли;
		
	Если НетСотрудника ИЛИ НетДатыВозврата Тогда
		Возврат;
	КонецЕсли;
		
	// Проверка: ранее работник должен быть принят на работу
	Если ВыборкаПоСтрокамДокумента.ПрежняяСтавка = NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаВозврата, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
		Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
			
	ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяСтавка = 0 Тогда	
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаВозврата, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
		Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
			
	КонецЕсли;

	// Сотрудник указан дважды
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаСообщениеОбОшибке = "задана повторяющаяся строка (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: в регистре уже есть такое движение
	Если ВыборкаПоСтрокамДокумента.КонфликтноеСостояние <> NULL Тогда
		СтрокаСообщениеОбОшибке = "работник уже переведен в состояние """ + ВыборкаПоСтрокамДокумента.КонфликтноеСостояние + """ документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

// Создает и заполняет структуру, содержащую имена регистров сведений 
// по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	
	СтруктураПроведенияПоРегистрамСведений.Вставить("СостояниеРаботников");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПериодыСостоянийРаботников");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники,  
		  СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "СостояниеРаботников";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
		
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период			= ВыборкаПоРаботники.ДатаВозврата;

		// Измерения
		Движение.Физлицо		= ВыборкаПоРаботники.Физлицо;

		// Ресурсы
		Движение.Состояние		= Перечисления.СостоянияРаботника.Работает;
			
	КонецЕсли;
	
	ИмяРегистра = "ПериодыСостоянийРаботников";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
		Движение = Движения[ИмяРегистра].Добавить();
			
		// Измерения
		Движение.Физлицо		= ВыборкаПоРаботники.Физлицо;
		Движение.ДатаОкончания	= ВыборкаПоРаботники.ДатаВозврата;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи.
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                 накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ЗанятыеРабочиеМеста");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, 
		  СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "ЗанятыеРабочиеМеста";
	Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

		Если ВыборкаПоРаботники.ЗаниматьСтавку Тогда
			// займем ставки
			Движение = Движения[ИмяРегистра].Добавить();

			// Свойства
			Движение.Период					= ВыборкаПоРаботники.ДатаВозврата;
			Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
			

			// Измерения
			Движение.Подразделение			= ВыборкаПоРаботники.ПрежнееПодразделение;
			Движение.Должность				= ВыборкаПоРаботники.ПрежняяДолжность;

			// Ресурсы
			Движение.Количество				= ВыборкаПоРаботники.ПрежняяСтавка;
		КонецЕсли; 

   КонецЕсли; 

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления);
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений);

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботники(Режим);
			ВыборкаПоРаботники = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботники.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, Отказ, Заголовок);
				
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамНакопления);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамСведений);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ОтсутствиеНаРаботе") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.Проведен Тогда
			
			// Заполнение табличной части. 
			Для Каждого ТекСтрока Из Основание.Работники Цикл
				Если ЗначениеЗаполнено(ТекСтрока.ДатаОкончания) и ТекСтрока.НапомнитьПоЗавершении Тогда
					НоваяСтрока = Работники.Добавить();
					НоваяСтрока.Сотрудник		= ТекСтрока.Сотрудник;
					НоваяСтрока.ДатаВозврата	= ТекСтрока.ДатаОкончания + 86400;
					НоваяСтрока.ЗаниматьСтавку	= ТекСтрока.ОсвобождатьСтавку;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Работники);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.КадровыеПриказы.Добавить();
		ЗаписьРегистрации.Период      = Дата;
		ЗаписьРегистрации.Регистратор = Ссылка;
	КонецЕсли;
	
	Движения.ПериодыСостоянийРаботников.РежимЗаписиРегистратора = РежимЗаписи;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
