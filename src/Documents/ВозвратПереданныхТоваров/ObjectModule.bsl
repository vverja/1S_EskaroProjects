Перем ТаблицаПоТоварам, ТаблицаПоТаре;
Перем мУдалятьДвижения;


Перем мУчетнаяПолитика;						// (Общ)
Перем мУчетнаяПолитикаБУ;

Перем мВалютаРегламентированногоУчета Экспорт;

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ);

КонецПроцедуры

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
 		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТаре", СчетаУчета.СчетУчетаТарыПокупателя);
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции 

// Процедура выполняет заполнение табличной части по приходному ордеру товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОрдеру(ДокументОснование, ТабличнаяЧасть) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	ИмяТабличнойЧасти = "Товары";

	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ДокТовары.НомерСтроки) КАК НомерСтроки,
	|	ДокТовары.Номенклатура,
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоДокументу,
	|	NULL                                               КАК ЦенаВРознице, " + 
	?(ТабличнаяЧасть = Товары, "
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры, ", "") + "
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоСерии, 
	|	МАКСИМУМ(Остатки.КоличествоОстаток)                КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары." + ИмяТабличнойЧасти + " КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура" + 
	?(ТабличнаяЧасть = Товары, "
	| И ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры", "") + " 
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура" +
	?(ТабличнаяЧасть = Товары, ",
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры", "") + "
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете);
			
		КонецЕсли;

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты, СтруктураШапкиДокумента)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	Если ВозвратнаяТара.Количество() > 0 Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ")
			  + ", СчетУчетаРасчетовПоТаре"; 
	КонецЕсли;
	
	
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Процедура выполняет проверку документа на корректность заполнения
//  Параметры:
//		Заголовок - заголовок докуумента при проведении
//		Отказ     - флаг отказа от проведения документа
//		СтруктураШапкиДокумента - структура с данными шапки документа
//
Процедура ПроверкаРеквизитов(Заголовок, Отказ, СтруктураШапкиДокумента)
	
	// Создать списки реквизитов для проверки
	РеквизитыШапки   = "Организация, СкладОрдер, ВидПоступления, КурсВзаиморасчетов, КратностьВзаиморасчетов";
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ОтЗаказчика Тогда
		РеквизитыШапки = РеквизитыШапки + ", Заказ";
	КонецЕсли;
	ДополнитьРеквизитыШапкиРегл(РеквизитыШапки, СтруктураШапкиДокумента);
	
	РеквизитыТабПрод = "Номенклатура, Количество, ЕдиницаИзмерения, ДокументПартии";
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ИзПереработки Тогда
		РеквизитыТабПрод = РеквизитыТабПрод + ", Качество";
	КонецЕсли;
	
	РеквизитыТабТара = "Номенклатура, Количество, Сумма";
	
	
	// Выполнить проверку 
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,                   Новый Структура(РеквизитыШапки),   Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары",         Новый Структура(РеквизитыТабПрод), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", Новый Структура(РеквизитыТабТара), Отказ, Заголовок);
	
	// Прочие проверки
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с НТТ!", Отказ, Заголовок);
	КонецЕсли;
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
    СтруктураПолей.Вставить("КоличествоДок"             , "Количество");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям", "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("Качество"                  , "Качество");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Коэффициент"     			, "Коэффициент");
	СтруктураПолей.Вставить("ДокументПартии"            , "ДокументПартии");
	СтруктураПолей.Вставить("Цена"                  	, "Цена");
	СтруктураПолей.Вставить("Сумма"     				, "Сумма");
	СтруктураПолей.Вставить("СчетУчетаБУ"               , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетПередачиБУ"            , "СчетПередачиБУ");
	СтруктураПолей.Вставить("НалоговоеНазначение"       , "НалоговоеНазначение");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	
	//Заполнение счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", 		 	ТаблицаПоТоварам, 	СтруктураШапкиДокумента);	
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"         			, "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"		, "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("КоличествоДок" , "Количество"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураПолей.Вставить("Набор"         , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("НомерСтроки"   , "НомерСтроки");
	СтруктураПолей.Вставить("ДокументПартии", "ДокументПартии");
	СтруктураПолей.Вставить("Себестоимость" , "Себестоимость");
	СтруктураПростыхПолей = Новый Структура();
	
	// Дополним полями, нужными для регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей);
	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей);
    
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = РезультатЗапросаПоТаре.Выгрузить();
	// Порядок вызова в данном случае важен
	ПогрешностиОкругления     = Новый Соответствие;
    ПодготовитьТаблицуТарыРегл(ТаблицаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТарыУпр(ТаблицаПоТаре, СтруктураШапкиДокумента);
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ОтЗаказчика Тогда
		ПредставлениеТабЧасти = "Продукция";
	Иначе
		ПредставлениеТабЧасти = "Материалы";
	КонецЕсли;

	// Схемы реализации должны быть заполнены правильно
	СтруктураПараметровПроверки = Новый Структура;
	СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетВычетовИзДоходов");
	СтруктураПараметровПроверки.Вставить("СчетРасходовБУ", "СчетСебестоимостиПриВозврате");
	БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, "ВозвратнаяТара", , ТаблицаПоТаре, 
							                             СтруктураПараметровПроверки,
														 СтруктураШапкиДокумента,
							                             Отказ, Заголовок);	
														 
	// Прочие проверки
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок, "СкладОрдер");
	КонецЕсли;
														 
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ТаблицаПоТоварам,
		"Товары",
		Отказ, 
		Заголовок, 
		"Поступление",     // ВидОперации
		Ложь               // ЭтоЗатраты 
	);	
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ТаблицаПоТаре,
		"Возвратная тара",
		Отказ, 
		Заголовок, 
		"Реализация",    // ВидОперации
		Ложь             // ЭтоЗатраты 
	);	
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьПризнакАмортизируетсяПриПоступлении(
			ТаблицаПоТоварам, // ТаблицаПоТоварам
			ТаблицаПоТаре     // ТаблицаПоТаре
		);
	КонецЕсли; 	
	
КонецПроцедуры // ПроверкаРеквизитов()

// Функция возвращает структуру с данными шапки документа, дополненными
// параметрами договора, валютами взаиморасчетов и курсами валют
//
Функция ПолучитьДанныеДокумента(СтруктураШапкиДокумента)
	
	// Получим данные документа
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "Константы"           , "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "Константы"           , "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                   , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "Заказ"               , "ВидОперации"                   , "ЗаказВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"  , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда 
		// Тип значения СкладОрдер - СправочникСсылка.Склады (это обеспечивается в ПередЗаписью)
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "ВидСклада",       "ВидСклада");
	Иначе 
		// Тип значения СкладОрдер - ДокументСсылка.ПриходныйОрдерНаТовары
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "Склад.ВидСклада", "ВидСклада");
	КонецЕсли;
	
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	Возврат УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецФункции // ПолучитьДанныеДокумента()

// Процедура формирует движения по регистру "ТоварыОрганизаций"
Процедура ДвиженияТоварыОрганизаций(Заголовок, СтруктураШапкиДокумента, Отказ, РежимПроведения)	
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете
	 ИЛИ СтруктураШапкиДокумента.ВидПоступления <> Перечисления.ВидыПоступленияТоваров.НаСклад
	Тогда
		Возврат;
	КонецЕсли; 	

	НаборДвижений   = Движения.ТоварыОрганизаций;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Организация         = Организация;
		НоваяСтрока.Номенклатура        = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры   = СтрокаТЧ.СерияНоменклатуры;
		НоваяСтрока.Количество          = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент /СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			НоваяСтрока.Склад = Неопределено;
		Иначе
			Если ТипЗнч(СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
				НоваяСтрока.Склад = СкладОрдер;
			Иначе
				НоваяСтрока.Склад = СкладОрдер.Склад;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ИзПереработки Тогда
			НоваяСтрока.Качество               = СтрокаТЧ.Качество;
		Иначе
			НоваяСтрока.Качество               = Справочники.Качество.Новый;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияТоварыОрганизаций()

// Процедура формирует движения по регистру "ТоварыОрганизацийРегл"
Процедура ДвиженияТоварыОрганизацийРегл(Заголовок, СтруктураШапкиДокумента, Отказ, РежимПроведения)	
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли; 	
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
		Возврат;
	КонецЕсли; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	

	НаборДвижений   = Движения.ТоварыОрганизацийРегл;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Организация                = Организация;
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры          = СтрокаТЧ.СерияНоменклатуры;
		НоваяСтрока.Количество                 = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент /СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		
		Если Не ВестиПартионныйУчетПоСкладамРегл Тогда
			НоваяСтрока.Склад = Неопределено;
		Иначе
			Если ТипЗнч(СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
				НоваяСтрока.Склад = СкладОрдер;
			Иначе
				НоваяСтрока.Склад = СкладОрдер.Склад;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ИзПереработки Тогда
			НоваяСтрока.Качество               = СтрокаТЧ.Качество;
		Иначе
			НоваяСтрока.Качество               = Справочники.Качество.Новый;
		КонецЕсли;
		
		НоваяСтрока.СчетУчетаБУ         = СтрокаТЧ.СчетУчетаБУ;
		НоваяСтрока.НалоговоеНазначение = СтрокаТЧ.НалоговоеНазначение;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Организация                = Организация;
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
		
		Если Не ВестиПартионныйУчетПоСкладамРегл Тогда
			НоваяСтрока.Склад = Неопределено;
		Иначе
			Если ТипЗнч(СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
				НоваяСтрока.Склад = СкладОрдер;
			Иначе
				НоваяСтрока.Склад = СкладОрдер.Склад;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Качество               = Справочники.Качество.Новый;
		
		НоваяСтрока.СчетУчетаБУ         = СтрокаТЧ.СчетУчетаБУ;
		НоваяСтрока.НалоговоеНазначение = СтрокаТЧ.НалоговоеНазначение;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияТоварыОрганизацийРегл()

// Процедура формирует движения по регистру "ЗаказыПокупателей"
//
Процедура ДвиженияЗаказыПокупателей(СтруктураШапкиДокумента)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	 ИЛИ НЕ ЗначениеЗаполнено(Заказ) 
	 ИЛИ ТипЗНЧ(Заказ) <> Тип("ДокументСсылка.ЗаказПоставщику")
	Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений   = Движения.ЗаказыПокупателей;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
		НоваяСтрока.ЗаказПокупателя = Заказ;
		НоваяСтрока.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВПереработку;
		
		НоваяСтрока.Количество = - СтрокаТЧ.Количество;
		НоваяСтрока.СуммаУпр= - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.Сумма, ВалютаДокумента,
									СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
									СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
									СтруктураШапкиДокумента.КратностьДокумента, 
									СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													 
		НоваяСтрока.СуммаВзаиморасчетов	= - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.Сумма, ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
												СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, 
												КратностьВзаиморасчетов);
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьРасход();
	
КонецПроцедуры // ДвиженияТоварыНаСкладеУпр()   

// Процедура формирует движения по регистру "ТоварыНаСкладе"
//
Процедура ДвиженияТоварыНаСкладеУпр(СтруктураШапкиДокумента, Заголовок, Отказ, РежимПроведения)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	 ИЛИ СтруктураШапкиДокумента.ВидПоступления <> Перечисления.ВидыПоступленияТоваров.НаСклад
	Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений   = Движения.ТоварыНаСкладах;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.Склад = СтруктураШапкиДокумента.СкладОрдер;
		
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ОтЗаказчика Тогда
			НоваяСтрока.Качество = Справочники.Качество.Новый;
		КонецЕсли;
		
		НоваяСтрока.Количество          = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент /СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
   	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.Склад = СтруктураШапкиДокумента.СкладОрдер;
		НоваяСтрока.Качество = Справочники.Качество.Новый;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияТоварыНаСкладеУпр()

// Процедура формирует движения по регистру "ТоварыКПолучениюНаСклады"
//
Процедура ДвиженияТоварыПоОрдеруУпр(Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, РежимПроведения)
	
	Если Не ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений   = Движения.ТоварыКПолучениюНаСклады;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры 		   = СтрокаТЧ.СерияНоменклатуры;
		НоваяСтрока.ДокументПолучения          = СкладОрдер;
		НоваяСтрока.Количество          	   = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент /СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		НоваяСтрока.СтатусПартии               = Перечисления.СтатусыПартийТоваров.Купленный;
		НоваяСтрока.Склад               	   = СкладОрдер.Склад;
		НоваяСтрока.Качество               	   = Справочники.Качество.Новый;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ДокументПолучения          = СкладОрдер;
		НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
		НоваяСтрока.СтатусПартии               = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьРасход();
	
	Если НЕ СкладОрдер.БезПраваПродажи Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах
		УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		    ?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
            СтруктураШапкиДокумента, 
			Отказ, 
			ТаблицаПоТоварам,
			Неопределено,
			Неопределено, 
			ИСТИНА, 
			ЛОЖЬ
		); 
		
	Иначе
		НаборДвижений   = Движения.ТоварыВРезервеНаСкладах;
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Склад                  	   = СкладОрдер.Склад;
			НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
			НоваяСтрока.ДокументРезерва            = СкладОрдер;
			НоваяСтрока.Количество 				   = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент /СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			
		КонецЦикла;
		
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияТоварыКПередачеУпр()

// Процедура формирует движения по регистру "ТоварыПереданные"
//
Процедура ДвиженияТоварыПереданныеУпр(СтруктураШапкиДокумента, Заголовок, Отказ, РежимПроведения)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений   = Движения.ТоварыПереданные;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ИзПереработки Тогда
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.СтатусПередачи             = Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку;
			НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
			
			НоваяСтрока.Количество 				   = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент /СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			НоваяСтрока.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
												СтрокаТЧ.Сумма,
												ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												СтруктураШапкиДокумента.КурсДокумента,
												КурсВзаиморасчетов,
												СтруктураШапкиДокумента.КратностьДокумента,
												КратностьВзаиморасчетов);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.СтатусПередачи             = Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара;
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		
		НоваяСтрока.Количество 				   = СтрокаТЧ.Количество;
		НоваяСтрока.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
												СтрокаТЧ.Сумма,
												ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												СтруктураШапкиДокумента.КурсДокумента,
												КурсВзаиморасчетов,
												СтруктураШапкиДокумента.КратностьДокумента,
												КратностьВзаиморасчетов);
		
	КонецЦикла;
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Заказ,"Сделка");

	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	НаборДвижений.ВыполнитьРасход();
	
КонецПроцедуры // ДвиженияТоварыПереданныеУпр()

// Процедура формирует движения по регистру "ТоварыВРезервеНаСкладах"
//
Процедура ДвиженияТоварыВРезервеУпр(Заголовок, Отказ, РежимПроведения)
	
	//Если Не ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
	//	Возврат;
	//КонецЕсли;
	
	НаборДвижений   = Движения.ТоварыВРезервеНаСкладах;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
			НоваяСтрока.Склад                  = СкладОрдер;
		Иначе
			НоваяСтрока.Склад                  = СкладОрдер.Склад;
		КонецЕсли;
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		НоваяСтрока.ДокументРезерва            = Заказ;
		НоваяСтрока.Количество 				   = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент /СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияТоварыВРезервеУпр()

// Процедура расхода по партиям при поступлении по ордеру.
//
Процедура РасходПоПартиямУпр()
	
	Если Не ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений   = Движения.ПартииТоваровНаСкладах;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	ТекСклад = ?(мУчетнаяПолитика["ВестиПартионныйУчетПоСкладам"], СкладОрдер.Склад, 0);
	
	Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Склад                 = ТекСклад;
		НоваяСтрока.Номенклатура          = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ДокументОприходования = СкладОрдер;
		НоваяСтрока.СтатусПартии          = Перечисления.СтатусыПартийТоваров.ПоОрдеру;
		НоваяСтрока.Качество              = Справочники.Качество.Новый;
		НоваяСтрока.Количество            = СтрокаТЧ.Количество;
		НоваяСтрока.КодОперации           = Перечисления.КодыОперацийПартииТоваров.ВозвратТарыОтКонтрагента;

	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьРасход();
	НаборДвижений.Записать(Ложь);
	
КонецПроцедуры // ПриходПоПартиямУпр()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента)

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, истина);
	    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаБУ) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ = Ложь) Экспорт
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);

    // Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "Склад", "Склад");
	КонецЕсли;
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация", "ОтражатьВРегламентированномУчете" , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетовРегл"                 , "ВедениеВзаиморасчетовРегл");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		СтруктураШапкиДокумента.Вставить("Склад", СкладОрдер);
	КонецЕсли;     	
		
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Товары,               	// ТабличнаяЧастьТовары
			Неопределено,       	// ТабличнаяЧастьВозвратнаяТара
			Неопределено,           // ТабличнаяЧастьУслуги
			Неопределено,         	// ТабличнаяЧастьОборудование
			Неопределено, 			// ТабличнаяЧастьОбъектыСтроительства
			Неопределено            // ТабличнаяЧастьБланкиСтрогогоУчета
		);
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Реализация",
			Дата,
			Организация,
			Неопределено ,          // ТабличнаяЧастьТовары
			ВозвратнаяТара,       	// ТабличнаяЧастьВозвратнаяТара
			Неопределено,           // ТабличнаяЧастьУслуги
			Неопределено,         	// ТабличнаяЧастьОборудование
			Неопределено, 			// ТабличнаяЧастьОбъектыСтроительства
			Неопределено            // ТабличнаяЧастьБланкиСтрогогоУчета
		);
		
	КонецЕсли;
	
	
    // Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ВозвратнаяТара");

	мУдалятьДвижения = НЕ ЭтоНовый(); 	
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Перем Заголовок, СтруктураШапкиДокумента;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
    		
	СтруктураШапкиДокумента = ПолучитьДанныеДокумента(СтруктураШапкиДокумента);
	
	ПроверкаРеквизитов(Заголовок, Отказ, СтруктураШапкиДокумента);
	
	
	// Здесь услуг быть не должно
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Наборов здесь быть не должно
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	
	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", 		 	ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете Тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаказыПокупателей(СтруктураШапкиДокумента);
	ДвиженияТоварыНаСкладеУпр(СтруктураШапкиДокумента, Заголовок, Отказ, РежимПроведения);
	ДвиженияТоварыОрганизаций(Заголовок, СтруктураШапкиДокумента, Отказ, РежимПроведения);
	ДвиженияТоварыОрганизацийРегл(Заголовок, СтруктураШапкиДокумента, Отказ, РежимПроведения);
	ДвиженияТоварыПоОрдеруУпр(Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, РежимПроведения);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТабТМЦ = Новый ТаблицаЗначений;
	ТабТМЦ.Колонки.Добавить("Номенклатура");
		
	ДвиженияТоварыПереданныеУпр  (СтруктураШапкиДокумента, Заголовок, Отказ, РежимПроведения);
	ДвиженияПоРегистрамРегл			 (РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТаре, Отказ, Заголовок);	
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента,  ТаблицаПоТаре, Отказ);	
	
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения);
	//>
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Поступление по регистрам партий (без указанных документов партии)
	// С указанными документами партии - делает УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, 
		Отказ, 
		, 
		ТаблицаПоТаре, 
		, 
		СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, 
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	);
		
	// Проводки по возврату тары (без указанных документов партии)
	// С указанными документами партии - делает УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров
	ТаблицаДвижений = ТаблицаПоТаре.Скопировать();
	КоличествоСтрок = ТаблицаПоТаре.Количество();
	Для ОбратныйИндекс = 1 по КоличествоСтрок Цикл
		СтрокаТД = ТаблицаДвижений[КоличествоСтрок - ОбратныйИндекс];
		Если ЗначениеЗаполнено(ТаблицаПоТаре[КоличествоСтрок - ОбратныйИндекс].ДокументПартии) Тогда
			ТаблицаДвижений.Удалить(КоличествоСтрок - ОбратныйИндекс);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	УправлениеЗапасамиПартионныйУчет.СформироватьПроводкиПоПоступлениюТМЦ(
		СтруктураШапкиДокумента, 
		Отказ, 
		, 
		ТаблицаДвижений, 
		, 
		, 
		, 
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	);
	
	
	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Движения.Хозрасчетный.Записать(Ложь);
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
	
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ОтЗаказчика И СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ДвиженияТоварыВРезервеУпр (Заголовок, Отказ, РежимПроведения);
		
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам));
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаЗаполнения
//
Процедура ОбработкаЗаполнения(Основание)
	
	ТипДок = ТипЗнч(Основание);
	Если ТипДок = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		
		// Заполнение шапки.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
		Заказ                   = Основание.Заказ;
		Комментарий             = "Возврат: " + Основание.Комментарий;
		
		СуммаДокумента          = Основание.СуммаДокумента;
		СчетУчетаРасчетовПоТаре = Основание.СчетУчетаРасчетовПоТаре;
		СчетУчетаРасчетовПоТареПоАвансам = Основание.СчетУчетаРасчетовПоТареПоАвансам;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
			ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ИзПереработки;
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
			ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ОтЗаказчика;
		КонецЕсли;
		
		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл
			
			НоваяСтрока = ВозвратнаяТара.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаВозвратнаяТара);
			
		КонецЦикла;
		
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТовары);
			НоваяСтрока.ДокументПартии      = Основание;
			
			ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(НоваяСтрока, ЭтотОбъект);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей)
  	
	СтруктураПолей.Вставить("СчетУчетаБУ"  					   , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СхемаРеализации"                  , "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ"                    , "СхемаРеализации.СчетВычетовИзДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"               , "СхемаРеализации.СубконтоВычетовИзДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"               , "СхемаРеализации.СубконтоВычетовИзДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"               , "СхемаРеализации.СубконтоВычетовИзДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"                   , "СхемаРеализации.СчетСебестоимостиПриВозврате");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"              , "СхемаРеализации.СубконтоСебестоимостиПриВозврате1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"              , "СхемаРеализации.СубконтоСебестоимостиПриВозврате2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"              , "СхемаРеализации.СубконтоСебестоимостиПриВозврате3");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"              , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"         , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"               , "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат"     , "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("ВидНалоговойДеятельностиДоходовИЗатрат", "НалоговоеНазначениеДоходовИЗатрат.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДСДоходовИЗатрат"      , "НалоговоеНазначениеДоходовИЗатрат.ВидДеятельностиНДС");
	
	СтруктураПростыхПолей.Вставить("СтавкаНДС"          , Перечисления.СтавкиНДС.НеНДС);
	СтруктураПростыхПолей.Вставить("НДС"                , 0);
	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"       , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПростыхПолей.Вставить("СчетУчетаНУ"        , ПланыСчетов.Налоговый.Запасы);
	
	СтруктураПолей.Вставить("СебестоимостьНУ"               , "СебестоимостьНУ");
	
КонецПроцедуры //ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл()

//Дополняет полями, нужными для регл. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам", "МоментОпределенияБазыНДСПоПродажам");

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВидДоговора"                                            , "ВидДоговора");

КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный     ,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция     ,"ДопустимыйСтатус3");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");

КонецПроцедуры 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация            , "Организация");
	
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТаре.Получить(ТаблицаДвижений.Индекс(Строка));

		Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
		Строка.КорСубконтоБУ1 = СтрокаТЧ.СубконтоРасходовБУ1;
		Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоРасходовБУ2;
		Строка.КорСубконтоБУ3 = СтрокаТЧ.СубконтоРасходовБУ3;

		Строка.НалоговоеНазначениеПоФакту = СтрокаТЧ.НалоговоеНазначение;

	КонецЦикла;

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТаре, Отказ, Заголовок);

	Если Не ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// Проводки по поступлению товаров, тары и услуг.
	ДатаДока   = Дата;
	ПроводкиБУ = Движения.Хозрасчетный;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		СкладПроводок = СтруктураШапкиДокумента.СкладОрдер;
	ИначеЕсли ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СкладПроводок = СтруктураШапкиДокумента.СкладОрдер.Склад;
	КонецЕсли;

	// Проводки по таре
	Для Каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

		// Бухгалтерский учет
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период          = ДатаДока;
		Проводка.Активность      = Истина;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
		Проводка.Содержание      = "Оприходованы ТМЦ";
		Проводка.НомерЖурнала    = "";
 		
		Проводка.СчетДт         = СтрокаТаблицы.СчетДоходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			
			Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СтрокаТаблицы.СтоимостьНУ);
			
		КонецЕсли;
		
		
		Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
		Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
		
	КонецЦикла; // Проводки по таре

	// Проводки по взаиморасчетам
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Заголовок);
	Если СтруктураПараметровЗачетАванса = ложь тогда
	   //Отказ = Истина;
	   СуммаАванса = 0;
	Иначе
		//Возвращает сумму аванса в валюте регламентированного учета!
		ДвиженияДляРегистраРасчетовПоПриобретению = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураШапкиДокумента, ТаблицаПоТаре);
		
		СтруктураДвижений = Новый Структура("ПроводкиБУ", ПроводкиБУ); 
		СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоПриобретению, Отказ);
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураШапкиДокумента, ТаблицаПоТаре)

	// ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	ТаблицаДвиженийТара = ТаблицаКопия.Скопировать();
	
	ТаблицаДвиженийТара.Колонки.Добавить("Контрагент");
	ТаблицаДвиженийТара.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДвиженийТара.Колонки.Добавить("ВидДоговораКонтрагента");
	ТаблицаДвиженийТара.Колонки.Добавить("СчетОплаты");
	ТаблицаДвиженийТара.Колонки.Добавить("СчетАванса");
	
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Контрагент        , "Контрагент");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора        , "ВидДоговораКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СчетУчетаРасчетовПоТаре         , "СчетОплаты");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СчетУчетаРасчетовПоТареПоАвансам, "СчетАванса");
	
	Возврат ТаблицаДвиженийТара;
КонецФункции //ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению()

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// 
Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента,  ТаблицаПоТаре, Отказ)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС 
		И НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		// Налоговый учет НП или НДС не ведется
		Возврат;
	КОнецЕсли;

    СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", 		СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",  СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	СтруктураПараметров.Вставить("НаправлениеДвижения", Перечисления.НаправленияДвижений.Поступление);
	СтруктураПараметров.Вставить("РасчетыВозврат",  	Перечисления.РасчетыВозврат.Возврат);
	
	СтруктураПараметров.Вставить("ЕстьНДС",  			СтруктураШапкиДокумента.ЕстьНДС);
	СтруктураПараметров.Вставить("ВалютаДокумента",     СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("Период",     			СтруктураШапкиДокумента.Дата);
	
    СтруктураДвижений = Новый Структура;
	СтруктураДвижений.Вставить("НалоговыйУчет", 			 Движения.ПродажиНалоговыйУчет);
	СтруктураДвижений.Вставить("ОжидаемыИПодтвержденныйНДС", Движения.ОжидаемыйИПодтвержденныйНДСПродаж);
	
	// ТАРА
	МассивТаблицТары = Новый Массив();
	МассивТаблицТары.Добавить(ТаблицаПоТаре);
	СтруктураПараметров.Вставить("ТаблицыТары", МассивТаблицТары);
	
	НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаОтгрузка(СтруктураПараметров, СтруктураДвижений, мВалютаРегламентированногоУчета, Отказ);

КонецПроцедуры // 

// Процедура списания по партиям
//
Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента,  ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения);
	
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
    НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// ТОВАРЫ по регистру СписанныеТовары
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ИзПереработки Тогда
		
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
			ТекСклад = СкладОрдер;
		Иначе
			ТекСклад = СкладОрдер.Склад;
		КонецЕсли;
		
        Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл  		
					
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.НомерСтрокиДокумента  		= ВозвратнаяТара.Количество() + СтрокаТЧ.НомерСтроки;
			НоваяСтрока.Организация           		= Организация;
			НоваяСтрока.Номенклатура          		= СтрокаТЧ.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры 	= СтрокаТЧ.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры 			= СтрокаТЧ.СерияНоменклатуры;
			НоваяСтрока.ДоговорКонтрагента		  	= ДоговорКонтрагента;
			НоваяСтрока.ЗаказПартии  	      		= Заказ;
			НоваяСтрока.ЗаказСписания		  		= Заказ;
			НоваяСтрока.СкладПолучатель       		= ТекСклад;
			НоваяСтрока.КачествоНовое  	      		= СтрокаТЧ.Качество;
			НоваяСтрока.ДокументПередачи		 	= СтрокаТЧ.ДокументПартии;
			
			НоваяСтрока.Количество   		  = СтрокаТЧ.Количество;
						
			НоваяСтрока.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика;
			
			НоваяСтрока.ОтражатьВУправленческомУчете = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
			НоваяСтрока.ОтражатьВБухгалтерскомУчете  = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
			
			НоваяСтрока.СчетУчетаБУ       = СтрокаТЧ.СчетПередачиБУ;
			НоваяСтрока.КорСчетБУ         = СтрокаТЧ.СчетУчетаБУ;			
			
			НоваяСтрока.ДопустимыйСтатус1 = Перечисления.СтатусыПартийТоваров.Продукция;
			НоваяСтрока.ДопустимыйСтатус2 = Перечисления.СтатусыПартийТоваров.Купленный;
			НоваяСтрока.ДопустимыйСтатус3 = Перечисления.СтатусыПартийТоваров.ВПереработку;
			
			НоваяСтрока.СтатусПередачи           = Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку;
			НоваяСтрока.НалоговоеНазначениеПоФакту = СтрокаТЧ.НалоговоеНазначение;
			
		КонецЦикла;
	КонецЕсли;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьДвижения();
	
	// ТАРА ПО РЕГИСТРУ СписанныеТовары.
    НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Колонки.КоличествоДок.Имя  = "Количество";
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	Сч = 0;
	Пока Сч < ТаблицаДвижений.Количество() Цикл
		СтрокаТаблицы = ТаблицаДвижений.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии) Тогда
			 ТаблицаДвижений.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл

		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		
		Строка.ДокументПередачи = Строка.ДокументПартии;

	КонецЦикла;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладОрдер, "Склад");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладПриходногоОрдера, "Склад");
	КонецЕсли; 			

	ТаблицаДвижений.ЗаполнитьЗначения(Дата  , "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя,   "КодОперацииПартииТоваров");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый                                     , "Качество");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений , СтруктураШапкиДокумента, ТаблицаПоТаре);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьДвижения();
	
	НаборДвижений.Записать(Истина);
	
КонецПроцедуры //     ДвиженияПоРегиструСписанныеТовары()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	// Надо добавить колонки
	ТаблицаТары.Колонки.Добавить("МинусКоличество",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаТары.Колонки.Добавить("ПлюсСебестоимость",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("МинусСебестоимость",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("СуммаУпр",             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.МинусКоличество  = - СтрокаТаблицы.КоличествоДок;
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов

		СтрокаТаблицы.СуммаВзаиморасчетов = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 КратностьВзаиморасчетов);
										 
		СтрокаТаблицы.ПлюсСебестоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Себестоимость, СтруктураШапкиДокумента.ВалютаДокумента,
											 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
											 СтруктураШапкиДокумента.КурсДокумента,
											 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
											 СтруктураШапкиДокумента.КратностьДокумента,
											 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) * СтрокаТаблицы.КоличествоДок;

		СтрокаТаблицы.МинусСебестоимость = - СтрокаТаблицы.ПлюсСебестоимость;
										 
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента, 
		                                    СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                    ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                    СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                    ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                    СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
											
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = -МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);


		СтрокаТаблицы.НДС = 0;


	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Добавляет в таблицу колонки, необходимые для регл. проведения.
//
Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("ВозвратнаяТара", ТаблицаТары, СтруктураШапкиДокумента);
	
	ТаблицаТары.Колонки.Добавить("ПроводкиСуммаНДСКредит" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);
	
КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");