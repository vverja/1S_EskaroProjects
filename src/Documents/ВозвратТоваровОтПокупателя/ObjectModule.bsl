Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мПараметрыСвязиСтрокТЧ Экспорт;
Перем УчетнаяПолитикаРегл;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьВозвратаОтПокупателя()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Получил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателя
	|	ГДЕ
	|		ВозвратТоваровОтПокупателя.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки						КАК НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))  КАК Товар,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура.Артикул            КАК Артикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,	
	|	Цена,
	|	Сумма
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.ВозвратнаяТара КАК ВозвратТоваровОтПокупателя
	|
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровОтПокупателя_Накладная";


	Макет = ПолучитьМакет("Накладная");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать); // Наша организация
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать); // Контрагент

	// Выводим заголовок
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Возврат от покупателя (комиссия)';uk='Повернення від покупця (комісія)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Возврат от покупателя';uk='Повернення від покупця'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим информацию о нашей организации
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим информацию о контрагенте
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	// Определим есть ли скидки в ТЧ товары
	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	// Определим необходимсоть вывода дополнитльеной колонки и саму колонку.
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	// Вертикальные области
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	// Выводим вертикальные области шапки
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);

	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
  	ТабДокумент.Присоединить(ОбластьСуммы);
		

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			Скидка = 0;
		Иначе
			Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ВыборкаСтрокТовары.Скидка);
			//округлим скидку до двух знаков
			Скидка = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Скидка, 2);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Тара");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		КонецЕсли;
		
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|СуммаТара");
		
		СуммаТара    = 0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Товар);			
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаТара);
		ТабДокумент.Присоединить(ОбластьСуммы);	
		
		// сделаем отступ 
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
										   
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначения.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
										   
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьВозвратаОтПокупателя()

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, , , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Накладная" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьВозвратаОтПокупателя();
		
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
		
	ИначеЕсли ИмяМакета = "Бланк" Тогда
		ТабДокумент = ПечатьБланк(НаПринтер);	
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечатныхФорм = Новый Структура("Накладная","Возврат от покупателя");
	СтруктПечатныхФорм.Вставить("Бланк", "Бланк товарного наполнения");
	СтруктПечатныхФорм.Вставить("СерийныеНомера","Список серийных номеров");
	Возврат СтруктПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение табличной части по приходному ордеру товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОрдеруУпр(ДокументОснование, ТабличнаяЧасть) Экспорт
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Если ТабличнаяЧасть = ВозвратнаяТара Тогда
		ИмяТабличнойЧасти = "ВозвратнаяТара";
	Иначе
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ДокТовары.НомерСтроки) КАК НомерСтроки,
	|	ДокТовары.Номенклатура,
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоДокументу,
	|	NULL                                               КАК ЦенаВРознице, " + 
	?(ТабличнаяЧасть = Товары, "
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры, ", "") + "
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоСерии, 
	|	МАКСИМУМ(Остатки.КоличествоОстаток)                КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары." + ИмяТабличнойЧасти + " КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура" + 
	?(ТабличнаяЧасть = Товары, "
	| И ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры", "") + " 
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура" +
	?(ТабличнаяЧасть = Товары, ",
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";


	РезультатЗапроса = Запрос.Выполнить();

	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");	
	ЕстьРеквизитПроцентСкидкиНаценки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", Метаданные(), ИмяТабличнойЧасти);
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", Метаданные(), ИмяТабличнойЧасти);	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		Иначе

			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

			СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество   = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);

			ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ЭтотОбъект, ,мВалютаРегламентированногоУчета);
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;

		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

//  Возвращает текст выборки дополнительных регл. полей для подстановки в запрос  
//
Процедура ПолучитьДополнительныеПоляДляЗаполненияТоваровПоОснованиюРегл(ДополнительныеПоляЗапросаРегл)

	ДополнительныеПоляЗапросаРегл = ",
	|	Док.СчетУчетаБУ,
	|	Док.СхемаРеализации,
	|	Док.НалоговоеНазначение,
	|	Док.НалоговоеНазначениеДоходовИЗатрат,
	|   Док.ПереданныеПринятыеБУ,			
	|	Док.ПринятыеСчетУчетаБУ,	
	|   Док.ПереданныеСобственныеБУ	
	|";
    
	
КонецПроцедуры // ПолучитьДополнительныеПоляДляЗаполненияТоваровПоОснованиюРегл()

// Заполняет регл. реквизиты строки табличной части
//
Процедура ЗаполнитьСтрокуТоварыПоОснованиюРегл(СтрокаТабличнойЧасти, Выборка)

	СтрокаТабличнойЧасти.СчетУчетаБУ  				= Выборка.СчетУчетаБУ;
	СтрокаТабличнойЧасти.НалоговоеНазначение 		= Выборка.НалоговоеНазначение;
	СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат = Выборка.НалоговоеНазначениеДоходовИЗатрат;
	СтрокаТабличнойЧасти.СхемаРеализации			= Выборка.СхемаРеализации;
	СтрокаТабличнойЧасти.ПереданныеПринятыеБУ       = Выборка.ПереданныеПринятыеБУ;	
	СтрокаТабличнойЧасти.ПереданныеСобственныеБУ    = Выборка.ПереданныеСобственныеБУ;
	СтрокаТабличнойЧасти.ПринятыеСчетУчетаБУ 		= Выборка.ПринятыеСчетУчетаБУ;

КонецПроцедуры // ЗаполнитьСтрокуТоварыПоОснованиюРегл()

// Процедура выполняет заполнение табличной части Товары по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	ТипДокументаОснования = ТипЗнч(ДокументОснование);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование"  , ДокументОснование);
	Запрос.УстановитьПараметр("Качество"           , Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ДоговорКонтрагента" , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СтатусПередачи"     , Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("ДатаОстатков"       , ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	ОснованиеРеализацияТоваров = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ОтКомиссионера             = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	УсловиеЗаказ         = " И Сделка = &Сделка ";
	ПолеСоединенияЗаказ  = "";
	ПолеЗаказПокупателя  = "";
	ПараметрСделка       = Неопределено;

	МетаданныеДокумента  = ДокументОснование.Метаданные();
	ДокументОснованиеИмя = МетаданныеДокумента.Имя;
	ЕстьСоставНабора     = МетаданныеДокумента.ТабличныеЧасти.Найти("СоставНабора") <> Неопределено;
	ЕстьАвтоматическиеСкидки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок",МетаданныеДокумента, "Товары");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КурсВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                         КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КратностьВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                         КАК КратностьДокумента,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Коэффициент,
	|	Док.СтавкаНДС,
	|	Док.Количество,
	|	Док.Цена,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.Номенклатура.Комплект КАК Комплект,
	|	Док.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|"
	+ ?(ЕстьАвтоматическиеСкидки,"
	|	Док.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	Док.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
	|	Док.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
	|","")
	+?(ЕстьСоставНабора, "
	|	Док.КлючСтроки,", "")
	+?(ОснованиеРеализацияТоваров, "
	|	Док.Качество      КАК Качество
	|", "
	|	&Качество КАК Качество
	|");
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Склад", ДокументОснование.Метаданные(), "Товары") Тогда
		Запрос.Текст = Запрос.Текст+", Док.Склад";
	Иначе
		Запрос.Текст = Запрос.Текст+", неопределено КАК Склад";
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЗаказПокупателя", ДокументОснование.Метаданные(), "Товары") Тогда

		ПолеЗаказПокупателя = ", Док.ЗаказПокупателя КАК ЗаказПокупателя";

		Если ОтКомиссионера И ДокументОснованиеИмя = "СчетНаОплатуПокупателю" Тогда
			УказаниеЗаказов = глЗначениеПеременной("УказаниеЗаказовВТабличнойЧастиДокументов");
			УказаниеЗаказовВТЧ = (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
								Или (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации);
			ВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;

			Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам ИЛИ НЕ УказаниеЗаказовВТЧ Тогда
				Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
					ПараметрСделка      = ДокументОснование;
					ПолеЗаказПокупателя = ", ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя";
				Иначе
					ПараметрСделка      = ?(ЗначениеЗаполнено(ДокументОснование.ЗаказПокупателя), ДокументОснование.ЗаказПокупателя, Неопределено);
					ПолеЗаказПокупателя = ", &Сделка КАК ЗаказПокупателя";
				КонецЕсли;
				УсловиеЗаказ            = " И Сделка = &Сделка ";
			Иначе
				Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
					ПолеСоединенияЗаказ = " И Док.ЗаказПокупателя = Остатки.Сделка ";
				Иначе
					ПолеСоединенияЗаказ = " И	ВЫБОР	КОГДА Док.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
										|				ТОГДА Неопределено
										|				ИНАЧЕ Док.ЗаказПокупателя
										|		КОНЕЦ = Остатки.Сделка
										|";
				КонецЕсли;
				УсловиеЗаказ            = "";
				ПолеЗаказПокупателя     = ", Док.ЗаказПокупателя КАК ЗаказПокупателя";
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + ПолеЗаказПокупателя;
	ИначеЕсли ДокументОснованиеИмя = "ЗаказПокупателя" Тогда
		ПолеЗаказПокупателя = ", Док.Ссылка КАК ЗаказПокупателя";
		УсловиеЗаказ        = " И Сделка = &Сделка ";
		ПараметрСделка      = ДокументОснование;
		Запрос.Текст        = Запрос.Текст + ПолеЗаказПокупателя;
	Иначе
		ПолеЗаказПокупателя = ", неопределено КАК ЗаказПокупателя";
		Запрос.Текст        = Запрос.Текст + ПолеЗаказПокупателя;
	КонецЕсли;

	Запрос.УстановитьПараметр("Сделка", ПараметрСделка);

	ДополнительныеПоляЗапросаРегл = "";
	ПолучитьДополнительныеПоляДляЗаполненияТоваровПоОснованиюРегл(ДополнительныеПоляЗапросаРегл);

	Если ОснованиеРеализацияТоваров Тогда

		Запрос.Текст = Запрос.Текст + ",
		|	Док.СерияНоменклатуры" + 
			ДополнительныеПоляЗапросаРегл + "
		|"
	КонецЕсли;

	Если ОтКомиссионера Тогда

		Запрос.Текст = Запрос.Текст + ",
		|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0.00)          КАК КоличествоОстатокПереданных,
		|	ЕСТЬNULL(Остатки.СуммаВзаиморасчетовОстаток, 0.00) КАК СтоимостьОтданнаяВалОстаток";

	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".Товары   КАК Док
	|";

	Если ОтКомиссионера Тогда
		Запрос.Текст = Запрос.Текст + ",
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков,
		|											ДоговорКонтрагента = &ДоговорКонтрагента
		|											И СтатусПередачи = &СтатусПередачи
		|											" + УсловиеЗаказ + ") КАК Остатки
		|ПО
		|	Док.Номенклатура = Остатки.Номенклатура
		|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|" + ПолеСоединенияЗаказ + "
		|";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|" + ?(ОтКомиссионера, " И ЕСТЬNULL(Остатки.КоличествоОстаток, 0.00) > 0 ", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = ?(ОтКомиссионера, МИН(Выборка.КоличествоОстатокПереданных, Выборка.Количество), Выборка.Количество);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС            = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.Качество             = Выборка.Качество;
		СтрокаТабличнойЧасти.Склад                = Выборка.Склад;
		Если ТипДокументаОснования = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя  = ДокументОснование;
		Иначе
			СтрокаТабличнойЧасти.ЗаказПокупателя  = Выборка.ЗаказПокупателя;
		КонецЕсли;

		Если ЕстьАвтоматическиеСкидки Тогда
			СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
			СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
            //ИЗМЕНЕНО Верескул Игорь(Начало 08.08.2017
            СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = Выборка.ПроцентАвтоматическихСкидок;
            //Окончание)Верескул Игорь 
		КонецЕсли;

		Если ОтКомиссионера Тогда

			КолвоПереданных = Выборка.КоличествоОстатокПереданных;
			Если КолвоПереданных > 0 Тогда
				Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / КолвоПереданных, 
						ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, Курс,
						КратностьВзаиморасчетов, Кратность);

				СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
											  Истина, УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьАвтоматическиеСкидки,"Товары");
			КонецЕсли;
		Иначе

			СтрокаТабличнойЧасти.Цена = Выборка.Цена;

			// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
			Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, 
					Выборка.КурсДокумента, Курс,
					Выборка.КратностьДокумента, Кратность);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
										Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
										УчитыватьНДС, СуммаВключаетНДС,
										Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		Если ОснованиеРеализацияТоваров Тогда

			СтрокаТабличнойЧасти.СерияНоменклатуры      = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ДокументПартии         = ДокументОснование;
			СтрокаТабличнойЧасти.ЗаказПокупателя        = Выборка.ЗаказПокупателя;
			
			ЗаполнитьСтрокуТоварыПоОснованиюРегл(СтрокаТабличнойЧасти, Выборка);
		КонецЕсли;

		Если ЕстьСоставНабора
		   И Выборка.Комплект Тогда
			СтрокаТабличнойЧасти.КлючСтроки = СтрокаТабличнойЧасти.НомерСтроки;
		КонецЕсли;

	КонецЦикла;

	Если ЕстьСоставНабора Тогда
		УправлениеЗапасами.ЗаполнитьСоставНабораПоОснованию(ЭтотОбъект, ДокументОснование);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение возвратной тары по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование) Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	
	Запрос = Новый Запрос;
	ПараметрСделка = Неопределено;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	УсловиеЗаказ         = "";
	ПолеСоединенияЗаказ  = "";
	МетаданныеДокумента  = ДокументОснование.Метаданные();
	ДокументОснованиеИмя = МетаданныеДокумента.Имя;
	Если ДокументОснованиеИмя = "РеализацияТоваровУслуг" Тогда
		ДобавкаСчетов = "
		|	Док.НалоговоеНазначение 		КАК НалоговоеНазначение,
		|	Док.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначениеДоходовИЗатрат,
		|	Док.СхемаРеализации,
		|	Док.СчетУчетаБУ,";
	Иначе
		ДобавкаСчетов = "";
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Склад", МетаданныеДокумента, "ВозвратнаяТара") Тогда
		ДобавкаСклад = "Док.Склад КАК Склад,";
	Иначе
		ДобавкаСклад = "неопределено КАК Склад,";
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЗаказПокупателя", МетаданныеДокумента, "ВозвратнаяТара") Тогда
		УказаниеЗаказов = глЗначениеПеременной("УказаниеЗаказовВТабличнойЧастиДокументов");
		УказаниеЗаказовВТЧ = (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
						Или (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации);
		ВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;

		Если ДокументОснованиеИмя = "СчетНаОплатуПокупателю" Тогда
			Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам ИЛИ НЕ УказаниеЗаказовВТЧ Тогда
				Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
					ПараметрСделка         = ДокументОснование;
					ДобавкаЗаказПокупателя = "ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя,";
				Иначе
					ПараметрСделка         = ?(ЗначениеЗаполнено(ДокументОснование.ЗаказПокупателя), ДокументОснование.ЗаказПокупателя, Неопределено);
					ДобавкаЗаказПокупателя = "&Сделка КАК ЗаказПокупателя,";
				КонецЕсли;
				УсловиеЗаказ               = " И Сделка = &Сделка ";
			Иначе
				Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
					ПолеСоединенияЗаказ = " И Док.ЗаказПокупателя = Остатки.Сделка ";
				Иначе
					ПолеСоединенияЗаказ = " И	ВЫБОР	КОГДА Док.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
										|				ТОГДА Неопределено
										|				ИНАЧЕ Док.ЗаказПокупателя
										|		КОНЕЦ = Остатки.Сделка
										|";
				КонецЕсли;
				ДобавкаЗаказПокупателя  = "Док.ЗаказПокупателя КАК ЗаказПокупателя,";
			КонецЕсли;
		Иначе
			Если УказаниеЗаказовВТЧ Тогда
				Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
					ПолеСоединенияЗаказ = " И Док.ЗаказПокупателя = Остатки.Сделка ";
				Иначе
					ПолеСоединенияЗаказ = "
										|	И	ВЫБОР	КОГДА Док.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
										|				ТОГДА Неопределено
										|				ИНАЧЕ Док.ЗаказПокупателя
										|		КОНЕЦ = Остатки.Сделка
										|";
				КонецЕсли;
			Иначе
				Если НЕ МетаданныеДокумента.Реквизиты.Найти("Сделка") = Неопределено Тогда
					УсловиеЗаказ   = " И Сделка = &Сделка ";
					ПараметрСделка = ДокументОснование.Сделка;
				КонецЕсли;
			КонецЕсли;
			ДобавкаЗаказПокупателя = "Док.ЗаказПокупателя КАК ЗаказПокупателя,";
		КонецЕсли;
	Иначе
		Если ДокументОснованиеИмя = "ЗаказПокупателя" Тогда
			ДобавкаЗаказПокупателя = "Док.Ссылка КАК ЗаказПокупателя,";
			УсловиеЗаказ           = " И Сделка = &Сделка ";
			ПараметрСделка         = ДокументОснование;
		Иначе
			Если НЕ МетаданныеДокумента.Реквизиты.Найти("Сделка") = Неопределено Тогда
				ДобавкаЗаказПокупателя = "Док.Ссылка.Сделка КАК ЗаказПокупателя,";
				УсловиеЗаказ           = " И Сделка = &Сделка ";
				ПараметрСделка         = ДокументОснование.Сделка;
			Иначе
				ДобавкаЗаказПокупателя = "неопределено КАК ЗаказПокупателя,";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Запрос.УстановитьПараметр("Сделка", ПараметрСделка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КратностьДокумента,"
	+ ДобавкаСчетов + ДобавкаСклад+ДобавкаЗаказПокупателя+"
	|	Док.Номенклатура,
	|	ВЫБОР 	КОГДА ЕСТЬNULL(Док.Количество, 0.00) >  ЕСТЬNULL(Остатки.КоличествоОстаток,0.00)
	|			ТОГДА ЕСТЬNULL(Остатки.КоличествоОстаток,0.00)
	|			ИНАЧЕ ЕСТЬNULL(Док.Количество, 0.00)
	|	КОНЕЦ КАК Количество,
	|	Док.Цена
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".ВозвратнаяТара КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПереданные.Остатки(, Номенклатура В (
	|																	ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура 
	|																	ИЗ Документ." + ДокументОснованиеИмя + ".ВозвратнаяТара КАК Док 
	|																	ГДЕ Док.Ссылка = &ДокументОснование ) " + УсловиеЗаказ + "
	|																) КАК Остатки
	|ПО Док.Номенклатура = Остатки.Номенклатура
	|	И Док.Ссылка.ДоговорКонтрагента = Остатки.ДоговорКонтрагента
	|" + ПолеСоединенияЗаказ + "
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|	И	ВЫБОР	КОГДА ЕСТЬNULL(Док.Количество, 0.00) > ЕСТЬNULL(Остатки.КоличествоОстаток,0.00)
	|				ТОГДА ЕСТЬNULL(Остатки.КоличествоОстаток,0.00)
	|				ИНАЧЕ ЕСТЬNULL(Док.Количество, 0.00)
	|		КОНЕЦ > 0.00
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура     = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество       = Выборка.Количество;
		СтрокаВозвратнойТары.Цена             = Выборка.Цена;
		СтрокаВозвратнойТары.Склад            = Выборка.Склад;
		СтрокаВозвратнойТары.ЗаказПокупателя  = Выборка.ЗаказПокупателя;

		Если ДокументОснованиеИмя = "РеализацияТоваровУслуг" Тогда
			СтрокаВозвратнойТары.СчетУчетаБУ  = Выборка.СчетУчетаБУ;
			СтрокаВозвратнойТары.СхемаРеализации = Выборка.СхемаРеализации;
			СтрокаВозвратнойТары.НалоговоеНазначение = Выборка.НалоговоеНазначение;
			СтрокаВозвратнойТары.НалоговоеНазначениеДоходовИЗатрат = Выборка.НалоговоеНазначениеДоходовИЗатрат;
		ИначеЕсли ДокументОснованиеИмя = "ЗаказПокупателя" Тогда
			СтрокаВозвратнойТары.ЗаказПокупателя = ДокументОснование;
		КонецЕсли;

		// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
		Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВозвратнойТары.Цена, Выборка.ВалютаДокумента, ВалютаДокумента,
						Выборка.КурсДокумента, Курс,
						Выборка.КратностьДокумента, Кратность);

		ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОснованию()

Процедура ЗаполнитьТоварыНереализованнымиУпр(СпособЗаполнения, ДокументРеализации = Неопределено, ЗаполнитьИзФормы = Ложь) Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	// Добудем нереализованные товары
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ПолеЗаказ           = ", Док.ЗаказПокупателя КАК Сделка";
	УсловиеЗаказ        = "";
	ПолеСоединенияЗаказ = "";

	Если СпособЗаполнения = "ПоДокументу" Тогда

		// Вложенный запрос, ограничивающий список номенклатуры
		// документ типа Внутренний заказ не может быть основанием для возврата с комиссии  
		ТекстЗапросаСписокНоменклатуры = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары
		|ГДЕ Ссылка = &ДокументОснование";

		Запрос.УстановитьПараметр("ДокументОснование", ДокументРеализации);
		ВедениеВзаиморасчетов = ДокументРеализации.ДоговорКонтрагента.ВедениеВзаиморасчетов;
		ПараметрСделка = Неопределено;
		Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Если ЗначениеЗаполнено(Сделка) Тогда
				ПараметрСделка = Сделка;
			Иначе
				ПараметрСделка = ДокументРеализации.Сделка;
				Сделка = ДокументРеализации.Сделка;
			КонецЕсли;
			ПолеЗаказ      = " , Неопределено КАК Сделка";
			УсловиеЗаказ   = " И Сделка = &Сделка";
		Иначе
			УказаниеЗаказов    = глЗначениеПеременной("УказаниеЗаказовВТабличнойЧастиДокументов");
			УказаниеЗаказовВТЧ = (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
							Или (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации);
			Если ЗаполнитьИзФормы И ЗначениеЗаполнено(Сделка) Тогда
				УказаниеЗаказовВТЧ = Ложь;
			КонецЕсли;
			Если УказаниеЗаказовВТЧ Тогда
				Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
					ПолеСоединенияЗаказ  = " И Док.ЗаказПокупателя = Остатки.Сделка";
				Иначе
					ПолеСоединенияЗаказ  = " И	ВЫБОР	КОГДА Док.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
										|				ТОГДА Неопределено
										|				ИНАЧЕ Док.ЗаказПокупателя
										|		КОНЕЦ = Остатки.Сделка";
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Сделка) Тогда
					ПараметрСделка = Сделка;
				Иначе
					ПараметрСделка = ДокументРеализации.Сделка;
					Сделка = ДокументРеализации.Сделка;
				КонецЕсли;
				УсловиеЗаказ   = " И Сделка = &Сделка";
			КонецЕсли;
		КонецЕсли;
		Запрос.УстановитьПараметр("Сделка", ?(ЗначениеЗаполнено(ПараметрСделка), ПараметрСделка, Неопределено));
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура                                     КАК Номенклатура,
	|	Док.СтавкаНДС                                            КАК СтавкаНДС,
	|	Док.ЕдиницаИзмерения                                     КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(Док.Коэффициент, 0.00)                          КАК Коэффициент,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
	|	Док.Количество                                           КАК КоличествоРеализации,
	|	Док.Цена                                                 КАК Цена,
	|	Док.ПроцентСкидкиНаценки                                 КАК ПроцентСкидкиНаценки,
	|	Остатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры                                    КАК СерияНоменклатуры,
	|	Док.Ссылка.ВалютаДокумента                               КАК ВалютаДокумента,
	|	ВЫБОР	КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА Док.Ссылка.КурсВзаиморасчетов
	|			ИНАЧЕ 1
	|	КОНЕЦ                                                    КАК КурсДокумента,
	|	ВЫБОР	КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА Док.Ссылка.КратностьВзаиморасчетов
	|			ИНАЧЕ 1
	|	КОНЕЦ                                                    КАК КратностьДокумента,
	|	Док.Ссылка.УчитыватьНДС                                  КАК УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС                              КАК СуммаВключаетНДС,
	|	Остатки.СуммаВзаиморасчетовОстаток                       КАК СтоимостьОтданнаяВалОстаток,
	// Для корректного заполнения документа единица измерения хранения остатков пересчитывается в единицу измерения документа.
	|	ВЫБОР	КОГДА ЕСТЬNULL(Док.Коэффициент, 0.00) = 0.00
	|			ТОГДА 0.00
	|			ИНАЧЕ Остатки.КоличествоОстаток * Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / Док.Коэффициент
	|	КОНЕЦ                                                    КАК КоличествоОстатокРеализации
	|" + ПолеЗаказ + "
	|ИЗ
	|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков,
	|";

	Если СпособЗаполнения = "ПоДокументу" Тогда
		Запрос.Текст = Запрос.Текст + "
		|		Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ")
		|		И ДоговорКонтрагента = &Договор
		|		" + УсловиеЗаказ + "
		|	) КАК Остатки
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг.Товары КАК Док
		|ПО
		|	Док.Номенклатура                 = Остатки.Номенклатура
		|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|" + ПолеСоединенияЗаказ  + "
		|
		|ГДЕ
			// для корректного сравнения количества остатков, единицы измерения документа присчитываются в единицу хранения остатков.
		|	ВЫБОР	КОГДА ЕСТЬNULL(Док.Коэффициент, 0.00) = 0.00
		|			ТОГДА 0.00
		|			ИНАЧЕ Остатки.КоличествоОстаток / Док.Коэффициент * Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
		|	КОНЕЦ > 0.00
		|	И Док.Ссылка = &ДокументОснование
		|	И Док.Ссылка.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.НомерСтроки
		|";
	Иначе // по договору
		Запрос.Текст = Запрос.Текст + "
		|			ДоговорКонтрагента = &Договор
		|			) КАК Остатки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг.Товары КАК Док
		|ПО
		|	Док.Номенклатура = Остатки.Номенклатура
		|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|	И Док.Ссылка.Проведен
		|" + ПолеСоединенияЗаказ  + "
		|
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.НомерСтроки
		|";
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		НетДокумента      = (Выборка.КоличествоРеализации = NULL);
		ОстатокПереданных = ?(Выборка.КоличествоОстатокРеализации = NULL, 0, Выборка.КоличествоОстатокРеализации);
		Если НетДокумента Тогда
			Количество = Выборка.КоличествоОстатокРеализации;
		Иначе
			Количество = Мин(Выборка.КоличествоРеализации, Выборка.КоличествоОстатокРеализации);
		КонецЕсли;
		СтрокаТабличнойЧасти.ЗаказПокупателя      = Выборка.Сделка;
		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = ?(НетДокумента, Выборка.ЕдиницаХраненияОстатков, Выборка.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Коэффициент          = ?(НетДокумента, Выборка.КоэффициентХраненияОстатков, Выборка.Коэффициент);
		СтрокаТабличнойЧасти.СтавкаНДС            = ?(НетДокумента, Выборка.Номенклатура.СтавкаНДС,Выборка.СтавкаНДС);
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ?(НетДокумента, 0, Выборка.ПроцентСкидкиНаценки);
		СтрокаТабличнойЧасти.Цена                 = Выборка.СтоимостьОтданнаяВалОстаток / Выборка.КоличествоОстатокРеализации;

		Если НетДокумента Тогда
			СтрокаТабличнойЧасти.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток / ОстатокПереданных,
			                            ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента,
			                            КурсВзаиморасчетов, Курс,
			                            КратностьВзаиморасчетов, Кратность);
		Иначе
			СтрокаТабличнойЧасти.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена,
			                            Выборка.ВалютаДокумента, ВалютаДокумента,
			                            Выборка.КурсДокумента, Курс,
			                            Выборка.КратностьДокумента, Кратность);
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
		                                Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		                                Истина,
		                                УчитыватьНДС,
		                                СуммаВключаетНДС,
		                                Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ДокументПартии             = ДокументРеализации;
		СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если НЕ НетДокумента Тогда
			СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Заполняет счета БУ и НУ в строке табличной части
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",		СчетаУчета.СчетАвансовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТаре",			СчетаУчета.СчетУчетаТарыПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТареПоАвансам",СчетаУчета.СчетАвансовПоТареПокупателя);
		
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетовПокупателяПриБартере);
			СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",		СчетаУчета.СчетАвансовПокупателяПриБартере);
        КонецЕсли;
		
		СтруктураСчетов.Вставить("СчетУчетаНДС",	    	СчетаУчета.СчетУчетаНДСПродаж);
		
		СтруктураСчетов.Вставить("СчетУчетаНДСПодтвержденный", СчетаУчета.СчетУчетаНДСПродажПодтвержденный);
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции

// Процедура выполняет заполнение документа по документу-основанию.
//
// Параметры:
//  Основание - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ОтражатьВУправленческомУчете = Истина;
		СкладОрдер                   = Основание;
		ВидПоступления               = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
		ВидОперации                  = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
		УчитыватьНДС                 = Истина;

		Если ЗначениеЗаполнено(Контрагент) Тогда
			ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, 
			                                          Контрагент, мСтруктураПараметровДляПолученияДоговора);

			// Тип цен заполняем, только если в договоре указаны тип цен номенклатуры (он - покупатель или комиссионер).
			ТипЦенКонтрагента = ДоговорКонтрагента.ТипЦен;
			Если ЗначениеЗаполнено(ТипЦенКонтрагента)
			   И ТипЗнч(ТипЦенКонтрагента) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
				ТипЦен = ТипЦенКонтрагента;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			СуммаВключаетНДС = Истина;
		Иначе
			СуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;

		СтруктураКурса          = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсВзаиморасчетов      = СтруктураКурса.Курс;
		КратностьВзаиморасчетов = СтруктураКурса.Кратность;

		Если Основание.Проведен Тогда
			// Заполним табличные части по заказу поставщику.
			ЗаполнитьТоварыПоОрдеруУпр(Основание, Товары);
			ЗаполнитьТоварыПоОрдеруУпр(Основание, ВозвратнаяТара);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

//
Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре)
	
	//Смартис Лиманчук начало 02.10.2012
	//Если НЕ (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
	Если НЕ ((ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссияНал) И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
	//Смартис Лиманчук окончание 02.10.2012
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
		ТаблицаДвижений = ТаблицаКопия.Скопировать();
		
		ТаблицаДвижений.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
		
		ТаблицаДвижений.Колонки.Добавить("Контрагент");
		ТаблицаДвижений.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаДвижений.Колонки.Добавить("ВидДоговораКонтрагента");
		ТаблицаДвижений.Колонки.Добавить("СчетОплаты");
		ТаблицаДвижений.Колонки.Добавить("СчетАванса");
		
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент        , "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора        , "ВидДоговораКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовСКонтрагентом, "СчетОплаты");
		ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовПоАвансам    , "СчетАванса");
	КонецЕсли;	
		
	// ТАРА (отдельной строкой)
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	ТаблицаДвиженийТара = ТаблицаКопия.Скопировать();
	
	ТаблицаДвиженийТара.Колонки.Добавить("Контрагент");
	ТаблицаДвиженийТара.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДвиженийТара.Колонки.Добавить("ВидДоговораКонтрагента");
	ТаблицаДвиженийТара.Колонки.Добавить("СчетОплаты");
	ТаблицаДвиженийТара.Колонки.Добавить("СчетАванса");
	
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Контрагент        , "Контрагент");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора        , "ВидДоговораКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СчетУчетаРасчетовПоТаре         , "СчетОплаты");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СчетУчетаРасчетовПоТареПоАвансам, "СчетАванса");
	
	Если НЕ ЗначениеЗаполнено(ТаблицаДвижений) Тогда
		ТаблицаДвижений = ТаблицаДвиженийТара.Скопировать();
	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийТара, ТаблицаДвижений);
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
	
КонецФункции //ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";
	
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента, Отказ, Заголовок);

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента,"ВозвратОтПокупателя") Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	Иначе
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей);
	КонецЕсли;
	
	//Смартис Лиманчук начало 02.10.2012
	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия Тогда
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссияНал) Тогда
	//Смартис Лиманчук окончание 02.10.2012
		СтруктураОбязательныхПолей.Вставить("СхемаРеализации");		
	КонецЕсли;	

	// Теперь вызовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Проверка наличия продажных цен на приходуемый товар.
	УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ,
	                                                       Заголовок, "ВидСклада");

	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "ВозвратнаяТара", "ЗаказПокупателя", Отказ, Заголовок);	
	
	// При реализации тары должен быть указан конкретный вид налоговой деятельности.
	СтруктураПараметровПроверки = Новый Структура("ПроверятьРаспределяемую, ПроверятьНеОблагаемую");
	НалоговыйУчет.ПроверитьТабличнуюЧастьНаРазрешенныеВидыНалоговойДеятельности(ЭтотОбъект, "ВозвратнаяТара", , ТаблицаПоТаре,
	                                                              СтруктураПараметровПроверки,
	                                                              СтруктураШапкиДокумента,
																  Отказ, Заголовок);
																  
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаПоТаре,
					ИмяТабличнойЧасти,
					Отказ, 
					Заголовок, 
					"Реализация",    // ВидОперации
					Ложь              // ЭтоЗатраты 
	);	
																  

	// Схемы реализации должны быть заполнены правильно
	СтруктураПараметровПроверки = Новый Структура;
	СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетВычетовИзДоходов");
	СтруктураПараметровПроверки.Вставить("СчетРасходовБУ", "СчетСебестоимостиПриВозврате");
	БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, "ВозвратнаяТара", , ТаблицаПоТаре, 
							                             СтруктураПараметровПроверки,
														 СтруктураШапкиДокумента,
							                             Отказ, Заголовок);	
														 
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Функция удаляет из исходной таблицы строки не требующие сторнирования партий по ордерам
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуДляСнятияРезерваПоОрдеру(ТаблицаПоТоварам)

	ТаблицаПоТоварамПоОрдерамБезПраваПродажи = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Колонки.ДокументПолучения.Имя = "ДокументРезерва";
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Количество() Цикл

		СтрокаТаблицы = ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Получить(Сч);
		Если Не СтрокаТаблицы.БезПраваПродажи Тогда
			ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТаблицаПоТоварамПоОрдерамБезПраваПродажи;

КонецФункции // СоздатьТаблицуДляСнятияРезерваПоОрдеру()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, ТаблицаПоСкидкам, Отказ, Заголовок);

	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, ЭтотОбъект, СтруктураШапкиДокумента);
	
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("СоставНабора", ТаблицаПоКомплектам, СтруктураШапкиДокумента, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, ТаблицаПоСкидкам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);							  
	
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ);
	
	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, ТаблицаПоКомплектам, ТаблицаПоТаре, Отказ, Заголовок, СтруктураШапкиДокумента);
	ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, ТаблицаПоКомплектам, ТаблицаПоТаре, Отказ, Заголовок, СтруктураШапкиДокумента);

	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
	                                                    Отказ, Заголовок, СтруктураШапкиДокумента);

	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоКомплектам, ТаблицаПоТаре, Отказ, Заголовок);
	
	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
	
	Если ТаблицаПоТоварам.Количество() > 0 Тогда
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	КонецЕсли;	
    	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить(),
	, // КоличествоСтрокВДокументе
	, // Упр
	, // Бух
	, // Останавливаться
	, // ПроведениеОстановлено
	, // ДокументМоментВремени
	, // СписаниеВыполняетсяОбработкой
	, // СтруктураНаборовЗаписей
	Истина // УчитыватьСуществующиеСтрокиДвиженийПартийТоваров
	);
	
	//Коновалова 13022013 +
	Если (СтруктураШапкиДокумента.ОтражатьВУправленческомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладах")) ИЛИ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладахБухгалтерскийУчет")) Тогда
		 Отказ = Истина;
		 Возврат;
	КонецЕсли;
	//Коновалова 13022013 -
	//ИЗМЕНЕНО Верескул Игорь(Начало 21.04.2021
	//Изменяем движения по регистру партии товаров на складах для НПТ
	ОбщийМодульНПТ.ПриЗаписиВозвратовНаличныхОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	//Окончание)Верескул Игорь 
	
	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если Движения.Хозрасчетный.Модифицированность() Тогда
			Движения.Хозрасчетный.Записать(Ложь);
		КонецЕсли; 		
	КонецЕсли;
	
	Если ТаблицаПоКомплектам.Найти(Перечисления.ТипыНоменклатуры.Комплект, "ТипНоменклатуры") <> Неопределено Тогда
		ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоКомплектам",ТаблицаПоКомплектам);
	КонецЕсли;		

КонецПроцедуры // ДвиженияПоРегистрам()

//Коновалова 19022013 +
Функция НетДвиженийПоПартиям(_Регистр)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПартииТоваровНаСкладах.Регистратор
	                      |ИЗ
	                      |	РегистрНакопления."+_Регистр+" КАК ПартииТоваровНаСкладах
	                      |ГДЕ
	                      |	ПартииТоваровНаСкладах.Регистратор = &Регистратор");
						        
	Запрос.УстановитьПараметр("Регистратор",Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
//Коновалова 19022013 -

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, СтруктураШапкиДокумента)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаПоТоварамМинус = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамМинус.Колонки.МинусКоличество.Имя = "Количество";
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		
	ИначеЕсли ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамМинус, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Комиссионер");

		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьРасход();
		КонецЕсли;

	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамМинус, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Склад");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;

	КонецЕсли;
	

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, СтруктураШапкиДокумента)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	ТаблицаПоТоварамМинус = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамМинус.Колонки.МинусКоличество.Имя = "Количество";
	
	ТаблицаПоТареМинус = ТаблицаПоТаре.Скопировать();
	ТаблицаПоТареМинус.Колонки.МинусКоличество.Имя = "Количество";
	
	Для Каждого СтрокаТоваров Из ТаблицаПоТоварамМинус Цикл
		Если СтрокаТоваров.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый Тогда
			СтрокаТоваров.СчетУчетаБУ             = СтрокаТоваров.ПринятыеСчетУчетаБУ;
			СтрокаТоваров.ПереданныеСобственныеБУ = СтрокаТоваров.ПереданныеПринятыеБУ;
			СтрокаТоваров.НалоговоеНазначение     = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЕсли; 
	КонецЦикла; 
	
	
	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыОрганизацийРегл.
	НаборДвижений = Движения.ТоварыОрганизацийРегл;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТареМинус, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамМинус, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Комиссионер");
	Если НЕ ВестиПартионныйУчетПоСкладамРегл Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Склад");
	КонецЕсли; 
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизацийРегл.ВыполнитьРасход();
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизацийРегл.
		НаборДвижений = Движения.ТоварыОрганизацийРегл;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамМинус, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,  "Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Склад");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизацийРегл.ВыполнитьПриход();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

// По результату запроса по шапке документа формируем движения по упр. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, ТаблицаПоСкидкам, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда

		// Таблица для движений с отрицательным количеством
		ТаблицаПоТоварамМинус = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамМинус.Колонки.МинусКоличество.Имя = "Количество";

		// Таблица для движений с положительным количеством
		ТаблицаПоТоварамПлюс = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамПлюс.Колонки.КоличествоДок.Имя = "Количество";

		// Таблица для движений с отрицательным количеством
		ТаблицаПоКомплектамМинус = ТаблицаПоКомплектам.Скопировать();
		ТаблицаПоКомплектамМинус.Колонки.МинусКоличество.Имя = "Количество";

		// Таблица для движений с положительным количеством
		ТаблицаПоКомплектамПлюс = ТаблицаПоКомплектам.Скопировать();
		ТаблицаПоКомплектамПлюс.Колонки.КоличествоДок.Имя = "Количество";

		// Таблица для движений с отрицательным количеством
		ТаблицаПоТареМинус = ТаблицаПоТаре.Скопировать();
		ТаблицаПоТареМинус.Колонки.МинусКоличество.Имя = "Количество";

		// Таблица для движений с положительным количеством
		ТаблицаПоТареПлюс = ТаблицаПоТаре.Скопировать();
		ТаблицаПоТареПлюс.Колонки.КоличествоДок.Имя = "Количество";
		
		УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		                                 мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		                                 ВидДвиженияНакопления.Приход, Отказ, Заголовок);

		Если Константы.УчитыватьВозвратыТовараПокупателем.Получить() Тогда
			ТабЗаказыПокупателей = ТаблицаПоТоварамМинус.Скопировать();
			МассивУдаляемыхСтрок = Новый Массив;
			Для Каждого СтрокаТЧ Из ТабЗаказыПокупателей Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя) Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
				КонецЕсли;
			КонецЦикла;
			
			Если ТабЗаказыПокупателей.Количество() > МассивУдаляемыхСтрок.Количество() Тогда // Есть строки с Заказом покупателя
			
			    ТабЗаказыПокупателей.Колонки.Добавить("СтатусПартии", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПартийТоваров"));
			    
				Для Каждого СтрокаТЧ Из МассивУдаляемыхСтрок Цикл
					ТабЗаказыПокупателей.Удалить(СтрокаТЧ);
				КонецЦикла;
				Для Каждого СтрокаТЧ Из ТабЗаказыПокупателей Цикл
					СтрокаТЧ.СтатусПартии = ?(СтрокаТЧ.ВидОперацииЗаказаПокупателя = Перечисления.ВидыОперацийЗаказПокупателя.Переработка,
						Перечисления.СтатусыПартийТоваров.ВПереработку,
						Перечисления.СтатусыПартийТоваров.Купленный);
				КонецЦикла;
				
			    // Движения по заказам покупателей.
				НаборДвижений = Движения.ЗаказыПокупателей;
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТабЗаказыПокупателей);
					
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				// Считаем что нельзя выбирать заказы с разными договорами, т.е. договор в шапке = договору в заказе покупателя в таб.части
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Статус, "ТаблицаПоТоварам");

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			КонецЕсли;
		КонецЕсли;

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		   И СуммаДокумента <> 0 Тогда

			// По регистру ПродажиПоДисконтнымКартам.
			Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда
				НаборДвижений = Движения.ПродажиПоДисконтнымКартам;

				// Получим таблицу значений, совпадающую со структурой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.Выгрузить();

				// Заполним таблицу движений.
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ДисконтнаяКарта = СтруктураШапкиДокумента.ДисконтнаяКарта;
				СтрокаДвижений.ВладелецДисконтнойКарты = СтруктураШапкиДокумента.Контрагент;
				СтрокаДвижений.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(-СуммаДокумента, ВалютаДокумента,
									   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
									   СтруктураШапкиДокумента.КурсДокумента,
									   СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
									   СтруктураШапкиДокумента.КратностьДокумента,
									   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

				Если Не Отказ Тогда
					НаборДвижений.ВыполнитьДвижения();
				КонецЕсли;
			КонецЕсли;

			// ПО РЕГИСТРУ ПредоставленныеСкидки.
			НаборДвижений = Движения.ПредоставленныеСкидки;

			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);

			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументСкидки");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ПолучательСкидки");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		
			Если НЕ Отказ Тогда
				
				ОтборСкладОпт  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
				ОтборСкладРозн = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
				ОтборСкладНТТ  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.НТТ);
				
				РезультатЗапросаТоварыОпт = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектамМинус, ОтборСкладОпт);
				РезультатЗапросаТараОпт   = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТареПлюс,       ОтборСкладОпт);

				Если Не РезультатЗапросаТоварыОпт.Пустой() ИЛИ НЕ РезультатЗапросаТараОпт.Пустой() Тогда
				
					НаборДвиженийОпт = Движения.ТоварыНаСкладах;

					ТаблицаТоварыОпт = РезультатЗапросаТоварыОпт.Выгрузить();
					ТаблицаТараОпт   = РезультатЗапросаТараОпт  .Выгрузить();

					СтруктТаблицДокументаОпт = Новый Структура;
					СтруктТаблицДокументаОпт.Вставить("ТаблицаПоТоварам", ТаблицаТоварыОпт);

					ТаблицыДанныхДокументаОпт = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийОпт, СтруктТаблицДокументаОпт);

					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвиженийОпт, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаОпт,  Дата);

					СтруктТаблицДокументаОпт = Новый Структура;
					СтруктТаблицДокументаОпт.Вставить("ТаблицаПоТаре",    ТаблицаТараОпт);

					ТаблицыДанныхДокументаОпт = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийОпт, СтруктТаблицДокументаОпт);

					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаОпт, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");

					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвиженийОпт, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаОпт,  Дата);

				КонецЕсли;
				
				РезультатЗапросаТоварыРозн = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектамМинус, ОтборСкладРозн);
				РезультатЗапросаТараРозн   = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТареПлюс,       ОтборСкладРозн);

				Если НЕ РезультатЗапросаТоварыРозн.Пустой() ИЛИ НЕ РезультатЗапросаТараРозн.Пустой() Тогда
					
					НаборДвиженийРозн = Движения.ТоварыВРознице;
					ТаблицаТоварыРозн = РезультатЗапросаТоварыРозн.Выгрузить();
					ТаблицаТараРозн   = РезультатЗапросаТараРозн  .Выгрузить();
				
					СтруктТаблицДокументаРозн = Новый Структура;
					СтруктТаблицДокументаРозн.Вставить("ТаблицаПоТоварам", ТаблицаТоварыРозн);
					
					ТаблицыДанныхДокументаРозн = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийРозн, СтруктТаблицДокументаРозн);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвиженийРозн, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаРозн, Дата);
					
					СтруктТаблицДокументаРозн = Новый Структура;
					СтруктТаблицДокументаРозн.Вставить("ТаблицаПоТаре",    ТаблицаТараРозн);
					
					ТаблицыДанныхДокументаРозн = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийРозн, СтруктТаблицДокументаРозн);

					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаРозн, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвиженийРозн, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаРозн, Дата);
					
				КонецЕсли;

				РезультатЗапросаТоварыНТТ = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектамМинус, ОтборСкладНТТ);

				Если Не РезультатЗапросаТоварыНТТ.Пустой() Тогда
				
					НаборДвиженийНТТ = Движения.ТоварыВНТТ;
					ТаблицаТоварыНТТ = РезультатЗапросаТоварыНТТ.Выгрузить();
					ТаблицаТоварыНТТ.Колонки.Цена.Имя = "ЦенаВРознице";

					СтруктТаблицДокументаНТТ = Новый Структура;
					СтруктТаблицДокументаНТТ.Вставить("ТаблицаПоТоварам", ТаблицаТоварыНТТ);
					
					ТаблицыДанныхДокументаНТТ = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийНТТ, СтруктТаблицДокументаНТТ);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаНТТ, "ТоварТара", Перечисления.ТоварТара.Товар);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвиженийНТТ, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаНТТ, Дата);
					
				КонецЕсли;
				
			КонецЕсли; // Если НЕ Отказ Тогда
			
		Иначе

			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады.
			НаборДвижений = Движения.ТоварыКПолучениюНаСклады;
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли; 
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;

			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоКомплектамПлюс);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареПлюс);
						
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
				
				// Расход. Качество устанавливаем только для тары.
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
				// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
				
				// Сторнируем приход по ордеру и сделаем расход с минусом, поскольку для правильного
				// отражения в отчетах возврат должен формировать не приход товара, а расход с минусом.
				НаборДвижений = Движения.ТоварыНаСкладах;

				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоКомплектамМинус);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареМинус);
							
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
					
				// Расход. Качество устанавливаем только для тары.
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
				// Приход. Качество устанавливаем для прихода по таре и товарам.
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый);
							
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

			КонецЕсли;

		КонецЕсли;

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				
			// По регистру Продажи
			НаборДвижений = Движения.Продажи;
			ТаблицаПродаж = ТаблицаПоТоварамМинус.Скопировать();
			ТаблицаПродаж.Колонки.ДокументПартии.Имя   = "ДокументПродажи";
			ТаблицаПродаж.Колонки.СтоимостьПродажи.Имя = "Стоимость";
			ТаблицаПродаж.Колонки.НДС.Имя              = "НДСВрем";
			ТаблицаПродаж.Колонки.НДСУпр.Имя           = "НДС";
			
			Для каждого СтрокаТаблицы из ТаблицаПродаж Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПродажи) Тогда
					СтрокаТаблицы.ДокументПродажи = Ссылка;
				КонецЕсли;
			КонецЦикла;

			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
						
			Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
				
				УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПродаж, ТаблицаДвижений, Проект, Дата, "Продажи");
				
			Иначе
				
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
				
			КонецЕсли;

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,		  "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,		  "Контрагент");
			//ТаблицаДвижений.ЗаполнитьЗначения(Сделка,             "ЗаказПокупателя");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПокупателя");
			КонецЕсли;

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.Продажи.ВыполнитьДвижения();
			КонецЕсли;
			
		КонецЕсли;
		
		// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыПереданные.
		НаборДвижений = Движения.ТоварыПереданные;

		// Контроль остатков товара
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
			И Товары.Количество() <> 0 Тогда
			
			ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			КопияТаблицаПоТареПлюс = ТаблицаПоТареПлюс.Скопировать();
			КопияТаблицаПоТареПлюс.Колонки.ЗаказПокупателя.Имя = "Сделка";
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", КопияТаблицаПоТареПлюс);
						
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
						
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара,     "ТаблицаПоТаре");
			
			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", Сделка, "ТаблицаПоТаре");
			КонецЕсли;
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			    				
				КопияТовары = ТаблицаПоТоварамМинус.Скопировать();
				КопияТовары.Колонки.ЗаказПокупателя.Имя = "Сделка";
				
				СтруктТаблицДокумента = Новый Структура;				
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", КопияТовары);				
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "ТаблицаПоТоварам");
				
				Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", Сделка, "ТаблицаПоТоварам");
				КонецЕсли;
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;
					
		УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
			?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
			СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоКомплектам, Истина, Ложь);
				
		Если НЕ Отказ Тогда
						
			// При поступлении по ордеру нужно сторнировать партию ордера
			Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				
				// Снятие резерва по приходному ордеру

				// Сначала удалим из таблицы строки, по которым не надо списывать резерв.
				ТаблицаПоТоварамПоОрдерамБезПраваПродажи = СоздатьТаблицуДляСнятияРезерваПоОрдеру(ТаблицаПоТоварамПлюс);
				ТаблицаПоТареПоОрдерамБезПраваПродажи    = СоздатьТаблицуДляСнятияРезерваПоОрдеру(ТаблицаПоТареПлюс);

				// Если осталась хоть одна строка., то делаем движения.
				Если ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Количество() > 0 ИЛИ ТаблицаПоТареПоОрдерамБезПраваПродажи.Количество() > 0 Тогда 

					НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамПоОрдерамБезПраваПродажи);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареПоОрдерамБезПраваПродажи);

					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);

				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли; // Если ОтражатьВУправленчискомУчете...

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Расчеты в условных единицах организации для документов, 
// которые не проводятся по бухгалтерскому учету, но будут по нему проводиться
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
                                                            Отказ, Заголовок, СтруктураШапкиДокумента)
															
	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Возврат;
	КонецЕсли;
																
	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);	
				
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регл. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	Если не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяРасширеннаяАналитикаУчетаЗатрат = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);
	
	// Формирование движений по регистру "Учет продаж и себестоимости".
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
			СтруктураШапкиДокумента,
			ТаблицаПоТоварам
		);
	КонецЕсли;
	
	ТаблицаПоТоварамКопия = ТаблицаПоТоварам.Скопировать();	
	ТаблицаПоТоварамКопия.Колонки.КоличествоДок.Имя = "Количество";	
	
	ДатаДока = СтруктураШапкиДокумента.Дата;
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварамКопия, ТаблицаПоТаре, , Ложь, Истина);
	
	// Проводки по поступлению товаров, тары и услуг.
	ДатаДока   = Дата;
	ПроводкиБУ = Движения.Хозрасчетный;

	// Проводки по реализации товаров
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		ТаблицаДвижений = ТаблицаПоТоварам.Скопировать();
		КоличествоСтрок = ТаблицаПоТоварам.Количество();
		Для ОбратныйИндекс = 1 по КоличествоСтрок Цикл
			СтрокаТД = ТаблицаДвижений[КоличествоСтрок - ОбратныйИндекс];
			Если ЗначениеЗаполнено(ТаблицаПоТоварам[КоличествоСтрок - ОбратныйИндекс].ДокументПартии) Тогда
				ТаблицаДвижений.Удалить(КоличествоСтрок - ОбратныйИндекс);
				Продолжить;
			КонецЕсли;
			Если ИспользуетсяРасширеннаяАналитикаУчетаЗатрат И СтрокаТД.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый Тогда
				ТаблицаДвижений.Удалить(КоличествоСтрок - ОбратныйИндекс);
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		УправлениеЗапасамиПартионныйУчет.СформироватьПроводкиПоПоступлениюТМЦ(
			СтруктураШапкиДокумента, 
			Отказ, 
			ТаблицаДвижений, 
			, 
			, 
			, 
			, 
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		);
		
		// Проводки по товарам
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

			// Выручка
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;

			//Смартис Лиманчук начало 05.10.2012
			Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссияНал Тогда
			//Смартис Лиманчук окончание 05.10.2012
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			Проводка.Содержание      = "Возврат товаров";
			Проводка.НомерЖурнала    = "";

			Проводка.СчетДт         = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				
				Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
				Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СтрокаТаблицы.СтоимостьНУ);
				
			КонецЕсли;
			

			Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
			
			//Смартис Лиманчук начало 05.10.2012
			Иначе
			
			//1
				Проводка = ПроводкиБУ.Добавить();
			
				Проводка.Период          = Дата;
				Проводка.Активность      = Истина;
				Если СтруктураШапкиДокумента.Дата >= Дата("20210101") Тогда
					НаличнаяОрганизация = Константы.НПТ.Получить();
				Иначе
					НаличнаяОрганизация = Константы.КрафтКолор.Получить();
				КонецЕсли;

				Проводка.Организация     = НаличнаяОрганизация;
				Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
				Проводка.Содержание      = "Возврат товаров";
				Проводка.НомерЖурнала    = "";

				Проводка.СчетДт         = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
					Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СтрокаТаблицы.СтоимостьНУ);
				КонецЕсли;

				Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
				
			// а эти проводки велено убрать
			////2
			//
			//	Проводка = ПроводкиБУ.Добавить();
			//	
			//	Проводка.Период          = Дата;
			//	Проводка.Активность      = Истина;
			//	Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			//	Проводка.Сумма           = СтрокаТаблицы.СуммаНормативнойСебестоимости;
			//	Проводка.Содержание      = "Возврат товаров";
			//	Проводка.НомерЖурнала    = "";

			//	Проводка.СчетДт         = СтрокаТаблицы.СчетДоходовБУ;
			//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			//	
			//	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			//		Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			//		Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СтрокаТаблицы.СуммаНормативнойСебестоимости);
			//	КонецЕсли;

			//	Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.ДоговорЭскароПродаетКрафту.Владелец);
			//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорЭскароПродаетКрафту);
			//	//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			//	
			////3
			//
			//	Проводка = ПроводкиБУ.Добавить();
			//	
			//	Проводка.Период          = Дата;
			//	Проводка.Активность      = Истина;
			//	Проводка.Организация     = СтруктураШапкиДокумента.ДоговорКрафтПокупаетУЭскаро.Организация;
			//	Проводка.Сумма           = СтрокаТаблицы.СуммаНормативнойСебестоимости;
			//	Проводка.Содержание      = "Возврат товаров";
			//	Проводка.НомерЖурнала    = "";

			//	Проводка.СчетДт         = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПоставщиками;
			//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.ДоговорКрафтПокупаетУЭскаро.Владелец);
			//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.ДоговорКрафтПокупаетУЭскаро);
			//	
			//	Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			//		Проводка.НалоговоеНазначениеКт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			//		Проводка.СуммаНУКт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СтрокаТаблицы.СуммаНормативнойСебестоимости);
			//	КонецЕсли;

			//	Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.РасходыНаСбыт;
			//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", СтруктураШапкиДокумента.СтатьяЗатратДляКрафт);
			//	
			//	СписокПодразделений = РаботаСДиалогами.ПолучитьСписокПодразделенийОрганизаций(СтруктураШапкиДокумента.Подразделение,СтруктураШапкиДокумента.Организация);
			//	Если СписокПодразделений.Количество()>0 Тогда
			//		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СписокПодразделений[0].Значение);
			//	КонецЕсли;
				
			КонецЕсли;
			//Смартис Лиманчук окончание 05.10.2012

		КонецЦикла; // Проводки по товарам
	КонецЕсли;
	
	// Проводки по таре
	
	ТаблицаДвижений = ТаблицаПоТаре.Скопировать();
	КоличествоСтрок = ТаблицаПоТаре.Количество();
	Для ОбратныйИндекс = 1 по КоличествоСтрок Цикл
		СтрокаТД = ТаблицаДвижений[КоличествоСтрок - ОбратныйИндекс];
		Если ЗначениеЗаполнено(ТаблицаПоТаре[КоличествоСтрок - ОбратныйИндекс].ДокументПартии) Тогда
			ТаблицаДвижений.Удалить(КоличествоСтрок - ОбратныйИндекс);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	УправлениеЗапасамиПартионныйУчет.СформироватьПроводкиПоПоступлениюТМЦ(
		СтруктураШапкиДокумента, 
		Отказ, 
		, 
		ТаблицаДвижений, 
		, 
		, 
		, 
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

		// Бухгалтерский учет
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период          = ДатаДока;
		Проводка.Активность      = Истина;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
		Проводка.Содержание      = "Возврат тары";
		Проводка.НомерЖурнала    = "";

		Проводка.СчетДт         = СтрокаТаблицы.СчетДоходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			
			Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
			Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, СтрокаТаблицы.СтоимостьНУ);
			
		КонецЕсли;
		
		Проводка.СчетКт          = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"     , СтрокаТаблицы.СделкаРегл);
		Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкиСуммаБезНДСВал;


	КонецЦикла; // Проводки по таре

	// НДС 
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ);
	
	// Проводки по взаиморасчетам
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Заголовок);
	Если СтруктураПараметровЗачетАванса = ложь тогда
	   //Отказ = Истина;
	   СуммаАванса = 0;
	Иначе
		//Возвращает сумму аванса в валюте регламентированного учета!
		ДвиженияДляРегистраРасчетовПоПриобретению = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре);
		СтруктураДвижений = Новый Структура("ПроводкиБУ", ПроводкиБУ); 
		СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоПриобретению, Отказ);

		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			БухгалтерскийУчетРасчетовСКонтрагентами.ПроверитьВозможностьЗачетаАвансаВВалюте(СтруктураШапкиДокумента, СтруктураПараметровЗачетАванса, Отказ, Заголовок);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляРасчетыПоПриобретениеРеализацияВВалюте(Ссылка);
			БухгалтерскийУчетРасчетовСКонтрагентами.СформироватьДвиженияПоРасчетыПриобретениеРеализацияВВалюте(СтруктураПараметров, Отказ, ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// 
Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС 
		И НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		// Налоговый учет НП или НДС не ведется
		Возврат;
	КОнецЕсли;

    СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", 		СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",  СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	СтруктураПараметров.Вставить("НаправлениеДвижения", Перечисления.НаправленияДвижений.Поступление);
	СтруктураПараметров.Вставить("РасчетыВозврат",  	Перечисления.РасчетыВозврат.Возврат);
	
	СтруктураПараметров.Вставить("ЕстьНДС",  			СтруктураШапкиДокумента.ЕстьНДС);
	СтруктураПараметров.Вставить("ВалютаДокумента",     СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("Период",     			СтруктураШапкиДокумента.Дата);
	
    СтруктураДвижений = Новый Структура;
	СтруктураДвижений.Вставить("НалоговыйУчет", 			 Движения.ПродажиНалоговыйУчет);
	СтруктураДвижений.Вставить("ОжидаемыИПодтвержденныйНДС", Движения.ОжидаемыйИПодтвержденныйНДСПродаж);
	
	// ТОВАРЫ...
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
		И Дата < '20110101'// с  2011 согласно НК обязательства по НДС наступают в момент передачи товаров по договорам комиссии
		Тогда
		// Это не наши ценности, следовательно НДС по ним учитывать не нужно
	Иначе
		
		МассивТаблицТоваров = Новый Массив();
		
		МассивТаблицТоваров.Добавить(ТаблицаПоТоварам);
		
		СтруктураПараметров.Вставить("ТаблицыТоваров", МассивТаблицТоваров);
		
	КонецЕсли;
		
	// ТАРА
	МассивТаблицТары = Новый Массив();
	МассивТаблицТары.Добавить(ТаблицаПоТаре);
	СтруктураПараметров.Вставить("ТаблицыТары", МассивТаблицТары);
	
	НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаОтгрузка(СтруктураПараметров, СтруктураДвижений, мВалютаРегламентированногоУчета, Отказ);

КонецПроцедуры // 

//
Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ)
	
	// Бухгалтерский учет
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
		И Дата < '20110101'
		Тогда
		// Это не наши ценности, следовательно НДС по ним учитывать не нужно
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	// Получим таблицу движений по счетам НДС
	
	// ТОВАРЫ
	ТаблицаДвижений = ТаблицаПоТоварам.Скопировать();
	ТаблицаДвижений.Свернуть("СделкаРегл,СчетУчетаНДС,СчетДоходовБУ,СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3,НоменклатурнаяГруппа, НалоговоеНазначениеДоходовИЗатрат", "ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = "НДС: налоговые обязательства: сторно";
			Проводка.НомерЖурнала               = "";

			Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				Проводка.СчетДт         = СтрокаТаблицы.СчетДоходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.НалоговоеНазначениеДт  = СтрокаТаблицы.НалоговоеНазначениеДоходовИЗатрат;
				    Проводка.СуммаНУДт 				= НалоговыйУчет.ОпределитьСтоимостьНУ(Проводка.НалоговоеНазначениеДт, -СтрокаТаблицы.ПроводкиСуммаНДСРегл);
				КонецЕсли;
				
			Иначе	
				// с 2011 года согласно НК начисляются обязательства при поставке товаров по договорам комиссии
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки", 	  СтрокаТаблицы.СделкаРегл);
			КонецЕсли;

			Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"     , СтрокаТаблицы.СделкаРегл);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование, "ДопустимыйСтатус1");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция, "ДопустимыйСтатус2");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
	КонецЕсли;

	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), "КратностьДокумента");

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");

	Для каждого Строка Из ТаблицаДвижений Цикл
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
	КонецЦикла;
	
	// Учет по проектам
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект,"Проект");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

// Заполняет колонки значениями, нужными для регл. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	Если Не ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,                 "Организация");

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда

		Для каждого Строка Из ТаблицаДвижений Цикл

			СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));

			Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
			Строка.КорСубконтоБУ1 = СтрокаТЧ.СубконтоРасходовБУ1;
			Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоРасходовБУ2;
			Строка.КорСубконтоБУ3 = СтрокаТЧ.СубконтоРасходовБУ3;

			Строка.НалоговоеНазначениеПоФакту = СтрокаТЧ.НалоговоеНазначение;	
			
		КонецЦикла;

	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		Для каждого Строка Из ТаблицаДвижений Цикл

			СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));

			Строка.КорСчетБУ         = СтрокаТЧ.СчетУчетаБУ;
			Строка.ПринятыеКорСчетБУ = СтрокаТЧ.ПринятыеСчетУчетаБУ;
			
			
			Строка.СчетУчетаБУ			= СтрокаТЧ.ПереданныеСобственныеБУ;

			Строка.ПринятыеСчетУчетаБУ  = СтрокаТЧ.ПереданныеПринятыеБУ;
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры 

//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный     ,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция     ,"ДопустимыйСтатус3");

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");

КонецПроцедуры 

//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)

	Если Не ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация            , "Организация");
	
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТаре.Получить(ТаблицаДвижений.Индекс(Строка));

		Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
		Строка.КорСубконтоБУ1 = СтрокаТЧ.СубконтоРасходовБУ1;
		Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоРасходовБУ2;
		Строка.КорСубконтоБУ3 = СтрокаТЧ.СубконтоРасходовБУ3;

		Если    СтруктураШапкиДокумента.ЕстьНДС 
			ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			
			Строка.НалоговоеНазначениеПоФакту   	= СтрокаТЧ.НалоговоеНазначение; 
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры 

// Формируем движения по регистру СписанныеТовары
//
Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	//Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
	//	ТаблицаПоТоварам.Колонки.ДокументПартии.Имя = "ВозвратОтПокупателяДокументПартии";
	//ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
	//	ТаблицаПоТоварам.Колонки.ДокументПартии.Имя = "ДокументПередачи";
	//КонецЕсли;
	ТаблицаПоТоварам.Колонки.КоличествоДок.Имя  = "Количество";
	ТаблицаПоТоварам.Колонки.ЗаказПокупателя.Имя  = "ЗаказСписания";

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам), ТаблицаДвижений);
	
	ТаблицаПоТоварам.Колонки.ЗаказСписания.Имя  = "ЗаказПокупателя";
	
	Сч = 0;
	Пока Сч < ТаблицаДвижений.Количество() Цикл
		СтрокаТаблицы = ТаблицаДвижений.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии) Тогда
			 ТаблицаДвижений.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаДвижений.ЗагрузитьКолонку(ТаблицаДвижений.ВыгрузитьКолонку("Склад"),"СкладПолучатель");
	
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ДокументПередачи = Строка.ДокументПартии;
	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя,   "КодОперацииПартииТоваров");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера, "КодОперацииПартииТоваров");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,      "СтатусПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, 											"ДоговорКонтрагента");
		
	КонецЕсли;

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений,  СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	// ТАРА ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	//Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
	//	ТаблицаПоТаре.Колонки.ДокументПартии.Имя = "ВозвратОтПокупателяДокументПартии";
	//ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
	//	ТаблицаПоТаре.Колонки.ДокументПартии.Имя = "ДокументПередачи";
	//КонецЕсли;
	ТаблицаПоТаре.Колонки.КоличествоДок.Имя  = "Количество";
	ТаблицаПоТаре.Колонки.ЗаказПокупателя.Имя  = "ЗаказСписания";	
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
	
	ТаблицаПоТаре.Колонки.ЗаказСписания.Имя  = "ЗаказПокупателя";

	Сч = 0;
	Пока Сч < ТаблицаДвижений.Количество() Цикл
		СтрокаТаблицы = ТаблицаДвижений.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии) Тогда
			 ТаблицаДвижений.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаДвижений.ЗагрузитьКолонку(ТаблицаДвижений.ВыгрузитьКолонку("Склад"),"СкладПолучатель");
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ДокументПередачи = Строка.ДокументПартии;
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "ЗаказПартии");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата  , "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя, "КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый                                , "Качество");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений , СтруктураШапкиДокумента, ТаблицаПоТаре);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
    	Движения.СписанныеТовары.Записать(Истина);
    КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ"               , "СчетУчетаБУ");
	СтруктураПолей.Вставить("Забалансовый"              , "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("СхемаРеализации"           , "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ"             , "СхемаРеализации.СчетВычетовИзДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"        , "СхемаРеализации.СубконтоВычетовИзДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"        , "СхемаРеализации.СубконтоВычетовИзДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"        , "СхемаРеализации.СубконтоВычетовИзДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"            , "СхемаРеализации.СчетСебестоимостиПриВозврате");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"       , "СхемаРеализации.СубконтоСебестоимостиПриВозврате1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"       , "СхемаРеализации.СубконтоСебестоимостиПриВозврате2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"       , "СхемаРеализации.СубконтоСебестоимостиПриВозврате3");
	СтруктураПолей.Вставить("НалоговоеНазначение"   	, "НалоговоеНазначение");
	СтруктураПолей.Вставить("НалоговоеНазначениеПоФакту", "НалоговоеНазначение");	
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  , "НалоговоеНазначение.ВидНалоговойДеятельности");

	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат" , "НалоговоеНазначениеДоходовИЗатрат");	
	СтруктураПолей.Вставить("НалоговоеНазначениеНовое"          , "НалоговоеНазначениеДоходовИЗатрат");	
	
	СтруктураПростыхПолей.Вставить("СтавкаНДС"          , Перечисления.СтавкиНДС.НеНДС);
	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"       , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПростыхПолей.Вставить("ВидДеятельностиНДС" , Перечисления.ВидыДеятельностиНДС.Необлагаемая);
	
	
	//Для определения счетов учета при проведении документов
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("СкладВидСклада"            , "ПриходныйОрдер.Склад.ВидСклада");
	Иначе
		СтруктураПолей.Вставить("СкладВидСклада"            , "Склад.ВидСклада");
	КонецЕсли;
	
	СтруктураПолей.Вставить("СебестоимостьНУ"               , "СебестоимостьНУ");
	
КонецПроцедуры //ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
    мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация,истина);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		Иначе
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитикаРегл.ЕстьНДС);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

////////////////////////////////////////////////////
// Подготовка и проверка структуры шапки документа

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = неопределено,Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
    СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);

	// Для определения где нужно проверять заказ: в шапке или в ТЧ.
	ЗаказВТабличнойЧасти = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	СтруктураШапкиДокумента.Вставить("ЗаказВТабличнойЧасти", ЗаказВТабличнойЧасти);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"       , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетовРегл"                 , "ВедениеВзаиморасчетовРегл");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"        , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                 , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                 , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчет");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом" , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"        , "ОтражатьВРегламентированномУчете");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "СхемаНалоговогоУчета"                      , "СхемаНалоговогоУчета");
	
	Если ТипЗнч(Сделка)<>Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                 , "СделкаВидОперации");
	КонецЕсли;
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
 	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "ВидСклада"                   , "ВидСклада");
	Иначе
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "Склад.ВидСклада"             , "ВидСклада");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "Склад"                       , "СкладПриходногоОрдера");
	КонецЕсли;

	// Дополним полями, нужными для упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);
	
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	СтруктураШапкиДокумента.Вставить("ЭтоВозврат", Истина);
	
	Если ОтложенноеПроведениеДокументов.ИспользуетсяОтложенноеПроведение(СтруктураШапкиДокумента)
	  И ДополнительныеСвойства.Свойство("ЭтапПроведения") Тогда
    	СтруктураШапкиДокумента.Вставить("ДопроведениеДокумента", ДополнительныеСвойства.ЭтапПроведения = "Допроведение");
	КонецЕсли;	
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Дополняет полями, нужными для упр. учета
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	//Смартис Лиманчук начало 05.10.2012
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "СтатьяЗатратДляКрафт"                        , "СтатьяЗатратДляКрафт");
	//Смартис Лиманчук окончание 05.10.2012

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам", "МоментОпределенияБазыНДСПоПродажам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам", "МоментОпределенияБазыНДСПоПокупкам");

КонецПроцедуры

// Проверяет правильность заполнения упр. реквизитов шапки
//
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Если склад указывается в ТЧ, то в шапке он может быть не заполнен или указан неправильно,
	// это ни на что не влияет, потому что при проведении используется склад в ТЧ.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти 
	   И СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять возврат на неавтоматизированную торговую точку!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапкиУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента,
					//Смартис Лиманчук начало 07.12.2012
					|Подразделение,
					//Смартис Лиманчук окончание 07.12.2012
					|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");

	Если  Не СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("СкладОрдер");
	КонецЕсли;					
					
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей,СтруктураШапкиДокумента);
		
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		И НЕ УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента,"ВозвратОтПокупателя") Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Заказ покупателя""!");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по счетам""! 
		|Заполните поле ""Счет покупателю""!");
	КонецЕсли;	
	
	// Теперь вызовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		И СтруктураШапкиДокумента.ЕстьНДС
		И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		Если  Дата < '20110101'
			И СтруктураШапкиДокумента.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомиссионером_НК Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("В договоре комиссии указана неправильная схема налогового учета! Используйте схему для периода до 2010 года!",Отказ,Заголовок);
			
		ИначеЕсли Дата >= '20110101'
			  И НЕ СтруктураШапкиДокумента.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомиссионером_НК Тогда
			 
			 ОбщегоНазначения.СообщитьОбОшибке("В договоре комиссии указана неправильная схема налогового учета! Используйте схему для периода с 2011 года!",Отказ,Заголовок);
			 
		КонецЕсли;
	
	КонецЕсли;
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	// Оборудование нельзя вернуть по договору, взаиморасчеты по которому ведутся по заказам.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование
	   И (СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ  СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Возврат оборудования не может производиться по договору с ведением взаиморасчетов """
		+  СокрЛП(СтруктураШапкиДокумента.ВедениеВзаиморасчетов)
		+ """.", Отказ, Заголовок);
	КонецЕсли;
	
	ПроверитьВыборТорговойТочки(Отказ);
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
		Если ВозвратнаяТара.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
		КонецЕсли;
		
		Если НЕ (ДоговорКонтрагента.ВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			И Дата < '20110101'
			) Тогда
		   Если СтруктураШапкиДокумента.ЕстьНДС
			   И СтруктураШапкиДокумента.УчитыватьНДС Тогда
				СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
				Если (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером И Дата >= '20110101') Тогда
					СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПодтвержденный");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейШапкиРегл()

////////////////////////////////////////////////////
// Подготовка и проверка таблиц документа

// Процедура формирует таблицы документа, вляиющие на состояние расчетов с контрагентами.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре) Экспорт
	
	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Номенклатура"                 , "Номенклатура");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"         , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Услуга"                       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                        , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                     , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ТипНоменклатуры"              , "Номенклатура.ВидНоменклатуры.ТипНоменклатуры");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"		   , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("КоличествоДок"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Цена"                         , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"             , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Сумма"                        , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                    , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                          , "СуммаНДС");	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"   , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"            , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"  , "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("ДокументПартии"               , "ДокументПартии");
	СтруктураПолей.Вставить("Себестоимость"                , "Себестоимость");
	СтруктураПолей.Вставить("Качество"                     , "Качество");
	СтруктураПолей.Вставить("КачествоНовое"                , "Качество");
	СтруктураПолей.Вставить("Склад"                        , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                    , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ДокументПолучения"            , "ПриходныйОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения", "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("БезПраваПродажи"              , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("КлючСтроки"                   , "КлючСтроки");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"                , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"         , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"         , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки" , "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("КоличествоВЕдиницахДокумента" , "Количество");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ВидОперацииЗаказаПокупателя"  , "ЗаказПокупателя.ВидОперации");
	СтруктураПолей.Вставить("ПринадлежностьНоменклатуры"   , "ПринадлежностьНоменклатуры");
	//Смартис Лиманчук начало 05.10.2012
	СтруктураПолей.Вставить("СуммаНормативнойСебестоимости", "СуммаНормативнойСебестоимости");
	//Смартис Лиманчук окончание 05.10.2012

	// Дополним полями, нужными для регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей        = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	
	СтруктураПолей.Удалить ("Количество");
	СтруктураПолей.Вставить("КоличествоДок" 			, "Количество"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураПолей.Вставить("Номенклатура"  			, "Номенклатура");
	СтруктураПолей.Вставить("Услуга"        			, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"         			, "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"		, "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Сумма"         			, "Сумма");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("ВидСклада"                 , "Склад.ВидСклада");
	СтруктураПолей.Вставить("Склад"                     , "Склад");
	СтруктураПолей.Вставить("ДокументПолучения"         , "ПриходныйОрдер");
	СтруктураПолей.Вставить("БезПраваПродажи"           , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "ЗаказПокупателя");
	СтруктураПолей.Вставить("Себестоимость" 			, "Себестоимость");
	СтруктураПолей.Вставить("ДокументПартии"			, "ДокументПартии");
	
	СтруктураПростыхПолей.Вставить("ВестиПартионныйУчетПоСериям", Ложь);
	
	// Дополним полями, нужными для регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей);

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура();
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;	
	КонецЕсли;

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругленияТара);
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьПризнакАмортизируетсяПриПоступлении(
			ТаблицаПоТоварам, // ТаблицаПоТоварам
			ТаблицаПоТаре     // ТаблицаПоТаре
		);
	КонецЕсли; 	
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ"  					   , "СчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ"              , "ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("СхемаРеализации"                  , "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ"                    , "СхемаРеализации.СчетВычетовИзДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"               , "СхемаРеализации.СубконтоВычетовИзДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"               , "СхемаРеализации.СубконтоВычетовИзДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"               , "СхемаРеализации.СубконтоВычетовИзДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"                   , "СхемаРеализации.СчетСебестоимостиПриВозврате");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"              , "СхемаРеализации.СубконтоСебестоимостиПриВозврате1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"              , "СхемаРеализации.СубконтоСебестоимостиПриВозврате2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"              , "СхемаРеализации.СубконтоСебестоимостиПриВозврате3");
	СтруктураПолей.Вставить("ПереданныеСобственныеБУ"		   , "ПереданныеСобственныеБУ");
	СтруктураПолей.Вставить("ПереданныеПринятыеБУ"             , "ПереданныеПринятыеБУ");
	
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	
	СтруктураПолей.Вставить("НалоговоеНазначение"         	   , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"         , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДС" 			   , "НалоговоеНазначение.ВидДеятельностиНДС");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеПоФакту"       , "НалоговоеНазначение");
	
	СтруктураПолей.Вставить("НалоговоеНазначениеДоходовИЗатрат" , "НалоговоеНазначениеДоходовИЗатрат");
	СтруктураПолей.Вставить("НалоговоеНазначениеНовое"          , "НалоговоеНазначениеДоходовИЗатрат");
	
	//Для определения счетов учета при проведении документов
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("СкладВидСклада"            , "ПриходныйОрдер.Склад.ВидСклада");
	Иначе
		СтруктураПолей.Вставить("СкладВидСклада"            , "Склад.ВидСклада");
	КонецЕсли;
	
	СтруктураПолей.Вставить("СебестоимостьНУ"               , "СебестоимостьНУ");

	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС"
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьПродажи",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
								  ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.СтоимостьПродажи = СтрокаТаблицы.Сумма + 
										 ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
										 
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки	
	ТаблицаТоваров.Колонки.Добавить("МинусКоличество"     , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаТоваров.Колонки.Добавить("МинусСебестоимость"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПлюсСебестоимость"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"              , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));


	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл        		
		Если ТипЗнч(СтрокаТаблицы.КоличествоДок)= Тип("Число") Тогда
			СтрокаТаблицы.МинусКоличество  = - СтрокаТаблицы.КоличествоДок;
		Иначе
			СтрокаТаблицы.МинусКоличество = 0;
			СтрокаТаблицы.КоличествоДок = 0;

		КонецЕсли;		
		
		СтрокаТаблицы.СтоимостьПродажи = СтрокаТаблицы.Сумма + 
		                                 ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

										 
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоДок;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + Ценообразование.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
												УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;										 

		СтрокаТаблицы.СуммаВзаиморасчетов = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьПродажи, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, 
		                                 КратностьВзаиморасчетов);

		СтрокаТаблицы.СтоимостьБезСкидок  = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СтоимостьПродажи    = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьПродажи, СтруктураШапкиДокумента.ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КурсДокумента,
		                                     СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КратностьДокумента,
		                                     СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
											 
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
											СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
											СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
											СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
											
				
									 
											 
		СтрокаТаблицы.НДСУпр    = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КурсДокумента,
		                                     СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КратностьДокумента,
		                                     СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.ПлюсСебестоимость   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Себестоимость, мВалютаРегламентированногоУчета,
		                                     СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                     1,
		                                     СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                     1,
		                                     СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) * СтрокаТаблицы.КоличествоДок;
											 
		СтрокаТаблицы.МинусСебестоимость= - СтрокаТаблицы.ПлюсСебестоимость;

		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;

	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
	                     ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада", "МинусКоличество");
	КонецЕсли;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Добавляет в таблицу колонки, необходимые для регл. проведения.
//
Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)

	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаТоваров, СтруктураШапкиДокумента);	
	
	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСКредит" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);
	

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";
	
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);	

	// Проверим заполнение автоматических скидок.
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		ПроцентНеЗаполнен   = НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПроцентАвтоматическихСкидок);
		УсловиеНеЗаполнено  = НЕ ЗначениеЗаполнено(СтрокаТаблицы.УсловиеАвтоматическойСкидки);
		ЗначениеНеЗаполнено = НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки);

		Если (ПроцентНеЗаполнен И УсловиеНеЗаполнено И ЗначениеНеЗаполнено)
		 Или Не(ПроцентНеЗаполнен Или УсловиеНеЗаполнено Или ЗначениеНеЗаполнено)Тогда // ошибок нет
		Иначе
			Если НЕ ПроцентНеЗаполнен
			   И  НЕ УсловиеНеЗаполнено
			   И  ТипЗнч(СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки) = Тип("Число")
			   И  СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = 0 Тогда
				// Ошибок нет.
			Иначе
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки)
				                              + """ табличной части ""Товары"": ";
				Если ПроцентНеЗаполнен Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Процент автоматической скидки""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				Если УсловиеНеЗаполнено Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Условие автоматической скидки""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				Если ЗначениеНеЗаполнено Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Значение условия автоматической скидки""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Качество, Количество, Сумма");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента,"ВозвратОтПокупателя") Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	Иначе
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей);
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Товары", "ЗаказПокупателя", Отказ, Заголовок);
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);

	// Проверка наличия продажных цен на приходуемый товар.
	УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ,
	                                                       Заголовок, "ВидСклада");

	// При реализации услуг должен быть указан конкретный вид налоговой деятельности.
	СтруктураПараметровПроверки = Новый Структура("ПроверятьРаспределяемую, ПроверятьНеОблагаемую");
	НалоговыйУчет.ПроверитьТабличнуюЧастьНаРазрешенныеВидыНалоговойДеятельности(ЭтотОбъект, "Товары", , ТаблицаПоТоварам,
	                                                              СтруктураПараметровПроверки, 
	                                                              СтруктураШапкиДокумента, 
																  Отказ, Заголовок);
																  
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
		СтруктураШапкиДокумента, 
		ТаблицаПоТоварам,
		ИмяТабличнойЧасти,
		Отказ, 
		Заголовок, 
		"Реализация",     // ВидОперации
		Ложь              // ЭтоЗатраты 
	);	
																  
	// Схемы реализации должны быть заполнены правильно
	СтруктураПараметровПроверки = Новый Структура;
	СтруктураПараметровПроверки.Вставить("СчетДоходовБУ",  "СчетВычетовИзДоходов");
	СтруктураПараметровПроверки.Вставить("СчетРасходовБУ", "СчетСебестоимостиПриВозврате");
	БухгалтерскийУчет.ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ЭтотОбъект, "Товары", , ТаблицаПоТоварам, 
							                             СтруктураПараметровПроверки,
														 СтруктураШапкиДокумента,
							                             Отказ, Заголовок);	

	//Смартис Лиманчук начало 25.03.2013
	//если не указан документ партии и не указана себестоимость партии, то такой документ разрешать записывать и не разрешать проводить
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки)
		                              + """ табличной части ""Товары"": ";
	    Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии) И СтрокаТаблицы.Себестоимость = 0 Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Себестоимость партии""!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	//Смартис Лиманчук окончание 25.03.2013
														 
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС",                Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("НДС",                        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов

	КонецЦикла;
	
	// Порядок вызова в данном случае важен
    ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	ТаблицаТары.Колонки.Добавить("МинусКоличество"     , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов");
	ТаблицаТары.Колонки.Добавить("ПлюсСебестоимость"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("МинусСебестоимость",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.МинусКоличество  = - СтрокаТаблицы.КоличествоДок;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, 
		                                 КратностьВзаиморасчетов);

										 
		СтрокаТаблицы.ПлюсСебестоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Себестоимость, ВалютаДокумента,
											 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
											 СтруктураШапкиДокумента.КурсДокумента,
											 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
											 СтруктураШапкиДокумента.КратностьДокумента,
											 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) * СтрокаТаблицы.КоличествоДок;
										 
		СтрокаТаблицы.МинусСебестоимость = -СтрокаТаблицы.ПлюсСебестоимость;
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = 0;
        		
	КонецЦикла;

	ТаблицаТары.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТары, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТары.ВыгрузитьКолонку("Склад"),
	                     ТаблицаТары.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТары, ТаблицаПоЦенам, "ВидСклада", "КоличествоДок");
	КонецЕсли;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Добавляет в таблицу колонки, необходимые для регл. проведения.
//
Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления)

	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("ВозвратнаяТара", ТаблицаТары, СтруктураШапкиДокумента);
	
	ТаблицаТары.Колонки.Добавить("ПроводкиСуммаНДСКредит" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления, Ложь);

КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

// Заполняет таблицу скидок для проведения.
//
// Параметры: 
//  ТаблицаТоваров          - таблица значений по товарам,
//  ТаблицаУслуг            - таблица значений по скидкам,
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, СтруктураШапкиДокумента)

	МетаданныеДокумента = Метаданные();

	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоВЕдиницахДокумента, 2), ВалютаДокумента, 
		   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		   СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		   СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;

		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
//			СтрокаДвижений.Качество = СтрокаТаблицы.Качество;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);

			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;

		//Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;

		СуммаСоСкидкамиРеально = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;

		Если Разница <> 0
		   И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;

		//Натуральные скидки.
		Если ТипЗнч(СтрокаТаблицы.Комплект)<>Тип("Булево") Тогда
			СтрокаТаблицы.Комплект = ложь;
		КонецЕсли;		
		Если СтрокаТаблицы.Комплект Тогда
			Если Ценообразование.ЭтоСпецПредложение(СтруктураШапкиДокумента.Дата,
			        СтрокаТаблицы.Номенклатура,
			        СтрокаТаблицы.ХарактеристикаНоменклатуры,
			        Ценообразование.ПолучитьМассивПолучателейСкидки(Перечисления.ВидыСкидок.Оптовая, ЭтотОбъект)) Тогда
				Комплектующие = СоставНабора.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки));

				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;

				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;

					СтоимостьКомплектующей = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * СтрокаТаблицы.КоличествоДок * Комплектующая.Количество,
					   ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					   СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
					   СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;

				СуммаСкидки = СтоимостьКомплектующих - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма,
				   ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				   СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				   СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаСкидки Из ТаблицаДвижений Цикл
		СтрокаСкидки.СуммаСкидки = -СтрокаСкидки.СуммаСкидки;
	КонецЦикла;

	Возврат ТаблицаДвижений;

КонецФункции // ПодготовитьТаблицуСкидок()

Процедура ПроверитьВыборТорговойТочки(Отказ)
	Если НЕ Отказ И НЕ ЗначениеЗаполнено(кпкТорговаяТочка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	кпкТорговыеТочки.Ссылка
		|ИЗ
		|	Справочник.кпкТорговыеТочки КАК кпкТорговыеТочки
		|ГДЕ
		|	кпкТорговыеТочки.Владелец = &Контрагент";
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		тзРезультат = Запрос.Выполнить().Выгрузить();
		
		Если тзРезультат.Количество() > 0 Тогда
			Если НЕ РольДоступна("ПолныеПрава") Тогда
				Отказ = Истина;
			//КонецЕсли;
			
			Сообщить("Не выбрана торговая точка");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
		И ТипОснования <> Тип("ДокументСсылка.ЗаказПокупателя")
		И ТипОснования <> Тип("ДокументСсылка.СчетНаОплатуПокупателю")
		И ТипОснования <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		возврат;
	КонецЕсли;
	
	СчетаРеглИзОснования = Ложь;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ОтражатьВБухгалтерскомУчете = Основание.ОтражатьВБухгалтерскомУчете;
        
		СкладОрдер = Основание.Склад;
		Проект     = Основание.Проект;
        
        кпкТорговаяТочка = Основание.кпкТорговаяТочка;
        
		Сделка = Основание.Сделка; 

		Если Основание.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда 
			ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование;
			Если Основание.Проведен Тогда
				// Скопируем табличные части из документа основания.
				ЗаполнитьТоварыПоОснованию(Основание);
				СчетаРеглИзОснования = Истина;
				ЗаполнитьВозвратнуюТаруПоОснованию(Основание);
			КонецЕсли;
		Иначе
			//Смартис Лиманчук начало 02.10.2012
			//ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
			Если Основание.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
				ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
			ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссияНал Тогда
				ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссияНал;
			КонецЕсли;
			//Смартис Лиманчук окончание 02.10.2012
			Если Основание.Проведен Тогда
				Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					ЗаполнитьТоварыНереализованнымиУпр("ПоДокументу", Основание);
					ЗаполнитьВозвратнуюТаруПоОснованию(Основание);
				Иначе
					// Скопируем табличные части из документа основания.
					ЗаполнитьТоварыПоОснованию(Основание);
					СчетаРеглИзОснования = Истина;
					ЗаполнитьВозвратнуюТаруПоОснованию(Основание);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
			ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;

		// Тип выбираемого значения зависит от договора.
        Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			Если ДоговорКОнтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				Сделка = Основание; 
			Иначе
				Сделка = Основание.ЗаказПокупателя;
			КонецЕсли;
		Иначе 
			Сделка = Основание; 
		КонецЕсли;		

		Если Сделка.Проведен ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

			// Заполним табличные части по заказу поставщику.
			ЗаполнитьТоварыПоОснованию(Основание);
			ЗаполнитьВозвратнуюТаруПоОснованию(Основание);
        
		КонецЕсли;		

	КонецЕсли;

	ЗаполнитьДокументПоОснованиюУпр(Основание);

	Если (Товары.Количество() > 0) И (НЕ СчетаРеглИзОснования) Тогда
		ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете);
	КонецЕсли;

	Если ВозвратнаяТара.Количество() > 0 Тогда
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Реализация",
			Дата,
			Организация,
			Товары,         // ТабличнаяЧастьТовары
			ВозвратнаяТара,	// ТабличнаяЧастьВозвратнаяТара
			Неопределено,   // ТабличнаяЧастьУслуги
			Неопределено,   // ТабличнаяЧастьОборудование
			Неопределено, 	// ТабличнаяЧастьОбъектыСтроительства
			Неопределено    // ТабличнаяЧастьБланкиСтрогогоУчета
		);
		
	КонецЕсли;	
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);

	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, ПогрешностиОкругления, ?(ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование, "Оборудование", "Товары"));
	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");

	// Заполнить склад и ордер в табличных частях
	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, Товары,         Не мУказаниеСкладовВТЧ);
	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, ВозвратнаяТара, Не мУказаниеСкладовВТЧ);
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");

	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗначСделка = Сделка;
	Иначе
		ЗначСделка = Неопределено;
	КонецЕсли;

    УправлениеЗаказами.ЗаполнитьЗаказПокупателяВТЧ(ВидОперации,ЭтотОбъект, "ВозвратОтПокупателя");
	
	мУдалятьДвижения = НЕ ЭтоНовый();	
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоТаре;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,Истина, РежимПроведения);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);
	
	//Коновалова 28022013 +
	Если Не РольДоступна("ПолныеПрава") И НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ТОгда
		 Сообщить("Нельзя провести документ без отражения по бух. учету!
		          | Заполните галочку бух. учет.");
		Отказ = Истина;		  
	КонецЕсли;
	//Коновалова 28022013 -
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре);
	
	// Подготовим таблицу скидок для проведения.
	ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, СтруктураШапкиДокумента);
	
	ПроводитьПоВзаиморасчетам = (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) 
								ИЛИ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный);
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары", ТаблицаПоТоварам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура());
	
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,
		   ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, ТаблицаПоСкидкам, Отказ, Заголовок);
	КонецЕсли;
	   
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПокупателя");
мСтруктураПараметровВзаиморасчетов.Вставить("ЭтоВозврат", Истина);

УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();

мУказаниеСкладовВТЧ    = (УказаниеСкладов     = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления)
                         Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);

мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();						 
