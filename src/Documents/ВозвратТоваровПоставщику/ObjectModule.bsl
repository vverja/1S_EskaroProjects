Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем УчетнаяПолитикаРегл;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьВозвратаПоставщику()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	Грузополучатель,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил КАК ПредставительПокупателя,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
	|	ГДЕ
	|		ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		2 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику.Оборудование КАК ВозвратТоваровПоставщику
	|	ГДЕ
	|		ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры) КАК ВложенныйЗапросПоТоварам
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки						КАК НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))  КАК Товар,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура.Артикул            КАК Артикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,	
	|	Цена,
	|	Сумма
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.ВозвратнаяТара КАК ВозвратТоваровПоставщику
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Возврат поставщику (комиссия)';uk='Повернення постачальнику (комісія)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	                                   	 
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Возврат поставщику';uk='Повернення постачальнику'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = Ложь;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ЕстьСкидки Тогда
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
				Скидка = 0;
			Иначе
				Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
				//округлим скидку до двух знаков
				Скидка = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Скидка, 2);
			КонецЕсли;
			
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		Если ЕстьСкидки Тогда
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;
		КонецЕсли;
		
	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Тара");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		КонецЕсли;
		
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|СуммаТара");
		
		СуммаТара    = 0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Товар);			
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаТара);
		ТабДокумент.Присоединить(ОбластьСуммы);	
		
		// сделаем отступ 
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);										   
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначения.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
						
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
										   
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 


	// Вывести подписи
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Ответственный = ДолжностьФИОПредставителя;
	ОбластьМакета.Параметры.Получил = Шапка.ПредставительПокупателя;

	ТабДокумент.Вывести(ОбластьМакета);


	Возврат ТабДокумент;

КонецФункции // ПечатьВозвратаПоставщику()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная"  Тогда
		ТабДокумент = ПечатьВозвратаПоставщику();
	ИначеЕсли ИмяМакета = "ТранспУпаковки" Тогда

		Обр   = Обработки.ТранспортныеУпаковки.Создать();
		Форма = Обр.ПолучитьФорму(,ЭтотОбъект,);
		Если Форма.Открыта() Тогда
			Форма.Активизировать();
		Иначе
			Форма.Открыть();
			Форма.ПервоначальноеЗаполнение(Ссылка);
		КонецЕсли;

	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Накладная,ТранспУпаковки,СерийныеНомера","Возврат поставщику","Штрихкоды транспортных упаковок", "Список серийных номеров");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Возвращает текстовые участки запроса, выполняемого
// при заполнении на основании ТЧ Товары
Процедура ПолучитьУчасткиЗапросаДляЗаполненияТЧТоварыРегл(ПоляЗапросаРегл, ПоляПоступленияРегл)

	ПоляЗапросаРегл = "
	|	Док.СчетУчетаБУ 				КАК СчетУчетаБУ, 
	|	Док.НалоговоеНазначение 		КАК НалоговоеНазначение, ";

КонецПроцедуры

// Возвращает текстовые участки запроса, выполняемого
// при заполнении на основании ТЧ Товары
Процедура ПолучитьУчасткиЗапросаДляЗаполненияТЧОборудованиеРегл(ПоляЗапросаРегл, ПоляПоступленияРегл)

	ПоляЗапросаРегл = "
	|	Док.СчетУчетаБУ 				КАК СчетУчетаБУ,
	|	Док.НалоговоеНазначение 		КАК НалоговоеНазначение";

КонецПроцедуры

// Возвращает текстовые участки запроса, выполняемого
// при заполнении на основании ТЧ Товары
Процедура ПолучитьУчасткиЗапросаПоТоварамОрганизацийДляЗаполненияТЧТовары(ПолеОстаткиОрганизации, СоединениеТоваровОрганизаций, ТекстЗапросаСписокНоменклатуры, ЭтоБСУ=Ложь)

	ПолеОстаткиОрганизации = "
	|	ОстаткиОрганизации.КоличествоОстаток                 КАК КоличествоОстатокОрганизации,";
	
	СоединениеТоваровОрганизаций = "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Организация = &Организация) КАК ОстаткиОрганизации
	|ПО
	|	Док.Номенклатура               = ОстаткиОрганизации.Номенклатура 
	| " + ?(ЭтоБСУ, "", "И Док.ХарактеристикаНоменклатуры = ОстаткиОрганизации.ХарактеристикаНоменклатуры");
	
КонецПроцедуры

Процедура УчестьОстаткиТоваровОрганизацийПриЗаполненииТЧТовары(КоличествоПоДокументу, Выборка)
	
	КоличествоПоДокументу = Мин(Выборка.КоличествоПоДокументу, 
						   ?(Выборка.КоличествоОстатокОрганизации=NULL, 0, Выборка.КоличествоОстатокОрганизации));
						   
КонецПроцедуры

Процедура ЗаполнитьСтрокуТЧТоварыРегл(СтрокаТабличнойЧасти, Выборка)

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.СчетУчетаБУ  				= Выборка.СчетУчетаБУ;
	СтрокаТабличнойЧасти.НалоговоеНазначение 		= Выборка.НалоговоеНазначение;


КонецПроцедуры

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//	ЭтоБСУ			  - булево, признак дополнения бланками из ТЧ БланкиСтрогогоУчета с документа основания.
//
Процедура ЗаполнитьТоварыПоОснованиюУпр(ДокументОснование, СкладИзШапки = Истина, ЭтоБСУ = Ложь) Экспорт


	ОтражатьВРегламентированномУчете = Организация.ОтражатьВРегламентированномУчете;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Организация",        	Организация);
	Запрос.УстановитьПараметр("ДокументОснование",  	ДокументОснование);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", 	ДокументОснование.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПустойЗаказ",        	Неопределено);
	Запрос.УстановитьПараметр("ПустаяХарактериститика",  Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтатусПолучения",    	Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);

	ОснованиеПоступление = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	ОснованиеЗаказ       = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику"));
	ОснованиеЗаказПокупателя = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя"));
	ТоварКомитента       = (ДокументОснование.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;
	ТабличнаяЧастьИмя = ?( ЭтоБСУ, "БланкиСтрогогоУчета", ?(ОснованиеЗаказПокупателя, "Материалы", "Товары") );
	
	ОснованиеПоступлениеВПереработку = Ложь;
	Если ОснованиеПоступление И ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ОснованиеПоступлениеВПереработку = Истина;
		Запрос.УстановитьПараметр("Сделка",  ДокументОснование.Сделка);
		
	ИначеЕсли ОснованиеПоступление Тогда
	
		Если ДокументОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОснование.Сделка) Тогда
				Запрос.УстановитьПараметр("Сделка", ДокументОснование);
			Иначе
				Запрос.УстановитьПараметр("Сделка", ДокументОснование.Сделка);
			КонецЕсли;
		Иначе
			Запрос.УстановитьПараметр("Сделка",  Неопределено);
		КонецЕсли;
	Иначе
		Если ДокументОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			Запрос.УстановитьПараметр("Сделка",      ДокументОснование);
		Иначе
			Запрос.УстановитьПараметр("Сделка",      Неопределено);
		КонецЕсли;
	КонецЕсли;

	Если СкладИзШапки
	 ИЛИ ОснованиеЗаказ Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		КопияТоварыСклад = ДокументОснование.Товары.Выгрузить();
		КопияТоварыСклад.Свернуть("Склад",);
		МассивСклады = КопияТоварыСклад.ВыгрузитьКолонку("Склад");
	КонецЕсли;

	Запрос.УстановитьПараметр("МассивСклады", МассивСклады);	
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	// Вложенный запрос, ограничивающий список номенклатуры
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ." + ДокументОснованиеИмя + "." + ТабличнаяЧастьИмя + " 
	|ГДЕ Ссылка = &ДокументОснование";

	// Сформируем участки запроса
	ПоляЗапросаРегл        = "";
	ПоляПоступленияРегл    = "";
	ПолеОстаткиОрганизации = "";
	СоединениеТоваровОрганизаций = "";
	ПолучитьУчасткиЗапросаДляЗаполненияТЧТоварыРегл(ПоляЗапросаРегл, ПоляПоступленияРегл);
	
	Если ОтражатьВРегламентированномУчете Тогда
		ПолучитьУчасткиЗапросаПоТоварамОрганизацийДляЗаполненияТЧТовары(ПолеОстаткиОрганизации, СоединениеТоваровОрганизаций, ТекстЗапросаСписокНоменклатуры, ЭтоБСУ);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                                КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                                КАК КратностьДокумента,
	|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов   КАК ВалютаВзаиморасчетов,
	|	Док.Ссылка.КурсВзаиморасчетов                        КАК КурсВзаиморасчетов,
	|	Док.Ссылка.КратностьВзаиморасчетов                   КАК КратностьВзаиморасчетов,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Коэффициент,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,"
	+   ?(ОснованиеЗаказПокупателя, "Док.Номенклатура.СтавкаНДС КАК СтавкаНДС,",	"Док.СтавкаНДС,") + "
	|	ВЫРАЗИТЬ(Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Число(15,3))
	|														КАК КоличествоПоДокументу,"
	+	?(ОснованиеЗаказ ИЛИ ОснованиеЗаказПокупателя, "", ПоляЗапросаРегл) + "
	|	ЕстьNull(Остатки.КоличествоОстаток,0)+ЕстьNull(ОстаткиВРознице.КоличествоОстаток,0)  КАК КоличествоОстаток,
	|	ЕстьNull(Резервы.КоличествоОстаток,0)                КАК КоличествоРезервОстаток,
	|	ЕстьNull(РезервыПоДокументу.КоличествоОстаток,0)     КАК КоличествоРезервПоДокументуОстаток,"
	+	ПолеОстаткиОрганизации + "
	|	Док.Цена,";

	Если ОснованиеПоступление Тогда
		Запрос.Текст = Запрос.Текст + "
		|	" + ?(ЭтоБСУ, "&ПустаяСерияНоменклатуры КАК СерияНоменклатуры,", "Док.СерияНоменклатуры,") + "
		|	Док.Склад,"
		+	ПоляПоступленияРегл;
	КонецЕсли; 
	
	Если ТоварКомитента Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ОстаткиПолученных.КоличествоОстаток            КАК КоличествоОстатокПолученных,
		|	ОстаткиПолученных.СуммаВзаиморасчетовОстаток   КАК СуммаПолученныхПолученных,";
		
	КонецЕсли; 

	Запрос.Текст = Запрос.Текст + "
	|	" + ?(ЭтоБСУ, "&ПустаяХарактериститика КАК ХарактеристикаНоменклатуры,", "Док.ХарактеристикаНоменклатуры,");
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		Запрос.Текст = Запрос.Текст + "
		|	&ДокументОснование КАК ЗаказПокупателя";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	Док.Заказ КАК ЗаказПокупателя";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + "." + ТабличнаяЧастьИмя + " КАК Док";

	Если ТоварКомитента Тогда

		Запрос.Текст = Запрос.Текст + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыПолученные.Остатки(&ДатаОстатков,
		|	                                             ДоговорКонтрагента   = &ДоговорКонтрагента
		|											   И СтатусПолучения = &СтатусПолучения
		|											   И Сделка = &Сделка
		|	                                                     ) КАК ОстаткиПолученных
		|ПО
		|	Док.Номенклатура = ОстаткиПолученных.Номенклатура 
		|   " + ?(ЭтоБСУ, "", "И Док.ХарактеристикаНоменклатуры = ОстаткиПолученных.ХарактеристикаНоменклатуры") + "
		
		|";

	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК Остатки
	|ПО
	|	Док.Номенклатура               = Остатки.Номенклатура
	| " + ?(ЭтоБСУ, " ", "И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры ") +
	?(ОснованиеПоступление,"И Док.Склад = Остатки.Склад","")+"
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК ОстаткиВРознице
	|ПО
	|	Док.Номенклатура               = ОстаткиВРознице.Номенклатура
	| " + ?(ЭтоБСУ, " ", "И Док.ХарактеристикаНоменклатуры = ОстаткиВРознице.ХарактеристикаНоменклатуры ") +
	?(ОснованиеПоступление,"И Док.Склад = ОстаткиВРознице.Склад","")+"

	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК Резервы
	|ПО
	|	Док.Номенклатура               = Резервы.Номенклатура
	| " + ?(ЭтоБСУ, " ", "И Док.ХарактеристикаНоменклатуры = Резервы.ХарактеристикаНоменклатуры  ")
	+?(ОснованиеПоступление,"И Док.Склад = Резервы.Склад","")+"
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК РезервыПоДокументу
	|ПО
	|	Док.Номенклатура               = РезервыПоДокументу.Номенклатура
	| " + ?(ЭтоБСУ, " ", "И Док.ХарактеристикаНоменклатуры = РезервыПоДокументу.ХарактеристикаНоменклатуры ")
	+?(ОснованиеПоступление,"И Док.Склад = РезервыПоДокументу.Склад","")+"
	|";
	
	Если ОснованиеПоступлениеВПереработку Тогда
		Запрос.Текст = Запрос.Текст + "И &Сделка = РезервыПоДокументу.ДокументРезерва";
	ИначеЕсли ОснованиеЗаказПокупателя Тогда
		Запрос.Текст = Запрос.Текст + "И &ДокументОснование = РезервыПоДокументу.ДокументРезерва";
	Иначе
		Запрос.Текст = Запрос.Текст + "И Док.Заказ = РезервыПоДокументу.ДокументРезерва";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "	
	|"
	+ СоединениеТоваровОрганизаций + "
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование 
	|";

	РезультатЗапроса = Запрос.Выполнить();
	
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	ТабОстатки = РезультатЗапроса.Выгрузить();
	КолонкиСвертки = "Номенклатура,ХарактеристикаНоменклатуры,КоличествоОстаток,КоличествоРезервОстаток";
	Если ОснованиеПоступление Тогда
		КолонкиСвертки = "Номенклатура,ХарактеристикаНоменклатуры,Склад,КоличествоОстаток,КоличествоРезервОстаток";
	КонецЕсли;
	
	ТабОстатки.Свернуть(КолонкиСвертки);
	
	ДокументПоступления = Неопределено;
	Если ОтражатьВУправленческомУчете Тогда
		УчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(?(ЗначениеЗаполнено(Дата),Дата,ТекущаяДата()),истина);
		Если ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			Если УчетнаяПолитика.СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней Тогда
				ДокументПоступления = ДокументОснование;
			КонецЕсли;	
		Иначе	
			ДокументПоступления = ДокументОснование;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		УчетнаяПолитикаРегл   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(?(ЗначениеЗаполнено(Дата),Дата,ТекущаяДата()),Организация, истина);
		Если ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
			Если УчетнаяПолитикаРегл.СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней
			  И	ДокументПоступления = Неопределено Тогда
				ДокументПоступления = ДокументОснование;	  
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(Выборка.КоличествоОстаток) Тогда
			Продолжить; // товары, отстутствующие на складе, в документ не добавляем
		КонецЕсли;

		КоличествоПоДокументу = Выборка.КоличествоПоДокументу;
		
		Если ОтражатьВРегламентированномУчете Тогда
			УчестьОстаткиТоваровОрганизацийПриЗаполненииТЧТовары(КоличествоПоДокументу, Выборка);
		КонецЕсли;
		
		Если ТоварКомитента Тогда
			КоличествоПолученных = ?(Выборка.КоличествоОстатокПолученных = NULL, 0, Выборка.КоличествоОстатокПолученных);
			СуммаВзаиморасчетовПолученных = ?(Выборка.СуммаПолученныхПолученных = NULL, 0, Выборка.СуммаПолученныхПолученных);
		КонецЕсли;

		КоличествоРезервПоДокументуОстаток = ?(Выборка.КоличествоРезервПоДокументуОстаток=NULL, 0, Выборка.КоличествоРезервПоДокументуОстаток);
		КоличествоРезервОстаток = ?(Выборка.КоличествоРезервОстаток=NULL, 0, Выборка.КоличествоРезервОстаток);

		// Сначала (Сч = 1) спишем резервы по заказам, а затем если количество еще
		// не израсходовано, возмем его из свободного остатка (Сч = 2)		
		Для Сч = 1 По 2 Цикл

			Если Сч = 1 Тогда
				Если НЕ ЗначениеЗаполнено(Выборка.КоличествоОстаток) 
				 ИЛИ НЕ ЗначениеЗаполнено(Выборка.ЗаказПокупателя) Тогда
					Продолжить;
				Иначе
					СписКоличество = Мин(КоличествоПоДокументу, Мин(Выборка.КоличествоОстаток, КоличествоРезервПоДокументуОстаток));
				КонецЕсли;
			Иначе
				Если НЕ ЗначениеЗаполнено(Выборка.КоличествоОстаток) 
				 ИЛИ (Выборка.КоличествоОстаток - КоличествоРезервОстаток) = 0 Тогда
					Продолжить;
				Иначе
					СписКоличество = Мин(КоличествоПоДокументу, Выборка.КоличествоОстаток - КоличествоРезервОстаток);
				КонецЕсли;
			КонецЕсли;

			// Не дадим списать больше чем был общий остаток по номенклатуре
			СтруктПоиск = Новый Структура;
			СтруктПоиск.Вставить("Номенклатура",               Выборка.Номенклатура);
			СтруктПоиск.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
			Если ОснованиеПоступление Тогда
				СтруктПоиск.Вставить("Склад",               Выборка.Склад);
			КонецЕсли;
			
			СтрокиСОстатком = ТабОстатки.НайтиСтроки(СтруктПоиск);
			Если СтрокиСОстатком.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
					
			СписКоличество = Мин(СписКоличество, СтрокиСОстатком[0].КоличествоОстаток);
			Если Сч = 1 Тогда 
				СтрокиСОстатком[0].КоличествоРезервОстаток = Макс(СтрокиСОстатком[0].КоличествоРезервОстаток - СписКоличество,0);
			Иначе
				//проверка возможности списать из свободного остатка
				Если СтрокиСОстатком[0].КоличествоОстаток - СтрокиСОстатком[0].КоличествоРезервОстаток < СписКоличество Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
            СтрокиСОстатком[0].КоличествоОстаток = СтрокиСОстатком[0].КоличествоОстаток - СписКоличество;

			Если СтрокиСОстатком[0].КоличествоОстаток = 0 Тогда
				ТабОстатки.Удалить(СтрокиСОстатком[0]);
			КонецЕсли;
			
					
			Если ТоварКомитента Тогда
				СписКоличество = Мин(СписКоличество, КоличествоПолученных);
			КонецЕсли;

			Если СписКоличество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;

			// Дубли строк (например, совпадающая номенклатура и характиеристика, разные серии) 
			// в документе-основании не отслеживаем, считаем, что при необходимости пользователь 
			// сам должен выбрать нужную строку, а не нужную удалить.
			СтрокаТабличнойЧасти.Количество       = СписКоличество * Выборка.КоэффициентХраненияОстатков / Выборка.Коэффициент;   //пересчет в единицы документа
			КоличествоПоДокументу                 = КоличествоПоДокументу - СписКоличество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Выборка.ЕдиницаИзмеренияМест;
			СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;

			Если ТоварКомитента Тогда

				СтрокаТабличнойЧасти.Цена         = СуммаВзаиморасчетовПолученных / КоличествоПолученных / (Выборка.КоэффициентХраненияОстатков / Выборка.Коэффициент);

				// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
				Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаВзаиморасчетов, ВалютаДокумента, 
								  Выборка.КурсВзаиморасчетов, Курс,
								  Выборка.КратностьВзаиморасчетов, Кратность);

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                            Истина,
				                            Выборка.УчитыватьНДС,
				                            Выборка.СуммаВключаетНДС,
				                            Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе

				СтрокаТабличнойЧасти.Цена         = Выборка.Цена;

				// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
				Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, 
								  Выборка.КурсДокумента, Курс,
								  Выборка.КратностьДокумента, Кратность);

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
											Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
											УчитыватьНДС,
											СуммаВключаетНДС,
											Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			КонецЕсли;

			СтрокаТабличнойЧасти.Качество         = Справочники.Качество.Новый;

			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если ОснованиеПоступление Тогда
				СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
				СтрокаТабличнойЧасти.Склад             = Выборка.Склад;
			КонецЕсли;

			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

			Если Сч = 1 Тогда
				СтрокаТабличнойЧасти.Заказ     = Выборка.ЗаказПокупателя;
			Иначе
				СтрокаТабличнойЧасти.Заказ     = Неопределено;
			КонецЕсли;

			СтрокаТабличнойЧасти.ДокументПоступления = ДокументОснование;

			Если НЕ (ОснованиеЗаказ ИЛИ ОснованиеЗаказПокупателя) Тогда
				ЗаполнитьСтрокуТЧТоварыРегл(СтрокаТабличнойЧасти, Выборка);
			Иначе
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете);
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьОборудованиеПоОснованиюУпр(ДокументОснование, ТабЧасть = Неопределено) Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Склад",             Склад);
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ПустойЗаказ",       Неопределено);

	ОснованиеПоступление = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	ОснованиеЗаказ       = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику"));

	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;
	Если ТабЧасть = Неопределено Тогда
		ТабЧасть = Оборудование;
	КонецЕсли;
	
	Если ОснованиеЗаказ Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		КопияТоварыСклад = ДокументОснование.Оборудование.Выгрузить();
		КопияТоварыСклад.Свернуть("Склад",);
		МассивСклады = КопияТоварыСклад.ВыгрузитьКолонку("Склад");
	КонецЕсли;

	Запрос.УстановитьПараметр("МассивСклады", МассивСклады);	
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	// Вложенный запрос, ограничивающий список номенклатуры
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ." + ДокументОснованиеИмя + ".Оборудование 
	|ГДЕ Ссылка = &ДокументОснование";

	// Сформируем участки запроса
	ПоляЗапросаРегл        = "";
	ПоляПоступленияРегл    = "";
	ПолеОстаткиОрганизации = "";
	СоединениеТоваровОрганизаций = "";
	ПолучитьУчасткиЗапросаДляЗаполненияТЧОборудованиеРегл(ПоляЗапросаРегл, ПоляПоступленияРегл);
	ПолучитьУчасткиЗапросаПоТоварамОрганизацийДляЗаполненияТЧТовары(ПолеОстаткиОрганизации, СоединениеТоваровОрганизаций, ТекстЗапросаСписокНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                         КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                         КАК КратностьДокумента,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
	|	Док.СтавкаНДС,
	|	Док.Количество                                       КАК КоличествоПоДокументу,"
	+	?(ОснованиеЗаказ, "", ПоляЗапросаРегл) + "
	|	Естьnull(Остатки.КоличествоОстаток,0)+Естьnull(ОстаткиВРознице.КоличествоОстаток,0) КАК КоличествоОстаток,
	|	Резервы.КоличествоОстаток                            КАК КоличествоРезервОстаток,"
	+	ПолеОстаткиОрганизации + "
	|	Док.Цена,";

	Если ОснованиеПоступление Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Док.СерияНоменклатуры,
		|	Док.Склад,"
		+	ПоляПоступленияРегл;
	КонецЕсли; 

	Запрос.Текст = Запрос.Текст + "
	|	Док.ХарактеристикаНоменклатуры";
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".Оборудование КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК Остатки
	|ПО
	|	Док.Номенклатура               = Остатки.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК ОстаткиВРознице
	|ПО
	|	Док.Номенклатура               = ОстаткиВРознице.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = ОстаткиВРознице.ХарактеристикаНоменклатуры

	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК Резервы
	|ПО
	|	Док.Номенклатура               = Резервы.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = Резервы.ХарактеристикаНоменклатуры
	|
	|"
	+ СоединениеТоваровОрганизаций + "
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование 
	|";

	РезультатЗапроса = Запрос.Выполнить();
				 
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(Выборка.КоличествоОстаток) Тогда
			Продолжить; // товары, отстутствующие на складе, в документ не добавляем
		КонецЕсли;  

		КоличествоПоДокументу = Выборка.КоличествоПоДокументу;
		УчестьОстаткиТоваровОрганизацийПриЗаполненииТЧТовары(КоличествоПоДокументу, Выборка);
		
		КоличествоРезервОстаток = ?(Выборка.КоличествоРезервОстаток=NULL, 0, Выборка.КоличествоРезервОстаток);

		СписКоличество = Мин(КоличествоПоДокументу, Выборка.КоличествоОстаток - КоличествоРезервОстаток);
        Если СписКоличество<=0 Тогда Продолжить; КонецЕсли;
		СтрокаТабличнойЧасти = ТабЧасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;

		// Дубли строк (например, совпадающая номенклатура и характиеристика, разные серии) 
		// в документе-основании не отслеживаем, считаем, что при необходимости пользователь 
		// сам должен выбрать нужную строку, а не нужную удалить.
		СтрокаТабличнойЧасти.Количество       = СписКоличество;
		КоличествоПоДокументу                 = КоличествоПоДокументу - СписКоличество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;
		Если ОснованиеПоступление Тогда
			СтрокаТабличнойЧасти.Склад			  = Выборка.Склад;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Цена             = Выборка.Цена;

		// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
		Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, 
						  Выборка.КурсДокумента, Курс,
						  Выборка.КратностьДокумента, Кратность);

		СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
									Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
									Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
									УчитыватьНДС,
									СуммаВключаетНДС,
									Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если ОснованиеПоступление Тогда
			СтрокаТабличнойЧасти.СерияНоменклатуры   = Выборка.СерияНоменклатуры;
		КонецЕсли;
			
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		Если ТабЧасть = Товары Тогда
			СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
		КонецЕсли;

		СтрокаТабличнойЧасти.ДокументПоступления = ДокументОснование;

		Если НЕ ОснованиеЗаказ Тогда
			ЗаполнитьСтрокуТЧТоварыРегл(СтрокаТабличнойЧасти, Выборка);
		Иначе
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Оборудование", ОтражатьВБухгалтерскомУчете);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

Процедура ПолучитьУчасткиЗапросаДляЗаполненияТЧВозвратнаяТараРегл(ПоляЗапросаРегл)

	ПоляЗапросаРегл = "
	|	Док.СчетУчетаБУ                                      КАК СчетУчетаБУ,";

КонецПроцедуры

// Процедура выполняет заполнение возвратной тары по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованиюУпр(ДокументОснование, СкладИзШапки = Истина) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Если СкладИзШапки Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		КопияТоварыСклад = ДокументОснование.ВозвратнаяТара.Выгрузить();
		КопияТоварыСклад.Свернуть("Склад",);
		МассивСклады = КопияТоварыСклад.ВыгрузитьКолонку("Склад");
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивСклады", МассивСклады);
    Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("ДатаОстатков", 		ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;

	// Вложенный запрос, ограничивающий список номенклатуры
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ." + ДокументОснованиеИмя + ".ВозвратнаяТара 
	|ГДЕ Ссылка = &ДокументОснование";

	// Сформируем участки запроса
	ПоляЗапросаРегл = "";
	Если НЕ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
		ПолучитьУчасткиЗапросаДляЗаполненияТЧВозвратнаяТараРегл(ПоляЗапросаРегл);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КурсВзаиморасчетов
	|   ИНАЧЕ
	|		1
	|	КОНЕЦ                         КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КратностьВзаиморасчетов
	|   ИНАЧЕ
	|		1
	|   КОНЕЦ                         КАК КратностьДокумента,
	|	Док.Номенклатура,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент  КАК КоэффициентХраненияОстатков,"
	+ ?(СкладИзШапки, "&Склад", "Док.Склад")+"                          КАК Склад,
	|	ЕстьNull(Остатки.КоличествоОстаток,0)                 КАК КоличествоОстатокКомпании,
	|	Док.Количество                                        КАК КоличествоПоДокументу,
	|	Док.Цена,"
	+ ПоляЗапросаРегл + "
	|	Док.Заказ КАК ЗаказПокупателя,
	|	ЕстьNull(ОстаткиНаСкладах.КоличествоОстаток,0)+ЕстьNull(ОстаткиВРознице.КоличествоОстаток,0)  КАК КоличествоОстатокНаСкладах,
	|	ЕстьNull(Резервы.КоличествоОстаток,0)                 КАК КоличествоРезервОстаток,
    |	ЕстьNull(РезервыПоДокументу.КоличествоОстаток,0)      КАК КоличествоРезервПоДокументуОстаток

	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".ВозвратнаяТара КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПолученные.Остатки(&ДатаОстатков,  Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                                         И ДоговорКонтрагента = &ДоговорКонтрагента
	|                                                            И СтатусПолучения = &СтатусПолучения) КАК Остатки
	|ПО
	|	Док.Номенклатура = Остатки.Номенклатура 
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков,Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ")
	|	И Склад в (&МассивСклады) ) КАК ОстаткиНаСкладах
	|ПО
	|	Док.Номенклатура               = ОстаткиНаСкладах.Номенклатура "+
	?(не СкладИзШапки,"И Док.Склад = ОстаткиНаСкладах.Склад","")+"
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК ОстаткиВРознице
	|ПО
	|	Док.Номенклатура               = ОстаткиВРознице.Номенклатура "+
	?(не СкладИзШапки,"И Док.Склад = ОстаткиВРознице.Склад","")+"
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК Резервы
	|ПО
	|	Док.Номенклатура               = Резервы.Номенклатура "
	+?(не СкладИзШапки,"И Док.Склад = Резервы.Склад","")+"
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК РезервыПоДокументу
	|ПО
	|	Док.Номенклатура               = РезервыПоДокументу.Номенклатура "
	+?(не СкладИзШапки,"И Док.Склад = РезервыПоДокументу.Склад","")+"
	| И Док.Заказ = РезервыПоДокументу.ДокументРезерва
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование И
	|	Остатки.КоличествоОстаток > 0 
	|	И ЕстьNull(ОстаткиНаСкладах.КоличествоОстаток,0)+ЕстьNull(ОстаткиВРознице.КоличествоОстаток,0)>0
	|ИТОГИ Максимум(КоличествоОстатокКомпании), Максимум(КоличествоОстатокНаСкладах), Максимум(КоличествоРезервОстаток) ПО Склад, Док.Номенклатура";

	РезультатЗапроса = Запрос.Выполнить();
		
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	ВыборкаСклад = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСклад.Следующий() цикл
		ВыборкаНоменклатура = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			КоличествоОстатокКомпании = ВыборкаНоменклатура.КоличествоОстатокКомпании;
			КоличествоОстатокНаСкладах = ВыборкаНоменклатура.КоличествоОстатокНаСкладах;
			КоличествоРезервОстаток = ВыборкаНоменклатура.КоличествоРезервОстаток;
			Выборка = ВыборкаНоменклатура.Выбрать();
			Пока Выборка.Следующий() Цикл

				Если КоличествоОстатокКомпании=0 Тогда
					Продолжить; // товары, отстутствующие на складе, в документ не добавляем
				КонецЕсли;  

				РезервПоДокументу = Выборка.КоличествоРезервПоДокументуОстаток;
				ДоступноКСписанию = Мин(КоличествоОстатокКомпании, Выборка.КоличествоПоДокументу, Макс(КоличествоОстатокНаСкладах - (КоличествоРезервОстаток-РезервПоДокументу), 0));
				Если  ДоступноКСписанию<=0 Тогда Продолжить; КонецЕсли;
				//количество из резерва
				Если РезервПоДокументу > 0 Тогда
					РезервПоДокументу = мин(РезервПоДокументу, ДоступноКСписанию);
					СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();
					
					СтрокаВозвратнойТары.Номенклатура = Выборка.Номенклатура;
					СтрокаВозвратнойТары.Количество   = РезервПоДокументу;
					СтрокаВозвратнойТары.Цена         = Выборка.Цена;
					
					СтрокаВозвратнойТары.Заказ = Выборка.ЗаказПокупателя;
					
					// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
					СтрокаВозвратнойТары.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВозвратнойТары.Цена, 
					Выборка.ВалютаДокумента, ВалютаДокумента,
					Выборка.КурсДокумента, Курс,
					Выборка.КратностьДокумента, Кратность);
					
					ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
					
					Если СкладИзШапки Тогда
						СтрокаВозвратнойТары.Склад = Склад;
					Иначе
						СтрокаВозвратнойТары.Склад = ?(НЕ ЗначениеЗаполнено(Выборка.Склад), Склад, Выборка.Склад);
					КонецЕсли;
					ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаВозвратнойТары, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);
					
					Если НЕ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
						Если ЗначениеЗаполнено(Выборка.СчетУчетаБУ) Тогда
							СтрокаВозвратнойТары.СчетУчетаБУ = Выборка.СчетУчетаБУ;
						КонецЕсли;
					КонецЕсли;
					КоличествоОстатокКомпании = КоличествоОстатокКомпании - РезервПоДокументу;
					КоличествоОстатокНаСкладах = КоличествоОстатокНаСкладах - РезервПоДокументу;
		            ДоступноКСписанию = ДоступноКСписанию - РезервПоДокументу;
					КоличествоРезервОстаток = Макс(КоличествоРезервОстаток - РезервПоДокументу,0);
					Если ДоступноКСписанию = 0 ИЛИ КоличествоОстатокКомпании<=0 или КоличествоОстатокНаСкладах<=0 Тогда 
						Продолжить; 
					КонецЕсли;
				КонецЕсли;
				//количество из свободного остатка
				СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

				СтрокаВозвратнойТары.Номенклатура = Выборка.Номенклатура;
				СтрокаВозвратнойТары.Количество   = ДоступноКСписанию;
				СтрокаВозвратнойТары.Цена         = Выборка.Цена;
				// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
				СтрокаВозвратнойТары.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВозвратнойТары.Цена, 
								  Выборка.ВалютаДокумента, ВалютаДокумента,
								  Выборка.КурсДокумента, Курс,
								  Выборка.КратностьДокумента, Кратность);

				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);

				Если СкладИзШапки Тогда
					СтрокаВозвратнойТары.Склад = Склад;
				Иначе
					СтрокаВозвратнойТары.Склад = ?(НЕ ЗначениеЗаполнено(Выборка.Склад), Склад, Выборка.Склад);
				КонецЕсли;
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаВозвратнойТары, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете);
				
				Если НЕ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
					Если ЗначениеЗаполнено(Выборка.СчетУчетаБУ) Тогда
						СтрокаВозвратнойТары.СчетУчетаБУ = Выборка.СчетУчетаБУ;
					КонецЕсли;
				КонецЕсли;
				КоличествоОстатокКомпании = КоличествоОстатокКомпании - ДоступноКСписанию;
				КоличествоОстатокНаСкладах = КоличествоОстатокНаСкладах - ДоступноКСписанию;
                Если КоличествоОстатокКомпании<=0 или КоличествоОстатокНаСкладах<=0 Тогда 
					Прервать; 
				КонецЕсли;
			КонецЦикла;  //Пока Выборка.Следующий() Цикл
		КонецЦикла;  //Пока ВыборкаНоменклатура.Следующий() Цикл
	КонецЦикла; //Пока ВыборкаСклад.Следующий() цикл


КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОснованию()

Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетов);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",		СчетаУчета.СчетАвансов);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТаре",			СчетаУчета.СчетУчетаТары);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТареПоАвансам",СчетаУчета.СчетАвансовПоТаре);
		
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетовПриБартере);
			СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",		СчетаУчета.СчетАвансовПриБартере);
		КонецЕсли;	
		
		СтруктураСчетов.Вставить("СчетУчетаНДС",		СчетаУчета.СчетУчетаНДСПриобретений);
		
		СтруктураСчетов.Вставить("СчетУчетаНДСПодтвержденный",		СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный);
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;
	
КонецФункции

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);
	

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Заполним вид операции.
		ВидыОперацийВозвратТоваровПоставщику       = Перечисления.ВидыОперацийВозвратТоваровПоставщику;
		ВидыОперацийЗаказПоставщику                = Перечисления.ВидыОперацийЗаказПоставщику;
		ВидОперации = ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
        Если Основание.ВидОперации = ВидыОперацийЗаказПоставщику.Оборудование Тогда
			ВидОперации = ВидыОперацийВозвратТоваровПоставщику.Оборудование;
		КонецЕсли;

		Сделка = Основание; // заполняем сделку заказом поставщику

		Если Сделка.Проведен Тогда
			// Заполним табличные части по заказу поставщику.
			ЗаполнитьТоварыПоОснованиюУпр(Сделка);
			ЗаполнитьВозвратнуюТаруПоОснованиюУпр(Сделка);
			ЗаполнитьОборудованиеПоОснованиюУпр(Сделка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполненияУпр()

// Дополняет новую строку реквизитами регламентированного учета из исходной строки
//
// Параметры:
// НоваяСтрока    - строка, которую необходимо дополнить
// ИсходнаяСтрока - строка, из которой берутся исходные данные
//
Процедура ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока)

	НоваяСтрока.СчетУчетаБУ         = ИсходнаяСтрока.СчетУчетаБУ;
	НоваяСтрока.НалоговоеНазначение = ИсходнаяСтрока.НалоговоеНазначение;

КонецПроцедуры // ДополнитьСтрокуРегл

// Заолняет табличную часть по сериям номенклатуры при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 
	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	
	// Заполним реквизит склад в табличных частях "Товары" и "Возвратная тара"
	СкладИзШапки    =  (Не мУказаниеСкладовВТЧ) И (ЗначениеЗаполнено(Склад));
		             
	СкладОстатков = ?(СкладИзШапки, Склад, Товары.ВыгрузитьКолонку("Склад"));
	
	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(СкладОстатков, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям);
	ТоварыТабличнойЧасти=Товары.Выгрузить();
	Товары.Очистить();

	ТаблицаСерий.Сортировать("Номенклатура, СрокГодности, СерияНоменклатурыПредставление");
	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании");

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		
		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		СтуктураПоиска.Вставить("Склад",                      ИсходнаяСтрока.Склад);
		
		флЗаполнятьИзРезервов = ложь;
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда //происходит всегда за счет резервов
			ТекЗаказ = Сделка
		Иначе
			ТекЗаказ = ИсходнаяСтрока.Заказ;
		КонецЕсли;
		Если ТипЗнч(ТекЗаказ)=Тип("ДокументСсылка.ЗаказПокупателя") И ИспользоватьУказаниеСерийНоменклатурыПриРезервировании Тогда
			Если ТекЗаказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтуктураПоиска.Вставить("ДокументРезерва",    ТекЗаказ);
				флЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;

		Если флЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КонецЕсли;

		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией = Неопределено;
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = Строка.СерияНоменклатуры;
			НоваяСтрока.СтавкаНДС                  = ИсходнаяСтрока.СтавкаНДС;
			НоваяСтрока.ДокументПоступления        = ИсходнаяСтрока.ДокументПоступления;
			НоваяСтрока.Заказ			           = ИсходнаяСтрока.Заказ;
			НоваяСтрока.Качество                   = ИсходнаяСтрока.Качество;
			НоваяСтрока.Склад                      = ИсходнаяСтрока.Склад;
			НоваяСтрока.Количество                 = СписанноеКоличество; 

			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, СписанноеКоличество);

			ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока);
			
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество;
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры          = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.СтавкаНДС                  = ИсходнаяСтрока.СтавкаНДС;
				НоваяСтрока.ДокументПоступления        = ИсходнаяСтрока.ДокументПоступления;
				НоваяСтрока.Заказ			           = ИсходнаяСтрока.Заказ;
				НоваяСтрока.Качество                   = ИсходнаяСтрока.Качество;
				НоваяСтрока.Склад                      = ИсходнаяСтрока.Склад;
				НоваяСтрока.Количество                 = КоличествоОсталосьПогасить;
				
				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, НоваяСтрока, КоличествоОсталосьПогасить);

				ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоСериям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента) 

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();

	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия 
		//Смартис Лиманчук начало 19.12.2012
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссияНал
		//Смартис Лиманчук окончание 19.12.2012
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование  Тогда

	 	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
		Иначе
			Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		
		Статус = Перечисления.СтатусыПартийТоваров.ВПереработку; 
		
	Иначе    

		Сообщить("По виду операции """ +
		ВидОперации + """ не удалось определить статус партии товаров!", СтатусСообщения.Важное); 
		
	КонецЕсли; 

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПриходаУпр()

// Процедура формирует таблицы документа, вляиющие на состояние расчетов с контрагентами.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаОборудование) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;

	СтруктураПолей.Удалить ("Количество");
	СтруктураПолей.Вставить("КоличествоДок"      , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"              , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"           , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ЗаказПокупателя"    , "Заказ");
	СтруктураПолей.Вставить("Качество"           , "Качество");
	СтруктураПолей.Вставить("Склад"              , "Склад");
	СтруктураПолей.Вставить("Цена"               , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ВидСклада"          , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ДокументЗакупки"    , "ДокументПоступления");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя", "Заказ.ВидОперации");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
						  "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	

	ДополнитьСтруктуруПолейТоварыРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
    	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Оборудование".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();
	СтруктураПростыхПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;

	СтруктураПолей.Удалить ("Количество");
	СтруктураПолей.Вставить("КоличествоДок"      , "Количество"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураПолей.Вставить("Склад"              , "Склад");
	СтруктураПолей.Вставить("Цена"               , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ВидСклада"          , "Склад.ВидСклада");
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"              , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"           , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ДокументЗакупки"    , "ДокументПоступления");

	ДополнитьСтруктуруПолейОборудованиеРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
    	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;	
	
	РезультатЗапросаОборудование = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТара();
	СтруктураПолей.Удалить ("Количество");
	СтруктураПолей.Вставить("КоличествоДок"      , "Количество"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураПолей.Вставить("ЗаказПокупателя"    , "Заказ");
	СтруктураПолей.Вставить("Склад"              , "Склад");
	СтруктураПолей.Вставить("ВидСклада"          , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя", "Заказ.ВидОперации");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
						  "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");

	ДополнитьСтруктуруПолейВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей);

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей);

	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;
	
	// Подготовим таблицу товаров и тары для проведения.
	ТаблицаПоТоварам    = ПодготовитьТаблицуТоваров		( РезультатЗапросаПоТоварам,    СтруктураШапкиДокумента, ПогрешностиОкругления);
	ТаблицаОборудование = ПодготовитьТаблицуОборудования( РезультатЗапросаОборудование, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ТаблицаПоТаре       = ПодготовитьТаблицуТары		( РезультатЗапросаПоТаре,       СтруктураШапкиДокумента, ПогрешностиОкругленияТара);
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаОборудование);
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьПризнакАмортизируетсяПриПоступлении(
			ТаблицаПоТоварам, // ТаблицаПоТоварам
			ТаблицаПоТаре, , // ТаблицаПоТаре
			ТаблицаОборудование, , ,// ТаблицаПоОборудованию
			"СчетЗатрат" // ИмяРеквизитаСчетЗатрат 
		);
	КонецЕсли; 

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// При выгрузке таблицы из документа количество имеет неотрицательный тип значения,
	// нам необходимы отрицательные числа
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Стоимость");

	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");

	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		Если ТипЗнч(СтрокаТаблицы.КоличествоДок)= Тип("Число") Тогда
			СтрокаТаблицы.Количество  = - СтрокаТаблицы.КоличествоДок;
		Иначе
			СтрокаТаблицы.Количество = 0;
			СтрокаТаблицы.КоличествоДок = 0;
		КонецЕсли;

		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			СтрокаТаблицы.ЗаказПокупателя = Сделка;
		КонецЕсли;

	КонецЦикла;
	
	// важен порядок: сначала Регл, потом Упр
	// (использование колонки Стоимость как врем. переменной)
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		                 ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;

	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СуммаВзаиморасчетов = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, 
		                                 КратностьВзаиморасчетов);
										 

		СтрокаТаблицы.НДСУпр = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.Стоимость = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

									 КонецЦикла;
		
КонецПроцедуры

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)
	ТаблицаТоваров.Колонки.Добавить("ДляОблагаемыхНДСомОпераций");
	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		Если     СтрокаТоваров.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 
			 Или СтрокаТоваров.СтавкаНДС = Перечисления.СтавкиНДС.НДС0  Тогда
			СтрокаТоваров.ДляОблагаемыхНДСомОпераций = Истина;
		Иначе
			СтрокаТоваров.ДляОблагаемыхНДСомОпераций = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//Счета учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаТоваров, СтруктураШапкиДокумента);
		
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(
					ТаблицаТоваров, 
					СтруктураШапкиДокумента, 
					ПогрешностиОкругления, 
					Истина,     // ЭтоПриобретение
					Ложь,       // ЭтоУслуги
					"Сумма" // ИмяКолонкиСумма
				  );

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// При выгрузке таблицы из документа количество имеет неотрицательный тип значения,
	// нам необходимы отрицательные числа
	ТаблицаТары.Колонки.Добавить("Количество");
	ТаблицаТары.Колонки.Добавить("Стоимость");

	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.Количество  =  СтрокаТаблицы.КоличествоДок;
		СтрокаТаблицы.Стоимость   =  СтрокаТаблицы.Сумма;

	КонецЦикла;

	ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	ТаблицаТары.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТары, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТары.ВыгрузитьКолонку("Склад"),
	                     ТаблицаТары.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТары, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;

	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов");
	ДанныеДоговора = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, Дата);

	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаВзаиморасчетов =  МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
		                                 КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета. По таре считаем, что СуммаБезНДС = Сумма
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары.Колонки.Добавить("ДляОблагаемыхНДСомОпераций");
	
	ТаблицаТары.ЗаполнитьЗначения(Ложь                        , "ДляОблагаемыхНДСомОпераций");
	ТаблицаТары.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС, "СтавкаНДС");
	ТаблицаТары.ЗаполнитьЗначения(0                           , "НДС");
	
	//Счета учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("ВозвратнаяТара", ТаблицаТары, СтруктураШапкиДокумента);	
	
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(
					ТаблицаТары, 
					СтруктураШапкиДокумента, 
					ПогрешностиОкругления, 
					Истина,     // ЭтоПриобретение
					Ложь,       // ЭтоУслуги
					"Стоимость" // ИмяКолонкиСумма
				  );


КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

// Заполнение структуры обязательных полей регламентированными реквизитами
//
Процедура ДополнитьСтруктуруОбязательныхПолейРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом 
		   И ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
        
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
			
			Если СтруктураШапкиДокумента.ЕстьНДС
			   И СтруктураШапкиДокумента.УчитыватьНДС Тогда
				СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом И СтруктураШапкиДокумента.УчитыватьНДС И Дата >= '20110101' Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПодтвержденный");
		КонецЕсли;		
		
		Если ВозвратнаяТара.Количество()>0 Тогда
			
	        СтруктураОбязательныхПолей.Вставить("СчетУчетаЗатрат");
			СтруктураОбязательныхПолей.Вставить("СчетУчетаДоходов");
			
		КонецЕсли;
		
				 
		Если ВозвратнаяТара.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения упр. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с НТТ!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");

	Если  Не СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		        "По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		        |Заполните поле ""Заказ поставщику""!");
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		СтруктураОбязательныхПолей.Вставить( "Сделка", 
			"Возврат из переработку ведется только по заказам. Заполните поле ""Заказ покупателя""!");
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		И СтруктураШапкиДокумента.ЕстьНДС
		И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		
		Если  Дата < '20110101'
			И СтруктураШапкиДокумента.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомитентом_НК Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("В договоре комиссии указана неправильная схема налогового учета! Используйте схему для периода до 2010 года!",Отказ,Заголовок);
			
		ИначеЕсли Дата >= '20110101'
			  И НЕ СтруктураШапкиДокумента.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомитентом_НК Тогда
			 
			 ОбщегоНазначения.СообщитьОбОшибке("В договоре комиссии указана неправильная схема налогового учета! Используйте схему для периода с 2011 года!",Отказ,Заголовок);
			 
		КонецЕсли;
	
	КонецЕсли;	
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТовары();

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	СтруктураОбязательныхПолей.Вставить("Качество");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь склада НТТ быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");
		
	// Здесь склада НТТ быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
		
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаПоТоварам, 
					ИмяТабличнойЧасти,
					Отказ, 
					Заголовок, 
					"Поступление", // ВидОперации
					Ложь           // ЭтоЗатраты 
	);	


КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Оборудование".
//
// Параметры:
// Параметры: 
//  ТаблицаОборудование     - таблица значений, содержащая данные для проведения и проверки ТЧ Оборудование
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОборудование(ТаблицаОборудование, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)
    ИмяТабличнойЧасти = "Оборудование";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТовары();
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Оборудование", ТаблицаОборудование, Отказ, Заголовок);
	
	// Проверить что вид салада Оптовый
	ПроверитьЧтоСкладОптовый(ТаблицаОборудование, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Оборудование", ТаблицаОборудование, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Оборудование", ТаблицаОборудование, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Оборудование", ТаблицаОборудование, Отказ, Заголовок);
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаОборудование, 
					ИмяТабличнойЧасти,
					Отказ, 
					Заголовок, 
					"Поступление", // ВидОперации
					Ложь           // ЭтоЗатраты 
	);	

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОборудование()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТара();

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	// Теперь позовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);	

	// Здесь склада НТТ быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок, "ВидСклада");
	
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаПоТаре, 
					ИмяТабличнойЧасти,
					Отказ, 
					Заголовок, 
					"Поступление", // ВидОперации
					Ложь           // ЭтоЗатраты 
	);	

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Функция удаляет из исходой таблицы строки по которым не надо делать резерв товаров под заказ покупателя.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиБезРезерваПодЗаказПокупателя(ТабТовары)

	// Если в ТЧ есть ссылки на заказы, то надо списать резерв
	ТаблицаПоТоварамИзРезерва = ТабТовары.Скопировать();
	ТаблицаПоТоварамИзРезерва.Колонки.Добавить("ДокументРезерва");
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамИзРезерва.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамИзРезерва.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			 ТаблицаПоТоварамИзРезерва.Удалить(СтрокаТаблицы);
		Иначе 
			СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.ЗаказПокупателя;
			//для ТЧ Возвратная тара в таблице хранятся положительные количества, для них не требуется изменять знак
			СтрокаТаблицы.Количество = ?(СтрокаТаблицы.Количество>0,СтрокаТаблицы.Количество,-СтрокаТаблицы.Количество);
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамИзРезерва;
	
КонецФункции // УдалитьСтрокиБезРезерваПодЗаказПокупателя()

// Проводит табличные части "Товары" и "Возвратная тара" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, Отказ, Заголовок)

	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда

		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если Оборудование.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Оборудование",   СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		Если НЕ глЗначениеПеременной("ИспользоватьРегистрСвободныеОстатки") Тогда
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
		КонецЕсли;

		Если НЕ Отказ Тогда
		
			ОтборСкладОптовый   = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
			ОтборСкладРозничный = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
					
			ТаблицаТоварыОпт  = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам, ОтборСкладОптовый  ).Выгрузить();
			ТаблицаТоварыРозн = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам, ОтборСкладРозничный).Выгрузить();
			
			СтруктТаблицДокументаОпт = Новый Структура;
			СтруктТаблицДокументаОпт.Вставить("ТаблицаПоТоварам",    ТаблицаТоварыОпт);
			СтруктТаблицДокументаОпт.Вставить("ТаблицаОборудование", ТаблицаОборудование);
					
			СтруктТаблицДокументаРозн = Новый Структура;
			СтруктТаблицДокументаРозн.Вставить("ТаблицаПоТоварам", ТаблицаТоварыРозн);
			
			ТаблицыДанныхДокументаОпт  = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокументаОпт);
			ТаблицыДанныхДокументаРозн = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице,  СтруктТаблицДокументаРозн);
				
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаОпт, "Качество", Справочники.Качество.Новый, "ТаблицаОборудование");
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаОпт,  Дата);
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице,  ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаРозн, Дата);
			
			// Движения расход по ТАРЕ
			ТаблицаТараОпт    = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре, ОтборСкладОптовый  ).Выгрузить();
			ТаблицаТараРозн   = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре, ОтборСкладРозничный).Выгрузить();
			
			СтруктТаблицДокументаОпт  = Новый Структура;
			СтруктТаблицДокументаРозн = Новый Структура;
			
			СтруктТаблицДокументаОпт .Вставить("ТаблицаПоТаре", ТаблицаТараОпт);
			СтруктТаблицДокументаРозн.Вставить("ТаблицаПоТаре", ТаблицаТараРозн);
			
			ТаблицыДанныхДокументаОпт  = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокументаОпт);
			ТаблицыДанныхДокументаРозн = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице,  СтруктТаблицДокументаРозн);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаОпт,  "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаРозн, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаОпт,  Дата);
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице,  ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаРозн, Дата);
			
		КонецЕсли;
		
	Иначе

		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если Оборудование.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("Оборудование", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		// ТОВАРЫ, ТАРА И ОБОРУДОВАНИЕ ПО РЕГИСТРУ ТоварыКПередачеСоСкладов.
		Если НЕ Отказ Тогда
		
			ТаблицаПоТоварамПлюс = ТаблицаПоТоварам.Скопировать();
			ТаблицаПоТоварамПлюс.Колонки.Удалить(ТаблицаПоТоварамПлюс.Колонки.Количество);
			ТаблицаПоТоварамПлюс.Колонки.КоличествоДок.Имя = "Количество";
		
			ТаблицаОборудованиеПлюс = ТаблицаОборудование.Скопировать();
			ТаблицаОборудованиеПлюс.Колонки.Удалить(ТаблицаОборудованиеПлюс.Колонки.Количество);
			ТаблицаОборудованиеПлюс.Колонки.КоличествоДок.Имя = "Количество";
		
			ТаблицаПоТареПлюс = ТаблицаПоТаре.Скопировать();
			ТаблицаПоТареПлюс.Колонки.Удалить(ТаблицаПоТареПлюс.Колонки.Количество);
			ТаблицаПоТареПлюс.Колонки.КоличествоДок.Имя = "Количество";
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",    ТаблицаПоТоварамПлюс);
			СтруктТаблицДокумента.Вставить("ТаблицаОборудование", ТаблицаОборудованиеПлюс);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",       ТаблицаПоТареПлюс);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",            Склад,                                            "ТаблицаОборудование");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаОборудование, ТаблицаПоТаре");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Оборудование,   "ТаблицаОборудование");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;

	// ТОВАРЫ И ОБОРУДОВАНИЕ ПО РЕГИСТРУ Закупки.
	Если НЕ Отказ
	   И НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
	Тогда
		
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КопияТаблицыТоваров.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
		
		КопияТаблицыОборудование = ТаблицаОборудование.Скопировать();
		КопияТаблицыОборудование.ЗагрузитьКолонку(КопияТаблицыОборудование.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");

		КопияТаблицыТоваров.Колонки.НДС   .Имя = "_НДС";
		КопияТаблицыТоваров.Колонки.НДСУпр.Имя = "НДС";
		
		КопияТаблицыОборудование.Колонки.НДС   .Имя = "_НДС";
		КопияТаблицыОборудование.Колонки.НДСУпр.Имя = "НДС";
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",    КопияТаблицыТоваров);
		СтруктТаблицДокумента.Вставить("ТаблицаОборудование", КопияТаблицыОборудование);
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			// В этом случае таблицы документа обрабатываются особым образом
			ТаблицаДвижений = Движения.Закупки.Выгрузить();
			ТаблицаДвижений.Очистить();
			ТаблицаДвиженийТовары       = ТаблицаДвижений.Скопировать();
			ТаблицаДвиженийОборудование = ТаблицаДвижений.Скопировать();
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыТоваров,      ТаблицаДвиженийТовары,       Проект, Дата, "Закупки");
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыОборудование, ТаблицаДвиженийОборудование, Проект, Дата, "Закупки");
			
			// Вставляем уже подготовленные таблицы движений
			ТаблицыДанныхДокумента = Новый Структура;
			ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам",      ТаблицаДвиженийТовары);
			ТаблицыДанныхДокумента.Вставить("ТаблицаОборудование", ТаблицаДвиженийОборудование);
			
		Иначе
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.Закупки, СтруктТаблицДокумента);
			
		КонецЕсли;
	
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение);
			
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), "ТаблицаПоТоварам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Оборудование,            "ТаблицаОборудование");
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
		 ИЛИ (СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		   И  СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом) Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", СтруктураШапкиДокумента.Сделка);
		КонецЕсли;
			
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Закупки, Неопределено, ТаблицыДанныхДокумента, Дата);
			
	КонецЕсли;
			
КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартий()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование,
							ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);

	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, 
							Отказ, Заголовок);
							
	ДвиженияПоТоварамОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, 
							Отказ, Заголовок);
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, 
							ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, 
							ТаблицаПоВзаиморасчетам, Отказ, Заголовок);
							
	ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, Отказ);
							
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, 
							Отказ, Заголовок);
	
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
	                                             Отказ, Заголовок, СтруктураШапкиДокумента);

												 
	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);											 
	
	// Проводки формируются и в модуле документа, и при списании партий
	ИспользуетсяРасширеннаяАналитикаУчетаЗатрат = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И 
		(глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух ИЛИ ИспользуетсяРасширеннаяАналитикаУчетаЗатрат) Тогда
		Движения.Хозрасчетный.Записать(Ложь);
	КонецЕсли;
	//Смартис Лиманчук начало 18.12.2012
	//УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
	Останавливаться = Истина; ПроведениеОстановлено = Ложь;
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить(),,,,Останавливаться,ПроведениеОстановлено);
	Если ПроведениеОстановлено Тогда
		Отказ = Истина;
	КонецЕсли;
	//Смартис Лиманчук окончание 18.12.2012
	
	//Коновалова 13022013 +
	Если (СтруктураШапкиДокумента.ОтражатьВУправленческомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладах")) ИЛИ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и НетДвиженийПоПартиям("ПартииТоваровНаСкладахБухгалтерскийУчет")) Тогда
		 Отказ = Истина;
		 Возврат;
	КонецЕсли;
	//Коновалова 13022013 -
	
КонецПроцедуры // ДвиженияПоРегистрам()

//Коновалова 19022013 +
Функция НетДвиженийПоПартиям(_Регистр)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПартииТоваровНаСкладах.Регистратор
	                      |ИЗ
	                      |	РегистрНакопления."+_Регистр+" КАК ПартииТоваровНаСкладах
	                      |ГДЕ
	                      |	ПартииТоваровНаСкладах.Регистратор = &Регистратор");
						        
	Запрос.УстановитьПараметр("Регистратор",Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
//Коновалова 19022013 -

Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
			
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;
		
		// Проверка остатков при оперативном проведении.
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",       СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Оборудование", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

		Если НЕ Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",    ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаОборудование", ТаблицаОборудование);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено, "ТаблицаПоТоварам");
			КонецЕсли;
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаОборудование");		
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
			
	Иначе // По ордеру
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеОрганизаций.
		НаборДвижений = Движения.ТоварыКПередачеОрганизаций;

		// Проверка остатков при оперативном проведении.
		НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары",       СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Оборудование", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если НЕ Отказ Тогда
			
			ТаблицаПоТоварамПлюс = ТаблицаПоТоварам.Скопировать();
			ТаблицаПоТоварамПлюс.Колонки.Удалить(ТаблицаПоТоварамПлюс.Колонки.Количество);
			ТаблицаПоТоварамПлюс.Колонки.КоличествоДок.Имя = "Количество";
			
			ТаблицаОборудованиеПлюс = ТаблицаОборудование.Скопировать();
			ТаблицаОборудованиеПлюс.Колонки.Удалить(ТаблицаОборудованиеПлюс.Колонки.Количество);
			ТаблицаОборудованиеПлюс.Колонки.КоличествоДок.Имя = "Количество";
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",    ТаблицаПоТоварамПлюс);
			СтруктТаблицДокумента.Вставить("ТаблицаОборудование", ТаблицаОборудованиеПлюс);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",      Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый, "ТаблицаОборудование");
			
			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
			КонецЕсли;
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоТоварамОрганизацийРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИспользоватьРегистрТоварыОрганизацийРегл(СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	ЭтоКомиссия = (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	//Смартис Лиманчук начало 19.12.2012
	ЭтоКомиссия = ЭтоКомиссия ИЛИ (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссияНал И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	//Смартис Лиманчук окончание 19.12.2012

	ВестиПартионныйУчетПоСкладамРегл = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл;
	
	// ТОВАРЫ, ОБОРУДОВАНИЕ И ТАРА ПО РЕГИСТРУ ТоварыОрганизацийРегл.
	НаборДвижений = Движения.ТоварыОрганизацийРегл;
	
	Если НЕ Отказ Тогда
		
		ТаблицаПоТареМинус = ТаблицаПоТаре.Скопировать();
		Для каждого СтрокаТара Из ТаблицаПоТареМинус Цикл
			СтрокаТара.Количество = -СтрокаТара.Количество;
		КонецЦикла; 
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",    ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаОборудование", ТаблицаОборудование);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",       ТаблицаПоТареМинус);
			
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		Если Не ВестиПартионныйУчетПоСкладамРегл Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
		КонецЕсли;
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаОборудование");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
		
		Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ ЭтоКомиссия Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "НалоговоеНазначение", Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка());
		КонецЕсли; 
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
			
	
КонецПроцедуры

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ мСтруктураПараметровВзаиморасчетов.ПроводитьПоВзаиморасчетам Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Расход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре,
									ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		                                 мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		                                 ВидДвиженияНакопления.Расход, Отказ, Заголовок);

		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
			Если ТипЗНЧ(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		   
			    // Движения по заказам поставщикам.
				НаборДвижений = Движения.ЗаказыПоставщикам;
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаОборудование", ТаблицаОборудование);
					
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				Статус = Перечисления.СтатусыПартийТоваров.Купленный; 

				Если СтруктураШапкиДокумента.Сделка.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
					Статус = Перечисления.СтатусыПартийТоваров.ВПереработку; 
				КонецЕсли;
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику",    СтруктураШапкиДокумента.Сделка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",Статус, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",Перечисления.СтатусыПартийТоваров.Оборудование, "ТаблицаОборудование");

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			ИначеЕсли ТипЗНЧ(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				
				// Движения по заказам ставщикам.
				НаборДвижений = Движения.ЗаказыПоставщикам;
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
					
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику",    СтруктураШапкиДокумента.Сделка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",Перечисления.СтатусыПартийТоваров.ВПереработку, "ТаблицаПоТоварам");

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
		КонецЕсли;
		
		Если (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
		  //Смартис Лиманчук начало 19.12.2012
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссияНал
		  //Смартис Лиманчук окончание 19.12.2012
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование)
		   И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			// ТАРА ПО РЕГИСТРУ Закупки.
			ТоварыИТараПоРегистрамОстатковУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, Отказ, Заголовок);
			
			// ТАРА ПО РЕГИСТРУ ТоварыПолученные.
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыПолученные, СтруктТаблицДокумента);
		
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,,, Истина));
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПолученные, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
		ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			  ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			ТоварыИТараПоРегистрамОстатковУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, Отказ, Заголовок);
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыПолученные.
			
			// Контроль остатков товара
			СтатусПолучения = ?(ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки,
				Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку,
				Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
					
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыПолученныеКонтрольОстатков("Товары", СтруктураШапкиДокумента, СтатусПолучения, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;	
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыПолученныеКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;	
			
			Если НЕ Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыПолученные, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    СтатусПолучения);
				
				Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", СтруктураШапкиДокумента.Сделка);
				Иначе
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента));
				КонецЕсли;
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПолученные, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыПолученные, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,,, Истина));
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПолученные, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;      
			
		КонецЕсли;

		Если НЕ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			
			ТаблицаПоТоварамИзРезерва = УдалитьСтрокиБезРезерваПодЗаказПокупателя(ТаблицаПоТоварам);
			ТаблицаПоТареИзРезерва    = УдалитьСтрокиБезРезерваПодЗаказПокупателя(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамИзРезерва.Количество() > 0 ИЛИ ТаблицаПоТареИзРезерва.Количество() > 0 Тогда
				
				// Контроль остатков товара
				Если Товары.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ВозвратнаяТара.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамИзРезерва);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареИзРезерва);
					
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
						
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;
				
			КонецЕсли;	

		КонецЕсли;
		
	КонецЕсли; // Если ОтражатьВУправленческомУчете
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, Отказ, Заголовок)

	// Предварительно - точнее нужно получать данные из партионного учета.
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;                   	
    	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	ДатаДок    = Дата;  
		
	//Проводки по взаиморасчетам
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Заголовок);
	Если СтруктураПараметровЗачетАванса <> Ложь тогда
		
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре);
		СтруктураДвижений = Новый Структура("ПроводкиБУ ", ПроводкиБУ); 
		БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации, Отказ);
		
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда

			БухгалтерскийУчетРасчетовСКонтрагентами.ПроверитьВозможностьЗачетаАвансаВВалюте(СтруктураШапкиДокумента, СтруктураПараметровЗачетАванса, Отказ, Заголовок);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;

			СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляРасчетыПоПриобретениеРеализацияВВалюте(Ссылка);
			БухгалтерскийУчетРасчетовСКонтрагентами.СформироватьДвиженияПоРасчетыПриобретениеРеализацияВВалюте(СтруктураПараметров, Отказ, ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
		
	// НДС 
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, Отказ);
	//Учет курсовых разниц
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета тогда
		СтруктураПараметровКР = БухгалтерскийУчет.ПодготовкаСтруктурыПараметровДляПереоценкиСчета(Ссылка,Заголовок);
		ПроводкиБУ.Записать(Ложь);
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(СтруктураПараметровКР, ПроводкиБУ, мВалютаРегламентированногоУчета, Истина);
		ПроводкиБУ.Записать(Ложь);
	КонецЕсли; // Учет курсовых разниц

КонецПроцедуры // ДвиженияПоРегистрамРегл

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудования = Ложь)

	Если ТаблицаОборудования Тогда
	
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование,"ДопустимыйСтатус1");
		КонецЕсли;
	
	Иначе
		
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
			//Смартис Лиманчук начало 19.12.2012
		   ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссияНал
			//Смартис Лиманчук окончание 19.12.2012
		   ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус1");
			Иначе
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВПереработку,"ДопустимыйСтатус1");
		КонецЕсли;
	
	КонецЕсли; 

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	
	

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	
		Для каждого Строка Из ТаблицаДвижений Цикл
			
			СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
			
			Строка.СуммаЗадолженностиБУ = СтрокаТЧ.ПроводкиСуммаБезНДСРегл;
			
		КонецЦикла;
	
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом, "КорСчетБУ");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, "КорСубконтоБУ1");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "КорСубконтоБУ2");
		
		Для каждого Строка Из ТаблицаДвижений Цикл
			
			СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
			
			Строка.СуммаЗадолженностиБУ = СтрокаТЧ.ПроводкиСуммаБезНДСРегл;
			
			Строка.КорСубконтоБУ3 = СтрокаТЧ.СделкаРегл;
			
			Если не СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
						
				Строка.КорВалютаЗадолженностиБУ        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Строка.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТЧ.ПроводкиСуммаБезНДСВал;
						
			КонецЕсли;
				
			Если Строка.ОтражатьВБухгалтерскомУчете Тогда								
				Строка.НалоговоеНазначениеПоФакту = СтрокаТЧ.НалоговоеНазначение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры//ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовПоТаре,"КорСчетБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, "КорСубконтоБУ1");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "КорСубконтоБУ2");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТаре.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженностиБУ = СтрокаТЧ.ПроводкиСуммаБезНДСРегл;
		
		Строка.КорСубконтоБУ3 = СтрокаТЧ.СделкаРегл;
		
		Если не СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			Строка.КорВалютаЗадолженностиБУ        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Строка.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТЧ.ПроводкиСуммаБезНДСВал;;
		КонецЕсли;
		
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			Строка.НалоговоеНазначениеПоФакту = СтрокаТЧ.НалоговоеНазначение;
			Если СтрокаТЧ.ДляОблагаемыхНДСомОпераций Тогда
				Строка.ВидДеятельностиНДСПоФакту = Перечисления.ВидыДеятельностиНДС.Облагаемая;	
			Иначе
				Строка.ВидДеятельностиНДСПоФакту = Перечисления.ВидыДеятельностиНДС.Необлагаемая;	
			КонецЕсли; 
			Строка.АмортизируетсяПоФакту   			 = Ложь; 

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры//ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.

	// Ресурс в регистре называется ЗаказПартии
	ТаблицаПоТоварам.Колонки.ЗаказПокупателя.Имя = "ЗаказПартии";

	// Количество из колонки КоличествоДок
	ТаблицаПоТоварам.Колонки.Удалить("Количество");
	ТаблицаПоТоварам.Колонки.КоличествоДок.Имя = "Количество";

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам[ТаблицаДвижений.Индекс(Строка)];
		Строка.ДокументПартии = СтрокаТЧ.ДокументЗакупки;
		
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;

	КонецЦикла;
	
	Для каждого СтрокаТоваров из ТаблицаПоТоварам Цикл

		Если ЗначениеЗаполнено(СтрокаТоваров.ЗаказПартии) тогда

			Если СтрокаТоваров.ЗаказПартии.Метаданные().Имя = "ЗаказПокупателя"  тогда
				ТаблицаДвижений[СтрокаТоваров.НомерСтроки-1].ЗаказСписания = СтрокаТоваров.ЗаказПартии;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	
	// не списываем партии, если по ордеру
	Если СтруктураШапкиДокумента.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру тогда
		 ТаблицаДвижений.ЗаполнитьЗначения(Истина,"НеСписывать");
	КонецЕсли;
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику,"КодОперацииПартииТоваров");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	КонецЕсли;	

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	// ОБОРУДОВАНИЕ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.

	// Количество из колонки КоличествоДок
	ТаблицаОборудование.Колонки.Удалить("Количество");
	ТаблицаОборудование.Колонки.КоличествоДок.Имя = "Количество";

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОборудование, ТаблицаДвижений);

	// Недостающие поля.
	Инд = ТаблицаПоТоварам.Количество();
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаОборудование[ТаблицаДвижений.Индекс(Строка)];
		Строка.ДокументПартии = СтрокаТЧ.ДокументЗакупки;

		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Оборудование;

	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	
	// не списываем партии, если по ордеру
	Если СтруктураШапкиДокумента.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру тогда
		 ТаблицаДвижений.ЗаполнитьЗначения(Истина,"НеСписывать");
	КонецЕсли;		 

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику,"КодОперацииПартииТоваров");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр ( ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаОборудование, Истина);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл( ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаОборудование);
	КонецЕсли;	

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	

	// ТАРА ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Ресурс в регистре называется ЗаказПартии
	ТаблицаПоТаре.Колонки.ЗаказПокупателя.Имя = "ЗаказПартии";
	ТаблицаПоТаре.Колонки.Удалить("Количество");
	ТаблицаПоТаре.Колонки.КоличествоДок.Имя = "Количество";

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл

		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;

	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику,"КодОперацииПартииТоваров");
	
	// не списываем партии, если по ордеру
	Если СтруктураШапкиДокумента.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру тогда
		 ТаблицаДвижений.ЗаполнитьЗначения(Истина,"НеСписывать");
	КонецЕсли;		 
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	КонецЕсли;	
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);
	
КонецПроцедуры//ДвиженияПоРегиструСписанныеТовары

Процедура ЗаполнитьПоПоступлениюТоваровУслугРегл(Основание)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());

	Если Основание.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		СчетУчетаРасчетовСКонтрагентом = Основание.СчетУчетаРасчетовСКонтрагентом;
		СчетУчетаРасчетовПоАвансам     = Основание.СчетУчетаРасчетовПоАвансам;
		СчетУчетаРасчетовПоТаре        = Основание.СчетУчетаРасчетовПоТаре;
		СчетУчетаРасчетовПоТареПоАвансам = Основание.СчетУчетаРасчетовПоТареПоАвансам;
		СчетУчетаНДС  					  = Основание.СчетУчетаНДС;
	КонецЕсли;
	
КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
    мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;

	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете) Тогда
		Возврат;
	КонецЕсли;

    УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация,истина);
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	Иначе		
		//ушли в константы
		//СтруктураШапкиДокумента.Вставить("ВестиПартионныйУчетПоСкладамБух", УчетнаяПолитикаРегл.ВестиСуммовойИПартионныйУчетПоСкладам = Истина);
		//СтруктураШапкиДокумента.Вставить("ВестиПартионныйУчетПоСкладамНал", УчетнаяПолитикаРегл.ВестиСуммовойИПартионныйУчетПоСкладам = Истина);
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитикаРегл.ЕстьНДС);
	КонецЕсли; 
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Проверяет, что размещение указанное в табиличной части, на Оптовый склад.
//
// Параметры:
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части
//  Отказ             - флаг отказа в проведении.
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоСкладОптовый(ТаблицаЗначений, Отказ, Заголовок)
	Перем ПредставлениеТабличнойЧасти;

	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Склад) И СтрокаТаблицы.ВидСклада <> Перечисления.ВидыСкладов.Оптовый Тогда
			Если ПредставлениеТабличнойЧасти = неопределено Тогда
					ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["Оборудование"].Представление();
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке("В строке номер "+ СтрокаТаблицы.НомерСтроки +
				" табличной части Оборудование: содержится склад с видом не равный ""Оптовый"". Такого быть не должно!", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ПроверитьЧтоСкладОптовый()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		И ТипОснования <> Тип("ДокументСсылка.СчетНаОплатуПоставщика")
		И ТипОснования <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;

		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			Склад = Основание.СкладОрдер.Склад;
		Иначе
			Склад = Основание.СкладОрдер;
		КонецЕсли;
		ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;

		// Заполним вид операции.
		ВидыОперацийПоступлениеТоваров       = Перечисления.ВидыОперацийПоступлениеТоваровУслуг;
		ВидыОперацийВозвратТоваровПоставщику = Перечисления.ВидыОперацийВозвратТоваровПоставщику;
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ВидОперации = ВидыОперацийВозвратТоваровПоставщику.ИзПереработки;
			УчитыватьНДС            = Ложь;
			СуммаВключаетНДС        = Ложь;
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = ВидыОперацийВозвратТоваровПоставщику.Оборудование;
		//Смартис Лиманчук начало 05.12.2012
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОборудованиеНал Тогда
			ВидОперации = ВидыОперацийВозвратТоваровПоставщику.Оборудование;
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссияНал Тогда
			ВидОперации = ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссияНал;
		//Смартис Лиманчук окончание 05.12.2012
		Иначе
			ВидОперации = ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
		КонецЕсли;

		// Тип выбираемого значения зависит от договора.
		Сделка = Основание.Сделка;

		Если Основание.Проведен Тогда

			// Заполним табличные части по поступлению Товаров.
			Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
				ЗаполнитьОборудованиеПоОснованиюУпр(Основание, Оборудование);
			КонецЕсли;
            ЗаполнитьТоварыПоОснованиюУпр(Основание, Ложь);
			// а также дополнить бланками строгого учета
			ЗаполнитьТоварыПоОснованиюУпр(Основание, Ложь, Истина);
			ЗаполнитьВозвратнуюТаруПоОснованиюУпр(Основание, Ложь);

		КонецЕсли;

		ЗаполнитьПоПоступлениюТоваровУслугРегл(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		ВалютаДокумента              = Основание.ВалютаДокумента;
		ДоговорКонтрагента           = Основание.ДоговорКонтрагента;
		Комментарий                  = Основание.Комментарий;
		Контрагент                   = Основание.Контрагент;
		КратностьВзаиморасчетов      = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов           = Основание.КурсВзаиморасчетов;
		Организация                  = Основание.Организация;
		Ответственный                = Основание.Ответственный;
		Подразделение                = Основание.Подразделение;
		Склад                        = Основание.Склад;
		СуммаВключаетНДС             = Основание.СуммаВключаетНДС;
		СуммаДокумента               = Основание.СуммаДокумента;
		ТипЦен                       = Основание.ТипЦен;
		УчитыватьНДС                 = Основание.УчитыватьНДС;
		Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(ДоговорКонтрагента.ОсновнойПроект) Тогда
				Проект=ДоговорКонтрагента.ОсновнойПроект;
			КонецЕсли;
		КонецЕсли;

		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл
			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаВозвратнаяТара.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаВозвратнаяТара.Номенклатура;
			НоваяСтрока.Сумма        = ТекСтрокаВозвратнаяТара.Сумма;
			НоваяСтрока.Цена         = ТекСтрокаВозвратнаяТара.Цена;
		КонецЦикла;

		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.СтавкаНДС                  = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.Сумма                      = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаНДС                   = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена                       = ТекСтрокаТовары.Цена;
		КонецЦикла;

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());		
		
	КонецЕсли;

	ЗаполнитьДокументПоОснованиюУпр(Основание);
    УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Товары,         // ТабличнаяЧастьТовары
			ВозвратнаяТара,	// ТабличнаяЧастьВозвратнаяТара
			Неопределено,   // ТабличнаяЧастьУслуги
			Оборудование,   // ТабличнаяЧастьОборудование
			Неопределено, 	// ТабличнаяЧастьОбъектыСтроительства
			Неопределено 	// ТабличнаяЧастьБланкиСтрогогоУчета
		);
	КонецЕсли;	


	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Оборудование);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС( ЭтотОбъект, "Товары")
				   + Ценообразование.ПолучитьСуммуДокументаСНДС( ЭтотОбъект, "Оборудование");

	// В этом случае почитим в табличных частях поля ЗаказПокупателя.
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
	
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ)Тогда
				СтрокаТаблицы.Заказ = Неопределено;
			КонецЕсли;
		КонецЦикла;

		Для каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ)Тогда
				СтрокаТаблицы.Заказ = Неопределено;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Если Не ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
		Оборудование.Очистить();
	КонецЕсли;

	// Заполним реквизит склад в табличных частях "Товары" и "Возвратная тара"
	СкладИзШапки    =  Не мУказаниеСкладовВТЧ;
	Для каждого СтрокаТЧ из Товары Цикл
		Если (СкладИзШапки ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад)) И СтрокаТЧ.Склад <> Склад Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЧ из ВозвратнаяТара Цикл
		Если (СкладИзШапки ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад)) И СтрокаТЧ.Склад <> Склад Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЧ из Оборудование Цикл
		Если (СкладИзШапки ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад)) И СтрокаТЧ.Склад <> Склад Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
			
КонецПроцедуры // ПередЗаписью

// Заполняет по шапке документа дерево параметров, нужных при проведении
// (упр. учет)
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "НеВключатьНДСВСтоимостьПартий" , "НеВключатьНДСВСтоимостьПартий");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам",       "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

// Заполняет структуру полей ТЧ Товары регламентированными реквизитами
//
Процедура ДополнитьСтруктуруПолейТоварыРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ" , "СчетУчетаБУ");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	СтруктураПолей.Вставить("СуммаНДС" , "СуммаНДС");
	
	СтруктураПолей.Вставить("Забалансовый"              , "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("НалоговоеНазначение"       , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"        , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  , "НалоговоеНазначение.ВидНалоговойДеятельности");

КонецПроцедуры

// Заполняет структуру полей ТЧ ВозвратнаяТара регламентированными реквизитами
//
Процедура ДополнитьСтруктуруПолейВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	СтруктураПолей.Вставить("Забалансовый"               , "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("НалоговоеНазначение"        , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"   , "НалоговоеНазначение.ВидНалоговойДеятельности");
	
	СтруктураПростыхПолей.Вставить("СтавкаНДС"           , Перечисления.СтавкиНДС.НеНДС);
	СтруктураПростыхПолей.Вставить("НДС"                 , 0);
	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"        , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПростыхПолей.Вставить("ВидДеятельностиНДС"  , Перечисления.ВидыДеятельностиНДС.Необлагаемая);
	

КонецПроцедуры

// Процедура снимает с резерва материалы полученные для переработки
Процедура СнятиеСРезерваМатериалов(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения, ТаблицаПоТоварам)
	
	Если ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки		
		ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений   = Движения.ТоварыВРезервеНаСкладах;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Контроль остатков товара
	Если Товары.Количество() <> 0 Тогда
		ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл	
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Склад                      = Склад;
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		НоваяСтрока.ДокументРезерва            = Сделка;
		НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
		
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			НоваяСтрока.СерияНоменклатуры = СтрокаТЧ.СерияНоменклатуры;
		КонецЕсли; 
		
	КонецЦикла;
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьРасход();
	НаборДвижений.Записать();
	
КонецПроцедуры // СнятиеСРезерваМатериалов()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения=неопределено,Отказ=ложь) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
 
	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                  , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                           , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                           , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                 , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетовРегл"                 , "ВедениеВзаиморасчетовРегл");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "НеОтноситьНаЗатратыПоНУ" 				 , "НеОтноситьНаЗатратыПоНУ");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"        , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                           , "СделкаВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"          , "ВестиПартионныйУчетПоСкладам");	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"                             , "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "НеВключатьНДСВСтоимостьПартий"         , "НеВключатьНДСВСтоимостьПартий");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом", "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
 	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	СтруктураШапкиДокумента.Вставить("ЭтоВозврат", Истина);

КонецПроцедуры//ПодготовитьСтруктуруШапкиДокумента

// Процедура - обработчик события ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаОборудование;
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;

	
	Если мУдалятьДвижения Тогда		
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);
	
	//Коновалова 28022013 +
	Если Не РольДоступна("ПолныеПрава") И НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ТОгда
		 Сообщить("Нельзя провести документ без отражения по бух. учету!
		          | Заполните галочку бух. учет.");
		Отказ = Истина;		  
	КонецЕсли;
	//Коновалова 28022013 -
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаОборудование);

	// Проверить заполнение ТЧ "Оборудование", "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары        ( ТаблицаПоТоварам,    СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОборудование  ( ТаблицаОборудование, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара( ТаблицаПоТаре,       СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверяем заполнение счетов учета номенклатуры
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", 			ТаблицаПоТоварам, 		СтруктураШапкиДокумента,	Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Оборудование", 	ТаблицаОборудование, 	СтруктураШапкиДокумента,	Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 			СтруктураШапкиДокумента,	Отказ, Заголовок);
	
	ПроводитьПоВзаиморасчетам = (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
	//Смартис Лиманчук начало 19.12.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссияНал
	//Смартис Лиманчук окончание 19.12.2012
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование)
		И (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный);  
		
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Оборудование", ТаблицаПоТоварам, ТаблицаОборудование);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);


	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,		
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование,
									ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
		СнятиеСРезерваМатериалов(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения, ТаблицаПоТоварам);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию", ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаОборудование));

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений по бухгалтерскому и налоговому учетам
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления) Экспорт
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСВал"         , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСВал"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в проводках в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСРегл"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСРегл"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Суммы в проводках в валюте документа
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСВал" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСВал"    , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСВал"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаТоваров.Колонки.Добавить("СтоимостьНУ"                 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал    = СтрокаТаблицы.Стоимость + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;
		
		СтрокаТаблицы.СуммаСНДСВал    = СтрокаТаблицы.СуммаСНДСВал;
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.СуммаНДСВал;
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаБезНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсВалютыДокумента, 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												СтруктураШапкиДокумента.КратностьВалютыДокумента,
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
												, ПогрешностиОкругления, "СуммаСНДСРегл");
			СтрокаТаблицы.СуммаНДСРегл  = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаСНДСРегл,
												СтруктураШапкиДокумента.УчитыватьНДС,
												ИСТИНА,
												СтрокаТаблицы.СтавкаНДС,
												ПогрешностиОкругления);
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
		// Рассчитаем суммы в проводках в валюте регл. учета
		СтрокаТаблицы.ПроводкиСуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаСНДСВал = СтрокаТаблицы.СуммаСНДСВал;
		
		// Определим значение НДС в проводках
		Если СтруктураШапкиДокумента.УчитыватьНДС = Ложь Тогда
			// в документе НДС не указывается
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
		ИначеЕсли СтрокаТаблицы.Забалансовый = Истина 
			И СтруктураШапкиДокумента.Дата < '20110101'
			Тогда
			// по забалансовому счету НДС не выделяется
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
		Иначе
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.СуммаНДСРегл;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = СтрокаТаблицы.СуммаНДСВал;
		КонецЕсли;
		
		СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаБезНДСВал = СтрокаТаблицы.ПроводкиСуммаСНДСВал - СтрокаТаблицы.ПроводкиСуммаНДСВал;
													
		// Рассчитаем суммы налогового учета
	   СтрокаТаблицы.СтоимостьНУ = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;

	КонецЦикла;
	
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ЗаполнитьСделкуРеглВТаблице(ТаблицаТоваров, СтруктураШапкиДокумента);
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуОборудования(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// При выгрузке таблицы из документа количество имеет неотрицательный тип значения,
	// нам необходимы отрицательные числа
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Стоимость");

	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");

	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.Количество  = - СтрокаТаблицы.КоличествоДок;

		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			СтрокаТаблицы.ЗаказПокупателя = Сделка;
		КонецЕсли;

	КонецЦикла;
	
	// важен порядок: сначала Регл, потом Упр
	// (использование колонки Стоимость как врем. переменной)
	ПодготовитьТаблицуОборудованияРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуОборудования()

Процедура ПодготовитьТаблицуОборудованияРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров.Колонки.Добавить("ДляОблагаемыхНДСомОпераций");
	
	
	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	
	НалоговыйУчет.ДобавитьКолонкиТоваровРегл(
					ТаблицаТоваров, 
					СтруктураШапкиДокумента, 
					ПогрешностиОкругления, 
					Истина,     // ЭтоПриобретение
					Ложь,       // ЭтоУслуги
					"Стоимость" // ИмяКолонкиСумма
				  );

	
КонецПроцедуры

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре)

	Если  НЕ  ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
		//Смартис Лиманчук начало 19.12.2012
		И НЕ (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссияНал И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
		//Смартис Лиманчук окончание 19.12.2012
		И НЕ (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
		ТаблицаДвижений = ТаблицаКопия.Скопировать();
		
		// ОБОРУДОВАНИЕ
		ТаблицаКопия = ТаблицаОборудование.Скопировать();
		ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		ТаблицаДвижений.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
		
		ТаблицаДвижений.Колонки.Добавить("Контрагент");
		ТаблицаДвижений.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаДвижений.Колонки.Добавить("ВидДоговораКонтрагента");
		ТаблицаДвижений.Колонки.Добавить("СчетОплаты");
		ТаблицаДвижений.Колонки.Добавить("СчетАванса");
		
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент        , "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора        , "ВидДоговораКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовСКонтрагентом, "СчетОплаты");
		ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовПоАвансам    , "СчетАванса");
		
	КонецЕсли;
			
	// ТАРА (отдельной строкой)
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл","СуммаСНДСРегл,СуммаСНДСВал");
	ТаблицаДвиженийТара = ТаблицаКопия.Скопировать();
	
	ТаблицаДвиженийТара.Колонки.Добавить("Контрагент");
	ТаблицаДвиженийТара.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДвиженийТара.Колонки.Добавить("ВидДоговораКонтрагента");
	ТаблицаДвиженийТара.Колонки.Добавить("СчетОплаты");
	ТаблицаДвиженийТара.Колонки.Добавить("СчетАванса");
	
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Контрагент        , "Контрагент");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора        , "ВидДоговораКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СчетУчетаРасчетовПоТаре         , "СчетОплаты");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СчетУчетаРасчетовПоТареПоАвансам, "СчетАванса");
	
	Если НЕ ЗначениеЗаполнено(ТаблицаДвижений) Тогда
		ТаблицаДвижений = ТаблицаДвиженийТара.Скопировать();
	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийТара, ТаблицаДвижений);
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
КонецФункции

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// 
Процедура ДвиженияПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, ТаблицаПоТаре, Отказ)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС 
		И НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		// Налоговый учет НП или НДС не ведется
		Возврат;
	КОнецЕсли;

    СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", 		СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",  СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	СтруктураПараметров.Вставить("НаправлениеДвижения", Перечисления.НаправленияДвижений.Выбытие);
	СтруктураПараметров.Вставить("РасчетыВозврат",  	Перечисления.РасчетыВозврат.Возврат);
	
	СтруктураПараметров.Вставить("ЕстьНДС",  			СтруктураШапкиДокумента.ЕстьНДС);
	СтруктураПараметров.Вставить("ВалютаДокумента",     СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("Период",     			СтруктураШапкиДокумента.Дата);
	
    СтруктураДвижений = Новый Структура;
	СтруктураДвижений.Вставить("НалоговыйУчет", 			 Движения.ПриобретенияНалоговыйУчет);
	СтруктураДвижений.Вставить("ОжидаемыИПодтвержденныйНДС", Движения.ОжидаемыйИПодтвержденныйНДСПриобретений);
	
	// ТОВАРЫ...
	Если    ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
		ИЛИ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом И Дата < '20110101') Тогда
		// Это не наши ценности, следовательно НДС по ним учитывать не нужно
	Иначе
		
		МассивТаблицТоваров = Новый Массив();
		
		МассивТаблицТоваров.Добавить(ТаблицаПоТоварам);
		МассивТаблицТоваров.Добавить(ТаблицаПоОборудованию);
		
		СтруктураПараметров.Вставить("ТаблицыТоваров", МассивТаблицТоваров);
		
	КонецЕсли;
		
	// ТАРА
	МассивТаблицТары = Новый Массив();
	МассивТаблицТары.Добавить(ТаблицаПоТаре);
	СтруктураПараметров.Вставить("ТаблицыТары", МассивТаблицТары);
	
	НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаОтгрузка(СтруктураПараметров, СтруктураДвижений, мВалютаРегламентированногоУчета, Отказ);
	
КонецПроцедуры // 							  

Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, Отказ)
	
	// Бухгалтерский учет
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если    ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
		ИЛИ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом И Дата < '20110101') Тогда
		// Это не наши ценности, следовательно НДС по ним учитывать не нужно
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	// Получим таблицу движений по счетам НДС
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СчетУчетаНДС,СделкаРегл","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	// ОБОРУДОВАНИЕ
	ТаблицаКопия = ТаблицаОборудование.Скопировать();
	ТаблицаКопия.Свернуть("СчетУчетаНДС,СделкаРегл","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);

	ТаблицаДвижений.Свернуть("СчетУчетаНДС,СделкаРегл","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = "НДС: налоговый кредит: сторно";
			Проводка.НомерЖурнала               = "";

			Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			
			Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"   , СтрокаТаблицы.СделкаРегл);
			Иначе	
				// с 2011 года согласно НК начисляются обязательства при поставке товаров по договорам комиссии
				Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаНДСПодтвержденный;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки", 	  СтрокаТаблицы.СделкаРегл);
			КонецЕсли;
			Проводка.ВалютаКт                   = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт            = - СтрокаТаблицы.ПроводкиСуммаНДСВал;
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам", "МоментОпределенияБазыНДСПоПокупкам");

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "СхемаНалоговогоУчета", "СхемаНалоговогоУчета");
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеРегл()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейОборудованиеРегл(СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ"               , "СчетУчетаБУ");
	СтруктураПолей.Вставить("Забалансовый"              , "СчетУчетаБУ.Забалансовый");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");
	СтруктураПолей.Вставить("НалоговоеНазначение"        , "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"         , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"   , "НалоговоеНазначение.ВидНалоговойДеятельности");
	
КонецПроцедуры //ДополнитьСтруктуруПолейТабличнойЧастиОборудованиеРегл()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Оборудование"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");
мСтруктураПараметровВзаиморасчетов.Вставить("ЭтоВозврат", Истина);

УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");

мУказаниеСкладовВТЧ    = (УказаниеСкладов     = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации)
                         Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);
