////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСтараяДатаНачалаСобытия;

Перем мСтараяДатаОкончанияСобытия;

Перем мКомпонентаСклоненияФИО Экспорт;

Перем мСписокСтарыхПользователей;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Добавляет участника в таблицу участников, если в таблице еще не содержится этого участника,
// либо обновляет данные об участнике
// Процедура используется при выводе участников в диаграмму Ганта
//
Процедура ДобавитьДанныеОбУчастникеВстречи(Участник, ТаблицаРесурсов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Физлицо,
	|	ФизическиеЛица.Наименование КАК ФИО
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Участник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИО";
	
	Запрос.УстановитьПараметр("Участник",	Участник);
	Запрос.УстановитьПараметр("ДатаСреза",	НачалоДня(ДатаНачала));
	
	ВыборкаПоЗанятостиФизлиц = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоЗанятостиФизлиц.СледующийПоЗначениюПоля("ФИО") Цикл
		Строка = ТаблицаРесурсов.Найти(Участник, "Ссылка");
		Если Строка = Неопределено Тогда
			Строка = ТаблицаРесурсов.Добавить();
		КонецЕсли;
		
		Строка.Ссылка	= ВыборкаПоЗанятостиФизлиц.Физлицо;
		Строка.Текст	= ВыборкаПоЗанятостиФизлиц.ФИО;
	КонецЦикла;
	
	ТаблицаРесурсов.Сортировать("Текст");
	
КонецПроцедуры

// Возвращает таблицу участников встречи
//
Функция ПолучитьДанныеОбУчастникахВстречи() Экспорт
	
	ТаблицаРесурсов = Новый ТаблицаЗначений;
	ТаблицаРесурсов.Колонки.Добавить("Ссылка");
	ТаблицаРесурсов.Колонки.Добавить("Текст");
	ТаблицаРесурсов.Индексы.Добавить("Ссылка");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Физлицо,
	|	ФизическиеЛица.Наименование КАК ФИО
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&СписокФизлиц)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИО";
	
	Запрос.УстановитьПараметр("СписокФизлиц",	Участники.ВыгрузитьКолонку("Физлицо"));
	Запрос.УстановитьПараметр("ДатаСреза",		НачалоДня(ДатаНачала));
	
	ВыборкаПоЗанятостиФизлиц = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоЗанятостиФизлиц.СледующийПоЗначениюПоля("ФИО") Цикл
		Строка = ТаблицаРесурсов.Добавить();
		
		Строка.Ссылка	= ВыборкаПоЗанятостиФизлиц.Физлицо;
		Строка.Текст	= ВыборкаПоЗанятостиФизлиц.ФИО;
	КонецЦикла;
	
	Возврат ТаблицаРесурсов;
	
КонецФункции

// Возвращает структуру с данными о ресурсах встречи
//
Функция ПолучитьДанныеОРесурсахВстречи(ПолучатьДанныеОЗанятостиФизлиц) Экспорт
	
	РесурсыВстречи = Новый Структура;
	
	ТаблицаРесурсов = Новый ТаблицаЗначений;
	ТаблицаРесурсов.Колонки.Добавить("Ссылка");
	ТаблицаРесурсов.Колонки.Добавить("Текст");
	ТаблицаРесурсов.Индексы.Добавить("Ссылка");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Помещения.Ссылка КАК Помещение,
	|	Помещения.Наименование КАК ПомещениеНаименование
	|ИЗ
	|	Справочник.Помещения КАК Помещения
	|ГДЕ
	|	Помещения.ДляВстреч
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПомещениеНаименование";
	
	ВыборкаПоПомещениям = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоПомещениям.Следующий() Цикл
		Строка = ТаблицаРесурсов.Добавить();
		
		Строка.Ссылка	= ВыборкаПоПомещениям.Помещение;
		Строка.Текст	= ВыборкаПоПомещениям.ПомещениеНаименование;
	КонецЦикла;
	
	РесурсыВстречи.Вставить("Помещения",	ТаблицаРесурсов.Скопировать());
	
	Если ПолучатьДанныеОЗанятостиФизлиц Тогда
		РесурсыВстречи.Вставить("Участники",	ПолучитьДанныеОбУчастникахВстречи());
	Иначе
		ТаблицаРесурсов.Очистить();
		РесурсыВстречи.Вставить("Участники",	ТаблицаРесурсов.Скопировать());
	КонецЕсли;
	
	Возврат РесурсыВстречи;
	
КонецФункции

// Возвращает структуру с занятостью ресурсов в день встречи
//
Функция ПолучитьДанныеОЗанятостиВДеньПроведенияВстречи(ПолучатьДанныеОЗанятостиФизлиц) Экспорт
	
	ЗанятостьВДеньПроведенияВстречи = Новый Структура;
	
	Если Помещение.Пустая() Тогда
		ЗанятостьВДеньПроведенияВстречи.Вставить("ПредставлениеТочкиВстреча",	"Встреча");
		
	Иначе
		ЗанятостьВДеньПроведенияВстречи.Вставить("ПредставлениеТочкиВстреча",	"Встреча (" + Помещение + ")");
		
	КонецЕсли;
	
	ЗанятостьРесурса		= Новый ТаблицаЗначений;
	ЗанятостьРесурса.Колонки.Добавить("Ресурс");
	ЗанятостьРесурса.Колонки.Добавить("ДатаНачала");
	ЗанятостьРесурса.Колонки.Добавить("ДатаОкончания");
	ЗанятостьРесурса.Колонки.Добавить("Текст");
	ЗанятостьРесурса.Колонки.Добавить("Расшифровка");
	
	// Выбрать информацию о занятости помещений
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор",		Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала",			НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",		КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("СписокФизлиц",		Участники.ВыгрузитьКолонку("Физлицо"));
	
	ТаблицаПериодов = ПроцедурыУправленияПерсоналом.ПериодыИспользованияПомещений("ДатаНачала", "ДатаОкончания", "Периоды.Помещение.ДляВстреч", Ложь);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Помещение,
	|	Помещение.Наименование КАК ПомещениеНаименование,
	|	ДатаНачала,
	|	ДатаОкончания,
	|	Регистратор КАК Регистратор,
	|	Регистратор.Ответственный КАК Ответственный
	|ИЗ
	|	(" + ТаблицаПериодов + ") КАК Периоды
	|УПОРЯДОЧИТЬ ПО
	|	ПомещениеНаименование,
	|	ДатаНачала";
	
	ВыборкаПоЗанятостиПомещений	= Запрос.Выполнить().Выбрать();
	
	ОшибкиЗанятостиРесурса	= Новый Массив;
	Пока ВыборкаПоЗанятостиПомещений.СледующийПоЗначениюПоля("Помещение") Цикл
		ЕстьОшибкаПериода = Ложь;
		
		Пока ВыборкаПоЗанятостиПомещений.Следующий() Цикл
			ФИОФизическогоЛица = СокрЛП(ВыборкаПоЗанятостиПомещений.Ответственный);
			УниверсальныеМеханизмы.Просклонять(мКомпонентаСклоненияФИО, ФИОФизическогоЛица, 5, ФИОФизическогоЛица);
			
			Если ВыборкаПоЗанятостиПомещений.Помещение = Помещение И
				 ВыборкаПоЗанятостиПомещений.ДатаНачала < ДатаОкончания И ВыборкаПоЗанятостиПомещений.ДатаОкончания > ДатаНачала Тогда
				
				ЕстьОшибкаПериода = Истина;
			КонецЕсли;
			
			Интервал = ЗанятостьРесурса.Добавить();
			Интервал.Ресурс			= ВыборкаПоЗанятостиПомещений.Помещение;
			Интервал.ДатаНачала		= ВыборкаПоЗанятостиПомещений.ДатаНачала;
			Интервал.ДатаОкончания	= ВыборкаПоЗанятостиПомещений.ДатаОкончания;
			Если НачалоДня(Интервал.ДатаНачала) <> НачалоДня(Интервал.ДатаОкончания) Тогда
				Интервал.Текст		= "Занято весь день " + ФИОФизическогоЛица;
			Иначе
				Интервал.Текст		= "Занято с " + Формат(Интервал.ДатаНачала, "ДФ=ЧЧ:мм") + " до " + Формат(Интервал.ДатаОкончания, "ДФ=ЧЧ:мм") + " " + ФИОФизическогоЛица;
			КонецЕсли;
			
			Расшифровка = Новый Структура;
			Расшифровка.Вставить("Вид",				"Помещение");
			Расшифровка.Вставить("Документ",		ВыборкаПоЗанятостиПомещений.Регистратор);
			Расшифровка.Вставить("Объект",			ВыборкаПоЗанятостиПомещений.Помещение);
			Расшифровка.Вставить("ДатаНачала",		Интервал.ДатаНачала);
			Расшифровка.Вставить("ДатаОкончания",	Интервал.ДатаОкончания);
			
			Интервал.Расшифровка	= Расшифровка;
		КонецЦикла;
		
		Если ЕстьОшибкаПериода Тогда
			ОшибкиЗанятостиРесурса.Добавить(ВыборкаПоЗанятостиПомещений.ПомещениеНаименование);
		КонецЕсли;
		
	КонецЦикла;
	ЗанятостьРесурса.Индексы.Добавить("Ресурс");
	
	ЗанятостьВДеньПроведенияВстречи.Вставить("ЗанятостьПомещений",			ЗанятостьРесурса.Скопировать());
	ЗанятостьВДеньПроведенияВстречи.Вставить("ОшибкиЗанятостиПомещений",	ОшибкиЗанятостиРесурса);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Занятость.Период КАК ДатаНачала,
	|	Занятость.ПериодЗавершения КАК ДатаОкончания,
	|	Занятость.ФизЛицо,
	|	Занятость.ФизЛицо.Пол КАК Пол,
	|	Занятость.ФизЛицо.Наименование КАК ФИО,
	|	Занятость.Регистратор,
	|	ЛОЖЬ КАК ЗанятВесьДень,
	|	ВЫБОР
	|		КОГДА Занятость.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Мероприятие)
	|			ТОГДА ""Участвует в мероприятии""
	|		КОГДА Занятость.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Встреча)
	|			ТОГДА ""На встрече""
	|	КОНЕЦ КАК ПричинаЗанятости
	|ИЗ
	|	РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК Занятость
	|ГДЕ
	|	Занятость.ФизЛицо В(&СписокФизлиц)
	|	И Занятость.Регистратор <> &Регистратор
	|	И (Занятость.Период >= &ДатаНачала
	|				И Занятость.Период <= &ДатаОкончания
	|			ИЛИ Занятость.ПериодЗавершения >= &ДатаНачала
	|				И Занятость.ПериодЗавершения <= &ДатаОкончания
	|			ИЛИ (&ДатаНачала >= Занятость.Период
	|					И &ДатаНачала <= Занятость.ПериодЗавершения
	|				ИЛИ Занятость.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1))
	|			ИЛИ (&ДатаОкончания >= Занятость.Период
	|					И &ДатаОкончания <= Занятость.ПериодЗавершения
	|				ИЛИ Занятость.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)))
	|	И Занятость.Состояние <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Занятость.Период,
	|	Занятость.ПериодЗавершения,
	|	Занятость.ФизЛицо,
	|	Занятость.ФизЛицо.Пол,
	|	Занятость.ФизЛицо.Наименование,
	|	Занятость.Регистратор,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА Занятость.Состояние = ЗНАЧЕНИЕ(перечисление.СостоянияРаботника.ОтпускЕжегодный)
	|			ТОГДА ""В отпуске""
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.СостояниеРаботников КАК Занятость
	|ГДЕ
	|	Занятость.ФизЛицо В(&СписокФизлиц)
	|	И Занятость.Регистратор <> &Регистратор
	|	И (Занятость.Период >= &ДатаНачала
	|				И Занятость.Период <= &ДатаОкончания
	|			ИЛИ Занятость.ПериодЗавершения >= &ДатаНачала
	|				И Занятость.ПериодЗавершения <= &ДатаОкончания
	|			ИЛИ (&ДатаНачала >= Занятость.Период
	|					И &ДатаНачала <= Занятость.ПериодЗавершения
	|				ИЛИ Занятость.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1))
	|			ИЛИ (&ДатаОкончания >= Занятость.Период
	|					И &ДатаОкончания <= Занятость.ПериодЗавершения
	|				ИЛИ Занятость.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Занятость.Период,
	|	Занятость.ПериодЗавершения,
	|	Занятость.ФизЛицо,
	|	Занятость.ФизЛицо.Пол,
	|	Занятость.ФизЛицо.Наименование,
	|	Занятость.Регистратор,
	|	ВЫБОР
	|		КОГДА Занятость.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Занятость.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный)
	|			ТОГДА ""Запланирован отпуск на""
	|		КОГДА Занятость.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Мероприятие)
	|			ТОГДА ""Участвует в мероприятии""
	|		КОГДА Занятость.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Встреча)
	|			ТОГДА ""На встрече""
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК Занятость
	|ГДЕ
	|	Занятость.ФизЛицо В(&СписокФизлиц)
	|	И Занятость.Регистратор <> &Регистратор
	|	И (Занятость.Период >= &ДатаНачала
	|				И Занятость.Период <= &ДатаОкончания
	|			ИЛИ Занятость.ПериодЗавершения >= &ДатаНачала
	|				И Занятость.ПериодЗавершения <= &ДатаОкончания
	|			ИЛИ (&ДатаНачала >= Занятость.Период
	|					И &ДатаНачала <= Занятость.ПериодЗавершения
	|				ИЛИ Занятость.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1))
	|			ИЛИ (&ДатаОкончания >= Занятость.Период
	|					И &ДатаОкончания <= Занятость.ПериодЗавершения
	|				ИЛИ Занятость.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИО,
	|	ДатаНачала";
	
	ЗанятостьРесурса.Очистить();
	
	ОшибкиЗанятостиРесурса	= Новый Массив;
	
	ВыборкаПоЗанятостиФизлиц	= Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоЗанятостиФизлиц.СледующийПоЗначениюПоля("ФИО") Цикл
		
		ЕстьОшибкаПериода = Ложь;
		
		Пока ВыборкаПоЗанятостиФизлиц.Следующий() Цикл
			Если ВыборкаПоЗанятостиФизлиц.ДатаНачала = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаПоЗанятостиФизлиц.ДатаНачала < ДатаОкончания И ВыборкаПоЗанятостиФизлиц.ДатаОкончания > ДатаНачала Тогда
				ЕстьОшибкаПериода = Истина;
			КонецЕсли;
			
			Если ПолучатьДанныеОЗанятостиФизлиц Тогда
				Интервал = ЗанятостьРесурса.Добавить();
				Интервал.Ресурс			= ВыборкаПоЗанятостиФизлиц.Физлицо;
				Интервал.ДатаНачала		= ВыборкаПоЗанятостиФизлиц.ДатаНачала;
				Интервал.ДатаОкончания	= ВыборкаПоЗанятостиФизлиц.ДатаОкончания;
				Интервал.Текст			= ВыборкаПоЗанятостиФизлиц.ПричинаЗанятости + ?(ВыборкаПоЗанятостиФизлиц.ПричинаОтсутствия.Пустая(), "", ВыборкаПоЗанятостиФизлиц.ПричинаОтсутствия);
				Если ВыборкаПоЗанятостиФизлиц.ЗанятВесьДень Тогда
					Интервал.Текст		= Интервал.Текст + " весь день";
				Иначе
					Интервал.Текст		= Интервал.Текст + " с " + Формат(Интервал.ДатаНачала, "ДФ=ЧЧ:мм") + " до " + Формат(Интервал.ДатаОкончания, "ДФ=ЧЧ:мм");
				КонецЕсли;
				Расшифровка = Новый Структура;
				Расшифровка.Вставить("Вид",				"Физлицо");
				Расшифровка.Вставить("Документ",		ВыборкаПоЗанятостиФизлиц.Регистратор);
				Расшифровка.Вставить("Объект",			ВыборкаПоЗанятостиФизлиц.Физлицо);
				Расшифровка.Вставить("ДатаНачала",		Интервал.ДатаНачала);
				Расшифровка.Вставить("ДатаОкончания",	Интервал.ДатаОкончания);
				
				Интервал.Расшифровка	= Расшифровка;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьОшибкаПериода Тогда
			ФИОФизическогоЛица = СокрЛП(ВыборкаПоЗанятостиФизлиц.ФИО);
			УниверсальныеМеханизмы.Просклонять(мКомпонентаСклоненияФИО, ФИОФизическогоЛица, 2, ФИОФизическогоЛица, ВыборкаПоЗанятостиФизлиц.Пол);
			ОшибкиЗанятостиРесурса.Добавить(ФИОФизическогоЛица);
		КонецЕсли;
		
	КонецЦикла;
	ЗанятостьРесурса.Индексы.Добавить("Ресурс");
	
	ЗанятостьВДеньПроведенияВстречи.Вставить("ЗанятостьФизлиц",			ЗанятостьРесурса.Скопировать());
	ЗанятостьВДеньПроведенияВстречи.Вставить("ОшибкиЗанятостиФизлиц",	ОшибкиЗанятостиРесурса);
	
	Возврат ЗанятостьВДеньПроведенияВстречи;
	
КонецФункции

// Возвращает список доступных помещений начиная с указанного времени и свободными на указанную
// продолжительность
//
Функция ПолучитьСписокДоступныхПомещений(Знач ВремяСКоторогоПодбирать, Знач Продолжительность) Экспорт
	
	мДлинаЧаса = 3600;
	
	УдалосьПодобратьПомещение = Ложь;
	
	ТекущаяДата = ВремяСКоторогоПодбирать;
	
	СписокСвободныхПомещений = Новый ТаблицаЗначений;
	СписокСвободныхПомещений.Колонки.Добавить("Помещение");
	СписокСвободныхПомещений.Колонки.Добавить("ДатаНачала");
	СписокСвободныхПомещений.Колонки.Добавить("ДатаОкончания");
	СписокСвободныхПомещений.Индексы.Добавить("Помещение");
	
	// Если известно точное время, начиная с которого необходимо подобрать помещение,
	// начинаем его подбирать
	Если ЗначениеЗаполнено(ТекущаяДата) Тогда
		// Может оказаться, что свободного времени в текущем дне уже нет
		НоваяДатаНачала		= ТекущаяДата;
		НоваяДатаОкончания	= ТекущаяДата + Час(Продолжительность) * мДлинаЧаса + Минута(Продолжительность) * 60;
		
		Если НачалоДня(НоваяДатаОкончания) > НачалоДня(НоваяДатаНачала) Тогда
			Возврат "При текущей продолжительности совещание закончится ночью!";
		КонецЕсли;
		
		ТаблицаПериодов = ПроцедурыУправленияПерсоналом.ПериодыИспользованияПомещений("ДатаНачала", "ДатаОкончания", "Периоды.Помещение.ДляВстреч И Периоды.ДатаОкончания > &ДатаНачала", Ложь);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Помещение,
		|	ДатаНачала,
		|	ДатаОкончания
		|ИЗ
		|	(" + ТаблицаПериодов + ") КАК Периоды
		|УПОРЯДОЧИТЬ ПО
		|	Помещение,
		|	ДатаНачала";
		
		Запрос.УстановитьПараметр("ДатаНачала",		ТекущаяДата);
		Запрос.УстановитьПараметр("ДатаОкончания",	КонецДня(ТекущаяДата));
		Запрос.УстановитьПараметр("Регистратор",	Ссылка);
		
		// получим всю занятость помещения начиная с интересующего нас времени
		ВыборкаПоЗанятостиПомещений	= Запрос.Выполнить().Выбрать();
		
		// запишем в таблицу все периоды, в которые помещение будет свободно
		ТаблицаСвободныхПериодовПомещений = Новый ТаблицаЗначений;
		ТаблицаСвободныхПериодовПомещений.Колонки.Добавить("Помещение");
		ТаблицаСвободныхПериодовПомещений.Колонки.Добавить("ДатаНачала");
		ТаблицаСвободныхПериодовПомещений.Колонки.Добавить("ДатаОкончания");
		
		Пока ВыборкаПоЗанятостиПомещений.СледующийПоЗначениюПоля("Помещение") Цикл
			ТекПомещение = ВыборкаПоЗанятостиПомещений.Помещение;
			
			ПредыдущаяДатаНачала	= Неопределено;
			ПредыдущаяДатаОкончания	= ТекущаяДата - 1;
			
			Пока ВыборкаПоЗанятостиПомещений.Следующий() Цикл
				
				ПродолжительностьСвободыПомещения = Дата(1,1,1) + (ВыборкаПоЗанятостиПомещений.ДатаНачала - ПредыдущаяДатаОкончания - 1);
				
				Если ТекущаяДата < ВыборкаПоЗанятостиПомещений.ДатаНачала И ПродолжительностьСвободыПомещения >= Продолжительность Тогда
					Строка = ТаблицаСвободныхПериодовПомещений.Добавить();
					Строка.Помещение		= ТекПомещение;
					Строка.ДатаНачала		= ПредыдущаяДатаОкончания + 1;
					Строка.ДатаОкончания	= ВыборкаПоЗанятостиПомещений.ДатаНачала - 1;
				КонецЕсли;
				
				Если ПредыдущаяДатаОкончания <> ВыборкаПоЗанятостиПомещений.ДатаНачала Тогда
					ПредыдущаяДатаНачала	= ВыборкаПоЗанятостиПомещений.ДатаНачала;
				КонецЕсли;
				ПредыдущаяДатаОкончания	= ВыборкаПоЗанятостиПомещений.ДатаОкончания-1;
				
			КонецЦикла;
			
			Если ПредыдущаяДатаОкончания <> Неопределено Тогда
				Строка = ТаблицаСвободныхПериодовПомещений.Добавить();
				Строка.Помещение		= ТекПомещение;
				Строка.ДатаНачала		= ПредыдущаяДатаОкончания + 1;
			Иначе
				Строка = ТаблицаСвободныхПериодовПомещений.Добавить();
				Строка.Помещение		= ТекПомещение;
				Строка.ДатаНачала		= ТекущаяДата;
			КонецЕсли;
			
		КонецЦикла;
		
		СписокПомещений = ТаблицаСвободныхПериодовПомещений.Скопировать();
		СписокПомещений.Свернуть("Помещение");
		
		Запрос.УстановитьПараметр("СписокПомещений",	СписокПомещений);
		Запрос.УстановитьПараметр("ТекущаяДата",		ТекущаяДата);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Помещения.Ссылка КАК Помещение,
		|	&ТекущаяДата КАК ДатаНачала
		|ИЗ
		|	Справочник.Помещения КАК Помещения
		|ГДЕ
		|	Помещения.ДляВстреч
		|	И (НЕ Помещения.Ссылка В (&СписокПомещений))";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если СписокПомещений.Количество() = 0 И Выборка.Количество() = 0 Тогда
			Возврат "Нет помещений с признаком 'для встреч'!";
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаСвободныхПериодовПомещений.Добавить(), Выборка);
		КонецЦикла;
		
		ТаблицаСвободныхПериодовПомещений.Сортировать("Помещение,ДатаНачала");
		
		// в цикле по всем свободным периодам помещения попытаемся определить, не заняты ли физические лица
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СборДанныхДляПланированияЗанятостиФизлиц.Период КАК ДатаНачала,
		|	СборДанныхДляПланированияЗанятостиФизлиц.ПериодЗавершения КАК ДатаОкончания
		|ИЗ
		|	РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
		|ГДЕ
		|	СборДанныхДляПланированияЗанятостиФизлиц.ФизЛицо В (&СписокФизлиц)
		|	И СборДанныхДляПланированияЗанятостиФизлиц.Регистратор <> &Регистратор
		|	И (СборДанныхДляПланированияЗанятостиФизлиц.ПериодЗавершения >= &ДатаНачала
		|				И СборДанныхДляПланированияЗанятостиФизлиц.ПериодЗавершения <= ДОБАВИТЬКДАТЕ(&ДатаОкончания, ДЕНЬ, 180)
		|			ИЛИ СборДанныхДляПланированияЗанятостиФизлиц.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала";
		
		Запрос.УстановитьПараметр("СписокФизлиц",	Участники.ВыгрузитьКолонку("Физлицо"));
		
		СписокПомещений = ТаблицаСвободныхПериодовПомещений.Скопировать();
		СписокПомещений.Свернуть("Помещение");
		СписокПомещений = СписокПомещений.ВыгрузитьКолонку("Помещение");
		
		Для Каждого ТекущееПомещение Из СписокПомещений Цикл
			ТаблицаСвободныхПериодовПомещения = ТаблицаСвободныхПериодовПомещений.НайтиСтроки(Новый Структура("Помещение", ТекущееПомещение));
		
			Для Каждого ТекущийПериод Из ТаблицаСвободныхПериодовПомещения Цикл
				НачалоПериода		= ТекущийПериод.ДатаНачала;
				ОкончаниеПериода	= ?(ТекущийПериод.ДатаОкончания <> Неопределено, ТекущийПериод.ДатаОкончания, КонецДня(НачалоПериода)+1);
				
				// проверим, что продолжительность периода больше или равна, чем нужная нам
				Если Дата(1, 1, 1) + (ОкончаниеПериода - НачалоПериода + 1) < Продолжительность Тогда
					Продолжить;
				КонецЕсли;
				
				УдалосьПодобратьПомещение = Истина;
				
				Запрос.УстановитьПараметр("ДатаНачала",		НачалоПериода);
				Запрос.УстановитьПараметр("ДатаОкончания",	ОкончаниеПериода);
				
				НоваяДатаНачала		= ТекущийПериод.ДатаНачала;
				НоваяДатаОкончания	= НоваяДатаНачала + Час(Продолжительность) * мДлинаЧаса + Минута(Продолжительность) * 60 - 1;
				// секунду вычитаем, считая что резервирование заканчивается последней секундой прошлой минуты, например резерв до 16 часов закончился в 15:59:59
				
				ВыборкаПоЗанятостиФизлиц = Запрос.Выполнить().Выбрать();
				
				ПериодИзменен		= Истина;
				// Будем менять период до тех пор, пока кто либо из физических лиц занят в этом периоде
				Пока ПериодИзменен Цикл
					ПериодИзменен = Ложь;
					
					ВыборкаПоЗанятостиФизлиц.Сбросить();
					Пока ВыборкаПоЗанятостиФизлиц.Следующий() Цикл
						// Если физическое лицо в указанный период не занято - хорошо. Можно проверять следующее физическое лицо
						Если (ВыборкаПоЗанятостиФизлиц.ДатаНачала > НоваяДатаОкончания) ИЛИ (ВыборкаПоЗанятостиФизлиц.ДатаОкончания < НоваяДатаНачала) Тогда
							Продолжить;
						КонецЕсли;
						
						// Физическое лицо в указанный период занято. Необходимо скорректировать период
						НоваяДатаНачала		= ВыборкаПоЗанятостиФизлиц.ДатаОкончания+1;
						НоваяДатаОкончания	= НоваяДатаНачала + Час(Продолжительность) * мДлинаЧаса + Минута(Продолжительность) * 60 - 1;
						ПериодИзменен		= Истина;
						
						// Если новый интервал вышел за границу периода - можно дальше уже не искать, все равно не попадем
						Если НоваяДатаОкончания > ОкончаниеПериода Тогда
							УдалосьПодобратьПомещение = Ложь;
						КонецЕсли;
						
						// Проверим, может быть мы вышли за продолжительность дня
						Если НачалоДня(НоваяДатаОкончания) <> НоваяДатаОкончания И НачалоДня(НоваяДатаОкончания) > НачалоДня(НоваяДатаНачала) Тогда
							УдалосьПодобратьПомещение = Ложь;
						КонецЕсли;
						
						Прервать;
						
					КонецЦикла;
				КонецЦикла;
				
				Если УдалосьПодобратьПомещение Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если УдалосьПодобратьПомещение Тогда
				Строка = СписокСвободныхПомещений.Добавить();
				Строка.Помещение		= ТекущееПомещение;
				Строка.ДатаНачала		= НоваяДатаНачала;
				Строка.ДатаОкончания	= НоваяДатаОкончания + 1; // секунду, которую ранее вычитали, прибавим
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не УдалосьПодобратьПомещение Тогда
		Возврат "Не удалось подобрать помещение! Уменьшите продолжительность или перенесите совещание на другую дату!";
	КонецЕсли;
	
	СписокСвободныхПомещений.Сортировать("ДатаНачала, Помещение");
	
	Возврат СписокСвободныхПомещений;
	
КонецФункции

// Возвращает описание документа, для отображения на форме
//
Функция ПолучитьОписаниеДокумента(ОшибкиЗанятостиПомещения, ОшибкиЗанятостиФизлиц) Экспорт
	
	ОписаниеСостоянияДокумента = Новый Структура;
	
	Если ОшибкиЗанятостиПомещения.Количество() <> 0 Или ОшибкиЗанятостиФизлиц.Количество() <> 0 Тогда
		ОписаниеСостоянияДокумента.Вставить("ВажностьСообщения",	"Ошибка");
		
		СписокОшибочныхПомещений = "";
		Для Каждого ОшибочноеПомещение Из ОшибкиЗанятостиПомещения Цикл
			Если Не ПустаяСтрока(СписокОшибочныхПомещений) Тогда
				СписокОшибочныхПомещений = СписокОшибочныхПомещений + ", ";
			КонецЕсли;
			СписокОшибочныхПомещений = СписокОшибочныхПомещений + ОшибочноеПомещение;
		КонецЦикла;
		
		ТекстОшибки = "Встреча не может состояться в назначенное время из-за занятости ";
		Если ОшибкиЗанятостиПомещения.Количество() = 1 Тогда
			ТекстОшибки = ТекстОшибки + "помещения " + СписокОшибочныхПомещений;
		КонецЕсли;
		
		СписокОшибочныхФизлиц = "";
		Для Каждого ОшибочноеФизлицо Из ОшибкиЗанятостиФизлиц Цикл
			Если Не ПустаяСтрока(СписокОшибочныхФизлиц) Тогда
				СписокОшибочныхФизлиц = СписокОшибочныхФизлиц + ", ";
			КонецЕсли;
			СписокОшибочныхФизлиц = СписокОшибочныхФизлиц + ОшибочноеФизлицо;
		КонецЦикла;
		
		Если ОшибкиЗанятостиФизлиц.Количество() = 1 Тогда
			Если ОшибкиЗанятостиПомещения.Количество() > 0 Тогда
				ТекстОшибки = ТекстОшибки + "; ";
			КонецЕсли;
			ТекстОшибки = ТекстОшибки + СписокОшибочныхФизлиц;
		ИначеЕсли ОшибкиЗанятостиФизлиц.Количество() > 1 Тогда
			Если ОшибкиЗанятостиПомещения.Количество() > 0 Тогда
				ТекстОшибки = ТекстОшибки + "; ";
			КонецЕсли;
			ТекстОшибки = ТекстОшибки + СписокОшибочныхФизлиц;
		КонецЕсли;
		
		ОписаниеСостоянияДокумента.Вставить("ТекстСообщения",		ТекстОшибки);
	Иначе
		ОписаниеСостоянияДокумента.Вставить("ВажностьСообщения",	"Информация");
		
		Если ДатаОкончания < НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату()) + (ТекущаяДата() - НачалоДня(ТекущаяДата())) Тогда
			ОписаниеСостоянияДокумента.Вставить("ТекстСообщения",	"Встреча состоялась в прошлом");
		Иначе
			ОписаниеСостоянияДокумента.Вставить("ТекстСообщения",	"Встреча назначена на " + Формат(ДатаНачала, "ДФ=Ч:мм") + ?(Помещение.Пустая(), "", " в помещении " + Помещение) + ". Продолжительность встречи " + Формат(Дата('00010101') + (ДатаОкончания - ДатаНачала), "ДФ=Ч:мм") + ". Встреча закончится в " + Формат(ДатаОкончания, "ДФ=Ч:мм"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеСостоянияДокумента;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.ДатаНачала,
	|	Док.ДатаОкончания,
	|	Док.Помещение,
	|	ПланируемаяЗанятостьПомещений.Регистратор КАК КонфликтныйДокумент,
	|	ПланируемаяЗанятостьПомещений.Занятость КАК КонфликтнаяЗанятость,
	|	Док.ВстречаСКандидатом
	|ИЗ
	|	Документ.Встречи КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемаяЗанятостьПомещений КАК ПланируемаяЗанятостьПомещений
	|		ПО Док.Помещение = ПланируемаяЗанятостьПомещений.Помещение
	|			И Док.ДатаНачала = ПланируемаяЗанятостьПомещений.Период
	|			И Док.Ссылка <> ПланируемаяЗанятостьПомещений.Регистратор
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части "Участники" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса к табличной части документа.
//
Функция СформироватьЗапросПоСписокУчастников(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала",		ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончания);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
	|	ПерваяТаблица.Физлицо,
	|	ПерваяТаблица.ДатаНачала,
	|	ПерваяТаблица.ДатаОкончания,
	|	ПерваяТаблица.ПроверяемоеЗначение КАК ПроверяемоеЗначение,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПерваяТаблица.Регистратор) КАК Регистратор,
	|	ВтораяТаблица.НомерСтроки КАК КонфликтнаяСтрока
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПерваяТаблица.НомерСтроки КАК НомерСтроки,
	|		ПерваяТаблица.Физлицо КАК Физлицо,
	|		ПерваяТаблица.ДатаНачала КАК ДатаНачала,
	|		ПерваяТаблица.ДатаОкончания КАК ДатаОкончания,
	|		ВЫБОР
	|			КОГДА ПерваяТаблица.ПериодСостояния ЕСТЬ НЕ NULL 
	|						И ВЫБОР
	|							КОГДА СостояниеРаботников.ПериодЗавершения <= ПерваяТаблица.ДатаНачала
	|									И СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА СостояниеРаботников.СостояниеЗавершения
	|							ИНАЧЕ СостояниеРаботников.Состояние
	|						КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.СостоянияРаботника.Работает)
	|					ИЛИ ПерваяТаблица.ПериодСостояния >= ПерваяТаблица.ДатаНачала
	|				ТОГДА СостояниеРаботников.Регистратор
	|			КОГДА ПерваяТаблица.ПериодЗанятости ЕСТЬ НЕ NULL 
	|						И ВЫБОР
	|							КОГДА СборДанныхДляПланированияЗанятостиФизлиц.ПериодЗавершения <= ПерваяТаблица.ДатаНачала
	|									И СборДанныхДляПланированияЗанятостиФизлиц.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА СборДанныхДляПланированияЗанятостиФизлиц.СостояниеЗавершения
	|							ИНАЧЕ СборДанныхДляПланированияЗанятостиФизлиц.Состояние
	|						КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
	|					ИЛИ ПерваяТаблица.ПериодЗанятости >= ПерваяТаблица.ДатаНачала
	|				ТОГДА СборДанныхДляПланированияЗанятостиФизлиц.Регистратор
	|			КОГДА ПерваяТаблица.ПериодЗанятостиПлановый ЕСТЬ НЕ NULL 
	|						И ВЫБОР
	|							КОГДА СобытийныйПланЗанятостиФизлиц.ПериодЗавершения <= ПерваяТаблица.ДатаНачала
	|									И СобытийныйПланЗанятостиФизлиц.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА СобытийныйПланЗанятостиФизлиц.СостояниеЗавершения
	|							ИНАЧЕ СобытийныйПланЗанятостиФизлиц.Состояние
	|						КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
	|					ИЛИ ПерваяТаблица.ПериодЗанятостиПлановый >= ПерваяТаблица.ДатаНачала
	|				ТОГДА СобытийныйПланЗанятостиФизлиц.Регистратор
	|		КОНЕЦ КАК Регистратор,
	|		ВЫБОР
	|			КОГДА ПерваяТаблица.ПериодСостояния ЕСТЬ НЕ NULL 
	|						И ВЫБОР
	|							КОГДА СостояниеРаботников.ПериодЗавершения <= ПерваяТаблица.ДатаНачала
	|									И СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА СостояниеРаботников.СостояниеЗавершения
	|							ИНАЧЕ СостояниеРаботников.Состояние
	|						КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.СостоянияРаботника.Работает)
	|					ИЛИ ПерваяТаблица.ПериодСостояния >= ПерваяТаблица.ДатаНачала
	|				ТОГДА ""Нельзя""
	|			КОГДА ПерваяТаблица.ПериодЗанятости ЕСТЬ НЕ NULL 
	|						И ВЫБОР
	|							КОГДА СборДанныхДляПланированияЗанятостиФизлиц.ПериодЗавершения <= ПерваяТаблица.ДатаНачала
	|									И СборДанныхДляПланированияЗанятостиФизлиц.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА СборДанныхДляПланированияЗанятостиФизлиц.СостояниеЗавершения
	|							ИНАЧЕ СборДанныхДляПланированияЗанятостиФизлиц.Состояние
	|						КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
	|					ИЛИ ПерваяТаблица.ПериодЗанятости >= ПерваяТаблица.ДатаНачала
	|				ТОГДА ""Нельзя""
	|			КОГДА ПерваяТаблица.ПериодЗанятостиПлановый ЕСТЬ НЕ NULL 
	|						И ВЫБОР
	|							КОГДА СобытийныйПланЗанятостиФизлиц.ПериодЗавершения <= ПерваяТаблица.ДатаНачала
	|									И СобытийныйПланЗанятостиФизлиц.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА СобытийныйПланЗанятостиФизлиц.СостояниеЗавершения
	|							ИНАЧЕ СобытийныйПланЗанятостиФизлиц.Состояние
	|						КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.Свободен)
	|					ИЛИ ПерваяТаблица.ПериодЗанятостиПлановый >= ПерваяТаблица.ДатаНачала
	|				ТОГДА ""Нельзя""
	|			ИНАЧЕ ""Можно""
	|		КОНЕЦ КАК ПроверяемоеЗначение,
	|		ПерваяТаблица.Ссылка КАК Ссылка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			МАКСИМУМ(СостояниеРаботников.Период) КАК ПериодСостояния,
	|			МАКСИМУМ(СборДанныхДляПланированияЗанятостиФизлиц.Период) КАК ПериодЗанятости,
	|			МАКСИМУМ(СобытийныйПланЗанятостиФизлиц.Период) КАК ПериодЗанятостиПлановый,
	|			ВстречиУчастники.Ссылка КАК Ссылка,
	|			ВстречиУчастники.НомерСтроки КАК НомерСтроки,
	|			ВстречиУчастники.Физлицо КАК Физлицо,
	|			ВстречиУчастники.Ссылка.ДатаНачала КАК ДатаНачала,
	|			ВстречиУчастники.Ссылка.ДатаОкончания КАК ДатаОкончания
	|		ИЗ
	|			Документ.Встречи.Участники КАК ВстречиУчастники
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
	|				ПО ВстречиУчастники.Физлицо = СборДанныхДляПланированияЗанятостиФизлиц.ФизЛицо
	|					И ВстречиУчастники.Ссылка <> СборДанныхДляПланированияЗанятостиФизлиц.Регистратор
	|					И (ВЫБОР
	|						КОГДА ВстречиУчастники.Ссылка.ДатаНачала = ВстречиУчастники.Ссылка.ДатаОкончания
	|							ТОГДА КОНЕЦПЕРИОДА(ВстречиУчастники.Ссылка.ДатаОкончания, ДЕНЬ)
	|						ИНАЧЕ ВстречиУчастники.Ссылка.ДатаОкончания
	|					КОНЕЦ > СборДанныхДляПланированияЗанятостиФизлиц.Период)
	|					И (СборДанныхДляПланированияЗанятостиФизлиц.Состояние <> ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный))
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|				ПО ВстречиУчастники.Ссылка.ДатаОкончания > СостояниеРаботников.Период
	|					И ВстречиУчастники.Физлицо = СостояниеРаботников.ФизЛицо
	|					И ВстречиУчастники.Ссылка <> СостояниеРаботников.Регистратор
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
	|				ПО ВстречиУчастники.Физлицо = СобытийныйПланЗанятостиФизлиц.ФизЛицо
	|					И ВстречиУчастники.Ссылка <> СобытийныйПланЗанятостиФизлиц.Регистратор
	|					И (ВЫБОР
	|						КОГДА ВстречиУчастники.Ссылка.ДатаНачала = ВстречиУчастники.Ссылка.ДатаОкончания
	|							ТОГДА КОНЕЦПЕРИОДА(ВстречиУчастники.Ссылка.ДатаОкончания, ДЕНЬ)
	|						ИНАЧЕ ВстречиУчастники.Ссылка.ДатаОкончания
	|					КОНЕЦ > СобытийныйПланЗанятостиФизлиц.Период)
	|		ГДЕ
	|			ВстречиУчастники.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВстречиУчастники.Физлицо,
	|			ВстречиУчастники.Ссылка.ДатаОкончания,
	|			ВстречиУчастники.Ссылка.ДатаНачала,
	|			ВстречиУчастники.Ссылка,
	|			ВстречиУчастники.НомерСтроки) КАК ПерваяТаблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	|			ПО ПерваяТаблица.Физлицо = СостояниеРаботников.ФизЛицо
	|				И ПерваяТаблица.Ссылка <> СостояниеРаботников.Регистратор
	|				И ПерваяТаблица.ПериодСостояния = СостояниеРаботников.Период
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СборДанныхДляПланированияЗанятостиФизлиц КАК СборДанныхДляПланированияЗанятостиФизлиц
	|			ПО ПерваяТаблица.ПериодЗанятости = СборДанныхДляПланированияЗанятостиФизлиц.Период
	|				И ПерваяТаблица.Физлицо = СборДанныхДляПланированияЗанятостиФизлиц.ФизЛицо
	|				И ПерваяТаблица.Ссылка <> СборДанныхДляПланированияЗанятостиФизлиц.Регистратор
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
	|			ПО ПерваяТаблица.ПериодЗанятостиПлановый = СобытийныйПланЗанятостиФизлиц.Период
	|				И ПерваяТаблица.Физлицо = СобытийныйПланЗанятостиФизлиц.ФизЛицо
	|				И ПерваяТаблица.Ссылка <> СобытийныйПланЗанятостиФизлиц.Регистратор) КАК ПерваяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Встречи.Участники КАК ВтораяТаблица
	|		ПО ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
	|			И ПерваяТаблица.Физлицо = ВтораяТаблица.Физлицо
	|			И (ПерваяТаблица.ДатаНачала <= ВтораяТаблица.Ссылка.ДатаНачала
	|					И ВтораяТаблица.Ссылка.ДатаНачала <= ПерваяТаблица.ДатаОкончания
	|				ИЛИ ПерваяТаблица.ДатаНачала <= ВтораяТаблица.Ссылка.ДатаОкончания
	|					И ВтораяТаблица.Ссылка.ДатаОкончания <= ПерваяТаблица.ДатаОкончания
	|				ИЛИ ВтораяТаблица.Ссылка.ДатаНачала <= ПерваяТаблица.ДатаНачала
	|					И ПерваяТаблица.ДатаОкончания <= ВтораяТаблица.Ссылка.ДатаОкончания)
	|			И ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоСписокРаботников()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)
	
	// Дата
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задана дата и время начала встречи!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ДатаНачала = ВыборкаПоШапкеДокумента.ДатаОкончания ИЛИ НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана продолжительность встречи!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ДатаНачала > ВыборкаПоШапкеДокумента.ДатаОкончания Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата и время окончания встречи меньше чем дата и время начала встречи!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: в регистре уже есть такое движение
	Если ВыборкаПоШапкеДокумента.КонфликтнаяЗанятость <> NULL Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Помещение уже переведено в состояние """ + ВыборкаПоШапкеДокумента.КонфликтнаяЗанятость + """ документом " + ВыборкаПоШапкеДокумента.КонфликтныйДокумент + "!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "СписокРаботников" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиСписокУчастников(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Участники"": ";
	
	// Физлицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Физлицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока <> NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "Найдена повторяющаяся строка №" + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ПроверяемоеЗначение = "Нельзя" Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "На указанный период документом " + ВыборкаПоСтрокамДокумента.Регистратор + " уже была запланирована другая занятость!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли;
		
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока <> Null  Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "В строке №" + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока + " указан пересекающийся период встречи!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиСписокРаботников()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоШапке(ВыборкаПоШапкеДокумента, СтруктураПараметров = "")
	
	Если НЕ ВыборкаПоШапкеДокумента.Помещение.Пустая() Тогда
		
		Движение = Движения.ПланируемаяЗанятостьПомещений.Добавить();
		// Свойства
		Движение.Период					= ВыборкаПоШапкеДокумента.ДатаНачала;
		// Измерения
		Движение.Помещение				= ВыборкаПоШапкеДокумента.Помещение;
		// Ресурсы
		Движение.Занятость				= Перечисления.Занятость.Занято;
		
		Движение = Движения.ПериодыЗанятостиПомещений.Добавить();
		// Измерения
		Движение.Помещение				= ВыборкаПоШапкеДокумента.Помещение;
		Движение.ДатаНачала				= ВыборкаПоШапкеДокумента.ДатаНачала;
		Движение.ДатаОкончания			= ВыборкаПоШапкеДокумента.ДатаОкончания;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  ВыборкаПоСписокУчастников             - выборка из результата запроса по строкам документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоСписокУчастников(ВыборкаПоШапкеДокумента, ВыборкаПоСписокУчастников, СтруктураПараметров = "")
	
	Движение = Движения.СборДанныхДляПланированияЗанятостиФизлиц.Добавить();
	// Свойства
	Движение.Период					= ВыборкаПоШапкеДокумента.ДатаНачала;
	// Измерения
	Движение.Физлицо				= ВыборкаПоСписокУчастников.Физлицо;
	Движение.Документ				= ВыборкаПоШапкеДокумента.Ссылка;
	// Ресурсы
	Движение.Состояние			= Перечисления.ТипыПериодическихЗадачРаботника.Встреча;
	Движение.ПериодЗавершения		= ВыборкаПоШапкеДокумента.ДатаОкончания - 1;
	Движение.СостояниеЗавершения	= Перечисления.ТипыПериодическихЗадачРаботника.Свободен;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоСписокРаботников


Процедура ЗапомнитьСтарыеЗначения()
	
	мСписокСтарыхПользователей = Новый СписокЗначений;
	мСтараяДатаНачалаСобытия = ДатаНачала;
	мСтараяДатаОкончанияСобытия = ДатаОкончания;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущееСобытие", Ссылка);
	
	Запрос.Текст = "
	|
	|ВЫБРАТЬ
	|	СобытияКалендаряПользователяОбобщенные.Пользователь КАК Пользователь,
	|	СобытияКалендаряПользователяОбобщенные.Дата КАК ДатаСобытия
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|
	|ГДЕ
	|	СобытияКалендаряПользователяОбобщенные.Событие = &ТекущееСобытие
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	СобытияКалендаряПользователяОбобщенные.Пользователь,
	|	СобытияКалендаряПользователяОбобщенные.Дата
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		
		ТаблицаПользователей = ТаблицаЗапроса.Скопировать();
		ТаблицаПользователей.Свернуть("Пользователь");
		мСписокСтарыхПользователей.ЗагрузитьЗначения(ТаблицаПользователей.ВыгрузитьКолонку("Пользователь"));
		
		ТаблицаЗапроса.Свернуть("ДатаСобытия");
		ТаблицаЗапроса.Сортировать("ДатаСобытия ВОЗР");
		
		мСтараяДатаНачалаСобытия = ТаблицаЗапроса[0].ДатаСобытия;
		мСтараяДатаОкончанияСобытия = ТаблицаЗапроса[ТаблицаЗапроса.Количество() - 1].ДатаСобытия;
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьСписокПользователейДляКалендаря()
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить("Пользователь");
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		НоваяСтрокаТаблицыПользователей = ТаблицаПользователей.Добавить();
		НоваяСтрокаТаблицыПользователей.Пользователь = Ответственный;
	КонецЕсли;
	
	Для каждого СтрокаТаблицыУчастников Из Участники Цикл
		
		Если СтрокаТаблицыУчастников.Физлицо.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныйПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ФизЛицо", СтрокаТаблицыУчастников.Физлицо);
		
		Если НЕ НайденныйПользователь.Пустая() Тогда
			НоваяСтрокаТаблицыПользователей = ТаблицаПользователей.Добавить();
			НоваяСтрокаТаблицыПользователей.Пользователь = НайденныйПользователь;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПользователей.Свернуть("Пользователь");
	
	СписокПользователей = Новый СписокЗначений;
	
	СписокПользователей.ЗагрузитьЗначения(ТаблицаПользователей.ВыгрузитьКолонку("Пользователь"));
	
	Возврат СписокПользователей;
	
КонецФункции // ПолучитьСписокПользователейДляКалендаря()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(Участники, , "Физлицо");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// отражение в календаре пользователя занятость помещений
	ЗапомнитьСтарыеЗначения();
	
	УправлениеКонтактами.ОтразитьЗанятостьПомещений(Ссылка,ДатаНачала,ДатаОкончания,мСтараяДатаНачалаСобытия,мСтараяДатаОкончанияСобытия);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			ДобавитьСтрокуВДвиженияПоШапке(ВыборкаПоШапкеДокумента);
			
			// получим реквизиты табличной части
			ВыборкаПоСписокУчастников = СформироватьЗапросПоСписокУчастников(Режим).Выбрать();
			
			Пока ВыборкаПоСписокУчастников.Следующий() Цикл 
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиСписокУчастников(ВыборкаПоШапкеДокумента, ВыборкаПоСписокУчастников, Отказ, Заголовок);
				
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоСписокУчастников(ВыборкаПоШапкеДокумента, ВыборкаПоСписокУчастников);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ЗапомнитьСтарыеЗначения();
	
	мСписокПользователей = ПолучитьСписокПользователейДляКалендаря();
	
	УправлениеКонтактами.ОтменитьЗанятостьПомещений(Ссылка, ДатаНачала, ДатаОкончания, мСписокПользователей, мСписокСтарыхПользователей);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКомпонентаСклоненияФИО = глЗначениеПеременной("глКомпонентаСклоненияФИО");
