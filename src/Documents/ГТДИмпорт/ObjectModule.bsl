Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ЗаполнитьСтатьюКнигиПриобретенияРегл(СтрокаТЧ) Экспорт
	
	Раздел = Разделы[СтрокаТЧ.НомерРаздела - 1];
	
	// Определим, имеется ли право на налоговый кредит	
	Если НалоговыйУчет.ЕстьНалоговыйКредит(СтрокаТЧ) Тогда
		Если ОформленНалоговыйВексельПоНДС Тогда
			Если Раздел.СтавкаНДС =  Перечисления.СтавкиНДС.НДС0 
			ИЛИ Раздел.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
				// ст 6 Декларации
				СтрокаТЧ.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НОИмпортВексель;
			КонецЕсли; 
		Иначе
			Если Раздел.СтавкаНДС =  Перечисления.СтавкиНДС.НДС0 
			ИЛИ Раздел.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
				// ст 12.1 Декларации
				СтрокаТЧ.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРОблагНДСТамож;
			Иначе
				// ст 12.3 Декларации
				СтрокаТЧ.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРОблагБезНДС;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Если ОформленНалоговыйВексельПоНДС Тогда
			Если Раздел.СтавкаНДС =  Перечисления.СтавкиНДС.НДС0 
			ИЛИ Раздел.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
				// ст 6 Декларации
				Если Дата >='20110301' Тогда
				    СтрокаТЧ.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();
				Иначе
					СтрокаТЧ.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НОИмпортВексель;
				КонецЕсли;	
			КонецЕсли; 
		Иначе
			Если Раздел.СтавкаНДС =  Перечисления.СтавкиНДС.НДС0 
			ИЛИ Раздел.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
				// ст 13.1.1 Декларации
				СтрокаТЧ.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРНеОблагНеОбъектНДСТамож;
			Иначе
				// ст 13.1.2 Декларации
				СтрокаТЧ.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКИмпортВРНеОблагНеОбъектБезНДС;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ);
	
    ЗаполнитьСтатьюКнигиПриобретенияРегл(СтрокаТЧ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт
	
	// Счета заполняются в любом режиме
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, , , Истина);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Добавляет строку в табличную часть "Разделы"
//
// Возвращаемое значение:
//   строка табличной части, которую добавили.
//
Функция ДобавитьРаздел() Экспорт

#Если Клиент Тогда
	СтавкаПошлины = ВосстановитьЗначение("СтавкаТаможеннойПошлины");
	СтавкаАкциза  = ВосстановитьЗначение("СтавкаАкциза");
#Иначе
	СтавкаПошлины = 0;
	СтавкаАкциза  = 0;
#КонецЕсли

	НовыйРаздел = Разделы.Добавить();
	НовыйРаздел.СтавкаНДС      = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
	НовыйРаздел.СтавкаПошлины  = СтавкаПошлины;
	НовыйРаздел.СтавкаАкциза   = СтавкаАкциза;

	Возврат НовыйРаздел;

КонецФункции // ДобавитьРаздел()

// Вычисляет суммы по данным раздела.
//
// Параметры
//  НомерРаздела   - число, номер раздела по которому надо получить итоги,
//  ВсегоСтоимость - число, в этот параметр будет возвращена сумма фактурной стоимости,
//  ВсегоПошлина   - число, в этот параметр будет возвращена сумма пошлины, 
//  ВсегоНДС       - число, в этот параметр будет возвращена сумма НДС.
//
Процедура ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоАкциз, ВсегоНДС)  Экспорт

	ВсегоСтоимость = 0;
	ВсегоПошлина   = 0;
	ВсегоАкциз     = 0;
	ВсегоНДС       = 0;
	МассивСтрок = Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ВсегоСтоимость = ВсегоСтоимость + ЭлементМассива.ФактурнаяСтоимость;
		ВсегоПошлина   = ВсегоПошлина   + ЭлементМассива.СуммаПошлины;
		ВсегоАкциз     = ВсегоАкциз     + ЭлементМассива.СуммаАкциза;
		ВсегоНДС       = ВсегоНДС       + ЭлементМассива.СуммаНДС;
	КонецЦикла;
	МассивСтрок = Оборудование.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ВсегоСтоимость = ВсегоСтоимость + ЭлементМассива.ФактурнаяСтоимость;
		ВсегоПошлина   = ВсегоПошлина   + ЭлементМассива.СуммаПошлины;
		ВсегоАкциз     = ВсегоАкциз     + ЭлементМассива.СуммаАкциза;
		ВсегоНДС       = ВсегоНДС       + ЭлементМассива.СуммаНДС;
	КонецЦикла;

КонецПроцедуры // ПосчитатьИтогиПоРазделу()

Процедура РассчитатьСуммыПошлиныГТДИАкциза(Раздел)
	
	ВсегоСтоимость = 0;
	ВсегоАкциз     = 0;
	ВсегоПошлина   = 0;
	ВсегоНДС       = 0;
	
	НомерРаздела = Разделы.Индекс(Раздел) + 1;
	
	ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоАкциз, ВсегоНДС);

	Раздел.ТаможеннаяСтоимость = ВсегоСтоимость;	
	Раздел.СуммаПошлины = Раздел.ТаможеннаяСтоимость * Раздел.СтавкаПошлины / 100;
   	Раздел.СуммаАкциза  = Раздел.ТаможеннаяСтоимость * Раздел.СтавкаАкциза  / 100;

	БазаНДС = Раздел.ТаможеннаяСтоимость + Раздел.СуммаПошлины + Раздел.СуммаАкциза;
	Раздел.СуммаНДС = Ценообразование.РассчитатьСуммуНДС(БазаНДС, Истина, Ложь, Ценообразование.ПолучитьСтавкуНДС(Раздел.СтавкаНДС));  // УчитыватьНДС, Сумма не включает НДС.
	
	МассивСтрок  = Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	МассивСтрокОборудование = Оборудование.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	// добавим оборудование в общий массив
	Для каждого ЭлементМассива Из МассивСтрокОборудование Цикл
		МассивСтрок.Добавить(ЭлементМассива);
	КонецЦикла;
	РаспределитьСуммы(Раздел.СуммаПошлины, Раздел.СуммаАкциза, Раздел.СуммаНДС, НомерРаздела, МассивСтрок);
	
КонецПроцедуры

Процедура РаспределитьСуммы(СуммаПошлины, СуммаАкциза, СуммаНДС, НомерРаздела, МассивСтрок) Экспорт

	СтрокаМаксимальнойСуммы  = Неопределено; // На эту строку будем относить остаток после распределения (ошибки округления)
	МаксимальнаяСумма        = 0; // Значение максимальной суммы.
	НепогашеннаяСуммаПошлины = СуммаПошлины;
	НепогашеннаяСуммаАкциза  = СуммаАкциза;
	НепогашеннаяСуммаНДС     = СуммаНДС;
	
	ВсегоСтоимость = 0;
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ВсегоСтоимость = ВсегоСтоимость + ЭлементМассива.ФактурнаяСтоимость;
	КонецЦикла;

	Для каждого ЭлементМассива Из МассивСтрок Цикл
		
        ДельтаПошлины = СуммаПошлины * ЭлементМассива.ФактурнаяСтоимость / ВсегоСтоимость;
		
		// Если Дельта по модулю оказалась больше, чем осталось погасить
		Если ДельтаПошлины < 0 Тогда
			ДельтаПошлины = Макс(НепогашеннаяСуммаПошлины, ДельтаПошлины)
		Иначе
			ДельтаПошлины = Мин(НепогашеннаяСуммаПошлины, ДельтаПошлины)
		КонецЕсли; 

        ДельтаАкциза = СуммаАкциза * ЭлементМассива.ФактурнаяСтоимость / ВсегоСтоимость;
		
		// Если Дельта по модулю оказалась больше, чем осталось погасить
		Если ДельтаПошлины < 0 Тогда
			ДельтаАкциза = Макс(НепогашеннаяСуммаАкциза, ДельтаАкциза)
		Иначе
			ДельтаАкциза = Мин(НепогашеннаяСуммаАкциза, ДельтаАкциза)
		КонецЕсли;
		
		ДельтаНДС = СуммаНДС * ЭлементМассива.ФактурнаяСтоимость / ВсегоСтоимость;

		// Если Дельта по модулю оказалась больше, чем осталось погасить
		Если ДельтаНДС < 0 Тогда
			ДельтаНДС = Макс(НепогашеннаяСуммаНДС, ДельтаНДС)
		Иначе
			ДельтаНДС = Мин(НепогашеннаяСуммаНДС, ДельтаНДС)
		КонецЕсли; 

		// Проверим текущую сумму на максимум.
		Если ЭлементМассива.ФактурнаяСтоимость > МаксимальнаяСумма  Тогда
			МаксимальнаяСумма       = ЭлементМассива.ФактурнаяСтоимость;
			СтрокаМаксимальнойСуммы = ЭлементМассива;
		КонецЕсли;

		// Заполняем значения.
		ЭлементМассива.СуммаПошлины = ДельтаПошлины;
		
		// Остаток нераспределенной суммы надо уменьшать на реальное изменение
		НепогашеннаяСуммаПошлины = НепогашеннаяСуммаПошлины - ЭлементМассива.СуммаПошлины;

		ЭлементМассива.СуммаАкциза = ДельтаАкциза;
		
		// Остаток нераспределенной суммы надо уменьшать на реальное изменение
		НепогашеннаяСуммаАкциза = НепогашеннаяСуммаАкциза - ЭлементМассива.СуммаАкциза;
		
		ЭлементМассива.СуммаНДС = ДельтаНДС;
		
		// Остаток нераспределенной суммы надо уменьшать на реальное изменение
		НепогашеннаяСуммаНДС = НепогашеннаяСуммаНДС - ЭлементМассива.СуммаНДС;

	КонецЦикла;
		
	// Если что-то осталось, кидаем на строку с максимальной суммой.
	Если НепогашеннаяСуммаПошлины > 0
	   И СтрокаМаксимальнойСуммы <> Неопределено Тогда

		СтрокаМаксимальнойСуммы.СуммаПошлины = СтрокаМаксимальнойСуммы.СуммаПошлины + НепогашеннаяСуммаПошлины;
	КонецЕсли;
	
	// Если что-то осталось, кидаем на строку с максимальной суммой.
	Если НепогашеннаяСуммаАкциза > 0
	   И СтрокаМаксимальнойСуммы <> Неопределено Тогда

		СтрокаМаксимальнойСуммы.СуммаАкциза = СтрокаМаксимальнойСуммы.СуммаАкциза + НепогашеннаяСуммаАкциза;
	КонецЕсли;
	
	// Если что-то осталось, кидаем на строку с максимальной суммой.
	Если НепогашеннаяСуммаНДС > 0
	   И СтрокаМаксимальнойСуммы <> Неопределено Тогда

		СтрокаМаксимальнойСуммы.СуммаНДС = СтрокаМаксимальнойСуммы.СуммаНДС + НепогашеннаяСуммаНДС;
	КонецЕсли;

КонецПроцедуры //  КоманднаяПанельТоварыРаспределить()


// Заполнение раздела документа "ГТД по импорту" по документам поступления
//
// Параметры
//  ДокументПоступления - ссылка на документ ПоступлениеТоваровУслуг, определяет документ поступления, по которому надо заполнить этот документ,
//  НомерРаздела        - число, номер раздела, который надо заполнить.
//
Процедура ЗаполнитьПоПоступлению(ДокументПоступления, НомерРаздела) Экспорт
	ТаблицаЗначенийТовары = ДокументПоступления.Товары.Выгрузить();
	Для каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийТовары Цикл

		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.НомерРаздела               = НомерРаздела;
		НоваяСтрока.ДокументПартии             = ДокументПоступления;
		НоваяСтрока.ЕдиницаИзмерения           = СтрокаТаблицыЗначений.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест       = СтрокаТаблицыЗначений.ЕдиницаИзмеренияМест;
		НоваяСтрока.ЗаказПокупателя            = СтрокаТаблицыЗначений.Заказ;
		НоваяСтрока.Количество                 = СтрокаТаблицыЗначений.Количество;
		НоваяСтрока.КоличествоМест             = СтрокаТаблицыЗначений.КоличествоМест;
		НоваяСтрока.Коэффициент                = СтрокаТаблицыЗначений.Коэффициент;
		НоваяСтрока.Номенклатура               = СтрокаТаблицыЗначений.Номенклатура;
		НоваяСтрока.СерияНоменклатуры          = СтрокаТаблицыЗначений.СерияНоменклатуры;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицыЗначений.ХарактеристикаНоменклатуры;
		НоваяСтрока.ФактурнаяСтоимость         = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицыЗначений.Сумма, ДокументПоступления.ВалютаДокумента,
			                                               ВалютаДокумента, 
			                                               ЗаполнениеДокументов.КурсДокумента(ДокументПоступления, мВалютаРегламентированногоУчета),
			                                               КурсДокумента,
			                                               ЗаполнениеДокументов.КратностьДокумента(ДокументПоступления, мВалютаРегламентированногоУчета),
			                                               КратностьДокумента);
		
		// Заполним бухгалтерские и налоговые реквизиты
		НоваяСтрока.СчетУчетаБУ             	= СтрокаТаблицыЗначений.СчетУчетаБУ;
		НоваяСтрока.НалоговоеНазначение         = СтрокаТаблицыЗначений.НалоговоеНазначение;
			
		НоваяСтрока.СчетУчетаНДС 				= ПланыСчетов.Хозрасчетный.НалоговыеОбязательства;

		ЗаполнитьСтатьюКнигиПриобретенияРегл(НоваяСтрока);
	КонецЦикла;

	Если ДокументПоступления.Метаданные().ТабличныеЧасти.Найти("Оборудование") = Неопределено Тогда
		// нет ТЧ Оборудование
		Возврат;
	КонецЕсли;
		
	ТаблицаЗначенийОборудование = ДокументПоступления.Оборудование.Выгрузить();
	Для каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийОборудование Цикл
		
		НоваяСтрока = Оборудование.Добавить();
		НоваяСтрока.НомерРаздела               = НомерРаздела;
		НоваяСтрока.ДокументПартии             = ДокументПоступления;
		НоваяСтрока.ЕдиницаИзмерения           = СтрокаТаблицыЗначений.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест       = СтрокаТаблицыЗначений.ЕдиницаИзмеренияМест;
		НоваяСтрока.Количество                 = СтрокаТаблицыЗначений.Количество;
		НоваяСтрока.КоличествоМест             = СтрокаТаблицыЗначений.КоличествоМест;
		НоваяСтрока.Коэффициент                = СтрокаТаблицыЗначений.Коэффициент;
		НоваяСтрока.Номенклатура               = СтрокаТаблицыЗначений.Номенклатура;
		НоваяСтрока.СерияНоменклатуры          = СтрокаТаблицыЗначений.СерияНоменклатуры;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицыЗначений.ХарактеристикаНоменклатуры;
		НоваяСтрока.ФактурнаяСтоимость         = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицыЗначений.Сумма, ДокументПоступления.ВалютаДокумента,
													   ВалютаДокумента, 
													   ЗаполнениеДокументов.КурсДокумента(ДокументПоступления, мВалютаРегламентированногоУчета),
													   КурсДокумента,
													   ЗаполнениеДокументов.КратностьДокумента(ДокументПоступления, мВалютаРегламентированногоУчета),
													   КратностьДокумента);

		 // Заполним бухгалтерские и налоговые реквизиты
		НоваяСтрока.СчетУчетаБУ             	= СтрокаТаблицыЗначений.СчетУчетаБУ;
		НоваяСтрока.НалоговоеНазначение    		= СтрокаТаблицыЗначений.НалоговоеНазначение;
			
		НоваяСтрока.СчетУчетаНДС 				= ПланыСчетов.Хозрасчетный.НалоговыеОбязательства;
			
		ЗаполнитьСтатьюКнигиПриобретенияРегл(НоваяСтрока);
	КонецЦикла;
КонецПроцедуры // ЗаполнитьПоПоступлению()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	ПоставщикКомитент = (СтруктураШапкиДокумента.ДоговорПоставщикаТоваров.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
	КонецЕсли;
КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл()	

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРазделы(ТаблицаПоРазделам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ТаможеннаяСтоимость, СтавкаНДС");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Разделы", СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Суммы пошлины и НДС в каждом разделе должны совпадать с итогами по разделу в ТЧ Товары.
	Для каждого Раздел Из ТаблицаПоРазделам Цикл

		ВсегоСтоимость = 0;
		ВсегоПошлина   = 0;
		ВсегоНДС       = 0;
		НомерРаздела = ТаблицаПоРазделам.Индекс(Раздел) + 1;
		ВсегоАкциз       = 0;
		ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоАкциз, ВсегоНДС);

		Если ВсегоПошлина <> Раздел.СуммаПошлины Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По разделу """ + СокрЛП(НомерРаздела) + """ сумма пошлины не совпадает с итогом по товарам раздела", Отказ, Заголовок);
		КонецЕсли;

		Если ВсегоНДС <> Раздел.СуммаНДС Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По разделу """ + СокрЛП(НомерРаздела) + """ сумма НДС не совпадает с итогом по товарам раздела", Отказ, Заголовок);
		КонецЕсли;
		Если ВсегоАкциз <> Раздел.СуммаАкциза Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По разделу """ + СокрЛП(НомерРаздела) + """ сумма акциза не совпадает с итогом по товарам раздела", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ФактурнаяСтоимость");

	ПоставщикКомитент = (СтруктураШапкиДокумента.ДоговорПоставщикаТоваров.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
    Если НЕ ПоставщикКомитент Тогда
	
		СтруктураОбязательныхПолей.Вставить("ДокументПартии");
	
	КонецЕсли; 
	
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// При поступлении товаров должен быть указан конкретный вид налоговой деятельности.
	СтруктураПараметровПроверки = Новый Структура("ПроверятьРаспределяемую");
	НалоговыйУчет.ПроверитьТабличнуюЧастьНаРазрешенныеВидыНалоговойДеятельности(ЭтотОбъект, "Товары", , ТаблицаПоТоварам,
	                                                              СтруктураПараметровПроверки, 
																  СтруктураШапкиДокумента, 
											                      Отказ, Заголовок);
	// Проверка номера ГТД.
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
    
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + "Товары" + """: ";
		Если НЕ СтрокаТаблицы.ДокументПартииДоговор = СтруктураШапкиДокумента.ДоговорПоставщикаТоваров Тогда
			СтрокаСообщения = " реквизит ""Документ партии"" не соответствует реквизиту ""Договор поставщика товаров""!";
			
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		ИначеЕсли НЕ СтрокаТаблицы.ДокументПартииКонтрагент = СтруктураШапкиДокумента.ПоставщикТоваров Тогда	
			СтрокаСообщения = " реквизит ""Документ партии"" не соответствует реквизиту ""Поставщик товаров""!";
			
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
										
		Если СтрокаТаблицы.ДокументПартииВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			// ГТД принятые в переработку не обрабатывает
			СтрокаСообщения = " реквизит ""Документ партии"" является поступлением в переработку. ГТД оформляется только для купленных товаров !";
			
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;

	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаПоТоварам, 
					ИмяТабличнойЧасти,
					Отказ, 
					Заголовок, 
					"Поступление", // ВидОперации
					Ложь           // ЭтоЗатраты 
	);	
		
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Оборудование".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОборудование(ТаблицаПоОборудованию, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Оборудование";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ФактурнаяСтоимость");
	
	ПоставщикКомитент = (СтруктураШапкиДокумента.ДоговорПоставщикаТоваров.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
    Если НЕ ПоставщикКомитент Тогда
	
		СтруктураОбязательныхПолей.Вставить("ДокументПартии");
	
	КонецЕсли; 

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "Оборудование", ТаблицаПоОборудованию, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Оборудование", ТаблицаПоОборудованию, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Оборудование", ТаблицаПоОборудованию, Отказ, Заголовок);
	
	// Все партии должны быть от ПоставщикаТоваров
	Для каждого СтрокаТаблицы Из ТаблицаПоОборудованию Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + "Товары" + """: ";
		
		Если НЕ СтрокаТаблицы.ДокументПартииДоговор = СтруктураШапкиДокумента.ДоговорПоставщикаТоваров Тогда
			СтрокаСообщения = " реквизит ""Документ партии"" не соответствует реквизиту ""Договор поставщика товаров""!";
			
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		ИначеЕсли НЕ СтрокаТаблицы.ДокументПартииКонтрагент = СтруктураШапкиДокумента.ПоставщикТоваров Тогда	
			СтрокаСообщения = " реквизит ""Документ партии"" не соответствует реквизиту ""Поставщик товаров""!";
			
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
										
		Если СтрокаТаблицы.ДокументПартииВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			// ГТД принятые в переработку не обрабатывает
			СтрокаСообщения = " реквизит ""Документ партии"" является поступлением в переработку. ГТД оформляется только для купленных товаров !";
			
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
	НалоговыйУчет.ПроверитьЗаполнениеНалоговыхНазначений(
					СтруктураШапкиДокумента, 
					ТаблицаПоОборудованию, 
					ИмяТабличнойЧасти,
					Отказ, 
					Заголовок, 
					"Поступление", // ВидОперации
					Ложь           // ЭтоЗатраты 
	);	

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаПошлины");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаАкциза");
		Если Не СтруктураШапкиДокумента.ОформленНалоговыйВексельПоНДС Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ОформленНалоговыйВексельПоНДС Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаВексель");	
		КонецЕсли;
		
		ПоставщикКомитент = (СтруктураШапкиДокумента.ДоговорПоставщикаТоваров.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		Если ПоставщикКомитент Тогда
			СтруктураОбязательныхПолей.Вставить("СчетЗатрат");
			СтруктураОбязательныхПолей.Вставить("ПодразделениеОрганизации");
		КонецЕсли;
			
			Если ВключаетсяВУточняющийРасчет Тогда
				СтруктураОбязательныхПолей.Вставить("УточняемыйПериод");
			КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры // Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,
	                             |ВалютаДокумента, КурсДокумента, КратностьДокумента, 
								 |Контрагент, ДоговорКонтрагента, ПоставщикТоваров, ДоговорПоставщикаТоваров,
	                             |КурсВзаиморасчетов, КратностьВзаиморасчетов");

								 
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	// Договор с таможней должен иметь вид "Прочее", в валюте регламентированного учета
	// и ведение взаиморасчетов "по договору в целом".
	Если СтруктураШапкиДокумента.ВидДоговораКонтрагента<> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Договор с таможней должен иметь вид ""Прочее"".", Отказ, Заголовок);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Договор с таможней должен быть в валюте регламентированного учета ("+ мВалютаРегламентированногоУчета +") .", Отказ, Заголовок);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для договора с таможней ведение взаиморасчетов должно быть ""По договору в целом"".", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ОбработатьТабличнуюЧастьРазделы(СтруктураШапкиДокумента)
	// Для проведения по взаиморасчетам посчитаем долг таможне (в регламентированной валюте).
	СуммаВзаиморасчетов    = ТаможенныйСбор;
	Для каждого СтрокаТабличнойЧасти Из Разделы Цикл
			СуммаВзаиморасчетов = СуммаВзаиморасчетов + СтрокаТабличнойЧасти.СуммаПошлины;
			СуммаВзаиморасчетов = СуммаВзаиморасчетов + СтрокаТабличнойЧасти.СуммаАкциза;
	
		Если НЕ СтруктураШапкиДокумента.ОформленНалоговыйВексельПоНДС Тогда
			СуммаВзаиморасчетов = СуммаВзаиморасчетов + СтрокаТабличнойЧасти.СуммаНДС;
		КонецЕсли;
	КонецЦикла;

	СтруктураШапкиДокумента.Вставить("СуммаВзаиморасчетов",    СуммаВзаиморасчетов);

КонецПроцедуры //ОбработатьТабличнуюЧастьРазделы()

Процедура РаспределитьСуммыИзШапки(ТаблицаПоТоварам,ТаблицаПоОборудованию,СтруктураШапкиДокумента)
	
	// Распределим таможенный сбор по товарам и оборудованию
	ТаблицаПоТоварам.Колонки.Добавить("ТаможенныйСбор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоТоварам.Колонки.Добавить("ТаможеннаяСтоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаПоОборудованию.Колонки.Добавить("ТаможенныйСбор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоОборудованию.Колонки.Добавить("ТаможеннаяСтоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	
	СтрокаМаксимальнойСуммы = Неопределено; // На эту строку будем относить остаток после распределения (ошибки округления)
	МаксимальнаяСумма        = 0; // Значение максимальной суммы.
	ВсегоСтоимость = ТаблицаПоТоварам.Итог("ФактурнаяСтоимость") + ТаблицаПоОборудованию.Итог("ФактурнаяСтоимость");
	
	НепогашенныйТаможенныйСбор = ТаможенныйСбор;
	
	ВсегоТаможеннаяСтоимость	= Разделы.Итог("ТаможеннаяСтоимость");
	НепогашеннаяТаможеннаяСтоимость = ВсегоТаможеннаяСтоимость;
	
	МассивСтрок = Новый Массив;
	// занесём все строки в один массив, чтобы работать с ними единообразно
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ТаблицаПоОборудованию Цикл
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
        ДельтаСбор = ТаможенныйСбор * СтрокаТаблицы.ФактурнаяСтоимость / ВсегоСтоимость;
		
		// Если Дельта по модулю оказалась больше, чем осталось погасить
		Если ДельтаСбор < 0 Тогда
			ДельтаСбор = Макс(НепогашенныйТаможенныйСбор, ДельтаСбор)
		Иначе
			ДельтаСбор = Мин(НепогашенныйТаможенныйСбор, ДельтаСбор)
		КонецЕсли; 
		
        ДельтаТаможеннаяСтоимость = ВсегоТаможеннаяСтоимость * СтрокаТаблицы.ФактурнаяСтоимость / ВсегоСтоимость;
		
		// Если Дельта по модулю оказалась больше, чем осталось погасить
		Если ДельтаТаможеннаяСтоимость < 0 Тогда
			ДельтаТаможеннаяСтоимость = Макс(НепогашеннаяТаможеннаяСтоимость, ДельтаТаможеннаяСтоимость)
		Иначе
			ДельтаТаможеннаяСтоимость = Мин(НепогашеннаяТаможеннаяСтоимость, ДельтаТаможеннаяСтоимость)
		КонецЕсли;
		
		// Проверим текущую сумму на максимум.
		Если СтрокаТаблицы.ФактурнаяСтоимость > МаксимальнаяСумма  Тогда
			МаксимальнаяСумма       = СтрокаТаблицы.ФактурнаяСтоимость;
			СтрокаМаксимальнойСуммы = СтрокаТаблицы;
		КонецЕсли;

		// Заполняем значения.
		СтрокаТаблицы.ТаможенныйСбор		= ДельтаСбор;
		СтрокаТаблицы.ТаможеннаяСтоимость 	= ДельтаТаможеннаяСтоимость;
		
		// Остаток нераспределенной суммы надо уменьшать на реальное изменение
		НепогашенныйТаможенныйСбор 			= НепогашенныйТаможенныйСбор - СтрокаТаблицы.ТаможенныйСбор;
		НепогашеннаяТаможеннаяСтоимость		= НепогашеннаяТаможеннаяСтоимость - СтрокаТаблицы.ТаможеннаяСтоимость;
		
    КонецЦикла;

	// Если что-то осталось, кидаем на строку с максимальной суммой.
	Если НепогашенныйТаможенныйСбор > 0
	   И СтрокаМаксимальнойСуммы <> Неопределено Тогда

		СтрокаМаксимальнойСуммы.ТаможенныйСбор = СтрокаМаксимальнойСуммы.ТаможенныйСбор + НепогашенныйТаможенныйСбор;
	КонецЕсли;
	
	// Если что-то осталось, кидаем на строку с максимальной суммой.
	Если НепогашеннаяТаможеннаяСтоимость > 0
	   И СтрокаМаксимальнойСуммы <> Неопределено Тогда

		СтрокаМаксимальнойСуммы.ТаможеннаяСтоимость = СтрокаМаксимальнойСуммы.ТаможеннаяСтоимость + НепогашеннаяТаможеннаяСтоимость;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТаблицуТоваров(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("ФактурнаяСтоимость"), "Сумма");
	
	ТаблицаТоваров.Колонки.Добавить("Качество");
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("Стоимость",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Недостающие поля.
	ТаблицаТоваров.Колонки.Добавить("СтатусПартии");
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
			СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Пошлина + СтрокаТаблицы.Акциз + СтрокаТаблицы.ТаможенныйСбор + ?(СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий, 0, СтрокаТаблицы.НДС)
											 , мВалютаРегламентированногоУчета,
											 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
											 1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
											 1,СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		Если СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = Ложь Тогда
			СтрокаТаблицы.Заказ = Неопределено;
		КонецЕсли;
		// ГТД по комиссии и по переработке не делаются, только купленный
		СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный; 

		// Обрабатываем значения склада
		Если ТипЗнч(СтрокаТаблицы.Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			СтрокаТаблицы.Склад = СтрокаТаблицы.СкладОрдера;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.СкладНТТ) Тогда
			СтрокаТаблицы.Склад = СтрокаТаблицы.СкладНТТ;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)
	ТаблицаТоваров.Колонки.Добавить("ПроводкаФактурнаяСтоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СчетУчетаНУ");
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"        	 		 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("БазаНДС"        	 		 	 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДС" 	 		 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСКредит"       	 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДССебестоимость"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДС"  			 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	// для товаров комитента
	ТаблицаТоваров.Колонки.Добавить("НоменклатурнаяГруппа");
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьНУ"                 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаТоваров.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));

	ВидДеятельностиНДСНеоблагаемый 		= Перечисления.ВидыДеятельностиНДС.Необлагаемая;
	ВидДеятельностиНДСПропорциональный 	= Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая;
	НалоговоеНазначениеНДС_НеоблагаемаяНеХозДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;
	
	НеОблагаемыйВНД = Справочники.ВидыНалоговойДеятельности.НеОблагаемая;
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтавкаНДС      = Разделы[СтрокаТаблицы.НомерРаздела - 1].СтавкаНДС;
		
		СтрокаТаблицы.СтавкаНДС = СтавкаНДС;
		СтрокаТаблицы.СуммаСНДСРегл			= СтрокаТаблицы.Пошлина + СтрокаТаблицы.Акциз 
												+ СтрокаТаблицы.ТаможенныйСбор + СтрокаТаблицы.НДС;
		СтрокаТаблицы.БазаНДС				= СтрокаТаблицы.Пошлина + СтрокаТаблицы.Акциз 
												+ СтрокаТаблицы.ТаможеннаяСтоимость;
		СтрокаТаблицы.ПроводкиСуммаСНДС 		= СтрокаТаблицы.СуммаСНДСРегл;
		
		ПогрешностиОкругления     = Новый Соответствие;

		Если СтрокаТаблицы.ВидДеятельностиНДС = ВидДеятельностиНДСНеоблагаемый Тогда
			// нет налогового кредита
			СтрокаТаблицы.ПроводкиСуммаНДСКредит = 0;
		ИначеЕсли СтрокаТаблицы.ВидДеятельностиНДС = ВидДеятельностиНДСПропорциональный Тогда
			Если СтруктураШапкиДокумента.СуммаНДСПропорциональноВсего = 0 Тогда
				СтрокаТаблицы.ПроводкиСуммаНДСКредит = 0;
			Иначе	
				СтрокаТаблицы.ПроводкиСуммаНДСКредит = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(СтрокаТаблицы.НДС * (СтруктураШапкиДокумента.СуммаНДСПропорциональноКредит / СтруктураШапкиДокумента.СуммаНДСПропорциональноВсего), 2, , ПогрешностиОкругления, "СуммаНДСПропорциональноВал");
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ПроводкиСуммаНДСКредит = СтрокаТаблицы.НДС;
		КонецЕсли;

		СтрокаТаблицы.ПроводкиСуммаНДССебестоимость = СтрокаТаблицы.НДС - СтрокаТаблицы.ПроводкиСуммаНДСКредит;
		
		СтрокаТаблицы.СуммаНДСРегл = СтрокаТаблицы.НДС;
		СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.ПроводкиСуммаНДСКредит;
		
		СтрокаТаблицы.ПроводкиСуммаБезНДС 	= СтрокаТаблицы.ПроводкиСуммаСНДС - СтрокаТаблицы.ПроводкиСуммаНДСКредит;
		СтрокаТаблицы.ПроводкиСуммаБезНДСРегл 	= СтрокаТаблицы.ПроводкиСуммаБезНДС;
		
		СтрокаТаблицы.НоменклатурнаяГруппа = СтруктураШапкиДокумента.НоменклатурнаяГруппа;    		
		
		СтрокаТаблицы.Амортизируется = Ложь;
		
		СтрокаТаблицы.СтоимостьНУ = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;

	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()		

Процедура ПодготовитьТаблицуОборудование(ТаблицаОборудование, СтруктураШапкиДокумента)

	ТаблицаОборудование.Колонки.Добавить("Сумма");
	ТаблицаОборудование.ЗагрузитьКолонку(ТаблицаОборудование.ВыгрузитьКолонку("ФактурнаяСтоимость"), "Сумма");

	ТаблицаОборудование.Колонки.Добавить("Качество");
	ТаблицаОборудование.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	ПодготовитьТаблицуОборудованиеУпр(ТаблицаОборудование, СтруктураШапкиДокумента);
	ПодготовитьТаблицуОборудованиеРегл(ТаблицаОборудование, СтруктураШапкиДокумента);
	
КонецПроцедуры // ПодготовитьТаблицуОборудование()

Процедура ПодготовитьТаблицуОборудованиеУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("Стоимость",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));

	// Недостающие поля.
	ТаблицаТоваров.Колонки.Добавить("СтатусПартии");

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Пошлина + СтрокаТаблицы.Акциз + СтрокаТаблицы.ТаможенныйСбор + ?(СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий, 0, СтрокаТаблицы.НДС)
										 , мВалютаРегламентированногоУчета,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
										 1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
										 1,СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// ГТД по комиссии и по переработке не делаются, только купленный
		СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.Оборудование; 

		// Обрабатываем значения склада
		Если ТипЗнч(СтрокаТаблицы.Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			СтрокаТаблицы.Склад = СтрокаТаблицы.СкладОрдера;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуОборудованиеУпр()	

Процедура ПодготовитьТаблицуОборудованиеРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Ставку НДС возьмём из разделов
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");

	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"        	 		 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("БазаНДС"        	 		 	 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДС" 	 		 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСКредит"       	 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДССебестоимость"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДС"  			 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьНУ"                    , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// для товаров комитента
	ТаблицаТоваров.Колонки.Добавить("НоменклатурнаяГруппа");
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// для оборудования колонка Амортизируется = Истина
	ТаблицаТоваров.Колонки.Добавить("Амортизируется", Новый ОписаниеТипов("Булево"));

	ВидДеятельностиНДСНеоблагаемый 		= Перечисления.ВидыДеятельностиНДС.Необлагаемая;
	ВидДеятельностиНДСПропорциональный 	= Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая;
	НалоговоеНазначениеНДС_НеоблагаемаяНеХозДеятельность = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность;

	НеОблагаемыйВНД = Справочники.ВидыНалоговойДеятельности.НеОблагаемая;
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаСНДСРегл			= СтрокаТаблицы.Пошлина + СтрокаТаблицы.Акциз 
												+ СтрокаТаблицы.ТаможенныйСбор + СтрокаТаблицы.НДС;
		СтрокаТаблицы.БазаНДС				= СтрокаТаблицы.Пошлина + СтрокаТаблицы.Акциз 
												 + СтрокаТаблицы.ТаможеннаяСтоимость;
		
		СтрокаТаблицы.ПроводкиСуммаСНДС 	= СтрокаТаблицы.СуммаСНДСРегл;
		// Определим значение НДС в проводках
		// Ставку НДС получим из разделов
		СтрокаТаблицы.СтавкаНДС = Разделы[СтрокаТаблицы.НомерРаздела-1].СтавкаНДС;
		
		ПогрешностиОкругления     = Новый Соответствие;
 
		Если СтрокаТаблицы.ВидДеятельностиНДС = ВидДеятельностиНДСНеоблагаемый Тогда
			// нет налогового кредита
			СтрокаТаблицы.ПроводкиСуммаНДСКредит = 0;
		ИначеЕсли СтрокаТаблицы.ВидДеятельностиНДС = ВидДеятельностиНДСПропорциональный Тогда
			Если СтруктураШапкиДокумента.СуммаНДСПропорциональноВсего = 0 Тогда
				СтрокаТаблицы.ПроводкиСуммаНДСКредит = 0;
			Иначе	
				СтрокаТаблицы.ПроводкиСуммаНДСКредит = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(СтрокаТаблицы.НДС * (СтруктураШапкиДокумента.СуммаНДСПропорциональноКредит / СтруктураШапкиДокумента.СуммаНДСПропорциональноВсего), 2, , ПогрешностиОкругления, "СуммаНДСПропорциональноВал");
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ПроводкиСуммаНДСКредит = СтрокаТаблицы.НДС;
		КонецЕсли;

		СтрокаТаблицы.ПроводкиСуммаНДССебестоимость = СтрокаТаблицы.НДС - СтрокаТаблицы.ПроводкиСуммаНДСКредит;
		
		
		СтрокаТаблицы.СуммаНДСРегл = СтрокаТаблицы.НДС;
		СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.ПроводкиСуммаНДСКредит;
		
		СтрокаТаблицы.ПроводкиСуммаБезНДС 	= СтрокаТаблицы.ПроводкиСуммаСНДС - СтрокаТаблицы.ПроводкиСуммаНДСКредит;
		СтрокаТаблицы.ПроводкиСуммаБезНДСРегл 	= СтрокаТаблицы.ПроводкиСуммаБезНДС;
		
		СтрокаТаблицы.СтоимостьНУ = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
		
		СтрокаТаблицы.Амортизируется = Истина;
		
	КонецЦикла;

	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.НоменклатурнаяГруппа, "НоменклатурнаяГруппа");	
	
КонецПроцедуры // ПодготовитьТаблицуОборудованиеРегл()	

Процедура  ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация,истина);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	
	Если НЕ Отказ Тогда
		СтруктураШапкиДокумента.Вставить("ВестиПартионныйУчетПоСкладамРегл", глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл);		
		СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗРегл"             , УчетнаяПолитикаРегл.СпособОценкиМПЗ);
		
		СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитикаРегл.ЕстьНалогНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитикаРегл.ЕстьНДС);
	КонецЕсли;	

	
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ"             	, "СчетУчетаБУ");
	СтруктураПолей.Вставить("Забалансовый"            	, "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("НалоговоеНазначение"		, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"		, "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"	, "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("СтатьяКнигиПриобретения"	, "СтатьяКнигиПриобретения");
    СтруктураПолей.Вставить("СчетУчетаНДС"             	, "СчетУчетаНДС");

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)

	СтруктураПолей.Вставить("Склад" 					, "ДокументПартии.СкладОрдер");
	СтруктураПолей.Вставить("СкладОрдера" 				, "ДокументПартии.СкладОрдер.Склад");
	СтруктураПолей.Вставить("СкладНТТ" 					, "ДокументПартии.Склад");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"		, "ЗаказПокупателя.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
							"ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиОборудованиеРегл(СтруктураПолей, СтруктураПростыхПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ"             	, "СчетУчетаБУ");
	СтруктураПолей.Вставить("Забалансовый"            	, "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("НалоговоеНазначение"		, "НалоговоеНазначение");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"		, "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"	, "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("СтатьяКнигиПриобретения"	, "СтатьяКнигиПриобретения");
    СтруктураПолей.Вставить("СчетУчетаНДС"             	, "СчетУчетаНДС");

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиОборудованиеУпр(СтруктураПолей)

	СтруктураПолей.Вставить("Склад" 					, "ДокументПартии.СкладОрдер");
	СтруктураПолей.Вставить("СкладОрдера" 				, "ДокументПартии.СкладОрдер.Склад");
	
КонецПроцедуры

Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам"  , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "СпособОценкиМПЗ"  			   , "СпособОценкиМПЗ");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"     , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета" , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВедениеУчетаПоПроектам",    "ВедениеУчетаПоПроектам");

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()	

Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеРегл()

// Формируем движения по регистрам.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ, Заголовок)
	
	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию,  Отказ);
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ)
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами

		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		// Заполним таблицу движений.
		Если СтруктураШапкиДокумента.СуммаВзаиморасчетов <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка                = Неопределено;
			СтрокаДвижений.СуммаВзаиморасчетов   = СтруктураШапкиДокумента.СуммаВзаиморасчетов;
			СтрокаДвижений.СуммаУпр   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;


		// ПО РЕГИСТРУ РасчетыСКонтрагентами
		НаборДвижений = Движения.РасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;
        
			СтрокаДвижений.Сделка                = Неопределено;
			СтрокаДвижений.СуммаВзаиморасчетов   = СтруктураШапкиДокумента.СуммаВзаиморасчетов;
			СтрокаДвижений.СуммаУпр   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			                            СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                            СтруктураШапкиДокумента.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                            СтруктураШапкиДокумента.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;

		Если НЕ (СтруктураШапкиДокумента.ДоговорПоставщикаТоваров.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
			
			// ПО ПАРТИЯМ
			
			УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
				?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
			    СтруктураШапкиДокумента, 
				Отказ, 
				ТаблицаПоТоварам, 
				Неопределено, 
				ТаблицаПоОборудованию, 
				СтруктураШапкиДокумента.ОтражатьВУправленческомУчете,
				ЛОЖЬ);
			
			// ПО РЕГИСТРУ доп.расходов для последующего распределения
			
			НаборДвижений = Движения.ДопРасходыНаПриобретениеТоваров;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			ТабЗатрат = ТаблицаПоТоварам.Скопировать();
			
			// Из таблицы по товарам выделим строки, для которых НЕ заполнен документ оприходования
			Инд=0;
			Пока Инд<ТабЗатрат.Количество() Цикл
				
				Если ЗначениеЗаполнено(ТабЗатрат[Инд].ДокументОприходования) Тогда
					ТабЗатрат.Удалить(Инд);
				Иначе
					Инд=Инд+1;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТабЗатрат.Колонки.Найти("Сумма")<>Неопределено Тогда
				ТабЗатрат.Колонки.Удалить("Сумма");
			КонецЕсли;
			ТабЗатрат.Колонки.Стоимость.Имя = "Сумма";
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабЗатрат, ТаблицаДвижений);
			ТабЗатрат = ТаблицаПоОборудованию.Скопировать();
			
			// Из таблицы по товарам выделим строки, для которых НЕ заполнен документ оприходования
			Инд=0;
			Пока Инд<ТабЗатрат.Количество() Цикл
				
				Если ЗначениеЗаполнено(ТабЗатрат[Инд].ДокументОприходования) Тогда
					ТабЗатрат.Удалить(Инд);
				Иначе
					Инд=Инд+1;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТабЗатрат.Колонки.Найти("Сумма")<>Неопределено Тогда
				ТабЗатрат.Колонки.Удалить("Сумма");
			КонецЕсли;
			ТабЗатрат.Колонки.Стоимость.Имя = "Сумма";
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабЗатрат, ТаблицаДвижений);
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ДопРасходыНаПриобретениеТоваров.ВыполнитьПриход();
			КонецЕсли;
		Иначе
			
			// Отнесем на затраты 
			// Подготовим структуру таблицы для отражения затрат.
			ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
			
			ВалютаРеглУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
			ВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
			КурсВалютыРеглУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРеглУчета, СтруктураШапкиДокумента.Дата);
			КурсВалютыУпрУчета  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета,  СтруктураШапкиДокумента.Дата);
			
			
			Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
				НоваяСтрока = ТаблицаЗатрат.Добавить();
				НоваяСтрока.Сумма                = СтрокаТЧ.Пошлина + СтрокаТЧ.Акциз + СтрокаТЧ.НДС + СтрокаТЧ.ТаможенныйСбор;
				// пересчитаем сумму в валюту упр. учета
				НоваяСтрока.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма, 
										ВалютаРеглУчета, 
				                     	ВалютаУпрУчета,
				                        КурсВалютыРеглУчета.Курс, 
				                        КурсВалютыУпрУчета.Курс,
				                        КурсВалютыРеглУчета.Кратность, 
				                        КурсВалютыУпрУчета.Кратность);
				
				НоваяСтрока.Заказ                = СтрокаТЧ.Заказ;
				НоваяСтрока.СтатьяЗатрат         = СтатьяЗатрат;
				НоваяСтрока.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
				НоваяСтрока.Подразделение        = Подразделение;
			КонецЦикла;
			
			Для каждого СтрокаТЧ Из ТаблицаПоОборудованию Цикл
				НоваяСтрока = ТаблицаЗатрат.Добавить();
				НоваяСтрока.Сумма                = СтрокаТЧ.Пошлина + СтрокаТЧ.Акциз + СтрокаТЧ.НДС + СтрокаТЧ.ТаможенныйСбор;
				// пересчитаем сумму в валюту упр. учета
				НоваяСтрока.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма, 
										ВалютаРеглУчета, 
				                     	ВалютаУпрУчета,
				                        КурсВалютыРеглУчета.Курс, 
				                        КурсВалютыУпрУчета.Курс,
				                        КурсВалютыРеглУчета.Кратность, 
				                        КурсВалютыУпрУчета.Кратность);
				НоваяСтрока.Заказ                = СтрокаТЧ.Заказ;
				НоваяСтрока.СтатьяЗатрат         = СтатьяЗатрат;
				НоваяСтрока.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
				НоваяСтрока.Подразделение        = Подразделение;
			КонецЦикла;
			
			// отразим затраты по УУ
			УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
				СтруктураШапкиДокумента,
				ТаблицаЗатрат,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
			);
			
		КонецЕсли;
		// ПО РЕГИСТРУ Закупки
		НаборДвижений = Движения.Закупки;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Подготовим таблицу товаров для регистра закупки.
		ТаблицаПоТоварамЗакупки = ТаблицаПоТоварам.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамЗакупки.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамЗакупки.Получить(Сч);

			Если СтрокаТаблицы.Стоимость = 0 Тогда
				ТаблицаПоТоварамЗакупки.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоТоварамЗакупки,      ТаблицаДвижений,       Проект, Дата, "Закупки");
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоОборудованию,      ТаблицаДвижений,       Проект, Дата, "Закупки");
			
		Иначе		
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЗакупки, ТаблицаДвижений);
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОборудованию, ТаблицаДвижений);
			
		КонецЕсли;
		

		ТаблицаДвижений.ЗаполнитьЗначения(0,                  "Количество");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, 		  "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, 		  "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,             "ДокументЗакупки");

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.Закупки.ВыполнитьДвижения();
		КонецЕсли;

	КонецЕсли; // ОтражатьВУправленческомУчете

КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ПереименоватьКолонкуТаблицы(ТаблицаЗначений, ИмяКолонки, НовоеИмяКолонки)
	
	// Проверим, есть ли в талице колонка с новым именем
	КолонкаДубль = ТаблицаЗначений.Колонки.Найти(НовоеИмяКолонки);
	Если НЕ КолонкаДубль = Неопределено Тогда
		// есть колонка, уже с новым именем
		ПереименоватьКолонкуТаблицы(ТаблицаЗначений, НовоеИмяКолонки, "_"+НовоеИмяКолонки);
	КонецЕсли;
	ТаблицаЗначений.Колонки[ИмяКолонки].Имя = НовоеИмяКолонки;
КонецПроцедуры // ПереименоватьКолонкуТаблицы()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("","СуммаСНДСРегл");
	
	ТаблицаКопия.Колонки.Добавить("СуммаСНДСВал"		, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ТаблицаКопия Цикл
	
		СтрокаТаблицы.СуммаСНДСВал = СтрокаТаблицы.СуммаСНДСРегл;
	
	КонецЦикла; 
	
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	ТаблицаДвижений.Колонки.Добавить("Контрагент");
	ТаблицаДвижений.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("ВидДоговораКонтрагента");
	ТаблицаДвижений.Колонки.Добавить("СчетОплаты");
	ТаблицаДвижений.Колонки.Добавить("СчетАванса");
	ТаблицаДвижений.Колонки.Добавить("СделкаРегл");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент        , "Контрагент");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговораКонтрагента, "ВидДоговораКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом, "СчетОплаты");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам    , "СчетАванса");
	
	Возврат ТаблицаДвижений;
КонецФункции

// Формирует бухгалтерские и налоговые проводки по регистрам
// 
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДок    = Дата;
	ПроводкиБУ = Движения.Хозрасчетный;
	
	ПоставщикКомитент = (СтруктураШапкиДокумента.ДоговорПоставщикаТоваров.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	Если ПоставщикКомитент Тогда
		
		ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтруктураШапкиДокумента.СчетЗатрат);
	
	КонецЕсли;

	// Проводки по товарам и оборудованию
	МассивСтрок = Новый Массив;
	// занесём все строки в один массив, чтобы работать с ними единообразно
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ТаблицаПоОборудованию Цикл
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл

		// Бухгалтерский учет
		// Пошлина
		Если НЕ СтрокаТаблицы.Пошлина = 0 Тогда
		
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = ДатаДок;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.Пошлина;
			Проводка.Содержание                 = "Таможенная пошлина";
			Проводка.НомерЖурнала               = "";

			Если НЕ ПоставщикКомитент Тогда
				
				Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура"        , СтрокаТаблицы.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады"              , СтрокаТаблицы.Склад);
				Проводка.КоличествоДт               = 0;
				
				Проводка.НалоговоеНазначениеДт		= СтрокаТаблицы.НалоговоеНазначение;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И 
					СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
					СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					
					Проводка.СуммаНУДт = Проводка.Сумма;
					
				КонецЕсли;
				

			Иначе	
				
				// ГТД от комитента - все на затраты
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетЗатрат;
				Если ПроизводственныеРасходы Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения"       , СтруктураШапкиДокумента.ПодразделениеОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппа);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат"        , СтруктураШапкиДокумента.СтатьяЗатрат);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.ЗатратСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.ЗатратСубконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.ЗатратСубконто3);
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.НалоговоеНазначениеДт = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				    Если СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
							СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
						Проводка.СуммаНУДт = Проводка.Сумма;
					КонецЕсли;
				КонецЕсли;
			
			КонецЕсли; 

			Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаПошлины;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1 , СтруктураШапкиДокумента.ПошлинаСубконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2 , СтруктураШапкиДокумента.ПошлинаСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3 , СтруктураШапкиДокумента.ПошлинаСубконто3);
		
		КонецЕсли; 
		
		// Акциз
		Если НЕ СтрокаТаблицы.Акциз = 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = ДатаДок;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.Акциз;
			Проводка.Содержание                 = "Акциз";
			Проводка.НомерЖурнала               = "";
			
			Если НЕ ПоставщикКомитент Тогда

				Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура"        , СтрокаТаблицы.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады"              , СтрокаТаблицы.Склад);
				Проводка.КоличествоДт               = 0;
				
				Проводка.НалоговоеНазначениеДт		= СтрокаТаблицы.НалоговоеНазначение;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И 
					СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
					СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					
					Проводка.СуммаНУДт = Проводка.Сумма;
					
				КонецЕсли;
				

			Иначе	
				
				// ГТД от комитента - все на затраты
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетЗатрат;
				Если ПроизводственныеРасходы Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения"       , СтруктураШапкиДокумента.ПодразделениеОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппа);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат"        , СтруктураШапкиДокумента.СтатьяЗатрат);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.ЗатратСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.ЗатратСубконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.ЗатратСубконто3);
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.НалоговоеНазначениеДт		= СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				    Если СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
							СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
					
						Проводка.СуммаНУДт = Проводка.Сумма;
					КонецЕсли;
				КонецЕсли;
				
			
			КонецЕсли; 

			Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаАкциза;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1 , СтруктураШапкиДокумента.АкцизСубконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2 , СтруктураШапкиДокумента.АкцизСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3 , СтруктураШапкиДокумента.АкцизСубконто3);
			
		КонецЕсли; 
				
		// Таможенный сбор
		Если НЕ СтрокаТаблицы.ТаможенныйСбор = 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = ДатаДок;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ТаможенныйСбор;
			Проводка.Содержание                 = "Таможенный сбор";
			Проводка.НомерЖурнала               = "";

			Если НЕ ПоставщикКомитент Тогда
						
				Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура"        , СтрокаТаблицы.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады"              , СтрокаТаблицы.Склад);
				Проводка.КоличествоДт               = 0;
				
				Проводка.НалоговоеНазначениеДт		= СтрокаТаблицы.НалоговоеНазначение;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И 
					СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
					СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					
					Проводка.СуммаНУДт = Проводка.Сумма;
					
				КонецЕсли;
				
				
			Иначе	
				
				// ГТД от комитента - все на затраты
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетЗатрат;
				Если ПроизводственныеРасходы Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения"       , СтруктураШапкиДокумента.ПодразделениеОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппа);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат"        , СтруктураШапкиДокумента.СтатьяЗатрат);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.ЗатратСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.ЗатратСубконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.ЗатратСубконто3);
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.НалоговоеНазначениеДт		= СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				    Если СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
							СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
					
						Проводка.СуммаНУДт = Проводка.Сумма;
					КонецЕсли;
				КонецЕсли;
			
			КонецЕсли; 
			
			Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
				
		КонецЕсли; 
		
		// НДС (если он идет на себестоимость)
		Если НЕ СтрокаТаблицы.ПроводкиСуммаНДССебестоимость = 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = ДатаДок;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДССебестоимость;
			Если НЕ ПоставщикКомитент Тогда
				Проводка.Содержание                 = "НДС: на себестоимость запасов";
			Иначе
				Проводка.Содержание                 = "НДС: на затраты";
			КонецЕсли;
			Проводка.НомерЖурнала               = "";

			
			Если НЕ ПоставщикКомитент Тогда
				
				Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура"        , СтрокаТаблицы.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады"              , СтрокаТаблицы.Склад);
				Проводка.КоличествоДт               = 0;
				
				Проводка.НалоговоеНазначениеДт		= СтрокаТаблицы.НалоговоеНазначение;
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль И 
					СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
					СтрокаТаблицы.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					
					Проводка.СуммаНУДт = Проводка.Сумма;
					
				КонецЕсли;
				
			Иначе	
				
				// ГТД от комитента - все на затраты
				Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетЗатрат;
				Если ПроизводственныеРасходы Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения"       , СтруктураШапкиДокумента.ПодразделениеОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппа);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат"        , СтруктураШапкиДокумента.СтатьяЗатрат);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.ЗатратСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.ЗатратСубконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.ЗатратСубконто3);
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Проводка.НалоговоеНазначениеДт		= СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат;
				    Если СтруктураШапкиДокумента.НеОтноситьНаЗатратыПоНУ = Ложь И 
							СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
					
						Проводка.СуммаНУДт = Проводка.Сумма;
					КонецЕсли;
				КонецЕсли;
				
			
			КонецЕсли; 
			
			Если СтруктураШапкиДокумента.ОформленНалоговыйВексельПоНДС Тогда
				
				Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаВексель;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1 , СтруктураШапкиДокумента.ВексельСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2 , СтруктураШапкиДокумента.ВексельСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3 , СтруктураШапкиДокумента.ВексельСубконто3);
				
			Иначе
				
				Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			КонецЕсли; 
				
		КонецЕсли; 
		
	КонецЦикла; // Проводки по товарам и оборудованию
	
	// Взаиморасчетам с таможней по пошлине
	ВсегоПошлина = ТаблицаПоТоварам.Итог("Пошлина")+ТаблицаПоОборудованию.Итог("Пошлина");
	Если НЕ ВсегоПошлина = 0 Тогда
	
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период                     = ДатаДок;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма                      = ВсегоПошлина;
		Проводка.Содержание                 = "Таможенная пошлина";
		Проводка.НомерЖурнала               = "";

		Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаПошлины;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.ПошлинаСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.ПошлинаСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.ПошлинаСубконто3);
		
		Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
		
	КонецЕсли;
	
	// Взаиморасчетам с таможней по акцизу
	ВсегоАкциз = ТаблицаПоТоварам.Итог("Акциз") + ТаблицаПоОборудованию.Итог("Акциз");
	Если НЕ ВсегоАкциз = 0 Тогда
		
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период                     = ДатаДок;
		Проводка.Активность                 = Истина;
		Проводка.Организация                = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма                      = ВсегоАкциз;
		Проводка.Содержание                 = "Акциз";
		Проводка.НомерЖурнала               = "";
		
		Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаАкциза;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.АкцизСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.АкцизСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.АкцизСубконто3);
		
		Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
		
	КонецЕсли;
	
	// налоговый кредит по НДС
	ВсегоНДСКредит = ТаблицаПоТоварам.Итог("ПроводкиСуммаНДСКредит") + ТаблицаПоОборудованию.Итог("ПроводкиСуммаНДСКредит");
	Если НЕ ВсегоНДСКредит = 0 Тогда
	

		Если СтруктураШапкиДокумента.ОформленНалоговыйВексельПоНДС Тогда
			
			ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
			ТаблицаКопия.Свернуть("СчетУчетаНДС", "ПроводкиСуммаНДСКредит");
			
			ТаблицаКопияОборудование = ТаблицаПоОборудованию.Скопировать();
			ТаблицаКопияОборудование.Свернуть("СчетУчетаНДС", "ПроводкиСуммаНДСКредит");
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопияОборудование,ТаблицаКопия);
			ТаблицаКопия.Свернуть("СчетУчетаНДС", "ПроводкиСуммаНДСКредит");
			
			Для каждого Строка Из ТаблицаКопия Цикл
			
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период                     = ДатаДок;
				Проводка.Активность                 = Истина;
				Проводка.Организация                = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма                      = Строка.ПроводкиСуммаНДСКредит;
				Проводка.Содержание                 = "НДС: оформлен вексель";
				Проводка.НомерЖурнала               = "";

				Проводка.СчетДт                     = Строка.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.ПоставщикТоваров);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорПоставщикаТоваров);
					
				Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаВексель;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1 , СтруктураШапкиДокумента.ВексельСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2 , СтруктураШапкиДокумента.ВексельСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3 , СтруктураШапкиДокумента.ВексельСубконто3);
			
			КонецЦикла; 
			
		Иначе
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = ДатаДок;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = ВсегоНДСКредит;
			Проводка.Содержание                 = "НДС: налоговый кредит";
			Проводка.НомерЖурнала               = "";

			Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаНДС;
			Если НЕ ПоставщикКомитент Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1 , СтруктураШапкиДокумента.НДССубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2 , СтруктураШапкиДокумента.НДССубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3 , СтруктураШапкиДокумента.НДССубконто3);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.ПоставщикТоваров);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",    СтруктураШапкиДокумента.ДоговорПоставщикаТоваров);
			КонецЕсли;
			
			Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
		
		КонецЕсли; 
		
	КонецЕсли;
	
	СуммаСНДСДокумента = СтруктураШапкиДокумента.СуммаВзаиморасчетов;
	
	// Движения по налоговым взаиморасчетам и зачет аванса
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Заголовок, СуммаСНДСДокумента);
	Если НЕ СтруктураПараметровЗачетАванса = Ложь тогда
		//Объединим таблицы Товары и Оборудование
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
        ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОборудованию, ТаблицаКопия);
		
		ДвиженияДляРегистраРасчетовПоПриобретению = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураШапкиДокумента, ТаблицаКопия);
	 	СтруктураДвижений = Новый Структура("ПроводкиБУ", ПроводкиБУ); 
 		БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоПриобретению, Отказ, Истина);
	КонецЕсли;
	
	Если НЕ ПоставщикКомитент Тогда
		
		// ПО ПАРТИЯМ
		
		УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
			?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
			СтруктураШапкиДокумента, 
			Отказ, 
			ТаблицаПоТоварам, 
			Неопределено, 
			ТаблицаПоОборудованию, 
			ЛОЖЬ,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете);
		
	Иначе
		//отнесем на затраты
		
		// Подготовим структуру таблицы для отражения затрат.
		ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
		
		Для каждого СтрокаТЧ Из МассивСтрок Цикл
			НоваяСтрока = ТаблицаЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			
			НоваяСтрока.СуммаРегл = СтрокаТЧ.ПроводкиСуммаБезНДСРегл;
			НоваяСтрока.СуммаНал  = СтрокаТЧ.СтоимостьНУ;
			НоваяСтрока.Сумма     = 0;
			
			НоваяСтрока.Заказ                    = СтрокаТЧ.Заказ;
			НоваяСтрока.СчетЗатрат               = СтруктураШапкиДокумента.СчетЗатрат;
			НоваяСтрока.СтатьяЗатрат         	 = СтруктураШапкиДокумента.СтатьяЗатрат;
			НоваяСтрока.НоменклатурнаяГруппа     = СтруктураШапкиДокумента.НоменклатурнаяГруппа;
			НоваяСтрока.ПодразделениеОрганизации = СтруктураШапкиДокумента.ПодразделениеОрганизации;
			
			НоваяСтрока.НалоговоеНазначение      = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат; 
			НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = СтруктураШапкиДокумента.НалоговоеНазначениеДоходовИЗатрат; 
			
		КонецЦикла;
		
		// отразим затраты по регл. учету
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
			СтруктураШапкиДокумента,
			ТаблицаЗатрат,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
		);
		
		
	КонецЕсли;
		
	Если ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.ЕстьНДС Тогда
			
		// поскольку ГТД является налговым документом, то пишем сразу в книгу приобретений
		
		// Движения по регистру "Книга приобретений"
		НаборДвижений = Движения.КнигаПриобретений;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СтатьяКнигиПриобретения,СтавкаНДС","БазаНДС,НДС");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		//оборудование
		ТаблицаКопия = ТаблицаПоОборудованию.Скопировать();
		ТаблицаКопия.Свернуть("СтатьяКнигиПриобретения,СтавкаНДС","БазаНДС,НДС");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация		, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорПоставщикаТоваров, "ДоговорКонтрагента");
		
		Если ОформленНалоговыйВексельПоНДС Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДатаВыдачиВекселя, "ДатаВыдачиВекселя");
		КонецЕсли; 
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийКнигаПриобретений.ПервичныйДокумент, "КодОперации");
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			НаборДвижений.ДобавитьДвижение();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамБухгалтерииРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	ПоступлениеТоваров    = (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	ПоступлениеТоваровНТТ = (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ"));

	Если ПоступлениеТоваров
	 ИЛИ ПоступлениеТоваровНТТ Тогда
	
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ПоставщикТоваров   		 = Контрагент;
		ДоговорПоставщикаТоваров = ДоговорКонтрагента;
		// под Контрагентом тут подразумевается таможня
		Контрагент         = Неопределено;
		ДоговорКонтрагента = Неопределено;
		Сделка             = Неопределено;
		// Документ только в регламетировананной валюте
		ВалютаДокумента	   = мВалютаРегламентированногоУчета;
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
		КурсДокумента = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		// Заполним Табличную часть
		Раздел = ДобавитьРаздел();
		ЗаполнитьПоПоступлению(Основание, 1);

		РассчитатьСуммыПошлиныГТДИАкциза(Раздел);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, Отказ=Ложь) Экспорт
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента",     "ВалютаВзаиморасчетов"          	, "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента",     "ВедениеВзаиморасчетов"         	, "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", 	"ВидДоговора"						, "ВидДоговораКонтрагента");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "НеОтноситьНаЗатратыПоНУ" 				 , "НеОтноситьНаЗатратыПоНУ");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента",     "Организация"                   	, "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     	,  "НеВключатьНДСВСтоимостьПартий" , "НеВключатьНДСВСтоимостьПартий");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     	,  "СпособОценкиМПЗ"           	   , "СпособОценкиМПЗ");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");

	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли;
	Перем ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Получим необходимые данные для проверки и проведения по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерРаздела"                , "НомерРаздела");
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                  , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ФактурнаяСтоимость"          , "ФактурнаяСтоимость");
	СтруктураПолей.Вставить("НДС"                         , "СуммаНДС");
	СтруктураПолей.Вставить("Пошлина"                     , "СуммаПошлины");
	СтруктураПолей.Вставить("Акциз"                   	, "СуммаАкциза");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"  , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"           , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям" , "Номенклатура.ВестиПартионныйУчетПоСериям");

	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                       , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                    , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Заказ"                		, "ЗаказПокупателя");
	СтруктураПолей.Вставить("ДокументОприходования"       , "ДокументПартии");
	СтруктураПолей.Вставить("ДокументПартииВидОперации"   , "ДокументПартии.ВидОперации");
	СтруктураПолей.Вставить("ДокументПартииВидПоступления", "ДокументПартии.ВидПоступления");
	СтруктураПолей.Вставить("ДокументПартииКонтрагент"  , "ДокументПартии.Контрагент");
	СтруктураПолей.Вставить("ДокументПартииДоговор"  	, "ДокументПартии.ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДокументПартииВидДоговора"	, "ДокументПартии.ДоговорКонтрагента.ВидДоговора");
	
    ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;	
	КонецЕсли;	
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,,СтруктураСложныхПолей);
	
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	// Получим необходимые данные для проверки и проведения по табличной части "Оборудование".
	СтруктураПолей = Новый Структура;
	СтруктураПростыхПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерРаздела"              , "НомерРаздела");
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ФактурнаяСтоимость"        , "ФактурнаяСтоимость");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("Пошлина"                   , "СуммаПошлины");
	СтруктураПолей.Вставить("Акциз"                   	, "СуммаАкциза");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям" , "Номенклатура.ВестиПартионныйУчетПоСериям");
	
	СтруктураПолей.Вставить("Услуга"               		, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                		, "Номенклатура.Набор");
	СтруктураПолей.Вставить("ДокументОприходования"		, "ДокументПартии");
	СтруктураПолей.Вставить("ДокументПартииВидОперации" , "ДокументПартии.ВидОперации");
	СтруктураПолей.Вставить("ДокументПартииВидПоступления" , "ДокументПартии.ВидПоступления");
	СтруктураПолей.Вставить("ДокументПартииКонтрагент"  , "ДокументПартии.Контрагент");
	СтруктураПолей.Вставить("ДокументПартииДоговор"  	, "ДокументПартии.ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДокументПартииВидДоговора"	, "ДокументПартии.ДоговорКонтрагента.ВидДоговора");
	
    ДополнитьСтруктуруПолейТабличнойЧастиОборудованиеУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиОборудованиеРегл(СтруктураПолей, СтруктураПростыхПолей);
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;	
	КонецЕсли;	
	
	РезультатЗапросаПоОборудованию = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураПолей, СтруктураПростыхПолей,СтруктураСложныхПолей);
	ТаблицаПоОборудованию = РезультатЗапросаПоОборудованию.Выгрузить();
	
	ОбработатьТабличнуюЧастьРазделы(СтруктураШапкиДокумента);

	РаспределитьСуммыИзШапки(ТаблицаПоТоварам,ТаблицаПоОборудованию,СтруктураШапкиДокумента);

	ПогрешностиОкругления     = Новый Соответствие;

	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(ТаблицаПоТоварам, СтруктураШапкиДокумента);
	ПодготовитьТаблицуОборудование(ТаблицаПоОборудованию, СтруктураШапкиДокумента);
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ОбщегоНазначенияКлиентСервер.ЗаполнитьСчетУчетаНДСВТаблицеДокумента(СтруктураШапкиДокумента, ТаблицаПоОборудованию);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиРазделы(Разделы, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Оборудование", ТаблицаПоОборудованию, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОборудование(ТаблицаПоОборудованию, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ, Заголовок);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоОборудованию", ТаблицаПоТоварам, ТаблицаПоОборудованию));

КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НалоговыйУчет.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокумента(
			"Поступление",
			Дата,
			Организация,
			Товары, 		// ТабличнаяЧастьТовары
			Неопределено,	// ТабличнаяЧастьВозвратнаяТара
			Неопределено,   // ТабличнаяЧастьУслуги
			Оборудование,   // ТабличнаяЧастьОборудование
			Неопределено, 	// ТабличнаяЧастьОбъектыСтроительства
			Неопределено 	// ТабличнаяЧастьБланкиСтрогогоУчета
		);
	КонецЕсли;	


	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;



КонецПроцедуры // ПриЗаписи()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
