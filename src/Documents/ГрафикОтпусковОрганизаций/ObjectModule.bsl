////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет табличную часть документа отпусками по утвержденным отпускам управленческого учета
//
// Параметры
//	ДатаНачала, ДатаОкончания	– даты начала и окончания
//								  просмотра графика отпусков
//
Процедура Автозаполнение(ДатаНачала, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ДатаНачала",				ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",			ДатаОкончания);
	Запрос.УстановитьПараметр("ПустаяДата",				'00010101');
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СобытийныйПланЗанятостиФизлиц.Период КАК ДатаНачала,
	|	СобытийныйПланЗанятостиФизлиц.ДатаОкончания,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо
	|ИЗ
	|	РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&ДатаОкончания,
	|		Организация = &ГоловнаяОрганизация
	|			И Сотрудник.Физлицо В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СобытийныйПланЗанятостиФизлиц.ФизЛицо
	|				ИЗ
	|					РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
	|				ГДЕ
	|					СобытийныйПланЗанятостиФизлиц.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|					И СобытийныйПланЗанятостиФизлиц.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный))) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение = &Организация)
	|			И СобытийныйПланЗанятостиФизлиц.ФизЛицо = РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо
	|ГДЕ
	|	СобытийныйПланЗанятостиФизлиц.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СобытийныйПланЗанятостиФизлиц.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный)
	|	И РаботникиОрганизацииСрезПоследних.Сотрудник ЕСТЬ НЕ NULL ";
	
	РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // Автозаполнение()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт


	Если ИмяМакета = "Диаграмма" тогда
		
		Если НЕ Проведен Тогда
			Предупреждение("Документ можно распечатать только после его проведения!");
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ПланированиеОтпускаОрганизацииРаботники.ДатаОкончания) КАК ДатаКон,
		|	МИНИМУМ(ПланированиеОтпускаОрганизацииРаботники.ДатаНачала) КАК ДатаНач
		|ИЗ
		|	Документ.ГрафикОтпусковОрганизаций.РаботникиОрганизации КАК ПланированиеОтпускаОрганизацииРаботники
		|
		|ГДЕ
		|	ПланированиеОтпускаОрганизацииРаботники.Ссылка = &Ссылка");

		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();	 
		
		Если Выборка.Следующий() Тогда
			Отчет = Отчеты.ДиаграммаГанта.Создать();
			Отчет.ВидОтчета = "График отпусков работников организаций";
			Отчет.Периодичность = 2;
			Отчет.ЗаполнитьНачальныеНастройки();
			Отчет.ДатаНач = ?(НЕ ЗначениеЗаполнено(Выборка.ДатаНач),НачалоГода(РабочаяДата),НачалоМесяца(Выборка.ДатаНач));
			Отчет.ДатаКон = ?(НЕ ЗначениеЗаполнено(Выборка.ДатаКон),КонецГода(РабочаяДата),КонецМесяца(Выборка.ДатаКон));
			Возврат Отчет.Печать(Ссылка);
		Иначе
			Предупреждение("Ошибка исполнения запроса к т.ч.");
			Возврат Неопределено
		КонецЕсли;
		
	КонецЕсли;

КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//	Струткура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("Диаграмма",		"Диаграмма");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикОтпусковОрганизаций.Дата,
	|	ГрафикОтпусковОрганизаций.Организация,
	|	ГрафикОтпусковОрганизаций.Организация КАК ГоловнаяОрганизация,
	|	ГрафикОтпусковОрганизаций.Ссылка
	|ИЗ
	|	Документ.ГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизаций
	|ГДЕ
	|	ГрафикОтпусковОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры:
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);

	// Описание текста запроса:
	// 1. Выборка "ПерваяТаблица": 
	//		Представляет собой вложенный запрос, в котором:  
	//			- в выборке "РаботникиДокумента" выбираются строки документа
	//			- из основной таблицы регистра (выборка "ГрафикОтпусковОрганизации") 
	//			  присоединяются даты движений, непосредственно предшествующих
	//			  датам ДатаОкончания из строк документа
	// 2. Выборка "ГрафикОтпусковОрганизации": 
	//		Из основной таблицы регистра выбираются значения ресурсов на полученные  
	//		в первой выборке даты
	// 3. Выборка "ВтораяТаблица": 
	//		Среди строк документа ищем строки с пересекающимися периодами отпусков 
	//		для одного работника
	//
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
	|	ПерваяТаблица.Сотрудник,
	|	ПерваяТаблица.ДатаНачала,
	|	ПерваяТаблица.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ПерваяТаблица.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА ГрафикОтпусковОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный)
	|				ИЛИ ПерваяТаблица.ДатаЗначения >= ПерваяТаблица.ДатаНачала
	|			ТОГДА ""Нельзя""
	|		ИНАЧЕ ""Можно""
	|	КОНЕЦ КАК ПроверяемоеЗначение,
	|	МИНИМУМ(ВтораяТаблица.НомерСтроки) КАК КонфликтнаяСтрока
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ГрафикОтпусковОрганизации.Период) КАК ДатаЗначения,
	|		РаботникиДокумента.Сотрудник КАК Сотрудник,
	|		РаботникиДокумента.ДатаОкончания КАК ДатаОкончания,
	|		РаботникиДокумента.ДатаНачала КАК ДатаНачала,
	|		РаботникиДокумента.Ссылка КАК Ссылка,
	|		РаботникиДокумента.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.ГрафикОтпусковОрганизаций.РаботникиОрганизации КАК РаботникиДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизации
	|			ПО РаботникиДокумента.ДатаОкончания > ГрафикОтпусковОрганизации.Период
	|				И РаботникиДокумента.Сотрудник = ГрафикОтпусковОрганизации.Сотрудник
	|	ГДЕ
	|		РаботникиДокумента.Ссылка = &ДокументСсылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РаботникиДокумента.Сотрудник,
	|		РаботникиДокумента.ДатаОкончания,
	|		РаботникиДокумента.ДатаНачала,
	|		РаботникиДокумента.Ссылка,
	|		РаботникиДокумента.НомерСтроки) КАК ПерваяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизации
	|		ПО ПерваяТаблица.ДатаЗначения = ГрафикОтпусковОрганизации.Период
	|			И ПерваяТаблица.Сотрудник = ГрафикОтпусковОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ГрафикОтпусковОрганизаций.РаботникиОрганизации КАК ВтораяТаблица
	|		ПО ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка
	|			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
	|			И (ПерваяТаблица.ДатаНачала <= ВтораяТаблица.ДатаНачала
	|					И ВтораяТаблица.ДатаНачала <= ПерваяТаблица.ДатаОкончания
	|				ИЛИ ПерваяТаблица.ДатаНачала <= ВтораяТаблица.ДатаОкончания
	|					И ВтораяТаблица.ДатаОкончания <= ПерваяТаблица.ДатаОкончания
	|				ИЛИ ВтораяТаблица.ДатаНачала <= ПерваяТаблица.ДатаНачала
	|					И ПерваяТаблица.ДатаОкончания <= ВтораяТаблица.ДатаОкончания)
	|			И ПерваяТаблица.Сотрудник = ВтораяТаблица.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ПерваяТаблица.НомерСтроки,
	|	ГрафикОтпусковОрганизации.Состояние,
	|	ПерваяТаблица.ДатаЗначения,
	|	ПерваяТаблица.ДатаНачала,
	|	ПерваяТаблица.ДатаОкончания,
	|	ПерваяТаблица.Сотрудник";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры:
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, для которой составляется график отпусков!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса по работникам, 
//	Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Работники организации"": ";
	
	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаНачала
	НетДатыС = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
	Если НетДатыС Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала отпуска!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаОкончания
	НетДатыПо = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания);
	Если НетДатыПо Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания отпуска!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетСотрудника ИЛИ НетДатыС ИЛИ НетДатыПо Тогда
		Возврат;
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала отпуска не может превышать дату окончания отпуска!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ПроверяемоеЗначение = "Нельзя" Тогда
		СтрокаПродолжениеСообщенияОбОшибке = " на указанный период ранее уже был запланирован другой отпуск!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока <> Null Тогда
		СтрокаПродолжениеСообщенияОбОшибке = " в строке №" + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока + " указан пересекающийся период отпуска!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//	СтруктураПроведенияПоРегистрамСведений	- структура, содержащая имена регистров сведений 
//											  по которым надо проводить документ
//
// Возвращаемое значение:
//	Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	
	СтруктураПроведенияПоРегистрамСведений.Вставить("ГрафикОтпусковОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента					- выборка из результата запроса по шапке документа,
//	СтруктураПроведенияПоРегистрамСведений	- структура, содержащая имена регистров 
//											  сведений по которым надо проводить документ,
//	СтруктураПараметров						- структура параметров проведения,
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации,  
		  СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "ГрафикОтпусковОрганизаций";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

		// отразим начало
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период			= ВыборкаПоРаботникиОрганизации.ДатаНачала;

		// Измерения
		Движение.Сотрудник		= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

		// Ресурсы
		Движение.Состояние		= Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный;
		
		// Реквизиты
		Движение.ДатаОкончания	= КонецДня(ВыборкаПоРаботникиОрганизации.ДатаОкончания);


		// и окончание отпуска
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период			= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток - 1;

		// Измерения
		Движение.Сотрудник		= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.Состояние		= Перечисления.ТипыПериодическихЗадачРаботника.Свободен;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента);
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать();
			
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамСведений);
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ПланированиеОтпуска") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.Проведен и Основание.Решение = Перечисления.СостоянияОбъектов.Утвержден Тогда
			
			Если НЕ ЗначениеЗаполнено(Организация) Тогда
				Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация")
			КонецЕсли;
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			Запрос.УстановитьПараметр("Организация",Организация);
			Запрос.УстановитьПараметр("Регистратор",Основание);
			Запрос.УстановитьПараметр("Дата",Дата);
			Запрос.УстановитьПараметр("ПустаяДата",'00010101');

			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СобытийныйПланЗанятостиФизлиц.Период КАК ДатаНачала,
			|	СобытийныйПланЗанятостиФизлиц.ДатаОкончания,
			|	РаботникиОрганизацииСрезПоследних.Сотрудник,
			|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо
			|ИЗ
			|	РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|		&Дата,
			|		Организация = &ГоловнаяОрганизация
			|			И Сотрудник.Физлицо В
			|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					СобытийныйПланЗанятостиФизлиц.ФизЛицо
			|				ИЗ
			|					РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
			|				ГДЕ
			|					СобытийныйПланЗанятостиФизлиц.Регистратор = &Регистратор)) КАК РаботникиОрганизацииСрезПоследних
			|		ПО РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо = СобытийныйПланЗанятостиФизлиц.ФизЛицо
			|			И (РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение = &Организация)
			|ГДЕ
			|	(НЕ РаботникиОрганизацииСрезПоследних.Сотрудник ЕСТЬ NULL )
			|	И СобытийныйПланЗанятостиФизлиц.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный)
			|	И СобытийныйПланЗанятостиФизлиц.Регистратор = &Регистратор";
			
			РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(РаботникиОрганизации);
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;
