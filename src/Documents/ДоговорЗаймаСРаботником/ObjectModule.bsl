Перем мВалютаРегламентированногоУчета Экспорт;
Перем мИмяВалютыРегламентированногоУчета Экспорт;
Перем мПрежнееОтражатьВУправленческомУчете;
Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ИсторияПогашения" Тогда
		
		ТабДокумент = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("ИсторияПогашенияЗайма");
		
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		СекцияШапка = Макет.ПолучитьОбласть("Шапка");
		СекцияМесяц = Макет.ПолучитьОбласть("Месяц");
		СекцияИтогоПогашено = Макет.ПолучитьОбласть("ИтогоПогашено");
		СекцияПодвал = Макет.ПолучитьОбласть("Подвал");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
	    Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
	    Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("Гривна",глЗначениеПеременной("ВалютаРегламентированногоУчета"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорЗаймаСРаботником.Дата,
		|	ДоговорЗаймаСРаботником.Номер,
		|	ДоговорЗаймаСРаботником.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ДоговорЗаймаСРаботником.ФизЛицо,
		|	ДоговорЗаймаСРаботником.ПроцентЗаПользованиеЗаймом,
		|	ВЫБОР
		|		КОГДА ДоговорЗаймаСРаботником.ВалютаДокумента = &Гривна
		|			ТОГДА ""грн.""
		|		ИНАЧЕ ДоговорЗаймаСРаботником.ВалютаДокумента.Наименование
		|	КОНЕЦ КАК НаименованиеВалюты,
		|	ДоговорЗаймаСРаботником.СуммаЗайма,
		|	ДоговорЗаймаСРаботником.СрокПогашения,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ДоговорЗаймаСРаботником.ФизЛицо.Наименование) КАК Работник
		|ИЗ
		|	Документ.ДоговорЗаймаСРаботником КАК ДоговорЗаймаСРаботником
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ДоговорЗаймаСРаботником.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		СекцияШапка.Параметры.Заполнить(Выборка);
		
		Если  ПорядокПогашенияЗайма = Перечисления.ПорядокПогашенияЗаймаПроцентов.Ежемесячно Тогда
			Порядок = НСтр("ru='ежемесячно';uk='щомісячно'",КодЯзыкаПечать);
		Иначе
			Порядок = НСтр("ru='в конце срока';uk='у кінці строку'",КодЯзыкаПечать);
		КонецЕсли;	
		
		СекцияШапка.Параметры.ОписаниеНачалаПогашения = Порядок + ?(ПорядокПогашенияЗайма = Перечисления.ПорядокПогашенияЗаймаПроцентов.Ежемесячно,НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать) + Формат(НачалоПогашения,"ДФ='ММММ гггг'") + НСтр("ru=' г.';uk=' р.'",КодЯзыкаПечать),"");
		ВалютаУчета = ?(ОтражатьВУправленческомУчете,глЗначениеПеременной("ВалютаУправленческогоУчета"),глЗначениеПеременной("ВалютаРегламентированногоУчета"));
		СекцияШапка.Параметры.ИмяВалютыУчета = ?(ВалютаУчета.Код = "980","гривна",ВалютаУчета.Наименование);
		ТабДокумент.Вывести(СекцияШапка);

		Если ОтражатьВУправленческомУчете Тогда
			ИмяРегистраУчета = "ПогашениеЗаймовРаботниками";
			ИмяФизЛицо = "ФизЛицо";
			ТекстНачислений = 
			"ВЫБРАТЬ
			|	СУММА(УправленческиеНачисления.Результат) КАК Результат,
			|	УправленческиеНачисления.ПериодРегистрации КАК ПериодРегистрации
			|ИЗ
			|	РегистрРасчета.УправленческиеНачисления КАК УправленческиеНачисления
			|ГДЕ
			|	УправленческиеНачисления.ФизЛицо = &ФизЛицо
			|
			|СГРУППИРОВАТЬ ПО
			|	УправленческиеНачисления.ПериодРегистрации";
		Иначе
			ИмяРегистраУчета = "ПогашениеЗаймовРаботникамиОрганизаций";
			ИмяФизЛицо = "Сотрудник.ФизЛицо";
			ТекстНачислений = 
			"ВЫБРАТЬ
			|		Сумма(ОсновныеНачисленияРаботниковОрганизаций.Результат) КАК Результат,
			|		ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации
			|	ИЗ
			|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
			|	ГДЕ
			|		ОсновныеНачисленияРаботниковОрганизаций.Сотрудник.ФизЛицо = &ФизЛицо
			|		И ОсновныеНачисленияРаботниковОрганизаций.Организация = &Организация
			|		И (НЕ ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме)
			|
			|СГРУППИРОВАТЬ ПО
			|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПогашениеЗаймов.Период КАК Период,
		|	ПогашениеЗаймов.ПроцентыПриход КАК ПроцентыПриход,
		|	ПогашениеЗаймов.ПроцентыКонечныйОстаток КАК ПроцентыКонечныйОстаток,
		|	ПогашениеЗаймов.ПроцентыРасход КАК ПроцентыРасход,
		|	ПогашениеЗаймов.ОсновнойДолгРасход КАК ОсновнойДолгРасход,
		|	ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток КАК ОсновнойДолгКонечныйОстаток,
		|	ПогашениеЗаймов.ПроцентыКонечныйОстаток + ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток КАК ОстатокЗайма,
		|	НачисленныеСуммы.Результат КАК Зарплата
		|ИЗ
		|	РегистрНакопления." + ИмяРегистраУчета + ".ОстаткиИОбороты(
		|		,
		|		,
		|		Месяц,
		|		,
		|		ДоговорЗайма = &Ссылка
		|		    И "+ИмяФизЛицо+" = &ФизЛицо) КАК ПогашениеЗаймов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстНачислений + ") КАК НачисленныеСуммы
		|		ПО ПогашениеЗаймов.Период = НачисленныеСуммы.ПериодРегистрации
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(ПроцентыРасход),
		|	СУММА(ОсновнойДолгРасход)
		|ПО
		|	ОБЩИЕ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
				СекцияИтогоПогашено.Параметры.Заполнить(Выборка);
			Иначе
				СекцияМесяц.Параметры.Заполнить(Выборка);
				СекцияПодвал.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(СекцияМесяц);
			КонецЕсли;
		КонецЦикла;
		СекцияИтогоПогашено.Параметры.ДатаОкончания = Формат(ДобавитьМесяц(НачалоПогашения, СрокПогашения),"ДЛФ=DD");
		ТабДокумент.Вывести(СекцияИтогоПогашено);
		ТабДокумент.Вывести(СекцияПодвал);
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Отчет о погашении займа"));
		
	ИначеЕсли ИмяМакета = "Договор"  Тогда
		
		ТабДокумент = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("Договор");
		
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Гривна",глЗначениеПеременной("ВалютаРегламентированногоУчета"));
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
	    Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
		Запрос.УстановитьПараметр("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	    Запрос.УстановитьПараметр("Женский",Перечисления.ПолФизическихЛиц.Женский);
	    Запрос.УстановитьПараметр("Дата",Дата);
	    Запрос.УстановитьПараметр("Адрес",Перечисления.ТипыКонтактнойИнформации.Адрес);
	    Запрос.УстановитьПараметр("АдресЮридический",Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорЗаймаСРаботником.Дата,
		|	ДоговорЗаймаСРаботником.Номер,
		|	ДоговорЗаймаСРаботником.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ДоговорЗаймаСРаботником.ФизЛицо,
		|	ДоговорЗаймаСРаботником.ПроцентЗаПользованиеЗаймом,
		|	ВЫБОР
		|		КОГДА ДоговорЗаймаСРаботником.ВалютаДокумента = &Гривна
		|			ТОГДА ""грн.""
		|		ИНАЧЕ ДоговорЗаймаСРаботником.ВалютаДокумента.Наименование
		|	КОНЕЦ КАК НаименованиеВалюты,
		|	ДоговорЗаймаСРаботником.СуммаЗайма,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ДоговорЗаймаСРаботником.ФизЛицо.Наименование) КАК Работник,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Наименование КАК ДокументВид,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
		|	КонтактнаяИнформация.Представление КАК АдресОрганизации,
		|	ВЫБОР
		|		КОГДА ДоговорЗаймаСРаботником.ФизЛицо.Пол = &Женский
		|			ТОГДА ""ая""
		|		ИНАЧЕ ""ый""
		|	КОНЕЦ КАК Окончание,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя
		|ИЗ
		|	Документ.ДоговорЗаймаСРаботником КАК ДоговорЗаймаСРаботником
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ДоговорЗаймаСРаботником.Организация = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = &Адрес)
		|			И (КонтактнаяИнформация.Вид = &АдресЮридический)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Дата, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛиц
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛиц.ФизЛицо
		|		ПО ДоговорЗаймаСРаботником.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	ДоговорЗаймаСРаботником.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Макет.Параметры.Заполнить(Выборка);
		Макет.Параметры.Дата = Формат(Дата,"ДЛФ=DD");
		Макет.Параметры.ОкончаниеПогашения = Формат(ДобавитьМесяц(НачалоПогашения, СрокПогашения),"ДЛФ=DD");
		Макет.Параметры.РабочаяДата = ОбщегоНазначения.ПолучитьРабочуюДату();
		Если  ПорядокПогашенияЗайма = Перечисления.ПорядокПогашенияЗаймаПроцентов.Ежемесячно Тогда
			Макет.Параметры.ТекстПорядка = НСтр("ru='ежемесячно';uk='щомісячно'",КодЯзыкаПечать);
		Иначе
			Макет.Параметры.ТекстПорядка = НСтр("ru='в конце срока';uk='у кінці строку'",КодЯзыкаПечать);
		КонецЕсли;	
		ТабДокумент.Вывести(Макет);
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Договор займа"));
		
	КонецЕсли;

КонецФункции // Печать

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ИсторияПогашения,Договор","Отчет о погашении займа", "Договор займа");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// ФизЛицо
	Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан работник!", Отказ, Заголовок);
	КонецЕсли;
	Если НЕ ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан работник!", Отказ, Заголовок);
	КонецЕсли;

	Если СрокПогашения = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан срок погашения займа!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачалоПогашения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано начало погашения займа!", Отказ, Заголовок);
	ИначеЕсли НачалоПогашения < НачалоМесяца(Дата) Тогда	
		ОбщегоНазначения.СообщитьОбОшибке("Начало погашения займа не может предшествовать месяцу выдачи займа!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана валюта займа!", Отказ, Заголовок);
	ИначеЕсли КурсДокумента = 0 Тогда 
		ОбщегоНазначения.СообщитьОбОшибке("Не указан курс валюты займа!", Отказ, Заголовок);
	КонецЕсли;
	
    ПроверитьЗаполнениеШапкиРегл(Отказ, Заголовок)
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапкиРегл(Отказ, Заголовок)

	//  Организация
	Если ОтражатьВБухгалтерскомУчете и НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете и ПроцентЗаПользованиеЗаймом > 0 и НЕ ЗначениеЗаполнено(СчетУчетаПроцентовПоЗайму) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан бухгалтерский счет учета процентов по займу!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура формирования движения регистров
//
Процедура ДвиженияРегистров()
	
	ДвиженияРегистровУпр();
	ДвиженияРегистровРегл();
	
КонецПроцедуры // ДвиженияРегистров()

Процедура ДвиженияРегистровУпр()
	
	Если ОтражатьВУправленческомУчете Тогда
		
		Движение = Движения.ПогашениеЗаймовРаботниками.Добавить();

		// Свойства
		Движение.Период			= Дата;
		Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.ФизЛицо		= ФизЛицо;
		Движение.ДоговорЗайма	= Ссылка;
		
		ВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,Дата);
		
		// Ресурсы
		Движение.ОсновнойДолг	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаЗайма,ВалютаДокумента,ВалютаУправленческогоУчета,
																		КурсДокумента,СтруктураКурса.Курс,
																		КратностьДокумента,СтруктураКурса.Кратность);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияРегистровРегл()
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		Движение = Движения.ПогашениеЗаймовРаботникамиОрганизаций.Добавить();

		// Свойства
		Движение.Период			= Дата;
		Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.Сотрудник		= Сотрудник;
		Движение.Организация	= Организация;
		Движение.ДоговорЗайма	= Ссылка;
		
		// Ресурсы
		Движение.ОсновнойДолг	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаЗайма,ВалютаДокумента,мВалютаРегламентированногоУчета,
																		КурсДокумента,1,
																		КратностьДокумента,1);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// удалим движения
	УдалитьДвижения();
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		ДвиженияРегистров()

	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Установим прежнее состояние ОтражатьВУправленческомУчете
	мПрежнееОтражатьВУправленческомУчете = Ссылка.ОтражатьВУправленческомУчете;
	
	мУдалятьДвижения = Не ЭтоНовый();
	
КонецПроцедуры

// удаление движений - документ не удаляеи движения автоматически
Процедура УдалитьДвижения()

	Если НЕ мУдалятьДвижения Тогда
		Возврат;
	КонецЕсли;
	
	Если мПрежнееОтражатьВУправленческомУчете Тогда
		Движения.ПогашениеЗаймовРаботниками.Очистить();
		Движения.ПогашениеЗаймовРаботниками.Записать();
	Иначе
		Движения.ПогашениеЗаймовРаботникамиОрганизаций.Очистить();
		Движения.ПогашениеЗаймовРаботникамиОрганизаций.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// удалим движения
	УдалитьДвижения();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ОБЪЕКТА 

Запрос = Новый Запрос("ВЫБРАТЬ
                      |	Константы.ВалютаРегламентированногоУчета.Ссылка КАК Ссылка,
                      |	Константы.ВалютаРегламентированногоУчета.Наименование КАК Наименование
                      |ИЗ
                      |	Константы КАК Константы");

Выборка = Запрос.Выполнить().Выбрать();
Выборка.Следующий();
мИмяВалютыРегламентированногоУчета = Выборка.Наименование;
мВалютаРегламентированногоУчета = Выборка.Ссылка;