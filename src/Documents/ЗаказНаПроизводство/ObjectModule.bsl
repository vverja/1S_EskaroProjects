Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мИспользоватьПотребностиЗаказовНаПроизводство Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой заказа,
// разработанного методистами (с учетом внесенных корректировок)
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьЗаказа()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаПроизводство_Заказ";
	
	Макет = ПолучитьМакет("Заказ");
	
	// ШАПКА
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаОбъект", Ссылка);
	Запрос.Текст ="ВЫБРАТЬ
	              |	ЗаказНаПроизводство.Номер,
	              |	ЗаказНаПроизводство.Дата,
				  |	ЗаказНаПроизводство.Исполнитель,
	              |	ЗаказНаПроизводство.Организация,
	              |	ЗаказНаПроизводство.Подразделение КАК Подразделение,
	              |	ПРЕДСТАВЛЕНИЕ(ЗаказНаПроизводство.Подразделение) КАК ПредставлениеПодразделения
	              |ИЗ
	              |	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	              |ГДЕ
	              |	ЗаказНаПроизводство.Ссылка = &СсылкаНаОбъект";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Заказ на производство");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подразделение");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	
	// ПРОДУКЦИЯ
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
        ТекстКод = "ЗаказыНаПроизводствоОстатки.Номенклатура.Артикул";
		ТекстКодМатериалы = "ПотребностиЗаказовНаПроизводство.Номенклатура.Артикул";
		Колонка = "Артикул";
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьШапкаТаблицы.Параметры.ТекстКолонкиКод = Колонка;
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("Строка");
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
        ТекстКод = "ЗаказыНаПроизводствоОстатки.Номенклатура.Код";
		ТекстКодМатериалы = "ПотребностиЗаказовНаПроизводство.Номенклатура.Код";
		Колонка = "Код";
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьШапкаТаблицы.Параметры.ТекстКолонкиКод = Колонка;
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("Строка");
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	Иначе
		ВыводитьКоды = Ложь;
		ТекстКод = "NULL";
		ТекстКодМатериалы = "NULL";

		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыБезКода");
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаБезКода");
		ОбластьИтого = Макет.ПолучитьОбласть("ИтогоБезКода");
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыНаПроизводствоОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыНаПроизводствоОстатки.Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	               |	"+ТекстКод+" КАК ТекстКод,
	               |	ВЫРАЗИТЬ(ЗаказыНаПроизводствоОстатки.КоличествоПриход * ЗаказыНаПроизводствоОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ЗаказыНаПроизводствоОстатки.ЕдиницаИзмерения.Коэффициент КАК Число(15,3)) КАК Количество,
	               |	ПРЕДСТАВЛЕНИЕ(ЗаказыНаПроизводствоОстатки.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	               |	ПРЕДСТАВЛЕНИЕ(ЗаказыНаПроизводствоОстатки.ХарактеристикаНоменклатуры) КАК Характеристика,
	               |	NULL КАК Серия,
	               |	ВЫБОР
	               |		КОГДА (НЕ ЗаказыНаПроизводствоОстатки.Номенклатура.Услуга)
	               |			ТОГДА 0
	               |		КОГДА ЗаказыНаПроизводствоОстатки.Номенклатура.Услуга
	               |			ТОГДА 1
				   |	КОНЕЦ КАК УСЛУГА,
				   |	ВЫБОР КОГДА ТЧЗаказа.НомерСтроки ЕСТЬ NULL 
				   |		ТОГДА 9999999 
				   |		ИНАЧЕ ТЧЗаказа.НомерСтроки 
				   |	КОНЕЦ                                КАК НомерСтрокиЗаказа
				   |ИЗ
				   |	РегистрНакопления.ЗаказыНаПроизводство.Обороты(, , , ЗаказНаПроизводство = &СсылкаНаОбъект) КАК ЗаказыНаПроизводствоОстатки
				   |ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, ХарактеристикаНоменклатуры, минимум(НомерСтроки) КАК НомерСтроки
				   |				ИЗ Документ.ЗаказНаПроизводство.Продукция
				   |				ГДЕ Ссылка = &СсылкаНаОбъект
				   |				Сгруппировать по Номенклатура, ХарактеристикаНоменклатуры) КАК ТЧЗаказа
				   |ПО ЗаказыНаПроизводствоОстатки.Номенклатура = ТЧЗаказа.Номенклатура И ЗаказыНаПроизводствоОстатки.ХарактеристикаНоменклатуры = ТЧЗаказа.ХарактеристикаНоменклатуры
	               |ГДЕ 
				   |	ЗаказыНаПроизводствоОстатки.КоличествоПриход <> 0
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтрокиЗаказа,Услуга, Номенклатура";
	ЗапросТовары = Запрос.Выполнить();
	
	ВсегоНаименований = 0;
	РезультатЗапросаПродукция = Запрос.Выполнить();
	Если НЕ РезультатЗапросаПродукция.Пустой() Тогда
	
		Область = Макет.ПолучитьОбласть("ЗаголовокРаздела");
		Область.Параметры.ТекстРаздела = "Продукция (услуги)";
		ТабДокумент.Вывести(Область);
		
		// Вывод шапки таблицы
		ТабДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Вывод строк таблицы
		Индекс = 0;
		Обход = РезультатЗапросаПродукция.Выбрать();
		ВсегоНаименований = Обход.Количество();
		Пока Обход.Следующий() Цикл
		
			Индекс = Индекс + 1;
			ОбластьСтрокаТаблицы.Параметры.НомерСтроки  = Индекс;
			ОбластьСтрокаТаблицы.Параметры.Заполнить(Обход);
			ОбластьСтрокаТаблицы.Параметры.НоменклатураПредстваление = Обход.НоменклатураНаименованиеПолное + ФормированиеПечатныхФорм.ПредставлениеСерий(Обход);
			
			ТабДокумент.Вывести(ОбластьСтрокаТаблицы);
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьИтого);
	КонецЕсли;
		
	// МАТЕРИАЛЫ
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПотребностиЗаказовНаПроизводство.Номенклатура,
		|	ПотребностиЗаказовНаПроизводство.Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
		|	ПРЕДСТАВЛЕНИЕ(ПотребностиЗаказовНаПроизводство.ХарактеристикаНоменклатуры) КАК Характеристика,
		|	NULL КАК Серия,
		|	"+ТекстКодМатериалы+" КАК ТекстКод,
		|	ВЫБОР КОГДА ТЧЗаказа.НомерСтроки ЕСТЬ NULL 
		|		ТОГДА 9999999 
		|		ИНАЧЕ ТЧЗаказа.НомерСтроки 
		|	КОНЕЦ                                КАК НомерСтрокиЗаказа,
		|	ПРЕДСТАВЛЕНИЕ(ПотребностиЗаказовНаПроизводство.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(ПотребностиЗаказовНаПроизводство.КоличествоПриход * ПотребностиЗаказовНаПроизводство.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ПотребностиЗаказовНаПроизводство.ЕдиницаИзмерения.Коэффициент КАК Число(15,3))   КАК Количество
		|ИЗ
		|	РегистрНакопления.ПотребностиЗаказовНаПроизводство.Обороты(, , , ЗаказНаПроизводство = &СсылкаНаОбъект) КАК ПотребностиЗаказовНаПроизводство
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, ХарактеристикаНоменклатуры, минимум(НомерСтроки) КАК НомерСтроки
		|				ИЗ Документ.ЗаказНаПроизводство.Материалы
		|				ГДЕ Ссылка = &СсылкаНаОбъект
		|				Сгруппировать по Номенклатура, ХарактеристикаНоменклатуры) КАК ТЧЗаказа
		|ПО ПотребностиЗаказовНаПроизводство.Номенклатура = ТЧЗаказа.Номенклатура И ПотребностиЗаказовНаПроизводство.ХарактеристикаНоменклатуры = ТЧЗаказа.ХарактеристикаНоменклатуры
		|Упорядочить по НомерСтрокиЗаказа, ПотребностиЗаказовНаПроизводство.Номенклатура";
		
	РезультатЗапросаМат = Запрос.Выполнить();
	Если НЕ РезультатЗапросаМат.Пустой() Тогда
	
		Область = Макет.ПолучитьОбласть("ЗаголовокРаздела");
		Область.Параметры.ТекстРаздела = "Материалы";
		ТабДокумент.Вывести(Область);
		
		ТабДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Вывод строк таблицы
		Обход = РезультатЗапросаМат.Выбрать();
		НомерСтроки = 1;
		Пока Обход.Следующий() Цикл
			ОбластьСтрокаТаблицы.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСтрокаТаблицы.Параметры.Заполнить(Обход);
			ОбластьСтрокаТаблицы.Параметры.НоменклатураПредстваление = Обход.НоменклатураНаименованиеПолное + ФормированиеПечатныхФорм.ПредставлениеСерий(Обход);
			
			ТабДокумент.Вывести(ОбластьСтрокаТаблицы);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьИтого);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований продукции: " + ВсегоНаименований;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ФИОИсполнитель = ОбщегоНазначения.ФамилияИнициалыФизЛица(Шапка.Исполнитель);
	ОбластьМакета.Параметры.ФИОИсполнителя = ФИОИсполнитель;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьЗаказа()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Заказ" тогда
		ТабДокумент = ПечатьЗаказа();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ""), Ссылка);

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Заказ","Заказ на производство");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабличнаяЧасть, ЗаказПокупателя = Неопределено,ЗаполнятьПодразделение=ложь)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Запрос.УстановитьПараметр("СтатусВозвратнаяТара", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ЗаказыПокупателейОстатки.Номенклатура.СтавкаНДС       КАК СтавкаНДС,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	|	ВЫБОР КОГДА ЗаказыПокупателейОстатки.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL ТОГДА
	|		ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаХраненияОстатков
	|	ИНАЧЕ
	|		ЗаказыПокупателейОстатки.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА ЗаказыПокупателейОстатки.ЕдиницаИзмерения.Коэффициент ЕСТЬ NULL ТОГДА
	|		ЕстьNull(ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,1)
	|	ИНАЧЕ
	|		ЗаказыПокупателейОстатки.ЕдиницаИзмерения.Коэффициент 
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказыПокупателейОстатки.СуммаУпрОстаток              КАК Сумма,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток            КАК Заказано,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток            КАК ЗаказаноПоставщику,
	|	ТоварыВРезервеНаСкладах.КоличествоОстаток             КАК Зарезервировано
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ЗаказПокупателя
	|		                И СтатусПартии <> &СтатусВозвратнаяТара И НЕ Номенклатура.Комплект) КАК ЗаказыПокупателейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ЗаказПокупателя
	|		                И ЗаказПоставщику <> &Ссылка
	|		                И ТоварТара = &ТоварТара) КАК ЗаказыПоставщикамОстатки
	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура 
	|		 И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, ДокументРезерва = &ЗаказПокупателя) КАК ТоварыВРезервеНаСкладах
	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ТоварыВРезервеНаСкладах.Номенклатура 
	|		 И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
    масПодразделения = новый Массив;
	Пока Выборка.Следующий() Цикл

		Количество = ?(Выборка.Заказано = NULL, 0, Выборка.Заказано)
				   - ?(Выборка.Зарезервировано = NULL, 0, Выборка.Зарезервировано)
				   - ?(Выборка.ЗаказаноПоставщику = NULL, 0, Выборка.ЗаказаноПоставщику);
		Если Количество > 0 Тогда
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Номенклатура    = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Заказ 			 = Выборка.ЗаказПокупателя;

			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			
			Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура.ЕдиницаХраненияОстатков) Тогда
				СтрокаТабличнойЧасти.Количество = Количество;
			Иначе	
				СтрокаТабличнойЧасти.Количество = Количество * Выборка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
												/ Выборка.Коэффициент;
			КонецЕсли;									
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
			СтрокаТабличнойЧасти.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство;
			Если ЗаполнятьПодразделение Тогда
				ПодразделениеНоменклатуры = ЗаказыНаПроизводствоИПереработку.ПолучитьПодразделениеИзСпецификации(СтрокаТабличнойЧасти.Спецификация,СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
				Если масПодразделения.Найти(ПодразделениеНоменклатуры)=неопределено и ЗначениеЗаполнено(ПодразделениеНоменклатуры) Тогда
					масПодразделения.Добавить(ПодразделениеНоменклатуры)
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	Если ЗаполнятьПодразделение И масПодразделения.Количество()=1 Тогда
		Подразделение = масПодразделения[0];
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамВнутреннийЗаказ(ТабличнаяЧасть, ВнутреннийЗаказ = Неопределено,ЗаполнятьПодразделение=ложь) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Ссылка",    Ссылка);
	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("ВнутреннийЗаказ", ВнутреннийЗаказ);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ТекстЗапросаПоНоменклатуре = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура 
	|   ИЗ  Документ.ВнутреннийЗаказ.Товары
	|   ГДЕ Документ.ВнутреннийЗаказ.Товары.Ссылка = &ВнутреннийЗаказ";

	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
	|	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	ЗаказыОстатки.Номенклатура.СтавкаНДС                           КАК СтавкаНДС,
	|	ЗаказыОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыОстатки.ВнутреннийЗаказ,
	|	ЗаказыОстатки.КоличествоОстаток КАК Заказано,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК ЗаказаноПоставщику,
	|	ТоварыВРезервеНаСкладах.КоличествоОстаток КАК Зарезервировано
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ВнутреннийЗаказ = &ВнутреннийЗаказ
	|                       И СтатусПартии = &СтатусПартии) КАК ЗаказыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ЗаказПокупателя = &ВнутреннийЗаказ
	|                       И ЗаказПоставщику <> &Ссылка
	|                       И ТоварТара = &ТоварТара) КАК ЗаказыПоставщикамОстатки
	|		ПО ЗаказыОстатки.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура 
	|		 И ЗаказыОстатки.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ДокументРезерва = &ВнутреннийЗаказ) КАК ТоварыВРезервеНаСкладах
	|		ПО ЗаказыОстатки.Номенклатура = ТоварыВРезервеНаСкладах.Номенклатура 
	|		 И ЗаказыОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры";

	Выборка = Запрос.Выполнить().Выбрать();
	
	масПодразделения = новый Массив;

	Пока Выборка.Следующий() Цикл

		Количество = ?(Выборка.Заказано           = NULL, 0, Выборка.Заказано)
				   - ?(Выборка.Зарезервировано    = NULL, 0, Выборка.Зарезервировано)
				   - ?(Выборка.ЗаказаноПоставщику = NULL, 0, Выборка.ЗаказаноПоставщику);
		Если Количество > 0 Тогда
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Номенклатура    = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество      = Количество;
			СтрокаТабличнойЧасти.Заказ 			 = Выборка.ВнутреннийЗаказ;
			
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
			СтрокаТабличнойЧасти.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство;
			Если ЗаполнятьПодразделение Тогда
				ПодразделениеНоменклатуры = ЗаказыНаПроизводствоИПереработку.ПолучитьПодразделениеИзСпецификации(СтрокаТабличнойЧасти.Спецификация,СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
				Если масПодразделения.Найти(ПодразделениеНоменклатуры)=неопределено и ЗначениеЗаполнено(ПодразделениеНоменклатуры) Тогда
					масПодразделения.Добавить(ПодразделениеНоменклатуры)
				КонецЕсли;
			КонецЕсли;	

		КонецЕсли;

	КонецЦикла; 
	Если ЗаполнятьПодразделение И масПодразделения.Количество()=1 Тогда
		Подразделение = масПодразделения[0];
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткамВнутреннийЗаказ()

// Процедура заполнить табличную часть продукция на основании заказа на производство
//
Процедура ЗаполнитьПродукциюПоЗаказуНаПроизводство(ПроизвЗаказ) Экспорт

	ДопПараметры = Новый Структура;	

	МассивПолуфабрикаты = Новый Массив;
	МассивПолуфабрикаты.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);
		
	ДопПараметры.Вставить("ВидВоспроизводства",      МассивПолуфабрикаты);
	ДопПараметры.Вставить("ИмяРеквЗаказТабЧасть",    "Заказ");
	ДопПараметры.Вставить("ВернутьРезультатЗапроса", Истина);
		
	РезЗапроса = Неопределено;
	ЗаказыНаПроизводствоИПереработку.ЗаполнитьТабличнуюЧастьПоПотребностямЗаказаНаПроизводство(РезЗапроса, ПроизвЗаказ, ДопПараметры);
		
	// Создаем список значений подразделений.
	СписокПодр = Новый СписокЗначений;
	Обход = РезЗапроса.Выбрать();
	Пока Обход.СледующийПоЗначениюПоля("Подразделение") Цикл
		Если СписокПодр.НайтиПоЗначению(Обход.Подразделение)=неопределено Тогда
			СписокПодр.Добавить(Обход.Подразделение);
		КонецЕсли;
	КонецЦикла;
		
	ВыбрПодр = Неопределено; // Подставляем подразделение из шапки
	Если СписокПодр.Количество() > 1 Тогда
		СписокПодр.Вставить(0, Неопределено, "<Все подразделения>");
		ВыбрПодр = СписокПодр[0].Значение;  // По умолчанию значение - <Все подразделения>
		ВыбрПодр = СписокПодр.ВыбратьЭлемент("Выберите подразделение...", СписокПодр[0]);
		Если ВыбрПодр <> Неопределено Тогда // Пользователь отказался от выбора
			ВыбрПодр = ВыбрПодр.Значение;
		КонецЕсли;
	ИначеЕсли СписокПодр.Количество() = 1	Тогда
		ВыбрПодр = СписокПодр[0].Значение;
	КонецЕсли;
	Если ВыбрПодр <> Неопределено Тогда // Пользователь выбрал конкретное подразделение
		Подразделение = ВыбрПодр;
	КонецЕсли;
	
	Обход = РезЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
		Если ВыбрПодр = Неопределено ИЛИ ВыбрПодр = Обход.Подразделение Тогда
			НоваяСтрока = Продукция.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Обход);
			НоваяСтрока.Количество = Обход.Количество * Обход.КоэффициентХраненияОстатков / Обход.Коэффициент;
			НоваяСтрока.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(НоваяСтрока.Номенклатура, НоваяСтрока.ХарактеристикаНоменклатуры, Дата, Подразделение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПродукциюПоЗаказуНаПроизводство()

// Заполняет табличную часть "Продукция" по остаткам заказа покупателя
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьПродукциюПоЗаказуПокупателю(ЗаказПокупателя) Экспорт

	ЗаполнитьТабличнуюЧастьПоОстаткам(Продукция, ЗаказПокупателя);

КонецПроцедуры // ЗаполнитьПродукциюПоЗаказуПокупателю()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Заполнение документа по упр. основанию
//
Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
		Контрагент        = Основание.Контрагент;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДокументПоОснованиюУпр()

// Заполняет табличную часть при оперативном проведении, когда включены флаги авторазмещения и/или авторезервирования
//
// Параметры:
//  Отказ - отказ от дальнейшего проведения.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведениемУпр(СтруктПараметров) Экспорт
	
	Если НЕ (СтруктПараметров.Авторезервирование ИЛИ СтруктПараметров.Авторазмещение) Тогда
		Возврат;
	КонецЕсли;
	
	МассивКУдалению = Новый Массив;
	
    ЗаказыНаПроизводствоИПереработку.ЗаполнитьТабЧастьМатериалыВозможнымРазмещением(ЭтотОбъект, Материалы, СтруктПараметров, МассивКУдалению);
    
	Для Каждого К Из МассивКУдалению Цикл
		Материалы.Удалить(К);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведениемУпр()

// Процедура заполняет табличную часть "Материалы" по спецификациям выпуска,
// указанным в табличной части на закладке "Продукция.
//
Процедура ЗаполнитьМатериалыПоСпецификации(ТабличнаяЧасть, ИмяТабличнойЧасти) Экспорт
	
	ТаблицаИсходныеКомплектующие = ТабличнаяЧасть.Выгрузить();
	
	Параметры = Новый Структура("ПараметрыВыпуска, КоличествоУровнейРазузлования, ДатаСпецификации");
	
	Для Каждого СтрокаТабличнойЧасти Из Продукция Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатРазузлования = Новый Структура("ИсходныеКомплектующие");
		
		СтруктураИсточник = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, Количество, Спецификация");
		ЗаполнитьЗначенияСвойств(СтруктураИсточник, СтрокаТабличнойЧасти);
		
		ПараметрыВыпуска = Новый Соответствие;
		Для Каждого ПараметрВыпуска из ПараметрыВыпускаПродукции Цикл
			
			Если ПараметрВыпуска.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи Тогда
				ПараметрыВыпуска.Вставить(ПараметрВыпуска.ВидПараметра.Наименование, ПараметрВыпуска.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Параметры.ПараметрыВыпуска = ПараметрыВыпуска;
		Параметры.КоличествоУровнейРазузлования = 1;
		Параметры.ДатаСпецификации = Дата;
		
		МассивОшибок = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(СтруктураИсточник, РезультатРазузлования, Параметры);
		
		Если МассивОшибок.Количество() > 0 Тогда
			
			Для каждого Ошибка из МассивОшибок Цикл
				
				ОбщегоНазначения.Сообщение("Ошибка: " + Ошибка.Причина, Ошибка.СтатусОшибки);
				ОбщегоНазначения.Сообщение(" Спецификация: " + Ошибка.Спецификация);
				ОбщегоНазначения.Сообщение(" Номер строки: " + Ошибка.НомерСтроки);
				ОбщегоНазначения.Сообщение(" Описание ошибки: " + Ошибка.ОписаниеОшибки);
			
			КонецЦикла;
			
		КонецЕсли;
		
		Если РезультатРазузлования.ИсходныеКомплектующие = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИсходныеКомплектующие = РезультатРазузлования.ИсходныеКомплектующие;
		
		ИсходныеКомплектующие.ЗаполнитьЗначения(Подразделение, "Подразделение");
		//заполним подразделение по основной спецификации полуфабрикатов
		Для каждого Строка из ИсходныеКомплектующие цикл
			ПодразделениеНоменклатуры = ЗаказыНаПроизводствоИПереработку.ПолучитьПодразделениеИзСпецификации(Строка.Спецификация,Строка.Номенклатура,Строка.ХарактеристикаНоменклатуры);
			Если ЗначениеЗаполнено(ПодразделениеНоменклатуры) Тогда
				Строка.Подразделение = ПодразделениеНоменклатуры;
			КонецЕсли;
		КонецЦикла;
		
		ИсходныеКомплектующие.Колонки.Добавить("Продукция");
		ИсходныеКомплектующие.Колонки.Добавить("ХарактеристикаПродукции");
		
		ИсходныеКомплектующие.ЗаполнитьЗначения(СтрокаТабличнойЧасти.Номенклатура, "Продукция");
		ИсходныеКомплектующие.ЗаполнитьЗначения(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, "ХарактеристикаПродукции");
		ИсходныеКомплектующие.ЗаполнитьЗначения(СтрокаТабличнойЧасти.Спецификация, "Спецификация");
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ИсходныеКомплектующие, ТаблицаИсходныеКомплектующие);
		
	КонецЦикла;
	
	ТаблицаИсходныеКомплектующие.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ВидВоспроизводства, Спецификация, Подразделение, Продукция, ХарактеристикаПродукции", "Количество");
	
	ТабличнаяЧасть.Загрузить(ТаблицаИсходныеКомплектующие);
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);		
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьМатериалыПоСпецификации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	Возврат РезультатЗапросаПоТоварам.Выгрузить();

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Подразделение");
					
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Проверка корректности заполнения даты запуска и даты исполнения заказа на производство
	Если ДатаЗапуска = Дата('00010101000000') И ДатаИсполнения = Дата('00010101000000') Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаЗапуска>ДатаИсполнения Тогда
		ОбщегоНазначения.Сообщение("Указан неверный период выполнения заказа: дата запуска больше даты исполнения",СтатусСообщения.Внимание);
	КонецЕсли;
	
	//Проверка подразделения
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Подразделение)
		И СтруктураШапкиДокумента.Подразделение.ВидПодразделения <> Перечисления.ВидыПодразделений.ОсновноеПроизводство
		И СтруктураШапкиДокумента.Подразделение.ВидПодразделения <> Перечисления.ВидыПодразделений.ВспомогательноеПроизводство Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("В шапке документа должно быть указано подразделение с видом ""Основное производство"" или ""Вспомогательное производство""!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПродукция(ТаблицаПоПродукции, ТаблицаПоМатериалам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Продукция";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество");

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураОбязательныхПолей, Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Продукция", ТаблицаПоПродукции, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", ТаблицаПоМатериалам, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Материалы", ТаблицаПоМатериалам, Отказ, Заголовок);

	Для Каждого СтрокаТЧ Из ТаблицаПоМатериалам Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Подразделение)
		   И СтрокаТЧ.Подразделение.ВидПодразделения<>Перечисления.ВидыПодразделений.ОсновноеПроизводство
		   И СтрокаТЧ.Подразделение.ВидПодразделения<>Перечисления.ВидыПодразделений.ВспомогательноеПроизводство Тогда
		   
		    ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " табличной части ""Материалы"" должно быть указано подразделение с видом ""Основное производство"" или ""Вспомогательное производство""!", Отказ, Заголовок);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоПродукции, ТаблицаПоМатериалам,
	                          Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции,
							ТаблицаПоМатериалам, Отказ, Заголовок);
							  
КонецПроцедуры // ДвиженияПоРегистрам()

// Формируем движения по упр. регистрам.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоПродукции, ТаблицаПоМатериалам,
	                          Отказ, Заголовок);
	
	// Движения по заказам на производство.
	Если ТаблицаПоПродукции.Количество() > 0 Тогда
		
		НаборДвижений = Движения.ЗаказыНаПроизводство;
			
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоПродукции", ТаблицаПоПродукции);
					
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказНаПроизводство", Ссылка);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",       Подразделение, "ТаблицаПоПродукции");
					
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		// Движение по размещениям заказов.
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			
		// Заполним таблицу движений.
		ТаблицаПоПродукцииДляРазмещения = ТаблицаПоПродукции.Скопировать();
		ТаблицаПоПродукцииДляРазмещения.Колонки.Заказ.Имя = "ЗаказПокупателя";
			
		//удаление движений по размещению услуг
		Сч = 0;
		Пока Сч < ТаблицаПоПродукцииДляРазмещения.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоПродукцииДляРазмещения.Получить(Сч);
			Если СтрокаТаблицы.Номенклатура.Услуга Тогда 
				 ТаблицаПоПродукцииДляРазмещения.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
			
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("Продукция", ТаблицаПоПродукцииДляРазмещения);
						
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		ОбщегоНазначения.УдалитьСтрокиИзТаблицДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя");
			
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику",    Ссылка);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",          Перечисления.ТоварТара.Товар);
	        					
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
	Если ТаблицаПоМатериалам.Количество() > 0 Тогда
		
		ТаблицаПоТоварамРазмещение = ТаблицаПоМатериалам.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
			 или ТипЗнч(СтрокаТаблицы.Размещение) = Тип("СправочникСсылка.Склады") Тогда
				 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		Если ТаблицаПоТоварамРазмещение.Количество() > 0 Тогда
			
			ТаблицаПоТоварамРазмещение.Колонки.Размещение.Имя = "ЗаказПоставщику";
			
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			
			// По регистру РазмещениеЗаказовПокупателей
			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоТоварамРазмещение);
						
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",          Перечисления.ТоварТара.Товар);
						
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
			КонецЕсли;
		
		КонецЕсли;
		
		ТаблицаПоТоварамРезервирование = ТаблицаПоМатериалам.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
			 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
				 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		Если ТаблицаПоТоварамРезервирование.Количество() > 0 Тогда
		
			// Контроль остатков товара
			Если Материалы.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			Если НЕ Отказ Тогда
				
				ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";
					
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоТоварамРезервирование);
							
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", Ссылка);
							
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// ДВИЖЕНИЯ ПО РЕГИСТРУ ПотребностиЗаказовНаПроизводство
		Если мИспользоватьПотребностиЗаказовНаПроизводство И НЕ Отказ Тогда
		
			НаборДвижений = Движения.ПотребностиЗаказовНаПроизводство;
			 
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоМатериалам);
								
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказНаПроизводство", Ссылка);
						
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда

		// Заполнение шапки
		ВремяНапоминания    = Основание.ВремяНапоминания;
		Комментарий         = Основание.Комментарий;
		НапомнитьОСобытии   = Основание.НапомнитьОСобытии;
		Ответственный       = Основание.Ответственный;

		ЗаполнитьДокументПоОснованиюУпр(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ЗаполнитьТабличнуюЧастьПоОстаткам(Продукция, Основание,истина);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ЗаполнитьТабличнуюЧастьПоОстаткамВнутреннийЗаказ(Продукция, Основание,истина);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ОсновнойЗаказНаПроизводство = Основание;
		
		ЗаполнитьПродукциюПоЗаказуНаПроизводство(Основание);
		
		ЗаполнитьМатериалыПоСпецификации(Материалы, "Материалы");
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаТЧ Из Продукция Цикл
		Если СтрокаТЧ.ВидВоспроизводства <> Перечисления.ВидыВоспроизводстваНоменклатуры.Производство Тогда
			СтрокаТЧ.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Продукция);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Материалы);

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Продукция".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
	
	СтруктураПолей.Вставить("ВидВоспроизводства"        , "ВидВоспроизводства");
	СтруктураПолей.Вставить("Заказ"        				, "Заказ");
	СтруктураПолей.Вставить("Спецификация"        		, "Спецификация");
	
	РезультатЗапросаПоПродукции = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей);

	// Подготовим таблицу продукции для проведения.
	ТаблицаПоПродукции = ПодготовитьТаблицуТоваров(РезультатЗапросаПоПродукции, СтруктураШапкиДокумента);
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Материалы".
	СтруктураПолей.Вставить("Подразделение"             , "Подразделение");
	СтруктураПолей.Вставить("Размещение"                , "Размещение");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"       , "Размещение.ВидСклада");
	СтруктураПолей.Вставить("Продукция",                  "Продукция");
	СтруктураПолей.Вставить("ХарактеристикаПродукции",    "ХарактеристикаПродукции");

	РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей);

	// Подготовим таблицу материалов для проведения.
	ТаблицаПоМатериалам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);
	
	// Проверить заполнение табличных частей.
	ПроверитьЗаполнениеТабличнойЧастиПродукция(ТаблицаПоПродукции, ТаблицаПоМатериалам,  СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции,
							ТаблицаПоМатериалам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мИспользоватьПотребностиЗаказовНаПроизводство = глЗначениеПеременной("ИспользоватьПотребностиЗаказовНаПроизводство");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Продукция", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

