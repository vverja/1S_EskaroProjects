Перем мУдалятьДвижения, КодЯзыкаПечать, ЗапросТара;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;
Перем фИзОбработкиЗаполнитьИПровести Экспорт;
// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента Экспорт;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов Экспорт;

// Хранит информацию о сумме без скидки документа.
Перем мСуммаДокументаБезСкидок Экспорт;
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;
Перем мМинимальныеЦены Экспорт;
Перем мСписокФильтров Экспорт;

// Хранит иформацию для веб-приложения
Перем мСуммаВсего Экспорт;
Перем мСуммаВсегоНДС Экспорт;

Перем мУчетнаяПолитика Экспорт;
Перем мРезервироватьПоСериям Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьСчетаЗаказа и из веб-приложения
//
// Параметры:
//  Тип - строка, содержит тип печатаемого документа (счет или заказ)
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьПараметрыПечатиСчетаЗаказа(Тип) Экспорт	
	
	ПараметрыПечати = Новый Структура;
	Позиции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="ВЫБРАТЬ
                  | ЗаказПокупателя.Номер,
                  | ЗаказПокупателя.Дата,
                  | ЗаказПокупателя.ДоговорКонтрагента,
                  | ЗаказПокупателя.ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
                  | ЗаказПокупателя.ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
                  | ЗаказПокупателя.Ответственный.ФизЛицо.Наименование КАК Выписал,
                  | ЗаказПокупателя.Ответственный.ФизЛицо.Наименование КАК ФИОИсполнителя,
                  | ЗаказПокупателя.КонтактноеЛицоКонтрагента.Наименование КАК ФИОЗаказчика,
                  | ЗаказПокупателя.Организация,
                  | ЗаказПокупателя.Контрагент КАК Получатель,
                  | ЗаказПокупателя.Организация КАК Руководители,
                  | ЗаказПокупателя.Организация КАК Поставщик,
                  | ЗаказПокупателя.СуммаДокумента,
                  | ЗаказПокупателя.ВалютаДокумента,
                  | ЗаказПокупателя.УчитыватьНДС,
                  | ЗаказПокупателя.СуммаВключаетНДС,
                  | ЗаказПокупателя.кпкТорговаяТочка КАК ТорговаяТочка
                  |ИЗ
                  | Документ.ЗаказПокупателя КАК ЗаказПокупателя
                  |ГДЕ
                  | ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("ЗаказПокупателя");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	//Смартис Лиманчук начало 27.04.2012
	Запрос.УстановитьПараметр("ОтборПоРазмещению", (Найти(Тип,"ОтборПоРазмещению")>0));
	Запрос.УстановитьПараметр("ТолькоРазмещенные", (Найти(Тип,"ОтборПоРазмещениюИстина")>0));
	Запрос.УстановитьПараметр("ПустоеРазмещение", Неопределено);
	//Смартис Лиманчук окончание 27.04.2012
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ (ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	//Смартис Лиманчук начало 01.06.2012
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Вес * ВложенныйЗапрос.Количество КАК Вес,
	//Смартис Лиманчук окончание 01.06.2012	
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
	|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	NULL Как Серия,
	|	ВложенныйЗапрос.НомерСтроки,
	|	Метка
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.Цена                        КАК Цена,
	|		СУММА(ЗаказПокупателя.Количество)           КАК Количество,
	|		СУММА(ЗаказПокупателя.Сумма     )           КАК Сумма,
	|		СУММА(ЗаказПокупателя.СуммаНДС  )           КАК СуммаНДС,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК Характеристика,
	|		МИНИМУМ(ЗаказПокупателя.НомерСтроки)        КАК НомерСтроки,
	|		0                                           КАК Метка
	|	ИЗ
	|		Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	//Смартис Лиманчук начало 27.04.2012
	|		И ВЫБОР
	|				КОГДА &ОтборПоРазмещению
	|					ТОГДА (ВЫБОР
	|				КОГДА &ТолькоРазмещенные
	|					ТОГДА ЗаказПокупателя.Размещение <> &ПустоеРазмещение
	|				ИНАЧЕ ЗаказПокупателя.Размещение = &ПустоеРазмещение
	|			КОНЕЦ)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	//Смартис Лиманчук окончание 27.04.2012
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.Цена,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|	ЗаказПокупателя.Номенклатура.Код     КАК Код,
	|	ЗаказПокупателя.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателя.Количество,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
	//Смартис Лиманчук начало 01.06.2012
	|	0,
	//Смартис Лиманчук окончание 01.06.2012
	|	ЗаказПокупателя.ПроцентСкидкиНаценки+ЗаказПокупателя.ПроцентАвтоматическихСкидок,
	|	ЗаказПокупателя.Цена,
	|	ЗаказПокупателя.Сумма,
	|	ЗаказПокупателя.СуммаНДС,
	|	NULL,
	|	NULL,
	|	ЗаказПокупателя.НомерСтроки,
	|	1 КАК Метка
	|	
	|ИЗ
	|	Документ.ЗаказПокупателя.Услуги КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки						КАК НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура.Артикул            КАК Артикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,	
	|	Цена,
	|	Сумма
	|ИЗ
	|	Документ.ЗаказПокупателя.ВозвратнаяТара КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	// Выводим шапку накладной

	ПараметрыПечати.Вставить("УчитыватьНДС", Шапка.УчитыватьНДС);
	ПараметрыПечати.Вставить("ВалютаДокумента", Шапка.ВалютаДокумента);
	ПараметрыПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ПараметрыПечати.Вставить("ТорговаяТочка", Шапка.ТорговаяТочка);

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ПараметрыПечати.Вставить("ЕДРПОУОрганизации", УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОПоставщике));
		ПараметрыПечати.Вставить("НазваниеОрганизации", СведенияОПоставщике.ПолноеНаименование);
		ПредставлениеПоставщикаДляПлатПоручения = "";
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк       = СтруктурнаяЕдиница.Банк;
			МФО	 		= Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = СтруктурнаяЕдиница.НомерСчета;
		Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		КонецЕсли;
		ПараметрыПечати.Вставить("БанкОрганизации", Банк);
		ПараметрыПечати.Вставить("МФОБанкаОрганизации", МФО);
		ПараметрыПечати.Вставить("НомерРасчетногоСчетаОрганизации", НомерСчета);
		;
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		ПараметрыПечати.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
	КонецЕсли; 

	Если Тип = "Счет" Тогда
		
		Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда
			ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Список товаров на комиссию по заказу';uk='Список товарів на комісію за замовленням'",КодЯзыкаПечать),КодЯзыкаПечать));
		Иначе	
			ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка,НСтр("ru='Счет на оплату по заказу';uk='Рахунок на оплату за замовленням'",КодЯзыкаПечать),КодЯзыкаПечать));
		КонецЕсли; 
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Заказ покупателя на переработку';uk='Замовлення покупця на переробку'",КодЯзыкаПечать),КодЯзыкаПечать));
		Иначе
			ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Заказ покупателя';uk='Замовлення покупця'",КодЯзыкаПечать),КодЯзыкаПечать));
		КонецЕсли;
	КонецЕсли;
	ПараметрыПечати.Вставить("ТекстПоставщик", ?(Тип = "Счет", НСтр("ru='Поставщик:';uk='Постачальник:'",КодЯзыкаПечать), НСтр("ru='Исполнитель:';uk='Виконавець:'",КодЯзыкаПечать)));
	ПараметрыПечати.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,НомерСчета,КПП,ЮридическийАдрес,Телефоны,"));
	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	   ПараметрыПечати.Вставить("ТекстПокупатель", ?(Тип = "Счет", НСтр("ru='Покупатель:';uk='Покупець:'",КодЯзыкаПечать), НСтр("ru='Заказчик:';uk='Замовник:'",КодЯзыкаПечать)));
	ПараметрыПечати.Вставить("ПредставлениеПолучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));

	ПараметрыПечати.Вставить("ЕстьСкидки", Ложь);
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ПараметрыПечати.ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	ПараметрыПечати.Вставить("ВыводитьКоды", Ложь);
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ПараметрыПечати.ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ПараметрыПечати.ВыводитьКоды = Истина;
		Колонка = "Код";
	КонецЕсли;
	
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", Колонка);
	КонецЕсли;
    Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	//Верескул И.О. 07.08.2013
	ВсегоКоличество=0;
	//Верескул И.О. 07.08.2013
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		
		ПараметрыПозиции = Новый Структура;

		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);
		ПараметрыПозиции.Вставить("НомерСтроки", ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ПараметрыПозиции.Вставить("Артикул", ВыборкаСтрокТовары.Артикул);
			Иначе
				ПараметрыПозиции.Вставить("Артикул", ВыборкаСтрокТовары.Код);
			КонецЕсли;
		КонецЕсли;

		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТовары.ЕдиницаИзмерения);
		//Смартис Лиманчук начало 01.06.2012
		ПараметрыПозиции.Вставить("Вес", ВыборкаСтрокТовары.Вес);
		//Смартис Лиманчук окончание 01.06.2012
		ПараметрыПозиции.Вставить("Цена", ВыборкаСтрокТовары.Цена);		
		ПараметрыПозиции.Вставить("Товар", СокрП(ВыборкаСтрокТовары.НаименованиеПолное) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары));
		
		Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ВыборкаСтрокТовары.Скидка);
		//округлим скидку до двух знаков
		Скидка = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Скидка, 2);
		
		Если ПараметрыПечати.ЕстьСкидки Тогда
			ПараметрыПозиции.Вставить("Скидка", Скидка);
			ПараметрыПозиции.Вставить("СуммаБезСкидки", ВыборкаСтрокТовары.Сумма + Скидка);
		КонецЕсли;

		ПараметрыПозиции.Вставить("Сумма", ВыборкаСтрокТовары.Сумма);
		
		ВсегоКоличество=ВсегоКоличество+ ВыборкаСтрокТовары.Количество;
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;
		
		Позиции.Добавить(ПараметрыПозиции);

	КонецЦикла;
	
	ПараметрыПечати.Вставить("Позиции", Позиции);

	// Вывести Итого
	Если ПараметрыПечати.ЕстьСкидки Тогда
		ПараметрыПечати.Вставить("ВсегоСкидок", ВсегоСкидок);
		ПараметрыПечати.Вставить("ВсегоБезСкидок", ВсегоБезСкидок);
	КонецЕсли;
	//Верескул И.О. 07.08.2013
	ПараметрыПечати.Вставить("ВсегоКоличество", ВсегоКоличество);
	//Верескул И.О.
	
	ПараметрыПечати.Вставить("Всего", ОбщегоНазначения.ФорматСумм(Сумма));
	// Вывести ИтогоНДС
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ПараметрыПечати.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать)));
		ПараметрыПечати.Вставить("ВсегоНДС", ОбщегоНазначения.ФорматСумм(СуммаНДС));
	КонецЕсли;

	// Вывести Сумму прописью
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ПараметрыПечати.Вставить("ИтоговаяСтрока", НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначения.ФорматСумм(ЗапросТара.Итог("Сумма"), Шапка.ВалютаДокумента)) + ".");
	ПараметрыПечати.Вставить("СуммаПрописью", ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать)));
	
	Возврат ПараметрыПечати;

КонецФункции // ПолучитьПараметрыПечатиСчетаЗаказа()               

// Функция создает табличный документ для печати счета и заказа, 
// помещая в него готовые данные, переданные в виде структуры.
//
// Параметры:
//  Тип             - строка, содержит тип печатаемого документа (счет или заказ);
//  ПараметрыПечати - структура с данными для печати.
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция СоздатьТабличныйДокументПечатиСчетаЗаказа(Тип, ПараметрыПечати)
		
		ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

	Макет = ПолучитьОбщийМакет("СчетЗаказ");
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной

	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		Если НЕ ПараметрыПечати.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
   
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ПараметрыПечати.ПредставлениеПолучателя;
	ОбластьМакета.Параметры.РеквизитыПокупателя		= "";
    ОбластьМакета.Параметры.ТорговаяТочка=кпкТорговаяТочка;
	ТабДокумент.Вывести(ОбластьМакета);
	Если Тип = "Счет" Тогда
		// Выводим дополнительно информацию о договоре
		СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
		МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(ПараметрыПечати,СписокДополнительныхПараметров,КодЯзыкаПечать);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");		
		Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		КонецЦикла;		
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодов");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезСкидок");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = ПараметрыПечати.ИмяКолонкиКодов;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
		ОбластьТовар.Параметры.Товар = НСтр("ru='Продукция';uk='Продукція'",КодЯзыкаПечать);
	Иначе
		ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)';uk='Товари (роботи, послуги)'",КодЯзыкаПечать);
	КонецЕсли;
	Суффикс = "";
	Если ПараметрыПечати.УчитыватьНДС Тогда
		Если ПараметрыПечати.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;	
	
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ПараметрыПечати.ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Увеличим ширину колонки Товар на ширину неиспользуемых колонок
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.5;
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 2.125;
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 2.625;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("Строка|Товар");
	Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодов");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезСкидок");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодовИСкидок");
	КонецЕсли;

	Для каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл 

		Если НЕ ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьКодов.Параметры.Заполнить(ПараметрыПозиции);
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ПараметрыПечати.ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Заполнить(ПараметрыПозиции);
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("Итого|Товар");
	Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодов");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезСкидок");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	
	//Верескул И.О. 07.08.2013
	ОбластьДанных.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Присоединить(ОбластьДанных);
	//Верескул И.О.
	Если ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	
	ОбластьСуммы.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Присоединить(ОбластьСуммы);
   
	// Вывести ИтогоНДС
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
		ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьНомера);
		Если ПараметрыПечати.ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ПараметрыПечати.ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ ПараметрыПечати.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ПараметрыПечати.ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьТовар);
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ПараметрыПечати.ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			СуммаВсего = Число(ПараметрыПечати.Всего);
			Если СокрЛП(ПараметрыПечати.ВсегоНДС) <> "" Тогда
				СуммаВсего = СуммаВсего + Число(ПараметрыПечати.ВсегоНДС);
			КонецЕсли; 
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(СуммаВсего);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = ПараметрыПечати.ИмяКолонкиКодов;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Если Не ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		КонецЕсли;
		
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|СуммаТара");
		
		СуммаТара    = 0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ПараметрыПечати.ВыводитьКоды Тогда
				Если ПараметрыПечати.ИмяКолонкиКодов = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Товар);			
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ПараметрыПечати.ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаТара);
		ТабДокумент.Присоединить(ОбластьСуммы);	
		
		// сделаем отступ 
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;
    ЗапросТара=0;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // СоздатьТабличныйДокументПечатиСчетаЗаказа()
	
// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(Тип)

	Возврат СоздатьТабличныйДокументПечатиСчетаЗаказа(Тип, ПолучитьПараметрыПечатиСчетаЗаказа(Тип));
	
КонецФункции 

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами (с учетом внесенных корректировок)
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказаКорректировки(Тип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Ответственный.ФизЛицо.Наименование КАК ФИОИсполнителя,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	КонтактноеЛицоКонтрагента.Наименование КАК ФИОЗаказчика,	
	|	Контрагент КАК Получатель,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА Организация
	|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтруктураАктуальныйЗаказ = УправлениеЗаказами.ПолучитьПоследнийЗаказПокупателяИлиИзменениеЗаказаПокупателя(Ссылка);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";
	ЗапросТовары = Новый ТаблицаЗначений;	
	
	Если СтруктураАктуальныйЗаказ <> Неопределено Тогда
		
		СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("Док");
		
		Запрос = Новый Запрос;
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерТЧ,
		|	Минимум(ВложенныйЗапрос.ПризнакКорректировка) 	КАК ПризнакКорректировка,
		|	Минимум(ВложенныйЗапрос.НомерСтроки) 			КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.НаименованиеПолное,
		|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
		|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
		|	СУММА(ВложенныйЗапрос.Количество)               КАК КоличествоТовара,
		|	ВложенныйЗапрос.ЕдиницаИзмерения			    КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
		|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка,
		|	СУММА(ВложенныйЗапрос.СуммаНДС)                 КАК СуммаНДС,
		|	ВложенныйЗапрос.Цена                            КАК Цена,
		|	СУММА(ВложенныйЗапрос.Сумма)                    КАК Сумма,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры      КАК Характеристика,
		|	NULL                                            КАК Серия
		|ИЗ
		|
		|(
		|ВЫБРАТЬ
		|		Док.Номенклатура                КАК Номенклатура,
		|		ВЫРАЗИТЬ (Док.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
		|		Док.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
		|		Док.Цена                        КАК Цена,
		|		Док.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
		|		Док.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
		|		Док.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
		|		Док.СуммаНДС                    КАК СуммаНДС,
		|" + ?(Шапка.СуммаВключаетНДС,
		"		ВЫБОР 
		|           КОГДА Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ",
		"		ВЫБОР 
		|           КОГДА НЕ Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ") + " КАК Сумма,
		|		Док.Количество                  КАК Количество,
		|		(1)                             КАК НомерТЧ,
		|		(0)                             КАК ПризнакКорректировка,
		|		Док.НомерСтроки 				КАК НомерСтроки
		|	ИЗ
		|		Документ." + СтруктураАктуальныйЗаказ.ИмяЗаказа + ".Товары КАК Док
		|
		|	ГДЕ
		|		Док.Ссылка = &АктуальныйЗаказ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		Док.Номенклатура               КАК Номенклатура,
		|		ВЫРАЗИТЬ (Док.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
		|		Док.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
		|		Док.Цена                       КАК Цена,
		|		Док.ПроцентСкидкиНаценки       КАК ПроцентСкидкиНаценки,
		|		Док.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
		|		Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		Док.СуммаНДС                   КАК СуммаНДС,
		|" + ?(Шапка.СуммаВключаетНДС,
		"		ВЫБОР 
		|           КОГДА Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ",
		"		ВЫБОР 
		|           КОГДА НЕ Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ") + " КАК Сумма,
		|		Док.Количество               КАК Количество,
		|	    (1)                          КАК НомерТЧ,
		|		(1)                          КАК ПризнакКорректировка,
		// Для корректировок номер строки увеличивается, чтобы добавляемые позиции были последними
		|		(9999 + Док.НомерСтроки)	 КАК НомерСтроки
		|	ИЗ
		|		Документ.КорректировкаЗаказаПокупателя.Товары КАК Док
		|
		|	ГДЕ
		|		Док.Ссылка.ЗаказПокупателя = &ТекущийДокумент
		|		И Док.Ссылка.Проведен      = Истина
		|		И Док.Ссылка.Дата > &ДатаАктуальногоЗаказа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		Док.Номенклатура                         КАК Номенклатура,
		|		" + СтрокаВыборкиПоляСодержания + "      КАК НаименованиеПолное,
		|		Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|		Док.Цена                                 КАК Цена,
		|		Док.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
		|		Док.ПроцентАвтоматическихСкидок          КАК ПроцентАвтоматическихСкидок,
		|		NULL                                     КАК ХарактеристикаНоменклатуры,
		|		Док.СуммаНДС                             КАК СуммаНДС,
		|" + ?(Шапка.СуммаВключаетНДС,
		"		ВЫБОР 
		|           КОГДА Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ",
		"		ВЫБОР 
		|           КОГДА НЕ Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ") + "                              КАК Сумма,
		|		Док.Количество                           КАК Количество,
		|		(2)                                      КАК НомерТЧ,
		|		(0)                                      КАК ПризнакКорректировка,
		|		Док.НомерСтроки 						 КАК НомерСтроки
		|	ИЗ
		|		Документ." + СтруктураАктуальныйЗаказ.ИмяЗаказа + ".Услуги КАК Док
		|
		|	ГДЕ
		|		Док.Ссылка = &АктуальныйЗаказ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		Док.Номенклатура                          КАК Номенклатура,
		|" + СтрокаВыборкиПоляСодержания + " КАК НаименованиеПолное,
		|		Док.Номенклатура.ЕдиницаХраненияОстатков  КАК ЕдиницаИзмерения,
		|		Док.Цена                                  КАК Цена,
		|		Док.ПроцентСкидкиНаценки                  КАК ПроцентСкидкиНаценки,
		|		Док.ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
		|		NULL                                      КАК ХарактеристикаНоменклатуры,
		|		Док.СуммаНДС                              КАК СуммаНДС,
		|" + ?(Шапка.СуммаВключаетНДС,
		"		ВЫБОР 
		|           КОГДА Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ",
		"		ВЫБОР 
		|           КОГДА НЕ Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ") + "                               КАК Сумма,
		|		Док.Количество                            КАК Количество,
		|		(2)                                       КАК НомерТЧ,
		|		(1)                                       КАК ПризнакКорректировка,
		// Для корректировок номер строки увеличивается, чтобы добавляемые позиции были последними
		|		(9999 + Док.НомерСтроки)	 			  КАК НомерСтроки
		|	ИЗ
		|		Документ.КорректировкаЗаказаПокупателя.Услуги КАК Док
		|
		|	ГДЕ
		|		Док.Ссылка.ЗаказПокупателя = &ТекущийДокумент
		|		И Док.Ссылка.Проведен      = Истина
		|		И Док.Ссылка.Дата > &ДатаАктуальногоЗаказа
		|";
		
		Если Тип <> "Счет" Тогда
			ТекстЗапроса = ТекстЗапроса +
			" 
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|		Док.Номенклатура                КАК Номенклатура,
			|		ВЫРАЗИТЬ (Док.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
			|		Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|		Док.Цена                        КАК Цена,
			|		0								КАК ПроцентСкидкиНаценки,
			|		0 								КАК ПроцентАвтоматическихСкидок,
			|		NULL 							КАК ХарактеристикаНоменклатуры,
			|		0						        КАК СуммаНДС,
			|		Док.Сумма                       КАК Сумма,
			|		Док.Количество                  КАК Количество,
			|		(3)                             КАК НомерТЧ,
			|		(0)                             КАК ПризнакКорректировка,
			|		Док.НомерСтроки 				КАК НомерСтроки
			|	ИЗ
			|		Документ." + СтруктураАктуальныйЗаказ.ИмяЗаказа + ".ВозвратнаяТара КАК Док
			|
			|	ГДЕ
			|		Док.Ссылка = &АктуальныйЗаказ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|		Док.Номенклатура            КАК Номенклатура,
			|		ВЫРАЗИТЬ (Док.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
			|		Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|		Док.Цена                    КАК Цена,
			|		0							КАК ПроцентСкидкиНаценки,
			|		0							КАК ПроцентАвтоматическихСкидок,
			|		NULL 						КАК ХарактеристикаНоменклатуры,
			|		0							КАК СуммаНДС,
			|		Док.Сумма                   КАК Сумма,
			|		Док.Количество              КАК Количество,
			|	    (3)                         КАК НомерТЧ,
			|		(1)                         КАК ПризнакКорректировка,
			// Для корректировок номер строки увеличивается, чтобы добавляемые позиции были последними
			|		(9999 + Док.НомерСтроки)	КАК НомерСтроки
			|	ИЗ
			|		Документ.КорректировкаЗаказаПокупателя.ВозвратнаяТара КАК Док
			|
			|	ГДЕ
			|		Док.Ссылка.ЗаказПокупателя = &ТекущийДокумент
			|		И Док.Ссылка.Проведен      = Истина
			|		И Док.Ссылка.Дата > &ДатаАктуальногоЗаказа
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса+
		"
		|) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.НомерТЧ,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ПроцентСкидкиНаценки,
		|	ВложенныйЗапрос.ПроцентАвтоматическихСкидок,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.НаименованиеПолное
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.НомерТЧ, ПризнакКорректировка, НомерСтроки
		|";
		
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("АктуальныйЗаказ", СтруктураАктуальныйЗаказ.Заказ);
		Запрос.УстановитьПараметр("ДатаАктуальногоЗаказа", СтруктураАктуальныйЗаказ.ДатаЗаказа);
		Запрос.Текст = ТекстЗапроса;
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
		
	Макет = ПолучитьОбщийМакет("СчетЗаказ");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.НазваниеОрганизации = СведенияОПоставщике.ПолноеНаименование;
		ОбластьМакета.Параметры.ЕДРПОУОрганизации	= УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОПоставщике);
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк       = СтруктурнаяЕдиница.Банк;
			МФО	 	   = Банк.Код;
			//КоррСчет   = Банк.КоррСчет;
			//ГородБанка = Банк.Город;
			НомерСчета = СтруктурнаяЕдиница.НомерСчета;
		Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		КонецЕсли;
		ОбластьМакета.Параметры.БанкОрганизации					= Банк;
		ОбластьМакета.Параметры.МФОБанкаОрганизации	            = МФО;
		ОбластьМакета.Параметры.НомерРасчетногоСчетаОрганизации = НомерСчета;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Счет на оплату';uk='Рахунок на оплату'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Заказ покупателя (на переработку)';uk='Замовлення покупця (на переробку)'",КодЯзыкаПечать),КодЯзыкаПечать);
		Иначе
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка,НСтр("ru='Заказ покупателя';uk='Замовлення покупця'",КодЯзыкаПечать),КодЯзыкаПечать); 
		КонецЕсли;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстПоставщик = НСтр("ru='Поставщик:';uk='Постачальник:'",КодЯзыкаПечать);
	Иначе
		ОбластьМакета.Параметры.ТекстПоставщик = НСтр("ru='Исполнитель:';uk='Виконавець:'",КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата,,,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстПокупатель = НСтр("ru='Покупатель:';uk='Покупець:'",КодЯзыкаПечать);
	Иначе
		ОбластьМакета.Параметры.ТекстПокупатель = НСтр("ru='Заказчик:';uk='Замовник:'",КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	Если Не ВыводитьКоды И ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодов");
	ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезСкидок");
	ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;	
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
		ОбластьТовар.Параметры.Товар = НСтр("ru='Продукция';uk='Продукція'",КодЯзыкаПечать);
	Иначе
		ОбластьТовар.Параметры.Товар = НСтр("ru='Товар';uk='Товар'",КодЯзыкаПечать);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("Строка|Товар");
	Если Не ВыводитьКоды И ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодов");
	ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезСкидок");
	ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодовИСкидок");
	КонецЕсли;

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	НумераторСтрок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ВыборкаСтрокТовары.КоличествоТовара = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		НумераторСтрок = НумераторСтрок + 1;
		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Товар = СокрП(ВыборкаСтрокТовары.НаименованиеПолное) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
																+ ?(ВыборкаСтрокТовары.НомерТЧ = 3, " (возвратная тара)", "");
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Количество = ВыборкаСтрокТовары.КоличествоТовара;
		ТабДокумент.Присоединить(ОбластьДанных);

		Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ВыборкаСтрокТовары.Скидка);
		
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("Итого|Товар");
	Если Не ВыводитьКоды И ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодов");
	ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезСкидок");
	ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС И ЗапросТовары.Количество()>0 Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если Не ВыводитьКоды И ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
		ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Если Тип = "Счет" Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ВсегоКОплате|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ВсегоКОплате|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ВсегоКОплате|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ВсегоКОплате|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ВсегоКОплате|Сумма");

			ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|Товар");
			Если Не ВыводитьКоды И ЕстьСкидки Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|ТоварБезКодов");
			ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|ТоварБезСкидок");
			ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|ТоварБезКодовИСкидок");
			КонецЕсли;

			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьТовар);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.ВсегоКОплате = ОбщегоНазначения.ФорматСумм(Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС));
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		Если НЕ ЗначениеЗаполнено(Ответственный.ФизЛицо) Тогда
			ФИООтветственный = Ответственный.Наименование;
		Иначе
			ФамилияИмяОтчествоФизЛица      	 = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Ответственный.ФизЛицо, Шапка.Дата);
			ФамилияИмяОтчествоОтветственного = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
			ФИООтветственный         		 = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтветственного);
		КонецЕсли;
		ОбластьМакета.Параметры.Выписал = ФИООтветственный;

	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказаКорректировки()

// Функция формирует табличный документ с печатной формой перечня давальческого
// сырья и материалов заказа с видом операции (на переработку)
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьПеречняМатериалов(Тип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Ответственный.ФизЛицо.Наименование КАК ФИОИсполнителя,
	|	КонтактноеЛицоКонтрагента.Наименование КАК ФИОЗаказчика,	
	|	Контрагент КАК Получатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_ПереченьМатериалов";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ (ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.Характеристика,
	|	NULL Как Серия,
	|	НомерСтроки,
	|	Метка
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.Цена                        КАК Цена,
	|		СУММА(ЗаказПокупателя.Количество)           КАК Количество,
	|		СУММА(ЗаказПокупателя.Сумма     )           КАК Сумма,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК Характеристика,
	|		МИНИМУМ(НомерСтроки)                        КАК НомерСтроки,
	|		0                                           КАК Метка
	|	ИЗ
	|		Документ.ЗаказПокупателя.Материалы КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.Цена,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	Макет = ПолучитьОбщийМакет("СчетЗаказ");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Перечень материалов по заказу покупателя (на переработку)';uk='Перелік матеріалів за замовленням покупця (на переробку)'",КодЯзыкаПечать) + Символы.ПС, КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ТекстПоставщик = НСтр("ru='Исполнитель:';uk='Виконавець:'",КодЯзыкаПечать);	                                         
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата,,,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ТекстПокупатель = НСтр("ru='Заказчик:';uk='Замовник:'",КодЯзыкаПечать);
 	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,"Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ТабДокумент.Присоединить(ОбластьТовар); 
	
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;	
	
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Товар = СокрП(ВыборкаСтрокТовары.НаименованиеПолное) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		ТабДокумент.Присоединить(ОбластьДанных);

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("Итого|Товар");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма;
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПеречняМатериалов()

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, , , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;


	// Получить экземпляр документа на печать
	Если ИмяМакета = "Заказ" Тогда
		ТабДокумент = ПечатьСчетаЗаказа(ИмяМакета);
	ИначеЕсли ИмяМакета = "ЗаказКорректировка" тогда
		ТабДокумент = ПечатьСчетаЗаказаКорректировки(ИмяМакета);
	ИначеЕсли ИмяМакета = "Счет" тогда
		ТабДокумент = ПечатьСчетаЗаказаКорректировки(ИмяМакета);
	ИначеЕсли ИмяМакета = "Бланк" Тогда
		ТабДокумент = ПечатьБланк(НаПринтер);
	ИначеЕсли ИмяМакета = "ПереченьМатериалов" тогда
		
		Если НЕ(Материалы.Количество() > 0) Тогда
			Сообщить("Нет материалов в переработку!");
			Возврат;
		КонецЕсли;
		
		ТабДокумент = ПечатьПеречняМатериалов(ИмяМакета);
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураПечатныхФорм = Новый Структура("Заказ,ЗаказКорректировка,Счет,Бланк",
	                                        "Заказ покупателя",
	                                        "Заказ покупателя (с учетом корректировок)",
	                                        "Счет на оплату (с учетом корректировок)",
	                                        "Бланк товарного наполнения");

	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
		СтруктураПечатныхФорм.Вставить("ПереченьМатериалов", "Перечень материалов для переработки");
	КонецЕсли;

	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет материалы по спецификациям.
//
Процедура ЗаполнитьМатериалыПоСпецификации() Экспорт
	
	Если Материалы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть ""Материалы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		Материалы.Очистить();
	КонецЕсли;

	ТабличнаяЧастьМатериалы = Материалы.Выгрузить();
	ТабличнаяЧастьПродукция = Товары.Выгрузить();
	
	СтруктураДопКолонок = Новый Структура();
	//Смартис Лиманчук начало 17.01.2013
	//МассивВидовВоспроизводства = Новый Массив;
	//МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.ПринятыеВПереработку);
	//Отбор = Новый Структура("ВидВоспроизводства", МассивВидовВоспроизводства);
	Отбор = Новый Структура("Разузлован", Истина);
	//Смартис Лиманчук окончание 17.01.2013

	УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата, 0, ПараметрыВыпускаПродукции);

	ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент", "Количество");
	
	Материалы.Загрузить(ТабличнаяЧастьМатериалы);
		
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
		
	КонецЦикла;
	
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Заполняет табличную часть при оперативном проведении, когда включены флаги авторазмещения и/или авторезервирования
//
// Параметры:
//  Кнопка - кнопка подменю "Заполнить и провести".
//
Процедура ЗаполнитьТабличныеЧастиПередПроведениемУпр(Параметры) Экспорт

	ОбособленныйУчет = ЗначениеЗаполнено(ДоговорКонтрагента)
	                   И ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;

	Параметры.Вставить("Заказ",ЭтотОбъект);
	Параметры.Вставить("РезервироватьПоСериям",мРезервироватьПоСериям и ОбособленныйУчет);
	Параметры.Вставить("ОбособленныйУчет",ОбособленныйУчет);

 	УправлениеЗаказами.Заказ_ЗаполнитьТабличныеЧастиВозможнымРазмещением(Параметры, Товары, ВозвратнаяТара);

КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведениемУпр()

// Заполнение документа по упр. основанию
//
Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
		КонтактноеЛицоКонтрагента    = Основание.КонтактноеЛицо;
		Контрагент                   = Основание.Контрагент;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДокументПоОснованиюУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартии() 

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();

	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия Тогда

		Статус = Перечисления.СтатусыПартийТоваров.Купленный; 

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда

		Статус = Перечисления.СтатусыПартийТоваров.ВПереработку; 
		
	Иначе    

		Сообщить("По виду операции """ +
		ВидОперации + """ не удалось определить статус партии товаров!", СтатусСообщения.Важное); 
	КонецЕсли; 

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС"
	ТаблицаТоваров.Колонки.Добавить( "СуммаБезНДС",         Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТЧ Из ТаблицаТоваров Цикл
		
		СтрокаТЧ.СуммаБезНДС = СтрокаТЧ.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТЧ.НДС, 0);
		
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));	

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СуммаНДС = СтрокаТаблицы.НДС;
		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СуммаНДС, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                        					    СтруктураШапкиДокумента.КурсДокумента,
		        				                        КурсВзаиморасчетов, 
						                                СтруктураШапкиДокумента.КратностьДокумента,
		                                 				КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
		                           			      	СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                 			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса по табличной части "Услуги",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));	

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента);
	
	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаУслуг.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));	

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СуммаНДС = СтрокаТаблицы.НДС;										 
										 
		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СуммаНДС, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                        					    СтруктураШапкиДокумента.КурсДокумента,
		        				                        КурсВзаиморасчетов, 
						                                СтруктураШапкиДокумента.КратностьДокумента,
		                                 				КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
		                           			      	СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);											
		
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = 0;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                        					    СтруктураШапкиДокумента.КурсДокумента,
		        				                        КурсВзаиморасчетов, 
						                                СтруктураШапкиДокумента.КратностьДокумента,
		                                 				КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента, 
		                           			      	СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                 			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
        		
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("ВидОперации, Организация, ВалютаДокумента, 
					|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");
					
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ можно выписывать только по договору, взаиморасчеты по которому ведутся  по заказам или по договору в целом!", Отказ, Заголовок);
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	ПроверитьВыборТорговойТочки(Отказ);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения упр. реквизитов шапки
//
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять заказ с НТТ!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапкиУпр()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма");
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
		УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

	// Здесь не должно быть размещений по НТТ
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок,"РазмещениеВидСклада");

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма, Содержание");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок,"РазмещениеВидСклада");

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Нельзя резервировать возвратную тару под заказ покупателя с обособленным учетом
	УправлениеЗаказами.ПроверитьРезервированиеТарыПодЗаказСОбособленнымУчетом(ЭтотОбъект,"Ссылка", истина, "Размещение", Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Проверяет правильность заполнения строк табличной части "Материалы".
//
// Параметры: 
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиМатериалы(ТаблицаМатериалы, Отказ, Заголовок)
	
	РеквизитыТабМатериалы = "Номенклатура, Количество";
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТабМатериалы), Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Материалы", ТаблицаМатериалы, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", ТаблицаМатериалы, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Материалы", ТаблицаМатериалы, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиМатериалы()

// Функция удаляет из исходной таблицы строки не требующие размещения
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоКомплектам)

	ТаблицаПоТоварамРазмещение = ТаблицаПоКомплектам.Скопировать();
	
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) = Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРазмещение.Колонки.Размещение.Имя = "ЗаказПоставщику";
	
	Возврат ТаблицаПоТоварамРазмещение;
	
КонецФункции // СоздатьТаблицуРазмещенияЗаказов()

// Функция удаляет из исходной таблицы строки не требующие резервирования
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоКомплектам)

	ТаблицаПоТоварамРезервирование = ТаблицаПоКомплектам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";
	
	Возврат ТаблицаПоТоварамРезервирование;
	
КонецФункции // СоздатьТаблицуРезервированияПодЗаказ()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, ЭтотОбъект);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоУслугам, 
							ТаблицаПоТаре, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
		
		ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектам, ТаблицаПоУслугам, 
		                                  ТаблицаПоТаре, Отказ, Заголовок);
										  
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
		
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движение в регистру РасчетыСКонтрагентами
//
Процедура ДвиженияПоРасчетамСКонтрагентами( СтруктураШапкиДокумента, Отказ)
	
	// Движения по документу.
	Если СуммаДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений = Движения.РасчетыСКонтрагентами;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
	СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
	СтрокаДвижений.Контрагент  		   = Контрагент;
	СтрокаДвижений.Организация  	   = Организация;

	СтрокаДвижений.Сделка                = Ссылка; 
	
	СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
											СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
											СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
											СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
	СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
											СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
											СтруктураШапкиДокумента.КурсДокумента, 
											СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
											СтруктураШапкиДокумента.КратностьДокумента, 
											СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРасчетамСКонтрагентами()

// Формируем движения по упр. регистрам.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоУслугам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	ДвиженияПоРасчетамСКонтрагентами( СтруктураШапкиДокумента, Отказ);

	Если Не Отказ Тогда
		
		// Движения по заказам покупателей.
		НаборДвижений = Движения.ЗаказыПокупателей;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
			
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    Ссылка);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       ОпределитьСтатусПартии(),                         "ТаблицаПоТоварам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоУслугам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");

		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
		// Движения по размещениям.
		ТаблицаПоТоварамРазмещение = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоКомплектам);
		ТаблицаПоТареРазмещение    = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТаре);
		
		Если ТаблицаПоТоварамРазмещение.Количество() > 0 ИЛИ ТаблицаПоТареРазмещение.Количество() > 0 Тогда
			
			// По регистру РазмещениеЗаказовПокупателей
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			
			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРазмещение);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРазмещение);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",          Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",          Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
		
		КонецЕсли;
		
		// Движения по резервированиям.
		ТаблицаПоТоварамРезервирование = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоКомплектам);
		ТаблицаПоТареРезервирование    = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТаре);
		Если ТаблицаПоТоварамРезервирование.Количество() > 0 ИЛИ ТаблицаПоТареРезервирование.Количество() > 0 Тогда
			
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезервирование);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезервирование);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", Ссылка);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");
			
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр() 

// Формируем движения по регистру СписанныеТовары
//
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, 
				                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
											Отказ, Заголовок)
											
	Если СтруктураШапкиДокумента.ИспользоватьРАУЗ Тогда 
		Возврат; 
	КонецЕсли;	
											
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары
	ТаблицаПоТоварамРезервирование = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТоварам);
	ТаблицаПоТареРезервирование    = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТаре);
	Если ТаблицаПоТоварамРезервирование.Количество() > 0 ИЛИ ТаблицаПоТареРезервирование.Количество() > 0 Тогда
	
		НаборДвижений = Движения.СписанныеТовары;
			
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезервирование);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезервирование);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
		// Недостающие поля.
		Инд = 0;
		Для каждого Строка Из ТаблицыДанныхДокумента["ТаблицаПоТоварам"] Цикл
			Инд = Инд+1;
			Строка.НомерСтрокиДокумента = Инд;
		КонецЦикла;
		Для каждого Строка Из ТаблицыДанныхДокумента["ТаблицаПоТаре"] Цикл
			Инд = Инд+1;
			Строка.НомерСтрокиДокумента = Инд;
		КонецЦикла;
			
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперацииПартииТоваров", Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СписыватьТолькоПоЗаказу",  Истина);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказСписания",            Ссылка);
		
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр       ( ТаблицыДанныхДокумента["ТаблицаПоТоварам"], СтруктураШапкиДокумента, ТаблицаПоТоварам);
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр( ТаблицыДанныхДокумента["ТаблицаПоТаре"],    СтруктураШапкиДокумента, ТаблицаПоТаре);
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, Неопределено, ТаблицыДанныхДокумента, Дата);
		
		Движения.СписанныеТовары.Записать(Истина);
		
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,истина,ложь,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Процедура формирует движения регистра в случае если вид операции - 
// переработка дав. сырья
//
Процедура ДвиженияПоРегистрамПереработкаУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоМатериалам, ТаблицаПоУслугам)
	
	НаборДвиженийПокуп = Движения.ЗаказыПокупателей;
	ТаблицаДвиженийПокуп = НаборДвиженийПокуп.Выгрузить();
	
	НаборДвиженийПост = Движения.ЗаказыПоставщикам;
	ТаблицаДвиженийПост = НаборДвиженийПост.Выгрузить();

	// 1. Формирование движений по регистру ЗаказыПокупателей
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвиженийПокуп);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвиженийПокуп);
	
	ТаблицаДвиженийПокуп.ЗаполнитьЗначения( ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийПокуп.ЗаполнитьЗначения( Ссылка, "ЗаказПокупателя");
	ТаблицаДвиженийПокуп.ЗаполнитьЗначения( Перечисления.СтатусыПартийТоваров.ВПереработку, "СтатусПартии");
	
	ТаблицаДвиженийПродукция = НаборДвиженийПокуп.Выгрузить(); 
	ТаблицаДвиженийПродукция.Очистить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвиженийПродукция);
	
	// 2. Формирование движений по регистру ЗаказыПоставщикам
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвиженийПост);
	
	ТаблицаДвиженийПост.ЗаполнитьЗначения( ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийПост.ЗаполнитьЗначения( Перечисления.СтатусыПартийТоваров.ВПереработку, "СтатусПартии");
	ТаблицаДвиженийПост.ЗаполнитьЗначения( Ссылка, "ЗаказПоставщику");
	
	// Запись движений в регистры
	НаборДвиженийПокуп.мПериод = Дата;
	НаборДвиженийПокуп.мТаблицаДвижений = ТаблицаДвиженийПокуп;
	НаборДвиженийПокуп.ВыполнитьПриход();

	// Запись движений в регистры
	НаборДвиженийПост.мПериод = Дата;
	НаборДвиженийПост.мТаблицаДвижений = ТаблицаДвиженийПост;
	НаборДвиженийПост.ВыполнитьПриход();
	
	// Движения по расчетам.
	ДвиженияПоРасчетамСКонтрагентами( СтруктураШапкиДокумента, Ложь);
	
КонецПроцедуры // ДвиженияПоРегистрамПереработка()

// Процедура пересчитывает сумму в валюту упр. и регл. учета
//
Процедура ДобавитьСуммы(СтруктураШапкиДокумента, ТаблицаПоМатериалам)
	
	ТаблицаПоМатериалам.Колонки.Добавить( "СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаПоМатериалам.Колонки.Добавить( "СуммаУпр",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Для Каждого СтрокаТЧ Из ТаблицаПоМатериалам Цикл
		
		СтрокаТЧ.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТЧ.Сумма,
			ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента,
			КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента,
			КратностьВзаиморасчетов);
			
		СтрокаТЧ.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТЧ.Сумма,
			ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСуммы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВЕБ-ПРИЛОЖЕНИЯ

//Проверяет необходимость расчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки() Экспорт
	Возврат Не Проведен И (мРассчитыватьАвтоматическиеСкидки = Неопределено Или мРассчитыватьАвтоматическиеСкидки)  И ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.Переработка;
КонецФункции

// Возвращает сумму документа с НДС
//
// Возвращаемое значение:
//  Сумма документа с НДС
//
Функция ПолучитьСуммуСНДС() Экспорт

	Возврат Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") +
	        Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");

КонецФункции // ПолучитьСуммуСНДС()

// Возвращает сумму НДС документа
//
// Возвращаемое значение:
//  Сумма НДС документа
//
Функция ПолучитьСуммуНДС() Экспорт

	Возврат Ценообразование.ПолучитьНДСДокумента(ЭтотОбъект, "Товары") +
	        Ценообразование.ПолучитьНДСДокумента(ЭтотОбъект, "Услуги");

КонецФункции // ПолучитьСуммуНДС()

// Процедура рассчитывает суммы по заказу
//
Процедура РассчитатьСумму() Экспорт

	мСуммаВсего    = ПолучитьСуммуСНДС();
	мСуммаВсегоНДС = ПолучитьСуммуНДС();

КонецПроцедуры
                                   
// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора - структура, содержащая параметры подбора.
//
Функция ЗаполнитьТабличнуюЧастьИзПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика;

	// Получим параметры подбора из структуры подбора.
	УправлениеЗапасами.ПолучитьПараметрыДокументаИзСтруктуры(ЗначениеВыбора, ТипЦен, СпособЗаполненияЦен,
	                                      Номенклатура, Количество, КоличествоМест, Характеристика,
	                                      ВалютаЦены, Цена, ЕдиницаИзмерения);
	                                      
	Серия = ?(ЗначениеВыбора.Свойство("Серия"), ЗначениеВыбора.Серия, Справочники.СерииНоменклатуры.ПустаяСсылка());
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		Если Серия <> NULL Тогда
			СтруктураОтбора.Вставить("СерияНоменклатуры", Серия);
		КонецЕсли;
	ИначеЕсли ТабличнаяЧасть = Материалы Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
				Разница = СуммаСтрокиПослеИзменения - СуммаСтрокиДоИзменения;

				мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + Разница;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                               ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                        УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                    СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мВалютаРегламентированногоУчета);
				СтруктураПараметров.Вставить("УчетнаяПолитика",       мУчетнаяПолитика);
				ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			Иначе // Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Материалы Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию( СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, ТекущаяДата(), Подразделение);
			СтрокаТабличнойЧасти.СерияНоменклатуры = Серия;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);

			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

				мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                               ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                        УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                    СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мВалютаРегламентированногоУчета);
				СтруктураПараметров.Вставить("УчетнаяПолитика",       мУчетнаяПолитика);
				ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			Иначе// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			//ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

			// Рассчитываем плановую себестоимость.
			ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

			// Ввод состава набора
			СтрокаТабличнойЧасти.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
			УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена,
			                                         ВалютаЦены,
			                                         ВалютаДокумента,
			                                         ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			                                         ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                                     СпособЗаполненияЦен,
			                                                                     ТипЦен.ЦенаВключаетНДС,
			                                                                     УчитыватьНДС,
			                                                                     СуммаВключаетНДС,
			                                                                     Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Материалы Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			СтрокаТабличнойЧасти.ЕдиницаИзмерения 	  = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      	  = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			
			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                                     СпособЗаполненияЦен,
			                                                                     ТипЦен.ЦенаВключаетНДС,
			                                                                     Ложь,
			                                                                     Истина,
			                                                                     Неопределено);

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НД
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			//ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции // ЗаполнитьТабличнуюЧастьИзПодбора()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора() Экспорт

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары);

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                               ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                        УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                    СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",       мУчетнаяПолитика);
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

	КонецЕсли;

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	УправлениеЗаказами.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДоговорКонтрагента",мТекущийДоговорКонтрагента);
	РассчитатьСумму();

КонецПроцедуры // ПриИзмененииДоговора()

// Процедура вызывается при изменении значения Контрагент
//
Процедура ПриИзмененииКонтрагента() Экспорт

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	Если НЕ ЗначениеЗаполнено(КонтактноеЛицоКонтрагента) Тогда
		КонтактноеЛицоКонтрагента = Контрагент.ОсновноеКонтактноеЛицо;
	Иначе
		Если КонтактноеЛицоКонтрагента.Владелец <> Контрагент Тогда
			КонтактноеЛицоКонтрагента = Контрагент.ОсновноеКонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииКонтрагента()

// Процедура при изменении поля ввода номенклатуры в строке табличной части "Товары".
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти) Экспорт

	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                               ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                        УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                    СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",       мУчетнаяПолитика);
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	// Рассчитываем плановую себестоимость.
	ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию( СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);

	//ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	// Ввод состава набора
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()

Процедура ПроверитьВыборТорговойТочки(Отказ)
	Если НЕ Отказ И НЕ ЗначениеЗаполнено(кпкТорговаяТочка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	кпкТорговыеТочки.Ссылка
		|ИЗ
		|	Справочник.кпкТорговыеТочки КАК кпкТорговыеТочки
		|ГДЕ
		|	кпкТорговыеТочки.Владелец = &Контрагент";
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		тзРезультат = Запрос.Выполнить().Выгрузить();
		
		Если тзРезультат.Количество() > 0 Тогда
			Если НЕ РольДоступна("ПолныеПрава") Тогда
				Отказ = Истина;
			//КонецЕсли;
			
			Сообщить("Не выбрана торговая точка");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    ДокументОснование = Основание;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда

		// Заполнение шапки
		ВремяНапоминания  = Основание.ВремяНапоминания;
		Комментарий       = Основание.Комментарий;
		НапомнитьОСобытии = Основание.НапомнитьОСобытии;
		Ответственный     = Основание.Ответственный;

		ЗаполнитьДокументПоОснованиюУпр(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		// Заполнение шапки
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект,Основание);
		Если Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия;
		КонецЕсли;
		
		ОрганизацияКонтрагента = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.Контрагент);
		Организация = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту( Основание.Контрагент);
		//Смартис Лиманчук начало 04.01.2013
		Контрагент = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
		//Смартис Лиманчук окончание 04.01.2013
		
		//Смартис Лиманчук начало 04.01.2013
		//ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект,ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи());
		//Смартис Лиманчук окончание 04.01.2013

		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл
			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаВозвратнаяТара.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаВозвратнаяТара.Номенклатура;
			НоваяСтрока.Сумма        = ТекСтрокаВозвратнаяТара.Сумма;
			НоваяСтрока.Цена         = ТекСтрокаВозвратнаяТара.Цена;
		КонецЦикла;
		Для Каждого ТекСтрокаМатериалы Из Основание.Материалы Цикл
			НоваяСтрока = Материалы.Добавить();
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаМатериалы.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаМатериалы.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаМатериалы.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаМатериалы.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаМатериалы.Коэффициент;
			НоваяСтрока.Номенклатура               = ТекСтрокаМатериалы.Номенклатура;
			НоваяСтрока.Сумма                      = ТекСтрокаМатериалы.Сумма;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаМатериалы.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена                       = ТекСтрокаМатериалы.Цена;
		КонецЦикла;
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ПлановаяСебестоимость      = ТекСтрокаТовары.ПлановаяСебестоимость;
			НоваяСтрока.Спецификация               = ТекСтрокаТовары.Спецификация;
			НоваяСтрока.СтавкаНДС                  = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.Сумма                      = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаНДС                   = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена                       = ТекСтрокаТовары.Цена;
		КонецЦикла;
		Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаУслуги.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.Содержание   = ТекСтрокаУслуги.Содержание;
			НоваяСтрока.СтавкаНДС    = ТекСтрокаУслуги.СтавкаНДС;
			НоваяСтрока.Сумма        = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.СуммаНДС     = ТекСтрокаУслуги.СуммаНДС;
			НоваяСтрока.Цена         = ТекСтрокаУслуги.Цена;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполнение шапки
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
		
		АвтоРазмещение   = Истина;
		ВалютаДокумента  = Основание.ВалютаДокумента;
		ВремяНапоминания = Основание.ВремяНапоминания;
		ДатаОплаты       = Основание.ДатаОплаты;
		ДатаОтгрузки     = Основание.ДатаОтгрузки;
		ДоговорКонтрагента                = Основание.ДоговорКонтрагента;
		ИспользоватьПлановуюСебестоимость = Основание.ИспользоватьПлановуюСебестоимость;
		ИтогПлановаяСебестоимость         = Основание.ИтогПлановаяСебестоимость;
		Комментарий                       = Основание.Комментарий;
		КонтактноеЛицоКонтрагента         = Основание.КонтактноеЛицоКонтрагента;
		Контрагент                        = Основание.Контрагент;
		Грузоотправитель                  = Основание.Грузоотправитель;
		Грузополучатель                   = Основание.Грузополучатель;
		КратностьВзаиморасчетов           = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов = Основание.КурсВзаиморасчетов;
		НапомнитьОСобытии  = Основание.НапомнитьОСобытии;
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.Подразделение;
		СкладГруппа        = Основание.Склад;
		СтруктурнаяЕдиница = Основание.СтруктурнаяЕдиница;
		СуммаВключаетНДС   = Основание.СуммаВключаетНДС;
		СуммаДокумента     = Основание.СуммаДокумента;
		ТипЦен             = Основание.ТипЦен;
		УчитыватьНДС       = Основание.УчитыватьНДС;
		ВидОперации        = Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия;

		ЗаполнениеДокументов.ЗаполнитьДанныеДоставкиПоОснованию(ЭтотОбъект, Основание);

		УправлениеЗаказами.УстановитьДатуОплатыПоДоговору(ЭтотОбъект);

		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл

			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаВозвратнаяТара.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаВозвратнаяТара.Номенклатура;
			НоваяСтрока.Сумма        = ТекСтрокаВозвратнаяТара.Сумма;
			НоваяСтрока.Цена         = ТекСтрокаВозвратнаяТара.Цена;

			//ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		КонецЦикла;

		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения                    = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест                = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                          = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест                      = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                         = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура                        = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ПлановаяСебестоимость               = ТекСтрокаТовары.ПлановаяСебестоимость;
			НоваяСтрока.ПроцентСкидкиНаценки                = ТекСтрокаТовары.ПроцентСкидкиНаценки;
			НоваяСтрока.ПроцентАвтоматическихСкидок         = ТекСтрокаТовары.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = ТекСтрокаТовары.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ТекСтрокаТовары.ЗначениеУсловияАвтоматическойСкидки;
			НоваяСтрока.СтавкаНДС                           = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.Сумма                               = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаНДС                            = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.ХарактеристикаНоменклатуры          = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена                                = ТекСтрокаТовары.Цена;
			НоваяСтрока.КлючСтроки                          = ТекСтрокаТовары.КлючСтроки;
			
			//ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		КонецЦикла;

		Если Основание.СоставНабора.Количество() > 0 Тогда
			СоставНабора.Загрузить(Основание.СоставНабора.Выгрузить());
		КонецЕсли;

		Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл

			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Количество                          = ТекСтрокаУслуги.Количество;
			НоваяСтрока.Номенклатура                        = ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.Содержание                          = ТекСтрокаУслуги.Содержание;
			НоваяСтрока.СтавкаНДС                           = ТекСтрокаУслуги.СтавкаНДС;
			НоваяСтрока.Сумма                               = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.СуммаНДС                            = ТекСтрокаУслуги.СуммаНДС;
			НоваяСтрока.Цена                                = ТекСтрокаУслуги.Цена;
			НоваяСтрока.ПроцентСкидкиНаценки                = ТекСтрокаУслуги.ПроцентСкидкиНаценки;
			НоваяСтрока.ПроцентАвтоматическихСкидок         = ТекСтрокаУслуги.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = ТекСтрокаУслуги.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ТекСтрокаУслуги.ЗначениеУсловияАвтоматическойСкидки;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		Услуги.Очистить();

	КонецЕсли;

	Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		// Договор - внешнеэкономический
    	ВозвратнаяТара.Очистить();
	КонецЕсли;
	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, ПогрешностиОкругления, "Товары");
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, ЭтотОбъект, ПогрешностиОкругления, "Услуги");
	КонецЕсли;
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуСНДС();
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары", "ПараметрыВыпускаПродукции");
	
	//очистка серий там где их не должно быть
	РезервированиеПоСериям = ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей И мРезервироватьПоСериям;
	Для каждого Строка из Товары цикл
		Если ЗначениеЗаполнено(Строка.СерияНоменклатуры) И (не РезервированиеПоСериям ИЛИ НЕ ЗначениеЗаполнено(Строка.Размещение) ИЛИ ТипЗНч(Строка.Размещение)<>Тип("СправочникСсылка.Склады")) Тогда
			Строка.СерияНоменклатуры = "";
		КонецЕсли;
	КонецЦикла;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если НЕ кпкПризнакТА тогда
    	кпкТорговыйАгент = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	ПроверкаРазрешенияОтгрузки();
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	//ИЗМЕНЕНО Верескул Игорь(Начало 28.04.2015
	Если НЕ РазрешитьПревышениеПорога 
		И СуммаДокумента <= Константы.СуммаОграниченияДляЗаказаПокупателя.Получить() 
		И ВидОперации=Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия Тогда
		Сообщить("Сумма заказа меньше "+Строка(Константы.СуммаОграниченияДляЗаказаПокупателя.Получить()));	
		Отказ=Истина;
		Возврат;
	КонецЕсли; 
	//Окончание)Верескул Игорь
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"	 , "ВедениеВзаиморасчетов"             , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"              , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                       , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"      , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	Если ЗначениеЗаполнено(СкладГруппа) 
		И ТипЗнч(СкладГруппа) = Тип("СправочникСсылка.Склады") Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладГруппа", "ВидСклада", "ВидСклада");
	Иначе
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "NULL", "NULL", "ВидСклада");
	КонецЕсли;

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                       , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                    , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                  , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"            , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"        , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок" , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки" , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки" , "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("Сумма"                       , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                         , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"  , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Размещение"                  , "Размещение");
	СтруктураПолей.Вставить("РазмещениеВидСклада"         , "Размещение.ВидСклада");
	СтруктураПолей.Вставить("СерияНоменклатуры"           , "СерияНоменклатуры");
	СтруктураПолей.Вставить("КлючСтроки"                  , "КлючСтроки");
	СтруктураПолей.Вставить("ТипНоменклатуры", "Номенклатура.ВидНоменклатуры.ТипНоменклатуры");

	// Дополним полями, нужными для регл. и упр. учета
	//ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Услуги", Отказ);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"                , "Содержание");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"      , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок" , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки" , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки" , "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");

	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("Размещение"                , "Размещение");
	СтруктураПолей.Вставить("РазмещениеВидСклада"       , "Размещение.ВидСклада");

	// Дополним полями, нужными для регл. и упр. учета
	//ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей);

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "Состав набора"
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура");
	СтруктураПолей.Вставить("Цена");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставНабора", СтруктураПолей, Отказ, Заголовок);
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
		ТаблицаМатериалов = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура("Номенклатура, Услуга, Набор, Комплект", "Номенклатура", "Номенклатура.Услуга", "Номенклатура.Набор", "Номенклатура.Комплект")).Выгрузить();
		ПроверитьЗаполнениеТабличнойЧастиМатериалы(ТаблицаМатериалов, Отказ, Заголовок);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		Если НЕ РольДоступна("ПроведениеПлатежныхДокументовБезКонтроляПоРД") И ДоговорКонтрагента.КонтролироватьСуммуЗадолженности Тогда
			
			// Контроль общей суммы задолженности по договору 
			
			Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
				
				СтруктураПараметровБлокировки = Новый Структура(
				"ИмяТаблицы", "ВзаиморасчетыСКонтрагентами");
				СтруктураЗначенийБлокировки   = Новый Структура(
				"ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
				ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, , Отказ, Заголовок);
				
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
			Запрос.УстановитьПараметр("НаДату", ДатаОтгрузки);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВзаиморасчетыПоДоговору.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&НаДату, ДоговорКонтрагента = &ДоговорКонтрагента) КАК ВзаиморасчетыПоДоговору
			|
			|ДЛЯ ИЗМЕНЕНИЯ";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				СуммаВзаиморасчетовОстаток = ?(Выборка.СуммаВзаиморасчетовОстаток= NULL, 0, Выборка.СуммаВзаиморасчетовОстаток);
				ДокументОбъект = ЭтотОбъект;
				
				СуммаВзаиморасчетовПоДокументу = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтруктураШапкиДокумента.СуммаДокумента, 
				СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
				ЗаполнениеДокументов.КурсДокумента(ДокументОбъект,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВзаиморасчетов, 
				ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВзаиморасчетов);
				
				Валюта = ?(СтруктураШапкиДокумента.ВалютаВзаиморасчетов = NULL, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
				Если (СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоДокументу) > ДоговорКонтрагента.ДопустимаяСуммаЗадолженности Тогда
					ОбщегоНазначения.СообщитьОбОшибке(
					"Сумма задолженности по договору " + ДоговорКонтрагента + 
					" с учетом документа превышает допустимую сумму задолженности." + Символы.ПС +
					Символы.Таб + "Сумма задолженности с учетом документа: " + (СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоДокументу) +
					" " + Валюта + ", допустимая сумма задолженности: " + ДоговорКонтрагента.ДопустимаяСуммаЗадолженности + " " + Валюта + 
					", превышение: " + (ОбщегоНазначения.ФорматСумм(СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоДокументу - 
					ДоговорКонтрагента.ДопустимаяСуммаЗадолженности)) + " " + Валюта, , Заголовок);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ РольДоступна("ПроведениеПлатежныхДокументовБезКонтроляПоРД") И ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности Тогда
			
			// Контроль числа дней задолженности
			
			Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
				
				СтруктураПараметровБлокировки = Новый Структура(
				"ИмяТаблицы", "ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов");
				СтруктураЗначенийБлокировки   = Новый Структура(
				"ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
				ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, , Отказ, Заголовок);
				
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
			Запрос.УстановитьПараметр("НаДату", ДатаОтгрузки);
			
			// Выбирает дату самого раннего документа из остатков по договору
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента,
			|	МИНИМУМ(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата) КАК ДатаПервогоДокумента
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(&НаДату, ДоговорКонтрагента = &ДоговорКонтрагента) КАК ВзаиморасчетыПоДокументамОстатки
			|ГДЕ
			|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента
			|
			|ДЛЯ ИЗМЕНЕНИЯ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки";
			
			РезультатЗапр = Запрос.Выполнить();
			ТЗ = РезультатЗапр.Выгрузить();
			Выборка = РезультатЗапр.Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				ДопустимоеЧислоДнейЗадолженности = ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
				
				Если Константы.СпособКонтроляДнейЗадолженности.Получить() = Перечисления.СпособыКонтроляДнейЗадолженности.ПоКалендарнымДням Тогда
					РазницаДатВСекундах = (СтруктураШапкиДокумента.Дата - Выборка.ДатаПервогоДокумента);
					
					РазницаДней = Цел(РазницаДатВСекундах/(24 * 60 * 60));
				Иначе
					РазницаДней = ЗаполнениеДокументов.ЧислоРабочихДней(Выборка.ДатаПервогоДокумента, СтруктураШапкиДокумента.Дата);
				КонецЕсли;
				
				Если РазницаДней > ДопустимоеЧислоДнейЗадолженности Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке(
					"Превышено допустимое число дней задолженности по договору " + ДоговорКонтрагента + 
					Символы.ПС + Символы.Таб +
					" Допустимое число дней задолженности: " + ДопустимоеЧислоДнейЗадолженности + 
					", дата самой старой задолженности: " + Выборка.ДатаПервогоДокумента + 
					", превышение (на дату отгрузки): " + 
					(РазницаДней - ДопустимоеЧислоДнейЗадолженности) + " дней",
					, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
			СтруктураПолей.Вставить("Количество",   "Количество");
			СтруктураПолей.Вставить("Сумма",        "Сумма");
			СтруктураПолей.Вставить("Цена",         "Цена");
			СтруктураПолей.Вставить("СтавкаНДС",    "СтавкаНДС");
			
			ТаблицаПоУслугам    = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги",    СтруктураПолей).Выгрузить();
			ДобавитьСуммы(СтруктураШапкиДокумента, ТаблицаПоУслугам);
			
			СтруктураПолей.Очистить();
			СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
			СтруктураПолей.Вставить("Количество",   "Количество");
			СтруктураПолей.Вставить("Сумма",        "Сумма");
			СтруктураПолей.Вставить("Цена",         "Цена");
			СтруктураПолей.Вставить( "Количество"                , "Количество * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
			СтруктураПолей.Вставить( "ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
			СтруктураПолей.Вставить( "ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
			
			ТаблицаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей).Выгрузить();
			ДобавитьСуммы(СтруктураШапкиДокумента, ТаблицаПоМатериалам);
			
			ДвиженияПоРегистрамПереработкаУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоМатериалам, ТаблицаПоУслугам);
			
		Иначе
			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
			                    ТаблицаПоТаре, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьРегистрСведенийкпкСведенияДокумента();	
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьРегистрСведенийкпкСведенияДокумента()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	кпкСведенияДокумента.Период,
		|	кпкСведенияДокумента.КПКДокумент,
		|	кпкСведенияДокумента.Агент,
		|	кпкСведенияДокумента.ИДДокумента
		|ИЗ
		|	РегистрСведений.кпкСведенияДокумента КАК кпкСведенияДокумента
		|ГДЕ
		|	кпкСведенияДокумента.КПКДокумент = &Ссылка
		|	И кпкСведенияДокумента.кпкПризнакРучногоВвода = ИСТИНА";
		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		СведенияДокумента  = РегистрыСведений.кпкСведенияДокумента.СоздатьМенеджерЗаписи();
		СведенияДокумента.КПКДокумент	 = РезультатЗапроса.КПКДокумент;  
		СведенияДокумента.Период 		 = РезультатЗапроса.Период;  
		СведенияДокумента.Агент 		 = РезультатЗапроса.Агент;  
		СведенияДокумента.ИДДокумента	 = РезультатЗапроса.ИДДокумента;  
		
	    СведенияДокумента.Прочитать();
		Если СведенияДокумента.Выбран() тогда
			СведенияДокумента.Удалить();
	    КонецЕсли;
	КонецЦикла; 
	
	Если кпкПризнакТА И ЗначениеЗаполнено(кпкТорговыйАгент) тогда
		
		СведенияДокумента 					 = РегистрыСведений.кпкСведенияДокумента.СоздатьМенеджерЗаписи();
		СведенияДокумента.Агент 			 = кпкТорговыйАгент;
		СведенияДокумента.КПКДокумент 		 = Ссылка;               		
		СведенияДокумента.ИДДокумента		 = НРег(СокрЛП(Ссылка.УникальныйИдентификатор()));
		СведенияДокумента.Период 			 = Дата;
		СведенияДокумента.ДатаВремяСоздания = Дата;
		СведенияДокумента.кпкПризнакРучногоВвода = Истина;
		
		СведенияДокумента.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ПроверкаРазрешенияОтгрузки
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
Процедура ПроверкаРазрешенияОтгрузки() Экспорт
	Если Не СнятьОграничениеАссортимента Тогда 
		Для каждого Строка Из Товары Цикл
			Если ПроверитьВРегистреАссортимента(Строка.Номенклатура) Тогда
				Строка.ЗапрещенКОтгрузке=Истина;
				Строка.Размещение= Неопределено;//Справочники.Склады.ПустаяСсылка();
			Иначе
				Строка.ЗапрещенКОтгрузке=ложь;
			КонецЕсли; 
		КонецЦикла; 
	Иначе 
		Для каждого Строка Из Товары Цикл
			Если Строка.ЗапрещенКОтгрузке Тогда				
				Строка.Размещение= Неопределено;
			ИначеЕсли ПроверитьВРегистреАссортимента(Строка.Номенклатура) И фИзОбработкиЗаполнитьИПровести Тогда
				Строка.ЗапрещенКОтгрузке=Истина;
				Строка.Размещение= Неопределено;
			КонецЕсли;
		КонецЦикла;
		фИзОбработкиЗаполнитьИПровести=Ложь;
	КонецЕсли;
	Сообщить("Процент недопоставки составляет "+ Строка(ПосчитатьПроцентНедопоставки())+"%");
КонецПроцедуры //ПроверкаРазрешенияОтгрузки

Функция ПроверитьВРегистреАссортимента(Номенклатура)
	Флаг=Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗапрещенныйКОтгрузкеАссортиментСрезПоследних.Период,
	               |	ЗапрещенныйКОтгрузкеАссортиментСрезПоследних.Регистратор,
	               |	ЗапрещенныйКОтгрузкеАссортиментСрезПоследних.НомерСтроки,
	               |	ЗапрещенныйКОтгрузкеАссортиментСрезПоследних.Активность,
	               |	ЗапрещенныйКОтгрузкеАссортиментСрезПоследних.Контрагент,
	               |	ЗапрещенныйКОтгрузкеАссортиментСрезПоследних.Подразделение,
	               |	ЗапрещенныйКОтгрузкеАссортиментСрезПоследних.Номенклатура,
	               |	ЗапрещенныйКОтгрузкеАссортиментСрезПоследних.ПризнакСнятия
	               |ИЗ
	               |	РегистрСведений.ЗапрещенныйКОтгрузкеАссортимент.СрезПоследних(&Дата, ) КАК ЗапрещенныйКОтгрузкеАссортиментСрезПоследних
	               |ГДЕ
	               |	ЗапрещенныйКОтгрузкеАссортиментСрезПоследних.Номенклатура = &Номенклатура
	               |	И ЗапрещенныйКОтгрузкеАссортиментСрезПоследних.ПризнакСнятия = ЛОЖЬ
	               |	И (ЗапрещенныйКОтгрузкеАссортиментСрезПоследних.Контрагент = &Контрагент
	               |			ИЛИ ЗапрещенныйКОтгрузкеАссортиментСрезПоследних.Контрагент = &ПустаяСсылкаКонтрагент)
	               |	И (ЗапрещенныйКОтгрузкеАссортиментСрезПоследних.Подразделение В ИЕРАРХИИ (&Подразделение)
	               |			ИЛИ ЗапрещенныйКОтгрузкеАссортиментСрезПоследних.Подразделение = &ПустаяСсылкаПодразделение)";
	Запрос.УстановитьПараметр("ПустаяСсылкаКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаПодразделение", Справочники.Подразделения.ПустаяСсылка());
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Дата", Дата);
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		Сообщить(Результат.Номенклатура.Наименование + " запрещено к отгрузке документом " + Результат.Регистратор); 
		Флаг=Истина;	
	КонецЦикла; 
		
	Возврат Флаг; 			
КонецФункции
////////////////////////////////////////////////////////////////////////////////
//
// Функция ПосчитатьПроцентНеДопоставки
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
Функция ПосчитатьПроцентНедопоставки() Экспорт
	СуммаНедопоставки=0;
   	Для каждого Строка Из Товары Цикл
   		Если Строка.Размещение=Неопределено Тогда
			СуммаНедопоставки=СуммаНедопоставки+Строка.Сумма;
		КонецЕсли; 
	КонецЦикла;
	Возврат  ?(СуммаДокумента=0,0,Окр(СуммаНедопоставки/СуммаДокумента*100,2));
КонецФункции //ПосчитатьПроцентНеДопоставки

//ИЗМЕНЕНО Верескул Игорь(Начало 25.05.2016
Процедура ПриКопировании(ОбъектКопирования)
    Для каждого Строка Из ЭтотОбъект.Товары Цикл
        Строка.ПроцентСкидкиНаценки = 0;
	КонецЦикла; 
	НомерВходящегоДокументаЭлектронногоОбмена = "";
	ОтключитьКонтрольВзаиморасчетов = Ложь;
	РозничныеЧеки.Очистить();
КонецПроцедуры
//Окончание)Верескул Игорь    

фИзОбработкиЗаполнитьИПровести=Ложь;
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мРезервироватьПоСериям = глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании") И глЗначениеПеременной("ИспользоватьСерииНоменклатуры");

мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораЗаказаПокупателя();