Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(Тип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	Организация,
	|	Контрагент КАК Поставщик,
	|	Организация КАК Покупатель,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;

	ТабДокумент = Новый ТабличныйДокумент;
	Если Тип = "ЗаказПоДаннымПоставщика" Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_СчетЗаказПоДаннымПоставщика";
	Иначе
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_СчетЗаказ";
	КонецЕсли;
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет = ПолучитьОбщийМакет("СчетЗаказ");
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	ПараметрыПечати = ПолучитьПараметрыПечатиСчетаЗаказа(Тип);

	// Определим параметры запроса и табличного документа  
	// в зависимости от необходимости отображения артикула поставщика  
	Если Тип = "ЗаказПоДаннымПоставщика" Тогда

		ВыводитьКоды    = Истина;
		ТекстКодАртикул = "Код";
		Колонка         = "Артикул" + Символы.ПС + "поставщика";
		
		ТекстПоляТовараДляТоваров = "
		|	ВЫБОР КОГДА (ВЫРАЗИТЬ (НаименованиеКонтрагента КАК Строка(100)) ЕСТЬ NULL ИЛИ ВЫРАЗИТЬ (НаименованиеКонтрагента КАК Строка(100)) = """") ТОГДА ВЫРАЗИТЬ (ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(100)) ИНАЧЕ ВЫРАЗИТЬ (НаименованиеКонтрагента КАК Строка(100)) КОНЕЦ КАК Товар,";
        
		ТекстПоляТовараДляУслуг = "
		|	ВЫБОР КОГДА (ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(1000)) ЕСТЬ NULL ИЛИ ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(1000)) = """") ТОГДА ВЫРАЗИТЬ (ЗаказПоставщику.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) ИНАЧЕ ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(1000)) КОНЕЦ КАК Товар,";
		
		ТекстПоляТовараДляОборудования = "
		|	ВЫБОР КОГДА (ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(1000)) ЕСТЬ NULL ИЛИ ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(1000)) = """") ТОГДА ВЫРАЗИТЬ (ЗаказПоставщику.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) ИНАЧЕ ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(1000)) КОНЕЦ КАК Товар,";

		ТекстПоляТовараДляТары = "
		|	ВЫБОР КОГДА (ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(1000)) ЕСТЬ NULL ИЛИ ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(1000)) = """") ТОГДА ВЫРАЗИТЬ (ЗаказПоставщику.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) ИНАЧЕ ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(1000)) КОНЕЦ КАК Товар,";
		
		ТекстПоляАртикула = ",
			|	АртикулКонтрагента";
        
		ТекстВыборкиАртикула = ", 
			|	АртикулНоменклатурыКонтрагента КАК АртикулКонтрагента";
        
		ТекстВыборкиНоменклатуры = ", 
			|	ВЫРАЗИТЬ(НаименованиеНоменклатурыКонтрагента КАК Строка(100)) КАК НаименованиеКонтрагента";
        
		ТекстИсточникАртикула = "
			|	ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
			|	ПО НоменклатураКонтрагентов.Номенклатура = ЗаказПоставщику.Номенклатура
			|   И НоменклатураКонтрагентов.ХарактеристикаНоменклатуры = ЗаказПоставщику.ХарактеристикаНоменклатуры
			|	И НоменклатураКонтрагентов.Контрагент = &Контрагент";
			
		ТекстИсточникАртикулаБезХарактеристики = "
			|	ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
			|	ПО НоменклатураКонтрагентов.Номенклатура = ЗаказПоставщику.Номенклатура
			|	И НоменклатураКонтрагентов.Контрагент = &Контрагент";
        
		ТекстГруппировкиАртикулаИНоменклатуры = ", 
			|	АртикулНоменклатурыКонтрагента,
			|	ВЫРАЗИТЬ(НаименованиеНоменклатурыКонтрагента КАК Строка(100))";
		

	Иначе

		ТекстПоляТовараДляОборудования = "
		|	ВЫРАЗИТЬ (ЗаказПоставщику.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))КАК Товар,";

		ТекстПоляТовараДляТары = "
		|	ВЫРАЗИТЬ(ЗаказПоставщику.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))  КАК Товар,";
		
		ТекстПоляТовараДляТоваров = "
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(100)) КАК Товар,";
		
		СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("ЗаказПоставщику");
		
		ТекстПоляТовараДляУслуг = "
		|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,";
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Артикул";
			ТекстКодАртикул = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Код";
			ТекстКодАртикул = "Код";
		Иначе
			ВыводитьКоды    = Ложь;
			Колонка         = "";
			ТекстКодАртикул = "Код";
		КонецЕсли;

		ТекстПоляАртикула                     = "";
		ТекстВыборкиАртикула                  = ""; 
		ТекстИсточникАртикула                 = "";
		ТекстГруппировкиАртикулаИНоменклатуры = ""; 

	КонецЕсли;


	
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,,КодЯзыкаПечать);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.Контрагент);	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерТЧ,
	|	ВложенныйЗапрос.НомерСтрокиТЧ,
	|	ВложенныйЗапрос.Номенклатура," + ТекстПоляТовараДляТоваров + "
	|	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	NULL КАК Серия" + ТекстПоляАртикула + "
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(ЗаказПоставщику.НомерСтроки) КАК НомерСтрокиТЧ,
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена                        КАК Цена,
	|		СУММА(ЗаказПоставщику.Количество)           КАК Количество,
	|		СУММА(ЗаказПоставщику.Сумма     )           КАК Сумма,
	|		СУММА(ЗаказПоставщику.СуммаНДС  )           КАК СуммаНДС,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры  КАК Характеристика" + ТекстВыборкиАртикула + ТекстВыборкиНоменклатуры + "
	|	ИЗ
	|		Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры" + ТекстГруппировкиАртикулаИНоменклатуры + "
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ЗаказПоставщику.НомерСтроки,
	|	ЗаказПоставщику.Номенклатура," + ТекстПоляТовараДляОборудования + "
	|	ЗаказПоставщику.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,	
	|	ЗаказПоставщику.Количество,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	ЗаказПоставщику.Цена,
	|	ЗаказПоставщику.Сумма,
	|	ЗаказПоставщику.СуммаНДС,
	|	NULL,
	|	NULL КАК Серия" + ТекстВыборкиАртикула + "
	|	
	|ИЗ
	|	Документ.ЗаказПоставщику.Оборудование КАК ЗаказПоставщику" + ТекстИсточникАртикула + "
	|
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ЗаказПоставщику.НомерСтроки,
	|	ЗаказПоставщику.Номенклатура," + ТекстПоляТовараДляУслуг + "
	|	ЗаказПоставщику.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ЗаказПоставщику.Количество,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаХранения,
	|	ЗаказПоставщику.Цена,
	|	ЗаказПоставщику.Сумма,
	|	ЗаказПоставщику.СуммаНДС,
	|	NULL,
	|	NULL КАК Серия" + ТекстВыборкиАртикула + "
	|	
	|ИЗ
	|	Документ.ЗаказПоставщику.Услуги КАК ЗаказПоставщику" + ТекстИсточникАртикулаБезХарактеристики + "
	|
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки						КАК НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура.Артикул            КАК Артикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,	
	|	Цена,
	|	Сумма
	|ИЗ
	|	Документ.ЗаказПоставщику.ВозвратнаяТара КАК ЗаказПоставщику
	|
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	Руководители = ФормированиеПечатныхФорм.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	// Выводим шапку накладной
	ОбластьМакета                          = Макет.ПолучитьОбласть("Заголовок");
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Заказ поставщику (на переработку)';uk='Замовлення постачальнику (на переробку)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Заказ поставщику';uk='Замовлення постачальнику'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
		ОбластьМакета.Параметры.ТекстПоставщик = НСтр("ru='Исполнитель:';uk='Виконавець:'",КодЯзыкаПечать);
	Иначе
		ОбластьМакета.Параметры.ТекстПоставщик = НСтр("ru='Поставщик:';uk='Постачальник:'",КодЯзыкаПечать);
	КонецЕсли;
	ОбластьМакета.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.Поставщик              = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
		ОбластьМакета.Параметры.ТекстПокупатель = НСтр("ru='Заказчик:';uk='Замовник:'",КодЯзыкаПечать);
	Иначе
		ОбластьМакета.Параметры.ТекстПокупатель = НСтр("ru='Покупатель:';uk='Покупець:'",КодЯзыкаПечать);
	КонецЕсли;
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.Покупатель              = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);
	ЕстьСкидки = Ложь;
	// Выводим дополнительно информацию о договоре
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");		
	Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	Суффикс = "";
	Если ПараметрыПечати.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезСкидок");
	Иначе
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодовИСкидок");
	КонецЕсли;
	ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)';uk=' Товари (роботи, послуги) '",КодЯзыкаПечать);
	ТабДокумент.Присоединить(ОбластьТовар);
	
	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
	
	ОбластьТовар = Макет.ПолучитьОбласть("Строка|Товар");
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезСкидок");
	Иначе
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодовИСкидок");
	КонецЕсли;


	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			Если Тип = "ЗаказПоДаннымПоставщика" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.АртикулКонтрагента;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.КодАртикул;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьТовар.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		Скидка = 0;
		
		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;




	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ОбластьТовар = Макет.ПолучитьОбласть("Итого|Товар");
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезСкидок");
	Иначе
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодовИСкидок");
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		
		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		Иначе
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьТовар);
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоДополнительно|Товар");
			Если ПараметрыПечати.ВыводитьКоды Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ИтогоДополнительно|ТоварБезСкидок");
			Иначе
				ОбластьТовар = Макет.ПолучитьОбласть("ИтогоДополнительно|ТоварБезКодовИСкидок");
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьТовар);
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		КонецЕсли;
		
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|СуммаТара");
		
		СуммаТара    = 0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Товар);			
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаТара);
		ТабДокумент.Присоединить(ОбластьСуммы);	
		
		// сделаем отступ 
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);										   
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначения.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
										   
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента, КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
										   
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказа()

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами (с учетом внесенных корректировок)
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказаКорректировки(Тип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДатаПоступления,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;

	ТабДокумент = Новый ТабличныйДокумент;
	Если Тип = "ЗаказПоДаннымПоставщика" Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_СчетЗаказПоДаннымПоставщика";
	Иначе
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_СчетЗаказ";
	КонецЕсли;
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет = ПолучитьОбщийМакет("СчетЗаказ");
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата,,,КодЯзыкаПечать);
	ПараметрыПечати = ПолучитьПараметрыПечатиСчетаЗаказа(Тип);

	ТекстПоляТовараДляТоваров = "
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(100)) КАК Товар,";
		
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("ЗаказПоставщику");
		
	ТекстПоляТовараДляУслуг = "
	|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,";

	СтрокаВыборкиПоляСодержанияДляКорректировки = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("КорректировкаЗаказаПоставщику");
		
	ТекстПоляТовараДляУслугДляКорректировки = "
	|	" + СтрокаВыборкиПоляСодержанияДляКорректировки + " КАК Товар,";
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	ТекстПоляАртикула                     = "";
	ТекстВыборкиАртикула                  = ""; 
	ТекстИсточникАртикула                 = "";
	ТекстГруппировкиАртикулаИНоменклатуры = ""; 
	
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура 		КАК Номенклатура,
	|	ВложенныйЗапрос.Товар		 		КАК Товар,
	|	ВложенныйЗапрос.КодАртикул 			КАК КодАртикул,
	|	СУММА(ВложенныйЗапрос.Количество)	КАК Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения	КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена 				КАК Цена,
	|	СУММА(ВложенныйЗапрос.Сумма) 		КАК Сумма,
	|	СУММА(ВложенныйЗапрос.СуммаНДС) 	КАК СуммаНДС,
	|	ВложенныйЗапрос.Характеристика		КАК Характеристика,
	|   ВложенныйЗапрос.НомерТЧ			    КАК НомерТЧ,
	|	Минимум(ВложенныйЗапрос.ПризнакКорректировка) 	КАК ПризнакКорректировка,
	|   Минимум(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки,
	|	ВложенныйЗапрос.Серия				КАК Серия
	|ИЗ (
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура," + ТекстПоляТовараДляТоваров + "
	|	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|   1    КАК НомерТЧ,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	0 КАК ПризнакКорректировка,
	|	NULL КАК Серия" + ТекстПоляАртикула + "
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена                        КАК Цена,
	|       МИНИМУМ(ЗаказПоставщику.НомерСтроки)        КАК НомерСтроки,
	|		СУММА(ЗаказПоставщику.Количество)           КАК Количество,
	|		СУММА(ЗаказПоставщику.Сумма     )           КАК Сумма,
	|		СУММА(ЗаказПоставщику.СуммаНДС  )           КАК СуммаНДС,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры  КАК Характеристика" + ТекстВыборкиАртикула + "
	|	ИЗ
	|		Документ.ЗаказПоставщику.Оборудование КАК ЗаказПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры" + ТекстГруппировкиАртикулаИНоменклатуры + "
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура," + ТекстПоляТовараДляТоваров + "
	|	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|   1    КАК НомерТЧ,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	(1)                                     КАК ПризнакКорректировка,
	|	NULL КАК Серия" + ТекстПоляАртикула + "
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		КорректировкаЗаказаПоставщику.Номенклатура,
	|		КорректировкаЗаказаПоставщику.ЕдиницаИзмерения,
	|		КорректировкаЗаказаПоставщику.Цена                        КАК Цена,
	|       МИНИМУМ(КорректировкаЗаказаПоставщику.НомерСтроки)        КАК НомерСтроки,
	|		СУММА(КорректировкаЗаказаПоставщику.Количество)           КАК Количество,
	|		СУММА(КорректировкаЗаказаПоставщику.Сумма     )           КАК Сумма,
	|		СУММА(КорректировкаЗаказаПоставщику.СуммаНДС  )           КАК СуммаНДС,
	|		КорректировкаЗаказаПоставщику.ХарактеристикаНоменклатуры  КАК Характеристика" + ТекстВыборкиАртикула + "
	|	ИЗ
	|		Документ.КорректировкаЗаказаПоставщику.Оборудование КАК КорректировкаЗаказаПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		КорректировкаЗаказаПоставщику.Ссылка.ЗаказПоставщику = &ТекущийДокумент
	|		И КорректировкаЗаказаПоставщику.Ссылка.Проведен      = Истина
	|
	|	СГРУППИРОВАТЬ ПО
	|		КорректировкаЗаказаПоставщику.Номенклатура,
	|		КорректировкаЗаказаПоставщику.ЕдиницаИзмерения,
	|		КорректировкаЗаказаПоставщику.Цена,
	|		КорректировкаЗаказаПоставщику.ХарактеристикаНоменклатуры" + ТекстГруппировкиАртикулаИНоменклатуры + "
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура," + ТекстПоляТовараДляТоваров + "
	|	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|   2    КАК НомерТЧ,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	(0)                                         КАК ПризнакКорректировка,
	|	NULL КАК Серия" + ТекстПоляАртикула + "
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена                        КАК Цена,
	|       МИНИМУМ(ЗаказПоставщику.НомерСтроки)        КАК НомерСтроки,	
	|		СУММА(ЗаказПоставщику.Количество)           КАК Количество,
	|		СУММА(ЗаказПоставщику.Сумма     )           КАК Сумма,
	|		СУММА(ЗаказПоставщику.СуммаНДС  )           КАК СуммаНДС,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры  КАК Характеристика" + ТекстВыборкиАртикула + "
	|	ИЗ
	|		Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры" + ТекстГруппировкиАртикулаИНоменклатуры + "
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура," + ТекстПоляТовараДляТоваров + "
	|	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|   2    КАК НомерТЧ,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	(1)                                         КАК ПризнакКорректировка,
	|	NULL КАК Серия" + ТекстПоляАртикула + "
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		КорректировкаЗаказаПоставщику.Номенклатура,
	|		КорректировкаЗаказаПоставщику.ЕдиницаИзмерения,
	|		КорректировкаЗаказаПоставщику.Цена                        КАК Цена,
	|       МИНИМУМ(КорректировкаЗаказаПоставщику.НомерСтроки)        КАК НомерСтроки,
	|		СУММА(КорректировкаЗаказаПоставщику.Количество)           КАК Количество,
	|		СУММА(КорректировкаЗаказаПоставщику.Сумма     )           КАК Сумма,
	|		СУММА(КорректировкаЗаказаПоставщику.СуммаНДС  )           КАК СуммаНДС,
	|		КорректировкаЗаказаПоставщику.ХарактеристикаНоменклатуры  КАК Характеристика" + ТекстВыборкиАртикула + "
	|	ИЗ
	|		Документ.КорректировкаЗаказаПоставщику.Товары КАК КорректировкаЗаказаПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		КорректировкаЗаказаПоставщику.Ссылка.ЗаказПоставщику = &ТекущийДокумент
	|		И КорректировкаЗаказаПоставщику.Ссылка.Проведен      = Истина
	|
	|	СГРУППИРОВАТЬ ПО
	|		КорректировкаЗаказаПоставщику.Номенклатура,
	|		КорректировкаЗаказаПоставщику.ЕдиницаИзмерения,
	|		КорректировкаЗаказаПоставщику.Цена,
	|		КорректировкаЗаказаПоставщику.ХарактеристикаНоменклатуры" + ТекстГруппировкиАртикулаИНоменклатуры + "
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Номенклатура," + ТекстПоляТовараДляУслуг + "
	|	ЗаказПоставщику.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ЗаказПоставщику.Количество,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаХраненияОстатков,
	|	ЗаказПоставщику.Цена,
	|	ЗаказПоставщику.Сумма,
	|	ЗаказПоставщику.СуммаНДС,
	|	NULL,
	|   3    КАК НомерТЧ,
	|   ЗаказПоставщику.НомерСтроки КАК НомерСтроки,
	|	(0)                                         КАК ПризнакКорректировка,
	|	NULL КАК Серия" + ТекстВыборкиАртикула + "
	|	
	|ИЗ
	|	Документ.ЗаказПоставщику.Услуги КАК ЗаказПоставщику" + ТекстИсточникАртикула + "
	|
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаЗаказаПоставщику.Номенклатура," + ТекстПоляТовараДляУслугДляКорректировки + "
	|	КорректировкаЗаказаПоставщику.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	КорректировкаЗаказаПоставщику.Количество,
	|	КорректировкаЗаказаПоставщику.Номенклатура.ЕдиницаХраненияОстатков,
	|	КорректировкаЗаказаПоставщику.Цена,
	|	КорректировкаЗаказаПоставщику.Сумма,
	|	КорректировкаЗаказаПоставщику.СуммаНДС,
	|	NULL,
	|   3    КАК НомерТЧ,
	|   КорректировкаЗаказаПоставщику.НомерСтроки КАК НомерСтроки,	
	|	(1)                                         КАК ПризнакКорректировка,
	|	NULL КАК Серия" + ТекстВыборкиАртикула + "
	|	
	|ИЗ
	|	Документ.КорректировкаЗаказаПоставщику.Услуги КАК КорректировкаЗаказаПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		КорректировкаЗаказаПоставщику.Ссылка.ЗаказПоставщику = &ТекущийДокумент
	|		И КорректировкаЗаказаПоставщику.Ссылка.Проведен      = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура," + ТекстПоляТовараДляТоваров + "
	|	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	NULL,
	|   4    КАК НомерТЧ,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	(0)                                         КАК ПризнакКорректировка,
	|	NULL КАК Серия" + ТекстПоляАртикула + "
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.Цена                        КАК Цена,
	|       МИНИМУМ(ЗаказПоставщику.НомерСтроки)        КАК НомерСтроки,	
	|		СУММА(ЗаказПоставщику.Количество)           КАК Количество,
	|		СУММА(ЗаказПоставщику.Сумма     )           КАК Сумма,
	|		0           								КАК СуммаНДС" + ТекстВыборкиАртикула + "
	|	ИЗ
	|		Документ.ЗаказПоставщику.ВозвратнаяТара КАК ЗаказПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.Цена" + ТекстГруппировкиАртикулаИНоменклатуры + "
	|	) КАК ВложенныйЗапрос	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура," + ТекстПоляТовараДляТоваров + "
	|	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	NULL,
	|   4    КАК НомерТЧ,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	(1)                                         КАК ПризнакКорректировка,
	|	NULL КАК Серия" + ТекстПоляАртикула + "
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		КорректировкаЗаказаПоставщику.Номенклатура,
	|		КорректировкаЗаказаПоставщику.Цена                        КАК Цена,
	|       МИНИМУМ(КорректировкаЗаказаПоставщику.НомерСтроки)        КАК НомерСтроки,	
	|		СУММА(КорректировкаЗаказаПоставщику.Количество)           КАК Количество,
	|		СУММА(КорректировкаЗаказаПоставщику.Сумма     )           КАК Сумма,
	|		0           								КАК СуммаНДС" + ТекстВыборкиАртикула + "
	|	ИЗ
	|		Документ.КорректировкаЗаказаПоставщику.ВозвратнаяТара КАК КорректировкаЗаказаПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		КорректировкаЗаказаПоставщику.Ссылка.ЗаказПоставщику = &ТекущийДокумент
	|		И КорректировкаЗаказаПоставщику.Ссылка.Проведен      = Истина
	|
	|	СГРУППИРОВАТЬ ПО
	|		КорректировкаЗаказаПоставщику.Номенклатура,
	|		КорректировкаЗаказаПоставщику.Цена" + ТекстГруппировкиАртикулаИНоменклатуры + "
	|	) КАК ВложенныйЗапрос
	|
	|) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Товар,
	|	ВложенныйЗапрос.КодАртикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Характеристика,
	|   ВложенныйЗапрос.НомерТЧ,
	|	ВложенныйЗапрос.Серия
	|
	|УПОРЯДОЧИТЬ ПО ВложенныйЗапрос.НомерТЧ ВОЗР, ПризнакКорректировка, НомерСтроки
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_СчетЗаказ";
	

	Руководители = ФормированиеПечатныхФорм.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	// Выводим шапку накладной
	ОбластьМакета                          = Макет.ПолучитьОбласть("Заголовок");
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Заказ поставщику (на переработку)';uk='Замовлення постачальнику (на переробку)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Заказ поставщику';uk='Замовлення постачальнику'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
		ОбластьМакета.Параметры.ТекстПоставщик = НСтр("ru='Исполнитель:';uk='Виконавець:'",КодЯзыкаПечать);
	Иначе
		ОбластьМакета.Параметры.ТекстПоставщик = НСтр("ru='Поставщик:';uk='Постачальник:'",КодЯзыкаПечать);
	КонецЕсли;
	ОбластьМакета.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
		ОбластьМакета.Параметры.ТекстПокупатель = НСтр("ru='Заказчик:';uk='Замовник:'",КодЯзыкаПечать);
	Иначе
		ОбластьМакета.Параметры.ТекстПокупатель = НСтр("ru='Покупатель:';uk='Покупець:'",КодЯзыкаПечать);
	КонецЕсли;
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.Покупатель              = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	Суффикс = "";
	Если ПараметрыПечати.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезСкидок");
	Иначе
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодовИСкидок");
	КонецЕсли;
	ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)';uk=' Товари (роботи, послуги) '",КодЯзыкаПечать);
	ТабДокумент.Присоединить(ОбластьТовар);
	
	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
	
	ОбластьТовар = Макет.ПолучитьОбласть("Строка|Товар");
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезСкидок");
	Иначе
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодовИСкидок");
	КонецЕсли;
	Сумма    = 0;
	СуммаНДС = 0;
	НумераторСтрок = 0;
	ВсегоСкидок    = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл
		Если ВыборкаСтрокТовары.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		НумераторСтрок = НумераторСтрок + 1;
		ОбластьНомера.Параметры.НомерСтроки = НумераторСтрок;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.КодАртикул;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьТовар.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		ТабДокумент.Присоединить(ОбластьДанных);

		Скидка = 0;
		
		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;
	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ОбластьТовар = Макет.ПолучитьОбласть("Итого|Товар");
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезСкидок");
	Иначе
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодовИСкидок");
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		
		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		Иначе
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьТовар);
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоДополнительно|Товар");
			Если ПараметрыПечати.ВыводитьКоды Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ИтогоДополнительно|ТоварБезСкидок");
			Иначе
				ОбластьТовар = Макет.ПолучитьОбласть("ИтогоДополнительно|ТоварБезКодовИСкидок");
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьТовар);
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи                          = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Усього найменувань '",КодЯзыкаПечать) + НумераторСтрок
	                                       + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента, КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета                    = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказаКорректировки()

// Функция формирует табличный документ с печатной формой перечня давальческого
// сырья и материалов заказа с видом операции (на переработку)
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьПеречняМатериалов(Тип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДатаПоступления,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_ПереченьМатериалов";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Товар,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.Характеристика,
	|	NULL Как Серия,
	|	НомерСтроки,
	|	Метка
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена                        КАК Цена,
	|		СУММА(ЗаказПоставщику.Количество)           КАК Количество,
	|		СУММА(ЗаказПоставщику.Сумма     )           КАК Сумма,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры  КАК Характеристика,
	|		МИНИМУМ(НомерСтроки)                        КАК НомерСтроки,
	|		0                                           КАК Метка
	|	ИЗ
	|		Документ.ЗаказПоставщику.Материалы КАК ЗаказПоставщику
	|
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = ПолучитьОбщийМакет("СчетЗаказ");
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной

	Руководители = ФормированиеПечатныхФорм.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Заказ поставщику';uk='Замовлення постачальнику'",КодЯзыкаПечать) + Символы.ПС, КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ТекстПоставщик = НСтр("ru='Исполнитель:';uk='Виконавець:'",КодЯзыкаПечать);
	ОбластьМакета.Параметры.Поставщик              = Шапка.Поставщик;
	ОбластьМакета.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ТекстПокупатель = НСтр("ru='Заказчик:';uk='Замовник:'",КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.Покупатель              = Шапка.Организация;
	//ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодовИСкидок");
	
	ТабДокумент.Вывести(ОбластьНомера);
	ОбластьТовар.Параметры.Товар = НСтр("ru='Сырье, материалы';uk='Сировина, матеріали'",КодЯзыкаПечать);
	ТабДокумент.Присоединить(ОбластьТовар);
	ОбластьДанных.Параметры.Цена = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать);
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать);
	ТабДокумент.Присоединить(ОбластьСуммы);
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
	ОбластьТовар  = Макет.ПолучитьОбласть("Строка|ТоварБезКодовИСкидок");

	Сумма    = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьНомера);
		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
	ОбластьТовар  = Макет.ПолучитьОбласть("Итого|ТоварБезКодовИСкидок");
	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = Сумма;
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма;
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента, КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПеречняМатериалов()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	
	// Получить экземпляр документа на печать
	Если ИмяМакета      = "Заказ" Тогда

		// печать заявки от покупателя
		ТабДокумент     = ПечатьСчетаЗаказа(ИмяМакета);

	ИначеЕсли ИмяМакета = "ЗаказКорректировка" тогда
		
		// печать заявки от покупателя
		ТабДокумент 	= ПечатьСчетаЗаказаКорректировки(ИмяМакета);
		
	ИначеЕсли ИмяМакета      = "ЗаказПоДаннымПоставщика" Тогда

		// печать заявки от покупателя
		ТабДокумент     = ПечатьСчетаЗаказа(ИмяМакета);

	ИначеЕсли ИмяМакета = "ПереченьМатериалов" тогда
		
		Если НЕ(Материалы.Количество() > 0) Тогда
			Сообщить("Нет материалов в переработку!");
			Возврат;
		КонецЕсли;
		
		ТабДокумент = ПечатьПеречняМатериалов(ИмяМакета);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли; 

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), Ссылка);

КонецПроцедуры // Печать

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьСчетаЗаказа и из веб-приложения
//
// Параметры:
//  Тип - строка, содержит тип печатаемого документа (счет или заказ)
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьПараметрыПечатиСчетаЗаказа(Тип) Экспорт	
	
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	ПараметрыПечати = Новый Структура;
	Позиции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Контрагент КАК Поставщик,
	|	Организация КАК Руководители,
	|	Организация КАК Получатель,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("СчетНаОплату");
	
	// Выводим шапку накладной

	ПараметрыПечати.Вставить("УчитыватьНДС", Шапка.УчитыватьНДС);
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ПараметрыПечати.Вставить("ИНН", СведенияОПоставщике.ИНН);
		ПредставлениеПоставщикаДляПлатПоручения = "";
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
		КонецЕсли;
		ПараметрыПечати.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
	КонецЕсли; 

	ПараметрыПечати.Вставить("ЕстьСкидки", Ложь);

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	ПараметрыПечати.Вставить("ВыводитьКоды", Ложь);
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ПараметрыПечати.ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ПараметрыПечати.ВыводитьКоды = Истина;
		Колонка = "Код";
	КонецЕсли;
	
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", Колонка);
	КонецЕсли;


	// Вывести ИтогоНДС
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ПараметрыПечати.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:"));
	КонецЕсли;
	
	// Вывести Сумму прописью

	Возврат ПараметрыПечати;

КонецФункции //ПолучитьПараметрыПечатиСчетаЗаказа()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	СтруктураПечатныхФорм = Новый Структура("Заказ,ЗаказКорректировка,ЗаказПоДаннымПоставщика","Заказ поставщику","Заказ поставщику (с учетом корректировок)","Заказ поставщику (по данным поставщика)");
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
		СтруктураПечатныхФорм.Вставить("ПереченьМатериалов", "Перечень материалов для переработки");
	КонецЕсли;
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Очищает ненужные строки табличных частей
//
Процедура ОчиститьНенужныеТабличныеЧасти() Экспорт

	Если ВидОперации <> Перечисления.ВидыОперацийЗаказПоставщику.Оборудование Тогда
		Оборудование.Очистить();
	КонецЕсли;

	// Если договор с комитентом, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Услуги.Очистить();

	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
		Если ВозвратнаяТара.Количество() > 0 Тогда
			ВозвратнаяТара.Очистить();
		КонецЕсли;
	Иначе
		Если Материалы.Количество() > 0 Тогда
			Материалы.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		// Договор - внешнеэкономический
		ВозвратнаяТара.Очистить();
	КонецЕсли;

КонецПроцедуры // ОчиститьНенужныеТабличныеЧасти()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабличнаяЧасть, ЗаказПокупателя = Неопределено) Экспорт

	Если ЗначениеЗаполнено(ЗаказПокупателя.ДатаОтгрузки) И ЗначениеЗаполнено(ДатаПоступления)
	   И (ЗаказПокупателя.ДатаОтгрузки < ДатаПоступления) Тогда
#Если Клиент Тогда
		Предупреждение("Отгрузку по заказу покупателя необходимо осуществить раньше даты поступления по данному документу!");
#Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Отгрузку по заказу покупателя необходимо осуществить раньше даты поступления по данному документу!");
#КонецЕсли 
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		ЭтоТовары = Истина;
	Иначе
		ЭтоТовары = Ложь;
	КонецЕсли;
	
	Если ЭтоТовары Тогда
		ТоварТара = Перечисления.ТоварТара.Товар;
	Иначе
		ТоварТара = Перечисления.ТоварТара.Тара;
	КонецЕсли; 
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ТоварТара", ТоварТара);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Если ЭтоТовары Тогда
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	Иначе
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	КонецЕсли;

	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ЗаказыПокупателейОстатки.Номенклатура.СтавкаНДС       КАК СтавкаНДС,
	
	
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	ЗаказыПокупателейОстатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ЗаказыПокупателейОстатки.СуммаУпрОстаток              КАК Сумма,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток            КАК Заказано,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток            КАК ЗаказаноПоставщику,
	|	ТоварыВРезервеНаСкладах.КоличествоОстаток             КАК Зарезервировано
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ЗаказПокупателя
	|		                И СтатусПартии = &СтатусПартии) КАК ЗаказыПокупателейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ЗаказПокупателя
	|		                И ЗаказПоставщику <> &Ссылка
	|		                И ТоварТара = &ТоварТара) КАК ЗаказыПоставщикамОстатки
	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура 
	|		 И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, ДокументРезерва = &ЗаказПокупателя) КАК ТоварыВРезервеНаСкладах
	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ТоварыВРезервеНаСкладах.Номенклатура 
	|		 И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры
	|
	|ГДЕ 
	|	НЕ ЗаказыПокупателейОстатки.Номенклатура.Услуга
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Количество = ?(Выборка.Заказано = NULL, 0, Выборка.Заказано)
				   - ?(Выборка.Зарезервировано = NULL, 0, Выборка.Зарезервировано)
				   - ?(Выборка.ЗаказаноПоставщику = NULL, 0, Выборка.ЗаказаноПоставщику);
		Если Количество > 0 Тогда
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Номенклатура    = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Заказ			 = Выборка.ЗаказПокупателя;

			Если ЭтоТовары Тогда
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
				СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
				
				СтрокаТабличнойЧасти.Количество = Количество * Выборка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
														/ Выборка.Коэффициент;
			Иначе
				СтрокаТабличнойЧасти.Количество = Количество;														
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Получить нужные цены запросом
	НовыйВалютаДокумента    = ?(ЭтоТовары, ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов);
	СтруктураКурса          = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйВалютаДокумента, Дата);
	НовыйКурсДокумента      = СтруктураКурса.Курс;
	НовыйКратностьДокумента = СтруктураКурса.Кратность;

	СтруктураЗначенийЦен = Новый Структура;
	СтруктураЗначенийЦен.Вставить("ПерезаполнитьПроцентСкидкиНаценки", Ложь);
	СтруктураЗначенийЦен.Вставить("НовыйТипЦен",                       ТипЦен);
	СтруктураЗначенийЦен.Вставить("НовыйВалютаДокумента",              НовыйВалютаДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйКурсДокумента",                НовыйКурсДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйКратностьДокумента",           НовыйКратностьДокумента);
	СтруктураЗначенийЦен.Вставить("ТекущийВалютаДокумента",            ВалютаДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйУчитыватьНДС",                 ?(ЭтоТовары, УчитыватьНДС, Истина));
	СтруктураЗначенийЦен.Вставить("НовыйСуммаВключаетНДС",             ?(ЭтоТовары, СуммаВключаетНДС, Истина));
	СтруктураЗначенийЦен.Вставить("ЕстьСтавкаНДСВТабличнойЧасти",      ?(ЭтоТовары, Истина, Ложь));

	РезультатЗапросаЦен = Ценообразование.СформироватьЗапросПоЦенам(СтруктураЗначенийЦен, 
	                                                Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
	                                                ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"),
	                                                Дата, Контрагент, ДоговорКонтрагента);

	ВыборкаРезультатЗапросаЦен = РезультатЗапросаЦен.Выбрать();

	Для каждого СтрокаТабличнойЧасти из ТабличнаяЧасть Цикл
		Если СтрокаТабличнойЧасти.Цена = 0 Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			Ценообразование.ЗаполнитьЦенуВСтрокеТабличнойЧасти(ЭтотОбъект,
			                                   СтрокаТабличнойЧасти,
			                                   СтруктураПоиска,
			                                   ВыборкаРезультатЗапросаЦен,
			                                   СтруктураЗначенийЦен,
			                                   Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
			                                   ?(ЭтоТовары, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Неопределено));
			Если ЭтоТовары Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение");
			КонецЕсли;

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если ЭтоТовары Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

		КонецЕсли;
		Если ЭтоТовары Тогда
			ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамВнутреннийЗаказ(ТабличнаяЧасть, ВнутреннийЗаказ = Неопределено) Экспорт

	Если ЗначениеЗаполнено(ВнутреннийЗаказ.ДатаОтгрузки)
	   И ЗначениеЗаполнено(ДатаПоступления)
	      И ВнутреннийЗаказ.ДатаОтгрузки < ДатаПоступления Тогда
#Если Клиент Тогда
		Предупреждение  ("Отгрузку по внутреннему заказу необходимо осуществить раньше даты поступления по данному документу!");
#Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Отгрузку по внутреннему заказу необходимо осуществить раньше даты поступления по данному документу!");
#КонецЕсли 
		Возврат;
	КонецЕсли;

	ЭтоТовары = ТабличнаяЧасть = Товары;
	ТоварТара = ?(ЭтоТовары, Перечисления.ТоварТара.Товар, Перечисления.ТоварТара.Тара);
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр( "ТоварТара", ТоварТара);
	Запрос.УстановитьПараметр( "Ссылка",    Ссылка);

	Если ЭтоТовары Тогда
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	Иначе
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВнутреннийЗаказ", ВнутреннийЗаказ);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ТекстЗапросаПоНоменклатуре = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура 
	|   ИЗ  Документ.ВнутреннийЗаказ." + ?(ЭтоТовары, "Товары", "ВозвратнаяТара") + "
	|   ГДЕ Документ.ВнутреннийЗаказ." + ?(ЭтоТовары, "Товары", "ВозвратнаяТара") + ".Ссылка = &ВнутреннийЗаказ";

	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
	|	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	ЗаказыОстатки.Номенклатура.СтавкаНДС                           КАК СтавкаНДС,
	|	ЗаказыОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыОстатки.ВнутреннийЗаказ,
	|	ЗаказыОстатки.КоличествоОстаток КАК Заказано,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК ЗаказаноПоставщику,
	|	ТоварыВРезервеНаСкладах.КоличествоОстаток КАК Зарезервировано
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ВнутреннийЗаказ = &ВнутреннийЗаказ
	|                       И СтатусПартии = &СтатусПартии) КАК ЗаказыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ЗаказПокупателя = &ВнутреннийЗаказ
	|                       И ТоварТара = &ТоварТара) КАК ЗаказыПоставщикамОстатки
	|		ПО ЗаказыОстатки.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура 
	|		 И ЗаказыОстатки.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ДокументРезерва = &ВнутреннийЗаказ) КАК ТоварыВРезервеНаСкладах
	|		ПО ЗаказыОстатки.Номенклатура = ТоварыВРезервеНаСкладах.Номенклатура 
	|		 И ЗаказыОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Количество = ?(Выборка.Заказано           = NULL, 0, Выборка.Заказано)
				   - ?(Выборка.Зарезервировано    = NULL, 0, Выборка.Зарезервировано)
				   - ?(Выборка.ЗаказаноПоставщику = NULL, 0, Выборка.ЗаказаноПоставщику);
		Если Количество > 0 Тогда
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Номенклатура    = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество      = Количество;
			СтрокаТабличнойЧасти.Заказ			 = Выборка.ВнутреннийЗаказ;
			
			Если ЭтоТовары Тогда
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаХраненияОстатков;
				СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
				СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла; 
	
	// Получить нужные цены запросом
	НовыйВалютаДокумента    = ?(ЭтоТовары, ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов);
	СтруктураКурса          = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйВалютаДокумента, Дата);
	НовыйКурсДокумента      = СтруктураКурса.Курс;
	НовыйКратностьДокумента = СтруктураКурса.Кратность;

	СтруктураЗначенийЦен = Новый Структура;
	СтруктураЗначенийЦен.Вставить("ПерезаполнитьПроцентСкидкиНаценки", Ложь);
	СтруктураЗначенийЦен.Вставить("НовыйТипЦен",                       ТипЦен);
	СтруктураЗначенийЦен.Вставить("НовыйВалютаДокумента",              НовыйВалютаДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйКурсДокумента",                НовыйКурсДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйКратностьДокумента",           НовыйКратностьДокумента);
	СтруктураЗначенийЦен.Вставить("ТекущийВалютаДокумента",            ВалютаДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйУчитыватьНДС",                 ?(ЭтоТовары, УчитыватьНДС, Истина));
	СтруктураЗначенийЦен.Вставить("НовыйСуммаВключаетНДС",             ?(ЭтоТовары, СуммаВключаетНДС, Истина));
	СтруктураЗначенийЦен.Вставить("ЕстьСтавкаНДСВТабличнойЧасти",      ?(ЭтоТовары, Истина, Ложь));

	РезультатЗапросаЦен = Ценообразование.СформироватьЗапросПоЦенам(СтруктураЗначенийЦен, 
	                                                  Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
	                                                  ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"),
	                                                  Дата, Контрагент, ДоговорКонтрагента);

	ВыборкаРезультатЗапросаЦен = РезультатЗапросаЦен.Выбрать();

	Для каждого СтрокаТабличнойЧасти из ТабличнаяЧасть Цикл
		Если СтрокаТабличнойЧасти.Цена = 0 Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			Ценообразование.ЗаполнитьЦенуВСтрокеТабличнойЧасти(ЭтотОбъект,
			                                   СтрокаТабличнойЧасти,
			                                   СтруктураПоиска,
			                                   ВыборкаРезультатЗапросаЦен,
			                                   СтруктураЗначенийЦен,
			                                   Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
			                                   ?(ЭтоТовары, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Неопределено));

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если ЭтоТовары Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткамВнутреннийЗаказ()

// Заполняет табличную часть "Товары" по остаткам заказа покупателя
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТоварыПоЗаказуПокупателю(ЗаказПокупателя) Экспорт

	ЗаполнитьТабличнуюЧастьПоОстаткам(Товары, ЗаказПокупателя);

КонецПроцедуры // ЗаполнитьТоварыПоЗаказуПокупателю()

// Заполняет табличную часть "Возвратная тара" по остаткам заказа покупателя
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьВозвратнуюТаруПоЗаказуПокупателю(ЗаказПокупателя) Экспорт

	ЗаполнитьТабличнуюЧастьПоОстаткам(ВозвратнаяТара, ЗаказПокупателя);

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоЗаказуПокупателю()

// Процедура заполняет материалы по спецификациям.
//
Процедура ЗаполнитьМатериалыПоСпецификации() Экспорт
	
	Если Материалы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть ""Материалы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		Материалы.Очистить();
	КонецЕсли;
	
	ТабличнаяЧастьМатериалы = Материалы.Выгрузить();
	ТабличнаяЧастьПродукция = Товары.Выгрузить();
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьПродукция Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДопКолонок = Новый Структура();
	Отбор = Новый Структура();

	//Смартис Лиманчук начало 29.12.2012
	//УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата);
	Отбор.Вставить("Разузлован", Истина);
	УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата, 0);
	//Смартис Лиманчук окончание 29.12.2012

	ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент", "Количество");
	
	Материалы.Загрузить(ТабличнаяЧастьМатериалы);
	
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
		
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Ложь);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()

// Заполняет табличную часть при оперативном проведении
//
// Параметры:
//  Параметры - <Структура> - список видов документов-заказ и структура имен измерений-заказов
//
Процедура ЗаполнитьТабличныеЧастиПередПроведением(Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Параметры) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросОбъединение = "";
	Приоритет = 0;
	Для каждого СтрокаСписка Из Параметры.СписокДокументов Цикл
		ЗапросОбъединение = ЗапросОбъединение + ?(ЗапросОбъединение = "", "", Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС) + "
		|ВЫБРАТЬ 
		|	" + Приоритет + " КАК Приоритет,
		|	ЗаказыОстатки." + Параметры.СтруктураИмен[СтрокаСписка.Значение + "Порядок"] + " КАК Порядок,
		|	ЗаказыОстатки." + Параметры.СтруктураИмен[СтрокаСписка.Значение + "Заказ"] +" КАК Заказ,
		|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказыОстатки.КоличествоОстаток
		|
		|ИЗ РегистрНакопления." + СтрокаСписка.Значение + ".Остатки(
		|		&ДатаОстатков,
		|		Номенклатура В (&МассивНоменклатура)
		|		    И ХарактеристикаНоменклатуры В (&МассивХарактеристикаНоменклатуры)) КАК ЗаказыОстатки";
		
	КонецЦикла; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗапросОбъединение.Приоритет КАК Приоритет,
	|	ЗапросОбъединение.Заказ КАК Заказ,
	|	ЗапросОбъединение.Номенклатура КАК Номенклатура,
	|	ЗапросОбъединение.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗапросОбъединение.КоличествоОстаток
	|		- ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток, 0)
	|		- ЕСТЬNULL(РазмещениеЗаказовПокупателей.КоличествоОстаток, 0) КАК ОсталосьОбеспечить
	|ИЗ
	|	(" + ЗапросОбъединение + ") КАК ЗапросОбъединение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	|		&ДатаОстатков,
	|		Номенклатура В (&МассивНоменклатура)
	|		    И ХарактеристикаНоменклатуры В (&МассивХарактеристикаНоменклатуры)) КАК ТоварыВРезервеНаСкладах
	|		ПО ЗапросОбъединение.Заказ = ТоварыВРезервеНаСкладах.ДокументРезерва
	|			И ЗапросОбъединение.Номенклатура = ТоварыВРезервеНаСкладах.Номенклатура
	|			И ЗапросОбъединение.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(
	|		&ДатаОстатков,
	|		Номенклатура В (&МассивНоменклатура)
	|		    И ХарактеристикаНоменклатуры В (&МассивХарактеристикаНоменклатуры)) КАК РазмещениеЗаказовПокупателей
	|		ПО ЗапросОбъединение.Заказ = РазмещениеЗаказовПокупателей.ЗаказПокупателя
	|			И ЗапросОбъединение.Номенклатура = РазмещениеЗаказовПокупателей.Номенклатура
	|			И ЗапросОбъединение.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ЗапросОбъединение.КоличествоОстаток
	|		- ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток, 0) 
	|		- ЕСТЬNULL(РазмещениеЗаказовПокупателей.КоличествоОстаток, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗапросОбъединение.Порядок, Приоритет";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	Запрос.УстановитьПараметр("МассивНоменклатура", Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("МассивХарактеристикаНоменклатуры", Товары.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выгрузить();
	
	СписокCвойств = "Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,ЕдиницаИзмеренияМест,Коэффициент,СтавкаНДС,Цена,ПлановаяСебестоимость,Спецификация";
	
	КопияТовары = Товары.Выгрузить();
	КопияТовары.Свернуть(СписокCвойств, "Количество");
	
	КопияТовары.Колонки.Добавить("КоличествоЕдиницХранения");
	КопияТовары.Колонки.Добавить("ЕдиницаХраненияОстатковКоэффициент");
	КопияТовары.Колонки.Добавить("ЕдиницаИзмеренияКоэффициент");
	
	Товары.Очистить();
	Для каждого СтрокаКопияТовары Из КопияТовары Цикл
		
		// Получим коэффициенты
		СтрокаКопияТовары.ЕдиницаХраненияОстатковКоэффициент = СтрокаКопияТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		СтрокаКопияТовары.ЕдиницаИзмеренияКоэффициент = СтрокаКопияТовары.ЕдиницаИзмерения.Коэффициент;
		
		// Пересчитаем в единицы хранения
		СтрокаКопияТовары.КоличествоЕдиницХранения = СтрокаКопияТовары.Количество
		* СтрокаКопияТовары.Коэффициент
		/ СтрокаКопияТовары.ЕдиницаХраненияОстатковКоэффициент;
		
		
		СтруктураПоиска = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
		СтруктураПоиска.Вставить("Номенклатура",СтрокаКопияТовары.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры",СтрокаКопияТовары.ХарактеристикаНоменклатуры);
		
		ОсталосьЗаказать = СтрокаКопияТовары.КоличествоЕдиницХранения;
		НайденныеСтроки = ВыборкаНоменклатура.НайтиСтроки(СтруктураПоиска);
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если ОсталосьЗаказать <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.ОсталосьОбеспечить <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТовары = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары,СтрокаКопияТовары,СписокCвойств);
			
			Если ОсталосьЗаказать < Строка.ОсталосьОбеспечить Тогда
				КоэффСписания = ОсталосьЗаказать/Строка.ОсталосьОбеспечить;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;
			
			СписанноеКоличество = Окр(Строка.ОсталосьОбеспечить * КоэффСписания, 3, РежимОкругления.Окр15как20);
			
			// В единицах документа
			СписанноеКоличествоВДок = Окр((Строка.ОсталосьОбеспечить 
			* СтрокаКопияТовары.ЕдиницаХраненияОстатковКоэффициент
			/ СтрокаКопияТовары.ЕдиницаИзмеренияКоэффициент)
			* КоэффСписания, 3, РежимОкругления.Окр15как20);
			
			СписанноеКоличествоДок = Строка.ОсталосьОбеспечить * КоэффСписания;
			СтрокаТовары.Количество = СписанноеКоличествоВДок;
			СтрокаТовары.Заказ = Строка.Заказ;
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТовары, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТовары, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТовары, ЭтотОбъект);
			
			ОсталосьЗаказать = ОсталосьЗаказать - СписанноеКоличество;
			
			// Уменьшаем количество в строке остатков
			Строка.ОсталосьОбеспечить = Строка.ОсталосьОбеспечить - СписанноеКоличество;
		КонецЦикла;	
		
		Если ОсталосьЗаказать > 0 Тогда
			СтрокаТовары = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары,СтрокаКопияТовары,СписокCвойств);
			
			СписанноеКоличествоВДок = Окр((ОсталосьЗаказать 
			* СтрокаКопияТовары.ЕдиницаХраненияОстатковКоэффициент
			/ СтрокаКопияТовары.ЕдиницаИзмеренияКоэффициент), 3, РежимОкругления.Окр15как20);
			
			СтрокаТовары.Количество = СписанноеКоличествоВДок;
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТовары, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТовары, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТовары, ЭтотОбъект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// По виду операции определяет статус партии товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартии(ИмяТЧ) 

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();

	Если ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ПокупкаКомиссия Тогда

		Статус = Перечисления.СтатусыПартийТоваров.Купленный; 

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда

		Статус = Перечисления.СтатусыПартийТоваров.ВПереработку; 
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Оборудование Тогда
		
		Если ИмяТЧ = "Товары" Тогда
			Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
		Иначе
			Статус = Перечисления.СтатусыПартийТоваров.Оборудование; 
		КонецЕсли; 
		
	Иначе

		Сообщить("По виду операции """ +
		ВидОперации + """ не удалось определить статус партии товаров!", СтатусСообщения.Важное); 
	КонецЕсли; 

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);


		// Рассчитаем сумму взаиморасчетов
		СтрокаТаблицы.СуммаУпр    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);
										 
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Услуги",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);


		// Рассчитаем сумму взаиморасчетов
		СтрокаТаблицы.СуммаУпр    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);
										 
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
 	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("СуммаУпр",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Рассчитаем сумму взаиморасчетов
		СтрокаТаблицы.СуммаУпр    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);

		СтрокаТаблицы.НДС = 0;


	КонецЦикла;

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, 
					|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");

	// Склад заполняем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	Если Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ можно выписывать только по договору, взаиморасчеты по которому ведутся по заказам или по договору в целом!", Отказ, Заголовок);
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок, ИмяТабЧасти = "Товары")

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
		Новый Структура("Номенклатура, Количество, ЕдиницаИзмерения");
	Если Не ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
		СтруктураОбязательныхПолей.Вставить("Сумма");
	КонецЕсли;
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Содержание, Количество, Сумма");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь бланков быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетБланковСтрогогоУчета(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Функция удаляет из исходной таблицы строки не требующие размещения
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТоварам)

	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРазмещение;
	
КонецФункции // СоздатьТаблицуРазмещенияЗаказов()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаОборудование,
	                          Отказ, Заголовок);

	// Движения по документу.
	Если Не Отказ Тогда
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			
			// Проконтролируем лимиты возвратной тары
			УправлениеЗапасами.КонтрольЛимитовВозвратнойТарыПоставщика(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если СуммаДокумента <>0 Тогда
			НаборДвижений = Движения.РасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка                = Ссылка; 
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;
		
        КонецЕсли;

		Если НЕ Отказ Тогда
			
			НаборДвижений = Движения.ЗаказыПоставщикам;
				
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",    ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам",    ТаблицаПоУслугам);
			СтруктТаблицДокумента.Вставить("ТаблицаОборудование", ТаблицаОборудование);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",       ТаблицаПоТаре);
					
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику",    Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       ОпределитьСтатусПартии("Товары"),                 "ТаблицаПоТоварам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       ОпределитьСтатусПартии("Оборудование"),           "ТаблицаОборудование");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоУслугам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			ТаблицаПоТоварамРазмещение = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТоварам);
			ТаблицаПоТареРазмещение    = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамРазмещение.Количество() > 0 ИЛИ ТаблицаПоТареРазмещение.Количество() > 0 Тогда 

				// По регистру РазмещениеЗаказовПокупателей
				НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
					
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРазмещение);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРазмещение);
							
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирования движений по регистрам в случае заказа на переработку
// 
Процедура ДвиженияПоРегистрамПереработка(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоМатериалам, ТаблицаПоУслугам)
	Если СуммаДокумента <> 0 Тогда
		НаборДвижений = Движения.РасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
		СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
		СтрокаДвижений.Контрагент 			 = Контрагент;
		СтрокаДвижений.Организация 			 = Организация;
		СтрокаДвижений.Сделка                = Ссылка; 
		СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
												СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												СтруктураШапкиДокумента.КурсДокумента, 
												СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												СтруктураШапкиДокумента.КратностьДокумента, 
												СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.ВыполнитьРасход();
	КонецЕсли;
	
	НаборДвиженийПост = Движения.ЗаказыПоставщикам;
	ТаблицаДвиженийПост = НаборДвиженийПост.Выгрузить();

	НаборДвиженийПокуп = Движения.ЗаказыПокупателей;
	ТаблицаДвиженийПокуп = НаборДвиженийПокуп.Выгрузить();
	
	// 1. Формирование движений по регистру ЗаказыПоставщикам
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвиженийПост);
	
	ТаблицаДвиженийПост.ЗаполнитьЗначения( ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийПост.ЗаполнитьЗначения( Перечисления.СтатусыПартийТоваров.ВПереработку, "СтатусПартии");
	ТаблицаДвиженийПост.ЗаполнитьЗначения( Ссылка, "ЗаказПоставщику");
	
	// Запись движений в регистры
	НаборДвиженийПост.мПериод = Дата;
	НаборДвиженийПост.мТаблицаДвижений = ТаблицаДвиженийПост;
	НаборДвиженийПост.ВыполнитьПриход();
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвиженийПост = НаборДвиженийПост.Выгрузить();
	ТаблицаДвиженийПост.Очистить();
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвиженийПост);
	
	ТаблицаДвиженийПост.ЗаполнитьЗначения( ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийПост.ЗаполнитьЗначения( Перечисления.СтатусыПартийТоваров.ВПереработку, "СтатусПартии");
	ТаблицаДвиженийПост.ЗаполнитьЗначения( Ссылка, "ЗаказПоставщику");
	
	// Запись движений в регистры
	НаборДвиженийПост.мПериод = Дата;
	НаборДвиженийПост.мТаблицаДвижений = ТаблицаДвиженийПост;
	НаборДвиженийПост.ВыполнитьПриход();
	
	// 2. Формирование движений по регистру ЗаказыПокупателей
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвиженийПокуп);
	
	ТаблицаДвиженийПокуп.ЗаполнитьЗначения( ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийПокуп.ЗаполнитьЗначения( Перечисления.СтатусыПартийТоваров.ВПереработку, "СтатусПартии");
	ТаблицаДвиженийПокуп.ЗаполнитьЗначения( Ссылка, "ЗаказПокупателя");
	
	// 3. Формирование движений по регистру РазмещениеЗаказовПокупателей
	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаПоТоварамРазмещение.Количество() > 0 Тогда 
		
		// По регистру РазмещениеЗаказовПокупателей
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРазмещение);
							
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", Ссылка);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Товар);

		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
	КонецЕсли;
	
	НаборДвиженийПокуп.мПериод = Дата;
	НаборДвиженийПокуп.мТаблицаДвижений = ТаблицаДвиженийПокуп;
	НаборДвиженийПокуп.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияПоРегистрамПереработка()

// Процедура пересчитывает сумму в валюту упр. и регл. учета
//
Процедура ПодготовитьТабМатериалов(СтруктураШапкиДокумента, ТаблицаПоМатериалам)
	
	ТаблицаПоМатериалам.Колонки.Добавить( "СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаПоМатериалам.Колонки.Добавить( "СуммаУпр",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Для Каждого СтрокаТЧ Из ТаблицаПоМатериалам Цикл
		
		СтрокаТЧ.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТЧ.Сумма,
			ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента,
			КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента,
			КратностьВзаиморасчетов);
			
		СтрокаТЧ.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТЧ.Сумма,
			ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТабМатериалов()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ОчиститьНенужныеТабличныеЧасти();

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Оборудование);
	
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, услуги);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Оборудование);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	СуммаДокумента = СуммаДокумента + Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	СуммаДокумента = СуммаДокумента + Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Оборудование");

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	//ИЗМЕНЕНО Верескул Игорь(Начало 22.03.2018
	Если  ТребуетсяПодписьГенеральногоДиректора ИЛИ ТребуетсяПодписьРуководителя ИЛИ ТребуетсяПодписьФинансовогоОтдела ИЛИ СтатусОшибки Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Внимание! Не установлены все необходимые подписи!!! Документ не будет проведен!";
		Сообщение.Сообщить(); 
		Отказ = Истина;
		Возврат;
    КонецЕсли; 
	
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета"        , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"               , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "КонтролироватьЧислоДнейЗадолженности", "КонтролироватьЧислоДнейЗадолженности");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "КонтролироватьСуммуЗадолженности"    , "КонтролироватьСуммуЗадолженности");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ДопустимоеЧислоДнейЗадолженности"    , "ДопустимоеЧислоДнейЗадолженности");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ДопустимаяСуммаЗадолженности"        , "ДопустимаяСуммаЗадолженности");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                         , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"                 , "ВидСклада"                         , "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "Заказ");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"                , "Содержание");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");

	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "Заказ");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Оборудование".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");

	РезультатЗапросаОборудование = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураПолей);
	ТаблицаОборудование = ПодготовитьТаблицуТоваров(РезультатЗапросаОборудование, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары", "Услуги", "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаОборудование,   СтруктураШапкиДокумента, Отказ, Заголовок, "Оборудование");
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
			
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
			СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
			СтруктураПолей.Вставить("Количество",   "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
			СтруктураПолей.Вставить("Сумма",        "Сумма");
			СтруктураПолей.Вставить("Цена",         "Цена");
			СтруктураПолей.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
			
			ТаблицаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей).Выгрузить();
			ПодготовитьТабМатериалов( СтруктураШапкиДокумента, ТаблицаПоМатериалам);
			
			ДвиженияПоРегистрамПереработка(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоМатериалам, ТаблицаПоУслугам);
			
		Иначе
			
			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
			                    ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаОборудование,
			                    Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    ДокументОснование = Основание;
	ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ПокупкаКомиссия;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
		// Заполнение шапки
		КонтактноеЛицоКонтрагента = Основание.КонтактноеЛицо;
		Контрагент     = Основание.Контрагент;
		Организация 	  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		// Заполнение шапки
		ВалютаДокумента                   = Основание.ВалютаДокумента;
		ИспользоватьПлановуюСебестоимость = Основание.ИспользоватьПлановуюСебестоимость;
		ИтогПлановаяСебестоимость         = Основание.ИтогПлановаяСебестоимость;
		Комментарий                       = Основание.Комментарий;
		КратностьВзаиморасчетов           = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов                = Основание.КурсВзаиморасчетов;
		Подразделение                     = Основание.Подразделение;
		СтруктурнаяЕдиница                = Основание.СтруктурнаяЕдиница;
		СуммаВключаетНДС                  = Основание.СуммаВключаетНДС;
		СуммаДокумента                    = Основание.СуммаДокумента;
		УчитыватьНДС                      = Основание.УчитыватьНДС;
		
		Склад = ?(ТипЗнч(Основание.СкладГруппа) = Тип("СправочникСсылка.Склады"), Основание.СкладГруппа, Неопределено);
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		#Если Клиент Тогда
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			ВвестиЗначение(Склад, "Выберите склад", Тип("СправочникСсылка.Склады"));
		КонецЕсли;
		#КонецЕсли
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ПокупкаКомиссия;
		КонецЕсли;
		ОрганизацияКонтрагента = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.Контрагент);
		Если ЗначениеЗаполнено(ОрганизацияКонтрагента) Тогда  //межфирменные продажи - просто копируем табличные части

			Контрагент  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации( Основание.Организация);
			Организация = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту( Основание.Контрагент);
			
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
			СкопироватьТабличнуюЧасть(Основание, "ВозвратнаяТара");
			СкопироватьТабличнуюЧасть(Основание, "Материалы");
			СкопироватьТабличнуюЧасть(Основание, "Товары");
			СкопироватьТабличнуюЧасть(Основание, "Услуги");

		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			Организация = Основание.Организация;
             //копируем табличные части
			СкопироватьТабличнуюЧасть(Основание, "ВозвратнаяТара");
			СкопироватьТабличнуюЧасть(Основание, "Материалы");
			СкопироватьТабличнуюЧасть(Основание, "Товары");
			СкопироватьТабличнуюЧасть(Основание, "Услуги");

		Иначе	
			Организация = Основание.Организация;

			//переносим в документ необеспеченную часть заказа покупателя
			ЗаполнитьТабличнуюЧастьНеобеспеченнойЧастьюЗаказа(Товары, Основание);
			ЗаполнитьТабличнуюЧастьНеобеспеченнойЧастьюЗаказа(ВозвратнаяТара, Основание);
			//ИЗМЕНЕНО Верескул Игорь(Начало 31.05.2021
			//Для маркетинга
			СкопироватьТабличнуюЧасть(Основание, "Услуги");
			
			//Окончание)Верескул Игорь 
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

		// Заполнение шапки
		ВалютаДокумента    = Основание.ВалютаДокумента;
		ВремяНапоминания   = Основание.ВремяНапоминания;
		ДатаОплаты         = Основание.ДатаОплаты;
		ДатаПоступления    = Основание.ДатаПоступления;
		ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		ИспользоватьПлановуюСебестоимость = Основание.ИспользоватьПлановуюСебестоимость;
		ИтогПлановаяСебестоимость         = Основание.ИтогПлановаяСебестоимость;
		КратностьВзаиморасчетов           = Основание.КратностьВзаиморасчетов;
		Комментарий             = Основание.Комментарий;
		КонтактноеЛицоКонтрагента         = Основание.КонтактноеЛицоКонтрагента;
		Контрагент              = Основание.Контрагент;
		КурсВзаиморасчетов = Основание.КурсВзаиморасчетов;
		НапомнитьОСобытии  = Основание.НапомнитьОСобытии;
		Организация        = Основание.Организация;
		Подразделение      = Основание.Подразделение;
		Склад              = Основание.Склад;
		СтруктурнаяЕдиница = Основание.СтруктурнаяЕдиница;
		СуммаВключаетНДС   = Основание.СуммаВключаетНДС;
		СуммаДокумента     = Основание.СуммаДокумента;
		ТипЦен             = Основание.ТипЦен;
		УчитыватьНДС       = Основание.УчитыватьНДС;
		Если Основание.Оборудование.Количество()>0 Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Оборудование;
		КонецЕсли;
		
		УправлениеЗаказами.УстановитьДатуОплатыПоДоговору(ЭтотОбъект);
        СкопироватьТабличнуюЧасть(Основание, "ВозвратнаяТара");
		СкопироватьТабличнуюЧасть(Основание, "Оборудование");
		СкопироватьТабличнуюЧасть(Основание, "Товары");
		// Скопировать бланки в ТЧ товары
		СкопироватьТабличнуюЧасть(Основание, "Товары", "БланкиСтрогогоУчета");
		СкопироватьТабличнуюЧасть(Основание, "Услуги");
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура СкопироватьТабличнуюЧасть(Основание, ИмяТабЧасти, ИмяТабЧастиИсточник = Неопределено)
	
	Для Каждого ТекСтрока Из Основание[?(ИмяТабЧастиИсточник=Неопределено, ИмяТабЧасти, ИмяТабЧастиИсточник)] Цикл
    	Если ИмяТабЧасти = "Товары" И ТекСтрока.Номенклатура.Комплект Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЭтотОбъект[ИмяТабЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		Если ИмяТабЧасти = "Товары" ИЛИ  ИмяТабЧасти = "ВозвратнаяТара" Тогда
			НоваяСтрока.Заказ = Основание;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьНеобеспеченнойЧастьюЗаказа(ТабЧасть, Основание)
	ЭтоТовары = ТабЧасть=Товары;
	Запрос = новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|ОстаткиЗаказы.Номенклатура,
	|//ПОЛЕ_Характеристика,
	|ОстаткиЗаказы.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|ОстаткиЗаказы.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|ОстаткиЗаказы.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|ОстаткиЗаказы.КоличествоОстаток - ЕстьNull(ОстаткиРезервы.КоличествоОстаток,0)-ЕстьNull(ОстаткиРазмещение.КоличествоОстаток,0) КАК Количество
	|ИЗ РегистрНакопления.ЗаказыПокупателей.Остатки(,ЗаказПокупателя=&Основание И СтатусПартии=&СтатусПартии) КАК ОстаткиЗаказы
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(,ДокументРезерва=&Основание) КАК ОстаткиРезервы
	|ПО ОстаткиЗаказы.Номенклатура = ОстаткиРезервы.Номенклатура 
	|//СОЕДИНЕНИЕ_Резервы_Характеристика
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНАкопления.РазмещениеЗаказовПокупателей.Остатки(,ЗаказПокупателя=&Основание) КАК ОстаткиРазмещение
	|ПО ОстаткиЗаказы.Номенклатура = ОстаткиРазмещение.Номенклатура
	|//СОЕДИНЕНИЕ_Размещение_Характеристика
	|ГДЕ НЕ ОстаткиЗаказы.Номенклатура.Комплект  И  НЕ ОстаткиЗаказы.Номенклатура.Услуга  И
	|ОстаткиЗаказы.КоличествоОстаток - ЕстьNull(ОстаткиРезервы.КоличествоОстаток,0)-ЕстьNull(ОстаткиРазмещение.КоличествоОстаток,0)>=0 ";
	Если ЭтоТовары Тогда
		ТекстЗапроса = стрЗаменить(ТекстЗапроса,"//ПОЛЕ_Характеристика","ОстаткиЗаказы.ХарактеристикаНоменклатуры");
		ТекстЗапроса = стрЗаменить(ТекстЗапроса,"//СОЕДИНЕНИЕ_Резервы_Характеристика","И ОстаткиЗаказы.ХарактеристикаНоменклатуры = ОстаткиРезервы.ХарактеристикаНоменклатуры");
		ТекстЗапроса = стрЗаменить(ТекстЗапроса,"//СОЕДИНЕНИЕ_Размещение_Характеристика","И ОстаткиЗаказы.ХарактеристикаНоменклатуры = ОстаткиРазмещение.ХарактеристикаНоменклатуры");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Основание",Основание);
	Запрос.УстановитьПараметр("СтатусПартии",?(ЭтоТовары,Перечисления.СтатусыПартийТоваров.Купленный,Перечисления.СтатусыПартийТоваров.ВозвратнаяТара));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Если Выборка.Количество<=0 Тогда Продолжить; КонецЕсли;
		НоваяСтрока = ТабЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		НоваяСтрока.Заказ = Основание;
		Если ЭтоТовары Тогда
			ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(НоваяСтрока, ЭтотОбъект, мВалютаРегламентированногоУчета);
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
    ПодписьГенеральногоДиректора = Справочники.Пользователи.ПустаяСсылка();
    
    ПодписьФинансовогоОтдела  = Справочники.Пользователи.ПустаяСсылка();
    
    ПодписьРуководителя = Справочники.Пользователи.ПустаяСсылка();
    СтатусОшибки = Ложь;
КонецПроцедуры



мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
