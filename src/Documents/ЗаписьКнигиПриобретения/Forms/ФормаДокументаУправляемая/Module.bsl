////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Процедура УстановитьВидимость()
	
	УстановитьВидимостьСчетаУчетаНДСВТабличныхЧастях();
	Если НЕ ЗначениеЗаполнено(Объект.СчетНДС) Тогда
		Элементы.СубконтоДт1.Видимость = Ложь;
		Элементы.СубконтоДт2.Видимость = Ложь;
		Элементы.СубконтоДт3.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСчетаУчетаНДСВТабличныхЧастях()
	// Видимость счета учета НДС в табличных частях - только для старых документов, в которых уже были заполнены эти счета
	Элементы.ТоварыСчетУчетаНДС.Видимость  = ОбработкаТабличныхЧастей.ЕстьЗаполненныйСчетУчетаНДСВТабличнойЧасти(Объект.Товары);
КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора) Экспорт

	Перем Номенклатура, Цена, ЕдиницаИзмерения, ЕдиницаИзмеренияМест, Количество, Коэффициент, СведенияЕдиницаИзмеренияМест;
	Перем ХарактеристикаНоменклатуры, СерияНоменклатуры;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура",					Номенклатура);
	ЗначениеВыбора.Свойство("Количество",					Количество);
	ЗначениеВыбора.Свойство("Цена", 						Цена);

	// Всегда добавляем новую строку в табличную часть, так как Наименование товара есть строка, а не ссылка на справочник
 		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаТабличнойЧасти.НаименованиеТовара			= Номенклатура;
		СтрокаТабличнойЧасти.Количество       			= Количество;
		
		//Заполним реквизиты новой строки табличной части из реквизитов шапки
		Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.ЗаказПоставщику = Объект.Сделка;
		КонецЕсли;
		РассчитатьСуммуДокумента();

КонецПроцедуры //

&НаКлиенте
Процедура ДействиеПодбор(ИмяТабличнойЧасти)
	ЕстьУслуги = Ложь;
	Если ИмяТабличнойЧасти = "Товары" Тогда
		Команда = "ПодборВТабличнуюЧастьТовары";
	КонецЕсли;
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ВременнаяДатаРасчетов);
	
	РаботаСДиалогамиКлиент.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
		
КонецПроцедуры //

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Это существующий документ. 
		// Проверим, что его можно менять.
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(РеквизитФормыВЗначение("Объект"), ЭтаФорма);

	КонецЕсли;
		
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РассчитатьСуммуДокумента(Истина);
	УстановитьВидимость();
	
	УстановитьВидимостьСубконтоДт(Объект.СчетНДС); 	

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Перем Команда;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора("Товары", ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ ДАННЫХ ИЗ НАСТРОЕК

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	ХранилищаНастроек.ДанныеФорм.ДобавитьДополнительныеДанныеВНастройку(Объект, Настройки, Документы.ПоступлениеТоваровУслуг.СтруктураДополнительныхДанныхФормы());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектДополнительнымиДанными(Объект, Настройки, Документы.ПоступлениеТоваровУслуг.СтруктураДополнительныхДанныхФормы());
	Модифицированность = Истина;
	
	// Заполним курс и кратность валюты
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("ВалютаДокумента", Настройки["Объект.ВалютаДокумента"]);
	ДанныеДляЗаполнения.Вставить("Дата",            Объект.Дата);
	ЗаполнитьЗначенияСвойств(Объект, РаботаСДиалогамиСервер.ПолучитьКурсВалюты(ДанныеДляЗаполнения));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ИЗМЕНЕНИЯ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, УчитыватьНДС, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияДляЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Объект.Номер) Тогда
		ПрефиксацияОбъектовСобытия.ОчиститьНомерОбъекта(Объект.Номер, Объект.Организация);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНДСПриИзменении(Элемент)
	
	УстановитьВидимостьСубконтоДт(Объект.СчетНДС);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСубконтоДт(Счет)
	Если ЗначениеЗаполнено(Счет) Тогда
		КоличествоСубконто = 0;
		МассивЗаголовков = Новый Массив;
			
		ПолучитьПараметрыСчета(Объект.СчетНДС, КоличествоСубконто, МассивЗаголовков);
		
		Для ном = 1 По 3 Цикл
			Если ном <= КоличествоСубконто Тогда
				Элементы["СубконтоДт" + ном].Видимость = Истина;
				Элементы["СубконтоДт" + ном].Заголовок = МассивЗаголовков[ном-1];
			Иначе
				Элементы["СубконтоДт" + ном].Видимость = Ложь;
				Элементы["СубконтоДт" + ном].Заголовок = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для ном = 1 По 3 Цикл
			Элементы["СубконтоДт" + ном].Видимость = Ложь;
			Элементы["СубконтоДт" + ном].Заголовок = Ложь;
		КонецЦикла;
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ПолучитьПараметрыСчета(Счет, Количество, Заголовки)
	
	Количество = Счет.ВидыСубконто.Количество();
	
	индекс = 1;
	Пока индекс <= Счет.ВидыСубконто.Количество() Цикл
		
		Заголовки.Добавить(Счет.ВидыСубконто[индекс - 1].ВидСубконто.Наименование);	
		индекс = индекс + 1;
	КонецЦикла;	
	 	
КонецПроцедуры	

&НаСервере
Функция ПолучитьНазваниеНалоговойДекларации()	
	
	Возврат Перечисления.ВидыНалоговыхДеклараций.ДекларацияПоНДС;      
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОВТОРЯЮЩИЕСЯ ДЕЙСТВИЯ ПРИ ИЗМЕНЕНИИ РАЗНЫХ РЕКВИЗИТОВ
&НаКлиенте
Процедура РассчитатьСуммуДокумента(РасчитатьТолькоСуммуНДС = Ложь)
	НДСВсего = Объект.Товары.Итог("СуммаНДС");
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ДАННЫХ В ШАПКЕ

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
	
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения, СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруПараметровДляРасчетаСуммы()
	Возврат Новый Структура("УчитыватьНДС,СуммаВключаетНДС",  Истина, Ложь);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ДАННЫХ В ТАБЛИЧНОЙ ЧАСТИ
&НаСервереБезКонтекста
Функция ИзменениеНалоговогоНазначенияСервер(ДанныеДляЗаполнения)
	
	ЗначенияДляЗаполнения = РаботаСДиалогамиСервер.ИзменениеНалоговогоНазначения(ДанныеДляЗаполнения);
	
	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ИзменениеНалоговогоНазначенияКлиент(СтрокаТабличнойЧасти)
	ДанныеОбменаССервером = Новый Структура;
	ДанныеОбменаССервером.Вставить("НалоговоеНазначение");
	ДанныеОбменаССервером.Вставить("Номенклатура");
	ДанныеОбменаССервером.Вставить("Организация");
	ДанныеОбменаССервером.Вставить("Склад");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, СтрокаТабличнойЧасти);
	
	// Получим все необходимые данные на сервере
	ЗначенияДляЗаполнения = ИзменениеНалоговогоНазначенияСервер(ДанныеОбменаССервером);
	
	// Заполним реквизиты строки
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияДляЗаполнения);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "ТОВАРЫ" И ЕЁ РЕКВИЗИТОВ

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
    СтрокаТабличнойЧасти.СуммаВзаиморасчетов = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
	СтрокаТабличнойЧасти.СуммаВзаиморасчетов = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РаботаСДиалогамиКлиент.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
	СтрокаТабличнойЧасти.СуммаВзаиморасчетов = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
	СтрокаТабличнойЧасти.СуммаВзаиморасчетов = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаВзаиморасчетов = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВзаиморасчетовПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ПроцентыСтавокНДС = РаботаСДиалогамиСервер.ПолучитьПроцентыСтавокНДС();
	РаботаСДиалогамиКлиент.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПроцентыСтавокНДС, ПолучитьСтруктуруПараметровДляРасчетаСуммы());
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаВзаиморасчетов - СтрокаТабличнойЧасти.СуммаНДС;
КонецПроцедуры
&НаКлиенте
Процедура ТоварыСтатьяКнигиПриобретенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Для Каждого Строка ИЗ Объект.Товары Цикл
		СтатьяНалоговойДекларации = Строка.СтатьяКнигиПриобретения;
	КонецЦикла;
	НазваниеНалоговойДекларации = ПолучитьНазваниеНалоговойДекларации();      
	РаботаСДиалогамиКлиент.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, СтатьяНалоговойДекларации, НазваниеНалоговойДекларации);
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыНалоговоеНазначениеПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ИзменениеНалоговогоНазначенияКлиент(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
				
		Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.ЗаказПоставщику = Объект.Сделка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	//Пересчет суммы документа - для корректного отображения на форме
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	//Пересчет суммы документа - для корректного отображения на форме
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодбор(Команда)
	ДействиеПодбор("Товары");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "ВОЗВРАТНАЯ ТАРА" И ЕЁ РЕКВИЗИТОВ

&НаКлиенте
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти = Элементы.ВозвратнаяТара.ТекущиеДанные;
		Если ЗначениеЗаполнено(Объект.Сделка) И ТипЗнч(Объект.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.ЗаказПоставщику = Объект.Сделка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры