Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

// Производит заполнение документа по данным регистра НДСПриобретений
//
Процедура ЗаполнитьПоОстаткам(ТабличнаяЧасть) Экспорт

	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Если    ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		Запрос.УстановитьПараметр("Сделка", Сделка);
	Иначе
		Запрос.УстановитьПараметр("Сделка", Неопределено);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("МоментВремени", 		?(ЭтоНовый(),'00010101',Новый Граница(МоментВремени(), ВидГраницы.Исключая)));

	СобытияПриобретенияНалоговыйУчет	= Новый СписокЗначений();
	СобытияОжидаемыйИПодтвержденныйНДС 	= Новый СписокЗначений();
	
	Запрос.УстановитьПараметр("ВозвратнаяТара", ТабличнаяЧасть = ВозвратнаяТара);
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат Тогда
		
		СобытияПриобретенияНалоговыйУчет = Новый СписокЗначений();
		СобытияПриобретенияНалоговыйУчет.Добавить(Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику);
		СобытияПриобретенияНалоговыйУчет.Добавить(Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком);
		Запрос.УстановитьПараметр("СобытияПриобретенияНалоговыйУчет", СобытияПриобретенияНалоговыйУчет);
		Запрос.УстановитьПараметр("ПриобретенияНалоговыйУчетОплата", Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком);
		
		СобытияОжидаемыйИПодтвержденныйНДС.Добавить(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат);
		Запрос.УстановитьПараметр("СобытияОжидаемыйИПодтвержденныйНДС", СобытияОжидаемыйИПодтвержденныйНДС);
		
	Иначе
		
		СобытияПриобретенияНалоговыйУчет = Новый СписокЗначений();
		СобытияПриобретенияНалоговыйУчет.Добавить(Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика);
		СобытияПриобретенияНалоговыйУчет.Добавить(Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику);
		Запрос.УстановитьПараметр("СобытияПриобретенияНалоговыйУчет", СобытияПриобретенияНалоговыйУчет);
		Запрос.УстановитьПараметр("ПриобретенияНалоговыйУчетОплата", Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику);
		
		СобытияОжидаемыйИПодтвержденныйНДС.Добавить(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление);
		Запрос.УстановитьПараметр("СобытияОжидаемыйИПодтвержденныйНДС", СобытияОжидаемыйИПодтвержденныйНДС);
		
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.ДоговорКонтрагента ЕСТЬ NULL ТОГДА 
				   |		ВЫБОР КОГДА ПриобретенияНалоговыйУчет.ВозвратнаяТара = Истина ТОГДА ПриобретенияНалоговыйУчет.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПокупкам ИНАЧЕ ПриобретенияНалоговыйУчет.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам КОНЕЦ 
			   	   |	  ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.ВозвратнаяТара = Истина ТОГДА ОжидаемыйИПодтвержденныйНДС.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПокупкам ИНАЧЕ ОжидаемыйИПодтвержденныйНДС.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам КОНЕЦ 
				   |	КОНЕЦ КАК Схема,
	               |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.ДоговорКонтрагента ЕСТЬ NULL ТОГДА 
				   |		ПриобретенияНалоговыйУчет.ВозвратнаяТара 
				   |	 ИНАЧЕ
				   |		ОжидаемыйИПодтвержденныйНДС.ВозвратнаяТара 
				   |	КОНЕЦ КАК ЗаТару,
				   |    ОжидаемыйИПодтвержденныйНДС.НалоговоеНазначение 	КАК НалоговоеНазначение,
				   |    ОжидаемыйИПодтвержденныйНДС.Амортизируется	 		КАК Амортизируется,
				   |    ОжидаемыйИПодтвержденныйНДС.НалоговоеНазначение.ВидДеятельностиНДС 	КАК ВидДеятельностиНДС,
				   |    ОжидаемыйИПодтвержденныйНДС.НалоговоеНазначение.ВидНалоговойДеятельности КАК ВидНалоговойДеятельности,
				   |	ОжидаемыйИПодтвержденныйНДС.СтавкаНДС 	  					КАК СтавкаНДС,
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.БазаНДСОстаток ЕСТЬ NULL ТОГДА
				   |		0
				   |	 ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.БазаНДСОстаток < 0 ТОГДА
				   |			0
				   |		 ИНАЧЕ 
				   |			ОжидаемыйИПодтвержденныйНДС.БазаНДСОстаток
				   |		КОНЕЦ
				   |	КОНЕЦ КАК СуммаОтгрузки,
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.СуммаНДСОстаток ЕСТЬ NULL ТОГДА
				   |		0
				   |	 ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.СуммаНДСОстаток < 0 ТОГДА
				   |			0
				   |		 ИНАЧЕ 
				   |			ОжидаемыйИПодтвержденныйНДС.СуммаНДСОстаток
				   |		КОНЕЦ
				   |	КОНЕЦ КАК СуммаНДСОтгрузки,
				   |	ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.СуммаНДСПропорциональноОстаток ЕСТЬ NULL ТОГДА
				   |		0
				   |	 ИНАЧЕ
				   |		ВЫБОР КОГДА ОжидаемыйИПодтвержденныйНДС.СуммаНДСПропорциональноОстаток < 0 ТОГДА
				   |			0
				   |		 ИНАЧЕ 
				   |			ОжидаемыйИПодтвержденныйНДС.СуммаНДСПропорциональноОстаток
				   |		КОНЕЦ
				   |	КОНЕЦ КАК СуммаНДСПропорциональноОстаток,
				   |	ПриобретенияНалоговыйУчет.Аванс КАК СуммаПревышенияОплатНадОтгрузкой
				   |ИЗ
	               |	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПриобретений.Остатки(&МоментВремени, Организация = &Организация И ДоговорКонтрагента = &ДоговорКонтрагента И СобытиеНДС В (&СобытияОжидаемыйИПодтвержденныйНДС) И ВозвратнаяТара = &ВозвратнаяТара И Сделка= &Сделка) КАК ОжидаемыйИПодтвержденныйНДС
				   |    ПРАВОЕ СОЕДИНЕНИЕ
				   |        (ВЫБРАТЬ 
				   |            ПриобретенияНалоговыйУчет.ДоговорКонтрагента 	КАК ДоговорКонтрагента,
				   |            ПриобретенияНалоговыйУчет.ВозвратнаяТара		КАК ВозвратнаяТара,
				   |            СУММА(ВЫБОР КОГДА ПриобретенияНалоговыйУчет.Событие = &ПриобретенияНалоговыйУчетОплата ТОГДА ПриобретенияНалоговыйУчет.СуммаВзаиморасчетовОстаток ИНАЧЕ - ПриобретенияНалоговыйУчет.СуммаВзаиморасчетовОстаток КОНЕЦ) КАК Аванс
				   |
				   |         ИЗ РегистрНакопления.ПриобретенияНалоговыйУчет.Остатки(&МоментВремени, Организация = &Организация И ДоговорКонтрагента = &ДоговорКонтрагента И Событие В (&СобытияПриобретенияНалоговыйУчет) И ВозвратнаяТара = &ВозвратнаяТара И Сделка= &Сделка) КАК ПриобретенияНалоговыйУчет
				   |
				   |		 СГРУППИРОВАТЬ ПО
				   |			ПриобретенияНалоговыйУчет.ДоговорКонтрагента,
				   |			ПриобретенияНалоговыйУчет.ВозвратнаяТара) КАК ПриобретенияНалоговыйУчет
				   |    ПО 
				   |       ОжидаемыйИПодтвержденныйНДС.ДоговорКонтрагента 	= ПриобретенияНалоговыйУчет.ДоговорКонтрагента
				   |     И ОжидаемыйИПодтвержденныйНДС.ВозвратнаяТара 		= ПриобретенияНалоговыйУчет.ВозвратнаяТара
				   |
				   |ИТОГИ
				   |	МАКСИМУМ(Схема),
				   |	МАКСИМУМ(СуммаПревышенияОплатНадОтгрузкой),
				   |	СУММА(СуммаОтгрузки),
				   |	СУММА(СуммаНДСПропорциональноОстаток),
				   |	СУММА(СуммаНДСОтгрузки)
				   |ПО
				   |	ЗаТару,
				   |    НалоговоеНазначение,
				   |    Амортизируется
				   |";	
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл // ЗаТару
					
		СуммаНеПодтвержденнойОтгрузки    = ?(Выборка.СуммаОтгрузки = NULL, 0, Выборка.СуммаОтгрузки + Выборка.СуммаНДСОтгрузки);
		СуммаПревышенияОплатНадОтгрузкой = ?(Выборка.СуммаПревышенияОплатНадОтгрузкой = NULL, 0, Выборка.СуммаПревышенияОплатНадОтгрузкой);
					
		Если Выборка.Схема = Перечисления.МоментыОпределенияНалоговойБазы.НеОпределять Тогда
							
			// ничего не делаем
			Возврат;
							
		ИначеЕсли Выборка.Схема = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
						
			Аванс = Макс(0, СуммаНеПодтвержденнойОтгрузки + СуммаПревышенияОплатНадОтгрузкой);
						
			Если Аванс > 0 Тогда
				ДобавитьСтрокуАванс(Выборка, Аванс);
			КонецЕсли;
							
		ИначеЕсли Выборка.Схема = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
							
			// Все неподтвержденные отгрузки 
			ДобавитьСтроку(Выборка);
							
		ИначеЕсли Выборка.Схема = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию Тогда
						
			// Все неподтвержденные отгрузки
			ДобавитьСтроку(Выборка);	
						
			//Дополнительно добавим аванс
			Аванс = Макс(0, СуммаПревышенияОплатНадОтгрузкой);
						
			Если Аванс > 0 Тогда
				// дополнительно добавим аванс
				ДобавитьСтрокуАванс(Выборка, Аванс);
			КонецЕсли;
							
		Иначе
			
			Если Выборка.ЗаТару Тогда
				ТекстСообщения = "Не указана схема налогового учета по таре, либо в схеме не указан Момент определения базы НДС по покупкам!";
			Иначе	
				ТекстСообщения = "Не указана схема налогового учета, либо в схеме не указан Момент определения базы НДС по покупкам!";
			КонецЕсли;	
				
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);

		КонецЕсли;					
		
	КонецЦикла;		
	
	
КонецПроцедуры

Процедура ДобавитьСтроку(Выборка)
	
	ВыборкаНалНазначение = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНалНазначение.Следующий() Цикл
		
		ВыборкаАмортизируется = ВыборкаНалНазначение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАмортизируется.Следующий() Цикл 
		
			ВыборкаСтавкаНДС = ВыборкаАмортизируется.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСтавкаНДС.Следующий() Цикл 
				ДобавитьСтрокуОтгрузка(ВыборкаСтавкаНДС);	
			КонецЦикла;
			
		КонецЦикла;	
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуОтгрузка(Выборка)		
	
	Если  Выборка.СуммаОтгрузки = NULL 
	  Или Выборка.СуммаОтгрузки + Выборка.СуммаНДСОтгрузки <= 0 Тогда
	  Возврат
	КонецЕсли;
	
	Знак = +1;
	Если ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат Тогда
		Знак = -1;
	КонецЕсли;
	
	Если Выборка.ЗаТару Тогда
		
		Строка = ВозвратнаяТара.Добавить();
		Строка.Сумма = Знак*Выборка.СуммаОтгрузки;
		Строка.НалоговоеНазначение = Выборка.НалоговоеНазначение;
		
	Иначе
		
		Строка = Товары.Добавить();
		
		Строка.СтавкаНДС 					= Выборка.СтавкаНДС;
		Строка.НалоговоеНазначение 			= Выборка.НалоговоеНазначение;
		Строка.Амортизируется 				= Выборка.Амортизируется;		
		
		Строка.Сумма 	= Знак*Выборка.СуммаОтгрузки;
		Строка.СуммаНДС	= Знак*Выборка.СуммаНДСОтгрузки;
		
		Если Выборка.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
			
			Строка.ПропорциональныйНДС	= Истина;
			
			// В выборке налоговое назначение с пропорциональным видом деятельности НДС
			// получим облагаемое и необлагамое НДС налоговое назначение
			
			НалоговоеНазначениеОблагаемоеНДС   = НалоговыйУчетПовтИсп.ПолучитьНалоговоеНазначениеПоСоставляющим(
																	Выборка.ВидНалоговойДеятельности, 
																	Перечисления.ВидыДеятельностиНДС.Облагаемая
																	);
																	
			НалоговоеНазначениеНеОблагаемоеНДС = НалоговыйУчетПовтИсп.ПолучитьНалоговоеНазначениеПоСоставляющим(
																	Выборка.ВидНалоговойДеятельности, 
																	Перечисления.ВидыДеятельностиНДС.Необлагаемая
																	);
			
			Если  Выборка.СуммаНДСПропорциональноОстаток <> 0
				И Выборка.СуммаНДСОтгрузки <> 0 Тогда
				
				// Здесь нужно разбить строку на две - одна по включаемому НДС в кредит, вторую на остаток (не вкл. в кредит)
				
				Строка2 = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(Строка2, Строка);
				
				Строка.НалоговоеНазначение  = НалоговоеНазначениеОблагаемоеНДС;
				Строка2.НалоговоеНазначение = НалоговоеНазначениеНеОблагаемоеНДС;
				
				Строка.СуммаНДС  = Знак*Выборка.СуммаНДСПропорциональноОстаток;
				Строка2.СуммаНДС = Строка2.СуммаНДС - Строка.СуммаНДС;
				
				Если Строка.Сумма <> 0 Тогда
					Строка.Сумма  = Строка.Сумма * (Выборка.СуммаНДСПропорциональноОстаток/Выборка.СуммаНДСОтгрузки);
				КонецЕсли;
				Строка2.Сумма = Строка2.Сумма - Строка.Сумма;
				
				Строка2.СуммаВзаиморасчетов = Строка2.Сумма + Строка2.СуммаНДС;

				Строка2.СтатьяКнигиПриобретения	= ОпределитьСтатьюНалоговойДекларации(Строка2);
				
			Иначе			
				
				Строка.НалоговоеНазначение  = НалоговоеНазначениеНеОблагаемоеНДС;

			КонецЕсли;
			
		КонецЕсли;
		
		Строка.СуммаВзаиморасчетов = Строка.Сумма + Строка.СуммаНДС;
		

		Строка.СтатьяКнигиПриобретения	= ОпределитьСтатьюНалоговойДекларации(Строка);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуАванс(Выборка, Аванс) 
	
	Знак = +1;
	Если ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат Тогда
		Знак = -1;
	КонецЕсли;

	Если Выборка.ЗаТару Тогда
		
		Строка = ВозвратнаяТара.Добавить();
		Строка.Сумма = Знак*Аванс;
		
	Иначе
		
		Строка = Товары.Добавить();
		Строка.СуммаВзаиморасчетов = Знак * Аванс;

	КонецЕсли;
	
КонецПроцедуры

// Производит заполнение документа по движениям документа-основания по регистру НДСПриобретений
//
Процедура ЗаполнитьПоДокументуОснованию(ТабличнаяЧасть) Экспорт
	
	МетаданныеДокумента    	   = ДокументОснование.Метаданные();
	
	ЗаТару = (ТабличнаяЧасть = ВозвратнаяТара);
	
	ОснованиеАвансовыйОтчет    = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет"));
	ОснованиеСчет		       = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	ОснованиеПлатежныйДокумент = МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено;
	
	ВалютаОснования = ДокументОснование.ВалютаДокумента; 
	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаОснования, ДокументОснование.Дата);
	
	Если    ОснованиеПлатежныйДокумент
		ИЛИ ОснованиеАвансовыйОтчет Тогда
		
		// платежные документы
		
		ПогрешностиОкругления = Новый Соответствие();
		
		Если ОснованиеАвансовыйОтчет Тогда
		    ТабЧасть = ДокументОснование.ОплатаПоставщикам;
			ИмяРеквизитаСуммы = "Сумма";
		Иначе	
		 	ТабЧасть = ДокументОснование.РасшифровкаПлатежа;
			ИмяРеквизитаСуммы = "СуммаПлатежа";
		КонецЕсли;
		
		Для каждого СтрокаОснования Из ТабЧасть Цикл
			
			Если НЕ СтрокаОснования.ДоговорКонтрагента = ДоговорКонтрагента Тогда
			
				Продолжить;	
			
			КонецЕсли;
			
			Если    ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
				ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				Если НЕ СтрокаОснования.Сделка = Сделка Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ СтрокаОснования.ЗаТару И НЕ ЗаТару Тогда
				
				СтрокаТЧ = Товары.Добавить();
				СтрокаТЧ.СтавкаНДС 	= СтрокаОснования.СтавкаНДС;
				СтрокаТЧ.СуммаНДС  	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаОснования.СуммаНДС,
									  							 ВалютаОснования, мВалютаРегламентированногоУчета,
																 Данные.Курс, 1,
																 Данные.Кратность, 1,
																 ,ПогрешностиОкругления, "СуммаНДС");

				СтрокаТЧ.СуммаВзаиморасчетов	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаОснования[ИмяРеквизитаСуммы],
									  							 ВалютаОснования, мВалютаРегламентированногоУчета,
																 Данные.Курс, 1,
																 Данные.Кратность, 1,
																 ,ПогрешностиОкругления, "Сумма");
				
				СтрокаТЧ.Сумма = СтрокаТЧ.СуммаВзаиморасчетов - СтрокаТЧ.СуммаНДС;
				
				Если ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат Тогда
					СтрокаТЧ.Сумма 	  = - СтрокаТЧ.Сумма;
					СтрокаТЧ.СуммаНДС = - СтрокаТЧ.СуммаНДС;
					СтрокаТЧ.СуммаВзаиморасчетов = -СтрокаТЧ.СуммаВзаиморасчетов;
				КонецЕсли;
				
				СтрокаТЧ.СтатьяКнигиПриобретения = ОпределитьСтатьюНалоговойДекларации(СтрокаТЧ);
				
			ИначеЕсли СтрокаОснования.ЗаТару И ЗаТару Тогда
				
				СтрокаТЧ = ВозвратнаяТара.Добавить();
				СтрокаТЧ.Сумма 		= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаОснования[ИмяРеквизитаСуммы],
									  							 ВалютаОснования, мВалютаРегламентированногоУчета,
																 Данные.Курс, 1,
																 Данные.Кратность, 1,
																 ,ПогрешностиОкругления, "СуммаТара");
				
				Если ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат Тогда
					СтрокаТЧ.Сумма 	  = - СтрокаТЧ.Сумма;
				КонецЕсли;
				
			КонецЕсли; 
	
		КонецЦикла; 
		
	КонецЕсли;
	
	Если ОснованиеСчет Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	СчетНаОплатуПоставщикаТовары.СтавкаНДС КАК СтавкаНДС,
		               |	СчетНаОплатуПоставщикаТовары.СуммаНДС КАК СуммаНДС,
		               |	СчетНаОплатуПоставщикаТовары.Сумма КАК Сумма,
		               |	0 КАК СуммаТара
		               |ИЗ
		               |	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
		               |ГДЕ
		               |	СчетНаОплатуПоставщикаТовары.Ссылка = &Счет
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СчетНаОплатуПоставщикаУслуги.СтавкаНДС,
		               |	СчетНаОплатуПоставщикаУслуги.СуммаНДС,
		               |	СчетНаОплатуПоставщикаУслуги.Сумма,
		               |	0
		               |ИЗ
		               |	Документ.СчетНаОплатуПоставщика.Услуги КАК СчетНаОплатуПоставщикаУслуги
		               |ГДЕ
		               |	СчетНаОплатуПоставщикаУслуги.Ссылка = &Счет
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СчетНаОплатуПоставщикаОборудование.СтавкаНДС,
		               |	СчетНаОплатуПоставщикаОборудование.СуммаНДС,
		               |	СчетНаОплатуПоставщикаОборудование.Сумма,
		               |	0
		               |ИЗ
		               |	Документ.СчетНаОплатуПоставщика.Оборудование КАК СчетНаОплатуПоставщикаОборудование
		               |ГДЕ
		               |	СчетНаОплатуПоставщикаОборудование.Ссылка = &Счет
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СчетНаОплатуПоставщикаНематериальныеАктивы.СтавкаНДС,
		               |	СчетНаОплатуПоставщикаНематериальныеАктивы.СуммаНДС,
		               |	СчетНаОплатуПоставщикаНематериальныеАктивы.Сумма,
		               |	0
		               |ИЗ
		               |	Документ.СчетНаОплатуПоставщика.НематериальныеАктивы КАК СчетНаОплатуПоставщикаНематериальныеАктивы
		               |ГДЕ
		               |	СчетНаОплатуПоставщикаНематериальныеАктивы.Ссылка = &Счет
					   |
					   |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СчетНаОплатуПоставщикаБланкиСтрогогоУчета.СтавкаНДС,
		               |	СчетНаОплатуПоставщикаБланкиСтрогогоУчета.СуммаНДС,
		               |	СчетНаОплатуПоставщикаБланкиСтрогогоУчета.Сумма,
		               |	0
		               |ИЗ
		               |	Документ.СчетНаОплатуПоставщика.БланкиСтрогогоУчета КАК СчетНаОплатуПоставщикаБланкиСтрогогоУчета
		               |ГДЕ
		               |	СчетНаОплатуПоставщикаБланкиСтрогогоУчета.Ссылка = &Счет
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	0,
		               |	0,
		               |	0,
		               |	СчетНаОплатуПоставщикаВозвратнаяТара.Сумма
		               |ИЗ
		               |	Документ.СчетНаОплатуПоставщика.ВозвратнаяТара КАК СчетНаОплатуПоставщикаВозвратнаяТара
		               |ГДЕ
		               |	СчетНаОплатуПоставщикаВозвратнаяТара.Ссылка = &Счет
		               |ИТОГИ
		               |	СУММА(СуммаНДС),
		               |	СУММА(Сумма),
		               |	СУММА(СуммаТара)
		               |ПО
		               |	СтавкаНДС";
					   
		Запрос.УстановитьПараметр("Счет", ДокументОснование);
		
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ВалютаОснования = ДокументОснование.ВалютаДокумента; 
		Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаОснования, ДокументОснование.Дата);
		
		ОснованиеУчитыватьНДС 		= ДокументОснование.УчитыватьНДС;
		ОснованиеСуммаВключаетНДС 	= ДокументОснование.СуммаВключаетНДС;
		
		ПогрешностиОкругления = Новый Соответствие();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.СуммаТара > 0 И ЗаТару Тогда
				
				СтрокаТЧ = ВозвратнаяТара.Добавить();
				
				СтрокаТЧ.Сумма =  МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаТара,
									  							 ВалютаОснования, мВалютаРегламентированногоУчета,
																 Данные.Курс, 1,
																 Данные.Кратность, 1,
																 ,ПогрешностиОкругления, "СуммаТара");
				
			ИначеЕсли НЕ ЗаТару Тогда	
				
				СтрокаТЧ = Товары.Добавить();
				СтрокаТЧ.СтавкаНДС 	= Выборка.СтавкаНДС;
				СтрокаТЧ.СуммаНДС  	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС,
									  							 ВалютаОснования, мВалютаРегламентированногоУчета,
																 Данные.Курс, 1,
																 Данные.Кратность, 1,
																 ,ПогрешностиОкругления, "СуммаНДС");
																 
																 
				ВремСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
									  							 ВалютаОснования, мВалютаРегламентированногоУчета,
																 Данные.Курс, 1,
																 Данные.Кратность, 1,
																 ,ПогрешностиОкругления, "Сумма");
																 
				Если ОснованиеУчитыватьНДС И НЕ ОснованиеСуммаВключаетНДС Тогда
					СтрокаТЧ.СуммаВзаиморасчетов = ВремСумма + СтрокаТЧ.СуммаНДС;
				Иначе													 
					СтрокаТЧ.СуммаВзаиморасчетов = ВремСумма;
				КонецЕсли;
				
				СтрокаТЧ.Сумма 		= СтрокаТЧ.СуммаВзаиморасчетов - СтрокаТЧ.СуммаНДС;
									 
				Если ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат Тогда
				
					СтрокаТЧ.Сумма 	  = - СтрокаТЧ.Сумма;
					СтрокаТЧ.СуммаНДС = - СтрокаТЧ.СуммаНДС;
					СтрокаТЧ.СуммаВзаиморасчетов = -СтрокаТЧ.СуммаВзаиморасчетов;
					
				КонецЕсли;
				
				СтрокаТЧ.СтатьяКнигиПриобретения = ОпределитьСтатьюНалоговойДекларации(СтрокаТЧ);
			
			КонецЕсли; 
			
		КонецЦикла;		
					   
	ИначеЕсли НЕ ОснованиеПлатежныйДокумент Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		Если    ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Запрос.УстановитьПараметр("Сделка", Сделка);
		Иначе
			Запрос.УстановитьПараметр("Сделка", Неопределено);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Курс", 				Данные.Курс/Данные.Кратность);
		
		Запрос.УстановитьПараметр("ВозвратнаяТара", ЗаТару);
		
		Если ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат Тогда
			Запрос.УстановитьПараметр("ЗнакСуммы", -1);
		Иначе
			Запрос.УстановитьПараметр("ЗнакСуммы",  1);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОблагаемыйВидДеятельностиНДС", Перечисления.ВидыДеятельностиНДС.Облагаемая);
		
		Запрос.Текст =
		"ВЫБРАТЬ Разрешенные
		|	ОжидаемыйИПодтвержденныйНДСПриобретений.СтавкаНДС,
		|	НалоговоеНазначение КАК НалоговоеНазначение,
		|   ОжидаемыйИПодтвержденныйНДСПриобретений.НалоговоеНазначение.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
		|   ОжидаемыйИПодтвержденныйНДСПриобретений.НалоговоеНазначение.ВидНалоговойДеятельности КАК ВидНалоговойДеятельности,
		|   ОжидаемыйИПодтвержденныйНДСПриобретений.Амортизируется КАК Амортизируется,
		|	ОжидаемыйИПодтвержденныйНДСПриобретений.ВозвратнаяТара,
		|	&ЗнакСуммы * &Курс * ОжидаемыйИПодтвержденныйНДСПриобретений.СуммаНДС КАК СуммаНДС,
		|	&ЗнакСуммы * &Курс * ОжидаемыйИПодтвержденныйНДСПриобретений.СуммаНДСПропорционально КАК СуммаНДСПропорционально,
		|	&ЗнакСуммы * &Курс * ОжидаемыйИПодтвержденныйНДСПриобретений.БазаНДС КАК Сумма
		|ИЗ
		|	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПриобретений КАК ОжидаемыйИПодтвержденныйНДСПриобретений
		|ГДЕ
		|	  ОжидаемыйИПодтвержденныйНДСПриобретений.Регистратор 		 = &ДокументОснование
		|	И ОжидаемыйИПодтвержденныйНДСПриобретений.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И ОжидаемыйИПодтвержденныйНДСПриобретений.ВозвратнаяТара     = &ВозвратнаяТара
		|	И ОжидаемыйИПодтвержденныйНДСПриобретений.Сделка		     = &Сделка
		|";
		
		// сохраним имеющиеся строки в табличной части
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
		
			Если Выборка.ВозвратнаяТара = Истина  И ЗаТару Тогда
				
				СтрокаТары = ВозвратнаяТара.Добавить();
				СтрокаТары.Сумма = Выборка.Сумма;
				СтрокаТары.НалоговоеНазначение = Выборка.НалоговоеНазначение;
				
			ИначеЕсли Не ЗаТару Тогда
				
				СтрокаТоваров = Товары.Добавить();
				СтрокаТоваров.СтавкаНДС 					= Выборка.СтавкаНДС;
				СтрокаТоваров.НалоговоеНазначение 			= Выборка.НалоговоеНазначение;
				СтрокаТоваров.Амортизируется 				= Выборка.Амортизируется;
				СтрокаТоваров.СуммаНДС 						= Выборка.СуммаНДС;
				СтрокаТоваров.Сумма 						= Выборка.Сумма;
				
				Если Выборка.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
					
					// В выборке налоговое назначение с пропорциональным видом деятельности НДС
					// получим облагаемое и необлагамое НДС налоговое назначение
					
					НалоговоеНазначениеОблагаемоеНДС   = НалоговыйУчетПовтИсп.ПолучитьНалоговоеНазначениеПоСоставляющим(
																			Выборка.ВидНалоговойДеятельности, 
																			Перечисления.ВидыДеятельностиНДС.Облагаемая
																			);
																			
					НалоговоеНазначениеНеОблагаемоеНДС = НалоговыйУчетПовтИсп.ПолучитьНалоговоеНазначениеПоСоставляющим(
																			Выборка.ВидНалоговойДеятельности, 
																			Перечисления.ВидыДеятельностиНДС.Необлагаемая
																			);
					
					
					СтрокаТоваров.ПропорциональныйНДС	= Истина;
					
					Если  Выборка.СуммаНДСПропорционально <> 0
						И Выборка.СуммаНДС <> 0 Тогда
						
						//	Здесь нужно разбить строку на две - одна по включаемому НДС в кредит, вторую на остаток (не вкл. в кредит)
						Строка2 = Товары.Добавить();
						ЗаполнитьЗначенияСвойств(Строка2, СтрокаТоваров);
						
						СтрокаТоваров.НалоговоеНазначение  = НалоговоеНазначениеОблагаемоеНДС;
						Строка2.НалоговоеНазначение = НалоговоеНазначениеНеОблагаемоеНДС;
						
						СтрокаТоваров.СуммаНДС  = Выборка.СуммаНДСПропорционально;
						Строка2.СуммаНДС = Строка2.СуммаНДС - СтрокаТоваров.СуммаНДС;
						
						Если СтрокаТоваров.Сумма <> 0 Тогда
							СтрокаТоваров.Сумма  = СтрокаТоваров.Сумма *  (Выборка.СуммаНДСПропорционально/Выборка.СуммаНДС);
						КонецЕсли;
						Строка2.Сумма = Строка2.Сумма - СтрокаТоваров.Сумма;
						
						Строка2.СуммаВзаиморасчетов = Строка2.Сумма + Строка2.СуммаНДС;

						Строка2.СтатьяКнигиПриобретения	= ОпределитьСтатьюНалоговойДекларации(Строка2);
						
					Иначе			
						
						СтрокаТоваров.НалоговоеНазначение = НалоговоеНазначениеНеОблагаемоеНДС;

					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаТоваров.СуммаВзаиморасчетов = СтрокаТоваров.Сумма + СтрокаТоваров.СуммаНДС;
				

				СтрокаТоваров.СтатьяКнигиПриобретения = ОпределитьСтатьюНалоговойДекларации(СтрокаТоваров);
				
			КонецЕсли; 
		
		КонецЦикла; 
		
	КонецЕсли; 		
	
КонецПроцедуры

// Производит заполнение документа по данным регистра НДСПриобретений
// с учетом движений документа-основания по тому же регистру, либо (для платежных документов)
// данных расшифровки платежа.
//
Процедура ЗаполнитьПоДокументуОснованиюСУчетомОстатков(ТабличнаяЧасть) Экспорт

	ЗаТару = (ТабличнаяЧасть = ВозвратнаяТара);
	
	// Сохраним данные табличной части
	ТоварыДоЗаполнения		= ТабличнаяЧасть.Выгрузить();
	
	ТабличнаяЧасть.Очистить();
	
	//Получим данные по документу
	ЗаполнитьПоДокументуОснованию(ТабличнаяЧасть);
	ТоварыПоДокументу 		= ТабличнаяЧасть.Выгрузить();
	
	ТабличнаяЧасть.Очистить();
	
	//Получим остатки по договору
	ЗаполнитьПоОстаткам(ТабличнаяЧасть);
	ТоварыОстатки	 = ТабличнаяЧасть.Выгрузить();
	
	ТабличнаяЧасть.Очистить();
	
	// сначала восстановим данные до заполнения.
	ТабличнаяЧасть.Загрузить(ТоварыДоЗаполнения);
	
	// свернем таблицы по ключевым измерениям
	Если ЗаТару Тогда
		ТоварыПоДокументу.Свернуть("НалоговоеНазначение", "Сумма");	
		ТоварыОстатки.Свернуть("НалоговоеНазначение", "Сумма");	
	Иначе	
		ТоварыПоДокументу.Свернуть("СтавкаНДС, НалоговоеНазначение, Амортизируется, ПропорциональныйНДС", 
								   "Сумма, СуммаНДС");
		ТоварыОстатки.Свернуть("СтавкаНДС, НалоговоеНазначение, Амортизируется, ПропорциональныйНДС", 
							   "Сумма, СуммаНДС,СуммаВзаиморасчетов"); 
	КонецЕсли;

	Для каждого СтрокаДокумент Из ТоварыПоДокументу Цикл
		
		Если ЗаТару Тогда
	 		СтрокаОстатков = ТоварыОстатки.НайтиСтроки(Новый Структура("НалоговоеНазначение", СтрокаДокумент.НалоговоеНазначение));
		Иначе
			Если СтрокаДокумент.НалоговоеНазначение.Пустая() Тогда
			    // строки по авансу закрывают все отгрузки
				СтрокаОстатков = ТоварыОстатки.НайтиСтроки(Новый Структура( "СтавкаНДС", 
																			СтрокаДокумент.СтавкаНДС));
			Иначе				
				СтрокаОстатков = ТоварыОстатки.НайтиСтроки(Новый Структура( "СтавкаНДС,
																			|НалоговоеНазначение,
																		    |Амортизируется,
																			|ПропорциональныйНДС", 
																			СтрокаДокумент.СтавкаНДС,
																			СтрокаДокумент.НалоговоеНазначение,
																			СтрокаДокумент.Амортизируется,
																			СтрокаДокумент.ПропорциональныйНДС));
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаОстатков.Количество()>0 Тогда
			
			СтрокаОстатков = СтрокаОстатков[0];
			
			СтрокаТЧ = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаОстатков);
			
			Если ЗаТару Тогда
				
				Если СтрокаДокумент.Сумма < 0 Тогда
					//возврат
					СтрокаТЧ.Сумма 	  = Макс(СтрокаОстатков.Сумма, 	 СтрокаДокумент.Сумма);
				Иначе	
					СтрокаТЧ.Сумма 	  = МИН(СтрокаОстатков.Сумма, 	 СтрокаДокумент.Сумма);
				КонецЕсли;
				
				// уменьшим суммы для дальнешего учета аванса
				СтрокаДокумент.Сумма 	= СтрокаДокумент.Сумма - СтрокаТЧ.Сумма; 
				
			Иначе
				
				Если СтрокаДокумент.СуммаНДС < 0 Тогда
					//возврат
					СтрокаТЧ.СуммаНДС = Макс(СтрокаОстатков.СуммаНДС, СтрокаДокумент.СуммаНДС);
					СтрокаТЧ.Сумма 	  = Макс(СтрокаОстатков.Сумма, 	 СтрокаДокумент.Сумма);
				Иначе	
					СтрокаТЧ.СуммаНДС = МИН(СтрокаОстатков.СуммаНДС, СтрокаДокумент.СуммаНДС);
					СтрокаТЧ.Сумма 	  = МИН(СтрокаОстатков.Сумма, 	 СтрокаДокумент.Сумма);
				КонецЕсли;
				СтрокаТЧ.СуммаВзаиморасчетов = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
				
				СтрокаТЧ.СтатьяКнигиПриобретения = ОпределитьСтатьюНалоговойДекларации(СтрокаТЧ);
				
				// уменьшим суммы для дальнешего учета аванса
				СтрокаДокумент.Сумма 	= СтрокаДокумент.Сумма - СтрокаТЧ.Сумма; 
				СтрокаДокумент.СуммаНДС = СтрокаДокумент.СуммаНДС - СтрокаТЧ.СуммаНДС; 
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	// оставим строки из данных документа, которые могут быть добавлены учитывая аванс
	ПустыеСтроки = ТоварыПоДокументу.НайтиСтроки(Новый Структура("Сумма",0));
	Для каждого ПустяСтрока ИЗ ПустыеСтроки  Цикл
		ТоварыПоДокументу.Удалить(ПустяСтрока);	
	КонецЦикла;
	
	Если ЗаТару Тогда
		СуммаПоДокументу = ТоварыПоДокументу.Итог("Сумма");
	Иначе
		СуммаПоДокументу = ТоварыПоДокументу.Итог("Сумма") + ТоварыПоДокументу.Итог("СуммаНДС");
	КонецЕсли; 
		
		
	// Перенесем данные из документа учитывая остатки
	// получим сумму аванса, которую можно закрыть любыми ставками по данным отгрузки.
	СуммаАванса = ТоварыОстатки.НайтиСтроки(Новый Структура("НалоговоеНазначение", Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка()));
	Если СуммаАванса.Количество() = 0 Тогда
		СуммаАванса = 0;	
	Иначе
		Если ЗаТару Тогда
			СуммаАванса = СуммаАванса[0].Сумма;
		Иначе
			СуммаАванса = СуммаАванса[0].СуммаВзаиморасчетов;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СуммаПоДокументу >= 0 Тогда
		СуммаКРаспределению = Мин(СуммаАванса, СуммаПоДокументу);
	Иначе
		СуммаКРаспределению = Макс(СуммаАванса, СуммаПоДокументу);		
	КонецЕсли;
	
	Если СуммаКРаспределению <> 0 И СуммаАванса <> 0 И СуммаПоДокументу <> 0 Тогда
	
		Коэфф = СуммаКРаспределению / СуммаПоДокументу;
		
		Погрешность = 0;
		
		Для каждого СтрокаДокумент Из ТоварыПоДокументу Цикл
		
			СтрокаТЧ = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДокумент);
			
			СтрокаТЧ.Сумма 	  = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Коэфф*СтрокаТЧ.Сумма, 2, Погрешность);
			Если Не ЗаТару Тогда
				СтрокаТЧ.СуммаНДС = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Коэфф*СтрокаТЧ.СуммаНДС, 2, Погрешность);
				СтрокаТЧ.СуммаВзаиморасчетов = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС; 
				СтрокаТЧ.СтатьяКнигиПриобретения = ОпределитьСтатьюНалоговойДекларации(СтрокаТЧ);
			КонецЕсли;
		
		КонецЦикла; 
		
	КонецЕсли;
	
	

КонецПроцедуры

// Производит заполнение табличной части документа по услугам, полученным от нерезидента(на территории Украины)
//
Процедура ЗаполнитьПоРаботамОтНерезидента() Экспорт

	
	ПогрешностиОкругления = Новый Соответствие;
	ВидДокументаОснования = ДокументОснование.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", 	мВалютаРегламентированногоУчета);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Номенклатура,
	|	Основание.Количество,
	|	Основание.Сумма,
	|	Основание.Содержание,                                
	|	Основание.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Основание.НалоговоеНазначение,	
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ."+ВидДокументаОснования+".Услуги КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.НаименованиеТовара         = Выборка.Содержание;
		НоваяСтрока.Количество                 = Выборка.Количество;
		
		НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;

		// расчет сумм будем вести по алгоритму расчета гривневых сумм из налоговой накладной - для борьбы с ошибками округления.
		СуммаСНДСВал  = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выборка.Сумма,Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,Выборка.СуммаВключаетНДС,Истина,Истина,Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		СуммаСНДСВал  = Окр(СуммаСНДСВал,2);
		СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДСВал, Выборка.ВалютаДокумента, мВалютаРегламентированногоУчета,
												   Выборка.КурсДокумента, 1,
										   		   Выборка.КратностьДокумента, 1,
												   , ПогрешностиОкругления, "СуммаСНДСРегл");
		НоваяСтрока.СуммаВзаиморасчетов = СуммаСНДСРегл;										   
		НоваяСтрока.СуммаНДС = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(СуммаСНДСРегл, Истина, Истина, НоваяСтрока.СтавкаНДС, ПогрешностиОкругления);
		НоваяСтрока.Сумма = НоваяСтрока.СуммаВзаиморасчетов - НоваяСтрока.СуммаНДС; 
				
		НоваяСтрока.Цена = 	НоваяСтрока.Сумма / ?(НоваяСтрока.Количество = 0, 1, НоваяСтрока.Количество);
																			
		НоваяСтрока.НалоговоеНазначение    		= Выборка.НалоговоеНазначение;

        НоваяСтрока.СтатьяКнигиПриобретения		= ОпределитьСтатьюНалоговойДекларации(НоваяСтрока);
		
	КонецЦикла;	
	

КонецПроцедуры

// Производит заполнение табличной части документа по услугам комиссии, оказанным нерезидентом
// (считаются полученными на территории Украины)
//
Процедура ЗаполнитьПоУслугамКомиссииОтНерезидента() Экспорт

	ПогрешностиОкругления = Новый Соответствие;
	ВидДокументаОснования = ДокументОснование.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Основание.Номенклатура,
	|	""Продажа "" + ВЫРАЗИТЬ(Основание.Номенклатура.Наименование КАК СТРОКА(100)) КАК Содержание,
	|	1 КАК Количество,
	|	Основание.СуммаВознаграждения КАК Сумма,
	|	Основание.Ссылка.НалоговоеНазначение КАК НалоговоеНазначение,
	|	Основание.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА Основание.Ссылка.ВалютаДокумента = Основание.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Основание.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ."+ВидДокументаОснования+".Товары КАК Основание
	|
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.НаименованиеТовара         = Выборка.Содержание;
		НоваяСтрока.Количество                 = Выборка.Количество;
		
		НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;

		// расчет сумм будем вести по алгоритму расчета гривневых сумм из налоговой накладной - для борьбы с ошибками округления.
		// при поступлении НДС указываться не должен. В любом случае налог насчитывается сверху на сумму услуг. 
		СуммаСНДСВал  = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выборка.Сумма,Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,Ложь,Истина,Истина,Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		СуммаСНДСВал  = Окр(СуммаСНДСВал,2);
		СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДСВал, Выборка.ВалютаДокумента, мВалютаРегламентированногоУчета,
												   Выборка.КурсДокумента, 1,
										   		   Выборка.КратностьДокумента, 1,
												   , ПогрешностиОкругления, "СуммаСНДСРегл");
		НоваяСтрока.СуммаВзаиморасчетов = СуммаСНДСРегл;										   
		НоваяСтрока.СуммаНДС = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(СуммаСНДСРегл, Истина, Истина, НоваяСтрока.СтавкаНДС, ПогрешностиОкругления);
		НоваяСтрока.Сумма = НоваяСтрока.СуммаВзаиморасчетов - НоваяСтрока.СуммаНДС; 
				
		НоваяСтрока.Цена = 	НоваяСтрока.Сумма / ?(НоваяСтрока.Количество = 0, 1, НоваяСтрока.Количество);
		
		НоваяСтрока.НалоговоеНазначение    		= Выборка.НалоговоеНазначение;
		
		НоваяСтрока.СтатьяКнигиПриобретения = ОпределитьСтатьюНалоговойДекларации(НоваяСтрока);
		
	КонецЦикла;	

КонецПроцедуры

Процедура ЗаполнитьПоКомиссионнойТорговлеНалоговыйКодекс() Экспорт
	
	ВалютаОснования = ДокументОснование.ВалютаДокумента; 
	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаОснования, ДокументОснование.Дата);
	
	Если    ДокументОснование = Неопределено 
		ИЛИ ДокументОснование.Пустая() Тогда
	
		// нет данных для заполнения
		Возврат;	
	
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Курс", 				Данные.Курс/Данные.Кратность);
	
	Запрос.УстановитьПараметр("ОблагаемыйВидДеятельностиНДС", Перечисления.ВидыДеятельностиНДС.Облагаемая);
	
	Запрос.Текст =
	"ВЫБРАТЬ Разрешенные
	|	ОжидаемыйИПодтвержденныйНДСПриобретений.СтавкаНДС,
	|	ОжидаемыйИПодтвержденныйНДСПриобретений.НалоговоеНазначение,
	|	ОжидаемыйИПодтвержденныйНДСПриобретений.Амортизируется КАК Амортизируется,
	|	ОжидаемыйИПодтвержденныйНДСПриобретений.ВозвратнаяТара,
	|	&Курс * ОжидаемыйИПодтвержденныйНДСПриобретений.СуммаНДС КАК СуммаНДС,
	|	&Курс * ОжидаемыйИПодтвержденныйНДСПриобретений.БазаНДС КАК Сумма
	|ИЗ
	|	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПриобретений КАК ОжидаемыйИПодтвержденныйНДСПриобретений
	|ГДЕ
	|	  ОжидаемыйИПодтвержденныйНДСПриобретений.Регистратор 		 = &ДокументОснование
	|";
	
	СуммаВозвратнойТары	= 0;
	
	// сохраним имеющиеся строки в табличной части
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.ВозвратнаяТара = Истина Тогда
			
			СуммаВозвратнойТары = СуммаВозвратнойТары + Выборка.Сумма;
			
			СтрокаТары = ВозвратнаяТара.Добавить();
			
			СтрокаТары.НалоговоеНазначение = Выборка.НалоговоеНазначение;
			СтрокаТары.Сумма               = Выборка.Сумма;
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
			
				СтрокаТары.Сумма 						= - СтрокаТары.Сумма;
			
			КонецЕсли;
			
		Иначе
			
			СтрокаТоваров = Товары.Добавить();
			СтрокаТоваров.СтавкаНДС 					= Выборка.СтавкаНДС;
			СтрокаТоваров.НалоговоеНазначение 			= Выборка.НалоговоеНазначение;
			СтрокаТоваров.Амортизируется 				= Выборка.Амортизируется;
			СтрокаТоваров.СуммаНДС 						= Выборка.СуммаНДС;
			СтрокаТоваров.Сумма 						= Выборка.Сумма;
			СтрокаТоваров.СуммаВзаиморасчетов			= Выборка.Сумма + Выборка.СуммаНДС;

			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
			
				СтрокаТоваров.Сумма 						= - СтрокаТоваров.Сумма;
				СтрокаТоваров.СуммаВзаиморасчетов			= - СтрокаТоваров.СуммаВзаиморасчетов;	
			
			КонецЕсли;
			
			СтрокаТоваров.СтатьяКнигиПриобретения	= ОпределитьСтатьюНалоговойДекларации(СтрокаТоваров);
			
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, Номенклатура) Экспорт

	СчетаУчета = СчетаУчетаВДокументах.ПолучитьСчетаУчетаНоменклатурыИзНастроек(Организация, Номенклатура, , Дата);
	
	Если ЗначениеЗаполнено(СчетаУчета.НалоговоеНазначение) Тогда

	 	СтрокаТЧ.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;	
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Определяет рекомендуемое значение статьи налоговой декларации (СтатьяДекларацииНДСНалоговыйКредит)
// в зависимости от вида операции документа и значений параметров учета, указанных в строке ТЧ
//
// Параметры:
// СтрокаТЧ - строка ТЧ Товары (возвратная тара в книгу покупок не попадает)
//
Функция ОпределитьСтатьюНалоговойДекларации(СтрокаТЧ) Экспорт
	                                 
	СтатьиДеклараций = Справочники.СтатьиНалоговыхДеклараций;
	
	Если  ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ПогашениеНалоговогоВекселя Тогда			
		
		    Возврат  СтатьиДеклараций.ПустаяСсылка();
		
	Иначе
		// НалоговаяНакладная 
		// ТоварныйЧек 
		// РасчетКорректировки
		// РаботыОтНерезидентаПрошлогоПериода 
		// BeксeльПpoшлoгoПepиoдa 
		
		// Определим, имеется ли право на налоговый кредит	
		Если НалоговыйУчет.ЕстьНалоговыйКредит(СтрокаТЧ) Тогда
			// Уплаченный НДС имеем право включать в налоговый кредит 
			
			Если    СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
				ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
				// приобретение с уплатой НДС
				
				Если    ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.НалоговаяНакладная
					ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ИсправлениеОшибки
					ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ТоварныйЧек Тогда
					
					// 10.1 Декларации,
					Если СтрокаТЧ.Амортизируется Тогда
						
						Если СтрокаТЧ.ПропорциональныйНДС Тогда
						    Возврат  СтатьиДеклараций.НДС_НКПропорциональноВклВКредитПоставкаОФ;
						Иначе	
							Возврат  СтатьиДеклараций.НДС_НКПокупкаСНДСвВРОблагПриобрОФ;
						КонецЕсли;
					ИначеЕсли (Дата >= '20080101' И Дата < '20110301') И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда	
						
						Возврат  СтатьиДеклараций.НДС_НКПокупкаСНДСвВРОблагКомиссия;
						
					Иначе
						
						Если СтрокаТЧ.ПропорциональныйНДС Тогда
						    Возврат  СтатьиДеклараций.НДС_НКПропорциональноВклВКредит;
						Иначе	
							Возврат  СтатьиДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
						КонецЕсли;
						
					КонецЕсли;
					
					
				ИначеЕсли   ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат
						ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиКорректировка	Тогда

					Если СтрокаТЧ.ПропорциональныйНДС Тогда
					    Возврат  СтатьиДеклараций.НДС_НККорректировкаПропорциональноВклВКредит;
					Иначе	
						Возврат СтатьиДеклараций.НДС_НКИзменениеСтоимости;	
					КонецЕсли;
					
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РаботыОтНерезидентаПрошлогоПериода Тогда
					
					Если СтрокаТЧ.ПропорциональныйНДС Тогда
						Возврат  СтатьиДеклараций.НДС_НКПропорциональноВклВКредит;
					Иначе	
						Возврат  СтатьиДеклараций.НДС_НКИмпортВРОблагУслугиНерезидента;
					КонецЕсли;
					
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.BeксeльПpoшлoгoПepиoдa Тогда
					
					Возврат  СтатьиДеклараций.НДС_НКИмпортВРОблагВексель;
					
				ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ТаможенноеОформлениеТоваровКомитента Тогда
					
					Если СтрокаТЧ.ПропорциональныйНДС Тогда
						Возврат  СтатьиДеклараций.НДС_НКПропорциональноВклВКредит;
					Иначе	
						Возврат  СтатьиДеклараций.НДС_НКИмпортВРОблагНДСТамож;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				// приобретение без НДС
				Если    ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.НалоговаяНакладная
					ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ИсправлениеОшибки
					ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ТоварныйЧек Тогда
					
// 11.1 Декларации,
					Возврат  СтатьиДеклараций.НДС_НКПокупкаБезНДСвВРОблаг;
					
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат
					  ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиКорректировка	Тогда
					  
					 Возврат  СтатьиДеклараций.НДС_НККорректировкаБезНК;

				Иначе
					// Импорт
					
					Если ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РаботыОтНерезидентаПрошлогоПериода Тогда
						
						// странно, услуги от нерезидента успользуемые на территории Украины облагаются по ставке 20%
						Возврат  СтатьиДеклараций.ПустаяСсылка();
						
					ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.BeксeльПpoшлoгoПepиoдa Тогда
						
						// странно, был оформлен  вексель по ГТД не предусматривающей уплаты НДС
						Возврат  СтатьиДеклараций.ПустаяСсылка();
						
					ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ТаможенноеОформлениеТоваровКомитента Тогда
					
						Возврат  СтатьиДеклараций.НДС_НКИмпортВРОблагБезНДС;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;	
			
		Иначе 
			//нет права на налоговый кредит
			
			Если НЕ (СтрокаТЧ.НалоговоеНазначение.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая) Тогда	
				// относятся к хоз. деятельности, но будет использоваться в необлагаемых операциях
				
				Если    СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
					ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
					// приобретение с уплатой НДС
					
					Если    ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.НалоговаяНакладная
						ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ИсправлениеОшибки
						ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ТоварныйЧек 
						ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат
						ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиКорректировка	Тогда
						
						Если СтрокаТЧ.ПропорциональныйНДС Тогда
							
							Если ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат
							 ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиКорректировка Тогда
							 	Возврат  СтатьиДеклараций.НДС_НККорректировкаПропорциональноНеВклВКредит;	
							Иначе
								Возврат  СтатьиДеклараций.НДС_НКПропорциональноНеВклВКредит;	
							КонецЕсли;
							
						ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат
							  ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиКорректировка Тогда	
						
						    Возврат  СтатьиДеклараций.НДС_НККорректировкаБезНК;
							
						Иначе
							
							Возврат  СтатьиДеклараций.НДС_НКПокупкаСНДСвВРНеОблаг;
							
						КонецЕсли;	
						
					ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РаботыОтНерезидентаПрошлогоПериода Тогда
						
						// 13.3  Декларации,
						Если СтрокаТЧ.ПропорциональныйНДС Тогда
							Возврат  СтатьиДеклараций.НДС_НКПропорциональноНеВклВКредит;	
						Иначе	
							Возврат  СтатьиДеклараций.НДС_НКИмпортВРНеОблагНеОбъектУслугиНерезидента;
						КонецЕсли;
						
					ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.BeксeльПpoшлoгoПepиoдa Тогда
						
						    Возврат  СтатьиДеклараций.ПустаяСсылка();
						
					ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ТаможенноеОформлениеТоваровКомитента Тогда
					
						Если СтрокаТЧ.ПропорциональныйНДС Тогда
							Возврат  СтатьиДеклараций.НДС_НКПропорциональноНеВклВКредит;	
						Иначе	
							Возврат  СтатьиДеклараций.НДС_НКИмпортВРНеОблагНеОбъектНДСТамож;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					// приобретение без НДС					 

					Если    ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.НалоговаяНакладная
						ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ИсправлениеОшибки
						ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ТоварныйЧек Тогда
						
						Возврат  СтатьиДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
						
					ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат
						  ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиКорректировка	Тогда
						
						Возврат  СтатьиДеклараций.НДС_НККорректировкаБезНК;
						
					Иначе
						// Импорт
						Если ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РаботыОтНерезидентаПрошлогоПериода Тогда
							
							// странно, услуги от нерезидента успользуемые на территории Украины облагаются по ставке 20%
							Возврат  СтатьиДеклараций.ПустаяСсылка();
							
						ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.BeксeльПpoшлoгoПepиoдa Тогда
							
							// странно, был оформлен  вексель по ГТД не предусматривающей уплаты НДС
							Возврат  СтатьиДеклараций.ПустаяСсылка();
							
						ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ТаможенноеОформлениеТоваровКомитента Тогда
					
							Возврат  СтатьиДеклараций.НДС_НКИмпортВРНеОблагНеОбъектБезНДС;
						
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;	
				
			Иначе 
				//не относятся к хоз деятельности 
				
				Если    СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
					ИЛИ СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
					
					// приобретение с уплатой НДС
					
					// 14 Декларации,
					Возврат  СтатьиДеклараций.НДС_НКПокупкаСНДСнеВР_;
					
				Иначе
					// приобретение без уплаты НДС
					
					// 15 Декларации,
					Возврат  СтатьиДеклараций.НДС_НКПокупкаБезНДСнеВР_;
					
				КонецЕсли;			
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЕсли;			
	
КонецФункции //ОпределитьСтатьюНалоговойДекларации 

// В случае, когда документ-основание является документом оплаты или Авансовым отчетом (то есть документом,
// в которм могут быть указаны несколько Договоров) - возвращает один из договоров. Выбор производится либо
// автоматически, либо (при работе на Клиенте и если договоров несколько) интерактивно пользователем.
// Параметры
//   Основание - Документ основание
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов>   – выбранный/определенный договор
//
Функция ОпределитьДоговорКонтрагента(Основание) 
	
	Перем ТабДоговора, ПредпочтительныйДоговор;
	
	ПредпочтительныйДоговор = Новый Структура("ДоговорКонтрагента, Сделка");	
	
	МетаданныеДокумента    = Основание.Метаданные();
	ЕстьРасшифровкаПлатежа = МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено;
	
	Если Основание = Неопределено Тогда
		
		Возврат ПредпочтительныйДоговор;
		
	КонецЕсли;	
	
	МетаданныеДокумента = Основание.Метаданные();
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	АвансовыйОтчетВозвратнаяТара.ДоговорКонтрагента,
		               |	АвансовыйОтчетВозвратнаяТара.Сделка,
		               |	АвансовыйОтчетВозвратнаяТара.Контрагент КАК Контрагент
		               |ИЗ
		               |	Документ.АвансовыйОтчет.ВозвратнаяТара КАК АвансовыйОтчетВозвратнаяТара
		               |ГДЕ
		               |	АвансовыйОтчетВозвратнаяТара.Ссылка = &Ссылка
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	АвансовыйОтчетОплатаПоставщикам.ДоговорКонтрагента,
		               |	ВЫБОР
		               |		КОГДА АвансовыйОтчетОплатаПоставщикам.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
		               |				ИЛИ АвансовыйОтчетОплатаПоставщикам.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
		               |			ТОГДА АвансовыйОтчетОплатаПоставщикам.Сделка
		               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
		               |	КОНЕЦ,
		               |	АвансовыйОтчетОплатаПоставщикам.Контрагент
		               |ИЗ
		               |	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчетОплатаПоставщикам
		               |ГДЕ
		               |	АвансовыйОтчетОплатаПоставщикам.Ссылка = &Ссылка
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	АвансовыйОтчетПрочее.ДоговорКонтрагента,
		               |	АвансовыйОтчетПрочее.Сделка,
		               |	АвансовыйОтчетПрочее.Поставщик
		               |ИЗ
		               |	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
		               |ГДЕ
		               |	АвансовыйОтчетПрочее.Ссылка = &Ссылка
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	АвансовыйОтчетТовары.ДоговорКонтрагента,
		               |	АвансовыйОтчетТовары.Сделка,
		               |	АвансовыйОтчетТовары.Поставщик
		               |ИЗ
		               |	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
		               |ГДЕ
		               |	АвансовыйОтчетТовары.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Основание);
		ТабДоговора = Запрос.Выполнить().Выгрузить();
		
		Если ТабДоговора.Количество() = 0 Тогда
			
			Возврат ПредпочтительныйДоговор;
			
		КонецЕсли;
		
		// первый указанный в документе договор
		ПредпочтительныйДоговор.ДоговорКонтрагента = ТабДоговора[0].ДоговорКонтрагента;
		ПредпочтительныйДоговор.Сделка 			   = ТабДоговора[0].Сделка;
		
		ТабДоговора.Свернуть("Контрагент, ДоговорКонтрагента,Сделка", "");
		ТабДоговора.Сортировать("Контрагент, ДоговорКонтрагента");
		ТабДоговора.Колонки.ДоговорКонтрагента.Заголовок = НСтр("ru='Договор';uk='Договір'");
		ТабДоговора.Колонки.ДоговорКонтрагента.Ширина = 20;
		ТабДоговора.Колонки.Контрагент.Ширина = 20;
		ТабДоговора.Колонки.Сделка.Ширина = 20;
		
	ИначеЕсли ЕстьРасшифровкаПлатежа Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		                |	ПлатежныйДокумент.ДоговорКонтрагента,
			            |	ВЫБОР
			            |		КОГДА ПлатежныйДокумент.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
			            |				ИЛИ ПлатежныйДокумент.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
			            |			ТОГДА ПлатежныйДокумент.Сделка
			            |		ИНАЧЕ НЕОПРЕДЕЛЕНО
			            |	КОНЕЦ КАК Сделка
		                |ИЗ
		                |	Документ."+ МетаданныеДокумента.Имя +".РасшифровкаПлатежа КАК ПлатежныйДокумент
		                |ГДЕ
		                |	ПлатежныйДокумент.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Основание);
		ТабДоговора = Запрос.Выполнить().Выгрузить();
		
		Если ТабДоговора.Количество() = 0 Тогда
			
			Возврат ПредпочтительныйДоговор;
			
		КонецЕсли;
		
		// первый указанный в документе договор
		ПредпочтительныйДоговор.ДоговорКонтрагента = ТабДоговора[0].ДоговорКонтрагента;
		ПредпочтительныйДоговор.Сделка 			   = ТабДоговора[0].Сделка;
		
		ТабДоговора.Свернуть("ДоговорКонтрагента,Сделка", "");		
		ТабДоговора.Колонки.ДоговорКонтрагента.Заголовок = НСтр("ru='Договор';uk='Договір'");
		ТабДоговора.Колонки.ДоговорКонтрагента.Ширина = 30;
		ТабДоговора.Колонки.Сделка.Ширина = 30;
		
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		
		ТабДоговора = Новый ТаблицаЗначений();
		ТабДоговора.Колонки.Добавить("ДоговорКонтрагента");
		ТабДоговора.Колонки.Добавить("Сделка");
		ТабДоговора.Колонки.ДоговорКонтрагента.Заголовок = НСтр("ru='Договор';uk='Договір'");
		ТабДоговора.Колонки.ДоговорКонтрагента.Ширина = 0;
		ТабДоговора.Колонки.Сделка.Ширина = 60;
		
		СтрокаДоговоровСделок = ТабДоговора.Добавить();
		СтрокаДоговоровСделок.ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		
		Если СтрокаДоговоровСделок.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
				СтрокаДоговоровСделок.Сделка = Основание;	
			ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("Сделка") <> Неопределено Тогда
				СтрокаДоговоровСделок.Сделка = Основание.Сделка;	
			КонецЕсли;	
			
		ИначеЕсли СтрокаДоговоровСделок.ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда	
			
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СтрокаДоговоровСделок.Сделка = Основание;
				СделкаИзШапки = Основание;
			ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("Сделка") <> Неопределено Тогда
				Если ЗначениеЗаполнено(Основание.Сделка) Тогда
					СтрокаДоговоровСделок.Сделка = Основание.Сделка;
					СделкаИзШапки 				 = Основание.Сделка;
				Иначе
					ТабДоговора.Удалить(СтрокаДоговоровСделок);
					СделкаИзШапки = Неопределено;
				КонецЕсли;
			КонецЕсли;	
			
			////////////////////////////////////////////////////////////////////
			// просмотрим сделки, которые могут быть указаны в табличных частях
			ТекстЗапроса = "";
			Для каждого ТабЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
				Если НЕ ТабЧасть.Реквизиты.Найти("ЗаказПоставщику") = Неопределено Тогда
					
					Если НЕ ТекстЗапроса = "" Тогда
						ТекстЗапроса = ТекстЗапроса + "
						 |ОБЪЕДИНИТЬ
						 |";
					КонецЕсли;
					
					ТекстЗапроса = ТекстЗапроса + "
					 |ВЫБРАТЬ РАЗЛИЧНЫЕ 
					 |	ЗаказПоставщику КАК Сделка
					 |ИЗ Документ."+МетаданныеДокумента.Имя+"."+ТабЧасть.Имя+" КАК Док
					 |ГДЕ 
					 |	Док.Ссылка = &Основание
					 |";
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ТекстЗапроса = "" Тогда
				
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("Основание", Основание);
				Запрос.Текст = ТекстЗапроса;
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если     ЗначениеЗаполнено(Выборка.Сделка) 
						И НЕ Выборка.Сделка = СделкаИзШапки Тогда
		
						СтрокаДоговоровСделок = ТабДоговора.Добавить();
						СтрокаДоговоровСделок.ДоговорКонтрагента = Основание.ДоговорКонтрагента;
						СтрокаДоговоровСделок.Сделка = Выборка.Сделка;
					
					КонецЕсли;
				
				КонецЦикла;
				
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ПредпочтительныйДоговор;	
		
	КонецЕсли; 

	
	Если ТабДоговора.Количество() = 1 Тогда 
		// единственный договор
		ПредпочтительныйДоговор.ДоговорКонтрагента = ТабДоговора[0].ДоговорКонтрагента;
		ПредпочтительныйДоговор.Сделка 			   = ТабДоговора[0].Сделка;
		
		Возврат  ПредпочтительныйДоговор;
		
	Иначе
		// несколько договоров
#Если Клиент Тогда
	
		ВыбраннаяСтрока = ТабДоговора.ВыбратьСтроку("Выберите договор/сделку контрагента:");
		Если ВыбраннаяСтрока = Неопределено  Тогда
			
			ПредпочтительныйДоговор.ДоговорКонтрагента = Неопределено;
			ПредпочтительныйДоговор.Сделка 			   = Неопределено;
		
			Возврат ПредпочтительныйДоговор;
		
		Иначе
			ПредпочтительныйДоговор.ДоговорКонтрагента = ВыбраннаяСтрока.ДоговорКонтрагента;
			ПредпочтительныйДоговор.Сделка 			   = ВыбраннаяСтрока.Сделка;
		
			Возврат ПредпочтительныйДоговор;
			
		КонецЕсли; 
		
#Иначе
	
		// нет возможности выбрать интерактивно
		Возврат ПредпочтительныйДоговор;
		
#КонецЕсли

	КонецЕсли;
	
	
КонецФункции // ОпределитьДоговорКонтрагента()
 
/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Прежде всего, проверим заполнение реквизита Организация в шапке документа
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	// Теперь вызовем общую процедуру проверки
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	// Организация не заполнена, получать учетную политику нет смысла
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация,истина, Заголовок);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	Иначе
		СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитикаРегл.ЕстьНДС);
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если  НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// по фирме не ведется учет НДС, проводить документ не имеет смысла
		ОбщегоНазначения.СообщитьОбОшибке("Фирма не является плательщиком НДС!", Отказ, Заголовок);
	КонецЕсли;
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("ВидОперации, Организация, Контрагент, ДоговорКонтрагента, СчетНДС, ДатаВходящегоДокумента");

	Если ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ПогашениеНалоговогоВекселя Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаВексель");	
	Иначе
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");	
	КонецЕсли;
	
	Если    СтруктураШапкиДокумента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
	    СтруктураОбязательныхПолей.Вставить("Сделка");	
	КонецЕсли;
	
	Если ВключаетсяВУточняющийРасчет Тогда
		СтруктураОбязательныхПолей.Вставить("УточняемыйПериод");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ИсправлениеОшибки Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаКорректировкиНДСКредит");
		Если СтруктураОбязательныхПолей.Свойство("Сделка") Тогда
			СтруктураОбязательныхПолей.Удалить("Сделка");
		КонецЕсли;
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если Не Отказ И НалоговыйУчетПовтИсп.НоваяСхемаНДС(Дата) И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РаботыОтНерезидента Тогда
		
		// нельзя использовать данный вид операции после 29/07/2005
		ОбщегоНазначения.СообщитьОбОшибке("Недопустимый вид операции! Необходимо использовать документ Налоговая накладная с видом операции ""Работы от нерезидента""", Отказ, Заголовок);
		
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()


// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС",		    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДС",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал",     		ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВал",     		ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСПропорционально", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Для каждого СтрокаТаблицы из ТаблицаТоваров Цикл
		
		// движения по регистру ОжидаемыйИПодтвержденныйНДСПриобретений могут быть только от резидентов
		// и только в гривне.
		СтрокаТаблицы.СуммаНДСВал = СтрокаТаблицы.СуммаНДС;
		СтрокаТаблицы.СуммаВал 	  = СтрокаТаблицы.Сумма;
		
		СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС;
		
		// Сумма налогового кредита (при услугах от нерезидента - это налоговое обязательство)
		СтрокаТаблицы.ПроводкиСуммаНДС = СтрокаТаблицы.СуммаНДС;
		
		// Обнулим эту сумму, если отсутствует право на налоговый кредит	
		Если  ВидОперации <> Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РаботыОтНерезидента Тогда
			
			// Обнулим эту сумму, если отсутствует право на налоговый кредит	
			Если НЕ НалоговыйУчет.ЕстьНалоговыйКредит(СтрокаТаблицы) Тогда
				СтрокаТаблицы.ПроводкиСуммаНДС = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.ПропорциональныйНДС Тогда
			Если СтрокаТаблицы.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Облагаемая Тогда
				СтрокаТаблицы.СуммаНДСПропорционально = СтрокаТаблицы.СуммаНДСВал;
			КонецЕсли;
			СтрокаТаблицы.НалоговоеНазначение = НалоговыйУчетПовтИсп.ПолучитьПропорциональноеНалоговоеНазначение(СтрокаТаблицы.НалоговоеНазначение);
		КонецЕсли;
	
	КонецЦикла;
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ЗаполнитьСделкуРеглВТаблице(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()


// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("СуммаСНДС",		    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("ПроводкиСуммаНДС",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы из ТаблицаТары Цикл
		
		СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.Сумма;
		СтрокаТаблицы.ПроводкиСуммаНДС = 0;

	КонецЦикла;

	БухгалтерскийУчетРасчетовСКонтрагентами.ЗаполнитьСделкуРеглВТаблице(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТоваров()


// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
			Новый Структура("СтавкаНДС,
							|НалоговоеНазначение,
							|СтатьяКнигиПриобретения");
							
							
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// проверим допустимость указания пропорционального ндс
	Если Не Отказ Тогда
		
		Для Каждого Строка Из ТаблицаПоТоварам Цикл	
				
			Если  Строка.ПропорциональныйНДС Тогда
				
				Если НЕ Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20
				   И НЕ Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0  Тогда
				
					СтрокаСообщения = Локализация.СтрШаблон("В строке ""¤1¤"" указан признак пропорционального НДС! Ставка НДС в этом случае должна быть 20%(0%)!.", Строка.НомерСтроки);
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
					
				ИначеЕсли Строка.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.НеОблагаемая Тогда
					
					СтрокаСообщения = Локализация.СтрШаблон("В строке ""¤1¤"" указан признак пропорционального НДС! В этом случае нельзя выбирать налоговое назначение с нехозяйственным видом деятельности!.", Строка.НомерСтроки);
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
					
				КонецЕсли;			
				
			КонецЕсли;	
			
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()


// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НалоговоеНазначение");
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()


// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	
	// Проводки по бухгалтерскому учету НДС 
	ПроводкиБУ = Движения.Хозрасчетный;

	// ТОВАРЫ
	ТаблицаДвижений = ТаблицаПоТоварам.Скопировать();
	ТаблицаДвижений.Свернуть("СделкаРегл, СчетУчетаНДС", 
							 "ПроводкиСуммаНДС");
	
	СодержаниеПроводки = "НДС: налоговый кредит: ";
	Если 	 ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.НалоговаяНакладная Тогда
		СодержаниеПроводки = СодержаниеПроводки+ "налоговая накладная";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ТоварныйЧек Тогда 
		СодержаниеПроводки = СодержаниеПроводки+ "подтверждение (товарный чек)";
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат Тогда
		СодержаниеПроводки = "НДС: налоговые обязательства: расчет корректировки (возврат)";       	
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиКорректировка Тогда
		СодержаниеПроводки = "НДС: налоговые обязательства: расчет корректировки (изменение суммы компенсации)";       
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РаботыОтНерезидентаПрошлогоПериода Тогда
		СодержаниеПроводки = СодержаниеПроводки+ "работы от нерезидента прошлого периода";
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.BeксeльПpoшлoгoПepиoдa Тогда		
		СодержаниеПроводки = СодержаниеПроводки+ "вексель, погашенный в прошлом периоде";
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РаботыОтНерезидента Тогда		
		СодержаниеПроводки = "НДС: налоговые обязательства: работы от нерезидента";
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ИсправлениеОшибки Тогда
		СодержаниеПроводки = СодержаниеПроводки+ "корректировка через уточняющий расчет";
	КонецЕсли;		
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДС <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДС;
			Проводка.Содержание                 = СодержаниеПроводки;
			Проводка.НомерЖурнала               = "";

			Если ВидОперации <> Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РаботыОтНерезидента Тогда
			
				Если ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ПогашениеНалоговогоВекселя Тогда
						
					Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетУчетаВексель;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ВексельСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ВексельСубконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ВексельСубконто3);

				
					Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СубконтоДт1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СубконтоДт2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СубконтоДт3);
						
				Иначе	
						
					Проводка.СчетДт                     = СтруктураШапкиДокумента.СчетНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);

					Если ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ИсправлениеОшибки Тогда
						
						Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаКорректировкиНДСКредит;
						
					Иначе
						Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаНДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Сделки"     , СтрокаТаблицы.СделкаРегл);
					КонецЕсли;
						
				КонецЕсли;	
					
			Иначе 
				
				// Работы полученные от нерезидента в текущем периоде облагаются НДС по ставке 20% и
				// включаются в налоговые обязательства.
				Проводка.СчетДт                     = СтрокаТаблицы.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Сделки"     , СтрокаТаблицы.СделкаРегл);
				
				Проводка.СчетКт                     = СтруктураШапкиДокумента.СчетНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СубконтоДт3);


			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПриобретений(СтруктураШапкиДокумента, ТаблицаПоТоварам,  ТаблицаПоТаре, Отказ, Заголовок);
	
	ДвиженияПоРегиструКнигаПокупок( СтруктураШапкиДокумента, ТаблицаПоТоварам,  ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()


Процедура ДвиженияПоРегиструОжидаемыйИПодтвержденныйНДСПриобретений(СтруктураШапкиДокумента, ТаблицаПоТоварам,  ТаблицаПоТаре, Отказ, Заголовок)

	Если  ВидОперации <> Перечисления.ВидыОперацийЗаписьКнигиПриобретения.НалоговаяНакладная 
		И ВидОперации <> Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ТоварныйЧек 
		И ВидОперации <> Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат
		И ВидОперации <> Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиКорректировка Тогда
		
		// В этом случае движения по регистру НДСПокупок этом документом не формируются
		Возврат
		
	КонецЕсли;
	
	НаборДвижений = Движения.ОжидаемыйИПодтвержденныйНДСПриобретений;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаДвиженийОплата 	  = ТаблицаДвижений.Скопировать();
	ТаблицаДвиженийТара 	  = ТаблицаДвижений.Скопировать();
	
	// Формируются два движения по регистру: первое - закрывает ожидаемый НДС отгрузки, второе - оплаты.
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СтавкаНДС, НалоговоеНазначение, ВозвратнаяТара, Амортизируется", 
						  "Сумма, СуммаНДС, СуммаНДСПропорционально");
	
	ТаблицаКопия.Колонки.Сумма     		 .Имя = "БазаНДС";
	ТаблицаКопия.Колонки.СделкаРегл      .Имя = "Сделка";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	
	Если ВидОперации =  Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат, "СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.КорректировкаНалоговыйДокумент, "КодОперации");
		
		// Инвертируем суммы
		Для Каждого Строка Из ТаблицаДвижений Цикл
			Строка.БазаНДС	   = -Строка.БазаНДС;
			Строка.СуммаНДС    = -Строка.СуммаНДС;
			Строка.СуммаНДСПропорционально = -Строка.СуммаНДСПропорционально;
		КонецЦикла;
		
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, "СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ПодтвержденныйНДС,  "КодОперации");
	КонецЕсли;		
	
	// ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СделкаРегл, СтавкаНДС,НалоговоеНазначение, ВозвратнаяТара", "СуммаСНДС");
	ТаблицаКопия.Колонки.СуммаСНДС.Имя = "БазаНДС";
	ТаблицаКопия.Колонки.СделкаРегл.Имя = "Сделка";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
	
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	Если ВидОперации =  Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат Тогда
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат, "СобытиеНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.КорректировкаНалоговыйДокумент, "КодОперации");
		
		// Инвертируем суммы
		Для Каждого Строка Из ТаблицаДвиженийТара Цикл
			Строка.БазаНДС = -Строка.БазаНДС;
		КонецЦикла;
	
	Иначе
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление, "СобытиеНДС");
		ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ПодтвержденныйНДС,  "КодОперации");
	КонецЕсли;		
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьРасход();
	
	КонецЕсли;

	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
		
		Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьРасход();
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ДвиженияПоРегиструКнигаПокупок(СтруктураШапкиДокумента, ТаблицаПоТоварам,  ТаблицаПоТаре, Отказ, Заголовок);
  		
	НаборДвижений = Движения.КнигаПриобретений;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();

	ТаблицаКопия.Свернуть("СтавкаНДС, СтатьяКнигиПриобретения", "Сумма, СуммаНДС");
	
	ТаблицаКопия.Колонки.Сумма   .Имя = "БазаНДС";
	ТаблицаКопия.Колонки.СуммаНДС.Имя = "НДС";
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийКнигаПриобретений.ПервичныйДокумент, "КодОперации");
	
	Если 	ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.НалоговаяНакладная
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ТоварныйЧек
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиКорректировка	Тогда

		// не импорт
		
		ТаблицаДвижений.ЗаполнитьЗначения(ФормаОплаты, "ФормаОплаты");
		ТаблицаДвижений.ЗаполнитьЗначения(ДатаОплаты , "ДатаОплаты");
		
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(ДатаОплаты					 ,"ДатаОплатыИмпорт");
		ТаблицаДвижений.ЗаполнитьЗначения(ДатаВыдачиВекселя				 ,"ДатаВыдачиВекселя");
		ТаблицаДвижений.ЗаполнитьЗначения(ДатаПогашенияВекселя			 ,"ДатаПогашенияВекселя");
		ТаблицаДвижений.ЗаполнитьЗначения(ФактическаяДатаПогашенияВекселя,"ФактическаяДатаПогашенияВекселя");
	КонецЕсли; 
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.КнигаПриобретений.ДобавитьДвижение();
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) ИЛИ Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	// Дата
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;
	
	СтруктураДоговорКонтрагентаСделка = ОпределитьДоговорКонтрагента(Основание);
	ДоговорКонтрагента = СтруктураДоговорКонтрагентаСделка.ДоговорКонтрагента;
	Сделка 			   = СтруктураДоговорКонтрагентаСделка.Сделка;
	
	// в случае Авансового отчета контрагент может быть переопределен
	Контрагент = ДоговорКонтрагента.Владелец;
 	
	ДокументОснование = Основание;
	ТипОснования = ТипЗнч(Основание);
	
	МетаданныеДокумента    = ДокументОснование.Метаданные();
	ЕстьРасшифровкаПлатежа = МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено;

	Если  ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаОжидаемогоИПодтвержденногоНДС")
	  ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ПодтверждениеКорректировокИспользованияНалоговыйУчет") Тогда 
	  
	  ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ИсправлениеОшибки;	
	  ВключаетсяВУточняющийРасчет = истина;
	  Возврат;
	  
	ИначеЕсли  ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")	
	  ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		// возврат
		ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат;
		
	ИначеЕсли (    ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") 
	  		  ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ"))
			 И Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			 И Основание.Дата < '20110101' Тогда

		ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат;
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		  ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		  
		ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.НалоговаяНакладная;
		
	ИначеЕсли (ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")) 
		 И НЕ (Основание.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда	
		
		ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РаботыОтНерезидентаПрошлогоПериода;
		
		ЗаполнитьПоРаботамОтНерезидента();
		// стандартнго заполнения не будет.
		Возврат;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")  
		 И НЕ (Основание.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда	
		
		ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РаботыОтНерезидентаПрошлогоПериода;
		
		ЗаполнитьПоУслугамКомиссииОтНерезидента();
		// стандартнго заполнения не будет.
		Возврат;
		
	ИначеЕсли (  ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")) 
			 И Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			 И Основание.Дата >= '20110101' Тогда

		ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.НалоговаяНакладная;
		
		ЗаполнитьПоКомиссионнойТорговлеНалоговыйКодекс();
		// стандартнго заполнения не будет.
		Возврат;
		
	ИначеЕсли (  ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ")) 
			 И Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			 И Основание.Дата >= '20110101' Тогда

		ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат;
		
		ЗаполнитьПоКомиссионнойТорговлеНалоговыйКодекс();
		// стандартнго заполнения не будет.
		Возврат;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		
		// возврат
		ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПереоценкаТоваровПринятыхНаКомиссию") Тогда
		
		Если Основание.Дата < '20110101' Тогда
			ТекстПредупреждения = "Регистрацию входящих налоговых документов можно вводить только на основании документов, оформленных начиная с 2011 года!";
			#Если Клиент Тогда
				Предупреждение(ТекстПредупреждения);
			#Иначе
				Сообщить(ТекстПредупреждения, СтатусСообщения.Информация);
			#КонецЕсли
			Возврат;
		КонецЕсли;
		
		ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиКорректировка;
		
		ЗаполнитьПоКомиссионнойТорговлеНалоговыйКодекс();
		
		Возврат	
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		И Основание.Дата > '20110101' Тогда
		
		ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиКорректировка;
		
		ЗаполнитьПоКомиссионнойТорговлеНалоговыйКодекс();
		
		Возврат	
		
		
	Иначе
		
		Если НЕ (Основание.Ссылка.Метаданные().Реквизиты.Найти("УчитыватьНДС") = Неопределено) 
			И    Основание.УчитыватьНДС Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.НалоговаяНакладная;
		ИначеЕсли ЕстьРасшифровкаПлатежа Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.НалоговаяНакладная;
		Иначе
			//покупка у неплательщика НДС. Основание включения в книгу - товарний чек (п. 10.2 Порядка)
			ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ТоварныйЧек;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПоДокументуОснованиюСУчетомОстатков(Товары);
	ЗаполнитьПоДокументуОснованиюСУчетомОстатков(ВозвратнаяТара);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента 	  = Товары.Итог("Сумма");
	СуммаНДСДокумента = Товары.Итог("СуммаНДС");

	// Очистим неиспользуемые реквизиты.
	Если 	 ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.НалоговаяНакладная
		 ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.ТоварныйЧек
		 ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат
		 ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиКорректировка	Тогда
		 
		 // Покупка в Украине:
		 // очистим реквизиты, относящиеся к векселям
		 мПустаяДата = '00010101000000';
		 ДатаВыдачиВекселя 				 = мПустаяДата;
		 ДатаПогашенияВекселя			 = мПустаяДата;
         ФактическаяДатаПогашенияВекселя = мПустаяДата;
		 
	 Иначе
		 
		 //Импорт
		 //очистим реквизит "форма оплаты"
		 ФормаОплаты = "";
		 
	 КонецЕсли;
	 
 	Если ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		// Договор - внешнеэкономический
		ВозвратнаяТара.Очистить();
	КонецЕсли;

	Если  НЕ ЗначениеЗаполнено(Сделка) 
		И НЕ Сделка = Неопределено Тогда
		Сделка = Неопределено;
	ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента)
		И НЕ (    ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		      ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетовРегл = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
	    И ЗначениеЗаполнено(Сделка) Тогда
		Сделка = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "Организация"         , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", "ВидДоговора"         , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке,  "ДоговорКонтрагента", "ВедениеВзаиморасчетовРегл"                 , "ВедениеВзаиморасчетовРегл");
                                    
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	// При получении учетной политики произошли ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	СтруктураСложныхПолей = Новый Структура();
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаНДС"					, "СуммаНДС");
	СтруктураСложныхПолей.Вставить("СчетУчетаНДС"    	, "ВЫБОР КОГДА СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ТОГДА Ссылка.СчетУчетаНДС ИНАЧЕ СчетУчетаНДС КОНЕЦ");	
	СтруктураПолей.Вставить("НалоговоеНазначение"  		, "НалоговоеНазначение");	
	СтруктураПолей.Вставить("Амортизируется"			, "Амортизируется");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  , "НалоговоеНазначение.ВидНалоговойДеятельности");
	СтруктураПолей.Вставить("ВидДеятельностиНДС"        , "НалоговоеНазначение.ВидДеятельностиНДС");
	СтруктураПолей.Вставить("ПропорциональныйНДС"		, "ПропорциональныйНДС");
	СтруктураПолей.Вставить("СтатьяКнигиПриобретения"  	, "СтатьяКнигиПриобретения");
	СтруктураПростыхПолей.Вставить("ВозвратнаяТара"     , Ложь);
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения по табличной части "Тара".
	СтруктураПолей = Новый Структура();
	СтруктураПростыхПолей = Новый Структура();
	
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("НалоговоеНазначение"  		, "НалоговоеНазначение");
	
	СтруктураПростыхПолей.Вставить("СтавкаНДС"          , Перечисления.СтавкиНДС.НеНДС);
	СтруктураПростыхПолей.Вставить("СуммаНДС"			, 0);
	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"       , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПростыхПолей.Вставить("СтатьяКнигиПриобретения", Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка());
    СтруктураПростыхПолей.Вставить("ВозвратнаяТара"     , Истина);
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Тара".
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПотаре, СтруктураШапкиДокумента, Отказ, Заголовок);
   	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");