Перем мОкруглятьДо Экспорт;
Перем мПроцентВыплаты Экспорт;
Перем мПериодС Экспорт;
Перем мПериодПо Экспорт;
Перем мСортировка Экспорт;
Перем мБольничныеВид Экспорт;
Перем мБольничныеФССАвансом Экспорт;
Перем спСотрудников Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

Функция ЗаполнитьВзносы(Сотрудники = Неопределено) Экспорт
	
	/////////////////////////////////////////
	// < начало - создание движений документа
	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления( Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
	Если Отказ Тогда
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		Возврат Не Отказ;
	КонецЕсли;
	// > окончание - создание движений документа
	
	/////////////////////////////////////////
	// < начало - заполнение
	ПроведениеРасчетов.АвтозаполнениеВзносы( Ссылка, Взносы, Истина, Сотрудники, Истина);
	
	
	/////////////////////////////////////////
	// Удаляем движения - все закончено
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	
КонецФункции  // ЗаполнитьВзносы()

Функция ЗаполнитьВзносыФОТ(Сотрудники = Неопределено) Экспорт
	
	/////////////////////////////////////////
	// < начало - создание движений документа
	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления( Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
	Если Отказ Тогда
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		Возврат Не Отказ;
	КонецЕсли;
	// > окончание - создание движений документа
	
	/////////////////////////////////////////
	// < начало - заполнение
	ПроведениеРасчетов.АвтозаполнениеВзносы( Ссылка, ВзносыФОТ, Ложь, Сотрудники, Истина);
	
	
	/////////////////////////////////////////
	// Удаляем движения - все закончено
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	
	
КонецФункции  // РассчитатьВзносы()

Функция ЗаполнитьНДФЛ(Сотрудники = Неопределено) Экспорт
	
	/////////////////////////////////////////
	// < начало - создание движений документа
	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления( Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;

	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
		
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	// Если есть какие-то проблемы - удаляем движения (тут нет транзакции) 
	Если Отказ Тогда
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		Возврат Не Отказ;
	КонецЕсли;
	// > окончание - создание движений документа
	
	/////////////////////////////////////////
	// < начало - заполнение
	ПроведениеРасчетов.АвтозаполнениеНДФЛ( Ссылка, НДФЛ, Сотрудники, Истина);
	
	
	/////////////////////////////////////////
	// Удаляем движения - все закончено
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
КонецФункции  // ЗаполнитьНДФЛ()



Процедура РассчитатьВзносы( ТЧВзносы, ИмяТаблицы = "Взносы", Сотрудники, КомментироватьРасчет = Ложь ) Экспорт
	
	/////////////////////////////////////////
	// < начало - создание движений документа
	Отказ = Ложь;
	МассивИндексыСтрокВзносыВФонды = Новый Массив();
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления( Сотрудники).Выбрать();
	ВыборкаПоВзносам = СформироватьЗапросПоВзносы( ИмяТаблицы, Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// создадим наборы
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
		КонецЕсли;
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды = РегистрыРасчета.ВзносыВФонды.СоздатьНаборЗаписей();
	НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоВзносам.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);
			МассивИндексыСтрокВзносыВФонды.Добавить(ВыборкаПоВзносам.НомерСтроки-1);
		КонецЕсли;
	КонецЦикла;
	НаборВзносыВФонды.Записать();
	
	// если что-то не так, то очистим созданные наборы
	Если Отказ Тогда
		
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		Возврат;
	КонецЕсли;
	// > окончание - создание движений документа
	
	/////////////////////////////////////////
	// < начало - расчет
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ВзносыВФонды", НаборВзносыВФонды, ТЧВзносы, МассивИндексыСтрокВзносыВФонды, Сотрудники, КомментироватьРасчет);
	
	
	
	/////////////////////////////////////////
	// Удаляем движения - все закончено
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды.Очистить();
	НаборВзносыВФонды.Записать();
	
	Записать();
	
	РасчетВыплатыСУчетомНалогов(Сотрудники);
	
КонецПроцедуры  // РассчитатьВзносы()

Процедура РассчитатьНДФЛ( Сотрудники, КомментироватьРасчет = Ложь ) Экспорт
	
	/////////////////////////////////////////
	// < начало - создание движений документа
	Отказ = Ложь;
	МассивИндексыСтрокНДФЛ = Новый Массив();
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(Сотрудники).Выбрать();
	ВыборкаПоВзносам = СформироватьЗапросПоВзносы( , Сотрудники).Выбрать();
	ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ( Сотрудники).Выбрать();
	ЗафиксироватьТранзакцию();
	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
			
		КонецЕсли;
	КонецЦикла;
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды = РегистрыРасчета.ВзносыВФонды.СоздатьНаборЗаписей();
	НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоВзносам.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);

		КонецЕсли;
	КонецЦикла;
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ = РегистрыНакопления.ВзаиморасчетыПоНДФЛ.СоздатьНаборЗаписей();
	НаборНДФЛ.Отбор.Регистратор.Значение = Ссылка;
	Пока ВыборкаПоНДФЛ.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ);
		Если НЕ Отказ Тогда
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, НаборНДФЛ);
			МассивИндексыСтрокНДФЛ.Добавить(ВыборкаПоНДФЛ.НомерСтроки-1);

		КонецЕсли;
	КонецЦикла;
	НаборНДФЛ.Записать();

	Если Отказ Тогда
		
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		НаборНДФЛ.Очистить();
		НаборНДФЛ.Записать();
		
		Возврат;
	КонецЕсли;
	// > окончание - создание движений документа
	
	/////////////////////////////////////////
	// < начало - расчет
	ПроведениеРасчетов.РассчитатьЗаписиНДФЛ(НаборНДФЛ, НДФЛ, МассивИндексыСтрокНДФЛ, Сотрудники, КомментироватьРасчет);
	
	/////////////////////////////////////////
	// Удаляем движения - все закончено
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборВзносыВФонды.Очистить();
	НаборВзносыВФонды.Записать();
	
	НаборНДФЛ.Очистить();
	НаборНДФЛ.Записать();
	
	Записать();
	
	РасчетВыплатыСУчетомНалогов(Сотрудники);
	
КонецПроцедуры  // РассчитатьНДФЛ

Процедура РассчитатьНалоги( Сотрудники, КомментироватьРасчет = Ложь) Экспорт
	
	// -1- ЗАПОЛНЕНИЕ ТЧ Взносы и НДФЛ////////////////////
	Если ВидВыплаты.РасчитыватьВзносы Тогда
		
		/////////////////////////////////////////
		// < начало - создание движений документа
		Отказ = Ложь;
		МассивИндексыСтрокНачисления = Новый Массив();
		
		// Перечитаем объект и соберем данные для заполнения наборов записей регистров
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(Сотрудники).Выбрать();
		ВыборкаПоВзносам = СформироватьЗапросПоВзносы( , Сотрудники).Выбрать();
		ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ( Сотрудники).Выбрать();
		ЗафиксироватьТранзакцию();
		
		// Создадим рабочие наборы записей
		НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
		НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
		Пока ВыборкаПоНачислениям.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
			Если НЕ Отказ Тогда
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, НаборОсновныеНачисления);
				
				МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
				
			КонецЕсли;
		КонецЦикла;
		НаборОсновныеНачисления.Записать();
		
		Если Отказ Тогда
			
			НаборОсновныеНачисления.Очистить();
			НаборОсновныеНачисления.Записать();
			
			Возврат;
		КонецЕсли;
		// > окончание - создание движений документа
		
		/////////////////////////////////////////
		// < начало - заполнение
		ПроведениеРасчетов.АвтозаполнениеВзносы( Ссылка, Взносы, Истина, Сотрудники, Истина);
		Записать();
		ПроведениеРасчетов.АвтозаполнениеНДФЛ( Ссылка, НДФЛ, Сотрудники, Истина);
		Записать();
		
		
		
		// РАСЧЕТ ТЧ ////////////////////
		
		/////////////////////////////////////////
		// < начало - создание движений документа
		Отказ = Ложь;
		МассивИндексыСтрокНДФЛ = Новый Массив();
		МассивИндексыСтрокВзносыВФонды = Новый Массив();
		
		// Перечитаем объект и соберем данные для заполнения наборов записей регистров
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоВзносам = СформироватьЗапросПоВзносы( , Сотрудники).Выбрать();
		ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ( Сотрудники).Выбрать();
		ЗафиксироватьТранзакцию();
		
		// Досоздадим рабочие наборы записей
		НаборВзносыВФонды = РегистрыРасчета.ВзносыВФонды.СоздатьНаборЗаписей();
		НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
		Пока ВыборкаПоВзносам.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
			Если НЕ Отказ Тогда
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);
				МассивИндексыСтрокВзносыВФонды.Добавить(ВыборкаПоВзносам.НомерСтроки-1);
				
			КонецЕсли;
		КонецЦикла;
		НаборВзносыВФонды.Записать();
		
		НаборНДФЛ = РегистрыНакопления.ВзаиморасчетыПоНДФЛ.СоздатьНаборЗаписей();
		НаборНДФЛ.Отбор.Регистратор.Значение = Ссылка;
		Пока ВыборкаПоНДФЛ.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ);
			Если НЕ Отказ Тогда
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, НаборНДФЛ);
				МассивИндексыСтрокНДФЛ.Добавить(ВыборкаПоНДФЛ.НомерСтроки-1);
				
			КонецЕсли;
		КонецЦикла;
		НаборНДФЛ.Записать();
		
		Если Отказ Тогда
			
			НаборВзносыВФонды.Очистить();
			НаборВзносыВФонды.Записать();
			
			НаборНДФЛ.Очистить();
			НаборНДФЛ.Записать();
			
			Возврат;
		КонецЕсли;
		// > окончание - создание движений документа
		
		/////////////////////////////////////////
		// < начало - расчет
		Если ВидВыплаты.РасчетОтОбратного Тогда
			
			мСотрудники = Сотрудники.Скопировать(); 
			
			Для каждого СтрокаНабора Из НаборОсновныеНачисления Цикл
				//СтрокаРаботники = РаботникиОрганизации[СтрокаНабора.НомерСтроки-1];
				//		СтрокаРаботники = РаботникиОрганизации.Получить(МассивИндексыСтрокНачисления.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений)));
				СтрокаРаботники = РаботникиОрганизации.Получить(МассивИндексыСтрокНачисления.Получить(СтрокаНабора.НомерСтроки-1));
				
				СтрокаНабора.Результат = СтрокаРаботники.Сумма*1.5;
				СтрокаРаботники.СуммаГрязными	= СтрокаНабора.Результат;
				СтрокаРаботники.СуммаПромежуточная	= СтрокаРаботники.Сумма;
			КонецЦикла;
			НаборОсновныеНачисления.Записать();
			Записать();
			
			Инд = 0; 
			Расчитывать = Истина;
			Пока Расчитывать Цикл
				
				ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ВзносыВФонды", НаборВзносыВФонды, Взносы, МассивИндексыСтрокВзносыВФонды, мСотрудники, КомментироватьРасчет);//, Сотрудники);
				НаборВзносыВФонды.Записать();
				ПроведениеРасчетов.РассчитатьЗаписиНДФЛ(НаборНДФЛ, НДФЛ, МассивИндексыСтрокНДФЛ, мСотрудники, КомментироватьРасчет);
				НаборНДФЛ.Записать();
				
				Расчитывать = ПроверкаУсловияОкончания( мСотрудники, НаборОсновныеНачисления );
				Инд = Инд + 1;
				
			КонецЦикла;
			
		Иначе
			
			ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ВзносыВФонды", НаборВзносыВФонды, Взносы, МассивИндексыСтрокВзносыВФонды, Сотрудники, КомментироватьРасчет);
			ПроведениеРасчетов.РассчитатьЗаписиНДФЛ(НаборНДФЛ, НДФЛ, МассивИндексыСтрокНДФЛ, Сотрудники, КомментироватьРасчет);
			Записать();
			
		КонецЕсли;
		
		
		/////////////////////////////////////////
		// Удаляем движения - все закончено
		//НаборОсновныеНачисления.Очистить();
		//НаборОсновныеНачисления.Записать();
		//
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		НаборНДФЛ.Очистить();
		НаборНДФЛ.Записать();
		
		Записать();
	КонецЕсли;
	
	// -2- ЗАПОЛНЕНИЕ ТЧ ВзносыФОТ////////////////////////
	Если ВидВыплаты.РасчитыватьВзносы Тогда
		
		/////////////////////////////////////////
		// < начало - заполнение
		////Сотрудники.ЗагрузитьЗначения( РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник") );
		ПроведениеРасчетов.АвтозаполнениеВзносы( Ссылка, ВзносыФОТ, Ложь, Сотрудники, Истина);
		Записать();
		
		
		// -4- РАСЧЕТ ТЧ ВзносыФОТ////////////////////
		
		/////////////////////////////////////////
		// < начало - создание движений документа
		МассивИндексыСтрокВзносыВФонды = Новый Массив();
		
		// Перечитаем объект и соберем данные для заполнения наборов записей регистров
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоВзносам = СформироватьЗапросПоВзносы( "ВзносыФОТ", Сотрудники).Выбрать();
		ЗафиксироватьТранзакцию();
		
		// Досоздадим рабочие наборы записей
		НаборВзносыВФонды = РегистрыРасчета.ВзносыВФонды.СоздатьНаборЗаписей();
		НаборВзносыВФонды.Отбор.Регистратор.Значение = Ссылка;
		Пока ВыборкаПоВзносам.Следующий() Цикл
			
			ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоВзносам, Отказ);
			Если НЕ Отказ Тогда
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуВзносы(ВыборкаПоВзносам, НаборВзносыВФонды);
				МассивИндексыСтрокВзносыВФонды.Добавить(ВыборкаПоВзносам.НомерСтроки-1);
				
			КонецЕсли;
		КонецЦикла;
		НаборВзносыВФонды.Записать();
		
		Если Отказ Тогда
			
			НаборВзносыВФонды.Очистить();
			НаборВзносыВФонды.Записать();
			
			Возврат;
		КонецЕсли;
		// > окончание - создание движений документа
		
		/////////////////////////////////////////
		// < начало - расчет
		ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ВзносыВФонды", НаборВзносыВФонды, ВзносыФОТ, МассивИндексыСтрокВзносыВФонды, Сотрудники, КомментироватьРасчет);
		
		
		/////////////////////////////////////////
		// Удаляем движения - все закончено
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборВзносыВФонды.Очистить();
		НаборВзносыВФонды.Записать();
		
		Записать();
	КонецЕсли;
	
	// -3- Выплата = СуммаГрязными - Взносы и НДФЛ////////
	Если ВидВыплаты.РасчитыватьВзносы Тогда
		
		РасчетВыплатыСУчетомНалогов( Сотрудники );
		
	КонецЕсли;
	
КонецПроцедуры //РассчитатьНалоги()

Функция ПроверкаУсловияОкончания(Сотрудники, НаборОсновныеНачисления) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);

	// ВТДанные
	Если Истина Тогда
		// Список сотрудников по которым необходимо выполнить перерасчет
		// Поля:
		//		Сотрудник
		// Описание:
		// 
		//
		ТекстЗапросаВТ = "
		|		ВЫБРАТЬ
		|			Начисления.Сотрудник				КАК Сотрудник,
		|			СУММА(Начисления.Сумма)				КАК Сумма,
		|			СУММА(Начисления.СуммаГрязными)		КАК СуммаГрязными,
		|			СУММА(Начисления.СуммаКонтрольная)	КАК СуммаКонтрольная,
		|			СУММА(Начисления.Начислено)			КАК Начислено,
		|			СУММА(Начисления.Взносы)			КАК Взносы,
		|			СУММА(Начисления.НДФЛ)				КАК НДФЛ
		|ПОМЕСТИТЬ ВТДанные
		|		ИЗ (
		|		ВЫБРАТЬ
		|			Основной.Сотрудник		КАК Сотрудник,
		|			0						КАК Сумма,
		|			Основной.Результат		КАК СуммаГрязными,
		|			-Основной.Результат		КАК СуммаКонтрольная,
		|			0						КАК Начислено,
		|			0						КАК Взносы,
		|			0						КАК НДФЛ
		|		ИЗ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
		|		ГДЕ Основной.Регистратор = &Регистратор
		|		и 	Основной.Сотрудник в (&парамСотрудники)
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			Основной.Сотрудник		КАК Сотрудник,
		|			Основной.Сумма			КАК Сумма,
		|			0						КАК СуммаГрязными,
		|			Основной.Сумма			КАК СуммаКонтрольная,
		|			Основной.СуммаПромежуточная	КАК Начислено,
		|			0						КАК Взносы,
		|			0						КАК НДФЛ
		|		ИЗ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Основной
		|		ГДЕ		Основной.Ссылка = &Регистратор
		|			и 	Основной.Сотрудник в (&парамСотрудники)
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			Основной.Сотрудник		КАК Сотрудник,
		|			0						КАК Сумма,
		|			0						КАК СуммаГрязными,
		|			Основной.Результат		КАК СуммаКонтрольная,
		|			0						КАК Начислено,
		|			Основной.Результат		КАК Взносы,
		|			0						КАК НДФЛ
		|		ИЗ РегистрРасчета.ВзносыВФонды КАК Основной
		|		ГДЕ		Основной.Регистратор = &Регистратор
		|			и 	Основной.Сотрудник в (&парамСотрудники)
		|			и 	Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Взносы)
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			Основной.Сотрудник	КАК Сотрудник,
		|			0					КАК Сумма,
		|			0					КАК СуммаГрязными,
		|			Основной.Налог		КАК СуммаКонтрольная,
		|			0					КАК Начислено,
		|			0					КАК Взносы,
		|			Основной.Налог		КАК НДФЛ
		|		ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Основной
		|		ГДЕ		Основной.Регистратор = &Регистратор
		|			и 	Основной.Сотрудник в (&парамСотрудники)
		|   ) КАК Начисления
		|
		|	СГРУППИРОВАТЬ ПО   
		|		Начисления.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО 
		|	Сотрудник
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТДанные = "ВТДанные";
		ТекстЗапросаВТ = "
		|		ВЫБРАТЬ *
		|       ИЗ ВТДанные
		|";
		Запрос.Текст = ТекстЗапросаВТ;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Начисления.НомерСтроки		КАК НомерСтрокиРег,
	|	Работники.НомерСтроки		КАК НомерСтрокиДок,
	|	Расчет.Сотрудник			КАК Сотрудник,
	|	Расчет.СуммаГрязными		КАК СуммаГрязными,
	|	Расчет.СуммаКонтрольная		КАК СуммаКонтрольная,
	|	Расчет.Начислено			КАК Начислено,
	|	Расчет.Взносы				КАК Взносы,
	|	Расчет.НДФЛ					КАК НДФЛ
	|	
	|ИЗ ВТДанные КАК Расчет
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|ПО Начисления.Регистратор = &Регистратор
	|и 	Начисления.Сотрудник = Расчет.Сотрудник
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ  Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Работники
	|ПО	Работники.Ссылка = &Регистратор
	|и 	Работники.Сотрудник = Расчет.Сотрудник
	|
	|ГДЕ Расчет.СуммаКонтрольная <> 0
	//|И Расчет.Начислено <> Расчет.СуммаГрязными 
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	тбРасчет = Запрос.Выполнить().Выгрузить();
	Сотрудники.ЗагрузитьЗначения( тбРасчет.ВыгрузитьКолонку("Сотрудник") );
	
	// А теперь 
	// 1. Пропишим новые результаты
	// 2. Сделаем новый шаг
	Для каждого ТекСтрока Из тбРасчет Цикл
		// 1. Пропишим новые результаты
		СтрокаДвижений = НаборОсновныеНачисления.Получить( ТекСтрока.НомерСтрокиРег - 1 );
		СтрокаРаботники = РаботникиОрганизации.Получить( ТекСтрока.НомерСтрокиДок - 1 );
		
		мРезультат = ?(СтрокаДвижений.Результат = NULL, 0, СтрокаДвижений.Результат);
		мВзносы = ?(ТекСтрока.Взносы = NULL, 0,ТекСтрока.Взносы);
		мНДФЛ = ?(ТекСтрока.НДФЛ = NULL, 0,ТекСтрока.НДФЛ);
		
		// 2. Сделаем новый шаг   
		Шаг =  (СтрокаРаботники.СуммаПромежуточная - СтрокаРаботники.СуммаГрязными) / 2;
		Если Шаг>0 Тогда
			Шаг = Макс(Шаг,0.01);
		ИначеЕсли Шаг<0 Тогда
			Шаг = Макс(-Шаг,0.01);
		КонецЕсли;
		СтрокаДвижений.Результат			= СтрокаДвижений.Результат + ?(ТекСтрока.СуммаКонтрольная>0, Шаг, -Шаг);
		СтрокаРаботники.СуммаПромежуточная	= СтрокаРаботники.СуммаГрязными;
		СтрокаРаботники.СуммаГрязными		= СтрокаДвижений.Результат;
		
		НаборОсновныеНачисления.Записать();
		
	КонецЦикла;
	Записать();
	
	Возврат (Сотрудники.Количество() > 0) И (Шаг <> 0);
	
КонецФункции // ПроверкаУсловияОкончания()

Процедура РасчетВыплатыСУчетомНалогов(Сотрудники ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);

	// ВТДанные
	Если Истина Тогда
		// Список сотрудников по которым необходимо выполнить перерасчет
		// Поля:
		//		Сотрудник
		// Описание:
		// 
		//
		ТекстЗапросаВТ = "
		|		ВЫБРАТЬ
		|			Начисления.НомерСтроки,
		|			Начисления.Сотрудник,
		|			Начисления.СуммаГрязными,
		|			СУММА(Начисления.Налоги)		КАК Налоги
		|ПОМЕСТИТЬ ВТДанные
		|		ИЗ (
		|		ВЫБРАТЬ
		|			Основной.НомерСтроки,
		|			Основной.Сотрудник,
		|			Основной.СуммаГрязными,
		|			НДФЛ.Налог			КАК Налоги
		|		ИЗ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Основной
		|       ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.НДФЛ КАК НДФЛ
		|       ПО		НДФЛ.Ссылка = &Регистратор
		|			И 	Основной.Сотрудник = НДФЛ.Сотрудник
		|		ГДЕ		Основной.Ссылка = &Регистратор
		|			и 	Основной.Сотрудник в (&парамСотрудники)
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|		ВЫБРАТЬ
		|			Основной.НомерСтроки,
		|			Основной.Сотрудник,
		|			Основной.СуммаГрязными,
		|			Взносы.Результат	КАК Налоги
		|		ИЗ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Основной
		|       ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Взносы КАК Взносы
		|       ПО		Взносы.Ссылка = &Регистратор
		|			И 	Основной.Сотрудник = Взносы.Сотрудник
		|		ГДЕ		Основной.Ссылка = &Регистратор
		|			и 	Основной.Сотрудник в (&парамСотрудники)
		|
		|   ) КАК Начисления
		|
		|	СГРУППИРОВАТЬ ПО   
		|			Начисления.НомерСтроки,
		|			Начисления.Сотрудник,
		|			Начисления.СуммаГрязными
		|
		|ИНДЕКСИРОВАТЬ ПО 
		|	Сотрудник
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТДанные = "ВТДанные";
		ТекстЗапросаВТ = "
		|		ВЫБРАТЬ *
		|       ИЗ ВТДанные
		|";
		Запрос.Текст = ТекстЗапросаВТ;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Данные.НомерСтроки						КАК НомерСтроки,
	|	Данные.Сотрудник						КАК Сотрудник,
	|	Данные.СуммаГрязными - Данные.Налоги	КАК Сумма,
	|	Данные.Налоги
	|	
	|ИЗ ВТДанные КАК Данные
	|
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаРаботники			= РаботникиОрганизации.Получить( Выборка.НомерСтроки - 1 );
		СтрокаРаботники.Сумма	= Выборка.Сумма;
		РасчитатьСуммыСотрудника( СтрокаРаботники.Сумма,  СтрокаРаботники);
		
	КонецЦикла;
	Записать();
	
КонецПроцедуры // РасчетВыплатыСУчетомНалогов()

Процедура РасчитатьСуммыСотрудника( НоваяСумма,  СтрокаРаботники) Экспорт
	
	//СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	Если мОкруглятьДо > 0.01 Тогда
		СтрокаРаботники.Сумма = Цел(НоваяСумма/мОкруглятьДо)*мОкруглятьДо;
		Если ВидВыплаты <> Справочники.ВидыВыплат.АвансПредварительныйРасчет Тогда
			СтрокаРаботники.СуммаОкругления = НоваяСумма - Цел(НоваяСумма/мОкруглятьДо)*мОкруглятьДо;
		Иначе
		    СтрокаРаботники.СуммаОкругления = 0;
		КонецЕсли;	
	КонецЕсли;
	НоваяСуммаОкругления = СтрокаРаботники.СуммаОкругления;
	
	Отбор = Новый Структура ("Сотрудник");
	Отбор.Сотрудник = СтрокаРаботники.Сотрудник;
	
	// определим какая сумма уже записана
	Сумма = 0;
	СуммаОкругления = 0;
	СтрокиПараметры = ПараметрыОплаты.НайтиСтроки(Отбор);
	Для Каждого СтрокаПараметры Из СтрокиПараметры Цикл
		Сумма = Сумма + СтрокаПараметры.Сумма;
		СуммаОкругления = СуммаОкругления + СтрокаПараметры.СуммаОкругления;
	КонецЦикла;
	
	Если Сумма <> 0 И (Сумма+СуммаОкругления <> НоваяСумма) Тогда
		
		// уменьшим (увеличим) на разницу
		Разница = Сумма - НоваяСумма + НоваяСуммаОкругления;
		Для Каждого СтрокаПараметры Из СтрокиПараметры Цикл
			
			СтрокаПараметры.СуммаОкругления = НоваяСуммаОкругления;
            НоваяСуммаОкругления = 0;
			
			ТекущаяРазница = Мин(Разница, СтрокаПараметры.Сумма);
			СтрокаПараметры.Сумма = СтрокаПараметры.Сумма - ТекущаяРазница;
			Разница = Разница - ТекущаяРазница;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // РасчитатьСуммыСотрудника() 



// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим, Банк = Неопределено)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",   Ссылка);
    Запрос.УстановитьПараметр("ДатаДокумента",	  Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.УстановитьПараметр("Руководитель",	  Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		Запрос.УстановитьПараметр("ГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизаций.Номер КАК НомерДок,
		|	ЗарплатаКВыплатеОрганизаций.Дата КАК ДатаДок,
		|	ЗарплатаКВыплатеОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ЗарплатаКВыплатеОрганизаций.ПодразделениеОрганизации.Наименование КАК НазваниеПодразделенияОрганизации,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихРуководитель.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОРуководителя,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихГлБух.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихГлБух.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОГлБуха,
		|	ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты.(
		|		СУММА(Сумма) КАК СуммаДок
		|	) КАК СуммаДокумента,
		|	ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.Должность.Наименование КАК ДолжностьРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.Должность.Наименование
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследнихРуководитель
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо = ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо
		|		ПО ЗарплатаКВыплатеОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &ГлавныйБухгалтер) КАК ОтветственныеЛицаОрганизацийСрезПоследнихГлБух
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследнихГлБух
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.ФизическоеЛицо = ФИОФизЛицСрезПоследнихГлБух.ФизЛицо
		|		ПО ЗарплатаКВыплатеОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.СтруктурнаяЕдиница
		|
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизаций.Ссылка = &ДокументСсылка";

			ИначеЕсли Режим = "ПоРеквизитамДокументаКасса" Тогда
		

		Запрос.УстановитьПараметр("Руководитель",	  Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		Запрос.УстановитьПараметр("ГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
		Запрос.УстановитьПараметр("Касса", Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизаций.Номер КАК НомерДок,
		|	ЗарплатаКВыплатеОрганизаций.Дата КАК ДатаДок,
		|	ЗарплатаКВыплатеОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ЗарплатаКВыплатеОрганизаций.ПодразделениеОрганизации.Наименование КАК НазваниеПодразделенияОрганизации,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихРуководитель.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОРуководителя,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихГлБух.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихГлБух.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОГлБуха,
		|	Выплаты.СуммаДок КАК СуммаДокумента,
		|	ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.Должность.Наименование КАК ДолжностьРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.Должность.Наименование
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|   (ВЫБРАТЬ
		|     СУММА(Сумма) КАК СуммаДок,
		|     ЗарплатаКВыплатеОрганизаций.Ссылка КАК Док
		|     ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК ЗарплатаКВыплатеОрганизаций
		|   ГДЕ
		|    ЗарплатаКВыплатеОрганизаций.Ссылка = &ДокументСсылка
		|    И ЗарплатаКВыплатеОрганизаций.СпособВыплаты = &Касса
		|    СГРУППИРОВАТЬ ПО ЗарплатаКВыплатеОрганизаций.Ссылка
		|    ) КАК Выплаты
		|    ПО Истина
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследнихРуководитель
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо = ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо
		|		ПО ЗарплатаКВыплатеОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &ГлавныйБухгалтер) КАК ОтветственныеЛицаОрганизацийСрезПоследнихГлБух
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследнихГлБух
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.ФизическоеЛицо = ФИОФизЛицСрезПоследнихГлБух.ФизЛицо
		|		ПО ЗарплатаКВыплатеОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.СтруктурнаяЕдиница
		|
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизаций.Ссылка = &ДокументСсылка";	
		
	ИначеЕсли Режим = "ПоРеквизитамДокументаБанк" Тогда
		

		Запрос.УстановитьПараметр("Руководитель",	  Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		Запрос.УстановитьПараметр("ГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
		Запрос.УстановитьПараметр("ЧерезБанк", Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
		Запрос.УстановитьПараметр("Банк", Банк);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизаций.Номер КАК НомерДок,
		|	ЗарплатаКВыплатеОрганизаций.Дата КАК ДатаДок,
		|	ЗарплатаКВыплатеОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ЗарплатаКВыплатеОрганизаций.ПодразделениеОрганизации.Наименование КАК НазваниеПодразделенияОрганизации,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихРуководитель.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОРуководителя,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихГлБух.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихГлБух.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБух.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОГлБуха,
		|	Выплаты.СуммаДок КАК СуммаДокумента,
		|	ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.Должность.Наименование КАК ДолжностьРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.Должность.Наименование
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|   (ВЫБРАТЬ
		|     СУММА(Сумма) КАК СуммаДок,
		|     ЗарплатаКВыплатеОрганизаций.Ссылка КАК Док
		|     ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК ЗарплатаКВыплатеОрганизаций
		|   ГДЕ
		|    ЗарплатаКВыплатеОрганизаций.Ссылка = &ДокументСсылка
		|    И ЗарплатаКВыплатеОрганизаций.СпособВыплаты = &ЧерезБанк
		|    И ЗарплатаКВыплатеОрганизаций.Банк = &Банк
		|    СГРУППИРОВАТЬ ПО ЗарплатаКВыплатеОрганизаций.Ссылка
		|    ) КАК Выплаты
		|    ПО Истина
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследнихРуководитель
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо = ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо
		|		ПО ЗарплатаКВыплатеОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &ГлавныйБухгалтер) КАК ОтветственныеЛицаОрганизацийСрезПоследнихГлБух
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследнихГлБух
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.ФизическоеЛицо = ФИОФизЛицСрезПоследнихГлБух.ФизЛицо
		|		ПО ЗарплатаКВыплатеОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследнихГлБух.СтруктурнаяЕдиница
		|
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизаций.Ссылка = &ДокументСсылка";	


	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.УстановитьПараметр("Организация",   Организация);
		Запрос.УстановитьПараметр("Задепонировано", Перечисления.ВыплаченностьЗарплаты.Задепонировано);
		Запрос.УстановитьПараметр("ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		Запрос.УстановитьПараметр("ТабельныйНомер", "");
	
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Основной.НомерСтроки		КАК НомерСтроки,
		|	Основной.Сотрудник.ФизЛицо	КАК СсылкаФизЛицо,
		|	ВЫБОР	КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  
		|				ТОГДА Основной.Сотрудник.Физлицо.Наименование 
		|			ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество 
		|		КОНЕЦ					КАК ФизЛицо,
		|	ВЫБОР	КОГДА Основной.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано) 
		|				ТОГДА ""Задепонировано"" 
		|			ИНАЧЕ """" 
		|		КОНЕЦ					КАК ЗаписьОДепонировании,
		|	Основной.Сотрудник.Код		КАК ТабельныйНомер,
		|	СУММА(Основной.Сумма)		КАК СУММА
		|ИЗ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Основной
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, Физлицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ 	Основной.Сотрудник.Физлицо КАК Физлицо ИЗ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Основной ГДЕ 	Основной.Ссылка = &ДокументСсылка )) КАК ФИОФизЛицСрезПоследних
		|ПО	Основной.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|ГДЕ Основной.Ссылка = &ДокументСсылка 
		|
		|СГРУППИРОВАТЬ ПО
		|	Основной.НомерСтроки,
		|	Основной.Сотрудник.ФизЛицо,
		|	ВЫБОР	КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  
		|				ТОГДА Основной.Сотрудник.Физлицо.Наименование 
		|			ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество 
		|		КОНЕЦ,
		|	ВЫБОР	КОГДА Основной.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано) 
		|				ТОГДА ""Задепонировано"" 
		|			ИНАЧЕ """" 
		|		КОНЕЦ,
		|	Основной.Сотрудник.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	Основной.НомерСтроки
		|";

			
	ИначеЕсли Режим = "ПоТабличнойЧастиДокументаКасса" Тогда
		
		Запрос.УстановитьПараметр("Организация",   Организация);
		Запрос.УстановитьПараметр("Задепонировано", Перечисления.ВыплаченностьЗарплаты.Задепонировано);
		Запрос.УстановитьПараметр("Касса", Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
		Запрос.УстановитьПараметр("ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		Запрос.УстановитьПараметр("ТабельныйНомер", "");
	
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Основной.НомерСтроки		КАК НомерСтроки,
		|	Основной.Сотрудник.ФизЛицо	КАК СсылкаФизЛицо,
		|	ВЫБОР	КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  
		|				ТОГДА Основной.Сотрудник.Физлицо.Наименование 
		|			ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество 
		|		КОНЕЦ					КАК ФизЛицо,
		|	ВЫБОР	КОГДА Основной.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано) 
		|				ТОГДА ""Задепонировано"" 
		|			ИНАЧЕ """" 
		|		КОНЕЦ					КАК ЗаписьОДепонировании,
		|	Основной.Сотрудник.Код		КАК ТабельныйНомер,
		|	СУММА(Основной.Сумма)		КАК СУММА
		|ИЗ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Основной
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, Физлицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ 	Основной.Сотрудник.Физлицо КАК Физлицо ИЗ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Основной ГДЕ 	Основной.Ссылка = &ДокументСсылка )) КАК ФИОФизЛицСрезПоследних
		|ПО	Основной.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|ГДЕ Основной.Ссылка = &ДокументСсылка 
		|    И Основной.СпособВыплаты = &Касса
		|
		|СГРУППИРОВАТЬ ПО
		|	Основной.НомерСтроки,
		|	Основной.Сотрудник.ФизЛицо,
		|	ВЫБОР	КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  
		|				ТОГДА Основной.Сотрудник.Физлицо.Наименование 
		|			ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество 
		|		КОНЕЦ,
		|	ВЫБОР	КОГДА Основной.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано) 
		|				ТОГДА ""Задепонировано"" 
		|			ИНАЧЕ """" 
		|		КОНЕЦ,
		|	Основной.Сотрудник.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	Основной.НомерСтроки
		|";
		
	ИначеЕсли Режим = "ПоТабличнойЧастиДокументаБанк" Тогда
		
		Запрос.УстановитьПараметр("Организация",   Организация);
		Запрос.УстановитьПараметр("Задепонировано", Перечисления.ВыплаченностьЗарплаты.Задепонировано);
		Запрос.УстановитьПараметр("ЧерезБанк", Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
		Запрос.УстановитьПараметр("Банк", Банк);
		Запрос.УстановитьПараметр("ВидЗанятости", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		Запрос.УстановитьПараметр("ТабельныйНомер", "");
	
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Основной.НомерСтроки		КАК НомерСтроки,
		|	Основной.Сотрудник.ФизЛицо	КАК СсылкаФизЛицо,
		|	ВЫБОР	КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  
		|				ТОГДА Основной.Сотрудник.Физлицо.Наименование 
		|			ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество 
		|		КОНЕЦ					КАК ФизЛицо,
		|	ВЫБОР	КОГДА Основной.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано) 
		|				ТОГДА ""Задепонировано"" 
		|			ИНАЧЕ """" 
		|		КОНЕЦ					КАК ЗаписьОДепонировании,
		|	Основной.Сотрудник.Код		КАК ТабельныйНомер,
		|	СУММА(Основной.Сумма)		КАК СУММА
		|ИЗ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Основной
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, Физлицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ 	Основной.Сотрудник.Физлицо КАК Физлицо ИЗ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК Основной ГДЕ 	Основной.Ссылка = &ДокументСсылка )) КАК ФИОФизЛицСрезПоследних
		|ПО	Основной.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|ГДЕ Основной.Ссылка = &ДокументСсылка 
		|    И Основной.СпособВыплаты = &ЧерезБанк
		|    И Основной.Банк = &Банк
		|
		|СГРУППИРОВАТЬ ПО
		|	Основной.НомерСтроки,
		|	Основной.Сотрудник.ФизЛицо,
		|	ВЫБОР	КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  
		|				ТОГДА Основной.Сотрудник.Физлицо.Наименование 
		|			ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество 
		|		КОНЕЦ,
		|	ВЫБОР	КОГДА Основной.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано) 
		|				ТОГДА ""Задепонировано"" 
		|			ИНАЧЕ """" 
		|		КОНЕЦ,
		|	Основной.Сотрудник.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	Основной.НомерСтроки
		|";
	

	ИначеЕсли Режим = "ПоТабличнойЧастиДокументаВзносыНалоги" Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Взносы.СтатьяНалоговойДекларации	КАК СтатьяНалоговойДекларации,
		|	СУММА(Взносы.БазаВзноса)			КАК БазаВзноса,
		|	СУММА(Взносы.Результат)				КАК Сумма
		|	
		|	ИЗ Документ.ЗарплатаКВыплатеОрганизаций.Взносы КАК Взносы
		|	
		|	ГДЕ	Взносы.Ссылка = &ДокументСсылка
		|
		|	СГРУППИРОВАТЬ ПО
		|	Взносы.СтатьяНалоговойДекларации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ВзносыФОТ.СтатьяНалоговойДекларации	КАК СтатьяНалоговойДекларации,
		|	СУММА(ВзносыФОТ.БазаВзноса)			КАК БазаВзноса,
		|	СУММА(ВзносыФОТ.Результат)				КАК Сумма
		|	
		|	ИЗ Документ.ЗарплатаКВыплатеОрганизаций.ВзносыФОТ КАК ВзносыФОТ
		|	
		|	ГДЕ	ВзносыФОТ.Ссылка = &ДокументСсылка
		|
		|	СГРУППИРОВАТЬ ПО
		|	ВзносыФОТ.СтатьяНалоговойДекларации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	""НДФЛ""				КАК СтатьяНалоговойДекларации,
		|	СУММА(НДФЛ.Доход)		КАК БазаВзноса,
		|	СУММА(НДФЛ.Налог)		КАК Сумма
		|	
		|	ИЗ Документ.ЗарплатаКВыплатеОрганизаций.НДФЛ КАК НДФЛ
		|	
		|	ГДЕ	НДФЛ.Ссылка = &ДокументСсылка
		|
		|	СГРУППИРОВАТЬ ПО
		|	""НДФЛ""
		|
		|";
	ИначеЕсли Режим = "ПоСуммамТабличнойЧасти" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(РаботникиОрганизации.Сумма) КАК Сумма,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
		|			ТОГДА ""Задеп""
		|		ИНАЧЕ ""Вып""
		|	КОНЕЦ КАК Выплаченность
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
		|ГДЕ
		|	РаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И (РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|	ИЛИ РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
		|			ТОГДА ""Задеп""
		|		ИНАЧЕ ""Вып""
		|	КОНЕЦ"
		;
		
	ИначеЕсли Режим = "ПоСуммамТабличнойЧастиКасса" Тогда
		
		Запрос.УстановитьПараметр("Касса", Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(РаботникиОрганизации.Сумма) КАК Сумма,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
		|			ТОГДА ""Задеп""
		|		ИНАЧЕ ""Вып""
		|	КОНЕЦ КАК Выплаченность
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
		|ГДЕ
		|	РаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И (РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|			ИЛИ РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано))
		|	И РаботникиОрганизации.СпособВыплаты = &Касса
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
		|			ТОГДА ""Задеп""
		|		ИНАЧЕ ""Вып""
		|	КОНЕЦ"
		;
		
	ИначеЕсли Режим = "ПоСуммамТабличнойЧастиБанк" Тогда
		
		Запрос.УстановитьПараметр("Банк", Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(РаботникиОрганизации.Сумма) КАК Сумма,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
		|			ТОГДА ""Задеп""
		|		ИНАЧЕ ""Вып""
		|	КОНЕЦ КАК Выплаченность
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
		|ГДЕ
		|	РаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И (РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|			ИЛИ РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано))
		|	И РаботникиОрганизации.СпособВыплаты = &Банк
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
		|			ТОГДА ""Задеп""
		|		ИНАЧЕ ""Вып""
		|	КОНЕЦ"
		;
	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

Функция СформироватьСписокСчетов()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплатеОрганизацийПараметрыОплаты.СчетУчета
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК ЗарплатаКВыплатеОрганизацийПараметрыОплаты
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийПараметрыОплаты.Ссылка = &Ссылка";
	
	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	
	СписокСчетов = ""; Разделитель = "";
	
	Пока ВыборкаСчетов.Следующий() Цикл
		СписокСчетов = СписокСчетов + Разделитель + Строка(ВыборкаСчетов.СчетУчета);
		Разделитель = ", ";
	КонецЦикла;	
	
	Возврат СписокСчетов;

КонецФункции // ()

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой "Ведомость".
//
// Возвращаемое значение:
//   Табличный документ - печатная форма
//
Функция ПечатьВедомость(НазваниеМакета = "Ведомость")
	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗарплатаКВыплатеОрганизаций_Ведомость";
	ТабДокумент.ПолеСлева = 15;
	ТабДокумент.ПолеСправа = 15;
	
	Вариант2009 = НЕ (Прав(НазваниеМакета, 6) = "До2009");
	Если Вариант2009 Тогда 
		Макет 		= ПолучитьМакет("Ведомость2009");
		// печать производится на украинском языке
		КодЯзыкаПечать = "uk";	
	Иначе
		Макет 		= ПолучитьМакет("Ведомость");
		// печать производится на языке, указанном в настройках пользователя
		КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
		Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	КонецЕсли;


	
	// получаем данные для печати
	// получаем данные для печати
	Если НазваниеМакета = "Ведомость" ИЛИ НазваниеМакета = "ВедомостьДо2009" Тогда
		ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
		ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
		ТаблицаСумм		 = СформироватьЗапросДляПечати("ПоСуммамТабличнойЧасти").Выгрузить();
	ИначеЕсли НазваниеМакета = "ВедомостьКасса" ИЛИ НазваниеМакета = "ВедомостьКассаДо2009"  Тогда
		ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокументаКасса").Выбрать();
		ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокументаКасса").Выбрать();
		ТаблицаСумм		 = СформироватьЗапросДляПечати("ПоСуммамТабличнойЧастиКасса").Выгрузить();
	ИначеЕсли НазваниеМакета = "ВедомостьБанк" ИЛИ НазваниеМакета ="ВедомостьБанкДо2009"  Тогда
		тбБанки = РаботникиОрганизации.Выгрузить();
		тбБанки.Свернуть("Банк");
		СтрокаКасса = тбБанки.Найти(Справочники.Контрагенты.ПустаяСсылка(),"Банк");
		Если СтрокаКасса <> Неопределено Тогда
			тбБанки.Удалить(СтрокаКасса);
		КонецЕсли;
		Если тбБанки.Количество() = 1 Тогда
			Банк = тбБанки[0].Банк;
		Иначе	
			СтрокаБанки = тбБанки.ВыбратьСтроку("Выберите банк.");
			Если СтрокаБанки = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			Банк = СтрокаБанки.Банк;
		КонецЕсли;	
		ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокументаБанк",Банк).Выбрать();
		ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокументаБанк",Банк).Выбрать();	
		ТаблицаСумм		 = СформироватьЗапросДляПечати("ПоСуммамТабличнойЧастиБанк").Выгрузить();
	КонецЕсли;

	
	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	ОбластьМакетаШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
	ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогПоСтранице = Макет.ПолучитьОбласть("ИтогПоЛисту");
	ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал");
	
	// массив с двумя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
	ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
	
		// вычисляем период за который выплачивается ведомость
		
	Если ВидВыплаты = Справочники.ВидыВыплат.Очередная Тогда
		НачПериода = НачалоМесяца(ПериодРегистрации);
		КонПериода = КонецМесяца(ПериодРегистрации);
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяВзносы ИЛИ
		ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолговВзносы Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	МИНИМУМ(ВсеВзносы.ПериодВзаиморасчетов) КАК НачПериода
		|
		|ИЗ
		|	(
		|   ВЫБРАТЬ
		|		Взносы.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов
		|	ИЗ
		|		Документ.ЗарплатаКВыплатеОрганизаций.Взносы КАК Взносы
		|	ГДЕ	Взносы.Ссылка = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|   ВЫБРАТЬ
		|		ВзносыФОТ.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов
		|	ИЗ
		|		Документ.ЗарплатаКВыплатеОрганизаций.Взносы КАК ВзносыФОТ
		|	ГДЕ	ВзносыФОТ.Ссылка = &Ссылка
		|	) КАК ВсеВзносы";
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 0 Тогда
			НачПериода = НачалоМесяца(ПериодРегистрации);
			КонПериода = КонецМесяца(ПериодРегистрации);
		Иначе
			Пока Выборка.Следующий() Цикл
				НачПериода = Выборка.НачПериода;
				КонПериода = КонецМесяца(ПериодРегистрации)
			КонецЦикла;
			Если НачПериода > КонПериода Тогда
				НачПериода = НачалоМесяца(ПериодРегистрации)
			КонецЕсли;
		КонецЕсли;
		Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	МИНИМУМ(ПараметрыОплаты.ПериодВзаиморасчетов) КАК НачПериода
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК ПараметрыОплаты
		|ГДЕ 
		|	ПараметрыОплаты.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 0 Тогда
			НачПериода = НачалоМесяца(ПериодРегистрации);
			КонПериода = КонецМесяца(ПериодРегистрации);
		Иначе
			Пока Выборка.Следующий() Цикл
				НачПериода = Выборка.НачПериода;
				КонПериода = КонецМесяца(ПериодРегистрации)
			КонецЦикла;
			Если НачПериода > КонПериода Тогда
				НачПериода = НачалоМесяца(ПериодРегистрации)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	
	// выводим данные о руководителях организации
	Пока ВыборкаДляШапки.Следующий() Цикл
		
		ОбластьМакетаШапкаДокумента.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		
		
		// Сумма по документу.
		Если НазваниеМакета = "Ведомость" ИЛИ НазваниеМакета = "ВедомостьДо2009" Тогда
			РезультатЗапросаСумма = ВыборкаДляШапки.СуммаДокумента.Выбрать();
			Если РезультатЗапросаСумма.Следующий() Тогда
				СуммаДок = ?(РезультатЗапросаСумма.СуммаДок = NULL, 0, РезультатЗапросаСумма.СуммаДок);
				СтрокаСуммы = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаДок, глЗначениеПеременной("ВалютаРегламентированногоУчета"), КодЯзыкаПечать);

				Если Вариант2009 И ЗначениеЗаполнено(СуммаДок) тогда
					СтрокаСуммы = СтрокаСуммы + " (" + Цел(СуммаДок) + " грн. " + Формат((СуммаДок - Цел(СуммаДок)) * 100, "ЧЦ=2; ЧН=00; ЧВН=") + " коп.)";
				КонецЕсли;
		        ОбластьМакетаШапкаДокумента.Параметры.СуммаДок = СтрокаСуммы;


			КонецЕсли;
		Иначе
			СуммаДок = ?(ВыборкаДляШапки.СуммаДокумента = NULL, 0, ВыборкаДляШапки.СуммаДокумента);
			СтрокаСуммы = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаДок, глЗначениеПеременной("ВалютаРегламентированногоУчета"), КодЯзыкаПечать);		
			Если Вариант2009 И ЗначениеЗаполнено(СуммаДок) тогда
				СтрокаСуммы = СтрокаСуммы + " (" + Цел(СуммаДок) + " грн. " + Формат((СуммаДок - Цел(СуммаДок)) * 100, "ЧЦ=2; ЧВН=") + " коп.)";
			КонецЕсли;		
			ОбластьМакетаШапкаДокумента.Параметры.СуммаДок = СтрокаСуммы;
		КонецЕсли;	
		Если НЕ Вариант2009 Тогда 
			ОбластьМакетаШапкаДокумента.Параметры.НачПериода = НачПериода;
			ОбластьМакетаШапкаДокумента.Параметры.КонПериода = КонПериода;
		Иначе 
			НомерВедомости = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
			
			СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
			ОбластьМакетаШапкаДокумента.Параметры.КодПоЕДРПОУ	 = УправлениеКонтактнойИнформацией.ПолучитьКодОрганизации(СведенияОбОрганизации);
			ОбластьМакетаШапкаДокумента.Параметры.НомерВедомости = НомерВедомости;
			ОбластьМакетаШапкаДокумента.Параметры.Счет			 = СформироватьСписокСчетов();
			ОбластьМакетаШапкаДокумента.Параметры.ДатаВыплаты    = Нрег(Формат(ПериодРегистрации, "Л=uk_UA; ДФ='ММММ гггг р.'"));
			Для каждого Строка Из ТаблицаСумм Цикл
				
				Сумма = ?(Строка.Сумма = NULL, 0, Строка.Сумма);
				СтрокаСуммы = ОбщегоНазначения.СформироватьСуммуПрописью(Сумма, глЗначениеПеременной("ВалютаРегламентированногоУчета"), КодЯзыкаПечать);
				
				Если ЗначениеЗаполнено(Сумма) тогда
					СтрокаСуммы  = СтрокаСуммы + " (" + Цел(Сумма) + " грн. " + Формат((Сумма - Цел(Сумма)) * 100, "ЧЦ=2; ЧВН=") + " коп.)";
				КонецЕсли;
				
				ОбластьМакетаШапкаДокумента.Параметры["Сумма" + Строка.Выплаченность] = СтрокаСуммы;
				
			КонецЦикла;
		КонецЕсли;
		
     КонецЦикла;

	ТабДокумент.Вывести(ОбластьМакетаШапкаДокумента);
	
	Если Вариант2009 Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ОбластьМакетаШапка.Параметры.НомерВедомости = НомерВедомости;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	ВыведеноСтраниц = 0; ВыведеноСтрок = 0; ИтогоНаСтранице = 0;
    // выводим данные по строкам документа.
	Пока ВыборкаРаботники.Следующий() Цикл
		
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаРаботники);
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		ОбластьМакетаСтрока.Параметры.НомерСтроки = ВыведеноСтрок;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			
			ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
			ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			ВыведеноСтраниц = ВыведеноСтраниц + 1;
			ИтогоНаСтранице = 0;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСтрока);
		ИтогоНаСтранице = ИтогоНаСтранице + ВыборкаРаботники.Сумма;

	КонецЦикла;
	
	ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
	ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
		Если НЕ Вариант2009 Тогда 
		ОбластьМакетаПодвал.Параметры.КоличествоЛистов = ВыведеноСтраниц;
	Иначе
		ТабДокумент.Область("R23C10").Текст  = ВыведеноСтраниц + 1;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьВедомость()

// Функция формирует табличный документ с печатной формой "АвансНалоги".
//
// Возвращаемое значение:
//   Табличный документ - печатная форма
//
Функция ПечатьНалоги()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗарплатаКВыплатеОрганизаций_АвансНалоги";
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	
	Макет 		= ПолучитьМакет("АвансНалоги");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	
	// получаем данные для печати
	ВыборкаДляШапки  = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаВзносыНалоги = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокументаВзносыНалоги").Выбрать();
	
	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаВзносыНалоги.Количество();

	ОбластьМакетаШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
	ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал");
	
	// массив с двумя строками - для разбиения на страницы
  	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
	
		Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	МИНИМУМ(ВсеВзносы.ПериодВзаиморасчетов) КАК НачПериода
		|
		|ИЗ
		|	(
		|   ВЫБРАТЬ
		|		Взносы.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов
		|	ИЗ
		|		Документ.ЗарплатаКВыплатеОрганизаций.Взносы КАК Взносы
		|	ГДЕ	Взносы.Ссылка = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|   ВЫБРАТЬ
		|		ВзносыФОТ.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов
		|	ИЗ
		|		Документ.ЗарплатаКВыплатеОрганизаций.Взносы КАК ВзносыФОТ
		|	ГДЕ	ВзносыФОТ.Ссылка = &Ссылка
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|   ВЫБРАТЬ
		|		НДФЛ.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов
		|	ИЗ
		|		Документ.ЗарплатаКВыплатеОрганизаций.НДФЛ КАК НДФЛ
		|	ГДЕ	НДФЛ.Ссылка = &Ссылка
		|	) КАК ВсеВзносы";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		НачПериода = НачалоМесяца(ПериодРегистрации);
		КонПериода = КонецМесяца(ПериодРегистрации);
	Иначе
		Пока Выборка.Следующий() Цикл
			НачПериода = Выборка.НачПериода;
			КонПериода = КонецМесяца(ПериодРегистрации)
		КонецЦикла;
		Если НачПериода > КонПериода Тогда
			НачПериода = НачалоМесяца(ПериодРегистрации)
		КонецЕсли;
	КонецЕсли;
	
	ОбластьМакетаШапкаДокумента.Параметры.НачПериода = НачПериода;
	ОбластьМакетаШапкаДокумента.Параметры.КонПериода = КонПериода;
	
	// выводим данные о руководителях организации
	Пока ВыборкаДляШапки.Следующий() Цикл
		
		ОбластьМакетаШапкаДокумента.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакетаШапкаДокумента);
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	ВыведеноСтрок = 0;
    // выводим данные по строкам документа.
	Пока ВыборкаВзносыНалоги.Следующий() Цикл
	
		ВыведеноСтрок = ВыведеноСтрок + 1;
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаВзносыНалоги);
		ОбластьМакетаСтрока.Параметры.НомерСтроки = ВыведеноСтрок;

		ТабДокумент.Вывести(ОбластьМакетаСтрока);

	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьНалоги()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(НазваниеМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат Неопределено; 
	КонецЕсли; 
	
	Если РаботникиОрганизации.Количество() = 0
		И Взносы.Количество() = 0
		И ВзносыФОТ.Количество() = 0
		И НДФЛ.Количество() = 0
		И ПараметрыОплаты.Количество() = 0
		Тогда
		Предупреждение("Нельзя распечатать пустой документ");
		Возврат Неопределено;
	КонецЕсли;

	Если НазваниеМакета = "Ведомость" ИЛИ НазваниеМакета = "ВедомостьКасса" ИЛИ НазваниеМакета = "ВедомостьБанк" 
		ИЛИ НазваниеМакета = "ВедомостьДо2009" ИЛИ НазваниеМакета = "ВедомостьКассаДо2009" ИЛИ НазваниеМакета = "ВедомостьБанкДо2009" тогда
		
		ТабДокумент = ПечатьВедомость(НазваниеМакета);
		
	ИначеЕсли НазваниеМакета = "АвансНалоги" тогда
		
		ТабДокумент = ПечатьНалоги();
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Платежная ведомость"));

КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Если	Не	ВидВыплаты.Предопределенный
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.Отпуск
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.Больничные
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.Аванс
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.Дивиденды
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.Очередная
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.ПогашениеДолгов
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Депоненты
		Тогда
		СтруктураПечатныхФорм =  Новый Структура("Ведомость, ВедомостьКасса, ВедомостьБанк,ВедомостьДо2009, ВедомостьКассаДо2009, ВедомостьБанкДо2009,АвансНалоги",
		"Ведомость", "Ведомость (касса)", "Ведомость (банк)", "Ведомость, старая версия", "Ведомость (касса), старая версия", "Ведомость (банк), старая версия", "Налоги и взносы");

	Иначе
		СтруктураПечатныхФорм = Новый Структура("АвансНалоги","Налоги и взносы");
		
	КонецЕсли;
	
	Возврат СтруктураПечатныхФорм;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()



////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура Автозаполнение() Экспорт
	
	Если ВидВыплаты = Справочники.ВидыВыплат.Очередная  
		или ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов
		или ВидВыплаты = Справочники.ВидыВыплат.ПогашениеДолгов
		или ВидВыплаты = Справочники.ВидыВыплат.Аванс
		или ВидВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет
		или ВидВыплаты = Справочники.ВидыВыплат.Депоненты
		или ВидВыплаты = Справочники.ВидыВыплат.Больничные
		Тогда
		
		Если спСотрудников = "" Тогда
			Если НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "БыстроеЗаполнениеЗарплатаКВыплате") Тогда
				ФормаЗаполнения=ПолучитьФорму("ФормаЗаполнения");
				ФормаЗаполнения.ДокументОбъект = ЭтотОбъект;
				ФормаЗаполнения.ОткрытьМодально();
			Иначе
				мОкруглятьДо = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ОкруглятьДо;
				Если мОкруглятьДо = 0 Тогда
					мОкруглятьДо = 0.01;
				КонецЕсли;	
				мПроцентВыплаты = 100;
				мСортировка = "";
				мПериодС =  Дата(1,1,1);
				мПериодПо = НачалоМесяца(ПериодРегистрации-1);
				мБольничныеВид = 0;
				мБольничныеФССАвансом = Ложь;
				Если ВидВыплаты = Справочники.ВидыВыплат.Очередная 
				или ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов  Тогда
					АвтозаполнениеОсновнаяВыплата();
				ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.ПогашениеДолгов  Тогда
					АвтозаполнениеОсновнаяВыплата();
				ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Аванс  Тогда
					АвтозаполнениеАванс();
				ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет  Тогда
					АвтозаполнениеАвансПредварительныйРасчет();	
				ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Депоненты  Тогда
					АвтозаполнениеДепонированная()	
				КонецЕсли;
			КонецЕсли;	
		Иначе
			Если ВидВыплаты = Справочники.ВидыВыплат.Очередная 
			или ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов  Тогда
				АвтозаполнениеОсновнаяВыплата();
			ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.ПогашениеДолгов  Тогда
				АвтозаполнениеОсновнаяВыплата();
			ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Аванс  Тогда
				АвтозаполнениеАванс();
			ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет  Тогда
				АвтозаполнениеАвансПредварительныйРасчет();	
			ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Депоненты  Тогда
				АвтозаполнениеДепонированная();
			ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Больничные  Тогда
				АвтозаполнениеБольничные();	
			КонецЕсли;	
		КонецЕсли;	
	
	ИначеЕсли Не ВидВыплаты.Предопределенный Тогда
		АвтозаполнениеМежрасчетныеВыплаты();
		
	ИначеЕсли	ВидВыплаты = Справочники.ВидыВыплат.НДФЛБезВыплатыЗарплаты
		Тогда
		АвтозаполнениеОсновнаяВыплата();
		
	ИначеЕсли	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяВзносы 
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолговВзносы
		Тогда
		АвтозаполнениеОсновнаяВыплатаВзносы();
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Отпуск Тогда
		АвтозаполнениеОтпуск();
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Дивиденды Тогда
		АвтозаполнениеОсновнаяВыплата(Истина);
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.ЗакрытиеПериода Тогда
		АвтозаполнениеЗакрытиеПериода();
		
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.НДФЛКонтрагентам Тогда
		АвтозаполнениеНДФЛКонтрагентам();
		
	КонецЕсли; 
	
КонецПроцедуры //  Автозаполнение

Процедура	АвтозаполнениеОсновнаяВыплата( ЭтоДивиденды = Ложь, ЭтоДоговорники = Ложь, ЭтоУволенные = Ложь) Экспорт
	
	// Список работников формируем с учетом условия на подразделение
	Если спСотрудников = "" Тогда
		Сотрудники = ПроведениеРасчетов.АвтозаполнениеРаботникиОрганизации( Ссылка, Ложь, ЭтоДоговорники, ЭтоУволенные ).Выгрузить().ВыгрузитьКолонку("Сотрудник");
	Иначе
		Сотрудники = спСотрудников;
	КонецЕсли;
	
	
	////////////////////////////////////////////////////////////////////////////////////	
	// Заполнение ТЧ РаботникиОрганизации и ПараметрыОплаты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата",		Дата);
	Запрос.УстановитьПараметр("парамКонМесяца", КонецМесяца(Дата)+1);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СписокСчетаУчета = Новый СписокЗначений;
	Если ЭтоДивиденды Тогда
		СписокСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНачисленнымДивидендам);
	Иначе
		СписокСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате);
		СписокСчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам);
	КонецЕсли;
	Запрос.УстановитьПараметр("парамСчетаУчета", СписокСчетаУчета);
	
	Если ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов Тогда
		Если Не ЗначениеЗаполнено(мПериодС) и Не ЗначениеЗаполнено(мПериодПо) Тогда
			ОтборПериод = "И ПериодВзаиморасчетов <= &ПериодРегистрации";
		ИначеЕсли ЗначениеЗаполнено(мПериодС) и Не ЗначениеЗаполнено(мПериодПо) Тогда
			ОтборПериод = "И (ПериодВзаиморасчетов >= &ПериодС ИЛИ ПериодВзаиморасчетов = &ПериодРегистрации)";
		ИначеЕсли НЕ ЗначениеЗаполнено(мПериодС) и ЗначениеЗаполнено(мПериодПо) Тогда
			ОтборПериод = "И (ПериодВзаиморасчетов <= &ПериодПО ИЛИ ПериодВзаиморасчетов = &ПериодРегистрации)";
		Иначе
			ОтборПериод = "И ((ПериодВзаиморасчетов >= &ПериодС И ПериодВзаиморасчетов <= &ПериодПО) ИЛИ ПериодВзаиморасчетов = &ПериодРегистрации)";
		КонецЕсли;
	ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.ПогашениеДолгов Тогда
		Если Не ЗначениеЗаполнено(мПериодС) и Не ЗначениеЗаполнено(мПериодПо) Тогда
			ОтборПериод = "И ПериодВзаиморасчетов < &ПериодРегистрации";
		ИначеЕсли ЗначениеЗаполнено(мПериодС) и Не ЗначениеЗаполнено(мПериодПо) Тогда
			ОтборПериод = "И (ПериодВзаиморасчетов >= &ПериодС)";
		ИначеЕсли НЕ ЗначениеЗаполнено(мПериодС) и ЗначениеЗаполнено(мПериодПо) Тогда
			ОтборПериод = "И (ПериодВзаиморасчетов <= &ПериодПО)";
		Иначе
			ОтборПериод = "И ((ПериодВзаиморасчетов >= &ПериодС И ПериодВзаиморасчетов <= &ПериодПО))";
		КонецЕсли;		
		
	Иначе
		ОтборПериод = "И ПериодВзаиморасчетов = &ПериодРегистрации";
	КонецЕсли;	
    Запрос.УстановитьПараметр("ПериодС", мПериодС);
	Запрос.УстановитьПараметр("ПериодПо", мПериодПо);
    Запрос.УстановитьПараметр("ПроцентВыплаты", мПроцентВыплаты);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взаиморасчеты.Сотрудник						КАК Сотрудник,
	|	Взаиморасчеты.ПериодВзаиморасчетов			КАК ПериодВзаиморасчетов,
	|	Взаиморасчеты.СчетУчета						КАК СчетУчета,
	|	Взаиморасчеты.СуммаВзаиморасчетовОстаток*&ПроцентВыплаты/100 КАК Сумма,
	|	СпособыВыплаты.СпособВыплаты				КАК СпособВыплаты,
	|	СпособыВыплаты.Банк							КАК Банк,
	|	СпособыВыплаты.НомерКарточки				КАК НомерКарточки,
	//ИЗМЕНЕНО Верескул Игорь(Начало 17.01.2020
	|	СпособыВыплаты.IBAN							КАК IBAN
	//Окончание)Верескул Игорь 
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&парамКонМесяца,	
	|		"+?(ВидВыплаты = Справочники.ВидыВыплат.ПогашениеДолгов и спСотрудников = "","Организация = &Организация","Сотрудник в (&парамСотрудники)")+"
	|		" + ОтборПериод + "
	|	) КАК Взаиморасчеты
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыВыплатыЗПРаботников.СрезПоследних(&парамДата,
	|		"+?(ВидВыплаты = Справочники.ВидыВыплат.ПогашениеДолгов и спСотрудников = "","Организация = &Организация","Сотрудник в (&парамСотрудники)")+"
	|	) КАК СпособыВыплаты
	|ПО	СпособыВыплаты.Сотрудник = Взаиморасчеты.Сотрудник
	|
	|ГДЕ Взаиморасчеты.СчетУчета в (&парамСчетаУчета)
	|
	|УПОРЯДОЧИТЬ ПО 
	|   "+?(мСортировка = Неопределено или мСортировка = "","","Взаиморасчеты."+мСортировка+", ")+"Взаиморасчеты.Сотрудник.Наименование, ПериодВзаиморасчетов УБЫВ, СчетУчета  
	|
	|ИТОГИ  
	|	СУММА(Сумма),
	|	МАКСИМУМ(СпособВыплаты),
	|	МАКСИМУМ(Банк),
	|	МАКСИМУМ(НомерКарточки),
	|	МАКСИМУМ(IBAN)
	|ПО Сотрудник
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	СуммаОкругления = 0;
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		Если ВидВыплаты = Справочники.ВидыВыплат.НДФЛБезВыплатыЗарплаты Тогда
			Продолжить;
		КонецЕсли;
		
		Если мОкруглятьДо > 0.01 Тогда
			Если ВыборкаСотрудник.Сумма < 0 ИЛИ (ЗначениеЗаполнено(ВыборкаСотрудник.Сотрудник.ДатаУвольнения) И ВыборкаСотрудник.Сотрудник.ДатаУвольнения <= (КонецМесяца(ПериодРегистрации)+1)) Тогда
				СуммаОкругления = 0
			Иначе
				СуммаОкругления = ВыборкаСотрудник.Сумма - Цел(ВыборкаСотрудник.Сумма/мОкруглятьДо)*мОкруглятьДо;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаРаботники = РаботникиОрганизации.Добавить();
		
		СтрокаРаботники.Сотрудник		= ВыборкаСотрудник.Сотрудник;
		Если ВыборкаСотрудник.Сумма < 0 Тогда
			СтрокаРаботники.Сумма			= 0;
			СтрокаРаботники.СуммаОкругления	= 0;
			ДолгНаСледМесяц					= - ВыборкаСотрудник.Сумма + СуммаОкругления;
		Иначе
			СтрокаРаботники.Сумма			= ВыборкаСотрудник.Сумма - СуммаОкругления;
			СтрокаРаботники.СуммаОкругления	= СуммаОкругления;
			ДолгНаСледМесяц					= 0;
		КонецЕсли;
		
		СтрокаРаботники.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
		СтрокаРаботники.СпособВыплаты	= ?(ВыборкаСотрудник.СпособВыплаты= NULL, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу, ВыборкаСотрудник.СпособВыплаты);
		СтрокаРаботники.Банк			= ВыборкаСотрудник.Банк;
		СтрокаРаботники.НомерКарточки	= ВыборкаСотрудник.НомерКарточки;
		//ИЗМЕНЕНО Верескул Игорь(Начало 17.01.2020
		СтрокаРаботники.IBAN			= ВыборкаСотрудник.IBAN;
		//Окончание)Верескул Игорь 
		Выборка = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Сумма < 0 Тогда
				тСуммаОкругления = Макс(СуммаОкругления, Выборка.Сумма);
				СуммаОкругления = Мин(СуммаОкругления - тСуммаОкругления, 0);
			Иначе
				тСуммаОкругления = Мин(СуммаОкругления, Выборка.Сумма);
				СуммаОкругления = Макс(СуммаОкругления - тСуммаОкругления, 0);
			КонецЕсли;
			
			Строка = ПараметрыОплаты.Добавить();
			Строка.Сотрудник			= Выборка.Сотрудник;
			Строка.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
			Строка.СчетУчета			= Выборка.СчетУчета;
			Если Выборка.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате Тогда
				Строка.Сумма			= Выборка.Сумма - тСуммаОкругления + ДолгНаСледМесяц;
				ДолгНаСледМесяц			= 0; 
			Иначе
				Строка.Сумма			= Выборка.Сумма - тСуммаОкругления;
			КонецЕсли;
			Строка.СуммаОкругления	= тСуммаОкругления;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	
	////////////////////////////////////////////////////////////////////////////////////	
	// Заполнение ТЧ НДФЛ
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамДата",	Дата);
	Запрос.УстановитьПараметр("парамКонМесяца", КонецМесяца(Дата)+1);  
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	Запрос.УстановитьПараметр("парамДоходНДФЛДивиденды", Справочники.ВидыДоходовНДФЛ.Код12);
	Запрос.УстановитьПараметр("ПроцентВыплаты", мПроцентВыплаты);
    Запрос.УстановитьПараметр("ПериодС", мПериодС);
	Запрос.УстановитьПараметр("ПериодПо", мПериодПо);
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамПустаяДата", Дата(1,1,1));
	ОтборПериодыНДФЛ = СтрЗаменить(ОтборПериод,"ПериодВзаиморасчетов","Взаиморасчеты.ПериодВзаиморасчетов");
	
	Если НЕ ЭтоДивиденды И ПроведениеРасчетов.ИспользуетсяНК(ПериодРегистрации) Тогда
		Запрос.Текст ="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Взаиморасчеты.Сотрудник					КАК Сотрудник,
		|	Взаиморасчеты.ДоходНДФЛ					КАК ДоходНДФЛ,
		|	Взаиморасчеты.ПериодВзаиморасчетов		КАК ПериодВзаиморасчетов,
		|	Взаиморасчеты.НалоговыйПериод			КАК НалоговыйПериод,
		|	СУММА(Взаиморасчеты.Налог)				КАК Налог,
		|	СУММА(Взаиморасчеты.Доход)				КАК Доход
		|ПОМЕСТИТЬ ВТПриход 
		|ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Взаиморасчеты
		|ГДЕ Взаиморасчеты.Сотрудник в (&парамСотрудники)
		|    И Взаиморасчеты.ВидДвижения = &Приход
		|	 И Взаиморасчеты.Период <= &парамКонМесяца
		|	" + ОтборПериодыНДФЛ + "
		|СГРУППИРОВАТЬ ПО
		|    Сотрудник,ДоходНДФЛ,ПериодВзаиморасчетов,НалоговыйПериод
		|ИНДЕКСИРОВАТЬ ПО
		|    Сотрудник,ДоходНДФЛ,ПериодВзаиморасчетов,НалоговыйПериод 
		|";
		Запрос.Выполнить();
		
		Запрос.Текст ="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Взаиморасчеты.Сотрудник					КАК Сотрудник,
		|	Взаиморасчеты.ДоходНДФЛ					КАК ДоходНДФЛ,
		|	Взаиморасчеты.ПериодВзаиморасчетов		КАК ПериодВзаиморасчетов,
		|	ВЫБОР 
		|	КОГДА Взаиморасчеты.НалоговыйПериод <> &парамПустаяДата  
		|	ТОГДА Взаиморасчеты.НалоговыйПериод
		|   ИНАЧЕ Взаиморасчеты.ПериодВзаиморасчетов
		|	КОНЕЦ КАК НалоговыйПериод,
		|	СУММА(Взаиморасчеты.Налог)				КАК Налог,
		|	СУММА(Взаиморасчеты.Доход)				КАК Доход
		|ПОМЕСТИТЬ ВТРасход 
		|ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Взаиморасчеты
		|ГДЕ Взаиморасчеты.Сотрудник в (&парамСотрудники)
		|    И Взаиморасчеты.ВидДвижения <> &Приход
		|	 И Взаиморасчеты.Период <= &парамКонМесяца
		|	" + ОтборПериодыНДФЛ + "
		|СГРУППИРОВАТЬ ПО
		|    Сотрудник,ДоходНДФЛ,ПериодВзаиморасчетов,НалоговыйПериод
		|ИНДЕКСИРОВАТЬ ПО
		|    Сотрудник,ДоходНДФЛ,ПериодВзаиморасчетов,НалоговыйПериод 
		|";
		Запрос.Выполнить();
		
		Запрос.Текст ="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Приход.Сотрудник					КАК Сотрудник,
		|	Приход.ДоходНДФЛ					КАК ДоходНДФЛ,
		|	Приход.ПериодВзаиморасчетов			КАК ПериодВзаиморасчетов,
		|	Приход.НалоговыйПериод				КАК НалоговыйПериод,
		|	Приход.Налог - ЕСТЬNULL(Расход.Налог,0)	КАК Налог,
		|	Приход.Доход - ЕСТЬNULL(Расход.Доход,0)	КАК Доход
		|ИЗ ВТПриход КАК Приход
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		|   ВТРасход КАК Расход
		|   ПО Приход.Сотрудник = Расход.Сотрудник
		|    И Приход.ДоходНДФЛ = Расход.ДоходНДФЛ
		|    И Приход.ПериодВзаиморасчетов = Расход.ПериодВзаиморасчетов
		|    И Приход.НалоговыйПериод = Расход.НалоговыйПериод
		|   УПОРЯДОЧИТЬ ПО Приход.Сотрудник.Наименование, Приход.ДоходНДФЛ.Код, Приход.ПериодВзаиморасчетов, Приход.НалоговыйПериод
		|";
		
	Иначе
	
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Взаиморасчеты.Сотрудник						КАК Сотрудник,
		|	Взаиморасчеты.ДоходНДФЛ						КАК ДоходНДФЛ,
		|	Взаиморасчеты.ПериодВзаиморасчетов			КАК ПериодВзаиморасчетов,
		|	Взаиморасчеты.НалогОстаток					КАК Налог,
		|	Взаиморасчеты.ДоходОстаток					КАК Доход
		|
		|ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ.Остатки( &парамКонМесяца,
		|		Сотрудник в (&парамСотрудники)
		|		" + ?(ЭтоДивиденды,"И	ДоходНДФЛ = &парамДоходНДФЛДивиденды","И	ДоходНДФЛ <> &парамДоходНДФЛДивиденды") + "
		|		" + ОтборПериод + "
		|    ) КАК Взаиморасчеты
		|";
		
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаРаботники = НДФЛ.Добавить();
			
		СтрокаРаботники.Сотрудник	= Выборка.Сотрудник;
		СтрокаРаботники.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
		СтрокаРаботники.ДоходНДФЛ	= Выборка.ДоходНДФЛ;
		СтрокаРаботники.Налог		= Выборка.Налог;
		Если НЕ ВидВыплаты = Справочники.ВидыВыплат.НДФЛБезВыплатыЗарплаты Тогда
			СтрокаРаботники.Доход	= Выборка.Доход*мПроцентВыплаты/100;
		КонецЕсли;
		
		Если НЕ ЭтоДивиденды И ПроведениеРасчетов.ИспользуетсяНК(ПериодРегистрации) Тогда
			СтрокаРаботники.НалоговыйПериод		= Выборка.НалоговыйПериод;
		КонецЕсли;	
		
	КонецЦикла;
	
	
КонецПроцедуры // Автозаполнение_ОсновнаяВыплата()

Процедура	АвтозаполнениеОсновнаяВыплатаВзносы() 
	
	// Заполнение ТЧ Взносы, ВзхносыФОТ
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата",	Дата);
	Запрос.УстановитьПараметр("парамКонМесяца", КонецМесяца(Дата)+1);  
	Запрос.УстановитьПараметр("парамНачало",	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонец",		КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация",	Организация);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взаиморасчеты.Налог							КАК Налог,
	|	Взаиморасчеты.СтатьяНалоговойДекларации		КАК СтатьяНалоговойДекларации,
	|	ВидыРасчетов.ВидРасчета.СпособРасчета		КАК СпособРасчета,
	|	Взаиморасчеты.ПериодВзаиморасчетов			КАК ПериодВзаиморасчетов,
	|	Взаиморасчеты.БазаОстаток					КАК База,
	|	Взаиморасчеты.БазаВзносаОстаток				КАК БазаВзноса,
	|	Взаиморасчеты.РезультатОстаток				КАК Результат
	|
	|		ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки( &парамКонМесяца,
	|			Организация = &парамОрганизация
	|		" + ?(ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолговВзносы," И	ПериодВзаиморасчетов <= &ПериодРегистрации"," И	ПериодВзаиморасчетов = &ПериодРегистрации") + "
	|    ) КАК Взаиморасчеты
	|ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ВидыРасчетовВзносовВФонды.СрезПоследних(&парамДата) КАК ВидыРасчетов
	|ПО Взаиморасчеты.Налог = ВидыРасчетов.Налог
	|
	|УПОРЯДОЧИТЬ ПО Взаиморасчеты.Налог.Код
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Взносы Тогда 
			СтрокаРаботники = Взносы.Добавить();
		Иначе
			СтрокаРаботники = ВзносыФОТ.Добавить();
		КонецЕсли;
		
		СтрокаРаботники.Налог						= Выборка.Налог;
		СтрокаРаботники.СтатьяНалоговойДекларации	= Выборка.СтатьяНалоговойДекларации;
		СтрокаРаботники.ПериодВзаиморасчетов		= Выборка.ПериодВзаиморасчетов;
		
		СтрокаРаботники.База			= Выборка.База;
		СтрокаРаботники.БазаВзноса		= Выборка.БазаВзноса;
		СтрокаРаботники.Результат		= Выборка.Результат;
		
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение_ОсновнаяВыплата()

Процедура	АвтозаполнениеАванс() Экспорт
	
	// Просто заполняем работников организации, а суммы бухгалтер проставит вручную
	// возможно будет механизм и для заполнения сумм
	// Список работников формируем с учетом условия на подразделение
	Если спСотрудников = "" Тогда
		Сотрудники = ПроведениеРасчетов.АвтозаполнениеРаботникиОрганизации( Ссылка, Ложь ).Выгрузить().ВыгрузитьКолонку("Сотрудник");
	Иначе
		Сотрудники = спСотрудников;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамНачало", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонец", КонецМесяца( ПериодРегистрации ) );
	Запрос.УстановитьПараметр("парамПодразделение", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("парамСотрудники",	Сотрудники);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Работники.Сотрудник,
	|	АвансыРаботникамОрганизаций.СуммаАванса,
	|	СпособыВыплаты.СпособВыплаты,
	|	СпособыВыплаты.Банк,
	|	СпособыВыплаты.НомерКарточки,
	//ИЗМЕНЕНО Верескул Игорь(Начало 17.01.2020
	|	СпособыВыплаты.IBAN							КАК IBAN
	//Окончание)Верескул Игорь 
	|ИЗ	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамКонец, Организация = &парамОрганизация И Сотрудник в (&парамСотрудники)) КАК Работники
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АвансыРаботникамОрганизаций КАК АвансыРаботникамОрганизаций
	|	ПО		Работники.Сотрудник = АвансыРаботникамОрганизаций.Сотрудник
	|		И	АвансыРаботникамОрганизаций.Организация = &парамОрганизация
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыВыплатыЗПРаботников.СрезПоследних(&парамКонец, Организация = &парамОрганизация) КАК СпособыВыплаты
	|ПО		СпособыВыплаты.Сотрудник = Работники.Сотрудник
	|
	|ГДЕ	(Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		ИЛИ Работники.Период > &парамНачало)
	|" + ?(ПодразделениеОрганизации.Пустая(), "", Символы.ПС + " И Работники.ПодразделениеОрганизации = &парамПодразделение") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|   "+?(мСортировка = Неопределено или мСортировка = "","","Работники."+мСортировка+", ")+"Работники.Сотрудник.Наименование"; 
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// ТЧ РаботникиОрганизации
		НоваяСтрока = РаботникиОрганизации.Добавить();
		
		НоваяСтрока.Сотрудник				= Выборка.Сотрудник;
		НоваяСтрока.Сумма					= Выборка.СуммаАванса;
		НоваяСтрока.СуммаГрязными			= Выборка.СуммаАванса*?(ВидВыплаты.РасчетОтОбратного,1.5,1);
		НоваяСтрока.ВыплаченностьЗарплаты	= Перечисления.ВыплаченностьЗарплаты.Выплачено;
		НоваяСтрока.СпособВыплаты			= ?(Выборка.СпособВыплаты= NULL, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу, Выборка.СпособВыплаты);
		НоваяСтрока.Банк					= Выборка.Банк;
		НоваяСтрока.НомерКарточки			= Выборка.НомерКарточки;
		//ИЗМЕНЕНО Верескул Игорь(Начало 17.01.2020
		НоваяСтрока.IBAN					= Выборка.IBAN;
		//Окончание)Верескул Игорь
		// ТЧ Зарплата
		НоваяСтрока = ПараметрыОплаты.Добавить();
		НоваяСтрока.Сотрудник				= Выборка.Сотрудник;
		НоваяСтрока.Сумма					= Выборка.СуммаАванса;
		НоваяСтрока.СчетУчета				= ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		НоваяСтрока.ПериодВзаиморасчетов	= ПериодРегистрации;
		
	КонецЦикла;
	
	//сразу можно заполнить и рассчитать взносы и НДФЛ
	
	
КонецПроцедуры //  Автозаполнение_Аванс

Процедура	АвтозаполнениеОтпуск() 
	
	// Список работников формируем с учетом условия на подразделение
	Если спСотрудников = "" Тогда
		Сотрудники = ПроведениеРасчетов.АвтозаполнениеРаботникиОрганизации( Ссылка, Ложь ).Выгрузить().ВыгрузитьКолонку("Сотрудник");
	Иначе
		Сотрудники = спСотрудников;
	КонецЕсли;
	
	мОкруглятьДо = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ОкруглятьДо;
	
	// Заполнение ТЧ Зарплата и Работники
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата", Дата);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	Запрос.УстановитьПараметр("парамВидВыплаты", ВидВыплаты);
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник			КАК Сотрудник,
	|	Начисления.ПериодРегистрации 	КАК ПериодВзаиморасчетов,
	|	Начисления.СчетУчета			КАК СчетУчета,
	|	Начисления.ВидРасчета			КАК ВидРасчета,
	|	Начисления.ДатаНачала			КАК ДатаНачала,
	|	СпособыВыплаты.СпособВыплаты,
	|	СпособыВыплаты.Банк,
	|	СпособыВыплаты.НомерКарточки,
	//ИЗМЕНЕНО Верескул Игорь(Начало 17.01.2020
	|	СпособыВыплаты.IBAN							КАК IBAN,
	//Окончание)Верескул Игорь 
	|	ВЫБОР
	|	 КОГДА Начисления.Сумма > ЕСТЬNULL(Выплаты.Сумма,0)
	|	  ТОГДА Начисления.Сумма - ЕСТЬNULL(Выплаты.Сумма,0)
	|	 ИНАЧЕ 0 
	|	КОНЕЦ КАК Сумма
	|ИЗ
	| (ВЫБРАТЬ
	|	Начисления.Сотрудник			КАК Сотрудник,
	|	Начисления.ПериодРегистрации 	КАК ПериодРегистрации,
	|	Начисления.ВидРасчета.СчетУчета	КАК СчетУчета,
	|	Начисления.ВидРасчета			КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало	КАК ДатаНачала,
	|	СУММА(Начисления.Результат)		КАК Сумма
	| 
	|  ИЗ	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|  ГДЕ	Начисления.ПериодРегистрации = &парамПериодРегистрации
	|	И	Начисления.Организация = &парамОрганизация
	|	И	Начисления.Сотрудник в (&парамСотрудники)
	|	И	Начисления.Регистратор.Дата <= &парамДата
	|	И	Начисления.ВидРасчета.ЭтоОтпуск
	|  СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.ПериодРегистрации,
	|	Начисления.ВидРасчета.СчетУчета,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействияНачало
    |) КАК Начисления
	|ЛЕВОЕ СОЕДИНЕНИЕ
	| (ВЫБРАТЬ
	|	Выплаты.Сотрудник				КАК Сотрудник,
	|	Выплаты.ПериодВзаиморасчетов 	КАК ПериодРегистрации,
	|	Выплаты.СчетУчета				КАК СчетУчета, 
	|	Выплаты.ВидРасчета				КАК ВидРасчета,
	|	Выплаты.ДатаНачала				КАК ДатаНачала,
	|	СУММА(Выплаты.СуммаГрязными)	КАК Сумма
	| 
	|  ИЗ	Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК Выплаты
	|  ГДЕ	Выплаты.Ссылка.ПериодРегистрации = &парамПериодРегистрации
	|	И	Выплаты.Ссылка.Организация = &парамОрганизация
	|	И	Выплаты.Ссылка.ВидВыплаты = &парамВидВыплаты
	|	И	Выплаты.Сотрудник в (&парамСотрудники)
	|	И	Выплаты.Ссылка.Дата <= &парамДата
	|	И	Выплаты.Ссылка.Проведен
	|	И	Выплаты.Ссылка <> &парамСсылка
	|  СГРУППИРОВАТЬ ПО
	|	Выплаты.Сотрудник,
	|	Выплаты.ПериодВзаиморасчетов,
	|	Выплаты.СчетУчета,
	|	Выплаты.ВидРасчета,
	|	Выплаты.ДатаНачала
    |) КАК Выплаты
	| ПО Начисления.Сотрудник = Выплаты.Сотрудник
	|  И Начисления.ПериодРегистрации = Выплаты.ПериодРегистрации
	|  И Начисления.СчетУчета = Выплаты.СчетУчета
	|  И Начисления.ВидРасчета = Выплаты.ВидРасчета
	|  И Начисления.ДатаНачала = Выплаты.ДатаНачала
	| 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыВыплатыЗПРаботников.СрезПоследних(&парамДата,
	|			Организация = &парамОрганизация
	|		И	Сотрудник в (&парамСотрудники)
	|	) КАК СпособыВыплаты
	|ПО	СпособыВыплаты.Сотрудник = Начисления.Сотрудник
	|
	|ГДЕ Начисления.Сумма > ЕСТЬNULL(Выплаты.Сумма,0)
	|
	|ИТОГИ  
	|	СУММА(Сумма),
	|	МАКСИМУМ(СпособВыплаты),
	|	МАКСИМУМ(Банк),
	|	МАКСИМУМ(НомерКарточки),
	|	МАКСИМУМ(IBAN)
	|ПО Сотрудник
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	СуммаОкругления = 0;
	Сотрудники = Новый СписокЗначений;
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		Если ВыборкаСотрудник.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;	
		Сотрудники.Добавить(ВыборкаСотрудник.Сотрудник);
		
		Если мОкруглятьДо > 0.01 Тогда
			СуммаОкругления = ВыборкаСотрудник.Сумма - Цел(ВыборкаСотрудник.Сумма/мОкруглятьДо)*мОкруглятьДо;
		КонецЕсли;
		
		СтрокаРаботники = РаботникиОрганизации.Добавить();
		
		СтрокаРаботники.Сотрудник		= ВыборкаСотрудник.Сотрудник;
		СтрокаРаботники.Сумма			= ВыборкаСотрудник.Сумма - СуммаОкругления;
		СтрокаРаботники.СуммаОкругления	= СуммаОкругления;
		СтрокаРаботники.СуммаГрязными	= ВыборкаСотрудник.Сумма;
		
		СтрокаРаботники.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
		СтрокаРаботники.СпособВыплаты	= ?(ВыборкаСотрудник.СпособВыплаты= NULL, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу, ВыборкаСотрудник.СпособВыплаты);
		СтрокаРаботники.Банк			= ВыборкаСотрудник.Банк;
		СтрокаРаботники.НомерКарточки	= ВыборкаСотрудник.НомерКарточки;
		//ИЗМЕНЕНО Верескул Игорь(Начало 17.01.2020
		СтрокаРаботники.IBAN			= ВыборкаСотрудник.IBAN;
		//Окончание)Верескул Игорь
		
		Выборка = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			
			тСуммаОкругления = Мин(СуммаОкругления, Выборка.Сумма);
			СуммаОкругления = Макс(СуммаОкругления - тСуммаОкругления, 0);

			Строка = ПараметрыОплаты.Добавить();
			Строка.Сотрудник			= Выборка.Сотрудник;
			Строка.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
			Строка.СчетУчета			= Выборка.СчетУчета;
			Строка.ВидРасчета			= Выборка.ВидРасчета;
			Строка.ДатаНачала			= Выборка.ДатаНачала;
			Строка.Сумма			= Выборка.Сумма - тСуммаОкругления;
			Строка.СуммаГрязными    = Строка.Сумма;
			Строка.СуммаОкругления	= тСуммаОкругления;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение_ОсновнаяВыплата()

Процедура	АвтозаполнениеБольничные() Экспорт 
	
	// Список работников формируем с учетом условия на подразделение
	Если спСотрудников = "" Тогда
		Сотрудники = ПроведениеРасчетов.АвтозаполнениеРаботникиОрганизации( Ссылка, Ложь ).Выгрузить().ВыгрузитьКолонку("Сотрудник");
	Иначе
		Сотрудники = спСотрудников;
	КонецЕсли;
	
	// Заполнение ТЧ Зарплата и Работники
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата", Дата);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	Запрос.УстановитьПараметр("парамВидВыплаты", ВидВыплаты);
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	
	Если НЕ мБольничныеФССАвансом И мБольничныеВид <> 1 Тогда
		//Отбор больничных за этот период которые оплачены ФСС
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВзаиморасчетыПоНачислениямЗаСчетФСС.Период,
		|	ВзаиморасчетыПоНачислениямЗаСчетФСС.Документ
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоНачислениямЗаСчетФСС КАК ВзаиморасчетыПоНачислениямЗаСчетФСС
		|ГДЕ
		|   ВзаиморасчетыПоНачислениямЗаСчетФСС.Документ.ПериодРегистрации = &парамПериодРегистрации
		|	И ВзаиморасчетыПоНачислениямЗаСчетФСС.Период <= &парамДата
		|	И ВзаиморасчетыПоНачислениямЗаСчетФСС.ВидДвижения = &Расход
		|	И ВзаиморасчетыПоНачислениямЗаСчетФСС.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийРасчетыСФСС.Получено)
		|";
		СписокРегистраторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
		Запрос.УстановитьПараметр("СписокРегистраторов", СписокРегистраторов);
	КонецЕсли;	

	
	Если мБольничныеВид = 1 Тогда
		//За счет организации
	    ОтборБольничные = "И Начисления.ВидРасчета.ЭтоБольничные И НЕ Начисления.ВидРасчета.НачислениеЗаСчетФСС";
	ИначеЕсли мБольничныеВид = 2 Тогда
		//За счет ФСС
		Если мБольничныеФССАвансом Тогда
			ОтборБольничные = "И Начисления.ВидРасчета.ЭтоБольничные И Начисления.ВидРасчета.НачислениеЗаСчетФСС";
		Иначе
			ОтборБольничные = "И Начисления.ВидРасчета.ЭтоБольничные И Начисления.ВидРасчета.НачислениеЗаСчетФСС И Начисления.Регистратор В (&СписокРегистраторов)";
		КонецЕсли;	
	Иначе
		//Все
		Если мБольничныеФССАвансом Тогда
			ОтборБольничные = "И Начисления.ВидРасчета.ЭтоБольничные";
		Иначе
			ОтборБольничные = "И Начисления.ВидРасчета.ЭтоБольничные И (НЕ Начисления.ВидРасчета.НачислениеЗаСчетФСС ИЛИ Начисления.Регистратор В (&СписокРегистраторов))";
		КонецЕсли;	
	КонецЕсли;
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник			КАК Сотрудник,
	|	Начисления.ПериодРегистрации 	КАК ПериодВзаиморасчетов,
	|	Начисления.СчетУчета			КАК СчетУчета,
	|	Начисления.ВидРасчета			КАК ВидРасчета,
	|	Начисления.ДатаНачала			КАК ДатаНачала,
	|	СпособыВыплаты.СпособВыплаты,
	|	СпособыВыплаты.Банк,
	|	СпособыВыплаты.НомерКарточки,
	//ИЗМЕНЕНО Верескул Игорь(Начало 17.01.2020
	|	СпособыВыплаты.IBAN							КАК IBAN,
	//Окончание)Верескул Игорь 
	|	ВЫБОР
	|	 КОГДА Начисления.Сумма > ЕСТЬNULL(Выплаты.Сумма,0)
	|	  ТОГДА Начисления.Сумма - ЕСТЬNULL(Выплаты.Сумма,0)
	|	 ИНАЧЕ 0 
	|	КОНЕЦ КАК Сумма
	|ИЗ
	| (ВЫБРАТЬ
	|	Начисления.Сотрудник			КАК Сотрудник,
	|	Начисления.ПериодРегистрации 	КАК ПериодРегистрации,
	|	Начисления.ВидРасчета.СчетУчета	КАК СчетУчета,
	|	Начисления.ВидРасчета			КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало	КАК ДатаНачала,
	|	СУММА(Начисления.Результат)		КАК Сумма
	| 
	|  ИЗ	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|  ГДЕ	Начисления.ПериодРегистрации = &парамПериодРегистрации
	|	И	Начисления.Организация = &парамОрганизация
	|	И	Начисления.Сотрудник в (&парамСотрудники)
	|	И	Начисления.Регистратор.Дата <= &парамДата
	|	"+ОтборБольничные+"
	|
	|  СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.ПериодРегистрации,
	|	Начисления.ВидРасчета.СчетУчета,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействияНачало
    |) КАК Начисления
	|ЛЕВОЕ СОЕДИНЕНИЕ
	| (ВЫБРАТЬ
	|	Выплаты.Сотрудник				КАК Сотрудник,
	|	Выплаты.ПериодВзаиморасчетов 	КАК ПериодРегистрации,
	|	Выплаты.СчетУчета				КАК СчетУчета, 
	|	Выплаты.ВидРасчета				КАК ВидРасчета,
	|	Выплаты.ДатаНачала				КАК ДатаНачала,
	|	СУММА(Выплаты.СуммаГрязными)	КАК Сумма
	| 
	|  ИЗ	Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК Выплаты
	|  ГДЕ	Выплаты.Ссылка.ПериодРегистрации = &парамПериодРегистрации
	|	И	Выплаты.Ссылка.Организация = &парамОрганизация
	|	И	Выплаты.Ссылка.ВидВыплаты = &парамВидВыплаты
	|	И	Выплаты.Сотрудник в (&парамСотрудники)
	|	И	Выплаты.Ссылка.Дата <= &парамДата
	|	И	Выплаты.Ссылка.Проведен
	|	И	Выплаты.Ссылка <> &парамСсылка
	|  СГРУППИРОВАТЬ ПО
	|	Выплаты.Сотрудник,
	|	Выплаты.ПериодВзаиморасчетов,
	|	Выплаты.СчетУчета,
	|	Выплаты.ВидРасчета,
	|	Выплаты.ДатаНачала
    |) КАК Выплаты
	| ПО Начисления.Сотрудник = Выплаты.Сотрудник
	|  И Начисления.ПериодРегистрации = Выплаты.ПериодРегистрации
	|  И Начисления.СчетУчета = Выплаты.СчетУчета
	|  И Начисления.ВидРасчета = Выплаты.ВидРасчета
	|  И Начисления.ДатаНачала = Выплаты.ДатаНачала
	| 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыВыплатыЗПРаботников.СрезПоследних(&парамДата,
	|			Организация = &парамОрганизация
	|		И	Сотрудник в (&парамСотрудники)
	|	) КАК СпособыВыплаты
	|ПО	СпособыВыплаты.Сотрудник = Начисления.Сотрудник
	|
	|ГДЕ Начисления.Сумма > ЕСТЬNULL(Выплаты.Сумма,0)
	|
	|УПОРЯДОЧИТЬ ПО 
	|   "+?(мСортировка = Неопределено или мСортировка = "","","Начисления."+мСортировка+", ")+"Начисления.Сотрудник.Наименование, ПериодВзаиморасчетов УБЫВ, СчетУчета  
	|
	|ИТОГИ  
	|	СУММА(Сумма),
	|	МАКСИМУМ(СпособВыплаты),
	|	МАКСИМУМ(Банк),
	|	МАКСИМУМ(НомерКарточки),
	|	МАКСИМУМ(IBAN)
	|ПО Сотрудник
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	СуммаОкругления = 0;
	Сотрудники = Новый СписокЗначений;
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		Если ВыборкаСотрудник.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;	
		Сотрудники.Добавить(ВыборкаСотрудник.Сотрудник);
		
		Если мОкруглятьДо > 0.01 Тогда
			СуммаОкругления = ВыборкаСотрудник.Сумма - Цел(ВыборкаСотрудник.Сумма/мОкруглятьДо)*мОкруглятьДо;
		КонецЕсли;
		
		СтрокаРаботники = РаботникиОрганизации.Добавить();
		
		СтрокаРаботники.Сотрудник		= ВыборкаСотрудник.Сотрудник;
		СтрокаРаботники.Сумма			= ВыборкаСотрудник.Сумма - СуммаОкругления;
		СтрокаРаботники.СуммаОкругления	= СуммаОкругления;
		СтрокаРаботники.СуммаГрязными	= ВыборкаСотрудник.Сумма;
		
		СтрокаРаботники.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
		СтрокаРаботники.СпособВыплаты	= ?(ВыборкаСотрудник.СпособВыплаты= NULL, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу, ВыборкаСотрудник.СпособВыплаты);
		СтрокаРаботники.Банк			= ВыборкаСотрудник.Банк;
		СтрокаРаботники.НомерКарточки	= ВыборкаСотрудник.НомерКарточки;
		//ИЗМЕНЕНО Верескул Игорь(Начало 17.01.2020
		СтрокаРаботники.IBAN			= ВыборкаСотрудник.IBAN;
		//Окончание)Верескул Игорь
		
		Выборка = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			
			тСуммаОкругления = Мин(СуммаОкругления, Выборка.Сумма);
			СуммаОкругления = Макс(СуммаОкругления - тСуммаОкругления, 0);

			Строка = ПараметрыОплаты.Добавить();
			Строка.Сотрудник			= Выборка.Сотрудник;
			Строка.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
			Строка.СчетУчета			= Выборка.СчетУчета;
			Строка.ВидРасчета			= Выборка.ВидРасчета;
			Строка.ДатаНачала			= Выборка.ДатаНачала;
			Строка.Сумма			= Выборка.Сумма - тСуммаОкругления;
			Строка.СуммаГрязными    = Строка.Сумма;
			Строка.СуммаОкругления	= тСуммаОкругления;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение_ОсновнаяВыплата()

Процедура	АвтозаполнениеАвансПредварительныйРасчет() Экспорт
	
	// Список работников формируем с учетом условия на подразделение
	Если спСотрудников = "" Тогда
		Сотрудники = ПроведениеРасчетов.АвтозаполнениеРаботникиОрганизации( Ссылка, Ложь ).Выгрузить().ВыгрузитьКолонку("Сотрудник");
	Иначе
		Сотрудники = спСотрудников;
	КонецЕсли;
	
	// Заполнение ТЧ Зарплата и Работники
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата", Дата);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	Запрос.УстановитьПараметр("парамВидВыплаты", ВидВыплаты);
    Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Начисления.Сотрудник			КАК Сотрудник,
	|	Начисления.ПериодРегистрации 	КАК ПериодВзаиморасчетов,
	|	Начисления.СчетУчета			КАК СчетУчета,
	|	СпособыВыплаты.СпособВыплаты,
	|	СпособыВыплаты.Банк,
	|	СпособыВыплаты.НомерКарточки,
	//ИЗМЕНЕНО Верескул Игорь(Начало 17.01.2020
	|	СпособыВыплаты.IBAN							КАК IBAN,
	//Окончание)Верескул Игорь 
	|	ВЫБОР
	|	 КОГДА Начисления.Сумма > ЕСТЬNULL(Выплаты.Сумма,0)
	|	  ТОГДА Начисления.Сумма - ЕСТЬNULL(Выплаты.Сумма,0)
	|	 ИНАЧЕ 0 
	|	КОНЕЦ КАК Сумма
	|ИЗ
	| (ВЫБРАТЬ
	|	Начисления.Сотрудник			КАК Сотрудник,
	|	Начисления.Ссылка.ПериодРегистрации 	КАК ПериодРегистрации,
	|	Начисления.ВидРасчета.СчетУчета	КАК СчетУчета, 
	|	СУММА(Начисления.Результат)		КАК Сумма
	| 
	|  ИЗ	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
	|  ГДЕ	Начисления.Ссылка.ПериодРегистрации = &парамПериодРегистрации
	|	И	Начисления.Ссылка.Организация = &парамОрганизация
	|	И	Начисления.Сотрудник в (&парамСотрудники)
	|	И	Начисления.Ссылка.Дата <= &парамДата
	|	И	Начисления.Ссылка.ПредварительныйРасчет
	|	И	Начисления.Ссылка.Проведен
	|  СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.Ссылка.ПериодРегистрации,
	|	Начисления.ВидРасчета.СчетУчета
    |) КАК Начисления
	|ЛЕВОЕ СОЕДИНЕНИЕ
	| (ВЫБРАТЬ
	|	Выплаты.Сотрудник				КАК Сотрудник,
	|	Выплаты.ПериодВзаиморасчетов 	КАК ПериодРегистрации,
	|	Выплаты.СчетУчета				КАК СчетУчета, 
	|	СУММА(Выплаты.Сумма)			КАК Сумма
	| 
	|  ИЗ	Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК Выплаты
	|  ГДЕ	Выплаты.Ссылка.ПериодРегистрации = &парамПериодРегистрации
	|	И	Выплаты.Ссылка.Организация = &парамОрганизация
	|	И	Выплаты.Ссылка.ВидВыплаты = &парамВидВыплаты
	|	И	Выплаты.Сотрудник в (&парамСотрудники)
	|	И	Выплаты.Ссылка.Дата <= &парамДата
	|	И	Выплаты.Ссылка.Проведен
	|	И	Выплаты.Ссылка <> &парамСсылка
	|  СГРУППИРОВАТЬ ПО
	|	Выплаты.Сотрудник,
	|	Выплаты.ПериодВзаиморасчетов,
	|	Выплаты.СчетУчета
    |) КАК Выплаты
	| ПО Начисления.Сотрудник = Выплаты.Сотрудник
	|  И Начисления.ПериодРегистрации = Выплаты.ПериодРегистрации
	|  И Начисления.СчетУчета = Выплаты.СчетУчета
	| 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыВыплатыЗПРаботников.СрезПоследних(&парамДата,
	|			Организация = &парамОрганизация
	|		И	Сотрудник в (&парамСотрудники)
	|	) КАК СпособыВыплаты
	|ПО	СпособыВыплаты.Сотрудник = Начисления.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|   "+?(мСортировка = Неопределено или мСортировка = "","","Начисления."+мСортировка+", ")+"Начисления.Сотрудник.Наименование
	|
	|ИТОГИ  
	|	СУММА(Сумма),
	|	МАКСИМУМ(СпособВыплаты),
	|	МАКСИМУМ(Банк),
	|	МАКСИМУМ(НомерКарточки),
	|	МАКСИМУМ(IBAN)
	|ПО Сотрудник
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	СуммаОкругления = 0;
	Сотрудники = Новый СписокЗначений;
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		Если ВыборкаСотрудник.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;	
		Сотрудники.Добавить(ВыборкаСотрудник.Сотрудник);
		
		Если мОкруглятьДо > 0.01 Тогда
			СуммаОкругления = ВыборкаСотрудник.Сумма - Цел(ВыборкаСотрудник.Сумма/мОкруглятьДо)*мОкруглятьДо;
		КонецЕсли;
		
		СтрокаРаботники = РаботникиОрганизации.Добавить();
		
		СтрокаРаботники.Сотрудник		= ВыборкаСотрудник.Сотрудник;
		СтрокаРаботники.Сумма			= ВыборкаСотрудник.Сумма - СуммаОкругления;
		СтрокаРаботники.СуммаОкругления	= 0;
		СтрокаРаботники.СуммаГрязными	= ВыборкаСотрудник.Сумма;
		
		СтрокаРаботники.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
		СтрокаРаботники.СпособВыплаты	= ?(ВыборкаСотрудник.СпособВыплаты= NULL, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу, ВыборкаСотрудник.СпособВыплаты);
		СтрокаРаботники.Банк			= ВыборкаСотрудник.Банк;
		СтрокаРаботники.НомерКарточки	= ВыборкаСотрудник.НомерКарточки;
		//ИЗМЕНЕНО Верескул Игорь(Начало 17.01.2020
		СтрокаРаботники.IBAN			= ВыборкаСотрудник.IBAN;
		//Окончание)Верескул Игорь		
		
		Выборка = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			
			тСуммаОкругления = Мин(СуммаОкругления, Выборка.Сумма);
			СуммаОкругления = Макс(СуммаОкругления - тСуммаОкругления, 0);

			Строка = ПараметрыОплаты.Добавить();
			Строка.Сотрудник			= Выборка.Сотрудник;
			Строка.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
			Строка.СчетУчета			= Выборка.СчетУчета;
			Строка.Сумма			= Выборка.Сумма - тСуммаОкругления;
			Строка.СуммаОкругления	= 0;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение_ОсновнаяВыплата()

Процедура	АвтозаполнениеМежрасчетныеВыплаты() 
	
	// Список работников формируем с учетом условия на подразделение
	Если спСотрудников = "" Тогда
		Сотрудники = ПроведениеРасчетов.АвтозаполнениеРаботникиОрганизации( Ссылка, Ложь ).Выгрузить().ВыгрузитьКолонку("Сотрудник");
	Иначе
		Сотрудники = спСотрудников;
	КонецЕсли;
	
	мОкруглятьДо = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ОкруглятьДо;
	
	// Заполнение ТЧ Зарплата и Работники
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата", Дата);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	Запрос.УстановитьПараметр("парамВидРасчета", ВидВыплаты.ВидыРасчета.ВыгрузитьКолонку("ВидРасчета"));
	Запрос.УстановитьПараметр("парамВидВыплаты", ВидВыплаты);
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник			КАК Сотрудник,
	|	Начисления.ПериодРегистрации 	КАК ПериодВзаиморасчетов,
	|	Начисления.СчетУчета			КАК СчетУчета,
	|	Начисления.ВидРасчета			КАК ВидРасчета,
	|	Начисления.ДатаНачала			КАК ДатаНачала,
	|	СпособыВыплаты.СпособВыплаты,
	|	СпособыВыплаты.Банк,
	|	СпособыВыплаты.НомерКарточки,
	//ИЗМЕНЕНО Верескул Игорь(Начало 17.01.2020
	|	СпособыВыплаты.IBAN							КАК IBAN,
	//Окончание)Верескул Игорь 
	|	ВЫБОР
	|	 КОГДА Начисления.Сумма > ЕСТЬNULL(Выплаты.Сумма,0)
	|	  ТОГДА Начисления.Сумма - ЕСТЬNULL(Выплаты.Сумма,0)
	|	 ИНАЧЕ 0 
	|	КОНЕЦ КАК Сумма
	|ИЗ
	| (ВЫБРАТЬ
	|	Начисления.Сотрудник			КАК Сотрудник,
	|	Начисления.ПериодРегистрации 	КАК ПериодРегистрации,
	|	Начисления.ВидРасчета.СчетУчета	КАК СчетУчета,
	|	Начисления.ВидРасчета			КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало	КАК ДатаНачала,
	|	СУММА(Начисления.Результат)		КАК Сумма
	| 
	|  ИЗ	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|  ГДЕ	Начисления.ПериодРегистрации = &парамПериодРегистрации
	|	И	Начисления.Организация = &парамОрганизация
	|	И	Начисления.Сотрудник в (&парамСотрудники)
	|	И	Начисления.Регистратор.Дата <= &парамДата
	|	И	Начисления.ВидРасчета В (&парамВидРасчета)
	|  СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.ПериодРегистрации,
	|	Начисления.ВидРасчета.СчетУчета,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействияНачало
    |) КАК Начисления
	|ЛЕВОЕ СОЕДИНЕНИЕ
	| (ВЫБРАТЬ
	|	Выплаты.Сотрудник				КАК Сотрудник,
	|	Выплаты.ПериодВзаиморасчетов 	КАК ПериодРегистрации,
	|	Выплаты.СчетУчета				КАК СчетУчета, 
	|	Выплаты.ВидРасчета				КАК ВидРасчета,
	|	Выплаты.ДатаНачала				КАК ДатаНачала,
	|	СУММА(Выплаты.СуммаГрязными)	КАК Сумма
	| 
	|  ИЗ	Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК Выплаты
	|  ГДЕ	Выплаты.Ссылка.ПериодРегистрации = &парамПериодРегистрации
	|	И	Выплаты.Ссылка.Организация = &парамОрганизация
	|	И	Выплаты.Ссылка.ВидВыплаты = &парамВидВыплаты
	|	И	Выплаты.Сотрудник в (&парамСотрудники)
	|	И	Выплаты.Ссылка.Дата <= &парамДата
	|	И	Выплаты.Ссылка.Проведен
	|	И	Выплаты.Ссылка <> &парамСсылка
	|  СГРУППИРОВАТЬ ПО
	|	Выплаты.Сотрудник,
	|	Выплаты.ПериодВзаиморасчетов,
	|	Выплаты.СчетУчета,
	|	Выплаты.ВидРасчета,
	|	Выплаты.ДатаНачала
    |) КАК Выплаты
	| ПО Начисления.Сотрудник = Выплаты.Сотрудник
	|  И Начисления.ПериодРегистрации = Выплаты.ПериодРегистрации
	|  И Начисления.СчетУчета = Выплаты.СчетУчета
	|  И Начисления.ВидРасчета = Выплаты.ВидРасчета
	|  И Начисления.ДатаНачала = Выплаты.ДатаНачала
	| 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыВыплатыЗПРаботников.СрезПоследних(&парамДата,
	|			Организация = &парамОрганизация
	|		И	Сотрудник в (&парамСотрудники)
	|	) КАК СпособыВыплаты
	|ПО	СпособыВыплаты.Сотрудник = Начисления.Сотрудник
	|
	|ГДЕ Начисления.Сумма > ЕСТЬNULL(Выплаты.Сумма,0)
	|
	|ИТОГИ  
	|	СУММА(Сумма),
	|	МАКСИМУМ(СпособВыплаты),
	|	МАКСИМУМ(Банк),
	|	МАКСИМУМ(НомерКарточки),
	|	МАКСИМУМ(IBAN)
	|ПО Сотрудник
	|";
	
	
	Запрос.Текст = ТекстЗапроса;
	
	СуммаОкругления = 0;
	Сотрудники = Новый СписокЗначений;
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		Если ВыборкаСотрудник.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		Сотрудники.Добавить(ВыборкаСотрудник.Сотрудник);
		
		Если мОкруглятьДо > 0.01 Тогда
			СуммаОкругления = ВыборкаСотрудник.Сумма - Цел(ВыборкаСотрудник.Сумма/мОкруглятьДо)*мОкруглятьДо;
		КонецЕсли;
		
		СтрокаРаботники = РаботникиОрганизации.Добавить();
		
		СтрокаРаботники.Сотрудник		= ВыборкаСотрудник.Сотрудник;
		СтрокаРаботники.Сумма			= ВыборкаСотрудник.Сумма - СуммаОкругления;
		СтрокаРаботники.СуммаОкругления	= СуммаОкругления;
		СтрокаРаботники.СуммаГрязными	= ВыборкаСотрудник.Сумма;
		
		СтрокаРаботники.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
		СтрокаРаботники.СпособВыплаты	= ?(ВыборкаСотрудник.СпособВыплаты= NULL, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу, ВыборкаСотрудник.СпособВыплаты);
		СтрокаРаботники.Банк			= ВыборкаСотрудник.Банк;
		СтрокаРаботники.НомерКарточки	= ВыборкаСотрудник.НомерКарточки;
		//ИЗМЕНЕНО Верескул Игорь(Начало 17.01.2020
		СтрокаРаботники.IBAN			= ВыборкаСотрудник.IBAN;
		//Окончание)Верескул Игорь
		Выборка = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			
			тСуммаОкругления = Мин(СуммаОкругления, Выборка.Сумма);
			СуммаОкругления = Макс(СуммаОкругления - тСуммаОкругления, 0);

			Строка = ПараметрыОплаты.Добавить();
			Строка.Сотрудник			= Выборка.Сотрудник;
			Строка.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
			Строка.СчетУчета			= Выборка.СчетУчета;
			Строка.ВидРасчета			= Выборка.ВидРасчета;
			Строка.ДатаНачала			= Выборка.ДатаНачала;
			Строка.Сумма			= Выборка.Сумма - тСуммаОкругления;
			Строка.СуммаГрязными    = Строка.Сумма;
			Строка.СуммаОкругления	= тСуммаОкругления;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение_ОсновнаяВыплата()

Процедура	АвтозаполнениеДепонированная() Экспорт                                                                  	

	// Список работников формируем с учетом условия на подразделение
	Если спСотрудников = "" Тогда
		Сотрудники = ПроведениеРасчетов.АвтозаполнениеРаботникиОрганизации( Ссылка, Ложь ).Выгрузить().ВыгрузитьКолонку("Сотрудник");
	Иначе
		Сотрудники = спСотрудников;
	КонецЕсли;
	
	// Заполнение ТЧ Зарплата и Работники
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата",	Дата);
	Запрос.УстановитьПараметр("парамНачало",	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонец",		КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация",	Организация);
	Запрос.УстановитьПараметр("парамСотрудники",	Сотрудники);
	
	Запрос.УстановитьПараметр("ПроцентВыплаты", мПроцентВыплаты);
	
	Если Не ЗначениеЗаполнено(мПериодС) и Не ЗначениеЗаполнено(мПериодПо) Тогда
		ОтборПериод = "";
	ИначеЕсли ЗначениеЗаполнено(мПериодС) и Не ЗначениеЗаполнено(мПериодПо) Тогда
		ОтборПериод = "И (Ведомость.ПериодРегистрации >= &ПериодС)";
	ИначеЕсли НЕ ЗначениеЗаполнено(мПериодС) и ЗначениеЗаполнено(мПериодПо) Тогда
		ОтборПериод = "И (Ведомость.ПериодРегистрации <= &ПериодПО)";
	Иначе
		ОтборПериод = "И ((Ведомость.ПериодРегистрации >= &ПериодС И Ведомость.ПериодРегистрации <= &ПериодПО))";
	КонецЕсли;	
    Запрос.УстановитьПараметр("ПериодС", мПериодС);
	Запрос.УстановитьПараметр("ПериодПо", мПериодПо);

	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Взаиморасчеты.Сотрудник						КАК Сотрудник,
	|	Взаиморасчеты.Ведомость						КАК Ведомость,
	|	Взаиморасчеты.Ведомость.ПериодРегистрации	КАК ПериодВзаиморасчетов,
	|	Взаиморасчеты.СуммаОстаток*&ПроцентВыплаты/100	КАК Сумма,
	|	СпособыВыплаты.СпособВыплаты				КАК СпособВыплаты,
	|	СпособыВыплаты.Банк							КАК Банк,
	|	СпособыВыплаты.НомерКарточки				КАК НомерКарточки,
	//ИЗМЕНЕНО Верескул Игорь(Начало 17.01.2020
	|	СпособыВыплаты.IBAN							КАК IBAN
	//Окончание)Верескул Игорь 
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки( &парамДата,
	|			Организация = &парамОрганизация
	|		И	Сотрудник в (&парамСотрудники)"+ОтборПериод+"
	|    ) КАК Взаиморасчеты
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК СпособыВыплаты
	|ПО	СпособыВыплаты.Ссылка = Взаиморасчеты.Ведомость
	|И	СпособыВыплаты.Сотрудник = Взаиморасчеты.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО 
	|   "+?(мСортировка = Неопределено или мСортировка = "","","Взаиморасчеты."+мСортировка+", ")+"Взаиморасчеты.Сотрудник.Наименование, ПериодВзаиморасчетов УБЫВ 
	|
	|ИТОГИ СУММА(Сумма) 
	|ПО Сотрудник
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		СтрокаРаботники = РаботникиОрганизации.Добавить();
			
		СтрокаРаботники.Сотрудник	= ВыборкаСотрудник.Сотрудник;
		СтрокаРаботники.Сумма		= ВыборкаСотрудник.Сумма;
			
		СтрокаРаботники.ВыплаченностьЗарплаты	= Перечисления.ВыплаченностьЗарплаты.Выплачено;
		СтрокаРаботники.СпособВыплаты			= ?(ВыборкаСотрудник.СпособВыплаты= NULL, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу,ВыборкаСотрудник.СпособВыплаты);
		СтрокаРаботники.Банк					= ВыборкаСотрудник.Банк;
		СтрокаРаботники.НомерКарточки			= ВыборкаСотрудник.НомерКарточки;
		//ИЗМЕНЕНО Верескул Игорь(Начало 17.01.2020
		СтрокаРаботники.IBAN			= ВыборкаСотрудник.IBAN;
		//Окончание)Верескул Игорь	
		
		Выборка = ВыборкаСотрудник.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Строка = ПараметрыОплаты.Добавить();
			   
			Строка.Сотрудник				= Выборка.Сотрудник;
			Строка.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
			Строка.Ведомость				= Выборка.Ведомость;
			Строка.Сумма					= Выборка.Сумма;
			Строка.СчетУчета				= ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение_ОсновнаяВыплата()

Процедура	АвтозаполнениеЗакрытиеПериода() 
	
	АвтозаполнениеЗакрытиеПериодаСотрудники();
	АвтозаполнениеЗакрытиеПериодаНДФЛ();
	АвтозаполнениеЗакрытиеПериодаВзносы();
	
КонецПроцедуры // АвтозаполнениеЗакрытиеПериода()

Процедура	АвтозаполнениеЗакрытиеПериодаСотрудники() Экспорт
	
	Сотрудники = ПроведениеРасчетов.АвтозаполнениеРаботникиОрганизации( Ссылка, Ложь ).Выгрузить().ВыгрузитьКолонку("Сотрудник");
	тПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, 1);
	 
	/////////////////////////////////////////////////////////////////////////
	// Заполнение проблем РН ВзаиморасчетыСРаботникамиОрганизаций 
	// (по списку работникам, которые удовлетворяют условиям шапки документа)
	Если Истина Тогда
		
		// Получаем только отрицательные остатки и перекидываем их 
		// на текущий месяц в надежде что начисленные суммы их покроют
		// Наверно в каком-то месяце выплатили больше чем начислили
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.УстановитьПараметр("ПериодРегистрации",	тПериодРегистрации);
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
		
		ТекстЗапроса = "
		|		ВЫБРАТЬ
		|			Основной.Сотрудник						КАК Сотрудник,
		|			Основной.ПериодВзаиморасчетов			КАК ПериодВзаиморасчетов,
		|			Основной.СчетУчета						КАК СчетУчета,
		|			-Основной.СуммаВзаиморасчетовОстаток		КАК Сумма
		|		ИЗ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки( КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),	Организация = &парамОрганизация
		|			И	Сотрудник в (&парамСотрудники)
		|			И	НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) < &ПериодРегистрации
		|			) КАК Основной
		|		ГДЕ	Основной.СуммаВзаиморасчетовОстаток < 0    // только отрицательные остатки
		|";
		
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// никаких округлений тут не учитываем
			
			// Первое движение закрывает проблемный перриод 
			// Внимание! в запросе только отрицательные суммы, потому первое движение всегда "+" второе "-"
			СтрокаПараметры = ПараметрыОплаты.Добавить();
			СтрокаПараметры.Сотрудник				= Выборка.Сотрудник;
			СтрокаПараметры.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
			СтрокаПараметры.СчетУчета				= Выборка.СчетУчета;
			СтрокаПараметры.Сумма					= - Выборка.Сумма;
			
			// Второе движение перебрасывает проблемную сумму на  период регистрации
			СтрокаПараметры = ПараметрыОплаты.Добавить();
			СтрокаПараметры.Сотрудник				= Выборка.Сотрудник;
			СтрокаПараметры.ПериодВзаиморасчетов	= тПериодРегистрации;
			СтрокаПараметры.СчетУчета				= Выборка.СчетУчета;
			СтрокаПараметры.Сумма					= Выборка.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // АвтозаполнениеЗакрытиеПериодаСотрудники()

Процедура	АвтозаполнениеЗакрытиеПериодаНДФЛ() Экспорт
	
	Сотрудники = ПроведениеРасчетов.АвтозаполнениеРаботникиОрганизации( Ссылка, Ложь ).Выгрузить().ВыгрузитьКолонку("Сотрудник");
	тПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, 1);
	
	/////////////////////////////////////////////////////////////////////////
	// Заполнение ТЧ НДФЛ (по списку работникам, которые удовлетворяют 
	// условиям шапки документа)
	Если Истина Тогда
		
		// В два этапа:
		// На первом, определяем есть ли суммы оплаченнве без ведомости
		// На втором, переносим суммы переплат по работникам на следующий период и распределеяем суммы без ведомости
		
		// 1
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата",	Дата);
		Запрос.УстановитьПараметр("ПериодРегистрации",	тПериодРегистрации);
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Основной.ПериодВзаиморасчетов			КАК ПериодВзаиморасчетов,
		|	СУММА( - Основной.НеподтвержденнаяСуммаОстаток)	КАК НеподтвержденнаяСумма
		|ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ.Остатки(&Дата, Организация = &парамОрганизация
		|			И	НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) <= &ПериодРегистрации
		|	) КАК Основной
		|СГРУППИРОВАТЬ ПО
		|	Основной.ПериодВзаиморасчетов
		|";
		
		Запрос.Текст = ТекстЗапроса;
		тбОплаты = Запрос.Выполнить().Выгрузить();
		тбОплаты.Колонки.Добавить("РаспределенныйНалог", Новый ОписаниеТипов("Число"));
		
		// 2
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата",	Дата);
		Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Основной.Сотрудник				КАК Сотрудник,
		|	Основной.ПериодВзаиморасчетов	КАК ПериодВзаиморасчетов,
		|	Основной.ДоходНДФЛ				КАК ДоходНДФЛ,
		|	Основной.ДоходОстаток			КАК Доход,
		|	ВЫБОР КОГДА Основной.НалогОстаток>0 ТОГДА Основной.НалогОстаток ИНАЧЕ 0 КОНЕЦ	КАК НеЗакрытыйНалог,
		|	Основной.НалогОстаток			КАК Налог
		|ИЗ 	РегистрНакопления.ВзаиморасчетыПоНДФЛ.Остатки( КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),	Организация = &парамОрганизация
		|	И	Сотрудник в (&парамСотрудники)
		|	И	НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) <= &ПериодРегистрации
		|	) КАК Основной
		|ИТОГИ СУММА(НеЗакрытыйНалог) 
		|ПО ПериодВзаиморасчетов
		|";
		
		Запрос.Текст = ТекстЗапроса;
		ВыборкаПериодВзаиморасчетов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ПериодВзаиморасчетов");
		Пока ВыборкаПериодВзаиморасчетов.Следующий() Цикл
			
			// находим есть ли перепдоплата
			СтрокаОстатков = тбОплаты.Найти(ВыборкаПериодВзаиморасчетов.ПериодВзаиморасчетов,"ПериодВзаиморасчетов");
			НеЗакрытыйНалог = ВыборкаПериодВзаиморасчетов.НеЗакрытыйНалог;
			
			Выборка = ВыборкаПериодВзаиморасчетов.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				
				Если	Выборка.Доход < 0 ИЛИ Выборка.Налог < 0  Тогда
					// Первое движение закрывает проблемный перриод 
					// Внимание! в запросе это отрицательные суммы, потому первое движение всегда "+" второе "-"
					СтрокаНДФЛ = НДФЛ.Добавить();
					СтрокаНДФЛ.Сотрудник			= Выборка.Сотрудник;
					СтрокаНДФЛ.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
					СтрокаНДФЛ.ДоходНДФЛ			= Выборка.ДоходНДФЛ;
					СтрокаНДФЛ.Доход				= - Выборка.Доход;
					СтрокаНДФЛ.Налог				= - Выборка.Налог;
					
					// Второе движение перебрасывает проблемную сумму на  период регистрации
					СтрокаНДФЛ = НДФЛ.Добавить();
					СтрокаНДФЛ.Сотрудник			= Выборка.Сотрудник;
					СтрокаНДФЛ.ПериодВзаиморасчетов	= тПериодРегистрации;
					СтрокаНДФЛ.ДоходНДФЛ			= Выборка.ДоходНДФЛ;
					СтрокаНДФЛ.Доход				= Выборка.Доход;
					СтрокаНДФЛ.Налог				= Выборка.Налог;
					
				ИначеЕсли СтрокаОстатков <> Неопределено Тогда
					
					Если НеЗакрытыйНалог <= СтрокаОстатков.НеподтвержденнаяСумма Тогда
						// Закрываем на полную сумму, а хвост перекинем на следующий период взаиморасчетов
						СтрокаНДФЛ = НДФЛ.Добавить();
						СтрокаНДФЛ.Сотрудник			= Выборка.Сотрудник;
						СтрокаНДФЛ.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
						СтрокаНДФЛ.ДоходНДФЛ			= Выборка.ДоходНДФЛ;
						СтрокаНДФЛ.Доход				= Выборка.Доход;
						СтрокаНДФЛ.Налог				= Выборка.Налог;
						
						СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + Выборка.Налог;
						
					ИначеЕсли СтрокаОстатков.НеподтвержденнаяСумма <> 0 Тогда
						// придется сделать пропорцию, если останется копейка бросим на того, на ком вылезла
						Коэф = СтрокаОстатков.НеподтвержденнаяСумма / НеЗакрытыйНалог;
						тНалог = Окр(Коэф*Выборка.Налог,2);
						СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + тНалог;
						Копейка = 0;
						Если СтрокаОстатков.РаспределенныйНалог - тНалог = 0.01 Тогда
							// копейка вылезла
							Копейка = 0.01;
							СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + Копейка;
						КонецЕсли;
						
						СтрокаНДФЛ = НДФЛ.Добавить();
						СтрокаНДФЛ.Сотрудник			= Выборка.Сотрудник;
						СтрокаНДФЛ.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
						СтрокаНДФЛ.ДоходНДФЛ			= Выборка.ДоходНДФЛ;
						СтрокаНДФЛ.Доход				= Коэф*Выборка.Доход;
						СтрокаНДФЛ.Налог				= тНалог + Копейка;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для каждого СтрокаОстатков Из тбОплаты Цикл
			
			Если СтрокаОстатков.РаспределенныйНалог > 0 Тогда
				
				СтрокаНДФЛ = НДФЛ.Добавить();
				СтрокаНДФЛ.ПериодВзаиморасчетов		= СтрокаОстатков.ПериодВзаиморасчетов;
				СтрокаНДФЛ.НеподтвержденнаяСумма	= - СтрокаОстатков.НеподтвержденнаяСумма;
				
				Если СтрокаОстатков.НеподтвержденнаяСумма - СтрокаОстатков.РаспределенныйНалог <> 0 Тогда
					СтрокаНДФЛ = НДФЛ.Добавить();
					СтрокаНДФЛ.ПериодВзаиморасчетов		= тПериодРегистрации;
					СтрокаНДФЛ.НеподтвержденнаяСумма	= СтрокаОстатков.НеподтвержденнаяСумма - СтрокаОстатков.РаспределенныйНалог;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // АвтозаполнениеЗакрытиеПериодаНДФЛ()

Процедура	АвтозаполнениеЗакрытиеПериодаВзносы(ВидВзносов = "По всем") Экспорт
	
	тПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, 1);
	
	/////////////////////////////////////////////////////////////////////////
	// Заполнение ТЧ Взносы, ВзхносыФОТ (по всей организации)
	// В два этапа:
	// На первом, определяем есть ли суммы оплаченнве без ведомости
	// На втором, переносим суммы переплат по работникам на следующий период и распределеяем суммы без ведомости
	
	// 1.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",	Дата);
	Запрос.УстановитьПараметр("ПериодРегистрации",	тПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Основной.ПериодВзаиморасчетов		КАК ПериодВзаиморасчетов,
	|	Основной.СтатьяНалоговойДекларации	КАК СтатьяНалоговойДекларации,
	|	Основной.Налог						КАК Налог,
	|	СУММА( - Основной.НеподтвержденнаяСуммаОстаток)	КАК НеподтвержденнаяСумма
	|ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки(&Дата, Организация = &парамОрганизация
	|			И	НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) <= &ПериодРегистрации
	|	) КАК Основной
	|СГРУППИРОВАТЬ ПО
	|	Основной.ПериодВзаиморасчетов,
	|	Основной.СтатьяНалоговойДекларации,
	|	Основной.Налог
	|";
	
	Запрос.Текст = ТекстЗапроса;
	тбОплаты = Запрос.Выполнить().Выгрузить();
	тбОплаты.Колонки.Добавить("РаспределенныйНалог", Новый ОписаниеТипов("Число"));
	тбОплаты.Колонки.Добавить("ЭтоВзносы", Новый ОписаниеТипов("Булево"));
	
	// 2.	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",	Дата);
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Основной.ПериодВзаиморасчетов			КАК ПериодВзаиморасчетов,
	|	ВидыРасчетовВзносовВФонды.ВидРасчета.СпособРасчета	КАК СпособРасчета,
	|	Основной.Налог							КАК Налог,
	|	Основной.СтатьяНалоговойДекларации		КАК СтатьяНалоговойДекларации,
	|	ВЫБОР КОГДА Основной.РезультатОстаток>0 ТОГДА Основной.РезультатОстаток ИНАЧЕ 0 КОНЕЦ	КАК НеЗакрытыйНалог,
	|	Основной.БазаОстаток			КАК База,
	|	Основной.БазаВзносаОстаток		КАК БазаВзноса,
	|	Основной.РезультатОстаток		КАК Результат
	|ИЗ РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки( КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),	Организация = &парамОрганизация
	|	И	НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) <= &ПериодРегистрации
	|	) КАК Основной
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодРегистрации) КАК ВидыРасчетовВзносовВФонды
	|ПО  Основной.Налог = ВидыРасчетовВзносовВФонды.Налог
	|
	|ИТОГИ СУММА(НеЗакрытыйНалог) 
	|ПО ПериодВзаиморасчетов, Налог, СтатьяНалоговойДекларации
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Отбор = Новый Структура("ПериодВзаиморасчетов, Налог, СтатьяНалоговойДекларации");
	
	ВыборкаПериодВзаиморасчетов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ПериодВзаиморасчетов");
	Пока ВыборкаПериодВзаиморасчетов.Следующий() Цикл
		
		ВыборкаНалог = ВыборкаПериодВзаиморасчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Налог");
		Пока ВыборкаНалог.Следующий() Цикл
			
			ВыборкаСтатьяНалоговойДекларации = ВыборкаНалог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"СтатьяНалоговойДекларации");
			Пока ВыборкаСтатьяНалоговойДекларации.Следующий() Цикл
				
				НеЗакрытыйНалог = ВыборкаСтатьяНалоговойДекларации.НеЗакрытыйНалог;
				
				// находим есть ли перепдоплата
				Отбор.ПериодВзаиморасчетов = ВыборкаСтатьяНалоговойДекларации.ПериодВзаиморасчетов;
				Отбор.Налог = ВыборкаСтатьяНалоговойДекларации.Налог;
				Отбор.СтатьяНалоговойДекларации = ВыборкаСтатьяНалоговойДекларации.СтатьяНалоговойДекларации;
				
				СтрокаОстатков = Неопределено;
				Строки = тбОплаты.НайтиСтроки(Отбор);
				Если Строки.Количество() > 0 Тогда
					СтрокаОстатков = Строки[0];
				КонецЕсли;
				
				Выборка = ВыборкаСтатьяНалоговойДекларации.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					
					Если ВидВзносов = "Взносы" Тогда
						Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ВзносыФОТ Тогда
							Продолжить;
						КонецЕсли;
					ИначеЕсли ВидВзносов = "ВзносыФОТ" Тогда
						Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Взносы Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Взносы Тогда
						ТЧ = Взносы;
						ЭтоВзносы = Истина;
					Иначе
						ТЧ = ВзносыФОТ;
						ЭтоВзносы = Ложь;
					КонецЕсли;
					
					Если	Выборка.База < 0 ИЛИ Выборка.БазаВзноса < 0 ИЛИ Выборка.Результат < 0  Тогда
						// Первое движение закрывает проблемный перриод 
						// Внимание! в запросе это отрицательные суммы, потому первое движение всегда "+" второе "-"
						
						СтрокаТЧ = ТЧ.Добавить();
						СтрокаТЧ.ПериодВзаиморасчетов		= Выборка.ПериодВзаиморасчетов;
						СтрокаТЧ.Налог						= Выборка.Налог;
						СтрокаТЧ.СтатьяНалоговойДекларации	= Выборка.СтатьяНалоговойДекларации;
						СтрокаТЧ.База		= - Выборка.База;
						СтрокаТЧ.БазаВзноса	= - Выборка.БазаВзноса;
						СтрокаТЧ.Результат	= - Выборка.Результат;
						
						// Второе движение перебрасывает проблемную сумму на  период регистрации
						СтрокаТЧ = ТЧ.Добавить();
						СтрокаТЧ.ПериодВзаиморасчетов		= тПериодРегистрации;
						СтрокаТЧ.Налог						= Выборка.Налог;
						СтрокаТЧ.СтатьяНалоговойДекларации	= Выборка.СтатьяНалоговойДекларации;
						СтрокаТЧ.База		= Выборка.База;
						СтрокаТЧ.БазаВзноса	= Выборка.БазаВзноса;
						СтрокаТЧ.Результат	= Выборка.Результат;
					ИначеЕсли СтрокаОстатков <> Неопределено Тогда
						
						Если НеЗакрытыйНалог <= СтрокаОстатков.НеподтвержденнаяСумма Тогда
							
							СтрокаОстатков.ЭтоВзносы = ЭтоВзносы;
							СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + Выборка.Результат;
							
							// Закрываем на полную сумму, а хвост перекинем на следующий период взаиморасчетов
							СтрокаТЧ = ТЧ.Добавить();
							СтрокаТЧ.ПериодВзаиморасчетов		= тПериодРегистрации;
							СтрокаТЧ.Налог						= Выборка.Налог;
							СтрокаТЧ.СтатьяНалоговойДекларации	= Выборка.СтатьяНалоговойДекларации;
							СтрокаТЧ.База		= Выборка.База;
							СтрокаТЧ.БазаВзноса	= Выборка.БазаВзноса;
							СтрокаТЧ.Результат	= Выборка.Результат;
							
						ИначеЕсли СтрокаОстатков.НеподтвержденнаяСумма <> 0 Тогда
							
							СтрокаОстатков.ЭтоВзносы = ЭтоВзносы;
							// придется сделать пропорцию, если останется копейка бросим на того, на ком вылезла
							Коэф = СтрокаОстатков.НеподтвержденнаяСумма / НеЗакрытыйНалог;
							тРезультат = Окр(Коэф*Выборка.Результат,2);
							СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + тРезультат;
							Копейка = 0;
							Если СтрокаОстатков.РаспределенныйНалог - тРезультат = 0.01 Тогда
								// копейка вылезла
								Копейка = 0.01;
								СтрокаОстатков.РаспределенныйНалог = СтрокаОстатков.РаспределенныйНалог + Копейка;
							КонецЕсли;
							
							СтрокаТЧ = ТЧ.Добавить();
							СтрокаТЧ.ПериодВзаиморасчетов		= тПериодРегистрации;
							СтрокаТЧ.Налог						= Выборка.Налог;
							СтрокаТЧ.СтатьяНалоговойДекларации	= Выборка.СтатьяНалоговойДекларации;
							СтрокаТЧ.База		= Коэф*Выборка.База;
							СтрокаТЧ.БазаВзноса	= Коэф*Выборка.БазаВзноса;
							СтрокаТЧ.Результат	= тРезультат + Копейка;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаОстатков Из тбОплаты Цикл
		
		Если СтрокаОстатков.РаспределенныйНалог > 0 Тогда
			
			Если СтрокаОстатков.ЭтоВзносы Тогда
				ТЧ = Взносы;
			Иначе
				ТЧ = ВзносыФОТ;
			КонецЕсли;
			
			СтрокаТЧ = ТЧ.Добавить();
			СтрокаТЧ.ПериодВзаиморасчетов		= СтрокаОстатков.ПериодВзаиморасчетов;
			СтрокаТЧ.Налог						= СтрокаОстатков.Налог;
			СтрокаТЧ.СтатьяНалоговойДекларации	= СтрокаОстатков.СтатьяНалоговойДекларации;
			СтрокаТЧ.НеподтвержденнаяСумма		= - СтрокаОстатков.НеподтвержденнаяСумма;
			
			Если СтрокаОстатков.НеподтвержденнаяСумма - СтрокаОстатков.РаспределенныйНалог <> 0 Тогда
				СтрокаТЧ = ТЧ.Добавить();
				СтрокаТЧ.ПериодВзаиморасчетов		= тПериодРегистрации;
				СтрокаТЧ.Налог						= СтрокаОстатков.Налог;
				СтрокаТЧ.СтатьяНалоговойДекларации	= СтрокаОстатков.СтатьяНалоговойДекларации;
				СтрокаТЧ.НеподтвержденнаяСумма		= СтрокаОстатков.НеподтвержденнаяСумма - СтрокаОстатков.РаспределенныйНалог;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение_ЗакрытиеПериода()

Процедура	АвтозаполнениеНДФЛКонтрагентам() 
	
	// Заполнение ТЧ НДФЛ
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("парамДата",	Дата);
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамПодразделениеОрганизации",ПодразделениеОрганизации);
	
	ТекстЗапроса = "
	|		ВЫБРАТЬ
	|			Основной.Сотрудник			КАК Сотрудник,
	|			Основной.ПериодВзаиморасчетов	КАК ПериодВзаиморасчетов,
	|			Основной.ДоходНДФЛ			КАК ДоходНДФЛ,
	|			Основной.НалогОстаток		КАК Налог,
	|			Основной.ДоходОстаток		КАК Доход
	|		ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ.Остатки( &парамДата, Организация = &парамОрганизация
	|				И ПериодВзаиморасчетов = &ПериодРегистрации
	|    		) КАК Основной
	|		ГДЕ	(Основной.НалогОстаток > 0 ИЛИ Основной.ДоходОстаток > 0)    // только положительные остатки
	|		И	Основной.Сотрудник ССЫЛКА Справочник.Контрагенты
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаРаботники = НДФЛ.Добавить();
		
		СтрокаРаботники.Сотрудник		= Выборка.Сотрудник;
		СтрокаРаботники.ДоходНДФЛ		= Выборка.ДоходНДФЛ;
		СтрокаРаботники.ПериодВзаиморасчетов	= Выборка.ПериодВзаиморасчетов;
		
		СтрокаРаботники.Налог			= Выборка.Налог;
		СтрокаРаботники.Доход			= Выборка.Доход;
		
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение_ЗакрытиеПериода()

Функция ПараметрыВыплатыСотруднику(Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РаботникиОрганизацийСрезПоследних.Сотрудник,
	               |	ПараметрыВыплатыЗПРаботниковСрезПоследних.СпособВыплаты,
	               |	ПараметрыВыплатыЗПРаботниковСрезПоследних.Банк,
	               |	ПараметрыВыплатыЗПРаботниковСрезПоследних.НомерКарточки,
				   |	ПараметрыВыплатыЗПРаботниковСрезПоследних.IBAN
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, Организация = &Организация и Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыВыплатыЗПРаботников.СрезПоследних(&Дата, Организация = &Организация и Сотрудник = &Сотрудник) КАК ПараметрыВыплатыЗПРаботниковСрезПоследних
	               |		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = ПараметрыВыплатыЗПРаботниковСрезПоследних.Сотрудник
	               |";
		
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Выборка.Следующий();
			Возврат Выборка;
		КонецЕсли;	
	
КонецФункции	



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция СформироватьЗапросПоШапке() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Дата						КАК Дата, 
	|	Организация					КАК Организация, 
	|	ПериодРегистрации			КАК ПериодРегистрации, 
	|	ПодразделениеОрганизации	КАК ПодразделениеОрганизации, 
	|	ВидВыплаты					КАК ВидВыплаты, 
	| 	Ссылка						КАК Ссылка
	| 
	|ИЗ	Документ.ЗарплатаКВыплатеОрганизаций
	| 
	|ГДЕ Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоНачисления( Сотрудники )

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
 	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);

	Если ВидВыплаты = Справочники.ВидыВыплат.Отпуск
		 ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Больничные 
		 ИЛИ (НЕ ВидВыплаты.Предопределенный И ВидВыплаты.РасчитыватьВзносы И НЕ ВидВыплаты.РасчетОтОбратного) Тогда
		 
		Запрос.Текст =
		"ВЫБРАТЬ
		// Свойства
		|	ИСТИНА	КАК Авторасчет,
		|	СтрокиНачисления.НомерСтроки				КАК НомерСтроки,
		|	СтрокиНачисления.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
		|	НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ)	КАК ПериодДействияНачало,
		|	КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ)	КАК ПериодДействияКонец,
		|	НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ)	КАК БазовыйПериодНачало,
		|	КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ)	КАК БазовыйПериодКонец,
		|	СтрокиНачисления.ВидРасчета КАК ВидРасчета,
		|	ЛОЖЬ КАК Сторно,
		|
		// Измерения
		|	СтрокиНачисления.Ссылка.Организация	КАК Организация,
		|	СтрокиНачисления.Сотрудник			КАК Сотрудник,
		|	СтрокиНачисления.Сотрудник			КАК Назначение,
		|
		// Ресурсы
		|	СтрокиНачисления.СуммаГрязными КАК Результат
		|
		// Реквизиты  - нет
		|
		// Специализированные параметры для регистра Взаиморасчеты с работников организации и др.
		|ИЗ Документ.ЗарплатаКВыплатеОрганизаций.ПараметрыОплаты КАК СтрокиНачисления
		|
		|ГДЕ		СтрокиНачисления.Ссылка = &ДокументСсылка
		|   	И	СтрокиНачисления.Сотрудник В (&парамСотрудники)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|";
		 
		 
	Иначе	 
		Запрос.Текст =
		"ВЫБРАТЬ
		// Свойства
		|	ИСТИНА	КАК Авторасчет,
		|	СтрокиНачисления.НомерСтроки				КАК НомерСтроки,
		|	СтрокиНачисления.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
		|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК ПериодДействияНачало,
		|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК ПериодДействияКонец,
		|	СтрокиНачисления.Ссылка.ПериодРегистрации						КАК БазовыйПериодНачало,
		|	КОНЕЦПЕРИОДА(СтрокиНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК БазовыйПериодКонец,
		|	ВЫБОР
		|    КОГДА СтрокиНачисления.Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
		|    ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДоговорПодряда)
		|	 ИНАЧЕ ЕстьNULL(ПлановыеНачисления.ВидРасчета,ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням)) 
		|	КОНЕЦ КАК ВидРасчета,
		|	ЛОЖЬ КАК Сторно,
		|
		// Измерения
		|	СтрокиНачисления.Ссылка.Организация	КАК Организация,
		|	СтрокиНачисления.Сотрудник			КАК Сотрудник,
		|	СтрокиНачисления.Сотрудник			КАК Назначение,
		|
		// Ресурсы
		|	СтрокиНачисления.СуммаГрязными КАК Результат
		|
		// Реквизиты  - нет
		|
		// Специализированные параметры для регистра Взаиморасчеты с работников организации и др.
		|ИЗ Документ.ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК СтрокиНачисления
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&парамПериодРегистрации) КАК ПлановыеНачисления
		|ПО		ПлановыеНачисления.Сотрудник = СтрокиНачисления.Сотрудник
		|	И	ПлановыеНачисления.ВидРасчетаИзмерение <> ПлановыеНачисления.ВидРасчета
		|
		|ГДЕ		СтрокиНачисления.Ссылка = &ДокументСсылка
		|   	И	СтрокиНачисления.Сотрудник В (&парамСотрудники)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|";

	КонецЕсли;	
		
	Возврат Запрос.Выполнить();

	
КонецФункции // СформироватьЗапросПоНачисления()

// По ТЧ ПараметрыОплаты
Функция СформироватьЗапросПоВзатморасчеты()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	// Свойства
	|	Основной.Ссылка.ПериодРегистрации	КАК Период,
	|	Основной.ПериодВзаиморасчетов		КАК ПериодВзаиморасчетов,
	|
	// Измерения
	|	Основной.Ссылка.Организация	КАК Организация,
	|	Основной.Сотрудник			КАК Сотрудник,
	|	Основной.СчетУчета			КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.ПереносОстатковНаСледующийМесяц)	КАК КодОперации,
	|
	// Ресурсы
	|	Основной.Сумма КАК СуммаВзаиморасчетов
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".ПараметрыОплаты КАК Основной
	|
	|ГДЕ		Основной.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

Функция СформироватьЗапросПоРаботникиОрганизации()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Основной.НомерСтроки,
	|	Основной.Сотрудник,
	|	Основной.Сумма,
	|	Основной.СуммаОкругления,
	|	Основной.ВыплаченностьЗарплаты,
	|	Основной.СпособВыплаты,
	|	Основной.Банк,
	|	Основной.НомерКарточки,
	|	Основной.IBAN
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".РаботникиОрганизации КАК Основной
	|ГДЕ		Основной.Ссылка = &ДокументСсылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

Функция СформироватьЗапросПоПараметрыОплаты()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Основной.НомерСтроки,
	|	Основной.Сотрудник,
	|	Основной.ПериодВзаиморасчетов,
	|	Основной.СчетУчета,
	|	Основной.СуммаОкругления,
	|	Основной.Ведомость
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".ПараметрыОплаты КАК Основной
	|ГДЕ		Основной.Ссылка = &ДокументСсылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоПараметрыОплаты()

Функция СформироватьЗапросПоВзатморасчетыДепоненты()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Основной.НомерСтроки	КАК НомерСтроки,
	|	Основной.Ссылка.ПериодРегистрации	КАК Период,
	|	Основной.ПериодВзаиморасчетов		КАК ПериодВзаиморасчетов,
	|	Основной.Ссылка.Организация	КАК Организация,
	|	Основной.Сотрудник			КАК Сотрудник,
	|	Основной.СчетУчета			КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата)	КАК КодОперации,
	|	Основной.Сумма КАК СуммаВзаиморасчетов
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".ПараметрыОплаты КАК Основной
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ."+Ссылка.Метаданные().Имя+".РаботникиОрганизации КАК Работники
	|ПО Работники.Сотрудник = Основной.Сотрудник
	| И Работники.Ссылка = Основной.Ссылка
	|
	|ГДЕ	Основной.Ссылка = &ДокументСсылка
	|	И	Работники.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

Функция СформироватьЗапросПоДепонентам()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Основной.Ссылка.ПериодРегистрации	КАК Период,
	|	Основной.Ссылка.Организация			КАК Организация,
	|	Основной.Сотрудник					КАК Сотрудник,
	|	Основной.Ссылка						КАК Ведомость,
	|
	|	Основной.Сумма+Основной.СуммаОкругления КАК Сумма,
	|	Основной.Сумма+Основной.СуммаОкругления КАК СуммаВзаиморасчетов
	|
	|ИЗ Документ."+Ссылка.Метаданные().Имя+".РаботникиОрганизации КАК Основной
	|
	|ГДЕ	Основной.Ссылка = &ДокументСсылка
	|	И	Основной.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Задепонировано)
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

Функция СформироватьЗапросПоВзносы( ИмяТаблицы = "Взносы" ,Сотрудники = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",				Ссылка);
	УсловиеНаФизлицоТекст="";
	Если Сотрудники <> Неопределено Тогда
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
		УсловиеНаФизлицоТекст = Символы.ПС + " И СтрокиВзносы.Сотрудник В (&парамСотрудники) ";	
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиВзносы.Ссылка.Организация			КАК Организация,
	|	СтрокиВзносы.Ссылка.ПериодРегистрации	КАК ПериодРегистрации,
	|	СтрокиВзносы.Сотрудник,
	|	СтрокиВзносы.ВидРасчета,
	|	СтрокиВзносы.НомерСтроки			КАК НомерСтроки,
	|	СтрокиВзносы.НомерСтроки			КАК НомерСтрокиТЧ,
	|	СтрокиВзносы.ПериодВзаиморасчетов,
	|	СтрокиВзносы.БазовыйПериодНачало	КАК БазовыйПериодНачало,
	|	СтрокиВзносы.БазовыйПериодКонец		КАК БазовыйПериодКонец,
	|	СтрокиВзносы.ДатаНачала				КАК ДатаНачала,
	|	СтрокиВзносы.ДатаОкончания			КАК ДатаОкончания,
	|	СтрокиВзносы.Предел,
	|	СтрокиВзносы.Налог,
	|	СтрокиВзносы.СтатьяНалоговойДекларации,
	|	СтрокиВзносы.Ставка,
	|	СтрокиВзносы.НомерПорога,
	|	СтрокиВзносы.База,
	|	СтрокиВзносы.БазаВзноса,
	|	СтрокиВзносы.Результат,
	|	СтрокиВзносы.НеподтвержденнаяСумма,
	|	СтрокиВзносы.Сторно,
	|	СтрокиВзносы.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ИСТИНА КАК Авторасчет
	|ИЗ
	|	Документ."+Ссылка.Метаданные().Имя+"."+ИмяТаблицы+" КАК СтрокиВзносы
	|ГДЕ
	|	СтрокиВзносы.Ссылка = &ДокументСсылка " + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВзносы()

Функция СформироватьЗапросПоНДФЛ(Сотрудники = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Если НЕ (Сотрудники = Неопределено) Тогда
		Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
		УсловиеНаФизлицоТекст = " И СтрокиНДФЛ.Сотрудник В (&парамСотрудники) ";	
	Иначе
		УсловиеНаФизлицоТекст="";
	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтрокиНДФЛ.Ссылка.Организация КАК Организация,
	|	КОНЕЦПЕРИОДА(СтрокиНДФЛ.Ссылка.ПериодРегистрации, МЕСЯЦ)	КАК Период,
	|	СтрокиНДФЛ.НомерСтроки,
	|	СтрокиНДФЛ.Сотрудник,
	|	СтрокиНДФЛ.ПериодВзаиморасчетов,
	|	СтрокиНДФЛ.ВидСтавки,
	|	СтрокиНДФЛ.УвеличеннаяСтавка,
	|	СтрокиНДФЛ.ДоходНДФЛ,
	|	СтрокиНДФЛ.НалоговыйПериод,
	|	СтрокиНДФЛ.Льгота,
	|	СтрокиНДФЛ.НеподтвержденнаяСумма,
	|	СтрокиНДФЛ.Налог,
	|	СтрокиНДФЛ.Доход,
	|	СтрокиНДФЛ.КоличествоЛьгот,
	|	ИСТИНА КАК Авторасчет
	|ИЗ
	|	Документ."+Ссылка.Метаданные().Имя+".НДФЛ КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка" + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НалоговыйПериод";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНДФЛ()


Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, по которой начисляется зарплата!", Отказ, Заголовок);
	КонецЕсли;
	//// соответствие периодов документа и перерассчитываемого документа
	//Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
	//	и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	//КонецЕсли;
	//// соответствие организаций документа и перерассчитываемого документа
	//Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
	//	и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	//КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
	КонецЕсли;
	

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Базовыйпериодначало) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода начисления!", Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода начисления!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

Процедура ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// СпособВыплаты
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СпособВыплаты) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не определен способ выплаты!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
		
		// Выплаченность зарплаты
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВыплаченностьЗарплаты) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не определена выплаченность зарплаты!", Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
		
		// Банк
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Банк) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан банк!", Отказ, Заголовок);
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникиОрганизации()

Процедура ПроверитьЗаполнениеСтрокиПараметрыОплаты(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Период взаиморасчетов
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодВзаиморасчетов) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнен период взаиморасчетов!", Отказ, Заголовок);
	КонецЕсли;

	// Счет учета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетУчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнен счет учета!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиПараметрыОплаты()

Процедура ПроверитьЗаполнениеСтрокиПараметрыОплатыДепоненты(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Ведомость
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Ведомость) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнена ведомость, по которой происходит погашение депонента!", Отказ, Заголовок);
	КонецЕсли;

	// Счет учета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетУчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнен счет учета!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиПараметрыОплаты()

Процедура ПроверитьЗаполнениеСтрокиВзносы(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")
	Если ВидВыплаты <> Справочники.ВидыВыплат.Аванс И ВидВыплаты <> Справочники.ВидыВыплат.АвансПредварительныйРасчет И ВидВыплаты <> Справочники.ВидыВыплат.Отпуск И ВидВыплаты <> Справочники.ВидыВыплат.Больничные И ВидВыплаты.Предопределенный Тогда
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Взносы"": ";
	
		Если ВидВыплаты <> Справочники.ВидыВыплат.ЗакрытиеПериода Тогда
			
			// Сотрудник
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
			КонецЕсли;
			
			// Период взаиморасчетов
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодВзаиморасчетов) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнен период взаиморасчетов!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
								
		// Налог
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Налог) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан вид взноса!", Отказ, Заголовок);
		КонецЕсли;

		// Статья налоговой декларации
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СтатьяНалоговойДекларации) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задана статья налоговой декларации!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиВзносы()

Процедура ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")
	Если ВидВыплаты <> Справочники.ВидыВыплат.Аванс 
		И ВидВыплаты <> Справочники.ВидыВыплат.АвансПредварительныйРасчет
		И ВидВыплаты <> Справочники.ВидыВыплат.Отпуск 
		И ВидВыплаты <> Справочники.ВидыВыплат.Больничные 
		И ВидВыплаты <> Справочники.ВидыВыплат.ЗакрытиеПериода  
		И ВидВыплаты.Предопределенный Тогда
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""НДФЛ"": ";
	
		// Сотрудник
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
		КонецЕсли;

		// Период взаиморасчетов
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодВзаиморасчетов) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан период взаиморасчетов!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНДФЛ()


Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);

КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

Процедура ДобавитьСтрокуВзносы(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	
КонецПроцедуры // ДобавитьСтрокуДоговора

Процедура ДобавитьСтрокуДепоненты(ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
КонецПроцедуры // ДобавитьСтрокуДоговора

Процедура ДобавитьСтрокуНДФЛ(ВыборкаПоСтрокамДокумента, НаборЗаписей)

	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	Движение.Период			= ?(НачалоМесяца(Дата)=ПериодРегистрации, Дата, НачалоДня(КонецМесяца(ПериодРегистрации)) );
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛ

Процедура ДобавитьСтрокуНДФЛБезНалога(ВыборкаПоСтрокамДокумента, НаборЗаписей)

	//Если нет налога (уплачен ранее) доод по регистру НДФЛ списываем сразу
	
	Если ВыборкаПоСтрокамДокумента.Налог <> 0 Тогда
		Возврат;
	КонецЕсли;	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	Движение.Период			= Дата;
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛ


Процедура ДобавитьСтрокуВзаиморасчетыСРаботникамиОрганизаций(ВыборкаПоСтрокамДокумента)
	
	// ВзаиморасчетыСРаботникамиОрганизаций
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	Движение.Период			= ?(НачалоМесяца(Дата)=ПериодРегистрации, Дата, НачалоДня(КонецМесяца(ПериодРегистрации)) );
	Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

Процедура ДобавитьСтрокуСведенияОВыплатах(ВыборкаПоСтрокамДокумента)
	
	// ВзаиморасчетыСРаботникамиОрганизаций
	Движение = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента);
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

Процедура ДобавитьСтрокуВзаиморасчетыВзносы(ВыборкаПоСтрокамДокумента, НаборЗаписей)

	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);
	Движение.Период			= ?(НачалоМесяца(Дата)=ПериодРегистрации, Дата, НачалоДня(КонецМесяца(ПериодРегистрации)) );
	Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
	
КонецПроцедуры // ДобавитьСтрокуВзаиморасчетыПоВзносамВФонды

//ИЗМЕНЕНО Верескул Игорь(Начало 27.10.2017
Процедура ПроверитьЗадолженностиПоДругимПодразделениям()  Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
                   |    ВзаиморасчетыСРаботникамиОрганизацийОстатки.Сотрудник.Физлицо КАК Физлицо,
                   |    ВзаиморасчетыСРаботникамиОрганизацийОстатки.Сотрудник,
                   |    ВзаиморасчетыСРаботникамиОрганизацийОстатки.СчетУчета,
                   |    ВзаиморасчетыСРаботникамиОрганизацийОстатки.СуммаВзаиморасчетовОстаток КАК Сумма,
                   |    ВзаиморасчетыСРаботникамиОрганизацийОстатки.Сотрудник.ПодразделениеОрганизации КАК Подразделение
                   |ИЗ
                   |    РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&ТекущаяДата, ) КАК ВзаиморасчетыСРаботникамиОрганизацийОстатки
                   |ГДЕ
                   |    ВзаиморасчетыСРаботникамиОрганизацийОстатки.СуммаВзаиморасчетовОстаток < 0";
    Запрос.УстановитьПараметр("ТекущаяДата", Дата);
    ТЗ = Запрос.Выполнить().Выгрузить();
    
    Для каждого Строка Из РаботникиОрганизации Цикл
        Если Строка.Сумма > 0 Тогда            
            НайденнаяСтрока = ТЗ.Найти(Строка.Сотрудник.Физлицо,"Физлицо"); 
            Если НайденнаяСтрока <> Неопределено  Тогда
                Сообщение = Новый СообщениеПользователю;
                Сообщение.Текст = "Внимание!!! У сотрудника " + Строка.Сотрудник + " есть задолженность по подразделению " + НайденнаяСтрока.Подразделение;
                Сообщение.Сообщить(); 
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;                    
     		
КонецПроцедуры
  
//Окончание)Верескул Игорь

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	//
	//Если ВидВыплаты = Справочники.ВидыВыплат.ЗакрытиеПериода Тогда
	//	ДвиженияПоВзаиморасчетыСРаботниками();
	//	ДвиженияПоВзаиморасчетыПоВзносамВФонды();
	//	ДвиженияПоВзаиморасчетыПоНДФЛ();
	//КонецЕсли;
	
	мДатаНачалаРаботы = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ДатаНачалаРаботы;
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
 		мСотрудники = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");

		//////////////////////////////////////////////////////////////////////
		// Проверки правильности заполнения таблиц
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если	ВидВыплаты = Справочники.ВидыВыплат.Очередная 
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.ПогашениеДолгов
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Дивиденды 
		Тогда
			
			////////////////////////////////////////////////////////////////////////
			// РаботникиОрганизации
			Выборка = СформироватьЗапросПоРаботникиОрганизации().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиРаботникиОрганизации(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////
			// ПараметрыОплаты
			Выборка = СформироватьЗапросПоПараметрыОплаты().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиПараметрыОплаты(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////
			// Исчисленный НДФЛ
			Выборка = СформироватьЗапросПоНДФЛ(мСотрудники ).Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиНДФЛ(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
			
			
		ИначеЕсли	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяВзносы 
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолговВзносы
		Тогда
			
			////////////////////////////////////////////////////////////////////////
			// Взносы
			Выборка = СформироватьЗапросПоВзносы(,мСотрудники).Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиВзносы(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////
			// Взносы ФОТ
			Выборка = СформироватьЗапросПоВзносы("ВзносыФОТ",мСотрудники).Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиВзносы(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
			
			
		ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Аванс
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет	
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Отпуск
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Больничные
		ИЛИ	  Не ВидВыплаты.Предопределенный 
		Тогда
			
			////////////////////////////////////////////////////////////////////////
			// РаботникиОрганизации
			Выборка = СформироватьЗапросПоРаботникиОрганизации().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиРаботникиОрганизации(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////
			// ПараметрыОплаты
			Выборка = СформироватьЗапросПоПараметрыОплаты().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиПараметрыОплаты(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////
			// Взносы
			Выборка = СформироватьЗапросПоВзносы(,мСотрудники).Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиВзносы(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////
			// Взносы ФОТ
			Выборка = СформироватьЗапросПоВзносы("ВзносыФОТ",мСотрудники).Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиВзносы(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////
			// Исчисленный НДФЛ
			Выборка = СформироватьЗапросПоНДФЛ(мСотрудники ).Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиНДФЛ(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
			
			
		ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Депоненты Тогда
			
			////////////////////////////////////////////////////////////////////////
			// РаботникиОрганизации
			Выборка = СформироватьЗапросПоРаботникиОрганизации().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиРаботникиОрганизации(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////
			// ПараметрыОплаты
			Выборка = СформироватьЗапросПоПараметрыОплаты().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиПараметрыОплатыДепоненты(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
		ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.ЗакрытиеПериода Тогда
			
			////////////////////////////////////////////////////////////////////////
			// ПараметрыОплаты
			Выборка = СформироватьЗапросПоПараметрыОплаты().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиПараметрыОплаты(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////
			// Взносы
			Выборка = СформироватьЗапросПоВзносы("Взносы").Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиВзносы(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////
			// Взносы ФОТ
			Выборка = СформироватьЗапросПоВзносы("ВзносыФОТ").Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиВзносы(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////
			// Исчисленный НДФЛ
			Выборка = СформироватьЗапросПоНДФЛ( ).Выбрать();
			Пока Выборка.Следующий() Цикл 
				ПроверитьЗаполнениеСтрокиНДФЛ(Выборка, Отказ, Заголовок);
			КонецЦикла;
			
		КонецЕсли; 
		
		
		
		//////////////////////////////////////////////////////////////////////
		// Проводки, если нужны
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если	ВидВыплаты = Справочники.ВидыВыплат.Очередная 
		ИЛИ	ВидВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.ПогашениеДолгов
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Дивиденды 
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Аванс
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет	
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Отпуск
		ИЛИ ВидВыплаты = Справочники.ВидыВыплат.Больничные
		ИЛИ	  Не ВидВыплаты.Предопределенный 
		
		Тогда
			
			// НДФЛ без налога
			Выборка = СформироватьЗапросПоНДФЛ(мСотрудники ).Выбрать();
			Пока Выборка.Следующий() Цикл 
				ДобавитьСтрокуНДФЛБезНалога(Выборка, Движения.ВзаиморасчетыПоНДФЛ);
			КонецЦикла;
			
			
		КонецЕсли;
		
		Если ВидВыплаты = Справочники.ВидыВыплат.ЗакрытиеПериода Тогда
			
			
			////////////////////////////////////////////////////////////////////////
			// Взаиморасчеты
			Выборка = СформироватьЗапросПоВзатморасчеты().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ДобавитьСтрокуВзаиморасчетыСРаботникамиОрганизаций(Выборка);
			КонецЦикла;
			
			
			////////////////////////////////////////////////////////////////////////
			// Взносы
			ВыборкаПоВзносы = СформироватьЗапросПоВзносы("Взносы").Выбрать();
			Пока ВыборкаПоВзносы.Следующий() Цикл 
				ДобавитьСтрокуВзаиморасчетыВзносы(ВыборкаПоВзносы, Движения.ВзаиморасчетыПоВзносамВФонды);
			КонецЦикла;
			
			
			////////////////////////////////////////////////////////////////////////
			// Взносы ФОТ
			ВыборкаПоВзносыФОТ = СформироватьЗапросПоВзносы("ВзносыФОТ").Выбрать();
			Пока ВыборкаПоВзносыФОТ.Следующий() Цикл 
				ДобавитьСтрокуВзаиморасчетыВзносы(ВыборкаПоВзносыФОТ, Движения.ВзаиморасчетыПоВзносамВФонды);
			КонецЦикла;
			
			
			////////////////////////////////////////////////////////////////////////
			// исчисленный НДФЛ
			ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ( ).Выбрать();
			Пока ВыборкаПоНДФЛ.Следующий() Цикл 
				ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, Движения.ВзаиморасчетыПоНДФЛ);
			КонецЦикла;
			
			
	ИначеЕсли ВидВыплаты <> Справочники.ВидыВыплат.Депоненты Тогда
			
			// надо проверить есть ли депоненнты
			ПроводкиБУ = Движения.Хозрасчетный;
			Выборка = СформироватьЗапросПоВзатморасчетыДепоненты().Выбрать();
			
			Если НЕ Отказ Тогда
				
				// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
				СчетКт = Планысчетов.Хозрасчетный.РасчетыПоДепонентам;
				СпособОплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
				ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Задепонировано;
				ПроведениеРасчетов.ВыполнитьДвиженияПоЗарплате( Ссылка, Движения, ПроводкиБУ, СчетКт, СпособОплаты, ВыплаченностьЗарплаты );
				
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
    //ИЗМЕНЕНО Верескул Игорь(Начало 13.05.2019
    СуммаОкругления = РаботникиОрганизации.Итог("СуммаОкругления");
    Если СуммаОкругления < 0 Тогда
      	СуммаВыплаты = РаботникиОрганизации.Итог("Сумма");
    Иначе
        СуммаВыплаты = РаботникиОрганизации.Итог("Сумма") - Макс(-1*СуммаОкругления, СуммаОкругления);        
    КонецЕсли; 
     //Окончание)Верескул Игорь 
	
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(РаботникиОрганизации);
	Если ВидВыплаты = Справочники.ВидыВыплат.НДФЛКонтрагентам Тогда
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(НДФЛ);
	КонецЕсли; 
	ПроцедурыУправленияПерсоналом.ЗаполнитьФизЛицоПоТЧ(РаботникиОрганизации);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтражениеВзаиморасчетовСКонтрагентамиВ1ДФ") Тогда
		
		ДокументОснование = Основание;
		Организация = Основание.Организация;
		ВидВыплаты = Справочники.ВидыВыплат.НДФЛКонтрагентам;
		Для каждого СтрокаНДФЛ Из Основание.НДФЛ Цикл
			Если СтрокаНДФЛ.Налог = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = НДФЛ.Добавить();
			НоваяСтрока.Сотрудник = СтрокаНДФЛ.Контрагент;
			НоваяСтрока.ПериодВзаиморасчетов = Основание.ПериодРегистрации;
			НоваяСтрока.ДоходНДФЛ = СтрокаНДФЛ.ВидДохода;
			НоваяСтрока.ВидСтавки = Перечисления.ВидыСтавокНДФЛ.Основная;
			НоваяСтрока.Доход = СтрокаНДФЛ.Доход;
			НоваяСтрока.Налог = СтрокаНДФЛ.Налог;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда 	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СостоянияСогласованияЗаявокСрезПоследних.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияСогласованияЗаявок.СрезПоследних КАК СостоянияСогласованияЗаявокСрезПоследних
		|ГДЕ
		|	СостоянияСогласованияЗаявокСрезПоследних.Заявка = &Заявка";
		Запрос.УстановитьПараметр("Заявка", Основание.Ссылка);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Состояние = Результат.Состояние;
		Иначе
			Возврат;
		КонецЕсли; 
		Если Состояние <> Перечисления.СостоянияОбъектов.Утвержден Тогда
			Сообщить("Данная заявка не утверждена!!!");
			Возврат;
		КонецЕсли;
		Запрос.Текст =   "ВЫБРАТЬ
		                |	РаботникиОрганизацийСрезПоследних.Сотрудник
		                |ИЗ
		                |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		                |			,
		                |			Сотрудник.Физлицо = &Физлицо
		                |				И Сотрудник.Актуальность = ИСТИНА) КАК РаботникиОрганизацийСрезПоследних";
						
		Запрос.УстановитьПараметр("Физлицо", Основание.Получатель);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ЭтотДокументСотрудник = Результат.Сотрудник;
		Иначе
			ЭтотДокументСотрудник = Неопределено;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Сотрудник по получателю не найден";
			Сообщение.Сообщить(); 
		КонецЕсли; 

		ДокументОснование = Основание;
		Организация = Основание.Организация;
		ПериодРегистрации = НачалоМесяца(Основание.ДатаРасхода);
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Комментарий = Основание.Комментарий;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
		               |ИЗ
		               |	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
		               |ГДЕ
		               |	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение = &Подразделение
		               |	И СоответствиеПодразделенийИПодразделенийОрганизаций.Организация = &Организация";
		Запрос.УстановитьПараметр("Подразделение", Основание.ЦФО);
		Запрос.УстановитьПараметр("Организация", Основание.Организация);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ПодразделениеОрганизации = Результат.ПодразделениеОрганизации;	
		КонецЕсли; 
		СуммаВыплаты = Основание.СуммаДокумента;
		ВидВыплаты = Справочники.ВидыВыплат.Очередная;
		НоваяСтрокаРаботникиОрганизации = РаботникиОрганизации.Добавить();
		НоваяСтрокаРаботникиОрганизации.Сотрудник = ЭтотДокументСотрудник;
		НоваяСтрокаРаботникиОрганизации.Сумма = Основание.СуммаДокумента;
		НоваяСтрокаРаботникиОрганизации.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
		НоваяСтрокаРаботникиОрганизации.Физлицо = Основание.Получатель;
		НоваяСтрокаРаботникиОрганизации.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.Выплачено;
		
		НоваяСтрокаПараметры = ПараметрыОплаты.Добавить();
		НоваяСтрокаПараметры.Сотрудник = ЭтотДокументСотрудник;
		НоваяСтрокаПараметры.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		НоваяСтрокаПараметры.ПериодВзаиморасчетов = НачалоМесяца(Основание.ДатаРасхода);
		НоваяСтрокаПараметры.Сумма = Основание.СуммаДокумента;
		
		ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
		Объект = Основание.ПоучитьОбъект();
		Объект.ЗарплатнаяВедомость = Ссылка;
		Объект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

мОкруглятьДо = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).ОкруглятьДо;
мПроцентВыплаты = 100;
мПериодС = 0;
мПериодПо = 0;
мБольничныеВид = 0;
мБольничныеФССАвансом = Ложь;
спСотрудников = "";
