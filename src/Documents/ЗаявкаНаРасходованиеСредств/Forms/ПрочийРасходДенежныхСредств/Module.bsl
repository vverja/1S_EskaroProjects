////////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ РЕКВИЗИТЫ

// Процедура устанавливает курс документа
//
&НаСервере
Процедура УстановитьКурсДокумента()

	ДатаКурса = ?(Объект.ДатаРасхода = '00010101', Объект.Дата, Объект.ДатаРасхода);
	СтруктураКурсаВалюта       = МодульВалютногоУчета.ПолучитьКурсВалюты(Объект.ВалютаДокумента, ДатаКурса);
	Объект.КурсДокумента       = СтруктураКурсаВалюта.Курс;
	Объект.КратностьДокумента  = СтруктураКурсаВалюта.Кратность;
	
КонецПроцедуры //

// В процедуре пересчитывается курс валюты документа
//
&НаКлиенте
Процедура ПриИзмененииВалютыДокумента()

	Если Объект.ВалютаДокумента = СтараяВалютаДокумента Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВалютаДокумента.Пустая() Тогда
		Объект.БанковскийСчетКасса = Неопределено;
		Объект.ВключатьВПлатежныйКалендарь = Ложь;
		Объект.КурсДокумента = 0;
		Объект.КратностьДокумента = 0;
	Иначе
		УстановитьКурсДокумента();
	КонецЕсли;	
	
	СтараяВалютаДокумента = Объект.ВалютаДокумента;
	
КонецПроцедуры //

// Процедура устанавливает, что можно выбрать кассу или банковский счет
// В зависимости от формы оплаты
//
&НаКлиенте
Процедура ОграничитьВыборСчетаКассы()

	Если Объект.ФормаОплаты = ВидыДенежныхСредствБезналичные Тогда
		Элементы.БанковскийСчетКасса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
	ИначеЕсли Объект.ФормаОплаты = ВидыДенежныхСредствНаличные Тогда
		Элементы.БанковскийСчетКасса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Кассы");
	Иначе
		Элементы.БанковскийСчетКасса.ОграничениеТипа = Новый ОписаниеТипов;
	КонецЕсли;
	
КонецПроцедуры //

// Определяет доступность валюты документа
// Валюта недоступна, если выбрана касса или банковский счет
//
&НаКлиенте
Процедура УстановитьДоступностьВалютыДокумента()

	Если Объект.БанковскийСчетКасса = Неопределено ИЛИ Объект.БанковскийСчетКасса.Пустая() Тогда
		Элементы.ВалютаДокумента.Доступность = Истина;
	Иначе
		Элементы.ВалютаДокумента.Доступность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры //

// Процедура изменяет валюту документа исходя из выбранной кассы или банковского счета
//
&НаСервере
Процедура ПолучитьВалютуБанковскогоСчетаИлиКассы()

	Объект.ВалютаДокумента = Объект.БанковскийСчетКасса.ВалютаДенежныхСредств;
	
КонецПроцедуры //
 
// Обработчик события "ПриИзменении" поля "Дата"
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРасхода) И НЕ Объект.ВалютаДокумента.Пустая() Тогда
		УстановитьКурсДокумента();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "ДатаРасхода"
//
&НаКлиенте
Процедура ДатаРасходаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаРасхода) И НЕ Объект.ВалютаДокумента.Пустая() Тогда
		УстановитьКурсДокумента();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "ВалютаДокумента"
//
&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ПриИзмененииВалютыДокумента();
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "ФормаОплаты"
//
&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	Объект.БанковскийСчетКасса = Неопределено;
	
	ОграничитьВыборСчетаКассы();
	
	УстановитьДоступностьВалютыДокумента();	
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "БанковскийСчетКасса"
//
&НаКлиенте
Процедура БанковскийСчетКассаПриИзменении(Элемент)
	
	Если НЕ Объект.БанковскийСчетКасса.Пустая() Тогда
		ПолучитьВалютуБанковскогоСчетаИлиКассы();
		ПриИзмененииВалютыДокумента();
	КонецЕсли;
	
	Объект.РазмещениеЗаявки.Очистить();
	
	УстановитьДоступностьВалютыДокумента();	
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "Организация"
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Объект.Номер) Тогда
		ПрефиксацияОбъектовСобытия.ОчиститьНомерОбъекта(Объект.Номер, Объект.Организация);
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЙ РАСХОД ДЕНЕЖНЫХ СРЕДСТВ


////////////////////////////////////////////////////////////////////////////////
// ФОРМА

// Процедура заполняет реквизиты формы по данным первой строки ТЧ "РасшифровкаПлатежа"
//
&НаСервере
Процедура ЗаполнитьДанныеФормы()

	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Получить(0);
	
	СуммаВзаиморасчетов           = СтрокаПлатеж.СуммаВзаиморасчетов;
	СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	
КонецПроцедуры //

// В процедуре инициализируются значения констант формы
// Константы используются при выполнении модуля формы
//
&НаСервере
Процедура УстановитьЗначенияКонстантФормы()
	
	ВидыДенежныхСредствБезналичные = Перечисления.ВидыДенежныхСредств.Безналичные;
	ВидыДенежныхСредствНаличные    = Перечисления.ВидыДенежныхСредств.Наличные;
	
КонецПроцедуры //

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьЗначенияКонстантФормы();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Это существующий документ. 
		// Проверим, что его можно менять.
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(РеквизитФормыВЗначение("Объект"), ЭтаФорма);
		
		//Если используется функционал согласования заявок - проверим можно ли редактировать заявку
		Если НЕ ТолькоПросмотр Тогда
			ТолькоПросмотр = НЕ УправлениеДенежнымиСредствами.РазрешеноИзменениеЗаявки(Объект.Ссылка);
		КонецЕсли;
		
	Иначе
		
		Если Параметры.Свойство("КопируемыйОбъект") Тогда
			// Форма создается программно, при этом выполняется копирование
			ДокументОбъект = РеквизитФормыВЗначение("Объект");
			ЗаполнитьЗначенияСвойств(ДокументОбъект, Параметры.КопируемыйОбъект,, "Номер,Дата,ПометкаУдаления,Проведен,Ответственный,Состояние,АвтоРезервированиеПоЗаявке,АвтоРазмещениеПоЗаявке");
			ДокументОбъект.РасшифровкаПлатежа.Загрузить(Параметры.КопируемыйОбъект.РасшифровкаПлатежа.Выгрузить());
			
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		КонецЕсли;
		
		Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств;
		
	КонецЕсли;
	
	ЗаполнитьДанныеФормы();
	
	СтараяВалютаДокумента = Объект.ВалютаДокумента;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОграничитьВыборСчетаКассы();
	УстановитьДоступностьВалютыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Сформируем расшифровку платежа по данным документа
	Объект.РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа = СуммаВзаиморасчетов;
	СтрокаПлатеж.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	
	Объект.СуммаДокумента = СуммаВзаиморасчетов;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ВидыДоговоров = УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(ТекущийОбъект.ВидОперации);
	
	Для каждого СтрокаПлатеж Из ТекущийОбъект.РасшифровкаПлатежа Цикл
	
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Контрагент) Тогда 
			
			СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
			
		ИначеЕсли ВидыДоговоров.НайтиПоЗначению(ТекущийОбъект.Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора) <> Неопределено Тогда
			
			Если ТекущийОбъект.Организация.Пустая() Тогда
				СтрокаПлатеж.ДоговорКонтрагента = ТекущийОбъект.Контрагент.ОсновнойДоговорКонтрагента;
				ТекущийОбъект.Организация = ТекущийОбъект.Контрагент.ОсновнойДоговорКонтрагента.Организация;
				
			ИначеЕсли ТекущийОбъект.Контрагент.ОсновнойДоговорКонтрагента.Организация.Пустая()
				ИЛИ ТекущийОбъект.Контрагент.ОсновнойДоговорКонтрагента.Организация = ТекущийОбъект.Организация Тогда
				
				СтрокаПлатеж.ДоговорКонтрагента = ТекущийОбъект.Контрагент.ОсновнойДоговорКонтрагента;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СтрокаПлатеж.ДоговорКонтрагента.Пустая() Тогда
			ДатаКурса = ?(ТекущийОбъект.ДатаРасхода = '00010101', ТекущийОбъект.Дата, ТекущийОбъект.ДатаРасхода);
			
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаКурса);
			
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("СуммаВзаиморасчетов");
	
КонецПроцедуры
