////////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ РЕКВИЗИТЫ

// Очищает реквизиты, относящиеся к платежам
//
&НаКлиенте
Процедура ПриОчисткеВалютыДокумента()
	
	Объект.СуммаДокумента = 0;
	Объект.КурсДокумента = 0;
	Объект.КратностьДокумента = 0;
	
	Для Каждого Платеж Из Объект.РасшифровкаПлатежа Цикл
		Платеж.СуммаПлатежа = 0;
	КонецЦикла;
	
	Объект.БанковскийСчетКасса = Неопределено;
	Объект.ВключатьВПлатежныйКалендарь = Ложь;
	
КонецПроцедуры

// Процедура устанавливает, что можно выбрать кассу или банковский счет
// В зависимости от формы оплаты
//
&НаКлиенте
Процедура ОграничитьВыборСчетаКассы()

	Если Объект.ФормаОплаты = ВидыДенежныхСредствБезналичные Тогда
		Элементы.БанковскийСчетКасса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
	ИначеЕсли Объект.ФормаОплаты = ВидыДенежныхСредствНаличные Тогда
		Элементы.БанковскийСчетКасса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Кассы");
	Иначе
		Элементы.БанковскийСчетКасса.ОграничениеТипа = Новый ОписаниеТипов;
	КонецЕсли;
	
КонецПроцедуры //

// Определяет доступность валюты документа
// Валюта недоступна, если выбрана касса или банковский счет
//
&НаКлиенте
Процедура УстановитьДоступностьВалютыДокумента()

	Если Объект.БанковскийСчетКасса = Неопределено ИЛИ Объект.БанковскийСчетКасса.Пустая() Тогда
		Элементы.ВалютаДокумента.Доступность = Истина;
	Иначе
		Элементы.ВалютаДокумента.Доступность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры //

// Процедура изменяет валюту документа исходя из выбранной кассы или банковского счета
//
&НаСервере
Процедура ПолучитьВалютуБанковскогоСчетаИлиКассы()

	Объект.ВалютаДокумента = Объект.БанковскийСчетКасса.ВалютаДенежныхСредств;
	
	ПриИзмененииВалютыДокумента();
	
КонецПроцедуры //

// В процедуре пересчитывается сумма платежа и курс валюты документа
//
&НаСервере
Процедура ПриИзмененииВалютыДокумента()

	Если Объект.ВалютаДокумента = СтараяВалютаДокумента Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуПлатежаТаблица(Истина);
	
	СтараяВалютаДокумента = Объект.ВалютаДокумента;
	
КонецПроцедуры //
 
// Обработчик события "ПриИзменении" поля "Дата"
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРасхода) И НЕ Объект.ВалютаДокумента.Пустая() Тогда
		
		РассчитатьСуммуПлатежаТаблица(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "ДатаРасхода"
//
&НаКлиенте
Процедура ДатаРасходаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаРасхода) И НЕ Объект.ВалютаДокумента.Пустая() Тогда
		
		РассчитатьСуммуПлатежаТаблица(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "ВалютаДокумента"
//
&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если Объект.ВалютаДокумента = СтараяВалютаДокумента Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВалютаДокумента.Пустая() Тогда
		ПриОчисткеВалютыДокумента();
	Иначе
		ПриИзмененииВалютыДокумента();
	КонецЕсли;	
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "ФормаОплаты"
//
&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	Объект.БанковскийСчетКасса = Неопределено;
	
	ОграничитьВыборСчетаКассы();
	
	УстановитьДоступностьВалютыДокумента();	
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "Контрагент"
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Объект.РасшифровкаПлатежа.Очистить();
	СтрокаПлатежа = Объект.РасшифровкаПлатежа.Добавить();
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "БанковскийСчетКасса"
//
&НаКлиенте
Процедура БанковскийСчетКассаПриИзменении(Элемент)
	
	Если НЕ Объект.БанковскийСчетКасса.Пустая() Тогда
		ПолучитьВалютуБанковскогоСчетаИлиКассы();
	КонецЕсли;	
	
	Объект.РазмещениеЗаявки.Очистить();
	
	УстановитьДоступностьВалютыДокумента();	
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "Организация"
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Объект.Номер) Тогда
		ПрефиксацияОбъектовСобытия.ОчиститьНомерОбъекта(Объект.Номер, Объект.Организация);
	КонецЕсли; 
	
	ОграничитьВыборДоговора();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАСЧЕТЫ С КОНТРАГЕНТАМИ

// Процедура ограничивает выбор договора по организации, если она указана
//
&НаКлиенте
Процедура ОграничитьВыборДоговора()

	ПараметрыВыбораДоговора = Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора;
	
	УстановитьНовыеПараметры = Ложь;
	
	НовыйМассивПараметров = Новый Массив;
	Для каждого СвязьПараметровВыбора Из ПараметрыВыбораДоговора Цикл
		НовыйМассивПараметров.Добавить(СвязьПараметровВыбора);
	КонецЦикла;
	
	// Удалим выбор по организации
	ИндексСвязи = 0;
	Для каждого ПараметрВыбора Из НовыйМассивПараметров Цикл
		Если ПараметрВыбора.Имя = "Отбор.Организация" Тогда
			НовыйМассивПараметров.Удалить(ИндексСвязи);
			УстановитьНовыеПараметры = Истина;
			Прервать;
		КонецЕсли;
		ИндексСвязи = ИндексСвязи + 1;
	КонецЦикла;
	
	Если НЕ Объект.Организация.Пустая() Тогда
		// Добавим выбор по организации
		ЕстьПараметрПоОрганизации = Ложь;
		Для каждого ПараметрВыбора Из НовыйМассивПараметров Цикл
			Если ПараметрВыбора.Имя = "Отбор.Организация" Тогда
				ЕстьПараметрПоОрганизации = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьПараметрПоОрганизации Тогда
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.Организация", Объект.Организация);
			НовыйМассивПараметров.Добавить(ПараметрВыбора);
			УстановитьНовыеПараметры = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Если УстановитьНовыеПараметры Тогда
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	КонецЕсли; 
	
КонецПроцедуры //
 
// Функция возвращает данные необходимые для выполнения действий связанных с изменением договора
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеПриИзмененииДоговора(ПараметрыДокумента)

	СтруктураДанных = Новый Структура;
	
	СвойстваДоговора = ОбщегоНазначенияПовтИсп.ПолучитьЗначенияРеквизитовОбъекта(ПараметрыДокумента.ДоговорКонтрагента, Новый Структура("ВалютаВзаиморасчетов,ОсновнаяСтатьяДвиженияДенежныхСредств"), "Справочник.ДоговорыКонтрагентов");
	
	ТекущаяВалютаВзаиморасчетов = СвойстваДоговора.ВалютаВзаиморасчетов;
	
	СтруктураДанных.Вставить("ВалютаВзаиморасчетов", ТекущаяВалютаВзаиморасчетов);
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущаяВалютаВзаиморасчетов, ПараметрыДокумента.Дата);
	
	СтруктураДанных.Вставить("СтруктураКурсаВзаиморасчетов", СтруктураКурсаВзаиморасчетов);
	
	Если ЗначениеЗаполнено(СвойстваДоговора.ОсновнаяСтатьяДвиженияДенежныхСредств) Тогда
		СтруктураДанных.Вставить("СтатьяДвиженияДенежныхСредств", СвойстваДоговора.ОсновнаяСтатьяДвиженияДенежныхСредств);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции //

// Процедура пересчитывает сумму платежа в ТЧ "РасшифровкаПлатежа"
// исходя из суммы взаиморасчетов
//
&НаСервере
Процедура РассчитатьСуммуПлатежаТаблица(УстановитьКурсДокумента = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Если УстановитьКурсДокумента Тогда
		ДатаКурса = ?(ДокументОбъект.ДатаРасхода='00010101', ДокументОбъект.Дата, ДокументОбъект.ДатаРасхода);
		СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДатаКурса);
		ДокументОбъект.КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
		ДокументОбъект.КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	КонецЕсли; 
	
	Для Каждого СтрокаПлатеж Из ДокументОбъект.РасшифровкаПлатежа Цикл
		
		ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		Если ВалютаВзаиморасчетов = ДокументОбъект.ВалютаДокумента Тогда
			
			СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
	
		ИначеЕсли (ДокументОбъект.КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
			СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
												СтрокаПлатеж.СуммаВзаиморасчетов, 
												ВалютаВзаиморасчетов,
												ДокументОбъект.ВалютаДокумента,
												СтрокаПлатеж.КурсВзаиморасчетов,
												ДокументОбъект.КурсДокумента,
												СтрокаПлатеж.КратностьВзаиморасчетов,
												ДокументОбъект.КратностьДокумента);
		Иначе
			СтрокаПлатеж.СуммаПлатежа = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

// Процедура рассчитывает курс взаиморасчетов в строке ТЧ "РасшифровкаПлатежа"
//
&НаКлиенте
Процедура РассчитатьКурсВзаиморасчетов(СтрокаПлатеж)
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов <> 0) И (Объект.КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа
							* Объект.КурсДокумента 
							* СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов
							/ Объект.КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает сумму взаиморасчетов в ТЧ "РасшифровкаПлатежа" 
// исходя из суммы платежа
//
&НаКлиенте
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ВалютаВзаиморасчетов)
	
	Если ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
			
	ИначеЕсли СтрокаПлатеж.КурсВзаиморасчетов <> 0 
		И Объект.КратностьДокумента <> 0
		И СтрокаПлатеж.КурсВзаиморасчетов <> 0 Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
													СтрокаПлатеж.СуммаПлатежа,
													Объект.ВалютаДокумента,
			                                        ВалютаВзаиморасчетов,
			                                        Объект.КурсДокумента, 
													СтрокаПлатеж.КурсВзаиморасчетов,
													Объект.КратностьДокумента, 
													СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры

// Процедура пересчитывает сумму платежа в строке ТЧ "РасшифровкаПлатежа" 
// исходя из суммы взаиморасчетов
//
&НаКлиенте
Процедура РассчитатьСуммуПлатежа(СтрокаПлатеж, ВалютаВзаиморасчетов)
	
	Если ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (Объект.КурсДокумента <> 0) 
		И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0)
		И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		
		СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
										СтрокаПлатеж.СуммаВзаиморасчетов, 
										ВалютаВзаиморасчетов,
										Объект.ВалютаДокумента,
			                            СтрокаПлатеж.КурсВзаиморасчетов,
										Объект.КурсДокумента,
										СтрокаПлатеж.КратностьВзаиморасчетов,
										Объект.КратностьДокумента);
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры

// Процедура устанавливает тип сделки который можно выбрать
// Тип сделки зависит от вида операции и договора
//
&НаКлиенте
Процедура УстановитьПараметрыВыбораСделки()

	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если СтрокаПлатеж.ДоговорКонтрагента.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации <> ВидОперацииОплатаПоставщику
		И Объект.ВидОперации <> ВидОперацииВозвратДенежныхСредствПокупателю Тогда
		Возврат;
	КонецЕсли;
		
	СвойстваДоговора = ОбщегоНазначенияПовтИсп.ПолучитьЗначенияРеквизитовОбъекта(СтрокаПлатеж.ДоговорКонтрагента, Новый Структура("ВедениеВзаиморасчетов"), "Справочник.ДоговорыКонтрагентов");
	
	Если Объект.ВидОперации = ВидОперацииОплатаПоставщику  Тогда
		СтрокаТипаЗаказа = "ЗаказПоставщику";
		ТипДокументаСчет = "СчетНаОплатуПоставщика";
	ИначеЕсли Объект.ВидОперации = ВидОперацииВозвратДенежныхСредствПокупателю Тогда
		СтрокаТипаЗаказа = "ЗаказПокупателя";
		ТипДокументаСчет = "СчетНаОплатуПокупателю";
	КонецЕсли;
	
	Если СвойстваДоговора.ВедениеВзаиморасчетов = ВедениеВзаиморасчетовПоСчетам Тогда
		ТипДокументаСделки = ТипДокументаСчет;
	Иначе
		ТипДокументаСделки = СтрокаТипаЗаказа;
	КонецЕсли; 
	
	Элементы.РасшифровкаПлатежаСделка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка." + ТипДокументаСделки);
	
КонецПроцедуры //

// Процедура изменяет курс взаиморасчетов и заполняет другие поля строки, связанные с договором
//
&НаКлиенте
Процедура ПриИзмененииДоговора(СтрокаПлатеж)
	
	ДанныеОбменаССервером = Новый Структура;
	ДанныеОбменаССервером.Вставить("Дата", Объект.Дата);
	ДанныеОбменаССервером.Вставить("ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента);
	ЗначенияДляЗаполнения = ПолучитьДанныеПриИзмененииДоговора(ДанныеОбменаССервером);
	
	СтрокаПлатеж.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Неопределено; 

	// Надо поменять валюту и курс взаиморасчетов
	СтрокаПлатеж.КурсВзаиморасчетов      = ЗначенияДляЗаполнения.СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = ЗначенияДляЗаполнения.СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЗначенияДляЗаполнения.ВалютаВзаиморасчетов);

	Если ЗначенияДляЗаполнения.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ЗначенияДляЗаполнения.СтатьяДвиженияДенежныхСредств;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "ДоговорКонтрагента" в ТЧ "РасшифровкаПлатежа"
//
&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	УстановитьПараметрыВыбораСделки();
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "СуммаПлатеж" в ТЧ "РасшифровкаПлатежа"
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	РассчитатьКурсВзаиморасчетов(СтрокаПлатеж);
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "СуммаВзаиморасчетов" в ТЧ "РасшифровкаПлатежа"
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СвойстваДоговора = ОбщегоНазначенияПовтИсп.ПолучитьЗначенияРеквизитовОбъекта(СтрокаПлатеж.ДоговорКонтрагента, Новый Структура("ВалютаВзаиморасчетов"), "Справочник.ДоговорыКонтрагентов");
	
	ТекущаяВалютаВзаиморасчетов = СвойстваДоговора.ВалютаВзаиморасчетов;
	
	РассчитатьСуммуПлатежа(СтрокаПлатеж, ТекущаяВалютаВзаиморасчетов);
	
КонецПроцедуры

// Обработчик события "ПередУдалением" ТЧ "РасшифровкаПлатежа"
//
&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриНачалеРедактирования" ТЧ "РасшифровкаПлатежа"
//
&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УстановитьПараметрыВыбораСделки();
	
КонецПроцедуры

// Обработчик события "НачалоВыбора" поля "Сделка" в ТЧ "РасшифровкаПлатежа"
//
&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если СтрокаПлатеж.ДоговорКонтрагента.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ФОРМА

// В процедуре инициализируются значения констант формы
// Константы используются при выполнении модуля формы
//
&НаСервере
Процедура УстановитьЗначенияКонстантФормы()
	
	ВидыДенежныхСредствБезналичные = Перечисления.ВидыДенежныхСредств.Безналичные;
	ВидыДенежныхСредствНаличные    = Перечисления.ВидыДенежныхСредств.Наличные;
	
	ВидОперацииОплатаПоставщику = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
	ВидОперацииВозвратДенежныхСредствПокупателю = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю;
	
	ВедениеВзаиморасчетовПоСчетам = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам;
	
КонецПроцедуры //

// Процедура устанавливает параметры выбора договора в ТЧ "РасшифровкаПлатежа"
// Выбор договора зависит от вида операции
//
&НаСервере
Процедура УстановитьПараметрыВыбораДоговора()
	
	СписокВидовДоговоров = УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	
	МассивПараметровВыбора = Новый Массив;
	
	МассивВидовДоговоров = СписокВидовДоговоров.ВыгрузитьЗначения();
	
	НовыйПараметрВыбора = Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(МассивВидовДоговоров));
	МассивПараметровВыбора.Добавить(НовыйПараметрВыбора);
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры //

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьЗначенияКонстантФормы();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Это существующий документ. 
		// Проверим, что его можно менять.
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(РеквизитФормыВЗначение("Объект"), ЭтаФорма);
		
		//Если используется функционал согласования заявок - проверим можно ли редактировать заявку
		Если НЕ ТолькоПросмотр Тогда
			ТолькоПросмотр = НЕ УправлениеДенежнымиСредствами.РазрешеноИзменениеЗаявки(Объект.Ссылка);
		КонецЕсли;
		
	Иначе
		
		Если Параметры.Свойство("КопируемыйОбъект") Тогда
			// Форма создается программно, при этом выполняется копирование
			ДокументОбъект = РеквизитФормыВЗначение("Объект");
			ЗаполнитьЗначенияСвойств(ДокументОбъект, Параметры.КопируемыйОбъект,, "Номер,Дата,ПометкаУдаления,Проведен,Ответственный,Состояние,АвтоРезервированиеПоЗаявке,АвтоРазмещениеПоЗаявке");
			ДокументОбъект.РасшифровкаПлатежа.Загрузить(Параметры.КопируемыйОбъект.РасшифровкаПлатежа.Выгрузить());
			
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		КонецЕсли;
		
		Если Параметры.ВидОперации.Пустая() Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		Иначе
			Объект.ВидОперации = Параметры.ВидОперации;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами Тогда
		Элементы.РасшифровкаПлатежаСделка.Видимость = Ложь;
	КонецЕсли; 
	
	СтараяВалютаДокумента = Объект.ВалютаДокумента;	
	
	УстановитьПараметрыВыбораДоговора();
	
	// Установим заголовок основной страницы
	ВидОперацииСтрока = Строка(Объект.ВидОперации);
	Элементы.РасчетыСКонтрагентами.Заголовок = ВРег(Лев(ВидОперацииСтрока,1)) + Сред(ВидОперацииСтрока,2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СуммаРасшифровки = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Если СуммаРасшифровки <> Объект.СуммаДокумента Тогда
		
		Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			
			Объект.СуммаДокумента = СуммаРасшифровки;
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОграничитьВыборСчетаКассы();
	ОграничитьВыборДоговора();
	УстановитьДоступностьВалютыДокумента();
	
КонецПроцедуры

