Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем ТабПроверкиОборотов; // Таблица для проверки контролируемых значений

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		// Напечатаем внешную печатную форму
		
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		Если ТабДокумент <> Неопределено Тогда
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		КонецЕсли; 
		
	Иначе
		// Напечатаем встроенную печатную форму
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ЗаявкаНаРасходованиеСредств", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ЗаявкаНаРасходованиеСредств", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПечатьЗаявки","Заявка на расходование средств");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, ИмяРеквизита, ТекстСообщения, НомерСтроки, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ТекстПоля = ОбщегоНазначенияКлиентСервер.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ("РасшифровкаПлатежа", НомерСтроки, ИмяРеквизита);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ТекстПоля,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ)
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Если НЕ Платеж.ДоговорКонтрагента.Пустая()
				И (Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
					ИЛИ Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
					
				ТекстСообщения = НСтр("ru = 'Не заполнена сделка'");
				ПроверитьЗначение(Платеж.Сделка, "Сделка", ТекстСообщения, Платеж.НомерСтроки, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры 

// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказу(ДокументОснование, СтрокаПлатеж)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);

	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		Если Выборка.Сумма < 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.Сумма*(-1);
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
			                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			                            ВалютаДокумента,
			                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказу()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ВзаиморасчетыСПодотчетнымиЛицами".
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетовПодотчетника", ВалютаВзаиморасчетовПодотчетника);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(,
	|	                                                           ФизЛицо = &Получатель
	|	                                                         И РасчетныйДокумент = &РасчетныйДокумент
	|	                                                         И Валюта = &ВалютаВзаиморасчетовПодотчетника)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток < 0
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
									
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом()

Функция ПроверкаКонтролируемыхЗначений(СтруктураДанныхШапки,ТабКонтролируемыхОборотов)
	
	// Получение списка контролирующих сценариев для выбранного периода и измерений бюджетирования
	
	Для Каждого СтрокаПлатеж Из ТабПроверкиОборотов Цикл
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	|	УстановкаОграниченийПоБюджетам.КонтролирующийСценарий КАК КонтролирующийСценарий,
	|	УстановкаОграниченийПоБюджетам.СтатьяОборотов КАК СтатьяОборотов,
	|	УстановкаОграниченийПоБюджетам.ЦФО КАК ЦФО,
	|	УстановкаОграниченийПоБюджетам.Проект КАК Проект,
	|	УстановкаОграниченийПоБюджетам.Контрагент КАК Контрагент,
	|	УстановкаОграниченийПоБюджетам.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.УстановкаОграниченийПоБюджетам КАК УстановкаОграниченийПоБюджетам
	|
	|ГДЕ
	|	УстановкаОграниченийПоБюджетам.Период = &Период И
	|	УстановкаОграниченийПоБюджетам.СтатьяОборотов = &СтатьяОборотов И
	|	УстановкаОграниченийПоБюджетам.Сценарий = &Сценарий И
	|	(УстановкаОграниченийПоБюджетам.ЦФО = &ЦФО ИЛИ УстановкаОграниченийПоБюджетам.ЦФО = &ПустойЦФО) И
	|	(УстановкаОграниченийПоБюджетам.Проект = &Проект ИЛИ УстановкаОграниченийПоБюджетам.Проект = &ПустойПроект) И
	|	(УстановкаОграниченийПоБюджетам.Контрагент = &Контрагент ИЛИ УстановкаОграниченийПоБюджетам.Контрагент = &ПустойКонтрагент) И
	|	(УстановкаОграниченийПоБюджетам.Номенклатура = &Номенклатура ИЛИ УстановкаОграниченийПоБюджетам.Номенклатура = Неопределено) И
	|	УстановкаОграниченийПоБюджетам.ИспользованиеКонтролируемогоЗначения = &ИспользованиеКонтролируемогоЗначения И
	|	УстановкаОграниченийПоБюджетам.ВидКонтролируемогоЗначения = &ВидКонтролируемогоЗначения";
	
	Запрос.УстановитьПараметр("Период",ОбщегоНазначения.ДатаНачалаПериода(ДатаРасхода,СтруктураДанныхШапки.СценарийПериодичность));
	Запрос.УстановитьПараметр("СтатьяОборотов",СтатьяОборотов);
	Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",Перечисления.ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении);
	Запрос.УстановитьПараметр("ВидКонтролируемогоЗначения",Перечисления.ВидыКонтролируемогоЗначенияБюджета.Ограничивающее);
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	
	Запрос.УстановитьПараметр("ЦФО",ЦФО);
	Запрос.УстановитьПараметр("ПустойЦФО",Новый(Тип("СправочникСсылка.Подразделения")));
	
	Запрос.УстановитьПараметр("Проект",СтрокаПлатеж.Проект);
	Запрос.УстановитьПараметр("ПустойПроект",Новый(Тип("СправочникСсылка.Проекты")));
	
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("ПустойКонтрагент",Новый(Тип("СправочникСсылка.Контрагенты")));
	
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	
	ТабРезультата=Запрос.Выполнить().Выгрузить();
	
	Если ТабРезультата.Количество()=0 Тогда
		
		Продолжить;
		
	Иначе
		
		ТабРезультата.Колонки.Добавить("СуммаСценарияИсполнение");
		ТабРезультата.Колонки.Добавить("Период");
		
		Для каждого СтрокаПроверки Из ТабРезультата Цикл
			
			ТекущийСценарий=?(СтрокаПроверки.КонтролирующийСценарий.Пустая(),Сценарий,СтрокаПроверки.КонтролирующийСценарий);
			
			ДатаНачала = ОбщегоНазначения.ДатаНачалаПериода(ДатаРасхода, ТекущийСценарий.Периодичность);
			ДатаКонца  = ОбщегоНазначения.ДатаКонцаПериода (ДатаНачала,  ТекущийСценарий.Периодичность);
			
			СтруктруаКурсаСценария = Бюджетирование.КурсВалютыПоСценарию(Сценарий.Валюта, ДатаНачала,Сценарий);
			КурсСценария      = СтруктруаКурсаСценария.Курс;
			КратностьСценария = СтруктруаКурсаСценария.Кратность;
			
			Если СтрокаПлатеж.СуммаПлатежа>0 ИЛИ ТабПроверкиОборотов.Колонки.Найти("СуммаУпр")=Неопределено Тогда
				
				СуммаСценария=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента, СтруктураДанныхШапки.СценарийВалюта, КурсДокумента, КурсСценария, 
				КратностьДокумента, КратностьСценария);
				
			Иначе
				
				СуммаСценария=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаУпр, , СтруктураДанныхШапки.СценарийВалюта, СтрокаПлатеж.КурсУпрУчета, КурсСценария, 
				СтрокаПлатеж.КратностьУпрУчета, КратностьСценария);
				
			КонецЕсли;
			
			Запрос.Текст="ВЫБРАТЬ
			|	СУММА(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот) КАК СуммаКонтроль,
			|	СУММА(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот) КАК СуммаИсполнение
			|ИЗ
			|	РегистрНакопления.КонтролируемыеЗначенияБюджетов.Обороты(&ДатаНачала, &ДатаНачала, , 
			|					Контрагент = &Контрагент И 
			|					КонтролирующийСценарий=&КонтролирующийСценарий И
			|					Номенклатура=&Номенклатура И 
			|					Проект=&Проект И 
			|					СтатьяОборотов=&СтатьяОборотов И 
			|					Сценарий=&Сценарий И 
			|					ЦФО=&ЦФО И 
			|					ИспользованиеКонтролируемогоЗначения=&ИспользованиеКонтролируемогоЗначения
			|					) КАК КонтролируемыеЗначенияБюджетовОбороты";
			
			
			
			
			Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
			Запрос.УстановитьПараметр("Контрагент",СтрокаПроверки.Контрагент);
			Запрос.УстановитьПараметр("КонтролирующийСценарий",СтрокаПроверки.КонтролирующийСценарий);
			Запрос.УстановитьПараметр("Номенклатура",СтрокаПроверки.Номенклатура);
			Запрос.УстановитьПараметр("Проект",СтрокаПроверки.Проект);
			Запрос.УстановитьПараметр("СтатьяОборотов",СтрокаПроверки.СтатьяОборотов);
			Запрос.УстановитьПараметр("Сценарий",Сценарий);
			Запрос.УстановитьПараметр("ЦФО",СтрокаПроверки.ЦФО);
			Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",Перечисления.ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении);
			
			СуммаКонтроль=0;
			СуммаИсполнение=0;
			
			Результат = Запрос.Выполнить();
			Выборка=Результат.Выбрать();
			Если Выборка.Следующий() И (НЕ Выборка["СуммаКонтроль"]=NULL) И (НЕ Выборка["СуммаИсполнение"]=NULL) Тогда
				СуммаКонтроль=Выборка["СуммаКонтроль"];
				СуммаИсполнение=Выборка["СуммаИсполнение"]+СуммаСценария;
			КонецЕсли;
			
			Если СуммаИсполнение>СуммаКонтроль Тогда
				
				ТекстСообщения="Оборот приведет к превышению контролируемого значения!
				|Контролирующий сценарий: "+ ТекущийСценарий+"
				|Период планирования: "+Формат(ДатаНачала,"ДФ=dd.MM.yyyy")+" - "+Формат(ДатаКонца,"ДФ=dd.MM.yyyy")+"
				|Статья оборотов: "+СтрокаПроверки.СтатьяОборотов;
				
			Если Не СтрокаПроверки.ЦФО.Пустая() Тогда
				
				ТекстСообщения=ТекстСообщения+"
				|ЦФО: "+СтрокаПроверки.ЦФО;
			
			КонецЕсли;
			
			Если Не СтрокаПроверки.Проект.Пустая() Тогда
				
				ТекстСообщения=ТекстСообщения+"
				|Проект: "+СтрокаПроверки.Проект;
				
			КонецЕсли;
			
			Если Не СтрокаПроверки.Контрагент.Пустая() Тогда
				
				ТекстСообщения=ТекстСообщения+"
				|Контрагент: "+СтрокаПроверки.Контрагент;
				
			КонецЕсли;
			
			Если Не СтрокаПроверки.Номенклатура=Неопределено Тогда
				
				ТекстСообщения=ТекстСообщения+"
				|Номенклатура: "+СтрокаПроверки.Номенклатура;
				
			КонецЕсли;

			ТекстСообщения=ТекстСообщения+"
				|Контролируемое значение: "+СуммаКонтроль+" "+Сценарий.Валюта+"
				|Значение с учетом суммы по заявке: "+СуммаИсполнение+" "+Сценарий.Валюта;
				
				Сообщить(ТекстСообщения);
				
				Если НЕ УправлениеДопПравамиПользователей.РазрешеноПревышениеКонтролируемыхЗначенийПоБюджетам() Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаПроверки.СуммаСценарияИсполнение=СуммаСценария;
			СтрокаПроверки.Период=ДатаНачала;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабРезультата,ТабКонтролируемыхОборотов);
	
	КонецЦикла;
	
	Возврат ТабКонтролируемыхОборотов;
	
КонецФункции // ПроверкаКонтролируемыхЗначений()


// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок, СтруктураКурсыВалют)
	
	РасчетыВозврат    = УправлениеДенежнымиСредствами.НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	КоэффициентСторно = ?(РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат, -1, 1);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьРасчетыСКонтрагентами", ЕстьРасчетыСКонтрагентами);
	СтруктураПараметров.Вставить("ЕстьРасчетыПоКредитам", ЕстьРасчетыПоКредитам);
	СтруктураПараметров.Вставить("ВидОперации", ВидОперации);
	СтруктураПараметров.Вставить("ДатаРасхода", ДатаРасхода);
	ТабПроверкиОборотов = Бюджетирование.СформироватьТаблицуДляКонтроля(Ссылка, СтруктураПараметров);
	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		
		НаборДвижений = Движения.КонтролируемыеЗначенияБюджетов;
		ТабКонтролируемыхЗначений=НаборДвижений.ВыгрузитьКолонки();
		
		ТабКонтролируемыхЗначений=ПроверкаКонтролируемыхЗначений(СтруктураДанныхШапки,ТабКонтролируемыхЗначений);
		
		Если ТипЗнч(ТабКонтролируемыхЗначений)=Тип("Булево") И НЕ ТабКонтролируемыхЗначений Тогда
			Сообщить("Превышение контролируемого значения. Проведение отменено!");
			Отказ=Истина;
			Возврат;
		Иначе
			
			Если ТабКонтролируемыхЗначений.Количество()>0 Тогда
				
				// По регистру "КонтролируемыеЗначенияБюджетов"
				ТабКонтролируемыхЗначений.ЗаполнитьЗначения(Сценарий,"Сценарий");
				ТабКонтролируемыхЗначений.ЗаполнитьЗначения(Перечисления.ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении,"ИспользованиеКонтролируемогоЗначения");
				ТабКонтролируемыхЗначений.ЗаполнитьЗначения(Истина,"Активность");
				
				НаборДвижений = Движения.КонтролируемыеЗначенияБюджетов;
				НаборДвижений.мТаблицаДвижений = ТабКонтролируемыхЗначений;
				
				Движения.КонтролируемыеЗначенияБюджетов.ВыполнитьДвижения();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РазмещениеЗаявки.Количество()>0 Тогда
		
		ТабРазмещениеЗаявки=РазмещениеЗаявки.Выгрузить();
		ТабРазмещениеЗаявки.Свернуть("МестоРазмещения","СуммаПлатежа");
		
		НаборРазмещение=Движения.РазмещениеЗаявокНаРасходованиеСредств;
		ТаблицаРазмещение=НаборРазмещение.ВыгрузитьКолонки();
		
		НаборРезерв=Движения.ДенежныеСредстваВРезерве;
		ТаблицаРезерв=НаборРезерв.ВыгрузитьКолонки();

		Для Каждого Строка Из ТабРазмещениеЗаявки Цикл
			
			Если Строка.МестоРазмещения=Неопределено Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(Строка.МестоРазмещения)= Тип("ДокументСсылка.ПланируемоеПоступлениеДенежныхСредств") Тогда
				
				ОстатокКРазмещению=УправлениеДенежнымиСредствами.ПолучитьНеразмещенныйостаток(Строка.МестоРазмещения,КонецДня(ДатаРасхода),Ссылка);
				
				Если ОстатокКРазмещению<Строка.СуммаПлатежа Тогда
					Сообщить(Заголовок+"
					|Размещаемая сумма превышает неразмещенный остаток
					|по "+Строка.МестоРазмещения+".
					|Возможный к использованию остаток: "+Формат(ОстатокКРазмещению,"ЧЦ=15; ЧДЦ=2; ЧН=0")+" "+ВалютаДокумента+"
					|Резервируемая сумма = "+Формат(Строка.СуммаПлатежа,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);
					
					Отказ = Истина;
					Возврат;
					
				КонецЕсли;
				
				СтрокаРазмещение=ТаблицаРазмещение.Добавить();
				СтрокаРазмещение.ДокументПланирования=Строка.МестоРазмещения;
				СтрокаРазмещение.ДокументРезервирования=Ссылка;
				СтрокаРазмещение.Сумма=Строка.СуммаПлатежа;
				
			Иначе
				
				// Проверяем остаток доступных денежных средств
				СвободныйОстаток=УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(Строка.МестоРазмещения,КонецДня(ДатаРасхода),Ссылка);
				Если СвободныйОстаток<Строка.СуммаПлатежа Тогда
					Сообщить(Заголовок+"
					|Резервируемая сумма превышает возможный к использованию остаток денежных средств
					|по "+Строка.МестоРазмещения.Наименование+".
					|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2; ЧН=0")+" "+ВалютаДокумента+"
					|Резервируемая сумма = "+Формат(Строка.СуммаПлатежа,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);
					
					Если НЕ УправлениеДопПравамиПользователей.ПравоРазрешитьПревышениеСвободногоОстаткаДС() Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаРезерв=ТаблицаРезерв.Добавить();
				СтрокаРезерв.БанковскийСчетКасса=Строка.МестоРазмещения;
				СтрокаРезерв.Организация=Организация;
				СтрокаРезерв.ДокументРезервирования=Ссылка;
				СтрокаРезерв.ВидДенежныхСредств=ФормаОплаты;
				СтрокаРезерв.Сумма=Строка.СуммаПлатежа;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборРазмещение.мПериод=КонецДня(ДатаРасхода);
		НаборРазмещение.мТаблицаДвижений=ТаблицаРазмещение;
		Движения.РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьПриход();
		
		НаборРезерв.мПериод=ДатаРасхода;
		НаборРезерв.мТаблицаДвижений=ТаблицаРезерв;
		Движения.ДенежныеСредстваВРезерве.ВыполнитьПриход();
		
	КонецЕсли;
	
	// По регистру "ЗаявкиНаРасходованиеСредств"
	
	НаборДвиженийЗаявки = Движения.ЗаявкиНаРасходованиеСредств;
	ТаблицаДвиженийЗаявки = НаборДвиженийЗаявки.ВыгрузитьКолонки();
	
	// По регистру "РасчетыСКонтрагентами"
	НаборДвиженийКонтрагенты = Движения.РасчетыСКонтрагентами;
	ТаблицаДвиженийКонтрагенты = НаборДвиженийКонтрагенты.ВыгрузитьКолонки();
	
	ВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			ВалютаВзаиморасчетов = ВалютаВзаиморасчетовПодотчетника;
		ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			ВалютаВзаиморасчетов = Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе
			ВалютаВзаиморасчетов = ВалютаДокумента;
		КонецЕсли;
			
		СтруктураКурсВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(
			ВалютаВзаиморасчетов, ?(ДатаРасхода = '00010101', Дата, КонецДня(ДатаРасхода)));
		
		СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			Платеж.СуммаВзаиморасчетов,
			ВалютаВзаиморасчетов, ,
			СтруктураКурсВзаиморасчетов.Курс, СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
			СтруктураКурсВзаиморасчетов.Кратность, СтруктураКурсыВалют.ВалютаУпрУчетаКратность);

		СтрокаДвиженийЗаявки = ТаблицаДвиженийЗаявки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДвиженийЗаявки, Платеж);
		
		СтрокаДвиженийЗаявки.СуммаУпр				= СуммаУпр;
		СтрокаДвиженийЗаявки.Сумма					= Платеж.СуммаПлатежа;
		СтрокаДвиженийЗаявки.ЗаявкаНаРасходование	= Ссылка;
		СтрокаДвиженийЗаявки.Организация			= Организация;
		СтрокаДвиженийЗаявки.Контрагент				= Контрагент;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДвиженийЗаявки.ДокументРасчетовСКонтрагентом) Тогда
			СтрокаДвиженийЗаявки.ДокументРасчетовСКонтрагентом = Ссылка;
		КонецЕсли;
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ВключатьВПлатежныйКалендарь Тогда
			
			СтрокаДвиженийКонтрагенты = ТаблицаДвиженийКонтрагенты.Добавить();
			СтрокаДвиженийКонтрагенты.ДоговорКонтрагента	= Платеж.ДоговорКонтрагента;
			СтрокаДвиженийКонтрагенты.Контрагент  		    = Контрагент;
			СтрокаДвиженийКонтрагенты.Организация  	   		= Организация;

			СтрокаДвиженийКонтрагенты.РасчетыВозврат		= РасчетыВозврат;
			СтрокаДвиженийКонтрагенты.Сделка				= Платеж.Сделка;
			СтрокаДвиженийКонтрагенты.СуммаВзаиморасчетов	= Платеж.СуммаВзаиморасчетов*КоэффициентСторно;
			СтрокаДвиженийКонтрагенты.СуммаУпр				= СуммаУпр*КоэффициентСторно;
			СтрокаДвиженийКонтрагенты.Период				= ?(ДатаРасхода='00010101',Дата,ДатаРасхода);
			СтрокаДвиженийКонтрагенты.ВидДвижения			= ?(КоэффициентСторно = 1,ВидДвиженияНакопления.Приход,ВидДвиженияНакопления.Расход);
			СтрокаДвиженийКонтрагенты.Активность			= Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвиженийЗаявки.мПериод				= ?(ДатаРасхода='00010101',Дата,ДатаРасхода);
	НаборДвиженийЗаявки.мТаблицаДвижений	= ТаблицаДвиженийЗаявки;
	Движения.ЗаявкиНаРасходованиеСредств.ВыполнитьПриход();
	
	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ВключатьВПлатежныйКалендарь Тогда
		
		НаборДвиженийКонтрагенты.мТаблицаДвижений	= ТаблицаДвиженийКонтрагенты;
		НаборДвиженийКонтрагенты.ВыполнитьДвижения();
				
	КонецЕсли;
	
	//Если используется механизм согласования заявок, и заявка еще не прошла по маршуту утверждения 
	//	- добавим запись в регистр СостоянияСогласования
	НаборЗаписейСостояниеСогласования = РегистрыСведений.СостоянияСогласованияЗаявок.СоздатьНаборЗаписей();
	НаборЗаписейСостояниеСогласования.Отбор.Заявка.Установить(Ссылка);
	НаборЗаписейСостояниеСогласования.Прочитать();
	Если УправлениеДенежнымиСредствами.ИспользуетсяСогласованиеЗаявок(Организация, Дата) Тогда
		Если НаборЗаписейСостояниеСогласования.Количество() > 1 Тогда
			//Заявка уже пошла по маршруту согласования
			Возврат;
		КонецЕсли;
		МаршрутСогласования = УправлениеДенежнымиСредствами.ОпределитьМаршрутСогласования(ЦФО);
		Если НЕ ЗначениеЗаполнено(МаршрутСогласования) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось определить маршрут согласования заявки", Отказ, Заголовок);
			Возврат;
		КонецЕсли;
		//Уже есть запись с правильным маршрутом согласования
		Если НаборЗаписейСостояниеСогласования.Количество() = 1 И
			НаборЗаписейСостояниеСогласования[0].Этап = МаршрутСогласования Тогда
			Возврат;
		КонецЕсли;
		НаборЗаписейСостояниеСогласования.Очистить();
		НоваяЗапись = НаборЗаписейСостояниеСогласования.Добавить();
		
		НоваяЗапись.Период = ТекущаяДата();
		НоваяЗапись.Активность = Истина;
		НоваяЗапись.Заявка = Ссылка;
		НоваяЗапись.Пользователь = Ответственный;
		НоваяЗапись.Этап = МаршрутСогласования;
		НоваяЗапись.Уровень = МаршрутСогласования.Уровень() + 1;
		НоваяЗапись.Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
		
		НаборЗаписейСостояниеСогласования.Записать();
	ИначеЕсли НаборЗаписейСостояниеСогласования.Количество() > 0 Тогда
		//Если есть записи по этой заявке, а согласование не используется - очистим
		НаборЗаписейСостояниеСогласования.Очистить();
		НаборЗаписейСостояниеСогласования.Записать();
	КонецЕсли;
КонецПроцедуры // ДвиженияПоРегистрам() 

// Процедура выполняет заполнение реквизита Получатель значением по умолчанию.
//
Процедура ЗаполнитьПолучателя(глТекущийПользователь)
    СписокЗначений = Новый СписокЗначений;

	ВремПолучатель = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
		ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(глТекущийПользователь, "ОсновнойПоставщик", СписокЗначений).Значение;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
		ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(глТекущийПользователь, "ОсновнойПокупатель", СписокЗначений).Значение;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ И ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ Тогда
		ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(глТекущийПользователь, "ОсновнаяКассаККМ", СписокЗначений).Значение;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Получатель) Тогда
		Получатель = ВремПолучатель;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = ВремКонтрагент;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПолучателя()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если (Основание <> Неопределено) И (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание))) Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ДокументОснование = Основание;
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора по документу основанию.

	СпособЗаполнения = "Не заполнять";
	ВалютаДокумента  = мВалютаРегламентированногоУчета;
	
	глТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		Если ЗначениеЗаполнено(Основание.ДатаОплаты) Тогда
			ДатаРасхода = Основание.ДатаОплаты;
		Иначе
			#Если Клиент Тогда
				ДатаРасхода = РабочаяДата;
			#Иначе
				ДатаРасхода = ТекущаяДата();
			#КонецЕсли
		КонецЕсли;
		ДокументОснование = Основание;
		СтрокаПлатеж.ДоговорКонтрагента            = Основание.ДоговорКонтрагента;
        //СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000009");
		
		СтруктураКурсаВзаиморасчетов               = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаРасхода);
		СтрокаПлатеж.КурсВзаиморасчетов            = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов       = СтруктураКурсаВзаиморасчетов.Кратность;
		
		
		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
				СтрокаПлатеж.Сделка=Основание;
			ИначеЕсли ТипЗнч(Основание.ДокументОснование)=Тип("ДокументСсылка.ЗаказПоставщику") 
				И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
				ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом) Тогда
				СтрокаПлатеж.Сделка=Основание.ДокументОснование;

			КонецЕсли;
			
		КонецЕсли;
		
		ВидОперации	= Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		
		Если ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница) Тогда
			
			Если ТипЗнч(Основание.СтруктурнаяЕдиница)=Тип("СправочникСсылка.Кассы") Тогда
				ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
			Иначе
				ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные;
			КонецЕсли;
			
			БанковскийСчетКасса = Основание.СтруктурнаяЕдиница;
		Иначе
			ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
			БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
		КонецЕсли;

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") И Основание.Проведен  Тогда
			СпособЗаполнения = "По заказу";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,КонецДня(ДатаРасхода));
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		ЦФО = Основание.Подразделение;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю
		Иначе
			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		КонецЕсли;

		Контрагент  = Основание.Контрагент;
		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
        СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		Если ТипЗнч(Основание) <> Тип("ДокументСсылка.ПоступлениеДопРасходов") И 
			УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
			Если ЗначениеЗаполнено(Основание.Проект) Тогда
				СтрокаПлатеж.Проект=Основание.Проект;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаПлатеж.Сделка = Основание.Сделка;
		Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
		КонецЕсли;
		
		Если Основание.Проведен И ТипЗнч(Основание) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			СпособЗаполнения = "По взаиморасчетам";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;
		
		ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
		БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
		
		Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;

		СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда

		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику;
		ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
		
		Получатель                       = Основание.ФизЛицо;
		РасчетныйДокумент                = Основание;
		ВалютаВзаиморасчетовПодотчетника = Основание.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность;
		
		СпособЗаполнения = "По взаиморасчетам с подотчетным лицом";
		
		БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
		
		Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.БюджетнаяОперация") Тогда
		
		ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		Контрагент = Основание.Контрагент;
		ВалютаДокумента=Основание.ВалютаДокумента;
		
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		СтрокаПлатеж=РасшифровкаПлатежа[0];
		
		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов=ВалютаДокумента;
		Иначе
			ВалютаВзаиморасчетов=СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		// Получаем курсы валют
		СтруктураГруппаВалют = Новый Структура;
		СтруктураГруппаВалют.Вставить("ВалютаВзаиморасчетов",ВалютаВзаиморасчетов.Код);
		СтруктураГруппаВалют.Вставить("ВалютаДокумента",ВалютаДокумента.Код);
		СтруктураГруппаВалют.Вставить("ВалютаОперации",Основание.ВалютаДокумента.Код);
		
		СтруктураКурсыВалют=УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,Дата);
		
		КурсДокумента=СтруктураКурсыВалют.ВалютаДокументаКурс;
		КратностьДокумента=СтруктураКурсыВалют.ВалютаДокументаКратность;
		
		СтрокаПлатеж.КурсВзаиморасчетов=СтруктураКурсыВалют.ВалютаВзаиморасчетовКурс;
		СтрокаПлатеж.КратностьВзаиморасчетов=СтруктураКурсыВалют.ВалютаВзаиморасчетовКратность;
		СтрокаПлатеж.Проект=Основание.Проект;
		ЦФО=Основание.ЦФО;
		Номенклатура=Основание.Номенклатура;
		
		КурсОперации=СтруктураКурсыВалют.ВалютаОперацииКурс;
		КратностьОперации=СтруктураКурсыВалют.ВалютаОперацииКратность;
		
		СуммаДокумента=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Основание.Сумма,
		Основание.ВалютаДокумента, 
		ВалютаДокумента,
		КурсОперации, КурсДокумента,
		КратностьОперации, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		СтрокаПлатеж.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента,
		ВалютаДокумента, 
		ВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда

			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю;
			ФормаОплаты =Перечисления.ВидыДенежныхСредств.Наличные;
			Контрагент	= Основание.Контрагент;
			
			СтрокаПлатеж.ДоговорКонтрагента=Основание.ДоговорКонтрагента;
			
			СпособЗаполнения = "По сумме документа";

			СтрокаПлатеж.Сделка = Основание.Сделка;
			Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			КонецЕсли;
			
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,Дата);
			СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
			
			БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
			
			Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
				ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
			Иначе
				ВалютаДокумента=мВалютаРегламентированногоУчета;
			КонецЕсли;
			
			СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсДокумента      = СтруктураКурсаДокумента.Курс;
			КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Возврат денежных средств от поставщика".
			Возврат;
			
		//Смартис Лиманчук начало 05.11.2012
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщикомНал Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Возврат денежных средств от поставщика".
			Возврат;
			
		//Смартис Лиманчук окончание 05.11.2012
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Возврат денежных средств от подотчетника".
			Возврат;
			
		//Смартис Лиманчук начало 01.11.2012
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетникомНал Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Возврат денежных средств от подотчетника".
			Возврат;
			
		//Смартис Лиманчук окончание 01.11.2012
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Прием розничной выручки".
			Возврат;
			
		//Смартис Лиманчук начало 01.11.2012	
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручкаНал Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Прием розничной выручки".
			Возврат;
		//Смартис Лиманчук окончание 01.11.2012
		
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Прочий приход денежных средств".
			Возврат;
			
		//Смартис Лиманчук начало 05.11.2012
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочееНал Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Прочий приход денежных средств".
			Возврат;
			
		//Смартис Лиманчук окончание 05.11.2012	
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками;
		ФормаОплаты = Перечисления.ВидыДенежныхСредств.Наличные;
		Получатель  = Основание.ФизЛицо;
		РасчетныйДокумент = Основание;
		ВалютаВзаиморасчетовПодотчетника = Основание.ВалютаДокумента;
		
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования      = СтруктураКурсаОснования.Курс;
		КратностьОснования = СтруктураКурсаОснования.Кратность;

		БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
		
		Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		СтрокаПлатеж.СуммаВзаиморасчетов = Основание.СуммаЗайма;

		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
		//Если НЕ ПроверитьОтветственного(ПараметрыСеанса.ТекущийПользователь) Тогда
		//	//отказ 
		//	Возврат;
		//КонецЕсли;
        //Запрос = Новый Запрос;
        //Запрос.Текст = "ВЫБРАТЬ
        //|	СвязанныеДокументы.Ссылка
        //|ИЗ
        //|	КритерийОтбора.СвязанныеДокументы КАК СвязанныеДокументы
        //|ГДЕ
        //|	СвязанныеДокументы.Ссылка = &Ссылка";
        //Запрос.УстановитьПараметр("", );
        //РезультатЗапроса = Запрос.Выполнить();
        
         
		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП;
		ЗарплатнаяВедомость = Основание;
		СуммаДокумента = Основание.СуммаВыплаты;
		Организация = Основание.Организация;
		//БанковскийСчетКасса = Организация.ОсновнойБанковскийСчет;
		ФормаОплаты = Перечисления.ВидыДенежныхСредств.Наличные;
		Гривна = Справочники.Валюты.НайтиПоКоду("980");
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(Гривна, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000004");
		СтрокаПлатеж.СуммаВзаиморасчетов = Основание.СуммаВыплаты;
		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Гривна, Основание.Дата);
		КурсОснования      = СтруктураКурсаОснования.Курс;
		КратностьОснования = СтруктураКурсаОснования.Кратность;
		СуммаДокумента = Основание.СуммаВыплаты;
		Если НЕ Основание.РаботникиОрганизации.Количество() > 1 Тогда
			Получатель = Основание.РаботникиОрганизации[0].ФизЛицо;			
		КонецЕсли; 
	    Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение КАК ЦФО
		|ИЗ
		|	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
		|ГДЕ
		|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации = &ПодразделениеОрганизации";
		Запрос.УстановитьПараметр("ПодразделениеОрганизации", Основание.ПодразделениеОрганизации);
		ТЗПодразделение = Запрос.Выполнить().Выгрузить();
		Если ТЗПодразделение.Количество() > 0 Тогда
			ЦФО = ТЗПодразделение [0].ЦФО;	
		КонецЕсли;		 		 
	КонецЕсли;

	Если СпособЗаполнения = "По заказу" Тогда

		ЗаполнитьПоЗаказу(Основание,СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По взаиморасчетам" Тогда
		УправлениеДенежнымиСредствами.ЗаполнитьПоВзаиморасчетамУпр(ВалютаДокумента,КурсДокумента,КратностьДокумента,СтрокаПлатеж,-1);
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	ИначеЕсли СпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда
		
		// Если основание - отчет комитенту, то надо вычесть вознаграждение
		ОснованиеСуммаДокумента = Основание.СуммаДокумента;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ОснованиеСуммаДокумента = ?(Основание.УдержатьКомиссионноеВознаграждение, ОснованиеСуммаДокумента - Основание.СуммаВознаграждения, ОснованиеСуммаДокумента);
		КонецЕсли;

		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                 КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента      = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;

	КонецЕсли;

	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойОтветственный");
	
	// Заполнить реквизиты значениями по умолчанию.
	УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, РасшифровкаПлатежа);
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж, ВидОперации);
	Если НЕ ЗначениеЗаполнено(ЦФО) Тогда
		ЦФО = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновноеПодразделение");
	КонецЕсли;
	
	ЗаполнитьПолучателя(глТекущийПользователь);
	
	Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	Если НЕ ЗначениеЗаполнено(ДатаРасхода) Тогда
    	Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Вы не указали дату расхода";
        Сообщение.Сообщить(); 
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП 
        И НЕ ЗначениеЗаполнено(ЗарплатнаяВедомость) Тогда
    	Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Вы не указали зарплатную ведомость";
        Сообщение.Сообщить(); 
        Отказ = Истина;
        Возврат;
    КонецЕсли; 
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	Если РазмещениеЗаявки.Итог("СуммаПлатежа")>СуммаДокумента Тогда
		Сообщить(Заголовок+" 
		|сумма размещения превышает сумму документа.");
		
		Отказ=Истина;
		
	КонецЕсли;

	СтруктураДанныхШапки=Новый Структура;

	СтруктураДанныхШапки.Вставить("СценарийПериодичность",Сценарий.Периодичность);
	СтруктураДанныхШапки.Вставить("СценарийВалюта",Сценарий.Валюта);

	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",мВалютаУправленческогоУчета.Код);
	СтруктураГруппаВалют.Вставить("ВалютаДокумента",ВалютаДокумента.Код);
	
	СтруктураКурсыВалют=УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,?(ДатаРасхода='00010101',Дата,КонецДня(ДатаРасхода)));

	Если Не Отказ Тогда

		ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок, СтруктураКурсыВалют);

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// Удаление движений по регистру СостоянияСогласованияЗаявок, если заявка была подготовлена
	НаборЗаписейСостояниеСогласования = РегистрыСведений.СостоянияСогласованияЗаявок.СоздатьНаборЗаписей();
	НаборЗаписейСостояниеСогласования.Отбор.Заявка.Установить(Ссылка);
	НаборЗаписейСостояниеСогласования.Прочитать();
	Если НаборЗаписейСостояниеСогласования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если УправлениеДенежнымиСредствами.ИспользуетсяСогласованиеЗаявок(Организация, Дата) Тогда
		Если НаборЗаписейСостояниеСогласования.Количество() > 1 Тогда
			//Заявка уже пошла по маршруту согласования, не следует ничего менять
			Возврат;
		КонецЕсли;
		//Если в наборе записей только одна запись - значит заявка только подготовлена.
		//Очистим набор записей
		НаборЗаписейСостояниеСогласования.Очистить();
		НаборЗаписейСостояниеСогласования.Записать();
	ИначеЕсли НаборЗаписейСостояниеСогласования.Количество() > 0 Тогда
		//Если есть записи по этой заявке, а согласование не используется - очистим
		НаборЗаписейСостояниеСогласования.Очистить();
		НаборЗаписейСостояниеСогласования.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	ТекстОшибки = "";
	Если НЕ (УправлениеДенежнымиСредствами.РазрешеноИзменениеЗаявки(Ссылка, ТекстОшибки) ИЛИ ЗначениеЗаполнено(ДатаРасхода)) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ,,, Ссылка);
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;

	// Заполнить реквизиты значениями по умолчанию.
	УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, РасшифровкаПлатежа,, ОбъектКопирования);
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж, ВидОперации);
	КонецЕсли;
	
	Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ПроверяемыеРеквизиты.Добавить("Контрагент");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		ПроверяемыеРеквизиты.Добавить("Получатель");
		ПроверяемыеРеквизиты.Добавить("ВалютаВзаиморасчетовПодотчетника");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
				
	Иначе
		
		ПроверяемыеРеквизиты.Добавить("ВалютаДокумента");
		
	КонецЕсли;
	
	Если ВключатьВПлатежныйКалендарь Тогда
		
		ПроверяемыеРеквизиты.Добавить("ФормаОплаты");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		
		Если ПроверяемыеРеквизиты.Найти("ВалютаДокумента") = Неопределено Тогда
			ПроверяемыеРеквизиты.Добавить("ВалютаДокумента");			
		КонецЕсли; 
	КонецЕсли;
	
	ПроверитьЗаполнениеТЧ(Отказ);
	
КонецПроцедуры

Функция ПроверитьОтветственного(Ответственный)
	Если ЗначениеЗаполнено(ЗарплатнаяВедомость) Тогда
		Для каждого Строка Из ЗарплатнаяВедомость.РаботникиОрганизации Цикл
			Если Строка.Сотрудник = Ответственный.ФизЛицо Тогда
				Возврат Истина;		
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Сообщить("В зарплатной ведомости не найден текущий пользователь, либо к пользователю не привязано физ. лицо");
	Возврат Ложь;
КонецФункции
 
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета=глЗначениеПеременной("ВалютаУправленческогоУчета");

